{"sha": "ee1a757231c05815f7e2f9e5e0ced98b380c0416", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUxYTc1NzIzMWMwNTgxNWY3ZTJmOWU1ZTBjZWQ5OGIzODBjMDQxNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-12-12T11:49:31Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-12-12T11:49:31Z"}, "message": "[multiple changes]\n\n2011-12-12  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_disp.adb: Minor reformatting.\n\n2011-12-12  Tristan Gingold  <gingold@adacore.com>\n\n\t* gnatls.adb (Search_RTS): New procedure.\n\t(Scan_Ls_Arg): Move code that search the RTS.\n\t(Gnatls): search the RTS later.\n\t* prj-env.ads, prj-env.adb (Get_Runtime_Path): New function.\n\n2011-12-12  Ed Falis  <falis@adacore.com>\n\n\t* sysdep.c: Fix treatment of VxWorks task options so that run-times\n\tbuilt with __SPE__ get option VX_SPE_TASK while others get VX_FP_TASK.\n\n2011-12-12  Bob Duff  <duff@adacore.com>\n\n\t* sem_type.adb, sem_type.ads, sem_ch4.adb, treepr.adb, treepr.ads:\n\tMinor cleanup and fiddling with debug printouts.\n\n2011-12-12  Vincent Celier  <celier@adacore.com>\n\n\t* prj-nmsc.adb (Get_Directories): For a non extending project,\n\talways get a declared object and/or exec directory if it already\n\texists, even when there are no sources, but do not create them.\n\n2011-12-12  Bob Duff  <duff@adacore.com>\n\n\t* sem_res.adb (Resolve): Deal with the case where an abstract\n\toperator is called with operands of type universal_integer.\n\n2011-12-12  Thomas Quinot  <quinot@adacore.com>\n\n\t* par_sco.adb: Minor fix to dominance marker referencing WHILE\n\tdecision.\n\nFrom-SVN: r182227", "tree": {"sha": "c5a05d81342446366f864e0be7b46fe5f6196617", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5a05d81342446366f864e0be7b46fe5f6196617"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee1a757231c05815f7e2f9e5e0ced98b380c0416", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee1a757231c05815f7e2f9e5e0ced98b380c0416", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee1a757231c05815f7e2f9e5e0ced98b380c0416", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee1a757231c05815f7e2f9e5e0ced98b380c0416/comments", "author": null, "committer": null, "parents": [{"sha": "e8bd500e2dcdfdd5f798e403662942d0dc3d6a86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8bd500e2dcdfdd5f798e403662942d0dc3d6a86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8bd500e2dcdfdd5f798e403662942d0dc3d6a86"}], "stats": {"total": 420, "additions": 330, "deletions": 90}, "files": [{"sha": "afb9062a868c871475905d6e259092dc11092598", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1a757231c05815f7e2f9e5e0ced98b380c0416/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1a757231c05815f7e2f9e5e0ced98b380c0416/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ee1a757231c05815f7e2f9e5e0ced98b380c0416", "patch": "@@ -1,3 +1,40 @@\n+2011-12-12  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_disp.adb: Minor reformatting.\n+\n+2011-12-12  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* gnatls.adb (Search_RTS): New procedure.\n+\t(Scan_Ls_Arg): Move code that search the RTS.\n+\t(Gnatls): search the RTS later.\n+\t* prj-env.ads, prj-env.adb (Get_Runtime_Path): New function.\n+\n+2011-12-12  Ed Falis  <falis@adacore.com>\n+\n+\t* sysdep.c: Fix treatment of VxWorks task options so that run-times\n+\tbuilt with __SPE__ get option VX_SPE_TASK while others get VX_FP_TASK.\n+\n+2011-12-12  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_type.adb, sem_type.ads, sem_ch4.adb, treepr.adb, treepr.ads:\n+\tMinor cleanup and fiddling with debug printouts.\n+\n+2011-12-12  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj-nmsc.adb (Get_Directories): For a non extending project,\n+\talways get a declared object and/or exec directory if it already\n+\texists, even when there are no sources, but do not create them.\n+\n+2011-12-12  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_res.adb (Resolve): Deal with the case where an abstract\n+\toperator is called with operands of type universal_integer.\n+\n+2011-12-12  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* par_sco.adb: Minor fix to dominance marker referencing WHILE\n+\tdecision.\n+\n 2011-12-12  Tristan Gingold  <gingold@adacore.com>\n \n \t* mlib-tgt-specific-xi.adb: (Get_Target_Prefix): Simplify code."}, {"sha": "df998e91e791fa2eaada5b52aa3974cfcde9d976", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1a757231c05815f7e2f9e5e0ced98b380c0416/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1a757231c05815f7e2f9e5e0ced98b380c0416/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=ee1a757231c05815f7e2f9e5e0ced98b380c0416", "patch": "@@ -4852,8 +4852,8 @@ package body Exp_Disp is\n       --            Transportable      => <<boolean-value>>,\n       --            Type_Is_Abstract   => <<boolean-value>>,\n       --            Needs_Finalization => <<boolean-value>>,\n-      --            [ Size_Func         => Size_Prim'Access ]\n-      --            [ Interfaces_Table  => <<access-value>> ]\n+      --            [ Size_Func         => Size_Prim'Access, ]\n+      --            [ Interfaces_Table  => <<access-value>>, ]\n       --            [ SSD               => SSD_Table'Address ]\n       --            Tags_Table         => (0 => null,\n       --                                   1 => Parent'Tag\n@@ -4900,7 +4900,7 @@ package body Exp_Disp is\n       Append_To (TSD_Aggr_List,\n         Unchecked_Convert_To (RTE (RE_Cstring_Ptr),\n           Make_Attribute_Reference (Loc,\n-            Prefix => New_Reference_To (Exname, Loc),\n+            Prefix         => New_Reference_To (Exname, Loc),\n             Attribute_Name => Name_Address)));\n \n       --  External_Tag of a local tagged type"}, {"sha": "ac00ec84d9e21d9ff0f2962d20d709c22f8dd670", "filename": "gcc/ada/gnatls.adb", "status": "modified", "additions": 66, "deletions": 32, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1a757231c05815f7e2f9e5e0ced98b380c0416/gcc%2Fada%2Fgnatls.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1a757231c05815f7e2f9e5e0ced98b380c0416/gcc%2Fada%2Fgnatls.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatls.adb?ref=ee1a757231c05815f7e2f9e5e0ced98b380c0416", "patch": "@@ -75,7 +75,7 @@ procedure Gnatls is\n       Value : String_Access;\n       Next  : Dir_Ref;\n    end record;\n-   --  ??? comment needed\n+   --  Simply linked list of dirs\n \n    First_Source_Dir : Dir_Ref;\n    Last_Source_Dir  : Dir_Ref;\n@@ -169,6 +169,9 @@ procedure Gnatls is\n    procedure Scan_Ls_Arg (Argv : String);\n    --  Scan and process lser specific arguments. Argv is a single argument\n \n+   procedure Search_RTS (Name : String);\n+   --  Find include and objects path for the RTS name.\n+\n    procedure Usage;\n    --  Print usage message\n \n@@ -1176,6 +1179,62 @@ procedure Gnatls is\n       end if;\n    end Reset_Print;\n \n+   ----------------\n+   -- Search_RTS --\n+   ----------------\n+\n+   procedure Search_RTS (Name : String) is\n+      Src_Path : String_Ptr;\n+      Lib_Path : String_Ptr;\n+      --  Pathes for source and include subdirs\n+\n+      Rts_Full_Path : String_Access;\n+      --  Full path for RTS project\n+   begin\n+      --  Try to find the RTS\n+\n+      Src_Path := Get_RTS_Search_Dir (Name, Include);\n+      Lib_Path := Get_RTS_Search_Dir (Name, Objects);\n+\n+      --  For non-project RTS, both the include and the objects directories\n+      --  must be present.\n+\n+      if Src_Path /= null and then Lib_Path /= null then\n+         Add_Search_Dirs (Src_Path, Include);\n+         Add_Search_Dirs (Lib_Path, Objects);\n+         return;\n+      end if;\n+\n+      if Lib_Path /= null then\n+         Osint.Fail (\"RTS path not valid: missing adainclude directory\");\n+\n+      elsif Src_Path /= null then\n+         Osint.Fail (\"RTS path not valid: missing adalib directory\");\n+\n+      end if;\n+\n+      --  Try to find the RTS on the project path.  First setup the project\n+      --  path.\n+\n+      Initialize_Default_Project_Path\n+        (Prj_Path, Target_Name => Sdefault.Target_Name.all);\n+\n+      Rts_Full_Path := Get_Runtime_Path (Prj_Path, Name);\n+      if Rts_Full_Path /= null then\n+         --  Directory name was found on the project path.  Look for the\n+         --  include subdir(s).\n+\n+         Src_Path := Get_RTS_Search_Dir (Name, Include);\n+         if Src_Path /= null then\n+            Add_Search_Dirs (Src_Path, Include);\n+            return;\n+         end if;\n+      end if;\n+\n+      Osint.Fail (\"RTS path not valid: missing \" &\n+                    \"adainclude and adalib directories\");\n+   end Search_RTS;\n+\n    -------------------\n    -- Scan_Ls_Arg --\n    -------------------\n@@ -1326,37 +1385,6 @@ procedure Gnatls is\n \n                Opt.No_Stdinc := True;\n                Opt.RTS_Switch := True;\n-\n-               declare\n-                  Src_Path_Name : constant String_Ptr :=\n-                                    Get_RTS_Search_Dir\n-                                      (Argv (7 .. Argv'Last), Include);\n-                  Lib_Path_Name : constant String_Ptr :=\n-                                    Get_RTS_Search_Dir\n-                                      (Argv (7 .. Argv'Last), Objects);\n-\n-               begin\n-                  if Src_Path_Name /= null\n-                    and then Lib_Path_Name /= null\n-                  then\n-                     Add_Search_Dirs (Src_Path_Name, Include);\n-                     Add_Search_Dirs (Lib_Path_Name, Objects);\n-\n-                  elsif Src_Path_Name = null\n-                    and then Lib_Path_Name = null\n-                  then\n-                     Osint.Fail (\"RTS path not valid: missing \" &\n-                                 \"adainclude and adalib directories\");\n-\n-                  elsif Src_Path_Name = null then\n-                     Osint.Fail (\"RTS path not valid: missing \" &\n-                                 \"adainclude directory\");\n-\n-                  elsif Lib_Path_Name = null then\n-                     Osint.Fail (\"RTS path not valid: missing \" &\n-                                 \"adalib directory\");\n-                  end if;\n-               end;\n             end if;\n          end if;\n \n@@ -1521,6 +1549,12 @@ begin\n       Exit_Program (E_Fatal);\n    end if;\n \n+   --  Handle --RTS switch\n+\n+   if RTS_Specified /= null then\n+      Search_RTS (RTS_Specified.all);\n+   end if;\n+\n    --  Add the source and object directories specified on the command line, if\n    --  any, to the searched directories.\n "}, {"sha": "28fa18681ce92d40abefadf88a89bdf435ff6b8b", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1a757231c05815f7e2f9e5e0ced98b380c0416/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1a757231c05815f7e2f9e5e0ced98b380c0416/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=ee1a757231c05815f7e2f9e5e0ced98b380c0416", "patch": "@@ -1482,8 +1482,10 @@ package body Par_SCO is\n                            Process_Decisions_Defer (Condition (ISC), 'W');\n \n                            --  Set more specific dominant for inner statements\n+                           --  (the control sloc for the decision is that of\n+                           --  the WHILE token).\n \n-                           Inner_Dominant := ('T', N);\n+                           Inner_Dominant := ('T', ISC);\n \n                         --  For loop\n "}, {"sha": "7cd1fe5fe8b4da435e7eb522c150528bd88b683f", "filename": "gcc/ada/prj-env.adb", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1a757231c05815f7e2f9e5e0ced98b380c0416/gcc%2Fada%2Fprj-env.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1a757231c05815f7e2f9e5e0ced98b380c0416/gcc%2Fada%2Fprj-env.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-env.adb?ref=ee1a757231c05815f7e2f9e5e0ced98b380c0416", "patch": "@@ -1401,6 +1401,35 @@ package body Prj.Env is\n       end if;\n    end Get_Reference;\n \n+   ----------------------\n+   -- Get_Runtime_Path --\n+   ----------------------\n+\n+   function Get_Runtime_Path (Self : Project_Search_Path; Name : String)\n+     return String_Access is\n+      function Is_Base_Name (Path : String) return Boolean;\n+      --  Returns True if Path has no directory separator\n+\n+      function Is_Base_Name (Path : String) return Boolean is\n+      begin\n+         for I in Path'Range loop\n+            if Path (I) = Directory_Separator or else Path (I) = '/' then\n+               return False;\n+            end if;\n+         end loop;\n+         return True;\n+      end Is_Base_Name;\n+\n+      function Find_Rts_In_Path is new Prj.Env.Find_Name_In_Path\n+        (Check_Filename => Is_Directory);\n+   begin\n+      if not Is_Base_Name (Name) then\n+         return Find_Rts_In_Path (Self, Name);\n+      else\n+         return null;\n+      end if;\n+   end Get_Runtime_Path;\n+\n    ----------------\n    -- Initialize --\n    ----------------"}, {"sha": "0bdaafa58627ce345d92586d51e1fe499caf09a9", "filename": "gcc/ada/prj-env.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1a757231c05815f7e2f9e5e0ced98b380c0416/gcc%2Fada%2Fprj-env.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1a757231c05815f7e2f9e5e0ced98b380c0416/gcc%2Fada%2Fprj-env.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-env.ads?ref=ee1a757231c05815f7e2f9e5e0ced98b380c0416", "patch": "@@ -236,6 +236,13 @@ package Prj.Env is\n    --\n    --  Returns No_Name if no such project was found\n \n+   function Get_Runtime_Path (Self : Project_Search_Path; Name : String)\n+     return String_Access;\n+   --  Compute the full path for the project-based runtime name.  It first\n+   --  checks that name is not a simple name (must has a path separator in it),\n+   --  and returns null in case of failure.  This check might be removed in the\n+   --  future.  The name is simply searched on the project path.\n+\n private\n    package Projects_Paths is new GNAT.Dynamic_HTables.Simple_HTable\n      (Header_Num => Header_Num,"}, {"sha": "be644828594ee29b95a4bfadf1c5b94ac5646a7a", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1a757231c05815f7e2f9e5e0ced98b380c0416/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1a757231c05815f7e2f9e5e0ced98b380c0416/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=ee1a757231c05815f7e2f9e5e0ced98b380c0416", "patch": "@@ -5284,8 +5284,24 @@ package body Prj.Nmsc is\n                \"Object_Dir cannot be empty\",\n                Object_Dir.Location, Project);\n \n-         elsif not No_Sources then\n+         elsif Setup_Projects and then\n+               No_Sources and then\n+               Project.Extends = No_Project\n+         then\n+            --  Do not create an object directory for a non extending project\n+            --  with no sources.\n+\n+            Locate_Directory\n+              (Project,\n+               File_Name_Type (Object_Dir.Value),\n+               Path             => Project.Object_Directory,\n+               Dir_Exists       => Dir_Exists,\n+               Data             => Data,\n+               Location         => Object_Dir.Location,\n+               Must_Exist       => False,\n+               Externally_Built => Project.Externally_Built);\n \n+         else\n             --  We check that the specified object directory does exist.\n             --  However, even when it doesn't exist, we set it to a default\n             --  value. This is for the benefit of tools that recover from\n@@ -5355,8 +5371,23 @@ package body Prj.Nmsc is\n                \"Exec_Dir cannot be empty\",\n                Exec_Dir.Location, Project);\n \n-         elsif not No_Sources then\n+         elsif Setup_Projects and then\n+               No_Sources and then\n+               Project.Extends = No_Project\n+         then\n+            --  Do not create an exec directory for a non extending project\n+            --  with no sources.\n \n+            Locate_Directory\n+              (Project,\n+               File_Name_Type (Exec_Dir.Value),\n+               Path             => Project.Exec_Directory,\n+               Dir_Exists       => Dir_Exists,\n+               Data             => Data,\n+               Location         => Exec_Dir.Location,\n+               Externally_Built => Project.Externally_Built);\n+\n+         else\n             --  We check that the specified exec directory does exist\n \n             Locate_Directory"}, {"sha": "7e8fed1d85231a89a735ab27c79c95153f0b9613", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1a757231c05815f7e2f9e5e0ced98b380c0416/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1a757231c05815f7e2f9e5e0ced98b380c0416/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=ee1a757231c05815f7e2f9e5e0ced98b380c0416", "patch": "@@ -6219,6 +6219,11 @@ package body Sem_Ch4 is\n \n    begin\n       if Is_Overloaded (N) then\n+         if Debug_Flag_V then\n+            Write_Str (\"Remove_Abstract_Operations: \");\n+            Write_Overloads (N);\n+         end if;\n+\n          Get_First_Interp (N, I, It);\n \n          while Present (It.Nam) loop\n@@ -6412,6 +6417,11 @@ package body Sem_Ch4 is\n                end loop;\n             end if;\n          end if;\n+\n+         if Debug_Flag_V then\n+            Write_Str (\"Remove_Abstract_Operations done: \");\n+            Write_Overloads (N);\n+         end if;\n       end if;\n    end Remove_Abstract_Operations;\n "}, {"sha": "64ac6526b0b5f10c86466e7be77bf6c9702f7f32", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1a757231c05815f7e2f9e5e0ced98b380c0416/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1a757231c05815f7e2f9e5e0ced98b380c0416/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=ee1a757231c05815f7e2f9e5e0ced98b380c0416", "patch": "@@ -1989,6 +1989,9 @@ package body Sem_Res is\n       end if;\n \n       Debug_A_Entry (\"resolving  \", N);\n+      if Debug_Flag_V then\n+         Write_Overloads (N);\n+      end if;\n \n       if Comes_From_Source (N) then\n          if Is_Fixed_Point_Type (Typ) then\n@@ -2033,6 +2036,11 @@ package body Sem_Res is\n          Get_First_Interp (N, I, It);\n          Interp_Loop : while Present (It.Typ) loop\n \n+            if Debug_Flag_V then\n+               Write_Str (\"Interp: \");\n+               Write_Interp (It);\n+            end if;\n+\n             --  We are only interested in interpretations that are compatible\n             --  with the expected type, any other interpretations are ignored.\n \n@@ -2054,6 +2062,10 @@ package body Sem_Res is\n                  and then Typ /= Universal_Real\n                  and then Present (It.Abstract_Op)\n                then\n+                  if Debug_Flag_V then\n+                     Write_Line (\"Skip.\");\n+                  end if;\n+\n                   goto Continue;\n                end if;\n \n@@ -2572,9 +2584,36 @@ package body Sem_Res is\n          Resolution_Failed;\n          return;\n \n-      --  Here we have an acceptable interpretation for the context\n-\n       else\n+         --  In Ada 2005, if we have something like \"X : T := 2 + 2;\", where\n+         --  the \"+\" on T is abstract, and the operands are of universal type,\n+         --  the above code will have (incorrectly) resolved the \"+\" to the\n+         --  universal one in Standard. Therefore, we check for this case, and\n+         --  give an error. We can't do this earlier, because it would cause\n+         --  legal cases to get errors (when some other type has an abstract\n+         --  \"+\").\n+\n+         if Ada_Version >= Ada_2005 and then\n+           Nkind (N) in N_Op and then\n+           Is_Overloaded (N) and then\n+           Is_Universal_Numeric_Type (Etype (Entity (N)))\n+         then\n+            Get_First_Interp (N, I, It);\n+            while Present (It.Typ) loop\n+               if Present (It.Abstract_Op) and then\n+                 Etype (It.Abstract_Op) = Typ\n+               then\n+                  Error_Msg_NE\n+                    (\"cannot call abstract subprogram &!\", N, It.Abstract_Op);\n+                  return;\n+               end if;\n+\n+               Get_Next_Interp (I, It);\n+            end loop;\n+         end if;\n+\n+         --  Here we have an acceptable interpretation for the context\n+\n          --  Propagate type information and normalize tree for various\n          --  predefined operations. If the context only imposes a class of\n          --  types, rather than a specific type, propagate the actual type"}, {"sha": "0d10262fc282b6282f73ef178332437045bb8811", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1a757231c05815f7e2f9e5e0ced98b380c0416/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1a757231c05815f7e2f9e5e0ced98b380c0416/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=ee1a757231c05815f7e2f9e5e0ced98b380c0416", "patch": "@@ -46,6 +46,7 @@ with Stand;    use Stand;\n with Sinfo;    use Sinfo;\n with Snames;   use Snames;\n with Table;\n+with Treepr;   use Treepr;\n with Uintp;    use Uintp;\n \n package body Sem_Type is\n@@ -81,7 +82,7 @@ package body Sem_Type is\n \n    package All_Interp is new Table.Table (\n      Table_Component_Type => Interp,\n-     Table_Index_Type     => Int,\n+     Table_Index_Type     => Interp_Index,\n      Table_Low_Bound      => 0,\n      Table_Initial        => Alloc.All_Interp_Initial,\n      Table_Increment      => Alloc.All_Interp_Increment,\n@@ -3435,6 +3436,20 @@ package body Sem_Type is\n       end if;\n    end Valid_Comparison_Arg;\n \n+   ------------------\n+   -- Write_Interp --\n+   ------------------\n+\n+   procedure Write_Interp (It : Interp) is\n+   begin\n+      Write_Str (\"Nam: \");\n+      Print_Tree_Node (It.Nam);\n+      Write_Str (\"Typ: \");\n+      Print_Tree_Node (It.Typ);\n+      Write_Str (\"Abstract_Op: \");\n+      Print_Tree_Node (It.Abstract_Op);\n+   end Write_Interp;\n+\n    ----------------------\n    -- Write_Interp_Ref --\n    ----------------------\n@@ -3460,6 +3475,13 @@ package body Sem_Type is\n       Nam : Entity_Id;\n \n    begin\n+      Write_Str (\"Overloads: \");\n+      Print_Node_Briefly (N);\n+\n+      if Nkind (N) not in N_Has_Entity then\n+         return;\n+      end if;\n+\n       if not Is_Overloaded (N) then\n          Write_Str (\"Non-overloaded entity \");\n          Write_Eol;"}, {"sha": "2c5c1dba77810aa10bb6528f5b674c8cc48196e5", "filename": "gcc/ada/sem_type.ads", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1a757231c05815f7e2f9e5e0ced98b380c0416/gcc%2Fada%2Fsem_type.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1a757231c05815f7e2f9e5e0ced98b380c0416/gcc%2Fada%2Fsem_type.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.ads?ref=ee1a757231c05815f7e2f9e5e0ced98b380c0416", "patch": "@@ -73,7 +73,7 @@ package Sem_Type is\n \n    No_Interp : constant Interp := (Empty, Empty, Empty);\n \n-   subtype Interp_Index is Int;\n+   type Interp_Index is new Int;\n \n    ---------------------\n    -- Error Reporting --\n@@ -148,7 +148,7 @@ package Sem_Type is\n    --  The end of the list of interpretations is signalled by It.Nam = Empty.\n \n    procedure Remove_Interp (I : in out Interp_Index);\n-   --  Remove an interpretation that his hidden by another, or that does not\n+   --  Remove an interpretation that is hidden by another, or that does not\n    --  match the context. The value of I on input was set by a call to either\n    --  Get_First_Interp or Get_Next_Interp and references the interpretation\n    --  to be removed. The only allowed use of the exit value of I is as input\n@@ -264,6 +264,9 @@ package Sem_Type is\n    --  A valid argument of a boolean operator is either some boolean type, or a\n    --  one-dimensional array of boolean type.\n \n+   procedure Write_Interp (It : Interp);\n+   --  Debugging procedure to display an Interp\n+\n    procedure Write_Interp_Ref (Map_Ptr : Int);\n    --  Debugging procedure to display entry in Interp_Map. Would not be needed\n    --  if it were possible to debug instantiations of Table."}, {"sha": "fbb4a00809ae742e95d79f025aba3144c8059db5", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1a757231c05815f7e2f9e5e0ced98b380c0416/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1a757231c05815f7e2f9e5e0ced98b380c0416/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=ee1a757231c05815f7e2f9e5e0ced98b380c0416", "patch": "@@ -850,7 +850,7 @@ __gnat_localtime_tzoff (const time_t *timer, long *off)\n    the options assigned to the current task (parent), so offering some user\n    level control over the options for a task hierarchy. It forces VX_FP_TASK\n    because it is almost always required. On processors with the SPE\n-   category, VX_SPE_TASK is needed to enable the SPE. */\n+   category, VX_SPE_TASK should be used instead to enable the SPE. */\n extern int __gnat_get_task_options (void);\n \n int\n@@ -861,10 +861,11 @@ __gnat_get_task_options (void)\n   /* Get the options for the task creator */\n   taskOptionsGet (taskIdSelf (), &options);\n \n-  /* Force VX_FP_TASK because it is almost always required */\n-  options |= VX_FP_TASK;\n-#if defined (__SPE__) && (! defined (__VXWORKSMILS__))\n+  /* Force VX_FP_TASK or VX_SPE_TASK as needed */\n+#if defined (__SPE__)\n   options |= VX_SPE_TASK;\n+#else\n+  options |= VX_FP_TASK;\n #endif\n \n   /* Mask those bits that are not under user control */"}, {"sha": "ed827ccdfcfd3ff2c9f5adec435b8a5ee4ba7db8", "filename": "gcc/ada/treepr.adb", "status": "modified", "additions": 65, "deletions": 43, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1a757231c05815f7e2f9e5e0ced98b380c0416/gcc%2Fada%2Ftreepr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1a757231c05815f7e2f9e5e0ced98b380c0416/gcc%2Fada%2Ftreepr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftreepr.adb?ref=ee1a757231c05815f7e2f9e5e0ced98b380c0416", "patch": "@@ -138,6 +138,9 @@ package body Treepr is\n    --  Print name from names table if currently in print phase, noop if in\n    --  marking phase. Note that the name is output in mixed case mode.\n \n+   procedure Print_Node_Header (N : Node_Id);\n+   --  Print header line used by Print_Node and Print_Node_Briefly\n+\n    procedure Print_Node_Kind (N : Node_Id);\n    --  Print node kind name in mixed case if in print phase, noop if in\n    --  marking phase.\n@@ -885,7 +888,6 @@ package body Treepr is\n       Prefix_Str_Char     : String (Prefix_Str'First .. Prefix_Str'Last + 1);\n \n       Sfile : Source_File_Index;\n-      Notes : Boolean;\n       Fmt   : UI_Format;\n \n    begin\n@@ -905,48 +907,7 @@ package body Treepr is\n       --  Print header line\n \n       Print_Str (Prefix_Str);\n-      Print_Node_Ref (N);\n-\n-      Notes := False;\n-\n-      if N > Atree_Private_Part.Nodes.Last then\n-         Print_Str (\" (no such node)\");\n-         Print_Eol;\n-         return;\n-      end if;\n-\n-      if Comes_From_Source (N) then\n-         Notes := True;\n-         Print_Str (\" (source\");\n-      end if;\n-\n-      if Analyzed (N) then\n-         if not Notes then\n-            Notes := True;\n-            Print_Str (\" (\");\n-         else\n-            Print_Str (\",\");\n-         end if;\n-\n-         Print_Str (\"analyzed\");\n-      end if;\n-\n-      if Error_Posted (N) then\n-         if not Notes then\n-            Notes := True;\n-            Print_Str (\" (\");\n-         else\n-            Print_Str (\",\");\n-         end if;\n-\n-         Print_Str (\"posted\");\n-      end if;\n-\n-      if Notes then\n-         Print_Char (')');\n-      end if;\n-\n-      Print_Eol;\n+      Print_Node_Header (N);\n \n       if Is_Rewrite_Substitution (N) then\n          Print_Str (Prefix_Str);\n@@ -1275,6 +1236,67 @@ package body Treepr is\n       end if;\n    end Print_Node;\n \n+   ------------------------\n+   -- Print_Node_Briefly --\n+   ------------------------\n+\n+   procedure Print_Node_Briefly (N : Node_Id) is\n+   begin\n+      Printing_Descendants := False;\n+      Phase := Printing;\n+      Print_Node_Header (N);\n+   end Print_Node_Briefly;\n+\n+   -----------------------\n+   -- Print_Node_Header --\n+   -----------------------\n+\n+   procedure Print_Node_Header (N : Node_Id) is\n+      Notes : Boolean := False;\n+\n+   begin\n+      Print_Node_Ref (N);\n+\n+      if N > Atree_Private_Part.Nodes.Last then\n+         Print_Str (\" (no such node)\");\n+         Print_Eol;\n+         return;\n+      end if;\n+\n+      if Comes_From_Source (N) then\n+         Notes := True;\n+         Print_Str (\" (source\");\n+      end if;\n+\n+      if Analyzed (N) then\n+         if not Notes then\n+            Notes := True;\n+            Print_Str (\" (\");\n+         else\n+            Print_Str (\",\");\n+         end if;\n+\n+         Print_Str (\"analyzed\");\n+      end if;\n+\n+      if Error_Posted (N) then\n+         if not Notes then\n+            Notes := True;\n+            Print_Str (\" (\");\n+         else\n+            Print_Str (\",\");\n+         end if;\n+\n+         Print_Str (\"posted\");\n+      end if;\n+\n+      if Notes then\n+         Print_Char (')');\n+      end if;\n+\n+      Print_Eol;\n+   end Print_Node_Header;\n+\n    ---------------------\n    -- Print_Node_Kind --\n    ---------------------"}, {"sha": "6e9541a8e9fcddb0288891da4295fa89df40225f", "filename": "gcc/ada/treepr.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1a757231c05815f7e2f9e5e0ced98b380c0416/gcc%2Fada%2Ftreepr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1a757231c05815f7e2f9e5e0ced98b380c0416/gcc%2Fada%2Ftreepr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftreepr.ads?ref=ee1a757231c05815f7e2f9e5e0ced98b380c0416", "patch": "@@ -37,6 +37,9 @@ package Treepr is\n    --  Prints a single tree node, without printing descendants. The Label\n    --  string is used to preface each line of the printed output.\n \n+   procedure Print_Node_Briefly (N : Node_Id);\n+   --  Terse version of Print_Tree_Node\n+\n    procedure Print_Tree_List (L : List_Id);\n    --  Prints a single node list, without printing the descendants of any\n    --  of the nodes in the list"}]}