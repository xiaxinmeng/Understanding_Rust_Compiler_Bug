{"sha": "cd7324181ab0c926357153f8031abfebc1dc8659", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q3MzI0MTgxYWIwYzkyNjM1NzE1M2Y4MDMxYWJmZWJjMWRjODY1OQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-08-06T18:12:49Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-08-06T18:12:49Z"}, "message": "c-common.h (enum c_tree_index): Add CTI_SIGNED_SIZE_TYPE and CTI_UNSIGNED_PTRDIFF_TYPE.\n\n\t* c-common.h (enum c_tree_index): Add CTI_SIGNED_SIZE_TYPE and\n\tCTI_UNSIGNED_PTRDIFF_TYPE.\n\t(signed_size_type_node): Define.\n\t(unsigned_ptrdiff_type_node): Define.\n\t* c-decl.c (init_decl_processing): Create the\n\tsigned_size_type_node and unsigned_ptrdiff_type_node types.\n\t* c-common.c (T_SC): Define.\n\t(T_SST): Define.\n\t(T_UPD): Define.\n\t(print_char_table): Use T_SST for %zd, %zi, %zn.  Use T_UPD for\n\t%to, %tu, %tx, %tX.  Allow %hhn (T_SC).  Add \"c\" to the flags for\n\t%s and %p.\n\t(scan_char_table): Use T_SC for %hhd, %hhi, %hhn.  Use T_SST for\n\t%zd, %zi, %zn.  Use T_UPD for %to, %tu, %tx, %tX.  Add \"c\" to the\n\tflags for %c, %s and %[.\n\t(check_format_info): Only allow leniency for signedness of targets\n\tof character pointers (when pedantic) for formats flagged with\n\t\"c\", so for strings but not for %hh formats.  When pedantic, don't\n\tallow character pointers to substitute for void pointers if a\n\tsecond level of indirection is present.\n\ntestsuite:\n\t* gcc.dg/c99-printf-1.c: New test.\n\nFrom-SVN: r35530", "tree": {"sha": "fde82f1201d096c62200c1724deb5ea25ea63afc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fde82f1201d096c62200c1724deb5ea25ea63afc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd7324181ab0c926357153f8031abfebc1dc8659", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd7324181ab0c926357153f8031abfebc1dc8659", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd7324181ab0c926357153f8031abfebc1dc8659", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd7324181ab0c926357153f8031abfebc1dc8659/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "470fc13d5bf498e837128848dd85c9358fafa765", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/470fc13d5bf498e837128848dd85c9358fafa765", "html_url": "https://github.com/Rust-GCC/gccrs/commit/470fc13d5bf498e837128848dd85c9358fafa765"}], "stats": {"total": 288, "additions": 271, "deletions": 17}, "files": [{"sha": "3c28983c1c7bd4cdaa0655d06f014ba107034bdb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd7324181ab0c926357153f8031abfebc1dc8659/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd7324181ab0c926357153f8031abfebc1dc8659/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd7324181ab0c926357153f8031abfebc1dc8659", "patch": "@@ -1,3 +1,26 @@\n+2000-08-06  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-common.h (enum c_tree_index): Add CTI_SIGNED_SIZE_TYPE and\n+\tCTI_UNSIGNED_PTRDIFF_TYPE.\n+\t(signed_size_type_node): Define.\n+\t(unsigned_ptrdiff_type_node): Define.\n+\t* c-decl.c (init_decl_processing): Create the\n+\tsigned_size_type_node and unsigned_ptrdiff_type_node types.\n+\t* c-common.c (T_SC): Define.\n+\t(T_SST): Define.\n+\t(T_UPD): Define.\n+\t(print_char_table): Use T_SST for %zd, %zi, %zn.  Use T_UPD for\n+\t%to, %tu, %tx, %tX.  Allow %hhn (T_SC).  Add \"c\" to the flags for\n+\t%s and %p.\n+\t(scan_char_table): Use T_SC for %hhd, %hhi, %hhn.  Use T_SST for\n+\t%zd, %zi, %zn.  Use T_UPD for %to, %tu, %tx, %tX.  Add \"c\" to the\n+\tflags for %c, %s and %[.\n+\t(check_format_info): Only allow leniency for signedness of targets\n+\tof character pointers (when pedantic) for formats flagged with\n+\t\"c\", so for strings but not for %hh formats.  When pedantic, don't\n+\tallow character pointers to substitute for void pointers if a\n+\tsecond level of indirection is present.\n+\n 2000-08-06  Kazu Hirata  <kazu@hxi.com>\n \n \t* invoke.texi (Options for Debugging Your Program or GCC): Update"}, {"sha": "b72f8f1cde8e349afc0cbe33a771eff63f221f18", "filename": "gcc/c-common.c", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd7324181ab0c926357153f8031abfebc1dc8659/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd7324181ab0c926357153f8031abfebc1dc8659/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=cd7324181ab0c926357153f8031abfebc1dc8659", "patch": "@@ -1190,12 +1190,15 @@ strip_attrs (specs_attrs)\n #define T_D\t&double_type_node\n #define T_LD\t&long_double_type_node\n #define T_C\t&char_type_node\n+#define T_SC\t&signed_char_type_node\n #define T_UC\t&unsigned_char_type_node\n #define T_V\t&void_type_node\n #define T_W\t&wchar_type_node\n #define T_WI\t&wint_type_node\n #define T_ST    &sizetype\n+#define T_SST   &signed_size_type_node\n #define T_PD    &ptrdiff_type_node\n+#define T_UPD   &unsigned_ptrdiff_type_node\n #define T_IM    NULL /* intmax_t not yet implemented.  */\n #define T_UIM   NULL /* uintmax_t not yet implemented.  */\n \n@@ -1233,33 +1236,33 @@ typedef struct {\n } format_char_info;\n \n static format_char_info print_char_table[] = {\n-  { \"di\",\t0,\tT_I,\tT_I,\tT_I,\tT_L,\tT_LL,\tT_LL,\tT_ST,\tT_PD,\tT_IM,\t\"-wp0 +'\"\t},\n-  { \"oxX\",\t0,\tT_UI,\tT_UI,\tT_UI,\tT_UL,\tT_ULL,\tT_ULL,\tT_ST,\tT_PD,\tT_UIM,\t\"-wp0#\"\t\t},\n-  { \"u\",\t0,\tT_UI,\tT_UI,\tT_UI,\tT_UL,\tT_ULL,\tT_ULL,\tT_ST,\tT_PD,\tT_UIM,\t\"-wp0'\"\t\t},\n+  { \"di\",\t0,\tT_I,\tT_I,\tT_I,\tT_L,\tT_LL,\tT_LL,\tT_SST,\tT_PD,\tT_IM,\t\"-wp0 +'\"\t},\n+  { \"oxX\",\t0,\tT_UI,\tT_UI,\tT_UI,\tT_UL,\tT_ULL,\tT_ULL,\tT_ST,\tT_UPD,\tT_UIM,\t\"-wp0#\"\t\t},\n+  { \"u\",\t0,\tT_UI,\tT_UI,\tT_UI,\tT_UL,\tT_ULL,\tT_ULL,\tT_ST,\tT_UPD,\tT_UIM,\t\"-wp0'\"\t\t},\n /* A GNU extension.  */\n   { \"m\",\t0,\tT_V,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"-wp\"\t\t},\n   { \"fFgG\",\t0,\tT_D,\tNULL,\tNULL,\tT_D,\tNULL,\tT_LD,\tNULL,\tNULL,\tNULL,\t\"-wp0 +#'\"\t},\n   { \"eEaA\",\t0,\tT_D,\tNULL,\tNULL,\tT_D,\tNULL,\tT_LD,\tNULL,\tNULL,\tNULL,\t\"-wp0 +#\"\t},\n   { \"c\",\t0,\tT_I,\tNULL,\tNULL,\tT_WI,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"-w\"\t\t},\n   { \"C\",\t0,\tT_WI,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"-w\"\t\t},\n-  { \"s\",\t1,\tT_C,\tNULL,\tNULL,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"-wp\"\t\t},\n+  { \"s\",\t1,\tT_C,\tNULL,\tNULL,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"-wpc\"\t\t},\n   { \"S\",\t1,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"-wp\"\t\t},\n-  { \"p\",\t1,\tT_V,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"-w\"\t\t},\n-  { \"n\",\t1,\tT_I,\tNULL,\tT_S,\tT_L,\tT_LL,\tNULL,\tT_ST,\tT_PD,\tT_IM,\t\"\"\t\t},\n+  { \"p\",\t1,\tT_V,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"-wc\"\t\t},\n+  { \"n\",\t1,\tT_I,\tT_SC,\tT_S,\tT_L,\tT_LL,\tNULL,\tT_SST,\tT_PD,\tT_IM,\t\"\"\t\t},\n   { NULL,\t0,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL\t\t}\n };\n \n static format_char_info scan_char_table[] = {\n-  { \"di\",\t1,\tT_I,\tT_C,\tT_S,\tT_L,\tT_LL,\tT_LL,\tT_ST,\tT_PD,\tT_IM,\t\"*\"\t},\n-  { \"ouxX\",\t1,\tT_UI,\tT_UC,\tT_US,\tT_UL,\tT_ULL,\tT_ULL,\tT_ST,\tT_PD,\tT_UIM,\t\"*\"\t},\n+  { \"di\",\t1,\tT_I,\tT_SC,\tT_S,\tT_L,\tT_LL,\tT_LL,\tT_SST,\tT_PD,\tT_IM,\t\"*\"\t},\n+  { \"ouxX\",\t1,\tT_UI,\tT_UC,\tT_US,\tT_UL,\tT_ULL,\tT_ULL,\tT_ST,\tT_UPD,\tT_UIM,\t\"*\"\t},\n   { \"efFgEGaA\",\t1,\tT_F,\tNULL,\tNULL,\tT_D,\tNULL,\tT_LD,\tNULL,\tNULL,\tNULL,\t\"*\"\t},\n-  { \"c\",\t1,\tT_C,\tNULL,\tNULL,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*\"\t},\n-  { \"s\",\t1,\tT_C,\tNULL,\tNULL,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*a\"\t},\n-  { \"[\",\t1,\tT_C,\tNULL,\tNULL,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*a\"\t},\n+  { \"c\",\t1,\tT_C,\tNULL,\tNULL,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*c\"\t},\n+  { \"s\",\t1,\tT_C,\tNULL,\tNULL,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*ac\"\t},\n+  { \"[\",\t1,\tT_C,\tNULL,\tNULL,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*ac\"\t},\n   { \"C\",\t1,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*\"\t},\n   { \"S\",\t1,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*a\"\t},\n   { \"p\",\t2,\tT_V,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*\"\t},\n-  { \"n\",\t1,\tT_I,\tT_C,\tT_S,\tT_L,\tT_LL,\tNULL,\tT_ST,\tT_PD,\tT_IM,\t\"\"\t},\n+  { \"n\",\t1,\tT_I,\tT_SC,\tT_S,\tT_L,\tT_LL,\tNULL,\tT_SST,\tT_PD,\tT_IM,\t\"\"\t},\n   { NULL,\t0,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL\t}\n };\n \n@@ -2074,8 +2077,10 @@ check_format_info (info, params)\n \t\t      || (DECL_P (cur_param) && TREE_READONLY (cur_param))))))\n \twarning (\"writing into constant object (arg %d)\", arg_num);\n \n-      /* Check whether the argument type is a character type.  */\n-      if (TREE_CODE (cur_type) != ERROR_MARK)\n+      /* Check whether the argument type is a character type.  This leniency\n+\t only applies to certain formats, flagged with 'c'.\n+      */\n+      if (TREE_CODE (cur_type) != ERROR_MARK && index (fci->flag_chars, 'c') != 0)\n \tchar_type_flag = (TYPE_MAIN_VARIANT (cur_type) == char_type_node\n \t\t\t  || TYPE_MAIN_VARIANT (cur_type) == signed_char_type_node\n \t\t\t  || TYPE_MAIN_VARIANT (cur_type) == unsigned_char_type_node);\n@@ -2093,7 +2098,7 @@ check_format_info (info, params)\n \t\t&& fci->pointer_count > 0\n \t\t&& (! pedantic\n \t\t    || TYPE_MAIN_VARIANT (cur_type) == void_type_node\n-\t\t    || char_type_flag))\n+\t\t    || (i == 1 && char_type_flag)))\n \t  /* Don't warn about differences merely in signedness, unless\n \t     -pedantic.  With -pedantic, warn if the type is a pointer\n \t     target and not a character type, and for character types at\n@@ -2109,8 +2114,7 @@ check_format_info (info, params)\n \t     equivalent but the above test won't consider them equivalent.  */\n \t  && ! (wanted_type == char_type_node\n \t\t&& (! pedantic || i < 2)\n-\t\t&& (TYPE_MAIN_VARIANT (cur_type) == signed_char_type_node\n-\t\t    || TYPE_MAIN_VARIANT (cur_type) == unsigned_char_type_node)))\n+\t\t&& char_type_flag))\n \t{\n \t  register const char *this;\n \t  register const char *that;"}, {"sha": "50823df10f751d6f42e330916febabebb7b32f78", "filename": "gcc/c-common.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd7324181ab0c926357153f8031abfebc1dc8659/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd7324181ab0c926357153f8031abfebc1dc8659/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=cd7324181ab0c926357153f8031abfebc1dc8659", "patch": "@@ -92,6 +92,8 @@ enum c_tree_index\n     CTI_SIGNED_WCHAR_TYPE,\n     CTI_UNSIGNED_WCHAR_TYPE,\n     CTI_WINT_TYPE,\n+    CTI_SIGNED_SIZE_TYPE, /* For format checking only.  */\n+    CTI_UNSIGNED_PTRDIFF_TYPE, /* For format checking only.  */\n     CTI_WIDEST_INT_LIT_TYPE,\n     CTI_WIDEST_UINT_LIT_TYPE,\n \n@@ -124,6 +126,8 @@ enum c_tree_index\n #define signed_wchar_type_node\t\tc_global_trees[CTI_SIGNED_WCHAR_TYPE]\n #define unsigned_wchar_type_node\tc_global_trees[CTI_UNSIGNED_WCHAR_TYPE]\n #define wint_type_node\t\t\tc_global_trees[CTI_WINT_TYPE]\n+#define signed_size_type_node\t\tc_global_trees[CTI_SIGNED_SIZE_TYPE]\n+#define unsigned_ptrdiff_type_node\tc_global_trees[CTI_UNSIGNED_PTRDIFF_TYPE]\n #define widest_integer_literal_type_node c_global_trees[CTI_WIDEST_INT_LIT_TYPE]\n #define widest_unsigned_literal_type_node c_global_trees[CTI_WIDEST_UINT_LIT_TYPE]\n "}, {"sha": "1f773d921076f53bb1d297ee35a5bb8d0ca9da20", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd7324181ab0c926357153f8031abfebc1dc8659/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd7324181ab0c926357153f8031abfebc1dc8659/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=cd7324181ab0c926357153f8031abfebc1dc8659", "patch": "@@ -3003,6 +3003,7 @@ init_decl_processing ()\n      Note that stddef.h uses `unsigned long',\n      and this must agree, even if long and int are the same size.  */\n   t = TREE_TYPE (IDENTIFIER_GLOBAL_VALUE (get_identifier (SIZE_TYPE)));\n+  signed_size_type_node = signed_type (t);\n   if (flag_traditional && TREE_UNSIGNED (t))\n     t = signed_type (t);\n     \n@@ -3086,6 +3087,7 @@ init_decl_processing ()\n     = build_function_type (integer_type_node, NULL_TREE);\n   ptrdiff_type_node\n     = TREE_TYPE (IDENTIFIER_GLOBAL_VALUE (get_identifier (PTRDIFF_TYPE)));\n+  unsigned_ptrdiff_type_node = unsigned_type (ptrdiff_type_node);\n \n   c_common_nodes_and_builtins (0, flag_no_builtin, flag_no_nonansi_builtin);\n "}, {"sha": "ac887f68f5afc5037219faa4fc18cd587b37bbdf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd7324181ab0c926357153f8031abfebc1dc8659/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd7324181ab0c926357153f8031abfebc1dc8659/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cd7324181ab0c926357153f8031abfebc1dc8659", "patch": "@@ -1,3 +1,7 @@\n+2000-08-06  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/c99-printf-1.c: New test.\n+\n 2000-08-06  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* gcc.c-torture/execute/20000801-4.x: Only xfail on x86."}, {"sha": "2e69399a633e0f079b4e24eb8b8c48bc7fb3c6c9", "filename": "gcc/testsuite/gcc.dg/c99-printf-1.c", "status": "added", "additions": 217, "deletions": 0, "changes": 217, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd7324181ab0c926357153f8031abfebc1dc8659/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-printf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd7324181ab0c926357153f8031abfebc1dc8659/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-printf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-printf-1.c?ref=cd7324181ab0c926357153f8031abfebc1dc8659", "patch": "@@ -0,0 +1,217 @@\n+/* Test for printf formats.  Formats using C99 features, including cases\n+   where C99 specifies some aspect of the format to be ignored or where\n+   the behaviour is undefined.\n+*/\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic -Wformat\" } */\n+\n+typedef __WCHAR_TYPE__ wchar_t;\n+typedef __WINT_TYPE__ wint_t;\n+typedef __SIZE_TYPE__ size_t;\n+typedef __PTRDIFF_TYPE__ ptrdiff_t;\n+\n+/* Kludge to get signed type corresponding to size_t.  */\n+#define unsigned signed\n+typedef __SIZE_TYPE__ signed_size_t;\n+#undef unsigned\n+\n+/* These next definitions are broken.  When GCC has a <stdint.h> and\n+   an internal understanding of intmax_t and uintmax_t, they should be\n+   replaced by an include of <stdint.h> or by definitions for internal\n+   macros or typedefs, and the corresponding xfails removed.\n+*/\n+typedef long long int intmax_t;\n+typedef unsigned long long int uintmax_t;\n+\n+extern int printf (const char *, ...);\n+\n+#define NULL ((void *)0)\n+\n+void\n+foo (int i, unsigned int u, double d, char *s, void *p, int *n,\n+     long double ld, wint_t lc, wchar_t *ls, long long int ll,\n+     unsigned long long int ull, signed char *ss, unsigned char *us,\n+     long long int *lln, intmax_t j, uintmax_t uj, intmax_t *jn,\n+     size_t z, signed_size_t sz, signed_size_t *zn,\n+     ptrdiff_t t, ptrdiff_t *tn)\n+{\n+  /* See ISO/IEC 9899:1999 (E) subclause 7.19.6.1 (pages 273-281).\n+     We do not repeat here most of the checks for correct C90 formats\n+     or completely broken formats.\n+  */\n+  /* Valid and invalid %h, %hh, %l, %ll, %j, %z, %t, %L constructions.  */\n+  printf (\"%hf\", d); /* { dg-warning \"length character\" \"bad use of %h\" } */\n+  printf (\"%hF\", d); /* { dg-warning \"length character\" \"bad use of %h\" } */\n+  printf (\"%he\", d); /* { dg-warning \"length character\" \"bad use of %h\" } */\n+  printf (\"%hE\", d); /* { dg-warning \"length character\" \"bad use of %h\" } */\n+  printf (\"%hg\", d); /* { dg-warning \"length character\" \"bad use of %h\" } */\n+  printf (\"%hG\", d); /* { dg-warning \"length character\" \"bad use of %h\" } */\n+  printf (\"%ha\", d); /* { dg-warning \"length character\" \"bad use of %h\" } */\n+  printf (\"%hA\", d); /* { dg-warning \"length character\" \"bad use of %h\" } */\n+  printf (\"%hc\", i); /* { dg-warning \"length character\" \"bad use of %h\" } */\n+  printf (\"%hs\", s); /* { dg-warning \"length character\" \"bad use of %h\" } */\n+  printf (\"%hp\", p); /* { dg-warning \"length character\" \"bad use of %h\" } */\n+  printf (\"%hhd%hhi%hho%hhu%hhx%hhX\", i, i, u, u, u, u);\n+  printf (\"%hhn\", ss);\n+  printf (\"%hhf\", d); /* { dg-warning \"length character\" \"bad use of %hh\" } */\n+  printf (\"%hhF\", d); /* { dg-warning \"length character\" \"bad use of %hh\" } */\n+  printf (\"%hhe\", d); /* { dg-warning \"length character\" \"bad use of %hh\" } */\n+  printf (\"%hhE\", d); /* { dg-warning \"length character\" \"bad use of %hh\" } */\n+  printf (\"%hhg\", d); /* { dg-warning \"length character\" \"bad use of %hh\" } */\n+  printf (\"%hhG\", d); /* { dg-warning \"length character\" \"bad use of %hh\" } */\n+  printf (\"%hha\", d); /* { dg-warning \"length character\" \"bad use of %hh\" } */\n+  printf (\"%hhA\", d); /* { dg-warning \"length character\" \"bad use of %hh\" } */\n+  printf (\"%hhc\", i); /* { dg-warning \"length character\" \"bad use of %hh\" } */\n+  printf (\"%hhs\", s); /* { dg-warning \"length character\" \"bad use of %hh\" } */\n+  printf (\"%hhp\", p); /* { dg-warning \"length character\" \"bad use of %hh\" } */\n+  printf (\"%lc\", lc);\n+  printf (\"%ls\", ls);\n+  printf (\"%lf%lF%le%lE%lg%lG%la%lA\", d, d, d, d, d, d, d, d);\n+  printf (\"%lp\", p); /* { dg-warning \"length character|C\" \"bad use of %l\" } */\n+  printf (\"%lld%lli%llo%llu%llx%llX\", ll, ll, ull, ull, ull, ull);\n+  printf (\"%lln\", lln);\n+  printf (\"%llf\", d); /* { dg-warning \"length character\" \"bad use of %ll\" } */\n+  printf (\"%llF\", d); /* { dg-warning \"length character\" \"bad use of %ll\" } */\n+  printf (\"%lle\", d); /* { dg-warning \"length character\" \"bad use of %ll\" } */\n+  printf (\"%llE\", d); /* { dg-warning \"length character\" \"bad use of %ll\" } */\n+  printf (\"%llg\", d); /* { dg-warning \"length character\" \"bad use of %ll\" } */\n+  printf (\"%llG\", d); /* { dg-warning \"length character\" \"bad use of %ll\" } */\n+  printf (\"%lla\", d); /* { dg-warning \"length character\" \"bad use of %ll\" } */\n+  printf (\"%llA\", d); /* { dg-warning \"length character\" \"bad use of %ll\" } */\n+  printf (\"%llc\", i); /* { dg-warning \"length character\" \"bad use of %ll\" } */\n+  printf (\"%lls\", s); /* { dg-warning \"length character\" \"bad use of %ll\" } */\n+  printf (\"%llp\", p); /* { dg-warning \"length character\" \"bad use of %ll\" } */\n+  printf (\"%jd%ji%jo%ju%jx%jX\", j, j, uj, uj, uj, uj); /* { dg-bogus \"length character\" \"bogus %j warning\" { xfail *-*-* } } */\n+  printf (\"%jn\", jn); /* { dg-bogus \"length character\" \"bogus %j warning\" { xfail *-*-* } } */\n+  printf (\"%jf\", d); /* { dg-warning \"length character\" \"bad use of %j\" } */\n+  printf (\"%jF\", d); /* { dg-warning \"length character\" \"bad use of %j\" } */\n+  printf (\"%je\", d); /* { dg-warning \"length character\" \"bad use of %j\" } */\n+  printf (\"%jE\", d); /* { dg-warning \"length character\" \"bad use of %j\" } */\n+  printf (\"%jg\", d); /* { dg-warning \"length character\" \"bad use of %j\" } */\n+  printf (\"%jG\", d); /* { dg-warning \"length character\" \"bad use of %j\" } */\n+  printf (\"%ja\", d); /* { dg-warning \"length character\" \"bad use of %j\" } */\n+  printf (\"%jA\", d); /* { dg-warning \"length character\" \"bad use of %j\" } */\n+  printf (\"%jc\", i); /* { dg-warning \"length character\" \"bad use of %j\" } */\n+  printf (\"%js\", s); /* { dg-warning \"length character\" \"bad use of %j\" } */\n+  printf (\"%jp\", p); /* { dg-warning \"length character\" \"bad use of %j\" } */\n+  printf (\"%zd%zi%zo%zu%zx%zX\", sz, sz, z, z, z, z);\n+  printf (\"%zn\", zn);\n+  printf (\"%zf\", d); /* { dg-warning \"length character\" \"bad use of %z\" } */\n+  printf (\"%zF\", d); /* { dg-warning \"length character\" \"bad use of %z\" } */\n+  printf (\"%ze\", d); /* { dg-warning \"length character\" \"bad use of %z\" } */\n+  printf (\"%zE\", d); /* { dg-warning \"length character\" \"bad use of %z\" } */\n+  printf (\"%zg\", d); /* { dg-warning \"length character\" \"bad use of %z\" } */\n+  printf (\"%zG\", d); /* { dg-warning \"length character\" \"bad use of %z\" } */\n+  printf (\"%za\", d); /* { dg-warning \"length character\" \"bad use of %z\" } */\n+  printf (\"%zA\", d); /* { dg-warning \"length character\" \"bad use of %z\" } */\n+  printf (\"%zc\", i); /* { dg-warning \"length character\" \"bad use of %z\" } */\n+  printf (\"%zs\", s); /* { dg-warning \"length character\" \"bad use of %z\" } */\n+  printf (\"%zp\", p); /* { dg-warning \"length character\" \"bad use of %z\" } */\n+  printf (\"%td%ti%to%tu%tx%tX\", t, t, t, t, t, t);\n+  printf (\"%tn\", tn);\n+  printf (\"%tf\", d); /* { dg-warning \"length character\" \"bad use of %t\" } */\n+  printf (\"%tF\", d); /* { dg-warning \"length character\" \"bad use of %t\" } */\n+  printf (\"%te\", d); /* { dg-warning \"length character\" \"bad use of %t\" } */\n+  printf (\"%tE\", d); /* { dg-warning \"length character\" \"bad use of %t\" } */\n+  printf (\"%tg\", d); /* { dg-warning \"length character\" \"bad use of %t\" } */\n+  printf (\"%tG\", d); /* { dg-warning \"length character\" \"bad use of %t\" } */\n+  printf (\"%ta\", d); /* { dg-warning \"length character\" \"bad use of %t\" } */\n+  printf (\"%tA\", d); /* { dg-warning \"length character\" \"bad use of %t\" } */\n+  printf (\"%tc\", i); /* { dg-warning \"length character\" \"bad use of %t\" } */\n+  printf (\"%ts\", s); /* { dg-warning \"length character\" \"bad use of %t\" } */\n+  printf (\"%tp\", p); /* { dg-warning \"length character\" \"bad use of %t\" } */\n+  printf (\"%Le%LE%Lf%LF%Lg%LG%La%LA\", ld, ld, ld, ld, ld, ld, ld, ld);\n+  /* These next six are accepted by GCC as referring to long long,\n+     but -pedantic correctly warns.\n+  */\n+  printf (\"%Ld\", ll); /* { dg-warning \"does not support\" \"bad use of %L\" } */\n+  printf (\"%Li\", ll); /* { dg-warning \"does not support\" \"bad use of %L\" } */\n+  printf (\"%Lo\", ull); /* { dg-warning \"does not support\" \"bad use of %L\" } */\n+  printf (\"%Lu\", ull); /* { dg-warning \"does not support\" \"bad use of %L\" } */\n+  printf (\"%Lx\", ull); /* { dg-warning \"does not support\" \"bad use of %L\" } */\n+  printf (\"%LX\", ull); /* { dg-warning \"does not support\" \"bad use of %L\" } */\n+  printf (\"%Lc\", i); /* { dg-warning \"length character\" \"bad use of %L\" } */\n+  printf (\"%Ls\", s); /* { dg-warning \"length character\" \"bad use of %L\" } */\n+  printf (\"%Lp\", p); /* { dg-warning \"length character\" \"bad use of %L\" } */\n+  printf (\"%Ln\", n); /* { dg-warning \"length character\" \"bad use of %L\" } */\n+  /* Valid uses of each bare conversion.  */\n+  printf (\"%d%i%o%u%x%X%f%F%e%E%g%G%a%A%c%s%p%n%%\", i, i, u, u, u, u,\n+\t  d, d, d, d, d, d, d, d, i, s, p, n);\n+  /* Uses of the - flag (valid on all non-%, non-n conversions).  */\n+  printf (\"%-d%-i%-o%-u%-x%-X%-f%-F%-e%-E%-g%-G%-a%-A%-c%-s%-p\", i, i,\n+\t  u, u, u, u, d, d, d, d, d, d, d, d, i, s, p);\n+  printf (\"%-n\", n); /* { dg-warning \"flag\" \"bad use of %-n\" } */\n+  /* Uses of the + flag (valid on signed conversions only).  */\n+  printf (\"%+d%+i%+f%+F%+e%+E%+g%+G%+a%+A\\n\", i, i, d, d, d, d, d, d, d, d);\n+  printf (\"%+o\", u); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  printf (\"%+u\", u); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  printf (\"%+x\", u); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  printf (\"%+X\", u); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  printf (\"%+c\", i); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  printf (\"%+s\", s); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  printf (\"%+p\", p); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  printf (\"%+n\", n); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  /* Uses of the space flag (valid on signed conversions only, and ignored\n+     with +).\n+  */\n+  printf (\"% +d\", i); /* { dg-warning \"use of both\" \"use of space and + flags\" } */\n+  printf (\"%+ d\", i); /* { dg-warning \"use of both\" \"use of space and + flags\" } */\n+  printf (\"% d% i% f% F% e% E% g% G% a% A\\n\", i, i, d, d, d, d, d, d, d, d);\n+  printf (\"% o\", u); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  printf (\"% u\", u); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  printf (\"% x\", u); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  printf (\"% X\", u); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  printf (\"% c\", i); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  printf (\"% s\", s); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  printf (\"% p\", p); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  printf (\"% n\", n); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  /* Uses of the # flag.  */\n+  printf (\"%#o%#x%#X%#e%#E%#f%#F%#g%#G%#a%#A\", u, u, u, d, d, d, d,\n+\t  d, d, d, d);\n+  printf (\"%#d\", i); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n+  printf (\"%#i\", i); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n+  printf (\"%#u\", u); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n+  printf (\"%#c\", i); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n+  printf (\"%#s\", s); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n+  printf (\"%#p\", p); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n+  printf (\"%#n\", n); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n+  /* Uses of the 0 flag.  */\n+  printf (\"%08d%08i%08o%08u%08x%08X%08e%08E%08f%08F%08g%08G%08a%08A\", i, i,\n+\t  u, u, u, u, d, d, d, d, d, d, d, d);\n+  printf (\"%0c\", i); /* { dg-warning \"flag\" \"bad use of 0 flag\" } */\n+  printf (\"%0s\", s); /* { dg-warning \"flag\" \"bad use of 0 flag\" } */\n+  printf (\"%0p\", p); /* { dg-warning \"flag\" \"bad use of 0 flag\" } */\n+  printf (\"%0n\", n); /* { dg-warning \"flag\" \"bad use of 0 flag\" } */\n+  /* 0 flag ignored with precision for certain types, not others.  */\n+  printf (\"%08.5d\", i); /* { dg-warning \"ignored\" \"0 flag ignored with precision\" } */\n+  printf (\"%08.5i\", i); /* { dg-warning \"ignored\" \"0 flag ignored with precision\" } */\n+  printf (\"%08.5o\", u); /* { dg-warning \"ignored\" \"0 flag ignored with precision\" } */\n+  printf (\"%08.5u\", u); /* { dg-warning \"ignored\" \"0 flag ignored with precision\" } */\n+  printf (\"%08.5x\", u); /* { dg-warning \"ignored\" \"0 flag ignored with precision\" } */\n+  printf (\"%08.5X\", u); /* { dg-warning \"ignored\" \"0 flag ignored with precision\" } */\n+  printf (\"%08.5f%08.5F%08.5e%08.5E%08.5g%08.5G%08.5a%08.5A\",\n+\t  d, d, d, d, d, d, d, d);\n+  /* 0 flag ignored with - flag.  */\n+  printf (\"%-08d\", i); /* { dg-warning \"flags\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08i\", i); /* { dg-warning \"flags\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08o\", u); /* { dg-warning \"flags\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08u\", u); /* { dg-warning \"flags\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08x\", u); /* { dg-warning \"flags\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08X\", u); /* { dg-warning \"flags\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08e\", d); /* { dg-warning \"flags\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08E\", d); /* { dg-warning \"flags\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08f\", d); /* { dg-warning \"flags\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08F\", d); /* { dg-warning \"flags\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08g\", d); /* { dg-warning \"flags\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08G\", d); /* { dg-warning \"flags\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08a\", d); /* { dg-warning \"flags\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08A\", d); /* { dg-warning \"flags\" \"0 flag ignored with - flag\" } */\n+  /* Various tests of bad argument types.  Mostly covered in c90-printf-1.c;\n+     here just test for pointer target sign with %hhn.  (Probably allowed\n+     by the standard, but a bad idea, so GCC should diagnose if what\n+     is used is not signed char *.)\n+  */\n+  printf (\"%hhn\", s); /* { dg-warning \"format\" \"%hhn plain char\" } */\n+  printf (\"%hhn\", us); /* { dg-warning \"format\" \"%hhn unsigned char\" } */\n+}"}]}