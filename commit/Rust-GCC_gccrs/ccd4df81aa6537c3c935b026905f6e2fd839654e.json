{"sha": "ccd4df81aa6537c3c935b026905f6e2fd839654e", "node_id": "C_kwDOANBUbNoAKGNjZDRkZjgxYWE2NTM3YzNjOTM1YjAyNjkwNWY2ZTJmZDgzOTY1NGU", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2023-01-13T22:51:26Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2023-01-13T22:51:26Z"}, "message": "analyzer: add heuristics for switch on enum type [PR105273]\n\nAssume that switch on an enum doesn't follow an implicit default\nskipping all cases when all enum values are covered by cases.\n\nFixes various false positives from -Wanalyzer-use-of-uninitialized-value\nsuch as this one seen in Doom:\n\np_maputl.c: In function 'P_BoxOnLineSide':\np_maputl.c:151:8: warning: use of uninitialized value 'p1' [CWE-457] [-Wanalyzer-use-of-uninitialized-value]\n  151 |     if (p1 == p2)\n      |        ^\n  'P_BoxOnLineSide': events 1-5\n    |\n    |  115 |     int         p1;\n    |      |                 ^~\n    |      |                 |\n    |      |                 (1) region created on stack here\n    |      |                 (2) capacity: 4 bytes\n    |......\n    |  118 |     switch (ld->slopetype)\n    |      |     ~~~~~~\n    |      |     |\n    |      |     (3) following 'default:' branch...\n    |......\n    |  151 |     if (p1 == p2)\n    |      |        ~\n    |      |        |\n    |      |        (4) ...to here\n    |      |        (5) use of uninitialized value 'p1' here\n    |\n\nwhere \"ld->slopetype\" is a \"slopetype_t\" enum, and for every value of\nthat enum the switch has a case that initializes \"p1\".\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/105273\n\t* region-model.cc (has_nondefault_case_for_value_p): New.\n\t(has_nondefault_cases_for_all_enum_values_p): New.\n\t(region_model::apply_constraints_for_gswitch): Skip\n\timplicitly-created \"default\" when switching on an enum\n\tand all enum values have non-default cases.\n\t(rejected_default_case::dump_to_pp): New.\n\t* region-model.h (region_model_context::possibly_tainted_p): New\n\tdecl.\n\t(class rejected_default_case): New.\n\t* sm-taint.cc (region_model_context::possibly_tainted_p): New.\n\t* supergraph.cc (switch_cfg_superedge::dump_label_to_pp): Dump\n\twhen implicitly_created_default_p.\n\t(switch_cfg_superedge::implicitly_created_default_p): New.\n\t* supergraph.h\n\t(switch_cfg_superedge::implicitly_created_default_p): New decl.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/105273\n\t* gcc.dg/analyzer/switch-enum-1.c: New test.\n\t* gcc.dg/analyzer/switch-enum-2.c: New test.\n\t* gcc.dg/analyzer/switch-enum-pr105273-git-vreportf-2.c: New test.\n\t* gcc.dg/analyzer/switch-enum-taint-1.c: New test.\n\t* gcc.dg/analyzer/switch-wrong-enum.c: New test.\n\t* gcc.dg/analyzer/torture/switch-enum-pr105273-doom-p_floor.c: New\n\ttest.\n\t* gcc.dg/analyzer/torture/switch-enum-pr105273-doom-p_maputl.c:\n\tNew test.\n\t* gcc.dg/analyzer/torture/switch-enum-pr105273-git-vreportf-1.c:\n\tNew test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "fd538d541afa3f3394c81a32b0e1865942372d57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd538d541afa3f3394c81a32b0e1865942372d57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccd4df81aa6537c3c935b026905f6e2fd839654e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccd4df81aa6537c3c935b026905f6e2fd839654e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccd4df81aa6537c3c935b026905f6e2fd839654e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccd4df81aa6537c3c935b026905f6e2fd839654e/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6071e495e5802a8949d2b02df6aa31a5f40f2af9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6071e495e5802a8949d2b02df6aa31a5f40f2af9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6071e495e5802a8949d2b02df6aa31a5f40f2af9"}], "stats": {"total": 812, "additions": 810, "deletions": 2}, "files": [{"sha": "6a3a1b474bffa72114d0e33418194ea85e3e356c", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 102, "deletions": 2, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd4df81aa6537c3c935b026905f6e2fd839654e/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd4df81aa6537c3c935b026905f6e2fd839654e/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=ccd4df81aa6537c3c935b026905f6e2fd839654e", "patch": "@@ -4341,6 +4341,72 @@ region_model::apply_constraints_for_gcond (const cfg_superedge &sedge,\n   return add_constraint (lhs, op, rhs, ctxt, out);\n }\n \n+/* Return true iff SWITCH_STMT has a non-default label that contains\n+   INT_CST.  */\n+\n+static bool\n+has_nondefault_case_for_value_p (const gswitch *switch_stmt, tree int_cst)\n+{\n+  /* We expect the initial label to be the default; skip it.  */\n+  gcc_assert (CASE_LOW (gimple_switch_label (switch_stmt, 0)) == NULL);\n+  unsigned min_idx = 1;\n+  unsigned max_idx = gimple_switch_num_labels (switch_stmt) - 1;\n+\n+  /* Binary search: try to find the label containing INT_CST.\n+     This requires the cases to be sorted by CASE_LOW (done by the\n+     gimplifier).  */\n+  while (max_idx >= min_idx)\n+    {\n+      unsigned case_idx = (min_idx + max_idx) / 2;\n+      tree label =  gimple_switch_label (switch_stmt, case_idx);\n+      tree low = CASE_LOW (label);\n+      gcc_assert (low);\n+      tree high = CASE_HIGH (label);\n+      if (!high)\n+\thigh = low;\n+      if (tree_int_cst_compare (int_cst, low) < 0)\n+\t{\n+\t  /* INT_CST is below the range of this label.  */\n+\t  gcc_assert (case_idx > 0);\n+\t  max_idx = case_idx - 1;\n+\t}\n+      else if (tree_int_cst_compare (int_cst, high) > 0)\n+\t{\n+\t  /* INT_CST is above the range of this case.  */\n+\t  min_idx = case_idx + 1;\n+\t}\n+      else\n+\t/* This case contains INT_CST.  */\n+\treturn true;\n+    }\n+  /* Not found.  */\n+  return false;\n+}\n+\n+/* Return true iff SWITCH_STMT (which must be on an enum value)\n+   has nondefault cases handling all values in the enum.  */\n+\n+static bool\n+has_nondefault_cases_for_all_enum_values_p (const gswitch *switch_stmt)\n+{\n+  gcc_assert (switch_stmt);\n+  tree type = TREE_TYPE (gimple_switch_index (switch_stmt));\n+  gcc_assert (TREE_CODE (type) == ENUMERAL_TYPE);\n+\n+  for (tree enum_val_iter = TYPE_VALUES (type);\n+       enum_val_iter;\n+       enum_val_iter = TREE_CHAIN (enum_val_iter))\n+    {\n+      tree enum_val = TREE_VALUE (enum_val_iter);\n+      gcc_assert (TREE_CODE (enum_val) == CONST_DECL);\n+      gcc_assert (TREE_CODE (DECL_INITIAL (enum_val)) == INTEGER_CST);\n+      if (!has_nondefault_case_for_value_p (switch_stmt,\n+\t\t\t\t\t    DECL_INITIAL (enum_val)))\n+\treturn false;\n+    }\n+  return true;\n+}\n+\n /* Given an EDGE guarded by SWITCH_STMT, determine appropriate constraints\n    for the edge to be taken.\n \n@@ -4357,11 +4423,37 @@ region_model::apply_constraints_for_gswitch (const switch_cfg_superedge &edge,\n \t\t\t\t\t     region_model_context *ctxt,\n \t\t\t\t\t     rejected_constraint **out)\n {\n+  tree index  = gimple_switch_index (switch_stmt);\n+  const svalue *index_sval = get_rvalue (index, ctxt);\n+\n+  /* If we're switching based on an enum type, assume that the user is only\n+     working with values from the enum.  Hence if this is an\n+     implicitly-created \"default\", assume it doesn't get followed.\n+     This fixes numerous \"uninitialized\" false positives where we otherwise\n+     consider jumping past the initialization cases.  */\n+\n+  if (/* Don't check during feasibility-checking (when ctxt is NULL).  */\n+      ctxt\n+      /* Must be an enum value.  */\n+      && index_sval->get_type ()\n+      && TREE_CODE (TREE_TYPE (index)) == ENUMERAL_TYPE\n+      && TREE_CODE (index_sval->get_type ()) == ENUMERAL_TYPE\n+      /* If we have a constant, then we can check it directly.  */\n+      && index_sval->get_kind () != SK_CONSTANT\n+      && edge.implicitly_created_default_p ()\n+      && has_nondefault_cases_for_all_enum_values_p (switch_stmt)\n+      /* Don't do this if there's a chance that the index is\n+\t attacker-controlled.  */\n+      && !ctxt->possibly_tainted_p (index_sval))\n+    {\n+      if (out)\n+\t*out = new rejected_default_case (*this);\n+      return false;\n+    }\n+\n   bounded_ranges_manager *ranges_mgr = get_range_manager ();\n   const bounded_ranges *all_cases_ranges\n     = ranges_mgr->get_or_create_ranges_for_switch (&edge, switch_stmt);\n-  tree index  = gimple_switch_index (switch_stmt);\n-  const svalue *index_sval = get_rvalue (index, ctxt);\n   bool sat = m_constraints->add_bounded_ranges (index_sval, all_cases_ranges);\n   if (!sat && out)\n     *out = new rejected_ranges_constraint (*this, index, all_cases_ranges);\n@@ -5686,6 +5778,14 @@ rejected_op_constraint::dump_to_pp (pretty_printer *pp) const\n   rhs_sval->dump_to_pp (pp, true);\n }\n \n+/* class rejected_default_case : public rejected_constraint.  */\n+\n+void\n+rejected_default_case::dump_to_pp (pretty_printer *pp) const\n+{\n+  pp_string (pp, \"implicit default for enum\");\n+}\n+\n /* class rejected_ranges_constraint : public rejected_constraint.  */\n \n void"}, {"sha": "4e1a5c679eccc7a11c79afdd6c0d741afd192679", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd4df81aa6537c3c935b026905f6e2fd839654e/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd4df81aa6537c3c935b026905f6e2fd839654e/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=ccd4df81aa6537c3c935b026905f6e2fd839654e", "patch": "@@ -703,6 +703,8 @@ class region_model_context\n     return get_state_map_by_name (\"taint\", out_smap, out_sm, out_sm_idx, NULL);\n   }\n \n+  bool possibly_tainted_p (const svalue *sval);\n+\n   /* Get the current statement, if any.  */\n   virtual const gimple *get_stmt () const = 0;\n };\n@@ -1010,6 +1012,16 @@ class rejected_op_constraint : public rejected_constraint\n   tree m_rhs;\n };\n \n+class rejected_default_case : public rejected_constraint\n+{\n+public:\n+  rejected_default_case (const region_model &model)\n+  : rejected_constraint (model)\n+  {}\n+\n+  void dump_to_pp (pretty_printer *pp) const final override;\n+};\n+\n class rejected_ranges_constraint : public rejected_constraint\n {\n public:"}, {"sha": "3a619b12d5c8f55e932c9ecd13e93b55fe863731", "filename": "gcc/analyzer/sm-taint.cc", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd4df81aa6537c3c935b026905f6e2fd839654e/gcc%2Fanalyzer%2Fsm-taint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd4df81aa6537c3c935b026905f6e2fd839654e/gcc%2Fanalyzer%2Fsm-taint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-taint.cc?ref=ccd4df81aa6537c3c935b026905f6e2fd839654e", "patch": "@@ -1549,6 +1549,31 @@ region_model::mark_as_tainted (const svalue *sval,\n   smap->set_state (this, sval, taint_sm.m_tainted, NULL, *ext_state);\n }\n \n+/* Return true if SVAL could possibly be attacker-controlled.  */\n+\n+bool\n+region_model_context::possibly_tainted_p (const svalue *sval)\n+{\n+  sm_state_map *smap;\n+  const state_machine *sm;\n+  unsigned sm_idx;\n+  if (!get_taint_map (&smap, &sm, &sm_idx))\n+      return false;\n+\n+  const taint_state_machine &taint_sm = (const taint_state_machine &)*sm;\n+\n+  const extrinsic_state *ext_state = get_ext_state ();\n+  if (!ext_state)\n+    return false;\n+\n+  const state_machine::state_t state = smap->get_state (sval, *ext_state);\n+  gcc_assert (state);\n+\n+  return (state == taint_sm.m_tainted\n+\t  || state == taint_sm.m_has_lb\n+\t  || state == taint_sm.m_has_ub);\n+}\n+\n } // namespace ana\n \n #endif /* #if ENABLE_ANALYZER */"}, {"sha": "c0bb2c6af94165050a8f1f52defba8048d9031c4", "filename": "gcc/analyzer/supergraph.cc", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd4df81aa6537c3c935b026905f6e2fd839654e/gcc%2Fanalyzer%2Fsupergraph.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd4df81aa6537c3c935b026905f6e2fd839654e/gcc%2Fanalyzer%2Fsupergraph.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsupergraph.cc?ref=ccd4df81aa6537c3c935b026905f6e2fd839654e", "patch": "@@ -1153,9 +1153,31 @@ switch_cfg_superedge::dump_label_to_pp (pretty_printer *pp,\n \t    pp_printf (pp, \"default\");\n \t}\n       pp_character (pp, '}');\n+      if (implicitly_created_default_p ())\n+\t{\n+\t  pp_string (pp, \" IMPLICITLY CREATED\");\n+\t}\n     }\n }\n \n+/* Return true iff this edge is purely for an implicitly-created \"default\".  */\n+\n+bool\n+switch_cfg_superedge::implicitly_created_default_p () const\n+{\n+  if (m_case_labels.length () != 1)\n+    return false;\n+\n+  tree case_label = m_case_labels[0];\n+  gcc_assert (TREE_CODE (case_label) == CASE_LABEL_EXPR);\n+  if (CASE_LOW (case_label))\n+    return false;\n+\n+  /* We have a single \"default\" case.\n+     Assume that it was implicitly created if it has UNKNOWN_LOCATION.  */\n+  return EXPR_LOCATION (case_label) == UNKNOWN_LOCATION;\n+}\n+\n /* Implementation of superedge::dump_label_to_pp for interprocedural\n    superedges.  */\n "}, {"sha": "d359e95b12d4d1a3e35df5e935fc5e1a1fabd9a0", "filename": "gcc/analyzer/supergraph.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd4df81aa6537c3c935b026905f6e2fd839654e/gcc%2Fanalyzer%2Fsupergraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd4df81aa6537c3c935b026905f6e2fd839654e/gcc%2Fanalyzer%2Fsupergraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsupergraph.h?ref=ccd4df81aa6537c3c935b026905f6e2fd839654e", "patch": "@@ -570,6 +570,8 @@ class switch_cfg_superedge : public cfg_superedge {\n \n   const vec<tree> &get_case_labels () const { return m_case_labels; }\n \n+  bool implicitly_created_default_p () const;\n+\n private:\n   auto_vec<tree> m_case_labels;\n };"}, {"sha": "7cd871c894ead495b2a115e380bf7ec18123c897", "filename": "gcc/testsuite/gcc.dg/analyzer/switch-enum-1.c", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd4df81aa6537c3c935b026905f6e2fd839654e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fswitch-enum-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd4df81aa6537c3c935b026905f6e2fd839654e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fswitch-enum-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fswitch-enum-1.c?ref=ccd4df81aa6537c3c935b026905f6e2fd839654e", "patch": "@@ -0,0 +1,136 @@\n+#include \"analyzer-decls.h\"\n+\n+/* Verify the handling of \"switch (enum_value)\".  */\n+\n+enum e\n+{\n+ E_VAL0,\n+ E_VAL1,\n+ E_VAL2\n+};\n+\n+/* Verify that we assume that \"switch (enum)\" doesn't follow implicit\n+   \"default\" if all enum values have cases  */\n+\n+int test_all_values_covered_implicit_default_1 (enum e x)\n+{\n+  switch (x)\n+    {\n+    case E_VAL0:\n+      return 1066;\n+    case E_VAL1:\n+      return 1776;\n+    case E_VAL2:\n+      return 1945;\n+    }\n+  __analyzer_dump_path (); /* { dg-bogus \"path\" } */\n+}\n+\n+int test_all_values_covered_implicit_default_2 (enum e x)\n+{\n+  int result;\n+  switch (x)\n+    {\n+    case E_VAL0:\n+      result = 1066;\n+      break;\n+    case E_VAL1:\n+      result = 1776;\n+      break;\n+    case E_VAL2:\n+      result = 1945;\n+      break;\n+    }\n+  return result; /* { dg-bogus \"uninitialized\" } */\n+}\n+\n+/* Verify that we consider paths that use the implicit default when not\n+   all enum values are covered by cases.  */\n+\n+int test_missing_values_implicit_default_1 (enum e x)\n+{\n+  switch (x) /* { dg-message \"following 'default:' branch\" } */\n+    {\n+    case E_VAL0:\n+      return 1066;\n+    case E_VAL1:\n+      return 1776;\n+    }\n+  __analyzer_dump_path (); /* { dg-message \"path\" } */\n+  return 0;\n+}\n+\n+int test_missing_values_implicit_default_2 (enum e x)\n+{\n+  int result;\n+  switch (x) /* { dg-message \"following 'default:' branch\" } */\n+    {\n+    case E_VAL0:\n+      result = 1066;\n+      break;\n+    case E_VAL1:\n+      result = 1776;\n+      break;\n+    }\n+  return result; /* { dg-warning \"uninitialized\" } */\n+}\n+\n+/* Verify that explicit \"default\" isn't rejected.  */\n+\n+int test_all_values_covered_explicit_default_1 (enum e x)\n+{\n+  switch (x)\n+    {\n+    case E_VAL0:\n+      return 1066;\n+    case E_VAL1:\n+      return 1776;\n+    case E_VAL2:\n+      return 1945;\n+    default:\n+      __analyzer_dump_path (); /* { dg-message \"path\" } */\n+      return 0;\n+    }\n+}\n+\n+int test_missing_values_explicit_default_1 (enum e x)\n+{\n+  switch (x)\n+    {\n+    default:\n+    case E_VAL0:\n+      return 1066;\n+    case E_VAL1:\n+      return 1776;\n+    }\n+  __analyzer_dump_path (); /* { dg-bogus \"path\" } */\n+  return 0;\n+}\n+\n+int test_missing_values_explicit_default_2 (enum e x)\n+{\n+  switch (x)\n+    {\n+    case E_VAL0:\n+      return 1066;\n+    case E_VAL1:\n+      return 1776;\n+    default:\n+      __analyzer_dump_path (); /* { dg-message \"path\" } */\n+      return 1945;\n+    }\n+  __analyzer_dump_path (); /* { dg-bogus \"path\" } */\n+  return 0;\n+}\n+\n+int test_just_default (enum e x)\n+{\n+  switch (x)\n+    {\n+    default:\n+      __analyzer_dump_path (); /* { dg-message \"path\" } */\n+      return 42;\n+    }\n+  __analyzer_dump_path (); /* { dg-bogus \"path\" } */\n+  return 0;  \n+}"}, {"sha": "c3c7ae38aa79ca79f9eb9c66fd175a657cc705be", "filename": "gcc/testsuite/gcc.dg/analyzer/switch-enum-2.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd4df81aa6537c3c935b026905f6e2fd839654e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fswitch-enum-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd4df81aa6537c3c935b026905f6e2fd839654e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fswitch-enum-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fswitch-enum-2.c?ref=ccd4df81aa6537c3c935b026905f6e2fd839654e", "patch": "@@ -0,0 +1,132 @@\n+#include \"analyzer-decls.h\"\n+\n+/* Verify the handling of \"switch (enum_value)\".  */\n+\n+enum e\n+{\n+ E_VAL0,\n+ E_VAL1,\n+ E_VAL2,\n+\n+ E_VAL10 = 10,\n+ E_VAL11 = 11,\n+ E_VAL12 = 12,\n+\n+ E_VAL20 = 20,\n+ E_VAL21 = 21,\n+ E_VAL22 = 22\n+};\n+\n+/* Verify that we assume that \"switch (enum)\" doesn't follow implicit\n+   \"default\" if all enum values have cases  */\n+\n+int test_all_values_covered_implicit_default_1 (enum e x)\n+{\n+  switch (x)\n+    {\n+    case E_VAL0...E_VAL2:\n+      return 1066;\n+    case E_VAL10...E_VAL12:\n+      return 1776;\n+    case E_VAL20...E_VAL22:\n+      return 1945;\n+    }\n+  __analyzer_dump_path (); /* { dg-bogus \"path\" } */\n+}\n+\n+int test_all_values_covered_implicit_default_2 (enum e x)\n+{\n+  int result;\n+  switch (x)\n+    {\n+    case E_VAL0...E_VAL2:\n+      result = 1066;\n+      break;\n+    case E_VAL10...E_VAL12:\n+      result = 1776;\n+      break;\n+    case E_VAL20...E_VAL22:\n+      result = 1945;\n+      break;\n+    }\n+  return result; /* { dg-bogus \"uninitialized\" } */\n+}\n+\n+/* Verify that we consider paths that use the implicit default when not\n+   all enum values are covered by cases.  */\n+\n+int test_missing_values_implicit_default_1 (enum e x)\n+{\n+  switch (x) /* { dg-message \"following 'default:' branch\" } */\n+    {\n+    case E_VAL0...E_VAL2:\n+      return 1066;\n+    case E_VAL10...E_VAL12:\n+      return 1776;\n+    }\n+  __analyzer_dump_path (); /* { dg-message \"path\" } */\n+  return 0;\n+}\n+\n+int test_missing_values_implicit_default_2 (enum e x)\n+{\n+  int result;\n+  switch (x) /* { dg-message \"following 'default:' branch\" } */\n+    {\n+    case E_VAL0...E_VAL2:\n+      result = 1066;\n+      break;\n+    case E_VAL10...E_VAL12:\n+      result = 1776;\n+      break;\n+    }\n+  return result; /* { dg-warning \"uninitialized\" } */\n+}\n+\n+/* Verify that explicit \"default\" isn't rejected.  */\n+\n+int test_all_values_covered_explicit_default_1 (enum e x)\n+{\n+  switch (x)\n+    {\n+    case E_VAL0...E_VAL2:\n+      return 1066;\n+    case E_VAL10...E_VAL12:\n+      return 1776;\n+    case E_VAL20...E_VAL22:\n+      return 1945;\n+    default:\n+      __analyzer_dump_path (); /* { dg-message \"path\" } */\n+      return 0;\n+    }\n+}\n+\n+int test_missing_values_explicit_default_1 (enum e x)\n+{\n+  switch (x)\n+    {\n+    default:\n+    case E_VAL0...E_VAL2:\n+      return 1066;\n+    case E_VAL10...E_VAL12:\n+      return 1776;\n+    }\n+  __analyzer_dump_path (); /* { dg-bogus \"path\" } */\n+  return 0;\n+}\n+\n+int test_missing_values_explicit_default_2 (enum e x)\n+{\n+  switch (x)\n+    {\n+    case E_VAL0...E_VAL2:\n+      return 1066;\n+    case E_VAL10...E_VAL12:\n+      return 1776;\n+    default:\n+      __analyzer_dump_path (); /* { dg-message \"path\" } */\n+      return 1945;\n+    }\n+  __analyzer_dump_path (); /* { dg-bogus \"path\" } */\n+  return 0;\n+}"}, {"sha": "336222759e32367cd77db3e9a1124db80a4ae6a5", "filename": "gcc/testsuite/gcc.dg/analyzer/switch-enum-pr105273-git-vreportf-2.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd4df81aa6537c3c935b026905f6e2fd839654e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fswitch-enum-pr105273-git-vreportf-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd4df81aa6537c3c935b026905f6e2fd839654e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fswitch-enum-pr105273-git-vreportf-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fswitch-enum-pr105273-git-vreportf-2.c?ref=ccd4df81aa6537c3c935b026905f6e2fd839654e", "patch": "@@ -0,0 +1,40 @@\n+/* Currently the warning only fires at -O0\n+   (needs to inline the call without optimizing the\n+   implicit default of the switch).  */\n+\n+/* { dg-additional-options \"-O0\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+int snprintf(char *str, size_t size, const char *format, ...);\n+\n+enum usage_kind {\n+\tUSAGE_ERROR,\n+\tUSAGE_BUG,\n+};\n+\n+static void __analyzer_vreportf(enum usage_kind kind)\n+{\n+\tchar buf[256];\n+\tconst char *pfx;\n+\n+\tswitch (kind) { /* { dg-message \"following 'default:' branch\" } */\n+\tcase USAGE_ERROR:\n+\t\tpfx = \"error: \";\n+\t\tbreak;\n+\tcase USAGE_BUG:\n+\t\tpfx = \"BUG: \";\n+\t\tbreak;\n+\t}\n+\n+\tif (kind == USAGE_BUG)\n+\t\tsnprintf(buf, sizeof(buf), \"%s%s:%d: \", pfx, \"file\", 123);\n+\telse\n+\t\tsnprintf(buf, sizeof(buf), \"%s\", pfx); /* { dg-warning \"uninitialized\" } */\n+}\n+\n+int main(void)\n+{\n+\t__analyzer_vreportf(42);\n+\n+\treturn 0;\n+}"}, {"sha": "db3bb5b49473b17188151147a489a1325d552d40", "filename": "gcc/testsuite/gcc.dg/analyzer/switch-enum-taint-1.c", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd4df81aa6537c3c935b026905f6e2fd839654e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fswitch-enum-taint-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd4df81aa6537c3c935b026905f6e2fd839654e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fswitch-enum-taint-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fswitch-enum-taint-1.c?ref=ccd4df81aa6537c3c935b026905f6e2fd839654e", "patch": "@@ -0,0 +1,102 @@\n+// TODO: remove need for this option\n+/* { dg-additional-options \"-fanalyzer-checker=taint\" } */\n+\n+#include \"analyzer-decls.h\"\n+\n+/* Verify the handling of \"switch (enum_value)\".  */\n+\n+enum e\n+{\n+ E_VAL0,\n+ E_VAL1,\n+ E_VAL2\n+};\n+\n+/* Verify that we consider that \"switch (enum)\" could follow implicit\n+   \"default\" even when all enum values have cases if the value is\n+   attacker-controlled.  */\n+\n+int  __attribute__((tainted_args))\n+test_all_values_covered_implicit_default_1 (enum e x)\n+{\n+  switch (x) /* { dg-message \"following 'default:' branch\" } */\n+    {\n+    case E_VAL0:\n+      return 1066;\n+    case E_VAL1:\n+      return 1776;\n+    case E_VAL2:\n+      return 1945;\n+    }\n+  __analyzer_dump_path (); /* { dg-message \"path\" } */\n+}\n+\n+int  __attribute__((tainted_args))\n+test_all_values_covered_implicit_default_2 (enum e x)\n+{\n+  int result;\n+  switch (x) /* { dg-message \"following 'default:' branch\" } */\n+    {\n+    case E_VAL0:\n+      result = 1066;\n+      break;\n+    case E_VAL1:\n+      result = 1776;\n+      break;\n+    case E_VAL2:\n+      result = 1945;\n+      break;\n+    }\n+  return result; /* { dg-message \"uninitialized\" } */\n+}\n+\n+/* Verify that explicit \"default\" isn't rejected.  */\n+\n+int __attribute__((tainted_args))\n+test_all_values_covered_explicit_default_1 (enum e x)\n+{\n+  switch (x)\n+    {\n+    case E_VAL0:\n+      return 1066;\n+    case E_VAL1:\n+      return 1776;\n+    case E_VAL2:\n+      return 1945;\n+    default:\n+      __analyzer_dump_path (); /* { dg-message \"path\" } */\n+      return 0;\n+    }\n+}\n+\n+int  __attribute__((tainted_args))\n+test_missing_values_explicit_default_1 (enum e x)\n+{\n+  switch (x)\n+    {\n+    default:\n+    case E_VAL0:\n+      return 1066;\n+    case E_VAL1:\n+      return 1776;\n+    }\n+  __analyzer_dump_path (); /* { dg-bogus \"path\" } */\n+  return 0;\n+}\n+\n+int __attribute__((tainted_args))\n+test_missing_values_explicit_default_2 (enum e x)\n+{\n+  switch (x)\n+    {\n+    case E_VAL0:\n+      return 1066;\n+    case E_VAL1:\n+      return 1776;\n+    default:\n+      __analyzer_dump_path (); /* { dg-message \"path\" } */\n+      return 1945;\n+    }\n+  __analyzer_dump_path (); /* { dg-bogus \"path\" } */\n+  return 0;\n+}"}, {"sha": "0de25168a65c825192c8f03db28765f1d5849e9d", "filename": "gcc/testsuite/gcc.dg/analyzer/switch-wrong-enum.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd4df81aa6537c3c935b026905f6e2fd839654e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fswitch-wrong-enum.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd4df81aa6537c3c935b026905f6e2fd839654e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fswitch-wrong-enum.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fswitch-wrong-enum.c?ref=ccd4df81aa6537c3c935b026905f6e2fd839654e", "patch": "@@ -0,0 +1,27 @@\n+#include \"analyzer-decls.h\"\n+\n+enum color\n+{\n+ RED,\n+ GREEN,\n+ BLUE\n+};\n+\n+enum fruit\n+{\n+ APPLE,\n+ BANANA\n+};\n+\n+int test_wrong_enum (enum color x)\n+{\n+  switch (x)\n+    {\n+    case APPLE:\n+      return 1066;\n+    case BANANA:\n+      return 1776;\n+    }\n+  __analyzer_dump_path (); /* { dg-message \"path\" } */\n+  return 0;\n+}"}, {"sha": "100586cdc888bd6f154177593cf6c07427eda696", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/switch-enum-pr105273-doom-p_floor.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd4df81aa6537c3c935b026905f6e2fd839654e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fswitch-enum-pr105273-doom-p_floor.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd4df81aa6537c3c935b026905f6e2fd839654e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fswitch-enum-pr105273-doom-p_floor.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fswitch-enum-pr105273-doom-p_floor.c?ref=ccd4df81aa6537c3c935b026905f6e2fd839654e", "patch": "@@ -0,0 +1,89 @@\n+/* Reduced from linuxdoom-1.10's p_floor.c (GPLv2).  */\n+\n+#define FRACBITS\t\t16\n+#define FRACUNIT\t\t(1<<FRACBITS)\n+#define PU_LEVSPEC\t\t51\n+#define FLOORSPEED\t\tFRACUNIT\n+\n+typedef int fixed_t;\n+typedef struct line_s line_t;\n+\n+typedef struct\n+{\n+    fixed_t floorheight;\n+    /* [...snip...] */\n+} sector_t;\n+\n+typedef enum\n+{\n+    build8,\n+    turbo16\n+\n+} stair_e;\n+\n+typedef struct\n+{\n+    /* [...snip...] */\n+    fixed_t floordestheight;\n+    fixed_t speed;\n+} floormove_t;\n+\n+extern sector_t* sectors;\n+\n+void* Z_Malloc (int size, int tag, void *ptr);\n+\n+int\n+P_FindSectorFromLineTag\n+( line_t* line,\n+  int start );\n+\n+int\n+EV_BuildStairs\n+( line_t*\tline,\n+  stair_e\ttype )\n+{\n+    int\t\t\tsecnum;\n+    int\t\t\theight;\n+    /* [...snip...] */\n+    int\t\t\trtn;\n+    \n+    sector_t*\t\tsec;\n+    /* [...snip...] */\n+\n+    floormove_t*\tfloor;\n+    \n+    fixed_t\t\tstairsize;\n+    fixed_t\t\tspeed;\n+\n+    secnum = -1;\n+    rtn = 0;\n+    while ((secnum = P_FindSectorFromLineTag(line,secnum)) >= 0)\n+    {\n+\tsec = &sectors[secnum];\n+\n+\t/* [...snip...] */\n+\n+\trtn = 1;\n+\tfloor = Z_Malloc (sizeof(*floor), PU_LEVSPEC, 0);\n+\t\n+\t/* [...snip...] */\n+\n+\tswitch(type)\n+\t{\n+\t  case build8:\n+\t    speed = FLOORSPEED/4;\n+\t    stairsize = 8*FRACUNIT;\n+\t    break;\n+\t  case turbo16:\n+\t    speed = FLOORSPEED*4;\n+\t    stairsize = 16*FRACUNIT;\n+\t    break;\n+\t}\n+\tfloor->speed = speed; /* { dg-bogus \"use of uninitialized value 'speed'\" } */\n+\theight = sec->floorheight + stairsize; /* { dg-bogus \"use of uninitialized value 'stairsize'\" } */\n+\tfloor->floordestheight = height;\n+\n+\t/* [...snip...] */\n+    }\n+    return rtn;\n+}"}, {"sha": "f686c731eff102a4b77dc9f7f43400683eae8dd9", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/switch-enum-pr105273-doom-p_maputl.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd4df81aa6537c3c935b026905f6e2fd839654e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fswitch-enum-pr105273-doom-p_maputl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd4df81aa6537c3c935b026905f6e2fd839654e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fswitch-enum-pr105273-doom-p_maputl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fswitch-enum-pr105273-doom-p_maputl.c?ref=ccd4df81aa6537c3c935b026905f6e2fd839654e", "patch": "@@ -0,0 +1,86 @@\n+/* Reduced from linuxdoom-1.10's p_maputl.c (GPLv2).  */\n+\n+typedef int fixed_t;\n+\n+enum\n+{\n+    BOXTOP,\n+    BOXBOTTOM,\n+    BOXLEFT,\n+    BOXRIGHT\n+};\n+\n+typedef struct\n+{\n+    fixed_t x;\n+    fixed_t y;\n+} vertex_t;\n+\n+typedef enum\n+{\n+    ST_HORIZONTAL,\n+    ST_VERTICAL,\n+    ST_POSITIVE,\n+    ST_NEGATIVE\n+} slopetype_t;\n+\n+typedef struct line_s\n+{\n+    vertex_t* v1;\n+    /* [...snip...] */\n+\n+    fixed_t dx;\n+    fixed_t dy;\n+\n+    /* [...snip...] */\n+    slopetype_t slopetype;\n+    /* [...snip...] */\n+} line_t;\n+\n+int P_PointOnLineSide (fixed_t x, fixed_t y, line_t* line);\n+\n+int\n+P_BoxOnLineSide\n+( fixed_t*\ttmbox,\n+  line_t*\tld )\n+{\n+    int\t\tp1;\n+    int\t\tp2;\n+\t\n+    switch (ld->slopetype)\n+    {\n+      case ST_HORIZONTAL:\n+\tp1 = tmbox[BOXTOP] > ld->v1->y;\n+\tp2 = tmbox[BOXBOTTOM] > ld->v1->y;\n+\tif (ld->dx < 0)\n+\t{\n+\t    p1 ^= 1;\n+\t    p2 ^= 1;\n+\t}\n+\tbreak;\n+\t\n+      case ST_VERTICAL:\n+\tp1 = tmbox[BOXRIGHT] < ld->v1->x;\n+\tp2 = tmbox[BOXLEFT] < ld->v1->x;\n+\tif (ld->dy < 0)\n+\t{\n+\t    p1 ^= 1;\n+\t    p2 ^= 1;\n+\t}\n+\tbreak;\n+\t\n+      case ST_POSITIVE:\n+\tp1 = P_PointOnLineSide (tmbox[BOXLEFT], tmbox[BOXTOP], ld);\n+\tp2 = P_PointOnLineSide (tmbox[BOXRIGHT], tmbox[BOXBOTTOM], ld);\n+\tbreak;\n+\t\n+      case ST_NEGATIVE:\n+\tp1 = P_PointOnLineSide (tmbox[BOXRIGHT], tmbox[BOXTOP], ld);\n+\tp2 = P_PointOnLineSide (tmbox[BOXLEFT], tmbox[BOXBOTTOM], ld);\n+\tbreak;\n+    }\n+\n+    if (p1 == p2) /* { dg-bogus \"use of uninitialized value\" } */\n+\treturn p1; /* { dg-bogus \"use of uninitialized value\" } */\n+    return -1;\n+}"}, {"sha": "13e1ad289b2e4a6aac4a4d3eade2068f29926a7e", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/switch-enum-pr105273-git-vreportf-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd4df81aa6537c3c935b026905f6e2fd839654e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fswitch-enum-pr105273-git-vreportf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd4df81aa6537c3c935b026905f6e2fd839654e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fswitch-enum-pr105273-git-vreportf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fswitch-enum-pr105273-git-vreportf-1.c?ref=ccd4df81aa6537c3c935b026905f6e2fd839654e", "patch": "@@ -0,0 +1,35 @@\n+typedef __SIZE_TYPE__ size_t;\n+int snprintf(char *str, size_t size, const char *format, ...);\n+\n+enum usage_kind {\n+\tUSAGE_ERROR,\n+\tUSAGE_BUG,\n+};\n+\n+static void __analyzer_vreportf(enum usage_kind kind)\n+{\n+\tchar buf[256];\n+\tconst char *pfx;\n+\n+\tswitch (kind) {\n+\tcase USAGE_ERROR:\n+\t\tpfx = \"error: \";\n+\t\tbreak;\n+\tcase USAGE_BUG:\n+\t\tpfx = \"BUG: \";\n+\t\tbreak;\n+\t}\n+\n+\tif (kind == USAGE_BUG)\n+\t\tsnprintf(buf, sizeof(buf), \"%s%s:%d: \", pfx, \"file\", 123);\n+\telse\n+\t\tsnprintf(buf, sizeof(buf), \"%s\", pfx);\n+}\n+\n+int main(void)\n+{\n+\t__analyzer_vreportf(USAGE_ERROR);\n+\t__analyzer_vreportf(USAGE_BUG);\n+\n+\treturn 0;\n+}"}]}