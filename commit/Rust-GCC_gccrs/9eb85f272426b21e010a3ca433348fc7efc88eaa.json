{"sha": "9eb85f272426b21e010a3ca433348fc7efc88eaa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWViODVmMjcyNDI2YjIxZTAxMGEzY2E0MzMzNDhmYzdlZmM4OGVhYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-04-03T17:24:12Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-04-03T17:24:12Z"}, "message": "Demangle C++11 ref-qualifier.\n\ninclude/\n\t* demangle.h (enum demangle_component_type): Add\n\tDEMANGLE_COMPONENT_REFERENCE_THIS,\n\tDEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS.\nlibiberty/\n\t* cp-demangle.c (d_ref_qualifier): New.\n\t(d_nested_name, d_function_type): Use it.\n\t(d_parmlist): Don't get confused by a ref-qualifier.\n\t(cplus_demangle_type): Reorder ref-qualifier.\n\t(d_pointer_to_member_type): Likewise.\n\t(d_dump): Handle DEMANGLE_COMPONENT_REFERENCE_THIS and\n\tDEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS.\n\t(d_make_comp, has_return_type, d_encoding): Likewise.\n\t(d_print_comp, d_print_mod_list, d_print_mod): Likewise.\n\t(d_print_function_type, is_ctor_or_dtor): Likewise.\n\nFrom-SVN: r197436", "tree": {"sha": "5a810c75a1e380158b5c1abe6bc6d2e0f52edb57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a810c75a1e380158b5c1abe6bc6d2e0f52edb57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9eb85f272426b21e010a3ca433348fc7efc88eaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eb85f272426b21e010a3ca433348fc7efc88eaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eb85f272426b21e010a3ca433348fc7efc88eaa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eb85f272426b21e010a3ca433348fc7efc88eaa/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9d821fa520370411c092b3fa4a6b4eabcedc034e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d821fa520370411c092b3fa4a6b4eabcedc034e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d821fa520370411c092b3fa4a6b4eabcedc034e"}], "stats": {"total": 176, "additions": 163, "deletions": 13}, "files": [{"sha": "7fe2842b4130a1a9acb30a45616fb20e84d6f830", "filename": "include/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb85f272426b21e010a3ca433348fc7efc88eaa/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb85f272426b21e010a3ca433348fc7efc88eaa/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=9eb85f272426b21e010a3ca433348fc7efc88eaa", "patch": "@@ -1,3 +1,10 @@\n+2013-04-03  Jason Merrill  <jason@redhat.com>\n+\n+\tDemangle C++11 ref-qualifier.\n+\t* demangle.h (enum demangle_component_type): Add\n+\tDEMANGLE_COMPONENT_REFERENCE_THIS,\n+\tDEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS.\n+\n 2013-03-01  Cary Coutant  <ccoutant@google.com>\n \n \t* dwarf2.h (enum dwarf_sect): New enum type."}, {"sha": "58bf547d5474abeca17da64345b3417936a69768", "filename": "include/demangle.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb85f272426b21e010a3ca433348fc7efc88eaa/include%2Fdemangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb85f272426b21e010a3ca433348fc7efc88eaa/include%2Fdemangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fdemangle.h?ref=9eb85f272426b21e010a3ca433348fc7efc88eaa", "patch": "@@ -302,6 +302,12 @@ enum demangle_component_type\n   /* The const qualifier modifying a member function.  The one subtree\n      is the type which is being qualified.  */\n   DEMANGLE_COMPONENT_CONST_THIS,\n+  /* C++11 A reference modifying a member function.  The one subtree is the\n+     type which is being referenced.  */\n+  DEMANGLE_COMPONENT_REFERENCE_THIS,\n+  /* C++11: An rvalue reference modifying a member function.  The one\n+     subtree is the type which is being referenced.  */\n+  DEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS,\n   /* A vendor qualifier.  The left subtree is the type which is being\n      qualified, and the right subtree is the name of the\n      qualifier.  */"}, {"sha": "5e4473255eea690234983fd019bb343b55ecc797", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb85f272426b21e010a3ca433348fc7efc88eaa/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb85f272426b21e010a3ca433348fc7efc88eaa/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=9eb85f272426b21e010a3ca433348fc7efc88eaa", "patch": "@@ -1,3 +1,17 @@\n+2013-04-03  Jason Merrill  <jason@redhat.com>\n+\n+\tDemangle C++11 ref-qualifier.\n+\t* cp-demangle.c (d_ref_qualifier): New.\n+\t(d_nested_name, d_function_type): Use it.\n+\t(d_parmlist): Don't get confused by a ref-qualifier.\n+\t(cplus_demangle_type): Reorder ref-qualifier.\n+\t(d_pointer_to_member_type): Likewise.\n+\t(d_dump): Handle DEMANGLE_COMPONENT_REFERENCE_THIS and\n+\tDEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS.\n+\t(d_make_comp, has_return_type, d_encoding): Likewise.\n+\t(d_print_comp, d_print_mod_list, d_print_mod): Likewise.\n+\t(d_print_function_type, is_ctor_or_dtor): Likewise.\n+\n 2013-03-27  Kai Tietz  <ktietz@redhat.com>\n \n \t* configure: Regenerated."}, {"sha": "271d3d324d38f64794df2d979b64469daec2c998", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 124, "deletions": 13, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb85f272426b21e010a3ca433348fc7efc88eaa/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb85f272426b21e010a3ca433348fc7efc88eaa/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=9eb85f272426b21e010a3ca433348fc7efc88eaa", "patch": "@@ -381,6 +381,9 @@ static struct demangle_component *d_ctor_dtor_name (struct d_info *);\n static struct demangle_component **\n d_cv_qualifiers (struct d_info *, struct demangle_component **, int);\n \n+static struct demangle_component *\n+d_ref_qualifier (struct d_info *, struct demangle_component *);\n+\n static struct demangle_component *\n d_function_type (struct d_info *);\n \n@@ -614,6 +617,12 @@ d_dump (struct demangle_component *dc, int indent)\n     case DEMANGLE_COMPONENT_CONST_THIS:\n       printf (\"const this\\n\");\n       break;\n+    case DEMANGLE_COMPONENT_REFERENCE_THIS:\n+      printf (\"reference this\\n\");\n+      break;\n+    case DEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS:\n+      printf (\"rvalue reference this\\n\");\n+      break;\n     case DEMANGLE_COMPONENT_VENDOR_TYPE_QUAL:\n       printf (\"vendor type qualifier\\n\");\n       break;\n@@ -893,6 +902,8 @@ d_make_comp (struct d_info *di, enum demangle_component_type type,\n     case DEMANGLE_COMPONENT_RESTRICT_THIS:\n     case DEMANGLE_COMPONENT_VOLATILE_THIS:\n     case DEMANGLE_COMPONENT_CONST_THIS:\n+    case DEMANGLE_COMPONENT_REFERENCE_THIS:\n+    case DEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS:\n     case DEMANGLE_COMPONENT_ARGLIST:\n     case DEMANGLE_COMPONENT_TEMPLATE_ARGLIST:\n       break;\n@@ -1131,6 +1142,8 @@ has_return_type (struct demangle_component *dc)\n     case DEMANGLE_COMPONENT_RESTRICT_THIS:\n     case DEMANGLE_COMPONENT_VOLATILE_THIS:\n     case DEMANGLE_COMPONENT_CONST_THIS:\n+    case DEMANGLE_COMPONENT_REFERENCE_THIS:\n+    case DEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS:\n       return has_return_type (d_left (dc));\n     }\n }\n@@ -1186,7 +1199,9 @@ d_encoding (struct d_info *di, int top_level)\n \t     v2 demangler without DMGL_PARAMS.  */\n \t  while (dc->type == DEMANGLE_COMPONENT_RESTRICT_THIS\n \t\t || dc->type == DEMANGLE_COMPONENT_VOLATILE_THIS\n-\t\t || dc->type == DEMANGLE_COMPONENT_CONST_THIS)\n+\t\t || dc->type == DEMANGLE_COMPONENT_CONST_THIS\n+\t\t || dc->type == DEMANGLE_COMPONENT_REFERENCE_THIS\n+\t\t || dc->type == DEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS)\n \t    dc = d_left (dc);\n \n \t  /* If the top level is a DEMANGLE_COMPONENT_LOCAL_NAME, then\n@@ -1200,7 +1215,9 @@ d_encoding (struct d_info *di, int top_level)\n \t      dcr = d_right (dc);\n \t      while (dcr->type == DEMANGLE_COMPONENT_RESTRICT_THIS\n \t\t     || dcr->type == DEMANGLE_COMPONENT_VOLATILE_THIS\n-\t\t     || dcr->type == DEMANGLE_COMPONENT_CONST_THIS)\n+\t\t     || dcr->type == DEMANGLE_COMPONENT_CONST_THIS\n+\t\t     || dcr->type == DEMANGLE_COMPONENT_REFERENCE_THIS\n+\t\t     || dcr->type == DEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS)\n \t\tdcr = d_left (dcr);\n \t      dc->u.s_binary.right = dcr;\n \t    }\n@@ -1322,15 +1339,16 @@ d_name (struct d_info *di)\n     }\n }\n \n-/* <nested-name> ::= N [<CV-qualifiers>] <prefix> <unqualified-name> E\n-                 ::= N [<CV-qualifiers>] <template-prefix> <template-args> E\n+/* <nested-name> ::= N [<CV-qualifiers>] [<ref-qualifier>] <prefix> <unqualified-name> E\n+                 ::= N [<CV-qualifiers>] [<ref-qualifier>] <template-prefix> <template-args> E\n */\n \n static struct demangle_component *\n d_nested_name (struct d_info *di)\n {\n   struct demangle_component *ret;\n   struct demangle_component **pret;\n+  struct demangle_component *rqual;\n \n   if (! d_check_char (di, 'N'))\n     return NULL;\n@@ -1339,10 +1357,20 @@ d_nested_name (struct d_info *di)\n   if (pret == NULL)\n     return NULL;\n \n+  /* Parse the ref-qualifier now and then attach it\n+     once we have something to attach it to.  */\n+  rqual = d_ref_qualifier (di, NULL);\n+\n   *pret = d_prefix (di);\n   if (*pret == NULL)\n     return NULL;\n \n+  if (rqual)\n+    {\n+      d_left (rqual) = ret;\n+      ret = rqual;\n+    }\n+\n   if (! d_check_char (di, 'E'))\n     return NULL;\n \n@@ -2171,7 +2199,19 @@ cplus_demangle_type (struct d_info *di)\n       if (pret == NULL)\n \treturn NULL;\n       *pret = cplus_demangle_type (di);\n-      if (! *pret || ! d_add_substitution (di, ret))\n+      if (! *pret)\n+\treturn NULL;\n+      if ((*pret)->type == DEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS\n+\t  || (*pret)->type == DEMANGLE_COMPONENT_REFERENCE_THIS)\n+\t{\n+\t  /* Move the ref-qualifier outside the cv-qualifiers so that\n+\t     they are printed in the right order.  */\n+\t  struct demangle_component *fn = d_left (*pret);\n+\t  d_left (*pret) = ret;\n+\t  ret = *pret;\n+\t  *pret = fn;\n+\t}\n+      if (! d_add_substitution (di, ret))\n \treturn NULL;\n       return ret;\n     }\n@@ -2474,7 +2514,38 @@ d_cv_qualifiers (struct d_info *di,\n   return pret;\n }\n \n-/* <function-type> ::= F [Y] <bare-function-type> E  */\n+/* <ref-qualifier> ::= R\n+                   ::= O */\n+\n+static struct demangle_component *\n+d_ref_qualifier (struct d_info *di, struct demangle_component *sub)\n+{\n+  struct demangle_component *ret = sub;\n+  char peek;\n+\n+  peek = d_peek_char (di);\n+  if (peek == 'R' || peek == 'O')\n+    {\n+      enum demangle_component_type t;\n+      if (peek == 'R')\n+\t{\n+\t  t = DEMANGLE_COMPONENT_REFERENCE_THIS;\n+\t  di->expansion += sizeof \"&\";\n+\t}\n+      else\n+\t{\n+\t  t = DEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS;\n+\t  di->expansion += sizeof \"&&\";\n+\t}\n+      d_advance (di, 1);\n+\n+      ret = d_make_comp (di, t, ret, NULL);\n+    }\n+\n+  return ret;\n+}\n+\n+/* <function-type> ::= F [Y] <bare-function-type> [<ref-qualifier>] E  */\n \n static struct demangle_component *\n d_function_type (struct d_info *di)\n@@ -2490,6 +2561,8 @@ d_function_type (struct d_info *di)\n       d_advance (di, 1);\n     }\n   ret = d_bare_function_type (di, 1);\n+  ret = d_ref_qualifier (di, ret);\n+\n   if (! d_check_char (di, 'E'))\n     return NULL;\n   return ret;\n@@ -2512,6 +2585,10 @@ d_parmlist (struct d_info *di)\n       char peek = d_peek_char (di);\n       if (peek == '\\0' || peek == 'E' || peek == '.')\n \tbreak;\n+      if ((peek == 'R' || peek == 'O')\n+\t  && d_peek_next_char (di) == 'E')\n+\t/* Function ref-qualifier, not a ref prefix for a parameter type.  */\n+\tbreak;\n       type = cplus_demangle_type (di);\n       if (type == NULL)\n \treturn NULL;\n@@ -2692,6 +2769,18 @@ d_pointer_to_member_type (struct d_info *di)\n   if (*pmem == NULL)\n     return NULL;\n \n+  if (pmem != &mem\n+      && ((*pmem)->type == DEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS\n+\t  || (*pmem)->type == DEMANGLE_COMPONENT_REFERENCE_THIS))\n+    {\n+      /* Move the ref-qualifier outside the cv-qualifiers so that\n+\t they are printed in the right order.  */\n+      struct demangle_component *fn = d_left (*pmem);\n+      d_left (*pmem) = mem;\n+      mem = *pmem;\n+      *pmem = fn;\n+    }\n+\n   if (pmem != &mem && (*pmem)->type != DEMANGLE_COMPONENT_FUNCTION_TYPE)\n     {\n       if (! d_add_substitution (di, mem))\n@@ -3923,7 +4012,9 @@ d_print_comp (struct d_print_info *dpi, int options,\n \n \t    if (typed_name->type != DEMANGLE_COMPONENT_RESTRICT_THIS\n \t\t&& typed_name->type != DEMANGLE_COMPONENT_VOLATILE_THIS\n-\t\t&& typed_name->type != DEMANGLE_COMPONENT_CONST_THIS)\n+\t\t&& typed_name->type != DEMANGLE_COMPONENT_CONST_THIS\n+\t\t&& typed_name->type != DEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS\n+\t\t&& typed_name->type != DEMANGLE_COMPONENT_REFERENCE_THIS)\n \t      break;\n \n \t    typed_name = d_left (typed_name);\n@@ -3957,7 +4048,10 @@ d_print_comp (struct d_print_info *dpi, int options,\n \t      local_name = local_name->u.s_unary_num.sub;\n \t    while (local_name->type == DEMANGLE_COMPONENT_RESTRICT_THIS\n \t\t   || local_name->type == DEMANGLE_COMPONENT_VOLATILE_THIS\n-\t\t   || local_name->type == DEMANGLE_COMPONENT_CONST_THIS)\n+\t\t   || local_name->type == DEMANGLE_COMPONENT_CONST_THIS\n+\t\t   || local_name->type == DEMANGLE_COMPONENT_REFERENCE_THIS\n+\t\t   || (local_name->type\n+\t\t       == DEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS))\n \t      {\n \t\tif (i >= sizeof adpm / sizeof adpm[0])\n \t\t  {\n@@ -4234,6 +4328,8 @@ d_print_comp (struct d_print_info *dpi, int options,\n     case DEMANGLE_COMPONENT_RESTRICT_THIS:\n     case DEMANGLE_COMPONENT_VOLATILE_THIS:\n     case DEMANGLE_COMPONENT_CONST_THIS:\n+    case DEMANGLE_COMPONENT_REFERENCE_THIS:\n+    case DEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS:\n     case DEMANGLE_COMPONENT_VENDOR_TYPE_QUAL:\n     case DEMANGLE_COMPONENT_POINTER:\n     case DEMANGLE_COMPONENT_COMPLEX:\n@@ -4906,7 +5002,10 @@ d_print_mod_list (struct d_print_info *dpi, int options,\n       || (! suffix\n \t  && (mods->mod->type == DEMANGLE_COMPONENT_RESTRICT_THIS\n \t      || mods->mod->type == DEMANGLE_COMPONENT_VOLATILE_THIS\n-\t      || mods->mod->type == DEMANGLE_COMPONENT_CONST_THIS)))\n+\t      || mods->mod->type == DEMANGLE_COMPONENT_CONST_THIS\n+\t      || mods->mod->type == DEMANGLE_COMPONENT_REFERENCE_THIS\n+\t      || (mods->mod->type\n+\t\t  == DEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS))))\n     {\n       d_print_mod_list (dpi, options, mods->next, suffix);\n       return;\n@@ -4961,7 +5060,9 @@ d_print_mod_list (struct d_print_info *dpi, int options,\n \n       while (dc->type == DEMANGLE_COMPONENT_RESTRICT_THIS\n \t     || dc->type == DEMANGLE_COMPONENT_VOLATILE_THIS\n-\t     || dc->type == DEMANGLE_COMPONENT_CONST_THIS)\n+\t     || dc->type == DEMANGLE_COMPONENT_CONST_THIS\n+\t     || dc->type == DEMANGLE_COMPONENT_REFERENCE_THIS\n+\t     || dc->type == DEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS)\n \tdc = d_left (dc);\n \n       d_print_comp (dpi, options, dc);\n@@ -5006,9 +5107,14 @@ d_print_mod (struct d_print_info *dpi, int options,\n       if ((options & DMGL_JAVA) == 0)\n \td_append_char (dpi, '*');\n       return;\n+    case DEMANGLE_COMPONENT_REFERENCE_THIS:\n+      /* For the ref-qualifier, put a space before the &.  */\n+      d_append_char (dpi, ' ');\n     case DEMANGLE_COMPONENT_REFERENCE:\n       d_append_char (dpi, '&');\n       return;\n+    case DEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS:\n+      d_append_char (dpi, ' ');\n     case DEMANGLE_COMPONENT_RVALUE_REFERENCE:\n       d_append_string (dpi, \"&&\");\n       return;\n@@ -5080,6 +5186,8 @@ d_print_function_type (struct d_print_info *dpi, int options,\n \tcase DEMANGLE_COMPONENT_RESTRICT_THIS:\n \tcase DEMANGLE_COMPONENT_VOLATILE_THIS:\n \tcase DEMANGLE_COMPONENT_CONST_THIS:\n+\tcase DEMANGLE_COMPONENT_REFERENCE_THIS:\n+\tcase DEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS:\n \t  break;\n \tdefault:\n \t  break;\n@@ -5600,14 +5708,17 @@ is_ctor_or_dtor (const char *mangled,\n       {\n \tswitch (dc->type)\n \t  {\n+\t    /* These cannot appear on a constructor or destructor.  */\n+\t  case DEMANGLE_COMPONENT_RESTRICT_THIS:\n+\t  case DEMANGLE_COMPONENT_VOLATILE_THIS:\n+\t  case DEMANGLE_COMPONENT_CONST_THIS:\n+\t  case DEMANGLE_COMPONENT_REFERENCE_THIS:\n+\t  case DEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS:\n \t  default:\n \t    dc = NULL;\n \t    break;\n \t  case DEMANGLE_COMPONENT_TYPED_NAME:\n \t  case DEMANGLE_COMPONENT_TEMPLATE:\n-\t  case DEMANGLE_COMPONENT_RESTRICT_THIS:\n-\t  case DEMANGLE_COMPONENT_VOLATILE_THIS:\n-\t  case DEMANGLE_COMPONENT_CONST_THIS:\n \t    dc = d_left (dc);\n \t    break;\n \t  case DEMANGLE_COMPONENT_QUAL_NAME:"}, {"sha": "ed73245206925060f0bc0ff929c11bf3ee415103", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb85f272426b21e010a3ca433348fc7efc88eaa/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb85f272426b21e010a3ca433348fc7efc88eaa/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=9eb85f272426b21e010a3ca433348fc7efc88eaa", "patch": "@@ -4279,3 +4279,15 @@ f<void () const, void ()>\n --format=gnu-v3\n _ZN4modc6parser8sequenceINS_9astParser13LocatedParserINS0_9ParserRefINS2_UlRNS2_16TokenParserInputEE_EEEEEINS0_14OptionalParserINS2_18ListParserTemplateILNS_6tokens5Token4TypeE4EXadL_ZNSD_Ut_13parenthesizedEEEE6ParserINS4_INS0_6ParserIS5_NS_3ast10ExpressionEEEEEEEEENSA_INS4_INS2_22OneOfKeywordsToTParserINSJ_5StyleEEEEEEENS0_14SequenceParserIS5_INS0_18ExactElementParserIS5_EENSA_ISM_EEEEENS0_14RepeatedParserINS4_INS0_15TransformParserINSU_IS5_INS4_INSP_INSJ_10Annotation12RelationshipEEEEESX_EEENS2_UlNS2_3LocES12_ONS_5MaybeISK_EEE19_EEEEELb0EEEEEENSU_INS0_17ExtractParserTypeIT_E9InputTypeEINS0_8MaybeRefIS1F_E4TypeEDpNS1I_IT0_E4TypeEEEEOS1F_DpOS1L_\n modc::parser::ParserRef<modc::astParser::OneOfKeywordsToTParser<modc::astParser::ListParserTemplate<(modc::tokens::Token::Type)4, &modc::tokens::{unnamed type#1}::parenthesized>::Parser::Style> ><modc::parser::ExtractParserType<modc::astParser::LocatedParser<modc::parser::ParserRef<modc::astParser::{lambda(modc::astParser::TokenParserInput&)#1}> > >::InputType, modc::parser::MaybeRef<modc::astParser::{lambda(modc::astParser::Loc, modc::parser::RepeatedParser, modc::Maybe<modc::parser::Parser>&&)#21}>::Type, modc::parser::RepeatedParser<modc::parser::ParserRef<modc::parser::TransformParser<modc::parser::ParserRef<modc::astParser::OneOfKeywordsToTParser<modc::astParser::ListParserTemplate<(modc::tokens::Token::Type)4, &modc::tokens::{unnamed type#1}::parenthesized>::Parser::Style> ><modc::astParser::TokenParserInput<modc::parser::ParserRef<modc::astParser::ListParserTemplate<(modc::tokens::Token::Type)4, &modc::tokens::{unnamed type#1}::parenthesized>::Parser<modc::parser::ParserRef<modc::parser::Parser<modc::astParser::TokenParserInput, modc::ast::Expression> > ><modc::astParser::ListParserTemplate<(modc::tokens::Token::Type)4, &modc::tokens::{unnamed type#1}::parenthesized>::Parser::Annotation::Relationship> >, modc::parser::ExactElementParser> >, modc::astParser::{lambda(modc::astParser::Loc, modc::parser::RepeatedParser, modc::Maybe<modc::parser::Parser>&&)#21}> >, false><modc::parser::OptionalParser<modc::astParser::ListParserTemplate<(modc::tokens::Token::Type)4, &modc::tokens::{unnamed type#1}::parenthesized>::Parser<modc::parser::ParserRef<modc::parser::Parser<modc::astParser::TokenParserInput, modc::ast::Expression> > > > >::Type, modc::parser::RepeatedParser<modc::parser::ParserRef<modc::parser::TransformParser<modc::parser::ParserRef<modc::astParser::OneOfKeywordsToTParser<modc::astParser::ListParserTemplate<(modc::tokens::Token::Type)4, &modc::tokens::{unnamed type#1}::parenthesized>::Parser::Style> ><modc::astParser::TokenParserInput<modc::parser::ParserRef<modc::astParser::ListParserTemplate<(modc::tokens::Token::Type)4, &modc::tokens::{unnamed type#1}::parenthesized>::Parser<modc::parser::ParserRef<modc::parser::Parser<modc::astParser::TokenParserInput, modc::ast::Expression> > ><modc::astParser::ListParserTemplate<(modc::tokens::Token::Type)4, &modc::tokens::{unnamed type#1}::parenthesized>::Parser::Annotation::Relationship> >, modc::parser::ExactElementParser> >, modc::astParser::{lambda(modc::astParser::Loc, modc::parser::RepeatedParser, modc::Maybe<modc::parser::Parser>&&)#21}> >, false><modc::astParser::LocatedParser<modc::parser::ParserRef<modc::astParser::{lambda(modc::astParser::TokenParserInput&)#1}> ><modc::parser::ParserRef<modc::astParser::OneOfKeywordsToTParser<modc::astParser::ListParserTemplate<(modc::tokens::Token::Type)4, &modc::tokens::{unnamed type#1}::parenthesized>::Parser::Style> > > >::Type, modc::parser::RepeatedParser<modc::parser::ParserRef<modc::parser::TransformParser<modc::parser::ParserRef<modc::astParser::OneOfKeywordsToTParser<modc::astParser::ListParserTemplate<(modc::tokens::Token::Type)4, &modc::tokens::{unnamed type#1}::parenthesized>::Parser::Style> ><modc::astParser::TokenParserInput<modc::parser::ParserRef<modc::astParser::ListParserTemplate<(modc::tokens::Token::Type)4, &modc::tokens::{unnamed type#1}::parenthesized>::Parser<modc::parser::ParserRef<modc::parser::Parser<modc::astParser::TokenParserInput, modc::ast::Expression> > ><modc::astParser::ListParserTemplate<(modc::tokens::Token::Type)4, &modc::tokens::{unnamed type#1}::parenthesized>::Parser::Annotation::Relationship> >, modc::parser::ExactElementParser> >, modc::astParser::{lambda(modc::astParser::Loc, modc::parser::RepeatedParser, modc::Maybe<modc::parser::Parser>&&)#21}> >, false><modc::parser::SequenceParser<modc::astParser::TokenParserInput<modc::parser::ExactElementParser<modc::astParser::TokenParserInput>, modc::astParser::LocatedParser<modc::parser::ParserRef<modc::astParser::{lambda(modc::astParser::TokenParserInput&)#1}> ><modc::ast::Expression> > > >::Type, modc::parser::RepeatedParser<modc::parser::ParserRef<modc::parser::TransformParser<modc::parser::ParserRef<modc::astParser::OneOfKeywordsToTParser<modc::astParser::ListParserTemplate<(modc::tokens::Token::Type)4, &modc::tokens::{unnamed type#1}::parenthesized>::Parser::Style> ><modc::astParser::TokenParserInput<modc::parser::ParserRef<modc::astParser::ListParserTemplate<(modc::tokens::Token::Type)4, &modc::tokens::{unnamed type#1}::parenthesized>::Parser<modc::parser::ParserRef<modc::parser::Parser<modc::astParser::TokenParserInput, modc::ast::Expression> > ><modc::astParser::ListParserTemplate<(modc::tokens::Token::Type)4, &modc::tokens::{unnamed type#1}::parenthesized>::Parser::Annotation::Relationship> >, modc::parser::ExactElementParser> >, modc::astParser::{lambda(modc::astParser::Loc, modc::parser::RepeatedParser, modc::Maybe<modc::parser::Parser>&&)#21}> >, false><modc::parser::RepeatedParser<modc::parser::ParserRef<modc::parser::TransformParser<modc::parser::ParserRef<modc::astParser::OneOfKeywordsToTParser<modc::astParser::ListParserTemplate<(modc::tokens::Token::Type)4, &modc::tokens::{unnamed type#1}::parenthesized>::Parser::Style> ><modc::astParser::TokenParserInput<modc::parser::ParserRef<modc::astParser::ListParserTemplate<(modc::tokens::Token::Type)4, &modc::tokens::{unnamed type#1}::parenthesized>::Parser<modc::parser::ParserRef<modc::parser::Parser<modc::astParser::TokenParserInput, modc::ast::Expression> > ><modc::astParser::ListParserTemplate<(modc::tokens::Token::Type)4, &modc::tokens::{unnamed type#1}::parenthesized>::Parser::Annotation::Relationship> >, modc::parser::ExactElementParser> >, modc::astParser::{lambda(modc::astParser::Loc, modc::parser::RepeatedParser, modc::Maybe<modc::parser::Parser>&&)#21}> >, false> >::Type> modc::parser::sequence<modc::astParser::LocatedParser<modc::parser::ParserRef<modc::astParser::{lambda(modc::astParser::TokenParserInput&)#1}> >, modc::parser::OptionalParser<modc::astParser::ListParserTemplate<(modc::tokens::Token::Type)4, &modc::tokens::{unnamed type#1}::parenthesized>::Parser<modc::parser::ParserRef<modc::parser::Parser<modc::astParser::TokenParserInput, modc::ast::Expression> > > >, modc::astParser::LocatedParser<modc::parser::ParserRef<modc::astParser::{lambda(modc::astParser::TokenParserInput&)#1}> ><modc::parser::ParserRef<modc::astParser::OneOfKeywordsToTParser<modc::astParser::ListParserTemplate<(modc::tokens::Token::Type)4, &modc::tokens::{unnamed type#1}::parenthesized>::Parser::Style> > >, modc::parser::SequenceParser<modc::astParser::TokenParserInput<modc::parser::ExactElementParser<modc::astParser::TokenParserInput>, modc::astParser::LocatedParser<modc::parser::ParserRef<modc::astParser::{lambda(modc::astParser::TokenParserInput&)#1}> ><modc::ast::Expression> > >, modc::parser::RepeatedParser<modc::parser::ParserRef<modc::parser::TransformParser<modc::parser::ParserRef<modc::astParser::OneOfKeywordsToTParser<modc::astParser::ListParserTemplate<(modc::tokens::Token::Type)4, &modc::tokens::{unnamed type#1}::parenthesized>::Parser::Style> ><modc::astParser::TokenParserInput<modc::parser::ParserRef<modc::astParser::ListParserTemplate<(modc::tokens::Token::Type)4, &modc::tokens::{unnamed type#1}::parenthesized>::Parser<modc::parser::ParserRef<modc::parser::Parser<modc::astParser::TokenParserInput, modc::ast::Expression> > ><modc::astParser::ListParserTemplate<(modc::tokens::Token::Type)4, &modc::tokens::{unnamed type#1}::parenthesized>::Parser::Annotation::Relationship> >, modc::parser::ExactElementParser> >, modc::astParser::{lambda(modc::astParser::Loc, modc::parser::RepeatedParser, modc::Maybe<modc::parser::Parser>&&)#21}> >, false> >(modc::astParser::{lambda(modc::astParser::Loc, modc::parser::RepeatedParser, modc::Maybe<modc::parser::Parser>&&)#21}&&, (modc::parser::ExtractParserType<modc::astParser::LocatedParser<modc::parser::ParserRef<modc::astParser::{lambda(modc::astParser::TokenParserInput&)#1}> > >&&)...)\n+--format=gnu-v3\n+_ZNKR1A1hEv\n+A::h() const &\n+--format=gnu-v3\n+_Z1lM1AKFvvRE\n+l(void (A::*)() const &)\n+--format=gnu-v3\n+_Z1mIFvvOEEvM1AT_\n+void m<void () &&>(void (A::*)() &&)\n+--format=gnu-v3\n+_Z1nIM1AKFvvREEvT_\n+void n<void (A::*)() const &>(void (A::*)() const &)"}]}