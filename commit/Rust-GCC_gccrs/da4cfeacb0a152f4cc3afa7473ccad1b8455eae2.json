{"sha": "da4cfeacb0a152f4cc3afa7473ccad1b8455eae2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE0Y2ZlYWNiMGExNTJmNGNjM2FmYTc0NzNjY2FkMWI4NDU1ZWFlMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-04-23T13:48:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-04-23T13:48:12Z"}, "message": "Makefile.in (OBJS): Remove loop-unswitch.o.\n\n2014-04-23  Richard Biener  <rguenther@suse.de>\n\n\t* Makefile.in (OBJS): Remove loop-unswitch.o.\n\t* loop-unswitch.c: Delete.\n\t* tree-pass.h (make_pass_rtl_unswitch): Remove.\n\t* passes.def (pass_rtl_unswitch): Likewise.\n\t* loop-init.c (gate_rtl_unswitch): Likewise.\n\t(rtl_unswitch): Likewise.\n\t(pass_data_rtl_unswitch): Likewise.\n\t(pass_rtl_unswitch): Likewise.\n\t(make_pass_rtl_unswitch): Likewise.\n\t* rtl.h (reversed_condition): Likewise.\n\t(compare_and_jump_seq): Likewise.\n\t* loop-iv.c (reversed_condition): Move here from loop-unswitch.c\n\tand make static.\n\t* loop-unroll.c (compare_and_jump_seq): Likewise.\n\nFrom-SVN: r209698", "tree": {"sha": "74c8ed6896fc763ca39ad07ae90e5c2c28f4727d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74c8ed6896fc763ca39ad07ae90e5c2c28f4727d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da4cfeacb0a152f4cc3afa7473ccad1b8455eae2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da4cfeacb0a152f4cc3afa7473ccad1b8455eae2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da4cfeacb0a152f4cc3afa7473ccad1b8455eae2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da4cfeacb0a152f4cc3afa7473ccad1b8455eae2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "22718afe53695be38b6d9b7de6edec7c8dda734e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22718afe53695be38b6d9b7de6edec7c8dda734e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22718afe53695be38b6d9b7de6edec7c8dda734e"}], "stats": {"total": 135, "additions": 85, "deletions": 50}, "files": [{"sha": "c79f26ab7fc8342acdce58eba13ab4d4a895c798", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4cfeacb0a152f4cc3afa7473ccad1b8455eae2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4cfeacb0a152f4cc3afa7473ccad1b8455eae2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da4cfeacb0a152f4cc3afa7473ccad1b8455eae2", "patch": "@@ -1,3 +1,20 @@\n+2014-04-23  Richard Biener  <rguenther@suse.de>\n+\n+\t* Makefile.in (OBJS): Remove loop-unswitch.o.\n+\t* loop-unswitch.c: Delete.\n+\t* tree-pass.h (make_pass_rtl_unswitch): Remove.\n+\t* passes.def (pass_rtl_unswitch): Likewise.\n+\t* loop-init.c (gate_rtl_unswitch): Likewise.\n+\t(rtl_unswitch): Likewise.\n+\t(pass_data_rtl_unswitch): Likewise.\n+\t(pass_rtl_unswitch): Likewise.\n+\t(make_pass_rtl_unswitch): Likewise.\n+\t* rtl.h (reversed_condition): Likewise.\n+\t(compare_and_jump_seq): Likewise.\n+\t* loop-iv.c (reversed_condition): Move here from loop-unswitch.c\n+\tand make static.\n+\t* loop-unroll.c (compare_and_jump_seq): Likewise.\n+\n 2014-04-23  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/60903"}, {"sha": "6b46408d1a1908fe4bd9c349ac0dcaa2efc6b4cb", "filename": "gcc/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4cfeacb0a152f4cc3afa7473ccad1b8455eae2/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4cfeacb0a152f4cc3afa7473ccad1b8455eae2/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=da4cfeacb0a152f4cc3afa7473ccad1b8455eae2", "patch": "@@ -1294,7 +1294,6 @@ OBJS = \\\n \tloop-invariant.o \\\n \tloop-iv.o \\\n \tloop-unroll.o \\\n-\tloop-unswitch.o \\\n \tlower-subreg.o \\\n \tlra.o \\\n \tlra-assigns.o \\"}, {"sha": "b7f8d9c68c514ccba9acdc8e0ddce38abbcfdc41", "filename": "gcc/loop-init.c", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4cfeacb0a152f4cc3afa7473ccad1b8455eae2/gcc%2Floop-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4cfeacb0a152f4cc3afa7473ccad1b8455eae2/gcc%2Floop-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-init.c?ref=da4cfeacb0a152f4cc3afa7473ccad1b8455eae2", "patch": "@@ -511,49 +511,6 @@ make_pass_rtl_move_loop_invariants (gcc::context *ctxt)\n \f\n namespace {\n \n-const pass_data pass_data_rtl_unswitch =\n-{\n-  RTL_PASS, /* type */\n-  \"loop2_unswitch\", /* name */\n-  OPTGROUP_LOOP, /* optinfo_flags */\n-  true, /* has_execute */\n-  TV_LOOP_UNSWITCH, /* tv_id */\n-  0, /* properties_required */\n-  0, /* properties_provided */\n-  0, /* properties_destroyed */\n-  0, /* todo_flags_start */\n-  TODO_verify_rtl_sharing, /* todo_flags_finish */\n-};\n-\n-class pass_rtl_unswitch : public rtl_opt_pass\n-{\n-public:\n-  pass_rtl_unswitch (gcc::context *ctxt)\n-    : rtl_opt_pass (pass_data_rtl_unswitch, ctxt)\n-  {}\n-\n-  /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_unswitch_loops; }\n-  virtual unsigned int execute (function *fun)\n-    {\n-      if (number_of_loops (fun) > 1)\n-\tunswitch_loops ();\n-      return 0;\n-    }\n-\n-}; // class pass_rtl_unswitch\n-\n-} // anon namespace\n-\n-rtl_opt_pass *\n-make_pass_rtl_unswitch (gcc::context *ctxt)\n-{\n-  return new pass_rtl_unswitch (ctxt);\n-}\n-\n-\f\n-namespace {\n-\n const pass_data pass_data_rtl_unroll_and_peel_loops =\n {\n   RTL_PASS, /* type */"}, {"sha": "42bcb75bec7e2c01649a5ff2607a83aa0e4774e9", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4cfeacb0a152f4cc3afa7473ccad1b8455eae2/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4cfeacb0a152f4cc3afa7473ccad1b8455eae2/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=da4cfeacb0a152f4cc3afa7473ccad1b8455eae2", "patch": "@@ -1732,6 +1732,21 @@ canon_condition (rtx cond)\n   return cond;\n }\n \n+/* Reverses CONDition; returns NULL if we cannot.  */\n+\n+static rtx\n+reversed_condition (rtx cond)\n+{\n+  enum rtx_code reversed;\n+  reversed = reversed_comparison_code (cond, NULL);\n+  if (reversed == UNKNOWN)\n+    return NULL_RTX;\n+  else\n+    return gen_rtx_fmt_ee (reversed,\n+\t\t\t   GET_MODE (cond), XEXP (cond, 0),\n+\t\t\t   XEXP (cond, 1));\n+}\n+\n /* Tries to use the fact that COND holds to simplify EXPR.  ALTERED is the\n    set of altered regs.  */\n "}, {"sha": "f952d9d1ea313e123ca642b3b2c5de3c6b7b9751", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4cfeacb0a152f4cc3afa7473ccad1b8455eae2/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4cfeacb0a152f4cc3afa7473ccad1b8455eae2/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=da4cfeacb0a152f4cc3afa7473ccad1b8455eae2", "patch": "@@ -1060,6 +1060,59 @@ split_edge_and_insert (edge e, rtx insns)\n   return bb;\n }\n \n+/* Prepare a sequence comparing OP0 with OP1 using COMP and jumping to LABEL if\n+   true, with probability PROB.  If CINSN is not NULL, it is the insn to copy\n+   in order to create a jump.  */\n+\n+static rtx\n+compare_and_jump_seq (rtx op0, rtx op1, enum rtx_code comp, rtx label, int prob,\n+\t\t      rtx cinsn)\n+{\n+  rtx seq, jump, cond;\n+  enum machine_mode mode;\n+\n+  mode = GET_MODE (op0);\n+  if (mode == VOIDmode)\n+    mode = GET_MODE (op1);\n+\n+  start_sequence ();\n+  if (GET_MODE_CLASS (mode) == MODE_CC)\n+    {\n+      /* A hack -- there seems to be no easy generic way how to make a\n+\t conditional jump from a ccmode comparison.  */\n+      gcc_assert (cinsn);\n+      cond = XEXP (SET_SRC (pc_set (cinsn)), 0);\n+      gcc_assert (GET_CODE (cond) == comp);\n+      gcc_assert (rtx_equal_p (op0, XEXP (cond, 0)));\n+      gcc_assert (rtx_equal_p (op1, XEXP (cond, 1)));\n+      emit_jump_insn (copy_insn (PATTERN (cinsn)));\n+      jump = get_last_insn ();\n+      gcc_assert (JUMP_P (jump));\n+      JUMP_LABEL (jump) = JUMP_LABEL (cinsn);\n+      LABEL_NUSES (JUMP_LABEL (jump))++;\n+      redirect_jump (jump, label, 0);\n+    }\n+  else\n+    {\n+      gcc_assert (!cinsn);\n+\n+      op0 = force_operand (op0, NULL_RTX);\n+      op1 = force_operand (op1, NULL_RTX);\n+      do_compare_rtx_and_jump (op0, op1, comp, 0,\n+\t\t\t       mode, NULL_RTX, NULL_RTX, label, -1);\n+      jump = get_last_insn ();\n+      gcc_assert (JUMP_P (jump));\n+      JUMP_LABEL (jump) = label;\n+      LABEL_NUSES (label)++;\n+    }\n+  add_int_reg_note (jump, REG_BR_PROB, prob);\n+\n+  seq = get_insns ();\n+  end_sequence ();\n+\n+  return seq;\n+}\n+\n /* Unroll LOOP for which we are able to count number of iterations in runtime\n    LOOP->LPT_DECISION.TIMES times.  The transformation does this (with some\n    extra care for case n < 0):"}, {"sha": "506b65789f6029cffc4165b7b293f0dd67ebee02", "filename": "gcc/passes.def", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4cfeacb0a152f4cc3afa7473ccad1b8455eae2/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4cfeacb0a152f4cc3afa7473ccad1b8455eae2/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=da4cfeacb0a152f4cc3afa7473ccad1b8455eae2", "patch": "@@ -341,7 +341,6 @@ along with GCC; see the file COPYING3.  If not see\n       PUSH_INSERT_PASSES_WITHIN (pass_loop2)\n \t  NEXT_PASS (pass_rtl_loop_init);\n \t  NEXT_PASS (pass_rtl_move_loop_invariants);\n-\t  NEXT_PASS (pass_rtl_unswitch);\n \t  NEXT_PASS (pass_rtl_unroll_and_peel_loops);\n \t  NEXT_PASS (pass_rtl_doloop);\n \t  NEXT_PASS (pass_rtl_loop_done);"}, {"sha": "3a526a1dd6696c48385aa9b33d3b1960c38de9ce", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4cfeacb0a152f4cc3afa7473ccad1b8455eae2/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4cfeacb0a152f4cc3afa7473ccad1b8455eae2/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=da4cfeacb0a152f4cc3afa7473ccad1b8455eae2", "patch": "@@ -2743,10 +2743,6 @@ extern unsigned int variable_tracking_main (void);\n extern void get_mode_bounds (enum machine_mode, int, enum machine_mode,\n \t\t\t     rtx *, rtx *);\n \n-/* In loop-unswitch.c  */\n-extern rtx reversed_condition (rtx);\n-extern rtx compare_and_jump_seq (rtx, rtx, enum rtx_code, rtx, int, rtx);\n-\n /* In loop-iv.c  */\n extern rtx canon_condition (rtx);\n extern void simplify_using_condition (rtx, rtx *, bitmap);"}, {"sha": "46dc00c38a344ee30d50774e694405cbd4723513", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4cfeacb0a152f4cc3afa7473ccad1b8455eae2/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4cfeacb0a152f4cc3afa7473ccad1b8455eae2/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=da4cfeacb0a152f4cc3afa7473ccad1b8455eae2", "patch": "@@ -509,7 +509,6 @@ extern rtl_opt_pass *make_pass_outof_cfg_layout_mode (gcc::context *ctxt);\n extern rtl_opt_pass *make_pass_loop2 (gcc::context *ctxt);\n extern rtl_opt_pass *make_pass_rtl_loop_init (gcc::context *ctxt);\n extern rtl_opt_pass *make_pass_rtl_move_loop_invariants (gcc::context *ctxt);\n-extern rtl_opt_pass *make_pass_rtl_unswitch (gcc::context *ctxt);\n extern rtl_opt_pass *make_pass_rtl_unroll_and_peel_loops (gcc::context *ctxt);\n extern rtl_opt_pass *make_pass_rtl_doloop (gcc::context *ctxt);\n extern rtl_opt_pass *make_pass_rtl_loop_done (gcc::context *ctxt);"}]}