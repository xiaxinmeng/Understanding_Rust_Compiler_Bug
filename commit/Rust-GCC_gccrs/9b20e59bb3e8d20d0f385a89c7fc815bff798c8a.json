{"sha": "9b20e59bb3e8d20d0f385a89c7fc815bff798c8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIyMGU1OWJiM2U4ZDIwZDBmMzg1YTg5YzdmYzgxNWJmZjc5OGM4YQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T08:21:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T08:21:24Z"}, "message": "[multiple changes]\n\n2011-08-29  Yannick Moy  <moy@adacore.com>\n\n\t* sem_prag.adb (Check_Precondition_Postcondition): In formal\n\tverification mode, analyze pragma expression for correctness, for\n\tpre/post on library-level subprogram, as it is not expanded later.\n\n2011-08-29  Yannick Moy  <moy@adacore.com>\n\n\t* exp_aggr.adb (Expand_Array_Aggregate): Do not expand array aggregates\n\tin formal verification.\n\n2011-08-29  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_util.adb: Minor reformatting.\n\t* freeze.adb, sem_ch13.adb: Fix comment: Bit_Order is an attribute,\n\tthere's no pragma.\n\t* par_sco.ads, par_sco.adb: Update comments.\n\n2011-08-29  Yannick Moy  <moy@adacore.com>\n\n\t* einfo.adb, einfo.ads: Remove flag Is_Postcondition_Proc and\n\tassociated getter/setter.\n\t* sem_ch6.adb: Remove reference to Is_Postcondition_Proc.\n\n2011-08-29  Vincent Celier  <celier@adacore.com>\n\n\t* prj-attr.adb: New Compiler attribute Dependency_Kind and Language_Kind\n\t* prj-conf.adb: Add_Default_GNAT_Naming_Scheme: Add a package Compiler\n\twith declarations for Language_Kind and Dependency_Kind for Ada.\n\t* prj-nmsc.adb (Check_Unit_Name): New name of procedure Check_Ada_Name\n\t(Process_Compiler): Take into account the new attributes Dependency_Kind\n\tand Language_Kind.\n\t(Check_Configuration): Check if language kind is unit based, not if the\n\tlanguage name is Ada.\n\t(Process_Exceptions_Unit_Based): Ditto\n\t(Add_Language): Remove default additions of language and dependency kind\n\t* prj.ads: Minor comment change\n\t* snames.ads-tmpl: New standard names Dependency_Kind and Language_Kind\n\n2011-08-29  Johannes Kanig  <kanig@adacore.com>\n\n\t* debug.adb: Update comments.\n\nFrom-SVN: r178156", "tree": {"sha": "03ee75d01eaae1c7b728fecd0da4e711816de7b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03ee75d01eaae1c7b728fecd0da4e711816de7b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/comments", "author": null, "committer": null, "parents": [{"sha": "6d2a312ec47310f3e8013dba22b037ee85ef59b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d2a312ec47310f3e8013dba22b037ee85ef59b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d2a312ec47310f3e8013dba22b037ee85ef59b8"}], "stats": {"total": 246, "additions": 165, "deletions": 81}, "files": [{"sha": "6261f1ac7edab184775b3f495c1d92891baf6469", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9b20e59bb3e8d20d0f385a89c7fc815bff798c8a", "patch": "@@ -1,3 +1,46 @@\n+2011-08-29  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_prag.adb (Check_Precondition_Postcondition): In formal\n+\tverification mode, analyze pragma expression for correctness, for\n+\tpre/post on library-level subprogram, as it is not expanded later.\n+\n+2011-08-29  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_aggr.adb (Expand_Array_Aggregate): Do not expand array aggregates\n+\tin formal verification.\n+\n+2011-08-29  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_util.adb: Minor reformatting.\n+\t* freeze.adb, sem_ch13.adb: Fix comment: Bit_Order is an attribute,\n+\tthere's no pragma.\n+\t* par_sco.ads, par_sco.adb: Update comments.\n+\n+2011-08-29  Yannick Moy  <moy@adacore.com>\n+\n+\t* einfo.adb, einfo.ads: Remove flag Is_Postcondition_Proc and\n+\tassociated getter/setter.\n+\t* sem_ch6.adb: Remove reference to Is_Postcondition_Proc.\n+\n+2011-08-29  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj-attr.adb: New Compiler attribute Dependency_Kind and Language_Kind\n+\t* prj-conf.adb: Add_Default_GNAT_Naming_Scheme: Add a package Compiler\n+\twith declarations for Language_Kind and Dependency_Kind for Ada.\n+\t* prj-nmsc.adb (Check_Unit_Name): New name of procedure Check_Ada_Name\n+\t(Process_Compiler): Take into account the new attributes Dependency_Kind\n+\tand Language_Kind.\n+\t(Check_Configuration): Check if language kind is unit based, not if the\n+\tlanguage name is Ada.\n+\t(Process_Exceptions_Unit_Based): Ditto\n+\t(Add_Language): Remove default additions of language and dependency kind\n+\t* prj.ads: Minor comment change\n+\t* snames.ads-tmpl: New standard names Dependency_Kind and Language_Kind\n+\n+2011-08-29  Johannes Kanig  <kanig@adacore.com>\n+\n+\t* debug.adb: Update comments.\n+\n 2011-08-24  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc-interface/Make-lang.in (CFLAGS-ada/tracebak.o)"}, {"sha": "da34d8a44378d0c3e5db193f5f9e6bed8c7c57d4", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=9b20e59bb3e8d20d0f385a89c7fc815bff798c8a", "patch": "@@ -125,7 +125,7 @@ package body Debug is\n    --  d.E\n    --  d.F  ALFA mode\n    --  d.G  Precondition only mode for gnat2why\n-   --  d.H\n+   --  d.H  Standard package only mode for gnat2why\n    --  d.I  SCIL generation mode\n    --  d.J  Disable parallel SCIL generation mode\n    --  d.K\n@@ -588,6 +588,10 @@ package body Debug is\n    --       only generate Why code that checks for the well-guardedness of\n    --       preconditions.\n \n+   --  d.H  Standard package only mode for gnat2why. In this mode, gnat2why\n+   --       will only generate Why code for package Standard. Any given input\n+   --       file will be ignored.\n+\n    --  d.I  Generate SCIL mode. Generate intermediate code for the sake of\n    --       of static analysis tools, and ensure additional tree consistency\n    --       between different compilations of specs."}, {"sha": "ffe43497df17cc1ebf41986ccbf7ae3ab7a607c6", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=9b20e59bb3e8d20d0f385a89c7fc815bff798c8a", "patch": "@@ -519,10 +519,10 @@ package body Einfo is\n    --    Is_Safe_To_Reevaluate           Flag249\n    --    Has_Predicates                  Flag250\n \n-   --    (Has_Implicit_Dereference)      Flag251\n+   --    Has_Implicit_Dereference        Flag251\n    --    Is_Processed_Transient          Flag252\n-   --    Is_Postcondition_Proc           Flag253\n \n+   --    (unused)                        Flag253\n    --    (unused)                        Flag254\n \n    -----------------------\n@@ -1987,12 +1987,6 @@ package body Einfo is\n       return Flag138 (Id);\n    end Is_Packed_Array_Type;\n \n-   function Is_Postcondition_Proc (Id : E) return B is\n-   begin\n-      pragma Assert (Ekind (Id) = E_Procedure);\n-      return Flag253 (Id);\n-   end Is_Postcondition_Proc;\n-\n    function Is_Potentially_Use_Visible (Id : E) return B is\n    begin\n       pragma Assert (Nkind (Id) in N_Entity);\n@@ -4511,12 +4505,6 @@ package body Einfo is\n       Set_Flag138 (Id, V);\n    end Set_Is_Packed_Array_Type;\n \n-   procedure Set_Is_Postcondition_Proc (Id : E; V : B := True) is\n-   begin\n-      pragma Assert (Ekind (Id) = E_Procedure);\n-      Set_Flag253 (Id, V);\n-   end Set_Is_Postcondition_Proc;\n-\n    procedure Set_Is_Potentially_Use_Visible (Id : E; V : B := True) is\n    begin\n       pragma Assert (Nkind (Id) in N_Entity);\n@@ -7558,7 +7546,6 @@ package body Einfo is\n       W (\"Is_Package_Body_Entity\",          Flag160 (Id));\n       W (\"Is_Packed\",                       Flag51  (Id));\n       W (\"Is_Packed_Array_Type\",            Flag138 (Id));\n-      W (\"Is_Postcondition_Proc\",           Flag253 (Id));\n       W (\"Is_Potentially_Use_Visible\",      Flag9   (Id));\n       W (\"Is_Preelaborated\",                Flag59  (Id));\n       W (\"Is_Primitive\",                    Flag218 (Id));"}, {"sha": "b1b1b90ddaaf52e8d1d3afcd3670fcdda01e44d8", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=9b20e59bb3e8d20d0f385a89c7fc815bff798c8a", "patch": "@@ -2566,10 +2566,6 @@ package Einfo is\n --       an entity, then the Original_Array_Type field of this entity points\n --       to the original array type for which this is the packed array type.\n \n---    Is_Postcondition_Proc (Flag253)\n---       Present in procedures. Set if entity is a procedure generated by the\n---       compiler for a postcondition.\n-\n --    Is_Potentially_Use_Visible (Flag9)\n --       Present in all entities. Set if entity is potentially use visible,\n --       i.e. it is defined in a package that appears in a currently active\n@@ -5522,7 +5518,6 @@ package Einfo is\n    --    Is_Intrinsic_Subprogram             (Flag64)\n    --    Is_Machine_Code_Subprogram          (Flag137)  (non-generic case only)\n    --    Is_Null_Init_Proc                   (Flag178)\n-   --    Is_Postcondition_Proc               (Flag253)  (non-generic case only)\n    --    Is_Primitive                        (Flag218)\n    --    Is_Primitive_Wrapper                (Flag195)  (non-generic case only)\n    --    Is_Private_Descendant               (Flag53)\n@@ -6218,7 +6213,6 @@ package Einfo is\n    function Is_Package_Body_Entity              (Id : E) return B;\n    function Is_Packed                           (Id : E) return B;\n    function Is_Packed_Array_Type                (Id : E) return B;\n-   function Is_Postcondition_Proc               (Id : E) return B;\n    function Is_Potentially_Use_Visible          (Id : E) return B;\n    function Is_Preelaborated                    (Id : E) return B;\n    function Is_Primitive                        (Id : E) return B;\n@@ -6812,7 +6806,6 @@ package Einfo is\n    procedure Set_Is_Package_Body_Entity          (Id : E; V : B := True);\n    procedure Set_Is_Packed                       (Id : E; V : B := True);\n    procedure Set_Is_Packed_Array_Type            (Id : E; V : B := True);\n-   procedure Set_Is_Postcondition_Proc           (Id : E; V : B := True);\n    procedure Set_Is_Potentially_Use_Visible      (Id : E; V : B := True);\n    procedure Set_Is_Preelaborated                (Id : E; V : B := True);\n    procedure Set_Is_Primitive                    (Id : E; V : B := True);\n@@ -7541,7 +7534,6 @@ package Einfo is\n    pragma Inline (Is_Overloadable);\n    pragma Inline (Is_Packed);\n    pragma Inline (Is_Packed_Array_Type);\n-   pragma Inline (Is_Postcondition_Proc);\n    pragma Inline (Is_Potentially_Use_Visible);\n    pragma Inline (Is_Preelaborated);\n    pragma Inline (Is_Primitive);\n@@ -7953,7 +7945,6 @@ package Einfo is\n    pragma Inline (Set_Is_Package_Body_Entity);\n    pragma Inline (Set_Is_Packed);\n    pragma Inline (Set_Is_Packed_Array_Type);\n-   pragma Inline (Set_Is_Postcondition_Proc);\n    pragma Inline (Set_Is_Potentially_Use_Visible);\n    pragma Inline (Set_Is_Preelaborated);\n    pragma Inline (Set_Is_Primitive);"}, {"sha": "2240b2f6b848a111ac63a97da73b4e279f4b6965", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=9b20e59bb3e8d20d0f385a89c7fc815bff798c8a", "patch": "@@ -4664,6 +4664,12 @@ package body Exp_Aggr is\n          Check_Same_Aggr_Bounds (N, 1);\n       end if;\n \n+      --  In formal verification mode, leave the aggregate non-expanded\n+\n+      if ALFA_Mode then\n+         return;\n+      end if;\n+\n       --  STEP 2\n \n       --  Here we test for is packed array aggregate that we can handle at"}, {"sha": "099f9eba305c8b640ef33b630e65fa9e99a3a71b", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=9b20e59bb3e8d20d0f385a89c7fc815bff798c8a", "patch": "@@ -2029,7 +2029,8 @@ package body Freeze is\n             Next_Entity (Comp);\n          end loop;\n \n-         --  Deal with pragma Bit_Order setting non-standard bit order\n+         --  Deal with Bit_Order attribute definition specifying a non-default\n+         --  bit order.\n \n          if Reverse_Bit_Order (Rec) and then Base_Type (Rec) = Rec then\n             if not Placed_Component then"}, {"sha": "d3e604685fca60c7e25b0d5106d22e29e7ea0964", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=9b20e59bb3e8d20d0f385a89c7fc815bff798c8a", "patch": "@@ -1082,7 +1082,7 @@ package body Par_SCO is\n                Pragma_Sloc : Source_Ptr := No_Location;\n             begin\n                --  For the case of a statement SCO for a pragma controlled by\n-               --  Set_SCO_Pragma_Enable, set Pragma_Sloc so that the SCO (and\n+               --  Set_SCO_Pragma_Enabled, set Pragma_Sloc so that the SCO (and\n                --  those of any nested decision) is emitted only if the pragma\n                --  is enabled.\n "}, {"sha": "450d76938cb201f341e36b0b86346539433fab6d", "filename": "gcc/ada/par_sco.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2Fpar_sco.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2Fpar_sco.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.ads?ref=9b20e59bb3e8d20d0f385a89c7fc815bff798c8a", "patch": "@@ -50,9 +50,9 @@ package Par_SCO is\n    --  original tree associated with Cond.\n \n    procedure Set_SCO_Pragma_Enabled (Loc : Source_Ptr);\n-   --  This procedure is called from Sem_Prag when a pragma is disabled (i.e.\n-   --  when the Pragma_Enabled flag is unset). Loc is the Sloc of the N_Pragma\n-   --  node. This is used to disable the corresponding SCO table entry. Note\n+   --  This procedure is called from Sem_Prag when a pragma is enabled (i.e.\n+   --  when the Pragma_Enabled flag is set). Loc is the Sloc of the N_Pragma\n+   --  node. This is used to enable the corresponding statement SCO entry. Note\n    --  that we use the Sloc as the key here, since in the generic case, the\n    --  analysis is on a copy of the node, which is different from the node\n    --  seen by Par_SCO in the parse tree (but the Sloc values are the same)."}, {"sha": "0f8608b359ce2daef3412eb11d40f18c26477612", "filename": "gcc/ada/prj-attr.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2Fprj-attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2Fprj-attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-attr.adb?ref=9b20e59bb3e8d20d0f385a89c7fc815bff798c8a", "patch": "@@ -183,6 +183,8 @@ package body Prj.Attr is\n    --  Configuration - Compiling\n \n    \"Sadriver#\" &\n+   \"Salanguage_kind#\" &\n+   \"Sadependency_kind#\" &\n    \"Larequired_switches#\" &\n    \"Laleading_required_switches#\" &\n    \"Latrailing_required_switches#\" &"}, {"sha": "a1d9fe96b05277bab28934b46f7b4ae14c20bd3f", "filename": "gcc/ada/prj-conf.adb", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2Fprj-conf.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2Fprj-conf.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-conf.adb?ref=9b20e59bb3e8d20d0f385a89c7fc815bff798c8a", "patch": "@@ -382,8 +382,9 @@ package body Prj.Conf is\n \n       --  Local variables\n \n-      Name   : Name_Id;\n-      Naming : Project_Node_Id;\n+      Name     : Name_Id;\n+      Naming   : Project_Node_Id;\n+      Compiler : Project_Node_Id;\n \n    --  Start of processing for Add_Default_GNAT_Naming_Scheme\n \n@@ -433,6 +434,12 @@ package body Prj.Conf is\n \n          Create_Attribute (Name_Default_Language, \"ada\");\n \n+         Compiler := Create_Package (Project_Tree, Config_File, \"compiler\");\n+         Create_Attribute\n+           (Name_Language_Kind, \"unit_based\", \"ada\", Pkg => Compiler);\n+         Create_Attribute\n+           (Name_Dependency_Kind, \"ALI_File\", \"ada\", Pkg => Compiler);\n+\n          Naming := Create_Package (Project_Tree, Config_File, \"naming\");\n          Create_Attribute (Name_Spec_Suffix, \".ads\", \"ada\",     Pkg => Naming);\n          Create_Attribute (Name_Separate_Suffix, \".adb\", \"ada\", Pkg => Naming);"}, {"sha": "7f36ded27df60de6d165fc22cb19dc02a8fb4821", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 70, "deletions": 39, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=9b20e59bb3e8d20d0f385a89c7fc815bff798c8a", "patch": "@@ -281,8 +281,8 @@ package body Prj.Nmsc is\n    --  Copy Str into Name_Buffer, replacing Pattern with Replacement. Str is\n    --  converted to lower-case at the same time.\n \n-   procedure Check_Ada_Name (Name : String; Unit : out Name_Id);\n-   --  Check that a name is a valid Ada unit name\n+   procedure Check_Unit_Name (Name : String; Unit : out Name_Id);\n+   --  Check that a name is a valid unit name\n \n    procedure Check_Package_Naming\n      (Project : Project_Id;\n@@ -1112,11 +1112,11 @@ package body Prj.Nmsc is\n       Debug_Decrease_Indent (\"done check\");\n    end Check;\n \n-   --------------------\n-   -- Check_Ada_Name --\n-   --------------------\n+   ---------------------\n+   -- Check_Unit_Name --\n+   ---------------------\n \n-   procedure Check_Ada_Name (Name : String; Unit : out Name_Id) is\n+   procedure Check_Unit_Name (Name : String; Unit : out Name_Id) is\n       The_Name        : String := Name;\n       Real_Name       : Name_Id;\n       Need_Letter     : Boolean := True;\n@@ -1164,7 +1164,7 @@ package body Prj.Nmsc is\n          end if;\n       end Is_Reserved;\n \n-   --  Start of processing for Check_Ada_Name\n+   --  Start of processing for Check_Unit_Name\n \n    begin\n       To_Lower (The_Name);\n@@ -1293,7 +1293,7 @@ package body Prj.Nmsc is\n \n          Unit := No_Name;\n       end if;\n-   end Check_Ada_Name;\n+   end Check_Unit_Name;\n \n    -------------------------\n    -- Check_Configuration --\n@@ -1492,6 +1492,26 @@ package body Prj.Nmsc is\n \n                      if Lang_Index /= No_Language_Index then\n                         case Current_Array.Name is\n+                        when Name_Dependency_Kind =>\n+\n+                           --  Attribute Dependency_Kind (<language>)\n+\n+                           Get_Name_String (Element.Value.Value);\n+\n+                           begin\n+                              Lang_Index.Config.Dependency_Kind :=\n+                                Dependency_File_Kind'Value\n+                                  (Name_Buffer (1 .. Name_Len));\n+\n+                           exception\n+                              when Constraint_Error =>\n+                                 Error_Msg\n+                                   (Data.Flags,\n+                                    \"illegal value for Dependency_Kind\",\n+                                    Element.Value.Location,\n+                                    Project);\n+                           end;\n+\n                         when Name_Dependency_Switches =>\n \n                            --  Attribute Dependency_Switches (<language>)\n@@ -1526,6 +1546,25 @@ package body Prj.Nmsc is\n                                    In_Tree   => Data.Tree);\n                            end if;\n \n+                        when Name_Language_Kind =>\n+                           --  Attribute Language_Kind (<language>)\n+\n+                           Get_Name_String (Element.Value.Value);\n+\n+                           begin\n+                              Lang_Index.Config.Kind :=\n+                                Language_Kind'Value\n+                                  (Name_Buffer (1 .. Name_Len));\n+\n+                           exception\n+                              when Constraint_Error =>\n+                                 Error_Msg\n+                                   (Data.Flags,\n+                                    \"illegal value for Language_Kind\",\n+                                    Element.Value.Location,\n+                                    Project);\n+                           end;\n+\n                         when Name_Include_Switches =>\n \n                            --  Attribute Include_Switches (<language>)\n@@ -1554,7 +1593,7 @@ package body Prj.Nmsc is\n                            --  Attribute Include_Path_File (<language>)\n \n                            Lang_Index.Config.Include_Path_File :=\n-                               Element.Value.Value;\n+                             Element.Value.Value;\n \n                         when Name_Driver =>\n \n@@ -1566,15 +1605,15 @@ package body Prj.Nmsc is\n                         when Name_Required_Switches |\n                              Name_Leading_Required_Switches =>\n                            Put (Into_List =>\n-                                  Lang_Index.Config.\n-                                    Compiler_Leading_Required_Switches,\n+                                Lang_Index.Config.\n+                                  Compiler_Leading_Required_Switches,\n                                 From_List => Element.Value.Values,\n                                 In_Tree   => Data.Tree);\n \n                         when Name_Trailing_Required_Switches =>\n                            Put (Into_List =>\n-                                  Lang_Index.Config.\n-                                    Compiler_Trailing_Required_Switches,\n+                                Lang_Index.Config.\n+                                  Compiler_Trailing_Required_Switches,\n                                 From_List => Element.Value.Values,\n                                 In_Tree   => Data.Tree);\n \n@@ -2575,7 +2614,7 @@ package body Prj.Nmsc is\n \n       Lang_Index := Project.Languages;\n       while Lang_Index /= No_Language_Index loop\n-         if Lang_Index.Name = Name_Ada then\n+         if Lang_Index.Config.Kind = Unit_Based then\n             Lang_Index.Config.Naming_Data.Casing := Casing;\n             Lang_Index.Config.Naming_Data.Dot_Replacement := Dot_Replacement;\n \n@@ -2627,7 +2666,7 @@ package body Prj.Nmsc is\n                Prev_Index.Next := Lang_Index.Next;\n             end if;\n \n-         elsif Lang_Index.Name = Name_Ada then\n+         elsif Lang_Index.Config.Kind = Unit_Based then\n             Prev_Index := Lang_Index;\n \n             --  For unit based languages, Dot_Replacement, Spec_Suffix and\n@@ -2636,21 +2675,24 @@ package body Prj.Nmsc is\n             if Lang_Index.Config.Naming_Data.Dot_Replacement = No_File then\n                Error_Msg\n                  (Data.Flags,\n-                  \"Dot_Replacement not specified for Ada\",\n+                  \"Dot_Replacement not specified for \" &\n+                  Get_Name_String (Lang_Index.Name),\n                   No_Location, Project);\n             end if;\n \n             if Lang_Index.Config.Naming_Data.Spec_Suffix = No_File then\n                Error_Msg\n                  (Data.Flags,\n-                  \"Spec_Suffix not specified for Ada\",\n+                  \"Spec_Suffix not specified for \" &\n+                  Get_Name_String (Lang_Index.Name),\n                   No_Location, Project);\n             end if;\n \n             if Lang_Index.Config.Naming_Data.Body_Suffix = No_File then\n                Error_Msg\n                  (Data.Flags,\n-                  \"Body_Suffix not specified for Ada\",\n+                  \"Body_Suffix not specified for \" &\n+                  Get_Name_String (Lang_Index.Name),\n                   No_Location, Project);\n             end if;\n \n@@ -3189,7 +3231,6 @@ package body Prj.Nmsc is\n         (Lang_Id : Language_Ptr;\n          Kind    : Source_Kind)\n       is\n-         Lang       : constant Name_Id := Lang_Id.Name;\n          Exceptions : Array_Element_Id;\n          Element    : Array_Element;\n          Unit       : Name_Id;\n@@ -3236,22 +3277,19 @@ package body Prj.Nmsc is\n \n             Get_Name_String (Element.Index);\n             To_Lower (Name_Buffer (1 .. Name_Len));\n-            Unit  := Name_Find;\n             Index := Element.Value.Index;\n \n-            --  For Ada, check if it is a valid unit name\n+            --  Check if it is a valid unit name\n \n-            if Lang = Name_Ada then\n-               Get_Name_String (Element.Index);\n-               Check_Ada_Name (Name_Buffer (1 .. Name_Len), Unit);\n+            Get_Name_String (Element.Index);\n+            Check_Unit_Name (Name_Buffer (1 .. Name_Len), Unit);\n \n-               if Unit = No_Name then\n-                  Err_Vars.Error_Msg_Name_1 := Element.Index;\n-                  Error_Msg\n-                    (Data.Flags,\n-                     \"%% is not a valid unit name.\",\n-                     Element.Value.Location, Project);\n-               end if;\n+            if Unit = No_Name then\n+               Err_Vars.Error_Msg_Name_1 := Element.Index;\n+               Error_Msg\n+                 (Data.Flags,\n+                  \"%% is not a valid unit name.\",\n+                  Element.Value.Location, Project);\n             end if;\n \n             if Unit /= No_Name then\n@@ -4344,13 +4382,6 @@ package body Prj.Nmsc is\n          Project.Languages := Lang;\n          Lang.Name         := Name;\n          Lang.Display_Name := Display_Name;\n-\n-         if Name = Name_Ada then\n-            Lang.Config.Kind            := Unit_Based;\n-            Lang.Config.Dependency_Kind := ALI_File;\n-         else\n-            Lang.Config.Kind := File_Based;\n-         end if;\n       end Add_Language;\n \n    --  Start of processing for Check_Programming_Languages\n@@ -5690,7 +5721,7 @@ package body Prj.Nmsc is\n       --  Name_Buffer contains the name of the unit in lower-cases. Check\n       --  that this is a valid unit name\n \n-      Check_Ada_Name (Name_Buffer (1 .. Name_Len), Unit);\n+      Check_Unit_Name (Name_Buffer (1 .. Name_Len), Unit);\n \n       --  If there is a naming exception for the same unit, the file is not\n       --  a source for the unit."}, {"sha": "b075235deb284d5b08243129952b167a249a1ef8", "filename": "gcc/ada/prj.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2Fprj.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2Fprj.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.ads?ref=9b20e59bb3e8d20d0f385a89c7fc815bff798c8a", "patch": "@@ -410,8 +410,8 @@ package Prj is\n \n    type Language_Config is record\n       Kind : Language_Kind := File_Based;\n-      --  Kind of language. All languages are file based, except Ada which is\n-      --  unit based.\n+      --  Kind of language. Most languages are file based. A few, such as Ada,\n+      --  are unit based.\n \n       Naming_Data : Lang_Naming_Data;\n       --  The naming data for the languages (prefixes, etc.)"}, {"sha": "3fa3a737306fff19356a16980cda84a2fe380b5d", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=9b20e59bb3e8d20d0f385a89c7fc815bff798c8a", "patch": "@@ -235,8 +235,8 @@ package body Sem_Ch13 is\n       --  Processing depends on version of Ada\n \n       --  For Ada 95, we just renumber bits within a storage unit. We do the\n-      --  same for Ada 83 mode, since we recognize pragma Bit_Order in Ada 83,\n-      --  and are free to add this extension.\n+      --  same for Ada 83 mode, since we recognize attribute Bit_Order in\n+      --  Ada 83, and are free to add this extension.\n \n       if Ada_Version < Ada_2005 then\n          Comp := First_Component_Or_Discriminant (R);"}, {"sha": "55566fb5e27be1cfda79bddd13b83150b1bfdbf5", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=9b20e59bb3e8d20d0f385a89c7fc815bff798c8a", "patch": "@@ -9557,7 +9557,6 @@ package body Sem_Ch6 is\n                     Statements => Plist)));\n \n             Set_Ekind (Post_Proc, E_Procedure);\n-            Set_Is_Postcondition_Proc (Post_Proc);\n \n             --  If this is a procedure, set the Postcondition_Proc attribute on\n             --  the proper defining entity for the subprogram."}, {"sha": "f866cea688c7dbece5eb9f7dfc021bbec53d126e", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=9b20e59bb3e8d20d0f385a89c7fc815bff798c8a", "patch": "@@ -1884,6 +1884,15 @@ package body Sem_Prag is\n          --  See if it is in the pragmas after a library level subprogram\n \n          elsif Nkind (Parent (N)) = N_Compilation_Unit_Aux then\n+\n+            --  In formal verification mode, analyze pragma expression for\n+            --  correctness, as it is not expanded later.\n+\n+            if ALFA_Mode then\n+               Analyze_PPC_In_Decl_Part\n+                 (N, Defining_Entity (Unit (Parent (Parent (N)))));\n+            end if;\n+\n             Chain_PPC (Unit (Parent (Parent (N))));\n             return;\n          end if;"}, {"sha": "6aaa3dceba62614866e24afb04dc784c543858c3", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=9b20e59bb3e8d20d0f385a89c7fc815bff798c8a", "patch": "@@ -1360,7 +1360,7 @@ package body Sem_Util is\n          return;\n       end if;\n \n-      --  Ada 2012 AI04-0144-2: Dangerous order dependence. Actuals in nested\n+      --  Ada 2012 AI05-0144-2: Dangerous order dependence. Actuals in nested\n       --  calls within a construct have been collected. If one of them is\n       --  writable and overlaps with another one, evaluation of the enclosing\n       --  construct is nondeterministic. This is illegal in Ada 2012, but is\n@@ -11677,10 +11677,10 @@ package body Sem_Util is\n    -- Set_Current_Entity --\n    ------------------------\n \n-   --  The given entity is to be set as the currently visible definition\n-   --  of its associated name (i.e. the Node_Id associated with its name).\n-   --  All we have to do is to get the name from the identifier, and\n-   --  then set the associated Node_Id to point to the given entity.\n+   --  The given entity is to be set as the currently visible definition of its\n+   --  associated name (i.e. the Node_Id associated with its name). All we have\n+   --  to do is to get the name from the identifier, and then set the\n+   --  associated Node_Id to point to the given entity.\n \n    procedure Set_Current_Entity (E : Entity_Id) is\n    begin\n@@ -12378,6 +12378,8 @@ package body Sem_Util is\n          end if;\n       end Get_Scoped_Name;\n \n+   --  Start of processing for Unique_Name\n+\n    begin\n       if E = Standard_Standard then\n          return Get_Name_String (Name_Standard);"}, {"sha": "69e53dbc982d20e60ad13e5082ed73e4fb0f3155", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b20e59bb3e8d20d0f385a89c7fc815bff798c8a/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=9b20e59bb3e8d20d0f385a89c7fc815bff798c8a", "patch": "@@ -1093,6 +1093,7 @@ package Snames is\n    Name_Default_Language                 : constant Name_Id := N + $;\n    Name_Default_Switches                 : constant Name_Id := N + $;\n    Name_Dependency_Driver                : constant Name_Id := N + $;\n+   Name_Dependency_Kind                  : constant Name_Id := N + $;\n    Name_Dependency_Switches              : constant Name_Id := N + $;\n    Name_Driver                           : constant Name_Id := N + $;\n    Name_Excluded_Source_Dirs             : constant Name_Id := N + $;\n@@ -1121,6 +1122,7 @@ package Snames is\n    Name_Include_Path_File                : constant Name_Id := N + $;\n    Name_Inherit_Source_Path              : constant Name_Id := N + $;\n    Name_Languages                        : constant Name_Id := N + $;\n+   Name_Language_Kind                    : constant Name_Id := N + $;\n    Name_Leading_Library_Options          : constant Name_Id := N + $;\n    Name_Leading_Required_Switches        : constant Name_Id := N + $;\n    Name_Leading_Switches                 : constant Name_Id := N + $;"}]}