{"sha": "5e681acd3587285cc3c8c6d603e4ce93cf6dacf2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU2ODFhY2QzNTg3Mjg1Y2MzYzhjNmQ2MDNlNGNlOTNjZjZkYWNmMg==", "commit": {"author": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2020-04-30T15:29:32Z"}, "committer": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2020-05-04T21:10:00Z"}, "message": "rs6000: AIX long double builtins for 64 bit long double.\n\nWhen long doubles are 64 bit, the AIX C library overrides the definitions\nbut GCC builtins point to 128 bit names.  This patch overrides the\nbuiltins for fmodl, frexpl, ldexpl and modfl to refer to the 64 bit symbols.\n\n2020-05-04  Clement Chigot  <clement.chigot@atos.net>\n\t    David Edelsohn  <dje.gcc@gmail.com>\n\n\t* config/rs6000/rs6000-call.c (rs6000_init_builtins): Override explicit\n\tfor fmodl, frexpl, ldexpl and modfl builtins.", "tree": {"sha": "e51dcf55002fba9841143eae20873f46b7aaab45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e51dcf55002fba9841143eae20873f46b7aaab45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e681acd3587285cc3c8c6d603e4ce93cf6dacf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e681acd3587285cc3c8c6d603e4ce93cf6dacf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e681acd3587285cc3c8c6d603e4ce93cf6dacf2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e681acd3587285cc3c8c6d603e4ce93cf6dacf2/comments", "author": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3af3bec2e4d344bd54a134d8b2263f44d788c3d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3af3bec2e4d344bd54a134d8b2263f44d788c3d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3af3bec2e4d344bd54a134d8b2263f44d788c3d8"}], "stats": {"total": 32, "additions": 28, "deletions": 4}, "files": [{"sha": "b534c55760a04aa867a4028b3016df05ad624b47", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e681acd3587285cc3c8c6d603e4ce93cf6dacf2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e681acd3587285cc3c8c6d603e4ce93cf6dacf2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e681acd3587285cc3c8c6d603e4ce93cf6dacf2", "patch": "@@ -1,3 +1,9 @@\n+2020-05-04  Clement Chigot  <clement.chigot@atos.net>\n+\t    David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* config/rs6000/rs6000-call.c (rs6000_init_builtins): Override explicit\n+\tfor fmodl, frexpl, ldexpl and modfl builtins.\n+\n 2020-05-04  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR middle-end/94941"}, {"sha": "68164b912f066c0b4e16f92d599bb37600cdfa9e", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e681acd3587285cc3c8c6d603e4ce93cf6dacf2/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e681acd3587285cc3c8c6d603e4ce93cf6dacf2/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=5e681acd3587285cc3c8c6d603e4ce93cf6dacf2", "patch": "@@ -12070,10 +12070,28 @@ rs6000_init_builtins (void)\n   def_builtin (\"__builtin_cpu_is\", ftype, RS6000_BUILTIN_CPU_IS);\n   def_builtin (\"__builtin_cpu_supports\", ftype, RS6000_BUILTIN_CPU_SUPPORTS);\n \n-  /* AIX libm provides clog as __clog.  */\n-  if (TARGET_XCOFF &&\n-      (tdecl = builtin_decl_explicit (BUILT_IN_CLOG)) != NULL_TREE)\n-    set_user_assembler_name (tdecl, \"__clog\");\n+  if (TARGET_XCOFF)\n+    {\n+      /* AIX libm provides clog as __clog.  */\n+      if ((tdecl = builtin_decl_explicit (BUILT_IN_CLOG)) != NULL_TREE)\n+\tset_user_assembler_name (tdecl, \"__clog\");\n+\n+      /* When long double is 64 bit, some long double builtins of libc\n+\t functions (like __builtin_frexpl) must call the double version\n+\t (frexp) not the long double version (frexpl) that expects a 128 bit\n+\t argument.  */\n+      if (! TARGET_LONG_DOUBLE_128)\n+\t{\n+\t  if ((tdecl = builtin_decl_explicit (BUILT_IN_FMODL)) != NULL_TREE)\n+\t    set_user_assembler_name (tdecl, \"fmod\");\n+\t  if ((tdecl = builtin_decl_explicit (BUILT_IN_FREXPL)) != NULL_TREE)\n+\t    set_user_assembler_name (tdecl, \"frexp\");\n+\t  if ((tdecl = builtin_decl_explicit (BUILT_IN_LDEXPL)) != NULL_TREE)\n+\t    set_user_assembler_name (tdecl, \"ldexp\");\n+\t  if ((tdecl = builtin_decl_explicit (BUILT_IN_MODFL)) != NULL_TREE)\n+\t    set_user_assembler_name (tdecl, \"modf\");\n+\t}\n+    }\n \n #ifdef SUBTARGET_INIT_BUILTINS\n   SUBTARGET_INIT_BUILTINS;"}]}