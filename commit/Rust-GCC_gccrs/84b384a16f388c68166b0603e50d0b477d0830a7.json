{"sha": "84b384a16f388c68166b0603e50d0b477d0830a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRiMzg0YTE2ZjM4OGM2ODE2NmIwNjAzZTUwZDBiNDc3ZDA4MzBhNw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-05-11T17:19:46Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-05-11T17:19:46Z"}, "message": "libstdc++: Remove extern \"C\" from Ryu sources\n\nfloating_to_chars.cc includes the Ryu sources into an anonymous\nnamespace as a convenient way to give all its symbols internal linkage.\nBut an entity declared extern \"C\" always has external linkage even\nfrom within an anonymous namespace, so this trick doesn't work in the\npresence of extern \"C\", and it causes the Ryu function generic_to_chars\nto be visible from libstdc++.a.\n\nThis patch removes the only use of extern \"C\" from our local copy of\nRyu along with some declarations for never-defined functions that GCC\nnow warns about.\n\nlibstdc++-v3/ChangeLog:\n\n\t* src/c++17/ryu/LOCAL_PATCHES: Update.\n\t* src/c++17/ryu/ryu_generic_128.h: Remove extern \"C\".\n\tRemove declarations for never-defined functions.\n\t* testsuite/20_util/to_chars/4.cc: New test.", "tree": {"sha": "8ba180e228867e99c5d61522c6bdd38364fb9806", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ba180e228867e99c5d61522c6bdd38364fb9806"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84b384a16f388c68166b0603e50d0b477d0830a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84b384a16f388c68166b0603e50d0b477d0830a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84b384a16f388c68166b0603e50d0b477d0830a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84b384a16f388c68166b0603e50d0b477d0830a7/comments", "author": null, "committer": null, "parents": [{"sha": "37407a2ae701c0a93377106a2938ab5474062fc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37407a2ae701c0a93377106a2938ab5474062fc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37407a2ae701c0a93377106a2938ab5474062fc3"}], "stats": {"total": 58, "additions": 40, "deletions": 18}, "files": [{"sha": "011626f07e27841eca23f0622771b65391b46b68", "filename": "libstdc++-v3/src/c++17/ryu/LOCAL_PATCHES", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b384a16f388c68166b0603e50d0b477d0830a7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fryu%2FLOCAL_PATCHES", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b384a16f388c68166b0603e50d0b477d0830a7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fryu%2FLOCAL_PATCHES", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fryu%2FLOCAL_PATCHES?ref=84b384a16f388c68166b0603e50d0b477d0830a7", "patch": "@@ -1,2 +1,3 @@\n r11-6248\n r11-7636\n+r12-725"}, {"sha": "6d988ab01eb2b51a168a5a88e52d92d51fd71ae5", "filename": "libstdc++-v3/src/c++17/ryu/ryu_generic_128.h", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b384a16f388c68166b0603e50d0b477d0830a7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fryu%2Fryu_generic_128.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b384a16f388c68166b0603e50d0b477d0830a7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fryu%2Fryu_generic_128.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fryu%2Fryu_generic_128.h?ref=84b384a16f388c68166b0603e50d0b477d0830a7", "patch": "@@ -18,9 +18,9 @@\n #define RYU_GENERIC_128_H\n \n \n-#ifdef __cplusplus\n-extern \"C\" {\n-#endif\n+// NOTE: These symbols are declared extern \"C\" upstream, but we don't want that\n+// because it'd override the internal linkage of the anonymous namespace into\n+// which this header is included.\n \n // This is a generic 128-bit implementation of float to shortest conversion\n // using the Ryu algorithm. It can handle any IEEE-compatible floating-point\n@@ -42,18 +42,6 @@ struct floating_decimal_128 {\n   bool sign;\n };\n \n-struct floating_decimal_128 float_to_fd128(float f);\n-struct floating_decimal_128 double_to_fd128(double d);\n-\n-// According to wikipedia (https://en.wikipedia.org/wiki/Long_double), this likely only works on\n-// x86 with specific compilers (clang?). May need an ifdef.\n-struct floating_decimal_128 long_double_to_fd128(long double d);\n-\n-// Converts the given binary floating point number to the shortest decimal floating point number\n-// that still accurately represents it.\n-struct floating_decimal_128 generic_binary_to_decimal(\n-    const uint128_t bits, const uint32_t mantissaBits, const uint32_t exponentBits, const bool explicitLeadingBit);\n-\n // Converts the given decimal floating point number to a string, writing to result, and returning\n // the number characters written. Does not terminate the buffer with a 0. In the worst case, this\n // function can write up to 53 characters.\n@@ -63,8 +51,5 @@ struct floating_decimal_128 generic_binary_to_decimal(\n // = 1 + 39 + 1 + 1 + 1 + 10 = 53\n int generic_to_chars(const struct floating_decimal_128 v, char* const result);\n \n-#ifdef __cplusplus\n-}\n-#endif\n \n #endif // RYU_GENERIC_128_H"}, {"sha": "00781ee637938e9498d7045bb7c71cbe4fbec3d5", "filename": "libstdc++-v3/testsuite/20_util/to_chars/4.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b384a16f388c68166b0603e50d0b477d0830a7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b384a16f388c68166b0603e50d0b477d0830a7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2F4.cc?ref=84b384a16f388c68166b0603e50d0b477d0830a7", "patch": "@@ -0,0 +1,36 @@\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do link { target c++17 } }\n+// { dg-require-effective-target ieee-floats }\n+// { dg-require-static-libstdcxx }\n+// { dg-additional-options \"-static-libstdc++\" }\n+\n+// Verify the Ryu symbol generic_to_chars doesn't inadvertently leak into\n+// libstdc++.a.  If it did, this test would fail at link time with a multiple\n+// definition error.\n+\n+#include <charconv>\n+\n+extern \"C\" void generic_to_chars(void) { }\n+\n+int\n+main()\n+{\n+  char x[64];\n+  std::to_chars(x, x+64, 42.L, std::chars_format::scientific);\n+}"}]}