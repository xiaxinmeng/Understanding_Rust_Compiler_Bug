{"sha": "cdce5c164ebf7b6c92f7eee633bd1552b1603438", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RjZTVjMTY0ZWJmN2I2YzkyZjdlZWU2MzNiZDE1NTJiMTYwMzQzOA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2005-04-01T13:58:20Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-04-01T13:58:20Z"}, "message": "configure.ac (enable-checking): Explicitly set all variables for collective switch values.\n\n\t* configure.ac (enable-checking): Explicitly set all variables for\n\tcollective switch values.  Alphabetize variables. Rename\n\tac_checking_valgrind to ac_valgrind_checking.  Allow 'none' as\n\tsynonym for 'no'.\n\t* doc/install.texi (enable-checking): Update documentation.\n\t* configure: Rebuilt.\n\nFrom-SVN: r97390", "tree": {"sha": "1621c1eaee81d0d882004d18a37dd0ad79f8724e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1621c1eaee81d0d882004d18a37dd0ad79f8724e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdce5c164ebf7b6c92f7eee633bd1552b1603438", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdce5c164ebf7b6c92f7eee633bd1552b1603438", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdce5c164ebf7b6c92f7eee633bd1552b1603438", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdce5c164ebf7b6c92f7eee633bd1552b1603438/comments", "author": null, "committer": null, "parents": [{"sha": "a7818b660d503da6f2f93871bc6a5695b687434b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7818b660d503da6f2f93871bc6a5695b687434b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7818b660d503da6f2f93871bc6a5695b687434b"}], "stats": {"total": 160, "additions": 95, "deletions": 65}, "files": [{"sha": "e1b9540fc3dbebbe0a130e1562443cdd9d099af1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdce5c164ebf7b6c92f7eee633bd1552b1603438/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdce5c164ebf7b6c92f7eee633bd1552b1603438/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cdce5c164ebf7b6c92f7eee633bd1552b1603438", "patch": "@@ -1,3 +1,12 @@\n+2005-04-01  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* configure.ac (enable-checking): Explicitly set all variables for\n+\tcollective switch values.  Alphabetize variables. Rename\n+\tac_checking_valgrind to ac_valgrind_checking.  Allow 'none' as\n+\tsynonym for 'no'.\n+\t* doc/install.texi (enable-checking): Update documentation.\n+\t* configure: Rebuilt.\n+\n 2005-04-01  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-inline.c (copy_body_r): Use CONSTANT_CLASS_P where"}, {"sha": "b382766c1e34ff0876ba55ab7614bfe12754b79c", "filename": "gcc/configure", "status": "modified", "additions": 32, "deletions": 21, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdce5c164ebf7b6c92f7eee633bd1552b1603438/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdce5c164ebf7b6c92f7eee633bd1552b1603438/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=cdce5c164ebf7b6c92f7eee633bd1552b1603438", "patch": "@@ -867,8 +867,9 @@ Optional Features:\n   --enable-checking=LIST\n \t\t\t  enable expensive run-time checks.  With LIST,\n \t\t\t  enable only specific categories of checks.\n-\t\t\t  Categories are: assert,fold,gc,gcac,misc,\n-\t\t\t  rtlflag,rtl,runtime,tree,valgrind,release,yes,all;\n+\t\t\t  Categories are: yes,no,all,none,release.\n+\t\t\t  Flags are: assert,fold,gc,gcac,misc,\n+\t\t\t  rtlflag,rtl,runtime,tree,valgrind.\n   --enable-mapped-location   location_t is fileline integer cookie\n   --enable-coverage=LEVEL\n \t\t\t  enable compiler's code coverage collection.\n@@ -6275,40 +6276,50 @@ fi\n fi;\n ac_assert_checking=1\n ac_checking=\n-ac_tree_checking=\n+ac_fold_checking=\n+ac_gc_checking=\n+ac_gc_always_collect=\n ac_rtl_checking=\n ac_rtlflag_checking=\n ac_runtime_checking=1\n-ac_gc_checking=\n-ac_gc_always_collect=\n-ac_fold_checking=\n+ac_tree_checking=\n+ac_valgrind_checking=\n IFS=\"${IFS= \t}\"; ac_save_IFS=\"$IFS\"; IFS=\"$IFS,\"\n for check in $ac_checking_flags\n do\n \tcase $check in\n+\t# these set all the flags to specific states\n \tyes)\t\tac_assert_checking=1 ; ac_checking=1 ;\n-\t\t\tac_tree_checking=1 ; ac_gc_checking=1 ;\n-\t\t\tac_rtlflag_checking=1 ; ac_runtime_checking=1 ;;\n-\tno)\t\tac_assert_checking= ; ac_checking= ;\n-\t\t\tac_tree_checking= ; ac_rtl_checking= ;\n-\t\t\tac_rtlflag_checking= ; ac_gc_checking= ;\n-\t\t\tac_gc_always_collect= ; ac_fold_checking= ;;\n+\t\t\tac_fold_checking= ; ac_gc_checking=1 ;\n+\t\t\tac_gc_always_collect= ; ac_rtl_checking= ;\n+\t\t\tac_rtlflag_checking=1 ; ac_runtime_chacking=1 ;\n+\t\t\tac_tree_checking=1 ; ac_valgrind_checking= ;;\n+\tno|none)\tac_assert_checking= ; ac_checking= ;\n+\t\t\tac_fold_checking= ; ac_gc_checking= ;\n+\t\t\tac_gc_always_collect= ; ac_rtl_checking= ;\n+\t\t\tac_rtlflag_checking= ; ac_runtime_chacking= ;\n+\t\t\tac_tree_checking= ; ac_valgrind_checking= ;;\n \tall)\t\tac_assert_checking=1 ; ac_checking=1 ;\n-\t\t\tac_tree_checking=1 ; ac_rtl_checking=1 ;\n-\t\t\tac_rtlflag_checking=1 ; ac_runtime_checking=1;\n-\t\t\tac_gc_checking=1 ; ac_gc_always_collect=1 ;\n-\t\t\tac_fold_checking=1 ;;\n-        release)\tac_assert_checking=1 ; ac_runtime_checking=1 ;;\n+\t\t\tac_fold_checking=1 ; ac_gc_checking=1 ;\n+\t\t\tac_gc_always_collect=1 ; ac_rtl_checking=1 ;\n+\t\t\tac_rtlflag_checking=1 ; ac_runtime_checking=1 ;\n+\t\t\tac_tree_checking=1 ; ac_valgrind_checking= ;;\n+\trelease)\tac_assert_checking=1 ; ac_checking= ;\n+\t\t\tac_fold_checking= ; ac_gc_checking= ;\n+\t\t\tac_gc_always_collect= ; ac_rtl_checking= ;\n+\t\t\tac_rtlflag_checking= ; ac_runtime_checking=1 ;\n+\t\t\tac_tree_checking= ; ac_valgrind_checking= ;;\n+\t# these enable particular checks\n \tassert) \tac_assert_checking=1 ;;\n \tfold)\t\tac_fold_checking=1 ;;\n \tgc)\t\tac_gc_checking=1 ;;\n \tgcac)\t\tac_gc_always_collect=1 ;;\n \tmisc)\t\tac_checking=1 ;;\n-\trtlflag)\tac_rtlflag_checking=1 ;;\n \trtl)\t\tac_rtl_checking=1 ;;\n+\trtlflag)\tac_rtlflag_checking=1 ;;\n \truntime)\tac_runtime_checking=1 ;;\n \ttree)\t\tac_tree_checking=1 ;;\n-\tvalgrind)\tac_checking_valgrind=1 ;;\n+\tvalgrind)\tac_valgrind_checking=1 ;;\n \t*)\t{ { echo \"$as_me:$LINENO: error: unknown check category $check\" >&5\n echo \"$as_me: error: unknown check category $check\" >&2;}\n    { (exit 1); exit 1; }; } ;;\n@@ -6532,7 +6543,7 @@ fi\n \n \n \n-if test x$ac_checking_valgrind != x ; then\n+if test x$ac_valgrind_checking != x ; then\n   # It is certainly possible that there's valgrind but no valgrind.h.\n   # GCC relies on making annotations so we must have both.\n   echo \"$as_me:$LINENO: checking for VALGRIND_DISCARD in <valgrind/memcheck.h>\" >&5\n@@ -7388,7 +7399,7 @@ if test \"${gcc_cv_prog_makeinfo_modern+set}\" = set; then\n else\n     ac_prog_version=`$MAKEINFO --version 2>&1 |\n                    sed -n 's/^.*GNU texinfo.* \\([0-9][0-9.]*\\).*$/\\1/p'`\n-  echo \"configure:7381: version of makeinfo is $ac_prog_version\" >&5\n+  echo \"configure:7402: version of makeinfo is $ac_prog_version\" >&5\n   case $ac_prog_version in\n     '')     gcc_cv_prog_makeinfo_modern=no;;\n     4.[2-9]*)"}, {"sha": "069711359b14e7285a5de72a6e7920defd09ca2f", "filename": "gcc/configure.ac", "status": "modified", "additions": 31, "deletions": 20, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdce5c164ebf7b6c92f7eee633bd1552b1603438/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdce5c164ebf7b6c92f7eee633bd1552b1603438/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=cdce5c164ebf7b6c92f7eee633bd1552b1603438", "patch": "@@ -393,8 +393,9 @@ AC_ARG_ENABLE(checking,\n [  --enable-checking[=LIST]\n \t\t\t  enable expensive run-time checks.  With LIST,\n \t\t\t  enable only specific categories of checks.\n-\t\t\t  Categories are: assert,fold,gc,gcac,misc,\n-\t\t\t  rtlflag,rtl,runtime,tree,valgrind,release,yes,all;],\n+\t\t\t  Categories are: yes,no,all,none,release.\n+\t\t\t  Flags are: assert,fold,gc,gcac,misc,\n+\t\t\t  rtlflag,rtl,runtime,tree,valgrind.],\n [ac_checking_flags=\"${enableval}\"],[\n # Determine the default checks.\n if test x$is_release = x ; then\n@@ -404,40 +405,50 @@ else\n fi])\n ac_assert_checking=1\n ac_checking=\n-ac_tree_checking=\n+ac_fold_checking=\n+ac_gc_checking=\n+ac_gc_always_collect=\n ac_rtl_checking=\n ac_rtlflag_checking=\n ac_runtime_checking=1\n-ac_gc_checking=\n-ac_gc_always_collect=\n-ac_fold_checking=\n+ac_tree_checking=\n+ac_valgrind_checking=\n IFS=\"${IFS= \t}\"; ac_save_IFS=\"$IFS\"; IFS=\"$IFS,\"\n for check in $ac_checking_flags\n do\n \tcase $check in\n+\t# these set all the flags to specific states\n \tyes)\t\tac_assert_checking=1 ; ac_checking=1 ;\n-\t\t\tac_tree_checking=1 ; ac_gc_checking=1 ;\n-\t\t\tac_rtlflag_checking=1 ; ac_runtime_checking=1 ;;\n-\tno)\t\tac_assert_checking= ; ac_checking= ;\n-\t\t\tac_tree_checking= ; ac_rtl_checking= ;\n-\t\t\tac_rtlflag_checking= ; ac_gc_checking= ;\n-\t\t\tac_gc_always_collect= ; ac_fold_checking= ;;\n+\t\t\tac_fold_checking= ; ac_gc_checking=1 ;\n+\t\t\tac_gc_always_collect= ; ac_rtl_checking= ;\n+\t\t\tac_rtlflag_checking=1 ; ac_runtime_chacking=1 ;\n+\t\t\tac_tree_checking=1 ; ac_valgrind_checking= ;;\n+\tno|none)\tac_assert_checking= ; ac_checking= ;\n+\t\t\tac_fold_checking= ; ac_gc_checking= ;\n+\t\t\tac_gc_always_collect= ; ac_rtl_checking= ;\n+\t\t\tac_rtlflag_checking= ; ac_runtime_chacking= ;\n+\t\t\tac_tree_checking= ; ac_valgrind_checking= ;;\n \tall)\t\tac_assert_checking=1 ; ac_checking=1 ;\n-\t\t\tac_tree_checking=1 ; ac_rtl_checking=1 ;\n-\t\t\tac_rtlflag_checking=1 ; ac_runtime_checking=1;\n-\t\t\tac_gc_checking=1 ; ac_gc_always_collect=1 ;\n-\t\t\tac_fold_checking=1 ;;\n-        release)\tac_assert_checking=1 ; ac_runtime_checking=1 ;;\n+\t\t\tac_fold_checking=1 ; ac_gc_checking=1 ;\n+\t\t\tac_gc_always_collect=1 ; ac_rtl_checking=1 ;\n+\t\t\tac_rtlflag_checking=1 ; ac_runtime_checking=1 ;\n+\t\t\tac_tree_checking=1 ; ac_valgrind_checking= ;;\n+\trelease)\tac_assert_checking=1 ; ac_checking= ;\n+\t\t\tac_fold_checking= ; ac_gc_checking= ;\n+\t\t\tac_gc_always_collect= ; ac_rtl_checking= ;\n+\t\t\tac_rtlflag_checking= ; ac_runtime_checking=1 ;\n+\t\t\tac_tree_checking= ; ac_valgrind_checking= ;;\n+\t# these enable particular checks\n \tassert) \tac_assert_checking=1 ;;\n \tfold)\t\tac_fold_checking=1 ;;\n \tgc)\t\tac_gc_checking=1 ;;\n \tgcac)\t\tac_gc_always_collect=1 ;;\n \tmisc)\t\tac_checking=1 ;;\n-\trtlflag)\tac_rtlflag_checking=1 ;;\n \trtl)\t\tac_rtl_checking=1 ;;\n+\trtlflag)\tac_rtlflag_checking=1 ;;\n \truntime)\tac_runtime_checking=1 ;;\n \ttree)\t\tac_tree_checking=1 ;;\n-\tvalgrind)\tac_checking_valgrind=1 ;;\n+\tvalgrind)\tac_valgrind_checking=1 ;;\n \t*)\tAC_MSG_ERROR(unknown check category $check) ;;\n \tesac\n done\n@@ -505,7 +516,7 @@ dnl # an if statement.  This was the source of very frustrating bugs\n dnl # in converting to autoconf 2.5x!\n AC_CHECK_HEADER(valgrind.h, have_valgrind_h=yes, have_valgrind_h=no)\n \n-if test x$ac_checking_valgrind != x ; then\n+if test x$ac_valgrind_checking != x ; then\n   # It is certainly possible that there's valgrind but no valgrind.h.\n   # GCC relies on making annotations so we must have both.\n   AC_MSG_CHECKING(for VALGRIND_DISCARD in <valgrind/memcheck.h>)"}, {"sha": "78c7c1f4b0a2461a9a5d0355ab35369417875163", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdce5c164ebf7b6c92f7eee633bd1552b1603438/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdce5c164ebf7b6c92f7eee633bd1552b1603438/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=cdce5c164ebf7b6c92f7eee633bd1552b1603438", "patch": "@@ -1099,30 +1099,29 @@ controlled by the Makefiles.\n \n @item --enable-checking\n @itemx --enable-checking=@var{list}\n-When you specify this option, the compiler is built to perform checking\n-of tree node types when referencing fields of that node, and some other\n-internal consistency checks.  This does not change the generated code,\n-but adds error checking within the compiler.  This will slow down the\n-compiler and may only work properly if you are building the compiler\n-with GCC@.  This is on by default when building from CVS or snapshots,\n-but off for releases.  More control over the checks may be had by\n-specifying @var{list}; the categories of checks available are\n-@samp{release}, @samp{assert}, @samp{misc}, @samp{tree}, @samp{gc},\n-@samp{rtl}, @samp{rtlflag}, @samp{runtime}, @samp{fold}, @samp{gcac} and\n-@samp{valgrind}.  The @samp{release} category enables only those checks\n-suitable for release builds, currently this is @samp{assert} and\n-@samp{runtime}.  The check @samp{valgrind} requires the external\n-@command{valgrind} simulator, available from\n-@uref{http://valgrind.kde.org/}.  The checks @samp{rtl}, @samp{gcac} and\n-@samp{valgrind} are very expensive.  The default when @var{list} is not\n-specified is @samp{assert,misc,tree,gc,rtlflag,runtime}.  That is also\n-the default for development builds, when @samp{--enable-checking} is not\n-specified.  For release builds the default, when\n-@samp{--enable-checking} is not given, is @samp{release}.  To disable\n-all checking, @samp{--disable-checking} must be explicitly requested.\n-Disabling assertions will make the compiler and runtime slightly faster\n-but increase the risk of undetected internal errors causing wrong code\n-to be generated.\n+When you specify this option, the compiler is built to perform internal\n+constency checks of the requested complexity.  This does not change the\n+generated code, but adds error checking within the compiler.  This will\n+slow down the compiler and may only work properly if you are building\n+the compiler with GCC@.  This is @samp{yes} by default when building\n+from CVS or snapshots, but @samp{release} for releases.  More control\n+over the checks may be had by specifying @var{list}.  The categories of\n+checks available are @samp{yes} (most common checks\n+@samp{assert,misc,tree,gc,rtlflag,runtime}), @samp{no} (no checks at\n+all), @samp{all} (all but @samp{valgrind}), @samp{release} (cheapest\n+checks @samp{assert,runtime}) or @samp{none} (same as @samp{no}).\n+Individual checks can be enabled with these flags @samp{assert},\n+@samp{fold}, @samp{gc}, @samp{gcac} @samp{misc}, @samp{rtl},\n+@samp{rtlflag}, @samp{runtime}, @samp{tree}, and @samp{valgrind}.\n+\n+The @samp{valgrind} check requires the external @command{valgrind}\n+simulator, available from @uref{http://valgrind.kde.org/}.  The\n+@samp{rtl}, @samp{gcac} and @samp{valgrind} checks are very expensive.\n+To disable all checking, @samp{--disable-checking} or\n+@samp{--enable-checking=none} must be explicitly requested.  Disabling\n+assertions will make the compiler and runtime slightly faster but\n+increase the risk of undetected internal errors causing wrong code to be\n+generated.\n \n @item --enable-coverage\n @itemx --enable-coverage=@var{level}"}]}