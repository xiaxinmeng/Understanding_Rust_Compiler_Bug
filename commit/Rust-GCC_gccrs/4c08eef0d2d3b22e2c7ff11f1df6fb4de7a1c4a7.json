{"sha": "4c08eef0d2d3b22e2c7ff11f1df6fb4de7a1c4a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMwOGVlZjBkMmQzYjIyZTJjN2ZmMTFmMWRmNmZiNGRlN2ExYzRhNw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-10-27T10:41:39Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-10-27T10:41:39Z"}, "message": "(clear_storage): SIZE is now rtx, not int.\n\n(store_constructor): Call clear_storage with rtx.\n(get_inner_reference): Convert index to precision of sizetype, not\nPOINTER_SIZE.\n(expand_expr, case ARRAY_REF): Likewise.\n\nFrom-SVN: r10529", "tree": {"sha": "61d750598cb136232188c3790fed7aae276de60b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61d750598cb136232188c3790fed7aae276de60b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c08eef0d2d3b22e2c7ff11f1df6fb4de7a1c4a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c08eef0d2d3b22e2c7ff11f1df6fb4de7a1c4a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c08eef0d2d3b22e2c7ff11f1df6fb4de7a1c4a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c08eef0d2d3b22e2c7ff11f1df6fb4de7a1c4a7/comments", "author": null, "committer": null, "parents": [{"sha": "c16b611ef9eec80e7f3b4318b8b991e457a2fe4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c16b611ef9eec80e7f3b4318b8b991e457a2fe4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c16b611ef9eec80e7f3b4318b8b991e457a2fe4f"}], "stats": {"total": 38, "additions": 22, "deletions": 16}, "files": [{"sha": "8fe0c43c9e0983eccf564a9803ef8e7b6dcbd73d", "filename": "gcc/expr.c", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c08eef0d2d3b22e2c7ff11f1df6fb4de7a1c4a7/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c08eef0d2d3b22e2c7ff11f1df6fb4de7a1c4a7/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=4c08eef0d2d3b22e2c7ff11f1df6fb4de7a1c4a7", "patch": "@@ -1833,20 +1833,24 @@ use_regs (call_fusage, regno, nregs)\n void\n clear_storage (object, size)\n      rtx object;\n-     int size;\n+     rtx size;\n {\n   if (GET_MODE (object) == BLKmode)\n     {\n #ifdef TARGET_MEM_FUNCTIONS\n       emit_library_call (memset_libfunc, 0,\n \t\t\t VOIDmode, 3,\n \t\t\t XEXP (object, 0), Pmode, const0_rtx, ptr_mode,\n-\t\t\t GEN_INT (size), ptr_mode);\n+\t\t\t convert_to_mode (TYPE_MODE (sizetype),\n+\t\t\t\t\t  size, TREE_UNSIGNED (sizetype)),\n+\t\t\t TYPE_MODE (sizetype));\n #else\n       emit_library_call (bzero_libfunc, 0,\n \t\t\t VOIDmode, 2,\n-\t\t\t XEXP (object, 0), Pmode,\n-\t\t\t GEN_INT (size), ptr_mode);\n+\t\t\t XEXP (object, 0), Pmode,\t\n+\t\t\t convert_to_mode (TYPE_MODE (sizetype),\n+\t\t\t\t\t  size, TREE_UNSIGNED (sizetype)),\n+\t\t\t TYPE_MODE (sizetype));\n #endif\n     }\n   else\n@@ -3002,7 +3006,7 @@ store_constructor (exp, target)\n \t clear the whole structure first.  */\n       else if (list_length (CONSTRUCTOR_ELTS (exp))\n \t       != list_length (TYPE_FIELDS (type)))\n-\tclear_storage (target, int_size_in_bytes (type));\n+\tclear_storage (target, expr_size (exp));\n       else\n \t/* Inform later passes that the old value is dead.  */\n \temit_insn (gen_rtx (CLOBBER, VOIDmode, target));\n@@ -3088,7 +3092,7 @@ store_constructor (exp, target)\n \n       if (list_length (CONSTRUCTOR_ELTS (exp)) < maxelt - minelt + 1\n \t  || (GET_CODE (target) == REG && TREE_STATIC (exp)))\n-\tclear_storage (target, int_size_in_bytes (type));\n+\tclear_storage (target, expr_size (exp));\n       else\n \t/* Inform later passes that the old value is dead.  */\n \temit_insn (gen_rtx (CLOBBER, VOIDmode, target));\n@@ -3170,12 +3174,12 @@ store_constructor (exp, target)\n       /* Check for all zeros. */\n       if (CONSTRUCTOR_ELTS (exp) == NULL_TREE)\n \t{\n-\t  clear_storage (target, nbytes);\n+\t  clear_storage (target, expr_size (exp));\n \t  return;\n \t}\n \n       if (nbytes < 0)\n-\tabort();\n+\tabort ();\n \n       domain_min = convert (sizetype, TYPE_MIN_VALUE (domain));\n       domain_max = convert (sizetype, TYPE_MAX_VALUE (domain));\n@@ -3292,7 +3296,7 @@ store_constructor (exp, target)\n \t\t\n \t      if (need_to_clear_first\n \t\t  && endb - startb != nbytes * BITS_PER_UNIT)\n-\t\tclear_storage (target, nbytes);\n+\t\tclear_storage (target, expr_size (exp));\n \t      need_to_clear_first = 0;\n \t      emit_library_call (memset_libfunc, 0,\n \t\t\t\t VOIDmode, 3,\n@@ -3307,7 +3311,7 @@ store_constructor (exp, target)\n \t    {\n \t      if (need_to_clear_first)\n \t\t{\n-\t\t  clear_storage (target, nbytes);\n+\t\t  clear_storage (target, expr_size (exp));\n \t\t  need_to_clear_first = 0;\n \t\t}\n \t      emit_library_call (gen_rtx (SYMBOL_REF, Pmode, \"__setbits\"),\n@@ -3615,9 +3619,10 @@ get_inner_reference (exp, pbitsize, pbitpos, poffset, pmode,\n \t  if (! integer_zerop (low_bound))\n \t    index = fold (build (MINUS_EXPR, index_type, index, low_bound));\n \n-\t  if (TYPE_PRECISION (index_type) != POINTER_SIZE)\n+\t  if (TYPE_PRECISION (index_type) != TYPE_PRECISION (sizetype))\n \t    {\n-\t      index = convert (type_for_size (POINTER_SIZE, 0), index);\n+\t      index = convert (type_for_size (TYPE_PRECISION (sizetype), 0),\n+\t\t\t       index);\n \t      index_type = TREE_TYPE (index);\n \t    }\n \n@@ -4633,10 +4638,11 @@ expand_expr (exp, target, tmode, modifier)\n \t    tree elt;\n \t    tree size = size_in_bytes (type);\n \n-\t    /* Convert the integer argument to a type the same size as a\n-\t       pointer so the multiply won't overflow spuriously.  */\n-\t    if (TYPE_PRECISION (index_type) != POINTER_SIZE)\n-\t      index = convert (type_for_size (POINTER_SIZE, 0), index);\n+\t    /* Convert the integer argument to a type the same size as sizetype\n+\t       so the multiply won't overflow spuriously.  */\n+\t    if (TYPE_PRECISION (index_type) != TYPE_PRECISION (sizetype))\n+\t      index = convert (type_for_size (TYPE_PRECISION (sizetype), 0),\n+\t\t\t       index);\n \n \t    if (TREE_CODE (size) != INTEGER_CST\n \t\t&& contains_placeholder_p (size))"}]}