{"sha": "13411c9d4c0fb1c35998d67d6d9ce112db4651c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM0MTFjOWQ0YzBmYjFjMzU5OThkNjdkNmQ5Y2UxMTJkYjQ2NTFjOQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2010-07-20T04:01:32Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2010-07-20T04:01:32Z"}, "message": "re PR fortran/44929 ([OOP] Parsing error of  derived type name starting with 'REAL')\n\n2010-07-19  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/44929\n\t* gfortran.dg/allocate_with_typespec.f90: New test.\n\t* gfortran.dg/allocate_derived_1.f90: Update error message.\n\n2010-07-19  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/44929\n\t* fortran/match.c (match_type_spec): Check for derived type before\n\tintrinsic types.\n\nFrom-SVN: r162325", "tree": {"sha": "8c0949aeb572f14df72b982616ce4ed7ff3759a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c0949aeb572f14df72b982616ce4ed7ff3759a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13411c9d4c0fb1c35998d67d6d9ce112db4651c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13411c9d4c0fb1c35998d67d6d9ce112db4651c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13411c9d4c0fb1c35998d67d6d9ce112db4651c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13411c9d4c0fb1c35998d67d6d9ce112db4651c9/comments", "author": null, "committer": null, "parents": [{"sha": "8145be0145861ae60c43d96ef9ff726e9cd644f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8145be0145861ae60c43d96ef9ff726e9cd644f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8145be0145861ae60c43d96ef9ff726e9cd644f6"}], "stats": {"total": 90, "additions": 70, "deletions": 20}, "files": [{"sha": "0c70c2b95ea17e8f0c8ae6e99f695337dd22bb15", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13411c9d4c0fb1c35998d67d6d9ce112db4651c9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13411c9d4c0fb1c35998d67d6d9ce112db4651c9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=13411c9d4c0fb1c35998d67d6d9ce112db4651c9", "patch": "@@ -1,3 +1,9 @@\n+2010-07-19  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/44929\n+\t* fortran/match.c (match_type_spec): Check for derived type before\n+\tintrinsic types.\n+\n 2010-07-19  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/42385"}, {"sha": "2fc73fe1f1486b1dc9444ed76f4a929fad15e71b", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13411c9d4c0fb1c35998d67d6d9ce112db4651c9/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13411c9d4c0fb1c35998d67d6d9ce112db4651c9/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=13411c9d4c0fb1c35998d67d6d9ce112db4651c9", "patch": "@@ -2706,6 +2706,25 @@ match_type_spec (gfc_typespec *ts)\n   gfc_clear_ts (ts);\n   old_locus = gfc_current_locus;\n \n+  m = match_derived_type_spec (ts);\n+  if (m == MATCH_YES)\n+    {\n+      old_locus = gfc_current_locus;\n+      if (gfc_match (\" :: \") != MATCH_YES)\n+\treturn MATCH_ERROR;\n+      gfc_current_locus = old_locus;\n+      /* Enfore F03:C401.  */\n+      if (ts->u.derived->attr.abstract)\n+\t{\n+\t  gfc_error (\"Derived type '%s' at %L may not be ABSTRACT\",\n+\t\t     ts->u.derived->name, &old_locus);\n+\t  return MATCH_ERROR;\n+\t}\n+      return MATCH_YES;\n+    }\n+\n+  gfc_current_locus = old_locus;\n+\n   if (gfc_match (\"integer\") == MATCH_YES)\n     {\n       ts->type = BT_INTEGER;\n@@ -2747,25 +2766,6 @@ match_type_spec (gfc_typespec *ts)\n       goto kind_selector;\n     }\n \n-  m = match_derived_type_spec (ts);\n-  if (m == MATCH_YES)\n-    {\n-      old_locus = gfc_current_locus;\n-      if (gfc_match (\" :: \") != MATCH_YES)\n-\treturn MATCH_ERROR;\n-      gfc_current_locus = old_locus;\n-      /* Enfore F03:C401.  */\n-      if (ts->u.derived->attr.abstract)\n-\t{\n-\t  gfc_error (\"Derived type '%s' at %L may not be ABSTRACT\",\n-\t\t     ts->u.derived->name, &old_locus);\n-\t  return MATCH_ERROR;\n-\t}\n-      return MATCH_YES;\n-    }\n-  else if (m == MATCH_ERROR && gfc_match (\" :: \") == MATCH_YES)\n-    return MATCH_ERROR;\n-\n   /* If a type is not matched, simply return MATCH_NO.  */\n   gfc_current_locus = old_locus;\n   return MATCH_NO;"}, {"sha": "4146f3bc16840f5ed8fbfc880d176b8d02577eee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13411c9d4c0fb1c35998d67d6d9ce112db4651c9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13411c9d4c0fb1c35998d67d6d9ce112db4651c9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=13411c9d4c0fb1c35998d67d6d9ce112db4651c9", "patch": "@@ -1,3 +1,9 @@\n+2010-07-19  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/44929\n+\t* gfortran.dg/allocate_with_typespec.f90: New test.\n+\t* gfortran.dg/allocate_derived_1.f90: Update error message.\n+\n 2010-07-19  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/44996"}, {"sha": "08665abb265112dc89d5c807563fa470b5f00bda", "filename": "gcc/testsuite/gfortran.dg/allocate_derived_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13411c9d4c0fb1c35998d67d6d9ce112db4651c9/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_derived_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13411c9d4c0fb1c35998d67d6d9ce112db4651c9/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_derived_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_derived_1.f90?ref=13411c9d4c0fb1c35998d67d6d9ce112db4651c9", "patch": "@@ -32,7 +32,7 @@\n  allocate(t1 :: x(2))\n  allocate(t2 :: x(3))\n  allocate(t3 :: x(4))\n- allocate(tx :: x(5))  ! { dg-error \"is not an accessible derived type\" }\n+ allocate(tx :: x(5))  ! { dg-error \"not a nonprocedure pointer or an allocatable variable\" }\n  allocate(u0 :: x(6))  ! { dg-error \"may not be ABSTRACT\" }\n  allocate(v1 :: x(7))  ! { dg-error \"is type incompatible with typespec\" }\n "}, {"sha": "686abdb5b1bb0315a89ca0e5a369c6e64129ae07", "filename": "gcc/testsuite/gfortran.dg/allocate_with_typespec.f90", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13411c9d4c0fb1c35998d67d6d9ce112db4651c9/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_typespec.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13411c9d4c0fb1c35998d67d6d9ce112db4651c9/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_typespec.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_typespec.f90?ref=13411c9d4c0fb1c35998d67d6d9ce112db4651c9", "patch": "@@ -0,0 +1,38 @@\n+!\n+! { dg-do compile }\n+!\n+! PR fortran/44929\n+!\n+! The module is contributed by Satish.BD <bdsatish@gmail.com>.\n+! The subroutines are from Tobias Burnus and Steve Kargl.\n+!\n+module temp\n+\n+   type, abstract :: abst\n+      !! empty\n+   end type abst\n+\n+   type, extends(abst) :: real_type\n+      !! empty\n+   end type real_type\n+\n+   contains\n+\n+   function create(name)  result(obj)\n+      character(len=*), intent(in) :: name\n+      class(abst), pointer :: obj\n+      allocate(real_type :: obj)\n+   end function create\n+end module temp\n+\n+subroutine z\n+   real(8), allocatable :: r8\n+   allocate(real(kind=8) :: r8)\n+end subroutine z\n+\n+subroutine y\n+   real(8), allocatable :: r8\n+   allocate(real(8) :: r8)\n+end subroutine y\n+! { dg-final { cleanup-modules \"temp\" } }\n+"}]}