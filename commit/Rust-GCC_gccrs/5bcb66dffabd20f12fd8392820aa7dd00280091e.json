{"sha": "5bcb66dffabd20f12fd8392820aa7dd00280091e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJjYjY2ZGZmYWJkMjBmMTJmZDgzOTI4MjBhYTdkZDAwMjgwMDkxZQ==", "commit": {"author": {"name": "Tim Shen", "email": "timshen@google.com", "date": "2014-07-01T03:05:45Z"}, "committer": {"name": "Tim Shen", "email": "timshen@gcc.gnu.org", "date": "2014-07-01T03:05:45Z"}, "message": "re PR testsuite/61061 (FAIL: g++.dg/inherit/covariant7.C)\n\n\tPR libstdc++/61061\n\tPR libstdc++/61582\n\t* include/bits/regex_automaton.h (_NFA<>::_M_insert_state): Add\n\ta NFA state limit. If it's exceeded, regex_constants::error_space\n\twill be throwed.\n\t* include/bits/regex_automaton.tcc (_StateSeq<>::_M_clone): Use\n\tmap (which is sparse) instead of vector. This reduce n times clones'\n\tcost from O(n^2) to O(n).\n\t* include/std/regex: Add map dependency.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/char/61601.cc: New\n\ttestcase.\n\nFrom-SVN: r212185", "tree": {"sha": "b3f29a323adc663c3b20144ef5bf212c5599c09e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3f29a323adc663c3b20144ef5bf212c5599c09e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bcb66dffabd20f12fd8392820aa7dd00280091e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bcb66dffabd20f12fd8392820aa7dd00280091e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bcb66dffabd20f12fd8392820aa7dd00280091e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bcb66dffabd20f12fd8392820aa7dd00280091e/comments", "author": {"login": "timshen91", "id": 1157432, "node_id": "MDQ6VXNlcjExNTc0MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1157432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timshen91", "html_url": "https://github.com/timshen91", "followers_url": "https://api.github.com/users/timshen91/followers", "following_url": "https://api.github.com/users/timshen91/following{/other_user}", "gists_url": "https://api.github.com/users/timshen91/gists{/gist_id}", "starred_url": "https://api.github.com/users/timshen91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timshen91/subscriptions", "organizations_url": "https://api.github.com/users/timshen91/orgs", "repos_url": "https://api.github.com/users/timshen91/repos", "events_url": "https://api.github.com/users/timshen91/events{/privacy}", "received_events_url": "https://api.github.com/users/timshen91/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ad9ec7b3c5969c776bc28e18292be09981abaa6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad9ec7b3c5969c776bc28e18292be09981abaa6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad9ec7b3c5969c776bc28e18292be09981abaa6a"}], "stats": {"total": 87, "additions": 79, "deletions": 8}, "files": [{"sha": "3f4699fed1f005d08dce74f553c2e254bb7afa6a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bcb66dffabd20f12fd8392820aa7dd00280091e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bcb66dffabd20f12fd8392820aa7dd00280091e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5bcb66dffabd20f12fd8392820aa7dd00280091e", "patch": "@@ -1,3 +1,17 @@\n+2014-07-01  Tim Shen  <timshen@google.com>\n+\n+\tPR libstdc++/61061\n+\tPR libstdc++/61582\n+\t* include/bits/regex_automaton.h (_NFA<>::_M_insert_state): Add\n+\ta NFA state limit. If it's exceeded, regex_constants::error_space\n+\twill be throwed.\n+\t* include/bits/regex_automaton.tcc (_StateSeq<>::_M_clone): Use\n+\tmap (which is sparse) instead of vector. This reduce n times clones'\n+\tcost from O(n^2) to O(n).\n+\t* include/std/regex: Add map dependency.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/char/61601.cc: New\n+\ttestcase.\n+\n 2014-07-01  Tim Shen  <timshen@google.com>\n \n \tPR libstdc++/61424"}, {"sha": "27ec671d86dc724ad5cfcaf1be9b81eedd64e41a", "filename": "libstdc++-v3/include/bits/regex_automaton.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bcb66dffabd20f12fd8392820aa7dd00280091e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bcb66dffabd20f12fd8392820aa7dd00280091e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h?ref=5bcb66dffabd20f12fd8392820aa7dd00280091e", "patch": "@@ -28,6 +28,11 @@\n  *  Do not attempt to use it directly. @headername{regex}\n  */\n \n+// This macro defines the maximal state number a NFA can have.\n+#ifndef _GLIBCXX_REGEX_STATE_LIMIT\n+#define _GLIBCXX_REGEX_STATE_LIMIT 100000\n+#endif\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace __detail\n@@ -254,6 +259,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_insert_state(_StateT __s)\n       {\n \tthis->push_back(std::move(__s));\n+\tif (this->size() > _GLIBCXX_REGEX_STATE_LIMIT)\n+\t  __throw_regex_error(regex_constants::error_space);\n \treturn this->size()-1;\n       }\n "}, {"sha": "08d271ec744ea416543df326264989bbd24e611c", "filename": "libstdc++-v3/include/bits/regex_automaton.tcc", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bcb66dffabd20f12fd8392820aa7dd00280091e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bcb66dffabd20f12fd8392820aa7dd00280091e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.tcc?ref=5bcb66dffabd20f12fd8392820aa7dd00280091e", "patch": "@@ -189,7 +189,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _StateSeq<_TraitsT>\n     _StateSeq<_TraitsT>::_M_clone()\n     {\n-      std::vector<_StateIdT> __m(_M_nfa.size(), -1);\n+      std::map<_StateIdT, _StateIdT> __m;\n       std::stack<_StateIdT> __stack;\n       __stack.push(_M_start);\n       while (!__stack.empty())\n@@ -203,29 +203,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  if (__dup._M_opcode == _S_opcode_alternative\n \t      || __dup._M_opcode == _S_opcode_repeat\n \t      || __dup._M_opcode == _S_opcode_subexpr_lookahead)\n-\t    if (__dup._M_alt != _S_invalid_state_id && __m[__dup._M_alt] == -1)\n+\t    if (__dup._M_alt != _S_invalid_state_id\n+\t\t&& __m.count(__dup._M_alt) == 0)\n \t      __stack.push(__dup._M_alt);\n \t  if (__u == _M_end)\n \t    continue;\n-\t  if (__dup._M_next != _S_invalid_state_id && __m[__dup._M_next] == -1)\n+\t  if (__dup._M_next != _S_invalid_state_id\n+\t      && __m.count(__dup._M_next) == 0)\n \t    __stack.push(__dup._M_next);\n \t}\n-      for (auto __v : __m)\n+      for (auto __it : __m)\n \t{\n-\t  if (__v == -1)\n-\t    continue;\n+\t  auto __v = __it.second;\n \t  auto& __ref = _M_nfa[__v];\n \t  if (__ref._M_next != _S_invalid_state_id)\n \t    {\n-\t      _GLIBCXX_DEBUG_ASSERT(__m[__ref._M_next] != -1);\n+\t      _GLIBCXX_DEBUG_ASSERT(__m.count(__ref._M_next) > 0);\n \t      __ref._M_next = __m[__ref._M_next];\n \t    }\n \t  if (__ref._M_opcode == _S_opcode_alternative\n \t      || __ref._M_opcode == _S_opcode_repeat\n \t      || __ref._M_opcode == _S_opcode_subexpr_lookahead)\n \t    if (__ref._M_alt != _S_invalid_state_id)\n \t      {\n-\t\t_GLIBCXX_DEBUG_ASSERT(__m[__ref._M_alt] != -1);\n+\t\t_GLIBCXX_DEBUG_ASSERT(__m.count(__ref._M_alt) > 0);\n \t\t__ref._M_alt = __m[__ref._M_alt];\n \t      }\n \t}"}, {"sha": "470772af66dce7e44fdf8f0591ecfd766c922cc0", "filename": "libstdc++-v3/include/std/regex", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bcb66dffabd20f12fd8392820aa7dd00280091e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bcb66dffabd20f12fd8392820aa7dd00280091e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex?ref=5bcb66dffabd20f12fd8392820aa7dd00280091e", "patch": "@@ -50,6 +50,7 @@\n #include <string>\n #include <utility>\n #include <vector>\n+#include <map>\n #include <cstring>\n \n #include <bits/regex_constants.h>"}, {"sha": "88efab5aad163f84cf607ddfae10123f7cb07a3f", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/char/61601.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bcb66dffabd20f12fd8392820aa7dd00280091e/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2F61601.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bcb66dffabd20f12fd8392820aa7dd00280091e/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2F61601.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2F61601.cc?ref=5bcb66dffabd20f12fd8392820aa7dd00280091e", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2013-2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 28.11.2 regex_match\n+\n+#include <regex>\n+#include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n+\n+using namespace __gnu_test;\n+using namespace std;\n+\n+// libstdc++/61601\n+void\n+test01()\n+{\n+  try\n+  {\n+    regex r(\"((.*)$1{100}{100}{100}{100}{100}{100}{100}{100}{100}{100}{100}{100}{100}{100}{100}{100}{100}{100}{100}{100}{100}{100}{100}{100}{100}{100}{100}{100}{100}{100})\");\n+  }\n+  catch (const regex_error& e)\n+  {\n+    VERIFY(e.code() == regex_constants::error_space);\n+  }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}]}