{"sha": "fa0cdfb651f59951d10331b782c422baad93d3e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmEwY2RmYjY1MWY1OTk1MWQxMDMzMWI3ODJjNDIyYmFhZDkzZDNlNA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-09-15T12:23:57Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-09-15T12:23:57Z"}, "message": "[demangler] Fix nested generic lambda\n\nhttps://gcc.gnu.org/ml/gcc-patches/2017-09/msg00994.html\n\tPR demangler/82195\n\t* cp-demangle.c (d_name): Add 'toplevel' parm.  Pass to\t...\n\t(d_local_name): ... here.  Parse trailing function args on nested\n\tlocal_name.\n\t(d_encoding, d_special_name, d_class_enum_type): Adjust d_name calls.\n\t* testsuite/demangle-expected: Add tests.\n\nFrom-SVN: r252815", "tree": {"sha": "8df9c2bc5a9ed8f3d6b38ca359f7db3b5a824ab8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8df9c2bc5a9ed8f3d6b38ca359f7db3b5a824ab8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa0cdfb651f59951d10331b782c422baad93d3e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa0cdfb651f59951d10331b782c422baad93d3e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa0cdfb651f59951d10331b782c422baad93d3e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa0cdfb651f59951d10331b782c422baad93d3e4/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dc4b8c68205ed860dd2dda9d00d868a96211d393", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc4b8c68205ed860dd2dda9d00d868a96211d393", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc4b8c68205ed860dd2dda9d00d868a96211d393"}], "stats": {"total": 76, "additions": 59, "deletions": 17}, "files": [{"sha": "7a49a6a1397462741682d94fbc2bb38cb1c2c241", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa0cdfb651f59951d10331b782c422baad93d3e4/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa0cdfb651f59951d10331b782c422baad93d3e4/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=fa0cdfb651f59951d10331b782c422baad93d3e4", "patch": "@@ -1,3 +1,12 @@\n+2017-09-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR demangler/82195\n+\t* cp-demangle.c (d_name): Add 'toplevel' parm.  Pass to\t...\n+\t(d_local_name): ... here.  Parse trailing function args on nested\n+\tlocal_name.\n+\t(d_encoding, d_special_name, d_class_enum_type): Adjust d_name calls.\n+\t* testsuite/demangle-expected: Add tests.\n+\n 2017-09-15  Richard Biener  <rguenther@suse.de>\n \n \tPR lto/81968\n@@ -11,6 +20,8 @@\n \t(d_encoding): Hold bare_function_type in local var.\n \t(d_local_name): Build name in both cases and build result once.\n \tCollapse switch-if to single conditional.\n+\t(d_local_name): \n+\n \t* testsuite/demangle-expected: Realign blank lines with tests.\n \n 2017-09-12  Jiong Wang  <jiong.wang@arm.com>"}, {"sha": "c3300528ff024de388f15d012a1549300ab7ce5b", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 34, "deletions": 17, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa0cdfb651f59951d10331b782c422baad93d3e4/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa0cdfb651f59951d10331b782c422baad93d3e4/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=fa0cdfb651f59951d10331b782c422baad93d3e4", "patch": "@@ -425,7 +425,7 @@ is_ctor_dtor_or_conversion (struct demangle_component *);\n \n static struct demangle_component *d_encoding (struct d_info *, int);\n \n-static struct demangle_component *d_name (struct d_info *);\n+static struct demangle_component *d_name (struct d_info *, int);\n \n static struct demangle_component *d_nested_name (struct d_info *);\n \n@@ -484,7 +484,7 @@ static struct demangle_component *d_expression (struct d_info *);\n \n static struct demangle_component *d_expr_primary (struct d_info *);\n \n-static struct demangle_component *d_local_name (struct d_info *);\n+static struct demangle_component *d_local_name (struct d_info *, int);\n \n static int d_discriminator (struct d_info *);\n \n@@ -1308,7 +1308,7 @@ d_encoding (struct d_info *di, int top_level)\n     {\n       struct demangle_component *dc, *dcr;\n \n-      dc = d_name (di);\n+      dc = d_name (di, top_level);\n \n       if (dc != NULL && top_level && (di->options & DMGL_PARAMS) == 0)\n \t{\n@@ -1383,7 +1383,7 @@ d_abi_tags (struct d_info *di, struct demangle_component *dc)\n */\n \n static struct demangle_component *\n-d_name (struct d_info *di)\n+d_name (struct d_info *di, int top_level)\n {\n   char peek = d_peek_char (di);\n   struct demangle_component *dc;\n@@ -1394,7 +1394,7 @@ d_name (struct d_info *di)\n       return d_nested_name (di);\n \n     case 'Z':\n-      return d_local_name (di);\n+      return d_local_name (di, top_level);\n \n     case 'U':\n       return d_unqualified_name (di);\n@@ -2079,11 +2079,11 @@ d_special_name (struct d_info *di)\n \n \tcase 'H':\n \t  return d_make_comp (di, DEMANGLE_COMPONENT_TLS_INIT,\n-\t\t\t      d_name (di), NULL);\n+\t\t\t      d_name (di, 0), NULL);\n \n \tcase 'W':\n \t  return d_make_comp (di, DEMANGLE_COMPONENT_TLS_WRAPPER,\n-\t\t\t      d_name (di), NULL);\n+\t\t\t      d_name (di, 0), NULL);\n \n \tdefault:\n \t  return NULL;\n@@ -2094,11 +2094,12 @@ d_special_name (struct d_info *di)\n       switch (d_next_char (di))\n \t{\n \tcase 'V':\n-\t  return d_make_comp (di, DEMANGLE_COMPONENT_GUARD, d_name (di), NULL);\n+\t  return d_make_comp (di, DEMANGLE_COMPONENT_GUARD,\n+\t\t\t      d_name (di, 0), NULL);\n \n \tcase 'R':\n \t  {\n-\t    struct demangle_component *name = d_name (di);\n+\t    struct demangle_component *name = d_name (di, 0);\n \t    return d_make_comp (di, DEMANGLE_COMPONENT_REFTEMP, name,\n \t\t\t\td_number_component (di));\n \t  }\n@@ -2934,7 +2935,7 @@ d_bare_function_type (struct d_info *di, int has_return_type)\n static struct demangle_component *\n d_class_enum_type (struct d_info *di)\n {\n-  return d_name (di);\n+  return d_name (di, 0);\n }\n \n /* <array-type> ::= A <(positive dimension) number> _ <(element) type>\n@@ -3567,7 +3568,7 @@ d_expr_primary (struct d_info *di)\n */\n \n static struct demangle_component *\n-d_local_name (struct d_info *di)\n+d_local_name (struct d_info *di, int top_level)\n {\n   struct demangle_component *function;\n   struct demangle_component *name;\n@@ -3600,14 +3601,30 @@ d_local_name (struct d_info *di)\n \t    return NULL;\n \t}\n \n-      name = d_name (di);\n+      name = d_name (di, 0);\n+\n       if (name\n-\t  /* Lambdas and unnamed types have internal discriminators.  */\n+\t  /* Lambdas and unnamed types have internal discriminators\n+\t     and are not functions.  */\n \t  && name->type != DEMANGLE_COMPONENT_LAMBDA\n-\t  && name->type != DEMANGLE_COMPONENT_UNNAMED_TYPE\n-\t  /* Otherwise read and ignore an optional discriminator.  */\n-\t  && ! d_discriminator (di))\n-\treturn NULL;\n+\t  && name->type != DEMANGLE_COMPONENT_UNNAMED_TYPE)\n+\t{\n+\t  if (!top_level\n+\t      && d_peek_char (di) != 0 /* Not end of string.  */\n+\t      && d_peek_char (di) != 'E' /* Not end of nested encoding.  */\n+\t      && d_peek_char (di) != '_') /* Not discriminator.  */\n+\t    {\n+\t      struct demangle_component *args;\n+\n+\t      args = d_bare_function_type (di, has_return_type (name));\n+\t      name = d_make_comp (di, DEMANGLE_COMPONENT_TYPED_NAME,\n+\t\t\t\t  name, args);\n+\t    }\n+\n+\t  /* Read and ignore an optional discriminator.  */\n+\t  if (! d_discriminator (di))\n+\t    return NULL;\n+\t}\n \n       if (num >= 0)\n \tname = d_make_default_arg (di, num, name);"}, {"sha": "c1a9a73f4df9d8acc3c1110363455d8eadacf8dd", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa0cdfb651f59951d10331b782c422baad93d3e4/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa0cdfb651f59951d10331b782c422baad93d3e4/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=fa0cdfb651f59951d10331b782c422baad93d3e4", "patch": "@@ -4736,3 +4736,17 @@ __thunk_16a_$_1x\n __thunk_4294967297__$_1x\n __thunk_4294967297__$_1x\n #\n+# demangler/82195 members of lambdas\n+--no-params\n+_ZZZ3FoovENKUlT_E_clIiEEfS_EN5Local2fnEv\n+Foo()::float {lambda(auto:1)#1}::operator()<int>(int) const::Local::fn()\n+Foo()::float {lambda(auto:1)#1}::operator()<int>(int) const::Local::fn\n+--no-params\n+_Z7CaptureIZZ3FoovENKUlT_E_clIiEEvS0_EUlvE_EvOS0_\n+void Capture<Foo()::void {lambda(auto:1)#1}::operator()<int>(int) const::{lambda()#1}>(Foo()::void {lambda(auto:1)#1}::operator()<int>(int) const::{lambda()#1}&&)\n+Capture<Foo()::void {lambda(auto:1)#1}::operator()<int>(int) const::{lambda()#1}>\n+--no-params\n+_Z4FrobIZZ3FoovENKUlT_E_clIiEEvS0_EUlvE_Evv\n+void Frob<Foo()::void {lambda(auto:1)#1}::operator()<int>(int) const::{lambda()#1}>()\n+Frob<Foo()::void {lambda(auto:1)#1}::operator()<int>(int) const::{lambda()#1}>\n+#"}]}