{"sha": "86bf2d46b6350e9af1d3a2e6ee75c1080d26b1c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZiZjJkNDZiNjM1MGU5YWYxZDNhMmU2ZWU3NWMxMDgwZDI2YjFjNQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-09-05T14:13:28Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-09-05T14:13:28Z"}, "message": "Eliminate the checked cast from get_call_reg_set_usage\n\ngcc/ChangeLog\n2014-09-05  David Malcolm  <dmalcolm@redhat.com>\n\n\t* caller-save.c (setup_save_areas): Strengthen local \"insn\" from\n\trtx to rtx_insn *.\n\t* final.c (get_call_reg_set_usage): Likewise for first param,\n\teliminating a checked cast.\n\t* regs.h (get_call_reg_set_usage): Likewise for first param.\n\t* resource.c (mark_set_resources): Introduce local rtx_call_insn *\n\t\"call_insn\" for the case of a MARK_SRC_DEST_CALL via a checked\n\tcast, replacing references to \"x\" with \"call_insn\" where\n\tappropriate.\n\t(mark_target_live_regs): Strengthen local \"real_insn\" from rtx to\n\trtx_insn *, adding a checked cast.\n\nFrom-SVN: r214962", "tree": {"sha": "7b7352545d44596f0dda741d3a58b1f06d4f608c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b7352545d44596f0dda741d3a58b1f06d4f608c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86bf2d46b6350e9af1d3a2e6ee75c1080d26b1c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86bf2d46b6350e9af1d3a2e6ee75c1080d26b1c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86bf2d46b6350e9af1d3a2e6ee75c1080d26b1c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86bf2d46b6350e9af1d3a2e6ee75c1080d26b1c5/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7fa55ff675da902516b0e0624e8436b823122963", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fa55ff675da902516b0e0624e8436b823122963", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fa55ff675da902516b0e0624e8436b823122963"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "6ca2c64d23520eb316fd5fe1b0b9e8adb3c6b785", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86bf2d46b6350e9af1d3a2e6ee75c1080d26b1c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86bf2d46b6350e9af1d3a2e6ee75c1080d26b1c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=86bf2d46b6350e9af1d3a2e6ee75c1080d26b1c5", "patch": "@@ -1,3 +1,17 @@\n+2014-09-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* caller-save.c (setup_save_areas): Strengthen local \"insn\" from\n+\trtx to rtx_insn *.\n+\t* final.c (get_call_reg_set_usage): Likewise for first param,\n+\teliminating a checked cast.\n+\t* regs.h (get_call_reg_set_usage): Likewise for first param.\n+\t* resource.c (mark_set_resources): Introduce local rtx_call_insn *\n+\t\"call_insn\" for the case of a MARK_SRC_DEST_CALL via a checked\n+\tcast, replacing references to \"x\" with \"call_insn\" where\n+\tappropriate.\n+\t(mark_target_live_regs): Strengthen local \"real_insn\" from rtx to\n+\trtx_insn *, adding a checked cast.\n+\n 2014-09-05  David Malcolm  <dmalcolm@redhat.com>\n \n \t* output.h (final_scan_insn): Strengthen first param from rtx to"}, {"sha": "a0c402ef22869239443178f501eaf5ae4f6a9c1c", "filename": "gcc/caller-save.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86bf2d46b6350e9af1d3a2e6ee75c1080d26b1c5/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86bf2d46b6350e9af1d3a2e6ee75c1080d26b1c5/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=86bf2d46b6350e9af1d3a2e6ee75c1080d26b1c5", "patch": "@@ -418,7 +418,7 @@ setup_save_areas (void)\n   int i, j, k, freq;\n   HARD_REG_SET hard_regs_used;\n   struct saved_hard_reg *saved_reg;\n-  rtx insn;\n+  rtx_insn *insn;\n   struct insn_chain *chain, *next;\n   unsigned int regno;\n   HARD_REG_SET hard_regs_to_save, used_regs, this_insn_sets;"}, {"sha": "d9a887f965cea29c7ae7ef7e5068f1df53b207da", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86bf2d46b6350e9af1d3a2e6ee75c1080d26b1c5/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86bf2d46b6350e9af1d3a2e6ee75c1080d26b1c5/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=86bf2d46b6350e9af1d3a2e6ee75c1080d26b1c5", "patch": "@@ -4879,10 +4879,9 @@ get_call_cgraph_rtl_info (rtx_insn *insn)\n    in REG_SET.  Return DEFAULT_SET in REG_SET if not found.  */\n \n bool\n-get_call_reg_set_usage (rtx uncast_insn, HARD_REG_SET *reg_set,\n+get_call_reg_set_usage (rtx_insn *insn, HARD_REG_SET *reg_set,\n \t\t\tHARD_REG_SET default_set)\n {\n-  rtx_insn *insn = safe_as_a <rtx_insn *> (uncast_insn);\n   if (flag_use_caller_save)\n     {\n       struct cgraph_rtl_info *node = get_call_cgraph_rtl_info (insn);"}, {"sha": "17a7e58a2d8b186f31ccb8b472148da805c49c16", "filename": "gcc/regs.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86bf2d46b6350e9af1d3a2e6ee75c1080d26b1c5/gcc%2Fregs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86bf2d46b6350e9af1d3a2e6ee75c1080d26b1c5/gcc%2Fregs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregs.h?ref=86bf2d46b6350e9af1d3a2e6ee75c1080d26b1c5", "patch": "@@ -412,7 +412,7 @@ range_in_hard_reg_set_p (const HARD_REG_SET set, unsigned regno, int nregs)\n }\n \n /* Get registers used by given function call instruction.  */\n-extern bool get_call_reg_set_usage (rtx insn, HARD_REG_SET *reg_set,\n+extern bool get_call_reg_set_usage (rtx_insn *insn, HARD_REG_SET *reg_set,\n \t\t\t\t    HARD_REG_SET default_set);\n \n #endif /* GCC_REGS_H */"}, {"sha": "ff9b87890dee10acd374d948ed1eaa25bfd9801b", "filename": "gcc/resource.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86bf2d46b6350e9af1d3a2e6ee75c1080d26b1c5/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86bf2d46b6350e9af1d3a2e6ee75c1080d26b1c5/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=86bf2d46b6350e9af1d3a2e6ee75c1080d26b1c5", "patch": "@@ -659,23 +659,24 @@ mark_set_resources (rtx x, struct resources *res, int in_dest,\n \n       if (mark_type == MARK_SRC_DEST_CALL)\n \t{\n+\t  rtx_call_insn *call_insn = as_a <rtx_call_insn *> (x);\n \t  rtx link;\n \t  HARD_REG_SET regs;\n \n \t  res->cc = res->memory = 1;\n \n-\t  get_call_reg_set_usage (x, &regs, regs_invalidated_by_call);\n+\t  get_call_reg_set_usage (call_insn, &regs, regs_invalidated_by_call);\n \t  IOR_HARD_REG_SET (res->regs, regs);\n \n-\t  for (link = CALL_INSN_FUNCTION_USAGE (x);\n+\t  for (link = CALL_INSN_FUNCTION_USAGE (call_insn);\n \t       link; link = XEXP (link, 1))\n \t    if (GET_CODE (XEXP (link, 0)) == CLOBBER)\n \t      mark_set_resources (SET_DEST (XEXP (link, 0)), res, 1,\n \t\t\t\t  MARK_SRC_DEST);\n \n \t  /* Check for a REG_SETJMP.  If it exists, then we must\n \t     assume that this call can clobber any register.  */\n-\t  if (find_reg_note (x, REG_SETJMP, NULL))\n+\t  if (find_reg_note (call_insn, REG_SETJMP, NULL))\n \t    SET_HARD_REG_SET (res->regs);\n \t}\n \n@@ -995,7 +996,7 @@ mark_target_live_regs (rtx_insn *insns, rtx target_maybe_return, struct resource\n \t   insn = next_insn_no_annul (insn))\n \t{\n \t  rtx link;\n-\t  rtx real_insn = insn;\n+\t  rtx_insn *real_insn = insn;\n \t  enum rtx_code code = GET_CODE (insn);\n \n \t  if (DEBUG_INSN_P (insn))\n@@ -1013,7 +1014,7 @@ mark_target_live_regs (rtx_insn *insns, rtx target_maybe_return, struct resource\n \t  if (code == INSN\n \t      && GET_CODE (PATTERN (insn)) == USE\n \t      && INSN_P (XEXP (PATTERN (insn), 0)))\n-\t    real_insn = XEXP (PATTERN (insn), 0);\n+\t    real_insn = as_a <rtx_insn *> (XEXP (PATTERN (insn), 0));\n \n \t  if (CALL_P (real_insn))\n \t    {"}]}