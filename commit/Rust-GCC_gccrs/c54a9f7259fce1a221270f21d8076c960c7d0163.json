{"sha": "c54a9f7259fce1a221270f21d8076c960c7d0163", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU0YTlmNzI1OWZjZTFhMjIxMjcwZjIxZDgwNzZjOTYwYzdkMDE2Mw==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-02-23T03:17:40Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-04-25T01:18:08Z"}, "message": "Add folding and remove expanders for x86 *pcmp{et,gt}* builtins [PR target/98911]\n\ngcc/ChangeLog:\n\n\tPR target/98911\n\t* config/i386/i386-builtin.def (BDESC): Change the icode of\n\tthe following builtins to CODE_FOR_nothing.\n\t* config/i386/i386.c (ix86_gimple_fold_builtin): Fold\n\tIX86_BUILTIN_PCMPEQB128, IX86_BUILTIN_PCMPEQW128,\n\tIX86_BUILTIN_PCMPEQD128, IX86_BUILTIN_PCMPEQQ,\n\tIX86_BUILTIN_PCMPEQB256, IX86_BUILTIN_PCMPEQW256,\n\tIX86_BUILTIN_PCMPEQD256, IX86_BUILTIN_PCMPEQQ256,\n\tIX86_BUILTIN_PCMPGTB128, IX86_BUILTIN_PCMPGTW128,\n\tIX86_BUILTIN_PCMPGTD128, IX86_BUILTIN_PCMPGTQ,\n\tIX86_BUILTIN_PCMPGTB256, IX86_BUILTIN_PCMPGTW256,\n\tIX86_BUILTIN_PCMPGTD256, IX86_BUILTIN_PCMPGTQ256.\n\t* config/i386/sse.md (avx2_eq<mode>3): Deleted.\n\t(sse2_eq<mode>3): Ditto.\n\t(sse4_1_eqv2di3): Ditto.\n\t(sse2_gt<mode>3): Rename to ..\n\t(*sse2_gt<mode>3): .. this.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/98911\n\t* gcc.target/i386/pr98911.c: New test.\n\t* gcc.target/i386/funcspec-8.c: Replace __builtin_ia32_pcmpgtq\n\twith __builtin_ia32_pcmpistrm128 since it has been folded.", "tree": {"sha": "2c3a1f7c893804506acadc66255dcc8e25409381", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c3a1f7c893804506acadc66255dcc8e25409381"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c54a9f7259fce1a221270f21d8076c960c7d0163", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c54a9f7259fce1a221270f21d8076c960c7d0163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c54a9f7259fce1a221270f21d8076c960c7d0163", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c54a9f7259fce1a221270f21d8076c960c7d0163/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "502ef97c4f442777e5f61c506d17f8776a69b207", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/502ef97c4f442777e5f61c506d17f8776a69b207", "html_url": "https://github.com/Rust-GCC/gccrs/commit/502ef97c4f442777e5f61c506d17f8776a69b207"}], "stats": {"total": 235, "additions": 186, "deletions": 49}, "files": [{"sha": "4dbd4f236473e137f2cc2cf30f6542c58bd7b8e2", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54a9f7259fce1a221270f21d8076c960c7d0163/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54a9f7259fce1a221270f21d8076c960c7d0163/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=c54a9f7259fce1a221270f21d8076c960c7d0163", "patch": "@@ -773,12 +773,12 @@ BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_xorv2di3, \"__builtin_ia32_pxor128\", IX8\n BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_sse2_uavgv16qi3, \"__builtin_ia32_pavgb128\", IX86_BUILTIN_PAVGB128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI)\n BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_sse2_uavgv8hi3, \"__builtin_ia32_pavgw128\", IX86_BUILTIN_PAVGW128, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI)\n \n-BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_sse2_eqv16qi3, \"__builtin_ia32_pcmpeqb128\", IX86_BUILTIN_PCMPEQB128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI)\n-BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_sse2_eqv8hi3, \"__builtin_ia32_pcmpeqw128\", IX86_BUILTIN_PCMPEQW128, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI)\n-BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_sse2_eqv4si3, \"__builtin_ia32_pcmpeqd128\", IX86_BUILTIN_PCMPEQD128, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI )\n-BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_sse2_gtv16qi3, \"__builtin_ia32_pcmpgtb128\", IX86_BUILTIN_PCMPGTB128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI)\n-BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_sse2_gtv8hi3, \"__builtin_ia32_pcmpgtw128\", IX86_BUILTIN_PCMPGTW128, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI)\n-BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_sse2_gtv4si3, \"__builtin_ia32_pcmpgtd128\", IX86_BUILTIN_PCMPGTD128, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI )\n+BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_nothing, \"__builtin_ia32_pcmpeqb128\", IX86_BUILTIN_PCMPEQB128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI)\n+BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_nothing, \"__builtin_ia32_pcmpeqw128\", IX86_BUILTIN_PCMPEQW128, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI)\n+BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_nothing, \"__builtin_ia32_pcmpeqd128\", IX86_BUILTIN_PCMPEQD128, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI )\n+BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_nothing, \"__builtin_ia32_pcmpgtb128\", IX86_BUILTIN_PCMPGTB128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI)\n+BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_nothing, \"__builtin_ia32_pcmpgtw128\", IX86_BUILTIN_PCMPGTW128, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI)\n+BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_nothing, \"__builtin_ia32_pcmpgtd128\", IX86_BUILTIN_PCMPGTD128, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI )\n \n BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_umaxv16qi3, \"__builtin_ia32_pmaxub128\", IX86_BUILTIN_PMAXUB128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI)\n BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_smaxv8hi3, \"__builtin_ia32_pmaxsw128\", IX86_BUILTIN_PMAXSW128, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI)\n@@ -919,7 +919,7 @@ BDESC (OPTION_MASK_ISA_SSE4_1, 0, CODE_FOR_sse4_1_zero_extendv2siv2di2, \"__built\n BDESC (OPTION_MASK_ISA_SSE4_1, 0, CODE_FOR_sse4_1_phminposuw, \"__builtin_ia32_phminposuw128\", IX86_BUILTIN_PHMINPOSUW128, UNKNOWN, (int) V8HI_FTYPE_V8HI)\n \n BDESC (OPTION_MASK_ISA_SSE4_1, 0, CODE_FOR_sse4_1_packusdw, \"__builtin_ia32_packusdw128\", IX86_BUILTIN_PACKUSDW128, UNKNOWN, (int) V8HI_FTYPE_V4SI_V4SI)\n-BDESC (OPTION_MASK_ISA_SSE4_1, 0, CODE_FOR_sse4_1_eqv2di3, \"__builtin_ia32_pcmpeqq\", IX86_BUILTIN_PCMPEQQ, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI)\n+BDESC (OPTION_MASK_ISA_SSE4_1, 0, CODE_FOR_nothing, \"__builtin_ia32_pcmpeqq\", IX86_BUILTIN_PCMPEQQ, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI)\n BDESC (OPTION_MASK_ISA_SSE4_1, 0, CODE_FOR_smaxv16qi3, \"__builtin_ia32_pmaxsb128\", IX86_BUILTIN_PMAXSB128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI)\n BDESC (OPTION_MASK_ISA_SSE4_1, 0, CODE_FOR_smaxv4si3, \"__builtin_ia32_pmaxsd128\", IX86_BUILTIN_PMAXSD128, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI)\n BDESC (OPTION_MASK_ISA_SSE4_1, 0, CODE_FOR_umaxv4si3, \"__builtin_ia32_pmaxud128\", IX86_BUILTIN_PMAXUD128, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI)\n@@ -962,7 +962,7 @@ BDESC (OPTION_MASK_ISA_SSE4_1, 0, CODE_FOR_sse4_1_ptestv2di, \"__builtin_ia32_pte\n BDESC (OPTION_MASK_ISA_SSE4_1, 0, CODE_FOR_sse4_1_ptestv2di, \"__builtin_ia32_ptestnzc128\", IX86_BUILTIN_PTESTNZC, GTU, (int) INT_FTYPE_V2DI_V2DI_PTEST)\n \n /* SSE4.2 */\n-BDESC (OPTION_MASK_ISA_SSE4_2, 0, CODE_FOR_sse4_2_gtv2di3, \"__builtin_ia32_pcmpgtq\", IX86_BUILTIN_PCMPGTQ, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI)\n+BDESC (OPTION_MASK_ISA_SSE4_2, 0, CODE_FOR_nothing, \"__builtin_ia32_pcmpgtq\", IX86_BUILTIN_PCMPGTQ, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI)\n BDESC (OPTION_MASK_ISA_SSE4_2 | OPTION_MASK_ISA_CRC32, 0, CODE_FOR_sse4_2_crc32qi, \"__builtin_ia32_crc32qi\", IX86_BUILTIN_CRC32QI, UNKNOWN, (int) UINT_FTYPE_UINT_UCHAR)\n BDESC (OPTION_MASK_ISA_SSE4_2 | OPTION_MASK_ISA_CRC32, 0, CODE_FOR_sse4_2_crc32hi, \"__builtin_ia32_crc32hi\", IX86_BUILTIN_CRC32HI, UNKNOWN, (int) UINT_FTYPE_UINT_USHORT)\n BDESC (OPTION_MASK_ISA_SSE4_2 | OPTION_MASK_ISA_CRC32, 0, CODE_FOR_sse4_2_crc32si, \"__builtin_ia32_crc32si\", IX86_BUILTIN_CRC32SI, UNKNOWN, (int) UINT_FTYPE_UINT_UINT)\n@@ -1149,14 +1149,14 @@ BDESC (OPTION_MASK_ISA_AVX2, 0, CODE_FOR_avx2_uavgv32qi3, \"__builtin_ia32_pavgb2\n BDESC (OPTION_MASK_ISA_AVX2, 0, CODE_FOR_avx2_uavgv16hi3, \"__builtin_ia32_pavgw256\",  IX86_BUILTIN_PAVGW256, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI)\n BDESC (OPTION_MASK_ISA_AVX2, 0, CODE_FOR_avx2_pblendvb, \"__builtin_ia32_pblendvb256\", IX86_BUILTIN_PBLENDVB256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_V32QI)\n BDESC (OPTION_MASK_ISA_AVX2, 0, CODE_FOR_avx2_pblendw, \"__builtin_ia32_pblendw256\", IX86_BUILTIN_PBLENDVW256, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_INT)\n-BDESC (OPTION_MASK_ISA_AVX2, 0, CODE_FOR_avx2_eqv32qi3, \"__builtin_ia32_pcmpeqb256\", IX86_BUILTIN_PCMPEQB256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI)\n-BDESC (OPTION_MASK_ISA_AVX2, 0, CODE_FOR_avx2_eqv16hi3, \"__builtin_ia32_pcmpeqw256\", IX86_BUILTIN_PCMPEQW256, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI)\n-BDESC (OPTION_MASK_ISA_AVX2, 0, CODE_FOR_avx2_eqv8si3, \"__builtin_ia32_pcmpeqd256\", IX86_BUILTIN_PCMPEQD256, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI )\n-BDESC (OPTION_MASK_ISA_AVX2, 0, CODE_FOR_avx2_eqv4di3, \"__builtin_ia32_pcmpeqq256\", IX86_BUILTIN_PCMPEQQ256, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI )\n-BDESC (OPTION_MASK_ISA_AVX2, 0, CODE_FOR_avx2_gtv32qi3, \"__builtin_ia32_pcmpgtb256\", IX86_BUILTIN_PCMPGTB256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI)\n-BDESC (OPTION_MASK_ISA_AVX2, 0, CODE_FOR_avx2_gtv16hi3, \"__builtin_ia32_pcmpgtw256\", IX86_BUILTIN_PCMPGTW256, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI)\n-BDESC (OPTION_MASK_ISA_AVX2, 0, CODE_FOR_avx2_gtv8si3, \"__builtin_ia32_pcmpgtd256\", IX86_BUILTIN_PCMPGTD256, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI )\n-BDESC (OPTION_MASK_ISA_AVX2, 0, CODE_FOR_avx2_gtv4di3, \"__builtin_ia32_pcmpgtq256\", IX86_BUILTIN_PCMPGTQ256, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI )\n+BDESC (OPTION_MASK_ISA_AVX2, 0, CODE_FOR_nothing, \"__builtin_ia32_pcmpeqb256\", IX86_BUILTIN_PCMPEQB256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI)\n+BDESC (OPTION_MASK_ISA_AVX2, 0, CODE_FOR_nothing, \"__builtin_ia32_pcmpeqw256\", IX86_BUILTIN_PCMPEQW256, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI)\n+BDESC (OPTION_MASK_ISA_AVX2, 0, CODE_FOR_nothing, \"__builtin_ia32_pcmpeqd256\", IX86_BUILTIN_PCMPEQD256, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI )\n+BDESC (OPTION_MASK_ISA_AVX2, 0, CODE_FOR_nothing, \"__builtin_ia32_pcmpeqq256\", IX86_BUILTIN_PCMPEQQ256, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI )\n+BDESC (OPTION_MASK_ISA_AVX2, 0, CODE_FOR_nothing, \"__builtin_ia32_pcmpgtb256\", IX86_BUILTIN_PCMPGTB256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI)\n+BDESC (OPTION_MASK_ISA_AVX2, 0, CODE_FOR_nothing, \"__builtin_ia32_pcmpgtw256\", IX86_BUILTIN_PCMPGTW256, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI)\n+BDESC (OPTION_MASK_ISA_AVX2, 0, CODE_FOR_nothing, \"__builtin_ia32_pcmpgtd256\", IX86_BUILTIN_PCMPGTD256, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI )\n+BDESC (OPTION_MASK_ISA_AVX2, 0, CODE_FOR_nothing, \"__builtin_ia32_pcmpgtq256\", IX86_BUILTIN_PCMPGTQ256, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI )\n BDESC (OPTION_MASK_ISA_AVX2, 0, CODE_FOR_avx2_phaddwv16hi3, \"__builtin_ia32_phaddw256\", IX86_BUILTIN_PHADDW256, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI)\n BDESC (OPTION_MASK_ISA_AVX2, 0, CODE_FOR_avx2_phadddv8si3, \"__builtin_ia32_phaddd256\", IX86_BUILTIN_PHADDD256, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI)\n BDESC (OPTION_MASK_ISA_AVX2, 0, CODE_FOR_avx2_phaddswv16hi3, \"__builtin_ia32_phaddsw256\", IX86_BUILTIN_PHADDSW256, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI)"}, {"sha": "adcef1e98bf55daa12ad9c4bc79faaa08df058a6", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54a9f7259fce1a221270f21d8076c960c7d0163/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54a9f7259fce1a221270f21d8076c960c7d0163/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c54a9f7259fce1a221270f21d8076c960c7d0163", "patch": "@@ -67,6 +67,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"pass_manager.h\"\n #include \"target-globals.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimple-fold.h\"\n #include \"tree-vectorizer.h\"\n #include \"shrink-wrap.h\"\n #include \"builtins.h\"\n@@ -17865,6 +17866,7 @@ ix86_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n   tree decl = NULL_TREE;\n   tree arg0, arg1, arg2;\n   enum rtx_code rcode;\n+  enum tree_code tcode;\n   unsigned HOST_WIDE_INT count;\n   bool is_vshift;\n \n@@ -17946,6 +17948,48 @@ ix86_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n \t}\n       break;\n \n+    case IX86_BUILTIN_PCMPEQB128:\n+    case IX86_BUILTIN_PCMPEQW128:\n+    case IX86_BUILTIN_PCMPEQD128:\n+    case IX86_BUILTIN_PCMPEQQ:\n+    case IX86_BUILTIN_PCMPEQB256:\n+    case IX86_BUILTIN_PCMPEQW256:\n+    case IX86_BUILTIN_PCMPEQD256:\n+    case IX86_BUILTIN_PCMPEQQ256:\n+      tcode = EQ_EXPR;\n+      goto do_cmp;\n+\n+    case IX86_BUILTIN_PCMPGTB128:\n+    case IX86_BUILTIN_PCMPGTW128:\n+    case IX86_BUILTIN_PCMPGTD128:\n+    case IX86_BUILTIN_PCMPGTQ:\n+    case IX86_BUILTIN_PCMPGTB256:\n+    case IX86_BUILTIN_PCMPGTW256:\n+    case IX86_BUILTIN_PCMPGTD256:\n+    case IX86_BUILTIN_PCMPGTQ256:\n+      tcode = GT_EXPR;\n+\n+    do_cmp:\n+      gcc_assert (n_args == 2);\n+      arg0 = gimple_call_arg (stmt, 0);\n+      arg1 = gimple_call_arg (stmt, 1);\n+      {\n+\tlocation_t loc = gimple_location (stmt);\n+\ttree type = TREE_TYPE (arg0);\n+\ttree zero_vec = build_zero_cst (type);\n+\ttree minus_one_vec = build_minus_one_cst (type);\n+\ttree cmp_type = truth_type_for (type);\n+\tgimple_seq stmts = NULL;\n+\ttree cmp = gimple_build (&stmts, tcode, cmp_type, arg0, arg1);\n+\tgsi_insert_before (gsi, stmts, GSI_SAME_STMT);\n+\tgimple *g = gimple_build_assign (gimple_call_lhs (stmt),\n+\t\t\t\t\t VEC_COND_EXPR, cmp,\n+\t\t\t\t\t minus_one_vec, zero_vec);\n+\tgimple_set_location (g, loc);\n+\tgsi_replace (gsi, g, false);\n+      }\n+      return true;\n+\n     case IX86_BUILTIN_PSLLD:\n     case IX86_BUILTIN_PSLLD128:\n     case IX86_BUILTIN_PSLLD128_MASK:"}, {"sha": "897cf3eaea955bce8c0937496391e80dde982a3a", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54a9f7259fce1a221270f21d8076c960c7d0163/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54a9f7259fce1a221270f21d8076c960c7d0163/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=c54a9f7259fce1a221270f21d8076c960c7d0163", "patch": "@@ -12875,14 +12875,6 @@\n ;;\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n-(define_expand \"avx2_eq<mode>3\"\n-  [(set (match_operand:VI_256 0 \"register_operand\")\n-\t(eq:VI_256\n-\t  (match_operand:VI_256 1 \"nonimmediate_operand\")\n-\t  (match_operand:VI_256 2 \"nonimmediate_operand\")))]\n-  \"TARGET_AVX2\"\n-  \"ix86_fixup_binary_operands_no_copy (EQ, <MODE>mode, operands);\")\n-\n (define_insn \"*avx2_eq<mode>3\"\n   [(set (match_operand:VI_256 0 \"register_operand\" \"=x\")\n \t(eq:VI_256\n@@ -13058,22 +13050,6 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_expand \"sse2_eq<mode>3\"\n-  [(set (match_operand:VI124_128 0 \"register_operand\")\n-\t(eq:VI124_128\n-\t  (match_operand:VI124_128 1 \"vector_operand\")\n-\t  (match_operand:VI124_128 2 \"vector_operand\")))]\n-  \"TARGET_SSE2 && !TARGET_XOP \"\n-  \"ix86_fixup_binary_operands_no_copy (EQ, <MODE>mode, operands);\")\n-\n-(define_expand \"sse4_1_eqv2di3\"\n-  [(set (match_operand:V2DI 0 \"register_operand\")\n-\t(eq:V2DI\n-\t  (match_operand:V2DI 1 \"vector_operand\")\n-\t  (match_operand:V2DI 2 \"vector_operand\")))]\n-  \"TARGET_SSE4_1\"\n-  \"ix86_fixup_binary_operands_no_copy (EQ, V2DImode, operands);\")\n-\n (define_insn \"sse4_2_gtv2di3\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=Yr,*x,x\")\n \t(gt:V2DI\n@@ -13144,7 +13120,7 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"sse2_gt<mode>3\"\n+(define_insn \"*sse2_gt<mode>3\"\n   [(set (match_operand:VI124_128 0 \"register_operand\" \"=x,x\")\n \t(gt:VI124_128\n \t  (match_operand:VI124_128 1 \"register_operand\" \"0,x\")"}, {"sha": "0a6c709003a02e31f0285fde32b06b579fad1956", "filename": "gcc/testsuite/gcc.target/i386/funcspec-8.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54a9f7259fce1a221270f21d8076c960c7d0163/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54a9f7259fce1a221270f21d8076c960c7d0163/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-8.c?ref=c54a9f7259fce1a221270f21d8076c960c7d0163", "patch": "@@ -8,6 +8,7 @@ typedef float     __m128  __attribute__ ((__vector_size__ (16), __may_alias__));\n typedef double    __m128d __attribute__ ((__vector_size__ (16), __may_alias__));\n typedef int\t  __m128w __attribute__ ((__vector_size__ (16), __may_alias__));\n typedef long long __m128i __attribute__ ((__vector_size__ (16), __may_alias__));\n+typedef char __m128qi __attribute__ ((__vector_size__ (16), __may_alias__));\n \n #ifdef __SSE3__\n #error \"-msse3 should not be set for this test\"\n@@ -70,19 +71,19 @@ generic_blendvpd  (__m128d a, __m128d b, __m128d c)\n #error \"-msse4.2 should not be set for this test\"\n #endif\n \n-__m128i sse4_2_pcmpgtq (__m128i a, __m128i b) __attribute__((__target__(\"sse4.2\")));\n-__m128i generic_pcmpgtq (__m128i ab, __m128i b);\n+__m128qi sse4_2_cmpistrm (__m128qi a, __m128qi b) __attribute__((__target__(\"sse4.2\")));\n+__m128qi generic_cmpistrm (__m128qi a, __m128qi b);\n \n-__m128i\n-sse4_2_pcmpgtq (__m128i a, __m128i b)\n+__m128qi\n+sse4_2_cmpistrm (__m128qi a, __m128qi b)\n {\n-  return __builtin_ia32_pcmpgtq (a, b);\n+  return  __builtin_ia32_pcmpistrm128 (a, b, 0);\n }\n \n-__m128i\n-generic_pcmpgtq (__m128i a, __m128i b)\n+__m128qi\n+generic_comistrm (__m128qi a, __m128qi b)\n {\n-  return __builtin_ia32_pcmpgtq (a, b);\t\t\t/* { dg-error \"needs isa option\" } */\n+  return  __builtin_ia32_pcmpistrm128 (a, b, 0);\t/* { dg-error \"needs isa option\" } */\n }\n \n #ifdef __SSE4A__"}, {"sha": "f08cea04858f56d18e162c7460034116eec56b43", "filename": "gcc/testsuite/gcc.target/i386/pr98911.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54a9f7259fce1a221270f21d8076c960c7d0163/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98911.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54a9f7259fce1a221270f21d8076c960c7d0163/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98911.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98911.c?ref=c54a9f7259fce1a221270f21d8076c960c7d0163", "patch": "@@ -0,0 +1,116 @@\n+/* PR target/98911  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mavx2\" } */\n+/* { dg-final { scan-assembler-times \"pcmpeqb\" 2 } } */\n+/* { dg-final { scan-assembler-times \"pcmpeqw\" 2 } } */\n+/* { dg-final { scan-assembler-times \"pcmpeqd\" 2 } } */\n+/* { dg-final { scan-assembler-times \"pcmpeqq\" 2 } } */\n+/* { dg-final { scan-assembler-times \"pcmpgtb\" 2 } } */\n+/* { dg-final { scan-assembler-times \"pcmpgtw\" 2 } } */\n+/* { dg-final { scan-assembler-times \"pcmpgtd\" 2 } } */\n+/* { dg-final { scan-assembler-times \"pcmpgtq\" 2 } } */\n+\n+typedef char v16qi __attribute__ ((vector_size (16)));\n+typedef char v32qi __attribute__ ((vector_size (32)));\n+typedef short v8hi __attribute__ ((vector_size (16)));\n+typedef short v16hi __attribute__ ((vector_size (32)));\n+typedef int v4si __attribute__ ((vector_size (16)));\n+typedef int v8si __attribute__ ((vector_size (32)));\n+typedef long long v2di __attribute__ ((vector_size (16)));\n+typedef long long v4di __attribute__ ((vector_size (32)));\n+\n+v16qi\n+f1 (v16qi a, v16qi b)\n+{\n+  return __builtin_ia32_pcmpeqb128 (a, b);\n+}\n+\n+v8hi\n+f2 (v8hi a, v8hi b)\n+{\n+  return __builtin_ia32_pcmpeqw128 (a, b);\n+}\n+\n+v4si\n+f3 (v4si a, v4si b)\n+{\n+  return __builtin_ia32_pcmpeqd128 (a, b);\n+}\n+\n+v2di\n+f4 (v2di a, v2di b)\n+{\n+  return __builtin_ia32_pcmpeqq (a, b);\n+}\n+\n+v16qi\n+f5 (v16qi a, v16qi b)\n+{\n+  return __builtin_ia32_pcmpgtb128 (a, b);\n+}\n+\n+v8hi\n+f6 (v8hi a, v8hi b)\n+{\n+  return __builtin_ia32_pcmpgtw128 (a, b);\n+}\n+\n+v4si\n+f7 (v4si a, v4si b)\n+{\n+  return __builtin_ia32_pcmpgtd128 (a, b);\n+}\n+\n+v2di\n+f8 (v2di a, v2di b)\n+{\n+  return __builtin_ia32_pcmpgtq (a, b);\n+}\n+\n+v32qi\n+f9 (v32qi a, v32qi b)\n+{\n+  return __builtin_ia32_pcmpeqb256 (a, b);\n+}\n+\n+v16hi\n+f10 (v16hi a, v16hi b)\n+{\n+  return __builtin_ia32_pcmpeqw256 (a, b);\n+}\n+\n+v8si\n+f11 (v8si a, v8si b)\n+{\n+  return __builtin_ia32_pcmpeqd256 (a, b);\n+}\n+\n+v4di\n+f12 (v4di a, v4di b)\n+{\n+  return __builtin_ia32_pcmpeqq256 (a, b);\n+}\n+\n+v32qi\n+f13 (v32qi a, v32qi b)\n+{\n+  return __builtin_ia32_pcmpgtb256 (a, b);\n+}\n+\n+v16hi\n+f14 (v16hi a, v16hi b)\n+{\n+  return __builtin_ia32_pcmpgtw256 (a, b);\n+}\n+\n+v8si\n+f15 (v8si a, v8si b)\n+{\n+  return __builtin_ia32_pcmpgtd256 (a, b);\n+}\n+\n+v4di\n+f16 (v4di a, v4di b)\n+{\n+  return __builtin_ia32_pcmpgtq256 (a, b);\n+}"}]}