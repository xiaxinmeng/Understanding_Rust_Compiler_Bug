{"sha": "04e4997a567142f56dc83eba67b9590c0431d7da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRlNDk5N2E1NjcxNDJmNTZkYzgzZWJhNjdiOTU5MGMwNDMxZDdkYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-12-30T13:23:40Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-12-30T13:23:40Z"}, "message": "decl2.c (delete_sanity): Add location_t parameter and use it throughout.\n\n/gcc/cp\n2019-12-30  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl2.c (delete_sanity): Add location_t parameter and use\n\tit throughout.\n\t* init.c (build_vec_delete_1): Likewise.\n\t(build_delete): Likewise.\n\t(build_vec_delete): Likewise.\n\t(perform_target_ctor): Adjust call.\n\t(perform_member_init): Likewise.\n\t(build_vec_init): Likewise.\n\t* decl.c (cxx_maybe_build_cleanup): Likewise.\n\t* pt.c (tsubst_copy_and_build): Likewise.\n\t* parser.c (cp_parser_delete_expression): Likewise, pass the\n\tcombined_loc.\n\t* cp-tree.h: Update declarations.\n\n/libcc1\n2019-12-30  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* libcp1plugin.cc (plugin_build_unary_expr): Update delete_sanity\n\tcall.\n\n/gcc/testsuite\n2019-12-30  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/init/delete1.C: Check locations too.\n\t* g++.dg/ipa/pr85607.C: Likewise.\n\t* g++.dg/warn/Wdelete-incomplete-1.C: Likewise.\n\t* g++.dg/warn/delete-non-virtual-dtor.C: Likewise.\n\t* g++.dg/warn/incomplete1.C: Likewise.\n\nFrom-SVN: r279768", "tree": {"sha": "4e9336e6cb50d2d78040a5f54b7d2abb69f7a81a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e9336e6cb50d2d78040a5f54b7d2abb69f7a81a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04e4997a567142f56dc83eba67b9590c0431d7da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04e4997a567142f56dc83eba67b9590c0431d7da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04e4997a567142f56dc83eba67b9590c0431d7da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04e4997a567142f56dc83eba67b9590c0431d7da/comments", "author": null, "committer": null, "parents": [{"sha": "9332e5acbf0d79cda8321365a688fc22d7b5e261", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9332e5acbf0d79cda8321365a688fc22d7b5e261", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9332e5acbf0d79cda8321365a688fc22d7b5e261"}], "stats": {"total": 208, "additions": 126, "deletions": 82}, "files": [{"sha": "9c30253f09480e63cd8524679ddf58deb266900c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e4997a567142f56dc83eba67b9590c0431d7da/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e4997a567142f56dc83eba67b9590c0431d7da/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=04e4997a567142f56dc83eba67b9590c0431d7da", "patch": "@@ -1,3 +1,19 @@\n+2019-12-30  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl2.c (delete_sanity): Add location_t parameter and use\n+\tit throughout.\n+\t* init.c (build_vec_delete_1): Likewise.\n+\t(build_delete): Likewise.\n+\t(build_vec_delete): Likewise.\n+\t(perform_target_ctor): Adjust call.\n+\t(perform_member_init): Likewise.\n+\t(build_vec_init): Likewise.\n+\t* decl.c (cxx_maybe_build_cleanup): Likewise.\n+\t* pt.c (tsubst_copy_and_build): Likewise.\n+\t* parser.c (cp_parser_delete_expression): Likewise, pass the\n+\tcombined_loc.\n+\t* cp-tree.h: Update declarations.\n+\n 2019-12-29  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/88337 - Implement P1327R1: Allow dynamic_cast in constexpr."}, {"sha": "4b92829232ad8b7905acbb3355ac4419282a2d83", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e4997a567142f56dc83eba67b9590c0431d7da/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e4997a567142f56dc83eba67b9590c0431d7da/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=04e4997a567142f56dc83eba67b9590c0431d7da", "patch": "@@ -6583,7 +6583,8 @@ extern bool vague_linkage_p\t\t\t(tree);\n extern void grokclassfn\t\t\t\t(tree, tree,\n \t\t\t\t\t\t enum overload_flags);\n extern tree grok_array_decl\t\t\t(location_t, tree, tree, bool);\n-extern tree delete_sanity\t\t\t(tree, tree, bool, int, tsubst_flags_t);\n+extern tree delete_sanity\t\t\t(location_t, tree, tree, bool,\n+\t\t\t\t\t\t int, tsubst_flags_t);\n extern tree check_classfn\t\t\t(tree, tree, tree);\n extern void check_member_template\t\t(tree);\n extern tree grokfield (const cp_declarator *, cp_decl_specifier_seq *,\n@@ -6725,11 +6726,11 @@ extern tree build_new\t\t\t\t(vec<tree, va_gc> **, tree, tree,\n extern tree get_temp_regvar\t\t\t(tree, tree);\n extern tree build_vec_init\t\t\t(tree, tree, tree, bool, int,\n                                                  tsubst_flags_t);\n-extern tree build_delete\t\t\t(tree, tree,\n+extern tree build_delete\t\t\t(location_t, tree, tree,\n \t\t\t\t\t\t special_function_kind,\n \t\t\t\t\t\t int, int, tsubst_flags_t);\n extern void push_base_cleanups\t\t\t(void);\n-extern tree build_vec_delete\t\t\t(tree, tree,\n+extern tree build_vec_delete\t\t\t(location_t, tree, tree,\n \t\t\t\t\t\t special_function_kind, int,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree create_temporary_var\t\t(tree);"}, {"sha": "2760dba5be52ec9fcb5daff3cad64306283bea3a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e4997a567142f56dc83eba67b9590c0431d7da/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e4997a567142f56dc83eba67b9590c0431d7da/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=04e4997a567142f56dc83eba67b9590c0431d7da", "patch": "@@ -17310,7 +17310,7 @@ cxx_maybe_build_cleanup (tree decl, tsubst_flags_t complain)\n       else\n \taddr = build_address (decl);\n \n-      call = build_delete (TREE_TYPE (addr), addr,\n+      call = build_delete (input_location, TREE_TYPE (addr), addr,\n \t\t\t   sfk_complete_destructor, flags, 0, complain);\n       if (call == error_mark_node)\n \tcleanup = error_mark_node;"}, {"sha": "5847e6b0840dc7c3f4329d617e6203339811b9fd", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e4997a567142f56dc83eba67b9590c0431d7da/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e4997a567142f56dc83eba67b9590c0431d7da/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=04e4997a567142f56dc83eba67b9590c0431d7da", "patch": "@@ -475,8 +475,8 @@ grok_array_decl (location_t loc, tree array_expr, tree index_exp,\n    Implements ARM $5.3.4.  This is called from the parser.  */\n \n tree\n-delete_sanity (tree exp, tree size, bool doing_vec, int use_global_delete,\n-\t       tsubst_flags_t complain)\n+delete_sanity (location_t loc, tree exp, tree size, bool doing_vec,\n+\t       int use_global_delete, tsubst_flags_t complain)\n {\n   tree t, type;\n \n@@ -489,21 +489,23 @@ delete_sanity (tree exp, tree size, bool doing_vec, int use_global_delete,\n       DELETE_EXPR_USE_GLOBAL (t) = use_global_delete;\n       DELETE_EXPR_USE_VEC (t) = doing_vec;\n       TREE_SIDE_EFFECTS (t) = 1;\n+      SET_EXPR_LOCATION (t, loc);\n       return t;\n     }\n \n+  location_t exp_loc = cp_expr_loc_or_loc (exp, loc);\n+\n   /* An array can't have been allocated by new, so complain.  */\n   if (TREE_CODE (TREE_TYPE (exp)) == ARRAY_TYPE\n       && (complain & tf_warning))\n-    warning_at (cp_expr_loc_or_input_loc (exp), 0,\n-\t\t\"deleting array %q#E\", exp);\n+    warning_at (exp_loc, 0, \"deleting array %q#E\", exp);\n \n   t = build_expr_type_conversion (WANT_POINTER, exp, true);\n \n   if (t == NULL_TREE || t == error_mark_node)\n     {\n       if (complain & tf_error)\n-\terror_at (cp_expr_loc_or_input_loc (exp),\n+\terror_at (exp_loc,\n \t\t  \"type %q#T argument given to %<delete%>, expected pointer\",\n \t\t  TREE_TYPE (exp));\n       return error_mark_node;\n@@ -517,7 +519,7 @@ delete_sanity (tree exp, tree size, bool doing_vec, int use_global_delete,\n   if (TREE_CODE (TREE_TYPE (type)) == FUNCTION_TYPE)\n     {\n       if (complain & tf_error)\n-\terror_at (cp_expr_loc_or_input_loc (exp),\n+\terror_at (exp_loc,\n \t\t  \"cannot delete a function.  Only pointer-to-objects are \"\n \t\t  \"valid arguments to %<delete%>\");\n       return error_mark_node;\n@@ -527,21 +529,21 @@ delete_sanity (tree exp, tree size, bool doing_vec, int use_global_delete,\n   if (VOID_TYPE_P (TREE_TYPE (type)))\n     {\n       if (complain & tf_warning)\n-\twarning_at (cp_expr_loc_or_input_loc (exp), OPT_Wdelete_incomplete,\n+\twarning_at (exp_loc, OPT_Wdelete_incomplete,\n \t\t    \"deleting %qT is undefined\", type);\n       doing_vec = 0;\n     }\n \n   /* Deleting a pointer with the value zero is valid and has no effect.  */\n   if (integer_zerop (t))\n-    return build1 (NOP_EXPR, void_type_node, t);\n+    return build1_loc (loc, NOP_EXPR, void_type_node, t);\n \n   if (doing_vec)\n-    return build_vec_delete (t, /*maxindex=*/NULL_TREE,\n+    return build_vec_delete (loc, t, /*maxindex=*/NULL_TREE,\n \t\t\t     sfk_deleting_destructor,\n \t\t\t     use_global_delete, complain);\n   else\n-    return build_delete (type, t, sfk_deleting_destructor,\n+    return build_delete (loc, type, t, sfk_deleting_destructor,\n \t\t\t LOOKUP_NORMAL, use_global_delete,\n \t\t\t complain);\n }"}, {"sha": "5b48a0e3a1c0dc6d35493da134c38acce6dfa7e1", "filename": "gcc/cp/init.c", "status": "modified", "additions": 55, "deletions": 46, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e4997a567142f56dc83eba67b9590c0431d7da/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e4997a567142f56dc83eba67b9590c0431d7da/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=04e4997a567142f56dc83eba67b9590c0431d7da", "patch": "@@ -535,7 +535,8 @@ perform_target_ctor (tree init)\n \t\t\t\t     tf_warning_or_error));\n   if (type_build_dtor_call (type))\n     {\n-      tree expr = build_delete (type, decl, sfk_complete_destructor,\n+      tree expr = build_delete (input_location,\n+\t\t\t\ttype, decl, sfk_complete_destructor,\n \t\t\t\tLOOKUP_NORMAL\n \t\t\t\t|LOOKUP_NONVIRTUAL\n \t\t\t\t|LOOKUP_DESTRUCTOR,\n@@ -980,7 +981,8 @@ perform_member_init (tree member, tree init)\n \t\t\t\t\t     /*access_path=*/NULL_TREE,\n \t\t\t\t\t     /*preserve_reference=*/false,\n \t\t\t\t\t     tf_warning_or_error);\n-      expr = build_delete (type, expr, sfk_complete_destructor,\n+      expr = build_delete (input_location,\n+\t\t\t   type, expr, sfk_complete_destructor,\n \t\t\t   LOOKUP_NONVIRTUAL|LOOKUP_DESTRUCTOR, 0,\n \t\t\t   tf_warning_or_error);\n \n@@ -3924,7 +3926,7 @@ build_new (vec<tree, va_gc> **placement, tree type, tree nelts,\n }\n \f\n static tree\n-build_vec_delete_1 (tree base, tree maxindex, tree type,\n+build_vec_delete_1 (location_t loc, tree base, tree maxindex, tree type,\n \t\t    special_function_kind auto_delete_vec,\n \t\t    int use_global_delete, tsubst_flags_t complain)\n {\n@@ -3958,7 +3960,7 @@ build_vec_delete_1 (tree base, tree maxindex, tree type,\n   if (base == error_mark_node || maxindex == error_mark_node)\n     return error_mark_node;\n \n-  if (!verify_type_context (input_location, TCTX_DEALLOCATION, type,\n+  if (!verify_type_context (loc, TCTX_DEALLOCATION, type,\n \t\t\t    !(complain & tf_error)))\n     return error_mark_node;\n \n@@ -3967,14 +3969,14 @@ build_vec_delete_1 (tree base, tree maxindex, tree type,\n       if (complain & tf_warning)\n \t{\n \t  auto_diagnostic_group d;\n-\t  if (warning (OPT_Wdelete_incomplete,\n-\t\t\t \"possible problem detected in invocation of \"\n-\t\t\t \"operator %<delete []%>\"))\n+\t  if (warning_at (loc, OPT_Wdelete_incomplete,\n+\t\t\t  \"possible problem detected in invocation of \"\n+\t\t\t  \"operator %<delete []%>\"))\n \t    {\n \t      cxx_incomplete_type_diagnostic (base, type, DK_WARNING);\n-\t      inform (input_location, \"neither the destructor nor the \"\n-\t\t\t\"class-specific operator %<delete []%> will be called, \"\n-\t\t\t\"even if they are declared when the class is defined\");\n+\t      inform (loc, \"neither the destructor nor the \"\n+\t\t      \"class-specific operator %<delete []%> will be called, \"\n+\t\t      \"even if they are declared when the class is defined\");\n \t    }\n \t}\n       /* This size won't actually be used.  */\n@@ -3991,7 +3993,7 @@ build_vec_delete_1 (tree base, tree maxindex, tree type,\n       /* Make sure the destructor is callable.  */\n       if (type_build_dtor_call (type))\n \t{\n-\t  tmp = build_delete (ptype, base, sfk_complete_destructor,\n+\t  tmp = build_delete (loc, ptype, base, sfk_complete_destructor,\n \t\t\t      LOOKUP_NORMAL|LOOKUP_DESTRUCTOR, 1,\n \t\t\t      complain);\n \t  if (tmp == error_mark_node)\n@@ -4006,30 +4008,30 @@ build_vec_delete_1 (tree base, tree maxindex, tree type,\n \n   tbase = create_temporary_var (ptype);\n   DECL_INITIAL (tbase)\n-    = fold_build_pointer_plus_loc (input_location, fold_convert (ptype, base),\n+    = fold_build_pointer_plus_loc (loc, fold_convert (ptype, base),\n \t\t\t\t   virtual_size);\n-  tbase_init = build_stmt (input_location, DECL_EXPR, tbase);\n+  tbase_init = build_stmt (loc, DECL_EXPR, tbase);\n   controller = build3 (BIND_EXPR, void_type_node, tbase, NULL_TREE, NULL_TREE);\n   TREE_SIDE_EFFECTS (controller) = 1;\n \n   body = build1 (EXIT_EXPR, void_type_node,\n \t\t build2 (EQ_EXPR, boolean_type_node, tbase,\n \t\t\t fold_convert (ptype, base)));\n-  tmp = fold_build1_loc (input_location, NEGATE_EXPR, sizetype, size_exp);\n+  tmp = fold_build1_loc (loc, NEGATE_EXPR, sizetype, size_exp);\n   tmp = fold_build_pointer_plus (tbase, tmp);\n-  tmp = cp_build_modify_expr (input_location, tbase, NOP_EXPR, tmp, complain);\n+  tmp = cp_build_modify_expr (loc, tbase, NOP_EXPR, tmp, complain);\n   if (tmp == error_mark_node)\n     return error_mark_node;\n-  body = build_compound_expr (input_location, body, tmp);\n-  tmp = build_delete (ptype, tbase, sfk_complete_destructor,\n+  body = build_compound_expr (loc, body, tmp);\n+  tmp = build_delete (loc, ptype, tbase, sfk_complete_destructor,\n \t\t      LOOKUP_NORMAL|LOOKUP_DESTRUCTOR, 1,\n \t\t      complain);\n   if (tmp == error_mark_node)\n     return error_mark_node;\n-  body = build_compound_expr (input_location, body, tmp);\n+  body = build_compound_expr (loc, body, tmp);\n \n   loop = build1 (LOOP_EXPR, void_type_node, body);\n-  loop = build_compound_expr (input_location, tbase_init, loop);\n+  loop = build_compound_expr (loc, tbase_init, loop);\n \n  no_destructor:\n   /* Delete the storage if appropriate.  */\n@@ -4049,7 +4051,7 @@ build_vec_delete_1 (tree base, tree maxindex, tree type,\n \t  tree cookie_size;\n \n \t  cookie_size = targetm.cxx.get_cookie_size (type);\n-\t  base_tbd = cp_build_binary_op (input_location,\n+\t  base_tbd = cp_build_binary_op (loc,\n \t\t\t\t\t MINUS_EXPR,\n \t\t\t\t\t cp_convert (string_type_node,\n \t\t\t\t\t\t     base, complain),\n@@ -4088,12 +4090,12 @@ build_vec_delete_1 (tree base, tree maxindex, tree type,\n     body = integer_zero_node;\n \n   /* Outermost wrapper: If pointer is null, punt.  */\n-  tree cond = build2_loc (input_location, NE_EXPR, boolean_type_node, base,\n+  tree cond = build2_loc (loc, NE_EXPR, boolean_type_node, base,\n \t\t\t  fold_convert (TREE_TYPE (base), nullptr_node));\n   /* This is a compiler generated comparison, don't emit\n      e.g. -Wnonnull-compare warning for it.  */\n   TREE_NO_WARNING (cond) = 1;\n-  body = build3_loc (input_location, COND_EXPR, void_type_node,\n+  body = build3_loc (loc, COND_EXPR, void_type_node,\n \t\t     cond, body, integer_zero_node);\n   COND_EXPR_IS_VEC_DELETE (body) = true;\n   body = build1 (NOP_EXPR, void_type_node, body);\n@@ -4714,7 +4716,7 @@ build_vec_init (tree base, tree maxindex, tree init,\n \t\t\t\tcomplain);\n \n       finish_cleanup_try_block (try_block);\n-      e = build_vec_delete_1 (rval, m,\n+      e = build_vec_delete_1 (input_location, rval, m,\n \t\t\t      inner_elt_type, sfk_complete_destructor,\n \t\t\t      /*use_global_delete=*/0, complain);\n       if (e == error_mark_node)\n@@ -4801,7 +4803,8 @@ build_dtor_call (tree exp, special_function_kind dtor_kind, int flags,\n    flags.  See cp-tree.h for more info.  */\n \n tree\n-build_delete (tree otype, tree addr, special_function_kind auto_delete,\n+build_delete (location_t loc, tree otype, tree addr,\n+\t      special_function_kind auto_delete,\n \t      int flags, int use_global_delete, tsubst_flags_t complain)\n {\n   tree expr;\n@@ -4824,10 +4827,10 @@ build_delete (tree otype, tree addr, special_function_kind auto_delete,\n       if (TYPE_DOMAIN (type) == NULL_TREE)\n \t{\n \t  if (complain & tf_error)\n-\t    error (\"unknown array size in delete\");\n+\t    error_at (loc, \"unknown array size in delete\");\n \t  return error_mark_node;\n \t}\n-      return build_vec_delete (addr, array_type_nelts (type),\n+      return build_vec_delete (loc, addr, array_type_nelts (type),\n \t\t\t       auto_delete, use_global_delete, complain);\n     }\n \n@@ -4848,7 +4851,7 @@ build_delete (tree otype, tree addr, special_function_kind auto_delete,\n \t{\n \t  complete_type (type);\n \t  if (deleting\n-\t      && !verify_type_context (input_location, TCTX_DEALLOCATION, type,\n+\t      && !verify_type_context (loc, TCTX_DEALLOCATION, type,\n \t\t\t\t       !(complain & tf_error)))\n \t    return error_mark_node;\n \n@@ -4857,12 +4860,12 @@ build_delete (tree otype, tree addr, special_function_kind auto_delete,\n \t      if (complain & tf_warning)\n \t\t{\n \t\t  auto_diagnostic_group d;\n-\t\t  if (warning (OPT_Wdelete_incomplete,\n-\t\t\t       \"possible problem detected in invocation of \"\n-\t\t\t       \"%<operator delete%>\"))\n+\t\t  if (warning_at (loc, OPT_Wdelete_incomplete,\n+\t\t\t\t  \"possible problem detected in invocation of \"\n+\t\t\t\t  \"%<operator delete%>\"))\n \t\t    {\n \t\t      cxx_incomplete_type_diagnostic (addr, type, DK_WARNING);\n-\t\t      inform (input_location,\n+\t\t      inform (loc,\n \t\t\t      \"neither the destructor nor the class-specific \"\n \t\t\t      \"%<operator delete%> will be called, even if \"\n \t\t\t      \"they are declared when the class is defined\");\n@@ -4877,15 +4880,15 @@ build_delete (tree otype, tree addr, special_function_kind auto_delete,\n \t      if (!dtor || !DECL_VINDEX (dtor))\n \t\t{\n \t\t  if (CLASSTYPE_PURE_VIRTUALS (type))\n-\t\t    warning (OPT_Wdelete_non_virtual_dtor,\n-\t\t\t     \"deleting object of abstract class type %qT\"\n-\t\t\t     \" which has non-virtual destructor\"\n-\t\t\t     \" will cause undefined behavior\", type);\n+\t\t    warning_at (loc, OPT_Wdelete_non_virtual_dtor,\n+\t\t\t\t\"deleting object of abstract class type %qT\"\n+\t\t\t\t\" which has non-virtual destructor\"\n+\t\t\t\t\" will cause undefined behavior\", type);\n \t\t  else\n-\t\t    warning (OPT_Wdelete_non_virtual_dtor,\n-\t\t\t     \"deleting object of polymorphic class type %qT\"\n-\t\t\t     \" which has non-virtual destructor\"\n-\t\t\t     \" might cause undefined behavior\", type);\n+\t\t    warning_at (loc, OPT_Wdelete_non_virtual_dtor,\n+\t\t\t\t\"deleting object of polymorphic class type %qT\"\n+\t\t\t\t\" which has non-virtual destructor\"\n+\t\t\t\t\" might cause undefined behavior\", type);\n \t\t}\n \t    }\n \t}\n@@ -4984,7 +4987,10 @@ build_delete (tree otype, tree addr, special_function_kind auto_delete,\n     return error_mark_node;\n \n   if (!deleting)\n-    return expr;\n+    {\n+      protected_set_expr_location (expr, loc);\n+      return expr;\n+    }\n \n   if (do_delete)\n     {\n@@ -5010,7 +5016,7 @@ build_delete (tree otype, tree addr, special_function_kind auto_delete,\n \n   /* Handle deleting a null pointer.  */\n   warning_sentinel s (warn_address);\n-  tree ifexp = cp_build_binary_op (input_location, NE_EXPR, addr,\n+  tree ifexp = cp_build_binary_op (loc, NE_EXPR, addr,\n \t\t\t\t   nullptr_node, complain);\n   ifexp = cp_fully_fold (ifexp);\n \n@@ -5024,6 +5030,7 @@ build_delete (tree otype, tree addr, special_function_kind auto_delete,\n   if (!integer_nonzerop (ifexp))\n     expr = build3 (COND_EXPR, void_type_node, ifexp, expr, void_node);\n \n+  protected_set_expr_location (expr, loc);\n   return expr;\n }\n \n@@ -5112,7 +5119,7 @@ push_base_cleanups (void)\n \t\t\t       /*access_path=*/NULL_TREE,\n \t\t\t       /*preserve_reference=*/false,\n \t\t\t       tf_warning_or_error));\n-\t  expr = build_delete (this_type, this_member,\n+\t  expr = build_delete (input_location, this_type, this_member,\n \t\t\t       sfk_complete_destructor,\n \t\t\t       LOOKUP_NONVIRTUAL|LOOKUP_DESTRUCTOR|LOOKUP_NORMAL,\n \t\t\t       0, tf_warning_or_error);\n@@ -5139,7 +5146,7 @@ push_base_cleanups (void)\n    be worth bothering.)  */\n \n tree\n-build_vec_delete (tree base, tree maxindex,\n+build_vec_delete (location_t loc, tree base, tree maxindex,\n \t\t  special_function_kind auto_delete_vec,\n \t\t  int use_global_delete, tsubst_flags_t complain)\n {\n@@ -5162,7 +5169,7 @@ build_vec_delete (tree base, tree maxindex,\n \t  base = TARGET_EXPR_SLOT (base_init);\n \t}\n       type = strip_array_types (TREE_TYPE (type));\n-      cookie_addr = fold_build1_loc (input_location, NEGATE_EXPR,\n+      cookie_addr = fold_build1_loc (loc, NEGATE_EXPR,\n \t\t\t\t sizetype, TYPE_SIZE_UNIT (sizetype));\n       cookie_addr = fold_build_pointer_plus (fold_convert (size_ptr_type, base),\n \t\t\t\t\t     cookie_addr);\n@@ -5186,15 +5193,17 @@ build_vec_delete (tree base, tree maxindex,\n   else\n     {\n       if (base != error_mark_node && !(complain & tf_error))\n-\terror (\"type to vector delete is neither pointer or array type\");\n+\terror_at (loc,\n+\t\t  \"type to vector delete is neither pointer or array type\");\n       return error_mark_node;\n     }\n \n-  rval = build_vec_delete_1 (base, maxindex, type, auto_delete_vec,\n+  rval = build_vec_delete_1 (loc, base, maxindex, type, auto_delete_vec,\n \t\t\t     use_global_delete, complain);\n   if (base_init && rval != error_mark_node)\n     rval = build2 (COMPOUND_EXPR, TREE_TYPE (rval), base_init, rval);\n \n+  protected_set_expr_location (rval, loc);\n   return rval;\n }\n "}, {"sha": "2e39107913cb50d6e0cf708a2e36fcd26b808b91", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e4997a567142f56dc83eba67b9590c0431d7da/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e4997a567142f56dc83eba67b9590c0431d7da/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=04e4997a567142f56dc83eba67b9590c0431d7da", "patch": "@@ -9046,9 +9046,8 @@ cp_parser_delete_expression (cp_parser* parser)\n      the end at the end of the final token we consumed.  */\n   location_t combined_loc = make_location (start_loc, start_loc,\n \t\t\t\t\t   parser->lexer);\n-  expression = delete_sanity (expression, NULL_TREE, array_p,\n+  expression = delete_sanity (combined_loc, expression, NULL_TREE, array_p,\n \t\t\t      global_scope_p, tf_warning_or_error);\n-  protected_set_expr_location (expression, combined_loc);\n \n   return expression;\n }"}, {"sha": "7f8ce1d3310e393381228ef26fd9fd2749b4cf3e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e4997a567142f56dc83eba67b9590c0431d7da/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e4997a567142f56dc83eba67b9590c0431d7da/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=04e4997a567142f56dc83eba67b9590c0431d7da", "patch": "@@ -19336,7 +19336,7 @@ tsubst_copy_and_build (tree t,\n       {\n \ttree op0 = RECUR (TREE_OPERAND (t, 0));\n \ttree op1 = RECUR (TREE_OPERAND (t, 1));\n-\tRETURN (delete_sanity (op0, op1,\n+\tRETURN (delete_sanity (input_location, op0, op1,\n \t\t\t       DELETE_EXPR_USE_VEC (t),\n \t\t\t       DELETE_EXPR_USE_GLOBAL (t),\n \t\t\t       complain));"}, {"sha": "103b68f3b6dc18f91009e6d1fcefb7e42ac123a1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e4997a567142f56dc83eba67b9590c0431d7da/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e4997a567142f56dc83eba67b9590c0431d7da/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=04e4997a567142f56dc83eba67b9590c0431d7da", "patch": "@@ -1,3 +1,11 @@\n+2019-12-30  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/init/delete1.C: Check locations too.\n+\t* g++.dg/ipa/pr85607.C: Likewise.\n+\t* g++.dg/warn/Wdelete-incomplete-1.C: Likewise.\n+\t* g++.dg/warn/delete-non-virtual-dtor.C: Likewise.\n+\t* g++.dg/warn/incomplete1.C: Likewise.\n+\n 2019-12-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/91651"}, {"sha": "617c7ba8a101ce8d6edcc56eb230bbe82bb8618c", "filename": "gcc/testsuite/g++.dg/init/delete1.C", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e4997a567142f56dc83eba67b9590c0431d7da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fdelete1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e4997a567142f56dc83eba67b9590c0431d7da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fdelete1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fdelete1.C?ref=04e4997a567142f56dc83eba67b9590c0431d7da", "patch": "@@ -1,7 +1,9 @@\n // PR c++/19811\n \n-class C; // { dg-message \"forward\" }\n+class C; // { dg-message \"7:forward\" }\n \n void foo(void *p) {\n-  delete [] ((C*)p) ; // { dg-warning \"problem|incomplete\" }\n+  delete [] ((C*)p) ; // { dg-warning \"3:possible problem detected in invocation of operator .delete \\\\\\[\\\\\\].\" }\n+  // { dg-message \"3:neither the destructor nor the class-specific\" \"note\" { target *-*-* } .-1 }\n+  // { dg-warning \"invalid use of incomplete type\" \"\" { target *-*-* } .-2 }\n }"}, {"sha": "9f6190961522e80691145da894894154f152b1fd", "filename": "gcc/testsuite/g++.dg/ipa/pr85607.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e4997a567142f56dc83eba67b9590c0431d7da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr85607.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e4997a567142f56dc83eba67b9590c0431d7da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr85607.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr85607.C?ref=04e4997a567142f56dc83eba67b9590c0431d7da", "patch": "@@ -1,14 +1,14 @@\n // { dg-do compile }\n /* { dg-options \"-O2\" } */\n \n-class A;\t// { dg-message \"forward declaration of 'class A'\" }\n+class A;\t// { dg-message \"7:forward declaration of 'class A'\" }\n \n-A *a;\t\t// { dg-warning \"'a' has incomplete type\" }\n+A *a;\t\t// { dg-warning \"4:'a' has incomplete type\" }\n \n int\n main (int argc, char **argv)\n {\n-  delete a;\t// { dg-warning \"delete\" \"warn\" }\n-  // { dg-message \"note\" \"note\" { target *-*-* } .-1 }\n+  delete a;\t// { dg-warning \"3:possible problem detected in invocation of .operator delete.\" \"warn\" }\n+  // { dg-message \"3:neither the destructor nor the class-specific\" \"note\" { target *-*-* } .-1 }\n   return 0;\n }"}, {"sha": "d0c40e23db93f62f6508f993a994a133a8f83189", "filename": "gcc/testsuite/g++.dg/warn/Wdelete-incomplete-1.C", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e4997a567142f56dc83eba67b9590c0431d7da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdelete-incomplete-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e4997a567142f56dc83eba67b9590c0431d7da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdelete-incomplete-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdelete-incomplete-1.C?ref=04e4997a567142f56dc83eba67b9590c0431d7da", "patch": "@@ -1,7 +1,8 @@\n // PR c++/43452\n \n-class Foo;         // { dg-message \"forward\" }\n+class Foo;         // { dg-message \"7:forward declaration\" }\n int main() {\n-   Foo* p;         // { dg-warning \"incomplete\" }\n-   delete [] p;    // { dg-warning \"problem\" }\n+   Foo* p;         // { dg-warning \"9:.p. has incomplete type\" }\n+   delete [] p;    // { dg-warning \"4:possible problem detected in invocation of operator .delete \\\\\\[\\\\\\].\" }\n+   // { dg-message \"4:neither the destructor nor the class-specific\" \"note\" { target *-*-* } .-1 }\n }"}, {"sha": "7f892d30b72c2f5f29bdb2d770318022ba6500cb", "filename": "gcc/testsuite/g++.dg/warn/delete-non-virtual-dtor.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e4997a567142f56dc83eba67b9590c0431d7da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdelete-non-virtual-dtor.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e4997a567142f56dc83eba67b9590c0431d7da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdelete-non-virtual-dtor.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdelete-non-virtual-dtor.C?ref=04e4997a567142f56dc83eba67b9590c0431d7da", "patch": "@@ -6,7 +6,7 @@ struct polyBase { virtual void f(); };\n void f(polyBase* p, polyBase* arr)\n {\n   polyBase pb;\n-  delete p;      // { dg-warning \"non-virtual destructor might\" }\n+  delete p;      // { dg-warning \"3:deleting \\[^\\n\\r]* non-virtual destructor might\" }\n   delete [] arr;\n }\n \n@@ -15,15 +15,15 @@ struct polyDerived : polyBase { };\n void f(polyDerived* p, polyDerived* arr)\n {\n   polyDerived pd;\n-  delete p;      // { dg-warning \"non-virtual destructor might\" }\n+  delete p;      // { dg-warning \"3:deleting \\[^\\n\\r]* non-virtual destructor might\" }\n   delete [] arr;\n }\n \n struct absDerived : polyBase { virtual void g() = 0; };\n \n void f(absDerived* p, absDerived* arr)\n {\n-  delete p;      // { dg-warning \"non-virtual destructor will\" }\n+  delete p;      // { dg-warning \"3:deleting \\[^\\n\\r]* non-virtual destructor will\" }\n   delete [] arr;\n }\n \n@@ -51,7 +51,7 @@ struct polyBaseNonTrivial { ~polyBaseNonTrivial(); virtual void f(); };\n void f(polyBaseNonTrivial* p, polyBaseNonTrivial* arr)\n {\n   polyBaseNonTrivial pbnt;\n-  delete p;      // { dg-warning \"non-virtual destructor might\" }\n+  delete p;      // { dg-warning \"3:deleting \\[^\\n\\r]* non-virtual destructor might\" }\n   delete [] arr;\n }\n \n@@ -60,7 +60,7 @@ struct polyDerivedNT : polyBaseNonTrivial { ~polyDerivedNT(); };\n void f(polyDerivedNT* p, polyDerivedNT* arr)\n {\n   polyDerivedNT pdnt;\n-  delete p;      // { dg-warning \"non-virtual destructor might\" }\n+  delete p;      // { dg-warning \"3:deleting \\[^\\n\\r]* non-virtual destructor might\" }\n   delete [] arr;\n }\n "}, {"sha": "aa44c7ba3fb76bb4c7e9f66bb9a89d6f3a5d6596", "filename": "gcc/testsuite/g++.dg/warn/incomplete1.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e4997a567142f56dc83eba67b9590c0431d7da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fincomplete1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e4997a567142f56dc83eba67b9590c0431d7da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fincomplete1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fincomplete1.C?ref=04e4997a567142f56dc83eba67b9590c0431d7da", "patch": "@@ -9,14 +9,14 @@\n // (But the deletion does not constitute an ill-formed program. So the\n // program should nevertheless compile, but it should give a warning.)\n \n-class A;\t// { dg-message \"forward declaration of 'class A'\" }\n+class A;\t// { dg-message \"7:forward declaration of 'class A'\" }\n \n-A *a;\t\t// { dg-warning \"'a' has incomplete type\" }\n+A *a;\t\t// { dg-warning \"4:'a' has incomplete type\" }\n \n int\n main (int argc, char **argv)\n {\n-  delete a;\t// { dg-warning \"delete\" \"warn\" }\n-  // { dg-message \"note\" \"note\" { target *-*-* } .-1 }\n+  delete a;\t// { dg-warning \"3:possible problem detected in invocation of .operator delete.\" \"warn\" }\n+  // { dg-message \"3:neither the destructor nor the class-specific\" \"note\" { target *-*-* } .-1 }\n   return 0;\n }"}, {"sha": "21622bdd67566d813cac7fd5632036680927334a", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e4997a567142f56dc83eba67b9590c0431d7da/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e4997a567142f56dc83eba67b9590c0431d7da/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=04e4997a567142f56dc83eba67b9590c0431d7da", "patch": "@@ -1,3 +1,8 @@\n+2019-12-30  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* libcp1plugin.cc (plugin_build_unary_expr): Update delete_sanity\n+\tcall.\n+\n 2019-12-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* libcp1plugin.cc (plugin_build_unary_expr): Update build_throw"}, {"sha": "aae19acffc8e74b3efb4e730a36825c696eadb25", "filename": "libcc1/libcp1plugin.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e4997a567142f56dc83eba67b9590c0431d7da/libcc1%2Flibcp1plugin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e4997a567142f56dc83eba67b9590c0431d7da/libcc1%2Flibcp1plugin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcp1plugin.cc?ref=04e4997a567142f56dc83eba67b9590c0431d7da", "patch": "@@ -2812,7 +2812,8 @@ plugin_build_unary_expr (cc1_plugin::connection *self,\n \n     case DELETE_EXPR:\n     case VEC_DELETE_EXPR:\n-      result = delete_sanity (op0, NULL_TREE, opcode == VEC_DELETE_EXPR,\n+      result = delete_sanity (input_location, op0, NULL_TREE,\n+\t\t\t      opcode == VEC_DELETE_EXPR,\n \t\t\t      global_scope_p, tf_error);\n       break;\n "}]}