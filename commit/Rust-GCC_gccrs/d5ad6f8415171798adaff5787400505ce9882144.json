{"sha": "d5ad6f8415171798adaff5787400505ce9882144", "node_id": "C_kwDOANBUbNoAKGQ1YWQ2Zjg0MTUxNzE3OThhZGFmZjU3ODc0MDA1MDVjZTk4ODIxNDQ", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-08-16T14:18:02Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-09-02T20:20:26Z"}, "message": "d: Fix #error You must define PREFERRED_DEBUGGING_TYPE if DWARF is not supported\n\nThis moves all D front-end specific target definitions out of the main\ntarget headers, and into its own header that is included by tm_d.h\ninstead of pulling in the same headers as tm_p.h.\n\nThis fixes the build on target configurations that pull in the default D\nlanguage target hooks, and subsequently trigger an error because the\ndefinition of PREFERRED_DEBUGGING_TYPE is behind tm.h, the one header\nthat is avoided from being included in default-d.cc.\n\n\tPR d/105659\n\ngcc/ChangeLog:\n\n\t* config.gcc: Set tm_d_file to ${cpu_type}/${cpu_type}-d.h.\n\t* config/aarch64/aarch64-d.cc: Include tm_d.h.\n\t* config/aarch64/aarch64-protos.h (aarch64_d_target_versions): Move to\n\tconfig/aarch64/aarch64-d.h.\n\t(aarch64_d_register_target_info): Likewise.\n\t* config/aarch64/aarch64.h (TARGET_D_CPU_VERSIONS): Likewise.\n\t(TARGET_D_REGISTER_CPU_TARGET_INFO): Likewise.\n\t* config/arm/arm-d.cc: Include tm_d.h and arm-protos.h instead of\n\ttm_p.h.\n\t* config/arm/arm-protos.h (arm_d_target_versions): Move to\n\tconfig/arm/arm-d.h.\n\t(arm_d_register_target_info): Likewise.\n\t* config/arm/arm.h (TARGET_D_CPU_VERSIONS): Likewise.\n\t(TARGET_D_REGISTER_CPU_TARGET_INFO): Likewise.\n\t* config/default-d.cc: Remove memmodel.h include.\n\t* config/freebsd-d.cc: Include tm_d.h instead of tm_p.h.\n\t* config/glibc-d.cc: Likewise.\n\t* config/i386/i386-d.cc: Include tm_d.h.\n\t* config/i386/i386-protos.h (ix86_d_target_versions): Move to\n\tconfig/i386/i386-d.h.\n\t(ix86_d_register_target_info): Likewise.\n\t(ix86_d_has_stdcall_convention): Likewise.\n\t* config/i386/i386.h (TARGET_D_CPU_VERSIONS): Likewise.\n\t(TARGET_D_REGISTER_CPU_TARGET_INFO): Likewise.\n\t(TARGET_D_HAS_STDCALL_CONVENTION): Likewise.\n\t* config/i386/winnt-d.cc: Include tm_d.h instead of tm_p.h.\n\t* config/mips/mips-d.cc: Include tm_d.h.\n\t* config/mips/mips-protos.h (mips_d_target_versions): Move to\n\tconfig/mips/mips-d.h.\n\t(mips_d_register_target_info): Likewise.\n\t* config/mips/mips.h (TARGET_D_CPU_VERSIONS): Likewise.\n\t(TARGET_D_REGISTER_CPU_TARGET_INFO): Likewise.\n\t* config/netbsd-d.cc: Include tm_d.h instead of tm.h and memmodel.h.\n\t* config/openbsd-d.cc: Likewise.\n\t* config/pa/pa-d.cc: Include tm_d.h.\n\t* config/pa/pa-protos.h (pa_d_target_versions): Move to\n\tconfig/pa/pa-d.h.\n\t(pa_d_register_target_info): Likewise.\n\t* config/pa/pa.h (TARGET_D_CPU_VERSIONS): Likewise.\n\t(TARGET_D_REGISTER_CPU_TARGET_INFO): Likewise.\n\t* config/riscv/riscv-d.cc: Include tm_d.h.\n\t* config/riscv/riscv-protos.h (riscv_d_target_versions): Move to\n\tconfig/riscv/riscv-d.h.\n\t(riscv_d_register_target_info): Likewise.\n\t* config/riscv/riscv.h (TARGET_D_CPU_VERSIONS): Likewise.\n\t(TARGET_D_REGISTER_CPU_TARGET_INFO): Likewise.\n\t* config/rs6000/rs6000-d.cc: Include tm_d.h.\n\t* config/rs6000/rs6000-protos.h (rs6000_d_target_versions): Move to\n\tconfig/rs6000/rs6000-d.h.\n\t(rs6000_d_register_target_info): Likewise.\n\t* config/rs6000/rs6000.h (TARGET_D_CPU_VERSIONS) Likewise.:\n\t(TARGET_D_REGISTER_CPU_TARGET_INFO) Likewise.:\n\t* config/s390/s390-d.cc: Include tm_d.h.\n\t* config/s390/s390-protos.h (s390_d_target_versions): Move to\n\tconfig/s390/s390-d.h.\n\t(s390_d_register_target_info): Likewise.\n\t* config/s390/s390.h (TARGET_D_CPU_VERSIONS): Likewise.\n\t(TARGET_D_REGISTER_CPU_TARGET_INFO): Likewise.\n\t* config/sol2-d.cc: Include tm_d.h instead of tm.h and memmodel.h.\n\t* config/sparc/sparc-d.cc: Include tm_d.h.\n\t* config/sparc/sparc-protos.h (sparc_d_target_versions): Move to\n\tconfig/sparc/sparc-d.h.\n\t(sparc_d_register_target_info): Likewise.\n\t* config/sparc/sparc.h (TARGET_D_CPU_VERSIONS): Likewise.\n\t(TARGET_D_REGISTER_CPU_TARGET_INFO): Likewise.\n\t* configure: Regenerate.\n\t* configure.ac (tm_d_file): Remove defaults.h.\n\t(tm_d_include_list): Remove options.h and insn-constants.h.\n\t* config/aarch64/aarch64-d.h: New file.\n\t* config/arm/arm-d.h: New file.\n\t* config/i386/i386-d.h: New file.\n\t* config/mips/mips-d.h: New file.\n\t* config/pa/pa-d.h: New file.\n\t* config/riscv/riscv-d.h: New file.\n\t* config/rs6000/rs6000-d.h: New file.\n\t* config/s390/s390-d.h: New file.\n\t* config/sparc/sparc-d.h: New file.", "tree": {"sha": "f317623f379959fa1fda7c065704d3ba327fccdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f317623f379959fa1fda7c065704d3ba327fccdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5ad6f8415171798adaff5787400505ce9882144", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5ad6f8415171798adaff5787400505ce9882144", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5ad6f8415171798adaff5787400505ce9882144", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5ad6f8415171798adaff5787400505ce9882144/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb9d434404b559a11bd2f85f0ce8085c77b8c4c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb9d434404b559a11bd2f85f0ce8085c77b8c4c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb9d434404b559a11bd2f85f0ce8085c77b8c4c8"}], "stats": {"total": 353, "additions": 247, "deletions": 106}, "files": [{"sha": "f4e757bd85320deea932bbe42ffcb42c18e5b1cc", "filename": "gcc/config.gcc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -558,11 +558,15 @@ xtensa*-*-*)\n esac\n \n tm_file=${cpu_type}/${cpu_type}.h\n-tm_d_file=${cpu_type}/${cpu_type}.h\n if test -f ${srcdir}/config/${cpu_type}/${cpu_type}-protos.h\n then\n \ttm_p_file=${cpu_type}/${cpu_type}-protos.h\n-\ttm_d_file=\"${tm_d_file} ${cpu_type}/${cpu_type}-protos.h\"\n+fi\n+\n+tm_d_file=\n+if test -f ${srcdir}/config/${cpu_type}/${cpu_type}-d.h\n+then\n+\ttm_d_file=\"${tm_d_file} ${cpu_type}/${cpu_type}-d.h\"\n fi\n \n extra_modes=\n@@ -668,7 +672,6 @@ case ${target} in\n *-*-darwin*)\n   tmake_file=\"t-darwin \"\n   tm_file=\"${tm_file} darwin.h\"\n-  tm_d_file=\"${tm_d_file} tm-dwarf2.h\"\n   darwin_os=`echo ${target} | sed 's/.*darwin\\([0-9.]*\\).*$/\\1/'`\n   darwin_maj=`expr \"$darwin_os\" : '\\([0-9]*\\).*'`\n   macos_min=`expr \"$darwin_os\" : '[0-9]*\\.\\([0-9]*\\).*'`\n@@ -3445,7 +3448,6 @@ xstormy16-*-elf)\n \t# For historical reasons, the target files omit the 'x'.\n \ttm_file=\"elfos.h newlib-stdint.h stormy16/stormy16.h\"\n \ttm_p_file=stormy16/stormy16-protos.h\n-\ttm_d_file=\"elfos.h stormy16/stormy16.h\"\n \tmd_file=stormy16/stormy16.md\n \tout_file=stormy16/stormy16.cc\n \textra_options=stormy16/stormy16.opt"}, {"sha": "e0e0401631e5f100396347e5da9cbdc0fd0e7a59", "filename": "gcc/config/aarch64/aarch64-d.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Faarch64%2Faarch64-d.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Faarch64%2Faarch64-d.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-d.cc?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -20,6 +20,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n+#include \"tm_d.h\"\n #include \"d/d-target.h\"\n #include \"d/d-target-def.h\"\n "}, {"sha": "c605a68ef9fa3745285d5d674e9cf464ebfeee5a", "filename": "gcc/config/aarch64/aarch64-d.h", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Faarch64%2Faarch64-d.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Faarch64%2Faarch64-d.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-d.h?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -0,0 +1,24 @@\n+/* Definitions for the D front end on the AArch64 architecture.\n+   Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Defined in aarch64-d.cc  */\n+extern void aarch64_d_target_versions (void);\n+extern void aarch64_d_register_target_info (void);\n+\n+/* Target hooks for D language.  */\n+#define TARGET_D_CPU_VERSIONS aarch64_d_target_versions\n+#define TARGET_D_REGISTER_CPU_TARGET_INFO aarch64_d_register_target_info"}, {"sha": "0bb4c9b0e2834689db67a1911a70fa7ae5aefc59", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -1040,10 +1040,6 @@ enum aarch64_parse_opt_result aarch64_parse_extension (const char *,\n void aarch64_get_all_extension_candidates (auto_vec<const char *> *candidates);\n std::string aarch64_get_extension_string_for_isa_flags (uint64_t, uint64_t);\n \n-/* Defined in aarch64-d.cc  */\n-extern void aarch64_d_target_versions (void);\n-extern void aarch64_d_register_target_info (void);\n-\n rtl_opt_pass *make_pass_fma_steering (gcc::context *);\n rtl_opt_pass *make_pass_track_speculation (gcc::context *);\n rtl_opt_pass *make_pass_tag_collision_avoidance (gcc::context *);"}, {"sha": "e6855c640353980d177200f6abae9d4d37fcc084", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -26,10 +26,6 @@\n #define TARGET_CPU_CPP_BUILTINS()\t\\\n   aarch64_cpu_cpp_builtins (pfile)\n \n-/* Target hooks for D language.  */\n-#define TARGET_D_CPU_VERSIONS aarch64_d_target_versions\n-#define TARGET_D_REGISTER_CPU_TARGET_INFO aarch64_d_register_target_info\n-\n \f\n \n #define REGISTER_TARGET_PRAGMAS() aarch64_register_pragmas ()"}, {"sha": "5c89f1b1079e9a70b179f0edd2bb568f21504f30", "filename": "gcc/config/arm/arm-d.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Farm%2Farm-d.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Farm%2Farm-d.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-d.cc?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -21,9 +21,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n-#include \"tm_p.h\"\n+#include \"tm_d.h\"\n #include \"d/d-target.h\"\n #include \"d/d-target-def.h\"\n+#include \"arm-protos.h\"\n \n /* Implement TARGET_D_CPU_VERSIONS for ARM targets.  */\n "}, {"sha": "479a89bb120a962cf31f57899f3f1e3cca9c0e2a", "filename": "gcc/config/arm/arm-d.h", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Farm%2Farm-d.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Farm%2Farm-d.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-d.h?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -0,0 +1,24 @@\n+/* Definitions for the D front end on the ARM architecture.\n+   Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Defined in arm-d.cc  */\n+extern void arm_d_target_versions (void);\n+extern void arm_d_register_target_info (void);\n+\n+/* Target hooks for D language.  */\n+#define TARGET_D_CPU_VERSIONS arm_d_target_versions\n+#define TARGET_D_REGISTER_CPU_TARGET_INFO arm_d_register_target_info"}, {"sha": "ee226559bfb1b9c4839a05d25c28cfbfd9d11656", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -402,10 +402,6 @@ extern void arm_lang_object_attributes_init (void);\n extern void arm_register_target_pragmas (void);\n extern void arm_cpu_cpp_builtins (struct cpp_reader *);\n \n-/* Defined in arm-d.cc  */\n-extern void arm_d_target_versions (void);\n-extern void arm_d_register_target_info (void);\n-\n extern bool arm_is_constant_pool_ref (rtx);\n \n /* The bits in this mask specify which instruction scheduling options should"}, {"sha": "e15722b0be3b39f3f7b4a12be505f47548410075", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -47,10 +47,6 @@ extern char arm_arch_name[];\n /* Target CPU builtins.  */\n #define TARGET_CPU_CPP_BUILTINS() arm_cpu_cpp_builtins (pfile)\n \n-/* Target hooks for D language.  */\n-#define TARGET_D_CPU_VERSIONS arm_d_target_versions\n-#define TARGET_D_REGISTER_CPU_TARGET_INFO arm_d_register_target_info\n-\n #include \"config/arm/arm-opts.h\"\n \n /* The processor for which instructions should be scheduled.  */"}, {"sha": "30c359ed226e60988bfbcb19d58f9c297de45848", "filename": "gcc/config/default-d.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fdefault-d.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fdefault-d.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdefault-d.cc?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -18,9 +18,11 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n-#include \"memmodel.h\"\n #include \"tm_d.h\"\n #include \"d/d-target.h\"\n #include \"d/d-target-def.h\"\n \n+/* Do not include tm.h or tm_p.h here; definitions needed by the target\n+   architecture to initialize targetdm should instead be added to tm_d.h.  */\n+\n struct gcc_targetdm targetdm = TARGETDM_INITIALIZER;"}, {"sha": "189e4a69e78a3356be3986851b891dc459769323", "filename": "gcc/config/freebsd-d.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Ffreebsd-d.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Ffreebsd-d.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffreebsd-d.cc?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -20,7 +20,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"memmodel.h\"\n #include \"tm.h\"\n-#include \"tm_p.h\"\n+#include \"tm_d.h\"\n #include \"d/d-target.h\"\n #include \"d/d-target-def.h\"\n "}, {"sha": "80ef27d19c6c8fd87ffb8930ae7cd42c7c115ed2", "filename": "gcc/config/glibc-d.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fglibc-d.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fglibc-d.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fglibc-d.cc?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -20,7 +20,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"memmodel.h\"\n-#include \"tm_p.h\"\n+#include \"tm_d.h\"\n #include \"d/d-target.h\"\n #include \"d/d-target-def.h\"\n "}, {"sha": "27e2b75fc251ed18577c91d3533afd5153995708", "filename": "gcc/config/i386/i386-d.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fi386%2Fi386-d.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fi386%2Fi386-d.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-d.cc?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -21,6 +21,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"tm_d.h\"\n #include \"d/d-target.h\"\n #include \"d/d-target-def.h\"\n "}, {"sha": "b9806889df99043537d300d2e4f57531b9394f70", "filename": "gcc/config/i386/i386-d.h", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fi386%2Fi386-d.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fi386%2Fi386-d.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-d.h?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -0,0 +1,26 @@\n+/* Definitions for the D front end on the x86 architecture.\n+   Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* In i386-d.cc  */\n+extern void ix86_d_target_versions (void);\n+extern void ix86_d_register_target_info (void);\n+extern bool ix86_d_has_stdcall_convention (unsigned int *, unsigned int *);\n+\n+/* Target hooks for D language.  */\n+#define TARGET_D_CPU_VERSIONS ix86_d_target_versions\n+#define TARGET_D_REGISTER_CPU_TARGET_INFO ix86_d_register_target_info\n+#define TARGET_D_HAS_STDCALL_CONVENTION ix86_d_has_stdcall_convention"}, {"sha": "3b94efefa65ffaba07c17ec90298bb8a6b71b1b5", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -277,11 +277,6 @@ extern bool ix86_extract_perm_from_pool_constant (int*, rtx);\n extern void ix86_target_macros (void);\n extern void ix86_register_pragmas (void);\n \n-/* In i386-d.cc  */\n-extern void ix86_d_target_versions (void);\n-extern void ix86_d_register_target_info (void);\n-extern bool ix86_d_has_stdcall_convention (unsigned int *, unsigned int *);\n-\n /* In winnt.cc  */\n extern void i386_pe_unique_section (tree, int);\n extern void i386_pe_declare_function_type (FILE *, const char *, int);"}, {"sha": "716bacef5f9f15c6e37a7786cae138ef54fff784", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -608,11 +608,6 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n /* Target Pragmas.  */\n #define REGISTER_TARGET_PRAGMAS() ix86_register_pragmas ()\n \n-/* Target hooks for D language.  */\n-#define TARGET_D_CPU_VERSIONS ix86_d_target_versions\n-#define TARGET_D_REGISTER_CPU_TARGET_INFO ix86_d_register_target_info\n-#define TARGET_D_HAS_STDCALL_CONVENTION ix86_d_has_stdcall_convention\n-\n #ifndef CC1_SPEC\n #define CC1_SPEC \"%(cc1_cpu) \"\n #endif"}, {"sha": "00c28c3964a41a5d8d3a1510f35747c5654f5f67", "filename": "gcc/config/i386/winnt-d.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fi386%2Fwinnt-d.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fi386%2Fwinnt-d.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt-d.cc?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -21,9 +21,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"target.h\"\n+#include \"tm_d.h\"\n #include \"d/d-target.h\"\n #include \"d/d-target-def.h\"\n-#include \"tm_p.h\"\n \n /* Implement TARGET_D_OS_VERSIONS for Windows targets.  */\n "}, {"sha": "8b6ccd106045edc5374667da3bc9dab4d6c0454a", "filename": "gcc/config/mips/mips-d.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fmips%2Fmips-d.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fmips%2Fmips-d.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-d.cc?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -21,6 +21,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"tm_d.h\"\n #include \"d/d-target.h\"\n #include \"d/d-target-def.h\"\n "}, {"sha": "7cb3ed9716e1f47d02373bae9216c0daa89c3913", "filename": "gcc/config/mips/mips-d.h", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fmips%2Fmips-d.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fmips%2Fmips-d.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-d.h?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -0,0 +1,24 @@\n+/* Definitions for the D front end on the MIPS architecture.\n+   Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Routines implemented in mips-d.cc  */\n+extern void mips_d_target_versions (void);\n+extern void mips_d_register_target_info (void);\n+\n+/* Target hooks for D language.  */\n+#define TARGET_D_CPU_VERSIONS mips_d_target_versions\n+#define TARGET_D_REGISTER_CPU_TARGET_INFO mips_d_register_target_info"}, {"sha": "86350523c1bc3e4d1f8695ace1b76be42477a806", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -388,8 +388,4 @@ extern void mips_register_frame_header_opt (void);\n extern void mips_expand_vec_cond_expr (machine_mode, machine_mode, rtx *);\n extern void mips_expand_vec_cmp_expr (rtx *);\n \n-/* Routines implemented in mips-d.cc  */\n-extern void mips_d_target_versions (void);\n-extern void mips_d_register_target_info (void);\n-\n #endif /* ! GCC_MIPS_PROTOS_H */"}, {"sha": "74b6e11aabb1814323497a6acd3f1f6591bf0ac9", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -680,10 +680,6 @@ struct mips_cpu_info {\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-/* Target hooks for D language.  */\n-#define TARGET_D_CPU_VERSIONS mips_d_target_versions\n-#define TARGET_D_REGISTER_CPU_TARGET_INFO mips_d_register_target_info\n-\n /* Default target_flags if no switches are specified  */\n \n #ifndef TARGET_DEFAULT"}, {"sha": "cd0c95568a1eb75ab1913e4fae12bb51b613a027", "filename": "gcc/config/netbsd-d.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fnetbsd-d.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fnetbsd-d.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnetbsd-d.cc?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -20,9 +20,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n-#include \"tm.h\"\n-#include \"memmodel.h\"\n-#include \"tm_p.h\"\n+#include \"tm_d.h\"\n #include \"d/d-target.h\"\n #include \"d/d-target-def.h\"\n "}, {"sha": "33c7e41ab62df5d9663ada4ec756ef018db80b22", "filename": "gcc/config/openbsd-d.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fopenbsd-d.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fopenbsd-d.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fopenbsd-d.cc?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -20,9 +20,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n-#include \"memmodel.h\"\n-#include \"tm.h\"\n-#include \"tm_p.h\"\n+#include \"tm_d.h\"\n #include \"d/d-target.h\"\n #include \"d/d-target-def.h\"\n "}, {"sha": "077aeb5d634426dfcb02baf2b5dd04eece30d4ea", "filename": "gcc/config/pa/pa-d.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fpa%2Fpa-d.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fpa%2Fpa-d.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-d.cc?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -21,6 +21,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"target.h\"\n+#include \"tm_d.h\"\n #include \"d/d-target.h\"\n #include \"d/d-target-def.h\"\n "}, {"sha": "9a9df108f61f16bb1e8b9698651eeda4582782a0", "filename": "gcc/config/pa/pa-d.h", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fpa%2Fpa-d.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fpa%2Fpa-d.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-d.h?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -0,0 +1,24 @@\n+/* Definitions for the D front end on the HPPA architecture.\n+   Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Routines implemented in pa-d.cc  */\n+extern void pa_d_target_versions (void);\n+extern void pa_d_register_target_info (void);\n+\n+/* Target hooks for D language.  */\n+#define TARGET_D_CPU_VERSIONS pa_d_target_versions\n+#define TARGET_D_REGISTER_CPU_TARGET_INFO pa_d_register_target_info"}, {"sha": "fe8b7a5091ec20e70569b6723466f80588fb13f7", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -111,7 +111,3 @@ extern void pa_output_function_label (FILE *);\n extern void hppa_profile_hook (int);\n \n extern const int pa_magic_milli[];\n-\n-/* Routines implemented in pa-d.cc  */\n-extern void pa_d_target_versions (void);\n-extern void pa_d_register_target_info (void);"}, {"sha": "bafdf602138977f3566bd4e1530859bdf8d7b282", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -1300,9 +1300,5 @@ do {\t\t\t\t\t\t\t\t\t     \\\n \n #define NEED_INDICATE_EXEC_STACK 0\n \n-/* Target hooks for D language.  */\n-#define TARGET_D_CPU_VERSIONS pa_d_target_versions\n-#define TARGET_D_REGISTER_CPU_TARGET_INFO pa_d_register_target_info\n-\n /* Output default function prologue for hpux.  */\n #define TARGET_ASM_FUNCTION_PROLOGUE pa_output_function_prologue"}, {"sha": "a762a35778daf0679c6c22830fcce3face5599e5", "filename": "gcc/config/riscv/riscv-d.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Friscv%2Friscv-d.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Friscv%2Friscv-d.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-d.cc?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -21,6 +21,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"target.h\"\n+#include \"tm_d.h\"\n #include \"d/d-target.h\"\n #include \"d/d-target-def.h\"\n "}, {"sha": "21a989edd8c36ce900824e39c334563df14f6358", "filename": "gcc/config/riscv/riscv-d.h", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Friscv%2Friscv-d.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Friscv%2Friscv-d.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-d.h?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -0,0 +1,24 @@\n+/* Definitions for the D front end on the RISC-V architecture.\n+   Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Routines implemented in riscv-d.cc  */\n+extern void riscv_d_target_versions (void);\n+extern void riscv_d_register_target_info (void);\n+\n+/* Target hooks for D language.  */\n+#define TARGET_D_CPU_VERSIONS riscv_d_target_versions\n+#define TARGET_D_REGISTER_CPU_TARGET_INFO riscv_d_register_target_info"}, {"sha": "649c5c977e189bcd74e4ac30e6d096a78714e388", "filename": "gcc/config/riscv/riscv-protos.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-protos.h?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -78,10 +78,6 @@ extern bool riscv_gpr_save_operation_p (rtx);\n /* Routines implemented in riscv-c.cc.  */\n void riscv_cpu_cpp_builtins (cpp_reader *);\n \n-/* Routines implemented in riscv-d.cc  */\n-extern void riscv_d_target_versions (void);\n-extern void riscv_d_register_target_info (void);\n-\n /* Routines implemented in riscv-builtins.cc.  */\n extern void riscv_atomic_assign_expand_fenv (tree *, tree *, tree *);\n extern rtx riscv_expand_builtin (tree, rtx, rtx, machine_mode, int);"}, {"sha": "eb1284e56d6994d7cab949827c18bfa14d8ecb7e", "filename": "gcc/config/riscv/riscv.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Friscv%2Friscv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Friscv%2Friscv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.h?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -27,10 +27,6 @@ along with GCC; see the file COPYING3.  If not see\n /* Target CPU builtins.  */\n #define TARGET_CPU_CPP_BUILTINS() riscv_cpu_cpp_builtins (pfile)\n \n-/* Target hooks for D language.  */\n-#define TARGET_D_CPU_VERSIONS riscv_d_target_versions\n-#define TARGET_D_REGISTER_CPU_TARGET_INFO riscv_d_register_target_info\n-\n #ifdef TARGET_BIG_ENDIAN_DEFAULT\n #define DEFAULT_ENDIAN_SPEC    \"b\"\n #else"}, {"sha": "7b9ca5a855e1d1e4475034349d73ff39b09daa47", "filename": "gcc/config/rs6000/rs6000-d.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Frs6000%2Frs6000-d.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Frs6000%2Frs6000-d.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-d.cc?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -21,6 +21,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"tm_d.h\"\n #include \"d/d-target.h\"\n #include \"d/d-target-def.h\"\n "}, {"sha": "c805b304245f8910dda93293fb6c204ccc49c63d", "filename": "gcc/config/rs6000/rs6000-d.h", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Frs6000%2Frs6000-d.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Frs6000%2Frs6000-d.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-d.h?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -0,0 +1,24 @@\n+/* Definitions for the D front end on the PowerPC architecture.\n+   Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Declare functions in rs6000-d.cc  */\n+extern void rs6000_d_target_versions (void);\n+extern void rs6000_d_register_target_info (void);\n+\n+/* Target hooks for D language.  */\n+#define TARGET_D_CPU_VERSIONS rs6000_d_target_versions\n+#define TARGET_D_REGISTER_CPU_TARGET_INFO rs6000_d_register_target_info"}, {"sha": "1c0f97edcc2d04c2ed8a45db137fdc8f9fdffa33", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -323,10 +323,6 @@ extern void rs6000_activate_target_options (tree new_tree);\n extern void rs6000_target_modify_macros (bool, HOST_WIDE_INT);\n extern void (*rs6000_target_modify_macros_ptr) (bool, HOST_WIDE_INT);\n \n-/* Declare functions in rs6000-d.cc  */\n-extern void rs6000_d_target_versions (void);\n-extern void rs6000_d_register_target_info (void);\n-\n #ifdef NO_DOLLAR_IN_LABEL\n const char * rs6000_xcoff_strip_dollar (const char *);\n #endif"}, {"sha": "5f1d5e494da36170c6fbf3f2cc62772cb7335473", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -606,10 +606,6 @@ extern unsigned char rs6000_recip_bits[];\n #define TARGET_CPU_CPP_BUILTINS() \\\n   rs6000_cpu_cpp_builtins (pfile)\n \n-/* Target hooks for D language.  */\n-#define TARGET_D_CPU_VERSIONS rs6000_d_target_versions\n-#define TARGET_D_REGISTER_CPU_TARGET_INFO rs6000_d_register_target_info\n-\n /* This is used by rs6000_cpu_cpp_builtins to indicate the byte order\n    we're compiling for.  Some configurations may need to override it.  */\n #define RS6000_CPU_CPP_ENDIAN_BUILTINS()\t\\"}, {"sha": "0dd4b5c999bb1f7d65e61322988099ba33d7ff20", "filename": "gcc/config/s390/s390-d.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fs390%2Fs390-d.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fs390%2Fs390-d.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-d.cc?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -21,6 +21,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"tm_d.h\"\n #include \"d/d-target.h\"\n #include \"d/d-target-def.h\"\n "}, {"sha": "703031b3c819011a0f78da292d2928a08c2d94f9", "filename": "gcc/config/s390/s390-d.h", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fs390%2Fs390-d.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fs390%2Fs390-d.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-d.h?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -0,0 +1,24 @@\n+/* Definitions for the D front end on the IBM S/390 and zSeries architectures.\n+   Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* s390-d.cc routines */\n+extern void s390_d_target_versions (void);\n+extern void s390_d_register_target_info (void);\n+\n+/* Target hooks for D language.  */\n+#define TARGET_D_CPU_VERSIONS s390_d_target_versions\n+#define TARGET_D_REGISTER_CPU_TARGET_INFO s390_d_register_target_info"}, {"sha": "78117c36e030e37c6d0361a714bfac865b27e592", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -175,10 +175,6 @@ extern void s390_register_target_pragmas (void);\n /* Routines for s390-c.cc */\n extern bool s390_const_operand_ok (tree, int, int, tree);\n \n-/* s390-d.cc routines */\n-extern void s390_d_target_versions (void);\n-extern void s390_d_register_target_info (void);\n-\n /* Pass management.  */\n namespace gcc { class context; }\n class rtl_opt_pass;"}, {"sha": "1114222cd4afb6077bc0b6cc7c2fe867665adad6", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -247,10 +247,6 @@ enum processor_flags\n /* Target CPU builtins.  */\n #define TARGET_CPU_CPP_BUILTINS() s390_cpu_cpp_builtins (pfile)\n \n-/* Target hooks for D language.  */\n-#define TARGET_D_CPU_VERSIONS s390_d_target_versions\n-#define TARGET_D_REGISTER_CPU_TARGET_INFO s390_d_register_target_info\n-\n #ifdef DEFAULT_TARGET_64BIT\n #define TARGET_DEFAULT     (MASK_64BIT | MASK_ZARCH | MASK_HARD_DFP\t\\\n \t\t\t    | MASK_OPT_HTM | MASK_OPT_VX)"}, {"sha": "0ace79d5aae476cc3e3c617580a6db45a1c79869", "filename": "gcc/config/sol2-d.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fsol2-d.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fsol2-d.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2-d.cc?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -18,9 +18,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n-#include \"tm.h\"\n-#include \"memmodel.h\"\n-#include \"tm_p.h\"\n+#include \"tm_d.h\"\n #include \"d/d-target.h\"\n #include \"d/d-target-def.h\"\n "}, {"sha": "f8a3cf30f25fd80ef9e7f3ea4c84e141fbe63883", "filename": "gcc/config/sparc/sparc-d.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fsparc%2Fsparc-d.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fsparc%2Fsparc-d.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-d.cc?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -21,6 +21,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"tm_d.h\"\n #include \"d/d-target.h\"\n #include \"d/d-target-def.h\"\n "}, {"sha": "b9d8ccf15ab14a8a6fc3c8813eb9b44833fa0916", "filename": "gcc/config/sparc/sparc-d.h", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fsparc%2Fsparc-d.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fsparc%2Fsparc-d.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-d.h?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -0,0 +1,24 @@\n+/* Definitions for the D front end on the SPARC architecture.\n+   Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Routines implemented in sparc-d.cc  */\n+extern void sparc_d_target_versions (void);\n+extern void sparc_d_register_target_info (void);\n+\n+/* Target hooks for D language.  */\n+#define TARGET_D_CPU_VERSIONS sparc_d_target_versions\n+#define TARGET_D_REGISTER_CPU_TARGET_INFO sparc_d_register_target_info"}, {"sha": "4ddd00c81e1a90e7cb323c692d4c2f43cacdee4f", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -112,8 +112,4 @@ unsigned int sparc_regmode_natural_size (machine_mode);\n \n extern rtl_opt_pass *make_pass_work_around_errata (gcc::context *);\n \n-/* Routines implemented in sparc-d.cc  */\n-extern void sparc_d_target_versions (void);\n-extern void sparc_d_register_target_info (void);\n-\n #endif /* __SPARC_PROTOS_H__ */"}, {"sha": "155e1da7ad7b33d23e7894c194116fe2c8c9acc8", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -27,10 +27,6 @@ along with GCC; see the file COPYING3.  If not see\n \n #define TARGET_CPU_CPP_BUILTINS() sparc_target_macros ()\n \n-/* Target hooks for D language.  */\n-#define TARGET_D_CPU_VERSIONS sparc_d_target_versions\n-#define TARGET_D_REGISTER_CPU_TARGET_INFO sparc_d_register_target_info\n-\n /* Specify this in a cover file to provide bi-architecture (32/64) support.  */\n /* #define SPARC_BI_ARCH */\n "}, {"sha": "39f7ed129a4713846de18e9883f25e7fc4dc7342", "filename": "gcc/configure", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -13023,7 +13023,6 @@ fi\n \n tm_file=\"${tm_file} defaults.h\"\n tm_p_file=\"${tm_p_file} tm-preds.h\"\n-tm_d_file=\"${tm_d_file} defaults.h\"\n host_xm_file=\"auto-host.h ansidecl.h ${host_xm_file}\"\n build_xm_file=\"${build_auto} ansidecl.h ${build_xm_file}\"\n # We don't want ansidecl.h in target files, write code there in ISO/GNU C.\n@@ -13418,13 +13417,9 @@ for f in $tm_p_file; do\n done\n \n tm_d_file_list=\n-tm_d_include_list=\"options.h insn-constants.h\"\n+tm_d_include_list=\n for f in $tm_d_file; do\n   case $f in\n-    defaults.h )\n-       tm_d_file_list=\"${tm_d_file_list} \\$(srcdir)/$f\"\n-       tm_d_include_list=\"${tm_d_include_list} $f\"\n-       ;;\n     * )\n        tm_d_file_list=\"${tm_d_file_list} \\$(srcdir)/config/$f\"\n        tm_d_include_list=\"${tm_d_include_list} config/$f\"\n@@ -19694,7 +19689,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19697 \"configure\"\n+#line 19692 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -19800,7 +19795,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19803 \"configure\"\n+#line 19798 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "50bb61c1b6169a3c590b1d7040a06bcc77a5671a", "filename": "gcc/configure.ac", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ad6f8415171798adaff5787400505ce9882144/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=d5ad6f8415171798adaff5787400505ce9882144", "patch": "@@ -2109,7 +2109,6 @@ AC_SUBST(HAVE_AUTO_BUILD)\n \n tm_file=\"${tm_file} defaults.h\"\n tm_p_file=\"${tm_p_file} tm-preds.h\"\n-tm_d_file=\"${tm_d_file} defaults.h\"\n host_xm_file=\"auto-host.h ansidecl.h ${host_xm_file}\"\n build_xm_file=\"${build_auto} ansidecl.h ${build_xm_file}\"\n # We don't want ansidecl.h in target files, write code there in ISO/GNU C.\n@@ -2353,13 +2352,9 @@ for f in $tm_p_file; do\n done\n \n tm_d_file_list=\n-tm_d_include_list=\"options.h insn-constants.h\"\n+tm_d_include_list=\n for f in $tm_d_file; do\n   case $f in\n-    defaults.h )\n-       tm_d_file_list=\"${tm_d_file_list} \\$(srcdir)/$f\"\n-       tm_d_include_list=\"${tm_d_include_list} $f\"\n-       ;;\n     * )\n        tm_d_file_list=\"${tm_d_file_list} \\$(srcdir)/config/$f\"\n        tm_d_include_list=\"${tm_d_include_list} config/$f\""}]}