{"sha": "81d5198d0093ab144c8a13b85c56ef496192f930", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFkNTE5OGQwMDkzYWIxNDRjOGExM2I4NWM1NmVmNDk2MTkyZjkzMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-05-22T11:25:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-05-22T11:25:14Z"}, "message": "re PR tree-optimization/85834 (ice in set_ssa_val_to, at tree-ssa-sccvn.c:3396)\n\n2018-05-22  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/85834\n\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Properly handle\n\tnon-constant and non-zero memset arguments.\n\n\t* g++.dg/torture/pr85834.C: New testcase.\n\t* gcc.dg/tree-ssa/ssa-fre-64.c: Likewise.\n\nFrom-SVN: r260503", "tree": {"sha": "b60673aa2d1387e9620b928566b7877a2b576894", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b60673aa2d1387e9620b928566b7877a2b576894"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81d5198d0093ab144c8a13b85c56ef496192f930", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81d5198d0093ab144c8a13b85c56ef496192f930", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81d5198d0093ab144c8a13b85c56ef496192f930", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81d5198d0093ab144c8a13b85c56ef496192f930/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a6df9d9044965e3a265ead57bc516a450ad87bf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6df9d9044965e3a265ead57bc516a450ad87bf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6df9d9044965e3a265ead57bc516a450ad87bf6"}], "stats": {"total": 89, "additions": 87, "deletions": 2}, "files": [{"sha": "fd57840aa4b01c7e6efa8b0b590f9a01c82a378e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d5198d0093ab144c8a13b85c56ef496192f930/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d5198d0093ab144c8a13b85c56ef496192f930/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=81d5198d0093ab144c8a13b85c56ef496192f930", "patch": "@@ -1,3 +1,9 @@\n+2018-05-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/85834\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Properly handle\n+\tnon-constant and non-zero memset arguments.\n+\n 2018-05-22  Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/85607"}, {"sha": "9083376af9e1a38dd48533d4e0793f2b745dce3b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d5198d0093ab144c8a13b85c56ef496192f930/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d5198d0093ab144c8a13b85c56ef496192f930/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=81d5198d0093ab144c8a13b85c56ef496192f930", "patch": "@@ -1,3 +1,9 @@\n+2018-05-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/85834\n+\t* g++.dg/torture/pr85834.C: New testcase.\n+\t* gcc.dg/tree-ssa/ssa-fre-64.c: Likewise.\n+\n 2018-05-22  Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/85607"}, {"sha": "bbdc695849c684cd0e05ca74de3471814579e54d", "filename": "gcc/testsuite/g++.dg/torture/pr85834.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d5198d0093ab144c8a13b85c56ef496192f930/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr85834.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d5198d0093ab144c8a13b85c56ef496192f930/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr85834.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr85834.C?ref=81d5198d0093ab144c8a13b85c56ef496192f930", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+\n+typedef __SIZE_TYPE__ a;\n+extern \"C\" void *memset(void *, int, a);\n+typedef struct b c;\n+enum d { e };\n+template <int, typename> class f {\n+public:\n+    template <typename g> f(g);\n+};\n+typedef f<1, long> h;\n+template <typename> struct j {\n+    enum k {};\n+};\n+class l {\n+public:\n+    typedef j<l>::k k;\n+    l(k);\n+    operator d();\n+};\n+struct b {};\n+class m {};\n+c q(h, d);\n+c n(unsigned char o[]) {\n+    int i;\n+    long r;\n+    for (i = 0; i < 4; i++)\n+      r = o[i];\n+    return q(r, l((l::k)e));\n+}\n+m p() {\n+    unsigned char o[4], s = 1;\n+    for (;;) {\n+\tmemset(o, s, 4);\n+\tn(o);\n+\ts = 2;\n+    }\n+}"}, {"sha": "15f278e194546cee821266354111ef2b060f2b7c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d5198d0093ab144c8a13b85c56ef496192f930/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d5198d0093ab144c8a13b85c56ef496192f930/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-64.c?ref=81d5198d0093ab144c8a13b85c56ef496192f930", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-fre1-details -fdump-tree-dse1-details\" } */\n+\n+int foo(unsigned char c, signed char d, int e)\n+{\n+  int res = 0;\n+  char x[256];\n+  __builtin_memset (x, c, 256);\n+  res += x[54];\n+  __builtin_memset (x, d, 256);\n+  res += x[54];\n+  __builtin_memset (x, e, 256);\n+  res += x[54];\n+  return res;\n+}\n+\n+/* The loads get replaced with conversions from c or d and e.  */\n+/* { dg-final { scan-tree-dump-times \"Inserted\" 2 \"fre1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Replaced x\" 3 \"fre1\" } } */\n+/* And the memsets removed as dead.  */\n+/* { dg-final { scan-tree-dump-times \"Deleted dead call\" 3 \"dse1\" } } */"}, {"sha": "884cce12bb36e95e66163ccb86f3b1efe6a1cba9", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d5198d0093ab144c8a13b85c56ef496192f930/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d5198d0093ab144c8a13b85c56ef496192f930/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=81d5198d0093ab144c8a13b85c56ef496192f930", "patch": "@@ -1959,7 +1959,12 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_,\n   if (is_gimple_reg_type (vr->type)\n       && gimple_call_builtin_p (def_stmt, BUILT_IN_MEMSET)\n       && (integer_zerop (gimple_call_arg (def_stmt, 1))\n-\t  || (INTEGRAL_TYPE_P (vr->type) && known_eq (ref->size, 8)))\n+\t  || (INTEGRAL_TYPE_P (vr->type)\n+\t      && CHAR_BIT == 8 && BITS_PER_UNIT == 8\n+\t      && known_eq (ref->size, 8)\n+\t      && known_eq (ref->size, maxsize)\n+\t      && offset.is_constant (&offseti)\n+\t      && offseti % BITS_PER_UNIT == 0))\n       && poly_int_tree_p (gimple_call_arg (def_stmt, 2))\n       && (TREE_CODE (gimple_call_arg (def_stmt, 0)) == ADDR_EXPR\n \t  || TREE_CODE (gimple_call_arg (def_stmt, 0)) == SSA_NAME))\n@@ -2026,7 +2031,16 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_,\n \t  if (integer_zerop (gimple_call_arg (def_stmt, 1)))\n \t    val = build_zero_cst (vr->type);\n \t  else\n-\t    val = fold_convert (vr->type, gimple_call_arg (def_stmt, 1));\n+\t    {\n+\t      code_helper rcode = NOP_EXPR;\n+\t      tree ops[3] = {};\n+\t      ops[0] = gimple_call_arg (def_stmt, 1);\n+\t      val = vn_nary_build_or_lookup (rcode, vr->type, ops);\n+\t      if (!val\n+\t\t  || (TREE_CODE (val) == SSA_NAME\n+\t\t      && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (val)))\n+\t\treturn (void *)-1;\n+\t    }\n \t  return vn_reference_lookup_or_insert_for_pieces\n \t           (vuse, vr->set, vr->type, vr->operands, val);\n \t}"}]}