{"sha": "667c1c2c84c36658a58f86a399dbee45ee982a09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY3YzFjMmM4NGMzNjY1OGE1OGY4NmEzOTlkYmVlNDVlZTk4MmEwOQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "1999-11-27T13:59:20Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1999-11-27T13:59:20Z"}, "message": "combine.c (try_combine): Add code to try to merge a set of a two-word pseudo to a constant with a...\n\n\t* combine.c (try_combine): Add code to try to merge a set of a\n\ttwo-word pseudo to a constant with a setting of one of those words\n\tto a constant.\n\nFrom-SVN: r30674", "tree": {"sha": "38a2610f874887ae242389a841d4d604f30ace51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38a2610f874887ae242389a841d4d604f30ace51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/667c1c2c84c36658a58f86a399dbee45ee982a09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/667c1c2c84c36658a58f86a399dbee45ee982a09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/667c1c2c84c36658a58f86a399dbee45ee982a09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/667c1c2c84c36658a58f86a399dbee45ee982a09/comments", "author": null, "committer": null, "parents": [{"sha": "1baa375feaa22e3dbf6df7a066ba0d4a2b3a02d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1baa375feaa22e3dbf6df7a066ba0d4a2b3a02d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1baa375feaa22e3dbf6df7a066ba0d4a2b3a02d8"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "97f5d0010abb5e77951105dc4f7a48786d99154f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/667c1c2c84c36658a58f86a399dbee45ee982a09/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/667c1c2c84c36658a58f86a399dbee45ee982a09/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=667c1c2c84c36658a58f86a399dbee45ee982a09", "patch": "@@ -1,5 +1,9 @@\n Sat Nov 27 08:38:26 1999  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* combine.c (try_combine): Add code to try to merge a set of a\n+\ttwo-word pseudo to a constant with a setting of one of those words\n+\tto a constant.\n+\n \t* fold-const.c (negate_expr, associate_trees, extract_muldiv): New.\n \t(split_tree): Completely rework to make more general.\n \t(make_range, fold): Call negate_expr."}, {"sha": "d028a93f9dc9ca5734818a09b25e1fd235ea83e1", "filename": "gcc/combine.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/667c1c2c84c36658a58f86a399dbee45ee982a09/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/667c1c2c84c36658a58f86a399dbee45ee982a09/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=667c1c2c84c36658a58f86a399dbee45ee982a09", "patch": "@@ -1563,6 +1563,52 @@ try_combine (i3, i2, i1)\n \t    }\n     }\n \n+  /* If I2 is setting a double-word pseudo to a constant and I3 is setting\n+     one of those words to another constant, merge them by making a new\n+     constant.  */\n+  if (i1 == 0\n+      && (temp = single_set (i2)) != 0\n+      && (GET_CODE (SET_SRC (temp)) == CONST_INT\n+\t  || GET_CODE (SET_SRC (temp)) == CONST_DOUBLE)\n+      && GET_CODE (SET_DEST (temp)) == REG\n+      && GET_MODE_CLASS (GET_MODE (SET_DEST (temp))) == MODE_INT\n+      && GET_MODE_SIZE (GET_MODE (SET_DEST (temp))) == 2 * UNITS_PER_WORD\n+      && GET_CODE (PATTERN (i3)) == SET\n+      && GET_CODE (SET_DEST (PATTERN (i3))) == SUBREG\n+      && SUBREG_REG (SET_DEST (PATTERN (i3))) == SET_DEST (temp)\n+      && GET_MODE_CLASS (GET_MODE (SET_DEST (PATTERN (i3)))) == MODE_INT\n+      && GET_MODE_SIZE (GET_MODE (SET_DEST (PATTERN (i3)))) == UNITS_PER_WORD\n+      && GET_CODE (SET_SRC (PATTERN (i3))) == CONST_INT)\n+    {\n+      HOST_WIDE_INT lo, hi;\n+\n+      if (GET_CODE (SET_SRC (temp)) == CONST_INT)\n+\tlo = INTVAL (SET_SRC (temp)), hi = lo < 0 ? -1 : 0;\n+      else\n+\t{\n+\t  lo = CONST_DOUBLE_LOW (SET_SRC (temp));\n+\t  hi = CONST_DOUBLE_HIGH (SET_SRC (temp));\n+\t}\n+\n+      if (subreg_lowpart_p (SET_DEST (PATTERN (i3))))\n+\tlo = INTVAL (SET_SRC (PATTERN (i3)));\n+      else\n+\thi = INTVAL (SET_SRC (PATTERN (i3)));\n+\n+      combine_merges++;\n+      subst_insn = i3;\n+      subst_low_cuid = INSN_CUID (i2);\n+      added_sets_2 = added_sets_1 = 0;\n+      i2dest = SET_DEST (temp);\n+\n+      SUBST (SET_SRC (temp),\n+\t     immed_double_const (lo, hi, GET_MODE (SET_DEST (temp))));\n+\n+      newpat = PATTERN (i2);\n+      i3_subst_into_i2 = 1;\n+      goto validate_replacement;\n+    }\n+\n #ifndef HAVE_cc0\n   /* If we have no I1 and I2 looks like:\n \t(parallel [(set (reg:CC X) (compare:CC OP (const_int 0)))"}]}