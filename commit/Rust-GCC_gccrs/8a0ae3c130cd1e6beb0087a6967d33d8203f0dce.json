{"sha": "8a0ae3c130cd1e6beb0087a6967d33d8203f0dce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGEwYWUzYzEzMGNkMWU2YmViMDA4N2E2OTY3ZDMzZDgyMDNmMGRjZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-06T17:58:57Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2020-01-06T17:58:57Z"}, "message": "Check mask argument's type when vectorising conditional functions\n\nWe can't yet vectorise conditional internal functions whose boolean\ncondition is fed by a data access (or more generally, by a tree of logic\nops in which all the leaves are data accesses).  Although we should add\nthat eventually, we'd need further work to generate good-quality code.\n\nUnlike vectorizable_load and vectorizalbe_store, vectorizable_call\nwasn't checking whether the mask had a suitable type, leading to an\nICE on the testcases.\n\n2020-01-06  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vect-stmts.c (vect_check_load_store_mask): Rename to...\n\t(vect_check_scalar_mask): ...this.\n\t(vectorizable_store, vectorizable_load): Update call accordingly.\n\t(vectorizable_call): Use vect_check_scalar_mask to check the mask\n\targument in calls to conditional internal functions.\n\ngcc/testsuite/\n\t* gcc.dg/vect/vect-cond-arith-8.c: New test.\n\t* gcc.target/aarch64/sve/cond_fmul_5.c: Likewise.\n\nFrom-SVN: r279907", "tree": {"sha": "af87d5ce5e1b70a6840cf92abbb0423c748f5c51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af87d5ce5e1b70a6840cf92abbb0423c748f5c51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a0ae3c130cd1e6beb0087a6967d33d8203f0dce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a0ae3c130cd1e6beb0087a6967d33d8203f0dce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a0ae3c130cd1e6beb0087a6967d33d8203f0dce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a0ae3c130cd1e6beb0087a6967d33d8203f0dce/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d54fc770768add469f646c20c0cab4e42510d895", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d54fc770768add469f646c20c0cab4e42510d895", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d54fc770768add469f646c20c0cab4e42510d895"}], "stats": {"total": 65, "additions": 46, "deletions": 19}, "files": [{"sha": "d72076f3e1c4d6eb08802ebd985c51fa1f721187", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a0ae3c130cd1e6beb0087a6967d33d8203f0dce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a0ae3c130cd1e6beb0087a6967d33d8203f0dce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a0ae3c130cd1e6beb0087a6967d33d8203f0dce", "patch": "@@ -1,3 +1,11 @@\n+2020-01-06  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-stmts.c (vect_check_load_store_mask): Rename to...\n+\t(vect_check_scalar_mask): ...this.\n+\t(vectorizable_store, vectorizable_load): Update call accordingly.\n+\t(vectorizable_call): Use vect_check_scalar_mask to check the mask\n+\targument in calls to conditional internal functions.\n+\n 2020-01-06  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* config/gcn/gcn-valu.md (subv64di3): Use separate alternatives for"}, {"sha": "3a6f6c613c6a2adff366477a0b25807fa2370ed2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a0ae3c130cd1e6beb0087a6967d33d8203f0dce/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a0ae3c130cd1e6beb0087a6967d33d8203f0dce/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8a0ae3c130cd1e6beb0087a6967d33d8203f0dce", "patch": "@@ -1,3 +1,8 @@\n+2020-01-06  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/vect-cond-arith-8.c: New test.\n+\t* gcc.target/aarch64/sve/cond_fmul_5.c: Likewise.\n+\n 2020-01-06  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/79592"}, {"sha": "e4b2abb737a1ab958f055c7031a3d2a440d37e1c", "filename": "gcc/testsuite/gcc.dg/vect/vect-cond-arith-8.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a0ae3c130cd1e6beb0087a6967d33d8203f0dce/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-arith-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a0ae3c130cd1e6beb0087a6967d33d8203f0dce/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-arith-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-arith-8.c?ref=8a0ae3c130cd1e6beb0087a6967d33d8203f0dce", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+\n+void\n+f (float *x, _Bool *cond, float *y)\n+{\n+  for (int i = 0; i < 100; ++i)\n+    x[i] = cond[i] ? y[i] * 100 : y[i];\n+}"}, {"sha": "c98bf3fe84f4cb18612cb4445e47113f1dc21b35", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fmul_5.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a0ae3c130cd1e6beb0087a6967d33d8203f0dce/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmul_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a0ae3c130cd1e6beb0087a6967d33d8203f0dce/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmul_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmul_5.c?ref=8a0ae3c130cd1e6beb0087a6967d33d8203f0dce", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+void\n+f (float *x, _Bool *cond, float *y)\n+{\n+  for (int i = 0; i < 100; ++i)\n+    x[i] = cond[i] ? y[i] * 100 : y[i];\n+}"}, {"sha": "0101d4c5bf8ae900c9a5c1e8390df2115b64f18c", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a0ae3c130cd1e6beb0087a6967d33d8203f0dce/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a0ae3c130cd1e6beb0087a6967d33d8203f0dce/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=8a0ae3c130cd1e6beb0087a6967d33d8203f0dce", "patch": "@@ -2534,14 +2534,14 @@ get_load_store_type (stmt_vec_info stmt_info, tree vectype, bool slp,\n }\n \n /* Return true if boolean argument MASK is suitable for vectorizing\n-   conditional load or store STMT_INFO.  When returning true, store the type\n+   conditional operation STMT_INFO.  When returning true, store the type\n    of the definition in *MASK_DT_OUT and the type of the vectorized mask\n    in *MASK_VECTYPE_OUT.  */\n \n static bool\n-vect_check_load_store_mask (stmt_vec_info stmt_info, tree mask,\n-\t\t\t    vect_def_type *mask_dt_out,\n-\t\t\t    tree *mask_vectype_out)\n+vect_check_scalar_mask (stmt_vec_info stmt_info, tree mask,\n+\t\t\tvect_def_type *mask_dt_out,\n+\t\t\ttree *mask_vectype_out)\n {\n   vec_info *vinfo = stmt_info->vinfo;\n   if (!VECT_SCALAR_BOOLEAN_TYPE_P (TREE_TYPE (mask)))\n@@ -3262,6 +3262,14 @@ vectorizable_call (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n   for (i = 0; i < nargs; i++)\n     {\n       op = gimple_call_arg (stmt, i);\n+\n+      if ((int) i == mask_opno)\n+\t{\n+\t  if (!vect_check_scalar_mask (stmt_info, op, &dt[i], &vectypes[i]))\n+\t    return false;\n+\t  continue;\n+\t}\n+\n       if (!vect_is_simple_use (op, vinfo, &dt[i], &vectypes[i]))\n \t{\n \t  if (dump_enabled_p ())\n@@ -3270,11 +3278,6 @@ vectorizable_call (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t  return false;\n \t}\n \n-      /* Skip the mask argument to an internal function.  This operand\n-\t has been converted via a pattern if necessary.  */\n-      if ((int) i == mask_opno)\n-\tcontinue;\n-\n       /* We can only handle calls with arguments of the same type.  */\n       if (rhs_type\n \t  && !types_compatible_p (rhs_type, TREE_TYPE (op)))\n@@ -3544,12 +3547,6 @@ vectorizable_call (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t      continue;\n \t    }\n \n-\t  if (mask_opno >= 0 && !vectypes[mask_opno])\n-\t    {\n-\t      gcc_assert (modifier != WIDEN);\n-\t      vectypes[mask_opno] = truth_type_for (vectype_in);\n-\t    }\n-\n \t  for (i = 0; i < nargs; i++)\n \t    {\n \t      op = gimple_call_arg (stmt, i);\n@@ -7378,8 +7375,8 @@ vectorizable_store (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n       if (mask_index >= 0)\n \t{\n \t  mask = gimple_call_arg (call, mask_index);\n-\t  if (!vect_check_load_store_mask (stmt_info, mask, &mask_dt,\n-\t\t\t\t\t   &mask_vectype))\n+\t  if (!vect_check_scalar_mask (stmt_info, mask, &mask_dt,\n+\t\t\t\t       &mask_vectype))\n \t    return false;\n \t}\n     }\n@@ -8598,8 +8595,8 @@ vectorizable_load (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n       if (mask_index >= 0)\n \t{\n \t  mask = gimple_call_arg (call, mask_index);\n-\t  if (!vect_check_load_store_mask (stmt_info, mask, &mask_dt,\n-\t\t\t\t\t   &mask_vectype))\n+\t  if (!vect_check_scalar_mask (stmt_info, mask, &mask_dt,\n+\t\t\t\t       &mask_vectype))\n \t    return false;\n \t}\n     }"}]}