{"sha": "950ebbeaf050929030c0bb0b89c9d0aa870d973d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTUwZWJiZWFmMDUwOTI5MDMwYzBiYjBiODljOWQwYWE4NzBkOTczZA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-03-24T15:43:22Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-03-24T15:43:22Z"}, "message": "2003-03-24  Michael Koch  <konqueror@gmx.de>\n\n\t* java/io/DataOutputStream.java\n\t(write): Merged from classpath.\n\t* java/io/File.java:\n\tMerged copyrigth with classpath.\n\t* java/io/FileInputStream.java\n\t(getChannel): Made it synchronized instead of using a synchronized\n\tblock.\n\t* java/io/FileOutputStream.java: Reformatted.\n\t* java/io/InputStreamReader.java\n\t(InputStreamReader): Renamed enc to encoding_name.\n\t(close): Merged documentation from classpath.\n\t(getEncoding): Merged documentation from classpath.\n\t(ready): Merged documentation from classpath.\n\t(read): Merged documentation from classpath.\n\t* java/io/LineNumberReader.java\n\t(lineNumber): Made it private.\n\t(LineNumberReader): Use Constant instead of a direct value.\n\t* java/io/OutputStreamWriter.java\n\t(OutputStreamWriter): Renamed enc to encoding_scheme, merged\n\tdocumentation from classpath.\n\t(close): Merged documentation from classpath.\n\t(flush): Merged documentation from classpath.\n\t(write): Merged documentation from classpath.\n\t* java/io/PrintStream.java: Reformatted.\n\nFrom-SVN: r64806", "tree": {"sha": "750d1ed56fc294b0379fe7e0121d2ea862ae4dde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/750d1ed56fc294b0379fe7e0121d2ea862ae4dde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/950ebbeaf050929030c0bb0b89c9d0aa870d973d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/950ebbeaf050929030c0bb0b89c9d0aa870d973d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/950ebbeaf050929030c0bb0b89c9d0aa870d973d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/950ebbeaf050929030c0bb0b89c9d0aa870d973d/comments", "author": null, "committer": null, "parents": [{"sha": "6db450f90a63561e279076b6b143c035369265af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6db450f90a63561e279076b6b143c035369265af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6db450f90a63561e279076b6b143c035369265af"}], "stats": {"total": 190, "additions": 140, "deletions": 50}, "files": [{"sha": "39a8697674848e490fd1348b709558d61290eed2", "filename": "libjava/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/950ebbeaf050929030c0bb0b89c9d0aa870d973d/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/950ebbeaf050929030c0bb0b89c9d0aa870d973d/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=950ebbeaf050929030c0bb0b89c9d0aa870d973d", "patch": "@@ -1,3 +1,30 @@\n+2003-03-24  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/io/DataOutputStream.java\n+\t(write): Merged from classpath.\n+\t* java/io/File.java:\n+\tMerged copyrigth with classpath.\n+\t* java/io/FileInputStream.java\n+\t(getChannel): Made it synchronized instead of using a synchronized\n+\tblock.\n+\t* java/io/FileOutputStream.java: Reformatted.\n+\t* java/io/InputStreamReader.java\n+\t(InputStreamReader): Renamed enc to encoding_name.\n+\t(close): Merged documentation from classpath.\n+\t(getEncoding): Merged documentation from classpath.\n+\t(ready): Merged documentation from classpath.\n+\t(read): Merged documentation from classpath.\n+\t* java/io/LineNumberReader.java\n+\t(lineNumber): Made it private.\n+\t(LineNumberReader): Use Constant instead of a direct value.\n+\t* java/io/OutputStreamWriter.java\n+\t(OutputStreamWriter): Renamed enc to encoding_scheme, merged\n+\tdocumentation from classpath.\n+\t(close): Merged documentation from classpath.\n+\t(flush): Merged documentation from classpath.\n+\t(write): Merged documentation from classpath.\n+\t* java/io/PrintStream.java: Reformatted.\n+\n 2003-03-24  Michael Koch  <konqueror@gmx.de>\n \n \t* javax/swing/text/ComponentView.java"}, {"sha": "644b5901c33df8c9ab86eb9d3a5037b6cbc6c9fe", "filename": "libjava/java/io/DataOutputStream.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/950ebbeaf050929030c0bb0b89c9d0aa870d973d/libjava%2Fjava%2Fio%2FDataOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/950ebbeaf050929030c0bb0b89c9d0aa870d973d/libjava%2Fjava%2Fio%2FDataOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FDataOutputStream.java?ref=950ebbeaf050929030c0bb0b89c9d0aa870d973d", "patch": "@@ -122,10 +122,10 @@ public synchronized void write (int b) throws IOException\n    *\n    * @exception IOException If an error occurs.\n    */\n-  public synchronized void write (byte[] b, int off, int len)\n-    throws IOException, NullPointerException, IndexOutOfBoundsException\n+  public synchronized void write (byte[] buf, int offset, int len) \n+     throws IOException\n   {\n-    out.write(b, off, len);\n+    out.write(buf, offset, len);\n     written += len;\n   }\n "}, {"sha": "eb457b37000fa0616afe282dd9bd05c5cdb05859", "filename": "libjava/java/io/File.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/950ebbeaf050929030c0bb0b89c9d0aa870d973d/libjava%2Fjava%2Fio%2FFile.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/950ebbeaf050929030c0bb0b89c9d0aa870d973d/libjava%2Fjava%2Fio%2FFile.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFile.java?ref=950ebbeaf050929030c0bb0b89c9d0aa870d973d", "patch": "@@ -1,5 +1,5 @@\n /* File.java -- Class representing a file on disk\n-   Copyright (C) 1998, 1999, 2001, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n "}, {"sha": "533dd080461f69c41f52bdb47c1eb8da6039bb9c", "filename": "libjava/java/io/FileInputStream.java", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/950ebbeaf050929030c0bb0b89c9d0aa870d973d/libjava%2Fjava%2Fio%2FFileInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/950ebbeaf050929030c0bb0b89c9d0aa870d973d/libjava%2Fjava%2Fio%2FFileInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileInputStream.java?ref=950ebbeaf050929030c0bb0b89c9d0aa870d973d", "patch": "@@ -280,15 +280,12 @@ public long skip(long n) throws IOException\n    * A file channel must be created by first creating an instance of\n    * Input/Output/RandomAccessFile and invoking the getChannel() method on it.\n    */\n-  public FileChannel getChannel ()\n+  public synchronized FileChannel getChannel () \n   {\n-    synchronized (this)\n-      {\n-        if (ch == null)\n-          ch = new FileChannelImpl (fd, false, this);\n+    if (ch == null)\n+      ch = new FileChannelImpl (fd, false, this);\n     \n-        return ch;\n-      }\n+    return ch;\n   }\n \n } // class FileInputStream"}, {"sha": "ac823616c16b26a7ccbc5c0dd5efc3c9d92374e1", "filename": "libjava/java/io/FileOutputStream.java", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/950ebbeaf050929030c0bb0b89c9d0aa870d973d/libjava%2Fjava%2Fio%2FFileOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/950ebbeaf050929030c0bb0b89c9d0aa870d973d/libjava%2Fjava%2Fio%2FFileOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileOutputStream.java?ref=950ebbeaf050929030c0bb0b89c9d0aa870d973d", "patch": "@@ -41,18 +41,21 @@\n import java.nio.channels.FileChannel;\n import gnu.java.nio.FileChannelImpl;\n \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date September 24, 1998 \n- */\n-\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * Status:  Complete to version 1.1.\n  */\n \n+/**\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date September 24, 1998 \n+ */\n public class FileOutputStream extends OutputStream\n {\n+  // Instance variables.\n+  private FileDescriptor fd;\n+  private FileChannel ch;\n+  \n   public FileOutputStream (String path, boolean append)\n     throws SecurityException, FileNotFoundException\n   {\n@@ -159,7 +162,4 @@ public FileChannel getChannel ()\n       }\n   }\n \n-  // Instance variables.\n-  private FileDescriptor fd;\n-  private FileChannel ch;\n }"}, {"sha": "70213b5f843e512ab79bf649155292805548466b", "filename": "libjava/java/io/InputStreamReader.java", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/950ebbeaf050929030c0bb0b89c9d0aa870d973d/libjava%2Fjava%2Fio%2FInputStreamReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/950ebbeaf050929030c0bb0b89c9d0aa870d973d/libjava%2Fjava%2Fio%2FInputStreamReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FInputStreamReader.java?ref=950ebbeaf050929030c0bb0b89c9d0aa870d973d", "patch": "@@ -66,10 +66,10 @@ public InputStreamReader(InputStream in)\n     this(in, BytesToUnicode.getDefaultDecoder());\n   }\n \n-  public InputStreamReader(InputStream in, String enc)\n+  public InputStreamReader(InputStream in, String encoding_name)\n     throws UnsupportedEncodingException\n   {\n-    this(in, BytesToUnicode.getDecoder(enc));\n+    this(in, BytesToUnicode.getDecoder(encoding_name));\n   }\n \n   private InputStreamReader(InputStream in, BytesToUnicode decoder)\n@@ -88,6 +88,12 @@ private InputStreamReader(InputStream in, BytesToUnicode decoder)\n     converter.setInput(this.in.buf, 0, 0);\n   }\n \n+  /**\n+   * This method closes this stream, as well as the underlying \n+   * <code>InputStream</code>.\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   public void close() throws IOException\n   {\n     synchronized (lock)\n@@ -100,11 +106,29 @@ public void close() throws IOException\n       }\n   }\n \n+  /**\n+   * This method returns the name of the encoding that is currently in use\n+   * by this object.  If the stream has been closed, this method is allowed\n+   * to return <code>null</code>.\n+   *\n+   * @param The current encoding name\n+   */\n   public String getEncoding()\n   {\n     return in != null ? converter.getName() : null;\n   }\n \n+  /**\n+   * This method checks to see if the stream is read to be read.  It\n+   * will return <code>true</code> if is, or <code>false</code> if it is not.\n+   * If the stream is not ready to be read, it could (although is not required\n+   * to) block on the next read attempt.\n+   *\n+   * @return <code>true</code> if the stream is ready to be read, \n+   * <code>false</code> otherwise\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   public boolean ready() throws IOException\n   {\n     synchronized (lock)\n@@ -149,6 +173,13 @@ public int read(char buf[], int offset, int length) throws IOException\n       }\n   }\n \n+  /**\n+   * This method reads a single character of data from the stream.\n+   *\n+   * @return The char read, as an int, or -1 if end of stream.\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   public int read() throws IOException\n   {\n     synchronized (lock)\n@@ -198,4 +229,6 @@ private boolean refill () throws IOException\n \t  }\n       }\n   }\n-}\n+\n+} // class InputStreamReader\n+"}, {"sha": "9d80745d2fabdf00ec5bd2d16aaf5d74abc40bc9", "filename": "libjava/java/io/LineNumberReader.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/950ebbeaf050929030c0bb0b89c9d0aa870d973d/libjava%2Fjava%2Fio%2FLineNumberReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/950ebbeaf050929030c0bb0b89c9d0aa870d973d/libjava%2Fjava%2Fio%2FLineNumberReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FLineNumberReader.java?ref=950ebbeaf050929030c0bb0b89c9d0aa870d973d", "patch": "@@ -70,7 +70,7 @@\n public class LineNumberReader extends BufferedReader\n {\n   /** The current line number. */\n-  int lineNumber;\n+  private int lineNumber;\n \n   /**\n     * Create a new <code>LineNumberReader</code> that reads from the\n@@ -81,7 +81,7 @@ public class LineNumberReader extends BufferedReader\n     */\n   public LineNumberReader(Reader in)\n   {\n-    super(in, 8192);\n+    super(in, DEFAULT_BUFFER_SIZE);\n   }\n \n   /**"}, {"sha": "1d63d5650d110b093e57e69cbadea9acd122c3c7", "filename": "libjava/java/io/OutputStreamWriter.java", "status": "modified", "additions": 41, "deletions": 8, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/950ebbeaf050929030c0bb0b89c9d0aa870d973d/libjava%2Fjava%2Fio%2FOutputStreamWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/950ebbeaf050929030c0bb0b89c9d0aa870d973d/libjava%2Fjava%2Fio%2FOutputStreamWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FOutputStreamWriter.java?ref=950ebbeaf050929030c0bb0b89c9d0aa870d973d", "patch": "@@ -57,11 +57,6 @@ public class OutputStreamWriter extends Writer\n   private char[] work;\n   private int wcount;\n \n-  public String getEncoding()\n-  {\n-    return out != null ? converter.getName() : null;\n-  }\n-\n   private OutputStreamWriter(OutputStream out, UnicodeToBytes encoder)\n   {\n     this.out = out instanceof BufferedOutputStream \n@@ -72,17 +67,29 @@ private OutputStreamWriter(OutputStream out, UnicodeToBytes encoder)\n     this.converter = encoder;\n   }\n \n-  public OutputStreamWriter(OutputStream out, String enc)\n+  public OutputStreamWriter(OutputStream out, String encoding_scheme)\n    throws UnsupportedEncodingException\n   {\n-    this(out, UnicodeToBytes.getEncoder(enc));\n+    this(out, UnicodeToBytes.getEncoder(encoding_scheme));\n   }\n \n+  /**\n+   * This method initializes a new instance of <code>OutputStreamWriter</code>\n+   * to write to the specified stream using the default encoding.\n+   *\n+   * @param out The <code>OutputStream</code> to write to\n+   */\n   public OutputStreamWriter(OutputStream out)\n   {\n     this(out, UnicodeToBytes.getDefaultEncoder());\n   }\n \n+  /**\n+   * This method closes this stream, and the underlying \n+   * <code>OutputStream</code>\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   public void close() throws IOException\n   {\n     synchronized (lock)\n@@ -97,6 +104,23 @@ public void close() throws IOException\n       }\n   }\n \n+  /**\n+   * This method returns the name of the character encoding scheme currently\n+   * in use by this stream.  If the stream has been closed, then this method\n+   * may return <code>null</code>.\n+   *\n+   * @return The encoding scheme name\n+   */\n+  public String getEncoding()\n+  {\n+    return out != null ? converter.getName() : null;\n+  }\n+\n+  /**\n+   * This method flushes any buffered bytes to the underlying output sink.\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   public void flush() throws IOException\n   {\n     synchronized (lock)\n@@ -186,6 +210,13 @@ public void write(String str, int offset, int count)\n       }\n   }\n \n+  /**\n+   * This method writes a single character to the output stream.\n+   *\n+   * @param c The char to write, passed as an int.\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   public void write(int ch) throws IOException\n   {\n     synchronized (lock)\n@@ -203,4 +234,6 @@ public void write(int ch) throws IOException\n \twork[wcount++] = (char) ch;\n       }\n   }\n-}\n+\n+} // class OutputStreamWriter\n+"}, {"sha": "8fc1cb831aa661120dd5df4d5fe9df658dba9b5d", "filename": "libjava/java/io/PrintStream.java", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/950ebbeaf050929030c0bb0b89c9d0aa870d973d/libjava%2Fjava%2Fio%2FPrintStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/950ebbeaf050929030c0bb0b89c9d0aa870d973d/libjava%2Fjava%2Fio%2FPrintStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPrintStream.java?ref=950ebbeaf050929030c0bb0b89c9d0aa870d973d", "patch": "@@ -55,12 +55,30 @@ public class PrintStream extends FilterOutputStream\n    * This leads to some minor duplication, because neither inherits\n    * from the other, and we want to maximize performance. */\n \n+  public PrintStream (OutputStream out)\n+  {\n+    this(out, false);\n+  }\n+\n+  public PrintStream (OutputStream out, boolean auto_flush)\n+  {\n+    super(out);\n+    converter = UnicodeToBytes.getDefaultEncoder();\n+    error = false;\n+    this.auto_flush = auto_flush;\n+  }\n+\n   public boolean checkError ()\n   {\n     flush();\n     return error;\n   }\n \n+  protected void setError ()\n+  {\n+    error = true;\n+  }\n+\n   public void close ()\n   {\n     try\n@@ -258,24 +276,6 @@ public void println (char[] charArray)\n     print(charArray, 0, charArray.length, true);\n   }\n \n-  public PrintStream (OutputStream out)\n-  {\n-    this(out, false);\n-  }\n-\n-  public PrintStream (OutputStream out, boolean af)\n-  {\n-    super(out);\n-    converter = UnicodeToBytes.getDefaultEncoder();\n-    error = false;\n-    auto_flush = af;\n-  }\n-\n-  protected void setError ()\n-  {\n-    error = true;\n-  }\n-\n   public void write (int oneByte)\n   {\n     try"}]}