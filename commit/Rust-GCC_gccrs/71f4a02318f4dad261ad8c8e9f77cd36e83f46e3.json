{"sha": "71f4a02318f4dad261ad8c8e9f77cd36e83f46e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFmNGEwMjMxOGY0ZGFkMjYxYWQ4YzhlOWY3N2NkMzZlODNmNDZlMw==", "commit": {"author": {"name": "Dorit Nuzman", "email": "dorit@il.ibm.com", "date": "2007-09-07T15:00:11Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2007-09-07T15:00:11Z"}, "message": "re PR tree-optimization/33299 (miscompilation with gfortran -O2 -ffast-math -ftree-vectorize)\n\n        PR tree-optimization/33299\n        * tree-vect-transform.c (vect_create_epilog_for_reduction): Update uses\n        for all relevant loop-exit phis, not just the first.\n\nFrom-SVN: r128242", "tree": {"sha": "eb44856e6a9b109989f0270786b08e7349ebe9dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb44856e6a9b109989f0270786b08e7349ebe9dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71f4a02318f4dad261ad8c8e9f77cd36e83f46e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71f4a02318f4dad261ad8c8e9f77cd36e83f46e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71f4a02318f4dad261ad8c8e9f77cd36e83f46e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71f4a02318f4dad261ad8c8e9f77cd36e83f46e3/comments", "author": null, "committer": null, "parents": [{"sha": "ccf64c833ffaa36f74940afcdaef57a688bb4dcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccf64c833ffaa36f74940afcdaef57a688bb4dcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccf64c833ffaa36f74940afcdaef57a688bb4dcf"}], "stats": {"total": 91, "additions": 61, "deletions": 30}, "files": [{"sha": "52dd1492603fbde685929ba69f47e48576d31db0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71f4a02318f4dad261ad8c8e9f77cd36e83f46e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71f4a02318f4dad261ad8c8e9f77cd36e83f46e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71f4a02318f4dad261ad8c8e9f77cd36e83f46e3", "patch": "@@ -1,3 +1,9 @@\n+2007-09-07  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\tPR tree-optimization/33299\n+\t* tree-vect-transform.c (vect_create_epilog_for_reduction): Update uses \n+\tfor all relevant loop-exit phis, not just the first.\n+\n 2007-09-07  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/33330"}, {"sha": "13ab39940a9fa735988c1c8de748e68690f414b0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71f4a02318f4dad261ad8c8e9f77cd36e83f46e3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71f4a02318f4dad261ad8c8e9f77cd36e83f46e3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=71f4a02318f4dad261ad8c8e9f77cd36e83f46e3", "patch": "@@ -1,3 +1,9 @@\n+2007-09-07  Dorit Nuzman  <dorit@il.ibm.com>\n+\t\n+\tPR tree-optimization/33299\n+\t* gfortran.dg/vect/vect.exp: Compile some tests with -ffast-math.\n+\t* gfortran.dg/vect/fast-math-pr33299.f90: New test.\n+\n 2007-09-07  Richard Guenther  <rguenther@suse.de>\n \n \tRevert"}, {"sha": "1de184dba40a303646adaff2900a711b0f3f7f49", "filename": "gcc/testsuite/gfortran.dg/vect/fast-math-pr33299.f90", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71f4a02318f4dad261ad8c8e9f77cd36e83f46e3/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Ffast-math-pr33299.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71f4a02318f4dad261ad8c8e9f77cd36e83f46e3/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Ffast-math-pr33299.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Ffast-math-pr33299.f90?ref=71f4a02318f4dad261ad8c8e9f77cd36e83f46e3", "patch": "@@ -0,0 +1,17 @@\n+! { dg-require-effective-target vect_double }\n+\n+PROGRAM test\n+  REAL(8) :: f,dist(2)\n+  dist = [1.0_8, 0.5_8]\n+  if( f(1.0_8, dist) /= MINVAL(dist)) then\n+    call abort ()\n+  endif\n+END PROGRAM test\n+\n+FUNCTION f( x, dist ) RESULT(s)\n+  REAL(8) :: dist(2), x, s\n+  s = MINVAL(dist)\n+  IF( x < 0 ) s = -s\n+END FUNCTION f\n+\n+! { dg-final { cleanup-tree-dump \"vect\" } }"}, {"sha": "74b064417b66b675c4f9537c2c32cb01274dbe4b", "filename": "gcc/testsuite/gfortran.dg/vect/vect.exp", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71f4a02318f4dad261ad8c8e9f77cd36e83f46e3/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71f4a02318f4dad261ad8c8e9f77cd36e83f46e3/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect.exp?ref=71f4a02318f4dad261ad8c8e9f77cd36e83f46e3", "patch": "@@ -91,12 +91,18 @@ dg-init\n \n # Main loop.\n gfortran-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/vect-*.\\[fF\\]{,90,95,03} ]] $DEFAULT_VECTCFLAGS\n-gfortran-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/pr-*.\\[fF\\]{,90,95,03} ]] $DEFAULT_VECTCFLAGS\n+gfortran-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/pr*.\\[fF\\]{,90,95,03} ]] $DEFAULT_VECTCFLAGS\n \n #### Tests with special options\n global SAVED_DEFAULT_VECTCFLAGS\n set SAVED_DEFAULT_VECTCFLAGS $DEFAULT_VECTCFLAGS\n \n+# -ffast-math tests\n+set DEFAULT_VECTCFLAGS $SAVED_DEFAULT_VECTCFLAGS\n+lappend DEFAULT_VECTCFLAGS \"-ffast-math\"\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/fast-math-*.\\[fF\\]{,90,95,03} ]]  \\\n+        \"\" $DEFAULT_VECTCFLAGS\n+\n # --param vect-max-version-for-alias-checks=0 tests\n set DEFAULT_VECTCFLAGS $SAVED_DEFAULT_VECTCFLAGS\n lappend DEFAULT_VECTCFLAGS \"--param\" \"vect-max-version-for-alias-checks=0\""}, {"sha": "cddebde26ade80bca9a74fba67c338e06faad1e8", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 25, "deletions": 29, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71f4a02318f4dad261ad8c8e9f77cd36e83f46e3/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71f4a02318f4dad261ad8c8e9f77cd36e83f46e3/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=71f4a02318f4dad261ad8c8e9f77cd36e83f46e3", "patch": "@@ -1964,6 +1964,8 @@ vect_create_epilog_for_reduction (tree vect_def, tree stmt,\n   tree operation = GIMPLE_STMT_OPERAND (stmt, 1);\n   bool nested_in_vect_loop = false;\n   int op_type;\n+  VEC(tree,heap) *phis = NULL;\n+  int i;\n   \n   if (nested_in_vect_loop_p (loop, stmt))\n     {\n@@ -2260,11 +2262,7 @@ vect_create_epilog_for_reduction (tree vect_def, tree stmt,\n       epilog_stmt = build_gimple_modify_stmt (new_dest, expr);\n       new_temp = make_ssa_name (new_dest, epilog_stmt);\n       GIMPLE_STMT_OPERAND (epilog_stmt, 0) = new_temp;\n-#if 0\n-      bsi_insert_after (&exit_bsi, epilog_stmt, BSI_NEW_STMT);\n-#else\n       bsi_insert_before (&exit_bsi, epilog_stmt, BSI_SAME_STMT);\n-#endif\n     }\n \n \n@@ -2274,45 +2272,43 @@ vect_create_epilog_for_reduction (tree vect_def, tree stmt,\n      Find the loop-closed-use at the loop exit of the original scalar result.\n      (The reduction result is expected to have two immediate uses - one at the \n      latch block, and one at the loop exit).  */\n-  exit_phi = NULL;\n+  phis = VEC_alloc (tree, heap, 10);\n   FOR_EACH_IMM_USE_FAST (use_p, imm_iter, scalar_dest)\n     {\n       if (!flow_bb_inside_loop_p (loop, bb_for_stmt (USE_STMT (use_p))))\n \t{\n \t  exit_phi = USE_STMT (use_p);\n-\t  break;\n+\t  VEC_quick_push (tree, phis, exit_phi);\n \t}\n     }\n   /* We expect to have found an exit_phi because of loop-closed-ssa form.  */\n-  gcc_assert (exit_phi);\n+  gcc_assert (!VEC_empty (tree, phis));\n \n-  if (nested_in_vect_loop)\n+  for (i = 0; VEC_iterate (tree, phis, i, exit_phi); i++)\n     {\n-      stmt_vec_info stmt_vinfo = vinfo_for_stmt (exit_phi);\n+      if (nested_in_vect_loop)\n+\t{\n+\t  stmt_vec_info stmt_vinfo = vinfo_for_stmt (exit_phi);\n \n-      /* FORNOW. Currently not supporting the case that an inner-loop reduction\n-\t is not used in the outer-loop (but only outside the outer-loop).  */\n-      gcc_assert (STMT_VINFO_RELEVANT_P (stmt_vinfo) \n-\t\t  && !STMT_VINFO_LIVE_P (stmt_vinfo));\n+\t  /* FORNOW. Currently not supporting the case that an inner-loop reduction\n+\t     is not used in the outer-loop (but only outside the outer-loop).  */\n+\t  gcc_assert (STMT_VINFO_RELEVANT_P (stmt_vinfo) \n+\t\t      && !STMT_VINFO_LIVE_P (stmt_vinfo));\n \n-      epilog_stmt = adjustment_def ? epilog_stmt :  new_phi;\n-      STMT_VINFO_VEC_STMT (stmt_vinfo) = epilog_stmt;\n-      set_stmt_info (get_stmt_ann (epilog_stmt),\n-                     new_stmt_vec_info (epilog_stmt, loop_vinfo));\n+\t  epilog_stmt = adjustment_def ? epilog_stmt :  new_phi;\n+\t  STMT_VINFO_VEC_STMT (stmt_vinfo) = epilog_stmt;\n+\t  set_stmt_info (get_stmt_ann (epilog_stmt),\n+\t  new_stmt_vec_info (epilog_stmt, loop_vinfo));\n+\t  continue;\n+\t}\n \n-      if (vect_print_dump_info (REPORT_DETAILS))\n-        {\n-          fprintf (vect_dump, \"vector of partial results after inner-loop:\");\n-          print_generic_expr (vect_dump, epilog_stmt, TDF_SLIM);\n-        }\n-      return;\n+      /* Replace the uses:  */\n+      orig_name = PHI_RESULT (exit_phi);\n+      FOR_EACH_IMM_USE_STMT (use_stmt, imm_iter, orig_name)\n+\tFOR_EACH_IMM_USE_ON_STMT (use_p, imm_iter)\n+\t  SET_USE (use_p, new_temp);\n     }\n-\n-  /* Replace the uses:  */\n-  orig_name = PHI_RESULT (exit_phi);\n-  FOR_EACH_IMM_USE_STMT (use_stmt, imm_iter, orig_name)\n-    FOR_EACH_IMM_USE_ON_STMT (use_p, imm_iter)\n-      SET_USE (use_p, new_temp);\n+  VEC_free (tree, heap, phis);\n } \n \n "}]}