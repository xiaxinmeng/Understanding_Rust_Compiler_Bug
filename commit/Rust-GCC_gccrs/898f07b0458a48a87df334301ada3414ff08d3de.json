{"sha": "898f07b0458a48a87df334301ada3414ff08d3de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk4ZjA3YjA0NThhNDhhODdkZjMzNDMwMWFkYTM0MTRmZjA4ZDNkZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-13T17:58:42Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-13T17:58:42Z"}, "message": "Add support for bitwise reductions\n\nThis patch adds support for the SVE bitwise reduction instructions\n(ANDV, ORV and EORV).  It's a fairly mechanical extension of existing\nREDUC_* operators.\n\n2018-01-13  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* optabs.def (reduc_and_scal_optab, reduc_ior_scal_optab)\n\t(reduc_xor_scal_optab): New optabs.\n\t* doc/md.texi (reduc_and_scal_@var{m}, reduc_ior_scal_@var{m})\n\t(reduc_xor_scal_@var{m}): Document.\n\t* doc/sourcebuild.texi (vect_logical_reduc): Likewise.\n\t* internal-fn.def (IFN_REDUC_AND, IFN_REDUC_IOR, IFN_REDUC_XOR): New\n\tinternal functions.\n\t* fold-const-call.c (fold_const_call): Handle them.\n\t* tree-vect-loop.c (reduction_fn_for_scalar_code): Return the new\n\tinternal functions for BIT_AND_EXPR, BIT_IOR_EXPR and BIT_XOR_EXPR.\n\t* config/aarch64/aarch64-sve.md (reduc_<bit_reduc>_scal_<mode>):\n\t(*reduc_<bit_reduc>_scal_<mode>): New patterns.\n\t* config/aarch64/iterators.md (UNSPEC_ANDV, UNSPEC_ORV)\n\t(UNSPEC_XORV): New unspecs.\n\t(optab): Add entries for them.\n\t(BITWISEV): New int iterator.\n\t(bit_reduc_op): New int attributes.\n\ngcc/testsuite/\n\t* lib/target-supports.exp (check_effective_target_vect_logical_reduc):\n\tNew proc.\n\t* gcc.dg/vect/vect-reduc-or_1.c: Also run for vect_logical_reduc\n\tand add an associated scan-dump test.  Prevent vectorization\n\tof the first two loops.\n\t* gcc.dg/vect/vect-reduc-or_2.c: Likewise.\n\t* gcc.target/aarch64/sve/reduc_1.c: Add AND, IOR and XOR reductions.\n\t* gcc.target/aarch64/sve/reduc_2.c: Likewise.\n\t* gcc.target/aarch64/sve/reduc_1_run.c: Likewise.\n\t(INIT_VECTOR): Tweak initial value so that some bits are always set.\n\t* gcc.target/aarch64/sve/reduc_2_run.c: Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r256624", "tree": {"sha": "3bfed61a2b1fc63096b23d92b6983a7e34e2f6c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bfed61a2b1fc63096b23d92b6983a7e34e2f6c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/898f07b0458a48a87df334301ada3414ff08d3de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/898f07b0458a48a87df334301ada3414ff08d3de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/898f07b0458a48a87df334301ada3414ff08d3de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/898f07b0458a48a87df334301ada3414ff08d3de/comments", "author": null, "committer": null, "parents": [{"sha": "f1739b4829105fa95d6ff6244632d5977169277f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1739b4829105fa95d6ff6244632d5977169277f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1739b4829105fa95d6ff6244632d5977169277f"}], "stats": {"total": 301, "additions": 283, "deletions": 18}, "files": [{"sha": "c7a58956cdc011cd22ba1f5b103997aca3382911", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=898f07b0458a48a87df334301ada3414ff08d3de", "patch": "@@ -1,3 +1,25 @@\n+2018-01-13  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* optabs.def (reduc_and_scal_optab, reduc_ior_scal_optab)\n+\t(reduc_xor_scal_optab): New optabs.\n+\t* doc/md.texi (reduc_and_scal_@var{m}, reduc_ior_scal_@var{m})\n+\t(reduc_xor_scal_@var{m}): Document.\n+\t* doc/sourcebuild.texi (vect_logical_reduc): Likewise.\n+\t* internal-fn.def (IFN_REDUC_AND, IFN_REDUC_IOR, IFN_REDUC_XOR): New\n+\tinternal functions.\n+\t* fold-const-call.c (fold_const_call): Handle them.\n+\t* tree-vect-loop.c (reduction_fn_for_scalar_code): Return the new\n+\tinternal functions for BIT_AND_EXPR, BIT_IOR_EXPR and BIT_XOR_EXPR.\n+\t* config/aarch64/aarch64-sve.md (reduc_<bit_reduc>_scal_<mode>):\n+\t(*reduc_<bit_reduc>_scal_<mode>): New patterns.\n+\t* config/aarch64/iterators.md (UNSPEC_ANDV, UNSPEC_ORV)\n+\t(UNSPEC_XORV): New unspecs.\n+\t(optab): Add entries for them.\n+\t(BITWISEV): New int iterator.\n+\t(bit_reduc_op): New int attributes.\n+\n 2018-01-13  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "b312ab7b71569511902ffe12c95a1d681c358bee", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=898f07b0458a48a87df334301ada3414ff08d3de", "patch": "@@ -1505,6 +1505,26 @@\n   \"<maxmin_uns_op>v\\t%<Vetype>0, %1, %2.<Vetype>\"\n )\n \n+(define_expand \"reduc_<optab>_scal_<mode>\"\n+  [(set (match_operand:<VEL> 0 \"register_operand\")\n+\t(unspec:<VEL> [(match_dup 2)\n+\t\t       (match_operand:SVE_I 1 \"register_operand\")]\n+\t\t      BITWISEV))]\n+  \"TARGET_SVE\"\n+  {\n+    operands[2] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+  }\n+)\n+\n+(define_insn \"*reduc_<optab>_scal_<mode>\"\n+  [(set (match_operand:<VEL> 0 \"register_operand\" \"=w\")\n+\t(unspec:<VEL> [(match_operand:<VPRED> 1 \"register_operand\" \"Upl\")\n+\t\t       (match_operand:SVE_I 2 \"register_operand\" \"w\")]\n+\t\t      BITWISEV))]\n+  \"TARGET_SVE\"\n+  \"<bit_reduc_op>\\t%<Vetype>0, %1, %2.<Vetype>\"\n+)\n+\n ;; Unpredicated floating-point addition.\n (define_expand \"add<mode>3\"\n   [(set (match_operand:SVE_F 0 \"register_operand\")"}, {"sha": "406c5157ee81c28d565cc702f6d69f3e9b96d3c1", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=898f07b0458a48a87df334301ada3414ff08d3de", "patch": "@@ -426,6 +426,9 @@\n     UNSPEC_FMLAL2\t; Used in aarch64-simd.md.\n     UNSPEC_FMLSL2\t; Used in aarch64-simd.md.\n     UNSPEC_SEL\t\t; Used in aarch64-sve.md.\n+    UNSPEC_ANDV\t\t; Used in aarch64-sve.md.\n+    UNSPEC_IORV\t\t; Used in aarch64-sve.md.\n+    UNSPEC_XORV\t\t; Used in aarch64-sve.md.\n     UNSPEC_ANDF\t\t; Used in aarch64-sve.md.\n     UNSPEC_IORF\t\t; Used in aarch64-sve.md.\n     UNSPEC_XORF\t\t; Used in aarch64-sve.md.\n@@ -1344,6 +1347,8 @@\n (define_int_iterator FMAXMINV [UNSPEC_FMAXV UNSPEC_FMINV\n \t\t\t       UNSPEC_FMAXNMV UNSPEC_FMINNMV])\n \n+(define_int_iterator BITWISEV [UNSPEC_ANDV UNSPEC_IORV UNSPEC_XORV])\n+\n (define_int_iterator LOGICALF [UNSPEC_ANDF UNSPEC_IORF UNSPEC_XORF])\n \n (define_int_iterator HADDSUB [UNSPEC_SHADD UNSPEC_UHADD\n@@ -1476,7 +1481,10 @@\n ;; name for consistency with the integer patterns.\n (define_int_attr optab [(UNSPEC_ANDF \"and\")\n \t\t\t(UNSPEC_IORF \"ior\")\n-\t\t\t(UNSPEC_XORF \"xor\")])\n+\t\t\t(UNSPEC_XORF \"xor\")\n+\t\t\t(UNSPEC_ANDV \"and\")\n+\t\t\t(UNSPEC_IORV \"ior\")\n+\t\t\t(UNSPEC_XORV \"xor\")])\n \n (define_int_attr  maxmin_uns [(UNSPEC_UMAXV \"umax\")\n \t\t\t      (UNSPEC_UMINV \"umin\")\n@@ -1504,6 +1512,10 @@\n \t\t\t\t (UNSPEC_FMAXNM \"fmaxnm\")\n \t\t\t\t (UNSPEC_FMINNM \"fminnm\")])\n \n+(define_int_attr bit_reduc_op [(UNSPEC_ANDV \"andv\")\n+\t\t\t       (UNSPEC_IORV \"orv\")\n+\t\t\t       (UNSPEC_XORV \"eorv\")])\n+\n ;; The SVE logical instruction that implements an unspec.\n (define_int_attr logicalf_op [(UNSPEC_ANDF \"and\")\n \t\t \t      (UNSPEC_IORF \"orr\")"}, {"sha": "c66c0b3981fe602511367ab810be35c1e4db0f5c", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=898f07b0458a48a87df334301ada3414ff08d3de", "patch": "@@ -5195,6 +5195,17 @@ Compute the sum of the elements of a vector. The vector is operand 1, and\n operand 0 is the scalar result, with mode equal to the mode of the elements of\n the input vector.\n \n+@cindex @code{reduc_and_scal_@var{m}} instruction pattern\n+@item @samp{reduc_and_scal_@var{m}}\n+@cindex @code{reduc_ior_scal_@var{m}} instruction pattern\n+@itemx @samp{reduc_ior_scal_@var{m}}\n+@cindex @code{reduc_xor_scal_@var{m}} instruction pattern\n+@itemx @samp{reduc_xor_scal_@var{m}}\n+Compute the bitwise @code{AND}/@code{IOR}/@code{XOR} reduction of the elements\n+of a vector of mode @var{m}.  Operand 1 is the vector input and operand 0\n+is the scalar result.  The mode of the scalar result is the same as one\n+element of @var{m}.\n+\n @cindex @code{sdot_prod@var{m}} instruction pattern\n @item @samp{sdot_prod@var{m}}\n @cindex @code{udot_prod@var{m}} instruction pattern"}, {"sha": "25b6af3aa84cf54624ef65d11afbfd9634293f3e", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=898f07b0458a48a87df334301ada3414ff08d3de", "patch": "@@ -1581,6 +1581,9 @@ Target supports 16- and 8-bytes vectors.\n \n @item vect_sizes_32B_16B\n Target supports 32- and 16-bytes vectors.\n+\n+@item vect_logical_reduc\n+Target supports AND, IOR and XOR reduction on vectors.\n @end table\n \n @subsubsection Thread Local Storage attributes"}, {"sha": "60acf96bbf3bfe1d9cc8b1fd7b512abd5f3f9348", "filename": "gcc/fold-const-call.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2Ffold-const-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2Ffold-const-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const-call.c?ref=898f07b0458a48a87df334301ada3414ff08d3de", "patch": "@@ -1181,6 +1181,15 @@ fold_const_call (combined_fn fn, tree type, tree arg)\n     case CFN_REDUC_MIN:\n       return fold_const_reduction (type, arg, MIN_EXPR);\n \n+    case CFN_REDUC_AND:\n+      return fold_const_reduction (type, arg, BIT_AND_EXPR);\n+\n+    case CFN_REDUC_IOR:\n+      return fold_const_reduction (type, arg, BIT_IOR_EXPR);\n+\n+    case CFN_REDUC_XOR:\n+      return fold_const_reduction (type, arg, BIT_XOR_EXPR);\n+\n     default:\n       return fold_const_call_1 (fn, type, arg);\n     }"}, {"sha": "ef79b62efe025702d0db8d2c29553cfa19ebd3ad", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=898f07b0458a48a87df334301ada3414ff08d3de", "patch": "@@ -127,6 +127,12 @@ DEF_INTERNAL_SIGNED_OPTAB_FN (REDUC_MAX, ECF_CONST | ECF_NOTHROW, first,\n \t\t\t      reduc_smax_scal, reduc_umax_scal, unary)\n DEF_INTERNAL_SIGNED_OPTAB_FN (REDUC_MIN, ECF_CONST | ECF_NOTHROW, first,\n \t\t\t      reduc_smin_scal, reduc_umin_scal, unary)\n+DEF_INTERNAL_OPTAB_FN (REDUC_AND, ECF_CONST | ECF_NOTHROW,\n+\t\t       reduc_and_scal, unary)\n+DEF_INTERNAL_OPTAB_FN (REDUC_IOR, ECF_CONST | ECF_NOTHROW,\n+\t\t       reduc_ior_scal, unary)\n+DEF_INTERNAL_OPTAB_FN (REDUC_XOR, ECF_CONST | ECF_NOTHROW,\n+\t\t       reduc_xor_scal, unary)\n \n /* Unary math functions.  */\n DEF_INTERNAL_FLT_FN (ACOS, ECF_CONST, acos, unary)"}, {"sha": "035c8e9d6ec6077dc95e781c0f73914243b3c1e5", "filename": "gcc/optabs.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2Foptabs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2Foptabs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.def?ref=898f07b0458a48a87df334301ada3414ff08d3de", "patch": "@@ -292,6 +292,9 @@ OPTAB_D (reduc_smin_scal_optab, \"reduc_smin_scal_$a\")\n OPTAB_D (reduc_plus_scal_optab, \"reduc_plus_scal_$a\")\n OPTAB_D (reduc_umax_scal_optab, \"reduc_umax_scal_$a\")\n OPTAB_D (reduc_umin_scal_optab, \"reduc_umin_scal_$a\")\n+OPTAB_D (reduc_and_scal_optab,  \"reduc_and_scal_$a\")\n+OPTAB_D (reduc_ior_scal_optab,  \"reduc_ior_scal_$a\")\n+OPTAB_D (reduc_xor_scal_optab,  \"reduc_xor_scal_$a\")\n \n OPTAB_D (sdot_prod_optab, \"sdot_prod$I$a\")\n OPTAB_D (ssum_widen_optab, \"widen_ssum$I$a3\")"}, {"sha": "76f3c8a220029a3849a41d836554d18555b893c6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=898f07b0458a48a87df334301ada3414ff08d3de", "patch": "@@ -1,3 +1,19 @@\n+2018-01-13  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_vect_logical_reduc):\n+\tNew proc.\n+\t* gcc.dg/vect/vect-reduc-or_1.c: Also run for vect_logical_reduc\n+\tand add an associated scan-dump test.  Prevent vectorization\n+\tof the first two loops.\n+\t* gcc.dg/vect/vect-reduc-or_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/reduc_1.c: Add AND, IOR and XOR reductions.\n+\t* gcc.target/aarch64/sve/reduc_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/reduc_1_run.c: Likewise.\n+\t(INIT_VECTOR): Tweak initial value so that some bits are always set.\n+\t* gcc.target/aarch64/sve/reduc_2_run.c: Likewise.\n+\n 2018-01-13  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "cff3f16107f2355fb4e38b3b66596253545ec796", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-or_1.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-or_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-or_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-or_1.c?ref=898f07b0458a48a87df334301ada3414ff08d3de", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-require-effective-target whole_vector_shift } */\n+/* { dg-do run { target { whole_vector_shift || vect_logical_reduc } } } */\n \n /* Write a reduction loop to be reduced using vector shifts.  */\n \n@@ -24,17 +24,17 @@ main (unsigned char argc, char **argv)\n   check_vect ();\n \n   for (i = 0; i < N; i++)\n-    in[i] = (i + i + 1) & 0xfd;\n+    {\n+      in[i] = (i + i + 1) & 0xfd;\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n \n   for (i = 0; i < N; i++)\n     {\n       expected |= in[i];\n-      asm volatile (\"\");\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n-  /* Prevent constant propagation of the entire loop below.  */\n-  asm volatile (\"\" : : : \"memory\");\n-\n   for (i = 0; i < N; i++)\n     sum |= in[i];\n \n@@ -47,5 +47,5 @@ main (unsigned char argc, char **argv)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump \"Reduce using vector shifts\" \"vect\" } } */\n-\n+/* { dg-final { scan-tree-dump \"Reduce using vector shifts\" \"vect\" { target { ! vect_logical_reduc } } } } */\n+/* { dg-final { scan-tree-dump \"Reduce using direct vector reduction\" \"vect\" { target vect_logical_reduc } } } */"}, {"sha": "cd1af6dc9ae84742c565b8454d375aa9bf75f83f", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-or_2.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-or_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-or_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-or_2.c?ref=898f07b0458a48a87df334301ada3414ff08d3de", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-require-effective-target whole_vector_shift } */\n+/* { dg-do run { target { whole_vector_shift || vect_logical_reduc } } } */\n \n /* Write a reduction loop to be reduced using vector shifts and folded.  */\n \n@@ -23,12 +23,15 @@ main (unsigned char argc, char **argv)\n   check_vect ();\n \n   for (i = 0; i < N; i++)\n-    in[i] = (i + i + 1) & 0xfd;\n+    {\n+      in[i] = (i + i + 1) & 0xfd;\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n \n   for (i = 0; i < N; i++)\n     {\n       expected |= in[i];\n-      asm volatile (\"\");\n+      asm volatile (\"\" ::: \"memory\");\n     }\n \n   for (i = 0; i < N; i++)\n@@ -43,5 +46,5 @@ main (unsigned char argc, char **argv)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump \"Reduce using vector shifts\" \"vect\" } } */\n-\n+/* { dg-final { scan-tree-dump \"Reduce using vector shifts\" \"vect\" { target { ! vect_logical_reduc } } } } */\n+/* { dg-final { scan-tree-dump \"Reduce using direct vector reduction\" \"vect\" { target vect_logical_reduc } } } */"}, {"sha": "72dc793b65049059185be7184b76d54e206e5784", "filename": "gcc/testsuite/gcc.target/aarch64/sve/reduc_1.c", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_1.c?ref=898f07b0458a48a87df334301ada3414ff08d3de", "patch": "@@ -65,6 +65,46 @@ reduc_##NAME##_##TYPE (TYPE *a, int n)\t\t\\\n \n TEST_MAXMIN (DEF_REDUC_MAXMIN)\n \n+#define DEF_REDUC_BITWISE(TYPE, NAME, BIT_OP)\t\\\n+TYPE __attribute__ ((noinline, noclone))\t\\\n+reduc_##NAME##_##TYPE (TYPE *a, int n)\t\t\\\n+{\t\t\t\t\t\t\\\n+  TYPE r = 13;\t\t\t\t\t\\\n+  for (int i = 0; i < n; ++i)\t\t\t\\\n+    r BIT_OP a[i];\t\t\t\t\\\n+  return r;\t\t\t\t\t\\\n+}\n+\n+#define TEST_BITWISE(T)\t\t\t\t\\\n+  T (int8_t, and, &=)\t\t\t\t\\\n+  T (int16_t, and, &=)\t\t\t\t\\\n+  T (int32_t, and, &=)\t\t\t\t\\\n+  T (int64_t, and, &=)\t\t\t\t\\\n+  T (uint8_t, and, &=)\t\t\t\t\\\n+  T (uint16_t, and, &=)\t\t\t\t\\\n+  T (uint32_t, and, &=)\t\t\t\t\\\n+  T (uint64_t, and, &=)\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+  T (int8_t, ior, |=)\t\t\t\t\\\n+  T (int16_t, ior, |=)\t\t\t\t\\\n+  T (int32_t, ior, |=)\t\t\t\t\\\n+  T (int64_t, ior, |=)\t\t\t\t\\\n+  T (uint8_t, ior, |=)\t\t\t\t\\\n+  T (uint16_t, ior, |=)\t\t\t\t\\\n+  T (uint32_t, ior, |=)\t\t\t\t\\\n+  T (uint64_t, ior, |=)\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+  T (int8_t, xor, ^=)\t\t\t\t\\\n+  T (int16_t, xor, ^=)\t\t\t\t\\\n+  T (int32_t, xor, ^=)\t\t\t\t\\\n+  T (int64_t, xor, ^=)\t\t\t\t\\\n+  T (uint8_t, xor, ^=)\t\t\t\t\\\n+  T (uint16_t, xor, ^=)\t\t\t\t\\\n+  T (uint32_t, xor, ^=)\t\t\t\t\\\n+  T (uint64_t, xor, ^=)\n+\n+TEST_BITWISE (DEF_REDUC_BITWISE)\n+\n /* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n@@ -102,6 +142,12 @@ TEST_MAXMIN (DEF_REDUC_MAXMIN)\n /* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n \n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 8 } } */\n+\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 8 } } */\n+\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 8 } } */\n+\n /* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.b\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.s\\n} 2 } } */\n@@ -133,3 +179,18 @@ TEST_MAXMIN (DEF_REDUC_MAXMIN)\n /* { dg-final { scan-assembler-times {\\tfminnmv\\th[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tfminnmv\\ts[0-9]+, p[0-7], z[0-9]+\\.s\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tfminnmv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tandv\\tb[0-9]+, p[0-7], z[0-9]+\\.b} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tandv\\th[0-9]+, p[0-7], z[0-9]+\\.h} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tandv\\ts[0-9]+, p[0-7], z[0-9]+\\.s} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tandv\\td[0-9]+, p[0-7], z[0-9]+\\.d} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\torv\\tb[0-9]+, p[0-7], z[0-9]+\\.b} 2 } } */\n+/* { dg-final { scan-assembler-times {\\torv\\th[0-9]+, p[0-7], z[0-9]+\\.h} 2 } } */\n+/* { dg-final { scan-assembler-times {\\torv\\ts[0-9]+, p[0-7], z[0-9]+\\.s} 2 } } */\n+/* { dg-final { scan-assembler-times {\\torv\\td[0-9]+, p[0-7], z[0-9]+\\.d} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\teorv\\tb[0-9]+, p[0-7], z[0-9]+\\.b} 2 } } */\n+/* { dg-final { scan-assembler-times {\\teorv\\th[0-9]+, p[0-7], z[0-9]+\\.h} 2 } } */\n+/* { dg-final { scan-assembler-times {\\teorv\\ts[0-9]+, p[0-7], z[0-9]+\\.s} 2 } } */\n+/* { dg-final { scan-assembler-times {\\teorv\\td[0-9]+, p[0-7], z[0-9]+\\.d} 2 } } */"}, {"sha": "c0fdadaa282d4020e7fcdcb9b5970ce6c3caef69", "filename": "gcc/testsuite/gcc.target/aarch64/sve/reduc_1_run.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_1_run.c?ref=898f07b0458a48a87df334301ada3414ff08d3de", "patch": "@@ -9,7 +9,7 @@\n   TYPE a[NUM_ELEMS (TYPE) + 1];\t\t\t\t\\\n   for (int i = 0; i < NUM_ELEMS (TYPE) + 1; i++)\t\\\n     {\t\t\t\t\t\t\t\\\n-      a[i] = (i * 2) * (i & 1 ? 1 : -1);\t\t\\\n+      a[i] = ((i * 2) * (i & 1 ? 1 : -1) | 3);\t\t\\\n       asm volatile (\"\" ::: \"memory\");\t\t\t\\\n     }\n \n@@ -35,10 +35,22 @@\n       __builtin_abort ();\t\t\t\t\t\\\n   }\n \n+#define TEST_REDUC_BITWISE(TYPE, NAME, BIT_OP)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    INIT_VECTOR (TYPE);\t\t\t\t\t\t\\\n+    TYPE r1 = reduc_##NAME##_##TYPE (a, NUM_ELEMS (TYPE));\t\\\n+    volatile TYPE r2 = 13;\t\t\t\t\t\\\n+    for (int i = 0; i < NUM_ELEMS (TYPE); ++i)\t\t\t\\\n+      r2 BIT_OP a[i];\t\t\t\t\t\t\\\n+    if (r1 != r2)\t\t\t\t\t\t\\\n+      __builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n int main ()\n {\n   TEST_PLUS (TEST_REDUC_PLUS)\n   TEST_MAXMIN (TEST_REDUC_MAXMIN)\n+  TEST_BITWISE (TEST_REDUC_BITWISE)\n \n   return 0;\n }"}, {"sha": "376a453fc7300c79d6924de3b4ed0852f8b6b093", "filename": "gcc/testsuite/gcc.target/aarch64/sve/reduc_2.c", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_2.c?ref=898f07b0458a48a87df334301ada3414ff08d3de", "patch": "@@ -73,6 +73,49 @@ reduc_##NAME##_##TYPE (TYPE (*restrict a)[NUM_ELEMS (TYPE)],\t\\\n \n TEST_MAXMIN (DEF_REDUC_MAXMIN)\n \n+#define DEF_REDUC_BITWISE(TYPE,NAME,BIT_OP)\t\t\t\\\n+void __attribute__ ((noinline, noclone))\t\t\t\\\n+reduc_##NAME##TYPE (TYPE (*restrict a)[NUM_ELEMS(TYPE)],\t\\\n+\t\t    TYPE *restrict r, int n)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < n; i++)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      r[i] = a[i][0];\t\t\t\t\t\t\\\n+      for (int j = 0; j < NUM_ELEMS(TYPE); j++)\t\t\t\\\n+        r[i] BIT_OP a[i][j];\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define TEST_BITWISE(T)\t\t\t\t\\\n+  T (int8_t, and, &=)\t\t\t\t\\\n+  T (int16_t, and, &=)\t\t\t\t\\\n+  T (int32_t, and, &=)\t\t\t\t\\\n+  T (int64_t, and, &=)\t\t\t\t\\\n+  T (uint8_t, and, &=)\t\t\t\t\\\n+  T (uint16_t, and, &=)\t\t\t\t\\\n+  T (uint32_t, and, &=)\t\t\t\t\\\n+  T (uint64_t, and, &=)\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+  T (int8_t, ior, |=)\t\t\t\t\\\n+  T (int16_t, ior, |=)\t\t\t\t\\\n+  T (int32_t, ior, |=)\t\t\t\t\\\n+  T (int64_t, ior, |=)\t\t\t\t\\\n+  T (uint8_t, ior, |=)\t\t\t\t\\\n+  T (uint16_t, ior, |=)\t\t\t\t\\\n+  T (uint32_t, ior, |=)\t\t\t\t\\\n+  T (uint64_t, ior, |=)\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+  T (int8_t, xor, ^=)\t\t\t\t\\\n+  T (int16_t, xor, ^=)\t\t\t\t\\\n+  T (int32_t, xor, ^=)\t\t\t\t\\\n+  T (int64_t, xor, ^=)\t\t\t\t\\\n+  T (uint8_t, xor, ^=)\t\t\t\t\\\n+  T (uint16_t, xor, ^=)\t\t\t\t\\\n+  T (uint32_t, xor, ^=)\t\t\t\t\\\n+  T (uint64_t, xor, ^=)\n+\n+TEST_BITWISE (DEF_REDUC_BITWISE)\n+\n /* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.b\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.s\\n} 2 } } */\n@@ -104,3 +147,18 @@ TEST_MAXMIN (DEF_REDUC_MAXMIN)\n /* { dg-final { scan-assembler-times {\\tfminnmv\\th[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tfminnmv\\ts[0-9]+, p[0-7], z[0-9]+\\.s\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tfminnmv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tandv\\tb[0-9]+, p[0-7], z[0-9]+\\.b\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tandv\\th[0-9]+, p[0-7], z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tandv\\ts[0-9]+, p[0-7], z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tandv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\torv\\tb[0-9]+, p[0-7], z[0-9]+\\.b\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\torv\\th[0-9]+, p[0-7], z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\torv\\ts[0-9]+, p[0-7], z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\torv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\teorv\\tb[0-9]+, p[0-7], z[0-9]+\\.b\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\teorv\\th[0-9]+, p[0-7], z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\teorv\\ts[0-9]+, p[0-7], z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\teorv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 2 } } */"}, {"sha": "c4a0426e219408ea9050ffe908aaf31dcb343262", "filename": "gcc/testsuite/gcc.target/aarch64/sve/reduc_2_run.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_2_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_2_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_2_run.c?ref=898f07b0458a48a87df334301ada3414ff08d3de", "patch": "@@ -56,6 +56,20 @@\n       }\t\t\t\t\t\t\t\\\n     }\n \n+#define TEST_REDUC_BITWISE(TYPE, NAME, BIT_OP)\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    INIT_MATRIX (TYPE);\t\t\t\t\t\\\n+    reduc_##NAME##_##TYPE (mat, r, NROWS);\t\t\\\n+    for (int i = 0; i < NROWS; i++)\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\tvolatile TYPE r2 = mat[i][0];\t\t\t\\\n+\tfor (int j = 0; j < NUM_ELEMS (TYPE); ++j)\t\\\n+\t  r2 BIT_OP mat[i][j];\t\t\t\t\\\n+\tif (r[i] != r2)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+    }\n+\n int main ()\n {\n   TEST_PLUS (TEST_REDUC_PLUS)"}, {"sha": "73dbb2c6346ad37e5baec39f8a401bc0d9d2954a", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=898f07b0458a48a87df334301ada3414ff08d3de", "patch": "@@ -7222,6 +7222,12 @@ proc check_effective_target_vect_call_roundf { } {\n     return $et_vect_call_roundf_saved($et_index)\n }\n \n+# Return 1 if the target supports AND, OR and XOR reduction.\n+\n+proc check_effective_target_vect_logical_reduc { } {\n+    return [check_effective_target_aarch64_sve]\n+}\n+\n # Return 1 if the target supports section-anchors\n \n proc check_effective_target_section_anchors { } {"}, {"sha": "d67911569ec8718ef90fc1a9d97df3f40e239f58", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/898f07b0458a48a87df334301ada3414ff08d3de/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=898f07b0458a48a87df334301ada3414ff08d3de", "patch": "@@ -2438,11 +2438,20 @@ reduction_fn_for_scalar_code (enum tree_code code, internal_fn *reduc_fn)\n         *reduc_fn = IFN_REDUC_PLUS;\n         return true;\n \n-      case MULT_EXPR:\n-      case MINUS_EXPR:\n+      case BIT_AND_EXPR:\n+\t*reduc_fn = IFN_REDUC_AND;\n+\treturn true;\n+\n       case BIT_IOR_EXPR:\n+\t*reduc_fn = IFN_REDUC_IOR;\n+\treturn true;\n+\n       case BIT_XOR_EXPR:\n-      case BIT_AND_EXPR:\n+\t*reduc_fn = IFN_REDUC_XOR;\n+\treturn true;\n+\n+      case MULT_EXPR:\n+      case MINUS_EXPR:\n         *reduc_fn = IFN_LAST;\n         return true;\n "}]}