{"sha": "2d3e278d62b7568a5a4b775dc42c74f051cd1edb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQzZTI3OGQ2MmI3NTY4YTVhNGI3NzVkYzQyYzc0ZjA1MWNkMWVkYg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-09-23T09:22:17Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-09-23T09:22:17Z"}, "message": "c-common.c (flag_abi_version): New variable.\n\n\t* c-common.c (flag_abi_version): New variable.\n\t* c-common.h (flag_abi_version): Declare it.\n\t* c-opts.c (missing_arg): Add -fabi-version.\n\t(c_common_decode_option): Process -fabi-version.\n\t* doc/invoke.texi (-fabi-version): Document it.\n\t(-Wabi): Add information about bit-fields in unions.\n\n\t* cp/class.c (layout_virtual_bases): Do not round the size of the\n\ttype to a multiple of the alignment before laying out virtual bases.\n\t(layout_class_type): Correct handling of bit-fields that are wider\n\tthan their type inside unions.  Round the size of the type to a\n\teven number of bytes when computing the size without virtual\n\tbases.\n\t* cp/cp-tree.h (abi_version_at_least): New macro.\n\n\t* g++.dg/abi/bitfield6.C: New test.\n\t* g++.dg/abi/bitfield7.C: New test.\n\t* g++.dg/abi/bitfield8.C: New test.\n\t* g++.dg/abi/vbase11.C: New test.\n\nFrom-SVN: r57432", "tree": {"sha": "1a0a4c88a7ec146d17c908d2c4246c6c718372b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a0a4c88a7ec146d17c908d2c4246c6c718372b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d3e278d62b7568a5a4b775dc42c74f051cd1edb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d3e278d62b7568a5a4b775dc42c74f051cd1edb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d3e278d62b7568a5a4b775dc42c74f051cd1edb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d3e278d62b7568a5a4b775dc42c74f051cd1edb/comments", "author": null, "committer": null, "parents": [{"sha": "d4e81c8598c969b31734b38a2f1dfcf563725c5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4e81c8598c969b31734b38a2f1dfcf563725c5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4e81c8598c969b31734b38a2f1dfcf563725c5b"}], "stats": {"total": 179, "additions": 172, "deletions": 7}, "files": [{"sha": "fd6d5ad45f558eb76d9f79c8a409032150896bed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d3e278d62b7568a5a4b775dc42c74f051cd1edb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d3e278d62b7568a5a4b775dc42c74f051cd1edb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d3e278d62b7568a5a4b775dc42c74f051cd1edb", "patch": "@@ -1,3 +1,12 @@\n+2002-09-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* c-common.c (flag_abi_version): New variable.\n+\t* c-common.h (flag_abi_version): Declare it.\n+\t* c-opts.c (missing_arg): Add -fabi-version.\n+\t(c_common_decode_option): Process -fabi-version.\n+\t* doc/invoke.texi (-fabi-version): Document it.\n+\t(-Wabi): Add information about bit-fields in unions.\n+\t\n 2002-09-22  Jason Thorpe  <thorpej@wasabisystems.com>\n \n \t* config/mips/netbsd.h (SUBTARGET_ASM_SPEC): Always pass -KPIC"}, {"sha": "251a2551575c79e0b22662ed58b3aee36c35084b", "filename": "gcc/c-common.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d3e278d62b7568a5a4b775dc42c74f051cd1edb/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d3e278d62b7568a5a4b775dc42c74f051cd1edb/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=2d3e278d62b7568a5a4b775dc42c74f051cd1edb", "patch": "@@ -567,6 +567,21 @@ int flag_permissive;\n \n int flag_enforce_eh_specs = 1;\n \n+/*  The version of the C++ ABI in use.  The following values are\n+    allowed:\n+\n+    0: The version of the ABI believed most conformant with the \n+       C++ ABI specification.  This ABI may change as bugs are\n+       discovered and fixed.  Therefore, 0 will not necessarily\n+       indicate the same ABI in different versions of G++.\n+\n+    1: The version of the ABI first used in G++ 3.2.\n+\n+    Additional positive integers will be assigned as new versions of\n+    the ABI become the default version of the ABI.  */\n+\n+int flag_abi_version = 1;\n+\n /* Nonzero means warn about things that will change when compiling\n    with an ABI-compliant compiler.  */\n "}, {"sha": "8cf6aa47ce85417fe80004dd913aac9cdbcf110f", "filename": "gcc/c-common.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d3e278d62b7568a5a4b775dc42c74f051cd1edb/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d3e278d62b7568a5a4b775dc42c74f051cd1edb/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=2d3e278d62b7568a5a4b775dc42c74f051cd1edb", "patch": "@@ -737,6 +737,21 @@ extern int flag_permissive;\n \n extern int flag_enforce_eh_specs;\n \n+/*  The version of the C++ ABI in use.  The following values are\n+    allowed:\n+\n+    -1: The version of the ABI believed most conformant with the \n+        C++ ABI specification.  This ABI may change as bugs are\n+\tdiscovered and fixed.  Therefore, -1 will not necessarily\n+\tindicate the same ABI in different versions of G++.\n+\n+    0: The version of the ABI first used in G++ 3.2.\n+\n+    Additional positive integers will be assigned as new versions of\n+    the ABI become the default version of the ABI.  */\n+\n+extern int flag_abi_version;\n+\n /* Nonzero means warn about things that will change when compiling\n    with an ABI-compliant compiler.  */\n "}, {"sha": "4d9e3d2dcf6bc07da1676552990ecef4ed94f92c", "filename": "gcc/c-opts.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d3e278d62b7568a5a4b775dc42c74f051cd1edb/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d3e278d62b7568a5a4b775dc42c74f051cd1edb/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=2d3e278d62b7568a5a4b775dc42c74f051cd1edb", "patch": "@@ -188,6 +188,7 @@ static void sanitize_cpp_opts PARAMS ((void));\n   OPT(\"Wwrite-strings\",\t\tCL_ALL,   OPT_Wwrite_strings)\t\t     \\\n   OPT(\"ansi\",\t\t\tCL_ALL,   OPT_ansi)\t\t\t     \\\n   OPT(\"d\",                      CL_ALL | CL_JOINED, OPT_d)\t\t     \\\n+  OPT(\"fabi-version=\",          CL_CXX | CL_JOINED, OPT_fabi_version)        \\\n   OPT(\"faccess-control\",\tCL_CXX,   OPT_faccess_control)\t\t     \\\n   OPT(\"fall-virtual\",\t\tCL_CXX,   OPT_fall_virtual)\t\t     \\\n   OPT(\"falt-external-templates\",CL_CXX,   OPT_falt_external_templates)\t     \\\n@@ -342,6 +343,7 @@ missing_arg (opt_index)\n     {\n     case OPT_Wformat_eq:\n     case OPT_d:\n+    case OPT_fabi_version:\n     case OPT_fbuiltin_:\n     case OPT_fdump:\n     case OPT_fname_mangling:\n@@ -1014,6 +1016,10 @@ c_common_decode_option (argc, argv)\n       warning (\"switch \\\"%s\\\" is no longer supported\", argv[0]);\n       break;\n \n+    case OPT_fabi_version:\n+      flag_abi_version = read_integral_parameter (arg, argv[0], 1);\n+      break;\n+\n     case OPT_faccess_control:\n       flag_access_control = on;\n       break;"}, {"sha": "a25c6aa8b3fcf9c90c63d345fbc320c4d7ea0775", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d3e278d62b7568a5a4b775dc42c74f051cd1edb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d3e278d62b7568a5a4b775dc42c74f051cd1edb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2d3e278d62b7568a5a4b775dc42c74f051cd1edb", "patch": "@@ -1,3 +1,13 @@\n+2002-09-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp/class.c (layout_virtual_bases): Do not round the size of the\n+\ttype to a multiple of the alignment before laying out virtual bases.\n+\t(layout_class_type): Correct handling of bit-fields that are wider\n+\tthan their type inside unions.  Round the size of the type to a\n+\teven number of bytes when computing the size without virtual\n+\tbases.\n+\t* cp/cp-tree.h (abi_version_at_least): New macro.\n+\t\n 2002-09-21  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* ChangeLog: Follow spelling conventions."}, {"sha": "316bc63f99d51cfaa0fd54850be3a569ef36962e", "filename": "gcc/cp/class.c", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d3e278d62b7568a5a4b775dc42c74f051cd1edb/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d3e278d62b7568a5a4b775dc42c74f051cd1edb/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=2d3e278d62b7568a5a4b775dc42c74f051cd1edb", "patch": "@@ -4574,7 +4574,10 @@ layout_virtual_bases (t, offsets)\n #endif\n \n   /* DSIZE is the size of the class without the virtual bases.  */\n-  dsize = TYPE_SIZE (t);\n+  if (abi_version_at_least(2))\n+    dsize = CLASSTYPE_SIZE (t);\n+  else\n+    dsize = TYPE_SIZE (t);\n \n   /* Make every class have alignment of at least one.  */\n   TYPE_ALIGN (t) = MAX (TYPE_ALIGN (t), BITS_PER_UNIT);\n@@ -4875,8 +4878,21 @@ layout_class_type (t, empty_p, vfuns_p, virtuals_p)\n \t     field.  We have to back up by one to find the largest\n \t     type that fits.  */\n \t  integer_type = integer_types[itk - 1];\n-\t  padding = size_binop (MINUS_EXPR, DECL_SIZE (field), \n-\t\t\t\tTYPE_SIZE (integer_type));\n+\n+\t  if (abi_version_at_least (2) && TREE_CODE (t) == UNION_TYPE)\n+\t    /* In a union, the padding field must have the full width\n+\t       of the bit-field; all fields start at offset zero.  */\n+\t    padding = DECL_SIZE (field);\n+\t  else\n+\t    {\n+\t      if (warn_abi && TREE_CODE (t) == UNION_TYPE)\n+\t\twarning (\"size assigned to `%T' may not be \"\n+\t\t\t \"ABI-compliant and may change in a future \"\n+\t\t\t \"version of GCC\", \n+\t\t\t t);\n+\t      padding = size_binop (MINUS_EXPR, DECL_SIZE (field),\n+\t\t\t\t    TYPE_SIZE (integer_type));\n+\t    }\n \t  DECL_SIZE (field) = TYPE_SIZE (integer_type);\n \t  DECL_ALIGN (field) = TYPE_ALIGN (integer_type);\n \t  DECL_USER_ALIGN (field) = TYPE_USER_ALIGN (integer_type);\n@@ -4944,8 +4960,14 @@ layout_class_type (t, empty_p, vfuns_p, virtuals_p)\n \n       padding = build_decl (FIELD_DECL, NULL_TREE, char_type_node);\n       place_field (rli, padding);\n-    }\n-\n+    } \n+  else if (abi_version_at_least (2)\n+\t   && !integer_zerop (rli->bitpos))\n+    /* Make sure that we are on a byte boundary so that the size of\n+       the class without virtual bases will always be a round number\n+       of bytes.  */\n+    rli->bitpos = round_up (rli->bitpos, BITS_PER_UNIT);\n+  \n   /* Let the back-end lay out the type. Note that at this point we\n      have only included non-virtual base-classes; we will lay out the\n      virtual base classes later.  So, the TYPE_SIZE/TYPE_ALIGN after"}, {"sha": "b3cee372697144fcdc97002f978064fe4b4f9b71", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d3e278d62b7568a5a4b775dc42c74f051cd1edb/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d3e278d62b7568a5a4b775dc42c74f051cd1edb/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2d3e278d62b7568a5a4b775dc42c74f051cd1edb", "patch": "@@ -212,6 +212,12 @@ struct diagnostic_context;\n \n #endif\n \n+/* Returns TRUE if generated code should match ABI version N or\n+   greater is in use.  */\n+\n+#define abi_version_at_least(N) \\\n+  (flag_abi_version == 0 || flag_abi_version >= (N))\n+\n \f\n /* Language-dependent contents of an identifier.  */\n "}, {"sha": "66aab29a30da2afa37c4af66d415e979baff7388", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d3e278d62b7568a5a4b775dc42c74f051cd1edb/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d3e278d62b7568a5a4b775dc42c74f051cd1edb/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2d3e278d62b7568a5a4b775dc42c74f051cd1edb", "patch": "@@ -174,8 +174,8 @@ in the following sections.\n @item C++ Language Options\n @xref{C++ Dialect Options,,Options Controlling C++ Dialect}.\n @gccoptlist{\n--fno-access-control  -fcheck-new  -fconserve-space @gol\n--fno-const-strings  -fdollars-in-identifiers @gol\n+-fabi-version=@var{n} -fno-access-control  -fcheck-new @gol\n+-fconserve-space -fno-const-strings  -fdollars-in-identifiers @gol\n -fno-elide-constructors @gol\n -fno-enforce-eh-specs  -fexternal-templates @gol\n -falt-external-templates @gol\n@@ -1249,6 +1249,15 @@ language supported by GCC@.\n Here is a list of options that are @emph{only} for compiling C++ programs:\n \n @table @gcctabopt\n+\n+@item -fabi-version=@var{n}\n+@opindex fabi-version\n+Use version @var{n} of the C++ ABI.  Version 1 is the version of the C++\n+ABI that first appeared in G++ 3.2.  Version 0 will always be the\n+version that conforms most closely to the C++ ABI specification.\n+Therefore, the ABI obtained using version 0 will change as ABI bugs are\n+fixed.\n+\n @item -fno-access-control\n @opindex fno-access-control\n Turn off all access checking.  This switch is mainly useful for working\n@@ -1522,6 +1531,19 @@ explicitly padding @code{A} so that its size is a multiple of its\n alignment (ignoring virtual base classes); that will cause G++ and other\n compilers to layout @code{C} identically.\n \n+@item\n+Incorrect handling of bit-fields with declared widths greater than that\n+of their underlying types, when the bit-fields appear in a union.  For\n+example:\n+\n+@smallexample\n+union U @{ int i : 4096; @};\n+@end smallexample\n+\n+@noindent\n+Assuming that an @code{int} does not have 4096 bits, G++ will make the\n+union too small by the number of bits in an @code{int}.\n+\n @end itemize\n \n @item -Wctor-dtor-privacy @r{(C++ only)}"}, {"sha": "19d87b3e9dc3c2f02cead7ade2e19328d1f90263", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d3e278d62b7568a5a4b775dc42c74f051cd1edb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d3e278d62b7568a5a4b775dc42c74f051cd1edb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2d3e278d62b7568a5a4b775dc42c74f051cd1edb", "patch": "@@ -1,3 +1,10 @@\n+2002-09-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* g++.dg/abi/bitfield6.C: New test.\n+\t* g++.dg/abi/bitfield7.C: New test.\n+\t* g++.dg/abi/bitfield8.C: New test.\n+\t* g++.dg/abi/vbase11.C: New test.\n+\n 2002-09-22  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* gcc.dg/20020219-1.c: Add \"-mdisable-indexing\" option for target"}, {"sha": "50f76ab824bc15e35a4f9963ab2839a1aff57e14", "filename": "gcc/testsuite/g++.dg/abi/bitfield6.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d3e278d62b7568a5a4b775dc42c74f051cd1edb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d3e278d62b7568a5a4b775dc42c74f051cd1edb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield6.C?ref=2d3e278d62b7568a5a4b775dc42c74f051cd1edb", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do run }\n+// { dg-options \"-w -fabi-version=0\" }\n+\n+#include <limits>\n+\n+union U {\n+  int i: 4096;\n+};\n+\n+int main () {\n+  if (sizeof (U) * std::numeric_limits<unsigned char>::digits != 4096)\n+    return 1;\n+}\n+"}, {"sha": "9868cfce1987584ce0bc4fde27d8df208969c46e", "filename": "gcc/testsuite/g++.dg/abi/bitfield7.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d3e278d62b7568a5a4b775dc42c74f051cd1edb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d3e278d62b7568a5a4b775dc42c74f051cd1edb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield7.C?ref=2d3e278d62b7568a5a4b775dc42c74f051cd1edb", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do compile }\n+// { dg-options \"-Wabi\" }\n+\n+union U { // { dg-warning \"ABI\" }\n+  int i: 4096; // { dg-warning \"exceeds\" }\n+};\n+"}, {"sha": "8195fda631d02a181e378547fe20ad1d2c06f4eb", "filename": "gcc/testsuite/g++.dg/abi/bitfield8.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d3e278d62b7568a5a4b775dc42c74f051cd1edb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d3e278d62b7568a5a4b775dc42c74f051cd1edb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield8.C?ref=2d3e278d62b7568a5a4b775dc42c74f051cd1edb", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do run { target i?86-*-* } }\n+// { dg-options \"-fabi-version=0\" }\n+\n+struct A { \n+  virtual void f() {}\n+  int f1 : 1; \n+};\n+\n+struct B : public A {\n+  int f2 : 31;\n+  int f3 : 4; \n+  int f4 : 3;\n+};\n+\n+int main ()\n+{\n+  if (sizeof (B) != 16)\n+    return 1;\n+}\n+  "}, {"sha": "375577365a37bf6182f3a1cf56021c83e0869bcd", "filename": "gcc/testsuite/g++.dg/abi/vbase11.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d3e278d62b7568a5a4b775dc42c74f051cd1edb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvbase11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d3e278d62b7568a5a4b775dc42c74f051cd1edb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvbase11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvbase11.C?ref=2d3e278d62b7568a5a4b775dc42c74f051cd1edb", "patch": "@@ -0,0 +1,12 @@\n+// { dg-do run { target i?86-*-* } }\n+// { dg-options \"-fabi-version=0\" }\n+\n+struct A { virtual void f(); char c1; };\n+struct B { B(); char c2; };\n+struct C : public A, public virtual B { };\n+\n+int main () {\n+  if (sizeof (C) != 8)\n+    return 1;\n+}\n+"}]}