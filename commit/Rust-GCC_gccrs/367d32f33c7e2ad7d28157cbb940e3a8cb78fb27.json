{"sha": "367d32f33c7e2ad7d28157cbb940e3a8cb78fb27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY3ZDMyZjMzYzdlMmFkN2QyODE1N2NiYjk0MGUzYThjYjc4ZmIyNw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2012-07-05T10:46:19Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2012-07-05T10:46:19Z"}, "message": "2012-07-05  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* config/s390/s390-protos.h (s390_expand_movmem)\n\t(s390_expand_cmpmem): Add return value.\n\t* config/s390/s390.c (s390_expand_movmem, s390_expand_cmpmem):\n\tReturn FALSE to use the library function in some cases.\n\t* config/s390/s390.md (movmem, cmpmem): Evaluate return value of C\n\thelper functions.\n\nFrom-SVN: r189288", "tree": {"sha": "5cd1ecf7c504c765d4bc2005731ba993c19da47e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cd1ecf7c504c765d4bc2005731ba993c19da47e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/367d32f33c7e2ad7d28157cbb940e3a8cb78fb27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/367d32f33c7e2ad7d28157cbb940e3a8cb78fb27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/367d32f33c7e2ad7d28157cbb940e3a8cb78fb27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/367d32f33c7e2ad7d28157cbb940e3a8cb78fb27/comments", "author": null, "committer": null, "parents": [{"sha": "604fbe51d9742f5384c04e795dbdad44776c4110", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/604fbe51d9742f5384c04e795dbdad44776c4110", "html_url": "https://github.com/Rust-GCC/gccrs/commit/604fbe51d9742f5384c04e795dbdad44776c4110"}], "stats": {"total": 49, "additions": 42, "deletions": 7}, "files": [{"sha": "d8ae41567a03152b2bb8ba6573cc801df8b78cf3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/367d32f33c7e2ad7d28157cbb940e3a8cb78fb27/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/367d32f33c7e2ad7d28157cbb940e3a8cb78fb27/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=367d32f33c7e2ad7d28157cbb940e3a8cb78fb27", "patch": "@@ -1,3 +1,12 @@\n+2012-07-05  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* config/s390/s390-protos.h (s390_expand_movmem)\n+\t(s390_expand_cmpmem): Add return value.\n+\t* config/s390/s390.c (s390_expand_movmem, s390_expand_cmpmem):\n+\tReturn FALSE to use the library function in some cases.\n+\t* config/s390/s390.md (movmem, cmpmem): Evaluate return value of C\n+\thelper functions.\n+\n 2012-07-05  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* config.gcc: Enable ifunc attribute by default on s390 and s390x."}, {"sha": "4f1eb42a73f2c197686a1dc9cc0b400a15170d61", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/367d32f33c7e2ad7d28157cbb940e3a8cb78fb27/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/367d32f33c7e2ad7d28157cbb940e3a8cb78fb27/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=367d32f33c7e2ad7d28157cbb940e3a8cb78fb27", "patch": "@@ -80,9 +80,9 @@ extern void s390_reload_symref_address (rtx , rtx , rtx , bool);\n extern void s390_expand_plus_operand (rtx, rtx, rtx);\n extern void emit_symbolic_move (rtx *);\n extern void s390_load_address (rtx, rtx);\n-extern void s390_expand_movmem (rtx, rtx, rtx);\n+extern bool s390_expand_movmem (rtx, rtx, rtx);\n extern void s390_expand_setmem (rtx, rtx, rtx);\n-extern void s390_expand_cmpmem (rtx, rtx, rtx, rtx);\n+extern bool s390_expand_cmpmem (rtx, rtx, rtx, rtx);\n extern bool s390_expand_addcc (enum rtx_code, rtx, rtx, rtx, rtx, rtx);\n extern bool s390_expand_insv (rtx, rtx, rtx, rtx);\n extern void s390_expand_cs_hqi (enum machine_mode, rtx, rtx, rtx, rtx);"}, {"sha": "f72f49fd023f689c1cf3aa247a21cd6b6a287c84", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/367d32f33c7e2ad7d28157cbb940e3a8cb78fb27/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/367d32f33c7e2ad7d28157cbb940e3a8cb78fb27/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=367d32f33c7e2ad7d28157cbb940e3a8cb78fb27", "patch": "@@ -3986,9 +3986,16 @@ legitimize_reload_address (rtx ad, enum machine_mode mode ATTRIBUTE_UNUSED,\n \n /* Emit code to move LEN bytes from DST to SRC.  */\n \n-void\n+bool\n s390_expand_movmem (rtx dst, rtx src, rtx len)\n {\n+  /* When tuning for z10 or higher we rely on the Glibc functions to\n+     do the right thing. Only for constant lengths below 64k we will\n+     generate inline code.  */\n+  if (s390_tune >= PROCESSOR_2097_Z10\n+      && (GET_CODE (len) != CONST_INT || INTVAL (len) > (1<<16)))\n+    return false;\n+\n   if (GET_CODE (len) == CONST_INT && INTVAL (len) >= 0 && INTVAL (len) <= 256)\n     {\n       if (INTVAL (len) > 0)\n@@ -4080,6 +4087,7 @@ s390_expand_movmem (rtx dst, rtx src, rtx len)\n \t\t\t\t   convert_to_mode (Pmode, count, 1)));\n       emit_label (end_label);\n     }\n+  return true;\n }\n \n /* Emit code to set LEN bytes at DST to VAL.\n@@ -4218,12 +4226,19 @@ s390_expand_setmem (rtx dst, rtx len, rtx val)\n /* Emit code to compare LEN bytes at OP0 with those at OP1,\n    and return the result in TARGET.  */\n \n-void\n+bool\n s390_expand_cmpmem (rtx target, rtx op0, rtx op1, rtx len)\n {\n   rtx ccreg = gen_rtx_REG (CCUmode, CC_REGNUM);\n   rtx tmp;\n \n+  /* When tuning for z10 or higher we rely on the Glibc functions to\n+     do the right thing. Only for constant lengths below 64k we will\n+     generate inline code.  */\n+  if (s390_tune >= PROCESSOR_2097_Z10\n+      && (GET_CODE (len) != CONST_INT || INTVAL (len) > (1<<16)))\n+    return false;\n+\n   /* As the result of CMPINT is inverted compared to what we need,\n      we have to swap the operands.  */\n   tmp = op0; op0 = op1; op1 = tmp;\n@@ -4331,6 +4346,7 @@ s390_expand_cmpmem (rtx target, rtx op0, rtx op1, rtx len)\n \n       emit_insn (gen_cmpint (target, ccreg));\n     }\n+  return true;\n }\n \n "}, {"sha": "096f26655342c855e81f0c9b580c5607c6567f47", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/367d32f33c7e2ad7d28157cbb940e3a8cb78fb27/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/367d32f33c7e2ad7d28157cbb940e3a8cb78fb27/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=367d32f33c7e2ad7d28157cbb940e3a8cb78fb27", "patch": "@@ -2640,7 +2640,12 @@\n    (use (match_operand:GPR 2 \"general_operand\" \"\")) ; count\n    (match_operand 3 \"\" \"\")]\n   \"\"\n-  \"s390_expand_movmem (operands[0], operands[1], operands[2]); DONE;\")\n+{\n+  if (s390_expand_movmem (operands[0], operands[1], operands[2]))\n+    DONE;\n+  else\n+    FAIL;\n+})\n \n ; Move a block that is up to 256 bytes in length.\n ; The block length is taken as (operands[2] % 256) + 1.\n@@ -3017,8 +3022,13 @@\n    (use (match_operand:SI 3 \"general_operand\" \"\"))\n    (use (match_operand:SI 4 \"\" \"\"))]\n   \"\"\n-  \"s390_expand_cmpmem (operands[0], operands[1],\n-                       operands[2], operands[3]); DONE;\")\n+{\n+  if (s390_expand_cmpmem (operands[0], operands[1],\n+                          operands[2], operands[3]))\n+    DONE;\n+  else\n+    FAIL;\n+})\n \n ; Compare a block that is up to 256 bytes in length.\n ; The block length is taken as (operands[2] % 256) + 1."}]}