{"sha": "1d53751dd563d30e4400e4a2da530d8ea07da44b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ1Mzc1MWRkNTYzZDMwZTQ0MDBlNGEyZGE1MzBkOGVhMDdkYTQ0Yg==", "commit": {"author": {"name": "Jiufu Guo", "email": "guojiufu@linux.ibm.com", "date": "2019-06-13T18:55:55Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2019-06-13T18:55:55Z"}, "message": "re PR tree-optimization/77820 (A jump threading opportunity with conditionals)\n\n\tPR tree-optimization/77820\n\t* tree-ssa-threadedge.c\n\t(edge_forwards_cmp_to_conditional_jump_through_empty_bb_p): New\n\tfunction.\n\t(thread_across_edge): Add call to\n\tedge_forwards_cmp_to_conditional_jump_through_empty_bb_p.\n\n\tPR tree-optimization/77820\n\t* gcc.dg/tree-ssa/phi_on_compare-1.c: New testcase.\n\t* gcc.dg/tree-ssa/phi_on_compare-2.c: New testcase.\n\t* gcc.dg/tree-ssa/phi_on_compare-3.c: New testcase.\n\t* gcc.dg/tree-ssa/phi_on_compare-4.c: New testcase.\n\t* gcc.dg/tree-ssa/split-path-6.c: Update testcase.\n\t* gcc.target/sh/pr51244-20.c: Update testcase.\n\nCo-Authored-By: Lijia He <helijia@linux.ibm.com>\n\nFrom-SVN: r272261", "tree": {"sha": "fe574e451699bdc6fbd522af705e92cbdab93e9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe574e451699bdc6fbd522af705e92cbdab93e9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d53751dd563d30e4400e4a2da530d8ea07da44b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d53751dd563d30e4400e4a2da530d8ea07da44b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d53751dd563d30e4400e4a2da530d8ea07da44b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d53751dd563d30e4400e4a2da530d8ea07da44b/comments", "author": null, "committer": null, "parents": [{"sha": "351ac9c582a8b73e8783618c369f25bbbb24eac9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/351ac9c582a8b73e8783618c369f25bbbb24eac9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/351ac9c582a8b73e8783618c369f25bbbb24eac9"}], "stats": {"total": 213, "additions": 208, "deletions": 5}, "files": [{"sha": "990f0a04aaa6d7f015ae33c82209de153a0bd24e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d53751dd563d30e4400e4a2da530d8ea07da44b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d53751dd563d30e4400e4a2da530d8ea07da44b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d53751dd563d30e4400e4a2da530d8ea07da44b", "patch": "@@ -1,3 +1,13 @@\n+2019-06-13  Jiufu Guo  <guojiufu@linux.ibm.com>\n+\t    Lijia He  <helijia@linux.ibm.com>\n+\n+\tPR tree-optimization/77820\n+\t* tree-ssa-threadedge.c\n+\t(edge_forwards_cmp_to_conditional_jump_through_empty_bb_p): New\n+\tfunction.\n+\t(thread_across_edge): Add call to\n+\tedge_forwards_cmp_to_conditional_jump_through_empty_bb_p.\n+\n 2019-06-13  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* config/darwin-driver.c (validate_macosx_version_min): New."}, {"sha": "7032352934c87e751282b3345a323e933ff601d9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d53751dd563d30e4400e4a2da530d8ea07da44b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d53751dd563d30e4400e4a2da530d8ea07da44b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1d53751dd563d30e4400e4a2da530d8ea07da44b", "patch": "@@ -1,3 +1,14 @@\n+2019-06-13  Jiufu Guo  <guojiufu@linux.ibm.com>\n+\t    Lijia He  <helijia@linux.ibm.com>\n+\n+\tPR tree-optimization/77820\n+\t* gcc.dg/tree-ssa/phi_on_compare-1.c: New testcase.\n+\t* gcc.dg/tree-ssa/phi_on_compare-2.c: New testcase.\n+\t* gcc.dg/tree-ssa/phi_on_compare-3.c: New testcase.\n+\t* gcc.dg/tree-ssa/phi_on_compare-4.c: New testcase.\n+\t* gcc.dg/tree-ssa/split-path-6.c: Update testcase.\n+\t* gcc.target/sh/pr51244-20.c: Update testcase.\n+\n 2019-06-13  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* gcc.dg/darwin-minversion-link.c: New test."}, {"sha": "5227c87fbf4d8d06493cb1eb88fc1f4f3d0bf284", "filename": "gcc/testsuite/gcc.dg/tree-ssa/phi_on_compare-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d53751dd563d30e4400e4a2da530d8ea07da44b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d53751dd563d30e4400e4a2da530d8ea07da44b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-1.c?ref=1d53751dd563d30e4400e4a2da530d8ea07da44b", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -fdump-tree-vrp1\" } */\n+\n+void g (int);\n+void g1 (int);\n+\n+void\n+f (long a, long b, long c, long d, long x)\n+{\n+  _Bool t;\n+  if (x)\n+    {\n+      g (a + 1);\n+      t = a < b;\n+      c = d + x;\n+    }\n+  else\n+    {\n+      g (b + 1);\n+      a = c + d;\n+      t = c > d;\n+    }\n+\n+  if (t)\n+    g1 (c);\n+\n+  g (a);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Removing basic block\" 1 \"vrp1\" } } */"}, {"sha": "eaf89bb45812358f7e27bc9d7e6e33cfb60d7f0f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/phi_on_compare-2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d53751dd563d30e4400e4a2da530d8ea07da44b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d53751dd563d30e4400e4a2da530d8ea07da44b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-2.c?ref=1d53751dd563d30e4400e4a2da530d8ea07da44b", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -fdump-tree-vrp1\" } */\n+\n+void g (void);\n+void g1 (void);\n+\n+void\n+f (long a, long b, long c, long d, int x)\n+{\n+  _Bool t;\n+  if (x)\n+    t = c < d;\n+  else\n+    t = a < b;\n+\n+  if (t)\n+    {\n+      g1 ();\n+      g ();\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Removing basic block\" 1 \"vrp1\" } } */"}, {"sha": "d5a1e0b3b985c230c407e5650d0763c197bdb4fd", "filename": "gcc/testsuite/gcc.dg/tree-ssa/phi_on_compare-3.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d53751dd563d30e4400e4a2da530d8ea07da44b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d53751dd563d30e4400e4a2da530d8ea07da44b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-3.c?ref=1d53751dd563d30e4400e4a2da530d8ea07da44b", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -fdump-tree-vrp1\" } */\n+\n+void g (void);\n+void g1 (void);\n+\n+void\n+f (long a, long b, long c, long d, int x)\n+{\n+  int t;\n+  if (x)\n+    t = a < b;\n+  else if (d == x)\n+    t = c < b;\n+  else\n+    t = d > c;\n+\n+  if (t)\n+    {\n+      g1 ();\n+      g ();\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Removing basic block\" 1 \"vrp1\" } } */"}, {"sha": "53acabc7b8414eceb919ba3b93731c78dc1ef5ab", "filename": "gcc/testsuite/gcc.dg/tree-ssa/phi_on_compare-4.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d53751dd563d30e4400e4a2da530d8ea07da44b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d53751dd563d30e4400e4a2da530d8ea07da44b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-4.c?ref=1d53751dd563d30e4400e4a2da530d8ea07da44b", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -fdump-tree-vrp1\" } */\n+\n+void g (int);\n+void g1 (int);\n+\n+void\n+f (long a, long b, long c, long d, int x)\n+{\n+  int t;\n+  _Bool l1 = 0, l2 = 0;\n+  if (x)\n+    {\n+      g (a);\n+      c = a + b;\n+      t = a < b;\n+      l1 = 1;\n+    }\n+  else\n+    {\n+      g1 (b);\n+      t = c > d;\n+      d = c + b;\n+      l2 = 1;\n+    }\n+\n+  if (t)\n+    {\n+      if (l1 | l2)\n+\tg1 (c);\n+    }\n+  else\n+    {\n+      g (d);\n+      g1 (a + b);\n+    }\n+  g (c + d);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Removing basic block\" 1 \"vrp1\" } } */"}, {"sha": "71d0fc0e83bf6abf0eda33bdbe2ce70ff4afee36", "filename": "gcc/testsuite/gcc.dg/tree-ssa/split-path-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d53751dd563d30e4400e4a2da530d8ea07da44b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsplit-path-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d53751dd563d30e4400e4a2da530d8ea07da44b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsplit-path-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsplit-path-6.c?ref=1d53751dd563d30e4400e4a2da530d8ea07da44b", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fsplit-paths -fno-tree-cselim -fdump-tree-split-paths-details -w -fno-finite-loops\" } */\n+/* { dg-options \"-O2 -fsplit-paths -fno-tree-cselim -fdump-tree-split-paths-details -fno-finite-loops -fno-tree-dominator-opts -fno-tree-vrp -w\" } */\n \n struct __sFILE\n {"}, {"sha": "be265cd16afd012a5f746bb66fa355f05813be9c", "filename": "gcc/testsuite/gcc.target/sh/pr51244-20.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d53751dd563d30e4400e4a2da530d8ea07da44b/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d53751dd563d30e4400e4a2da530d8ea07da44b/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-20.c?ref=1d53751dd563d30e4400e4a2da530d8ea07da44b", "patch": "@@ -1,7 +1,7 @@\n /* Check that the SH specific sh_treg_combine RTL optimization pass works as\n    expected.  */\n /* { dg-do compile }  */\n-/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -fno-tree-dominator-opts -fno-tree-vrp\" } */\n \n /* { dg-final { scan-assembler-not \"not\\t\" } } */\n /* { dg-final { scan-assembler-times \"cmp/eq\" 2 } } */"}, {"sha": "785227df690f3dddc1788b6fcdd53bd621410d15", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 67, "deletions": 3, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d53751dd563d30e4400e4a2da530d8ea07da44b/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d53751dd563d30e4400e4a2da530d8ea07da44b/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=1d53751dd563d30e4400e4a2da530d8ea07da44b", "patch": "@@ -1157,6 +1157,68 @@ thread_through_normal_block (edge e,\n   return 0;\n }\n \n+/* There are basic blocks look like:\n+   <P0>\n+   p0 = a CMP b ; or p0 = (INT) (a CMP b)\n+   goto <X>;\n+\n+   <P1>\n+   p1 = c CMP d\n+   goto <X>;\n+\n+   <X>\n+   # phi = PHI <p0 (P0), p1 (P1)>\n+   if (phi != 0) goto <Y>; else goto <Z>;\n+\n+   Then, edge (P0,X) or (P1,X) could be marked as EDGE_START_JUMP_THREAD\n+   And edge (X,Y), (X,Z) is EDGE_COPY_SRC_JOINER_BLOCK\n+\n+   Return true if E is (P0,X) or (P1,X)  */\n+\n+bool\n+edge_forwards_cmp_to_conditional_jump_through_empty_bb_p (edge e)\n+{\n+  /* See if there is only one stmt which is gcond.  */\n+  gcond *gs;\n+  if (!(gs = safe_dyn_cast<gcond *> (last_and_only_stmt (e->dest))))\n+    return false;\n+\n+  /* See if gcond's cond is \"(phi !=/== 0/1)\" in the basic block.  */\n+  tree cond = gimple_cond_lhs (gs);\n+  enum tree_code code = gimple_cond_code (gs);\n+  tree rhs = gimple_cond_rhs (gs);\n+  if (TREE_CODE (cond) != SSA_NAME\n+      || (code != NE_EXPR && code != EQ_EXPR)\n+      || (!integer_onep (rhs) && !integer_zerop (rhs)))\n+    return false;\n+  gphi *phi = dyn_cast <gphi *> (SSA_NAME_DEF_STMT (cond));\n+  if (phi == NULL || gimple_bb (phi) != e->dest)\n+    return false;\n+\n+  /* Check if phi's incoming value is CMP.  */\n+  gassign *def;\n+  tree value = PHI_ARG_DEF_FROM_EDGE (phi, e);\n+  if (TREE_CODE (value) != SSA_NAME\n+      || !has_single_use (value)\n+      || !(def = dyn_cast <gassign *> (SSA_NAME_DEF_STMT (value))))\n+    return false;\n+\n+  /* Or if it is (INT) (a CMP b).  */\n+  if (CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (def)))\n+    {\n+      value = gimple_assign_rhs1 (def);\n+      if (TREE_CODE (value) != SSA_NAME\n+\t  || !has_single_use (value)\n+\t  || !(def = dyn_cast<gassign *> (SSA_NAME_DEF_STMT (value))))\n+\treturn false;\n+    }\n+\n+  if (TREE_CODE_CLASS (gimple_assign_rhs_code (def)) != tcc_comparison)\n+    return false;\n+\n+  return true;\n+}\n+\n /* We are exiting E->src, see if E->dest ends with a conditional\n    jump which has a known value when reached via E.\n \n@@ -1317,10 +1379,12 @@ thread_across_edge (gcond *dummy_cond,\n \n \t/* If we were able to thread through a successor of E->dest, then\n \t   record the jump threading opportunity.  */\n-\tif (found)\n+\tif (found\n+\t    || edge_forwards_cmp_to_conditional_jump_through_empty_bb_p (e))\n \t  {\n-\t    propagate_threaded_block_debug_into (path->last ()->e->dest,\n-\t\t\t\t\t\t taken_edge->dest);\n+\t    if (taken_edge->dest != path->last ()->e->dest)\n+\t      propagate_threaded_block_debug_into (path->last ()->e->dest,\n+\t\t\t\t\t\t   taken_edge->dest);\n \t    register_jump_thread (path);\n \t  }\n \telse"}]}