{"sha": "d14311920581dff3d36aba3e3aeb53f82213ef83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE0MzExOTIwNTgxZGZmM2QzNmFiYTNlM2FlYjUzZjgyMjEzZWY4Mw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-04-22T06:59:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-04-22T06:59:32Z"}, "message": "re PR tree-optimization/70740 (ICE when compiling the Linux kernel (net/wireless/util.o))\n\n2016-04-22  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/70740\n\t* tree-ssa-phiprop.c (propagate_with_phi): Handle inserted\n\tVDEF.\n\n\t* gcc.dg/torture/pr70740.c: New testcase.\n\nFrom-SVN: r235359", "tree": {"sha": "3dbbdf8741398302abc4ad7ab86ec8c77a39c29d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3dbbdf8741398302abc4ad7ab86ec8c77a39c29d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d14311920581dff3d36aba3e3aeb53f82213ef83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d14311920581dff3d36aba3e3aeb53f82213ef83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d14311920581dff3d36aba3e3aeb53f82213ef83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d14311920581dff3d36aba3e3aeb53f82213ef83/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b8ce3fe29de6163328de75c3f733752c2391c093", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8ce3fe29de6163328de75c3f733752c2391c093", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8ce3fe29de6163328de75c3f733752c2391c093"}], "stats": {"total": 57, "additions": 54, "deletions": 3}, "files": [{"sha": "d0aeef43b459f3140ed29279ea42b0af6be10bbb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d14311920581dff3d36aba3e3aeb53f82213ef83/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d14311920581dff3d36aba3e3aeb53f82213ef83/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d14311920581dff3d36aba3e3aeb53f82213ef83", "patch": "@@ -1,3 +1,9 @@\n+2016-04-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/70740\n+\t* tree-ssa-phiprop.c (propagate_with_phi): Handle inserted\n+\tVDEF.\n+\n 2016-04-21  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/70750"}, {"sha": "e5eff26724b9ff6ba28d8b8a3b8dfb6b4483ef3e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d14311920581dff3d36aba3e3aeb53f82213ef83/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d14311920581dff3d36aba3e3aeb53f82213ef83/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d14311920581dff3d36aba3e3aeb53f82213ef83", "patch": "@@ -1,3 +1,8 @@\n+2016-04-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/70740\n+\t* gcc.dg/torture/pr70740.c: New testcase.\n+\n 2016-04-21  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/70750"}, {"sha": "5bf8e4adc917ffc0d8043f980b9e8cac744053b4", "filename": "gcc/testsuite/gcc.dg/torture/pr70740.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d14311920581dff3d36aba3e3aeb53f82213ef83/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr70740.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d14311920581dff3d36aba3e3aeb53f82213ef83/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr70740.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr70740.c?ref=d14311920581dff3d36aba3e3aeb53f82213ef83", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+\n+extern int foo (void);\n+extern void *memcpy (void *, const void *, __SIZE_TYPE__);\n+\n+struct\n+{\n+  char a[6];\n+} d;\n+struct\n+{\n+  int a1[0];\n+  int a2[0];\n+  int a3[0];\n+  int a4[];\n+} a, c;\n+int b;\n+\n+int *\n+bar ()\n+{\n+  if (b)\n+    return a.a4;\n+  return a.a2;\n+}\n+\n+void\n+baz ()\n+{\n+  int *e, *f;\n+  if (foo ())\n+    e = c.a3;\n+  else\n+    e = c.a1;\n+  memcpy (d.a, e, 6);\n+  f = bar ();\n+  memcpy (d.a, f, 1);\n+}"}, {"sha": "80d2fc4cf45f6cbf526c284981443926133440a3", "filename": "gcc/tree-ssa-phiprop.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d14311920581dff3d36aba3e3aeb53f82213ef83/gcc%2Ftree-ssa-phiprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d14311920581dff3d36aba3e3aeb53f82213ef83/gcc%2Ftree-ssa-phiprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiprop.c?ref=d14311920581dff3d36aba3e3aeb53f82213ef83", "patch": "@@ -327,13 +327,15 @@ propagate_with_phi (basic_block bb, gphi *phi, struct phiprop_d *phivn,\n \tcontinue;\n \n       /* Check if we can move the loads.  The def stmt of the virtual use\n-\t needs to be in a different basic block dominating bb.  */\n+\t needs to be in a different basic block dominating bb.  When the\n+\t def is an edge-inserted one we know it dominates us.  */\n       vuse = gimple_vuse (use_stmt);\n       def_stmt = SSA_NAME_DEF_STMT (vuse);\n       if (!SSA_NAME_IS_DEFAULT_DEF (vuse)\n \t  && (gimple_bb (def_stmt) == bb\n-\t      || !dominated_by_p (CDI_DOMINATORS,\n-\t\t\t\t  bb, gimple_bb (def_stmt))))\n+\t      || (gimple_bb (def_stmt)\n+\t\t  && !dominated_by_p (CDI_DOMINATORS,\n+\t\t\t\t      bb, gimple_bb (def_stmt)))))\n \tgoto next;\n \n       /* Found a proper dereference with an aggregate copy.  Just"}]}