{"sha": "e6d8312885dab0589b31eb3c0a88d2c1414222f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZkODMxMjg4NWRhYjA1ODliMzFlYjNjMGE4OGQyYzE0MTQyMjJmMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2004-01-25T11:11:47Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-01-25T11:11:47Z"}, "message": "* combine.c (recog_for_combine): Avoid allocating unnecesary RTX.\n\nFrom-SVN: r76553", "tree": {"sha": "b01c8fd68b496cb3736540e3ea53fa67656c2cd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b01c8fd68b496cb3736540e3ea53fa67656c2cd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6d8312885dab0589b31eb3c0a88d2c1414222f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6d8312885dab0589b31eb3c0a88d2c1414222f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6d8312885dab0589b31eb3c0a88d2c1414222f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6d8312885dab0589b31eb3c0a88d2c1414222f1/comments", "author": null, "committer": null, "parents": [{"sha": "9c519c934cf55602191f45f06eed1ec7c46e3487", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c519c934cf55602191f45f06eed1ec7c46e3487", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c519c934cf55602191f45f06eed1ec7c46e3487"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "b5c11b33451a2b439fe03f116565bcd14e210d21", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6d8312885dab0589b31eb3c0a88d2c1414222f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6d8312885dab0589b31eb3c0a88d2c1414222f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6d8312885dab0589b31eb3c0a88d2c1414222f1", "patch": "@@ -1,3 +1,7 @@\n+2004-01-25  Jan Hubicka  <jh@suse.cz>\n+\n+\t* combine.c (recog_for_combine): Avoid allocating unnecesary RTX.\n+\n 2004-01-25  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips-protos.h (mips_reg_mode_ok_for_base_p): Delete."}, {"sha": "9137076ad30678214af49d16a73be03aa9896565", "filename": "gcc/combine.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6d8312885dab0589b31eb3c0a88d2c1414222f1/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6d8312885dab0589b31eb3c0a88d2c1414222f1/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=e6d8312885dab0589b31eb3c0a88d2c1414222f1", "patch": "@@ -9869,7 +9869,7 @@ recog_for_combine (rtx *pnewpat, rtx insn, rtx *pnotes)\n   int num_clobbers_to_add = 0;\n   int i;\n   rtx notes = 0;\n-  rtx dummy_insn;\n+  rtx old_notes, old_pat;\n \n   /* If PAT is a PARALLEL, check to see if it contains the CLOBBER\n      we use to indicate that something didn't match.  If we find such a\n@@ -9880,13 +9880,12 @@ recog_for_combine (rtx *pnewpat, rtx insn, rtx *pnotes)\n \t  && XEXP (XVECEXP (pat, 0, i), 0) == const0_rtx)\n \treturn -1;\n \n-  /* *pnewpat does not have to be actual PATTERN (insn), so make a dummy\n-     instruction for pattern recognition.  */\n-  dummy_insn = shallow_copy_rtx (insn);\n-  PATTERN (dummy_insn) = pat;\n-  REG_NOTES (dummy_insn) = 0;\n+  old_pat = PATTERN (insn);\n+  old_notes = REG_NOTES (insn);\n+  PATTERN (insn) = pat;\n+  REG_NOTES (insn) = 0;\n \n-  insn_code_number = recog (pat, dummy_insn, &num_clobbers_to_add);\n+  insn_code_number = recog (pat, insn, &num_clobbers_to_add);\n \n   /* If it isn't, there is the possibility that we previously had an insn\n      that clobbered some register as a side effect, but the combined\n@@ -9911,9 +9910,11 @@ recog_for_combine (rtx *pnewpat, rtx insn, rtx *pnotes)\n       if (pos == 1)\n \tpat = XVECEXP (pat, 0, 0);\n \n-      PATTERN (dummy_insn) = pat;\n-      insn_code_number = recog (pat, dummy_insn, &num_clobbers_to_add);\n+      PATTERN (insn) = pat;\n+      insn_code_number = recog (pat, insn, &num_clobbers_to_add);\n     }\n+  PATTERN (insn) = old_pat;\n+  REG_NOTES (insn) = old_notes;\n \n   /* Recognize all noop sets, these will be killed by followup pass.  */\n   if (insn_code_number < 0 && GET_CODE (pat) == SET && set_noop_p (pat))"}]}