{"sha": "bf14eba23b25519f20b198110389e1401be8624f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYxNGViYTIzYjI1NTE5ZjIwYjE5ODExMDM4OWUxNDAxYmU4NjI0Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-02-16T20:46:17Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-02-16T20:46:17Z"}, "message": "re PR c/69835 (-Wnonnull diagnoses parameter comparisons with NULL even when those could have changed)\n\n\tPR c/69835\n\t* common.opt (Wnonnull-compare): New warning.\n\t* doc/invoke.texi (-Wnonnull): Remove text about comparison\n\tof arguments against NULL.\n\t(-Wnonnull-compare): Document.\n\t* Makefile.in (OBJS): Add gimple-ssa-nonnull-compare.o.\n\t* tree-pass.h (make_pass_warn_nonnull_compare): Declare.\n\t* passes.def (pass_warn_nonnull_compare): Add.\n\t* gimple-ssa-nonnull-compare.c: New file.\nc-family/\n\t* c.opt (Wnonnull-compare): Enable for -Wall.\nc/\n\t* c-typeck.c (build_binary_op): Revert 2015-09-09 change.\ncp/\n\t* typeck.c (cp_build_binary_op): Revert 2015-09-09 change.\ntestsuite/\n\t* c-c++-common/nonnull-1.c: Use -Wnonnull-compare instead of\n\t-Wnonnull in dg-options.\n\t* c-c++-common/nonnull-2.c: New test.\n\nFrom-SVN: r233472", "tree": {"sha": "6293882a904a29a02ec3e42b8a4e35989c6479db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6293882a904a29a02ec3e42b8a4e35989c6479db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf14eba23b25519f20b198110389e1401be8624f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf14eba23b25519f20b198110389e1401be8624f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf14eba23b25519f20b198110389e1401be8624f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf14eba23b25519f20b198110389e1401be8624f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7128d6ab21878794ac2107961338fc8621536a40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7128d6ab21878794ac2107961338fc8621536a40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7128d6ab21878794ac2107961338fc8621536a40"}], "stats": {"total": 260, "additions": 235, "deletions": 25}, "files": [{"sha": "29302b03d746cecd1c34eec59bd5e192ccf46b38", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf14eba23b25519f20b198110389e1401be8624f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf14eba23b25519f20b198110389e1401be8624f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf14eba23b25519f20b198110389e1401be8624f", "patch": "@@ -1,3 +1,15 @@\n+2016-02-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/69835\n+\t* common.opt (Wnonnull-compare): New warning.\n+\t* doc/invoke.texi (-Wnonnull): Remove text about comparison\n+\tof arguments against NULL.\n+\t(-Wnonnull-compare): Document.\n+\t* Makefile.in (OBJS): Add gimple-ssa-nonnull-compare.o.\n+\t* tree-pass.h (make_pass_warn_nonnull_compare): Declare.\n+\t* passes.def (pass_warn_nonnull_compare): Add.\n+\t* gimple-ssa-nonnull-compare.c: New file.\n+\n 2016-02-16  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/aarch64.c (cortexa57_tunings): Remove"}, {"sha": "3d6f0e6b1e9df0798ebbcba47b7a1b8389011910", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf14eba23b25519f20b198110389e1401be8624f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf14eba23b25519f20b198110389e1401be8624f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=bf14eba23b25519f20b198110389e1401be8624f", "patch": "@@ -1278,6 +1278,7 @@ OBJS = \\\n \tgimple-pretty-print.o \\\n \tgimple-ssa-backprop.o \\\n \tgimple-ssa-isolate-paths.o \\\n+\tgimple-ssa-nonnull-compare.o \\\n \tgimple-ssa-split-paths.o \\\n \tgimple-ssa-strength-reduction.o \\\n \tgimple-streamer-in.o \\"}, {"sha": "aca8cc2e7385834a77aba9a4ade4f43a922bb4b9", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf14eba23b25519f20b198110389e1401be8624f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf14eba23b25519f20b198110389e1401be8624f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=bf14eba23b25519f20b198110389e1401be8624f", "patch": "@@ -1,3 +1,8 @@\n+2016-02-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/69835\n+\t* c.opt (Wnonnull-compare): Enable for -Wall.\n+\n 2016-02-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/69797"}, {"sha": "638e9c24f819e2ee4099a232f95f1416401ede44", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf14eba23b25519f20b198110389e1401be8624f/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf14eba23b25519f20b198110389e1401be8624f/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=bf14eba23b25519f20b198110389e1401be8624f", "patch": "@@ -677,6 +677,10 @@ Wnonnull\n C ObjC C++ ObjC++ LangEnabledBy(C ObjC C++ ObjC++,Wall)\n ;\n \n+Wnonnull-compare\n+C ObjC C++ ObjC++ LangEnabledBy(C ObjC C++ ObjC++,Wall)\n+;\n+\n Wnormalized\n C ObjC C++ ObjC++ Warning Alias(Wnormalized=,nfc,none)\n ;"}, {"sha": "ae00338ec27ab446d46277a2bb6bdb4723059aa6", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf14eba23b25519f20b198110389e1401be8624f/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf14eba23b25519f20b198110389e1401be8624f/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=bf14eba23b25519f20b198110389e1401be8624f", "patch": "@@ -1,3 +1,8 @@\n+2016-02-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/69835\n+\t* c-typeck.c (build_binary_op): Revert 2015-09-09 change.\n+\n 2016-02-16  James Norris  <jnorris@codesourcery.com>\n \n \tPR c/64748"}, {"sha": "6aa0f03dabe83c07c614d8c1ebe60fa4af1e8d7e", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf14eba23b25519f20b198110389e1401be8624f/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf14eba23b25519f20b198110389e1401be8624f/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=bf14eba23b25519f20b198110389e1401be8624f", "patch": "@@ -11086,11 +11086,6 @@ build_binary_op (location_t location, enum tree_code code,\n \tshort_compare = 1;\n       else if (code0 == POINTER_TYPE && null_pointer_constant_p (orig_op1))\n \t{\n-\t  if (warn_nonnull\n-\t      && TREE_CODE (op0) == PARM_DECL && nonnull_arg_p (op0))\n-\t    warning_at (location, OPT_Wnonnull,\n-\t\t\t\"nonnull argument %qD compared to NULL\", op0);\n-\n \t  if (TREE_CODE (op0) == ADDR_EXPR\n \t      && decl_with_nonnull_addr_p (TREE_OPERAND (op0, 0)))\n \t    {\n@@ -11111,11 +11106,6 @@ build_binary_op (location_t location, enum tree_code code,\n \t}\n       else if (code1 == POINTER_TYPE && null_pointer_constant_p (orig_op0))\n \t{\n-\t  if (warn_nonnull\n-\t      && TREE_CODE (op1) == PARM_DECL && nonnull_arg_p (op1))\n-\t    warning_at (location, OPT_Wnonnull,\n-\t\t\t\"nonnull argument %qD compared to NULL\", op1);\n-\n \t  if (TREE_CODE (op1) == ADDR_EXPR\n \t      && decl_with_nonnull_addr_p (TREE_OPERAND (op1, 0)))\n \t    {"}, {"sha": "3c3669ad271de723d8d7143a94d8fa110f1238a4", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf14eba23b25519f20b198110389e1401be8624f/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf14eba23b25519f20b198110389e1401be8624f/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=bf14eba23b25519f20b198110389e1401be8624f", "patch": "@@ -616,6 +616,10 @@ Wlarger-than=\n Common RejectNegative Joined UInteger Warning\n -Wlarger-than=<number>\tWarn if an object is larger than <number> bytes.\n \n+Wnonnull-compare\n+Var(warn_nonnull_compare) Warning\n+Warn if comparing pointer parameter with nonnull attribute with NULL.\n+\n Wnull-dereference\n Common Var(warn_null_dereference) Warning\n Warn if dereferencing a NULL pointer may lead to erroneous or undefined behavior."}, {"sha": "d12cb73e2da18f66f8c730366bd37a8a85304ea8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf14eba23b25519f20b198110389e1401be8624f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf14eba23b25519f20b198110389e1401be8624f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bf14eba23b25519f20b198110389e1401be8624f", "patch": "@@ -1,3 +1,8 @@\n+2016-02-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/69835\n+\t* typeck.c (cp_build_binary_op): Revert 2015-09-09 change.\n+\n 2016-02-16  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/69657"}, {"sha": "5e62220b68f5385258fd0187c199622650d205f1", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf14eba23b25519f20b198110389e1401be8624f/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf14eba23b25519f20b198110389e1401be8624f/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=bf14eba23b25519f20b198110389e1401be8624f", "patch": "@@ -4514,11 +4514,6 @@ cp_build_binary_op (location_t location,\n \t       || (code0 == POINTER_TYPE\n \t\t   && TYPE_PTR_P (type1) && integer_zerop (op1)))\n \t{\n-\t  if (warn_nonnull\n-\t      && TREE_CODE (op0) == PARM_DECL && nonnull_arg_p (op0))\n-\t    warning_at (location, OPT_Wnonnull,\n-\t\t\t\"nonnull argument %qD compared to NULL\", op0);\n-\n \t  if (TYPE_PTR_P (type1))\n \t    result_type = composite_pointer_type (type0, type1, op0, op1,\n \t\t\t\t\t\t  CPO_COMPARISON, complain);\n@@ -4558,11 +4553,6 @@ cp_build_binary_op (location_t location,\n \t       || (code1 == POINTER_TYPE\n \t\t   && TYPE_PTR_P (type0) && integer_zerop (op0)))\n \t{\n-\t  if (warn_nonnull\n-\t      && TREE_CODE (op1) == PARM_DECL && nonnull_arg_p (op1))\n-\t    warning_at (location, OPT_Wnonnull,\n-\t\t\t\"nonnull argument %qD compared to NULL\", op1);\n-\n \t  if (TYPE_PTR_P (type0))\n \t    result_type = composite_pointer_type (type0, type1, op0, op1,\n \t\t\t\t\t\t  CPO_COMPARISON, complain);"}, {"sha": "2bd793d13b3f31e1a77d453ca23474ec214199af", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf14eba23b25519f20b198110389e1401be8624f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf14eba23b25519f20b198110389e1401be8624f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=bf14eba23b25519f20b198110389e1401be8624f", "patch": "@@ -276,7 +276,8 @@ Objective-C and Objective-C++ Dialects}.\n -Wmain -Wmaybe-uninitialized -Wmemset-transposed-args @gol\n -Wmisleading-indentation -Wmissing-braces @gol\n -Wmissing-field-initializers -Wmissing-include-dirs @gol\n--Wno-multichar  -Wnonnull  -Wnormalized=@r{[}none@r{|}id@r{|}nfc@r{|}nfkc@r{]} @gol\n+-Wno-multichar -Wnonnull -Wnonnull-compare @gol\n+-Wnormalized=@r{[}none@r{|}id@r{|}nfc@r{|}nfkc@r{]} @gol\n -Wnull-dereference -Wodr  -Wno-overflow  -Wopenmp-simd  @gol\n -Woverride-init-side-effects -Woverlength-strings @gol\n -Wpacked  -Wpacked-bitfield-compat  -Wpadded @gol\n@@ -3537,6 +3538,7 @@ Options} and @ref{Objective-C and Objective-C++ Dialect Options}.\n -Wmissing-braces @r{(only for C/ObjC)} @gol\n -Wnarrowing @r{(only for C++)}  @gol\n -Wnonnull  @gol\n+-Wnonnull-compare  @gol\n -Wopenmp-simd @gol\n -Wparentheses  @gol\n -Wpointer-sign  @gol\n@@ -3795,12 +3797,18 @@ formats that may yield only a two-digit year.\n Warn about passing a null pointer for arguments marked as\n requiring a non-null value by the @code{nonnull} function attribute.\n \n-Also warns when comparing an argument marked with the @code{nonnull}\n-function attribute against null inside the function.\n-\n @option{-Wnonnull} is included in @option{-Wall} and @option{-Wformat}.  It\n can be disabled with the @option{-Wno-nonnull} option.\n \n+@item -Wnonnull-compare\n+@opindex Wnonnull-compare\n+@opindex Wno-nonnull-compare\n+Warn when comparing an argument marked with the @code{nonnull}\n+function attribute against null inside the function.\n+\n+@option{-Wnonnull-compare} is included in @option{-Wall}.  It\n+can be disabled with the @option{-Wno-nonnull-compare} option.\n+\n @item -Wnull-dereference\n @opindex Wnull-dereference\n @opindex Wno-null-dereference"}, {"sha": "910188b064ab60001f3b7ba79a5d38c2388db306", "filename": "gcc/gimple-ssa-nonnull-compare.c", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf14eba23b25519f20b198110389e1401be8624f/gcc%2Fgimple-ssa-nonnull-compare.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf14eba23b25519f20b198110389e1401be8624f/gcc%2Fgimple-ssa-nonnull-compare.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-nonnull-compare.c?ref=bf14eba23b25519f20b198110389e1401be8624f", "patch": "@@ -0,0 +1,151 @@\n+/* -Wnonnull-compare warning support.\n+   Copyright (C) 2016 Free Software Foundation, Inc.\n+   Contributed by Jakub Jelinek <jakub@redhat.com>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"backend.h\"\n+#include \"tree.h\"\n+#include \"gimple.h\"\n+#include \"tree-pass.h\"\n+#include \"ssa.h\"\n+#include \"diagnostic-core.h\"\n+#include \"tree-dfa.h\"\n+\n+/* Warn about comparison of nonnull_arg_p argument initial values\n+   with NULL.  */\n+\n+static void\n+do_warn_nonnull_compare (function *fun, tree arg)\n+{\n+  if (!POINTER_TYPE_P (TREE_TYPE (arg))\n+      && TREE_CODE (TREE_TYPE (arg)) != OFFSET_TYPE)\n+    return;\n+\n+  if (!nonnull_arg_p (arg))\n+    return;\n+\n+  tree d = ssa_default_def (fun, arg);\n+  if (d == NULL_TREE)\n+    return;\n+\n+  use_operand_p use_p;\n+  imm_use_iterator iter;\n+\n+  FOR_EACH_IMM_USE_FAST (use_p, iter, d)\n+    {\n+      gimple *stmt = USE_STMT (use_p);\n+      tree op = NULL_TREE;\n+      location_t loc = gimple_location (stmt);\n+      if (gimple_code (stmt) == GIMPLE_COND)\n+\tswitch (gimple_cond_code (stmt))\n+\t  {\n+\t  case EQ_EXPR:\n+\t  case NE_EXPR:\n+\t    if (gimple_cond_lhs (stmt) == d)\n+\t      op = gimple_cond_rhs (stmt);\n+\t    break;\n+\t  default:\n+\t    break;\n+\t  }\n+      else if (is_gimple_assign (stmt))\n+\tswitch (gimple_assign_rhs_code (stmt))\n+\t  {\n+\t  case EQ_EXPR:\n+\t  case NE_EXPR:\n+\t    if (gimple_assign_rhs1 (stmt) == d)\n+\t      op = gimple_assign_rhs2 (stmt);\n+\t    break;\n+\t  case COND_EXPR:\n+\t    switch (TREE_CODE (gimple_assign_rhs1 (stmt)))\n+\t      {\n+\t      case EQ_EXPR:\n+\t      case NE_EXPR:\n+\t\top = gimple_assign_rhs1 (stmt);\n+\t\tif (TREE_OPERAND (op, 0) != d)\n+\t\t  {\n+\t\t    op = NULL_TREE;\n+\t\t    break;\n+\t\t  }\n+\t\tloc = EXPR_LOC_OR_LOC (op, loc);\n+\t\top = TREE_OPERAND (op, 1);\n+\t\tbreak;\n+\t      default:\n+\t\tbreak;\n+\t      }\n+\t    break;\n+\t  default:\n+\t    break;\n+\t  }\n+      if (op\n+\t  && (POINTER_TYPE_P (TREE_TYPE (arg))\n+\t      ? integer_zerop (op) : integer_minus_onep (op)))\n+\twarning_at (loc, OPT_Wnonnull_compare,\n+\t\t    \"nonnull argument %qD compared to NULL\", arg);\n+    }\n+}\n+\n+namespace {\n+\n+const pass_data pass_data_warn_nonnull_compare =\n+{\n+  GIMPLE_PASS, /* type */\n+  \"*nonnullcmp\", /* name */\n+  OPTGROUP_NONE, /* optinfo_flags */\n+  TV_NONE, /* tv_id */\n+  PROP_ssa, /* properties_required */\n+  0, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  0, /* todo_flags_finish */\n+};\n+\n+class pass_warn_nonnull_compare : public gimple_opt_pass\n+{\n+public:\n+  pass_warn_nonnull_compare (gcc::context *ctxt)\n+    : gimple_opt_pass (pass_data_warn_nonnull_compare, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  virtual bool gate (function *) { return warn_nonnull_compare; }\n+\n+  virtual unsigned int execute (function *);\n+\n+}; // class pass_warn_nonnull_compare\n+\n+unsigned int\n+pass_warn_nonnull_compare::execute (function *fun)\n+{\n+  if (fun->static_chain_decl)\n+    do_warn_nonnull_compare (fun, fun->static_chain_decl);\n+\n+  for (tree arg = DECL_ARGUMENTS (cfun->decl); arg; arg = DECL_CHAIN (arg))\n+    do_warn_nonnull_compare (fun, arg);\n+  return 0;\n+}\n+\n+} // anon namespace\n+\n+gimple_opt_pass *\n+make_pass_warn_nonnull_compare (gcc::context *ctxt)\n+{\n+  return new pass_warn_nonnull_compare (ctxt);\n+}"}, {"sha": "7aed144454291df39a5ffe5a809e20ec6fbfb5b3", "filename": "gcc/passes.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf14eba23b25519f20b198110389e1401be8624f/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf14eba23b25519f20b198110389e1401be8624f/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=bf14eba23b25519f20b198110389e1401be8624f", "patch": "@@ -56,6 +56,7 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_fixup_cfg);\n       NEXT_PASS (pass_init_datastructures);\n       NEXT_PASS (pass_build_ssa);\n+      NEXT_PASS (pass_warn_nonnull_compare);\n       NEXT_PASS (pass_ubsan);\n       NEXT_PASS (pass_early_warn_uninitialized);\n       NEXT_PASS (pass_nothrow);"}, {"sha": "df0b67cd447b15c051219b220044085e2d19563d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf14eba23b25519f20b198110389e1401be8624f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf14eba23b25519f20b198110389e1401be8624f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf14eba23b25519f20b198110389e1401be8624f", "patch": "@@ -1,3 +1,10 @@\n+2016-02-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/69835\n+\t* c-c++-common/nonnull-1.c: Use -Wnonnull-compare instead of\n+\t-Wnonnull in dg-options.\n+\t* c-c++-common/nonnull-2.c: New test.\n+\n 2016-02-16  James Greenhalgh  <james.greenhalgh@arm.com>\n \t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n "}, {"sha": "fb2814c44981cfbccc74fb926f61aabb6b92f8e9", "filename": "gcc/testsuite/c-c++-common/nonnull-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf14eba23b25519f20b198110389e1401be8624f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fnonnull-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf14eba23b25519f20b198110389e1401be8624f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fnonnull-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fnonnull-1.c?ref=bf14eba23b25519f20b198110389e1401be8624f", "patch": "@@ -1,7 +1,7 @@\n /* Test for the bad usage of \"nonnull\" function attribute parms.  */\n /*  */\n /* { dg-do compile } */\n-/* { dg-options \"-Wnonnull\" } */\n+/* { dg-options \"-Wnonnull-compare\" } */\n \n #include <stddef.h>\n #include <stdlib.h>"}, {"sha": "ebd17a21f030985d44fdec770341c6b05580033f", "filename": "gcc/testsuite/c-c++-common/nonnull-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf14eba23b25519f20b198110389e1401be8624f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fnonnull-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf14eba23b25519f20b198110389e1401be8624f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fnonnull-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fnonnull-2.c?ref=bf14eba23b25519f20b198110389e1401be8624f", "patch": "@@ -0,0 +1,26 @@\n+/* Test for the bad usage of \"nonnull\" function attribute parms.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wnonnull-compare\" } */\n+\n+void bar (char **);\n+\n+__attribute__((nonnull (1, 3))) int\n+foo (char *cp1, char *cp2, char *cp3, char *cp4)\n+{\n+  if (cp1 == (char *) 0) /* { dg-warning \"nonnull argument\" \"cp1 compared to NULL\" } */\n+    return 1;\n+\n+  cp1 = cp2;\n+  if (cp1 == (char *) 0) /* { dg-bogus \"nonnull argument\" } */\n+    return 2;\n+\n+  if (!cp4)\t   /* { dg-bogus \"nonnull argument\" } */\n+    return 3;\n+\n+  char **p = &cp3;\n+  bar (p);\n+  if (cp3 == (char *) 0) /* { dg-bogus \"nonnull argument\" } */\n+    return 4;\n+\n+  return 5;\n+}"}, {"sha": "5f5055d3a6c1f944557a84deceda2da79eab3308", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf14eba23b25519f20b198110389e1401be8624f/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf14eba23b25519f20b198110389e1401be8624f/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=bf14eba23b25519f20b198110389e1401be8624f", "patch": "@@ -472,6 +472,7 @@ extern gimple_opt_pass *make_pass_oacc_kernels (gcc::context *ctxt);\n extern simple_ipa_opt_pass *make_pass_ipa_oacc (gcc::context *ctxt);\n extern simple_ipa_opt_pass *make_pass_ipa_oacc_kernels (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_gen_hsail (gcc::context *ctxt);\n+extern gimple_opt_pass *make_pass_warn_nonnull_compare (gcc::context *ctxt);\n \n /* IPA Passes */\n extern simple_ipa_opt_pass *make_pass_ipa_lower_emutls (gcc::context *ctxt);"}]}