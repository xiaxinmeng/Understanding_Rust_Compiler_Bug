{"sha": "a05cc70a6c1ae0e5b22e16f4d8d13995a38ea1f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA1Y2M3MGE2YzFhZTBlNWIyMmUxNmY0ZDhkMTM5OTVhMzhlYTFmOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-01-06T08:26:55Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-01-06T08:33:37Z"}, "message": "tree-optimization/98513 - fix bug in range intersection code\n\nThis fixes a premature optimization in the range intersection code\nwhich assumes earlier branches have to be taken, not taking into\naccount that for symbolic ranges we cannot always compare endpoints.\nThe fix is to instantiate the compare deemed redundant (which then\nfails as undecidable for the testcase).\n\n2021-01-06  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/98513\n\t* value-range.cc (intersect_ranges): Compare the upper bounds\n\tfor the expected relation.\n\n\t* gcc.dg/tree-ssa/pr98513.c: New testcase.", "tree": {"sha": "4bf3a143b16e38f1dcb6d6b8cc72ece392047926", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bf3a143b16e38f1dcb6d6b8cc72ece392047926"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a05cc70a6c1ae0e5b22e16f4d8d13995a38ea1f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a05cc70a6c1ae0e5b22e16f4d8d13995a38ea1f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a05cc70a6c1ae0e5b22e16f4d8d13995a38ea1f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a05cc70a6c1ae0e5b22e16f4d8d13995a38ea1f9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57706dd7e001d8302b596521217827855324e748", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57706dd7e001d8302b596521217827855324e748", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57706dd7e001d8302b596521217827855324e748"}], "stats": {"total": 53, "additions": 51, "deletions": 2}, "files": [{"sha": "c15d6bd708e9beedac4b9089d9a970e36c0dbbee", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr98513.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a05cc70a6c1ae0e5b22e16f4d8d13995a38ea1f9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr98513.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a05cc70a6c1ae0e5b22e16f4d8d13995a38ea1f9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr98513.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr98513.c?ref=a05cc70a6c1ae0e5b22e16f4d8d13995a38ea1f9", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fgimple\" } */\n+\n+__attribute__((noipa))\n+void __GIMPLE (ssa,startwith(\"evrp\"))\n+foo (int x, int minus_1)\n+{\n+  int tem;\n+  unsigned int _1;\n+  unsigned int _2;\n+\n+  __BB(2):\n+  tem_4 = minus_1_3(D);\n+  tem_5 = tem_4 + 2;\n+  _1 = (unsigned int) x_6(D);\n+  _2 = _1 + 2147483647u;\n+  if (_2 > 1u)\n+    goto __BB3;\n+  else\n+    goto __BB6;\n+\n+  __BB(3):\n+  if (x_6(D) <= tem_5)\n+    goto __BB4;\n+  else\n+    goto __BB6;\n+\n+  __BB(4):\n+  if (x_6(D) > 5)\n+    goto __BB5;\n+  else\n+    goto __BB6;\n+\n+  __BB(5):\n+  __builtin_exit (0);\n+\n+  __BB(6):\n+  return;\n+\n+}\n+\n+int\n+main()\n+{\n+  foo (10, 100);\n+  __builtin_abort ();\n+}"}, {"sha": "9c42f82a10585e38587798259fdc13ad8395c439", "filename": "gcc/value-range.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a05cc70a6c1ae0e5b22e16f4d8d13995a38ea1f9/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a05cc70a6c1ae0e5b22e16f4d8d13995a38ea1f9/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=a05cc70a6c1ae0e5b22e16f4d8d13995a38ea1f9", "patch": "@@ -974,7 +974,8 @@ intersect_ranges (enum value_range_kind *vr0type,\n     }\n   else if ((operand_less_p (vr1min, *vr0max) == 1\n \t    || operand_equal_p (vr1min, *vr0max, 0))\n-\t   && operand_less_p (*vr0min, vr1min) == 1)\n+\t   && operand_less_p (*vr0min, vr1min) == 1\n+\t   && operand_less_p (*vr0max, vr1max) == 1)\n     {\n       /* [  (  ]  ) or [  ](  ) */\n       if (*vr0type == VR_ANTI_RANGE\n@@ -1008,7 +1009,8 @@ intersect_ranges (enum value_range_kind *vr0type,\n     }\n   else if ((operand_less_p (*vr0min, vr1max) == 1\n \t    || operand_equal_p (*vr0min, vr1max, 0))\n-\t   && operand_less_p (vr1min, *vr0min) == 1)\n+\t   && operand_less_p (vr1min, *vr0min) == 1\n+\t   && operand_less_p (vr1max, *vr0max) == 1)\n     {\n       /* (  [  )  ] or (  )[  ] */\n       if (*vr0type == VR_ANTI_RANGE"}]}