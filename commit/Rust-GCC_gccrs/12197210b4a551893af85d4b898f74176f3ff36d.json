{"sha": "12197210b4a551893af85d4b898f74176f3ff36d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTIxOTcyMTBiNGE1NTE4OTNhZjg1ZDRiODk4Zjc0MTc2ZjNmZjM2ZA==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2006-07-04T11:39:46Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2006-07-04T11:39:46Z"}, "message": "intrinsic.c (add_subroutines): Add ITIME and IDATE.\n\n\t* intrinsic.c (add_subroutines): Add ITIME and IDATE.\n\t* intrinsic.h (gfc_check_itime_idate,gfc_resolve_idate,\n\tfc_resolve_itime): New protos.\n\t* iresolve.c (gfc_resolve_itime, gfc_resolve_idate): New functions.\n\t* check.c (gfc_check_itime_idate): New function.\n\t* intrinsic.texi: Document the new intrinsics.\n\n\t* intrinsics/date_and_time.c (itime0,idate0,itime_i4,itime_i8,\n\tidate_i4,idate_i8): New functions.\n\n\t* gfortran.dg/itime_idate_1.f: New test.\n\t* gfortran.dg/itime_idate_2.f: New test.\n\nCo-Authored-By: Daniel Franke <franke.daniel@gmail.com>\n\nFrom-SVN: r115173", "tree": {"sha": "95fe84a7cd588da64cb8cea0d251407d2b14864c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95fe84a7cd588da64cb8cea0d251407d2b14864c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12197210b4a551893af85d4b898f74176f3ff36d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12197210b4a551893af85d4b898f74176f3ff36d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12197210b4a551893af85d4b898f74176f3ff36d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12197210b4a551893af85d4b898f74176f3ff36d/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b50988af53a1e6237a8c3b61c5da1c4d1a41117", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b50988af53a1e6237a8c3b61c5da1c4d1a41117", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b50988af53a1e6237a8c3b61c5da1c4d1a41117"}], "stats": {"total": 357, "additions": 353, "deletions": 4}, "files": [{"sha": "6deaea58acaef2f248bb699f6e51369e677c22a1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12197210b4a551893af85d4b898f74176f3ff36d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12197210b4a551893af85d4b898f74176f3ff36d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=12197210b4a551893af85d4b898f74176f3ff36d", "patch": "@@ -1,3 +1,19 @@\n+2006-07-04  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\t    Daniel Franke  <franke.daniel@gmail.com>\n+\n+\t* intrinsic.c (add_subroutines): Add ITIME and IDATE.\n+\t* intrinsic.h (gfc_check_itime_idate,gfc_resolve_idate,\n+\tfc_resolve_itime): New protos.\n+\t* iresolve.c (gfc_resolve_itime, gfc_resolve_idate): New functions.\n+\t* check.c (gfc_check_itime_idate): New function.\n+\t* intrinsic.texi: Document the new intrinsics.\n+\n+2006-07-03  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\t* intrinsics/date_and_time.c (itime0,idate0,itime_i4,itime_i8,\n+\tidate_i4,idate_i8): New functions.\n+\n+\n 2006-07-03  Asher Langton  <langton2@llnl.gov>\n \n \t* decl.c (match_old_style_init): Add data attribute to symbol."}, {"sha": "5f536f5920869bd722c2dea790dca130fee7834a", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12197210b4a551893af85d4b898f74176f3ff36d/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12197210b4a551893af85d4b898f74176f3ff36d/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=12197210b4a551893af85d4b898f74176f3ff36d", "patch": "@@ -3036,6 +3036,28 @@ gfc_check_hostnm_sub (gfc_expr * name, gfc_expr * status)\n }\n \n \n+try\n+gfc_check_itime_idate (gfc_expr * values)\n+{\n+  if (array_check (values, 0) == FAILURE)\n+    return FAILURE;\n+\n+  if (rank_check (values, 0, 1) == FAILURE)\n+    return FAILURE;\n+\n+  if (variable_check (values, 0) == FAILURE)\n+    return FAILURE;\n+\n+  if (type_check (values, 0, BT_INTEGER) == FAILURE)\n+    return FAILURE;\n+\n+  if (kind_value_check(values, 0, gfc_default_integer_kind) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+\n try\n gfc_check_ttynam_sub (gfc_expr * unit, gfc_expr * name)\n {"}, {"sha": "3ee0829f259e6f7e3d94c4e5cf0d4fd4d16288b2", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12197210b4a551893af85d4b898f74176f3ff36d/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12197210b4a551893af85d4b898f74176f3ff36d/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=12197210b4a551893af85d4b898f74176f3ff36d", "patch": "@@ -2241,8 +2241,16 @@ add_subroutines (void)\n \n   /* More G77 compatibility garbage.  */\n   add_sym_2s (\"ctime\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n-\t     gfc_check_ctime_sub, NULL, gfc_resolve_ctime_sub,\n-\t     tm, BT_INTEGER, di, REQUIRED, res, BT_CHARACTER, dc, REQUIRED);\n+\t      gfc_check_ctime_sub, NULL, gfc_resolve_ctime_sub,\n+\t      tm, BT_INTEGER, di, REQUIRED, res, BT_CHARACTER, dc, REQUIRED);\n+\n+  add_sym_1s (\"idate\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+\t      gfc_check_itime_idate, NULL, gfc_resolve_idate,\n+\t      vl, BT_INTEGER, 4, REQUIRED);\n+\n+  add_sym_1s (\"itime\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+\t      gfc_check_itime_idate, NULL, gfc_resolve_itime,\n+\t      vl, BT_INTEGER, 4, REQUIRED);\n \n   add_sym_1s (\"second\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_second_sub, NULL, gfc_resolve_second_sub,"}, {"sha": "63e0ff0fad66cf0503c421442906ccd0388c4feb", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12197210b4a551893af85d4b898f74176f3ff36d/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12197210b4a551893af85d4b898f74176f3ff36d/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=12197210b4a551893af85d4b898f74176f3ff36d", "patch": "@@ -159,6 +159,7 @@ try gfc_check_fgetput_sub (gfc_expr *, gfc_expr *);\n try gfc_check_ftell_sub (gfc_expr *, gfc_expr *);\n try gfc_check_getcwd_sub (gfc_expr *, gfc_expr *);\n try gfc_check_hostnm_sub (gfc_expr *, gfc_expr *);\n+try gfc_check_itime_idate (gfc_expr *);\n try gfc_check_kill_sub (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_perror (gfc_expr *);\n try gfc_check_rename_sub (gfc_expr *, gfc_expr *, gfc_expr *);\n@@ -445,6 +446,8 @@ void gfc_resolve_get_command (gfc_code *);\n void gfc_resolve_get_command_argument (gfc_code *);\n void gfc_resolve_get_environment_variable (gfc_code *);\n void gfc_resolve_hostnm_sub (gfc_code *);\n+void gfc_resolve_idate (gfc_code *);\n+void gfc_resolve_itime (gfc_code *);\n void gfc_resolve_kill_sub (gfc_code *);\n void gfc_resolve_mvbits (gfc_code *);\n void gfc_resolve_perror (gfc_code *);"}, {"sha": "9d8b835ee0d668717ed5c99fe93177d3a8f26f2c", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12197210b4a551893af85d4b898f74176f3ff36d/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12197210b4a551893af85d4b898f74176f3ff36d/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=12197210b4a551893af85d4b898f74176f3ff36d", "patch": "@@ -100,7 +100,9 @@ and editing.  All contributions and corrections are strongly encouraged.\n * @code{HUGE}:          HUGE,      Largest number of a kind\n * @code{IACHAR}:        IACHAR,    Code in @acronym{ASCII} collating sequence\n * @code{ICHAR}:         ICHAR,     Character-to-integer conversion function\n+* @code{IDATE}:         IDATE,     Current local time (day/month/year)\n * @code{IRAND}:         IRAND,     Integer pseudo-random number\n+* @code{ITIME}:         ITIME,     Current local time (hour/minutes/seconds)\n * @code{KIND}:          KIND,      Kind of an entity\n * @code{LOC}:           LOC,       Returns the address of a variable\n * @code{LOG}:           LOG,       Logarithm function\n@@ -3294,6 +3296,46 @@ end program read_val\n @end smallexample\n @end table\n \n+@node IDATE\n+@section @code{IDATE} --- Get current local time subroutine (day/month/year) \n+@findex @code{IDATE} intrinsic\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{IDATE(TARRAY)} Fills @var{TARRAY} with the numerical values at the  \n+current local time. The day (in the range 1-31), month (in the range 1-12), \n+and year appear in elements 1, 2, and 3 of @var{TARRAY}, respectively. \n+The year has four significant digits.\n+\n+@item @emph{Option}:\n+gnu\n+\n+@item @emph{Class}:\n+subroutine\n+\n+@item @emph{Syntax}:\n+@code{CALL IDATE(TARRAY)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{TARRAY} @tab The type shall be @code{INTEGER, DIMENSION(3)} and\n+the kind shall be the default integer kind.\n+@end multitable\n+\n+@item @emph{Return value}:\n+Does not return.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_idate\n+  integer, dimension(3) :: tarray\n+  call idate(tarray)\n+  print *, tarray(1)\n+  print *, tarray(2)\n+  print *, tarray(3)\n+end program test_idate\n+@end smallexample\n+@end table\n \n \n @node IRAND\n@@ -3340,6 +3382,47 @@ end program test_irand\n \n @end table\n \n+@node ITIME\n+@section @code{ITIME} --- Get current local time subroutine (hour/minutes/seconds) \n+@findex @code{ITIME} intrinsic\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{IDATE(TARRAY)} Fills @var{TARRAY} with the numerical values at the  \n+current local time. The hour (in the range 1-24), minute (in the range 1-60), \n+and seconds (in the range 1-60) appear in elements 1, 2, and 3 of @var{TARRAY}, \n+respectively.\n+\n+@item @emph{Option}:\n+gnu\n+\n+@item @emph{Class}:\n+subroutine\n+\n+@item @emph{Syntax}:\n+@code{CALL ITIME(TARRAY)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{TARRAY} @tab The type shall be @code{INTEGER, DIMENSION(3)}\n+and the kind shall be the default integer kind.\n+@end multitable\n+\n+@item @emph{Return value}:\n+Does not return.\n+\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_itime\n+  integer, dimension(3) :: tarray\n+  call itime(tarray)\n+  print *, tarray(1)\n+  print *, tarray(2)\n+  print *, tarray(3)\n+end program test_itime\n+@end smallexample\n+@end table\n \n \n @node KIND"}, {"sha": "3eeebc71c7a99af994a93cb0e702692897e09004", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12197210b4a551893af85d4b898f74176f3ff36d/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12197210b4a551893af85d4b898f74176f3ff36d/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=12197210b4a551893af85d4b898f74176f3ff36d", "patch": "@@ -2334,6 +2334,26 @@ gfc_resolve_etime_sub (gfc_code * c)\n }\n \n \n+/* G77 compatibility subroutines itime() and idate().  */\n+\n+void\n+gfc_resolve_itime (gfc_code * c)\n+{\n+  c->resolved_sym = gfc_get_intrinsic_sub_symbol\n+\t\t      (gfc_get_string (PREFIX(\"itime_i%d\"),\n+\t\t\t\t       gfc_default_integer_kind));\n+}\n+\n+\n+void\n+gfc_resolve_idate (gfc_code * c)\n+{\n+  c->resolved_sym = gfc_get_intrinsic_sub_symbol\n+\t\t      (gfc_get_string (PREFIX(\"idate_i%d\"),\n+\t\t\t\t       gfc_default_integer_kind));\n+}\n+\n+\n /* G77 compatibility subroutine second().  */\n \n void"}, {"sha": "96a3218afa0b1f1cba521d6fbaf4110bf31e9c7b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12197210b4a551893af85d4b898f74176f3ff36d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12197210b4a551893af85d4b898f74176f3ff36d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=12197210b4a551893af85d4b898f74176f3ff36d", "patch": "@@ -1,3 +1,8 @@\n+2006-07-04  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\t* gfortran.dg/itime_idate_1.f: New test.\n+\t* gfortran.dg/itime_idate_2.f: New test.\n+\n 2006-07-03  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/27704"}, {"sha": "618a83f1769d71f4a45d1833eb77a2e5893fa01e", "filename": "gcc/testsuite/gfortran.dg/itime_idate_1.f", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12197210b4a551893af85d4b898f74176f3ff36d/gcc%2Ftestsuite%2Fgfortran.dg%2Fitime_idate_1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12197210b4a551893af85d4b898f74176f3ff36d/gcc%2Ftestsuite%2Fgfortran.dg%2Fitime_idate_1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fitime_idate_1.f?ref=12197210b4a551893af85d4b898f74176f3ff36d", "patch": "@@ -0,0 +1,12 @@\n+! { dg-do run }\n+! Test for ITIME and IDATE intrinsics\n+      integer x(3)\n+      call itime(x)\n+      if (x(1) < 0 .or. x(1) > 23 .or.\n+     &    x(2) < 0 .or. x(2) > 59 .or.\n+     &    x(3) < 0 .or. x(3) > 61) call abort\n+      call idate(x)\n+      if (x(1) < 1 .or. x(1) > 31 .or.\n+     &    x(2) < 1 .or. x(2) > 12 .or.\n+     &    x(3) < 2001 .or. x(3) > 2100) call abort\n+      end"}, {"sha": "11c582dd6eea207e4dde460f97809a61cf6e5de8", "filename": "gcc/testsuite/gfortran.dg/itime_idate_2.f", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12197210b4a551893af85d4b898f74176f3ff36d/gcc%2Ftestsuite%2Fgfortran.dg%2Fitime_idate_2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12197210b4a551893af85d4b898f74176f3ff36d/gcc%2Ftestsuite%2Fgfortran.dg%2Fitime_idate_2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fitime_idate_2.f?ref=12197210b4a551893af85d4b898f74176f3ff36d", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do run }\n+! { dg-options \"-fdefault-integer-8\" }\n+! Test for ITIME and IDATE intrinsics\n+      integer x(3)\n+      call itime(x)\n+      if (x(1) < 0 .or. x(1) > 23 .or.\n+     &    x(2) < 0 .or. x(2) > 59 .or.\n+     &    x(3) < 0 .or. x(3) > 61) call abort\n+      call idate(x)\n+      if (x(1) < 1 .or. x(1) > 31 .or.\n+     &    x(2) < 1 .or. x(2) > 12 .or.\n+     &    x(3) < 2001 .or. x(3) > 2100) call abort\n+      end"}, {"sha": "a680112480588b2a8f1d792c5c0edf10ee5a031b", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12197210b4a551893af85d4b898f74176f3ff36d/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12197210b4a551893af85d4b898f74176f3ff36d/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=12197210b4a551893af85d4b898f74176f3ff36d", "patch": "@@ -1,3 +1,8 @@\n+2006-07-04  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\t* intrinsics/date_and_time.c (itime0,idate0,itime_i4,itime_i8,\n+\tidate_i4,idate_i8): New functions.\n+\n 2006-07-03  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/27704"}, {"sha": "68c8cef107a7290a40c456b3b07047e1e0c2de10", "filename": "libgfortran/intrinsics/date_and_time.c", "status": "modified", "additions": 164, "deletions": 2, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12197210b4a551893af85d4b898f74176f3ff36d/libgfortran%2Fintrinsics%2Fdate_and_time.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12197210b4a551893af85d4b898f74176f3ff36d/libgfortran%2Fintrinsics%2Fdate_and_time.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fdate_and_time.c?ref=12197210b4a551893af85d4b898f74176f3ff36d", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the DATE_AND_TIME intrinsic.\n-   Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Steven Bosscher.\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -84,7 +84,7 @@ Boston, MA 02110-1301, USA.  */\n    ZONE (optional) shall be scalar and of type default character, and\n    shall be of length at least 5 in order to contain the complete\n    value. It is an INTENT(OUT) argument. Its leftmost 5 characters\n-   are assigned a value of the form \ufffdhhmm, where hh and mm are the\n+   are assigned a value of the form [+-]hhmm, where hh and mm are the\n    time difference with respect to Coordinated Universal Time (UTC) in\n    hours and parts of an hour expressed in minutes, respectively. If\n    there is no clock available, they are assigned blanks.\n@@ -359,3 +359,165 @@ secnds (GFC_REAL_4 *x)\n   temp2 = (temp1 - temp2 > 0.0) ? temp2 : (temp2 - 86400.0);\n   return temp1 - temp2;\n }\n+\n+\n+\n+/* ITIME(X) - Non-standard\n+\n+   Description: Returns the current local time hour, minutes, and seconds\n+   in elements 1, 2, and 3 of X, respectively.  */\n+\n+static void\n+itime0 (int x[3])\n+{\n+#ifndef HAVE_NO_DATE_TIME\n+  time_t lt;\n+  struct tm local_time;\n+\n+  lt = time (NULL);\n+\n+  if (lt != (time_t) -1)\n+    {\n+      local_time = *localtime (&lt);\n+\n+      x[0] = local_time.tm_hour;\n+      x[1] = local_time.tm_min;\n+      x[2] = local_time.tm_sec;\n+    }\n+#else\n+  x[0] = x[1] = x[2] = -1;\n+#endif\n+}\n+\n+extern void itime_i4 (gfc_array_i4 *);\n+export_proto(itime_i4);\n+\n+void\n+itime_i4 (gfc_array_i4 *__values)\n+{\n+  int x[3], i;\n+  size_t len, delta;\n+  GFC_INTEGER_4 *vptr;\n+  \n+  /* Call helper function.  */\n+  itime0(x);\n+\n+  /* Copy the value into the array.  */\n+  len = __values->dim[0].ubound + 1 - __values->dim[0].lbound;\n+  assert (len >= 3);\n+  delta = __values->dim[0].stride;\n+  if (delta == 0)\n+    delta = 1;\n+\n+  vptr = __values->data;\n+  for (i = 0; i < 3; i++, vptr += delta)\n+    *vptr = x[i];\n+}\n+\n+\n+extern void itime_i8 (gfc_array_i8 *);\n+export_proto(itime_i8);\n+\n+void\n+itime_i8 (gfc_array_i8 *__values)\n+{\n+  int x[3], i;\n+  size_t len, delta;\n+  GFC_INTEGER_8 *vptr;\n+  \n+  /* Call helper function.  */\n+  itime0(x);\n+\n+  /* Copy the value into the array.  */\n+  len = __values->dim[0].ubound + 1 - __values->dim[0].lbound;\n+  assert (len >= 3);\n+  delta = __values->dim[0].stride;\n+  if (delta == 0)\n+    delta = 1;\n+\n+  vptr = __values->data;\n+  for (i = 0; i < 3; i++, vptr += delta)\n+    *vptr = x[i];\n+}\n+\n+\n+\n+/* IDATE(X) - Non-standard\n+\n+   Description: Fills TArray with the numerical values at the current\n+   local time. The day (in the range 1-31), month (in the range 1-12),\n+   and year appear in elements 1, 2, and 3 of X, respectively.\n+   The year has four significant digits.  */\n+\n+static void\n+idate0 (int x[3])\n+{\n+#ifndef HAVE_NO_DATE_TIME\n+  time_t lt;\n+  struct tm local_time;\n+\n+  lt = time (NULL);\n+\n+  if (lt != (time_t) -1)\n+    {\n+      local_time = *localtime (&lt);\n+\n+      x[0] = local_time.tm_mday;\n+      x[1] = 1 + local_time.tm_mon;\n+      x[2] = 1900 + local_time.tm_year;\n+    }\n+#else\n+  x[0] = x[1] = x[2] = -1;\n+#endif\n+}\n+\n+extern void idate_i4 (gfc_array_i4 *);\n+export_proto(idate_i4);\n+\n+void\n+idate_i4 (gfc_array_i4 *__values)\n+{\n+  int x[3], i;\n+  size_t len, delta;\n+  GFC_INTEGER_4 *vptr;\n+  \n+  /* Call helper function.  */\n+  idate0(x);\n+\n+  /* Copy the value into the array.  */\n+  len = __values->dim[0].ubound + 1 - __values->dim[0].lbound;\n+  assert (len >= 3);\n+  delta = __values->dim[0].stride;\n+  if (delta == 0)\n+    delta = 1;\n+\n+  vptr = __values->data;\n+  for (i = 0; i < 3; i++, vptr += delta)\n+    *vptr = x[i];\n+}\n+\n+\n+extern void idate_i8 (gfc_array_i8 *);\n+export_proto(idate_i8);\n+\n+void\n+idate_i8 (gfc_array_i8 *__values)\n+{\n+  int x[3], i;\n+  size_t len, delta;\n+  GFC_INTEGER_8 *vptr;\n+  \n+  /* Call helper function.  */\n+  idate0(x);\n+\n+  /* Copy the value into the array.  */\n+  len = __values->dim[0].ubound + 1 - __values->dim[0].lbound;\n+  assert (len >= 3);\n+  delta = __values->dim[0].stride;\n+  if (delta == 0)\n+    delta = 1;\n+\n+  vptr = __values->data;\n+  for (i = 0; i < 3; i++, vptr += delta)\n+    *vptr = x[i];\n+}"}]}