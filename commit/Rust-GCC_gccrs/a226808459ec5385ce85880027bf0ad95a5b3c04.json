{"sha": "a226808459ec5385ce85880027bf0ad95a5b3c04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIyNjgwODQ1OWVjNTM4NWNlODU4ODAwMjdiZjBhZDk1YTViM2MwNA==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2011-03-21T12:33:34Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2011-03-21T12:33:34Z"}, "message": "gthr-solaris.h: Remove.\n\n\tgcc:\n\t* gthr-solaris.h: Remove.\n\t* gthr.h (_SOLARIS_THREADS): Don't include gthr-solaris.h, remove.\n\t* config/sol2.h (CPP_SUBTARGET_SPEC): Remove -threads support.\n\t(LIB_SPEC): Likewise.\n\t* config/sol2.opt (threads): Remove.\n\t* config.gcc (i[34567]86-*-solaris2*): Remove solaris threads\n\tsupport.\n\t(sparc*-*-solaris2*): Likewise.\n\t* configure.ac (enable_threads): Enable solaris support.\n\t* configure: Regenerate.\n\t* doc/invoke.texi (Option Summary, Solaris 2 Options): Remove\n\t-threads.\n\t* doc/install.texi (Configuration, --enable-threads=lib): Remove\n\tsolaris.\n\n\tboehm-gc:\n\t* configure.ac (THREADS): Remove solaris.\n\t* configure: Regenerate.\n\n\tlibjava:\n\t* configure.ac (THREADS): Remove solaris.\n\t* configure: Regenerate.\n\nFrom-SVN: r171229", "tree": {"sha": "b9bd62695f02479a7dc88b9c3200b1bcbc785c4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9bd62695f02479a7dc88b9c3200b1bcbc785c4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a226808459ec5385ce85880027bf0ad95a5b3c04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a226808459ec5385ce85880027bf0ad95a5b3c04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a226808459ec5385ce85880027bf0ad95a5b3c04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a226808459ec5385ce85880027bf0ad95a5b3c04/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ef0feeb2f6b5ecad73f8d519929ebffab079031e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef0feeb2f6b5ecad73f8d519929ebffab079031e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef0feeb2f6b5ecad73f8d519929ebffab079031e"}], "stats": {"total": 631, "additions": 36, "deletions": 595}, "files": [{"sha": "64736ecb0fad926bf6f0326a4479d9dee2a1f366", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a226808459ec5385ce85880027bf0ad95a5b3c04/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a226808459ec5385ce85880027bf0ad95a5b3c04/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=a226808459ec5385ce85880027bf0ad95a5b3c04", "patch": "@@ -1,3 +1,8 @@\n+2011-03-21  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.ac (THREADS): Remove solaris.\n+\t* configure: Regenerate.\n+\n 2011-02-13  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* configure: Regenerate."}, {"sha": "e3fdb060e6426ef2e4fd37ba162a8b06ed5622c4", "filename": "boehm-gc/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a226808459ec5385ce85880027bf0ad95a5b3c04/boehm-gc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a226808459ec5385ce85880027bf0ad95a5b3c04/boehm-gc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfigure?ref=a226808459ec5385ce85880027bf0ad95a5b3c04", "patch": "@@ -14973,7 +14973,7 @@ $as_echo \"#define DGUX_THREADS 1\" >>confdefs.h\n     $as_echo \"#define _REENTRANT 1\" >>confdefs.h\n \n     ;;\n- decosf1 | irix | mach | os2 | solaris | dce | vxworks)\n+ decosf1 | irix | mach | os2 | dce | vxworks)\n     as_fn_error \"thread package $THREADS not yet supported\" \"$LINENO\" 5\n     ;;\n  *)"}, {"sha": "696b961a94f401bd76f1f389081ea49ff83cdfa0", "filename": "boehm-gc/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a226808459ec5385ce85880027bf0ad95a5b3c04/boehm-gc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a226808459ec5385ce85880027bf0ad95a5b3c04/boehm-gc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfigure.ac?ref=a226808459ec5385ce85880027bf0ad95a5b3c04", "patch": "@@ -248,7 +248,7 @@ AC_MSG_RESULT($THREADLIBS)\n     AC_DEFINE(GC_AIX_THREADS,1)\n     AC_DEFINE(_REENTRANT,1)\n     ;;\n- decosf1 | irix | mach | os2 | solaris | dce | vxworks)\n+ decosf1 | irix | mach | os2 | dce | vxworks)\n     AC_MSG_ERROR(thread package $THREADS not yet supported)\n     ;;\n  *)"}, {"sha": "16461c221ac2fd5d779c955e534b50d6636485de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a226808459ec5385ce85880027bf0ad95a5b3c04/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a226808459ec5385ce85880027bf0ad95a5b3c04/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a226808459ec5385ce85880027bf0ad95a5b3c04", "patch": "@@ -1,3 +1,20 @@\n+2011-03-21  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* gthr-solaris.h: Remove.\n+\t* gthr.h (_SOLARIS_THREADS): Don't include gthr-solaris.h, remove.\n+\t* config/sol2.h (CPP_SUBTARGET_SPEC): Remove -threads support.\n+\t(LIB_SPEC): Likewise.\n+\t* config/sol2.opt (threads): Remove.\n+\t* config.gcc (i[34567]86-*-solaris2*): Remove solaris threads\n+\tsupport.\n+\t(sparc*-*-solaris2*): Likewise.\n+\t* configure.ac (enable_threads): Enable solaris support.\n+\t* configure: Regenerate.\n+\t* doc/invoke.texi (Option Summary, Solaris 2 Options): Remove\n+\t-threads.\n+\t* doc/install.texi (Configuration, --enable-threads=lib): Remove\n+\tsolaris.\n+\n 2011-03-21  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config.gcc: Obsolete *-*-solaris2.8*."}, {"sha": "d288e6abbfe94ff5987cfc0b127e5a82c7ace79f", "filename": "gcc/config.gcc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a226808459ec5385ce85880027bf0ad95a5b3c04/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a226808459ec5385ce85880027bf0ad95a5b3c04/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=a226808459ec5385ce85880027bf0ad95a5b3c04", "patch": "@@ -1426,9 +1426,6 @@ i[34567]86-*-solaris2*)\n \t  \"\":yes:* | yes:yes:* )\n \t\tthread_file=posix\n \t\t;;\n-\t  \"\":*:yes | yes:*:yes )\n-\t\tthread_file=solaris\n-\t\t;;\n \tesac\n \t;;\n i[4567]86-wrs-vxworks|i[4567]86-wrs-vxworksae)\n@@ -2603,9 +2600,6 @@ sparc*-*-solaris2*)\n \t  \"\":yes:* | yes:yes:* )\n \t\tthread_file=posix\n \t\t;;\n-\t  \"\":*:yes | yes:*:yes )\n-\t\tthread_file=solaris\n-\t\t;;\n \tesac\n \t;;\n sparc-wrs-vxworks)"}, {"sha": "7e42ddb6a4be722dc7003869e25b41c4462df731", "filename": "gcc/config/sol2.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a226808459ec5385ce85880027bf0ad95a5b3c04/gcc%2Fconfig%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a226808459ec5385ce85880027bf0ad95a5b3c04/gcc%2Fconfig%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.h?ref=a226808459ec5385ce85880027bf0ad95a5b3c04", "patch": "@@ -80,7 +80,6 @@ along with GCC; see the file COPYING3.  If not see\n #undef CPP_SUBTARGET_SPEC\n #define CPP_SUBTARGET_SPEC \"\\\n %{pthreads|pthread:-D_REENTRANT -D_PTHREADS} \\\n-%{!pthreads:%{!pthread:%{threads:-D_REENTRANT -D_SOLARIS_THREADS}}} \\\n %{compat-bsd:-iwithprefixbefore ucbinclude -I/usr/ucbinclude} \\\n \"\n \n@@ -134,8 +133,6 @@ along with GCC; see the file COPYING3.  If not see\n    %{!symbolic:\\\n      %{pthreads|pthread:\" \\\n         LIB_THREAD_LDFLAGS_SPEC \" -lpthread \" LIB_TLS_SPEC \"} \\\n-     %{!pthreads:%{!pthread:%{threads:\" \\\n-\tLIB_THREAD_LDFLAGS_SPEC \" -lthread}}} \\\n      %{p|pg:-ldl} -lc}\"\n \n #undef  ENDFILE_SPEC"}, {"sha": "e600111a282e6073783e34d61ad0035781b448eb", "filename": "gcc/config/sol2.opt", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a226808459ec5385ce85880027bf0ad95a5b3c04/gcc%2Fconfig%2Fsol2.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a226808459ec5385ce85880027bf0ad95a5b3c04/gcc%2Fconfig%2Fsol2.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.opt?ref=a226808459ec5385ce85880027bf0ad95a5b3c04", "patch": "@@ -42,6 +42,3 @@ Driver\n \n rdynamic\n Driver\n-\n-threads\n-Driver"}, {"sha": "60cf9536cd064712c2546d89650349bb944bacf0", "filename": "gcc/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a226808459ec5385ce85880027bf0ad95a5b3c04/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a226808459ec5385ce85880027bf0ad95a5b3c04/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=a226808459ec5385ce85880027bf0ad95a5b3c04", "patch": "@@ -10790,7 +10790,7 @@ case ${enable_threads} in\n     target_thread_file='single'\n     ;;\n   aix | dce | gnat | irix | posix | posix95 | rtems | \\\n-  single | solaris | vxworks | win32 | mipssde)\n+  single | vxworks | win32 | mipssde)\n     target_thread_file=${enable_threads}\n     ;;\n   *)"}, {"sha": "6862592faf58c7b13f63ea25c93ec3886781598e", "filename": "gcc/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a226808459ec5385ce85880027bf0ad95a5b3c04/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a226808459ec5385ce85880027bf0ad95a5b3c04/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=a226808459ec5385ce85880027bf0ad95a5b3c04", "patch": "@@ -1332,7 +1332,7 @@ case ${enable_threads} in\n     target_thread_file='single'\n     ;;\n   aix | dce | gnat | irix | posix | posix95 | rtems | \\\n-  single | solaris | vxworks | win32 | mipssde)\n+  single | vxworks | win32 | mipssde)\n     target_thread_file=${enable_threads}\n     ;;\n   *)"}, {"sha": "a79208f91f3a5934ca31a5254d282c9f0e0f2ebf", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a226808459ec5385ce85880027bf0ad95a5b3c04/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a226808459ec5385ce85880027bf0ad95a5b3c04/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=a226808459ec5385ce85880027bf0ad95a5b3c04", "patch": "@@ -1129,9 +1129,6 @@ Generic POSIX/Unix95 thread support.\n RTEMS thread support.\n @item single\n Disable thread support, should work for all platforms.\n-@item solaris\n-Sun Solaris 2/Unix International thread support.  Only use this if you\n-really need to use this legacy API instead of the default, @samp{posix}.\n @item vxworks\n VxWorks thread support.\n @item win32"}, {"sha": "5b176b747c446ee35a90d84efa32728f8cc39105", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a226808459ec5385ce85880027bf0ad95a5b3c04/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a226808459ec5385ce85880027bf0ad95a5b3c04/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a226808459ec5385ce85880027bf0ad95a5b3c04", "patch": "@@ -854,7 +854,7 @@ See RS/6000 and PowerPC Options.\n \n @emph{Solaris 2 Options}\n @gccoptlist{-mimpure-text  -mno-impure-text @gol\n--threads -pthreads -pthread}\n+-pthreads -pthread}\n \n @emph{SPARC Options}\n @gccoptlist{-mcpu=@var{cpu-type} @gol\n@@ -16931,13 +16931,6 @@ using @option{-mimpure-text}, you should compile all source code with\n These switches are supported in addition to the above on Solaris 2:\n \n @table @gcctabopt\n-@item -threads\n-@opindex threads\n-Add support for multithreading using the Solaris threads library.  This\n-option sets flags for both the preprocessor and linker.  This option does\n-not affect the thread safety of object code produced by the compiler or\n-that of libraries supplied with it.\n-\n @item -pthreads\n @opindex pthreads\n Add support for multithreading using the POSIX threads library.  This"}, {"sha": "5aed7ad0dfdc81bd1318c3a8d918fbe5fc79b8e5", "filename": "gcc/gthr-solaris.h", "status": "removed", "additions": 0, "deletions": 562, "changes": 562, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef0feeb2f6b5ecad73f8d519929ebffab079031e/gcc%2Fgthr-solaris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef0feeb2f6b5ecad73f8d519929ebffab079031e/gcc%2Fgthr-solaris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-solaris.h?ref=ef0feeb2f6b5ecad73f8d519929ebffab079031e", "patch": "@@ -1,562 +0,0 @@\n-/* Threads compatibility routines for libgcc2 and libobjc.  */\n-/* Compile this one with gcc.  */\n-/* Copyright (C) 1997, 1999, 2000, 2004, 2005, 2006, 2008, 2009\n-   Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#ifndef GCC_GTHR_SOLARIS_H\n-#define GCC_GTHR_SOLARIS_H\n-\n-/* Solaris threads as found in Solaris 2.[456].\n-   Actually these are Unix International (UI) threads, but I don't\n-   know if anyone else implements these.  */\n-\n-#define __GTHREADS 1\n-\n-#include <thread.h>\n-#include <errno.h>\n-\n-#ifdef __cplusplus\n-#define UNUSED(x)\n-#else\n-#define UNUSED(x) x __attribute__((unused))\n-#endif\n-\n-typedef thread_key_t __gthread_key_t;\n-typedef struct {\n-  mutex_t mutex;\n-  int once;\n-} __gthread_once_t;\n-typedef mutex_t __gthread_mutex_t;\n-\n-typedef struct {\n-  long depth;\n-  thread_t owner;\n-  mutex_t actual;\n-} __gthread_recursive_mutex_t;\n-\n-#define __GTHREAD_ONCE_INIT { DEFAULTMUTEX, 0 }\n-#define __GTHREAD_MUTEX_INIT DEFAULTMUTEX\n-#define __GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION __gthread_recursive_mutex_init_function\n-\n-#if SUPPORTS_WEAK && GTHREAD_USE_WEAK\n-# define __gthrw(name) \\\n-  static __typeof(name) __gthrw_ ## name __attribute__ ((__weakref__(#name)));\n-# define __gthrw_(name) __gthrw_ ## name\n-#else\n-# define __gthrw(name)\n-# define __gthrw_(name) name\n-#endif\n-\n-__gthrw(thr_keycreate)\n-__gthrw(thr_getspecific)\n-__gthrw(thr_setspecific)\n-__gthrw(thr_create)\n-__gthrw(thr_self)\n-\n-__gthrw(mutex_init)\n-__gthrw(mutex_destroy)\n-__gthrw(mutex_lock)\n-__gthrw(mutex_trylock)\n-__gthrw(mutex_unlock)\n-\n-#ifdef _LIBOBJC\n-__gthrw(thr_exit)\n-__gthrw(thr_getprio)\n-__gthrw(thr_setprio)\n-__gthrw(thr_yield)\n-\n-__gthrw(cond_init)\n-__gthrw(cond_destroy)\n-__gthrw(cond_wait)\n-__gthrw(cond_broadcast)\n-__gthrw(cond_signal)\n-\n-#endif\n-\n-#if SUPPORTS_WEAK && GTHREAD_USE_WEAK\n-\n-/* This will not actually work in Solaris 2.5, since libc contains\n-   dummy symbols of all thr_* routines.  */\n-\n-static inline int\n-__gthread_active_p (void)\n-{\n-  static void *const __gthread_active_ptr\n-    = __extension__ (void *) &__gthrw_(thr_create);\n-  return __gthread_active_ptr != 0;\n-}\n-\n-#else /* not SUPPORTS_WEAK */\n-\n-static inline int\n-__gthread_active_p (void)\n-{\n-  return 1;\n-}\n-\n-#endif /* SUPPORTS_WEAK */\n-\n-#ifdef _LIBOBJC\n-\n-/* Key structure for maintaining thread specific storage */\n-static thread_key_t _objc_thread_storage;\n-\n-/* Thread local storage for a single thread */\n-static void *thread_local_storage = NULL;\n-\n-/* Backend initialization functions */\n-\n-/* Initialize the threads subsystem.  */\n-static inline int\n-__gthread_objc_init_thread_system (void)\n-{\n-  /* Initialize the thread storage key.  */\n-  if (__gthread_active_p ()\n-      && __gthrw_(thr_keycreate) (&_objc_thread_storage, NULL) == 0)\n-    return 0;\n-\n-  return -1;\n-}\n-\n-/* Close the threads subsystem.  */\n-static inline int\n-__gthread_objc_close_thread_system (void)\n-{\n-  if (__gthread_active_p ())\n-    return 0;\n-  else\n-    return -1;\n-}\n-\n-/* Backend thread functions */\n-\n-/* Create a new thread of execution.  */\n-static inline objc_thread_t\n-__gthread_objc_thread_detach (void (*func)(void *), void *arg)\n-{\n-  objc_thread_t thread_id;\n-  thread_t new_thread_id = 0;\n-\n-  if (!__gthread_active_p ())\n-    return NULL;\n-\n-  if (__gthrw_(thr_create) (NULL, 0, (void *) func, arg,\n-\t\t  THR_DETACHED | THR_NEW_LWP,\n-\t\t  &new_thread_id) == 0)\n-    thread_id = *(objc_thread_t *) &new_thread_id;\n-  else\n-    thread_id = NULL;\n-\n-  return thread_id;\n-}\n-\n-/* Set the current thread's priority.  */\n-static inline int\n-__gthread_objc_thread_set_priority (int priority)\n-{\n-  int sys_priority = 0;\n-\n-  if (!__gthread_active_p ())\n-    return -1;\n-\n-  switch (priority)\n-    {\n-    case OBJC_THREAD_INTERACTIVE_PRIORITY:\n-      sys_priority = 300;\n-      break;\n-    default:\n-    case OBJC_THREAD_BACKGROUND_PRIORITY:\n-      sys_priority = 200;\n-      break;\n-    case OBJC_THREAD_LOW_PRIORITY:\n-      sys_priority = 1000;\n-      break;\n-    }\n-\n-  /* Change priority */\n-  if (__gthrw_(thr_setprio) (__gthrw_(thr_self) (), sys_priority) == 0)\n-    return 0;\n-  else\n-    return -1;\n-}\n-\n-/* Return the current thread's priority.  */\n-static inline int\n-__gthread_objc_thread_get_priority (void)\n-{\n-  int sys_priority;\n-\n-  if (!__gthread_active_p ())\n-    return OBJC_THREAD_INTERACTIVE_PRIORITY;\n-\n-  if (__gthrw_(thr_getprio) (__gthrw_(thr_self) (), &sys_priority) == 0)\n-    {\n-      if (sys_priority >= 250)\n-\treturn OBJC_THREAD_INTERACTIVE_PRIORITY;\n-      else if (sys_priority >= 150)\n-\treturn OBJC_THREAD_BACKGROUND_PRIORITY;\n-      return OBJC_THREAD_LOW_PRIORITY;\n-    }\n-\n-  /* Couldn't get priority.  */\n-  return -1;\n-}\n-\n-/* Yield our process time to another thread.  */\n-static inline void\n-__gthread_objc_thread_yield (void)\n-{\n-  if (__gthread_active_p ())\n-    __gthrw_(thr_yield) ();\n-}\n-\n-/* Terminate the current thread.  */\n-static inline int\n-__gthread_objc_thread_exit (void)\n-{\n-  if (__gthread_active_p ())\n-    /* exit the thread */\n-    __gthrw_(thr_exit) (&__objc_thread_exit_status);\n-\n-  /* Failed if we reached here */\n-  return -1;\n-}\n-\n-/* Returns an integer value which uniquely describes a thread.  */\n-static inline objc_thread_t\n-__gthread_objc_thread_id (void)\n-{\n-  if (__gthread_active_p ())\n-    return (objc_thread_t) __gthrw_(thr_self) ();\n-  else\n-    return (objc_thread_t) 1;\n-}\n-\n-/* Sets the thread's local storage pointer.  */\n-static inline int\n-__gthread_objc_thread_set_data (void *value)\n-{\n-  if (__gthread_active_p ())\n-    {\n-      if (__gthrw_(thr_setspecific) (_objc_thread_storage, value) == 0)\n-\treturn 0;\n-      else\n-\treturn -1;\n-    }\n-  else\n-    {\n-      thread_local_storage = value;\n-      return 0;\n-    }\n-}\n-\n-/* Returns the thread's local storage pointer.  */\n-static inline void *\n-__gthread_objc_thread_get_data (void)\n-{\n-  void *value = NULL;\n-\n-  if (__gthread_active_p ())\n-    {\n-      if (__gthrw_(thr_getspecific) (_objc_thread_storage, &value) == 0)\n-\treturn value;\n-      else\n-\treturn NULL;\n-    }\n-  else\n-    return thread_local_storage;\n-}\n-\n-/* Backend mutex functions */\n-\n-/* Allocate a mutex.  */\n-static inline int\n-__gthread_objc_mutex_allocate (objc_mutex_t mutex)\n-{\n-  if (__gthread_active_p ()\n-      && __gthrw_(mutex_init) ((mutex_t *) (&(mutex->backend)), USYNC_THREAD, 0))\n-    return -1;\n-\n-  return 0;\n-}\n-\n-/* Deallocate a mutex.  */\n-static inline int\n-__gthread_objc_mutex_deallocate (objc_mutex_t mutex)\n-{\n-  if (__gthread_active_p ())\n-    __gthrw_(mutex_destroy) ((mutex_t *) (&(mutex->backend)));\n-\n-  return 0;\n-}\n-\n-/* Grab a lock on a mutex.  */\n-static inline int\n-__gthread_objc_mutex_lock (objc_mutex_t mutex)\n-{\n-  if (__gthread_active_p ()\n-      && __gthrw_(mutex_lock) ((mutex_t *) (&(mutex->backend))) != 0)\n-    return -1;\n-\n-  return 0;\n-}\n-\n-/* Try to grab a lock on a mutex.  */\n-static inline int\n-__gthread_objc_mutex_trylock (objc_mutex_t mutex)\n-{\n-  if (__gthread_active_p ()\n-      && __gthrw_(mutex_trylock) ((mutex_t *) (&(mutex->backend))) != 0)\n-    return -1;\n-\n-  return 0;\n-}\n-\n-/* Unlock the mutex */\n-static inline int\n-__gthread_objc_mutex_unlock (objc_mutex_t mutex)\n-{\n-  if (__gthread_active_p ()\n-      && __gthrw_(mutex_unlock) ((mutex_t *) (&(mutex->backend))) != 0)\n-    return -1;\n-\n-  return 0;\n-}\n-\n-/* Backend condition mutex functions */\n-\n-/* Allocate a condition.  */\n-static inline int\n-__gthread_objc_condition_allocate (objc_condition_t condition)\n-{\n-  if (__gthread_active_p ())\n-    return __gthrw_(cond_init) ((cond_t *) (&(condition->backend)), USYNC_THREAD,\n-\t\t      NULL);\n-  else\n-    return 0;\n-}\n-\n-/* Deallocate a condition.  */\n-static inline int\n-__gthread_objc_condition_deallocate (objc_condition_t condition)\n-{\n-  if (__gthread_active_p ())\n-    return __gthrw_(cond_destroy) ((cond_t *) (&(condition->backend)));\n-  else\n-    return 0;\n-}\n-\n-/* Wait on the condition */\n-static inline int\n-__gthread_objc_condition_wait (objc_condition_t condition, objc_mutex_t mutex)\n-{\n-  if (__gthread_active_p ())\n-    return __gthrw_(cond_wait) ((cond_t *) (&(condition->backend)),\n-\t\t      (mutex_t *) (&(mutex->backend)));\n-  else\n-    return 0;\n-}\n-\n-/* Wake up all threads waiting on this condition.  */\n-static inline int\n-__gthread_objc_condition_broadcast (objc_condition_t condition)\n-{\n-  if (__gthread_active_p ())\n-    return __gthrw_(cond_broadcast) ((cond_t *) (&(condition->backend)));\n-  else\n-    return 0;\n-}\n-\n-/* Wake up one thread waiting on this condition.  */\n-static inline int\n-__gthread_objc_condition_signal (objc_condition_t condition)\n-{\n-  if (__gthread_active_p ())\n-    return __gthrw_(cond_signal) ((cond_t *) (&(condition->backend)));\n-  else\n-    return 0;\n-}\n-\n-#else /* _LIBOBJC */\n-\n-static inline int\n-__gthread_once (__gthread_once_t *__once, void (*__func) (void))\n-{\n-  if (! __gthread_active_p ())\n-    return -1;\n-\n-  if (__once == 0 || __func == 0)\n-    return EINVAL;\n-\n-  if (__once->once == 0)\n-    {\n-      int __status = __gthrw_(mutex_lock) (&__once->mutex);\n-      if (__status != 0)\n-\treturn __status;\n-      if (__once->once == 0)\n-\t{\n-\t  (*__func) ();\n-\t  __once->once++;\n-\t}\n-      __gthrw_(mutex_unlock) (&__once->mutex);\n-    }\n-  return 0;\n-}\n-\n-static inline int\n-__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))\n-{\n-  /* Solaris 2.5 contains thr_* routines no-op in libc, so test if we actually\n-     got a reasonable key value, and if not, fail.  */\n-  *__key = (__gthread_key_t)-1;\n-  if (__gthrw_(thr_keycreate) (__key, __dtor) != 0\n-      || *__key == (__gthread_key_t)-1)\n-    return -1;\n-  else\n-    return 0;\n-}\n-\n-static inline int\n-__gthread_key_delete (__gthread_key_t UNUSED (__key))\n-{\n-  /* Not possible.  */\n-  return -1;\n-}\n-\n-static inline void *\n-__gthread_getspecific (__gthread_key_t __key)\n-{\n-  void *__ptr;\n-  if (__gthrw_(thr_getspecific) (__key, &__ptr) == 0)\n-    return __ptr;\n-  else\n-    return 0;\n-}\n-\n-static inline int\n-__gthread_setspecific (__gthread_key_t __key, const void *__ptr)\n-{\n-  return __gthrw_(thr_setspecific) (__key, (void *) __ptr);\n-}\n-\n-static inline int\n-__gthread_mutex_destroy (__gthread_mutex_t *__mutex)\n-{\n-  if (__gthread_active_p ())\n-    return __gthrw_(mutex_destroy) (__mutex);\n-  else\n-    return 0;\n-}\n-\n-static inline int\n-__gthread_mutex_lock (__gthread_mutex_t *__mutex)\n-{\n-  if (__gthread_active_p ())\n-    return __gthrw_(mutex_lock) (__mutex);\n-  else\n-    return 0;\n-}\n-\n-static inline int\n-__gthread_mutex_trylock (__gthread_mutex_t *__mutex)\n-{\n-  if (__gthread_active_p ())\n-    return __gthrw_(mutex_trylock) (__mutex);\n-  else\n-    return 0;\n-}\n-\n-static inline int\n-__gthread_mutex_unlock (__gthread_mutex_t *__mutex)\n-{\n-  if (__gthread_active_p ())\n-    return __gthrw_(mutex_unlock) (__mutex);\n-  else\n-    return 0;\n-}\n-\n-static inline int\n-__gthread_recursive_mutex_init_function (__gthread_recursive_mutex_t *__mutex)\n-{\n-  __mutex->depth = 0;\n-  __mutex->owner = (thread_t) 0;\n-  return __gthrw_(mutex_init) (&__mutex->actual, USYNC_THREAD, 0);\n-}\n-\n-static inline int\n-__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)\n-{\n-  if (__gthread_active_p ())\n-    {\n-      thread_t __me = __gthrw_(thr_self) ();\n-\n-      if (__mutex->owner != __me)\n-\t{\n-\t  __gthrw_(mutex_lock) (&__mutex->actual);\n-\t  __mutex->owner = __me;\n-\t}\n-\n-      __mutex->depth++;\n-    }\n-  return 0;\n-}\n-\n-static inline int\n-__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)\n-{\n-  if (__gthread_active_p ())\n-    {\n-      thread_t __me = __gthrw_(thr_self) ();\n-\n-      if (__mutex->owner != __me)\n-\t{\n-\t  if (__gthrw_(mutex_trylock) (&__mutex->actual))\n-\t    return 1;\n-\t  __mutex->owner = __me;\n-\t}\n-\n-      __mutex->depth++;\n-    }\n-  return 0;\n-}\n-\n-static inline int\n-__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)\n-{\n-  if (__gthread_active_p ())\n-    {\n-      if (--__mutex->depth == 0)\n-\t{\n-\t   __mutex->owner = (thread_t) 0;\n-\t   __gthrw_(mutex_unlock) (&__mutex->actual);\n-\t}\n-    }\n-  return 0;\n-}\n-\n-#endif /* _LIBOBJC */\n-\n-#undef UNUSED\n-\n-#endif /* ! GCC_GTHR_SOLARIS_H */"}, {"sha": "0752f893c4fbe7286f26083499e277bc009fdaa9", "filename": "gcc/gthr.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a226808459ec5385ce85880027bf0ad95a5b3c04/gcc%2Fgthr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a226808459ec5385ce85880027bf0ad95a5b3c04/gcc%2Fgthr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr.h?ref=a226808459ec5385ce85880027bf0ad95a5b3c04", "patch": "@@ -1,6 +1,7 @@\n /* Threads compatibility routines for libgcc2.  */\n /* Compile this one with gcc.  */\n-/* Copyright (C) 1997, 1998, 2004, 2008, 2009 Free Software Foundation, Inc.\n+/* Copyright (C) 1997, 1998, 2004, 2008, 2009, 2011\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -136,7 +137,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n      POSIX/Unix98 threads with -D_PTHREADS\n      POSIX/Unix95 threads with -D_PTHREADS95\n      DCE threads with -D_DCE_THREADS\n-     Solaris/UI threads with -D_SOLARIS_THREADS\n \n */\n \n@@ -149,8 +149,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"gthr-posix95.h\"\n #elif _DCE_THREADS\n #include \"gthr-dce.h\"\n-#elif _SOLARIS_THREADS\n-#include \"gthr-solaris.h\"\n \n /* Include GTHREAD_FILE if one is defined.  */\n #elif defined(HAVE_GTHR_DEFAULT)"}, {"sha": "9252da250c5dfac60fac72a99f49524cb6ae6b28", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a226808459ec5385ce85880027bf0ad95a5b3c04/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a226808459ec5385ce85880027bf0ad95a5b3c04/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a226808459ec5385ce85880027bf0ad95a5b3c04", "patch": "@@ -1,3 +1,8 @@\n+2011-03-21  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.ac (THREADS): Remove solaris.\n+\t* configure: Regenerate.\n+\n 2011-03-21  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR bootstrap/48135"}, {"sha": "62c4706eb682a4443b87f10f580d743812bb596f", "filename": "libjava/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a226808459ec5385ce85880027bf0ad95a5b3c04/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a226808459ec5385ce85880027bf0ad95a5b3c04/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=a226808459ec5385ce85880027bf0ad95a5b3c04", "patch": "@@ -20688,7 +20688,7 @@ $as_echo \"#define LINUX_THREADS 1\" >>confdefs.h\n     ;;\n  win32)\n     ;;\n- decosf1 | irix | mach | os2 | solaris | dce | vxworks)\n+ decosf1 | irix | mach | os2 | dce | vxworks)\n     as_fn_error \"thread package $THREADS not yet supported\" \"$LINENO\" 5\n     ;;\n  *)"}, {"sha": "3a29a492e39e577c4b3d1d315020eaafebee1fdb", "filename": "libjava/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a226808459ec5385ce85880027bf0ad95a5b3c04/libjava%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a226808459ec5385ce85880027bf0ad95a5b3c04/libjava%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.ac?ref=a226808459ec5385ce85880027bf0ad95a5b3c04", "patch": "@@ -1033,7 +1033,7 @@ case \"$THREADS\" in\n     ;;\n  win32)\n     ;;\n- decosf1 | irix | mach | os2 | solaris | dce | vxworks)\n+ decosf1 | irix | mach | os2 | dce | vxworks)\n     AC_MSG_ERROR(thread package $THREADS not yet supported)\n     ;;\n  *)"}]}