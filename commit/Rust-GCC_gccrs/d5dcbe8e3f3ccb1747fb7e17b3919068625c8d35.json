{"sha": "d5dcbe8e3f3ccb1747fb7e17b3919068625c8d35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVkY2JlOGUzZjNjY2IxNzQ3ZmI3ZTE3YjM5MTkwNjg2MjVjOGQzNQ==", "commit": {"author": {"name": "Evgeny Stupachenko", "email": "evstupac@gmail.com", "date": "2014-11-21T11:13:37Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2014-11-21T11:13:37Z"}, "message": "re PR target/60451 (X86 vectorization improve: pack instead of pshufb)\n\ngcc/testsuite\n\n\tPR target/60451\n\t* gcc.target/i386/pr60451.c: New.\n\ngcc/\n\tPR target/60451\n\t* config/i386/i386.c (expand_vec_perm_even_odd_pack): New.\n\t(expand_vec_perm_even_odd_1): Add new expand for V8HI mode,\n\treplace for V16QI, V16HI and V32QI modes.\n\t(ix86_expand_vec_perm_const_1): Add new expand.\n\nFrom-SVN: r217913", "tree": {"sha": "bbad359be503a0dd2fc4db18742f3cd651376874", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbad359be503a0dd2fc4db18742f3cd651376874"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5dcbe8e3f3ccb1747fb7e17b3919068625c8d35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5dcbe8e3f3ccb1747fb7e17b3919068625c8d35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5dcbe8e3f3ccb1747fb7e17b3919068625c8d35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5dcbe8e3f3ccb1747fb7e17b3919068625c8d35/comments", "author": {"login": "evstupac", "id": 38332307, "node_id": "MDQ6VXNlcjM4MzMyMzA3", "avatar_url": "https://avatars.githubusercontent.com/u/38332307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/evstupac", "html_url": "https://github.com/evstupac", "followers_url": "https://api.github.com/users/evstupac/followers", "following_url": "https://api.github.com/users/evstupac/following{/other_user}", "gists_url": "https://api.github.com/users/evstupac/gists{/gist_id}", "starred_url": "https://api.github.com/users/evstupac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/evstupac/subscriptions", "organizations_url": "https://api.github.com/users/evstupac/orgs", "repos_url": "https://api.github.com/users/evstupac/repos", "events_url": "https://api.github.com/users/evstupac/events{/privacy}", "received_events_url": "https://api.github.com/users/evstupac/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "efcc23e6ad30f79b41d0bfa129503c5547579b31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efcc23e6ad30f79b41d0bfa129503c5547579b31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efcc23e6ad30f79b41d0bfa129503c5547579b31"}], "stats": {"total": 180, "additions": 156, "deletions": 24}, "files": [{"sha": "5514ff707d997461920771e95967882e8fdc4466", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5dcbe8e3f3ccb1747fb7e17b3919068625c8d35/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5dcbe8e3f3ccb1747fb7e17b3919068625c8d35/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d5dcbe8e3f3ccb1747fb7e17b3919068625c8d35", "patch": "@@ -1,3 +1,11 @@\n+2014-11-21  Evgeny Stupachenko  <evstupac@gmail.com>\n+\n+\tPR target/60451\n+\t* config/i386/i386.c (expand_vec_perm_even_odd_pack): New.\n+\t(expand_vec_perm_even_odd_1): Add new expand for V8HI mode,\n+\treplace for V16QI, V16HI and V32QI modes.\n+\t(ix86_expand_vec_perm_const_1): Add new expand.\n+\n 2014-11-21  Nick Clifton  <nickc@redhat.com>\n \n \t* config/rl78/rl78-real.md (movqi_from_es): New pattern."}, {"sha": "805c430c2480bcbe88c6ee00ed24fa684f6f24ce", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 129, "deletions": 24, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5dcbe8e3f3ccb1747fb7e17b3919068625c8d35/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5dcbe8e3f3ccb1747fb7e17b3919068625c8d35/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d5dcbe8e3f3ccb1747fb7e17b3919068625c8d35", "patch": "@@ -48352,6 +48352,127 @@ expand_vec_perm_vpshufb2_vpermq_even_odd (struct expand_vec_perm_d *d)\n   return true;\n }\n \n+/* A subroutine of expand_vec_perm_even_odd_1.  Implement extract-even\n+   and extract-odd permutations of two V16QI, V8HI, V16HI or V32QI operands\n+   with two \"and\" and \"pack\" or two \"shift\" and \"pack\" insns.  We should\n+   have already failed all two instruction sequences.  */\n+\n+static bool\n+expand_vec_perm_even_odd_pack (struct expand_vec_perm_d *d)\n+{\n+  rtx op, dop0, dop1, t, rperm[16];\n+  unsigned i, odd, c, s, nelt = d->nelt;\n+  bool end_perm = false;\n+  machine_mode half_mode;\n+  rtx (*gen_and) (rtx, rtx, rtx);\n+  rtx (*gen_pack) (rtx, rtx, rtx);\n+  rtx (*gen_shift) (rtx, rtx, rtx);\n+\n+  if (d->one_operand_p)\n+    return false;\n+\n+  switch (d->vmode)\n+    {\n+    case V8HImode:\n+      /* Required for \"pack\".  */\n+      if (!TARGET_SSE4_1)\n+        return false;\n+      c = 0xffff;\n+      s = 16;\n+      half_mode = V4SImode;\n+      gen_and = gen_andv4si3;\n+      gen_pack = gen_sse4_1_packusdw;\n+      gen_shift = gen_lshrv4si3;\n+      break;\n+    case V16QImode:\n+      /* No check as all instructions are SSE2.  */\n+      c = 0xff;\n+      s = 8;\n+      half_mode = V8HImode;\n+      gen_and = gen_andv8hi3;\n+      gen_pack = gen_sse2_packuswb;\n+      gen_shift = gen_lshrv8hi3;\n+      break;\n+    case V16HImode:\n+      if (!TARGET_AVX2)\n+        return false;\n+      c = 0xffff;\n+      s = 16;\n+      half_mode = V8SImode;\n+      gen_and = gen_andv8si3;\n+      gen_pack = gen_avx2_packusdw;\n+      gen_shift = gen_lshrv8si3;\n+      end_perm = true;\n+      break;\n+    case V32QImode:\n+      if (!TARGET_AVX2)\n+        return false;\n+      c = 0xff;\n+      s = 8;\n+      half_mode = V16HImode;\n+      gen_and = gen_andv16hi3;\n+      gen_pack = gen_avx2_packuswb;\n+      gen_shift = gen_lshrv16hi3;\n+      end_perm = true;\n+      break;\n+    default:\n+      /* Only V8HI, V16QI, V16HI and V32QI modes are more profitable than\n+\t general shuffles.  */\n+      return false;\n+    }\n+\n+  /* Check that permutation is even or odd.  */\n+  odd = d->perm[0];\n+  if (odd > 1)\n+    return false;\n+\n+  for (i = 1; i < nelt; ++i)\n+    if (d->perm[i] != 2 * i + odd)\n+      return false;\n+\n+  if (d->testing_p)\n+    return true;\n+\n+  dop0 = gen_reg_rtx (half_mode);\n+  dop1 = gen_reg_rtx (half_mode);\n+  if (odd == 0)\n+    {\n+      for (i = 0; i < nelt / 2; i++)\n+\trperm[i] = GEN_INT (c);\n+      t = gen_rtx_CONST_VECTOR (half_mode, gen_rtvec_v (nelt / 2, rperm));\n+      t = force_reg (half_mode, t);\n+      emit_insn (gen_and (dop0, t, gen_lowpart (half_mode, d->op0)));\n+      emit_insn (gen_and (dop1, t, gen_lowpart (half_mode, d->op1)));\n+    }\n+  else\n+    {\n+      emit_insn (gen_shift (dop0,\n+\t\t\t    gen_lowpart (half_mode, d->op0),\n+\t\t\t    GEN_INT (s)));\n+      emit_insn (gen_shift (dop1,\n+\t\t\t    gen_lowpart (half_mode, d->op1),\n+\t\t\t    GEN_INT (s)));\n+    }\n+  /* In AVX2 for 256 bit case we need to permute pack result.  */\n+  if (TARGET_AVX2 && end_perm)\n+    {\n+      op = gen_reg_rtx (d->vmode);\n+      t = gen_reg_rtx (V4DImode);\n+      emit_insn (gen_pack (op, dop0, dop1));\n+      emit_insn (gen_avx2_permv4di_1 (t,\n+\t\t\t\t      gen_lowpart (V4DImode, op),\n+\t\t\t\t      const0_rtx,\n+\t\t\t\t      const2_rtx,\n+\t\t\t\t      const1_rtx,\n+\t\t\t\t      GEN_INT (3)));\n+      emit_move_insn (d->target, gen_lowpart (d->vmode, t));\n+    }\n+  else\n+    emit_insn (gen_pack (d->target, dop0, dop1));\n+\n+  return true;\n+}\n+\n /* A subroutine of ix86_expand_vec_perm_builtin_1.  Implement extract-even\n    and extract-odd permutations.  */\n \n@@ -48423,7 +48544,9 @@ expand_vec_perm_even_odd_1 (struct expand_vec_perm_d *d, unsigned odd)\n       gcc_unreachable ();\n \n     case V8HImode:\n-      if (TARGET_SSSE3 && !TARGET_SLOW_PSHUFB)\n+      if (TARGET_SSE4_1)\n+\treturn expand_vec_perm_even_odd_pack (d);\n+      else if (TARGET_SSSE3 && !TARGET_SLOW_PSHUFB)\n \treturn expand_vec_perm_pshufb2 (d);\n       else\n \t{\n@@ -48446,32 +48569,11 @@ expand_vec_perm_even_odd_1 (struct expand_vec_perm_d *d, unsigned odd)\n       break;\n \n     case V16QImode:\n-      if (TARGET_SSSE3 && !TARGET_SLOW_PSHUFB)\n-\treturn expand_vec_perm_pshufb2 (d);\n-      else\n-\t{\n-\t  if (d->testing_p)\n-\t    break;\n-\t  t1 = gen_reg_rtx (V16QImode);\n-\t  t2 = gen_reg_rtx (V16QImode);\n-\t  t3 = gen_reg_rtx (V16QImode);\n-\t  emit_insn (gen_vec_interleave_highv16qi (t1, d->op0, d->op1));\n-\t  emit_insn (gen_vec_interleave_lowv16qi (d->target, d->op0, d->op1));\n-\t  emit_insn (gen_vec_interleave_highv16qi (t2, d->target, t1));\n-\t  emit_insn (gen_vec_interleave_lowv16qi (d->target, d->target, t1));\n-\t  emit_insn (gen_vec_interleave_highv16qi (t3, d->target, t2));\n-\t  emit_insn (gen_vec_interleave_lowv16qi (d->target, d->target, t2));\n-\t  if (odd)\n-\t    t3 = gen_vec_interleave_highv16qi (d->target, d->target, t3);\n-\t  else\n-\t    t3 = gen_vec_interleave_lowv16qi (d->target, d->target, t3);\n-\t  emit_insn (t3);\n-\t}\n-      break;\n+      return expand_vec_perm_even_odd_pack (d);\n \n     case V16HImode:\n     case V32QImode:\n-      return expand_vec_perm_vpshufb2_vpermq_even_odd (d);\n+      return expand_vec_perm_even_odd_pack (d);\n \n     case V4DImode:\n       if (!TARGET_AVX2)\n@@ -48844,6 +48946,9 @@ ix86_expand_vec_perm_const_1 (struct expand_vec_perm_d *d)\n \n   /* Try sequences of three instructions.  */\n \n+  if (expand_vec_perm_even_odd_pack (d))\n+    return true;\n+\n   if (expand_vec_perm_2vperm2f128_vshuf (d))\n     return true;\n "}, {"sha": "26b2c25073a9e461c6912a9f5fe6760d297a5ddc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5dcbe8e3f3ccb1747fb7e17b3919068625c8d35/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5dcbe8e3f3ccb1747fb7e17b3919068625c8d35/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d5dcbe8e3f3ccb1747fb7e17b3919068625c8d35", "patch": "@@ -1,3 +1,8 @@\n+2014-11-21  Evgeny Stupachenko  <evstupac@gmail.com>\n+\n+\tPR target/60451\n+\t* gcc.target/i386/pr60451.c: New.\n+\n 2014-11-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/61773"}, {"sha": "c600f4a6f9a494aad1e9f3db453912daf7db59a9", "filename": "gcc/testsuite/gcc.target/i386/pr60451.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5dcbe8e3f3ccb1747fb7e17b3919068625c8d35/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr60451.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5dcbe8e3f3ccb1747fb7e17b3919068625c8d35/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr60451.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr60451.c?ref=d5dcbe8e3f3ccb1747fb7e17b3919068625c8d35", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target sse2 } */\n+/* { dg-options \"-O2 -ftree-vectorize -msse2\" } */\n+\n+void\n+foo (unsigned char *a, unsigned char *b, unsigned char *c, int size)\n+{\n+  int i;\n+\n+  for (i = 0; i < size; i++)\n+    a[i] = (unsigned char) ((unsigned int)1 + b[i] * c[i] * 117);\n+}\n+\n+/* { dg-final { scan-assembler \"packuswb|vpunpck\" } } */"}]}