{"sha": "458c8d6459c4005fc9886b6e25d168a6535ac415", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU4YzhkNjQ1OWM0MDA1ZmM5ODg2YjZlMjVkMTY4YTY1MzVhYzQxNQ==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2020-01-29T14:31:10Z"}, "committer": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2020-02-15T07:32:57Z"}, "message": "PR 87488: Add --with-diagnostics-urls configuration option\n\n2020-02-15  David Malcolm  <dmalcolm@redhat.com>\n\t    Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n\tPR 87488\n\tPR other/93168\n\t* config.in (DIAGNOSTICS_URLS_DEFAULT): New define.\n\t* configure.ac (--with-diagnostics-urls): New configuration\n\toption, based on --with-diagnostics-color.\n\t(DIAGNOSTICS_URLS_DEFAULT): New define.\n\t* config.h: Regenerate.\n\t* configure: Regenerate.\n\t* diagnostic.c (diagnostic_urls_init): Handle -1 for\n\tDIAGNOSTICS_URLS_DEFAULT from configure-time\n\t--with-diagnostics-urls=auto-if-env by querying for a GCC_URLS\n\tand TERM_URLS environment variable.\n\t* diagnostic-url.h (diagnostic_url_format): New enum type.\n\t(diagnostic_urls_enabled_p): rename to...\n\t(determine_url_format): ... this, and change return type.\n\t* diagnostic-color.c (parse_env_vars_for_urls): New helper function.\n\t(auto_enable_urls): Disable URLs on xfce4-terminal, gnome-terminal,\n\tthe linux console, and mingw.\n\t(diagnostic_urls_enabled_p): rename to...\n\t(determine_url_format): ... this, and adjust.\n\t* pretty-print.h (pretty_printer::show_urls): rename to...\n\t(pretty_printer::url_format): ... this, and change to enum.\n\t* pretty-print.c (pretty_printer::pretty_printer,\n\tpp_begin_url, pp_end_url, test_urls): Adjust.\n\t* doc/install.texi (--with-diagnostics-urls): Document the new\n\tconfiguration option.\n\t(--with-diagnostics-color): Document the existing interaction\n\twith GCC_COLORS better.\n\t* doc/invoke.texi (-fdiagnostics-urls): Add GCC_URLS and TERM_URLS\n\tvindex reference.  Update description of defaults based on the above.\n\t(-fdiagnostics-color): Update description of how -fdiagnostics-color\n\tinteracts with GCC_COLORS.", "tree": {"sha": "128883b06d3d289ff84494fabf3bb332fdc88451", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/128883b06d3d289ff84494fabf3bb332fdc88451"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/458c8d6459c4005fc9886b6e25d168a6535ac415", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/458c8d6459c4005fc9886b6e25d168a6535ac415", "html_url": "https://github.com/Rust-GCC/gccrs/commit/458c8d6459c4005fc9886b6e25d168a6535ac415", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/458c8d6459c4005fc9886b6e25d168a6535ac415/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6ee2e7c5a6be075bfb98fd8ff1e456ae280cebe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6ee2e7c5a6be075bfb98fd8ff1e456ae280cebe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6ee2e7c5a6be075bfb98fd8ff1e456ae280cebe"}], "stats": {"total": 354, "additions": 328, "deletions": 26}, "files": [{"sha": "22f990a3088cf1d4ef2a4c1c4cf8689a79ba58b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/458c8d6459c4005fc9886b6e25d168a6535ac415/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/458c8d6459c4005fc9886b6e25d168a6535ac415/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=458c8d6459c4005fc9886b6e25d168a6535ac415", "patch": "@@ -1,3 +1,39 @@\n+2020-02-15  David Malcolm  <dmalcolm@redhat.com>\n+\t    Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR 87488\n+\tPR other/93168\n+\t* config.in (DIAGNOSTICS_URLS_DEFAULT): New define.\n+\t* configure.ac (--with-diagnostics-urls): New configuration\n+\toption, based on --with-diagnostics-color.\n+\t(DIAGNOSTICS_URLS_DEFAULT): New define.\n+\t* config.h: Regenerate.\n+\t* configure: Regenerate.\n+\t* diagnostic.c (diagnostic_urls_init): Handle -1 for\n+\tDIAGNOSTICS_URLS_DEFAULT from configure-time\n+\t--with-diagnostics-urls=auto-if-env by querying for a GCC_URLS\n+\tand TERM_URLS environment variable.\n+\t* diagnostic-url.h (diagnostic_url_format): New enum type.\n+\t(diagnostic_urls_enabled_p): rename to...\n+\t(determine_url_format): ... this, and change return type.\n+\t* diagnostic-color.c (parse_env_vars_for_urls): New helper function.\n+\t(auto_enable_urls): Disable URLs on xfce4-terminal, gnome-terminal,\n+\tthe linux console, and mingw.\n+\t(diagnostic_urls_enabled_p): rename to...\n+\t(determine_url_format): ... this, and adjust.\n+\t* pretty-print.h (pretty_printer::show_urls): rename to...\n+\t(pretty_printer::url_format): ... this, and change to enum.\n+\t* pretty-print.c (pretty_printer::pretty_printer,\n+\tpp_begin_url, pp_end_url, test_urls): Adjust.\n+\t* doc/install.texi (--with-diagnostics-urls): Document the new\n+\tconfiguration option.\n+\t(--with-diagnostics-color): Document the existing interaction\n+\twith GCC_COLORS better.\n+\t* doc/invoke.texi (-fdiagnostics-urls): Add GCC_URLS and TERM_URLS\n+\tvindex reference.  Update description of defaults based on the above.\n+\t(-fdiagnostics-color): Update description of how -fdiagnostics-color\n+\tinteracts with GCC_COLORS.\n+\n 2020-02-14  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR target/93704"}, {"sha": "01fb18dbbb5a34ca3433b820d4bd558ff1a6e64a", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/458c8d6459c4005fc9886b6e25d168a6535ac415/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/458c8d6459c4005fc9886b6e25d168a6535ac415/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=458c8d6459c4005fc9886b6e25d168a6535ac415", "patch": "@@ -76,6 +76,12 @@\n #endif\n \n \n+/* The default for -fdiagnostics-urls option */\n+#ifndef USED_FOR_TARGET\n+#undef DIAGNOSTICS_URLS_DEFAULT\n+#endif\n+\n+\n /* Define 0/1 if static analyzer feature is enabled. */\n #ifndef USED_FOR_TARGET\n #undef ENABLE_ANALYZER"}, {"sha": "f55cdb8c77ff2f363b7fb279c72142c58dc43f06", "filename": "gcc/configure", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/458c8d6459c4005fc9886b6e25d168a6535ac415/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/458c8d6459c4005fc9886b6e25d168a6535ac415/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=458c8d6459c4005fc9886b6e25d168a6535ac415", "patch": "@@ -1015,6 +1015,7 @@ enable_host_shared\n enable_libquadmath_support\n with_linker_hash_style\n with_diagnostics_color\n+with_diagnostics_urls\n enable_default_pie\n '\n       ac_precious_vars='build_alias\n@@ -1836,6 +1837,11 @@ Optional Packages:\n                           auto-if-env stands for -fdiagnostics-color=auto if\n                           GCC_COLOR environment variable is present and\n                           -fdiagnostics-color=never otherwise\n+  --with-diagnostics-urls={never,auto,auto-if-env,always}\n+                          specify the default of -fdiagnostics-urls option\n+                          auto-if-env stands for -fdiagnostics-urls=auto if\n+                          GCC_URLS or TERM_URLS environment variable is\n+                          present and -fdiagnostics-urls=never otherwise\n \n Some influential environment variables:\n   CC          C compiler command\n@@ -18974,7 +18980,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18977 \"configure\"\n+#line 18983 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -19080,7 +19086,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19083 \"configure\"\n+#line 19089 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -30575,6 +30581,37 @@ cat >>confdefs.h <<_ACEOF\n _ACEOF\n \n \n+# Specify what should be the default of -fdiagnostics-urls option.\n+\n+# Check whether --with-diagnostics-urls was given.\n+if test \"${with_diagnostics_urls+set}\" = set; then :\n+  withval=$with_diagnostics_urls; case x\"$withval\" in\n+   xnever)\n+     DIAGNOSTICS_URLS_DEFAULT=DIAGNOSTICS_URL_NO\n+     ;;\n+   xauto)\n+     DIAGNOSTICS_URLS_DEFAULT=DIAGNOSTICS_URL_AUTO\n+     ;;\n+   xauto-if-env)\n+     DIAGNOSTICS_URLS_DEFAULT=-1\n+     ;;\n+   xalways)\n+     DIAGNOSTICS_URLS_DEFAULT=DIAGNOSTICS_URL_YES\n+     ;;\n+   *)\n+     as_fn_error $? \"$withval is an invalid option to --with-diagnostics-urls\" \"$LINENO\" 5\n+     ;;\n+ esac\n+else\n+  DIAGNOSTICS_URLS_DEFAULT=DIAGNOSTICS_URL_AUTO\n+fi\n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define DIAGNOSTICS_URLS_DEFAULT $DIAGNOSTICS_URLS_DEFAULT\n+_ACEOF\n+\n+\n # Generate gcc-driver-name.h containing GCC_DRIVER_NAME for the benefit\n # of jit/jit-playback.c.\n gcc_driver_version=`eval \"${get_gcc_base_ver} $srcdir/BASE-VER\"`"}, {"sha": "0e6e475950de8b66563f946fac0e4e3636ba76d0", "filename": "gcc/configure.ac", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/458c8d6459c4005fc9886b6e25d168a6535ac415/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/458c8d6459c4005fc9886b6e25d168a6535ac415/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=458c8d6459c4005fc9886b6e25d168a6535ac415", "patch": "@@ -6741,6 +6741,34 @@ AC_ARG_WITH([diagnostics-color],\n AC_DEFINE_UNQUOTED(DIAGNOSTICS_COLOR_DEFAULT, $DIAGNOSTICS_COLOR_DEFAULT,\n \t\t   [The default for -fdiagnostics-color option])\n \n+# Specify what should be the default of -fdiagnostics-urls option.\n+AC_ARG_WITH([diagnostics-urls],\n+[AC_HELP_STRING([--with-diagnostics-urls={never,auto,auto-if-env,always}],\n+                [specify the default of -fdiagnostics-urls option\n+                 auto-if-env stands for -fdiagnostics-urls=auto if\n+                 GCC_URLS or TERM_URLS environment variable is present and\n+                 -fdiagnostics-urls=never otherwise])],\n+[case x\"$withval\" in\n+   xnever)\n+     DIAGNOSTICS_URLS_DEFAULT=DIAGNOSTICS_URL_NO\n+     ;;\n+   xauto)\n+     DIAGNOSTICS_URLS_DEFAULT=DIAGNOSTICS_URL_AUTO\n+     ;;\n+   xauto-if-env)\n+     DIAGNOSTICS_URLS_DEFAULT=-1\n+     ;;\n+   xalways)\n+     DIAGNOSTICS_URLS_DEFAULT=DIAGNOSTICS_URL_YES\n+     ;;\n+   *)\n+     AC_MSG_ERROR([$withval is an invalid option to --with-diagnostics-urls])\n+     ;;\n+ esac],\n+[DIAGNOSTICS_URLS_DEFAULT=DIAGNOSTICS_URL_AUTO])\n+AC_DEFINE_UNQUOTED(DIAGNOSTICS_URLS_DEFAULT, $DIAGNOSTICS_URLS_DEFAULT,\n+\t\t   [The default for -fdiagnostics-urls option])\n+\n # Generate gcc-driver-name.h containing GCC_DRIVER_NAME for the benefit\n # of jit/jit-playback.c.\n gcc_driver_version=`eval \"${get_gcc_base_ver} $srcdir/BASE-VER\"`"}, {"sha": "b1baded2c9ef72d0be937f641324b5f5dd55bf1a", "filename": "gcc/diagnostic-color.c", "status": "modified", "additions": 95, "deletions": 6, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/458c8d6459c4005fc9886b6e25d168a6535ac415/gcc%2Fdiagnostic-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/458c8d6459c4005fc9886b6e25d168a6535ac415/gcc%2Fdiagnostic-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-color.c?ref=458c8d6459c4005fc9886b6e25d168a6535ac415", "patch": "@@ -216,6 +216,7 @@ should_colorize (void)\n \t  && GetConsoleMode (h, &m);\n #else\n   char const *t = getenv (\"TERM\");\n+  /* emacs M-x shell sets TERM=\"dumb\".  */\n   return t && strcmp (t, \"dumb\") != 0 && isatty (STDERR_FILENO);\n #endif\n }\n@@ -239,20 +240,108 @@ colorize_init (diagnostic_color_rule_t rule)\n     }\n }\n \n-/* Determine if URLs should be enabled, based on RULE.\n+/* Return URL_FORMAT_XXX which tells how we should emit urls\n+   when in always mode.\n+   We use GCC_URLS and if that is not defined TERM_URLS.\n+   If neither is defined the feature is enabled by default.  */\n+\n+static diagnostic_url_format\n+parse_env_vars_for_urls ()\n+{\n+  const char *p;\n+\n+  p = getenv (\"GCC_URLS\"); /* Plural! */\n+  if (p == NULL)\n+    p = getenv (\"TERM_URLS\");\n+\n+  if (p == NULL)\n+    return URL_FORMAT_DEFAULT;\n+\n+  if (*p == '\\0')\n+    return URL_FORMAT_NONE;\n+\n+  if (!strcmp (p, \"no\"))\n+    return URL_FORMAT_NONE;\n+\n+  if (!strcmp (p, \"st\"))\n+    return URL_FORMAT_ST;\n+\n+  if (!strcmp (p, \"bel\"))\n+    return URL_FORMAT_BEL;\n+\n+  return URL_FORMAT_DEFAULT;\n+}\n+\n+/* Return true if we should use urls when in auto mode, false otherwise.  */\n+\n+static bool\n+auto_enable_urls ()\n+{\n+#ifdef __MINGW32__\n+  return false;\n+#else\n+  const char *term, *colorterm;\n+\n+  /* First check the terminal is capable of printing color escapes,\n+     if not URLs won't work either.  */\n+  if (!should_colorize ())\n+    return false;\n+\n+  /* xfce4-terminal is known to not implement URLs at this time.\n+     Recently new installations (0.8) will safely ignore the URL escape\n+     sequences, but a large number of legacy installations (0.6.3) print\n+     garbage when URLs are printed.  Therefore we lose nothing by\n+     disabling this feature for that specific terminal type.  */\n+  colorterm = getenv (\"COLORTERM\");\n+  if (colorterm && !strcmp (colorterm, \"xfce4-terminal\"))\n+    return false;\n+\n+  /* Old versions of gnome-terminal where URL escapes cause screen\n+     corruptions set COLORTERM=\"gnome-terminal\", recent versions\n+     with working URL support set this to \"truecolor\".  */\n+  if (colorterm && !strcmp (colorterm, \"gnome-terminal\"))\n+    return false;\n+\n+  /* Since the following checks are less specific than the ones\n+     above, let GCC_URLS and TERM_URLS override the decision.  */\n+  if (getenv (\"GCC_URLS\") || getenv (\"TERM_URLS\"))\n+    return true;\n+\n+  /* In an ssh session the COLORTERM is not there, but TERM=xterm\n+     can be used as an indication of a incompatible terminal while\n+     TERM=xterm-256color appears to be a working terminal.  */\n+  term = getenv (\"TERM\");\n+  if (!colorterm && term && !strcmp (term, \"xterm\"))\n+    return false;\n+\n+  /* When logging in a linux over serial line, we see TERM=linux\n+     and no COLORTERM, it is unlikely that the URL escapes will\n+     work in that environmen either.  */\n+  if (!colorterm && term && !strcmp (term, \"linux\"))\n+    return false;\n+\n+  return true;\n+#endif\n+}\n+\n+/* Determine if URLs should be enabled, based on RULE,\n+   and, if so, which format to use.\n    This reuses the logic for colorization.  */\n \n-bool\n-diagnostic_urls_enabled_p (diagnostic_url_rule_t rule)\n+diagnostic_url_format\n+determine_url_format (diagnostic_url_rule_t rule)\n {\n   switch (rule)\n     {\n     case DIAGNOSTICS_URL_NO:\n-      return false;\n+      return URL_FORMAT_NONE;\n     case DIAGNOSTICS_URL_YES:\n-      return true;\n+      return parse_env_vars_for_urls ();\n     case DIAGNOSTICS_URL_AUTO:\n-      return should_colorize ();\n+      if (auto_enable_urls ())\n+\treturn parse_env_vars_for_urls ();\n+      else\n+\treturn URL_FORMAT_NONE;\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "d28460b928baf7f5b2a9349260c9f99b5e776d97", "filename": "gcc/diagnostic-url.h", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/458c8d6459c4005fc9886b6e25d168a6535ac415/gcc%2Fdiagnostic-url.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/458c8d6459c4005fc9886b6e25d168a6535ac415/gcc%2Fdiagnostic-url.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-url.h?ref=458c8d6459c4005fc9886b6e25d168a6535ac415", "patch": "@@ -31,6 +31,22 @@ typedef enum\n   DIAGNOSTICS_URL_AUTO     = 2\n } diagnostic_url_rule_t;\n \n-extern bool diagnostic_urls_enabled_p (diagnostic_url_rule_t);\n+/* Tells whether URLs should be emitted, and, if so, how to\n+   terminate strings within the escape sequence.   */\n+enum diagnostic_url_format\n+{\n+  /* No URLs shall be emitted.  */\n+  URL_FORMAT_NONE,\n+\n+  /* Use ST string termination.  */\n+  URL_FORMAT_ST,\n+\n+  /* Use BEL string termination.  */\n+  URL_FORMAT_BEL\n+};\n+\n+const diagnostic_url_format URL_FORMAT_DEFAULT = URL_FORMAT_BEL;\n+\n+extern diagnostic_url_format determine_url_format (diagnostic_url_rule_t);\n \n #endif /* ! GCC_DIAGNOSTIC_URL_H */"}, {"sha": "e4a08f76defea9812615b84b92983ab05aac2a16", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/458c8d6459c4005fc9886b6e25d168a6535ac415/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/458c8d6459c4005fc9886b6e25d168a6535ac415/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=458c8d6459c4005fc9886b6e25d168a6535ac415", "patch": "@@ -260,11 +260,26 @@ diagnostic_color_init (diagnostic_context *context, int value /*= -1 */)\n void\n diagnostic_urls_init (diagnostic_context *context, int value /*= -1 */)\n {\n+  /* value == -1 is the default value.  */\n   if (value < 0)\n-    value = DIAGNOSTICS_COLOR_DEFAULT;\n+    {\n+      /* If DIAGNOSTICS_URLS_DEFAULT is -1, default to\n+\t -fdiagnostics-urls=auto if GCC_URLS or TERM_URLS is in the\n+\t environment, otherwise default to -fdiagnostics-urls=never,\n+\t for other values default to that\n+\t -fdiagnostics-urls={never,auto,always}.  */\n+      if (DIAGNOSTICS_URLS_DEFAULT == -1)\n+\t{\n+\t  if (!getenv (\"GCC_URLS\") && !getenv (\"TERM_URLS\"))\n+\t    return;\n+\t  value = DIAGNOSTICS_URL_AUTO;\n+\t}\n+      else\n+\tvalue = DIAGNOSTICS_URLS_DEFAULT;\n+    }\n \n-  context->printer->show_urls\n-    = diagnostic_urls_enabled_p ((diagnostic_url_rule_t) value);\n+  context->printer->url_format\n+    = determine_url_format ((diagnostic_url_rule_t) value);\n }\n \n /* Do any cleaning up required after the last diagnostic is emitted.  */"}, {"sha": "8ddebbb62675c9ce360c499e47630b7e1ab3b6ef", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/458c8d6459c4005fc9886b6e25d168a6535ac415/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/458c8d6459c4005fc9886b6e25d168a6535ac415/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=458c8d6459c4005fc9886b6e25d168a6535ac415", "patch": "@@ -2095,11 +2095,20 @@ GLIBC 2.11 or above, otherwise disabled.\n Tells GCC to use @var{choice} as the default for @option{-fdiagnostics-color=}\n option (if not used explicitly on the command line).  @var{choice}\n can be one of @samp{never}, @samp{auto}, @samp{always}, and @samp{auto-if-env}\n-where @samp{auto} is the default.  @samp{auto-if-env} means that\n-@option{-fdiagnostics-color=auto} will be the default if @code{GCC_COLORS}\n-is present and non-empty in the environment, and\n+where @samp{auto} is the default.  @samp{auto-if-env} makes\n+@option{-fdiagnostics-color=auto} the default if @env{GCC_COLORS}\n+is present and non-empty in the environment of the compiler, and\n @option{-fdiagnostics-color=never} otherwise.\n \n+@item --with-diagnostics-urls=@var{choice}\n+Tells GCC to use @var{choice} as the default for @option{-fdiagnostics-urls=}\n+option (if not used explicitly on the command line).  @var{choice}\n+can be one of @samp{never}, @samp{auto}, @samp{always}, and @samp{auto-if-env}\n+where @samp{auto} is the default.  @samp{auto-if-env} makes\n+@option{-fdiagnostics-urls=auto} the default if @env{GCC_URLS}\n+or @env{TERM_URLS} is present and non-empty in the environment of the\n+compiler, and @option{-fdiagnostics-urls=never} otherwise.\n+\n @item --enable-lto\n @itemx --disable-lto\n Enable support for link-time optimization (LTO).  This is enabled by"}, {"sha": "597151670be75b09bbced0f941c8743107cbc1cb", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/458c8d6459c4005fc9886b6e25d168a6535ac415/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/458c8d6459c4005fc9886b6e25d168a6535ac415/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=458c8d6459c4005fc9886b6e25d168a6535ac415", "patch": "@@ -3920,7 +3920,8 @@ or @samp{auto}.  The default depends on how the compiler has been configured,\n it can be any of the above @var{WHEN} options or also @samp{never}\n if @env{GCC_COLORS} environment variable isn't present in the environment,\n and @samp{auto} otherwise.\n-@samp{auto} means to use color only when the standard error is a terminal.\n+@samp{auto} makes GCC use color only when the standard error is a terminal,\n+and when not executing in an emacs shell.\n The forms @option{-fdiagnostics-color} and @option{-fno-diagnostics-color} are\n aliases for @option{-fdiagnostics-color=always} and\n @option{-fdiagnostics-color=never}, respectively.\n@@ -4033,14 +4034,46 @@ arguments in the C++ frontend.\n @item -fdiagnostics-urls[=@var{WHEN}]\n @opindex fdiagnostics-urls\n @cindex urls\n+@vindex GCC_URLS @r{environment variable}\n+@vindex TERM_URLS @r{environment variable}\n Use escape sequences to embed URLs in diagnostics.  For example, when\n @option{-fdiagnostics-show-option} emits text showing the command-line\n option controlling a diagnostic, embed a URL for documentation of that\n option.\n \n @var{WHEN} is @samp{never}, @samp{always}, or @samp{auto}.\n-The default is @samp{auto}, which means to use URL escape sequences only\n-when the standard error is a terminal.\n+@samp{auto} makes GCC use URL escape sequences only when the standard error\n+is a terminal, and when not executing in an emacs shell or any graphical\n+terminal which is known to be incompatible with this feature, see below.\n+\n+The default depends on how the compiler has been configured.\n+It can be any of the above @var{WHEN} options.\n+\n+GCC can also be configured (via the\n+@option{--with-diagnostics-urls=auto-if-env} configure-time option)\n+so that the default is affected by environment variables.\n+Under such a configuration, GCC defaults to using @samp{auto}\n+if either @env{GCC_URLS} or @env{TERM_URLS} environment variables are\n+present and non-empty in the environment of the compiler, or @samp{never}\n+if neither are.\n+\n+However, even with @option{-fdiagnostics-urls=always} the behavior is\n+dependent on those environment variables:\n+If @env{GCC_URLS} is set to empty or @samp{no}, do not embed URLs in\n+diagnostics.  If set to @samp{st}, URLs use ST escape sequences.\n+If set to @samp{bel}, the default, URLs use BEL escape sequences.\n+Any other non-empty value enables the feature.\n+If @env{GCC_URLS} is not set, use @env{TERM_URLS} as a fallback.\n+Note: ST is an ANSI escape sequence, string terminator @samp{ESC \\},\n+BEL is an ASCII character, CTRL-G that usually sounds like a beep.\n+\n+At this time GCC tries to detect also a few terminals that are known to\n+not implement the URL feature, and have bugs or at least had bugs in\n+some versions that are still in use, where the URL escapes are likely\n+to misbehave, i.e. print garbage on the screen.\n+That list is currently xfce4-terminal, certain known to be buggy\n+gnome-terminal versions, the linux console, and mingw.\n+This check can be skipped with the @option{-fdiagnostics-urls=always}.\n \n @item -fno-diagnostics-show-option\n @opindex fno-diagnostics-show-option"}, {"sha": "dde138b05334b0067173f07cc4ea6f9188e37cb7", "filename": "gcc/pretty-print.c", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/458c8d6459c4005fc9886b6e25d168a6535ac415/gcc%2Fpretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/458c8d6459c4005fc9886b6e25d168a6535ac415/gcc%2Fpretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.c?ref=458c8d6459c4005fc9886b6e25d168a6535ac415", "patch": "@@ -1647,7 +1647,7 @@ pretty_printer::pretty_printer (int maximum_length)\n     need_newline (),\n     translate_identifiers (true),\n     show_color (),\n-    show_urls (false)\n+    url_format (URL_FORMAT_NONE)\n {\n   pp_line_cutoff (this) = maximum_length;\n   /* By default, we emit prefixes once per message.  */\n@@ -1670,7 +1670,7 @@ pretty_printer::pretty_printer (const pretty_printer &other)\n   need_newline (other.need_newline),\n   translate_identifiers (other.translate_identifiers),\n   show_color (other.show_color),\n-  show_urls (other.show_urls)\n+  url_format (other.url_format)\n {\n   pp_line_cutoff (this) = maximum_length;\n   /* By default, we emit prefixes once per message.  */\n@@ -2171,17 +2171,39 @@ identifier_to_locale (const char *ident)\n void\n pp_begin_url (pretty_printer *pp, const char *url)\n {\n-  if (pp->show_urls)\n+  switch (pp->url_format)\n+  {\n+  case URL_FORMAT_NONE:\n+    break;\n+  case URL_FORMAT_ST:\n+    pp_printf (pp, \"\\33]8;;%s\\33\\\\\", url);\n+    break;\n+  case URL_FORMAT_BEL:\n     pp_printf (pp, \"\\33]8;;%s\\a\", url);\n+    break;\n+  default:\n+    gcc_unreachable ();\n+  }\n }\n \n /* If URL-printing is enabled, write a \"close URL\" escape sequence to PP.  */\n \n void\n pp_end_url (pretty_printer *pp)\n {\n-  if (pp->show_urls)\n+  switch (pp->url_format)\n+  {\n+  case URL_FORMAT_NONE:\n+    break;\n+  case URL_FORMAT_ST:\n+    pp_string (pp, \"\\33]8;;\\33\\\\\");\n+    break;\n+  case URL_FORMAT_BEL:\n     pp_string (pp, \"\\33]8;;\\a\");\n+    break;\n+  default:\n+    gcc_unreachable ();\n+  }\n }\n \n #if CHECKING_P\n@@ -2490,7 +2512,7 @@ test_urls ()\n {\n   {\n     pretty_printer pp;\n-    pp.show_urls = false;\n+    pp.url_format = URL_FORMAT_NONE;\n     pp_begin_url (&pp, \"http://example.com\");\n     pp_string (&pp, \"This is a link\");\n     pp_end_url (&pp);\n@@ -2500,7 +2522,17 @@ test_urls ()\n \n   {\n     pretty_printer pp;\n-    pp.show_urls = true;\n+    pp.url_format = URL_FORMAT_ST;\n+    pp_begin_url (&pp, \"http://example.com\");\n+    pp_string (&pp, \"This is a link\");\n+    pp_end_url (&pp);\n+    ASSERT_STREQ (\"\\33]8;;http://example.com\\33\\\\This is a link\\33]8;;\\33\\\\\",\n+\t\t  pp_formatted_text (&pp));\n+  }\n+\n+  {\n+    pretty_printer pp;\n+    pp.url_format = URL_FORMAT_BEL;\n     pp_begin_url (&pp, \"http://example.com\");\n     pp_string (&pp, \"This is a link\");\n     pp_end_url (&pp);"}, {"sha": "22892f12ab7cdb06d27107bf64e8df9c3e8cb5b8", "filename": "gcc/pretty-print.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/458c8d6459c4005fc9886b6e25d168a6535ac415/gcc%2Fpretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/458c8d6459c4005fc9886b6e25d168a6535ac415/gcc%2Fpretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.h?ref=458c8d6459c4005fc9886b6e25d168a6535ac415", "patch": "@@ -22,6 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_PRETTY_PRINT_H\n \n #include \"obstack.h\"\n+#include \"diagnostic-url.h\"\n \n /* Maximum number of format string arguments.  */\n #define PP_NL_ARGMAX   30\n@@ -278,8 +279,8 @@ class pretty_printer\n   /* Nonzero means that text should be colorized.  */\n   bool show_color;\n \n-  /* Nonzero means that URLs should be emitted.  */\n-  bool show_urls;\n+  /* Whether URLs should be emitted, and which terminator to use.  */\n+  diagnostic_url_format url_format;\n };\n \n static inline const char *"}]}