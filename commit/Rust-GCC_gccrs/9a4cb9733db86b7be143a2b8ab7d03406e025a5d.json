{"sha": "9a4cb9733db86b7be143a2b8ab7d03406e025a5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE0Y2I5NzMzZGI4NmI3YmUxNDNhMmI4YWI3ZDAzNDA2ZTAyNWE1ZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-07-19T10:18:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-07-19T10:18:25Z"}, "message": "re PR tree-optimization/71908 (ICE at -Os and above in both 32-bit and 64-bit modes on x86_64-linux-gnu (get_constraint_for_component_ref))\n\n2016-07-18  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/71908\n\t* tree-ssa-structalias.c (get_constraint_for_component_ref): Handle\n\tsymbolic constants in a more reliable way.\n\n\t* gcc.dg/torture/pr71908.c: New testcase.\n\nFrom-SVN: r238467", "tree": {"sha": "01fb62930fcc3a0f17e46e862d62ba9c4a743d73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01fb62930fcc3a0f17e46e862d62ba9c4a743d73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a4cb9733db86b7be143a2b8ab7d03406e025a5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a4cb9733db86b7be143a2b8ab7d03406e025a5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a4cb9733db86b7be143a2b8ab7d03406e025a5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a4cb9733db86b7be143a2b8ab7d03406e025a5d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d9157f1514cb8f9e64e4b57c5461a9bb9b03427f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9157f1514cb8f9e64e4b57c5461a9bb9b03427f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9157f1514cb8f9e64e4b57c5461a9bb9b03427f"}], "stats": {"total": 55, "additions": 53, "deletions": 2}, "files": [{"sha": "1c57adc9543dcbd5c151ba2c5342bcb5060b1ab1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a4cb9733db86b7be143a2b8ab7d03406e025a5d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a4cb9733db86b7be143a2b8ab7d03406e025a5d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a4cb9733db86b7be143a2b8ab7d03406e025a5d", "patch": "@@ -1,3 +1,9 @@\n+2016-07-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71908\n+\t* tree-ssa-structalias.c (get_constraint_for_component_ref): Handle\n+\tsymbolic constants in a more reliable way.\n+\n 2016-07-19  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \t* tree-vect-loop-manip.c (vect_update_ivs_after_vectorizer): Update"}, {"sha": "d0a3fcb37640bd98b5e62e2d0c03c3ee5d73bb6b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a4cb9733db86b7be143a2b8ab7d03406e025a5d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a4cb9733db86b7be143a2b8ab7d03406e025a5d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9a4cb9733db86b7be143a2b8ab7d03406e025a5d", "patch": "@@ -1,3 +1,8 @@\n+2016-07-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71908\n+\t* gcc.dg/torture/pr71908.c: New testcase.\n+\n 2016-07-18  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/71493"}, {"sha": "95d8748ac9e3a7b045dffd4bce4bb66ae4985f1c", "filename": "gcc/testsuite/gcc.dg/torture/pr71908.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a4cb9733db86b7be143a2b8ab7d03406e025a5d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71908.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a4cb9733db86b7be143a2b8ab7d03406e025a5d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71908.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71908.c?ref=9a4cb9733db86b7be143a2b8ab7d03406e025a5d", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+\n+struct S3\n+{\n+  int f3;\n+  int f5;\n+  char f6;\n+  int f7;\n+} b;\n+int a;\n+static struct S3 *c = &b;\n+int *d;\n+int main()\n+{\n+  int i;\n+  for (;;) {\n+      a = 0;\n+      int **e = &d;\n+      i = 0;\n+      for (; i < 2; i++)\n+\td = &(*c).f5;\n+      *e = d;\n+      **e = 3;\n+  }\n+  return 0;\n+}"}, {"sha": "a96fcabf2701c04ebb74264ce6a7a007b16d7cfe", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a4cb9733db86b7be143a2b8ab7d03406e025a5d/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a4cb9733db86b7be143a2b8ab7d03406e025a5d/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=9a4cb9733db86b7be143a2b8ab7d03406e025a5d", "patch": "@@ -3211,6 +3211,20 @@ get_constraint_for_component_ref (tree t, vec<ce_s> *results,\n \n   t = get_ref_base_and_extent (t, &bitpos, &bitsize, &bitmaxsize, &reverse);\n \n+  /* We can end up here for component references on a\n+     VIEW_CONVERT_EXPR <>(&foobar) or things like a\n+     BIT_FIELD_REF <&MEM[(void *)&b + 4B], ...>.  So for\n+     symbolic constants simply give up.  */\n+  if (TREE_CODE (t) == ADDR_EXPR)\n+    {\n+      constraint_expr result;\n+      result.type = SCALAR;\n+      result.var = anything_id;\n+      result.offset = 0;\n+      results->safe_push (result);\n+      return;\n+    }\n+\n   /* Pretend to take the address of the base, we'll take care of\n      adding the required subset of sub-fields below.  */\n   get_constraint_for_1 (t, results, true, lhs_p);\n@@ -3300,8 +3314,8 @@ get_constraint_for_component_ref (tree t, vec<ce_s> *results,\n     }\n   else if (result.type == ADDRESSOF)\n     {\n-      /* We can end up here for component references on a\n-         VIEW_CONVERT_EXPR <>(&foobar).  */\n+      /* We can end up here for component references on constants like\n+\t VIEW_CONVERT_EXPR <>({ 0, 1, 2, 3 })[i].  */\n       result.type = SCALAR;\n       result.var = anything_id;\n       result.offset = 0;"}]}