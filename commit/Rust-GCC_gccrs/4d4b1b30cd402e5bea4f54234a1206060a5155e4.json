{"sha": "4d4b1b30cd402e5bea4f54234a1206060a5155e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ0YjFiMzBjZDQwMmU1YmVhNGY1NDIzNGExMjA2MDYwYTUxNTVlNA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-09-04T15:25:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-09-04T15:25:38Z"}, "message": "tree-ssa-pre.c (value_expressions): Make it a vector of bitmaps containing expression IDs.\n\n2012-09-04  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-pre.c (value_expressions): Make it a vector of\n\tbitmaps containing expression IDs.\n\t(add_to_value): Adjust.\n\t(sorted_array_from_bitmap_set): Likewise.\n\t(bitmap_set_replace_value): Likewise.\n\t(print_value_expressions): Likewise.\n\t(get_constant_for_value_id): Likewise.\n\t(get_representative_for): Likewise.\n\t(phi_translate_1): Likewise.\n\t(bitmap_find_leader): Likewise.\n\t(find_or_generate_expression): Likewise.\n\t(do_regular_insertion): Likewise.\n\t(init_pre): Likewise.\n\t(fini_pre): Likewise.\n\nFrom-SVN: r190938", "tree": {"sha": "808a598966e6c0d1e6d8227bf7025af908646be6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/808a598966e6c0d1e6d8227bf7025af908646be6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d4b1b30cd402e5bea4f54234a1206060a5155e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d4b1b30cd402e5bea4f54234a1206060a5155e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d4b1b30cd402e5bea4f54234a1206060a5155e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d4b1b30cd402e5bea4f54234a1206060a5155e4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dce6e8ada7b01213cd6f94edde84370041ece98e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dce6e8ada7b01213cd6f94edde84370041ece98e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dce6e8ada7b01213cd6f94edde84370041ece98e"}], "stats": {"total": 93, "additions": 53, "deletions": 40}, "files": [{"sha": "cc3a2ed16d55c103d3d2a52eda2bd5bc57c46a4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4b1b30cd402e5bea4f54234a1206060a5155e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4b1b30cd402e5bea4f54234a1206060a5155e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d4b1b30cd402e5bea4f54234a1206060a5155e4", "patch": "@@ -1,3 +1,20 @@\n+2012-09-04  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-pre.c (value_expressions): Make it a vector of\n+\tbitmaps containing expression IDs.\n+\t(add_to_value): Adjust.\n+\t(sorted_array_from_bitmap_set): Likewise.\n+\t(bitmap_set_replace_value): Likewise.\n+\t(print_value_expressions): Likewise.\n+\t(get_constant_for_value_id): Likewise.\n+\t(get_representative_for): Likewise.\n+\t(phi_translate_1): Likewise.\n+\t(bitmap_find_leader): Likewise.\n+\t(find_or_generate_expression): Likewise.\n+\t(do_regular_insertion): Likewise.\n+\t(init_pre): Likewise.\n+\t(fini_pre): Likewise.\n+\n 2012-09-04   Diego Novillo  <dnovillo@google.com>\n \n \tPR bootstrap/54479"}, {"sha": "bb1a03dfe99752dbdb49eb3fc84d70dab6094029", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 36, "deletions": 40, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4b1b30cd402e5bea4f54234a1206060a5155e4/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4b1b30cd402e5bea4f54234a1206060a5155e4/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=4d4b1b30cd402e5bea4f54234a1206060a5155e4", "patch": "@@ -368,9 +368,7 @@ typedef struct bitmap_set\n   EXECUTE_IF_SET_IN_BITMAP(&(set)->values, 0, (id), (bi))\n \n /* Mapping from value id to expressions with that value_id.  */\n-DEF_VEC_P (bitmap_set_t);\n-DEF_VEC_ALLOC_P (bitmap_set_t, heap);\n-static VEC(bitmap_set_t, heap) *value_expressions;\n+static VEC(bitmap, heap) *value_expressions;\n \n /* Sets that we need to keep track of.  */\n typedef struct bb_bitmap_sets\n@@ -580,24 +578,23 @@ phi_trans_add (pre_expr e, pre_expr v, basic_block pred)\n static void\n add_to_value (unsigned int v, pre_expr e)\n {\n-  bitmap_set_t set;\n+  bitmap set;\n \n-  gcc_assert (get_expr_value_id (e) == v);\n+  gcc_checking_assert (get_expr_value_id (e) == v);\n \n-  if (v >= VEC_length (bitmap_set_t, value_expressions))\n+  if (v >= VEC_length (bitmap, value_expressions))\n     {\n-      VEC_safe_grow_cleared (bitmap_set_t, heap, value_expressions,\n-\t\t\t     v + 1);\n+      VEC_safe_grow_cleared (bitmap, heap, value_expressions, v + 1);\n     }\n \n-  set = VEC_index (bitmap_set_t, value_expressions, v);\n+  set = VEC_index (bitmap, value_expressions, v);\n   if (!set)\n     {\n-      set = bitmap_set_new ();\n-      VEC_replace (bitmap_set_t, value_expressions, v, set);\n+      set = BITMAP_ALLOC (&grand_bitmap_obstack);\n+      VEC_replace (bitmap, value_expressions, v, set);\n     }\n \n-  bitmap_insert_into_set_1 (set, e, v, true);\n+  bitmap_set_bit (set, get_or_alloc_expression_id (e));\n }\n \n /* Create a new bitmap set and return it.  */\n@@ -717,8 +714,8 @@ sorted_array_from_bitmap_set (bitmap_set_t set)\n \n \t If this is somehow a significant lose for some cases, we can\n \t choose which set to walk based on the set size.  */\n-      bitmap_set_t exprset = VEC_index (bitmap_set_t, value_expressions, i);\n-      FOR_EACH_EXPR_ID_IN_SET (exprset, j, bj)\n+      bitmap exprset = VEC_index (bitmap, value_expressions, i);\n+      EXECUTE_IF_SET_IN_BITMAP (exprset, 0, j, bj)\n \t{\n \t  if (bitmap_bit_p (&set->expressions, j))\n \t    VEC_safe_push (pre_expr, heap, result, expression_for_id (j));\n@@ -824,7 +821,7 @@ static void\n bitmap_set_replace_value (bitmap_set_t set, unsigned int lookfor,\n \t\t\t  const pre_expr expr)\n {\n-  bitmap_set_t exprset;\n+  bitmap exprset;\n   unsigned int i;\n   bitmap_iterator bi;\n \n@@ -843,8 +840,8 @@ bitmap_set_replace_value (bitmap_set_t set, unsigned int lookfor,\n      5-10x faster than walking the bitmap.  If this is somehow a\n      significant lose for some cases, we can choose which set to walk\n      based on the set size.  */\n-  exprset = VEC_index (bitmap_set_t, value_expressions, lookfor);\n-  FOR_EACH_EXPR_ID_IN_SET (exprset, i, bi)\n+  exprset = VEC_index (bitmap, value_expressions, lookfor);\n+  EXECUTE_IF_SET_IN_BITMAP (exprset, 0, i, bi)\n     {\n       if (bitmap_clear_bit (&set->expressions, i))\n \t{\n@@ -1042,12 +1039,14 @@ debug_bitmap_sets_for (basic_block bb)\n static void\n print_value_expressions (FILE *outfile, unsigned int val)\n {\n-  bitmap_set_t set = VEC_index (bitmap_set_t, value_expressions, val);\n+  bitmap set = VEC_index (bitmap, value_expressions, val);\n   if (set)\n     {\n+      bitmap_set x;\n       char s[10];\n       sprintf (s, \"%04d\", val);\n-      print_bitmap_set (outfile, set, s, 0);\n+      x.expressions = *set;\n+      print_bitmap_set (outfile, &x, s, 0);\n     }\n }\n \n@@ -1095,9 +1094,9 @@ get_constant_for_value_id (unsigned int v)\n     {\n       unsigned int i;\n       bitmap_iterator bi;\n-      bitmap_set_t exprset = VEC_index (bitmap_set_t, value_expressions, v);\n+      bitmap exprset = VEC_index (bitmap, value_expressions, v);\n \n-      FOR_EACH_EXPR_ID_IN_SET (exprset, i, bi)\n+      EXECUTE_IF_SET_IN_BITMAP (exprset, 0, i, bi)\n \t{\n \t  pre_expr expr = expression_for_id (i);\n \t  if (expr->kind == CONSTANT)\n@@ -1377,9 +1376,8 @@ get_representative_for (const pre_expr e)\n \t   and pick out an SSA_NAME.  */\n \tunsigned int i;\n \tbitmap_iterator bi;\n-\tbitmap_set_t exprs = VEC_index (bitmap_set_t, value_expressions,\n-\t\t\t\t\tvalue_id);\n-\tFOR_EACH_EXPR_ID_IN_SET (exprs, i, bi)\n+\tbitmap exprs = VEC_index (bitmap, value_expressions, value_id);\n+\tEXECUTE_IF_SET_IN_BITMAP (exprs, 0, i, bi)\n \t  {\n \t    pre_expr rep = expression_for_id (i);\n \t    if (rep->kind == NAME)\n@@ -1499,7 +1497,7 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t    else\n \t      {\n \t\tnew_val_id = get_next_value_id ();\n-\t\tVEC_safe_grow_cleared (bitmap_set_t, heap,\n+\t\tVEC_safe_grow_cleared (bitmap, heap,\n \t\t\t\t       value_expressions,\n \t\t\t\t       get_max_value_id() + 1);\n \t\tnary = vn_nary_op_insert_pieces (newnary->length,\n@@ -1698,7 +1696,7 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t\tif (changed || !same_valid)\n \t\t  {\n \t\t    new_val_id = get_next_value_id ();\n-\t\t    VEC_safe_grow_cleared (bitmap_set_t, heap,\n+\t\t    VEC_safe_grow_cleared (bitmap, heap,\n \t\t\t\t\t   value_expressions,\n \t\t\t\t\t   get_max_value_id() + 1);\n \t\t  }\n@@ -1851,9 +1849,9 @@ bitmap_find_leader (bitmap_set_t set, unsigned int val, gimple stmt)\n     {\n       unsigned int i;\n       bitmap_iterator bi;\n-      bitmap_set_t exprset = VEC_index (bitmap_set_t, value_expressions, val);\n+      bitmap exprset = VEC_index (bitmap, value_expressions, val);\n \n-      FOR_EACH_EXPR_ID_IN_SET (exprset, i, bi)\n+      EXECUTE_IF_SET_IN_BITMAP (exprset, 0, i, bi)\n \t{\n \t  pre_expr expr = expression_for_id (i);\n \t  if (expr->kind == CONSTANT)\n@@ -1875,10 +1873,9 @@ bitmap_find_leader (bitmap_set_t set, unsigned int val, gimple stmt)\n \t choose which set to walk based on which set is smaller.  */\n       unsigned int i;\n       bitmap_iterator bi;\n-      bitmap_set_t exprset = VEC_index (bitmap_set_t, value_expressions, val);\n+      bitmap exprset = VEC_index (bitmap, value_expressions, val);\n \n-      EXECUTE_IF_AND_IN_BITMAP (&exprset->expressions,\n-\t\t\t\t&set->expressions, 0, i, bi)\n+      EXECUTE_IF_AND_IN_BITMAP (exprset, &set->expressions, 0, i, bi)\n \t{\n \t  pre_expr val = expression_for_id (i);\n \t  /* At the point where stmt is not null, there should always\n@@ -2916,14 +2913,14 @@ find_or_generate_expression (basic_block block, pre_expr expr,\n   if (genop == NULL\n       && !domstmt)\n     {\n-      bitmap_set_t exprset;\n+      bitmap exprset;\n       unsigned int lookfor = get_expr_value_id (expr);\n       bool handled = false;\n       bitmap_iterator bi;\n       unsigned int i;\n \n-      exprset = VEC_index (bitmap_set_t, value_expressions, lookfor);\n-      FOR_EACH_EXPR_ID_IN_SET (exprset, i, bi)\n+      exprset = VEC_index (bitmap, value_expressions, lookfor);\n+      EXECUTE_IF_SET_IN_BITMAP (exprset, 0, i, bi)\n \t{\n \t  pre_expr temp = expression_for_id (i);\n \t  if (temp->kind != NAME)\n@@ -3542,11 +3539,10 @@ do_regular_insertion (basic_block block, basic_block dom)\n \t    {\n \t      unsigned int j;\n \t      bitmap_iterator bi;\n-\t      bitmap_set_t exprset = VEC_index (bitmap_set_t,\n-\t\t\t\t\t\tvalue_expressions, val);\n+\t      bitmap exprset = VEC_index (bitmap, value_expressions, val);\n \n \t      unsigned int new_val = get_expr_value_id (edoubleprime);\n-\t      FOR_EACH_EXPR_ID_IN_SET (exprset, j, bi)\n+\t      EXECUTE_IF_SET_IN_BITMAP (exprset, 0, j, bi)\n \t\t{\n \t\t  pre_expr expr = expression_for_id (j);\n \n@@ -4780,8 +4776,8 @@ init_pre (bool do_fre)\n   next_expression_id = 1;\n   expressions = NULL;\n   VEC_safe_push (pre_expr, heap, expressions, (pre_expr)NULL);\n-  value_expressions = VEC_alloc (bitmap_set_t, heap, get_max_value_id () + 1);\n-  VEC_safe_grow_cleared (bitmap_set_t, heap, value_expressions,\n+  value_expressions = VEC_alloc (bitmap, heap, get_max_value_id () + 1);\n+  VEC_safe_grow_cleared (bitmap, heap, value_expressions,\n \t\t\t get_max_value_id() + 1);\n   name_to_id = NULL;\n \n@@ -4833,7 +4829,7 @@ fini_pre (bool do_fre)\n   bool do_ab_cleanup = !bitmap_empty_p (need_ab_cleanup);\n \n   free (postorder);\n-  VEC_free (bitmap_set_t, heap, value_expressions);\n+  VEC_free (bitmap, heap, value_expressions);\n   BITMAP_FREE (inserted_exprs);\n   bitmap_obstack_release (&grand_bitmap_obstack);\n   free_alloc_pool (bitmap_set_pool);"}]}