{"sha": "7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E1ZmZmYTVlZDBhOGVkZmNhNzcyZDQzNDY1ZDJjOWI1NWJiMjNjYw==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-18T19:16:32Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-18T19:16:32Z"}, "message": "[ARM][GCC][8/5x]: Remaining MVE store intrinsics which stores an half word, word and double word to memory.\n\nThis patch supports the following MVE ACLE store intrinsics which stores an halfword, word or double word to memory.\n\nvstrdq_scatter_base_p_s64, vstrdq_scatter_base_p_u64, vstrdq_scatter_base_s64, vstrdq_scatter_base_u64, vstrdq_scatter_offset_p_s64, vstrdq_scatter_offset_p_u64, vstrdq_scatter_offset_s64, vstrdq_scatter_offset_u64, vstrdq_scatter_shifted_offset_p_s64,\nvstrdq_scatter_shifted_offset_p_u64, vstrdq_scatter_shifted_offset_s64,\nvstrdq_scatter_shifted_offset_u64, vstrhq_scatter_offset_f16, vstrhq_scatter_offset_p_f16, vstrhq_scatter_shifted_offset_f16, vstrhq_scatter_shifted_offset_p_f16,\nvstrwq_scatter_base_f32, vstrwq_scatter_base_p_f32, vstrwq_scatter_offset_f32, vstrwq_scatter_offset_p_f32, vstrwq_scatter_offset_p_s32, vstrwq_scatter_offset_p_u32, vstrwq_scatter_offset_s32, vstrwq_scatter_offset_u32, vstrwq_scatter_shifted_offset_f32,\nvstrwq_scatter_shifted_offset_p_f32, vstrwq_scatter_shifted_offset_p_s32,\nvstrwq_scatter_shifted_offset_p_u32, vstrwq_scatter_shifted_offset_s32,\nvstrwq_scatter_shifted_offset_u32.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1]  https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\nIn this patch a new predicate \"Ri\" is defined to check the immediate is in the range of +/-1016 and multiple of 8.\n\n2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/arm_mve.h (vstrdq_scatter_base_p_s64): Define macro.\n\t(vstrdq_scatter_base_p_u64): Likewise.\n\t(vstrdq_scatter_base_s64): Likewise.\n\t(vstrdq_scatter_base_u64): Likewise.\n\t(vstrdq_scatter_offset_p_s64): Likewise.\n\t(vstrdq_scatter_offset_p_u64): Likewise.\n\t(vstrdq_scatter_offset_s64): Likewise.\n\t(vstrdq_scatter_offset_u64): Likewise.\n\t(vstrdq_scatter_shifted_offset_p_s64): Likewise.\n\t(vstrdq_scatter_shifted_offset_p_u64): Likewise.\n\t(vstrdq_scatter_shifted_offset_s64): Likewise.\n\t(vstrdq_scatter_shifted_offset_u64): Likewise.\n\t(vstrhq_scatter_offset_f16): Likewise.\n\t(vstrhq_scatter_offset_p_f16): Likewise.\n\t(vstrhq_scatter_shifted_offset_f16): Likewise.\n\t(vstrhq_scatter_shifted_offset_p_f16): Likewise.\n\t(vstrwq_scatter_base_f32): Likewise.\n\t(vstrwq_scatter_base_p_f32): Likewise.\n\t(vstrwq_scatter_offset_f32): Likewise.\n\t(vstrwq_scatter_offset_p_f32): Likewise.\n\t(vstrwq_scatter_offset_p_s32): Likewise.\n\t(vstrwq_scatter_offset_p_u32): Likewise.\n\t(vstrwq_scatter_offset_s32): Likewise.\n\t(vstrwq_scatter_offset_u32): Likewise.\n\t(vstrwq_scatter_shifted_offset_f32): Likewise.\n\t(vstrwq_scatter_shifted_offset_p_f32): Likewise.\n\t(vstrwq_scatter_shifted_offset_p_s32): Likewise.\n\t(vstrwq_scatter_shifted_offset_p_u32): Likewise.\n\t(vstrwq_scatter_shifted_offset_s32): Likewise.\n\t(vstrwq_scatter_shifted_offset_u32): Likewise.\n\t(__arm_vstrdq_scatter_base_p_s64): Define intrinsic.\n\t(__arm_vstrdq_scatter_base_p_u64): Likewise.\n\t(__arm_vstrdq_scatter_base_s64): Likewise.\n\t(__arm_vstrdq_scatter_base_u64): Likewise.\n\t(__arm_vstrdq_scatter_offset_p_s64): Likewise.\n\t(__arm_vstrdq_scatter_offset_p_u64): Likewise.\n\t(__arm_vstrdq_scatter_offset_s64): Likewise.\n\t(__arm_vstrdq_scatter_offset_u64): Likewise.\n\t(__arm_vstrdq_scatter_shifted_offset_p_s64): Likewise.\n\t(__arm_vstrdq_scatter_shifted_offset_p_u64): Likewise.\n\t(__arm_vstrdq_scatter_shifted_offset_s64): Likewise.\n\t(__arm_vstrdq_scatter_shifted_offset_u64): Likewise.\n\t(__arm_vstrwq_scatter_offset_p_s32): Likewise.\n\t(__arm_vstrwq_scatter_offset_p_u32): Likewise.\n\t(__arm_vstrwq_scatter_offset_s32): Likewise.\n\t(__arm_vstrwq_scatter_offset_u32): Likewise.\n\t(__arm_vstrwq_scatter_shifted_offset_p_s32): Likewise.\n\t(__arm_vstrwq_scatter_shifted_offset_p_u32): Likewise.\n\t(__arm_vstrwq_scatter_shifted_offset_s32): Likewise.\n\t(__arm_vstrwq_scatter_shifted_offset_u32): Likewise.\n\t(__arm_vstrhq_scatter_offset_f16): Likewise.\n\t(__arm_vstrhq_scatter_offset_p_f16): Likewise.\n\t(__arm_vstrhq_scatter_shifted_offset_f16): Likewise.\n\t(__arm_vstrhq_scatter_shifted_offset_p_f16): Likewise.\n\t(__arm_vstrwq_scatter_base_f32): Likewise.\n\t(__arm_vstrwq_scatter_base_p_f32): Likewise.\n\t(__arm_vstrwq_scatter_offset_f32): Likewise.\n\t(__arm_vstrwq_scatter_offset_p_f32): Likewise.\n\t(__arm_vstrwq_scatter_shifted_offset_f32): Likewise.\n\t(__arm_vstrwq_scatter_shifted_offset_p_f32): Likewise.\n\t(vstrhq_scatter_offset): Define polymorphic variant.\n\t(vstrhq_scatter_offset_p): Likewise.\n\t(vstrhq_scatter_shifted_offset): Likewise.\n\t(vstrhq_scatter_shifted_offset_p): Likewise.\n\t(vstrwq_scatter_base): Likewise.\n\t(vstrwq_scatter_base_p): Likewise.\n\t(vstrwq_scatter_offset): Likewise.\n\t(vstrwq_scatter_offset_p): Likewise.\n\t(vstrwq_scatter_shifted_offset): Likewise.\n\t(vstrwq_scatter_shifted_offset_p): Likewise.\n\t(vstrdq_scatter_base_p): Likewise.\n\t(vstrdq_scatter_base): Likewise.\n\t(vstrdq_scatter_offset_p): Likewise.\n\t(vstrdq_scatter_offset): Likewise.\n\t(vstrdq_scatter_shifted_offset_p): Likewise.\n\t(vstrdq_scatter_shifted_offset): Likewise.\n\t* config/arm/arm_mve_builtins.def (STRSBS): Use builtin qualifier.\n\t(STRSBS_P): Likewise.\n\t(STRSBU): Likewise.\n\t(STRSBU_P): Likewise.\n\t(STRSS): Likewise.\n\t(STRSS_P): Likewise.\n\t(STRSU): Likewise.\n\t(STRSU_P): Likewise.\n\t* config/arm/constraints.md (Ri): Define.\n\t* config/arm/mve.md (VSTRDSBQ): Define iterator.\n\t(VSTRDSOQ): Likewise.\n\t(VSTRDSSOQ): Likewise.\n\t(VSTRWSOQ): Likewise.\n\t(VSTRWSSOQ): Likewise.\n\t(mve_vstrdq_scatter_base_p_<supf>v2di): Define RTL pattern.\n\t(mve_vstrdq_scatter_base_<supf>v2di): Likewise.\n\t(mve_vstrdq_scatter_offset_p_<supf>v2di): Likewise.\n\t(mve_vstrdq_scatter_offset_<supf>v2di): Likewise.\n\t(mve_vstrdq_scatter_shifted_offset_p_<supf>v2di): Likewise.\n\t(mve_vstrdq_scatter_shifted_offset_<supf>v2di): Likewise.\n\t(mve_vstrhq_scatter_offset_fv8hf): Likewise.\n\t(mve_vstrhq_scatter_offset_p_fv8hf): Likewise.\n\t(mve_vstrhq_scatter_shifted_offset_fv8hf): Likewise.\n\t(mve_vstrhq_scatter_shifted_offset_p_fv8hf): Likewise.\n\t(mve_vstrwq_scatter_base_fv4sf): Likewise.\n\t(mve_vstrwq_scatter_base_p_fv4sf): Likewise.\n\t(mve_vstrwq_scatter_offset_fv4sf): Likewise.\n\t(mve_vstrwq_scatter_offset_p_fv4sf): Likewise.\n\t(mve_vstrwq_scatter_offset_p_<supf>v4si): Likewise.\n\t(mve_vstrwq_scatter_offset_<supf>v4si): Likewise.\n\t(mve_vstrwq_scatter_shifted_offset_fv4sf): Likewise.\n\t(mve_vstrwq_scatter_shifted_offset_p_fv4sf): Likewise.\n\t(mve_vstrwq_scatter_shifted_offset_p_<supf>v4si): Likewise.\n\t(mve_vstrwq_scatter_shifted_offset_<supf>v4si): Likewise.\n\t* config/arm/predicates.md (Ri): Define predicate to check immediate\n\tis the range +/-1016 and multiple of 8.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_p_s64.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_p_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_s64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_offset_p_s64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_offset_p_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_offset_s64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_offset_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_shifted_offset_p_s64.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_shifted_offset_p_u64.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_shifted_offset_s64.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_shifted_offset_u64.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_p_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_f16.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_p_f16.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_p_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_offset_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_offset_p_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_offset_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_offset_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_offset_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_offset_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_shifted_offset_f32.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_shifted_offset_p_f32.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_shifted_offset_p_s32.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_shifted_offset_p_u32.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_shifted_offset_s32.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_shifted_offset_u32.c:\n\tLikewise.", "tree": {"sha": "9f2cba93c538056e5fd7397913096cda76ee529e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f2cba93c538056e5fd7397913096cda76ee529e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cad47e0f85e59e21a5df04d34d813a860ff42d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cad47e0f85e59e21a5df04d34d813a860ff42d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cad47e0f85e59e21a5df04d34d813a860ff42d4"}], "stats": {"total": 1821, "additions": 1818, "deletions": 3}, "files": [{"sha": "0f7df20db718016557dbdda5c951a9fb409c0fc4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -1,3 +1,120 @@\n+2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm_mve.h (vstrdq_scatter_base_p_s64): Define macro.\n+\t(vstrdq_scatter_base_p_u64): Likewise.\n+\t(vstrdq_scatter_base_s64): Likewise.\n+\t(vstrdq_scatter_base_u64): Likewise.\n+\t(vstrdq_scatter_offset_p_s64): Likewise.\n+\t(vstrdq_scatter_offset_p_u64): Likewise.\n+\t(vstrdq_scatter_offset_s64): Likewise.\n+\t(vstrdq_scatter_offset_u64): Likewise.\n+\t(vstrdq_scatter_shifted_offset_p_s64): Likewise.\n+\t(vstrdq_scatter_shifted_offset_p_u64): Likewise.\n+\t(vstrdq_scatter_shifted_offset_s64): Likewise.\n+\t(vstrdq_scatter_shifted_offset_u64): Likewise.\n+\t(vstrhq_scatter_offset_f16): Likewise.\n+\t(vstrhq_scatter_offset_p_f16): Likewise.\n+\t(vstrhq_scatter_shifted_offset_f16): Likewise.\n+\t(vstrhq_scatter_shifted_offset_p_f16): Likewise.\n+\t(vstrwq_scatter_base_f32): Likewise.\n+\t(vstrwq_scatter_base_p_f32): Likewise.\n+\t(vstrwq_scatter_offset_f32): Likewise.\n+\t(vstrwq_scatter_offset_p_f32): Likewise.\n+\t(vstrwq_scatter_offset_p_s32): Likewise.\n+\t(vstrwq_scatter_offset_p_u32): Likewise.\n+\t(vstrwq_scatter_offset_s32): Likewise.\n+\t(vstrwq_scatter_offset_u32): Likewise.\n+\t(vstrwq_scatter_shifted_offset_f32): Likewise.\n+\t(vstrwq_scatter_shifted_offset_p_f32): Likewise.\n+\t(vstrwq_scatter_shifted_offset_p_s32): Likewise.\n+\t(vstrwq_scatter_shifted_offset_p_u32): Likewise.\n+\t(vstrwq_scatter_shifted_offset_s32): Likewise.\n+\t(vstrwq_scatter_shifted_offset_u32): Likewise.\n+\t(__arm_vstrdq_scatter_base_p_s64): Define intrinsic.\n+\t(__arm_vstrdq_scatter_base_p_u64): Likewise.\n+\t(__arm_vstrdq_scatter_base_s64): Likewise.\n+\t(__arm_vstrdq_scatter_base_u64): Likewise.\n+\t(__arm_vstrdq_scatter_offset_p_s64): Likewise.\n+\t(__arm_vstrdq_scatter_offset_p_u64): Likewise.\n+\t(__arm_vstrdq_scatter_offset_s64): Likewise.\n+\t(__arm_vstrdq_scatter_offset_u64): Likewise.\n+\t(__arm_vstrdq_scatter_shifted_offset_p_s64): Likewise.\n+\t(__arm_vstrdq_scatter_shifted_offset_p_u64): Likewise.\n+\t(__arm_vstrdq_scatter_shifted_offset_s64): Likewise.\n+\t(__arm_vstrdq_scatter_shifted_offset_u64): Likewise.\n+\t(__arm_vstrwq_scatter_offset_p_s32): Likewise.\n+\t(__arm_vstrwq_scatter_offset_p_u32): Likewise.\n+\t(__arm_vstrwq_scatter_offset_s32): Likewise.\n+\t(__arm_vstrwq_scatter_offset_u32): Likewise.\n+\t(__arm_vstrwq_scatter_shifted_offset_p_s32): Likewise.\n+\t(__arm_vstrwq_scatter_shifted_offset_p_u32): Likewise.\n+\t(__arm_vstrwq_scatter_shifted_offset_s32): Likewise.\n+\t(__arm_vstrwq_scatter_shifted_offset_u32): Likewise.\n+\t(__arm_vstrhq_scatter_offset_f16): Likewise.\n+\t(__arm_vstrhq_scatter_offset_p_f16): Likewise.\n+\t(__arm_vstrhq_scatter_shifted_offset_f16): Likewise.\n+\t(__arm_vstrhq_scatter_shifted_offset_p_f16): Likewise.\n+\t(__arm_vstrwq_scatter_base_f32): Likewise.\n+\t(__arm_vstrwq_scatter_base_p_f32): Likewise.\n+\t(__arm_vstrwq_scatter_offset_f32): Likewise.\n+\t(__arm_vstrwq_scatter_offset_p_f32): Likewise.\n+\t(__arm_vstrwq_scatter_shifted_offset_f32): Likewise.\n+\t(__arm_vstrwq_scatter_shifted_offset_p_f32): Likewise.\n+\t(vstrhq_scatter_offset): Define polymorphic variant.\n+\t(vstrhq_scatter_offset_p): Likewise.\n+\t(vstrhq_scatter_shifted_offset): Likewise.\n+\t(vstrhq_scatter_shifted_offset_p): Likewise.\n+\t(vstrwq_scatter_base): Likewise.\n+\t(vstrwq_scatter_base_p): Likewise.\n+\t(vstrwq_scatter_offset): Likewise.\n+\t(vstrwq_scatter_offset_p): Likewise.\n+\t(vstrwq_scatter_shifted_offset): Likewise.\n+\t(vstrwq_scatter_shifted_offset_p): Likewise.\n+\t(vstrdq_scatter_base_p): Likewise.\n+\t(vstrdq_scatter_base): Likewise.\n+\t(vstrdq_scatter_offset_p): Likewise.\n+\t(vstrdq_scatter_offset): Likewise.\n+\t(vstrdq_scatter_shifted_offset_p): Likewise.\n+\t(vstrdq_scatter_shifted_offset): Likewise.\n+\t* config/arm/arm_mve_builtins.def (STRSBS): Use builtin qualifier.\n+\t(STRSBS_P): Likewise.\n+\t(STRSBU): Likewise.\n+\t(STRSBU_P): Likewise.\n+\t(STRSS): Likewise.\n+\t(STRSS_P): Likewise.\n+\t(STRSU): Likewise.\n+\t(STRSU_P): Likewise.\n+\t* config/arm/constraints.md (Ri): Define.\n+\t* config/arm/mve.md (VSTRDSBQ): Define iterator.\n+\t(VSTRDSOQ): Likewise.\n+\t(VSTRDSSOQ): Likewise.\n+\t(VSTRWSOQ): Likewise.\n+\t(VSTRWSSOQ): Likewise.\n+\t(mve_vstrdq_scatter_base_p_<supf>v2di): Define RTL pattern.\n+\t(mve_vstrdq_scatter_base_<supf>v2di): Likewise.\n+\t(mve_vstrdq_scatter_offset_p_<supf>v2di): Likewise.\n+\t(mve_vstrdq_scatter_offset_<supf>v2di): Likewise.\n+\t(mve_vstrdq_scatter_shifted_offset_p_<supf>v2di): Likewise.\n+\t(mve_vstrdq_scatter_shifted_offset_<supf>v2di): Likewise.\n+\t(mve_vstrhq_scatter_offset_fv8hf): Likewise.\n+\t(mve_vstrhq_scatter_offset_p_fv8hf): Likewise.\n+\t(mve_vstrhq_scatter_shifted_offset_fv8hf): Likewise.\n+\t(mve_vstrhq_scatter_shifted_offset_p_fv8hf): Likewise.\n+\t(mve_vstrwq_scatter_base_fv4sf): Likewise.\n+\t(mve_vstrwq_scatter_base_p_fv4sf): Likewise.\n+\t(mve_vstrwq_scatter_offset_fv4sf): Likewise.\n+\t(mve_vstrwq_scatter_offset_p_fv4sf): Likewise.\n+\t(mve_vstrwq_scatter_offset_p_<supf>v4si): Likewise.\n+\t(mve_vstrwq_scatter_offset_<supf>v4si): Likewise.\n+\t(mve_vstrwq_scatter_shifted_offset_fv4sf): Likewise.\n+\t(mve_vstrwq_scatter_shifted_offset_p_fv4sf): Likewise.\n+\t(mve_vstrwq_scatter_shifted_offset_p_<supf>v4si): Likewise.\n+\t(mve_vstrwq_scatter_shifted_offset_<supf>v4si): Likewise.\n+\t* config/arm/predicates.md (Ri): Define predicate to check immediate\n+\tis the range +/-1016 and multiple of 8.\n+\n 2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "5ea42bd6a5bd98d5c77a0e7da3464ba6b431770b", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 502, "deletions": 0, "changes": 502, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -1868,6 +1868,36 @@ typedef struct { uint8x16_t val[4]; } uint8x16x4_t;\n #define vstrwq_p_f32(__addr, __value, __p) __arm_vstrwq_p_f32(__addr, __value, __p)\n #define vstrwq_p_s32(__addr, __value, __p) __arm_vstrwq_p_s32(__addr, __value, __p)\n #define vstrwq_p_u32(__addr, __value, __p) __arm_vstrwq_p_u32(__addr, __value, __p)\n+#define vstrdq_scatter_base_p_s64(__addr, __offset, __value, __p) __arm_vstrdq_scatter_base_p_s64(__addr, __offset, __value, __p)\n+#define vstrdq_scatter_base_p_u64(__addr, __offset, __value, __p) __arm_vstrdq_scatter_base_p_u64(__addr, __offset, __value, __p)\n+#define vstrdq_scatter_base_s64(__addr, __offset, __value) __arm_vstrdq_scatter_base_s64(__addr, __offset, __value)\n+#define vstrdq_scatter_base_u64(__addr, __offset, __value) __arm_vstrdq_scatter_base_u64(__addr, __offset, __value)\n+#define vstrdq_scatter_offset_p_s64(__base, __offset, __value, __p) __arm_vstrdq_scatter_offset_p_s64(__base, __offset, __value, __p)\n+#define vstrdq_scatter_offset_p_u64(__base, __offset, __value, __p) __arm_vstrdq_scatter_offset_p_u64(__base, __offset, __value, __p)\n+#define vstrdq_scatter_offset_s64(__base, __offset, __value) __arm_vstrdq_scatter_offset_s64(__base, __offset, __value)\n+#define vstrdq_scatter_offset_u64(__base, __offset, __value) __arm_vstrdq_scatter_offset_u64(__base, __offset, __value)\n+#define vstrdq_scatter_shifted_offset_p_s64(__base, __offset, __value, __p) __arm_vstrdq_scatter_shifted_offset_p_s64(__base, __offset, __value, __p)\n+#define vstrdq_scatter_shifted_offset_p_u64(__base, __offset, __value, __p) __arm_vstrdq_scatter_shifted_offset_p_u64(__base, __offset, __value, __p)\n+#define vstrdq_scatter_shifted_offset_s64(__base, __offset, __value) __arm_vstrdq_scatter_shifted_offset_s64(__base, __offset, __value)\n+#define vstrdq_scatter_shifted_offset_u64(__base, __offset, __value) __arm_vstrdq_scatter_shifted_offset_u64(__base, __offset, __value)\n+#define vstrhq_scatter_offset_f16(__base, __offset, __value) __arm_vstrhq_scatter_offset_f16(__base, __offset, __value)\n+#define vstrhq_scatter_offset_p_f16(__base, __offset, __value, __p) __arm_vstrhq_scatter_offset_p_f16(__base, __offset, __value, __p)\n+#define vstrhq_scatter_shifted_offset_f16(__base, __offset, __value) __arm_vstrhq_scatter_shifted_offset_f16(__base, __offset, __value)\n+#define vstrhq_scatter_shifted_offset_p_f16(__base, __offset, __value, __p) __arm_vstrhq_scatter_shifted_offset_p_f16(__base, __offset, __value, __p)\n+#define vstrwq_scatter_base_f32(__addr, __offset, __value) __arm_vstrwq_scatter_base_f32(__addr, __offset, __value)\n+#define vstrwq_scatter_base_p_f32(__addr, __offset, __value, __p) __arm_vstrwq_scatter_base_p_f32(__addr, __offset, __value, __p)\n+#define vstrwq_scatter_offset_f32(__base, __offset, __value) __arm_vstrwq_scatter_offset_f32(__base, __offset, __value)\n+#define vstrwq_scatter_offset_p_f32(__base, __offset, __value, __p) __arm_vstrwq_scatter_offset_p_f32(__base, __offset, __value, __p)\n+#define vstrwq_scatter_offset_p_s32(__base, __offset, __value, __p) __arm_vstrwq_scatter_offset_p_s32(__base, __offset, __value, __p)\n+#define vstrwq_scatter_offset_p_u32(__base, __offset, __value, __p) __arm_vstrwq_scatter_offset_p_u32(__base, __offset, __value, __p)\n+#define vstrwq_scatter_offset_s32(__base, __offset, __value) __arm_vstrwq_scatter_offset_s32(__base, __offset, __value)\n+#define vstrwq_scatter_offset_u32(__base, __offset, __value) __arm_vstrwq_scatter_offset_u32(__base, __offset, __value)\n+#define vstrwq_scatter_shifted_offset_f32(__base, __offset, __value) __arm_vstrwq_scatter_shifted_offset_f32(__base, __offset, __value)\n+#define vstrwq_scatter_shifted_offset_p_f32(__base, __offset, __value, __p) __arm_vstrwq_scatter_shifted_offset_p_f32(__base, __offset, __value, __p)\n+#define vstrwq_scatter_shifted_offset_p_s32(__base, __offset, __value, __p) __arm_vstrwq_scatter_shifted_offset_p_s32(__base, __offset, __value, __p)\n+#define vstrwq_scatter_shifted_offset_p_u32(__base, __offset, __value, __p) __arm_vstrwq_scatter_shifted_offset_p_u32(__base, __offset, __value, __p)\n+#define vstrwq_scatter_shifted_offset_s32(__base, __offset, __value) __arm_vstrwq_scatter_shifted_offset_s32(__base, __offset, __value)\n+#define vstrwq_scatter_shifted_offset_u32(__base, __offset, __value) __arm_vstrwq_scatter_shifted_offset_u32(__base, __offset, __value)\n #endif\n \n __extension__ extern __inline void\n@@ -12171,6 +12201,146 @@ __arm_vstrwq_p_u32 (uint32_t * __addr, uint32x4_t __value, mve_pred16_t __p)\n   __builtin_mve_vstrwq_p_uv4si ((__builtin_neon_si *) __addr, __value, __p);\n }\n \n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrdq_scatter_base_p_s64 (uint64x2_t __addr, const int __offset, int64x2_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrdq_scatter_base_p_sv2di (__addr, __offset, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrdq_scatter_base_p_u64 (uint64x2_t __addr, const int __offset, uint64x2_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrdq_scatter_base_p_uv2di (__addr, __offset, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrdq_scatter_base_s64 (uint64x2_t __addr, const int __offset, int64x2_t __value)\n+{\n+  __builtin_mve_vstrdq_scatter_base_sv2di (__addr, __offset, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrdq_scatter_base_u64 (uint64x2_t __addr, const int __offset, uint64x2_t __value)\n+{\n+  __builtin_mve_vstrdq_scatter_base_uv2di (__addr, __offset, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrdq_scatter_offset_p_s64 (int64_t * __base, uint64x2_t __offset, int64x2_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrdq_scatter_offset_p_sv2di (__base, __offset, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrdq_scatter_offset_p_u64 (uint64_t * __base, uint64x2_t __offset, uint64x2_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrdq_scatter_offset_p_uv2di (__base, __offset, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrdq_scatter_offset_s64 (int64_t * __base, uint64x2_t __offset, int64x2_t __value)\n+{\n+  __builtin_mve_vstrdq_scatter_offset_sv2di (__base, __offset, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrdq_scatter_offset_u64 (uint64_t * __base, uint64x2_t __offset, uint64x2_t __value)\n+{\n+  __builtin_mve_vstrdq_scatter_offset_uv2di (__base, __offset, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrdq_scatter_shifted_offset_p_s64 (int64_t * __base, uint64x2_t __offset, int64x2_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrdq_scatter_shifted_offset_p_sv2di (__base, __offset, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrdq_scatter_shifted_offset_p_u64 (uint64_t * __base, uint64x2_t __offset, uint64x2_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrdq_scatter_shifted_offset_p_uv2di (__base, __offset, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrdq_scatter_shifted_offset_s64 (int64_t * __base, uint64x2_t __offset, int64x2_t __value)\n+{\n+  __builtin_mve_vstrdq_scatter_shifted_offset_sv2di (__base, __offset, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrdq_scatter_shifted_offset_u64 (uint64_t * __base, uint64x2_t __offset, uint64x2_t __value)\n+{\n+  __builtin_mve_vstrdq_scatter_shifted_offset_uv2di (__base, __offset, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrwq_scatter_offset_p_s32 (int32_t * __base, uint32x4_t __offset, int32x4_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrwq_scatter_offset_p_sv4si ((__builtin_neon_si *) __base, __offset, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrwq_scatter_offset_p_u32 (uint32_t * __base, uint32x4_t __offset, uint32x4_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrwq_scatter_offset_p_uv4si ((__builtin_neon_si *) __base, __offset, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrwq_scatter_offset_s32 (int32_t * __base, uint32x4_t __offset, int32x4_t __value)\n+{\n+  __builtin_mve_vstrwq_scatter_offset_sv4si ((__builtin_neon_si *) __base, __offset, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrwq_scatter_offset_u32 (uint32_t * __base, uint32x4_t __offset, uint32x4_t __value)\n+{\n+  __builtin_mve_vstrwq_scatter_offset_uv4si ((__builtin_neon_si *) __base, __offset, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrwq_scatter_shifted_offset_p_s32 (int32_t * __base, uint32x4_t __offset, int32x4_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrwq_scatter_shifted_offset_p_sv4si ((__builtin_neon_si *) __base, __offset, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrwq_scatter_shifted_offset_p_u32 (uint32_t * __base, uint32x4_t __offset, uint32x4_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrwq_scatter_shifted_offset_p_uv4si ((__builtin_neon_si *) __base, __offset, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrwq_scatter_shifted_offset_s32 (int32_t * __base, uint32x4_t __offset, int32x4_t __value)\n+{\n+  __builtin_mve_vstrwq_scatter_shifted_offset_sv4si ((__builtin_neon_si *) __base, __offset, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrwq_scatter_shifted_offset_u32 (uint32_t * __base, uint32x4_t __offset, uint32x4_t __value)\n+{\n+  __builtin_mve_vstrwq_scatter_shifted_offset_uv4si ((__builtin_neon_si *) __base, __offset, __value);\n+}\n+\n #if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n \n __extension__ extern __inline void\n@@ -14467,6 +14637,76 @@ __arm_vstrhq_p_f16 (float16_t * __addr, float16x8_t __value, mve_pred16_t __p)\n   __builtin_mve_vstrhq_p_fv8hf (__addr, __value, __p);\n }\n \n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrhq_scatter_offset_f16 (float16_t * __base, uint16x8_t __offset, float16x8_t __value)\n+{\n+  __builtin_mve_vstrhq_scatter_offset_fv8hf (__base, __offset, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrhq_scatter_offset_p_f16 (float16_t * __base, uint16x8_t __offset, float16x8_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrhq_scatter_offset_p_fv8hf (__base, __offset, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrhq_scatter_shifted_offset_f16 (float16_t * __base, uint16x8_t __offset, float16x8_t __value)\n+{\n+  __builtin_mve_vstrhq_scatter_shifted_offset_fv8hf (__base, __offset, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrhq_scatter_shifted_offset_p_f16 (float16_t * __base, uint16x8_t __offset, float16x8_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrhq_scatter_shifted_offset_p_fv8hf (__base, __offset, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrwq_scatter_base_f32 (uint32x4_t __addr, const int __offset, float32x4_t __value)\n+{\n+  __builtin_mve_vstrwq_scatter_base_fv4sf (__addr, __offset, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrwq_scatter_base_p_f32 (uint32x4_t __addr, const int __offset, float32x4_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrwq_scatter_base_p_fv4sf (__addr, __offset, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrwq_scatter_offset_f32 (float32_t * __base, uint32x4_t __offset, float32x4_t __value)\n+{\n+  __builtin_mve_vstrwq_scatter_offset_fv4sf (__base, __offset, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrwq_scatter_offset_p_f32 (float32_t * __base, uint32x4_t __offset, float32x4_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrwq_scatter_offset_p_fv4sf (__base, __offset, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrwq_scatter_shifted_offset_f32 (float32_t * __base, uint32x4_t __offset, float32x4_t __value)\n+{\n+  __builtin_mve_vstrwq_scatter_shifted_offset_fv4sf (__base, __offset, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrwq_scatter_shifted_offset_p_f32 (float32_t * __base, uint32x4_t __offset, float32x4_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrwq_scatter_shifted_offset_p_fv4sf (__base, __offset, __value, __p);\n+}\n+\n #endif\n \n enum {\n@@ -17107,6 +17347,136 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vstrwq_u32 (__ARM_mve_coerce(__p0, uint32_t *), __ARM_mve_coerce(__p1, uint32x4_t)), \\\n   int (*)[__ARM_mve_type_float32_t_ptr][__ARM_mve_type_float32x4_t]: __arm_vstrwq_f32 (__ARM_mve_coerce(__p0, float32_t *), __ARM_mve_coerce(__p1, float32x4_t)));})\n \n+#define vstrhq_scatter_offset(p0,p1,p2) __arm_vstrhq_scatter_offset(p0,p1,p2)\n+#define __arm_vstrhq_scatter_offset(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_int16x8_t]: __arm_vstrhq_scatter_offset_s16 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_int32x4_t]: __arm_vstrhq_scatter_offset_s32 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vstrhq_scatter_offset_u16 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vstrhq_scatter_offset_u32 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_float16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_float16x8_t]: __arm_vstrhq_scatter_offset_f16 (__ARM_mve_coerce(__p0, float16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, float16x8_t)));})\n+\n+#define vstrhq_scatter_offset_p(p0,p1,p2,p3) __arm_vstrhq_scatter_offset_p(p0,p1,p2,p3)\n+#define __arm_vstrhq_scatter_offset_p(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_int16x8_t]: __arm_vstrhq_scatter_offset_p_s16 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, int16x8_t), p3), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_int32x4_t]: __arm_vstrhq_scatter_offset_p_s32 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, int32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vstrhq_scatter_offset_p_u16 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16x8_t), p3), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vstrhq_scatter_offset_p_u32 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_float16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_float16x8_t]: __arm_vstrhq_scatter_offset_p_f16 (__ARM_mve_coerce(__p0, float16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, float16x8_t), p3));})\n+\n+#define vstrhq_scatter_shifted_offset(p0,p1,p2) __arm_vstrhq_scatter_shifted_offset(p0,p1,p2)\n+#define __arm_vstrhq_scatter_shifted_offset(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_int16x8_t]: __arm_vstrhq_scatter_shifted_offset_s16 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_int32x4_t]: __arm_vstrhq_scatter_shifted_offset_s32 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vstrhq_scatter_shifted_offset_u16 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vstrhq_scatter_shifted_offset_u32 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_float16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_float16x8_t]: __arm_vstrhq_scatter_shifted_offset_f16 (__ARM_mve_coerce(__p0, float16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, float16x8_t)));})\n+\n+#define vstrhq_scatter_shifted_offset_p(p0,p1,p2,p3) __arm_vstrhq_scatter_shifted_offset_p(p0,p1,p2,p3)\n+#define __arm_vstrhq_scatter_shifted_offset_p(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_int16x8_t]: __arm_vstrhq_scatter_shifted_offset_p_s16 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, int16x8_t), p3), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_int32x4_t]: __arm_vstrhq_scatter_shifted_offset_p_s32 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, int32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vstrhq_scatter_shifted_offset_p_u16 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16x8_t), p3), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vstrhq_scatter_shifted_offset_p_u32 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_float16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_float16x8_t]: __arm_vstrhq_scatter_shifted_offset_p_f16 (__ARM_mve_coerce(__p0, float16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, float16x8_t), p3));})\n+\n+#define vstrwq_scatter_base(p0,p1,p2) __arm_vstrwq_scatter_base(p0,p1,p2)\n+#define __arm_vstrwq_scatter_base(p0,p1,p2) ({ __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vstrwq_scatter_base_s32 (p0, p1, __ARM_mve_coerce(__p2, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vstrwq_scatter_base_u32 (p0, p1, __ARM_mve_coerce(__p2, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_float32x4_t]: __arm_vstrwq_scatter_base_f32 (p0, p1, __ARM_mve_coerce(__p2, float32x4_t)));})\n+\n+#define vstrwq_scatter_base_p(p0,p1,p2,p3) __arm_vstrwq_scatter_base_p(p0,p1,p2,p3)\n+#define __arm_vstrwq_scatter_base_p(p0,p1,p2,p3) ({ __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vstrwq_scatter_base_p_s32(p0, p1, __ARM_mve_coerce(__p2, int32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vstrwq_scatter_base_p_u32(p0, p1, __ARM_mve_coerce(__p2, uint32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_float32x4_t]: __arm_vstrwq_scatter_base_p_f32(p0, p1, __ARM_mve_coerce(__p2, float32x4_t), p3));})\n+\n+#define vstrwq_scatter_offset(p0,p1,p2) __arm_vstrwq_scatter_offset(p0,p1,p2)\n+#define __arm_vstrwq_scatter_offset(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int32_t_ptr][__ARM_mve_type_int32x4_t]: __arm_vstrwq_scatter_offset_s32 (__ARM_mve_coerce(__p0, int32_t *), __p1, __ARM_mve_coerce(__p2, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vstrwq_scatter_offset_u32 (__ARM_mve_coerce(__p0, uint32_t *), __p1, __ARM_mve_coerce(__p2, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_float32_t_ptr][__ARM_mve_type_float32x4_t]: __arm_vstrwq_scatter_offset_f32 (__ARM_mve_coerce(__p0, float32_t *), __p1, __ARM_mve_coerce(__p2, float32x4_t)));})\n+\n+#define vstrwq_scatter_offset_p(p0,p1,p2,p3) __arm_vstrwq_scatter_offset_p(p0,p1,p2,p3)\n+#define __arm_vstrwq_scatter_offset_p(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int32_t_ptr][__ARM_mve_type_int32x4_t]: __arm_vstrwq_scatter_offset_p_s32 (__ARM_mve_coerce(__p0, int32_t *), __p1, __ARM_mve_coerce(__p2, int32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vstrwq_scatter_offset_p_u32 (__ARM_mve_coerce(__p0, uint32_t *), __p1, __ARM_mve_coerce(__p2, uint32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_float32_t_ptr][__ARM_mve_type_float32x4_t]: __arm_vstrwq_scatter_offset_p_f32 (__ARM_mve_coerce(__p0, float32_t *), __p1, __ARM_mve_coerce(__p2, float32x4_t), p3));})\n+\n+#define vstrwq_scatter_offset_p(p0,p1,p2,p3) __arm_vstrwq_scatter_offset_p(p0,p1,p2,p3)\n+#define __arm_vstrwq_scatter_offset_p(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int32_t_ptr][__ARM_mve_type_int32x4_t]: __arm_vstrwq_scatter_offset_p_s32 (__ARM_mve_coerce(__p0, int32_t *), __p1, __ARM_mve_coerce(__p2, int32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vstrwq_scatter_offset_p_u32 (__ARM_mve_coerce(__p0, uint32_t *), __p1, __ARM_mve_coerce(__p2, uint32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_float32_t_ptr][__ARM_mve_type_float32x4_t]: __arm_vstrwq_scatter_offset_p_f32 (__ARM_mve_coerce(__p0, float32_t *), __p1, __ARM_mve_coerce(__p2, float32x4_t), p3));})\n+\n+#define vstrwq_scatter_offset(p0,p1,p2) __arm_vstrwq_scatter_offset(p0,p1,p2)\n+#define __arm_vstrwq_scatter_offset(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int32_t_ptr][__ARM_mve_type_int32x4_t]: __arm_vstrwq_scatter_offset_s32 (__ARM_mve_coerce(__p0, int32_t *), __p1, __ARM_mve_coerce(__p2, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vstrwq_scatter_offset_u32 (__ARM_mve_coerce(__p0, uint32_t *), __p1, __ARM_mve_coerce(__p2, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_float32_t_ptr][__ARM_mve_type_float32x4_t]: __arm_vstrwq_scatter_offset_f32 (__ARM_mve_coerce(__p0, float32_t *), __p1, __ARM_mve_coerce(__p2, float32x4_t)));})\n+\n+#define vstrwq_scatter_shifted_offset(p0,p1,p2) __arm_vstrwq_scatter_shifted_offset(p0,p1,p2)\n+#define __arm_vstrwq_scatter_shifted_offset(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int32_t_ptr][__ARM_mve_type_int32x4_t]: __arm_vstrwq_scatter_shifted_offset_s32 (__ARM_mve_coerce(__p0, int32_t *), __p1, __ARM_mve_coerce(__p2, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vstrwq_scatter_shifted_offset_u32 (__ARM_mve_coerce(__p0, uint32_t *), __p1, __ARM_mve_coerce(__p2, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_float32_t_ptr][__ARM_mve_type_float32x4_t]: __arm_vstrwq_scatter_shifted_offset_f32 (__ARM_mve_coerce(__p0, float32_t *), __p1, __ARM_mve_coerce(__p2, float32x4_t)));})\n+\n+#define vstrwq_scatter_shifted_offset_p(p0,p1,p2,p3) __arm_vstrwq_scatter_shifted_offset_p(p0,p1,p2,p3)\n+#define __arm_vstrwq_scatter_shifted_offset_p(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int32_t_ptr][__ARM_mve_type_int32x4_t]: __arm_vstrwq_scatter_shifted_offset_p_s32 (__ARM_mve_coerce(__p0, int32_t *), __p1, __ARM_mve_coerce(__p2, int32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vstrwq_scatter_shifted_offset_p_u32 (__ARM_mve_coerce(__p0, uint32_t *), __p1, __ARM_mve_coerce(__p2, uint32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_float32_t_ptr][__ARM_mve_type_float32x4_t]: __arm_vstrwq_scatter_shifted_offset_p_f32 (__ARM_mve_coerce(__p0, float32_t *), __p1, __ARM_mve_coerce(__p2, float32x4_t), p3));})\n+\n+#define vstrwq_scatter_shifted_offset_p(p0,p1,p2,p3) __arm_vstrwq_scatter_shifted_offset_p(p0,p1,p2,p3)\n+#define __arm_vstrwq_scatter_shifted_offset_p(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int32_t_ptr][__ARM_mve_type_int32x4_t]: __arm_vstrwq_scatter_shifted_offset_p_s32 (__ARM_mve_coerce(__p0, int32_t *), __p1, __ARM_mve_coerce(__p2, int32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vstrwq_scatter_shifted_offset_p_u32 (__ARM_mve_coerce(__p0, uint32_t *), __p1, __ARM_mve_coerce(__p2, uint32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_float32_t_ptr][__ARM_mve_type_float32x4_t]: __arm_vstrwq_scatter_shifted_offset_p_f32 (__ARM_mve_coerce(__p0, float32_t *), __p1, __ARM_mve_coerce(__p2, float32x4_t), p3));})\n+\n+#define vstrwq_scatter_shifted_offset(p0,p1,p2) __arm_vstrwq_scatter_shifted_offset(p0,p1,p2)\n+#define __arm_vstrwq_scatter_shifted_offset(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int32_t_ptr][__ARM_mve_type_int32x4_t]: __arm_vstrwq_scatter_shifted_offset_s32 (__ARM_mve_coerce(__p0, int32_t *), __p1, __ARM_mve_coerce(__p2, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vstrwq_scatter_shifted_offset_u32 (__ARM_mve_coerce(__p0, uint32_t *), __p1, __ARM_mve_coerce(__p2, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_float32_t_ptr][__ARM_mve_type_float32x4_t]: __arm_vstrwq_scatter_shifted_offset_f32 (__ARM_mve_coerce(__p0, float32_t *), __p1, __ARM_mve_coerce(__p2, float32x4_t)));})\n+\n #else /* MVE Integer.  */\n \n #define vst4q(p0,p1) __arm_vst4q(p0,p1)\n@@ -19357,6 +19727,138 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_int32_t_ptr][__ARM_mve_type_int32x4_t]: __arm_vstrwq_p_s32 (__ARM_mve_coerce(__p0, int32_t *), __ARM_mve_coerce(__p1, int32x4_t), p2), \\\n   int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vstrwq_p_u32 (__ARM_mve_coerce(__p0, uint32_t *), __ARM_mve_coerce(__p1, uint32x4_t), p2));})\n \n+#define vstrdq_scatter_base_p(p0,p1,p2,p3) __arm_vstrdq_scatter_base_p(p0,p1,p2,p3)\n+#define __arm_vstrdq_scatter_base_p(p0,p1,p2,p3) ({ __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int64x2_t]: __arm_vstrdq_scatter_base_p_s64 (p0, p1, __ARM_mve_coerce(__p2, int64x2_t), p3), \\\n+  int (*)[__ARM_mve_type_uint64x2_t]: __arm_vstrdq_scatter_base_p_u64 (p0, p1, __ARM_mve_coerce(__p2, uint64x2_t), p3));})\n+\n+#define vstrdq_scatter_base(p0,p1,p2) __arm_vstrdq_scatter_base(p0,p1,p2)\n+#define __arm_vstrdq_scatter_base(p0,p1,p2) ({ __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int64x2_t]: __arm_vstrdq_scatter_base_s64 (p0, p1, __ARM_mve_coerce(__p2, int64x2_t)), \\\n+  int (*)[__ARM_mve_type_uint64x2_t]: __arm_vstrdq_scatter_base_u64 (p0, p1, __ARM_mve_coerce(__p2, uint64x2_t)));})\n+\n+#define vstrdq_scatter_offset_p(p0,p1,p2,p3) __arm_vstrdq_scatter_offset_p(p0,p1,p2,p3)\n+#define __arm_vstrdq_scatter_offset_p(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int64_t_ptr][__ARM_mve_type_int64x2_t]: __arm_vstrdq_scatter_offset_p_s64 (__ARM_mve_coerce(__p0, int64_t *), __p1, __ARM_mve_coerce(__p2, int64x2_t), p3), \\\n+  int (*)[__ARM_mve_type_uint64_t_ptr][__ARM_mve_type_uint64x2_t]: __arm_vstrdq_scatter_offset_p_u64 (__ARM_mve_coerce(__p0, uint64_t *), __p1, __ARM_mve_coerce(__p2, uint64x2_t), p3));})\n+\n+#define vstrdq_scatter_offset(p0,p1,p2) __arm_vstrdq_scatter_offset(p0,p1,p2)\n+#define __arm_vstrdq_scatter_offset(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int64_t_ptr][__ARM_mve_type_int64x2_t]: __arm_vstrdq_scatter_offset_s64 (__ARM_mve_coerce(__p0, int64_t *), __p1, __ARM_mve_coerce(__p2, int64x2_t)), \\\n+  int (*)[__ARM_mve_type_uint64_t_ptr][__ARM_mve_type_uint64x2_t]: __arm_vstrdq_scatter_offset_u64 (__ARM_mve_coerce(__p0, uint64_t *), __p1, __ARM_mve_coerce(__p2, uint64x2_t)));})\n+\n+#define vstrdq_scatter_shifted_offset_p(p0,p1,p2,p3) __arm_vstrdq_scatter_shifted_offset_p(p0,p1,p2,p3)\n+#define __arm_vstrdq_scatter_shifted_offset_p(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int64_t_ptr][__ARM_mve_type_int64x2_t]: __arm_vstrdq_scatter_shifted_offset_p_s64 (__ARM_mve_coerce(__p0, int64_t *), __p1, __ARM_mve_coerce(__p2, int64x2_t), p3), \\\n+  int (*)[__ARM_mve_type_uint64_t_ptr][__ARM_mve_type_uint64x2_t]: __arm_vstrdq_scatter_shifted_offset_p_u64 (__ARM_mve_coerce(__p0, uint64_t *), __p1, __ARM_mve_coerce(__p2, uint64x2_t), p3));})\n+\n+#define vstrdq_scatter_shifted_offset(p0,p1,p2) __arm_vstrdq_scatter_shifted_offset(p0,p1,p2)\n+#define __arm_vstrdq_scatter_shifted_offset(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int64_t_ptr][__ARM_mve_type_int64x2_t]: __arm_vstrdq_scatter_shifted_offset_s64 (__ARM_mve_coerce(__p0, int64_t *), __p1, __ARM_mve_coerce(__p2, int64x2_t)), \\\n+  int (*)[__ARM_mve_type_uint64_t_ptr][__ARM_mve_type_uint64x2_t]: __arm_vstrdq_scatter_shifted_offset_u64 (__ARM_mve_coerce(__p0, uint64_t *), __p1, __ARM_mve_coerce(__p2, uint64x2_t)));})\n+\n+#define vstrhq_scatter_offset(p0,p1,p2) __arm_vstrhq_scatter_offset(p0,p1,p2)\n+#define __arm_vstrhq_scatter_offset(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_int16x8_t]: __arm_vstrhq_scatter_offset_s16 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_int32x4_t]: __arm_vstrhq_scatter_offset_s32 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vstrhq_scatter_offset_u16 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vstrhq_scatter_offset_u32 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32x4_t)));})\n+\n+#define vstrhq_scatter_offset_p(p0,p1,p2,p3) __arm_vstrhq_scatter_offset_p(p0,p1,p2,p3)\n+#define __arm_vstrhq_scatter_offset_p(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_int16x8_t]: __arm_vstrhq_scatter_offset_p_s16 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, int16x8_t), p3), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_int32x4_t]: __arm_vstrhq_scatter_offset_p_s32 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, int32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vstrhq_scatter_offset_p_u16 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16x8_t), p3), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vstrhq_scatter_offset_p_u32 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32x4_t), p3));})\n+\n+#define vstrhq_scatter_shifted_offset(p0,p1,p2) __arm_vstrhq_scatter_shifted_offset(p0,p1,p2)\n+#define __arm_vstrhq_scatter_shifted_offset(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_int16x8_t]: __arm_vstrhq_scatter_shifted_offset_s16 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_int32x4_t]: __arm_vstrhq_scatter_shifted_offset_s32 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vstrhq_scatter_shifted_offset_u16 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vstrhq_scatter_shifted_offset_u32 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32x4_t)));})\n+\n+#define vstrhq_scatter_shifted_offset_p(p0,p1,p2,p3) __arm_vstrhq_scatter_shifted_offset_p(p0,p1,p2,p3)\n+#define __arm_vstrhq_scatter_shifted_offset_p(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_int16x8_t]: __arm_vstrhq_scatter_shifted_offset_p_s16 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, int16x8_t), p3), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_int32x4_t]: __arm_vstrhq_scatter_shifted_offset_p_s32 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, int32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vstrhq_scatter_shifted_offset_p_u16 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16x8_t), p3), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vstrhq_scatter_shifted_offset_p_u32 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32x4_t), p3));})\n+\n+#define vstrwq_scatter_offset(p0,p1,p2) __arm_vstrwq_scatter_offset(p0,p1,p2)\n+#define __arm_vstrwq_scatter_offset(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int32_t_ptr][__ARM_mve_type_int32x4_t]: __arm_vstrwq_scatter_offset_s32 (__ARM_mve_coerce(__p0, int32_t *), __p1, __ARM_mve_coerce(__p2, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vstrwq_scatter_offset_u32 (__ARM_mve_coerce(__p0, uint32_t *), __p1, __ARM_mve_coerce(__p2, uint32x4_t)));})\n+\n+#define vstrwq_scatter_offset_p(p0,p1,p2,p3) __arm_vstrwq_scatter_offset_p(p0,p1,p2,p3)\n+#define __arm_vstrwq_scatter_offset_p(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int32_t_ptr][__ARM_mve_type_int32x4_t]: __arm_vstrwq_scatter_offset_p_s32 (__ARM_mve_coerce(__p0, int32_t *), __p1, __ARM_mve_coerce(__p2, int32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vstrwq_scatter_offset_p_u32 (__ARM_mve_coerce(__p0, uint32_t *), __p1, __ARM_mve_coerce(__p2, uint32x4_t)));})\n+\n+#define vstrwq_scatter_offset_p(p0,p1,p2,p3) __arm_vstrwq_scatter_offset_p(p0,p1,p2,p3)\n+#define __arm_vstrwq_scatter_offset_p(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int32_t_ptr][__ARM_mve_type_int32x4_t]: __arm_vstrwq_scatter_offset_p_s32 (__ARM_mve_coerce(__p0, int32_t *), __p1, __ARM_mve_coerce(__p2, int32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vstrwq_scatter_offset_p_u32 (__ARM_mve_coerce(__p0, uint32_t *), __p1, __ARM_mve_coerce(__p2, uint32x4_t), p3));})\n+\n+#define vstrwq_scatter_offset(p0,p1,p2) __arm_vstrwq_scatter_offset(p0,p1,p2)\n+#define __arm_vstrwq_scatter_offset(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int32_t_ptr][__ARM_mve_type_int32x4_t]: __arm_vstrwq_scatter_offset_s32 (__ARM_mve_coerce(__p0, int32_t *), __p1, __ARM_mve_coerce(__p2, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vstrwq_scatter_offset_u32 (__ARM_mve_coerce(__p0, uint32_t *), __p1, __ARM_mve_coerce(__p2, uint32x4_t)));})\n+\n+#define vstrwq_scatter_shifted_offset(p0,p1,p2) __arm_vstrwq_scatter_shifted_offset(p0,p1,p2)\n+#define __arm_vstrwq_scatter_shifted_offset(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int32_t_ptr][__ARM_mve_type_int32x4_t]: __arm_vstrwq_scatter_shifted_offset_s32 (__ARM_mve_coerce(__p0, int32_t *), __p1, __ARM_mve_coerce(__p2, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vstrwq_scatter_shifted_offset_u32 (__ARM_mve_coerce(__p0, uint32_t *), __p1, __ARM_mve_coerce(__p2, uint32x4_t)));})\n+\n+#define vstrwq_scatter_shifted_offset_p(p0,p1,p2,p3) __arm_vstrwq_scatter_shifted_offset_p(p0,p1,p2,p3)\n+#define __arm_vstrwq_scatter_shifted_offset_p(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int32_t_ptr][__ARM_mve_type_int32x4_t]: __arm_vstrwq_scatter_shifted_offset_p_s32 (__ARM_mve_coerce(__p0, int32_t *), __p1, __ARM_mve_coerce(__p2, int32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vstrwq_scatter_shifted_offset_p_u32 (__ARM_mve_coerce(__p0, uint32_t *), __p1, __ARM_mve_coerce(__p2, uint32x4_t), p3));})\n+\n #endif /* MVE Integer.  */\n \n #define vldrdq_gather_offset(p0,p1) __arm_vldrdq_gather_offset(p0,p1)"}, {"sha": "144547fbdd8a2182cc8319e0061972ce830f4c50", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -785,3 +785,33 @@ VAR1 (STRU, vstrwq_u, v4si)\n VAR1 (STRS_P, vstrwq_p_f, v4sf)\n VAR1 (STRS_P, vstrwq_p_s, v4si)\n VAR1 (STRU_P, vstrwq_p_u, v4si)\n+VAR1 (STRSBS, vstrdq_scatter_base_s, v2di)\n+VAR1 (STRSBS, vstrwq_scatter_base_f, v4sf)\n+VAR1 (STRSBS_P, vstrdq_scatter_base_p_s, v2di)\n+VAR1 (STRSBS_P, vstrwq_scatter_base_p_f, v4sf)\n+VAR1 (STRSBU, vstrdq_scatter_base_u, v2di)\n+VAR1 (STRSBU_P, vstrdq_scatter_base_p_u, v2di)\n+VAR1 (STRSS, vstrdq_scatter_offset_s, v2di)\n+VAR1 (STRSS, vstrdq_scatter_shifted_offset_s, v2di)\n+VAR1 (STRSS, vstrhq_scatter_offset_f, v8hf)\n+VAR1 (STRSS, vstrhq_scatter_shifted_offset_f, v8hf)\n+VAR1 (STRSS, vstrwq_scatter_offset_f, v4sf)\n+VAR1 (STRSS, vstrwq_scatter_offset_s, v4si)\n+VAR1 (STRSS, vstrwq_scatter_shifted_offset_f, v4sf)\n+VAR1 (STRSS, vstrwq_scatter_shifted_offset_s, v4si)\n+VAR1 (STRSS_P, vstrdq_scatter_offset_p_s, v2di)\n+VAR1 (STRSS_P, vstrdq_scatter_shifted_offset_p_s, v2di)\n+VAR1 (STRSS_P, vstrhq_scatter_offset_p_f, v8hf)\n+VAR1 (STRSS_P, vstrhq_scatter_shifted_offset_p_f, v8hf)\n+VAR1 (STRSS_P, vstrwq_scatter_offset_p_f, v4sf)\n+VAR1 (STRSS_P, vstrwq_scatter_offset_p_s, v4si)\n+VAR1 (STRSS_P, vstrwq_scatter_shifted_offset_p_f, v4sf)\n+VAR1 (STRSS_P, vstrwq_scatter_shifted_offset_p_s, v4si)\n+VAR1 (STRSU, vstrdq_scatter_offset_u, v2di)\n+VAR1 (STRSU, vstrdq_scatter_shifted_offset_u, v2di)\n+VAR1 (STRSU, vstrwq_scatter_offset_u, v4si)\n+VAR1 (STRSU, vstrwq_scatter_shifted_offset_u, v4si)\n+VAR1 (STRSU_P, vstrdq_scatter_offset_p_u, v2di)\n+VAR1 (STRSU_P, vstrdq_scatter_shifted_offset_p_u, v2di)\n+VAR1 (STRSU_P, vstrwq_scatter_offset_p_u, v4si)\n+VAR1 (STRSU_P, vstrwq_scatter_shifted_offset_p_u, v4si)"}, {"sha": "41a85e2713b59f75f0b191b6be03a7ac8f6e321e", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -35,7 +35,7 @@\n ;;\t\t\t Dt, Dp, Dz, Tu\n ;; in Thumb-1 state: Pa, Pb, Pc, Pd, Pe\n ;; in Thumb-2 state: Ha, Pj, PJ, Ps, Pt, Pu, Pv, Pw, Px, Py, Pz, Rd, Rf, Rb, Ra,\n-;;\t\t     Rg\n+;;\t\t     Rg, Ri\n ;; in all states: Pf, Pg\n \n ;; The following memory constraints have been used:\n@@ -90,6 +90,10 @@\n        (match_test \"TARGET_HAVE_MVE && ((ival == 1) || (ival == 2)\n \t\t\t\t       || (ival == 4) || (ival == 8))\")))\n \n+;; True if the immediate is multiple of 8 and in range of -/+ 1016 for MVE.\n+(define_predicate \"mve_vldrd_immediate\"\n+  (match_test \"satisfies_constraint_Ri (op)\"))\n+\n (define_register_constraint \"t\" \"TARGET_32BIT ? VFP_LO_REGS : NO_REGS\"\n  \"The VFP registers @code{s0}-@code{s31}.\")\n "}, {"sha": "5667882e941bac30d5e89b0ff866948d06bd3d5a", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 449, "deletions": 2, "changes": 451, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -203,7 +203,11 @@\n \t\t\t VLDRWQGO_S VLDRWQGO_U VLDRWQGSO_F VLDRWQGSO_S\n \t\t\t VLDRWQGSO_U VSTRHQ_F VST1Q_S VST1Q_U VSTRHQSO_S\n \t\t\t VSTRHQSO_U VSTRHQSSO_S VSTRHQSSO_U VSTRHQ_S\n-\t\t\t VSTRHQ_U VSTRWQ_S VSTRWQ_U VSTRWQ_F VST1Q_F])\n+\t\t\t VSTRHQ_U VSTRWQ_S VSTRWQ_U VSTRWQ_F VST1Q_F VSTRDQSB_S\n+\t\t\t VSTRDQSB_U VSTRDQSO_S VSTRDQSO_U VSTRDQSSO_S\n+\t\t\t VSTRDQSSO_U VSTRWQSO_S VSTRWQSO_U VSTRWQSSO_S\n+\t\t\t VSTRWQSSO_U VSTRHQSO_F VSTRHQSSO_F VSTRWQSB_F\n+\t\t\t VSTRWQSO_F VSTRWQSSO_F])\n \n (define_mode_attr MVE_CNVT [(V8HI \"V8HF\") (V4SI \"V4SF\") (V8HF \"V8HI\")\n \t\t\t    (V4SF \"V4SI\")])\n@@ -368,7 +372,11 @@\n \t\t       (VLDRWQGSO_S \"s\") (VLDRWQGSO_U \"u\") (VST1Q_S \"s\")\n \t\t       (VST1Q_U \"u\") (VSTRHQSO_S \"s\") (VSTRHQSO_U \"u\")\n \t\t       (VSTRHQSSO_S \"s\") (VSTRHQSSO_U \"u\") (VSTRHQ_S \"s\")\n-\t\t       (VSTRHQ_U \"u\") (VSTRWQ_S \"s\") (VSTRWQ_U \"u\")])\n+\t\t       (VSTRHQ_U \"u\") (VSTRWQ_S \"s\") (VSTRWQ_U \"u\")\n+\t\t       (VSTRDQSB_S \"s\") (VSTRDQSB_U \"u\") (VSTRDQSO_S \"s\")\n+\t\t       (VSTRDQSO_U \"u\") (VSTRDQSSO_S \"s\") (VSTRDQSSO_U \"u\")\n+\t\t       (VSTRWQSO_U \"u\") (VSTRWQSO_S \"s\") (VSTRWQSSO_U \"u\")\n+\t\t       (VSTRWQSSO_S \"s\")])\n \n (define_int_attr mode1 [(VCTP8Q \"8\") (VCTP16Q \"16\") (VCTP32Q \"32\")\n \t\t\t(VCTP64Q \"64\") (VCTP8Q_M \"8\") (VCTP16Q_M \"16\")\n@@ -612,6 +620,11 @@\n (define_int_iterator VSTRHSSOQ [VSTRHQSSO_S VSTRHQSSO_U])\n (define_int_iterator VSTRHQ [VSTRHQ_S VSTRHQ_U])\n (define_int_iterator VSTRWQ [VSTRWQ_S VSTRWQ_U])\n+(define_int_iterator VSTRDSBQ [VSTRDQSB_S VSTRDQSB_U])\n+(define_int_iterator VSTRDSOQ [VSTRDQSO_S VSTRDQSO_U])\n+(define_int_iterator VSTRDSSOQ [VSTRDQSSO_S VSTRDQSSO_U])\n+(define_int_iterator VSTRWSOQ [VSTRWQSO_S VSTRWQSO_U])\n+(define_int_iterator VSTRWSSOQ [VSTRWQSSO_S VSTRWQSSO_U])\n \n (define_insn \"*mve_mov<mode>\"\n   [(set (match_operand:MVE_types 0 \"nonimmediate_operand\" \"=w,w,r,w,w,r,w,Us\")\n@@ -9196,3 +9209,437 @@\n   emit_insn (gen_mve_vstr<V_sz_elem1>q_<supf><mode>(operands[0],operands[1]));\n   DONE;\n })\n+\n+;;\n+;; [vstrdq_scatter_base_p_s vstrdq_scatter_base_p_u]\n+;;\n+(define_insn \"mve_vstrdq_scatter_base_p_<supf>v2di\"\n+  [(set (mem:BLK (scratch))\n+\t(unspec:BLK\n+\t\t[(match_operand:V2DI 0 \"s_register_operand\" \"w\")\n+\t\t (match_operand:SI 1 \"mve_vldrd_immediate\" \"Ri\")\n+\t\t (match_operand:V2DI 2 \"s_register_operand\" \"w\")\n+\t\t (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VSTRDSBQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vpst\\;\\tvstrdt.u64\\t%q2, [%q0, %1]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vstrdq_scatter_base_s vstrdq_scatter_base_u]\n+;;\n+(define_insn \"mve_vstrdq_scatter_base_<supf>v2di\"\n+  [(set (mem:BLK (scratch))\n+\t(unspec:BLK\n+\t\t[(match_operand:V2DI 0 \"s_register_operand\" \"=w\")\n+\t\t (match_operand:SI 1 \"mve_vldrd_immediate\" \"Ri\")\n+\t\t (match_operand:V2DI 2 \"s_register_operand\" \"w\")]\n+\t VSTRDSBQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vstrd.u64\\t%q2, [%q0, %1]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vstrdq_scatter_offset_p_s vstrdq_scatter_offset_p_u]\n+;;\n+(define_insn \"mve_vstrdq_scatter_offset_p_<supf>v2di\"\n+  [(set (match_operand:V2DI 0 \"memory_operand\" \"=Us\")\n+\t(unspec:V2DI\n+\t\t[(match_operand:V2DI 1 \"s_register_operand\" \"w\")\n+\t\t (match_operand:V2DI 2 \"s_register_operand\" \"w\")\n+\t\t (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VSTRDSOQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vpst\\;\\tvstrdt.64\\t%q2, [%m0, %q1]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vstrdq_scatter_offset_s vstrdq_scatter_offset_u]\n+;;\n+(define_insn \"mve_vstrdq_scatter_offset_<supf>v2di\"\n+  [(set (match_operand:V2DI 0 \"memory_operand\" \"=Us\")\n+\t(unspec:V2DI\n+\t\t[(match_operand:V2DI 1 \"s_register_operand\" \"w\")\n+\t\t (match_operand:V2DI 2 \"s_register_operand\" \"w\")]\n+\t VSTRDSOQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vstrd.64\\t%q2, [%m0, %q1]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vstrdq_scatter_shifted_offset_p_s vstrdq_scatter_shifted_offset_p_u]\n+;;\n+(define_insn \"mve_vstrdq_scatter_shifted_offset_p_<supf>v2di\"\n+  [(set (match_operand:V2DI 0 \"memory_operand\" \"=Us\")\n+\t(unspec:V2DI\n+\t\t[(match_operand:V2DI 1 \"s_register_operand\" \"w\")\n+\t\t (match_operand:V2DI 2 \"s_register_operand\" \"w\")\n+\t\t (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VSTRDSSOQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vpst\\;\\tvstrdt.64\\t%q2, [%m0, %q1, UXTW #3]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vstrdq_scatter_shifted_offset_s vstrdq_scatter_shifted_offset_u]\n+;;\n+(define_insn \"mve_vstrdq_scatter_shifted_offset_<supf>v2di\"\n+  [(set (match_operand:V2DI 0 \"memory_operand\" \"=Us\")\n+\t(unspec:V2DI\n+\t\t[(match_operand:V2DI 1 \"s_register_operand\" \"w\")\n+\t\t (match_operand:V2DI 2 \"s_register_operand\" \"w\")]\n+\t VSTRDSSOQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vstrd.64\\t%q2, [%m0, %q1, UXTW #3]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vstrhq_scatter_offset_f]\n+;;\n+(define_insn \"mve_vstrhq_scatter_offset_fv8hf\"\n+  [(set (match_operand:V8HI 0 \"memory_operand\" \"=Us\")\n+\t(unspec:V8HI\n+\t\t[(match_operand:V8HI 1 \"s_register_operand\" \"w\")\n+\t\t (match_operand:V8HF 2 \"s_register_operand\" \"w\")]\n+\t VSTRHQSO_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vstrh.16\\t%q2, [%m0, %q1]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vstrhq_scatter_offset_p_f]\n+;;\n+(define_insn \"mve_vstrhq_scatter_offset_p_fv8hf\"\n+  [(set (match_operand:V8HI 0 \"memory_operand\" \"=Us\")\n+\t(unspec:V8HI\n+\t\t[(match_operand:V8HI 1 \"s_register_operand\" \"w\")\n+\t\t (match_operand:V8HF 2 \"s_register_operand\" \"w\")\n+\t\t (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VSTRHQSO_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vpst\\n\\tvstrht.16\\t%q2, [%m0, %q1]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vstrhq_scatter_shifted_offset_f]\n+;;\n+(define_insn \"mve_vstrhq_scatter_shifted_offset_fv8hf\"\n+  [(set (match_operand:V8HI 0 \"memory_operand\" \"=Us\")\n+\t(unspec:V8HI\n+\t\t[(match_operand:V8HI 1 \"s_register_operand\" \"w\")\n+\t\t (match_operand:V8HF 2 \"s_register_operand\" \"w\")]\n+\t VSTRHQSSO_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vstrh.16\\t%q2, [%m0, %q1, uxtw #1]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vstrhq_scatter_shifted_offset_p_f]\n+;;\n+(define_insn \"mve_vstrhq_scatter_shifted_offset_p_fv8hf\"\n+  [(set (match_operand:V8HI 0 \"memory_operand\" \"=Us\")\n+\t(unspec:V8HI\n+\t\t[(match_operand:V8HI 1 \"s_register_operand\" \"w\")\n+\t\t (match_operand:V8HF 2 \"s_register_operand\" \"w\")\n+\t\t (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VSTRHQSSO_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vpst\\n\\tvstrht.16\\t%q2, [%m0, %q1, uxtw #1]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vstrwq_scatter_base_f]\n+;;\n+(define_insn \"mve_vstrwq_scatter_base_fv4sf\"\n+  [(set (mem:BLK (scratch))\n+\t(unspec:BLK\n+\t\t[(match_operand:V4SI 0 \"s_register_operand\" \"w\")\n+\t\t (match_operand:SI 1 \"immediate_operand\" \"i\")\n+\t\t (match_operand:V4SF 2 \"s_register_operand\" \"w\")]\n+\t VSTRWQSB_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vstrw.u32\\t%q2, [%q0, %1]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vstrwq_scatter_base_p_f]\n+;;\n+(define_insn \"mve_vstrwq_scatter_base_p_fv4sf\"\n+  [(set (mem:BLK (scratch))\n+\t(unspec:BLK\n+\t\t[(match_operand:V4SI 0 \"s_register_operand\" \"w\")\n+\t\t (match_operand:SI 1 \"immediate_operand\" \"i\")\n+\t\t (match_operand:V4SF 2 \"s_register_operand\" \"w\")\n+\t\t (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VSTRWQSB_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vpst\\n\\tvstrwt.u32\\t%q2, [%q0, %1]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vstrwq_scatter_offset_f]\n+;;\n+(define_insn \"mve_vstrwq_scatter_offset_fv4sf\"\n+  [(set (match_operand:V4SI 0 \"memory_operand\" \"=Us\")\n+\t(unspec:V4SI\n+\t\t[(match_operand:V4SI 1 \"s_register_operand\" \"w\")\n+\t\t (match_operand:V4SF 2 \"s_register_operand\" \"w\")]\n+\t VSTRWQSO_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vstrw.32\\t%q2, [%m0, %q1]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vstrwq_scatter_offset_p_f]\n+;;\n+(define_insn \"mve_vstrwq_scatter_offset_p_fv4sf\"\n+  [(set (match_operand:V4SI 0 \"memory_operand\" \"=Us\")\n+\t(unspec:V4SI\n+\t\t[(match_operand:V4SI 1 \"s_register_operand\" \"w\")\n+\t\t (match_operand:V4SF 2 \"s_register_operand\" \"w\")\n+\t\t (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VSTRWQSO_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vpst\\n\\tvstrwt.32\\t%q2, [%m0, %q1]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vstrwq_scatter_offset_p_s vstrwq_scatter_offset_p_u]\n+;;\n+(define_insn \"mve_vstrwq_scatter_offset_p_<supf>v4si\"\n+  [(set (match_operand:V4SI 0 \"memory_operand\" \"=Us\")\n+\t(unspec:V4SI\n+\t\t[(match_operand:V4SI 1 \"s_register_operand\" \"w\")\n+\t\t (match_operand:V4SI 2 \"s_register_operand\" \"w\")\n+\t\t (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VSTRWSOQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vpst\\n\\tvstrwt.32\\t%q2, [%m0, %q1]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vstrwq_scatter_offset_s vstrwq_scatter_offset_u]\n+;;\n+(define_insn \"mve_vstrwq_scatter_offset_<supf>v4si\"\n+  [(set (match_operand:V4SI 0 \"memory_operand\" \"=Us\")\n+\t(unspec:V4SI\n+\t\t[(match_operand:V4SI 1 \"s_register_operand\" \"w\")\n+\t\t (match_operand:V4SI 2 \"s_register_operand\" \"w\")]\n+\t VSTRWSOQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vstrw.32\\t%q2, [%m0, %q1]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vstrwq_scatter_shifted_offset_f]\n+;;\n+(define_insn \"mve_vstrwq_scatter_shifted_offset_fv4sf\"\n+  [(set (match_operand:V4SI 0 \"memory_operand\" \"=Us\")\n+\t(unspec:V4SI\n+\t\t[(match_operand:V4SI 1 \"s_register_operand\" \"w\")\n+\t\t (match_operand:V4SF 2 \"s_register_operand\" \"w\")]\n+\t VSTRWQSSO_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vstrw.32\\t%q2, [%m0, %q1, uxtw #2]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vstrwq_scatter_shifted_offset_p_f]\n+;;\n+(define_insn \"mve_vstrwq_scatter_shifted_offset_p_fv4sf\"\n+  [(set (match_operand:V4SI 0 \"memory_operand\" \"=Us\")\n+\t(unspec:V4SI\n+\t\t[(match_operand:V4SI 1 \"s_register_operand\" \"w\")\n+\t\t (match_operand:V4SF 2 \"s_register_operand\" \"w\")\n+\t\t (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VSTRWQSSO_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vpst\\;\\tvstrwt.32\\t%q2, [%m0, %q1, uxtw #2]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vstrwq_scatter_shifted_offset_p_s vstrwq_scatter_shifted_offset_p_u]\n+;;\n+(define_insn \"mve_vstrwq_scatter_shifted_offset_p_<supf>v4si\"\n+  [(set (match_operand:V4SI 0 \"memory_operand\" \"=Us\")\n+\t(unspec:V4SI\n+\t\t[(match_operand:V4SI 1 \"s_register_operand\" \"w\")\n+\t\t (match_operand:V4SI 2 \"s_register_operand\" \"w\")\n+\t\t (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VSTRWSSOQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vpst\\;\\tvstrwt.32\\t%q2, [%m0, %q1, uxtw #2]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vstrwq_scatter_shifted_offset_s vstrwq_scatter_shifted_offset_u]\n+;;\n+(define_insn \"mve_vstrwq_scatter_shifted_offset_<supf>v4si\"\n+  [(set (match_operand:V4SI 0 \"memory_operand\" \"=Us\")\n+\t(unspec:V4SI\n+\t\t[(match_operand:V4SI 1 \"s_register_operand\" \"w\")\n+\t\t (match_operand:V4SI 2 \"s_register_operand\" \"w\")]\n+\t VSTRWSSOQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vstrw.32\\t%q2, [%m0, %q1, uxtw #2]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])"}, {"sha": "bb302ed5b42208310822b6df770a0f00455cdfba", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -59,6 +59,14 @@\n (define_predicate \"mve_imm_selective_upto_8\"\n   (match_test \"satisfies_constraint_Rg (op)\"))\n \n+;; True if the immediate is the range +/- 1016 and multiple of 8 for MVE.\n+(define_constraint \"Ri\"\n+  \"@internal In Thumb-2 state a constant is multiple of 8 and in range\n+   of -/+ 1016 for MVE\"\n+  (and (match_code \"const_int\")\n+       (match_test \"TARGET_HAVE_MVE && (-1016 <= ival) && (ival <= 1016)\n+\t\t    && ((ival % 8) == 0)\")))\n+\n ; Predicate for stack protector guard's address in\n ; stack_protect_combined_set_insn and stack_protect_combined_test_insn patterns\n (define_predicate \"guard_addr_operand\""}, {"sha": "8fee29fad0d7204e88122ceb7c862a5a0a20a44b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -1,3 +1,50 @@\n+2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_p_s64.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_p_u64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_s64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_u64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_offset_p_s64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_offset_p_u64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_offset_s64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_offset_u64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_shifted_offset_p_s64.c:\n+\tLikewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_shifted_offset_p_u64.c:\n+\tLikewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_shifted_offset_s64.c:\n+\tLikewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_shifted_offset_u64.c:\n+\tLikewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_p_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_f16.c:\n+\tLikewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_p_f16.c:\n+\tLikewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_p_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_offset_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_offset_p_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_offset_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_offset_p_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_offset_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_offset_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_shifted_offset_f32.c:\n+\tLikewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_shifted_offset_p_f32.c:\n+\tLikewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_shifted_offset_p_s32.c:\n+\tLikewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_shifted_offset_p_u32.c:\n+\tLikewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_shifted_offset_s32.c:\n+\tLikewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_shifted_offset_u32.c:\n+\tLikewise.\n+\n 2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "08996054ab54d45f47aa47e73211d79e956a69e6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_p_s64.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_p_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_p_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_p_s64.c?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint64x2_t addr, const int offset, int64x2_t value, mve_pred16_t p)\n+{\n+  vstrdq_scatter_base_p_s64 (addr, 8, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrdt.u64\"  }  } */\n+\n+void\n+foo1 (uint64x2_t addr, const int offset, int64x2_t value, mve_pred16_t p)\n+{\n+  vstrdq_scatter_base_p (addr, 8, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrdt.u64\"  }  } */"}, {"sha": "65c9ddd6c5b4cb29938db2009b2411cd645d32a4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_p_u64.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_p_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_p_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_p_u64.c?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint64x2_t addr, const int offset, uint64x2_t value, mve_pred16_t p)\n+{\n+  vstrdq_scatter_base_p_u64 (addr, 8, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrdt.u64\"  }  } */\n+\n+void\n+foo1 (uint64x2_t addr, const int offset, uint64x2_t value, mve_pred16_t p)\n+{\n+  vstrdq_scatter_base_p (addr, 8, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrdt.u64\"  }  } */"}, {"sha": "8ae6a96794cae306f24f5ebe4e7db8a7e1680624", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_s64.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_s64.c?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint64x2_t addr, const int offset, int64x2_t value)\n+{\n+  vstrdq_scatter_base_s64 (addr, 1016, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrd.u64\"  }  } */\n+\n+void\n+foo1 (uint64x2_t addr, const int offset, int64x2_t value)\n+{\n+  vstrdq_scatter_base (addr, 1016, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrd.u64\"  }  } */"}, {"sha": "da15b6097984740208c4eea4e023e791bfdd238c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_u64.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_u64.c?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint64x2_t addr, const int offset, uint64x2_t value)\n+{\n+  vstrdq_scatter_base_u64 (addr, 8, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrd.u64\"  }  } */\n+\n+void\n+foo1 (uint64x2_t addr, const int offset, uint64x2_t value)\n+{\n+  vstrdq_scatter_base (addr, 8, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrd.u64\"  }  } */"}, {"sha": "01d2c682925d0f7b083bbce764f0a4096e863d4b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrdq_scatter_offset_p_s64.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_offset_p_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_offset_p_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_offset_p_s64.c?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int64_t * base, uint64x2_t offset, int64x2_t value, mve_pred16_t p)\n+{\n+  vstrdq_scatter_offset_p_s64 (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrdt.64\"  }  } */\n+\n+void\n+foo1 (int64_t * base, uint64x2_t offset, int64x2_t value, mve_pred16_t p)\n+{\n+  vstrdq_scatter_offset_p (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrdt.64\"  }  } */"}, {"sha": "2458c78a02c8efc7d778bf98217c9c29806422d1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrdq_scatter_offset_p_u64.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_offset_p_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_offset_p_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_offset_p_u64.c?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint64_t * base, uint64x2_t offset, uint64x2_t value, mve_pred16_t p)\n+{\n+  vstrdq_scatter_offset_p_u64 (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrdt.64\"  }  } */\n+\n+void\n+foo1 (uint64_t * base, uint64x2_t offset, uint64x2_t value, mve_pred16_t p)\n+{\n+  vstrdq_scatter_offset_p (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrdt.64\"  }  } */"}, {"sha": "1e14a38a67f5a969214dfee243b8a29afec55902", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrdq_scatter_offset_s64.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_offset_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_offset_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_offset_s64.c?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int64_t * base, uint64x2_t offset, int64x2_t value)\n+{\n+  vstrdq_scatter_offset_s64 (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrd.64\"  }  } */\n+\n+void\n+foo1 (int64_t * base, uint64x2_t offset, int64x2_t value)\n+{\n+  vstrdq_scatter_offset (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrd.64\"  }  } */"}, {"sha": "fed19edaca99dec708117406995d75b8be124115", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrdq_scatter_offset_u64.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_offset_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_offset_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_offset_u64.c?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint64_t * base, uint64x2_t offset, uint64x2_t value)\n+{\n+  vstrdq_scatter_offset_u64 (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrd.64\"  }  } */\n+\n+void\n+foo1 (uint64_t * base, uint64x2_t offset, uint64x2_t value)\n+{\n+  vstrdq_scatter_offset (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrd.64\"  }  } */"}, {"sha": "b93bdd7244c93e2cce64d90791f4b81263281aff", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrdq_scatter_shifted_offset_p_s64.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_shifted_offset_p_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_shifted_offset_p_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_shifted_offset_p_s64.c?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int64_t * base, uint64x2_t offset, int64x2_t value, mve_pred16_t p)\n+{\n+  vstrdq_scatter_shifted_offset_p_s64 (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrdt.64\"  }  } */\n+\n+void\n+foo1 (int64_t * base, uint64x2_t offset, int64x2_t value, mve_pred16_t p)\n+{\n+  vstrdq_scatter_shifted_offset_p (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrdt.64\"  }  } */"}, {"sha": "9993028efde01ff8cf7a6f2e2d668fd0ac45f1ef", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrdq_scatter_shifted_offset_p_u64.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_shifted_offset_p_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_shifted_offset_p_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_shifted_offset_p_u64.c?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint64_t * base, uint64x2_t offset, uint64x2_t value, mve_pred16_t p)\n+{\n+  vstrdq_scatter_shifted_offset_p_u64 (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrdt.64\"  }  } */\n+\n+void\n+foo1 (uint64_t * base, uint64x2_t offset, uint64x2_t value, mve_pred16_t p)\n+{\n+  vstrdq_scatter_shifted_offset_p (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrdt.64\"  }  } */"}, {"sha": "5cb7aeda96f88116d7d451570fae68b1d729cff2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrdq_scatter_shifted_offset_s64.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_shifted_offset_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_shifted_offset_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_shifted_offset_s64.c?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int64_t * base, uint64x2_t offset, int64x2_t value)\n+{\n+  vstrdq_scatter_shifted_offset_s64 (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrd.64\"  }  } */\n+\n+void\n+foo1 (int64_t * base, uint64x2_t offset, int64x2_t value)\n+{\n+  vstrdq_scatter_shifted_offset (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrd.64\"  }  } */"}, {"sha": "7053953187a3cfc6d6d4bcf1e9c6a1e4fdc39419", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrdq_scatter_shifted_offset_u64.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_shifted_offset_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_shifted_offset_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_shifted_offset_u64.c?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint64_t * base, uint64x2_t offset, uint64x2_t value)\n+{\n+  vstrdq_scatter_shifted_offset_u64 (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrd.64\"  }  } */\n+\n+void\n+foo1 (uint64_t * base, uint64x2_t offset, uint64x2_t value)\n+{\n+  vstrdq_scatter_shifted_offset (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrd.64\"  }  } */"}, {"sha": "aea8adbb23a11feb2c4f14c7db682365bb4d8f5c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_offset_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_offset_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_offset_f16.c?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (float16_t * base, uint16x8_t offset, float16x8_t value)\n+{\n+  vstrhq_scatter_offset_f16 (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.16\"  }  } */\n+\n+void\n+foo1 (float16_t * base, uint16x8_t offset, float16x8_t value)\n+{\n+  vstrhq_scatter_offset (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.16\"  }  } */"}, {"sha": "dc4ce1db14b17084d09afe2f0e8dbe56c54d3b6b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_p_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_offset_p_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_offset_p_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_offset_p_f16.c?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (float16_t * base, uint16x8_t offset, float16x8_t value, mve_pred16_t p)\n+{\n+  vstrhq_scatter_offset_p_f16 (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.16\"  }  } */\n+\n+void\n+foo1 (float16_t * base, uint16x8_t offset, float16x8_t value, mve_pred16_t p)\n+{\n+  vstrhq_scatter_offset_p (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.16\"  }  } */"}, {"sha": "1c90cc01bb17398996da7ecc7ba469bb4dc39e47", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_shifted_offset_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_shifted_offset_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_shifted_offset_f16.c?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (float16_t * base, uint16x8_t offset, float16x8_t value)\n+{\n+  vstrhq_scatter_shifted_offset_f16 (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.16\"  }  } */\n+\n+void\n+foo1 (float16_t * base, uint16x8_t offset, float16x8_t value)\n+{\n+  vstrhq_scatter_shifted_offset (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.16\"  }  } */"}, {"sha": "e45d1d8a63170b5b331bf5a8aaf8554197b11e56", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_p_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_shifted_offset_p_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_shifted_offset_p_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_shifted_offset_p_f16.c?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (float16_t * base, uint16x8_t offset, float16x8_t value, mve_pred16_t p)\n+{\n+  vstrhq_scatter_shifted_offset_p_f16 (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.16\"  }  } */\n+\n+void\n+foo1 (float16_t * base, uint16x8_t offset, float16x8_t value, mve_pred16_t p)\n+{\n+  vstrhq_scatter_shifted_offset_p (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.16\"  }  } */"}, {"sha": "7895a761a6e673cb2b54e1ec9fbb07f517ac1dff", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_f32.c?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint32x4_t addr, float32x4_t value)\n+{\n+  vstrwq_scatter_base_f32 (addr, 8, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.u32\"  }  } */\n+\n+void\n+foo1 (uint32x4_t addr, float32x4_t value)\n+{\n+  vstrwq_scatter_base (addr, 8, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.u32\"  }  } */"}, {"sha": "c0069c3bd0536c89c28f9fbdf107ee7653371b89", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_p_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_p_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_p_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_p_f32.c?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint32x4_t addr, float32x4_t value, mve_pred16_t p)\n+{\n+  vstrwq_scatter_base_p_f32 (addr, 8, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.u32\"  }  } */\n+\n+void\n+foo1 (uint32x4_t addr, float32x4_t value, mve_pred16_t p)\n+{\n+  vstrwq_scatter_base_p (addr, 8, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.u32\"  }  } */"}, {"sha": "a70fb858a1c6b1f72eca23eee91ddecec6cb9ca7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_scatter_offset_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_offset_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_offset_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_offset_f32.c?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (float32_t * base, uint32x4_t offset, float32x4_t value)\n+{\n+  vstrwq_scatter_offset_f32 (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.32\"  }  } */\n+\n+void\n+foo1 (float32_t * base, uint32x4_t offset, float32x4_t value)\n+{\n+  vstrwq_scatter_offset (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.32\"  }  } */"}, {"sha": "e8cc78278c1870055254d398adcffa5d49ffffac", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_scatter_offset_p_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_offset_p_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_offset_p_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_offset_p_f32.c?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (float32_t * base, uint32x4_t offset, float32x4_t value, mve_pred16_t p)\n+{\n+  vstrwq_scatter_offset_p_f32 (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.32\"  }  } */\n+\n+void\n+foo1 (float32_t * base, uint32x4_t offset, float32x4_t value, mve_pred16_t p)\n+{\n+  vstrwq_scatter_offset_p (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.32\"  }  } */"}, {"sha": "7802ad51352b3be7d5a18fdf28e7a70e4f079ee3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_scatter_offset_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_offset_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_offset_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_offset_p_s32.c?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int32_t * base, uint32x4_t offset, int32x4_t value, mve_pred16_t p)\n+{\n+  vstrwq_scatter_offset_p_s32 (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.32\"  }  } */\n+\n+void\n+foo1 (int32_t * base, uint32x4_t offset, int32x4_t value, mve_pred16_t p)\n+{\n+  vstrwq_scatter_offset_p (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.32\"  }  } */"}, {"sha": "a01fb14ae40c1429144001a9214c05c10aa3abbf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_scatter_offset_p_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_offset_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_offset_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_offset_p_u32.c?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint32_t * base, uint32x4_t offset, uint32x4_t value, mve_pred16_t p)\n+{\n+  vstrwq_scatter_offset_p_u32 (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.32\"  }  } */\n+\n+void\n+foo1 (uint32_t * base, uint32x4_t offset, uint32x4_t value, mve_pred16_t p)\n+{\n+  vstrwq_scatter_offset_p (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.32\"  }  } */"}, {"sha": "252381966c3437cc5e59b76db44adf51f72dd64d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_scatter_offset_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_offset_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_offset_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_offset_s32.c?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int32_t * base, uint32x4_t offset, int32x4_t value)\n+{\n+  vstrwq_scatter_offset_s32 (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.32\"  }  } */\n+\n+void\n+foo1 (int32_t * base, uint32x4_t offset, int32x4_t value)\n+{\n+  vstrwq_scatter_offset (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.32\"  }  } */"}, {"sha": "ebdd83bfc9845a9298a5f662314b1187be146f72", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_scatter_offset_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_offset_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_offset_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_offset_u32.c?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint32_t * base, uint32x4_t offset, uint32x4_t value)\n+{\n+  vstrwq_scatter_offset_u32 (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.32\"  }  } */\n+\n+void\n+foo1 (uint32_t * base, uint32x4_t offset, uint32x4_t value)\n+{\n+  vstrwq_scatter_offset (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.32\"  }  } */"}, {"sha": "ce4e5888b471110f956435e1b9d11aa49294c31a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_scatter_shifted_offset_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_shifted_offset_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_shifted_offset_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_shifted_offset_f32.c?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (float32_t * base, uint32x4_t offset, float32x4_t value)\n+{\n+  vstrwq_scatter_shifted_offset_f32 (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.32\"  }  } */\n+\n+void\n+foo1 (float32_t * base, uint32x4_t offset, float32x4_t value)\n+{\n+  vstrwq_scatter_shifted_offset (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.32\"  }  } */"}, {"sha": "452b540c7e8f05c36e3efbfbe770110c1b5cd948", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_scatter_shifted_offset_p_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_shifted_offset_p_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_shifted_offset_p_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_shifted_offset_p_f32.c?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (float32_t * base, uint32x4_t offset, float32x4_t value, mve_pred16_t p)\n+{\n+  vstrwq_scatter_shifted_offset_p_f32 (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.32\"  }  } */\n+\n+void\n+foo1 (float32_t * base, uint32x4_t offset, float32x4_t value, mve_pred16_t p)\n+{\n+  vstrwq_scatter_shifted_offset_p (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.32\"  }  } */"}, {"sha": "56ceae4e1be969c49547071341e52c63cd3c0c0f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_scatter_shifted_offset_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_shifted_offset_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_shifted_offset_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_shifted_offset_p_s32.c?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int32_t * base, uint32x4_t offset, int32x4_t value, mve_pred16_t p)\n+{\n+  vstrwq_scatter_shifted_offset_p_s32 (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.32\"  }  } */\n+\n+void\n+foo1 (int32_t * base, uint32x4_t offset, int32x4_t value, mve_pred16_t p)\n+{\n+  vstrwq_scatter_shifted_offset_p (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.32\"  }  } */"}, {"sha": "02c59704053a1e38793879dee6a9fd710392870e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_scatter_shifted_offset_p_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_shifted_offset_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_shifted_offset_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_shifted_offset_p_u32.c?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint32_t * base, uint32x4_t offset, uint32x4_t value, mve_pred16_t p)\n+{\n+  vstrwq_scatter_shifted_offset_p_u32 (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.32\"  }  } */\n+\n+void\n+foo1 (uint32_t * base, uint32x4_t offset, uint32x4_t value, mve_pred16_t p)\n+{\n+  vstrwq_scatter_shifted_offset_p (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.32\"  }  } */"}, {"sha": "4b087277e0fd46130f6a23dc1a33a2679d9e6d2b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_scatter_shifted_offset_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_shifted_offset_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_shifted_offset_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_shifted_offset_s32.c?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int32_t * base, uint32x4_t offset, int32x4_t value)\n+{\n+  vstrwq_scatter_shifted_offset_s32 (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.32\"  }  } */\n+\n+void\n+foo1 (int32_t * base, uint32x4_t offset, int32x4_t value)\n+{\n+  vstrwq_scatter_shifted_offset (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.32\"  }  } */"}, {"sha": "6a9156c150556692510a83504d023633bd56e4e9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_scatter_shifted_offset_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_shifted_offset_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_shifted_offset_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_shifted_offset_u32.c?ref=7a5fffa5ed0a8edfca772d43465d2c9b55bb23cc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint32_t * base, uint32x4_t offset, uint32x4_t value)\n+{\n+  vstrwq_scatter_shifted_offset_u32 (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.32\"  }  } */\n+\n+void\n+foo1 (uint32_t * base, uint32x4_t offset, uint32x4_t value)\n+{\n+  vstrwq_scatter_shifted_offset (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.32\"  }  } */"}]}