{"sha": "d8bbd665a18c584a2d7f7b8a20582b4426ac3739", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhiYmQ2NjVhMThjNTg0YTJkN2Y3YjhhMjA1ODJiNDQyNmFjMzczOQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2016-09-25T20:26:02Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2016-09-25T20:26:02Z"}, "message": "debug.cc: Include debug/vector.\n\n2016-09-25  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* src/c++11/debug.cc: Include debug/vector. Include cctype. Remove\n\tfunctional.\n\t(get_safe_base_mutex): Get mutex based on address lowest non nil bits.\n\t* testsuite/23_containers/vector/debug/mutex_association.cc: New.\n\nFrom-SVN: r240479", "tree": {"sha": "693f5c26287a5e5365b02cc93f4a4d92ea90265c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/693f5c26287a5e5365b02cc93f4a4d92ea90265c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8bbd665a18c584a2d7f7b8a20582b4426ac3739", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8bbd665a18c584a2d7f7b8a20582b4426ac3739", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8bbd665a18c584a2d7f7b8a20582b4426ac3739", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8bbd665a18c584a2d7f7b8a20582b4426ac3739/comments", "author": null, "committer": null, "parents": [{"sha": "5d045324305966cc22b7aa060dce9ac6e263ac5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d045324305966cc22b7aa060dce9ac6e263ac5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d045324305966cc22b7aa060dce9ac6e263ac5e"}], "stats": {"total": 152, "additions": 105, "deletions": 47}, "files": [{"sha": "6f134cbe2e2b9fda667c00a29e19eca649fef1ef", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8bbd665a18c584a2d7f7b8a20582b4426ac3739/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8bbd665a18c584a2d7f7b8a20582b4426ac3739/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d8bbd665a18c584a2d7f7b8a20582b4426ac3739", "patch": "@@ -1,5 +1,10 @@\n 2016-09-25  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n+\t* src/c++11/debug.cc: Include debug/vector. Include cctype. Remove\n+\tfunctional.\n+\t(get_safe_base_mutex): Get mutex based on address lowest non nil bits.\n+\t* testsuite/23_containers/vector/debug/mutex_association.cc: New.\n+\n \t* include/debug/bitset (bitset::reference::reference(const _Base_ref&,\n \tbitset*)): Remove __unused__ attribute.\n \t* include/debug/safe_base.h (_Safe_iterator_base): Make"}, {"sha": "f58e829c47a343cdb6eee25ffae812e5bf514a3f", "filename": "libstdc++-v3/src/c++11/debug.cc", "status": "modified", "additions": 58, "deletions": 47, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8bbd665a18c584a2d7f7b8a20582b4426ac3739/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8bbd665a18c584a2d7f7b8a20582b4426ac3739/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc?ref=d8bbd665a18c584a2d7f7b8a20582b4426ac3739", "patch": "@@ -30,12 +30,13 @@\n #include <debug/safe_unordered_base.h>\n #include <debug/safe_iterator.h>\n #include <debug/safe_local_iterator.h>\n+#include <debug/vector>\n \n #include <cassert>\n #include <cstdio>\n+#include <cctype> // for std::isspace\n \n #include <algorithm> // for std::min\n-#include <functional> // for _Hash_impl\n \n #include <cxxabi.h> // for __cxa_demangle\n \n@@ -47,11 +48,16 @@ namespace\n    *  in order to limit contention without breaking current library binary\n    *  compatibility. */\n   __gnu_cxx::__mutex&\n-  get_safe_base_mutex(void* __address)\n+  get_safe_base_mutex(void* address)\n   {\n     const size_t mask = 0xf;\n     static __gnu_cxx::__mutex safe_base_mutex[mask + 1];\n-    const size_t index = _Hash_impl::hash(__address) & mask;\n+\n+    // Use arbitrarily __gnu_debug::vector<int> as the container giving\n+    // alignment of debug containers.\n+    const auto alignbits = __builtin_ctz(alignof(__gnu_debug::vector<int>));\n+    const size_t index\n+      = (reinterpret_cast<std::size_t>(address) >> alignbits) & mask;\n     return safe_base_mutex[index];\n   }\n \n@@ -70,8 +76,8 @@ namespace\n   }\n \n   void\n-  swap_seq(__gnu_debug::_Safe_sequence_base& __lhs,\n-\t   __gnu_debug::_Safe_sequence_base& __rhs)\n+  swap_seq_single(__gnu_debug::_Safe_sequence_base& __lhs,\n+\t\t  __gnu_debug::_Safe_sequence_base& __rhs)\n   {\n     swap(__lhs._M_version, __rhs._M_version);\n     swap_its(__lhs, __lhs._M_iterators,\n@@ -80,17 +86,58 @@ namespace\n \t     __rhs, __rhs._M_const_iterators);\n   }\n \n+  template<typename _Action>\n+    void\n+    lock_and_run(__gnu_cxx::__mutex& lhs_mutex, __gnu_cxx::__mutex& rhs_mutex,\n+\t\t _Action action)\n+    {\n+      // We need to lock both sequences to run action.\n+      if (&lhs_mutex == &rhs_mutex)\n+\t{\n+\t  __gnu_cxx::__scoped_lock sentry(lhs_mutex);\n+\t  action();\n+\t}\n+      else\n+\t{\n+\t  __gnu_cxx::__scoped_lock sentry1(&lhs_mutex < &rhs_mutex\n+\t\t\t\t\t   ? lhs_mutex : rhs_mutex);\n+\t  __gnu_cxx::__scoped_lock sentry2(&lhs_mutex < &rhs_mutex\n+\t\t\t\t\t   ? rhs_mutex : lhs_mutex);\n+\t  action();\n+\t}\n+    }\n+\n+  void\n+  swap_seq(__gnu_cxx::__mutex& lhs_mutex,\n+\t   __gnu_debug::_Safe_sequence_base& lhs,\n+\t   __gnu_cxx::__mutex& rhs_mutex,\n+\t   __gnu_debug::_Safe_sequence_base& rhs)\n+  {\n+    lock_and_run(lhs_mutex, rhs_mutex,\n+\t\t [&lhs, &rhs]() { swap_seq_single(lhs, rhs); });\n+  }\n+\n   void\n-  swap_ucont(__gnu_debug::_Safe_unordered_container_base& __lhs,\n-\t    __gnu_debug::_Safe_unordered_container_base& __rhs)\n+  swap_ucont_single(__gnu_debug::_Safe_unordered_container_base& __lhs,\n+\t\t    __gnu_debug::_Safe_unordered_container_base& __rhs)\n   {\n-    swap_seq(__lhs, __rhs);\n+    swap_seq_single(__lhs, __rhs);\n     swap_its(__lhs, __lhs._M_local_iterators,\n \t     __rhs, __rhs._M_local_iterators);\n     swap_its(__lhs, __lhs._M_const_local_iterators,\n \t     __rhs, __rhs._M_const_local_iterators);\n   }\n \n+  void\n+  swap_ucont(__gnu_cxx::__mutex& lhs_mutex,\n+\t     __gnu_debug::_Safe_unordered_container_base& lhs,\n+\t     __gnu_cxx::__mutex& rhs_mutex,\n+\t     __gnu_debug::_Safe_unordered_container_base& rhs)\n+  {\n+    lock_and_run(lhs_mutex, rhs_mutex,\n+\t\t [&lhs, &rhs]() { swap_ucont_single(lhs, rhs); });\n+  }\n+\n   void\n   detach_all(__gnu_debug::_Safe_iterator_base* __iter)\n   {\n@@ -242,25 +289,7 @@ namespace __gnu_debug\n   void\n   _Safe_sequence_base::\n   _M_swap(_Safe_sequence_base& __x) noexcept\n-  {\n-    // We need to lock both sequences to swap\n-    using namespace __gnu_cxx;\n-    __mutex *__this_mutex = &_M_get_mutex();\n-    __mutex *__x_mutex = &__x._M_get_mutex();\n-    if (__this_mutex == __x_mutex)\n-      {\n-\t__scoped_lock __lock(*__this_mutex);\n-\tswap_seq(*this, __x);\n-      }\n-    else\n-      {\n-\t__scoped_lock __l1(__this_mutex < __x_mutex\n-\t\t\t     ? *__this_mutex : *__x_mutex);\n-\t__scoped_lock __l2(__this_mutex < __x_mutex\n-\t\t\t     ? *__x_mutex : *__this_mutex);\n-\tswap_seq(*this, __x);\n-      }\n-  }\n+  { swap_seq(_M_get_mutex(), *this, __x._M_get_mutex(), __x); }\n \n   __gnu_cxx::__mutex&\n   _Safe_sequence_base::\n@@ -384,7 +413,7 @@ namespace __gnu_debug\n   __gnu_cxx::__mutex&\n   _Safe_iterator_base::\n   _M_get_mutex() throw ()\n-  { return get_safe_base_mutex(_M_sequence); }\n+  { return _M_sequence->_M_get_mutex(); }\n \n   _Safe_unordered_container_base*\n   _Safe_local_iterator_base::\n@@ -462,25 +491,7 @@ namespace __gnu_debug\n   void\n   _Safe_unordered_container_base::\n   _M_swap(_Safe_unordered_container_base& __x) noexcept\n-  {\n-    // We need to lock both containers to swap\n-    using namespace __gnu_cxx;\n-    __mutex *__this_mutex = &_M_get_mutex();\n-    __mutex *__x_mutex = &__x._M_get_mutex();\n-    if (__this_mutex == __x_mutex)\n-      {\n-\t__scoped_lock __lock(*__this_mutex);\n-\tswap_ucont(*this, __x);\n-      }\n-    else\n-      {\n-\t__scoped_lock __l1(__this_mutex < __x_mutex\n-\t\t\t     ? *__this_mutex : *__x_mutex);\n-\t__scoped_lock __l2(__this_mutex < __x_mutex\n-\t\t\t     ? *__x_mutex : *__this_mutex);\n-\tswap_ucont(*this, __x);\n-      }\n-  }\n+  { swap_ucont(_M_get_mutex(), *this, __x._M_get_mutex(), __x); }\n \n   void\n   _Safe_unordered_container_base::"}, {"sha": "a3c56e2ca5d86874697d5054f9797928fbb39129", "filename": "libstdc++-v3/testsuite/23_containers/vector/debug/mutex_association.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8bbd665a18c584a2d7f7b8a20582b4426ac3739/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Fmutex_association.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8bbd665a18c584a2d7f7b8a20582b4426ac3739/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Fmutex_association.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Fmutex_association.cc?ref=d8bbd665a18c584a2d7f7b8a20582b4426ac3739", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+\n+#include <set>\n+#include <debug/vector>\n+\n+#include <testsuite_hooks.h>\n+\n+class container : public __gnu_debug::_Safe_sequence<container>\n+{\n+public:\n+  __gnu_cxx::__mutex&\n+  get_mutex()\n+  { return this->_M_get_mutex(); }\n+};\n+\n+int\n+main()\n+{\n+  std::set<__gnu_cxx::__mutex*> mutexes;\n+  container conts[17];\n+\n+  for (int i = 0; i != 16; ++i)\n+    VERIFY( mutexes.insert(&conts[i].get_mutex()).second );\n+\n+  VERIFY( !mutexes.insert(&conts[16].get_mutex()).second );\n+}"}]}