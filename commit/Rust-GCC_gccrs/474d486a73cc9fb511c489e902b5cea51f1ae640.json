{"sha": "474d486a73cc9fb511c489e902b5cea51f1ae640", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc0ZDQ4NmE3M2NjOWZiNTExYzQ4OWU5MDJiNWNlYTUxZjFhZTY0MA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2012-12-02T15:23:30Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2012-12-02T15:23:30Z"}, "message": "resolve.c (resolve_allocate_deallocate, [...]): Recover revisions 193568 and 193778...\n\n2012-12-02  Paul Thomas  <pault@gcc.gnu.org>\n\n\t* resolve.c (resolve_allocate_deallocate,\n\tresolve_typebound_intrinsic_op): Recover revisions 193568 and\n\t193778, which were accidentally reverted by the previous patch.\n\nFrom-SVN: r194052", "tree": {"sha": "42ca63ce0439afa2eedb867b21c53176859b95df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42ca63ce0439afa2eedb867b21c53176859b95df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/474d486a73cc9fb511c489e902b5cea51f1ae640", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/474d486a73cc9fb511c489e902b5cea51f1ae640", "html_url": "https://github.com/Rust-GCC/gccrs/commit/474d486a73cc9fb511c489e902b5cea51f1ae640", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/474d486a73cc9fb511c489e902b5cea51f1ae640/comments", "author": null, "committer": null, "parents": [{"sha": "9b6343a1d47ba8cd7a3cf3a577159dddbb9e81d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b6343a1d47ba8cd7a3cf3a577159dddbb9e81d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b6343a1d47ba8cd7a3cf3a577159dddbb9e81d5"}], "stats": {"total": 44, "additions": 29, "deletions": 15}, "files": [{"sha": "5af071cad731498ee7bce45205901a2387c8fec5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/474d486a73cc9fb511c489e902b5cea51f1ae640/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/474d486a73cc9fb511c489e902b5cea51f1ae640/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=474d486a73cc9fb511c489e902b5cea51f1ae640", "patch": "@@ -1,3 +1,9 @@\n+2012-12-02  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\t* resolve.c (resolve_allocate_deallocate,\n+\tresolve_typebound_intrinsic_op): Recover revisions 193568 and\n+\t193778, which were accidentally reverted by the previous patch.\n+\n 2012-12-01   Alessandro Fanfarillo <alessandro.fanfarillo@gmail.com>\n              Paul Thomas  <pault@gcc.gnu.org>\n \n@@ -314,7 +320,7 @@\n \t(get_sym_storage_size): Remove always-true checks.\n \t* io.c (format_lex): Add comment.\n \t(gfc_free_wait): Free memory.\n-\t* match.c (gfc_match_select_type): Ditto. \n+\t* match.c (gfc_match_select_type): Ditto.\n \t* matchexpr.c (match_level_3): Ditto.\n \t* primary.c (match_string_constant): Ditto.\n \t(match_actual_arg): Check return value.\n@@ -1089,7 +1095,7 @@\n \t* data.c (gfc_assign_data_value): Ditto.\n \t* decl.c (var_element, char_len_param_value, match_char_length,\n \tgfc_verify_c_interop_param, match_pointer_init, variable_decl,\n-\tgfc_match_decl_type_spec, gfc_match_import, match_attr_spec, \n+\tgfc_match_decl_type_spec, gfc_match_import, match_attr_spec,\n \tgfc_match_prefix, gfc_match_suffix, match_ppc_decl,\n \tmatch_procedure_in_interface, gfc_match_procedure,gfc_match_entry,\n \tgfc_match_subroutine, gfc_match_end, gfc_match_codimension,\n@@ -1430,15 +1436,15 @@\n \tPR fortran/52158\n \tPR fortran/45170\n \tPR fortran/49430\n-\t* resolve.c (resolve_fl_derived0): Deferred character length \n+\t* resolve.c (resolve_fl_derived0): Deferred character length\n \tprocedure components are supported.\n-\t* trans-expr.c (gfc_conv_procedure_call): Handle TBP with \n+\t* trans-expr.c (gfc_conv_procedure_call): Handle TBP with\n \tdeferred-length results.\n \t(gfc_string_to_single_character): Add a new check to prevent\n \tNULL read.\n-\t(gfc_conv_procedure_call): Remove unuseful checks on \n+\t(gfc_conv_procedure_call): Remove unuseful checks on\n \tsymbol's attributes. Add new checks to prevent NULL read on\n-\tstring length. \n+\tstring length.\n \n 2012-05-12  Tobias Burnus  <burnus@net-b.de>\n \n@@ -1747,7 +1753,7 @@\n 2012-03-04  Mikael Morin  <mikael@gcc.gnu.org>\n \n \tPR fortran/50981\n-\t* trans-expr.c (gfc_conv_procedure_call): Save se->ss's value. \n+\t* trans-expr.c (gfc_conv_procedure_call): Save se->ss's value.\n \tHandle the case of unallocated arrays passed to elemental procedures.\n \n 2012-03-04  Mikael Morin  <mikael@gcc.gnu.org>\n@@ -1806,7 +1812,7 @@\n \t* module.c (bt_types): Ditto.\n \t* resolve.c (assumed_type_expr_allowed): New static variable.\n \t(resolve_actual_arglist, resolve_variable, resolve_symbol):\n-\tHandle type(*). \n+\tHandle type(*).\n \t* trans-expr.c (gfc_conv_procedure_call): Ditto.\n \t* trans-types.c (gfc_typenode_for_spec, gfc_get_dtype): Ditto.\n \n@@ -2241,7 +2247,7 @@\n \n \tPR fortran/50981\n \t* trans-array.c (gfc_walk_elemental_function_args): Fix\n-\tpassing of deallocated allocatables/pointers as absent argument. \n+\tpassing of deallocated allocatables/pointers as absent argument.\n \n 2012-01-16  Tobias Burnus  <burnus@net-b.de>\n \n@@ -2277,7 +2283,7 @@\n 2012-01-16  Paul Thomas  <pault@gcc.gnu.org>\n \n \t* trans-array.c (gfc_trans_create_temp_array): In the case of a\n-\tclass array temporary, detect a null 'eltype' on entry and use \n+\tclass array temporary, detect a null 'eltype' on entry and use\n \t'initial' to provde the class reference and so, through the\n \tvtable, the element size for the dynamic type.\n \t* trans-stmt.c (gfc_conv_elemental_dependencies): For class"}, {"sha": "7d434ddc31958fd898a28e42114b401a1f7c85cd", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/474d486a73cc9fb511c489e902b5cea51f1ae640/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/474d486a73cc9fb511c489e902b5cea51f1ae640/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=474d486a73cc9fb511c489e902b5cea51f1ae640", "patch": "@@ -7622,12 +7622,18 @@ resolve_allocate_deallocate (gfc_code *code, const char *fcn)\n \n \t\t      if (pr->next && qr->next)\n \t\t\t{\n+\t\t\t  int i;\n \t\t\t  gfc_array_ref *par = &(pr->u.ar);\n \t\t\t  gfc_array_ref *qar = &(qr->u.ar);\n-\t\t\t  if ((par->start[0] != NULL || qar->start[0] != NULL)\n-\t\t\t      && gfc_dep_compare_expr (par->start[0],\n-\t\t\t\t\t\t       qar->start[0]) != 0)\n-\t\t\t    break;\n+\n+\t\t\t  for (i=0; i<par->dimen; i++)\n+\t\t\t    {\n+\t\t\t      if ((par->start[i] != NULL\n+\t\t\t\t   || qar->start[i] != NULL)\n+\t\t\t\t  && gfc_dep_compare_expr (par->start[i],\n+\t\t\t\t\t\t\t   qar->start[i]) != 0)\n+\t\t\t\tgoto break_label;\n+\t\t\t    }\n \t\t\t}\n \t\t    }\n \t\t  else\n@@ -7639,6 +7645,8 @@ resolve_allocate_deallocate (gfc_code *code, const char *fcn)\n \t\t  pr = pr->next;\n \t\t  qr = qr->next;\n \t\t}\n+\t    break_label:\n+\t      ;\n \t    }\n \t}\n     }\n@@ -11948,7 +11956,7 @@ resolve_typebound_intrinsic_op (gfc_symbol* derived, gfc_intrinsic_op op,\n \n       /* Add target to non-typebound operator list.  */\n       if (!target->specific->deferred && !derived->attr.use_assoc\n-\t  && p->access != ACCESS_PRIVATE)\n+\t  && p->access != ACCESS_PRIVATE && derived->ns == gfc_current_ns)\n \t{\n \t  gfc_interface *head, *intr;\n \t  if (gfc_check_new_interface (derived->ns->op[op], target_proc,"}]}