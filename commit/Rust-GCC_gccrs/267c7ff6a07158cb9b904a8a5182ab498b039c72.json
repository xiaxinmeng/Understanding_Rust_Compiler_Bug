{"sha": "267c7ff6a07158cb9b904a8a5182ab498b039c72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY3YzdmZjZhMDcxNThjYjliOTA0YThhNTE4MmFiNDk4YjAzOWM3Mg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-07-22T13:58:32Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-22T13:58:32Z"}, "message": "[Ada] Fix missing check for no-op conversion to fixed-point type\n\nThis plugs a small loophole in the compiler for the case of a\nmultiplication or a division in a fixed-point type wrapped in a no-op\nconversion, e.g. to the same fixed-point type.\n\nThe front-end fails to generate a range check for the operation.  This\nused to be caught by the back-end, which would generate the range check,\nbut this is no longer the case because we now make sure to reset the\nDo_Range_Check flag in all cases before invoking the back-end.\n\n2019-07-22  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch4.adb (Expand_N_Type_Conversion): Beef up comment.\n\t(Fixup_Universal_Fixed_Operation): Set the base type instead of\n\tthe type of the enclosing type conversion on the operation.\n\ngcc/testsuite/\n\n\t* gnat.dg/fixedpnt6.adb: New testcase.\n\nFrom-SVN: r273695", "tree": {"sha": "3c1ee5671289d271dc12cd771402befe2ebdfa8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c1ee5671289d271dc12cd771402befe2ebdfa8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/267c7ff6a07158cb9b904a8a5182ab498b039c72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/267c7ff6a07158cb9b904a8a5182ab498b039c72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/267c7ff6a07158cb9b904a8a5182ab498b039c72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/267c7ff6a07158cb9b904a8a5182ab498b039c72/comments", "author": null, "committer": null, "parents": [{"sha": "ad277369b236a39fff13c87a51a8e67f7562a80a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad277369b236a39fff13c87a51a8e67f7562a80a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad277369b236a39fff13c87a51a8e67f7562a80a"}], "stats": {"total": 40, "additions": 37, "deletions": 3}, "files": [{"sha": "e9b1c3fc168864c20b0221de66e63cd04a556d6a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/267c7ff6a07158cb9b904a8a5182ab498b039c72/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/267c7ff6a07158cb9b904a8a5182ab498b039c72/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=267c7ff6a07158cb9b904a8a5182ab498b039c72", "patch": "@@ -1,3 +1,9 @@\n+2019-07-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Type_Conversion): Beef up comment.\n+\t(Fixup_Universal_Fixed_Operation): Set the base type instead of\n+\tthe type of the enclosing type conversion on the operation.\n+\n 2019-07-22  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_ch4.adb (Expand_N_In): Do not suggest the use of attribute"}, {"sha": "dc2146c50e5bbc19dacbb9e2465a248308b1396f", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/267c7ff6a07158cb9b904a8a5182ab498b039c72/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/267c7ff6a07158cb9b904a8a5182ab498b039c72/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=267c7ff6a07158cb9b904a8a5182ab498b039c72", "patch": "@@ -12072,7 +12072,10 @@ package body Exp_Ch4 is\n       --  Check: are these rules stated in sinfo??? if so, why restate here???\n \n       --  The only remaining step is to generate a range check if we still have\n-      --  a type conversion at this stage and Do_Range_Check is set.\n+      --  a type conversion at this stage and Do_Range_Check is set. Note that\n+      --  we need to deal with at most 8 out of the 9 possible cases of numeric\n+      --  conversions here, because the float-to-integer case is entirely dealt\n+      --  with by Apply_Float_Conversion_Check.\n \n       if Nkind (N) = N_Type_Conversion\n         and then Do_Range_Check (Expression (N))\n@@ -12726,13 +12729,13 @@ package body Exp_Ch4 is\n       if Nkind (Parent (Conv)) = N_Attribute_Reference\n         and then Attribute_Name (Parent (Conv)) = Name_Round\n       then\n-         Set_Etype (N, Etype (Parent (Conv)));\n+         Set_Etype (N, Base_Type (Etype (Parent (Conv))));\n          Set_Rounded_Result (N);\n \n       --  Normal case where type comes from conversion above us\n \n       else\n-         Set_Etype (N, Etype (Conv));\n+         Set_Etype (N, Base_Type (Etype (Conv)));\n       end if;\n    end Fixup_Universal_Fixed_Operation;\n "}, {"sha": "9d20101b427438953a2fce05dd05db0bae74d5ba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/267c7ff6a07158cb9b904a8a5182ab498b039c72/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/267c7ff6a07158cb9b904a8a5182ab498b039c72/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=267c7ff6a07158cb9b904a8a5182ab498b039c72", "patch": "@@ -1,3 +1,7 @@\n+2019-07-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/fixedpnt6.adb: New testcase.\n+\n 2019-07-22  Ed Schonberg  <schonberg@adacore.com>\n \n \t* gnat.dg/warn26.adb: New testcase."}, {"sha": "01c17478511cabee92dd7bf39c9098f306220d38", "filename": "gcc/testsuite/gnat.dg/fixedpnt6.adb", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/267c7ff6a07158cb9b904a8a5182ab498b039c72/gcc%2Ftestsuite%2Fgnat.dg%2Ffixedpnt6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/267c7ff6a07158cb9b904a8a5182ab498b039c72/gcc%2Ftestsuite%2Fgnat.dg%2Ffixedpnt6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ffixedpnt6.adb?ref=267c7ff6a07158cb9b904a8a5182ab498b039c72", "patch": "@@ -0,0 +1,21 @@\n+--  { dg-do run }\n+--  { dg-options \"-O0\" }\n+\n+procedure Fixedpnt6 is\n+\n+  type T is delta 0.125 range -2.0 .. 1.875;\n+\n+  function Mult (A, B : T) return T is\n+  begin\n+    return T (A * B);\n+  end;\n+\n+  R : T;\n+\n+begin\n+  R := Mult (T'Last, T'Last);\n+  raise Program_Error;\n+exception\n+   when Constraint_Error =>\n+      null;\n+end;"}]}