{"sha": "4a2f6dc05bb975426ff56d3656694684d292efbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGEyZjZkYzA1YmI5NzU0MjZmZjU2ZDM2NTY2OTQ2ODRkMjkyZWZiZA==", "commit": {"author": {"name": "Volker Reichelt", "email": "reichelt@igpm.rwth-aachen.de", "date": "2006-08-03T02:30:49Z"}, "committer": {"name": "Volker Reichelt", "email": "reichelt@gcc.gnu.org", "date": "2006-08-03T02:30:49Z"}, "message": "re PR c++/28274 (Redeclaration with extra default argument doesn't work)\n\n\tPR c++/28274\n\t* decl.c (duplicate_decls): Call check_default_args here.\n\t(start_preparsed_function): Do not call check_default_args.\n\t* name-lookup.c (pushdecl_maybe_friend): Only call\n\tcheck_default_args if duplicate_decls got bypassed.\n\n\t* g++.dg/other/default5.C: New test.\n\nFrom-SVN: r115893", "tree": {"sha": "fafca9eda28c4750146f1b5d20f8b090a70fe978", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fafca9eda28c4750146f1b5d20f8b090a70fe978"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a2f6dc05bb975426ff56d3656694684d292efbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a2f6dc05bb975426ff56d3656694684d292efbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a2f6dc05bb975426ff56d3656694684d292efbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a2f6dc05bb975426ff56d3656694684d292efbd/comments", "author": null, "committer": null, "parents": [{"sha": "74c5a70c23271e0f9af1a6eb6232a8f90681dbc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74c5a70c23271e0f9af1a6eb6232a8f90681dbc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74c5a70c23271e0f9af1a6eb6232a8f90681dbc0"}], "stats": {"total": 71, "additions": 66, "deletions": 5}, "files": [{"sha": "93d4d235949946fcb62db81f6e9994bb24811b25", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a2f6dc05bb975426ff56d3656694684d292efbd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a2f6dc05bb975426ff56d3656694684d292efbd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4a2f6dc05bb975426ff56d3656694684d292efbd", "patch": "@@ -1,3 +1,11 @@\n+2006-08-03  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\tPR c++/28274\n+\t* decl.c (duplicate_decls): Call check_default_args here.\n+\t(start_preparsed_function): Do not call check_default_args.\n+\t* name-lookup.c (pushdecl_maybe_friend): Only call\n+\tcheck_default_args if duplicate_decls got bypassed.\n+\n 2006-08-02  Richard Guenther  <rguenther@suse.de>\n \n \tPR c++/28479"}, {"sha": "0e2a87e4acdf5a298eb092e4895852a7aa33685b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a2f6dc05bb975426ff56d3656694684d292efbd/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a2f6dc05bb975426ff56d3656694684d292efbd/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4a2f6dc05bb975426ff56d3656694684d292efbd", "patch": "@@ -1691,6 +1691,9 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \tcheck_redeclaration_exception_specification (newdecl, olddecl);\n       TREE_TYPE (newdecl) = TREE_TYPE (olddecl) = newtype;\n \n+      if (TREE_CODE (newdecl) == FUNCTION_DECL)\n+\tcheck_default_args (newdecl);\n+\n       /* Lay the type out, unless already done.  */\n       if (! same_type_p (newtype, oldtype)\n \t  && TREE_TYPE (newdecl) != error_mark_node\n@@ -10435,8 +10438,6 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n      you declare a function, these types can be incomplete, but they\n      must be complete when you define the function.  */\n   check_function_type (decl1, current_function_parms);\n-  /* Make sure no default arg is missing.  */\n-  check_default_args (decl1);\n \n   /* Build the return declaration for the function.  */\n   restype = TREE_TYPE (fntype);"}, {"sha": "b32ebfd9f77dc3f36e1601d78dbf90dfc922b05f", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a2f6dc05bb975426ff56d3656694684d292efbd/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a2f6dc05bb975426ff56d3656694684d292efbd/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=4a2f6dc05bb975426ff56d3656694684d292efbd", "patch": "@@ -606,9 +606,6 @@ pushdecl_maybe_friend (tree x, bool is_friend)\n     {\n       int different_binding_level = 0;\n \n-      if (TREE_CODE (x) == FUNCTION_DECL || DECL_FUNCTION_TEMPLATE_P (x))\n-       check_default_args (x);\n-\n       if (TREE_CODE (name) == TEMPLATE_ID_EXPR)\n \tname = TREE_OPERAND (name, 0);\n \n@@ -751,6 +748,9 @@ pushdecl_maybe_friend (tree x, bool is_friend)\n \t    }\n \t}\n \n+      if (TREE_CODE (x) == FUNCTION_DECL || DECL_FUNCTION_TEMPLATE_P (x))\n+\tcheck_default_args (x);\n+\n       check_template_shadow (x);\n \n       /* If this is a function conjured up by the backend, massage it"}, {"sha": "8f17cab1d296f5676c85b2724dd643347790d18a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a2f6dc05bb975426ff56d3656694684d292efbd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a2f6dc05bb975426ff56d3656694684d292efbd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4a2f6dc05bb975426ff56d3656694684d292efbd", "patch": "@@ -1,3 +1,8 @@\n+2006-08-03  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\tPR c++/28274\n+\t* g++.dg/other/default5.C: New test.\n+\n 2006-08-02  Richard Guenther  <rguenther@suse.de>\n \n \t* g++.dg/tree-ssa/copyprop-1.C: XFAIL."}, {"sha": "ad7eb01298cf1cd9cbcec78b686cf8d9e5174a24", "filename": "gcc/testsuite/g++.dg/other/default5.C", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a2f6dc05bb975426ff56d3656694684d292efbd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdefault5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a2f6dc05bb975426ff56d3656694684d292efbd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdefault5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdefault5.C?ref=4a2f6dc05bb975426ff56d3656694684d292efbd", "patch": "@@ -0,0 +1,47 @@\n+// PR c++/28274\n+// { dg-do \"compile\" }\n+\n+void f1(int, int, int, int, int = 0);\n+void f1(int, int, int, int = 0, int);\n+void f1(int, int, int = 0, int, int);\n+void f1(int = 0, int, int, int, int);    // { dg-error \"default\" }\n+\n+void f2(int, int, int, int, int = 0) {}\n+void f2(int, int, int, int = 0, int);\n+void f2(int, int, int = 0, int, int);\n+void f2(int = 0, int, int, int, int);    // { dg-error \"default\" }\n+\n+void f3(int, int, int, int, int = 0);\n+void f3(int, int, int, int = 0, int) {}\n+void f3(int, int, int = 0, int, int);\n+void f3(int = 0, int, int, int, int);    // { dg-error \"default\" }\n+\n+void f4(int, int, int, int, int = 0);\n+void f4(int, int, int, int = 0, int);\n+void f4(int, int, int = 0, int, int) {}\n+void f4(int = 0, int, int, int, int);    // { dg-error \"default\" }\n+\n+void f5(int, int, int, int, int = 0);\n+void f5(int, int, int, int = 0, int);\n+void f5(int, int, int = 0, int, int);\n+void f5(int = 0, int, int, int, int) {}  // { dg-error \"default\" }\n+\n+\n+struct A\n+{\n+  void F1(int, int, int = 0);\n+  void F2(int, int, int = 0);\n+};\n+\n+void A::F1(int, int = 0, int) {}\n+void A::F2(int = 0, int, int) {}  // { dg-error \"default\" }\n+\n+\n+template<int> struct B\n+{\n+  void F1(int, int, int = 0);\n+  void F2(int, int, int = 0);\n+};\n+\n+template<int N> void B<N>::F1(int, int = 0, int) {}\n+template<int N> void B<N>::F2(int = 0, int, int) {}  // { dg-error \"default\" }"}]}