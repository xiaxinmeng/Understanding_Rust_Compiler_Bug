{"sha": "0886676007c494d1a74efb0512d31f36171f3b0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg4NjY3NjAwN2M0OTRkMWE3NGVmYjA1MTJkMzFmMzYxNzFmM2IwYw==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2014-04-03T13:02:27Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2014-04-03T13:02:27Z"}, "message": "rl78-expand.md (movqi): Handle (SUBREG (SYMBOL_REF)) properly.\n\n\t* config/rl78/rl78-expand.md (movqi): Handle (SUBREG (SYMBOL_REF))\n\tproperly.\n\nFrom-SVN: r209055", "tree": {"sha": "700a658b58e7c59384e9c221d8a9bc7ce1964b64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/700a658b58e7c59384e9c221d8a9bc7ce1964b64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0886676007c494d1a74efb0512d31f36171f3b0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0886676007c494d1a74efb0512d31f36171f3b0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0886676007c494d1a74efb0512d31f36171f3b0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0886676007c494d1a74efb0512d31f36171f3b0c/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5bed50e827ee7d43a3bd52fd7480fa1b33e25fdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bed50e827ee7d43a3bd52fd7480fa1b33e25fdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bed50e827ee7d43a3bd52fd7480fa1b33e25fdc"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "5d7eef5e68e1656888bc7391ca4c0e942cec4677", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0886676007c494d1a74efb0512d31f36171f3b0c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0886676007c494d1a74efb0512d31f36171f3b0c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0886676007c494d1a74efb0512d31f36171f3b0c", "patch": "@@ -1,3 +1,8 @@\n+2014-04-03  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/rl78/rl78-expand.md (movqi): Handle (SUBREG (SYMBOL_REF))\n+\tproperly.\n+\n 2014-04-03  Martin Jambor  <mjambor@suse.cz>\n \n \t* ipa-cp.c (ipcp_verify_propagated_values): Also dump symtab and"}, {"sha": "f61e444b5da8300eca695d071bb1e534094cb27e", "filename": "gcc/config/rl78/rl78-expand.md", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0886676007c494d1a74efb0512d31f36171f3b0c/gcc%2Fconfig%2Frl78%2Frl78-expand.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0886676007c494d1a74efb0512d31f36171f3b0c/gcc%2Fconfig%2Frl78%2Frl78-expand.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78-expand.md?ref=0886676007c494d1a74efb0512d31f36171f3b0c", "patch": "@@ -30,18 +30,23 @@\n     if (rl78_far_p (operands[0]) && rl78_far_p (operands[1]))\n       operands[1] = copy_to_mode_reg (QImode, operands[1]);\n \n-    /* FIXME: Not sure how GCC can generate (SUBREG (SYMBOL_REF)),\n-       but it does.  Since this makes no sense, reject it here.  */\n+    /* GCC can generate (SUBREG (SYMBOL_REF)) when it has to store a symbol\n+       into a bitfield, or a packed ordinary field.  We can handle this\n+       provided that the destination is a register.  If not, then load the\n+       source into a register first.  */\n     if (GET_CODE (operands[1]) == SUBREG\n-        && GET_CODE (XEXP (operands[1], 0)) == SYMBOL_REF)\n-      FAIL;\n+        && GET_CODE (XEXP (operands[1], 0)) == SYMBOL_REF\n+\t&& ! REG_P (operands[0]))\n+\toperands[1] = copy_to_mode_reg (QImode, operands[1]);\n+\n     /* Similarly for (SUBREG (CONST (PLUS (SYMBOL_REF)))).\n        cf. g++.dg/abi/packed.C.  */\n     if (GET_CODE (operands[1]) == SUBREG\n \t&& GET_CODE (XEXP (operands[1], 0)) == CONST\n         && GET_CODE (XEXP (XEXP (operands[1], 0), 0)) == PLUS\n-        && GET_CODE (XEXP (XEXP (XEXP (operands[1], 0), 0), 0)) == SYMBOL_REF)\n-      FAIL;\n+        && GET_CODE (XEXP (XEXP (XEXP (operands[1], 0), 0), 0)) == SYMBOL_REF\n+\t&& ! REG_P (operands[0]))\n+\toperands[1] = copy_to_mode_reg (QImode, operands[1]);\n \n     if (CONST_INT_P (operands[1]) && ! IN_RANGE (INTVAL (operands[1]), (-1 << 8) + 1, (1 << 8) - 1))\n       FAIL;"}]}