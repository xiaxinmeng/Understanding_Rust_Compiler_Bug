{"sha": "fc917b42658000f0c4dc87f6602336eef899fadf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM5MTdiNDI2NTgwMDBmMGM0ZGM4N2Y2NjAyMzM2ZWVmODk5ZmFkZg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-06-10T21:02:20Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-06-10T21:02:20Z"}, "message": "compiler: permit inlining functions with labels and goto statements\n    \n    This permits inlining functions with for loops and some switches, as\n    they are lowered to if and goto statements before exporting them.\n    \n    This by itself only adds three new inlinable functions in the standard\n    library: sort.Search, context.(*emptyCtx).String, and\n    cmd/go/internal/work.(*Builder).disableBuildID.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/181197\n\nFrom-SVN: r272131", "tree": {"sha": "a86e9441caa7fe457bf8274f297f2267ad7a5f0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a86e9441caa7fe457bf8274f297f2267ad7a5f0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc917b42658000f0c4dc87f6602336eef899fadf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc917b42658000f0c4dc87f6602336eef899fadf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc917b42658000f0c4dc87f6602336eef899fadf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc917b42658000f0c4dc87f6602336eef899fadf/comments", "author": null, "committer": null, "parents": [{"sha": "d480455f2ddc3b89d8547969be9cda939c41da56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d480455f2ddc3b89d8547969be9cda939c41da56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d480455f2ddc3b89d8547969be9cda939c41da56"}], "stats": {"total": 346, "additions": 321, "deletions": 25}, "files": [{"sha": "9dfa0670c5a962623ecfc05fc7aafd348b4988cc", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc917b42658000f0c4dc87f6602336eef899fadf/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc917b42658000f0c4dc87f6602336eef899fadf/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=fc917b42658000f0c4dc87f6602336eef899fadf", "patch": "@@ -1,4 +1,4 @@\n-3f7dcb98df3ce1d4e02d0072fd21e70dc08351db\n+11d96c36198b75b0485d16524d521e558cf03312\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "a48ca0767e62c3fef7f0f071ce8739fbd8437a33", "filename": "gcc/go/gofrontend/export.cc", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc917b42658000f0c4dc87f6602336eef899fadf/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc917b42658000f0c4dc87f6602336eef899fadf/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexport.cc?ref=fc917b42658000f0c4dc87f6602336eef899fadf", "patch": "@@ -1326,3 +1326,26 @@ Export_function_body::temporary_index(const Temporary_statement* temp)\n   go_assert(p != this->temporary_indexes_.end());\n   return p->second;\n }\n+\n+// Return the index of an unnamed label.  If it doesn't already have\n+// an index, give it one.\n+\n+unsigned int\n+Export_function_body::unnamed_label_index(const Unnamed_label* label)\n+{\n+  unsigned int next = this->next_label_index_;\n+  std::pair<const Unnamed_label*, unsigned int> val(label, next);\n+  std::pair<Unordered_map(const Unnamed_label*, unsigned int)::iterator,\n+\t    bool> ins =\n+    this->label_indexes_.insert(val);\n+  if (!ins.second)\n+    return ins.first->second;\n+  else\n+    {\n+      if (next > 0x7fffffff)\n+\tgo_error_at(label->location(),\n+\t\t    \"too many unnamed labels in export data\");\n+      ++this->next_label_index_;\n+      return next;\n+    }\n+}"}, {"sha": "910b1db43cdc92957577affa12afac9ceed38d38", "filename": "gcc/go/gofrontend/export.h", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc917b42658000f0c4dc87f6602336eef899fadf/gcc%2Fgo%2Fgofrontend%2Fexport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc917b42658000f0c4dc87f6602336eef899fadf/gcc%2Fgo%2Fgofrontend%2Fexport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexport.h?ref=fc917b42658000f0c4dc87f6602336eef899fadf", "patch": "@@ -21,6 +21,7 @@ class Package;\n class Import_init_set;\n class Backend;\n class Temporary_statement;\n+class Unnamed_label;\n \n // Codes used for the builtin types.  These are all negative to make\n // them easily distinct from the codes assigned by Export::write_type.\n@@ -309,7 +310,8 @@ class Export_function_body : public String_dump\n  public:\n   Export_function_body(Export* exp, int indent)\n     : exp_(exp), body_(), type_context_(NULL), next_temporary_index_(0),\n-      temporary_indexes_(), indent_(indent)\n+      temporary_indexes_(), next_label_index_(0), label_indexes_(),\n+      indent_(indent)\n   { }\n \n   // Write a character to the body.\n@@ -373,6 +375,11 @@ class Export_function_body : public String_dump\n   unsigned int\n   temporary_index(const Temporary_statement*);\n \n+  // Return the index of an unnamed label.  If it doesn't already have\n+  // an index, give it one.\n+  unsigned int\n+  unnamed_label_index(const Unnamed_label*);\n+\n   // Return a reference to the completed body.\n   const std::string&\n   body() const\n@@ -389,6 +396,10 @@ class Export_function_body : public String_dump\n   unsigned int next_temporary_index_;\n   // Map temporary statements to indexes.\n   Unordered_map(const Temporary_statement*, unsigned int) temporary_indexes_;\n+  // Index to give to the next unnamed label.\n+  unsigned int next_label_index_;\n+  // Map unnamed labels to indexes.\n+  Unordered_map(const Unnamed_label*, unsigned int) label_indexes_;\n   // Current indentation level: the number of spaces before each statement.\n   int indent_;\n };"}, {"sha": "02c1c48191b04b61e1c6edfe690ba28dfaa9d2bb", "filename": "gcc/go/gofrontend/import.cc", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc917b42658000f0c4dc87f6602336eef899fadf/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc917b42658000f0c4dc87f6602336eef899fadf/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.cc?ref=fc917b42658000f0c4dc87f6602336eef899fadf", "patch": "@@ -1612,23 +1612,31 @@ Import_function_body::read_type()\n   return type;\n }\n \n+// Return the next size to use for a vector mapping indexes to values.\n+\n+size_t\n+Import_function_body::next_size(size_t have)\n+{\n+  if (have == 0)\n+    return 8;\n+  else if (have < 256)\n+    return have * 2;\n+  else\n+    return have + 64;\n+}\n+\n // Record the index of a temporary statement.\n \n void\n Import_function_body::record_temporary(Temporary_statement* temp,\n \t\t\t\t       unsigned int idx)\n {\n   size_t have = this->temporaries_.size();\n-  if (static_cast<size_t>(idx) >= have)\n+  while (static_cast<size_t>(idx) >= have)\n     {\n-      size_t want;\n-      if (have == 0)\n-\twant = 8;\n-      else if (have < 256)\n-\twant = have * 2;\n-      else\n-\twant = have + 64;\n+      size_t want = Import_function_body::next_size(have);\n       this->temporaries_.resize(want, NULL);\n+      have = want;\n     }\n   this->temporaries_[idx] = temp;\n }\n@@ -1642,3 +1650,25 @@ Import_function_body::temporary_statement(unsigned int idx)\n     return NULL;\n   return this->temporaries_[idx];\n }\n+\n+// Return an unnamed label given an index, defining the label if we\n+// haven't seen it already.\n+\n+Unnamed_label*\n+Import_function_body::unnamed_label(unsigned int idx, Location loc)\n+{\n+  size_t have = this->labels_.size();\n+  while (static_cast<size_t>(idx) >= have)\n+    {\n+      size_t want = Import_function_body::next_size(have);\n+      this->labels_.resize(want, NULL);\n+      have = want;\n+    }\n+  Unnamed_label* label = this->labels_[idx];\n+  if (label == NULL)\n+    {\n+      label = new Unnamed_label(loc);\n+      this->labels_[idx] = label;\n+    }\n+  return label;\n+}"}, {"sha": "db51f726bf956b89d17482073ab2fb64dd2ce485", "filename": "gcc/go/gofrontend/import.h", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc917b42658000f0c4dc87f6602336eef899fadf/gcc%2Fgo%2Fgofrontend%2Fimport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc917b42658000f0c4dc87f6602336eef899fadf/gcc%2Fgo%2Fgofrontend%2Fimport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.h?ref=fc917b42658000f0c4dc87f6602336eef899fadf", "patch": "@@ -18,6 +18,8 @@ class Named_object;\n class Named_type;\n class Expression;\n class Import_function_body;\n+class Temporary_statement;\n+class Unnamed_label;\n \n // Expressions can be imported either directly from import data (for\n // simple constant expressions that can appear in a const declaration\n@@ -587,7 +589,7 @@ class Import_function_body : public Import_expression\n \t\t       const std::string& body, size_t off, Block* block,\n \t\t       int indent)\n     : gogo_(gogo), imp_(imp), named_object_(named_object), body_(body),\n-      off_(off), block_(block), indent_(indent), temporaries_(),\n+      off_(off), block_(block), indent_(indent), temporaries_(), labels_(),\n       saw_error_(false)\n   { }\n \n@@ -704,6 +706,11 @@ class Import_function_body : public Import_expression\n   Temporary_statement*\n   temporary_statement(unsigned int);\n \n+  // Return an unnamed label given an index, defining the label if we\n+  // haven't seen it already.\n+  Unnamed_label*\n+  unnamed_label(unsigned int, Location);\n+\n   // Implement Import_expression.\n   Import_function_body*\n   ifb()\n@@ -730,6 +737,9 @@ class Import_function_body : public Import_expression\n   { this->saw_error_ = true; }\n \n  private:\n+  static size_t\n+  next_size(size_t);\n+\n   // The IR.\n   Gogo* gogo_;\n   // The importer.\n@@ -747,6 +757,8 @@ class Import_function_body : public Import_expression\n   int indent_;\n   // Temporary statements by index.\n   std::vector<Temporary_statement*> temporaries_;\n+  // Unnamed labels by index.\n+  std::vector<Unnamed_label*> labels_;\n   // Whether we've seen an error.  Used to avoid reporting excess\n   // errors.\n   bool saw_error_;"}, {"sha": "9ab11727fe93851fac03ed5ed714015b0d2c7987", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 193, "deletions": 11, "changes": 204, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc917b42658000f0c4dc87f6602336eef899fadf/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc917b42658000f0c4dc87f6602336eef899fadf/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=fc917b42658000f0c4dc87f6602336eef899fadf", "patch": "@@ -129,10 +129,15 @@ Statement::import_statement(Import_function_body* ifb, Location loc)\n {\n   if (ifb->match_c_string(\"{\"))\n     {\n-      Block* block = Block_statement::do_import(ifb, loc);\n+      bool is_lowered_for_statement;\n+      Block* block = Block_statement::do_import(ifb, loc,\n+\t\t\t\t\t\t&is_lowered_for_statement);\n       if (block == NULL)\n \treturn Statement::make_error_statement(loc);\n-      return Statement::make_block_statement(block, loc);\n+      Block_statement* s = Statement::make_block_statement(block, loc);\n+      if (is_lowered_for_statement)\n+\ts->set_is_lowered_for_statement();\n+      return s;\n     }\n   else if (ifb->match_c_string(\"return\"))\n     {\n@@ -147,6 +152,10 @@ Statement::import_statement(Import_function_body* ifb, Location loc)\n     return Variable_declaration_statement::do_import(ifb, loc);\n   else if (ifb->match_c_string(\"if \"))\n     return If_statement::do_import(ifb, loc);\n+  else if (ifb->match_c_string(\":\"))\n+    return Label_statement::do_import(ifb, loc);\n+  else if (ifb->match_c_string(\"goto \"))\n+    return Goto_statement::do_import(ifb, loc);\n \n   Expression* lhs = Expression::import_expression(ifb, loc);\n   ifb->require_c_string(\" = \");\n@@ -2109,15 +2118,20 @@ Statement::make_statement(Expression* expr, bool is_ignored)\n void\n Block_statement::do_export_statement(Export_function_body* efb)\n {\n-  Block_statement::export_block(efb, this->block_);\n+  Block_statement::export_block(efb, this->block_,\n+\t\t\t\tthis->is_lowered_for_statement_);\n }\n \n void\n-Block_statement::export_block(Export_function_body* efb, Block* block)\n+Block_statement::export_block(Export_function_body* efb, Block* block,\n+\t\t\t      bool is_lowered_for_statement)\n {\n   // We are already indented to the right position.\n   char buf[50];\n-  snprintf(buf, sizeof buf, \"{ //%d\\n\",\n+  efb->write_c_string(\"{\");\n+  if (is_lowered_for_statement)\n+    efb->write_c_string(\" /*for*/\");\n+  snprintf(buf, sizeof buf, \" //%d\\n\",\n \t   Linemap::location_to_line(block->start_location()));\n   efb->write_c_string(buf);\n \n@@ -2134,9 +2148,16 @@ Block_statement::export_block(Export_function_body* efb, Block* block)\n // Import a block statement, returning the block.\n \n Block*\n-Block_statement::do_import(Import_function_body* ifb, Location loc)\n+Block_statement::do_import(Import_function_body* ifb, Location loc,\n+\t\t\t   bool* is_lowered_for_statement)\n {\n   go_assert(ifb->match_c_string(\"{\"));\n+  *is_lowered_for_statement = false;\n+  if (ifb->match_c_string(\" /*for*/\"))\n+    {\n+      ifb->advance(8);\n+      *is_lowered_for_statement = true;\n+    }\n   size_t nl = ifb->body().find('\\n', ifb->off());\n   if (nl == std::string::npos)\n     {\n@@ -2176,7 +2197,7 @@ Block_statement::do_dump_statement(Ast_dump_context*) const\n \n // Make a block statement.\n \n-Statement*\n+Block_statement*\n Statement::make_block_statement(Block* block, Location location)\n {\n   return new Block_statement(block, location);\n@@ -3344,6 +3365,61 @@ Goto_statement::do_get_backend(Translate_context* context)\n   return context->backend()->goto_statement(blabel, this->location());\n }\n \n+// Export a goto statement.\n+\n+void\n+Goto_statement::do_export_statement(Export_function_body *efb)\n+{\n+  efb->write_c_string(\"goto \");\n+  efb->write_string(this->label_->name());\n+}\n+\n+// Import a goto or goto unnamed statement.\n+\n+Statement*\n+Goto_statement::do_import(Import_function_body* ifb, Location loc)\n+{\n+  ifb->require_c_string(\"goto \");\n+  std::string id = ifb->read_identifier();\n+  if (id[0] != '$')\n+    {\n+      Function* fn = ifb->function()->func_value();\n+      Label* label = fn->add_label_reference(ifb->gogo(), id, loc, false);\n+      return Statement::make_goto_statement(label, loc);\n+    }\n+  else\n+    {\n+      if (id[1] != 'l')\n+\t{\n+\t  if (!ifb->saw_error())\n+\t    go_error_at(loc,\n+\t\t\t(\"invalid export data for %qs: \"\n+\t\t\t \"bad unnamed label at %lu\"),\n+\t\t\tifb->name().c_str(),\n+\t\t\tstatic_cast<unsigned long>(ifb->off()));\n+\t  ifb->set_saw_error();\n+\t  return Statement::make_error_statement(loc);\n+\t}\n+      const char* p = id.c_str();\n+      char* end;\n+      long idx = strtol(p + 2, &end, 10);\n+      if (*end != '\\0' || idx > 0x7fffffff)\n+\t{\n+\t  if (!ifb->saw_error())\n+\t    go_error_at(loc,\n+\t\t\t(\"invalid export data for %qs: \"\n+\t\t\t \"bad unnamed label index at %lu\"),\n+\t\t\tifb->name().c_str(),\n+\t\t\tstatic_cast<unsigned long>(ifb->off()));\n+\t  ifb->set_saw_error();\n+\t  return Statement::make_error_statement(loc);\n+\t}\n+\n+      Unnamed_label* label = ifb->unnamed_label(idx, loc);\n+      return Statement::make_goto_unnamed_statement(label, loc);\n+    }\n+}\n+\n // Dump the AST representation for a goto statement.\n \n void\n@@ -3377,6 +3453,17 @@ Goto_unnamed_statement::do_get_backend(Translate_context* context)\n   return this->label_->get_goto(context, this->location());\n }\n \n+// Export a goto unnamed statement.\n+\n+void\n+Goto_unnamed_statement::do_export_statement(Export_function_body *efb)\n+{\n+  unsigned int index = efb->unnamed_label_index(this->label_);\n+  char buf[100];\n+  snprintf(buf, sizeof buf, \"goto $l%u\", index);\n+  efb->write_c_string(buf);\n+}\n+\n // Dump the AST representation for an unnamed goto statement\n \n void\n@@ -3424,6 +3511,64 @@ Label_statement::do_get_backend(Translate_context* context)\n   return context->backend()->label_definition_statement(blabel);\n }\n \n+// Export a label.\n+\n+void\n+Label_statement::do_export_statement(Export_function_body* efb)\n+{\n+  if (this->label_->is_dummy_label())\n+    return;\n+  // We use a leading colon, not a trailing one, to simplify import.\n+  efb->write_c_string(\":\");\n+  efb->write_string(this->label_->name());\n+}\n+\n+// Import a label or an unnamed label.\n+\n+Statement*\n+Label_statement::do_import(Import_function_body* ifb, Location loc)\n+{\n+  ifb->require_c_string(\":\");\n+  std::string id = ifb->read_identifier();\n+  if (id[0] != '$')\n+    {\n+      Function* fn = ifb->function()->func_value();\n+      Label* label = fn->add_label_definition(ifb->gogo(), id, loc);\n+      return Statement::make_label_statement(label, loc);\n+    }\n+  else\n+    {\n+      if (id[1] != 'l')\n+\t{\n+\t  if (!ifb->saw_error())\n+\t    go_error_at(loc,\n+\t\t\t(\"invalid export data for %qs: \"\n+\t\t\t \"bad unnamed label at %lu\"),\n+\t\t\tifb->name().c_str(),\n+\t\t\tstatic_cast<unsigned long>(ifb->off()));\n+\t  ifb->set_saw_error();\n+\t  return Statement::make_error_statement(loc);\n+\t}\n+      const char* p = id.c_str();\n+      char* end;\n+      long idx = strtol(p + 2, &end, 10);\n+      if (*end != '\\0' || idx > 0x7fffffff)\n+\t{\n+\t  if (!ifb->saw_error())\n+\t    go_error_at(loc,\n+\t\t\t(\"invalid export data for %qs: \"\n+\t\t\t \"bad unnamed label index at %lu\"),\n+\t\t\tifb->name().c_str(),\n+\t\t\tstatic_cast<unsigned long>(ifb->off()));\n+\t  ifb->set_saw_error();\n+\t  return Statement::make_error_statement(loc);\n+\t}\n+\n+      Unnamed_label* label = ifb->unnamed_label(idx, loc);\n+      return Statement::make_unnamed_label_statement(label);\n+    }\n+}\n+\n // Dump the AST for a label definition statement.\n \n void\n@@ -3462,6 +3607,18 @@ Unnamed_label_statement::do_get_backend(Translate_context* context)\n   return this->label_->get_definition(context);\n }\n \n+// Export an unnamed label.\n+\n+void\n+Unnamed_label_statement::do_export_statement(Export_function_body* efb)\n+{\n+  unsigned int index = efb->unnamed_label_index(this->label_);\n+  char buf[50];\n+  // We use a leading colon, not a trailing one, to simplify import.\n+  snprintf(buf, sizeof buf, \":$l%u\", index);\n+  efb->write_c_string(buf);\n+}\n+\n // Dump the AST representation for an unnamed label definition statement.\n \n void\n@@ -3557,11 +3714,11 @@ If_statement::do_export_statement(Export_function_body* efb)\n   efb->write_c_string(\"if \");\n   this->cond_->export_expression(efb);\n   efb->write_c_string(\" \");\n-  Block_statement::export_block(efb, this->then_block_);\n+  Block_statement::export_block(efb, this->then_block_, false);\n   if (this->else_block_ != NULL)\n     {\n       efb->write_c_string(\" else \");\n-      Block_statement::export_block(efb, this->else_block_);\n+      Block_statement::export_block(efb, this->else_block_, false);\n     }\n }\n \n@@ -3588,9 +3745,22 @@ If_statement::do_import(Import_function_body* ifb, Location loc)\n       return Statement::make_error_statement(loc);\n     }\n \n-  Block* then_block = Block_statement::do_import(ifb, loc);\n+  bool is_lowered_for_statement;\n+  Block* then_block = Block_statement::do_import(ifb, loc,\n+\t\t\t\t\t\t &is_lowered_for_statement);\n   if (then_block == NULL)\n     return Statement::make_error_statement(loc);\n+  if (is_lowered_for_statement)\n+    {\n+      if (!ifb->saw_error())\n+\tgo_error_at(ifb->location(),\n+\t\t    (\"import error for %qs: \"\n+\t\t     \"unexpected lowered for in if statement at %lu\"),\n+\t\t    ifb->name().c_str(),\n+\t\t    static_cast<unsigned long>(ifb->off()));\n+      ifb->set_saw_error();\n+      return Statement::make_error_statement(loc);\n+    }\n \n   Block* else_block = NULL;\n   if (ifb->match_c_string(\" else \"))\n@@ -3608,9 +3778,21 @@ If_statement::do_import(Import_function_body* ifb, Location loc)\n \t  return Statement::make_error_statement(loc);\n \t}\n \n-      else_block = Block_statement::do_import(ifb, loc);\n+      else_block = Block_statement::do_import(ifb, loc,\n+\t\t\t\t\t      &is_lowered_for_statement);\n       if (else_block == NULL)\n \treturn Statement::make_error_statement(loc);\n+      if (is_lowered_for_statement)\n+\t{\n+\t  if (!ifb->saw_error())\n+\t    go_error_at(ifb->location(),\n+\t\t\t(\"import error for %qs: \"\n+\t\t\t \"unexpected lowered for in if statement at %lu\"),\n+\t\t\tifb->name().c_str(),\n+\t\t\tstatic_cast<unsigned long>(ifb->off()));\n+\t  ifb->set_saw_error();\n+\t  return Statement::make_error_statement(loc);\n+\t}\n     }\n \n   return Statement::make_if_statement(cond, then_block, else_block, loc);"}, {"sha": "432da30f7e6bc9447051eefd6ed31f8007caf3b6", "filename": "gcc/go/gofrontend/statements.h", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc917b42658000f0c4dc87f6602336eef899fadf/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc917b42658000f0c4dc87f6602336eef899fadf/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.h?ref=fc917b42658000f0c4dc87f6602336eef899fadf", "patch": "@@ -187,7 +187,7 @@ class Statement\n \n   // Make a block statement from a Block.  This is an embedded list of\n   // statements which may also include variable definitions.\n-  static Statement*\n+  static Block_statement*\n   make_block_statement(Block*, Location);\n \n   // Make an increment statement.\n@@ -956,11 +956,13 @@ class Block_statement : public Statement\n \n   // Export a block for a block statement.\n   static void\n-  export_block(Export_function_body*, Block*);\n+  export_block(Export_function_body*, Block*, bool is_lowered_for_statement);\n \n   // Import a block statement, returning the block.\n+  // *IS_LOWERED_FOR_STATEMENT reports whether this block statement\n+  // was lowered from a for statement.\n   static Block*\n-  do_import(Import_function_body*, Location);\n+  do_import(Import_function_body*, Location, bool* is_lowered_for_statement);\n \n  protected:\n   int\n@@ -1409,6 +1411,10 @@ class Goto_statement : public Statement\n   label() const\n   { return this->label_; }\n \n+  // Import a goto statement.\n+  static Statement*\n+  do_import(Import_function_body*, Location);\n+\n  protected:\n   int\n   do_traverse(Traverse*);\n@@ -1423,6 +1429,13 @@ class Goto_statement : public Statement\n   Bstatement*\n   do_get_backend(Translate_context*);\n \n+  int\n+  do_inlining_cost()\n+  { return 5; }\n+\n+  void\n+  do_export_statement(Export_function_body*);\n+\n   void\n   do_dump_statement(Ast_dump_context*) const;\n \n@@ -1455,6 +1468,13 @@ class Goto_unnamed_statement : public Statement\n   Bstatement*\n   do_get_backend(Translate_context* context);\n \n+  int\n+  do_inlining_cost()\n+  { return 5; }\n+\n+  void\n+  do_export_statement(Export_function_body*);\n+\n   void\n   do_dump_statement(Ast_dump_context*) const;\n \n@@ -1477,13 +1497,24 @@ class Label_statement : public Statement\n   label() const\n   { return this->label_; }\n \n+  // Import a label or unnamed label.\n+  static Statement*\n+  do_import(Import_function_body*, Location);\n+\n  protected:\n   int\n   do_traverse(Traverse*);\n \n   Bstatement*\n   do_get_backend(Translate_context*);\n \n+  int\n+  do_inlining_cost()\n+  { return 1; }\n+\n+  void\n+  do_export_statement(Export_function_body*);\n+\n   void\n   do_dump_statement(Ast_dump_context*) const;\n \n@@ -1506,6 +1537,13 @@ class Unnamed_label_statement : public Statement\n   Bstatement*\n   do_get_backend(Translate_context* context);\n \n+  int\n+  do_inlining_cost()\n+  { return 1; }\n+\n+  void\n+  do_export_statement(Export_function_body*);\n+\n   void\n   do_dump_statement(Ast_dump_context*) const;\n "}]}