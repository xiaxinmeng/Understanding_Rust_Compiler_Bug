{"sha": "6f5add73cd2e49d770b4ff4255f06381e8cfd6cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY1YWRkNzNjZDJlNDlkNzcwYjRmZjQyNTVmMDYzODFlOGNmZDZjYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-27T09:48:14Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-27T09:48:14Z"}, "message": "[multiple changes]\n\n2011-09-27  Pascal Obry  <obry@adacore.com>\n\n\t* s-osinte-hpux.ads, s-osinte-aix.ads, s-osinte-solaris-posix.ads,\n\ts-osinte-irix.ads, s-osinte-darwin.ads, s-osinte-freebsd.ads:\n\tAdd dummy definitions for pthread_rwlock_t\n\tand pthread_rwlockattr_t on all POSIX platforms.\n\t* s-taprop-irix.adb, s-taprop-posix.adb (Initialize_Lock): Fix lock\n\treference.\n\t(Finalize_Lock): Likewise.\n\t(Write_Lock): Likewise.\n\t(Unlock): Likewise.\n\n2011-09-27  Tristan Gingold  <gingold@adacore.com>\n\n\t* s-tassta.adb (Task_Wrapper): Increase Guard_Page_Size value for\n\twindows 64.\n\nFrom-SVN: r179254", "tree": {"sha": "4fe983c2574ac0440a540e852d5684784c3ffdf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fe983c2574ac0440a540e852d5684784c3ffdf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f5add73cd2e49d770b4ff4255f06381e8cfd6cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f5add73cd2e49d770b4ff4255f06381e8cfd6cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f5add73cd2e49d770b4ff4255f06381e8cfd6cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f5add73cd2e49d770b4ff4255f06381e8cfd6cb/comments", "author": null, "committer": null, "parents": [{"sha": "64a63cd58bbe195dfa0041d84efbb7062d649b35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64a63cd58bbe195dfa0041d84efbb7062d649b35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64a63cd58bbe195dfa0041d84efbb7062d649b35"}], "stats": {"total": 83, "additions": 74, "deletions": 9}, "files": [{"sha": "51e8176bda3d2faacf49cd874a1c924670849744", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f5add73cd2e49d770b4ff4255f06381e8cfd6cb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f5add73cd2e49d770b4ff4255f06381e8cfd6cb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6f5add73cd2e49d770b4ff4255f06381e8cfd6cb", "patch": "@@ -1,3 +1,20 @@\n+2011-09-27  Pascal Obry  <obry@adacore.com>\n+\n+\t* s-osinte-hpux.ads, s-osinte-aix.ads, s-osinte-solaris-posix.ads,\n+\ts-osinte-irix.ads, s-osinte-darwin.ads, s-osinte-freebsd.ads:\n+\tAdd dummy definitions for pthread_rwlock_t\n+\tand pthread_rwlockattr_t on all POSIX platforms.\n+\t* s-taprop-irix.adb, s-taprop-posix.adb (Initialize_Lock): Fix lock\n+\treference.\n+\t(Finalize_Lock): Likewise.\n+\t(Write_Lock): Likewise.\n+\t(Unlock): Likewise.\n+\n+2011-09-27  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* s-tassta.adb (Task_Wrapper): Increase Guard_Page_Size value for\n+\twindows 64.\n+\n 2011-09-27  Pascal Obry  <obry@adacore.com>\n \n \t* s-osinte-hpux.ads, s-taprop-vxworks.adb, s-taspri-vxworks.ads,"}, {"sha": "c8e660826042b503f4e0eaa241a74f22d48d7072", "filename": "gcc/ada/s-osinte-aix.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f5add73cd2e49d770b4ff4255f06381e8cfd6cb/gcc%2Fada%2Fs-osinte-aix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f5add73cd2e49d770b4ff4255f06381e8cfd6cb/gcc%2Fada%2Fs-osinte-aix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-aix.ads?ref=6f5add73cd2e49d770b4ff4255f06381e8cfd6cb", "patch": "@@ -276,6 +276,14 @@ package System.OS_Interface is\n    PTHREAD_SCOPE_PROCESS : constant := 1;\n    PTHREAD_SCOPE_SYSTEM  : constant := 0;\n \n+   --  Read/Write lock not supported on AIX. To add support both types\n+   --  pthread_rwlock_t and pthread_rwlockattr_t must properly be defined\n+   --  with the associated routines pthread_rwlock_[init/destroy] and\n+   --  pthread_rwlock_[rdlock/wrlock/unlock].\n+\n+   subtype pthread_rwlock_t     is pthread_mutex_t;\n+   subtype pthread_rwlockattr_t is pthread_mutexattr_t;\n+\n    -----------\n    -- Stack --\n    -----------"}, {"sha": "fe2a10a33152b872ba602bb3efaec3cc9b871232", "filename": "gcc/ada/s-osinte-darwin.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f5add73cd2e49d770b4ff4255f06381e8cfd6cb/gcc%2Fada%2Fs-osinte-darwin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f5add73cd2e49d770b4ff4255f06381e8cfd6cb/gcc%2Fada%2Fs-osinte-darwin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-darwin.ads?ref=6f5add73cd2e49d770b4ff4255f06381e8cfd6cb", "patch": "@@ -256,6 +256,14 @@ package System.OS_Interface is\n    PTHREAD_SCOPE_PROCESS : constant := 2;\n    PTHREAD_SCOPE_SYSTEM  : constant := 1;\n \n+   --  Read/Write lock not supported on Darwin. To add support both types\n+   --  pthread_rwlock_t and pthread_rwlockattr_t must properly be defined\n+   --  with the associated routines pthread_rwlock_[init/destroy] and\n+   --  pthread_rwlock_[rdlock/wrlock/unlock].\n+\n+   subtype pthread_rwlock_t     is pthread_mutex_t;\n+   subtype pthread_rwlockattr_t is pthread_mutexattr_t;\n+\n    -----------\n    -- Stack --\n    -----------"}, {"sha": "d3d5c8763e410bfd814a404759a5d42f98732d5e", "filename": "gcc/ada/s-osinte-freebsd.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f5add73cd2e49d770b4ff4255f06381e8cfd6cb/gcc%2Fada%2Fs-osinte-freebsd.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f5add73cd2e49d770b4ff4255f06381e8cfd6cb/gcc%2Fada%2Fs-osinte-freebsd.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-freebsd.ads?ref=6f5add73cd2e49d770b4ff4255f06381e8cfd6cb", "patch": "@@ -289,6 +289,14 @@ package System.OS_Interface is\n    PTHREAD_SCOPE_PROCESS : constant := 0;\n    PTHREAD_SCOPE_SYSTEM  : constant := 2;\n \n+   --  Read/Write lock not supported on freebsd. To add support both types\n+   --  pthread_rwlock_t and pthread_rwlockattr_t must properly be defined\n+   --  with the associated routines pthread_rwlock_[init/destroy] and\n+   --  pthread_rwlock_[rdlock/wrlock/unlock].\n+\n+   subtype pthread_rwlock_t     is pthread_mutex_t;\n+   subtype pthread_rwlockattr_t is pthread_mutexattr_t;\n+\n    -----------\n    -- Stack --\n    -----------"}, {"sha": "bc9a7091d6fba4279ad7164d68d3d1a485bb385a", "filename": "gcc/ada/s-osinte-hpux.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f5add73cd2e49d770b4ff4255f06381e8cfd6cb/gcc%2Fada%2Fs-osinte-hpux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f5add73cd2e49d770b4ff4255f06381e8cfd6cb/gcc%2Fada%2Fs-osinte-hpux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-hpux.ads?ref=6f5add73cd2e49d770b4ff4255f06381e8cfd6cb", "patch": "@@ -265,6 +265,14 @@ package System.OS_Interface is\n    PTHREAD_SCOPE_PROCESS : constant := 2;\n    PTHREAD_SCOPE_SYSTEM  : constant := 1;\n \n+   --  Read/Write lock not supported on HPUX. To add support both types\n+   --  pthread_rwlock_t and pthread_rwlockattr_t must properly be defined\n+   --  with the associated routines pthread_rwlock_[init/destroy] and\n+   --  pthread_rwlock_[rdlock/wrlock/unlock].\n+\n+   subtype pthread_rwlock_t     is pthread_mutex_t;\n+   subtype pthread_rwlockattr_t is pthread_mutexattr_t;\n+\n    -----------\n    -- Stack --\n    -----------"}, {"sha": "ddeadcb61476d28242076f2e05b432bee60a6e46", "filename": "gcc/ada/s-osinte-irix.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f5add73cd2e49d770b4ff4255f06381e8cfd6cb/gcc%2Fada%2Fs-osinte-irix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f5add73cd2e49d770b4ff4255f06381e8cfd6cb/gcc%2Fada%2Fs-osinte-irix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-irix.ads?ref=6f5add73cd2e49d770b4ff4255f06381e8cfd6cb", "patch": "@@ -250,6 +250,14 @@ package System.OS_Interface is\n \n    PTHREAD_CREATE_DETACHED : constant := 1;\n \n+   --  Read/Write lock not supported on SGI. To add support both types\n+   --  pthread_rwlock_t and pthread_rwlockattr_t must properly be defined\n+   --  with the associated routines pthread_rwlock_[init/destroy] and\n+   --  pthread_rwlock_[rdlock/wrlock/unlock].\n+\n+   subtype pthread_rwlock_t     is pthread_mutex_t;\n+   subtype pthread_rwlockattr_t is pthread_mutexattr_t;\n+\n    -----------\n    -- Stack --\n    -----------"}, {"sha": "8781a12dd6782f54b64743c8449729856079960a", "filename": "gcc/ada/s-osinte-solaris-posix.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f5add73cd2e49d770b4ff4255f06381e8cfd6cb/gcc%2Fada%2Fs-osinte-solaris-posix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f5add73cd2e49d770b4ff4255f06381e8cfd6cb/gcc%2Fada%2Fs-osinte-solaris-posix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-solaris-posix.ads?ref=6f5add73cd2e49d770b4ff4255f06381e8cfd6cb", "patch": "@@ -255,6 +255,14 @@ package System.OS_Interface is\n    type pthread_condattr_t  is limited private;\n    type pthread_key_t       is private;\n \n+   --  Read/Write lock not supported on Solaris. To add support both types\n+   --  pthread_rwlock_t and pthread_rwlockattr_t must properly be defined\n+   --  with the associated routines pthread_rwlock_[init/destroy] and\n+   --  pthread_rwlock_[rdlock/wrlock/unlock].\n+\n+   subtype pthread_rwlock_t     is pthread_mutex_t;\n+   subtype pthread_rwlockattr_t is pthread_mutexattr_t;\n+\n    PTHREAD_CREATE_DETACHED : constant := 16#40#;\n \n    PTHREAD_SCOPE_PROCESS : constant := 0;"}, {"sha": "5b4d4bef16e43ff4716589f19192c25a4f8c09f2", "filename": "gcc/ada/s-taprop-irix.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f5add73cd2e49d770b4ff4255f06381e8cfd6cb/gcc%2Fada%2Fs-taprop-irix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f5add73cd2e49d770b4ff4255f06381e8cfd6cb/gcc%2Fada%2Fs-taprop-irix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-irix.adb?ref=6f5add73cd2e49d770b4ff4255f06381e8cfd6cb", "patch": "@@ -255,7 +255,7 @@ package body System.Task_Primitives.Operations is\n          pragma Assert (Result = 0);\n       end if;\n \n-      Result := pthread_mutex_init (L, Attributes'Access);\n+      Result := pthread_mutex_init (L.WO'Access, Attributes'Access);\n       pragma Assert (Result = 0 or else Result = ENOMEM);\n \n       if Result = ENOMEM then\n@@ -314,7 +314,7 @@ package body System.Task_Primitives.Operations is\n    procedure Finalize_Lock (L : not null access Lock) is\n       Result : Interfaces.C.int;\n    begin\n-      Result := pthread_mutex_destroy (L);\n+      Result := pthread_mutex_destroy (L.WO'Access);\n       pragma Assert (Result = 0);\n    end Finalize_Lock;\n \n@@ -335,7 +335,7 @@ package body System.Task_Primitives.Operations is\n       Result : Interfaces.C.int;\n \n    begin\n-      Result := pthread_mutex_lock (L);\n+      Result := pthread_mutex_lock (L.WO'Access);\n       Ceiling_Violation := Result = EINVAL;\n \n       --  Assumes the cause of EINVAL is a priority ceiling violation\n@@ -381,7 +381,7 @@ package body System.Task_Primitives.Operations is\n    procedure Unlock (L : not null access Lock) is\n       Result : Interfaces.C.int;\n    begin\n-      Result := pthread_mutex_unlock (L);\n+      Result := pthread_mutex_unlock (L.WO'Access);\n       pragma Assert (Result = 0);\n    end Unlock;\n "}, {"sha": "1dec99966eefa5d4bdb2199e31e4d37a2f277b28", "filename": "gcc/ada/s-taprop-posix.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f5add73cd2e49d770b4ff4255f06381e8cfd6cb/gcc%2Fada%2Fs-taprop-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f5add73cd2e49d770b4ff4255f06381e8cfd6cb/gcc%2Fada%2Fs-taprop-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-posix.adb?ref=6f5add73cd2e49d770b4ff4255f06381e8cfd6cb", "patch": "@@ -310,7 +310,7 @@ package body System.Task_Primitives.Operations is\n          pragma Assert (Result = 0);\n       end if;\n \n-      Result := pthread_mutex_init (L, Attributes'Access);\n+      Result := pthread_mutex_init (L.WO'Access, Attributes'Access);\n       pragma Assert (Result = 0 or else Result = ENOMEM);\n \n       if Result = ENOMEM then\n@@ -372,7 +372,7 @@ package body System.Task_Primitives.Operations is\n    procedure Finalize_Lock (L : not null access Lock) is\n       Result : Interfaces.C.int;\n    begin\n-      Result := pthread_mutex_destroy (L);\n+      Result := pthread_mutex_destroy (L.WO'Access);\n       pragma Assert (Result = 0);\n    end Finalize_Lock;\n \n@@ -393,7 +393,7 @@ package body System.Task_Primitives.Operations is\n       Result : Interfaces.C.int;\n \n    begin\n-      Result := pthread_mutex_lock (L);\n+      Result := pthread_mutex_lock (L.WO'Access);\n \n       --  Assume that the cause of EINVAL is a priority ceiling violation\n \n@@ -439,7 +439,7 @@ package body System.Task_Primitives.Operations is\n    procedure Unlock (L : not null access Lock) is\n       Result : Interfaces.C.int;\n    begin\n-      Result := pthread_mutex_unlock (L);\n+      Result := pthread_mutex_unlock (L.WO'Access);\n       pragma Assert (Result = 0);\n    end Unlock;\n "}, {"sha": "27c847df6e9aadcd8a7fca327fa84e42ef6e5352", "filename": "gcc/ada/s-tassta.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f5add73cd2e49d770b4ff4255f06381e8cfd6cb/gcc%2Fada%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f5add73cd2e49d770b4ff4255f06381e8cfd6cb/gcc%2Fada%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.adb?ref=6f5add73cd2e49d770b4ff4255f06381e8cfd6cb", "patch": "@@ -1164,7 +1164,7 @@ package body System.Tasking.Stages is\n \n       if System.Stack_Usage.Is_Enabled then\n          declare\n-            Guard_Page_Size : constant := 12 * 1024;\n+            Guard_Page_Size : constant := 16 * 1024;\n             --  Part of the stack used as a guard page. This is an OS dependent\n             --  value, so we need to use the maximum. This value is only used\n             --  when the stack address is known, that is currently Windows."}]}