{"sha": "2352eadb81e329fad9adbead81db9203610aa19a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM1MmVhZGI4MWUzMjlmYWQ5YWRiZWFkODFkYjkyMDM2MTBhYTE5YQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-03T08:11:48Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-03T08:11:48Z"}, "message": "[multiple changes]\n\n2012-10-03  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (New_Overloaded_Entity): call\n\tAppend_Inherited_Subprogram when appropriate.\n\t* sem_dim.adb (Analyze_Dimension_Call): Do not perform dimensional\n\tanalysis if call has previous semantic error.\n\t* sem_util.ads, sem_util.adb (Append_Inherited_Subprogram):\n\tnew subprogram to handle properly the visibility of inherited\n\toperations that are primitives of a type extension, when the\n\tparent type and operations are declared in the same visible part.\n\n2012-10-03  Robert Dewar  <dewar@adacore.com>\n\n\t* checks.adb (Minimize_Eliminate_Overflow_Checks): Properly\n\thandle case of top level expression within type conversion\n\t* gnat1drv.adb (Adjust_Global_Switches): Set SUPPRESSED as\n\tdefault for overflow checking for -gnatg mode (includes run-time).\n\t* sem_res.adb (Resolve_Type_Conversion): Avoid bogus warnings\n\tabout redundant conversions from MINIMIZED/EXTENDED mode checking\n\nFrom-SVN: r192029", "tree": {"sha": "a5a384c168433a8465e44219426e2ef58fc13a97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5a384c168433a8465e44219426e2ef58fc13a97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2352eadb81e329fad9adbead81db9203610aa19a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2352eadb81e329fad9adbead81db9203610aa19a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2352eadb81e329fad9adbead81db9203610aa19a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2352eadb81e329fad9adbead81db9203610aa19a/comments", "author": null, "committer": null, "parents": [{"sha": "3bfb3c03da7b29ad8d4fd6a303ac2cab9a94ca5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bfb3c03da7b29ad8d4fd6a303ac2cab9a94ca5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bfb3c03da7b29ad8d4fd6a303ac2cab9a94ca5f"}], "stats": {"total": 123, "additions": 115, "deletions": 8}, "files": [{"sha": "d11055f81db9b21195732340c80cd42f2a1e9935", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2352eadb81e329fad9adbead81db9203610aa19a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2352eadb81e329fad9adbead81db9203610aa19a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2352eadb81e329fad9adbead81db9203610aa19a", "patch": "@@ -1,3 +1,23 @@\n+2012-10-03  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (New_Overloaded_Entity): call\n+\tAppend_Inherited_Subprogram when appropriate.\n+\t* sem_dim.adb (Analyze_Dimension_Call): Do not perform dimensional\n+\tanalysis if call has previous semantic error.\n+\t* sem_util.ads, sem_util.adb (Append_Inherited_Subprogram):\n+\tnew subprogram to handle properly the visibility of inherited\n+\toperations that are primitives of a type extension, when the\n+\tparent type and operations are declared in the same visible part.\n+\n+2012-10-03  Robert Dewar  <dewar@adacore.com>\n+\n+\t* checks.adb (Minimize_Eliminate_Overflow_Checks): Properly\n+\thandle case of top level expression within type conversion\n+\t* gnat1drv.adb (Adjust_Global_Switches): Set SUPPRESSED as\n+\tdefault for overflow checking for -gnatg mode (includes run-time).\n+\t* sem_res.adb (Resolve_Type_Conversion): Avoid bogus warnings\n+\tabout redundant conversions from MINIMIZED/EXTENDED mode checking\n+\n 2012-10-03  Javier Miranda  <miranda@adacore.com>\n \n \t* exp_ch4.adb (Expand_N_Allocator_Expression): Minor code"}, {"sha": "d74a05c11fe0f0a422e57e86590624bf17283bfe", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2352eadb81e329fad9adbead81db9203610aa19a/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2352eadb81e329fad9adbead81db9203610aa19a/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=2352eadb81e329fad9adbead81db9203610aa19a", "patch": "@@ -7404,6 +7404,16 @@ package body Checks is\n \n       elsif Top_Level\n         and then not (Bignum_Operands or Long_Long_Integer_Operands)\n+\n+        --  One further refinement. If we are at the top level, but our parent\n+        --  is a type conversion, then go into bignum or long long integer node\n+        --  since the result will be converted to that type directly without\n+        --  going through the result type, and we may avoid an overflow. This\n+        --  is the case for example of Long_Long_Integer (A ** 4), where A is\n+        --  of type Integer, and the result A ** 4 fits in Long_Long_Integer\n+        --  but does not fit in Integer.\n+\n+        and then Nkind (Parent (N)) /= N_Type_Conversion\n       then\n          --  Here we will keep the original types, but we do need an overflow\n          --  check, so we will set Do_Overflow_Check to True (actually it is\n@@ -7561,12 +7571,6 @@ package body Checks is\n \n       if Nkind (N) = N_Op_Expon and then Etype (Right_Opnd (N)) = LLIB then\n          Convert_To_And_Rewrite (Standard_Natural, Right_Opnd (N));\n-\n-         --  Now Long_Long_Integer_Operands may have to be reset if that was\n-         --  the only long long integer operand, i.e. we now have long long\n-         --  integer operands only if the left operand is long long integer.\n-\n-         Long_Long_Integer_Operands := Etype (Left_Opnd (N)) = LLIB;\n       end if;\n \n       --  Here we will do the operation in Long_Long_Integer. We do this even"}, {"sha": "2d79edfeca9370d4df88e9e0b8c65a47886f88d1", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2352eadb81e329fad9adbead81db9203610aa19a/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2352eadb81e329fad9adbead81db9203610aa19a/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=2352eadb81e329fad9adbead81db9203610aa19a", "patch": "@@ -334,6 +334,12 @@ procedure Gnat1drv is\n       if Opt.Suppress_Options.Overflow_Checks_General /= Not_Set then\n          null;\n \n+      --  By default suppress overflow checks in -gnatg mode\n+\n+      elsif GNAT_Mode then\n+         Suppress_Options.Overflow_Checks_General    := Suppressed;\n+         Suppress_Options.Overflow_Checks_Assertions := Suppressed;\n+\n       --  If we have backend divide and overflow checks, then by default\n       --  overflow checks are minimized, which is a reasonable setting.\n "}, {"sha": "ea92eb932957057b48c8dcae4718730763076d8f", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2352eadb81e329fad9adbead81db9203610aa19a/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2352eadb81e329fad9adbead81db9203610aa19a/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=2352eadb81e329fad9adbead81db9203610aa19a", "patch": "@@ -8063,7 +8063,12 @@ package body Sem_Ch6 is\n \n       Set_Homonym (S, E);\n \n-      Append_Entity (S, Current_Scope);\n+      if Is_Inherited_Operation (S) then\n+         Append_Inherited_Subprogram (S);\n+      else\n+         Append_Entity (S, Current_Scope);\n+      end if;\n+\n       Set_Public_Status (S);\n \n       if Debug_Flag_E then"}, {"sha": "afe7d85ae6ae276bc58c87cb1886b22008a7900a", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2352eadb81e329fad9adbead81db9203610aa19a/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2352eadb81e329fad9adbead81db9203610aa19a/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=2352eadb81e329fad9adbead81db9203610aa19a", "patch": "@@ -1508,10 +1508,12 @@ package body Sem_Dim is\n \n    begin\n       --  Aspect is an Ada 2012 feature. Note that there is no need to check\n-      --  dimensions for calls that don't come from source.\n+      --  dimensions for calls that don't come from source, or those that may\n+      --  have semantic errors.\n \n       if Ada_Version < Ada_2012\n         or else not Comes_From_Source (N)\n+        or else Error_Posted (N)\n       then\n          return;\n       end if;"}, {"sha": "81c4e142cabb9cbe636446700e9bafafb32f2f22", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2352eadb81e329fad9adbead81db9203610aa19a/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2352eadb81e329fad9adbead81db9203610aa19a/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=2352eadb81e329fad9adbead81db9203610aa19a", "patch": "@@ -9624,6 +9624,13 @@ package body Sem_Res is\n             then\n                null;\n \n+            --  Never warn on conversion to Long_Long_Integer'Base since\n+            --  that is most likely an artifact of the extended overflow\n+            --  checking and comes from complex expanded code.\n+\n+            elsif Orig_T = Base_Type (Standard_Long_Long_Integer) then\n+               null;\n+\n             --  Here we give the redundant conversion warning. If it is an\n             --  entity, give the name of the entity in the message. If not,\n             --  just mention the expression."}, {"sha": "2e68039262f00a127ee0cebdc93eaa1546ea0897", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2352eadb81e329fad9adbead81db9203610aa19a/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2352eadb81e329fad9adbead81db9203610aa19a/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=2352eadb81e329fad9adbead81db9203610aa19a", "patch": "@@ -279,6 +279,63 @@ package body Sem_Util is\n       return Alignment (E) * System_Storage_Unit;\n    end Alignment_In_Bits;\n \n+   ---------------------------------\n+   -- Append_Inherited_Subprogram --\n+   ---------------------------------\n+\n+   procedure Append_Inherited_Subprogram (S : Entity_Id) is\n+      Par : constant Entity_Id := Alias (S);\n+      --  The parent subprogram\n+\n+      Scop : constant Entity_Id := Scope (Par);\n+      --  The scope of definition of the parent subprogram\n+\n+      Typ : constant Entity_Id := Defining_Entity (Parent (S));\n+      --  The derived type of which S is a primitive operation\n+\n+      Decl   : Node_Id;\n+      Next_E : Entity_Id;\n+\n+   begin\n+      if Ekind (Current_Scope) = E_Package\n+        and then In_Private_Part (Current_Scope)\n+        and then Has_Private_Declaration (Typ)\n+        and then Is_Tagged_Type (Typ)\n+        and then Scop = Current_Scope\n+      then\n+         --  The inherited operation is available at the earliest place after\n+         --  the derived type declaration ( RM 7.3.1 (6/1)). This is only\n+         --  relevant for type extensions. If the parent operation appears\n+         --  after the type extension, the operation is not visible.\n+\n+         Decl := First\n+                   (Visible_Declarations\n+                     (Specification (Unit_Declaration_Node (Current_Scope))));\n+         while Present (Decl) loop\n+            if Nkind (Decl) = N_Private_Extension_Declaration\n+              and then Defining_Entity (Decl) = Typ\n+            then\n+               if Sloc (Decl) > Sloc (Par) then\n+                  Next_E := Next_Entity (Par);\n+                  Set_Next_Entity (Par, S);\n+                  Set_Next_Entity (S, Next_E);\n+                  return;\n+\n+               else\n+                  exit;\n+               end if;\n+            end if;\n+\n+            Next (Decl);\n+         end loop;\n+      end if;\n+\n+      --  If partial view is not a type extension, or it appears before the\n+      --  subprogram declaration, insert normally at end of entity list.\n+\n+      Append_Entity (S, Current_Scope);\n+   end Append_Inherited_Subprogram;\n+\n    -----------------------------------------\n    -- Apply_Compile_Time_Constraint_Error --\n    -----------------------------------------"}, {"sha": "57c4880b4259ea933abb893604d9264e9d330d57", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2352eadb81e329fad9adbead81db9203610aa19a/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2352eadb81e329fad9adbead81db9203610aa19a/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=2352eadb81e329fad9adbead81db9203610aa19a", "patch": "@@ -63,6 +63,12 @@ package Sem_Util is\n    --  Otherwise Uint_0 is returned, indicating that the alignment of the\n    --  entity is not yet known to the compiler.\n \n+   procedure Append_Inherited_Subprogram (S : Entity_Id);\n+   --  If the parent of the operation is declared in the visible part of\n+   --  the current scope, the inherited operation is visible even though the\n+   --  derived type that inherits the operation may be completed in the private\n+   --  part of the current package.\n+\n    procedure Apply_Compile_Time_Constraint_Error\n      (N      : Node_Id;\n       Msg    : String;"}]}