{"sha": "39a44a4e393e7fd5ea60fa9b19eedbeacefe9862", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlhNDRhNGUzOTNlN2ZkNWVhNjBmYTliMTllZWRiZWFjZWZlOTg2Mg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2004-01-30T15:36:11Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2004-01-30T15:36:11Z"}, "message": "combine.c (simplify_shift_const, case XOR): Be careful when commuting XOR with ASHIFTRT.\n\n\t* combine.c (simplify_shift_const, case XOR): Be careful when\n\tcommuting XOR with ASHIFTRT.\n\nFrom-SVN: r76965", "tree": {"sha": "fe3e684ea383fae6e8ffa9fdc7fb53096a47d83e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe3e684ea383fae6e8ffa9fdc7fb53096a47d83e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39a44a4e393e7fd5ea60fa9b19eedbeacefe9862", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39a44a4e393e7fd5ea60fa9b19eedbeacefe9862", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39a44a4e393e7fd5ea60fa9b19eedbeacefe9862", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39a44a4e393e7fd5ea60fa9b19eedbeacefe9862/comments", "author": null, "committer": null, "parents": [{"sha": "63823931f932280d827aeeae504603b499cfb1b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63823931f932280d827aeeae504603b499cfb1b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63823931f932280d827aeeae504603b499cfb1b5"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "91a921a98abf5824fcb924622e7bbb76a48bed58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a44a4e393e7fd5ea60fa9b19eedbeacefe9862/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a44a4e393e7fd5ea60fa9b19eedbeacefe9862/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39a44a4e393e7fd5ea60fa9b19eedbeacefe9862", "patch": "@@ -1,3 +1,8 @@\n+2004-01-30  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* combine.c (simplify_shift_const, case XOR): Be careful when\n+\tcommuting XOR with ASHIFTRT.\n+\n 2004-01-30  Kazu Hirata  <kazu@cs.umass.edu>\n             Eric Botcazou  <ebotcazou@libertysurf.fr>\n "}, {"sha": "130bda9c429c1e34967c5dfc31945e937acec2fd", "filename": "gcc/combine.c", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a44a4e393e7fd5ea60fa9b19eedbeacefe9862/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a44a4e393e7fd5ea60fa9b19eedbeacefe9862/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=39a44a4e393e7fd5ea60fa9b19eedbeacefe9862", "patch": "@@ -9568,6 +9568,11 @@ simplify_shift_const (rtx x, enum rtx_code code,\n \t     (and (shift)) insns.  */\n \n \t  if (GET_CODE (XEXP (varop, 1)) == CONST_INT\n+\t      /* We can't do this if we have (ashiftrt (xor))  and the\n+\t\t constant has its sign bit set in shift_mode.  */\n+\t      && !(code == ASHIFTRT && GET_CODE (varop) == XOR\n+\t\t   && 0 > trunc_int_for_mode (INTVAL (XEXP (varop, 1)),\n+\t\t\t\t\t      shift_mode))\n \t      && (new = simplify_binary_operation (code, result_mode,\n \t\t\t\t\t\t   XEXP (varop, 1),\n \t\t\t\t\t\t   GEN_INT (count))) != 0\n@@ -9581,18 +9586,22 @@ simplify_shift_const (rtx x, enum rtx_code code,\n \n \t  /* If we can't do that, try to simplify the shift in each arm of the\n \t     logical expression, make a new logical expression, and apply\n-\t     the inverse distributive law.  */\n-\t  {\n-\t    rtx lhs = simplify_shift_const (NULL_RTX, code, shift_mode,\n-\t\t\t\t\t    XEXP (varop, 0), count);\n-\t    rtx rhs = simplify_shift_const (NULL_RTX, code, shift_mode,\n-\t\t\t\t\t    XEXP (varop, 1), count);\n+\t     the inverse distributive law.  This also can't be done\n+\t     for some (ashiftrt (xor)).  */\n+\t  if (code != ASHIFTRT || GET_CODE (varop)!= XOR\n+\t      || 0 <= trunc_int_for_mode (INTVAL (XEXP (varop, 1)),\n+\t\t\t\t\t  shift_mode))\n+\t    {\n+\t      rtx lhs = simplify_shift_const (NULL_RTX, code, shift_mode,\n+\t\t\t\t\t      XEXP (varop, 0), count);\n+\t      rtx rhs = simplify_shift_const (NULL_RTX, code, shift_mode,\n+\t\t\t\t\t      XEXP (varop, 1), count);\n \n-\t    varop = gen_binary (GET_CODE (varop), shift_mode, lhs, rhs);\n-\t    varop = apply_distributive_law (varop);\n+\t      varop = gen_binary (GET_CODE (varop), shift_mode, lhs, rhs);\n+\t      varop = apply_distributive_law (varop);\n \n-\t    count = 0;\n-\t  }\n+\t      count = 0;\n+\t    }\n \t  break;\n \n \tcase EQ:"}]}