{"sha": "ba623cedf4b07b3a2c2f3e638fa379bcde55c42e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE2MjNjZWRmNGIwN2IzYTJjMmYzZTYzOGZhMzc5YmNkZTU1YzQyZQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-09-01T16:28:06Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-09-01T16:28:06Z"}, "message": "predict.c (maybe_hot_count_p, [...]): When profile is present, use only counts; when guessed use only frequencies.\n\n\t* predict.c (maybe_hot_count_p, maybe_hot_edge_p): When profile is\n\tpresent, use only counts; when guessed use only frequencies.\n\t(estimate_bb_frequencies): Use function_frequency.\n\t* profile.c (compute_branch_probabilities): Exit early when\n\tprofile reading failed. Set profile_status.\n\t(branch_prob): Do not set profile_status.\n\nFrom-SVN: r139868", "tree": {"sha": "acd38c7a826f584bcddf0792b749cd9537cd440f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acd38c7a826f584bcddf0792b749cd9537cd440f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba623cedf4b07b3a2c2f3e638fa379bcde55c42e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba623cedf4b07b3a2c2f3e638fa379bcde55c42e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba623cedf4b07b3a2c2f3e638fa379bcde55c42e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba623cedf4b07b3a2c2f3e638fa379bcde55c42e/comments", "author": null, "committer": null, "parents": [{"sha": "6a3799eb0065d62b04315aa2a9808bce71dab54b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a3799eb0065d62b04315aa2a9808bce71dab54b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a3799eb0065d62b04315aa2a9808bce71dab54b"}], "stats": {"total": 43, "additions": 27, "deletions": 16}, "files": [{"sha": "a6bc7c1dfbbf06abba73c1d31a74de11cc1ac951", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba623cedf4b07b3a2c2f3e638fa379bcde55c42e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba623cedf4b07b3a2c2f3e638fa379bcde55c42e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba623cedf4b07b3a2c2f3e638fa379bcde55c42e", "patch": "@@ -1,3 +1,12 @@\n+2008-09-01  Jan Hubicka  <jh@suse.cz>\n+\n+\t* predict.c (maybe_hot_count_p, maybe_hot_edge_p): When profile is\n+\tpresent, use only counts; when guessed use only frequencies.\n+\t(estimate_bb_frequencies): Use function_frequency.\n+\t* profile.c (compute_branch_probabilities): Exit early when\n+\tprofile reading failed. Set profile_status.\n+\t(branch_prob): Do not set profile_status.\n+\n 2008-09-01  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* tree.c (protected_set_expr_location): New."}, {"sha": "1c877ec06b15add7602112fae3a726ac0b75f81c", "filename": "gcc/predict.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba623cedf4b07b3a2c2f3e638fa379bcde55c42e/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba623cedf4b07b3a2c2f3e638fa379bcde55c42e/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=ba623cedf4b07b3a2c2f3e638fa379bcde55c42e", "patch": "@@ -148,7 +148,9 @@ maybe_hot_count_p (gcov_type count)\n bool\n maybe_hot_bb_p (const_basic_block bb)\n {\n-  return maybe_hot_count_p (bb->count) && maybe_hot_frequency_p (bb->frequency);\n+  if (profile_status == PROFILE_READ)\n+    return maybe_hot_count_p (bb->count);\n+  return maybe_hot_frequency_p (bb->frequency);\n }\n \n /* Return true if the call can be hot.  */\n@@ -178,7 +180,9 @@ cgraph_maybe_hot_edge_p (struct cgraph_edge *edge)\n bool\n maybe_hot_edge_p (edge e)\n {\n-  return maybe_hot_count_p (e->count) && maybe_hot_frequency_p (EDGE_FREQUENCY (e));\n+  if (profile_status == PROFILE_READ)\n+    return maybe_hot_count_p (e->count);\n+  return maybe_hot_frequency_p (EDGE_FREQUENCY (e));\n }\n \n /* Return true in case BB is probably never executed.  */\n@@ -2009,7 +2013,7 @@ estimate_bb_frequencies (void)\n   basic_block bb;\n   sreal freq_max;\n \n-  if (!flag_branch_probabilities || !counts_to_freqs ())\n+  if (cfun->function_frequency != PROFILE_READ || !counts_to_freqs ())\n     {\n       static int real_values_initialized = 0;\n "}, {"sha": "883515d9a17cfce39eea16412752960ba946011c", "filename": "gcc/profile.c", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba623cedf4b07b3a2c2f3e638fa379bcde55c42e/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba623cedf4b07b3a2c2f3e638fa379bcde55c42e/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=ba623cedf4b07b3a2c2f3e638fa379bcde55c42e", "patch": "@@ -402,19 +402,18 @@ compute_branch_probabilities (void)\n   int inconsistent = 0;\n \n   /* Very simple sanity checks so we catch bugs in our profiling code.  */\n-  if (profile_info)\n+  if (!profile_info)\n+    return;\n+  if (profile_info->run_max * profile_info->runs < profile_info->sum_max)\n     {\n-      if (profile_info->run_max * profile_info->runs < profile_info->sum_max)\n-        {\n-          error (\"corrupted profile info: run_max * runs < sum_max\");\n-          exec_counts = NULL;\n-        }\n+      error (\"corrupted profile info: run_max * runs < sum_max\");\n+      exec_counts = NULL;\n+    }\n \n-      if (profile_info->sum_all < profile_info->sum_max)\n-        {\n-          error (\"corrupted profile info: sum_all is smaller than sum_max\");\n-          exec_counts = NULL;\n-        }\n+  if (profile_info->sum_all < profile_info->sum_max)\n+    {\n+      error (\"corrupted profile info: sum_all is smaller than sum_max\");\n+      exec_counts = NULL;\n     }\n \n   /* Attach extra info block to each bb.  */\n@@ -695,6 +694,7 @@ compute_branch_probabilities (void)\n \t}\n     }\n   counts_to_freqs ();\n+  profile_status = PROFILE_READ;\n \n   if (dump_file)\n     {\n@@ -1154,8 +1154,6 @@ branch_prob (void)\n \n   VEC_free (histogram_value, heap, values);\n   free_edge_list (el);\n-  if (flag_branch_probabilities && profile_info)\n-    profile_status = PROFILE_READ;\n   coverage_end_function ();\n }\n \f"}]}