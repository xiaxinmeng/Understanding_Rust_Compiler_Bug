{"sha": "53f672caaac6f94342d74119d927c790bfca9e9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNmNjcyY2FhYWM2Zjk0MzQyZDc0MTE5ZDkyN2M3OTBiZmNhOWU5ZA==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-12-15T19:47:18Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-12-15T19:47:18Z"}, "message": "In libobjc/: 2010-12-15 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn libobjc/:\n2010-12-15  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* objc/message.h (objc_super): When using the modern API, do not\n\tdefine Super and Super_t, and always use 'super_class' for the\n\tsuper class field.\t\n\t(objc_msg_lookup_super): Updated prototype to use 'struct\n\tobjc_super *' instead of 'Super_t'.\n\t* sendmsg.c (objc_msg_lookup_super): Updated prototype to use\n\t'struct objc_super *' instead of 'Super_t'.\n\nFrom-SVN: r167869", "tree": {"sha": "f55c9eb1d455256cc299e37b662a93c700347729", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f55c9eb1d455256cc299e37b662a93c700347729"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53f672caaac6f94342d74119d927c790bfca9e9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53f672caaac6f94342d74119d927c790bfca9e9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53f672caaac6f94342d74119d927c790bfca9e9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53f672caaac6f94342d74119d927c790bfca9e9d/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2a3b37c3b9f09fe9b020294debf96d0298d7be70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a3b37c3b9f09fe9b020294debf96d0298d7be70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a3b37c3b9f09fe9b020294debf96d0298d7be70"}], "stats": {"total": 37, "additions": 31, "deletions": 6}, "files": [{"sha": "a636c8ba4efca21318aa820c1d6ffd28435f0c29", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53f672caaac6f94342d74119d927c790bfca9e9d/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53f672caaac6f94342d74119d927c790bfca9e9d/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=53f672caaac6f94342d74119d927c790bfca9e9d", "patch": "@@ -1,3 +1,13 @@\n+2010-12-15  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc/message.h (objc_super): When using the modern API, do not\n+\tdefine Super and Super_t, and always use 'super_class' for the\n+\tsuper class field.\t\n+\t(objc_msg_lookup_super): Updated prototype to use 'struct\n+\tobjc_super *' instead of 'Super_t'.\n+\t* sendmsg.c (objc_msg_lookup_super): Updated prototype to use\n+\t'struct objc_super *' instead of 'Super_t'.\n+\n 2010-12-15  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc/message.h: Update comments, reindented code and moved"}, {"sha": "66f0160c1e856b05d9399c1dd7a79fa582672751", "filename": "libobjc/objc/message.h", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53f672caaac6f94342d74119d927c790bfca9e9d/libobjc%2Fobjc%2Fmessage.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53f672caaac6f94342d74119d927c790bfca9e9d/libobjc%2Fobjc%2Fmessage.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fmessage.h?ref=53f672caaac6f94342d74119d927c790bfca9e9d", "patch": "@@ -91,25 +91,40 @@ objc_EXPORT IMP objc_msg_lookup (id receiver, SEL op);\n /* Structure used when a message is send to a class's super class.\n    The compiler generates one of these structures and passes it to\n    objc_msg_lookup_super() when a [super method] call is compiled.  */\n+\n+/* In the traditional API, the super class field is called 'class' in\n+   Objective-C and 'super_class' in Objective-C++.  In the new API\n+   (objc/runtime.h) it is always called 'super_class'.  We detect the\n+   \"traditional API\" by the fact that the objc/objc-api.h header\n+   include guards are defined, which means objc/objc-api.h has been\n+   included.  This works because objc/message.h does not exist in the\n+   Traditional API and is only read because objc-api.h itself includes\n+   it.  */\n+#ifdef __objc_api_INCLUDE_GNU\n+/* Traditional API.  */\n typedef struct objc_super\n {\n   id    self;       /* Id of the object sending the message. */\n-\n-  /* The new version of the API will always use 'super_class'.  TODO:\n-     Use class only if objc-api.h is included, otherwise always use\n-     super_class.  */\n #ifdef __cplusplus\n   Class super_class;\n #else\n   Class class;        /* Object's super class. */\n #endif\n } Super, *Super_t;\n+#else\n+/* Modern API.  */\n+struct objc_super\n+{\n+  id    self;        /* The receiver of the message.  */\n+  Class super_class; /* The superclass of the receiver.  */\n+};\n+#endif\n \n /* This is used by the compiler instead of objc_msg_lookup () when\n    compiling a call to 'super', such as [super method].  This requires\n    sending a message to super->self, but looking up the method as if\n    super->self was in class super->super_class.  */\n-objc_EXPORT IMP objc_msg_lookup_super (Super_t super, SEL sel);\n+objc_EXPORT IMP objc_msg_lookup_super (struct objc_super *super, SEL sel);\n \n /* Hooks for method forwarding.  They make it easy to substitute the\n    built-in forwarding with one based on a library, such as ffi, that"}, {"sha": "07452cceb798dba302e7de64f0d321635cc73321", "filename": "libobjc/sendmsg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53f672caaac6f94342d74119d927c790bfca9e9d/libobjc%2Fsendmsg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53f672caaac6f94342d74119d927c790bfca9e9d/libobjc%2Fsendmsg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fsendmsg.c?ref=53f672caaac6f94342d74119d927c790bfca9e9d", "patch": "@@ -445,7 +445,7 @@ objc_msg_lookup (id receiver, SEL op)\n }\n \n IMP\n-objc_msg_lookup_super (Super_t super, SEL sel)\n+objc_msg_lookup_super (struct objc_super *super, SEL sel)\n {\n   if (super->self)\n     return get_imp (super->class, sel);"}]}