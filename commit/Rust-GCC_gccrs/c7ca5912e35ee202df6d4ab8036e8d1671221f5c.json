{"sha": "c7ca5912e35ee202df6d4ab8036e8d1671221f5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdjYTU5MTJlMzVlZTIwMmRmNmQ0YWI4MDM2ZThkMTY3MTIyMWY1Yw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-03-11T22:08:12Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-03-11T22:08:12Z"}, "message": "combine.c (try_combine): Fix error in change to try original register.\n\n\t* combine.c (try_combine): Fix error in change to try original\n\tregister.\n\t(gen_rtx_combine): Do same as gen_rtx for now.\n\nFrom-SVN: r40390", "tree": {"sha": "c176001dbc56990d4a3e0438d5902143dfb05072", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c176001dbc56990d4a3e0438d5902143dfb05072"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7ca5912e35ee202df6d4ab8036e8d1671221f5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7ca5912e35ee202df6d4ab8036e8d1671221f5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7ca5912e35ee202df6d4ab8036e8d1671221f5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7ca5912e35ee202df6d4ab8036e8d1671221f5c/comments", "author": null, "committer": null, "parents": [{"sha": "3d9d2476769e35fcd17ef850a8faf3990c72155d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d9d2476769e35fcd17ef850a8faf3990c72155d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d9d2476769e35fcd17ef850a8faf3990c72155d"}], "stats": {"total": 37, "additions": 15, "deletions": 22}, "files": [{"sha": "8db93e974379cf1785a36de1ab1eb3aef0ac4e79", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ca5912e35ee202df6d4ab8036e8d1671221f5c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ca5912e35ee202df6d4ab8036e8d1671221f5c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c7ca5912e35ee202df6d4ab8036e8d1671221f5c", "patch": "@@ -1,3 +1,9 @@\n+Sun Mar 11 17:01:41 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* combine.c (try_combine): Fix error in change to try original\n+\tregister.\n+\t(gen_rtx_combine): Do same as gen_rtx for now.\n+\n 2001-03-11  Zack Weinberg  <zackw@stanford.edu>\n \n \t* configure.in: AC_SUBST xm_defines."}, {"sha": "f1df78a8c7aac1dfcbf1c6ce131efd310ccca33a", "filename": "gcc/combine.c", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ca5912e35ee202df6d4ab8036e8d1671221f5c/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ca5912e35ee202df6d4ab8036e8d1671221f5c/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=c7ca5912e35ee202df6d4ab8036e8d1671221f5c", "patch": "@@ -2150,12 +2150,15 @@ try_combine (i3, i2, i1, new_direct_jump_p)\n \t  /* If the split with the mode-changed register didn't work, try\n \t     the original register.  */\n \t  if (! m_split && ni2dest != i2dest)\n-\t    m_split = split_insns (gen_rtx_PARALLEL\n-\t\t\t\t   (VOIDmode,\n-\t\t\t\t    gen_rtvec (2, newpat,\n-\t\t\t\t\t       gen_rtx_CLOBBER (VOIDmode,\n-\t\t\t\t\t\t\t\ti2dest))),\n-\t\t\t\t    i3);\n+\t    {\n+\t      ni2dest = i2dest;\n+\t      m_split = split_insns (gen_rtx_PARALLEL\n+\t\t\t\t     (VOIDmode,\n+\t\t\t\t      gen_rtvec (2, newpat,\n+\t\t\t\t\t\t gen_rtx_CLOBBER (VOIDmode,\n+\t\t\t\t\t\t\t\t  i2dest))),\n+\t\t\t\t     i3);\n+\t    }\n \t}\n \n       if (m_split && GET_CODE (m_split) != SEQUENCE)\n@@ -9922,22 +9925,6 @@ gen_rtx_combine VPARAMS ((enum rtx_code code, enum machine_mode mode, ...))\n \n   va_end (p);\n \n-  /* See if this is in undobuf.  Be sure we don't use objects that came\n-     from another insn; this could produce circular rtl structures.  */\n-\n-  for (undo = undobuf.undos; undo != undobuf.previous_undos; undo = undo->next)\n-    if (!undo->is_int\n-\t&& GET_CODE (undo->old_contents.r) == code\n-\t&& GET_MODE (undo->old_contents.r) == mode)\n-      {\n-\tfor (j = 0; j < n_args; j++)\n-\t  if (XEXP (undo->old_contents.r, j) != args[j])\n-\t    break;\n-\n-\tif (j == n_args)\n-\t  return undo->old_contents.r;\n-      }\n-\n   /* Otherwise make a new rtx.  We know we have 1, 2, or 3 args.\n      Use rtx_alloc instead of gen_rtx because it's faster on RISC.  */\n   rt = rtx_alloc (code);"}]}