{"sha": "5f8d3dd5b33acad71225d815ef3389fbf6c5963d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY4ZDNkZDViMzNhY2FkNzEyMjVkODE1ZWYzMzg5ZmJmNmM1OTYzZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T12:09:22Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T12:09:22Z"}, "message": "[multiple changes]\n\n2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_disp.adb (Check_Dispatching_Context): Add guard to refine\n\tthe check that recognizes a call to a private overridding and\n\treplaces the called subprogram with its alias.\n\n2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_util.adb: Minor reformatting.\n\nFrom-SVN: r247206", "tree": {"sha": "a5829c6632499dbe2f6e9cb4940750c08b24b786", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5829c6632499dbe2f6e9cb4940750c08b24b786"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f8d3dd5b33acad71225d815ef3389fbf6c5963d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f8d3dd5b33acad71225d815ef3389fbf6c5963d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f8d3dd5b33acad71225d815ef3389fbf6c5963d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f8d3dd5b33acad71225d815ef3389fbf6c5963d/comments", "author": null, "committer": null, "parents": [{"sha": "0bcee2755848bd10da9be41b00eeafef8cb65bc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bcee2755848bd10da9be41b00eeafef8cb65bc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bcee2755848bd10da9be41b00eeafef8cb65bc5"}], "stats": {"total": 43, "additions": 30, "deletions": 13}, "files": [{"sha": "492070248fdb839bd401f72d2468b3c0a563c194", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d3dd5b33acad71225d815ef3389fbf6c5963d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d3dd5b33acad71225d815ef3389fbf6c5963d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5f8d3dd5b33acad71225d815ef3389fbf6c5963d", "patch": "@@ -1,3 +1,13 @@\n+2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_disp.adb (Check_Dispatching_Context): Add guard to refine\n+\tthe check that recognizes a call to a private overridding and\n+\treplaces the called subprogram with its alias.\n+\n+2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_util.adb: Minor reformatting.\n+\n 2017-04-25  Justin Squirek  <squirek@adacore.com>\n \n \t* exp_ch3.adb (Freeze_Type): Add condition to always treat"}, {"sha": "35c5ed2c831204e474a1866f9b5041c6b66ce5ff", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d3dd5b33acad71225d815ef3389fbf6c5963d/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d3dd5b33acad71225d815ef3389fbf6c5963d/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=5f8d3dd5b33acad71225d815ef3389fbf6c5963d", "patch": "@@ -2243,6 +2243,19 @@ package body Exp_Util is\n             return;\n          end if;\n \n+         --  When the type inheriting the class-wide invariant is a concurrent\n+         --  type, use the corresponding record type because it contains all\n+         --  primitive operations of the concurren type and allows for proper\n+         --  substitution.\n+\n+         if Is_Concurrent_Type (T) then\n+            Deriv_Typ := Corresponding_Record_Type (T);\n+         else\n+            Deriv_Typ := T;\n+         end if;\n+\n+               pragma Assert (Present (Deriv_Typ));\n+\n          --  Determine which rep item chain to use. Precedence is given to that\n          --  of the parent type's partial view since it usually carries all the\n          --  class-wide invariants.\n@@ -2318,19 +2331,6 @@ package body Exp_Util is\n \n                Expr := New_Copy_Tree (Prag_Expr);\n \n-               --  When the type inheriting the class-wide invariant is a task\n-               --  or protected type, use the corresponding record type because\n-               --  it contains all primitive operations of the concurren type\n-               --  and allows for proper substitution.\n-\n-               if Is_Concurrent_Type (T) then\n-                  Deriv_Typ := Corresponding_Record_Type (T);\n-               else\n-                  Deriv_Typ := T;\n-               end if;\n-\n-               pragma Assert (Present (Deriv_Typ));\n-\n                --  The parent type must have a \"partial\" invariant procedure\n                --  because class-wide invariants are captured exclusively by\n                --  it."}, {"sha": "b0a8c6a61883d65bd7b66bc5d07a558fca593431", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d3dd5b33acad71225d815ef3389fbf6c5963d/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d3dd5b33acad71225d815ef3389fbf6c5963d/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=5f8d3dd5b33acad71225d815ef3389fbf6c5963d", "patch": "@@ -549,12 +549,19 @@ package body Sem_Disp is\n       --  Start of processing for Check_Dispatching_Context\n \n       begin\n+         --  If the called subprogram is a private overriding, replace it\n+         --  with its alias, which has the correct body. Verify that the\n+         --  two subprograms have the same controlling type (this is not the\n+         --  case for an inherited subprogram that has become abstract).\n+\n          if Is_Abstract_Subprogram (Subp)\n            and then No (Controlling_Argument (Call))\n          then\n             if Present (Alias (Subp))\n               and then not Is_Abstract_Subprogram (Alias (Subp))\n               and then No (DTC_Entity (Subp))\n+              and then Find_Dispatching_Type (Subp) =\n+                 Find_Dispatching_Type (Alias (Subp))\n             then\n                --  Private overriding of inherited abstract operation, call is\n                --  legal."}]}