{"sha": "d858307d7b08e7d948bb97f1e1d9c2ee109fb097", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg1ODMwN2Q3YjA4ZTdkOTQ4YmI5N2YxZTFkOWMyZWUxMDlmYjA5Nw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-10-29T19:26:04Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-10-29T19:26:04Z"}, "message": "[multiple changes]\n\n2009-10-29  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/40925\n\t* include/bits/stl_pair.h (pair<_T1, _T2>::pair(_U1&&, _U2&&)):\n\tUse enable_if to remove it from the overload set when either _U1\n\tis not convertible to _T1 or _U2 is not convertible to _T2.\n\t(pair<>::pair(_U1&&, _Arg0&&, _Args&&...)): Remove.\n\n2009-10-29  Douglas Gregor  <doug.gregor@gmail.com>\n\n\tPR libstdc++/40925\n\t* testsuite/20_util/pair/40925.cc: Add.\n\nFrom-SVN: r153725", "tree": {"sha": "2ab0b95ff993433452e04ec6c71d05d9be1d0351", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ab0b95ff993433452e04ec6c71d05d9be1d0351"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d858307d7b08e7d948bb97f1e1d9c2ee109fb097", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d858307d7b08e7d948bb97f1e1d9c2ee109fb097", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d858307d7b08e7d948bb97f1e1d9c2ee109fb097", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d858307d7b08e7d948bb97f1e1d9c2ee109fb097/comments", "author": null, "committer": null, "parents": [{"sha": "486024b158a3445f48aea91fb136dde3a174d219", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/486024b158a3445f48aea91fb136dde3a174d219", "html_url": "https://github.com/Rust-GCC/gccrs/commit/486024b158a3445f48aea91fb136dde3a174d219"}], "stats": {"total": 78, "additions": 70, "deletions": 8}, "files": [{"sha": "19033242f7eb466371b6aede539c7fcdfe63703c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d858307d7b08e7d948bb97f1e1d9c2ee109fb097/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d858307d7b08e7d948bb97f1e1d9c2ee109fb097/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d858307d7b08e7d948bb97f1e1d9c2ee109fb097", "patch": "@@ -1,3 +1,16 @@\n+2009-10-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/40925\n+\t* include/bits/stl_pair.h (pair<_T1, _T2>::pair(_U1&&, _U2&&)):\n+\tUse enable_if to remove it from the overload set when either _U1\n+\tis not convertible to _T1 or _U2 is not convertible to _T2.\n+\t(pair<>::pair(_U1&&, _Arg0&&, _Args&&...)): Remove.\n+\n+2009-10-29  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+\tPR libstdc++/40925\n+\t* testsuite/20_util/pair/40925.cc: Add.\n+\n 2009-10-29  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/decimal/decimal: Minor formatting and uglification fixes."}, {"sha": "0e153d3e7fd8468537771c68cb2402a67851e359", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d858307d7b08e7d948bb97f1e1d9c2ee109fb097/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d858307d7b08e7d948bb97f1e1d9c2ee109fb097/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=d858307d7b08e7d948bb97f1e1d9c2ee109fb097", "patch": "@@ -60,6 +60,10 @@\n #include <bits/move.h> // for std::move / std::forward, std::decay, and\n                        // std::swap\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#include <type_traits>\n+#endif\n+\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /// pair holds two objects of arbitrary type.\n@@ -85,7 +89,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       template<class _U1, class _U2>\n-        pair(_U1&& __x, _U2&& __y)\n+        pair(_U1&& __x, _U2&& __y, typename\n+\t    std::enable_if<std::is_convertible<_U1, _T1>::value\n+\t                   && std::is_convertible<_U2, _T2>::value>::type* = 0)\n \t: first(std::forward<_U1>(__x)),\n \t  second(std::forward<_U2>(__y)) { }\n \n@@ -106,13 +112,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t: first(std::move(__p.first)),\n \t  second(std::move(__p.second)) { }\n \n-      // http://gcc.gnu.org/ml/libstdc++/2007-08/msg00052.html\n-      template<class _U1, class _Arg0, class... _Args>\n-        pair(_U1&& __x, _Arg0&& __arg0, _Args&&... __args)\n-\t: first(std::forward<_U1>(__x)),\n-\t  second(std::forward<_Arg0>(__arg0),\n-\t\t std::forward<_Args>(__args)...) { }\n-\n       pair&\n       operator=(pair&& __p)\n       { "}, {"sha": "d4907231c7e31002972527f62845c2779fb6d1ee", "filename": "libstdc++-v3/testsuite/20_util/pair/40925.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d858307d7b08e7d948bb97f1e1d9c2ee109fb097/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2F40925.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d858307d7b08e7d948bb97f1e1d9c2ee109fb097/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2F40925.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2F40925.cc?ref=d858307d7b08e7d948bb97f1e1d9c2ee109fb097", "patch": "@@ -0,0 +1,50 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NOTE: This makes use of the fact that we know how moveable\n+// is implemented on pair, and also vector. If the implementation\n+// changes this test may begin to fail.\n+\n+#include <utility>\n+\n+struct X\n+{ \n+  explicit X(int, int) { }\n+\n+private:\n+  X(const X&) = delete;\n+};\n+\n+// libstdc++/40925\n+void test01()\n+{\n+  int *ip = 0;\n+  int X::*mp = 0;\n+\n+  std::pair<int*, int*> p1(0, 0);\n+  std::pair<int*, int*> p2(ip, 0);\n+  std::pair<int*, int*> p3(0, ip);\n+  std::pair<int*, int*> p4(ip, ip);\n+\n+  std::pair<int X::*, int*> p5(0, 0);\n+  std::pair<int X::*, int X::*> p6(mp, 0);\n+  std::pair<int X::*, int X::*> p7(0, mp);\n+  std::pair<int X::*, int X::*> p8(mp, mp);\n+}"}]}