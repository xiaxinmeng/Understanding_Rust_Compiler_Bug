{"sha": "6964bb3ed962554b18ca92633b5395f91f9bebac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk2NGJiM2VkOTYyNTU0YjE4Y2E5MjYzM2I1Mzk1ZjkxZjliZWJhYw==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2016-11-14T21:22:53Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2016-11-14T21:22:53Z"}, "message": "Implement P0513R0, Poisoning the Hash.\n\n* include/bits/functional_hash.h (__poison_hash): New.\n* include/bits/unique_ptr.h\n(hash<unique_ptr<_Tp, _Dp>>): Derive from __poison_hash.\n* include/std/optional (hash<optional<_Tp>>): Likewise.\n* include/std/variant (hash<variant<_Types...>>): Likewise.\n* testsuite/20_util/default_delete/48631_neg.cc: Adjust.\n* testsuite/20_util/default_delete/void_neg.cc: Likewise.\n* testsuite/20_util/optional/hash.cc: New.\n* testsuite/20_util/unique_ptr/assign/48635_neg.cc: Adjust.\n* testsuite/20_util/unique_ptr/cons/cv_qual_neg.cc: Adjust.\n* testsuite/20_util/unique_ptr/hash/1.cc: Add tests for\npoisoned fancy pointer hashes.\n* testsuite/20_util/variant/hash.cc: New.\n\nFrom-SVN: r242402", "tree": {"sha": "e1d2145486a1b5d3d50527b9b06b360d834db452", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1d2145486a1b5d3d50527b9b06b360d834db452"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6964bb3ed962554b18ca92633b5395f91f9bebac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6964bb3ed962554b18ca92633b5395f91f9bebac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6964bb3ed962554b18ca92633b5395f91f9bebac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6964bb3ed962554b18ca92633b5395f91f9bebac/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "627a2f592382c96daaa3bce4a22245f0614892d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/627a2f592382c96daaa3bce4a22245f0614892d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/627a2f592382c96daaa3bce4a22245f0614892d0"}], "stats": {"total": 148, "additions": 141, "deletions": 7}, "files": [{"sha": "d3da57cc9a45b8b637be599d2c57f02f70d9c596", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6964bb3ed962554b18ca92633b5395f91f9bebac/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6964bb3ed962554b18ca92633b5395f91f9bebac/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6964bb3ed962554b18ca92633b5395f91f9bebac", "patch": "@@ -1,3 +1,20 @@\n+2016-11-14  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tImplement P0513R0, Poisoning the Hash.\n+\t* include/bits/functional_hash.h (__poison_hash): New.\n+\t* include/bits/unique_ptr.h\n+\t(hash<unique_ptr<_Tp, _Dp>>): Derive from __poison_hash.\n+\t* include/std/optional (hash<optional<_Tp>>): Likewise.\n+\t* include/std/variant (hash<variant<_Types...>>): Likewise.\n+\t* testsuite/20_util/default_delete/48631_neg.cc: Adjust.\n+\t* testsuite/20_util/default_delete/void_neg.cc: Likewise.\n+\t* testsuite/20_util/optional/hash.cc: New.\n+\t* testsuite/20_util/unique_ptr/assign/48635_neg.cc: Adjust.\n+\t* testsuite/20_util/unique_ptr/cons/cv_qual_neg.cc: Adjust.\n+\t* testsuite/20_util/unique_ptr/hash/1.cc: Add tests for\n+\tpoisoned fancy pointer hashes.\n+\t* testsuite/20_util/variant/hash.cc: New.\n+\n 2016-11-14  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tImplement P0504R0 (Revisiting in-place tag types for"}, {"sha": "dc096831869213e556a7dcfeed3b320525674979", "filename": "libstdc++-v3/include/bits/functional_hash.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6964bb3ed962554b18ca92633b5395f91f9bebac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6964bb3ed962554b18ca92633b5395f91f9bebac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h?ref=6964bb3ed962554b18ca92633b5395f91f9bebac", "patch": "@@ -57,6 +57,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct hash;\n \n+  template<typename _Tp, typename = void>\n+    struct __poison_hash\n+    {\n+    private:\n+      // Private rather than deleted to be non-trivially-copyable.\n+      __poison_hash(__poison_hash&&);\n+      ~__poison_hash();\n+    };\n+\n+  template<typename _Tp>\n+    struct __poison_hash<_Tp, __void_t<decltype(hash<_Tp>()(declval<_Tp>()))>>\n+    {\n+    };\n+\n   // Helper struct for SFINAE-poisoning non-enum types.\n   template<typename _Tp, bool = is_enum<_Tp>::value>\n     struct __hash_enum"}, {"sha": "f9ec60f769bbd2801f989d0943dcfec3ed841e66", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6964bb3ed962554b18ca92633b5395f91f9bebac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6964bb3ed962554b18ca92633b5395f91f9bebac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=6964bb3ed962554b18ca92633b5395f91f9bebac", "patch": "@@ -36,6 +36,7 @@\n #include <utility>\n #include <tuple>\n #include <bits/stl_function.h>\n+#include <bits/functional_hash.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -763,7 +764,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// std::hash specialization for unique_ptr.\n   template<typename _Tp, typename _Dp>\n     struct hash<unique_ptr<_Tp, _Dp>>\n-    : public __hash_base<size_t, unique_ptr<_Tp, _Dp>>\n+    : public __hash_base<size_t, unique_ptr<_Tp, _Dp>>,\n+    private __poison_hash<typename unique_ptr<_Tp, _Dp>::pointer>\n     {\n       size_t\n       operator()(const unique_ptr<_Tp, _Dp>& __u) const noexcept"}, {"sha": "ac73ea75bae0099aaa1c1120a6237ad39732efa9", "filename": "libstdc++-v3/include/std/optional", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6964bb3ed962554b18ca92633b5395f91f9bebac/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6964bb3ed962554b18ca92633b5395f91f9bebac/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional?ref=6964bb3ed962554b18ca92633b5395f91f9bebac", "patch": "@@ -943,7 +943,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Hash.\n   template<typename _Tp>\n-    struct hash<optional<_Tp>>\n+    struct hash<optional<_Tp>> : private __poison_hash<remove_const_t<_Tp>>\n     {\n       using result_type = size_t;\n       using argument_type = optional<_Tp>;"}, {"sha": "6f3f67c578097445acd17c61ba93e29aebf9bdd5", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6964bb3ed962554b18ca92633b5395f91f9bebac/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6964bb3ed962554b18ca92633b5395f91f9bebac/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=6964bb3ed962554b18ca92633b5395f91f9bebac", "patch": "@@ -41,6 +41,7 @@\n #include <bits/functexcept.h>\n #include <bits/move.h>\n #include <bits/uses_allocator.h>\n+#include <bits/functional_hash.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -1337,6 +1338,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename... _Types>\n     struct hash<variant<_Types...>>\n+    : private __poison_hash<remove_const_t<_Types>>...\n     {\n       using result_type = size_t;\n       using argument_type = variant<_Types...>;"}, {"sha": "2f99b25758bc404ca93fb76606d853c341e6d49a", "filename": "libstdc++-v3/testsuite/20_util/default_delete/48631_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6964bb3ed962554b18ca92633b5395f91f9bebac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdefault_delete%2F48631_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6964bb3ed962554b18ca92633b5395f91f9bebac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdefault_delete%2F48631_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdefault_delete%2F48631_neg.cc?ref=6964bb3ed962554b18ca92633b5395f91f9bebac", "patch": "@@ -26,4 +26,4 @@ struct D : B { };\n D d;\n std::default_delete<B[]> db;\n typedef decltype(db(&d)) type; // { dg-error \"no match\" }\n-// { dg-error \"no type\" \"\" { target *-*-* } 107 }\n+// { dg-error \"no type\" \"\" { target *-*-* } 108 }"}, {"sha": "74aa32f7cb0c4ed3270a189585797835a0227bd6", "filename": "libstdc++-v3/testsuite/20_util/default_delete/void_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6964bb3ed962554b18ca92633b5395f91f9bebac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdefault_delete%2Fvoid_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6964bb3ed962554b18ca92633b5395f91f9bebac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdefault_delete%2Fvoid_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdefault_delete%2Fvoid_neg.cc?ref=6964bb3ed962554b18ca92633b5395f91f9bebac", "patch": "@@ -25,5 +25,5 @@ void test01()\n {\n   std::default_delete<void> d;\n   d(nullptr);   // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 73 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 74 }\n }"}, {"sha": "294a6174cdb9b785922894cd8ce4b83cfd319cb0", "filename": "libstdc++-v3/testsuite/20_util/optional/hash.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6964bb3ed962554b18ca92633b5395f91f9bebac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fhash.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6964bb3ed962554b18ca92633b5395f91f9bebac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fhash.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fhash.cc?ref=6964bb3ed962554b18ca92633b5395f91f9bebac", "patch": "@@ -0,0 +1,38 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <optional>\n+#include <testsuite_hooks.h>\n+\n+class S{}; // No hash specialization\n+\n+template<class T>\n+auto f(int) -> decltype(std::hash<std::optional<T>>(), std::true_type());\n+\n+template<class T>\n+auto f(...) -> decltype(std::false_type());\n+\n+static_assert(!decltype(f<S>(0))::value, \"\");\n+\n+int main()\n+{\n+  int x = 42;\n+  std::optional<int> x2 = 42;\n+  VERIFY(std::hash<int>()(x) == std::hash<std::optional<int>>()(x2));\n+}"}, {"sha": "e9655f137505c4df83e001c02e8076f9a21ec735", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/assign/48635_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6964bb3ed962554b18ca92633b5395f91f9bebac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2F48635_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6964bb3ed962554b18ca92633b5395f91f9bebac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2F48635_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2F48635_neg.cc?ref=6964bb3ed962554b18ca92633b5395f91f9bebac", "patch": "@@ -42,10 +42,10 @@ void f()\n   std::unique_ptr<int, D&> ud(nullptr, d);\n   ub = std::move(ud); // { dg-error \"no match\" }\n   ub2 = ud; // { dg-error \"no match\" }\n-// { dg-error \"no type\" \"\" { target *-*-* } 288 }\n+// { dg-error \"no type\" \"\" { target *-*-* } 289 }\n \n   std::unique_ptr<int[], B&> uba(nullptr, b);\n   std::unique_ptr<int[], D&> uda(nullptr, d);\n   uba = std::move(uda); // { dg-error \"no match\" }\n-// { dg-error \"no type\" \"\" { target *-*-* } 539 }\n+// { dg-error \"no type\" \"\" { target *-*-* } 540 }\n }"}, {"sha": "3e6f41bd8da9867c6581281173329ff621c795d5", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/cons/cv_qual_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6964bb3ed962554b18ca92633b5395f91f9bebac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fcv_qual_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6964bb3ed962554b18ca92633b5395f91f9bebac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fcv_qual_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fcv_qual_neg.cc?ref=6964bb3ed962554b18ca92633b5395f91f9bebac", "patch": "@@ -39,7 +39,7 @@ test07()\n   std::unique_ptr<const A[]> cA3(p); // { dg-error \"no matching function\" }\n   std::unique_ptr<volatile A[]> vA3(p); // { dg-error \"no matching function\" }\n   std::unique_ptr<const volatile A[]> cvA3(p); // { dg-error \"no matching function\" }\n-  // { dg-error \"no type\" \"\" { target *-*-* } 447 }\n+  // { dg-error \"no type\" \"\" { target *-*-* } 448 }\n }\n \n template<typename T>"}, {"sha": "ae73a43cfb3162ebab505a769b4228b24a70338e", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/hash/1.cc", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6964bb3ed962554b18ca92633b5395f91f9bebac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fhash%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6964bb3ed962554b18ca92633b5395f91f9bebac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fhash%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fhash%2F1.cc?ref=6964bb3ed962554b18ca92633b5395f91f9bebac", "patch": "@@ -21,6 +21,29 @@\n \n #include <memory>\n #include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+// User-defined pointer type that throws if a null pointer is dereferenced.\n+template<typename T>\n+struct Pointer : __gnu_test::PointerBase<Pointer<T>, T>\n+{\n+};\n+\n+template<typename T>\n+struct PointerDeleter : std::default_delete<T>\n+{\n+  typedef Pointer<T> pointer;\n+  void operator()(pointer) const;\n+};\n+\n+template<class T>\n+auto f(int) -> decltype(std::hash<std::unique_ptr<T,\n+\t\t\tPointerDeleter<T>>>(), std::true_type());\n+\n+template<class T>\n+auto f(...) -> decltype(std::false_type());\n+\n+static_assert(!decltype(f<Pointer<int>>(0))::value, \"\");\n \n void test01()\n {"}, {"sha": "74f97edd235d84fc3c1a565fe9bf1c14d2d46a2f", "filename": "libstdc++-v3/testsuite/20_util/variant/hash.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6964bb3ed962554b18ca92633b5395f91f9bebac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fhash.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6964bb3ed962554b18ca92633b5395f91f9bebac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fhash.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fhash.cc?ref=6964bb3ed962554b18ca92633b5395f91f9bebac", "patch": "@@ -0,0 +1,38 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <variant>\n+#include <testsuite_hooks.h>\n+\n+class S{}; // No hash specialization\n+\n+template<class T>\n+auto f(int) -> decltype(std::hash<std::variant<T>>(), std::true_type());\n+\n+template<class T>\n+auto f(...) -> decltype(std::false_type());\n+\n+static_assert(!decltype(f<S>(0))::value, \"\");\n+\n+int main()\n+{\n+  int x = 42;\n+  std::variant<int> x2 = 42;\n+  VERIFY(std::hash<int>()(x) == std::hash<std::variant<int>>()(x2));\n+}"}]}