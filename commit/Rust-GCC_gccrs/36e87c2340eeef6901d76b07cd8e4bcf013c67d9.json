{"sha": "36e87c2340eeef6901d76b07cd8e4bcf013c67d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZlODdjMjM0MGVlZWY2OTAxZDc2YjA3Y2Q4ZTRiY2YwMTNjNjdkOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2014-12-24T09:07:23Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-12-24T09:07:23Z"}, "message": "re PR c++/63985 (Accepts invalid range-based for declaration)\n\n/cp\n2014-12-04  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/63985\n\t* parser.c (cp_parser_for_init_statement): Reject invalid declarations\n\tin range-based for loops.\n\n/testsuite\n2014-12-04  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/63985\n\t* g++.dg/cpp0x/range-for29.C: New.\n\nFrom-SVN: r219054", "tree": {"sha": "7cb6f4d37bda62e9bdc30a723fe2caec7c1e97c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cb6f4d37bda62e9bdc30a723fe2caec7c1e97c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36e87c2340eeef6901d76b07cd8e4bcf013c67d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36e87c2340eeef6901d76b07cd8e4bcf013c67d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36e87c2340eeef6901d76b07cd8e4bcf013c67d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36e87c2340eeef6901d76b07cd8e4bcf013c67d9/comments", "author": null, "committer": null, "parents": [{"sha": "03267abb359a4228b940534c1aec8ef917f6c4d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03267abb359a4228b940534c1aec8ef917f6c4d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03267abb359a4228b940534c1aec8ef917f6c4d0"}], "stats": {"total": 75, "additions": 63, "deletions": 12}, "files": [{"sha": "cf5ab7102b5597a7f2826ae574e7d1e936e94da9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e87c2340eeef6901d76b07cd8e4bcf013c67d9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e87c2340eeef6901d76b07cd8e4bcf013c67d9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=36e87c2340eeef6901d76b07cd8e4bcf013c67d9", "patch": "@@ -1,3 +1,11 @@\n+2014-12-24  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/63985\n+\t* parser.c (cp_parser_init_declarator): Add location_t* parameter.\n+\t(cp_parser_simple_declaration): Provide proper diagnostic for\n+\tmultiple declarations and initializers in range-based for loops.\n+\t(cp_parser_single_declaration): Adjust call.\n+\n 2014-12-20  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/64359"}, {"sha": "e57a5bd680281800c2e920e87723fd66641c37f8", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 37, "deletions": 12, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e87c2340eeef6901d76b07cd8e4bcf013c67d9/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e87c2340eeef6901d76b07cd8e4bcf013c67d9/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=36e87c2340eeef6901d76b07cd8e4bcf013c67d9", "patch": "@@ -2124,7 +2124,8 @@ static tree cp_parser_decltype\n /* Declarators [gram.dcl.decl] */\n \n static tree cp_parser_init_declarator\n-  (cp_parser *, cp_decl_specifier_seq *, vec<deferred_access_check, va_gc> *, bool, bool, int, bool *, tree *);\n+  (cp_parser *, cp_decl_specifier_seq *, vec<deferred_access_check, va_gc> *,\n+   bool, bool, int, bool *, tree *, location_t *);\n static cp_declarator *cp_parser_declarator\n   (cp_parser *, cp_parser_declarator_kind, int *, bool *, bool, bool);\n static cp_declarator *cp_parser_direct_declarator\n@@ -11454,6 +11455,8 @@ cp_parser_simple_declaration (cp_parser* parser,\n   cp_decl_specifier_seq decl_specifiers;\n   int declares_class_or_enum;\n   bool saw_declarator;\n+  location_t comma_loc = UNKNOWN_LOCATION;\n+  location_t init_loc = UNKNOWN_LOCATION;\n \n   if (maybe_range_for_decl)\n     *maybe_range_for_decl = NULL_TREE;\n@@ -11528,12 +11531,16 @@ cp_parser_simple_declaration (cp_parser* parser,\n \n       if (saw_declarator)\n \t{\n-\t  /* If we are processing next declarator, coma is expected */\n+\t  /* If we are processing next declarator, comma is expected */\n \t  token = cp_lexer_peek_token (parser->lexer);\n \t  gcc_assert (token->type == CPP_COMMA);\n \t  cp_lexer_consume_token (parser->lexer);\n \t  if (maybe_range_for_decl)\n-\t    *maybe_range_for_decl = error_mark_node;\n+\t    {\n+\t      *maybe_range_for_decl = error_mark_node;\n+\t      if (comma_loc == UNKNOWN_LOCATION)\n+\t\tcomma_loc = token->location;\n+\t    }\n \t}\n       else\n \tsaw_declarator = true;\n@@ -11545,7 +11552,8 @@ cp_parser_simple_declaration (cp_parser* parser,\n \t\t\t\t\t/*member_p=*/false,\n \t\t\t\t\tdeclares_class_or_enum,\n \t\t\t\t\t&function_definition_p,\n-\t\t\t\t\tmaybe_range_for_decl);\n+\t\t\t\t\tmaybe_range_for_decl,\n+\t\t\t\t\t&init_loc);\n       /* If an error occurred while parsing tentatively, exit quickly.\n \t (That usually happens when in the body of a function; each\n \t statement is treated as a declaration-statement until proven\n@@ -11631,7 +11639,15 @@ cp_parser_simple_declaration (cp_parser* parser,\n \n   /* Consume the `;'.  */\n   if (!maybe_range_for_decl)\n-      cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);\n+    cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);\n+  else if (cp_lexer_next_token_is (parser->lexer, CPP_COLON))\n+    {\n+      if (init_loc != UNKNOWN_LOCATION)\n+\terror_at (init_loc, \"initializer in range-based %<for%> loop\");\n+      if (comma_loc != UNKNOWN_LOCATION)\n+\terror_at (comma_loc,\n+\t\t  \"multiple declarations in range-based %<for%> loop\");\n+    }\n \n  done:\n   pop_deferring_access_checks ();\n@@ -16842,7 +16858,12 @@ cp_parser_asm_definition (cp_parser* parser)\n    parsed declaration if it is an uninitialized single declarator not followed\n    by a `;', or to error_mark_node otherwise. Either way, the trailing `;',\n    if present, will not be consumed.  If returned, this declarator will be\n-   created with SD_INITIALIZED but will not call cp_finish_decl.  */\n+   created with SD_INITIALIZED but will not call cp_finish_decl.\n+\n+   If INIT_LOC is not NULL, and *INIT_LOC is equal to UNKNOWN_LOCATION,\n+   and there is an initializer, the pointed location_t is set to the\n+   location of the '=' or `(', or '{' in C++11 token introducing the\n+   initializer.  */\n \n static tree\n cp_parser_init_declarator (cp_parser* parser,\n@@ -16852,7 +16873,8 @@ cp_parser_init_declarator (cp_parser* parser,\n \t\t\t   bool member_p,\n \t\t\t   int declares_class_or_enum,\n \t\t\t   bool* function_definition_p,\n-\t\t\t   tree* maybe_range_for_decl)\n+\t\t\t   tree* maybe_range_for_decl,\n+\t\t\t   location_t* init_loc)\n {\n   cp_token *token = NULL, *asm_spec_start_token = NULL,\n            *attributes_start_token = NULL;\n@@ -16875,6 +16897,7 @@ cp_parser_init_declarator (cp_parser* parser,\n   tree pushed_scope = NULL_TREE;\n   bool range_for_decl_p = false;\n   bool saved_default_arg_ok_p = parser->default_arg_ok_p;\n+  location_t tmp_init_loc = UNKNOWN_LOCATION;\n \n   /* Gather the attributes that were provided with the\n      decl-specifiers.  */\n@@ -17041,6 +17064,9 @@ cp_parser_init_declarator (cp_parser* parser,\n       initialization_kind = token->type;\n       if (maybe_range_for_decl)\n \t*maybe_range_for_decl = error_mark_node;\n+      tmp_init_loc = token->location;\n+      if (init_loc && *init_loc == UNKNOWN_LOCATION)\n+\t*init_loc = tmp_init_loc;\n \n       if (token->type == CPP_EQ\n \t  && function_declarator_p (declarator))\n@@ -17063,7 +17089,8 @@ cp_parser_init_declarator (cp_parser* parser,\n \t    range_for_decl_p = true;\n \t  else\n \t    {\n-\t      cp_parser_error (parser, \"expected initializer\");\n+\t      if (!maybe_range_for_decl)\n+\t\tcp_parser_error (parser, \"expected initializer\");\n \t      return error_mark_node;\n \t    }\n \t}\n@@ -17135,7 +17162,6 @@ cp_parser_init_declarator (cp_parser* parser,\n     {\n       if (function_declarator_p (declarator))\n \t{\n-\t  cp_token *initializer_start_token = cp_lexer_peek_token (parser->lexer);\n \t   if (initialization_kind == CPP_EQ)\n \t     initializer = cp_parser_pure_specifier (parser);\n \t   else\n@@ -17144,8 +17170,7 @@ cp_parser_init_declarator (cp_parser* parser,\n \t\t  know what the user intended, so just silently\n \t\t  consume the initializer.  */\n \t       if (decl != error_mark_node)\n-\t\t error_at (initializer_start_token->location,\n-\t\t\t   \"initializer provided for function\");\n+\t\t error_at (tmp_init_loc, \"initializer provided for function\");\n \t       cp_parser_skip_to_closing_parenthesis (parser,\n \t\t\t\t\t\t      /*recovering=*/true,\n \t\t\t\t\t\t      /*or_comma=*/false,\n@@ -23726,7 +23751,7 @@ cp_parser_single_declaration (cp_parser* parser,\n \t\t\t\t        member_p,\n \t\t\t\t        declares_class_or_enum,\n \t\t\t\t        &function_definition_p,\n-\t\t\t\t\tNULL);\n+\t\t\t\t\tNULL, NULL);\n \n     /* 7.1.1-1 [dcl.stc]\n "}, {"sha": "b74165e6eae9cbb1ab61b03f903fd16d8c57e519", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e87c2340eeef6901d76b07cd8e4bcf013c67d9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e87c2340eeef6901d76b07cd8e4bcf013c67d9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=36e87c2340eeef6901d76b07cd8e4bcf013c67d9", "patch": "@@ -1,3 +1,8 @@\n+2014-12-24  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/63985\n+\t* g++.dg/cpp0x/range-for29.C: New.\n+\n 2014-12-22  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* gcc.dg/pr55023.c: New file."}, {"sha": "64ad950927c337e2729aabb0eb165cfe6f69c9fa", "filename": "gcc/testsuite/g++.dg/cpp0x/range-for29.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e87c2340eeef6901d76b07cd8e4bcf013c67d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e87c2340eeef6901d76b07cd8e4bcf013c67d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for29.C?ref=36e87c2340eeef6901d76b07cd8e4bcf013c67d9", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/63985\n+// { dg-require-effective-target c++11 }\n+\n+void foo()\n+{\n+  int arr;\n+\n+  for (int i = 5: arr)  // { dg-error \"initializer in range-based\" }\n+    ;\n+\n+  for (int i, j: arr)   // { dg-error \"multiple declarations in range-based\" }\n+    ;\n+}"}]}