{"sha": "7340e4326b9a5dab8a5141b4d8ad64d51076dfea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM0MGU0MzI2YjlhNWRhYjhhNTE0MWI0ZDhhZDY0ZDUxMDc2ZGZlYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-20T13:18:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-20T13:18:56Z"}, "message": "[multiple changes]\n\n2009-04-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch4.adb (Analyze_User_Defined_Binary_Op): If left operand is\n\toverloaded and one interpretation matches the context, label the\n\toperand with the type of first formal.\n\n2009-04-20  Bob Duff  <duff@adacore.com>\n\n\t* debug.ads: Minor comment fix.\n\n\t* debug.adb: Minor comment fixes.\n\n2009-04-20  Javier Miranda  <miranda@adacore.com>\n\n\t* rtsfind.ads (RE_Null_Id): New entity of package Ada.Exceptions\n\n\t* exp_ch6.adb (Expand_Inlined_Call): Undo previous patch.\n\n\t* exp_ch11.adb (Expand_N_Raise_Statement): When the raise stmt\n\tis expanded into a call to Raise_Exception, avoid passing the\n\texception-name'identity in runtimes in which this argument\n\tis not used.\n\nFrom-SVN: r146416", "tree": {"sha": "c9d39f5c1dc6694d684b73adfb8887c02f034c9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9d39f5c1dc6694d684b73adfb8887c02f034c9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7340e4326b9a5dab8a5141b4d8ad64d51076dfea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7340e4326b9a5dab8a5141b4d8ad64d51076dfea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7340e4326b9a5dab8a5141b4d8ad64d51076dfea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7340e4326b9a5dab8a5141b4d8ad64d51076dfea/comments", "author": null, "committer": null, "parents": [{"sha": "bf06d37fd3a5d68372981a7ced8ecb464f1ae12c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf06d37fd3a5d68372981a7ced8ecb464f1ae12c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf06d37fd3a5d68372981a7ced8ecb464f1ae12c"}], "stats": {"total": 108, "additions": 77, "deletions": 31}, "files": [{"sha": "98d2def25907bcf2deaa587d4370fbe539dc3e1f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7340e4326b9a5dab8a5141b4d8ad64d51076dfea/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7340e4326b9a5dab8a5141b4d8ad64d51076dfea/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7340e4326b9a5dab8a5141b4d8ad64d51076dfea", "patch": "@@ -1,3 +1,26 @@\n+2009-04-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_User_Defined_Binary_Op): If left operand is\n+\toverloaded and one interpretation matches the context, label the\n+\toperand with the type of first formal.\n+\n+2009-04-20  Bob Duff  <duff@adacore.com>\n+\n+\t* debug.ads: Minor comment fix.\n+\n+\t* debug.adb: Minor comment fixes.\n+\n+2009-04-20  Javier Miranda  <miranda@adacore.com>\n+\n+\t* rtsfind.ads (RE_Null_Id): New entity of package Ada.Exceptions\n+\n+\t* exp_ch6.adb (Expand_Inlined_Call): Undo previous patch.\n+\n+\t* exp_ch11.adb (Expand_N_Raise_Statement): When the raise stmt\n+\tis expanded into a call to Raise_Exception, avoid passing the\n+\texception-name'identity in runtimes in which this argument\n+\tis not used.\n+\n 2009-04-20  Jerome Lambourg  <lambourg@adacore.com>\n \n \t* impunit.adb: Add i-cil and i-cilobj packages, now needed by the"}, {"sha": "462975607dfa5a8fabc5436267110c80f76adaf8", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7340e4326b9a5dab8a5141b4d8ad64d51076dfea/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7340e4326b9a5dab8a5141b4d8ad64d51076dfea/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=7340e4326b9a5dab8a5141b4d8ad64d51076dfea", "patch": "@@ -191,7 +191,7 @@ package body Debug is\n    --  dc\n    --  dd\n    --  de\n-   --  df\n+   --  df  Only output file names, not path names, in log\n    --  dg\n    --  dh\n    --  di\n@@ -428,8 +428,6 @@ package body Debug is\n    --       in preelaborable packages, but this restriction is a huge pain,\n    --       especially in the predefined library units.\n \n-   --  dQ   needs full documentation ???\n-\n    --  dR   Bypass the check for a proper version of s-rpc being present\n    --       to use the -gnatz? switch. This allows debugging of the use\n    --       of stubs generation without needing to have GLADE (or some\n@@ -612,6 +610,10 @@ package body Debug is\n    --      be listed, and is useful when diagnosing circularities introduced\n    --      by incorrect changes to the run-time library itself.\n \n+   --  db  Output debug information from Better_Choice in Binde, which uses\n+   --      various heuristics to determine elaboration order in cases where\n+   --      multiple orders are valid.\n+\n    --  dc  List units as they are chosen. As units are selected for addition to\n    --      the elaboration order, a line of output is generated showing which\n    --      unit has been selected."}, {"sha": "9ebaa52cfb0118c79cd662e18cb28261c58a9dca", "filename": "gcc/ada/debug.ads", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7340e4326b9a5dab8a5141b4d8ad64d51076dfea/gcc%2Fada%2Fdebug.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7340e4326b9a5dab8a5141b4d8ad64d51076dfea/gcc%2Fada%2Fdebug.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.ads?ref=7340e4326b9a5dab8a5141b4d8ad64d51076dfea", "patch": "@@ -40,14 +40,13 @@ package Debug is\n    -- Dynamic Debug Flags --\n    -------------------------\n \n-   --  Sixty two flags that can be used to active various specialized\n-   --  debugging output information. The flags are preset to False, which\n-   --  corresponds to the given output being suppressed. The individual\n-   --  flags can be turned on using the undocumented switch dxxx where\n-   --  xxx is a string of letters for flags to be turned on. Documentation\n-   --  on the current usage of these flags is contained in the body of Debug\n-   --  rather than the spec, so that we don't have to recompile the world\n-   --  when a new debug flag is added\n+   --  Flags that can be used to active various specialized debugging output\n+   --  information. The flags are preset to False, which corresponds to the\n+   --  given output being suppressed. The individual flags can be turned on\n+   --  using the undocumented switch dxxx where xxx is a string of letters for\n+   --  flags to be turned on. Documentation on the current usage of these flags\n+   --  is contained in the body of Debug rather than the spec, so that we don't\n+   --  have to recompile the world when a new debug flag is added.\n \n    Debug_Flag_A : Boolean := False;\n    Debug_Flag_B : Boolean := False;"}, {"sha": "961716685b501bd5711bd03a0f165ea4b87301e6", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7340e4326b9a5dab8a5141b4d8ad64d51076dfea/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7340e4326b9a5dab8a5141b4d8ad64d51076dfea/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=7340e4326b9a5dab8a5141b4d8ad64d51076dfea", "patch": "@@ -35,9 +35,9 @@ with Namet;    use Namet;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n with Opt;      use Opt;\n-with Rtsfind;  use Rtsfind;\n with Restrict; use Restrict;\n with Rident;   use Rident;\n+with Rtsfind;  use Rtsfind;\n with Sem;      use Sem;\n with Sem_Ch8;  use Sem_Ch8;\n with Sem_Res;  use Sem_Res;\n@@ -1407,14 +1407,33 @@ package body Exp_Ch11 is\n       --  and there is nothing else to do.\n \n       if Present (Expression (N)) then\n-         Rewrite (N,\n-           Make_Procedure_Call_Statement (Loc,\n-             Name => New_Occurrence_Of (RTE (RE_Raise_Exception), Loc),\n-             Parameter_Associations => New_List (\n-               Make_Attribute_Reference (Loc,\n-                 Prefix         => Name (N),\n-                 Attribute_Name => Name_Identity),\n-               Expression (N))));\n+\n+         --  Avoid passing exception-name'identity in runtimes in which this\n+         --  argument is not used. This avoids generating undefined references\n+         --  to these exceptions when compiling with no optimization\n+\n+         if Configurable_Run_Time_On_Target\n+           and then (Restriction_Active (No_Exception_Handlers)\n+                       or else\n+                     Restriction_Active (No_Exception_Propagation))\n+         then\n+            Rewrite (N,\n+              Make_Procedure_Call_Statement (Loc,\n+                Name => New_Occurrence_Of (RTE (RE_Raise_Exception), Loc),\n+                Parameter_Associations => New_List (\n+                  New_Occurrence_Of (RTE (RE_Null_Id), Loc),\n+                  Expression (N))));\n+         else\n+            Rewrite (N,\n+              Make_Procedure_Call_Statement (Loc,\n+                Name => New_Occurrence_Of (RTE (RE_Raise_Exception), Loc),\n+                Parameter_Associations => New_List (\n+                  Make_Attribute_Reference (Loc,\n+                    Prefix         => Name (N),\n+                    Attribute_Name => Name_Identity),\n+                  Expression (N))));\n+         end if;\n+\n          Analyze (N);\n          return;\n       end if;"}, {"sha": "82311e1bc601f688bc6392c0a2029d2aed008b89", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7340e4326b9a5dab8a5141b4d8ad64d51076dfea/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7340e4326b9a5dab8a5141b4d8ad64d51076dfea/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=7340e4326b9a5dab8a5141b4d8ad64d51076dfea", "patch": "@@ -3670,16 +3670,6 @@ package body Exp_Ch6 is\n             return;\n          end if;\n \n-         --  Avoid generation of temporaries for unreferenced formals\n-\n-         --  What is going on here ??? test below is for *PRAGMA* unreferenced\n-         --  not for an unreferenced formal. Is this a bug fix, or simply an\n-         --  optimization. Needs comment fix and explanation ???\n-\n-         if Has_Pragma_Unreferenced (F) then\n-            goto Continue;\n-         end if;\n-\n          --  If the argument may be a controlling argument in a call within\n          --  the inlined body, we must preserve its classwide nature to insure\n          --  that dynamic dispatching take place subsequently. If the formal\n@@ -3800,7 +3790,6 @@ package body Exp_Ch6 is\n             Set_Renamed_Object (F, Temp);\n          end if;\n \n-         <<Continue>>\n          Next_Formal (F);\n          Next_Actual (A);\n       end loop;"}, {"sha": "95b717ffcfcf3d5d53344f9af1242aeed881e570", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7340e4326b9a5dab8a5141b4d8ad64d51076dfea/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7340e4326b9a5dab8a5141b4d8ad64d51076dfea/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=7340e4326b9a5dab8a5141b4d8ad64d51076dfea", "patch": "@@ -490,6 +490,7 @@ package Rtsfind is\n      RE_Exception_Message,               -- Ada.Exceptions\n      RE_Exception_Name_Simple,           -- Ada.Exceptions\n      RE_Exception_Occurrence,            -- Ada.Exceptions\n+     RE_Null_Id,                         -- Ada.Exceptions\n      RE_Null_Occurrence,                 -- Ada.Exceptions\n      RE_Poll,                            -- Ada.Exceptions\n      RE_Raise_Exception,                 -- Ada.Exceptions\n@@ -1652,6 +1653,7 @@ package Rtsfind is\n      RE_Exception_Message                => Ada_Exceptions,\n      RE_Exception_Name_Simple            => Ada_Exceptions,\n      RE_Exception_Occurrence             => Ada_Exceptions,\n+     RE_Null_Id                          => Ada_Exceptions,\n      RE_Null_Occurrence                  => Ada_Exceptions,\n      RE_Poll                             => Ada_Exceptions,\n      RE_Raise_Exception                  => Ada_Exceptions,"}, {"sha": "5ea961b1ae14c0a27c007eef137f45bc33b26c59", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7340e4326b9a5dab8a5141b4d8ad64d51076dfea/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7340e4326b9a5dab8a5141b4d8ad64d51076dfea/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=7340e4326b9a5dab8a5141b4d8ad64d51076dfea", "patch": "@@ -3918,6 +3918,18 @@ package body Sem_Ch4 is\n             then\n                Add_One_Interp (N, Op_Id, Etype (Op_Id));\n \n+               --  If the left operand is overloaded, indicate that the\n+               --  current type is a viable candidate. This is redundant\n+               --  in most cases, but for equality and comparison operators\n+               --  where the context does not impose a type on the operands,\n+               --  setting the proper type is necessary to avoid subsequent\n+               --  ambiguities during resolution, when both user-defined and\n+               --  predefined operators may be candidates.\n+\n+               if Is_Overloaded (Left_Opnd (N)) then\n+                  Set_Etype (Left_Opnd (N), Etype (F1));\n+               end if;\n+\n                if Debug_Flag_E then\n                   Write_Str (\"user defined operator \");\n                   Write_Name (Chars (Op_Id));"}]}