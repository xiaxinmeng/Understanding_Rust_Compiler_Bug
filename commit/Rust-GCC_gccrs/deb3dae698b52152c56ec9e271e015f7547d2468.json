{"sha": "deb3dae698b52152c56ec9e271e015f7547d2468", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGViM2RhZTY5OGI1MjE1MmM1NmVjOWUyNzFlMDE1Zjc1NDdkMjQ2OA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-11-24T19:04:04Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-11-24T19:04:04Z"}, "message": "tree.c (free_node): New function.\n\n\t* tree.c (free_node): New function.\n\t(type_hash_canon): Use it.\n\t* tree.h (free_node): Declare.\n\t* lto.c (unify_scc): Use free_node.\n\nFrom-SVN: r230833", "tree": {"sha": "cbddd6bafd673199d9301ff3e023bd7f2712bbb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbddd6bafd673199d9301ff3e023bd7f2712bbb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/deb3dae698b52152c56ec9e271e015f7547d2468", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deb3dae698b52152c56ec9e271e015f7547d2468", "html_url": "https://github.com/Rust-GCC/gccrs/commit/deb3dae698b52152c56ec9e271e015f7547d2468", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deb3dae698b52152c56ec9e271e015f7547d2468/comments", "author": null, "committer": null, "parents": [{"sha": "d7dc0f8037a3999144177147fb772ab26c2aad6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7dc0f8037a3999144177147fb772ab26c2aad6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7dc0f8037a3999144177147fb772ab26c2aad6a"}], "stats": {"total": 48, "additions": 37, "deletions": 11}, "files": [{"sha": "d4db20a700e2041ceb9dead7bf6740bac13a2683", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deb3dae698b52152c56ec9e271e015f7547d2468/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deb3dae698b52152c56ec9e271e015f7547d2468/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=deb3dae698b52152c56ec9e271e015f7547d2468", "patch": "@@ -1,3 +1,9 @@\n+2015-11-24  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree.c (free_node): New function.\n+\t(type_hash_canon): Use it.\n+\t* tree.h (free_node): Declare.\n+\n 2015-11-24  David Edelsohn  <dje.gcc@gmail.com>\n \t    Michael Meissner  <meissner@linux.vnet.ibm.com>\n "}, {"sha": "9d6b12640c6e4c899e3ae2c2ed39af902083cfff", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deb3dae698b52152c56ec9e271e015f7547d2468/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deb3dae698b52152c56ec9e271e015f7547d2468/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=deb3dae698b52152c56ec9e271e015f7547d2468", "patch": "@@ -1,3 +1,7 @@\n+2015-11-24  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* lto.c (unify_scc): Use free_node.\n+\n 2015-11-21  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* lto.c (iterative_hash_canonical_type): Always recurse for pointers."}, {"sha": "c4c51588adcb6ea86737c5f051a7b8066b4482d1", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deb3dae698b52152c56ec9e271e015f7547d2468/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deb3dae698b52152c56ec9e271e015f7547d2468/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=deb3dae698b52152c56ec9e271e015f7547d2468", "patch": "@@ -1623,13 +1623,9 @@ unify_scc (struct data_in *data_in, unsigned from,\n \t  data_in->location_cache.revert_location_cache ();\n \t  for (unsigned i = 0; i < len; ++i)\n \t    {\n-\t      enum tree_code code;\n \t      if (TYPE_P (scc->entries[i]))\n \t\tnum_merged_types++;\n-\t      code = TREE_CODE (scc->entries[i]);\n-\t      if (CODE_CONTAINS_STRUCT (code, TS_CONSTRUCTOR))\n-\t\tvec_free (CONSTRUCTOR_ELTS (scc->entries[i]));\n-\t      ggc_free (scc->entries[i]);\n+\t      free_node (scc->entries[i]);\n \t    }\n \n \t  break;"}, {"sha": "2888657fe044d6f6554363e6db06c2a3d703053d", "filename": "gcc/tree.c", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deb3dae698b52152c56ec9e271e015f7547d2468/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deb3dae698b52152c56ec9e271e015f7547d2468/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=deb3dae698b52152c56ec9e271e015f7547d2468", "patch": "@@ -1103,6 +1103,27 @@ make_node_stat (enum tree_code code MEM_STAT_DECL)\n \n   return t;\n }\n+\n+/* Free tree node.  */\n+\n+void\n+free_node (tree node)\n+{\n+  enum tree_code code = TREE_CODE (node);\n+  if (GATHER_STATISTICS)\n+    {\n+      tree_code_counts[(int) TREE_CODE (node)]--;\n+      tree_node_counts[(int) t_kind]--;\n+      tree_node_sizes[(int) t_kind] -= tree_code_size (TREE_CODE (node));\n+    }\n+  if (CODE_CONTAINS_STRUCT (code, TS_CONSTRUCTOR))\n+    vec_free (CONSTRUCTOR_ELTS (node));\n+  else if (code == BLOCK)\n+    vec_free (BLOCK_NONLOCALIZED_VARS (node));\n+  else if (code == TREE_BINFO)\n+    vec_free (BINFO_BASE_ACCESSES (node));\n+  ggc_free (node);\n+}\n \f\n /* Return a new node with the same contents as NODE except that its\n    TREE_CHAIN, if it has one, is zero and it has a fresh uid.  */\n@@ -7100,12 +7121,7 @@ type_hash_canon (unsigned int hashcode, tree type)\n     {\n       tree t1 = ((type_hash *) *loc)->type;\n       gcc_assert (TYPE_MAIN_VARIANT (t1) == t1);\n-      if (GATHER_STATISTICS)\n-\t{\n-\t  tree_code_counts[(int) TREE_CODE (type)]--;\n-\t  tree_node_counts[(int) t_kind]--;\n-\t  tree_node_sizes[(int) t_kind] -= sizeof (struct tree_type_non_common);\n-\t}\n+      free_node (type);\n       return t1;\n     }\n   else"}, {"sha": "6c733aa5e4c952d670053cc967e54ebaf70c6e72", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deb3dae698b52152c56ec9e271e015f7547d2468/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deb3dae698b52152c56ec9e271e015f7547d2468/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=deb3dae698b52152c56ec9e271e015f7547d2468", "patch": "@@ -3763,6 +3763,10 @@ extern int allocate_decl_uid (void);\n extern tree make_node_stat (enum tree_code MEM_STAT_DECL);\n #define make_node(t) make_node_stat (t MEM_STAT_INFO)\n \n+/* Free tree node.  */\n+\n+extern void free_node (tree);\n+\n /* Make a copy of a node, with all the same contents.  */\n \n extern tree copy_node_stat (tree MEM_STAT_DECL);"}]}