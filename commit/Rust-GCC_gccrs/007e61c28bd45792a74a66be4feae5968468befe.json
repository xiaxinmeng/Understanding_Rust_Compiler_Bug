{"sha": "007e61c28bd45792a74a66be4feae5968468befe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA3ZTYxYzI4YmQ0NTc5MmE3NGE2NmJlNGZlYWU1OTY4NDY4YmVmZQ==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2008-05-23T20:36:57Z"}, "committer": {"name": "Carlos O'Donell", "email": "carlos@gcc.gnu.org", "date": "2008-05-23T20:36:57Z"}, "message": "extend.texi: Clarify use of __attribute__((naked)).\n\ngcc/\n\n2008-05-23  Paul Brook  <paul@codesourcery.com>\n\t    Carlos O'Donell  <carlos@codesourcery.com>\n\n\t* doc/extend.texi: Clarify use of __attribute__((naked)).\n\t* doc/tm.texi: Document TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS.\n\t* target.h (gcc_target): Add allocate_stack_slots_for_args.\n\t* function.c (use_register_for_decl): Use\n\ttargetm.calls.allocate_stack_slots_for_args.\n\t* target-def.h (TARGET_CALLS): Add \n\tTARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS.\n\t* config/arm/arm.c (arm_allocate_stack_slots_for_args): \n\tNew function.\n\t(TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS): Define.\n\ngcc/testsuite/\n\n2008-05-23  Paul Brook  <paul@codesourcery.com>\n\t    Carlos O'Donell  <carlos@codesourcery.com>\n\n\t* gcc.target/arm/naked-1.c: New test.\n\t* gcc.target/arm/naked-2.c: New test.\n\n\nCo-Authored-By: Carlos O'Donell <carlos@codesourcery.com>\n\nFrom-SVN: r135831", "tree": {"sha": "fabe76f974542d0458d609ec4222651293549585", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fabe76f974542d0458d609ec4222651293549585"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/007e61c28bd45792a74a66be4feae5968468befe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/007e61c28bd45792a74a66be4feae5968468befe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/007e61c28bd45792a74a66be4feae5968468befe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/007e61c28bd45792a74a66be4feae5968468befe/comments", "author": null, "committer": null, "parents": [{"sha": "b86c6d94f8ceddd239e1cf26687302de6b88f1ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b86c6d94f8ceddd239e1cf26687302de6b88f1ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b86c6d94f8ceddd239e1cf26687302de6b88f1ab"}], "stats": {"total": 88, "additions": 86, "deletions": 2}, "files": [{"sha": "c1712af05ebab35415187b2d8053bfefe357a1eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/007e61c28bd45792a74a66be4feae5968468befe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/007e61c28bd45792a74a66be4feae5968468befe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=007e61c28bd45792a74a66be4feae5968468befe", "patch": "@@ -1,3 +1,17 @@\n+2008-05-23  Paul Brook  <paul@codesourcery.com>\n+\t    Carlos O'Donell  <carlos@codesourcery.com>\n+\n+\t* doc/extend.texi: Clarify use of __attribute__((naked)).\n+\t* doc/tm.texi: Document TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS.\n+\t* target.h (gcc_target): Add allocate_stack_slots_for_args.\n+\t* function.c (use_register_for_decl): Use\n+\ttargetm.calls.allocate_stack_slots_for_args.\n+\t* target-def.h (TARGET_CALLS): Add \n+\tTARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS.\n+\t* config/arm/arm.c (arm_allocate_stack_slots_for_args): \n+\tNew function.\n+\t(TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS): Define.\n+\n 2008-05-23  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* expr.c (highest_pow2_factor) <BIT_AND_EXPR>: New case."}, {"sha": "38d4a2d9d9f150c524f4f25f9a674389d915da69", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/007e61c28bd45792a74a66be4feae5968468befe/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/007e61c28bd45792a74a66be4feae5968468befe/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=007e61c28bd45792a74a66be4feae5968468befe", "patch": "@@ -189,6 +189,7 @@ static bool arm_cannot_copy_insn_p (rtx);\n static bool arm_tls_symbol_p (rtx x);\n static int arm_issue_rate (void);\n static void arm_output_dwarf_dtprel (FILE *, int, rtx) ATTRIBUTE_UNUSED;\n+static bool arm_allocate_stack_slots_for_args (void);\n \n \f\n /* Initialize the GCC target structure.  */\n@@ -289,6 +290,9 @@ static void arm_output_dwarf_dtprel (FILE *, int, rtx) ATTRIBUTE_UNUSED;\n #undef  TARGET_SETUP_INCOMING_VARARGS\n #define TARGET_SETUP_INCOMING_VARARGS arm_setup_incoming_varargs\n \n+#undef TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS\n+#define TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS arm_allocate_stack_slots_for_args\n+\n #undef TARGET_DEFAULT_SHORT_ENUMS\n #define TARGET_DEFAULT_SHORT_ENUMS arm_default_short_enums\n \n@@ -1619,6 +1623,14 @@ arm_current_func_type (void)\n \n   return cfun->machine->func_type;\n }\n+\n+bool\n+arm_allocate_stack_slots_for_args (void)\n+{\n+  /* Naked functions should not allocate stack slots for arguments.  */\n+  return !IS_NAKED (arm_current_func_type ());\n+}\n+\n \f\n /* Return 1 if it is possible to return using a single instruction.\n    If SIBLING is non-null, this is a test for a return before a sibling"}, {"sha": "f0e85933699dcc77145ea580c5f4e0cbf2bca9b7", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/007e61c28bd45792a74a66be4feae5968468befe/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/007e61c28bd45792a74a66be4feae5968468befe/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=007e61c28bd45792a74a66be4feae5968468befe", "patch": "@@ -2512,7 +2512,13 @@ defined by shared libraries.\n @cindex function without a prologue/epilogue code\n Use this attribute on the ARM, AVR, IP2K and SPU ports to indicate that\n the specified function does not need prologue/epilogue sequences generated by\n-the compiler.  It is up to the programmer to provide these sequences.\n+the compiler.  It is up to the programmer to provide these sequences. The \n+only statements that can be safely included in naked functions are \n+@code{asm} statements that do not have operands.  All other statements,\n+including declarations of local variables, @code{if} statements, and so \n+forth, should be avoided.  Naked functions should be used to implement the \n+body of an assembly function, while allowing the compiler to construct\n+the requisite function declaration for the assembler.\n \n @item near\n @cindex functions which do not handle memory bank switching on 68HC11/68HC12"}, {"sha": "8c0de3b41dea5cd53c390b451541ff765a388743", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/007e61c28bd45792a74a66be4feae5968468befe/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/007e61c28bd45792a74a66be4feae5968468befe/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=007e61c28bd45792a74a66be4feae5968468befe", "patch": "@@ -10465,3 +10465,14 @@ to the functions in @file{libgcc} that provide low-level support for\n call stack unwinding.  It is used in declarations in @file{unwind-generic.h}\n and the associated definitions of those functions.\n @end defmac\n+\n+@deftypefn {Target Hook} {bool} TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS (void)\n+When optimization is disabled, this hook indicates whether or not\n+arguments should be allocated to stack slots.  Normally, GCC allocates\n+stacks slots for arguments when not optimizing in order to make\n+debugging easier.  However, when a function is declared with\n+@code{__attribute__((naked))}, there is no stack frame, and the compiler\n+cannot safely move arguments from the registers in which they are passed\n+to the stack.  Therefore, this hook should return true in general, but\n+false for naked functions.  The default implementation always returns true.\n+@end deftypefn"}, {"sha": "5f9c3a5ce2cd9d3022f72f9e071ddc0af768215d", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/007e61c28bd45792a74a66be4feae5968468befe/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/007e61c28bd45792a74a66be4feae5968468befe/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=007e61c28bd45792a74a66be4feae5968468befe", "patch": "@@ -1776,6 +1776,9 @@ aggregate_value_p (const_tree exp, const_tree fntype)\n bool\n use_register_for_decl (const_tree decl)\n {\n+  if (!targetm.calls.allocate_stack_slots_for_args())\n+    return true;\n+  \n   /* Honor volatile.  */\n   if (TREE_SIDE_EFFECTS (decl))\n     return false;"}, {"sha": "19e882f3787df3dfbcdc54d0eb80824ed3fa248d", "filename": "gcc/target-def.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/007e61c28bd45792a74a66be4feae5968468befe/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/007e61c28bd45792a74a66be4feae5968468befe/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=007e61c28bd45792a74a66be4feae5968468befe", "patch": "@@ -568,6 +568,7 @@\n \n #define TARGET_FUNCTION_VALUE default_function_value\n #define TARGET_INTERNAL_ARG_POINTER default_internal_arg_pointer\n+#define TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS hook_bool_void_true\n \n #define TARGET_CALLS {\t\t\t\t\t\t\\\n    TARGET_PROMOTE_FUNCTION_ARGS,\t\t\t\t\\\n@@ -587,7 +588,8 @@\n    TARGET_ARG_PARTIAL_BYTES,\t\t\t\t\t\\\n    TARGET_INVALID_ARG_FOR_UNPROTOTYPED_FN,\t\t\t\\\n    TARGET_FUNCTION_VALUE,\t\t\t\t\t\\\n-   TARGET_INTERNAL_ARG_POINTER\t\t\t\t\t\\\n+   TARGET_INTERNAL_ARG_POINTER,\t\t\t\t\t\\\n+   TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS\t\t\t\t\\\n    }\n \n #ifndef TARGET_UNWIND_TABLES_DEFAULT"}, {"sha": "fa85e7cacd6259c716100f94a382eb4083ac7d48", "filename": "gcc/target.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/007e61c28bd45792a74a66be4feae5968468befe/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/007e61c28bd45792a74a66be4feae5968468befe/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=007e61c28bd45792a74a66be4feae5968468befe", "patch": "@@ -830,6 +830,11 @@ struct gcc_target\n     /* Return an rtx for the argument pointer incoming to the\n        current function.  */\n     rtx (*internal_arg_pointer) (void);\n+\n+    /* Return true if all function parameters should be spilled to the\n+       stack.  */\n+    bool (*allocate_stack_slots_for_args) (void);\n+    \n   } calls;\n \n   /* Return the diagnostic message string if conversion from FROMTYPE"}, {"sha": "1c457cc7fa311c9701d08d45f960a4ea22abff05", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/007e61c28bd45792a74a66be4feae5968468befe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/007e61c28bd45792a74a66be4feae5968468befe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=007e61c28bd45792a74a66be4feae5968468befe", "patch": "@@ -1,3 +1,9 @@\n+2008-05-23  Paul Brook  <paul@codesourcery.com>\n+\t    Carlos O'Donell  <carlos@codesourcery.com>\n+\n+\t* gcc.target/arm/naked-1.c: New test.\n+\t* gcc.target/arm/naked-2.c: New test.\n+\n 2008-05-23  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/36314"}, {"sha": "8f9ff711a5eee381618b34adbe5a1caa222d814e", "filename": "gcc/testsuite/gcc.target/arm/naked-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/007e61c28bd45792a74a66be4feae5968468befe/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fnaked-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/007e61c28bd45792a74a66be4feae5968468befe/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fnaked-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fnaked-1.c?ref=007e61c28bd45792a74a66be4feae5968468befe", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0\" } */\n+/* Check that function arguments aren't assigned and copied to stack slots\n+   in naked functions.  This ususally happens at -O0 (presumably for\n+   better debugging), but is highly undesirable if we haven't created\n+   a stack frame.  */\n+void __attribute__((naked))\n+foo(int n)\n+{\n+  __asm__ volatile (\"frob r0\\n\");\n+}\n+/* { dg-final { scan-assembler \"\\tfrob r0\" } } */\n+/* { dg-final { scan-assembler-not \"\\tstr\" } } */"}, {"sha": "92e7db4447d703c54f66b2267514cdc7d01d5cfd", "filename": "gcc/testsuite/gcc.target/arm/naked-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/007e61c28bd45792a74a66be4feae5968468befe/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fnaked-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/007e61c28bd45792a74a66be4feae5968468befe/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fnaked-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fnaked-2.c?ref=007e61c28bd45792a74a66be4feae5968468befe", "patch": "@@ -0,0 +1,12 @@\n+/* Verify that __attribute__((naked)) produces a naked function \n+   that does not use bx to return. Naked functions could be used\n+   to implement interrupt routines and must not return using bx.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0\" } */\n+/* Use more arguments than we have argument registers.  */\n+int __attribute__((naked)) foo(int a, int b, int c, int d, int e, int f)\n+{\n+  __asm__ volatile (\"@ naked\");\n+}\n+/* { dg-final { scan-assembler \"\\t@ naked\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbx\\tlr\" } } */"}]}