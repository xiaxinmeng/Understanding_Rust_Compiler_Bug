{"sha": "66c182be120bb3777329475c67338b7c0d9ad2f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZjMTgyYmUxMjBiYjM3NzczMjk0NzVjNjczMzhiN2MwZDlhZDJmNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-08-26T20:58:14Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-08-26T20:58:14Z"}, "message": "try_emplace and insert_or_assign for Debug Mode.\n\n\t* include/debug/map.h (map::try_emplace, map::insert_or_assign):\n\tDefine.\n\t* include/debug/unordered_map (unordered_map::try_emplace,\n\tunordered_map::insert_or_assign): Define.\n\nFrom-SVN: r227229", "tree": {"sha": "7d7ffe88f8738f87e3ee76692d9f2e1af309a69a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d7ffe88f8738f87e3ee76692d9f2e1af309a69a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66c182be120bb3777329475c67338b7c0d9ad2f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66c182be120bb3777329475c67338b7c0d9ad2f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66c182be120bb3777329475c67338b7c0d9ad2f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66c182be120bb3777329475c67338b7c0d9ad2f4/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e41fd1f0674bb58c4715d4656142ec9e7a9583b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e41fd1f0674bb58c4715d4656142ec9e7a9583b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e41fd1f0674bb58c4715d4656142ec9e7a9583b6"}], "stats": {"total": 170, "additions": 170, "deletions": 0}, "files": [{"sha": "0bc0aca0211dc873559c46d66fb4974099790e64", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66c182be120bb3777329475c67338b7c0d9ad2f4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66c182be120bb3777329475c67338b7c0d9ad2f4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=66c182be120bb3777329475c67338b7c0d9ad2f4", "patch": "@@ -1,5 +1,10 @@\n 2015-08-26  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/debug/map.h (map::try_emplace, map::insert_or_assign):\n+\tDefine.\n+\t* include/debug/unordered_map (unordered_map::try_emplace,\n+\tunordered_map::insert_or_assign): Define.\n+\n \tPR libstdc++/66902\n \t* src/c++11/debug.cc (_S_debug_messages): Give internal linkage.\n "}, {"sha": "914d72150376c6f687a70121a456829a23203520", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66c182be120bb3777329475c67338b7c0d9ad2f4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66c182be120bb3777329475c67338b7c0d9ad2f4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=66c182be120bb3777329475c67338b7c0d9ad2f4", "patch": "@@ -317,6 +317,89 @@ namespace __debug\n \t    _Base::insert(__first, __last);\n \t}\n \n+\n+#if __cplusplus > 201402L\n+      template <typename... _Args>\n+        pair<iterator, bool>\n+        try_emplace(const key_type& __k, _Args&&... __args)\n+        {\n+\t  auto __res = _Base::try_emplace(__k,\n+\t\t\t\t\t  std::forward<_Args>(__args)...);\n+\t  return { iterator(__res.first, this), __res.second };\n+\t}\n+\n+      template <typename... _Args>\n+        pair<iterator, bool>\n+        try_emplace(key_type&& __k, _Args&&... __args)\n+        {\n+\t  auto __res = _Base::try_emplace(std::move(__k),\n+\t\t\t\t\t  std::forward<_Args>(__args)...);\n+\t  return { iterator(__res.first, this), __res.second };\n+\t}\n+\n+      template <typename... _Args>\n+        iterator\n+        try_emplace(const_iterator __hint, const key_type& __k,\n+                    _Args&&... __args)\n+        {\n+\t  __glibcxx_check_insert(__hint);\n+\t  return iterator(_Base::try_emplace(__hint.base(), __k,\n+\t\t\t\t\t     std::forward<_Args>(__args)...),\n+\t\t\t  this);\n+\t}\n+\n+      template <typename... _Args>\n+        iterator\n+        try_emplace(const_iterator __hint, key_type&& __k, _Args&&... __args)\n+        {\n+\t  __glibcxx_check_insert(__hint);\n+\t  return iterator(_Base::try_emplace(__hint.base(), std::move(__k),\n+\t\t\t\t\t     std::forward<_Args>(__args)...),\n+\t\t\t  this);\n+\t}\n+\n+      template <typename _Obj>\n+        std::pair<iterator, bool>\n+        insert_or_assign(const key_type& __k, _Obj&& __obj)\n+\t{\n+\t  auto __res = _Base::insert_or_assign(__k,\n+\t\t\t\t\t       std::forward<_Obj>(__obj));\n+\t  return { iterator(__res.first, this), __res.second };\n+\t}\n+\n+      template <typename _Obj>\n+        std::pair<iterator, bool>\n+        insert_or_assign(key_type&& __k, _Obj&& __obj)\n+\t{\n+\t  auto __res = _Base::insert_or_assign(std::move(__k),\n+\t\t\t\t\t       std::forward<_Obj>(__obj));\n+\t  return { iterator(__res.first, this), __res.second };\n+\t}\n+\n+      template <typename _Obj>\n+        iterator\n+        insert_or_assign(const_iterator __hint,\n+                         const key_type& __k, _Obj&& __obj)\n+\t{\n+\t  __glibcxx_check_insert(__hint);\n+\t  return iterator(_Base::insert_or_assign(__hint.base(), __k,\n+\t\t\t\t\t\t  std::forward<_Obj>(__obj)),\n+\t\t\t  this);\n+\t}\n+\n+      template <typename _Obj>\n+        iterator\n+        insert_or_assign(const_iterator __hint, key_type&& __k, _Obj&& __obj)\n+        {\n+\t  __glibcxx_check_insert(__hint);\n+\t  return iterator(_Base::insert_or_assign(__hint.base(),\n+\t\t\t\t\t\t  std::move(__k),\n+\t\t\t\t\t\t  std::forward<_Obj>(__obj)),\n+\t\t\t  this);\n+\t}\n+#endif\n+\n+\n #if __cplusplus >= 201103L\n       iterator\n       erase(const_iterator __position)"}, {"sha": "1bbdb614af3e35792427f09e31f16befb336488c", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66c182be120bb3777329475c67338b7c0d9ad2f4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66c182be120bb3777329475c67338b7c0d9ad2f4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=66c182be120bb3777329475c67338b7c0d9ad2f4", "patch": "@@ -377,6 +377,88 @@ namespace __debug\n \t  _M_check_rehashed(__bucket_count);\n \t}\n \n+#if __cplusplus > 201402L\n+      template <typename... _Args>\n+        pair<iterator, bool>\n+        try_emplace(const key_type& __k, _Args&&... __args)\n+        {\n+\t  auto __res = _Base::try_emplace(__k,\n+\t\t\t\t\t  std::forward<_Args>(__args)...);\n+\t  return { iterator(__res.first, this), __res.second };\n+\t}\n+\n+      template <typename... _Args>\n+        pair<iterator, bool>\n+        try_emplace(key_type&& __k, _Args&&... __args)\n+        {\n+\t  auto __res = _Base::try_emplace(std::move(__k),\n+\t\t\t\t\t  std::forward<_Args>(__args)...);\n+\t  return { iterator(__res.first, this), __res.second };\n+\t}\n+\n+      template <typename... _Args>\n+        iterator\n+        try_emplace(const_iterator __hint, const key_type& __k,\n+                    _Args&&... __args)\n+        {\n+\t  __glibcxx_check_insert(__hint);\n+\t  return iterator(_Base::try_emplace(__hint.base(), __k,\n+\t\t\t\t\t     std::forward<_Args>(__args)...),\n+\t\t\t  this);\n+\t}\n+\n+      template <typename... _Args>\n+        iterator\n+        try_emplace(const_iterator __hint, key_type&& __k, _Args&&... __args)\n+        {\n+\t  __glibcxx_check_insert(__hint);\n+\t  return iterator(_Base::try_emplace(__hint.base(), std::move(__k),\n+\t\t\t\t\t     std::forward<_Args>(__args)...),\n+\t\t\t  this);\n+\t}\n+\n+      template <typename _Obj>\n+        pair<iterator, bool>\n+        insert_or_assign(const key_type& __k, _Obj&& __obj)\n+        {\n+\t  auto __res = _Base::insert_or_assign(__k,\n+\t\t\t\t\t       std::forward<_Obj>(__obj));\n+\t  return { iterator(__res.first, this), __res.second };\n+\t}\n+\n+      template <typename _Obj>\n+        pair<iterator, bool>\n+        insert_or_assign(key_type&& __k, _Obj&& __obj)\n+        {\n+\t  auto __res = _Base::insert_or_assign(std::move(__k),\n+\t\t\t\t\t       std::forward<_Obj>(__obj));\n+\t  return { iterator(__res.first, this), __res.second };\n+\t}\n+\n+      template <typename _Obj>\n+        iterator\n+        insert_or_assign(const_iterator __hint, const key_type& __k,\n+                         _Obj&& __obj)\n+        {\n+\t  __glibcxx_check_insert(__hint);\n+\t  return iterator(_Base::insert_or_assign(__hint.base(), __k,\n+\t\t\t\t\t\t  std::forward<_Obj>(__obj)),\n+\t\t\t  this);\n+\t}\n+\n+      template <typename _Obj>\n+        iterator\n+        insert_or_assign(const_iterator __hint, key_type&& __k, _Obj&& __obj)\n+        {\n+\t  __glibcxx_check_insert(__hint);\n+\t  return iterator(_Base::insert_or_assign(__hint.base(),\n+\t\t\t\t\t\t  std::move(__k),\n+\t\t\t\t\t\t  std::forward<_Obj>(__obj)),\n+\t\t\t  this);\n+\t}\n+#endif\n+\n+\n       iterator\n       find(const key_type& __key)\n       { return iterator(_Base::find(__key), this); }"}]}