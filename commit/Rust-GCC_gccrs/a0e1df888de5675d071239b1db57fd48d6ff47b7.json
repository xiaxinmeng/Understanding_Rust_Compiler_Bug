{"sha": "a0e1df888de5675d071239b1db57fd48d6ff47b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBlMWRmODg4ZGU1Njc1ZDA3MTIzOWIxZGI1N2ZkNDhkNmZmNDdiNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-04-19T07:45:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-04-19T07:45:51Z"}, "message": "cet.m4 (GCC_CET_FLAGS): Default to --disable-cet, replace --enable-cet=default with --enable-cet=auto.\n\n\t* config/cet.m4 (GCC_CET_FLAGS): Default to --disable-cet, replace\n\t--enable-cet=default with --enable-cet=auto.\n\n\t* doc/install.texi: Document --disable-cet being the default and\n\t--enable-cet=auto.\n\n\t* configure: Regenerated.\n\nFrom-SVN: r259487", "tree": {"sha": "b0c9b9254a3be05982a8b50a9f49a73a011ebce8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0c9b9254a3be05982a8b50a9f49a73a011ebce8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0e1df888de5675d071239b1db57fd48d6ff47b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0e1df888de5675d071239b1db57fd48d6ff47b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0e1df888de5675d071239b1db57fd48d6ff47b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0e1df888de5675d071239b1db57fd48d6ff47b7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4f3fc30103ca6d8d5cb6b1a01c4db33d5ab813b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f3fc30103ca6d8d5cb6b1a01c4db33d5ab813b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f3fc30103ca6d8d5cb6b1a01c4db33d5ab813b4"}], "stats": {"total": 256, "additions": 153, "deletions": 103}, "files": [{"sha": "ba360e1016579f8be09c909a6b894ae3022ecedf", "filename": "config/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e1df888de5675d071239b1db57fd48d6ff47b7/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e1df888de5675d071239b1db57fd48d6ff47b7/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=a0e1df888de5675d071239b1db57fd48d6ff47b7", "patch": "@@ -1,3 +1,8 @@\n+2018-04-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/cet.m4 (GCC_CET_FLAGS): Default to --disable-cet, replace\n+\t--enable-cet=default with --enable-cet=auto.\n+\n 2018-04-18  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/85384"}, {"sha": "04a0e05d2ff987ece8bd7ddb41c36fb01c749ff4", "filename": "config/cet.m4", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e1df888de5675d071239b1db57fd48d6ff47b7/config%2Fcet.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e1df888de5675d071239b1db57fd48d6ff47b7/config%2Fcet.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fcet.m4?ref=a0e1df888de5675d071239b1db57fd48d6ff47b7", "patch": "@@ -3,14 +3,14 @@ dnl GCC_CET_FLAGS\n dnl    (SHELL-CODE_HANDLER)\n dnl\n AC_DEFUN([GCC_CET_FLAGS],[dnl\n-GCC_ENABLE(cet, default, ,[enable Intel CET in target libraries],\n-\t   permit yes|no|default)\n+GCC_ENABLE(cet, no, ,[enable Intel CET in target libraries],\n+\t   permit yes|no|auto)\n AC_MSG_CHECKING([for CET support])\n \n case \"$host\" in\n   i[[34567]]86-*-linux* | x86_64-*-linux*)\n     case \"$enable_cet\" in\n-      default)\n+      auto)\n \t# Check if target supports multi-byte NOPs\n \t# and if assembler supports CET insn.\n \tAC_COMPILE_IFELSE("}, {"sha": "0e028045342fe038ed8eb55de26e9bfd0ed41452", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e1df888de5675d071239b1db57fd48d6ff47b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e1df888de5675d071239b1db57fd48d6ff47b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0e1df888de5675d071239b1db57fd48d6ff47b7", "patch": "@@ -1,3 +1,8 @@\n+2018-04-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* doc/install.texi: Document --disable-cet being the default and\n+\t--enable-cet=auto.\n+\n 2018-04-18  Martin Liska  <mliska@suse.cz>\n \n \t* ipa-devirt.c (odr_subtypes_equivalent_p): Fix GNU coding"}, {"sha": "73030a2281ac3f2c879ce8bd918809c6e2609a33", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e1df888de5675d071239b1db57fd48d6ff47b7/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e1df888de5675d071239b1db57fd48d6ff47b7/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=a0e1df888de5675d071239b1db57fd48d6ff47b7", "patch": "@@ -2103,10 +2103,11 @@ instrumentation, see @option{-fcf-protection} option.  When\n to add @option{-fcf-protection} and, if needed, other target\n specific options to a set of building options.\n \n-The option is enabled by default on Linux/x86 if target binutils\n-supports @code{Intel CET} instructions.  In this case the target\n-libraries are configured to get additional @option{-fcf-protection}\n-and @option{-mcet} options.\n+The option is disabled by default.  When @code{--enable-cet=auto}\n+is used, it is enabled on Linux/x86 if target binutils\n+supports @code{Intel CET} instructions and disabled otherwise.\n+In this case the target libraries are configured to get additional\n+@option{-fcf-protection} and @option{-mcet} options.\n @end table\n \n @subheading Cross-Compiler-Specific Options"}, {"sha": "090d4f9e158fc1be739aee755ee412a9c6e59a7c", "filename": "libatomic/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e1df888de5675d071239b1db57fd48d6ff47b7/libatomic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e1df888de5675d071239b1db57fd48d6ff47b7/libatomic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FChangeLog?ref=a0e1df888de5675d071239b1db57fd48d6ff47b7", "patch": "@@ -1,3 +1,7 @@\n+2018-04-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure: Regenerated.\n+\n 2018-04-18  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/85384"}, {"sha": "67a2c9269a34aab8e2e4dde31f5fc310f4deaef3", "filename": "libatomic/configure", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e1df888de5675d071239b1db57fd48d6ff47b7/libatomic%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e1df888de5675d071239b1db57fd48d6ff47b7/libatomic%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Fconfigure?ref=a0e1df888de5675d071239b1db57fd48d6ff47b7", "patch": "@@ -1414,8 +1414,7 @@ Optional Features:\n \t\t\t  (and sometimes confusing) to the casual installer\n   --enable-symvers=STYLE  enables symbol versioning of the shared library\n                           [default=yes]\n-  --enable-cet            enable Intel CET in target libraries\n-                          [default=default]\n+  --enable-cet            enable Intel CET in target libraries [default=no]\n \n Optional Packages:\n   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n@@ -11121,7 +11120,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11124 \"configure\"\n+#line 11123 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11227,7 +11226,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11230 \"configure\"\n+#line 11229 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -15305,12 +15304,12 @@ fi\n if test \"${enable_cet+set}\" = set; then :\n   enableval=$enable_cet;\n       case \"$enableval\" in\n-       yes|no|default) ;;\n+       yes|no|auto) ;;\n        *) as_fn_error \"Unknown argument to enable/disable cet\" \"$LINENO\" 5 ;;\n                           esac\n \n else\n-  enable_cet=default\n+  enable_cet=no\n fi\n \n \n@@ -15320,7 +15319,7 @@ $as_echo_n \"checking for CET support... \" >&6; }\n case \"$host\" in\n   i[34567]86-*-linux* | x86_64-*-linux*)\n     case \"$enable_cet\" in\n-      default)\n+      auto)\n \t# Check if target supports multi-byte NOPs\n \t# and if assembler supports CET insn.\n \tcat confdefs.h - <<_ACEOF >conftest.$ac_ext"}, {"sha": "097993bedf361b5db245550499c8610cb6c1ddfa", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e1df888de5675d071239b1db57fd48d6ff47b7/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e1df888de5675d071239b1db57fd48d6ff47b7/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=a0e1df888de5675d071239b1db57fd48d6ff47b7", "patch": "@@ -1,3 +1,7 @@\n+2018-04-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure: Regenerated.\n+\n 2018-04-17  Ian Lance Taylor  <iant@golang.org>\n \n \t* backtrace.c: Revert last two changes.  Don't call mmap"}, {"sha": "b1e3adedda0442dbc15774c2079f24b78c266095", "filename": "libbacktrace/configure", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e1df888de5675d071239b1db57fd48d6ff47b7/libbacktrace%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e1df888de5675d071239b1db57fd48d6ff47b7/libbacktrace%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fconfigure?ref=a0e1df888de5675d071239b1db57fd48d6ff47b7", "patch": "@@ -1386,8 +1386,7 @@ Optional Features:\n                           optimize for fast installation [default=yes]\n   --disable-libtool-lock  avoid locking (might break parallel builds)\n   --disable-largefile     omit support for large files\n-  --enable-cet            enable Intel CET in target libraries\n-                          [default=default]\n+  --enable-cet            enable Intel CET in target libraries [default=no]\n   --enable-host-shared    build host code as shared libraries\n \n Optional Packages:\n@@ -11149,7 +11148,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11152 \"configure\"\n+#line 11151 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11255,7 +11254,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11258 \"configure\"\n+#line 11257 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11793,12 +11792,12 @@ if test -n \"${with_target_subdir}\"; then\n if test \"${enable_cet+set}\" = set; then :\n   enableval=$enable_cet;\n       case \"$enableval\" in\n-       yes|no|default) ;;\n+       yes|no|auto) ;;\n        *) as_fn_error \"Unknown argument to enable/disable cet\" \"$LINENO\" 5 ;;\n                           esac\n \n else\n-  enable_cet=default\n+  enable_cet=no\n fi\n \n \n@@ -11808,7 +11807,7 @@ $as_echo_n \"checking for CET support... \" >&6; }\n case \"$host\" in\n   i[34567]86-*-linux* | x86_64-*-linux*)\n     case \"$enable_cet\" in\n-      default)\n+      auto)\n \t# Check if target supports multi-byte NOPs\n \t# and if assembler supports CET insn.\n \tcat confdefs.h - <<_ACEOF >conftest.$ac_ext"}, {"sha": "7de2ff6e565157ff3cf937d904f2531faf61539c", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e1df888de5675d071239b1db57fd48d6ff47b7/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e1df888de5675d071239b1db57fd48d6ff47b7/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=a0e1df888de5675d071239b1db57fd48d6ff47b7", "patch": "@@ -1,3 +1,7 @@\n+2018-04-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure: Regenerated.\n+\n 2018-04-18  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/85384"}, {"sha": "fa0241346686adb9f4c9662cc4648e9d2787fa82", "filename": "libgcc/configure", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e1df888de5675d071239b1db57fd48d6ff47b7/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e1df888de5675d071239b1db57fd48d6ff47b7/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=a0e1df888de5675d071239b1db57fd48d6ff47b7", "patch": "@@ -1316,8 +1316,7 @@ Optional Features:\n \t\t\tenable decimal float extension to C.  Selecting 'bid'\n \t\t\tor 'dpd' choses which decimal floating point format\n \t\t\tto use\n-  --enable-cet            enable Intel CET in target libraries\n-                          [default=default]\n+  --enable-cet            enable Intel CET in target libraries [default=no]\n   --enable-explicit-exception-frame-registration\n                           register exception tables explicitly at module\n                           start, for use e.g. for compatibility with\n@@ -4781,12 +4780,12 @@ $as_echo \"$ac_cv_sjlj_exceptions\" >&6; }\n if test \"${enable_cet+set}\" = set; then :\n   enableval=$enable_cet;\n       case \"$enableval\" in\n-       yes|no|default) ;;\n+       yes|no|auto) ;;\n        *) as_fn_error \"Unknown argument to enable/disable cet\" \"$LINENO\" 5 ;;\n                           esac\n \n else\n-  enable_cet=default\n+  enable_cet=no\n fi\n \n \n@@ -4796,7 +4795,7 @@ $as_echo_n \"checking for CET support... \" >&6; }\n case \"$host\" in\n   i[34567]86-*-linux* | x86_64-*-linux*)\n     case \"$enable_cet\" in\n-      default)\n+      auto)\n \t# Check if target supports multi-byte NOPs\n \t# and if assembler supports CET insn.\n \tcat confdefs.h - <<_ACEOF >conftest.$ac_ext"}, {"sha": "d4a1fbb08ab9909605c7d052981b6e8de9f74be1", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e1df888de5675d071239b1db57fd48d6ff47b7/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e1df888de5675d071239b1db57fd48d6ff47b7/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=a0e1df888de5675d071239b1db57fd48d6ff47b7", "patch": "@@ -1,3 +1,7 @@\n+2018-04-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure: Regenerated.\n+\n 2018-04-18  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/85384"}, {"sha": "d3e323c11a7deadd68d605aaccb499d12b9be546", "filename": "libgfortran/configure", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e1df888de5675d071239b1db57fd48d6ff47b7/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e1df888de5675d071239b1db57fd48d6ff47b7/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=a0e1df888de5675d071239b1db57fd48d6ff47b7", "patch": "@@ -1425,8 +1425,7 @@ Optional Features:\n   --enable-multilib       build many library versions (default)\n   --disable-dependency-tracking  speeds up one-time build\n   --enable-dependency-tracking   do not reject slow dependency extractors\n-  --enable-cet            enable Intel CET in target libraries\n-                          [default=default]\n+  --enable-cet            enable Intel CET in target libraries [default=no]\n   --disable-symvers       disable symbol versioning for libgfortran\n   --enable-shared[=PKGS]  build shared libraries [default=yes]\n   --enable-static[=PKGS]  build static libraries [default=yes]\n@@ -5795,12 +5794,12 @@ fi\n if test \"${enable_cet+set}\" = set; then :\n   enableval=$enable_cet;\n       case \"$enableval\" in\n-       yes|no|default) ;;\n+       yes|no|auto) ;;\n        *) as_fn_error \"Unknown argument to enable/disable cet\" \"$LINENO\" 5 ;;\n                           esac\n \n else\n-  enable_cet=default\n+  enable_cet=no\n fi\n \n \n@@ -5810,7 +5809,7 @@ $as_echo_n \"checking for CET support... \" >&6; }\n case \"$host\" in\n   i[34567]86-*-linux* | x86_64-*-linux*)\n     case \"$enable_cet\" in\n-      default)\n+      auto)\n \t# Check if target supports multi-byte NOPs\n \t# and if assembler supports CET insn.\n \tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n@@ -12513,7 +12512,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12516 \"configure\"\n+#line 12515 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12619,7 +12618,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12622 \"configure\"\n+#line 12621 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "1025acb5d819cf58b7f38e9742378814ea95d938", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e1df888de5675d071239b1db57fd48d6ff47b7/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e1df888de5675d071239b1db57fd48d6ff47b7/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=a0e1df888de5675d071239b1db57fd48d6ff47b7", "patch": "@@ -1,3 +1,7 @@\n+2018-04-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure: Regenerated.\n+\n 2018-04-18  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/85384"}, {"sha": "5d8412c5f195101da3f7537d13dbdd554d112754", "filename": "libgomp/configure", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e1df888de5675d071239b1db57fd48d6ff47b7/libgomp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e1df888de5675d071239b1db57fd48d6ff47b7/libgomp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure?ref=a0e1df888de5675d071239b1db57fd48d6ff47b7", "patch": "@@ -1452,8 +1452,7 @@ Optional Features:\n   --enable-tls            Use thread-local storage [default=yes]\n   --enable-symvers=STYLE  enables symbol versioning of the shared library\n                           [default=yes]\n-  --enable-cet            enable Intel CET in target libraries\n-                          [default=default]\n+  --enable-cet            enable Intel CET in target libraries [default=no]\n \n Optional Packages:\n   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n@@ -11158,7 +11157,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11161 \"configure\"\n+#line 11160 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11264,7 +11263,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11267 \"configure\"\n+#line 11266 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -16624,12 +16623,12 @@ XCFLAGS=\"$XCFLAGS$XPCFLAGS\"\n if test \"${enable_cet+set}\" = set; then :\n   enableval=$enable_cet;\n       case \"$enableval\" in\n-       yes|no|default) ;;\n+       yes|no|auto) ;;\n        *) as_fn_error \"Unknown argument to enable/disable cet\" \"$LINENO\" 5 ;;\n                           esac\n \n else\n-  enable_cet=default\n+  enable_cet=no\n fi\n \n \n@@ -16639,7 +16638,7 @@ $as_echo_n \"checking for CET support... \" >&6; }\n case \"$host\" in\n   i[34567]86-*-linux* | x86_64-*-linux*)\n     case \"$enable_cet\" in\n-      default)\n+      auto)\n \t# Check if target supports multi-byte NOPs\n \t# and if assembler supports CET insn.\n \tcat confdefs.h - <<_ACEOF >conftest.$ac_ext"}, {"sha": "53fe89749a9fa7b3b0c495f674ba4281eba17630", "filename": "libitm/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e1df888de5675d071239b1db57fd48d6ff47b7/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e1df888de5675d071239b1db57fd48d6ff47b7/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=a0e1df888de5675d071239b1db57fd48d6ff47b7", "patch": "@@ -1,3 +1,7 @@\n+2018-04-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure: Regenerated.\n+\n 2018-04-18  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/85384"}, {"sha": "10db435d01c376f454b31305e05edcb0966fef51", "filename": "libitm/configure", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e1df888de5675d071239b1db57fd48d6ff47b7/libitm%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e1df888de5675d071239b1db57fd48d6ff47b7/libitm%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfigure?ref=a0e1df888de5675d071239b1db57fd48d6ff47b7", "patch": "@@ -1427,8 +1427,7 @@ Optional Features:\n   --enable-tls            Use thread-local storage [default=yes]\n   --enable-symvers=STYLE  enables symbol versioning of the shared library\n                           [default=yes]\n-  --enable-cet            enable Intel CET in target libraries\n-                          [default=default]\n+  --enable-cet            enable Intel CET in target libraries [default=no]\n \n Optional Packages:\n   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n@@ -11797,7 +11796,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11800 \"configure\"\n+#line 11799 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11903,7 +11902,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11906 \"configure\"\n+#line 11905 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -17594,12 +17593,12 @@ XCFLAGS=\"$XCFLAGS $XPCFLAGS\"\n if test \"${enable_cet+set}\" = set; then :\n   enableval=$enable_cet;\n       case \"$enableval\" in\n-       yes|no|default) ;;\n+       yes|no|auto) ;;\n        *) as_fn_error \"Unknown argument to enable/disable cet\" \"$LINENO\" 5 ;;\n                           esac\n \n else\n-  enable_cet=default\n+  enable_cet=no\n fi\n \n \n@@ -17609,7 +17608,7 @@ $as_echo_n \"checking for CET support... \" >&6; }\n case \"$host\" in\n   i[34567]86-*-linux* | x86_64-*-linux*)\n     case \"$enable_cet\" in\n-      default)\n+      auto)\n \t# Check if target supports multi-byte NOPs\n \t# and if assembler supports CET insn.\n \tcat confdefs.h - <<_ACEOF >conftest.$ac_ext"}, {"sha": "3f6540496eec36a1d7377e27fd83b4728f0c7b06", "filename": "libmpx/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e1df888de5675d071239b1db57fd48d6ff47b7/libmpx%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e1df888de5675d071239b1db57fd48d6ff47b7/libmpx%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmpx%2FChangeLog?ref=a0e1df888de5675d071239b1db57fd48d6ff47b7", "patch": "@@ -1,3 +1,7 @@\n+2018-04-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure: Regenerated.\n+\n 2018-04-18  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/85384"}, {"sha": "5a4d7f49e0e0a12150d5db006cb8a15cffc74238", "filename": "libmpx/configure", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e1df888de5675d071239b1db57fd48d6ff47b7/libmpx%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e1df888de5675d071239b1db57fd48d6ff47b7/libmpx%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmpx%2Fconfigure?ref=a0e1df888de5675d071239b1db57fd48d6ff47b7", "patch": "@@ -1373,8 +1373,7 @@ Optional Features:\n   --enable-fast-install[=PKGS]\n                           optimize for fast installation [default=yes]\n   --disable-libtool-lock  avoid locking (might break parallel builds)\n-  --enable-cet            enable Intel CET in target libraries\n-                          [default=default]\n+  --enable-cet            enable Intel CET in target libraries [default=no]\n \n Optional Packages:\n   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n@@ -11237,7 +11236,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11240 \"configure\"\n+#line 11239 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11343,7 +11342,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11346 \"configure\"\n+#line 11345 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11589,12 +11588,12 @@ XCFLAGS=\"-Wall -Wextra\"\n if test \"${enable_cet+set}\" = set; then :\n   enableval=$enable_cet;\n       case \"$enableval\" in\n-       yes|no|default) ;;\n+       yes|no|auto) ;;\n        *) as_fn_error \"Unknown argument to enable/disable cet\" \"$LINENO\" 5 ;;\n                           esac\n \n else\n-  enable_cet=default\n+  enable_cet=no\n fi\n \n \n@@ -11604,7 +11603,7 @@ $as_echo_n \"checking for CET support... \" >&6; }\n case \"$host\" in\n   i[34567]86-*-linux* | x86_64-*-linux*)\n     case \"$enable_cet\" in\n-      default)\n+      auto)\n \t# Check if target supports multi-byte NOPs\n \t# and if assembler supports CET insn.\n \tcat confdefs.h - <<_ACEOF >conftest.$ac_ext"}, {"sha": "42ded9f3a5ef3cd0109181d75d80d750dc105559", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e1df888de5675d071239b1db57fd48d6ff47b7/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e1df888de5675d071239b1db57fd48d6ff47b7/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=a0e1df888de5675d071239b1db57fd48d6ff47b7", "patch": "@@ -1,3 +1,7 @@\n+2018-04-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure: Regenerated.\n+\n 2018-04-18  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/85384"}, {"sha": "699f3773a218ddde622339fb574b2288019b8754", "filename": "libobjc/configure", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e1df888de5675d071239b1db57fd48d6ff47b7/libobjc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e1df888de5675d071239b1db57fd48d6ff47b7/libobjc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fconfigure?ref=a0e1df888de5675d071239b1db57fd48d6ff47b7", "patch": "@@ -1352,8 +1352,7 @@ Optional Features:\n   --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]\n   --enable-version-specific-runtime-libs    Specify that runtime libraries should be installed in a compiler-specific directory\n   --enable-multilib       build many library versions (default)\n-  --enable-cet            enable Intel CET in target libraries\n-                          [default=default]\n+  --enable-cet            enable Intel CET in target libraries [default=no]\n   --enable-maintainer-mode  enable make rules and dependencies not useful\n \t\t\t  (and sometimes confusing) to the casual installer\n   --enable-shared[=PKGS]  build shared libraries [default=yes]\n@@ -3360,12 +3359,12 @@ esac\n if test \"${enable_cet+set}\" = set; then :\n   enableval=$enable_cet;\n       case \"$enableval\" in\n-       yes|no|default) ;;\n+       yes|no|auto) ;;\n        *) as_fn_error \"Unknown argument to enable/disable cet\" \"$LINENO\" 5 ;;\n                           esac\n \n else\n-  enable_cet=default\n+  enable_cet=no\n fi\n \n \n@@ -3375,7 +3374,7 @@ $as_echo_n \"checking for CET support... \" >&6; }\n case \"$host\" in\n   i[34567]86-*-linux* | x86_64-*-linux*)\n     case \"$enable_cet\" in\n-      default)\n+      auto)\n \t# Check if target supports multi-byte NOPs\n \t# and if assembler supports CET insn.\n \tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n@@ -10683,7 +10682,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10686 \"configure\"\n+#line 10685 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -10789,7 +10788,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10792 \"configure\"\n+#line 10791 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "cb3fdd011011662989061eeb82e3535c686dde83", "filename": "libquadmath/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e1df888de5675d071239b1db57fd48d6ff47b7/libquadmath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e1df888de5675d071239b1db57fd48d6ff47b7/libquadmath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FChangeLog?ref=a0e1df888de5675d071239b1db57fd48d6ff47b7", "patch": "@@ -1,3 +1,7 @@\n+2018-04-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure: Regenerated.\n+\n 2018-04-18  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/85384"}, {"sha": "4ad6e3d682bb98bdee51a86b6b66a1935d012e2e", "filename": "libquadmath/configure", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e1df888de5675d071239b1db57fd48d6ff47b7/libquadmath%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e1df888de5675d071239b1db57fd48d6ff47b7/libquadmath%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fconfigure?ref=a0e1df888de5675d071239b1db57fd48d6ff47b7", "patch": "@@ -1398,8 +1398,7 @@ Optional Features:\n   --enable-maintainer-mode  enable make rules and dependencies not useful\n \t\t\t  (and sometimes confusing) to the casual installer\n   --disable-symvers       disable symbol versioning for libquadmath\n-  --enable-cet            enable Intel CET in target libraries\n-                          [default=default]\n+  --enable-cet            enable Intel CET in target libraries [default=no]\n   --enable-generated-files-in-srcdir\n                           put copies of generated files in source dir intended\n                           for creating source tarballs for users without\n@@ -10576,7 +10575,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10579 \"configure\"\n+#line 10578 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -10682,7 +10681,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10685 \"configure\"\n+#line 10684 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12828,12 +12827,12 @@ fi\n if test \"${enable_cet+set}\" = set; then :\n   enableval=$enable_cet;\n       case \"$enableval\" in\n-       yes|no|default) ;;\n+       yes|no|auto) ;;\n        *) as_fn_error \"Unknown argument to enable/disable cet\" \"$LINENO\" 5 ;;\n                           esac\n \n else\n-  enable_cet=default\n+  enable_cet=no\n fi\n \n \n@@ -12843,7 +12842,7 @@ $as_echo_n \"checking for CET support... \" >&6; }\n case \"$host\" in\n   i[34567]86-*-linux* | x86_64-*-linux*)\n     case \"$enable_cet\" in\n-      default)\n+      auto)\n \t# Check if target supports multi-byte NOPs\n \t# and if assembler supports CET insn.\n \tcat confdefs.h - <<_ACEOF >conftest.$ac_ext"}, {"sha": "1729b5b474bfb26f698f57ee67ff34e78cf01d61", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e1df888de5675d071239b1db57fd48d6ff47b7/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e1df888de5675d071239b1db57fd48d6ff47b7/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=a0e1df888de5675d071239b1db57fd48d6ff47b7", "patch": "@@ -1,3 +1,7 @@\n+2018-04-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure: Regenerated.\n+\n 2018-04-18  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/85384"}, {"sha": "5fdc5126478b4438b86e35a89dfd5eef7b0a0147", "filename": "libsanitizer/configure", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e1df888de5675d071239b1db57fd48d6ff47b7/libsanitizer%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e1df888de5675d071239b1db57fd48d6ff47b7/libsanitizer%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fconfigure?ref=a0e1df888de5675d071239b1db57fd48d6ff47b7", "patch": "@@ -1425,8 +1425,7 @@ Optional Features:\n   --enable-fast-install[=PKGS]\n                           optimize for fast installation [default=yes]\n   --disable-libtool-lock  avoid locking (might break parallel builds)\n-  --enable-cet            enable Intel CET in target libraries\n-                          [default=default]\n+  --enable-cet            enable Intel CET in target libraries [default=no]\n \n Optional Packages:\n   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n@@ -12038,7 +12037,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12041 \"configure\"\n+#line 12040 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12144,7 +12143,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12147 \"configure\"\n+#line 12146 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -16530,12 +16529,12 @@ fi\n if test \"${enable_cet+set}\" = set; then :\n   enableval=$enable_cet;\n       case \"$enableval\" in\n-       yes|no|default) ;;\n+       yes|no|auto) ;;\n        *) as_fn_error \"Unknown argument to enable/disable cet\" \"$LINENO\" 5 ;;\n                           esac\n \n else\n-  enable_cet=default\n+  enable_cet=no\n fi\n \n \n@@ -16545,7 +16544,7 @@ $as_echo_n \"checking for CET support... \" >&6; }\n case \"$host\" in\n   i[34567]86-*-linux* | x86_64-*-linux*)\n     case \"$enable_cet\" in\n-      default)\n+      auto)\n \t# Check if target supports multi-byte NOPs\n \t# and if assembler supports CET insn.\n \tcat confdefs.h - <<_ACEOF >conftest.$ac_ext"}, {"sha": "e4316e16040c93b81cb8cbc5acb0b107d10b0070", "filename": "libssp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e1df888de5675d071239b1db57fd48d6ff47b7/libssp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e1df888de5675d071239b1db57fd48d6ff47b7/libssp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libssp%2FChangeLog?ref=a0e1df888de5675d071239b1db57fd48d6ff47b7", "patch": "@@ -1,3 +1,7 @@\n+2018-04-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure: Regenerated.\n+\n 2018-04-18  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/85384"}, {"sha": "f60b7d704020d7bd1a66dd856a35c210fba880dc", "filename": "libssp/configure", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e1df888de5675d071239b1db57fd48d6ff47b7/libssp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e1df888de5675d071239b1db57fd48d6ff47b7/libssp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libssp%2Fconfigure?ref=a0e1df888de5675d071239b1db57fd48d6ff47b7", "patch": "@@ -1378,8 +1378,7 @@ Optional Features:\n   --enable-multilib       build many library versions (default)\n   --disable-dependency-tracking  speeds up one-time build\n   --enable-dependency-tracking   do not reject slow dependency extractors\n-  --enable-cet            enable Intel CET in target libraries\n-                          [default=default]\n+  --enable-cet            enable Intel CET in target libraries [default=no]\n   --disable-symvers       disable symbol versioning for libssp\n   --enable-shared[=PKGS]  build shared libraries [default=yes]\n   --enable-static[=PKGS]  build static libraries [default=yes]\n@@ -4086,12 +4085,12 @@ CFLAGS=\"$save_CFLAGS\"\n if test \"${enable_cet+set}\" = set; then :\n   enableval=$enable_cet;\n       case \"$enableval\" in\n-       yes|no|default) ;;\n+       yes|no|auto) ;;\n        *) as_fn_error \"Unknown argument to enable/disable cet\" \"$LINENO\" 5 ;;\n                           esac\n \n else\n-  enable_cet=default\n+  enable_cet=no\n fi\n \n \n@@ -4101,7 +4100,7 @@ $as_echo_n \"checking for CET support... \" >&6; }\n case \"$host\" in\n   i[34567]86-*-linux* | x86_64-*-linux*)\n     case \"$enable_cet\" in\n-      default)\n+      auto)\n \t# Check if target supports multi-byte NOPs\n \t# and if assembler supports CET insn.\n \tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n@@ -10760,7 +10759,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10763 \"configure\"\n+#line 10762 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -10866,7 +10865,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10869 \"configure\"\n+#line 10868 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "2280f1711aa5dbfa767635c089feded93cfa96bf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e1df888de5675d071239b1db57fd48d6ff47b7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e1df888de5675d071239b1db57fd48d6ff47b7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a0e1df888de5675d071239b1db57fd48d6ff47b7", "patch": "@@ -1,3 +1,7 @@\n+2018-04-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure: Regenerated.\n+\n 2018-04-18  Jonathan Wakely  <jwakely@redhat.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "49d12887d522578b94d613ad7a8053161c11cbe4", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e1df888de5675d071239b1db57fd48d6ff47b7/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e1df888de5675d071239b1db57fd48d6ff47b7/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=a0e1df888de5675d071239b1db57fd48d6ff47b7", "patch": "@@ -1598,8 +1598,7 @@ Optional Features:\n                           enable C++11 threads support [default=auto]\n   --enable-libstdcxx-filesystem-ts\n                           turns on ISO/IEC TS 18822 support [default=auto]\n-  --enable-cet            enable Intel CET in target libraries\n-                          [default=default]\n+  --enable-cet            enable Intel CET in target libraries [default=no]\n   --enable-version-specific-runtime-libs\n                           Specify that runtime libraries should be installed\n                           in a compiler-specific directory\n@@ -11607,7 +11606,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11610 \"configure\"\n+#line 11609 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11713,7 +11712,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11716 \"configure\"\n+#line 11715 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -15399,7 +15398,7 @@ $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n   # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15402 \"configure\"\n+#line 15401 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -15434,7 +15433,7 @@ $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15437 \"configure\"\n+#line 15436 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n@@ -15469,7 +15468,7 @@ $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15472 \"configure\"\n+#line 15471 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -15505,7 +15504,7 @@ $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15508 \"configure\"\n+#line 15507 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n@@ -15586,7 +15585,7 @@ $as_echo \"$as_me: WARNING: Performance of certain classes will degrade as a resu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15589 \"configure\"\n+#line 15588 \"configure\"\n int main()\n {\n   _Decimal32 d1;\n@@ -15628,7 +15627,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15631 \"configure\"\n+#line 15630 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -15662,7 +15661,7 @@ $as_echo \"$enable_int128\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15665 \"configure\"\n+#line 15664 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -81146,12 +81145,12 @@ CPU_OPT_BITS_RANDOM=config/${cpu_opt_bits_random}\n if test \"${enable_cet+set}\" = set; then :\n   enableval=$enable_cet;\n       case \"$enableval\" in\n-       yes|no|default) ;;\n+       yes|no|auto) ;;\n        *) as_fn_error \"Unknown argument to enable/disable cet\" \"$LINENO\" 5 ;;\n                           esac\n \n else\n-  enable_cet=default\n+  enable_cet=no\n fi\n \n \n@@ -81161,7 +81160,7 @@ $as_echo_n \"checking for CET support... \" >&6; }\n case \"$host\" in\n   i[34567]86-*-linux* | x86_64-*-linux*)\n     case \"$enable_cet\" in\n-      default)\n+      auto)\n \t# Check if target supports multi-byte NOPs\n \t# and if assembler supports CET insn.\n \tcat confdefs.h - <<_ACEOF >conftest.$ac_ext"}, {"sha": "e8c90aa73de94d81ea3949cfdf02087029531a2a", "filename": "libvtv/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e1df888de5675d071239b1db57fd48d6ff47b7/libvtv%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e1df888de5675d071239b1db57fd48d6ff47b7/libvtv%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2FChangeLog?ref=a0e1df888de5675d071239b1db57fd48d6ff47b7", "patch": "@@ -1,3 +1,7 @@\n+2018-04-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure: Regenerated.\n+\n 2018-04-18  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/85384"}, {"sha": "cde00f9bd6c0ae5fa8ec7e23afa84efdcf5ffcd3", "filename": "libvtv/configure", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e1df888de5675d071239b1db57fd48d6ff47b7/libvtv%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e1df888de5675d071239b1db57fd48d6ff47b7/libvtv%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Fconfigure?ref=a0e1df888de5675d071239b1db57fd48d6ff47b7", "patch": "@@ -1405,8 +1405,7 @@ Optional Features:\n   --enable-fast-install[=PKGS]\n                           optimize for fast installation [default=yes]\n   --disable-libtool-lock  avoid locking (might break parallel builds)\n-  --enable-cet            enable Intel CET in target libraries\n-                          [default=default]\n+  --enable-cet            enable Intel CET in target libraries [default=no]\n \n Optional Packages:\n   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n@@ -12069,7 +12068,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12072 \"configure\"\n+#line 12071 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12175,7 +12174,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12178 \"configure\"\n+#line 12177 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -15464,12 +15463,12 @@ XCFLAGS=\"-D_GNU_SOURCE -Wall -Wextra -fno-exceptions\"\n if test \"${enable_cet+set}\" = set; then :\n   enableval=$enable_cet;\n       case \"$enableval\" in\n-       yes|no|default) ;;\n+       yes|no|auto) ;;\n        *) as_fn_error \"Unknown argument to enable/disable cet\" \"$LINENO\" 5 ;;\n                           esac\n \n else\n-  enable_cet=default\n+  enable_cet=no\n fi\n \n \n@@ -15479,7 +15478,7 @@ $as_echo_n \"checking for CET support... \" >&6; }\n case \"$host\" in\n   i[34567]86-*-linux* | x86_64-*-linux*)\n     case \"$enable_cet\" in\n-      default)\n+      auto)\n \t# Check if target supports multi-byte NOPs\n \t# and if assembler supports CET insn.\n \tcat confdefs.h - <<_ACEOF >conftest.$ac_ext"}]}