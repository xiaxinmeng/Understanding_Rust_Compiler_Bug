{"sha": "0e6c5b58543978b3dc16cdfeb653df6997d4e800", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU2YzViNTg1NDM5NzhiM2RjMTZjZGZlYjY1M2RmNjk5N2Q0ZTgwMA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2007-02-01T16:43:20Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2007-02-01T16:43:20Z"}, "message": "lower-subreg.c (simplify_gen_subreg_concatn): If we ask for the high part of a paradoxical subreg, return a constant zero.\n\n\t* lower-subreg.c (simplify_gen_subreg_concatn): If we ask for the\n\thigh part of a paradoxical subreg, return a constant zero.\n\nFrom-SVN: r121466", "tree": {"sha": "8ba597196a731bc04276e1b1d25a8f8fd4ff95ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ba597196a731bc04276e1b1d25a8f8fd4ff95ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e6c5b58543978b3dc16cdfeb653df6997d4e800", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e6c5b58543978b3dc16cdfeb653df6997d4e800", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e6c5b58543978b3dc16cdfeb653df6997d4e800", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e6c5b58543978b3dc16cdfeb653df6997d4e800/comments", "author": null, "committer": null, "parents": [{"sha": "c0d919fa35e2af4aedb4c0e50c73778795d3f0b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0d919fa35e2af4aedb4c0e50c73778795d3f0b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0d919fa35e2af4aedb4c0e50c73778795d3f0b4"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "a935ee4a8b299e24f973435fc159dcf990f7ab56", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e6c5b58543978b3dc16cdfeb653df6997d4e800/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e6c5b58543978b3dc16cdfeb653df6997d4e800/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e6c5b58543978b3dc16cdfeb653df6997d4e800", "patch": "@@ -1,3 +1,8 @@\n+2007-02-01  Ian Lance Taylor  <iant@google.com>\n+\n+\t* lower-subreg.c (simplify_gen_subreg_concatn): If we ask for the\n+\thigh part of a paradoxical subreg, return a constant zero.\n+\n 2007-02-01  Zdenek Dvorak <dvorakz@suse.cz>\n \n \t* toplev.c (lang_dependent_init): Call init_set_costs."}, {"sha": "ce9cfc54ab54f5a745e7b53f4d8aaf0f11e50645", "filename": "gcc/lower-subreg.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e6c5b58543978b3dc16cdfeb653df6997d4e800/gcc%2Flower-subreg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e6c5b58543978b3dc16cdfeb653df6997d4e800/gcc%2Flower-subreg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flower-subreg.c?ref=0e6c5b58543978b3dc16cdfeb653df6997d4e800", "patch": "@@ -372,6 +372,8 @@ static rtx\n simplify_gen_subreg_concatn (enum machine_mode outermode, rtx op,\n \t\t\t     enum machine_mode innermode, unsigned int byte)\n {\n+  rtx ret;\n+\n   /* We have to handle generating a SUBREG of a SUBREG of a CONCATN.\n      If OP is a SUBREG of a CONCATN, then it must be a simple mode\n      change with the same size and offset 0, or it must extract a\n@@ -405,9 +407,24 @@ simplify_gen_subreg_concatn (enum machine_mode outermode, rtx op,\n       gcc_assert (op != NULL_RTX);\n       gcc_assert (innermode == GET_MODE (op));\n     }\n+\n   if (GET_CODE (op) == CONCATN)\n     return simplify_subreg_concatn (outermode, op, byte);\n-  return simplify_gen_subreg (outermode, op, innermode, byte);\n+\n+  ret = simplify_gen_subreg (outermode, op, innermode, byte);\n+\n+  /* If we see an insn like (set (reg:DI) (subreg:DI (reg:SI) 0)) then\n+     resolve_simple_move will ask for the high part of the paradoxical\n+     subreg, which does not have a value.  Just return a zero.  */\n+  if (ret == NULL_RTX\n+      && GET_CODE (op) == SUBREG\n+      && SUBREG_BYTE (op) == 0\n+      && (GET_MODE_SIZE (innermode)\n+\t  > GET_MODE_SIZE (GET_MODE (SUBREG_REG (op)))))\n+    return CONST0_RTX (outermode);\n+\n+  gcc_assert (ret != NULL_RTX);\n+  return ret;\n }\n \n /* Return whether we should resolve X into the registers into which it"}]}