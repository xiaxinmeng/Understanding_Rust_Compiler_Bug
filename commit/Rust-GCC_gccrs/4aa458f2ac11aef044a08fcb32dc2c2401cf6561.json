{"sha": "4aa458f2ac11aef044a08fcb32dc2c2401cf6561", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFhNDU4ZjJhYzExYWVmMDQ0YTA4ZmNiMzJkYzJjMjQwMWNmNjU2MQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-11-28T14:58:11Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-11-28T14:58:11Z"}, "message": "re PR tree-optimization/80776 (-Wformat-overflow false positive for %d on integer bounded by __builtin_unreachable)\n\n2017-11-28  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/80776\n\t* gimple-ssa-evrp-analyze.h (evrp_range_analyzer::set_ssa_range_info):\n\tDeclare.\n\t* gimple-ssa-evrp-analyze.c (evrp_range_analyzer::set_ssa_range_info):\n\tNew function.\n\t(evrp_range_analyzer::record_ranges_from_incoming_edges):\n\tIf the incoming edge is an effective fallthru because the other\n\tedge only reaches a __builtin_unreachable () then record ranges\n\tderived from the controlling condition in SSA info.\n\t(evrp_range_analyzer::record_ranges_from_phis): Use set_ssa_range_info.\n\t(evrp_range_analyzer::record_ranges_from_stmt): Likewise.\n\n\t* gcc.dg/pr80776-1.c: New testcase.\n\t* gcc.dg/pr80776-2.c: Likewise.\n\nFrom-SVN: r255201", "tree": {"sha": "4de8c7b0b37f10808fb3874b112408d5dc6787ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4de8c7b0b37f10808fb3874b112408d5dc6787ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4aa458f2ac11aef044a08fcb32dc2c2401cf6561", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aa458f2ac11aef044a08fcb32dc2c2401cf6561", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4aa458f2ac11aef044a08fcb32dc2c2401cf6561", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aa458f2ac11aef044a08fcb32dc2c2401cf6561/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "73ff3db2f452c816fce0c14c6c40bc7df56ebf9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73ff3db2f452c816fce0c14c6c40bc7df56ebf9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73ff3db2f452c816fce0c14c6c40bc7df56ebf9f"}], "stats": {"total": 176, "additions": 138, "deletions": 38}, "files": [{"sha": "294d678f899b49d287f3c2e925de0089643bccfb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa458f2ac11aef044a08fcb32dc2c2401cf6561/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa458f2ac11aef044a08fcb32dc2c2401cf6561/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4aa458f2ac11aef044a08fcb32dc2c2401cf6561", "patch": "@@ -1,3 +1,17 @@\n+2017-11-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/80776\n+\t* gimple-ssa-evrp-analyze.h (evrp_range_analyzer::set_ssa_range_info):\n+\tDeclare.\n+\t* gimple-ssa-evrp-analyze.c (evrp_range_analyzer::set_ssa_range_info):\n+\tNew function.\n+\t(evrp_range_analyzer::record_ranges_from_incoming_edges):\n+\tIf the incoming edge is an effective fallthru because the other\n+\tedge only reaches a __builtin_unreachable () then record ranges\n+\tderived from the controlling condition in SSA info.\n+\t(evrp_range_analyzer::record_ranges_from_phis): Use set_ssa_range_info.\n+\t(evrp_range_analyzer::record_ranges_from_stmt): Likewise.\n+\n 2017-11-28  Olivier Hainque  <hainque@adacore.com>\n \n \t* Makefile.in (SELFTEST_FLAGS): Use nul instead of /dev/null"}, {"sha": "6f225cb7d0b5e6c9418c3d9131f59463d8b13607", "filename": "gcc/gimple-ssa-evrp-analyze.c", "status": "modified", "additions": 72, "deletions": 34, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa458f2ac11aef044a08fcb32dc2c2401cf6561/gcc%2Fgimple-ssa-evrp-analyze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa458f2ac11aef044a08fcb32dc2c2401cf6561/gcc%2Fgimple-ssa-evrp-analyze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-evrp-analyze.c?ref=4aa458f2ac11aef044a08fcb32dc2c2401cf6561", "patch": "@@ -91,6 +91,62 @@ evrp_range_analyzer::try_find_new_range (tree name,\n   return NULL;\n }\n \n+/* For LHS record VR in the SSA info.  */\n+void\n+evrp_range_analyzer::set_ssa_range_info (tree lhs, value_range *vr)\n+{\n+  /* Set the SSA with the value range.  */\n+  if (INTEGRAL_TYPE_P (TREE_TYPE (lhs)))\n+    {\n+      if ((vr->type == VR_RANGE\n+\t   || vr->type == VR_ANTI_RANGE)\n+\t  && (TREE_CODE (vr->min) == INTEGER_CST)\n+\t  && (TREE_CODE (vr->max) == INTEGER_CST))\n+\tset_range_info (lhs, vr->type,\n+\t\t\twi::to_wide (vr->min),\n+\t\t\twi::to_wide (vr->max));\n+    }\n+  else if (POINTER_TYPE_P (TREE_TYPE (lhs))\n+\t   && ((vr->type == VR_RANGE\n+\t\t&& range_includes_zero_p (vr->min,\n+\t\t\t\t\t  vr->max) == 0)\n+\t       || (vr->type == VR_ANTI_RANGE\n+\t\t   && range_includes_zero_p (vr->min,\n+\t\t\t\t\t     vr->max) == 1)))\n+    set_ptr_nonnull (lhs);\n+}\n+\n+/* Return true if all uses of NAME are dominated by STMT or feed STMT\n+   via a chain of single immediate uses.  */\n+\n+static bool\n+all_uses_feed_or_dominated_by_stmt (tree name, gimple *stmt)\n+{\n+  use_operand_p use_p, use2_p;\n+  imm_use_iterator iter;\n+  basic_block stmt_bb = gimple_bb (stmt);\n+\n+  FOR_EACH_IMM_USE_FAST (use_p, iter, name)\n+    {\n+      gimple *use_stmt = USE_STMT (use_p), *use_stmt2;\n+      if (use_stmt == stmt\n+\t  || is_gimple_debug (use_stmt)\n+\t  || (gimple_bb (use_stmt) != stmt_bb\n+\t      && dominated_by_p (CDI_DOMINATORS,\n+\t\t\t\t gimple_bb (use_stmt), stmt_bb)))\n+\tcontinue;\n+      while (use_stmt != stmt\n+\t     && is_gimple_assign (use_stmt)\n+\t     && TREE_CODE (gimple_assign_lhs (use_stmt)) == SSA_NAME\n+\t     && single_imm_use (gimple_assign_lhs (use_stmt),\n+\t\t\t\t&use2_p, &use_stmt2))\n+\tuse_stmt = use_stmt2;\n+      if (use_stmt != stmt)\n+\treturn false;\n+    }\n+  return true;\n+}\n+\n void\n evrp_range_analyzer::record_ranges_from_incoming_edge (basic_block bb)\n {\n@@ -134,10 +190,23 @@ evrp_range_analyzer::record_ranges_from_incoming_edge (basic_block bb)\n \t      if (vr)\n \t\tvrs.safe_push (std::make_pair (asserts[i].name, vr));\n \t    }\n+\n+\t  /* If pred_e is really a fallthru we can record value ranges\n+\t     in SSA names as well.  */\n+\t  bool is_fallthru = assert_unreachable_fallthru_edge_p (pred_e);\n+\n \t  /* Push updated ranges only after finding all of them to avoid\n \t     ordering issues that can lead to worse ranges.  */\n \t  for (unsigned i = 0; i < vrs.length (); ++i)\n-\t    push_value_range (vrs[i].first, vrs[i].second);\n+\t    {\n+\t      push_value_range (vrs[i].first, vrs[i].second);\n+\t      if (is_fallthru\n+\t\t  && all_uses_feed_or_dominated_by_stmt (vrs[i].first, stmt))\n+\t\t{\n+\t\t  set_ssa_range_info (vrs[i].first, vrs[i].second);\n+\t\t  maybe_set_nonzero_bits (pred_e, vrs[i].first);\n+\t\t}\n+\t    }\n \t}\n     }\n }\n@@ -185,24 +254,7 @@ evrp_range_analyzer::record_ranges_from_phis (basic_block bb)\n       vr_values->update_value_range (lhs, &vr_result);\n \n       /* Set the SSA with the value range.  */\n-      if (INTEGRAL_TYPE_P (TREE_TYPE (lhs)))\n-\t{\n-\t  if ((vr_result.type == VR_RANGE\n-\t       || vr_result.type == VR_ANTI_RANGE)\n-\t      && (TREE_CODE (vr_result.min) == INTEGER_CST)\n-\t      && (TREE_CODE (vr_result.max) == INTEGER_CST))\n-\t    set_range_info (lhs, vr_result.type,\n-\t\t\t    wi::to_wide (vr_result.min),\n-\t\t\t    wi::to_wide (vr_result.max));\n-\t}\n-      else if (POINTER_TYPE_P (TREE_TYPE (lhs))\n-\t       && ((vr_result.type == VR_RANGE\n-\t\t    && range_includes_zero_p (vr_result.min,\n-\t\t\t\t\t      vr_result.max) == 0)\n-\t\t   || (vr_result.type == VR_ANTI_RANGE\n-\t\t       && range_includes_zero_p (vr_result.min,\n-\t\t\t\t\t\t vr_result.max) == 1)))\n-\tset_ptr_nonnull (lhs);\n+      set_ssa_range_info (lhs, &vr_result);\n     }\n }\n \n@@ -224,21 +276,7 @@ evrp_range_analyzer::record_ranges_from_stmt (gimple *stmt)\n \t  vr_values->update_value_range (output, &vr);\n \n \t  /* Set the SSA with the value range.  */\n-\t  if (INTEGRAL_TYPE_P (TREE_TYPE (output)))\n-\t    {\n-\t      if ((vr.type == VR_RANGE || vr.type == VR_ANTI_RANGE)\n-\t\t  && (TREE_CODE (vr.min) == INTEGER_CST)\n-\t\t  && (TREE_CODE (vr.max) == INTEGER_CST))\n-\t\tset_range_info (output, vr.type,\n-\t\t\t\twi::to_wide (vr.min),\n-\t\t\t\twi::to_wide (vr.max));\n-\t    }\n-\t  else if (POINTER_TYPE_P (TREE_TYPE (output))\n-\t\t   && ((vr.type == VR_RANGE\n-\t\t\t&& range_includes_zero_p (vr.min, vr.max) == 0)\n-\t\t       || (vr.type == VR_ANTI_RANGE\n-\t\t\t   && range_includes_zero_p (vr.min, vr.max) == 1)))\n-\t    set_ptr_nonnull (output);\n+\t  set_ssa_range_info (output, &vr);\n \t}\n       else\n \tvr_values->set_defs_to_varying (stmt);"}, {"sha": "6216a9092319263e4bfbb7755adf2fc653fe78a9", "filename": "gcc/gimple-ssa-evrp-analyze.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa458f2ac11aef044a08fcb32dc2c2401cf6561/gcc%2Fgimple-ssa-evrp-analyze.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa458f2ac11aef044a08fcb32dc2c2401cf6561/gcc%2Fgimple-ssa-evrp-analyze.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-evrp-analyze.h?ref=4aa458f2ac11aef044a08fcb32dc2c2401cf6561", "patch": "@@ -68,6 +68,7 @@ class evrp_range_analyzer\n   value_range *try_find_new_range (tree, tree op, tree_code code, tree limit);\n   void record_ranges_from_incoming_edge (basic_block);\n   void record_ranges_from_phis (basic_block);\n+  void set_ssa_range_info (tree, value_range *);\n \n   /* STACK holds the old VR.  */\n   auto_vec<std::pair <tree, value_range*> > stack;"}, {"sha": "537ccff812429c06f44b177efffc98b7711cb58d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa458f2ac11aef044a08fcb32dc2c2401cf6561/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa458f2ac11aef044a08fcb32dc2c2401cf6561/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4aa458f2ac11aef044a08fcb32dc2c2401cf6561", "patch": "@@ -1,3 +1,9 @@\n+2017-11-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/80776\n+\t* gcc.dg/pr80776-1.c: New testcase.\n+\t* gcc.dg/pr80776-2.c: Likewise.\n+\n 2017-11-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/83117"}, {"sha": "af41c0c2ffabf74396bd6196d11657e87e078105", "filename": "gcc/testsuite/gcc.dg/pr80776-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa458f2ac11aef044a08fcb32dc2c2401cf6561/gcc%2Ftestsuite%2Fgcc.dg%2Fpr80776-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa458f2ac11aef044a08fcb32dc2c2401cf6561/gcc%2Ftestsuite%2Fgcc.dg%2Fpr80776-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr80776-1.c?ref=4aa458f2ac11aef044a08fcb32dc2c2401cf6561", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wformat-overflow\" } */\n+\n+extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int\n+__attribute__ ((__nothrow__ , __leaf__)) sprintf (char *__restrict __s, const char *__restrict __fmt, ...)\n+{\n+  return __builtin___sprintf_chk (__s, 2 - 1,\n+\t\t\t\t  __builtin_object_size (__s, 2 > 1), __fmt, __builtin_va_arg_pack ());\n+}\n+char number[sizeof \"999999\"];\n+int somerandom (void);\n+void\n+Foo (void)\n+{\n+  int i = somerandom ();\n+  if (! (0 <= i))\n+    __builtin_unreachable ();\n+  if (! (0 <= i && i <= 999999))\n+    __builtin_unreachable ();\n+  /* The correctness bits for [E]VRP cannot handle chained conditionals\n+     when deciding to ignore a unreachable branch for setting SSA range info. */\n+  sprintf (number, \"%d\", i); /* { dg-bogus \"writing\" \"\" { xfail *-*-* } } */\n+}"}, {"sha": "55cef3b1a9b370184790f1b89821a38885cd147e", "filename": "gcc/testsuite/gcc.dg/pr80776-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa458f2ac11aef044a08fcb32dc2c2401cf6561/gcc%2Ftestsuite%2Fgcc.dg%2Fpr80776-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa458f2ac11aef044a08fcb32dc2c2401cf6561/gcc%2Ftestsuite%2Fgcc.dg%2Fpr80776-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr80776-2.c?ref=4aa458f2ac11aef044a08fcb32dc2c2401cf6561", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wformat-overflow\" } */\n+\n+extern int sprintf (char *restrict, const char *restrict, ...)\n+     __attribute__ ((__nothrow__));\n+     extern int foo (void);\n+\n+int\n+Fgenerate_new_buffer_name (void)\n+{\n+  char number[2];\n+  int i = foo ();\n+  if (i < 0)\n+    __builtin_unreachable ();\n+  if (i >= 2)\n+    __builtin_unreachable ();\n+  return sprintf (number, \"%d\", i); /* { dg-bogus \"writing\" } */\n+}"}, {"sha": "a86b38208abc76b965c32f0a2805bfffa65967b2", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa458f2ac11aef044a08fcb32dc2c2401cf6561/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa458f2ac11aef044a08fcb32dc2c2401cf6561/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=4aa458f2ac11aef044a08fcb32dc2c2401cf6561", "patch": "@@ -5082,10 +5082,9 @@ all_imm_uses_in_stmt_or_feed_cond (tree var, gimple *stmt, basic_block cond_bb)\n    var is the x_3 var from ASSERT_EXPR, we can clear low 5 bits\n    from the non-zero bitmask.  */\n \n-static void\n-maybe_set_nonzero_bits (basic_block bb, tree var)\n+void\n+maybe_set_nonzero_bits (edge e, tree var)\n {\n-  edge e = single_pred_edge (bb);\n   basic_block cond_bb = e->src;\n   gimple *stmt = last_stmt (cond_bb);\n   tree cst;\n@@ -5200,7 +5199,7 @@ remove_range_assertions (void)\n \t\t    set_range_info (var, SSA_NAME_RANGE_TYPE (lhs),\n \t\t\t\t    SSA_NAME_RANGE_INFO (lhs)->get_min (),\n \t\t\t\t    SSA_NAME_RANGE_INFO (lhs)->get_max ());\n-\t\t    maybe_set_nonzero_bits (bb, var);\n+\t\t    maybe_set_nonzero_bits (single_pred_edge (bb), var);\n \t\t  }\n \t      }\n "}, {"sha": "5dafaf13d7979e7af41e94b670c3ea184a9bc385", "filename": "gcc/tree-vrp.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa458f2ac11aef044a08fcb32dc2c2401cf6561/gcc%2Ftree-vrp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa458f2ac11aef044a08fcb32dc2c2401cf6561/gcc%2Ftree-vrp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.h?ref=4aa458f2ac11aef044a08fcb32dc2c2401cf6561", "patch": "@@ -116,6 +116,7 @@ extern bool overflow_comparison_p (tree_code, tree, tree, bool, tree *);\n extern bool range_int_cst_singleton_p (value_range *);\n extern int value_inside_range (tree, tree, tree);\n extern tree get_single_symbol (tree, bool *, tree *);\n+extern void maybe_set_nonzero_bits (edge, tree);\n \n \n struct switch_update {"}]}