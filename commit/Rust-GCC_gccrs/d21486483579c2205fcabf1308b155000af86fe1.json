{"sha": "d21486483579c2205fcabf1308b155000af86fe1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIxNDg2NDgzNTc5YzIyMDVmY2FiZjEzMDhiMTU1MDAwYWY4NmZlMQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-05-12T16:23:56Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-05-12T16:24:09Z"}, "message": "libbacktrace: Enable Intel CET on Intel CET enabled host for jit\n\nSince on Intel CET enabled host, dlopen in Intel CET enabled applications\nfails on shared libraries which aren't Intel CET enabled, compile with\n-fcf-protection on Intel CET enabled host when jit is enabled to enable\nIntel CET on libgccjit.\n\n\t* Makefile.am (AM_CFLAGS): Add $(CET_HOST_FLAGS).\n\t* configure.ac: Add GCC_CET_HOST_FLAGS(CET_HOST_FLAGS) and\n\tAC_SUBST(CET_HOST_FLAGS).  Clear CET_HOST_FLAGS if jit isn't\n\tenabled.\n\t* Makefile.in: Regenerated.\n\t* configure: Likewise.", "tree": {"sha": "a5b4e18599210993422ffb62f003b72f98f97554", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5b4e18599210993422ffb62f003b72f98f97554"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d21486483579c2205fcabf1308b155000af86fe1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d21486483579c2205fcabf1308b155000af86fe1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d21486483579c2205fcabf1308b155000af86fe1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d21486483579c2205fcabf1308b155000af86fe1/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3d16040feb2df017eb5a18ca641b06cc1ff6947", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3d16040feb2df017eb5a18ca641b06cc1ff6947", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3d16040feb2df017eb5a18ca641b06cc1ff6947"}], "stats": {"total": 205, "additions": 201, "deletions": 4}, "files": [{"sha": "9668906d20fc90279ed640726f5ba3e939ebbaa9", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21486483579c2205fcabf1308b155000af86fe1/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21486483579c2205fcabf1308b155000af86fe1/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=d21486483579c2205fcabf1308b155000af86fe1", "patch": "@@ -1,3 +1,11 @@\n+\n+\t* Makefile.am (AM_CFLAGS): Add $(CET_HOST_FLAGS).\n+\t* configure.ac: Add GCC_CET_HOST_FLAGS(CET_HOST_FLAGS) and\n+\tAC_SUBST(CET_HOST_FLAGS).  Clear CET_HOST_FLAGS if jit isn't\n+\tenabled.\n+\t* Makefile.in: Regenerated.\n+\t* configure: Likewise.\n+\n 2020-05-11  Ian Lance Taylor  <iant@golang.org>\n \n \tPR libbacktrace/95012"}, {"sha": "6fc0749878761beea8521ccd637c522d21867541", "filename": "libbacktrace/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21486483579c2205fcabf1308b155000af86fe1/libbacktrace%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21486483579c2205fcabf1308b155000af86fe1/libbacktrace%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FMakefile.am?ref=d21486483579c2205fcabf1308b155000af86fe1", "patch": "@@ -34,7 +34,7 @@ ACLOCAL_AMFLAGS = -I .. -I ../config\n AM_CPPFLAGS = -I $(top_srcdir)/../include -I $(top_srcdir)/../libgcc \\\n \t-I ../libgcc\n \n-AM_CFLAGS = $(EXTRA_FLAGS) $(WARN_FLAGS) $(PIC_FLAG)\n+AM_CFLAGS = $(EXTRA_FLAGS) $(WARN_FLAGS) $(PIC_FLAG) $(CET_HOST_FLAGS)\n \n noinst_LTLIBRARIES = libbacktrace.la\n "}, {"sha": "b244ca10a4a359632c79c9f3951568027587b640", "filename": "libbacktrace/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21486483579c2205fcabf1308b155000af86fe1/libbacktrace%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21486483579c2205fcabf1308b155000af86fe1/libbacktrace%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FMakefile.in?ref=d21486483579c2205fcabf1308b155000af86fe1", "patch": "@@ -783,6 +783,7 @@ BACKTRACE_SUPPORTS_DATA = @BACKTRACE_SUPPORTS_DATA@\n BACKTRACE_SUPPORTS_THREADS = @BACKTRACE_SUPPORTS_THREADS@\n BACKTRACE_USES_MALLOC = @BACKTRACE_USES_MALLOC@\n CC = @CC@\n+CET_HOST_FLAGS = @CET_HOST_FLAGS@\n CFLAGS = @CFLAGS@\n CLOCK_GETTIME_LINK = @CLOCK_GETTIME_LINK@\n CPP = @CPP@\n@@ -902,7 +903,7 @@ ACLOCAL_AMFLAGS = -I .. -I ../config\n AM_CPPFLAGS = -I $(top_srcdir)/../include -I $(top_srcdir)/../libgcc \\\n \t-I ../libgcc\n \n-AM_CFLAGS = $(EXTRA_FLAGS) $(WARN_FLAGS) $(PIC_FLAG)\n+AM_CFLAGS = $(EXTRA_FLAGS) $(WARN_FLAGS) $(PIC_FLAG) $(CET_HOST_FLAGS)\n noinst_LTLIBRARIES = libbacktrace.la\n libbacktrace_la_SOURCES = \\\n \tbacktrace.h \\"}, {"sha": "b72380ebcb20fa62e778926b0b276df44288e9b2", "filename": "libbacktrace/configure", "status": "modified", "additions": 179, "deletions": 2, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21486483579c2205fcabf1308b155000af86fe1/libbacktrace%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21486483579c2205fcabf1308b155000af86fe1/libbacktrace%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fconfigure?ref=d21486483579c2205fcabf1308b155000af86fe1", "patch": "@@ -660,6 +660,7 @@ HAVE_ELF_FALSE\n HAVE_ELF_TRUE\n FORMAT_FILE\n BACKTRACE_SUPPORTS_THREADS\n+CET_HOST_FLAGS\n PIC_FLAG\n WARN_FLAGS\n EXTRA_FLAGS\n@@ -1437,6 +1438,7 @@ Optional Features:\n   --disable-largefile     omit support for large files\n   --enable-cet            enable Intel CET in target libraries [default=no]\n   --enable-host-shared    build host code as shared libraries\n+  --enable-cet            enable Intel CET in host libraries [default=auto]\n \n Optional Packages:\n   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n@@ -11503,7 +11505,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11506 \"configure\"\n+#line 11508 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11609,7 +11611,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11612 \"configure\"\n+#line 11614 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12378,6 +12380,181 @@ fi\n \n \n \n+# Enable Intel CET on Intel CET enabled host if jit is enabled.\n+ # Check whether --enable-cet was given.\n+if test \"${enable_cet+set}\" = set; then :\n+  enableval=$enable_cet;\n+      case \"$enableval\" in\n+       yes|no|auto) ;;\n+       *) as_fn_error $? \"Unknown argument to enable/disable cet\" \"$LINENO\" 5 ;;\n+                          esac\n+\n+else\n+  enable_cet=auto\n+fi\n+\n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for CET support\" >&5\n+$as_echo_n \"checking for CET support... \" >&6; }\n+\n+case \"$host\" in\n+  i[34567]86-*-linux* | x86_64-*-linux*)\n+    may_have_cet=yes\n+    save_CFLAGS=\"$CFLAGS\"\n+    CFLAGS=\"$CFLAGS -fcf-protection\"\n+    case \"$enable_cet\" in\n+      auto)\n+\t# Check if target supports multi-byte NOPs\n+\t# and if assembler supports CET insn.\n+\tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+\n+#if !defined(__SSE2__)\n+#error target does not support multi-byte NOPs\n+#else\n+asm (\"setssbsy\");\n+#endif\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  enable_cet=yes\n+else\n+  enable_cet=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\t;;\n+      yes)\n+\t# Check if assembler supports CET.\n+\tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+asm (\"setssbsy\");\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+\n+else\n+  as_fn_error $? \"assembler with CET support is required for --enable-cet\" \"$LINENO\" 5\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\t;;\n+    esac\n+    CFLAGS=\"$save_CFLAGS\"\n+    ;;\n+  *)\n+    may_have_cet=no\n+    enable_cet=no\n+    ;;\n+esac\n+\n+save_CFLAGS=\"$CFLAGS\"\n+CFLAGS=\"$CFLAGS -fcf-protection=none\"\n+save_LDFLAGS=\"$LDFLAGS\"\n+LDFLAGS=\"$LDFLAGS -Wl,-z,ibt,-z,shstk\"\n+if test x$may_have_cet = xyes; then\n+  # Check whether -fcf-protection=none -Wl,-z,ibt,-z,shstk work.\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+return 0;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  may_have_cet=yes\n+else\n+  may_have_cet=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+\n+if test x$may_have_cet = xyes; then\n+  if test \"$cross_compiling\" = yes; then :\n+  { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n+$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n+as_fn_error $? \"cannot run test program while cross compiling\n+See \\`config.log' for more details\" \"$LINENO\" 5; }\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+static void\n+foo (void)\n+{\n+}\n+\n+static void\n+__attribute__ ((noinline, noclone))\n+xxx (void (*f) (void))\n+{\n+  f ();\n+}\n+\n+static void\n+__attribute__ ((noinline, noclone))\n+bar (void)\n+{\n+  xxx (foo);\n+}\n+\n+int\n+main ()\n+{\n+  bar ();\n+  return 0;\n+}\n+\n+_ACEOF\n+if ac_fn_c_try_run \"$LINENO\"; then :\n+  have_cet=no\n+else\n+  have_cet=yes\n+fi\n+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n+  conftest.$ac_objext conftest.beam conftest.$ac_ext\n+fi\n+\n+  if test x$enable_cet = xno -a x$have_cet = xyes; then\n+    as_fn_error $? \"Intel CET must be enabled on Intel CET enabled host\" \"$LINENO\" 5\n+  fi\n+fi\n+if test x$enable_cet = xyes; then\n+  CET_HOST_FLAGS=\"-fcf-protection\"\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: yes\" >&5\n+$as_echo \"yes\" >&6; }\n+else\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n+$as_echo \"no\" >&6; }\n+fi\n+CFLAGS=\"$save_CFLAGS\"\n+LDFLAGS=\"$save_LDFLAGS\"\n+\n+case x$enable_languages in\n+*jit*)\n+  ;;\n+*)\n+  CET_HOST_FLAGS=\n+  ;;\n+esac\n+\n+\n # Test for __sync support.\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking __sync extensions\" >&5\n $as_echo_n \"checking __sync extensions... \" >&6; }"}, {"sha": "bd16f20fd0e624c1588a477f49dd5d0fe7a170e1", "filename": "libbacktrace/configure.ac", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21486483579c2205fcabf1308b155000af86fe1/libbacktrace%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21486483579c2205fcabf1308b155000af86fe1/libbacktrace%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fconfigure.ac?ref=d21486483579c2205fcabf1308b155000af86fe1", "patch": "@@ -178,6 +178,17 @@ AC_ARG_ENABLE(host-shared,\n [PIC_FLAG=-fPIC], [PIC_FLAG=])\n AC_SUBST(PIC_FLAG)\n \n+# Enable Intel CET on Intel CET enabled host if jit is enabled.\n+GCC_CET_HOST_FLAGS(CET_HOST_FLAGS)\n+case x$enable_languages in\n+*jit*)\n+  ;;\n+*)\n+  CET_HOST_FLAGS=\n+  ;;\n+esac\n+AC_SUBST(CET_HOST_FLAGS)\n+\n # Test for __sync support.\n AC_CACHE_CHECK([__sync extensions],\n [libbacktrace_cv_sys_sync],"}]}