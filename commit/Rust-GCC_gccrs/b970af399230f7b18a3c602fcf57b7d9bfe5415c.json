{"sha": "b970af399230f7b18a3c602fcf57b7d9bfe5415c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk3MGFmMzk5MjMwZjdiMThhM2M2MDJmY2Y1N2I3ZDliZmU1NDE1Yw==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2011-08-29T10:22:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T10:22:44Z"}, "message": "par-endh.adb: Minor reformatting.\n\n2011-08-29  Thomas Quinot  <quinot@adacore.com>\n\n\t* par-endh.adb: Minor reformatting.\n\nFrom-SVN: r178189", "tree": {"sha": "9e139a36bfeb77c3171e1169c2005e65d60ff0d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e139a36bfeb77c3171e1169c2005e65d60ff0d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b970af399230f7b18a3c602fcf57b7d9bfe5415c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b970af399230f7b18a3c602fcf57b7d9bfe5415c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b970af399230f7b18a3c602fcf57b7d9bfe5415c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b970af399230f7b18a3c602fcf57b7d9bfe5415c/comments", "author": null, "committer": null, "parents": [{"sha": "92db5dee00b7dfdba5f8a66c67e5ce64843b5897", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92db5dee00b7dfdba5f8a66c67e5ce64843b5897", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92db5dee00b7dfdba5f8a66c67e5ce64843b5897"}], "stats": {"total": 53, "additions": 29, "deletions": 24}, "files": [{"sha": "5d533d3d5bd78d321bce2afb9c3330bcd4089d3a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b970af399230f7b18a3c602fcf57b7d9bfe5415c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b970af399230f7b18a3c602fcf57b7d9bfe5415c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b970af399230f7b18a3c602fcf57b7d9bfe5415c", "patch": "@@ -1,3 +1,7 @@\n+2011-08-29  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* par-endh.adb: Minor reformatting.\n+z\n 2011-08-29  Tristan Gingold  <gingold@adacore.com>\n \n \t* a-exexpr-gcc.adb (Unwind_Action) Rewrite as an integer with constants."}, {"sha": "4ecc49d4167480a58a58aa34383b4825156b0e90", "filename": "gcc/ada/par-endh.adb", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b970af399230f7b18a3c602fcf57b7d9bfe5415c/gcc%2Fada%2Fpar-endh.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b970af399230f7b18a3c602fcf57b7d9bfe5415c/gcc%2Fada%2Fpar-endh.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-endh.adb?ref=b970af399230f7b18a3c602fcf57b7d9bfe5415c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -123,7 +123,7 @@ package body Endh is\n    function Explicit_Start_Label (SS_Index : Nat) return Boolean;\n    --  Determines whether the specified entry in the scope stack has an\n    --  explicit start label (i.e. one other than one that was created by\n-   --  the parser when no explicit label was present)\n+   --  the parser when no explicit label was present).\n \n    procedure Output_End_Deleted;\n    --  Output a message complaining that the current END structure does not\n@@ -240,7 +240,7 @@ package body Endh is\n                End_Type := E_Loop;\n \n             --  FOR or WHILE allowed (signalling error) to substitute for LOOP\n-            --  if on the same line as the END\n+            --  if on the same line as the END.\n \n             elsif (Token = Tok_For or else Token = Tok_While)\n               and then not Token_Is_At_Start_Of_Line\n@@ -800,19 +800,20 @@ package body Endh is\n       --  against lines containing previously reported syntax errors.\n \n       elsif (Etyp = E_Loop\n-         or else Etyp = E_Name\n-         or else Etyp = E_Suspicious_Is\n-         or else Etyp = E_Bad_Is)\n+               or else Etyp = E_Name\n+               or else Etyp = E_Suspicious_Is\n+               or else Etyp = E_Bad_Is)\n          and then Comes_From_Source (L)\n       then\n          return True;\n+\n       else\n          return False;\n       end if;\n    end Explicit_Start_Label;\n \n    ------------------------\n-   -- Output End Deleted --\n+   -- Output_End_Deleted --\n    ------------------------\n \n    procedure Output_End_Deleted is\n@@ -842,23 +843,23 @@ package body Endh is\n    end Output_End_Deleted;\n \n    -------------------------\n-   -- Output End Expected --\n+   -- Output_End_Expected --\n    -------------------------\n \n    procedure Output_End_Expected (Ins : Boolean) is\n       End_Type : SS_End_Type;\n \n    begin\n-      --  Suppress message if this was a potentially junk entry (e.g. a\n-      --  record entry where no record keyword was present.\n+      --  Suppress message if this was a potentially junk entry (e.g. a record\n+      --  entry where no record keyword was present).\n \n       if Scope.Table (Scope.Last).Junk then\n          return;\n       end if;\n \n       End_Type := Scope.Table (Scope.Last).Etyp;\n-      Error_Msg_Col    := Scope.Table (Scope.Last).Ecol;\n-      Error_Msg_Sloc   := Scope.Table (Scope.Last).Sloc;\n+      Error_Msg_Col  := Scope.Table (Scope.Last).Ecol;\n+      Error_Msg_Sloc := Scope.Table (Scope.Last).Sloc;\n \n       if Explicit_Start_Label (Scope.Last) then\n          Error_Msg_Node_1 := Scope.Table (Scope.Last).Labl;\n@@ -903,11 +904,11 @@ package body Endh is\n          Error_Msg_SC -- CODEFIX\n            (\"`END SELECT;` expected@ for SELECT#!\");\n \n-      --  All remaining cases are cases with a name (we do not treat\n-      --  the suspicious is cases specially for a replaced end, only\n-      --  for an inserted end).\n+      --  All remaining cases are cases with a name (we do not treat the\n+      --  suspicious is cases specially for a replaced end, only for an\n+      --  inserted end).\n \n-      elsif End_Type = E_Name or else (not Ins) then\n+      elsif End_Type = E_Name or else not Ins then\n          if Error_Msg_Node_1 = Empty then\n             Error_Msg_SC -- CODEFIX\n               (\"`END;` expected@ for BEGIN#!\");\n@@ -918,23 +919,23 @@ package body Endh is\n \n       --  The other possibility is a missing END for a subprogram with a\n       --  suspicious IS (that probably should have been a semicolon). The\n-      --  Missing IS confirms the suspicion!\n+      --  missing IS confirms the suspicion!\n \n       else -- End_Type = E_Suspicious_Is or E_Bad_Is\n          Scope.Table (Scope.Last).Etyp := E_Bad_Is;\n       end if;\n    end Output_End_Expected;\n \n    ------------------------\n-   -- Output End Missing --\n+   -- Output_End_Missing --\n    ------------------------\n \n    procedure Output_End_Missing is\n       End_Type : SS_End_Type;\n \n    begin\n-      --  Suppress message if this was a potentially junk entry (e.g. a\n-      --  record entry where no record keyword was present.\n+      --  Suppress message if this was a potentially junk entry (e.g. a record\n+      --  entry where no record keyword was present).\n \n       if Scope.Table (Scope.Last).Junk then\n          return;\n@@ -987,7 +988,7 @@ package body Endh is\n    end Output_End_Missing;\n \n    ---------------------\n-   -- Pop End Context --\n+   -- Pop_End_Context --\n    ---------------------\n \n    procedure Pop_End_Context is\n@@ -1041,9 +1042,9 @@ package body Endh is\n          --  We also reserve an end with a name before the end of file if the\n          --  name is the one we expect at the outer level.\n \n-         if (Token = Tok_EOF or else\n-             Token = Tok_With or else\n-             Token = Tok_Separate)\n+         if (Token = Tok_EOF\n+               or else Token = Tok_With\n+               or else Token = Tok_Separate)\n            and then End_Type >= E_Name\n            and then (not End_Labl_Present\n                       or else Same_Label (End_Labl, Scope.Table (1).Labl))"}]}