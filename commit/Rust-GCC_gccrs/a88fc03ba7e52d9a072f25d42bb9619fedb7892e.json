{"sha": "a88fc03ba7e52d9a072f25d42bb9619fedb7892e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg4ZmMwM2JhN2U1MmQ5YTA3MmYyNWQ0MmJiOTYxOWZlZGI3ODkyZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-15T14:07:25Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-15T17:20:06Z"}, "message": "libstdc++: Remove precondition checks from ranges::subrange\n\nThe assertion in the subrange constructor causes semantic changes,\nbecause the call to ranges::distance performs additional operations that\nare not part of the constructor's specification. That will fail to\ncompile if the iterator is move-only, because the argument to\nranges::distance is passed by value. It will modify the subrange if the\niterator is not a forward iterator, because incrementing the copy also\naffects the _M_begin member. Those problems could be prevented by using\nif-constexpr to only do the assertion for copyable forward iterators,\nbut the call to ranges::distance can also prevent the constructor being\nusable in constant expressions. If the member initializers are usable in\nconstant expressions, but iterator increments of equality comparisons\nare not, then the checks done by __glibcxx_assert might\nmake constant evaluation fail.\n\nThis change removes the assertion. Additionally, a new typedef is\nintroduced to simplify the declarations using __make_unsigned_like_t on\nthe iterator's difference type.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/ranges_util.h (subrange): Add __size_type typedef\n\tand use it to simplify declarations.\n\t(subrange(i, s, n)): Remove assertion.\n\t* testsuite/std/ranges/subrange/constexpr.cc: New test.", "tree": {"sha": "854d23ea74bfc34c1b755753186904c893b1a3c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/854d23ea74bfc34c1b755753186904c893b1a3c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a88fc03ba7e52d9a072f25d42bb9619fedb7892e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a88fc03ba7e52d9a072f25d42bb9619fedb7892e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a88fc03ba7e52d9a072f25d42bb9619fedb7892e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a88fc03ba7e52d9a072f25d42bb9619fedb7892e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb326a6442f09cb36b05ce556fc91e10bfeb0cf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb326a6442f09cb36b05ce556fc91e10bfeb0cf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb326a6442f09cb36b05ce556fc91e10bfeb0cf6"}], "stats": {"total": 48, "additions": 37, "deletions": 11}, "files": [{"sha": "02561ee63f96da828e8996264625371d262dbcfd", "filename": "libstdc++-v3/include/bits/ranges_util.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a88fc03ba7e52d9a072f25d42bb9619fedb7892e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a88fc03ba7e52d9a072f25d42bb9619fedb7892e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h?ref=a88fc03ba7e52d9a072f25d42bb9619fedb7892e", "patch": "@@ -205,15 +205,18 @@ namespace ranges\n       _It _M_begin = _It();\n       [[no_unique_address]] _Sent _M_end = _Sent();\n \n+      using __size_type\n+\t= __detail::__make_unsigned_like_t<iter_difference_t<_It>>;\n+\n       template<typename, bool = _S_store_size>\n \tstruct _Size\n \t{ };\n \n       template<typename _Tp>\n \tstruct _Size<_Tp, true>\n-\t{ __detail::__make_unsigned_like_t<_Tp> _M_size; };\n+\t{ _Tp _M_size; };\n \n-      [[no_unique_address]] _Size<iter_difference_t<_It>> _M_size = {};\n+      [[no_unique_address]] _Size<__size_type> _M_size = {};\n \n     public:\n       subrange() = default;\n@@ -226,12 +229,10 @@ namespace ranges\n \n       constexpr\n       subrange(__detail::__convertible_to_non_slicing<_It> auto __i, _Sent __s,\n-\t       __detail::__make_unsigned_like_t<iter_difference_t<_It>> __n)\n+\t       __size_type __n)\n \trequires (_Kind == subrange_kind::sized)\n       : _M_begin(std::move(__i)), _M_end(__s)\n       {\n-\tusing __detail::__to_unsigned_like;\n-\t__glibcxx_assert(__n == __to_unsigned_like(ranges::distance(__i, __s)));\n \tif constexpr (_S_store_size)\n \t  _M_size._M_size = __n;\n       }\n@@ -258,18 +259,17 @@ namespace ranges\n \trequires __detail::__convertible_to_non_slicing<iterator_t<_Rng>, _It>\n \t  && convertible_to<sentinel_t<_Rng>, _Sent>\n \tconstexpr\n-\tsubrange(_Rng&& __r,\n-\t\t __detail::__make_unsigned_like_t<iter_difference_t<_It>> __n)\n+\tsubrange(_Rng&& __r, __size_type __n)\n \trequires (_Kind == subrange_kind::sized)\n \t: subrange{ranges::begin(__r), ranges::end(__r), __n}\n \t{ }\n \n       template<__detail::__not_same_as<subrange> _PairLike>\n \trequires __detail::__pair_like_convertible_from<_PairLike, const _It&,\n \t\t\t\t\t\t\tconst _Sent&>\n-      constexpr\n-      operator _PairLike() const\n-      { return _PairLike(_M_begin, _M_end); }\n+\tconstexpr\n+\toperator _PairLike() const\n+\t{ return _PairLike(_M_begin, _M_end); }\n \n       constexpr _It\n       begin() const requires copyable<_It>\n@@ -283,7 +283,7 @@ namespace ranges\n \n       constexpr bool empty() const { return _M_begin == _M_end; }\n \n-      constexpr __detail::__make_unsigned_like_t<iter_difference_t<_It>>\n+      constexpr __size_type\n       size() const requires (_Kind == subrange_kind::sized)\n       {\n \tif constexpr (_S_store_size)"}, {"sha": "f5bc52bef84a5a6a43507d6b914325db24e61688", "filename": "libstdc++-v3/testsuite/std/ranges/subrange/constexpr.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a88fc03ba7e52d9a072f25d42bb9619fedb7892e/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsubrange%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a88fc03ba7e52d9a072f25d42bb9619fedb7892e/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsubrange%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsubrange%2Fconstexpr.cc?ref=a88fc03ba7e52d9a072f25d42bb9619fedb7892e", "patch": "@@ -0,0 +1,26 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++20 } }\n+\n+#include <ranges>\n+\n+struct iterator\n+{\n+  using difference_type = int;\n+\n+  int i;\n+\n+  int operator*() const { return i; }\n+\n+  // These are intentionally not constexpr:\n+  iterator& operator++() { ++i; return *this; }\n+  iterator operator++(int) { return {i++}; }\n+  bool operator==(const iterator& it) const { return i == it.i; }\n+};\n+\n+constexpr iterator begin(1), end(2);\n+\n+using std::ranges::subrange;\n+using std::ranges::subrange_kind;\n+\n+// This used to fail due to using operator++ and operator== in an assertion:\n+constexpr subrange<iterator, iterator, subrange_kind::sized> s(begin, end, 1);"}]}