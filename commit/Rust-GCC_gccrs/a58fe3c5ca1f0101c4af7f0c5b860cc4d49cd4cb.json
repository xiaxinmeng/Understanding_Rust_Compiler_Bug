{"sha": "a58fe3c5ca1f0101c4af7f0c5b860cc4d49cd4cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU4ZmUzYzVjYTFmMDEwMWM0YWY3ZjBjNWI4NjBjYzRkNDljZDRjYg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2019-01-07T14:49:00Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2019-01-07T14:49:00Z"}, "message": "Investigating PR target/86891 revealed a number of issues with the way the...\n\nInvestigating PR target/86891 revealed a number of issues with the way\nthe AArch64 backend was handing overflow detection patterns.  Firstly,\nexpansion for signed and unsigned types is not the same as in one form\nthe overflow is detected via the C flag and in the other it is done\nvia the V flag in the PSR.  Secondly, particular care has to be taken\nwhen describing overflow of signed types: the comparison has to be\nperformed conceptually on a value that cannot overflow and compared to\na value that might have overflowed.\n\nIt became apparent that some of the patterns were simply unmatchable\n(they collapse to NEG in the RTL rather than subtracting from zero)\nand a number of patterns were overly restrictive in terms of the\nimmediate constants that they supported.  I've tried to address all of\nthese issues as well.\n\ngcc:\n\n\tPR target/86891\n\t* config/aarch64/aarch64.c (aarch64_expand_subvti): New parameter\n\tunsigned_p.  Handle signed and unsigned overflow correction as\n\trequired.\n\t* config/aarch64/aarch64-protos.h (aarch64_expand_subvti): Update\n\tprototype.\n\t* config/aarch64/aarch64.md (addv<mode>4): Use aarch64_plus_operand\n\tfor operand 2.\n\t(add<mode>3_compareV_imm): Make this callable for expanding.\n\t(subv<GPI:mode>4): Use register_operand for operand 1.  Use\n\taarch64_plus_operand for operand 2.\n\t(subv<GPI:mode>_insn): New insn pattern.\n\t(subv<GPI:mode>_imm): Likewise.\n\t(negv<GPI:mode>3): New expand pattern.\n\t(negv<GPI:mode>_insn): New insn pattern.\n\t(negv<GPI:mode>_cmp_only): Likewise.\n\t(cmpv<GPI:mode>_insn): Likewise.\n\t(subvti4): Use register_operand for operand 1.  Update call to\n\taarch64_expand_subvti.\n\t(usubvti4): Likewise.\n\t(negvti3): New expand pattern.\n\t(negdi_carryout): New insn pattern.\n\t(negvdi_carryinV): New insn pattern.\n\t(sub<mode3>_compare1_imm): Delete named insn pattern, make anonymous\n\tversion the named version.\n\t(peepholes to convert to sub<mode3>_compare1_imm): Adjust order of\n\toperands.\n\t(usub<GPI:mode>3_carryinC, usub<GPI:mode>3_carryinC_z1): New insn\n\tpatterns.\n\t(usub<GPI:mode>3_carryinC_z2, usub<GPI:mode>3_carryinC): New insn\n\tpatterns.\n\t(sub<mode>3_carryinCV, sub<mode>3_carryinCV_z1_z2): Delete.\n\t(sub<mode>3_carryinCV_z1, sub<mode>3_carryinCV_z2): Delete.\n\t(sub<mode>3_carryinCV): Delete.\n\t(sub<GPI:mode>3_carryinV): New expand pattern.\n\tsub<mode>3_carryinV, sub<mode>3_carryinV_z2): New insn patterns.\n\ntestsuite:\n\n\t* gcc.target/aarch64/subs_compare_2.c: Make '#' immediate prefix\n\toptional in scan pattern.\n\nFrom-SVN: r267650", "tree": {"sha": "cb7d7c9f5f6a7f4146e8ecbee86803c85cbe2496", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb7d7c9f5f6a7f4146e8ecbee86803c85cbe2496"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a58fe3c5ca1f0101c4af7f0c5b860cc4d49cd4cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a58fe3c5ca1f0101c4af7f0c5b860cc4d49cd4cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a58fe3c5ca1f0101c4af7f0c5b860cc4d49cd4cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a58fe3c5ca1f0101c4af7f0c5b860cc4d49cd4cb/comments", "author": null, "committer": null, "parents": [{"sha": "df35e0bde1f245e8cd49c29cb4de9747257151cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df35e0bde1f245e8cd49c29cb4de9747257151cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df35e0bde1f245e8cd49c29cb4de9747257151cd"}], "stats": {"total": 356, "additions": 291, "deletions": 65}, "files": [{"sha": "0aad583866498b9fa51c6221b94bf6b9549a028e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a58fe3c5ca1f0101c4af7f0c5b860cc4d49cd4cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a58fe3c5ca1f0101c4af7f0c5b860cc4d49cd4cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a58fe3c5ca1f0101c4af7f0c5b860cc4d49cd4cb", "patch": "@@ -1,3 +1,42 @@\n+2019-01-07  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/86891\n+\t* config/aarch64/aarch64.c (aarch64_expand_subvti): New parameter\n+\tunsigned_p.  Handle signed and unsigned overflow correction as\n+\trequired.\n+\t* config/aarch64/aarch64-protos.h (aarch64_expand_subvti): Update\n+\tprototype.\n+\t* config/aarch64/aarch64.md (addv<mode>4): Use aarch64_plus_operand\n+\tfor operand 2.\n+\t(add<mode>3_compareV_imm): Make this callable for expanding.\n+\t(subv<GPI:mode>4): Use register_operand for operand 1.  Use\n+\taarch64_plus_operand for operand 2.\n+\t(subv<GPI:mode>_insn): New insn pattern.\n+\t(subv<GPI:mode>_imm): Likewise.\n+\t(negv<GPI:mode>3): New expand pattern.\n+\t(negv<GPI:mode>_insn): New insn pattern.\n+\t(negv<GPI:mode>_cmp_only): Likewise.\n+\t(cmpv<GPI:mode>_insn): Likewise.\n+\t(subvti4): Use register_operand for operand 1.  Update call to\n+\taarch64_expand_subvti.\n+\t(usubvti4): Likewise.\n+\t(negvti3): New expand pattern.\n+\t(negdi_carryout): New insn pattern.\n+\t(negvdi_carryinV): New insn pattern.\n+\t(sub<mode3>_compare1_imm): Delete named insn pattern, make anonymous\n+\tversion the named version.\n+\t(peepholes to convert to sub<mode3>_compare1_imm): Adjust order of\n+\toperands.\n+\t(usub<GPI:mode>3_carryinC, usub<GPI:mode>3_carryinC_z1): New insn\n+\tpatterns.\n+\t(usub<GPI:mode>3_carryinC_z2, usub<GPI:mode>3_carryinC): New insn\n+\tpatterns.\n+\t(sub<mode>3_carryinCV, sub<mode>3_carryinCV_z1_z2): Delete.\n+\t(sub<mode>3_carryinCV_z1, sub<mode>3_carryinCV_z2): Delete.\n+\t(sub<mode>3_carryinCV): Delete.\n+\t(sub<GPI:mode>3_carryinV): New expand pattern.\n+\tsub<mode>3_carryinV, sub<mode>3_carryinV_z2): New insn patterns.\n+\n 2019-01-07  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-uncprop.c (ssa_equip_hash_traits): Remove in favor"}, {"sha": "209c09be669cc139d82d5c7aedb6e59292c50f07", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a58fe3c5ca1f0101c4af7f0c5b860cc4d49cd4cb/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a58fe3c5ca1f0101c4af7f0c5b860cc4d49cd4cb/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=a58fe3c5ca1f0101c4af7f0c5b860cc4d49cd4cb", "patch": "@@ -530,7 +530,7 @@ void aarch64_subvti_scratch_regs (rtx, rtx, rtx *,\n \t\t\t\t  rtx *, rtx *,\n \t\t\t\t  rtx *, rtx *, rtx *);\n void aarch64_expand_subvti (rtx, rtx, rtx,\n-\t\t\t    rtx, rtx, rtx, rtx);\n+\t\t\t    rtx, rtx, rtx, rtx, bool);\n \n \n /* Initialize builtins for SIMD intrinsics.  */"}, {"sha": "c87994011bb55b36ded4755bbac510f247580935", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a58fe3c5ca1f0101c4af7f0c5b860cc4d49cd4cb/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a58fe3c5ca1f0101c4af7f0c5b860cc4d49cd4cb/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=a58fe3c5ca1f0101c4af7f0c5b860cc4d49cd4cb", "patch": "@@ -16668,32 +16668,38 @@ aarch64_subvti_scratch_regs (rtx op1, rtx op2, rtx *low_dest,\n    LOW_IN2 represents the low half (DImode) of TImode operand 2\n    HIGH_DEST represents the high half (DImode) of TImode operand 0\n    HIGH_IN1 represents the high half (DImode) of TImode operand 1\n-   HIGH_IN2 represents the high half (DImode) of TImode operand 2.  */\n-\n+   HIGH_IN2 represents the high half (DImode) of TImode operand 2\n+   UNSIGNED_P is true if the operation is being performed on unsigned\n+   values.  */\n void\n aarch64_expand_subvti (rtx op0, rtx low_dest, rtx low_in1,\n \t\t       rtx low_in2, rtx high_dest, rtx high_in1,\n-\t\t       rtx high_in2)\n+\t\t       rtx high_in2, bool unsigned_p)\n {\n   if (low_in2 == const0_rtx)\n     {\n       low_dest = low_in1;\n-      emit_insn (gen_subdi3_compare1 (high_dest, high_in1,\n-\t\t\t\t      force_reg (DImode, high_in2)));\n+      high_in2 = force_reg (DImode, high_in2);\n+      if (unsigned_p)\n+\temit_insn (gen_subdi3_compare1 (high_dest, high_in1, high_in2));\n+      else\n+\temit_insn (gen_subvdi_insn (high_dest, high_in1, high_in2));\n     }\n   else\n     {\n       if (CONST_INT_P (low_in2))\n \t{\n-\t  low_in2 = force_reg (DImode, GEN_INT (-UINTVAL (low_in2)));\n \t  high_in2 = force_reg (DImode, high_in2);\n-\t  emit_insn (gen_adddi3_compareC (low_dest, low_in1, low_in2));\n+\t  emit_insn (gen_subdi3_compare1_imm (low_dest, low_in1, low_in2,\n+\t\t\t\t\t      GEN_INT (-INTVAL (low_in2))));\n \t}\n       else\n \temit_insn (gen_subdi3_compare1 (low_dest, low_in1, low_in2));\n-      emit_insn (gen_subdi3_carryinCV (high_dest,\n-\t\t\t\t       force_reg (DImode, high_in1),\n-\t\t\t\t       high_in2));\n+\n+      if (unsigned_p)\n+\temit_insn (gen_usubdi3_carryinC (high_dest, high_in1, high_in2));\n+      else\n+\temit_insn (gen_subdi3_carryinV (high_dest, high_in1, high_in2));\n     }\n \n   emit_move_insn (gen_lowpart (DImode, op0), low_dest);"}, {"sha": "37322fbbfa32b298a7ad7f2bd5eebe2324238c78", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 229, "deletions": 53, "changes": 282, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a58fe3c5ca1f0101c4af7f0c5b860cc4d49cd4cb/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a58fe3c5ca1f0101c4af7f0c5b860cc4d49cd4cb/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=a58fe3c5ca1f0101c4af7f0c5b860cc4d49cd4cb", "patch": "@@ -1842,11 +1842,15 @@\n (define_expand \"addv<mode>4\"\n   [(match_operand:GPI 0 \"register_operand\")\n    (match_operand:GPI 1 \"register_operand\")\n-   (match_operand:GPI 2 \"register_operand\")\n+   (match_operand:GPI 2 \"aarch64_plus_operand\")\n    (label_ref (match_operand 3 \"\" \"\"))]\n   \"\"\n {\n-  emit_insn (gen_add<mode>3_compareV (operands[0], operands[1], operands[2]));\n+  if (CONST_INT_P (operands[2]))\n+    emit_insn (gen_add<mode>3_compareV_imm (operands[0], operands[1],\n+\t\t\t\t\t    operands[2]));\n+  else\n+    emit_insn (gen_add<mode>3_compareV (operands[0], operands[1], operands[2]));\n   aarch64_gen_unlikely_cbranch (NE, CC_Vmode, operands[3]);\n \n   DONE;\n@@ -2093,7 +2097,7 @@\n   [(set_attr \"type\" \"alus_sreg\")]\n )\n \n-(define_insn \"*add<mode>3_compareV_imm\"\n+(define_insn \"add<mode>3_compareV_imm\"\n   [(set (reg:CC_V CC_REGNUM)\n \t(compare:CC_V\n \t  (plus:<DWI>\n@@ -2723,19 +2727,109 @@\n    (set_attr \"arch\" \"*,simd\")]\n )\n \n-(define_expand \"subv<mode>4\"\n+(define_expand \"subv<GPI:mode>4\"\n   [(match_operand:GPI 0 \"register_operand\")\n-   (match_operand:GPI 1 \"aarch64_reg_or_zero\")\n-   (match_operand:GPI 2 \"aarch64_reg_or_zero\")\n+   (match_operand:GPI 1 \"register_operand\")\n+   (match_operand:GPI 2 \"aarch64_plus_operand\")\n    (label_ref (match_operand 3 \"\" \"\"))]\n   \"\"\n {\n-  emit_insn (gen_sub<mode>3_compare1 (operands[0], operands[1], operands[2]));\n+  if (CONST_INT_P (operands[2]))\n+    emit_insn (gen_subv<mode>_imm (operands[0], operands[1], operands[2]));\n+  else\n+    emit_insn (gen_subv<mode>_insn (operands[0], operands[1], operands[2]));\n   aarch64_gen_unlikely_cbranch (NE, CC_Vmode, operands[3]);\n \n   DONE;\n })\n \n+(define_insn \"subv<GPI:mode>_insn\"\n+  [(set (reg:CC_V CC_REGNUM)\n+\t(compare:CC_V\n+\t (sign_extend:<DWI>\n+\t  (minus:GPI\n+\t   (match_operand:GPI 1 \"register_operand\" \"rk\")\n+\t   (match_operand:GPI 2 \"register_operand\" \"r\")))\n+\t (minus:<DWI> (sign_extend:<DWI> (match_dup 1))\n+\t\t      (sign_extend:<DWI> (match_dup 2)))))\n+   (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t(minus:GPI (match_dup 1) (match_dup 2)))]\n+  \"\"\n+  \"subs\\\\t%<w>0, %<w>1, %<w>2\"\n+  [(set_attr \"type\" \"alus_sreg\")]\n+)\n+\n+(define_insn \"subv<GPI:mode>_imm\"\n+  [(set (reg:CC_V CC_REGNUM)\n+\t(compare:CC_V\n+\t (sign_extend:<DWI>\n+\t  (minus:GPI\n+\t   (match_operand:GPI 1 \"register_operand\" \"rk,rk\")\n+\t   (match_operand:GPI 2 \"aarch64_plus_immediate\" \"I,J\")))\n+\t (minus:<DWI> (sign_extend:<DWI> (match_dup 1))\n+\t\t      (match_dup 2))))\n+   (set (match_operand:GPI 0 \"register_operand\" \"=r,r\")\n+\t(minus:GPI (match_dup 1) (match_dup 2)))]\n+  \"\"\n+  \"@\n+   subs\\\\t%<w>0, %<w>1, %2\n+   adds\\\\t%<w>0, %<w>1, #%n2\"\n+  [(set_attr \"type\" \"alus_sreg\")]\n+)\n+\n+(define_expand \"negv<GPI:mode>3\"\n+  [(match_operand:GPI 0 \"register_operand\")\n+   (match_operand:GPI 1 \"register_operand\")\n+   (label_ref (match_operand 2 \"\" \"\"))]\n+  \"\"\n+  {\n+    emit_insn (gen_negv<mode>_insn (operands[0], operands[1]));\n+    aarch64_gen_unlikely_cbranch (NE, CC_Vmode, operands[2]);\n+\n+    DONE;\n+  }\n+)\n+\n+(define_insn \"negv<GPI:mode>_insn\"\n+  [(set (reg:CC_V CC_REGNUM)\n+\t(compare:CC_V\n+\t (sign_extend:<DWI>\n+\t  (neg:GPI (match_operand:GPI 1 \"register_operand\" \"r\")))\n+\t (neg:<DWI> (sign_extend:<DWI> (match_dup 1)))))\n+   (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t(neg:GPI (match_dup 1)))]\n+  \"\"\n+  \"negs\\\\t%<w>0, %<w>1\"\n+  [(set_attr \"type\" \"alus_sreg\")]\n+)\n+\n+(define_insn \"negv<GPI:mode>_cmp_only\"\n+  [(set (reg:CC_V CC_REGNUM)\n+\t(compare:CC_V\n+\t (sign_extend:<DWI>\n+\t  (neg:GPI (match_operand:GPI 0 \"register_operand\" \"r\")))\n+\t (neg:<DWI> (sign_extend:<DWI> (match_dup 0)))))]\n+  \"\"\n+  \"negs\\\\t%<w>zr, %<w>0\"\n+  [(set_attr \"type\" \"alus_sreg\")]\n+)\n+\n+(define_insn \"*cmpv<GPI:mode>_insn\"\n+  [(set (reg:CC_V CC_REGNUM)\n+\t(compare:CC_V\n+\t (sign_extend:<DWI>\n+\t  (minus:GPI (match_operand:GPI 0 \"register_operand\" \"r,r,r\")\n+\t\t     (match_operand:GPI 1 \"aarch64_plus_operand\" \"r,I,J\")))\n+\t (minus:<DWI> (sign_extend:<DWI> (match_dup 0))\n+\t\t    (sign_extend:<DWI> (match_dup 1)))))]\n+  \"\"\n+  \"@\n+   cmp\\\\t%<w>0, %<w>1\n+   cmp\\\\t%<w>0, %1\n+   cmp\\\\t%<w>0, #%n1\"\n+  [(set_attr \"type\" \"alus_sreg\")]\n+)\n+\n (define_expand \"usubv<mode>4\"\n   [(match_operand:GPI 0 \"register_operand\")\n    (match_operand:GPI 1 \"aarch64_reg_or_zero\")\n@@ -2771,7 +2865,7 @@\n \n (define_expand \"subvti4\"\n   [(match_operand:TI 0 \"register_operand\")\n-   (match_operand:TI 1 \"aarch64_reg_or_zero\")\n+   (match_operand:TI 1 \"register_operand\")\n    (match_operand:TI 2 \"aarch64_reg_or_imm\")\n    (label_ref (match_operand 3 \"\" \"\"))]\n   \"\"\n@@ -2782,15 +2876,15 @@\n \t\t\t       &low_dest, &op1_low, &op2_low,\n \t\t\t       &high_dest, &op1_high, &op2_high);\n   aarch64_expand_subvti (operands[0], low_dest, op1_low, op2_low,\n-\t\t\t high_dest, op1_high, op2_high);\n+\t\t\t high_dest, op1_high, op2_high, false);\n \n   aarch64_gen_unlikely_cbranch (NE, CC_Vmode, operands[3]);\n   DONE;\n })\n \n (define_expand \"usubvti4\"\n   [(match_operand:TI 0 \"register_operand\")\n-   (match_operand:TI 1 \"aarch64_reg_or_zero\")\n+   (match_operand:TI 1 \"register_operand\")\n    (match_operand:TI 2 \"aarch64_reg_or_imm\")\n    (label_ref (match_operand 3 \"\" \"\"))]\n   \"\"\n@@ -2801,12 +2895,56 @@\n \t\t\t\t    &low_dest, &op1_low, &op2_low,\n \t\t\t       &high_dest, &op1_high, &op2_high);\n   aarch64_expand_subvti (operands[0], low_dest, op1_low, op2_low,\n-\t\t\t high_dest, op1_high, op2_high);\n+\t\t\t high_dest, op1_high, op2_high, true);\n \n   aarch64_gen_unlikely_cbranch (LTU, CCmode, operands[3]);\n   DONE;\n })\n \n+(define_expand \"negvti3\"\n+  [(match_operand:TI 0 \"register_operand\")\n+   (match_operand:TI 1 \"register_operand\")\n+   (label_ref (match_operand 2 \"\" \"\"))]\n+  \"\"\n+  {\n+    emit_insn (gen_negdi_carryout (gen_lowpart (DImode, operands[0]),\n+\t\t\t\t   gen_lowpart (DImode, operands[1])));\n+    emit_insn (gen_negvdi_carryinV (gen_highpart (DImode, operands[0]),\n+\t\t\t\t    gen_highpart (DImode, operands[1])));\n+    aarch64_gen_unlikely_cbranch (NE, CC_Vmode, operands[2]);\n+\n+    DONE;\n+  }\n+)\n+\n+(define_insn \"negdi_carryout\"\n+  [(set (reg:CC CC_REGNUM)\n+\t(compare:CC\n+\t (const_int 0) (match_operand:DI 1 \"register_operand\" \"r\")))\n+   (set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(neg:DI (match_dup 1)))]\n+  \"\"\n+  \"negs\\\\t%0, %1\"\n+  [(set_attr \"type\" \"alus_sreg\")]\n+)\n+\n+(define_insn \"negvdi_carryinV\"\n+  [(set (reg:CC_V CC_REGNUM)\n+\t(compare:CC_V\n+\t (neg:TI (plus:TI\n+\t\t  (ltu:TI (reg:CC CC_REGNUM) (const_int 0))\n+\t\t  (sign_extend:TI (match_operand:DI 1 \"register_operand\" \"r\"))))\n+\t (sign_extend:TI\n+\t  (neg:DI (plus:DI (ltu:DI (reg:CC CC_REGNUM) (const_int 0))\n+\t\t\t   (match_dup 1))))))\n+   (set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(neg:DI (plus:DI (ltu:DI (reg:CC CC_REGNUM) (const_int 0))\n+\t\t\t (match_dup 1))))]\n+  \"\"\n+  \"ngcs\\\\t%0, %1\"\n+  [(set_attr \"type\" \"alus_sreg\")]\n+)\n+\n (define_insn \"*sub<mode>3_compare0\"\n   [(set (reg:CC_NZ CC_REGNUM)\n \t(compare:CC_NZ (minus:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n@@ -2832,7 +2970,7 @@\n   [(set_attr \"type\" \"alus_sreg\")]\n )\n \n-(define_insn \"*sub<mode>3_compare1_imm\"\n+(define_insn \"sub<mode>3_compare1_imm\"\n   [(set (reg:CC CC_REGNUM)\n \t(compare:CC\n \t  (match_operand:GPI 1 \"aarch64_reg_or_zero\" \"rZ,rZ\")\n@@ -2843,8 +2981,8 @@\n \t  (match_operand:GPI 3 \"aarch64_plus_immediate\" \"J,I\")))]\n   \"UINTVAL (operands[2]) == -UINTVAL (operands[3])\"\n   \"@\n-  subs\\\\t%<w>0, %<w>1, #%n3\n-  adds\\\\t%<w>0, %<w>1, %3\"\n+  subs\\\\t%<w>0, %<w>1, %2\n+  adds\\\\t%<w>0, %<w>1, #%n2\"\n   [(set_attr \"type\" \"alus_imm\")]\n )\n \n@@ -2860,19 +2998,6 @@\n   [(set_attr \"type\" \"alus_sreg\")]\n )\n \n-(define_insn \"sub<mode>3_compare1_imm\"\n-  [(set (reg:CC CC_REGNUM)\n-\t(compare:CC\n-\t  (match_operand:GPI 1 \"register_operand\" \"r\")\n-\t  (match_operand:GPI 3 \"const_int_operand\" \"n\")))\n-   (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n-\t(plus:GPI (match_dup 1)\n-\t\t  (match_operand:GPI 2 \"aarch64_sub_immediate\" \"J\")))]\n-  \"INTVAL (operands[3]) == -INTVAL (operands[2])\"\n-  \"subs\\\\t%<w>0, %<w>1, #%n2\"\n-  [(set_attr \"type\" \"alus_sreg\")]\n-)\n-\n (define_peephole2\n   [(set (match_operand:GPI 0 \"register_operand\")\n \t(minus:GPI (match_operand:GPI 1 \"aarch64_reg_or_zero\")\n@@ -2914,7 +3039,7 @@\n (define_peephole2\n   [(set (match_operand:GPI 0 \"register_operand\")\n \t(plus:GPI (match_operand:GPI 1 \"register_operand\")\n-\t\t  (match_operand:GPI 2 \"aarch64_sub_immediate\")))\n+\t\t  (match_operand:GPI 2 \"aarch64_plus_immediate\")))\n    (set (reg:CC CC_REGNUM)\n \t(compare:CC\n \t  (match_dup 1)\n@@ -2924,7 +3049,7 @@\n   [(const_int 0)]\n   {\n     emit_insn (gen_sub<mode>3_compare1_imm (operands[0], operands[1],\n-\t\t\t\t\t operands[2], operands[3]));\n+\t\t\t\t\t operands[3], operands[2]));\n     DONE;\n   }\n )\n@@ -2939,12 +3064,12 @@\n \t  (match_operand:GPI 3 \"const_int_operand\")))\n    (set (match_operand:GPI 0 \"register_operand\")\n \t(plus:GPI (match_dup 1)\n-\t\t  (match_operand:GPI 2 \"aarch64_sub_immediate\")))]\n+\t\t  (match_operand:GPI 2 \"aarch64_plus_immediate\")))]\n   \"INTVAL (operands[3]) == -INTVAL (operands[2])\"\n   [(const_int 0)]\n   {\n     emit_insn (gen_sub<mode>3_compare1_imm (operands[0], operands[1],\n-\t\t\t\t\t operands[2], operands[3]));\n+\t\t\t\t\t operands[3], operands[2]));\n     DONE;\n   }\n )\n@@ -3164,14 +3289,14 @@\n   [(set_attr \"type\" \"adc_reg\")]\n )\n \n-(define_expand \"sub<mode>3_carryinCV\"\n+(define_expand \"usub<GPI:mode>3_carryinC\"\n   [(parallel\n      [(set (reg:CC CC_REGNUM)\n \t   (compare:CC\n-\t     (sign_extend:<DWI>\n+\t     (zero_extend:<DWI>\n \t       (match_operand:GPI 1 \"aarch64_reg_or_zero\" \"\"))\n \t     (plus:<DWI>\n-\t       (sign_extend:<DWI>\n+\t       (zero_extend:<DWI>\n \t\t (match_operand:GPI 2 \"register_operand\" \"\"))\n \t       (ltu:<DWI> (reg:CC CC_REGNUM) (const_int 0)))))\n       (set (match_operand:GPI 0 \"register_operand\" \"\")\n@@ -3181,24 +3306,12 @@\n    \"\"\n )\n \n-(define_insn \"*sub<mode>3_carryinCV_z1_z2\"\n-  [(set (reg:CC CC_REGNUM)\n-\t(compare:CC\n-\t  (const_int 0)\n-\t  (match_operand:<DWI> 2 \"aarch64_borrow_operation\" \"\")))\n-   (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n-\t(neg:GPI (match_operand:GPI 1 \"aarch64_borrow_operation\" \"\")))]\n-   \"\"\n-   \"sbcs\\\\t%<w>0, <w>zr, <w>zr\"\n-  [(set_attr \"type\" \"adc_reg\")]\n-)\n-\n-(define_insn \"*sub<mode>3_carryinCV_z1\"\n+(define_insn \"*usub<GPI:mode>3_carryinC_z1\"\n   [(set (reg:CC CC_REGNUM)\n \t(compare:CC\n \t  (const_int 0)\n \t  (plus:<DWI>\n-\t    (sign_extend:<DWI>\n+\t    (zero_extend:<DWI>\n \t      (match_operand:GPI 1 \"register_operand\" \"r\"))\n \t    (match_operand:<DWI> 2 \"aarch64_borrow_operation\" \"\"))))\n    (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n@@ -3210,10 +3323,10 @@\n   [(set_attr \"type\" \"adc_reg\")]\n )\n \n-(define_insn \"*sub<mode>3_carryinCV_z2\"\n+(define_insn \"*usub<GPI:mode>3_carryinC_z2\"\n   [(set (reg:CC CC_REGNUM)\n \t(compare:CC\n-\t  (sign_extend:<DWI>\n+\t  (zero_extend:<DWI>\n \t    (match_operand:GPI 1 \"register_operand\" \"r\"))\n \t  (match_operand:<DWI> 2 \"aarch64_borrow_operation\" \"\")))\n    (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n@@ -3225,13 +3338,13 @@\n   [(set_attr \"type\" \"adc_reg\")]\n )\n \n-(define_insn \"*sub<mode>3_carryinCV\"\n+(define_insn \"*usub<GPI:mode>3_carryinC\"\n   [(set (reg:CC CC_REGNUM)\n \t(compare:CC\n-\t  (sign_extend:<DWI>\n+\t  (zero_extend:<DWI>\n \t    (match_operand:GPI 1 \"register_operand\" \"r\"))\n \t  (plus:<DWI>\n-\t    (sign_extend:<DWI>\n+\t    (zero_extend:<DWI>\n \t      (match_operand:GPI 2 \"register_operand\" \"r\"))\n \t    (match_operand:<DWI> 3 \"aarch64_borrow_operation\" \"\"))))\n    (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n@@ -3243,6 +3356,69 @@\n   [(set_attr \"type\" \"adc_reg\")]\n )\n \n+(define_expand \"sub<GPI:mode>3_carryinV\"\n+  [(parallel\n+     [(set (reg:CC_V CC_REGNUM)\n+\t   (compare:CC_V\n+\t    (minus:<DWI>\n+\t     (sign_extend:<DWI>\n+\t       (match_operand:GPI 1 \"aarch64_reg_or_zero\" \"\"))\n+\t     (plus:<DWI>\n+\t       (sign_extend:<DWI>\n+\t\t (match_operand:GPI 2 \"register_operand\" \"\"))\n+\t       (ltu:<DWI> (reg:CC CC_REGNUM) (const_int 0))))\n+\t    (sign_extend:<DWI>\n+\t     (minus:GPI (match_dup 1)\n+\t\t\t(plus:GPI (ltu:GPI (reg:CC CC_REGNUM) (const_int 0))\n+\t\t\t\t  (match_dup 2))))))\n+      (set (match_operand:GPI 0 \"register_operand\" \"\")\n+\t   (minus:GPI\n+\t     (minus:GPI (match_dup 1) (match_dup 2))\n+\t     (ltu:GPI (reg:CC CC_REGNUM) (const_int 0))))])]\n+   \"\"\n+)\n+\n+(define_insn \"*sub<mode>3_carryinV_z2\"\n+  [(set (reg:CC_V CC_REGNUM)\n+\t(compare:CC_V\n+\t (minus:<DWI>\n+\t  (sign_extend:<DWI> (match_operand:GPI 1 \"register_operand\" \"r\"))\n+\t  (match_operand:<DWI> 2 \"aarch64_borrow_operation\" \"\"))\n+\t (sign_extend:<DWI>\n+\t  (minus:GPI (match_dup 1)\n+\t\t     (match_operand:GPI 3 \"aarch64_borrow_operation\" \"\")))))\n+   (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t(minus:GPI\n+\t (match_dup 1) (match_dup 3)))]\n+   \"\"\n+   \"sbcs\\\\t%<w>0, %<w>1, <w>zr\"\n+  [(set_attr \"type\" \"adc_reg\")]\n+)\n+\n+(define_insn \"*sub<mode>3_carryinV\"\n+  [(set (reg:CC_V CC_REGNUM)\n+\t(compare:CC_V\n+\t (minus:<DWI>\n+\t  (sign_extend:<DWI>\n+\t    (match_operand:GPI 1 \"register_operand\" \"r\"))\n+\t  (plus:<DWI>\n+\t    (sign_extend:<DWI>\n+\t      (match_operand:GPI 2 \"register_operand\" \"r\"))\n+\t    (match_operand:<DWI> 3 \"aarch64_borrow_operation\" \"\")))\n+\t (sign_extend:<DWI>\n+\t  (minus:GPI\n+\t   (match_dup 1)\n+\t   (plus:GPI (match_operand:GPI 4 \"aarch64_borrow_operation\" \"\")\n+\t\t     (match_dup 2))))))\n+   (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t(minus:GPI\n+\t  (minus:GPI (match_dup 1) (match_dup 2))\n+\t  (match_dup 4)))]\n+   \"\"\n+   \"sbcs\\\\t%<w>0, %<w>1, %<w>2\"\n+  [(set_attr \"type\" \"adc_reg\")]\n+)\n+\n (define_insn \"*sub_uxt<mode>_shift2\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=rk\")\n \t(minus:GPI (match_operand:GPI 4 \"register_operand\" \"rk\")"}, {"sha": "13d8c065b1188541781193e532d68d9c5a7baa9a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a58fe3c5ca1f0101c4af7f0c5b860cc4d49cd4cb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a58fe3c5ca1f0101c4af7f0c5b860cc4d49cd4cb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a58fe3c5ca1f0101c4af7f0c5b860cc4d49cd4cb", "patch": "@@ -1,3 +1,8 @@\n+2019-01-07  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* gcc.target/aarch64/subs_compare_2.c: Make '#' immediate prefix\n+\toptional in scan pattern.\n+\n 2019-01-07  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR tree-optimization/88598"}, {"sha": "41a256619b7ed0326ac4653af6e2e1d58e949b4b", "filename": "gcc/testsuite/gcc.target/aarch64/subs_compare_2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a58fe3c5ca1f0101c4af7f0c5b860cc4d49cd4cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsubs_compare_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a58fe3c5ca1f0101c4af7f0c5b860cc4d49cd4cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsubs_compare_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsubs_compare_2.c?ref=a58fe3c5ca1f0101c4af7f0c5b860cc4d49cd4cb", "patch": "@@ -11,5 +11,5 @@ foo (int a, int b)\n     return 0;\n }\n \n-/* { dg-final { scan-assembler-times \"subs\\\\tw\\[0-9\\]+, w\\[0-9\\]+, #4\" 1 } } */\n+/* { dg-final { scan-assembler-times \"subs\\\\tw\\[0-9\\]+, w\\[0-9\\]+, \\[#\\]?4\" 1 } } */\n /* { dg-final { scan-assembler-not \"cmp\\\\tw\\[0-9\\]+, w\\[0-9\\]+\" } } */"}]}