{"sha": "b5ba3a9b55ea2462b54b5fcd14476182e3f93fe4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjViYTNhOWI1NWVhMjQ2MmI1NGI1ZmNkMTQ0NzYxODJlM2Y5M2ZlNA==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2013-09-18T00:58:18Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2013-09-18T00:58:18Z"}, "message": "rl78-real.md (bf): New pattern.\n\n* config/rl78/rl78-real.md (bf): New pattern.\n(bt): New pattern.\n* config/rl78/rl78.c (rl78_print_operand_1): Handle %B.\n(rl78_print_operand): Do not put a # before a %B.\n* config/rl78/rl78.opt: Tweak doc strings.\n\nFrom-SVN: r202676", "tree": {"sha": "56a80c4802b10b30c474c84b0547a2b60625a553", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56a80c4802b10b30c474c84b0547a2b60625a553"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5ba3a9b55ea2462b54b5fcd14476182e3f93fe4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5ba3a9b55ea2462b54b5fcd14476182e3f93fe4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5ba3a9b55ea2462b54b5fcd14476182e3f93fe4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5ba3a9b55ea2462b54b5fcd14476182e3f93fe4/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "05eac2ce9119a6671db1f71a8560f8e28f1a5224", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05eac2ce9119a6671db1f71a8560f8e28f1a5224", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05eac2ce9119a6671db1f71a8560f8e28f1a5224"}], "stats": {"total": 78, "additions": 72, "deletions": 6}, "files": [{"sha": "d2c79a167d99542af426be8e5ac5269be0ef110f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5ba3a9b55ea2462b54b5fcd14476182e3f93fe4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5ba3a9b55ea2462b54b5fcd14476182e3f93fe4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5ba3a9b55ea2462b54b5fcd14476182e3f93fe4", "patch": "@@ -1,3 +1,11 @@\n+2013-09-17  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/rl78/rl78-real.md (bf): New pattern.\n+\t(bt): New pattern.\n+\t* config/rl78/rl78.c (rl78_print_operand_1): Handle %B.\n+\t(rl78_print_operand): Do not put a # before a %B.\n+\t* config/rl78/rl78.opt: Tweak doc strings.\n+\n 2013-09-17  DJ Delorie  <dj@redhat.com>\n \n \t* config/rl78/constraints.md (Wcv): Allow up to $r31."}, {"sha": "90b380a54e4e06412bbed9de9cb1bf2ae9f22a13", "filename": "gcc/config/rl78/rl78-real.md", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5ba3a9b55ea2462b54b5fcd14476182e3f93fe4/gcc%2Fconfig%2Frl78%2Frl78-real.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5ba3a9b55ea2462b54b5fcd14476182e3f93fe4/gcc%2Fconfig%2Frl78%2Frl78-real.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78-real.md?ref=b5ba3a9b55ea2462b54b5fcd14476182e3f93fe4", "patch": "@@ -459,3 +459,58 @@\n   [(set (match_dup 0) (reg:HI AX_REG))]\n   )\n \n+;; Bit test and branch insns.\n+\n+;; NOTE: These patterns will work for bits in other places, not just A.\n+\n+(define_insn \"bf\"\n+  [(set (pc)\n+\t(if_then_else (eq (and (reg:QI A_REG)\n+\t\t\t       (match_operand 0 \"immediate_operand\" \"n\"))\n+\t\t\t  (const_int 0))\n+\t\t      (label_ref (match_operand 1 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"\"\n+  \"bf\\tA.%B0, $%1\"\n+)\n+\n+(define_insn \"bt\"\n+  [(set (pc)\n+\t(if_then_else (ne (and (reg:QI A_REG)\n+\t\t\t       (match_operand 0 \"immediate_operand\" \"n\"))\n+\t\t\t  (const_int 0))\n+\t\t      (label_ref (match_operand 1 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"\"\n+  \"bt\\tA.%B0, $%1\"\n+)\n+\n+;; NOTE: These peepholes are fragile.  They rely upon GCC generating\n+;; a specific sequence on insns, based upon examination of test code.\n+;; Improvements to GCC or using code other than the test code can result\n+;; in the peephole not matching and the optimization being missed.\n+\n+(define_peephole2\n+  [(set (match_operand:QI 1 \"register_operand\") (reg:QI A_REG))\n+   (set (match_dup 1) (and:QI (match_dup 1) (match_operand 2 \"immediate_operand\")))\n+   (set (pc) (if_then_else (eq (match_dup 1) (const_int 0))\n+\t\t\t   (label_ref (match_operand 3 \"\"))\n+\t\t\t   (pc)))]\n+  \"peep2_regno_dead_p (3, REGNO (operands[1]))\n+   && exact_log2 (INTVAL (operands[2])) >= 0\"\n+  [(set (pc) (if_then_else (eq (and (reg:QI A_REG) (match_dup 2)) (const_int 0))\n+\t\t\t   (label_ref (match_dup 3)) (pc)))]\n+  )\n+\n+(define_peephole2\n+  [(set (match_operand:QI 1 \"register_operand\") (reg:QI A_REG))\n+   (set (match_dup 1) (and:QI (match_dup 1) (match_operand 2 \"immediate_operand\")))\n+   (set (pc) (if_then_else (ne (match_dup 1) (const_int 0))\n+\t\t\t   (label_ref (match_operand 3 \"\"))\n+\t\t\t   (pc)))]\n+  \"peep2_regno_dead_p (3, REGNO (operands[1]))\n+   && exact_log2 (INTVAL (operands[2])) >= 0\"\n+  [(set (pc) (if_then_else (ne (and (reg:QI A_REG) (match_dup 2)) (const_int 0))\n+\t\t\t   (label_ref (match_dup 3)) (pc)))]\n+  )\n+"}, {"sha": "5902e1ecd8f282668ef4114253092d74cdb34067", "filename": "gcc/config/rl78/rl78.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5ba3a9b55ea2462b54b5fcd14476182e3f93fe4/gcc%2Fconfig%2Frl78%2Frl78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5ba3a9b55ea2462b54b5fcd14476182e3f93fe4/gcc%2Fconfig%2Frl78%2Frl78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.c?ref=b5ba3a9b55ea2462b54b5fcd14476182e3f93fe4", "patch": "@@ -1286,6 +1286,7 @@ rl78_function_arg_boundary (enum machine_mode mode ATTRIBUTE_UNUSED,\n    s - shift count mod 8\n    S - shift count mod 16\n    r - reverse shift count (8-(count mod 8))\n+   B - bit position\n \n    h - bottom HI of an SI\n    H - top HI of an SI\n@@ -1412,6 +1413,8 @@ rl78_print_operand_1 (FILE * file, rtx op, int letter)\n \tfprintf (file, \"%ld\", INTVAL (op) & 0xffff);\n       else if (letter == 'e')\n \tfprintf (file, \"%ld\", (INTVAL (op) >> 16) & 0xff);\n+      else if (letter == 'B')\n+\tfprintf (file, \"%d\", exact_log2 (INTVAL (op)));\n       else if (letter == 'E')\n \tfprintf (file, \"%ld\", (INTVAL (op) >> 24) & 0xff);\n       else if (letter == 'm')\n@@ -1605,7 +1608,7 @@ rl78_print_operand_1 (FILE * file, rtx op, int letter)\n static void\n rl78_print_operand (FILE * file, rtx op, int letter)\n {\n-  if (CONSTANT_P (op) && letter != 'u' && letter != 's' && letter != 'r' && letter != 'S')\n+  if (CONSTANT_P (op) && letter != 'u' && letter != 's' && letter != 'r' && letter != 'S' && letter != 'B')\n     fprintf (file, \"#\");\n   rl78_print_operand_1 (file, op, letter);\n }"}, {"sha": "ebcf903126d96d830c94e682e0706405bbbfdec2", "filename": "gcc/config/rl78/rl78.opt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5ba3a9b55ea2462b54b5fcd14476182e3f93fe4/gcc%2Fconfig%2Frl78%2Frl78.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5ba3a9b55ea2462b54b5fcd14476182e3f93fe4/gcc%2Fconfig%2Frl78%2Frl78.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.opt?ref=b5ba3a9b55ea2462b54b5fcd14476182e3f93fe4", "patch": "@@ -23,7 +23,7 @@ HeaderInclude\n config/rl78/rl78-opts.h\n \n msim\n-Target\n+Target Report\n Use the simulator runtime.\n \n mmul=\n@@ -43,13 +43,13 @@ EnumValue\n Enum(rl78_mul_types) String(g13) Value(MUL_G13)\n \n mallregs\n-Target Mask(ALLREGS)\n+Target Mask(ALLREGS) Report Optimization\n Use all registers, reserving none for interrupt handlers.\n \n mrelax\n-Target\n-Enable assembler and linker relaxation.\n+Target Report Optimization\n+Enable assembler and linker relaxation.  Enabled by default at -Os.\n \n mg10\n-Target Mask(G10)\n+Target Mask(G10) Report\n Target the RL78/G10 series"}]}