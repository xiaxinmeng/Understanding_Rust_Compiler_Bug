{"sha": "b3f1051b11374792241ae7f72f015ce2325bb492", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNmMTA1MWIxMTM3NDc5MjI0MWFlN2Y3MmYwMTVjZTIzMjViYjQ5Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-05-30T18:37:59Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-05-30T18:37:59Z"}, "message": "asan.c (report_error_func): Add SLOW_P argument, use BUILT_IN_ASAN_*_N if set.\n\n\t* asan.c (report_error_func): Add SLOW_P argument, use\n\tBUILT_IN_ASAN_*_N if set.\n\t(build_check_stmt): Likewise.\n\t(instrument_derefs): If T has insufficient alignment,\n\tforce same handling as for odd sizes.\n\n\t* c-c++-common/asan/misalign-1.c: New test.\n\t* c-c++-common/asan/misalign-2.c: New test.\n\nFrom-SVN: r211092", "tree": {"sha": "c81e52a0dcb4b5084747f6e4eaaa18d3cfa498cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c81e52a0dcb4b5084747f6e4eaaa18d3cfa498cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3f1051b11374792241ae7f72f015ce2325bb492", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3f1051b11374792241ae7f72f015ce2325bb492", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3f1051b11374792241ae7f72f015ce2325bb492", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3f1051b11374792241ae7f72f015ce2325bb492/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "40f9f6bb0ead69f2e09b62341e91a0f9643afe3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f9f6bb0ead69f2e09b62341e91a0f9643afe3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40f9f6bb0ead69f2e09b62341e91a0f9643afe3f"}], "stats": {"total": 144, "additions": 134, "deletions": 10}, "files": [{"sha": "233f05fc7413c1052531fe1041899814ad0de746", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f1051b11374792241ae7f72f015ce2325bb492/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f1051b11374792241ae7f72f015ce2325bb492/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b3f1051b11374792241ae7f72f015ce2325bb492", "patch": "@@ -1,5 +1,11 @@\n 2014-05-30  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* asan.c (report_error_func): Add SLOW_P argument, use\n+\tBUILT_IN_ASAN_*_N if set.\n+\t(build_check_stmt): Likewise.\n+\t(instrument_derefs): If T has insufficient alignment,\n+\tforce same handling as for odd sizes.\n+\n \t* sanitizer.def (BUILT_IN_ASAN_REPORT_LOAD_N,\n \tBUILT_IN_ASAN_REPORT_STORE_N): New.\n \t* asan.c (struct asan_mem_ref): Change access_size type to"}, {"sha": "339765523a8f79f312dafdb3c57768eb562f65f0", "filename": "gcc/asan.c", "status": "modified", "additions": 41, "deletions": 10, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f1051b11374792241ae7f72f015ce2325bb492/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f1051b11374792241ae7f72f015ce2325bb492/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=b3f1051b11374792241ae7f72f015ce2325bb492", "patch": "@@ -1319,7 +1319,7 @@ asan_protect_global (tree decl)\n    IS_STORE is either 1 (for a store) or 0 (for a load).  */\n \n static tree\n-report_error_func (bool is_store, HOST_WIDE_INT size_in_bytes)\n+report_error_func (bool is_store, HOST_WIDE_INT size_in_bytes, bool slow_p)\n {\n   static enum built_in_function report[2][6]\n     = { { BUILT_IN_ASAN_REPORT_LOAD1, BUILT_IN_ASAN_REPORT_LOAD2,\n@@ -1329,7 +1329,8 @@ report_error_func (bool is_store, HOST_WIDE_INT size_in_bytes)\n \t  BUILT_IN_ASAN_REPORT_STORE4, BUILT_IN_ASAN_REPORT_STORE8,\n \t  BUILT_IN_ASAN_REPORT_STORE16, BUILT_IN_ASAN_REPORT_STORE_N } };\n   if ((size_in_bytes & (size_in_bytes - 1)) != 0\n-      || size_in_bytes > 16)\n+      || size_in_bytes > 16\n+      || slow_p)\n     return builtin_decl_implicit (report[is_store][5]);\n   return builtin_decl_implicit (report[is_store][exact_log2 (size_in_bytes)]);\n }\n@@ -1508,7 +1509,8 @@ build_shadow_mem_access (gimple_stmt_iterator *gsi, location_t location,\n \n static void\n build_check_stmt (location_t location, tree base, gimple_stmt_iterator *iter,\n-\t\t  bool before_p, bool is_store, HOST_WIDE_INT size_in_bytes)\n+\t\t  bool before_p, bool is_store, HOST_WIDE_INT size_in_bytes,\n+\t\t  bool slow_p = false)\n {\n   gimple_stmt_iterator gsi;\n   basic_block then_bb, else_bb;\n@@ -1522,9 +1524,15 @@ build_check_stmt (location_t location, tree base, gimple_stmt_iterator *iter,\n   HOST_WIDE_INT real_size_in_bytes = size_in_bytes;\n   tree sz_arg = NULL_TREE;\n \n-  if ((size_in_bytes & (size_in_bytes - 1)) != 0\n-      || size_in_bytes > 16)\n-    real_size_in_bytes = 1;\n+  if (size_in_bytes == 1)\n+    slow_p = false;\n+  else if ((size_in_bytes & (size_in_bytes - 1)) != 0\n+\t   || size_in_bytes > 16\n+\t   || slow_p)\n+    {\n+      real_size_in_bytes = 1;\n+      slow_p = true;\n+    }\n \n   /* Get an iterator on the point where we can add the condition\n      statement for the instrumentation.  */\n@@ -1582,8 +1590,8 @@ build_check_stmt (location_t location, tree base, gimple_stmt_iterator *iter,\n       t = gimple_assign_lhs (gimple_seq_last (seq));\n       gimple_seq_set_location (seq, location);\n       gsi_insert_seq_after (&gsi, seq, GSI_CONTINUE_LINKING);\n-      /* For weird access sizes, check first and last byte.  */\n-      if (real_size_in_bytes != size_in_bytes)\n+      /* For weird access sizes or misaligned, check first and last byte.  */\n+      if (slow_p)\n \t{\n \t  g = gimple_build_assign_with_ops (PLUS_EXPR,\n \t\t\t\t\t    make_ssa_name (uintptr_type, NULL),\n@@ -1626,7 +1634,7 @@ build_check_stmt (location_t location, tree base, gimple_stmt_iterator *iter,\n \n   /* Generate call to the run-time library (e.g. __asan_report_load8).  */\n   gsi = gsi_start_bb (then_bb);\n-  g = gimple_build_call (report_error_func (is_store, size_in_bytes),\n+  g = gimple_build_call (report_error_func (is_store, size_in_bytes, slow_p),\n \t\t\t sz_arg ? 2 : 1, base_addr, sz_arg);\n   gimple_set_location (g, location);\n   gsi_insert_after (&gsi, g, GSI_NEW_STMT);\n@@ -1722,8 +1730,31 @@ instrument_derefs (gimple_stmt_iterator *iter, tree t,\n   base = build_fold_addr_expr (t);\n   if (!has_mem_ref_been_instrumented (base, size_in_bytes))\n     {\n+      bool slow_p = false;\n+      if (size_in_bytes > 1)\n+\t{\n+\t  if ((size_in_bytes & (size_in_bytes - 1)) != 0\n+\t      || size_in_bytes > 16)\n+\t    slow_p = true;\n+\t  else\n+\t    {\n+\t      unsigned int align = get_object_alignment (t);\n+\t      if (align < size_in_bytes * BITS_PER_UNIT)\n+\t\t{\n+\t\t  /* On non-strict alignment targets, if\n+\t\t     16-byte access is just 8-byte aligned,\n+\t\t     this will result in misaligned shadow\n+\t\t     memory 2 byte load, but otherwise can\n+\t\t     be handled using one read.  */\n+\t\t  if (size_in_bytes != 16\n+\t\t      || STRICT_ALIGNMENT\n+\t\t      || align < 8 * BITS_PER_UNIT)\n+\t\t    slow_p = true;\n+\t\t}\n+\t    }\n+\t}\n       build_check_stmt (location, base, iter, /*before_p=*/true,\n-\t\t\tis_store, size_in_bytes);\n+\t\t\tis_store, size_in_bytes, slow_p);\n       update_mem_ref_hash_table (base, size_in_bytes);\n       update_mem_ref_hash_table (t, size_in_bytes);\n     }"}, {"sha": "89cb55c1b00c18b5567bcf400cf81e7d16f6bae1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f1051b11374792241ae7f72f015ce2325bb492/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f1051b11374792241ae7f72f015ce2325bb492/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b3f1051b11374792241ae7f72f015ce2325bb492", "patch": "@@ -1,5 +1,8 @@\n 2014-05-30  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* c-c++-common/asan/misalign-1.c: New test.\n+\t* c-c++-common/asan/misalign-2.c: New test.\n+\n \t* g++.dg/asan/asan_test.C: Add -std=c++11 and\n \t-DSANITIZER_USE_DEJAGNU_GTEST=1 to dg-options, remove\n \t-DASAN_USE_DEJAGNU_GTEST=1."}, {"sha": "0c5b6e0c754bdcfe8aeef1cd8f62aa4bc24f470d", "filename": "gcc/testsuite/c-c++-common/asan/misalign-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f1051b11374792241ae7f72f015ce2325bb492/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fmisalign-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f1051b11374792241ae7f72f015ce2325bb492/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fmisalign-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fmisalign-1.c?ref=b3f1051b11374792241ae7f72f015ce2325bb492", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run { target { ilp32 || lp64 } } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-shouldfail \"asan\" } */\n+\n+struct S { int i; } __attribute__ ((packed));\n+\n+__attribute__((noinline, noclone)) int\n+foo (struct S *s)\n+{\n+  return s->i;\n+}\n+\n+__attribute__((noinline, noclone)) int\n+bar (int *s)\n+{\n+  return *s;\n+}\n+\n+__attribute__((noinline, noclone)) struct S\n+baz (struct S *s)\n+{\n+  return *s;\n+}\n+\n+int\n+main ()\n+{\n+  struct T { char a[3]; struct S b[3]; char c; } t;\n+  int v = 5;\n+  struct S *p = t.b;\n+  asm volatile (\"\" : \"+rm\" (p));\n+  p += 3;\n+  if (bar (&v) != 5) __builtin_abort ();\n+  volatile int w = foo (p);\n+  return 0;\n+}\n+\n+/* { dg-output \"ERROR: AddressSanitizer:\\[^\\n\\r]*on address\\[^\\n\\r]*\" } */\n+/* { dg-output \"0x\\[0-9a-f\\]+ at pc 0x\\[0-9a-f\\]+ bp 0x\\[0-9a-f\\]+ sp 0x\\[0-9a-f\\]+\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*READ of size 4 at 0x\\[0-9a-f\\]+ thread T0\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #0 0x\\[0-9a-f\\]+ (in _*foo(\\[^\\n\\r]*misalign-1.c:10|\\[^\\n\\r]*:0)|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #1 0x\\[0-9a-f\\]+ (in _*main (\\[^\\n\\r]*misalign-1.c:34|\\[^\\n\\r]*:0)|\\[(\\]).*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "7fbe299cc54ee39c68a1a2bd9d0ae3f87c1e03b5", "filename": "gcc/testsuite/c-c++-common/asan/misalign-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f1051b11374792241ae7f72f015ce2325bb492/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fmisalign-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f1051b11374792241ae7f72f015ce2325bb492/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fmisalign-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fmisalign-2.c?ref=b3f1051b11374792241ae7f72f015ce2325bb492", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run { target { ilp32 || lp64 } } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-shouldfail \"asan\" } */\n+\n+struct S { int i; } __attribute__ ((packed));\n+\n+__attribute__((noinline, noclone)) int\n+foo (struct S *s)\n+{\n+  return s->i;\n+}\n+\n+__attribute__((noinline, noclone)) int\n+bar (int *s)\n+{\n+  return *s;\n+}\n+\n+__attribute__((noinline, noclone)) struct S\n+baz (struct S *s)\n+{\n+  return *s;\n+}\n+\n+int\n+main ()\n+{\n+  struct T { char a[3]; struct S b[3]; char c; } t;\n+  int v = 5;\n+  struct S *p = t.b;\n+  asm volatile (\"\" : \"+rm\" (p));\n+  p += 3;\n+  if (bar (&v) != 5) __builtin_abort ();\n+  volatile struct S w = baz (p);\n+  return 0;\n+}\n+\n+/* { dg-output \"ERROR: AddressSanitizer:\\[^\\n\\r]*on address\\[^\\n\\r]*\" } */\n+/* { dg-output \"0x\\[0-9a-f\\]+ at pc 0x\\[0-9a-f\\]+ bp 0x\\[0-9a-f\\]+ sp 0x\\[0-9a-f\\]+\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*READ of size 4 at 0x\\[0-9a-f\\]+ thread T0\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #0 0x\\[0-9a-f\\]+ (in _*baz(\\[^\\n\\r]*misalign-2.c:22|\\[^\\n\\r]*:0)|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #1 0x\\[0-9a-f\\]+ (in _*main (\\[^\\n\\r]*misalign-2.c:34|\\[^\\n\\r]*:0)|\\[(\\]).*(\\n|\\r\\n|\\r)\" } */"}]}