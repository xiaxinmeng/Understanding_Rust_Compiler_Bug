{"sha": "1c16f7fc903c1c1c912faf7889b69d83429b7b2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMxNmY3ZmM5MDNjMWMxYzkxMmZhZjc4ODliNjlkODM0MjliN2IyZQ==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-03-31T21:07:29Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-03-31T21:08:23Z"}, "message": "d: Add always_inline to the internal attribute table.\n\nThis attribute is not directly accessible from user code, rather it is\nindirectly added from the @forceinline attribute.  Even so, a handler\nshould be present for it to prevent false positive warnings.\n\nSaid warnings are not something that could happen currently, but will\nbecome a problem from fixing PR90136 later.\n\ngcc/d/ChangeLog:\n\n\t* d-attribs.cc (d_langhook_common_attribute_table): Add always_inline.\n\t(handle_always_inline_attribute): New function.", "tree": {"sha": "0c89e976db9499401904b1282b7bf351845e9f44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c89e976db9499401904b1282b7bf351845e9f44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c16f7fc903c1c1c912faf7889b69d83429b7b2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c16f7fc903c1c1c912faf7889b69d83429b7b2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c16f7fc903c1c1c912faf7889b69d83429b7b2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c16f7fc903c1c1c912faf7889b69d83429b7b2e/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63b2923dc6f57e74d964a9cf14f4ba595ab14ed9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63b2923dc6f57e74d964a9cf14f4ba595ab14ed9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63b2923dc6f57e74d964a9cf14f4ba595ab14ed9"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "20817e38fc69fbe9f51dee1e487bdd2cf254de10", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c16f7fc903c1c1c912faf7889b69d83429b7b2e/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c16f7fc903c1c1c912faf7889b69d83429b7b2e/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=1c16f7fc903c1c1c912faf7889b69d83429b7b2e", "patch": "@@ -1,3 +1,8 @@\n+2020-03-31  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-attribs.cc (d_langhook_common_attribute_table): Add always_inline.\n+\t(handle_always_inline_attribute): New function.\n+\n 2020-03-31  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/94424"}, {"sha": "bba6f516ea359a5f8c2cee13ec8b4d9d7c9e04cf", "filename": "gcc/d/d-attribs.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c16f7fc903c1c1c912faf7889b69d83429b7b2e/gcc%2Fd%2Fd-attribs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c16f7fc903c1c1c912faf7889b69d83429b7b2e/gcc%2Fd%2Fd-attribs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-attribs.cc?ref=1c16f7fc903c1c1c912faf7889b69d83429b7b2e", "patch": "@@ -52,6 +52,7 @@ static tree handle_type_generic_attribute (tree *, tree, tree, int, bool *);\n static tree handle_transaction_pure_attribute (tree *, tree, tree, int, bool *);\n static tree handle_returns_twice_attribute (tree *, tree, tree, int, bool *);\n static tree handle_fnspec_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_always_inline_attribute (tree *, tree, tree, int, bool *);\n \n /* D attribute handlers for user defined attributes.  */\n static tree d_handle_noinline_attribute (tree *, tree, tree, int, bool *);\n@@ -137,6 +138,8 @@ const attribute_spec d_langhook_common_attribute_table[] =\n \t     handle_type_generic_attribute, NULL),\n   ATTR_SPEC (\"fn spec\", 1, 1, false, true, true, false,\n \t     handle_fnspec_attribute, NULL),\n+  ATTR_SPEC (\"always_inline\", 0, 0, true,  false, false, false,\n+\t     handle_always_inline_attribute, NULL),\n   ATTR_SPEC (NULL, 0, 0, false, false, false, false, NULL, NULL),\n };\n \n@@ -565,6 +568,19 @@ handle_fnspec_attribute (tree *node ATTRIBUTE_UNUSED, tree ARG_UNUSED (name),\n   return NULL_TREE;\n }\n \n+/* Handle a \"always_inline\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_always_inline_attribute (tree *node, tree ARG_UNUSED (name),\n+\t\t\t\ttree ARG_UNUSED (args), int ARG_UNUSED (flags),\n+\t\t\t\tbool *no_add_attrs ATTRIBUTE_UNUSED)\n+{\n+  gcc_assert (TREE_CODE (*node) == FUNCTION_DECL);\n+\n+  return NULL_TREE;\n+}\n+\n /* Language specific attribute handlers.  */\n \n /* Handle a \"noinline\" attribute.  */"}]}