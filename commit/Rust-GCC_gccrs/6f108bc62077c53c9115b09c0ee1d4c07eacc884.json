{"sha": "6f108bc62077c53c9115b09c0ee1d4c07eacc884", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmYxMDhiYzYyMDc3YzUzYzkxMTViMDljMGVlMWQ0YzA3ZWFjYzg4NA==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2014-08-18T10:50:35Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-08-18T10:50:35Z"}, "message": "i386.md (define_insn \"*movoi_internal_avx\"): Add evex version.\n\ngcc/\n\t* config/i386/i386.md\n\t(define_insn \"*movoi_internal_avx\"): Add evex version.\n\t(define_insn \"*movti_internal\"): Ditto.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\nFrom-SVN: r214089", "tree": {"sha": "4668ccd1888a70ce42473c8eebff3049d04b9a1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4668ccd1888a70ce42473c8eebff3049d04b9a1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f108bc62077c53c9115b09c0ee1d4c07eacc884", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f108bc62077c53c9115b09c0ee1d4c07eacc884", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f108bc62077c53c9115b09c0ee1d4c07eacc884", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f108bc62077c53c9115b09c0ee1d4c07eacc884/comments", "author": null, "committer": null, "parents": [{"sha": "0148f0b699cd90ed3ba2d63a2f1e2aa70c0f3af2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0148f0b699cd90ed3ba2d63a2f1e2aa70c0f3af2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0148f0b699cd90ed3ba2d63a2f1e2aa70c0f3af2"}], "stats": {"total": 39, "additions": 33, "deletions": 6}, "files": [{"sha": "687e4b64094a0b2c5a6729cdb9c42b5608ceaf7b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f108bc62077c53c9115b09c0ee1d4c07eacc884/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f108bc62077c53c9115b09c0ee1d4c07eacc884/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f108bc62077c53c9115b09c0ee1d4c07eacc884", "patch": "@@ -1,3 +1,16 @@\n+2014-08-18  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/i386.md\n+\t(define_insn \"*movoi_internal_avx\"): Add evex version.\n+\t(define_insn \"*movti_internal\"): Ditto.\n+\n 2014-08-18  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Anna Tikhonova  <anna.tikhonova@intel.com>"}, {"sha": "39fb23079e1b8a9db4760833a273274ae2d2d6c9", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f108bc62077c53c9115b09c0ee1d4c07eacc884/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f108bc62077c53c9115b09c0ee1d4c07eacc884/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=6f108bc62077c53c9115b09c0ee1d4c07eacc884", "patch": "@@ -1920,8 +1920,8 @@\n    (set_attr \"mode\" \"XI\")])\n \n (define_insn \"*movoi_internal_avx\"\n-  [(set (match_operand:OI 0 \"nonimmediate_operand\" \"=x,x ,m\")\n-\t(match_operand:OI 1 \"vector_move_operand\"  \"C ,xm,x\"))]\n+  [(set (match_operand:OI 0 \"nonimmediate_operand\" \"=v,v ,m\")\n+\t(match_operand:OI 1 \"vector_move_operand\"  \"C ,vm,v\"))]\n   \"TARGET_AVX && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (get_attr_type (insn))\n@@ -1935,13 +1935,17 @@\n \t{\n \t  if (get_attr_mode (insn) == MODE_V8SF)\n \t    return \"vmovups\\t{%1, %0|%0, %1}\";\n+\t  else if (get_attr_mode (insn) == MODE_XI)\n+\t    return \"vmovdqu32\\t{%1, %0|%0, %1}\";\n \t  else\n \t    return \"vmovdqu\\t{%1, %0|%0, %1}\";\n \t}\n       else\n \t{\n \t  if (get_attr_mode (insn) == MODE_V8SF)\n \t    return \"vmovaps\\t{%1, %0|%0, %1}\";\n+\t  else if (get_attr_mode (insn) == MODE_XI)\n+\t    return \"vmovdqa32\\t{%1, %0|%0, %1}\";\n \t  else\n \t    return \"vmovdqa\\t{%1, %0|%0, %1}\";\n \t}\n@@ -1953,7 +1957,10 @@\n   [(set_attr \"type\" \"sselog1,ssemov,ssemov\")\n    (set_attr \"prefix\" \"vex\")\n    (set (attr \"mode\")\n-\t(cond [(match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n+\t(cond [(ior (match_operand 0 \"ext_sse_reg_operand\")\n+\t\t    (match_operand 1 \"ext_sse_reg_operand\"))\n+\t\t (const_string \"XI\")\n+\t       (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n \t\t (const_string \"V8SF\")\n \t       (and (eq_attr \"alternative\" \"2\")\n \t\t    (match_test \"TARGET_SSE_TYPELESS_STORES\"))\n@@ -1962,8 +1969,8 @@\n \t      (const_string \"OI\")))])\n \n (define_insn \"*movti_internal\"\n-  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=!r ,o ,x,x ,m\")\n-\t(match_operand:TI 1 \"general_operand\"      \"riFo,re,C,xm,x\"))]\n+  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=!r ,o ,v,v ,m\")\n+\t(match_operand:TI 1 \"general_operand\"      \"riFo,re,C,vm,v\"))]\n   \"(TARGET_64BIT || TARGET_SSE)\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n@@ -1983,13 +1990,17 @@\n \t{\n \t  if (get_attr_mode (insn) == MODE_V4SF)\n \t    return \"%vmovups\\t{%1, %0|%0, %1}\";\n+\t  else if (get_attr_mode (insn) == MODE_XI)\n+\t    return \"vmovdqu32\\t{%1, %0|%0, %1}\";\n \t  else\n \t    return \"%vmovdqu\\t{%1, %0|%0, %1}\";\n \t}\n       else\n \t{\n \t  if (get_attr_mode (insn) == MODE_V4SF)\n \t    return \"%vmovaps\\t{%1, %0|%0, %1}\";\n+\t  else if (get_attr_mode (insn) == MODE_XI)\n+\t    return \"vmovdqa32\\t{%1, %0|%0, %1}\";\n \t  else\n \t    return \"%vmovdqa\\t{%1, %0|%0, %1}\";\n \t}\n@@ -2005,7 +2016,10 @@\n        (const_string \"maybe_vex\")\n        (const_string \"orig\")))\n    (set (attr \"mode\")\n-   \t(cond [(eq_attr \"alternative\" \"0,1\")\n+\t(cond [(ior (match_operand 0 \"ext_sse_reg_operand\")\n+\t\t    (match_operand 1 \"ext_sse_reg_operand\"))\n+\t\t (const_string \"XI\")\n+\t       (eq_attr \"alternative\" \"0,1\")\n \t\t (const_string \"DI\")\n \t       (ior (not (match_test \"TARGET_SSE2\"))\n \t\t    (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\"))"}]}