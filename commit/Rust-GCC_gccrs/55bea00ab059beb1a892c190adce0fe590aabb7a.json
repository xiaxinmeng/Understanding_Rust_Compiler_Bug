{"sha": "55bea00ab059beb1a892c190adce0fe590aabb7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTViZWEwMGFiMDU5YmViMWE4OTJjMTkwYWRjZTBmZTU5MGFhYmI3YQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-05-26T05:28:04Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-05-26T05:28:04Z"}, "message": "opt-functions.awk (var_type): New function.\n\n\t* opt-functions.awk (var_type): New function.\n\t(var_set): Use CLVC_STRING if var_type returns \"const char *\".\n\t* opth-gen.awk: Use var_type to find out the types of variables.\n\tDon't print comments above each \"extern\" definition.\n\t* optc-gen.awk: Use var_type in the same way.\n\t* opts.h (cl_var_cond): Rename to...\n\t(cl_var_type): ...this.  Add CLVC_STRING.\n\t(cl_option): Make \"flag_var\" a \"void *\" pointer.  Replace \"var_cond\"\n\twith \"var_type\".\n\t* opts.c (handle_option, option_enabled): Update after above name\n\tchange.  Cast flag_var before using it.  Handle CLVC_STRING.\n\n\t* config/alpha/alpha.h (alpha_tls_size): Delete.\n\t* config/alpha/alpha.c (alpha_tls_size, alpha_cpu_string)\n\t(alpha_tune_string, alpha_tp_string, alpha_fprm_string)\n\t(alpha_fptm_string, alpha_mlat_string): Delete.\n\t(alpha_handle_option): Don't set the above variables here.  Use the\n\tinteger argument to check the validity of -mtls-size=.\n\t* config/alpha/alpha.opt (mcpu=, mtune=, mfp-rounding-mode=)\n\t(mfp-trap-mode=, mtrap-precision=, mmemory-latency=): Add Var()s.\n\t(mtls-size=): Likewise.  Convert to a UInteger and initialize the\n\tvariable to 32.\n\n\t* config/arc/arc.c (arc_cpu_string, arc_text_string)\n\t(arc_data_string, arc_rodata_string): Delete.\n\t(arc_handle_option): Don't set the above variables here.\n\t* config/arc/arc.opt (mcpu=, mtext=, mdata=, mrodata=): Add Var()s\n\tand initialize them.\n\n\t* config/arm/arm.c (target_fpu_name, target_fpe_name)\n\t(target_float_abi_name, target_abi_name, structure_size_string)\n\t(arm_pic_register_string): Delete.\n\t(arm_handle_option): Don't set the above variables here, except\n\tin the handling of -mhard-float and -msoft-float.\n\t* config/arm/arm.opt (mabi=, mfloat-abi=, mfp=, mfpe=, mfpu=)\n\t(mpic-register=, mstructure-size-boundary=): Add Var()s.\n\n\t* config/avr/avr.c (avr_init_stack, avr_mcu_name, TARGET_HANDLE_OPTION)\n\t(avr_handle_option): Delete.\n\t* config/avr/avr.opt (mmcu=, minit-stack=): Add Var()s and initialize\n\tthem.\n\n\t* config/bfin/bfin.c (bfin_library_id): Delete.\n\t(bfin_handle_option): Don't set it.\n\t* config/bfin/bfin.opt (mshared-library-id=): Add Var().\n\n\t* config/c4x/c4x.h (c4x_rpts_cycles): Delete.\n\t* config/c4x/c4x.c (c4x_rpts_cycles): Delete.\n\t(c4x_handle_option): Don't set c4x_rpts_cycles here.\n\t* config/c4x/c4x.opt (mrpts=): Add Var().\n\n\t* config/cris/aout.h (CRIS_SUBTARGET_HANDLE_OPTION): Don't set\n\tcris_elinux_stacksize_str here.\n\t* config/cris/aout.opt (melinux-stacksize=): Add Var().\n\t* config/cris/cris.h (cris_max_stackframe_str, cris_cpu_str)\n\t(cris_tune_str, cris_elinux_stacksize_str): Delete.\n\t* config/cris/cris.c (cris_max_stackframe_str, cris_cpu_str)\n\t(cris_tune_str, cris_elinux_stacksize_str): Delete.\n\t(cris_handle_option): Don't set the above variables here.\n\t* config/cris/cris.opt (mcpu=, march=, mtune=, mmax-stackframe=)\n\t(max-stackframe=): Add Var()s.\n\n\t* config/i386/i386.h (ix86_tune_string, ix86_arch_string): Delete.\n\t* config/i386/i386.c (ix86_cmodel_string, ix86_asm_string)\n\t(ix86_tls_dialect_string, ix86_tune_string, ix86_arch_string)\n\t(ix86_fpmath_string, ix86_regparm_string, ix86_align_loops_string)\n\t(ix86_align_jumps_string, ix86_preferred_stack_boundary_string)\n\t(ix86_branch_cost_string, ix86_align_funcs_string): Delete.\n\t(ix86_handle_option): Don't set the above variables here.\n\t* config/i386/i386.opt (malign-functions=, malign-jumps=)\n\t(malign-loops=, march=, masm=, mbranch-cost=, mcmodel=, mfpmath=)\n\t(mpreferred-stack-boundary=, mregparm=, mtls-dialect=, mtune=): Add\n\tVar()s.\n\n\t* config/ia64/ia64.h (ia64_tls_size): Delete.\n\t* config/ia64/ia64.c (ia64_tls_size): Delete.\n\t(ia64_handle_option): Treat -mtls-size= as a UInteger option,\n\treading the integer argument from the \"value\" parameter.  Don't\n\tset ia64_tls_size here.\n\t* config/ia64/ia64.opt (mtls-size=): Turn into a UInteger option.\n\tAdd Var() and Init().\n\n\t* config/m32r/m32r.h (m32r_cache_flush_func): Delete.\n\t(m32r_cache_flush_trap): Delete.\n\t* config/m32r/m32r.c (m32r_cache_flush_func): Delete.\n\t(m32r_cache_flush_trap): Delete.\n\t(m32r_handle_option): Don't set the above variables when handling\n\t-mflush-func= and -mflush-trap=.\n\t* config/m32r/m32r.opt (-mflush-func=, -mflush-trap=): Add Var()s\n\tand Init()s.\n\n\t* config/mips/mips.h (mips_cache_flush_func): Delete.\n\t* config/mips/mips.c (mips_arch_string, mips_tune_string)\n\t(mips_cache_flush_func): Delete.\n\t(mips_handle_option): Don't set the above variables when handling\n\t-march=, -mtune= and -mflush-func=.\n\t* config/mips/mips.opt (march=, mflush-func=, mtune=): Add Var()s.\n\n\t* config/s390/s390.c (s390_arch_string): Delete.\n\t(s390_handle_option): Don't set it here.\n\t* config/s390/s390.opt (march=): Add Var().\n\n\t* config/sparc/sparc.h (sparc_cmodel_string): Delete.\n\t* config/sparc/sparc.c (sparc_cmodel_string): Delete.\n\t(sparc_handle_option): Don't set it here.\n\t* config/sparc/sparc.opt (mcmodel=): Add Var().\n\nFrom-SVN: r100185", "tree": {"sha": "a7580587eb22cfa0994cf37a2c34b225a64d7577", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7580587eb22cfa0994cf37a2c34b225a64d7577"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55bea00ab059beb1a892c190adce0fe590aabb7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55bea00ab059beb1a892c190adce0fe590aabb7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55bea00ab059beb1a892c190adce0fe590aabb7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55bea00ab059beb1a892c190adce0fe590aabb7a/comments", "author": null, "committer": null, "parents": [{"sha": "97471d8f5fe2ae5e17ae37af6f9945631a892214", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97471d8f5fe2ae5e17ae37af6f9945631a892214", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97471d8f5fe2ae5e17ae37af6f9945631a892214"}], "stats": {"total": 653, "additions": 240, "deletions": 413}, "files": [{"sha": "7c27ea18b6c1f5fd8d355ef08c9f2297bea25e5e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -1,3 +1,112 @@\n+2005-05-26  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* opt-functions.awk (var_type): New function.\n+\t(var_set): Use CLVC_STRING if var_type returns \"const char *\".\n+\t* opth-gen.awk: Use var_type to find out the types of variables.\n+\tDon't print comments above each \"extern\" definition.\n+\t* optc-gen.awk: Use var_type in the same way.\n+\t* opts.h (cl_var_cond): Rename to...\n+\t(cl_var_type): ...this.  Add CLVC_STRING.\n+\t(cl_option): Make \"flag_var\" a \"void *\" pointer.  Replace \"var_cond\"\n+\twith \"var_type\".\n+\t* opts.c (handle_option, option_enabled): Update after above name\n+\tchange.  Cast flag_var before using it.  Handle CLVC_STRING.\n+\t\n+\t* config/alpha/alpha.h (alpha_tls_size): Delete.\n+\t* config/alpha/alpha.c (alpha_tls_size, alpha_cpu_string)\n+\t(alpha_tune_string, alpha_tp_string, alpha_fprm_string)\n+\t(alpha_fptm_string, alpha_mlat_string): Delete.\n+\t(alpha_handle_option): Don't set the above variables here.  Use the\n+\tinteger argument to check the validity of -mtls-size=.\n+\t* config/alpha/alpha.opt (mcpu=, mtune=, mfp-rounding-mode=)\n+\t(mfp-trap-mode=, mtrap-precision=, mmemory-latency=): Add Var()s.\n+\t(mtls-size=): Likewise.  Convert to a UInteger and initialize the\n+\tvariable to 32.\n+\n+\t* config/arc/arc.c (arc_cpu_string, arc_text_string)\n+\t(arc_data_string, arc_rodata_string): Delete.\n+\t(arc_handle_option): Don't set the above variables here.\n+\t* config/arc/arc.opt (mcpu=, mtext=, mdata=, mrodata=): Add Var()s\n+\tand initialize them.\n+\n+\t* config/arm/arm.c (target_fpu_name, target_fpe_name)\n+\t(target_float_abi_name, target_abi_name, structure_size_string)\n+\t(arm_pic_register_string): Delete.\n+\t(arm_handle_option): Don't set the above variables here, except\n+\tin the handling of -mhard-float and -msoft-float.\n+\t* config/arm/arm.opt (mabi=, mfloat-abi=, mfp=, mfpe=, mfpu=)\n+\t(mpic-register=, mstructure-size-boundary=): Add Var()s.\n+\n+\t* config/avr/avr.c (avr_init_stack, avr_mcu_name, TARGET_HANDLE_OPTION)\n+\t(avr_handle_option): Delete.\n+\t* config/avr/avr.opt (mmcu=, minit-stack=): Add Var()s and initialize\n+\tthem.\n+\n+\t* config/bfin/bfin.c (bfin_library_id): Delete.\n+\t(bfin_handle_option): Don't set it.\n+\t* config/bfin/bfin.opt (mshared-library-id=): Add Var().\n+\n+\t* config/c4x/c4x.h (c4x_rpts_cycles): Delete.\n+\t* config/c4x/c4x.c (c4x_rpts_cycles): Delete.\n+\t(c4x_handle_option): Don't set c4x_rpts_cycles here.\n+\t* config/c4x/c4x.opt (mrpts=): Add Var().\n+\n+\t* config/cris/aout.h (CRIS_SUBTARGET_HANDLE_OPTION): Don't set\n+\tcris_elinux_stacksize_str here.\n+\t* config/cris/aout.opt (melinux-stacksize=): Add Var().\n+\t* config/cris/cris.h (cris_max_stackframe_str, cris_cpu_str)\n+\t(cris_tune_str, cris_elinux_stacksize_str): Delete.\n+\t* config/cris/cris.c (cris_max_stackframe_str, cris_cpu_str)\n+\t(cris_tune_str, cris_elinux_stacksize_str): Delete.\n+\t(cris_handle_option): Don't set the above variables here.\n+\t* config/cris/cris.opt (mcpu=, march=, mtune=, mmax-stackframe=)\n+\t(max-stackframe=): Add Var()s.\n+\n+\t* config/i386/i386.h (ix86_tune_string, ix86_arch_string): Delete.\n+\t* config/i386/i386.c (ix86_cmodel_string, ix86_asm_string)\n+\t(ix86_tls_dialect_string, ix86_tune_string, ix86_arch_string)\n+\t(ix86_fpmath_string, ix86_regparm_string, ix86_align_loops_string)\n+\t(ix86_align_jumps_string, ix86_preferred_stack_boundary_string)\n+\t(ix86_branch_cost_string, ix86_align_funcs_string): Delete.\n+\t(ix86_handle_option): Don't set the above variables here.\n+\t* config/i386/i386.opt (malign-functions=, malign-jumps=)\n+\t(malign-loops=, march=, masm=, mbranch-cost=, mcmodel=, mfpmath=)\n+\t(mpreferred-stack-boundary=, mregparm=, mtls-dialect=, mtune=): Add\n+\tVar()s.\n+\n+\t* config/ia64/ia64.h (ia64_tls_size): Delete.\n+\t* config/ia64/ia64.c (ia64_tls_size): Delete.\n+\t(ia64_handle_option): Treat -mtls-size= as a UInteger option,\n+\treading the integer argument from the \"value\" parameter.  Don't\n+\tset ia64_tls_size here.\n+\t* config/ia64/ia64.opt (mtls-size=): Turn into a UInteger option.\n+\tAdd Var() and Init().\n+\n+\t* config/m32r/m32r.h (m32r_cache_flush_func): Delete.\n+\t(m32r_cache_flush_trap): Delete.\n+\t* config/m32r/m32r.c (m32r_cache_flush_func): Delete.\n+\t(m32r_cache_flush_trap): Delete.\n+\t(m32r_handle_option): Don't set the above variables when handling\n+\t-mflush-func= and -mflush-trap=.\n+\t* config/m32r/m32r.opt (-mflush-func=, -mflush-trap=): Add Var()s\n+\tand Init()s.\n+\n+\t* config/mips/mips.h (mips_cache_flush_func): Delete.\n+\t* config/mips/mips.c (mips_arch_string, mips_tune_string)\n+\t(mips_cache_flush_func): Delete.\n+\t(mips_handle_option): Don't set the above variables when handling\n+\t-march=, -mtune= and -mflush-func=.\n+\t* config/mips/mips.opt (march=, mflush-func=, mtune=): Add Var()s.\n+\n+\t* config/s390/s390.c (s390_arch_string): Delete.\n+\t(s390_handle_option): Don't set it here.\n+\t* config/s390/s390.opt (march=): Add Var().\n+\n+\t* config/sparc/sparc.h (sparc_cmodel_string): Delete.\n+\t* config/sparc/sparc.c (sparc_cmodel_string): Delete.\n+\t(sparc_handle_option): Don't set it here.\n+\t* config/sparc/sparc.opt (mcmodel=): Add Var().\n+\n 2005-05-25  Roger Sayle  <roger@eyesopen.com>\n \n \t* convert.c (convert_to_integer) <POINTER_TYPE>: Avoid recursive"}, {"sha": "b02175e8aa1aae18d998b54589e31d83f7a6fabc", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 44, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -79,19 +79,6 @@ enum alpha_fp_rounding_mode alpha_fprm;\n \n enum alpha_fp_trap_mode alpha_fptm;\n \n-/* Specify bit size of immediate TLS offsets.  */\n-\n-int alpha_tls_size = 32;\n-\n-/* Strings decoded into the above options.  */\n-\n-static const char *alpha_cpu_string;\t/* -mcpu= */\n-static const char *alpha_tune_string;\t/* -mtune= */\n-static const char *alpha_tp_string;\t/* -mtrap-precision=[p|s|i] */\n-static const char *alpha_fprm_string;\t/* -mfp-rounding-mode=[n|m|c|d] */\n-static const char *alpha_fptm_string;\t/* -mfp-trap-mode=[n|u|su|sui] */\n-static const char *alpha_mlat_string;\t/* -mmemory-latency= */\n-\n /* Save information from a \"cmpxx\" operation until the branch or scc is\n    emitted.  */\n \n@@ -239,38 +226,8 @@ alpha_handle_option (size_t code, const char *arg, int value)\n       target_flags |= MASK_IEEE_CONFORMANT;\n       break;\n \n-    case OPT_mcpu_:\n-      alpha_cpu_string = arg;\n-      break;\n-\n-    case OPT_mtune_:\n-      alpha_tune_string = arg;\n-      break;\n-\n-    case OPT_mfp_rounding_mode_:\n-      alpha_fprm_string = arg;\n-      break;\n-\n-    case OPT_mfp_trap_mode_:\n-      alpha_fptm_string = arg;\n-      break;\n-\n-    case OPT_mtrap_precision_:\n-      alpha_tp_string = arg;\n-      break;\n-\n-    case OPT_mmemory_latency_:\n-      alpha_mlat_string = arg;\n-      break;\n-\n     case OPT_mtls_size_:\n-      if (strcmp (arg, \"16\") == 0)\n-\talpha_tls_size = 16;\n-      else if (strcmp (arg, \"32\") == 0)\n-\talpha_tls_size = 32;\n-      else if (strcmp (arg, \"64\") == 0)\n-\talpha_tls_size = 64;\n-      else\n+      if (value != 16 && value != 32 && value != 64)\n \terror (\"bad value %qs for -mtls-size switch\", arg);\n       break;\n     }"}, {"sha": "68508220658c7f89868b548b09a816b4bd1542b8", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -152,7 +152,6 @@ extern int target_flags;\n extern enum alpha_trap_precision alpha_tp;\n extern enum alpha_fp_rounding_mode alpha_fprm;\n extern enum alpha_fp_trap_mode alpha_fptm;\n-extern int alpha_tls_size;\n \n /* Invert the easy way to make options work.  */\n #define TARGET_FP\t(!TARGET_SOFT_FP)"}, {"sha": "d3bc904446185655b16d12fab4ccef28633f317c", "filename": "gcc/config/alpha/alpha.opt", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Falpha%2Falpha.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Falpha%2Falpha.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.opt?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -107,29 +107,29 @@ Target Report RejectNegative InverseMask(LONG_DOUBLE_128)\n Use 64-bit long double\n \n mcpu=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(alpha_cpu_string)\n Use features of and schedule given CPU\n \n mtune=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(alpha_tune_string)\n Schedule given CPU\n \n mfp-rounding-mode=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(alpha_fprm_string)\n Control the generated fp rounding mode\n \n mfp-trap-mode=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(alpha_fptm_string)\n Control the IEEE trap mode\n \n mtrap-precision=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(alpha_tp_string)\n Control the precision given to fp exceptions\n \n mmemory-latency=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(alpha_mlat_string)\n Tune expected memory latency\n \n mtls-size=\n-Target RejectNegative Joined\n+Target RejectNegative Joined UInteger Var(alpha_tls_size) Init(32)\n Specify bit size of immediate TLS offsets"}, {"sha": "1a7024530a3e295257b7dbe160a27714b28be96d", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -45,7 +45,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"target-def.h\"\n \n /* Which cpu we're compiling for.  */\n-static const char *arc_cpu_string = \"base\";\n int arc_cpu_type;\n \n /* Name of mangle string to add to symbols to separate code compiled for each\n@@ -56,12 +55,6 @@ const char *arc_mangle_cpu;\n    generate a scc or bcc insn.  */\n rtx arc_compare_op0, arc_compare_op1;\n \n-/* Name of text, data, and rodata sections, as specified on command line.\n-   Selected by -m{text,data,rodata} flags.  */\n-static const char *arc_text_string = ARC_DEFAULT_TEXT_SECTION;\n-static const char *arc_data_string = ARC_DEFAULT_DATA_SECTION;\n-static const char *arc_rodata_string = ARC_DEFAULT_RODATA_SECTION;\n-\n /* Name of text, data, and rodata sections used in varasm.c.  */\n const char *arc_text_section;\n const char *arc_data_section;\n@@ -163,24 +156,7 @@ arc_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n   switch (code)\n     {\n     case OPT_mcpu_:\n-      if (strcmp (arg, \"base\") == 0 || ARC_EXTENSION_CPU (arg))\n-\t{\n-\t  arc_cpu_string = arg;\n-\t  return true;\n-\t}\n-      return false;\n-\n-    case OPT_mtext_:\n-      arc_text_string = arg;\n-      return true;\n-\n-    case OPT_mdata_:\n-      arc_data_string = arg;\n-      return true;\n-\n-    case OPT_mrodata_:\n-      arc_rodata_string = arg;\n-      return true;\n+      return strcmp (arg, \"base\") == 0 || ARC_EXTENSION_CPU (arg);\n \n     default:\n       return true;"}, {"sha": "919550a28787ac1f450bb92e246375e3ef483485", "filename": "gcc/config/arc/arc.opt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Farc%2Farc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Farc%2Farc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.opt?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -39,17 +39,17 @@ mno-cond-exec\n Target Undocumented Report RejectNegative Mask(NO_COND_EXEC)\n \n mcpu=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(arc_cpu_string) Init(\"base\")\n -mcpu=CPU\tCompile code for ARC variant CPU\n \n mtext=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(arc_text_string) Init(ARC_DEFAULT_TEXT_SECTION)\n -mtext=SECTION\tPut functions in SECTION\n \n mdata=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(arc_data_string) Init(ARC_DEFAULT_DATA_SECTION)\n -mdata=SECTION\tPut data in SECTION\n \n mrodata=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(arc_rodata_string) Init(ARC_DEFAULT_RODATA_SECTION)\n -mrodata=SECTION\tPut read-only data in SECTION"}, {"sha": "3cfca14220e14a979331483b2c751ff07f7d5507", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -374,20 +374,7 @@ enum float_abi_type arm_float_abi;\n /* Which ABI to use.  */\n enum arm_abi_type arm_abi;\n \n-/* Set by the -mfpu=... option.  */\n-static const char * target_fpu_name = NULL;\n-\n-/* Set by the -mfpe=... option.  */\n-static const char * target_fpe_name = NULL;\n-\n-/* Set by the -mfloat-abi=... option.  */\n-static const char * target_float_abi_name = NULL;\n-\n-/* Set by the -mabi=... option.  */\n-static const char * target_abi_name = NULL;\n-\n /* Used to parse -mstructure_size_boundary command line option.  */\n-static const char * structure_size_string = NULL;\n int    arm_structure_size_boundary = DEFAULT_STRUCTURE_SIZE_BOUNDARY;\n \n /* Used for Thumb call_via trampolines.  */\n@@ -498,7 +485,6 @@ int arm_cpp_interwork = 0;\n enum machine_mode output_memory_reference_mode;\n \n /* The register number to be used for the PIC offset register.  */\n-static const char * arm_pic_register_string = NULL;\n int arm_pic_register = INVALID_REGNUM;\n \n /* Set to 1 when a return insn is output, this means that the epilogue\n@@ -801,10 +787,6 @@ arm_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n {\n   switch (code)\n     {\n-    case OPT_mabi_:\n-      target_abi_name = arg;\n-      return true;\n-\n     case OPT_march_:\n       arm_select[1].string = arg;\n       return true;\n@@ -813,35 +795,14 @@ arm_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n       arm_select[0].string = arg;\n       return true;\n \n-    case OPT_mfloat_abi_:\n-      target_float_abi_name = arg;\n-      return true;\n-\n-    case OPT_mfp_:\n-    case OPT_mfpe_:\n-      target_fpe_name = arg;\n-      return true;\n-\n-    case OPT_mfpu_:\n-      target_fpu_name = arg;\n-      return true;\n-\n     case OPT_mhard_float:\n       target_float_abi_name = \"hard\";\n       return true;\n \n-    case OPT_mpic_register_:\n-      arm_pic_register_string = arg;\n-      return true;\n-\n     case OPT_msoft_float:\n       target_float_abi_name = \"soft\";\n       return true;\n \n-    case OPT_mstructure_size_boundary_:\n-      structure_size_string = arg;\n-      return true;\n-\n     case OPT_mtune_:\n       arm_select[2].string = arg;\n       return true;"}, {"sha": "d03679a2d66ff1964e7b72bfd0e2b349f5491bf3", "filename": "gcc/config/arm/arm.opt", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -20,7 +20,7 @@\n ; 02111-1307, USA.\n \n mabi=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(target_abi_name)\n Specify an ABI\n \n mabort-on-noreturn\n@@ -73,21 +73,21 @@ Target RejectNegative Joined\n Specify the name of the target CPU\n \n mfloat-abi=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(target_float_abi_name)\n Specify if floating point hardware should be used\n \n mfp=\n-Target RejectNegative Joined Undocumented\n+Target RejectNegative Joined Undocumented Var(target_fpe_name) VarExists\n \n ;; Now ignored.\n mfpe\n Target RejectNegative Mask(FPE) Undocumented\n \n mfpe=\n-Target RejectNegative Joined Undocumented\n+Target RejectNegative Joined Undocumented Var(target_fpe_name)\n \n mfpu=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(target_fpu_name)\n Specify the name of the target floating point hardware/format\n \n mhard-float\n@@ -103,7 +103,7 @@ Target Report Mask(LONG_CALLS)\n Generate call insns as indirect calls, if necessary\n \n mpic-register=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(arm_pic_register_string)\n Specify the register to be used for PIC addressing\n \n mpoke-function-name\n@@ -123,7 +123,7 @@ Target RejectNegative\n Alias for -mfloat-abi=soft\n \n mstructure-size-boundary=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(structure_size_string)\n Specify the minimum bit alignment of structures\n \n mthumb"}, {"sha": "3de646b025d91d9208819c34d90187fe00267b31", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -48,7 +48,6 @@\n /* Maximal allowed offset for an address in the LD command */\n #define MAX_LD_OFFSET(MODE) (64 - (signed)GET_MODE_SIZE (MODE))\n \n-static bool avr_handle_option (size_t, const char *, int);\n static int avr_naked_function_p (tree);\n static int interrupt_function_p (tree);\n static int signal_function_p (tree);\n@@ -111,12 +110,6 @@ static int epilogue_size;\n /* Size of all jump tables in the current function, in words.  */\n static int jump_tables_size;\n \n-/* Initial stack value specified by the `-minit-stack=' option */\n-static const char *avr_init_stack = \"__stack\";\n-\n-/* Default MCU name */\n-static const char *avr_mcu_name = \"avr2\";\n-\n /* Preprocessor macros to define depending on MCU type.  */\n const char *avr_base_arch_macro;\n const char *avr_extra_arch_macro;\n@@ -245,8 +238,6 @@ int avr_case_values_threshold = 30000;\n #define TARGET_ATTRIBUTE_TABLE avr_attribute_table\n #undef TARGET_ASM_FUNCTION_RODATA_SECTION\n #define TARGET_ASM_FUNCTION_RODATA_SECTION default_no_function_rodata_section\n-#undef TARGET_HANDLE_OPTION\n-#define TARGET_HANDLE_OPTION avr_handle_option\n #undef TARGET_INSERT_ATTRIBUTES\n #define TARGET_INSERT_ATTRIBUTES avr_insert_attributes\n #undef TARGET_SECTION_TYPE_FLAGS\n@@ -266,26 +257,6 @@ int avr_case_values_threshold = 30000;\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n-/* Implement TARGET_HANDLE_OPTION.  */\n-\n-static bool\n-avr_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n-{\n-  switch (code)\n-    {\n-    case OPT_minit_stack_:\n-      avr_init_stack = arg;\n-      return true;\n-\n-    case OPT_mmcu_:\n-      avr_mcu_name = arg;\n-      return true;\n-\n-    default:\n-      return true;\n-    }\n-}\n-\n void\n avr_override_options (void)\n {"}, {"sha": "303816a24e980895003de27d96a176140c21805f", "filename": "gcc/config/avr/avr.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Favr%2Favr.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Favr%2Favr.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.opt?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -24,14 +24,14 @@ Target Report Mask(CALL_PROLOGUES)\n Use subroutines for function prologues and epilogues\n \n mmcu=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(avr_mcu_name) Init(\"avr2\")\n -mmcu=MCU\tSelect the target MCU\n \n mdeb\n Target Report Undocumented Mask(ALL_DEBUG)\n \n minit-stack=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(avr_init_stack) Init(\"__stack\")\n -minit-stack=STACK\tUse STACK as the initial value of the stack pointer\n \n mint8"}, {"sha": "e20a6c3991d3739a404817d3f1f976000444a4fd", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -67,8 +67,6 @@ const char *byte_reg_names[]   =  BYTE_REGISTER_NAMES;\n \n static int arg_regs[] = FUNCTION_ARG_REGISTERS;\n \n-/* The value passed to -mshared-library-id=.  */\n-static int bfin_library_id;\n /* Nonzero if -mshared-library-id was given.  */\n static int bfin_lib_id_given;\n \n@@ -1722,8 +1720,6 @@ bfin_handle_option (size_t code, const char *arg, int value)\n       if (value > MAX_LIBRARY_ID)\n \terror (\"-mshared-library-id=%s is not between 0 and %d\",\n \t       arg, MAX_LIBRARY_ID);\n-      else\n-\tbfin_library_id = value;\n       bfin_lib_id_given = 1;\n       return true;\n "}, {"sha": "4aace2f7182685101bcb1a3d5bc37b815e47f665", "filename": "gcc/config/bfin/bfin.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fbfin%2Fbfin.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fbfin%2Fbfin.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.opt?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -36,5 +36,5 @@ Target Report Mask(ID_SHARED_LIBRARY)\n Enabled ID based shared library\n \n mshared-library-id=\n-Target RejectNegative Joined UInteger\n+Target RejectNegative Joined UInteger Var(bfin_library_id)\n ID of shared library to build"}, {"sha": "110dfcc00aae84e793f867a1e1198158c334c5c9", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -153,7 +153,6 @@ enum machine_mode c4x_caller_save_map[FIRST_PSEUDO_REGISTER] =\n rtx c4x_compare_op0;\n rtx c4x_compare_op1;\n \n-int c4x_rpts_cycles = 0;\t/* Max. cycles for RPTS.  */\n int c4x_cpu_version = 40;\t/* CPU version C30/31/32/33/40/44.  */\n \n /* Pragma definitions.  */\n@@ -291,10 +290,6 @@ c4x_handle_option (size_t code, const char *arg, int value)\n \t}\n       return false;\n \n-    case OPT_mrpts_:\n-      c4x_rpts_cycles = value;\n-      return true;\n-\n     default:\n       return true;\n     }"}, {"sha": "b9fd452b4ac495b68a18c20808810595f27d535a", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -121,7 +121,6 @@\n    RPTS blocks interrupts.  */\n \n \n-extern int c4x_rpts_cycles;\t        /* Max cycles for RPTS.  */\n extern int c4x_cpu_version;\t\t/* Cpu version C30/31/32/33/40/44.  */\n \n #define TARGET_INLINE\t\t(! optimize_size) /* Inline MPYI.  */"}, {"sha": "43288463575affd046bf58c5b4077b6c6ee6d2ad", "filename": "gcc/config/c4x/c4x.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fc4x%2Fc4x.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fc4x%2Fc4x.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.opt?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -128,7 +128,7 @@ Target Report Mask(RPTS)\n Enable use of RTPS instruction\n \n mrpts=\n-Target RejectNegative Joined UInteger\n+Target RejectNegative Joined UInteger Var(c4x_rpts_cycles)\n -mrpts=N\tSet the maximum number of iterations for RPTS to N\n \n msmall"}, {"sha": "f39676cdaa59567757a8e1e66c878d3dfa8014b0", "filename": "gcc/config/cris/aout.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fcris%2Faout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fcris%2Faout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Faout.h?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -94,10 +94,6 @@ Boston, MA 02111-1307, USA.  */\n \t\t+ MASK_ALIGN_BY_32);\t\t\t\\\n \t  break;\t\t\t\t\t\\\n \t\t\t\t\t\t\t\\\n-\tcase OPT_melinux_stacksize_:\t\t\t\\\n-\t  cris_elinux_stacksize_str = (ARG);\t\t\\\n-\t  break;\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\\\n \tdefault:\t\t\t\t\t\\\n \t  break;\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\\"}, {"sha": "b821d576fa0c76ff9b3ea13f114d3dc8b9365406", "filename": "gcc/config/cris/aout.opt", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fcris%2Faout.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fcris%2Faout.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Faout.opt?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -27,6 +27,8 @@ melinux\n Target Report RejectNegative\n Compile for the MMU-less Etrax 100-based elinux system\n \n+;; We don't parse it currently; it's just passed on to the linker.\n+;; We might want to do something here someday.\n melinux-stacksize=\n-Target Report RejectNegative Joined\n+Target Report RejectNegative Joined Var(cris_elinux_stacksize_str)\n -melinux-stacksize=SIZE\tFor elinux, request a specified stack-size for this program"}, {"sha": "0bc8b8cf8aaa8587f499b4235458c8a1acc97cd5", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -132,18 +132,6 @@ static tree cris_md_asm_clobbers (tree, tree, tree);\n \n static bool cris_handle_option (size_t, const char *, int);\n \n-/* This is the argument from the \"-max-stack-stackframe=\" option.  */\n-const char *cris_max_stackframe_str;\n-\n-/* This is the argument from the \"-march=\" option.  */\n-const char *cris_cpu_str;\n-\n-/* This is the argument from the \"-mtune=\" option.  */\n-const char *cris_tune_str;\n-\n-/* This is the argument from the \"-melinux-stacksize=\" option.  */\n-const char *cris_elinux_stacksize_str;\n-\n /* This is the parsed result of the \"-max-stack-stackframe=\" option.  If\n    it (still) is zero, then there was no such option given.  */\n int cris_max_stackframe = 0;\n@@ -2073,20 +2061,6 @@ cris_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n \t     + MASK_DATA_ALIGN);\n       break;\n \n-    case OPT_max_stackframe_:\n-    case OPT_mmax_stackframe_:\n-      cris_max_stackframe_str = arg;\n-      break;\n-\n-    case OPT_march_:\n-    case OPT_mcpu_:\n-      cris_cpu_str = arg;\n-      break;\n-\n-    case OPT_mtune_:\n-      cris_tune_str = arg;\n-      break;\n-\n     default:\n       break;\n     }"}, {"sha": "4f998d05fa705f2c24ffaf95daaece9d8316857b", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -75,23 +75,9 @@ Boston, MA 02111-1307, USA.  */\n   ((MODE) != BLKmode ? GET_MODE_SIZE (MODE)\t\\\n    : (unsigned) int_size_in_bytes (TYPE))\n \n-/* Check for max allowed stackframe. A \"const char *\" to be parsed.  */\n-extern const char *cris_max_stackframe_str;\n-\n-/* Which CPU version this is.  A \"const char *\" to be parsed.  */\n-extern const char *cris_cpu_str;\n-\n /* Which CPU version this is.  The parsed and adjusted cris_cpu_str.  */\n extern int cris_cpu_version;\n \n-/* Which CPU version to tune for.  A \"const char *\" to be parsed.  */\n-extern const char *cris_tune_str;\n-\n-/* The argument to \"-melinux-stacksize=\".  We don't parse it currently;\n-   it's just passed on to the linker.  We might want to do something\n-   here someday.  */\n-extern const char *cris_elinux_stacksize_str;\n-\n /* Changing the order used to be necessary to put the fourth __make_dp\n    argument (a DImode parameter) in registers, to fit with the libfunc\n    parameter passing scheme used for intrinsic functions.  FIXME: Check"}, {"sha": "c828f61f3b0991d5e6fe6605cecec9cf98417218", "filename": "gcc/config/cris/cris.opt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fcris%2Fcris.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fcris%2Fcris.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.opt?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -159,22 +159,22 @@ Target Report RejectNegative\n Override -mbest-lib-options\n \n mcpu=\n-Target Report RejectNegative Joined Undocumented\n+Target Report RejectNegative Joined Undocumented Var(cris_cpu_str)\n \n march=\n-Target Report RejectNegative Joined\n+Target Report RejectNegative Joined Var(cris_cpu_str) VarExists\n -march=ARCH\tGenerate code for the specified chip or CPU version\n \n mtune=\n-Target Report RejectNegative Joined\n+Target Report RejectNegative Joined Var(cris_tune_str)\n -mtune=ARCH\tTune alignment for the specified chip or CPU version\n \n mmax-stackframe=\n-Target Report RejectNegative Joined\n+Target Report RejectNegative Joined Var(cris_max_stackframe_str)\n -mmax-stackframe=SIZE\tWarn when a stackframe is larger than the specified size\n \n max-stackframe=\n-Target Report RejectNegative Joined Undocumented\n+Target Report RejectNegative Joined Undocumented Var(cris_max_stackframe_str) VarExists\n \n ; TARGET_SVINTO: Currently this just affects alignment.  FIXME:\n ; Redundant with TARGET_ALIGN_BY_32, or put machine stuff here?"}, {"sha": "55d0069c5bafb37af039aea5d739b714799e45dc", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 77, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -787,15 +787,11 @@ struct ix86_frame\n   bool save_regs_using_mov;\n };\n \n-/* Code model option as passed by user.  */\n-static const char *ix86_cmodel_string;\n-/* Parsed value.  */\n+/* Code model option.  */\n enum cmodel ix86_cmodel;\n /* Asm dialect.  */\n-static const char *ix86_asm_string;\n enum asm_dialect ix86_asm_dialect = ASM_ATT;\n /* TLS dialext.  */\n-static const char *ix86_tls_dialect_string;\n enum tls_dialect ix86_tls_dialect = TLS_DIALECT_GNU;\n \n /* Which unit we are generating floating point math for.  */\n@@ -806,40 +802,17 @@ enum processor_type ix86_tune;\n /* Which instruction set architecture to use.  */\n enum processor_type ix86_arch;\n \n-/* Strings to hold which cpu and instruction set architecture  to use.  */\n-const char *ix86_tune_string;\t\t/* for -mtune=<xxx> */\n-const char *ix86_arch_string;\t\t/* for -march=<xxx> */\n-static const char *ix86_fpmath_string;\t/* for -mfpmath=<xxx> */\n-\n-/* # of registers to use to pass arguments.  */\n-static const char *ix86_regparm_string;\n-\n /* true if sse prefetch instruction is not NOOP.  */\n int x86_prefetch_sse;\n \n /* ix86_regparm_string as a number */\n static int ix86_regparm;\n \n-/* Alignment to use for loops and jumps:  */\n-\n-/* Power of two alignment for loops.  */\n-static const char *ix86_align_loops_string;\n-\n-/* Power of two alignment for non-loop jumps.  */\n-static const char *ix86_align_jumps_string;\n-\n-/* Power of two alignment for stack boundary in bytes.  */\n-static const char *ix86_preferred_stack_boundary_string;\n-\n /* Preferred alignment for stack boundary in bits.  */\n unsigned int ix86_preferred_stack_boundary;\n \n /* Values 1-5: see jump.c */\n int ix86_branch_cost;\n-static const char *ix86_branch_cost_string;\n-\n-/* Power of two alignment for functions.  */\n-static const char *ix86_align_funcs_string;\n \n /* Prefix built by ASM_GENERATE_INTERNAL_LABEL.  */\n char internal_label_prefix[16];\n@@ -1107,7 +1080,7 @@ struct gcc_target targetm = TARGET_INITIALIZER;\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n-ix86_handle_option (size_t code, const char *arg, int value)\n+ix86_handle_option (size_t code, const char *arg ATTRIBUTE_UNUSED, int value)\n {\n   switch (code)\n     {\n@@ -1119,38 +1092,6 @@ ix86_handle_option (size_t code, const char *arg, int value)\n \t}\n       return true;\n \n-    case OPT_malign_functions_:\n-      ix86_align_funcs_string = arg;\n-      return true;\n-\n-    case OPT_malign_jumps_:\n-      ix86_align_jumps_string = arg;\n-      return true;\n-\n-    case OPT_malign_loops_:\n-      ix86_align_loops_string = arg;\n-      return true;\n-\n-    case OPT_march_:\n-      ix86_arch_string = arg;\n-      return true;\n-\n-    case OPT_masm_:\n-      ix86_asm_string = arg;\n-      return true;\n-\n-    case OPT_mbranch_cost_:\n-      ix86_branch_cost_string = arg;\n-      return true;\n-\n-    case OPT_mcmodel_:\n-      ix86_cmodel_string = arg;\n-      return true;\n-\n-    case OPT_mfpmath_:\n-      ix86_fpmath_string = arg;\n-      return true;\n-\n     case OPT_mmmx:\n       if (!value)\n \t{\n@@ -1159,14 +1100,6 @@ ix86_handle_option (size_t code, const char *arg, int value)\n \t}\n       return true;\n \n-    case OPT_mpreferred_stack_boundary_:\n-      ix86_preferred_stack_boundary_string = arg;\n-      return true;\n-\n-    case OPT_mregparm_:\n-      ix86_regparm_string = arg;\n-      return true;\n-\n     case OPT_msse:\n       if (!value)\n \t{\n@@ -1183,14 +1116,6 @@ ix86_handle_option (size_t code, const char *arg, int value)\n \t}\n       return true;\n \n-    case OPT_mtls_dialect_:\n-      ix86_tls_dialect_string = arg;\n-      return true;\n-\n-    case OPT_mtune_:\n-      ix86_tune_string = arg;\n-      return true;\n-\n     default:\n       return true;\n     }"}, {"sha": "0a9df5a9ec463c6fa98b35e800630ec5c58c83d6", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -2132,10 +2132,7 @@ enum processor_type\n };\n \n extern enum processor_type ix86_tune;\n-extern const char *ix86_tune_string;\n-\n extern enum processor_type ix86_arch;\n-extern const char *ix86_arch_string;\n \n enum fpmath_unit\n {"}, {"sha": "64337d49e469b77031006b1a37b77d89aebba286", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -60,35 +60,35 @@ Target Report Mask(ALIGN_DOUBLE)\n Align some doubles on dword boundary\n \n malign-functions=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(ix86_align_funcs_string)\n Function starts are aligned to this power of 2\n \n malign-jumps=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(ix86_align_jumps_string)\n Jump targets are aligned to this power of 2\n \n malign-loops=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(ix86_align_loops_string)\n Loop code aligned to this power of 2\n \n malign-stringops\n Target RejectNegative Report InverseMask(NO_ALIGN_STRINGOPS, ALIGN_STRINGOPS)\n Align destination of the string operations\n \n march=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(ix86_arch_string)\n Generate code for given CPU\n \n masm=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(ix86_asm_string)\n Use given assembler dialect\n \n mbranch-cost=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(ix86_branch_cost_string)\n Branches are this expensive (1-5, arbitrary units)\n \n mcmodel=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(ix86_cmodel_string)\n Use given x86-64 code model\n \n mdebug-addr\n@@ -106,7 +106,7 @@ Target Report Mask(FLOAT_RETURNS)\n Return values of functions in FPU registers\n \n mfpmath=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(ix86_fpmath_string)\n Generate floating point mathematics using given instruction set\n \n mhard-float\n@@ -158,7 +158,7 @@ Target RejectNegative Undocumented\n ;; Deprecated\n \n mpreferred-stack-boundary=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(ix86_preferred_stack_boundary_string)\n Attempt to keep stack aligned to this power of 2\n \n mpush-args\n@@ -170,7 +170,7 @@ Target RejectNegative Report InverseMask(NO_RED_ZONE, RED_ZONE)\n Use red-zone in the x86-64 code\n \n mregparm=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(ix86_regparm_string)\n Number of registers used to pass integer arguments\n \n mrtd\n@@ -202,15 +202,15 @@ Target Report Mask(STACK_PROBE)\n Enable stack probing\n \n mtls-dialect=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(ix86_tls_dialect_string)\n Use given thread-local storage dialect\n \n mtls-direct-seg-refs\n Target Report Mask(TLS_DIRECT_SEG_REFS)\n Use direct references against %gs when accessing tls data\n \n mtune=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(ix86_tune_string)\n Schedule code for given CPU\n \n ;; Support Athlon 3Dnow builtins"}, {"sha": "69a7f1e44d45c112dc66867e9e4b44e6002935f9", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -98,10 +98,6 @@ static const char * const ia64_local_reg_names[80] =\n static const char * const ia64_output_reg_names[8] =\n { \"out0\", \"out1\", \"out2\", \"out3\", \"out4\", \"out5\", \"out6\", \"out7\" };\n \n-/* Determines whether we use adds, addl, or movl to generate our\n-   TLS immediate offsets.  */\n-int ia64_tls_size = 22;\n-\n /* Which cpu are we scheduling for.  */\n enum processor_type ia64_tune = PROCESSOR_ITANIUM2;\n \n@@ -4822,7 +4818,7 @@ fix_range (const char *const_str)\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n-ia64_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n+ia64_handle_option (size_t code, const char *arg, int value)\n {\n   switch (code)\n     {\n@@ -4831,15 +4827,9 @@ ia64_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n       return true;\n \n     case OPT_mtls_size_:\n-      {\n-\tchar *end;\n-\tunsigned long tmp = strtoul (arg, &end, 10);\n-\tif (*end || (tmp != 14 && tmp != 22 && tmp != 64))\n-\t  error (\"bad value %<%s%> for -mtls-size= switch\", arg);\n-\telse\n-\t  ia64_tls_size = tmp;\n-\treturn true;\n-      }\n+      if (value != 14 && value != 22 && value != 64)\n+\terror (\"bad value %<%s%> for -mtls-size= switch\", arg);\n+      return true;\n \n     case OPT_mtune_:\n       {"}, {"sha": "28a8637defd9401a17ad3ea95ee5bc3e1b6e5c2e", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -67,7 +67,6 @@ extern unsigned int ia64_section_threshold;\n #define TARGET_HAVE_TLS true\n #endif\n \n-extern int ia64_tls_size;\n #define TARGET_TLS14\t\t(ia64_tls_size == 14)\n #define TARGET_TLS22\t\t(ia64_tls_size == 22)\n #define TARGET_TLS64\t\t(ia64_tls_size == 64)"}, {"sha": "25a2cc6a91b272ef445427344c9900c2db3ad91d", "filename": "gcc/config/ia64/ia64.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fia64%2Fia64.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fia64%2Fia64.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.opt?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -89,7 +89,7 @@ Target RejectNegative Joined\n Specify range of registers to make fixed\n \n mtls-size=\n-Target RejectNegative Joined\n+Target RejectNegative Joined UInteger Var(ia64_tls_size) Init(22)\n Specify bit size of immediate TLS offsets\n \n mtune="}, {"sha": "c6c682de97adca4bf766daf319d6d6ff10eece17", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -64,18 +64,6 @@ enum m32r_sdata m32r_sdata = M32R_SDATA_DEFAULT;\n /* For string literals, etc.  */\n #define LIT_NAME_P(NAME) ((NAME)[0] == '*' && (NAME)[1] == '.')\n \n-/* Cache-flush support. Cache-flush is used at trampoline.\n-   Default cache-flush is \"trap 12\".\n-    default cache-flush function is \"_flush_cache\"  (CACHE_FLUSH_FUNC)\n-    default cache-flush trap-interrupt number is 12 (CACHE_FLUSH_TRAP)\n-   You can change how to generate code of cache-flush with following options.\n-   -mflush-func=FLUSH-FUNC-NAME\n-   -mno-flush-func              (sets m32r_cache_flush_func to NULL)\n-   -mfluch-trap=TRAP-NUMBER\n-   -mno-flush-trap.             (sets m32r_cache_flush_trap to -1).  */\n-const char *m32r_cache_flush_func = CACHE_FLUSH_FUNC;\n-int m32r_cache_flush_trap = CACHE_FLUSH_TRAP;\n-\n /* Forward declaration.  */\n static bool  m32r_handle_option (size_t, const char *, int);\n static void  init_reg_tables (void);\n@@ -188,17 +176,12 @@ m32r_handle_option (size_t code, const char *arg, int value)\n \treturn false;\n       return true;\n \n-    case OPT_mflush_func_:\n-      m32r_cache_flush_func = arg;\n-      return true;\n-\n     case OPT_mno_flush_func:\n       m32r_cache_flush_func = NULL;\n       return true;\n \n     case OPT_mflush_trap_:\n-      m32r_cache_flush_trap = value;\n-      return m32r_cache_flush_trap <= 15;\n+      return value <= 15;\n \n     case OPT_mno_flush_trap:\n       m32r_cache_flush_trap = -1;"}, {"sha": "5747c4491e2e6d00ed6f0d55d466cbe633c7d2f9", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -209,10 +209,6 @@\n #define TARGET_CPU_DEFAULT 0\n #endif\n \n-/* Cache-flush support.  */\n-extern const char * m32r_cache_flush_func;\n-extern int m32r_cache_flush_trap;\n-\n /* Code Models\n \n    Code models are used to select between two choices of two separate"}, {"sha": "85fb8ede1da8a034e90a10b966f20ed612a0ad16", "filename": "gcc/config/m32r/m32r.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fm32r%2Fm32r.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fm32r%2Fm32r.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.opt?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -48,11 +48,11 @@ Target Mask(DEBUG)\n Display compile time statistics\n \n mflush-func=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(m32r_cache_flush_func) Init(CACHE_FLUSH_FUNC)\n Specify cache flush function\n \n mflush-trap=\n-Target RejectNegative Joined UInteger\n+Target RejectNegative Joined UInteger Var(m32r_cache_flush_trap) Init(CACHE_FLUSH_TRAP)\n Specify cache flush trap number\n \n missue-rate=1"}, {"sha": "9ddcf4d72a04b756de328773d3b5edabffd8a213", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -555,15 +555,9 @@ int mips_abi = MIPS_ABI_DEFAULT;\n    should arrange to call mips32 hard floating point code.  */\n int mips16_hard_float;\n \n-/* The arguments passed to -march and -mtune.  */\n-static const char *mips_arch_string;\n-static const char *mips_tune_string;\n-\n /* The architecture selected by -mipsN.  */\n static const struct mips_cpu_info *mips_isa_info;\n \n-const char *mips_cache_flush_func = CACHE_FLUSH_FUNC;\n-\n /* If TRUE, we split addresses into their high and low parts in the RTL.  */\n int mips_split_addresses;\n \n@@ -4215,21 +4209,13 @@ mips_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n       return true;\n \n     case OPT_march_:\n-      mips_arch_string = arg;\n-      return mips_parse_cpu (arg) != 0;\n-\n     case OPT_mtune_:\n-      mips_tune_string = arg;\n       return mips_parse_cpu (arg) != 0;\n \n     case OPT_mips:\n       mips_isa_info = mips_parse_cpu (ACONCAT ((\"mips\", arg, NULL)));\n       return mips_isa_info != 0;\n \n-    case OPT_mflush_func_:\n-      mips_cache_flush_func = arg;\n-      return true;\n-\n     case OPT_mno_flush_func:\n       mips_cache_flush_func = NULL;\n       return true;"}, {"sha": "9de422d95d11298981387e81a870f37b8459cf17", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -105,7 +105,6 @@ extern enum processor_type mips_tune;   /* which cpu to schedule for */\n extern int mips_isa;\t\t\t/* architectural level */\n extern int mips_abi;\t\t\t/* which ABI to use */\n extern int mips16_hard_float;\t\t/* mips16 without -msoft-float */\n-extern const char *mips_cache_flush_func;/* for -mflush-func= and -mno-flush-func */\n extern const struct mips_cpu_info mips_cpu_info_table[];\n extern const struct mips_cpu_info *mips_arch_info;\n extern const struct mips_cpu_info *mips_tune_info;"}, {"sha": "3e02896297366aa337ad888d08742cd030e8b9a2", "filename": "gcc/config/mips/mips.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fmips%2Fmips.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fmips%2Fmips.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.opt?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -32,7 +32,7 @@ Target Report Var(TARGET_MAD)\n Use PMC-style 'mad' instructions\n \n march=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(mips_arch_string)\n -march=ISA\tGenerate code for the given ISA\n \n mbranch-likely\n@@ -114,7 +114,7 @@ Target Report RejectNegative Mask(FLOAT64)\n Use 64-bit floating-point registers\n \n mflush-func=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(mips_cache_flush_func) Init(CACHE_FLUSH_FUNC)\n -mflush-func=FUNC\tUse FUNC to flush the cache before calling stack trampolines\n \n mfused-madd\n@@ -198,7 +198,7 @@ Target Report Var(TARGET_SYM32)\n Assume all symbols have 32-bit values\n \n mtune=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(mips_tune_string)\n -mtune=PROCESSOR\tOptimize the output for PROCESSOR\n \n muninit-const-in-rodata"}, {"sha": "218432078fc23db14d7b6c496a4147e1b06f7281", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -186,7 +186,6 @@ enum processor_flags s390_tune_flags;\n /* Which instruction set architecture to use.  */\n enum processor_type s390_arch;\n enum processor_flags s390_arch_flags;\n-static const char *s390_arch_string;\n \n HOST_WIDE_INT s390_warn_framesize = 0;\n HOST_WIDE_INT s390_stack_size = 0;\n@@ -1128,7 +1127,6 @@ s390_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n   switch (code)\n     {\n     case OPT_march_:\n-      s390_arch_string = arg;\n       return s390_handle_arch_option (arg, &s390_arch, &s390_arch_flags);\n \n     case OPT_mstack_guard_:"}, {"sha": "e020e63f221388dc0e3395ef256a40b2d38e6082", "filename": "gcc/config/s390/s390.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fs390%2Fs390.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fs390%2Fs390.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.opt?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -28,7 +28,7 @@ Target Report RejectNegative Mask(64BIT)\n 64 bit ABI\n \n march=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(s390_arch_string)\n Generate code for given CPU\n \n mbackchain"}, {"sha": "e5e6430a661cb1b45a6dd8cb2778c0a1fa419b35", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -370,9 +370,6 @@ const struct attribute_spec sparc_attribute_table[];\n \f\n /* Option handling.  */\n \n-/* Code model option as passed by user.  */\n-const char *sparc_cmodel_string;\n-\n /* Parsed value.  */\n enum cmodel sparc_cmodel;\n \n@@ -540,10 +537,6 @@ sparc_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n     case OPT_mtune_:\n       sparc_select[2].string = arg;\n       break;\n-\n-    case OPT_mcmodel_:\n-      sparc_cmodel_string = arg;\n-      break;\n     }\n \n   return true;"}, {"sha": "aa3752c9d6f4c0655f3100979e34f3305f92f430", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -191,8 +191,6 @@ enum cmodel {\n   CM_EMBMEDANY\n };\n \n-/* Value of -mcmodel specified by user.  */\n-extern const char *sparc_cmodel_string;\n /* One of CM_FOO.  */\n extern enum cmodel sparc_cmodel;\n "}, {"sha": "6bee67d8d25fcd4e0501aafd8a602e937930a891", "filename": "gcc/config/sparc/sparc.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.opt?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -96,7 +96,7 @@ Target RejectNegative Joined\n Schedule code for given CPU\n \n mcmodel=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(sparc_cmodel_string)\n Use given SPARC-V9 code model\n \n "}, {"sha": "b4ada5bebdb106500e656d8004e01fab9598dbe7", "filename": "gcc/doc/options.texi", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fdoc%2Foptions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fdoc%2Foptions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptions.texi?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -121,12 +121,29 @@ will check and convert the argument before passing it to the relevant\n option handler.\n \n @item Var(@var{var})\n-The option controls an integer variable @var{var}.  If the option has\n-the @code{UInteger} property, the option parser will set @var{var} to\n-the value of the user-specified argument.  Otherwise the option is\n-assumed to be an on/off switch that is active when @var{var} is nonzero.\n-In this case, the option parser will set @var{var} to 1 when the positive\n-form of the option is used and 0 when the ``no-'' form is used.\n+The state of this option should be stored in variable @var{var}.\n+The way that the state is stored depends on the type of option:\n+\n+@itemize @bullet\n+@item\n+If the option uses the @code{Mask} or @code{InverseMask} properties,\n+@var{var} is the integer variable that contains the mask.\n+\n+@item\n+If the option is a normal on/off switch, @var{var} is an integer\n+variable that is nonzero when the option is enabled.  The options\n+parser will set the variable to 1 when the positive form of the\n+option is used and 0 when the ``no-'' form is used.\n+\n+@item\n+If the option takes an argument and has the @code{UInteger} property,\n+@var{var} is an integer variable that stores the value of the argument.\n+\n+@item\n+Otherwise, if the option takes an argument, @var{var} is a pointer to\n+the argument string.  The pointer will be null if the argument is optional\n+and wasn't given.\n+@end itemize\n \n The option-processing script will usually declare @var{var} in\n @file{options.c} and leave it to be zero-initialized at start-up time."}, {"sha": "9097dfb8d9631bfef50c28c30e968245ea1483f3", "filename": "gcc/opt-functions.awk", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fopt-functions.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fopt-functions.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-functions.awk?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -89,6 +89,17 @@ function var_name(flags)\n \treturn nth_arg(0, opt_args(\"Var\", flags))\n }\n \n+# Return the type of variable that should be associated with the given flags.\n+function var_type(flags)\n+{\n+\tif (!flag_set_p(\"Joined.*\", flags))\n+\t\treturn \"int \"\n+\telse if (flag_set_p(\"UInteger\", flags))\n+\t\treturn \"int \"\n+\telse\n+\t\treturn \"const char *\"\n+}\n+\n # Given that an option has flags FLAGS, return an initializer for the\n # \"var_cond\" and \"var_value\" fields of its cl_options[] entry.\n function var_set(flags)\n@@ -109,9 +120,11 @@ function var_set(flags)\n \t\tvn = var_name(flags);\n \t\tif (vn)\n \t\t\treturn \"CLVC_BIT_CLEAR, OPTION_MASK_\" s\n-\t\t\t  else\n+\t\telse\n \t\t\treturn \"CLVC_BIT_CLEAR, MASK_\" s\n \t}\n+\tif (var_type(flags) == \"const char *\")\n+\t\treturn \"CLVC_STRING, 0\"\n \treturn \"CLVC_BOOLEAN, 0\"\n }\n "}, {"sha": "a71eb2a05b0192236e657dad88e96558fe183ca1", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -77,8 +77,10 @@ for (i = 0; i < n_opts; i++) {\n \telse if (name in var_seen)\n \t\tcontinue;\n \n-\tprintf (\"/* Set by -%s.\\n   %s  */\\nint %s%s;\\n\\n\",\n-\t    opts[i], help[i], name,init)\n+\tprint \"/* Set by -\" opts[i] \".\"\n+\tprint \"   \" help[i] \"  */\"\n+\tprint var_type(flags[i]) name init \";\"\n+\tprint \"\"\n \n \tvar_seen[name] = 1;\n }"}, {"sha": "1a63bc90f63ad9427694ba4f9572e22cfd7b36eb", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -68,12 +68,9 @@ for (i = 0; i < n_opts; i++) {\n \tif (name == \"\")\n \t\tcontinue;\n \n-\tprint \"/* Set by -\" opts[i] \".\"\n-\tprint \"   \" help[i] \"  */\"\n-\tprint \"extern int \" name \";\"\n-\tprint \"\"\n-\n-    }\n+\tprint \"extern \" var_type(flags[i]) name \";\"\n+}\n+print \"\"\n \n for (i = 0; i < n_opts; i++) {\n \tname = opt_args(\"Mask\", flags[i])"}, {"sha": "36d272c4097760db959f1a7086c3914a51638bd3", "filename": "gcc/opts.c", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -379,25 +379,31 @@ handle_option (const char **argv, unsigned int lang_mask)\n     }\n \n   if (option->flag_var)\n-    switch (option->var_cond)\n+    switch (option->var_type)\n       {\n       case CLVC_BOOLEAN:\n-\t*option->flag_var = value;\n+\t*(int *) option->flag_var = value;\n \tbreak;\n \n       case CLVC_EQUAL:\n-\t*option->flag_var = value ? option->var_value : !option->var_value;\n+\t*(int *) option->flag_var = (value\n+\t\t\t\t     ? option->var_value\n+\t\t\t\t     : !option->var_value);\n \tbreak;\n \n       case CLVC_BIT_CLEAR:\n       case CLVC_BIT_SET:\n-\tif ((value != 0) == (option->var_cond == CLVC_BIT_SET))\n-\t  *option->flag_var |= option->var_value;\n+\tif ((value != 0) == (option->var_type == CLVC_BIT_SET))\n+\t  *(int *) option->flag_var |= option->var_value;\n \telse\n-\t  *option->flag_var &= ~option->var_value;\n+\t  *(int *) option->flag_var &= ~option->var_value;\n \tif (option->flag_var == &target_flags)\n \t  target_flags_explicit |= option->var_value;\n \tbreak;\n+\n+      case CLVC_STRING:\n+\t*(const char **) option->flag_var = arg;\n+\tbreak;\n       }\n   \n   if (option->flags & lang_mask)\n@@ -1417,19 +1423,22 @@ option_enabled (int opt_idx)\n {\n   const struct cl_option *option = &(cl_options[opt_idx]);\n   if (option->flag_var)\n-    switch (option->var_cond)\n+    switch (option->var_type)\n       {\n       case CLVC_BOOLEAN:\n-\treturn *option->flag_var != 0;\n+\treturn *(int *) option->flag_var != 0;\n \n       case CLVC_EQUAL:\n-\treturn *option->flag_var == option->var_value;\n+\treturn *(int *) option->flag_var == option->var_value;\n \n       case CLVC_BIT_CLEAR:\n-\treturn (*option->flag_var & option->var_value) == 0;\n+\treturn (*(int *) option->flag_var & option->var_value) == 0;\n \n       case CLVC_BIT_SET:\n-\treturn (*option->flag_var & option->var_value) != 0;\n+\treturn (*(int *) option->flag_var & option->var_value) != 0;\n+\n+      case CLVC_STRING:\n+\tbreak;\n       }\n   return -1;\n }"}, {"sha": "1794f7b82cc16e1bd37543ec2f8bd5c532faea63", "filename": "gcc/opts.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bea00ab059beb1a892c190adce0fe590aabb7a/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=55bea00ab059beb1a892c190adce0fe590aabb7a", "patch": "@@ -22,7 +22,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define GCC_OPTS_H\n \n /* Specifies how a switch's VAR_VALUE relates to its FLAG_VAR.  */\n-enum cl_var_cond {\n+enum cl_var_type {\n   /* The switch is enabled when FLAG_VAR is nonzero.  */\n   CLVC_BOOLEAN,\n \n@@ -33,7 +33,11 @@ enum cl_var_cond {\n   CLVC_BIT_CLEAR,\n \n   /* The switch is enabled when VAR_VALUE is set in FLAG_VAR.  */\n-  CLVC_BIT_SET\n+  CLVC_BIT_SET,\n+\n+  /* The switch takes a string argument and FLAG_VAR points to that\n+     argument.  */\n+  CLVC_STRING\n };\n \n struct cl_option\n@@ -43,8 +47,8 @@ struct cl_option\n   unsigned short back_chain;\n   unsigned char opt_len;\n   unsigned int flags;\n-  int *flag_var;\n-  enum cl_var_cond var_cond;\n+  void *flag_var;\n+  enum cl_var_type var_type;\n   int var_value;\n };\n "}]}