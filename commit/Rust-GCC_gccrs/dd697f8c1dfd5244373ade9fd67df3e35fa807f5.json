{"sha": "dd697f8c1dfd5244373ade9fd67df3e35fa807f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ2OTdmOGMxZGZkNTI0NDM3M2FkZTlmZDY3ZGYzZTM1ZmE4MDdmNQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-11-12T00:01:34Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-11-12T00:01:34Z"}, "message": "* gthr-dce.h: Fix formatting.\n\nFrom-SVN: r59032", "tree": {"sha": "3de7eb8e5c15662dad7fbbe4a9f7c5fa114722ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3de7eb8e5c15662dad7fbbe4a9f7c5fa114722ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd697f8c1dfd5244373ade9fd67df3e35fa807f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd697f8c1dfd5244373ade9fd67df3e35fa807f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd697f8c1dfd5244373ade9fd67df3e35fa807f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd697f8c1dfd5244373ade9fd67df3e35fa807f5/comments", "author": null, "committer": null, "parents": [{"sha": "6eeb7d7ae07a0534f9bf07f0bb146d941f4b0731", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eeb7d7ae07a0534f9bf07f0bb146d941f4b0731", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eeb7d7ae07a0534f9bf07f0bb146d941f4b0731"}], "stats": {"total": 86, "additions": 45, "deletions": 41}, "files": [{"sha": "37c4d5ecec8a5489a11487cd10ec3f7720b86a22", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd697f8c1dfd5244373ade9fd67df3e35fa807f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd697f8c1dfd5244373ade9fd67df3e35fa807f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd697f8c1dfd5244373ade9fd67df3e35fa807f5", "patch": "@@ -1,3 +1,7 @@\n+2002-11-11  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* gthr-dce.h: Fix formatting.\n+\n 2002-11-11  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n \n \tPR c/8467"}, {"sha": "622e465a795a38ca233545bc6e4e99e7bf99eda3", "filename": "gcc/gthr-dce.h", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd697f8c1dfd5244373ade9fd67df3e35fa807f5/gcc%2Fgthr-dce.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd697f8c1dfd5244373ade9fd67df3e35fa807f5/gcc%2Fgthr-dce.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-dce.h?ref=dd697f8c1dfd5244373ade9fd67df3e35fa807f5", "patch": "@@ -116,7 +116,7 @@ static void *thread_local_storage = NULL;\n \n /* Initialize the threads subsystem.  */\n static inline int\n-__gthread_objc_init_thread_system(void)\n+__gthread_objc_init_thread_system (void)\n {\n   if (__gthread_active_p ())\n     /* Initialize the thread storage key */\n@@ -127,7 +127,7 @@ __gthread_objc_init_thread_system(void)\n \n /* Close the threads subsystem.  */\n static inline int\n-__gthread_objc_close_thread_system(void)\n+__gthread_objc_close_thread_system (void)\n {\n   if (__gthread_active_p ())\n     return 0;\n@@ -139,20 +139,20 @@ __gthread_objc_close_thread_system(void)\n \n /* Create a new thread of execution.  */\n static inline objc_thread_t\n-__gthread_objc_thread_detach(void (*func)(void *), void *arg)\n+__gthread_objc_thread_detach (void (*func)(void *), void *arg)\n {\n   objc_thread_t thread_id;\n   pthread_t new_thread_handle;\n \n   if (!__gthread_active_p ())\n     return NULL;\n \n-  if ( !(pthread_create(&new_thread_handle, pthread_attr_default,\n-\t\t\t(void *)func, arg)) )\n+  if (!(pthread_create (&new_thread_handle, pthread_attr_default,\n+\t\t\t(void *) func, arg)))\n     {\n       /* ??? May not work! (64bit) */\n-      thread_id = *(objc_thread_t *)&new_thread_handle;\n-      pthread_detach(&new_thread_handle); /* Fully detach thread.  */\n+      thread_id = *(objc_thread_t *) &new_thread_handle;\n+      pthread_detach (&new_thread_handle); /* Fully detach thread.  */\n     }\n   else\n     thread_id = NULL;\n@@ -162,7 +162,7 @@ __gthread_objc_thread_detach(void (*func)(void *), void *arg)\n \n /* Set the current thread's priority.  */\n static inline int\n-__gthread_objc_thread_set_priority(int priority)\n+__gthread_objc_thread_set_priority (int priority)\n {\n   int sys_priority = 0;\n \n@@ -184,7 +184,7 @@ __gthread_objc_thread_set_priority(int priority)\n     }\n \n   /* Change the priority.  */\n-  if (pthread_setprio(pthread_self(), sys_priority) >= 0)\n+  if (pthread_setprio (pthread_self (), sys_priority) >= 0)\n     return 0;\n   else\n     /* Failed */\n@@ -193,13 +193,13 @@ __gthread_objc_thread_set_priority(int priority)\n \n /* Return the current thread's priority.  */\n static inline int\n-__gthread_objc_thread_get_priority(void)\n+__gthread_objc_thread_get_priority (void)\n {\n   int sys_priority;\n \n   if (__gthread_active_p ())\n     {\n-      if ((sys_priority = pthread_getprio(pthread_self())) >= 0)\n+      if ((sys_priority = pthread_getprio (pthread_self ())) >= 0)\n \t{\n \t  if (sys_priority >= PRI_FG_MIN_NP\n \t      && sys_priority <= PRI_FG_MAX_NP)\n@@ -219,44 +219,44 @@ __gthread_objc_thread_get_priority(void)\n \n /* Yield our process time to another thread.  */\n static inline void\n-__gthread_objc_thread_yield(void)\n+__gthread_objc_thread_yield (void)\n {\n   if (__gthread_active_p ())\n-    pthread_yield();\n+    pthread_yield ();\n }\n \n /* Terminate the current thread.  */\n static inline int\n-__gthread_objc_thread_exit(void)\n+__gthread_objc_thread_exit (void)\n {\n   if (__gthread_active_p ())\n     /* exit the thread */\n-    pthread_exit(&__objc_thread_exit_status);\n+    pthread_exit (&__objc_thread_exit_status);\n \n   /* Failed if we reached here */\n   return -1;\n }\n \n /* Returns an integer value which uniquely describes a thread.  */\n static inline objc_thread_t\n-__gthread_objc_thread_id(void)\n+__gthread_objc_thread_id (void)\n {\n   if (__gthread_active_p ())\n     {\n-      pthread_t self = pthread_self();\n+      pthread_t self = pthread_self ();\n \n       return (objc_thread_t) pthread_getunique_np (&self);\n     }\n   else\n-    return (objc_thread_t)1;\n+    return (objc_thread_t) 1;\n }\n \n /* Sets the thread's local storage pointer.  */\n static inline int\n-__gthread_objc_thread_set_data(void *value)\n+__gthread_objc_thread_set_data (void *value)\n {\n   if (__gthread_active_p ())\n-    return pthread_setspecific(_objc_thread_storage, value);\n+    return pthread_setspecific (_objc_thread_storage, value);\n   else\n     {\n       thread_local_storage = value;\n@@ -266,13 +266,13 @@ __gthread_objc_thread_set_data(void *value)\n \n /* Returns the thread's local storage pointer.  */\n static inline void *\n-__gthread_objc_thread_get_data(void)\n+__gthread_objc_thread_get_data (void)\n {\n   void *value = NULL;\n \n   if (__gthread_active_p ())\n     {\n-      if ( !(pthread_getspecific(_objc_thread_storage, &value)) )\n+      if (!(pthread_getspecific (_objc_thread_storage, &value)))\n \treturn value;\n \n       return NULL;\n@@ -285,16 +285,16 @@ __gthread_objc_thread_get_data(void)\n \n /* Allocate a mutex.  */\n static inline int\n-__gthread_objc_mutex_allocate(objc_mutex_t mutex)\n+__gthread_objc_mutex_allocate (objc_mutex_t mutex)\n {\n   if (__gthread_active_p ())\n     {\n-      mutex->backend = objc_malloc(sizeof(pthread_mutex_t));\n+      mutex->backend = objc_malloc (sizeof (pthread_mutex_t));\n \n-      if (pthread_mutex_init((pthread_mutex_t *)mutex->backend,\n-\t\t\t     pthread_mutexattr_default))\n+      if (pthread_mutex_init ((pthread_mutex_t *) mutex->backend,\n+\t\t\t      pthread_mutexattr_default))\n \t{\n-\t  objc_free(mutex->backend);\n+\t  objc_free (mutex->backend);\n \t  mutex->backend = NULL;\n \t  return -1;\n \t}\n@@ -305,14 +305,14 @@ __gthread_objc_mutex_allocate(objc_mutex_t mutex)\n \n /* Deallocate a mutex.  */\n static inline int\n-__gthread_objc_mutex_deallocate(objc_mutex_t mutex)\n+__gthread_objc_mutex_deallocate (objc_mutex_t mutex)\n {\n   if (__gthread_active_p ())\n     {\n-      if (pthread_mutex_destroy((pthread_mutex_t *)mutex->backend))\n+      if (pthread_mutex_destroy ((pthread_mutex_t *) mutex->backend))\n \treturn -1;\n \n-      objc_free(mutex->backend);\n+      objc_free (mutex->backend);\n       mutex->backend = NULL;\n     }\n \n@@ -321,31 +321,31 @@ __gthread_objc_mutex_deallocate(objc_mutex_t mutex)\n \n /* Grab a lock on a mutex.  */\n static inline int\n-__gthread_objc_mutex_lock(objc_mutex_t mutex)\n+__gthread_objc_mutex_lock (objc_mutex_t mutex)\n {\n   if (__gthread_active_p ())\n-    return pthread_mutex_lock((pthread_mutex_t *)mutex->backend);\n+    return pthread_mutex_lock ((pthread_mutex_t *) mutex->backend);\n   else\n     return 0;\n }\n \n /* Try to grab a lock on a mutex.  */\n static inline int\n-__gthread_objc_mutex_trylock(objc_mutex_t mutex)\n+__gthread_objc_mutex_trylock (objc_mutex_t mutex)\n {\n   if (__gthread_active_p ()\n-      && pthread_mutex_trylock((pthread_mutex_t *)mutex->backend) != 1)\n+      && pthread_mutex_trylock ((pthread_mutex_t *) mutex->backend) != 1)\n     return -1;\n \n   return 0;\n }\n \n /* Unlock the mutex */\n static inline int\n-__gthread_objc_mutex_unlock(objc_mutex_t mutex)\n+__gthread_objc_mutex_unlock (objc_mutex_t mutex)\n {\n   if (__gthread_active_p ())\n-    return pthread_mutex_unlock((pthread_mutex_t *)mutex->backend);\n+    return pthread_mutex_unlock ((pthread_mutex_t *) mutex->backend);\n   else\n     return 0;\n }\n@@ -354,7 +354,7 @@ __gthread_objc_mutex_unlock(objc_mutex_t mutex)\n \n /* Allocate a condition.  */\n static inline int\n-__gthread_objc_condition_allocate(objc_condition_t condition)\n+__gthread_objc_condition_allocate (objc_condition_t condition)\n {\n   if (__gthread_active_p ())\n     /* Unimplemented.  */\n@@ -365,7 +365,7 @@ __gthread_objc_condition_allocate(objc_condition_t condition)\n \n /* Deallocate a condition.  */\n static inline int\n-__gthread_objc_condition_deallocate(objc_condition_t condition)\n+__gthread_objc_condition_deallocate (objc_condition_t condition)\n {\n   if (__gthread_active_p ())\n     /* Unimplemented.  */\n@@ -376,7 +376,7 @@ __gthread_objc_condition_deallocate(objc_condition_t condition)\n \n /* Wait on the condition */\n static inline int\n-__gthread_objc_condition_wait(objc_condition_t condition, objc_mutex_t mutex)\n+__gthread_objc_condition_wait (objc_condition_t condition, objc_mutex_t mutex)\n {\n   if (__gthread_active_p ())\n     /* Unimplemented.  */\n@@ -387,7 +387,7 @@ __gthread_objc_condition_wait(objc_condition_t condition, objc_mutex_t mutex)\n \n /* Wake up all threads waiting on this condition.  */\n static inline int\n-__gthread_objc_condition_broadcast(objc_condition_t condition)\n+__gthread_objc_condition_broadcast (objc_condition_t condition)\n {\n   if (__gthread_active_p ())\n     /* Unimplemented.  */\n@@ -398,7 +398,7 @@ __gthread_objc_condition_broadcast(objc_condition_t condition)\n \n /* Wake up one thread waiting on this condition.  */\n static inline int\n-__gthread_objc_condition_signal(objc_condition_t condition)\n+__gthread_objc_condition_signal (objc_condition_t condition)\n {\n   if (__gthread_active_p ())\n     /* Unimplemented.  */"}]}