{"sha": "1d00f8c86324c40ab2ba7933366d380e32c0a94a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQwMGY4Yzg2MzI0YzQwYWIyYmE3OTMzMzY2ZDM4MGUzMmMwYTk0YQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2020-11-12T21:13:51Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2020-11-12T21:13:51Z"}, "message": "c: C2x __has_c_attribute\n\nC2x adds the __has_c_attribute preprocessor operator, similar to C++\n__has_cpp_attribute.\n\nGCC implements __has_cpp_attribute as exactly equivalent to\n__has_attribute.  (The documentation says they differ regarding the\nvalues returned for standard attributes, but that's actually only a\nmatter of the particular nonzero value returned not being specified in\nthe documentation for __has_attribute; the implementation makes no\ndistinction between the two.)\n\nI don't think having them exactly equivalent is actually correct,\neither for __has_cpp_attribute or for __has_c_attribute.\nSpecifically, I think it is only correct for __has_cpp_attribute or\n__has_c_attribute to return nonzero if the given attribute is\nsupported, with the particular pp-tokens passed to __has_cpp_attribute\nor __has_c_attribute, with [[]] syntax, not if it's only accepted in\n__attribute__ or with gnu:: added in [[]].  For example, they should\nreturn nonzero for gnu::packed, but zero for plain packed, because\n[[gnu::packed]] is accepted but [[packed]] is ignored as not a\nstandard attribute.\n\nThis patch implements that for __has_c_attribute, leaving any changes\nto __has_cpp_attribute for the C++ maintainers.  A new\nBT_HAS_STD_ATTRIBUTE is added for __has_c_attribute (which I think,\nbased on the above, would actually be correct to use for\n__has_cpp_attribute as well).  The code in c_common_has_attribute that\ndeals with scopes has its C++ conditional removed; instead, whether\nthe language is C or C++ is used only to determine the numeric values\nreturned for standard attributes (and which standard attributes are\nhandled there at all).  A new argument is passed to\nc_common_has_attribute to distinguish BT_HAS_STD_ATTRIBUTE from\nBT_HAS_ATTRIBUTE, and that argument is used to stop attributes with no\nscope specified from being accepted with __has_c_attribute unless they\nare one of the known standard attributes and so handled specially.\n\nAlthough the standard specify constants ending with 'L' as the values\nfor the standard attributes, there is no correctness issue with the\nlack of code in GCC to add that 'L' to the expansion:\n__has_c_attribute and __has_cpp_attribute are expanded in #if after\nother macro expansion has occurred, with no semantics being specified\nif they occur outside #if, so there is no way for a conforming program\nto inspect the exact text of the expansion of those macros, only to\nuse the resulting pp-number in a #if expression, where long and int\nhave the same set of values.\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\ngcc/\n2020-11-12  Joseph Myers  <joseph@codesourcery.com>\n\n\t* doc/cpp.texi (__has_attribute): Document when scopes are allowed\n\tfor C.\n\t(__has_c_attribute): New.\n\ngcc/c-family/\n2020-11-12  Joseph Myers  <joseph@codesourcery.com>\n\n\t* c-lex.c (c_common_has_attribute): Take argument std_syntax.\n\tAllow scope for C.  Handle standard attributes for C.  Do not\n\taccept unscoped attributes if std_syntax and not handled as\n\tstandard attributes.\n\t* c-common.h (c_common_has_attribute): Update prototype.\n\ngcc/testsuite/\n2020-11-12  Joseph Myers  <joseph@codesourcery.com>\n\n\t* gcc.dg/c2x-has-c-attribute-1.c, gcc.dg/c2x-has-c-attribute-2.c,\n\tgcc.dg/c2x-has-c-attribute-3.c, gcc.dg/c2x-has-c-attribute-4.c:\n\tNew tests.\n\nlibcpp/\n2020-11-12  Joseph Myers  <joseph@codesourcery.com>\n\n\t* include/cpplib.h (struct cpp_callbacks): Add bool argument to\n\thas_attribute.\n\t(enum cpp_builtin_type): Add BT_HAS_STD_ATTRIBUTE.\n\t* init.c (builtin_array): Add __has_c_attribute.\n\t(cpp_init_special_builtins): Handle BT_HAS_STD_ATTRIBUTE.\n\t* macro.c (_cpp_builtin_macro_text): Handle BT_HAS_STD_ATTRIBUTE.\n\tUpdate call to has_attribute for BT_HAS_ATTRIBUTE.\n\t* traditional.c (fun_like_macro): Handle BT_HAS_STD_ATTRIBUTE.", "tree": {"sha": "d58b866de3af6d6321b2e66f9f6ea2091d5cb475", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d58b866de3af6d6321b2e66f9f6ea2091d5cb475"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d00f8c86324c40ab2ba7933366d380e32c0a94a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d00f8c86324c40ab2ba7933366d380e32c0a94a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d00f8c86324c40ab2ba7933366d380e32c0a94a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d00f8c86324c40ab2ba7933366d380e32c0a94a/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fcc3cac42998081dbbb1d3389bd42833ad9fdf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fcc3cac42998081dbbb1d3389bd42833ad9fdf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fcc3cac42998081dbbb1d3389bd42833ad9fdf4"}], "stats": {"total": 214, "additions": 181, "deletions": 33}, "files": [{"sha": "f47097442ebab0b65cf7c05216305cf3f7ef81aa", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d00f8c86324c40ab2ba7933366d380e32c0a94a/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d00f8c86324c40ab2ba7933366d380e32c0a94a/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=1d00f8c86324c40ab2ba7933366d380e32c0a94a", "patch": "@@ -1042,7 +1042,7 @@ extern bool c_cpp_diagnostic (cpp_reader *, enum cpp_diagnostic_level,\n \t\t\t      enum cpp_warning_reason, rich_location *,\n \t\t\t      const char *, va_list *)\n      ATTRIBUTE_GCC_DIAG(5,0);\n-extern int c_common_has_attribute (cpp_reader *);\n+extern int c_common_has_attribute (cpp_reader *, bool);\n extern int c_common_has_builtin (cpp_reader *);\n \n extern bool parse_optimize_options (tree, bool);"}, {"sha": "6cd3df7c96f1785f1ed34a7f08f4923cafc9950e", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 39, "deletions": 28, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d00f8c86324c40ab2ba7933366d380e32c0a94a/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d00f8c86324c40ab2ba7933366d380e32c0a94a/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=1d00f8c86324c40ab2ba7933366d380e32c0a94a", "patch": "@@ -300,7 +300,7 @@ get_token_no_padding (cpp_reader *pfile)\n \n /* Callback for has_attribute.  */\n int\n-c_common_has_attribute (cpp_reader *pfile)\n+c_common_has_attribute (cpp_reader *pfile, bool std_syntax)\n {\n   int result = 0;\n   tree attr_name = NULL_TREE;\n@@ -319,35 +319,37 @@ c_common_has_attribute (cpp_reader *pfile)\n       attr_name = get_identifier ((const char *)\n \t\t\t\t  cpp_token_as_text (pfile, token));\n       attr_name = canonicalize_attr_name (attr_name);\n-      if (c_dialect_cxx ())\n+      bool have_scope = false;\n+      int idx = 0;\n+      const cpp_token *nxt_token;\n+      do\n+\tnxt_token = cpp_peek_token (pfile, idx++);\n+      while (nxt_token->type == CPP_PADDING);\n+      if (nxt_token->type == CPP_SCOPE)\n \t{\n-\t  int idx = 0;\n-\t  const cpp_token *nxt_token;\n-\t  do\n-\t    nxt_token = cpp_peek_token (pfile, idx++);\n-\t  while (nxt_token->type == CPP_PADDING);\n-\t  if (nxt_token->type == CPP_SCOPE)\n+\t  have_scope = true;\n+\t  get_token_no_padding (pfile); // Eat scope.\n+\t  nxt_token = get_token_no_padding (pfile);\n+\t  if (nxt_token->type == CPP_NAME)\n \t    {\n-\t      get_token_no_padding (pfile); // Eat scope.\n-\t      nxt_token = get_token_no_padding (pfile);\n-\t      if (nxt_token->type == CPP_NAME)\n-\t\t{\n-\t\t  tree attr_ns = attr_name;\n-\t\t  tree attr_id\n-\t\t    = get_identifier ((const char *)\n-\t\t\t\t      cpp_token_as_text (pfile, nxt_token));\n-\t\t  attr_name = build_tree_list (attr_ns, attr_id);\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  cpp_error (pfile, CPP_DL_ERROR,\n-\t\t\t     \"attribute identifier required after scope\");\n-\t\t  attr_name = NULL_TREE;\n-\t\t}\n+\t      tree attr_ns = attr_name;\n+\t      tree attr_id\n+\t\t= get_identifier ((const char *)\n+\t\t\t\t  cpp_token_as_text (pfile, nxt_token));\n+\t      attr_name = build_tree_list (attr_ns, attr_id);\n \t    }\n \t  else\n \t    {\n-\t      /* Some standard attributes need special handling.  */\n+\t      cpp_error (pfile, CPP_DL_ERROR,\n+\t\t\t \"attribute identifier required after scope\");\n+\t      attr_name = NULL_TREE;\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  /* Some standard attributes need special handling.  */\n+\t  if (c_dialect_cxx ())\n+\t    {\n \t      if (is_attribute_p (\"noreturn\", attr_name))\n \t\tresult = 200809;\n \t      else if (is_attribute_p (\"deprecated\", attr_name))\n@@ -361,11 +363,20 @@ c_common_has_attribute (cpp_reader *pfile)\n \t\tresult = 201803;\n \t      else if (is_attribute_p (\"nodiscard\", attr_name))\n \t\tresult = 201907;\n-\t      if (result)\n-\t\tattr_name = NULL_TREE;\n \t    }\n+\t  else\n+\t    {\n+\t      if (is_attribute_p (\"deprecated\", attr_name)\n+\t\t  || is_attribute_p (\"maybe_unused\", attr_name)\n+\t\t  || is_attribute_p (\"fallthrough\", attr_name))\n+\t\tresult = 201904;\n+\t      else if (is_attribute_p (\"nodiscard\", attr_name))\n+\t\tresult = 202003;\n+\t    }\n+\t  if (result)\n+\t    attr_name = NULL_TREE;\n \t}\n-      if (attr_name)\n+      if (attr_name && (have_scope || !std_syntax))\n \t{\n \t  init_attributes ();\n \t  const struct attribute_spec *attr = lookup_attribute_spec (attr_name);"}, {"sha": "291e14676be00e7e95473d5c8ff46589c44e35b2", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d00f8c86324c40ab2ba7933366d380e32c0a94a/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d00f8c86324c40ab2ba7933366d380e32c0a94a/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=1d00f8c86324c40ab2ba7933366d380e32c0a94a", "patch": "@@ -3159,6 +3159,7 @@ directive}: @samp{#if}, @samp{#ifdef} or @samp{#ifndef}.\n * Elif::\n * @code{__has_attribute}::\n * @code{__has_cpp_attribute}::\n+* @code{__has_c_attribute}::\n * @code{__has_builtin}::\n * @code{__has_include}::\n @end menu\n@@ -3432,8 +3433,9 @@ condition succeeds after the original @samp{#if} and all previous\n The special operator @code{__has_attribute (@var{operand})} may be used\n in @samp{#if} and @samp{#elif} expressions to test whether the attribute\n referenced by its @var{operand} is recognized by GCC.  Using the operator\n-in other contexts is not valid.  In C code, @var{operand} must be\n-a valid identifier.  In C++ code, @var{operand} may be optionally\n+in other contexts is not valid.  In C code, if compiling for strict\n+conformance to standards before C2x, @var{operand} must be\n+a valid identifier.  Otherwise, @var{operand} may be optionally\n introduced by the @code{@var{attribute-scope}::} prefix.\n The @var{attribute-scope} prefix identifies the ``namespace'' within\n which the attribute is recognized.  The scope of GCC attributes is\n@@ -3479,6 +3481,21 @@ information including the dates of the introduction of current standard\n attributes, see @w{@uref{https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations/,\n SD-6: SG10 Feature Test Recommendations}}.\n \n+@node @code{__has_c_attribute}\n+@subsection @code{__has_c_attribute}\n+@cindex @code{__has_c_attribute}\n+\n+The special operator @code{__has_c_attribute (@var{operand})} may be\n+used in @samp{#if} and @samp{#elif} expressions in C code to test\n+whether the attribute referenced by its @var{operand} is recognized by\n+GCC in attributes using the @samp{[[]]} syntax.  GNU attributes must\n+be specified with the scope @samp{gnu} or @samp{__gnu__} with\n+@code{__has_c_attribute}.  When @var{operand} designates a supported\n+standard attribute it evaluates to an integer constant of the form\n+@code{YYYYMM} indicating the year and month when the attribute was\n+first introduced into the C standard, or when the syntax of operands\n+to the attribute was extended in the C standard.\n+\n @node @code{__has_builtin}\n @subsection @code{__has_builtin}\n @cindex @code{__has_builtin}"}, {"sha": "fe06abf99baa6fa342e6ab763812bcc49f91480d", "filename": "gcc/testsuite/gcc.dg/c2x-has-c-attribute-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d00f8c86324c40ab2ba7933366d380e32c0a94a/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-has-c-attribute-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d00f8c86324c40ab2ba7933366d380e32c0a94a/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-has-c-attribute-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-has-c-attribute-1.c?ref=1d00f8c86324c40ab2ba7933366d380e32c0a94a", "patch": "@@ -0,0 +1,28 @@\n+/* Test __has_c_attribute.  Test basic properties.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+#ifdef __has_c_attribute\n+/* OK.  */\n+#else\n+#error \"__has_c_attribute not defined\"\n+#endif\n+\n+#ifndef __has_c_attribute\n+#error \"__has_c_attribute not defined\"\n+#endif\n+\n+#if defined __has_c_attribute\n+/* OK.  */\n+#else\n+#error \"__has_c_attribute not defined\"\n+#endif\n+\n+#if __has_c_attribute(foo)\n+#error \"foo attribute supported\"\n+#endif\n+\n+#if 0\n+#elif __has_c_attribute(foo)\n+#error \"foo attribute supported\"\n+#endif"}, {"sha": "d6c4c6de509c8f0b1e2d29aec79fa5e85f36c16f", "filename": "gcc/testsuite/gcc.dg/c2x-has-c-attribute-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d00f8c86324c40ab2ba7933366d380e32c0a94a/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-has-c-attribute-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d00f8c86324c40ab2ba7933366d380e32c0a94a/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-has-c-attribute-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-has-c-attribute-2.c?ref=1d00f8c86324c40ab2ba7933366d380e32c0a94a", "patch": "@@ -0,0 +1,41 @@\n+/* Test __has_c_attribute.  Test supported attributes.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+#if __has_c_attribute ( nodiscard ) != 202003L\n+#error \"bad result for nodiscard\"\n+#endif\n+\n+#if __has_c_attribute ( __nodiscard__ ) != 202003L\n+#error \"bad result for __nodiscard__\"\n+#endif\n+\n+#if __has_c_attribute(maybe_unused) != 201904L\n+#error \"bad result for maybe_unused\"\n+#endif\n+\n+#if __has_c_attribute(__maybe_unused__) != 201904L\n+#error \"bad result for __maybe_unused__\"\n+#endif\n+\n+#if __has_c_attribute (deprecated) != 201904L\n+#error \"bad result for deprecated\"\n+#endif\n+\n+#if __has_c_attribute (__deprecated__) != 201904L\n+#error \"bad result for __deprecated__\"\n+#endif\n+\n+#if __has_c_attribute (fallthrough) != 201904L\n+#error \"bad result for fallthrough\"\n+#endif\n+\n+#if __has_c_attribute (__fallthrough__) != 201904L\n+#error \"bad result for __fallthrough__\"\n+#endif\n+\n+/* Macros in the attribute name are expanded.  */\n+#define foo deprecated\n+#if __has_c_attribute (foo) != 201904L\n+#error \"bad result for foo\"\n+#endif"}, {"sha": "36842ed41bcaded3e8eee3dfeda29c82f31776cd", "filename": "gcc/testsuite/gcc.dg/c2x-has-c-attribute-3.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d00f8c86324c40ab2ba7933366d380e32c0a94a/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-has-c-attribute-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d00f8c86324c40ab2ba7933366d380e32c0a94a/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-has-c-attribute-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-has-c-attribute-3.c?ref=1d00f8c86324c40ab2ba7933366d380e32c0a94a", "patch": "@@ -0,0 +1,25 @@\n+/* Test __has_c_attribute.  Test GNU attributes.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+#if __has_c_attribute (gnu::packed) != 1\n+#error \"bad result for gnu::packed\"\n+#endif\n+\n+#if __has_c_attribute (__gnu__::__packed__) != 1\n+#error \"bad result for __gnu__::__packed__\"\n+#endif\n+\n+#if __has_c_attribute (gnu::__packed__) != 1\n+#error \"bad result for gnu::__packed__\"\n+#endif\n+\n+#if __has_c_attribute (__gnu__::packed) != 1\n+#error \"bad result for __gnu__::packed\"\n+#endif\n+\n+/* GNU attributes should not be reported as accepted without a scope\n+   specified.  */\n+#if __has_c_attribute (packed) != 0\n+#error \"bad result for packed\"\n+#endif"}, {"sha": "acd35d2d5ac4067dc571f5bbc61373274b7769f4", "filename": "gcc/testsuite/gcc.dg/c2x-has-c-attribute-4.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d00f8c86324c40ab2ba7933366d380e32c0a94a/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-has-c-attribute-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d00f8c86324c40ab2ba7933366d380e32c0a94a/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-has-c-attribute-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-has-c-attribute-4.c?ref=1d00f8c86324c40ab2ba7933366d380e32c0a94a", "patch": "@@ -0,0 +1,18 @@\n+/* Test __has_c_attribute.  Test syntax errors.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+#if __has_c_attribute /* { dg-error \"missing '\\\\('\" } */\n+#endif\n+\n+#if __has_c_attribute 0 /* { dg-error \"missing '\\\\('\" } */\n+#endif\n+\n+#if __has_c_attribute (0 /* { dg-error \"requires an identifier\" } */\n+#endif\n+\n+#if __has_c_attribute (x /* { dg-error \"missing '\\\\)'\" } */\n+#endif\n+\n+#if __has_c_attribute (x::0) /* { dg-error \"required after scope\" } */\n+#endif"}, {"sha": "8900e77c6e5e4c7522675b067e69947a8ec4cc52", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d00f8c86324c40ab2ba7933366d380e32c0a94a/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d00f8c86324c40ab2ba7933366d380e32c0a94a/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=1d00f8c86324c40ab2ba7933366d380e32c0a94a", "patch": "@@ -672,7 +672,7 @@ struct cpp_callbacks\n   void (*used) (cpp_reader *, location_t, cpp_hashnode *);\n \n   /* Callback to identify whether an attribute exists.  */\n-  int (*has_attribute) (cpp_reader *);\n+  int (*has_attribute) (cpp_reader *, bool);\n \n   /* Callback to determine whether a built-in function is recognized.  */\n   int (*has_builtin) (cpp_reader *);\n@@ -857,6 +857,7 @@ enum cpp_builtin_type\n   BT_TIMESTAMP,\t\t\t/* `__TIMESTAMP__' */\n   BT_COUNTER,\t\t\t/* `__COUNTER__' */\n   BT_HAS_ATTRIBUTE,\t\t/* `__has_attribute(x)' */\n+  BT_HAS_STD_ATTRIBUTE,\t\t/* `__has_c_attribute(x)' */\n   BT_HAS_BUILTIN,\t\t/* `__has_builtin(x)' */\n   BT_HAS_INCLUDE,\t\t/* `__has_include(x)' */\n   BT_HAS_INCLUDE_NEXT\t\t/* `__has_include_next(x)' */"}, {"sha": "1b43802c29c34f3dad6a70743105d9461c045e3b", "filename": "libcpp/init.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d00f8c86324c40ab2ba7933366d380e32c0a94a/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d00f8c86324c40ab2ba7933366d380e32c0a94a/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=1d00f8c86324c40ab2ba7933366d380e32c0a94a", "patch": "@@ -407,6 +407,7 @@ static const struct builtin_macro builtin_array[] =\n      function-like macros in traditional.c:\n      fun_like_macro() when adding more following */\n   B(\"__has_attribute\",\t BT_HAS_ATTRIBUTE, true),\n+  B(\"__has_c_attribute\", BT_HAS_STD_ATTRIBUTE, true),\n   B(\"__has_cpp_attribute\", BT_HAS_ATTRIBUTE, true),\n   B(\"__has_builtin\",\t BT_HAS_BUILTIN,   true),\n   B(\"__has_include\",\t BT_HAS_INCLUDE,   true),\n@@ -492,6 +493,7 @@ cpp_init_special_builtins (cpp_reader *pfile)\n   for (b = builtin_array; b < builtin_array + n; b++)\n     {\n       if ((b->value == BT_HAS_ATTRIBUTE\n+\t   || b->value == BT_HAS_STD_ATTRIBUTE\n \t   || b->value == BT_HAS_BUILTIN)\n \t  && (CPP_OPTION (pfile, lang) == CLK_ASM\n \t      || pfile->cb.has_attribute == NULL))"}, {"sha": "aa16752e2b2b4c4819459dfaed5b744ec2ea2912", "filename": "libcpp/macro.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d00f8c86324c40ab2ba7933366d380e32c0a94a/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d00f8c86324c40ab2ba7933366d380e32c0a94a/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=1d00f8c86324c40ab2ba7933366d380e32c0a94a", "patch": "@@ -648,7 +648,11 @@ _cpp_builtin_macro_text (cpp_reader *pfile, cpp_hashnode *node,\n       break;\n \n     case BT_HAS_ATTRIBUTE:\n-      number = pfile->cb.has_attribute (pfile);\n+      number = pfile->cb.has_attribute (pfile, false);\n+      break;\n+\n+    case BT_HAS_STD_ATTRIBUTE:\n+      number = pfile->cb.has_attribute (pfile, true);\n       break;\n \n     case BT_HAS_BUILTIN:"}, {"sha": "225e3c2c2f2127d22030963ac40ab8a9006a4552", "filename": "libcpp/traditional.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d00f8c86324c40ab2ba7933366d380e32c0a94a/libcpp%2Ftraditional.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d00f8c86324c40ab2ba7933366d380e32c0a94a/libcpp%2Ftraditional.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ftraditional.c?ref=1d00f8c86324c40ab2ba7933366d380e32c0a94a", "patch": "@@ -330,6 +330,7 @@ fun_like_macro (cpp_hashnode *node)\n {\n   if (cpp_builtin_macro_p (node))\n     return (node->value.builtin == BT_HAS_ATTRIBUTE\n+\t    || node->value.builtin == BT_HAS_STD_ATTRIBUTE\n \t    || node->value.builtin == BT_HAS_BUILTIN\n \t    || node->value.builtin == BT_HAS_INCLUDE\n \t    || node->value.builtin == BT_HAS_INCLUDE_NEXT);"}]}