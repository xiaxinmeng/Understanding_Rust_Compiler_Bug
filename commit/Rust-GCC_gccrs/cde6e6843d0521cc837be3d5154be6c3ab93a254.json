{"sha": "cde6e6843d0521cc837be3d5154be6c3ab93a254", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RlNmU2ODQzZDA1MjFjYzgzN2JlM2Q1MTU0YmU2YzNhYjkzYTI1NA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-08-21T14:54:28Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-08-21T14:54:28Z"}, "message": "c-decl.c (duplicate_decls, [...]): Restrict -Wtraditional warnings to user code.\n\n\t* c-decl.c (duplicate_decls, define_label): Restrict -Wtraditional\n\twarnings to user code.\n\n\t* c-lex.c (readescape, yylex): Likewise.\n\n\t* c-typeck.c (store_init_value, process_init_element): Likewise\n\t(c_expand_start_case): Format.\n\nFrom-SVN: r35845", "tree": {"sha": "567643882a164b0c7c6014faac6840e3404eb29e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/567643882a164b0c7c6014faac6840e3404eb29e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cde6e6843d0521cc837be3d5154be6c3ab93a254", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cde6e6843d0521cc837be3d5154be6c3ab93a254", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cde6e6843d0521cc837be3d5154be6c3ab93a254", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cde6e6843d0521cc837be3d5154be6c3ab93a254/comments", "author": null, "committer": null, "parents": [{"sha": "120dc6cd25a52db6221ea7ccf1a07acea21d3a02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/120dc6cd25a52db6221ea7ccf1a07acea21d3a02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/120dc6cd25a52db6221ea7ccf1a07acea21d3a02"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "8172c6feb0fa09e8d9a0bf571d3a5caa04bd7e04", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde6e6843d0521cc837be3d5154be6c3ab93a254/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde6e6843d0521cc837be3d5154be6c3ab93a254/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cde6e6843d0521cc837be3d5154be6c3ab93a254", "patch": "@@ -1,3 +1,13 @@\n+2000-08-21  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* c-decl.c (duplicate_decls, define_label): Restrict -Wtraditional\n+\twarnings to user code.\n+\n+\t* c-lex.c (readescape, yylex): Likewise.\n+\n+\t* c-typeck.c (store_init_value, process_init_element): Likewise\n+\t(c_expand_start_case): Format.\n+\n 2000-08-18  Maciej W. Rozycki  <macro@ds2.pg.gda.pl>\n \n \t* mips/linux.h (LINK_SPEC): Use %(endian_spec)."}, {"sha": "17b131af1894cf18df9d9836c8fe37e964c75eff", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde6e6843d0521cc837be3d5154be6c3ab93a254/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde6e6843d0521cc837be3d5154be6c3ab93a254/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=cde6e6843d0521cc837be3d5154be6c3ab93a254", "patch": "@@ -1760,7 +1760,7 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n \n \t  /* If warn_traditional, warn when a non-static function\n \t     declaration follows a static one.  */\n-\t  if (warn_traditional\n+\t  if (warn_traditional && !in_system_header\n \t      && TREE_CODE (olddecl) == FUNCTION_DECL\n \t      && !TREE_PUBLIC (olddecl)\n \t      && TREE_PUBLIC (newdecl))\n@@ -2751,7 +2751,7 @@ define_label (filename, line, name)\n       decl = lookup_label (name);\n     }\n \n-  if (warn_traditional && lookup_name (name))\n+  if (warn_traditional && !in_system_header && lookup_name (name))\n     warning (\"traditional C lacks a separate namespace for labels, identifier `%s' conflicts\",\n \t     IDENTIFIER_POINTER (name));\n "}, {"sha": "c1b85c712a3598daf8166358866ed84a7addad56", "filename": "gcc/c-lex.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde6e6843d0521cc837be3d5154be6c3ab93a254/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde6e6843d0521cc837be3d5154be6c3ab93a254/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=cde6e6843d0521cc837be3d5154be6c3ab93a254", "patch": "@@ -902,7 +902,7 @@ readescape (ignore_ptr)\n   switch (c)\n     {\n     case 'x':\n-      if (warn_traditional)\n+      if (warn_traditional && !in_system_header)\n \twarning (\"the meaning of `\\\\x' varies with -traditional\");\n \n       if (flag_traditional)\n@@ -987,7 +987,7 @@ readescape (ignore_ptr)\n       return TARGET_BS;\n \n     case 'a':\n-      if (warn_traditional)\n+      if (warn_traditional && !in_system_header)\n \twarning (\"the meaning of `\\\\a' varies with -traditional\");\n \n       if (flag_traditional)\n@@ -1912,7 +1912,7 @@ yylex ()\n \t    /* We assume that constants specified in a non-decimal\n \t       base are bit patterns, and that the programmer really\n \t       meant what they wrote.  */\n-\t    if (warn_traditional && base == 10\n+\t    if (warn_traditional && !in_system_header && base == 10\n \t\t&& traditional_type != ansi_type)\n \t      {\n \t\tif (TYPE_PRECISION (traditional_type)"}, {"sha": "9cd27e581d3f2d4939ce26969393898c5a46331d", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde6e6843d0521cc837be3d5154be6c3ab93a254/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde6e6843d0521cc837be3d5154be6c3ab93a254/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=cde6e6843d0521cc837be3d5154be6c3ab93a254", "patch": "@@ -4396,7 +4396,7 @@ store_init_value (decl, init)\n     }\n #endif\n \n-  if (warn_traditional\n+  if (warn_traditional && !in_system_header\n       && AGGREGATE_TYPE_P (TREE_TYPE (decl)) && ! TREE_STATIC (decl))\n     warning (\"traditional C rejects automatic aggregate initialization\");\n \n@@ -6400,7 +6400,7 @@ process_init_element (value)\n \t     code appears conditioned on e.g. __STDC__ to avoid\n \t     \"missing initializer\" warnings and relies on default\n \t     initialization to zero in the traditional C case.  */\n-\t  if (warn_traditional && !integer_zerop (value))\n+\t  if (warn_traditional && !in_system_header && !integer_zerop (value))\n \t    warning (\"traditional C rejects initialization of unions\");\n \n \t  /* Accept a string constant to initialize a subarray.  */\n@@ -6739,8 +6739,7 @@ c_expand_start_case (exp)\n       tree index;\n       type = TYPE_MAIN_VARIANT (TREE_TYPE (exp));\n \n-      if (warn_traditional\n-\t  && ! in_system_header\n+      if (warn_traditional && !in_system_header\n \t  && (type == long_integer_type_node\n \t      || type == long_unsigned_type_node))\n \twarning (\"`long' switch expression not converted to `int' in ISO C\");"}]}