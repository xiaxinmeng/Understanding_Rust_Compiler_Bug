{"sha": "75fdb07e3e34acaf54f0a53556eaba866092ef2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVmZGIwN2UzZTM0YWNhZjU0ZjBhNTM1NTZlYWJhODY2MDkyZWYyZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2018-07-12T13:14:52Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2018-07-12T13:14:52Z"}, "message": "dumpfile.c (gcc::dump_manager::get_dump_file_name): Add PART parameter.\n\n\n\t* dumpfile.c (gcc::dump_manager::get_dump_file_name): Add PART\n\t parameter.\n\t(gcc::dump_manager::get_dump_file_name): likewise.\n\t(dump_begin): Likewise.\n\t* dumpfile.h (dump_begin): Update prototype.\n\t(gcc::dump_manager::get_dump_file_name,\n\tgcc::dump_manager::get_dump_file_name): Update prototype.\n\nFrom-SVN: r262591", "tree": {"sha": "d7f00caf2d3bc0ebffcb6799ff3d2cb53fc80cfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7f00caf2d3bc0ebffcb6799ff3d2cb53fc80cfc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75fdb07e3e34acaf54f0a53556eaba866092ef2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75fdb07e3e34acaf54f0a53556eaba866092ef2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75fdb07e3e34acaf54f0a53556eaba866092ef2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75fdb07e3e34acaf54f0a53556eaba866092ef2f/comments", "author": null, "committer": null, "parents": [{"sha": "5249ee4d79855edda91b26bb07c9c8737cdfc96c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5249ee4d79855edda91b26bb07c9c8737cdfc96c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5249ee4d79855edda91b26bb07c9c8737cdfc96c"}], "stats": {"total": 49, "additions": 35, "deletions": 14}, "files": [{"sha": "ec22e9356114e427f2a2bf83c2df41e77879a625", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75fdb07e3e34acaf54f0a53556eaba866092ef2f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75fdb07e3e34acaf54f0a53556eaba866092ef2f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75fdb07e3e34acaf54f0a53556eaba866092ef2f", "patch": "@@ -1,3 +1,13 @@\n+2018-07-12  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* dumpfile.c (gcc::dump_manager::get_dump_file_name): Add PART\n+\t parameter.\n+\t(gcc::dump_manager::get_dump_file_name): likewise.\n+\t(dump_begin): Likewise.\n+\t* dumpfile.h (dump_begin): Update prototype.\n+\t(gcc::dump_manager::get_dump_file_name,\n+\tgcc::dump_manager::get_dump_file_name): Update prototype.\n+\n 2018-07-12  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* internal-fn.h (vectorizable_internal_fn_p): New function."}, {"sha": "4de7d28895d45fb84260817f6bf1a6a435e3eca2", "filename": "gcc/dumpfile.c", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75fdb07e3e34acaf54f0a53556eaba866092ef2f/gcc%2Fdumpfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75fdb07e3e34acaf54f0a53556eaba866092ef2f/gcc%2Fdumpfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.c?ref=75fdb07e3e34acaf54f0a53556eaba866092ef2f", "patch": "@@ -307,7 +307,7 @@ get_dump_file_info_by_switch (const char *swtch) const\n \n char *\n gcc::dump_manager::\n-get_dump_file_name (int phase) const\n+get_dump_file_name (int phase, int part) const\n {\n   struct dump_file_info *dfi;\n \n@@ -316,7 +316,7 @@ get_dump_file_name (int phase) const\n \n   dfi = get_dump_file_info (phase);\n \n-  return get_dump_file_name (dfi);\n+  return get_dump_file_name (dfi, part);\n }\n \n /* Return the name of the dump file for the given dump_file_info.\n@@ -326,7 +326,7 @@ get_dump_file_name (int phase) const\n \n char *\n gcc::dump_manager::\n-get_dump_file_name (struct dump_file_info *dfi) const\n+get_dump_file_name (struct dump_file_info *dfi, int part) const\n {\n   char dump_id[10];\n \n@@ -350,7 +350,14 @@ get_dump_file_name (struct dump_file_info *dfi) const\n \tdump_id[0] = '\\0';\n     }\n \n-  return concat (dump_base_name, dump_id, dfi->suffix, NULL);\n+  if (part != -1)\n+    {\n+       char part_id[8];\n+       snprintf (part_id, sizeof (part_id), \".%i\", part);\n+       return concat (dump_base_name, dump_id, part_id, dfi->suffix, NULL);\n+    }\n+  else\n+    return concat (dump_base_name, dump_id, dfi->suffix, NULL);\n }\n \n /* Open a dump file called FILENAME.  Some filenames are special and\n@@ -768,17 +775,19 @@ dump_finish (int phase)\n /* Begin a tree dump for PHASE. Stores any user supplied flag in\n    *FLAG_PTR and returns a stream to write to. If the dump is not\n    enabled, returns NULL.\n-   Multiple calls will reopen and append to the dump file.  */\n+   PART can be used for dump files which should be split to multiple\n+   parts. PART == -1 indicates dump file with no parts.\n+   If PART is -1, multiple calls will reopen and append to the dump file.  */\n \n FILE *\n-dump_begin (int phase, dump_flags_t *flag_ptr)\n+dump_begin (int phase, dump_flags_t *flag_ptr, int part)\n {\n-  return g->get_dumps ()->dump_begin (phase, flag_ptr);\n+  return g->get_dumps ()->dump_begin (phase, flag_ptr, part);\n }\n \n FILE *\n gcc::dump_manager::\n-dump_begin (int phase, dump_flags_t *flag_ptr)\n+dump_begin (int phase, dump_flags_t *flag_ptr, int part)\n {\n   char *name;\n   struct dump_file_info *dfi;\n@@ -787,12 +796,14 @@ dump_begin (int phase, dump_flags_t *flag_ptr)\n   if (phase == TDI_none || !dump_phase_enabled_p (phase))\n     return NULL;\n \n-  name = get_dump_file_name (phase);\n+  name = get_dump_file_name (phase, part);\n   if (!name)\n     return NULL;\n   dfi = get_dump_file_info (phase);\n \n-  stream = dump_open (name, dfi->pstate < 0);\n+  /* We do not support re-opening of dump files with parts.  This would require\n+     tracking pstate per part of the dump file.  */\n+  stream = dump_open (name, part != -1 || dfi->pstate < 0);\n   if (stream)\n     dfi->pstate = 1;\n   free (name);"}, {"sha": "40e3332217ea6b653ca17b82f11c3ebefcb1323a", "filename": "gcc/dumpfile.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75fdb07e3e34acaf54f0a53556eaba866092ef2f/gcc%2Fdumpfile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75fdb07e3e34acaf54f0a53556eaba866092ef2f/gcc%2Fdumpfile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.h?ref=75fdb07e3e34acaf54f0a53556eaba866092ef2f", "patch": "@@ -416,7 +416,7 @@ class dump_location_t\n };\n \n /* In dumpfile.c */\n-extern FILE *dump_begin (int, dump_flags_t *);\n+extern FILE *dump_begin (int, dump_flags_t *, int part=-1);\n extern void dump_end (int, FILE *);\n extern int opt_info_switch_p (const char *);\n extern const char *dump_flag_name (int);\n@@ -538,10 +538,10 @@ class dump_manager\n   /* Return the name of the dump file for the given phase.\n      If the dump is not enabled, returns NULL.  */\n   char *\n-  get_dump_file_name (int phase) const;\n+  get_dump_file_name (int phase, int part = -1) const;\n \n   char *\n-  get_dump_file_name (struct dump_file_info *dfi) const;\n+  get_dump_file_name (struct dump_file_info *dfi, int part = -1) const;\n \n   int\n   dump_switch_p (const char *arg);\n@@ -560,7 +560,7 @@ class dump_manager\n   dump_finish (int phase);\n \n   FILE *\n-  dump_begin (int phase, dump_flags_t *flag_ptr);\n+  dump_begin (int phase, dump_flags_t *flag_ptr, int part);\n \n   /* Returns nonzero if tree dump PHASE has been initialized.  */\n   int"}]}