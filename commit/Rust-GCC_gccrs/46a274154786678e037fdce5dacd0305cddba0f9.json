{"sha": "46a274154786678e037fdce5dacd0305cddba0f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZhMjc0MTU0Nzg2Njc4ZTAzN2ZkY2U1ZGFjZDAzMDVjZGRiYTBmOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-09-22T08:45:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-09-22T08:45:06Z"}, "message": "Fix some typos\n\n2020-09-22  Jakub Jelinek  <jakub@redhat.com>\n\ngcc/\n\t* params.opt (--param=modref-max-tests=): Fix typo in help text:\n\tperofmed -> performed.\n\t* common.opt: Fix typo: incrmeental -> incremental.\n\t* ipa-modref.c: Fix typos: recroding -> recording, becaue -> because,\n\tanalsis -> analysis.\n\t(class modref_summaries): Fix typo: betweehn -> between.\n\t(analyze_call): Fix typo: calle -> callee.\n\t(read_modref_records): Fix typo: expcted -> expected.\n\t(pass_ipa_modref::execute): Fix typo: calle -> callee.\ngcc/c-family/\n\t* c.opt (Wbuiltin-declaration-mismatch): Fix typo in variable name:\n\twarn_builtin_declaraion_mismatch -> warn_builtin_declaration_mismatch.", "tree": {"sha": "543941019db85a32b280b314c50a657bbdb08085", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/543941019db85a32b280b314c50a657bbdb08085"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46a274154786678e037fdce5dacd0305cddba0f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46a274154786678e037fdce5dacd0305cddba0f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46a274154786678e037fdce5dacd0305cddba0f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46a274154786678e037fdce5dacd0305cddba0f9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "466b907fad91075c1ac80acedd3314b190d52cc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/466b907fad91075c1ac80acedd3314b190d52cc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/466b907fad91075c1ac80acedd3314b190d52cc6"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "7761eefd2033f9becd5c7a954820731a64ded637", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46a274154786678e037fdce5dacd0305cddba0f9/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46a274154786678e037fdce5dacd0305cddba0f9/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=46a274154786678e037fdce5dacd0305cddba0f9", "patch": "@@ -371,7 +371,7 @@ C ObjC C++ ObjC++ Var(warn_frame_address) Warning LangEnabledBy(C ObjC C++ ObjC+\n Warn when __builtin_frame_address or __builtin_return_address is used unsafely.\n \n Wbuiltin-declaration-mismatch\n-C ObjC C++ ObjC++ Var(warn_builtin_declaraion_mismatch) Init(1) Warning\n+C ObjC C++ ObjC++ Var(warn_builtin_declaration_mismatch) Init(1) Warning\n Warn when a built-in function is declared with the wrong signature.\n \n Wbuiltin-macro-redefined"}, {"sha": "292c2de694ef4f42e60b37fca681189de8cfdec9", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46a274154786678e037fdce5dacd0305cddba0f9/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46a274154786678e037fdce5dacd0305cddba0f9/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=46a274154786678e037fdce5dacd0305cddba0f9", "patch": "@@ -47,7 +47,7 @@ Variable\n bool in_lto_p = false\n \n ; This variable is set to non-0 only by LTO front-end.  1 indicates that\n-; the output produced will be used for incrmeental linking (thus weak symbols\n+; the output produced will be used for incremental linking (thus weak symbols\n ; can still be bound) and 2 indicates that the IL is going to be linked and\n ; and output to LTO object file.\n Variable"}, {"sha": "0411f660df747503a3946fea4686b6a396d02fdf", "filename": "gcc/ipa-modref.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46a274154786678e037fdce5dacd0305cddba0f9/gcc%2Fipa-modref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46a274154786678e037fdce5dacd0305cddba0f9/gcc%2Fipa-modref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref.c?ref=46a274154786678e037fdce5dacd0305cddba0f9", "patch": "@@ -35,10 +35,10 @@ along with GCC; see the file COPYING3.  If not see\n    propagates across the callgraph and is able to handle recursion and works on\n    whole program during link-time analysis.\n \n-   LTO mode differs from the local mode by not recroding alias sets but types\n+   LTO mode differs from the local mode by not recording alias sets but types\n    that are translated to alias sets later.  This is necessary in order stream\n-   the information becaue the alias sets are rebuild at stream-in time and may\n-   not correspond to ones seen during analsis.  For this reason part of analysis\n+   the information because the alias sets are rebuild at stream-in time and may\n+   not correspond to ones seen during analysis.  For this reason part of analysis\n    is duplicated.  */\n \n #include \"config.h\"\n@@ -77,7 +77,7 @@ class GTY((user)) modref_summaries\n \t\t\t  modref_summary *src_data,\n \t\t\t  modref_summary *dst_data);\n   /* This flag controls whether newly inserted functions should be analyzed\n-     in IPA or normal mode.  Functions inserted betweehn IPA analysis and\n+     in IPA or normal mode.  Functions inserted between IPA analysis and\n      ipa-modref pass execution needs to be analyzed in IPA mode while all\n      other insertions leads to normal analysis.  */\n   bool ipa;\n@@ -413,7 +413,7 @@ analyze_call (modref_summary *cur_summary,\n \n   struct cgraph_node *callee_node = cgraph_node::get_create (callee);\n \n-  /* We can not safely optimize based on summary of calle if it does\n+  /* We can not safely optimize based on summary of callee if it does\n      not always bind to current def: it is possible that memory load\n      was optimized out earlier which may not happen in the interposed\n      variant.  */\n@@ -815,7 +815,7 @@ write_modref_records (modref_records_lto *tt, struct output_block *ob)\n /* Read a modref_tree from the input block IB using the data from DATA_IN.\n    This assumes that the tree was encoded using write_modref_tree.\n    Either nolto_ret or lto_ret is initialized by the tree depending whether\n-   LTO streaming is expcted or not.  */\n+   LTO streaming is expected or not.  */\n \n void\n read_modref_records (lto_input_block *ib, struct data_in *data_in,\n@@ -1238,7 +1238,7 @@ unsigned int pass_ipa_modref::execute (function *)\n \t\tfprintf (dump_file, \"    Call to %s\\n\",\n \t\t\t cur->dump_name ());\n \n-\t      /* We can not safely optimize based on summary of calle if it\n+\t      /* We can not safely optimize based on summary of callee if it\n \t\t does not always bind to current def: it is possible that\n \t\t memory load was optimized out earlier which may not happen in\n \t\t the interposed variant.  */"}, {"sha": "dcf5e020f01859f201b4b090d0f8de71f1bada32", "filename": "gcc/params.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46a274154786678e037fdce5dacd0305cddba0f9/gcc%2Fparams.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46a274154786678e037fdce5dacd0305cddba0f9/gcc%2Fparams.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.opt?ref=46a274154786678e037fdce5dacd0305cddba0f9", "patch": "@@ -882,7 +882,7 @@ Maximum number of refs stored in each modref tree.\n \n -param=modref-max-tests=\n Common Joined UInteger Var(param_modref_max_tests) Init(64)\n-Maximum number of tests perofmed by modref query.\n+Maximum number of tests performed by modref query.\n \n -param=tm-max-aggregate-size=\n Common Joined UInteger Var(param_tm_max_aggregate_size) Init(9) Param Optimization"}]}