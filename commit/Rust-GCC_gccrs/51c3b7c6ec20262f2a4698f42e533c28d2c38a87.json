{"sha": "51c3b7c6ec20262f2a4698f42e533c28d2c38a87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFjM2I3YzZlYzIwMjYyZjJhNDY5OGY0MmU1MzNjMjhkMmMzOGE4Nw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-09-27T17:34:58Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-09-27T17:34:58Z"}, "message": "compiler: only check whether struct or array types are big\n    \n    Fetching the size of a type typically involves a hash table lookup,\n    and is generally non-trivial.  The escape analysis code calls is_big\n    more than one might expect.  So only fetch the size if we need it.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/197699\n\nFrom-SVN: r276187", "tree": {"sha": "d332e1b74655be58b31b8e28c5906c68d7ce5642", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d332e1b74655be58b31b8e28c5906c68d7ce5642"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51c3b7c6ec20262f2a4698f42e533c28d2c38a87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51c3b7c6ec20262f2a4698f42e533c28d2c38a87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51c3b7c6ec20262f2a4698f42e533c28d2c38a87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51c3b7c6ec20262f2a4698f42e533c28d2c38a87/comments", "author": null, "committer": null, "parents": [{"sha": "df435456846445e0939197af4bc19e813d6ef8c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df435456846445e0939197af4bc19e813d6ef8c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df435456846445e0939197af4bc19e813d6ef8c4"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "871a3ee5c182c2caeaeccb83b1993e516f08deb9", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51c3b7c6ec20262f2a4698f42e533c28d2c38a87/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51c3b7c6ec20262f2a4698f42e533c28d2c38a87/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=51c3b7c6ec20262f2a4698f42e533c28d2c38a87", "patch": "@@ -1,4 +1,4 @@\n-d1fa6c34e56eade6fb5b6291f0a727b1a12bf6f1\n+27d1f3031197428b5745d09c167f982d638b8776\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "91f43a65d3d0d550f1713005ab54b1258ce888e9", "filename": "gcc/go/gofrontend/escape.cc", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51c3b7c6ec20262f2a4698f42e533c28d2c38a87/gcc%2Fgo%2Fgofrontend%2Fescape.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51c3b7c6ec20262f2a4698f42e533c28d2c38a87/gcc%2Fgo%2Fgofrontend%2Fescape.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fescape.cc?ref=51c3b7c6ec20262f2a4698f42e533c28d2c38a87", "patch": "@@ -511,16 +511,28 @@ Node::is_big(Escape_context* context) const\n       || t->is_abstract())\n     return false;\n \n-  int64_t size;\n-  bool ok = t->backend_type_size(context->gogo(), &size);\n-  bool big = ok && (size < 0 || size > 10 * 1024 * 1024);\n+  bool big = false;\n+  if (t->struct_type() != NULL\n+      || (t->array_type() != NULL && !t->is_slice_type()))\n+    {\n+      int64_t size;\n+      bool ok = t->backend_type_size(context->gogo(), &size);\n+      big = ok && (size < 0 || size > 10 * 1024 * 1024);\n+    }\n \n   if (this->expr() != NULL)\n     {\n       if (this->expr()->allocation_expression() != NULL)\n \t{\n-\t  ok = t->deref()->backend_type_size(context->gogo(), &size);\n-\t  big = big || size <= 0 || size >= (1 << 16);\n+\t  Type* pt = t->deref();\n+\t  if (pt->struct_type() != NULL\n+\t      || (pt->array_type() != NULL && !pt->is_slice_type()))\n+\t    {\n+\t      int64_t size;\n+\t      bool ok = pt->backend_type_size(context->gogo(), &size);\n+\t      if (ok)\n+\t\tbig = big || size <= 0 || size >= (1 << 16);\n+\t    }\n \t}\n       else if (this->expr()->call_expression() != NULL)\n \t{"}]}