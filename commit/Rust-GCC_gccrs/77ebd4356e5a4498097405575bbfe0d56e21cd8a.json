{"sha": "77ebd4356e5a4498097405575bbfe0d56e21cd8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdlYmQ0MzU2ZTVhNDQ5ODA5NzQwNTU3NWJiZmUwZDU2ZTIxY2Q4YQ==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@suse.de", "date": "2001-01-15T13:19:31Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2001-01-15T13:19:31Z"}, "message": "i386.c (ix86_init_builtins): Make i size_t to remove warnings.\n\n2001-01-15  Andreas Jaeger  <aj@suse.de>\n\n\t* config/i386/i386.c (ix86_init_builtins): Make i size_t to remove warnings.\n\t(ix86_expand_builtin): Likewise.\n\n\t* gencodes.c (output_predicate_decls): Make i size_t to avoid\n\twarning about comparison between signed and unsigned.\n\nFrom-SVN: r39036", "tree": {"sha": "4249fc58bf9f80405c1cd88ca0d62f7ab35d9583", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4249fc58bf9f80405c1cd88ca0d62f7ab35d9583"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77ebd4356e5a4498097405575bbfe0d56e21cd8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77ebd4356e5a4498097405575bbfe0d56e21cd8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77ebd4356e5a4498097405575bbfe0d56e21cd8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77ebd4356e5a4498097405575bbfe0d56e21cd8a/comments", "author": {"login": "ajaeger", "id": 16867, "node_id": "MDQ6VXNlcjE2ODY3", "avatar_url": "https://avatars.githubusercontent.com/u/16867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajaeger", "html_url": "https://github.com/ajaeger", "followers_url": "https://api.github.com/users/ajaeger/followers", "following_url": "https://api.github.com/users/ajaeger/following{/other_user}", "gists_url": "https://api.github.com/users/ajaeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajaeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajaeger/subscriptions", "organizations_url": "https://api.github.com/users/ajaeger/orgs", "repos_url": "https://api.github.com/users/ajaeger/repos", "events_url": "https://api.github.com/users/ajaeger/events{/privacy}", "received_events_url": "https://api.github.com/users/ajaeger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "998a298e1e8829e25fc97c9dc6563a6bb592ef0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/998a298e1e8829e25fc97c9dc6563a6bb592ef0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/998a298e1e8829e25fc97c9dc6563a6bb592ef0e"}], "stats": {"total": 60, "additions": 34, "deletions": 26}, "files": [{"sha": "f3b0f65a4dcfb0070ed7b2c1bacbb59f8f32ade1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77ebd4356e5a4498097405575bbfe0d56e21cd8a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77ebd4356e5a4498097405575bbfe0d56e21cd8a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77ebd4356e5a4498097405575bbfe0d56e21cd8a", "patch": "@@ -1,3 +1,11 @@\n+2001-01-15  Andreas Jaeger  <aj@suse.de>\n+\n+\t* config/i386/i386.c (ix86_init_builtins): Make i size_t to remove warnings.\n+\t(ix86_expand_builtin): Likewise.\n+\n+\t* gencodes.c (output_predicate_decls): Make i size_t to avoid\n+\twarning about comparison between signed and unsigned.\n+\n 2001-01-14  Geoffrey Keating  <geoffk@redhat.com>\n \n \t* expr.c (do_jump): Treat VOIDmode CONST_DOUBLEs like CONST_INTs."}, {"sha": "db32bda680767cb723634b4dfb1d9acd6682d599", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77ebd4356e5a4498097405575bbfe0d56e21cd8a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77ebd4356e5a4498097405575bbfe0d56e21cd8a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=77ebd4356e5a4498097405575bbfe0d56e21cd8a", "patch": "@@ -1715,7 +1715,7 @@ asm_output_function_prefix (file, name)\n \t     internal (non-global) label that's being emitted, it didn't make\n \t     sense to have .type information for local labels.   This caused\n \t     the SCO OpenServer 5.0.4 ELF assembler grief (why are you giving\n-  \t     me debug info for a label that you're declaring non-global?) this\n+\t     me debug info for a label that you're declaring non-global?) this\n \t     was changed to call ASM_OUTPUT_LABEL() instead.  */\n \n \t  ASM_OUTPUT_LABEL (file, pic_label_name);\n@@ -3025,23 +3025,23 @@ output_pic_addr_const (file, x, code)\n \n      case UNSPEC:\n        if (XVECLEN (x, 0) != 1)\n- \tabort ();\n+\tabort ();\n        output_pic_addr_const (file, XVECEXP (x, 0, 0), code);\n        switch (XINT (x, 1))\n- \t{\n- \tcase 6:\n- \t  fputs (\"@GOT\", file);\n- \t  break;\n- \tcase 7:\n- \t  fputs (\"@GOTOFF\", file);\n- \t  break;\n- \tcase 8:\n- \t  fputs (\"@PLT\", file);\n- \t  break;\n- \tdefault:\n- \t  output_operand_lossage (\"invalid UNSPEC as operand\");\n- \t  break;\n- \t}\n+\t{\n+\tcase 6:\n+\t  fputs (\"@GOT\", file);\n+\t  break;\n+\tcase 7:\n+\t  fputs (\"@GOTOFF\", file);\n+\t  break;\n+\tcase 8:\n+\t  fputs (\"@PLT\", file);\n+\t  break;\n+\tdefault:\n+\t  output_operand_lossage (\"invalid UNSPEC as operand\");\n+\t  break;\n+\t}\n        break;\n \n     default:\n@@ -5176,7 +5176,7 @@ ix86_expand_compare (code, second_test, bypass_test)\n \n   if (GET_MODE_CLASS (GET_MODE (op0)) == MODE_FLOAT)\n     ret = ix86_expand_fp_compare (code, op0, op1, gen_reg_rtx (HImode),\n-\t\t    \t\t  second_test, bypass_test);\n+\t\t\t\t  second_test, bypass_test);\n   else\n     ret = ix86_expand_int_compare (code, op0, op1);\n \n@@ -6324,7 +6324,7 @@ ix86_split_lshrdi (operands, scratch)\n    out = result, initialized with the start address\n    align_rtx = alignment of the address.\n    scratch = scratch register, initialized with the startaddress when\n-   \tnot aligned, otherwise undefined\n+\tnot aligned, otherwise undefined\n \n    This is just the body. It needs the initialisations mentioned above and\n    some address computing at the end.  These things are done in i386.md.  */\n@@ -6362,7 +6362,7 @@ ix86_expand_strlensi_unroll_1 (out, align_rtx, scratch)\n \t\t\t\t    NULL_RTX, 0, OPTAB_WIDEN);\n \n \t  emit_cmp_and_jump_insns (align_rtx, const0_rtx, EQ, NULL,\n-\t\t\t  \t   SImode, 1, 0, align_4_label);\n+\t\t\t\t   SImode, 1, 0, align_4_label);\n \t  emit_cmp_and_jump_insns (align_rtx, GEN_INT (2), EQ, NULL,\n \t\t\t\t   SImode, 1, 0, align_2_label);\n \t  emit_cmp_and_jump_insns (align_rtx, GEN_INT (2), GTU, NULL,\n@@ -6441,8 +6441,8 @@ ix86_expand_strlensi_unroll_1 (out, align_rtx, scratch)\n        tmp = gen_rtx_EQ (VOIDmode, tmp, const0_rtx);\n        emit_insn (gen_rtx_SET (VOIDmode, tmpreg,\n \t\t\t       gen_rtx_IF_THEN_ELSE (SImode, tmp,\n-\t\t\t\t       \t\t     reg,\n-\t\t\t\t       \t\t     tmpreg)));\n+\t\t\t\t\t\t     reg,\n+\t\t\t\t\t\t     tmpreg)));\n        /* Emit lea manually to avoid clobbering of flags.  */\n        emit_insn (gen_rtx_SET (SImode, reg,\n \t\t\t       gen_rtx_PLUS (SImode, out, GEN_INT (2))));\n@@ -6451,8 +6451,8 @@ ix86_expand_strlensi_unroll_1 (out, align_rtx, scratch)\n        tmp = gen_rtx_EQ (VOIDmode, tmp, const0_rtx);\n        emit_insn (gen_rtx_SET (VOIDmode, out,\n \t\t\t       gen_rtx_IF_THEN_ELSE (SImode, tmp,\n-\t\t\t\t       \t\t     reg,\n-\t\t\t\t       \t\t     out)));\n+\t\t\t\t\t\t     reg,\n+\t\t\t\t\t\t     out)));\n \n     }\n   else\n@@ -7581,7 +7581,7 @@ void\n ix86_init_builtins ()\n {\n   struct builtin_description * d;\n-  int i;\n+  size_t i;\n   tree endlink = void_list_node;\n \n   tree pchar_type_node = build_pointer_type (char_type_node);\n@@ -8231,7 +8231,7 @@ ix86_expand_builtin (exp, target, subtarget, mode, ignore)\n      int ignore ATTRIBUTE_UNUSED;\n {\n   struct builtin_description *d;\n-  int i;\n+  size_t i;\n   enum insn_code icode;\n   tree fndecl = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n   tree arglist = TREE_OPERAND (exp, 1);"}, {"sha": "3e14f39b8dbeeb4a5e3ed7657dba42c685bf018c", "filename": "gcc/gencodes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77ebd4356e5a4498097405575bbfe0d56e21cd8a/gcc%2Fgencodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77ebd4356e5a4498097405575bbfe0d56e21cd8a/gcc%2Fgencodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencodes.c?ref=77ebd4356e5a4498097405575bbfe0d56e21cd8a", "patch": "@@ -60,7 +60,7 @@ output_predicate_decls ()\n   } predicate[] = {\n     PREDICATE_CODES\n   };\n-  int i;\n+  size_t i;\n \n   putc ('\\n', stdout);\n   puts (\"struct rtx_def;\\n#include \\\"machmode.h\\\"\\n\");"}]}