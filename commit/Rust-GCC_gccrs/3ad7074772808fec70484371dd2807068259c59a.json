{"sha": "3ad7074772808fec70484371dd2807068259c59a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FkNzA3NDc3MjgwOGZlYzcwNDg0MzcxZGQyODA3MDY4MjU5YzU5YQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-09-21T10:34:48Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-09-21T10:34:48Z"}, "message": "PR libstdc++/29134 (ext/vstring bits)\n\n2006-09-21  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/29134 (ext/vstring bits)\n\t* include/ext/sso_string_base.h (__sso_string_base<>::_S_max_size):\n\tRemove.\n\t(__sso_string_base<>::_M_max_size): Use allocator' max_size.\n\t(__sso_string_base<>::_M_create): Adjust.\n\t* include/ext/vstring.h: Minor comment tweak.\n\t* testsuite/ext/vstring/capacity/29134.cc: New.\n\nFrom-SVN: r117109", "tree": {"sha": "3a670308fc2c1ce3157c9bdd5cda22115dd848ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a670308fc2c1ce3157c9bdd5cda22115dd848ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ad7074772808fec70484371dd2807068259c59a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ad7074772808fec70484371dd2807068259c59a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ad7074772808fec70484371dd2807068259c59a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ad7074772808fec70484371dd2807068259c59a/comments", "author": null, "committer": null, "parents": [{"sha": "93c2177feab463cbf3cc9cba61d4bdd37271d783", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93c2177feab463cbf3cc9cba61d4bdd37271d783", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93c2177feab463cbf3cc9cba61d4bdd37271d783"}], "stats": {"total": 76, "additions": 54, "deletions": 22}, "files": [{"sha": "8e0014aad7516da97c50e7a1a953a4fc933822e2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad7074772808fec70484371dd2807068259c59a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad7074772808fec70484371dd2807068259c59a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3ad7074772808fec70484371dd2807068259c59a", "patch": "@@ -1,3 +1,13 @@\n+2006-09-21  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/29134 (ext/vstring bits)\n+\t* include/ext/sso_string_base.h (__sso_string_base<>::_S_max_size):\n+\tRemove.\n+\t(__sso_string_base<>::_M_max_size): Use allocator' max_size.\n+\t(__sso_string_base<>::_M_create): Adjust.\n+\t* include/ext/vstring.h: Minor comment tweak.\n+\t* testsuite/ext/vstring/capacity/29134.cc: New.\n+\n 2006-09-20  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/29134"}, {"sha": "24cd160be114dc3e9c34d9be3900dc8a37b5bf1d", "filename": "libstdc++-v3/include/ext/sso_string_base.h", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad7074772808fec70484371dd2807068259c59a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad7074772808fec70484371dd2807068259c59a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h?ref=3ad7074772808fec70484371dd2807068259c59a", "patch": "@@ -51,21 +51,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       typedef typename _CharT_alloc_type::size_type\t    size_type;\n       \n     private:\n-      // The maximum number of individual char_type elements of an\n-      // individual string is determined by _S_max_size. This is the\n-      // value that will be returned by max_size().  (Whereas npos\n-      // is the maximum number of bytes the allocator can allocate.)\n-      // If one was to divvy up the theoretical largest size string,\n-      // with a terminating character and m _CharT elements, it'd\n-      // look like this:\n-      // npos = m * sizeof(_CharT) + sizeof(_CharT)\n-      // Solving for m:\n-      // m = npos / sizeof(_CharT) - 1\n-      // In addition, this implementation halfs this amount.\n-      enum { _S_max_size = (((static_cast<size_type>(-1)\n-\t\t\t      / sizeof(_CharT)) - 1) / 2) };\n-\n-      // Data Members (private):\n+      // Data Members:\n       typename _Util_Base::template _Alloc_hider<_CharT_alloc_type>\n                                                             _M_dataplus;\n       size_type                                             _M_string_length;\n@@ -151,7 +137,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     public:\n       size_type\n       _M_max_size() const\n-      { return size_type(_S_max_size); }\n+      { return (_M_dataplus._CharT_alloc_type::max_size() - 1) / 2; }\n \n       _CharT*\n       _M_data() const\n@@ -322,7 +308,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     {\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 83.  String::npos vs. string::max_size()\n-      if (__capacity > size_type(_S_max_size))\n+      if (__capacity > _M_max_size())\n \tstd::__throw_length_error(__N(\"__sso_string_base::_M_create\"));\n \n       // The below implements an exponential growth policy, necessary to\n@@ -331,9 +317,9 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)\n \t{\n \t  __capacity = 2 * __old_capacity;\n-\t  // Never allocate a string bigger than _S_max_size.\n-\t  if (__capacity > size_type(_S_max_size))\n-\t    __capacity = size_type(_S_max_size);\n+\t  // Never allocate a string bigger than max_size.\n+\t  if (__capacity > _M_max_size())\n+\t    __capacity = _M_max_size();\n \t}\n \n       // NB: Need an array of char_type[__capacity], plus a terminating"}, {"sha": "62e9673d3efe25e4ae8d1f2e974d2e8d4d35a5dc", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad7074772808fec70484371dd2807068259c59a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad7074772808fec70484371dd2807068259c59a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=3ad7074772808fec70484371dd2807068259c59a", "patch": "@@ -74,8 +74,6 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       typedef std::reverse_iterator<iterator>\t\t    reverse_iterator;\n \n       // Data Member (public):\n-      // NB: This is an unsigned type, and thus represents the maximum\n-      // size that the allocator can hold.\n       ///  Value returned by various member functions when they fail.\n       static const size_type\tnpos = static_cast<size_type>(-1);\n "}, {"sha": "41658ee0ae9f2ff486204f87f67d07a1d8efd28c", "filename": "libstdc++-v3/testsuite/ext/vstring/capacity/29134.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad7074772808fec70484371dd2807068259c59a/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fcapacity%2F29134.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad7074772808fec70484371dd2807068259c59a/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fcapacity%2F29134.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fcapacity%2F29134.cc?ref=3ad7074772808fec70484371dd2807068259c59a", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 21.3.3 basic_string capacity [lib.string.capacity]\n+\n+#include <ext/vstring.h>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/29134\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::__vstring vs;\n+\n+  VERIFY( vs.max_size() <= vs.get_allocator().max_size() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}