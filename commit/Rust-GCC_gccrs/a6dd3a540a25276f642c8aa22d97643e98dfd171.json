{"sha": "a6dd3a540a25276f642c8aa22d97643e98dfd171", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZkZDNhNTQwYTI1Mjc2ZjY0MmM4YWEyMmQ5NzY0M2U5OGRmZDE3MQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2011-08-29T14:19:32Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T14:19:32Z"}, "message": "a-cbhama.adb, [...]: Add iterator machinery to container packages.\n\n2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* a-cbhama.adb, a-cbhama.ads, a-cborma.adb, a-cborma.ads, a-cobove.adb,\n\ta-cobove.ads, a-coorma.adb, a-coorma.ads: Add iterator machinery to\n\tcontainer packages.\n\nFrom-SVN: r178242", "tree": {"sha": "b5fe93abb86053d3a44b4175d1842263cdd40c03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5fe93abb86053d3a44b4175d1842263cdd40c03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6dd3a540a25276f642c8aa22d97643e98dfd171", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6dd3a540a25276f642c8aa22d97643e98dfd171", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6dd3a540a25276f642c8aa22d97643e98dfd171", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6dd3a540a25276f642c8aa22d97643e98dfd171/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c54796e0c4a857f0c796c50b9c295d75bf7cb600", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c54796e0c4a857f0c796c50b9c295d75bf7cb600", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c54796e0c4a857f0c796c50b9c295d75bf7cb600"}], "stats": {"total": 817, "additions": 787, "deletions": 30}, "files": [{"sha": "048bdce204f2eb4d7b4b29e6271dcc7044a5bf3f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6dd3a540a25276f642c8aa22d97643e98dfd171/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6dd3a540a25276f642c8aa22d97643e98dfd171/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a6dd3a540a25276f642c8aa22d97643e98dfd171", "patch": "@@ -1,3 +1,9 @@\n+2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* a-cbhama.adb, a-cbhama.ads, a-cborma.adb, a-cborma.ads, a-cobove.adb,\n+\ta-cobove.ads, a-coorma.adb, a-coorma.ads: Add iterator machinery to\n+\tcontainer packages.\n+\n 2011-08-29  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch3.adb, sem_util.adb, gnat1drv.adb, s-parint.ads: Minor"}, {"sha": "195d07c268ebed293e8e51101f7b1b6a42b7c731", "filename": "gcc/ada/a-cbhama.adb", "status": "modified", "additions": 94, "deletions": 1, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6dd3a540a25276f642c8aa22d97643e98dfd171/gcc%2Fada%2Fa-cbhama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6dd3a540a25276f642c8aa22d97643e98dfd171/gcc%2Fada%2Fa-cbhama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbhama.adb?ref=a6dd3a540a25276f642c8aa22d97643e98dfd171", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,6 +38,18 @@ with System;  use type System.Address;\n \n package body Ada.Containers.Bounded_Hashed_Maps is\n \n+   type Iterator is new\n+     Map_Iterator_Interfaces.Forward_Iterator with record\n+        Container : Map_Access;\n+        Node      : Count_Type;\n+     end record;\n+\n+   overriding function First (Object : Iterator) return Cursor;\n+\n+   overriding function Next\n+     (Object   : Iterator;\n+      Position : Cursor) return Cursor;\n+\n    -----------------------\n    -- Local Subprograms --\n    -----------------------\n@@ -411,6 +423,18 @@ package body Ada.Containers.Bounded_Hashed_Maps is\n       return Cursor'(Container'Unrestricted_Access, Node);\n    end First;\n \n+   function First (Object : Iterator) return Cursor is\n+      M : constant Map_Access  := Object.Container;\n+      N : constant Count_Type  := HT_Ops.First (M.all);\n+\n+   begin\n+      if N = 0 then\n+         return No_Element;\n+      end if;\n+\n+      return Cursor'(Object.Container.all'Unchecked_Access, N);\n+   end First;\n+\n    -----------------\n    -- Has_Element --\n    -----------------\n@@ -652,6 +676,15 @@ package body Ada.Containers.Bounded_Hashed_Maps is\n       B := B - 1;\n    end Iterate;\n \n+   function Iterate\n+     (Container : Map) return Map_Iterator_Interfaces.Forward_Iterator'class\n+   is\n+      Node : constant Count_Type := HT_Ops.First (Container);\n+      It   : constant Iterator   := (Container'Unrestricted_Access, Node);\n+   begin\n+      return It;\n+   end Iterate;\n+\n    ---------\n    -- Key --\n    ---------\n@@ -733,6 +766,18 @@ package body Ada.Containers.Bounded_Hashed_Maps is\n       Position := Next (Position);\n    end Next;\n \n+   function Next\n+     (Object   : Iterator;\n+      Position : Cursor) return Cursor\n+   is\n+   begin\n+      if Position.Node = 0 then\n+         return No_Element;\n+      else\n+         return (Object.Container, Next (Position).Node);\n+      end if;\n+   end Next;\n+\n    -------------------\n    -- Query_Element --\n    -------------------\n@@ -832,6 +877,38 @@ package body Ada.Containers.Bounded_Hashed_Maps is\n       raise Program_Error with \"attempt to stream map cursor\";\n    end Read;\n \n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Read;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Read;\n+\n+   ---------------\n+   -- Reference --\n+   ---------------\n+\n+   function Constant_Reference (Container : Map; Key : Key_Type)\n+   return Constant_Reference_Type is\n+   begin\n+      return (Element => Container.Element (Key)'Unrestricted_Access);\n+   end Constant_Reference;\n+\n+   function Reference (Container : Map; Key : Key_Type)\n+   return Reference_Type is\n+   begin\n+      return (Element => Container.Element (Key)'Unrestricted_Access);\n+   end Reference;\n+\n    -------------\n    -- Replace --\n    -------------\n@@ -1065,4 +1142,20 @@ package body Ada.Containers.Bounded_Hashed_Maps is\n       raise Program_Error with \"attempt to stream map cursor\";\n    end Write;\n \n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Write;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Write;\n+\n end Ada.Containers.Bounded_Hashed_Maps;"}, {"sha": "94860f99cc0f872078ffc5d65aa3c291fa8cf3e6", "filename": "gcc/ada/a-cbhama.ads", "status": "modified", "additions": 66, "deletions": 7, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6dd3a540a25276f642c8aa22d97643e98dfd171/gcc%2Fada%2Fa-cbhama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6dd3a540a25276f642c8aa22d97643e98dfd171/gcc%2Fada%2Fa-cbhama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbhama.ads?ref=a6dd3a540a25276f642c8aa22d97643e98dfd171", "patch": "@@ -32,7 +32,8 @@\n ------------------------------------------------------------------------------\n \n private with Ada.Containers.Hash_Tables;\n-private with Ada.Streams;\n+with Ada.Streams; use Ada.Streams;\n+with Ada.Iterator_Interfaces;\n \n generic\n    type Key_Type is private;\n@@ -46,7 +47,13 @@ package Ada.Containers.Bounded_Hashed_Maps is\n    pragma Pure;\n    pragma Remote_Types;\n \n-   type Map (Capacity : Count_Type; Modulus : Hash_Type) is tagged private;\n+   type Map (Capacity : Count_Type; Modulus : Hash_Type) is tagged private\n+   with\n+      Constant_Indexing => Constant_Reference,\n+      Variable_Indexing => Reference,\n+      Default_Iterator  => Iterate,\n+      Iterator_Element  => Element_Type;\n+\n    pragma Preelaborable_Initialization (Map);\n \n    type Cursor is private;\n@@ -60,6 +67,12 @@ package Ada.Containers.Bounded_Hashed_Maps is\n    --  Cursor objects declared without an initialization expression are\n    --  initialized to the value No_Element.\n \n+   function Has_Element (Position : Cursor) return Boolean;\n+   --  Equivalent to Position /= No_Element\n+\n+   package Map_Iterator_Interfaces is new\n+     Ada.Iterator_Interfaces (Cursor, Has_Element);\n+\n    function \"=\" (Left, Right : Map) return Boolean;\n    --  For each key/element pair in Left, equality attempts to find the key in\n    --  Right; if a search fails the equality returns False. The search works by\n@@ -253,9 +266,6 @@ package Ada.Containers.Bounded_Hashed_Maps is\n    function Element (Container : Map; Key : Key_Type) return Element_Type;\n    --  Equivalent to Element (Find (Container, Key))\n \n-   function Has_Element (Position : Cursor) return Boolean;\n-   --  Equivalent to Position /= No_Element\n-\n    function Equivalent_Keys (Left, Right : Cursor) return Boolean;\n    --  Returns the result of calling Equivalent_Keys with the keys of the nodes\n    --  designated by cursors Left and Right.\n@@ -273,6 +283,50 @@ package Ada.Containers.Bounded_Hashed_Maps is\n       Process   : not null access procedure (Position : Cursor));\n    --  Calls Process for each node in the map\n \n+   function Iterate (Container : Map)\n+      return Map_Iterator_Interfaces.Forward_Iterator'class;\n+\n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type) is\n+   private\n+   with\n+      Implicit_Dereference => Element;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Read use Read;\n+\n+   type Reference_Type (Element : not null access Element_Type) is private\n+   with\n+      Implicit_Dereference => Element;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type);\n+\n+   for Reference_Type'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type);\n+\n+   for Reference_Type'Read use Read;\n+\n+   function Constant_Reference\n+     (Container : Map; Key : Key_Type)    --  SHOULD BE ALIASED\n+   return Constant_Reference_Type;\n+\n+   function Reference (Container : Map; Key : Key_Type)\n+   return Reference_Type;\n+\n private\n    --  pragma Inline (\"=\");\n    pragma Inline (Length);\n@@ -285,7 +339,7 @@ private\n    pragma Inline (Capacity);\n    pragma Inline (Reserve_Capacity);\n    pragma Inline (Has_Element);\n-   pragma Inline (Equivalent_Keys);\n+   --  pragma Inline (Equivalent_Keys);\n    pragma Inline (Next);\n \n    type Node_Type is record\n@@ -301,7 +355,6 @@ private\n       new HT_Types.Hash_Table_Type (Capacity, Modulus) with null record;\n \n    use HT_Types;\n-   use Ada.Streams;\n \n    procedure Write\n      (Stream    : not null access Root_Stream_Type'Class;\n@@ -335,6 +388,12 @@ private\n \n    for Cursor'Write use Write;\n \n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type) is null record;\n+\n+   type Reference_Type\n+      (Element : not null access Element_Type) is null record;\n+\n    No_Element : constant Cursor := (Container => null, Node => 0);\n \n    Empty_Map : constant Map :="}, {"sha": "344f11dfe14c228b8bce7bf5c2a09bfb14ec1543", "filename": "gcc/ada/a-cborma.adb", "status": "modified", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6dd3a540a25276f642c8aa22d97643e98dfd171/gcc%2Fada%2Fa-cborma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6dd3a540a25276f642c8aa22d97643e98dfd171/gcc%2Fada%2Fa-cborma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cborma.adb?ref=a6dd3a540a25276f642c8aa22d97643e98dfd171", "patch": "@@ -39,6 +39,23 @@ with System;  use type System.Address;\n \n package body Ada.Containers.Bounded_Ordered_Maps is\n \n+   type Iterator is new\n+     Map_Iterator_Interfaces.Reversible_Iterator with record\n+        Container : Map_Access;\n+        Node      : Count_Type;\n+     end record;\n+\n+   overriding function First (Object : Iterator) return Cursor;\n+   overriding function Last  (Object : Iterator) return Cursor;\n+\n+   overriding function Next\n+     (Object   : Iterator;\n+      Position : Cursor) return Cursor;\n+\n+   overriding function Previous\n+     (Object   : Iterator;\n+      Position : Cursor) return Cursor;\n+\n    -----------------------------\n    -- Node Access Subprograms --\n    -----------------------------\n@@ -563,6 +580,17 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n       return Cursor'(Container'Unrestricted_Access, Container.First);\n    end First;\n \n+   function First (Object : Iterator) return Cursor is\n+      F : constant Count_Type := Object.Container.First;\n+   begin\n+      if F = 0 then\n+         return No_Element;\n+      end if;\n+\n+      return\n+        Cursor'(Object.Container.all'Unchecked_Access, F);\n+   end First;\n+\n    -------------------\n    -- First_Element --\n    -------------------\n@@ -853,6 +881,23 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n       B := B - 1;\n    end Iterate;\n \n+   function Iterate\n+     (Container : Map) return Map_Iterator_Interfaces.Forward_Iterator'class\n+   is\n+      It : constant Iterator :=\n+                      (Container'Unrestricted_Access, Container.First);\n+   begin\n+      return It;\n+   end Iterate;\n+\n+   function Iterate (Container : Map; Start : Cursor)\n+      return Map_Iterator_Interfaces.Reversible_Iterator'class\n+   is\n+      It : constant Iterator := (Container'Unrestricted_Access, Start.Node);\n+   begin\n+      return It;\n+   end Iterate;\n+\n    ---------\n    -- Key --\n    ---------\n@@ -883,6 +928,17 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n       return Cursor'(Container'Unrestricted_Access, Container.Last);\n    end Last;\n \n+   function Last (Object : Iterator) return Cursor is\n+      F : constant Count_Type := Object.Container.Last;\n+   begin\n+      if F = 0 then\n+         return No_Element;\n+      end if;\n+\n+      return\n+        Cursor'(Object.Container.all'Unchecked_Access, F);\n+   end Last;\n+\n    ------------------\n    -- Last_Element --\n    ------------------\n@@ -978,6 +1034,15 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n       end;\n    end Next;\n \n+   function Next\n+     (Object   : Iterator;\n+      Position : Cursor) return Cursor\n+   is\n+      pragma Unreferenced (Object);\n+   begin\n+      return Next (Position);\n+   end Next;\n+\n    ------------\n    -- Parent --\n    ------------\n@@ -1020,6 +1085,15 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n       end;\n    end Previous;\n \n+   function Previous\n+     (Object   : Iterator;\n+      Position : Cursor) return Cursor\n+   is\n+      pragma Unreferenced (Object);\n+   begin\n+      return Previous (Position);\n+   end Previous;\n+\n    -------------------\n    -- Query_Element --\n    -------------------\n@@ -1104,6 +1178,40 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n       raise Program_Error with \"attempt to stream map cursor\";\n    end Read;\n \n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Read;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Read;\n+\n+   ---------------\n+   -- Reference --\n+   ---------------\n+\n+   function Constant_Reference (Container : Map; Key : Key_Type)\n+     return Constant_Reference_Type\n+   is\n+   begin\n+      return (Element => Container.Element (Key)'Unrestricted_Access);\n+   end Constant_Reference;\n+\n+   function Reference (Container : Map; Key : Key_Type)\n+     return Reference_Type\n+   is\n+   begin\n+      return (Element => Container.Element (Key)'Unrestricted_Access);\n+   end Reference;\n+\n    -------------\n    -- Replace --\n    -------------\n@@ -1345,4 +1453,20 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n       raise Program_Error with \"attempt to stream map cursor\";\n    end Write;\n \n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Write;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Write;\n+\n end Ada.Containers.Bounded_Ordered_Maps;"}, {"sha": "6be977781d463efcfa56c0301180839747bd62fe", "filename": "gcc/ada/a-cborma.ads", "status": "modified", "additions": 65, "deletions": 5, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6dd3a540a25276f642c8aa22d97643e98dfd171/gcc%2Fada%2Fa-cborma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6dd3a540a25276f642c8aa22d97643e98dfd171/gcc%2Fada%2Fa-cborma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cborma.ads?ref=a6dd3a540a25276f642c8aa22d97643e98dfd171", "patch": "@@ -32,7 +32,8 @@\n ------------------------------------------------------------------------------\n \n private with Ada.Containers.Red_Black_Trees;\n-private with Ada.Streams;\n+with Ada.Streams; use Ada.Streams;\n+with Ada.Iterator_Interfaces;\n \n generic\n    type Key_Type is private;\n@@ -47,7 +48,13 @@ package Ada.Containers.Bounded_Ordered_Maps is\n \n    function Equivalent_Keys (Left, Right : Key_Type) return Boolean;\n \n-   type Map (Capacity : Count_Type) is tagged private;\n+   type Map (Capacity : Count_Type) is tagged private\n+   with\n+      constant_Indexing => Constant_Reference,\n+      Variable_Indexing => Reference,\n+      Default_Iterator  => Iterate,\n+      Iterator_Element  => Element_Type;\n+\n    pragma Preelaborable_Initialization (Map);\n \n    type Cursor is private;\n@@ -56,6 +63,10 @@ package Ada.Containers.Bounded_Ordered_Maps is\n    Empty_Map : constant Map;\n \n    No_Element : constant Cursor;\n+   function Has_Element (Position : Cursor) return Boolean;\n+\n+   package Map_Iterator_Interfaces is new\n+     Ada.Iterator_Interfaces (Cursor, Has_Element);\n \n    function \"=\" (Left, Right : Map) return Boolean;\n \n@@ -159,8 +170,6 @@ package Ada.Containers.Bounded_Ordered_Maps is\n \n    function Contains (Container : Map; Key : Key_Type) return Boolean;\n \n-   function Has_Element (Position : Cursor) return Boolean;\n-\n    function \"<\" (Left, Right : Cursor) return Boolean;\n \n    function \">\" (Left, Right : Cursor) return Boolean;\n@@ -173,10 +182,56 @@ package Ada.Containers.Bounded_Ordered_Maps is\n \n    function \">\" (Left : Key_Type; Right : Cursor) return Boolean;\n \n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type) is private\n+   with\n+      Implicit_Dereference => Element;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Read use Read;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Write use Write;\n+\n+   type Reference_Type (Element : not null access Element_Type) is private\n+   with\n+      Implicit_Dereference => Element;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type);\n+\n+   for Reference_Type'Read use Read;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type);\n+\n+   for Reference_Type'Write use Write;\n+\n+   function Constant_Reference\n+     (Container : Map; Key : Key_Type)    --  SHOULD BE ALIASED\n+   return Constant_Reference_Type;\n+\n+   function Reference (Container : Map; Key : Key_Type)\n+   return Reference_Type;\n+\n    procedure Iterate\n      (Container : Map;\n       Process   : not null access procedure (Position : Cursor));\n \n+   function Iterate (Container : Map)\n+      return Map_Iterator_Interfaces.Forward_Iterator'class;\n+\n+   function Iterate (Container : Map; Start : Cursor)\n+      return Map_Iterator_Interfaces.Reversible_Iterator'class;\n+\n    procedure Reverse_Iterate\n      (Container : Map;\n       Process   : not null access procedure (Position : Cursor));\n@@ -206,7 +261,6 @@ private\n \n    use Red_Black_Trees;\n    use Tree_Types;\n-   use Ada.Streams;\n \n    type Cursor is record\n       Container : Map_Access;\n@@ -239,6 +293,12 @@ private\n \n    for Map'Read use Read;\n \n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type) is null record;\n+\n+   type Reference_Type\n+      (Element : not null access Element_Type) is null record;\n+\n    Empty_Map : constant Map := Map'(Tree_Type with Capacity => 0);\n \n end Ada.Containers.Bounded_Ordered_Maps;"}, {"sha": "e4b46f260120a5196d426d5f4e651b19bc526e00", "filename": "gcc/ada/a-cobove.adb", "status": "modified", "additions": 164, "deletions": 3, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6dd3a540a25276f642c8aa22d97643e98dfd171/gcc%2Fada%2Fa-cobove.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6dd3a540a25276f642c8aa22d97643e98dfd171/gcc%2Fada%2Fa-cobove.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cobove.adb?ref=a6dd3a540a25276f642c8aa22d97643e98dfd171", "patch": "@@ -32,6 +32,23 @@ with System; use type System.Address;\n \n package body Ada.Containers.Bounded_Vectors is\n \n+   type Iterator is new\n+     Vector_Iterator_Interfaces.Reversible_Iterator with record\n+      Container : Vector_Access;\n+      Index     : Index_Type;\n+   end record;\n+\n+   overriding function First (Object : Iterator) return Cursor;\n+   overriding function Last  (Object : Iterator) return Cursor;\n+\n+   overriding function Next\n+     (Object   : Iterator;\n+      Position : Cursor) return Cursor;\n+\n+   overriding function Previous\n+     (Object   : Iterator;\n+      Position : Cursor) return Cursor;\n+\n    -----------------------\n    -- Local Subprograms --\n    -----------------------\n@@ -701,6 +718,15 @@ package body Ada.Containers.Bounded_Vectors is\n       return (Container'Unrestricted_Access, Index_Type'First);\n    end First;\n \n+   function First (Object : Iterator) return Cursor is\n+   begin\n+      if Is_Empty (Object.Container.all) then\n+         return No_Element;\n+      end if;\n+\n+      return  Cursor'(Object.Container, Index_Type'First);\n+   end First;\n+\n    -------------------\n    -- First_Element --\n    -------------------\n@@ -1589,6 +1615,20 @@ package body Ada.Containers.Bounded_Vectors is\n       B := B - 1;\n    end Iterate;\n \n+   function Iterate (Container : Vector)\n+      return Vector_Iterator_Interfaces.Reversible_Iterator'Class\n+   is\n+   begin\n+      return Iterator'(Container'Unrestricted_Access, Index_Type'First);\n+   end Iterate;\n+\n+   function Iterate (Container : Vector; Start : Cursor)\n+      return Vector_Iterator_Interfaces.Reversible_Iterator'class\n+   is\n+   begin\n+      return Iterator'(Container'Unrestricted_Access, Start.Index);\n+   end Iterate;\n+\n    ----------\n    -- Last --\n    ----------\n@@ -1602,6 +1642,15 @@ package body Ada.Containers.Bounded_Vectors is\n       return (Container'Unrestricted_Access, Container.Last);\n    end Last;\n \n+   function Last (Object : Iterator) return Cursor is\n+   begin\n+      if Is_Empty (Object.Container.all) then\n+         return No_Element;\n+      end if;\n+\n+      return Cursor'(Object.Container, Object.Container.Last);\n+   end Last;\n+\n    ------------------\n    -- Last_Element --\n    ------------------\n@@ -1713,9 +1762,14 @@ package body Ada.Containers.Bounded_Vectors is\n       return No_Element;\n    end Next;\n \n-   ----------\n-   -- Next --\n-   ----------\n+   function Next (Object : Iterator; Position : Cursor) return Cursor is\n+   begin\n+      if Position.Index = Object.Container.Last then\n+         return  No_Element;\n+      else\n+         return (Object.Container, Position.Index + 1);\n+      end if;\n+   end Next;\n \n    procedure Next (Position : in out Cursor) is\n    begin\n@@ -1781,6 +1835,15 @@ package body Ada.Containers.Bounded_Vectors is\n       return No_Element;\n    end Previous;\n \n+   function Previous (Object : Iterator; Position : Cursor) return Cursor is\n+   begin\n+      if Position.Index > Index_Type'First then\n+         return (Object.Container, Position.Index - 1);\n+      else\n+         return No_Element;\n+      end if;\n+   end Previous;\n+\n    -------------------\n    -- Query_Element --\n    -------------------\n@@ -1860,6 +1923,88 @@ package body Ada.Containers.Bounded_Vectors is\n       raise Program_Error with \"attempt to stream vector cursor\";\n    end Read;\n \n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Read;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Read;\n+\n+   ---------------\n+   -- Reference --\n+   ---------------\n+\n+   function Constant_Reference\n+     (Container : Vector; Position : Cursor)    --  SHOULD BE ALIASED\n+   return Constant_Reference_Type is\n+   begin\n+      pragma Unreferenced (Container);\n+\n+      if Position.Container = null then\n+         raise Constraint_Error with \"Position cursor has no element\";\n+      end if;\n+\n+      if Position.Index > Position.Container.Last then\n+         raise Constraint_Error with \"Position cursor is out of range\";\n+      end if;\n+\n+      return\n+       (Element =>\n+          Position.Container.Elements\n+            (To_Array_Index (Position.Index))'Access);\n+   end Constant_Reference;\n+\n+   function Constant_Reference\n+     (Container : Vector; Position : Index_Type)\n+   return Constant_Reference_Type is\n+   begin\n+      if (Position) > Container.Last then\n+         raise Constraint_Error with \"Index is out of range\";\n+      end if;\n+\n+      return (Element =>\n+        Container.Elements (To_Array_Index (Position))'Access);\n+   end Constant_Reference;\n+\n+   function Reference (Container : Vector; Position : Cursor)\n+   return Reference_Type is\n+   begin\n+      pragma Unreferenced (Container);\n+\n+      if Position.Container = null then\n+         raise Constraint_Error with \"Position cursor has no element\";\n+      end if;\n+\n+      if Position.Index > Position.Container.Last then\n+         raise Constraint_Error with \"Position cursor is out of range\";\n+      end if;\n+\n+      return\n+        (Element =>\n+            Position.Container.Elements\n+             (To_Array_Index (Position.Index))'Access);\n+   end Reference;\n+\n+   function Reference (Container : Vector; Position : Index_Type)\n+   return Reference_Type is\n+   begin\n+      if Position > Container.Last then\n+         raise Constraint_Error with \"Index is out of range\";\n+      end if;\n+\n+      return (Element =>\n+        Container.Elements (To_Array_Index (Position))'Unrestricted_Access);\n+   end Reference;\n+\n    ---------------------\n    -- Replace_Element --\n    ---------------------\n@@ -2436,4 +2581,20 @@ package body Ada.Containers.Bounded_Vectors is\n       raise Program_Error with \"attempt to stream vector cursor\";\n    end Write;\n \n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Write;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Write;\n+\n end Ada.Containers.Bounded_Vectors;"}, {"sha": "42c8d21ac7942f6987d1bd409f5b654a57295bca", "filename": "gcc/ada/a-cobove.ads", "status": "modified", "additions": 74, "deletions": 7, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6dd3a540a25276f642c8aa22d97643e98dfd171/gcc%2Fada%2Fa-cobove.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6dd3a540a25276f642c8aa22d97643e98dfd171/gcc%2Fada%2Fa-cobove.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cobove.ads?ref=a6dd3a540a25276f642c8aa22d97643e98dfd171", "patch": "@@ -31,7 +31,8 @@\n -- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n-private with Ada.Streams;\n+with Ada.Streams; use Ada.Streams;\n+with Ada.Iterator_Interfaces;\n \n generic\n    type Index_Type is range <>;\n@@ -49,7 +50,13 @@ package Ada.Containers.Bounded_Vectors is\n \n    No_Index : constant Extended_Index := Extended_Index'First;\n \n-   type Vector (Capacity : Count_Type) is tagged private;\n+   type Vector (Capacity : Count_Type) is tagged private\n+   with\n+      Constant_Indexing => Constant_Reference,\n+      Variable_Indexing => Reference,\n+      Default_Iterator  => Iterate,\n+      Iterator_Element  => Element_Type;\n+\n    pragma Preelaborable_Initialization (Vector);\n \n    type Cursor is private;\n@@ -58,6 +65,10 @@ package Ada.Containers.Bounded_Vectors is\n    Empty_Vector : constant Vector;\n \n    No_Element : constant Cursor;\n+   function Has_Element (Position : Cursor) return Boolean;\n+\n+   package Vector_Iterator_Interfaces is new\n+      Ada.Iterator_Interfaces (Cursor, Has_Element);\n \n    overriding function \"=\" (Left, Right : Vector) return Boolean;\n \n@@ -281,8 +292,6 @@ package Ada.Containers.Bounded_Vectors is\n      (Container : Vector;\n       Item      : Element_Type) return Boolean;\n \n-   function Has_Element (Position : Cursor) return Boolean;\n-\n    procedure Iterate\n      (Container : Vector;\n       Process   : not null access procedure (Position : Cursor));\n@@ -291,6 +300,60 @@ package Ada.Containers.Bounded_Vectors is\n      (Container : Vector;\n       Process   : not null access procedure (Position : Cursor));\n \n+   function Iterate (Container : Vector)\n+      return Vector_Iterator_Interfaces.Reversible_Iterator'Class;\n+\n+   function Iterate (Container : Vector; Start : Cursor)\n+      return Vector_Iterator_Interfaces.Reversible_Iterator'class;\n+\n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type) is\n+   private\n+   with\n+      Implicit_Dereference => Element;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Read use Read;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Write use Write;\n+\n+   type Reference_Type (Element : not null access Element_Type) is private\n+   with\n+      Implicit_Dereference => Element;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type);\n+\n+   for Reference_Type'Read use Read;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type);\n+\n+   for Reference_Type'Write use Write;\n+\n+   function Constant_Reference\n+     (Container : Vector; Position : Cursor)    --  SHOULD BE ALIASED\n+   return Constant_Reference_Type;\n+\n+   function Constant_Reference\n+     (Container : Vector; Position : Index_Type)\n+   return Constant_Reference_Type;\n+\n+   function Reference (Container : Vector; Position : Cursor)\n+   return Reference_Type;\n+\n+   function Reference (Container : Vector; Position : Index_Type)\n+   return Reference_Type;\n+\n    generic\n       with function \"<\" (Left, Right : Element_Type) return Boolean is <>;\n    package Generic_Sorting is\n@@ -318,7 +381,7 @@ private\n    pragma Inline (Next);\n    pragma Inline (Previous);\n \n-   type Elements_Array is array (Count_Type range <>) of Element_Type;\n+   type Elements_Array is array (Count_Type range <>) of aliased Element_Type;\n    function \"=\" (L, R : Elements_Array) return Boolean is abstract;\n \n    type Vector (Capacity : Count_Type) is tagged record\n@@ -328,8 +391,6 @@ private\n       Lock     : Natural := 0;\n    end record;\n \n-   use Ada.Streams;\n-\n    procedure Write\n      (Stream    : not null access Root_Stream_Type'Class;\n       Container : Vector);\n@@ -362,6 +423,12 @@ private\n \n    for Cursor'Read use Read;\n \n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type) is null record;\n+\n+   type Reference_Type\n+      (Element : not null access Element_Type) is null record;\n+\n    Empty_Vector : constant Vector := (Capacity => 0, others => <>);\n \n    No_Element : constant Cursor := Cursor'(null, Index_Type'First);"}, {"sha": "e5f46c976263b0dfd39d021b157ad8ae50a0e0f7", "filename": "gcc/ada/a-coorma.adb", "status": "modified", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6dd3a540a25276f642c8aa22d97643e98dfd171/gcc%2Fada%2Fa-coorma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6dd3a540a25276f642c8aa22d97643e98dfd171/gcc%2Fada%2Fa-coorma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorma.adb?ref=a6dd3a540a25276f642c8aa22d97643e98dfd171", "patch": "@@ -37,6 +37,23 @@ pragma Elaborate_All (Ada.Containers.Red_Black_Trees.Generic_Keys);\n \n package body Ada.Containers.Ordered_Maps is\n \n+   type Iterator is new\n+     Map_Iterator_Interfaces.Reversible_Iterator with record\n+        Container : Map_Access;\n+        Node      : Node_Access;\n+     end record;\n+\n+   overriding function First (Object : Iterator) return Cursor;\n+   overriding function Last  (Object : Iterator) return Cursor;\n+\n+   overriding function Next\n+     (Object   : Iterator;\n+      Position : Cursor) return Cursor;\n+\n+   overriding function Previous\n+     (Object   : Iterator;\n+      Position : Cursor) return Cursor;\n+\n    -----------------------------\n    -- Node Access Subprograms --\n    -----------------------------\n@@ -445,6 +462,18 @@ package body Ada.Containers.Ordered_Maps is\n       return Cursor'(Container'Unrestricted_Access, T.First);\n    end First;\n \n+   function First (Object : Iterator) return Cursor is\n+      M : constant Map_Access  := Object.Container;\n+      N : constant Node_Access := M.Tree.First;\n+\n+   begin\n+      if N = null then\n+         return No_Element;\n+      end if;\n+\n+      return Cursor'(Object.Container.all'Unchecked_Access, N);\n+   end First;\n+\n    -------------------\n    -- First_Element --\n    -------------------\n@@ -744,6 +773,24 @@ package body Ada.Containers.Ordered_Maps is\n       B := B - 1;\n    end Iterate;\n \n+   function Iterate\n+     (Container : Map) return Map_Iterator_Interfaces.Forward_Iterator'class\n+   is\n+      Node : constant Node_Access := Container.Tree.First;\n+      It   : constant Iterator := (Container'Unrestricted_Access, Node);\n+\n+   begin\n+      return It;\n+   end Iterate;\n+\n+   function Iterate (Container : Map; Start : Cursor)\n+      return Map_Iterator_Interfaces.Reversible_Iterator'class\n+   is\n+      It : constant Iterator := (Container'Unrestricted_Access, Start.Node);\n+   begin\n+      return It;\n+   end Iterate;\n+\n    ---------\n    -- Key --\n    ---------\n@@ -776,6 +823,18 @@ package body Ada.Containers.Ordered_Maps is\n       return Cursor'(Container'Unrestricted_Access, T.Last);\n    end Last;\n \n+   function Last (Object : Iterator) return Cursor is\n+      M : constant Map_Access  := Object.Container;\n+      N : constant Node_Access := M.Tree.Last;\n+\n+   begin\n+      if N = null then\n+         return No_Element;\n+      end if;\n+\n+      return Cursor'(Object.Container.all'Unchecked_Access, N);\n+   end Last;\n+\n    ------------------\n    -- Last_Element --\n    ------------------\n@@ -867,6 +926,18 @@ package body Ada.Containers.Ordered_Maps is\n       end;\n    end Next;\n \n+   function Next\n+     (Object   : Iterator;\n+      Position : Cursor) return Cursor\n+   is\n+   begin\n+      if Position.Node = null then\n+         return No_Element;\n+      else\n+         return (Object.Container, Tree_Operations.Next (Position.Node));\n+      end if;\n+   end Next;\n+\n    ------------\n    -- Parent --\n    ------------\n@@ -907,6 +978,17 @@ package body Ada.Containers.Ordered_Maps is\n       end;\n    end Previous;\n \n+   function Previous\n+     (Object   : Iterator;\n+      Position : Cursor) return Cursor\n+   is\n+   begin\n+      if Position.Node = null then\n+         return No_Element;\n+      else\n+         return (Object.Container, Tree_Operations.Previous (Position.Node));\n+      end if;\n+   end Previous;\n    -------------------\n    -- Query_Element --\n    -------------------\n@@ -1000,6 +1082,38 @@ package body Ada.Containers.Ordered_Maps is\n       raise Program_Error with \"attempt to stream map cursor\";\n    end Read;\n \n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Read;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Read;\n+\n+   ---------------\n+   -- Reference --\n+   ---------------\n+\n+   function Constant_Reference (Container : Map; Key : Key_Type)\n+   return Constant_Reference_Type is\n+   begin\n+      return (Element => Container.Element (Key)'Unrestricted_Access);\n+   end Constant_Reference;\n+\n+   function Reference (Container : Map; Key : Key_Type)\n+   return Reference_Type is\n+   begin\n+      return (Element => Container.Element (Key)'Unrestricted_Access);\n+   end Reference;\n+\n    -------------\n    -- Replace --\n    -------------\n@@ -1241,4 +1355,20 @@ package body Ada.Containers.Ordered_Maps is\n       raise Program_Error with \"attempt to stream map cursor\";\n    end Write;\n \n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Write;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Write;\n+\n end Ada.Containers.Ordered_Maps;"}, {"sha": "04fe1cf05c3fae7e969b0e52c72ec4b4b7e33cf6", "filename": "gcc/ada/a-coorma.ads", "status": "modified", "additions": 64, "deletions": 7, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6dd3a540a25276f642c8aa22d97643e98dfd171/gcc%2Fada%2Fa-coorma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6dd3a540a25276f642c8aa22d97643e98dfd171/gcc%2Fada%2Fa-coorma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorma.ads?ref=a6dd3a540a25276f642c8aa22d97643e98dfd171", "patch": "@@ -33,7 +33,8 @@\n \n private with Ada.Containers.Red_Black_Trees;\n private with Ada.Finalization;\n-private with Ada.Streams;\n+with Ada.Streams; use Ada.Streams;\n+with Ada.Iterator_Interfaces;\n \n generic\n    type Key_Type is private;\n@@ -48,15 +49,23 @@ package Ada.Containers.Ordered_Maps is\n \n    function Equivalent_Keys (Left, Right : Key_Type) return Boolean;\n \n-   type Map is tagged private;\n-   pragma Preelaborable_Initialization (Map);\n+   type Map is tagged private\n+   with\n+      constant_Indexing => Constant_Reference,\n+      Variable_Indexing => Reference,\n+      Default_Iterator  => Iterate,\n+      Iterator_Element  => Element_Type;\n \n    type Cursor is private;\n    pragma Preelaborable_Initialization (Cursor);\n \n    Empty_Map : constant Map;\n \n    No_Element : constant Cursor;\n+   function Has_Element (Position : Cursor) return Boolean;\n+\n+   package Map_Iterator_Interfaces is new\n+     Ada.Iterator_Interfaces (Cursor, Has_Element);\n \n    function \"=\" (Left, Right : Map) return Boolean;\n \n@@ -156,8 +165,6 @@ package Ada.Containers.Ordered_Maps is\n \n    function Contains (Container : Map; Key : Key_Type) return Boolean;\n \n-   function Has_Element (Position : Cursor) return Boolean;\n-\n    function \"<\" (Left, Right : Cursor) return Boolean;\n \n    function \">\" (Left, Right : Cursor) return Boolean;\n@@ -170,10 +177,56 @@ package Ada.Containers.Ordered_Maps is\n \n    function \">\" (Left : Key_Type; Right : Cursor) return Boolean;\n \n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type) is private\n+   with\n+      Implicit_Dereference => Element;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Read use Read;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Write use Write;\n+\n+   type Reference_Type (Element : not null access Element_Type) is private\n+   with\n+      Implicit_Dereference => Element;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type);\n+\n+   for Reference_Type'Read use Read;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type);\n+\n+   for Reference_Type'Write use Write;\n+\n+   function Constant_Reference\n+     (Container : Map; Key : Key_Type)    --  SHOULD BE ALIASED\n+   return Constant_Reference_Type;\n+\n+   function Reference (Container : Map; Key : Key_Type)\n+   return Reference_Type;\n+\n    procedure Iterate\n      (Container : Map;\n       Process   : not null access procedure (Position : Cursor));\n \n+   function Iterate (Container : Map)\n+      return Map_Iterator_Interfaces.Forward_Iterator'class;\n+\n+   function Iterate (Container : Map; Start : Cursor)\n+      return Map_Iterator_Interfaces.Reversible_Iterator'class;\n+\n    procedure Reverse_Iterate\n      (Container : Map;\n       Process   : not null access procedure (Position : Cursor));\n@@ -209,7 +262,6 @@ private\n    use Red_Black_Trees;\n    use Tree_Types;\n    use Ada.Finalization;\n-   use Ada.Streams;\n \n    type Map_Access is access all Map;\n    for Map_Access'Storage_Size use 0;\n@@ -245,12 +297,17 @@ private\n \n    for Map'Read use Read;\n \n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type) is null record;\n+\n+   type Reference_Type\n+      (Element : not null access Element_Type) is null record;\n+\n    Empty_Map : constant Map :=\n                  (Controlled with Tree => (First  => null,\n                                            Last   => null,\n                                            Root   => null,\n                                            Length => 0,\n                                            Busy   => 0,\n                                            Lock   => 0));\n-\n end Ada.Containers.Ordered_Maps;"}]}