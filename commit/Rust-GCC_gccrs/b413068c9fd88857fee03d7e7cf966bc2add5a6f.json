{"sha": "b413068c9fd88857fee03d7e7cf966bc2add5a6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQxMzA2OGM5ZmQ4ODg1N2ZlZTAzZDdlN2NmOTY2YmMyYWRkNWE2Zg==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-09-05T17:31:17Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-09-05T17:31:17Z"}, "message": "hooks.c (hook_int_rtx_mode_as_bool_0): New function.\n\n\t* hooks.c (hook_int_rtx_mode_as_bool_0): New function.\n\t* hooks.h (hook_int_rtx_mode_as_bool_0): Declare it.\n\t* output.h (default_address_cost): Add machine_mode and address space\n\targuments.\n\t* target.def (address_cost): Likewise.\n\t* rtlanal.c (address_cost): Pass mode and address space to target hook.\n\t(default_address_cost): Add unnamed machine_mode and address space\n\targuments.\n\t* doc/tm.texi: Regenerate.\n\t* config/alpha/alpha.c (TARGET_ADDRESS_COST): Use\n\thook_int_rtx_mode_as_bool_0 instead of hook_int_rtx_bool_0.\n\t* config/arm/arm.c (arm_address_cost): Add machine_mode and address\n\tspace arguments.\n\t* config/avr/avr.c (avr_address_cost): Likewise.\n\t* config/bfin/bfin.c (bfin_address_cost): Likewise.\n\t* config/cr16/cr16.c (cr16_address_cost): Likewise.\n\t* config/cris/cris.c (cris_address_cost): Likewise.\n\t* config/epiphany/epiphany.c (epiphany_address_cost): Likewise.\n\t* config/i386/i386.c (ix86_address_cost): Likewise.\n\t* config/ia64/ia64.c (TARGET_ADDRESS_COST): Use\n\thook_int_rtx_mode_as_bool_0 instead of hook_int_rtx_bool_0.\n\t* config/iq2000/iq2000.c (iq2000_address_cost): Add machine_mode and\n\taddress space arguments.  Pass them on in recursive invocation.\n\t* config/lm32/lm32.c (TARGET_ADDRESS_COST): Use\n\thook_int_rtx_mode_as_bool_0 instead of hook_int_rtx_bool_0.\n\t* config/m32c/m32c.c (m32c_address_cost): Add machine_mode and address\n\tspace arguments.\n\t* config/m32r/m32r.c (TARGET_ADDRESS_COST): Use\n\thook_int_rtx_mode_as_bool_0 instead of hook_int_rtx_bool_0.\n\t* config/mcore/mcore.c (TARGET_ADDRESS_COST): Likewise.\n\t* config/mep/mep.c (mep_address_cost): Add machine_mode and address\n\tspace arguments.\n\t* config/microblaze/microblaze.c (microblaze_address_cost): Likewise.\n\t* config/mips/mips.c (mips_address_cost): Likewise.\n\t* config/mmix/mmix.c (TARGET_ADDRESS_COST): Use\n\thook_int_rtx_mode_as_bool_0 instead of hook_int_rtx_bool_0.\n\t* config/mn10300/mn10300.c (mn10300_address_cost): Add machine_mode and\n\taddress space arguments.\n\t(mn10300_rtx_costs): Pass GET_MODE (x) and MEM_ADDR_SPACE (x) to\n\tmn10300_address_cost.\n\t* config/pa/pa.c (hppa_address_cost): Add machine_mode and address\n\tspace arguments.\n\t* config/rs6000/rs6000.c (rs6000_debug_address_cost): Likewise.\n\t(TARGET_ADDRESS_COST): Use hook_int_rtx_mode_as_bool_0 instead of\n\thook_int_rtx_bool_0.\n\t* config/rx/rx.c (rx_address_cost): Add machine_mode and address\n\tspace arguments.\n\t* config/s390/s390.c (s390_address_cost): Likewise.\n\t* config/score/score-protos.h (score_address_cost): Likewise.\n\t* config/score/score.c (score_address_cost): Likewise.\n\t* config/sh/sh.c (sh_address_cost): Likewise.\n\t* config/sparc/sparc.c (TARGET_ADDRESS_COST): Use\n\thook_int_rtx_mode_as_bool_0 instead of hook_int_rtx_bool_0.\n\t* config/spu/spu.c (TARGET_ADDRESS_COST): Likewise.\n\t* config/stormy16/stormy16.c (xstormy16_address_cost): Add machine_mode\n\tand address space arguments.\n\t* config/v850/v850.c (TARGET_ADDRESS_COST): Use\n\thook_int_rtx_mode_as_bool_0 instead of hook_int_rtx_bool_0.\n\t* config/vax/vax.c (vax_address_cost): Add machine_mode and address\n\tspace arguments.\n\t* config/xtensa/xtensa (TARGET_ADDRESS_COST): Use\n\thook_int_rtx_mode_as_bool_0 instead of hook_int_rtx_bool_0.\n\nFrom-SVN: r190990", "tree": {"sha": "5b3b7d58a5b8b755cabc510e2ed59a4ede359a01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b3b7d58a5b8b755cabc510e2ed59a4ede359a01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b413068c9fd88857fee03d7e7cf966bc2add5a6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b413068c9fd88857fee03d7e7cf966bc2add5a6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b413068c9fd88857fee03d7e7cf966bc2add5a6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b413068c9fd88857fee03d7e7cf966bc2add5a6f/comments", "author": null, "committer": null, "parents": [{"sha": "04529aba93eae54302ff3f76fc3af987bc28df2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04529aba93eae54302ff3f76fc3af987bc28df2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04529aba93eae54302ff3f76fc3af987bc28df2e"}], "stats": {"total": 212, "additions": 162, "deletions": 50}, "files": [{"sha": "384d9fe7ec8c8767696c57221e38cf412043f33b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -1,3 +1,68 @@\n+2012-09-05  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* hooks.c (hook_int_rtx_mode_as_bool_0): New function.\n+\t* hooks.h (hook_int_rtx_mode_as_bool_0): Declare it.\n+\t* output.h (default_address_cost): Add machine_mode and address space\n+\targuments.\n+\t* target.def (address_cost): Likewise.\n+\t* rtlanal.c (address_cost): Pass mode and address space to target hook.\n+\t(default_address_cost): Add unnamed machine_mode and address space\n+\targuments.\n+\t* doc/tm.texi: Regenerate.\n+\t* config/alpha/alpha.c (TARGET_ADDRESS_COST): Use\n+\thook_int_rtx_mode_as_bool_0 instead of hook_int_rtx_bool_0.\n+\t* config/arm/arm.c (arm_address_cost): Add machine_mode and address\n+\tspace arguments.\n+\t* config/avr/avr.c (avr_address_cost): Likewise.\n+\t* config/bfin/bfin.c (bfin_address_cost): Likewise.\n+\t* config/cr16/cr16.c (cr16_address_cost): Likewise.\n+\t* config/cris/cris.c (cris_address_cost): Likewise.\n+\t* config/epiphany/epiphany.c (epiphany_address_cost): Likewise.\n+\t* config/i386/i386.c (ix86_address_cost): Likewise.\n+\t* config/ia64/ia64.c (TARGET_ADDRESS_COST): Use\n+\thook_int_rtx_mode_as_bool_0 instead of hook_int_rtx_bool_0.\n+\t* config/iq2000/iq2000.c (iq2000_address_cost): Add machine_mode and\n+\taddress space arguments.  Pass them on in recursive invocation.\n+\t* config/lm32/lm32.c (TARGET_ADDRESS_COST): Use\n+\thook_int_rtx_mode_as_bool_0 instead of hook_int_rtx_bool_0.\n+\t* config/m32c/m32c.c (m32c_address_cost): Add machine_mode and address\n+\tspace arguments.\n+\t* config/m32r/m32r.c (TARGET_ADDRESS_COST): Use\n+\thook_int_rtx_mode_as_bool_0 instead of hook_int_rtx_bool_0.\n+\t* config/mcore/mcore.c (TARGET_ADDRESS_COST): Likewise.\n+\t* config/mep/mep.c (mep_address_cost): Add machine_mode and address\n+\tspace arguments.\n+\t* config/microblaze/microblaze.c (microblaze_address_cost): Likewise.\n+\t* config/mips/mips.c (mips_address_cost): Likewise.\n+\t* config/mmix/mmix.c (TARGET_ADDRESS_COST): Use\n+\thook_int_rtx_mode_as_bool_0 instead of hook_int_rtx_bool_0.\n+\t* config/mn10300/mn10300.c (mn10300_address_cost): Add machine_mode and\n+\taddress space arguments.\n+\t(mn10300_rtx_costs): Pass GET_MODE (x) and MEM_ADDR_SPACE (x) to\n+\tmn10300_address_cost.\n+\t* config/pa/pa.c (hppa_address_cost): Add machine_mode and address\n+\tspace arguments.\n+\t* config/rs6000/rs6000.c (rs6000_debug_address_cost): Likewise.\n+\t(TARGET_ADDRESS_COST): Use hook_int_rtx_mode_as_bool_0 instead of\n+\thook_int_rtx_bool_0.\n+\t* config/rx/rx.c (rx_address_cost): Add machine_mode and address\n+\tspace arguments.\n+\t* config/s390/s390.c (s390_address_cost): Likewise.\n+\t* config/score/score-protos.h (score_address_cost): Likewise.\n+\t* config/score/score.c (score_address_cost): Likewise.\n+\t* config/sh/sh.c (sh_address_cost): Likewise.\n+\t* config/sparc/sparc.c (TARGET_ADDRESS_COST): Use\n+\thook_int_rtx_mode_as_bool_0 instead of hook_int_rtx_bool_0.\n+\t* config/spu/spu.c (TARGET_ADDRESS_COST): Likewise.\n+\t* config/stormy16/stormy16.c (xstormy16_address_cost): Add machine_mode\n+\tand address space arguments.\n+\t* config/v850/v850.c (TARGET_ADDRESS_COST): Use\n+\thook_int_rtx_mode_as_bool_0 instead of hook_int_rtx_bool_0.\n+\t* config/vax/vax.c (vax_address_cost): Add machine_mode and address\n+\tspace arguments.\n+\t* config/xtensa/xtensa (TARGET_ADDRESS_COST): Use\n+\thook_int_rtx_mode_as_bool_0 instead of hook_int_rtx_bool_0.\n+\n 2012-09-05   Diego Novillo  <dnovillo@google.com>\n \n \tPR bootstrap/54484"}, {"sha": "6b9fd156a60f076af18310bf35572f2436c12ac2", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -9795,7 +9795,7 @@ alpha_conditional_register_usage (void)\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS alpha_rtx_costs\n #undef TARGET_ADDRESS_COST\n-#define TARGET_ADDRESS_COST hook_int_rtx_bool_0\n+#define TARGET_ADDRESS_COST hook_int_rtx_mode_as_bool_0\n \n #undef TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG alpha_reorg"}, {"sha": "2e9003189b1ff01fd4c11ab3805ff0d9bb2ea1cb", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -162,7 +162,7 @@ static bool arm_fastmul_rtx_costs (rtx, enum rtx_code, enum rtx_code, int *, boo\n static bool arm_xscale_rtx_costs (rtx, enum rtx_code, enum rtx_code, int *, bool);\n static bool arm_9e_rtx_costs (rtx, enum rtx_code, enum rtx_code, int *, bool);\n static bool arm_rtx_costs (rtx, int, int, int, int *, bool);\n-static int arm_address_cost (rtx, bool);\n+static int arm_address_cost (rtx, enum machine_mode, addr_space_t, bool);\n static int arm_register_move_cost (enum machine_mode, reg_class_t, reg_class_t);\n static int arm_memory_move_cost (enum machine_mode, reg_class_t, bool);\n static void arm_init_builtins (void);\n@@ -8411,7 +8411,8 @@ arm_thumb_address_cost (rtx x)\n }\n \n static int\n-arm_address_cost (rtx x, bool speed ATTRIBUTE_UNUSED)\n+arm_address_cost (rtx x, enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t  addr_space_t as ATTRIBUTE_UNUSED, bool speed ATTRIBUTE_UNUSED)\n {\n   return TARGET_32BIT ? arm_arm_address_cost (x) : arm_thumb_address_cost (x);\n }"}, {"sha": "e69e35aaecf8e68af68d0fa26f507b2a874a4481", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -8896,7 +8896,9 @@ avr_rtx_costs (rtx x, int codearg, int outer_code,\n /* Implement `TARGET_ADDRESS_COST'.  */\n \n static int\n-avr_address_cost (rtx x, bool speed ATTRIBUTE_UNUSED)\n+avr_address_cost (rtx x, enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t  addr_space_t as ATTRIBUTE_UNUSED,\n+\t\t  bool speed ATTRIBUTE_UNUSED)\n {\n   int cost = 4;\n   "}, {"sha": "709cea39fce14f5b2011a8e95ac09b1002cacd84", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -1288,7 +1288,10 @@ bfin_dsp_memref_p (rtx x)\n    All addressing modes are equally cheap on the Blackfin.  */\n \n static int\n-bfin_address_cost (rtx addr ATTRIBUTE_UNUSED, bool speed ATTRIBUTE_UNUSED)\n+bfin_address_cost (rtx addr ATTRIBUTE_UNUSED,\n+\t\t   enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t   addr_space_t as ATTRIBUTE_UNUSED,\n+\t\t   bool speed ATTRIBUTE_UNUSED)\n {\n   return 1;\n }"}, {"sha": "7e6f1d2a41c42f1b76216da9b05d35396d6f1aaf", "filename": "gcc/config/cr16/cr16.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fcr16%2Fcr16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fcr16%2Fcr16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcr16%2Fcr16.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -1286,7 +1286,9 @@ cr16_legitimate_address_p (enum machine_mode mode ATTRIBUTE_UNUSED,\n \n /* Return cost of the memory address x.  */\n static int\n-cr16_address_cost (rtx addr, bool speed ATTRIBUTE_UNUSED)\n+cr16_address_cost (rtx addr, enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t   addr_space_t as ATTRIBUTE_UNUSED,\n+\t\t   bool speed ATTRIBUTE_UNUSED)\n {\n   enum cr16_addrtype addrtype;\n   struct cr16_address address;"}, {"sha": "6378c622a25d565781d12cb83d84ba0e6f9c2fd7", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -130,7 +130,7 @@ static reg_class_t cris_preferred_reload_class (rtx, reg_class_t);\n static int cris_register_move_cost (enum machine_mode, reg_class_t, reg_class_t);\n static int cris_memory_move_cost (enum machine_mode, reg_class_t, bool);\n static bool cris_rtx_costs (rtx, int, int, int, int *, bool);\n-static int cris_address_cost (rtx, bool);\n+static int cris_address_cost (rtx, enum machine_mode, addr_space_t, bool);\n static bool cris_pass_by_reference (cumulative_args_t, enum machine_mode,\n \t\t\t\t    const_tree, bool);\n static int cris_arg_partial_bytes (cumulative_args_t, enum machine_mode,\n@@ -2149,7 +2149,9 @@ cris_rtx_costs (rtx x, int code, int outer_code, int opno, int *total,\n /* The ADDRESS_COST worker.  */\n \n static int\n-cris_address_cost (rtx x, bool speed ATTRIBUTE_UNUSED)\n+cris_address_cost (rtx x, enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t   addr_space_t as ATTRIBUTE_UNUSED,\n+\t\t   bool speed ATTRIBUTE_UNUSED)\n {\n   /* The metric to use for the cost-macros is unclear.\n      The metric used here is (the number of cycles needed) / 2,"}, {"sha": "65bb1c8ee8883e861be7011ae45dd50135866ce6", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -729,7 +729,8 @@ epiphany_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n    If ADDR is not a valid address, its cost is irrelevant.  */\n \n static int\n-epiphany_address_cost (rtx addr, bool speed)\n+epiphany_address_cost (rtx addr, enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t       addr_space_t as ATTRIBUTE_UNUSED, bool speed)\n {\n   rtx reg;\n   rtx off = const0_rtx;"}, {"sha": "62d3a8c990b62e0b3746c230a1993cb9cf038706", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -12027,7 +12027,9 @@ ix86_decompose_address (rtx addr, struct ix86_address *out)\n    requires to two regs - that would mean more pseudos with longer\n    lifetimes.  */\n static int\n-ix86_address_cost (rtx x, bool speed ATTRIBUTE_UNUSED)\n+ix86_address_cost (rtx x, enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t   addr_space_t as ATTRIBUTE_UNUSED,\n+\t\t   bool speed ATTRIBUTE_UNUSED)\n {\n   struct ix86_address parts;\n   int cost = 1;"}, {"sha": "984082cb775f4bf056814078209d5342fe2b9d6d", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -524,7 +524,7 @@ static const struct attribute_spec ia64_attribute_table[] =\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS ia64_rtx_costs\n #undef TARGET_ADDRESS_COST\n-#define TARGET_ADDRESS_COST hook_int_rtx_bool_0\n+#define TARGET_ADDRESS_COST hook_int_rtx_mode_as_bool_0\n \n #undef TARGET_UNSPEC_MAY_TRAP_P\n #define TARGET_UNSPEC_MAY_TRAP_P ia64_unspec_may_trap_p"}, {"sha": "da0b43da35b399b90de096941761c9ad478209fd", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -152,7 +152,8 @@ static void iq2000_setup_incoming_varargs (cumulative_args_t,\n \t\t\t\t\t   enum machine_mode, tree, int *,\n \t\t\t\t\t   int);\n static bool iq2000_rtx_costs          (rtx, int, int, int, int *, bool);\n-static int  iq2000_address_cost       (rtx, bool);\n+static int  iq2000_address_cost       (rtx, enum machine_mode, addr_space_t,\n+\t\t\t\t       bool);\n static section *iq2000_select_section (tree, int, unsigned HOST_WIDE_INT);\n static rtx  iq2000_legitimize_address (rtx, rtx, enum machine_mode);\n static bool iq2000_pass_by_reference  (cumulative_args_t, enum machine_mode,\n@@ -779,7 +780,8 @@ iq2000_move_1word (rtx operands[], rtx insn, int unsignedp)\n /* Provide the costs of an addressing mode that contains ADDR.  */\n \n static int\n-iq2000_address_cost (rtx addr, bool speed)\n+iq2000_address_cost (rtx addr, enum machine_mode mode, addr_space_t as,\n+\t\t     bool speed)\n {\n   switch (GET_CODE (addr))\n     {\n@@ -830,7 +832,7 @@ iq2000_address_cost (rtx addr, bool speed)\n \t  case LABEL_REF:\n \t  case HIGH:\n \t  case LO_SUM:\n-\t    return iq2000_address_cost (plus1, speed) + 1;\n+\t    return iq2000_address_cost (plus1, mode, as, speed) + 1;\n \n \t  default:\n \t    break;"}, {"sha": "d9c9e19b0daa009dd19f384a6b47ccad34b50744", "filename": "gcc/config/lm32/lm32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Flm32%2Flm32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Flm32%2Flm32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -86,7 +86,7 @@ static bool lm32_legitimate_constant_p (enum machine_mode, rtx);\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE lm32_option_override\n #undef TARGET_ADDRESS_COST\n-#define TARGET_ADDRESS_COST hook_int_rtx_bool_0\n+#define TARGET_ADDRESS_COST hook_int_rtx_mode_as_bool_0\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS lm32_rtx_costs\n #undef TARGET_IN_SMALL_DATA_P"}, {"sha": "100c16fe39125a25c3ab2e9e958c85cc65dae1ae", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -2278,7 +2278,9 @@ m32c_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST m32c_address_cost\n static int\n-m32c_address_cost (rtx addr, bool speed ATTRIBUTE_UNUSED)\n+m32c_address_cost (rtx addr, enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t   addr_space_t as ATTRIBUTE_UNUSED,\n+\t\t   bool speed ATTRIBUTE_UNUSED)\n {\n   int i;\n   /*  fprintf(stderr, \"\\naddress_cost\\n\");"}, {"sha": "4d899666f2bed18c514b5dc6db385124f57dd9f3", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -161,7 +161,7 @@ static const struct attribute_spec m32r_attribute_table[] =\n #undef  TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS m32r_rtx_costs\n #undef  TARGET_ADDRESS_COST\n-#define TARGET_ADDRESS_COST hook_int_rtx_bool_0\n+#define TARGET_ADDRESS_COST hook_int_rtx_mode_as_bool_0\n \n #undef  TARGET_PROMOTE_PROTOTYPES\n #define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_true"}, {"sha": "501c8cee81429ad04cf2271fad69f71af6ce61e8", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -191,7 +191,7 @@ static const struct attribute_spec mcore_attribute_table[] =\n #undef  TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS \t\tmcore_rtx_costs\n #undef  TARGET_ADDRESS_COST\n-#define TARGET_ADDRESS_COST \t\thook_int_rtx_bool_0\n+#define TARGET_ADDRESS_COST \t\thook_int_rtx_mode_as_bool_0\n #undef  TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG\tmcore_reorg\n "}, {"sha": "1f712344312376c720490aa8c070d6717566ef24", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -212,7 +212,7 @@ static int mep_sched_reorder (FILE *, int, rtx *, int *, int);\n static rtx mep_make_bundle (rtx, rtx);\n static void mep_bundle_insns (rtx);\n static bool mep_rtx_cost (rtx, int, int, int, int *, bool);\n-static int mep_address_cost (rtx, bool);\n+static int mep_address_cost (rtx, enum machine_mode, addr_space_t, bool);\n static void mep_setup_incoming_varargs (cumulative_args_t, enum machine_mode,\n \t\t\t\t\ttree, int *, int);\n static bool mep_pass_by_reference (cumulative_args_t cum, enum machine_mode,\n@@ -7152,7 +7152,10 @@ mep_rtx_cost (rtx x, int code, int outer_code ATTRIBUTE_UNUSED,\n }\n \n static int\n-mep_address_cost (rtx addr ATTRIBUTE_UNUSED, bool ATTRIBUTE_UNUSED speed_p)\n+mep_address_cost (rtx addr ATTRIBUTE_UNUSED,\n+\t\t  enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t  addr_space_t as ATTRIBUTE_UNUSED,\n+\t\t  bool ATTRIBUTE_UNUSED speed_p)\n {\n   return 1;\n }"}, {"sha": "d774e54ca331c27c98ddb27f15ca00b99f100acd", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -1043,7 +1043,9 @@ microblaze_address_insns (rtx x, enum machine_mode mode)\n /* Provide the costs of an addressing mode that contains ADDR.\n    If ADDR is not a valid address, its cost is irrelevant.  */\n static int\n-microblaze_address_cost (rtx addr, bool speed ATTRIBUTE_UNUSED)\n+microblaze_address_cost (rtx addr, enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t addr_space_t as ATTRIBUTE_UNUSED,\n+\t\t\t bool speed ATTRIBUTE_UNUSED)\n {\n   return COSTS_N_INSNS (microblaze_address_insns (addr, GET_MODE (addr)));\n }"}, {"sha": "09322f15926cc603f3bf1d33e7e262efbb53dd09", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -3943,9 +3943,11 @@ mips_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n /* Implement TARGET_ADDRESS_COST.  */\n \n static int\n-mips_address_cost (rtx addr, bool speed ATTRIBUTE_UNUSED)\n+mips_address_cost (rtx addr, enum machine_mode mode,\n+\t\t   addr_space_t as ATTRIBUTE_UNUSED,\n+\t\t   bool speed ATTRIBUTE_UNUSED)\n {\n-  return mips_address_insns (addr, SImode, false);\n+  return mips_address_insns (addr, mode, false);\n }\n \f\n /* Information about a single instruction in a multi-instruction"}, {"sha": "eaf5f2ed43773e5bcbfa1a862d5f189070fb236b", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -223,7 +223,7 @@ static void mmix_conditional_register_usage (void);\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS mmix_rtx_costs\n #undef TARGET_ADDRESS_COST\n-#define TARGET_ADDRESS_COST hook_int_rtx_bool_0\n+#define TARGET_ADDRESS_COST hook_int_rtx_mode_as_bool_0\n \n #undef TARGET_REGISTER_MOVE_COST\n #define TARGET_REGISTER_MOVE_COST mmix_register_move_cost"}, {"sha": "7ec2459052f9fa7705f0b3efd1829b4f5ffe9ae2", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -2142,7 +2142,8 @@ mn10300_delegitimize_address (rtx orig_x)\n    with an address register.  */\n \n static int\n-mn10300_address_cost (rtx x, bool speed)\n+mn10300_address_cost (rtx x, enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t      addr_space_t as ATTRIBUTE_UNUSED, bool speed)\n {\n   HOST_WIDE_INT i;\n   rtx base, index;\n@@ -2457,7 +2458,8 @@ mn10300_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n       break;\n \n     case MEM:\n-      total = mn10300_address_cost (XEXP (x, 0), speed);\n+      total = mn10300_address_cost (XEXP (x, 0), GET_MODE (x),\n+\t\t\t\t    MEM_ADDR_SPACE (x), speed);\n       if (speed)\n \ttotal = COSTS_N_INSNS (2 + total);\n       goto alldone;"}, {"sha": "bb54c6e1bfe272f50ebbe910badcc4594d5ec98e", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -91,7 +91,7 @@ static void copy_reg_pointer (rtx, rtx);\n static void fix_range (const char *);\n static int hppa_register_move_cost (enum machine_mode mode, reg_class_t,\n \t\t\t\t    reg_class_t);\n-static int hppa_address_cost (rtx, bool);\n+static int hppa_address_cost (rtx, enum machine_mode mode, addr_space_t, bool);\n static bool hppa_rtx_costs (rtx, int, int, int, int *, bool);\n static inline rtx force_mode (enum machine_mode, rtx);\n static void pa_reorg (void);\n@@ -1397,7 +1397,8 @@ hppa_register_move_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n    as GO_IF_LEGITIMATE_ADDRESS.  */\n \n static int\n-hppa_address_cost (rtx X,\n+hppa_address_cost (rtx X, enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t   addr_space_t as ATTRIBUTE_UNUSED,\n \t\t   bool speed ATTRIBUTE_UNUSED)\n {\n   switch (GET_CODE (X))"}, {"sha": "430125f719f40bc703801b853fb44f108f6ea2f8", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -928,7 +928,8 @@ static tree rs6000_builtin_vectorized_libmass (tree, tree, tree);\n static rtx rs6000_emit_set_long_const (rtx, HOST_WIDE_INT, HOST_WIDE_INT);\n static int rs6000_memory_move_cost (enum machine_mode, reg_class_t, bool);\n static bool rs6000_debug_rtx_costs (rtx, int, int, int, int *, bool);\n-static int rs6000_debug_address_cost (rtx, bool);\n+static int rs6000_debug_address_cost (rtx, enum machine_mode, addr_space_t,\n+\t\t\t\t      bool);\n static int rs6000_debug_adjust_cost (rtx, rtx, rtx, int);\n static bool is_microcoded_insn (rtx);\n static bool is_nonpipeline_insn (rtx);\n@@ -1294,7 +1295,7 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS rs6000_rtx_costs\n #undef TARGET_ADDRESS_COST\n-#define TARGET_ADDRESS_COST hook_int_rtx_bool_0\n+#define TARGET_ADDRESS_COST hook_int_rtx_mode_as_bool_0\n \n #undef TARGET_DWARF_REGISTER_SPAN\n #define TARGET_DWARF_REGISTER_SPAN rs6000_dwarf_register_span\n@@ -26070,7 +26071,8 @@ rs6000_debug_rtx_costs (rtx x, int code, int outer_code, int opno, int *total,\n /* Debug form of ADDRESS_COST that is selected if -mdebug=cost.  */\n \n static int\n-rs6000_debug_address_cost (rtx x, bool speed)\n+rs6000_debug_address_cost (rtx x, enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t   addr_space_t as ATTRIBUTE_UNUSED, bool speed)\n {\n   int ret = TARGET_ADDRESS_COST (x, speed);\n "}, {"sha": "472625e4af6ddb50980633ee5e584058a4c028f1", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -2724,7 +2724,8 @@ rx_is_legitimate_constant (enum machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n }\n \n static int\n-rx_address_cost (rtx addr, bool speed)\n+rx_address_cost (rtx addr, enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t addr_space_t as ATTRIBUTE_UNUSED, bool speed)\n {\n   rtx a, b;\n "}, {"sha": "f0141d0c4befd4b73165517e4aa8614d5dbcd4e3", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -2613,7 +2613,9 @@ s390_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n /* Return the cost of an address rtx ADDR.  */\n \n static int\n-s390_address_cost (rtx addr, bool speed ATTRIBUTE_UNUSED)\n+s390_address_cost (rtx addr, enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t   addr_space_t as ATTRIBUTE_UNUSED,\n+\t\t   bool speed ATTRIBUTE_UNUSED)\n {\n   struct s390_address ad;\n   if (!s390_decompose_address (addr, &ad))"}, {"sha": "04b67def33dc8378a1e3978be5795e7478136a2c", "filename": "gcc/config/score/score-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fscore%2Fscore-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fscore%2Fscore-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore-protos.h?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -39,7 +39,8 @@ extern const char * score_move (rtx *ops);\n extern bool score_unaligned_load (rtx* ops);\n extern bool score_unaligned_store (rtx* ops);\n extern bool score_block_move (rtx* ops);\n-extern int score_address_cost (rtx addr, bool speed);\n+extern int score_address_cost (rtx addr, enum machine_mode mode,\n+\t\t\t       addr_space_t as, bool speed);\n extern int score_address_p (enum machine_mode mode, rtx x, int strict);\n extern int score_reg_class (int regno);\n extern int score_hard_regno_mode_ok (unsigned int, enum machine_mode);"}, {"sha": "2eeeab9f872c7091d97338a30bf4cc70f15b0001", "filename": "gcc/config/score/score.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fscore%2Fscore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fscore%2Fscore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -1232,7 +1232,8 @@ score_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n \n /* Implement TARGET_ADDRESS_COST macro.  */\n int\n-score_address_cost (rtx addr,\n+score_address_cost (rtx addr, enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t    addr_space_t as ATTRIBUTE_UNUSED,\n \t\t    bool speed ATTRIBUTE_UNUSED)\n {\n   return score_address_insns (addr, SImode);"}, {"sha": "10dad62b8f7a931aaaf2802b67efb05fb984254a", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -255,7 +255,7 @@ static int multcosts (rtx);\n static bool unspec_caller_rtx_p (rtx);\n static bool sh_cannot_copy_insn_p (rtx);\n static bool sh_rtx_costs (rtx, int, int, int, int *, bool);\n-static int sh_address_cost (rtx, bool);\n+static int sh_address_cost (rtx, enum machine_mode, addr_space_t, bool);\n static int sh_pr_n_sets (void);\n static rtx sh_allocate_initial_value (rtx);\n static reg_class_t sh_preferred_reload_class (rtx, reg_class_t);\n@@ -3430,7 +3430,8 @@ disp_addr_displacement (rtx x)\n /* Compute the cost of an address.  */\n \n static int\n-sh_address_cost (rtx x, bool speed ATTRIBUTE_UNUSED)\n+sh_address_cost (rtx x, enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t addr_space_t as ATTRIBUTE_UNUSED, bool speed ATTRIBUTE_UNUSED)\n {\n   /* 'reg + disp' addressing.  */\n   if (satisfies_constraint_Sdd (x))"}, {"sha": "fff17de9e6737b3d417a82f08419d2f7a8415877", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -689,7 +689,7 @@ char sparc_hard_reg_printed[8];\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS sparc_rtx_costs\n #undef TARGET_ADDRESS_COST\n-#define TARGET_ADDRESS_COST hook_int_rtx_bool_0\n+#define TARGET_ADDRESS_COST hook_int_rtx_mode_as_bool_0\n #undef TARGET_REGISTER_MOVE_COST\n #define TARGET_REGISTER_MOVE_COST sparc_register_move_cost\n "}, {"sha": "2fe1f3f51a0c09afd744a44a7b528f874ec7a335", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -7161,7 +7161,7 @@ static const struct attribute_spec spu_attribute_table[] =\n #define TARGET_RTX_COSTS spu_rtx_costs\n \n #undef TARGET_ADDRESS_COST\n-#define TARGET_ADDRESS_COST hook_int_rtx_bool_0\n+#define TARGET_ADDRESS_COST hook_int_rtx_mode_as_bool_0\n \n #undef TARGET_SCHED_ISSUE_RATE\n #define TARGET_SCHED_ISSUE_RATE spu_sched_issue_rate"}, {"sha": "a6f2b5447b7e4036c768003aaf033dfd3cf1eb94", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -58,7 +58,7 @@ static void xstormy16_asm_output_mi_thunk (FILE *, tree, HOST_WIDE_INT,\n static void xstormy16_init_builtins (void);\n static rtx xstormy16_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n static bool xstormy16_rtx_costs (rtx, int, int, int, int *, bool);\n-static int xstormy16_address_cost (rtx, bool);\n+static int xstormy16_address_cost (rtx, enum machine_mode, addr_space_t, bool);\n static bool xstormy16_return_in_memory (const_tree, const_tree);\n \n static GTY(()) section *bss100_section;\n@@ -103,7 +103,9 @@ xstormy16_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED,\n }\n \n static int\n-xstormy16_address_cost (rtx x, bool speed ATTRIBUTE_UNUSED)\n+xstormy16_address_cost (rtx x, enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\taddr_space_t as ATTRIBUTE_UNUSED,\n+\t\t\tbool speed ATTRIBUTE_UNUSED)\n {\n   return (CONST_INT_P (x) ? 2\n \t  : GET_CODE (x) == PLUS ? 7"}, {"sha": "95cdcb47702f0e379910f5757dc6775fee5de209", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -3130,7 +3130,7 @@ static const struct attribute_spec v850_attribute_table[] =\n #define TARGET_RTX_COSTS v850_rtx_costs\n \n #undef  TARGET_ADDRESS_COST\n-#define TARGET_ADDRESS_COST hook_int_rtx_bool_0\n+#define TARGET_ADDRESS_COST hook_int_rtx_mode_as_bool_0\n \n #undef  TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG v850_reorg"}, {"sha": "239b82c3895778e15ffce4217977ddbbf6bb18f2", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -53,7 +53,7 @@ static void vax_init_libfuncs (void);\n static void vax_output_mi_thunk (FILE *, tree, HOST_WIDE_INT,\n \t\t\t\t HOST_WIDE_INT, tree);\n static int vax_address_cost_1 (rtx);\n-static int vax_address_cost (rtx, bool);\n+static int vax_address_cost (rtx, enum machine_mode, addr_space_t, bool);\n static bool vax_rtx_costs (rtx, int, int, int, int *, bool);\n static rtx vax_function_arg (cumulative_args_t, enum machine_mode,\n \t\t\t     const_tree, bool);\n@@ -738,7 +738,9 @@ vax_address_cost_1 (rtx addr)\n }\n \n static int\n-vax_address_cost (rtx x, bool speed ATTRIBUTE_UNUSED)\n+vax_address_cost (rtx x, enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t  addr_space_t as ATTRIBUTE_UNUSED,\n+\t\t  bool speed ATTRIBUTE_UNUSED)\n {\n   return (1 + (REG_P (x) ? 0 : vax_address_cost_1 (x)));\n }"}, {"sha": "987b6d7020f25926017a8e31e485b616346f6732", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -211,7 +211,7 @@ static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS xtensa_rtx_costs\n #undef TARGET_ADDRESS_COST\n-#define TARGET_ADDRESS_COST hook_int_rtx_bool_0\n+#define TARGET_ADDRESS_COST hook_int_rtx_mode_as_bool_0\n \n #undef TARGET_MEMBER_TYPE_FORCES_BLK\n #define TARGET_MEMBER_TYPE_FORCES_BLK xtensa_member_type_forces_blk"}, {"sha": "11b2f9aa5674b96f28b0a630195990eaa8e7b04a", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -6440,7 +6440,7 @@ The hook returns true when all subexpressions of @var{x} have been\n processed, and false when @code{rtx_cost} should recurse.\n @end deftypefn\n \n-@deftypefn {Target Hook} int TARGET_ADDRESS_COST (rtx @var{address}, bool @var{speed})\n+@deftypefn {Target Hook} int TARGET_ADDRESS_COST (rtx @var{address}, enum machine_mode @var{mode}, addr_space_t @var{as}, bool @var{speed})\n This hook computes the cost of an addressing mode that contains\n @var{address}.  If not defined, the cost is computed from\n the @var{address} expression and the @code{TARGET_RTX_COST} hook."}, {"sha": "775da3c3d2f6c361c493b477e71974e47eb0420a", "filename": "gcc/hooks.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -200,6 +200,12 @@ hook_int_rtx_bool_0 (rtx a ATTRIBUTE_UNUSED, bool b ATTRIBUTE_UNUSED)\n   return 0;\n }\n \n+int\n+hook_int_rtx_mode_as_bool_0 (rtx, enum machine_mode, addr_space_t, bool)\n+{\n+  return 0;\n+}\n+\n unsigned int\n hook_uint_void_0 (void)\n {"}, {"sha": "1774816d4e92a04b1e576faab72c261cacbe9dd5", "filename": "gcc/hooks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -75,6 +75,8 @@ extern int hook_int_const_tree_0 (const_tree);\n extern int hook_int_const_tree_const_tree_1 (const_tree, const_tree);\n extern int hook_int_rtx_0 (rtx);\n extern int hook_int_rtx_bool_0 (rtx, bool);\n+extern int hook_int_rtx_mode_as_bool_0 (rtx, enum machine_mode, addr_space_t,\n+\t\t\t\t\tbool);\n \n extern tree hook_tree_const_tree_null (const_tree);\n "}, {"sha": "705c02e3dc8983dd75ed56028f8d4f64b3824214", "filename": "gcc/output.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -606,7 +606,7 @@ extern void default_elf_init_array_asm_out_constructor (rtx, int);\n extern void default_elf_fini_array_asm_out_destructor (rtx, int);\n extern int maybe_assemble_visibility (tree);\n \n-extern int default_address_cost (rtx, bool);\n+extern int default_address_cost (rtx, enum machine_mode, addr_space_t, bool);\n \n /* Output stack usage information.  */\n extern void output_stack_usage (void);"}, {"sha": "89ca226ccab1b182e4a391da88f04bc7afd9e3c0", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -3820,13 +3820,13 @@ address_cost (rtx x, enum machine_mode mode, addr_space_t as, bool speed)\n   if (!memory_address_addr_space_p (mode, x, as))\n     return 1000;\n \n-  return targetm.address_cost (x, speed);\n+  return targetm.address_cost (x, mode, as, speed);\n }\n \n /* If the target doesn't override, compute the cost as with arithmetic.  */\n \n int\n-default_address_cost (rtx x, bool speed)\n+default_address_cost (rtx x, enum machine_mode, addr_space_t, bool speed)\n {\n   return rtx_cost (x, MEM, 0, speed);\n }"}, {"sha": "0d23c57a3fb1f01f947867b3ee0e2123d01fdf97", "filename": "gcc/target.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b413068c9fd88857fee03d7e7cf966bc2add5a6f/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=b413068c9fd88857fee03d7e7cf966bc2add5a6f", "patch": "@@ -1758,7 +1758,7 @@ DEFHOOK\n DEFHOOK\n (address_cost,\n  \"\",\n- int, (rtx address, bool speed),\n+ int, (rtx address, enum machine_mode mode, addr_space_t as, bool speed),\n  default_address_cost)\n \n /* Return where to allocate pseudo for a given hard register initial value.  */"}]}