{"sha": "bdc6b402f90bde66ba88df483f4f8758f656f840", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRjNmI0MDJmOTBiZGU2NmJhODhkZjQ4M2Y0Zjg3NThmNjU2Zjg0MA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-06-04T18:52:50Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-06-04T18:52:50Z"}, "message": "darwin-driver.c (darwin_default_min_version): Use\n\n\t* config/darwin-driver.c (darwin_default_min_version): Use\n\t* GCC-specific formats in diagnostics.\n\t* cppspec.c (lang_specific_driver): Use GCC-specific formats in\n\tdiagnostics.\n\t* gcc.c (translate_options, read_specs, add_sysrooted_prefix,\n\texecute, process_command, end_going_arg, do_self_spec, do_spec_1,\n\teval_spec_function, handle_braces, process_brace_body, main,\n\tperror_with_name, used_arg, set_multilib_dir, print_multilib_info,\n\tgetenv_spec_function, compare_version_strings,\n\tversion_compare_spec_function): Use GCC-specific formats in\n\tdiagnostics.\n\ncp:\n\t* g++spec.c (lang_specific_driver): Use GCC-specific formats in\n\tdiagnostics.\n\nfortran:\n\t* gfortranspec.c (append_arg, lang_specific_driver): Use\n\tGCC-specific formats in diagnostics.\n\njava:\n\t* jvspec.c (lang_specific_driver): Use GCC-specific formats in\n\tdiagnostics.\n\nFrom-SVN: r160292", "tree": {"sha": "85f9769f6f35ad83dbcf67a01979ddd019a890fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85f9769f6f35ad83dbcf67a01979ddd019a890fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdc6b402f90bde66ba88df483f4f8758f656f840", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdc6b402f90bde66ba88df483f4f8758f656f840", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdc6b402f90bde66ba88df483f4f8758f656f840", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdc6b402f90bde66ba88df483f4f8758f656f840/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2aa6496608edeb128e5d36b2a9ac02d8d7d6fc18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aa6496608edeb128e5d36b2a9ac02d8d7d6fc18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aa6496608edeb128e5d36b2a9ac02d8d7d6fc18"}], "stats": {"total": 144, "additions": 86, "deletions": 58}, "files": [{"sha": "21fe05ac1f35630da79beaa37030b9644d0d3b76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc6b402f90bde66ba88df483f4f8758f656f840/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc6b402f90bde66ba88df483f4f8758f656f840/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bdc6b402f90bde66ba88df483f4f8758f656f840", "patch": "@@ -1,3 +1,17 @@\n+2010-06-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/darwin-driver.c (darwin_default_min_version): Use\n+\t* GCC-specific formats in diagnostics.\n+\t* cppspec.c (lang_specific_driver): Use GCC-specific formats in\n+\tdiagnostics.\n+\t* gcc.c (translate_options, read_specs, add_sysrooted_prefix,\n+\texecute, process_command, end_going_arg, do_self_spec, do_spec_1,\n+\teval_spec_function, handle_braces, process_brace_body, main,\n+\tperror_with_name, used_arg, set_multilib_dir, print_multilib_info,\n+\tgetenv_spec_function, compare_version_strings,\n+\tversion_compare_spec_function): Use GCC-specific formats in\n+\tdiagnostics.\n+\n 2010-06-04  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*addhi_1_lea) <TYPE_INCDEC, default>: Assert"}, {"sha": "f66e5a0c21d1d0c22d6288e558f21f0996b61771", "filename": "gcc/config/darwin-driver.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc6b402f90bde66ba88df483f4f8758f656f840/gcc%2Fconfig%2Fdarwin-driver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc6b402f90bde66ba88df483f4f8758f656f840/gcc%2Fconfig%2Fdarwin-driver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-driver.c?ref=bdc6b402f90bde66ba88df483f4f8758f656f840", "patch": "@@ -107,8 +107,7 @@ darwin_default_min_version (int * argc_p, char *** argv_p)\n   if (sysctl (osversion_name, ARRAY_SIZE (osversion_name), osversion,\n \t      &osversion_len, NULL, 0) == -1)\n     {\n-      warning (0, \"sysctl for kern.osversion failed: %s\",\n-\t       xstrerror (errno));\n+      warning (0, \"sysctl for kern.osversion failed: %m\");\n       return;\n     }\n \n@@ -151,7 +150,7 @@ darwin_default_min_version (int * argc_p, char *** argv_p)\n   return;\n   \n  parse_failed:\n-  warning (0, \"couldn't understand kern.osversion `%.*s'\",\n+  warning (0, \"couldn't understand kern.osversion %q.*s\",\n \t   (int) osversion_len, osversion);\n   return;\n }"}, {"sha": "3d77501c11fa3af46d76e298b9391bc070eaaea3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc6b402f90bde66ba88df483f4f8758f656f840/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc6b402f90bde66ba88df483f4f8758f656f840/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bdc6b402f90bde66ba88df483f4f8758f656f840", "patch": "@@ -1,3 +1,8 @@\n+2010-06-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* g++spec.c (lang_specific_driver): Use GCC-specific formats in\n+\tdiagnostics.\n+\n 2010-06-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/44412"}, {"sha": "2b8081d91417e80e299143ef7a8624973662e1a2", "filename": "gcc/cp/g++spec.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc6b402f90bde66ba88df483f4f8758f656f840/gcc%2Fcp%2Fg%2B%2Bspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc6b402f90bde66ba88df483f4f8758f656f840/gcc%2Fcp%2Fg%2B%2Bspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fg%2B%2Bspec.c?ref=bdc6b402f90bde66ba88df483f4f8758f656f840", "patch": "@@ -258,7 +258,7 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n     }\n \n   if (quote)\n-    fatal_error (\"argument to '%s' missing\\n\", quote);\n+    fatal_error (\"argument to %qs missing\", quote);\n \n   /* There's no point adding -shared-libgcc if we don't have a shared\n      libgcc.  */"}, {"sha": "c3adaa1aa58f0510ec6f6d83bc430391832e4a60", "filename": "gcc/cppspec.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc6b402f90bde66ba88df483f4f8758f656f840/gcc%2Fcppspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc6b402f90bde66ba88df483f4f8758f656f840/gcc%2Fcppspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppspec.c?ref=bdc6b402f90bde66ba88df483f4f8758f656f840", "patch": "@@ -103,7 +103,7 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n \t\tneed_E = 0;\n \t      else if (argv[i][1] == 'S' || argv[i][1] == 'c')\n \t\t{\n-\t\t  fatal_error (\"\\\"%s\\\" is not a valid option to the \"\n+\t\t  fatal_error (\"%qs is not a valid option to the \"\n \t\t\t       \"preprocessor\", argv[i]);\n \t\t  return;\n \t\t}"}, {"sha": "3830da963429244a0c0ceb0372314aa874abda1f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc6b402f90bde66ba88df483f4f8758f656f840/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc6b402f90bde66ba88df483f4f8758f656f840/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=bdc6b402f90bde66ba88df483f4f8758f656f840", "patch": "@@ -1,3 +1,8 @@\n+2010-06-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gfortranspec.c (append_arg, lang_specific_driver): Use\n+\tGCC-specific formats in diagnostics.\n+\n 2010-06-02  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/44360"}, {"sha": "899cbc5162b8b4682a8fc54a3b495d2e57cca71b", "filename": "gcc/fortran/gfortranspec.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc6b402f90bde66ba88df483f4f8758f656f840/gcc%2Ffortran%2Fgfortranspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc6b402f90bde66ba88df483f4f8758f656f840/gcc%2Ffortran%2Fgfortranspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortranspec.c?ref=bdc6b402f90bde66ba88df483f4f8758f656f840", "patch": "@@ -244,7 +244,7 @@ append_arg (const char *arg)\n     }\n \n   if (g77_newargc == newargsize)\n-    fatal_error (\"overflowed output arg list for '%s'\", arg);\n+    fatal_error (\"overflowed output arg list for %qs\", arg);\n \n   g77_newargv[g77_newargc++] = arg;\n }\n@@ -402,7 +402,7 @@ For more information about these matters, see the file named COPYING\\n\\n\"));\n       if (i + skip < argc)\n \ti += skip;\n       else\n-\tfatal_error (\"argument to '%s' missing\", argv[i]);\n+\tfatal_error (\"argument to %qs missing\", argv[i]);\n     }\n \n   if ((n_outfiles != 0) && (n_infiles == 0))\n@@ -440,7 +440,7 @@ For more information about these matters, see the file named COPYING\\n\\n\"));\n \t\t  i++;\n \t\t}\n \t      else\n-\t\tfatal_error (\"argument to '%s' missing\", argv[i]);\n+\t\tfatal_error (\"argument to %qs missing\", argv[i]);\n \t    }\n \t  else\n \t    {"}, {"sha": "75409af5a8513166c2ef72cfdbcf3efd195b4770", "filename": "gcc/gcc.c", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc6b402f90bde66ba88df483f4f8758f656f840/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc6b402f90bde66ba88df483f4f8758f656f840/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=bdc6b402f90bde66ba88df483f4f8758f656f840", "patch": "@@ -1392,7 +1392,7 @@ translate_options (int *argcp, const char *const **argvp)\n \n \t\t  else if (strchr (arginfo, '*') != 0)\n \t\t    {\n-\t\t      error (\"incomplete '%s' option\", option_map[j].name);\n+\t\t      error (\"incomplete %qs option\", option_map[j].name);\n \t\t      break;\n \t\t    }\n \n@@ -1403,7 +1403,7 @@ translate_options (int *argcp, const char *const **argvp)\n \t\t\t{\n \t\t\t  if (i + 1 == argc)\n \t\t\t    {\n-\t\t\t      error (\"missing argument to '%s' option\",\n+\t\t\t      error (\"missing argument to %qs option\",\n \t\t\t\t     option_map[j].name);\n \t\t\t      break;\n \t\t\t    }\n@@ -1416,7 +1416,7 @@ translate_options (int *argcp, const char *const **argvp)\n \t\t  else if (strchr (arginfo, 'o') == 0)\n \t\t    {\n \t\t      if (arg != 0)\n-\t\t\terror (\"extraneous argument to '%s' option\",\n+\t\t\terror (\"extraneous argument to %qs option\",\n \t\t\t       option_map[j].name);\n \t\t      arg = 0;\n \t\t    }\n@@ -2281,8 +2281,8 @@ read_specs (const char *filename, int main_p)\n \n \t      for (newsl = specs; newsl; newsl = newsl->next)\n \t\tif (strcmp (newsl->name, p2) == 0)\n-\t\t  fatal_error (\"%s: attempt to rename spec '%s' to \"\n-\t\t\t       \"already defined spec '%s'\",\n+\t\t  fatal_error (\"%s: attempt to rename spec %qs to \"\n+\t\t\t       \"already defined spec %qs\",\n \t\t    filename, p1, p2);\n \n \t      if (verbose_flag)\n@@ -2907,7 +2907,7 @@ add_sysrooted_prefix (struct path_prefix *pprefix, const char *prefix,\n \t\t      int require_machine_suffix, int os_multilib)\n {\n   if (!IS_ABSOLUTE_PATH (prefix))\n-    fatal_error (\"system path '%s' is not absolute\", prefix);\n+    fatal_error (\"system path %qs is not absolute\", prefix);\n \n   if (target_system_root)\n     {\n@@ -3095,7 +3095,7 @@ execute (void)\n \t\t\t\t   ? PEX_RECORD_TIMES : 0),\n \t\t  progname, temp_filename);\n   if (pex == NULL)\n-    pfatal_with_name (_(\"pex_init failed\"));\n+    fatal_error (\"pex_init failed: %m\");\n \n   for (i = 0; i < n_commands; i++)\n     {\n@@ -3134,13 +3134,13 @@ execute (void)\n \n     statuses = (int *) alloca (n_commands * sizeof (int));\n     if (!pex_get_status (pex, n_commands, statuses))\n-      pfatal_with_name (_(\"failed to get exit status\"));\n+      fatal_error (\"failed to get exit status: %m\");\n \n     if (report_times || report_times_to_file)\n       {\n \ttimes = (struct pex_time *) alloca (n_commands * sizeof (struct pex_time));\n \tif (!pex_get_times (pex, n_commands, times))\n-\t  pfatal_with_name (_(\"failed to get process times\"));\n+\t  fatal_error (\"failed to get process times: %m\");\n       }\n \n     pex_free (pex);\n@@ -3906,29 +3906,29 @@ process_command (int argc, const char **argv)\n       else if (strcmp (argv[i], \"-Xlinker\") == 0)\n \t{\n \t  if (i + 1 == argc)\n-\t    fatal_error (\"argument to '-Xlinker' is missing\");\n+\t    fatal_error (\"argument to %<-Xlinker%> is missing\");\n \n \t  n_infiles++;\n \t  i++;\n \t}\n       else if (strcmp (argv[i], \"-Xpreprocessor\") == 0)\n \t{\n \t  if (i + 1 == argc)\n-\t    fatal_error (\"argument to '-Xpreprocessor' is missing\");\n+\t    fatal_error (\"argument to %<-Xpreprocessor%> is missing\");\n \n \t  add_preprocessor_option (argv[i+1], strlen (argv[i+1]));\n \t}\n       else if (strcmp (argv[i], \"-Xassembler\") == 0)\n \t{\n \t  if (i + 1 == argc)\n-\t    fatal_error (\"argument to '-Xassembler' is missing\");\n+\t    fatal_error (\"argument to %<-Xassembler%> is missing\");\n \n \t  add_assembler_option (argv[i+1], strlen (argv[i+1]));\n \t}\n       else if (strcmp (argv[i], \"-l\") == 0)\n \t{\n \t  if (i + 1 == argc)\n-\t    fatal_error (\"argument to '-l' is missing\");\n+\t    fatal_error (\"argument to %<-l%> is missing\");\n \n \t  n_infiles++;\n \t  i++;\n@@ -3949,7 +3949,7 @@ process_command (int argc, const char **argv)\n \t\t   || strcmp (argv[i]+12, \"object\") == 0)\n \t    save_temps_flag = SAVE_TEMPS_OBJ;\n \t  else\n-\t    fatal_error (\"'%s' is an unknown -save-temps option\", argv[i]);\n+\t    fatal_error (\"%qs is an unknown -save-temps option\", argv[i]);\n \t}\n       else if (strcmp (argv[i], \"-no-canonical-prefixes\") == 0)\n \t/* Already handled as a special case, so ignored here.  */\n@@ -3963,7 +3963,7 @@ process_command (int argc, const char **argv)\n \t{\n \t  struct user_specs *user = XNEW (struct user_specs);\n \t  if (++i >= argc)\n-\t    fatal_error (\"argument to '-specs' is missing\");\n+\t    fatal_error (\"argument to %<-specs%> is missing\");\n \n \t  user->next = (struct user_specs *) 0;\n \t  user->filename = argv[i];\n@@ -3977,7 +3977,7 @@ process_command (int argc, const char **argv)\n \t{\n \t  struct user_specs *user = XNEW (struct user_specs);\n \t  if (strlen (argv[i]) == 7)\n-\t    fatal_error (\"argument to '-specs=' is missing\");\n+\t    fatal_error (\"argument to %<-specs=%> is missing\");\n \n \t  user->next = (struct user_specs *) 0;\n \t  user->filename = argv[i] + 7;\n@@ -4005,7 +4005,7 @@ process_command (int argc, const char **argv)\n       else if (strcmp (argv[i], \"-wrapper\") == 0)\n         {\n \t  if (++i >= argc)\n-\t    fatal_error (\"argument to '-wrapper' is missing\");\n+\t    fatal_error (\"argument to %<-wrapper%> is missing\");\n \n           wrapper_string = argv[i];\n \t  n_switches++;\n@@ -4033,7 +4033,7 @@ process_command (int argc, const char **argv)\n \t\tint len;\n \n \t\tif (p[1] == 0 && i + 1 == argc)\n-\t\t  fatal_error (\"argument to '-B' is missing\");\n+\t\t  fatal_error (\"argument to %<-B%> is missing\");\n \t\tif (p[1] == 0)\n \t\t  value = argv[++i];\n \t\telse\n@@ -4426,7 +4426,7 @@ process_command (int argc, const char **argv)\n \t  if (c == 'x')\n \t    {\n \t      if (p[1] == 0 && i + 1 == argc)\n-\t\tfatal_error (\"argument to '-x' is missing\");\n+\t\tfatal_error (\"argument to %<-x%> is missing\");\n \t      if (p[1] == 0)\n \t\tspec_lang = argv[++i];\n \t      else\n@@ -4454,7 +4454,7 @@ process_command (int argc, const char **argv)\n \t\t  n_args = SWITCH_TAKES_ARG (c) - (p[1] != 0);\n \t\t}\n \t      if (i + n_args >= argc)\n-\t\tfatal_error (\"argument to '-%s' is missing\", p);\n+\t\tfatal_error (\"argument to %<-%s%> is missing\", p);\n \t      switches[n_switches].args\n \t\t= XNEWVEC (const char *, n_args + 1);\n \t      while (j < n_args)\n@@ -4543,7 +4543,7 @@ process_command (int argc, const char **argv)\n     }\n \n   if (n_infiles == last_language_n_infiles && spec_lang != 0)\n-    warning (0, \"'-x %s' after last input file has no effect\", spec_lang);\n+    warning (0, \"%<-x %s%> after last input file has no effect\", spec_lang);\n \n   if (compare_debug == 2 || compare_debug == 3)\n     {\n@@ -4706,7 +4706,7 @@ end_going_arg (void)\n \n \t  if (full_script_path == NULL)\n \t    {\n-\t      error (\"unable to locate default linker script '%s' in the library search paths\", string);\n+\t      error (\"unable to locate default linker script %qs in the library search paths\", string);\n \t      /* Script was not found on search path.  */\n \t      return;\n \t    }\n@@ -4894,7 +4894,7 @@ do_self_spec (const char *spec)\n \n \t  /* Each switch should start with '-'.  */\n \t  if (c != '-')\n-\t    fatal_error (\"switch '%s' does not start with '-'\", argbuf[i]);\n+\t    fatal_error (\"switch %qs does not start with %<-%>\", argbuf[i]);\n \n \t  p++;\n \t  c = *p;\n@@ -4918,7 +4918,7 @@ do_self_spec (const char *spec)\n \t\t  n_args = SWITCH_TAKES_ARG (c) - (p[1] != 0);\n \t\t}\n \t      if (i + n_args >= argbuf_index)\n-\t\tfatal_error (\"argument to '-%s' is missing\", p);\n+\t\tfatal_error (\"argument to %<-%s%> is missing\", p);\n \t      sw->args\n \t\t= XNEWVEC (const char *, n_args + 1);\n \t      while (j < n_args)\n@@ -5124,7 +5124,7 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \tswitch (c = *p++)\n \t  {\n \t  case 0:\n-\t    fatal_error (\"spec '%s' invalid\", spec);\n+\t    fatal_error (\"spec %qs invalid\", spec);\n \n \t  case 'b':\n \t    if (save_temps_length)\n@@ -5273,7 +5273,7 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t\t    p += 2;\n \t\t    /* We don't support extra suffix characters after %O.  */\n \t\t    if (*p == '.' || ISALNUM ((unsigned char) *p))\n-\t\t      fatal_error (\"spec '%s' has invalid '%%0%c'\", spec, *p);\n+\t\t      fatal_error (\"spec %qs has invalid %<%%0%c%>\", spec, *p);\n \t\t    if (suffix_length == 0)\n \t\t      suffix = TARGET_OBJECT_SUFFIX;\n \t\t    else\n@@ -5584,7 +5584,7 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t      int cur_index = argbuf_index;\n \t      /* Handle the {...} following the %W.  */\n \t      if (*p != '{')\n-\t\tfatal_error (\"spec '%s' has invalid '%%W%c\", spec, *p);\n+\t\tfatal_error (\"spec %qs has invalid %<%%W%c%>\", spec, *p);\n \t      p = handle_braces (p + 1);\n \t      if (p == 0)\n \t\treturn -1;\n@@ -5604,7 +5604,7 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \n \t      /* Skip past the option value and make a copy.  */\n \t      if (*p != '{')\n-\t\tfatal_error (\"spec '%s' has invalid '%%x%c'\", spec, *p);\n+\t\tfatal_error (\"spec %qs has invalid %<%%x%c%>\", spec, *p);\n \t      while (*p++ != '}')\n \t\t;\n \t      string = save_string (p1 + 1, p - p1 - 2);\n@@ -5799,7 +5799,7 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t      /* Catch the case where a spec string contains something like\n \t\t '%{foo:%*}'.  i.e. there is no * in the pattern on the left\n \t\t hand side of the :.  */\n-\t      error (\"spec failure: '%%*' has not been initialized by pattern match\");\n+\t      error (\"spec failure: %<%%*%> has not been initialized by pattern match\");\n \t    break;\n \n \t    /* Process a string found as the value of a spec given by name.\n@@ -5889,7 +5889,7 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t    break;\n \n \t  default:\n-\t    error (\"spec failure: unrecognized spec option '%c'\", c);\n+\t    error (\"spec failure: unrecognized spec option %qc\", c);\n \t    break;\n \t  }\n \tbreak;\n@@ -5951,7 +5951,7 @@ eval_spec_function (const char *func, const char *args)\n \n   sf = lookup_spec_function (func);\n   if (sf == NULL)\n-    fatal_error (\"unknown spec function '%s'\", func);\n+    fatal_error (\"unknown spec function %qs\", func);\n \n   /* Push the spec processing context.  */\n   save_argbuf_index = argbuf_index;\n@@ -5971,7 +5971,7 @@ eval_spec_function (const char *func, const char *args)\n \n   alloc_args ();\n   if (do_spec_2 (args) < 0)\n-    fatal_error (\"error in args to spec function '%s'\", func);\n+    fatal_error (\"error in args to spec function %qs\", func);\n \n   /* argbuf_index is an index for the next argument to be inserted, and\n      so contains the count of the args already inserted.  */\n@@ -6288,7 +6288,7 @@ handle_braces (const char *p)\n   return p;\n \n  invalid:\n-  fatal_error (\"braced spec '%s' is invalid at '%c'\", orig, *p);\n+  fatal_error (\"braced spec %qs is invalid at %qc\", orig, *p);\n \n #undef SKIP_WHITE\n }\n@@ -6376,7 +6376,7 @@ process_brace_body (const char *p, const char *atom, const char *end_atom,\n   return p;\n \n  invalid:\n-  fatal_error (\"braced spec body '%s' is invalid\", body);\n+  fatal_error (\"braced spec body %qs is invalid\", body);\n }\n \f\n /* Return 0 iff switch number SWITCHNUM is obsoleted by a later switch\n@@ -7074,7 +7074,7 @@ main (int argc, char **argv)\n \n   for (i = 0; (int) i < n_switches; i++)\n     if (! switches[i].validated)\n-      error (\"unrecognized option '-%s'\", switches[i].part1);\n+      error (\"unrecognized option %<-%s%>\", switches[i].part1);\n \n   /* Obey some of the options.  */\n \n@@ -7317,7 +7317,7 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t\t  value = do_spec (input_file_compiler->spec);\n \t\t  infiles[i].preprocessed = true;\n \t\t  if (!have_o_argbuf_index)\n-\t\t    fatal_error (\"spec '%s' is invalid\",\n+\t\t    fatal_error (\"spec %qs is invalid\",\n \t\t\t\t input_file_compiler->spec);\n \t\t  infiles[i].name = argbuf[have_o_argbuf_index];\n \t\t  infiles[i].incompiler\n@@ -7654,7 +7654,7 @@ pfatal_with_name (const char *name)\n static void\n perror_with_name (const char *name)\n {\n-  error (\"%s: %s\", name, xstrerror (errno));\n+  error (\"%s: %m\", name);\n }\n \f\n static inline void\n@@ -7809,7 +7809,7 @@ used_arg (const char *p, int len)\n \t      if (*q == '\\0')\n \t\t{\n \t\tinvalid_matches:\n-\t\t  fatal_error (\"multilib spec '%s' is invalid\",\n+\t\t  fatal_error (\"multilib spec %qs is invalid\",\n \t\t\t       multilib_matches);\n \t\t}\n \t      q++;\n@@ -8001,7 +8001,7 @@ set_multilib_dir (void)\n \t  if (*p == '\\0')\n \t    {\n \t    invalid_exclusions:\n-\t      fatal_error (\"multilib exclusions '%s' is invalid\",\n+\t      fatal_error (\"multilib exclusions %qs is invalid\",\n \t\t\t   multilib_exclusions);\n \t    }\n \n@@ -8059,7 +8059,7 @@ set_multilib_dir (void)\n \t  if (*p == '\\0')\n \t    {\n \t    invalid_select:\n-\t      fatal_error (\"multilib select '%s' is invalid\",\n+\t      fatal_error (\"multilib select %qs is invalid\",\n \t\t\t   multilib_select);\n \t    }\n \t  ++p;\n@@ -8200,7 +8200,7 @@ print_multilib_info (void)\n \t  if (*p == '\\0')\n \t    {\n \t    invalid_select:\n-\t      fatal_error (\"multilib select '%s' is invalid\", multilib_select);\n+\t      fatal_error (\"multilib select %qs is invalid\", multilib_select);\n \t    }\n \n \t  ++p;\n@@ -8238,7 +8238,7 @@ print_multilib_info (void)\n \t\tif (*e == '\\0')\n \t\t  {\n \t\t  invalid_exclusion:\n-\t\t    fatal_error (\"multilib exclusion '%s' is invalid\",\n+\t\t    fatal_error (\"multilib exclusion %qs is invalid\",\n \t\t\t\t multilib_exclusions);\n \t\t  }\n \n@@ -8444,7 +8444,7 @@ getenv_spec_function (int argc, const char **argv)\n \n   value = getenv (argv[0]);\n   if (!value)\n-    fatal_error (\"environment variable \\\"%s\\\" not defined\", argv[0]);\n+    fatal_error (\"environment variable %qs not defined\", argv[0]);\n \n   /* We have to escape every character of the environment variable so\n      they are not interpreted as active spec characters.  A\n@@ -8535,12 +8535,12 @@ compare_version_strings (const char *v1, const char *v2)\n     abort ();\n   rresult = regexec (&r, v1, 0, NULL, 0);\n   if (rresult == REG_NOMATCH)\n-    fatal_error (\"invalid version number `%s'\", v1);\n+    fatal_error (\"invalid version number %qs\", v1);\n   else if (rresult != 0)\n     abort ();\n   rresult = regexec (&r, v2, 0, NULL, 0);\n   if (rresult == REG_NOMATCH)\n-    fatal_error (\"invalid version number `%s'\", v2);\n+    fatal_error (\"invalid version number %qs\", v2);\n   else if (rresult != 0)\n     abort ();\n \n@@ -8630,7 +8630,7 @@ version_compare_spec_function (int argc, const char **argv)\n       break;\n \n     default:\n-      fatal_error (\"unknown operator '%s' in %%:version-compare\", argv[0]);\n+      fatal_error (\"unknown operator %qs in %%:version-compare\", argv[0]);\n     }\n   if (! result)\n     return NULL;"}, {"sha": "4c737883dac7ee126f1f3b773ebf0acf63dfebe4", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc6b402f90bde66ba88df483f4f8758f656f840/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc6b402f90bde66ba88df483f4f8758f656f840/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=bdc6b402f90bde66ba88df483f4f8758f656f840", "patch": "@@ -1,3 +1,8 @@\n+2010-06-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* jvspec.c (lang_specific_driver): Use GCC-specific formats in\n+\tdiagnostics.\n+\n 2010-05-30  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* except.c: Include tm.h."}, {"sha": "1987138a6875bc9f5ab3ef260bc7556e0bb4b998", "filename": "gcc/java/jvspec.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc6b402f90bde66ba88df483f4f8758f656f840/gcc%2Fjava%2Fjvspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc6b402f90bde66ba88df483f4f8758f656f840/gcc%2Fjava%2Fjvspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvspec.c?ref=bdc6b402f90bde66ba88df483f4f8758f656f840", "patch": "@@ -400,13 +400,13 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n     }\n \n   if (quote)\n-    fatal_error (\"argument to '%s' missing\\n\", quote);\n+    fatal_error (\"argument to %qs missing\", quote);\n \n   if (saw_D && ! main_class_name)\n-    fatal_error (\"can't specify '-D' without '--main'\\n\");\n+    fatal_error (\"can't specify %<-D%> without %<--main%>\");\n \n   if (main_class_name && ! verify_class_name (main_class_name))\n-    fatal_error (\"'%s' is not a valid class name\", main_class_name);\n+    fatal_error (\"%qs is not a valid class name\", main_class_name);\n \n   num_args = argc + added;\n   if (saw_resource)\n@@ -582,7 +582,7 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n       if (strncmp (argv[i], \"-fmain=\", 7) == 0)\n \t{\n \t  if (! will_link)\n-\t    fatal_error (\"cannot specify 'main' class when not linking\");\n+\t    fatal_error (\"cannot specify %<main%> class when not linking\");\n \t  --j;\n \t  continue;\n \t}"}]}