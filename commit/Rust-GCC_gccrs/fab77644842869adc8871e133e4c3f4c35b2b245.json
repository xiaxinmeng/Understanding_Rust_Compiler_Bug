{"sha": "fab77644842869adc8871e133e4c3f4c35b2b245", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFiNzc2NDQ4NDI4NjlhZGM4ODcxZTEzM2U0YzNmNGMzNWIyYjI0NQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-09-04T10:18:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-09-04T10:22:29Z"}, "message": "tree-optimization/96931 - clear ctrl-altering flag more aggressively\n\nThe testcase shows that we fail to clear gimple_call_ctrl_altering_p\nwhen the last abnormal edge goes away, causing an edge insert to\na loop header edge when we have preheaders to split the edge\nunnecessarily.\n\nThe following addresses this by more aggressively clearing the\nflag in cleanup_call_ctrl_altering_flag.\n\n2020-09-04  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/96931\n\t* tree-cfgcleanup.c (cleanup_call_ctrl_altering_flag): If\n\tthere's a fallthru edge and no abnormal edge the call is\n\tno longer control-altering.\n\t(cleanup_control_flow_bb): Pass down the BB to\n\tcleanup_call_ctrl_altering_flag.\n\n\t* gcc.dg/pr96931.c: New testcase.", "tree": {"sha": "8c0551b4af84ec3767be87c5816467e8e976c56b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c0551b4af84ec3767be87c5816467e8e976c56b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fab77644842869adc8871e133e4c3f4c35b2b245", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fab77644842869adc8871e133e4c3f4c35b2b245", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fab77644842869adc8871e133e4c3f4c35b2b245", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fab77644842869adc8871e133e4c3f4c35b2b245/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b898878032a5bbba0d1a981db6399664181531e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b898878032a5bbba0d1a981db6399664181531e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b898878032a5bbba0d1a981db6399664181531e9"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "94b8a1128eee495586aefbdd3db3cbae72e6549e", "filename": "gcc/testsuite/gcc.dg/pr96931.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab77644842869adc8871e133e4c3f4c35b2b245/gcc%2Ftestsuite%2Fgcc.dg%2Fpr96931.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab77644842869adc8871e133e4c3f4c35b2b245/gcc%2Ftestsuite%2Fgcc.dg%2Fpr96931.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr96931.c?ref=fab77644842869adc8871e133e4c3f4c35b2b245", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fpredictive-commoning -fno-tree-loop-im\" } */\n+\n+int bl;\n+\n+void\n+p3 (void);\n+\n+void __attribute__ ((returns_twice))\n+ie (void)\n+{\n+  p3 ();\n+\n+  bl = 0;\n+  for (;;)\n+    ++bl;\n+\n+  ie ();\n+}"}, {"sha": "f8169eef78101b57d0ef834c44bf9914d3a690fa", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab77644842869adc8871e133e4c3f4c35b2b245/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab77644842869adc8871e133e4c3f4c35b2b245/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=fab77644842869adc8871e133e4c3f4c35b2b245", "patch": "@@ -209,7 +209,7 @@ cleanup_control_expr_graph (basic_block bb, gimple_stmt_iterator gsi)\n    to updated gimple_call_flags.  */\n \n static void\n-cleanup_call_ctrl_altering_flag (gimple *bb_end)\n+cleanup_call_ctrl_altering_flag (basic_block bb, gimple *bb_end)\n {\n   if (!is_gimple_call (bb_end)\n       || !gimple_call_ctrl_altering_p (bb_end))\n@@ -220,6 +220,24 @@ cleanup_call_ctrl_altering_flag (gimple *bb_end)\n        && !(flags & ECF_LOOPING_CONST_OR_PURE))\n       || (flags & ECF_LEAF))\n     gimple_call_set_ctrl_altering (bb_end, false);\n+  else\n+    {\n+      edge_iterator ei;\n+      edge e;\n+      bool found = false;\n+      FOR_EACH_EDGE (e, ei, bb->succs)\n+\tif (e->flags & EDGE_FALLTHRU)\n+\t  found = true;\n+\telse if (e->flags & EDGE_ABNORMAL)\n+\t  {\n+\t    found = false;\n+\t    break;\n+\t  }\n+      /* If there's no abnormal edge and a fallthru edge the call\n+\t isn't control-altering anymore.  */\n+      if (found)\n+\tgimple_call_set_ctrl_altering (bb_end, false);\n+    }\n }\n \n /* Try to remove superfluous control structures in basic block BB.  Returns\n@@ -243,7 +261,7 @@ cleanup_control_flow_bb (basic_block bb)\n   stmt = gsi_stmt (gsi);\n \n   /* Try to cleanup ctrl altering flag for call which ends bb.  */\n-  cleanup_call_ctrl_altering_flag (stmt);\n+  cleanup_call_ctrl_altering_flag (bb, stmt);\n \n   if (gimple_code (stmt) == GIMPLE_COND\n       || gimple_code (stmt) == GIMPLE_SWITCH)"}]}