{"sha": "b4e89e2d67f984f7d90a81185aa67dfdf6a1f7a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRlODllMmQ2N2Y5ODRmN2Q5MGE4MTE4NWFhNjdkZmRmNmExZjdhMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-02-28T18:34:35Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-02-28T18:34:35Z"}, "message": "i386.c (pentium4_cost): New.\n\n\t* i386.c (pentium4_cost): New.\n\t(m_PENT4): New macro.\n\t(x86_push_memory, x86_movx,x86_cmove, x86_deep_branch, x86_use_sahf\n\tx86_sub_esp_4, x86_sub_esp_8, x86_add_esp_4, x86_add_esp_8\n\tx86_integer_DFmode_moves, x86_partial_reg_dependency,\n\tx86_memory_mismatch_stall): Add Pentium4\n\t(x86_use_q_reg, x86_use_any_reg): Kill.\n\t(override_options): Add pentium4.\n\t(incdec_operand): Return 0 for pentium4.\n\t(ix86_issue_rate): Add PROCESSOR_PENTIUM4 and PROCESSOR_ATHLON.\n\t* i386.h (x86_use_q_reg, x86_use_any_reg): Kill.\n\t(TARGET_PENTIUM4): Define.\n\t(enum processor_type): Add PROCESSOR_PENTIUM4.\n\t(CPP_CPU_DEFAULT_SPEC): Add pentium4 support.\n\t* i386.md (attribute \"cpu\"): Add pentium4.\n\t* invoke.texi (march): Add pentium4.\n\nFrom-SVN: r40134", "tree": {"sha": "536673f2f2aea69af643b78eb5082b1f88e53417", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/536673f2f2aea69af643b78eb5082b1f88e53417"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4e89e2d67f984f7d90a81185aa67dfdf6a1f7a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e89e2d67f984f7d90a81185aa67dfdf6a1f7a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4e89e2d67f984f7d90a81185aa67dfdf6a1f7a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e89e2d67f984f7d90a81185aa67dfdf6a1f7a1/comments", "author": null, "committer": null, "parents": [{"sha": "0073023ddeaacd50dd01a7e8dc88ef4cf832904e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0073023ddeaacd50dd01a7e8dc88ef4cf832904e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0073023ddeaacd50dd01a7e8dc88ef4cf832904e"}], "stats": {"total": 109, "additions": 86, "deletions": 23}, "files": [{"sha": "4db5d52e0451513d1b3c08bc7fc1ff5a0e020e8b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e89e2d67f984f7d90a81185aa67dfdf6a1f7a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e89e2d67f984f7d90a81185aa67dfdf6a1f7a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4e89e2d67f984f7d90a81185aa67dfdf6a1f7a1", "patch": "@@ -1,3 +1,22 @@\n+Wed Feb 28 19:31:42 CET 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.c (pentium4_cost): New.\n+\t(m_PENT4): New macro.\n+\t(x86_push_memory, x86_movx,x86_cmove, x86_deep_branch, x86_use_sahf\n+\tx86_sub_esp_4, x86_sub_esp_8, x86_add_esp_4, x86_add_esp_8\n+\tx86_integer_DFmode_moves, x86_partial_reg_dependency,\n+\tx86_memory_mismatch_stall): Add Pentium4\n+\t(x86_use_q_reg, x86_use_any_reg): Kill.\n+\t(override_options): Add pentium4.\n+\t(incdec_operand): Return 0 for pentium4.\n+\t(ix86_issue_rate): Add PROCESSOR_PENTIUM4 and PROCESSOR_ATHLON.\n+\t* i386.h (x86_use_q_reg, x86_use_any_reg): Kill.\n+\t(TARGET_PENTIUM4): Define.\n+\t(enum processor_type): Add PROCESSOR_PENTIUM4.\n+\t(CPP_CPU_DEFAULT_SPEC): Add pentium4 support.\n+\t* i386.md (attribute \"cpu\"): Add pentium4.\n+\t* invoke.texi (march): Add pentium4.\n+\n Wed Feb 28 19:28:06 CET 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.md (sse_mov?fcc*): New patterns and splitters."}, {"sha": "d287d1a0a22ced4d0ac0a0972904a1f93d112363", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 55, "deletions": 16, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e89e2d67f984f7d90a81185aa67dfdf6a1f7a1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e89e2d67f984f7d90a81185aa67dfdf6a1f7a1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b4e89e2d67f984f7d90a81185aa67dfdf6a1f7a1", "patch": "@@ -239,6 +239,38 @@ struct processor_costs athlon_cost = {\n   6\t\t\t\t\t/* MMX or SSE register to integer */\n };\n \n+struct processor_costs pentium4_cost = {\n+  1,\t\t\t\t\t/* cost of an add instruction */\n+  1,\t\t\t\t\t/* cost of a lea instruction */\n+  8,\t\t\t\t\t/* variable shift costs */\n+  8,\t\t\t\t\t/* constant shift costs */\n+  30,\t\t\t\t\t/* cost of starting a multiply */\n+  0,\t\t\t\t\t/* cost of multiply per each bit set */\n+  112,\t\t\t\t\t/* cost of a divide/mod */\n+  16,\t\t\t\t\t/* \"large\" insn */\n+  6,\t\t\t\t\t/* MOVE_RATIO */\n+  2,\t\t\t\t\t/* cost for loading QImode using movzbl */\n+  {4, 5, 4},\t\t\t\t/* cost of loading integer registers\n+\t\t\t\t\t   in QImode, HImode and SImode.\n+\t\t\t\t\t   Relative to reg-reg move (2).  */\n+  {2, 3, 2},\t\t\t\t/* cost of storing integer registers */\n+  2,\t\t\t\t\t/* cost of reg,reg fld/fst */\n+  {2, 2, 6},\t\t\t\t/* cost of loading fp registers\n+\t\t\t\t\t   in SFmode, DFmode and XFmode */\n+  {4, 4, 6},\t\t\t\t/* cost of loading integer registers */\n+  2,\t\t\t\t\t/* cost of moving MMX register */\n+  {2, 2},\t\t\t\t/* cost of loading MMX registers\n+\t\t\t\t\t   in SImode and DImode */\n+  {2, 2},\t\t\t\t/* cost of storing MMX registers\n+\t\t\t\t\t   in SImode and DImode */\n+  12,\t\t\t\t\t/* cost of moving SSE register */\n+  {12, 12, 12},\t\t\t\t/* cost of loading SSE registers\n+\t\t\t\t\t   in SImode, DImode and TImode */\n+  {2, 2, 8},\t\t\t\t/* cost of storing SSE registers\n+\t\t\t\t\t   in SImode, DImode and TImode */\n+  10,\t\t\t\t\t/* MMX or SSE register to integer */\n+};\n+\n struct processor_costs *ix86_cost = &pentium_cost;\n \n /* Processor feature/optimization bitmasks.  */\n@@ -248,19 +280,18 @@ struct processor_costs *ix86_cost = &pentium_cost;\n #define m_PPRO (1<<PROCESSOR_PENTIUMPRO)\n #define m_K6  (1<<PROCESSOR_K6)\n #define m_ATHLON  (1<<PROCESSOR_ATHLON)\n+#define m_PENT4  (1<<PROCESSOR_PENTIUM4)\n \n const int x86_use_leave = m_386 | m_K6 | m_ATHLON;\n-const int x86_push_memory = m_386 | m_K6 | m_ATHLON;\n+const int x86_push_memory = m_386 | m_K6 | m_ATHLON | m_PENT4;\n const int x86_zero_extend_with_and = m_486 | m_PENT;\n-const int x86_movx = m_ATHLON | m_PPRO /* m_386 | m_K6 */;\n+const int x86_movx = m_ATHLON | m_PPRO | m_PENT4 /* m_386 | m_K6 */;\n const int x86_double_with_add = ~m_386;\n const int x86_use_bit_test = m_386;\n const int x86_unroll_strlen = m_486 | m_PENT | m_PPRO | m_ATHLON | m_K6;\n-const int x86_use_q_reg = m_PENT | m_PPRO | m_K6;\n-const int x86_use_any_reg = m_486;\n-const int x86_cmove = m_PPRO | m_ATHLON;\n-const int x86_deep_branch = m_PPRO | m_K6 | m_ATHLON;\n-const int x86_use_sahf = m_PPRO | m_K6;\n+const int x86_cmove = m_PPRO | m_ATHLON | m_PENT4;\n+const int x86_deep_branch = m_PPRO | m_K6 | m_ATHLON | m_PENT4;\n+const int x86_use_sahf = m_PPRO | m_K6 | m_PENT4;\n const int x86_partial_reg_stall = m_PPRO;\n const int x86_use_loop = m_K6;\n const int x86_use_fiop = ~(m_PPRO | m_ATHLON | m_PENT);\n@@ -270,18 +301,18 @@ const int x86_read_modify_write = ~m_PENT;\n const int x86_read_modify = ~(m_PENT | m_PPRO);\n const int x86_split_long_moves = m_PPRO;\n const int x86_promote_QImode = m_K6 | m_PENT | m_386 | m_486;\n-const int x86_single_stringop = m_386;\n+const int x86_single_stringop = m_386 | m_PENT4;\n const int x86_qimode_math = ~(0);\n const int x86_promote_qi_regs = 0;\n const int x86_himode_math = ~(m_PPRO);\n const int x86_promote_hi_regs = m_PPRO;\n-const int x86_sub_esp_4 = m_ATHLON | m_PPRO;\n-const int x86_sub_esp_8 = m_ATHLON | m_PPRO | m_386 | m_486;\n-const int x86_add_esp_4 = m_ATHLON | m_K6;\n-const int x86_add_esp_8 = m_ATHLON | m_PPRO | m_K6 | m_386 | m_486;\n-const int x86_integer_DFmode_moves = ~m_ATHLON;\n-const int x86_partial_reg_dependency = m_ATHLON;\n-const int x86_memory_mismatch_stall = m_ATHLON;\n+const int x86_sub_esp_4 = m_ATHLON | m_PPRO | m_PENT4;\n+const int x86_sub_esp_8 = m_ATHLON | m_PPRO | m_386 | m_486 | m_PENT4;\n+const int x86_add_esp_4 = m_ATHLON | m_K6 | m_PENT4;\n+const int x86_add_esp_8 = m_ATHLON | m_PPRO | m_K6 | m_386 | m_486 | m_PENT4;\n+const int x86_integer_DFmode_moves = ~(m_ATHLON | m_PENT4);\n+const int x86_partial_reg_dependency = m_ATHLON | m_PENT4;\n+const int x86_memory_mismatch_stall = m_ATHLON | m_PENT4;\n \n #define AT_BP(mode) (gen_rtx_MEM ((mode), hard_frame_pointer_rtx))\n \n@@ -577,7 +608,8 @@ override_options ()\n       {&pentium_cost, 0, 0, -4, -4, -4, 1},\n       {&pentiumpro_cost, 0, 0, 4, -4, 4, 1},\n       {&k6_cost, 0, 0, -5, -5, 4, 1},\n-      {&athlon_cost, 0, 0, 4, -4, 4, 1}\n+      {&athlon_cost, 0, 0, 4, -4, 4, 1},\n+      {&pentium4_cost, 0, 0, 2, 2, 2, 1}\n     };\n \n   static struct pta\n@@ -595,6 +627,7 @@ override_options ()\n       {\"pentiumpro\", PROCESSOR_PENTIUMPRO},\n       {\"k6\", PROCESSOR_K6},\n       {\"athlon\", PROCESSOR_ATHLON},\n+      {\"pentium4\", PROCESSOR_PENTIUM4},\n     };\n \n   int const pta_size = sizeof (processor_alias_table) / sizeof (struct pta);\n@@ -1202,6 +1235,10 @@ incdec_operand (op, mode)\n      register rtx op;\n      enum machine_mode mode;\n {\n+  /* On Pentium4, the inc and dec operations causes extra dependancy on flag\n+     registers, since carry flag is not set.  */\n+  if (TARGET_PENTIUM4 && !optimize_size)\n+    return 0;\n   if (op == const1_rtx || op == constm1_rtx)\n     return 1;\n   if (GET_CODE (op) != CONST_INT)\n@@ -6900,6 +6937,8 @@ ix86_issue_rate ()\n       return 2;\n \n     case PROCESSOR_PENTIUMPRO:\n+    case PROCESSOR_PENTIUM4:\n+    case PROCESSOR_ATHLON:\n       return 3;\n \n     default:"}, {"sha": "b7a74af809ee4617e8acc7d478a8dd0f6b3d0049", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e89e2d67f984f7d90a81185aa67dfdf6a1f7a1/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e89e2d67f984f7d90a81185aa67dfdf6a1f7a1/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=b4e89e2d67f984f7d90a81185aa67dfdf6a1f7a1", "patch": "@@ -184,11 +184,12 @@ extern int target_flags;\n #define TARGET_PENTIUMPRO (ix86_cpu == PROCESSOR_PENTIUMPRO)\n #define TARGET_K6 (ix86_cpu == PROCESSOR_K6)\n #define TARGET_ATHLON (ix86_cpu == PROCESSOR_ATHLON)\n+#define TARGET_PENTIUM4 (ix86_cpu == PROCESSOR_PENTIUM4)\n \n #define CPUMASK (1 << ix86_cpu)\n extern const int x86_use_leave, x86_push_memory, x86_zero_extend_with_and;\n extern const int x86_use_bit_test, x86_cmove, x86_deep_branch;\n-extern const int x86_unroll_strlen, x86_use_q_reg, x86_use_any_reg;\n+extern const int x86_unroll_strlen;\n extern const int x86_double_with_add, x86_partial_reg_stall, x86_movx;\n extern const int x86_use_loop, x86_use_fiop, x86_use_mov0;\n extern const int x86_use_cltd, x86_read_modify_write;\n@@ -204,8 +205,6 @@ extern const int x86_partial_reg_dependency, x86_memory_mismatch_stall;\n #define TARGET_ZERO_EXTEND_WITH_AND (x86_zero_extend_with_and & CPUMASK)\n #define TARGET_USE_BIT_TEST (x86_use_bit_test & CPUMASK)\n #define TARGET_UNROLL_STRLEN (x86_unroll_strlen & CPUMASK)\n-#define TARGET_USE_Q_REG (x86_use_q_reg & CPUMASK)\n-#define TARGET_USE_ANY_REG (x86_use_any_reg & CPUMASK)\n /* For sane SSE instruction set generation we need fcomi instruction.  It is\n    safe to enable all CMOVE instructions.  */\n #define TARGET_CMOVE ((x86_cmove & (1 << ix86_arch)) || TARGET_SSE)\n@@ -345,6 +344,7 @@ enum processor_type\n   PROCESSOR_PENTIUMPRO,\n   PROCESSOR_K6,\n   PROCESSOR_ATHLON,\n+  PROCESSOR_PENTIUM4,\n   PROCESSOR_max\n };\n \n@@ -431,6 +431,9 @@ extern int ix86_arch;\n #if TARGET_CPU_DEFAULT == 5\n #define CPP_CPU_DEFAULT_SPEC \"-D__tune_athlon__\"\n #endif\n+#if TARGET_CPU_DEFAULT == 6\n+#define CPP_CPU_DEFAULT_SPEC \"-D__tune_pentium4__\"\n+#endif\n #ifndef CPP_CPU_DEFAULT_SPEC\n #define CPP_CPU_DEFAULT_SPEC \"-D__tune_i386__\"\n #endif\n@@ -449,12 +452,14 @@ extern int ix86_arch;\n   %{!mcpu*:-D__tune_i686__ -D__tune_pentiumpro__ }}\\\n %{march=k6:-D__k6 -D__k6__ %{!mcpu*:-D__tune_k6__ }}\\\n %{march=athlon:-D__athlon -D__athlon__ %{!mcpu*:-D__tune_athlon__ }}\\\n+%{mpentium4=pentium4:-D__pentium4 -D__pentium4__ %{!mcpu*:-D__tune_pentium4__ }}\\\n %{m386|mcpu=i386:-D__tune_i386__ }\\\n %{m486|mcpu=i486:-D__tune_i486__ }\\\n %{mpentium|mcpu=pentium|mcpu=i586:-D__tune_i586__ -D__tune_pentium__ }\\\n %{mpentiumpro|mcpu=pentiumpro|mcpu=i686:-D__tune_i686__ -D__tune_pentiumpro__ }\\\n %{mcpu=k6:-D__tune_k6__ }\\\n %{mcpu=athlon:-D__tune_athlon__ }\\\n+%{mcpu=pentium4:-D__tune_pentium4__ }\\\n %{!march*:%{!mcpu*:%{!m386:%{!m486:%{!mpentium*:%(cpp_cpu_default)}}}}}\"\n #endif\n "}, {"sha": "aa66d8eabda1d4a2d85658d0532d708971e4a943", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e89e2d67f984f7d90a81185aa67dfdf6a1f7a1/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e89e2d67f984f7d90a81185aa67dfdf6a1f7a1/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=b4e89e2d67f984f7d90a81185aa67dfdf6a1f7a1", "patch": "@@ -97,7 +97,7 @@\n \f\n ;; Processor type.  This attribute must exactly match the processor_type\n ;; enumeration in i386.h.\n-(define_attr \"cpu\" \"i386,i486,pentium,pentiumpro,k6,athlon\"\n+(define_attr \"cpu\" \"i386,i486,pentium,pentiumpro,k6,athlon,pentium4\"\n   (const (symbol_ref \"ix86_cpu\")))\n \n ;; A basic instruction type.  Refinements due to arguments to be"}, {"sha": "c95e7746ac3a337aecf3cb4e16dc7478dff10de7", "filename": "gcc/invoke.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e89e2d67f984f7d90a81185aa67dfdf6a1f7a1/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e89e2d67f984f7d90a81185aa67dfdf6a1f7a1/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=b4e89e2d67f984f7d90a81185aa67dfdf6a1f7a1", "patch": "@@ -6534,14 +6534,14 @@ These @samp{-m} options are defined for the i386 family of computers:\n Assume the defaults for the machine type @var{cpu type} when scheduling\n instructions.  The choices for @var{cpu type} are @samp{i386},\n @samp{i486}, @samp{i586}, @samp{i686}, @samp{pentium},\n-@samp{pentiumpro}, @samp{k6}, and @samp{athlon}\n+@samp{pentiumpro}, @samp{pentium4}, @samp{k6}, and @samp{athlon}\n \n While picking a specific @var{cpu type} will schedule things appropriately\n for that particular chip, the compiler will not generate any code that\n does not run on the i386 without the @samp{-march=@var{cpu type}} option\n being used.  @samp{i586} is equivalent to @samp{pentium} and @samp{i686}\n-is equivalent to @samp{pentiumpro}.  @samp{k6} is the AMD chip as\n-opposed to the Intel ones.\n+is equivalent to @samp{pentiumpro}.  @samp{k6} and @samp{athlon} sre the\n+AMD chips as opposed to the Intel ones.\n \n @item -march=@var{cpu type}\n Generate instructions for the machine type @var{cpu type}.  The choices"}]}