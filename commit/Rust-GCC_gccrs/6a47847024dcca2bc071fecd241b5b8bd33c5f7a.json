{"sha": "6a47847024dcca2bc071fecd241b5b8bd33c5f7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE0Nzg0NzAyNGRjY2EyYmMwNzFmZWNkMjQxYjViOGJkMzNjNWY3YQ==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-07-06T16:58:16Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-07-06T16:58:16Z"}, "message": "[ARM] PR/65956 AAPCS update for alignment attribute\n\ngcc/:\n\tPR target/65956\n\t* config/arm/arm.c (arm_needs_doubleword_align): Drop any outer\n\talignment attribute, exploring one level down for records and arrays.\n\ngcc/testsuite/:\n\n\t* gcc.target/arm/aapcs/align1.c: New.\n\t* gcc.target/arm/aapcs/align_rec1.c: New.\n\t* gcc.target/arm/aapcs/align2.c: New.\n\t* gcc.target/arm/aapcs/align_rec2.c: New.\n\t* gcc.target/arm/aapcs/align3.c: New.\n\t* gcc.target/arm/aapcs/align_rec3.c: New.\n\t* gcc.target/arm/aapcs/align4.c: New.\n\t* gcc.target/arm/aapcs/align_rec4.c: New.\n\t* gcc.target/arm/aapcs/align_vararg1.c: New.\n\t* gcc.target/arm/aapcs/align_vararg2.c: New.\n\nFrom-SVN: r225465", "tree": {"sha": "9e43e671bd10a0fffa3b2a35bbef2def72907ff2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e43e671bd10a0fffa3b2a35bbef2def72907ff2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a47847024dcca2bc071fecd241b5b8bd33c5f7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a47847024dcca2bc071fecd241b5b8bd33c5f7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a47847024dcca2bc071fecd241b5b8bd33c5f7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a47847024dcca2bc071fecd241b5b8bd33c5f7a/comments", "author": null, "committer": null, "parents": [{"sha": "a0f4ee6ee5336997f2a3eeaca330d225ae82ace8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0f4ee6ee5336997f2a3eeaca330d225ae82ace8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0f4ee6ee5336997f2a3eeaca330d225ae82ace8"}], "stats": {"total": 387, "additions": 385, "deletions": 2}, "files": [{"sha": "fe64509b9af70a47c17a4b0f93011c7043544e94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a47847024dcca2bc071fecd241b5b8bd33c5f7a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a47847024dcca2bc071fecd241b5b8bd33c5f7a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a47847024dcca2bc071fecd241b5b8bd33c5f7a", "patch": "@@ -1,3 +1,9 @@\n+2015-07-06  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\tPR target/65956\n+\t* config/arm/arm.c (arm_needs_doubleword_align): Drop any outer\n+\talignment attribute, exploring one level down for records and arrays.\n+\n 2015-07-06  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (extv<mode>): Rename from extv.  Use SWI24"}, {"sha": "9d697af5ef8d704beea000eda5651006f7cce84a", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a47847024dcca2bc071fecd241b5b8bd33c5f7a/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a47847024dcca2bc071fecd241b5b8bd33c5f7a/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=6a47847024dcca2bc071fecd241b5b8bd33c5f7a", "patch": "@@ -6161,8 +6161,23 @@ arm_init_cumulative_args (CUMULATIVE_ARGS *pcum, tree fntype,\n static bool\n arm_needs_doubleword_align (machine_mode mode, const_tree type)\n {\n-  return (GET_MODE_ALIGNMENT (mode) > PARM_BOUNDARY\n-\t  || (type && TYPE_ALIGN (type) > PARM_BOUNDARY));\n+  if (!type)\n+    return PARM_BOUNDARY < GET_MODE_ALIGNMENT (mode);\n+\n+  /* Scalar and vector types: Use natural alignment, i.e. of base type.  */\n+  if (!AGGREGATE_TYPE_P (type))\n+    return TYPE_ALIGN (TYPE_MAIN_VARIANT (type)) > PARM_BOUNDARY;\n+\n+  /* Array types: Use member alignment of element type.  */\n+  if (TREE_CODE (type) == ARRAY_TYPE)\n+    return TYPE_ALIGN (TREE_TYPE (type)) > PARM_BOUNDARY;\n+\n+  /* Record/aggregate types: Use greatest member alignment of any member.  */ \n+  for (tree field = TYPE_FIELDS (type); field; field = DECL_CHAIN (field))\n+    if (DECL_ALIGN (field) > PARM_BOUNDARY)\n+      return true;\n+\n+  return false;\n }\n \n "}, {"sha": "529c8637f9097c81a7b418f01073e344181db674", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a47847024dcca2bc071fecd241b5b8bd33c5f7a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a47847024dcca2bc071fecd241b5b8bd33c5f7a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6a47847024dcca2bc071fecd241b5b8bd33c5f7a", "patch": "@@ -1,3 +1,16 @@\n+2015-07-06  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* gcc.target/arm/aapcs/align1.c: New.\n+\t* gcc.target/arm/aapcs/align_rec1.c: New.\n+\t* gcc.target/arm/aapcs/align2.c: New.\n+\t* gcc.target/arm/aapcs/align_rec2.c: New.\n+\t* gcc.target/arm/aapcs/align3.c: New.\n+\t* gcc.target/arm/aapcs/align_rec3.c: New.\n+\t* gcc.target/arm/aapcs/align4.c: New.\n+\t* gcc.target/arm/aapcs/align_rec4.c: New.\n+\t* gcc.target/arm/aapcs/align_vararg1.c: New.\n+\t* gcc.target/arm/aapcs/align_vararg2.c: New.\n+\n 2015-07-06  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \t* gfortran.dg/iomsg_2.f90: New test."}, {"sha": "8981d57c3eaf0bd89d224bec79ff8a45627a0a89", "filename": "gcc/testsuite/gcc.target/arm/aapcs/align1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a47847024dcca2bc071fecd241b5b8bd33c5f7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Falign1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a47847024dcca2bc071fecd241b5b8bd33c5f7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Falign1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Falign1.c?ref=6a47847024dcca2bc071fecd241b5b8bd33c5f7a", "patch": "@@ -0,0 +1,29 @@\n+/* Test AAPCS layout (alignment).  */\n+\n+/* { dg-do run { target arm_eabi } } */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-options \"-O\" } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"align1.c\"\n+\n+typedef __attribute__((aligned (8))) int alignedint;\n+\n+alignedint a = 11;\n+alignedint b = 13;\n+alignedint c = 17;\n+alignedint d = 19;\n+alignedint e = 23;\n+alignedint f = 29;\n+\n+#include \"abitest.h\"\n+#else\n+  ARG (alignedint, a, R0)\n+  /* Attribute suggests R2, but we should use only natural alignment:  */\n+  ARG (alignedint, b, R1)\n+  ARG (alignedint, c, R2)\n+  ARG (alignedint, d, R3)\n+  ARG (alignedint, e, STACK)\n+  /* Attribute would suggest STACK + 8 but should be ignored:  */\n+  LAST_ARG (alignedint, f, STACK + 4)\n+#endif"}, {"sha": "992da53c606c793f25278152406582bb993719d2", "filename": "gcc/testsuite/gcc.target/arm/aapcs/align2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a47847024dcca2bc071fecd241b5b8bd33c5f7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Falign2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a47847024dcca2bc071fecd241b5b8bd33c5f7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Falign2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Falign2.c?ref=6a47847024dcca2bc071fecd241b5b8bd33c5f7a", "patch": "@@ -0,0 +1,30 @@\n+/* Test AAPCS layout (alignment).  */\n+\n+/* { dg-do run { target arm_eabi } } */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-options \"-O\" } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"align2.c\"\n+\n+/* The underlying struct here has alignment 4.  */\n+typedef struct __attribute__((aligned (8)))\n+  {\n+    int x;\n+    int y;\n+  } overaligned;\n+\n+/* A couple of instances, at 8-byte-aligned memory locations.  */\n+overaligned a = { 2, 3 };\n+overaligned b = { 5, 8 };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG (int, 7, R0)\n+  /* Alignment should be 4.  */\n+  ARG (overaligned, a, R1)\n+  ARG (int, 9, R3)\n+  ARG (int, 10, STACK)\n+  /* Alignment should be 4.  */\n+  LAST_ARG (overaligned, b, STACK + 4)\n+#endif"}, {"sha": "81ad3f587a95aae52ec601ce5a60b198e5351edf", "filename": "gcc/testsuite/gcc.target/arm/aapcs/align3.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a47847024dcca2bc071fecd241b5b8bd33c5f7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Falign3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a47847024dcca2bc071fecd241b5b8bd33c5f7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Falign3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Falign3.c?ref=6a47847024dcca2bc071fecd241b5b8bd33c5f7a", "patch": "@@ -0,0 +1,42 @@\n+/* Test AAPCS layout (alignment).  */\n+\n+/* { dg-do run { target arm_eabi } } */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-options \"-O3\" } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"align3.c\"\n+\n+/* Struct will be aligned to 8.  */\n+struct s\n+  {\n+    int x;\n+    /* 4 bytes padding here.  */\n+    __attribute__((aligned (8))) int y;\n+    /* 4 bytes padding here.  */\n+  };\n+\n+typedef struct s __attribute__((aligned (4))) underaligned;\n+\n+#define EXPECTED_STRUCT_SIZE 16\n+extern void link_failure (void);\n+int\n+foo ()\n+{\n+  /* Optimization gets rid of this before linking.  */\n+  if (sizeof (struct s) != EXPECTED_STRUCT_SIZE)\n+    link_failure ();\n+}\n+\n+underaligned a = { 1, 4 };\n+underaligned b = { 9, 16 };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG (int, 3, R0)\n+  /* Object alignment is 8, so split between 2 regs and 8 on stack.  */\n+  ARG (underaligned, a, R2)\n+  ARG (int, 6, STACK + 8)\n+  /* Object alignment is 8, so skip over STACK + 12.  */\n+  LAST_ARG (underaligned, b, STACK + 16)\n+#endif"}, {"sha": "5535c55b8ac895ea31e468fd5474a71c232d2fea", "filename": "gcc/testsuite/gcc.target/arm/aapcs/align4.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a47847024dcca2bc071fecd241b5b8bd33c5f7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Falign4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a47847024dcca2bc071fecd241b5b8bd33c5f7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Falign4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Falign4.c?ref=6a47847024dcca2bc071fecd241b5b8bd33c5f7a", "patch": "@@ -0,0 +1,29 @@\n+/* Test AAPCS layout (alignment) - passing vectors in GPRs.  */\n+\n+/* { dg-do run { target arm_eabi } } */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-require-effective-target arm_neon_ok  } */\n+/* { dg-options \"-O\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"align4.c\"\n+\n+#define PCSATTR __attribute__((pcs(\"aapcs\")))\n+\n+#include <arm_neon.h>\n+\n+typedef __attribute__((aligned (4))) int32x2_t unalignedvec;\n+\n+unalignedvec a = {11, 13};\n+unalignedvec b = {17, 19};\n+\n+#include \"abitest.h\"\n+#else\n+  ARG (int, 2, R0)\n+  /* Attribute suggests R1, but we should use natural alignment:  */\n+  ARG (unalignedvec, a, R2)\n+  ARG (int, 6, STACK)\n+  /* Attribute would suggest STACK + 4 but should be ignored:  */\n+  LAST_ARG (unalignedvec, b, STACK + 8)\n+#endif"}, {"sha": "2e42baefb5877f28b763cc302fd4ef728fb3f72c", "filename": "gcc/testsuite/gcc.target/arm/aapcs/align_rec1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a47847024dcca2bc071fecd241b5b8bd33c5f7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Falign_rec1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a47847024dcca2bc071fecd241b5b8bd33c5f7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Falign_rec1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Falign_rec1.c?ref=6a47847024dcca2bc071fecd241b5b8bd33c5f7a", "patch": "@@ -0,0 +1,36 @@\n+/* Test AAPCS layout (alignment) for callee.  */\n+\n+/* { dg-do run { target arm_eabi } } */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-options \"-O2 -fno-inline\" } */\n+\n+extern void abort (void);\n+\n+typedef __attribute__((aligned (8))) int alignedint;\n+\n+alignedint a = 11;\n+alignedint b = 13;\n+alignedint c = 17;\n+alignedint d = 19;\n+alignedint e = 23;\n+alignedint f = 29;\n+\n+void\n+foo (alignedint r0, alignedint r1, alignedint r2, alignedint r3,\n+     alignedint stack, alignedint stack4)\n+{\n+  if (r0 != a\n+      || r1 != b\n+      || r2 != c\n+      || r3 != d\n+      || stack != e\n+      || stack4 !=f)\n+    abort ();\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  foo (a, b, c, d, e, f);\n+  return 0;\n+}"}, {"sha": "a00da508443f6c350dac610851d111d0685f2853", "filename": "gcc/testsuite/gcc.target/arm/aapcs/align_rec2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a47847024dcca2bc071fecd241b5b8bd33c5f7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Falign_rec2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a47847024dcca2bc071fecd241b5b8bd33c5f7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Falign_rec2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Falign_rec2.c?ref=6a47847024dcca2bc071fecd241b5b8bd33c5f7a", "patch": "@@ -0,0 +1,41 @@\n+/* Test AAPCS layout (alignment) for callee.  */\n+\n+/* { dg-do run { target arm_eabi } } */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-options \"-O2 -fno-inline\" } */\n+\n+extern int memcmp (const void *s1, const void *s2, __SIZE_TYPE__ n);\n+extern void abort (void);\n+\n+typedef struct __attribute__((aligned (8)))\n+  {\n+    int x;\n+    int y;\n+  } overaligned;\n+\n+overaligned a = { 2, 3 };\n+overaligned b = { 5, 8 };\n+\n+void\n+f (int r0, overaligned r1, int r3, int stack, overaligned stack4)\n+{\n+  if (r0 != 7 || r3 != 9 || stack != 10)\n+    abort ();\n+  if (memcmp ((void *) &r1, (void *)&a, sizeof (overaligned)))\n+    abort ();\n+  if (memcmp ((void *)&stack4, (void *)&b, sizeof (overaligned)))\n+    abort ();\n+  int addr = ((int) &stack4) & 7;\n+  if (addr != 0)\n+    {\n+      __builtin_printf (\"Alignment was %d\\n\", addr);\n+      abort ();\n+    }\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  f (7, a, 9, 10, b);\n+  return 0;\n+}"}, {"sha": "2184cb76a6a7f68c59b39c12ec6472ac7b561794", "filename": "gcc/testsuite/gcc.target/arm/aapcs/align_rec3.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a47847024dcca2bc071fecd241b5b8bd33c5f7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Falign_rec3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a47847024dcca2bc071fecd241b5b8bd33c5f7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Falign_rec3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Falign_rec3.c?ref=6a47847024dcca2bc071fecd241b5b8bd33c5f7a", "patch": "@@ -0,0 +1,43 @@\n+/* Test AAPCS layout (alignment) for callee.  */\n+\n+/* { dg-do run { target arm_eabi } } */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-options \"-O2 -fno-inline\" } */\n+\n+/* Test AAPCS layout (alignment) for callee.  */\n+\n+extern int memcmp (const void *s1, const void *s2, __SIZE_TYPE__ n);\n+extern void abort (void);\n+\n+\n+/* Struct will be aligned to 8.  */\n+struct s\n+  {\n+    int x;\n+    /* 4 bytes padding here.  */\n+    __attribute__((aligned (8))) int y;\n+    /* 4 bytes padding here.  */\n+  };\n+\n+typedef struct s __attribute__((aligned (4))) underaligned;\n+\n+underaligned a = { 1, 4 };\n+underaligned b = { 9, 16 };\n+\n+void\n+f (int r0, underaligned r2, int stack8, underaligned stack16)\n+{\n+  if (r0 != 3 || stack8 != 6)\n+    abort ();\n+  if (memcmp ((void *) &r2, (void *)&a, sizeof (underaligned)))\n+    abort ();\n+  if (memcmp ((void *)&stack16, (void *)&b, sizeof (underaligned)))\n+    abort ();\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  f (3, a, 6, b);\n+  return 0;\n+}"}, {"sha": "907b90af70f7ce2ded456d08d6471462e64fa15c", "filename": "gcc/testsuite/gcc.target/arm/aapcs/align_rec4.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a47847024dcca2bc071fecd241b5b8bd33c5f7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Falign_rec4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a47847024dcca2bc071fecd241b5b8bd33c5f7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Falign_rec4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Falign_rec4.c?ref=6a47847024dcca2bc071fecd241b5b8bd33c5f7a", "patch": "@@ -0,0 +1,33 @@\n+/* Test AAPCS layout (alignment) for callee.  */\n+\n+/* { dg-do run { target arm_eabi } } */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-O -fno-inline\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include <arm_neon.h>\n+\n+extern int memcmp (const void *s1, const void *s2, __SIZE_TYPE__ n);\n+extern void abort (void);\n+\n+typedef __attribute__((aligned (4))) int32x4_t unalignedvec;\n+\n+unalignedvec a = {11, 13};\n+unalignedvec b = {17, 19};\n+\n+void\n+foo (int r0, unalignedvec r2, int s0, unalignedvec s8)\n+{\n+  if (r0 != 2 || s0 != 6\n+      || memcmp ( (void *) &r2, (void *) &a, 16)\n+      || memcmp ( (void *) &s8, (void *) &b, 16))\n+    abort ();\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  foo (2, a, 6, b);\n+  return 0;\n+}"}, {"sha": "daa321415998df658814d853a15284ae2125cb1e", "filename": "gcc/testsuite/gcc.target/arm/aapcs/align_vaarg1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a47847024dcca2bc071fecd241b5b8bd33c5f7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Falign_vaarg1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a47847024dcca2bc071fecd241b5b8bd33c5f7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Falign_vaarg1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Falign_vaarg1.c?ref=6a47847024dcca2bc071fecd241b5b8bd33c5f7a", "patch": "@@ -0,0 +1,36 @@\n+/* Test AAPCS layout (alignment of varargs) for callee.  */\n+\n+/* { dg-do run { target arm_eabi } } */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-options \"-O2 -fno-inline\" } */\n+\n+#include <stdarg.h>\n+\n+extern void abort (void);\n+\n+typedef __attribute__((aligned (8))) int alignedint;\n+\n+void\n+foo (int i, ...)\n+{\n+  va_list va;\n+  va_start (va, i);\n+  /* Arguments should be passed in the same registers as if they were ints.  */\n+  while (i-- > 0)\n+    if (va_arg (va, int) != i)\n+      abort ();\n+  va_end (va);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  alignedint a = 5;\n+  alignedint b = 4;\n+  alignedint c = 3;\n+  alignedint d = 2;\n+  alignedint e = 1;\n+  alignedint f = 0;\n+  foo (a, b, c, d, e, f);\n+  return 0;\n+}"}, {"sha": "b0c923b97edbdf7ee75ce0d2ad868a16f49485fd", "filename": "gcc/testsuite/gcc.target/arm/aapcs/align_vaarg2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a47847024dcca2bc071fecd241b5b8bd33c5f7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Falign_vaarg2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a47847024dcca2bc071fecd241b5b8bd33c5f7a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Falign_vaarg2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Falign_vaarg2.c?ref=6a47847024dcca2bc071fecd241b5b8bd33c5f7a", "patch": "@@ -0,0 +1,30 @@\n+/* Test AAPCS layout (alignment of varargs) for callee.  */\n+\n+/* { dg-do run { target arm_eabi } } */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-options \"-O2 -fno-inline\" } */\n+\n+#include <stdarg.h>\n+\n+extern void abort (void);\n+\n+typedef __attribute__((aligned (8))) int alignedint;\n+\n+void\n+foo (int i, ...)\n+{\n+  va_list va;\n+  va_start (va, i);\n+  /* alignedint should be pulled out of regs/stack just like an int.  */\n+  while (i-- > 0)\n+    if (va_arg (va, alignedint) != i)\n+      abort ();\n+  va_end (va);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  foo (5, 4, 3, 2, 1, 0);\n+  return 0;\n+}"}]}