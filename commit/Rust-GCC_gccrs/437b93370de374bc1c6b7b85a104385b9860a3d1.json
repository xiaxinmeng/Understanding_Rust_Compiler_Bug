{"sha": "437b93370de374bc1c6b7b85a104385b9860a3d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM3YjkzMzcwZGUzNzRiYzFjNmI3Yjg1YTEwNDM4NWI5ODYwYTNkMQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-14T09:32:39Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-14T09:32:39Z"}, "message": "(reg_names): Make it static.  Use DEBUG_REGISTER_NAMES if that's defined.\n\n(DEBUG_PRINT_REG): Define if not defined.\n(print_rtx): Use DEBUG_PRINT_REG for hard regs.\n\n(reg_name): Moved here.\nGet rid of RCS headers.  Fix up whitespace and comments.\nMake key field and corresponding args `const void *'.\nDon't use assert.\nGet rid of spurious array-level in node_table field; make it void **.\nDeclare module_hash_table, class_hash_table.\n(hash_int): Divide by sizeof (void *), not by 2**that minus 1.\n\nFrom-SVN: r2455", "tree": {"sha": "aa40f2c931fd4f9a9015283920ddf20908063669", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa40f2c931fd4f9a9015283920ddf20908063669"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/437b93370de374bc1c6b7b85a104385b9860a3d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/437b93370de374bc1c6b7b85a104385b9860a3d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/437b93370de374bc1c6b7b85a104385b9860a3d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/437b93370de374bc1c6b7b85a104385b9860a3d1/comments", "author": null, "committer": null, "parents": [{"sha": "584322a46342c8dc53184ac0f0efeca6292b62e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/584322a46342c8dc53184ac0f0efeca6292b62e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/584322a46342c8dc53184ac0f0efeca6292b62e0"}], "stats": {"total": 107, "additions": 30, "deletions": 77}, "files": [{"sha": "e48c650e5417c8332b932c2befab00b2d870d73c", "filename": "gcc/objc/hash.h", "status": "modified", "additions": 30, "deletions": 77, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/437b93370de374bc1c6b7b85a104385b9860a3d1/gcc%2Fobjc%2Fhash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/437b93370de374bc1c6b7b85a104385b9860a3d1/gcc%2Fobjc%2Fhash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fhash.h?ref=437b93370de374bc1c6b7b85a104385b9860a3d1", "patch": "@@ -1,4 +1,5 @@\n-/* Copyright (C) 1989, 1992 Free Software Foundation, Inc.\n+/* Hash tables for Objective C method dispatch.\n+   Copyright (C) 1992 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -22,64 +23,10 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    This exception does not however invalidate any other reasons why\n    the executable file might be covered by the GNU General Public License.  */\n \n-/* \n-  $Header: /home/fsf/rms/c-runtime/dispatch/RCS/hash.h,v 0.12 1992/09/02 01:59:40 rms Exp rms $\n-  $Author: rms $\n-  $Date: 1992/09/02 01:59:40 $\n-  $Log: hash.h,v $\n- * Revision 0.12  1992/09/02  01:59:40  rms\n- * Changed the format of various sections to conform with GNU standard.\n- * Deleted dependencies on some header files.\n- * Replaced the use of the functions from memory.h with funtions like bzero.\n- * Changed the include format.\n- *\n- * Revision 0.11  1992/08/31  21:15:02  dglattin\n- * minor documentation changes.\n- *\n- * Revision 0.10  1992/08/18  04:46:58  dglattin\n- * Saving a working version before release.\n- *\n- * Revision 0.9  1992/04/13  11:43:08  dennisg\n- * Check in after array version of run-time works.\n- * Expect more changes as hash version and other changes are made.\n- *\n- * Revision 0.8  1991/12/10  12:05:28  dennisg\n- * Cleaned up file format for a distribution.\n- *\n- * Revision 0.7  1991/12/03  02:01:23  dennisg\n- * fixed assert macro.\n- * added memory allocation adjustment macro for hash size allocation.\n- *\n- * Revision 0.6  1991/11/24  01:20:02  dennisg\n- * changed shorts back to ints.\n- * the efficiency gained didn't out weight the grossness of the code.\n- *\n- * Revision 0.5  1991/11/23  22:19:21  dennisg\n- * converted some entries in the hash structure from ints to shorts.\n- * this was done to use a less expensive division instruction\n- * in the hashIndex  routine.\n- *\n- * Revision 0.4  1991/11/21  22:25:19  dennisg\n- * deleted hash mask information from hash struct.\n- * changed hashing algorithm.  those values are no longer needed.\n- *\n- * Revision 0.3  1991/11/07  23:23:40  dennisg\n- * implemented hash table expansion as suggested by rms.\n- *\n- * Revision 0.2  1991/11/07  22:30:54  dennisg\n- * added copyleft\n- *\n- * Revision 0.1  1991/10/24  00:45:39  dennisg\n- * Initial check in.  Preliminary development stage.\n- *\n-*/\n- \n \n-#ifndef _hash_INCLUDE_GNU\n-#define _hash_INCLUDE_GNU\n+#ifndef __hash_INCLUDE_GNU\n+#define __hash_INCLUDE_GNU\n \n-\n-#include \"assert.h\"\n #include \"mutex.h\"\n \n \n@@ -88,12 +35,13 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n  *  stored in a hash table.  Each node holds \n  *  a key/value pair.\n  *\n- * Items in the cache are really of type void*.\n+ * Items in the cache are really of type void *.\n  */\n-typedef struct cache_node {\n+typedef struct cache_node\n+{\n   struct cache_node *next;\t/* Pointer to next entry on the list.\n \t\t\t\t   NULL indicates end of list. */\n-  void *key;\t\t\t/* Key used to locate the value.  Used\n+  const void *key;\t\t/* Key used to locate the value.  Used\n \t\t\t\t   to locate value when more than one\n \t\t\t\t   key computes the same hash\n \t\t\t\t   value. */\n@@ -110,7 +58,7 @@ typedef struct cache_node {\n  * typedef.  Therefore, to remove compiler warnings the functions passed to\n  * hash_new will have to be casted to this type. \n  */\n-typedef unsigned int   (*hash_func_type)(void*, void*);\n+typedef unsigned int (*hash_func_type)(void *, const void *);\n \n /*\n  * This data type is the function that compares two hash keys and returns an\n@@ -119,7 +67,7 @@ typedef unsigned int   (*hash_func_type)(void*, void*);\n  * second. \n  */\n \n-typedef int     (*compare_func_type)(void*, void*);\n+typedef int (*compare_func_type)(const void *, const void *);\n \n \n /*\n@@ -128,9 +76,10 @@ typedef int     (*compare_func_type)(void*, void*);\n  * It must be passed to all of the hashing routines\n  *   (except for new).\n  */\n-typedef struct cache {\n+typedef struct cache\n+{\n   /* Variables used to implement the hash itself.  */\n-  node_ptr  (*node_table)[]; /* Pointer to an array of hash nodes.  */\n+  node_ptr *node_table; /* Pointer to an array of hash nodes.  */\n   /* Variables used to track the size of the hash table so to determine\n     when to resize it.  */\n   unsigned int size; /* Number of buckets allocated for the hash table\n@@ -151,10 +100,14 @@ typedef struct cache {\n } *cache_ptr;\n \n \n+/* Two important hash tables.  */\n+extern cache_ptr module_hash_table, class_hash_table;\n+\n /* Allocate and initialize a hash table.  */ \n \n cache_ptr hash_new (unsigned int size,\n-\t\t    hash_func_type hash_func, compare_func_type compare_func);\n+\t\t    hash_func_type hash_func,\n+\t\t    compare_func_type compare_func);\n                        \n /* Deallocate all of the hash nodes and the cache itself.  */\n \n@@ -165,12 +118,12 @@ void hash_delete (cache_ptr cache);\n                                                    \n    assert if the key is already in the hash.  */\n \n-void hash_add (cache_ptr *cachep, void *key, void *value);\n+void hash_add (cache_ptr *cachep, const void *key, void *value);\n      \n /* Remove the key/value pair from the hash table.  \n    assert if the key isn't in the table.  */\n \n-void hash_remove (cache_ptr cache, void *key);\n+void hash_remove (cache_ptr cache, const void *key);\n \n /* Used to index through the hash table.  Start with NULL\n    to get the first entry.\n@@ -185,7 +138,7 @@ node_ptr hash_next (cache_ptr cache, node_ptr node);\n \n /* Used to return a value from a hash table using a given key.  */\n \n-void *hash_value_for_key (cache_ptr cache, void *key);\n+void *hash_value_for_key (cache_ptr cache, const void *key);\n \n \n /************************************************\n@@ -197,20 +150,20 @@ void *hash_value_for_key (cache_ptr cache, void *key);\n ************************************************/\n \n /* Calculate a hash code by performing some \n-   manipulation of the key pointer.  */\n+   manipulation of the key pointer.  (Use the lowest bits\n+   except for those likely to be 0 due to alignment.)  */\n+\n static inline unsigned int \n-hash_int (cache_ptr cache, void *key)\n+hash_int (cache_ptr cache, const void *key)\n {\n-  assert (sizeof (unsigned int) == sizeof (key));\n-\n-  return ((unsigned int)key >> (sizeof (void *) - 1)) & cache->mask;\n+  return ((unsigned int)key / sizeof (void *)) & cache->mask;\n }\n \n \n /* Calculate a hash code by iterating over a NULL \n    terminate string.  */\n static inline unsigned int \n-hash_string (cache_ptr cache, void *key)\n+hash_string (cache_ptr cache, const void *key)\n {\n   unsigned int ret = 0;\n   unsigned int ctr = 0;\n@@ -227,18 +180,18 @@ hash_string (cache_ptr cache, void *key)\n \n /* Compare two integers.  */\n static inline int \n-compare_ints (void *k1, void *k2)\n+compare_ints (const void *k1, const void *k2)\n {\n   return !((int)k1 - (int)k2);\n }\n \n \n /* Compare two strings.  */\n static inline int \n-compare_strings (void *k1, void *k2)\n+compare_strings (const void *k1, const void *k2)\n {\n   return !strcmp (k1, k2);\n }\n \n \n-#endif /* _hash_INCLUDE_GNU */\n+#endif /* not __hash_INCLUDE_GNU */"}]}