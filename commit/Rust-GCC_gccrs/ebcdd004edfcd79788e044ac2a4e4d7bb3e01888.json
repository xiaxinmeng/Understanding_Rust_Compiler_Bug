{"sha": "ebcdd004edfcd79788e044ac2a4e4d7bb3e01888", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJjZGQwMDRlZGZjZDc5Nzg4ZTA0NGFjMmE0ZTRkN2JiM2UwMTg4OA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-03-02T09:11:17Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-14T04:34:57Z"}, "message": "AVX512FP16: Add testcase for fpclass/getmant/getexp instructions.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-helper.h (V512):\n\tAdd xmm component.\n\t* gcc.target/i386/avx512fp16-vfpclassph-1a.c: New test.\n\t* gcc.target/i386/avx512fp16-vfpclassph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vfpclasssh-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vfpclasssh-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vgetexpph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vgetexpph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vgetexpsh-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vgetexpsh-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vgetmantph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vgetmantph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vgetmantsh-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vgetmantsh-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vfpclassph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vfpclassph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vgetexpph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vgetexpph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vgetmantph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vgetmantph-1b.c: Ditto.", "tree": {"sha": "776529e60a425511afda8f1d808a71f09b42babb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/776529e60a425511afda8f1d808a71f09b42babb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8486e9f268b88356d37036b3e30b19ce51d32fdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8486e9f268b88356d37036b3e30b19ce51d32fdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8486e9f268b88356d37036b3e30b19ce51d32fdb"}], "stats": {"total": 732, "additions": 732, "deletions": 0}, "files": [{"sha": "f6f46872c359e2c86c231eb9ac6c845248798d7f", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-helper.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-helper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-helper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-helper.h?ref=ebcdd004edfcd79788e044ac2a4e4d7bb3e01888", "patch": "@@ -29,6 +29,7 @@ typedef union\n   __m256h         ymmh[2];\n   __m256i         ymmi[2];\n   __m128h         xmmh[4];\n+  __m128\t  xmm[4];\n   unsigned short  u16[32];\n   unsigned int    u32[16];\n   float           f32[16];"}, {"sha": "a97dddf6110a197d2732dcf2cb8ca71178780316", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfpclassph-1a.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfpclassph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfpclassph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfpclassph-1a.c?ref=ebcdd004edfcd79788e044ac2a4e4d7bb3e01888", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfpclassphz\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfpclassphz\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512h x512;\n+volatile __mmask16 m32;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  m32 = _mm512_fpclass_ph_mask (x512, 13);\n+  m32 = _mm512_mask_fpclass_ph_mask (2, x512, 13);\n+}"}, {"sha": "9ffb5606b814374513964894e34c8ea8daa1ebc2", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfpclassph-1b.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfpclassph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfpclassph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfpclassph-1b.c?ref=ebcdd004edfcd79788e044ac2a4e4d7bb3e01888", "patch": "@@ -0,0 +1,77 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+/* { dg-require-effective-target avx512fp16 } */\n+\n+#define AVX512FP16\n+#include \"avx512f-helper.h\"\n+\n+#include <math.h>\n+#include <limits.h>\n+#include <float.h>\n+#include \"avx512f-mask-type.h\"\n+#define SIZE (AVX512F_LEN / 16)\n+\n+#ifndef __FPCLASSPH__\n+#define __FPCLASSPH__\n+int check_fp_class_hp (_Float16 src, int imm)\n+{\n+  int qNaN_res = isnan (src);\n+  int sNaN_res = isnan (src);\n+  int Pzero_res = (src == 0.0);\n+  int Nzero_res = (src == -0.0);\n+  int PInf_res = (isinf (src) == 1);\n+  int NInf_res = (isinf (src) == -1);\n+  int Denorm_res = (fpclassify (src) == FP_SUBNORMAL);\n+  int FinNeg_res = __builtin_finite (src) && (src < 0);\n+\n+  int result = (((imm & 1) && qNaN_res)\n+\t\t|| (((imm >> 1) & 1) && Pzero_res)\n+\t\t|| (((imm >> 2) & 1) && Nzero_res)\n+\t\t|| (((imm >> 3) & 1) && PInf_res)\n+\t\t|| (((imm >> 4) & 1) && NInf_res)\n+\t\t|| (((imm >> 5) & 1) && Denorm_res)\n+\t\t|| (((imm >> 6) & 1) && FinNeg_res)\n+\t\t|| (((imm >> 7) & 1) && sNaN_res));\n+  return result;\n+}\n+#endif\n+\n+MASK_TYPE\n+CALC (_Float16 *s1, int imm)\n+{\n+  int i;\n+  MASK_TYPE res = 0;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (check_fp_class_hp(s1[i], imm))\n+      res = res | (1 << i);\n+\n+  return res;\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, h) src;\n+  MASK_TYPE res1, res2, res_ref = 0;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  src.a[0] = NAN;\n+  src.a[1] = 1.0 / 0.0;\n+  for (i = 1; i < SIZE; i++)\n+    {\n+      src.a[i] = -24.43 + 0.6 * i;\n+    }\n+\n+  res1 = INTRINSIC (_fpclass_ph_mask) (src.x, 0xFF);\n+  res2 = INTRINSIC (_mask_fpclass_ph_mask) (mask, src.x, 0xFF);\n+\n+  res_ref = CALC (src.a, 0xFF);\n+\n+  if (res_ref != res1)\n+    abort ();\n+\n+  if ((mask & res_ref) != res2)\n+    abort ();\n+}"}, {"sha": "7a31fd8b47d98f547ca99bc45f521189f2621ab5", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfpclasssh-1a.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfpclasssh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfpclasssh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfpclasssh-1a.c?ref=ebcdd004edfcd79788e044ac2a4e4d7bb3e01888", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfpclasssh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfpclasssh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[0-7\\]\\{%k\\[0-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h x128;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  m8 = _mm_fpclass_sh_mask (x128, 13);\n+  m8 = _mm_mask_fpclass_sh_mask (m8, x128, 13);\n+}"}, {"sha": "bdc6f9f059a7bfc78b00878b84c7bd0ad935c472", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfpclasssh-1b.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfpclasssh-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfpclasssh-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfpclasssh-1b.c?ref=ebcdd004edfcd79788e044ac2a4e4d7bb3e01888", "patch": "@@ -0,0 +1,76 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+/* { dg-require-effective-target avx512fp16 } */\n+\n+#define AVX512FP16\n+#include \"avx512f-helper.h\"\n+\n+#include <math.h>\n+#include <limits.h>\n+#include <float.h>\n+#include \"avx512f-mask-type.h\"\n+#define SIZE (128 / 16)\n+\n+#ifndef __FPCLASSSH__\n+#define __FPCLASSSH__\n+int check_fp_class_hp (_Float16 src, int imm)\n+{\n+  int qNaN_res = isnan (src);\n+  int sNaN_res = isnan (src);\n+  int Pzero_res = (src == 0.0);\n+  int Nzero_res = (src == -0.0);\n+  int PInf_res = (isinf (src) == 1);\n+  int NInf_res = (isinf (src) == -1);\n+  int Denorm_res = (fpclassify (src) == FP_SUBNORMAL);\n+  int FinNeg_res = __builtin_finite (src) && (src < 0);\n+\n+  int result = (((imm & 1) && qNaN_res)\n+\t\t|| (((imm >> 1) & 1) && Pzero_res)\n+\t\t|| (((imm >> 2) & 1) && Nzero_res)\n+\t\t|| (((imm >> 3) & 1) && PInf_res)\n+\t\t|| (((imm >> 4) & 1) && NInf_res)\n+\t\t|| (((imm >> 5) & 1) && Denorm_res)\n+\t\t|| (((imm >> 6) & 1) && FinNeg_res)\n+\t\t|| (((imm >> 7) & 1) && sNaN_res));\n+  return result;\n+}\n+#endif\n+\n+__mmask8\n+CALC (_Float16 *s1, int imm)\n+{\n+  int i;\n+  __mmask8 res = 0;\n+\n+  if (check_fp_class_hp(s1[0], imm))\n+    res = res | 1;\n+\n+  return res;\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  union128h src;\n+  __mmask8 res1, res2, res_ref = 0;\n+  __mmask8 mask = MASK_VALUE;\n+\n+  src.a[0] = 1.0 / 0.0;\n+  for (i = 1; i < SIZE; i++)\n+    {\n+      src.a[i] = -24.43 + 0.6 * i;\n+    }\n+\n+  res1 = _mm_fpclass_sh_mask (src.x, 0xFF);\n+  res2 = _mm_mask_fpclass_sh_mask (mask, src.x, 0xFF);\n+\n+\n+  res_ref = CALC (src.a, 0xFF);\n+\n+  if (res_ref != res1)\n+    abort ();\n+\n+  if ((mask & res_ref) != res2)\n+    abort ();\n+}"}, {"sha": "993cbd944d1bfec3bd446866cbfabe44ba74e907", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vgetexpph-1a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vgetexpph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vgetexpph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vgetexpph-1a.c?ref=ebcdd004edfcd79788e044ac2a4e4d7bb3e01888", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vgetexpph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1} } */\n+/* { dg-final { scan-assembler-times \"vgetexpph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1} } */\n+/* { dg-final { scan-assembler-times \"vgetexpph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1} } */\n+/* { dg-final { scan-assembler-times \"vgetexpph\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1} } */\n+/* { dg-final { scan-assembler-times \"vgetexpph\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1} } */\n+/* { dg-final { scan-assembler-times \"vgetexpph\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1} } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512h x;\n+volatile __mmask32 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_getexp_ph (x);\n+  x = _mm512_mask_getexp_ph (x, m, x);\n+  x = _mm512_maskz_getexp_ph (m, x);\n+  x = _mm512_getexp_round_ph (x, _MM_FROUND_NO_EXC);\n+  x = _mm512_mask_getexp_round_ph (x, m, x, _MM_FROUND_NO_EXC);\n+  x = _mm512_maskz_getexp_round_ph (m, x, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "3483c9537dd34b7243ce4eb2f6097331e26b72ff", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vgetexpph-1b.c", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vgetexpph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vgetexpph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vgetexpph-1b.c?ref=ebcdd004edfcd79788e044ac2a4e4d7bb3e01888", "patch": "@@ -0,0 +1,99 @@\n+ /* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 16)\n+\n+void NOINLINE\n+EMULATE(getexp_ph) (V512 * dest, V512 op1,\n+                  __mmask32 k, int zero_mask)\n+{\n+    V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+    int i;\n+    float emu[32];\n+    __mmask16 m1, m2;\n+    m1 = k & 0xffff;\n+    m2 = (k >> 16) & 0xffff;\n+    unpack_ph_2twops(op1, &v1, &v2);\n+    unpack_ph_2twops(*dest, &v7, &v8);\n+    v3.zmm = _mm512_getexp_round_ps(v1.zmm, _ROUND_CUR);\n+    v4.zmm = _mm512_getexp_round_ps(v2.zmm, _ROUND_CUR);\n+    for (i=0; i<16; i++)\n+      {\n+      emu[i] = v3.f32[i];\n+      emu[i+16] = v4.f32[i];\n+      }\n+    for (i = 0; i < 16; i++) {\n+        if (((1 << i) & m1) == 0) {\n+            if (zero_mask) {\n+               v5.f32[i] = 0;\n+            }\n+            else {\n+               v5.u32[i] = v7.u32[i];\n+            }\n+        }\n+        else {\n+            v5.f32[i] = emu[i];\n+\n+        }\n+\n+        if (((1 << i) & m2) == 0) {\n+            if (zero_mask) {\n+               v6.f32[i] = 0;\n+            }\n+            else {\n+               v6.u32[i] = v8.u32[i];\n+            }\n+        }\n+        else {\n+            v6.f32[i] = emu[i+16];\n+        }\n+\n+    }\n+    *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  EMULATE(getexp_ph) (&exp, src1,  NET_MASK, 0);\n+  HF(res) = INTRINSIC (_getexp_ph) (HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _getexp_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(getexp_ph) (&exp, src1, MASK_VALUE, 0);\n+  HF(res) = INTRINSIC (_mask_getexp_ph) (HF(res), MASK_VALUE, HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_getexp_ph);\n+\n+  EMULATE(getexp_ph) (&exp, src1,  ZMASK_VALUE, 1);\n+  HF(res) = INTRINSIC (_maskz_getexp_ph) (ZMASK_VALUE, HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_getexp_ph);\n+#if AVX512F_LEN == 512\n+  EMULATE(getexp_ph) (&exp, src1,  NET_MASK, 0);\n+  HF(res) = INTRINSIC (_getexp_round_ph) (HF(src1), _ROUND_CUR);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _getexp_round_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(getexp_ph) (&exp, src1, MASK_VALUE, 0);\n+  HF(res) = INTRINSIC (_mask_getexp_round_ph) (HF(res), MASK_VALUE, HF(src1),\n+\t\t\t\t\t _ROUND_CUR);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_getexp_round_ph);\n+\n+  EMULATE(getexp_ph) (&exp, src1,  ZMASK_VALUE, 1);\n+  HF(res) = INTRINSIC (_maskz_getexp_round_ph) (ZMASK_VALUE, HF(src1), _ROUND_CUR);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_getexp_round_ph);\n+#endif\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "397fd3e14a508922cefefb0c4c4f0ea997e7798d", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vgetexpsh-1a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vgetexpsh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vgetexpsh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vgetexpsh-1a.c?ref=ebcdd004edfcd79788e044ac2a4e4d7bb3e01888", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vgetexpsh\\[ \\\\t\\]+\\[^\\{\\n\\]\\[^\\n\\]*%xmm\\[0-9\\]+\\, %xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetexpsh\\[ \\\\t\\]+\\[^\\{\\n\\]\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetexpsh\\[ \\\\t\\]+\\[^\\{\\n\\]\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetexpsh\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+\\, %xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetexpsh\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetexpsh\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h x;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm_getexp_sh (x, x);\n+  x = _mm_mask_getexp_sh (x, m, x, x);\n+  x = _mm_maskz_getexp_sh (m, x, x);\n+  x = _mm_getexp_round_sh (x, x, _MM_FROUND_NO_EXC);\n+  x = _mm_mask_getexp_round_sh (x, m, x, x, _MM_FROUND_NO_EXC);\n+  x = _mm_maskz_getexp_round_sh (m, x, x, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "ca9834df6e424a86a3c51d8de6fc10d305155b02", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vgetexpsh-1b.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vgetexpsh-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vgetexpsh-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vgetexpsh-1b.c?ref=ebcdd004edfcd79788e044ac2a4e4d7bb3e01888", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 8\n+\n+void NOINLINE\n+emulate_getexp_sh(V512 * dest, V512 op1,\n+                  __mmask32 k, int zero_mask)\n+{\n+    V512 v0, v1, v2, v5, v6, v7, v8;\n+    int i;\n+\n+    unpack_ph_2twops(op1, &v1, &v2);\n+    unpack_ph_2twops(*dest, &v7, &v8);\n+\n+    v0.xmm[0] = _mm_getexp_round_ss (v1.xmm[0], v1.xmm[0], _ROUND_CUR);\n+\n+    if ((k&1) || !k)\n+      v5.f32[0] = v0.f32[0];\n+    else if (zero_mask)\n+      v5.f32[0] = 0;\n+    else\n+      v5.f32[0] = v7.f32[0];\n+\n+    for (i = 1; i < 8; i++)\n+      v5.f32[i] = v1.f32[i];\n+    *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  emulate_getexp_sh(&exp, src1,  0x1, 0);\n+  res.xmmh[0] = _mm_getexp_round_sh(exp.xmmh[0], src1.xmmh[0], _ROUND_CUR);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_getexp_round_sh\");\n+\n+  init_dest(&res, &exp);\n+  emulate_getexp_sh(&exp, src1,  0x1, 0);\n+  res.xmmh[0] = _mm_mask_getexp_round_sh(res.xmmh[0], 0x1, exp.xmmh[0],\n+\t\t\t\t\t src1.xmmh[0], _ROUND_CUR);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask_getexp_round_sh\");\n+\n+  emulate_getexp_sh(&exp, src1,  0x3, 1);\n+  res.xmmh[0] = _mm_maskz_getexp_round_sh(0x3, exp.xmmh[0], src1.xmmh[0],\n+\t\t\t\t\t  _ROUND_CUR);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_maskz_getexp_round_sh\");\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "69e0c72721be9efff7164a191e0cdaf6c919418a", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vgetmantph-1a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vgetmantph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vgetmantph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vgetmantph-1a.c?ref=ebcdd004edfcd79788e044ac2a4e4d7bb3e01888", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+/* { dg-final { scan-assembler-times \"vgetmantph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantph\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantph\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantph\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512h x, y;\n+volatile __mmask32 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_getmant_ph (y, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src);\n+  x = _mm512_mask_getmant_ph (x, m, y, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src);\n+  x = _mm512_maskz_getmant_ph (m, y, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src);\n+  x = _mm512_getmant_round_ph (y, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src, _MM_FROUND_NO_EXC);\n+  x = _mm512_mask_getmant_round_ph (x, m, y, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src, _MM_FROUND_NO_EXC);\n+  x = _mm512_maskz_getmant_round_ph (m, y, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "c18d1aa5dc10916c690511d97a3445a58d335a9a", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vgetmantph-1b.c", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vgetmantph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vgetmantph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vgetmantph-1b.c?ref=ebcdd004edfcd79788e044ac2a4e4d7bb3e01888", "patch": "@@ -0,0 +1,102 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 16)\n+\n+void NOINLINE\n+EMULATE(getmant_ph) (V512 * dest, V512 op1,\n+                  __mmask32 k, int zero_mask)\n+{\n+    V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+    int i;\n+    float emu[32];\n+    __mmask16 m1, m2;\n+    m1 = k & 0xffff;\n+    m2 = (k >> 16) & 0xffff;\n+    unpack_ph_2twops(op1, &v1, &v2);\n+    unpack_ph_2twops(*dest, &v7, &v8);\n+    v3.zmm = _mm512_getmant_round_ps(v1.zmm, 2, 0, _ROUND_CUR);\n+    v4.zmm = _mm512_getmant_round_ps(v2.zmm, 2, 0, _ROUND_CUR);\n+    for (i=0; i<16; i++)\n+      {\n+      emu[i] = v3.f32[i];\n+      emu[i+16] = v4.f32[i];\n+      }\n+    for (i = 0; i < 16; i++) {\n+        if (((1 << i) & m1) == 0) {\n+            if (zero_mask) {\n+               v5.f32[i] = 0;\n+            }\n+            else {\n+               v5.u32[i] = v7.u32[i];\n+            }\n+        }\n+        else {\n+            v5.f32[i] = emu[i];\n+\n+        }\n+\n+        if (((1 << i) & m2) == 0) {\n+            if (zero_mask) {\n+               v6.f32[i] = 0;\n+            }\n+            else {\n+               v6.u32[i] = v8.u32[i];\n+            }\n+        }\n+        else {\n+            v6.f32[i] = emu[i+16];\n+        }\n+\n+    }\n+    *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  EMULATE(getmant_ph) (&exp, src1,  NET_MASK, 0);\n+  HF(res) = INTRINSIC (_getmant_ph) (HF(src1), 2, 0);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _getmant_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(getmant_ph) (&exp, src1,  MASK_VALUE, 0);\n+  HF(res) = INTRINSIC (_mask_getmant_ph) (HF(res), MASK_VALUE,\n+\t\t\t\t\t  HF(src1), 2, 0);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_getmant_ph);\n+\n+  EMULATE(getmant_ph) (&exp, src1,  ZMASK_VALUE, 1);\n+  HF(res) = INTRINSIC (_maskz_getmant_ph) (ZMASK_VALUE, HF(src1),\n+\t\t\t\t\t   2, 0);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_getmant_ph);\n+#if AVX512F_LEN == 512\n+  EMULATE(getmant_ph) (&exp, src1,  NET_MASK, 0);\n+  HF(res) = INTRINSIC (_getmant_round_ph) (HF(src1), 2, 0, _ROUND_CUR);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _getmant_round_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(getmant_ph) (&exp, src1,  MASK_VALUE, 0);\n+  HF(res) = INTRINSIC (_mask_getmant_round_ph) (HF(res), MASK_VALUE,\n+\t\t\t\t\t  HF(src1), 2, 0, _ROUND_CUR);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_getmant_round_ph);\n+\n+  EMULATE(getmant_ph) (&exp, src1,  ZMASK_VALUE, 1);\n+  HF(res) = INTRINSIC (_maskz_getmant_round_ph) (ZMASK_VALUE, HF(src1),\n+\t\t\t\t\t   2, 0, _ROUND_CUR);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_getmant_round_ph);\n+#endif\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "b533f20341b9ebd1988d0023f3026086b435ff0b", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vgetmantsh-1a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vgetmantsh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vgetmantsh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vgetmantsh-1a.c?ref=ebcdd004edfcd79788e044ac2a4e4d7bb3e01888", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+/* { dg-final { scan-assembler-times \"vgetmantsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantsh\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantsh\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantsh\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h x, y, z;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm_getmant_sh (y, z, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src);\n+  x = _mm_mask_getmant_sh (x, m, y, z, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src);\n+  x = _mm_maskz_getmant_sh (m, y, z, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src);\n+  x = _mm_getmant_round_sh (y, z, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src, _MM_FROUND_NO_EXC);\n+  x = _mm_mask_getmant_round_sh (x, m, y, z, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src, _MM_FROUND_NO_EXC);\n+  x = _mm_maskz_getmant_round_sh (m, y, z, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "bee8b04dfc52ffc6703f0a1f48919d100bf9fc9b", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vgetmantsh-1b.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vgetmantsh-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vgetmantsh-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vgetmantsh-1b.c?ref=ebcdd004edfcd79788e044ac2a4e4d7bb3e01888", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 8\n+\n+void NOINLINE\n+emulate_getmant_sh(V512 * dest, V512 op1,\n+                  __mmask32 k, int zero_mask)\n+{\n+    V512 v0, v1, v2, v5, v6, v7, v8;\n+    int i;\n+\n+    unpack_ph_2twops(op1, &v1, &v2);\n+    unpack_ph_2twops(*dest, &v7, &v8);\n+\n+    v0.xmm[0] = _mm_getmant_round_ss (v1.xmm[0], v1.xmm[0], 2, 0, _ROUND_CUR);\n+\n+    if ((k&1) || !k)\n+      v5.f32[0] = v0.f32[0];\n+    else if (zero_mask)\n+      v5.f32[0] = 0;\n+    else\n+      v5.f32[0] = v7.f32[0];\n+\n+    for (i = 1; i < 8; i++)\n+      v5.f32[i] = v1.f32[i];\n+    *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  emulate_getmant_sh(&exp, src1,  0x1, 0);\n+  res.xmmh[0] = _mm_getmant_round_sh(src1.xmmh[0], exp.xmmh[0],\n+\t\t\t\t     2, 0, _ROUND_CUR);\n+  check_results(&res, &exp, 1, \"_mm_getmant_round_sh\");\n+\n+  init_dest(&res, &exp);\n+  emulate_getmant_sh(&exp, src1,  0x1, 0);\n+  res.xmmh[0] = _mm_mask_getmant_round_sh(res.xmmh[0], 0x1, src1.xmmh[0],\n+\t\t\t\t\t  exp.xmmh[0], 2, 0, _ROUND_CUR);\n+  check_results(&res, &exp, 1, \"_mm_mask_getmant_round_sh\");\n+\n+  emulate_getmant_sh(&exp, src1,  0x3, 1);\n+  res.xmmh[0] = _mm_maskz_getmant_round_sh(0x3, src1.xmmh[0], exp.xmmh[0],\n+\t\t\t\t\t   2, 0, _ROUND_CUR);\n+  check_results(&res, &exp, 1, \"_mm_maskz_getmant_round_sh\");\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "897a3c83692923e2dedb1e00ee635fb569f4fcc2", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vfpclassph-1a.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfpclassph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfpclassph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfpclassph-1a.c?ref=ebcdd004edfcd79788e044ac2a4e4d7bb3e01888", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfpclassphy\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n^k\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfpclassphx\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfpclassphy\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n^k\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfpclassphx\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256h x256;\n+volatile __m128h x128;\n+volatile __mmask16 m16;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  m16 = _mm256_fpclass_ph_mask (x256, 13);\n+  m8 = _mm_fpclass_ph_mask (x128, 13);\n+  m16 = _mm256_mask_fpclass_ph_mask (2, x256, 13);\n+  m8 = _mm_mask_fpclass_ph_mask (2, x128, 13);\n+}"}, {"sha": "6745f137c277d091ab477823dd917e1ffd4b6fc7", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vfpclassph-1b.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfpclassph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfpclassph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfpclassph-1b.c?ref=ebcdd004edfcd79788e044ac2a4e4d7bb3e01888", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define DEBUG\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vfpclassph-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vfpclassph-1b.c\"\n+"}, {"sha": "82c23b6e63d4265ce451cca4288c67d937ef77f2", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vgetexpph-1a.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vgetexpph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vgetexpph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vgetexpph-1a.c?ref=ebcdd004edfcd79788e044ac2a4e4d7bb3e01888", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vgetexpph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1} } */\n+/* { dg-final { scan-assembler-times \"vgetexpph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1} } */\n+/* { dg-final { scan-assembler-times \"vgetexpph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1} } */\n+/* { dg-final { scan-assembler-times \"vgetexpph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1} } */\n+/* { dg-final { scan-assembler-times \"vgetexpph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1} } */\n+/* { dg-final { scan-assembler-times \"vgetexpph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1} } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256h xx;\n+volatile __m128h x2;\n+volatile __mmask8 m8;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  xx = _mm256_getexp_ph (xx);\n+  xx = _mm256_mask_getexp_ph (xx, m16, xx);\n+  xx = _mm256_maskz_getexp_ph (m16, xx);\n+  x2 = _mm_getexp_ph (x2);\n+  x2 = _mm_mask_getexp_ph (x2, m8, x2);\n+  x2 = _mm_maskz_getexp_ph (m8, x2);\n+}"}, {"sha": "7eb4fa4f537dd458ed1d187751a05d27d89cf5b8", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vgetexpph-1b.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vgetexpph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vgetexpph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vgetexpph-1b.c?ref=ebcdd004edfcd79788e044ac2a4e4d7bb3e01888", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define DEBUG\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vgetexpph-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vgetexpph-1b.c\"\n+"}, {"sha": "4ce6ed58cf1db0e008d2b30e9aba2ece9b23e2e5", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vgetmantph-1a.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vgetmantph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vgetmantph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vgetmantph-1a.c?ref=ebcdd004edfcd79788e044ac2a4e4d7bb3e01888", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512fp16 \" } */\n+/* { dg-final { scan-assembler-times \"vgetmantph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256h x, y;\n+volatile __m128h a, b;\n+volatile __mmask8 m8;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  x = _mm256_getmant_ph (y, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src);\n+  x = _mm256_mask_getmant_ph (x, m16, y, _MM_MANT_NORM_p75_1p5,\n+\t\t\t      _MM_MANT_SIGN_src);\n+  x = _mm256_maskz_getmant_ph (m16, y, _MM_MANT_NORM_p75_1p5,\n+\t\t\t       _MM_MANT_SIGN_src);\n+  a = _mm_getmant_ph (b, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src);\n+  a = _mm_mask_getmant_ph (a, m8, b, _MM_MANT_NORM_p75_1p5,\n+\t\t\t   _MM_MANT_SIGN_src);\n+  a = _mm_maskz_getmant_ph (m8, b, _MM_MANT_NORM_p75_1p5,\n+\t\t\t    _MM_MANT_SIGN_src);\n+}"}, {"sha": "e5f874015583bc362d76cb61000251cdbf28103b", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vgetmantph-1b.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vgetmantph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vgetmantph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vgetmantph-1b.c?ref=ebcdd004edfcd79788e044ac2a4e4d7bb3e01888", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define DEBUG\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vgetmantph-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vgetmantph-1b.c\"\n+"}]}