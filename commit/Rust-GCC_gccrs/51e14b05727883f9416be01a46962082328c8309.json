{"sha": "51e14b05727883f9416be01a46962082328c8309", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFlMTRiMDU3Mjc4ODNmOTQxNmJlMDFhNDY5NjIwODIzMjhjODMwOQ==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2014-10-14T08:10:42Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-10-14T08:10:42Z"}, "message": "AVX-512. 57/n. Extend blend/cmp/brodcast insn patterns.\n\ngcc/\n\t* config/i386/sse.md\n\t(define_insn \"avx512f_blendm<mode>\"): Delete.\n\t(define_insn \"<avx512>_blendm<VI48_AVX512VL:mode>\"): New.\n\t(define_insn \"<avx512>_blendm<VI12_AVX512VL:mode>\"): Ditto..\n\t(define_mode_attr cmp_imm_predicate): Add V8SF, V4DF, V8SI, V4DI, V4SF,\n\tV2DF, V4SI, V2DI, V32HI, V64QI, V16HI, V32QI, V8HI, V16QI modes.\n\t(define_insn\n\t\"avx512f_cmp<mode>3<mask_scalar_merge_name><round_saeonly_name>\"):\n\tRemove.\n\t(define_insn\n\t\"<avx512>_cmp<VI48_AVX512VL:mode>3<mask_scalar_merge_name><round_saeonly_name>\"):\n\tNew.\n\t(define_insn\n\t\"<avx512>_cmp<VI12_AVX512VL:mode>3<mask_scalar_merge_name><round_saeonly_name>\"):\n\tDitto.\n\t(define_insn \"<mask_codefor>avx512f_vec_dup<mode><mask_name>\"): Delete.\n\t(define_insn \"<avx512>_vec_dup<V48_AVX512VL:mode><mask_name>\"): New.\n\t(define_insn \"<avx512>_vec_dup<V12_AVX512VL:mode><mask_name>\"): Ditto.\n\t(define_insn \"<mask_codefor>avx512f_vec_dup_gpr<mode><mask_name>\"):\n\tDelete.\n\t(define_insn\n\t\"<mask_codefor><avx512>_vec_dup_gpr<VI48_AVX512VL:mode><mask_name>\"):\n\tNew.\n\t(define_insn\n\t\"<mask_codefor><avx512>_vec_dup_gpr<VI12_AVX512VL:mode><mask_name>\"):\n\tDitto.\n\t(define_insn\u00b7\"<mask_codefor>avx512f_vec_dup_mem<mode><mask_name>\"):\n\tDelete.\n\t(define_insn\n\t\"<mask_codefor><avx512>_vec_dup_mem<VI48_AVX512VL:mode><mask_name>\"):\n\tNew.\n\t(define_insn\n\t\"<mask_codefor><avx512>_vec_dup_mem<VI12_AVX512VL:mode><mask_name>\"):\n\tDitto.\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\nFrom-SVN: r216175", "tree": {"sha": "b6b023f5e8acbbc4a1bf849da9c29fc4f95d59f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6b023f5e8acbbc4a1bf849da9c29fc4f95d59f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51e14b05727883f9416be01a46962082328c8309", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51e14b05727883f9416be01a46962082328c8309", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51e14b05727883f9416be01a46962082328c8309", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51e14b05727883f9416be01a46962082328c8309/comments", "author": null, "committer": null, "parents": [{"sha": "b6fed550a33a4ea5005b52c0361f6386d9d70a65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6fed550a33a4ea5005b52c0361f6386d9d70a65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6fed550a33a4ea5005b52c0361f6386d9d70a65"}], "stats": {"total": 159, "additions": 135, "deletions": 24}, "files": [{"sha": "0a4673c98a8e0d35c860339c4957baa6c618350c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e14b05727883f9416be01a46962082328c8309/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e14b05727883f9416be01a46962082328c8309/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=51e14b05727883f9416be01a46962082328c8309", "patch": "@@ -1,3 +1,47 @@\n+2014-10-14  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/sse.md\n+\t(define_insn \"avx512f_blendm<mode>\"): Delete.\n+\t(define_insn \"<avx512>_blendm<VI48_AVX512VL:mode>\"): New.\n+\t(define_insn \"<avx512>_blendm<VI12_AVX512VL:mode>\"): Ditto..\n+\t(define_mode_attr cmp_imm_predicate): Add V8SF, V4DF, V8SI, V4DI, V4SF,\n+\tV2DF, V4SI, V2DI, V32HI, V64QI, V16HI, V32QI, V8HI, V16QI modes.\n+\t(define_insn\n+\t\"avx512f_cmp<mode>3<mask_scalar_merge_name><round_saeonly_name>\"):\n+\tRemove.\n+\t(define_insn\n+\t\"<avx512>_cmp<VI48_AVX512VL:mode>3<mask_scalar_merge_name><round_saeonly_name>\"):\n+\tNew.\n+\t(define_insn\n+\t\"<avx512>_cmp<VI12_AVX512VL:mode>3<mask_scalar_merge_name><round_saeonly_name>\"):\n+\tDitto.\n+\t(define_insn \"<mask_codefor>avx512f_vec_dup<mode><mask_name>\"): Delete.\n+\t(define_insn \"<avx512>_vec_dup<V48_AVX512VL:mode><mask_name>\"): New.\n+\t(define_insn \"<avx512>_vec_dup<V12_AVX512VL:mode><mask_name>\"): Ditto.\n+\t(define_insn \"<mask_codefor>avx512f_vec_dup_gpr<mode><mask_name>\"):\n+\tDelete.\n+\t(define_insn\n+\t\"<mask_codefor><avx512>_vec_dup_gpr<VI48_AVX512VL:mode><mask_name>\"):\n+\tNew.\n+\t(define_insn\n+\t\"<mask_codefor><avx512>_vec_dup_gpr<VI12_AVX512VL:mode><mask_name>\"):\n+\tDitto.\n+\t(define_insn\u00b7\"<mask_codefor>avx512f_vec_dup_mem<mode><mask_name>\"):\n+\tDelete.\n+\t(define_insn\n+\t\"<mask_codefor><avx512>_vec_dup_mem<VI48_AVX512VL:mode><mask_name>\"):\n+\tNew.\n+\t(define_insn\n+\t\"<mask_codefor><avx512>_vec_dup_mem<VI12_AVX512VL:mode><mask_name>\"):\n+\tDitto.\n+\n 2014-10-14  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/63512"}, {"sha": "d544ed0676e990954e0000984b43e4b02987ca0a", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 91, "deletions": 24, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e14b05727883f9416be01a46962082328c8309/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e14b05727883f9416be01a46962082328c8309/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=51e14b05727883f9416be01a46962082328c8309", "patch": "@@ -959,14 +959,26 @@\n    (set_attr \"memory\" \"none,load\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"avx512f_blendm<mode>\"\n-  [(set (match_operand:VI48F_512 0 \"register_operand\" \"=v\")\n-\t(vec_merge:VI48F_512\n-\t  (match_operand:VI48F_512 2 \"nonimmediate_operand\" \"vm\")\n-\t  (match_operand:VI48F_512 1 \"register_operand\" \"v\")\n+(define_insn \"<avx512>_blendm<mode>\"\n+  [(set (match_operand:V48_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:V48_AVX512VL\n+\t  (match_operand:V48_AVX512VL 2 \"nonimmediate_operand\" \"vm\")\n+\t  (match_operand:V48_AVX512VL 1 \"register_operand\" \"v\")\n \t  (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512F\"\n-  \"v<sseintprefix>blendm<ssemodesuffix>\\t{%2, %1, %0%{%3%}|%0%{%3%}, %1, %2}\"\n+  \"vblendm<ssemodesuffix>\\t{%2, %1, %0%{%3%}|%0%{%3%}, %1, %2}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"<avx512>_blendm<mode>\"\n+  [(set (match_operand:VI12_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VI12_AVX512VL\n+\t  (match_operand:VI12_AVX512VL 2 \"nonimmediate_operand\" \"vm\")\n+\t  (match_operand:VI12_AVX512VL 1 \"register_operand\" \"v\")\n+\t  (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk\")))]\n+  \"TARGET_AVX512BW\"\n+  \"vpblendm<ssemodesuffix>\\t{%2, %1, %0%{%3%}|%0%{%3%}, %1, %2}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n@@ -2472,14 +2484,21 @@\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n (define_mode_attr cmp_imm_predicate\n-  [(V16SF \"const_0_to_31_operand\") (V8DF \"const_0_to_31_operand\")\n-  (V16SI \"const_0_to_7_operand\") (V8DI \"const_0_to_7_operand\")])\n-\n-(define_insn \"avx512f_cmp<mode>3<mask_scalar_merge_name><round_saeonly_name>\"\n+  [(V16SF \"const_0_to_31_operand\")  (V8DF \"const_0_to_31_operand\")\n+   (V16SI \"const_0_to_7_operand\")   (V8DI \"const_0_to_7_operand\")\n+   (V8SF \"const_0_to_31_operand\")   (V4DF \"const_0_to_31_operand\")\n+   (V8SI \"const_0_to_7_operand\")    (V4DI \"const_0_to_7_operand\")\n+   (V4SF \"const_0_to_31_operand\")   (V2DF \"const_0_to_31_operand\")\n+   (V4SI \"const_0_to_7_operand\")    (V2DI \"const_0_to_7_operand\")\n+   (V32HI \"const_0_to_7_operand\")   (V64QI \"const_0_to_7_operand\")\n+   (V16HI \"const_0_to_7_operand\")   (V32QI \"const_0_to_7_operand\")\n+   (V8HI \"const_0_to_7_operand\")    (V16QI \"const_0_to_7_operand\")])\n+\n+(define_insn \"<avx512>_cmp<mode>3<mask_scalar_merge_name><round_saeonly_name>\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=Yk\")\n \t(unspec:<avx512fmaskmode>\n-\t  [(match_operand:VI48F_512 1 \"register_operand\" \"v\")\n-\t   (match_operand:VI48F_512 2 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n+\t  [(match_operand:V48_AVX512VL 1 \"register_operand\" \"v\")\n+\t   (match_operand:V48_AVX512VL 2 \"nonimmediate_operand\" \"<round_saeonly_constraint>\")\n \t   (match_operand:SI 3 \"<cmp_imm_predicate>\" \"n\")]\n \t  UNSPEC_PCMP))]\n   \"TARGET_AVX512F && <round_saeonly_mode512bit_condition>\"\n@@ -2489,6 +2508,20 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"<avx512>_cmp<mode>3<mask_scalar_merge_name>\"\n+  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=Yk\")\n+\t(unspec:<avx512fmaskmode>\n+\t  [(match_operand:VI12_AVX512VL 1 \"register_operand\" \"v\")\n+\t   (match_operand:VI12_AVX512VL 2 \"nonimmediate_operand\" \"vm\")\n+\t   (match_operand:SI 3 \"<cmp_imm_predicate>\" \"n\")]\n+\t  UNSPEC_PCMP))]\n+  \"TARGET_AVX512BW\"\n+  \"vpcmp<ssemodesuffix>\\t{%3, %2, %1, %0<mask_scalar_merge_operand4>|%0<mask_scalar_merge_operand4>, %1, %2, %3}\"\n+  [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_insn \"avx512f_ucmp<mode>3<mask_scalar_merge_name>\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=Yk\")\n \t(unspec:<avx512fmaskmode>\n@@ -16016,13 +16049,13 @@\n    #\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"isa\" \"*,avx2,noavx2\")\n    (set_attr \"mode\" \"V8SF\")])\n \n-(define_insn \"<mask_codefor>avx512f_vec_dup<mode><mask_name>\"\n-  [(set (match_operand:VI48F_512 0 \"register_operand\" \"=v\")\n-\t(vec_duplicate:VI48F_512\n+(define_insn \"<avx512>_vec_dup<mode><mask_name>\"\n+  [(set (match_operand:V48_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_duplicate:V48_AVX512VL\n \t  (vec_select:<ssescalarmode>\n \t    (match_operand:<ssexmmmode> 1 \"nonimmediate_operand\" \"vm\")\n \t    (parallel [(const_int 0)]))))]\n@@ -16032,6 +16065,18 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"<avx512>_vec_dup<mode><mask_name>\"\n+  [(set (match_operand:VI12_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_duplicate:VI12_AVX512VL\n+\t  (vec_select:<ssescalarmode>\n+\t    (match_operand:<ssexmmmode> 1 \"nonimmediate_operand\" \"vm\")\n+\t    (parallel [(const_int 0)]))))]\n+  \"TARGET_AVX512BW\"\n+  \"vpbroadcast<bcstscalarsuff>\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_insn \"<mask_codefor>avx512f_broadcast<mode><mask_name>\"\n   [(set (match_operand:V16FI 0 \"register_operand\" \"=v,v\")\n \t(vec_duplicate:V16FI\n@@ -16056,26 +16101,48 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"<mask_codefor>avx512f_vec_dup_gpr<mode><mask_name>\"\n-  [(set (match_operand:VI48_512 0 \"register_operand\" \"=v\")\n-\t(vec_duplicate:VI48_512\n+(define_insn \"<mask_codefor><avx512>_vec_dup_gpr<mode><mask_name>\"\n+  [(set (match_operand:VI12_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_duplicate:VI12_AVX512VL\n \t  (match_operand:<ssescalarmode> 1 \"register_operand\" \"r\")))]\n-  \"TARGET_AVX512F && (<MODE>mode != V8DImode || TARGET_64BIT)\"\n-  \"vpbroadcast<bcstscalarsuff>\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  \"TARGET_AVX512BW\"\n+  \"vpbroadcast<bcstscalarsuff>\\t{%k1, %0<mask_operand2>|%0<mask_operand2>, %k1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"<mask_codefor><avx512>_vec_dup_gpr<mode><mask_name>\"\n+  [(set (match_operand:VI48_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_duplicate:VI48_AVX512VL\n+\t  (match_operand:<ssescalarmode> 1 \"register_operand\" \"r\")))]\n+  \"TARGET_AVX512F && (<ssescalarmode>mode != DImode || TARGET_64BIT)\"\n+{\n+  return \"vpbroadcast<bcstscalarsuff>\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\";\n+}\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"<mask_codefor>avx512f_vec_dup_mem<mode><mask_name>\"\n-  [(set (match_operand:VI48F_512 0 \"register_operand\" \"=v\")\n-\t(vec_duplicate:VI48F_512\n+(define_insn \"<mask_codefor><avx512>_vec_dup_mem<mode><mask_name>\"\n+  [(set (match_operand:V48_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_duplicate:V48_AVX512VL\n \t  (match_operand:<ssescalarmode> 1 \"nonimmediate_operand\" \"vm\")))]\n   \"TARGET_AVX512F\"\n   \"v<sseintprefix>broadcast<bcstscalarsuff>\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"<mask_codefor><avx512>_vec_dup_mem<mode><mask_name>\"\n+  [(set (match_operand:VI12_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_duplicate:VI12_AVX512VL\n+\t  (match_operand:<ssescalarmode> 1 \"nonimmediate_operand\" \"vm\")))]\n+  \"TARGET_AVX512BW\"\n+  \"vpbroadcast<bcstscalarsuff>\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_insn \"avx2_vbroadcasti128_<mode>\"\n   [(set (match_operand:VI_256 0 \"register_operand\" \"=x\")\n \t(vec_concat:VI_256"}]}