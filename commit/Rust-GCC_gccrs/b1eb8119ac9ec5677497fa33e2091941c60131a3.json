{"sha": "b1eb8119ac9ec5677497fa33e2091941c60131a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFlYjgxMTlhYzllYzU2Nzc0OTdmYTMzZTIwOTE5NDFjNjAxMzFhMw==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2005-09-22T00:10:28Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2005-09-22T00:10:28Z"}, "message": "mn10300.c (TARGET_DEFAULT_TARGET_FLAGS): Add MASK_PTR_A0D0.\n\n* config/mn10300/mn10300.c (TARGET_DEFAULT_TARGET_FLAGS): Add\nMASK_PTR_A0D0.\n(mn10300_return_in_memory): Support variable size types also.\n(mn10300_pass_by_reference): Likewise.\n(mn10300_function_value): New.\n* config/mn10300/mn10300.h (FUNCTION_VALUE): Call the above.\n(FUNCTION_OUTGOING_VALUE): Likewise.\n* config/mn10300/mn10300.opt: Add -mreturn-pointer-on-d0.\n* doc/invoke.texi: Document it.\n\nFrom-SVN: r104508", "tree": {"sha": "a8a16767f44aa12521ffd683d0425ab3e977731d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8a16767f44aa12521ffd683d0425ab3e977731d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1eb8119ac9ec5677497fa33e2091941c60131a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1eb8119ac9ec5677497fa33e2091941c60131a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1eb8119ac9ec5677497fa33e2091941c60131a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1eb8119ac9ec5677497fa33e2091941c60131a3/comments", "author": null, "committer": null, "parents": [{"sha": "d06e6434d49d3087bbe3ea11824853b1235ccda7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d06e6434d49d3087bbe3ea11824853b1235ccda7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d06e6434d49d3087bbe3ea11824853b1235ccda7"}], "stats": {"total": 70, "additions": 65, "deletions": 5}, "files": [{"sha": "5b1dccfab2644f794d96929888ab0b0a7eb479e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1eb8119ac9ec5677497fa33e2091941c60131a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1eb8119ac9ec5677497fa33e2091941c60131a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1eb8119ac9ec5677497fa33e2091941c60131a3", "patch": "@@ -1,3 +1,15 @@\n+2005-09-21  DJ Delorie  <dj@redhat.com>\n+\n+\t* config/mn10300/mn10300.c (TARGET_DEFAULT_TARGET_FLAGS): Add\n+\tMASK_PTR_A0D0.\n+\t(mn10300_return_in_memory): Support variable size types also.\n+\t(mn10300_pass_by_reference): Likewise.\n+\t(mn10300_function_value): New.\n+\t* config/mn10300/mn10300.h (FUNCTION_VALUE): Call the above.\n+\t(FUNCTION_OUTGOING_VALUE): Likewise.\n+\t* config/mn10300/mn10300.opt: Add -mreturn-pointer-on-d0.\n+\t* doc/invoke.texi: Document it.\n+\n 2005-09-21  Uros Bizjak  <uros@kss-loka.si>\n \n \tPR target/22585"}, {"sha": "b094c853b4dc399b71491d29cacf7d7dff934540", "filename": "gcc/config/mn10300/mn10300-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1eb8119ac9ec5677497fa33e2091941c60131a3/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1eb8119ac9ec5677497fa33e2091941c60131a3/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h?ref=b1eb8119ac9ec5677497fa33e2091941c60131a3", "patch": "@@ -49,6 +49,7 @@ extern bool mn10300_wide_const_load_uses_clr (rtx operands[2]);\n #ifdef TREE_CODE\n extern struct rtx_def *function_arg (CUMULATIVE_ARGS *,\n \t\t\t\t     enum machine_mode, tree, int);\n+extern rtx mn10300_function_value (tree, tree, int);\n #endif /* TREE_CODE */\n \n extern void expand_prologue (void);"}, {"sha": "cf0fc9fc146b7b5156144f80be8b10acd0d8071e", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1eb8119ac9ec5677497fa33e2091941c60131a3/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1eb8119ac9ec5677497fa33e2091941c60131a3/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=b1eb8119ac9ec5677497fa33e2091941c60131a3", "patch": "@@ -95,7 +95,7 @@ static int mn10300_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n #define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n \n #undef TARGET_DEFAULT_TARGET_FLAGS\n-#define TARGET_DEFAULT_TARGET_FLAGS MASK_MULT_BUG\n+#define TARGET_DEFAULT_TARGET_FLAGS MASK_MULT_BUG | MASK_PTR_A0D0\n #undef TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION mn10300_handle_option\n \n@@ -1449,7 +1449,9 @@ static bool\n mn10300_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n {\n   /* Return values > 8 bytes in length in memory.  */\n-  return int_size_in_bytes (type) > 8 || TYPE_MODE (type) == BLKmode;\n+  return (int_size_in_bytes (type) > 8\n+\t  || int_size_in_bytes (type) == 0\n+\t  || TYPE_MODE (type) == BLKmode);\n }\n \n /* Flush the argument registers to the stack for a stdarg function;\n@@ -1505,7 +1507,7 @@ mn10300_pass_by_reference (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n   else\n     size = GET_MODE_SIZE (mode);\n \n-  return size > 8;\n+  return (size > 8 || size == 0);\n }\n \n /* Return an RTX to represent where a value with mode MODE will be returned\n@@ -1598,6 +1600,37 @@ mn10300_arg_partial_bytes (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n   return nregs * UNITS_PER_WORD - cum->nbytes;\n }\n \n+/* Return the location of the function's value.  This will be either\n+   $d0 for integer functions, $a0 for pointers, or a PARALLEL of both\n+   $d0 and $a0 if the -mreturn-pointer-on-do flag is set.  Note that\n+   we only return the PARALLEL for outgoing values; we do not want\n+   callers relying on this extra copy.  */\n+\n+rtx\n+mn10300_function_value (tree valtype, tree func, int outgoing)\n+{\n+  rtx rv;\n+  enum machine_mode mode = TYPE_MODE (valtype);\n+\n+  if (! POINTER_TYPE_P (valtype))\n+    return gen_rtx_REG (mode, FIRST_DATA_REGNUM);\n+  else if (! TARGET_PTR_A0D0 || ! outgoing\n+\t   || current_function_returns_struct)\n+    return gen_rtx_REG (mode, FIRST_ADDRESS_REGNUM);\n+\n+  rv = gen_rtx_PARALLEL (mode, rtvec_alloc (2));\n+  XVECEXP (rv, 0, 0)\n+    = gen_rtx_EXPR_LIST (VOIDmode,\n+\t\t\t gen_rtx_REG (mode, FIRST_ADDRESS_REGNUM),\n+\t\t\t GEN_INT (0));\n+  \n+  XVECEXP (rv, 0, 1)\n+    = gen_rtx_EXPR_LIST (VOIDmode,\n+\t\t\t gen_rtx_REG (mode, FIRST_DATA_REGNUM),\n+\t\t\t GEN_INT (0));\n+  return rv;\n+}\n+\n /* Output a tst insn.  */\n const char *\n output_tst (rtx operand, rtx insn)"}, {"sha": "b102c3983063e6951510eb4edd97e80fd16f3c84", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1eb8119ac9ec5677497fa33e2091941c60131a3/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1eb8119ac9ec5677497fa33e2091941c60131a3/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=b1eb8119ac9ec5677497fa33e2091941c60131a3", "patch": "@@ -594,8 +594,9 @@ struct cum_arg {int nbytes; };\n    otherwise, FUNC is 0.  */\n \n #define FUNCTION_VALUE(VALTYPE, FUNC) \\\n-  gen_rtx_REG (TYPE_MODE (VALTYPE), POINTER_TYPE_P (VALTYPE) \\\n-\t       ? FIRST_ADDRESS_REGNUM : FIRST_DATA_REGNUM)\n+  mn10300_function_value (VALTYPE, FUNC, 0)\n+#define FUNCTION_OUTGOING_VALUE(VALTYPE, FUNC) \\\n+  mn10300_function_value (VALTYPE, FUNC, 1)\n \n /* Define how to find the value returned by a library function\n    assuming the value has mode MODE.  */"}, {"sha": "7e0658c495c56da05985b747827d9b57e4e76915", "filename": "gcc/config/mn10300/mn10300.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1eb8119ac9ec5677497fa33e2091941c60131a3/gcc%2Fconfig%2Fmn10300%2Fmn10300.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1eb8119ac9ec5677497fa33e2091941c60131a3/gcc%2Fconfig%2Fmn10300%2Fmn10300.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.opt?ref=b1eb8119ac9ec5677497fa33e2091941c60131a3", "patch": "@@ -35,3 +35,7 @@ Work around hardware multiply bug\n mrelax\n Target RejectNegative\n Enable linker relaxations\n+\n+mreturn-pointer-on-d0\n+Target Report Mask(PTR_A0D0)\n+Return pointers in both a0 and d0"}, {"sha": "5c8f51ac595832c08520dd10c4c71cea80dce07b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1eb8119ac9ec5677497fa33e2091941c60131a3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1eb8119ac9ec5677497fa33e2091941c60131a3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b1eb8119ac9ec5677497fa33e2091941c60131a3", "patch": "@@ -609,6 +609,7 @@ Objective-C and Objective-C++ Dialects}.\n @gccoptlist{-mmult-bug  -mno-mult-bug @gol\n -mam33  -mno-am33 @gol\n -mam33-2  -mno-am33-2 @gol\n+-mreturn-pointer-on-d0 @gol\n -mno-crt0  -mrelax}\n \n @emph{MS1 Options}\n@@ -10584,6 +10585,14 @@ Generate code which uses features specific to the AM33 processor.\n Do not generate code which uses features specific to the AM33 processor.  This\n is the default.\n \n+@item -mreturn-pointer-on-d0\n+@opindex mreturn-pointer-on-d0\n+When generating a function which returns a pointer, return the pointer\n+in both @code{a0} and @code{d0}.  Otherwise, the pointer is returned\n+only in a0, and attempts to call such functions without a prototype\n+would result in errors.  Note that this option is on by default; use\n+@option{-mno-return-pointer-on-d0} to disable it.\n+\n @item -mno-crt0\n @opindex mno-crt0\n Do not link in the C run-time initialization object file."}]}