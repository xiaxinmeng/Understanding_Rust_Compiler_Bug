{"sha": "3597e1135e5dce1fa8a7d69d933ae5dea2177591", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU5N2UxMTM1ZTVkY2UxZmE4YTdkNjlkOTMzYWU1ZGVhMjE3NzU5MQ==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2013-06-06T20:05:16Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2013-06-06T20:05:16Z"}, "message": "s390.opt (mlra): New option.\n\n2013-06-06  Vladimir Makarov  <vmakarov@redhat.com>\n\n\t* config/s390/s390.opt (mlra): New option.\n\t* config/s390/s390.c (s390_decompose_address): Check displacement\n\tfor all registers for LRA.\n\t(s390_secondary_reload): Don't used secondary reloads for LRA.\n\t(s390_lra_p): New function.\n\t(TARGET_LRA_P): Define.\n\t* config/s390/s390.md (*movmem_short, *clrmem_short): Change value\n\tof attribute cpu_facility to zarch for the last alternative.\n\t(*cmpmem_short): Ditto.\n\nFrom-SVN: r199754", "tree": {"sha": "c21b26315cc4a140b4b4bd538d318b01ccec686a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c21b26315cc4a140b4b4bd538d318b01ccec686a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3597e1135e5dce1fa8a7d69d933ae5dea2177591", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3597e1135e5dce1fa8a7d69d933ae5dea2177591", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3597e1135e5dce1fa8a7d69d933ae5dea2177591", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3597e1135e5dce1fa8a7d69d933ae5dea2177591/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "01037aeb478abb6c6c06c07c7368eead9032b677", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01037aeb478abb6c6c06c07c7368eead9032b677", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01037aeb478abb6c6c06c07c7368eead9032b677"}], "stats": {"total": 56, "additions": 44, "deletions": 12}, "files": [{"sha": "6fe6b6dc1ed1d15903677de60e0e8a29e2e27c86", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3597e1135e5dce1fa8a7d69d933ae5dea2177591/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3597e1135e5dce1fa8a7d69d933ae5dea2177591/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3597e1135e5dce1fa8a7d69d933ae5dea2177591", "patch": "@@ -1,3 +1,15 @@\n+2013-06-06  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\t* config/s390/s390.opt (mlra): New option.\n+\t* config/s390/s390.c (s390_decompose_address): Check displacement\n+\tfor all registers for LRA.\n+\t(s390_secondary_reload): Don't used secondary reloads for LRA.\n+\t(s390_lra_p): New function.\n+\t(TARGET_LRA_P): Define.\n+\t* config/s390/s390.md (*movmem_short, *clrmem_short): Change value\n+\tof attribute cpu_facility to zarch for the last alternative.\n+\t(*cmpmem_short): Ditto.\n+\n 2013-06-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/arm/arm.c (arm_r3_live_at_start_p): New predicate."}, {"sha": "358345a4437a2328b8d48223daf0e27c468f7862", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3597e1135e5dce1fa8a7d69d933ae5dea2177591/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3597e1135e5dce1fa8a7d69d933ae5dea2177591/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=3597e1135e5dce1fa8a7d69d933ae5dea2177591", "patch": "@@ -2017,14 +2017,18 @@ s390_decompose_address (rtx addr, struct s390_address *out)\n \t Thus we don't check the displacement for validity here.  If after\n \t elimination the displacement turns out to be invalid after all,\n \t this is fixed up by reload in any case.  */\n-      if (base != arg_pointer_rtx\n-\t  && indx != arg_pointer_rtx\n-\t  && base != return_address_pointer_rtx\n-\t  && indx != return_address_pointer_rtx\n-\t  && base != frame_pointer_rtx\n-\t  && indx != frame_pointer_rtx\n-\t  && base != virtual_stack_vars_rtx\n-\t  && indx != virtual_stack_vars_rtx)\n+      /* LRA maintains always displacements up to date and we need to\n+\t know the displacement is right during all LRA not only at the\n+\t final elimination.  */\n+      if (lra_in_progress\n+\t  || (base != arg_pointer_rtx\n+\t      && indx != arg_pointer_rtx\n+\t      && base != return_address_pointer_rtx\n+\t      && indx != return_address_pointer_rtx\n+\t      && base != frame_pointer_rtx\n+\t      && indx != frame_pointer_rtx\n+\t      && base != virtual_stack_vars_rtx\n+\t      && indx != virtual_stack_vars_rtx))\n \tif (!DISP_IN_RANGE (offset))\n \t  return false;\n     }\n@@ -3189,7 +3193,9 @@ s390_secondary_reload (bool in_p, rtx x, reg_class_t rclass_i,\n \n   /* We need a scratch register when loading a PLUS expression which\n      is not a legitimate operand of the LOAD ADDRESS instruction.  */\n-  if (in_p && s390_plus_operand (x, mode))\n+  /* LRA can deal with transformation of plus op very well -- so we\n+     don't need to prompt LRA in this case.  */\n+  if (! lra_in_progress && in_p && s390_plus_operand (x, mode))\n     sri->icode = (TARGET_64BIT ?\n \t\t  CODE_FOR_reloaddi_plus : CODE_FOR_reloadsi_plus);\n \n@@ -7868,6 +7874,13 @@ s390_class_max_nregs (enum reg_class rclass, enum machine_mode mode)\n   return (GET_MODE_SIZE (mode) + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n }\n \n+/* Return true if we use LRA instead of reload pass.  */\n+static bool\n+s390_lra_p (void)\n+{\n+  return s390_lra_flag;\n+}\n+\n /* Return true if register FROM can be eliminated via register TO.  */\n \n static bool\n@@ -11105,6 +11118,9 @@ s390_loop_unroll_adjust (unsigned nunroll, struct loop *loop)\n #undef TARGET_LEGITIMATE_CONSTANT_P\n #define TARGET_LEGITIMATE_CONSTANT_P s390_legitimate_constant_p\n \n+#undef TARGET_LRA_P\n+#define TARGET_LRA_P s390_lra_p\n+\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE s390_can_eliminate\n "}, {"sha": "9279dfa971d1d05ee7a7949ed7d3dfc15938a6b9", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3597e1135e5dce1fa8a7d69d933ae5dea2177591/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3597e1135e5dce1fa8a7d69d933ae5dea2177591/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=3597e1135e5dce1fa8a7d69d933ae5dea2177591", "patch": "@@ -2690,7 +2690,7 @@\n   \"(GET_MODE (operands[2]) == Pmode || GET_MODE (operands[2]) == VOIDmode)\"\n   \"#\"\n   [(set_attr \"type\"         \"cs\")\n-   (set_attr \"cpu_facility\" \"*,*,z10,*\")])\n+   (set_attr \"cpu_facility\" \"*,*,z10,zarch\")])\n \n (define_split\n   [(set (match_operand:BLK 0 \"memory_operand\" \"\")\n@@ -2899,7 +2899,7 @@\n   \"(GET_MODE (operands[1]) == Pmode || GET_MODE (operands[1]) == VOIDmode)\"\n   \"#\"\n   [(set_attr \"type\" \"cs\")\n-   (set_attr \"cpu_facility\" \"*,*,z10,*\")])\n+   (set_attr \"cpu_facility\" \"*,*,z10,zarch\")])\n \n (define_split\n   [(set (match_operand:BLK 0 \"memory_operand\" \"\")\n@@ -3075,7 +3075,7 @@\n   \"(GET_MODE (operands[2]) == Pmode || GET_MODE (operands[2]) == VOIDmode)\"\n   \"#\"\n   [(set_attr \"type\" \"cs\")\n-   (set_attr \"cpu_facility\" \"*,*,z10,*\")])\n+   (set_attr \"cpu_facility\" \"*,*,z10,zarch\")])\n \n (define_split\n   [(set (reg:CCU CC_REGNUM)"}, {"sha": "ba38e6e14ed3e680de8ba07e2cd931a84e04ed2a", "filename": "gcc/config/s390/s390.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3597e1135e5dce1fa8a7d69d933ae5dea2177591/gcc%2Fconfig%2Fs390%2Fs390.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3597e1135e5dce1fa8a7d69d933ae5dea2177591/gcc%2Fconfig%2Fs390%2Fs390.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.opt?ref=3597e1135e5dce1fa8a7d69d933ae5dea2177591", "patch": "@@ -149,3 +149,7 @@ Target Report Joined RejectNegative UInteger Var(s390_branch_cost) Init(1)\n Set the branch costs for conditional branch instructions.  Reasonable\n values are small, non-negative integers.  The default branch cost is\n 1.\n+\n+mlra\n+Target Report Var(s390_lra_flag) Init(1) Save\n+Use LRA instead of reload"}]}