{"sha": "a475fd3dcbdbe5def1461111710ce6ab17e7d918", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ3NWZkM2RjYmRiZTVkZWYxNDYxMTExNzEwY2U2YWIxN2U3ZDkxOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-02-19T06:43:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-02-19T06:43:34Z"}, "message": "re PR c++/56381 (ICE: cc1plus: internal compiler error: in gimplify_expr, at gimplify.c:7842)\n\n\tPR tree-optimization/56381\n\t* tree-ssa-pre.c (create_expression_by_pieces): Fix up last argument\n\tto fold_build3.\n\n\t* g++.dg/opt/pr56381.C: New test.\n\nFrom-SVN: r196133", "tree": {"sha": "b3583e4fae0a1048750972ca87d851d54b34ee13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3583e4fae0a1048750972ca87d851d54b34ee13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a475fd3dcbdbe5def1461111710ce6ab17e7d918", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a475fd3dcbdbe5def1461111710ce6ab17e7d918", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a475fd3dcbdbe5def1461111710ce6ab17e7d918", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a475fd3dcbdbe5def1461111710ce6ab17e7d918/comments", "author": null, "committer": null, "parents": [{"sha": "0cacd119770556727a288b48b48e6c2bc44ca536", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cacd119770556727a288b48b48e6c2bc44ca536", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cacd119770556727a288b48b48e6c2bc44ca536"}], "stats": {"total": 173, "additions": 170, "deletions": 3}, "files": [{"sha": "884826439bdfdf4189968eb6c9f4123631e0048c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a475fd3dcbdbe5def1461111710ce6ab17e7d918/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a475fd3dcbdbe5def1461111710ce6ab17e7d918/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a475fd3dcbdbe5def1461111710ce6ab17e7d918", "patch": "@@ -1,4 +1,10 @@\n-2013-02-15  Aldy Hernandez  <aldyh@redhat.com>\n+2013-02-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/56381\n+\t* tree-ssa-pre.c (create_expression_by_pieces): Fix up last argument\n+\tto fold_build3.\n+\n+2013-02-18  Aldy Hernandez  <aldyh@redhat.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/52555"}, {"sha": "50ad1016f7cf68a95231fd836af506445c78f645", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a475fd3dcbdbe5def1461111710ce6ab17e7d918/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a475fd3dcbdbe5def1461111710ce6ab17e7d918/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a475fd3dcbdbe5def1461111710ce6ab17e7d918", "patch": "@@ -1,4 +1,4 @@\n-2013-02-11  Aldy Hernandez  <aldyh@redhat.com>\n+2013-02-18  Aldy Hernandez  <aldyh@redhat.com>\n \n \tPR target/52555\n \t* c-common.c (handle_optimize_attribute): Call"}, {"sha": "1828629494cc5d30b55108c40046d1066cbcd160", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a475fd3dcbdbe5def1461111710ce6ab17e7d918/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a475fd3dcbdbe5def1461111710ce6ab17e7d918/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a475fd3dcbdbe5def1461111710ce6ab17e7d918", "patch": "@@ -1,3 +1,8 @@\n+2013-02-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/56381\n+\t* g++.dg/opt/pr56381.C: New test.\n+\n 2013-02-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR pch/54117"}, {"sha": "38a121d979aa5121e00a08871bd029cb038c7599", "filename": "gcc/testsuite/g++.dg/opt/pr56381.C", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a475fd3dcbdbe5def1461111710ce6ab17e7d918/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr56381.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a475fd3dcbdbe5def1461111710ce6ab17e7d918/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr56381.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr56381.C?ref=a475fd3dcbdbe5def1461111710ce6ab17e7d918", "patch": "@@ -0,0 +1,156 @@\n+// PR tree-optimization/56381\n+// { dg-do compile }\n+// { dg-options \"-std=c++11 -O2 -w\" }\n+\n+template <class>\n+class intrusive_ptr {};\n+class BasicReferenceCounted\n+{\n+};\n+template <class T>\n+class ReferenceCountingPointer : intrusive_ptr <T>\n+{\n+};\n+typedef BasicReferenceCounted ReferenceCountedInConditions;\n+class PointTag;\n+template <typename T, typename>\n+struct PreciseFloatType\n+{\n+  typedef T Type;\n+};\n+template <typename T, int N>\n+struct ExtVecTraits\n+{\n+  typedef T __attribute__ ((vector_size (N * sizeof (T)))) type;\n+};\n+template <typename T, int N>\n+using ExtVec = typename ExtVecTraits <T, N>::type;\n+template <typename T> using Vec4 = ExtVec <T, 4>;\n+template <typename Vec>\n+Vec cross3 (Vec x, Vec y)\n+{\n+  Vec x1200 = (Vec) { x[2], x[0] };\n+  Vec y2010 { y[2], y[0], y[1], y[0] };\n+  Vec x2010 = (Vec) { x[2], x[0], x[1], x[0] };\n+  Vec y1200 = (Vec) { y[1], y[0] };\n+  return x1200 * y2010 - x2010 * y1200;\n+}\n+template <typename T>\n+struct Rot3\n+{\n+  typedef Vec4 <T> Vec;\n+  Vec axis[3];\n+};\n+class Basic2DVector\n+{\n+};\n+template <typename T>\n+struct Basic3DVector\n+{\n+  typedef Vec4 <T> MathVector;\n+  Basic3DVector (MathVector iv) : v { (iv[0]), (iv[1]), (iv[2]), (iv[3]) } {}\n+  T mag2 () {}\n+  Basic3DVector unit ()\n+  {\n+    T my_mag = mag2 ();\n+    return (my_mag) ? (*this) * (T () / (my_mag)) : *this;\n+  }\n+  Basic3DVector\n+  cross (Basic3DVector lh) { return cross3 (v, lh.v); }\n+  Vec4 <T> v;\n+};\n+template <class T>\n+Basic3DVector <T> operator * (Basic3DVector <T>, T);\n+template <class T, class, class>\n+struct PV3DBase\n+{\n+  typedef Basic3DVector <T> BasicVectorType;\n+  template <class U>\n+  PV3DBase (Basic3DVector <U> v) : theVector (v) {}\n+  BasicVectorType basicVector () { return theVector; }\n+  T x ();\n+  T y ();\n+  BasicVectorType theVector;\n+};\n+class VectorTag;\n+template <class T, class FrameTag>\n+struct Vector3DBase:public PV3DBase <T, VectorTag, FrameTag>\n+{\n+  typedef PV3DBase <T, VectorTag, FrameTag> BaseClass;\n+  template <class U>\n+  Vector3DBase (Basic3DVector <U> v) : BaseClass (v) {}\n+  Vector3DBase unit () { return (this->basicVector ().unit ()); }\n+  template <class U>\n+  Vector3DBase <typename PreciseFloatType <T, U>::Type, FrameTag> cross (Vector3DBase <U, FrameTag> v)\n+  {\n+    return (this->theVector.cross (v.basicVector ()));\n+  }\n+};\n+template <class T, class FrameTag>\n+class Point3DBase : public PV3DBase <T, PointTag, FrameTag>\n+{\n+};\n+template <typename T, typename U, class Frame>\n+Vector3DBase <typename PreciseFloatType <T, U>::Type, Frame> operator - (Point3DBase <T, Frame>, Point3DBase <U, Frame>);\n+class GlobalTag;\n+template <class T>\n+struct TkRotation\n+{\n+  typedef Vector3DBase <T, GlobalTag> GlobalVector;\n+  TkRotation (GlobalVector aX, GlobalVector aY)\n+  {\n+    GlobalVector uX = aX.unit ();\n+    GlobalVector uY = aY.unit ();\n+    GlobalVector uZ (uX.cross (uY));\n+    rot.axis[2] = uZ.basicVector ().v;\n+  }\n+  Basic3DVector <T> z ();\n+  Rot3 <T> rot;\n+};\n+template <class T>\n+struct GloballyPositioned\n+{\n+  typedef Point3DBase <T, GlobalTag> PositionType;\n+  typedef TkRotation <T> RotationType;\n+  typedef Point3DBase <T, GlobalTag> GlobalPoint;\n+  typedef Vector3DBase <T, GlobalTag> GlobalVector;\n+  T iniPhi () { return 999.9978; }\n+  GloballyPositioned (PositionType pos, RotationType rot) : thePos (pos), theRot (rot) { resetCache (); }\n+  PositionType position () const;\n+  RotationType rotation () const;\n+  PositionType thePos;\n+  RotationType theRot;\n+  void resetCache ()\n+  {\n+    if ((thePos.x () == 0.) && (thePos.y () == 0.))\n+      thePhi = 0.;\n+    else\n+      thePhi = iniPhi ();\n+  }\n+  T thePhi;\n+};\n+class Plane;\n+using TangentPlane = Plane;\n+struct Surface : public GloballyPositioned <float>, ReferenceCountedInConditions\n+{\n+  typedef GloballyPositioned <float> Base;\n+  Surface (PositionType pos, RotationType rot):\n+  Base (pos, rot) {}\n+};\n+struct Plane : Surface\n+{\n+  template <typename ... Args>\n+  Plane (Args ... args):\n+  Surface ((args) ...) {}\n+};\n+class Cylinder : Surface\n+{\n+  void tangentPlane (const GlobalPoint &) const;\n+};\n+void\n+Cylinder::tangentPlane (const GlobalPoint & aPoint) const\n+{\n+  GlobalVector yPlane (rotation ().z ());\n+  GlobalVector xPlane (yPlane.cross (aPoint - position ()));\n+  new TangentPlane (aPoint, RotationType (xPlane, yPlane));\n+}"}, {"sha": "10c8091758e5be2d8f9c3ba18f416e61b5de2797", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a475fd3dcbdbe5def1461111710ce6ab17e7d918/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a475fd3dcbdbe5def1461111710ce6ab17e7d918/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=a475fd3dcbdbe5def1461111710ce6ab17e7d918", "patch": "@@ -2923,7 +2923,7 @@ create_expression_by_pieces (basic_block block, pre_expr expr,\n \t\tbreak;\n \t      case 3:\n \t\tfolded = fold_build3 (nary->opcode, nary->type,\n-\t\t\t\t      genop[0], genop[1], genop[3]);\n+\t\t\t\t      genop[0], genop[1], genop[2]);\n \t\tbreak;\n \t      default:\n \t\tgcc_unreachable ();"}]}