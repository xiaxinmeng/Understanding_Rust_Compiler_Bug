{"sha": "9a1ba437e83c401c742656a9b3dc6debf816409f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWExYmE0MzdlODNjNDAxYzc0MjY1NmE5YjNkYzZkZWJmODE2NDA5Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-10-07T20:53:21Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-10-07T20:53:21Z"}, "message": "calls.c (expand_call): Disallow sibcalls to noreturn functions.\n\n        * calls.c (expand_call): Disallow sibcalls to noreturn functions.\n        * flow.c (make_edges): Revert last change.\n\n        * config/alpha/alpha.h (FUNCTION_OK_FOR_SIBCALL): Don't test\n        TREE_THIS_VOLATILE.\n        * config/pa/pa.h (FUNCTION_OK_FOR_SIBCALL): Likewise.\n\nFrom-SVN: r36781", "tree": {"sha": "e6c9280ad9279c2c012c17a733ade27da717cd96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6c9280ad9279c2c012c17a733ade27da717cd96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a1ba437e83c401c742656a9b3dc6debf816409f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a1ba437e83c401c742656a9b3dc6debf816409f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a1ba437e83c401c742656a9b3dc6debf816409f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a1ba437e83c401c742656a9b3dc6debf816409f/comments", "author": null, "committer": null, "parents": [{"sha": "9ab916b8ed43541ad87ded43671f473671370b0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ab916b8ed43541ad87ded43671f473671370b0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ab916b8ed43541ad87ded43671f473671370b0b"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "b4a53e9388ddb8c913fc91f77aa821f5a780a56b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1ba437e83c401c742656a9b3dc6debf816409f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1ba437e83c401c742656a9b3dc6debf816409f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a1ba437e83c401c742656a9b3dc6debf816409f", "patch": "@@ -1,3 +1,12 @@\n+2000-10-07  Richard Henderson  <rth@cygnus.com>\n+\n+\t* calls.c (expand_call): Disallow sibcalls to noreturn functions.\n+\t* flow.c (make_edges): Revert last change.\n+\n+\t* config/alpha/alpha.h (FUNCTION_OK_FOR_SIBCALL): Don't test\n+\tTREE_THIS_VOLATILE.\n+\t* config/pa/pa.h (FUNCTION_OK_FOR_SIBCALL): Likewise.\n+\n 2000-10-06  David O'Brien  <obrien@dragon.nuxi.com>\n \n \t* config/alpha/elf.h: Standardize the formatting."}, {"sha": "775d03d0bde5b3f4b5e40aed13d09d65d9fa30f9", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1ba437e83c401c742656a9b3dc6debf816409f/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1ba437e83c401c742656a9b3dc6debf816409f/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=9a1ba437e83c401c742656a9b3dc6debf816409f", "patch": "@@ -2463,6 +2463,7 @@ expand_call (exp, target, ignore)\n \t before the sibcall_epilogue.  */\n       || fndecl == NULL_TREE\n       || (flags & (ECF_RETURNS_TWICE | ECF_LONGJMP))\n+      || TREE_THIS_VOLATILE (fndecl)\n       || !FUNCTION_OK_FOR_SIBCALL (fndecl)\n       /* If this function requires more stack slots than the current\n \t function, we cannot change it into a sibling call.  */"}, {"sha": "21d23bbffe433c46c602e895210d90feb25f74f2", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1ba437e83c401c742656a9b3dc6debf816409f/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1ba437e83c401c742656a9b3dc6debf816409f/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=9a1ba437e83c401c742656a9b3dc6debf816409f", "patch": "@@ -1187,8 +1187,7 @@ extern int alpha_memory_latency;\n #define FUNCTION_OK_FOR_SIBCALL(DECL)\t\t\t\\\n   (DECL\t\t\t\t\t\t\t\\\n    && ((TREE_ASM_WRITTEN (DECL) && !flag_pic)\t\t\\\n-       || ! TREE_PUBLIC (DECL)\t\t\t\t\\\n-       || (0 && TREE_THIS_VOLATILE (DECL))))\n+       || ! TREE_PUBLIC (DECL)))\n \n /* Try to output insns to set TARGET equal to the constant C if it can be\n    done in less than N insns.  Do all computations in MODE.  Returns the place"}, {"sha": "3d26e044f328b25b33d8f0cf4ec93117894fcb3f", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1ba437e83c401c742656a9b3dc6debf816409f/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1ba437e83c401c742656a9b3dc6debf816409f/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=9a1ba437e83c401c742656a9b3dc6debf816409f", "patch": "@@ -2014,8 +2014,7 @@ while (0)\n #define FUNCTION_OK_FOR_SIBCALL(DECL) \\\n   (DECL \\\n    && ! TARGET_64BIT \\\n-   && (! TREE_PUBLIC (DECL) \\\n-       || TREE_THIS_VOLATILE (DECL)))\n+   && ! TREE_PUBLIC (DECL))\n \n #define PREDICATE_CODES\t\t\t\t\t\t\t\\\n   {\"reg_or_0_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\\"}, {"sha": "0cb8428215b6b7ef55c8d2ecdfdfc28b61b56819", "filename": "gcc/flow.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1ba437e83c401c742656a9b3dc6debf816409f/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1ba437e83c401c742656a9b3dc6debf816409f/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=9a1ba437e83c401c742656a9b3dc6debf816409f", "patch": "@@ -1152,20 +1152,16 @@ make_edges (label_value_list)\n \t wouldn't have created the sibling call in the first place.  */\n \n       if (code == CALL_INSN && SIBLING_CALL_P (insn))\n-\t{\n-\t  if (! find_reg_note (insn, REG_NORETURN, NULL_RTX))\n-\t    make_edge (edge_cache, bb, EXIT_BLOCK_PTR,\n-\t\t       EDGE_ABNORMAL | EDGE_ABNORMAL_CALL);\n-\t}\n-      else\n+\tmake_edge (edge_cache, bb, EXIT_BLOCK_PTR,\n+\t\t   EDGE_ABNORMAL | EDGE_ABNORMAL_CALL);\n \n       /* If this is a CALL_INSN, then mark it as reaching the active EH\n \t handler for this CALL_INSN.  If we're handling asynchronous\n \t exceptions then any insn can reach any of the active handlers.\n \n \t Also mark the CALL_INSN as reaching any nonlocal goto handler.  */\n \n-      if (code == CALL_INSN || asynchronous_exceptions)\n+      else if (code == CALL_INSN || asynchronous_exceptions)\n \t{\n \t  /* Add any appropriate EH edges.  We do this unconditionally\n \t     since there may be a REG_EH_REGION or REG_EH_RETHROW note"}]}