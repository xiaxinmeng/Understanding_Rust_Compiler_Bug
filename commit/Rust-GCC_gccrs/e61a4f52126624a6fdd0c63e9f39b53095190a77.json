{"sha": "e61a4f52126624a6fdd0c63e9f39b53095190a77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTYxYTRmNTIxMjY2MjRhNmZkZDBjNjNlOWYzOWI1MzA5NTE5MGE3Nw==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2017-10-18T19:49:08Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2017-10-18T19:49:08Z"}, "message": "wide-int.cc (debug): New.\n\n\t* wide-int.cc (debug) [const wide_int &]: New.\n\t(debug) [const wide_int *]: New.\n\t(debug) [const widest_int &]: New.\n\t(debug) [const widest_int *]: New.\n\nFrom-SVN: r253866", "tree": {"sha": "1e957f1c426fb4102afc71ad9ae0cdb00ebc9ec1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e957f1c426fb4102afc71ad9ae0cdb00ebc9ec1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e61a4f52126624a6fdd0c63e9f39b53095190a77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e61a4f52126624a6fdd0c63e9f39b53095190a77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e61a4f52126624a6fdd0c63e9f39b53095190a77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e61a4f52126624a6fdd0c63e9f39b53095190a77/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9cfd7f2c796f055f213d005782e74b6e542d8737", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cfd7f2c796f055f213d005782e74b6e542d8737", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cfd7f2c796f055f213d005782e74b6e542d8737"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "da95f722c8e2edf0dc04460676090cf10e4f3b00", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61a4f52126624a6fdd0c63e9f39b53095190a77/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61a4f52126624a6fdd0c63e9f39b53095190a77/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e61a4f52126624a6fdd0c63e9f39b53095190a77", "patch": "@@ -1,3 +1,10 @@\n+2017-10-18  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* wide-int.cc (debug) [const wide_int &]: New.\n+\t(debug) [const wide_int *]: New.\n+\t(debug) [const widest_int &]: New.\n+\t(debug) [const widest_int *]: New.\n+\n 2017-10-18  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR middle-end/82556"}, {"sha": "1a1a68c19436c0b41f280af96f8702e61d0c3b60", "filename": "gcc/wide-int.cc", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61a4f52126624a6fdd0c63e9f39b53095190a77/gcc%2Fwide-int.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61a4f52126624a6fdd0c63e9f39b53095190a77/gcc%2Fwide-int.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int.cc?ref=e61a4f52126624a6fdd0c63e9f39b53095190a77", "patch": "@@ -2146,6 +2146,39 @@ template void generic_wide_int <wide_int_ref_storage <true> >::dump () const;\n template void offset_int::dump () const;\n template void widest_int::dump () const;\n \n+/* We could add all the above ::dump variants here, but wide_int and\n+   widest_int should handle the common cases.  Besides, you can always\n+   call the dump method directly.  */\n+\n+DEBUG_FUNCTION void\n+debug (const wide_int &ref)\n+{\n+  ref.dump ();\n+}\n+\n+DEBUG_FUNCTION void\n+debug (const wide_int *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n+DEBUG_FUNCTION void\n+debug (const widest_int &ref)\n+{\n+  ref.dump ();\n+}\n+\n+DEBUG_FUNCTION void\n+debug (const widest_int *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n \n #if CHECKING_P\n "}]}