{"sha": "b17fe23365c469a63dfd65e26ead9f2b7b806586", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE3ZmUyMzM2NWM0NjlhNjNkZmQ2NWUyNmVhZDlmMmI3YjgwNjU4Ng==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2003-03-13T12:03:36Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2003-03-13T12:03:36Z"}, "message": "(print_multi_reg): Do not generate a type 2 LDM instructions with writeback enabled.\n\n(print_multi_reg): Do not generate a type 2 LDM instructions with writeback\nenabled.\n(output_return_instruction): Likewise.\n\nFrom-SVN: r64306", "tree": {"sha": "08ad0f1f68170cc30a7496f8fc72c4f9024d9844", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08ad0f1f68170cc30a7496f8fc72c4f9024d9844"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b17fe23365c469a63dfd65e26ead9f2b7b806586", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b17fe23365c469a63dfd65e26ead9f2b7b806586", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b17fe23365c469a63dfd65e26ead9f2b7b806586", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b17fe23365c469a63dfd65e26ead9f2b7b806586/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ed0b52a048594149675cca027205a096557db58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ed0b52a048594149675cca027205a096557db58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ed0b52a048594149675cca027205a096557db58"}], "stats": {"total": 50, "additions": 35, "deletions": 15}, "files": [{"sha": "eadd1e882cba5f1710800ecae6c1eb419d810643", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17fe23365c469a63dfd65e26ead9f2b7b806586/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17fe23365c469a63dfd65e26ead9f2b7b806586/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b17fe23365c469a63dfd65e26ead9f2b7b806586", "patch": "@@ -1,5 +1,9 @@\n 2003-03-13  Nick Clifton  <nickc@redhat.com>\n \n+\t* config/arm/arm.c (print_multi_reg): Do not generate a type 2\n+        LDM instructions with writeback enabled.\n+        (output_return_instruction): Likewise.\n+\n \t* config/arm/pe.h (FIXED_REGISTERS): Remove definition.\n \t(CALL_USED_REGISTERS): Remove definition.\n \t(SUBTARGET_CONDITIONAL_REGISTER_USAGE): Define."}, {"sha": "b7c85911ba85a62cc64e02433b8de4060aacb11c", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17fe23365c469a63dfd65e26ead9f2b7b806586/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17fe23365c469a63dfd65e26ead9f2b7b806586/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=b17fe23365c469a63dfd65e26ead9f2b7b806586", "patch": "@@ -7204,7 +7204,17 @@ print_multi_reg (stream, instr, reg, mask)\n \tnot_first = TRUE;\n       }\n \n-  fprintf (stream, \"}%s\\n\", TARGET_APCS_32 ? \"\" : \"^\");\n+  fprintf (stream, \"}\");\n+\n+  /* Add a ^ character for the 26-bit ABI, but only if we were loading\n+     the PC or not updating the stack pointer.  Otherwise we generate\n+     an UNPREDICTABLE instruction.  */\n+  if (! TARGET_APCS_32\n+      && (((mask & (1 << PC_REGNUM)) != 0)\n+\t  || strchr (instr, '!') == NULL))\n+    fprintf (stream, \"^\");\n+  \n+  fprintf (stream, \"\\n\");\n }\n \n /* Output a 'call' insn.  */\n@@ -8210,20 +8220,26 @@ output_return_instruction (operand, really_return, reverse)\n \t  \n \t  if (live_regs_mask & (1 << LR_REGNUM))\n \t    {\n-\t      int l = strlen (return_reg);\n-\n-\t      if (! first)\n-\t\t{\n-\t\t  memcpy (p, \", \", 2);\n-\t\t  p += 2;\n-\t\t}\n-\n-\t      memcpy (p, \"%|\", 2);\n-\t      memcpy (p + 2, return_reg, l);\n-\t      strcpy (p + 2 + l, ((TARGET_APCS_32 \n-\t\t\t\t   && !IS_INTERRUPT (func_type)) \n-\t\t\t\t  || !really_return) \n-\t\t      ? \"}\" : \"}^\");\n+\t      sprintf (p, \"%s%%|%s}\", first ? \"\" : \", \", return_reg);\n+\t      /* Decide if we need to add the ^ symbol to the end of the\n+\t\t register list.\t This causes the saved condition codes\n+\t\t register to be copied into the current condition codes\n+\t\t register.  We do the copy if we are conforming to the 32-bit\n+\t\t ABI and this is an interrupt function, or if we are\n+\t\t conforming to the 26-bit ABI.  There is a special case for\n+\t\t the 26-bit ABI however, which is if we are writing back the\n+\t\t stack pointer but not loading the PC.  In this case adding\n+\t\t the ^ symbol would create a type 2 LDM instruction, where\n+\t\t writeback is UNPREDICTABLE.  We are safe in leaving the ^\n+\t\t character off in this case however, since the actual return\n+\t\t instruction will be a MOVS which will restore the CPSR.  */\n+\t      if ((TARGET_APCS_32 && IS_INTERRUPT (func_type))\n+\t\t  || (really_return\n+\t\t      && ! frame_pointer_needed\n+\t\t      && ((live_regs_mask & (1 << SP_REGNUM)) == 0)\n+\t\t      && ((live_regs_mask & (1 << PC_REGNUM)) == 0))\n+\t\t  )\n+\t\tstrcat (p, \"^\");\n \t    }\n \t  else\n \t    strcpy (p, \"}\");"}]}