{"sha": "a396f8ae242ddd9993230025093b5f768647d194", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM5NmY4YWUyNDJkZGQ5OTkzMjMwMDI1MDkzYjVmNzY4NjQ3ZDE5NA==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2004-09-18T05:50:52Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2004-09-18T05:50:52Z"}, "message": "re PR pch/13361 (const wchar_t * strings not stored in pch)\n\n\t* tree-inline.c (copy_tree_r): Don't duplicate constants, they're\n\tshared anyway.\n\n\tPR pch/13361\n\t* c-typeck.c (constructor_asmspec): Delete.\n\t(struct initializer_stack): Delete field 'asmspec'.\n\t(start_init): Delete saving of asmspec.\n\t(finish_init): Don't update constructor_asmspec.\n\t* dwarf2out.c (rtl_for_decl_location): Duplicate string from tree.\n\t* stmt.c (expand_asm): Duplicate strings from tree.\n\t(expand_asm_operands): Likewise.\n\t* tree.c (tree_size): Update computation of size of STRING_CST.\n\t(make_node): Don't make STRING_CST nodes.\n\t(build_string): Allocate string with tree node.\n\t(tree_code_size): Clean up assertions, don't allow requests\n\tfor \"the size of a STRING_CST\".\n\t* tree.def (STRING_CST): Update comment.\n\t* tree.h (TREE_STRING_POINTER): Adjust for change to STRING_CST.\n\t(tree_string): Place contents of string in tree node.\n\t* config/sh/sh.c (sh_handle_sp_switch_attribute): Duplicate string\n\tfrom tree.\n\nFrom-SVN: r87695", "tree": {"sha": "5b612839071d1427646211852251d0557c61a619", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b612839071d1427646211852251d0557c61a619"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a396f8ae242ddd9993230025093b5f768647d194", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a396f8ae242ddd9993230025093b5f768647d194", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a396f8ae242ddd9993230025093b5f768647d194", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a396f8ae242ddd9993230025093b5f768647d194/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9aa44508a821e8de072de1f6d8ea344753a0a4d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa44508a821e8de072de1f6d8ea344753a0a4d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aa44508a821e8de072de1f6d8ea344753a0a4d1"}], "stats": {"total": 126, "additions": 85, "deletions": 41}, "files": [{"sha": "1e3efe309d1d2f2c2e860829ae8e144661526d53", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a396f8ae242ddd9993230025093b5f768647d194/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a396f8ae242ddd9993230025093b5f768647d194/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a396f8ae242ddd9993230025093b5f768647d194", "patch": "@@ -1,3 +1,27 @@\n+2004-09-17  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* tree-inline.c (copy_tree_r): Don't duplicate constants, they're\n+\tshared anyway.\n+\n+\tPR pch/13361\n+\t* c-typeck.c (constructor_asmspec): Delete.\n+\t(struct initializer_stack): Delete field 'asmspec'.\n+\t(start_init): Delete saving of asmspec.\n+\t(finish_init): Don't update constructor_asmspec.\n+\t* dwarf2out.c (rtl_for_decl_location): Duplicate string from tree.\n+\t* stmt.c (expand_asm): Duplicate strings from tree.\n+\t(expand_asm_operands): Likewise.\n+\t* tree.c (tree_size): Update computation of size of STRING_CST.\n+\t(make_node): Don't make STRING_CST nodes.\n+\t(build_string): Allocate string with tree node.\n+\t(tree_code_size): Clean up assertions, don't allow requests\n+\tfor \"the size of a STRING_CST\".\n+\t* tree.def (STRING_CST): Update comment.\n+\t* tree.h (TREE_STRING_POINTER): Adjust for change to STRING_CST.\n+\t(tree_string): Place contents of string in tree node.\n+\t* config/sh/sh.c (sh_handle_sp_switch_attribute): Duplicate string\n+\tfrom tree.\n+\n 2004-09-17  Zack Weinberg  <zack@codesourcery.com>\n \n \t* Makefile.in (c-parse.o): Depend on $(C_PRAGMA_H)."}, {"sha": "c00b9ec4a616b848395000beb9d594d52e427af7", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a396f8ae242ddd9993230025093b5f768647d194/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a396f8ae242ddd9993230025093b5f768647d194/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=a396f8ae242ddd9993230025093b5f768647d194", "patch": "@@ -4319,9 +4319,6 @@ int constructor_no_implicit = 0; /* 0 for C; 1 for some other languages.  */\n    such as (struct foo) {...}.  */\n static tree constructor_decl;\n \n-/* start_init saves the ASMSPEC arg here for really_start_incremental_init.  */\n-static const char *constructor_asmspec;\n-\n /* Nonzero if this is an initializer for a top-level decl.  */\n static int constructor_top_level;\n \n@@ -4393,7 +4390,6 @@ struct initializer_stack\n {\n   struct initializer_stack *next;\n   tree decl;\n-  const char *asmspec;\n   struct constructor_stack *constructor_stack;\n   struct constructor_range_stack *constructor_range_stack;\n   tree elements;\n@@ -4410,17 +4406,12 @@ struct initializer_stack *initializer_stack;\n /* Prepare to parse and output the initializer for variable DECL.  */\n \n void\n-start_init (tree decl, tree asmspec_tree, int top_level)\n+start_init (tree decl, tree asmspec_tree ATTRIBUTE_UNUSED, int top_level)\n {\n   const char *locus;\n-  struct initializer_stack *p = XNEW (struct initializer_stack);\n-  const char *asmspec = 0;\n-\n-  if (asmspec_tree)\n-    asmspec = TREE_STRING_POINTER (asmspec_tree);\n+  struct initializer_stack *p = xmalloc (sizeof (struct initializer_stack));\n \n   p->decl = constructor_decl;\n-  p->asmspec = constructor_asmspec;\n   p->require_constant_value = require_constant_value;\n   p->require_constant_elements = require_constant_elements;\n   p->constructor_stack = constructor_stack;\n@@ -4434,7 +4425,6 @@ start_init (tree decl, tree asmspec_tree, int top_level)\n   initializer_stack = p;\n \n   constructor_decl = decl;\n-  constructor_asmspec = asmspec;\n   constructor_designated = 0;\n   constructor_top_level = top_level;\n \n@@ -4490,7 +4480,6 @@ finish_init (void)\n   free (spelling_base);\n \n   constructor_decl = p->decl;\n-  constructor_asmspec = p->asmspec;\n   require_constant_value = p->require_constant_value;\n   require_constant_elements = p->require_constant_elements;\n   constructor_stack = p->constructor_stack;"}, {"sha": "c7d158cfeb65aad084d0e0587375815d3eb3703f", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a396f8ae242ddd9993230025093b5f768647d194/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a396f8ae242ddd9993230025093b5f768647d194/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=a396f8ae242ddd9993230025093b5f768647d194", "patch": "@@ -7161,8 +7161,8 @@ sh_handle_sp_switch_attribute (tree *node, tree name, tree args,\n     }\n   else\n     {\n-      sp_switch = gen_rtx_SYMBOL_REF (VOIDmode,\n-\t\t\t\t      TREE_STRING_POINTER (TREE_VALUE (args)));\n+      char *s = ggc_strdup (TREE_STRING_POINTER (TREE_VALUE (args)));\n+      sp_switch = gen_rtx_SYMBOL_REF (VOIDmode, s);\n     }\n \n   return NULL_TREE;"}, {"sha": "2cf1f74db8708ea186b5670957b1e827a6c05877", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a396f8ae242ddd9993230025093b5f768647d194/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a396f8ae242ddd9993230025093b5f768647d194/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a396f8ae242ddd9993230025093b5f768647d194", "patch": "@@ -1,3 +1,9 @@\n+2004-09-16  Geoffrey Keating  <geoffk@apple.com>\n+\n+\tPR pch/13361\n+\t* cp/lex.c (handle_pragma_interface): Duplicate string from tree.\n+\t(handle_pragma_implementation): Likewise.\n+\n 2004-09-17  Jeffrey D. Oldham  <oldham@codesourcery.com>\n \t    Zack Weinberg  <zack@codesourcery.com>\n "}, {"sha": "c7b1cf6e12f4945fd1b798ddb6e0120dbafe7aa0", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a396f8ae242ddd9993230025093b5f768647d194/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a396f8ae242ddd9993230025093b5f768647d194/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=a396f8ae242ddd9993230025093b5f768647d194", "patch": "@@ -471,7 +471,7 @@ handle_pragma_interface (cpp_reader* dfile ATTRIBUTE_UNUSED )\n   else if (fname == 0)\n     main_filename = lbasename (input_filename);\n   else\n-    main_filename = TREE_STRING_POINTER (fname);\n+    main_filename = ggc_strdup (TREE_STRING_POINTER (fname));\n \n   finfo = get_fileinfo (input_filename);\n \n@@ -519,7 +519,7 @@ handle_pragma_implementation (cpp_reader* dfile ATTRIBUTE_UNUSED )\n     }\n   else\n     {\n-      main_filename = TREE_STRING_POINTER (fname);\n+      main_filename = ggc_strdup (TREE_STRING_POINTER (fname));\n       if (cpp_included (parse_in, main_filename))\n \twarning (\"#pragma implementation for %s appears after file is included\",\n \t\t main_filename);"}, {"sha": "e269629d9d2a94f8f1e1eba69accc526fe1ebcd9", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a396f8ae242ddd9993230025093b5f768647d194/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a396f8ae242ddd9993230025093b5f768647d194/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=a396f8ae242ddd9993230025093b5f768647d194", "patch": "@@ -9889,7 +9889,8 @@ rtl_for_decl_location (tree decl)\n \t\t\t\t   TREE_STRING_LENGTH (init) - 1) == 0\n \t      && ((size_t) TREE_STRING_LENGTH (init)\n \t\t  == strlen (TREE_STRING_POINTER (init)) + 1))\n-\t    rtl = gen_rtx_CONST_STRING (VOIDmode, TREE_STRING_POINTER (init));\n+\t    rtl = gen_rtx_CONST_STRING (VOIDmode,\n+\t\t\t\t\tggc_strdup (TREE_STRING_POINTER (init)));\n \t}\n       /* If the initializer is something that we know will expand into an\n \t immediate RTL constant, expand it now.  Expanding anything else"}, {"sha": "099c5e76f603c27554191846fe782d573b4d08f5", "filename": "gcc/stmt.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a396f8ae242ddd9993230025093b5f768647d194/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a396f8ae242ddd9993230025093b5f768647d194/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=a396f8ae242ddd9993230025093b5f768647d194", "patch": "@@ -267,7 +267,8 @@ expand_asm (tree string, int vol)\n   if (TREE_CODE (string) == ADDR_EXPR)\n     string = TREE_OPERAND (string, 0);\n \n-  body = gen_rtx_ASM_INPUT (VOIDmode, TREE_STRING_POINTER (string));\n+  body = gen_rtx_ASM_INPUT (VOIDmode,\n+\t\t\t    ggc_strdup (TREE_STRING_POINTER (string)));\n \n   MEM_VOLATILE_P (body) = vol;\n \n@@ -851,7 +852,7 @@ expand_asm_operands (tree string, tree outputs, tree inputs,\n \n   body = gen_rtx_ASM_OPERANDS ((noutputs == 0 ? VOIDmode\n \t\t\t\t: GET_MODE (output_rtx[0])),\n-\t\t\t       TREE_STRING_POINTER (string),\n+\t\t\t       ggc_strdup (TREE_STRING_POINTER (string)),\n \t\t\t       empty_string, 0, argvec, constraintvec,\n \t\t\t       locus);\n \n@@ -932,7 +933,8 @@ expand_asm_operands (tree string, tree outputs, tree inputs,\n       ASM_OPERANDS_INPUT (body, i) = op;\n \n       ASM_OPERANDS_INPUT_CONSTRAINT_EXP (body, i)\n-\t= gen_rtx_ASM_INPUT (TYPE_MODE (type), constraints[i + noutputs]);\n+\t= gen_rtx_ASM_INPUT (TYPE_MODE (type), \n+\t\t\t     ggc_strdup (constraints[i + noutputs]));\n \n       if (decl_conflicts_with_clobbers_p (val, clobbered_regs))\n \tclobber_conflict_found = 1;\n@@ -966,7 +968,7 @@ expand_asm_operands (tree string, tree outputs, tree inputs,\n \n   if (noutputs == 1 && nclobbers == 0)\n     {\n-      ASM_OPERANDS_OUTPUT_CONSTRAINT (body) = constraints[0];\n+      ASM_OPERANDS_OUTPUT_CONSTRAINT (body) = ggc_strdup (constraints[0]);\n       emit_insn (gen_rtx_SET (VOIDmode, output_rtx[0], body));\n     }\n \n@@ -994,9 +996,9 @@ expand_asm_operands (tree string, tree outputs, tree inputs,\n \t\t\t   output_rtx[i],\n \t\t\t   gen_rtx_ASM_OPERANDS\n \t\t\t   (GET_MODE (output_rtx[i]),\n-\t\t\t    TREE_STRING_POINTER (string),\n-\t\t\t    constraints[i], i, argvec, constraintvec,\n-\t\t\t    locus));\n+\t\t\t    ggc_strdup (TREE_STRING_POINTER (string)),\n+\t\t\t    ggc_strdup (constraints[i]),\n+\t\t\t    i, argvec, constraintvec, locus));\n \n \t  MEM_VOLATILE_P (SET_SRC (XVECEXP (body, 0, i))) = vol;\n \t}"}, {"sha": "ddc44e64cdfb08aa48d516fc5f86b42e334f51c2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a396f8ae242ddd9993230025093b5f768647d194/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a396f8ae242ddd9993230025093b5f768647d194/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a396f8ae242ddd9993230025093b5f768647d194", "patch": "@@ -1,3 +1,9 @@\n+2004-09-16  Geoffrey Keating  <geoffk@apple.com>\n+\n+\tPR pch/13361\n+\t* testsuite/g++.dg/pch/wchar-1.C: New.\n+\t* testsuite/g++.dg/pch/wchar-1.Hs: New.\n+\n 2004-09-17  Kenneth Zadeck  <Kenneth.Zadeck@NaturalBridge.com>\n \n \t* gcc.c-torture/execute/20040917-1.c: New test."}, {"sha": "6cb5fe15e4c74b116c5bb22802a2cb8821efa887", "filename": "gcc/testsuite/g++.dg/pch/wchar-1.C", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a396f8ae242ddd9993230025093b5f768647d194/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpch%2Fwchar-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a396f8ae242ddd9993230025093b5f768647d194/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpch%2Fwchar-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpch%2Fwchar-1.C?ref=a396f8ae242ddd9993230025093b5f768647d194", "patch": "@@ -0,0 +1 @@\n+#include \"wchar-1.H\""}, {"sha": "431908b88b1eb46a0ec3440a2d9e26d522a64fcd", "filename": "gcc/testsuite/g++.dg/pch/wchar-1.Hs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a396f8ae242ddd9993230025093b5f768647d194/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpch%2Fwchar-1.Hs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a396f8ae242ddd9993230025093b5f768647d194/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpch%2Fwchar-1.Hs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpch%2Fwchar-1.Hs?ref=a396f8ae242ddd9993230025093b5f768647d194", "patch": "@@ -0,0 +1,2 @@\n+#include <stddef.h>\n+const wchar_t test_var[] = L\"wide string\";"}, {"sha": "243b870cf7026b33cd1d6440f3d5f47c527daced", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a396f8ae242ddd9993230025093b5f768647d194/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a396f8ae242ddd9993230025093b5f768647d194/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=a396f8ae242ddd9993230025093b5f768647d194", "patch": "@@ -2257,7 +2257,6 @@ copy_tree_r (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n \n   /* We make copies of most nodes.  */\n   if (IS_EXPR_CODE_CLASS (TREE_CODE_CLASS (code))\n-      || TREE_CODE_CLASS (code) == tcc_constant\n       || code == TREE_LIST\n       || code == TREE_VEC\n       || code == TYPE_DECL)\n@@ -2291,6 +2290,8 @@ copy_tree_r (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n     *walk_subtrees = 0;\n   else if (TREE_CODE_CLASS (code) == tcc_declaration)\n     *walk_subtrees = 0;\n+  else if (TREE_CODE_CLASS (code) == tcc_constant)\n+    *walk_subtrees = 0;\n   else\n     gcc_assert (code != STATEMENT_LIST);\n   return NULL_TREE;"}, {"sha": "98ab92411f51e82c7f3eab0292d7651126b0c88a", "filename": "gcc/tree.c", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a396f8ae242ddd9993230025093b5f768647d194/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a396f8ae242ddd9993230025093b5f768647d194/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a396f8ae242ddd9993230025093b5f768647d194", "patch": "@@ -159,17 +159,12 @@ decl_assembler_name (tree decl)\n   return DECL_CHECK (decl)->decl.assembler_name;\n }\n \n-/* Compute the number of bytes occupied by a tree with code CODE.  This\n-   function cannot be used for TREE_VEC or PHI_NODE codes, which are of\n-   variable length.  */\n+/* Compute the number of bytes occupied by a tree with code CODE.\n+   This function cannot be used for TREE_VEC, PHI_NODE, or STRING_CST\n+   codes, which are of variable length.  */\n size_t\n tree_code_size (enum tree_code code)\n {\n-  /* We can't state the size of a TREE_VEC or PHI_NODE\n-     without knowing how many elements it will have.  */\n-  gcc_assert (code != TREE_VEC);\n-  gcc_assert (code != PHI_NODE);\n-\n   switch (TREE_CODE_CLASS (code))\n     {\n     case tcc_declaration:  /* A decl node */\n@@ -194,7 +189,7 @@ tree_code_size (enum tree_code code)\n \tcase REAL_CST:\t\treturn sizeof (struct tree_real_cst);\n \tcase COMPLEX_CST:\treturn sizeof (struct tree_complex);\n \tcase VECTOR_CST:\treturn sizeof (struct tree_vector);\n-\tcase STRING_CST:\treturn sizeof (struct tree_string);\n+\tcase STRING_CST:\tgcc_unreachable ();\n \tdefault:\n \t  return lang_hooks.tree_size (code);\n \t}\n@@ -208,7 +203,8 @@ tree_code_size (enum tree_code code)\n \tcase ERROR_MARK:\n \tcase PLACEHOLDER_EXPR:\treturn sizeof (struct tree_common);\n \n-\tcase PHI_NODE:\t\t\n+\tcase TREE_VEC:\n+\tcase PHI_NODE:\t\tgcc_unreachable ();\n \n \tcase SSA_NAME:\t\treturn sizeof (struct tree_ssa_name);\n \n@@ -241,6 +237,9 @@ tree_size (tree node)\n       return (sizeof (struct tree_vec)\n \t      + (TREE_VEC_LENGTH (node) - 1) * sizeof(char *));\n \n+    case STRING_CST:\n+      return sizeof (struct tree_string) + TREE_STRING_LENGTH (node) - 1;\n+\n     default:\n       return tree_code_size (code);\n     }\n@@ -719,10 +718,23 @@ build_real_from_int_cst (tree type, tree i)\n tree\n build_string (int len, const char *str)\n {\n-  tree s = make_node (STRING_CST);\n+  tree s;\n+  size_t length;\n+  \n+  length = len + sizeof (struct tree_string);\n+\n+#ifdef GATHER_STATISTICS\n+  tree_node_counts[(int) c_kind]++;\n+  tree_node_sizes[(int) c_kind] += length;\n+#endif  \n+\n+  s = ggc_alloc_tree (length);\n \n+  memset (s, 0, sizeof (struct tree_common));\n+  TREE_SET_CODE (s, STRING_CST);\n   TREE_STRING_LENGTH (s) = len;\n-  TREE_STRING_POINTER (s) = ggc_alloc_string (str, len);\n+  memcpy ((char *) TREE_STRING_POINTER (s), str, len);\n+  ((char *) TREE_STRING_POINTER (s))[len] = '\\0';\n \n   return s;\n }"}, {"sha": "922c75f3232c58a754b3caefe982d884df4a2f41", "filename": "gcc/tree.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a396f8ae242ddd9993230025093b5f768647d194/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a396f8ae242ddd9993230025093b5f768647d194/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=a396f8ae242ddd9993230025093b5f768647d194", "patch": "@@ -266,7 +266,7 @@ DEFTREECODE (COMPLEX_CST, \"complex_cst\", tcc_constant, 0)\n /* Contents are in TREE_VECTOR_CST_ELTS field.  */\n DEFTREECODE (VECTOR_CST, \"vector_cst\", tcc_constant, 0)\n \n-/* Contents are TREE_STRING_LENGTH and TREE_STRING_POINTER fields.  */\n+/* Contents are TREE_STRING_LENGTH and the actual contents of the string.  */\n DEFTREECODE (STRING_CST, \"string_cst\", tcc_constant, 0)\n \n /* Declarations.  All references to names are represented as ..._DECL"}, {"sha": "17f04759a5305f136db3c1ad577f44b611572624", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a396f8ae242ddd9993230025093b5f768647d194/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a396f8ae242ddd9993230025093b5f768647d194/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a396f8ae242ddd9993230025093b5f768647d194", "patch": "@@ -1053,13 +1053,13 @@ struct tree_real_cst GTY(())\n \n /* In a STRING_CST */\n #define TREE_STRING_LENGTH(NODE) (STRING_CST_CHECK (NODE)->string.length)\n-#define TREE_STRING_POINTER(NODE) (STRING_CST_CHECK (NODE)->string.pointer)\n+#define TREE_STRING_POINTER(NODE) (STRING_CST_CHECK (NODE)->string.str)\n \n struct tree_string GTY(())\n {\n   struct tree_common common;\n   int length;\n-  const char *pointer;\n+  const char str[1];\n };\n \n /* In a COMPLEX_CST node.  */"}]}