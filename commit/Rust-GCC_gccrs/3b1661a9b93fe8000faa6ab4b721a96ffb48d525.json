{"sha": "3b1661a9b93fe8000faa6ab4b721a96ffb48d525", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2IxNjYxYTliOTNmZTgwMDBmYWE2YWI0YjcyMWE5NmZmYjQ4ZDUyNQ==", "commit": {"author": {"name": "Evgeny Stupachenko", "email": "evstupac@gmail.com", "date": "2015-10-30T18:17:43Z"}, "committer": {"name": "Ilya Verbin", "email": "iverbin@gcc.gnu.org", "date": "2015-10-30T18:17:43Z"}, "message": "Makefile.in (OBJS): Add multiple_target.o.\n\n2015-10-30  Evgeny Stupachenko  <evstupac@gmail.com>\n\ngcc/\n\t* Makefile.in (OBJS): Add multiple_target.o.\n\t* attrib.c (make_attribute): Moved from config/i386/i386.c\n\t* config/i386/i386.c (make_attribute): Deleted.\n\t* multiple_target.c (create_dispatcher_calls): New.\n\t(get_attr_len): Ditto.\n\t(get_attr_str): Ditto.\n\t(separate_attrs): Ditto.\n\t(is_valid_asm_symbol): Ditto.\n\t(create_new_asm_name): Ditto.\n\t(create_target_clone): Ditto.\n\t(expand_target_clones): Ditto.\n\t(ipa_target_clone): Ditto.\n\t(ipa_dispatcher_calls): Ditto.\n\t* passes.def (pass_target_clone): Two new ipa passes.\n\t* tree-pass.h (make_pass_target_clone): Ditto.\n\t* doc/extend.texi (target_clones): New attribute description.\ngcc/c-family/\n\t* c-common.c (handle_target_clones_attribute): New.\n\t(c_common_attribute_table): Add handle_target_clones_attribute.\n\t(handle_always_inline_attribute): Add check on target_clones attribute.\n\t(handle_target_attribute): Ditto.\ngcc/testsuite/\n\t* gcc.dg/mvc1.c: New test for multiple targets cloning.\n\t* gcc.dg/mvc2.c: Ditto.\n\t* gcc.dg/mvc3.c: Ditto.\n\t* gcc.dg/mvc4.c: Ditto.\n\t* gcc.dg/mvc5.c: Ditto.\n\t* gcc.dg/mvc6.c: Ditto.\n\t* gcc.dg/mvc7.c: Ditto.\n\t* g++.dg/ext/mvc1.C: Ditto.\n\t* g++.dg/ext/mvc2.C: Ditto.\n\t* g++.dg/ext/mvc3.C: Ditto.\n\t* g++.dg/ext/mvc4.C: Ditto.\n\nFrom-SVN: r229595", "tree": {"sha": "ddea4c378db574f26e36e6c93fd1c8beeb9c4864", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddea4c378db574f26e36e6c93fd1c8beeb9c4864"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b1661a9b93fe8000faa6ab4b721a96ffb48d525", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b1661a9b93fe8000faa6ab4b721a96ffb48d525", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b1661a9b93fe8000faa6ab4b721a96ffb48d525", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/comments", "author": {"login": "evstupac", "id": 38332307, "node_id": "MDQ6VXNlcjM4MzMyMzA3", "avatar_url": "https://avatars.githubusercontent.com/u/38332307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/evstupac", "html_url": "https://github.com/evstupac", "followers_url": "https://api.github.com/users/evstupac/followers", "following_url": "https://api.github.com/users/evstupac/following{/other_user}", "gists_url": "https://api.github.com/users/evstupac/gists{/gist_id}", "starred_url": "https://api.github.com/users/evstupac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/evstupac/subscriptions", "organizations_url": "https://api.github.com/users/evstupac/orgs", "repos_url": "https://api.github.com/users/evstupac/repos", "events_url": "https://api.github.com/users/evstupac/events{/privacy}", "received_events_url": "https://api.github.com/users/evstupac/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "834e9dbb3999af9b49ba168c7e870f484504d35f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/834e9dbb3999af9b49ba168c7e870f484504d35f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/834e9dbb3999af9b49ba168c7e870f484504d35f"}], "stats": {"total": 773, "additions": 755, "deletions": 18}, "files": [{"sha": "1edff5d2a917bbc3bfa4f50954ad87234be1fb7b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b1661a9b93fe8000faa6ab4b721a96ffb48d525", "patch": "@@ -1,3 +1,22 @@\n+2015-10-30  Evgeny Stupachenko  <evstupac@gmail.com>\n+\n+\t* Makefile.in (OBJS): Add multiple_target.o.\n+\t* attrib.c (make_attribute): Moved from config/i386/i386.c\n+\t* config/i386/i386.c (make_attribute): Deleted.\n+\t* multiple_target.c (create_dispatcher_calls): New.\n+\t(get_attr_len): Ditto.\n+\t(get_attr_str): Ditto.\n+\t(separate_attrs): Ditto.\n+\t(is_valid_asm_symbol): Ditto.\n+\t(create_new_asm_name): Ditto.\n+\t(create_target_clone): Ditto.\n+\t(expand_target_clones): Ditto.\n+\t(ipa_target_clone): Ditto.\n+\t(ipa_dispatcher_calls): Ditto.\n+\t* passes.def (pass_target_clone): Two new ipa passes.\n+\t* tree-pass.h (make_pass_target_clone): Ditto.\n+\t* doc/extend.texi (target_clones): New attribute description.\n+\n 2015-10-30  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/68106"}, {"sha": "7d53a7dee2d03743a12780ad479f114822024739", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=3b1661a9b93fe8000faa6ab4b721a96ffb48d525", "patch": "@@ -1356,6 +1356,7 @@ OBJS = \\\n \tmcf.o \\\n \tmode-switching.o \\\n \tmodulo-sched.o \\\n+\tmultiple_target.o \\\n \tomp-low.o \\\n \toptabs.o \\\n \toptabs-libfuncs.o \\"}, {"sha": "affb21d8578ae679b15eef82b18defaacb0f8d76", "filename": "gcc/attribs.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=3b1661a9b93fe8000faa6ab4b721a96ffb48d525", "patch": "@@ -672,3 +672,21 @@ apply_tm_attr (tree fndecl, tree attr)\n {\n   decl_attributes (&TREE_TYPE (fndecl), tree_cons (attr, NULL, NULL), 0);\n }\n+\n+/* Makes a function attribute of the form NAME(ARG_NAME) and chains\n+   it to CHAIN.  */\n+\n+tree\n+make_attribute (const char *name, const char *arg_name, tree chain)\n+{\n+  tree attr_name;\n+  tree attr_arg_name;\n+  tree attr_args;\n+  tree attr;\n+\n+  attr_name = get_identifier (name);\n+  attr_arg_name = build_string (strlen (arg_name), arg_name);\n+  attr_args = tree_cons (NULL_TREE, attr_arg_name, NULL_TREE);\n+  attr = tree_cons (attr_name, attr_args, chain);\n+  return attr;\n+}"}, {"sha": "3c0be4f1e61eea592d6727436c83847c6c9151a6", "filename": "gcc/attribs.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Fattribs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Fattribs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.h?ref=3b1661a9b93fe8000faa6ab4b721a96ffb48d525", "patch": "@@ -36,5 +36,6 @@ extern tree decl_attributes (tree *, tree, int);\n extern bool cxx11_attribute_p (const_tree);\n extern tree get_attribute_name (const_tree);\n extern void apply_tm_attr (tree, tree);\n+extern tree make_attribute (const char *, const char *, tree);\n \n #endif // GCC_ATTRIBS_H"}, {"sha": "3ed94215a1dba104ab4b28c1e465b044dbdbd8c6", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=3b1661a9b93fe8000faa6ab4b721a96ffb48d525", "patch": "@@ -1,3 +1,10 @@\n+2015-10-30  Evgeny Stupachenko  <evstupac@gmail.com>\n+\n+\t* c-common.c (handle_target_clones_attribute): New.\n+\t(c_common_attribute_table): Add handle_target_clones_attribute.\n+\t(handle_always_inline_attribute): Add check on target_clones attribute.\n+\t(handle_target_attribute): Ditto.\n+\n 2015-10-29  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* array-notation-common.c: Reorder #include's and remove duplicates."}, {"sha": "c87704baf35a8767b0e1e1e14ff17177662b0309", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=3b1661a9b93fe8000faa6ab4b721a96ffb48d525", "patch": "@@ -379,6 +379,7 @@ static tree handle_alloc_size_attribute (tree *, tree, tree, int, bool *);\n static tree handle_alloc_align_attribute (tree *, tree, tree, int, bool *);\n static tree handle_assume_aligned_attribute (tree *, tree, tree, int, bool *);\n static tree handle_target_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_target_clones_attribute (tree *, tree, tree, int, bool *);\n static tree handle_optimize_attribute (tree *, tree, tree, int, bool *);\n static tree ignore_attribute (tree *, tree, tree, int, bool *);\n static tree handle_no_split_stack_attribute (tree *, tree, tree, int, bool *);\n@@ -793,6 +794,8 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_error_attribute, false },\n   { \"target\",                 1, -1, true, false, false,\n \t\t\t      handle_target_attribute, false },\n+  { \"target_clones\",          1, -1, true, false, false,\n+\t\t\t      handle_target_clones_attribute, false },\n   { \"optimize\",               1, -1, true, false, false,\n \t\t\t      handle_optimize_attribute, false },\n   /* For internal use only.  The leading '*' both prevents its usage in\n@@ -7390,6 +7393,12 @@ handle_always_inline_attribute (tree *node, tree name,\n \t\t   \"with %qs attribute\", name, \"noinline\");\n \t  *no_add_attrs = true;\n \t}\n+      else if (lookup_attribute (\"target_clones\", DECL_ATTRIBUTES (*node)))\n+\t{\n+\t  warning (OPT_Wattributes, \"%qE attribute ignored due to conflict \"\n+\t\t   \"with %qs attribute\", name, \"target_clones\");\n+\t  *no_add_attrs = true;\n+\t}\n       else\n \t/* Set the attribute and mark it for disregarding inline\n \t   limits.  */\n@@ -9818,13 +9827,52 @@ handle_target_attribute (tree *node, tree name, tree args, int flags,\n       warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n+  else if (lookup_attribute (\"target_clones\", DECL_ATTRIBUTES (*node)))\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute ignored due to conflict \"\n+\t\t   \"with %qs attribute\", name, \"target_clones\");\n+      *no_add_attrs = true;\n+    }\n   else if (! targetm.target_option.valid_attribute_p (*node, name, args,\n \t\t\t\t\t\t      flags))\n     *no_add_attrs = true;\n \n   return NULL_TREE;\n }\n \n+/* Handle a \"target_clones\" attribute.  */\n+\n+static tree\n+handle_target_clones_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n+\t\t\t  int ARG_UNUSED (flags), bool *no_add_attrs)\n+{\n+  /* Ensure we have a function type.  */\n+  if (TREE_CODE (*node) == FUNCTION_DECL)\n+    {\n+      if (lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (*node)))\n+\t{\n+\t  warning (OPT_Wattributes, \"%qE attribute ignored due to conflict \"\n+\t\t   \"with %qs attribute\", name, \"always_inline\");\n+\t  *no_add_attrs = true;\n+\t}\n+      else if (lookup_attribute (\"target\", DECL_ATTRIBUTES (*node)))\n+\t{\n+\t  warning (OPT_Wattributes, \"%qE attribute ignored due to conflict \"\n+\t\t   \"with %qs attribute\", name, \"target\");\n+\t  *no_add_attrs = true;\n+\t}\n+      else\n+      /* Do not inline functions with multiple clone targets.  */\n+\tDECL_UNINLINABLE (*node) = 1;\n+    }\n+  else\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+      *no_add_attrs = true;\n+    }\n+  return NULL_TREE;\n+}\n+\n /* Arguments being collected for optimization.  */\n typedef const char *const_char_p;\t\t/* For DEF_VEC_P.  */\n static GTY(()) vec<const_char_p, va_gc> *optimize_args;"}, {"sha": "66024e2d74a6d3cf524783467477efea3b84d991", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3b1661a9b93fe8000faa6ab4b721a96ffb48d525", "patch": "@@ -36515,24 +36515,6 @@ ix86_get_function_versions_dispatcher (void *decl)\n   return dispatch_decl;\n }\n \n-/* Makes a function attribute of the form NAME(ARG_NAME) and chains\n-   it to CHAIN.  */\n-\n-static tree\n-make_attribute (const char *name, const char *arg_name, tree chain)\n-{\n-  tree attr_name;\n-  tree attr_arg_name;\n-  tree attr_args;\n-  tree attr;\n-\n-  attr_name = get_identifier (name);\n-  attr_arg_name = build_string (strlen (arg_name), arg_name);\n-  attr_args = tree_cons (NULL_TREE, attr_arg_name, NULL_TREE);\n-  attr = tree_cons (attr_name, attr_args, chain);\n-  return attr;\n-}\n-\n /* Make the resolver function decl to dispatch the versions of\n    a multi-versioned function,  DEFAULT_DECL.  Create an\n    empty basic block in the resolver and store the pointer in"}, {"sha": "26afc00c5707f38535766006c76b29ad82744ee9", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=3b1661a9b93fe8000faa6ab4b721a96ffb48d525", "patch": "@@ -3087,6 +3087,19 @@ This function attribute make a stack protection of the function if\n flags @option{fstack-protector} or @option{fstack-protector-strong}\n or @option{fstack-protector-explicit} are set.\n \n+@item target_clones (@var{options})\n+@cindex @code{target_clones} function attribute\n+The @code{target_clones} attribute is used to specify that a function is to\n+be cloned into multiple versions compiled with different target options\n+than specified on the command line.  The supported options and restrictions\n+are the same as for @code{target} attribute.\n+\n+For instance on an x86, you could compile a function with\n+@code{target_clones(\"sse4.1,avx\")}. It will create 2 function clones,\n+one compiled with @option{-msse4.1} and another with @option{-mavx}.\n+At the function call it will create resolver @code{ifunc}, that will\n+dynamically call a clone suitable for current architecture.\n+\n @item target (@var{options})\n @cindex @code{target} function attribute\n Multiple target back ends implement the @code{target} attribute"}, {"sha": "54618d8ed86abea6f25155e8a6ce8f13626f2e9c", "filename": "gcc/multiple_target.c", "status": "added", "additions": 437, "deletions": 0, "changes": 437, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Fmultiple_target.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Fmultiple_target.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmultiple_target.c?ref=3b1661a9b93fe8000faa6ab4b721a96ffb48d525", "patch": "@@ -0,0 +1,437 @@\n+/* Pass for parsing functions with multiple target attributes.\n+\n+   Contributed by Evgeny Stupachenko <evstupac@gmail.com>\n+\n+   Copyright (C) 2015 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"backend.h\"\n+#include \"tree.h\"\n+#include \"stringpool.h\"\n+#include \"gimple.h\"\n+#include \"diagnostic-core.h\"\n+#include \"gimple-ssa.h\"\n+#include \"cgraph.h\"\n+#include \"tree-pass.h\"\n+#include \"target.h\"\n+#include \"attribs.h\"\n+#include \"pretty-print.h\"\n+\n+/* If the call in NODE has multiple target attribute with multiple fields,\n+   replace it with dispatcher call and create dispatcher (once).  */\n+\n+static void\n+create_dispatcher_calls (struct cgraph_node *node)\n+{\n+  cgraph_edge *e;\n+  cgraph_edge *e_next;\n+\n+  /* We need to remember NEXT_CALLER as it could be modified in the loop.  */\n+  for (e = node->callers; e ;e = (e == NULL) ? e_next : e->next_caller)\n+    {\n+      tree resolver_decl;\n+      tree idecl;\n+      tree decl;\n+      gimple *call = e->call_stmt;\n+      struct cgraph_node *inode;\n+\n+      /* Checking if call of function is call of versioned function.\n+\t Versioned function are not inlined, so there is no need to\n+\t check for inline.  */\n+      if (!call\n+\t  || !(decl = gimple_call_fndecl (call))\n+\t  || !DECL_FUNCTION_VERSIONED (decl))\n+\tcontinue;\n+\n+      e_next = e->next_caller;\n+      idecl = targetm.get_function_versions_dispatcher (decl);\n+      if (!idecl)\n+\t{\n+\t  error_at (gimple_location (call),\n+\t\t    \"default target_clones attribute was not set\");\n+\t}\n+      inode = cgraph_node::get (idecl);\n+      gcc_assert (inode);\n+      resolver_decl = targetm.generate_version_dispatcher_body (inode);\n+\n+      /* Update aliases.  */\n+      inode->alias = true;\n+      inode->alias_target = resolver_decl;\n+      if (!inode->analyzed)\n+\tinode->resolve_alias (cgraph_node::get (resolver_decl));\n+\n+      e->redirect_callee (inode);\n+      /*  Since REDIRECT_CALLEE modifies NEXT_CALLER field we move to\n+\t  previously set NEXT_CALLER.  */\n+      e = NULL;\n+    }\n+}\n+\n+/* Return length of attribute names string,\n+   if arglist chain > 1, -1 otherwise.  */\n+\n+static int\n+get_attr_len (tree arglist)\n+{\n+  tree arg;\n+  int str_len_sum = 0;\n+  int argnum = 1;\n+\n+  for (arg = arglist; arg; arg = TREE_CHAIN (arg))\n+    {\n+      unsigned int i;\n+      const char *str = TREE_STRING_POINTER (TREE_VALUE (arg));\n+      int len = strlen (str);\n+\n+      str_len_sum += len + 1;\n+      if (arg != arglist)\n+\targnum++;\n+      for (i = 0; i < strlen (str); i++)\n+\tif (str[i] == ',')\n+\t  argnum++;\n+    }\n+  if (argnum == 1)\n+    return -1;\n+  return str_len_sum;\n+}\n+\n+/* Create string with attributes separated by comma.\n+   Return number of attributes.  */\n+\n+static int\n+get_attr_str (tree arglist, char *attr_str)\n+{\n+  tree arg;\n+  size_t str_len_sum = 0;\n+  int argnum = 0;\n+\n+  for (arg = arglist; arg; arg = TREE_CHAIN (arg))\n+    {\n+      const char *str = TREE_STRING_POINTER (TREE_VALUE (arg));\n+\n+      size_t len = strlen (str);\n+      memcpy (attr_str + str_len_sum, str, len);\n+      attr_str[str_len_sum + len] = TREE_CHAIN (arg) ? ',' : '\\0';\n+      str_len_sum += len + 1;\n+      argnum++;\n+    }\n+  return argnum;\n+}\n+\n+/* Return number of attributes separated by comma and put them into ARGS.\n+   If there is no DEFAULT attribute return -1.  */\n+\n+static int\n+separate_attrs (char *attr_str, char **attrs)\n+{\n+  int i = 0;\n+  bool has_default = false;\n+  char *attr = strtok (attr_str, \",\");\n+\n+  while (attr != NULL)\n+    {\n+      if (strcmp (attr, \"default\") == 0)\n+\t{\n+\t  has_default = true;\n+\t  attr = strtok (NULL, \",\");\n+\t  continue;\n+\t}\n+      attrs[i] = attr;\n+      attr = strtok (NULL, \",\");\n+      i++;\n+    }\n+  if (!has_default)\n+    return -1;\n+  return i;\n+}\n+\n+/*  Return true if symbol is valid in assembler name.  */\n+\n+static bool\n+is_valid_asm_symbol (char c)\n+{\n+  if ('a' <= c && c <= 'z')\n+    return true;\n+  if ('A' <= c && c <= 'Z')\n+    return true;\n+  if ('0' <= c && c <= '9')\n+    return true;\n+  if (c == '_')\n+    return true;\n+  return false;\n+}\n+\n+/*  Replace all not valid assembler symbols with '_'.  */\n+\n+static void\n+create_new_asm_name (char *old_asm_name, char *new_asm_name)\n+{\n+  int i;\n+  int old_name_len = strlen (old_asm_name);\n+\n+  /* Replace all not valid assembler symbols with '_'.  */\n+  for (i = 0; i < old_name_len; i++)\n+    if (!is_valid_asm_symbol (old_asm_name[i]))\n+      new_asm_name[i] = '_';\n+    else\n+      new_asm_name[i] = old_asm_name[i];\n+  new_asm_name[old_name_len] = '\\0';\n+}\n+\n+/*  Creates target clone of NODE.  */\n+\n+static cgraph_node *\n+create_target_clone (cgraph_node *node, bool definition, char *name)\n+{\n+  cgraph_node *new_node;\n+\n+  if (definition)\n+    {\n+      new_node = node->create_version_clone_with_body (vNULL, NULL,\n+    \t\t\t\t\t\t       NULL, false,\n+\t\t\t\t\t\t       NULL, NULL,\n+\t\t\t\t\t\t       name);\n+      new_node->force_output = true;\n+    }\n+  else\n+    {\n+      tree new_decl = copy_node (node->decl);\n+      new_node = cgraph_node::get_create (new_decl);\n+    }\n+  return new_node;\n+}\n+\n+/* If the function in NODE has multiple target attributes\n+   create the appropriate clone for each valid target attribute.  */\n+\n+static bool\n+expand_target_clones (struct cgraph_node *node, bool defenition)\n+{\n+  int i;\n+  /* Parsing target attributes separated by comma.  */\n+  tree attr_target = lookup_attribute (\"target_clones\",\n+\t\t\t\t       DECL_ATTRIBUTES (node->decl));\n+  /* No targets specified.  */\n+  if (!attr_target)\n+    return false;\n+\n+  tree arglist = TREE_VALUE (attr_target);\n+  int attr_len = get_attr_len (arglist);\n+\n+  /* No need to clone for 1 target attribute.  */\n+  if (attr_len == -1)\n+    {\n+      warning_at (DECL_SOURCE_LOCATION (node->decl),\n+\t\t  0,\n+\t\t  \"single target_clones attribute is ignored\");\n+      return false;\n+    }\n+\n+  char *attr_str = XNEWVEC (char, attr_len);\n+  int attrnum = get_attr_str (arglist, attr_str);\n+  char **attrs = XNEWVEC (char *, attrnum);\n+\n+  attrnum = separate_attrs (attr_str, attrs);\n+  if (attrnum == -1)\n+    {\n+      error_at (DECL_SOURCE_LOCATION (node->decl),\n+\t\t\"default target was not set\");\n+      return false;\n+    }\n+\n+  cgraph_function_version_info *decl1_v = NULL;\n+  cgraph_function_version_info *decl2_v = NULL;\n+  cgraph_function_version_info *before = NULL;\n+  cgraph_function_version_info *after = NULL;\n+  decl1_v = node->function_version ();\n+  if (decl1_v == NULL)\n+    decl1_v = node->insert_new_function_version ();\n+  before = decl1_v;\n+  DECL_FUNCTION_VERSIONED (node->decl) = 1;\n+\n+  for (i = 0; i < attrnum; i++)\n+    {\n+      char *attr = attrs[i];\n+      char *suffix = XNEWVEC (char, strlen (attr) + 1);\n+\n+      create_new_asm_name (attr, suffix);\n+      /* Create new target clone.  */\n+      cgraph_node *new_node = create_target_clone (node, defenition, suffix);\n+      XDELETEVEC (suffix);\n+\n+      /* Set new attribute for the clone.  */\n+      tree attributes = make_attribute (\"target\", attr,\n+\t\t\t\t\tDECL_ATTRIBUTES (new_node->decl));\n+      DECL_ATTRIBUTES (new_node->decl) = attributes;\n+      if (!targetm.target_option.valid_attribute_p (new_node->decl, NULL,\n+\t\t\t\t\t\t    TREE_VALUE (attributes), 0))\n+\t{\n+\t  warning_at (DECL_SOURCE_LOCATION (node->decl), 0,\n+\t\t      \"attribute(target_clones(\\\"%s\\\")) is not \"\n+\t\t      \"valid for current target\", attr);\n+\t  continue;\n+\t}\n+\n+      decl2_v = new_node->function_version ();\n+      if (decl2_v != NULL)\n+        continue;\n+      decl2_v = new_node->insert_new_function_version ();\n+\n+      /* Chain decl2_v and decl1_v.  All semantically identical versions\n+\t will be chained together.  */\n+      after = decl2_v;\n+      while (before->next != NULL)\n+\tbefore = before->next;\n+      while (after->prev != NULL)\n+\tafter = after->prev;\n+\n+      before->next = after;\n+      after->prev = before;\n+      DECL_FUNCTION_VERSIONED (new_node->decl) = 1;\n+    }\n+\n+  /* Setting new attribute to initial function.  */\n+  tree attributes =  make_attribute (\"target\", \"default\",\n+\t\t\t\t     DECL_ATTRIBUTES (node->decl));\n+  DECL_ATTRIBUTES (node->decl) = attributes;\n+  if (!targetm.target_option.valid_attribute_p (node->decl, NULL,\n+\t\t\t\t\t\tTREE_VALUE (attributes), 0))\n+    {\n+      error_at (DECL_SOURCE_LOCATION (node->decl),\n+\t\t\"attribute(target_clones(\\\"default\\\")) is not \"\n+\t\t\"valid for current target\");\n+      return false;\n+    }\n+\n+  XDELETEVEC (attrs);\n+  XDELETEVEC (attr_str);\n+  return true;\n+}\n+\n+static bool target_clone_pass;\n+\n+static unsigned int\n+ipa_target_clone (void)\n+{\n+  struct cgraph_node *node;\n+\n+  target_clone_pass = false;\n+  FOR_EACH_FUNCTION (node)\n+    if (node->definition)\n+      target_clone_pass |= expand_target_clones (node, true);\n+  return 0;\n+}\n+\n+namespace {\n+\n+const pass_data pass_data_target_clone =\n+{\n+  SIMPLE_IPA_PASS,\t\t/* type */\n+  \"targetclone\",\t\t/* name */\n+  OPTGROUP_NONE,\t\t/* optinfo_flags */\n+  TV_NONE,\t\t\t/* tv_id */\n+  ( PROP_ssa | PROP_cfg ),\t/* properties_required */\n+  0,\t\t\t\t/* properties_provided */\n+  0,\t\t\t\t/* properties_destroyed */\n+  0,\t\t\t\t/* todo_flags_start */\n+  0\t\t\t\t/* todo_flags_finish */\n+};\n+\n+class pass_target_clone : public simple_ipa_opt_pass\n+{\n+public:\n+  pass_target_clone (gcc::context *ctxt)\n+    : simple_ipa_opt_pass (pass_data_target_clone, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  virtual bool gate (function *);\n+  virtual unsigned int execute (function *) { return ipa_target_clone (); }\n+};\n+\n+bool\n+pass_target_clone::gate (function *)\n+{\n+  return true;\n+}\n+\n+} // anon namespace\n+\n+simple_ipa_opt_pass *\n+make_pass_target_clone (gcc::context *ctxt)\n+{\n+  return new pass_target_clone (ctxt);\n+}\n+\n+static unsigned int\n+ipa_dispatcher_calls (void)\n+{\n+  struct cgraph_node *node;\n+\n+  FOR_EACH_FUNCTION (node)\n+    if (!node->definition)\n+      target_clone_pass |= expand_target_clones (node, false);\n+  if (target_clone_pass)\n+    FOR_EACH_FUNCTION (node)\n+      create_dispatcher_calls (node);\n+  return 0;\n+}\n+\n+namespace {\n+\n+const pass_data pass_data_dispatcher_calls =\n+{\n+  SIMPLE_IPA_PASS,\t\t/* type */\n+  \"dispachercalls\",\t\t/* name */\n+  OPTGROUP_NONE,\t\t/* optinfo_flags */\n+  TV_NONE,\t\t\t/* tv_id */\n+  ( PROP_ssa | PROP_cfg ),\t/* properties_required */\n+  0,\t\t\t\t/* properties_provided */\n+  0,\t\t\t\t/* properties_destroyed */\n+  0,\t\t\t\t/* todo_flags_start */\n+  0\t\t\t\t/* todo_flags_finish */\n+};\n+\n+class pass_dispatcher_calls : public simple_ipa_opt_pass\n+{\n+public:\n+  pass_dispatcher_calls (gcc::context *ctxt)\n+    : simple_ipa_opt_pass (pass_data_dispatcher_calls, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  virtual bool gate (function *);\n+  virtual unsigned int execute (function *) { return ipa_dispatcher_calls (); }\n+};\n+\n+bool\n+pass_dispatcher_calls::gate (function *)\n+{\n+  return true;\n+}\n+\n+} // anon namespace\n+\n+simple_ipa_opt_pass *\n+make_pass_dispatcher_calls (gcc::context *ctxt)\n+{\n+  return new pass_dispatcher_calls (ctxt);\n+}"}, {"sha": "c0ab6b98e4b1a18ae97629e45d0003b12fe80e89", "filename": "gcc/passes.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=3b1661a9b93fe8000faa6ab4b721a96ffb48d525", "patch": "@@ -124,6 +124,7 @@ along with GCC; see the file COPYING3.  If not see\n   NEXT_PASS (pass_ipa_devirt);\n   NEXT_PASS (pass_ipa_cp);\n   NEXT_PASS (pass_ipa_cdtor_merge);\n+  NEXT_PASS (pass_target_clone);\n   NEXT_PASS (pass_ipa_inline);\n   NEXT_PASS (pass_ipa_pure_const);\n   NEXT_PASS (pass_ipa_reference);\n@@ -140,6 +141,7 @@ along with GCC; see the file COPYING3.  If not see\n      compiled unit.  */\n   INSERT_PASSES_AFTER (all_late_ipa_passes)\n   NEXT_PASS (pass_ipa_pta);\n+  NEXT_PASS (pass_dispatcher_calls);\n   NEXT_PASS (pass_omp_simd_clone);\n   TERMINATE_PASS_LIST ()\n "}, {"sha": "32c6a9047706779c71506163537c05c49771dedd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3b1661a9b93fe8000faa6ab4b721a96ffb48d525", "patch": "@@ -1,3 +1,17 @@\n+2015-10-30  Evgeny Stupachenko  <evstupac@gmail.com>\n+\n+\t* gcc.dg/mvc1.c: New test for multiple targets cloning.\n+\t* gcc.dg/mvc2.c: Ditto.\n+\t* gcc.dg/mvc3.c: Ditto.\n+\t* gcc.dg/mvc4.c: Ditto.\n+\t* gcc.dg/mvc5.c: Ditto.\n+\t* gcc.dg/mvc6.c: Ditto.\n+\t* gcc.dg/mvc7.c: Ditto.\n+\t* g++.dg/ext/mvc1.C: Ditto.\n+\t* g++.dg/ext/mvc2.C: Ditto.\n+\t* g++.dg/ext/mvc3.C: Ditto.\n+\t* g++.dg/ext/mvc4.C: Ditto.\n+\n 2015-10-15  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/51993"}, {"sha": "fbf90116694a05be75f41bd0fb30c006a63a824f", "filename": "gcc/testsuite/g++.dg/ext/mvc1.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmvc1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmvc1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmvc1.C?ref=3b1661a9b93fe8000faa6ab4b721a96ffb48d525", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+\n+__attribute__((target_clones(\"avx\",\"arch=slm\",\"arch=core-avx2\",\"default\")))\n+int\n+foo ()\n+{\n+  return -2;\n+}\n+\n+__attribute__((target(\"avx\",\"arch=core-avx2\")))\n+int\n+bar ()\n+{\n+  return 2;\n+}\n+\n+__attribute__((target(\"default\")))\n+int\n+bar ()\n+{\n+  return 2;\n+}\n+\n+int\n+main ()\n+{\n+  int r = 0;\n+  r += bar ();\n+  r += foo ();\n+  r += bar ();\n+  r += foo ();\n+  r += bar ();\n+  return r - 2;\n+}"}, {"sha": "e7abab81d955048d1b1cbd2181b433c43f8494ec", "filename": "gcc/testsuite/g++.dg/ext/mvc2.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmvc2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmvc2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmvc2.C?ref=3b1661a9b93fe8000faa6ab4b721a96ffb48d525", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+\n+__attribute__((target_clones(\"avx\",\"arch=slm\",\"default\")))\n+__attribute__((target(\"avx\")))\n+int foo (); /* { dg-warning \"'target' attribute ignored due to conflict with 'target_clones' attribute\" } */\n+\n+__attribute__((target_clones(\"avx\",\"arch=slm\",\"default\"),always_inline))\n+int bar (); /* { dg-warning \"'always_inline' attribute ignored due to conflict with 'target_clones' attribute\" } */"}, {"sha": "05bebf7d4fba37c018555c6a60123702902663f0", "filename": "gcc/testsuite/g++.dg/ext/mvc3.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmvc3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmvc3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmvc3.C?ref=3b1661a9b93fe8000faa6ab4b721a96ffb48d525", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+\n+__attribute__((target(\"avx\")))\n+__attribute__((target_clones(\"avx\",\"arch=slm\",\"default\")))\n+int foo (); /* { dg-warning \"'target_clones' attribute ignored due to conflict with 'target' attribute\" } */\n+\n+__attribute__((always_inline,target_clones(\"avx\",\"arch=slm\",\"default\")))\n+int bar (); /* { dg-warning \"'target_clones' attribute ignored due to conflict with 'always_inline' attribute\" } */"}, {"sha": "98e350259d7c11d56a5eb3ac110f53dbba335230", "filename": "gcc/testsuite/g++.dg/ext/mvc4.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmvc4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmvc4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmvc4.C?ref=3b1661a9b93fe8000faa6ab4b721a96ffb48d525", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-mavx\" } */\n+\n+#include <immintrin.h>\n+\n+__m256 x, y, z;\n+\n+__attribute__((target(\"avx\")))\n+int bar()\n+{\n+  x = _mm256_add_ps (y, z);\n+  return 1;\n+}\n+\n+__attribute__((target(\"default\")))\n+int bar()\n+{\n+  return 2;\n+}\n+\n+int\n+foobar()\n+{\n+  if (__builtin_cpu_supports (\"avx\"))\n+    return bar();\n+  else\n+    return 0;\n+}\n+\n+__attribute__((target_clones(\"default\",\"sse3\")))\n+int foo()\n+{\n+  return foobar();\n+}"}, {"sha": "8e02721c91e863ef34ead528a45a8a8eaf06c649", "filename": "gcc/testsuite/gcc.dg/mvc1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Ftestsuite%2Fgcc.dg%2Fmvc1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Ftestsuite%2Fgcc.dg%2Fmvc1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmvc1.c?ref=3b1661a9b93fe8000faa6ab4b721a96ffb48d525", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+\n+__attribute__((target_clones(\"avx\",\"arch=slm\",\"arch=core-avx2\",\"default\")))\n+int\n+foo ()\n+{\n+  return -2;\n+}\n+\n+int\n+bar ()\n+{\n+  return 2;\n+}\n+\n+int\n+main ()\n+{\n+  int r = 0;\n+  r += bar ();\n+  r += foo ();\n+  r += bar ();\n+  r += foo ();\n+  r += bar ();\n+  return r - 2;\n+}"}, {"sha": "af0c6f777a01270e3cd4bceb2501d1d41ace372b", "filename": "gcc/testsuite/gcc.dg/mvc2.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Ftestsuite%2Fgcc.dg%2Fmvc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Ftestsuite%2Fgcc.dg%2Fmvc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmvc2.c?ref=3b1661a9b93fe8000faa6ab4b721a96ffb48d525", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+\n+__attribute__((target_clones(\"avx\",\"arch=slm\",\"arch=core-avx2\")))\n+int foo ();"}, {"sha": "3af3e35b4ec584591a122b7a627b462db68dee86", "filename": "gcc/testsuite/gcc.dg/mvc3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Ftestsuite%2Fgcc.dg%2Fmvc3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Ftestsuite%2Fgcc.dg%2Fmvc3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmvc3.c?ref=3b1661a9b93fe8000faa6ab4b721a96ffb48d525", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+\n+__attribute__((target_clones(\"avx\",\"arch=slm\",\"arch=core-avx2\")))\n+int foo (); /* { dg-error \"default target was not set\" } */\n+\n+int\n+bar ()\n+{\n+  return foo();\n+}"}, {"sha": "48ec9a163ee5287fceb343ea769ea96671cbcf51", "filename": "gcc/testsuite/gcc.dg/mvc4.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Ftestsuite%2Fgcc.dg%2Fmvc4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Ftestsuite%2Fgcc.dg%2Fmvc4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmvc4.c?ref=3b1661a9b93fe8000faa6ab4b721a96ffb48d525", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+\n+__attribute__((target_clones(\"default\",\"avx\",\"default\")))\n+int\n+foo ()\n+{\n+  return -2;\n+}\n+\n+int\n+bar ()\n+{\n+  return 2;\n+}\n+\n+int\n+main ()\n+{\n+  int r = 0;\n+  r += bar ();\n+  r += foo ();\n+  r += bar ();\n+  r += foo ();\n+  r += bar ();\n+  return r - 2;\n+}"}, {"sha": "89001e571ae4861e61d49f958d82838abdeda230", "filename": "gcc/testsuite/gcc.dg/mvc5.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Ftestsuite%2Fgcc.dg%2Fmvc5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Ftestsuite%2Fgcc.dg%2Fmvc5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmvc5.c?ref=3b1661a9b93fe8000faa6ab4b721a96ffb48d525", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-fno-inline\" } */\n+/* { dg-final { scan-assembler-times \"foo.ifunc\" 6 } } */\n+\n+__attribute__((target_clones(\"default\",\"avx\",\"avx2\")))\n+int\n+foo ()\n+{\n+  return 10;\n+}\n+\n+__attribute__((target_clones(\"default\",\"avx\",\"avx2\")))\n+int\n+bar ()\n+{\n+  return -foo ();\n+}"}, {"sha": "16219851398551cf530872377d63601240541132", "filename": "gcc/testsuite/gcc.dg/mvc6.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Ftestsuite%2Fgcc.dg%2Fmvc6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Ftestsuite%2Fgcc.dg%2Fmvc6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmvc6.c?ref=3b1661a9b93fe8000faa6ab4b721a96ffb48d525", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O3\" } */\n+/* { dg-final { scan-assembler \"vpshufb\" } } */\n+/* { dg-final { scan-assembler \"punpcklbw\" } } */\n+\n+__attribute__((target_clones(\"arch=core-avx2\",\"arch=slm\",\"default\")))\n+void\n+foo(char *in, char *out, int size)\n+{\n+  int i;\n+  for(i = 0; i < size; i++)\n+    {\n+\tout[2 * i] = in[i];\n+\tout[2 * i + 1] = in[i];\n+    }\n+}"}, {"sha": "d61d78e4036b380d09519d705385ed0e1e2b1a76", "filename": "gcc/testsuite/gcc.dg/mvc7.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Ftestsuite%2Fgcc.dg%2Fmvc7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Ftestsuite%2Fgcc.dg%2Fmvc7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmvc7.c?ref=3b1661a9b93fe8000faa6ab4b721a96ffb48d525", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-final { scan-assembler-times \"foo.ifunc\" 4 } } */\n+\n+__attribute__((target_clones(\"avx\",\"default\",\"arch=slm\",\"arch=core-avx2\")))\n+int foo ();\n+\n+int main()\n+{\n+  return foo();\n+}"}, {"sha": "ba53ccaabcd41f6fcb8e74cf4d7b604cc66ebb24", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b1661a9b93fe8000faa6ab4b721a96ffb48d525/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=3b1661a9b93fe8000faa6ab4b721a96ffb48d525", "patch": "@@ -487,6 +487,8 @@ extern ipa_opt_pass_d *make_pass_ipa_reference (gcc::context *ctxt);\n extern ipa_opt_pass_d *make_pass_ipa_pure_const (gcc::context *ctxt);\n extern simple_ipa_opt_pass *make_pass_ipa_pta (gcc::context *ctxt);\n extern simple_ipa_opt_pass *make_pass_ipa_tm (gcc::context *ctxt);\n+extern simple_ipa_opt_pass *make_pass_target_clone (gcc::context *ctxt);\n+extern simple_ipa_opt_pass *make_pass_dispatcher_calls (gcc::context *ctxt);\n extern simple_ipa_opt_pass *make_pass_omp_simd_clone (gcc::context *ctxt);\n extern ipa_opt_pass_d *make_pass_ipa_profile (gcc::context *ctxt);\n extern ipa_opt_pass_d *make_pass_ipa_cdtor_merge (gcc::context *ctxt);"}]}