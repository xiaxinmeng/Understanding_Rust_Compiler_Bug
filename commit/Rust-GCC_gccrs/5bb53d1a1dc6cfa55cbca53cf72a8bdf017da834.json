{"sha": "5bb53d1a1dc6cfa55cbca53cf72a8bdf017da834", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJiNTNkMWExZGM2Y2ZhNTVjYmNhNTNjZjcyYThiZGYwMTdkYTgzNA==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2012-05-14T15:47:52Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-05-14T15:47:52Z"}, "message": "re PR target/53344 (Dont' emit an assembler warning when assembling 3-byte symbols)\n\n\tPR target/53344\n\t* config/avr/avr.c (avr_const_address_lo16): Remove.\n\t(avr_assemble_integer):  Print \".byte lo8(x)\",\n\t\".byte hi8(x)\", \".byte hh8(x)\" instead of emit an assembler\n\t.warning if 3-byte address is assembled. \n\t* doc/extend.texi (AVR Named Address Spaces): Document that\n\tbinutils 2.23 is needed to assemble 3-byte addresses.\n\nFrom-SVN: r187470", "tree": {"sha": "dba3368294d8e75054d91571daa64b9c209138fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dba3368294d8e75054d91571daa64b9c209138fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bb53d1a1dc6cfa55cbca53cf72a8bdf017da834", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bb53d1a1dc6cfa55cbca53cf72a8bdf017da834", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bb53d1a1dc6cfa55cbca53cf72a8bdf017da834", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bb53d1a1dc6cfa55cbca53cf72a8bdf017da834/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ba840107af2f446cc76dcfc1496eb1932c6351d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ba840107af2f446cc76dcfc1496eb1932c6351d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ba840107af2f446cc76dcfc1496eb1932c6351d"}], "stats": {"total": 87, "additions": 29, "deletions": 58}, "files": [{"sha": "840dd2214611c5169972aafdd648113a4d65299e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bb53d1a1dc6cfa55cbca53cf72a8bdf017da834/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bb53d1a1dc6cfa55cbca53cf72a8bdf017da834/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5bb53d1a1dc6cfa55cbca53cf72a8bdf017da834", "patch": "@@ -1,3 +1,13 @@\n+2012-05-14  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/53344\n+\t* config/avr/avr.c (avr_const_address_lo16): Remove.\n+\t(avr_assemble_integer):  Print \".byte lo8(x)\",\n+\t\".byte hi8(x)\", \".byte hh8(x)\" instead of emit an assembler\n+\t.warning if 3-byte address is assembled. \n+\t* doc/extend.texi (AVR Named Address Spaces): Document that\n+\tbinutils 2.23 is needed to assemble 3-byte addresses.\n+\n 2012-05-14  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-vect-data-refs.c (vect_setup_realignment): Remove"}, {"sha": "38afc7abf93bd18a2103455ac7eab359e5d15d72", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 10, "deletions": 50, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bb53d1a1dc6cfa55cbca53cf72a8bdf017da834/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bb53d1a1dc6cfa55cbca53cf72a8bdf017da834/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=5bb53d1a1dc6cfa55cbca53cf72a8bdf017da834", "patch": "@@ -6639,56 +6639,14 @@ _reg_unused_after (rtx insn, rtx reg)\n }\n \n \n-/* Return RTX that represents the lower 16 bits of a constant address.\n-   Unfortunately, simplify_gen_subreg does not handle this case.  */\n-\n-static rtx\n-avr_const_address_lo16 (rtx x)\n-{\n-  rtx lo16;\n-  \n-  switch (GET_CODE (x))\n-    {\n-    default:\n-      break;\n-      \n-    case CONST:\n-      if (PLUS == GET_CODE (XEXP (x, 0))\n-          && SYMBOL_REF == GET_CODE (XEXP (XEXP (x, 0), 0))\n-          && CONST_INT_P (XEXP (XEXP (x, 0), 1)))\n-        {\n-          HOST_WIDE_INT offset = INTVAL (XEXP (XEXP (x, 0), 1));\n-          const char *name = XSTR (XEXP (XEXP (x, 0), 0), 0);\n-          \n-          lo16 = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (name));\n-          lo16 = gen_rtx_CONST (Pmode, plus_constant (Pmode, lo16, offset));\n-          \n-          return lo16;\n-        }\n-      \n-      break;\n-      \n-    case SYMBOL_REF:\n-      {\n-        const char *name = XSTR (x, 0);\n-        \n-        return gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (name));\n-      }\n-    }\n-  \n-  avr_edump (\"\\n%?: %r\\n\", x);\n-  gcc_unreachable();\n-}\n-\n-\n /* Target hook for assembling integer objects.  The AVR version needs\n    special handling for references to certain labels.  */\n \n static bool\n avr_assemble_integer (rtx x, unsigned int size, int aligned_p)\n {\n   if (size == POINTER_SIZE / BITS_PER_UNIT && aligned_p\n-      && text_segment_operand (x, VOIDmode) )\n+      && text_segment_operand (x, VOIDmode))\n     {\n       fputs (\"\\t.word\\tgs(\", asm_out_file);\n       output_addr_const (asm_out_file, x);\n@@ -6698,17 +6656,19 @@ avr_assemble_integer (rtx x, unsigned int size, int aligned_p)\n     }\n   else if (GET_MODE (x) == PSImode)\n     {\n-      default_assemble_integer (avr_const_address_lo16 (x),\n-                                GET_MODE_SIZE (HImode), aligned_p);\n+      /* This needs binutils 2.23+, see PR binutils/13503  */\n+\n+      fputs (\"\\t.byte\\tlo8(\", asm_out_file);\n+      output_addr_const (asm_out_file, x);\n+      fputs (\")\" ASM_COMMENT_START \"need binutils PR13503\\n\", asm_out_file);\n       \n-      fputs (\"\\t.warning\\t\\\"assembling 24-bit address needs binutils\"\n-             \" extension for hh8(\", asm_out_file);\n+      fputs (\"\\t.byte\\thi8(\", asm_out_file);\n       output_addr_const (asm_out_file, x);\n-      fputs (\")\\\"\\n\", asm_out_file);\n+      fputs (\")\" ASM_COMMENT_START \"need binutils PR13503\\n\", asm_out_file);\n       \n-      fputs (\"\\t.byte\\t0\\t\" ASM_COMMENT_START \" hh8(\", asm_out_file);\n+      fputs (\"\\t.byte\\thh8(\", asm_out_file);\n       output_addr_const (asm_out_file, x);\n-      fputs (\")\\n\", asm_out_file);\n+      fputs (\")\" ASM_COMMENT_START \"need binutils PR13503\\n\", asm_out_file);\n       \n       return true;\n     }"}, {"sha": "d9efab921015af5822d9a8d000e2f0b5fcedca56", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bb53d1a1dc6cfa55cbca53cf72a8bdf017da834/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bb53d1a1dc6cfa55cbca53cf72a8bdf017da834/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=5bb53d1a1dc6cfa55cbca53cf72a8bdf017da834", "patch": "@@ -1273,6 +1273,7 @@ If the high bit of the address is set, data is read from\n RAM using the lower two bytes as RAM address.\n If the high bit of the address is clear, data is read from flash\n with @code{RAMPZ} set according to the high byte of the address.\n+@xref{AVR Built-in Functions,,@code{__builtin_avr_flash_segment}}.\n \n Objects in this address space will be located in @code{.progmem.data}.\n @end table\n@@ -1302,6 +1303,7 @@ int main (void)\n @}\n @end example\n \n+@noindent\n For each named address space supported by avr-gcc there is an equally\n named but uppercase built-in macro defined. \n The purpose is to facilitate testing if respective address space\n@@ -1327,14 +1329,16 @@ int read_var (void)\n #endif /* __FLASH */\n @end example\n \n-Notice that attribute @ref{AVR Variable Attributes,@code{progmem}}\n+@noindent\n+Notice that attribute @ref{AVR Variable Attributes,,@code{progmem}}\n locates data in flash but\n accesses to these data will read from generic address space, i.e.@:\n from RAM,\n so that you need special accessors like @code{pgm_read_byte}\n from @w{@uref{http://nongnu.org/avr-libc/user-manual,AVR-LibC}}\n together with attribute @code{progmem}.\n \n+@noindent\n @b{Limitations and caveats}\n \n @itemize\n@@ -1361,17 +1365,14 @@ must not optimize away known values or insert them\n as immediates into operands of instructions.\n \n @item\n-Code like the following is not yet supported because of missing\n-support in avr-binutils,\n-see @w{@uref{http://sourceware.org/PR13503,PR13503}}.\n+The following code initializes a variable @code{pfoo}\n+located in static storage with a 24-bit address:\n @example\n extern const __memx char foo;\n const __memx void *pfoo = &foo;\n @end example\n-The code will throw an assembler warning and the high byte of\n-@code{pfoo} will be initialized with@tie{}@code{0}, i.e.@: the\n-initialization will be as if @code{foo} was located in the first\n-64@tie{}KiB chunk of flash.\n+Such code requires at least binutils 2.23, see\n+@w{@uref{http://sourceware.org/PR13503,PR13503}}.\n \n @end itemize\n "}]}