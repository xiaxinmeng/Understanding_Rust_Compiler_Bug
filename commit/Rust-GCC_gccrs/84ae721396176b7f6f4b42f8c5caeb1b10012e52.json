{"sha": "84ae721396176b7f6f4b42f8c5caeb1b10012e52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRhZTcyMTM5NjE3NmI3ZjZmNGI0MmY4YzVjYWViMWIxMDAxMmU1Mg==", "commit": {"author": {"name": "Przemyslaw Wirkus", "email": "przemyslaw.wirkus@arm.com", "date": "2019-06-12T08:27:59Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2019-06-12T08:27:59Z"}, "message": "[arm] Implement usadv16qi and ssadv16qi standard names\n\n\nThis patch implements the usadv16qi and ssadv16qi standard names for arm.\n\nThe V16QImode variant is important as it is the most commonly used pattern:\nreducing vectors of bytes into an int.\nThe midend expects the optab to compute the absolute differences of operands 1\nand 2 and reduce them while widening along the way up to SImode. So the inputs\nare V16QImode and the output is V4SImode.\n\nI've based my solution on Aarch64 usadv16qi and ssadv16qi standard names\ncurrent implementation (r260437). This solution emits below sequence of\ninstructions:\n\n        VABDL.u8        tmp, op1, op2   # op1, op2 lowpart\n        VABAL.u8        tmp, op1, op2   # op1, op2 highpart\n        VPADAL.u16      op3, tmp\n\nSo, for the code:\n\n$ arm-none-linux-gnueabihf-gcc -S -O3 -march=armv8-a+simd -mfpu=auto -mfloat-abi=hard usadv16qi.c -dp\n\n#define N 1024\nunsigned char pix1[N];\nunsigned char pix2[N];\n\nint\nfoo (void)\n{\n  int i_sum = 0;\n  int i;\n  for (i = 0; i < N; i++)\n    i_sum += __builtin_abs (pix1[i] - pix2[i]);\n  return i_sum;\n}\n\nwe now generate on arm:\nfoo:\n        movw    r3, #:lower16:pix2      @ 57    [c=4 l=4]  *arm_movsi_vfp/3\n        movt    r3, #:upper16:pix2      @ 58    [c=4 l=4]  *arm_movt/0\n        vmov.i32        q9, #0  @ v4si  @ 3     [c=4 l=4]  *neon_movv4si/2\n        movw    r2, #:lower16:pix1      @ 59    [c=4 l=4]  *arm_movsi_vfp/3\n        movt    r2, #:upper16:pix1      @ 60    [c=4 l=4]  *arm_movt/0\n        add     r1, r3, #1024   @ 8     [c=4 l=4]  *arm_addsi3/4\n.L2:\n        vld1.8  {q11}, [r3]!    @ 11    [c=8 l=4]  *movmisalignv16qi_neon_load\n        vld1.8  {q10}, [r2]!    @ 10    [c=8 l=4]  *movmisalignv16qi_neon_load\n        cmp     r1, r3  @ 21    [c=4 l=4]  *arm_cmpsi_insn/2\n        vabdl.u8        q8, d20, d22    @ 12    [c=8 l=4]  neon_vabdluv8qi\n        vabal.u8        q8, d21, d23    @ 15    [c=88 l=4]  neon_vabaluv8qi\n        vpadal.u16      q9, q8  @ 16    [c=8 l=4]  neon_vpadaluv8hi\n        bne     .L2             @ 22    [c=16 l=4]  arm_cond_branch\n        vadd.i32        d18, d18, d19   @ 24    [c=120 l=4]  quad_halves_plusv4si\n        vpadd.i32       d18, d18, d18   @ 25    [c=8 l=4]  neon_vpadd_internalv2si\n        vmov.32 r0, d18[0]      @ 30    [c=12 l=4]  vec_extractv2sisi/1\n\ninstead of:\nfoo:\n        @ args = 0, pretend = 0, frame = 0\n        @ frame_needed = 0, uses_anonymous_args = 0\n        @ link register save eliminated.\n        movw    r3, #:lower16:pix1\n        movt    r3, #:upper16:pix1\n        vmov.i32        q9, #0  @ v4si\n        movw    r2, #:lower16:pix2\n        movt    r2, #:upper16:pix2\n        add     r1, r3, #1024\n.L2:\n        vld1.8  {q8}, [r3]!\n        vld1.8  {q11}, [r2]!\n        vmovl.u8 q10, d16\n        cmp     r1, r3\n        vmovl.u8 q8, d17\n        vmovl.u8 q12, d22\n        vmovl.u8 q11, d23\n        vsub.i16        q10, q10, q12\n        vsub.i16        q8, q8, q11\n        vabs.s16        q10, q10\n        vabs.s16        q8, q8\n        vaddw.s16       q9, q9, d20\n        vaddw.s16       q9, q9, d21\n        vaddw.s16       q9, q9, d16\n        vaddw.s16       q9, q9, d17\n        bne     .L2\n        vadd.i32        d18, d18, d19\n        vpadd.i32       d18, d18, d18\n        vmov.32 r0, d18[0]\n\n2019-06-12  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n\n        * config/arm/iterators.md (VABAL): New int iterator.\n        * config/arm/neon.md (<sup>sadv16qi): New define_expand.\n        * config/arm/unspecs.md (\"unspec\"): Define UNSPEC_VABAL_S, UNSPEC_VABAL_U\n        values.\n\n        * gcc.target/arm/ssadv16qi.c: New test.\n        * gcc.target/arm/usadv16qi.c: Likewise.\n\nFrom-SVN: r272180", "tree": {"sha": "7ad458ce9ae258f8f1613edb2f9ced98ef1f1644", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ad458ce9ae258f8f1613edb2f9ced98ef1f1644"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84ae721396176b7f6f4b42f8c5caeb1b10012e52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84ae721396176b7f6f4b42f8c5caeb1b10012e52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84ae721396176b7f6f4b42f8c5caeb1b10012e52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84ae721396176b7f6f4b42f8c5caeb1b10012e52/comments", "author": {"login": "PrzemekWirkus", "id": 6360720, "node_id": "MDQ6VXNlcjYzNjA3MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6360720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PrzemekWirkus", "html_url": "https://github.com/PrzemekWirkus", "followers_url": "https://api.github.com/users/PrzemekWirkus/followers", "following_url": "https://api.github.com/users/PrzemekWirkus/following{/other_user}", "gists_url": "https://api.github.com/users/PrzemekWirkus/gists{/gist_id}", "starred_url": "https://api.github.com/users/PrzemekWirkus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PrzemekWirkus/subscriptions", "organizations_url": "https://api.github.com/users/PrzemekWirkus/orgs", "repos_url": "https://api.github.com/users/PrzemekWirkus/repos", "events_url": "https://api.github.com/users/PrzemekWirkus/events{/privacy}", "received_events_url": "https://api.github.com/users/PrzemekWirkus/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d134323ba975f2f62178030c2eeaa2b83bd61117", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d134323ba975f2f62178030c2eeaa2b83bd61117", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d134323ba975f2f62178030c2eeaa2b83bd61117"}], "stats": {"total": 101, "additions": 101, "deletions": 0}, "files": [{"sha": "eb297484547add0bcbff427972dfbc95af775970", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ae721396176b7f6f4b42f8c5caeb1b10012e52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ae721396176b7f6f4b42f8c5caeb1b10012e52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=84ae721396176b7f6f4b42f8c5caeb1b10012e52", "patch": "@@ -1,3 +1,10 @@\n+2019-06-12  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n+\n+        * config/arm/iterators.md (VABAL): New int iterator.\n+        * config/arm/neon.md (<sup>sadv16qi): New define_expand.\n+        * config/arm/unspecs.md (\"unspec\"): Define UNSPEC_VABAL_S, UNSPEC_VABAL_U\n+        values.\n+\n 2019-06-12  Martin Liska  <mliska@suse.cz>\n \n \t* value-prof.c (stream_out_histogram_value): Only first value"}, {"sha": "2462b8c87ea7dbe60ba50d22b1e494bb4fe905c2", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ae721396176b7f6f4b42f8c5caeb1b10012e52/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ae721396176b7f6f4b42f8c5caeb1b10012e52/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=84ae721396176b7f6f4b42f8c5caeb1b10012e52", "patch": "@@ -341,6 +341,8 @@\n \n (define_int_iterator VSUBHN [UNSPEC_VSUBHN UNSPEC_VRSUBHN])\n \n+(define_int_iterator VABAL [UNSPEC_VABAL_S UNSPEC_VABAL_U])\n+\n (define_int_iterator VABD [UNSPEC_VABD_S UNSPEC_VABD_U])\n \n (define_int_iterator VABDL [UNSPEC_VABDL_S UNSPEC_VABDL_U])\n@@ -834,6 +836,7 @@\n   (UNSPEC_VSUBW_S \"s\") (UNSPEC_VSUBW_U \"u\")\n   (UNSPEC_VHSUB_S \"s\") (UNSPEC_VHSUB_U \"u\")\n   (UNSPEC_VQSUB_S \"s\") (UNSPEC_VQSUB_U \"u\")\n+  (UNSPEC_VABAL_S \"s\") (UNSPEC_VABAL_U \"u\")\n   (UNSPEC_VABD_S \"s\") (UNSPEC_VABD_U \"u\")\n   (UNSPEC_VABDL_S \"s\") (UNSPEC_VABDL_U \"u\")\n   (UNSPEC_VMAX \"s\") (UNSPEC_VMAX_U \"u\")"}, {"sha": "bcf838f23e35b15a5417b68ed16fa902df507d63", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ae721396176b7f6f4b42f8c5caeb1b10012e52/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ae721396176b7f6f4b42f8c5caeb1b10012e52/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=84ae721396176b7f6f4b42f8c5caeb1b10012e52", "patch": "@@ -3256,6 +3256,32 @@\n   [(set_attr \"type\" \"neon_arith_acc<q>\")]\n )\n \n+(define_expand \"<sup>sadv16qi\"\n+  [(use (match_operand:V4SI 0 \"register_operand\"))\n+   (unspec:V16QI [(use (match_operand:V16QI 1 \"register_operand\"))\n+                  (use (match_operand:V16QI 2 \"register_operand\"))] VABAL)\n+   (use (match_operand:V4SI 3 \"register_operand\"))]\n+  \"TARGET_NEON\"\n+  {\n+    rtx reduc = gen_reg_rtx (V8HImode);\n+    rtx op1_highpart = gen_reg_rtx (V8QImode);\n+    rtx op2_highpart = gen_reg_rtx (V8QImode);\n+\n+    emit_insn (gen_neon_vabdl<sup>v8qi (reduc,\n+                                        gen_lowpart (V8QImode, operands[1]),\n+                                        gen_lowpart (V8QImode, operands[2])));\n+\n+    emit_insn (gen_neon_vget_highv16qi (op1_highpart, operands[1]));\n+    emit_insn (gen_neon_vget_highv16qi (op2_highpart, operands[2]));\n+    emit_insn (gen_neon_vabal<sup>v8qi (reduc, reduc,\n+                                        op1_highpart, op2_highpart));\n+    emit_insn (gen_neon_vpadal<sup>v8hi (operands[3], operands[3], reduc));\n+\n+    emit_move_insn (operands[0], operands[3]);\n+    DONE;\n+  }\n+)\n+\n (define_insn \"neon_v<maxmin><sup><mode>\"\n   [(set (match_operand:VDQIW 0 \"s_register_operand\" \"=w\")\n         (unspec:VDQIW [(match_operand:VDQIW 1 \"s_register_operand\" \"w\")"}, {"sha": "41068bac90aa0ce6fef531789a38e5f7b3b27dff", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ae721396176b7f6f4b42f8c5caeb1b10012e52/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ae721396176b7f6f4b42f8c5caeb1b10012e52/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=84ae721396176b7f6f4b42f8c5caeb1b10012e52", "patch": "@@ -200,6 +200,8 @@\n   UNSPEC_SHA256SU1\n   UNSPEC_VMULLP64\n   UNSPEC_LOAD_COUNT\n+  UNSPEC_VABAL_S\n+  UNSPEC_VABAL_U\n   UNSPEC_VABD_F\n   UNSPEC_VABD_S\n   UNSPEC_VABD_U"}, {"sha": "b6cba15451430fc6eb6a2a0b80417bb12fb023b7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ae721396176b7f6f4b42f8c5caeb1b10012e52/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ae721396176b7f6f4b42f8c5caeb1b10012e52/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=84ae721396176b7f6f4b42f8c5caeb1b10012e52", "patch": "@@ -1,3 +1,8 @@\n+2019-06-12  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n+\n+        * gcc.target/arm/ssadv16qi.c: New test.\n+        * gcc.target/arm/usadv16qi.c: Likewise.\n+\n 2019-06-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/90760"}, {"sha": "dba5ef4f6b9c0b75463a08549e989edc9c22a9d7", "filename": "gcc/testsuite/gcc.target/arm/ssadv16qi.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ae721396176b7f6f4b42f8c5caeb1b10012e52/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fssadv16qi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ae721396176b7f6f4b42f8c5caeb1b10012e52/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fssadv16qi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fssadv16qi.c?ref=84ae721396176b7f6f4b42f8c5caeb1b10012e52", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O3 --save-temps\" } */\n+/* { dg-require-effective-target arm_fp_ok } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-add-options arm_neon } */\n+\n+#define N 1024\n+\n+signed char pix1[N], pix2[N];\n+\n+int\n+foo (void)\n+{\n+  int i_sum = 0;\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    i_sum += __builtin_abs (pix1[i] - pix2[i]);\n+\n+  return i_sum;\n+}\n+\n+/* { dg-final { scan-assembler {\\tvabdl\\.s8\\t} } } */\n+/* { dg-final { scan-assembler {\\tvabal\\.s8\\t} } } */\n+/* { dg-final { scan-assembler {\\tvpadal\\.s16\\t} } } */\n+\n+/* { dg-final { scan-assembler-not {\\tvmovl} } } */\n+/* { dg-final { scan-assembler-not {\\tvsub} } } */\n+/* { dg-final { scan-assembler-not {\\tvabs} } } */"}, {"sha": "d744bcbab575850de84b7038a2b65e46461c0185", "filename": "gcc/testsuite/gcc.target/arm/usadv16qi.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ae721396176b7f6f4b42f8c5caeb1b10012e52/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fusadv16qi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ae721396176b7f6f4b42f8c5caeb1b10012e52/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fusadv16qi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fusadv16qi.c?ref=84ae721396176b7f6f4b42f8c5caeb1b10012e52", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O3 --save-temps\" } */\n+/* { dg-require-effective-target arm_fp_ok } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-add-options arm_neon } */\n+\n+#define N 1024\n+\n+unsigned char pix1[N], pix2[N];\n+\n+int\n+foo (void)\n+{\n+  int i_sum = 0;\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    i_sum += __builtin_abs (pix1[i] - pix2[i]);\n+\n+  return i_sum;\n+}\n+\n+/* { dg-final { scan-assembler {\\tvabdl\\.u8\\t} } } */\n+/* { dg-final { scan-assembler {\\tvabal\\.u8\\t} } } */\n+/* { dg-final { scan-assembler {\\tvpadal\\.u16\\t} } } */\n+\n+/* { dg-final { scan-assembler-not {\\tvmovl} } } */\n+/* { dg-final { scan-assembler-not {\\tvsub} } } */\n+/* { dg-final { scan-assembler-not {\\tvabs} } } */"}]}