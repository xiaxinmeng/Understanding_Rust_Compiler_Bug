{"sha": "c457fcec8e54df75ee6c133a79cee1417523af59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ1N2ZjZWM4ZTU0ZGY3NWVlNmMxMzNhNzljZWUxNDE3NTIzYWY1OQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-02-28T21:31:29Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-02-28T21:31:29Z"}, "message": "re PR tree-optimization/14752 ([tree-ssa] \"~a\" should be changed to \"a\" if used in the condition of an if statement)\n\n\n\tPR middle-end/14752\n\t* c-common.c (c_common_truthvalue_conversion) <MINUS_EXPR,\n\tBIT_XOR_EXPR, BIT_AND_EXPR>: Delete.  Let fold optimize these\n\tcases via the construction of \"expr != 0\".\n\n\t* gcc.dg/fold-eqandshift-2.c: New test case.\n\nFrom-SVN: r111575", "tree": {"sha": "8d1748fbeb1a55f369adfeaebb8d0d24b433d2d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d1748fbeb1a55f369adfeaebb8d0d24b433d2d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c457fcec8e54df75ee6c133a79cee1417523af59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c457fcec8e54df75ee6c133a79cee1417523af59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c457fcec8e54df75ee6c133a79cee1417523af59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c457fcec8e54df75ee6c133a79cee1417523af59/comments", "author": null, "committer": null, "parents": [{"sha": "63292ebfb4150f957217ca6243dd6de458242591", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63292ebfb4150f957217ca6243dd6de458242591", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63292ebfb4150f957217ca6243dd6de458242591"}], "stats": {"total": 65, "additions": 34, "deletions": 31}, "files": [{"sha": "7b11e7be9c21af712e5d4b76d798583e3eb6a0f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c457fcec8e54df75ee6c133a79cee1417523af59/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c457fcec8e54df75ee6c133a79cee1417523af59/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c457fcec8e54df75ee6c133a79cee1417523af59", "patch": "@@ -1,3 +1,10 @@\n+2006-02-28  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/14752\n+\t* c-common.c (c_common_truthvalue_conversion) <MINUS_EXPR,\n+\tBIT_XOR_EXPR, BIT_AND_EXPR>: Delete.  Let fold optimize these\n+\tcases via the construction of \"expr != 0\".\n+\n 2006-02-28  Steven Bosscher  <stevenb.gcc@gmail.com>\n \n \t* alias.c (alias_invariant, alias_invariant_size): Remove."}, {"sha": "1a11c3b189ad90f618a629a73f4d40717014142f", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c457fcec8e54df75ee6c133a79cee1417523af59/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c457fcec8e54df75ee6c133a79cee1417523af59/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=c457fcec8e54df75ee6c133a79cee1417523af59", "patch": "@@ -2537,37 +2537,6 @@ c_common_truthvalue_conversion (tree expr)\n \treturn c_common_truthvalue_conversion (TREE_OPERAND (expr, 0));\n       break;\n \n-    case MINUS_EXPR:\n-      /* Perhaps reduce (x - y) != 0 to (x != y).  The expressions\n-\t aren't guaranteed to the be same for modes that can represent\n-\t infinity, since if x and y are both +infinity, or both\n-\t -infinity, then x - y is not a number.\n-\n-\t Note that this transformation is safe when x or y is NaN.\n-\t (x - y) is then NaN, and both (x - y) != 0 and x != y will\n-\t be false.  */\n-      if (HONOR_INFINITIES (TYPE_MODE (TREE_TYPE (TREE_OPERAND (expr, 0)))))\n-\tbreak;\n-      /* Fall through....  */\n-    case BIT_XOR_EXPR:\n-      /* This and MINUS_EXPR can be changed into a comparison of the\n-\t two objects.  */\n-      if (TREE_TYPE (TREE_OPERAND (expr, 0))\n-\t  == TREE_TYPE (TREE_OPERAND (expr, 1)))\n-\treturn fold_build2 (NE_EXPR, truthvalue_type_node,\n-\t\t\t    TREE_OPERAND (expr, 0), TREE_OPERAND (expr, 1));\n-      return fold_build2 (NE_EXPR, truthvalue_type_node,\n-\t\t\t  TREE_OPERAND (expr, 0),\n-\t\t\t  fold_convert (TREE_TYPE (TREE_OPERAND (expr, 0)),\n-\t\t\t\t\tTREE_OPERAND (expr, 1)));\n-\n-    case BIT_AND_EXPR:\n-      if (integer_onep (TREE_OPERAND (expr, 1))\n-\t  && TREE_TYPE (expr) != truthvalue_type_node)\n-\t/* Using convert here would cause infinite recursion.  */\n-\treturn build1 (NOP_EXPR, truthvalue_type_node, expr);\n-      break;\n-\n     case MODIFY_EXPR:\n       if (!TREE_NO_WARNING (expr))\n \twarning (OPT_Wparentheses,"}, {"sha": "5b2507cf1c93bb9d0ad7ee395ab111a6cce65a6f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c457fcec8e54df75ee6c133a79cee1417523af59/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c457fcec8e54df75ee6c133a79cee1417523af59/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c457fcec8e54df75ee6c133a79cee1417523af59", "patch": "@@ -1,3 +1,8 @@\n+2006-02-28  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/14752\n+\t* gcc.dg/fold-eqandshift-2.c: New test case.\n+\n 2006-02-28  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/pr26421.c: Fix testcase to force struct"}, {"sha": "14ffb852dd4395f496ae7912d6c8337cb2214211", "filename": "gcc/testsuite/gcc.dg/fold-eqandshift-2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c457fcec8e54df75ee6c133a79cee1417523af59/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-eqandshift-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c457fcec8e54df75ee6c133a79cee1417523af59/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-eqandshift-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-eqandshift-2.c?ref=c457fcec8e54df75ee6c133a79cee1417523af59", "patch": "@@ -0,0 +1,22 @@\n+/* PR middle-end/14752 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-original\" } */\n+\n+void bar (void);\n+\n+void foo (unsigned int a)\n+{\n+  if ((a >> 2) & 1)\n+    bar ();\n+}\n+\n+void baz (unsigned int b)\n+{\n+  if ((~b >> 2) & 1)\n+    bar ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"\\\\(a \\& 4\\\\) != 0\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\(b \\& 4\\\\) == 0\" 1 \"original\" } } */\n+/* { dg-final { cleanup-tree-dump \"original\" } } */\n+"}]}