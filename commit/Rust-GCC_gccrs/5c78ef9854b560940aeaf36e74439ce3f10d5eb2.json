{"sha": "5c78ef9854b560940aeaf36e74439ce3f10d5eb2", "node_id": "C_kwDOANBUbNoAKDVjNzhlZjk4NTRiNTYwOTQwYWVhZjM2ZTc0NDM5Y2UzZjEwZDVlYjI", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-04-25T12:43:15Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-05-18T16:40:08Z"}, "message": "ast: Add `outer_attrs` to all `Item`s\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast.h: Add `outer_attrs` to Item.\n\t* ast/rust-expr.h: Make use of new inheritance methods.\n\t* ast/rust-item.h: Likewise.\n\t* ast/rust-macro.h: Likewise.", "tree": {"sha": "8a101ad7e9c074c19cd835e43517fad57e2690d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a101ad7e9c074c19cd835e43517fad57e2690d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c78ef9854b560940aeaf36e74439ce3f10d5eb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c78ef9854b560940aeaf36e74439ce3f10d5eb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c78ef9854b560940aeaf36e74439ce3f10d5eb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c78ef9854b560940aeaf36e74439ce3f10d5eb2/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad7c998b21c719cfcfd40215fe737b4211b6eb66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad7c998b21c719cfcfd40215fe737b4211b6eb66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad7c998b21c719cfcfd40215fe737b4211b6eb66"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "09a7351b228eae0ccb34be4021db2c39a336fd64", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c78ef9854b560940aeaf36e74439ce3f10d5eb2/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c78ef9854b560940aeaf36e74439ce3f10d5eb2/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=5c78ef9854b560940aeaf36e74439ce3f10d5eb2", "patch": "@@ -933,6 +933,11 @@ class Item : public Stmt\n   // behavior that we have items that can also be expressions?\n   bool is_item () const override { return true; }\n \n+  virtual std::vector<Attribute> &get_outer_attrs () = 0;\n+  virtual const std::vector<Attribute> &get_outer_attrs () const = 0;\n+\n+  virtual bool has_outer_attrs () const { return !get_outer_attrs ().empty (); }\n+\n protected:\n   // Clone function implementation as pure virtual method\n   virtual Item *clone_item_impl () const = 0;"}, {"sha": "3e7c93c5098fde159a05cc858ab9538c7a948b7a", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c78ef9854b560940aeaf36e74439ce3f10d5eb2/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c78ef9854b560940aeaf36e74439ce3f10d5eb2/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=5c78ef9854b560940aeaf36e74439ce3f10d5eb2", "patch": "@@ -2762,15 +2762,15 @@ class RangeExpr : public ExprWithoutBlock\n public:\n   Location get_locus () const override final { return locus; }\n \n-  // should never be called - error if called\n-  void set_outer_attrs (std::vector<Attribute> /* new_attrs */) override\n+  std::vector<Attribute> &get_outer_attrs () override final\n   {\n+    // RangeExpr cannot have any outer attributes\n     rust_assert (false);\n   }\n \n-  std::vector<Attribute> &get_outer_attrs () override\n+  // should never be called - error if called\n+  void set_outer_attrs (std::vector<Attribute> /* new_attrs */) override\n   {\n-    // RangeExpr cannot have any outer attributes\n     rust_assert (false);\n   }\n };"}, {"sha": "e60c3f01a736f1919c265c11a72bcf780335a2fb", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c78ef9854b560940aeaf36e74439ce3f10d5eb2/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c78ef9854b560940aeaf36e74439ce3f10d5eb2/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=5c78ef9854b560940aeaf36e74439ce3f10d5eb2", "patch": "@@ -979,8 +979,11 @@ class VisItem : public Item\n   Visibility &get_visibility () { return visibility; }\n   const Visibility &get_visibility () const { return visibility; }\n \n-  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n-  const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n+  std::vector<Attribute> &get_outer_attrs () override { return outer_attrs; }\n+  const std::vector<Attribute> &get_outer_attrs () const override\n+  {\n+    return outer_attrs;\n+  }\n };\n \n // Rust module item - abstract base class"}, {"sha": "29bb9fa555fc7f483247b8632dfeba315f4266d1", "filename": "gcc/rust/ast/rust-macro.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c78ef9854b560940aeaf36e74439ce3f10d5eb2/gcc%2Frust%2Fast%2Frust-macro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c78ef9854b560940aeaf36e74439ce3f10d5eb2/gcc%2Frust%2Fast%2Frust-macro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-macro.h?ref=5c78ef9854b560940aeaf36e74439ce3f10d5eb2", "patch": "@@ -541,8 +541,11 @@ class MacroRulesDefinition : public VisItem\n   bool is_marked_for_strip () const override { return rule_name.empty (); }\n \n   // TODO: this mutable getter seems really dodgy. Think up better way.\n-  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n-  const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n+  std::vector<Attribute> &get_outer_attrs () override { return outer_attrs; }\n+  const std::vector<Attribute> &get_outer_attrs () const override\n+  {\n+    return outer_attrs;\n+  }\n \n   std::vector<MacroRule> &get_macro_rules () { return rules; }\n   const std::vector<MacroRule> &get_macro_rules () const { return rules; }\n@@ -651,7 +654,10 @@ class MacroInvocation : public TypeNoBounds,\n     return invoc_data.is_marked_for_strip ();\n   }\n \n-  const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n+  const std::vector<Attribute> &get_outer_attrs () const override\n+  {\n+    return outer_attrs;\n+  }\n   std::vector<Attribute> &get_outer_attrs () override { return outer_attrs; }\n \n   void set_outer_attrs (std::vector<Attribute> new_attrs) override"}]}