{"sha": "9de88093b6e322a53b20ea23560ca3cd753120ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRlODgwOTNiNmUzMjJhNTNiMjBlYTIzNTYwY2EzY2Q3NTMxMjBlYw==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2007-10-08T20:54:47Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2007-10-08T20:54:47Z"}, "message": "re PR fortran/33689 ([Regression 4.3] Array with constant bound rejected as automatic array)\n\nPR fortran/33689\nfortran/\n* resolve.c (gfc_resolve_expr): Fix indentation.\n(resolve_fl_variable_derived): Rename argument.\n(resolve_fl_variable): Fix case in message.  Clarify logic.\nCorrectly simplify array bounds.\ntestsuite/\n* gfortran.dg/spec_expr_5.f90: New.\n\nFrom-SVN: r129139", "tree": {"sha": "3ddfb68c1208d5cb5de35a5a6152b0fe4071db55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ddfb68c1208d5cb5de35a5a6152b0fe4071db55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9de88093b6e322a53b20ea23560ca3cd753120ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9de88093b6e322a53b20ea23560ca3cd753120ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9de88093b6e322a53b20ea23560ca3cd753120ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9de88093b6e322a53b20ea23560ca3cd753120ec/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d98f312ce657e609c803c54cad4a57397d620668", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d98f312ce657e609c803c54cad4a57397d620668", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d98f312ce657e609c803c54cad4a57397d620668"}], "stats": {"total": 66, "additions": 38, "deletions": 28}, "files": [{"sha": "85cb8194db212b607d307607ec5a105046826957", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de88093b6e322a53b20ea23560ca3cd753120ec/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de88093b6e322a53b20ea23560ca3cd753120ec/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9de88093b6e322a53b20ea23560ca3cd753120ec", "patch": "@@ -1,3 +1,11 @@\n+2007-10-08  Tobias Schl\ufffdter  <tobi@gcc.gnu.org>\n+\n+\tPR fortran/33689\n+\t* resolve.c (gfc_resolve_expr): Fix indentation.\n+\t(resolve_fl_variable_derived): Rename argument.\n+\t(resolve_fl_variable): Fix case in message.  Clarify logic.\n+\tCorrectly simplify array bounds.\n+\n 2007-10-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR libfortran/33683"}, {"sha": "2686c3dac82156c2db5caeede2887db7c2104a7b", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 17, "deletions": 28, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de88093b6e322a53b20ea23560ca3cd753120ec/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de88093b6e322a53b20ea23560ca3cd753120ec/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=9de88093b6e322a53b20ea23560ca3cd753120ec", "patch": "@@ -4138,7 +4138,7 @@ gfc_resolve_expr (gfc_expr *e)\n \t}\n \n       if (e->ts.type == BT_CHARACTER && e->ts.cl == NULL && e->ref\n-\t    && e->ref->type != REF_SUBSTRING)\n+\t  && e->ref->type != REF_SUBSTRING)\n \tgfc_resolve_substring_charlen (e);\n \n       break;\n@@ -6891,7 +6891,7 @@ resolve_fl_var_and_proc (gfc_symbol *sym, int mp_flag)\n    type.  To be called from resolve_fl_variable.  */\n \n static try\n-resolve_fl_variable_derived (gfc_symbol *sym, int flag)\n+resolve_fl_variable_derived (gfc_symbol *sym, int no_init_flag)\n {\n   gcc_assert (sym->ts.type == BT_DERIVED);\n \n@@ -6924,7 +6924,7 @@ resolve_fl_variable_derived (gfc_symbol *sym, int flag)\n      The check for initializers is performed with\n      has_default_initializer because gfc_default_initializer generates\n      a hidden default for allocatable components.  */\n-  if (!(sym->value || flag) && sym->ns->proc_name\n+  if (!(sym->value || no_init_flag) && sym->ns->proc_name\n       && sym->ns->proc_name->attr.flavor == FL_MODULE\n       && !sym->ns->save_all && !sym->attr.save\n       && !sym->attr.pointer && !sym->attr.allocatable\n@@ -6938,7 +6938,7 @@ resolve_fl_variable_derived (gfc_symbol *sym, int flag)\n \n   /* Assign default initializer.  */\n   if (!(sym->value || sym->attr.pointer || sym->attr.allocatable)\n-      && (!flag || sym->attr.intent == INTENT_OUT))\n+      && (!no_init_flag || sym->attr.intent == INTENT_OUT))\n     {\n       sym->value = gfc_default_initializer (&sym->ts);\n     }\n@@ -6952,12 +6952,11 @@ resolve_fl_variable_derived (gfc_symbol *sym, int flag)\n static try\n resolve_fl_variable (gfc_symbol *sym, int mp_flag)\n {\n-  int flag;\n-  int i;\n+  int no_init_flag, automatic_flag;\n   gfc_expr *e;\n   const char *auto_save_msg;\n \n-  auto_save_msg = \"automatic object '%s' at %L cannot have the \"\n+  auto_save_msg = \"Automatic object '%s' at %L cannot have the \"\n \t\t  \"SAVE attribute\";\n \n   if (resolve_fl_var_and_proc (sym, mp_flag) == FAILURE)\n@@ -7019,37 +7018,27 @@ resolve_fl_variable (gfc_symbol *sym, int mp_flag)\n   if (sym->value == NULL && sym->attr.referenced)\n     apply_default_init_local (sym); /* Try to apply a default initialization.  */\n \n-  /* Can the symbol have an initializer?  */\n-  flag = 0;\n+  /* Determine if the symbol may not have an initializer.  */\n+  no_init_flag = automatic_flag = 0;\n   if (sym->attr.allocatable || sym->attr.external || sym->attr.dummy\n-\t|| sym->attr.intrinsic || sym->attr.result)\n-    flag = 1;\n-  else if (sym->attr.dimension && !sym->attr.pointer)\n+      || sym->attr.intrinsic || sym->attr.result)\n+    no_init_flag = 1;\n+  else if (sym->attr.dimension && !sym->attr.pointer\n+\t   && is_non_constant_shape_array (sym))\n     {\n-      /* Don't allow initialization of automatic arrays.  */\n-      for (i = 0; i < sym->as->rank; i++)\n-\t{\n-\t  if (sym->as->lower[i] == NULL\n-\t      || sym->as->lower[i]->expr_type != EXPR_CONSTANT\n-\t      || sym->as->upper[i] == NULL\n-\t      || sym->as->upper[i]->expr_type != EXPR_CONSTANT)\n-\t    {\n-\t      flag = 2;\n-\t      break;\n-\t    }\n-\t}\n+      no_init_flag = automatic_flag = 1;\n \n       /* Also, they must not have the SAVE attribute.\n \t SAVE_IMPLICIT is checked below.  */\n-      if (flag && sym->attr.save == SAVE_EXPLICIT)\n+      if (sym->attr.save == SAVE_EXPLICIT)\n \t{\n \t  gfc_error (auto_save_msg, sym->name, &sym->declared_at);\n \t  return FAILURE;\n \t}\n     }\n \n   /* Reject illegal initializers.  */\n-  if (!sym->mark && sym->value && flag)\n+  if (!sym->mark && sym->value)\n     {\n       if (sym->attr.allocatable)\n \tgfc_error (\"Allocatable '%s' at %L cannot have an initializer\",\n@@ -7067,7 +7056,7 @@ resolve_fl_variable (gfc_symbol *sym, int mp_flag)\n       else if (sym->attr.result)\n \tgfc_error (\"Function result '%s' at %L cannot have an initializer\",\n \t\t   sym->name, &sym->declared_at);\n-      else if (flag == 2)\n+      else if (automatic_flag)\n \tgfc_error (\"Automatic array '%s' at %L cannot have an initializer\",\n \t\t   sym->name, &sym->declared_at);\n       else\n@@ -7077,7 +7066,7 @@ resolve_fl_variable (gfc_symbol *sym, int mp_flag)\n \n no_init_error:\n   if (sym->ts.type == BT_DERIVED)\n-    return resolve_fl_variable_derived (sym, flag);\n+    return resolve_fl_variable_derived (sym, no_init_flag);\n \n   return SUCCESS;\n }"}, {"sha": "17060ee1f99c9d3ba8bb04e1f416735b6e15eee9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de88093b6e322a53b20ea23560ca3cd753120ec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de88093b6e322a53b20ea23560ca3cd753120ec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9de88093b6e322a53b20ea23560ca3cd753120ec", "patch": "@@ -1,3 +1,8 @@\n+2007-10-08  Tobias Schl\ufffdter  <tobi@gcc.gnu.org>\n+\n+\tPR fortran/33689\n+\t* gfortran.dg/spec_expr_5.f90: New.\n+\n 2007-10-08  Geoffrey Keating  <geoffk@apple.com>\n \n \t* gcc.dg/pragma-darwin-2.c: New."}, {"sha": "819038348c2ee94b0b0b0e667ec4cea254d8b3d2", "filename": "gcc/testsuite/gfortran.dg/spec_expr_5.f90", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de88093b6e322a53b20ea23560ca3cd753120ec/gcc%2Ftestsuite%2Fgfortran.dg%2Fspec_expr_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de88093b6e322a53b20ea23560ca3cd753120ec/gcc%2Ftestsuite%2Fgfortran.dg%2Fspec_expr_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fspec_expr_5.f90?ref=9de88093b6e322a53b20ea23560ca3cd753120ec", "patch": "@@ -0,0 +1,8 @@\n+! { dg-do compile }\n+! PR 33689\n+! Wrongly rejected valid code due to non-trivial expression for array bound\n+ subroutine grylmr()\n+    integer, parameter :: lmaxd = 20\n+    REAL, save :: c(0:(lmaxd+1)*(lmaxd+1))\n+  end subroutine grylmr\n+end"}]}