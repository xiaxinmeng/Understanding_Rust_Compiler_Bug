{"sha": "8d8ab48b47f778f5acc247adec3e1fa2cc5ca534", "node_id": "C_kwDOANBUbNoAKDhkOGFiNDhiNDdmNzc4ZjVhY2MyNDdhZGVjM2UxZmEyY2M1Y2E1MzQ", "commit": {"author": {"name": "Nirmal Patel", "email": "npate012@gmail.com", "date": "2021-10-21T01:14:00Z"}, "committer": {"name": "Nirmal Patel", "email": "npate012@gmail.com", "date": "2021-10-21T01:14:00Z"}, "message": "Implement unsafety enum and replaced boolean variable has_unsafe with a variable of unsafety enum type\n\nSigned-off-by: Nirmal Patel <npate012@gmail.com>", "tree": {"sha": "01e21724b88acad0368cc6688d23b00e1314ac15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01e21724b88acad0368cc6688d23b00e1314ac15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d8ab48b47f778f5acc247adec3e1fa2cc5ca534", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d8ab48b47f778f5acc247adec3e1fa2cc5ca534", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d8ab48b47f778f5acc247adec3e1fa2cc5ca534", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d8ab48b47f778f5acc247adec3e1fa2cc5ca534/comments", "author": {"login": "nirmal-j-patel", "id": 5339144, "node_id": "MDQ6VXNlcjUzMzkxNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5339144?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nirmal-j-patel", "html_url": "https://github.com/nirmal-j-patel", "followers_url": "https://api.github.com/users/nirmal-j-patel/followers", "following_url": "https://api.github.com/users/nirmal-j-patel/following{/other_user}", "gists_url": "https://api.github.com/users/nirmal-j-patel/gists{/gist_id}", "starred_url": "https://api.github.com/users/nirmal-j-patel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nirmal-j-patel/subscriptions", "organizations_url": "https://api.github.com/users/nirmal-j-patel/orgs", "repos_url": "https://api.github.com/users/nirmal-j-patel/repos", "events_url": "https://api.github.com/users/nirmal-j-patel/events{/privacy}", "received_events_url": "https://api.github.com/users/nirmal-j-patel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nirmal-j-patel", "id": 5339144, "node_id": "MDQ6VXNlcjUzMzkxNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5339144?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nirmal-j-patel", "html_url": "https://github.com/nirmal-j-patel", "followers_url": "https://api.github.com/users/nirmal-j-patel/followers", "following_url": "https://api.github.com/users/nirmal-j-patel/following{/other_user}", "gists_url": "https://api.github.com/users/nirmal-j-patel/gists{/gist_id}", "starred_url": "https://api.github.com/users/nirmal-j-patel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nirmal-j-patel/subscriptions", "organizations_url": "https://api.github.com/users/nirmal-j-patel/orgs", "repos_url": "https://api.github.com/users/nirmal-j-patel/repos", "events_url": "https://api.github.com/users/nirmal-j-patel/events{/privacy}", "received_events_url": "https://api.github.com/users/nirmal-j-patel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "649e3e074bf8306bf0eb042f10483dbd61cd040b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/649e3e074bf8306bf0eb042f10483dbd61cd040b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/649e3e074bf8306bf0eb042f10483dbd61cd040b"}], "stats": {"total": 48, "additions": 30, "deletions": 18}, "files": [{"sha": "563a90caf10431e553a695af57be242e934ebdcb", "filename": "gcc/rust/hir/rust-ast-lower-implitem.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8ab48b47f778f5acc247adec3e1fa2cc5ca534/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8ab48b47f778f5acc247adec3e1fa2cc5ca534/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h?ref=8d8ab48b47f778f5acc247adec3e1fa2cc5ca534", "patch": "@@ -119,7 +119,7 @@ class ASTLowerImplItem : public ASTLoweringBase\n     std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::FunctionQualifiers qualifiers (\n-      HIR::FunctionQualifiers::AsyncConstStatus::NONE, false);\n+      HIR::FunctionQualifiers::AsyncConstStatus::NONE, Unsafety::Normal);\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n \n     // need\n@@ -203,7 +203,7 @@ class ASTLowerImplItem : public ASTLoweringBase\n     std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::FunctionQualifiers qualifiers (\n-      HIR::FunctionQualifiers::AsyncConstStatus::NONE, false);\n+      HIR::FunctionQualifiers::AsyncConstStatus::NONE, Unsafety::Normal);\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n \n     // need\n@@ -315,7 +315,7 @@ class ASTLowerTraitItem : public ASTLoweringBase\n     std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::FunctionQualifiers qualifiers (\n-      HIR::FunctionQualifiers::AsyncConstStatus::NONE, false);\n+      HIR::FunctionQualifiers::AsyncConstStatus::NONE, Unsafety::Normal);\n \n     std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;\n     if (ref.has_generics ())\n@@ -393,7 +393,7 @@ class ASTLowerTraitItem : public ASTLoweringBase\n     std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::FunctionQualifiers qualifiers (\n-      HIR::FunctionQualifiers::AsyncConstStatus::NONE, false);\n+      HIR::FunctionQualifiers::AsyncConstStatus::NONE, Unsafety::Normal);\n \n     std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;\n     if (ref.has_generics ())"}, {"sha": "11b3c1f3a917ad73c1f337057569aca8799c85f4", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8ab48b47f778f5acc247adec3e1fa2cc5ca534/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8ab48b47f778f5acc247adec3e1fa2cc5ca534/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=8d8ab48b47f778f5acc247adec3e1fa2cc5ca534", "patch": "@@ -384,7 +384,7 @@ class ASTLoweringItem : public ASTLoweringBase\n     std::vector<std::unique_ptr<HIR::WhereClauseItem>> where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::FunctionQualifiers qualifiers (\n-      HIR::FunctionQualifiers::AsyncConstStatus::NONE, false);\n+      HIR::FunctionQualifiers::AsyncConstStatus::NONE, Unsafety::Normal);\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n \n     // need\n@@ -604,8 +604,14 @@ class ASTLoweringItem : public ASTLoweringBase\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n+    auto trait_unsafety = Unsafety::Normal;\n+    if (trait.is_unsafe ())\n+      {\n+        trait_unsafety = Unsafety::Unsafe;\n+      }\n+\n     HIR::Trait *hir_trait\n-      = new HIR::Trait (mapping, trait.get_identifier (), trait.is_unsafe (),\n+      = new HIR::Trait (mapping, trait.get_identifier (), trait_unsafety,\n \t\t\tstd::move (generic_params),\n \t\t\tstd::move (type_param_bounds), where_clause,\n \t\t\tstd::move (trait_items), vis, trait.get_outer_attrs (),"}, {"sha": "01acb39442f6cfd8210b205581ae12c87c42d3b4", "filename": "gcc/rust/hir/rust-ast-lower-stmt.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8ab48b47f778f5acc247adec3e1fa2cc5ca534/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8ab48b47f778f5acc247adec3e1fa2cc5ca534/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h?ref=8d8ab48b47f778f5acc247adec3e1fa2cc5ca534", "patch": "@@ -329,7 +329,7 @@ class ASTLoweringStmt : public ASTLoweringBase\n     std::vector<std::unique_ptr<HIR::WhereClauseItem>> where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::FunctionQualifiers qualifiers (\n-      HIR::FunctionQualifiers::AsyncConstStatus::NONE, false);\n+      HIR::FunctionQualifiers::AsyncConstStatus::NONE, Unsafety::Normal);\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n \n     // need"}, {"sha": "30da36d4af3dc37d1d8a5f1c310335490021b893", "filename": "gcc/rust/hir/rust-ast-lower-type.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8ab48b47f778f5acc247adec3e1fa2cc5ca534/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8ab48b47f778f5acc247adec3e1fa2cc5ca534/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h?ref=8d8ab48b47f778f5acc247adec3e1fa2cc5ca534", "patch": "@@ -138,7 +138,7 @@ class ASTLoweringType : public ASTLoweringBase\n     bool is_variadic = false;\n     std::vector<HIR::LifetimeParam> lifetime_params;\n     HIR::FunctionQualifiers qualifiers (\n-      HIR::FunctionQualifiers::AsyncConstStatus::NONE, false);\n+      HIR::FunctionQualifiers::AsyncConstStatus::NONE, Unsafety::Normal);\n \n     std::vector<HIR::MaybeNamedParam> named_params;\n     for (auto &param : fntype.get_function_params ())"}, {"sha": "21130a25d9dee2d8fa3993d9d15ed12bfbe7353e", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8ab48b47f778f5acc247adec3e1fa2cc5ca534/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8ab48b47f778f5acc247adec3e1fa2cc5ca534/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=8d8ab48b47f778f5acc247adec3e1fa2cc5ca534", "patch": "@@ -667,7 +667,7 @@ Trait::as_string () const\n {\n   std::string str = VisItem::as_string ();\n \n-  if (has_unsafe)\n+  if (unsafety == Unsafety::Unsafe)\n     {\n       str += \"unsafe \";\n     }\n@@ -1989,7 +1989,7 @@ FunctionQualifiers::as_string () const\n       return \"ERROR_MARK_STRING: async-const status failure\";\n     }\n \n-  if (has_unsafe)\n+  if (unsafety == Unsafety::Unsafe)\n     {\n       str += \"unsafe \";\n     }"}, {"sha": "570abc42d1644d60181ea57385786d0e7ace5a9a", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8ab48b47f778f5acc247adec3e1fa2cc5ca534/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8ab48b47f778f5acc247adec3e1fa2cc5ca534/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=8d8ab48b47f778f5acc247adec3e1fa2cc5ca534", "patch": "@@ -440,18 +440,18 @@ struct FunctionQualifiers\n \n private:\n   AsyncConstStatus const_status;\n-  bool has_unsafe;\n+  Unsafety unsafety;\n   bool has_extern;\n   std::string extern_abi; // e.g. extern \"C\" fn() -> i32 {}\n   // TODO: maybe ensure that extern_abi only exists if extern exists?\n \n   // should this store location info?\n \n public:\n-  FunctionQualifiers (AsyncConstStatus const_status, bool has_unsafe,\n+  FunctionQualifiers (AsyncConstStatus const_status, Unsafety unsafety,\n \t\t      bool has_extern = false,\n \t\t      std::string extern_abi = std::string ())\n-    : const_status (const_status), has_unsafe (has_unsafe),\n+    : const_status (const_status), unsafety (unsafety),\n       has_extern (has_extern), extern_abi (std::move (extern_abi))\n   {\n     if (!this->extern_abi.empty ())\n@@ -2433,7 +2433,7 @@ class TraitItemType : public TraitItem\n // Rust trait item declaration HIR node\n class Trait : public VisItem\n {\n-  bool has_unsafe;\n+  Unsafety unsafety;\n   Identifier name;\n   std::vector<std::unique_ptr<GenericParam>> generic_params;\n   std::vector<std::unique_ptr<TypeParamBound>> type_param_bounds;\n@@ -2464,14 +2464,14 @@ class Trait : public VisItem\n   Identifier get_name () const { return name; }\n \n   // Mega-constructor\n-  Trait (Analysis::NodeMapping mappings, Identifier name, bool is_unsafe,\n+  Trait (Analysis::NodeMapping mappings, Identifier name, Unsafety unsafety,\n \t std::vector<std::unique_ptr<GenericParam>> generic_params,\n \t std::vector<std::unique_ptr<TypeParamBound>> type_param_bounds,\n \t WhereClause where_clause,\n \t std::vector<std::unique_ptr<TraitItem>> trait_items, Visibility vis,\n \t AST::AttrVec outer_attrs, Location locus)\n     : VisItem (std::move (mappings), std::move (vis), std::move (outer_attrs)),\n-      has_unsafe (is_unsafe), name (std::move (name)),\n+      unsafety (unsafety), name (std::move (name)),\n       generic_params (std::move (generic_params)),\n       type_param_bounds (std::move (type_param_bounds)),\n       where_clause (std::move (where_clause)),\n@@ -2480,7 +2480,7 @@ class Trait : public VisItem\n \n   // Copy constructor with vector clone\n   Trait (Trait const &other)\n-    : VisItem (other), has_unsafe (other.has_unsafe), name (other.name),\n+    : VisItem (other), unsafety (other.unsafety), name (other.name),\n       where_clause (other.where_clause), locus (other.locus)\n   {\n     generic_params.reserve (other.generic_params.size ());\n@@ -2501,7 +2501,7 @@ class Trait : public VisItem\n   {\n     VisItem::operator= (other);\n     name = other.name;\n-    has_unsafe = other.has_unsafe;\n+    unsafety = other.unsafety;\n     where_clause = other.where_clause;\n     locus = other.locus;\n "}, {"sha": "483fe171c596ff025fe847a30f21fe22551834de", "filename": "gcc/rust/util/rust-common.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8ab48b47f778f5acc247adec3e1fa2cc5ca534/gcc%2Frust%2Futil%2Frust-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8ab48b47f778f5acc247adec3e1fa2cc5ca534/gcc%2Frust%2Futil%2Frust-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-common.h?ref=8d8ab48b47f778f5acc247adec3e1fa2cc5ca534", "patch": "@@ -29,6 +29,12 @@ enum Mutability\n   Mut\n };\n \n+enum Unsafety\n+{\n+  Unsafe,\n+  Normal\n+};\n+\n } // namespace Rust\n \n #endif // RUST_COMMON"}]}