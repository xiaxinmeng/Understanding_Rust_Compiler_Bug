{"sha": "0f136367bcba1783495ad7edaa81bd61fd284ac6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYxMzYzNjdiY2JhMTc4MzQ5NWFkN2VkYWE4MWJkNjFmZDI4NGFjNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-05-15T22:25:24Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-05-15T22:25:24Z"}, "message": "re PR libstdc++/40160 (-fno-rtti vs _GLIBCXX_DEBUG)\n\n2009-05-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/40160\n\t* include/debug/formatter.h (_Parameter::_Parameter): Don't use\n\ttypeid when __GXX_RTTI is undefined.\n\t* src/debug.cc (_Error_formatter::_Parameter::_M_print_field): Adjust\n\tfor null _M_variant._M_iterator._M_type,\n\t_M_variant._M_iterator._M_seq_type, _M_variant._M_sequence._M_type.\n\t* testsuite/21_strings/basic_string/40160.cc: New.\n\nFrom-SVN: r147599", "tree": {"sha": "5d4aa91441f881772ffaeff2a995dc4c43cd5b00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d4aa91441f881772ffaeff2a995dc4c43cd5b00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f136367bcba1783495ad7edaa81bd61fd284ac6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f136367bcba1783495ad7edaa81bd61fd284ac6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f136367bcba1783495ad7edaa81bd61fd284ac6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f136367bcba1783495ad7edaa81bd61fd284ac6/comments", "author": null, "committer": null, "parents": [{"sha": "a243fb4a5bb588bbb4b7292a410b9594d7bf6e8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a243fb4a5bb588bbb4b7292a410b9594d7bf6e8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a243fb4a5bb588bbb4b7292a410b9594d7bf6e8d"}], "stats": {"total": 103, "additions": 90, "deletions": 13}, "files": [{"sha": "a63520db39f3786bd5abf511de54f98093bfa4cf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f136367bcba1783495ad7edaa81bd61fd284ac6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f136367bcba1783495ad7edaa81bd61fd284ac6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0f136367bcba1783495ad7edaa81bd61fd284ac6", "patch": "@@ -1,3 +1,13 @@\n+2009-05-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/40160\n+\t* include/debug/formatter.h (_Parameter::_Parameter): Don't use\n+\ttypeid when __GXX_RTTI is undefined.\n+\t* src/debug.cc (_Error_formatter::_Parameter::_M_print_field): Adjust\n+\tfor null _M_variant._M_iterator._M_type,\n+\t_M_variant._M_iterator._M_seq_type, _M_variant._M_sequence._M_type.\n+\t* testsuite/21_strings/basic_string/40160.cc: New.\n+\n 2009-05-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/26_numerics/random/discrete_distribution/cons/"}, {"sha": "b4b43896d04a0d4f9f8df26d85f40197a945bae9", "filename": "libstdc++-v3/include/debug/formatter.h", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f136367bcba1783495ad7edaa81bd61fd284ac6/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f136367bcba1783495ad7edaa81bd61fd284ac6/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h?ref=0f136367bcba1783495ad7edaa81bd61fd284ac6", "patch": "@@ -1,6 +1,7 @@\n // Debug-mode error formatting implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -211,13 +212,21 @@ namespace __gnu_debug\n         {\n \t  _M_variant._M_iterator._M_name = __name;\n \t  _M_variant._M_iterator._M_address = &__it;\n+#ifdef __GXX_RTTI\n \t  _M_variant._M_iterator._M_type = &typeid(__it);\n+#else\n+\t  _M_variant._M_iterator._M_type = 0;\n+#endif\n \t  _M_variant._M_iterator._M_constness =\n \t    __is_same<_Safe_iterator<_Iterator, _Sequence>,\n \t                         typename _Sequence::iterator>::\n \t      value? __mutable_iterator : __const_iterator;\n \t  _M_variant._M_iterator._M_sequence = __it._M_get_sequence();\n+#ifdef __GXX_RTTI\n \t  _M_variant._M_iterator._M_seq_type = &typeid(_Sequence);\n+#else\n+\t  _M_variant._M_iterator._M_seq_type = 0;\n+#endif\n \n \t  if (__it._M_singular())\n \t    _M_variant._M_iterator._M_state = __singular;\n@@ -240,7 +249,11 @@ namespace __gnu_debug\n         {\n \t  _M_variant._M_iterator._M_name = __name;\n \t  _M_variant._M_iterator._M_address = &__it;\n+#ifdef __GXX_RTTI\n \t  _M_variant._M_iterator._M_type = &typeid(__it);\n+#else\n+\t  _M_variant._M_iterator._M_type = 0;\n+#endif\n \t  _M_variant._M_iterator._M_constness = __mutable_iterator;\n \t  _M_variant._M_iterator._M_state = __it? __unknown_state : __singular;\n \t  _M_variant._M_iterator._M_sequence = 0;\n@@ -253,7 +266,11 @@ namespace __gnu_debug\n         {\n \t  _M_variant._M_iterator._M_name = __name;\n \t  _M_variant._M_iterator._M_address = &__it;\n+#ifdef __GXX_RTTI\n \t  _M_variant._M_iterator._M_type = &typeid(__it);\n+#else\n+\t  _M_variant._M_iterator._M_type = 0;\n+#endif\n \t  _M_variant._M_iterator._M_constness = __const_iterator;\n \t  _M_variant._M_iterator._M_state = __it? __unknown_state : __singular;\n \t  _M_variant._M_iterator._M_sequence = 0;\n@@ -266,7 +283,11 @@ namespace __gnu_debug\n         {\n \t  _M_variant._M_iterator._M_name = __name;\n \t  _M_variant._M_iterator._M_address = &__it;\n+#ifdef __GXX_RTTI\n \t  _M_variant._M_iterator._M_type = &typeid(__it);\n+#else\n+\t  _M_variant._M_iterator._M_type = 0;\n+#endif\n \t  _M_variant._M_iterator._M_constness = __unknown_constness;\n \t  _M_variant._M_iterator._M_state =\n \t    __gnu_debug::__check_singular(__it)? __singular : __unknown_state;\n@@ -282,7 +303,11 @@ namespace __gnu_debug\n \t  _M_variant._M_sequence._M_name = __name;\n \t  _M_variant._M_sequence._M_address =\n \t    static_cast<const _Sequence*>(&__seq);\n+#ifdef __GXX_RTTI\n \t  _M_variant._M_sequence._M_type = &typeid(_Sequence);\n+#else\n+\t  _M_variant._M_sequence._M_type = 0;\n+#endif\n \t}\n \n       template<typename _Sequence>\n@@ -291,7 +316,11 @@ namespace __gnu_debug\n         {\n \t  _M_variant._M_sequence._M_name = __name;\n \t  _M_variant._M_sequence._M_address = &__seq;\n+#ifdef __GXX_RTTI\n \t  _M_variant._M_sequence._M_type = &typeid(_Sequence);\n+#else\n+\t  _M_variant._M_sequence._M_type = 0;\n+#endif\n \t}\n \n       void"}, {"sha": "bb0aebe433a45ea588f99a8e5542f8d88d81ddc8", "filename": "libstdc++-v3/src/debug.cc", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f136367bcba1783495ad7edaa81bd61fd284ac6/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f136367bcba1783495ad7edaa81bd61fd284ac6/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc?ref=0f136367bcba1783495ad7edaa81bd61fd284ac6", "patch": "@@ -1,6 +1,6 @@\n // Debugging mode support code -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2009\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -298,9 +298,12 @@ namespace __gnu_debug\n \t  }\n \telse if (strcmp(__name, \"type\") == 0)\n \t  {\n-\t    assert(_M_variant._M_iterator._M_type);\n-\t    // TBD: demangle!\n-\t    __formatter->_M_print_word(_M_variant._M_iterator._M_type->name());\n+\t    if (!_M_variant._M_iterator._M_type)\n+\t      __formatter->_M_print_word(\"<unknown type>\");\n+\t    else\n+\t      // TBD: demangle!\n+\t      __formatter->_M_print_word(_M_variant._M_iterator.\n+\t\t\t\t\t _M_type->name());\n \t  }\n \telse if (strcmp(__name, \"constness\") == 0)\n \t  {\n@@ -310,7 +313,9 @@ namespace __gnu_debug\n \t\t\"constant\",\n \t\t\"mutable\"\n \t      };\n-\t    __formatter->_M_print_word(__constness_names[_M_variant._M_iterator._M_constness]);\n+\t    __formatter->_M_print_word(__constness_names[_M_variant.\n+\t\t\t\t\t\t\t _M_iterator.\n+\t\t\t\t\t\t\t _M_constness]);\n \t  }\n \telse if (strcmp(__name, \"state\") == 0)\n \t  {\n@@ -322,7 +327,8 @@ namespace __gnu_debug\n \t\t\"dereferenceable\",\n \t\t\"past-the-end\"\n \t      };\n-\t    __formatter->_M_print_word(__state_names[_M_variant._M_iterator._M_state]);\n+\t    __formatter->_M_print_word(__state_names[_M_variant.\n+\t\t\t\t\t\t     _M_iterator._M_state]);\n \t  }\n \telse if (strcmp(__name, \"sequence\") == 0)\n \t  {\n@@ -333,9 +339,12 @@ namespace __gnu_debug\n \t  }\n \telse if (strcmp(__name, \"seq_type\") == 0)\n \t  {\n-\t    // TBD: demangle!\n-\t    assert(_M_variant._M_iterator._M_seq_type);\n-\t    __formatter->_M_print_word(_M_variant._M_iterator._M_seq_type->name());\n+\t    if (!_M_variant._M_iterator._M_seq_type)\n+\t      __formatter->_M_print_word(\"<unknown seq_type>\");\n+\t    else\n+\t      // TBD: demangle!\n+\t      __formatter->_M_print_word(_M_variant._M_iterator.\n+\t\t\t\t\t _M_seq_type->name());\n \t  }\n \telse\n \t  assert(false);\n@@ -356,9 +365,12 @@ namespace __gnu_debug\n \t  }\n \telse if (strcmp(__name, \"type\") == 0)\n \t  {\n-\t    // TBD: demangle!\n-\t    assert(_M_variant._M_sequence._M_type);\n-\t    __formatter->_M_print_word(_M_variant._M_sequence._M_type->name());\n+\t    if (!_M_variant._M_sequence._M_type)\n+\t      __formatter->_M_print_word(\"<unknown type>\");\n+\t    else\n+\t      // TBD: demangle!\n+\t      __formatter->_M_print_word(_M_variant._M_sequence.\n+\t\t\t\t\t _M_type->name());\n \t  }\n \telse\n \t  assert(false);"}, {"sha": "088e594cbe42bc030acd8701421118560485f848", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/40160.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f136367bcba1783495ad7edaa81bd61fd284ac6/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2F40160.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f136367bcba1783495ad7edaa81bd61fd284ac6/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2F40160.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2F40160.cc?ref=0f136367bcba1783495ad7edaa81bd61fd284ac6", "patch": "@@ -0,0 +1,26 @@\n+// -*- C++ -*-\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string>\n+\n+// { dg-options \"-fno-rtti -D_GLIBCXX_DEBUG\" }\n+// { dg-do compile }\n+\n+// libstdc++/40160\n+#include <string>"}]}