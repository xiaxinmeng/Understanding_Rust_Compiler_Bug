{"sha": "321a2b65f83575b59d4a33760b0023e219feeba6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzIxYTJiNjVmODM1NzViNTlkNGEzMzc2MGIwMDIzZTIxOWZlZWJhNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-02-02T19:44:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-02-02T19:44:16Z"}, "message": "wide-int.cc (canonize_uhwi): New function.\n\n\t* wide-int.cc (canonize_uhwi): New function.\n\t(wi::divmod_internal): Use it.\n\nFrom-SVN: r233092", "tree": {"sha": "44b08157a2a8792e0aacd76b91a954d07d56beb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44b08157a2a8792e0aacd76b91a954d07d56beb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/321a2b65f83575b59d4a33760b0023e219feeba6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/321a2b65f83575b59d4a33760b0023e219feeba6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/321a2b65f83575b59d4a33760b0023e219feeba6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/321a2b65f83575b59d4a33760b0023e219feeba6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f3baa1d3edb0395a34445aa97f237d5129b68624", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3baa1d3edb0395a34445aa97f237d5129b68624", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3baa1d3edb0395a34445aa97f237d5129b68624"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "8c59956e30b39ef19238d305c4337f34ddbdfb39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/321a2b65f83575b59d4a33760b0023e219feeba6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/321a2b65f83575b59d4a33760b0023e219feeba6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=321a2b65f83575b59d4a33760b0023e219feeba6", "patch": "@@ -1,3 +1,8 @@\n+2016-02-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* wide-int.cc (canonize_uhwi): New function.\n+\t(wi::divmod_internal): Use it.\n+\n 2016-02-02  James Norris  <jnorris@codesourcery.com\n \n \t* gimplify.c (omp_notice_variable): Add usage check."}, {"sha": "8648e7dc286342bc06885af11279871ef79622a9", "filename": "gcc/wide-int.cc", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/321a2b65f83575b59d4a33760b0023e219feeba6/gcc%2Fwide-int.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/321a2b65f83575b59d4a33760b0023e219feeba6/gcc%2Fwide-int.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int.cc?ref=321a2b65f83575b59d4a33760b0023e219feeba6", "patch": "@@ -118,6 +118,20 @@ canonize (HOST_WIDE_INT *val, unsigned int len, unsigned int precision)\n   return 1;\n }\n \n+/* VAL[0] is the unsigned result of an operation.  Canonize it by adding\n+   another 0 block if needed, and return number of blocks needed.  */\n+\n+static inline unsigned int\n+canonize_uhwi (HOST_WIDE_INT *val, unsigned int precision)\n+{\n+  if (val[0] < 0 && precision > HOST_BITS_PER_WIDE_INT)\n+    {\n+      val[1] = 0;\n+      return 2;\n+    }\n+  return 1;\n+}\n+\n /*\n  * Conversion routines in and out of wide_int.\n  */\n@@ -1793,25 +1807,12 @@ wi::divmod_internal (HOST_WIDE_INT *quotient, unsigned int *remainder_len,\n       if (quotient)\n \t{\n \t  quotient[0] = o0 / o1;\n-\t  if (o1 == 1\n-\t      && (HOST_WIDE_INT) o0 < 0\n-\t      && dividend_prec > HOST_BITS_PER_WIDE_INT)\n-\t    {\n-\t      quotient[1] = 0;\n-\t      quotient_len = 2;\n-\t    }\n+\t  quotient_len = canonize_uhwi (quotient, dividend_prec);\n \t}\n       if (remainder)\n \t{\n \t  remainder[0] = o0 % o1;\n-\t  if ((HOST_WIDE_INT) remainder[0] < 0\n-\t      && dividend_prec > HOST_BITS_PER_WIDE_INT)\n-\t    {\n-\t      remainder[1] = 0;\n-\t      *remainder_len = 2;\n-\t    }\n-\t  else\n-\t    *remainder_len = 1;\n+\t  *remainder_len = canonize_uhwi (remainder, dividend_prec);\n \t}\n       return quotient_len;\n     }"}]}