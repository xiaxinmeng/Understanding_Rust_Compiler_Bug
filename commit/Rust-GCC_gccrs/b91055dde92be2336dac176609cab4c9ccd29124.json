{"sha": "b91055dde92be2336dac176609cab4c9ccd29124", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkxMDU1ZGRlOTJiZTIzMzZkYWMxNzY2MDljYWI0YzljY2QyOTEyNA==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2001-06-21T20:34:39Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2001-06-21T20:34:39Z"}, "message": "alpha.h (struct machine_function): Remove.\n\n* config/alpha/alpha.h (struct machine_function): Remove.\n* config/alpha/alpha.c (integrate.h): Include.\n(override_options): Don't set up machine_status hooks.\n(alpha_init_machine_status): Remove.\n(alpha_mark_machine_status): Remove.\n(alpha_free_machine_status): Remove.\n(alpha_return_addr): Use get_hard_reg_initial_val.\n(alpha_gp_save_rtx): Likewise.\n(alpha_ra_ever_killed): Use has_hard_reg_initial_val.\n\nFrom-SVN: r43491", "tree": {"sha": "9909b9854c0b220468e098136d7384c3d6a77a1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9909b9854c0b220468e098136d7384c3d6a77a1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b91055dde92be2336dac176609cab4c9ccd29124", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b91055dde92be2336dac176609cab4c9ccd29124", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b91055dde92be2336dac176609cab4c9ccd29124", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b91055dde92be2336dac176609cab4c9ccd29124/comments", "author": null, "committer": null, "parents": [{"sha": "552ecbd90053e7a1dc005d49d6b6ec472eec9304", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/552ecbd90053e7a1dc005d49d6b6ec472eec9304", "html_url": "https://github.com/Rust-GCC/gccrs/commit/552ecbd90053e7a1dc005d49d6b6ec472eec9304"}], "stats": {"total": 95, "additions": 16, "deletions": 79}, "files": [{"sha": "006f16d034ba56ca2cc2e06928443d023ebb9df6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b91055dde92be2336dac176609cab4c9ccd29124/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b91055dde92be2336dac176609cab4c9ccd29124/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b91055dde92be2336dac176609cab4c9ccd29124", "patch": "@@ -1,3 +1,15 @@\n+2001-06-21  DJ Delorie  <dj@redhat.com>\n+\n+\t* config/alpha/alpha.h (struct machine_function): Remove.\n+\t* config/alpha/alpha.c (integrate.h): Include.\n+\t(override_options): Don't set up machine_status hooks.\n+\t(alpha_init_machine_status): Remove.\n+\t(alpha_mark_machine_status): Remove.\n+\t(alpha_free_machine_status): Remove.\n+\t(alpha_return_addr): Use get_hard_reg_initial_val.\n+\t(alpha_gp_save_rtx): Likewise.\n+\t(alpha_ra_ever_killed): Use has_hard_reg_initial_val.\n+\n 2001-06-20  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* config/sh/sh.md (interrupt_function): Use"}, {"sha": "79700d45f302d7958a300d5693e2b1e922c91df4", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 4, "deletions": 68, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b91055dde92be2336dac176609cab4c9ccd29124/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b91055dde92be2336dac176609cab4c9ccd29124/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=b91055dde92be2336dac176609cab4c9ccd29124", "patch": "@@ -42,6 +42,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"ggc.h\"\n #include \"tm_p.h\"\n+#include \"integrate.h\"\n \n /* External data.  */\n extern int rtx_equal_function_value_matters;\n@@ -357,11 +358,6 @@ override_options ()\n \n   /* Acquire a unique set number for our register saves and restores.  */\n   alpha_sr_alias_set = new_alias_set ();\n-\n-  /* Set up function hooks.  */\n-  init_machine_status = alpha_init_machine_status;\n-  mark_machine_status = alpha_mark_machine_status;\n-  free_machine_status = alpha_free_machine_status;\n }\n \f\n /* Returns 1 if VALUE is a mask that contains full bytes of zero or ones.  */\n@@ -3661,63 +3657,17 @@ alpha_adjust_cost (insn, link, dep_insn, cost)\n \f\n /* Functions to save and restore alpha_return_addr_rtx.  */\n \n-static void\n-alpha_init_machine_status (p)\n-     struct function *p;\n-{\n-  p->machine =\n-    (struct machine_function *) xcalloc (1, sizeof (struct machine_function));\n-}\n-\n-static void\n-alpha_mark_machine_status (p)\n-     struct function *p;\n-{\n-  struct machine_function *machine = p->machine;\n-\n-  if (machine)\n-    {\n-      ggc_mark_rtx (machine->ra_rtx);\n-      ggc_mark_rtx (machine->gp_save_rtx);\n-    }\n-}\n-\n-static void\n-alpha_free_machine_status (p)\n-     struct function *p;\n-{\n-  free (p->machine);\n-  p->machine = NULL;\n-}\n-\n /* Start the ball rolling with RETURN_ADDR_RTX.  */\n \n rtx\n alpha_return_addr (count, frame)\n      int count;\n      rtx frame ATTRIBUTE_UNUSED;\n {\n-  rtx init, reg;\n-\n   if (count != 0)\n     return const0_rtx;\n \n-  reg = cfun->machine->ra_rtx;\n-  if (reg == NULL)\n-    {\n-      /* No rtx yet.  Invent one, and initialize it from $26 in\n-\t the prologue.  */\n-      reg = gen_reg_rtx (Pmode);\n-      cfun->machine->ra_rtx = reg;\n-      init = gen_rtx_SET (VOIDmode, reg, gen_rtx_REG (Pmode, REG_RA));\n-\n-      /* Emit the insn to the prologue with the other argument copies.  */\n-      push_topmost_sequence ();\n-      emit_insn_after (init, get_insns ());\n-      pop_topmost_sequence ();\n-    }\n-\n-  return reg;\n+  return get_hard_reg_initial_val (Pmode, REG_RA);\n }\n \n /* Return or create a pseudo containing the gp value for the current\n@@ -3726,21 +3676,7 @@ alpha_return_addr (count, frame)\n rtx\n alpha_gp_save_rtx ()\n {\n-  rtx init, reg;\n-\n-  reg = cfun->machine->gp_save_rtx;\n-  if (reg == NULL)\n-    {\n-      reg = gen_reg_rtx (DImode);\n-      cfun->machine->gp_save_rtx = reg;\n-      init = gen_rtx_SET (VOIDmode, reg, gen_rtx_REG (DImode, 29));\n-\n-      push_topmost_sequence ();\n-      emit_insn_after (init, get_insns ());\n-      pop_topmost_sequence ();\n-    }\n-\n-  return reg;\n+  return get_hard_reg_initial_val (DImode, 29);\n }\n \n static int\n@@ -3752,7 +3688,7 @@ alpha_ra_ever_killed ()\n   if (current_function_is_thunk)\n     return 0;\n #endif\n-  if (!cfun->machine->ra_rtx)\n+  if (!has_hard_reg_initial_val (Pmode, REG_RA))\n     return regs_ever_live[REG_RA];\n \n   push_topmost_sequence ();"}, {"sha": "20278da517a37808143a447b3f61827840cf0bc7", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b91055dde92be2336dac176609cab4c9ccd29124/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b91055dde92be2336dac176609cab4c9ccd29124/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=b91055dde92be2336dac176609cab4c9ccd29124", "patch": "@@ -1185,17 +1185,6 @@ struct alpha_compare\n \n extern struct alpha_compare alpha_compare;\n \n-/* Machine specific function data.  */\n-\n-struct machine_function\n-{\n-  /* If non-null, this rtx holds the return address for the function.  */\n-  struct rtx_def *ra_rtx;\n-\n-  /* If non-null, this rtx holds a saved copy of the GP for the function.  */\n-  struct rtx_def *gp_save_rtx;\n-};\n-\n /* Make (or fake) .linkage entry for function call.\n    IS_LOCAL is 0 if name is used in call, 1 if name is used in definition.  */\n "}]}