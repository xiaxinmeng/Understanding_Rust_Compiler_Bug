{"sha": "073df3e73f3080aee836c538b058180405f9dcd2", "node_id": "C_kwDOANBUbNoAKDA3M2RmM2U3M2YzMDgwYWVlODM2YzUzOGIwNTgxODA0MDVmOWRjZDI", "commit": {"author": {"name": "Matthias Kretz", "email": "m.kretz@gsi.de", "date": "2023-02-02T11:26:35Z"}, "committer": {"name": "Matthias Kretz", "email": "m.kretz@gsi.de", "date": "2023-02-16T14:58:33Z"}, "message": "libstdc++: Use a PCH to speed up check-simd\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/experimental/simd/generate_makefile.sh: Generate and\n\tpre-compile pch.h, which includes all headers that do not depend\n\ton command-line macros.\n\t* testsuite/experimental/simd/tests/bits/main.h: New file.\n\t(iterate_abis, main): Moved from verify.h.\n\t* testsuite/experimental/simd/tests/bits/verify.h\n\t(iterate_abis, main): Moved to main.h.\n\t* testsuite/experimental/simd/tests/bits/conversions.h: Add\n\tinclude guard.\n\t(genHalfBits): Simplify.\n\t* testsuite/experimental/simd/tests/bits/make_vec.h: Add include\n\tguard.\n\t(make_alternating_mask): Moved from mask_loadstore.\n\t* testsuite/experimental/simd/tests/bits/mathreference.h: Add\n\tinclude guard.\n\t* testsuite/experimental/simd/tests/bits/test_values.h: Ditto.\n\t* testsuite/experimental/simd/tests/mask_loadstore.cc\n\t(make_mask, make_alternating_mask): Removed.\n\t* testsuite/experimental/simd/tests/mask_reductions.cc: Ditto.\n\t* testsuite/experimental/simd/tests/operators.cc (genHalfBits):\n\tRemoved.\n\t* testsuite/experimental/simd/tests/abs.cc: Only include\n\tbits/main.h.\n\tDitto.\n\t* testsuite/experimental/simd/tests/algorithms.cc: Ditto.\n\t* testsuite/experimental/simd/tests/broadcast.cc: Ditto.\n\t* testsuite/experimental/simd/tests/casts.cc: Ditto.\n\t* testsuite/experimental/simd/tests/fpclassify.cc: Ditto.\n\t* testsuite/experimental/simd/tests/frexp.cc: Ditto.\n\t* testsuite/experimental/simd/tests/generator.cc: Ditto.\n\t* testsuite/experimental/simd/tests/hypot3_fma.cc: Ditto.\n\t* testsuite/experimental/simd/tests/integer_operators.cc: Ditto.\n\t* testsuite/experimental/simd/tests/ldexp_scalbn_scalbln_modf.cc:\n\t* testsuite/experimental/simd/tests/loadstore.cc: Ditto.\n\t* testsuite/experimental/simd/tests/logarithm.cc: Ditto.\n\t* testsuite/experimental/simd/tests/mask_broadcast.cc: Ditto.\n\t* testsuite/experimental/simd/tests/mask_conversions.cc: Ditto.\n\t* testsuite/experimental/simd/tests/mask_implicit_cvt.cc: Ditto.\n\t* testsuite/experimental/simd/tests/mask_operator_cvt.cc: Ditto.\n\t* testsuite/experimental/simd/tests/mask_operators.cc: Ditto.\n\t* testsuite/experimental/simd/tests/math_1arg.cc: Ditto.\n\t* testsuite/experimental/simd/tests/math_2arg.cc: Ditto.\n\t* testsuite/experimental/simd/tests/operator_cvt.cc: Ditto.\n\t* testsuite/experimental/simd/tests/reductions.cc: Ditto.\n\t* testsuite/experimental/simd/tests/remqo.cc: Ditto.\n\t* testsuite/experimental/simd/tests/simd.cc: Ditto.\n\t* testsuite/experimental/simd/tests/sincos.cc: Ditto.\n\t* testsuite/experimental/simd/tests/split_concat.cc: Ditto.\n\t* testsuite/experimental/simd/tests/splits.cc: Ditto.\n\t* testsuite/experimental/simd/tests/trigonometric.cc: Ditto.\n\t* testsuite/experimental/simd/tests/trunc_ceil_floor.cc: Ditto.\n\t* testsuite/experimental/simd/tests/where.cc: Ditto.", "tree": {"sha": "4ebc6a8b9edb672181bd64d7d0a1613282a84a29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ebc6a8b9edb672181bd64d7d0a1613282a84a29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/073df3e73f3080aee836c538b058180405f9dcd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/073df3e73f3080aee836c538b058180405f9dcd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/073df3e73f3080aee836c538b058180405f9dcd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/073df3e73f3080aee836c538b058180405f9dcd2/comments", "author": {"login": "mattkretz", "id": 3306474, "node_id": "MDQ6VXNlcjMzMDY0NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3306474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkretz", "html_url": "https://github.com/mattkretz", "followers_url": "https://api.github.com/users/mattkretz/followers", "following_url": "https://api.github.com/users/mattkretz/following{/other_user}", "gists_url": "https://api.github.com/users/mattkretz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkretz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkretz/subscriptions", "organizations_url": "https://api.github.com/users/mattkretz/orgs", "repos_url": "https://api.github.com/users/mattkretz/repos", "events_url": "https://api.github.com/users/mattkretz/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkretz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mattkretz", "id": 3306474, "node_id": "MDQ6VXNlcjMzMDY0NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3306474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkretz", "html_url": "https://github.com/mattkretz", "followers_url": "https://api.github.com/users/mattkretz/followers", "following_url": "https://api.github.com/users/mattkretz/following{/other_user}", "gists_url": "https://api.github.com/users/mattkretz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkretz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkretz/subscriptions", "organizations_url": "https://api.github.com/users/mattkretz/orgs", "repos_url": "https://api.github.com/users/mattkretz/repos", "events_url": "https://api.github.com/users/mattkretz/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkretz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0f4b166ada3b92da5f2917ac3f4397e99d1b58f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0f4b166ada3b92da5f2917ac3f4397e99d1b58f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0f4b166ada3b92da5f2917ac3f4397e99d1b58f"}], "stats": {"total": 396, "additions": 170, "deletions": 226}, "files": [{"sha": "9fb33e4cbd23b8d9e0d45a91f86e27c63b003c57", "filename": "libstdc++-v3/testsuite/experimental/simd/generate_makefile.sh", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Fgenerate_makefile.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Fgenerate_makefile.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Fgenerate_makefile.sh?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -75,6 +75,7 @@ while [ $# -gt 0 ]; do\n done\n \n mkdir -p \"$dst\"\n+pch=\"$dst/pch.h\"\n dst=\"$dst/Makefile\"\n if [ -f \"$dst\" ]; then\n   echo \"Error: $dst already exists. Aborting.\" 1>&2\n@@ -84,19 +85,38 @@ fi\n CXX=\"$1\"\n shift\n \n+cat >> \"$pch\" <<EOF\n+#ifndef SIMD_PCH_\n+#define SIMD_PCH_\n+#include \"${srcdir}/bits/verify.h\"\n+#include \"${srcdir}/bits/make_vec.h\"\n+#include \"${srcdir}/bits/mathreference.h\"\n+#include \"${srcdir}/bits/metahelpers.h\"\n+#include \"${srcdir}/bits/simd_view.h\"\n+#include \"${srcdir}/bits/test_values.h\"\n+#include \"${srcdir}/bits/ulp.h\"\n+#include \"${srcdir}/bits/conversions.h\"\n+#endif  // SIMD_PCH_\n+EOF\n+\n echo \"TESTFLAGS ?=\" > \"$dst\"\n echo \"test_flags := $testflags \\$(TESTFLAGS)\" >> \"$dst\"\n-echo CXXFLAGS = \"$@\" \"\\$(test_flags)\" >> \"$dst\"\n+echo CXXFLAGS = \"$@\" -include pch.h \"\\$(test_flags)\" >> \"$dst\"\n [ -n \"$sim\" ] && echo \"export GCC_TEST_SIMULATOR = $sim\" >> \"$dst\"\n cat >> \"$dst\" <<EOF\n srcdir = ${srcdir}\n CXX = ${CXX}\n DRIVER = ${driver}\n DRIVEROPTS ?=\n driveroptions := \\$(DRIVEROPTS)\n+PCH_DEPS := \\$(shell \\$(CXX) \\$(CXXFLAGS) -M pch.h | sed -e 's/^.*://' -e 's/\\\\\\\\//g')\n \n all: simd_testsuite.sum\n \n+pch.h.gch: \\$(PCH_DEPS)\n+\t@echo \"Preparing pre-compiled header\"\n+\t@\\$(CXX) \\$(CXXFLAGS) -c \\$< -o \\$@\n+\n simd_testsuite.sum: .progress .progress_total simd_testsuite.log\n \t@printf \"\\n\\t\\t=== simd_testsuite \\$(test_flags) Summary ===\\n\\n\"\\\\\n \t\"# of expected passes:\\t\\t\\$(shell grep -c '^PASS:' \\$@)\\n\"\\\\\n@@ -247,7 +267,7 @@ EOF\n EOF\n     for i in $(seq 0 9); do\n       cat <<EOF\n-%-$type-$i.log: \\$(srcdir)/%.cc\n+%-$type-$i.log: pch.h.gch \\$(srcdir)/%.cc\n \t@\\$(DRIVER) \\$(driveroptions) -t \"$t\" -a $i -n \\$* \\$(CXX) \\$(CXXFLAGS)\n \n EOF"}, {"sha": "53cc66855dd8cea76a2cd487ece177ae3b414ed8", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/abs.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fabs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fabs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fabs.cc?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -16,11 +16,9 @@\n // <http://www.gnu.org/licenses/>.\n \n // expensive: * [1-9] * *\n-#include \"bits/verify.h\"\n-#include \"bits/metahelpers.h\"\n+#include \"bits/main.h\"\n #include <cmath>    // abs & sqrt\n #include <cstdlib>  // integer abs\n-#include \"bits/test_values.h\"\n \n template <typename V>\n   void"}, {"sha": "6242eb89337705ef6c15affd06196c0954ccd790", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/algorithms.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Falgorithms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Falgorithms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Falgorithms.cc?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -16,8 +16,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // expensive: * [1-9] * *\n-#include \"bits/verify.h\"\n-#include \"bits/metahelpers.h\"\n+#include \"bits/main.h\"\n \n template <typename V>\n   void"}, {"sha": "7bd70cea53bb560596f43721a999e7eddbbdf311", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/bits/conversions.h", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fbits%2Fconversions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fbits%2Fconversions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fbits%2Fconversions.h?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -15,6 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+#ifndef SIMD_TESTS_BITS_CONVERSIONS_H_\n+#define SIMD_TESTS_BITS_CONVERSIONS_H_\n #include <array>\n \n // is_conversion_undefined\n@@ -86,22 +88,12 @@ template <typename To, typename T, typename A>\n template <class T>\n   constexpr T\n   genHalfBits()\n-  { return std::__finite_max_v<T> >> (std::__digits_v<T> / 2); }\n-\n-template <>\n-  constexpr long double\n-  genHalfBits<long double>()\n-  { return 0; }\n-\n-template <>\n-  constexpr double\n-  genHalfBits<double>()\n-  { return 0; }\n-\n-template <>\n-  constexpr float\n-  genHalfBits<float>()\n-  { return 0; }\n+  {\n+    if constexpr (std::is_floating_point_v<T>)\n+      return 0;\n+    else\n+      return std::__finite_max_v<T> >> (std::__digits_v<T> / 2);\n+  }\n \n template <class U, class T, class UU>\n   constexpr U\n@@ -182,3 +174,4 @@ template <class T, class U>\n     operator[](size_t i) const\n     { return cvt_input_data<U, T>[i]; }\n   };\n+#endif  // SIMD_TESTS_BITS_CONVERSIONS_H_"}, {"sha": "270b433aa176042d5e1af58bfbdad37e155f7504", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/bits/main.h", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fbits%2Fmain.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fbits%2Fmain.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fbits%2Fmain.h?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -0,0 +1,87 @@\n+// Copyright (C) 2020-2023 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef TESTS_BITS_MAIN_H_\n+#define TESTS_BITS_MAIN_H_\n+\n+#include \"verify.h\"\n+\n+template <class T>\n+  void\n+  iterate_abis()\n+  {\n+    using namespace std::experimental::parallelism_v2;\n+#ifndef EXTENDEDTESTS\n+    invoke_test<simd<T, simd_abi::scalar>>(int());\n+    invoke_test<simd<T, simd_abi::_VecBuiltin<16>>>(int());\n+    invoke_test<simd<T, simd_abi::_VecBltnBtmsk<64>>>(int());\n+#elif EXTENDEDTESTS == 0\n+    invoke_test<simd<T, simd_abi::_VecBuiltin<8>>>(int());\n+    invoke_test<simd<T, simd_abi::_VecBuiltin<12>>>(int());\n+    invoke_test<simd<T, simd_abi::_VecBuiltin<24>>>(int());\n+    invoke_test<simd<T, simd_abi::_VecBuiltin<32>>>(int());\n+    invoke_test<simd<T, simd_abi::_VecBltnBtmsk<56>>>(int());\n+#elif EXTENDEDTESTS == 1\n+    invoke_test<simd<T, simd_abi::fixed_size<8>>>(int());\n+    invoke_test<simd<T, simd_abi::fixed_size<16>>>(int());\n+    invoke_test<simd<T, simd_abi::fixed_size<24>>>(int());\n+    invoke_test<simd<T, simd_abi::fixed_size<32>>>(int());\n+#elif EXTENDEDTESTS == 2\n+    invoke_test<simd<T, simd_abi::fixed_size<1>>>(int());\n+    invoke_test<simd<T, simd_abi::fixed_size<9>>>(int());\n+    invoke_test<simd<T, simd_abi::fixed_size<17>>>(int());\n+    invoke_test<simd<T, simd_abi::fixed_size<25>>>(int());\n+#elif EXTENDEDTESTS == 3\n+    invoke_test<simd<T, simd_abi::fixed_size<2>>>(int());\n+    invoke_test<simd<T, simd_abi::fixed_size<10>>>(int());\n+    invoke_test<simd<T, simd_abi::fixed_size<18>>>(int());\n+    invoke_test<simd<T, simd_abi::fixed_size<26>>>(int());\n+#elif EXTENDEDTESTS == 4\n+    invoke_test<simd<T, simd_abi::fixed_size<3>>>(int());\n+    invoke_test<simd<T, simd_abi::fixed_size<19>>>(int());\n+    invoke_test<simd<T, simd_abi::fixed_size<11>>>(int());\n+    invoke_test<simd<T, simd_abi::fixed_size<27>>>(int());\n+#elif EXTENDEDTESTS == 5\n+    invoke_test<simd<T, simd_abi::fixed_size<4>>>(int());\n+    invoke_test<simd<T, simd_abi::fixed_size<12>>>(int());\n+    invoke_test<simd<T, simd_abi::fixed_size<20>>>(int());\n+    invoke_test<simd<T, simd_abi::fixed_size<28>>>(int());\n+#elif EXTENDEDTESTS == 6\n+    invoke_test<simd<T, simd_abi::fixed_size<5>>>(int());\n+    invoke_test<simd<T, simd_abi::fixed_size<13>>>(int());\n+    invoke_test<simd<T, simd_abi::fixed_size<21>>>(int());\n+    invoke_test<simd<T, simd_abi::fixed_size<29>>>(int());\n+#elif EXTENDEDTESTS == 7\n+    invoke_test<simd<T, simd_abi::fixed_size<6>>>(int());\n+    invoke_test<simd<T, simd_abi::fixed_size<14>>>(int());\n+    invoke_test<simd<T, simd_abi::fixed_size<22>>>(int());\n+    invoke_test<simd<T, simd_abi::fixed_size<30>>>(int());\n+#elif EXTENDEDTESTS == 8\n+    invoke_test<simd<T, simd_abi::fixed_size<7>>>(int());\n+    invoke_test<simd<T, simd_abi::fixed_size<15>>>(int());\n+    invoke_test<simd<T, simd_abi::fixed_size<23>>>(int());\n+    invoke_test<simd<T, simd_abi::fixed_size<31>>>(int());\n+#endif\n+  }\n+\n+int main()\n+{\n+  iterate_abis<_GLIBCXX_SIMD_TESTTYPE>();\n+  return 0;\n+}\n+\n+#endif  // TESTS_BITS_MAIN_H_"}, {"sha": "3744965f439c55673177050dda27d8d5ea0f8cd5", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/bits/make_vec.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fbits%2Fmake_vec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fbits%2Fmake_vec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fbits%2Fmake_vec.h?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -15,6 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+#ifndef SIMD_TESTS_BITS_MAKE_VEC_H_\n+#define SIMD_TESTS_BITS_MAKE_VEC_H_\n #include <experimental/simd>\n \n template <class M>\n@@ -36,6 +38,13 @@ template <class M>\n       }\n   }\n \n+template <class M>\n+  M\n+  make_alternating_mask()\n+  {\n+    return make_mask<M>({false, true});\n+  }\n+\n template <class V>\n   inline V\n   make_vec(const std::initializer_list<typename V::value_type> &init,\n@@ -57,3 +66,4 @@ template <class V>\n \tbase += inc;\n       }\n   }\n+#endif  // SIMD_TESTS_BITS_MAKE_VEC_H_"}, {"sha": "87c4df7b176ee5b8fa0ee2fa0c86774902559b41", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/bits/mathreference.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fbits%2Fmathreference.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fbits%2Fmathreference.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fbits%2Fmathreference.h?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -15,6 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+#ifndef SIMD_TESTS_BITS_MATHREFERENCE_H_\n+#define SIMD_TESTS_BITS_MATHREFERENCE_H_\n #include <tuple>\n #include <utility>\n #include <cstdio>\n@@ -158,3 +160,4 @@ template <class Fun, class T, class Ref = testdatatype_for_function_t<Fun, T>>\n       }\n     return data;\n   }\n+#endif  // SIMD_TESTS_BITS_MATHREFERENCE_H_"}, {"sha": "c3bd082f709069335a1c8da0499c0b7b150ff44d", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/bits/test_values.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fbits%2Ftest_values.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fbits%2Ftest_values.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fbits%2Ftest_values.h?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -15,6 +15,11 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+#ifndef SIMD_TESTS_BITS_TEST_VALUES_H_\n+#define SIMD_TESTS_BITS_TEST_VALUES_H_\n+\n+#include \"verify.h\"\n+\n #include <experimental/simd>\n #include <initializer_list>\n #include <random>\n@@ -381,3 +386,4 @@ template <class V>\n #endif\n \n #define MAKE_TESTER(name_) MAKE_TESTER_2(name_, std::name_)\n+#endif  // SIMD_TESTS_BITS_TEST_VALUES_H_"}, {"sha": "2ab3ad3fa8c0b719cbae598087be91d2ac4fd533", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/bits/verify.h", "status": "modified", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fbits%2Fverify.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fbits%2Fverify.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fbits%2Fverify.h?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -286,68 +286,4 @@ template <typename V, typename = decltype(V())>\n     __builtin_fprintf(stderr, \"PASS: %s\\n\", __PRETTY_FUNCTION__);\n   }\n \n-template <class T>\n-  void\n-  iterate_abis()\n-  {\n-    using namespace std::experimental::parallelism_v2;\n-#ifndef EXTENDEDTESTS\n-    invoke_test<simd<T, simd_abi::scalar>>(int());\n-    invoke_test<simd<T, simd_abi::_VecBuiltin<16>>>(int());\n-    invoke_test<simd<T, simd_abi::_VecBltnBtmsk<64>>>(int());\n-#elif EXTENDEDTESTS == 0\n-    invoke_test<simd<T, simd_abi::_VecBuiltin<8>>>(int());\n-    invoke_test<simd<T, simd_abi::_VecBuiltin<12>>>(int());\n-    invoke_test<simd<T, simd_abi::_VecBuiltin<24>>>(int());\n-    invoke_test<simd<T, simd_abi::_VecBuiltin<32>>>(int());\n-    invoke_test<simd<T, simd_abi::_VecBltnBtmsk<56>>>(int());\n-#elif EXTENDEDTESTS == 1\n-    invoke_test<simd<T, simd_abi::fixed_size<8>>>(int());\n-    invoke_test<simd<T, simd_abi::fixed_size<16>>>(int());\n-    invoke_test<simd<T, simd_abi::fixed_size<24>>>(int());\n-    invoke_test<simd<T, simd_abi::fixed_size<32>>>(int());\n-#elif EXTENDEDTESTS == 2\n-    invoke_test<simd<T, simd_abi::fixed_size<1>>>(int());\n-    invoke_test<simd<T, simd_abi::fixed_size<9>>>(int());\n-    invoke_test<simd<T, simd_abi::fixed_size<17>>>(int());\n-    invoke_test<simd<T, simd_abi::fixed_size<25>>>(int());\n-#elif EXTENDEDTESTS == 3\n-    invoke_test<simd<T, simd_abi::fixed_size<2>>>(int());\n-    invoke_test<simd<T, simd_abi::fixed_size<10>>>(int());\n-    invoke_test<simd<T, simd_abi::fixed_size<18>>>(int());\n-    invoke_test<simd<T, simd_abi::fixed_size<26>>>(int());\n-#elif EXTENDEDTESTS == 4\n-    invoke_test<simd<T, simd_abi::fixed_size<3>>>(int());\n-    invoke_test<simd<T, simd_abi::fixed_size<19>>>(int());\n-    invoke_test<simd<T, simd_abi::fixed_size<11>>>(int());\n-    invoke_test<simd<T, simd_abi::fixed_size<27>>>(int());\n-#elif EXTENDEDTESTS == 5\n-    invoke_test<simd<T, simd_abi::fixed_size<4>>>(int());\n-    invoke_test<simd<T, simd_abi::fixed_size<12>>>(int());\n-    invoke_test<simd<T, simd_abi::fixed_size<20>>>(int());\n-    invoke_test<simd<T, simd_abi::fixed_size<28>>>(int());\n-#elif EXTENDEDTESTS == 6\n-    invoke_test<simd<T, simd_abi::fixed_size<5>>>(int());\n-    invoke_test<simd<T, simd_abi::fixed_size<13>>>(int());\n-    invoke_test<simd<T, simd_abi::fixed_size<21>>>(int());\n-    invoke_test<simd<T, simd_abi::fixed_size<29>>>(int());\n-#elif EXTENDEDTESTS == 7\n-    invoke_test<simd<T, simd_abi::fixed_size<6>>>(int());\n-    invoke_test<simd<T, simd_abi::fixed_size<14>>>(int());\n-    invoke_test<simd<T, simd_abi::fixed_size<22>>>(int());\n-    invoke_test<simd<T, simd_abi::fixed_size<30>>>(int());\n-#elif EXTENDEDTESTS == 8\n-    invoke_test<simd<T, simd_abi::fixed_size<7>>>(int());\n-    invoke_test<simd<T, simd_abi::fixed_size<15>>>(int());\n-    invoke_test<simd<T, simd_abi::fixed_size<23>>>(int());\n-    invoke_test<simd<T, simd_abi::fixed_size<31>>>(int());\n-#endif\n-  }\n-\n-int main()\n-{\n-  iterate_abis<_GLIBCXX_SIMD_TESTTYPE>();\n-  return 0;\n-}\n-\n #endif  // TESTS_BITS_VERIFY_H_"}, {"sha": "6265e31b079633c1a3b6b93c998c7e4f3fa3f4f8", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/broadcast.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fbroadcast.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fbroadcast.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fbroadcast.cc?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -16,8 +16,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // expensive: * [1-9] * *\n-#include \"bits/verify.h\"\n-#include \"bits/metahelpers.h\"\n+#include \"bits/main.h\"\n \n enum unscoped_enum\n { foo };"}, {"sha": "8e8d828c7569bf6f786d02a9c08193c8d41025b2", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/casts.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fcasts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fcasts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fcasts.cc?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -16,9 +16,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // expensive: * [1-9] * *\n-#include \"bits/verify.h\"\n-#include \"bits/metahelpers.h\"\n-#include \"bits/conversions.h\"\n+#include \"bits/main.h\"\n \n using std::experimental::simd_cast;\n using std::experimental::static_simd_cast;"}, {"sha": "00c608f953044d29f87e9b974b44ff83d187a846", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/fpclassify.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Ffpclassify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Ffpclassify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Ffpclassify.cc?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -17,9 +17,7 @@\n \n // only: float|double|ldouble * * *\n // expensive: * [1-9] * *\n-#include \"bits/verify.h\"\n-#include \"bits/metahelpers.h\"\n-#include \"bits/test_values.h\"\n+#include \"bits/main.h\"\n #include <cfenv>\n \n template <typename F>"}, {"sha": "f6a47cedd13cf6ad32d461bc05ba26c6fa2d9604", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/frexp.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Ffrexp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Ffrexp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Ffrexp.cc?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -17,9 +17,7 @@\n \n // only: float|double|ldouble * * *\n // expensive: * [1-9] * *\n-#include \"bits/verify.h\"\n-#include \"bits/metahelpers.h\"\n-#include \"bits/test_values.h\"\n+#include \"bits/main.h\"\n \n template <typename V>\n   void"}, {"sha": "001625cfd26b7fa8b100a22db08683ababfc41a9", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/generator.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fgenerator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fgenerator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fgenerator.cc?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -16,8 +16,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // expensive: * [1-9] * *\n-#include \"bits/verify.h\"\n-#include \"bits/metahelpers.h\"\n+#include \"bits/main.h\"\n \n template <class V>\n   struct call_generator"}, {"sha": "6f0d75ac0076def9b190a3d1fa7552f16b887dbd", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/hypot3_fma.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fhypot3_fma.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fhypot3_fma.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fhypot3_fma.cc?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -18,9 +18,7 @@\n // only: float|double|ldouble * * *\n // skip: ldouble * powerpc64* *\n // expensive: * [1-9] * *\n-#include \"bits/verify.h\"\n-#include \"bits/metahelpers.h\"\n-#include \"bits/test_values.h\"\n+#include \"bits/main.h\"\n \n // 3-arg std::hypot needs to be fixed, this is a better reference:\n template <typename T>"}, {"sha": "7a2bc085e498b04edeae86e16817d28f66cf1bb8", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/integer_operators.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Finteger_operators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Finteger_operators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Finteger_operators.cc?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -16,9 +16,8 @@\n // <http://www.gnu.org/licenses/>.\n \n // expensive: * [1-9] * *\n-#include \"bits/verify.h\"\n-#include \"bits/make_vec.h\"\n-#include \"bits/metahelpers.h\"\n+// timeout-factor: 2\n+#include \"bits/main.h\"\n \n template <typename T, T Begin, T End, T Stride = 1, typename F>\n   void"}, {"sha": "0fb1338fc04ec44fd155bb1939e3392bdbe9290c", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/ldexp_scalbn_scalbln_modf.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fldexp_scalbn_scalbln_modf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fldexp_scalbn_scalbln_modf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fldexp_scalbn_scalbln_modf.cc?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -17,9 +17,7 @@\n \n // only: float|double|ldouble * * *\n // expensive: * [1-9] * *\n-#include \"bits/verify.h\"\n-#include \"bits/metahelpers.h\"\n-#include \"bits/test_values.h\"\n+#include \"bits/main.h\"\n \n template <typename V>\n   void"}, {"sha": "f7933007cc72bdfd5b0522bc4c90185356936732", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/loadstore.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Floadstore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Floadstore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Floadstore.cc?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -17,9 +17,7 @@\n \n // expensive: * [1-9] * *\n // timeout-factor: 2\n-#include \"bits/verify.h\"\n-#include \"bits/make_vec.h\"\n-#include \"bits/conversions.h\"\n+#include \"bits/main.h\"\n \n template <typename V, typename U>\n   void"}, {"sha": "31ad1499e00a455f160d86c76bc1b8ca220e224b", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/logarithm.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Flogarithm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Flogarithm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Flogarithm.cc?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -17,10 +17,7 @@\n \n // only: float|double|ldouble * * *\n // expensive: * [1-9] * *\n-#include \"bits/verify.h\"\n-#include \"bits/metahelpers.h\"\n-#include \"bits/mathreference.h\"\n-#include \"bits/test_values.h\"\n+#include \"bits/main.h\"\n \n template <typename V>\n   void"}, {"sha": "2f6013687754272815a09d3751672a9af9473b90", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/mask_broadcast.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fmask_broadcast.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fmask_broadcast.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fmask_broadcast.cc?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -16,8 +16,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // expensive: * [1-9] * *\n-#include \"bits/verify.h\"\n-#include \"bits/metahelpers.h\"\n+#include \"bits/main.h\"\n \n template <typename V>\n   void"}, {"sha": "8cdd7b74b44d94f4b998fa5a9283139905f5bee4", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/mask_conversions.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fmask_conversions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fmask_conversions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fmask_conversions.cc?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -16,7 +16,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // expensive: * [1-9] * *\n-#include \"bits/verify.h\"\n+#include \"bits/main.h\"\n \n namespace stdx = std::experimental;\n "}, {"sha": "a7b6c92e2a0a0763e2dc5550e80342b395cb6d0a", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/mask_implicit_cvt.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fmask_implicit_cvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fmask_implicit_cvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fmask_implicit_cvt.cc?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -16,8 +16,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // expensive: * [1-9] * *\n-#include \"bits/verify.h\"\n-#include \"bits/metahelpers.h\"\n+#include \"bits/main.h\"\n \n template <class M, class M2>\n   constexpr bool assign_should_work"}, {"sha": "d8e58a0032b5eba54bf2b1b7721a30c34b29091b", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/mask_loadstore.cc", "status": "modified", "additions": 1, "deletions": 28, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fmask_loadstore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fmask_loadstore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fmask_loadstore.cc?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -16,34 +16,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // expensive: * [1-9] * *\n-#include \"bits/verify.h\"\n-\n-// simd_mask generator functions\n-template <class M>\n-  M\n-  make_mask(const std::initializer_list<bool>& init)\n-  {\n-    std::size_t i = 0;\n-    M r = {};\n-    for (;;)\n-      {\n-\tfor (bool x : init)\n-\t  {\n-\t    r[i] = x;\n-\t    if (++i == M::size())\n-\t      {\n-\t\treturn r;\n-\t      }\n-\t  }\n-      }\n-  }\n-\n-template <class M>\n-  M\n-  make_alternating_mask()\n-  {\n-    return make_mask<M>({false, true});\n-  }\n+#include \"bits/main.h\"\n \n template <typename V>\n   void"}, {"sha": "1c7ccab583657402e5e95ab24ceeef0759f8253d", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/mask_operator_cvt.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fmask_operator_cvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fmask_operator_cvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fmask_operator_cvt.cc?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -16,8 +16,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // expensive: * [1-9] * *\n-#include \"bits/verify.h\"\n-#include \"bits/metahelpers.h\"\n+#include \"bits/main.h\"\n \n using schar = signed char;\n using uchar = unsigned char;"}, {"sha": "70b82a514bb948258c73ae54f9dbb0352a0addc8", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/mask_operators.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fmask_operators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fmask_operators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fmask_operators.cc?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -16,8 +16,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // expensive: * [1-9] * *\n-#include \"bits/verify.h\"\n-#include \"bits/metahelpers.h\"\n+#include \"bits/main.h\"\n \n template <typename V>\n   void"}, {"sha": "1e9ffb7aca54212697e5895deadaa8c0784e37e7", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/mask_reductions.cc", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fmask_reductions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fmask_reductions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fmask_reductions.cc?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -16,35 +16,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // expensive: * [1-9] * *\n-#include \"bits/verify.h\"\n-#include \"bits/metahelpers.h\"\n-\n-// simd_mask generator functions\n-template <class M>\n-  M\n-  make_mask(const std::initializer_list<bool>& init)\n-  {\n-    std::size_t i = 0;\n-    M r = {};\n-    for (;;)\n-      {\n-\tfor (bool x : init)\n-\t  {\n-\t    r[i] = x;\n-\t    if (++i == M::size())\n-\t      {\n-\t\treturn r;\n-\t      }\n-\t  }\n-      }\n-  }\n-\n-template <class M>\n-  M\n-  make_alternating_mask()\n-  {\n-    return make_mask<M>({false, true});\n-  }\n+#include \"bits/main.h\"\n \n template <typename V>\n   void"}, {"sha": "50a740dec81b47bd6316e5c9af0e841f8ff6bc00", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/math_1arg.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fmath_1arg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fmath_1arg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fmath_1arg.cc?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -17,8 +17,7 @@\n \n // only: float|double|ldouble * * *\n // expensive: * [1-9] * *\n-#include \"bits/verify.h\"\n-#include \"bits/test_values.h\"\n+#include \"bits/main.h\"\n \n template <typename V>\n   void"}, {"sha": "1abf18128fb5e5a7b660d9d0e9fab64935fa8fea", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/math_2arg.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fmath_2arg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fmath_2arg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fmath_2arg.cc?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -17,9 +17,7 @@\n \n // only: float|double|ldouble * * *\n // expensive: * [1-9] * *\n-#include \"bits/verify.h\"\n-#include \"bits/metahelpers.h\"\n-#include \"bits/test_values.h\"\n+#include \"bits/main.h\"\n \n template <typename V>\n   void"}, {"sha": "c1acfdf10e0809d0bb1a2f615b308be3ab929061", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/operator_cvt.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Foperator_cvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Foperator_cvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Foperator_cvt.cc?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -16,8 +16,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // expensive: * [1-9] * *\n-#include \"bits/verify.h\"\n-#include \"bits/metahelpers.h\"\n+#include \"bits/main.h\"\n \n // type with sizeof(char) but different signedness\n using xchar = std::conditional_t<std::is_unsigned_v<char>, schar, uchar>;"}, {"sha": "c4d91fa5d2b2d8a872e4e73716c282cc9ae6d536", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/operators.cc", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Foperators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Foperators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Foperators.cc?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -16,19 +16,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // expensive: * [1-9] * *\n-#include \"bits/verify.h\"\n-#include \"bits/make_vec.h\"\n-#include \"bits/test_values.h\"\n-\n-template <class T>\n-  constexpr T\n-  genHalfBits()\n-  {\n-    if constexpr (std::is_floating_point_v<T>)\n-      return 0;\n-    else\n-      return std::__finite_max_v<T> >> (std::__digits_v<T> / 2);\n-  }\n+#include \"bits/main.h\"\n \n template <typename V>\n   void"}, {"sha": "0c4c79feb20f880ed7d8b1150cb4e51b5e437e78", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/reductions.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Freductions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Freductions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Freductions.cc?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -16,9 +16,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // expensive: * [1-9] * *\n-#include \"bits/verify.h\"\n-#include \"bits/metahelpers.h\"\n-#include \"bits/test_values.h\"\n+#include \"bits/main.h\"\n #include <random>\n \n template <typename V>"}, {"sha": "bc9f94d82654aa670c8d7426cc129bd3b4e1b484", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/remqo.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fremqo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fremqo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fremqo.cc?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -17,9 +17,7 @@\n \n // only: float|double|ldouble * * *\n // expensive: * [1-9] * *\n-#include \"bits/verify.h\"\n-#include \"bits/metahelpers.h\"\n-#include \"bits/test_values.h\"\n+#include \"bits/main.h\"\n \n template <typename V>\n   void"}, {"sha": "b729c97bec90bbb94cf3cf73de9a90765a43dbd5", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/simd.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fsimd.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fsimd.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fsimd.cc?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -16,7 +16,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // expensive: * [1-9] * *\n-#include \"bits/verify.h\"\n+#include \"bits/main.h\"\n \n template <typename V>\n   void"}, {"sha": "2e81a8e5585a08c78bf91c88898746eb76bcabd7", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/sincos.cc", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fsincos.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fsincos.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fsincos.cc?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -18,11 +18,7 @@\n // only: float|double|ldouble * * *\n // xfail: run * * * *\n // expensive: * [1-9] * *\n-#include \"bits/verify.h\"\n-#include \"bits/metahelpers.h\"\n-#include \"bits/mathreference.h\"\n-#include \"bits/simd_view.h\"\n-#include \"bits/test_values.h\"\n+#include \"bits/main.h\"\n \n template <typename V>\n   void"}, {"sha": "102229b70f10755bb336fc065b7c540338d2767a", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/split_concat.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fsplit_concat.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fsplit_concat.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fsplit_concat.cc?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -16,9 +16,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // expensive: * [1-9] * *\n-#include \"bits/verify.h\"\n-#include \"bits/metahelpers.h\"\n-#include \"bits/conversions.h\"\n+#include \"bits/main.h\"\n \n using std::experimental::simd_cast;\n "}, {"sha": "f87bce8a7dcbdfe461b0a5e7f7f9fd4a9af540be", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/splits.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fsplits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fsplits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fsplits.cc?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -16,7 +16,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // expensive: * [1-9] * *\n-#include \"bits/verify.h\"\n+#include \"bits/main.h\"\n \n template <typename V>\n   void"}, {"sha": "a678ff48feecfb7328f8a420fbcb6a01cd6c917d", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/trigonometric.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Ftrigonometric.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Ftrigonometric.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Ftrigonometric.cc?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -17,9 +17,7 @@\n \n // only: float|double|ldouble * * *\n // expensive: * [1-9] * *\n-#include \"bits/verify.h\"\n-#include \"bits/metahelpers.h\"\n-#include \"bits/test_values.h\"\n+#include \"bits/main.h\"\n \n template <typename V>\n   void"}, {"sha": "ecbc14816002f88ded0ddbb8d759611f69f0d294", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/trunc_ceil_floor.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Ftrunc_ceil_floor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Ftrunc_ceil_floor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Ftrunc_ceil_floor.cc?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -17,8 +17,7 @@\n \n // only: float|double|ldouble * * *\n // expensive: * [1-9] * *\n-#include \"bits/test_values.h\"\n-#include \"bits/verify.h\"\n+#include \"bits/main.h\"\n \n template <typename V>\n   void"}, {"sha": "b6f6d333191675571a86908a5eebcbc065fcb1e4", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/where.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fwhere.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073df3e73f3080aee836c538b058180405f9dcd2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fwhere.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Fwhere.cc?ref=073df3e73f3080aee836c538b058180405f9dcd2", "patch": "@@ -16,9 +16,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // expensive: * [1-9] * *\n-#include \"bits/verify.h\"\n-#include \"bits/make_vec.h\"\n-#include \"bits/metahelpers.h\"\n+#include \"bits/main.h\"\n \n template <class V>\n   struct Convertible"}]}