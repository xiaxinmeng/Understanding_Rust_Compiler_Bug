{"sha": "1ad435a5d548be5b04ae22d68afa3d2584c4703b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFkNDM1YTVkNTQ4YmU1YjA0YWUyMmQ2OGFmYTNkMjU4NGM0NzAzYg==", "commit": {"author": {"name": "Caroline Tice", "email": "ctice@apple.com", "date": "2005-05-16T21:37:01Z"}, "committer": {"name": "Caroline Tice", "email": "ctice@gcc.gnu.org", "date": "2005-05-16T21:37:01Z"}, "message": "bb-reorder.c (verify_hot_cold_block_grouping): Replace internal_error with gcc_assert.\n\n2005-05-16  Caroline Tice  <ctice@apple.com>\n\n        * bb-reorder.c (verify_hot_cold_block_grouping):  Replace\n        internal_error with gcc_assert.\n        * dwarf2out.c (dwarf2out_switch_text_section):  Likewise.\n        * function.h (struct function): Remove space between \"*\" and\n        struct field names.\n        * varasm.c (initialize_cold_section_name):   Add gcc_assert;\n        modify to use alloca.\n        (unlikely_text_section): Add check for flag_function_sections.\n        (assemble_start_function):  Move call to resolve_section, so it\n        comes before first call to unlikely_text_section.\n        (assemble_end_function):  Add test and call to function_section\n        if appropriate.\n\nFrom-SVN: r99796", "tree": {"sha": "e341ea5046d53daf979967bc128d37281b462f43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e341ea5046d53daf979967bc128d37281b462f43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ad435a5d548be5b04ae22d68afa3d2584c4703b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ad435a5d548be5b04ae22d68afa3d2584c4703b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ad435a5d548be5b04ae22d68afa3d2584c4703b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ad435a5d548be5b04ae22d68afa3d2584c4703b/comments", "author": null, "committer": null, "parents": [{"sha": "45535d4f3e3cfb83fbb32619668736b5e30e6aa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45535d4f3e3cfb83fbb32619668736b5e30e6aa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45535d4f3e3cfb83fbb32619668736b5e30e6aa0"}], "stats": {"total": 82, "additions": 45, "deletions": 37}, "files": [{"sha": "2ac24adee94a0f7e4ac8efa62027e76f9dd5a2bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad435a5d548be5b04ae22d68afa3d2584c4703b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad435a5d548be5b04ae22d68afa3d2584c4703b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ad435a5d548be5b04ae22d68afa3d2584c4703b", "patch": "@@ -1,3 +1,18 @@\n+2005-05-16  Caroline Tice  <ctice@apple.com>\n+\n+\t* bb-reorder.c (verify_hot_cold_block_grouping):  Replace\n+\tinternal_error with gcc_assert.\n+\t* dwarf2out.c (dwarf2out_switch_text_section):  Likewise.\n+\t* function.h (struct function): Remove space between \"*\" and\n+\tstruct field names.\n+\t* varasm.c (initialize_cold_section_name):   Add gcc_assert;\n+\tmodify to use alloca.\n+\t(unlikely_text_section): Add check for flag_function_sections.\n+\t(assemble_start_function):  Move call to resolve_section, so it\n+\tcomes before first call to unlikely_text_section.\n+\t(assemble_end_function):  Add test and call to function_section\n+\tif appropriate.\n+\t\n 2005-05-16  Roger Sayle  <roger@eyesopen.com>\n \n \t* c-common.c (c_common_truthvalue_conversion): Use fold_build2"}, {"sha": "547296714ce4b24f38d9c8609bc68c5b5cfc0696", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad435a5d548be5b04ae22d68afa3d2584c4703b/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad435a5d548be5b04ae22d68afa3d2584c4703b/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=1ad435a5d548be5b04ae22d68afa3d2584c4703b", "patch": "@@ -1874,8 +1874,7 @@ verify_hot_cold_block_grouping (void)\n \t}\n     }\n   \n-  if (err)\n-    internal_error (\"verify_hot_cold_block_grouping failed\");\n+  gcc_assert(!err);\n }\n \n /* Reorder basic blocks.  The main entry point to this file.  FLAGS is"}, {"sha": "32711c7227cfee9e32266a743b3c0a2c68dfc9e5", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad435a5d548be5b04ae22d68afa3d2584c4703b/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad435a5d548be5b04ae22d68afa3d2584c4703b/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=1ad435a5d548be5b04ae22d68afa3d2584c4703b", "patch": "@@ -6814,8 +6814,7 @@ dwarf2out_switch_text_section (void)\n {\n   dw_fde_ref fde;\n \n-  if (!cfun)\n-    internal_error (\"Attempt to switch text sections without any code.\");\n+  gcc_assert (cfun);\n \n   fde = &fde_table[fde_table_in_use - 1];\n   fde->dw_fde_switched_sections = true;"}, {"sha": "f0622338209499c5febfc8cc008fd84a90babaec", "filename": "gcc/function.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad435a5d548be5b04ae22d68afa3d2584c4703b/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad435a5d548be5b04ae22d68afa3d2584c4703b/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=1ad435a5d548be5b04ae22d68afa3d2584c4703b", "patch": "@@ -357,10 +357,10 @@ struct function GTY(())\n      be used by debugger functions for determining the size of text\n      sections.  */\n \n-  const char * hot_section_label;\n-  const char * cold_section_label;\n-  const char * hot_section_end_label;\n-  const char * cold_section_end_label;\n+  const char *hot_section_label;\n+  const char *cold_section_label;\n+  const char *hot_section_end_label;\n+  const char *cold_section_end_label;\n \n   /* String to be used for name of cold text sections, via\n      targetm.asm_out.named_section.  */"}, {"sha": "1f51e2e94782c326d58fc1ed9f7d5d5c1000e71e", "filename": "gcc/varasm.c", "status": "modified", "additions": 24, "deletions": 29, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad435a5d548be5b04ae22d68afa3d2584c4703b/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad435a5d548be5b04ae22d68afa3d2584c4703b/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=1ad435a5d548be5b04ae22d68afa3d2584c4703b", "patch": "@@ -179,34 +179,23 @@ initialize_cold_section_name (void)\n   const char *name;\n   const char *stripped_name;\n   char *buffer;\n-  int len;\n \n-  if (cfun\n-      && current_function_decl)\n+  gcc_assert (cfun && current_function_decl);\n+  if (cfun->unlikely_text_section_name)\n+    return;\n+\n+  if (flag_function_sections && DECL_SECTION_NAME (current_function_decl))\n     {\n-      if (!cfun->unlikely_text_section_name)\n-\t{\n-\t  if (flag_function_sections\n-\t      && DECL_SECTION_NAME (current_function_decl))\n-\t    {\n-\t      name = xstrdup (TREE_STRING_POINTER (DECL_SECTION_NAME \n-\t\t\t\t\t\t   (current_function_decl)));\n-\t      stripped_name = targetm.strip_name_encoding (name);\n-\t      len = strlen (stripped_name);\n-\t      buffer = (char *) xmalloc (len + 10);\n-\t      sprintf (buffer, \"%s%s\", stripped_name, \"_unlikely\");\n-\t      cfun->unlikely_text_section_name = ggc_strdup (buffer);\n-\t      free (buffer);\n-\t      free ((char *) name);\n-\t    }\n-\t  else\n-\t    cfun->unlikely_text_section_name = \n-\t                                UNLIKELY_EXECUTED_TEXT_SECTION_NAME;\n-\t}\n+      name = alloca (TREE_STRING_LENGTH (DECL_SECTION_NAME\n+\t\t\t\t\t (current_function_decl)));\n+      strcpy ((char *) name, TREE_STRING_POINTER (DECL_SECTION_NAME \n+\t\t\t\t\t (current_function_decl)));\n+      stripped_name = targetm.strip_name_encoding (name);\n+      buffer = ACONCAT ((stripped_name, \"_unlikely\", NULL));\n+      cfun->unlikely_text_section_name = ggc_strdup (buffer);\n     }\n   else\n-   internal_error \n-     (\"initialize_cold_section_name called without valid current_function_decl.\");\n+    cfun->unlikely_text_section_name =  UNLIKELY_EXECUTED_TEXT_SECTION_NAME;\n }\n \n /* Tell assembler to switch to text section.  */\n@@ -232,9 +221,11 @@ unlikely_text_section (void)\n       if (!cfun->unlikely_text_section_name)\n \tinitialize_cold_section_name ();\n \n-      if ((in_section != in_unlikely_executed_text)\n-\t  &&  (in_section != in_named \n-\t       || strcmp (in_named_name, cfun->unlikely_text_section_name) != 0))\n+      if (flag_function_sections\n+\t  || ((in_section != in_unlikely_executed_text)\n+\t      &&  (in_section != in_named \n+\t\t   || (strcmp (in_named_name, cfun->unlikely_text_section_name) \n+\t\t       != 0))))\n \t{\n \t  named_section (NULL_TREE, cfun->unlikely_text_section_name, 0);\n \t  in_section = in_unlikely_executed_text;\n@@ -1267,6 +1258,8 @@ assemble_start_function (tree decl, const char *fnname)\n   if (CONSTANT_POOL_BEFORE_FUNCTION)\n     output_constant_pool (fnname, decl);\n \n+  resolve_unique_section (decl, 0, flag_function_sections);\n+\n   /* Make sure the not and cold text (code) sections are properly\n      aligned.  This is necessary here in the case where the function\n      has both hot and cold sections, because we don't want to re-set\n@@ -1320,7 +1313,6 @@ assemble_start_function (tree decl, const char *fnname)\n     }\n \n   last_text_section = no_section;\n-  resolve_unique_section (decl, 0, flag_function_sections);\n \n   /* Switch to the correct text section for the start of the function.  */\n \n@@ -1406,7 +1398,10 @@ assemble_end_function (tree decl, const char *fnname)\n       save_text_section = in_section;\n       unlikely_text_section ();\n       ASM_OUTPUT_LABEL (asm_out_file, cfun->cold_section_end_label);\n-      text_section ();\n+      if (first_function_block_is_cold)\n+\ttext_section ();\n+      else\n+\tfunction_section (decl);\n       ASM_OUTPUT_LABEL (asm_out_file, cfun->hot_section_end_label);\n       if (save_text_section == in_unlikely_executed_text)\n \tunlikely_text_section ();"}]}