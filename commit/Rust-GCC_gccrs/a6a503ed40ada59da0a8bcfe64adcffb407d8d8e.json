{"sha": "a6a503ed40ada59da0a8bcfe64adcffb407d8d8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZhNTAzZWQ0MGFkYTU5ZGEwYThiY2ZlNjRhZGNmZmI0MDdkOGQ4ZQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "1997-09-02T19:37:05Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1997-09-02T19:37:05Z"}, "message": "Fix alpha-linux core dump reported by H.J. Lu.\n\n\t* alpha/alpha.h (PREFERRED_RELOAD_CLASS): Return NO_REGS if NO_REGS\n\tis passed in.\n\t* emit-rtl.c (gen_lowpart_common): Add code to convert CONST_INT to\n\tSFmode for 64 bit hosts.\n\nFrom-SVN: r15035", "tree": {"sha": "8ccb01cfb1412c49bbf01846c4ecc1fa3dff9956", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ccb01cfb1412c49bbf01846c4ecc1fa3dff9956"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6a503ed40ada59da0a8bcfe64adcffb407d8d8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6a503ed40ada59da0a8bcfe64adcffb407d8d8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6a503ed40ada59da0a8bcfe64adcffb407d8d8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6a503ed40ada59da0a8bcfe64adcffb407d8d8e/comments", "author": null, "committer": null, "parents": [{"sha": "a94729bc72dad85c039ebd062dfdd72722994033", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a94729bc72dad85c039ebd062dfdd72722994033", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a94729bc72dad85c039ebd062dfdd72722994033"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "1f7438def7f47b4d9c7415f78c5910efd9c2e28f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6a503ed40ada59da0a8bcfe64adcffb407d8d8e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6a503ed40ada59da0a8bcfe64adcffb407d8d8e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6a503ed40ada59da0a8bcfe64adcffb407d8d8e", "patch": "@@ -1,3 +1,10 @@\n+Tue Sep  2 12:00:36 1997  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* alpha/alpha.h (PREFERRED_RELOAD_CLASS): Return NO_REGS if NO_REGS\n+\tis passed in.\n+\t* emit-rtl.c (gen_lowpart_common): Add code to convert CONST_INT to\n+\tSFmode for 64 bit hosts.\n+\t\n Tue Sep  2 13:42:38 1997  Paul N. Hilfinger  <hilfingr@CS.Berkeley.EDU>\n \n \t* fixincludes: Permits spaces between # and define.  Discard C++"}, {"sha": "232920c2d61d89b5b7ddf981694e99773051e726", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6a503ed40ada59da0a8bcfe64adcffb407d8d8e/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6a503ed40ada59da0a8bcfe64adcffb407d8d8e/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=a6a503ed40ada59da0a8bcfe64adcffb407d8d8e", "patch": "@@ -691,7 +691,7 @@ enum reg_class { NO_REGS, GENERAL_REGS, FLOAT_REGS, ALL_REGS,\n \n #define PREFERRED_RELOAD_CLASS(X, CLASS)\t\t\\\n   (CONSTANT_P (X) && (X) != const0_rtx && (X) != CONST0_RTX (GET_MODE (X)) \\\n-   ? ((CLASS) == FLOAT_REGS ? NO_REGS : GENERAL_REGS)\t\t\t\\\n+   ? ((CLASS) == FLOAT_REGS || (CLASS) == NO_REGS ? NO_REGS : GENERAL_REGS)\\\n    : (CLASS))\n \n /* Loading and storing HImode or QImode values to and from memory"}, {"sha": "86948de9905d728f3a58739685c286a124b58420", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6a503ed40ada59da0a8bcfe64adcffb407d8d8e/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6a503ed40ada59da0a8bcfe64adcffb407d8d8e/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=a6a503ed40ada59da0a8bcfe64adcffb407d8d8e", "patch": "@@ -809,6 +809,26 @@ gen_lowpart_common (mode, x)\n       return CONST_DOUBLE_FROM_REAL_VALUE (u.d, mode);\n     }\n #endif\n+\n+  /* We need an extra case for machines where HOST_BITS_PER_WIDE_INT is the\n+     same as sizeof (double), such as the alpha.  We only handle the\n+     REAL_ARITHMETIC case, which is easy.  Testing HOST_BITS_PER_WIDE_INT\n+     is not strictly necessary, but is done to restrict this code to cases\n+     where it is known to work.  */\n+#ifdef REAL_ARITHMETIC\n+  else if (mode == SFmode\n+\t   && GET_CODE (x) == CONST_INT\n+\t   && GET_MODE_BITSIZE (mode) * 2 == HOST_BITS_PER_WIDE_INT)\n+    {\n+      REAL_VALUE_TYPE r;\n+      HOST_WIDE_INT i;\n+\n+      i = INTVAL (x);\n+      r = REAL_VALUE_FROM_TARGET_SINGLE (i);\n+      return CONST_DOUBLE_FROM_REAL_VALUE (r, mode);\n+    }\n+#endif\n+\n   /* Similarly, if this is converting a floating-point value into a\n      single-word integer.  Only do this is the host and target parameters are\n      compatible.  */"}]}