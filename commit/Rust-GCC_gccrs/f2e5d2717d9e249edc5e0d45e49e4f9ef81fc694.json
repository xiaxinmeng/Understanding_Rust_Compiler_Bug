{"sha": "f2e5d2717d9e249edc5e0d45e49e4f9ef81fc694", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJlNWQyNzE3ZDllMjQ5ZWRjNWUwZDQ1ZTQ5ZTRmOWVmODFmYzY5NA==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-08-03T13:17:22Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-08-04T13:24:46Z"}, "message": "by_pieces: Pass MAX_PIECES to op_by_pieces_d\n\nPass MAX_PIECES to op_by_pieces_d::op_by_pieces_d for move, store and\ncompare.\n\n\tPR target/101742\n\t* expr.c (op_by_pieces_d::op_by_pieces_d): Add a max_pieces\n\targument to set m_max_size.\n\t(move_by_pieces_d): Pass MOVE_MAX_PIECES to op_by_pieces_d.\n\t(store_by_pieces_d): Pass STORE_MAX_PIECES to op_by_pieces_d.\n\t(compare_by_pieces_d): Pass COMPARE_MAX_PIECES to op_by_pieces_d.", "tree": {"sha": "54475e6f05f3f48a1547ec08ae7fd3dd2bbd8ed3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54475e6f05f3f48a1547ec08ae7fd3dd2bbd8ed3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2e5d2717d9e249edc5e0d45e49e4f9ef81fc694", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2e5d2717d9e249edc5e0d45e49e4f9ef81fc694", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2e5d2717d9e249edc5e0d45e49e4f9ef81fc694", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2e5d2717d9e249edc5e0d45e49e4f9ef81fc694/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96146e61cd7aee62c21c2845916ec42152918ab7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96146e61cd7aee62c21c2845916ec42152918ab7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96146e61cd7aee62c21c2845916ec42152918ab7"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "096c0315ecc97c560e9778b4a5dc68849b423fcf", "filename": "gcc/expr.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2e5d2717d9e249edc5e0d45e49e4f9ef81fc694/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2e5d2717d9e249edc5e0d45e49e4f9ef81fc694/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=f2e5d2717d9e249edc5e0d45e49e4f9ef81fc694", "patch": "@@ -1110,8 +1110,8 @@ class op_by_pieces_d\n   }\n \n  public:\n-  op_by_pieces_d (rtx, bool, rtx, bool, by_pieces_constfn, void *,\n-\t\t  unsigned HOST_WIDE_INT, unsigned int, bool,\n+  op_by_pieces_d (unsigned int, rtx, bool, rtx, bool, by_pieces_constfn,\n+\t\t  void *, unsigned HOST_WIDE_INT, unsigned int, bool,\n \t\t  bool = false);\n   void run ();\n };\n@@ -1120,18 +1120,20 @@ class op_by_pieces_d\n    objects named TO and FROM, which are identified as loads or stores\n    by TO_LOAD and FROM_LOAD.  If FROM is a load, the optional FROM_CFN\n    and its associated FROM_CFN_DATA can be used to replace loads with\n-   constant values.  LEN describes the length of the operation.  */\n+   constant values.  MAX_PIECES describes the maximum number of bytes\n+   at a time which can be moved efficiently.  LEN describes the length\n+   of the operation.  */\n \n-op_by_pieces_d::op_by_pieces_d (rtx to, bool to_load,\n-\t\t\t\trtx from, bool from_load,\n+op_by_pieces_d::op_by_pieces_d (unsigned int max_pieces, rtx to,\n+\t\t\t\tbool to_load, rtx from, bool from_load,\n \t\t\t\tby_pieces_constfn from_cfn,\n \t\t\t\tvoid *from_cfn_data,\n \t\t\t\tunsigned HOST_WIDE_INT len,\n \t\t\t\tunsigned int align, bool push,\n \t\t\t\tbool qi_vector_mode)\n   : m_to (to, to_load, NULL, NULL),\n     m_from (from, from_load, from_cfn, from_cfn_data),\n-    m_len (len), m_max_size (MOVE_MAX_PIECES + 1),\n+    m_len (len), m_max_size (max_pieces + 1),\n     m_push (push), m_qi_vector_mode (qi_vector_mode)\n {\n   int toi = m_to.get_addr_inc ();\n@@ -1324,8 +1326,8 @@ class move_by_pieces_d : public op_by_pieces_d\n  public:\n   move_by_pieces_d (rtx to, rtx from, unsigned HOST_WIDE_INT len,\n \t\t    unsigned int align)\n-    : op_by_pieces_d (to, false, from, true, NULL, NULL, len, align,\n-\t\t      PUSHG_P (to))\n+    : op_by_pieces_d (MOVE_MAX_PIECES, to, false, from, true, NULL,\n+\t\t      NULL, len, align, PUSHG_P (to))\n   {\n   }\n   rtx finish_retmode (memop_ret);\n@@ -1421,8 +1423,8 @@ class store_by_pieces_d : public op_by_pieces_d\n   store_by_pieces_d (rtx to, by_pieces_constfn cfn, void *cfn_data,\n \t\t     unsigned HOST_WIDE_INT len, unsigned int align,\n \t\t     bool qi_vector_mode)\n-    : op_by_pieces_d (to, false, NULL_RTX, true, cfn, cfn_data, len,\n-\t\t      align, false, qi_vector_mode)\n+    : op_by_pieces_d (STORE_MAX_PIECES, to, false, NULL_RTX, true, cfn,\n+\t\t      cfn_data, len, align, false, qi_vector_mode)\n   {\n   }\n   rtx finish_retmode (memop_ret);\n@@ -1618,8 +1620,8 @@ class compare_by_pieces_d : public op_by_pieces_d\n   compare_by_pieces_d (rtx op0, rtx op1, by_pieces_constfn op1_cfn,\n \t\t       void *op1_cfn_data, HOST_WIDE_INT len, int align,\n \t\t       rtx_code_label *fail_label)\n-    : op_by_pieces_d (op0, true, op1, true, op1_cfn, op1_cfn_data, len,\n-\t\t      align, false)\n+    : op_by_pieces_d (COMPARE_MAX_PIECES, op0, true, op1, true, op1_cfn,\n+\t\t      op1_cfn_data, len, align, false)\n   {\n     m_fail_label = fail_label;\n   }"}]}