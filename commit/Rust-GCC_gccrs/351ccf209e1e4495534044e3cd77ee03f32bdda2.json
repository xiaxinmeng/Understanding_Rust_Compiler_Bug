{"sha": "351ccf209e1e4495534044e3cd77ee03f32bdda2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUxY2NmMjA5ZTFlNDQ5NTUzNDA0NGUzY2Q3N2VlMDNmMzJiZGRhMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-04-07T21:47:17Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-04-07T21:47:17Z"}, "message": "init.c (build_value_init_noctor): Handle REFERENCE_TYPE at top level.\n\n\t* init.c (build_value_init_noctor): Handle REFERENCE_TYPE at top\n\tlevel.\n\t(perform_member_init): Not here.\n\t* typeck2.c (build_functional_cast): Limit REFERENCE_TYPE special\n\tcase to templates.\n\t(abstract_virtuals_error_sfinae): Remove RESULT_DECL special case.\n\nFrom-SVN: r172142", "tree": {"sha": "1082ced58f08d7332de2d310c6d76893c8dee5c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1082ced58f08d7332de2d310c6d76893c8dee5c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/351ccf209e1e4495534044e3cd77ee03f32bdda2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/351ccf209e1e4495534044e3cd77ee03f32bdda2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/351ccf209e1e4495534044e3cd77ee03f32bdda2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/351ccf209e1e4495534044e3cd77ee03f32bdda2/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2b8497cd7aef2697b00b7e57ae3ea787f7cbe251", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b8497cd7aef2697b00b7e57ae3ea787f7cbe251", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b8497cd7aef2697b00b7e57ae3ea787f7cbe251"}], "stats": {"total": 64, "additions": 35, "deletions": 29}, "files": [{"sha": "ca7a79088c2afe27f0e5669d2d752b408174efcb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/351ccf209e1e4495534044e3cd77ee03f32bdda2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/351ccf209e1e4495534044e3cd77ee03f32bdda2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=351ccf209e1e4495534044e3cd77ee03f32bdda2", "patch": "@@ -1,5 +1,12 @@\n 2011-04-07  Jason Merrill  <jason@redhat.com>\n \n+\t* init.c (build_value_init_noctor): Handle REFERENCE_TYPE at top\n+\tlevel.\n+\t(perform_member_init): Not here.\n+\t* typeck2.c (build_functional_cast): Limit REFERENCE_TYPE special\n+\tcase to templates.\n+\t(abstract_virtuals_error_sfinae): Remove RESULT_DECL special case.\n+\n \tPR c++/48449\n \t* typeck2.c (build_functional_cast): Check complain consistently.\n \tUse build_value_init and abstract_virtuals_error_sfinae."}, {"sha": "005f8d6dfe22230bcfa7de1a9d5c50659ae2caff", "filename": "gcc/cp/init.c", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/351ccf209e1e4495534044e3cd77ee03f32bdda2/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/351ccf209e1e4495534044e3cd77ee03f32bdda2/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=351ccf209e1e4495534044e3cd77ee03f32bdda2", "patch": "@@ -388,14 +388,6 @@ build_value_init_noctor (tree type, tsubst_flags_t complain)\n \n \t      ftype = TREE_TYPE (field);\n \n-\t      if (TREE_CODE (ftype) == REFERENCE_TYPE)\n-\t\t{\n-\t\t  if (complain & tf_error)\n-\t\t    error (\"value-initialization of reference\");\n-\t\t  else\n-\t\t    return error_mark_node;\n-\t\t}\n-\n \t      /* We could skip vfields and fields of types with\n \t\t user-defined constructors, but I think that won't improve\n \t\t performance at all; it should be simpler in general just\n@@ -408,6 +400,9 @@ build_value_init_noctor (tree type, tsubst_flags_t complain)\n \t\t all of the subobjects.  */\n \t      value = build_value_init (ftype, complain);\n \n+\t      if (value == error_mark_node)\n+\t\treturn error_mark_node;\n+\n \t      if (value)\n \t\tCONSTRUCTOR_APPEND_ELT(v, field, value);\n \t    }\n@@ -450,6 +445,9 @@ build_value_init_noctor (tree type, tsubst_flags_t complain)\n \n \t  ce->value = build_value_init (TREE_TYPE (type), complain);\n \n+\t  if (ce->value == error_mark_node)\n+\t    return error_mark_node;\n+\n \t  /* The gimplifier can't deal with a RANGE_EXPR of TARGET_EXPRs.  */\n \t  gcc_assert (TREE_CODE (ce->value) != TARGET_EXPR\n \t\t      && TREE_CODE (ce->value) != AGGR_INIT_EXPR);\n@@ -464,6 +462,12 @@ build_value_init_noctor (tree type, tsubst_flags_t complain)\n \terror (\"value-initialization of function type %qT\", type);\n       return error_mark_node;\n     }\n+  else if (TREE_CODE (type) == REFERENCE_TYPE)\n+    {\n+      if (complain & tf_error)\n+\terror (\"value-initialization of reference type %qT\", type);\n+      return error_mark_node;\n+    }\n \n   return build_zero_init (type, NULL_TREE, /*static_storage_p=*/false);\n }\n@@ -504,16 +508,9 @@ perform_member_init (tree member, tree init)\n \t}\n       else\n \t{\n-\t  if (TREE_CODE (type) == REFERENCE_TYPE)\n-\t    permerror (DECL_SOURCE_LOCATION (current_function_decl),\n-\t\t       \"value-initialization of %q#D, which has reference type\",\n-\t\t       member);\n-\t  else\n-\t    {\n-\t      init = build2 (INIT_EXPR, type, decl,\n-\t\t\t     build_value_init (type, tf_warning_or_error));\n-\t      finish_expr_stmt (init);\n-\t    }\n+\t  init = build2 (INIT_EXPR, type, decl,\n+\t\t\t build_value_init (type, tf_warning_or_error));\n+\t  finish_expr_stmt (init);\n \t}\n     }\n   /* Deal with this here, as we will get confused if we try to call the"}, {"sha": "f3a0079015070db8c697128458b5754e2309b124", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/351ccf209e1e4495534044e3cd77ee03f32bdda2/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/351ccf209e1e4495534044e3cd77ee03f32bdda2/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=351ccf209e1e4495534044e3cd77ee03f32bdda2", "patch": "@@ -301,9 +301,6 @@ abstract_virtuals_error_sfinae (tree decl, tree type, tsubst_flags_t complain)\n   if (!pure)\n     return 0;\n \n-  if (decl && TREE_CODE (decl) == RESULT_DECL)\n-    return 0;\n-\n   if (!(complain & tf_error))\n     return 1;\n \n@@ -1536,16 +1533,21 @@ build_functional_cast (tree exp, tree parms, tsubst_flags_t complain)\n   else\n     type = exp;\n \n-  if (TREE_CODE (type) == REFERENCE_TYPE && !parms)\n-    {\n-      if (complain & tf_error)\n-\terror (\"invalid value-initialization of reference type\");\n-      return error_mark_node;\n-    }\n-\n   if (processing_template_decl)\n     {\n-      tree t = build_min (CAST_EXPR, type, parms);\n+      tree t;\n+\n+      /* Diagnose this even in a template.  We could also try harder\n+\t to give all the usual errors when the type and args are\n+\t non-dependent...  */\n+      if (TREE_CODE (type) == REFERENCE_TYPE && !parms)\n+\t{\n+\t  if (complain & tf_error)\n+\t    error (\"invalid value-initialization of reference type\");\n+\t  return error_mark_node;\n+\t}\n+\n+      t = build_min (CAST_EXPR, type, parms);\n       /* We don't know if it will or will not have side effects.  */\n       TREE_SIDE_EFFECTS (t) = 1;\n       return t;"}]}