{"sha": "737d6a1a1745bdd4041e73800a842a1086967d5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM3ZDZhMWExNzQ1YmRkNDA0MWU3MzgwMGE4NDJhMTA4Njk2N2Q1ZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-09-30T16:20:04Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-09-30T16:20:04Z"}, "message": "Pass an ABI to choose_hard_reg_mode\n\nchoose_hard_reg_mode previously took a boolean saying whether the\nmode needed to be call-preserved.  This patch replaces it with an\noptional ABI pointer instead, so that the function can use that\nto test whether a value is call-saved.\n\ndefault_dwarf_frame_reg_mode uses eh_edge_abi because that's the\nABI that matters for unwinding.  Targets need to override the hook\nif they want something different.\n\n2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* rtl.h (predefined_function_abi): Declare.\n\t(choose_hard_reg_mode): Take a pointer to a predefined_function_abi\n\tinstead of a boolean call_save flag.\n\t* config/gcn/gcn.c (gcn_hard_regno_caller_save_mode): Update call\n\taccordingly.\n\t* config/i386/i386.h (HARD_REGNO_CALLER_SAVE_MODE): Likewise.\n\t* config/ia64/ia64.h (HARD_REGNO_CALLER_SAVE_MODE): Likewise.\n\t* config/mips/mips.c (mips_hard_regno_caller_save_mode): Likewise.\n\t* config/msp430/msp430.h (HARD_REGNO_CALLER_SAVE_MODE): Likewise.\n\t* config/rs6000/rs6000.h (HARD_REGNO_CALLER_SAVE_MODE): Likewise.\n\t* config/sh/sh.c (sh_hard_regno_caller_save_mode): Likewise.\n\t* reginfo.c (init_reg_modes_target): Likewise.\n\t(choose_hard_reg_mode): Take a pointer to a predefined_function_abi\n\tinstead of a boolean call_save flag.\n\t* targhooks.c: Include function-abi.h.\n\t(default_dwarf_frame_reg_mode): Update call to choose_hard_reg_mode,\n\tusing eh_edge_abi to choose the mode.\n\nFrom-SVN: r276312", "tree": {"sha": "1347aa114cf2ffddae7f64d2e90f4d8389e1aba9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1347aa114cf2ffddae7f64d2e90f4d8389e1aba9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/737d6a1a1745bdd4041e73800a842a1086967d5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/737d6a1a1745bdd4041e73800a842a1086967d5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/737d6a1a1745bdd4041e73800a842a1086967d5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/737d6a1a1745bdd4041e73800a842a1086967d5d/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6ee2cc70024253d2670a4a317158b2a65251a1d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ee2cc70024253d2670a4a317158b2a65251a1d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ee2cc70024253d2670a4a317158b2a65251a1d1"}], "stats": {"total": 67, "additions": 44, "deletions": 23}, "files": [{"sha": "86caf6e6a0e24587a39cdbfa44e2912492c8120a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/737d6a1a1745bdd4041e73800a842a1086967d5d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/737d6a1a1745bdd4041e73800a842a1086967d5d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=737d6a1a1745bdd4041e73800a842a1086967d5d", "patch": "@@ -1,3 +1,23 @@\n+2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* rtl.h (predefined_function_abi): Declare.\n+\t(choose_hard_reg_mode): Take a pointer to a predefined_function_abi\n+\tinstead of a boolean call_save flag.\n+\t* config/gcn/gcn.c (gcn_hard_regno_caller_save_mode): Update call\n+\taccordingly.\n+\t* config/i386/i386.h (HARD_REGNO_CALLER_SAVE_MODE): Likewise.\n+\t* config/ia64/ia64.h (HARD_REGNO_CALLER_SAVE_MODE): Likewise.\n+\t* config/mips/mips.c (mips_hard_regno_caller_save_mode): Likewise.\n+\t* config/msp430/msp430.h (HARD_REGNO_CALLER_SAVE_MODE): Likewise.\n+\t* config/rs6000/rs6000.h (HARD_REGNO_CALLER_SAVE_MODE): Likewise.\n+\t* config/sh/sh.c (sh_hard_regno_caller_save_mode): Likewise.\n+\t* reginfo.c (init_reg_modes_target): Likewise.\n+\t(choose_hard_reg_mode): Take a pointer to a predefined_function_abi\n+\tinstead of a boolean call_save flag.\n+\t* targhooks.c: Include function-abi.h.\n+\t(default_dwarf_frame_reg_mode): Update call to choose_hard_reg_mode,\n+\tusing eh_edge_abi to choose the mode.\n+\n 2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* target.def (hard_regno_call_part_clobbered): Take an ABI"}, {"sha": "b5f09da173c6cbe1e51d628f6714ab24c5a8e62e", "filename": "gcc/config/gcn/gcn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/737d6a1a1745bdd4041e73800a842a1086967d5d/gcc%2Fconfig%2Fgcn%2Fgcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/737d6a1a1745bdd4041e73800a842a1086967d5d/gcc%2Fconfig%2Fgcn%2Fgcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.c?ref=737d6a1a1745bdd4041e73800a842a1086967d5d", "patch": "@@ -3017,7 +3017,7 @@ machine_mode\n gcn_hard_regno_caller_save_mode (unsigned int regno, unsigned int nregs,\n \t\t\t\t machine_mode regmode)\n {\n-  machine_mode result = choose_hard_reg_mode (regno, nregs, false);\n+  machine_mode result = choose_hard_reg_mode (regno, nregs, NULL);\n \n   if (VECTOR_MODE_P (result) && !VECTOR_MODE_P (regmode))\n     result = (nregs == 1 ? SImode : DImode);"}, {"sha": "9fe1f45e7d3c11ea13f84ced37a1983e39a8c76c", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/737d6a1a1745bdd4041e73800a842a1086967d5d/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/737d6a1a1745bdd4041e73800a842a1086967d5d/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=737d6a1a1745bdd4041e73800a842a1086967d5d", "patch": "@@ -1258,7 +1258,7 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define HARD_REGNO_CALLER_SAVE_MODE(REGNO, NREGS, MODE)\t\t\t\\\n   (CC_REGNO_P (REGNO) ? VOIDmode\t\t\t\t\t\\\n    : (MODE) == VOIDmode && (NREGS) != 1 ? VOIDmode\t\t\t\\\n-   : (MODE) == VOIDmode ? choose_hard_reg_mode ((REGNO), (NREGS), false) \\\n+   : (MODE) == VOIDmode ? choose_hard_reg_mode ((REGNO), (NREGS), NULL)\t\\\n    : (MODE) == HImode && !((GENERAL_REGNO_P (REGNO)\t\t\t\\\n \t\t\t    && TARGET_PARTIAL_REG_STALL)\t\t\\\n \t\t\t   || MASK_REGNO_P (REGNO)) ? SImode\t\t\\"}, {"sha": "fc985b4c170aa212990c28fdd37f8c75db8a3ef6", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/737d6a1a1745bdd4041e73800a842a1086967d5d/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/737d6a1a1745bdd4041e73800a842a1086967d5d/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=737d6a1a1745bdd4041e73800a842a1086967d5d", "patch": "@@ -562,7 +562,7 @@ while (0)\n \n #define HARD_REGNO_CALLER_SAVE_MODE(REGNO, NREGS, MODE) \\\n   ((FR_REGNO_P (REGNO) && (NREGS) == 1) ? RFmode        \\\n-   : choose_hard_reg_mode ((REGNO), (NREGS), false))\n+   : choose_hard_reg_mode ((REGNO), (NREGS), NULL))\n \f\n /* Handling Leaf Functions */\n "}, {"sha": "648d95f3808781dee8e530f7f66b0e069954c69c", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/737d6a1a1745bdd4041e73800a842a1086967d5d/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/737d6a1a1745bdd4041e73800a842a1086967d5d/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=737d6a1a1745bdd4041e73800a842a1086967d5d", "patch": "@@ -22174,7 +22174,7 @@ mips_hard_regno_caller_save_mode (unsigned int regno,\n   /* For performance, avoid saving/restoring upper parts of a register\n      by returning MODE as save mode when the mode is known.  */\n   if (mode == VOIDmode)\n-    return choose_hard_reg_mode (regno, nregs, false);\n+    return choose_hard_reg_mode (regno, nregs, NULL);\n   else\n     return mode;\n }"}, {"sha": "3449bd429aebad12401f9e8adfec09b1171180e6", "filename": "gcc/config/msp430/msp430.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/737d6a1a1745bdd4041e73800a842a1086967d5d/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/737d6a1a1745bdd4041e73800a842a1086967d5d/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.h?ref=737d6a1a1745bdd4041e73800a842a1086967d5d", "patch": "@@ -467,7 +467,7 @@ typedef struct\n    when spilling hard registers when they may contain PSImode values.  */\n #define HARD_REGNO_CALLER_SAVE_MODE(REGNO,NREGS,MODE) \\\n   ((TARGET_LARGE && ((NREGS) <= 2)) ? PSImode \\\n-   : choose_hard_reg_mode ((REGNO), (NREGS), false))\n+   : choose_hard_reg_mode ((REGNO), (NREGS), NULL))\n \n #define ACCUMULATE_OUTGOING_ARGS 1\n "}, {"sha": "27373c55ad65225f9a92346fa86e28664fe1a3cb", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/737d6a1a1745bdd4041e73800a842a1086967d5d/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/737d6a1a1745bdd4041e73800a842a1086967d5d/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=737d6a1a1745bdd4041e73800a842a1086967d5d", "patch": "@@ -1038,7 +1038,7 @@ enum data_align { align_abi, align_opt, align_both };\n    ? DFmode\t\t\t\t\t\t\t\t\\\n    : (MODE) == TDmode && FP_REGNO_P (REGNO)\t\t\t\t\\\n    ? DImode\t\t\t\t\t\t\t\t\\\n-   : choose_hard_reg_mode ((REGNO), (NREGS), false))\n+   : choose_hard_reg_mode ((REGNO), (NREGS), NULL))\n \n #define VSX_VECTOR_MODE(MODE)\t\t\\\n \t ((MODE) == V4SFmode\t\t\\"}, {"sha": "9917f2b9d34166e66fa4deff7c03f326cc674c84", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/737d6a1a1745bdd4041e73800a842a1086967d5d/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/737d6a1a1745bdd4041e73800a842a1086967d5d/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=737d6a1a1745bdd4041e73800a842a1086967d5d", "patch": "@@ -10637,7 +10637,7 @@ sh_hard_regno_caller_save_mode (unsigned int regno, unsigned int nregs,\n \t      && ((regno - FIRST_FP_REG) & 1) == 0)))\n     return mode;\n \n-  return choose_hard_reg_mode (regno, nregs, false);\n+  return choose_hard_reg_mode (regno, nregs, NULL);\n }\n \n /* Implement TARGET_CAN_CHANGE_MODE_CLASS.  */"}, {"sha": "265157fa83756f16a464ae2a302760a08817ea33", "filename": "gcc/reginfo.c", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/737d6a1a1745bdd4041e73800a842a1086967d5d/gcc%2Freginfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/737d6a1a1745bdd4041e73800a842a1086967d5d/gcc%2Freginfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freginfo.c?ref=737d6a1a1745bdd4041e73800a842a1086967d5d", "patch": "@@ -442,7 +442,7 @@ init_reg_modes_target (void)\n \n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n     {\n-      reg_raw_mode[i] = choose_hard_reg_mode (i, 1, false);\n+      reg_raw_mode[i] = choose_hard_reg_mode (i, 1, NULL);\n \n       /* If we couldn't find a valid mode, just use the previous mode\n \t if it is suitable, otherwise fall back on word_mode.  */\n@@ -550,10 +550,11 @@ memory_move_secondary_cost (machine_mode mode, reg_class_t rclass,\n \n /* Return a machine mode that is legitimate for hard reg REGNO and large\n    enough to save nregs.  If we can't find one, return VOIDmode.\n-   If CALL_SAVED is true, only consider modes that are call saved.  */\n+   If ABI is nonnull, only consider modes that are preserved across\n+   calls that use ABI.  */\n machine_mode\n choose_hard_reg_mode (unsigned int regno ATTRIBUTE_UNUSED,\n-\t\t      unsigned int nregs, bool call_saved)\n+\t\t      unsigned int nregs, const predefined_function_abi *abi)\n {\n   unsigned int /* machine_mode */ m;\n   machine_mode found_mode = VOIDmode, mode;\n@@ -567,32 +568,28 @@ choose_hard_reg_mode (unsigned int regno ATTRIBUTE_UNUSED,\n   FOR_EACH_MODE_IN_CLASS (mode, MODE_INT)\n     if (hard_regno_nregs (regno, mode) == nregs\n \t&& targetm.hard_regno_mode_ok (regno, mode)\n-\t&& (!call_saved\n-\t    || !targetm.hard_regno_call_part_clobbered (0, regno, mode))\n+\t&& (!abi || !abi->clobbers_reg_p (mode, regno))\n \t&& maybe_gt (GET_MODE_SIZE (mode), GET_MODE_SIZE (found_mode)))\n       found_mode = mode;\n \n   FOR_EACH_MODE_IN_CLASS (mode, MODE_FLOAT)\n     if (hard_regno_nregs (regno, mode) == nregs\n \t&& targetm.hard_regno_mode_ok (regno, mode)\n-\t&& (!call_saved\n-\t    || !targetm.hard_regno_call_part_clobbered (0, regno, mode))\n+\t&& (!abi || !abi->clobbers_reg_p (mode, regno))\n \t&& maybe_gt (GET_MODE_SIZE (mode), GET_MODE_SIZE (found_mode)))\n       found_mode = mode;\n \n   FOR_EACH_MODE_IN_CLASS (mode, MODE_VECTOR_FLOAT)\n     if (hard_regno_nregs (regno, mode) == nregs\n \t&& targetm.hard_regno_mode_ok (regno, mode)\n-\t&& (!call_saved\n-\t    || !targetm.hard_regno_call_part_clobbered (0, regno, mode))\n+\t&& (!abi || !abi->clobbers_reg_p (mode, regno))\n \t&& maybe_gt (GET_MODE_SIZE (mode), GET_MODE_SIZE (found_mode)))\n       found_mode = mode;\n \n   FOR_EACH_MODE_IN_CLASS (mode, MODE_VECTOR_INT)\n     if (hard_regno_nregs (regno, mode) == nregs\n \t&& targetm.hard_regno_mode_ok (regno, mode)\n-\t&& (!call_saved\n-\t    || !targetm.hard_regno_call_part_clobbered (0, regno, mode))\n+\t&& (!abi || !abi->clobbers_reg_p (mode, regno))\n \t&& maybe_gt (GET_MODE_SIZE (mode), GET_MODE_SIZE (found_mode)))\n       found_mode = mode;\n \n@@ -605,8 +602,7 @@ choose_hard_reg_mode (unsigned int regno ATTRIBUTE_UNUSED,\n       mode = (machine_mode) m;\n       if (hard_regno_nregs (regno, mode) == nregs\n \t  && targetm.hard_regno_mode_ok (regno, mode)\n-\t  && (!call_saved\n-\t      || !targetm.hard_regno_call_part_clobbered (0, regno, mode)))\n+\t  && (!abi || !abi->clobbers_reg_p (mode, regno)))\n \treturn mode;\n     }\n "}, {"sha": "554608cbb840653fa8af2ead3428ea23818d4670", "filename": "gcc/rtl.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/737d6a1a1745bdd4041e73800a842a1086967d5d/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/737d6a1a1745bdd4041e73800a842a1086967d5d/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=737d6a1a1745bdd4041e73800a842a1086967d5d", "patch": "@@ -36,6 +36,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"hard-reg-set.h\"\n \n+class predefined_function_abi;\n+\n /* Value used by some passes to \"recognize\" noop moves as valid\n  instructions.  */\n #define NOOP_MOVE_INSN_CODE\tINT_MAX\n@@ -3410,7 +3412,8 @@ extern bool val_signbit_known_clear_p (machine_mode,\n \t\t\t\t       unsigned HOST_WIDE_INT);\n \n /* In reginfo.c  */\n-extern machine_mode choose_hard_reg_mode (unsigned int, unsigned int, bool);\n+extern machine_mode choose_hard_reg_mode (unsigned int, unsigned int,\n+\t\t\t\t\t  const predefined_function_abi *);\n extern const HARD_REG_SET &simplifiable_subregs (const subreg_shape &);\n \n /* In emit-rtl.c  */"}, {"sha": "5445038137885ae8d994444fb2695b4f4114c549", "filename": "gcc/targhooks.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/737d6a1a1745bdd4041e73800a842a1086967d5d/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/737d6a1a1745bdd4041e73800a842a1086967d5d/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=737d6a1a1745bdd4041e73800a842a1086967d5d", "patch": "@@ -83,6 +83,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"real.h\"\n #include \"langhooks.h\"\n #include \"sbitmap.h\"\n+#include \"function-abi.h\"\n \n bool\n default_legitimate_address_p (machine_mode mode ATTRIBUTE_UNUSED,\n@@ -1928,8 +1929,9 @@ default_dwarf_frame_reg_mode (int regno)\n {\n   machine_mode save_mode = reg_raw_mode[regno];\n \n-  if (targetm.hard_regno_call_part_clobbered (0, regno, save_mode))\n-    save_mode = choose_hard_reg_mode (regno, 1, true);\n+  if (targetm.hard_regno_call_part_clobbered (eh_edge_abi.id (),\n+\t\t\t\t\t      regno, save_mode))\n+    save_mode = choose_hard_reg_mode (regno, 1, &eh_edge_abi);\n   return save_mode;\n }\n "}]}