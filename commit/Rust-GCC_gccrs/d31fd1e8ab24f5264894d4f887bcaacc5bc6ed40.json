{"sha": "d31fd1e8ab24f5264894d4f887bcaacc5bc6ed40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMxZmQxZThhYjI0ZjUyNjQ4OTRkNGY4ODdiY2FhY2M1YmM2ZWQ0MA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2019-02-03T16:48:41Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-02-03T16:48:41Z"}, "message": "re PR target/89071 (AVX vcvtsd2ss lets us avoid PXOR dependency breaking for scalar float<->double and other scalar xmm,xmm instructions)\n\n\tPR target/89071\n\t* config/i386/i386.md (*sqrt<mode>2_sse): Add (v,0) alternative.\n\tDo not prefer (v,v) alternative for non-AVX targets and (m,v)\n\talternative for speed when TARGET_SSE_PARTIAL_REG_DEPENDENCY is set.\n\t(*rcpsf2_sse): Ditto.\n\t(*rsqrtsf2_sse): Ditto.\n\t(sse4_1_round<mode<2): Ditto.\n\nFrom-SVN: r268496", "tree": {"sha": "11e17bf52abab0eb7f98daf964c893c107d034f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11e17bf52abab0eb7f98daf964c893c107d034f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d31fd1e8ab24f5264894d4f887bcaacc5bc6ed40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d31fd1e8ab24f5264894d4f887bcaacc5bc6ed40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d31fd1e8ab24f5264894d4f887bcaacc5bc6ed40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d31fd1e8ab24f5264894d4f887bcaacc5bc6ed40/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c8eaf058ed6452f3648950b1fa68443bc8e5c106", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8eaf058ed6452f3648950b1fa68443bc8e5c106", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8eaf058ed6452f3648950b1fa68443bc8e5c106"}], "stats": {"total": 94, "additions": 67, "deletions": 27}, "files": [{"sha": "2e4169dba9bfb81b93fdfa4d863e2d4a866a53bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d31fd1e8ab24f5264894d4f887bcaacc5bc6ed40/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d31fd1e8ab24f5264894d4f887bcaacc5bc6ed40/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d31fd1e8ab24f5264894d4f887bcaacc5bc6ed40", "patch": "@@ -1,3 +1,13 @@\n+2019-02-03  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/89071\n+\t* config/i386/i386.md (*sqrt<mode>2_sse): Add (v,0) alternative.\n+\tDo not prefer (v,v) alternative for non-AVX targets and (m,v)\n+\talternative for speed when TARGET_SSE_PARTIAL_REG_DEPENDENCY is set.\n+\t(*rcpsf2_sse): Ditto.\n+\t(*rsqrtsf2_sse): Ditto.\n+\t(sse4_1_round<mode<2): Ditto.\n+\n 2019-02-03  Richard Biener  <rguenther@suse.de>\n \n \tPR debug/87295"}, {"sha": "9948f77fca53c498d7e1be910c4dc68140904231", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 57, "deletions": 27, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d31fd1e8ab24f5264894d4f887bcaacc5bc6ed40/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d31fd1e8ab24f5264894d4f887bcaacc5bc6ed40/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=d31fd1e8ab24f5264894d4f887bcaacc5bc6ed40", "patch": "@@ -4472,9 +4472,9 @@\n    (set (match_dup 0) (float_extend:DF (match_dup 2)))]\n   \"operands[2] = lowpart_subreg (SFmode, operands[0], DFmode);\")\n \n-;; Break partial reg stall for cvtss2sd.  This splitter should split\n-;; late in the pass sequence (after register rename pass),\n-;; so allocated registers won't change anymore.\n+;; Break partial SSE register dependency stall.  This splitter should split\n+;; late in the pass sequence (after register rename pass), so allocated\n+;; registers won't change anymore\n \n (define_split\n   [(set (match_operand:DF 0 \"sse_reg_operand\")\n@@ -4632,9 +4632,9 @@\n    (set (match_dup 0) (float_truncate:SF (match_dup 2)))]\n   \"operands[2] = lowpart_subreg (DFmode, operands[0], SFmode);\")\n \n-;; Break partial reg stall for cvtsd2ss.  This splitter should split\n-;; late in the pass sequence (after register rename pass),\n-;; so allocated registers won't change anymore.\n+;; Break partial SSE register dependency stall.  This splitter should split\n+;; late in the pass sequence (after register rename pass), so allocated\n+;; registers won't change anymore\n \n (define_split\n   [(set (match_operand:SF 0 \"sse_reg_operand\")\n@@ -5137,7 +5137,7 @@\n    (set_attr \"unit\" \"i387\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n-;; Avoid partial SSE register dependency stalls.  This splitter should split\n+;; Break partial SSE register dependency stall.  This splitter should split\n ;; late in the pass sequence (after register rename pass), so allocated\n ;; registers won't change anymore\n \n@@ -14765,18 +14765,26 @@\n \t (symbol_ref \"false\"))))])\n \n (define_insn \"*rcpsf2_sse\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=x,x\")\n-\t(unspec:SF [(match_operand:SF 1 \"nonimmediate_operand\" \"x,m\")]\n+  [(set (match_operand:SF 0 \"register_operand\" \"=x,x,x\")\n+\t(unspec:SF [(match_operand:SF 1 \"nonimmediate_operand\" \"0,x,m\")]\n \t\t   UNSPEC_RCP))]\n   \"TARGET_SSE && TARGET_SSE_MATH\"\n   \"@\n+   %vrcpss\\t{%d1, %0|%0, %d1}\n    %vrcpss\\t{%d1, %0|%0, %d1}\n    %vrcpss\\t{%1, %d0|%d0, %1}\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"atom_sse_attr\" \"rcp\")\n    (set_attr \"btver2_sse_attr\" \"rcp\")\n    (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"SF\")])\n+   (set_attr \"mode\" \"SF\")\n+   (set (attr \"preferred_for_speed\")\n+     (cond [(eq_attr \"alternative\" \"1\")\n+\t      (symbol_ref \"TARGET_AVX || !TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n+\t   (eq_attr \"alternative\" \"2\")\n+\t      (symbol_ref \"!TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n+\t   ]\n+\t   (symbol_ref \"true\")))])\n \n (define_insn \"*fop_xf_1_i387\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n@@ -15003,18 +15011,26 @@\n    (set_attr \"bdver1_decode\" \"direct\")])\n \n (define_insn \"*rsqrtsf2_sse\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=x,x\")\n-\t(unspec:SF [(match_operand:SF 1 \"nonimmediate_operand\" \"x,m\")]\n+  [(set (match_operand:SF 0 \"register_operand\" \"=x,x,x\")\n+\t(unspec:SF [(match_operand:SF 1 \"nonimmediate_operand\" \"0,x,m\")]\n \t\t   UNSPEC_RSQRT))]\n   \"TARGET_SSE && TARGET_SSE_MATH\"\n   \"@\n+   %vrsqrtss\\t{%d1, %0|%0, %d1}\n    %vrsqrtss\\t{%d1, %0|%0, %d1}\n    %vrsqrtss\\t{%1, %d0|%d0, %1}\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"atom_sse_attr\" \"rcp\")\n    (set_attr \"btver2_sse_attr\" \"rcp\")\n    (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"SF\")])\n+   (set_attr \"mode\" \"SF\")\n+   (set (attr \"preferred_for_speed\")\n+     (cond [(eq_attr \"alternative\" \"1\")\n+\t      (symbol_ref \"TARGET_AVX || !TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n+\t   (eq_attr \"alternative\" \"2\")\n+\t      (symbol_ref \"!TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n+\t   ]\n+\t   (symbol_ref \"true\")))])\n \n (define_expand \"rsqrtsf2\"\n   [(set (match_operand:SF 0 \"register_operand\")\n@@ -15027,21 +15043,26 @@\n })\n \n (define_insn \"*sqrt<mode>2_sse\"\n-  [(set (match_operand:MODEF 0 \"register_operand\" \"=v,v\")\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=v,v,v\")\n \t(sqrt:MODEF\n-\t  (match_operand:MODEF 1 \"nonimmediate_operand\" \"v,m\")))]\n+\t  (match_operand:MODEF 1 \"nonimmediate_operand\" \"0,v,m\")))]\n   \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\"\n   \"@\n+   %vsqrt<ssemodesuffix>\\t{%d1, %0|%0, %d1}\n    %vsqrt<ssemodesuffix>\\t{%d1, %0|%0, %d1}\n    %vsqrt<ssemodesuffix>\\t{%1, %d0|%d0, %1}\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"atom_sse_attr\" \"sqrt\")\n    (set_attr \"btver2_sse_attr\" \"sqrt\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"<MODE>\")\n-   (set_attr \"athlon_decode\" \"*\")\n-   (set_attr \"amdfam10_decode\" \"*\")\n-   (set_attr \"bdver1_decode\" \"*\")])\n+   (set (attr \"preferred_for_speed\")\n+     (cond [(eq_attr \"alternative\" \"1\")\n+\t      (symbol_ref \"TARGET_AVX || !TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n+\t   (eq_attr \"alternative\" \"2\")\n+\t      (symbol_ref \"!TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n+\t   ]\n+\t   (symbol_ref \"true\")))])\n \n (define_expand \"sqrt<mode>2\"\n   [(set (match_operand:MODEF 0 \"register_operand\")\n@@ -16175,21 +16196,30 @@\n \f\n \n (define_insn \"sse4_1_round<mode>2\"\n-  [(set (match_operand:MODEF 0 \"register_operand\" \"=x,x,v\")\n-\t(unspec:MODEF [(match_operand:MODEF 1 \"nonimmediate_operand\" \"x,m,vm\")\n-\t\t       (match_operand:SI 2 \"const_0_to_15_operand\" \"n,n,n\")]\n-\t\t      UNSPEC_ROUND))]\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=x,x,x,v\")\n+\t(unspec:MODEF\n+\t  [(match_operand:MODEF 1 \"nonimmediate_operand\" \"0,x,m,vm\")\n+\t   (match_operand:SI 2 \"const_0_to_15_operand\" \"n,n,n,n\")]\n+\t  UNSPEC_ROUND))]\n   \"TARGET_SSE4_1\"\n   \"@\n+   %vround<ssemodesuffix>\\t{%2, %d1, %0|%0, %d1, %2}\n    %vround<ssemodesuffix>\\t{%2, %d1, %0|%0, %d1, %2}\n    %vround<ssemodesuffix>\\t{%2, %1, %d0|%d0, %1, %2}\n    vrndscale<ssemodesuffix>\\t{%2, %1, %d0|%d0, %1, %2}\"\n   [(set_attr \"type\" \"ssecvt\")\n-   (set_attr \"prefix_extra\" \"1,1,*\")\n-   (set_attr \"length_immediate\" \"*,*,1\")\n-   (set_attr \"prefix\" \"maybe_vex,maybe_vex,evex\")\n-   (set_attr \"isa\" \"noavx512f,noavx512f,avx512f\")\n-   (set_attr \"mode\" \"<MODE>\")])\n+   (set_attr \"prefix_extra\" \"1,1,1,*\")\n+   (set_attr \"length_immediate\" \"*,*,*,1\")\n+   (set_attr \"prefix\" \"maybe_vex,maybe_vex,maybe_vex,evex\")\n+   (set_attr \"isa\" \"noavx512f,noavx512f,noavx512f,avx512f\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set (attr \"preferred_for_speed\")\n+     (cond [(eq_attr \"alternative\" \"1\")\n+\t      (symbol_ref \"TARGET_AVX || !TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n+\t   (eq_attr \"alternative\" \"2\")\n+\t      (symbol_ref \"!TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n+\t   ]\n+\t   (symbol_ref \"true\")))])\n \n (define_insn \"rintxf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")"}]}