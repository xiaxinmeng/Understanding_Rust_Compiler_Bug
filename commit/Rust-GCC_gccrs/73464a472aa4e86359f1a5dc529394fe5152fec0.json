{"sha": "73464a472aa4e86359f1a5dc529394fe5152fec0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM0NjRhNDcyYWE0ZTg2MzU5ZjFhNWRjNTI5Mzk0ZmU1MTUyZmVjMA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-07-16T13:44:32Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-07-16T13:44:32Z"}, "message": "libstdc++: Give split_view::_Sentinel a default ctor [PR101214]\n\nThis gives the new split_view's sentinel type a defaulted default\nconstructor, something which was overlooked in r12-1665.  This patch\nalso fixes a couple of other issues with the new split_view as reported\nin the PR.\n\n\tPR libstdc++/101214\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges (split_view::split_view): Use std::move.\n\t(split_view::_Iterator::_Iterator): Remove redundant\n\tdefault_initializable constraint.\n\t(split_view::_Sentinel::_Sentinel): Declare.\n\t* testsuite/std/ranges/adaptors/split.cc (test02): New test.", "tree": {"sha": "d9bf9a2f0f268e6dbff6de3c13c330fb7440557a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9bf9a2f0f268e6dbff6de3c13c330fb7440557a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73464a472aa4e86359f1a5dc529394fe5152fec0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73464a472aa4e86359f1a5dc529394fe5152fec0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73464a472aa4e86359f1a5dc529394fe5152fec0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73464a472aa4e86359f1a5dc529394fe5152fec0/comments", "author": null, "committer": null, "parents": [{"sha": "e32234536f361796e7cad8ed69a1c0bb46ee55de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e32234536f361796e7cad8ed69a1c0bb46ee55de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e32234536f361796e7cad8ed69a1c0bb46ee55de"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "df74ac9dc194dcefdd67bb181cfb3254f59361a7", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73464a472aa4e86359f1a5dc529394fe5152fec0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73464a472aa4e86359f1a5dc529394fe5152fec0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=73464a472aa4e86359f1a5dc529394fe5152fec0", "patch": "@@ -3306,7 +3306,7 @@ namespace views::__adaptor\n \t&& constructible_from<_Pattern, single_view<range_value_t<_Range>>>\n     constexpr\n     split_view(_Range&& __r, range_value_t<_Range> __e)\n-      : _M_pattern(views::single(__e)),\n+      : _M_pattern(views::single(std::move(__e))),\n \t_M_base(views::all(std::forward<_Range>(__r)))\n     { }\n \n@@ -3364,7 +3364,7 @@ namespace views::__adaptor\n       using value_type = subrange<iterator_t<_Vp>>;\n       using difference_type = range_difference_t<_Vp>;\n \n-      _Iterator() requires default_initializable<iterator_t<_Vp>> = default;\n+      _Iterator() = default;\n \n       constexpr\n       _Iterator(split_view* __parent,\n@@ -3429,6 +3429,8 @@ namespace views::__adaptor\n       { return __x._M_cur == _M_end && !__x._M_trailing_empty; }\n \n     public:\n+      _Sentinel() = default;\n+\n       constexpr explicit\n       _Sentinel(split_view* __parent)\n \t: _M_end(ranges::end(__parent->_M_base))"}, {"sha": "b4e01fea6e4abc22d8418b0a33230e135da3096a", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/split.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73464a472aa4e86359f1a5dc529394fe5152fec0/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fsplit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73464a472aa4e86359f1a5dc529394fe5152fec0/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fsplit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fsplit.cc?ref=73464a472aa4e86359f1a5dc529394fe5152fec0", "patch": "@@ -46,6 +46,16 @@ test01()\n   VERIFY( ranges::equal(ints, (int[]){1,2,3,4}) );\n }\n \n+void\n+test02()\n+{\n+  // PR libstdc++/101214\n+  auto v = views::iota(0) | views::take(5) | views::split(0);\n+  static_assert(!ranges::common_range<decltype(v)>);\n+  static_assert(std::default_initializable<decltype(v.end())>);\n+  static_assert(std::sentinel_for<decltype(v.end()), decltype(v.begin())>);\n+}\n+\n // The following testcases are adapted from lazy_split.cc.\n namespace from_lazy_split_cc\n {\n@@ -189,6 +199,7 @@ int\n main()\n {\n   test01();\n+  test02();\n \n   from_lazy_split_cc::test01();\n   from_lazy_split_cc::test02();"}]}