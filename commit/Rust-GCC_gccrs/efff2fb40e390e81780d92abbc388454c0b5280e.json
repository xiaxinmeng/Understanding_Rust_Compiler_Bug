{"sha": "efff2fb40e390e81780d92abbc388454c0b5280e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZmZjJmYjQwZTM5MGU4MTc4MGQ5MmFiYmMzODg0NTRjMGI1MjgwZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-01-29T21:41:54Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-01-29T21:41:54Z"}, "message": "re PR c++/51327 ([c++0x] [4.7 Regression] ICE with invalid constexpr parameter)\n\n/cp\n2012-01-29  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/51327\n\t* class.c (explain_non_literal_class): Correctly handle implicitly\n\tdeleted constructors.\n\n/testsuite\n2012-01-29  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/51327\n\t* g++.dg/cpp0x/constexpr-ice6.C: New.\n\nFrom-SVN: r183684", "tree": {"sha": "b7180f2d92cfe3941742a2a917126601fb0da61a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7180f2d92cfe3941742a2a917126601fb0da61a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efff2fb40e390e81780d92abbc388454c0b5280e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efff2fb40e390e81780d92abbc388454c0b5280e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efff2fb40e390e81780d92abbc388454c0b5280e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efff2fb40e390e81780d92abbc388454c0b5280e/comments", "author": null, "committer": null, "parents": [{"sha": "1e86df8d39f1037f78a85c053909384a9e51f26e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e86df8d39f1037f78a85c053909384a9e51f26e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e86df8d39f1037f78a85c053909384a9e51f26e"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "5d834d9ae5d4ee03a2f9d0e78ac449269c2898d7", "filename": "gcc/cp/class.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efff2fb40e390e81780d92abbc388454c0b5280e/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efff2fb40e390e81780d92abbc388454c0b5280e/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=efff2fb40e390e81780d92abbc388454c0b5280e", "patch": "@@ -4910,7 +4910,27 @@ explain_non_literal_class (tree t)\n \t      \"is not a copy or move constructor\", t);\n       if (TYPE_HAS_DEFAULT_CONSTRUCTOR (t)\n \t  && !type_has_user_provided_default_constructor (t))\n-\texplain_invalid_constexpr_fn (locate_ctor (t));\n+\t{\n+\t  /* Note that we can't simply call locate_ctor because when the\n+\t     constructor is deleted it just returns NULL_TREE.  */\n+\t  tree fns;\n+\t  for (fns = CLASSTYPE_CONSTRUCTORS (t); fns; fns = OVL_NEXT (fns))\n+\t    {\n+\t      tree fn = OVL_CURRENT (fns);\n+\t      tree parms = TYPE_ARG_TYPES (TREE_TYPE (fn));\n+\n+\t      parms = skip_artificial_parms_for (fn, parms);\n+\n+\t      if (sufficient_parms_p (parms))\n+\t\t{\n+\t\t  if (DECL_DELETED_FN (fn))\n+\t\t    maybe_explain_implicit_delete (fn);\n+\t\t  else\n+\t\t    explain_invalid_constexpr_fn (fn);\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t}\n     }\n   else\n     {"}, {"sha": "1a494bb32361b9614df18fe28352392f99256ef3", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ice6.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efff2fb40e390e81780d92abbc388454c0b5280e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ice6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efff2fb40e390e81780d92abbc388454c0b5280e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ice6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ice6.C?ref=efff2fb40e390e81780d92abbc388454c0b5280e", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/51327\n+// { dg-options -std=c++0x }\n+\n+struct A\n+{\n+  A(int);\n+};\n+\n+struct B : A {};                   // { dg-error \"no matching\" }\n+\n+constexpr int foo(B) { return 0; } // { dg-error \"invalid type\" }"}]}