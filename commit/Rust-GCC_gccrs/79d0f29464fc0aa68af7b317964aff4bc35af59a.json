{"sha": "79d0f29464fc0aa68af7b317964aff4bc35af59a", "node_id": "C_kwDOANBUbNoAKDc5ZDBmMjk0NjRmYzBhYTY4YWY3YjMxNzk2NGFmZjRiYzM1YWY1OWE", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-04T15:13:52Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-04T15:52:52Z"}, "message": "Fix ICE in audodref mappings when argument is a method call\n\nSimilar to the fix in 405d9f1d135771015199546cd1c224ba589ab48d when we have\narguments that our method calls. The id used for storing the autoderef\nmappings being the method call itself rather than the receiver argument\nit will cause an ICE when we are type checking all arguments for the case\nof:\n\n  Foo(a, bar.baz(123))\n\nThis ensures we store the autoderef mappings directly on the reciever\ninstead.", "tree": {"sha": "8bc08398524b309e1e2e4e19862c7dbd145e9341", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bc08398524b309e1e2e4e19862c7dbd145e9341"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79d0f29464fc0aa68af7b317964aff4bc35af59a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79d0f29464fc0aa68af7b317964aff4bc35af59a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79d0f29464fc0aa68af7b317964aff4bc35af59a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79d0f29464fc0aa68af7b317964aff4bc35af59a/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f88307147ac7b63c315aab2e81811e985a867a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f88307147ac7b63c315aab2e81811e985a867a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f88307147ac7b63c315aab2e81811e985a867a7"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "8576cf2fd19962ebd3f4c4fbc0d709abf42baf70", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d0f29464fc0aa68af7b317964aff4bc35af59a/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d0f29464fc0aa68af7b317964aff4bc35af59a/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=79d0f29464fc0aa68af7b317964aff4bc35af59a", "patch": "@@ -1035,9 +1035,11 @@ CompileExpr::visit (HIR::MethodCallExpr &expr)\n     }\n \n   // lookup the autoderef mappings\n+  HirId autoderef_mappings_id\n+    = expr.get_receiver ()->get_mappings ().get_hirid ();\n   std::vector<Resolver::Adjustment> *adjustments = nullptr;\n-  ok = ctx->get_tyctx ()->lookup_autoderef_mappings (\n-    expr.get_mappings ().get_hirid (), &adjustments);\n+  ok = ctx->get_tyctx ()->lookup_autoderef_mappings (autoderef_mappings_id,\n+\t\t\t\t\t\t     &adjustments);\n   rust_assert (ok);\n \n   // apply adjustments for the fn call"}, {"sha": "9c31284060e6063be93ca19008a8e90f63faab00", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d0f29464fc0aa68af7b317964aff4bc35af59a/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d0f29464fc0aa68af7b317964aff4bc35af59a/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc?ref=79d0f29464fc0aa68af7b317964aff4bc35af59a", "patch": "@@ -324,8 +324,12 @@ TypeCheckExpr::visit (HIR::MethodCallExpr &expr)\n   Adjuster adj (receiver_tyty);\n   TyTy::BaseType *adjusted_self = adj.adjust_type (candidate.adjustments);\n \n-  // store the adjustments for code-generation to know what to do\n-  context->insert_autoderef_mappings (expr.get_mappings ().get_hirid (),\n+  // store the adjustments for code-generation to know what to do which must be\n+  // stored onto the receiver to so as we don't trigger duplicate deref mappings\n+  // ICE when an argument is a method call\n+  HirId autoderef_mappings_id\n+    = expr.get_receiver ()->get_mappings ().get_hirid ();\n+  context->insert_autoderef_mappings (autoderef_mappings_id,\n \t\t\t\t      std::move (candidate.adjustments));\n \n   PathProbeCandidate &resolved_candidate = candidate.candidate;"}]}