{"sha": "9fc023cc8de6df11cad28dfa88f5e4f60d3f68e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZjMDIzY2M4ZGU2ZGYxMWNhZDI4ZGZhODhmNWU0ZjYwZDNmNjhlMw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2005-12-09T22:44:23Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2005-12-09T22:44:23Z"}, "message": "bfin.c: Include \"cgraph.h\".\n\n\t* config/bfin/bfin.c: Include \"cgraph.h\".\n\t(bfin_load_pic_reg): Omit loading pic reg if in a local function.\n\tReturn the reg that holds the pointer to the GOT.\n\t(bfin_expand_prologue): Use return value of bfin_load_pic_reg when\n\tdoing stack checking.\n\nFrom-SVN: r108318", "tree": {"sha": "e5e9fd55901f905fd347c014a772abffabbea651", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5e9fd55901f905fd347c014a772abffabbea651"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fc023cc8de6df11cad28dfa88f5e4f60d3f68e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc023cc8de6df11cad28dfa88f5e4f60d3f68e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fc023cc8de6df11cad28dfa88f5e4f60d3f68e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc023cc8de6df11cad28dfa88f5e4f60d3f68e3/comments", "author": null, "committer": null, "parents": [{"sha": "127203ac0cf1ef32fd2c4da5f6f9f7eda1f80cac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/127203ac0cf1ef32fd2c4da5f6f9f7eda1f80cac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/127203ac0cf1ef32fd2c4da5f6f9f7eda1f80cac"}], "stats": {"total": 28, "additions": 23, "deletions": 5}, "files": [{"sha": "fe7abdcbe2fa7b1ae0dc8653e5c50ebd4e0baeef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc023cc8de6df11cad28dfa88f5e4f60d3f68e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc023cc8de6df11cad28dfa88f5e4f60d3f68e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9fc023cc8de6df11cad28dfa88f5e4f60d3f68e3", "patch": "@@ -1,3 +1,11 @@\n+2005-12-09  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\t* config/bfin/bfin.c: Include \"cgraph.h\".\n+\t(bfin_load_pic_reg): Omit loading pic reg if in a local function.\n+\tReturn the reg that holds the pointer to the GOT.\n+\t(bfin_expand_prologue): Use return value of bfin_load_pic_reg when\n+\tdoing stack checking.\n+\n 2005-12-09  Diego Novillo  <dnovillo@redhat.com>\n \n \t* tree.c (recompute_tree_invariant_for_addr_expr): Rename from"}, {"sha": "b60716d9f97d9aec04b80044b362731181fdf5eb", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc023cc8de6df11cad28dfa88f5e4f60d3f68e3/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc023cc8de6df11cad28dfa88f5e4f60d3f68e3/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=9fc023cc8de6df11cad28dfa88f5e4f60d3f68e3", "patch": "@@ -45,6 +45,7 @@\n #include \"recog.h\"\n #include \"ggc.h\"\n #include \"integrate.h\"\n+#include \"cgraph.h\"\n #include \"langhooks.h\"\n #include \"bfin-protos.h\"\n #include \"tm-preds.h\"\n@@ -863,10 +864,19 @@ expand_interrupt_handler_epilogue (rtx spreg, e_funkind fkind)\n /* Used while emitting the prologue to generate code to load the correct value\n    into the PIC register, which is passed in DEST.  */\n \n-static void\n+static rtx\n bfin_load_pic_reg (rtx dest)\n {\n+  struct cgraph_local_info *i = NULL;\n   rtx addr, insn;\n+ \n+  if (flag_unit_at_a_time)\n+    i = cgraph_local_info (current_function_decl);\n+ \n+  /* Functions local to the translation unit don't need to reload the\n+     pic reg, since the caller always passes a usable one.  */\n+  if (i && i->local)\n+    return pic_offset_table_rtx;\n       \n   if (bfin_lib_id_given)\n     addr = plus_constant (pic_offset_table_rtx, -4 - bfin_library_id * 4);\n@@ -876,6 +886,7 @@ bfin_load_pic_reg (rtx dest)\n \t\t\t\t\t UNSPEC_LIBRARY_OFFSET));\n   insn = emit_insn (gen_movsi (dest, gen_rtx_MEM (Pmode, addr)));\n   REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_MAYBE_DEAD, const0_rtx, NULL);\n+  return dest;\n }\n \n /* Generate RTL for the prologue of the current function.  */\n@@ -908,11 +919,10 @@ bfin_expand_prologue (void)\n \t  if (TARGET_ID_SHARED_LIBRARY)\n \t    {\n \t      rtx p1reg = gen_rtx_REG (Pmode, REG_P1);\n-\t      rtx r3reg = gen_rtx_REG (Pmode, REG_R3);\n \t      rtx val;\n-\t      pic_reg_loaded = p2reg;\n-\t      bfin_load_pic_reg (pic_reg_loaded);\n-\t      val = legitimize_pic_address (stack_limit_rtx, p1reg, p2reg);\n+\t      pic_reg_loaded = bfin_load_pic_reg (p2reg);\n+\t      val = legitimize_pic_address (stack_limit_rtx, p1reg,\n+\t\t\t\t\t    pic_reg_loaded);\n \t      emit_move_insn (p1reg, val);\n \t      frame_related_constant_load (p2reg, offset, FALSE);\n \t      emit_insn (gen_addsi3 (p2reg, p2reg, p1reg));"}]}