{"sha": "8c9abf1f383f4273aba146de4ea9c216958059a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM5YWJmMWYzODNmNDI3M2FiYTE0NmRlNGVhOWMyMTY5NTgwNTlhMQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2009-02-22T18:43:30Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2009-02-22T18:43:30Z"}, "message": "make-temp-file.c (<windows.h>): Include on Windows.\n\n\t* make-temp-file.c (<windows.h>): Include on Windows.\n\t(choose_tmpdir): On Windows, use GetTempPath.\n\nFrom-SVN: r144375", "tree": {"sha": "5040628f6f2636b492320ef004f8221f02342596", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5040628f6f2636b492320ef004f8221f02342596"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c9abf1f383f4273aba146de4ea9c216958059a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c9abf1f383f4273aba146de4ea9c216958059a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c9abf1f383f4273aba146de4ea9c216958059a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c9abf1f383f4273aba146de4ea9c216958059a1/comments", "author": null, "committer": null, "parents": [{"sha": "1f20025aa273c4c173ce0bc95fed42309e411e9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f20025aa273c4c173ce0bc95fed42309e411e9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f20025aa273c4c173ce0bc95fed42309e411e9e"}], "stats": {"total": 92, "additions": 61, "deletions": 31}, "files": [{"sha": "db7d2878bc050af1f418fbbffed17b3ba7e3a8d2", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9abf1f383f4273aba146de4ea9c216958059a1/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9abf1f383f4273aba146de4ea9c216958059a1/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=8c9abf1f383f4273aba146de4ea9c216958059a1", "patch": "@@ -1,3 +1,8 @@\n+2009-02-21  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* make-temp-file.c (<windows.h>): Include on Windows.\n+\t(choose_tmpdir): On Windows, use GetTempPath.\n+\n 2009-01-18  Dave Korn  <dave.korn.cygwin@gmail.com>\n \n \t* configure.ac (funcs, vars, checkfuncs):  Don't munge on Cygwin,"}, {"sha": "eadcf8502137f111a7463f0c6b59f6a633f58a3e", "filename": "libiberty/make-temp-file.c", "status": "modified", "additions": 56, "deletions": 31, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9abf1f383f4273aba146de4ea9c216958059a1/libiberty%2Fmake-temp-file.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9abf1f383f4273aba146de4ea9c216958059a1/libiberty%2Fmake-temp-file.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmake-temp-file.c?ref=8c9abf1f383f4273aba146de4ea9c216958059a1", "patch": "@@ -36,6 +36,9 @@ Boston, MA 02110-1301, USA.  */\n #ifdef HAVE_SYS_FILE_H\n #include <sys/file.h>   /* May get R_OK, etc. on some systems.  */\n #endif\n+#if defined(_WIN32) && !defined(__CYGWIN__)\n+#include <windows.h>\n+#endif\n \n #ifndef R_OK\n #define R_OK 4\n@@ -56,6 +59,8 @@ extern int mkstemps (char *, int);\n #define TEMP_FILE \"ccXXXXXX\"\n #define TEMP_FILE_LEN (sizeof(TEMP_FILE) - 1)\n \n+#if !defined(_WIN32) || defined(__CYGWIN__)\n+\n /* Subroutine of choose_tmpdir.\n    If BASE is non-NULL, return it.\n    Otherwise it checks if DIR is a usable directory.\n@@ -81,6 +86,8 @@ static const char usrtmp[] =\n static const char vartmp[] =\n { DIR_SEPARATOR, 'v', 'a', 'r', DIR_SEPARATOR, 't', 'm', 'p', 0 };\n \n+#endif\n+\n static char *memoized_tmpdir;\n \n /*\n@@ -97,40 +104,58 @@ files in.\n char *\n choose_tmpdir (void)\n {\n-  const char *base = 0;\n-  char *tmpdir;\n-  unsigned int len;\n-\n-  if (memoized_tmpdir)\n-    return memoized_tmpdir;\n-\n-  base = try_dir (getenv (\"TMPDIR\"), base);\n-  base = try_dir (getenv (\"TMP\"), base);\n-  base = try_dir (getenv (\"TEMP\"), base);\n-\n+  if (!memoized_tmpdir)\n+    {\n+#if !defined(_WIN32) || defined(__CYGWIN__)\n+      const char *base = 0;\n+      char *tmpdir;\n+      unsigned int len;\n+      \n+      base = try_dir (getenv (\"TMPDIR\"), base);\n+      base = try_dir (getenv (\"TMP\"), base);\n+      base = try_dir (getenv (\"TEMP\"), base);\n+      \n #ifdef P_tmpdir\n-  base = try_dir (P_tmpdir, base);\n+      base = try_dir (P_tmpdir, base);\n #endif\n \n-  /* Try /var/tmp, /usr/tmp, then /tmp.  */\n-  base = try_dir (vartmp, base);\n-  base = try_dir (usrtmp, base);\n-  base = try_dir (tmp, base);\n- \n-  /* If all else fails, use the current directory!  */\n-  if (base == 0)\n-    base = \".\";\n-\n-  /* Append DIR_SEPARATOR to the directory we've chosen\n-     and return it.  */\n-  len = strlen (base);\n-  tmpdir = XNEWVEC (char, len + 2);\n-  strcpy (tmpdir, base);\n-  tmpdir[len] = DIR_SEPARATOR;\n-  tmpdir[len+1] = '\\0';\n-\n-  memoized_tmpdir = tmpdir;\n-  return tmpdir;\n+      /* Try /var/tmp, /usr/tmp, then /tmp.  */\n+      base = try_dir (vartmp, base);\n+      base = try_dir (usrtmp, base);\n+      base = try_dir (tmp, base);\n+      \n+      /* If all else fails, use the current directory!  */\n+      if (base == 0)\n+\tbase = \".\";\n+      /* Append DIR_SEPARATOR to the directory we've chosen\n+\t and return it.  */\n+      len = strlen (base);\n+      tmpdir = XNEWVEC (char, len + 2);\n+      strcpy (tmpdir, base);\n+      tmpdir[len] = DIR_SEPARATOR;\n+      tmpdir[len+1] = '\\0';\n+      memoized_tmpdir = tmpdir;\n+#else /* defined(_WIN32) && !defined(__CYGWIN__) */\n+      DWORD len;\n+\n+      /* Figure out how much space we need.  */\n+      len = GetTempPath(0, NULL);\n+      if (len)\n+\t{\n+\t  memoized_tmpdir = XNEWVEC (char, len);\n+\t  if (!GetTempPath(len, memoized_tmpdir))\n+\t    {\n+\t      XDELETEVEC (memoized_tmpdir);\n+\t      memoized_tmpdir = NULL;\n+\t    }\n+\t}\n+      if (!memoized_tmpdir)\n+\t/* If all else fails, use the current directory.  */\n+\tmemoized_tmpdir = xstrdup (\".\\\\\");\n+#endif /* defined(_WIN32) && !defined(__CYGWIN__) */\n+    }\n+\n+  return memoized_tmpdir;\n }\n \n /*"}]}