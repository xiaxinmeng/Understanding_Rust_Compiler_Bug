{"sha": "38e55ac9e0ee61b20b52115171e67d3c3e497a02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhlNTVhYzllMGVlNjFiMjBiNTIxMTUxNzFlNjdkM2MzZTQ5N2EwMg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2012-05-19T15:26:30Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2012-05-19T15:26:30Z"}, "message": "* cgraphunit.c (handle_alias_pairs): Cleanup; handle all types of aliases.\n\nFrom-SVN: r187680", "tree": {"sha": "df46674937cbe724d4b48f02646392b55d6cdb37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df46674937cbe724d4b48f02646392b55d6cdb37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38e55ac9e0ee61b20b52115171e67d3c3e497a02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38e55ac9e0ee61b20b52115171e67d3c3e497a02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38e55ac9e0ee61b20b52115171e67d3c3e497a02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38e55ac9e0ee61b20b52115171e67d3c3e497a02/comments", "author": null, "committer": null, "parents": [{"sha": "c44c2088f77877c43b110c508bbfec492ba487a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c44c2088f77877c43b110c508bbfec492ba487a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c44c2088f77877c43b110c508bbfec492ba487a7"}], "stats": {"total": 91, "additions": 45, "deletions": 46}, "files": [{"sha": "63b7674b2b2d8c0b5a5384a79d030a414205854e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e55ac9e0ee61b20b52115171e67d3c3e497a02/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e55ac9e0ee61b20b52115171e67d3c3e497a02/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=38e55ac9e0ee61b20b52115171e67d3c3e497a02", "patch": "@@ -1,3 +1,7 @@\n+2012-05-18  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraphunit.c (handle_alias_pairs): Cleanup; handle all types of aliases.\n+\n 2012-05-18  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraphbuild.c (record_reference): Update."}, {"sha": "7cd9fdf02b1f2f7ce03026d1c6cee772d5de0aa4", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 41, "deletions": 46, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e55ac9e0ee61b20b52115171e67d3c3e497a02/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e55ac9e0ee61b20b52115171e67d3c3e497a02/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=38e55ac9e0ee61b20b52115171e67d3c3e497a02", "patch": "@@ -1030,68 +1030,63 @@ handle_alias_pairs (void)\n {\n   alias_pair *p;\n   unsigned i;\n-  struct cgraph_node *target_node;\n-  struct cgraph_node *src_node;\n-  struct varpool_node *target_vnode;\n   \n   for (i = 0; VEC_iterate (alias_pair, alias_pairs, i, p);)\n     {\n-      if (TREE_CODE (p->decl) == FUNCTION_DECL\n-\t  && (target_node = cgraph_node_for_asm (p->target)) != NULL)\n-\t{\n-\t  src_node = cgraph_get_node (p->decl);\n-\t  if (src_node && src_node->local.finalized)\n-            cgraph_reset_node (src_node);\n-\t  /* Normally EXTERNAL flag is used to mark external inlines,\n-\t     however for aliases it seems to be allowed to use it w/o\n-\t     any meaning. See gcc.dg/attr-alias-3.c  \n-\t     However for weakref we insist on EXTERNAL flag being set.\n-\t     See gcc.dg/attr-alias-5.c  */\n-\t  if (DECL_EXTERNAL (p->decl))\n-\t    DECL_EXTERNAL (p->decl)\n-\t      = lookup_attribute (\"weakref\",\n-\t\t\t\t  DECL_ATTRIBUTES (p->decl)) != NULL;\n-\t  cgraph_create_function_alias (p->decl, target_node->symbol.decl);\n-\t  VEC_unordered_remove (alias_pair, alias_pairs, i);\n-\t}\n-      else if (TREE_CODE (p->decl) == VAR_DECL\n-\t       && (target_vnode = varpool_node_for_asm (p->target)) != NULL)\n-\t{\n-\t  /* Normally EXTERNAL flag is used to mark external inlines,\n-\t     however for aliases it seems to be allowed to use it w/o\n-\t     any meaning. See gcc.dg/attr-alias-3.c  \n-\t     However for weakref we insist on EXTERNAL flag being set.\n-\t     See gcc.dg/attr-alias-5.c  */\n-\t  if (DECL_EXTERNAL (p->decl))\n-\t    DECL_EXTERNAL (p->decl)\n-\t      = lookup_attribute (\"weakref\",\n-\t\t\t          DECL_ATTRIBUTES (p->decl)) != NULL;\n-\t  varpool_create_variable_alias (p->decl, target_vnode->symbol.decl);\n-\t  VEC_unordered_remove (alias_pair, alias_pairs, i);\n-\t}\n+      symtab_node target_node = symtab_node_for_asm (p->target);\n+\n       /* Weakrefs with target not defined in current unit are easy to handle; they\n \t behave just as external variables except we need to note the alias flag\n \t to later output the weakref pseudo op into asm file.  */\n-      else if (lookup_attribute (\"weakref\", DECL_ATTRIBUTES (p->decl)) != NULL\n-\t       && (TREE_CODE (p->decl) == FUNCTION_DECL\n-\t\t   ? (varpool_node_for_asm (p->target) == NULL)\n-\t\t   : (cgraph_node_for_asm (p->target) == NULL)))\n+      if (!target_node && lookup_attribute (\"weakref\", DECL_ATTRIBUTES (p->decl)) != NULL)\n \t{\n \t  if (TREE_CODE (p->decl) == FUNCTION_DECL)\n \t    cgraph_get_create_node (p->decl)->alias = true;\n \t  else\n \t    varpool_get_node (p->decl)->alias = true;\n \t  DECL_EXTERNAL (p->decl) = 1;\n \t  VEC_unordered_remove (alias_pair, alias_pairs, i);\n+\t  continue;\n \t}\n-      else\n+      else if (!target_node)\n \t{\n-\t  if (dump_file)\n-\t    fprintf (dump_file, \"Unhandled alias %s->%s\\n\",\n-\t\t     IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (p->decl)),\n-\t\t     IDENTIFIER_POINTER (p->target));\n+\t  error (\"%q+D aliased to undefined symbol %qE\", p->decl, p->target);\n+\t  VEC_unordered_remove (alias_pair, alias_pairs, i);\n+\t  continue;\n+\t}\n+\n+      /* Normally EXTERNAL flag is used to mark external inlines,\n+\t however for aliases it seems to be allowed to use it w/o\n+\t any meaning. See gcc.dg/attr-alias-3.c  \n+\t However for weakref we insist on EXTERNAL flag being set.\n+\t See gcc.dg/attr-alias-5.c  */\n+      if (DECL_EXTERNAL (p->decl))\n+\tDECL_EXTERNAL (p->decl)\n+\t  = lookup_attribute (\"weakref\",\n+\t\t\t      DECL_ATTRIBUTES (p->decl)) != NULL;\n \n-\t  i++;\n+      if (TREE_CODE (p->decl) == FUNCTION_DECL\n+          && target_node && symtab_function_p (target_node))\n+\t{\n+\t  struct cgraph_node *src_node = cgraph_get_node (p->decl);\n+\t  if (src_node && src_node->local.finalized)\n+            cgraph_reset_node (src_node);\n+\t  cgraph_create_function_alias (p->decl, target_node->symbol.decl);\n+\t  VEC_unordered_remove (alias_pair, alias_pairs, i);\n+\t}\n+      else if (TREE_CODE (p->decl) == VAR_DECL\n+\t       && target_node && symtab_variable_p (target_node))\n+\t{\n+\t  varpool_create_variable_alias (p->decl, target_node->symbol.decl);\n+\t  VEC_unordered_remove (alias_pair, alias_pairs, i);\n+\t}\n+      else\n+\t{\n+\t  error (\"%q+D alias in between function and variable is not supported\",\n+\t\t p->decl);\n+\t  warning (0, \"%q+D aliased declaration\",\n+\t\t   target_node->symbol.decl);\n+\t  VEC_unordered_remove (alias_pair, alias_pairs, i);\n \t}\n     }\n }"}]}