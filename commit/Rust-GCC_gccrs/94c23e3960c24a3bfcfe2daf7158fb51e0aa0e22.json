{"sha": "94c23e3960c24a3bfcfe2daf7158fb51e0aa0e22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRjMjNlMzk2MGMyNGEzYmZjZmUyZGFmNzE1OGZiNTFlMGFhMGUyMg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2017-09-20T21:59:50Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-09-20T21:59:50Z"}, "message": "explow.c (compute_stack_clash_protection_loop_data): Use CONST_INT_P instead of explicit test.\n\n\t* explow.c (compute_stack_clash_protection_loop_data): Use\n\tCONST_INT_P instead of explicit test.  Verify object is a\n\tCONST_INT_P before looking at INTVAL.\n\t(anti_adjust_stack_and_probe_stack_clash): Use CONST_INT_P\n\tinstead of explicit test.\n\n\t* gcc.target/i386/stack-check-11.c: Update test and regexp\n\tso that it works for both i?86 and x86_64.\n\nFrom-SVN: r253034", "tree": {"sha": "0bffd958305c88a648ef654d191156ee0e8c2e37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bffd958305c88a648ef654d191156ee0e8c2e37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94c23e3960c24a3bfcfe2daf7158fb51e0aa0e22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94c23e3960c24a3bfcfe2daf7158fb51e0aa0e22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94c23e3960c24a3bfcfe2daf7158fb51e0aa0e22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94c23e3960c24a3bfcfe2daf7158fb51e0aa0e22/comments", "author": null, "committer": null, "parents": [{"sha": "6073d0028debf7cbd80dc0678402cbe2c6ea652d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6073d0028debf7cbd80dc0678402cbe2c6ea652d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6073d0028debf7cbd80dc0678402cbe2c6ea652d"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "9f0c821fc65e1eb766eddc1cdaa5d2b73f1f0940", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94c23e3960c24a3bfcfe2daf7158fb51e0aa0e22/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94c23e3960c24a3bfcfe2daf7158fb51e0aa0e22/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=94c23e3960c24a3bfcfe2daf7158fb51e0aa0e22", "patch": "@@ -1,3 +1,11 @@\n+2017-09-20  Jeff Law  <law@redhat.com>\n+\n+\t* explow.c (compute_stack_clash_protection_loop_data): Use\n+\tCONST_INT_P instead of explicit test.  Verify object is a\n+\tCONST_INT_P before looking at INTVAL.\n+\t(anti_adjust_stack_and_probe_stack_clash): Use CONST_INT_P\n+\tinstead of explicit test.\n+\n 2017-09-20  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR target/77687"}, {"sha": "6131d1810cba13f4330ddadc78d345a72fcfc803", "filename": "gcc/explow.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94c23e3960c24a3bfcfe2daf7158fb51e0aa0e22/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94c23e3960c24a3bfcfe2daf7158fb51e0aa0e22/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=94c23e3960c24a3bfcfe2daf7158fb51e0aa0e22", "patch": "@@ -1834,11 +1834,11 @@ compute_stack_clash_protection_loop_data (rtx *rounded_size, rtx *last_addr,\n       if (*rounded_size == CONST0_RTX (Pmode))\n \tfprintf (dump_file,\n \t\t \"Stack clash skipped dynamic allocation and probing loop.\\n\");\n-      else if (GET_CODE (*rounded_size) == CONST_INT\n+      else if (CONST_INT_P (*rounded_size)\n \t       && INTVAL (*rounded_size) <= 4 * *probe_interval)\n \tfprintf (dump_file,\n \t\t \"Stack clash dynamic allocation and probing inline.\\n\");\n-      else if (GET_CODE (*rounded_size) == CONST_INT)\n+      else if (CONST_INT_P (*rounded_size))\n \tfprintf (dump_file,\n \t\t \"Stack clash dynamic allocation and probing in \"\n \t\t \"rotated loop.\\n\");\n@@ -1936,7 +1936,8 @@ anti_adjust_stack_and_probe_stack_clash (rtx size)\n \n   if (rounded_size != CONST0_RTX (Pmode))\n     {\n-      if (INTVAL (rounded_size) <= 4 * probe_interval)\n+      if (CONST_INT_P (rounded_size)\n+\t  && INTVAL (rounded_size) <= 4 * probe_interval)\n \t{\n \t  for (HOST_WIDE_INT i = 0;\n \t       i < INTVAL (rounded_size);\n@@ -1956,7 +1957,7 @@ anti_adjust_stack_and_probe_stack_clash (rtx size)\n       else\n \t{\n \t  rtx loop_lab, end_loop;\n-\t  bool rotate_loop = GET_CODE (rounded_size) == CONST_INT;\n+\t  bool rotate_loop = CONST_INT_P (rounded_size);\n \t  emit_stack_clash_protection_probe_loop_start (&loop_lab, &end_loop,\n \t\t\t\t\t\t\tlast_addr, rotate_loop);\n \n@@ -1994,7 +1995,7 @@ anti_adjust_stack_and_probe_stack_clash (rtx size)\n \t might hold live data.  So probe at *sp if we know that\n \t an allocation was made, otherwise probe into the red zone\n \t which is obviously undesirable.  */\n-      if (GET_CODE (size) == CONST_INT)\n+      if (CONST_INT_P (size))\n \t{\n \t  emit_stack_probe (stack_pointer_rtx);\n \t  emit_insn (gen_blockage ());"}, {"sha": "a636327cd939127b5efe52daa9774c0daba570a1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94c23e3960c24a3bfcfe2daf7158fb51e0aa0e22/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94c23e3960c24a3bfcfe2daf7158fb51e0aa0e22/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=94c23e3960c24a3bfcfe2daf7158fb51e0aa0e22", "patch": "@@ -1,3 +1,8 @@\n+2017-09-20  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.target/i386/stack-check-11.c: Update test and regexp\n+\tso that it works for both i?86 and x86_64.\n+\n 2017-09-19  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR target/77687"}, {"sha": "fe5b2c2b844c8d26219415bd3ecbd393c6c278f4", "filename": "gcc/testsuite/gcc.target/i386/stack-check-11.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94c23e3960c24a3bfcfe2daf7158fb51e0aa0e22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstack-check-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94c23e3960c24a3bfcfe2daf7158fb51e0aa0e22/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstack-check-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstack-check-11.c?ref=94c23e3960c24a3bfcfe2daf7158fb51e0aa0e22", "patch": "@@ -2,15 +2,17 @@\n /* { dg-options \"-O2 -fstack-clash-protection\" } */\n /* { dg-require-effective-target supports_stack_clash_protection } */\n \n-extern void arf (unsigned long int *, unsigned long int *);\n+#include <stdint.h>\n+\n+extern void arf (uint64_t *, uint64_t *);\n void\n frob ()\n {\n-  unsigned long int num[859];\n-  unsigned long int den[859];\n+  uint64_t num[859];\n+  uint64_t den[859];\n   arf (den, num);\n }\n \n-/* { dg-final { scan-assembler-times \"subq\" 4 } } */\n-/* { dg-final { scan-assembler-times \"orq\" 3 } } */\n+/* { dg-final { scan-assembler-times \"sub\\[ql\\]\" 4 } } */\n+/* { dg-final { scan-assembler-times \"or\\[ql\\]\" 3 } } */\n "}]}