{"sha": "8c6a85e33bc6029579949a76acbb0590463d7c8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM2YTg1ZTMzYmM2MDI5NTc5OTQ5YTc2YWNiYjA1OTA0NjNkN2M4Yg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2011-09-08T06:38:13Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-09-08T06:38:13Z"}, "message": "re PR fortran/44646 ([F08] Implement DO CONCURRENT)\n\ngcc/fortran/\n2011-09-08  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/44646\n        * decl.c (gfc_match_entry, gfc_match_end): Handle\n        * COMP_DO_CONCURRENT.\n        * dump-parse-tree.c (show_code_node): Handle EXEC_DO_CONCURRENT.\n        * gfortran.h (gfc_exec_op): Add EXEC_DO_CONCURRENT.\n        * match.c (gfc_match_critical, match_exit_cycle,\n        * gfc_match_stopcode,\n        lock_unlock_statement, sync_statement, gfc_match_allocate,\n        gfc_match_deallocate, gfc_match_return): Add DO CONCURRENT diagnostic.\n        (gfc_match_do): Match DO CONCURRENT.\n        (match_derived_type_spec, match_type_spec, gfc_free_forall_iterator,\n        match_forall_iterator, match_forall_header, match_simple_forall,\n        gfc_match_forall): Move up in the file.\n        * parse.c (check_do_closure, parse_do_block): Handle do\n        * concurrent.\n        * parse.h (gfc_compile_state): Add COMP_DO_CONCURRENT.\n        * resolve.c (do_concurrent_flag): New global variable.\n        (resolve_function, pure_subroutine, resolve_branch,\n        gfc_resolve_blocks, resolve_code, resolve_types): Add do concurrent\n        diagnostic.\n        * st.c (gfc_free_statement): Handle EXEC_DO_CONCURRENT.\n        * trans-stmt.c (gfc_trans_do_concurrent): New function.\n        (gfc_trans_forall_1): Handle do concurrent.\n        * trans-stmt.h (gfc_trans_do_concurrent): New function\n        * prototype.\n        * trans.c (trans_code): Call it.\n        * frontend-passes.c (gfc_code_walker): Handle\n        * EXEC_DO_CONCURRENT.\n\ngcc/testsuite/\n2011-09-08  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/44646\n        * gfortran.dg/do_concurrent_1.f90: New.\n        * gfortran.dg/do_concurrent_2.f90: New.\n\nFrom-SVN: r178677", "tree": {"sha": "a509c092472a1fe6cc07cae1c9cd4ebbddb64862", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a509c092472a1fe6cc07cae1c9cd4ebbddb64862"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c6a85e33bc6029579949a76acbb0590463d7c8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c6a85e33bc6029579949a76acbb0590463d7c8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c6a85e33bc6029579949a76acbb0590463d7c8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c6a85e33bc6029579949a76acbb0590463d7c8b/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1542d97a4ed360e4874afc04a6d5e8b31c0ce3e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1542d97a4ed360e4874afc04a6d5e8b31c0ce3e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1542d97a4ed360e4874afc04a6d5e8b31c0ce3e3"}], "stats": {"total": 5670, "additions": 3015, "deletions": 2655}, "files": [{"sha": "042d057a393b9d8386fc9ff2a8e74bbac2d69bfd", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6a85e33bc6029579949a76acbb0590463d7c8b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6a85e33bc6029579949a76acbb0590463d7c8b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8c6a85e33bc6029579949a76acbb0590463d7c8b", "patch": "@@ -1,3 +1,29 @@\n+2011-09-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/44646\n+\t* decl.c (gfc_match_entry, gfc_match_end): Handle COMP_DO_CONCURRENT.\n+\t* dump-parse-tree.c (show_code_node): Handle EXEC_DO_CONCURRENT.\n+\t* gfortran.h (gfc_exec_op): Add EXEC_DO_CONCURRENT.\n+\t* match.c (gfc_match_critical, match_exit_cycle, gfc_match_stopcode,\n+\tlock_unlock_statement, sync_statement, gfc_match_allocate,\n+\tgfc_match_deallocate, gfc_match_return): Add DO CONCURRENT diagnostic.\n+\t(gfc_match_do): Match DO CONCURRENT.\n+\t(match_derived_type_spec, match_type_spec, gfc_free_forall_iterator,\n+\tmatch_forall_iterator, match_forall_header, match_simple_forall,\n+\tgfc_match_forall): Move up in the file.\n+\t* parse.c (check_do_closure, parse_do_block): Handle do concurrent.\n+\t* parse.h (gfc_compile_state): Add COMP_DO_CONCURRENT.\n+\t* resolve.c (do_concurrent_flag): New global variable.\n+\t(resolve_function, pure_subroutine, resolve_branch,\n+\tgfc_resolve_blocks, resolve_code, resolve_types): Add do concurrent\n+\tdiagnostic.\n+\t* st.c (gfc_free_statement): Handle EXEC_DO_CONCURRENT.\n+\t* trans-stmt.c (gfc_trans_do_concurrent): New function.\n+\t(gfc_trans_forall_1): Handle do concurrent.\n+\t* trans-stmt.h (gfc_trans_do_concurrent): New function prototype.\n+\t* trans.c (trans_code): Call it.\n+\t* frontend-passes.c (gfc_code_walker): Handle EXEC_DO_CONCURRENT.\n+\n 2011-09-07  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/48095"}, {"sha": "0ee257591134a12a25b44c2404907e9361a95af5", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6a85e33bc6029579949a76acbb0590463d7c8b/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6a85e33bc6029579949a76acbb0590463d7c8b/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=8c6a85e33bc6029579949a76acbb0590463d7c8b", "patch": "@@ -5248,6 +5248,7 @@ gfc_match_entry (void)\n \t\t       \"an IF-THEN block\");\n \t    break;\n \t  case COMP_DO:\n+\t  case COMP_DO_CONCURRENT:\n \t    gfc_error (\"ENTRY statement at %C cannot appear within \"\n \t\t       \"a DO block\");\n \t    break;\n@@ -5853,6 +5854,7 @@ gfc_match_end (gfc_statement *st)\n       break;\n \n     case COMP_DO:\n+    case COMP_DO_CONCURRENT:\n       *st = ST_ENDDO;\n       target = \" do\";\n       eos_ok = 0;"}, {"sha": "af2cd85a561781db22099ee72327a3154bde5d8c", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6a85e33bc6029579949a76acbb0590463d7c8b/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6a85e33bc6029579949a76acbb0590463d7c8b/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=8c6a85e33bc6029579949a76acbb0590463d7c8b", "patch": "@@ -1611,6 +1611,28 @@ show_code_node (int level, gfc_code *c)\n       fputs (\"END DO\", dumpfile);\n       break;\n \n+    case EXEC_DO_CONCURRENT:\n+      fputs (\"DO CONCURRENT \", dumpfile);\n+      for (fa = c->ext.forall_iterator; fa; fa = fa->next)\n+        {\n+          show_expr (fa->var);\n+          fputc (' ', dumpfile);\n+          show_expr (fa->start);\n+          fputc (':', dumpfile);\n+          show_expr (fa->end);\n+          fputc (':', dumpfile);\n+          show_expr (fa->stride);\n+\n+          if (fa->next != NULL)\n+            fputc (',', dumpfile);\n+        }\n+      show_expr (c->expr1);\n+\n+      show_code (level + 1, c->block->next);\n+      code_indent (level, c->label1);\n+      fputs (\"END DO\", dumpfile);\n+      break;\n+\n     case EXEC_DO_WHILE:\n       fputs (\"DO WHILE \", dumpfile);\n       show_expr (c->expr1);"}, {"sha": "ab8e9e0607b2b44a873d09f6be5fdcbe8f0f7134", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6a85e33bc6029579949a76acbb0590463d7c8b/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6a85e33bc6029579949a76acbb0590463d7c8b/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=8c6a85e33bc6029579949a76acbb0590463d7c8b", "patch": "@@ -1103,6 +1103,7 @@ gfc_code_walker (gfc_code **c, walk_code_fn_t codefn, walk_expr_fn_t exprfn,\n \t      }\n \n \t    case EXEC_FORALL:\n+\t    case EXEC_DO_CONCURRENT:\n \t      {\n \t\tgfc_forall_iterator *fa;\n \t\tfor (fa = co->ext.forall_iterator; fa; fa = fa->next)"}, {"sha": "54e0b20580dc2758fbdc202c3ed943d35c0f9b93", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6a85e33bc6029579949a76acbb0590463d7c8b/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6a85e33bc6029579949a76acbb0590463d7c8b/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=8c6a85e33bc6029579949a76acbb0590463d7c8b", "patch": "@@ -2052,10 +2052,10 @@ typedef enum\n   EXEC_LABEL_ASSIGN, EXEC_POINTER_ASSIGN, EXEC_CRITICAL, EXEC_ERROR_STOP,\n   EXEC_GOTO, EXEC_CALL, EXEC_COMPCALL, EXEC_ASSIGN_CALL, EXEC_RETURN,\n   EXEC_ENTRY, EXEC_PAUSE, EXEC_STOP, EXEC_CONTINUE, EXEC_INIT_ASSIGN,\n-  EXEC_IF, EXEC_ARITHMETIC_IF, EXEC_DO, EXEC_DO_WHILE, EXEC_SELECT, EXEC_BLOCK,\n-  EXEC_FORALL, EXEC_WHERE, EXEC_CYCLE, EXEC_EXIT, EXEC_CALL_PPC,\n-  EXEC_ALLOCATE, EXEC_DEALLOCATE, EXEC_END_PROCEDURE, EXEC_SELECT_TYPE,\n-  EXEC_SYNC_ALL, EXEC_SYNC_MEMORY, EXEC_SYNC_IMAGES,\n+  EXEC_IF, EXEC_ARITHMETIC_IF, EXEC_DO, EXEC_DO_CONCURRENT, EXEC_DO_WHILE,\n+  EXEC_SELECT, EXEC_BLOCK, EXEC_FORALL, EXEC_WHERE, EXEC_CYCLE, EXEC_EXIT,\n+  EXEC_CALL_PPC, EXEC_ALLOCATE, EXEC_DEALLOCATE, EXEC_END_PROCEDURE,\n+  EXEC_SELECT_TYPE, EXEC_SYNC_ALL, EXEC_SYNC_MEMORY, EXEC_SYNC_IMAGES,\n   EXEC_OPEN, EXEC_CLOSE, EXEC_WAIT,\n   EXEC_READ, EXEC_WRITE, EXEC_IOLENGTH, EXEC_TRANSFER, EXEC_DT_END,\n   EXEC_BACKSPACE, EXEC_ENDFILE, EXEC_INQUIRE, EXEC_REWIND, EXEC_FLUSH,"}, {"sha": "4ea98b61017516fe54d871f7154a2720a528992e", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 2759, "deletions": 2640, "changes": 5399, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6a85e33bc6029579949a76acbb0590463d7c8b/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6a85e33bc6029579949a76acbb0590463d7c8b/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=8c6a85e33bc6029579949a76acbb0590463d7c8b"}, {"sha": "24d8960d06be7026190551b955426cb0dbe34659", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6a85e33bc6029579949a76acbb0590463d7c8b/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6a85e33bc6029579949a76acbb0590463d7c8b/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=8c6a85e33bc6029579949a76acbb0590463d7c8b", "patch": "@@ -3154,7 +3154,7 @@ check_do_closure (void)\n     return 0;\n \n   for (p = gfc_state_stack; p; p = p->previous)\n-    if (p->state == COMP_DO)\n+    if (p->state == COMP_DO || p->state == COMP_DO_CONCURRENT)\n       break;\n \n   if (p == NULL)\n@@ -3172,7 +3172,8 @@ check_do_closure (void)\n   /* At this point, the label doesn't terminate the innermost loop.\n      Make sure it doesn't terminate another one.  */\n   for (; p; p = p->previous)\n-    if (p->state == COMP_DO && p->ext.end_do_label == gfc_statement_label)\n+    if ((p->state == COMP_DO || p->state == COMP_DO_CONCURRENT)\n+\t&& p->ext.end_do_label == gfc_statement_label)\n       {\n \tgfc_error (\"End of nonblock DO statement at %C is interwoven \"\n \t\t   \"with another DO loop\");\n@@ -3387,7 +3388,9 @@ parse_do_block (void)\n   gfc_code *top;\n   gfc_state_data s;\n   gfc_symtree *stree;\n+  gfc_exec_op do_op;\n \n+  do_op = new_st.op;\n   s.ext.end_do_label = new_st.label1;\n \n   if (new_st.ext.iterator != NULL)\n@@ -3398,7 +3401,8 @@ parse_do_block (void)\n   accept_statement (ST_DO);\n \n   top = gfc_state_stack->tail;\n-  push_state (&s, COMP_DO, gfc_new_block);\n+  push_state (&s, do_op == EXEC_DO_CONCURRENT ? COMP_DO_CONCURRENT : COMP_DO,\n+\t      gfc_new_block);\n \n   s.do_variable = stree;\n "}, {"sha": "9e56b81dc866a9f426dac0b2aa77db329a06dc9d", "filename": "gcc/fortran/parse.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6a85e33bc6029579949a76acbb0590463d7c8b/gcc%2Ffortran%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6a85e33bc6029579949a76acbb0590463d7c8b/gcc%2Ffortran%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.h?ref=8c6a85e33bc6029579949a76acbb0590463d7c8b", "patch": "@@ -30,7 +30,7 @@ typedef enum\n   COMP_BLOCK_DATA, COMP_INTERFACE, COMP_DERIVED, COMP_DERIVED_CONTAINS,\n   COMP_BLOCK, COMP_ASSOCIATE, COMP_IF,\n   COMP_DO, COMP_SELECT, COMP_FORALL, COMP_WHERE, COMP_CONTAINS, COMP_ENUM,\n-  COMP_SELECT_TYPE, COMP_OMP_STRUCTURED_BLOCK, COMP_CRITICAL\n+  COMP_SELECT_TYPE, COMP_OMP_STRUCTURED_BLOCK, COMP_CRITICAL, COMP_DO_CONCURRENT\n }\n gfc_compile_state;\n "}, {"sha": "b038402ac29176c93615ba78cae8cafaf03a55c4", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 40, "deletions": 7, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6a85e33bc6029579949a76acbb0590463d7c8b/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6a85e33bc6029579949a76acbb0590463d7c8b/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=8c6a85e33bc6029579949a76acbb0590463d7c8b", "patch": "@@ -58,9 +58,10 @@ code_stack;\n static code_stack *cs_base = NULL;\n \n \n-/* Nonzero if we're inside a FORALL block.  */\n+/* Nonzero if we're inside a FORALL or DO CONCURRENT block.  */\n \n static int forall_flag;\n+static int do_concurrent_flag;\n \n /* Nonzero if we're inside a OpenMP WORKSHARE or PARALLEL WORKSHARE block.  */\n \n@@ -3159,11 +3160,18 @@ resolve_function (gfc_expr *expr)\n     {\n       if (forall_flag)\n \t{\n-\t  gfc_error (\"reference to non-PURE function '%s' at %L inside a \"\n+\t  gfc_error (\"Reference to non-PURE function '%s' at %L inside a \"\n \t\t     \"FORALL %s\", name, &expr->where,\n \t\t     forall_flag == 2 ? \"mask\" : \"block\");\n \t  t = FAILURE;\n \t}\n+      else if (do_concurrent_flag)\n+\t{\n+\t  gfc_error (\"Reference to non-PURE function '%s' at %L inside a \"\n+\t\t     \"DO CONCURRENT %s\", name, &expr->where,\n+\t\t     do_concurrent_flag == 2 ? \"mask\" : \"block\");\n+\t  t = FAILURE;\n+\t}\n       else if (gfc_pure (NULL))\n \t{\n \t  gfc_error (\"Function reference to '%s' at %L is to a non-PURE \"\n@@ -3230,6 +3238,9 @@ pure_subroutine (gfc_code *c, gfc_symbol *sym)\n   if (forall_flag)\n     gfc_error (\"Subroutine call to '%s' in FORALL block at %L is not PURE\",\n \t       sym->name, &c->loc);\n+  else if (do_concurrent_flag)\n+    gfc_error (\"Subroutine call to '%s' in DO CONCURRENT block at %L is not \"\n+\t       \"PURE\", sym->name, &c->loc);\n   else if (gfc_pure (NULL))\n     gfc_error (\"Subroutine call to '%s' at %L is not PURE\", sym->name,\n \t       &c->loc);\n@@ -8385,10 +8396,16 @@ resolve_branch (gfc_st_label *label, gfc_code *code)\n \t whether the label is still visible outside of the CRITICAL block,\n \t which is invalid.  */\n       for (stack = cs_base; stack; stack = stack->prev)\n-\tif (stack->current->op == EXEC_CRITICAL\n-\t    && bitmap_bit_p (stack->reachable_labels, label->value))\n-\t  gfc_error (\"GOTO statement at %L leaves CRITICAL construct for label\"\n-\t\t      \" at %L\", &code->loc, &label->where);\n+\t{\n+\t  if (stack->current->op == EXEC_CRITICAL\n+\t      && bitmap_bit_p (stack->reachable_labels, label->value))\n+\t    gfc_error (\"GOTO statement at %L leaves CRITICAL construct for \"\n+\t\t      \"label at %L\", &code->loc, &label->where);\n+\t  else if (stack->current->op == EXEC_DO_CONCURRENT\n+\t\t   && bitmap_bit_p (stack->reachable_labels, label->value))\n+\t    gfc_error (\"GOTO statement at %L leaves DO CONCURRENT construct \"\n+\t\t      \"for label at %L\", &code->loc, &label->where);\n+\t}\n \n       return;\n     }\n@@ -8409,6 +8426,12 @@ resolve_branch (gfc_st_label *label, gfc_code *code)\n \t\t      \" at %L\", &code->loc, &label->where);\n \t  return;\n \t}\n+      else if (stack->current->op == EXEC_DO_CONCURRENT)\n+\t{\n+\t  gfc_error (\"GOTO statement at %L leaves DO CONCURRENT construct for \"\n+\t\t     \"label at %L\", &code->loc, &label->where);\n+\t  return;\n+\t}\n     }\n \n   if (stack)\n@@ -8832,6 +8855,7 @@ gfc_resolve_blocks (gfc_code *b, gfc_namespace *ns)\n \tcase EXEC_FORALL:\n \tcase EXEC_DO:\n \tcase EXEC_DO_WHILE:\n+\tcase EXEC_DO_CONCURRENT:\n \tcase EXEC_CRITICAL:\n \tcase EXEC_READ:\n \tcase EXEC_WRITE:\n@@ -9071,7 +9095,7 @@ static void\n resolve_code (gfc_code *code, gfc_namespace *ns)\n {\n   int omp_workshare_save;\n-  int forall_save;\n+  int forall_save, do_concurrent_save;\n   code_stack frame;\n   gfc_try t;\n \n@@ -9085,6 +9109,7 @@ resolve_code (gfc_code *code, gfc_namespace *ns)\n     {\n       frame.current = code;\n       forall_save = forall_flag;\n+      do_concurrent_save = do_concurrent_flag;\n \n       if (code->op == EXEC_FORALL)\n \t{\n@@ -9117,6 +9142,11 @@ resolve_code (gfc_code *code, gfc_namespace *ns)\n \t      /* Blocks are handled in resolve_select_type because we have\n \t\t to transform the SELECT TYPE into ASSOCIATE first.  */\n \t      break;\n+            case EXEC_DO_CONCURRENT:\n+\t      do_concurrent_flag = 1;\n+\t      gfc_resolve_blocks (code->block, ns);\n+\t      do_concurrent_flag = 2;\n+\t      break;\n \t    case EXEC_OMP_WORKSHARE:\n \t      omp_workshare_save = omp_workshare_flag;\n \t      omp_workshare_flag = 1;\n@@ -9134,6 +9164,7 @@ resolve_code (gfc_code *code, gfc_namespace *ns)\n       if (code->op != EXEC_COMPCALL && code->op != EXEC_CALL_PPC)\n \tt = gfc_resolve_expr (code->expr1);\n       forall_flag = forall_save;\n+      do_concurrent_flag = do_concurrent_save;\n \n       if (gfc_resolve_expr (code->expr2) == FAILURE)\n \tt = FAILURE;\n@@ -9401,6 +9432,7 @@ resolve_code (gfc_code *code, gfc_namespace *ns)\n \t  resolve_transfer (code);\n \t  break;\n \n+\tcase EXEC_DO_CONCURRENT:\n \tcase EXEC_FORALL:\n \t  resolve_forall_iterators (code->ext.forall_iterator);\n \n@@ -13570,6 +13602,7 @@ resolve_types (gfc_namespace *ns)\n     }\n \n   forall_flag = 0;\n+  do_concurrent_flag = 0;\n   gfc_check_interfaces (ns);\n \n   gfc_traverse_ns (ns, resolve_values);"}, {"sha": "932c9428af8617152e8a232a2ec0c59dc5c1b54a", "filename": "gcc/fortran/st.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6a85e33bc6029579949a76acbb0590463d7c8b/gcc%2Ffortran%2Fst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6a85e33bc6029579949a76acbb0590463d7c8b/gcc%2Ffortran%2Fst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fst.c?ref=8c6a85e33bc6029579949a76acbb0590463d7c8b", "patch": "@@ -178,6 +178,7 @@ gfc_free_statement (gfc_code *p)\n \t be freed.  */\n       break;\n \n+    case EXEC_DO_CONCURRENT:\n     case EXEC_FORALL:\n       gfc_free_forall_iterator (p->ext.forall_iterator);\n       break;"}, {"sha": "1fdb0590d5a4fc078b9dad3b80dda9bf17daf7ee", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6a85e33bc6029579949a76acbb0590463d7c8b/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6a85e33bc6029579949a76acbb0590463d7c8b/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=8c6a85e33bc6029579949a76acbb0590463d7c8b", "patch": "@@ -3514,6 +3514,7 @@ gfc_trans_forall_1 (gfc_code * code, forall_info * nested_forall_info)\n   tree maskindex;\n   tree mask;\n   tree pmask;\n+  tree cycle_label = NULL_TREE;\n   int n;\n   int nvar;\n   int need_temp;\n@@ -3703,6 +3704,26 @@ gfc_trans_forall_1 (gfc_code * code, forall_info * nested_forall_info)\n       gfc_add_expr_to_block (&block, tmp);\n     }\n \n+  if (code->op == EXEC_DO_CONCURRENT)\n+    {\n+      gfc_init_block (&body);\n+      cycle_label = gfc_build_label_decl (NULL_TREE);\n+      code->cycle_label = cycle_label;\n+      tmp = gfc_trans_code (code->block->next);\n+      gfc_add_expr_to_block (&body, tmp);\n+\n+      if (TREE_USED (cycle_label))\n+\t{\n+\t  tmp = build1_v (LABEL_EXPR, cycle_label);\n+\t  gfc_add_expr_to_block (&body, tmp);\n+\t}\n+\n+      tmp = gfc_finish_block (&body);\n+      tmp = gfc_trans_nested_forall_loop (nested_forall_info, tmp, 1);\n+      gfc_add_expr_to_block (&block, tmp);\n+      goto done;\n+    }\n+\n   c = code->block->next;\n \n   /* TODO: loop merging in FORALL statements.  */\n@@ -3783,6 +3804,7 @@ gfc_trans_forall_1 (gfc_code * code, forall_info * nested_forall_info)\n       c = c->next;\n     }\n \n+done:\n   /* Restore the original index variables.  */\n   for (fa = code->ext.forall_iterator, n = 0; fa; fa = fa->next, n++)\n     gfc_restore_sym (fa->var->symtree->n.sym, &saved_vars[n]);\n@@ -3829,6 +3851,14 @@ tree gfc_trans_forall (gfc_code * code)\n }\n \n \n+/* Translate the DO CONCURRENT construct.  */\n+\n+tree gfc_trans_do_concurrent (gfc_code * code)\n+{\n+  return gfc_trans_forall_1 (code, NULL);\n+}\n+\n+\n /* Evaluate the WHERE mask expression, copy its value to a temporary.\n    If the WHERE construct is nested in FORALL, compute the overall temporary\n    needed by the WHERE mask expression multiplied by the iterator number of"}, {"sha": "caa4c982b17c47a460ad702edb8bfde08a8500c7", "filename": "gcc/fortran/trans-stmt.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6a85e33bc6029579949a76acbb0590463d7c8b/gcc%2Ffortran%2Ftrans-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6a85e33bc6029579949a76acbb0590463d7c8b/gcc%2Ffortran%2Ftrans-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.h?ref=8c6a85e33bc6029579949a76acbb0590463d7c8b", "patch": "@@ -51,6 +51,7 @@ tree gfc_trans_if (gfc_code *);\n tree gfc_trans_arithmetic_if (gfc_code *);\n tree gfc_trans_block_construct (gfc_code *);\n tree gfc_trans_do (gfc_code *, tree);\n+tree gfc_trans_do_concurrent (gfc_code *);\n tree gfc_trans_do_while (gfc_code *);\n tree gfc_trans_select (gfc_code *);\n tree gfc_trans_sync (gfc_code *, gfc_exec_op);"}, {"sha": "764bdf42e456a65ea9b7abdf9aeb2e542036a151", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6a85e33bc6029579949a76acbb0590463d7c8b/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6a85e33bc6029579949a76acbb0590463d7c8b/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=8c6a85e33bc6029579949a76acbb0590463d7c8b", "patch": "@@ -1303,6 +1303,10 @@ trans_code (gfc_code * code, tree cond)\n \t  res = gfc_trans_do (code, cond);\n \t  break;\n \n+\tcase EXEC_DO_CONCURRENT:\n+\t  res = gfc_trans_do_concurrent (code);\n+\t  break;\n+\n \tcase EXEC_DO_WHILE:\n \t  res = gfc_trans_do_while (code);\n \t  break;"}, {"sha": "18b487d063c312bf88f0bbfe2bb2a6c69bc8dbd9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6a85e33bc6029579949a76acbb0590463d7c8b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6a85e33bc6029579949a76acbb0590463d7c8b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8c6a85e33bc6029579949a76acbb0590463d7c8b", "patch": "@@ -1,3 +1,9 @@\n+2011-09-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/44646\n+\t* gfortran.dg/do_concurrent_1.f90: New.\n+\t* gfortran.dg/do_concurrent_2.f90: New.\n+\n 2011-09-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/50310"}, {"sha": "944591087aa3163fd94179639d4dac02eccb8c84", "filename": "gcc/testsuite/gfortran.dg/do_concurrent_1.f90", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6a85e33bc6029579949a76acbb0590463d7c8b/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_concurrent_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6a85e33bc6029579949a76acbb0590463d7c8b/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_concurrent_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_concurrent_1.f90?ref=8c6a85e33bc6029579949a76acbb0590463d7c8b", "patch": "@@ -0,0 +1,71 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=single\" }\n+!\n+! PR fortran/44646\n+!\n+! DO CONCURRENT\n+!\n+implicit none\n+integer :: i, j\n+\n+outer: do, concurrent ( i = 1 : 4)\n+  do j = 1, 5\n+    if (j == 1) cycle ! OK\n+    cycle outer ! OK: C821   FIXME\n+    exit outer ! { dg-error \"EXIT statement at .1. leaves DO CONCURRENT construct\" }\n+  end do\n+end do outer\n+\n+do concurrent (j = 1:5)\n+  cycle ! OK\n+end do\n+\n+outer2: do j = 1, 7\n+  do concurrent (j=1:5:2) ! cycle outer2 - bad: C821\n+    cycle outer2 ! { dg-error \"leaves DO CONCURRENT construct\" }\n+  end do\n+end do outer2\n+\n+do concurrent ( i = 1 : 4)\n+  exit ! { dg-error \"EXIT statement at .1. leaves DO CONCURRENT construct\" }\n+end do\n+end\n+\n+subroutine foo()\n+  do concurrent ( i = 1 : 4)\n+    return   ! { dg-error \"Image control statement RETURN\" }\n+    sync all ! { dg-error \"Image control statement SYNC\" }\n+    call test () ! { dg-error \"Subroutine call to .test. in DO CONCURRENT block at .1. is not PURE\" }\n+    stop ! { dg-error \"Image control statement STOP\" }\n+  end do\n+  do concurrent ( i = 1 : 4)\n+    critical ! { dg-error \"Image control statement CRITICAL at .1. in DO CONCURRENT block\" }\n+      print *, i\n+!    end critical\n+  end do\n+\n+  critical\n+    do concurrent ( i = 1 : 4) ! OK\n+    end do\n+  end critical\n+end\n+\n+subroutine caf()\n+  use iso_fortran_env\n+  implicit none\n+  type(lock_type), allocatable :: lock[:]\n+  integer :: i\n+  do, concurrent (i = 1:3)\n+    allocate (lock[*]) ! { dg-error \"ALLOCATE of coarray at .1. in DO CONCURRENT block\" }\n+    lock(lock) ! { dg-error \"Image control statement LOCK\" }\n+    unlock(lock) ! { dg-error \"Image control statement UNLOCK\" }\n+    deallocate (lock) ! { dg-error \"DEALLOCATE of coarray at .1. in DO CONCURRENT block\" }\n+  end do\n+\n+  critical\n+    allocate (lock[*]) ! { dg-error \"ALLOCATE of coarray at .1. in CRITICAL block\" }\n+    lock(lock) ! { dg-error \"Image control statement LOCK\" }\n+    unlock(lock) ! { dg-error \"Image control statement UNLOCK\" }\n+    deallocate (lock) ! { dg-error \"DEALLOCATE of coarray at .1. in CRITICAL block\" }\n+  end critical\n+end subroutine caf"}, {"sha": "b059356c7194dfdf47f1604b07d57b0bdd58bd72", "filename": "gcc/testsuite/gfortran.dg/do_concurrent_2.f90", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6a85e33bc6029579949a76acbb0590463d7c8b/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_concurrent_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6a85e33bc6029579949a76acbb0590463d7c8b/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_concurrent_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_concurrent_2.f90?ref=8c6a85e33bc6029579949a76acbb0590463d7c8b", "patch": "@@ -0,0 +1,40 @@\n+! { dg-do run }\n+!\n+! PR fortran/44646\n+!\n+! DO CONCURRENT\n+!\n+implicit none\n+integer :: i, j\n+integer :: A(5,5)\n+\n+A = 0.0\n+do concurrent (i=1:5, j=1:5, (i/=j))\n+  if (i == 5) cycle\n+  A(i,j) = i*j\n+end do\n+\n+if (any (A(:,1) /= [0,  2,  3,  4, 0])) call abort()\n+if (any (A(:,2) /= [2,  0,  6,  8, 0])) call abort()\n+if (any (A(:,3) /= [3,  6,  0, 12, 0])) call abort()\n+if (any (A(:,4) /= [4,  8, 12,  0, 0])) call abort()\n+if (any (A(:,5) /= [5, 10, 15, 20, 0])) call abort()\n+\n+A = -99\n+\n+do concurrent (i = 1 : 5)\n+  forall (j=1:4, i/=j)\n+    A(i,j) = i*j\n+  end forall\n+  if (i == 5) then\n+    A(i,i) = -i\n+  end if\n+end do\n+\n+if (any (A(:,1) /= [-99,   2,   3,   4,  5])) call abort ()\n+if (any (A(:,2) /= [  2, -99,   6,   8, 10])) call abort ()\n+if (any (A(:,3) /= [  3,   6, -99,  12, 15])) call abort ()\n+if (any (A(:,4) /= [  4,   8,  12, -99, 20])) call abort ()\n+if (any (A(:,5) /= [-99, -99, -99, -99, -5])) call abort ()\n+\n+end"}]}