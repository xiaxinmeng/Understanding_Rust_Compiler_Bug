{"sha": "be147e848b387d23d421587059e1d45ae17f01d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUxNDdlODQ4YjM4N2QyM2Q0MjE1ODcwNTllMWQ0NWFlMTdmMDFkMw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-03-21T08:02:21Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-03-21T08:02:21Z"}, "message": "Makefile.in (cfgexpand.o): Add $(REGS_H) and $(INTEGRATE_H) dependencies.\n\n2012-03-21  Richard Guenther  <rguenther@suse.de>\n\n\t* Makefile.in (cfgexpand.o): Add $(REGS_H) and $(INTEGRATE_H)\n\tdependencies.\n\t* cfgexpand.c (gimple_expand_cfg): Fold in pass_init_function,\n\tpass_jump, pass_initial_value_sets and pass_unshare_all_rtl.\n\t* passes.c (init_optimization_passes): Remove pass_init_function,\n\tpass_jump, pass_initial_value_sets and pass_unshare_all_rtl.\n\t* tree-pass.h (pass_init_function): Remove.\n\t(pass_jump): Remove.\n\t(pass_initial_value_sets): Remove.\n\t(pass_unshare_all_rtl): Remove.\n\t* integrate.c (pass_initial_value_sets): Remove.\n\t* emit-rtl.c (pass_unshare_all_rtl): Remove.\n\t* tree.h (init_function_for_compilation): Remove.\n\t* function.c (init_function_for_compilation): Remove.\n\t(pass_init_function): Remove.\n\t* cfgcleanup.c (rest_of_handle_jump): Remove.\n\t(pass_jump): Remove.\n\nFrom-SVN: r185598", "tree": {"sha": "ac5969cac9f16efc22521450737be550667ef96f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac5969cac9f16efc22521450737be550667ef96f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be147e848b387d23d421587059e1d45ae17f01d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be147e848b387d23d421587059e1d45ae17f01d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be147e848b387d23d421587059e1d45ae17f01d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be147e848b387d23d421587059e1d45ae17f01d3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "552b8185be26149ffcc8c879f4644d52aa1c85a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/552b8185be26149ffcc8c879f4644d52aa1c85a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/552b8185be26149ffcc8c879f4644d52aa1c85a8"}], "stats": {"total": 145, "additions": 42, "deletions": 103}, "files": [{"sha": "a1159697da2e7ef02597582d0eda6ee197dd4256", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be147e848b387d23d421587059e1d45ae17f01d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be147e848b387d23d421587059e1d45ae17f01d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be147e848b387d23d421587059e1d45ae17f01d3", "patch": "@@ -1,3 +1,23 @@\n+2012-03-21  Richard Guenther  <rguenther@suse.de>\n+\n+\t* Makefile.in (cfgexpand.o): Add $(REGS_H) and $(INTEGRATE_H)\n+\tdependencies.\n+\t* cfgexpand.c (gimple_expand_cfg): Fold in pass_init_function,\n+\tpass_jump, pass_initial_value_sets and pass_unshare_all_rtl.\n+\t* passes.c (init_optimization_passes): Remove pass_init_function,\n+\tpass_jump, pass_initial_value_sets and pass_unshare_all_rtl.\n+\t* tree-pass.h (pass_init_function): Remove.\n+\t(pass_jump): Remove.\n+\t(pass_initial_value_sets): Remove.\n+\t(pass_unshare_all_rtl): Remove.\n+\t* integrate.c (pass_initial_value_sets): Remove.\n+\t* emit-rtl.c (pass_unshare_all_rtl): Remove.\n+\t* tree.h (init_function_for_compilation): Remove.\n+\t* function.c (init_function_for_compilation): Remove.\n+\t(pass_init_function): Remove.\n+\t* cfgcleanup.c (rest_of_handle_jump): Remove.\n+\t(pass_jump): Remove.\n+\n 2012-03-20  Jason Merrill  <jason@redhat.com>\n \n \t* tree-streamer-in.c (streamer_alloc_tree): Call"}, {"sha": "716b3a43d2a48dd5145aef297aad0e5067424089", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be147e848b387d23d421587059e1d45ae17f01d3/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be147e848b387d23d421587059e1d45ae17f01d3/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=be147e848b387d23d421587059e1d45ae17f01d3", "patch": "@@ -3147,8 +3147,9 @@ cfgexpand.o : cfgexpand.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) $(FUNCTION_H) $(TIMEVAR_H) $(TM_H) \\\n    coretypes.h $(TREE_DUMP_H) $(EXCEPT_H) langhooks.h $(TREE_PASS_H) $(RTL_H) \\\n    $(DIAGNOSTIC_H) toplev.h $(DIAGNOSTIC_CORE_H) $(BASIC_BLOCK_H) $(FLAGS_H) debug.h $(PARAMS_H) \\\n-   value-prof.h $(TREE_INLINE_H) $(TARGET_H) $(SSAEXPAND_H) \\\n-   tree-pretty-print.h gimple-pretty-print.h $(BITMAP_H) sbitmap.h $(INSN_ATTR_H)\n+   value-prof.h $(TREE_INLINE_H) $(TARGET_H) $(SSAEXPAND_H) $(REGS_H) \\\n+   tree-pretty-print.h gimple-pretty-print.h $(BITMAP_H) sbitmap.h \\\n+   $(INSN_ATTR_H) $(INTEGRATE_H)\n cfgrtl.o : cfgrtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_ERROR_H) \\\n    $(FLAGS_H) insn-config.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h \\\n    output.h  $(FUNCTION_H) $(EXCEPT_H) $(TM_P_H) $(INSN_ATTR_H) \\"}, {"sha": "c695878802c2dd358f8517e597f718f1bccf0f6d", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be147e848b387d23d421587059e1d45ae17f01d3/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be147e848b387d23d421587059e1d45ae17f01d3/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=be147e848b387d23d421587059e1d45ae17f01d3", "patch": "@@ -2981,34 +2981,6 @@ cleanup_cfg (int mode)\n   return changed;\n }\n \f\n-static unsigned int\n-rest_of_handle_jump (void)\n-{\n-  if (crtl->tail_call_emit)\n-    fixup_tail_calls ();\n-  return 0;\n-}\n-\n-struct rtl_opt_pass pass_jump =\n-{\n- {\n-  RTL_PASS,\n-  \"sibling\",                            /* name */\n-  NULL,                                 /* gate */\n-  rest_of_handle_jump,\t\t\t/* execute */\n-  NULL,                                 /* sub */\n-  NULL,                                 /* next */\n-  0,                                    /* static_pass_number */\n-  TV_JUMP,                              /* tv_id */\n-  0,                                    /* properties_required */\n-  0,                                    /* properties_provided */\n-  0,                                    /* properties_destroyed */\n-  TODO_ggc_collect,                     /* todo_flags_start */\n-  TODO_verify_flow,                     /* todo_flags_finish */\n- }\n-};\n-\n-\n static unsigned int\n rest_of_handle_jump2 (void)\n {"}, {"sha": "75d2b1628659ce80d46f397c891c8dba2c9be13b", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be147e848b387d23d421587059e1d45ae17f01d3/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be147e848b387d23d421587059e1d45ae17f01d3/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=be147e848b387d23d421587059e1d45ae17f01d3", "patch": "@@ -47,6 +47,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ssaexpand.h\"\n #include \"bitmap.h\"\n #include \"sbitmap.h\"\n+#include \"regs.h\" /* For reg_renumber.  */\n+#include \"integrate.h\" /* For emit_initial_value_sets.  */\n #include \"insn-attr.h\" /* For INSN_SCHEDULING.  */\n \n /* This variable holds information helping the rewriting of SSA trees\n@@ -4373,6 +4375,10 @@ gimple_expand_cfg (void)\n   SA.partition_to_pseudo = (rtx *)xcalloc (SA.map->num_partitions,\n \t\t\t\t\t   sizeof (rtx));\n \n+  /* Make sure all values used by the optimization passes have sane\n+     defaults.  */\n+  reg_renumber = 0;\n+\n   /* Some backends want to know that we are expanding to RTL.  */\n   currently_expanding_to_rtl = 1;\n   /* Dominators are not kept up-to-date as we may create new basic-blocks.  */\n@@ -4625,6 +4631,11 @@ gimple_expand_cfg (void)\n \n   expand_stack_alignment ();\n \n+  /* Fixup REG_EQUIV notes in the prologue if there are tailcalls in this\n+     function.  */\n+  if (crtl->tail_call_emit)\n+    fixup_tail_calls ();\n+\n   /* After initial rtl generation, call back to finish generating\n      exception support code.  We need to do this before cleaning up\n      the CFG as the code does not expect dead landing pads.  */\n@@ -4643,6 +4654,12 @@ gimple_expand_cfg (void)\n   verify_flow_info ();\n #endif\n \n+  /* Initialize pseudos allocated for hard registers.  */\n+  emit_initial_value_sets ();\n+\n+  /* And finally unshare all RTL.  */\n+  unshare_all_rtl ();\n+\n   /* There's no need to defer outputting this function any more; we\n      know we want to output it.  */\n   DECL_DEFER_OUTPUT (current_function_decl) = 0;\n@@ -4692,7 +4709,9 @@ gimple_expand_cfg (void)\n      the common parent easily.  */\n   set_block_levels (DECL_INITIAL (cfun->decl), 0);\n   default_rtl_profile ();\n+\n   timevar_pop (TV_POST_EXPAND);\n+\n   return 0;\n }\n "}, {"sha": "4f809820b7898ccc65d733d2054c36dc13a6e0b1", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be147e848b387d23d421587059e1d45ae17f01d3/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be147e848b387d23d421587059e1d45ae17f01d3/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=be147e848b387d23d421587059e1d45ae17f01d3", "patch": "@@ -2475,25 +2475,6 @@ unshare_all_rtl (void)\n   return 0;\n }\n \n-struct rtl_opt_pass pass_unshare_all_rtl =\n-{\n- {\n-  RTL_PASS,\n-  \"unshare\",                            /* name */\n-  NULL,                                 /* gate */\n-  unshare_all_rtl,                      /* execute */\n-  NULL,                                 /* sub */\n-  NULL,                                 /* next */\n-  0,                                    /* static_pass_number */\n-  TV_NONE,                              /* tv_id */\n-  0,                                    /* properties_required */\n-  0,                                    /* properties_provided */\n-  0,                                    /* properties_destroyed */\n-  0,                                    /* todo_flags_start */\n-  TODO_verify_rtl_sharing               /* todo_flags_finish */\n- }\n-};\n-\n \n /* Check that ORIG is not marked when it should not be and mark ORIG as in use,\n    Recursively does the same for subexpressions.  */"}, {"sha": "3e903ef94da2474f176606c72cf71db4eb2c0b4a", "filename": "gcc/function.c", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be147e848b387d23d421587059e1d45ae17f01d3/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be147e848b387d23d421587059e1d45ae17f01d3/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=be147e848b387d23d421587059e1d45ae17f01d3", "patch": "@@ -4558,33 +4558,6 @@ init_function_start (tree subr)\n     warning (OPT_Waggregate_return, \"function returns an aggregate\");\n }\n \n-/* Make sure all values used by the optimization passes have sane defaults.  */\n-unsigned int\n-init_function_for_compilation (void)\n-{\n-  reg_renumber = 0;\n-  return 0;\n-}\n-\n-struct rtl_opt_pass pass_init_function =\n-{\n- {\n-  RTL_PASS,\n-  \"*init_function\",                     /* name */\n-  NULL,                                 /* gate */\n-  init_function_for_compilation,        /* execute */\n-  NULL,                                 /* sub */\n-  NULL,                                 /* next */\n-  0,                                    /* static_pass_number */\n-  TV_NONE,                              /* tv_id */\n-  0,                                    /* properties_required */\n-  0,                                    /* properties_provided */\n-  0,                                    /* properties_destroyed */\n-  0,                                    /* todo_flags_start */\n-  0                                     /* todo_flags_finish */\n- }\n-};\n-\n \n void\n expand_main_function (void)"}, {"sha": "53c5d78cf6e297d58c20710f6dd442f4b89c9d2f", "filename": "gcc/integrate.c", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be147e848b387d23d421587059e1d45ae17f01d3/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be147e848b387d23d421587059e1d45ae17f01d3/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=be147e848b387d23d421587059e1d45ae17f01d3", "patch": "@@ -310,25 +310,6 @@ emit_initial_value_sets (void)\n   return 0;\n }\n \n-struct rtl_opt_pass pass_initial_value_sets =\n-{\n- {\n-  RTL_PASS,\n-  \"initvals\",                           /* name */\n-  NULL,                                 /* gate */\n-  emit_initial_value_sets,              /* execute */\n-  NULL,                                 /* sub */\n-  NULL,                                 /* next */\n-  0,                                    /* static_pass_number */\n-  TV_NONE,                              /* tv_id */\n-  0,                                    /* properties_required */\n-  0,                                    /* properties_provided */\n-  0,                                    /* properties_destroyed */\n-  0,                                    /* todo_flags_start */\n-  0                                     /* todo_flags_finish */\n- }\n-};\n-\n /* If the backend knows where to allocate pseudos for hard\n    register initial values, register these allocations now.  */\n void"}, {"sha": "0cb97a501533949db81d3b6267dc0a533f42de00", "filename": "gcc/passes.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be147e848b387d23d421587059e1d45ae17f01d3/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be147e848b387d23d421587059e1d45ae17f01d3/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=be147e848b387d23d421587059e1d45ae17f01d3", "patch": "@@ -1429,10 +1429,6 @@ init_optimization_passes (void)\n   NEXT_PASS (pass_rest_of_compilation);\n     {\n       struct opt_pass **p = &pass_rest_of_compilation.pass.sub;\n-      NEXT_PASS (pass_init_function);\n-      NEXT_PASS (pass_jump);\n-      NEXT_PASS (pass_initial_value_sets);\n-      NEXT_PASS (pass_unshare_all_rtl);\n       NEXT_PASS (pass_instantiate_virtual_regs);\n       NEXT_PASS (pass_into_cfg_layout_mode);\n       NEXT_PASS (pass_jump2);"}, {"sha": "f5cffa3375bfc2f510de1a05f1837d37b9ee5fb6", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be147e848b387d23d421587059e1d45ae17f01d3/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be147e848b387d23d421587059e1d45ae17f01d3/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=be147e848b387d23d421587059e1d45ae17f01d3", "patch": "@@ -485,10 +485,6 @@ extern struct gimple_opt_pass pass_init_datastructures;\n extern struct gimple_opt_pass pass_fixup_cfg;\n \n extern struct rtl_opt_pass pass_expand;\n-extern struct rtl_opt_pass pass_init_function;\n-extern struct rtl_opt_pass pass_jump;\n-extern struct rtl_opt_pass pass_initial_value_sets;\n-extern struct rtl_opt_pass pass_unshare_all_rtl;\n extern struct rtl_opt_pass pass_instantiate_virtual_regs;\n extern struct rtl_opt_pass pass_rtl_fwprop;\n extern struct rtl_opt_pass pass_rtl_fwprop_addr;"}]}