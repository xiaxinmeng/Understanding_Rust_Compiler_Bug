{"sha": "3c84bf1b0f6a338cef5cf5e5e7d2c08a1bf64a3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M4NGJmMWIwZjZhMzM4Y2VmNWNmNWU1ZTdkMmMwOGExYmY2NGEzZA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-06-30T02:28:38Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-06-30T02:28:38Z"}, "message": "pa.c (singlemove_string): Use zdepi and ldil to load constants into registers when appropriate.\n\n\t* pa.c (singlemove_string): Use zdepi and ldil to load constants\n\tinto registers when appropriate.\n\nFrom-SVN: r4799", "tree": {"sha": "467826ea2e82bb999539db4880a3706ccfe913fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/467826ea2e82bb999539db4880a3706ccfe913fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c84bf1b0f6a338cef5cf5e5e7d2c08a1bf64a3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c84bf1b0f6a338cef5cf5e5e7d2c08a1bf64a3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c84bf1b0f6a338cef5cf5e5e7d2c08a1bf64a3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c84bf1b0f6a338cef5cf5e5e7d2c08a1bf64a3d/comments", "author": null, "committer": null, "parents": [{"sha": "60343c3baa8439c2024431c329bac6b2ab5c8190", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60343c3baa8439c2024431c329bac6b2ab5c8190", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60343c3baa8439c2024431c329bac6b2ab5c8190"}], "stats": {"total": 39, "additions": 29, "deletions": 10}, "files": [{"sha": "142e97f84b7f4f2d62ed46431d945ab5dd5b778c", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c84bf1b0f6a338cef5cf5e5e7d2c08a1bf64a3d/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c84bf1b0f6a338cef5cf5e5e7d2c08a1bf64a3d/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=3c84bf1b0f6a338cef5cf5e5e7d2c08a1bf64a3d", "patch": "@@ -890,12 +890,7 @@ read_only_operand (operand)\n      \n \f\n /* Return the best assembler insn template\n-   for moving operands[1] into operands[0] as a fullword. \n-\n-   For CONST_DOUBLE and CONST_INT we should also check for\n-   other values we can load directly via zdepi, ldil, etc. \n-   ??? Do this for 2.5.  */\n-\n+   for moving operands[1] into operands[0] as a fullword.   */\n char *\n singlemove_string (operands)\n      rtx *operands;\n@@ -917,16 +912,40 @@ singlemove_string (operands)\n \n       operands[1] = gen_rtx (CONST_INT, VOIDmode, i);\n \n-      if (INT_14_BITS (operands[1]))\n-\treturn (INTVAL (operands[1]) == 0 ? \"copy 0,%0\" : \"ldi %1,%0\");\n+      /* See if we can handle this constant in a single instruction.  */\n+      if (cint_ok_for_move (INTVAL (operands[1])))\n+\t{\n+\t   int intval = INTVAL (operands[1]);\n+\n+\t   if (intval == 0)\n+\t     return \"copy 0,%0\";\n+\t   else if (VAL_14_BITS_P (intval))\n+\t     return \"ldi %1,%0\";\n+\t   else if ((intval & 0x7ff) == 0)\n+\t     return \"ldil L'%1,%0\";\n+\t   else if (zdepi_cint_p (intval))\n+\t     return \"zdepi %Z1,%0\";\n+\t}\n       else\n \treturn \"ldil L'%1,%0\\n\\tldo R'%1(%0),%0\";\n     }\n \n   else if (GET_CODE (operands[1]) == CONST_INT)\n     {\n-      if (INT_14_BITS (operands[1]))\n-\treturn (INTVAL (operands[1]) == 0 ? \"copy 0,%0\" : \"ldi %1,%0\");\n+      /* See if we can handle this in a single instruction.  */\n+      if (cint_ok_for_move (INTVAL (operands[1])))\n+\t{\n+\t   int intval = INTVAL (operands[1]);\n+\n+\t   if (intval == 0)\n+\t     return \"copy 0,%0\";\n+\t   else if (VAL_14_BITS_P (intval))\n+\t     return \"ldi %1,%0\";\n+\t   else if ((intval & 0x7ff) == 0)\n+\t     return \"ldil L'%1,%0\";\n+\t   else if (zdepi_cint_p (intval))\n+\t     return \"zdepi %Z1,%0\";\n+\t}\n       else\n \treturn \"ldil L'%1,%0\\n\\tldo R'%1(%0),%0\";\n     }"}]}