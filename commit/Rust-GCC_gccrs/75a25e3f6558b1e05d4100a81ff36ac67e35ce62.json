{"sha": "75a25e3f6558b1e05d4100a81ff36ac67e35ce62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVhMjVlM2Y2NTU4YjFlMDVkNDEwMGE4MWZmMzZhYzY3ZTM1Y2U2Mg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-11-26T20:34:27Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-11-26T20:34:27Z"}, "message": "DR 243.\n\n2004-11-26  Paolo Carlini  <pcarlini@suse.de>\n\n\tDR 243. get and getline when sentry reports failure [WP]\n\t* include/bits/istream.tcc (istream<>::get, istream<>::getline):\n\tStore a null character only if the array has a non-zero size.\n\t* src/istream.cc (istream<char>::getline, istream<wchar_t>::getline):\n\tLikewise.\n\t* testsuite/27_io/basic_istream/get/char/3.cc: New.\n\t* testsuite/27_io/basic_istream/getline/char/6.cc: New.\n\t* testsuite/27_io/basic_istream/getline/wchar_t/6.cc: New.\n\t* docs/html/ext/howto.html: Add an entry for DR 243.\n\n\t* testsuite/27_io/basic_istream/getline/wchar_t/1.cc: New.\n\t* testsuite/27_io/basic_istream/getline/wchar_t/2.cc: New.\n\t* testsuite/27_io/basic_istream/getline/wchar_t/3.cc: New.\n\t* testsuite/27_io/basic_istream/getline/wchar_t/4.cc: New.\n\t* testsuite/27_io/basic_istream/getline/wchar_t/5.cc: New.\n\nFrom-SVN: r91348", "tree": {"sha": "b5be3c1e292bc1d5153f23e0b397d3ec01a857d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5be3c1e292bc1d5153f23e0b397d3ec01a857d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75a25e3f6558b1e05d4100a81ff36ac67e35ce62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75a25e3f6558b1e05d4100a81ff36ac67e35ce62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75a25e3f6558b1e05d4100a81ff36ac67e35ce62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75a25e3f6558b1e05d4100a81ff36ac67e35ce62/comments", "author": null, "committer": null, "parents": [{"sha": "b5c3569b079079d6c78f3a12ef69b0ed8b9d7e34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5c3569b079079d6c78f3a12ef69b0ed8b9d7e34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5c3569b079079d6c78f3a12ef69b0ed8b9d7e34"}], "stats": {"total": 757, "additions": 690, "deletions": 67}, "files": [{"sha": "feff7c4a28f7881d64521b5cb561fd75e81f1319", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 62, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a25e3f6558b1e05d4100a81ff36ac67e35ce62/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a25e3f6558b1e05d4100a81ff36ac67e35ce62/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=75a25e3f6558b1e05d4100a81ff36ac67e35ce62", "patch": "@@ -1,3 +1,21 @@\n+2004-11-26  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tDR 243. get and getline when sentry reports failure [WP]\n+\t* include/bits/istream.tcc (istream<>::get, istream<>::getline):\n+\tStore a null character only if the array has a non-zero size.\n+\t* src/istream.cc (istream<char>::getline, istream<wchar_t>::getline):\n+\tLikewise.\n+\t* testsuite/27_io/basic_istream/get/char/3.cc: New.\n+\t* testsuite/27_io/basic_istream/getline/char/6.cc: New.\n+\t* testsuite/27_io/basic_istream/getline/wchar_t/6.cc: New.\n+\t* docs/html/ext/howto.html: Add an entry for DR 243.\n+\n+\t* testsuite/27_io/basic_istream/getline/wchar_t/1.cc: New.\n+\t* testsuite/27_io/basic_istream/getline/wchar_t/2.cc: New.\n+\t* testsuite/27_io/basic_istream/getline/wchar_t/3.cc: New.\n+\t* testsuite/27_io/basic_istream/getline/wchar_t/4.cc: New.\n+\t* testsuite/27_io/basic_istream/getline/wchar_t/5.cc: New.\n+\n 2004-11-25  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* configure: Regenerate for libtool reversion.\n@@ -16,7 +34,6 @@\n \t* src/Makefile.in: Likewise.\n \t* testsuite/Makefile.in: Likewise.\n \n-\n 2004-11-24  Jonathan Wakely  <redi@kayari.org>\n \n \t* docs/html/ext/howto.html: Fix incorrect link.\n@@ -101,67 +118,6 @@\n \t* docs/doxygen/run_doxygen: Print arguments.\n \n \t* docs/doxygen/user.cfg.in: Tweaks.\n-\t\n-2004-11-19  Jonathan Wakely  <redi@gcc.gnu.org>\n-\n-\t* include/bits/basic_string.h, include/bits/locale_classes.h,\n-\tinclude/bits/valarray_after.h, include/bits/valarray_before.h,\n-\tinclude/ext/stdio_sync_filebuf.h, include/std/std_algorithm.h,\n-\tinclude/std/std_functional.h, include/std/std_memory.h,\n-\tinclude/std/std_numeric.h: Doxygen fixes.\n-\n-2004-11-19  Paolo Carlini  <pcarlini@suse.de>\n-\n-\t* testsuite/22_locale/time_get/get_date/char/1.cc: In the checks\n-\tuse, more correctly (and consistently with other testcases) the\n-\treturn value of the facet (the iterator arguments are by value).\n-\t* testsuite/22_locale/time_get/get_date/char/12791.cc: Likewise.\n-\t* testsuite/22_locale/time_get/get_date/wchar_t/1.cc: Likewise.\n-\t* testsuite/22_locale/time_get/get_date/wchar_t/12791.cc: Likewise.\n-\t* testsuite/22_locale/time_get/get_monthname/char/1.cc: Likewise.\n-\t* testsuite/22_locale/time_get/get_monthname/wchar_t/1.cc: Likewise.\n-\t* testsuite/22_locale/time_get/get_time/char/1.cc: Likewise.\n-\t* testsuite/22_locale/time_get/get_time/wchar_t/1.cc: Likewise.\n-\t* testsuite/22_locale/time_get/get_weekday/char/1.cc: Likewise.\n-\t* testsuite/22_locale/time_get/get_weekday/wchar_t/1.cc: Likewise.\n-\t* testsuite/22_locale/time_get/get_year/char/1.cc: Likewise.\n-\t* testsuite/22_locale/time_get/get_year/wchar_t/1.cc: Likewise.\n-\n-2004-11-19  Jonathan Wakely  <redi@gcc.gnu.org>\n-\n-\t* Makefile.am (doxygen, doxygen-maint, doxygen-man): Remove extra '$'\n-\tfrom host_alias variable.\n-\t* Makefile.in: Regenerate.\n-\n-2004-11-19  Chris Jefferson  <chris@bubblescope.net>\n-\n-\t* include/bits/stl_list.h (list::back, list::back const):\n-\tDon't decrement temporary.\n-\n-2004-11-19  Paolo Carlini  <pcarlini@suse.de>\n-\n-\t* include/bits/stl_deque.h (deque::front, deque::front const,\n-\tdeque::back, deque::back const): Slightly tweak for stylistic\n-\tconsistency.\n-\n-2004-11-18  Paolo Carlini  <pcarlini@suse.de>\n-\n-\t* testsuite/26_numerics/numeric/sum_diff.cc: Use VERIFY.\n-\t* testsuite/ext/array_allocator/1.cc: Likewise.\n-\t* testsuite/ext/array_allocator/2.cc: Likewise.\n-\t* testsuite/ext/array_allocator/3.cc: Likewise.\n-\t* testsuite/ext/enc_filebuf/char/13598.cc: Likewise.\n-\n-2004-11-18  Paolo Carlini  <pcarlini@suse.de>\n-\n-\t* include/bits/locale_facets.tcc (num_get<>::do_get(void*&)):\n-\tIf the failbit is set, don't set it again.\n-\t(money_get<>::_M_extract): Minor stylistic tweak: consistently\n-\twith the other functions, take care of eofbit at the end.\n-\n-2004-11-18  Paolo Carlini  <pcarlini@suse.de>\n-\n-\tDR 434. bitset::to_string() hard to use [Ready]\n \n 2004-11-19  Jonathan Wakely  <redi@gcc.gnu.org>\n "}, {"sha": "fff775e165ac30beb32578f7f499f874f2f87640", "filename": "libstdc++-v3/docs/html/ext/howto.html", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a25e3f6558b1e05d4100a81ff36ac67e35ce62/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a25e3f6558b1e05d4100a81ff36ac67e35ce62/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html?ref=75a25e3f6558b1e05d4100a81ff36ac67e35ce62", "patch": "@@ -406,10 +406,16 @@ <h2><a name=\"5\">LWG Issues</a></h2>\n         However, no specification is given what this constructor should do.\n     </dd>\n \n+    <dt><a href=\"lwg-defects.html#243\">243</a>:\n+        <em>get and getline when sentry reports failure</em>\n+    </dt>\n+    <dd>Store a null character only if the character array has a non-zero size.\n+    </dd>\n+\n     <dt><a href=\"lwg-defects.html#251\">251</a>:\n         <em>basic_stringbuf missing allocator_type</em>\n     </dt>\n-    <dd>This nested typdef was originally not specified.\n+    <dd>This nested typedef was originally not specified.\n     </dd>\n \n     <dt><a href=\"lwg-defects.html#253\">253</a>:"}, {"sha": "b363d52091db363f300851aca9887b00df8959ae", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a25e3f6558b1e05d4100a81ff36ac67e35ce62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a25e3f6558b1e05d4100a81ff36ac67e35ce62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=75a25e3f6558b1e05d4100a81ff36ac67e35ce62", "patch": "@@ -533,7 +533,10 @@ namespace std\n \t  catch(...)\n \t    { this->_M_setstate(ios_base::badbit); }\n \t}\n-      *__s = char_type();\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 243. get and getline when sentry reports failure.\n+      if (__n > 0)\n+\t*__s = char_type();\n       if (!_M_gcount)\n \t__err |= ios_base::failbit;\n       if (__err)\n@@ -621,7 +624,10 @@ namespace std\n           catch(...)\n             { this->_M_setstate(ios_base::badbit); }\n         }\n-      *__s = char_type();\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 243. get and getline when sentry reports failure.\n+      if (__n > 0)\n+\t*__s = char_type();\n       if (!_M_gcount)\n         __err |= ios_base::failbit;\n       if (__err)"}, {"sha": "39de7538f0d9eb2cec96e64e180057be44b95c2c", "filename": "libstdc++-v3/src/istream.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a25e3f6558b1e05d4100a81ff36ac67e35ce62/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a25e3f6558b1e05d4100a81ff36ac67e35ce62/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc?ref=75a25e3f6558b1e05d4100a81ff36ac67e35ce62", "patch": "@@ -94,7 +94,10 @@ namespace std\n \t  catch(...)\n \t    { this->_M_setstate(ios_base::badbit); }\n \t}\n-      *__s = char_type();\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 243. get and getline when sentry reports failure.\n+      if (__n > 0)\n+\t*__s = char_type();\n       if (!_M_gcount)\n \t__err |= ios_base::failbit;\n       if (__err)\n@@ -358,7 +361,10 @@ namespace std\n \t  catch(...)\n \t    { this->_M_setstate(ios_base::badbit); }\n \t}\n-      *__s = char_type();\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 243. get and getline when sentry reports failure.\n+      if (__n > 0)\n+\t*__s = char_type();\n       if (!_M_gcount)\n \t__err |= ios_base::failbit;\n       if (__err)"}, {"sha": "ea831742c678cf8446338b619af183b4c1206df4", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/get/char/3.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a25e3f6558b1e05d4100a81ff36ac67e35ce62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fget%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a25e3f6558b1e05d4100a81ff36ac67e35ce62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fget%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fget%2Fchar%2F3.cc?ref=75a25e3f6558b1e05d4100a81ff36ac67e35ce62", "patch": "@@ -0,0 +1,58 @@\n+// 2004-11-26  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// DR 243. get and getline when sentry reports failure.\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  stringbuf strbuf01;\n+  stringbuf strbuf02;\n+  istream istr01(&strbuf01);\n+  istream istr02(&strbuf02);\n+  char buf02[2] = \"*\" ;\n+ \n+  istr01.peek();\n+  VERIFY( istr01.eof() );\n+\n+  istr01.get(0, 0);\n+  VERIFY( istr01.gcount() == 0 );\n+  VERIFY( istr01.fail() );\n+\n+  istr02.peek();\n+  VERIFY( istr02.eof() );\n+\n+  istr02.get(buf02, 1);\n+  VERIFY( istr02.gcount() == 0 );\n+  VERIFY( istr02.fail() );\n+  VERIFY( buf02[0] == char() );  \n+}\n+\n+int main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e40661367658508e9be3fd74d575542d5cf03bb0", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/getline/char/6.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a25e3f6558b1e05d4100a81ff36ac67e35ce62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fchar%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a25e3f6558b1e05d4100a81ff36ac67e35ce62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fchar%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fchar%2F6.cc?ref=75a25e3f6558b1e05d4100a81ff36ac67e35ce62", "patch": "@@ -0,0 +1,58 @@\n+// 2004-11-26  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// DR 243. get and getline when sentry reports failure.\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  stringbuf strbuf01;\n+  stringbuf strbuf02;\n+  istream istr01(&strbuf01);\n+  istream istr02(&strbuf02);\n+  char buf02[2] = \"*\" ;\n+ \n+  istr01.peek();\n+  VERIFY( istr01.eof() );\n+\n+  istr01.getline(0, 0);\n+  VERIFY( istr01.gcount() == 0 );\n+  VERIFY( istr01.fail() );\n+\n+  istr02.peek();\n+  VERIFY( istr02.eof() );\n+\n+  istr02.getline(buf02, 1);\n+  VERIFY( istr02.gcount() == 0 );\n+  VERIFY( istr02.fail() );\n+  VERIFY( buf02[0] == char() );  \n+}\n+\n+int main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "4e1efffb7da516fd8fafdee3c0b308dc858e0a32", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/getline/wchar_t/1.cc", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a25e3f6558b1e05d4100a81ff36ac67e35ce62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a25e3f6558b1e05d4100a81ff36ac67e35ce62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fwchar_t%2F1.cc?ref=75a25e3f6558b1e05d4100a81ff36ac67e35ce62", "patch": "@@ -0,0 +1,118 @@\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+\n+#include <istream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test02()\n+{\n+  typedef std::char_traits<wchar_t>\ttraits_type;\n+\n+  bool test __attribute__((unused)) = true;\n+  const wchar_t str_lit01[] = L\"\\t\\t\\t    sun*ra \\n\"\n+  L\"                            \"\n+  L\"and his myth science arkestra present\\n\"\n+  L\"                            \"\n+  L\"angles and demons @ play\\n\"\n+  L\"                            \"\n+  L\"the nubians of plutonia\";\n+  std::wstring str01(str_lit01);\n+  std::wstring strtmp;\n+\n+  std::wstringbuf sbuf_04(str01, std::ios_base::in);\n+\n+  std::wistream is_00(NULL);\n+  std::wistream is_04(&sbuf_04);\n+  std::ios_base::iostate state1, state2, statefail, stateeof;\n+  statefail = std::ios_base::failbit;\n+  stateeof = std::ios_base::eofbit;\n+  wchar_t carray1[400] = L\"\";\n+\n+  // istream& getline(wchar_t* s, streamsize n, wchar_t delim)\n+  // istream& getline(wchar_t* s, streamsize n)\n+  state1 = is_00.rdstate();\n+  is_00.getline(carray1, 20, L'*');\n+  state2 = is_00.rdstate();\n+  // make sure failbit was set, since we couldn't extract\n+  // from the NULL streambuf...\n+  VERIFY( state1 != state2 );\n+  VERIFY( static_cast<bool>(state2 & statefail) );\n+  \n+  VERIFY( is_04.gcount() == 0 );\n+  state1 = is_04.rdstate();\n+  is_04.getline(carray1, 1, L'\\t'); // extracts, throws away\n+  state2 = is_04.rdstate();  \n+  VERIFY( is_04.gcount() == 1 );\n+  VERIFY( state1 == state2 );\n+  VERIFY( state1 == 0 );\n+  VERIFY( !traits_type::compare(L\"\", carray1, 1) );\n+\n+  state1 = is_04.rdstate();\n+  is_04.getline(carray1, 20, L'*');\n+  state2 = is_04.rdstate();  \n+  VERIFY( is_04.gcount() == 10 );\n+  VERIFY( state1 == state2 );\n+  VERIFY( state1 == 0 );\n+  VERIFY( !traits_type::compare(L\"\\t\\t    sun\", carray1, 10) );\n+\n+  state1 = is_04.rdstate();\n+  is_04.getline(carray1, 20);\n+  state2 = is_04.rdstate();  \n+  VERIFY( is_04.gcount() == 4 );\n+  VERIFY( state1 == state2 );\n+  VERIFY( state1 == 0 );\n+  VERIFY( !traits_type::compare(L\"ra \", carray1, 4) );\n+\n+  state1 = is_04.rdstate();\n+  is_04.getline(carray1, 65);\n+  state2 = is_04.rdstate();  \n+  VERIFY( is_04.gcount() == 64 );\n+  VERIFY( state1 != state2 );\n+  VERIFY( state2 == statefail );\n+  VERIFY( !traits_type::compare(\n+  L\"                            and his myth science arkestra presen\",\n+                                carray1, 65) );\n+\n+  is_04.clear();\n+  state1 = is_04.rdstate();\n+  is_04.getline(carray1, 120, L'|');\n+  state2 = is_04.rdstate();  \n+  VERIFY( is_04.gcount() == 106 );\n+  VERIFY( state1 != state2 );\n+  VERIFY( state2 == stateeof );\n+\n+  is_04.clear();\n+  state1 = is_04.rdstate();\n+  is_04.getline(carray1, 100, L'|');\n+  state2 = is_04.rdstate();  \n+  VERIFY( is_04.gcount() == 0 ); \n+  VERIFY( state1 != state2 );\n+  VERIFY( static_cast<bool>(state2 & stateeof) );\n+  VERIFY( static_cast<bool>(state2 & statefail) );\n+}\n+ \n+int \n+main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "2b25483ca45ae9d9e7b7d23d0f58cd67e9e53b6b", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/getline/wchar_t/2.cc", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a25e3f6558b1e05d4100a81ff36ac67e35ce62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a25e3f6558b1e05d4100a81ff36ac67e35ce62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fwchar_t%2F2.cc?ref=75a25e3f6558b1e05d4100a81ff36ac67e35ce62", "patch": "@@ -0,0 +1,99 @@\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+\n+#include <cwchar> // for wcslen\n+#include <istream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// [patch] bits/istream.tcc - getline(char_type*,streamsize,char_type)\n+// http://gcc.gnu.org/ml/libstdc++/2000-07/msg00003.html\n+void\n+test05()\n+{\n+  const wchar_t* charray = L\"\\n\"\n+L\"a\\n\"\n+L\"aa\\n\"\n+L\"aaa\\n\"\n+L\"aaaa\\n\"\n+L\"aaaaa\\n\"\n+L\"aaaaaa\\n\"\n+L\"aaaaaaa\\n\"\n+L\"aaaaaaaa\\n\"\n+L\"aaaaaaaaa\\n\"\n+L\"aaaaaaaaaa\\n\"\n+L\"aaaaaaaaaaa\\n\"\n+L\"aaaaaaaaaaaa\\n\"\n+L\"aaaaaaaaaaaaa\\n\"\n+L\"aaaaaaaaaaaaaa\\n\";\n+\n+  bool test __attribute__((unused)) = true;\n+  const std::streamsize it = 5;\n+  std::streamsize br = 0;\n+  wchar_t tmp[it];\n+  std::wstringbuf sb(charray, std::ios_base::in);\n+  std::wistream ifs(&sb);\n+  std::streamsize blen = std::wcslen(charray);\n+  VERIFY(!(!ifs));\n+  while(ifs.getline(tmp, it) || ifs.gcount())\n+    {\n+      br += ifs.gcount();\n+      if(ifs.eof())\n+        {\n+          // Just sanity checks to make sure we've extracted the same\n+          // number of chars that were in the streambuf\n+          VERIFY( br == blen );\n+          // Also, we should only set the failbit if we could\n+          // _extract_ no chars from the stream, i.e. the first read\n+          // returned EOF. \n+          VERIFY( ifs.fail() && ifs.gcount() == 0 );\n+        }\n+      else if(ifs.fail())\n+        {\n+\t  // delimiter not read\n+\t  //\n+\t  // either\n+\t  // -> extracted no characters\n+\t  // or\n+\t  // -> n - 1 characters are stored\n+          ifs.clear(ifs.rdstate() & ~std::ios::failbit);\n+          VERIFY( (ifs.gcount() == 0) || (std::wcslen(tmp) == it - 1) );\n+          VERIFY( !(!ifs) );\n+          continue;\n+        }\n+      else \n+        {\n+\t  // delimiter was read.\n+\t  //\n+\t  // -> wcslen(__s) < n - 1 \n+\t  // -> delimiter was seen -> gcount() > strlen(__s)\n+          VERIFY( ifs.gcount() == static_cast<std::streamsize>(std::wcslen(tmp)\n+\t\t\t\t\t\t\t       + 1) );\n+          continue;\n+        }\n+    }\n+}\n+\n+int \n+main()\n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "dbfc1a950a40d34b0e4930db0c4647db22de0777", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/getline/wchar_t/3.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a25e3f6558b1e05d4100a81ff36ac67e35ce62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a25e3f6558b1e05d4100a81ff36ac67e35ce62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fwchar_t%2F3.cc?ref=75a25e3f6558b1e05d4100a81ff36ac67e35ce62", "patch": "@@ -0,0 +1,59 @@\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+\n+#include <cwchar> // for wcslen\n+#include <istream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// [bug] istream::getline(char*,streamsize) still broken\n+// http://gcc.gnu.org/ml/libstdc++/2000-07/msg00126.html\n+// brent verner <brent at rcfile dot org\n+void\n+test06()\n+{\n+  using namespace std;\n+\n+  bool test __attribute__((unused)) = true;\n+  const streamsize it = 5;\n+  wchar_t tmp[it];\n+  const wchar_t* str_lit = L\"abcd\\n\";\n+\n+  wstringbuf strbuf(str_lit, std::ios_base::in);\n+  wistream istr(&strbuf);\n+  \n+  istr.getline(tmp,it); \n+  VERIFY( istr.gcount() == it );  // extracted whole string\n+  VERIFY( wcslen(tmp) == 4 );     // stored all but '\\n'\n+  VERIFY( !istr.eof() );          // extracted up to but not eof\n+  VERIFY( !istr.fail() );         // failbit not set\n+  \n+  wchar_t c = L'z';\n+  istr.get(c);\n+  VERIFY( c == L'z' );\n+  VERIFY( istr.eof() );\n+}\n+\n+int \n+main()\n+{\n+  test06();\n+  return 0;\n+}"}, {"sha": "5f290ffdb43abb3b94a0b34876e09ef3d47d2c8a", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/getline/wchar_t/4.cc", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a25e3f6558b1e05d4100a81ff36ac67e35ce62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a25e3f6558b1e05d4100a81ff36ac67e35ce62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fwchar_t%2F4.cc?ref=75a25e3f6558b1e05d4100a81ff36ac67e35ce62", "patch": "@@ -0,0 +1,112 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.6.1.3 unformatted input functions\n+\n+#include <cwchar> // for wcslen\n+#include <istream>\n+#include <testsuite_hooks.h>\n+\n+class Inbuf : public std::wstreambuf\n+{\n+  static const wchar_t buf[];\n+  const wchar_t* current;\n+  int size;\n+\n+public:\n+  Inbuf()\n+  {\n+    current = buf;\n+    size = std::wcslen(buf);\n+  }\n+  \n+  int_type underflow()\n+  {\n+    if (current < buf + size)\n+      return traits_type::to_int_type(*current);\n+    return traits_type::eof();\n+  }\n+  \n+  int_type uflow()\n+  {\n+    if (current < buf + size)\n+      return traits_type::to_int_type(*current++);\n+    return traits_type::eof();\n+  }\n+};\n+\n+const wchar_t Inbuf::buf[] = L\"1234567890abcdefghij\";\n+\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef char_traits<wchar_t>   traits_type;\n+\n+  Inbuf inbuf1;\n+  wistream is(&inbuf1);\n+\n+  wchar_t buffer[10];\n+  traits_type::assign(buffer, sizeof(buffer) / sizeof(wchar_t), L'X');\n+\n+  is.getline(buffer, sizeof(buffer) / sizeof(wchar_t), L'0');\n+  VERIFY( is.rdstate() == ios_base::goodbit );\n+  VERIFY( !traits_type::compare(buffer, L\"123456789\\0\",\n+\t\t\t\tsizeof(buffer) / sizeof(wchar_t)) );\n+  VERIFY( is.gcount() == 10 );\n+\n+  is.clear();\n+  traits_type::assign(buffer, sizeof(buffer) / sizeof(wchar_t), 'X');\n+  is.getline(buffer, sizeof(buffer) / sizeof(wchar_t));\n+  VERIFY( is.rdstate() == ios_base::failbit );\n+  VERIFY( !traits_type::compare(buffer, L\"abcdefghi\\0\",\n+\t\t\t\tsizeof(buffer) / sizeof(wchar_t)) );\n+  VERIFY( is.gcount() == 9 );\n+\n+  is.clear();\n+  traits_type::assign(buffer, sizeof(buffer) / sizeof(wchar_t), L'X');\n+  is.getline(buffer, sizeof(buffer) / sizeof(wchar_t));\n+  VERIFY( is.rdstate() == ios_base::eofbit );\n+  VERIFY( !traits_type::compare(buffer, L\"j\\0XXXXXXXX\",\n+\t\t\t\tsizeof(buffer) / sizeof(wchar_t)) );\n+  VERIFY( is.gcount() == 1 );\n+\n+  is.clear();\n+  traits_type::assign(buffer, sizeof(buffer) / sizeof(wchar_t), L'X');\n+  is.getline(buffer, sizeof(buffer) / sizeof(wchar_t));\n+  VERIFY( is.rdstate() == (ios_base::eofbit | ios_base::failbit) );\n+  VERIFY( !traits_type::compare(buffer, L\"\\0XXXXXXXXX\",\n+\t\t\t\tsizeof(buffer) / sizeof(wchar_t)) );\n+  VERIFY( is.gcount() == 0 );\n+}\n+\n+int main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "999befe2082696d0af30f3e77f8e7eabf04eb0c9", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/getline/wchar_t/5.cc", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a25e3f6558b1e05d4100a81ff36ac67e35ce62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a25e3f6558b1e05d4100a81ff36ac67e35ce62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fwchar_t%2F5.cc?ref=75a25e3f6558b1e05d4100a81ff36ac67e35ce62", "patch": "@@ -0,0 +1,87 @@\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+\n+#include <istream>\n+#include <string>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+wstring\n+prepare(wstring::size_type len, unsigned nchunks, wchar_t delim)\n+{\n+  wstring ret;\n+  for (unsigned i = 0; i < nchunks; ++i)\n+    {\n+      for (wstring::size_type j = 0; j < len; ++j)\n+\tret.push_back(L'a' + rand() % 26);\n+      len *= 2;\n+      ret.push_back(delim);\n+    }\n+  return ret;\n+}\n+\n+void\n+check(wistream& stream, const wstring& str, unsigned nchunks, wchar_t delim)\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  wchar_t buf[1000000];\n+  wstring::size_type index = 0, index_new = 0;\n+  unsigned n = 0;\n+\n+  while (stream.getline(buf, sizeof(buf) / sizeof(wchar_t), delim))\n+    {\n+      index_new = str.find(delim, index);\n+      VERIFY( stream.gcount() == index_new - index + 1 );\n+      VERIFY( !str.compare(index, index_new - index, buf) );\n+      index = index_new + 1;\n+      ++n;\n+    }\n+  VERIFY( stream.gcount() == 0 );\n+  VERIFY( stream.eof() );\n+  VERIFY( n == nchunks );\n+}\n+\n+void test01()\n+{\n+  const char filename[] = \"wistream_getline.txt\";\n+\n+  const wchar_t delim = L'|';\n+  const unsigned nchunks = 10;\n+  const wstring data = prepare(777, nchunks, delim);\n+\n+  wofstream ofstrm;\n+  ofstrm.open(filename);\n+  ofstrm.write(data.data(), data.size());\n+  ofstrm.close();\n+\n+  wifstream ifstrm;\n+  ifstrm.open(filename);\n+  check(ifstrm, data, nchunks, delim);\n+  ifstrm.close();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "658ca9a7a1c51d32149456dd1f37ab6ecfdebcd7", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/getline/wchar_t/6.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a25e3f6558b1e05d4100a81ff36ac67e35ce62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fwchar_t%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a25e3f6558b1e05d4100a81ff36ac67e35ce62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fwchar_t%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fwchar_t%2F6.cc?ref=75a25e3f6558b1e05d4100a81ff36ac67e35ce62", "patch": "@@ -0,0 +1,58 @@\n+// 2004-11-26  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// DR 243. get and getline when sentry reports failure.\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  wstringbuf strbuf01;\n+  wstringbuf strbuf02;\n+  wistream istr01(&strbuf01);\n+  wistream istr02(&strbuf02);\n+  wchar_t buf02[2] = L\"*\" ;\n+ \n+  istr01.peek();\n+  VERIFY( istr01.eof() );\n+\n+  istr01.getline(0, 0);\n+  VERIFY( istr01.gcount() == 0 );\n+  VERIFY( istr01.fail() );\n+\n+  istr02.peek();\n+  VERIFY( istr02.eof() );\n+\n+  istr02.getline(buf02, 1);\n+  VERIFY( istr02.gcount() == 0 );\n+  VERIFY( istr02.fail() );\n+  VERIFY( buf02[0] == wchar_t() );  \n+}\n+\n+int main() \n+{\n+  test01();\n+  return 0;\n+}"}]}