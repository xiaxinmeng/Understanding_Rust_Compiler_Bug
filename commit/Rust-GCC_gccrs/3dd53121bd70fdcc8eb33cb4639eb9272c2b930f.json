{"sha": "3dd53121bd70fdcc8eb33cb4639eb9272c2b930f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RkNTMxMjFiZDcwZmRjYzhlYjMzY2I0NjM5ZWI5MjcyYzJiOTMwZg==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2004-09-16T06:49:59Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-09-16T06:49:59Z"}, "message": "re PR libobjc/11572 (GNU libobjc no longer compiled on Darwin)\n\n2004-09-15  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR target/11572\n        * c-incpath.h (target_c_incpath_s): Add extra_pre_includes.\n        Add two parameters to extra_includes.\n        (C_INCPATH_INIT): Remove.\n        * c-incpath.c (register_include_chains): Call extra_pre_includes\n        before adding the standard include directory.\n        Update call to extra_includes.\n        (!defined TARGET_EXTRA_INCLUDES): Update\n        hook_void_charptr_charptr_int and add !define\n        TARGET_EXTRA_PRE_INCLUDES.\n        (!define TARGET_EXTRA_INCLUDES): Define as\n        hook_void_charptr_charptr_int.\n        (!define TARGET_EXTRA_PRE_INCLUDES): Likewise.\n        (target_c_incpath): Always declare.\n        * fixinclude.c (defined TARGET_EXTRA_INCLUDES): Declare a\n        empty function.\n        (define TARGET_EXTRA_PRE_INCLUDES): Likewise.\n        * config/darwin.h: (darwin_register_frameworks): Update for\n        the two new parameters.\n        (darwin_register_objc_includes): Add prototype.\n        (TARGET_EXTRA_PRE_INCLUDES): Define.\n        * config/darwin-c.c (darwin_register_objc_includes): New function.\n        (darwin_register_frameworks): Update for the two new parameters.\n        (target_c_incpath): Remove.\n        * config/t-darwin (darwin-c.o): Add $(PREPROCESSOR_DEFINES) to\n        the compile line.\n        * doc/tm.texi (TARGET_EXTRA_INCLUDES): Document the two new\n        parameters.\n        (TARGET_EXTRA_PRE_INCLUDES): Document.\n\n        * gcc.c (spec_function): Add replace-outfile.\n        (replace_outfile_spec_function): New function.\n        * config/darwin.h (LINK_SPEC): Add replace\n        -lobjc with -lobjc-gnu if -fgnu-runtime is\n        supplied.\n        * invoke.texi (replace-outfile): Document.\n\nFrom-SVN: r87588", "tree": {"sha": "eea8e6b301cfcc78ad08dad2ffb1c0dc3348acdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eea8e6b301cfcc78ad08dad2ffb1c0dc3348acdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dd53121bd70fdcc8eb33cb4639eb9272c2b930f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dd53121bd70fdcc8eb33cb4639eb9272c2b930f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dd53121bd70fdcc8eb33cb4639eb9272c2b930f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dd53121bd70fdcc8eb33cb4639eb9272c2b930f/comments", "author": null, "committer": null, "parents": [{"sha": "511bbc8f91882da77dfb2026bbed3ee94df4f731", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/511bbc8f91882da77dfb2026bbed3ee94df4f731", "html_url": "https://github.com/Rust-GCC/gccrs/commit/511bbc8f91882da77dfb2026bbed3ee94df4f731"}], "stats": {"total": 180, "additions": 164, "deletions": 16}, "files": [{"sha": "34f011a5b3cf31f2855f369ce30845364f0e7adc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd53121bd70fdcc8eb33cb4639eb9272c2b930f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd53121bd70fdcc8eb33cb4639eb9272c2b930f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3dd53121bd70fdcc8eb33cb4639eb9272c2b930f", "patch": "@@ -1,3 +1,42 @@\n+2004-09-15  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR target/11572\n+\t* c-incpath.h (target_c_incpath_s): Add extra_pre_includes.\n+\tAdd two parameters to extra_includes.\n+\t(C_INCPATH_INIT): Remove.\n+\t* c-incpath.c (register_include_chains): Call extra_pre_includes\n+\tbefore adding the standard include directory.\n+\tUpdate call to extra_includes.\n+\t(!defined TARGET_EXTRA_INCLUDES): Update\n+\thook_void_charptr_charptr_int and add !define\n+\tTARGET_EXTRA_PRE_INCLUDES.\n+\t(!define TARGET_EXTRA_INCLUDES): Define as\n+\thook_void_charptr_charptr_int.\n+\t(!define TARGET_EXTRA_PRE_INCLUDES): Likewise.\n+\t(target_c_incpath): Always declare.\n+\t* fixinclude.c (defined TARGET_EXTRA_INCLUDES): Declare a\n+\tempty function.\n+\t(define TARGET_EXTRA_PRE_INCLUDES): Likewise.\n+\t* config/darwin.h: (darwin_register_frameworks): Update for\n+\tthe two new parameters.\n+\t(darwin_register_objc_includes): Add prototype.\n+\t(TARGET_EXTRA_PRE_INCLUDES): Define.\n+\t* config/darwin-c.c (darwin_register_objc_includes): New function.\n+\t(darwin_register_frameworks): Update for the two new parameters.\n+\t(target_c_incpath): Remove.\n+\t* config/t-darwin (darwin-c.o): Add $(PREPROCESSOR_DEFINES) to\n+\tthe compile line.\n+\t* doc/tm.texi (TARGET_EXTRA_INCLUDES): Document the two new\n+\tparameters.\n+\t(TARGET_EXTRA_PRE_INCLUDES): Document.\n+\n+\t* gcc.c (spec_function): Add replace-outfile.\n+\t(replace_outfile_spec_function): New function.\n+\t* config/darwin.h (LINK_SPEC): Add replace\n+\t-lobjc with -lobjc-gnu if -fgnu-runtime is\n+\tsupplied.\n+\t* invoke.texi (replace-outfile): Document.\n+\n 2004-09-13  Jan Hubicka  <jh@suse.cz>\n \n \t* predict.c (expr_expected_value, strip_builtin_expect): New function."}, {"sha": "4fd1b131ed89e71c6ce430ef6c8b7f76a697fd3c", "filename": "gcc/c-incpath.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd53121bd70fdcc8eb33cb4639eb9272c2b930f/gcc%2Fc-incpath.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd53121bd70fdcc8eb33cb4639eb9272c2b930f/gcc%2Fc-incpath.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-incpath.c?ref=3dd53121bd70fdcc8eb33cb4639eb9272c2b930f", "patch": "@@ -372,21 +372,34 @@ register_include_chains (cpp_reader *pfile, const char *sysroot,\n      include chain.  */\n   add_env_var_paths (\"CPATH\", BRACKET);\n   add_env_var_paths (lang_env_vars[idx], SYSTEM);\n+  \n+  target_c_incpath.extra_pre_includes (sysroot, iprefix, stdinc);\n \n   /* Finally chain on the standard directories.  */\n   if (stdinc)\n     add_standard_paths (sysroot, iprefix, cxx_stdinc);\n \n-  target_c_incpath.extra_includes (stdinc);\n+  target_c_incpath.extra_includes (sysroot, iprefix, stdinc);\n \n   merge_include_chains (pfile, verbose);\n \n   cpp_set_include_chains (pfile, heads[QUOTE], heads[BRACKET],\n \t\t\t  quote_ignores_source_dir);\n }\n+#if !(defined TARGET_EXTRA_INCLUDES) || !(defined TARGET_EXTRA_PRE_INCLUDES)\n+static void hook_void_charptr_charptr_int (const char *sysroot ATTRIBUTE_UNUSED,\n+\t\t\t\t\t   const char *iprefix ATTRIBUTE_UNUSED,\n+\t\t\t\t\t   int stdinc ATTRIBUTE_UNUSED)\n+{\n+}\n+#endif\n \n #ifndef TARGET_EXTRA_INCLUDES\n-static void hook_void_int(int u ATTRIBUTE_UNUSED) { }\n-\n-struct target_c_incpath_s target_c_incpath = { hook_void_int };\n+#define TARGET_EXTRA_INCLUDES hook_void_charptr_charptr_int\n #endif\n+#ifndef TARGET_EXTRA_PRE_INCLUDES\n+#define TARGET_EXTRA_PRE_INCLUDES hook_void_charptr_charptr_int\n+#endif\n+\n+struct target_c_incpath_s target_c_incpath = { TARGET_EXTRA_PRE_INCLUDES, TARGET_EXTRA_INCLUDES };\n+"}, {"sha": "cc261a6d88423c6754542c6a9fb36f823947b046", "filename": "gcc/c-incpath.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd53121bd70fdcc8eb33cb4639eb9272c2b930f/gcc%2Fc-incpath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd53121bd70fdcc8eb33cb4639eb9272c2b930f/gcc%2Fc-incpath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-incpath.h?ref=3dd53121bd70fdcc8eb33cb4639eb9272c2b930f", "patch": "@@ -23,11 +23,10 @@ extern void add_cpp_dir_path (struct cpp_dir *, int);\n \n struct target_c_incpath_s {\n   /* Do extra includes processing.  STDINC is false iff -nostdinc was given.  */\n-  void (*extra_includes) (int);\n+  void (*extra_pre_includes) (const char *, const char *, int);\n+  void (*extra_includes) (const char *, const char *, int);\n };\n \n extern struct target_c_incpath_s target_c_incpath;\n \n-#define C_INCPATH_INIT { TARGET_EXTRA_INCLUDES }\n-\n enum { QUOTE = 0, BRACKET, SYSTEM, AFTER };"}, {"sha": "d7f3e01016f3504f284fdfd4e6e2163f2fda9d9c", "filename": "gcc/config/darwin-c.c", "status": "modified", "additions": 45, "deletions": 3, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd53121bd70fdcc8eb33cb4639eb9272c2b930f/gcc%2Fconfig%2Fdarwin-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd53121bd70fdcc8eb33cb4639eb9272c2b930f/gcc%2Fconfig%2Fdarwin-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-c.c?ref=3dd53121bd70fdcc8eb33cb4639eb9272c2b930f", "patch": "@@ -30,6 +30,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"c-incpath.h\"\n #include \"toplev.h\"\n #include \"tm_p.h\"\n+#include \"cppdefault.h\"\n+#include \"prefix.h\"\n \n /* Pragmas.  */\n \n@@ -419,13 +421,55 @@ static const char *framework_defaults [] =\n     \"/Library/Frameworks\",\n   };\n \n+/* Register the GNU objective-C runtime include path if STDINC.  */\n+\n+void\n+darwin_register_objc_includes (const char *sysroot, const char *iprefix,\n+\t\t\t       int stdinc)\n+{\n+  const char *fname;\n+  size_t len;\n+  /* We do not do anything if we do not want the standard includes. */\n+  if (!stdinc)\n+    return;\n+  \n+  fname = GCC_INCLUDE_DIR \"-gnu-runtime\";\n+  \n+  /* Register the GNU OBJC runtime include path if we are compiling  OBJC\n+    with GNU-runtime.  */\n+\n+  if (c_dialect_objc () && !flag_next_runtime)\n+    {\n+      char *str;\n+      /* See if our directory starts with the standard prefix.\n+\t \"Translate\" them, ie. replace /usr/local/lib/gcc... with\n+\t IPREFIX and search them first.  */\n+      if (iprefix && (len = cpp_GCC_INCLUDE_DIR_len) != 0 && !sysroot\n+\t  && !strncmp (fname, cpp_GCC_INCLUDE_DIR, len))\n+\t{\n+\t  str = concat (iprefix, fname + len, NULL);\n+          /* FIXME: wrap the headers for C++awareness.  */\n+\t  add_path (str, SYSTEM, /*c++aware=*/false, false);\n+\t}\n+      \n+      /* Should this directory start with the sysroot?  */\n+      if (sysroot)\n+\tstr = concat (sysroot, fname, NULL);\n+      else\n+\tstr = update_path (fname, \"\");\n+      \n+      add_path (str, SYSTEM, /*c++aware=*/false, false);\n+    }\n+}\n+\n \n /* Register all the system framework paths if STDINC is true and setup\n    the missing_header callback for subframework searching if any\n    frameworks had been registered.  */\n \n void\n-darwin_register_frameworks (int stdinc)\n+darwin_register_frameworks (const char *sysroot ATTRIBUTE_UNUSED,\n+\t\t\t    const char *iprefix ATTRIBUTE_UNUSED, int stdinc)\n {\n   if (stdinc)\n     {\n@@ -476,5 +520,3 @@ find_subframework_header (cpp_reader *pfile, const char *header, cpp_dir **dirp)\n \n   return 0;\n }\n-\n-struct target_c_incpath_s target_c_incpath = C_INCPATH_INIT;"}, {"sha": "0fd84739d08084f3a6ddd461ccfe0d727b2eb6f0", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd53121bd70fdcc8eb33cb4639eb9272c2b930f/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd53121bd70fdcc8eb33cb4639eb9272c2b930f/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=3dd53121bd70fdcc8eb33cb4639eb9272c2b930f", "patch": "@@ -238,6 +238,7 @@ extern const char *darwin_fix_and_continue_switch;\n    their names so all of them get passed.  */\n #define LINK_SPEC  \\\n   \"%{static}%{!static:-dynamic} \\\n+   %{fgnu-runtime:%:replace-outfile(-lobjc -lobjc-gnu)}\\\n    %{!Zdynamiclib: \\\n      %{Zbundle:-bundle} \\\n      %{Zbundle_loader*:-bundle_loader %*} \\\n@@ -962,7 +963,9 @@ enum machopic_addr_class {\n #undef ASM_APP_OFF\n #define ASM_APP_OFF \"\"\n \n-void darwin_register_frameworks (int);\n+void darwin_register_frameworks (const char *, const char *, int);\n+void darwin_register_objc_includes (const char *, const char *, int);\n+#define TARGET_EXTRA_PRE_INCLUDES darwin_register_objc_includes\n #define TARGET_EXTRA_INCLUDES darwin_register_frameworks\n \n void add_framework_path (char *);"}, {"sha": "ab2e6ae05c1414d5922332b05f3d2282c6112a08", "filename": "gcc/config/t-darwin", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd53121bd70fdcc8eb33cb4639eb9272c2b930f/gcc%2Fconfig%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd53121bd70fdcc8eb33cb4639eb9272c2b930f/gcc%2Fconfig%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-darwin?ref=3dd53121bd70fdcc8eb33cb4639eb9272c2b930f", "patch": "@@ -7,7 +7,7 @@ darwin.o: $(srcdir)/config/darwin.c $(CONFIG_H) $(SYSTEM_H) coretypes.h     \\\n darwin-c.o: $(srcdir)/config/darwin-c.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n   $(TM_H) $(CPPLIB_H) tree.h c-pragma.h $(C_TREE_H) toplev.h $(TM_P_H) \\\n   c-incpath.h\n-\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/config/darwin-c.c\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/config/darwin-c.c $(PREPROCESSOR_DEFINES)\n \n gt-darwin.h : s-gtype ; @true\n "}, {"sha": "b172cd39166939457aacee7d3feb67f7d76cda16", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd53121bd70fdcc8eb33cb4639eb9272c2b930f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd53121bd70fdcc8eb33cb4639eb9272c2b930f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3dd53121bd70fdcc8eb33cb4639eb9272c2b930f", "patch": "@@ -6361,6 +6361,16 @@ based on the existence of the first.  Here is a small example of its usage:\n crt0%O%s %:if-exists(crti%O%s) \\\n %:if-exists-else(crtbeginT%O%s crtbegin%O%s)\n @end smallexample\n+\n+@item @code{replace-outfile}\n+The @code{replace-outfile} spec function takes two arguments.  It looks for the\n+first argument in the outfiles array and replaces it with the second argument.  Here\n+is a small example of its usage:\n+\n+@smallexample\n+%@{fgnu-runtime:%:replace-outfile(-lobjc -lobjc-gnu)@}\n+@end smallexample\n+\n @end table\n \n @item %@{@code{S}@}"}, {"sha": "f0132e01f540da6348514dd27d12a6896b8ba9b2", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd53121bd70fdcc8eb33cb4639eb9272c2b930f/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd53121bd70fdcc8eb33cb4639eb9272c2b930f/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=3dd53121bd70fdcc8eb33cb4639eb9272c2b930f", "patch": "@@ -9370,10 +9370,19 @@ system library's @code{pow}, @code{powf} or @code{powl} routines.\n The default value places no upper bound on the multiplication count.\n @end defmac\n \n-@deftypefn Macro void TARGET_EXTRA_INCLUDES (int @var{stdinc})\n+@deftypefn Macro void TARGET_EXTRA_INCLUDES (const char *@var{sysroot}, const char *@var{iprefix}, int @var{stdinc})\n This target hook should register any extra include files for the\n target.  The parameter @var{stdinc} indicates if normal include files\n-are present.\n+are present.  The parameter @var{sysroot} is the system root directory.\n+The parameter @var{iprefix} is the prefix for the gcc directory.\n+@end deftypefn\n+\n+@deftypefn Macro void TARGET_EXTRA_PRE_INCLUDES (const char *@var{sysroot}, const char *@var{iprefix}, int @var{stdinc})\n+This target hook should register any extra include files for the\n+target before any standard headers.  The parameter @var{stdinc}\n+indicates if normal include files are present.  The parameter\n+@var{sysroot} is the system root directory.  The parameter\n+@var{iprefix} is the prefix for the gcc directory.\n @end deftypefn\n \n @deftypefn Macro void TARGET_OPTF (char *@var{path})"}, {"sha": "4e4c8dc969248b1cec8ecbe538772999605403cb", "filename": "gcc/fix-header.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd53121bd70fdcc8eb33cb4639eb9272c2b930f/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd53121bd70fdcc8eb33cb4639eb9272c2b930f/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=3dd53121bd70fdcc8eb33cb4639eb9272c2b930f", "patch": "@@ -82,9 +82,19 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #include \"errors.h\"\n \n #ifdef TARGET_EXTRA_INCLUDES\n-static void hook_void_int(int u ATTRIBUTE_UNUSED) { }\n+void TARGET_EXTRA_INCLUDES (const char *sysroot ATTRIBUTE_UNUSED,\n+\t\t\t    const char *iprefix ATTRIBUTE_UNUSED,\n+\t\t\t    int stdinc ATTRIBUTE_UNUSED)\n+{\n+}\n+#endif\n \n-struct target_c_incpath_s target_c_incpath = { hook_void_int };\n+#ifdef TARGET_EXTRA_PRE_INCLUDES \n+void TARGET_EXTRA_PRE_INCLUDES (const char *sysroot ATTRIBUTE_UNUSED,\n+\t\t\t    const char *iprefix ATTRIBUTE_UNUSED,\n+\t\t\t    int stdinc ATTRIBUTE_UNUSED)\n+{\n+}\n #endif\n \n struct line_maps line_table;"}, {"sha": "6e7dec933ca246e5fc4303d832a19cdfab00fc1c", "filename": "gcc/gcc.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd53121bd70fdcc8eb33cb4639eb9272c2b930f/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd53121bd70fdcc8eb33cb4639eb9272c2b930f/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=3dd53121bd70fdcc8eb33cb4639eb9272c2b930f", "patch": "@@ -361,6 +361,7 @@ static const char *convert_filename (const char *, int, int);\n \n static const char *if_exists_spec_function (int, const char **);\n static const char *if_exists_else_spec_function (int, const char **);\n+static const char *replace_outfile_spec_function (int, const char **);\n \f\n /* The Specs Language\n \n@@ -1572,6 +1573,7 @@ static const struct spec_function static_spec_functions[] =\n {\n   { \"if-exists\",\t\tif_exists_spec_function },\n   { \"if-exists-else\",\t\tif_exists_else_spec_function },\n+  { \"replace-outfile\",\t\treplace_outfile_spec_function },\n   { 0, 0 }\n };\n \n@@ -7582,3 +7584,24 @@ if_exists_else_spec_function (int argc, const char **argv)\n \n   return argv[1];\n }\n+\n+/* replace-outfile built-in spec function.\n+   This looks for the first argument in the outfiles array's name and replaces it\n+   with the second argument.  */\n+\n+static const char *\n+replace_outfile_spec_function (int argc, const char **argv)\n+{\n+  int i;\n+  /* Must have exactly two arguments.  */\n+  if (argc != 2)\n+    abort ();\n+  \n+  for (i = 0; i < n_infiles; i++)\n+    {\n+      if (outfiles[i] && !strcmp (outfiles[i], argv[0]))\n+\toutfiles[i] = xstrdup (argv[1]);\n+    }\n+  return NULL;\n+}\n+"}]}