{"sha": "4dbf26d534a9c3fff592ca9fef172449f6886842", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRiZjI2ZDUzNGE5YzNmZmY1OTJjYTlmZWYxNzI0NDlmNjg4Njg0Mg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2009-08-06T11:43:38Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-08-06T11:43:38Z"}, "message": "re PR target/40957 (standard_sse_constant_opcode crash on x86 64)\n\n\tPR target/40957\n\t* config/i386/i386.c (standard_sse_mode_p): Remove.\n\t(standard_sse_constant_p): Return 2 for integer mode\n\tvector_all_ones_operand when SSE2 is enabled.\n\t(standard_sse_constant_opcode)<case 2>: Always return [v]pcmpeqd.\n\t(ix86_expand_vector_move): Do not check for negative values from\n\tstandard_sse_constant_p.\n\ntestsuite/ChangeLog:\n\n\tPR target/40957\n\t* gcc.target/i386/pr40957: New test.\n\n\nCo-Authored-By: H.J. Lu <hongjiu.lu@intel.com>\n\nFrom-SVN: r150520", "tree": {"sha": "9ec6082561ff7437521b9f60801bfea9863bdaaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ec6082561ff7437521b9f60801bfea9863bdaaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4dbf26d534a9c3fff592ca9fef172449f6886842", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dbf26d534a9c3fff592ca9fef172449f6886842", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dbf26d534a9c3fff592ca9fef172449f6886842", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dbf26d534a9c3fff592ca9fef172449f6886842/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e52201b6803177a519fc6dfd36e247b33bea4bac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e52201b6803177a519fc6dfd36e247b33bea4bac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e52201b6803177a519fc6dfd36e247b33bea4bac"}], "stats": {"total": 96, "additions": 53, "deletions": 43}, "files": [{"sha": "09c03076221710bc91036fcbb82e2872f188afc5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dbf26d534a9c3fff592ca9fef172449f6886842/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dbf26d534a9c3fff592ca9fef172449f6886842/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4dbf26d534a9c3fff592ca9fef172449f6886842", "patch": "@@ -1,3 +1,14 @@\n+2009-08-06  Uros Bizjak  <ubizjak@gmail.com>\n+\t    H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/40957\n+\t* config/i386/i386.c (standard_sse_mode_p): Remove.\n+\t(standard_sse_constant_p): Return 2 for integer mode\n+\tvector_all_ones_operand when SSE2 is enabled.\n+\t(standard_sse_constant_opcode)<case 2>: Always return [v]pcmpeqd.\n+\t(ix86_expand_vector_move): Do not check for negative values from\n+\tstandard_sse_constant_p.\n+\n 2009-08-06  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa.c (useless_type_conversion_p_1): Make function and"}, {"sha": "acb7753664b6a59f62b53b79a9199e5046802e4f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 18, "deletions": 43, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dbf26d534a9c3fff592ca9fef172449f6886842/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dbf26d534a9c3fff592ca9fef172449f6886842/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=4dbf26d534a9c3fff592ca9fef172449f6886842", "patch": "@@ -7357,28 +7357,8 @@ standard_80387_constant_rtx (int idx)\n \t\t\t\t       XFmode);\n }\n \n-/* Return 1 if mode is a valid mode for sse.  */\n-static int\n-standard_sse_mode_p (enum machine_mode mode)\n-{\n-  switch (mode)\n-    {\n-    case V16QImode:\n-    case V8HImode:\n-    case V4SImode:\n-    case V2DImode:\n-    case V4SFmode:\n-    case V2DFmode:\n-      return 1;\n-\n-    default:\n-      return 0;\n-    }\n-}\n-\n-/* Return 1 if X is all 0s.  For all 1s, return 2 if X is in 128bit\n-   SSE modes and SSE2 is enabled,  return 3 if X is in 256bit AVX\n-   modes and AVX is enabled.  */\n+/* Return 1 if X is all 0s and 2 if x is all 1s\n+   in supported SSE vector mode.  */\n \n int\n standard_sse_constant_p (rtx x)\n@@ -7388,12 +7368,17 @@ standard_sse_constant_p (rtx x)\n   if (x == const0_rtx || x == CONST0_RTX (GET_MODE (x)))\n     return 1;\n   if (vector_all_ones_operand (x, mode))\n-    {\n-      if (standard_sse_mode_p (mode))\n-\treturn TARGET_SSE2 ? 2 : -2;\n-      else if (VALID_AVX256_REG_MODE (mode))\n-\treturn TARGET_AVX ? 3 : -3;\n-    }\n+    switch (mode)\n+      {\n+      case V16QImode:\n+      case V8HImode:\n+      case V4SImode:\n+      case V2DImode:\n+\tif (TARGET_SSE2)\n+\t  return 2;\n+      default:\n+\tbreak;\n+      }\n \n   return 0;\n }\n@@ -7422,22 +7407,12 @@ standard_sse_constant_opcode (rtx insn, rtx x)\n \tcase MODE_OI:\n \t  return \"vpxor\\t%x0, %x0, %x0\";\n \tdefault:\n-\t  gcc_unreachable ();\n+\t  break;\n \t}\n     case 2:\n-      if (TARGET_AVX)\n-\tswitch (get_attr_mode (insn))\n-\t  {\n-\t  case MODE_V4SF:\n-\t  case MODE_V2DF:\n-\t  case MODE_TI:\n-\t    return \"vpcmpeqd\\t%0, %0, %0\";\n-\t    break;\n-\t  default:\n-\t    gcc_unreachable ();\n-\t}\n-      else\n-\treturn \"pcmpeqd\\t%0, %0\";\n+      return TARGET_AVX ? \"vpcmpeqd\\t%0, %0, %0\" : \"pcmpeqd\\t%0, %0\";\n+    default:\n+      break;\n     }\n   gcc_unreachable ();\n }\n@@ -12908,7 +12883,7 @@ ix86_expand_vector_move (enum machine_mode mode, rtx operands[])\n       && (CONSTANT_P (op1)\n \t  || (GET_CODE (op1) == SUBREG\n \t      && CONSTANT_P (SUBREG_REG (op1))))\n-      && standard_sse_constant_p (op1) <= 0)\n+      && !standard_sse_constant_p (op1))\n     op1 = validize_mem (force_const_mem (mode, op1));\n \n   /* We need to check memory alignment for SSE mode since attribute"}, {"sha": "2232d5fad6290a2dd0ba14c0d57c32aba3ccd8e7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dbf26d534a9c3fff592ca9fef172449f6886842/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dbf26d534a9c3fff592ca9fef172449f6886842/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4dbf26d534a9c3fff592ca9fef172449f6886842", "patch": "@@ -1,3 +1,9 @@\n+2009-08-06  Uros Bizjak  <ubizjak@gmail.com>\n+\t    H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/40957\n+\t* gcc.target/i386/pr40957: New test.\n+\n 2009-08-06  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/40964"}, {"sha": "56762d7e8108eed28433d7f5a995a718953dc018", "filename": "gcc/testsuite/gcc.target/i386/pr40957.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dbf26d534a9c3fff592ca9fef172449f6886842/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr40957.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dbf26d534a9c3fff592ca9fef172449f6886842/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr40957.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr40957.c?ref=4dbf26d534a9c3fff592ca9fef172449f6886842", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+typedef int __v8si __attribute__((__vector_size__(32)));\n+typedef long long __m256i __attribute__((__vector_size__(32), __may_alias__));\n+\n+static __m256i\n+_mm256_set1_epi32 (int __A)\n+{\n+  return __extension__ (__m256i)(__v8si){ __A, __A, __A, __A,\n+\t\t\t\t\t  __A, __A, __A, __A };\n+}\n+__m256i\n+foo ()\n+{\n+  return _mm256_set1_epi32 (-1);\n+}"}]}