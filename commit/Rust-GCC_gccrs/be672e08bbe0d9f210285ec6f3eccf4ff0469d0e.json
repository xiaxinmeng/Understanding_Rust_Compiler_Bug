{"sha": "be672e08bbe0d9f210285ec6f3eccf4ff0469d0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU2NzJlMDhiYmUwZDlmMjEwMjg1ZWM2ZjNlY2NmNGZmMDQ2OWQwZQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2013-04-03T19:18:09Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2013-04-03T19:18:09Z"}, "message": "re PR tree-optimization/56799 (Runfail after r197060+r197082.)\n\n        PR tree-optimization/56799\n        * tree-ssa-dom.c (record_equivalences_from_incoming_edge): Bring\n        back test for widening conversion erroneously dropped in prior\n        change.\n\n        PR tree-optimization/56799\n        * gcc.c-torture/execute/pr56799.c: New test.\n\nFrom-SVN: r197453", "tree": {"sha": "0a355e4712ab8548abe7e365aa96c85ecd240ec6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a355e4712ab8548abe7e365aa96c85ecd240ec6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be672e08bbe0d9f210285ec6f3eccf4ff0469d0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be672e08bbe0d9f210285ec6f3eccf4ff0469d0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be672e08bbe0d9f210285ec6f3eccf4ff0469d0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be672e08bbe0d9f210285ec6f3eccf4ff0469d0e/comments", "author": null, "committer": null, "parents": [{"sha": "9eb85f272426b21e010a3ca433348fc7efc88eaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eb85f272426b21e010a3ca433348fc7efc88eaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eb85f272426b21e010a3ca433348fc7efc88eaa"}], "stats": {"total": 66, "additions": 64, "deletions": 2}, "files": [{"sha": "a3b60c93e3defb4fceee908ea64556384ce53aec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be672e08bbe0d9f210285ec6f3eccf4ff0469d0e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be672e08bbe0d9f210285ec6f3eccf4ff0469d0e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be672e08bbe0d9f210285ec6f3eccf4ff0469d0e", "patch": "@@ -1,3 +1,10 @@\n+2013-04-03  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/56799\n+        * tree-ssa-dom.c (record_equivalences_from_incoming_edge): Bring\n+\tback test for widening conversion erroneously dropped in prior\n+\tchange.\n+\n 2013-04-03  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/56809\n@@ -896,6 +903,7 @@\n \t* config/tilegx/tilepro.h (PROFILE_BEFORE_PROLOGUE): Define.\n \n 2013-03-25  Jeff Law  <law@redhat.com>\n+\n         * tree-ssa-dom.c (record_equivalences_from_incoming_edge): Add missing\n         check for INTEGRAL_TYPE_P that was missing due to checking in\n \twrong version of prior patch."}, {"sha": "dc0b74533f469c83b6418ad981ac470f4b60af0c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be672e08bbe0d9f210285ec6f3eccf4ff0469d0e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be672e08bbe0d9f210285ec6f3eccf4ff0469d0e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=be672e08bbe0d9f210285ec6f3eccf4ff0469d0e", "patch": "@@ -1,3 +1,8 @@\n+2013-04-03  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/56799\n+\t* gcc.c-torture/execute/pr56799.c: New test.\n+\n 2013-04-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/56815"}, {"sha": "d9ee26bc27fc2e78a6faac0d3e4635e61985617a", "filename": "gcc/testsuite/gcc.c-torture/execute/pr56799.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be672e08bbe0d9f210285ec6f3eccf4ff0469d0e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr56799.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be672e08bbe0d9f210285ec6f3eccf4ff0469d0e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr56799.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr56799.c?ref=be672e08bbe0d9f210285ec6f3eccf4ff0469d0e", "patch": "@@ -0,0 +1,43 @@\n+\n+#include <stdio.h>\n+typedef struct { int x; int y;} S;\n+extern int foo(S*);\n+int hi = 0, lo = 0;\n+\n+int main()\n+{\n+  S a;\n+  int r;\n+  a.x = (int) 0x00010000;\n+  a.y = 1;\n+  r = foo (&a);\n+  if (r == 2 && lo==0 && hi==1)\n+    {\n+      exit (0);\n+    }\n+  abort ();\n+}\n+\n+typedef unsigned short u16;\n+\n+__attribute__ ((noinline)) int foo (S* ptr)\n+{\n+  int a = ptr->x;\n+  int c = 0;\n+  u16 b = (u16) a;\n+  if (b != 0)\n+  {\n+    lo = 1;\n+    c += ptr->y;\n+  }\n+  b = a >> 16;\n+  if (b != 0)\n+  {\n+    hi = 1;\n+    c+= ptr->y;\n+  }\n+  c += ptr->y;\n+  return c;\n+}\n+\n+     "}, {"sha": "d98a646aa4ffbc9d69a5baa393644798a722a9c5", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be672e08bbe0d9f210285ec6f3eccf4ff0469d0e/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be672e08bbe0d9f210285ec6f3eccf4ff0469d0e/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=be672e08bbe0d9f210285ec6f3eccf4ff0469d0e", "patch": "@@ -1151,9 +1151,15 @@ record_equivalences_from_incoming_edge (basic_block bb)\n \t\t{\n \t\t  tree old_rhs = gimple_assign_rhs1 (defstmt);\n \n-\t\t  /* If the constant is in the range of the type of OLD_RHS,\n-\t\t     then convert the constant and record the equivalence.  */\n+\t\t  /* If the conversion widens the original value and\n+\t\t     the constant is in the range of the type of OLD_RHS,\n+\t\t     then convert the constant and record the equivalence. \n+\n+\t\t     Note that int_fits_type_p does not check the precision\n+\t\t     if the upper and lower bounds are OK.  */\n \t\t  if (INTEGRAL_TYPE_P (TREE_TYPE (old_rhs))\n+\t\t      && (TYPE_PRECISION (TREE_TYPE (lhs))\n+\t\t\t  > TYPE_PRECISION (TREE_TYPE (old_rhs)))\n \t\t      && int_fits_type_p (rhs, TREE_TYPE (old_rhs)))\n \t\t    {\n \t\t      tree newval = fold_convert (TREE_TYPE (old_rhs), rhs);"}]}