{"sha": "b5f86dca7e6b53ca3701ef01ae36070a760dff78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVmODZkY2E3ZTZiNTNjYTM3MDFlZjAxYWUzNjA3MGE3NjBkZmY3OA==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2021-01-08T07:08:14Z"}, "committer": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2021-01-08T07:08:14Z"}, "message": "Added final to some overriden methods for optimisation, planned macro parsing", "tree": {"sha": "9068741ba3ed05bafa7ad98989881198618e28b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9068741ba3ed05bafa7ad98989881198618e28b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5f86dca7e6b53ca3701ef01ae36070a760dff78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5f86dca7e6b53ca3701ef01ae36070a760dff78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5f86dca7e6b53ca3701ef01ae36070a760dff78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5f86dca7e6b53ca3701ef01ae36070a760dff78/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "faf78e75e4ec3c989e452d47dc37a0be1706bf08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faf78e75e4ec3c989e452d47dc37a0be1706bf08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faf78e75e4ec3c989e452d47dc37a0be1706bf08"}], "stats": {"total": 177, "additions": 113, "deletions": 64}, "files": [{"sha": "7700bf3dab3181cc92d721d39aed61d21dd73de6", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f86dca7e6b53ca3701ef01ae36070a760dff78/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f86dca7e6b53ca3701ef01ae36070a760dff78/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=b5f86dca7e6b53ca3701ef01ae36070a760dff78", "patch": "@@ -218,11 +218,11 @@ class Token : public TokenTree, public MacroMatch\n \n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n-  Token *clone_token_tree_impl () const override { return clone_token_impl (); }\n+  Token *clone_token_tree_impl () const final override { return clone_token_impl (); }\n \n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n-  Token *clone_macro_match_impl () const override\n+  Token *clone_macro_match_impl () const final override\n   {\n     return clone_token_impl ();\n   }\n@@ -641,7 +641,7 @@ class AttrInputMetaItemContainer : public AttrInput\n \n protected:\n   // Use covariance to implement clone function as returning this type\n-  AttrInputMetaItemContainer *clone_attr_input_impl () const override\n+  AttrInputMetaItemContainer *clone_attr_input_impl () const final override\n   {\n     return clone_attr_input_meta_item_container_impl ();\n   }\n@@ -667,14 +667,14 @@ class DelimTokenTree : public TokenTree, public AttrInput\n \n   /* Use covariance to implement clone function as returning a DelimTokenTree\n    * object */\n-  DelimTokenTree *clone_attr_input_impl () const override\n+  DelimTokenTree *clone_attr_input_impl () const final override\n   {\n     return clone_delim_tok_tree_impl ();\n   }\n \n   /* Use covariance to implement clone function as returning a DelimTokenTree\n    * object */\n-  DelimTokenTree *clone_token_tree_impl () const override\n+  DelimTokenTree *clone_token_tree_impl () const final override\n   {\n     return clone_delim_tok_tree_impl ();\n   }\n@@ -930,7 +930,7 @@ class ExprWithoutBlock : public Expr\n \n   /* downcasting hack from expr to use pratt parsing with\n    * parse_expr_without_block */\n-  ExprWithoutBlock *as_expr_without_block () const override\n+  ExprWithoutBlock *as_expr_without_block () const final override\n   {\n     return clone_expr_without_block_impl ();\n   }\n@@ -956,7 +956,7 @@ class IdentifierExpr : public ExprWithoutBlock\n   std::string as_string () const override { return ident; }\n \n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n \n   Identifier get_ident () const { return ident; }\n \n@@ -974,7 +974,7 @@ class IdentifierExpr : public ExprWithoutBlock\n \n protected:\n   // Clone method implementation\n-  IdentifierExpr *clone_expr_without_block_impl () const override\n+  IdentifierExpr *clone_expr_without_block_impl () const final override\n   {\n     return clone_identifier_expr_impl ();\n   }\n@@ -1559,35 +1559,35 @@ class MacroInvocationSemi : public MacroItem,\n \n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n-  MacroInvocationSemi *clone_item_impl () const override\n+  MacroInvocationSemi *clone_item_impl () const final override\n   {\n     return clone_macro_invocation_semi_impl ();\n   }\n \n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n-  MacroInvocationSemi *clone_inherent_impl_item_impl () const override\n+  MacroInvocationSemi *clone_inherent_impl_item_impl () const final override\n   {\n     return clone_macro_invocation_semi_impl ();\n   }\n \n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n-  MacroInvocationSemi *clone_trait_impl_item_impl () const override\n+  MacroInvocationSemi *clone_trait_impl_item_impl () const final override\n   {\n     return clone_macro_invocation_semi_impl ();\n   }\n \n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n-  MacroInvocationSemi *clone_trait_item_impl () const override\n+  MacroInvocationSemi *clone_trait_item_impl () const final override\n   {\n     return clone_macro_invocation_semi_impl ();\n   }\n \n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n-  MacroInvocationSemi *clone_external_item_impl () const override\n+  MacroInvocationSemi *clone_external_item_impl () const final override\n   {\n     return clone_macro_invocation_semi_impl ();\n   }"}, {"sha": "d531342976fd722f6f8f3486f9728415da127104", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 30, "deletions": 31, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f86dca7e6b53ca3701ef01ae36070a760dff78/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f86dca7e6b53ca3701ef01ae36070a760dff78/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=b5f86dca7e6b53ca3701ef01ae36070a760dff78", "patch": "@@ -69,7 +69,7 @@ class LiteralExpr : public ExprWithoutBlock\n   }\n \n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n \n   Literal get_literal () const { return literal; }\n \n@@ -82,7 +82,7 @@ class LiteralExpr : public ExprWithoutBlock\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n-  LiteralExpr *clone_expr_without_block_impl () const override\n+  LiteralExpr *clone_expr_without_block_impl () const final override\n   {\n     return clone_literal_expr_impl ();\n   }\n@@ -238,7 +238,7 @@ class OperatorExpr : public ExprWithoutBlock\n \n public:\n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n \n   // Invalid if expr is null, so base stripping on that.\n   void mark_for_strip () override { main_or_left_expr = nullptr; }\n@@ -861,7 +861,6 @@ class GroupedExpr : public ExprWithoutBlock\n {\n   std::vector<Attribute> inner_attrs;\n   std::unique_ptr<Expr> expr_in_parens;\n-\n   Location locus;\n \n public:\n@@ -910,7 +909,7 @@ class GroupedExpr : public ExprWithoutBlock\n   GroupedExpr &operator= (GroupedExpr &&other) = default;\n \n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -1148,7 +1147,7 @@ class ArrayExpr : public ExprWithoutBlock\n   ArrayExpr &operator= (ArrayExpr &&other) = default;\n \n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -1231,7 +1230,7 @@ class ArrayIndexExpr : public ExprWithoutBlock\n   ArrayIndexExpr &operator= (ArrayIndexExpr &&other) = default;\n \n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -1329,7 +1328,7 @@ class TupleExpr : public ExprWithoutBlock\n    * comma, i.e. (0,) rather than (0) */\n \n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -1411,7 +1410,7 @@ class TupleIndexExpr : public ExprWithoutBlock\n   TupleIndexExpr &operator= (TupleIndexExpr &&other) = default;\n \n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -1484,7 +1483,7 @@ class StructExprStruct : public StructExpr\n   {}\n \n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -1866,7 +1865,7 @@ class StructExprTuple : public StructExpr\n   StructExprTuple &operator= (StructExprTuple &&other) = default;\n \n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -1903,7 +1902,7 @@ class StructExprUnit : public StructExpr\n   {}\n \n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -2143,7 +2142,7 @@ class EnumExprStruct : public EnumVariantExpr\n   EnumExprStruct &operator= (EnumExprStruct &&other) = default;\n \n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -2208,7 +2207,7 @@ class EnumExprTuple : public EnumVariantExpr\n   EnumExprTuple &operator= (EnumExprTuple &&other) = default;\n \n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -2247,7 +2246,7 @@ class EnumExprFieldless : public EnumVariantExpr\n   {}\n \n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -2326,7 +2325,7 @@ class CallExpr : public ExprWithoutBlock\n   bool has_params () const { return !params.empty (); }\n \n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -2429,7 +2428,7 @@ class MethodCallExpr : public ExprWithoutBlock\n   MethodCallExpr &operator= (MethodCallExpr &&other) = default;\n \n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -2514,7 +2513,7 @@ class FieldAccessExpr : public ExprWithoutBlock\n   FieldAccessExpr &operator= (FieldAccessExpr &&other) = default;\n \n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -2647,7 +2646,7 @@ class ClosureExpr : public ExprWithoutBlock\n   std::string as_string () const override;\n \n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n \n   // TODO: this mutable getter seems really dodgy. Think up better way.\n   const std::vector<ClosureParam> &get_params () const { return params; }\n@@ -2846,7 +2845,7 @@ class BlockExpr : public ExprWithBlock\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n-  BlockExpr *clone_expr_with_block_impl () const override\n+  BlockExpr *clone_expr_with_block_impl () const final override\n   {\n     return clone_block_expr_impl ();\n   }\n@@ -2974,7 +2973,7 @@ class ContinueExpr : public ExprWithoutBlock\n   {}\n \n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -3058,7 +3057,7 @@ class BreakExpr : public ExprWithoutBlock\n   BreakExpr &operator= (BreakExpr &&other) = default;\n \n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -3095,7 +3094,7 @@ class RangeExpr : public ExprWithoutBlock\n \n public:\n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n };\n \n // Range from (inclusive) and to (exclusive) expression AST node object\n@@ -3536,7 +3535,7 @@ class ReturnExpr : public ExprWithoutBlock\n   ReturnExpr &operator= (ReturnExpr &&other) = default;\n \n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -3609,7 +3608,7 @@ class UnsafeBlockExpr : public ExprWithBlock\n   UnsafeBlockExpr &operator= (UnsafeBlockExpr &&other) = default;\n \n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -3714,7 +3713,7 @@ class BaseLoopExpr : public ExprWithBlock\n   bool has_loop_label () const { return !loop_label.is_error (); }\n \n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n \n   // Invalid if loop block is null, so base stripping on that.\n   void mark_for_strip () override { loop_block = nullptr; }\n@@ -4029,7 +4028,7 @@ class IfExpr : public ExprWithBlock\n    * better approach? or does it not parse correctly and have downsides? */\n \n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -4258,7 +4257,7 @@ class IfLetExpr : public ExprWithBlock\n   }\n \n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -4877,7 +4876,7 @@ class MatchExpr : public ExprWithBlock\n   MatchExpr &operator= (MatchExpr &&other) = default;\n \n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -4953,7 +4952,7 @@ class AwaitExpr : public ExprWithoutBlock\n   std::string as_string () const override;\n \n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -5024,7 +5023,7 @@ class AsyncBlockExpr : public ExprWithBlock\n   std::string as_string () const override;\n \n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n \n   void accept_vis (ASTVisitor &vis) override;\n "}, {"sha": "fc34670a33b9b31e6344d9f6de65fdfb35ba13de", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f86dca7e6b53ca3701ef01ae36070a760dff78/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f86dca7e6b53ca3701ef01ae36070a760dff78/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=b5f86dca7e6b53ca3701ef01ae36070a760dff78", "patch": "@@ -149,7 +149,7 @@ class TypeParam : public GenericParam\n   }\n \n protected:\n-  // Clone function implementation as (not pure) virtual method\n+  // Clone function implementation as virtual method\n   TypeParam *clone_generic_param_impl () const override\n   {\n     return new TypeParam (*this);\n@@ -863,17 +863,19 @@ class Method : public InherentImplItem, public TraitImplItem\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */\n-  Method *clone_inherent_impl_item_impl () const override\n+  Method *clone_inherent_impl_item_impl () const final override\n   {\n-    return new Method (*this);\n+    return clone_method_impl ();\n   }\n \n   /* Use covariance to implement clone function as returning this object\n    * rather than base */\n-  Method *clone_trait_impl_item_impl () const override\n+  Method *clone_trait_impl_item_impl () const final override\n   {\n-    return new Method (*this);\n+    return clone_method_impl ();\n   }\n+\n+  /*virtual*/ Method *clone_method_impl () const { return new Method (*this); }\n };\n \n // Item that supports visibility - abstract base class"}, {"sha": "b5fb858b1e6c35a85afd5aa48848f9d1abefe16b", "filename": "gcc/rust/ast/rust-macro.h", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f86dca7e6b53ca3701ef01ae36070a760dff78/gcc%2Frust%2Fast%2Frust-macro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f86dca7e6b53ca3701ef01ae36070a760dff78/gcc%2Frust%2Fast%2Frust-macro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-macro.h?ref=b5f86dca7e6b53ca3701ef01ae36070a760dff78", "patch": "@@ -316,6 +316,12 @@ class MacroRulesDefinition : public MacroItem\n \n   Location locus;\n \n+  /* NOTE: in rustc, macro definitions are considered (and parsed as) a type \n+   * of macro, whereas here they are considered part of the language itself.\n+   * I am not aware of the implications of this decision. The rustc spec does\n+   * mention that using the same parser for macro definitions and invocations\n+   * is \"extremely self-referential and non-intuitive\". */\n+\n public:\n   std::string as_string () const override;\n \n@@ -388,21 +394,26 @@ class MacroInvocation : public TypeNoBounds,\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n-  MacroInvocation *clone_pattern_impl () const override\n+  MacroInvocation *clone_pattern_impl () const final override\n   {\n-    return new MacroInvocation (*this);\n+    return clone_macro_invocation_impl ();\n   }\n \n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n-  MacroInvocation *clone_expr_without_block_impl () const override\n+  MacroInvocation *clone_expr_without_block_impl () const final override\n   {\n-    return new MacroInvocation (*this);\n+    return clone_macro_invocation_impl ();\n   }\n \n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n-  MacroInvocation *clone_type_no_bounds_impl () const override\n+  MacroInvocation *clone_type_no_bounds_impl () const final override\n+  {\n+    return clone_macro_invocation_impl ();\n+  }\n+\n+  /*virtual*/ MacroInvocation *clone_macro_invocation_impl () const\n   {\n     return new MacroInvocation (*this);\n   }"}, {"sha": "2b7c9738553f99466e0091eee32c760ca150bf0a", "filename": "gcc/rust/ast/rust-path.h", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f86dca7e6b53ca3701ef01ae36070a760dff78/gcc%2Frust%2Fast%2Frust-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f86dca7e6b53ca3701ef01ae36070a760dff78/gcc%2Frust%2Fast%2Frust-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-path.h?ref=b5f86dca7e6b53ca3701ef01ae36070a760dff78", "patch": "@@ -353,7 +353,7 @@ class PathInExpression : public PathPattern, public PathExpr\n   }\n \n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -367,14 +367,19 @@ class PathInExpression : public PathPattern, public PathExpr\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n-  PathInExpression *clone_pattern_impl () const override\n+  PathInExpression *clone_pattern_impl () const final override\n   {\n-    return new PathInExpression (*this);\n+    return clone_path_in_expression_impl ();\n   }\n \n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n-  PathInExpression *clone_expr_without_block_impl () const override\n+  PathInExpression *clone_expr_without_block_impl () const final override\n+  {\n+    return clone_path_in_expression_impl ();\n+  }\n+\n+  /*virtual*/ PathInExpression *clone_path_in_expression_impl () const\n   {\n     return new PathInExpression (*this);\n   }\n@@ -860,7 +865,7 @@ class QualifiedPathInExpression : public PathPattern, public PathExpr\n   }\n \n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -881,14 +886,19 @@ class QualifiedPathInExpression : public PathPattern, public PathExpr\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n-  QualifiedPathInExpression *clone_pattern_impl () const override\n+  QualifiedPathInExpression *clone_pattern_impl () const final override\n   {\n-    return new QualifiedPathInExpression (*this);\n+    return clone_qual_path_in_expression_impl ();\n   }\n \n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n-  QualifiedPathInExpression *clone_expr_without_block_impl () const override\n+  QualifiedPathInExpression *clone_expr_without_block_impl () const final override\n+  {\n+    return clone_qual_path_in_expression_impl ();\n+  }\n+\n+  /*virtual*/ QualifiedPathInExpression *clone_qual_path_in_expression_impl () const\n   {\n     return new QualifiedPathInExpression (*this);\n   }"}, {"sha": "de245043e988df2b58b71a08b93cbe6413d48ced", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f86dca7e6b53ca3701ef01ae36070a760dff78/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f86dca7e6b53ca3701ef01ae36070a760dff78/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=b5f86dca7e6b53ca3701ef01ae36070a760dff78", "patch": "@@ -3616,7 +3616,34 @@ MacroExpander::expand_cfg_macro (AST::MacroInvocData &invoc)\n \n AST::ASTFragment \n MacroExpander::expand_decl_macro (AST::MacroInvocData &invoc, AST::MacroRulesDefinition &rules_def) {\n-  \n+  // ensure that both invocation and rules are in a valid state\n+  rust_assert (!invoc.is_marked_for_strip ());\n+  rust_assert (!rules_def.is_marked_for_strip ());\n+  rust_assert (rules_def.get_macro_rules ().size () > 0);\n+\n+  /* probably something here about parsing invoc and rules def token trees to token stream. if not, \n+   * how would parser handle the captures of exprs and stuff? on the other hand, token trees may be\n+   * kind of useful in rules def as creating a point where recursion can occur (like having \n+   * \"compare_macro_match\" and then it calling itself when it finds delimiters) */\n+\n+  /* find matching rule to invoc token tree, based on macro rule's matcher. if none exist, error. \n+   * - specifically, check each matcher in order. if one fails to match, move onto next. */\n+  /* TODO: does doing this require parsing expressions and whatever in the invoc? if so, might as \n+   * well save the results if referenced using $ or whatever. If not, do another pass saving them. \n+   * Except this is probably useless as different rules could have different starting points for exprs\n+   * or whatever. Decision trees could avoid this, but they have their own issues. */\n+  /* TODO: will need to modify the parser so that it can essentially \"catch\" errors - maybe \n+   * \"try_parse_expr\" or whatever methods. */\n+  // this technically creates a back-tracking parser - this will be the implementation style\n+\n+  /* then, after results are saved, generate the macro output from the transcriber token tree. if i\n+   * understand this correctly, the macro invocation gets replaced by the transcriber tokens, except\n+   * with substitutions made (e.g. for $i variables) */\n+\n+  /* TODO: it is probably better to modify AST::Token to store a pointer to a Lexer::Token (rather \n+   * than being converted) - i.e. not so much have AST::Token as a Token but rather a TokenContainer\n+   * (as it is another type of TokenTree). This will prevent re-conversion of Tokens between each type\n+   * all the time, while still allowing the heterogenous storage of token trees.  */\n }\n \n void\n@@ -3697,7 +3724,7 @@ MacroExpander::fails_cfg_with_expand (std::vector<AST::Attribute> &attrs) const\n void\n MacroExpander::expand_cfg_attrs (std::vector<AST::Attribute> &attrs)\n {\n-  for (int i = 0; i < attrs.size ();)\n+  for (std::size_t i = 0; i < attrs.size ();)\n     {\n       auto &attr = attrs[i];\n       if (attr.get_path () == \"cfg_attr\")"}]}