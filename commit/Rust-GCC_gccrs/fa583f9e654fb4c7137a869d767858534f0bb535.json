{"sha": "fa583f9e654fb4c7137a869d767858534f0bb535", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE1ODNmOWU2NTRmYjRjNzEzN2E4NjlkNzY3ODU4NTM0ZjBiYjUzNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-12-14T20:54:17Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-12-14T20:54:17Z"}, "message": "re PR c++/68309 (ICE: Segmentation fault)\n\n\tPR c++/68309\ngcc/\n\t* hash-table.h: Add copy constructor.\n\t* hash-map.h: Add copy constructor.\ngcc/cp/\n\t* pt.c (instantiate_decl): Copy local_specializations for nested\n\tfunction.\n\nFrom-SVN: r231632", "tree": {"sha": "05360f26f61441741762e034d1fa1b831ba0023b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05360f26f61441741762e034d1fa1b831ba0023b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa583f9e654fb4c7137a869d767858534f0bb535", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa583f9e654fb4c7137a869d767858534f0bb535", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa583f9e654fb4c7137a869d767858534f0bb535", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa583f9e654fb4c7137a869d767858534f0bb535/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1cb62d16c2d4c090117766d5dfc67c5badb0617c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cb62d16c2d4c090117766d5dfc67c5badb0617c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cb62d16c2d4c090117766d5dfc67c5badb0617c"}], "stats": {"total": 68, "additions": 66, "deletions": 2}, "files": [{"sha": "e7b2d6822bb34cb6489a106f02147367f9379280", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa583f9e654fb4c7137a869d767858534f0bb535/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa583f9e654fb4c7137a869d767858534f0bb535/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa583f9e654fb4c7137a869d767858534f0bb535", "patch": "@@ -1,3 +1,9 @@\n+2015-12-14  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/68309\n+\t* hash-table.h: Add copy constructor.\n+\t* hash-map.h: Add copy constructor.\n+\n 2015-12-14  Tom de Vries  <tom@codesourcery.com>\n \n \tPR other/68882"}, {"sha": "69c18871cfced7e52ae31f99d7aeddc414fbd3be", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa583f9e654fb4c7137a869d767858534f0bb535/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa583f9e654fb4c7137a869d767858534f0bb535/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fa583f9e654fb4c7137a869d767858534f0bb535", "patch": "@@ -1,3 +1,9 @@\n+2015-12-14  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/68309\n+\t* pt.c (instantiate_decl): Copy local_specializations for nested\n+\tfunction.\n+\n 2015-12-09  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/60218"}, {"sha": "a45e6df9e8b0b1bb2927b41a1c03e954e2704daf", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa583f9e654fb4c7137a869d767858534f0bb535/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa583f9e654fb4c7137a869d767858534f0bb535/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=fa583f9e654fb4c7137a869d767858534f0bb535", "patch": "@@ -21725,8 +21725,13 @@ instantiate_decl (tree d, int defer_ok,\n \t template from within the body of another.  */\n       saved_local_specializations = local_specializations;\n \n-      /* Set up the list of local specializations.  */\n-      local_specializations = new hash_map<tree, tree>;\n+      /* Set up the list of local specializations, copying the current\n+\t list if there is one.  */\n+      if (local_specializations)\n+\tlocal_specializations\n+\t  = new hash_map<tree, tree> (*local_specializations);\n+      else\n+\tlocal_specializations = new hash_map<tree, tree>;\n \n       /* Set up context.  */\n       if (DECL_OMP_DECLARE_REDUCTION_P (code_pattern)"}, {"sha": "510353bf4f787fac7b3efaf8f6d523291aa8fe0f", "filename": "gcc/hash-map.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa583f9e654fb4c7137a869d767858534f0bb535/gcc%2Fhash-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa583f9e654fb4c7137a869d767858534f0bb535/gcc%2Fhash-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-map.h?ref=fa583f9e654fb4c7137a869d767858534f0bb535", "patch": "@@ -111,6 +111,11 @@ class GTY((user)) hash_map\n \t\t     CXX_MEM_STAT_INFO)\n     : m_table (n, ggc, gather_mem_stats, HASH_MAP_ORIGIN PASS_MEM_STAT) {}\n \n+  hash_map (const hash_map &h, bool ggc = false,\n+\t    bool gather_mem_stats = GATHER_STATISTICS CXX_MEM_STAT_INFO)\n+    : m_table (h.m_table, ggc, gather_mem_stats,\n+\t       HASH_MAP_ORIGIN PASS_MEM_STAT) {}\n+\n   /* Create a hash_map in ggc memory.  */\n   static hash_map *create_ggc (size_t size,\n \t\t\t       bool gather_mem_stats = GATHER_STATISTICS"}, {"sha": "53e72e66f335f4c2836d330a9ab999d1fe23d3dd", "filename": "gcc/hash-table.h", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa583f9e654fb4c7137a869d767858534f0bb535/gcc%2Fhash-table.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa583f9e654fb4c7137a869d767858534f0bb535/gcc%2Fhash-table.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-table.h?ref=fa583f9e654fb4c7137a869d767858534f0bb535", "patch": "@@ -365,6 +365,10 @@ class hash_table\n \t\t       bool gather_mem_stats = GATHER_STATISTICS,\n \t\t       mem_alloc_origin origin = HASH_TABLE_ORIGIN\n \t\t       CXX_MEM_STAT_INFO);\n+  hash_table (const hash_table &, bool ggc = false,\n+\t      bool gather_mem_stats = GATHER_STATISTICS,\n+\t      mem_alloc_origin origin = HASH_TABLE_ORIGIN\n+\t      CXX_MEM_STAT_INFO);\n   ~hash_table ();\n \n   /* Create a hash_table in gc memory.  */\n@@ -581,6 +585,35 @@ hash_table<Descriptor, Allocator>::hash_table (size_t size, bool ggc, bool\n   m_size_prime_index = size_prime_index;\n }\n \n+template<typename Descriptor, template<typename Type> class Allocator>\n+hash_table<Descriptor, Allocator>::hash_table (const hash_table &h, bool ggc,\n+\t\t\t\t\t       bool gather_mem_stats,\n+\t\t\t\t\t       mem_alloc_origin origin\n+\t\t\t\t\t       MEM_STAT_DECL) :\n+  m_n_elements (h.m_n_elements), m_n_deleted (h.m_n_deleted),\n+  m_searches (0), m_collisions (0), m_ggc (ggc),\n+  m_gather_mem_stats (gather_mem_stats)\n+{\n+  size_t size = h.m_size;\n+\n+  if (m_gather_mem_stats)\n+    hash_table_usage.register_descriptor (this, origin, ggc\n+\t\t\t\t\t  FINAL_PASS_MEM_STAT);\n+\n+  value_type *nentries = alloc_entries (size PASS_MEM_STAT);\n+  for (size_t i = 0; i < size; ++i)\n+    {\n+      value_type &entry = h.m_entries[i];\n+      if (is_deleted (entry))\n+\tmark_deleted (nentries[i]);\n+      else if (!is_empty (entry))\n+\tnentries[i] = entry;\n+    }\n+  m_entries = nentries;\n+  m_size = size;\n+  m_size_prime_index = h.m_size_prime_index;\n+}\n+\n template<typename Descriptor, template<typename Type> class Allocator>\n hash_table<Descriptor, Allocator>::~hash_table ()\n {"}, {"sha": "76b6b3f8df6de76e87a5b4cff02e24c8faf0ccd7", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-variadic3.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa583f9e654fb4c7137a869d767858534f0bb535/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-variadic3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa583f9e654fb4c7137a869d767858534f0bb535/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-variadic3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-variadic3.C?ref=fa583f9e654fb4c7137a869d767858534f0bb535", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/68309\n+// { dg-do compile { target c++11 } }\n+\n+template <class... Ts> void f(Ts...);\n+template <class T> T g(T);\n+template <typename... Ts> void print(Ts... args) {\n+  [&] { f(g<decltype(args)>(args)...); }();\n+}\n+int main() { print(5.2); }"}]}