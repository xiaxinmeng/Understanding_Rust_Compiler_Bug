{"sha": "268c3b4758fd7fc54f8cc8220f0a6193ed862a42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY4YzNiNDc1OGZkN2ZjNTRmOGNjODIyMGYwYTYxOTNlZDg2MmE0Mg==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2014-05-16T08:59:07Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2014-05-16T08:59:07Z"}, "message": "[AArch64 costs 9/18] Better cost logical operations\n\ngcc/\n\n\t* config/aarch64/aarch64.c (aarch64_rtx_costs): Improve cost for\n\tlogical operations.\n\n\nCo-Authored-By: Philipp Tomsich <philipp.tomsich@theobroma-systems.com>\n\nFrom-SVN: r210501", "tree": {"sha": "ab3cdc8e42487dfb04ea965a4b20d8364c6497d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab3cdc8e42487dfb04ea965a4b20d8364c6497d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/268c3b4758fd7fc54f8cc8220f0a6193ed862a42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/268c3b4758fd7fc54f8cc8220f0a6193ed862a42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/268c3b4758fd7fc54f8cc8220f0a6193ed862a42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/268c3b4758fd7fc54f8cc8220f0a6193ed862a42/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2961177e7d5bd857c4809e6b4a6c655f0bb963cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2961177e7d5bd857c4809e6b4a6c655f0bb963cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2961177e7d5bd857c4809e6b4a6c655f0bb963cc"}], "stats": {"total": 71, "additions": 66, "deletions": 5}, "files": [{"sha": "e648140387b973534888fb2885b0290311d28ccc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/268c3b4758fd7fc54f8cc8220f0a6193ed862a42/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/268c3b4758fd7fc54f8cc8220f0a6193ed862a42/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=268c3b4758fd7fc54f8cc8220f0a6193ed862a42", "patch": "@@ -1,3 +1,9 @@\n+2014-05-16  James Greenhalgh  <james.greenhalgh@arm.com>\n+\t    Philipp Tomsich  <philipp.tomsich@theobroma-systems.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_rtx_costs): Improve cost for\n+\tlogical operations.\n+\n 2014-05-16  James Greenhalgh  <james.greenhalgh@arm.com>\n \t    Philipp Tomsich  <philipp.tomsich@theobroma-systems.com>\n "}, {"sha": "6b20d4a757f07d9576f1c32d7dc396a9231bcb14", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 60, "deletions": 5, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/268c3b4758fd7fc54f8cc8220f0a6193ed862a42/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/268c3b4758fd7fc54f8cc8220f0a6193ed862a42/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=268c3b4758fd7fc54f8cc8220f0a6193ed862a42", "patch": "@@ -5206,25 +5206,80 @@ aarch64_rtx_costs (rtx x, int code, int outer ATTRIBUTE_UNUSED,\n       op0 = XEXP (x, 0);\n       op1 = XEXP (x, 1);\n \n+      if (code == AND\n+          && GET_CODE (op0) == MULT\n+          && CONST_INT_P (XEXP (op0, 1))\n+          && CONST_INT_P (op1)\n+          && aarch64_uxt_size (exact_log2 (INTVAL (XEXP (op0, 1))),\n+                               INTVAL (op1)) != 0)\n+        {\n+          /* This is a UBFM/SBFM.  */\n+          *cost += rtx_cost (XEXP (op0, 0), ZERO_EXTRACT, 0, speed);\n+\t  if (speed)\n+\t    *cost += extra_cost->alu.bfx;\n+          return true;\n+        }\n+\n       if (GET_MODE_CLASS (GET_MODE (x)) == MODE_INT)\n \t{\n+\t  /* We possibly get the immediate for free, this is not\n+\t     modelled.  */\n \t  if (CONST_INT_P (op1)\n \t      && aarch64_bitmask_imm (INTVAL (op1), GET_MODE (x)))\n \t    {\n-\t      *cost += rtx_cost (op0, AND, 0, speed);\n+\t      *cost += rtx_cost (op0, (enum rtx_code) code, 0, speed);\n+\n+\t      if (speed)\n+\t\t*cost += extra_cost->alu.logical;\n+\n+\t      return true;\n \t    }\n \t  else\n \t    {\n+\t      rtx new_op0 = op0;\n+\n+\t      /* Handle ORN, EON, or BIC.  */\n \t      if (GET_CODE (op0) == NOT)\n \t\top0 = XEXP (op0, 0);\n-\t      op0 = aarch64_strip_shift (op0);\n-\t      *cost += (rtx_cost (op0, AND, 0, speed)\n-\t\t\t+ rtx_cost (op1, AND, 1, speed));\n+\n+\t      new_op0 = aarch64_strip_shift (op0);\n+\n+\t      /* If we had a shift on op0 then this is a logical-shift-\n+\t\t by-register/immediate operation.  Otherwise, this is just\n+\t\t a logical operation.  */\n+\t      if (speed)\n+\t\t{\n+\t\t  if (new_op0 != op0)\n+\t\t    {\n+\t\t      /* Shift by immediate.  */\n+\t\t      if (CONST_INT_P (XEXP (op0, 1)))\n+\t\t\t*cost += extra_cost->alu.log_shift;\n+\t\t      else\n+\t\t\t*cost += extra_cost->alu.log_shift_reg;\n+\t\t    }\n+\t\t  else\n+\t\t    *cost += extra_cost->alu.logical;\n+\t\t}\n+\n+\t      /* In both cases we want to cost both operands.  */\n+\t      *cost += rtx_cost (new_op0, (enum rtx_code) code, 0, speed)\n+\t\t       + rtx_cost (op1, (enum rtx_code) code, 1, speed);\n+\n+\t      return true;\n \t    }\n-\t  return true;\n \t}\n       return false;\n \n+    case NOT:\n+      /* MVN.  */\n+      if (speed)\n+\t*cost += extra_cost->alu.logical;\n+\n+      /* The logical instruction could have the shifted register form,\n+         but the cost is the same if the shift is processed as a separate\n+         instruction, so we don't bother with it here.  */\n+      return false;\n+\n     case ZERO_EXTEND:\n       if ((GET_MODE (x) == DImode\n \t   && GET_MODE (XEXP (x, 0)) == SImode)"}]}