{"sha": "81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE0NjRiMmNkOGY4MTUzZDEzMTRhNjI4ZmRjM2RiZGJiMjdhOWMwMg==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2008-05-08T07:10:49Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2008-05-08T07:10:49Z"}, "message": "2008-05-07  Kai Tietz  <kai,tietz@onevision.com>\n\n\t* calls.c (compute_argument_block_size): Add argument tree fndecl.\n\t(OUTGOING_REG_PARM_STACK_SPACE): Add function type argument.\n\t(emit_library_call_value_1): Add new variable fndecl initialized by\n\tNULL_TREE. It should be the decl type of orgfun, but this information\n\tseems not to be available here, so it uses the default calling abi.\n\t* config/arm/arm.c (arm_return_in_memory): Add fntype argumen.\n\t* config/arm/arm.h (RETURN_IN_MEMORY): Replace RETURN_IN_MEMORY\n\tby TARGET_RETURN_IN_MEMORY.\n\t* config/i386/i386-interix.h: Likewise.\n\t* config/i386/i386.h: Likewise.\n\t* config/i386/i386elf.h: Likewise.\n\t* config/i386/ptx4-i.h: Likewise.\n\t* config/i386/sol2-10.h: Likewise.\n\t* config/i386/sysv4.h: Likewise.\n\t* config/i386/vx-common.h: Likewise.\n\t* config/cris/cris.h: Removed #if 0 clause.\n\t* config/arm/arm-protos.h (arm_return_in_memory): Add fntype\n\targument.\n\t* config/i386/i386-protos.h (ix86_return_in_memory): Add fntype\n\targument.\n\t(ix86_sol10_return_in_memory): Likewise.\n\t(ix86_i386elf_return_in_memory): New.\n\t(ix86_i386interix_return_in_memory): New.\n\t* config/mt/mt-protos.h (mt_return_in_memory): New.\n\t* config/mt/mt.c: Likewise.\n\t* config/mt/mt.h (OUTGOING_REG_PARM_STACK_SPACE): Add FNTYPE argument.\n\t(RETURN_IN_MEMORY):  Replace by TARGET_RETURN_IN_MEMORY.\n\t* config/bfin/bfin.h: Likewise.\n\t* config/bfin/bfin-protos.h (bfin_return_in_memory): Add fntype\n\targument.\n\t* config/bfin/bfin.c: Likewise.\n\t* config/pa/pa.h (OUTGOING_REG_PARM_STACK_SPACE): Add FNTYPE argument.\n\t* config/alpha/unicosmk.h: Likewise.\n\t* config/i386/cygming.h: Likewise.\n\t* config/iq2000/iq2000.h: Likewise.\n\t* config/mips/mips.h: Likewise.\n\t* config/mn10300/mn10300.h: Likewise.\n\t* config/rs6000/rs6000.h: Likewise.\n\t* config/score/score.h: Likewise.\n\t* config/spu/spu.h: Likewise.\n\t* config/v850/v850.h: Likewise.\n\t* defaults.h: Likewise.\n\t* doc/tm.texi (OUTGOING_REG_PARM_STACK_SPACE): Adjust documentation.\n\t* expr.c (emit_block_move): Adjust use of OUTGOING_REG_PARM_STACK_SPACE.\n\t* function.c (STACK_DYNAMIC_OFFSET): Adjust use of\n\tOUTGOING_REG_PARM_STACK_SPACE.\n\t* targhooks.c (default_return_in_memory): Remove RETURN_IN_MEMORY.\n\nFrom-SVN: r135069", "tree": {"sha": "83a184beafd987a7fefd927cf5a86a9415fcc4c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83a184beafd987a7fefd927cf5a86a9415fcc4c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/comments", "author": null, "committer": null, "parents": [{"sha": "2fada7f3f32accc658153f57035890255a126076", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fada7f3f32accc658153f57035890255a126076", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fada7f3f32accc658153f57035890255a126076"}], "stats": {"total": 238, "additions": 151, "deletions": 87}, "files": [{"sha": "681dbb48b6384a5a43d435f204fb816bbdf21996", "filename": "gcc/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -1,3 +1,53 @@\n+2008-05-08  Kai Tietz  <kai,tietz@onevision.com>\n+\n+\t* calls.c (compute_argument_block_size): Add argument tree fndecl.\n+\t(OUTGOING_REG_PARM_STACK_SPACE): Add function type argument.\n+\t(emit_library_call_value_1): Add new variable fndecl initialized by\n+\tNULL_TREE. It should be the decl type of orgfun, but this information\n+\tseems not to be available here, so it uses the default calling abi.\n+\t* config/arm/arm.c (arm_return_in_memory): Add fntype argumen.\n+\t* config/arm/arm.h (RETURN_IN_MEMORY): Replace RETURN_IN_MEMORY\n+\tby TARGET_RETURN_IN_MEMORY.\n+\t* config/i386/i386-interix.h: Likewise.\n+\t* config/i386/i386.h: Likewise.\n+\t* config/i386/i386elf.h: Likewise.\n+\t* config/i386/ptx4-i.h: Likewise.\n+\t* config/i386/sol2-10.h: Likewise.\n+\t* config/i386/sysv4.h: Likewise.\n+\t* config/i386/vx-common.h: Likewise.\n+\t* config/cris/cris.h: Removed #if 0 clause.\n+\t* config/arm/arm-protos.h (arm_return_in_memory): Add fntype\n+\targument.\n+\t* config/i386/i386-protos.h (ix86_return_in_memory): Add fntype\n+\targument.\n+\t(ix86_sol10_return_in_memory): Likewise.\n+\t(ix86_i386elf_return_in_memory): New.\n+\t(ix86_i386interix_return_in_memory): New.\n+\t* config/mt/mt-protos.h (mt_return_in_memory): New.\n+\t* config/mt/mt.c: Likewise.\n+\t* config/mt/mt.h (OUTGOING_REG_PARM_STACK_SPACE): Add FNTYPE argument.\n+\t(RETURN_IN_MEMORY):  Replace by TARGET_RETURN_IN_MEMORY.\n+\t* config/bfin/bfin.h: Likewise.\n+\t* config/bfin/bfin-protos.h (bfin_return_in_memory): Add fntype\n+\targument.\n+\t* config/bfin/bfin.c: Likewise.\n+\t* config/pa/pa.h (OUTGOING_REG_PARM_STACK_SPACE): Add FNTYPE argument.\n+\t* config/alpha/unicosmk.h: Likewise.\n+\t* config/i386/cygming.h: Likewise.\n+\t* config/iq2000/iq2000.h: Likewise.\n+\t* config/mips/mips.h: Likewise.\n+\t* config/mn10300/mn10300.h: Likewise.\n+\t* config/rs6000/rs6000.h: Likewise.\n+\t* config/score/score.h: Likewise.\n+\t* config/spu/spu.h: Likewise.\n+\t* config/v850/v850.h: Likewise.\n+\t* defaults.h: Likewise.\n+\t* doc/tm.texi (OUTGOING_REG_PARM_STACK_SPACE): Adjust documentation.\n+\t* expr.c (emit_block_move): Adjust use of OUTGOING_REG_PARM_STACK_SPACE.\n+\t* function.c (STACK_DYNAMIC_OFFSET): Adjust use of\n+\tOUTGOING_REG_PARM_STACK_SPACE.\n+\t* targhooks.c (default_return_in_memory): Remove RETURN_IN_MEMORY.\n+\n 2008-05-08  Jakub Jelinek  <jakub@redhat.com>\n \n \t* tree-parloops.c (create_parallel_loop): Set OMP_RETURN_NOWAIT"}, {"sha": "b382a726c0340d5e586ef8873914f83eedc1f8cb", "filename": "gcc/calls.c", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -130,7 +130,7 @@ static void store_unaligned_arguments_into_pseudos (struct arg_data *, int);\n static int finalize_must_preallocate (int, int, struct arg_data *,\n \t\t\t\t      struct args_size *);\n static void precompute_arguments (int, int, struct arg_data *);\n-static int compute_argument_block_size (int, struct args_size *, int);\n+static int compute_argument_block_size (int, struct args_size *, tree, int);\n static void initialize_argument_information (int, struct arg_data *,\n \t\t\t\t\t     struct args_size *, int,\n \t\t\t\t\t     tree, tree,\n@@ -1189,6 +1189,7 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n static int\n compute_argument_block_size (int reg_parm_stack_space,\n \t\t\t     struct args_size *args_size,\n+\t\t\t     tree fndecl,\n \t\t\t     int preferred_stack_boundary ATTRIBUTE_UNUSED)\n {\n   int unadjusted_args_size = args_size->constant;\n@@ -1226,7 +1227,7 @@ compute_argument_block_size (int reg_parm_stack_space,\n \n \t  /* The area corresponding to register parameters is not to count in\n \t     the size of the block we need.  So make the adjustment.  */\n-\t  if (!OUTGOING_REG_PARM_STACK_SPACE)\n+\t  if (! OUTGOING_REG_PARM_STACK_SPACE ((!fndecl ? NULL_TREE : TREE_TYPE (fndecl))))\n \t    args_size->var\n \t      = size_binop (MINUS_EXPR, args_size->var,\n \t\t\t    ssize_int (reg_parm_stack_space));\n@@ -1247,7 +1248,7 @@ compute_argument_block_size (int reg_parm_stack_space,\n       args_size->constant = MAX (args_size->constant,\n \t\t\t\t reg_parm_stack_space);\n \n-      if (!OUTGOING_REG_PARM_STACK_SPACE)\n+      if (! OUTGOING_REG_PARM_STACK_SPACE ((!fndecl ? NULL_TREE : TREE_TYPE (fndecl))))\n \targs_size->constant -= reg_parm_stack_space;\n     }\n   return unadjusted_args_size;\n@@ -2065,7 +2066,8 @@ expand_call (tree exp, rtx target, int ignore)\n   reg_parm_stack_space = REG_PARM_STACK_SPACE (fndecl);\n #endif\n \n-  if (!OUTGOING_REG_PARM_STACK_SPACE && reg_parm_stack_space > 0 && PUSH_ARGS)\n+  if (! OUTGOING_REG_PARM_STACK_SPACE ((!fndecl ? NULL_TREE : TREE_TYPE (fndecl)))\n+      && reg_parm_stack_space > 0 && PUSH_ARGS)\n     must_preallocate = 1;\n \n   /* Set up a place to return a structure.  */\n@@ -2394,6 +2396,7 @@ expand_call (tree exp, rtx target, int ignore)\n       unadjusted_args_size\n \t= compute_argument_block_size (reg_parm_stack_space,\n \t\t\t\t       &adjusted_args_size,\n+\t\t\t\t       fndecl,\n \t\t\t\t       (pass == 0 ? 0\n \t\t\t\t\t: preferred_stack_boundary));\n \n@@ -2469,7 +2472,7 @@ expand_call (tree exp, rtx target, int ignore)\n \t\t  /* Since we will be writing into the entire argument area,\n \t\t     the map must be allocated for its entire size, not just\n \t\t     the part that is the responsibility of the caller.  */\n-\t\t  if (!OUTGOING_REG_PARM_STACK_SPACE)\n+\t\t  if (! OUTGOING_REG_PARM_STACK_SPACE ((!fndecl ? NULL_TREE : TREE_TYPE (fndecl))))\n \t\t    needed += reg_parm_stack_space;\n \n #ifdef ARGS_GROW_DOWNWARD\n@@ -2568,7 +2571,8 @@ expand_call (tree exp, rtx target, int ignore)\n \t    {\n \t      rtx push_size\n \t\t= GEN_INT (adjusted_args_size.constant\n-\t\t\t   + (OUTGOING_REG_PARM_STACK_SPACE ? 0\n+\t\t\t   + (OUTGOING_REG_PARM_STACK_SPACE ((!fndecl ? NULL\n+\t\t\t   \t\t\t\t\t      : TREE_TYPE (fndecl))) ? 0\n \t\t\t      : reg_parm_stack_space));\n \t      if (old_stack_level == 0)\n \t\t{\n@@ -2739,7 +2743,8 @@ expand_call (tree exp, rtx target, int ignore)\n       /* If register arguments require space on the stack and stack space\n \t was not preallocated, allocate stack space here for arguments\n \t passed in registers.  */\n-      if (OUTGOING_REG_PARM_STACK_SPACE && !ACCUMULATE_OUTGOING_ARGS\n+      if (OUTGOING_REG_PARM_STACK_SPACE ((!fndecl ? NULL_TREE : TREE_TYPE (fndecl)))\n+          && !ACCUMULATE_OUTGOING_ARGS\n \t  && must_preallocate == 0 && reg_parm_stack_space > 0)\n \tanti_adjust_stack (GEN_INT (reg_parm_stack_space));\n \n@@ -3274,6 +3279,9 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n   struct args_size original_args_size;\n   int argnum;\n   rtx fun;\n+  /* Todo, choose the correct decl type of orgfun. Sadly this information\n+     isn't present here, so we default to native calling abi here.  */\n+  tree fndecl = NULL_TREE; /* library calls default to host calling abi ? */\n   int inc;\n   int count;\n   rtx argblock = 0;\n@@ -3552,7 +3560,7 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n   args_size.constant = MAX (args_size.constant,\n \t\t\t    reg_parm_stack_space);\n \n-  if (!OUTGOING_REG_PARM_STACK_SPACE)\n+  if (! OUTGOING_REG_PARM_STACK_SPACE ((!fndecl ? NULL_TREE : TREE_TYPE (fndecl))))\n     args_size.constant -= reg_parm_stack_space;\n \n   if (args_size.constant > crtl->outgoing_args_size)\n@@ -3577,7 +3585,7 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n       /* Since we will be writing into the entire argument area, the\n \t map must be allocated for its entire size, not just the part that\n \t is the responsibility of the caller.  */\n-      if (!OUTGOING_REG_PARM_STACK_SPACE)\n+      if (! OUTGOING_REG_PARM_STACK_SPACE ((!fndecl ? NULL_TREE : TREE_TYPE (fndecl))))\n \tneeded += reg_parm_stack_space;\n \n #ifdef ARGS_GROW_DOWNWARD"}, {"sha": "4a24bd59321cb6fd03f7f81f194e92fb3e93f39f", "filename": "gcc/config/alpha/unicosmk.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Falpha%2Funicosmk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Falpha%2Funicosmk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Funicosmk.h?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -115,7 +115,7 @@ along with GCC; see the file COPYING3.  If not see\n    in registers) are allocated.  */\n \n #define REG_PARM_STACK_SPACE(DECL) 48\n-#define OUTGOING_REG_PARM_STACK_SPACE 1\n+#define OUTGOING_REG_PARM_STACK_SPACE(FNTYPE) 1\n \n /* If an argument can't be passed in registers even though not all argument\n    registers have been used yet, it is passed on the stack in the space "}, {"sha": "e4540ec125df83da79b43bd949436cfe4bfb53d7", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -43,7 +43,7 @@ extern void arm_output_fn_unwind (FILE *, bool);\n   \n \n #ifdef TREE_CODE\n-extern int arm_return_in_memory (const_tree);\n+extern int arm_return_in_memory (const_tree, const_tree);\n #endif\n #ifdef RTX_CODE\n extern bool arm_vector_mode_supported_p (enum machine_mode);"}, {"sha": "3a8117288a66fbe1a6956fa0008545cc4c48d2dd", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -2736,9 +2736,9 @@ arm_apply_result_size (void)\n \n /* Decide whether a type should be returned in memory (true)\n    or in a register (false).  This is called by the macro\n-   RETURN_IN_MEMORY.  */\n+   TARGET_RETURN_IN_MEMORY.  */\n int\n-arm_return_in_memory (const_tree type)\n+arm_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n {\n   HOST_WIDE_INT size;\n \n@@ -2801,7 +2801,7 @@ arm_return_in_memory (const_tree type)\n \n       /* ... Aggregates that are not themselves valid for returning in\n \t a register are not allowed.  */\n-      if (RETURN_IN_MEMORY (TREE_TYPE (field)))\n+      if (arm_return_in_memory (TREE_TYPE (field), NULL_TREE))\n \treturn 1;\n \n       /* Now check the remaining fields, if any.  Only bitfields are allowed,\n@@ -2836,7 +2836,7 @@ arm_return_in_memory (const_tree type)\n \t  if (FLOAT_TYPE_P (TREE_TYPE (field)))\n \t    return 1;\n \n-\t  if (RETURN_IN_MEMORY (TREE_TYPE (field)))\n+\t  if (arm_return_in_memory (TREE_TYPE (field), NULL_TREE))\n \t    return 1;\n \t}\n "}, {"sha": "7f10a5797d8ff2f5393e971284b3406070a76ad5", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -1481,7 +1481,7 @@ do {\t\t\t\t\t\t\t\t\t      \\\n /* How large values are returned */\n /* A C expression which can inhibit the returning of certain function values\n    in registers, based on the type of value.  */\n-#define RETURN_IN_MEMORY(TYPE) arm_return_in_memory (TYPE)\n+#define TARGET_RETURN_IN_MEMORY arm_return_in_memory\n \n /* Define DEFAULT_PCC_STRUCT_RETURN to 1 if all structure and union return\n    values must be in memory.  On the ARM, they need only do so if larger"}, {"sha": "d9d39bd1466d6260ed34e813cf38f0aff6bc0b85", "filename": "gcc/config/arm/netbsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Farm%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Farm%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fnetbsd.h?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -101,7 +101,7 @@\n /* Although not normally relevant (since by default, all aggregates\n    are returned in memory) compiling some parts of libc requires\n    non-APCS style struct returns.  */\n-#undef RETURN_IN_MEMORY\n+#undef TARGET_RETURN_IN_MEMORY\n \n /* VERY BIG NOTE : Change of structure alignment for RiscBSD.\n    There are consequences you should be aware of..."}, {"sha": "1dc46f7657e564fa7321e4de60d2df712d16d289", "filename": "gcc/config/bfin/bfin-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -120,7 +120,7 @@ extern void asm_conditional_branch (rtx, rtx *, int, int);\n extern rtx bfin_gen_compare (rtx, Mmode);\n \n extern int bfin_local_alignment (tree, int);\n-extern int bfin_return_in_memory (const_tree);\n+extern int bfin_return_in_memory (const_tree, const_tree);\n extern void initialize_trampoline (rtx, rtx, rtx);\n extern bool bfin_legitimate_address_p (Mmode, rtx, int);\n extern rtx bfin_va_arg (tree, tree);"}, {"sha": "e4c3f0c7832871a7ae8d18c09ff286fe0f2e09e3", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -1840,10 +1840,10 @@ bfin_pass_by_reference (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n \n /* Decide whether a type should be returned in memory (true)\n    or in a register (false).  This is called by the macro\n-   RETURN_IN_MEMORY.  */\n+   TARGET_RETURN_IN_MEMORY.  */\n \n int\n-bfin_return_in_memory (const_tree type)\n+bfin_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n {\n   int size = int_size_in_bytes (type);\n   return size > 2 * UNITS_PER_WORD || size == -1;"}, {"sha": "55a6b7d2de3f8a1c25fcdb02a333d98a95e77675", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -283,7 +283,7 @@ extern const char *bfin_library_id_string;\n \n /* Define this if the above stack space is to be considered part of the\n  * space allocated by the caller.  */\n-#define OUTGOING_REG_PARM_STACK_SPACE 1\n+#define OUTGOING_REG_PARM_STACK_SPACE(FNTYPE) 1\n \t  \n /* Define this if the maximum size of all the outgoing args is to be\n    accumulated and pushed during the prologue.  The amount can be\n@@ -841,7 +841,7 @@ typedef struct {\n #define FUNCTION_VALUE_REGNO_P(N) ((N) == REG_R0)\n \n #define DEFAULT_PCC_STRUCT_RETURN 0\n-#define RETURN_IN_MEMORY(TYPE) bfin_return_in_memory(TYPE)\n+#define TARGET_RETURN_IN_MEMORY bfin_return_in_memory\n \n /* Before the prologue, the return address is in the RETS register.  */\n #define INCOMING_RETURN_ADDR_RTX gen_rtx_REG (Pmode, REG_RETS)"}, {"sha": "915c3143cebbdbc419914716a6de97d78f608679", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -923,14 +923,6 @@ struct cum_args {int regs;};\n \n /* Node: Aggregate Return */\n \n-#if 0\n-/* FIXME: Let's try this some time, so we return structures in registers.\n-   We would cast the result of int_size_in_bytes to unsigned, so we will\n-   get a huge number for \"structures\" of variable size (-1).  */\n-#define RETURN_IN_MEMORY(TYPE) \\\n- ((unsigned) int_size_in_bytes (TYPE) > CRIS_MAX_ARGS_IN_REGS * UNITS_PER_WORD)\n-#endif\n-\n #define CRIS_STRUCT_VALUE_REGNUM ((CRIS_FIRST_ARG_REG) - 1)\n \n "}, {"sha": "95bdcc33d46ceee08893476c26b0d9f6fc8823b0", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -726,7 +726,7 @@ enum reg_class\n    in memory.  Since this results in slower code, this should be defined only\n    if needed for compatibility with other compilers or with an ABI.  If you\n    define this macro to be 0, then the conventions used for structure and union\n-   return values are decided by the `RETURN_IN_MEMORY' macro.\n+   return values are decided by the `TARGET_RETURN_IN_MEMORY' macro.\n \n    If not defined, this defaults to the value 1.  */\n #define DEFAULT_PCC_STRUCT_RETURN 1"}, {"sha": "a6537bc60d39291732d60c6eb5cc56c7deb4d98a", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -127,7 +127,7 @@ along with GCC; see the file COPYING3.  If not see\n #define REG_PARM_STACK_SPACE(FNDECL) (TARGET_64BIT_MS_ABI ? 32 : 0)\n \n #undef OUTGOING_REG_PARM_STACK_SPACE\n-#define OUTGOING_REG_PARM_STACK_SPACE (TARGET_64BIT_MS_ABI ? 1 : 0)\n+#define OUTGOING_REG_PARM_STACK_SPACE(FNTYPE) (TARGET_64BIT_MS_ABI ? 1 : 0)\n \n #undef REGPARM_MAX\n #define REGPARM_MAX (TARGET_64BIT_MS_ABI ? 4 : 3)"}, {"sha": "74e2892b545e8da60a7a07be53ed94c609e360ba", "filename": "gcc/config/i386/i386-interix.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-interix.h?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -357,7 +357,5 @@ extern void i386_pe_unique_section (tree, int);\n \n #define DEFAULT_PCC_STRUCT_RETURN 0\n \n-#undef RETURN_IN_MEMORY\n-#define RETURN_IN_MEMORY(TYPE) \\\n-  (TYPE_MODE (TYPE) == BLKmode || \\\n-     (AGGREGATE_TYPE_P (TYPE) && int_size_in_bytes(TYPE) > 8 ))\n+#undef TARGET_RETURN_IN_MEMORY\n+#define TARGET_RETURN_IN_MEMORY ix86_i386interix_return_in_memory"}, {"sha": "fd2e3c7c59c0958b5ec5b5b18834fb26b2b5c476", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -134,9 +134,10 @@ extern rtx ix86_libcall_value (enum machine_mode);\n extern bool ix86_function_value_regno_p (int);\n extern bool ix86_function_arg_regno_p (int);\n extern int ix86_function_arg_boundary (enum machine_mode, tree);\n-extern int ix86_return_in_memory (const_tree);\n-extern int ix86_sol10_return_in_memory (const_tree);\n-\n+extern int ix86_return_in_memory (const_tree, const_tree);\n+extern int ix86_sol10_return_in_memory (const_tree,const_tree);\n+extern int ix86_i386elf_return_in_memory (const_tree,const_tree);\n+extern int ix86_i386interix_return_in_memory (const_tree,const_tree);\n extern rtx ix86_force_to_memory (enum machine_mode, rtx);\n extern void ix86_free_from_memory (enum machine_mode);\n extern void ix86_split_fp_branch (enum rtx_code code, rtx, rtx,"}, {"sha": "0cb337fd4a4bc6ff3386b66e1aa6ecdcc52100d1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -4902,7 +4902,7 @@ return_in_memory_ms_64 (const_tree type, enum machine_mode mode)\n }\n \n int\n-ix86_return_in_memory (const_tree type)\n+ix86_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n {\n   const enum machine_mode mode = type_natural_mode (type);\n \n@@ -4920,7 +4920,7 @@ ix86_return_in_memory (const_tree type)\n    are returned in memory, rather than in MMX registers.  */\n \n int\n-ix86_sol10_return_in_memory (const_tree type)\n+ix86_sol10_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n {\n   int size;\n   enum machine_mode mode = type_natural_mode (type);\n@@ -4951,6 +4951,20 @@ ix86_sol10_return_in_memory (const_tree type)\n   return size > 12;\n }\n \n+int\n+ix86_i386elf_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n+{\n+  return (TYPE_MODE (type) == BLKmode\n+\t  || (VECTOR_MODE_P (TYPE_MODE (type)) && int_size_in_bytes (type) == 8));\n+}\n+\n+int\n+ix86_i386interix_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n+{\n+  return (TYPE_MODE (type) == BLKmode\n+          || (AGGREGATE_TYPE_P (type) && int_size_in_bytes(type) > 8 ));\n+}\n+\n /* When returning SSE vector types, we have a choice of either\n      (1) being abi incompatible with a -march switch, or\n      (2) generating an error.\n@@ -4959,7 +4973,7 @@ ix86_sol10_return_in_memory (const_tree type)\n \n    Choose the STRUCT_VALUE_RTX hook because that's (at present) only\n    called in response to actually generating a caller or callee that\n-   uses such a type.  As opposed to RETURN_IN_MEMORY, which is called\n+   uses such a type.  As opposed to TARGET_RETURN_IN_MEMORY, which is called\n    via aggregate_value_p for general type probing from tree-ssa.  */\n \n static rtx"}, {"sha": "87815edaf7286fb0faa5f9546659e547b6c5ef07", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -1278,8 +1278,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    should always be returned in memory.  You should instead use\n    `DEFAULT_PCC_STRUCT_RETURN' to indicate this.  */\n \n-#define RETURN_IN_MEMORY(TYPE) \\\n-  ix86_return_in_memory (TYPE)\n+#define TARGET_RETURN_IN_MEMORY ix86_return_in_memory\n \n /* This is overridden by <cygwin.h>.  */\n #define MS_AGGREGATE_RETURN 0"}, {"sha": "6659669ba8acac9e0fc91db7343010825be7dae2", "filename": "gcc/config/i386/i386elf.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fi386%2Fi386elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fi386%2Fi386elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386elf.h?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -29,10 +29,8 @@ along with GCC; see the file COPYING3.  If not see\n /* The ELF ABI for the i386 says that records and unions are returned\n    in memory.  */\n \n-#undef RETURN_IN_MEMORY\n-#define RETURN_IN_MEMORY(TYPE) \\\n-  (TYPE_MODE (TYPE) == BLKmode \\\n-   || (VECTOR_MODE_P (TYPE_MODE (TYPE)) && int_size_in_bytes (TYPE) == 8))\n+#undef TARGET_RETURN_IN_MEMORY\n+#define TARGET_RETURN_IN_MEMORY ix86_i386elf_return_in_memory\n \n #undef CPP_SPEC\n #define CPP_SPEC \"\""}, {"sha": "08473f0c10934f4ba0a6e2d575e6bfa1fd4434b4", "filename": "gcc/config/i386/ptx4-i.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fi386%2Fptx4-i.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fi386%2Fptx4-i.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fptx4-i.h?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -27,10 +27,8 @@ along with GCC; see the file COPYING3.  If not see\n /* The svr4 ABI for the i386 says that records and unions are returned\n    in memory.  */\n \n-#undef RETURN_IN_MEMORY\n-#define RETURN_IN_MEMORY(TYPE) \\\n-  (TYPE_MODE (TYPE) == BLKmode \\\n-   || (VECTOR_MODE_P (TYPE_MODE (TYPE)) && int_size_in_bytes (TYPE) == 8))\n+#undef TARGET_RETURN_IN_MEMORY\n+#define TARGET_RETURN_IN_MEMORY ix86_i386elf_return_in_memory\n \n #define TARGET_OS_CPP_BUILTINS()\t\t\\\n   do\t\t\t\t\t\t\\"}, {"sha": "88b92f6afb66a29151d9f7e4b600667d390ed303", "filename": "gcc/config/i386/sol2-10.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fi386%2Fsol2-10.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fi386%2Fsol2-10.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2-10.h?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -110,5 +110,5 @@ along with GCC; see the file COPYING3.  If not see\n #undef TARGET_ASM_NAMED_SECTION\n #define TARGET_ASM_NAMED_SECTION i386_solaris_elf_named_section\n \n-#undef RETURN_IN_MEMORY\n-#define RETURN_IN_MEMORY ix86_sol10_return_in_memory\n+#undef TARGET_RETURN_IN_MEMORY\n+#define TARGET_RETURN_IN_MEMORY ix86_sol10_return_in_memory"}, {"sha": "e57fd0c5b0aa91029ff165ce99288132630741ec", "filename": "gcc/config/i386/sysv4.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fi386%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fi386%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsysv4.h?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -25,10 +25,8 @@ along with GCC; see the file COPYING3.  If not see\n /* The svr4 ABI for the i386 says that records and unions are returned\n    in memory.  */\n \n-#undef RETURN_IN_MEMORY\n-#define RETURN_IN_MEMORY(TYPE) \\\n-  (TYPE_MODE (TYPE) == BLKmode \\\n-   || (VECTOR_MODE_P (TYPE_MODE (TYPE)) && int_size_in_bytes (TYPE) == 8))\n+#undef TARGET_RETURN_IN_MEMORY\n+#define TARGET_RETURN_IN_MEMORY ix86_i386elf_return_in_memory\n \n /* Output at beginning of assembler file.  */\n /* The .file command should always begin the output.  */"}, {"sha": "81530bc90f687ec941b5d42fae33b63e501c8257", "filename": "gcc/config/i386/vx-common.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fi386%2Fvx-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fi386%2Fvx-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fvx-common.h?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -22,5 +22,5 @@ along with GCC; see the file COPYING3.  If not see\n \n /* VxWorks uses the same ABI as Solaris 10.  */\n \n-#undef RETURN_IN_MEMORY\n-#define RETURN_IN_MEMORY ix86_sol10_return_in_memory\n+#undef TARGET_RETURN_IN_MEMORY\n+#define TARGET_RETURN_IN_MEMORY ix86_sol10_return_in_memory"}, {"sha": "f5574e4d7573d5518f72ac4cd30d89666f827473", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -374,7 +374,7 @@ enum reg_class\n \n #define REG_PARM_STACK_SPACE(FNDECL) 0\n \n-#define OUTGOING_REG_PARM_STACK_SPACE 1\n+#define OUTGOING_REG_PARM_STACK_SPACE(FNTYPE) 1\n \n #define RETURN_POPS_ARGS(FUNDECL,FUNTYPE,SIZE) 0\n "}, {"sha": "1391c99dde45e9f5c4cfc47f00e2bf2025287558", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -1936,7 +1936,7 @@ enum reg_class\n    If `ACCUMULATE_OUTGOING_ARGS' is also defined, the only effect\n    of this macro is to determine whether the space is included in\n    `crtl->outgoing_args_size'.  */\n-#define OUTGOING_REG_PARM_STACK_SPACE 1\n+#define OUTGOING_REG_PARM_STACK_SPACE(FNTYPE) 1\n \n #define STACK_BOUNDARY (TARGET_NEWABI ? 128 : 64)\n \f"}, {"sha": "1d2339b6b15dd45c76d818d9211d68d03efc5462", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -486,7 +486,7 @@ enum reg_class {\n /* We use d0/d1 for passing parameters, so allocate 8 bytes of space\n    for a register flushback area.  */\n #define REG_PARM_STACK_SPACE(DECL) 8\n-#define OUTGOING_REG_PARM_STACK_SPACE 1\n+#define OUTGOING_REG_PARM_STACK_SPACE(FNTYPE) 1\n #define ACCUMULATE_OUTGOING_ARGS 1\n \n /* So we can allocate space for return pointers once for the function"}, {"sha": "2dcb9454ecf032a52fc31260e92c3bd57bd9a90d", "filename": "gcc/config/mt/mt-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fmt%2Fmt-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fmt%2Fmt-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmt%2Fmt-protos.h?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -31,6 +31,7 @@ extern void\t    mt_add_loop \t (void);\n extern const char * mt_cannot_inline_p\t (tree);\n extern int          mt_function_arg_boundary (enum machine_mode, tree);\n extern void         mt_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode, tree,  int);\n+extern int mt_return_in_memory (const_tree,const_tree);\n #endif\n \n #ifdef RTX_CODE"}, {"sha": "c7fc0d129f35103528e2f942ac358693735a06da", "filename": "gcc/config/mt/mt.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fmt%2Fmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fmt%2Fmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmt%2Fmt.c?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -2460,6 +2460,13 @@ mt_machine_reorg (void)\n       mt_reorg_hazard ();\n     }\n }\n+\n+int\n+mt_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n+{\n+  return (int_size_in_bytes (type) > UNITS_PER_WORD);\n+}\n+\n \f\n /* Initialize the GCC target structure.  */\n const struct attribute_spec mt_attribute_table[];"}, {"sha": "b587326e281eb4eaa295246613350084f7b8e2ec", "filename": "gcc/config/mt/mt.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fmt%2Fmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fmt%2Fmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmt%2Fmt.h?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -532,7 +532,7 @@ extern struct mt_frame_info current_frame_info;\n \n /* Define this if it is the responsibility of the caller to\n    allocate the area reserved for arguments passed in registers.  */\n-#define OUTGOING_REG_PARM_STACK_SPACE 1\n+#define OUTGOING_REG_PARM_STACK_SPACE(FNTYPE) 1\n \n /* The number of register assigned to holding function arguments.  */\n #define MT_NUM_ARG_REGS        4\n@@ -580,7 +580,7 @@ extern struct mt_frame_info current_frame_info;\n \n /* A C expression which can inhibit the returning of certain function\n    values in registers, based on the type of value.  */\n-#define RETURN_IN_MEMORY(TYPE) (int_size_in_bytes (TYPE) > UNITS_PER_WORD)\n+#define TARGET_RETURN_IN_MEMORY mt_return_in_memory\n \n /* Define this macro to be 1 if all structure and union return values must be\n    in memory.  */"}, {"sha": "22cd9f33f32cb5154081299eca434f865d5df77a", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -549,7 +549,7 @@ extern struct rtx_def *hppa_pic_save_rtx (void);\n \n /* Define this if the above stack space is to be considered part of the\n    space allocated by the caller.  */\n-#define OUTGOING_REG_PARM_STACK_SPACE 1\n+#define OUTGOING_REG_PARM_STACK_SPACE(FNTYPE) 1\n \n /* Keep the stack pointer constant throughout the function.\n    This is both an optimization and a necessity: longjmp"}, {"sha": "7ec3d9447cc50d150b49ed752fa6506c0264bada", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -1327,7 +1327,7 @@ extern enum rs6000_abi rs6000_current_abi;\t/* available for use by subtarget */\n \n /* Define this if the above stack space is to be considered part of the\n    space allocated by the caller.  */\n-#define OUTGOING_REG_PARM_STACK_SPACE 1\n+#define OUTGOING_REG_PARM_STACK_SPACE(FNTYPE) 1\n \n /* This is the difference between the logical top of stack and the actual sp.\n "}, {"sha": "78d2c574e1a2b0bc9d6d688b1d609ef4a537fef4", "filename": "gcc/config/score/score.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fscore%2Fscore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fscore%2Fscore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.h?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -579,7 +579,7 @@ extern enum reg_class score_char_to_class[256];\n    If `ACCUMULATE_OUTGOING_ARGS' is also defined, the only effect\n    of this macro is to determine whether the space is included in\n    `crtl->outgoing_args_size'.  */\n-#define OUTGOING_REG_PARM_STACK_SPACE   1\n+#define OUTGOING_REG_PARM_STACK_SPACE(FNTYPE) 1\n \n #define RETURN_POPS_ARGS(FUNDECL, FUNTYPE, STACK_SIZE) 0\n "}, {"sha": "729e0d707a8c8c2594b26479f4f5d7fbb819f972", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -353,7 +353,7 @@ targetm.resolve_overloaded_builtin = spu_resolve_overloaded_builtin;\t\\\n \n #define REG_PARM_STACK_SPACE(FNDECL) 0\n \n-#define OUTGOING_REG_PARM_STACK_SPACE 1\n+#define OUTGOING_REG_PARM_STACK_SPACE(FNTYPE) 1\n \n #define RETURN_POPS_ARGS(FUNDECL,FUNTYPE,SIZE) (0)\n "}, {"sha": "b951b2cce4123f3e6fcc26b5373c1b429176a4e0", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -625,7 +625,7 @@ struct cum_arg { int nbytes; int anonymous_args; };\n \n /* Define this if the above stack space is to be considered part of the\n    space allocated by the caller.  */\n-#define OUTGOING_REG_PARM_STACK_SPACE 1\n+#define OUTGOING_REG_PARM_STACK_SPACE(FNTYPE) 1\n \n /* 1 if N is a possible register number for function argument passing.  */\n "}, {"sha": "cc41b6e66128ab2e84a79acf0dd6e66e907e31ef", "filename": "gcc/defaults.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -937,7 +937,7 @@ along with GCC; see the file COPYING3.  If not see\n #endif\n \n #ifndef OUTGOING_REG_PARM_STACK_SPACE\n-#define OUTGOING_REG_PARM_STACK_SPACE 0\n+#define OUTGOING_REG_PARM_STACK_SPACE(FNTYPE) 0\n #endif\n \n #endif  /* ! GCC_DEFAULTS_H */"}, {"sha": "91448a71a42f595516b3818e3b023809d4eb1725", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -3819,9 +3819,11 @@ which.\n @c above is overfull.  not sure what to do.  --mew 5feb93  did\n @c something, not sure if it looks good.  --mew 10feb93\n \n-@defmac OUTGOING_REG_PARM_STACK_SPACE\n-Define this to a nonzero value if it is the responsibility of the caller\n-to allocate the area reserved for arguments passed in registers.\n+@defmac OUTGOING_REG_PARM_STACK_SPACE (@var{fntype})\n+Define this to a nonzero value if it is the responsibility of the\n+caller to allocate the area reserved for arguments passed in registers\n+when calling a function of @var{fntype}.  @var{fntype} may be NULL\n+if the function called is a library function.\n \n If @code{ACCUMULATE_OUTGOING_ARGS} is defined, this macro controls\n whether the space for these arguments counts in the value of"}, {"sha": "ae25d40a68111808ae4377692841807eae8c85e8", "filename": "gcc/expr.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -1259,20 +1259,21 @@ emit_block_move (rtx x, rtx y, rtx size, enum block_op_methods method)\n static bool\n block_move_libcall_safe_for_call_parm (void)\n {\n+#if defined (REG_PARM_STACK_SPACE)\n+  tree fn;\n+#endif\n+\n   /* If arguments are pushed on the stack, then they're safe.  */\n   if (PUSH_ARGS)\n     return true;\n \n   /* If registers go on the stack anyway, any argument is sure to clobber\n      an outgoing argument.  */\n #if defined (REG_PARM_STACK_SPACE)\n-  if (OUTGOING_REG_PARM_STACK_SPACE)\n-    {\n-      tree fn;\n-      fn = emit_block_move_libcall_fn (false);\n-      if (REG_PARM_STACK_SPACE (fn) != 0)\n-\treturn false;\n-    }\n+  fn = emit_block_move_libcall_fn (false);\n+  if (OUTGOING_REG_PARM_STACK_SPACE ((!fn ? NULL_TREE : TREE_TYPE (fn)))\n+      && REG_PARM_STACK_SPACE (fn) != 0)\n+    return false;\n #endif\n \n   /* If any argument goes in memory, then it might clobber an outgoing"}, {"sha": "29d4c1eda6eaea7266ce8669ebbe2cd1052f9245", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -1147,7 +1147,8 @@ static int cfa_offset;\n #define STACK_DYNAMIC_OFFSET(FNDECL)\t\\\n ((ACCUMULATE_OUTGOING_ARGS\t\t\t\t\t\t      \\\n   ? (crtl->outgoing_args_size\t\t\t\t      \\\n-     + (OUTGOING_REG_PARM_STACK_SPACE ? 0 : REG_PARM_STACK_SPACE (FNDECL)))   \\\n+     + (OUTGOING_REG_PARM_STACK_SPACE ((!(FNDECL) ? NULL_TREE : TREE_TYPE (FNDECL))) ? 0 \\\n+\t\t\t\t\t       : REG_PARM_STACK_SPACE (FNDECL))) \\\n   : 0) + (STACK_POINTER_OFFSET))\n #else\n #define STACK_DYNAMIC_OFFSET(FNDECL)\t\\\n@@ -3850,7 +3851,7 @@ allocate_struct_function (tree fndecl, bool abstract_p)\n   if (init_machine_status)\n     cfun->machine = (*init_machine_status) ();\n \n-  if (fndecl != NULL)\n+  if (fndecl != NULL_TREE)\n     {\n       DECL_STRUCT_FUNCTION (fndecl) = cfun;\n       cfun->decl = fndecl;"}, {"sha": "d719f5f219575bf3fffe359529e946e3f317b82a", "filename": "gcc/targhooks.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81464b2cd8f8153d1314a628fdc3dbdbb27a9c02/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=81464b2cd8f8153d1314a628fdc3dbdbb27a9c02", "patch": "@@ -107,11 +107,7 @@ bool\n default_return_in_memory (const_tree type,\n \t\t\t  const_tree fntype ATTRIBUTE_UNUSED)\n {\n-#ifndef RETURN_IN_MEMORY\n   return (TYPE_MODE (type) == BLKmode);\n-#else\n-  return RETURN_IN_MEMORY (type);\n-#endif\n }\n \n rtx"}]}