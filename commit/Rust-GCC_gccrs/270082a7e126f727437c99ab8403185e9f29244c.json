{"sha": "270082a7e126f727437c99ab8403185e9f29244c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcwMDgyYTdlMTI2ZjcyNzQzN2M5OWFiODQwMzE4NWU5ZjI5MjQ0Yw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-11-14T16:53:18Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-11-14T16:53:18Z"}, "message": "libstdc++: Implement new predicate concepts from P1716R3\n\n\t* include/bits/iterator_concepts.h (__iter_concept_impl): Add\n\tcomments.\n\t(indirect_relation): Rename to indirect_binary_predicate and adjust\n\tdefinition as per P1716R3.\n\t(indirect_equivalence_relation): Define.\n\t(indirectly_comparable): Adjust definition.\n\t* include/std/concepts (equivalence_relation): Define.\n\t* testsuite/std/concepts/concepts.callable/relation.cc: Add tests for\n\tequivalence_relation.\n\nFrom-SVN: r278256", "tree": {"sha": "a181dca4756dfc7933005cc73946aa65c7ca9fb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a181dca4756dfc7933005cc73946aa65c7ca9fb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/270082a7e126f727437c99ab8403185e9f29244c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/270082a7e126f727437c99ab8403185e9f29244c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/270082a7e126f727437c99ab8403185e9f29244c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/270082a7e126f727437c99ab8403185e9f29244c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d99828eea22b6ae852f993ce8732d686faf63c95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d99828eea22b6ae852f993ce8732d686faf63c95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d99828eea22b6ae852f993ce8732d686faf63c95"}], "stats": {"total": 70, "additions": 54, "deletions": 16}, "files": [{"sha": "3714e74bb2323f1a5a94a65b76ba5bf3018f68b3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/270082a7e126f727437c99ab8403185e9f29244c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/270082a7e126f727437c99ab8403185e9f29244c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=270082a7e126f727437c99ab8403185e9f29244c", "patch": "@@ -1,5 +1,15 @@\n 2019-11-14  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/iterator_concepts.h (__iter_concept_impl): Add\n+\tcomments.\n+\t(indirect_relation): Rename to indirect_binary_predicate and adjust\n+\tdefinition as per P1716R3.\n+\t(indirect_equivalence_relation): Define.\n+\t(indirectly_comparable): Adjust definition.\n+\t* include/std/concepts (equivalence_relation): Define.\n+\t* testsuite/std/concepts/concepts.callable/relation.cc: Add tests for\n+\tequivalence_relation.\n+\n \t* include/bits/iterator_concepts.h (disable_sized_sentinel): Rename to\n \tdisable_sized_sentinel_for.\n \t* testsuite/24_iterators/headers/iterator/synopsis_c++20.cc: Adjust."}, {"sha": "90a8bc8071f03bfebeb37103f44a030a9071acb0", "filename": "libstdc++-v3/include/bits/iterator_concepts.h", "status": "modified", "additions": 30, "deletions": 11, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/270082a7e126f727437c99ab8403185e9f29244c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/270082a7e126f727437c99ab8403185e9f29244c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h?ref=270082a7e126f727437c99ab8403185e9f29244c", "patch": "@@ -420,28 +420,35 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   namespace __detail\n   {\n     template<typename _Iter>\n-      struct __iter_concept_impl\n-      { };\n+      struct __iter_concept_impl;\n \n+    // ITER_CONCEPT(I) is ITER_TRAITS(I)::iterator_concept if that is valid.\n     template<typename _Iter>\n       requires requires { typename __iter_traits<_Iter>::iterator_concept; }\n       struct __iter_concept_impl<_Iter>\n       { using type = typename __iter_traits<_Iter>::iterator_concept; };\n \n+    // Otherwise, ITER_TRAITS(I)::iterator_category if that is valid.\n     template<typename _Iter>\n       requires (!requires { typename __iter_traits<_Iter>::iterator_concept; }\n \t  && requires { typename __iter_traits<_Iter>::iterator_category; })\n       struct __iter_concept_impl<_Iter>\n       { using type = typename __iter_traits<_Iter>::iterator_category; };\n \n+    // Otherwise, random_access_tag if iterator_traits<I> is not specialized.\n     template<typename _Iter>\n       requires (!requires { typename __iter_traits<_Iter>::iterator_concept; }\n \t  && !requires { typename __iter_traits<_Iter>::iterator_category; }\n \t  && __primary_traits_iter<_Iter>)\n       struct __iter_concept_impl<_Iter>\n       { using type = random_access_iterator_tag; };\n \n-    // ITER_TRAITS\n+    // Otherwise, there is no ITER_CONCEPT(I) type.\n+    template<typename _Iter>\n+      struct __iter_concept_impl\n+      { };\n+\n+    // ITER_CONCEPT\n     template<typename _Iter>\n       using __iter_concept = typename __iter_concept_impl<_Iter>::type;\n   } // namespace __detail\n@@ -615,15 +622,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       && predicate<_Fn&, iter_reference_t<_Iter>>\n       && predicate<_Fn&, iter_common_reference_t<_Iter>>;\n \n+  template<typename _Fn, typename _I1, typename _I2>\n+    concept indirect_binary_predicate = readable<_I1> && readable<_I2>\n+      && copy_constructible<_Fn>\n+      && predicate<_Fn&, iter_value_t<_I1>&, iter_value_t<_I2>&>\n+      && predicate<_Fn&, iter_value_t<_I1>&, iter_reference_t<_I2>>\n+      && predicate<_Fn&, iter_reference_t<_I1>, iter_value_t<_I2>&>\n+      && predicate<_Fn&, iter_reference_t<_I1>, iter_reference_t<_I2>>\n+      && predicate<_Fn&, iter_common_reference_t<_I1>,\n+\t\t   iter_common_reference_t<_I2>>;\n+\n   template<typename _Fn, typename _I1, typename _I2 = _I1>\n-    concept indirect_relation = readable<_I1> && readable<_I2>\n+    concept indirect_equivalence_relation = readable<_I1> && readable<_I2>\n       && copy_constructible<_Fn>\n-      && relation<_Fn&, iter_value_t<_I1>&, iter_value_t<_I2>&>\n-      && relation<_Fn&, iter_value_t<_I1>&, iter_reference_t<_I2>>\n-      && relation<_Fn&, iter_reference_t<_I1>, iter_value_t<_I2>&>\n-      && relation<_Fn&, iter_reference_t<_I1>, iter_reference_t<_I2>>\n-      && relation<_Fn&, iter_common_reference_t<_I1>,\n-\t\t  iter_common_reference_t<_I2>>;\n+      && equivalence_relation<_Fn&, iter_value_t<_I1>&, iter_value_t<_I2>&>\n+      && equivalence_relation<_Fn&, iter_value_t<_I1>&, iter_reference_t<_I2>>\n+      && equivalence_relation<_Fn&, iter_reference_t<_I1>, iter_value_t<_I2>&>\n+      && equivalence_relation<_Fn&, iter_reference_t<_I1>,\n+\t\t\t      iter_reference_t<_I2>>\n+      && equivalence_relation<_Fn&, iter_common_reference_t<_I1>,\n+\t\t\t      iter_common_reference_t<_I2>>;\n \n   template<typename _Fn, typename _I1, typename _I2 = _I1>\n     concept indirect_strict_weak_order = readable<_I1> && readable<_I2>\n@@ -767,7 +785,8 @@ namespace ranges\n   template<typename _I1, typename _I2, typename _Rel, typename _P1 = identity,\n \t   typename _P2 = identity>\n     concept indirectly_comparable\n-      = indirect_relation<_Rel, projected<_I1, _P1>, projected<_I2, _P2>>;\n+      = indirect_binary_predicate<_Rel, projected<_I1, _P1>,\n+\t\t\t\t  projected<_I2, _P2>>;\n \n   /// [alg.req.permutable], concept `permutable`\n   template<typename _Iter>"}, {"sha": "e6d405a1bee05dd6297ab1d7b43a02549fffbbb8", "filename": "libstdc++-v3/include/std/concepts", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/270082a7e126f727437c99ab8403185e9f29244c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fconcepts", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/270082a7e126f727437c99ab8403185e9f29244c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fconcepts", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fconcepts?ref=270082a7e126f727437c99ab8403185e9f29244c", "patch": "@@ -334,26 +334,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // [concepts.callable], callable concepts\n \n-  // [concept.invocable], concept invocable\n+  /// [concept.invocable], concept invocable\n   template<typename _Fn, typename... _Args>\n     concept invocable = is_invocable_v<_Fn, _Args...>;\n \n-  // [concept.regularinvocable], concept regular_invocable\n+  /// [concept.regularinvocable], concept regular_invocable\n   template<typename _Fn, typename... _Args>\n     concept regular_invocable = invocable<_Fn, _Args...>;\n \n-  // [concept.predicate], concept predicate\n+  /// [concept.predicate], concept predicate\n   template<typename _Fn, typename... _Args>\n     concept predicate = regular_invocable<_Fn, _Args...>\n       && boolean<invoke_result_t<_Fn, _Args...>>;\n \n-  // [concept.relation], concept relation\n+  /// [concept.relation], concept relation\n   template<typename _Rel, typename _Tp, typename _Up>\n     concept relation\n       = predicate<_Rel, _Tp, _Tp> && predicate<_Rel, _Up, _Up>\n       && predicate<_Rel, _Tp, _Up> && predicate<_Rel, _Up, _Tp>;\n \n-  // [concept.strictweakorder], concept strict_weak_order\n+  /// [concept.equiv], concept equivalence_relation\n+  template<typename _Rel, typename _Tp, typename _Up>\n+    concept equivalence_relation = relation<_Rel, _Tp, _Up>;\n+\n+  /// [concept.strictweakorder], concept strict_weak_order\n   template<typename _Rel, typename _Tp, typename _Up>\n     concept strict_weak_order = relation<_Rel, _Tp, _Up>;\n "}, {"sha": "73ff54bbb6d5a7d52e718fdbafcbf62ebf5b63d4", "filename": "libstdc++-v3/testsuite/std/concepts/concepts.callable/relation.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/270082a7e126f727437c99ab8403185e9f29244c/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fconcepts%2Fconcepts.callable%2Frelation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/270082a7e126f727437c99ab8403185e9f29244c/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fconcepts%2Fconcepts.callable%2Frelation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fconcepts%2Fconcepts.callable%2Frelation.cc?ref=270082a7e126f727437c99ab8403185e9f29244c", "patch": "@@ -46,3 +46,8 @@ struct F\n static_assert( ! std::relation<F, long, long> );\n static_assert( std::relation<F&, int, int> );\n static_assert( std::relation<const F&, const int, const int> );\n+\n+// [concept.equiv]\n+static_assert( std::equivalence_relation<bool(*)(int, int), short, long> );\n+static_assert( ! std::equivalence_relation<F, long, long> );\n+static_assert( std::equivalence_relation<const F&, const int, const int> );"}]}