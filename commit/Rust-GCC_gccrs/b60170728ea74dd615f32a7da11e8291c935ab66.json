{"sha": "b60170728ea74dd615f32a7da11e8291c935ab66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjYwMTcwNzI4ZWE3NGRkNjE1ZjMyYTdkYTExZTgyOTFjOTM1YWI2Ng==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-11-02T17:27:55Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-11-30T14:16:21Z"}, "message": "[Ada] Enable checks on runtime by default\n\ngcc/ada/\n\n\t* gcc-interface/Makefile.in (GNATLIBFLAGS): Enable checks by\n\tdefault.\n\t* libgnat/s-bitfie.ads: Suppress alignment checks.\n\t* libgnat/s-bituti.adb: Minor reformatting.\n\t* libgnat/s-secsta.adb (SS_Allocate): Support Size = 0.", "tree": {"sha": "f9ded79bb4bb16e6ac45e9f050cbde3d74b2397b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9ded79bb4bb16e6ac45e9f050cbde3d74b2397b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b60170728ea74dd615f32a7da11e8291c935ab66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b60170728ea74dd615f32a7da11e8291c935ab66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b60170728ea74dd615f32a7da11e8291c935ab66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b60170728ea74dd615f32a7da11e8291c935ab66/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19b95c22c0fb9d301cac839936e8348b857ee550", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19b95c22c0fb9d301cac839936e8348b857ee550", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19b95c22c0fb9d301cac839936e8348b857ee550"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "a6325aa2818ad3a3ea80913d4060facd5ae2c55f", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b60170728ea74dd615f32a7da11e8291c935ab66/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b60170728ea74dd615f32a7da11e8291c935ab66/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=b60170728ea74dd615f32a7da11e8291c935ab66", "patch": "@@ -110,7 +110,7 @@ NO_INLINE_ADAFLAGS = -fno-inline\n NO_OMIT_ADAFLAGS = -fno-omit-frame-pointer\n NO_SIBLING_ADAFLAGS = -fno-optimize-sibling-calls\n NO_REORDER_ADAFLAGS = -fno-toplevel-reorder\n-GNATLIBFLAGS = -W -Wall -gnatpg -nostdinc\n+GNATLIBFLAGS = -W -Wall -gnatg -nostdinc\n GNATLIBCFLAGS = -g -O2\n # Pretend that _Unwind_GetIPInfo is available for the target by default.  This\n # should be autodetected during the configuration of libada and passed down to"}, {"sha": "21b72949be5d7ec38bc82d791c2228b4674a9d98", "filename": "gcc/ada/libgnat/s-bitfie.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b60170728ea74dd615f32a7da11e8291c935ab66/gcc%2Fada%2Flibgnat%2Fs-bitfie.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b60170728ea74dd615f32a7da11e8291c935ab66/gcc%2Fada%2Flibgnat%2Fs-bitfie.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-bitfie.ads?ref=b60170728ea74dd615f32a7da11e8291c935ab66", "patch": "@@ -47,6 +47,12 @@ package System.Bitfields is\n    pragma Provide_Shift_Operators (Val_2);\n    type Val is mod 2**Val_Bits with Alignment => Val_Bytes;\n \n+   --  ??? It turns out that enabling checks on the instantiation of\n+   --  System.Bitfield_Utils.G makes a latent visibility bug appear on strict\n+   --  alignment platforms related to alignment checks. Work around it by\n+   --  suppressing these checks explicitly.\n+\n+   pragma Suppress (Alignment_Check);\n    package Utils is new System.Bitfield_Utils.G (Val, Val_2);\n \n    procedure Copy_Bitfield"}, {"sha": "ef839a885fe815bcc62dbd3aea25b6024dbe69d9", "filename": "gcc/ada/libgnat/s-bituti.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b60170728ea74dd615f32a7da11e8291c935ab66/gcc%2Fada%2Flibgnat%2Fs-bituti.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b60170728ea74dd615f32a7da11e8291c935ab66/gcc%2Fada%2Flibgnat%2Fs-bituti.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-bituti.adb?ref=b60170728ea74dd615f32a7da11e8291c935ab66", "patch": "@@ -317,6 +317,7 @@ package body System.Bitfield_Utils is\n                  Get_Val_2 (S_Addr, S_Off, Initial_Size);\n                Initial_Val : constant Val :=\n                  Get_Bitfield (Initial_Val_2, S_Off, Initial_Size);\n+\n             begin\n                Set_Bitfield\n                  (Initial_Val, D_Addr, D_Off, Initial_Size);"}, {"sha": "f2d264deb8cad33f3f5ec30d00c6c4121194b1cf", "filename": "gcc/ada/libgnat/s-secsta.adb", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b60170728ea74dd615f32a7da11e8291c935ab66/gcc%2Fada%2Flibgnat%2Fs-secsta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b60170728ea74dd615f32a7da11e8291c935ab66/gcc%2Fada%2Flibgnat%2Fs-secsta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-secsta.adb?ref=b60170728ea74dd615f32a7da11e8291c935ab66", "patch": "@@ -587,15 +587,18 @@ package body System.Secondary_Stack is\n    --  Start of processing for SS_Allocate\n \n    begin\n-      --  It should not be possible to request an allocation of negative or\n-      --  zero size.\n-\n-      pragma Assert (Storage_Size > 0);\n-\n       --  Round the requested size up to the nearest multiple of the maximum\n       --  alignment to ensure efficient access.\n \n-      Mem_Size := Round_Up (Storage_Size);\n+      if Storage_Size = 0 then\n+         Mem_Size := Memory_Alignment;\n+      else\n+         --  It should not be possible to request an allocation of negative\n+         --  size.\n+\n+         pragma Assert (Storage_Size >= 0);\n+         Mem_Size := Round_Up (Storage_Size);\n+      end if;\n \n       if Sec_Stack_Dynamic then\n          Allocate_Dynamic (Stack, Mem_Size, Addr);"}]}