{"sha": "d6ecb707cc5a58816d27908a7aa324c4b0bc67bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZlY2I3MDdjYzVhNTg4MTZkMjc5MDhhN2FhMzI0YzRiMGJjNjdiYg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-09-12T19:18:25Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-09-12T19:18:25Z"}, "message": "re PR tree-optimization/89386 (Generation of vectorized MULHRS (Multiply High with Round and Scale) instruction)\n\n\tPR tree-optimization/89386\n\t* config/i386/sse.md (smulhrs<mode>3): New expander.\n\t(smulhrsv4hi3): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR tree-optimization/89386\n\t* gcc.target/i386/pr89386.c: New test.\n\t* gcc.target/i386/pr89386-1.c: Ditto.\n\nFrom-SVN: r275689", "tree": {"sha": "068a184c714adfaae7456285a40907349f49f69c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/068a184c714adfaae7456285a40907349f49f69c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6ecb707cc5a58816d27908a7aa324c4b0bc67bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6ecb707cc5a58816d27908a7aa324c4b0bc67bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6ecb707cc5a58816d27908a7aa324c4b0bc67bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6ecb707cc5a58816d27908a7aa324c4b0bc67bb/comments", "author": null, "committer": null, "parents": [{"sha": "bdc91a3299f955ed6b862adf0f2fea6d5496bc31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdc91a3299f955ed6b862adf0f2fea6d5496bc31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdc91a3299f955ed6b862adf0f2fea6d5496bc31"}], "stats": {"total": 106, "additions": 97, "deletions": 9}, "files": [{"sha": "d368dc693016a35563abc67f100dd73fdc3418be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ecb707cc5a58816d27908a7aa324c4b0bc67bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ecb707cc5a58816d27908a7aa324c4b0bc67bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6ecb707cc5a58816d27908a7aa324c4b0bc67bb", "patch": "@@ -1,3 +1,9 @@\n+2019-09-12  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR tree-optimization/89386\n+\t* config/i386/sse.md (smulhrs<mode>3): New expander.\n+\t(smulhrsv4hi3): Ditto.\n+\n 2019-09-12  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/91750\n@@ -27,15 +33,6 @@\n \t* tree-vect-patterns.c (vect_recog_mulhs_pattern): New pattern\n \tfunction.\n \t(vect_vect_recog_func_ptrs): Add it.\n-\t* testsuite/gcc.target/aarch64/sve2/mulhrs_1.c: New test.\n-\t* testsuite/gcc.dg/vect/vect-mulhrs-1.c: As above.\n-\t* testsuite/gcc.dg/vect/vect-mulhrs-2.c: As above.\n-\t* testsuite/gcc.dg/vect/vect-mulhrs-3.c: As above.\n-\t* testsuite/gcc.dg/vect/vect-mulhrs-4.c: As above.\n-\t* doc/sourcebuild.texi (vect_mulhrs_hi): Document new target selector.\n-\t* testsuite/lib/target-supports.exp\n-\t(check_effective_target_vect_mulhrs_hi): Return true for AArch64\n-\twith SVE2.\n \n 2019-09-11  Michael Meissner  <meissner@linux.ibm.com>\n "}, {"sha": "c7f539fb88fd6610e33011e554f0993e1f01b60c", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ecb707cc5a58816d27908a7aa324c4b0bc67bb/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ecb707cc5a58816d27908a7aa324c4b0bc67bb/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=d6ecb707cc5a58816d27908a7aa324c4b0bc67bb", "patch": "@@ -16475,6 +16475,26 @@\n   ix86_fixup_binary_operands_no_copy (MULT, <MODE>mode, operands);\n })\n \n+(define_expand \"smulhrs<mode>3\"\n+  [(set (match_operand:VI2_AVX2 0 \"register_operand\")\n+\t(truncate:VI2_AVX2\n+\t  (lshiftrt:<ssedoublemode>\n+\t    (plus:<ssedoublemode>\n+\t      (lshiftrt:<ssedoublemode>\n+\t\t(mult:<ssedoublemode>\n+\t\t  (sign_extend:<ssedoublemode>\n+\t\t    (match_operand:VI2_AVX2 1 \"nonimmediate_operand\"))\n+\t\t  (sign_extend:<ssedoublemode>\n+\t\t    (match_operand:VI2_AVX2 2 \"nonimmediate_operand\")))\n+\t\t(const_int 14))\n+\t      (match_dup 3))\n+\t    (const_int 1))))]\n+  \"TARGET_SSSE3\"\n+{\n+  operands[3] = CONST1_RTX(<MODE>mode);\n+  ix86_fixup_binary_operands_no_copy (MULT, <MODE>mode, operands);\n+})\n+\n (define_insn \"*<ssse3_avx2>_pmulhrsw<mode>3<mask_name>\"\n   [(set (match_operand:VI2_AVX2 0 \"register_operand\" \"=x,x,v\")\n \t(truncate:VI2_AVX2\n@@ -16502,6 +16522,26 @@\n    (set_attr \"prefix\" \"orig,maybe_evex,evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_expand \"smulhrsv4hi3\"\n+  [(set (match_operand:V4HI 0 \"register_operand\")\n+\t(truncate:V4HI\n+\t  (lshiftrt:V4SI\n+\t    (plus:V4SI\n+\t      (lshiftrt:V4SI\n+\t\t(mult:V4SI\n+\t\t  (sign_extend:V4SI\n+\t\t    (match_operand:V4HI 1 \"register_operand\"))\n+\t\t  (sign_extend:V4SI\n+\t\t    (match_operand:V4HI 2 \"register_operand\")))\n+\t\t(const_int 14))\n+\t      (match_dup 3))\n+\t    (const_int 1))))]\n+  \"TARGET_MMX_WITH_SSE && TARGET_SSSE3\"\n+{\n+  operands[3] = CONST1_RTX(V4HImode);\n+  ix86_fixup_binary_operands_no_copy (MULT, V4HImode, operands);\n+})\n+\n (define_expand \"ssse3_pmulhrswv4hi3\"\n   [(set (match_operand:V4HI 0 \"register_operand\")\n \t(truncate:V4HI"}, {"sha": "cd805625ee619facb1583f5a4dbdecb616526ee2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ecb707cc5a58816d27908a7aa324c4b0bc67bb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ecb707cc5a58816d27908a7aa324c4b0bc67bb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d6ecb707cc5a58816d27908a7aa324c4b0bc67bb", "patch": "@@ -1,8 +1,27 @@\n+2019-09-12  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR tree-optimization/89386\n+\t* gcc.target/i386/pr89386.c: New test.\n+\t* gcc.target/i386/pr89386-1.c: Ditto.\n+\n 2019-09-12  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/91750\n \t* gcc.dg/vect/pr91750.c: New testcase.\n \n+2019-09-12  Yuliang Wang  <yuliang.wang@arm.com>\n+\n+\tPR tree-optimization/89386\n+\t* testsuite/gcc.target/aarch64/sve2/mulhrs_1.c: New test.\n+\t* testsuite/gcc.dg/vect/vect-mulhrs-1.c: As above.\n+\t* testsuite/gcc.dg/vect/vect-mulhrs-2.c: As above.\n+\t* testsuite/gcc.dg/vect/vect-mulhrs-3.c: As above.\n+\t* testsuite/gcc.dg/vect/vect-mulhrs-4.c: As above.\n+\t* doc/sourcebuild.texi (vect_mulhrs_hi): Document new target selector.\n+\t* testsuite/lib/target-supports.exp\n+\t(check_effective_target_vect_mulhrs_hi): Return true for AArch64\n+\twith SVE2.\n+\n 2019-09-11  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR testsuite/83889"}, {"sha": "a2d708b2ee4a95015530496c359f8131c668d422", "filename": "gcc/testsuite/gcc.target/i386/pr89386-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ecb707cc5a58816d27908a7aa324c4b0bc67bb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89386-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ecb707cc5a58816d27908a7aa324c4b0bc67bb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89386-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89386-1.c?ref=d6ecb707cc5a58816d27908a7aa324c4b0bc67bb", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-mssse3 -O2 -ftree-vectorize\" } */\n+\n+#define N 4\n+\n+short a[N], b[N], c[N];\n+\n+int foo (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    a[i] = ((((int) b[i] * (int) c[i]) >> 14) + 1) >> 1;\n+}\n+\n+/* { dg-final { scan-assembler \"pmulhrsw\" } } */"}, {"sha": "b30878767234fd5691c38169891a601cfb90407b", "filename": "gcc/testsuite/gcc.target/i386/pr89386.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ecb707cc5a58816d27908a7aa324c4b0bc67bb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ecb707cc5a58816d27908a7aa324c4b0bc67bb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89386.c?ref=d6ecb707cc5a58816d27908a7aa324c4b0bc67bb", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mssse3 -O2 -ftree-vectorize\" } */\n+\n+#define N 1024\n+\n+short a[N], b[N], c[N];\n+\n+int foo (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    a[i] = ((((int) b[i] * (int) c[i]) >> 14) + 1) >> 1;\n+}\n+\n+/* { dg-final { scan-assembler \"pmulhrsw\" } } */"}]}