{"sha": "d52f1094e50cf2120eebc5bf2a63ed0aa56c825a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUyZjEwOTRlNTBjZjIxMjBlZWJjNWJmMmE2M2VkMGFhNTZjODI1YQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2005-09-05T07:56:34Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-09-05T07:56:34Z"}, "message": "scng.adb (Check_End_Of_Line): Count characters, rather than bytes (makes a difference for wide characters)\n\n2005-09-01  Robert Dewar  <dewar@adacore.com>\n\n\t* scng.adb (Check_End_Of_Line): Count characters, rather than bytes\n\t(makes a difference for wide characters)\n\n\t* widechar.adb, widechar.ads:\n\tAdd Wide_Char_Byte_Count feature to count chars vs bytes\n\nFrom-SVN: r103875", "tree": {"sha": "ef0b76f32135521b32eafcdd1dffd3eb629eb4fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef0b76f32135521b32eafcdd1dffd3eb629eb4fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d52f1094e50cf2120eebc5bf2a63ed0aa56c825a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d52f1094e50cf2120eebc5bf2a63ed0aa56c825a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d52f1094e50cf2120eebc5bf2a63ed0aa56c825a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d52f1094e50cf2120eebc5bf2a63ed0aa56c825a/comments", "author": null, "committer": null, "parents": [{"sha": "09245ac9a7cb99f101e243591ecacef5342cbee7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09245ac9a7cb99f101e243591ecacef5342cbee7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09245ac9a7cb99f101e243591ecacef5342cbee7"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "9d3483e82515b0a007d1bf23beb9eef8398ccd43", "filename": "gcc/ada/scng.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d52f1094e50cf2120eebc5bf2a63ed0aa56c825a/gcc%2Fada%2Fscng.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d52f1094e50cf2120eebc5bf2a63ed0aa56c825a/gcc%2Fada%2Fscng.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscng.adb?ref=d52f1094e50cf2120eebc5bf2a63ed0aa56c825a", "patch": "@@ -257,6 +257,7 @@ package body Scng is\n       First_Non_Blank_Location  := Scan_Ptr;\n \n       Initialize_Checksum;\n+      Wide_Char_Byte_Count := 0;\n \n       --  Do not call Scan, otherwise the License stuff does not work in Scn\n \n@@ -340,7 +341,10 @@ package body Scng is\n       -----------------------\n \n       procedure Check_End_Of_Line is\n-         Len : constant Int := Int (Scan_Ptr) - Int (Current_Line_Start);\n+         Len : constant Int :=\n+                 Int (Scan_Ptr) -\n+                 Int (Current_Line_Start) -\n+                 Wide_Char_Byte_Count;\n \n       begin\n          if Style_Check then\n@@ -362,6 +366,10 @@ package body Scng is\n          elsif Len > Opt.Max_Line_Length then\n             Error_Long_Line;\n          end if;\n+\n+         --  Reset wide character byte count for next line\n+\n+         Wide_Char_Byte_Count := 0;\n       end Check_End_Of_Line;\n \n       -----------------------"}, {"sha": "e1999286e4941f556b24e331ed46dff92a302ddb", "filename": "gcc/ada/widechar.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d52f1094e50cf2120eebc5bf2a63ed0aa56c825a/gcc%2Fada%2Fwidechar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d52f1094e50cf2120eebc5bf2a63ed0aa56c825a/gcc%2Fada%2Fwidechar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwidechar.adb?ref=d52f1094e50cf2120eebc5bf2a63ed0aa56c825a", "patch": "@@ -88,6 +88,8 @@ package body Widechar is\n       C   : out Char_Code;\n       Err : out Boolean)\n    is\n+      P_Init : constant Source_Ptr := P;\n+\n       function In_Char return Character;\n       --  Function to obtain characters of wide character escape sequence\n \n@@ -108,6 +110,7 @@ package body Widechar is\n    begin\n       C := Char_Code (WC_In (In_Char, Wide_Character_Encoding_Method));\n       Err := False;\n+      Wide_Char_Byte_Count := Wide_Char_Byte_Count + Nat (P - P_Init - 1);\n \n    exception\n       when Constraint_Error =>\n@@ -151,6 +154,8 @@ package body Widechar is\n    ---------------\n \n    procedure Skip_Wide (S : String; P : in out Natural) is\n+      P_Init : constant Natural := P;\n+\n       function Skip_Char return Character;\n       --  Function to skip one character of wide character escape sequence\n \n@@ -173,13 +178,16 @@ package body Widechar is\n \n    begin\n       Discard := WC_Skip (Skip_Char, Wide_Character_Encoding_Method);\n+      Wide_Char_Byte_Count := Wide_Char_Byte_Count + Nat (P - P_Init - 1);\n    end Skip_Wide;\n \n    ---------------\n    -- Skip_Wide --\n    ---------------\n \n    procedure Skip_Wide (S : Source_Buffer_Ptr; P : in out Source_Ptr) is\n+      P_Init : constant Source_Ptr := P;\n+\n       function Skip_Char return Character;\n       --  Function to skip one character of wide character escape sequence\n \n@@ -202,6 +210,7 @@ package body Widechar is\n \n    begin\n       Discard := WC_Skip (Skip_Char, Wide_Character_Encoding_Method);\n+      Wide_Char_Byte_Count := Wide_Char_Byte_Count + Nat (P - P_Init - 1);\n    end Skip_Wide;\n \n end Widechar;"}, {"sha": "cc0ab34a022074617246d0eb31d2f0ed7e3de4fd", "filename": "gcc/ada/widechar.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d52f1094e50cf2120eebc5bf2a63ed0aa56c825a/gcc%2Fada%2Fwidechar.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d52f1094e50cf2120eebc5bf2a63ed0aa56c825a/gcc%2Fada%2Fwidechar.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwidechar.ads?ref=d52f1094e50cf2120eebc5bf2a63ed0aa56c825a", "patch": "@@ -40,6 +40,13 @@ with Types; use Types;\n \n package Widechar is\n \n+   Wide_Char_Byte_Count : Nat := 0;\n+   --  This value is incremented whenever Scan_Wide or Skip_Wide is called.\n+   --  The amount added is the length of the wide character sequence minus\n+   --  one. This means that the count that accululates here represents the\n+   --  difference between the length in characters and the length in bytes.\n+   --  This is used for checking the line length in characters.\n+\n    function Length_Wide return Nat;\n    --  Returns the maximum length in characters for the escape sequence that\n    --  is used to encode wide character literals outside the ASCII range. Used"}]}