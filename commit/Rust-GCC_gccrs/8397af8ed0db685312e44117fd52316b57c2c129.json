{"sha": "8397af8ed0db685312e44117fd52316b57c2c129", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM5N2FmOGVkMGRiNjg1MzEyZTQ0MTE3ZmQ1MjMxNmI1N2MyYzEyOQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2019-12-20T15:56:28Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-15T01:44:33Z"}, "message": "analyzer: fix tests for UNKNOWN_LOCATION\n\nIn the reproducer for PR analyzer/58237 I noticed that some events were\nmissing locations (and text); for example event 3 here:\n\n    |   15 |   while (fgets(buf, 10, fp) != NULL)\n    |      |         ~\n    |      |         |\n    |      |         (2) following 'false' branch...\n    |\n  'f1': event 3\n    |\n    |cc1:\n    |\n  'f1': event 4\n    |\n    |<source>:19:1:\n    |   19 | }\n    |      | ^\n    |      | |\n    |      | (4) 'fp' leaks here; was opened at (1)\n    |\n\nThe root cause is that various places in the analyzer compare locations\nagainst UNKNOWN_LOCATION, which fails to detect an unknown location for\nthe case where an unknown_location has been wrapped into an ad-hoc\nlocation to record a block.\n\nThis patch fixes the issue by using get_pure_location whenever testing\nagainst UNKNOWN_LOCATION to look through ad-hoc wrappers.\n\nFor the case above, it thus picks a better location in\nsupernode::get_start_location for event (3) above, improving it to:\n\n    |   15 |   while (fgets(buf, 10, fp) != NULL)\n    |      |         ~\n    |      |         |\n    |      |         (2) following 'false' branch...\n    |......\n    |   19 | }\n    |      | ~\n    |      | |\n    |      | (3) ...to here\n    |      | (4) 'fp' leaks here; was opened at (1)\n    |\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/58237\n\t* engine.cc (leak_stmt_finder::find_stmt): Use get_pure_location\n\twhen comparing against UNKNOWN_LOCATION.\n\t(stmt_requires_new_enode_p): Likewise.\n\t(exploded_graph::dump_exploded_nodes): Likewise.\n\t* supergraph.cc (supernode::get_start_location): Likewise.\n\t(supernode::get_end_location): Likewise.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/58237\n\t* gcc.dg/analyzer/file-paths-1.c: New test.", "tree": {"sha": "bc5012254244c350b835ad1e32593ff126bbb1c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc5012254244c350b835ad1e32593ff126bbb1c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8397af8ed0db685312e44117fd52316b57c2c129", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8397af8ed0db685312e44117fd52316b57c2c129", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8397af8ed0db685312e44117fd52316b57c2c129", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8397af8ed0db685312e44117fd52316b57c2c129/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03dc3f26231cbf5733330028e14706f8ad77fd5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03dc3f26231cbf5733330028e14706f8ad77fd5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03dc3f26231cbf5733330028e14706f8ad77fd5a"}], "stats": {"total": 58, "additions": 50, "deletions": 8}, "files": [{"sha": "2f91cd116e22b2d9f6e46dd949441bc5415da70b", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8397af8ed0db685312e44117fd52316b57c2c129/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8397af8ed0db685312e44117fd52316b57c2c129/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=8397af8ed0db685312e44117fd52316b57c2c129", "patch": "@@ -1,3 +1,13 @@\n+2020-01-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/58237\n+\t* engine.cc (leak_stmt_finder::find_stmt): Use get_pure_location\n+\twhen comparing against UNKNOWN_LOCATION.\n+\t(stmt_requires_new_enode_p): Likewise.\n+\t(exploded_graph::dump_exploded_nodes): Likewise.\n+\t* supergraph.cc (supernode::get_start_location): Likewise.\n+\t(supernode::get_end_location): Likewise.\n+\n 2020-01-14  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/58237"}, {"sha": "9092024d3a4009ae3ec7e43b07d0c67f492a1e9c", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8397af8ed0db685312e44117fd52316b57c2c129/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8397af8ed0db685312e44117fd52316b57c2c129/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=8397af8ed0db685312e44117fd52316b57c2c129", "patch": "@@ -417,7 +417,7 @@ class leak_stmt_finder : public stmt_finder\n \tconst program_point &dst_point = dst_node->get_point ();\n \tconst gimple *stmt = dst_point.get_stmt ();\n \tif (stmt)\n-\t  if (stmt->location != UNKNOWN_LOCATION)\n+\t  if (get_pure_location (stmt->location) != UNKNOWN_LOCATION)\n \t    return stmt;\n       }\n \n@@ -2300,8 +2300,8 @@ stmt_requires_new_enode_p (const gimple *stmt,\n      could be consolidated into PREV_STMT, giving us an event with\n      no location.  Ensure that STMT gets its own exploded_node to\n      avoid this.  */\n-  if (prev_stmt->location == UNKNOWN_LOCATION\n-      && stmt->location != UNKNOWN_LOCATION)\n+  if (get_pure_location (prev_stmt->location) == UNKNOWN_LOCATION\n+      && get_pure_location (stmt->location) != UNKNOWN_LOCATION)\n     return true;\n \n   return false;\n@@ -3098,7 +3098,7 @@ exploded_graph::dump_exploded_nodes () const\n \t{\n \t  if (const gimple *stmt = enode->get_stmt ())\n \t    {\n-\t      if (richloc.get_loc () == UNKNOWN_LOCATION)\n+\t      if (get_pure_location (richloc.get_loc ()) == UNKNOWN_LOCATION)\n \t\trichloc.set_range (0, stmt->location, SHOW_RANGE_WITH_CARET);\n \t      else\n \t\trichloc.add_range (stmt->location,"}, {"sha": "fd905ea05f4b50347c13f4efcab362a7dbf0e0b2", "filename": "gcc/analyzer/supergraph.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8397af8ed0db685312e44117fd52316b57c2c129/gcc%2Fanalyzer%2Fsupergraph.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8397af8ed0db685312e44117fd52316b57c2c129/gcc%2Fanalyzer%2Fsupergraph.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsupergraph.cc?ref=8397af8ed0db685312e44117fd52316b57c2c129", "patch": "@@ -531,13 +531,14 @@ supernode::dump_dot_id (pretty_printer *pp) const\n location_t\n supernode::get_start_location () const\n {\n-  if (m_returning_call && m_returning_call->location != UNKNOWN_LOCATION)\n+  if (m_returning_call\n+      && get_pure_location (m_returning_call->location) != UNKNOWN_LOCATION)\n     return m_returning_call->location;\n \n   int i;\n   gimple *stmt;\n   FOR_EACH_VEC_ELT (m_stmts, i, stmt)\n-    if (stmt->location != UNKNOWN_LOCATION)\n+    if (get_pure_location (stmt->location) != UNKNOWN_LOCATION)\n       return stmt->location;\n \n   if (entry_p ())\n@@ -561,10 +562,11 @@ supernode::get_end_location () const\n   int i;\n   gimple *stmt;\n   FOR_EACH_VEC_ELT_REVERSE (m_stmts, i, stmt)\n-    if (stmt->location != UNKNOWN_LOCATION)\n+    if (get_pure_location (stmt->location) != UNKNOWN_LOCATION)\n       return stmt->location;\n \n-  if (m_returning_call && m_returning_call->location != UNKNOWN_LOCATION)\n+  if (m_returning_call\n+      && get_pure_location (m_returning_call->location) != UNKNOWN_LOCATION)\n     return m_returning_call->location;\n \n   if (entry_p ())"}, {"sha": "ac0cd2dd67f8f1e926f4a8f3d8b44b2a37089443", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8397af8ed0db685312e44117fd52316b57c2c129/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8397af8ed0db685312e44117fd52316b57c2c129/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8397af8ed0db685312e44117fd52316b57c2c129", "patch": "@@ -1,3 +1,8 @@\n+2020-01-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/58237\n+\t* gcc.dg/analyzer/file-paths-1.c: New test.\n+\n 2020-01-14  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/58237"}, {"sha": "1c8bf61dd3fd917e09ed7f9cbf863dc96b6e47a0", "filename": "gcc/testsuite/gcc.dg/analyzer/file-paths-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8397af8ed0db685312e44117fd52316b57c2c129/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffile-paths-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8397af8ed0db685312e44117fd52316b57c2c129/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffile-paths-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffile-paths-1.c?ref=8397af8ed0db685312e44117fd52316b57c2c129", "patch": "@@ -0,0 +1,25 @@\n+#include <stdio.h>\n+\n+/* Verify that we correctly emit CFG events in the face of buffers\n+   being clobbered in these leak reports.  */\n+\n+void f1 (const char *str)\n+{\n+  FILE * fp = fopen(str, \"r\"); /* { dg-message \"opened here\" } */\n+  char buf[10];\n+\n+  while (fgets(buf, 10, fp) != NULL) /* { dg-message \"following 'false' branch\\\\.\\\\.\\\\.\" } */\n+    {\n+    }\n+} /* { dg-warning \"leak of FILE 'fp'\" } */\n+/* { dg-message \"\\\\.\\\\.\\\\.to here\" \"\" { target *-*-* } .-1 } */\n+\n+void f2(const char *str, int flag)\n+{\n+  FILE * fp = fopen(str, \"r\"); /* { dg-message \"opened here\" } */\n+  char buf[10];\n+\n+  if (flag) /* { dg-message \"when 'flag == 0'\" } */\n+    fclose(fp);\n+} /* { dg-warning \"leak of FILE 'fp'\" } */\n+/* { dg-message \"\\\\.\\\\.\\\\.to here\" \"\" { target *-*-* } .-1 } */"}]}