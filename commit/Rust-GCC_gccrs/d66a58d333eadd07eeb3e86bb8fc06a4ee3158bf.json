{"sha": "d66a58d333eadd07eeb3e86bb8fc06a4ee3158bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY2YTU4ZDMzM2VhZGQwN2VlYjNlODZiYjhmYzA2YTRlZTMxNThiZg==", "commit": {"author": {"name": "Fritz Reese", "email": "fritzoreese@gmail.com", "date": "2018-06-25T18:33:11Z"}, "committer": {"name": "Fritz Reese", "email": "foreese@gcc.gnu.org", "date": "2018-06-25T18:33:11Z"}, "message": "Fix -finit-derived for c_ptr and c_funptr in programs which use\n    iso_c_binding.\n\n    gcc/fortran/ChangeLog:\n\n    2018-06-25  Fritz Reese  <fritzoreese@gmail.com>\n\n\tPR fortran/82972\n        PR fortran/83088\n        PR fortran/85851\n\t* expr.c (component_initializer): Assign init expr to c->initializer.\n\t(generate_isocbinding_initializer): New.\n\t(gfc_generate_initializer): Call generate_isocbinding_initializer to\n\tgenerate initializers for c_ptr and c_funptr with -finit-derived.\n\n    gcc/testsuite/ChangeLog:\n\n    2018-06-25  Fritz Reese  <fritzoreese@gmail.com>\n\n\tPR fortran/82972\n        PR fortran/83088\n        PR fortran/85851\n\t* gfortran.dg/init_flag_17.f90: New testcase.\n\nFrom-SVN: r262104", "tree": {"sha": "a9ceb2d95c61470764b8b3df11ffc22f6d358567", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9ceb2d95c61470764b8b3df11ffc22f6d358567"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d66a58d333eadd07eeb3e86bb8fc06a4ee3158bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d66a58d333eadd07eeb3e86bb8fc06a4ee3158bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d66a58d333eadd07eeb3e86bb8fc06a4ee3158bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d66a58d333eadd07eeb3e86bb8fc06a4ee3158bf/comments", "author": {"login": "fritzr", "id": 2230564, "node_id": "MDQ6VXNlcjIyMzA1NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2230564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzr", "html_url": "https://github.com/fritzr", "followers_url": "https://api.github.com/users/fritzr/followers", "following_url": "https://api.github.com/users/fritzr/following{/other_user}", "gists_url": "https://api.github.com/users/fritzr/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzr/subscriptions", "organizations_url": "https://api.github.com/users/fritzr/orgs", "repos_url": "https://api.github.com/users/fritzr/repos", "events_url": "https://api.github.com/users/fritzr/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "21925ac173495dad58a5ed0293ceb0203f849a51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21925ac173495dad58a5ed0293ceb0203f849a51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21925ac173495dad58a5ed0293ceb0203f849a51"}], "stats": {"total": 77, "additions": 75, "deletions": 2}, "files": [{"sha": "f052cfed2c86eada7eafd546540dbc1a4e855679", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d66a58d333eadd07eeb3e86bb8fc06a4ee3158bf/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d66a58d333eadd07eeb3e86bb8fc06a4ee3158bf/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d66a58d333eadd07eeb3e86bb8fc06a4ee3158bf", "patch": "@@ -1,3 +1,13 @@\n+2018-06-25  Fritz Reese  <fritzoreese@gmail.com>\n+\n+\tPR fortran/82972\n+\tPR fortran/83088\n+\tPR fortran/85851\n+\t* expr.c (component_initializer): Assign init expr to c->initializer.\n+\t(generate_isocbinding_initializer): New.\n+\t(gfc_generate_initializer): Call generate_isocbinding_initializer to\n+\tgenerate initializers for c_ptr and c_funptr with -finit-derived.\n+\n 2018-06-23  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/85983"}, {"sha": "a799a497bb8f8bdbf477133bb120e535a3f95f05", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d66a58d333eadd07eeb3e86bb8fc06a4ee3158bf/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d66a58d333eadd07eeb3e86bb8fc06a4ee3158bf/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=d66a58d333eadd07eeb3e86bb8fc06a4ee3158bf", "patch": "@@ -4493,7 +4493,7 @@ component_initializer (gfc_typespec *ts, gfc_component *c, bool generate)\n       gfc_apply_init (&c->ts, &c->attr, init);\n     }\n \n-  return init;\n+  return (c->initializer = init);\n }\n \n \n@@ -4505,6 +4505,32 @@ gfc_default_initializer (gfc_typespec *ts)\n   return gfc_generate_initializer (ts, false);\n }\n \n+/* Generate an initializer expression for an iso_c_binding type\n+   such as c_[fun]ptr. The appropriate initializer is c_null_[fun]ptr.  */\n+\n+static gfc_expr *\n+generate_isocbinding_initializer (gfc_symbol *derived)\n+{\n+  /* The initializers have already been built into the c_null_[fun]ptr symbols\n+     from gen_special_c_interop_ptr.  */\n+  gfc_symtree *npsym = NULL;\n+  if (0 == strcmp (derived->name, \"c_ptr\"))\n+    gfc_find_sym_tree (\"c_null_ptr\", gfc_current_ns, true, &npsym);\n+  else if (0 == strcmp (derived->name, \"c_funptr\"))\n+    gfc_find_sym_tree (\"c_null_funptr\", gfc_current_ns, true, &npsym);\n+  else\n+    gfc_internal_error (\"generate_isocbinding_initializer(): bad iso_c_binding\"\n+\t\t\t\" type, expected %<c_ptr%> or %<c_funptr%>\");\n+  if (npsym)\n+    {\n+      gfc_expr *init = gfc_copy_expr (npsym->n.sym->value);\n+      init->symtree = npsym;\n+      init->ts.is_iso_c = true;\n+      return init;\n+    }\n+\n+  return NULL;\n+}\n \n /* Get or generate an expression for a default initializer of a derived type.\n    If -finit-derived is specified, generate default initialization expressions\n@@ -4515,8 +4541,12 @@ gfc_generate_initializer (gfc_typespec *ts, bool generate)\n {\n   gfc_expr *init, *tmp;\n   gfc_component *comp;\n+\n   generate = flag_init_derived && generate;\n \n+  if (ts->u.derived->ts.is_iso_c && generate)\n+    return generate_isocbinding_initializer (ts->u.derived);\n+\n   /* See if we have a default initializer in this, but not in nested\n      types (otherwise we could use gfc_has_default_initializer()).\n      We don't need to check if we are going to generate them.  */"}, {"sha": "f2d9caffc0e3bd4521307a687dcd6471ff637012", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d66a58d333eadd07eeb3e86bb8fc06a4ee3158bf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d66a58d333eadd07eeb3e86bb8fc06a4ee3158bf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d66a58d333eadd07eeb3e86bb8fc06a4ee3158bf", "patch": "@@ -1,4 +1,9 @@\n-gcc/testsuite/ChangeLog:\n+2018-06-25  Fritz Reese  <fritzoreese@gmail.com>\n+\n+\tPR fortran/82972\n+\tPR fortran/83088\n+\tPR fortran/85851\n+\t* gfortran.dg/init_flag_17.f90: New testcase.\n \n 2018-06-25  Carl Love  <cel@us.ibm.com>\n "}, {"sha": "401830fccbc7715679a944f495c55fb845696738", "filename": "gcc/testsuite/gfortran.dg/init_flag_17.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d66a58d333eadd07eeb3e86bb8fc06a4ee3158bf/gcc%2Ftestsuite%2Fgfortran.dg%2Finit_flag_17.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d66a58d333eadd07eeb3e86bb8fc06a4ee3158bf/gcc%2Ftestsuite%2Fgfortran.dg%2Finit_flag_17.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finit_flag_17.f90?ref=d66a58d333eadd07eeb3e86bb8fc06a4ee3158bf", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do compile }\n+! { dg-options \"-finit-derived -finit-local-zero -fdump-tree-original\" }\n+!\n+! PR fortran/82972\n+!\n+! Make sure we do not ICE when generating initializers for c_ptr and c_funptr\n+! components of derived types (and make sure they are properly initialized to\n+! zero).\n+!\n+\n+program init_flag_17\n+  use iso_c_binding\n+  implicit none\n+\n+  type :: ty\n+    type(c_ptr)    :: ptr  ! = c_null_ptr\n+    type(c_funptr) :: fptr ! = c_null_funptr\n+  end type\n+\n+  type(ty) :: t\n+\n+  print *, t%ptr\n+  print *, t%fptr\n+\n+end program\n+\n+! { dg-final { scan-tree-dump \"\\.ptr=0\" \"original\" } }\n+! { dg-final { scan-tree-dump \"\\.fptr=0\" \"original\" } }"}]}