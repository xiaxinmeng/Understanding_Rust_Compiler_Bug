{"sha": "bb38bbdfa7fb383cf0f033013d1f576c2a31037e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmIzOGJiZGZhN2ZiMzgzY2YwZjAzMzAxM2QxZjU3NmMyYTMxMDM3ZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-01-17T07:04:42Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-01-17T07:04:42Z"}, "message": "New.\n\nFrom-SVN: r61427", "tree": {"sha": "40c49496f168d2c961199a036098196ccc942ffc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40c49496f168d2c961199a036098196ccc942ffc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb38bbdfa7fb383cf0f033013d1f576c2a31037e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb38bbdfa7fb383cf0f033013d1f576c2a31037e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb38bbdfa7fb383cf0f033013d1f576c2a31037e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb38bbdfa7fb383cf0f033013d1f576c2a31037e/comments", "author": null, "committer": null, "parents": [{"sha": "f030826a533cebc7a79d5fbc980511463e01a0fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f030826a533cebc7a79d5fbc980511463e01a0fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f030826a533cebc7a79d5fbc980511463e01a0fd"}], "stats": {"total": 109, "additions": 109, "deletions": 0}, "files": [{"sha": "d8a686ddb462037366c09972a836caa7e8d0709d", "filename": "gcc/testsuite/gcc.dg/tls/opt-5.c", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb38bbdfa7fb383cf0f033013d1f576c2a31037e/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb38bbdfa7fb383cf0f033013d1f576c2a31037e/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-5.c?ref=bb38bbdfa7fb383cf0f033013d1f576c2a31037e", "patch": "@@ -0,0 +1,109 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* Sched1 moved {load_tp} pattern between strlen call and the copy\n+   of the hard return value to its pseudo.  This resulted in a\n+   reload abort, since the hard register was not spillable.  */\n+\n+extern __thread int __libc_errno __attribute__ ((tls_model (\"initial-exec\")));\n+\n+struct stat64\n+  {\n+    long dummy[4];\n+  };\n+typedef __SIZE_TYPE__ size_t;\n+typedef unsigned long long uint64_t;\n+typedef int __mode_t;\n+\n+extern size_t strlen (__const char *__s) __attribute__ ((__pure__));\n+extern int strcmp (__const char *__s1, __const char *__s2)\n+     __attribute__ ((__pure__));\n+\n+extern int __open64 (__const char *__file, int __oflag, ...);\n+extern int __open (__const char *__file, int __oflag, ...);\n+extern int __mkdir (__const char *__path, __mode_t __mode);\n+extern int __lxstat64 (int __ver, __const char *__filename,\n+                       struct stat64 *__stat_buf) ;\n+\n+static const char letters[] =\n+\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n+\n+int\n+__gen_tempname (char *tmpl, int kind)\n+{\n+  int len;\n+  char *XXXXXX;\n+  static uint64_t value;\n+  uint64_t random_time_bits;\n+  unsigned int count;\n+  int fd = -1;\n+  int save_errno = __libc_errno;\n+  struct stat64 st;\n+  unsigned int attempts_min = 62 * 62 * 62;\n+  unsigned int attempts = attempts_min < 238328 ? 238328 : attempts_min;\n+\n+  len = strlen (tmpl);\n+  if (len < 6 || strcmp(&tmpl[len - 6], \"XXXXXX\"))\n+    {\n+      (__libc_errno = (22));\n+      return -1;\n+    }\n+\n+  XXXXXX = &tmpl[len - 6];\n+\n+  for (count = 0; count < attempts; value += 7777, ++count)\n+    {\n+      uint64_t v = value;\n+\n+      XXXXXX[0] = letters[v % 62];\n+      v /= 62;\n+      XXXXXX[1] = letters[v % 62];\n+      v /= 62;\n+      XXXXXX[2] = letters[v % 62];\n+      v /= 62;\n+      XXXXXX[3] = letters[v % 62];\n+      v /= 62;\n+      XXXXXX[4] = letters[v % 62];\n+      v /= 62;\n+      XXXXXX[5] = letters[v % 62];\n+\n+      switch (kind)\n+        {\n+        case 0:\n+          fd = __open (tmpl, 02 | 01000 | 04000, 0400 | 0200);\n+          break;\n+\n+        case 1:\n+          fd = __open64 (tmpl, 02 | 01000 | 04000, 0400 | 0200);\n+          break;\n+\n+        case 2:\n+          fd = __mkdir (tmpl, 0400 | 0200 | 0100);\n+          break;\n+\n+        case 3:\n+          if (__lxstat64 (2, tmpl, &st) < 0)\n+            {\n+              if (__libc_errno == 2)\n+                {\n+                  (__libc_errno = (save_errno));\n+                  return 0;\n+                }\n+              else\n+\n+                return -1;\n+            }\n+          continue;\n+        }\n+\n+      if (fd >= 0)\n+        {\n+          (__libc_errno = (save_errno));\n+          return fd;\n+        }\n+      else if (__libc_errno != 17)\n+        return -1;\n+    }\n+\n+  (__libc_errno = (17));\n+  return -1;\n+}"}]}