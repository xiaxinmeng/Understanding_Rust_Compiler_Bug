{"sha": "a7de2c2a71940a25408c1320498c1c1ca2472313", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdkZTJjMmE3MTk0MGEyNTQwOGMxMzIwNDk4YzFjMWNhMjQ3MjMxMw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-12-10T20:42:55Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-12-10T20:42:55Z"}, "message": "Let GET_MODE_2XWIDER_MODE find a double-width vector mode.\n\n        * genmodes.c (struct mode_data): Remove wider_2x member.\n        (blank_mode): Adjust initializer.\n        (calc_wider_mode): Use XALLOCAVEC.\n        (emit_move_wider): Select double-width same-element vectors for\n        2xwider vectors.\n        * machmode.h (GET_MODE_2XWIDER_MODE): Update documentation.\n        * config/i386/i386.c (doublesize_vector_mode): Remove.\n        (expand_vselect_vconcat): Use GET_MODE_2XWIDER_MODE instead.\n\nFrom-SVN: r182191", "tree": {"sha": "914df35ba46de67da8ba88eabaff049134debfe9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/914df35ba46de67da8ba88eabaff049134debfe9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7de2c2a71940a25408c1320498c1c1ca2472313", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7de2c2a71940a25408c1320498c1c1ca2472313", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7de2c2a71940a25408c1320498c1c1ca2472313", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7de2c2a71940a25408c1320498c1c1ca2472313/comments", "author": null, "committer": null, "parents": [{"sha": "be94c03412ea6b8613033c2e0fd07e628ef7b4af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be94c03412ea6b8613033c2e0fd07e628ef7b4af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be94c03412ea6b8613033c2e0fd07e628ef7b4af"}], "stats": {"total": 71, "additions": 31, "deletions": 40}, "files": [{"sha": "3490874dd466388b603a89dadd2a17cd8ab9f21b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7de2c2a71940a25408c1320498c1c1ca2472313/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7de2c2a71940a25408c1320498c1c1ca2472313/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7de2c2a71940a25408c1320498c1c1ca2472313", "patch": "@@ -1,3 +1,14 @@\n+2011-12-10  Richard Henderson  <rth@redhat.com>\n+\n+\t* genmodes.c (struct mode_data): Remove wider_2x member.\n+\t(blank_mode): Adjust initializer.\n+\t(calc_wider_mode): Use XALLOCAVEC.\n+\t(emit_move_wider): Select double-width same-element vectors for\n+\t2xwider vectors.\n+\t* machmode.h (GET_MODE_2XWIDER_MODE): Update documentation.\n+\t* config/i386/i386.c (doublesize_vector_mode): Remove.\n+\t(expand_vselect_vconcat): Use GET_MODE_2XWIDER_MODE instead.\n+\n 2011-12-10  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \t* config/epiphany/epiphany.h (USE_LOAD_POST_INCREMENT): Define."}, {"sha": "216ab0b713c0eaed6b23d36a4ef4e066fb443767", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7de2c2a71940a25408c1320498c1c1ca2472313/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7de2c2a71940a25408c1320498c1c1ca2472313/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a7de2c2a71940a25408c1320498c1c1ca2472313", "patch": "@@ -35306,40 +35306,6 @@ ix86_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n     }\n }\n \n-\n-/* Return a vector mode with twice as many elements as VMODE.  */\n-/* ??? Consider moving this to a table generated by genmodes.c.  */\n-\n-static enum machine_mode\n-doublesize_vector_mode (enum machine_mode vmode)\n-{\n-  switch (vmode)\n-    {\n-    case V2SFmode:\treturn V4SFmode;\n-    case V1DImode:\treturn V2DImode;\n-    case V2SImode:\treturn V4SImode;\n-    case V4HImode:\treturn V8HImode;\n-    case V8QImode:\treturn V16QImode;\n-\n-    case V2DFmode:\treturn V4DFmode;\n-    case V4SFmode:\treturn V8SFmode;\n-    case V2DImode:\treturn V4DImode;\n-    case V4SImode:\treturn V8SImode;\n-    case V8HImode:\treturn V16HImode;\n-    case V16QImode:\treturn V32QImode;\n-\n-    case V4DFmode:\treturn V8DFmode;\n-    case V8SFmode:\treturn V16SFmode;\n-    case V4DImode:\treturn V8DImode;\n-    case V8SImode:\treturn V16SImode;\n-    case V16HImode:\treturn V32HImode;\n-    case V32QImode:\treturn V64QImode;\n-\n-    default:\n-      gcc_unreachable ();\n-    }\n-}\n-\n /* Construct (set target (vec_select op0 (parallel perm))) and\n    return true if that's a valid instruction in the active ISA.  */\n \n@@ -35374,7 +35340,7 @@ expand_vselect_vconcat (rtx target, rtx op0, rtx op1,\n   enum machine_mode v2mode;\n   rtx x;\n \n-  v2mode = doublesize_vector_mode (GET_MODE (op0));\n+  v2mode = GET_MODE_2XWIDER_MODE (GET_MODE (op0));\n   x = gen_rtx_VEC_CONCAT (v2mode, op0, op1);\n   return expand_vselect (target, x, perm, nelt);\n }"}, {"sha": "8b6f5bce96b937f71fe76d47916dee167d2bb59b", "filename": "gcc/genmodes.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7de2c2a71940a25408c1320498c1c1ca2472313/gcc%2Fgenmodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7de2c2a71940a25408c1320498c1c1ca2472313/gcc%2Fgenmodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmodes.c?ref=a7de2c2a71940a25408c1320498c1c1ca2472313", "patch": "@@ -63,7 +63,6 @@ struct mode_data\n \n   struct mode_data *component;\t/* mode of components */\n   struct mode_data *wider;\t/* next wider mode */\n-  struct mode_data *wider_2x;\t/* 2x wider mode */\n \n   struct mode_data *contained;  /* Pointer to list of modes that have\n \t\t\t\t   this mode as a component.  */\n@@ -83,7 +82,7 @@ static struct mode_data *void_mode;\n static const struct mode_data blank_mode = {\n   0, \"<unknown>\", MAX_MODE_CLASS,\n   -1U, -1U, -1U, -1U,\n-  0, 0, 0, 0, 0, 0,\n+  0, 0, 0, 0, 0,\n   \"<unknown>\", 0, 0, 0, 0\n };\n \n@@ -790,7 +789,7 @@ calc_wider_mode (void)\n \n   /* Allocate max_n_modes + 1 entries to leave room for the extra null\n      pointer assigned after the qsort call below.  */\n-  sortbuf = (struct mode_data **) alloca ((max_n_modes + 1) * sizeof (struct mode_data *));\n+  sortbuf = XALLOCAVEC (struct mode_data *, max_n_modes + 1);\n \n   for (c = 0; c < MAX_MODE_CLASS; c++)\n     {\n@@ -804,7 +803,6 @@ calc_wider_mode (void)\n \t  for (prev = 0, m = modes[c]; m; m = next)\n \t    {\n \t      m->wider = void_mode;\n-\t      m->wider_2x = void_mode;\n \n \t      /* this is nreverse */\n \t      next = m->next;\n@@ -827,7 +825,6 @@ calc_wider_mode (void)\n \t  for (j = 0; j < i; j++)\n \t    sortbuf[j]->next = sortbuf[j]->wider = sortbuf[j + 1];\n \n-\n \t  modes[c] = sortbuf[0];\n \t}\n     }\n@@ -1062,6 +1059,21 @@ emit_mode_wider (void)\n \t\tcontinue;\n \t    }\n \n+\t  /* For vectors we want twice the number of components,\n+\t     with the same element type.  */\n+\t  if (m->cl == MODE_VECTOR_INT\n+\t      || m->cl == MODE_VECTOR_FLOAT\n+\t      || m->cl == MODE_VECTOR_FRACT\n+\t      || m->cl == MODE_VECTOR_UFRACT\n+\t      || m->cl == MODE_VECTOR_ACCUM\n+\t      || m->cl == MODE_VECTOR_UACCUM)\n+\t    {\n+\t      if (m2->ncomponents != 2 * m->ncomponents)\n+\t\tcontinue;\n+\t      if (m->component != m2->component)\n+\t\tcontinue;\n+\t    }\n+\n \t  break;\n \t}\n       if (m2 == void_mode)"}, {"sha": "4a3f6f50d16f60f12a0d8ac3c81eaa364d8e2345", "filename": "gcc/machmode.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7de2c2a71940a25408c1320498c1c1ca2472313/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7de2c2a71940a25408c1320498c1c1ca2472313/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=a7de2c2a71940a25408c1320498c1c1ca2472313", "patch": "@@ -221,6 +221,8 @@ extern const unsigned char mode_nunits[NUM_MACHINE_MODES];\n extern const unsigned char mode_wider[NUM_MACHINE_MODES];\n #define GET_MODE_WIDER_MODE(MODE) ((enum machine_mode) mode_wider[MODE])\n \n+/* For scalars, this is a mode with twice the precision.  For vectors,\n+   this is a mode with the same inner mode but with twice the elements.  */\n extern const unsigned char mode_2xwider[NUM_MACHINE_MODES];\n #define GET_MODE_2XWIDER_MODE(MODE) ((enum machine_mode) mode_2xwider[MODE])\n "}]}