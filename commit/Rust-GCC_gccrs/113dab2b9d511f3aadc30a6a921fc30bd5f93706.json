{"sha": "113dab2b9d511f3aadc30a6a921fc30bd5f93706", "node_id": "C_kwDOANBUbNoAKDExM2RhYjJiOWQ1MTFmM2FhZGMzMGE2YTkyMWZjMzBiZDVmOTM3MDY", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-10-28T09:44:13Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-10-28T12:30:06Z"}, "message": "Improve backward threading with switches.\n\nWe've been essentially using find_taken_edge_switch_expr() in the\nbackward threader, but this is suboptimal because said function only\nworks with singletons.  VRP has a much smarter find_case_label_range\nthat works with ranges.\n\nTested on x86-64 Linux with:\n\n\ta) Bootstrap & regtests.\n\n\tb) Verifying we get more threads than before.\n\n\tc) Asserting that the new code catches everything the old one\n\tcode caught (over a set of bootstrap .ii files).\n\ngcc/ChangeLog:\n\n\t* tree-ssa-threadbackward.c\n\t(back_threader::find_taken_edge_switch): Use find_case_label_range\n\tinstead of find_taken_edge.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/tree-ssa/vrp106.c: Adjust for threading.\n\t* gcc.dg/tree-ssa/vrp113.c: Same.", "tree": {"sha": "6cb4c293fa0eccb941dfac4e7cb36c5bad5aaa4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cb4c293fa0eccb941dfac4e7cb36c5bad5aaa4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/113dab2b9d511f3aadc30a6a921fc30bd5f93706", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/113dab2b9d511f3aadc30a6a921fc30bd5f93706", "html_url": "https://github.com/Rust-GCC/gccrs/commit/113dab2b9d511f3aadc30a6a921fc30bd5f93706", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/113dab2b9d511f3aadc30a6a921fc30bd5f93706/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f6c22585229b43b13fc9c8d3c08aedd9f7c493a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f6c22585229b43b13fc9c8d3c08aedd9f7c493a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f6c22585229b43b13fc9c8d3c08aedd9f7c493a"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "dc5021a57b5be2ca7ded8c52edc942ed0d741704", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp106.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113dab2b9d511f3aadc30a6a921fc30bd5f93706/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp106.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113dab2b9d511f3aadc30a6a921fc30bd5f93706/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp106.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp106.c?ref=113dab2b9d511f3aadc30a6a921fc30bd5f93706", "patch": "@@ -1,6 +1,6 @@\n /* PR tree-optimization/18046  */\n-/* { dg-options \"-O2 -fdump-tree-vrp-thread1-details\" }  */\n-/* { dg-final { scan-tree-dump-times \"Threaded jump\" 1 \"vrp-thread1\" } }  */\n+/* { dg-options \"-O2 -fdump-tree-ethread-details\" }  */\n+/* { dg-final { scan-tree-dump-times \"Registering jump thread\" 1 \"ethread\" } }  */\n /* During VRP we expect to thread the true arm of the conditional through the switch\n    and to the BB that corresponds to the 7 ... 9 case label.  */\n extern void foo (void);"}, {"sha": "dfe4989d313d98ae89f10884327c3a878cfed119", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp113.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113dab2b9d511f3aadc30a6a921fc30bd5f93706/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp113.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113dab2b9d511f3aadc30a6a921fc30bd5f93706/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp113.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp113.c?ref=113dab2b9d511f3aadc30a6a921fc30bd5f93706", "patch": "@@ -13,5 +13,3 @@ int f(int a) {\n       case 7: return 19;\n     }\n }\n-\n-/* { dg-final { scan-tree-dump \"return 3;\" \"vrp1\" { xfail *-*-* } } } */"}, {"sha": "456effca5e1201382bd8e89cbe4278c299ae6b5c", "filename": "gcc/tree-ssa-threadbackward.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113dab2b9d511f3aadc30a6a921fc30bd5f93706/gcc%2Ftree-ssa-threadbackward.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113dab2b9d511f3aadc30a6a921fc30bd5f93706/gcc%2Ftree-ssa-threadbackward.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.c?ref=113dab2b9d511f3aadc30a6a921fc30bd5f93706", "patch": "@@ -195,11 +195,11 @@ back_threader::find_taken_edge_switch (const vec<basic_block> &path,\n   if (r.varying_p ())\n     return NULL;\n \n-  tree val;\n-  if (r.singleton_p (&val))\n-    return ::find_taken_edge (gimple_bb (sw), val);\n+  tree label = find_case_label_range (sw, &r);\n+  if (!label)\n+    return NULL;\n \n-  return NULL;\n+  return find_edge (gimple_bb (sw), label_to_block (cfun, CASE_LABEL (label)));\n }\n \n // Same as find_taken_edge, but for paths ending in a GIMPLE_COND."}]}