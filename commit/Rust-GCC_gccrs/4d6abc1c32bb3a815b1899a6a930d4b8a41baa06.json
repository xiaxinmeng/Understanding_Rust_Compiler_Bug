{"sha": "4d6abc1c32bb3a815b1899a6a930d4b8a41baa06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ2YWJjMWMzMmJiM2E4MTViMTg5OWE2YTkzMGQ0YjhhNDFiYWEwNg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-10T08:52:07Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-10T08:52:07Z"}, "message": "cp-tree.h (finish_function): Adjust prototype.\n\n\t* cp-tree.h (finish_function): Adjust prototype.\n\t* decl.c (finish_function): Return the function compiled.\n\t* pt.c (instantiate_decl): Don't play games with obstacks.\n\t* tree.c (mapcar): Handle OFFSET_REF and BIT_FIELD_REF.\n\t(search_tree): Likewise.\n\t* typeck.c: Fix typo in comment.\n\t* typeck2.c (store_init_value): Add comment.\n\nFrom-SVN: r29261", "tree": {"sha": "ac67db242e37a7870f41e606e2f2d4be9f5bf8ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac67db242e37a7870f41e606e2f2d4be9f5bf8ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d6abc1c32bb3a815b1899a6a930d4b8a41baa06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d6abc1c32bb3a815b1899a6a930d4b8a41baa06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d6abc1c32bb3a815b1899a6a930d4b8a41baa06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d6abc1c32bb3a815b1899a6a930d4b8a41baa06/comments", "author": null, "committer": null, "parents": [{"sha": "f0105ed3b9568fba5d49d279a4bc12546763ad89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0105ed3b9568fba5d49d279a4bc12546763ad89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0105ed3b9568fba5d49d279a4bc12546763ad89"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "dd88d1a727ed36235c0825fa970c49fee7a29fe3", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d6abc1c32bb3a815b1899a6a930d4b8a41baa06/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d6abc1c32bb3a815b1899a6a930d4b8a41baa06/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4d6abc1c32bb3a815b1899a6a930d4b8a41baa06", "patch": "@@ -3205,7 +3205,7 @@ extern int start_function\t\t\tPROTO((tree, tree, tree, int));\n extern void expand_start_early_try_stmts\tPROTO((void));\n extern void store_parm_decls\t\t\tPROTO((void));\n extern void store_return_init\t\t\tPROTO((tree));\n-extern void finish_function\t\t\tPROTO((int, int));\n+extern tree finish_function\t\t\tPROTO((int, int));\n extern tree start_method\t\t\tPROTO((tree, tree, tree));\n extern tree finish_method\t\t\tPROTO((tree));\n extern void hack_incomplete_structures\t\tPROTO((tree));"}, {"sha": "40f691c93486da2081f9cf92dcca5b531db8d963", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d6abc1c32bb3a815b1899a6a930d4b8a41baa06/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d6abc1c32bb3a815b1899a6a930d4b8a41baa06/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4d6abc1c32bb3a815b1899a6a930d4b8a41baa06", "patch": "@@ -13481,7 +13481,7 @@ store_return_init (decl)\n        function definition.  (This processing will have taken place\n        after the class definition is complete.)  */\n \n-void\n+tree\n finish_function (lineno, flags)\n      int lineno;\n      int flags;\n@@ -13500,7 +13500,7 @@ finish_function (lineno, flags)\n   /* When we get some parse errors, we can end up without a\n      current_function_decl, so cope.  */\n   if (fndecl == NULL_TREE)\n-    return;\n+    return error_mark_node;\n \n   nested = function_depth > 1;\n   fntype = TREE_TYPE (fndecl);\n@@ -14083,13 +14083,16 @@ finish_function (lineno, flags)\n   if (DECL_STATIC_DESTRUCTOR (fndecl))\n     static_dtors = tree_cons (NULL_TREE, fndecl, static_dtors);\n \n+  /* Clean up.  */\n   if (! nested)\n     {\n       /* Let the error reporting routines know that we're outside a\n          function.  For a nested function, this value is used in\n          pop_cp_function_context and then reset via pop_function_context.  */\n       current_function_decl = NULL_TREE;\n     }\n+\n+  return fndecl;\n }\n \f\n /* Create the FUNCTION_DECL for a function definition."}, {"sha": "8af26e5befddbc4168b4f6475fec4f3e2f710668", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d6abc1c32bb3a815b1899a6a930d4b8a41baa06/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d6abc1c32bb3a815b1899a6a930d4b8a41baa06/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4d6abc1c32bb3a815b1899a6a930d4b8a41baa06", "patch": "@@ -9689,34 +9689,16 @@ instantiate_decl (d)\n     }\n   else if (TREE_CODE (d) == FUNCTION_DECL)\n     {\n-      extern struct obstack *saveable_obstack;\n-      extern struct obstack *rtl_obstack;\n-\n       /* Set up context.  */\n       start_function (NULL_TREE, d, NULL_TREE, SF_PRE_PARSED);\n       store_parm_decls ();\n \n-      /* Anything we might\n-\t want to save is going to have to be saved forever.  Note that\n-\t we don't want to save all kinds of temporary clutter that\n-\t might end up on the temporary obstack so we don't want to\n-\t call push_permanent_obstack.  */\n-      push_obstacks_nochange ();\n-      saveable_obstack = &permanent_obstack;\n-      /* We only need this because of the cases where we generate\n-\t RTL_EXPRs.  We should really be generating RTL_EXPRs until\n-\t final expansion time; when that is fixed, this can go.  */\n-      rtl_obstack = &permanent_obstack;\n       /* Substitute into the body of the function.  */\n       tsubst_expr (DECL_SAVED_TREE (code_pattern), args,\n \t\t   /*complain=*/1, tmpl);\n \n-      /* Clean up.  */\n-      pop_obstacks ();\n-      finish_function (lineno, 0);\n-\n-      /* Now, generate RTL for the function.  */\n-      expand_body (d);\n+      /* Finish the function.  */\n+      expand_body (finish_function (lineno, 0));\n     }\n \n out:"}, {"sha": "9cf2ae737d2e440aea3c4a18a1641a3fe0f80238", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d6abc1c32bb3a815b1899a6a930d4b8a41baa06/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d6abc1c32bb3a815b1899a6a930d4b8a41baa06/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=4d6abc1c32bb3a815b1899a6a930d4b8a41baa06", "patch": "@@ -1652,6 +1652,7 @@ search_tree (t, func)\n     case COMPOUND_EXPR:\n     case MODIFY_EXPR:\n     case INIT_EXPR:\n+    case OFFSET_REF:\n       TRY (TREE_OPERAND (t, 0));\n       TRY (TREE_OPERAND (t, 1));\n       break;\n@@ -1666,6 +1667,7 @@ search_tree (t, func)\n     case THROW_EXPR:\n     case EXIT_EXPR:\n     case LOOP_EXPR:\n+    case BIT_FIELD_REF:\n       TRY (TREE_OPERAND (t, 0));\n       break;\n \n@@ -1917,6 +1919,7 @@ mapcar (t, func)\n     case COMPOUND_EXPR:\n     case MODIFY_EXPR:\n     case INIT_EXPR:\n+    case OFFSET_REF:\n       t = copy_node (t);\n       TREE_OPERAND (t, 0) = mapcar (TREE_OPERAND (t, 0), func);\n       TREE_OPERAND (t, 1) = mapcar (TREE_OPERAND (t, 1), func);\n@@ -1999,6 +2002,14 @@ mapcar (t, func)\n       TREE_OPERAND (t, 2) = mapcar (TREE_OPERAND (t, 2), func);\n       return t;\n \n+    case BIT_FIELD_REF:\n+      t = copy_node (t);\n+      TREE_TYPE (t) = mapcar (TREE_TYPE (t), func);\n+      TREE_OPERAND (t, 0) = mapcar (TREE_OPERAND (t, 0), func);\n+      TREE_OPERAND (t, 1) = mapcar (TREE_OPERAND (t, 1), func);\n+      TREE_OPERAND (t, 2) = mapcar (TREE_OPERAND (t, 2), func);\n+      return t;\n+      \n     case LOOKUP_EXPR:\n     case EXIT_EXPR:\n     case LOOP_EXPR:"}, {"sha": "195877c5d329417a257d4699ffb90cfc36f96e1c", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d6abc1c32bb3a815b1899a6a930d4b8a41baa06/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d6abc1c32bb3a815b1899a6a930d4b8a41baa06/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=4d6abc1c32bb3a815b1899a6a930d4b8a41baa06", "patch": "@@ -64,7 +64,7 @@ static int comp_cv_target_types PROTO((tree, tree, int));\n static void casts_away_constness_r PROTO((tree *, tree *));\n static int casts_away_constness PROTO ((tree, tree));\n \n-/* Return the target type of TYPE, which meas return T for:\n+/* Return the target type of TYPE, which means return T for:\n    T*, T&, T[], T (...), and otherwise, just T.  */\n \n tree"}, {"sha": "1374c79106b7443eb211ec1c1374f8b3b24495f8", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d6abc1c32bb3a815b1899a6a930d4b8a41baa06/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d6abc1c32bb3a815b1899a6a930d4b8a41baa06/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=4d6abc1c32bb3a815b1899a6a930d4b8a41baa06", "patch": "@@ -496,6 +496,10 @@ store_init_value (decl, init)\n \t}\n     }\n #endif\n+  \n+  /* Store the VALUE in DECL_INITIAL.  If we're building a\n+     statement-tree we will actually expand the initialization later\n+     when we output this function.  */\n   DECL_INITIAL (decl) = value;\n   return NULL_TREE;\n }"}]}