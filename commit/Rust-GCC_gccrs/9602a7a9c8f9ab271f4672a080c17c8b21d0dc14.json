{"sha": "9602a7a9c8f9ab271f4672a080c17c8b21d0dc14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYwMmE3YTljOGY5YWIyNzFmNDY3MmEwODBjMTdjOGIyMWQwZGMxNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-05-25T16:17:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-05-25T16:17:32Z"}, "message": "re PR c++/18249 (C++ parser i18n problems)\n\n\tPR c++/18249\n\t* parser.c (non_integral_constant): Add NIC_NONE.\n\t(required_token): Add RT_NONE.\n\t(cp_parser_unary_expression): Initialize non_constant_p\n\tto NIC_NONE.\n\t(cp_parser_asm_definition): Initialize missing to RT_NONE.\n\t(cp_parser_primary_expression, cp_parser_postfix_expression,\n\tcp_parser_cast_expression, cp_parser_binary_expression,\n\tcp_parser_functional_cast): Fix formatting.\n\nFrom-SVN: r159827", "tree": {"sha": "2069f1c069eb4e716f48eb0303a048ee3cc46b96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2069f1c069eb4e716f48eb0303a048ee3cc46b96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9602a7a9c8f9ab271f4672a080c17c8b21d0dc14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9602a7a9c8f9ab271f4672a080c17c8b21d0dc14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9602a7a9c8f9ab271f4672a080c17c8b21d0dc14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9602a7a9c8f9ab271f4672a080c17c8b21d0dc14/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "60a5d78a724cc604ca54605db99cc62fcc82f53b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60a5d78a724cc604ca54605db99cc62fcc82f53b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60a5d78a724cc604ca54605db99cc62fcc82f53b"}], "stats": {"total": 41, "additions": 28, "deletions": 13}, "files": [{"sha": "15807ce141bdc406d0fa209c096be06da18556f9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9602a7a9c8f9ab271f4672a080c17c8b21d0dc14/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9602a7a9c8f9ab271f4672a080c17c8b21d0dc14/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9602a7a9c8f9ab271f4672a080c17c8b21d0dc14", "patch": "@@ -1,3 +1,15 @@\n+2010-05-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/18249\n+\t* parser.c (non_integral_constant): Add NIC_NONE.\n+\t(required_token): Add RT_NONE.\n+\t(cp_parser_unary_expression): Initialize non_constant_p\n+\tto NIC_NONE.\n+\t(cp_parser_asm_definition): Initialize missing to RT_NONE.\n+\t(cp_parser_primary_expression, cp_parser_postfix_expression,\n+\tcp_parser_cast_expression, cp_parser_binary_expression,\n+\tcp_parser_functional_cast): Fix formatting.\n+\n 2010-05-25  Shujing Zhao  <pearly.zhao@oracle.com>\n \t\n \tPR c++/18249"}, {"sha": "1cfdba7f20eb737ed34292a442803eb54462ec09", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9602a7a9c8f9ab271f4672a080c17c8b21d0dc14/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9602a7a9c8f9ab271f4672a080c17c8b21d0dc14/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=9602a7a9c8f9ab271f4672a080c17c8b21d0dc14", "patch": "@@ -1,6 +1,6 @@\n /* C++ Parser.\n    Copyright (C) 2000, 2001, 2002, 2003, 2004,\n-   2005, 2007, 2008, 2009  Free Software Foundation, Inc.\n+   2005, 2007, 2008, 2009, 2010  Free Software Foundation, Inc.\n    Written by Mark Mitchell <mark@codesourcery.com>.\n \n    This file is part of GCC.\n@@ -150,6 +150,7 @@ typedef struct GTY(()) cp_token_cache {\n \n /* The various kinds of non integral constant we encounter. */\n typedef enum non_integral_constant {\n+  NIC_NONE,\n   /* floating-point literal */\n   NIC_FLOAT,\n   /* %<this%> */\n@@ -218,7 +219,8 @@ typedef enum name_lookup_error {\n \n /* The various kinds of required token */\n typedef enum required_token {\n-  RT_SEMICOLON = 1,  /* ';' */\n+  RT_NONE,\n+  RT_SEMICOLON,  /* ';' */\n   RT_OPEN_PAREN, /* '(' */\n   RT_CLOSE_BRACE, /* '}' */\n   RT_OPEN_BRACE,  /* '{' */\n@@ -3715,7 +3717,8 @@ cp_parser_primary_expression (cp_parser *parser,\n \t    cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN);\n \t    /* Using `va_arg' in a constant-expression is not\n \t       allowed.  */\n-\t    if (cp_parser_non_integral_constant_expression (parser,NIC_VA_ARG))\n+\t    if (cp_parser_non_integral_constant_expression (parser,\n+\t\t\t\t\t\t\t    NIC_VA_ARG))\n \t      return error_mark_node;\n \t    return build_x_va_arg (expression, type);\n \t  }\n@@ -4842,7 +4845,7 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t/* Only type conversions to integral or enumeration types\n \t   can be used in constant-expressions.  */\n \tif (!cast_valid_in_integral_constant_expression_p (type)\n-\t    && (cp_parser_non_integral_constant_expression (parser, NIC_CAST)))\n+\t    && cp_parser_non_integral_constant_expression (parser, NIC_CAST))\n \t  return error_mark_node;\n \n \tswitch (keyword)\n@@ -5895,7 +5898,7 @@ cp_parser_unary_expression (cp_parser *parser, bool address_p, bool cast_p,\n     {\n       tree cast_expression;\n       tree expression = error_mark_node;\n-      non_integral_constant non_constant_p = 0;\n+      non_integral_constant non_constant_p = NIC_NONE;\n \n       /* Consume the operator token.  */\n       token = cp_lexer_consume_token (parser->lexer);\n@@ -5936,7 +5939,7 @@ cp_parser_unary_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t  gcc_unreachable ();\n \t}\n \n-      if (non_constant_p\n+      if (non_constant_p != NIC_NONE\n \t  && cp_parser_non_integral_constant_expression (parser,\n \t\t\t\t\t\t\t non_constant_p))\n \texpression = error_mark_node;\n@@ -6503,8 +6506,8 @@ cp_parser_cast_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t  /* Only type conversions to integral or enumeration types\n \t     can be used in constant-expressions.  */\n \t  if (!cast_valid_in_integral_constant_expression_p (type)\n-\t      && (cp_parser_non_integral_constant_expression (parser,\n-\t\t\t\t\t\t\t      NIC_CAST)))\n+\t      && cp_parser_non_integral_constant_expression (parser,\n+\t\t\t\t\t\t\t     NIC_CAST))\n \t    return error_mark_node;\n \n \t  /* Perform the cast.  */\n@@ -6739,8 +6742,8 @@ cp_parser_binary_expression (cp_parser* parser, bool cast_p,\n \t least one of the operands is of enumeration type.  */\n \n       if (overloaded_p\n-\t  && (cp_parser_non_integral_constant_expression (parser,\n-\t\t\t\t\t\t\t  NIC_OVERLOADED)))\n+\t  && cp_parser_non_integral_constant_expression (parser,\n+\t\t\t\t\t\t\t NIC_OVERLOADED))\n \treturn error_mark_node;\n     }\n \n@@ -13475,7 +13478,7 @@ cp_parser_asm_definition (cp_parser* parser)\n   bool invalid_inputs_p = false;\n   bool invalid_outputs_p = false;\n   bool goto_p = false;\n-  required_token missing = 0;\n+  required_token missing = RT_NONE;\n \n   /* Look for the `asm' keyword.  */\n   cp_parser_require_keyword (parser, RID_ASM, RT_ASM);\n@@ -19258,8 +19261,8 @@ cp_parser_functional_cast (cp_parser* parser, tree type)\n     type = TREE_TYPE (type);\n   if (cast != error_mark_node\n       && !cast_valid_in_integral_constant_expression_p (type)\n-      && (cp_parser_non_integral_constant_expression (parser,\n-\t\t\t\t\t\t      NIC_CONSTRUCTOR)))\n+      && cp_parser_non_integral_constant_expression (parser,\n+\t\t\t\t\t\t     NIC_CONSTRUCTOR))\n     return error_mark_node;\n   return cast;\n }"}]}