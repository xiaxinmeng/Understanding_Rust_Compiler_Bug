{"sha": "22fa69dace0a41ac78a0fd7a1db1f00e5fc8c3b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJmYTY5ZGFjZTBhNDFhYzc4YTBmZDdhMWRiMWYwMGU1ZmM4YzNiMQ==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2007-01-25T20:32:06Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2007-01-25T20:32:06Z"}, "message": "re PR target/25127 (internal compiler error: in rs6000_emit_prologue, at config/rs6000/rs6000.c:14039)\n\n2007-01-24  Geoffrey Keating  <geoffk@apple.com>\n\n\tPR 25127\n\t* config/rs6000/rs6000.c (first_altivec_reg_to_save): On Darwin,\n\tsave Altivec registers in an eh_return function.\n\t(compute_vrsave_mask): Likewise.\n\t(rs6000_stack_info): Correct AIX/Darwin stack alignment computation\n\tfor saving Altivec registers.\n\t(rs6000_emit_prologue): Don't allocate stack twice in\n\teh_return function.  Correct expected value of altivec_save_offset\n\twhen using save_world.  Describe save of R0 to stack when using\n\tsave_world.  Describe stack pointer adjustment when using\n\tsave_world.  Remove duplicated eh_return parameter register saving.\n\tUpdate sp_offset variable after save_world.\n\t* config/rs6000/t-darwin (LIB2FUNCS_STATIC_EXTRA): Remove\n\tdarwin-world.asm.\n\t(LIB2FUNCS_EXTRA): Add darwin-world.asm.\n\t* config/rs6000/darwin.h (SUBTARGET_OVERRIDE_OPTIONS): -m64\n\timplies Altivec.\n\nIndex: gcc/testsuite/ChangeLog\n2007-01-24  Geoffrey Keating  <geoffk@apple.com>\n\n\t* gcc.target/powerpc/darwin-ehreturn-1.c: New.\n\t* g++.dg/eh/simd-2.C: Also run on Darwin.\n\t* g++.dg/eh/simd-3.C: New.\n\t* g++.dg/eh/simd-4.C: New.\n\nFrom-SVN: r121184", "tree": {"sha": "cb26f2ab10edf9f4cf3062333af82e514672624b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb26f2ab10edf9f4cf3062333af82e514672624b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22fa69dace0a41ac78a0fd7a1db1f00e5fc8c3b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22fa69dace0a41ac78a0fd7a1db1f00e5fc8c3b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22fa69dace0a41ac78a0fd7a1db1f00e5fc8c3b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22fa69dace0a41ac78a0fd7a1db1f00e5fc8c3b1/comments", "author": null, "committer": null, "parents": [{"sha": "9fe944471ab5828c0e4564780a57173a70cc4506", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fe944471ab5828c0e4564780a57173a70cc4506", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fe944471ab5828c0e4564780a57173a70cc4506"}], "stats": {"total": 292, "additions": 248, "deletions": 44}, "files": [{"sha": "0791bafb57eb998611fe29864f8d0dbf2a364d96", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 13, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22fa69dace0a41ac78a0fd7a1db1f00e5fc8c3b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22fa69dace0a41ac78a0fd7a1db1f00e5fc8c3b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22fa69dace0a41ac78a0fd7a1db1f00e5fc8c3b1", "patch": "@@ -1,3 +1,23 @@\n+2007-01-25  Geoffrey Keating  <geoffk@apple.com>\n+\n+\tPR 25127\n+\t* config/rs6000/rs6000.c (first_altivec_reg_to_save): On Darwin,\n+\tsave Altivec registers in an eh_return function.\n+\t(compute_vrsave_mask): Likewise.\n+\t(rs6000_stack_info): Correct AIX/Darwin stack alignment computation\n+\tfor saving Altivec registers.\n+\t(rs6000_emit_prologue): Don't allocate stack twice in\n+\teh_return function.  Correct expected value of altivec_save_offset\n+\twhen using save_world.  Describe save of R0 to stack when using\n+\tsave_world.  Describe stack pointer adjustment when using\n+\tsave_world.  Remove duplicated eh_return parameter register saving.\n+\tUpdate sp_offset variable after save_world.\n+\t* config/rs6000/t-darwin (LIB2FUNCS_STATIC_EXTRA): Remove\n+\tdarwin-world.asm.\n+\t(LIB2FUNCS_EXTRA): Add darwin-world.asm.\n+\t* config/rs6000/darwin.h (SUBTARGET_OVERRIDE_OPTIONS): -m64\n+\timplies Altivec.\n+\n 2007-01-25  Steve Ellcey  <sje@cup.hp.com>\n \n \t* config.gcc (ia64*-*-hpux*): Make posix threads the default.\n@@ -17,19 +37,19 @@\n \n 2007-01-25  Razya Ladelsky  <razya@il.ibm.com>\n \n-        * ipa-cp.c (ipcp_insert_stage, ipcp_driver): Support for SSA. \n-          (ipcp_driver): Change to static definition. \n-\t  Add dumping of the ifunctions.\n-          (constant_val_insert): Remove unused parameter. Support for SSA.\n-          (ipcp_propagate_const): Support for SSA.\n-          (ipcp_profile_bb_print): Print only analyzed nodes.\n-          (ipcp_replace_map_create): Remove support for Fortran constant \n-\t  for now.\n-          * ipa-prop.c (ipa_method_modify_stmt, \n-\t  ipa_callsite_compute_param): Support for SSA.\n-          * ipa-prop.h (ipcp_driver): Remove declaration.\n-          (IS_VALID_TREE_MAP_INDEX): Add define.\n- \n+\t* ipa-cp.c (ipcp_insert_stage, ipcp_driver): Support for SSA. \n+\t(ipcp_driver): Change to static definition. \n+\tAdd dumping of the ifunctions.\n+\t(constant_val_insert): Remove unused parameter. Support for SSA.\n+\t(ipcp_propagate_const): Support for SSA.\n+\t(ipcp_profile_bb_print): Print only analyzed nodes.\n+\t(ipcp_replace_map_create): Remove support for Fortran constant \n+\tfor now.\n+\t* ipa-prop.c (ipa_method_modify_stmt, \n+\tipa_callsite_compute_param): Support for SSA.\n+\t* ipa-prop.h (ipcp_driver): Remove declaration.\n+\t(IS_VALID_TREE_MAP_INDEX): Add define.\n+\n 2007-01-24  Geoffrey Keating  <geoffk@apple.com>\n \n \t* unwind-dw2.c (execute_stack_op): Handle DW_OP_swap."}, {"sha": "28134f922db8f4c6b2e4a1aca852b016e994409a", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22fa69dace0a41ac78a0fd7a1db1f00e5fc8c3b1/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22fa69dace0a41ac78a0fd7a1db1f00e5fc8c3b1/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=22fa69dace0a41ac78a0fd7a1db1f00e5fc8c3b1", "patch": "@@ -91,11 +91,19 @@ do {\t\t\t\t\t\t\t\t\t\\\n       target_flags |= MASK_POWERPC64;\t\t\t\t\t\\\n       warning (0, \"-m64 requires PowerPC64 architecture, enabling\");\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n-  if (flag_mkernel)                                                     \\\n+  if (flag_mkernel)\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       rs6000_default_long_calls = 1;\t\t\t\t\t\\\n       target_flags |= MASK_SOFT_FLOAT;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  /* Make -m64 imply -maltivec.  Darwin's 64-bit ABI includes\t\t\\\n+     Altivec.  */\t\t\t\t\t\t\t\\\n+  if (!flag_mkernel && !flag_apple_kext\t\t\t\t\t\\\n+      && TARGET_64BIT\t\t\t\t\t\t\t\\\n+      && ! (target_flags_explicit & MASK_ALTIVEC))\t\t\t\\\n+    target_flags |= MASK_ALTIVEC;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n   /* Unless the user (not the configurer) has explicitly overridden\t\\\n      it with -mcpu=G3 or -mno-altivec, then 10.5+ targets default to\t\\\n      G4 unless targetting the kernel.  */\t\t\t\t\\"}, {"sha": "dbb1f550f9727f3e475497b473b1c79261744876", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 40, "deletions": 26, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22fa69dace0a41ac78a0fd7a1db1f00e5fc8c3b1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22fa69dace0a41ac78a0fd7a1db1f00e5fc8c3b1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=22fa69dace0a41ac78a0fd7a1db1f00e5fc8c3b1", "patch": "@@ -13020,6 +13020,13 @@ first_altivec_reg_to_save (void)\n   if (! TARGET_ALTIVEC_ABI)\n     return LAST_ALTIVEC_REGNO + 1;\n \n+  /* On Darwin, the unwind routines are compiled without\n+     TARGET_ALTIVEC, and use save_world to save/restore the \n+     altivec registers when necessary.  */\n+  if (DEFAULT_ABI == ABI_DARWIN && current_function_calls_eh_return\n+      && ! TARGET_ALTIVEC)\n+    return FIRST_ALTIVEC_REGNO + 20;\n+\n   /* Find lowest numbered live register.  */\n   for (i = FIRST_ALTIVEC_REGNO + 20; i <= LAST_ALTIVEC_REGNO; ++i)\n     if (regs_ever_live[i])\n@@ -13037,6 +13044,13 @@ compute_vrsave_mask (void)\n {\n   unsigned int i, mask = 0;\n \n+  /* On Darwin, the unwind routines are compiled without\n+     TARGET_ALTIVEC, and use save_world to save/restore the \n+     call-saved altivec registers when necessary.  */\n+  if (DEFAULT_ABI == ABI_DARWIN && current_function_calls_eh_return\n+      && ! TARGET_ALTIVEC)\n+    mask |= 0xFFF;\n+\n   /* First, find out if we use _any_ altivec registers.  */\n   for (i = FIRST_ALTIVEC_REGNO; i <= LAST_ALTIVEC_REGNO; ++i)\n     if (regs_ever_live[i])\n@@ -13381,7 +13395,7 @@ rs6000_stack_info (void)\n \t  /* Align stack so vector save area is on a quadword boundary.  */\n \t  if (info_ptr->altivec_size != 0)\n \t    info_ptr->altivec_padding_size\n-\t      = 16 - (-info_ptr->vrsave_save_offset % 16);\n+\t      = (-info_ptr->vrsave_save_offset) % 16;\n \t  else\n \t    info_ptr->altivec_padding_size = 0;\n \n@@ -14529,7 +14543,8 @@ rs6000_emit_prologue (void)\n \t\t\t|| cfun->machine->ra_need_lr);\n \n   /* For V.4, update stack before we do any saving and set back pointer.  */\n-  if (info->push_p\n+  if (! WORLD_SAVE_P (info)\n+      && info->push_p\n       && (DEFAULT_ABI == ABI_V4\n \t  || current_function_calls_eh_return))\n     {\n@@ -14554,11 +14569,13 @@ rs6000_emit_prologue (void)\n       int i, j, sz;\n       rtx treg;\n       rtvec p;\n+      rtx reg0;\n \n       /* save_world expects lr in r0. */\n+      reg0 = gen_rtx_REG (Pmode, 0);\n       if (info->lr_save_p)\n \t{\n-\t  insn = emit_move_insn (gen_rtx_REG (Pmode, 0),\n+\t  insn = emit_move_insn (reg0,\n \t\t\t\t gen_rtx_REG (Pmode, LINK_REGISTER_REGNUM));\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \t}\n@@ -14575,7 +14592,7 @@ rs6000_emit_prologue (void)\n \t\t  && (!current_function_calls_eh_return\n \t\t       || info->ehrd_offset == -432)\n \t\t  && info->vrsave_save_offset == -224\n-\t\t  && info->altivec_save_offset == (-224 -16 -192));\n+\t\t  && info->altivec_save_offset == -416);\n \n       treg = gen_rtx_REG (SImode, 11);\n       emit_move_insn (treg, GEN_INT (-info->total_size));\n@@ -14584,7 +14601,7 @@ rs6000_emit_prologue (void)\n \t in R11.  It also clobbers R12, so beware!  */\n \n       /* Preserve CR2 for save_world prologues */\n-      sz = 6;\n+      sz = 5;\n       sz += 32 - info->first_gp_reg_save;\n       sz += 64 - info->first_fp_reg_save;\n       sz += LAST_ALTIVEC_REGNO - info->first_altivec_reg_save + 1;\n@@ -14639,29 +14656,26 @@ rs6000_emit_prologue (void)\n \n \tRTVEC_ELT (p, j++) = gen_rtx_SET (VOIDmode, mem, reg);\n       }\n-      /* Prevent any attempt to delete the setting of r0 and treg!  */\n-      RTVEC_ELT (p, j++) = gen_rtx_USE (VOIDmode, gen_rtx_REG (Pmode, 0));\n-      RTVEC_ELT (p, j++) = gen_rtx_USE (VOIDmode, treg);\n-      RTVEC_ELT (p, j++) = gen_rtx_CLOBBER (VOIDmode, sp_reg_rtx);\n+      /* Explain about use of R0.  */\n+      if (info->lr_save_p)\n+\t{\n+\t  rtx addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n+\t\t\t\t   GEN_INT (info->lr_save_offset\n+\t\t\t\t\t    + sp_offset));\n+\t  rtx mem = gen_frame_mem (reg_mode, addr);\n+\t  \n+\t  RTVEC_ELT (p, j++) = gen_rtx_SET (VOIDmode, mem, reg0);\n+\t}\n+      /* Explain what happens to the stack pointer.  */\n+      {\n+\trtx newval = gen_rtx_PLUS (Pmode, sp_reg_rtx, treg);\n+\tRTVEC_ELT (p, j++) = gen_rtx_SET (VOIDmode, sp_reg_rtx, newval);\n+      }\n \n       insn = emit_insn (gen_rtx_PARALLEL (VOIDmode, p));\n       rs6000_frame_related (insn, frame_ptr_rtx, info->total_size,\n-\t\t\t    NULL_RTX, NULL_RTX);\n-\n-      if (current_function_calls_eh_return)\n-\t{\n-\t  unsigned int i;\n-\t  for (i = 0; ; ++i)\n-\t    {\n-\t      unsigned int regno = EH_RETURN_DATA_REGNO (i);\n-\t      if (regno == INVALID_REGNUM)\n-\t\tbreak;\n-\t      emit_frame_save (frame_reg_rtx, frame_ptr_rtx, reg_mode, regno,\n-\t\t\t       info->ehrd_offset + sp_offset\n-\t\t\t       + reg_size * (int) i,\n-\t\t\t       info->total_size);\n-\t    }\n-\t}\n+\t\t\t    treg, GEN_INT (-info->total_size));\n+      sp_offset = info->total_size;\n     }\n \n   /* Save AltiVec registers if needed.  */\n@@ -14890,7 +14904,7 @@ rs6000_emit_prologue (void)\n \n   /* ??? There's no need to emit actual instructions here, but it's the\n      easiest way to get the frame unwind information emitted.  */\n-  if (!WORLD_SAVE_P (info) && current_function_calls_eh_return)\n+  if (current_function_calls_eh_return)\n     {\n       unsigned int i, regno;\n "}, {"sha": "0a31bd76d7de894a32ee0e1b351fbc651df339b0", "filename": "gcc/config/rs6000/t-darwin", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22fa69dace0a41ac78a0fd7a1db1f00e5fc8c3b1/gcc%2Fconfig%2Frs6000%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22fa69dace0a41ac78a0fd7a1db1f00e5fc8c3b1/gcc%2Fconfig%2Frs6000%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-darwin?ref=22fa69dace0a41ac78a0fd7a1db1f00e5fc8c3b1", "patch": "@@ -1,12 +1,12 @@\n LIB2FUNCS_EXTRA = $(srcdir)/config/rs6000/darwin-tramp.asm \\\n \t$(srcdir)/config/rs6000/ppc64-fp.c \\\n \t$(srcdir)/config/darwin-64.c \\\n-\t$(srcdir)/config/rs6000/darwin-ldouble.c\n+\t$(srcdir)/config/rs6000/darwin-ldouble.c \\\n+\t$(srcdir)/config/rs6000/darwin-world.asm\n \n LIB2FUNCS_STATIC_EXTRA = \\\n \t$(srcdir)/config/rs6000/darwin-fpsave.asm  \\\n-\t$(srcdir)/config/rs6000/darwin-vecsave.asm  \\\n-\t$(srcdir)/config/rs6000/darwin-world.asm\n+\t$(srcdir)/config/rs6000/darwin-vecsave.asm\n \n DARWIN_EXTRA_CRT_BUILD_CFLAGS = -mlongcall -mmacosx-version-min=10.4\n "}, {"sha": "afbd22a512c27203c31f72e31ac5b8340dd321fc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22fa69dace0a41ac78a0fd7a1db1f00e5fc8c3b1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22fa69dace0a41ac78a0fd7a1db1f00e5fc8c3b1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=22fa69dace0a41ac78a0fd7a1db1f00e5fc8c3b1", "patch": "@@ -1,3 +1,10 @@\n+2007-01-24  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* gcc.target/powerpc/darwin-ehreturn-1.c: New.\n+\t* g++.dg/eh/simd-2.C: Also run on Darwin.\n+\t* g++.dg/eh/simd-3.C: New.\n+\t* g++.dg/eh/simd-4.C: New.\n+\n 2007-01-25  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.dg/tree-prof/tree-prof.exp: Define _PROFILE_GENERATE\n@@ -6,7 +13,7 @@\n \n 2007-01-25  Razya Ladelsky  <razya@il.ibm.com>\n \n-        * gcc.dg/ipa/ipa-1.c: Update scan tree dump.\n+\t* gcc.dg/ipa/ipa-1.c: Update scan tree dump.\n \t* gcc.dg/ipa/ipa-2.c: Update scan tree dump.\n \t* gcc.dg/ipa/ipa-3.c: Update scan tree dump.\n \t* gcc.dg/ipa/ipa-4.c: Update scan tree dump."}, {"sha": "e2af86636acbe6d922f22a2bcc4388a709e080c6", "filename": "gcc/testsuite/g++.dg/eh/simd-2.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22fa69dace0a41ac78a0fd7a1db1f00e5fc8c3b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsimd-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22fa69dace0a41ac78a0fd7a1db1f00e5fc8c3b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsimd-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsimd-2.C?ref=22fa69dace0a41ac78a0fd7a1db1f00e5fc8c3b1", "patch": "@@ -4,6 +4,7 @@\n // { dg-options \"-O -w\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } }\n // { dg-options \"-O -w\" { target powerpc*-*-* } }\n // { dg-options \"-O -w -maltivec\" { target { powerpc*-*-linux* && powerpc_altivec_ok } } }\n+// { dg-options \"-O -w -maltivec\" { target { powerpc*-*-darwin* && powerpc_altivec_ok } } }\n // { dg-xfail-if \"\" { \"powerpc-*-eabispe*\" \"powerpc-ibm-aix*\" } { \"*\" } { \"\" } }\n // { dg-do run }\n "}, {"sha": "5ac75c932203d8017c71c1804793221911232d5c", "filename": "gcc/testsuite/g++.dg/eh/simd-3.C", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22fa69dace0a41ac78a0fd7a1db1f00e5fc8c3b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsimd-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22fa69dace0a41ac78a0fd7a1db1f00e5fc8c3b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsimd-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsimd-3.C?ref=22fa69dace0a41ac78a0fd7a1db1f00e5fc8c3b1", "patch": "@@ -0,0 +1,65 @@\n+// { dg-options \"-O\" }\n+// { dg-options \"-O -maltivec\" { target { powerpc*-*-darwin* && powerpc_altivec_ok } } }\n+// { dg-do run }\n+\n+#include <cstdlib>\n+#include <cstring>\n+\n+typedef int __attribute__((vector_size(16))) v;\n+\n+v vv[32];\n+volatile v vt = { 1, 2, 3, 4 };\n+\n+void clobber_vrs(void) { };\n+\n+void (*volatile fp)() = clobber_vrs;\n+\n+void thrower(void)\n+{\n+  v v00 = vv[ 0];\n+  v v01 = vv[ 1];\n+  v v02 = vv[ 2];\n+  v v03 = vv[ 3];\n+  v v04 = vv[ 4];\n+  v v05 = vv[ 5];\n+  v v06 = vv[ 6];\n+  v v07 = vv[ 7];\n+  v v08 = vv[ 8];\n+  v v09 = vv[ 9];\n+  v v10 = vv[10];\n+  v v11 = vv[11];\n+  v v12 = vv[12];\n+\n+  fp();\n+\n+  vv[ 0] = v00;\n+  vv[ 1] = v01;\n+  vv[ 2] = v02;\n+  vv[ 3] = v03;\n+  vv[ 4] = v04;\n+  vv[ 5] = v05;\n+  vv[ 6] = v06;\n+  vv[ 7] = v07;\n+  vv[ 8] = v08;\n+  vv[ 9] = v09;\n+  vv[10] = v10;\n+  vv[11] = v11;\n+  vv[12] = v12;\n+\n+  throw 3;\n+}\n+\n+v v2;\n+\n+int main(void)\n+{\n+  v v1 = vt;\n+  try {\n+    thrower();\n+  } catch (int x) {\n+  }\n+  v2 = v1;\n+  if (memcmp (&v2, (v *)&vt, sizeof (v2)) != 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "2552fb1ca52b2370e291f06b34e1710efae2e9a5", "filename": "gcc/testsuite/g++.dg/eh/simd-4.C", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22fa69dace0a41ac78a0fd7a1db1f00e5fc8c3b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsimd-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22fa69dace0a41ac78a0fd7a1db1f00e5fc8c3b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsimd-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsimd-4.C?ref=22fa69dace0a41ac78a0fd7a1db1f00e5fc8c3b1", "patch": "@@ -0,0 +1,68 @@\n+/* { dg-do run { target powerpc*-*-darwin* } } */\n+/* { dg-options \"-fexceptions -fnon-call-exceptions -O -maltivec\" } */\n+\n+#include <cstdlib>\n+#include <cstring>\n+#include <signal.h>\n+\n+typedef int __attribute__((vector_size(16))) v;\n+\n+v vv[32];\n+volatile v vt = { 1, 2, 3, 4 };\n+\n+void clobber_vrs(void) { };\n+\n+void (*volatile fp)() = clobber_vrs;\n+\n+void thrower(int sig)\n+{\n+  v v00 = vv[ 0];\n+  v v01 = vv[ 1];\n+  v v02 = vv[ 2];\n+  v v03 = vv[ 3];\n+  v v04 = vv[ 4];\n+  v v05 = vv[ 5];\n+  v v06 = vv[ 6];\n+  v v07 = vv[ 7];\n+  v v08 = vv[ 8];\n+  v v09 = vv[ 9];\n+  v v10 = vv[10];\n+  v v11 = vv[11];\n+  v v12 = vv[12];\n+\n+  fp();\n+\n+  vv[ 0] = v00;\n+  vv[ 1] = v01;\n+  vv[ 2] = v02;\n+  vv[ 3] = v03;\n+  vv[ 4] = v04;\n+  vv[ 5] = v05;\n+  vv[ 6] = v06;\n+  vv[ 7] = v07;\n+  vv[ 8] = v08;\n+  vv[ 9] = v09;\n+  vv[10] = v10;\n+  vv[11] = v11;\n+  vv[12] = v12;\n+\n+  throw 3;\n+}\n+\n+v v2;\n+\n+int main(void)\n+{\n+  v v1 = vt;\n+  if (signal (SIGBUS, thrower) == SIG_ERR)\n+    abort ();\n+  try {\n+    *(volatile int *)0 = 0;\n+    abort ();\n+  } catch (int x) {\n+  }\n+  v2 = v1;\n+  if (memcmp (&v2, (v *)&vt, sizeof (v2)) != 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "71ee094bfa5f607e00977806548f41845f030b18", "filename": "gcc/testsuite/gcc.target/powerpc/darwin-ehreturn-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22fa69dace0a41ac78a0fd7a1db1f00e5fc8c3b1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdarwin-ehreturn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22fa69dace0a41ac78a0fd7a1db1f00e5fc8c3b1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdarwin-ehreturn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdarwin-ehreturn-1.c?ref=22fa69dace0a41ac78a0fd7a1db1f00e5fc8c3b1", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile { target powerpc*-*-darwin* } } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-mcpu=G3 -funwind-tables\" } */\n+/* { dg-final { scan-assembler \"bl save_world\" } } */\n+/* { dg-final { scan-assembler \".byte\\t0x6b\" } } */\n+\n+/* Verify that on Darwin, even with -mcpu=G3, __builtin_eh_return\n+   saves Altivec registers using save_world, and reports their\n+   location in its EH information.  */\n+\n+long offset;\n+void *handler;\n+\n+extern void setup_offset(void);\n+\n+void foo(void)\n+{\n+  __builtin_unwind_init ();\n+  setup_offset();\n+  __builtin_eh_return (offset, handler);\n+}"}]}