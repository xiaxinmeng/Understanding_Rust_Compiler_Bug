{"sha": "0b077eace85e5b6b6bc311b0f6800e0324de6d59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIwNzdlYWNlODVlNWI2YjZiYzMxMWIwZjY4MDBlMDMyNGRlNmQ1OQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-02-16T00:58:29Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-02-16T00:58:29Z"}, "message": "Makefile.in (cfglayout.o): Depend on TARGET_H.\n\n        * Makefile.in (cfglayout.o): Depend on TARGET_H.\n        * cfglayout.c: Include target.h.\n        (cfg_layout_can_duplicate_bb_p): Check targetm.cannot_copy_insn_p.\n        * target-def.h (TARGET_CANNOT_COPY_INSN_P): New.\n        * target.h (struct gcc_target): Add cannot_copy_insn_p.\n\n        * config/alpha/alpha.c (alpha_cannot_copy_insn_p): New.\n        (TARGET_CANNOT_COPY_INSN_P): New.\n        (override_options): Revert 2003-02-08 hack.\n\nFrom-SVN: r62955", "tree": {"sha": "35ca2b5dd89aac0a688da30150746834c7713a87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35ca2b5dd89aac0a688da30150746834c7713a87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b077eace85e5b6b6bc311b0f6800e0324de6d59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b077eace85e5b6b6bc311b0f6800e0324de6d59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b077eace85e5b6b6bc311b0f6800e0324de6d59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b077eace85e5b6b6bc311b0f6800e0324de6d59/comments", "author": null, "committer": null, "parents": [{"sha": "a7075aea5850feee4de2a5fec2c118aac7365790", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7075aea5850feee4de2a5fec2c118aac7365790", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7075aea5850feee4de2a5fec2c118aac7365790"}], "stats": {"total": 90, "additions": 83, "deletions": 7}, "files": [{"sha": "1381de22f023934c701210560271c5907a88fecb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b077eace85e5b6b6bc311b0f6800e0324de6d59/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b077eace85e5b6b6bc311b0f6800e0324de6d59/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b077eace85e5b6b6bc311b0f6800e0324de6d59", "patch": "@@ -1,3 +1,15 @@\n+2003-02-15  Richard Henderson  <rth@redhat.com>\n+\n+\t* Makefile.in (cfglayout.o): Depend on TARGET_H.\n+\t* cfglayout.c: Include target.h.\n+\t(cfg_layout_can_duplicate_bb_p): Check targetm.cannot_copy_insn_p.\n+\t* target-def.h (TARGET_CANNOT_COPY_INSN_P): New.\n+\t* target.h (struct gcc_target): Add cannot_copy_insn_p.\n+\n+\t* config/alpha/alpha.c (alpha_cannot_copy_insn_p): New.\n+\t(TARGET_CANNOT_COPY_INSN_P): New.\n+\t(override_options): Revert 2003-02-08 hack.\n+\n 2003-02-15  Richard Henderson  <rth@redhat.com>\n \n \t* gcse.c (bypass_block): Use BLOCK_FOR_INSN for resolving LABEL_REFs."}, {"sha": "edab43ecf7ed3b92cfb1ac3894d34641036044b0", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b077eace85e5b6b6bc311b0f6800e0324de6d59/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b077eace85e5b6b6bc311b0f6800e0324de6d59/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=0b077eace85e5b6b6bc311b0f6800e0324de6d59", "patch": "@@ -1700,9 +1700,9 @@ bb-reorder.o : bb-reorder.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n tracer.o : tracer.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h output.h cfglayout.h flags.h \\\n    $(PARAMS_H) profile.h\n-cfglayout.o : cfglayout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n-   insn-config.h $(BASIC_BLOCK_H) hard-reg-set.h output.h function.h \\\n-   cfglayout.h cfgloop.h\n+cfglayout.o : cfglayout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n+   $(RTL_H) $(TREE_H) insn-config.h $(BASIC_BLOCK_H) hard-reg-set.h output.h \\\n+   function.h cfglayout.h cfgloop.h $(TARGET_H)\n timevar.o : timevar.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TIMEVAR_H) flags.h \\\n    intl.h toplev.h\n regrename.o : regrename.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\"}, {"sha": "04ba2ec21e038ca0ebe5460d6cc72e7016545a9a", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b077eace85e5b6b6bc311b0f6800e0324de6d59/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b077eace85e5b6b6bc311b0f6800e0324de6d59/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=0b077eace85e5b6b6bc311b0f6800e0324de6d59", "patch": "@@ -32,6 +32,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"obstack.h\"\n #include \"cfglayout.h\"\n #include \"cfgloop.h\"\n+#include \"target.h\"\n \n /* The contents of the current function definition are allocated\n    in this obstack, and all are freed at the end of the function.  */\n@@ -748,6 +749,21 @@ cfg_layout_can_duplicate_bb_p (bb)\n       && (GET_CODE (PATTERN (next)) == ADDR_VEC\n \t  || GET_CODE (PATTERN (next)) == ADDR_DIFF_VEC))\n     return false;\n+\n+  /* Do not duplicate blocks containing insns that can't be copied.  */\n+  if (targetm.cannot_copy_insn_p)\n+    {\n+      rtx insn = bb->head;\n+      while (1)\n+\t{\n+\t  if (INSN_P (insn) && (*targetm.cannot_copy_insn_p) (insn))\n+\t    return false;\n+\t  if (insn == bb->end)\n+\t    break;\n+\t  insn = NEXT_INSN (insn);\n+\t}\n+    }\n+\n   return true;\n }\n "}, {"sha": "c21656df0b4818a20b43b69ddba6b32f57c1491c", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 47, "deletions": 4, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b077eace85e5b6b6bc311b0f6800e0324de6d59/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b077eace85e5b6b6bc311b0f6800e0324de6d59/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=0b077eace85e5b6b6bc311b0f6800e0324de6d59", "patch": "@@ -192,6 +192,8 @@ static int some_small_symbolic_operand_1\n   PARAMS ((rtx *, void *));\n static int split_small_symbolic_operand_1\n   PARAMS ((rtx *, void *));\n+static bool alpha_cannot_copy_insn_p\n+  PARAMS ((rtx));\n static bool alpha_rtx_costs\n   PARAMS ((rtx, int, int, int *));\n static void alpha_set_memflags_1\n@@ -361,6 +363,8 @@ static void unicosmk_unique_section PARAMS ((tree, int));\n \n #undef TARGET_FUNCTION_OK_FOR_SIBCALL\n #define TARGET_FUNCTION_OK_FOR_SIBCALL alpha_function_ok_for_sibcall\n+#undef TARGET_CANNOT_COPY_INSN_P\n+#define TARGET_CANNOT_COPY_INSN_P alpha_cannot_copy_insn_p\n \n #if TARGET_ABI_OSF\n #undef TARGET_ASM_OUTPUT_MI_THUNK\n@@ -657,10 +661,6 @@ override_options ()\n       real_format_for_mode[DFmode - QFmode] = &vax_g_format;\n       real_format_for_mode[TFmode - QFmode] = NULL;\n     }\n-\n-  /* ??? Turn off explicit relocs until code duplication by bb-reorder\n-     is addressed.  */\n-  target_flags &= ~MASK_EXPLICIT_RELOCS;\n }\n \f\n /* Returns 1 if VALUE is a mask that contains full bytes of zero or ones.  */\n@@ -2475,6 +2475,49 @@ split_small_symbolic_operand_1 (px, data)\n   return 0;\n }\n \n+/* Indicate that INSN cannot be duplicated.  This is true for any insn\n+   that we've marked with gpdisp relocs, since those have to stay in\n+   1-1 correspondence with one another.\n+\n+   Techinically we could copy them if we could set up a mapping from one\n+   sequence number to another, across the set of insns to be duplicated.\n+   This seems overly complicated and error-prone since interblock motion\n+   from sched-ebb could move one of the pair of insns to a different block.  */\n+\n+static bool\n+alpha_cannot_copy_insn_p (insn)\n+     rtx insn;\n+{\n+  rtx pat;\n+\n+  if (!reload_completed || !TARGET_EXPLICIT_RELOCS)\n+    return false;\n+\n+  if (GET_CODE (insn) != INSN)\n+    return false;\n+  if (asm_noperands (insn) >= 0)\n+    return false;\n+\n+  pat = PATTERN (insn);\n+  if (GET_CODE (pat) != SET)\n+    return false;\n+  pat = SET_SRC (pat);\n+  if (GET_CODE (pat) == UNSPEC_VOLATILE)\n+    {\n+      if (XINT (pat, 1) == UNSPECV_LDGP1\n+\t  || XINT (pat, 1) == UNSPECV_PLDGP2)\n+\treturn true;\n+    }\n+  else if (GET_CODE (pat) == UNSPEC)\n+    {\n+      if (XINT (pat, 1) == UNSPEC_LDGP2)\n+\treturn true;\n+    }\n+\n+  return false;\n+}\n+\n+  \n /* Try a machine-dependent way of reloading an illegitimate address\n    operand.  If we find one, push the reload and return the new rtx.  */\n    "}, {"sha": "985d651e3b91987f67e65f1a93de99440485173b", "filename": "gcc/target-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b077eace85e5b6b6bc311b0f6800e0324de6d59/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b077eace85e5b6b6bc311b0f6800e0324de6d59/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=0b077eace85e5b6b6bc311b0f6800e0324de6d59", "patch": "@@ -259,6 +259,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n /* In hook.c.  */\n #define TARGET_CANNOT_MODIFY_JUMPS_P hook_bool_void_false\n #define TARGET_CANNOT_FORCE_CONST_MEM hook_bool_rtx_false\n+#define TARGET_CANNOT_COPY_INSN_P NULL\n #define TARGET_DELEGITIMIZE_ADDRESS hook_rtx_rtx_identity\n #define TARGET_FUNCTION_OK_FOR_SIBCALL hook_bool_tree_tree_false\n #define TARGET_COMP_TYPE_ATTRIBUTES hook_int_tree_tree_1\n@@ -294,6 +295,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_SECTION_TYPE_FLAGS,\t\t\t\\\n   TARGET_CANNOT_MODIFY_JUMPS_P,\t\t\t\\\n   TARGET_CANNOT_FORCE_CONST_MEM,\t\t\\\n+  TARGET_CANNOT_COPY_INSN_P,\t\t\t\\\n   TARGET_DELEGITIMIZE_ADDRESS,\t\t\t\\\n   TARGET_FUNCTION_OK_FOR_SIBCALL,\t\t\\\n   TARGET_IN_SMALL_DATA_P,\t\t\t\\"}, {"sha": "f671321c3ad0bd90652fbab2dfebf1d05cc40e07", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b077eace85e5b6b6bc311b0f6800e0324de6d59/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b077eace85e5b6b6bc311b0f6800e0324de6d59/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=0b077eace85e5b6b6bc311b0f6800e0324de6d59", "patch": "@@ -292,6 +292,9 @@ struct gcc_target\n   /* True if the constant X cannot be placed in the constant pool.  */\n   bool (* cannot_force_const_mem) PARAMS ((rtx));\n \n+  /* True if the insn X cannot be duplicated.  */\n+  bool (* cannot_copy_insn_p) PARAMS ((rtx));\n+\n   /* Given an address RTX, undo the effects of LEGITIMIZE_ADDRESS.  */\n   rtx (* delegitimize_address) PARAMS ((rtx));\n "}]}