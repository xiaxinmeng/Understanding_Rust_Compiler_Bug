{"sha": "b60d63cbaee16a95790c09dd6c23e346639ee180", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjYwZDYzY2JhZWUxNmE5NTc5MGMwOWRkNmMyM2UzNDY2MzllZTE4MA==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2015-08-06T15:57:36Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2015-08-06T15:57:36Z"}, "message": "[AArch64] Tighten direct call pattern to repair -fno-plt\n\n2015-08-06  Jiong Wang  <jiong.wang@arm.com>\n\ngcc/\n  * config/aarch64/aarch64-protos.h (aarch64_is_noplt_call_p): New declaration.\n  * config/aarch64/aarch64.c (aarch64_is_noplt_call_p): New function.\n  * config/aarch64/aarch64.md (call_value_symbol): Check noplt scenarios.\n  (call_symbol): Likewise.\n\ngcc/testsuite/\n  * gcc.target/aarch64/noplt_1.c: New testcase.\n  * gcc.target/aarch64/noplt_2.c: Likewise.\n\nFrom-SVN: r226681", "tree": {"sha": "16f181e588d7fcb32f7b08a951bff9bb47e12447", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16f181e588d7fcb32f7b08a951bff9bb47e12447"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b60d63cbaee16a95790c09dd6c23e346639ee180", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b60d63cbaee16a95790c09dd6c23e346639ee180", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b60d63cbaee16a95790c09dd6c23e346639ee180", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b60d63cbaee16a95790c09dd6c23e346639ee180/comments", "author": null, "committer": null, "parents": [{"sha": "c1153c1987ba906a8763a0c0de49fe2e6b3937f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1153c1987ba906a8763a0c0de49fe2e6b3937f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1153c1987ba906a8763a0c0de49fe2e6b3937f0"}], "stats": {"total": 70, "additions": 68, "deletions": 2}, "files": [{"sha": "2b364ce83b940a35b41d0a3719952af0a6c182d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b60d63cbaee16a95790c09dd6c23e346639ee180/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b60d63cbaee16a95790c09dd6c23e346639ee180/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b60d63cbaee16a95790c09dd6c23e346639ee180", "patch": "@@ -1,3 +1,10 @@\n+2015-08-06  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_is_noplt_call_p): New declaration.\n+\t* config/aarch64/aarch64.c (aarch64_is_noplt_call_p): New function.\n+\t* config/aarch64/aarch64.md (call_value_symbol): Check noplt scenarios.\n+\t(call_symbol): Likewise.\n+\n 2015-08-06  Venkataramanan Kumar  <Venkataramanan.kumar@amd.com>\n \n \t* tree-vect-patterns.c (vect_recog_mult_pattern): New function"}, {"sha": "32b5d0958a6e0b2356874736f858f007fe68cdda", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b60d63cbaee16a95790c09dd6c23e346639ee180/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b60d63cbaee16a95790c09dd6c23e346639ee180/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=b60d63cbaee16a95790c09dd6c23e346639ee180", "patch": "@@ -258,6 +258,7 @@ bool aarch64_handle_option (struct gcc_options *, struct gcc_options *,\n \t\t\t     const struct cl_decoded_option *, location_t);\n bool aarch64_is_extend_from_extract (machine_mode, rtx, rtx);\n bool aarch64_is_long_call_p (rtx);\n+bool aarch64_is_noplt_call_p (rtx);\n bool aarch64_label_mentioned_p (rtx);\n void aarch64_declare_function_name (FILE *, const char*, tree);\n bool aarch64_legitimate_pic_operand_p (rtx);"}, {"sha": "e991a494cfc29ea2b4a0aa2ba8df1febb27806c2", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b60d63cbaee16a95790c09dd6c23e346639ee180/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b60d63cbaee16a95790c09dd6c23e346639ee180/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=b60d63cbaee16a95790c09dd6c23e346639ee180", "patch": "@@ -744,6 +744,24 @@ aarch64_is_long_call_p (rtx sym)\n   return aarch64_decl_is_long_call_p (SYMBOL_REF_DECL (sym));\n }\n \n+/* Return true if calls to symbol-ref SYM should not go through\n+   plt stubs.  */\n+\n+bool\n+aarch64_is_noplt_call_p (rtx sym)\n+{\n+  const_tree decl = SYMBOL_REF_DECL (sym);\n+\n+  if (flag_pic\n+      && decl\n+      && (!flag_plt\n+\t  || lookup_attribute (\"noplt\", DECL_ATTRIBUTES (decl)))\n+      && !targetm.binds_local_p (decl))\n+    return true;\n+\n+  return false;\n+}\n+\n /* Return true if the offsets to a zero/sign-extract operation\n    represent an expression that matches an extend operation.  The\n    operands represent the paramters from"}, {"sha": "7f9975328950bc72f083041dfb25a0fc437dbb5f", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b60d63cbaee16a95790c09dd6c23e346639ee180/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b60d63cbaee16a95790c09dd6c23e346639ee180/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=b60d63cbaee16a95790c09dd6c23e346639ee180", "patch": "@@ -603,7 +603,8 @@\n    (use (match_operand 2 \"\" \"\"))\n    (clobber (reg:DI LR_REGNUM))]\n   \"GET_CODE (operands[0]) == SYMBOL_REF\n-   && !aarch64_is_long_call_p (operands[0])\"\n+   && !aarch64_is_long_call_p (operands[0])\n+   && !aarch64_is_noplt_call_p (operands[0])\"\n   \"bl\\\\t%a0\"\n   [(set_attr \"type\" \"call\")]\n )\n@@ -665,7 +666,8 @@\n    (use (match_operand 3 \"\" \"\"))\n    (clobber (reg:DI LR_REGNUM))]\n   \"GET_CODE (operands[1]) == SYMBOL_REF\n-   && !aarch64_is_long_call_p (operands[1])\"\n+   && !aarch64_is_long_call_p (operands[1])\n+   && !aarch64_is_noplt_call_p (operands[1])\"\n   \"bl\\\\t%a1\"\n   [(set_attr \"type\" \"call\")]\n )"}, {"sha": "fb3bf07f58f8ff4c39ed2f99871bb124a204dfb3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b60d63cbaee16a95790c09dd6c23e346639ee180/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b60d63cbaee16a95790c09dd6c23e346639ee180/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b60d63cbaee16a95790c09dd6c23e346639ee180", "patch": "@@ -1,3 +1,8 @@\n+2015-08-06  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* gcc.target/aarch64/noplt_1.c: New testcase.\n+\t* gcc.target/aarch64/noplt_2.c: Likewise.\n+\n 2015-08-06  Venkataramanan Kumar  <Venkataramanan.kumar@amd.com>\n \n \t* gcc.dg/vect/vect-mult-pattern-1.c: New test."}, {"sha": "4e9bb62ba1c745271e544dd65fdb4a7a4340f7a8", "filename": "gcc/testsuite/gcc.target/aarch64/noplt_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b60d63cbaee16a95790c09dd6c23e346639ee180/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnoplt_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b60d63cbaee16a95790c09dd6c23e346639ee180/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnoplt_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnoplt_1.c?ref=b60d63cbaee16a95790c09dd6c23e346639ee180", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fpic -fno-plt\" } */\n+/* { dg-skip-if \"-mcmodel=large, no support for -fpic\" { aarch64-*-* }  { \"-mcmodel=large\" } { \"\" } } */\n+\n+int* bar (void) ;\n+\n+int\n+foo (int a)\n+{\n+  int *b = bar ();\n+  return b[a];\n+}\n+\n+/* { dg-final { scan-assembler \"#:got:\" { target { aarch64_tiny || aarch64_small } } } } */\n+/* { dg-final { scan-assembler \"#:got_lo12:\" { target aarch64_small } } } */"}, {"sha": "718999b3c547a7069f494cd9b1ff0c385b840f5a", "filename": "gcc/testsuite/gcc.target/aarch64/noplt_2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b60d63cbaee16a95790c09dd6c23e346639ee180/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnoplt_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b60d63cbaee16a95790c09dd6c23e346639ee180/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnoplt_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnoplt_2.c?ref=b60d63cbaee16a95790c09dd6c23e346639ee180", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fpic\" } */\n+/* { dg-skip-if \"-mcmodel=large, no support for -fpic\" { aarch64-*-* }  { \"-mcmodel=large\" } { \"\" } } */\n+\n+__attribute__ ((noplt))\n+int* bar0 (void) ;\n+int* bar1 (void) ;\n+\n+int\n+foo (int a)\n+{\n+  int *b0 = bar0 ();\n+  int *b1 = bar1 ();\n+  return b0[a] + b1[a];\n+}\n+\n+/* { dg-final { scan-assembler-times \"#:got:\" 1 { target { aarch64_tiny || aarch64_small } } } } */\n+/* { dg-final { scan-assembler-times \"#:got_lo12:\" 1 { target aarch64_small } } } */"}]}