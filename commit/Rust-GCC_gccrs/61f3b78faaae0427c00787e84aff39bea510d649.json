{"sha": "61f3b78faaae0427c00787e84aff39bea510d649", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFmM2I3OGZhYWFlMDQyN2MwMDc4N2U4NGFmZjM5YmVhNTEwZDY0OQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-09-16T18:38:52Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-09-16T18:38:52Z"}, "message": "m32r.c: Include toplev.h.\n\n        * m32r.c: Include toplev.h.\n        (*): Add ATTRIBUTE_UNUSED as needed to arguments.\n        (gen_compare): Rename swap_p to must_swap to match uses.\n        Add default abort case.\n        (m32r_output_function_epilogue): Remove unused variables.\n        (m32r_print_operand): Use HOST_WIDE_INT_PRINT_HEX.\n        * m32r.h (PROTO, STDIO_PROTO): Rename XPROTO; unconditionally\n        define to empty parameter list.  Update all uses.\n        (predicate decls): Use enum machine_mode not int.\n        * m32r.md (movsi): Call abort, not fatal_insn.\n        (zero_branch_insn, rev_zero_branch_insn): Add default abort case.\n\nFrom-SVN: r29459", "tree": {"sha": "db48fd87a1188cf46d7da0c83e6b8c92641a9808", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db48fd87a1188cf46d7da0c83e6b8c92641a9808"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61f3b78faaae0427c00787e84aff39bea510d649", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61f3b78faaae0427c00787e84aff39bea510d649", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61f3b78faaae0427c00787e84aff39bea510d649", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61f3b78faaae0427c00787e84aff39bea510d649/comments", "author": null, "committer": null, "parents": [{"sha": "033ed3404f26189e0a8dad325c17473ec9b95f29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/033ed3404f26189e0a8dad325c17473ec9b95f29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/033ed3404f26189e0a8dad325c17473ec9b95f29"}], "stats": {"total": 225, "additions": 122, "deletions": 103}, "files": [{"sha": "688024c77c48fcb7d0dc19838748cf40cf0686e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f3b78faaae0427c00787e84aff39bea510d649/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f3b78faaae0427c00787e84aff39bea510d649/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61f3b78faaae0427c00787e84aff39bea510d649", "patch": "@@ -1,3 +1,17 @@\n+Thu Sep 16 11:37:32 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* m32r.c: Include toplev.h.\n+\t(*): Add ATTRIBUTE_UNUSED as needed to arguments.\n+\t(gen_compare): Rename swap_p to must_swap to match uses.\n+\tAdd default abort case.\n+\t(m32r_output_function_epilogue): Remove unused variables.\n+\t(m32r_print_operand): Use HOST_WIDE_INT_PRINT_HEX.\n+\t* m32r.h (PROTO, STDIO_PROTO): Rename XPROTO; unconditionally\n+\tdefine to empty parameter list.  Update all uses.\n+\t(predicate decls): Use enum machine_mode not int.\n+\t* m32r.md (movsi): Call abort, not fatal_insn.\n+\t(zero_branch_insn, rev_zero_branch_insn): Add default abort case.\n+\n 1999-09-14  Andrew Haley  <aph@cygnus.com>\n \n \t* config/mips/mips.md (movsi_usw): if operand 1 is const_int 0,"}, {"sha": "e737608a02c82eceeddc010b6723745cfe252eca", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 40, "deletions": 31, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f3b78faaae0427c00787e84aff39bea510d649/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f3b78faaae0427c00787e84aff39bea510d649/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=61f3b78faaae0427c00787e84aff39bea510d649", "patch": "@@ -34,6 +34,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"expr.h\"\n #include \"function.h\"\n #include \"recog.h\"\n+#include \"toplev.h\"\n \n /* Save the operands last given to a compare for use when we\n    generate a scc or bcc insn.  */\n@@ -237,8 +238,8 @@ init_idents PROTO ((void))\n \n int\n m32r_valid_machine_decl_attribute (type, attributes, identifier, args)\n-     tree type;\n-     tree attributes;\n+     tree type ATTRIBUTE_UNUSED;\n+     tree attributes ATTRIBUTE_UNUSED;\n      tree identifier;\n      tree args;\n {\n@@ -269,7 +270,8 @@ m32r_valid_machine_decl_attribute (type, attributes, identifier, args)\n \n int\n m32r_comp_type_attributes (type1, type2)\n-     tree type1, type2;\n+     tree type1 ATTRIBUTE_UNUSED;\n+     tree type2 ATTRIBUTE_UNUSED;\n {\n   return 1;\n }\n@@ -278,7 +280,7 @@ m32r_comp_type_attributes (type1, type2)\n \n void\n m32r_set_default_type_attributes (type)\n-     tree type;\n+     tree type ATTRIBUTE_UNUSED;\n {\n }\n \f\n@@ -477,7 +479,7 @@ call_operand (op, int_mode)\n int\n symbolic_operand (op, int_mode)\n      rtx op;\n-     int int_mode;\n+     int int_mode ATTRIBUTE_UNUSED;\n {\n   switch (GET_CODE (op))\n     {\n@@ -496,7 +498,7 @@ symbolic_operand (op, int_mode)\n int\n small_data_operand (op, int_mode)\n      rtx op;\n-     int int_mode;\n+     int int_mode ATTRIBUTE_UNUSED;\n {\n   if (! TARGET_SDATA_USE)\n     return 0;\n@@ -519,7 +521,7 @@ small_data_operand (op, int_mode)\n int\n addr24_operand (op, int_mode)\n      rtx op;\n-     int int_mode;\n+     int int_mode ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (op) == LABEL_REF)\n     return TARGET_ADDR24;\n@@ -577,7 +579,7 @@ addr32_operand (op, int_mode)\n int\n call26_operand (op, int_mode)\n      rtx op;\n-     int int_mode;\n+     int int_mode ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (op) == SYMBOL_REF)\n     return ! LARGE_NAME_P (XSTR (op, 0));\n@@ -590,7 +592,7 @@ call26_operand (op, int_mode)\n int\n seth_add3_operand (op, int_mode)\n      rtx op;\n-     int int_mode;\n+     int int_mode ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (op) == SYMBOL_REF\n       || GET_CODE (op) == LABEL_REF)\n@@ -612,7 +614,7 @@ seth_add3_operand (op, int_mode)\n int\n cmp_int16_operand (op, int_mode)\n      rtx op;\n-     int int_mode;\n+     int int_mode ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (op) != CONST_INT)\n     return 0;\n@@ -624,7 +626,7 @@ cmp_int16_operand (op, int_mode)\n int\n uint16_operand (op, int_mode)\n      rtx op;\n-     int int_mode;\n+     int int_mode ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (op) != CONST_INT)\n     return 0;\n@@ -684,7 +686,7 @@ reg_or_cmp_int16_operand (op, int_mode)\n int\n two_insn_const_operand (op, int_mode)\n      rtx op;\n-     int int_mode;\n+     int int_mode ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (op) != CONST_INT)\n     return 0;\n@@ -853,7 +855,7 @@ easy_df_const (op)\n int\n eqne_comparison_operator (op, int_mode)\n     rtx op;\n-    int int_mode;\n+    int int_mode ATTRIBUTE_UNUSED;\n {\n   enum rtx_code code = GET_CODE (op);\n \n@@ -867,7 +869,7 @@ eqne_comparison_operator (op, int_mode)\n int\n signed_comparison_operator (op, int_mode)\n     rtx op;\n-    int int_mode;\n+    int int_mode ATTRIBUTE_UNUSED;\n {\n   enum rtx_code code = GET_CODE (op);\n \n@@ -883,7 +885,7 @@ signed_comparison_operator (op, int_mode)\n int\n memreg_operand (op, int_mode)\n      rtx op;\n-     int int_mode;\n+     int int_mode ATTRIBUTE_UNUSED;\n {\n   return GET_CODE (op) == MEM && GET_CODE (XEXP (op, 0)) == REG;\n }\n@@ -894,7 +896,7 @@ memreg_operand (op, int_mode)\n int\n small_insn_p (op, int_mode)\n      rtx op;\n-     int int_mode;\n+     int int_mode ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (op) == CONST_INT && INTVAL (op) == 0)\n     return 1;\n@@ -910,7 +912,7 @@ small_insn_p (op, int_mode)\n int\n large_insn_p (op, int_mode)\n      rtx op;\n-     int int_mode;\n+     int int_mode ATTRIBUTE_UNUSED;\n {\n   if (GET_RTX_CLASS (GET_CODE (op)) != 'i')\n     return 0;\n@@ -926,8 +928,9 @@ large_insn_p (op, int_mode)\n \n int\n m32r_select_cc_mode (op, x, y)\n-     int op;\n-     rtx x, y;\n+     int op ATTRIBUTE_UNUSED;\n+     rtx x ATTRIBUTE_UNUSED;\n+     rtx y ATTRIBUTE_UNUSED;\n {\n   return (int)SImode;\n }\n@@ -946,7 +949,7 @@ gen_compare (code, x, y, need_compare)\n   enum machine_mode mode = SELECT_CC_MODE (code, x, y);\n   enum rtx_code compare_code, branch_code;\n   rtx cc_reg = gen_rtx_REG (mode, CARRY_REGNUM);\n-  int swap_p = 0;\n+  int must_swap = 0;\n \n   switch (code)\n     {\n@@ -960,6 +963,9 @@ gen_compare (code, x, y, need_compare)\n     case LEU: compare_code = LTU; branch_code = EQ; must_swap = 1; break;\n     case GTU: compare_code = LTU; branch_code = NE; must_swap = 1; break;\n     case GEU: compare_code = LTU; branch_code = EQ; break;\n+\n+    default:\n+      abort();\n     }\n \n   if (need_compare)\n@@ -1135,6 +1141,9 @@ gen_compare (code, x, y, need_compare)\n     case LTU :\n       emit_insn (gen_cmp_ltusi_insn (must_swap ? y : x, must_swap ? x : y));\n       break;\n+\n+    default:\n+      abort ();\n     }\n \n   return gen_rtx (branch_code, VOIDmode, cc_reg, CONST0_RTX (mode));\n@@ -1275,7 +1284,7 @@ function_arg_partial_nregs (cum, int_mode, type, named)\n      CUMULATIVE_ARGS *cum;\n      int int_mode;\n      tree type;\n-     int named;\n+     int named ATTRIBUTE_UNUSED;\n {\n   enum machine_mode mode = (enum machine_mode)int_mode;\n   int ret;\n@@ -1416,7 +1425,7 @@ m32r_va_arg (valist, type)\n \n int\n m32r_address_cost (addr)\n-     rtx addr;\n+     rtx addr ATTRIBUTE_UNUSED;\n {\n   return 1;\n }\n@@ -1733,7 +1742,7 @@ m32r_output_function_prologue (file, size)\n void\n m32r_output_function_epilogue (file, size)\n      FILE * file;\n-     int    size;\n+     int    size ATTRIBUTE_UNUSED;\n {\n   int regno;\n   int noepilogue = FALSE;\n@@ -1761,8 +1770,6 @@ m32r_output_function_epilogue (file, size)\n \n   if (!noepilogue)\n     {\n-      unsigned int pretend_size = current_frame_info.pretend_size;\n-      unsigned int frame_size = total_size - pretend_size;\n       unsigned int var_size = current_frame_info.var_size;\n       unsigned int args_size = current_frame_info.args_size;\n       unsigned int gmask = current_frame_info.gmask;\n@@ -1860,7 +1867,9 @@ m32r_finalize_pic ()\n \n void\n m32r_initialize_trampoline (tramp, fnaddr, cxt)\n-     rtx tramp, fnaddr, cxt;\n+     rtx tramp ATTRIBUTE_UNUSED;\n+     rtx fnaddr ATTRIBUTE_UNUSED;\n+     rtx cxt ATTRIBUTE_UNUSED;\n {\n }\n \f\n@@ -1945,7 +1954,7 @@ m32r_print_operand (file, x, code)\n \t  rtx first, second;\n \n \t  split_double (x, &first, &second);\n-\t  fprintf (file, \"0x%08x\",\n+\t  fprintf (file, HOST_WIDE_INT_PRINT_HEX,\n \t\t   code == 'L' ? INTVAL (first) : INTVAL (second));\n \t}\n       else\n@@ -2269,7 +2278,7 @@ conditional_move_operand (operand, int_mode)\n int\n carry_compare_operand (op, int_mode)\n      rtx op;\n-     int int_mode;\n+     int int_mode ATTRIBUTE_UNUSED;\n {\n   rtx x;\n \n@@ -2299,7 +2308,7 @@ carry_compare_operand (op, int_mode)\n char *\n emit_cond_move (operands, insn)\n      rtx * operands;\n-     rtx   insn;\n+     rtx   insn ATTRIBUTE_UNUSED;\n {\n   static char buffer [100];\n   char * dest = reg_names [REGNO (operands [0])];\n@@ -2470,7 +2479,7 @@ m32r_expand_block_move (operands)\n \n char *\n m32r_output_block_move (insn, operands)\n-     rtx insn;\n+     rtx insn ATTRIBUTE_UNUSED;\n      rtx operands[];\n {\n   HOST_WIDE_INT bytes = INTVAL (operands[2]);\n@@ -2591,7 +2600,7 @@ m32r_output_block_move (insn, operands)\n int\n m32r_block_immediate_operand (op, mode)\n      rtx op;\n-     int mode;\n+     int mode ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (op) != CONST_INT\n       || INTVAL (op) > MAX_MOVE_BYTES"}, {"sha": "4e118380f9620cf11fce60c8954cb1a9b053d3fa", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 63, "deletions": 71, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f3b78faaae0427c00787e84aff39bea510d649/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f3b78faaae0427c00787e84aff39bea510d649/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=61f3b78faaae0427c00787e84aff39bea510d649", "patch": "@@ -1984,19 +1984,8 @@ enum m32r_function_type\n { \"large_insn_p\",\t\t{ INSN, CALL_INSN, JUMP_INSN }},\n \n /* Functions declared in m32r.c */\n-#ifndef PROTO\n-#if defined (USE_PROTOTYPES) ? USE_PROTOTYPES : defined (__STDC__)\n-#define PROTO(ARGS) ARGS\n-#else\n-#define PROTO(ARGS) ()\n-#endif\n-#endif\n-\n-#ifdef BUFSIZ\t\t/* stdio.h has been included, ok to use FILE * */\n-#define STDIO_PROTO(ARGS) PROTO(ARGS)\n-#else\n-#define STDIO_PROTO(ARGS) ()\n-#endif\n+#define XPROTO(ARGS) ()\n+#define STDIO_XPROTO(ARGS) ()\n \n #ifndef TREE_CODE\n union tree_node;\n@@ -2012,65 +2001,68 @@ struct rtx_def;\n #define Rtx rtx\n #endif\n \n-extern void sbss_section\t\t\tPROTO((void));\n-extern void sdata_section\t\t\tPROTO((void));\n-extern void m32r_init\t\t\t\tPROTO((void));\n-extern int  m32r_valid_machine_decl_attribute\tPROTO((Tree, Tree, Tree, Tree));\n-extern int  m32r_comp_type_attributes\t\tPROTO((Tree, Tree));\n-extern void m32r_select_section\t\t\tPROTO((Tree, int));\n-extern void m32r_encode_section_info\t\tPROTO((Tree));\n-extern void m32r_init_expanders\t\t\tPROTO((void));\n-extern int  call_address_operand\t\tPROTO((Rtx, int));\n-extern int  call_operand\t\t\tPROTO((Rtx, int));\n-extern int  symbolic_operand\t\t\tPROTO((Rtx, int));\n-extern int  small_data_operand\t\t\tPROTO((Rtx, int));\n-extern int  addr24_operand\t\t\tPROTO((Rtx, int));\n-extern int  addr32_operand\t\t\tPROTO((Rtx, int));\n-extern int  call26_operand\t\t\tPROTO((Rtx, int));\n-extern int  seth_add3_operand\t\t\tPROTO((Rtx, int));\n-extern int  cmp_int16_operand\t\t\tPROTO((Rtx, int));\n-extern int  uint16_operand\t\t\tPROTO((Rtx, int));\n-extern int  reg_or_int16_operand\t\tPROTO((Rtx, int));\n-extern int  reg_or_uint16_operand\t\tPROTO((Rtx, int));\n-extern int  reg_or_cmp_nt16_operand\t\tPROTO((Rtx, int));\n-extern int  two_insn_const_operand\t\tPROTO((Rtx, int));\n-extern int  move_src_operand\t\t\tPROTO((Rtx, int));\n-extern int  move_double_src_operand\t\tPROTO((Rtx, int));\n-extern int  move_dest_operand\t\t\tPROTO((Rtx, int));\n-extern int  easy_di_const\t\t\tPROTO((Rtx));\n-extern int  easy_df_const\t\t\tPROTO((Rtx));\n-extern int  eqne_comparison_operator\t\tPROTO((Rtx, int));\n-extern int  signed_comparison_operator\t\tPROTO((Rtx, int));\n-extern int  memreg_operand\t\t\tPROTO((Rtx, int));\n-extern int  small_insn_p\t\t\tPROTO((Rtx, int));\n-extern int  large_insn_p\t\t\tPROTO((Rtx, int));\n-extern int  m32r_select_cc_mode\t\t\tPROTO((int, Rtx, Rtx));\n-extern Rtx  gen_compare\t\t\t\tPROTO((int, Rtx, Rtx, int));\n-extern Rtx  gen_split_move_double\t\tPROTO((Rtx *));\n-extern int  function_arg_partial_nregs\t\tPROTO((CUMULATIVE_ARGS *,\n+extern void sbss_section\t\t\tXPROTO((void));\n+extern void sdata_section\t\t\tXPROTO((void));\n+extern void m32r_init\t\t\t\tXPROTO((void));\n+extern int  m32r_valid_machine_decl_attribute\tXPROTO((Tree, Tree, Tree, Tree));\n+extern int  m32r_comp_type_attributes\t\tXPROTO((Tree, Tree));\n+extern void m32r_select_section\t\t\tXPROTO((Tree, int));\n+extern void m32r_encode_section_info\t\tXPROTO((Tree));\n+extern void m32r_init_expanders\t\t\tXPROTO((void));\n+extern int  call_address_operand\t\tXPROTO((Rtx, enum machine_mode));\n+extern int  call_operand\t\t\tXPROTO((Rtx, enum machine_mode));\n+extern int  symbolic_operand\t\t\tXPROTO((Rtx, enum machine_mode));\n+extern int  small_data_operand\t\t\tXPROTO((Rtx, enum machine_mode));\n+extern int  addr24_operand\t\t\tXPROTO((Rtx, enum machine_mode));\n+extern int  addr32_operand\t\t\tXPROTO((Rtx, enum machine_mode));\n+extern int  call26_operand\t\t\tXPROTO((Rtx, enum machine_mode));\n+extern int  seth_add3_operand\t\t\tXPROTO((Rtx, enum machine_mode));\n+extern int  cmp_int16_operand\t\t\tXPROTO((Rtx, enum machine_mode));\n+extern int  uint16_operand\t\t\tXPROTO((Rtx, enum machine_mode));\n+extern int  reg_or_int16_operand\t\tXPROTO((Rtx, enum machine_mode));\n+extern int  reg_or_uint16_operand\t\tXPROTO((Rtx, enum machine_mode));\n+extern int  reg_or_cmp_nt16_operand\t\tXPROTO((Rtx, enum machine_mode));\n+extern int  two_insn_const_operand\t\tXPROTO((Rtx, enum machine_mode));\n+extern int  move_src_operand\t\t\tXPROTO((Rtx, enum machine_mode));\n+extern int  move_double_src_operand\t\tXPROTO((Rtx, enum machine_mode));\n+extern int  move_dest_operand\t\t\tXPROTO((Rtx, enum machine_mode));\n+extern int  easy_di_const\t\t\tXPROTO((Rtx));\n+extern int  easy_df_const\t\t\tXPROTO((Rtx));\n+extern int  eqne_comparison_operator\t\tXPROTO((Rtx, enum machine_mode));\n+extern int  signed_comparison_operator\t\tXPROTO((Rtx, enum machine_mode));\n+extern int  memreg_operand\t\t\tXPROTO((Rtx, enum machine_mode));\n+extern int  small_insn_p\t\t\tXPROTO((Rtx, enum machine_mode));\n+extern int  large_insn_p\t\t\tXPROTO((Rtx, enum machine_mode));\n+extern int  m32r_select_cc_mode\t\t\tXPROTO((int, Rtx, Rtx));\n+extern Rtx  gen_compare\t\t\t\tXPROTO((int, Rtx, Rtx, int));\n+extern Rtx  gen_split_move_double\t\tXPROTO((Rtx *));\n+extern int  function_arg_partial_nregs\t\tXPROTO((CUMULATIVE_ARGS *,\n \t\t\t\t\t\t       int, Tree, int));\n-extern void m32r_setup_incoming_varargs\t\tPROTO((CUMULATIVE_ARGS *,\n+extern void m32r_setup_incoming_varargs\t\tXPROTO((CUMULATIVE_ARGS *,\n \t\t\t\t\t\t       int, Tree, int *,\n \t\t\t\t\t\t       int));\n-extern struct rtx_def *m32r_va_arg\t\tPROTO((Tree, Tree));\n-extern int  m32r_address_code\t\t\tPROTO((Rtx));\n+extern struct rtx_def *m32r_va_arg\t\tXPROTO((Tree, Tree));\n+extern int  m32r_address_code\t\t\tXPROTO((Rtx));\n extern enum m32r_function_type m32r_compute_function_type\n-\t\t\t\t\t\tPROTO((Tree));\n-extern unsigned m32r_compute_frame_size\t\tPROTO((int));\n-extern int  m32r_first_insn_address\t\tPROTO((void));\n-extern void m32r_expand_prologue\t\tPROTO((void));\n-extern void m32r_output_function_prologue\tSTDIO_PROTO((FILE *, int));\n-extern void m32r_output_function_epilogue\tSTDIO_PROTO((FILE *, int));\n-extern void m32r_finalize_pic\t\t\tPROTO((void));\n-extern void m32r_initialize_trampoline\t\tPROTO((Rtx, Rtx, Rtx));\n-extern void m32r_asm_file_start\t\t\tSTDIO_PROTO((FILE *));\n-extern void m32r_print_operand\t\t\tSTDIO_PROTO((FILE *, Rtx, int));\n-extern void m32r_print_operand_address\t\tSTDIO_PROTO((FILE *, Rtx));\n-extern int  zero_and_one\t\t\tPROTO((Rtx, Rtx));\n-extern int  conditional_move_operand\t\tPROTO((Rtx, int));\n-extern int  carry_compare_operand\t\tPROTO((Rtx, int));\n-extern char *emit_cond_move\t\t\tPROTO((Rtx *, Rtx));\n-\n-extern char * m32r_output_block_move PROTO((Rtx, Rtx *));\n-extern int    m32r_block_immediate_operand PROTO((Rtx, int));\n-extern void   m32r_expand_block_move PROTO((Rtx *));\n+\t\t\t\t\t\tXPROTO((Tree));\n+extern unsigned m32r_compute_frame_size\t\tXPROTO((int));\n+extern int  m32r_first_insn_address\t\tXPROTO((void));\n+extern void m32r_expand_prologue\t\tXPROTO((void));\n+extern void m32r_output_function_prologue\tSTDIO_XPROTO((FILE *, int));\n+extern void m32r_output_function_epilogue\tSTDIO_XPROTO((FILE *, int));\n+extern void m32r_finalize_pic\t\t\tXPROTO((void));\n+extern void m32r_initialize_trampoline\t\tXPROTO((Rtx, Rtx, Rtx));\n+extern void m32r_asm_file_start\t\t\tSTDIO_XPROTO((FILE *));\n+extern void m32r_print_operand\t\t\tSTDIO_XPROTO((FILE *, Rtx, int));\n+extern void m32r_print_operand_address\t\tSTDIO_XPROTO((FILE *, Rtx));\n+extern int  zero_and_one\t\t\tXPROTO((Rtx, Rtx));\n+extern int  conditional_move_operand\t\tXPROTO((Rtx, enum machine_mode));\n+extern int  carry_compare_operand\t\tXPROTO((Rtx, enum machine_mode));\n+extern char *emit_cond_move\t\t\tXPROTO((Rtx *, Rtx));\n+\n+extern char * m32r_output_block_move XPROTO((Rtx, Rtx *));\n+extern int    m32r_block_immediate_operand XPROTO((Rtx, enum machine_mode));\n+extern void   m32r_expand_block_move XPROTO((Rtx *));\n+\n+#undef XPROTO\n+#undef STDIO_XPROTO"}, {"sha": "bc01b2aa36caa2d57493acc157900ff23aec4a34", "filename": "gcc/config/m32r/m32r.md", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f3b78faaae0427c00787e84aff39bea510d649/gcc%2Fconfig%2Fm32r%2Fm32r.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f3b78faaae0427c00787e84aff39bea510d649/gcc%2Fconfig%2Fm32r%2Fm32r.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.md?ref=61f3b78faaae0427c00787e84aff39bea510d649", "patch": "@@ -388,7 +388,7 @@\n \t   && (GET_CODE (operands[1]) == REG || GET_CODE (operands[1]) == SUBREG))\n     return \\\"st %1,%0\\\";\n \n-  fatal_insn (\\\"bad movsi insn\\\", insn);\n+  abort ();\n }\"\n   [(set_attr \"type\" \"int2,int2,int4,int4,int4,multi,load2,load2,load4,store2,store2,store4\")\n    (set_attr \"length\" \"2,2,4,4,4,8,2,2,4,2,2,4\")])\n@@ -1418,6 +1418,8 @@\n       case GT : br = \\\"gt\\\"; invbr = \\\"le\\\"; break;\n       case LT : br = \\\"lt\\\"; invbr = \\\"ge\\\"; break;\n       case GE : br = \\\"ge\\\"; invbr = \\\"lt\\\"; break;\n+\n+      default: abort();\n     }\n \n   /* Is branch target reachable with bxxz?  */\n@@ -1463,6 +1465,8 @@\n       case GT : br = \\\"gt\\\"; invbr = \\\"le\\\"; break;\n       case LT : br = \\\"lt\\\"; invbr = \\\"ge\\\"; break;\n       case GE : br = \\\"ge\\\"; invbr = \\\"lt\\\"; break;\n+\n+      default: abort();\n     }\n \n   /* Is branch target reachable with bxxz?  */"}]}