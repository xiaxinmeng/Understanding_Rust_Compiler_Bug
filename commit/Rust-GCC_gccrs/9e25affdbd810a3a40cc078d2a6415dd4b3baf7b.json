{"sha": "9e25affdbd810a3a40cc078d2a6415dd4b3baf7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUyNWFmZmRiZDgxMGEzYTQwY2MwNzhkMmE2NDE1ZGQ0YjNiYWY3Yg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-10-09T15:05:54Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-10-09T15:05:54Z"}, "message": "[Ada] Unnesting: fix handling of uplevel refs to unconstrained formals\n\n2018-10-09  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* exp_unst.adb (Unnest_Subprogram):  When an uplevel reference\n\tis to an unconstrained formal, the 'Access reference that is\n\tcreated to initialize the corresponding component of the\n\tactivation record must be wrapped in an unchecked conversion to\n\tthe generated type of the component. Otherwise, spurious suvtype\n\tconformance errors will be generated when the code is within an\n\tinstantiation and the type of the formal is a formal type of the\n\tenclosing generic. Note that during unnesting there is no simple\n\tway to determine that the code appears within an instance\n\tbecause ther is no scope stack.\n\nFrom-SVN: r264972", "tree": {"sha": "8b64558b73f55937d04eda63da4104cf938c0623", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b64558b73f55937d04eda63da4104cf938c0623"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e25affdbd810a3a40cc078d2a6415dd4b3baf7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e25affdbd810a3a40cc078d2a6415dd4b3baf7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e25affdbd810a3a40cc078d2a6415dd4b3baf7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e25affdbd810a3a40cc078d2a6415dd4b3baf7b/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8dcefdc00380da344956659fdb05d9b9e1aa1c8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dcefdc00380da344956659fdb05d9b9e1aa1c8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dcefdc00380da344956659fdb05d9b9e1aa1c8c"}], "stats": {"total": 48, "additions": 42, "deletions": 6}, "files": [{"sha": "f95316d554dbbb9827e9f26c65ded45ebedba963", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e25affdbd810a3a40cc078d2a6415dd4b3baf7b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e25affdbd810a3a40cc078d2a6415dd4b3baf7b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9e25affdbd810a3a40cc078d2a6415dd4b3baf7b", "patch": "@@ -1,3 +1,16 @@\n+2018-10-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_unst.adb (Unnest_Subprogram):  When an uplevel reference\n+\tis to an unconstrained formal, the 'Access reference that is\n+\tcreated to initialize the corresponding component of the\n+\tactivation record must be wrapped in an unchecked conversion to\n+\tthe generated type of the component. Otherwise, spurious suvtype\n+\tconformance errors will be generated when the code is within an\n+\tinstantiation and the type of the formal is a formal type of the\n+\tenclosing generic. Note that during unnesting there is no simple\n+\tway to determine that the code appears within an instance\n+\tbecause ther is no scope stack.\n+\n 2018-10-09  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (type_requires_init_of_formal): New"}, {"sha": "8176fccfec2fb20d9e716fae35fbf0e3aad658b2", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e25affdbd810a3a40cc078d2a6415dd4b3baf7b/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e25affdbd810a3a40cc078d2a6415dd4b3baf7b/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=9e25affdbd810a3a40cc078d2a6415dd4b3baf7b", "patch": "@@ -1966,7 +1966,9 @@ package body Exp_Unst is\n \n                                  Asn  : Node_Id;\n                                  Attr : Name_Id;\n+                                 Comp : Entity_Id;\n                                  Ins  : Node_Id;\n+                                 Rhs  : Node_Id;\n \n                               begin\n                                  --  For parameters, we insert the assignment\n@@ -2001,6 +2003,32 @@ package body Exp_Unst is\n                                     Attr := Name_Address;\n                                  end if;\n \n+                                 Rhs :=  Make_Attribute_Reference (Loc,\n+                                         Prefix         =>\n+                                           New_Occurrence_Of (Ent, Loc),\n+                                         Attribute_Name => Attr);\n+\n+                                 --  If the entity is an unconstrained formal\n+                                 --  we wrap the attribute reference in an\n+                                 --  unchecked conversion to the type of the\n+                                 --  activation record component, to prevent\n+                                 --  spurious subtype conformance errors within\n+                                 --  instances.\n+\n+                                 if Is_Formal (Ent)\n+                                   and then not Is_Constrained (Etype (Ent))\n+                                 then\n+                                    --  Find target component and its type.\n+\n+                                    Comp := First_Component (STJ.ARECnT);\n+                                    while Chars (Comp) /= Chars (Ent) loop\n+                                       Comp := Next_Component (Comp);\n+                                    end loop;\n+\n+                                    Rhs := Unchecked_Convert_To (\n+                                              Etype (Comp), Rhs);\n+                                 end if;\n+\n                                  Asn :=\n                                    Make_Assignment_Statement (Loc,\n                                      Name       =>\n@@ -2012,12 +2040,7 @@ package body Exp_Unst is\n                                              (Activation_Record_Component\n                                                 (Ent),\n                                               Loc)),\n-\n-                                     Expression =>\n-                                       Make_Attribute_Reference (Loc,\n-                                         Prefix         =>\n-                                           New_Occurrence_Of (Ent, Loc),\n-                                         Attribute_Name => Attr));\n+                                     Expression => Rhs);\n \n                                  --  If we have a loop parameter, we have\n                                  --  to insert before the first statement"}]}