{"sha": "43427f3c581470449ed62ebaebeabe6a49c94e6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM0MjdmM2M1ODE0NzA0NDllZDYyZWJhZWJlYWJlNmE0OWM5NGU2Zg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-11-02T15:46:46Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-11-02T15:46:46Z"}, "message": "re PR tree-optimization/46184 (ICE: SIGSEGV in vectorizable_reduction (tree-vect-loop.c:4067) with -O -ftree-vectorize -fno-tree-copy-prop -fno-tree-dce)\n\n2010-11-02  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/46184\n\t* tree-vect-loop.c (vectorizable_reduction): Try to obtain the\n\tinput vector type from the reduction operand as well.\n\n\t* gcc.dg/pr46184.c: New testcase.\n\nFrom-SVN: r166194", "tree": {"sha": "4bf25db32c0a793b3c50814ec81909468ef7fe23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bf25db32c0a793b3c50814ec81909468ef7fe23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43427f3c581470449ed62ebaebeabe6a49c94e6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43427f3c581470449ed62ebaebeabe6a49c94e6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43427f3c581470449ed62ebaebeabe6a49c94e6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43427f3c581470449ed62ebaebeabe6a49c94e6f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1bbd3bdee61544ce2824befa54c9a309ecac3905", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bbd3bdee61544ce2824befa54c9a309ecac3905", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bbd3bdee61544ce2824befa54c9a309ecac3905"}], "stats": {"total": 39, "additions": 34, "deletions": 5}, "files": [{"sha": "b5d15ce51b620b24cfe030e4458cb019a95910dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43427f3c581470449ed62ebaebeabe6a49c94e6f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43427f3c581470449ed62ebaebeabe6a49c94e6f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43427f3c581470449ed62ebaebeabe6a49c94e6f", "patch": "@@ -1,3 +1,9 @@\n+2010-11-02  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/46184\n+\t* tree-vect-loop.c (vectorizable_reduction): Try to obtain the\n+\tinput vector type from the reduction operand as well.\n+\n 2010-11-02  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/46177"}, {"sha": "d1af15437c835d2a2b5d0cfbcbf896918443ff7f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43427f3c581470449ed62ebaebeabe6a49c94e6f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43427f3c581470449ed62ebaebeabe6a49c94e6f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=43427f3c581470449ed62ebaebeabe6a49c94e6f", "patch": "@@ -1,3 +1,8 @@\n+2010-11-02  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/46184\n+\t* gcc.dg/pr46184.c: New testcase.\n+\n 2010-11-02  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/46177"}, {"sha": "fafa7f463d91c4f3a59b332fc4a7c25ccc92636a", "filename": "gcc/testsuite/gcc.dg/pr46184.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43427f3c581470449ed62ebaebeabe6a49c94e6f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr46184.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43427f3c581470449ed62ebaebeabe6a49c94e6f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr46184.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr46184.c?ref=43427f3c581470449ed62ebaebeabe6a49c94e6f", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -ftree-vectorize -fno-tree-copy-prop -fno-tree-dce\" } */\n+\n+extern int A[], B[];\n+\n+void\n+foo (int z)\n+{\n+  int j, i;\n+  for (j = 0; j < 32; j++)\n+    {\n+      int curr_a = A[0];\n+      for (i = 0; i < 16; i++)\n+\tcurr_a = A[i] ? curr_a : z;\n+      B[j] = curr_a;\n+    }\n+}\n+"}, {"sha": "57ca5a8c4c46df52c77bfd446f33866aca79578a", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43427f3c581470449ed62ebaebeabe6a49c94e6f/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43427f3c581470449ed62ebaebeabe6a49c94e6f/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=43427f3c581470449ed62ebaebeabe6a49c94e6f", "patch": "@@ -3908,7 +3908,7 @@ vectorizable_reduction (gimple stmt, gimple_stmt_iterator *gsi,\n   VEC (tree, heap) *vec_oprnds0 = NULL, *vec_oprnds1 = NULL, *vect_defs = NULL;\n   VEC (gimple, heap) *phis = NULL;\n   int vec_num;\n-  tree def0, def1;\n+  tree def0, def1, tem;\n \n   if (nested_in_vect_loop_p (loop, stmt))\n     {\n@@ -3999,8 +3999,6 @@ vectorizable_reduction (gimple stmt, gimple_stmt_iterator *gsi,\n      reduction variable.  */\n   for (i = 0; i < op_type-1; i++)\n     {\n-      tree tem;\n-\n       /* The condition of COND_EXPR is checked in vectorizable_condition().  */\n       if (i == 0 && code == COND_EXPR)\n         continue;\n@@ -4025,8 +4023,10 @@ vectorizable_reduction (gimple stmt, gimple_stmt_iterator *gsi,\n         }\n     }\n \n-  is_simple_use = vect_is_simple_use (ops[i], loop_vinfo, NULL, &def_stmt,\n-\t\t\t\t      &def, &dt);\n+  is_simple_use = vect_is_simple_use_1 (ops[i], loop_vinfo, NULL, &def_stmt,\n+\t\t\t\t\t&def, &dt, &tem);\n+  if (!vectype_in)\n+    vectype_in = tem;\n   gcc_assert (is_simple_use);\n   gcc_assert (dt == vect_reduction_def\n               || dt == vect_nested_cycle"}]}