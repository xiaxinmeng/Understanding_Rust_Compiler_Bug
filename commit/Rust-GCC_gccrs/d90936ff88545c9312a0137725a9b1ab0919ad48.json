{"sha": "d90936ff88545c9312a0137725a9b1ab0919ad48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkwOTM2ZmY4ODU0NWM5MzEyYTAxMzc3MjVhOWIxYWIwOTE5YWQ0OA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-04-12T22:20:30Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-04-12T22:20:30Z"}, "message": "reflect: change Value.Call results to not be addressable\n    \n    Leaving them incorrectly marked as addressable broke a use of the\n    text/template package, because state.evalField checks CanAddr and takes\n    the address if it is addressable.\n    \n    Reviewed-on: https://go-review.googlesource.com/21908\n\nFrom-SVN: r234923", "tree": {"sha": "28a9c3f2597188d84f187d5dd61f59b16d9a9a40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28a9c3f2597188d84f187d5dd61f59b16d9a9a40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d90936ff88545c9312a0137725a9b1ab0919ad48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d90936ff88545c9312a0137725a9b1ab0919ad48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d90936ff88545c9312a0137725a9b1ab0919ad48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d90936ff88545c9312a0137725a9b1ab0919ad48/comments", "author": null, "committer": null, "parents": [{"sha": "8a434ada27c0dfd6f3e8dcdb9bb2e806f14cec99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a434ada27c0dfd6f3e8dcdb9bb2e806f14cec99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a434ada27c0dfd6f3e8dcdb9bb2e806f14cec99"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "cc386134d146be8d1fe86b10a0a87bfc0567e8e5", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d90936ff88545c9312a0137725a9b1ab0919ad48/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d90936ff88545c9312a0137725a9b1ab0919ad48/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=d90936ff88545c9312a0137725a9b1ab0919ad48", "patch": "@@ -1,4 +1,4 @@\n-8edf085a94579bd819a10f50328233812ceeb950\n+8e7b5e777333fa4cd070d96e94ea82e3e1132739\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "b8e7cd883cb351212eaac89ca027fbdbf89221a2", "filename": "libgo/go/reflect/all_test.go", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d90936ff88545c9312a0137725a9b1ab0919ad48/libgo%2Fgo%2Freflect%2Fall_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d90936ff88545c9312a0137725a9b1ab0919ad48/libgo%2Fgo%2Freflect%2Fall_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Fall_test.go?ref=d90936ff88545c9312a0137725a9b1ab0919ad48", "patch": "@@ -1478,6 +1478,12 @@ func TestFunc(t *testing.T) {\n \tif i != 10 || j != 20 || k != 30 || l != (two{40, 50}) || m != 60 || n != 70 || o != 80 {\n \t\tt.Errorf(\"Call returned %d, %d, %d, %v, %d, %g, %d; want 10, 20, 30, [40, 50], 60, 70, 80\", i, j, k, l, m, n, o)\n \t}\n+\n+\tfor i, v := range ret {\n+\t\tif v.CanAddr() {\n+\t\t\tt.Errorf(\"result %d is addressable\", i)\n+\t\t}\n+\t}\n }\n \n type emptyStruct struct{}"}, {"sha": "75944a6e53200e0fc93c123fb31512dc174f6bf0", "filename": "libgo/go/reflect/value.go", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d90936ff88545c9312a0137725a9b1ab0919ad48/libgo%2Fgo%2Freflect%2Fvalue.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d90936ff88545c9312a0137725a9b1ab0919ad48/libgo%2Fgo%2Freflect%2Fvalue.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Fvalue.go?ref=d90936ff88545c9312a0137725a9b1ab0919ad48", "patch": "@@ -433,9 +433,11 @@ func (v Value) call(op string, in []Value) []Value {\n \tret := make([]Value, nout)\n \tresults := make([]unsafe.Pointer, nout)\n \tfor i := 0; i < nout; i++ {\n-\t\tv := New(t.Out(i))\n-\t\tresults[i] = unsafe.Pointer(v.Pointer())\n-\t\tret[i] = Indirect(v)\n+\t\ttv := t.Out(i)\n+\t\tv := New(tv)\n+\t\tresults[i] = v.pointer()\n+\t\tfl := flagIndir | flag(tv.Kind())\n+\t\tret[i] = Value{tv.common(), v.pointer(), fl}\n \t}\n \n \tvar pp *unsafe.Pointer"}]}