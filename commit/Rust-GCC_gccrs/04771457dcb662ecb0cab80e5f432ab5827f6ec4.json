{"sha": "04771457dcb662ecb0cab80e5f432ab5827f6ec4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ3NzE0NTdkY2I2NjJlY2IwY2FiODBlNWY0MzJhYjU4MjdmNmVjNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-01-13T20:06:16Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-01-13T20:06:16Z"}, "message": "re PR c++/20681 (wrong \"control reaches\" warning with switches)\n\n\tPR c++/20681\n\t* semantics.c (finish_break_stmt): Avoid adding an unreachable\n\tBREAK_STMT.\n\nFrom-SVN: r183161", "tree": {"sha": "3e15f4b6fdfe49b7438c83f0c5f3a9692ed108f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e15f4b6fdfe49b7438c83f0c5f3a9692ed108f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04771457dcb662ecb0cab80e5f432ab5827f6ec4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04771457dcb662ecb0cab80e5f432ab5827f6ec4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04771457dcb662ecb0cab80e5f432ab5827f6ec4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04771457dcb662ecb0cab80e5f432ab5827f6ec4/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "07dee0c66afe5a3fef740f170176110f0479be4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07dee0c66afe5a3fef740f170176110f0479be4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07dee0c66afe5a3fef740f170176110f0479be4c"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "e88d64ee3037aca9001a0ef9c34b685e16f5160d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04771457dcb662ecb0cab80e5f432ab5827f6ec4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04771457dcb662ecb0cab80e5f432ab5827f6ec4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=04771457dcb662ecb0cab80e5f432ab5827f6ec4", "patch": "@@ -1,5 +1,9 @@\n 2012-01-13  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/20681\n+\t* semantics.c (finish_break_stmt): Avoid adding an unreachable\n+\tBREAK_STMT.\n+\n \tPR c++/51813\n \t* decl2.c (constrain_visibility): Clear DECL_VISIBILITY_SPECIFIED\n \twhen reducing the visibility."}, {"sha": "8c976ebb5bac5b15146c09b485ed69213035bbf8", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04771457dcb662ecb0cab80e5f432ab5827f6ec4/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04771457dcb662ecb0cab80e5f432ab5827f6ec4/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=04771457dcb662ecb0cab80e5f432ab5827f6ec4", "patch": "@@ -995,6 +995,15 @@ finish_range_for_decl (tree range_for_stmt, tree decl, tree expr)\n tree\n finish_break_stmt (void)\n {\n+  /* In switch statements break is sometimes stylistically used after\n+     a return statement.  This can lead to spurious warnings about\n+     control reaching the end of a non-void function when it is\n+     inlined.  Note that we are calling block_may_fallthru with\n+     language specific tree nodes; this works because\n+     block_may_fallthru returns true when given something it does not\n+     understand.  */\n+  if (!block_may_fallthru (cur_stmt_list))\n+    return void_zero_node;\n   return add_stmt (build_stmt (input_location, BREAK_STMT));\n }\n "}, {"sha": "a007b2320741e21d4b4c70cdcd570b0373ea3ec9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04771457dcb662ecb0cab80e5f432ab5827f6ec4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04771457dcb662ecb0cab80e5f432ab5827f6ec4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=04771457dcb662ecb0cab80e5f432ab5827f6ec4", "patch": "@@ -1,3 +1,8 @@\n+2012-01-13  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/20681\n+\t* g++.dg/warn/Wreturn-type-7.C: New.\n+\n 2012-01-13  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* gcc.c-torture/execute/20120111-1.c: Fix wrong int = int32_t"}, {"sha": "62e34a519590408276d8c8b0cbd5922e8227ed56", "filename": "gcc/testsuite/g++.dg/warn/Wreturn-type-7.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04771457dcb662ecb0cab80e5f432ab5827f6ec4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreturn-type-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04771457dcb662ecb0cab80e5f432ab5827f6ec4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreturn-type-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreturn-type-7.C?ref=04771457dcb662ecb0cab80e5f432ab5827f6ec4", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/20681\n+// { dg-options -Wreturn-type }\n+\n+struct a{~a();a();};\n+int GetMetaCombination (int a2)\n+{\n+  a bi;\n+  switch (a2)\n+  {\n+    case 1:\n+      return 18;\n+      break;//removing this works around the warning\n+    default:\n+      return 0;\n+  }\n+}"}]}