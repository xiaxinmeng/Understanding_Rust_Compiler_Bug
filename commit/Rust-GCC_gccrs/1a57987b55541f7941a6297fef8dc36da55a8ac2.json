{"sha": "1a57987b55541f7941a6297fef8dc36da55a8ac2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE1Nzk4N2I1NTU0MWY3OTQxYTYyOTdmZWY4ZGMzNmRhNTVhOGFjMg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-07-12T23:53:13Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-07-12T23:53:13Z"}, "message": "cp-tree.h (get_aggr_typedef): Remove.\n\n\t* cp-tree.h (get_aggr_typedef): Remove.\n\t* init.c (get_aggr_typedef): Likewise.\n\nFrom-SVN: r84588", "tree": {"sha": "5d148107c946becfe64bee7142deceefe67c6ad7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d148107c946becfe64bee7142deceefe67c6ad7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a57987b55541f7941a6297fef8dc36da55a8ac2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a57987b55541f7941a6297fef8dc36da55a8ac2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a57987b55541f7941a6297fef8dc36da55a8ac2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a57987b55541f7941a6297fef8dc36da55a8ac2/comments", "author": null, "committer": null, "parents": [{"sha": "812424036177ad5ed0d460195525494a1cfdcc17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/812424036177ad5ed0d460195525494a1cfdcc17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/812424036177ad5ed0d460195525494a1cfdcc17"}], "stats": {"total": 34, "additions": 3, "deletions": 31}, "files": [{"sha": "b94b245d5e9a22cda6e5e92c7abc81ba101d369b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a57987b55541f7941a6297fef8dc36da55a8ac2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a57987b55541f7941a6297fef8dc36da55a8ac2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1a57987b55541f7941a6297fef8dc36da55a8ac2", "patch": "@@ -1,5 +1,8 @@\n 2004-07-12  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* cp-tree.h (get_aggr_typedef): Remove.\n+\t* init.c (get_aggr_typedef): Likewise.\n+\n \t* name-lookup.c (push_class_level_binding): Simplify.\n \n 2004-07-12  Andrew Pinski  <apinski@apple.com>"}, {"sha": "3311bc037971fa315477d3a1aa26507ed3f33b3c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a57987b55541f7941a6297fef8dc36da55a8ac2/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a57987b55541f7941a6297fef8dc36da55a8ac2/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1a57987b55541f7941a6297fef8dc36da55a8ac2", "patch": "@@ -3860,7 +3860,6 @@ extern void emit_mem_initializers\t\t(tree);\n extern tree build_aggr_init\t\t\t(tree, tree, int);\n extern tree build_init\t\t\t\t(tree, tree, int);\n extern int is_aggr_type\t\t\t\t(tree, int);\n-extern tree get_aggr_from_typedef\t\t(tree, int);\n extern tree get_type_value\t\t\t(tree);\n extern tree build_zero_init       \t\t(tree, tree, bool);\n extern tree build_offset_ref\t\t\t(tree, tree, bool);"}, {"sha": "0fa2365e585455ae45877b9473d944c798874aa4", "filename": "gcc/cp/init.c", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a57987b55541f7941a6297fef8dc36da55a8ac2/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a57987b55541f7941a6297fef8dc36da55a8ac2/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=1a57987b55541f7941a6297fef8dc36da55a8ac2", "patch": "@@ -1299,36 +1299,6 @@ is_aggr_type (tree type, int or_else)\n   return 1;\n }\n \n-/* Like is_aggr_typedef, but returns typedef if successful.  */\n-\n-tree\n-get_aggr_from_typedef (tree name, int or_else)\n-{\n-  tree type;\n-\n-  if (name == error_mark_node)\n-    return NULL_TREE;\n-\n-  if (IDENTIFIER_HAS_TYPE_VALUE (name))\n-    type = IDENTIFIER_TYPE_VALUE (name);\n-  else\n-    {\n-      if (or_else)\n-\terror (\"`%T' fails to be an aggregate typedef\", name);\n-      return NULL_TREE;\n-    }\n-\n-  if (! IS_AGGR_TYPE (type)\n-      && TREE_CODE (type) != TEMPLATE_TYPE_PARM\n-      && TREE_CODE (type) != BOUND_TEMPLATE_TEMPLATE_PARM)\n-    {\n-      if (or_else)\n-\terror (\"type `%T' is of non-aggregate type\", type);\n-      return NULL_TREE;\n-    }\n-  return type;\n-}\n-\n tree\n get_type_value (tree name)\n {"}]}