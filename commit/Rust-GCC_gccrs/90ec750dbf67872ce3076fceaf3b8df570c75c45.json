{"sha": "90ec750dbf67872ce3076fceaf3b8df570c75c45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBlYzc1MGRiZjY3ODcyY2UzMDc2ZmNlYWYzYjhkZjU3MGM3NWM0NQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2005-03-21T03:30:08Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2005-03-21T03:30:08Z"}, "message": "re PR middle-end/20539 (ICE in simplify_subreg, at simplify-rtx.c:3674)\n\n\n\tPR middle-end/20539\n\t* fold-const.c (fold_binary): Fix type mismatch between\n\tTRUTH_{AND,OR,XOR}_EXPR nodes an their operands' types.\n\t(fold_binary) <TRUTH_XOR_EXPR>: Avoid calling invert_truthvalue\n\tfor non-truth-valued expressions.\n\n\t* c-common.c (c_common_truthvalue_conversion): Handle ERROR_MARK\n\tand FUNCTION_DECL in the main switch.\n\t<TRUTH_ANDIF_EXPR, TRUTH_ORIF_EXPR, TRUTH_AND_EXPR, TRUTH_OR_EXPR,\n\tTRUTH_XOR_EXPR>: When changing the result type of these tree nodes,\n\twe also need to convert their operands to match.\n\t<TRUTH_NOT_EXPR>: Likewise.\n\n\t* gcc.c-torture/compile/pr13066-1.c: New test case.\n\t* gcc.c-torture/compile/pr20539-1.c: Likewise.\n\t* g++.dg/opt/pr13066-1.C: Likewise.\n\nFrom-SVN: r96777", "tree": {"sha": "64a437ac2c7bf9dae4641ceb3ef591d6abc0a7e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64a437ac2c7bf9dae4641ceb3ef591d6abc0a7e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90ec750dbf67872ce3076fceaf3b8df570c75c45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90ec750dbf67872ce3076fceaf3b8df570c75c45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90ec750dbf67872ce3076fceaf3b8df570c75c45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90ec750dbf67872ce3076fceaf3b8df570c75c45/comments", "author": null, "committer": null, "parents": [{"sha": "37dc0d8dc7248b0495b56a26ca436f3980271587", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37dc0d8dc7248b0495b56a26ca436f3980271587", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37dc0d8dc7248b0495b56a26ca436f3980271587"}], "stats": {"total": 110, "additions": 93, "deletions": 17}, "files": [{"sha": "cf4a6c92cbd658df4ffea0c8d39b0d3264e926bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ec750dbf67872ce3076fceaf3b8df570c75c45/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ec750dbf67872ce3076fceaf3b8df570c75c45/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=90ec750dbf67872ce3076fceaf3b8df570c75c45", "patch": "@@ -1,3 +1,18 @@\n+2005-03-20  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/20539\n+\t* fold-const.c (fold_binary): Fix type mismatch between\n+\tTRUTH_{AND,OR,XOR}_EXPR nodes an their operands' types.\n+\t(fold_binary) <TRUTH_XOR_EXPR>: Avoid calling invert_truthvalue\n+\tfor non-truth-valued expressions.\n+\n+\t* c-common.c (c_common_truthvalue_conversion): Handle ERROR_MARK\n+\tand FUNCTION_DECL in the main switch.\n+\t<TRUTH_ANDIF_EXPR, TRUTH_ORIF_EXPR, TRUTH_AND_EXPR, TRUTH_OR_EXPR,\n+\tTRUTH_XOR_EXPR>: When changing the result type of these tree nodes,\n+\twe also need to convert their operands to match.\n+\t<TRUTH_NOT_EXPR>: Likewise.\n+\n 2005-03-21  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* c-common.c (lvalue_or_else): Replace by lvalue_error; only give"}, {"sha": "a18520d9e0d70fd9e21b765218ba0fb43a05c578", "filename": "gcc/c-common.c", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ec750dbf67872ce3076fceaf3b8df570c75c45/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ec750dbf67872ce3076fceaf3b8df570c75c45/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=90ec750dbf67872ce3076fceaf3b8df570c75c45", "patch": "@@ -2327,33 +2327,33 @@ pointer_int_sum (enum tree_code resultcode, tree ptrop, tree intop)\n tree\n c_common_truthvalue_conversion (tree expr)\n {\n-  if (TREE_CODE (expr) == ERROR_MARK)\n-    return expr;\n-\n-  if (TREE_CODE (expr) == FUNCTION_DECL)\n-    expr = build_unary_op (ADDR_EXPR, expr, 0);\n-\n   switch (TREE_CODE (expr))\n     {\n     case EQ_EXPR:   case NE_EXPR:   case UNEQ_EXPR: case LTGT_EXPR:\n     case LE_EXPR:   case GE_EXPR:   case LT_EXPR:   case GT_EXPR:\n     case UNLE_EXPR: case UNGE_EXPR: case UNLT_EXPR: case UNGT_EXPR:\n     case ORDERED_EXPR: case UNORDERED_EXPR:\n+      if (TREE_TYPE (expr) == truthvalue_type_node)\n+\treturn expr;\n+      return build2 (TREE_CODE (expr), truthvalue_type_node,\n+\t\t     TREE_OPERAND (expr, 0), TREE_OPERAND (expr, 1));\n+\n     case TRUTH_ANDIF_EXPR:\n     case TRUTH_ORIF_EXPR:\n     case TRUTH_AND_EXPR:\n     case TRUTH_OR_EXPR:\n     case TRUTH_XOR_EXPR:\n-      if (TREE_TYPE (expr) != truthvalue_type_node)\n-\treturn build2 (TREE_CODE (expr), truthvalue_type_node,\n-\t\t       TREE_OPERAND (expr, 0), TREE_OPERAND (expr, 1));\n-      return expr;\n+      if (TREE_TYPE (expr) == truthvalue_type_node)\n+\treturn expr;\n+      return build2 (TREE_CODE (expr), truthvalue_type_node,\n+\t\t lang_hooks.truthvalue_conversion (TREE_OPERAND (expr, 0)),\n+\t\t lang_hooks.truthvalue_conversion (TREE_OPERAND (expr, 1)));\n \n     case TRUTH_NOT_EXPR:\n-      if (TREE_TYPE (expr) != truthvalue_type_node)\n-\treturn build1 (TREE_CODE (expr), truthvalue_type_node,\n-\t\t       TREE_OPERAND (expr, 0));\n-      return expr;\n+      if (TREE_TYPE (expr) == truthvalue_type_node)\n+\treturn expr;\n+      return build1 (TREE_CODE (expr), truthvalue_type_node,\n+\t\t lang_hooks.truthvalue_conversion (TREE_OPERAND (expr, 0)));\n \n     case ERROR_MARK:\n       return expr;\n@@ -2369,6 +2369,10 @@ c_common_truthvalue_conversion (tree expr)\n \t     ? truthvalue_true_node\n \t     : truthvalue_false_node;\n \n+    case FUNCTION_DECL:\n+      expr = build_unary_op (ADDR_EXPR, expr, 0);\n+      /* Fall through.  */\n+\n     case ADDR_EXPR:\n       {\n \tif (TREE_CODE (TREE_OPERAND (expr, 0)) == FUNCTION_DECL"}, {"sha": "848b167e9b7e48684067852216bd7de127cc8342", "filename": "gcc/fold-const.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ec750dbf67872ce3076fceaf3b8df570c75c45/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ec750dbf67872ce3076fceaf3b8df570c75c45/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=90ec750dbf67872ce3076fceaf3b8df570c75c45", "patch": "@@ -7159,13 +7159,14 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n       tem = fold (build2 (code == BIT_AND_EXPR ? TRUTH_AND_EXPR\n \t\t\t  : code == BIT_IOR_EXPR ? TRUTH_OR_EXPR\n \t\t\t  : TRUTH_XOR_EXPR,\n-\t\t\t  type, fold_convert (boolean_type_node, arg0),\n+\t\t\t  boolean_type_node,\n+\t\t\t  fold_convert (boolean_type_node, arg0),\n \t\t\t  fold_convert (boolean_type_node, arg1)));\n \n       if (code == EQ_EXPR)\n \ttem = invert_truthvalue (tem);\n \n-      return tem;\n+      return fold_convert (type, tem);\n     }\n \n   if (TREE_CODE_CLASS (code) == tcc_comparison\n@@ -8717,7 +8718,14 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \treturn non_lvalue (fold_convert (type, arg0));\n       /* If the second arg is constant true, this is a logical inversion.  */\n       if (integer_onep (arg1))\n-\treturn non_lvalue (fold_convert (type, invert_truthvalue (arg0)));\n+\t{\n+\t  /* Only call invert_truthvalue if operand is a truth value.  */\n+\t  if (TREE_CODE (TREE_TYPE (arg0)) != BOOLEAN_TYPE)\n+\t    tem = fold (build1 (TRUTH_NOT_EXPR, TREE_TYPE (arg0), arg0));\n+\t  else\n+\t    tem = invert_truthvalue (arg0);\n+\t  return non_lvalue (fold_convert (type, tem));\n+\t}\n       /* Identical arguments cancel to zero.  */\n       if (operand_equal_p (arg0, arg1, 0))\n \treturn omit_one_operand (type, integer_zero_node, arg0);"}, {"sha": "3f850f5d3e95a60950044685fd13db37562f5701", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ec750dbf67872ce3076fceaf3b8df570c75c45/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ec750dbf67872ce3076fceaf3b8df570c75c45/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=90ec750dbf67872ce3076fceaf3b8df570c75c45", "patch": "@@ -1,3 +1,10 @@\n+2005-03-20  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/20539\n+\t* gcc.c-torture/compile/pr13066-1.c: New test case.\n+\t* gcc.c-torture/compile/pr20539-1.c: Likewise.\n+\t* g++.dg/opt/pr13066-1.C: Likewise.\n+\n 2005-03-20  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/bitfld-14.c, gcc.dg/enum3.c: New tests."}, {"sha": "67f8534567633401122c3b68bcbd6e5d7cdcb9f2", "filename": "gcc/testsuite/g++.dg/opt/pr13066-1.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ec750dbf67872ce3076fceaf3b8df570c75c45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr13066-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ec750dbf67872ce3076fceaf3b8df570c75c45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr13066-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr13066-1.C?ref=90ec750dbf67872ce3076fceaf3b8df570c75c45", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+class nsIURI;\n+\n+struct nsCOMPtr\n+{\n+  operator nsIURI*() const\n+  {\n+    return mRawPtr;\n+  }\n+\n+  nsIURI *mRawPtr;\n+};\n+\n+void func()\n+{\n+  nsCOMPtr u1;\n+  if (!u1 == !u1)\n+    return;\n+}\n+"}, {"sha": "c2930f95df65ee1686ebefb8d06e154a4327ac37", "filename": "gcc/testsuite/gcc.c-torture/compile/pr13066-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ec750dbf67872ce3076fceaf3b8df570c75c45/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr13066-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ec750dbf67872ce3076fceaf3b8df570c75c45/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr13066-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr13066-1.c?ref=90ec750dbf67872ce3076fceaf3b8df570c75c45", "patch": "@@ -0,0 +1,10 @@\n+void *g, *c;\n+int a, b;\n+\n+int f()\n+{\n+  if ((0 == a) != (b || g == c))\n+    return 1;\n+  return 0;\n+}\n+"}, {"sha": "f67f06b881622a2f43b4c8cc73febb843a8cdbf6", "filename": "gcc/testsuite/gcc.c-torture/compile/pr20539-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ec750dbf67872ce3076fceaf3b8df570c75c45/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr20539-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ec750dbf67872ce3076fceaf3b8df570c75c45/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr20539-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr20539-1.c?ref=90ec750dbf67872ce3076fceaf3b8df570c75c45", "patch": "@@ -0,0 +1,10 @@\n+char l7_en;\n+long long l6_data_Z_0th;\n+int t;\n+void f()\n+{\n+  if (((char )(l6_data_Z_0th>>1 & 1U)) & ((l6_data_Z_0th & 1U)\n+     | !(((char )(l6_data_Z_0th>>35 & 15U))==14U)))\n+    t = 0ULL;\n+}\n+"}]}