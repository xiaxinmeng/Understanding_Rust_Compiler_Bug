{"sha": "6e80c4f1ad9046b0a7c105660cc7b3dcae0fdb8f", "node_id": "C_kwDOANBUbNoAKDZlODBjNGYxYWQ5MDQ2YjBhN2MxMDU2NjBjYzdiM2RjYWUwZmRiOGY", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-23T10:15:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-23T11:14:14Z"}, "message": "tree-optimization/101636 - CTOR vectorization ICE\n\nThe following fixes an ICE when vectorizing the defs of a CTOR\nresults in a different vector type than expected.  That can happen\nwith AARCH64 SVE and a fixed vector length as noted in r10-5979\nand on x86 with AVX512 mask CTORs and trying to re-vectorize\nusing SSE as shown in this bug.\n\nThe fix is simply to reject the vectorization when it didn't\nproduce the desired type.\n\n2022-02-23  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/101636\n\t* tree-vect-slp.cc (vect_print_slp_tree): Dump the\n\tvector type of the node.\n\t(vect_slp_analyze_operations): Make sure the CTOR\n\tis vectorized with an expected type.\n\t(vectorize_slp_instance_root_stmt): Revert r10-5979 fix.\n\n\t* gcc.target/i386/pr101636.c: New testcase.\n\t* c-c++-common/torture/pr101636.c: Likewise.", "tree": {"sha": "0b5090ba37907105ef5293e1ce630aa813f56e08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b5090ba37907105ef5293e1ce630aa813f56e08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e80c4f1ad9046b0a7c105660cc7b3dcae0fdb8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e80c4f1ad9046b0a7c105660cc7b3dcae0fdb8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e80c4f1ad9046b0a7c105660cc7b3dcae0fdb8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e80c4f1ad9046b0a7c105660cc7b3dcae0fdb8f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8cb5098c7854a1ed07e85c6165ef0c348d6df1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8cb5098c7854a1ed07e85c6165ef0c348d6df1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8cb5098c7854a1ed07e85c6165ef0c348d6df1d"}], "stats": {"total": 141, "additions": 135, "deletions": 6}, "files": [{"sha": "aedaa1fdcae6c5ca2a4e9f1779ed7280bfc9c282", "filename": "gcc/testsuite/c-c++-common/torture/pr101636.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e80c4f1ad9046b0a7c105660cc7b3dcae0fdb8f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fpr101636.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e80c4f1ad9046b0a7c105660cc7b3dcae0fdb8f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fpr101636.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fpr101636.c?ref=6e80c4f1ad9046b0a7c105660cc7b3dcae0fdb8f", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-ftree-vectorize -fno-vect-cost-model\" } */\n+/* { dg-additional-options \"-mavx512f\" { target x86_64-*-* i?86-*-* } } */\n+\n+static inline int\n+foo (int y, int a)\n+{\n+  return (y && a) ? a : 0;\n+}\n+\n+void\n+bar (int *__restrict a, int *__restrict d, int *__restrict e, int i)\n+{\n+  while (i < 1)\n+    {\n+      e[8] = e[7] = e[6] = e[5] = e[4] = e[3] = e[2] = e[1] = e[0]\n+        = foo (d[8], a[8]);\n+      e[9] = foo (d[9], a[9]);\n+      e[10] = foo (d[0], a[0]);\n+      e[11] = foo (d[1], a[1]);\n+      e[12] = foo (d[12], a[12]);\n+      e[13] = foo (d[13], a[13]);\n+      e[14] = foo (d[4], a[4]);\n+      e[15] = foo (d[15], a[15]);\n+\n+      a += 16;\n+      e += 1;\n+      i += 1;\n+    }\n+}"}, {"sha": "76399cc292767714fb474059cc3f7e53ffb3759e", "filename": "gcc/testsuite/gcc.target/i386/pr101636.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e80c4f1ad9046b0a7c105660cc7b3dcae0fdb8f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101636.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e80c4f1ad9046b0a7c105660cc7b3dcae0fdb8f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101636.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101636.c?ref=6e80c4f1ad9046b0a7c105660cc7b3dcae0fdb8f", "patch": "@@ -0,0 +1,94 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fgimple -O -mavx512f -ftree-vectorize -fno-vect-cost-model\" } */\n+\n+typedef _Bool sbool1 __attribute__((signed_bool_precision(1)));\n+typedef int v16si __attribute__((vector_size(64)));\n+typedef v16si v16sim __attribute__((vector_mask));\n+typedef long v16di __attribute__((vector_size(128)));\n+\n+void __GIMPLE (ssa,guessed_local(118111600),startwith(\"slp\"))\n+bar (int * restrict a, int * restrict d, int * restrict e)\n+{\n+  int * vectp_14;\n+  v16si * vectp_e_13;\n+  v16si vect_iftmp_12;\n+  v16sim mask__75_11;\n+  v16sim mask__74_10;\n+  v16si vect__6_9;\n+  v16si vect__1_8;\n+  int * vectp_7;\n+  v16si * vectp_a_6;\n+  int _2;\n+  int _5;\n+  int _7;\n+  int _9;\n+  int _11;\n+  int _13;\n+  int _15;\n+  int _17;\n+  _Bool _41;\n+  _Bool _49;\n+  _Bool _53;\n+  _Bool _57;\n+  _Bool _61;\n+  _Bool _65;\n+  _Bool _69;\n+  _Bool _73;\n+  sbool1 _135;\n+  sbool1 _136;\n+  sbool1 _137;\n+  sbool1 _138;\n+  sbool1 _139;\n+  sbool1 _140;\n+  sbool1 _141;\n+  sbool1 _142;\n+  sbool1 _143;\n+  sbool1 _144;\n+  sbool1 _145;\n+  sbool1 _146;\n+  sbool1 _147;\n+  sbool1 _148;\n+  sbool1 _149;\n+  sbool1 _150;\n+  v16sim _151;\n+\n+  __BB(2,guessed_local(105119324)):\n+  _2 = __MEM <int> (d_26(D) + _Literal (int * restrict) 32);\n+  _73 = _2 != 0;\n+  _5 = __MEM <int> (d_26(D) + _Literal (int * restrict) 36);\n+  _69 = _5 != 0;\n+  _7 = __MEM <int> (d_26(D));\n+  _65 = _7 != 0;\n+  _9 = __MEM <int> (d_26(D) + _Literal (int * restrict) 4);\n+  _61 = _9 != 0;\n+  _11 = __MEM <int> (d_26(D) + _Literal (int * restrict) 48);\n+  _57 = _11 != 0;\n+  _13 = __MEM <int> (d_26(D) + _Literal (int * restrict) 52);\n+  _53 = _13 != 0;\n+  _15 = __MEM <int> (d_26(D) + _Literal (int * restrict) 16);\n+  _41 = _15 != 0;\n+  _17 = __MEM <int> (d_26(D) + _Literal (int * restrict) 60);\n+  _49 = _17 != 0;\n+  _135 = _49 ? _Literal (sbool1) -1 : _Literal (sbool1) 0;\n+  _136 = _41 ? _Literal (sbool1) -1 : _Literal (sbool1) 0;\n+  _137 = _53 ? _Literal (sbool1) -1 : _Literal (sbool1) 0;\n+  _138 = _57 ? _Literal (sbool1) -1 : _Literal (sbool1) 0;\n+  _139 = _61 ? _Literal (sbool1) -1 : _Literal (sbool1) 0;\n+  _140 = _65 ? _Literal (sbool1) -1 : _Literal (sbool1) 0;\n+  _141 = _69 ? _Literal (sbool1) -1 : _Literal (sbool1) 0;\n+  _142 = _73 ? _Literal (sbool1) -1 : _Literal (sbool1) 0;\n+  _143 = _73 ? _Literal (sbool1) -1 : _Literal (sbool1) 0;\n+  _144 = _73 ? _Literal (sbool1) -1 : _Literal (sbool1) 0;\n+  _145 = _73 ? _Literal (sbool1) -1 : _Literal (sbool1) 0;\n+  _146 = _73 ? _Literal (sbool1) -1 : _Literal (sbool1) 0;\n+  _147 = _73 ? _Literal (sbool1) -1 : _Literal (sbool1) 0;\n+  _148 = _73 ? _Literal (sbool1) -1 : _Literal (sbool1) 0;\n+  _149 = _73 ? _Literal (sbool1) -1 : _Literal (sbool1) 0;\n+  _150 = _73 ? _Literal (sbool1) -1 : _Literal (sbool1) 0;\n+  _151 = _Literal (v16sim) {_150, _149, _148, _147, _146, _145, _144, _143, _142, _141, _140, _139, _138, _137, _136, _135};\n+  vect__1_8_154 = __MEM <v16si, 32> ((int * restrict)a_22(D));\n+  vect_iftmp_12_158 = _151 ? vect__6_9_154 : _Literal (v16si) { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n+  __MEM <v16si, 32> ((int * restrict)e_23(D)) = vect_iftmp_12_158;\n+  return;\n+}\n+"}, {"sha": "f9bbc872a99f00ea088ffde8192aabff8c3f0c0a", "filename": "gcc/tree-vect-slp.cc", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e80c4f1ad9046b0a7c105660cc7b3dcae0fdb8f/gcc%2Ftree-vect-slp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e80c4f1ad9046b0a7c105660cc7b3dcae0fdb8f/gcc%2Ftree-vect-slp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.cc?ref=6e80c4f1ad9046b0a7c105660cc7b3dcae0fdb8f", "patch": "@@ -2468,14 +2468,17 @@ vect_print_slp_tree (dump_flags_t dump_kind, dump_location_t loc,\n \n   dump_metadata_t metadata (dump_kind, loc.get_impl_location ());\n   dump_user_location_t user_loc = loc.get_user_location ();\n-  dump_printf_loc (metadata, user_loc, \"node%s %p (max_nunits=%u, refcnt=%u)\\n\",\n+  dump_printf_loc (metadata, user_loc, \"node%s %p (max_nunits=%u, refcnt=%u)\",\n \t\t   SLP_TREE_DEF_TYPE (node) == vect_external_def\n \t\t   ? \" (external)\"\n \t\t   : (SLP_TREE_DEF_TYPE (node) == vect_constant_def\n \t\t      ? \" (constant)\"\n \t\t      : \"\"), node,\n \t\t   estimated_poly_value (node->max_nunits),\n \t\t\t\t\t SLP_TREE_REF_COUNT (node));\n+  if (SLP_TREE_VECTYPE (node))\n+    dump_printf (metadata, \" %T\", SLP_TREE_VECTYPE (node));\n+  dump_printf (metadata, \"\\n\");\n   if (SLP_TREE_DEF_TYPE (node) == vect_internal_def)\n     {\n       if (SLP_TREE_CODE (node) == VEC_PERM_EXPR)\n@@ -4925,7 +4928,13 @@ vect_slp_analyze_operations (vec_info *vinfo)\n \t  /* CTOR instances require vectorized defs for the SLP tree root.  */\n \t  || (SLP_INSTANCE_KIND (instance) == slp_inst_kind_ctor\n \t      && (SLP_TREE_DEF_TYPE (SLP_INSTANCE_TREE (instance))\n-\t\t  != vect_internal_def))\n+\t\t  != vect_internal_def\n+\t\t  /* Make sure we vectorized with the expected type.  */\n+\t\t  || !useless_type_conversion_p\n+\t\t\t(TREE_TYPE (TREE_TYPE (gimple_assign_rhs1\n+\t\t\t\t\t      (instance->root_stmts[0]->stmt))),\n+\t\t\t TREE_TYPE (SLP_TREE_VECTYPE\n+\t\t\t\t\t    (SLP_INSTANCE_TREE (instance))))))\n \t  /* Check we can vectorize the reduction.  */\n \t  || (SLP_INSTANCE_KIND (instance) == slp_inst_kind_bb_reduc\n \t      && !vectorizable_bb_reduc_epilogue (instance, &cost_vec)))\n@@ -7373,10 +7382,6 @@ vectorize_slp_instance_root_stmt (slp_tree node, slp_instance instance)\n \t  gimple *child_stmt = SLP_TREE_VEC_STMTS (node)[0];\n \t  tree vect_lhs = gimple_get_lhs (child_stmt);\n \t  tree root_lhs = gimple_get_lhs (instance->root_stmts[0]->stmt);\n-\t  if (!useless_type_conversion_p (TREE_TYPE (root_lhs),\n-\t\t\t\t\t  TREE_TYPE (vect_lhs)))\n-\t    vect_lhs = build1 (VIEW_CONVERT_EXPR, TREE_TYPE (root_lhs),\n-\t\t\t       vect_lhs);\n \t  rstmt = gimple_build_assign (root_lhs, vect_lhs);\n \t}\n       else if (SLP_TREE_NUMBER_OF_VEC_STMTS (node) > 1)"}]}