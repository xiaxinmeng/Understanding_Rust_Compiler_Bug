{"sha": "f3fc9b804a4e552a173e2d4071b2adec33178161", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNmYzliODA0YTRlNTUyYTE3M2UyZDQwNzFiMmFkZWMzMzE3ODE2MQ==", "commit": {"author": {"name": "Romain Geissler", "email": "romain.geissler@gmail.com", "date": "2011-12-15T17:26:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-12-15T17:26:10Z"}, "message": "builtins.def (BUILT_IN_STPNCPY_CHK): New definition.\n\n\t* builtins.def (BUILT_IN_STPNCPY_CHK): New definition.\n\t* builtins.c (expand_builtin, fold_builtin_4, maybe_emit_chk_warning):\n\tAdd BUILT_IN_STPNCPY_CHK case.\n\t* gimple-fold.c (gimple_fold_builtin): Likewise.\n\t* tree-object-size.c (pass_through_call): Likewise.\n\t* tree-ssa-alias.c (ref_maybe_used_by_call_p_1,\n\tcall_may_clobber_ref_p_1): Likewise.\n\t* tree-ssa-structalias.c (find_func_aliases_for_builtin_call,\n\tfind_func_clobbers): Likewise.\n\t* tree.h (fold_builtin_strncpy_chk): Rename to fold_builtin_stxncpy_chk\n\t* builtins.c (fold_builtin_strncpy_chk): Likewise.\n\tRewrite stpncpy_chk calls to strncpy_chk calls if returned value is\n\tignored.\n\n\t* gcc.c-torture/execute/builtins/chk.h (stpncpy, stpncpy_disallowed):\n\tNew definitions.\n\t* gcc.c-torture/execute/builtins/lib/chk.c (stpncpy_disallowed):\n\tLikewise.\n\t(stpncpy, __stpncpy_chk): New functions.\n\t* gcc.c-torture/execute/builtins/stpncpy-chk-lib.c: New file.\n\t* gcc.c-torture/execute/builtins/stpncpy-chk.c: Likewise.\n\nFrom-SVN: r182378", "tree": {"sha": "b55d26e2a650daf51259ff6f927c4f13e216f931", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b55d26e2a650daf51259ff6f927c4f13e216f931"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3fc9b804a4e552a173e2d4071b2adec33178161", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3fc9b804a4e552a173e2d4071b2adec33178161", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3fc9b804a4e552a173e2d4071b2adec33178161", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3fc9b804a4e552a173e2d4071b2adec33178161/comments", "author": {"login": "Romain-Geissler", "id": 801960, "node_id": "MDQ6VXNlcjgwMTk2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/801960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Romain-Geissler", "html_url": "https://github.com/Romain-Geissler", "followers_url": "https://api.github.com/users/Romain-Geissler/followers", "following_url": "https://api.github.com/users/Romain-Geissler/following{/other_user}", "gists_url": "https://api.github.com/users/Romain-Geissler/gists{/gist_id}", "starred_url": "https://api.github.com/users/Romain-Geissler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Romain-Geissler/subscriptions", "organizations_url": "https://api.github.com/users/Romain-Geissler/orgs", "repos_url": "https://api.github.com/users/Romain-Geissler/repos", "events_url": "https://api.github.com/users/Romain-Geissler/events{/privacy}", "received_events_url": "https://api.github.com/users/Romain-Geissler/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee7a54c550753ba90949d1fea472e0586b6cd954", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee7a54c550753ba90949d1fea472e0586b6cd954", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee7a54c550753ba90949d1fea472e0586b6cd954"}], "stats": {"total": 380, "additions": 365, "deletions": 15}, "files": [{"sha": "9f1c952de25e661923be315a35d37be324aefab8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3fc9b804a4e552a173e2d4071b2adec33178161/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3fc9b804a4e552a173e2d4071b2adec33178161/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3fc9b804a4e552a173e2d4071b2adec33178161", "patch": "@@ -1,3 +1,19 @@\n+2011-12-15  Romain Geissler  <romain.geissler@gmail.com>\n+\n+\t* builtins.def (BUILT_IN_STPNCPY_CHK): New definition.\n+\t* builtins.c (expand_builtin, fold_builtin_4, maybe_emit_chk_warning):\n+\tAdd BUILT_IN_STPNCPY_CHK case.\n+\t* gimple-fold.c (gimple_fold_builtin): Likewise.\n+\t* tree-object-size.c (pass_through_call): Likewise.\n+\t* tree-ssa-alias.c (ref_maybe_used_by_call_p_1,\n+\tcall_may_clobber_ref_p_1): Likewise.\n+\t* tree-ssa-structalias.c (find_func_aliases_for_builtin_call,\n+\tfind_func_clobbers): Likewise.\n+\t* tree.h (fold_builtin_strncpy_chk): Rename to fold_builtin_stxncpy_chk\n+\t* builtins.c (fold_builtin_strncpy_chk): Likewise.\n+\tRewrite stpncpy_chk calls to strncpy_chk calls if returned value is\n+\tignored.\n+\n 2011-12-15  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/51567"}, {"sha": "44b8551b99d96480839a3618adab74f48af7bd19", "filename": "gcc/builtins.c", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3fc9b804a4e552a173e2d4071b2adec33178161/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3fc9b804a4e552a173e2d4071b2adec33178161/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=f3fc9b804a4e552a173e2d4071b2adec33178161", "patch": "@@ -6771,6 +6771,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_STRCPY_CHK:\n     case BUILT_IN_STPCPY_CHK:\n     case BUILT_IN_STRNCPY_CHK:\n+    case BUILT_IN_STPNCPY_CHK:\n     case BUILT_IN_STRCAT_CHK:\n     case BUILT_IN_STRNCAT_CHK:\n     case BUILT_IN_SNPRINTF_CHK:\n@@ -10935,7 +10936,9 @@ fold_builtin_4 (location_t loc, tree fndecl,\n \t\t\t\t      DECL_FUNCTION_CODE (fndecl));\n \n     case BUILT_IN_STRNCPY_CHK:\n-      return fold_builtin_strncpy_chk (loc, arg0, arg1, arg2, arg3, NULL_TREE);\n+    case BUILT_IN_STPNCPY_CHK:\n+      return fold_builtin_stxncpy_chk (loc, arg0, arg1, arg2, arg3, NULL_TREE,\n+                                       ignore, fcode);\n \n     case BUILT_IN_STRNCAT_CHK:\n       return fold_builtin_strncat_chk (loc, fndecl, arg0, arg1, arg2, arg3);\n@@ -12498,6 +12501,7 @@ maybe_emit_chk_warning (tree exp, enum built_in_function fcode)\n       break;\n     case BUILT_IN_STRNCAT_CHK:\n     case BUILT_IN_STRNCPY_CHK:\n+    case BUILT_IN_STPNCPY_CHK:\n       len = CALL_EXPR_ARG (exp, 2);\n       size = CALL_EXPR_ARG (exp, 3);\n       break;\n@@ -12852,13 +12856,15 @@ fold_builtin_stxcpy_chk (location_t loc, tree fndecl, tree dest,\n   return build_call_expr_loc (loc, fn, 2, dest, src);\n }\n \n-/* Fold a call to the __strncpy_chk builtin.  DEST, SRC, LEN, and SIZE\n+/* Fold a call to the __st{r,p}ncpy_chk builtin.  DEST, SRC, LEN, and SIZE\n    are the arguments to the call.  If MAXLEN is not NULL, it is maximum\n-   length passed as third argument.  */\n+   length passed as third argument. IGNORE is true if return value can be\n+   ignored. FCODE is the BUILT_IN_* code of the builtin. */\n \n tree\n-fold_builtin_strncpy_chk (location_t loc, tree dest, tree src,\n-\t\t\t  tree len, tree size, tree maxlen)\n+fold_builtin_stxncpy_chk (location_t loc, tree dest, tree src,\n+\t\t\t  tree len, tree size, tree maxlen, bool ignore,\n+\t\t\t  enum built_in_function fcode)\n {\n   tree fn;\n \n@@ -12868,6 +12874,15 @@ fold_builtin_strncpy_chk (location_t loc, tree dest, tree src,\n       || !validate_arg (size, INTEGER_TYPE))\n     return NULL_TREE;\n \n+  if (fcode == BUILT_IN_STPNCPY_CHK && ignore)\n+    {\n+       /* If return value of __stpncpy_chk is ignored,\n+          optimize into __strncpy_chk.  */\n+       fn = builtin_decl_explicit (BUILT_IN_STRNCPY_CHK);\n+       if (fn)\n+         return build_call_expr_loc (loc, fn, 4, dest, src, len, size);\n+    }\n+\n   if (! host_integerp (size, 1))\n     return NULL_TREE;\n \n@@ -12888,8 +12903,9 @@ fold_builtin_strncpy_chk (location_t loc, tree dest, tree src,\n \treturn NULL_TREE;\n     }\n \n-  /* If __builtin_strncpy_chk is used, assume strncpy is available.  */\n-  fn = builtin_decl_explicit (BUILT_IN_STRNCPY);\n+  /* If __builtin_st{r,p}ncpy_chk is used, assume st{r,p}ncpy is available.  */\n+  fn = builtin_decl_explicit (fcode == BUILT_IN_STPNCPY_CHK\n+\t\t\t      ? BUILT_IN_STPNCPY : BUILT_IN_STRNCPY);\n   if (!fn)\n     return NULL_TREE;\n "}, {"sha": "b5ddace8d939f0c9943af8d410e74895be8d3efc", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3fc9b804a4e552a173e2d4071b2adec33178161/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3fc9b804a4e552a173e2d4071b2adec33178161/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=f3fc9b804a4e552a173e2d4071b2adec33178161", "patch": "@@ -760,6 +760,7 @@ DEF_EXT_LIB_BUILTIN    (BUILT_IN_MEMMOVE_CHK, \"__memmove_chk\", BT_FN_PTR_PTR_CON\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_MEMPCPY_CHK, \"__mempcpy_chk\", BT_FN_PTR_PTR_CONST_PTR_SIZE_SIZE, ATTR_NOTHROW_NONNULL_LEAF)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_MEMSET_CHK, \"__memset_chk\", BT_FN_PTR_PTR_INT_SIZE_SIZE, ATTR_NOTHROW_NONNULL_LEAF)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_STPCPY_CHK, \"__stpcpy_chk\", BT_FN_STRING_STRING_CONST_STRING_SIZE, ATTR_NOTHROW_NONNULL_LEAF)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_STPNCPY_CHK, \"__stpncpy_chk\", BT_FN_STRING_STRING_CONST_STRING_SIZE_SIZE, ATTR_NOTHROW_NONNULL_LEAF)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_STRCAT_CHK, \"__strcat_chk\", BT_FN_STRING_STRING_CONST_STRING_SIZE, ATTR_NOTHROW_NONNULL_LEAF)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_STRCPY_CHK, \"__strcpy_chk\", BT_FN_STRING_STRING_CONST_STRING_SIZE, ATTR_NOTHROW_NONNULL_LEAF)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_STRNCAT_CHK, \"__strncat_chk\", BT_FN_STRING_STRING_CONST_STRING_SIZE_SIZE, ATTR_NOTHROW_NONNULL_LEAF)"}, {"sha": "935bbdae9ee1ded6205574943b9ac982a065b767", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3fc9b804a4e552a173e2d4071b2adec33178161/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3fc9b804a4e552a173e2d4071b2adec33178161/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=f3fc9b804a4e552a173e2d4071b2adec33178161", "patch": "@@ -834,6 +834,7 @@ gimple_fold_builtin (gimple stmt)\n     case BUILT_IN_MEMMOVE_CHK:\n     case BUILT_IN_MEMSET_CHK:\n     case BUILT_IN_STRNCPY_CHK:\n+    case BUILT_IN_STPNCPY_CHK:\n       arg_idx = 2;\n       type = 2;\n       break;\n@@ -940,12 +941,14 @@ gimple_fold_builtin (gimple stmt)\n       break;\n \n     case BUILT_IN_STRNCPY_CHK:\n+    case BUILT_IN_STPNCPY_CHK:\n       if (val[2] && is_gimple_val (val[2]) && nargs == 4)\n-\tresult = fold_builtin_strncpy_chk (loc, gimple_call_arg (stmt, 0),\n+\tresult = fold_builtin_stxncpy_chk (loc, gimple_call_arg (stmt, 0),\n                                            gimple_call_arg (stmt, 1),\n                                            gimple_call_arg (stmt, 2),\n                                            gimple_call_arg (stmt, 3),\n-\t\t\t\t\t   val[2]);\n+\t\t\t\t\t   val[2], ignore,\n+\t\t\t\t\t   DECL_FUNCTION_CODE (callee));\n       break;\n \n     case BUILT_IN_SNPRINTF_CHK:"}, {"sha": "14d888a85807b1cabb09a1cce3a9268e7e4d3688", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3fc9b804a4e552a173e2d4071b2adec33178161/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3fc9b804a4e552a173e2d4071b2adec33178161/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f3fc9b804a4e552a173e2d4071b2adec33178161", "patch": "@@ -1,3 +1,13 @@\n+2011-12-15  Romain Geissler  <romain.geissler@gmail.com>\n+\n+\t* gcc.c-torture/execute/builtins/chk.h (stpncpy, stpncpy_disallowed):\n+\tNew definitions.\n+\t* gcc.c-torture/execute/builtins/lib/chk.c (stpncpy_disallowed):\n+\tLikewise.\n+\t(stpncpy, __stpncpy_chk): New functions.\n+\t* gcc.c-torture/execute/builtins/stpncpy-chk-lib.c: New file.\n+\t* gcc.c-torture/execute/builtins/stpncpy-chk.c: Likewise.\n+\n 2011-12-15  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/51567"}, {"sha": "9bf725560bf752c845ee1e913181c1dfe44c58d0", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/chk.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3fc9b804a4e552a173e2d4071b2adec33178161/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fchk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3fc9b804a4e552a173e2d4071b2adec33178161/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fchk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fchk.h?ref=f3fc9b804a4e552a173e2d4071b2adec33178161", "patch": "@@ -28,6 +28,9 @@\n #undef strncpy\n #define strncpy(dst, src, len) \\\n   __builtin___strncpy_chk (dst, src, len, os (dst))\n+#undef stpncpy\n+#define stpncpy(dst, src, len) \\\n+  __builtin___stpncpy_chk (dst, src, len, os (dst))\n #undef strncat\n #define strncat(dst, src, len) \\\n   __builtin___strncat_chk (dst, src, len, os (dst))\n@@ -76,8 +79,8 @@ extern void *chk_fail_buf[];\n extern volatile int chk_fail_allowed, chk_calls;\n extern volatile int memcpy_disallowed, mempcpy_disallowed, memmove_disallowed;\n extern volatile int memset_disallowed, strcpy_disallowed, stpcpy_disallowed;\n-extern volatile int strncpy_disallowed, strcat_disallowed, strncat_disallowed;\n-extern volatile int sprintf_disallowed, vsprintf_disallowed;\n+extern volatile int strncpy_disallowed, stpncpy_disallowed, strcat_disallowed;\n+extern volatile int strncat_disallowed, sprintf_disallowed, vsprintf_disallowed;\n extern volatile int snprintf_disallowed, vsnprintf_disallowed;\n \n /* A storage class that ensures that declarations bind locally.  We want"}, {"sha": "9db60c8e3f4b2a3124c51e5cf4518817f6e7d91e", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/lib/chk.c", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3fc9b804a4e552a173e2d4071b2adec33178161/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fchk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3fc9b804a4e552a173e2d4071b2adec33178161/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fchk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fchk.c?ref=f3fc9b804a4e552a173e2d4071b2adec33178161", "patch": "@@ -10,8 +10,8 @@ void *chk_fail_buf[256] __attribute__((aligned (16)));\n volatile int chk_fail_allowed, chk_calls;\n volatile int memcpy_disallowed, mempcpy_disallowed, memmove_disallowed;\n volatile int memset_disallowed, strcpy_disallowed, stpcpy_disallowed;\n-volatile int strncpy_disallowed, strcat_disallowed, strncat_disallowed;\n-volatile int sprintf_disallowed, vsprintf_disallowed;\n+volatile int strncpy_disallowed, stpncpy_disallowed, strcat_disallowed;\n+volatile int strncat_disallowed, sprintf_disallowed, vsprintf_disallowed;\n volatile int snprintf_disallowed, vsnprintf_disallowed;\n extern __SIZE_TYPE__ strlen (const char *);\n extern int vsprintf (char *, const char *, va_list);\n@@ -200,6 +200,38 @@ __stpcpy_chk (char *d, const char *s, __SIZE_TYPE__ size)\n   return stpcpy (d, s);\n }\n \n+char *\n+stpncpy (char *dst, const char *src, __SIZE_TYPE__ n)\n+{\n+#ifdef __OPTIMIZE__\n+  if (stpncpy_disallowed && inside_main)\n+    abort ();\n+#endif\n+\n+  for (; *src && n; n--)\n+    *dst++ = *src++;\n+\n+  char *ret = dst;\n+\n+  while (n--)\n+    *dst++ = 0;\n+\n+  return ret;\n+}\n+\n+\n+char *\n+__stpncpy_chk (char *s1, const char *s2, __SIZE_TYPE__ n, __SIZE_TYPE__ size)\n+{\n+  /* If size is -1, GCC should always optimize the call into stpncpy.  */\n+  if (size == (__SIZE_TYPE__) -1)\n+    abort ();\n+  ++chk_calls;\n+  if (n > size)\n+    __chk_fail ();\n+  return stpncpy (s1, s2, n);\n+}\n+\n char *\n strncpy (char *s1, const char *s2, __SIZE_TYPE__ n)\n {"}, {"sha": "9daf13e827b5f757f79552f56c57ed55258d8eb3", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/stpncpy-chk-lib.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3fc9b804a4e552a173e2d4071b2adec33178161/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstpncpy-chk-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3fc9b804a4e552a173e2d4071b2adec33178161/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstpncpy-chk-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstpncpy-chk-lib.c?ref=f3fc9b804a4e552a173e2d4071b2adec33178161", "patch": "@@ -0,0 +1 @@\n+#include \"lib/chk.c\""}, {"sha": "772f19c4e220eab6bb2390898dca5eeab0412754", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/stpncpy-chk.c", "status": "added", "additions": 261, "deletions": 0, "changes": 261, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3fc9b804a4e552a173e2d4071b2adec33178161/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstpncpy-chk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3fc9b804a4e552a173e2d4071b2adec33178161/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstpncpy-chk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstpncpy-chk.c?ref=f3fc9b804a4e552a173e2d4071b2adec33178161", "patch": "@@ -0,0 +1,261 @@\n+/* Copyright (C) 2004, 2005, 2011  Free Software Foundation.\n+\n+   Ensure builtin __stpncpy_chk performs correctly.  */\n+\n+extern void abort (void);\n+typedef __SIZE_TYPE__ size_t;\n+extern size_t strlen(const char *);\n+extern void *memcpy (void *, const void *, size_t);\n+extern char *stpncpy (char *, const char *, size_t);\n+extern int memcmp (const void *, const void *, size_t);\n+extern int strcmp (const char *, const char *);\n+extern int strncmp (const char *, const char *, size_t);\n+extern void *memset (void *, int, size_t);\n+\n+#include \"chk.h\"\n+\n+const char s1[] = \"123\";\n+char p[32] = \"\";\n+char * volatile s2 = \"defg\";  /* prevent constant propagation to happen when whole program assumptions are made.  */\n+char * volatile s3 = \"FGH\";  /* prevent constant propagation to happen when whole program assumptions are made.  */\n+char *s4;\n+volatile size_t l1 = 1;  /* prevent constant propagation to happen when whole program assumptions are made.  */\n+int i;\n+\n+void\n+__attribute__((noinline))\n+test1 (void)\n+{\n+  const char *const src = \"hello world\";\n+  const char *src2;\n+  char dst[64], *dst2;\n+\n+  chk_calls = 0;\n+\n+  memset (dst, 0, sizeof (dst));\n+  if (stpncpy (dst, src, 4) != dst+4 || strncmp (dst, src, 4))\n+    abort();\n+\n+  memset (dst, 0, sizeof (dst));\n+  if (stpncpy (dst+16, src, 4) != dst+20 || strncmp (dst+16, src, 4))\n+    abort();\n+\n+  memset (dst, 0, sizeof (dst));\n+  if (stpncpy (dst+32, src+5, 4) != dst+36 || strncmp (dst+32, src+5, 4))\n+    abort();\n+\n+  memset (dst, 0, sizeof (dst));\n+  dst2 = dst;\n+  if (stpncpy (++dst2, src+5, 4) != dst+5 || strncmp (dst2, src+5, 4)\n+      || dst2 != dst+1)\n+    abort();\n+\n+  memset (dst, 0, sizeof (dst));\n+  if (stpncpy (dst, src, 0) != dst || strcmp (dst, \"\"))\n+    abort();\n+  \n+  memset (dst, 0, sizeof (dst));\n+  dst2 = dst; src2 = src;\n+  if (stpncpy (++dst2, ++src2, 0) != dst+1 || strcmp (dst2, \"\")\n+      || dst2 != dst+1 || src2 != src+1)\n+    abort();\n+\n+  memset (dst, 0, sizeof (dst));\n+  dst2 = dst; src2 = src;\n+  if (stpncpy (++dst2+5, ++src2+5, 0) != dst+6 || strcmp (dst2+5, \"\")\n+      || dst2 != dst+1 || src2 != src+1)\n+    abort();\n+\n+  memset (dst, 0, sizeof (dst));\n+  if (stpncpy (dst, src, 12) != dst+11 || strcmp (dst, src))\n+    abort();\n+\n+  /* Test at least one instance of the __builtin_ style.  We do this\n+     to ensure that it works and that the prototype is correct.  */\n+  memset (dst, 0, sizeof (dst));\n+  if (__builtin_stpncpy (dst, src, 4) != dst+4 || strncmp (dst, src, 4))\n+    abort();\n+\n+  memset (dst, 0, sizeof (dst));\n+  if (stpncpy (dst, i++ ? \"xfoo\" + 1 : \"bar\", 4) != dst+3\n+      || strcmp (dst, \"bar\")\n+      || i != 1)\n+    abort ();\n+\n+  /* If return value of stpncpy is ignored, it should be optimized into\n+     stpncpy call.  */\n+  stpncpy_disallowed = 1;\n+  stpncpy (dst + 1, src, 4);\n+  stpncpy_disallowed = 0;\n+  if (strncmp (dst + 1, src, 4))\n+    abort ();\n+\n+  if (chk_calls)\n+    abort ();\n+}\n+\n+void\n+__attribute__((noinline))\n+test2 (void)\n+{\n+  chk_calls = 0;\n+\n+  /* No runtime checking should be done here, both destination\n+     and length are unknown.  */\n+  size_t cpy_length = l1 < 4 ? l1 + 1 : 4;\n+  if (stpncpy (s4, \"abcd\", l1 + 1) != s4 + cpy_length || strncmp (s4, \"abcd\", cpy_length))\n+    abort ();\n+\n+  if (chk_calls)\n+    abort ();\n+}\n+\n+/* Test whether compile time checking is done where it should\n+   and so is runtime object size checking.  */\n+void\n+__attribute__((noinline))\n+test3 (void)\n+{\n+  struct A { char buf1[10]; char buf2[10]; } a;\n+  char *r = l1 == 1 ? &a.buf1[5] : &a.buf2[4];\n+  char buf3[20];\n+  int i;\n+  const char *l;\n+  size_t l2;\n+\n+  /* The following calls should do runtime checking\n+     - source length is not known, but destination is.  \n+     The returned value is checked so that stpncpy calls\n+     are not rewritten to strncpy calls. */\n+  chk_calls = 0;\n+  if (!stpncpy (a.buf1 + 2, s3 + 3, l1))\n+    abort();\n+  if (!stpncpy (r, s3 + 2, l1 + 2))\n+    abort();\n+  r = l1 == 1 ? __builtin_alloca (4) : &a.buf2[7];\n+  if (!stpncpy (r, s2 + 2, l1 + 2))\n+    abort();\n+  if (!stpncpy (r + 2, s3 + 3, l1))\n+    abort();\n+  r = buf3;\n+  for (i = 0; i < 4; ++i)\n+    {\n+      if (i == l1 - 1)\n+\tr = &a.buf1[1];\n+      else if (i == l1)\n+\tr = &a.buf2[7];\n+      else if (i == l1 + 1)\n+\tr = &buf3[5];\n+      else if (i == l1 + 2)\n+\tr = &a.buf1[9];\n+    }\n+  if (!stpncpy (r, s2 + 4, l1))\n+    abort();\n+  if (chk_calls != 5)\n+    abort ();\n+\n+  /* Following have known destination and known length,\n+     so if optimizing certainly shouldn't result in the checking\n+     variants.  */\n+  chk_calls = 0;\n+  if (!stpncpy (a.buf1 + 2, \"\", 3))\n+    abort ();\n+  if (!stpncpy (a.buf1 + 2, \"\", 0))\n+    abort ();\n+  if (!stpncpy (r, \"a\", 1))\n+    abort ();\n+  if (!stpncpy (r, \"a\", 3))\n+    abort ();\n+  r = l1 == 1 ? __builtin_alloca (4) : &a.buf2[7];\n+  if (!stpncpy (r, s1 + 1, 3))\n+    abort ();\n+  if (!stpncpy (r, s1 + 1, 2))\n+    abort ();\n+  r = buf3;\n+  l = \"abc\";\n+  l2 = 4;\n+  for (i = 0; i < 4; ++i)\n+    {\n+      if (i == l1 - 1)\n+\tr = &a.buf1[1], l = \"e\", l2 = 2;\n+      else if (i == l1)\n+\tr = &a.buf2[7], l = \"gh\", l2 = 3;\n+      else if (i == l1 + 1)\n+\tr = &buf3[5], l = \"jkl\", l2 = 4;\n+      else if (i == l1 + 2)\n+\tr = &a.buf1[9], l = \"\", l2 = 1;\n+    }\n+  if (!stpncpy (r, \"\", 1))\n+    abort ();\n+  /* Here, strlen (l) + 1 is known to be at most 4 and\n+     __builtin_object_size (&buf3[16], 0) is 4, so this doesn't need\n+     runtime checking.  */\n+  if (!stpncpy (&buf3[16], l, l2))\n+    abort ();\n+  if (!stpncpy (&buf3[15], \"abc\", l2))\n+    abort ();\n+  if (!stpncpy (&buf3[10], \"fghij\", l2))\n+    abort ();\n+  if (chk_calls)\n+    abort ();\n+  chk_calls = 0;\n+}\n+\n+/* Test whether runtime and/or compile time checking catches\n+   buffer overflows.  */\n+void\n+__attribute__((noinline))\n+test4 (void)\n+{\n+  struct A { char buf1[10]; char buf2[10]; } a;\n+  char buf3[20];\n+\n+  chk_fail_allowed = 1;\n+  /* Runtime checks.  */\n+  if (__builtin_setjmp (chk_fail_buf) == 0)\n+    {\n+      if (stpncpy (&a.buf2[9], s2 + 4, l1 + 1))\n+        // returned value used to prevent stpncpy calls\n+        // to be rewritten in strncpy calls\n+        i++;\n+      abort ();\n+    }\n+  if (__builtin_setjmp (chk_fail_buf) == 0)\n+    {\n+      if (stpncpy (&a.buf2[7], s3, l1 + 4))\n+        i++;\n+      abort ();\n+    }\n+  /* This should be detectable at compile time already.  */\n+  if (__builtin_setjmp (chk_fail_buf) == 0)\n+    {\n+      if (stpncpy (&buf3[19], \"abc\", 2))\n+        i++;\n+      abort ();\n+    }\n+  if (__builtin_setjmp (chk_fail_buf) == 0)\n+    {\n+      if (stpncpy (&buf3[18], \"\", 3))\n+        i++;\n+      abort ();\n+    }\n+  chk_fail_allowed = 0;\n+}\n+\n+void\n+main_test (void)\n+{\n+#ifndef __OPTIMIZE__\n+  /* Object size checking is only intended for -O[s123].  */\n+  return;\n+#endif\n+  __asm (\"\" : \"=r\" (s2) : \"0\" (s2));\n+  __asm (\"\" : \"=r\" (s3) : \"0\" (s3));\n+  __asm (\"\" : \"=r\" (l1) : \"0\" (l1));\n+  test1 ();\n+  \n+  s4 = p;\n+  test2 ();\n+  test3 ();\n+  test4 ();\n+}"}, {"sha": "d35922c38ff287153a8af4eb409d8bec93ef40bb", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3fc9b804a4e552a173e2d4071b2adec33178161/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3fc9b804a4e552a173e2d4071b2adec33178161/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=f3fc9b804a4e552a173e2d4071b2adec33178161", "patch": "@@ -465,6 +465,7 @@ pass_through_call (const_gimple call)\n       case BUILT_IN_MEMSET_CHK:\n       case BUILT_IN_STRCPY_CHK:\n       case BUILT_IN_STRNCPY_CHK:\n+      case BUILT_IN_STPNCPY_CHK:\n       case BUILT_IN_STRCAT_CHK:\n       case BUILT_IN_STRNCAT_CHK:\n       case BUILT_IN_ASSUME_ALIGNED:"}, {"sha": "54badda17723fee264ce9861e951d191ec1080d4", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3fc9b804a4e552a173e2d4071b2adec33178161/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3fc9b804a4e552a173e2d4071b2adec33178161/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=f3fc9b804a4e552a173e2d4071b2adec33178161", "patch": "@@ -1223,6 +1223,7 @@ ref_maybe_used_by_call_p_1 (gimple call, ao_ref *ref)\n \tcase BUILT_IN_MEMMOVE_CHK:\n \tcase BUILT_IN_MEMPCPY_CHK:\n \tcase BUILT_IN_STPCPY_CHK:\n+\tcase BUILT_IN_STPNCPY_CHK:\n \t  {\n \t    ao_ref dref;\n \t    tree size = NULL_TREE;\n@@ -1560,6 +1561,7 @@ call_may_clobber_ref_p_1 (gimple call, ao_ref *ref)\n \tcase BUILT_IN_MEMMOVE_CHK:\n \tcase BUILT_IN_MEMPCPY_CHK:\n \tcase BUILT_IN_STPCPY_CHK:\n+\tcase BUILT_IN_STPNCPY_CHK:\n \tcase BUILT_IN_STRCAT_CHK:\n \tcase BUILT_IN_STRNCAT_CHK:\n \tcase BUILT_IN_MEMSET_CHK:"}, {"sha": "56ffca556e9006959cc2901fc3df03c70f631fb7", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3fc9b804a4e552a173e2d4071b2adec33178161/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3fc9b804a4e552a173e2d4071b2adec33178161/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=f3fc9b804a4e552a173e2d4071b2adec33178161", "patch": "@@ -4022,6 +4022,7 @@ find_func_aliases_for_builtin_call (gimple t)\n       case BUILT_IN_MEMMOVE_CHK:\n       case BUILT_IN_MEMPCPY_CHK:\n       case BUILT_IN_STPCPY_CHK:\n+      case BUILT_IN_STPNCPY_CHK:\n       case BUILT_IN_STRCAT_CHK:\n       case BUILT_IN_STRNCAT_CHK:\n       case BUILT_IN_TM_MEMCPY:\n@@ -4039,7 +4040,8 @@ find_func_aliases_for_builtin_call (gimple t)\n \t\t  || DECL_FUNCTION_CODE (fndecl) == BUILT_IN_STPCPY\n \t\t  || DECL_FUNCTION_CODE (fndecl) == BUILT_IN_STPNCPY\n \t\t  || DECL_FUNCTION_CODE (fndecl) == BUILT_IN_MEMPCPY_CHK\n-\t\t  || DECL_FUNCTION_CODE (fndecl) == BUILT_IN_STPCPY_CHK)\n+\t\t  || DECL_FUNCTION_CODE (fndecl) == BUILT_IN_STPCPY_CHK\n+\t\t  || DECL_FUNCTION_CODE (fndecl) == BUILT_IN_STPNCPY_CHK)\n \t\tget_constraint_for_ptr_offset (dest, NULL_TREE, &rhsc);\n \t      else\n \t\tget_constraint_for (dest, &rhsc);\n@@ -4757,6 +4759,7 @@ find_func_clobbers (gimple origt)\n \t  case BUILT_IN_MEMMOVE_CHK:\n \t  case BUILT_IN_MEMPCPY_CHK:\n \t  case BUILT_IN_STPCPY_CHK:\n+\t  case BUILT_IN_STPNCPY_CHK:\n \t  case BUILT_IN_STRCAT_CHK:\n \t  case BUILT_IN_STRNCAT_CHK:\n \t    {"}, {"sha": "7a0046b8260cd04ab861dd79609dd17918adbbb2", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3fc9b804a4e552a173e2d4071b2adec33178161/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3fc9b804a4e552a173e2d4071b2adec33178161/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=f3fc9b804a4e552a173e2d4071b2adec33178161", "patch": "@@ -5429,7 +5429,8 @@ extern tree fold_builtin_memory_chk (location_t, tree, tree, tree, tree, tree, t\n \t\t\t\t     enum built_in_function);\n extern tree fold_builtin_stxcpy_chk (location_t, tree, tree, tree, tree, tree, bool,\n \t\t\t\t     enum built_in_function);\n-extern tree fold_builtin_strncpy_chk (location_t, tree, tree, tree, tree, tree);\n+extern tree fold_builtin_stxncpy_chk (location_t, tree, tree, tree, tree, tree, bool,\n+\t\t\t\t      enum built_in_function);\n extern tree fold_builtin_snprintf_chk (location_t, tree, tree, enum built_in_function);\n extern bool fold_builtin_next_arg (tree, bool);\n extern enum built_in_function builtin_mathfn_code (const_tree);"}]}