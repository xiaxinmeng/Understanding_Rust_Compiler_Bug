{"sha": "0fa5e05c2f36dda5b06b259779afc7867b0da9f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZhNWUwNWMyZjM2ZGRhNWIwNmIyNTk3NzlhZmM3ODY3YjBkYTlmNw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-09-24T01:17:29Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-24T01:17:29Z"}, "message": "cp-tree.h (DECL_ANON_UNION_ELEMS): New macro.\n\n\t* cp-tree.h (DECL_ANON_UNION_ELEMS): New macro.\n\t* decl2.c (finish_anon_union): Set DECL_ANON_UNION_ELEMS.\n\tDon't call expand_anon_union_decl here\n\t* semantics.c (exapnd_stmt): Call it here, instead.\n\t* typeck.c (mark_addressable): Addressed variables are implicitly\n\tused.\n\nFrom-SVN: r29645", "tree": {"sha": "b2c6898fd3ead0e1c37050fb2615df46e6890c1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2c6898fd3ead0e1c37050fb2615df46e6890c1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fa5e05c2f36dda5b06b259779afc7867b0da9f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fa5e05c2f36dda5b06b259779afc7867b0da9f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fa5e05c2f36dda5b06b259779afc7867b0da9f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fa5e05c2f36dda5b06b259779afc7867b0da9f7/comments", "author": null, "committer": null, "parents": [{"sha": "a571f7a00e33edb193e1a74869dab3f0576eb87c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a571f7a00e33edb193e1a74869dab3f0576eb87c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a571f7a00e33edb193e1a74869dab3f0576eb87c"}], "stats": {"total": 72, "additions": 62, "deletions": 10}, "files": [{"sha": "1fdf67fcdb720f6d10c21531ee7149999e45e5fe", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa5e05c2f36dda5b06b259779afc7867b0da9f7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa5e05c2f36dda5b06b259779afc7867b0da9f7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0fa5e05c2f36dda5b06b259779afc7867b0da9f7", "patch": "@@ -1,3 +1,12 @@\n+1999-09-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (DECL_ANON_UNION_ELEMS): New macro.\n+\t* decl2.c (finish_anon_union): Set DECL_ANON_UNION_ELEMS.\n+\tDon't call expand_anon_union_decl here\n+\t* semantics.c (exapnd_stmt): Call it here, instead.\n+\t* typeck.c (mark_addressable): Addressed variables are implicitly\n+\tused.\n+\t\n 1999-09-23  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n \n \t* cp-tree.h (VAR_OR_FUNCTION_DECL_CHECK): New macro."}, {"sha": "9c623bebf780018df7b4b8160dd957ee7c4b77a0", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa5e05c2f36dda5b06b259779afc7867b0da9f7/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa5e05c2f36dda5b06b259779afc7867b0da9f7/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0fa5e05c2f36dda5b06b259779afc7867b0da9f7", "patch": "@@ -116,7 +116,10 @@ Boston, MA 02111-1307, USA.  */\n      calling the function.  The TREE_VALUE is the declaration for the \n      virtual function itself.  When CLASSTYPE_COM_INTERFACE_P does not\n      hold, the first entry does not have a TREE_VALUE; it is just an\n-     offset.  */ \n+     offset.\n+\n+   DECL_ARGUMENTS\n+     For a VAR_DECL this is DECL_ANON_UNION_ELEMS.  */\n \n /* Language-specific tree checkers. */\n \n@@ -2229,6 +2232,10 @@ extern int flag_new_for_scope;\n #define SET_ANON_AGGR_TYPE_P(NODE)\t\t\t\\\n   (TYPE_LANG_SPECIFIC (NODE)->anon_aggr = 1)\n \n+/* For a VAR_DECL that is an anonymous union, these are the various\n+   sub-variables that make up the anonymous union.  */\n+#define DECL_ANON_UNION_ELEMS(NODE) DECL_ARGUMENTS ((NODE))\n+\n #define UNKNOWN_TYPE LANG_TYPE\n \n /* Define fields and accessors for nodes representing declared names.  */"}, {"sha": "99674609020f0601334504dd02f8fd4d31e0d69c", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa5e05c2f36dda5b06b259779afc7867b0da9f7/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa5e05c2f36dda5b06b259779afc7867b0da9f7/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=0fa5e05c2f36dda5b06b259779afc7867b0da9f7", "patch": "@@ -2131,7 +2131,6 @@ finish_anon_union (anon_union_decl)\n      tree anon_union_decl;\n {\n   tree type = TREE_TYPE (anon_union_decl);\n-  tree elems = NULL_TREE;\n   tree main_decl;\n   int public_p = TREE_PUBLIC (anon_union_decl);\n   int static_p = TREE_STATIC (anon_union_decl);\n@@ -2146,7 +2145,8 @@ finish_anon_union (anon_union_decl)\n       return;\n     }\n \n-  main_decl = build_anon_union_vars (anon_union_decl, &elems, \n+  main_decl = build_anon_union_vars (anon_union_decl,\n+\t\t\t\t     &DECL_ANON_UNION_ELEMS (anon_union_decl),\n \t\t\t\t     static_p, external_p);\n \n   if (main_decl == NULL_TREE)\n@@ -2159,11 +2159,12 @@ finish_anon_union (anon_union_decl)\n     {\n       make_decl_rtl (main_decl, 0, toplevel_bindings_p ());\n       DECL_RTL (anon_union_decl) = DECL_RTL (main_decl);\n+      expand_anon_union_decl (anon_union_decl, \n+\t\t\t      NULL_TREE,\n+\t\t\t      DECL_ANON_UNION_ELEMS (anon_union_decl));\n     }\n-\n-  /* The following call assumes that there are never any cleanups\n-     for anonymous unions--a reasonable assumption.  */\n-  expand_anon_union_decl (anon_union_decl, NULL_TREE, elems);\n+  else\n+    add_decl_stmt (anon_union_decl);\n }\n \n /* Finish processing a builtin type TYPE.  It's name is NAME,"}, {"sha": "cd48570ca7f0e60a0ad938b7bcda0f469651dd33", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa5e05c2f36dda5b06b259779afc7867b0da9f7/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa5e05c2f36dda5b06b259779afc7867b0da9f7/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=0fa5e05c2f36dda5b06b259779afc7867b0da9f7", "patch": "@@ -2254,8 +2254,14 @@ expand_stmt (t)\n \t    if (TREE_CODE (decl) == VAR_DECL \n \t\t&& !TREE_STATIC (decl)\n \t\t&& !DECL_EXTERNAL (decl))\n-\t      /* Let the back-end know about this variable.  */\n-\t      emit_local_var (decl);\n+\t      {\n+\t\t/* Let the back-end know about this variable.  */\n+\t\tif (!ANON_AGGR_TYPE_P (TREE_TYPE (decl)))\n+\t\t  emit_local_var (decl);\n+\t\telse\n+\t\t  expand_anon_union_decl (decl, NULL_TREE, \n+\t\t\t\t\t  DECL_ANON_UNION_ELEMS (decl));\n+\t      }\n \n \t    resume_momentary (i);\n \t  }"}, {"sha": "3803a42f009caf91c367f82e4b165c3acc302b76", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa5e05c2f36dda5b06b259779afc7867b0da9f7/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa5e05c2f36dda5b06b259779afc7867b0da9f7/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=0fa5e05c2f36dda5b06b259779afc7867b0da9f7", "patch": "@@ -4999,8 +4999,10 @@ mark_addressable (exp)\n \t    && !DECL_ARTIFICIAL (x) && extra_warnings)\n \t  cp_warning (\"address requested for `%D', which is declared `register'\",\n \t\t      x);\n-\tput_var_into_stack (x);\n \tTREE_ADDRESSABLE (x) = 1;\n+\tTREE_USED (x) = 1;\n+\tif (current_function && expanding_p)\n+\t  put_var_into_stack (x);\n \treturn 1;\n \n       case FUNCTION_DECL:"}, {"sha": "463df9d42bb57c72de21eb9f0932f189bb82c8cb", "filename": "gcc/testsuite/g++.old-deja/g++.eh/crash2.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa5e05c2f36dda5b06b259779afc7867b0da9f7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcrash2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa5e05c2f36dda5b06b259779afc7867b0da9f7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcrash2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcrash2.C?ref=0fa5e05c2f36dda5b06b259779afc7867b0da9f7", "patch": "@@ -0,0 +1,27 @@\n+// Build don't link:\n+// Origin: Thomas Kunert <kunert@physik.tu-dresden.de>\n+// Special g++ Options: -O\n+\n+struct C {\n+    ~C();\n+};    \n+\n+struct R {\n+    bool empty() const;\n+    C m_;\n+};\n+\n+struct R1 {\n+    R1( const R& a );\n+  ~R1 ();\n+    C m_;\n+};\n+\n+R1 get_empty();\n+\n+R1::R1( const R& a ) :\n+    m_( a.empty() ? get_empty().m_ : C() )\n+{}\n+\n+void qnorm( const R & r)\n+{ R1 n( r ); } "}]}