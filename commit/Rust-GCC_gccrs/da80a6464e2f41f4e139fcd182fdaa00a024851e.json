{"sha": "da80a6464e2f41f4e139fcd182fdaa00a024851e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE4MGE2NDY0ZTJmNDFmNGUxMzlmY2QxODJmZGFhMDBhMDI0ODUxZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-11-07T16:00:08Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-11-07T16:00:08Z"}, "message": "i386.c (ix86_expand_builtin): If gather mask argument is known to have all high bits set...\n\n\t* config/i386/i386.c (ix86_expand_builtin): If gather mask\n\targument is known to have all high bits set, pass pc_rtx as\n\tsecond argument to the expander instead of op0.\n\t* config/i386/sse.md (*avx2_gathersi<mode>_2,\n\t*avx2_gatherdi<mode>_2): New patterns.\n\t* config/i386/avx2intrin.h (_mm256_i32gather_pd,\n\t_mm256_i64gather_pd, _mm256_i32gather_ps): Set mask using\n\t_mm256_cmp_pd with zero vector arguments and _CMP_EQ_OQ instead of\n\t_mm256_set1_pd.\n\nFrom-SVN: r181090", "tree": {"sha": "c76018ce8a3bf4d0b9e9c7b74c7f46fd636d2477", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c76018ce8a3bf4d0b9e9c7b74c7f46fd636d2477"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da80a6464e2f41f4e139fcd182fdaa00a024851e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da80a6464e2f41f4e139fcd182fdaa00a024851e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da80a6464e2f41f4e139fcd182fdaa00a024851e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da80a6464e2f41f4e139fcd182fdaa00a024851e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aec7ae7deaef9d52541da07c387066ad6ceb3d87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aec7ae7deaef9d52541da07c387066ad6ceb3d87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aec7ae7deaef9d52541da07c387066ad6ceb3d87"}], "stats": {"total": 125, "additions": 122, "deletions": 3}, "files": [{"sha": "0bfd95afc3de4523a5c79b6c908d993aebe5ff4f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da80a6464e2f41f4e139fcd182fdaa00a024851e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da80a6464e2f41f4e139fcd182fdaa00a024851e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da80a6464e2f41f4e139fcd182fdaa00a024851e", "patch": "@@ -1,5 +1,15 @@\n 2011-11-07  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* config/i386/i386.c (ix86_expand_builtin): If gather mask\n+\targument is known to have all high bits set, pass pc_rtx as\n+\tsecond argument to the expander instead of op0.\n+\t* config/i386/sse.md (*avx2_gathersi<mode>_2,\n+\t*avx2_gatherdi<mode>_2): New patterns.\n+\t* config/i386/avx2intrin.h (_mm256_i32gather_pd,\n+\t_mm256_i64gather_pd, _mm256_i32gather_ps): Set mask using\n+\t_mm256_cmp_pd with zero vector arguments and _CMP_EQ_OQ instead of\n+\t_mm256_set1_pd.\n+\n \tPR tree-optimization/50789\n \t* tree-vect-stmts.c (process_use): Add force argument, avoid\n \texist_non_indexing_operands_for_use_p check if true."}, {"sha": "12ed05fe02986431ec9905d6d7618b0df407a1a8", "filename": "gcc/config/i386/avx2intrin.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da80a6464e2f41f4e139fcd182fdaa00a024851e/gcc%2Fconfig%2Fi386%2Favx2intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da80a6464e2f41f4e139fcd182fdaa00a024851e/gcc%2Fconfig%2Fi386%2Favx2intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx2intrin.h?ref=da80a6464e2f41f4e139fcd182fdaa00a024851e", "patch": "@@ -1252,7 +1252,7 @@ __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_i32gather_pd (double const *base, __m128i index, const int scale)\n {\n   __v4df src = _mm256_setzero_pd ();\n-  __v4df mask = _mm256_set1_pd((double)(long long int) -1);\n+  __v4df mask = _mm256_cmp_pd (src, src, _CMP_EQ_OQ);\n \n   return (__m256d) __builtin_ia32_gathersiv4df (src,\n \t\t\t\t\t\tbase,\n@@ -1304,7 +1304,7 @@ __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_i64gather_pd (double const *base, __m256i index, const int scale)\n {\n   __v4df src = _mm256_setzero_pd ();\n-  __v4df mask = _mm256_set1_pd((double)(long long int) -1);\n+  __v4df mask = _mm256_cmp_pd (src, src, _CMP_EQ_OQ);\n \n   return (__m256d) __builtin_ia32_gatherdiv4df (src,\n \t\t\t\t\t\tbase,\n@@ -1356,7 +1356,7 @@ __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_i32gather_ps (float const *base, __m256i index, const int scale)\n {\n   __v8sf src = _mm256_setzero_ps ();\n-  __v8sf mask = _mm256_set1_ps((float)(int) -1);\n+  __v8sf mask = _mm256_cmp_ps (src, src, _CMP_EQ_OQ);\n \n   return (__m256) __builtin_ia32_gathersiv8sf (src,\n \t\t\t\t\t       base,"}, {"sha": "4461fbba82de2dea65d2a499b292ee204f5da8a9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da80a6464e2f41f4e139fcd182fdaa00a024851e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da80a6464e2f41f4e139fcd182fdaa00a024851e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=da80a6464e2f41f4e139fcd182fdaa00a024851e", "patch": "@@ -29087,6 +29087,71 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n           error (\"last argument must be scale 1, 2, 4, 8\");\n           return const0_rtx;\n \t}\n+\n+      /* Optimize.  If mask is known to have all high bits set,\n+\t replace op0 with pc_rtx to signal that the instruction\n+\t overwrites the whole destination and doesn't use its\n+\t previous contents.  */\n+      if (optimize)\n+\t{\n+\t  if (TREE_CODE (arg3) == VECTOR_CST)\n+\t    {\n+\t      tree elt;\n+\t      unsigned int negative = 0;\n+\t      for (elt = TREE_VECTOR_CST_ELTS (arg3);\n+\t\t   elt; elt = TREE_CHAIN (elt))\n+\t\t{\n+\t\t  tree cst = TREE_VALUE (elt);\n+\t\t  if (TREE_CODE (cst) == INTEGER_CST\n+\t\t      && tree_int_cst_sign_bit (cst))\n+\t\t    negative++;\n+\t\t  else if (TREE_CODE (cst) == REAL_CST\n+\t\t\t   && REAL_VALUE_NEGATIVE (TREE_REAL_CST (cst)))\n+\t\t    negative++;\n+\t\t}\n+\t      if (negative == TYPE_VECTOR_SUBPARTS (TREE_TYPE (arg3)))\n+\t\top0 = pc_rtx;\n+\t    }\n+\t  else if (TREE_CODE (arg3) == SSA_NAME)\n+\t    {\n+\t      /* Recognize also when mask is like:\n+\t\t __v2df src = _mm_setzero_pd ();\n+\t\t __v2df mask = _mm_cmpeq_pd (src, src);\n+\t\t or\n+\t\t __v8sf src = _mm256_setzero_ps ();\n+\t\t __v8sf mask = _mm256_cmp_ps (src, src, _CMP_EQ_OQ);\n+\t\t as that is a cheaper way to load all ones into\n+\t\t a register than having to load a constant from\n+\t\t memory.  */\n+\t      gimple def_stmt = SSA_NAME_DEF_STMT (arg3);\n+\t      if (is_gimple_call (def_stmt))\n+\t\t{\n+\t\t  tree fndecl = gimple_call_fndecl (def_stmt);\n+\t\t  if (fndecl\n+\t\t      && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n+\t\t    switch ((unsigned int) DECL_FUNCTION_CODE (fndecl))\n+\t\t      {\n+\t\t      case IX86_BUILTIN_CMPPD:\n+\t\t      case IX86_BUILTIN_CMPPS:\n+\t\t      case IX86_BUILTIN_CMPPD256:\n+\t\t      case IX86_BUILTIN_CMPPS256:\n+\t\t\tif (!integer_zerop (gimple_call_arg (def_stmt, 2)))\n+\t\t\t  break;\n+\t\t\t/* FALLTHRU */\n+\t\t      case IX86_BUILTIN_CMPEQPD:\n+\t\t      case IX86_BUILTIN_CMPEQPS:\n+\t\t\tif (initializer_zerop (gimple_call_arg (def_stmt, 0))\n+\t\t\t    && initializer_zerop (gimple_call_arg (def_stmt,\n+\t\t\t\t\t\t\t\t   1)))\n+\t\t\t  op0 = pc_rtx;\n+\t\t\tbreak;\n+\t\t      default:\n+\t\t\tbreak;\n+\t\t      }\n+\t\t}\n+\t    }\n+\t}\n+\n       pat = GEN_FCN (icode) (subtarget, op0, op1, op2, op3, op4);\n       if (! pat)\n \treturn const0_rtx;"}, {"sha": "688b5be9648aab45cbcf9cbef833f0d7bc88180e", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da80a6464e2f41f4e139fcd182fdaa00a024851e/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da80a6464e2f41f4e139fcd182fdaa00a024851e/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=da80a6464e2f41f4e139fcd182fdaa00a024851e", "patch": "@@ -12567,6 +12567,26 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"*avx2_gathersi<mode>_2\"\n+  [(set (match_operand:VEC_GATHER_MODE 0 \"register_operand\" \"=&x\")\n+\t(unspec:VEC_GATHER_MODE\n+\t  [(pc)\n+\t   (match_operator:<ssescalarmode> 6 \"vsib_mem_operator\"\n+\t     [(unspec:P\n+\t\t[(match_operand:P 2 \"vsib_address_operand\" \"p\")\n+\t\t (match_operand:<VEC_GATHER_IDXSI> 3 \"register_operand\" \"x\")\n+\t\t (match_operand:SI 5 \"const1248_operand\" \"n\")]\n+\t\tUNSPEC_VSIBADDR)])\n+\t   (mem:BLK (scratch))\n+\t   (match_operand:VEC_GATHER_MODE 4 \"register_operand\" \"1\")]\n+\t  UNSPEC_GATHER))\n+   (clobber (match_scratch:VEC_GATHER_MODE 1 \"=&x\"))]\n+  \"TARGET_AVX2\"\n+  \"v<sseintprefix>gatherd<ssemodesuffix>\\t{%1, %6, %0|%0, %6, %1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_expand \"avx2_gatherdi<mode>\"\n   [(parallel [(set (match_operand:VEC_GATHER_MODE 0 \"register_operand\" \"\")\n \t\t   (unspec:VEC_GATHER_MODE\n@@ -12608,3 +12628,27 @@\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"*avx2_gatherdi<mode>_2\"\n+  [(set (match_operand:VEC_GATHER_MODE 0 \"register_operand\" \"=&x\")\n+\t(unspec:VEC_GATHER_MODE\n+\t  [(pc)\n+\t   (match_operator:<ssescalarmode> 6 \"vsib_mem_operator\"\n+\t     [(unspec:P\n+\t\t[(match_operand:P 2 \"vsib_address_operand\" \"p\")\n+\t\t (match_operand:<VEC_GATHER_IDXDI> 3 \"register_operand\" \"x\")\n+\t\t (match_operand:SI 5 \"const1248_operand\" \"n\")]\n+\t\tUNSPEC_VSIBADDR)])\n+\t   (mem:BLK (scratch))\n+\t   (match_operand:<VEC_GATHER_SRCDI> 4 \"register_operand\" \"1\")]\n+\t  UNSPEC_GATHER))\n+   (clobber (match_scratch:VEC_GATHER_MODE 1 \"=&x\"))]\n+  \"TARGET_AVX2\"\n+{\n+  if (<MODE>mode != <VEC_GATHER_SRCDI>mode)\n+    return \"v<sseintprefix>gatherq<ssemodesuffix>\\t{%4, %6, %x0|%x0, %6, %4}\";\n+  return \"v<sseintprefix>gatherq<ssemodesuffix>\\t{%4, %6, %0|%0, %6, %4}\";\n+}\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])"}]}