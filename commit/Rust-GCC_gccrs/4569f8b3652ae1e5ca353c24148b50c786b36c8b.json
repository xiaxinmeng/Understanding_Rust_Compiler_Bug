{"sha": "4569f8b3652ae1e5ca353c24148b50c786b36c8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU2OWY4YjM2NTJhZTFlNWNhMzUzYzI0MTQ4YjUwYzc4NmIzNmM4Yg==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2019-12-02T03:52:15Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2019-12-02T03:52:15Z"}, "message": "Fix bugs relating to flexibly-sized objects in nios2 backend.\n\n2019-12-01  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tFix bugs relating to flexibly-sized objects in nios2 backend.\n\n\tPR target/92499\n\n\tgcc/c/\n\t* c-decl.c (flexible_array_type_p): Move to common code.\n\n\tgcc/\n\t* config/nios2/nios2.c (nios2_in_small_data_p): Do not consider\n\tobjects of flexible types to be small if they have internal linkage\n\tor are declared extern.\n\t* config/nios2/nios2.h (ASM_OUTPUT_ALIGNED_LOCAL): Replace with...\n\t(ASM_OUTPUT_ALIGNED_DECL_LOCAL): ...this.  Use targetm.in_small_data_p\n\tinstead of the size of the object initializer.\n\t* tree.c (flexible_array_type_p): Move from C front end, and\n\tgeneralize to handle fields in non-C structures.\n\t* tree.h (flexible_array_type_p): Declare.\n\n\tgcc/testsuite/\n\t* gcc.target/nios2/pr92499-1.c: New.\n\t* gcc.target/nios2/pr92499-2.c: New.\n\t* gcc.target/nios2/pr92499-3.c: New.\n\nFrom-SVN: r278891", "tree": {"sha": "f22f9ae555d8f38b980718893ef0bc8f71976ea5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f22f9ae555d8f38b980718893ef0bc8f71976ea5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4569f8b3652ae1e5ca353c24148b50c786b36c8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4569f8b3652ae1e5ca353c24148b50c786b36c8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4569f8b3652ae1e5ca353c24148b50c786b36c8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4569f8b3652ae1e5ca353c24148b50c786b36c8b/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e549dd44b5ff0547004a640554ebe55f1ce2936b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e549dd44b5ff0547004a640554ebe55f1ce2936b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e549dd44b5ff0547004a640554ebe55f1ce2936b"}], "stats": {"total": 235, "additions": 199, "deletions": 36}, "files": [{"sha": "9a807baa38e8e31c8198c1609fb008a898c0d4a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4569f8b3652ae1e5ca353c24148b50c786b36c8b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4569f8b3652ae1e5ca353c24148b50c786b36c8b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4569f8b3652ae1e5ca353c24148b50c786b36c8b", "patch": "@@ -1,3 +1,17 @@\n+2019-12-01  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR target/92499\n+\n+\t* config/nios2/nios2.c (nios2_in_small_data_p): Do not consider\n+\tobjects of flexible types to be small if they have internal linkage\n+\tor are declared extern.\n+\t* config/nios2/nios2.h (ASM_OUTPUT_ALIGNED_LOCAL): Replace with...\n+\t(ASM_OUTPUT_ALIGNED_DECL_LOCAL): ...this.  Use targetm.in_small_data_p\n+\tinstead of the size of the object initializer.\n+\t* tree.c (flexible_array_type_p): Move from C front end, and\n+\tgeneralize to handle fields in non-C structures.\n+\t* tree.h (flexible_array_type_p): Declare.\n+\n 2019-11-30  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* profile-count.h (profile_count::operator<): Use IPA value for"}, {"sha": "c04443ea6f9f9178f8813e1591834dd8592a9b08", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4569f8b3652ae1e5ca353c24148b50c786b36c8b/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4569f8b3652ae1e5ca353c24148b50c786b36c8b/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=4569f8b3652ae1e5ca353c24148b50c786b36c8b", "patch": "@@ -1,3 +1,9 @@\n+2019-12-01  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR target/92499\n+\n+\t* c-decl.c (flexible_array_type_p): Move to common code.\n+\n 2019-11-30  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* c-decl.c (start_decl): Allow initialization of variables whose"}, {"sha": "bf1857dc3fae63bf5ef845018d740c26e23214dc", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4569f8b3652ae1e5ca353c24148b50c786b36c8b/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4569f8b3652ae1e5ca353c24148b50c786b36c8b/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=4569f8b3652ae1e5ca353c24148b50c786b36c8b", "patch": "@@ -5709,39 +5709,6 @@ check_compound_literal_type (location_t loc, struct c_type_name *type_name)\n \t\t\"defining a type in a compound literal is invalid in C++\");\n }\n \f\n-/* Determine whether TYPE is a structure with a flexible array member,\n-   or a union containing such a structure (possibly recursively).  */\n-\n-static bool\n-flexible_array_type_p (tree type)\n-{\n-  tree x;\n-  switch (TREE_CODE (type))\n-    {\n-    case RECORD_TYPE:\n-      x = TYPE_FIELDS (type);\n-      if (x == NULL_TREE)\n-\treturn false;\n-      while (DECL_CHAIN (x) != NULL_TREE)\n-\tx = DECL_CHAIN (x);\n-      if (TREE_CODE (TREE_TYPE (x)) == ARRAY_TYPE\n-\t  && TYPE_SIZE (TREE_TYPE (x)) == NULL_TREE\n-\t  && TYPE_DOMAIN (TREE_TYPE (x)) != NULL_TREE\n-\t  && TYPE_MAX_VALUE (TYPE_DOMAIN (TREE_TYPE (x))) == NULL_TREE)\n-\treturn true;\n-      return false;\n-    case UNION_TYPE:\n-      for (x = TYPE_FIELDS (type); x != NULL_TREE; x = DECL_CHAIN (x))\n-\t{\n-\t  if (flexible_array_type_p (TREE_TYPE (x)))\n-\t    return true;\n-\t}\n-      return false;\n-    default:\n-    return false;\n-  }\n-}\n-\f\n /* Performs sanity checks on the TYPE and WIDTH of the bit-field NAME,\n    replacing with appropriate values if they are invalid.  */\n "}, {"sha": "ca6222658a956e841767265c694673fecbc37140", "filename": "gcc/config/nios2/nios2.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4569f8b3652ae1e5ca353c24148b50c786b36c8b/gcc%2Fconfig%2Fnios2%2Fnios2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4569f8b3652ae1e5ca353c24148b50c786b36c8b/gcc%2Fconfig%2Fnios2%2Fnios2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.c?ref=4569f8b3652ae1e5ca353c24148b50c786b36c8b", "patch": "@@ -2373,6 +2373,22 @@ nios2_in_small_data_p (const_tree exp)\n \t  if (nios2_small_section_name_p (section))\n \t    return true;\n \t}\n+      else if (flexible_array_type_p (TREE_TYPE (exp))\n+\t       && (!TREE_PUBLIC (exp) || DECL_EXTERNAL (exp)))\n+\t{\n+\t  /* We really should not consider any objects of any flexibly-sized\n+\t     type to be small data, but pre-GCC 10 did not test\n+\t     for this and just fell through to the next case.  Thus older\n+\t     code compiled with -mgpopt=global could contain GP-relative\n+\t     accesses to objects defined in this compilation unit with\n+\t     external linkage.  We retain the possible small-data treatment\n+\t     of such definitions for backward ABI compatibility, but\n+\t     no longer generate GP-relative accesses for external\n+\t     references (so that the ABI could be changed in the future\n+\t     with less potential impact), or objects with internal\n+\t     linkage.  */\n+\t  return false;\n+\t}\n       else\n \t{\n \t  HOST_WIDE_INT size = int_size_in_bytes (TREE_TYPE (exp));"}, {"sha": "886716527073cb943c13ba21848e9ff6a384e449", "filename": "gcc/config/nios2/nios2.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4569f8b3652ae1e5ca353c24148b50c786b36c8b/gcc%2Fconfig%2Fnios2%2Fnios2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4569f8b3652ae1e5ca353c24148b50c786b36c8b/gcc%2Fconfig%2Fnios2%2Fnios2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.h?ref=4569f8b3652ae1e5ca353c24148b50c786b36c8b", "patch": "@@ -467,10 +467,10 @@ while (0)\n    the linker seems to want the alignment of data objects\n    to depend on their types.  We do exactly that here.  */\n \n-#undef  ASM_OUTPUT_ALIGNED_LOCAL\n-#define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGN)               \\\n+#undef  ASM_OUTPUT_ALIGNED_DECL_LOCAL\n+#define ASM_OUTPUT_ALIGNED_DECL_LOCAL(FILE, DECL, NAME, SIZE, ALIGN)\t\\\n do {                                                                    \\\n-  if ((SIZE) <= nios2_section_threshold)                                \\\n+ if (targetm.in_small_data_p (DECL))\t\t\t\t\t\\\n     switch_to_section (sbss_section);\t\t\t\t\t\\\n   else                                                                  \\\n     switch_to_section (bss_section);\t\t\t\t\t\\"}, {"sha": "edf8eadae037175157bf84c9f2d70ba0a30d6e58", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4569f8b3652ae1e5ca353c24148b50c786b36c8b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4569f8b3652ae1e5ca353c24148b50c786b36c8b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4569f8b3652ae1e5ca353c24148b50c786b36c8b", "patch": "@@ -1,3 +1,11 @@\n+2019-12-01  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR target/92499\n+\n+\t* gcc.target/nios2/pr92499-1.c: New.\n+\t* gcc.target/nios2/pr92499-2.c: New.\n+\t* gcc.target/nios2/pr92499-3.c: New.\n+\n 2019-12-02  Luo Xiong Hu  <luoxhu@linux.ibm.com>\n \n \ttestsuite/pr92398"}, {"sha": "3985917a10c44993fc0d82683151febe09009444", "filename": "gcc/testsuite/gcc.target/nios2/pr92499-1.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4569f8b3652ae1e5ca353c24148b50c786b36c8b/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fpr92499-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4569f8b3652ae1e5ca353c24148b50c786b36c8b/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fpr92499-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fpr92499-1.c?ref=4569f8b3652ae1e5ca353c24148b50c786b36c8b", "patch": "@@ -0,0 +1,48 @@\n+/* PR target/92499 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mgpopt=global -G8\" } */\n+\n+/* Check placement and addressing of flexibly-sized objects with internal\n+   linkage.  */\n+\n+enum { size = 100 };\n+\n+struct flexible\n+{\n+  int length;\n+  int data[];\n+};\n+\n+static struct flexible local_flexible =\n+  {\n+    .data = { [size - 1] = 0, }\n+  };\n+\n+static struct flexible local_flexible_nonzero =\n+  {\n+    .length = size,\n+    .data = { [size - 1] = 0, }\n+  };\n+\n+struct flexible *\n+get_local_flexible (void)\n+{\n+  return &local_flexible;\n+}\n+\n+struct flexible *\n+get_local_flexible_nonzero (void)\n+{\n+  return &local_flexible_nonzero;\n+}\n+\n+/* We should not place the flexibly-sized objects in small data\n+   sections, or generate gp-relative addresses for them.  */\n+\n+/* { dg-final { scan-assembler-not \"\\\\.sdata\" } } */\n+/* { dg-final { scan-assembler-not \"\\\\.sbss\" } } */\n+/* { dg-final { scan-assembler-not \"%gprel\\(.*flexible.*\\)\" } } */\n+\n+\n+\n+"}, {"sha": "e253d0a056ab9f47ce7d770391f0f10440c18652", "filename": "gcc/testsuite/gcc.target/nios2/pr92499-2.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4569f8b3652ae1e5ca353c24148b50c786b36c8b/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fpr92499-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4569f8b3652ae1e5ca353c24148b50c786b36c8b/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fpr92499-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fpr92499-2.c?ref=4569f8b3652ae1e5ca353c24148b50c786b36c8b", "patch": "@@ -0,0 +1,45 @@\n+/* PR target/92499 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mgpopt=global -G8\" } */\n+\n+/* Check placement and addressing of flexibly-sized objects with external\n+   linkage.  */\n+\n+enum { size = 100 };\n+\n+struct flexible\n+{\n+  int length;\n+  int data[];\n+};\n+\n+extern struct flexible global_flexible;\n+struct flexible global_flexible =\n+  {\n+    .data = { [size - 1] = 0, }\n+  };\n+\n+extern struct flexible global_flexible_nonzero;\n+struct flexible global_flexible_nonzero =\n+  {\n+    .length = size,\n+    .data = { [size - 1] = 0, }\n+  };\n+\n+struct flexible *\n+get_global_flexible (void)\n+{\n+  return &global_flexible;\n+}\n+\n+struct flexible *\n+get_global_flexible_nonzero (void)\n+{\n+  return &global_flexible_nonzero;\n+}\n+\n+/* To preserve ABI compatibility we place the flexibly-sized objects in\n+   small data sections.  */\n+\n+/* { dg-final { scan-assembler-times \"\\\\.sdata\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\\\.sbss\" 1 } } */"}, {"sha": "faeef050acfa4d71316e977bf91634e15d3e3297", "filename": "gcc/testsuite/gcc.target/nios2/pr92499-3.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4569f8b3652ae1e5ca353c24148b50c786b36c8b/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fpr92499-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4569f8b3652ae1e5ca353c24148b50c786b36c8b/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fpr92499-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fpr92499-3.c?ref=4569f8b3652ae1e5ca353c24148b50c786b36c8b", "patch": "@@ -0,0 +1,23 @@\n+/* PR target/92499 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mgpopt=global -G8\" } */\n+\n+/* Check addressing of extern flexibly-sized objects.  */\n+\n+struct flexible\n+{\n+  int length;\n+  int data[];\n+};\n+\n+extern struct flexible extern_flexible;\n+\n+struct flexible *\n+get_extern_flexible (void)\n+{\n+  return &extern_flexible;\n+}\n+\n+/* We should not generate GP-relative addresses for external objects of\n+   unknown size.  */\n+/* { dg-final { scan-assembler-not \"%gprel\\(.*flexible.*\\)\" } } */"}, {"sha": "7a66d1003ee2887d938eaa0483916333f8ce237a", "filename": "gcc/tree.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4569f8b3652ae1e5ca353c24148b50c786b36c8b/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4569f8b3652ae1e5ca353c24148b50c786b36c8b/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=4569f8b3652ae1e5ca353c24148b50c786b36c8b", "patch": "@@ -15003,6 +15003,41 @@ default_is_empty_record (const_tree type)\n   return default_is_empty_type (TYPE_MAIN_VARIANT (type));\n }\n \n+/* Determine whether TYPE is a structure with a flexible array member,\n+   or a union containing such a structure (possibly recursively).  */\n+\n+bool\n+flexible_array_type_p (const_tree type)\n+{\n+  tree x, last;\n+  switch (TREE_CODE (type))\n+    {\n+    case RECORD_TYPE:\n+      last = NULL_TREE;\n+      for (x = TYPE_FIELDS (type); x != NULL_TREE; x = DECL_CHAIN (x))\n+\tif (TREE_CODE (x) == FIELD_DECL)\n+\t  last = x;\n+      if (last == NULL_TREE)\n+\treturn false;\n+      if (TREE_CODE (TREE_TYPE (last)) == ARRAY_TYPE\n+\t  && TYPE_SIZE (TREE_TYPE (last)) == NULL_TREE\n+\t  && TYPE_DOMAIN (TREE_TYPE (last)) != NULL_TREE\n+\t  && TYPE_MAX_VALUE (TYPE_DOMAIN (TREE_TYPE (last))) == NULL_TREE)\n+\treturn true;\n+      return false;\n+    case UNION_TYPE:\n+      for (x = TYPE_FIELDS (type); x != NULL_TREE; x = DECL_CHAIN (x))\n+\t{\n+\t  if (TREE_CODE (x) == FIELD_DECL\n+\t      && flexible_array_type_p (TREE_TYPE (x)))\n+\t    return true;\n+\t}\n+      return false;\n+    default:\n+      return false;\n+  }\n+}\n+\n /* Like int_size_in_bytes, but handle empty records specially.  */\n \n HOST_WIDE_INT"}, {"sha": "fb09758a05af83232bfc58cb032029d1d31928a1", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4569f8b3652ae1e5ca353c24148b50c786b36c8b/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4569f8b3652ae1e5ca353c24148b50c786b36c8b/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=4569f8b3652ae1e5ca353c24148b50c786b36c8b", "patch": "@@ -6138,6 +6138,7 @@ extern void gt_pch_nx (tree &, gt_pointer_operator, void *);\n \n extern bool nonnull_arg_p (const_tree);\n extern bool default_is_empty_record (const_tree);\n+extern bool flexible_array_type_p (const_tree);\n extern HOST_WIDE_INT arg_int_size_in_bytes (const_tree);\n extern tree arg_size_in_bytes (const_tree);\n extern bool expr_type_first_operand_type_p (tree_code);"}]}