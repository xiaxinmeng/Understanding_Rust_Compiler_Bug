{"sha": "4b1c635450494b9aa044f355cb4fb87fcc0841eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGIxYzYzNTQ1MDQ5NGI5YWEwNDRmMzU1Y2I0ZmI4N2ZjYzA4NDFlYg==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2008-05-20T12:50:52Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-05-20T12:50:52Z"}, "message": "sem_dist.ads, [...] (Is_RACW_Stub_Type_Operation): New subprogram.\n\n2008-05-20  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_dist.ads, sem_dist.adb (Is_RACW_Stub_Type_Operation): New\n\tsubprogram.\n\n\t* sem_type.adb\n\t(Add_One_Interp): Ignore any interpretation that is a primitive\n\toperation of an RACW stub type (these primitives are only executed\n\tthrough dispatching, never through static calls).\n\t(Collect_Interps): When only one interpretation has been found, set N's\n\tEntity and Etype to that interpretation, otherwise Entity and Etype may\n\tstill refer to an interpretation that was ignored by Add_One_Interp,\n\tin which case would end up with being marked as not overloaded but with\n\tan Entity attribute not pointing to its (unique) correct interpretation.\n\nFrom-SVN: r135642", "tree": {"sha": "2d97f29ba15bb1b120dae1b2612fc1ef333715f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d97f29ba15bb1b120dae1b2612fc1ef333715f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b1c635450494b9aa044f355cb4fb87fcc0841eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b1c635450494b9aa044f355cb4fb87fcc0841eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b1c635450494b9aa044f355cb4fb87fcc0841eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b1c635450494b9aa044f355cb4fb87fcc0841eb/comments", "author": null, "committer": null, "parents": [{"sha": "ff81221b5bd3b8101301e4eaaa15bde8b0553b00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff81221b5bd3b8101301e4eaaa15bde8b0553b00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff81221b5bd3b8101301e4eaaa15bde8b0553b00"}], "stats": {"total": 55, "additions": 46, "deletions": 9}, "files": [{"sha": "0be68edc9f389cb99aa0219301e785c0bb3dd7b1", "filename": "gcc/ada/sem_dist.adb", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1c635450494b9aa044f355cb4fb87fcc0841eb/gcc%2Fada%2Fsem_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1c635450494b9aa044f355cb4fb87fcc0841eb/gcc%2Fada%2Fsem_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dist.adb?ref=4b1c635450494b9aa044f355cb4fb87fcc0841eb", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,6 +35,7 @@ with Namet;    use Namet;\n with Opt;      use Opt;\n with Rtsfind;  use Rtsfind;\n with Sem;      use Sem;\n+with Sem_Disp; use Sem_Disp;\n with Sem_Eval; use Sem_Eval;\n with Sem_Res;  use Sem_Res;\n with Sem_Util; use Sem_Util;\n@@ -268,12 +269,33 @@ package body Sem_Dist is\n       end if;\n    end Is_All_Remote_Call;\n \n+   ---------------------------------\n+   -- Is_RACW_Stub_Type_Operation --\n+   ---------------------------------\n+\n+   function Is_RACW_Stub_Type_Operation (Op : Entity_Id) return Boolean is\n+      Dispatching_Type : Entity_Id;\n+\n+   begin\n+      case Ekind (Op) is\n+         when E_Function | E_Procedure =>\n+            Dispatching_Type := Find_Dispatching_Type (Op);\n+            return Present (Dispatching_Type)\n+                     and then Is_RACW_Stub_Type (Dispatching_Type)\n+                     and then not Is_Internal (Op);\n+\n+         when others =>\n+            return False;\n+      end case;\n+   end Is_RACW_Stub_Type_Operation;\n+\n    ------------------------------------\n    -- Package_Specification_Of_Scope --\n    ------------------------------------\n \n    function Package_Specification_Of_Scope (E : Entity_Id) return Node_Id is\n       N : Node_Id := Parent (E);\n+\n    begin\n       while Nkind (N) /= N_Package_Specification loop\n          N := Parent (N);"}, {"sha": "38a164a418fc9dc5cca8dcae6e34f82501e38034", "filename": "gcc/ada/sem_dist.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1c635450494b9aa044f355cb4fb87fcc0841eb/gcc%2Fada%2Fsem_dist.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1c635450494b9aa044f355cb4fb87fcc0841eb/gcc%2Fada%2Fsem_dist.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dist.ads?ref=4b1c635450494b9aa044f355cb4fb87fcc0841eb", "patch": "@@ -100,4 +100,7 @@ package Sem_Dist is\n    function Package_Specification_Of_Scope (E : Entity_Id) return Node_Id;\n    --  Return the N_Package_Specification corresponding to a scope E\n \n+   function Is_RACW_Stub_Type_Operation (Op : Entity_Id) return Boolean;\n+   --  True when Op is a primitive operation of an RACW stub type\n+\n end Sem_Dist;"}, {"sha": "c36125f52aad193660a0669e31f79edfada583d2", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1c635450494b9aa044f355cb4fb87fcc0841eb/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1c635450494b9aa044f355cb4fb87fcc0841eb/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=4b1c635450494b9aa044f355cb4fb87fcc0841eb", "patch": "@@ -39,6 +39,7 @@ with Sem_Ch6;  use Sem_Ch6;\n with Sem_Ch8;  use Sem_Ch8;\n with Sem_Ch12; use Sem_Ch12;\n with Sem_Disp; use Sem_Disp;\n+with Sem_Dist; use Sem_Dist;\n with Sem_Util; use Sem_Util;\n with Stand;    use Stand;\n with Sinfo;    use Sinfo;\n@@ -403,10 +404,9 @@ package body Sem_Type is\n             return;\n          end if;\n \n-      --  In an instance, an abstract non-dispatching operation cannot\n-      --  be a candidate interpretation, because it could not have been\n-      --  one in the generic (it may be a spurious overloading in the\n-      --  instance).\n+      --  In an instance, an abstract non-dispatching operation cannot be a\n+      --  candidate interpretation, because it could not have been one in the\n+      --  generic (it may be a spurious overloading in the instance).\n \n       elsif In_Instance\n         and then Is_Overloadable (E)\n@@ -415,9 +415,9 @@ package body Sem_Type is\n       then\n          return;\n \n-      --  An inherited interface operation that is implemented by some\n-      --  derived type does not participate in overload resolution, only\n-      --  the implementation operation does.\n+      --  An inherited interface operation that is implemented by some derived\n+      --  type does not participate in overload resolution, only the\n+      --  implementation operation does.\n \n       elsif Is_Hidden (E)\n         and then Is_Subprogram (E)\n@@ -438,6 +438,12 @@ package body Sem_Type is\n          end if;\n \n          return;\n+\n+      --  Calling stubs for an RACW operation never participate in resolution,\n+      --  they are executed only through dispatching calls.\n+\n+      elsif Is_RACW_Stub_Type_Operation (E) then\n+         return;\n       end if;\n \n       --  If this is the first interpretation of N, N has type Any_Type.\n@@ -681,9 +687,15 @@ package body Sem_Type is\n \n       if All_Interp.Last = First_Interp + 1 then\n \n-         --  The original interpretation is in fact not overloaded\n+         --  The final interpretation is in fact not overloaded. Note that the\n+         --  unique legal interpretation may or may not be the original one,\n+         --  so we need to update N's entity and etype now, because once N\n+         --  is marked as not overloaded it is also expected to carry the\n+         --  proper interpretation.\n \n          Set_Is_Overloaded (N, False);\n+         Set_Entity (N, All_Interp.Table (First_Interp).Nam);\n+         Set_Etype  (N, All_Interp.Table (First_Interp).Typ);\n       end if;\n    end Collect_Interps;\n "}]}