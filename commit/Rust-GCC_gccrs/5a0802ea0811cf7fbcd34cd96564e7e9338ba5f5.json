{"sha": "5a0802ea0811cf7fbcd34cd96564e7e9338ba5f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWEwODAyZWEwODExY2Y3ZmJjZDM0Y2Q5NjU2NGU3ZTkzMzhiYTVmNQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2016-04-26T11:32:26Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2016-04-26T11:32:26Z"}, "message": "Bootstrapped/regtested on x86_64-linux, ok for trunk?\n\n2016-04-25  Marek Polacek  <polacek@redhat.com>\n\n\tPR c++/70744\n\t* call.c (build_conditional_expr_1): Call cp_stabilize_reference\n\tinstead of stabilize_reference.\n\t(build_over_call): Likewise.\n\t* cp-tree.h (cp_stabilize_reference): Declare.\n\t* tree.c (cp_stabilize_reference): New function.\n\t* typeck.c (cp_build_unary_op): Call cp_stabilize_reference instead of\n\tstabilize_reference.\n\t(unary_complex_lvalue): Likewise.\n\t(cp_build_modify_expr): Likewise.\n\n\t* g++.dg/ext/cond2.C: New test.\n\ndiff --git gcc/cp/call.c gcc/cp/call.c\nindex 11f2d42..476e806 100644\n--- gcc/cp/call.c\n+++ gcc/cp/call.c\n@@ -4634,7 +4634,7 @@ build_conditional_expr_1 (location_t loc, tree arg1, tree arg2, tree arg3,\n \n       /* Make sure that lvalues remain lvalues.  See g++.oliva/ext1.C.  */\n       if (real_lvalue_p (arg1))\n-\targ2 = arg1 = stabilize_reference (arg1);\n+\targ2 = arg1 = cp_stabilize_reference (arg1);\n       else\n \targ2 = arg1 = save_expr (arg1);\n     }\n@@ -7644,8 +7644,9 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t       || (TREE_CODE (arg) == TARGET_EXPR\n \t\t   && !unsafe_copy_elision_p (fa, arg)))\n \t{\n-\t  tree to = stabilize_reference (cp_build_indirect_ref (fa, RO_NULL,\n-\t\t\t\t\t\t\t\tcomplain));\n+\t  tree to = cp_stabilize_reference (cp_build_indirect_ref (fa,\n+\t\t\t\t\t\t\t\t   RO_NULL,\n+\t\t\t\t\t\t\t\t   complain));\n \n \t  val = build2 (INIT_EXPR, DECL_CONTEXT (fn), to, arg);\n \t  return val;\n@@ -7655,7 +7656,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t   && trivial_fn_p (fn)\n \t   && !DECL_DELETED_FN (fn))\n     {\n-      tree to = stabilize_reference\n+      tree to = cp_stabilize_reference\n \t(cp_build_indirect_ref (argarray[0], RO_NULL, complain));\n       tree type = TREE_TYPE (to);\n       tree as_base = CLASSTYPE_AS_BASE (type);\ndiff --git gcc/cp/cp-tree.h gcc/cp/cp-tree.h\nindex ec92718..0e46ae1 100644\n--- gcc/cp/cp-tree.h\n+++ gcc/cp/cp-tree.h\n@@ -6494,6 +6494,7 @@ extern cp_lvalue_kind real_lvalue_p\t\t(const_tree);\n extern cp_lvalue_kind lvalue_kind\t\t(const_tree);\n extern bool lvalue_or_rvalue_with_address_p\t(const_tree);\n extern bool xvalue_p\t                        (const_tree);\n+extern tree cp_stabilize_reference\t\t(tree);\n extern bool builtin_valid_in_constant_expr_p    (const_tree);\n extern tree build_min\t\t\t\t(enum tree_code, tree, ...);\n extern tree build_min_nt_loc\t\t\t(location_t, enum tree_code,\ndiff --git gcc/cp/tree.c gcc/cp/tree.c\nindex 112c8c7..137186f 100644\n--- gcc/cp/tree.c\n+++ gcc/cp/tree.c\n@@ -296,6 +296,46 @@ xvalue_p (const_tree ref)\n   return (lvalue_kind (ref) == clk_rvalueref);\n }\n \n+/* C++-specific version of stabilize_reference.  */\n+\n+tree\n+cp_stabilize_reference (tree ref)\n+{\n+  switch (TREE_CODE (ref))\n+    {\n+    /* We need to treat specially anything stabilize_reference doesn't\n+       handle specifically.  */\n+    case VAR_DECL:\n+    case PARM_DECL:\n+    case RESULT_DECL:\n+    CASE_CONVERT:\n+    case FLOAT_EXPR:\n+    case FIX_TRUNC_EXPR:\n+    case INDIRECT_REF:\n+    case COMPONENT_REF:\n+    case BIT_FIELD_REF:\n+    case ARRAY_REF:\n+    case ARRAY_RANGE_REF:\n+    case COMPOUND_EXPR:\n+    case ERROR_MARK:\n+      break;\n+    default:\n+      cp_lvalue_kind kind = lvalue_kind (ref);\n+      if ((kind & ~clk_class) != clk_none)\n+\t{\n+\t  tree type = unlowered_expr_type (ref);\n+\t  bool rval = !!(kind & clk_rvalueref);\n+\t  type = cp_build_reference_type (type, rval);\n+\t  /* This inhibits warnings in, eg, cxx_mark_addressable\n+\t     (c++/60955).  */\n+\t  warning_sentinel s (extra_warnings);\n+\t  ref = build_static_cast (type, ref, tf_error);\n+\t}\n+    }\n+\n+  return stabilize_reference (ref);\n+}\n+\n /* Test whether DECL is a builtin that may appear in a\n    constant-expression. */\n \ndiff --git gcc/cp/typeck.c gcc/cp/typeck.c\nindex cef5604..7e12009 100644\n--- gcc/cp/typeck.c\n+++ gcc/cp/typeck.c\n@@ -5912,7 +5912,7 @@ cp_build_unary_op (enum tree_code code, tree xarg, int noconvert,\n \t{\n \t  tree real, imag;\n \n-\t  arg = stabilize_reference (arg);\n+\t  arg = cp_stabilize_reference (arg);\n \t  real = cp_build_unary_op (REALPART_EXPR, arg, 1, complain);\n \t  imag = cp_build_unary_op (IMAGPART_EXPR, arg, 1, complain);\n \t  real = cp_build_unary_op (code, real, 1, complain);\n@@ -6112,7 +6112,7 @@ unary_complex_lvalue (enum tree_code code, tree arg)\n       tree lvalue = TREE_OPERAND (arg, 0);\n       if (TREE_SIDE_EFFECTS (lvalue))\n \t{\n-\t  lvalue = stabilize_reference (lvalue);\n+\t  lvalue = cp_stabilize_reference (lvalue);\n \t  arg = build2 (TREE_CODE (arg), TREE_TYPE (arg),\n \t\t\tlvalue, TREE_OPERAND (arg, 1));\n \t}\n@@ -7496,7 +7496,7 @@ cp_build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs,\n     case PREINCREMENT_EXPR:\n       if (TREE_SIDE_EFFECTS (TREE_OPERAND (lhs, 0)))\n \tlhs = build2 (TREE_CODE (lhs), TREE_TYPE (lhs),\n-\t\t      stabilize_reference (TREE_OPERAND (lhs, 0)),\n+\t\t      cp_stabilize_reference (TREE_OPERAND (lhs, 0)),\n \t\t      TREE_OPERAND (lhs, 1));\n       newrhs = cp_build_modify_expr (TREE_OPERAND (lhs, 0),\n \t\t\t\t     modifycode, rhs, complain);\n@@ -7516,7 +7516,7 @@ cp_build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs,\n     case MODIFY_EXPR:\n       if (TREE_SIDE_EFFECTS (TREE_OPERAND (lhs, 0)))\n \tlhs = build2 (TREE_CODE (lhs), TREE_TYPE (lhs),\n-\t\t      stabilize_reference (TREE_OPERAND (lhs, 0)),\n+\t\t      cp_stabilize_reference (TREE_OPERAND (lhs, 0)),\n \t\t      TREE_OPERAND (lhs, 1));\n       newrhs = cp_build_modify_expr (TREE_OPERAND (lhs, 0), modifycode, rhs,\n \t\t\t\t     complain);\n@@ -7665,7 +7665,7 @@ cp_build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs,\n \t     not intervene between the lvalue-to-rvalue conversion and the\n \t     side effect associated with any single compound assignment\n \t     operator. -- end note ]  */\n-\t  lhs = stabilize_reference (lhs);\n+\t  lhs = cp_stabilize_reference (lhs);\n \t  rhs = rvalue (rhs);\n \t  rhs = stabilize_expr (rhs, &init);\n \t  newrhs = cp_build_binary_op (input_location,\ndiff --git gcc/testsuite/g++.dg/ext/cond2.C gcc/testsuite/g++.dg/ext/cond2.C\nindex e69de29..d9f1d59 100644\n--- gcc/testsuite/g++.dg/ext/cond2.C\n+++ gcc/testsuite/g++.dg/ext/cond2.C\n@@ -0,0 +1,28 @@\n+// PR c++/70744\n+// { dg-do run }\n+// { dg-options \"\" }\n+\n+static void\n+fn1 (void)\n+{\n+  int x = 2;\n+  ++x ? : 42;\n+  if (x != 3)\n+    __builtin_abort ();\n+  --x ? : 42;\n+  if (x != 2)\n+    __builtin_abort ();\n+  x++ ? : 42;\n+  if (x != 3)\n+    __builtin_abort ();\n+  x-- ? : 42;\n+  if (x != 2)\n+    __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  fn1 ();\n+  return 0;\n+}\n\nFrom-SVN: r235438", "tree": {"sha": "5d86195cbde447cd506b7add671d38c96ba313f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d86195cbde447cd506b7add671d38c96ba313f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a0802ea0811cf7fbcd34cd96564e7e9338ba5f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a0802ea0811cf7fbcd34cd96564e7e9338ba5f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a0802ea0811cf7fbcd34cd96564e7e9338ba5f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a0802ea0811cf7fbcd34cd96564e7e9338ba5f5/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "520435ec6e7f89235bf0a17b82082498b4c0f7fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/520435ec6e7f89235bf0a17b82082498b4c0f7fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/520435ec6e7f89235bf0a17b82082498b4c0f7fc"}], "stats": {"total": 105, "additions": 96, "deletions": 9}, "files": [{"sha": "c78abe83bbb0bdfb5d4eb52fa1632a22a64f91b1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0802ea0811cf7fbcd34cd96564e7e9338ba5f5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0802ea0811cf7fbcd34cd96564e7e9338ba5f5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5a0802ea0811cf7fbcd34cd96564e7e9338ba5f5", "patch": "@@ -1,3 +1,16 @@\n+2016-04-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/70744\n+\t* call.c (build_conditional_expr_1): Call cp_stabilize_reference\n+\tinstead of stabilize_reference.\n+\t(build_over_call): Likewise.\n+\t* cp-tree.h (cp_stabilize_reference): Declare.\n+\t* tree.c (cp_stabilize_reference): New function.\n+\t* typeck.c (cp_build_unary_op): Call cp_stabilize_reference instead of\n+\tstabilize_reference.\n+\t(unary_complex_lvalue): Likewise.\n+\t(cp_build_modify_expr): Likewise.\n+\n 2016-04-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/70704"}, {"sha": "476e806d41990821118508069d6a1bb123dd2f6e", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0802ea0811cf7fbcd34cd96564e7e9338ba5f5/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0802ea0811cf7fbcd34cd96564e7e9338ba5f5/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=5a0802ea0811cf7fbcd34cd96564e7e9338ba5f5", "patch": "@@ -4634,7 +4634,7 @@ build_conditional_expr_1 (location_t loc, tree arg1, tree arg2, tree arg3,\n \n       /* Make sure that lvalues remain lvalues.  See g++.oliva/ext1.C.  */\n       if (real_lvalue_p (arg1))\n-\targ2 = arg1 = stabilize_reference (arg1);\n+\targ2 = arg1 = cp_stabilize_reference (arg1);\n       else\n \targ2 = arg1 = save_expr (arg1);\n     }\n@@ -7644,8 +7644,9 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t       || (TREE_CODE (arg) == TARGET_EXPR\n \t\t   && !unsafe_copy_elision_p (fa, arg)))\n \t{\n-\t  tree to = stabilize_reference (cp_build_indirect_ref (fa, RO_NULL,\n-\t\t\t\t\t\t\t\tcomplain));\n+\t  tree to = cp_stabilize_reference (cp_build_indirect_ref (fa,\n+\t\t\t\t\t\t\t\t   RO_NULL,\n+\t\t\t\t\t\t\t\t   complain));\n \n \t  val = build2 (INIT_EXPR, DECL_CONTEXT (fn), to, arg);\n \t  return val;\n@@ -7655,7 +7656,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t   && trivial_fn_p (fn)\n \t   && !DECL_DELETED_FN (fn))\n     {\n-      tree to = stabilize_reference\n+      tree to = cp_stabilize_reference\n \t(cp_build_indirect_ref (argarray[0], RO_NULL, complain));\n       tree type = TREE_TYPE (to);\n       tree as_base = CLASSTYPE_AS_BASE (type);"}, {"sha": "0e46ae17f0ccd21b36f99435fd3caccf1b78a6ce", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0802ea0811cf7fbcd34cd96564e7e9338ba5f5/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0802ea0811cf7fbcd34cd96564e7e9338ba5f5/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5a0802ea0811cf7fbcd34cd96564e7e9338ba5f5", "patch": "@@ -6494,6 +6494,7 @@ extern cp_lvalue_kind real_lvalue_p\t\t(const_tree);\n extern cp_lvalue_kind lvalue_kind\t\t(const_tree);\n extern bool lvalue_or_rvalue_with_address_p\t(const_tree);\n extern bool xvalue_p\t                        (const_tree);\n+extern tree cp_stabilize_reference\t\t(tree);\n extern bool builtin_valid_in_constant_expr_p    (const_tree);\n extern tree build_min\t\t\t\t(enum tree_code, tree, ...);\n extern tree build_min_nt_loc\t\t\t(location_t, enum tree_code,"}, {"sha": "5b5d5ba48f95dcfbda21f099bcf7b2546678c02d", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0802ea0811cf7fbcd34cd96564e7e9338ba5f5/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0802ea0811cf7fbcd34cd96564e7e9338ba5f5/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=5a0802ea0811cf7fbcd34cd96564e7e9338ba5f5", "patch": "@@ -296,6 +296,45 @@ xvalue_p (const_tree ref)\n   return (lvalue_kind (ref) == clk_rvalueref);\n }\n \n+/* C++-specific version of stabilize_reference.  */\n+\n+tree\n+cp_stabilize_reference (tree ref)\n+{\n+  switch (TREE_CODE (ref))\n+    {\n+    /* We need to treat specially anything stabilize_reference doesn't\n+       handle specifically.  */\n+    case VAR_DECL:\n+    case PARM_DECL:\n+    case RESULT_DECL:\n+    CASE_CONVERT:\n+    case FLOAT_EXPR:\n+    case FIX_TRUNC_EXPR:\n+    case INDIRECT_REF:\n+    case COMPONENT_REF:\n+    case BIT_FIELD_REF:\n+    case ARRAY_REF:\n+    case ARRAY_RANGE_REF:\n+    case ERROR_MARK:\n+      break;\n+    default:\n+      cp_lvalue_kind kind = lvalue_kind (ref);\n+      if ((kind & ~clk_class) != clk_none)\n+\t{\n+\t  tree type = unlowered_expr_type (ref);\n+\t  bool rval = !!(kind & clk_rvalueref);\n+\t  type = cp_build_reference_type (type, rval);\n+\t  /* This inhibits warnings in, eg, cxx_mark_addressable\n+\t     (c++/60955).  */\n+\t  warning_sentinel s (extra_warnings);\n+\t  ref = build_static_cast (type, ref, tf_error);\n+\t}\n+    }\n+\n+  return stabilize_reference (ref);\n+}\n+\n /* Test whether DECL is a builtin that may appear in a\n    constant-expression. */\n "}, {"sha": "7e12009a5e5fe0da53dfa1e3af6550579f0b158b", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0802ea0811cf7fbcd34cd96564e7e9338ba5f5/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0802ea0811cf7fbcd34cd96564e7e9338ba5f5/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=5a0802ea0811cf7fbcd34cd96564e7e9338ba5f5", "patch": "@@ -5912,7 +5912,7 @@ cp_build_unary_op (enum tree_code code, tree xarg, int noconvert,\n \t{\n \t  tree real, imag;\n \n-\t  arg = stabilize_reference (arg);\n+\t  arg = cp_stabilize_reference (arg);\n \t  real = cp_build_unary_op (REALPART_EXPR, arg, 1, complain);\n \t  imag = cp_build_unary_op (IMAGPART_EXPR, arg, 1, complain);\n \t  real = cp_build_unary_op (code, real, 1, complain);\n@@ -6112,7 +6112,7 @@ unary_complex_lvalue (enum tree_code code, tree arg)\n       tree lvalue = TREE_OPERAND (arg, 0);\n       if (TREE_SIDE_EFFECTS (lvalue))\n \t{\n-\t  lvalue = stabilize_reference (lvalue);\n+\t  lvalue = cp_stabilize_reference (lvalue);\n \t  arg = build2 (TREE_CODE (arg), TREE_TYPE (arg),\n \t\t\tlvalue, TREE_OPERAND (arg, 1));\n \t}\n@@ -7496,7 +7496,7 @@ cp_build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs,\n     case PREINCREMENT_EXPR:\n       if (TREE_SIDE_EFFECTS (TREE_OPERAND (lhs, 0)))\n \tlhs = build2 (TREE_CODE (lhs), TREE_TYPE (lhs),\n-\t\t      stabilize_reference (TREE_OPERAND (lhs, 0)),\n+\t\t      cp_stabilize_reference (TREE_OPERAND (lhs, 0)),\n \t\t      TREE_OPERAND (lhs, 1));\n       newrhs = cp_build_modify_expr (TREE_OPERAND (lhs, 0),\n \t\t\t\t     modifycode, rhs, complain);\n@@ -7516,7 +7516,7 @@ cp_build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs,\n     case MODIFY_EXPR:\n       if (TREE_SIDE_EFFECTS (TREE_OPERAND (lhs, 0)))\n \tlhs = build2 (TREE_CODE (lhs), TREE_TYPE (lhs),\n-\t\t      stabilize_reference (TREE_OPERAND (lhs, 0)),\n+\t\t      cp_stabilize_reference (TREE_OPERAND (lhs, 0)),\n \t\t      TREE_OPERAND (lhs, 1));\n       newrhs = cp_build_modify_expr (TREE_OPERAND (lhs, 0), modifycode, rhs,\n \t\t\t\t     complain);\n@@ -7665,7 +7665,7 @@ cp_build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs,\n \t     not intervene between the lvalue-to-rvalue conversion and the\n \t     side effect associated with any single compound assignment\n \t     operator. -- end note ]  */\n-\t  lhs = stabilize_reference (lhs);\n+\t  lhs = cp_stabilize_reference (lhs);\n \t  rhs = rvalue (rhs);\n \t  rhs = stabilize_expr (rhs, &init);\n \t  newrhs = cp_build_binary_op (input_location,"}, {"sha": "de57f567c2016da1704518207e2413479a4da773", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0802ea0811cf7fbcd34cd96564e7e9338ba5f5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0802ea0811cf7fbcd34cd96564e7e9338ba5f5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5a0802ea0811cf7fbcd34cd96564e7e9338ba5f5", "patch": "@@ -1,3 +1,8 @@\n+2016-04-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/70744\n+\t* g++.dg/ext/cond2.C: New test.\n+\n 2016-04-26  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/70771"}, {"sha": "d9f1d59a3be04f4718c950d829284bc7254831ed", "filename": "gcc/testsuite/g++.dg/ext/cond2.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0802ea0811cf7fbcd34cd96564e7e9338ba5f5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcond2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0802ea0811cf7fbcd34cd96564e7e9338ba5f5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcond2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcond2.C?ref=5a0802ea0811cf7fbcd34cd96564e7e9338ba5f5", "patch": "@@ -0,0 +1,28 @@\n+// PR c++/70744\n+// { dg-do run }\n+// { dg-options \"\" }\n+\n+static void\n+fn1 (void)\n+{\n+  int x = 2;\n+  ++x ? : 42;\n+  if (x != 3)\n+    __builtin_abort ();\n+  --x ? : 42;\n+  if (x != 2)\n+    __builtin_abort ();\n+  x++ ? : 42;\n+  if (x != 3)\n+    __builtin_abort ();\n+  x-- ? : 42;\n+  if (x != 2)\n+    __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  fn1 ();\n+  return 0;\n+}"}]}