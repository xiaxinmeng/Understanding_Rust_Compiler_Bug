{"sha": "10d43c2d1b58300b12209abc980ea2ed3a414be6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBkNDNjMmQxYjU4MzAwYjEyMjA5YWJjOTgwZWEyZWQzYTQxNGJlNg==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2010-04-13T13:30:31Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2010-04-13T13:30:31Z"}, "message": "Makefile.in (c-pch.o, [...]): Depend on timevar.h.\n\n2010-04-12  Diego Novillo  <dnovillo@google.com>\n\n\t* Makefile.in (c-pch.o, ggc-common.o): Depend on timevar.h.\n\t* c-pch.c: Include timevar.h.\n\t(c_common_write_pch): Use TV_PCH_SAVE and TV_PCH_CPP_SAVE timers.\n\t(c_common_read_pch): Use TV_PCH_RESTORE and TV_PCH_CPP_RESTORE\n\ttimers.\n\t* ggc-common.c: Include timevar.h.\n\t(gt_pch_save): Use TV_PCH_PTR_REALLOC and TV_PCH_PTR_SORT\n\ttimers.\n\t* timevar.def (TV_PCH_SAVE): Define.\n\t(TV_PCH_CPP_SAVE): Define.\n\t(TV_PCH_PTR_REALLOC): Define.\n\t(TV_PCH_PTR_SORT): Define.\n\t(TV_PCH_RESTORE): Define.\n\t(TV_PCH_CPP_RESTORE): Define.\n\nFrom-SVN: r158266", "tree": {"sha": "7d6bdf3659c4ca2ac9b6e81c946d8961451da717", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d6bdf3659c4ca2ac9b6e81c946d8961451da717"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10d43c2d1b58300b12209abc980ea2ed3a414be6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10d43c2d1b58300b12209abc980ea2ed3a414be6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10d43c2d1b58300b12209abc980ea2ed3a414be6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10d43c2d1b58300b12209abc980ea2ed3a414be6/comments", "author": null, "committer": null, "parents": [{"sha": "143597ffdaaf5ffc45f0940263704127ef3aa671", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/143597ffdaaf5ffc45f0940263704127ef3aa671", "html_url": "https://github.com/Rust-GCC/gccrs/commit/143597ffdaaf5ffc45f0940263704127ef3aa671"}], "stats": {"total": 45, "additions": 40, "deletions": 5}, "files": [{"sha": "77665fd38dd66409c43851747c3136a1fa6cfac5", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10d43c2d1b58300b12209abc980ea2ed3a414be6/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10d43c2d1b58300b12209abc980ea2ed3a414be6/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=10d43c2d1b58300b12209abc980ea2ed3a414be6", "patch": "@@ -2088,7 +2088,8 @@ c-dump.o : c-dump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n \n c-pch.o : c-pch.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(CPPLIB_H) $(TREE_H) \\\n \t$(C_COMMON_H) output.h $(TOPLEV_H) $(C_PRAGMA_H) $(GGC_H) debug.h \\\n-\tlanghooks.h $(FLAGS_H) hosthooks.h version.h $(TARGET_H) opts.h\n+\tlanghooks.h $(FLAGS_H) hosthooks.h version.h $(TARGET_H) opts.h \\\n+\ttimevar.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n \t  -DHOST_MACHINE=\\\"$(host)\\\" -DTARGET_MACHINE=\\\"$(target)\\\" \\\n \t  $< $(OUTPUT_OPTION)\n@@ -2183,7 +2184,7 @@ gtype-desc.o: gtype-desc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \n ggc-common.o: ggc-common.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\t\\\n \t$(GGC_H) $(HASHTAB_H) $(TOPLEV_H) $(PARAMS_H) hosthooks.h\t\\\n-\t$(HOSTHOOKS_DEF_H) vec.h $(PLUGIN_H)\n+\t$(HOSTHOOKS_DEF_H) vec.h $(PLUGIN_H) timevar.h\n \n ggc-page.o: ggc-page.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n \t$(FLAGS_H) $(TOPLEV_H) $(GGC_H) $(TIMEVAR_H) $(TM_P_H) $(PARAMS_H) $(TREE_FLOW_H) $(PLUGIN_H)"}, {"sha": "951ab1fc303bd0c2e69a86bcc3e3ed5737f7405f", "filename": "gcc/c-pch.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10d43c2d1b58300b12209abc980ea2ed3a414be6/gcc%2Fc-pch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10d43c2d1b58300b12209abc980ea2ed3a414be6/gcc%2Fc-pch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pch.c?ref=10d43c2d1b58300b12209abc980ea2ed3a414be6", "patch": "@@ -35,6 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hosthooks.h\"\n #include \"target.h\"\n #include \"opts.h\"\n+#include \"timevar.h\"\n \n /* This is a list of flag variables that must match exactly, and their\n    names for the error message.  The possible values for *flag_var must\n@@ -178,6 +179,8 @@ c_common_write_pch (void)\n   long written;\n   struct c_pch_header h;\n \n+  timevar_push (TV_PCH_SAVE);\n+\n   (*debug_hooks->handle_pch) (1);\n \n   cpp_write_pch_deps (parse_in, pch_outfile);\n@@ -211,13 +214,18 @@ c_common_write_pch (void)\n     fatal_error (\"can%'t seek in %s: %m\", asm_file_name);\n \n   gt_pch_save (pch_outfile);\n+\n+  timevar_push (TV_PCH_CPP_SAVE);\n   cpp_write_pch_state (parse_in, pch_outfile);\n+  timevar_pop (TV_PCH_CPP_SAVE);\n \n   if (fseek (pch_outfile, 0, SEEK_SET) != 0\n       || fwrite (get_ident (), IDENT_LENGTH, 1, pch_outfile) != 1)\n     fatal_error (\"can%'t write %s: %m\", pch_file);\n \n   fclose (pch_outfile);\n+\n+  timevar_pop (TV_PCH_SAVE);\n }\n \n /* Check the PCH file called NAME, open on FD, to see if it can be\n@@ -371,12 +379,14 @@ c_common_read_pch (cpp_reader *pfile, const char *name,\n   expanded_location saved_loc;\n   bool saved_trace_includes;\n \n+  timevar_push (TV_PCH_RESTORE);\n+\n   f = fdopen (fd, \"rb\");\n   if (f == NULL)\n     {\n       cpp_errno (pfile, CPP_DL_ERROR, \"calling fdopen\");\n       close (fd);\n-      return;\n+      goto end;\n     }\n \n   cpp_get_callbacks (parse_in)->valid_pch = NULL;\n@@ -385,7 +395,7 @@ c_common_read_pch (cpp_reader *pfile, const char *name,\n     {\n       cpp_errno (pfile, CPP_DL_ERROR, \"reading\");\n       fclose (f);\n-      return;\n+      goto end;\n     }\n \n   if (!flag_preprocess_only)\n@@ -417,15 +427,21 @@ c_common_read_pch (cpp_reader *pfile, const char *name,\n   saved_loc = expand_location (line_table->highest_line);\n   saved_trace_includes = line_table->trace_includes;\n \n+  timevar_push (TV_PCH_CPP_RESTORE);\n   cpp_prepare_state (pfile, &smd);\n+  timevar_pop (TV_PCH_CPP_RESTORE);\n \n   gt_pch_restore (f);\n \n+  timevar_push (TV_PCH_CPP_RESTORE);\n   if (cpp_read_state (pfile, name, f, smd) != 0)\n     {\n       fclose (f);\n-      return;\n+      timevar_pop (TV_PCH_CPP_RESTORE);\n+      goto end;\n     }\n+  timevar_pop (TV_PCH_CPP_RESTORE);\n+\n \n   fclose (f);\n \n@@ -437,6 +453,9 @@ c_common_read_pch (cpp_reader *pfile, const char *name,\n      been loaded.  */\n   if (lang_post_pch_load)\n     (*lang_post_pch_load) ();\n+\n+end:\n+  timevar_pop (TV_PCH_RESTORE);\n }\n \n /* Indicate that no more PCH files should be read.  */"}, {"sha": "28c2b793f22d605d2a06349d8896cca5421b2b3f", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10d43c2d1b58300b12209abc980ea2ed3a414be6/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10d43c2d1b58300b12209abc980ea2ed3a414be6/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=10d43c2d1b58300b12209abc980ea2ed3a414be6", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hosthooks-def.h\"\n #include \"plugin.h\"\n #include \"vec.h\"\n+#include \"timevar.h\"\n \n #ifdef HAVE_SYS_RESOURCE_H\n # include <sys/resource.h>\n@@ -501,6 +502,7 @@ gt_pch_save (FILE *f)\n \n   gt_pch_save_stringpool ();\n \n+  timevar_push (TV_PCH_PTR_REALLOC);\n   saving_htab = htab_create (50000, saving_htab_hash, saving_htab_eq, free);\n \n   for (rt = gt_ggc_rtab; *rt; rt++)\n@@ -532,8 +534,13 @@ gt_pch_save (FILE *f)\n \n   state.ptrs = XNEWVEC (struct ptr_data *, state.count);\n   state.ptrs_i = 0;\n+\n   htab_traverse (saving_htab, call_alloc, &state);\n+  timevar_pop (TV_PCH_PTR_REALLOC);\n+\n+  timevar_push (TV_PCH_PTR_SORT);\n   qsort (state.ptrs, state.count, sizeof (*state.ptrs), compare_ptr_data);\n+  timevar_pop (TV_PCH_PTR_SORT);\n \n   /* Write out all the scalar variables.  */\n   for (rt = gt_pch_scalar_rtab; *rt; rt++)"}, {"sha": "19dec149a28af8a348ba35ded9e3bd4472e761e1", "filename": "gcc/timevar.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10d43c2d1b58300b12209abc980ea2ed3a414be6/gcc%2Ftimevar.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10d43c2d1b58300b12209abc980ea2ed3a414be6/gcc%2Ftimevar.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.def?ref=10d43c2d1b58300b12209abc980ea2ed3a414be6", "patch": "@@ -39,6 +39,14 @@ DEFTIMEVAR (TV_GC                    , \"garbage collection\")\n /* Time spent generating dump files.  */\n DEFTIMEVAR (TV_DUMP                  , \"dump files\")\n \n+/* Time spent saving/restoring PCH state.  */\n+DEFTIMEVAR (TV_PCH_SAVE              , \"PCH main state save\")\n+DEFTIMEVAR (TV_PCH_CPP_SAVE          , \"PCH preprocessor state save\")\n+DEFTIMEVAR (TV_PCH_PTR_REALLOC       , \"PCH pointer reallocation\")\n+DEFTIMEVAR (TV_PCH_PTR_SORT          , \"PCH pointer sort\")\n+DEFTIMEVAR (TV_PCH_RESTORE           , \"PCH main state restore\")\n+DEFTIMEVAR (TV_PCH_CPP_RESTORE       , \"PCH preprocessor state restore\")\n+\n DEFTIMEVAR (TV_CGRAPH                , \"callgraph construction\")\n DEFTIMEVAR (TV_CGRAPHOPT             , \"callgraph optimization\")\n DEFTIMEVAR (TV_IPA_CONSTANT_PROP     , \"ipa cp\")"}]}