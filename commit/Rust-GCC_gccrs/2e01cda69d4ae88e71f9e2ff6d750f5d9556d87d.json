{"sha": "2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUwMWNkYTY5ZDRhZTg4ZTcxZjllMmZmNmQ3NTBmNWQ5NTU2ZDg3ZA==", "commit": {"author": {"name": "Ilya Verbin", "email": "ilya.verbin@intel.com", "date": "2016-05-04T12:29:14Z"}, "committer": {"name": "Ilya Verbin", "email": "iverbin@gcc.gnu.org", "date": "2016-05-04T12:29:14Z"}, "message": "backport: Makefile.am: Merge from upstream...\n\nMerge libcilkrts from upstream.\n\nlibcilkrts/\n\t* Makefile.am: Merge from upstream, version 2.0.4420.0\n\t<https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git>.\n\t* README: Likewise.\n\t* configure.ac: Likewise.\n\t* configure.tgt: Likewise.\n\t* include/cilk/cilk.h: Likewise.\n\t* include/cilk/cilk_api.h: Likewise.\n\t* include/cilk/cilk_api_linux.h: Likewise.\n\t* include/cilk/cilk_stub.h: Likewise.\n\t* include/cilk/cilk_undocumented.h: Likewise.\n\t* include/cilk/common.h: Likewise.\n\t* include/cilk/holder.h: Likewise.\n\t* include/cilk/hyperobject_base.h: Likewise.\n\t* include/cilk/metaprogramming.h: Likewise.\n\t* include/cilk/reducer.h: Likewise.\n\t* include/cilk/reducer_file.h: Likewise.\n\t* include/cilk/reducer_list.h: Likewise.\n\t* include/cilk/reducer_max.h: Likewise.\n\t* include/cilk/reducer_min.h: Likewise.\n\t* include/cilk/reducer_min_max.h: Likewise.\n\t* include/cilk/reducer_opadd.h: Likewise.\n\t* include/cilk/reducer_opand.h: Likewise.\n\t* include/cilk/reducer_opmul.h: Likewise.\n\t* include/cilk/reducer_opor.h: Likewise.\n\t* include/cilk/reducer_opxor.h: Likewise.\n\t* include/cilk/reducer_ostream.h: Likewise.\n\t* include/cilk/reducer_string.h: Likewise.\n\t* include/cilktools/cilkscreen.h: Likewise.\n\t* include/cilktools/cilkview.h: Likewise.\n\t* include/cilktools/fake_mutex.h: Likewise.\n\t* include/cilktools/lock_guard.h: Likewise.\n\t* include/internal/abi.h: Likewise.\n\t* include/internal/cilk_fake.h: Likewise.\n\t* include/internal/cilk_version.h: Likewise.\n\t* include/internal/metacall.h: Likewise.\n\t* include/internal/rev.mk: Likewise.\n\t* mk/cilk-version.mk: Likewise.\n\t* runtime/acknowledgements.dox: Likewise.\n\t* runtime/bug.cpp: Likewise.\n\t* runtime/bug.h: Likewise.\n\t* runtime/c_reducers.c: Likewise.\n\t* runtime/cilk-abi-cilk-for.cpp: Likewise.\n\t* runtime/cilk-abi-vla-internal.c: Likewise.\n\t* runtime/cilk-abi-vla-internal.h: Likewise.\n\t* runtime/cilk-abi.c: Likewise.\n\t* runtime/cilk-ittnotify.h: Likewise.\n\t* runtime/cilk-tbb-interop.h: Likewise.\n\t* runtime/cilk_api.c: Likewise.\n\t* runtime/cilk_fiber-unix.cpp: Likewise.\n\t* runtime/cilk_fiber-unix.h: Likewise.\n\t* runtime/cilk_fiber.cpp: Likewise.\n\t* runtime/cilk_fiber.h: Likewise.\n\t* runtime/cilk_malloc.c: Likewise.\n\t* runtime/cilk_malloc.h: Likewise.\n\t* runtime/component.h: Likewise.\n\t* runtime/config/generic/cilk-abi-vla.c: Likewise.\n\t* runtime/config/generic/os-fence.h: Likewise.\n\t* runtime/config/generic/os-unix-sysdep.c: Likewise.\n\t* runtime/config/x86/cilk-abi-vla.c: Likewise.\n\t* runtime/config/x86/os-fence.h: Likewise.\n\t* runtime/config/x86/os-unix-sysdep.c: Likewise.\n\t* runtime/doxygen-layout.xml: Likewise.\n\t* runtime/doxygen.cfg: Likewise.\n\t* runtime/except-gcc.cpp: Likewise.\n\t* runtime/except-gcc.h: Likewise.\n\t* runtime/except.h: Likewise.\n\t* runtime/frame_malloc.c: Likewise.\n\t* runtime/frame_malloc.h: Likewise.\n\t* runtime/full_frame.c: Likewise.\n\t* runtime/full_frame.h: Likewise.\n\t* runtime/global_state.cpp: Likewise.\n\t* runtime/global_state.h: Likewise.\n\t* runtime/jmpbuf.c: Likewise.\n\t* runtime/jmpbuf.h: Likewise.\n\t* runtime/linux-symbols.ver: Likewise.\n\t* runtime/local_state.c: Likewise.\n\t* runtime/local_state.h: Likewise.\n\t* runtime/mac-symbols.txt: Likewise.\n\t* runtime/metacall_impl.c: Likewise.\n\t* runtime/metacall_impl.h: Likewise.\n\t* runtime/os-unix.c: Likewise.\n\t* runtime/os.h: Likewise.\n\t* runtime/os_mutex-unix.c: Likewise.\n\t* runtime/os_mutex.h: Likewise.\n\t* runtime/pedigrees.c: Likewise.\n\t* runtime/pedigrees.h: Likewise.\n\t* runtime/record-replay.cpp: Likewise.\n\t* runtime/record-replay.h: Likewise.\n\t* runtime/reducer_impl.cpp: Likewise.\n\t* runtime/reducer_impl.h: Likewise.\n\t* runtime/rts-common.h: Likewise.\n\t* runtime/scheduler.c: Likewise.\n\t* runtime/scheduler.h: Likewise.\n\t* runtime/signal_node.c: Likewise.\n\t* runtime/signal_node.h: Likewise.\n\t* runtime/spin_mutex.c: Likewise.\n\t* runtime/spin_mutex.h: Likewise.\n\t* runtime/stats.c: Likewise.\n\t* runtime/stats.h: Likewise.\n\t* runtime/sysdep-unix.c: Likewise.\n\t* runtime/sysdep.h: Likewise.\n\t* runtime/worker_mutex.c: Likewise.\n\t* runtime/worker_mutex.h: Likewise.\n\t* include/cilk/reducer_vector.h: New.\n\t* runtime/cilk_str_mem.h: New.\n\t* runtime/config/arm/cilk-abi-vla.c: New.\n\t* runtime/config/arm/os-fence.h: New.\n\t* runtime/config/arm/os-unix-sysdep.c: New.\n\t* runtime/declare-alloca.h: New.\n\t* runtime/sslib/ignore_handler_s.c: New.\n\t* runtime/sslib/safe_lib.h: New.\n\t* runtime/sslib/safe_lib_errno.h: New.\n\t* runtime/sslib/safe_str_constraint.c: New.\n\t* runtime/sslib/safe_str_constraint.h: New.\n\t* runtime/sslib/safe_str_lib.h: New.\n\t* runtime/sslib/safe_types.h: New.\n\t* runtime/sslib/safeclib_private.h: New.\n\t* runtime/sslib/snprintf_s.h: New.\n\t* runtime/sslib/snprintf_support.c: New.\n\t* runtime/sslib/strcpy_s.c: New.\n\t* runtime/sslib/strncpy_s.c: New.\n\t* runtime/sslib/strnlen_s.c: New.\n\t* runtime/symbol_test.c: Remove.\n\t* Makefile.in: Regenerate.\n\t* configure: Regenerate.\n\nFrom-SVN: r235870", "tree": {"sha": "8bcfabda678320bf7a1530bb85d97e4f3bce384b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bcfabda678320bf7a1530bb85d97e4f3bce384b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/comments", "author": null, "committer": null, "parents": [{"sha": "d9cb3e7598f8a9450fcd9a05500e5480631a3bfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9cb3e7598f8a9450fcd9a05500e5480631a3bfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9cb3e7598f8a9450fcd9a05500e5480631a3bfc"}], "stats": {"total": 14641, "additions": 9937, "deletions": 4704}, "files": [{"sha": "df34aa52b540d927c017bc0cf123cd12ca482d8c", "filename": "libcilkrts/ChangeLog", "status": "modified", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2FChangeLog?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,3 +1,131 @@\n+2016-05-04  Ilya Verbin  <ilya.verbin@intel.com>\n+\n+\t* Makefile.am: Merge from upstream, version 2.0.4420.0\n+\t<https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git>.\n+\t* README: Likewise.\n+\t* configure.ac: Likewise.\n+\t* configure.tgt: Likewise.\n+\t* include/cilk/cilk.h: Likewise.\n+\t* include/cilk/cilk_api.h: Likewise.\n+\t* include/cilk/cilk_api_linux.h: Likewise.\n+\t* include/cilk/cilk_stub.h: Likewise.\n+\t* include/cilk/cilk_undocumented.h: Likewise.\n+\t* include/cilk/common.h: Likewise.\n+\t* include/cilk/holder.h: Likewise.\n+\t* include/cilk/hyperobject_base.h: Likewise.\n+\t* include/cilk/metaprogramming.h: Likewise.\n+\t* include/cilk/reducer.h: Likewise.\n+\t* include/cilk/reducer_file.h: Likewise.\n+\t* include/cilk/reducer_list.h: Likewise.\n+\t* include/cilk/reducer_max.h: Likewise.\n+\t* include/cilk/reducer_min.h: Likewise.\n+\t* include/cilk/reducer_min_max.h: Likewise.\n+\t* include/cilk/reducer_opadd.h: Likewise.\n+\t* include/cilk/reducer_opand.h: Likewise.\n+\t* include/cilk/reducer_opmul.h: Likewise.\n+\t* include/cilk/reducer_opor.h: Likewise.\n+\t* include/cilk/reducer_opxor.h: Likewise.\n+\t* include/cilk/reducer_ostream.h: Likewise.\n+\t* include/cilk/reducer_string.h: Likewise.\n+\t* include/cilktools/cilkscreen.h: Likewise.\n+\t* include/cilktools/cilkview.h: Likewise.\n+\t* include/cilktools/fake_mutex.h: Likewise.\n+\t* include/cilktools/lock_guard.h: Likewise.\n+\t* include/internal/abi.h: Likewise.\n+\t* include/internal/cilk_fake.h: Likewise.\n+\t* include/internal/cilk_version.h: Likewise.\n+\t* include/internal/metacall.h: Likewise.\n+\t* include/internal/rev.mk: Likewise.\n+\t* mk/cilk-version.mk: Likewise.\n+\t* runtime/acknowledgements.dox: Likewise.\n+\t* runtime/bug.cpp: Likewise.\n+\t* runtime/bug.h: Likewise.\n+\t* runtime/c_reducers.c: Likewise.\n+\t* runtime/cilk-abi-cilk-for.cpp: Likewise.\n+\t* runtime/cilk-abi-vla-internal.c: Likewise.\n+\t* runtime/cilk-abi-vla-internal.h: Likewise.\n+\t* runtime/cilk-abi.c: Likewise.\n+\t* runtime/cilk-ittnotify.h: Likewise.\n+\t* runtime/cilk-tbb-interop.h: Likewise.\n+\t* runtime/cilk_api.c: Likewise.\n+\t* runtime/cilk_fiber-unix.cpp: Likewise.\n+\t* runtime/cilk_fiber-unix.h: Likewise.\n+\t* runtime/cilk_fiber.cpp: Likewise.\n+\t* runtime/cilk_fiber.h: Likewise.\n+\t* runtime/cilk_malloc.c: Likewise.\n+\t* runtime/cilk_malloc.h: Likewise.\n+\t* runtime/component.h: Likewise.\n+\t* runtime/config/generic/cilk-abi-vla.c: Likewise.\n+\t* runtime/config/generic/os-fence.h: Likewise.\n+\t* runtime/config/generic/os-unix-sysdep.c: Likewise.\n+\t* runtime/config/x86/cilk-abi-vla.c: Likewise.\n+\t* runtime/config/x86/os-fence.h: Likewise.\n+\t* runtime/config/x86/os-unix-sysdep.c: Likewise.\n+\t* runtime/doxygen-layout.xml: Likewise.\n+\t* runtime/doxygen.cfg: Likewise.\n+\t* runtime/except-gcc.cpp: Likewise.\n+\t* runtime/except-gcc.h: Likewise.\n+\t* runtime/except.h: Likewise.\n+\t* runtime/frame_malloc.c: Likewise.\n+\t* runtime/frame_malloc.h: Likewise.\n+\t* runtime/full_frame.c: Likewise.\n+\t* runtime/full_frame.h: Likewise.\n+\t* runtime/global_state.cpp: Likewise.\n+\t* runtime/global_state.h: Likewise.\n+\t* runtime/jmpbuf.c: Likewise.\n+\t* runtime/jmpbuf.h: Likewise.\n+\t* runtime/linux-symbols.ver: Likewise.\n+\t* runtime/local_state.c: Likewise.\n+\t* runtime/local_state.h: Likewise.\n+\t* runtime/mac-symbols.txt: Likewise.\n+\t* runtime/metacall_impl.c: Likewise.\n+\t* runtime/metacall_impl.h: Likewise.\n+\t* runtime/os-unix.c: Likewise.\n+\t* runtime/os.h: Likewise.\n+\t* runtime/os_mutex-unix.c: Likewise.\n+\t* runtime/os_mutex.h: Likewise.\n+\t* runtime/pedigrees.c: Likewise.\n+\t* runtime/pedigrees.h: Likewise.\n+\t* runtime/record-replay.cpp: Likewise.\n+\t* runtime/record-replay.h: Likewise.\n+\t* runtime/reducer_impl.cpp: Likewise.\n+\t* runtime/reducer_impl.h: Likewise.\n+\t* runtime/rts-common.h: Likewise.\n+\t* runtime/scheduler.c: Likewise.\n+\t* runtime/scheduler.h: Likewise.\n+\t* runtime/signal_node.c: Likewise.\n+\t* runtime/signal_node.h: Likewise.\n+\t* runtime/spin_mutex.c: Likewise.\n+\t* runtime/spin_mutex.h: Likewise.\n+\t* runtime/stats.c: Likewise.\n+\t* runtime/stats.h: Likewise.\n+\t* runtime/sysdep-unix.c: Likewise.\n+\t* runtime/sysdep.h: Likewise.\n+\t* runtime/worker_mutex.c: Likewise.\n+\t* runtime/worker_mutex.h: Likewise.\n+\t* include/cilk/reducer_vector.h: New.\n+\t* runtime/cilk_str_mem.h: New.\n+\t* runtime/config/arm/cilk-abi-vla.c: New.\n+\t* runtime/config/arm/os-fence.h: New.\n+\t* runtime/config/arm/os-unix-sysdep.c: New.\n+\t* runtime/declare-alloca.h: New.\n+\t* runtime/sslib/ignore_handler_s.c: New.\n+\t* runtime/sslib/safe_lib.h: New.\n+\t* runtime/sslib/safe_lib_errno.h: New.\n+\t* runtime/sslib/safe_str_constraint.c: New.\n+\t* runtime/sslib/safe_str_constraint.h: New.\n+\t* runtime/sslib/safe_str_lib.h: New.\n+\t* runtime/sslib/safe_types.h: New.\n+\t* runtime/sslib/safeclib_private.h: New.\n+\t* runtime/sslib/snprintf_s.h: New.\n+\t* runtime/sslib/snprintf_support.c: New.\n+\t* runtime/sslib/strcpy_s.c: New.\n+\t* runtime/sslib/strncpy_s.c: New.\n+\t* runtime/sslib/strnlen_s.c: New.\n+\t* runtime/symbol_test.c: Remove.\n+\t* Makefile.in: Regenerate.\n+\t* configure: Regenerate.\n+\n 2016-04-26  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR target/60290"}, {"sha": "3736a636fb179c50c27e07d75bd78d141534c296", "filename": "libcilkrts/Makefile.am", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2FMakefile.am?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,8 +1,6 @@\n-#  @copyright\n-#  Copyright (C) 2011, 2013, Intel Corporation\n+#  Copyright (C) 2011-2016, Intel Corporation\n #  All rights reserved.\n #  \n-#  @copyright\n #  Redistribution and use in source and binary forms, with or without\n #  modification, are permitted provided that the following conditions\n #  are met:\n@@ -17,7 +15,6 @@\n #      contributors may be used to endorse or promote products derived\n #      from this software without specific prior written permission.\n #  \n-#  @copyright\n #  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n #  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n #  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -30,14 +27,28 @@\n #  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n #  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n #  POSSIBILITY OF SUCH DAMAGE.\n+#  \n+#  *********************************************************************\n+#  \n+#  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+#  a repository at cilkplus.org. Changes made to this file that are not\n+#  submitted through the contribution process detailed at\n+#  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+#  time that a new version is released. Changes only submitted to the\n+#  GNU compiler collection or posted to the git repository at\n+#  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+#  not tracked.\n+#  \n+#  We welcome your contributions to this open source project. Thank you\n+#  for your assistance in helping us improve Cilk Plus.\n \n AUTOMAKE_OPTIONS = foreign\n \n # Use when building GCC\n ACLOCAL_AMFLAGS = -I .. -I ../config\n \n # Compiler and linker flags.\n-GENERAL_FLAGS = -I$(top_srcdir)/include -I$(top_srcdir)/runtime -I$(top_srcdir)/runtime/config/$(config_dir) -DIN_CILK_RUNTIME=1\n+GENERAL_FLAGS = -I$(top_srcdir)/include -I$(top_srcdir)/runtime -I$(top_srcdir)/runtime/config/$(config_dir) -I$(top_srcdir)/runtime/sslib  -DIN_CILK_RUNTIME=1\n # GENERAL_FLAGS += -D_Cilk_spawn=\"\" -D_Cilk_sync=\"\" -D_Cilk_for=for\n \n # Enable Intel Cilk Plus extension\n@@ -60,6 +71,19 @@ toolexeclib_LTLIBRARIES = libcilkrts.la\n libcilkrts_la_SOURCES =            \\\n   runtime/config/$(config_dir)/cilk-abi-vla.c           \\\n   runtime/config/$(config_dir)/os-unix-sysdep.c \\\n+  runtime/sslib/ignore_handler_s.c    \\\n+  runtime/sslib/safe_lib.h            \\\n+  runtime/sslib/safe_lib_errno.h      \\\n+  runtime/sslib/safe_str_constraint.c \\\n+  runtime/sslib/safe_str_constraint.h \\\n+  runtime/sslib/safe_str_lib.h        \\\n+  runtime/sslib/safe_types.h          \\\n+  runtime/sslib/safeclib_private.h    \\\n+  runtime/sslib/snprintf_s.h          \\\n+  runtime/sslib/snprintf_support.c    \\\n+  runtime/sslib/strcpy_s.c            \\\n+  runtime/sslib/strncpy_s.c           \\\n+  runtime/sslib/strnlen_s.c           \\\n   runtime/bug.cpp                  \\\n   runtime/cilk-abi.c               \\\n   runtime/cilk-abi-cilk-for.cpp    \\\n@@ -85,7 +109,6 @@ libcilkrts_la_SOURCES =            \\\n   runtime/signal_node.c            \\\n   runtime/spin_mutex.c             \\\n   runtime/stats.c                  \\\n-  runtime/symbol_test.c            \\\n   runtime/sysdep-unix.c            \\\n   runtime/worker_mutex.c\n "}, {"sha": "ff88e9dab89e808ec8e302cffcb0785e59bd4f54", "filename": "libcilkrts/Makefile.in", "status": "modified", "additions": 104, "deletions": 27, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2FMakefile.in?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -15,11 +15,9 @@\n \n @SET_MAKE@\n \n-#  @copyright\n-#  Copyright (C) 2011, 2013, Intel Corporation\n+#  Copyright (C) 2011-2016, Intel Corporation\n #  All rights reserved.\n #  \n-#  @copyright\n #  Redistribution and use in source and binary forms, with or without\n #  modification, are permitted provided that the following conditions\n #  are met:\n@@ -34,7 +32,6 @@\n #      contributors may be used to endorse or promote products derived\n #      from this software without specific prior written permission.\n #  \n-#  @copyright\n #  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n #  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n #  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -47,14 +44,26 @@\n #  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n #  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n #  POSSIBILITY OF SUCH DAMAGE.\n+#  \n+#  *********************************************************************\n+#  \n+#  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+#  a repository at cilkplus.org. Changes made to this file that are not\n+#  submitted through the contribution process detailed at\n+#  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+#  time that a new version is released. Changes only submitted to the\n+#  GNU compiler collection or posted to the git repository at\n+#  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+#  not tracked.\n+#  \n+#  We welcome your contributions to this open source project. Thank you\n+#  for your assistance in helping us improve Cilk Plus.\n \n #########################################################################\n #\n-#  @copyright\n-#  Copyright (C) 2011-2013, Intel Corporation\n+#  Copyright (C) 2011-2016, Intel Corporation\n #  All rights reserved.\n #  \n-#  @copyright\n #  Redistribution and use in source and binary forms, with or without\n #  modification, are permitted provided that the following conditions\n #  are met:\n@@ -69,7 +78,6 @@\n #      contributors may be used to endorse or promote products derived\n #      from this software without specific prior written permission.\n #  \n-#  @copyright\n #  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n #  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n #  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -82,6 +90,20 @@\n #  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n #  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n #  POSSIBILITY OF SUCH DAMAGE.\n+#  \n+#  *********************************************************************\n+#  \n+#  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+#  a repository at cilkplus.org. Changes made to this file that are not\n+#  submitted through the contribution process detailed at\n+#  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+#  time that a new version is released. Changes only submitted to the\n+#  GNU compiler collection or posted to the git repository at\n+#  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+#  not tracked.\n+#  \n+#  We welcome your contributions to this open source project. Thank you\n+#  for your assistance in helping us improve Cilk Plus.\n ###########################################################################\n \n # DO NOT EDIT THIS FILE!\n@@ -184,14 +206,16 @@ am__installdirs = \"$(DESTDIR)$(toolexeclibdir)\" \\\n \t\"$(DESTDIR)$(cilkincludedir)\" \"$(DESTDIR)$(toolexeclibdir)\"\n LTLIBRARIES = $(toolexeclib_LTLIBRARIES)\n libcilkrts_la_LIBADD =\n-am_libcilkrts_la_OBJECTS = cilk-abi-vla.lo os-unix-sysdep.lo bug.lo \\\n-\tcilk-abi.lo cilk-abi-cilk-for.lo cilk-abi-vla-internal.lo \\\n-\tcilk_api.lo cilk_fiber.lo cilk_fiber-unix.lo cilk_malloc.lo \\\n-\tc_reducers.lo except-gcc.lo frame_malloc.lo full_frame.lo \\\n-\tglobal_state.lo jmpbuf.lo local_state.lo metacall_impl.lo \\\n-\tos_mutex-unix.lo os-unix.lo pedigrees.lo record-replay.lo \\\n-\treducer_impl.lo scheduler.lo signal_node.lo spin_mutex.lo \\\n-\tstats.lo symbol_test.lo sysdep-unix.lo worker_mutex.lo\n+am_libcilkrts_la_OBJECTS = cilk-abi-vla.lo os-unix-sysdep.lo \\\n+\tignore_handler_s.lo safe_str_constraint.lo snprintf_support.lo \\\n+\tstrcpy_s.lo strncpy_s.lo strnlen_s.lo bug.lo cilk-abi.lo \\\n+\tcilk-abi-cilk-for.lo cilk-abi-vla-internal.lo cilk_api.lo \\\n+\tcilk_fiber.lo cilk_fiber-unix.lo cilk_malloc.lo c_reducers.lo \\\n+\texcept-gcc.lo frame_malloc.lo full_frame.lo global_state.lo \\\n+\tjmpbuf.lo local_state.lo metacall_impl.lo os_mutex-unix.lo \\\n+\tos-unix.lo pedigrees.lo record-replay.lo reducer_impl.lo \\\n+\tscheduler.lo signal_node.lo spin_mutex.lo stats.lo \\\n+\tsysdep-unix.lo worker_mutex.lo\n libcilkrts_la_OBJECTS = $(am_libcilkrts_la_OBJECTS)\n libcilkrts_la_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \\\n \t$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \\\n@@ -375,7 +399,8 @@ ACLOCAL_AMFLAGS = -I .. -I ../config\n # Always generate unwind tables\n GENERAL_FLAGS = -I$(top_srcdir)/include -I$(top_srcdir)/runtime \\\n \t-I$(top_srcdir)/runtime/config/$(config_dir) \\\n-\t-DIN_CILK_RUNTIME=1 -fcilkplus -funwind-tables\n+\t-I$(top_srcdir)/runtime/sslib -DIN_CILK_RUNTIME=1 -fcilkplus \\\n+\t-funwind-tables\n AM_CFLAGS = $(XCFLAGS) $(GENERAL_FLAGS) -std=c99\n AM_CPPFLAGS = $(GENERAL_FLAGS)\n AM_LDFLAGS = $(XLDFLAGS)\n@@ -389,6 +414,19 @@ toolexeclib_LTLIBRARIES = libcilkrts.la\n libcilkrts_la_SOURCES = \\\n   runtime/config/$(config_dir)/cilk-abi-vla.c           \\\n   runtime/config/$(config_dir)/os-unix-sysdep.c \\\n+  runtime/sslib/ignore_handler_s.c    \\\n+  runtime/sslib/safe_lib.h            \\\n+  runtime/sslib/safe_lib_errno.h      \\\n+  runtime/sslib/safe_str_constraint.c \\\n+  runtime/sslib/safe_str_constraint.h \\\n+  runtime/sslib/safe_str_lib.h        \\\n+  runtime/sslib/safe_types.h          \\\n+  runtime/sslib/safeclib_private.h    \\\n+  runtime/sslib/snprintf_s.h          \\\n+  runtime/sslib/snprintf_support.c    \\\n+  runtime/sslib/strcpy_s.c            \\\n+  runtime/sslib/strncpy_s.c           \\\n+  runtime/sslib/strnlen_s.c           \\\n   runtime/bug.cpp                  \\\n   runtime/cilk-abi.c               \\\n   runtime/cilk-abi-cilk-for.cpp    \\\n@@ -414,11 +452,10 @@ libcilkrts_la_SOURCES = \\\n   runtime/signal_node.c            \\\n   runtime/spin_mutex.c             \\\n   runtime/stats.c                  \\\n-  runtime/symbol_test.c            \\\n   runtime/sysdep-unix.c            \\\n   runtime/worker_mutex.c\n \n-CILK_REVISION = 3902\n+CILK_REVISION = 4420\n \n # Load the $(REVISION) value.\n \n@@ -591,6 +628,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/frame_malloc.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/full_frame.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/global_state.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ignore_handler_s.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/jmpbuf.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/local_state.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/metacall_impl.Plo@am__quote@\n@@ -600,11 +638,15 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pedigrees.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/record-replay.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/reducer_impl.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/safe_str_constraint.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/scheduler.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/signal_node.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/snprintf_support.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/spin_mutex.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/stats.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/symbol_test.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/strcpy_s.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/strncpy_s.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/strnlen_s.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sysdep-unix.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/worker_mutex.Plo@am__quote@\n \n@@ -643,6 +685,48 @@ os-unix-sysdep.lo: runtime/config/$(config_dir)/os-unix-sysdep.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o os-unix-sysdep.lo `test -f 'runtime/config/$(config_dir)/os-unix-sysdep.c' || echo '$(srcdir)/'`runtime/config/$(config_dir)/os-unix-sysdep.c\n \n+ignore_handler_s.lo: runtime/sslib/ignore_handler_s.c\n+@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT ignore_handler_s.lo -MD -MP -MF $(DEPDIR)/ignore_handler_s.Tpo -c -o ignore_handler_s.lo `test -f 'runtime/sslib/ignore_handler_s.c' || echo '$(srcdir)/'`runtime/sslib/ignore_handler_s.c\n+@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/ignore_handler_s.Tpo $(DEPDIR)/ignore_handler_s.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/sslib/ignore_handler_s.c' object='ignore_handler_s.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o ignore_handler_s.lo `test -f 'runtime/sslib/ignore_handler_s.c' || echo '$(srcdir)/'`runtime/sslib/ignore_handler_s.c\n+\n+safe_str_constraint.lo: runtime/sslib/safe_str_constraint.c\n+@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT safe_str_constraint.lo -MD -MP -MF $(DEPDIR)/safe_str_constraint.Tpo -c -o safe_str_constraint.lo `test -f 'runtime/sslib/safe_str_constraint.c' || echo '$(srcdir)/'`runtime/sslib/safe_str_constraint.c\n+@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/safe_str_constraint.Tpo $(DEPDIR)/safe_str_constraint.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/sslib/safe_str_constraint.c' object='safe_str_constraint.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o safe_str_constraint.lo `test -f 'runtime/sslib/safe_str_constraint.c' || echo '$(srcdir)/'`runtime/sslib/safe_str_constraint.c\n+\n+snprintf_support.lo: runtime/sslib/snprintf_support.c\n+@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT snprintf_support.lo -MD -MP -MF $(DEPDIR)/snprintf_support.Tpo -c -o snprintf_support.lo `test -f 'runtime/sslib/snprintf_support.c' || echo '$(srcdir)/'`runtime/sslib/snprintf_support.c\n+@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/snprintf_support.Tpo $(DEPDIR)/snprintf_support.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/sslib/snprintf_support.c' object='snprintf_support.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o snprintf_support.lo `test -f 'runtime/sslib/snprintf_support.c' || echo '$(srcdir)/'`runtime/sslib/snprintf_support.c\n+\n+strcpy_s.lo: runtime/sslib/strcpy_s.c\n+@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT strcpy_s.lo -MD -MP -MF $(DEPDIR)/strcpy_s.Tpo -c -o strcpy_s.lo `test -f 'runtime/sslib/strcpy_s.c' || echo '$(srcdir)/'`runtime/sslib/strcpy_s.c\n+@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/strcpy_s.Tpo $(DEPDIR)/strcpy_s.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/sslib/strcpy_s.c' object='strcpy_s.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o strcpy_s.lo `test -f 'runtime/sslib/strcpy_s.c' || echo '$(srcdir)/'`runtime/sslib/strcpy_s.c\n+\n+strncpy_s.lo: runtime/sslib/strncpy_s.c\n+@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT strncpy_s.lo -MD -MP -MF $(DEPDIR)/strncpy_s.Tpo -c -o strncpy_s.lo `test -f 'runtime/sslib/strncpy_s.c' || echo '$(srcdir)/'`runtime/sslib/strncpy_s.c\n+@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/strncpy_s.Tpo $(DEPDIR)/strncpy_s.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/sslib/strncpy_s.c' object='strncpy_s.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o strncpy_s.lo `test -f 'runtime/sslib/strncpy_s.c' || echo '$(srcdir)/'`runtime/sslib/strncpy_s.c\n+\n+strnlen_s.lo: runtime/sslib/strnlen_s.c\n+@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT strnlen_s.lo -MD -MP -MF $(DEPDIR)/strnlen_s.Tpo -c -o strnlen_s.lo `test -f 'runtime/sslib/strnlen_s.c' || echo '$(srcdir)/'`runtime/sslib/strnlen_s.c\n+@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/strnlen_s.Tpo $(DEPDIR)/strnlen_s.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/sslib/strnlen_s.c' object='strnlen_s.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o strnlen_s.lo `test -f 'runtime/sslib/strnlen_s.c' || echo '$(srcdir)/'`runtime/sslib/strnlen_s.c\n+\n cilk-abi.lo: runtime/cilk-abi.c\n @am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT cilk-abi.lo -MD -MP -MF $(DEPDIR)/cilk-abi.Tpo -c -o cilk-abi.lo `test -f 'runtime/cilk-abi.c' || echo '$(srcdir)/'`runtime/cilk-abi.c\n @am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/cilk-abi.Tpo $(DEPDIR)/cilk-abi.Plo\n@@ -762,13 +846,6 @@ stats.lo: runtime/stats.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stats.lo `test -f 'runtime/stats.c' || echo '$(srcdir)/'`runtime/stats.c\n \n-symbol_test.lo: runtime/symbol_test.c\n-@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT symbol_test.lo -MD -MP -MF $(DEPDIR)/symbol_test.Tpo -c -o symbol_test.lo `test -f 'runtime/symbol_test.c' || echo '$(srcdir)/'`runtime/symbol_test.c\n-@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/symbol_test.Tpo $(DEPDIR)/symbol_test.Plo\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/symbol_test.c' object='symbol_test.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o symbol_test.lo `test -f 'runtime/symbol_test.c' || echo '$(srcdir)/'`runtime/symbol_test.c\n-\n sysdep-unix.lo: runtime/sysdep-unix.c\n @am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT sysdep-unix.lo -MD -MP -MF $(DEPDIR)/sysdep-unix.Tpo -c -o sysdep-unix.lo `test -f 'runtime/sysdep-unix.c' || echo '$(srcdir)/'`runtime/sysdep-unix.c\n @am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/sysdep-unix.Tpo $(DEPDIR)/sysdep-unix.Plo"}, {"sha": "d3503f44e34d3b8338f60db7237ad133988f1171", "filename": "libcilkrts/README", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2FREADME?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -40,6 +40,9 @@ configure script:\n \n % ./configure --prefix=/your/path/to/lib\n \n+It is also possible to use CMake if the above method does not apply\n+well in your environment. Instruction is available in CMakeLists.txt.\n+\n #\n #  2. USING:\n #\n@@ -79,6 +82,9 @@ http://cilkplus.org/\n Changes to the Intel Cilk Plus runtime are welcome and should be\n contributed to the upstream version via http://cilkplus.org/.\n \n+Thanks to Tobias Burnus for showing us the magic to make gcc and g++\n+automatically include the Cilk Plus runtime.\n+\n ------------------------\n Intel and Cilk are trademarks of Intel Corporation in the U.S. and/or\n other countries."}, {"sha": "802b325eba691fafa5759d2e8f40e511b2c3be63", "filename": "libcilkrts/configure", "status": "modified", "additions": 2289, "deletions": 1589, "changes": 3878, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fconfigure?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d"}, {"sha": "6edb9f7c917edc03808cb428b5e81310a0ebba5f", "filename": "libcilkrts/configure.ac", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fconfigure.ac?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,8 +1,6 @@\n-#  @copyright\n-#  Copyright (C) 2011-2013, Intel Corporation\n+#  Copyright (C) 2011-2016, Intel Corporation\n #  All rights reserved.\n #  \n-#  @copyright\n #  Redistribution and use in source and binary forms, with or without\n #  modification, are permitted provided that the following conditions\n #  are met:\n@@ -17,7 +15,6 @@\n #      contributors may be used to endorse or promote products derived\n #      from this software without specific prior written permission.\n #  \n-#  @copyright\n #  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n #  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n #  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -30,6 +27,20 @@\n #  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n #  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n #  POSSIBILITY OF SUCH DAMAGE.\n+#  \n+#  *********************************************************************\n+#  \n+#  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+#  a repository at cilkplus.org. Changes made to this file that are not\n+#  submitted through the contribution process detailed at\n+#  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+#  time that a new version is released. Changes only submitted to the\n+#  GNU compiler collection or posted to the git repository at\n+#  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+#  not tracked.\n+#  \n+#  We welcome your contributions to this open source project. Thank you\n+#  for your assistance in helping us improve Cilk Plus.\n \n AC_INIT([Cilk Runtime Library], [2.0], [cilk@intel.com])\n AC_PREREQ([2.64])\n@@ -39,6 +50,10 @@ AC_PREREQ([2.64])\n AC_CANONICAL_SYSTEM\n target_alias=${target_alias-$host_alias}\n AC_SUBST(target_alias)\n+\n+# Test for GNU extensions. Will define _GNU_SOURCE if they're available\n+AC_USE_SYSTEM_EXTENSIONS\n+\n AM_INIT_AUTOMAKE(foreign no-dist)\n \n AM_MAINTAINER_MODE\n@@ -134,6 +149,10 @@ case \"${target}\" in\n     config_dir=\"x86\"\n     ;;\n \n+  arm-*-*)\n+    config_dir=\"arm\"\n+    ;;\n+\n   *)\n     config_dir=\"generic\"\n     ;;\n@@ -189,8 +208,7 @@ AC_LINK_IFELSE(\n # Check for pthread_{,attr_}[sg]etaffinity_np.\n AC_LINK_IFELSE(\n  [AC_LANG_PROGRAM(\n-  [#define _GNU_SOURCE\n-   #include <pthread.h>],\n+  [#include <pthread.h>],\n   [cpu_set_t cpuset;\n    pthread_attr_t attr;\n    pthread_getaffinity_np (pthread_self (), sizeof (cpu_set_t), &cpuset);"}, {"sha": "7f0befc870c25e91614750c3e178b61c528b40cb", "filename": "libcilkrts/configure.tgt", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fconfigure.tgt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fconfigure.tgt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fconfigure.tgt?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,8 +1,6 @@\n-#  @copyright\n-#  Copyright (C) 2011-2013, Intel Corporation\n+#  Copyright (C) 2013-2016, Intel Corporation\n #  All rights reserved.\n #  \n-#  @copyright\n #  Redistribution and use in source and binary forms, with or without\n #  modification, are permitted provided that the following conditions\n #  are met:\n@@ -17,7 +15,6 @@\n #      contributors may be used to endorse or promote products derived\n #      from this software without specific prior written permission.\n #  \n-#  @copyright\n #  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n #  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n #  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -30,13 +27,29 @@\n #  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n #  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n #  POSSIBILITY OF SUCH DAMAGE.\n+#  \n+#  *********************************************************************\n+#  \n+#  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+#  a repository at cilkplus.org. Changes made to this file that are not\n+#  submitted through the contribution process detailed at\n+#  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+#  time that a new version is released. Changes only submitted to the\n+#  GNU compiler collection or posted to the git repository at\n+#  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+#  not tracked.\n+#  \n+#  We welcome your contributions to this open source project. Thank you\n+#  for your assistance in helping us improve Cilk Plus.\n \n-# Disable Cilk Runtime library for non x86 architecture...for now.\n+# Disable Cilk Runtime library for unsupported architectures.\n case \"${target}\" in\n   x86_64-*-*)\n     ;;\n   i?86-*-*)\n     ;;\n+  arm-*-*)\n+    ;;\n   *-*-*)\n     UNSUPPORTED=1\n     ;;"}, {"sha": "86038ac1adc1126553ecc1247fbe39a6dd4d892c", "filename": "libcilkrts/include/cilk/cilk.h", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Fcilk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Fcilk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Fcilk%2Fcilk.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,10 +1,8 @@\n /*  cilk.h                  -*-C++-*-\n  *\n- *  @copyright\n- *  Copyright (C) 2010-2013, Intel Corporation\n+ *  Copyright (C) 2010-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -19,7 +17,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -32,40 +29,54 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  */\n  \n /** @file cilk.h\n  *\n- *  @brief Provides convenient aliases for the Cilk language keywords.\n+ *  @brief Provides convenient aliases for Intel(R) Cilk(TM) language keywords.\n  *\n  *  @details\n- *  Since Cilk is a nonstandard extension to both C and C++, the Cilk\n- *  language keywords all begin with \u201c`_Cilk_`\u201d, which guarantees that they\n+ *  Since Intel Cilk Plus is a nonstandard extension to both C and C++, the Intel\n+ *  Cilk language keywords all begin with \"`_Cilk_`\", which guarantees that they\n  *  will not conflict with user-defined identifiers in properly written \n- *  programs, so that \u201cstandard\u201d C and C++ programs can safely be\n- *  compiled a Cilk-enabled C or C++ compiler.\n+ *  programs. This way, a Cilk-enabled C or C++ compiler can safely compile \n+ *  \"standard\" C and C++ programs.\n  *\n  *  However, this means that the keywords _look_ like something grafted on to\n  *  the base language. Therefore, you can include this header:\n  *\n  *      #include \"cilk/cilk.h\"\n  *\n- *  and then write the Cilk keywords with a \u201c`cilk_`\u201d prefix instead of\n- *  \u201c`_Cilk_`\u201d.\n+ *  and then write the Intel Cilk keywords with a \"`cilk_`\" prefix instead of\n+ *  \"`_Cilk_`\".\n  *\n  *  @ingroup language\n  */\n  \n  \n /** @defgroup language Language Keywords\n- *  Definitions having to do with the Cilk language.\n+ *  Definitions for the Intel Cilk language.\n  *  @{\n  */\n  \n #ifndef cilk_spawn\n # define cilk_spawn _Cilk_spawn ///< Spawn a task that can execute in parallel.\n # define cilk_sync  _Cilk_sync  ///< Wait for spawned tasks to complete.\n-# define cilk_for   _Cilk_for   ///< Execute iterations of a for loop in parallel.\n+# define cilk_for   _Cilk_for   ///< Execute iterations of a `for` loop in parallel.\n #endif\n \n /// @}"}, {"sha": "6cc62c994b73505e3c0ea7f580e01e618ec28459", "filename": "libcilkrts/include/cilk/cilk_api.h", "status": "modified", "additions": 98, "deletions": 86, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Fcilk_api.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Fcilk_api.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Fcilk%2Fcilk_api.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,10 +1,8 @@\n /*  cilk_api.h\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -19,7 +17,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -32,23 +29,37 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  */\n- \n+\n /** @file cilk_api.h\n  *\n- * @brief Defines the documented API exposed by the Cilk Plus for use\n- * by applications.\n+ * @brief Defines the Intel(R) Cilk(TM) Plus API for use by applications.\n  *\n  *  @ingroup api\n  */\n- \n+\n #ifndef INCLUDED_CILK_API_H\n #define INCLUDED_CILK_API_H\n \n+\n /** @defgroup api Runtime API\n- *  API to allow user programs to interact with the Cilk runtime.\n- *  @{\n- */\n+* API to interact with the Intel Cilk Plus runtime.\n+* @{\n+*/\n \n #ifndef CILK_STUB /* Real (non-stub) definitions */\n \n@@ -81,7 +92,7 @@\n \n __CILKRTS_BEGIN_EXTERN_C\n \n-/** Return values from __cilkrts_set_param() and __cilkrts_set_param_w() \n+/** Return values from `__cilkrts_set_param()` and `__cilkrts_set_param_w()`\n  */\n enum __cilkrts_set_param_status {\n     __CILKRTS_SET_PARAM_SUCCESS = 0, /**< Success - parameter set */\n@@ -91,79 +102,79 @@ enum __cilkrts_set_param_status {\n     __CILKRTS_SET_PARAM_LATE    = 4  /**< Too late to change parameter value */\n };\n \n-/** Set user controllable runtime parameters\n+/** Sets user controllable runtime parameters\n  *\n- *  Call this function to set runtime parameters that control the behavior \n- *  of the Cilk scheduler.\n+ *  Call this function to set runtime parameters that control the behavior\n+ *  of the Intel Cilk Plus scheduler.\n  *\n  *  @param param    A string specifying the parameter to be set. One of:\n  *  -   `\"nworkers\"`\n  *  -   `\"force reduce\"`\n  *  @param value    A string specifying the parameter value.\n- *  @returns        A value from the @ref __cilkrts_set_param_status \n+ *  @returns        A value from the @ref __cilkrts_set_param_status\n  *                  enumeration indicating the result of the operation.\n  *\n  *  @par The \"nworkers\" parameter\n  *\n  *  This parameter specifies the number of worker threads to be created by the\n- *  Cilk runtime. @a Value must be a string of digits to be parsed by \n- *  `strtol()`.\n+ *  Intel Cilk Plus runtime. @a Value must be a string of digits to be parsed by\n+ *  `strtol()` as a decimal number.\n  *\n  *  The number of worker threads is:\n- *  1.  the value set with `__cilkrts_set_param(\"nworkers\")`, if it is \n+ *  1.  the value set with `__cilkrts_set_param(\"nworkers\")`, if it is\n  *      positive; otherwise,\n- *  2.  the value of the CILK_NWORKERS environment variable, if it is \n+ *  2.  the value of the CILK_NWORKERS environment variable, if it is\n  *      defined; otherwise\n  *  3.  the number of cores available, as reported by the operating system.\n  *\n  *  @note\n- *  Technically, Cilk distinguishes between the _user thread_ (the thread that\n- *  the user code was executing on when the Cilk runtime started), and \n- *  _worker threads_ (new threads created by the Cilk runtime to support\n- *  Cilk parallelism). `nworkers` actually includes both the user thread and\n- *  the worker threads; that is, it is one greater than the number of true\n- *  \u201cworker threads\u201d.\n+ *  Technically, Intel Cilk Plus distinguishes between the _user thread_ (the thread\n+ *  that the user code was executing on when the Intel Cilk Plus runtime started),\n+ *  and _worker threads_ (new threads created by the Intel Cilk Plus runtime to\n+ *  support Intel Cilk Plus parallelism). `nworkers` actually includes both the user\n+ *  thread and the worker threads; that is, it is one greater than the number of\n+ *  true \"worker threads\".\n  *\n  *  @note\n- *  Setting `nworkers = 1` produces serial behavior. Cilk spawns and syncs will\n- *  be executed, but with only one worker, continuations will never be stolen,\n- *  so all code will execute in serial.\n+ *  Setting `nworkers = 1` produces serial behavior. Intel Cilk Plus spawns and syncs\n+ *  will be executed, but with only one worker, continuations will never be\n+ *  stolen, so all code will execute in serial.\n  *\n  *  @warning\n- *  The number of worker threads can only be set *before* the runtime has \n- *  started. Attempting to set it when the runtime is running will have no \n- *  effect, and will return an error code. You can call __cilkrts_end_cilk() \n+ *  The number of worker threads can only be set *before* the runtime has\n+ *  started. Attempting to set it when the runtime is running will have no\n+ *  effect, and will return an error code. You can call __cilkrts_end_cilk()\n  *  to shut down the runtime to change the number of workers.\n  *\n  *  @warning\n- *  The default Cilk scheduler behavior is usually pretty good. The ability\n- *  to override `nworkers` can be useful for experimentation, but it won\u2019t\n- *  usually be necessary for getting good performance.\n+ *  The default Intel Cilk scheduler behavior is usually pretty good. The\n+ *  ability to override `nworkers` can be useful for experimentation, but it\n+ *  won't usually be necessary for getting good performance.\n  *\n  *  @par The \"force reduce\" parameter\n  *\n  *  This parameter controls whether the runtime should allocate a new view\n- *  for a reducer for every parallel strand that it is accessed on. (See \n- *  @ref pagereducers.) @a Value must be `\"1\"` or `\"true\"` to enable the \n- *  \u201cforce reduce\u201d behavior, or `\"0\"` or `\"false\"` to disable it.\n+ *  for a reducer for every parallel strand that it is accessed on. (See\n+ *  @ref pagereducers.) @a Value must be `\"1\"` or `\"true\"` to enable the\n+ *  \"force reduce\" behavior, or `\"0\"` or `\"false\"` to disable it.\n  *\n- *  \u201cForce reduce\u201d behavior will also be enabled if \n+ *  \"Force reduce\" behavior will also be enabled if\n  *  `__cilkrts_set_param(\"force reduce\")` is not called, but the\n  *  `CILK_FORCE_REDUCE` environment variable is defined.\n  *\n  *  @warning\n- *  When this option is enabled, `nworkers` should be set to `1`. Using \u201cforce\n- *  reduce\u201d with more than one worker may result in runtime errors.\n- *  \n+ *  When this option is enabled, `nworkers` should be set to `1`. Using \"force\n+ *  reduce\" with more than one worker may result in runtime errors.\n+ *\n  *  @warning\n- *  Enabling this option can significantly reduce performance. It should\n- *  _only_ be used as a debugging tool.\n+ *  Enabling this option can significantly reduce performance. Use it\n+ *  _only_ as a debugging tool.\n  */\n CILK_API(int) __cilkrts_set_param(const char *param, const char *value);\n \n #ifdef _WIN32\n /**\n- * Set user controllable parameters using wide strings\n+ * Sets user controllable parameters using wide strings\n  *\n  * @note This variant of __cilkrts_set_param() is only available\n  * on Windows.\n@@ -173,50 +184,50 @@ CILK_API(int) __cilkrts_set_param(const char *param, const char *value);\n CILK_API(int) __cilkrts_set_param_w(const wchar_t *param, const wchar_t *value);\n #endif\n \n-/** Shut down and deallocate all Cilk state.  The runtime will abort the\n- *  application if Cilk is still in use by this thread.  Otherwise the runtime\n- *  will wait for all other threads using Cilk to exit.\n+/** Shuts down and deallocates all Intel Cilk Plus states. If Intel Cilk Plus is still in\n+ * use by the calling thread, the runtime aborts the application. Otherwise, the\n+ * runtime waits for all other threads using Intel Cilk Plus to exit.\n  */\n CILK_API(void) __cilkrts_end_cilk(void);\n \n-/** Initialize the Cilk data structures and start the runtime.\n+/** Initializes Intel Cilk Plus data structures and start the runtime.\n  */\n CILK_API(void) __cilkrts_init(void);\n \n-/** Return the runtime `nworkers` parameter. (See the discussion of `nworkers`\n+/** Returns the runtime `nworkers` parameter. (See the discussion of `nworkers`\n  *  in the documentation for __cilkrts_set_param().)\n  */\n CILK_API(int) __cilkrts_get_nworkers(void);\n \n-/** Return the number of thread data structures.\n+/** Returns the number of thread data structures.\n  *\n- *  This function returns the number of data structures that has been allocated \n- *  allocated by the runtime to hold information about user and worker threads.\n+ *  This function returns the number of data structures that have been allocated\n+ *  by the runtime to hold information about user and worker threads.\n  *\n- *  If you don\u2019t already know what this is good for, then you probably don\u2019t\n- *  need it.\n+ *  If you don't already know what this is good for, then you probably don't\n+ *  need it. :)\n  */\n CILK_API(int) __cilkrts_get_total_workers(void);\n \n-/** What thread is the function running on?\n+/** Returns a small integer identifying the current thread.\n  *\n- *  Return a small integer identifying the current thread. Each worker thread\n- *  started by the Cilk runtime library has a unique worker number in the range \n- *  `1 .. nworkers - 1`.\n+ *  What thread is the function running on? Each worker thread\n+ *  started by the Intel Cilk Plus runtime library has a unique worker number in the\n+ *  range `1 .. nworkers - 1`.\n  *\n  *  All _user_ threads (threads started by the user, or by other libraries) are\n  *  identified as worker number 0. Therefore, the worker number is not unique\n  *  across multiple user threads.\n  */\n CILK_API(int) __cilkrts_get_worker_number(void);\n \n-/** Test whether \u201cforce reduce\u201d behavior is enabled.\n- *  \n+/** Tests whether \"force reduce\" behavior is enabled.\n+ *\n  *  @return Non-zero if force-reduce mode is on, zero if it is off.\n  */\n CILK_API(int) __cilkrts_get_force_reduce(void);\n \n-/** Interact with tools\n+/** Interacts with tools\n  */\n CILK_API(void)\n     __cilkrts_metacall(unsigned int tool, unsigned int code, void *data);\n@@ -229,12 +240,13 @@ typedef struct _EXCEPTION_RECORD _EXCEPTION_RECORD;\n  */\n typedef void (*__cilkrts_pfn_seh_callback)(const _EXCEPTION_RECORD *exception);\n \n-/** Specify a function to call when a non-C++ exception is caught.\n+/** Specifies a function to call when a non-C++ exception is caught.\n  *\n- *  Cilk Plus parallelism plays nicely with C++ exception handling, but the \n- *  Cilk Plus runtime has no way to unwind the stack across a strand boundary \n- *  for Microsoft SEH (\u201cStructured Exception Handling\u201d) exceptions. Therefore, \n- *  when the runtime catches such an exception, it must abort the application.\n+ *  Intel Cilk Plus parallelism plays nicely with C++ exception handling, but\n+ *  the Intel Cilk Plus runtime has no way to unwind the stack across a strand\n+ *  boundary for Microsoft SEH (\"Structured Exception Handling\") exceptions.\n+ *  Therefore, when the runtime catches such an exception, it must abort the\n+ *  application.\n  *\n  *  If an SEH callback has been set, the runtime will call it before aborting.\n  *\n@@ -267,50 +279,50 @@ __cilkrts_bump_worker_rank_internal(__cilkrts_worker* w);\n /// @endcond\n \n \n-/** Get the current pedigree, in a linked list representation.\n+/** Gets the current pedigree in a linked list representation.\n  *\n  *  This routine returns a copy of the last node in the pedigree list.\n  *  For example, if the current pedigree (in order) is <1, 2, 3, 4>,\n  *  then this method returns a node with rank == 4, and whose parent\n  *  field points to the node with rank of 3.  In summary, following the\n  *  nodes in the chain visits the terms of the pedigree in reverse.\n- * \n+ *\n  *  The returned node is guaranteed to be valid only until the caller\n  *  of this routine has returned.\n  */\n __CILKRTS_INLINE\n-__cilkrts_pedigree __cilkrts_get_pedigree(void) \n+__cilkrts_pedigree __cilkrts_get_pedigree(void)\n {\n-    return __cilkrts_get_pedigree_internal(__cilkrts_get_tls_worker());    \n+    return __cilkrts_get_pedigree_internal(__cilkrts_get_tls_worker());\n }\n \n /** Context used by __cilkrts_get_pedigree_info.\n  *\n  *  @deprecated\n- *  This data structure is only used by the deprecated \n+ *  This data structure is only used by the deprecated\n  *  __cilkrts_get_pedigree_info function.\n  *\n  *  Callers should initialize the `data` array to NULL and set the `size`\n  *  field to `sizeof(__cilkrts_pedigree_context_t)` before the first call\n- *  to __cilkrts_get_pedigree_info(), and should not examine or modify it\n- *  thereafter.\n+ *  to `__cilkrts_get_pedigree_info()`. Also, callers should not examine or\n+ *  modify `data` thereafter.\n  */\n typedef struct\n {\n     __STDNS size_t size;    /**< Size of the struct in bytes */\n     void *data[3];          /**< Opaque context data */\n } __cilkrts_pedigree_context_t;\n \n-/** Get pedigree information.\n+/** Gets pedigree information.\n  *\n  *  @deprecated\n  *  Use __cilkrts_get_pedigree() instead.\n  *\n- *  This routine allows code to walk up the stack of Cilk frames to gather\n+ *  This routine allows code to walk up the stack of Intel Cilk Plus frames to gather\n  *  the pedigree.\n  *\n  *  Initialize the pedigree walk by filling the pedigree context with NULLs\n- *  and setting the size field to sizeof(__cilkrts_pedigree_context).\n+ *  and setting the size field to `sizeof(__cilkrts_pedigree_context)`.\n  *  Other than initialization to NULL to start the walk, user coder should\n  *  consider the pedigree context data opaque and should not examine or\n  *  modify it.\n@@ -326,7 +338,7 @@ CILK_API(int)\n __cilkrts_get_pedigree_info(/* In/Out */ __cilkrts_pedigree_context_t *context,\n                             /* Out */    uint64_t *sf_birthrank);\n \n-/** Get the rank of the currently executing worker.\n+/** Gets the rank of the currently executing worker.\n  *\n  *  @deprecated\n  *  Use `__cilkrts_get_pedigree().rank` instead.\n@@ -335,24 +347,24 @@ __cilkrts_get_pedigree_info(/* In/Out */ __cilkrts_pedigree_context_t *context,\n  * @returns <0 - Failure - *rank is not changed\n  */\n CILK_EXPORT_AND_INLINE\n-int __cilkrts_get_worker_rank(uint64_t *rank) \n+int __cilkrts_get_worker_rank(uint64_t *rank)\n {\n     *rank = __cilkrts_get_pedigree().rank;\n     return 0;\n }\n \n-/** Increment the pedigree rank of the currently executing worker.\n+/** Increments the pedigree rank of the currently executing worker.\n  *\n  * @returns 0 - Success - rank was incremented\n- * @returns-1 - Failure\n+ * @returns -1 - Failure\n  */\n CILK_EXPORT_AND_INLINE\n int __cilkrts_bump_worker_rank(void)\n {\n     return __cilkrts_bump_worker_rank_internal(__cilkrts_get_tls_worker());\n }\n \n-/** Increment the pedigree rank for a cilk_for loop. \n+/** Increments the pedigree rank for a `cilk_for` loop.\n  *  Obsolete.\n  *\n  *  @deprecated\n@@ -362,7 +374,7 @@ int __cilkrts_bump_worker_rank(void)\n  *  be called, but will have no effect.\n  */\n CILK_EXPORT_AND_INLINE\n-int __cilkrts_bump_loop_rank(void) \n+int __cilkrts_bump_loop_rank(void)\n {\n     return 0;\n }\n@@ -375,7 +387,7 @@ __CILKRTS_END_EXTERN_C\n \n #else /* CILK_STUB */\n \n-// Programs compiled with CILK_STUB are not linked with the Cilk runtime \n+// Programs compiled with CILK_STUB are not linked with the Intel Cilk Plus runtime\n // library, so they should not have external references to runtime functions.\n // Therefore, the functions are replaced with stubs.\n \n@@ -401,8 +413,8 @@ __CILKRTS_END_EXTERN_C\n \n /*\n  * A stub method for __cilkrts_get_pedigree.\n- * Returns an empty __cilkrts_pedigree. \n- */ \n+ * Returns an empty __cilkrts_pedigree.\n+ */\n __CILKRTS_INLINE\n __cilkrts_pedigree __cilkrts_get_pedigree_stub(void)\n {"}, {"sha": "0ebd57cba21734586c2b6c449f135ffc34d6e847", "filename": "libcilkrts/include/cilk/cilk_api_linux.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Fcilk_api_linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Fcilk_api_linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Fcilk%2Fcilk_api_linux.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,9 +1,7 @@\n /*\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -18,7 +16,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -31,6 +28,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  *\n  */\n "}, {"sha": "b4a54f37c9bdf6ca0c0931fe9f595dc00f244a76", "filename": "libcilkrts/include/cilk/cilk_stub.h", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Fcilk_stub.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Fcilk_stub.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Fcilk%2Fcilk_stub.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,10 +1,8 @@\n /*  cilk_stub.h                  -*-C++-*-\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -19,7 +17,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -32,13 +29,27 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  *\n  */\n \n #ifndef INCLUDED_CILK_STUB_DOT_H\n #define INCLUDED_CILK_STUB_DOT_H\n \n-/* Definitions for creating a serialization from a Cilk program.\n+/* Definitions for creating a serialization from an Intel(R) Cilk(TM) Plus program.\n  * These definitions are suitable for use by a compiler that is not\n  * Cilk-enabled.\n  */\n@@ -47,9 +58,14 @@\n #undef __cilk\n #define CILK_STUB\n \n-/* Replace Cilk keywords with serial equivalents */\n+/* Replace Intel Cilk keywords with serial equivalents */\n #define _Cilk_spawn\n #define _Cilk_sync\n #define _Cilk_for for\n \n+/* Replace simd-loop keywords with serial equivalents */\n+#define _Simd\n+#define _Safelen(...)\n+#define _Reduction(...)\n+\n #endif /* ! defined(INCLUDED_CILK_STUB_DOT_H) */"}, {"sha": "5f4a8c5dff16fabd41166397453d382726776fd2", "filename": "libcilkrts/include/cilk/cilk_undocumented.h", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Fcilk_undocumented.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Fcilk_undocumented.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Fcilk%2Fcilk_undocumented.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,9 +1,7 @@\n /*\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -18,7 +16,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -31,6 +28,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  *\n  ******************************************************************************\n  *\n@@ -83,7 +94,7 @@ CILK_EXPORT __CILKRTS_NOTHROW\n void *__cilkrts_get_sf(void);\n \n /**\n- * Returns the size of stacks created by Cilk.\n+ * Returns the size of stacks created by Intel(R) Cilk(TM) Plus.\n  */\n CILK_EXPORT __CILKRTS_NOTHROW\n size_t __cilkrts_get_stack_size(void);"}, {"sha": "91b2928e7e62a61013b8f1a843004c9445c4646b", "filename": "libcilkrts/include/cilk/common.h", "status": "modified", "additions": 31, "deletions": 21, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Fcommon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Fcommon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Fcilk%2Fcommon.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,10 +1,8 @@\n /** common.h\n  *\n- *  @copyright\n- *  Copyright (C) 2010-2013, Intel Corporation\n+ *  Copyright (C) 2010-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -19,7 +17,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -32,37 +29,49 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  */\n  \n /** @file common.h\n  *\n- * @brief Defines common macros and structures used by the Intel Cilk Plus\n- * runtime.\n+ * @brief Defines common macros and structures used by the Intel(R) Cilk(TM) Plus runtime.\n  *\n  *  @ingroup common\n  */\n \n /** @defgroup common Common Definitions\n- *  Macro, structure, and class definitions used elsewhere in the runtime.\n+ *  Definitions for runtime macros, structures, and classes.\n  *  @{\n  */\n  \n #ifndef INCLUDED_CILK_COMMON\n #define INCLUDED_CILK_COMMON\n \n #ifdef __cplusplus\n-/** Namespace for all Cilk definitions that can be included in user code.\n+/** Namespace for all Intel Cilk Plus definitions that can be included in user code.\n  */\n namespace cilk {\n     \n-    /** Namespace for definitions that are primarily intended for use\n-     *  in other Cilk definitions.\n+    /** Namespace for definitions re-used in other Intel Cilk Plus definitions.\n      */\n     namespace internal {}\n }\n #endif\n \n-/** Cilk library version = 1.01\n+/** Intel Cilk Plus library version = 1.02\n  */\n #define CILK_LIBRARY_VERSION 102\n \n@@ -73,7 +82,7 @@ namespace cilk {\n #endif\n \n /**\n- * Prefix standard library function and type names with __STDNS in order to\n+ * Prefix standard library function and type names with __STDNS to\n  * get correct lookup in both C and C++.\n  */\n #ifdef __cplusplus\n@@ -159,7 +168,7 @@ namespace cilk {\n \n /**\n  * Macro to specify alignment of a data member in a structure.\n- * Because of the way that gcc\u2019s alignment attribute is defined, @a n must\n+ * Because of the way that gcc's alignment attribute is defined, @a n must\n  * be a numeric literal, not just a compile-time constant expression.\n  */\n #ifdef _WIN32\n@@ -231,7 +240,7 @@ namespace cilk {\n /**\n  * OS-independent macro to specify a function that should be inlined\n  */\n-#ifdef __cpluspus\n+#ifdef __cplusplus\n     // C++\n #   define __CILKRTS_INLINE inline\n #elif defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L\n@@ -247,7 +256,7 @@ namespace cilk {\n \n /**\n  * Functions marked as CILK_EXPORT_AND_INLINE have both\n- * inline versions defined in the Cilk API, as well as\n+ * inline versions defined in the Intel Cilk Plus API, as well as\n  * non-inlined versions that are exported (for\n  * compatibility with previous versions that did not\n  * inline the functions).\n@@ -306,13 +315,14 @@ namespace cilk {\n #endif  /* ! defined(_MSC_VER) || (_MSC_VER >= 1600) */\n \n /**\n- * @brief Application Binary Interface version of the Cilk runtime library.\n+ * @brief Application Binary Interface (ABI) version of the Intel Cilk Plus runtime\n+ * library.\n  *\n- * The ABI version is determined by the compiler used.  An object file\n- * compiled with a higher ABI version is not compatible with a library that is\n- * compiled with a lower ABI version.  An object file compiled with a lower\n- * ABI version, however, can be used with a library compiled with a higher ABI\n- * version unless otherwise stated.\n+ * The compiler determines the ABI version used for compilation.  Object files\n+ * compiled with higher ABI versions are not compatible with libraries compiled\n+ * with lower ABI versions.  However, an object file compiled with a lower ABI\n+ * version can be used with a library compiled with a higher ABI version \n+ * (unless otherwise stated.)\n  */\n #ifndef __CILKRTS_ABI_VERSION\n #   ifdef IN_CILK_RUNTIME"}, {"sha": "66899a25bc9fe6a1cbf367b5e0f2eccb66d697ba", "filename": "libcilkrts/include/cilk/holder.h", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Fholder.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Fholder.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Fcilk%2Fholder.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,9 +1,7 @@\n /*\n- *  @copyright\n- *  Copyright (C) 2011-2013, Intel Corporation\n+ *  Copyright (C) 2011-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -18,7 +16,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -31,6 +28,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  *\n  */\n \n@@ -60,8 +71,8 @@\n  * common variable where it is not necessary to preserve changes from\n  * different parallel strands.  In effect, a holder acts a bit like\n  * thread-local storage, but has qualities that work better with the\n- * fork-join structure of Cilk.  In particular, a holder has the following\n- * qualities:\n+ * fork-join structure of Intel(R) Cilk(TM) Plus.  In particular, a holder has the\n+ * following qualities:\n  *\n  * - The view of a holder before the first spawn within a function is the same\n  *   as the view after each sync (as in the case of a reducer).\n@@ -220,7 +231,7 @@\n  * same as the view on entry to 'h'.  More importantly, the view of the holder\n  * within the recursive call to 'compute' is the same as the view on entry to\n  * 'h', even if a different worker is executing the recursive call.  Thus, the\n- * holder view within a Cilk program has useful qualities not found in\n+ * holder view within a Intel Cilk Plus program has useful qualities not found in\n  * thread-local storage.\n  */\n "}, {"sha": "dd7ccfd90202eba00c3672936cc0ffd1b3fa707f", "filename": "libcilkrts/include/cilk/hyperobject_base.h", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Fhyperobject_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Fhyperobject_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Fcilk%2Fhyperobject_base.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,9 +1,7 @@\n /*\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -18,7 +16,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -31,6 +28,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  *\n  */\n \n@@ -49,7 +60,7 @@\n \n #if defined _WIN32 || defined _WIN64\n # if !defined CILK_STUB && !defined IN_CILK_RUNTIME\n-    /* bring in the Cilk library, which has definitions for some of these\n+    /* bring in the Intel(R) Cilk(TM) Plus library, which has definitions for some of these\n      * functions. */\n #   pragma comment(lib, \"cilkrts\")\n # endif\n@@ -126,7 +137,7 @@ CILK_EXPORT\n \n #else // CILK_STUB\n \n-// Programs compiled with CILK_STUB are not linked with the Cilk runtime \n+// Programs compiled with CILK_STUB are not linked with the Intel Cilk Plus runtime \n // library, so they should not have external references to cilkrts functions.\n // Furthermore, they don't need the hyperobject functionality, so the\n // functions can be stubbed."}, {"sha": "2df7cf6467ccff69cb15d372c73f7bebdf86462d", "filename": "libcilkrts/include/cilk/metaprogramming.h", "status": "modified", "additions": 61, "deletions": 46, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Fmetaprogramming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Fmetaprogramming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Fcilk%2Fmetaprogramming.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,10 +1,8 @@\n /*  metaprogramming.h                  -*- C++ -*-\n  *\n- *  @copyright\n- *  Copyright (C) 2012-2013, Intel Corporation\n+ *  Copyright (C) 2012-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -19,7 +17,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -32,11 +29,25 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  */\n \n /** @file metaprogramming.h\n  *\n- *  @brief Defines metaprogramming utility classes used in the Cilk library.\n+ *  @brief Defines metaprogramming utility classes used in the Intel(R) Cilk(TM) Plus library.\n  *\n  *  @ingroup common\n  */\n@@ -61,7 +72,7 @@ namespace internal {\n /** Test if a class is empty.\n  *\n  *  If @a Class is an empty (and therefore necessarily stateless) class, then\n- *  the \u201cempty base-class optimization\u201d guarantees that\n+ *  the \"empty base-class optimization\" guarantees that\n  *  `sizeof(check_for_empty_class<Class>) == sizeof(char)`. Conversely, if\n  *  `sizeof(check_for_empty_class<Class>) > sizeof(char)`, then @a Class is not\n  *  empty, and we must discriminate distinct instances of @a Class.\n@@ -84,7 +95,7 @@ namespace internal {\n  *  @ingroup common\n  */\n template <class Class>\n-class class_is_empty { \n+class class_is_empty {\n     class check_for_empty_class : public Class\n     {\n         char m_data;\n@@ -147,11 +158,11 @@ struct align_of\n  *  @tparam Size        The required minimum size of the resulting class.\n  *  @tparam Alignment   The required alignment of the resulting class.\n  *\n- *  @pre    @a Alignment shall be a power of 2 no greater then 64.\n+ *  @pre    @a Alignment shall be a power of 2 no greater than 64.\n  *\n  *  @note   This is implemented using the `CILK_ALIGNAS` macro, which uses\n  *          the non-standard, implementation-specific features\n- *          `__declspec(align(N))` on Windows, and \n+ *          `__declspec(align(N))` on Windows, and\n  *          `__attribute__((__aligned__(N)))` on Unix. The `gcc` implementation\n  *          of `__attribute__((__aligned__(N)))` requires a numeric literal `N`\n  *          (_not_ an arbitrary compile-time constant expression). Therefore,\n@@ -165,21 +176,22 @@ struct align_of\n template <std::size_t Size, std::size_t Alignment>\n struct aligned_storage;\n \n-template<std::size_t Size> class aligned_storage<Size,  1> \n+/// @cond\n+template<std::size_t Size> class aligned_storage<Size,  1>\n     { CILK_ALIGNAS( 1) char m_bytes[Size]; };\n-template<std::size_t Size> class aligned_storage<Size,  2> \n+template<std::size_t Size> class aligned_storage<Size,  2>\n     { CILK_ALIGNAS( 2) char m_bytes[Size]; };\n-template<std::size_t Size> class aligned_storage<Size,  4> \n+template<std::size_t Size> class aligned_storage<Size,  4>\n     { CILK_ALIGNAS( 4) char m_bytes[Size]; };\n-template<std::size_t Size> class aligned_storage<Size,  8> \n+template<std::size_t Size> class aligned_storage<Size,  8>\n     { CILK_ALIGNAS( 8) char m_bytes[Size]; };\n-template<std::size_t Size> class aligned_storage<Size, 16> \n+template<std::size_t Size> class aligned_storage<Size, 16>\n     { CILK_ALIGNAS(16) char m_bytes[Size]; };\n-template<std::size_t Size> class aligned_storage<Size, 32> \n+template<std::size_t Size> class aligned_storage<Size, 32>\n     { CILK_ALIGNAS(32) char m_bytes[Size]; };\n-template<std::size_t Size> class aligned_storage<Size, 64> \n+template<std::size_t Size> class aligned_storage<Size, 64>\n     { CILK_ALIGNAS(64) char m_bytes[Size]; };\n-\n+/// @endcond\n \n /** A buffer of uninitialized bytes with the same size and alignment as a\n  *  specified type.\n@@ -188,14 +200,14 @@ template<std::size_t Size> class aligned_storage<Size, 64>\n  *  properties as `Type`, but it will contain only raw (uninitialized) bytes.\n  *  This allows the definition of a data member which can contain a `Type`\n  *  object which is initialized explicitly under program control, rather\n- *  than implicitly as part of the initialization of the containing class. \n+ *  than implicitly as part of the initialization of the containing class.\n  *  For example:\n  *\n  *      class C {\n  *          storage_for_object<MemberClass> _member;\n  *      public:\n  *          C() ... // Does NOT initialize _member\n- *          void initialize(args) \n+ *          void initialize(args)\n  *              { new (_member.pointer()) MemberClass(args); }\n  *          const MemberClass& member() const { return _member.object(); }\n  *                MemberClass& member()       { return _member.object(); }\n@@ -204,21 +216,22 @@ template<std::size_t Size> class aligned_storage<Size, 64>\n  *                  by this class.\n  */\n template <typename Type>\n-class storage_for_object : \n+class storage_for_object :\n     aligned_storage< sizeof(Type), align_of<Type>::value >\n {\n public:\n     /// Return a typed reference to the buffer.\n     const Type& object() const { return *reinterpret_cast<Type*>(this); }\n+    /// Return a typed reference to the buffer.\n           Type& object()       { return *reinterpret_cast<Type*>(this); }\n };\n \n \n /** Get the functor class corresponding to a binary function type.\n  *\n- *  The `binary_functor` template class class can be instantiated with a binary\n+ *  The `binary_functor` template class can be instantiated with a binary\n  *  functor class or with a real binary function, and will yield an equivalent\n- *  binary functor class class in either case.\n+ *  binary functor class in either case.\n  *\n  *  @tparam F   A binary functor class, a binary function type, or a pointer to\n  *              binary function type.\n@@ -260,7 +273,7 @@ struct binary_functor<R(*)(A,B)> {\n  *  `typed_indirect_binary_function<F>` is an `Adaptable Binary Function` class\n  *  based on an existing binary functor class or binary function type @a F. If\n  *  @a F is a stateless class, then this class will be empty, and its\n- *  `operator()` will invoke @a F\u2019s `operator()`. Otherwise, an object of this\n+ *  `operator()` will invoke @a F's `operator()`. Otherwise, an object of this\n  *  class will hold a pointer to an object of type @a F, and will refer its\n  *  `operator()` calls to the pointed-to @a F object.\n  *\n@@ -276,14 +289,15 @@ struct binary_functor<R(*)(A,B)> {\n  *\n  *  @note       Just to repeat: if `F` is an empty class, then\n  *              `typed_indirect_binary_function\\<F\\>' is also an empty class.\n- *              This is critical for its use in the @ref min_max::view_base\n+ *              This is critical for its use in the\n+ *              @ref cilk::cilk_lib_1_1::min_max_internal::view_base\n  *              \"min/max reducer view classes\", where it allows the view to\n  *              call a comparison functor in the monoid without actually\n- *              having to allocate a pointer in the view class when the \n+ *              having to allocate a pointer in the view class when the\n  *              comparison class is empty.\n  *\n  *  @note       If you have an `Adaptable Binary Function` class or a binary\n- *              function type, then you can use the \n+ *              function type, then you can use the\n  *              @ref indirect_binary_function class, which derives the\n  *              argument and result types parameter type instead of requiring\n  *              you to specify them as template arguments.\n@@ -312,7 +326,7 @@ class typed_indirect_binary_function : std::binary_function<A1, A2, R>\n public:\n     /// Constructor captures a pointer to the wrapped function.\n     typed_indirect_binary_function(const F* f) : f(f) {}\n-    \n+\n     /// Return the comparator pointer, or `NULL` if the comparator is stateless.\n     const F* pointer() const { return f; }\n \n@@ -323,10 +337,10 @@ class typed_indirect_binary_function : std::binary_function<A1, A2, R>\n \n /// @copydoc typed_indirect_binary_function\n /// Specialization for an empty functor class. (This is only possible if @a F\n-/// itself is an empty class. If @a F is a function or pointer-to-function \n+/// itself is an empty class. If @a F is a function or pointer-to-function\n /// type, then the functor will contain a pointer.)\n template <typename F, typename A1, typename A2, typename R, typename Functor>\n-class typed_indirect_binary_function<F, A1, A2, R, Functor, true> : \n+class typed_indirect_binary_function<F, A1, A2, R, Functor, true> :\n     std::binary_function<A1, A2, R>\n {\n public:\n@@ -335,36 +349,37 @@ class typed_indirect_binary_function<F, A1, A2, R, Functor, true> :\n \n     /// Constructor discards the pointer to a stateless functor class.\n     typed_indirect_binary_function(const F* f) {}\n-    \n+\n     /// Create an instance of the stateless functor class and apply it to the arguments.\n     R operator()(const A1& a1, const A2& a2) const { return F()(a1, a2); }\n };\n \n \n /** Indirect binary function class with inferred types.\n  *\n- *  This is identical to @ref typed_indirect_binary_function, except that it\n- *  derives the binary function argument and result types from the parameter\n- *  type @a F instead of taking them as additional template parameters. If @a F\n- *  is a class type, then it must be an `Adaptable Binary Function`.\n+ *  This is identical to @ref cilk::internal::typed_indirect_binary_function,\n+ *  except that it derives the binary function argument and result types from\n+ *  the parameter type @a F instead of taking them as additional template\n+ *  parameters. If @a F is a class type, then it must be an `Adaptable Binary\n+ *  Function`.\n  *\n  *  @see typed_indirect_binary_function\n  *\n  *  @ingroup common\n  */\n template <typename F, typename Functor = typename binary_functor<F>::type>\n-class indirect_binary_function : \n+class indirect_binary_function :\n     typed_indirect_binary_function< F\n                                   , typename Functor::first_argument_type\n                                   , typename Functor::second_argument_type\n                                   , typename Functor::result_type\n-                                  > \n+                                  >\n {\n     typedef     typed_indirect_binary_function< F\n                                   , typename Functor::first_argument_type\n                                   , typename Functor::second_argument_type\n                                   , typename Functor::result_type\n-                                  > \n+                                  >\n                 base;\n public:\n     indirect_binary_function(const F* f) : base(f) {} ///< Constructor\n@@ -373,7 +388,7 @@ class indirect_binary_function :\n \n /** Choose a type based on a boolean constant.\n  *\n- *  This metafunction is identical to C++11\u2019s condition metafunction.\n+ *  This metafunction is identical to C++11's condition metafunction.\n  *  It needs to be here until we can reasonably assume that users will be\n  *  compiling with C++11.\n  *\n@@ -407,12 +422,12 @@ struct condition<false, IfTrue, IfFalse>\n  *  Causes a compilation error if a compile-time constant expression is false.\n  *\n  *  @par    Usage example.\n- *          This assertion  is used in reducer_min_max.h to avoid defining \n+ *          This assertion  is used in reducer_min_max.h to avoid defining\n  *          legacy reducer classes that would not be binary-compatible with the\n  *          same classes compiled with earlier versions of the reducer library.\n  *\n  *              __CILKRTS_STATIC_ASSERT(\n- *                  internal::class_is_empty< internal::binary_functor<Compare> >::value, \n+ *                  internal::class_is_empty< internal::binary_functor<Compare> >::value,\n  *                  \"cilk::reducer_max<Value, Compare> only works with an empty Compare class\");\n  *\n  *  @note   In a C++11 compiler, this is just the language predefined\n@@ -468,13 +483,13 @@ inline void* allocate_aligned(std::size_t size, std::size_t alignment)\n #ifdef _WIN32\n     return _aligned_malloc(size, alignment);\n #else\n-#if defined(__ANDROID__)\n+#if defined(__ANDROID__) || defined(__VXWORKS__)\n     return memalign(std::max(alignment, sizeof(void*)), size);\n #else\n     void* ptr;\n     return (posix_memalign(&ptr, std::max(alignment, sizeof(void*)), size) == 0) ? ptr : 0;\n #endif\n-#endif        \n+#endif\n }\n \n /** Implementation-specific aligned memory deallocation function.\n@@ -487,13 +502,13 @@ inline void deallocate_aligned(void* ptr)\n     _aligned_free(ptr);\n #else\n     std::free(ptr);\n-#endif        \n+#endif\n }\n \n /** Class to allocate and guard an aligned pointer.\n  *\n  *  A new_aligned_pointer object allocates aligned heap-allocated memory when\n- *  it is created, and automatically deallocates it when it is destroyed \n+ *  it is created, and automatically deallocates it when it is destroyed\n  *  unless its `ok()` function is called.\n  *\n  *  @tparam T   The type of the object to allocate on the heap. The allocated\n@@ -504,14 +519,14 @@ class new_aligned_pointer {\n     void* m_ptr;\n public:\n     /// Constructor allocates the pointer.\n-    new_aligned_pointer() : \n+    new_aligned_pointer() :\n         m_ptr(allocate_aligned(sizeof(T), internal::align_of<T>::value)) {}\n     /// Destructor deallocates the pointer.\n     ~new_aligned_pointer() { if (m_ptr) deallocate_aligned(m_ptr); }\n     /// Get the pointer.\n     operator void*() { return m_ptr; }\n     /// Return the pointer and release the guard.\n-    T* ok() { \n+    T* ok() {\n         T* ptr = static_cast<T*>(m_ptr);\n         m_ptr = 0;\n         return ptr;"}, {"sha": "09c2e196903c1abed22dc4b8cb30b6e545236cdf", "filename": "libcilkrts/include/cilk/reducer.h", "status": "modified", "additions": 628, "deletions": 526, "changes": 1154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Freducer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Freducer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Fcilk%2Freducer.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,10 +1,8 @@\n /*  reducer.h                  -*- C++ -*-\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -19,7 +17,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -32,19 +29,33 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  */\n- \n+\n /** @file reducer.h\n  *\n- *  @brief Defines foundation classes for creating Cilk reducers.\n+ *  @brief Defines foundation classes for creating Intel(R) Cilk(TM) Plus reducers.\n  *\n  *  @ingroup Reducers\n  *\n  *  @see @ref pagereducers\n  *\n  *  @defgroup Reducers Reducers\n  */\n- \n+\n #ifndef REDUCER_H_INCLUDED\n #define REDUCER_H_INCLUDED\n \n@@ -59,12 +70,96 @@\n \n namespace cilk {\n \n+/** Class for provisionally constructed objects.\n+ *\n+ *  The monoid_base<T,V>::construct() functions manually construct both a\n+ *  monoid and a view. If one of these is constructed successfully, and the\n+ *  construction of the other (or some other initialization) fails, then the\n+ *  first one must be destroyed to avoid a memory leak. Because the\n+ *  construction is explicit, the destruction must be explicit, too.\n+ *\n+ *  A provisional_guard object wraps a pointer to a newly constructed\n+ *  object. A call to its confirm() function confirms that the object is\n+ *  really going to be used. If the guard is destroyed without being\n+ *  confirmed, then the pointed-to object is destroyed (but not\n+ *  deallocated).\n+ *\n+ *  Expected usage:\n+ *\n+ *      provisional_guard<T1> x1_provisional( new (x1) T1 );\n+ *      \u2026 more initialization \u2026\n+ *      x1_provisional.confirm();\n+ *\n+ *  or\n+ *\n+ *      provisional_guard<T1> x1_provisional( new (x1) T1 );\n+ *      x1_provisional.confirm_if( new (x2) T2 );\n+ *\n+ *  If an exception is thrown in the \"more initialization\" code in the\n+ *  first example, or in the `T2` constructor in the second example, then\n+ *  `x1_provisional` will not be confirmed, so when its destructor is\n+ *  called during exception unwinding, the `T1` object that was constructed\n+ *  in `x1` will be destroyed.\n+ *\n+ *  **NOTE**: Do *not* be tempted to chain a `provisional_guard`\n+ *  constructor with `confirm_if` as in this example: \n+ *\n+ *      // BAD IDEA\n+ *      provisional_guard<T1>( new (x1) T1 ).confirm_if( new (x2) T2 );\n+ *\n+ *  The code above is problematic because the evaluation of the T2\n+ *  constructor is unsequenced with respect to the call to the\n+ *  `provisional_guard` constructor (and with respect the T1 constructor).\n+ *  Thus, the compiler may choose to evaluate `new (x2) T2` before\n+ *  constructing the guard and leak the T1 object if the `T2` constructor\n+ *  throws.\n+ *\n+ *  @tparam Type    The type of the provisionally constructed object.\n+ */\n+template <typename Type>\n+class provisional_guard {\n+    Type* m_ptr;\n+\n+public:\n+\n+    /** Constructor. Creates a guard for a provisionally constructed object.\n+     *\n+     *  @param ptr  A pointer to the provisionally constructed object.\n+     */\n+    provisional_guard(Type* ptr) : m_ptr(ptr) {}\n+\n+    /** Destructor. Destroy the object pointed to by the contained pointer\n+     *  if it has not been confirmed.\n+     */\n+    ~provisional_guard() { if (m_ptr) m_ptr->~Type(); }\n+\n+    /** Confirm the provisional construction. Do *not* delete the contained\n+     *  pointer when the guard is destroyed.\n+     */\n+    void confirm() { m_ptr = 0; }\n+\n+    /** Confirm provisional construction if argument is non-null. Note that\n+     *  if an exception is thrown during evaluation of the argument\n+     *  expression, then this function will not be called, and the\n+     *  provisional object will not be confirmed. This allows the usage:\n+     *\n+     *      x1_provisional.confirm_if( new (x2) T2() );\n+     *\n+     *  @param cond An arbitrary pointer. The provisional object will be\n+     *              confirmed if @a cond is not null.\n+     *\n+     *  @returns    The value of the @a cond argument.\n+     */\n+    template <typename Cond>\n+    Cond* confirm_if(Cond* cond) { if (cond) m_ptr = 0; return cond; }\n+};\n+\n /** Base class for defining monoids.\n  *\n  *  The monoid_base class template is useful for creating classes that model\n  *  the monoid concept. It provides the core type and memory management\n  *  functionality.  A subclass of monoid_base need only declare and implement\n- *  the `identity` and `reduce` functions. \n+ *  the `identity` and `reduce` functions.\n  *\n  *  The monoid_base class also manages the integration between the monoid, the\n  *  reducer class that is based on it, and an optional view class which wraps\n@@ -79,157 +174,59 @@ namespace cilk {\n template <typename Value, typename View = Value>\n class monoid_base\n {\n-protected:\n-\n-    /** Class for provisionally constructed objects.\n-     *\n-     *  The monoid_base::construct() functions manually construct both a monoid\n-     *  and a view. If one of these is constructed successfully, and the\n-     *  construction of the other (or some other initialization) fails, then \n-     *  the first one must be destroyed to avoid a memory leak. Because the\n-     *  construction is explicit, the destruction must be explicit, too.\n-     *\n-     *  A provisional_guard object wraps a pointer to a newly constructed\n-     *  object. A call to its confirm() function confirms that the object is\n-     *  really going to be used. If the guard is destroyed without being\n-     *  confirmed, then the pointed-to object is destroyed (but not\n-     *  deallocated).\n-     *  \n-     *  Expected usage:\n-     *\n-     *      provisional_guard<T1> x1_provisional( new (x1) T1() );\n-     *      \u2026 more initialization \u2026\n-     *      x1_provisional.confirm();\n-     *\n-     *  or\n-     *\n-     *      provisional_guard<T1> x1_provisional( new (x1) T1() );\n-     *      x1_provisional.confirm_if( new (x2) T2() );\n-     *\n-     *  If an exception is thrown in the \u201cmore initialization\u201d code in the \n-     *  first example, or in the `T2` constructor in the second example, then\n-     *  `x1_provisional` will not be confirmed, so when its destructor is \n-     *  called during exception unwinding, the `T1` object that was constructed\n-     *  in `x1` will be destroyed.\n-     *\n-     *  @see provisional()\n-     *\n-     *  @tparam Type    The type of the provisionally constructed object.\n-     */\n-    template <typename Type>\n-    class provisional_guard {\n-        Type* m_ptr;\n-    \n-    public:\n-    \n-        /** Constructor. Creates a guard for a provisionally constructed object.\n-         *\n-         *  @param ptr  A pointer to the provisionally constructed object.\n-         */\n-        provisional_guard(Type* ptr) : m_ptr(ptr) {}\n-        \n-        /** Destructor. Destroy the object pointed to by the contained pointer\n-         *  if it has not been confirmed.\n-         */\n-        ~provisional_guard() { if (m_ptr) m_ptr->~Type(); }\n-        \n-        /** Confirm the provisional construction. Do *not* delete the contained\n-         *  pointer when the guard is destroyed.\n-         */\n-        void confirm() { m_ptr = 0; }\n-        \n-        /** Confirm provisional construction if argument is non-null. Note that\n-         *  if an exception is thrown during evaluation of the argument\n-         *  expression, then this function will not be called, and the\n-         *  provisional object will not be confirmed. This allows the usage:\n-         *\n-         *      x1_provisional.confirm_if( new (x2) T2() );\n-         *\n-         *  @param cond An arbitrary pointer. The provisional object will be\n-         *              confirmed if @a cond is not null.\n-         * \n-         *  @returns    The value of the @a cond argument.\n-         */\n-        template <typename Cond>\n-        Cond* confirm_if(Cond* cond) { if (cond) m_ptr = 0; return cond; }\n-    };\n-\n-    \n-    /** Create a provisional_guard object. This function allows simpler code\n-     *  when the only use of a provisional_guard is in a\n-     *  provisional_guard::confirm_if() call immediately following its\n-     *  creation. Instead of\n-     *\n-     *      provisional_guard<T>guard( new (ptr_to_T) T() );\n-     *      guard.confirm_if( new (ptr_to_U) U() );\n-     *\n-     *  you can just write\n-     *\n-     *      provisional( new (ptr_to_T) T() ).confirm_if( new (ptr_to_U) U() );\n-     *\n-     *  @tparam Type    The type of the provisionally constructed object.\n-     *\n-     *  @param  ptr     A pointer to a provisionally constructed object.\n-     *\n-     *  @returns        A @ref provisional_guard object that guards the\n-     *                  provisionally constructed object pointed to by @a ptr.\n-     */\n-    template <typename Type> \n-    static provisional_guard<Type> provisional(Type* ptr) \n-        { return provisional_guard<Type>(ptr); }\n \n public:\n \n     /** Value type of the monoid.\n      */\n     typedef Value   value_type;\n-    \n+\n     /** View type of the monoid. Defaults to be the same as the value type.\n      *  @see monoid_with_view\n      */\n     typedef View    view_type;\n-    \n-    enum { \n+\n+    enum {\n         /** Should reducers created with this monoid be aligned?\n          *\n          *  @details\n-         *  \u201cAligned\u201d means that the view is allocated at a cache-line aligned\n+         *  \"Aligned\" means that the view is allocated at a cache-line aligned\n          *  offset in the reducer, and the reducer must be cache-line aligned.\n-         *  \u201cUnaligned\u201d means that the reducer as a whole is just naturally \n-         *  aligned, but it contains a large enough block of uninitialized \n+         *  \"Unaligned\" means that the reducer as a whole is just naturally\n+         *  aligned, but it contains a large enough block of uninitialized\n          *  storage for a cache-line aligned view to be allocated in it at\n          *  reducer construction time.\n          *\n-         *  Since the standard heap allocator (new reducer) does not allocate \n+         *  Since the standard heap allocator (new reducer) does not allocate\n          *  cache-line aligned storage, only unaligned reducers can be safely\n          *  allocated on the heap.\n-         *  \n+         *\n          *  Default is false (unaligned) unless overridden in a subclass.\n          *\n          *  @since 1.02\n-         *  (In Cilk library versions 1.0 and 1.01, the default was true.\n-         *  In Cilk library versions prior to 1.0, reducers were always aligned,\n-         *  and this data member did not exist.)\n+         *  (In Intel Cilk Plus library versions 1.0 and 1.01, the default was true.\n+         *  In Intel Cilk Plus library versions prior to 1.0, reducers were always\n+         *  aligned, and this data member did not exist.)\n          */\n-        align_reducer = false \n+        align_reducer = false\n     };\n-    \n-    /** Destroy a view. Destroys (without deallocating) the @a View object\n+\n+    /** Destroys a view. Destroys (without deallocating) the @a View object\n      *  pointed to by @a p.\n      *\n      *  @param p    The address of the @a View object to be destroyed.\n      */\n     void destroy(view_type* p) const { p->~view_type(); }\n \n-    /** Allocate raw memory. Allocate @a s bytes of memory with no\n+    /** Allocates raw memory. Allocate @a s bytes of memory with no\n      *  initialization.\n      *\n      *  @param s    The number of bytes of memory to allocate.\n      *  @return     An untyped pointer to the allocated memory.\n      */\n     void* allocate(size_t s) const { return operator new(s); }\n \n-    /** Deallocate raw memory. Deallocates the memory pointed to by @a p \n+    /** Deallocates raw memory pointed to by @a p\n      *  without doing any destruction.\n      *\n      *  @param p    Pointer to the memory to be deallocated.\n@@ -239,10 +236,10 @@ class monoid_base\n      */\n     void deallocate(void* p) const { operator delete(p); }\n \n-    /** Create the identity value. Constructs (without allocating) a @a View\n+    /** Creates the identity value. Constructs (without allocating) a @a View\n      *  object representing the default value of the @a Value type.\n      *\n-     *  @param p    A pointer to a block of raw memory large enough to hold a \n+     *  @param p    A pointer to a block of raw memory large enough to hold a\n      *              @a View object.\n      *\n      *  @post       The memory pointed to by @a p contains a @a View object that\n@@ -255,128 +252,165 @@ class monoid_base\n      *              this default definition.\n      */\n     void identity(View* p) const { new ((void*) p) View(); }\n-    \n-    \n-    /** @name Construct the monoid and the view with arbitrary arguments.\n+\n+\n+    /** @name Constructs the monoid and the view with arbitrary arguments.\n      *\n      *  A @ref reducer object contains monoid and view data members, which are\n      *  declared as raw storage (byte arrays), so that they are not implicitly\n      *  constructed when the reducer is constructed. Instead, a reducer\n-     *  constructor calls one of the monoid class\u2019s static construct() \n+     *  constructor calls one of the monoid class's static construct()\n      *  functions with the addresses of the monoid and the view, and the\n      *  construct() function uses placement `new` to construct them.\n-     *\n      *  This allows the monoid to determine the order in which the monoid and\n      *  view are constructed, and to make one of them dependent on the other.\n      *\n-     *  Any arguments to the reducer constructor are just passed on as \n+     *  Any arguments to the reducer constructor are just passed on as\n      *  additional arguments to the construct() function (after the monoid\n-     *  and view addresses).\n+     *  and view addresses are set).\n      *\n-     *  Any monoid whose needs are satisfied by the suite of construct() \n+     *  A monoid whose needs are satisfied by the suite of construct()\n      *  functions below, such as @ref monoid_with_view, can just inherit them\n      *  from monoid_base. Other monoids will need to provide their own versions\n      *  to override the monoid_base functions.\n      */\n     //@{\n-    \n-    /** Default-construct the monoid, and pass zero to five const reference\n-     *  arguments to the view constructor.\n+\n+    /** Default-constructs the monoid, identity-constructs the view.\n+     *\n+     *  @param monoid   Address of uninitialized monoid object.\n+     *  @param view     Address of uninitialized initial view object.\n      */\n     //@{\n-    \n     template <typename Monoid>\n     static void construct(Monoid* monoid, View* view)\n-        { provisional( new ((void*)monoid) Monoid() ).confirm_if( \n-            (monoid->identity(view), view) ); }\n+    {\n+        provisional_guard<Monoid> guard( new((void*) monoid) Monoid() );\n+        monoid->identity(view);\n+        guard.confirm();\n+    }\n+    //@}\n+\n+    /** Default-constructs the monoid, and passes one to five const reference\n+     *  arguments to the view constructor.\n+     */\n+    //@{\n \n     template <typename Monoid, typename T1>\n     static void construct(Monoid* monoid, View* view, const T1& x1)\n-        { provisional( new ((void*)monoid) Monoid() ).confirm_if( \n-            new ((void*)view) View(x1) ); }\n+    {\n+        provisional_guard<Monoid> guard( new((void*) monoid) Monoid() );\n+        guard.confirm_if( new((void*) view) View(x1) );\n+    }\n \n     template <typename Monoid, typename T1, typename T2>\n-    static void construct(Monoid* monoid, View* view, \n+    static void construct(Monoid* monoid, View* view,\n                             const T1& x1, const T2& x2)\n-        { provisional( new ((void*)monoid) Monoid() ).confirm_if( \n-            new ((void*)view) View(x1, x2) ); }\n+    {\n+        provisional_guard<Monoid> guard( new((void*) monoid) Monoid() );\n+        guard.confirm_if( new((void*) view) View(x1, x2) );\n+    }\n \n     template <typename Monoid, typename T1, typename T2, typename T3>\n-    static void construct(Monoid* monoid, View* view, \n+    static void construct(Monoid* monoid, View* view,\n                             const T1& x1, const T2& x2, const T3& x3)\n-        { provisional( new ((void*)monoid) Monoid() ).confirm_if( \n-            new ((void*)view) View(x1, x2, x3) ); }\n+    {\n+        provisional_guard<Monoid> guard( new((void*) monoid) Monoid() );\n+        guard.confirm_if( new((void*) view) View(x1, x2, x3) );\n+    }\n \n-    template <typename Monoid, typename T1, typename T2, typename T3, \n+    template <typename Monoid, typename T1, typename T2, typename T3,\n                 typename T4>\n-    static void construct(Monoid* monoid, View* view, \n-                            const T1& x1, const T2& x2, const T3& x3, \n+    static void construct(Monoid* monoid, View* view,\n+                            const T1& x1, const T2& x2, const T3& x3,\n                             const T4& x4)\n-        { provisional( new ((void*)monoid) Monoid() ).confirm_if( \n-            new ((void*)view) View(x1, x2, x3, x4) ); }\n+    {\n+        provisional_guard<Monoid> guard( new((void*) monoid) Monoid() );\n+        guard.confirm_if( new((void*) view) View(x1, x2, x3, x4) );\n+    }\n \n-    template <typename Monoid, typename T1, typename T2, typename T3, \n+    template <typename Monoid, typename T1, typename T2, typename T3,\n                 typename T4, typename T5>\n-    static void construct(Monoid* monoid, View* view, \n-                            const T1& x1, const T2& x2, const T3& x3, \n+    static void construct(Monoid* monoid, View* view,\n+                            const T1& x1, const T2& x2, const T3& x3,\n                             const T4& x4, const T5& x5)\n-        { provisional( new ((void*)monoid) Monoid() ).confirm_if( \n-            new ((void*)view) View(x1, x2, x3, x4, x5) ); }\n-        \n+    {\n+        provisional_guard<Monoid> guard( new((void*) monoid) Monoid() );\n+        guard.confirm_if( new((void*) view) View(x1, x2, x3, x4, x5) );\n+    }\n+\n     //@}\n-    \n-    /** Default-construct the monoid, and pass one non-const reference argument\n-     *  to the view constructor.\n+\n+    /** Default-constructs the monoid, and passes one non-const reference\n+     *  argument to the view constructor.\n      */\n     //@{\n     template <typename Monoid, typename T1>\n     static void construct(Monoid* monoid, View* view, T1& x1)\n-        { provisional( new ((void*)monoid) Monoid() ).confirm_if( \n-            new ((void*)view) View(x1) ); }\n+    {\n+        provisional_guard<Monoid> guard( new((void*) monoid) Monoid() );\n+        guard.confirm_if( new((void*) view) View(x1) );\n+    }\n     //@}\n \n-    /** Copy-construct the monoid, and pass zero to four const reference\n-     *  arguments to the view constructor.\n+    /** Copy-constructs the monoid, and identity-constructs the view\n+     *  constructor.\n+     *\n+     *  @param monoid   Address of uninitialized monoid object.\n+     *  @param view     Address of uninitialized initial view object.\n+     *  @param m        Object to be copied into `*monoid`\n      */\n     //@{\n-\n     template <typename Monoid>\n     static void construct(Monoid* monoid, View* view, const Monoid& m)\n-        { provisional( new ((void*)monoid) Monoid(m) ).confirm_if( \n-            new ((void*)view) View() ); }\n+    {\n+        provisional_guard<Monoid> guard( new((void*) monoid) Monoid(m) );\n+        monoid->identity(view);\n+        guard.confirm();\n+    }\n+    //@}\n+\n+    /** Copy-constructs the monoid, and passes one to four const reference\n+     *  arguments to the view constructor.\n+     */\n+    //@{\n \n     template <typename Monoid, typename T1>\n-    static void construct(Monoid* monoid, View* view, const Monoid& m, \n+    static void construct(Monoid* monoid, View* view, const Monoid& m,\n                             const T1& x1)\n-        { provisional( new ((void*)monoid) Monoid(m) ).confirm_if( \n-            new ((void*)view) View(x1) ); }\n-        \n+    {\n+        provisional_guard<Monoid> guard( new((void*) monoid) Monoid(m) );\n+        guard.confirm_if( new((void*) view) View(x1) );\n+    }\n+\n     template <typename Monoid, typename T1, typename T2>\n-    static void construct(Monoid* monoid, View* view, const Monoid& m, \n+    static void construct(Monoid* monoid, View* view, const Monoid& m,\n                             const T1& x1, const T2& x2)\n-    { provisional( new ((void*)monoid) Monoid(m) ).confirm_if( \n-        new ((void*)view) View(x1, x2) ); }\n-        \n+    {\n+        provisional_guard<Monoid> guard( new((void*) monoid) Monoid(m) );\n+        guard.confirm_if( new((void*) view) View(x1, x2) );\n+    }\n+\n     template <typename Monoid, typename T1, typename T2, typename T3>\n-    static void construct(Monoid* monoid, View* view, const Monoid& m, \n+    static void construct(Monoid* monoid, View* view, const Monoid& m,\n                             const T1& x1, const T2& x2, const T3& x3)\n     {\n-        provisional( new ((void*)monoid) Monoid(m) ).confirm_if(\n-            new ((void*)view) View(x1, x2, x3) );\n+        provisional_guard<Monoid> guard( new((void*) monoid) Monoid(m) );\n+        guard.confirm_if( new((void*) view) View(x1, x2, x3) );\n     }\n-        \n-    template <typename Monoid, typename T1, typename T2, typename T3, \n+\n+    template <typename Monoid, typename T1, typename T2, typename T3,\n                 typename T4>\n-    static void construct(Monoid* monoid, View* view, const Monoid& m, \n-                            const T1& x1, const T2& x2, const T3& x3, \n+    static void construct(Monoid* monoid, View* view, const Monoid& m,\n+                            const T1& x1, const T2& x2, const T3& x3,\n                             const T4& x4)\n     {\n-        provisional( new ((void*)monoid) Monoid(m) ).confirm_if(\n-            new ((void*)view) View(x1, x2, x3, x4) );\n+        provisional_guard<Monoid> guard( new((void*) monoid) Monoid(m) );\n+        guard.confirm_if( new((void*) view) View(x1, x2, x3, x4) );\n     }\n-        \n+\n     //@}\n-    \n+\n     //@}\n };\n \n@@ -385,8 +419,8 @@ class monoid_base\n  *  from its view.\n  *\n  *  A simple implementation of the monoid-view-reducer architecture would\n- *  distribute knowledge about the type and operations for the reduction \n- *  between the monoid and the view \u2014 the identity and reduction operations are\n+ *  distribute knowledge about the type and operations for the reduction\n+ *  between the monoid and the view - the identity and reduction operations are\n  *  specified in the monoid, the reduction operations are implemented in the\n  *  view, and the value type is specified in both the monoid and the view.\n  *  This is inelegant.\n@@ -396,10 +430,11 @@ class monoid_base\n  *  customization of the monoid_with_view class itself is needed beyond\n  *  instantiating it with an appropriate view class. (Customized subclasses of\n  *  monoid_with_view may be needed for other reasons, such as to keep some\n- *   state for the reducer.) All of the Cilk predefined reducers use\n+ *   state for the reducer.) All of the Intel Cilk Plus predefined reducers use\n  *  monoid_with_view or one of its subclasses.\n- *  \n- *  The view class `View` of a monoid_with_view must provide the following public definitions:\n+ *\n+ *  The view class `View` of a monoid_with_view must provide the following\n+ *  public definitions:\n  *\n  *  Definition                       | Meaning\n  *  ---------------------------------|--------\n@@ -420,20 +455,20 @@ class monoid_with_view : public monoid_base<typename View::value_type, View>\n     /** Should reducers created with this monoid be aligned?\n      */\n     enum { align_reducer = Align };\n-    \n+\n     /** Create the identity value.\n      *\n-     *  Implements the monoid `identity` operation by using the @a View class\u2019s\n+     *  Implements the monoid `identity` operation by using the @a View class's\n      *  default constructor.\n      *\n-     *  @param  p   A pointer to a block of raw memory large enough to hold a \n+     *  @param  p   A pointer to a block of raw memory large enough to hold a\n      *              @p View object.\n      */\n-    void identity(View* p) const { new ((void*)p) View(); }\n-    \n+    void identity(View* p) const { new((void*) p) View(); }\n+\n     /** Reduce the values of two views.\n      *\n-     *  Implements the monoid `reduce` operation by calling the left view\u2019s\n+     *  Implements the monoid `reduce` operation by calling the left view's\n      *  `%reduce()` function with the right view as an operand.\n      *\n      *  @param  left    The left operand of the reduce operation.\n@@ -452,7 +487,7 @@ class monoid_with_view : public monoid_base<typename View::value_type, View>\n  *  required by a @ref monoid_with_view (but not the identity constructor and\n  *  reduce operation, which are inherently specific to a particular kind of\n  *  reduction). It also defines the value access functions which will be called\n- *  by the corresponding @ref reducer functions. (It uses copy semantics for \n+ *  by the corresponding @ref reducer functions. (It uses copy semantics for\n  *  the view_move_in() and view_move_out() functions, which is appropriate\n  *  for simple scalar types, but not necessarily for more complex types like\n  *  STL containers.\n@@ -469,15 +504,15 @@ class scalar_view\n     /** Value type definition required by @ref monoid_with_view.\n      */\n     typedef Type value_type;\n-    \n+\n     /** Default constructor.\n      */\n-    scalar_view() : m_value() {}    \n-    \n+    scalar_view() : m_value() {}\n+\n     /** Value constructor.\n      */\n     scalar_view(const Type& v) : m_value(v) {}\n-    \n+\n     /** @name Value functions required by the reducer class.\n      *\n      *  Note that the move in/out functions use simple assignment semantics.\n@@ -499,12 +534,16 @@ class scalar_view\n     /** Get the value of the view.\n      */\n     Type const& view_get_value() const { return m_value; }\n-    \n+\n+    /** Type returned by view_get_value.\n+     */\n+    typedef Type const& return_type_for_get_value;\n+\n     /** Get a reference to the value contained in the view. For legacy\n      *  reducer support only.\n      */\n     Type      & view_get_reference()       { return m_value; }\n-    \n+\n     /** Get a reference to the value contained in the view. For legacy\n      *  reducer support only.\n      */\n@@ -517,18 +556,18 @@ class scalar_view\n  *\n  *  Some types allow their values to be _moved_ as an alternative to copying.\n  *  Moving a value may be much faster than copying it, but may leave the value\n- *  of the move\u2019s source undefined. Consider the `swap` operation provided by\n+ *  of the move's source undefined. Consider the `swap` operation provided by\n  *  many STL container classes:\n  *\n  *      list<T> x, y;\n  *      x = y;      // Copy\n  *      x.swap(y);  // Move\n  *\n- *  The assignment _copies_ the value of `y` into `x` in time linear in the \n+ *  The assignment _copies_ the value of `y` into `x` in time linear in the\n  *  size of `y`, leaving `y` unchanged. The `swap` _moves_ the  value of `y`\n  *  into `x` in constant time, but it also moves the value of `x` into `y`,\n  *  potentially leaving `y` undefined.\n- *  \n+ *\n  *  A move_in_wrapper simply wraps a pointer to an object. It is created by a\n  *  call to cilk::move_in(). Passing a move_in_wrapper to a view constructor\n  *  (actually, passing it to a reducer constructor, which passes it to the\n@@ -538,18 +577,18 @@ class scalar_view\n  *\n  *  A view class exercises this option by defining a _move-in constructor_,\n  *  i.e., a constructor with a move_in_wrapper parameter. The constructor calls\n- *  the wrapper\u2019s `value()` function to get a reference to its pointed-to \n+ *  the wrapper's `value()` function to get a reference to its pointed-to\n  *  value, and can then use that reference in a move operation.\n  *\n  *  A move_in_wrapper also has an implicit conversion to its pointed-to value,\n- *  so if a view class does not define a move-in constructor, its ordinary \n+ *  so if a view class does not define a move-in constructor, its ordinary\n  *  value constructor will be called with the wrapped value. For example, an\n  *  @ref ReducersAdd \"op_add\" view does not have a move-in constructor, so\n  *\n  *      int x;\n  *      reducer< op_add<int> > xr(move_in(x));\n  *\n- *  will simply call the `op_add_view(const int &)` constructor. But an \n+ *  will simply call the `op_add_view(const int &)` constructor. But an\n  *  @ref ReducersList \"op_list_append\" view does have a move-in  constructor,\n  *  so\n  *\n@@ -573,19 +612,19 @@ class move_in_wrapper\n {\n     Type *m_pointer;\n public:\n-    \n+\n     /** Constructor that captures the address of its argument. This is almost\n      *  always called from the @ref move_in function.\n      */\n     explicit move_in_wrapper(Type& ref) : m_pointer(&ref) { }\n-    \n+\n     /** Implicit conversion to the wrapped value. This allows a move_in_wrapper\n      *  to be used where a value of the wrapped type is expected, in which case\n      *  the wrapper is completely transparent.\n      */\n     operator Type&() const { return *m_pointer; }\n-    \n-    /** Get a reference to the pointed-to value. This has the same effect as \n+\n+    /** Get a reference to the pointed-to value. This has the same effect as\n      *  the implicit conversion, but makes the intent clearer in a move-in\n      *  constructor.\n      */\n@@ -594,7 +633,7 @@ class move_in_wrapper\n \n /** Function to create a move_in_wrapper for a value.\n  *\n- *  @tparam Type    The type of the argument, which will be the `type` of the \n+ *  @tparam Type    The type of the argument, which will be the `type` of the\n  *                  created wrapper.\n  *\n  *  @see move_in_wrapper\n@@ -608,9 +647,9 @@ move_in_wrapper<Type> move_in(Type& ref)\n /** @copydoc move_in(Type&)\n  *\n  *  @note   Applying a function that is explicitly specified as modifying its\n- *          argument to a const argument is obviously an irrational thing to \n+ *          argument to a const argument is obviously an irrational thing to\n  *          do. This move_in() variant is just provided to allow calling a\n- *          move-in constructor with a function return value, which the \n+ *          move-in constructor with a function return value, which the\n  *          language treats as a const. Using it for any other purpose will\n  *          probably end in tears.\n  */\n@@ -622,37 +661,37 @@ move_in_wrapper<Type> move_in(const Type& ref)\n \n /** Wrapper class to allow implicit downcasts to reducer subclasses.\n  *\n- *  The Cilk library contains a collection of reducer wrapper classes which \n- *  were created before the `cilk::reducer<Monoid>` style was developed. For \n+ *  The Intel Cilk Plus library contains a collection of reducer wrapper classes which\n+ *  were created before the `cilk::reducer<Monoid>` style was developed. For\n  *  example, `cilk::reducer_opadd<Type>` provided essentially the same\n- *  functionality that is now provided by \n- *  `cilk::reducer< cilk::op_add<Type> >`. These legacy reducer classes are \n- *  deprecated, but still supported, and they have been reimplemented as \n+ *  functionality that is now provided by\n+ *  `cilk::reducer< cilk::op_add<Type> >`. These legacy reducer classes are\n+ *  deprecated, but still supported, and they have been reimplemented as\n  *  subclasses of the corresponding `cilk::reducer` classes. For example:\n  *\n  *      template <class T>\n  *      reducer_opadd<T> : public reducer< op_add<T> > { ... };\n  *\n- *  This reimplementation allows transparent conversion between legacy and \n- *  new reducers. That is, a `reducer<op_add>*` or `reducer<op_add>&` can be \n- *  used anywhere that a `reducer_opadd*` or `reducer_opadd&` is expected, \n- *  and vice versa. \n+ *  This reimplementation allows transparent conversion between legacy and\n+ *  new reducers. That is, a `reducer<op_add>*` or `reducer<op_add>&` can be\n+ *  used anywhere that a `reducer_opadd*` or `reducer_opadd&` is expected,\n+ *  and vice versa.\n  *\n- *  The conversion from the legacy reducer to the new reducer is just an \n- *  up-cast, which is provided for free by C++. The conversion from the new \n- *  reducer to the legacy reducer is a down-cast, though, which requires an \n+ *  The conversion from the legacy reducer to the new reducer is just an\n+ *  up-cast, which is provided for free by C++. The conversion from the new\n+ *  reducer to the legacy reducer is a down-cast, though, which requires an\n  *  explicit conversion member function in the `reducer` class. The challenge\n  *  is to define a function in the reducer template class which will convert\n- *  each cilk::reducer specialization to the corresponding legacy reducer, \n+ *  each cilk::reducer specialization to the corresponding legacy reducer,\n  *  if there is one.\n  *\n  *  The trick is in the legacy_reducer_downcast template class, which provides\n  *  a mapping from  `cilk::reducer` specializations to legacy reducer classes.\n- *  `reducer<Monoid>` has a conversion function to convert itself to \n+ *  `reducer<Monoid>` has a conversion function to convert itself to\n  *  `legacy_reducer_downcast< reducer<Monoid> >::%type`. By default,\n  *  `legacy_reducer_downcast<Reducer>::%type` is just a trivial subclass of\n  *  `Reducer`, which is uninteresting, but a reducer with a legacy counterpart\n- *  will have a specialization of `legacy_reducer_downcast` whose `type` is \n+ *  will have a specialization of `legacy_reducer_downcast` whose `type` is\n  *  the corresponding legacy reducer. For example:\n  *\n  *      template <typename Type>\n@@ -662,16 +701,17 @@ move_in_wrapper<Type> move_in(const Type& ref)\n  *      };\n  *\n  *\n- *  @tparam Reducer The new-style reducer class whose corresponding legacy reducer class\n- *                  is `type`, if there is such a legacy reducer class.\n+ *  @tparam Reducer The new-style reducer class whose corresponding legacy\n+ *                  reducer class is `type`, if there is such a legacy reducer\n+ *                  class.\n  */\n template <typename Reducer>\n struct legacy_reducer_downcast\n {\n     /** The related legacy reducer class.\n      *\n-     *  By default, this is just a trivial subclass of Reducer, but it can be \n-     *  overridden in the specialization of legacy_reducer_downcast for \n+     *  By default, this is just a trivial subclass of Reducer, but it can be\n+     *  overridden in the specialization of legacy_reducer_downcast for\n      *  a reducer that has a corresponding legacy reducers.\n      */\n     struct type : Reducer { };\n@@ -684,51 +724,83 @@ namespace internal {\n template <typename Value, typename View>\n struct reducer_set_get\n {\n-    static View theView;  // Declared but not defined\n-\n-    // sizeof(notchar) is guaranteed larger than 1\n+    // sizeof(notchar) != sizeof(char)\n     struct notchar { char x[2]; };\n \n-    // check_for_ref returns char if 'get_value' returns by value and notchar\n-    // if 'get_value' returns by reference.\n-    static char    check_for_ref(Value,  ...);\n-    static notchar check_for_ref(Value&, int);\n+    // `does_view_define_return_type_for_get_value(View*)` returns `char` if\n+    // `View` defines `return_type_for_get_value`, and `notchar` if it doesn't.\n+\n+    template <typename T>\n+    struct using_type {};\n+\n+    template <typename T>\n+    static char does_view_define_return_type_for_get_value(\n+                        using_type<typename T::return_type_for_get_value>*);\n \n-    enum { GET_VALUE_BY_VALUE =\n-           (1 == sizeof(check_for_ref(theView.view_get_value(), 0))) } ;\n+    template <typename T>\n+    static notchar does_view_define_return_type_for_get_value(...);\n \n-    typedef typename condition<GET_VALUE_BY_VALUE,\n-                               Value, const Value&>::type get_value_type;\n+    // `VIEW_DOES_DEFINE_RETURN_TYPE_FOR_GET_VALUE` is true if `View` defines\n+    // `return_type_for_get_value`.\n+\n+    enum { VIEW_DOES_DEFINE_RETURN_TYPE_FOR_GET_VALUE =\n+            sizeof( does_view_define_return_type_for_get_value<View>(0) )\n+            == sizeof(char) } ;\n+\n+    // `return_type_for_get_value` is `View::return_type_for_get_value`\n+    // if it is defined, and just `Value` otherwise.\n+\n+    template <typename InnerView, bool ViewDoesDefineReturnTypeForGetValue>\n+    struct return_type_for_view_get_value {\n+        typedef Value type;\n+    };\n+\n+    template <typename InnerView>\n+    struct return_type_for_view_get_value<InnerView, true> {\n+        typedef typename InnerView::return_type_for_get_value type;\n+    };\n+\n+public:\n+\n+    typedef\n+        typename\n+            return_type_for_view_get_value<\n+                View,\n+                VIEW_DOES_DEFINE_RETURN_TYPE_FOR_GET_VALUE\n+            >::type\n+        return_type_for_get_value;\n \n     static void move_in(View& view, Value& v)   { view.view_move_in(v); }\n     static void move_out(View& view,  Value& v) { view.view_move_out(v); }\n \n     static void set_value(View& view, const Value& v)\n         { view.view_set_value(v); }\n \n-    static get_value_type get_value(const View& view)\n+    static return_type_for_get_value get_value(const View& view)\n         { return view.view_get_value(); }\n };\n \n template <typename Value>\n struct reducer_set_get<Value, Value>\n {\n-    typedef const Value& get_value_type;\n+    typedef const Value& return_type_for_get_value;\n \n     static void move_in(Value& view, Value& v)   { view = v; }\n     static void move_out(Value& view,  Value& v) { v = view; }\n \n-    static void set_value(Value& view, const Value& v) { view = v; }\n+    static void set_value(Value& view, const Value& v)\n+        { view = v; }\n \n-    static get_value_type get_value(const Value& view) { return view; }\n+    static return_type_for_get_value get_value(const Value& view)\n+        { return view; }\n };\n \n /// @endcond\n \n \n /** Base class defining the data layout that is common to all reducers.\n  */\n-template <typename Monoid> \n+template <typename Monoid>\n class reducer_base {\n     typedef typename Monoid::view_type view_type;\n \n@@ -746,20 +818,20 @@ class reducer_base {\n     // Used for sanity checking at destruction.\n     //\n     void*                           m_initialThis;\n-    \n+\n     // The leftmost view comes next. It is defined in the derived\n     // reducer_content class.\n-    \n+\n     /** @name C-callable wrappers for the C++-coded monoid dispatch functions.\n      */\n     //@{\n-    \n+\n     static void reduce_wrapper(void* r, void* lhs, void* rhs);\n     static void identity_wrapper(void* r, void* view);\n     static void destroy_wrapper(void* r, void* view);\n     static void* allocate_wrapper(void* r, __STDNS size_t bytes);\n     static void deallocate_wrapper(void* r, void* view);\n-    \n+\n     //@}\n \n protected:\n@@ -768,7 +840,7 @@ class reducer_base {\n      *\n      *  @param  leftmost    The address of the leftmost view in the reducer.\n      */\n-    reducer_base(char* leftmost) \n+    reducer_base(char* leftmost)\n     {\n         static const cilk_c_monoid c_monoid_initializer = {\n             (cilk_c_reducer_reduce_fn_t)     &reduce_wrapper,\n@@ -783,18 +855,18 @@ class reducer_base {\n         m_base.__view_offset = (char*)leftmost - (char*)this;\n         m_base.__view_size = sizeof(view_type);\n         m_initialThis = this;\n-        \n+\n         __cilkrts_hyper_create(&m_base);\n     }\n-    \n+\n     /** Destructor.\n      */\n     __CILKRTS_STRAND_STALE(~reducer_base())\n     {\n         // Make sure we haven't been memcopy'd or corrupted\n         __CILKRTS_ASSERT(\n             this == m_initialThis ||\n-            // Allow for a layout bug that may put the initialThis field one \n+            // Allow for a layout bug that may put the initialThis field one\n             // word later in 1.0 reducers than in 0.9  and 1.1 reducers.\n             this == *(&m_initialThis + 1)\n         );\n@@ -803,63 +875,63 @@ class reducer_base {\n \n     /** Monoid data member.\n      *\n-     *  @return A pointer to the reducer\u2019s monoid data member.\n+     *  @return A pointer to the reducer's monoid data member.\n      */\n     Monoid* monoid_ptr() { return &m_monoid.object(); }\n \n     /** Leftmost view data member.\n      *\n-     *  @return A pointer to the reducer\u2019s leftmost view data member.\n+     *  @return A pointer to the reducer's leftmost view data member.\n      *\n-     *  @note   This function returns the address of the *leftmost* view, \n-     *          which is unique for the lifetime of the reducer. It is \n-     *          intended to be used in constructors and destructors. \n-     *          Use the reducer::view() function to access the per-strand \n+     *  @note   This function returns the address of the *leftmost* view,\n+     *          which is unique for the lifetime of the reducer. It is\n+     *          intended to be used in constructors and destructors.\n+     *          Use the reducer::view() function to access the per-strand\n      *          view instance.\n      */\n-    view_type* leftmost_ptr() \n+    view_type* leftmost_ptr()\n     {\n         char* view_addr = (char*)this + m_base.__view_offset;\n         return reinterpret_cast<view_type*>(view_addr);\n     }\n-    \n+\n public:\n \n     /** @name Access the current view.\n      *\n-     *  These functions return a reference to the instance of the reducer\u2019s \n+     *  These functions return a reference to the instance of the reducer's\n      *  view that was created for the current strand of a parallel computation\n-     *  (and create it if it doesn\u2019t already exist). Note the difference from\n+     *  (and create it if it doesn't already exist). Note the difference from\n      *  the (private) leftmost_ptr() function, which returns a pointer to the\n      *  _leftmost_ view, which is the same in all strands.\n      */\n     //@{\n-    \n+\n     /** Per-strand view instance.\n      *\n      *  @return A reference to the per-strand view instance.\n      */\n-    view_type& view() \n+    view_type& view()\n     {\n-        return *static_cast<view_type *>(__cilkrts_hyper_lookup(&m_base)); \n+        return *static_cast<view_type *>(__cilkrts_hyper_lookup(&m_base));\n     }\n-    \n+\n     /** @copydoc view()\n      */\n-    const view_type& view() const \n-    { \n-        return const_cast<reducer_base*>(this)->view(); \n+    const view_type& view() const\n+    {\n+        return const_cast<reducer_base*>(this)->view();\n     }\n-    \n+\n     //@}\n-    \n+\n     /** Initial view pointer field.\n      *\n      *  @internal\n      *\n      *  @return a reference to the m_initialThis field.\n      *\n-     *  @note   This function is provided for \u201cwhite-box\u201d testing of the\n+     *  @note   This function is provided for \"white-box\" testing of the\n      *          reducer layout code. There is never any reason for user code\n      *          to call it.\n      */\n@@ -905,7 +977,7 @@ void reducer_base<Monoid>::deallocate_wrapper(void* r, void* view)\n \n /** Base class defining the data members of a reducer.\n  *\n- *  @tparam Aligned The `m_view` data member, and therefore the entire \n+ *  @tparam Aligned The `m_view` data member, and therefore the entire\n  *                  structure, are cache-line aligned if this parameter\n  *                  is `true'.\n  */\n@@ -918,12 +990,12 @@ template <typename Monoid>\n class reducer_content<Monoid, true> : public reducer_base<Monoid>\n {\n     typedef typename Monoid::view_type view_type;\n-    \n+\n     // The leftmost view is defined as raw bytes. It will be constructed\n-    // by the monoid `construct` function. It is cache-aligned, which \n+    // by the monoid `construct` function. It is cache-aligned, which\n     // will push it into a new cache line. Furthermore, its alignment causes\n-    // the reducer as a whole to be cache-aligned, which makes the reducer \n-    // size a multiple of a cache line. Since there is nothing in the reducer \n+    // the reducer as a whole to be cache-aligned, which makes the reducer\n+    // size a multiple of a cache line. Since there is nothing in the reducer\n     // after the view, all this means that the leftmost view gets one or more\n     // cache lines all to itself, which prevents false sharing.\n     //\n@@ -936,7 +1008,7 @@ class reducer_content<Monoid, true> : public reducer_base<Monoid>\n      */\n     bool reducer_is_cache_aligned() const\n         { return 0 == ((std::size_t) this & (__CILKRTS_CACHE_LINE__ - 1)); }\n-        \n+\n protected:\n \n     /** Constructor.\n@@ -945,14 +1017,15 @@ class reducer_content<Monoid, true> : public reducer_base<Monoid>\n     {\n #ifndef CILK_IGNORE_REDUCER_ALIGNMENT\n     assert(reducer_is_cache_aligned() &&\n-           \"Reducer should be cache aligned. Please see comments following this assertion for explanation and fixes.\");\n+           \"Reducer should be cache aligned. Please see comments following \"\n+           \"this assertion for explanation and fixes.\");\n #endif\n     /*  \"REDUCER SHOULD BE CACHE ALIGNED\" ASSERTION.\n      *\n-     *  This Reducer class instantiation specifies cache-line alignment of the \n+     *  This Reducer class instantiation specifies cache-line alignment of the\n      *  leftmost view field (and, implicitly, of the reducer itself). You got\n      *  this assertion because a reducer with this class was allocated at a\n-     *  non-cache-aligned address, probably because it was allocated on the \n+     *  non-cache-aligned address, probably because it was allocated on the\n      *  heap with `new`. This can be a problem for two reasons:\n      *\n      *  1.  If the leftmost view is not on a cache line by itself, there might\n@@ -974,14 +1047,14 @@ class reducer_content<Monoid, true> : public reducer_base<Monoid>\n      *\n      *  There are three ways that you can fix this assertion failure.\n      *\n-     *  A.  Rewrite your code to use the new-style `reducer< op_XXX<Type> >` \n+     *  A.  Rewrite your code to use the new-style `reducer< op_XXX<Type> >`\n      *      instead of the legacy `reducer_XXX<type>`. The new-style reducers\n      *      are not declared to be cache-aligned, and will work properly if\n      *      they are not cache-aligned.\n      *\n      *  B.  If you must allocate an old-style reducer or a structure containing\n      *      a reducer on the heap, figure out how to align it correctly. The\n-     *      suggested fix is to use `cilk::aligned_new()` and \n+     *      suggested fix is to use `cilk::aligned_new()` and\n      *      `cilk::aligned_delete()` instead of `new` and `delete`, as follows:\n      *\n      *          Type* ptr = cilk::aligned_new<Type>(constructor-arguments);\n@@ -1003,7 +1076,7 @@ class reducer_content<Monoid, false> : public reducer_base<Monoid>\n \n     // Reserve space for the leftmost view. The view will be allocated at an\n     // aligned offset in this space at runtime, to guarantee that the view\n-    // will get one or more cache lines all to itself, to prevent false \n+    // will get one or more cache lines all to itself, to prevent false\n     // sharing.\n     //\n     // The number of bytes to reserve is determined as follows:\n@@ -1026,10 +1099,10 @@ class reducer_content<Monoid, false> : public reducer_base<Monoid>\n protected:\n \n     /** Constructor. Find the first cache-aligned position in the reserved\n-     *  area, and pass it to the base constructor as the leftmost view \n+     *  area, and pass it to the base constructor as the leftmost view\n      *  address.\n      */\n-    reducer_content() : \n+    reducer_content() :\n         reducer_base<Monoid>(\n             (char*)( ((std::size_t)&m_leftmost + __CILKRTS_CACHE_LINE__ - 1)\n                      & ~ (__CILKRTS_CACHE_LINE__ - 1) ) )\n@@ -1056,8 +1129,9 @@ namespace stub {\n  *  A reducer is instantiated on a Monoid.  The Monoid provides the value\n  *  type, associative reduce function, and identity for the reducer.\n  *\n- *  @tparam Monoid  The monoid class that the reducer is instantiated on. It must model\n- *                  the @ref reducers_monoid_concept \"monoid concept\".\n+ *  @tparam Monoid  The monoid class that the reducer is instantiated on. It\n+ *                  must model the @ref reducers_monoid_concept \"monoid\n+ *                  concept\".\n  *\n  *  @see @ref pagereducers\n  */\n@@ -1068,33 +1142,33 @@ class reducer : public internal::reducer_content<Monoid>\n     using base::monoid_ptr;\n     using base::leftmost_ptr;\n   public:\n-    typedef Monoid                          monoid_type;    ///< The monoid type.\n-    typedef typename Monoid::value_type     value_type;     ///< The value type.\n-    typedef typename Monoid::view_type      view_type;      ///< The view type.\n+    typedef Monoid                          monoid_type;  ///< The monoid type.\n+    typedef typename Monoid::value_type     value_type;   ///< The value type.\n+    typedef typename Monoid::view_type      view_type;    ///< The view type.\n \n   private:\n     typedef internal::reducer_set_get<value_type, view_type> set_get;\n-    \n+\n     reducer(const reducer&);                ///< Disallow copying.\n     reducer& operator=(const reducer&);     ///< Disallow assignment.\n \n   public:\n-  \n+\n     /** @name Constructors\n      *\n-     *  All reducer constructors call the static `construct()` function of the monoid class to\n-     *  construct the reducer's monoid and leftmost view. \n+     *  All reducer constructors call the static `construct()` function of the\n+     *  monoid class to construct the reducer's monoid and leftmost view.\n      *\n-     *  The reducer constructor arguments are simply passed through to the construct() function.\n-     *  Thus, the constructor parameters accepted by a particular reducer class are determined\n-     *  by its monoid class.\n+     *  The reducer constructor arguments are simply passed through to the\n+     *  construct() function.  Thus, the constructor parameters accepted by a\n+     *  particular reducer class are determined by its monoid class.\n      */\n     //@{\n \n     /** 0 \u2013 6 const reference parameters.\n      */\n     //@{\n-    \n+\n     reducer()\n     {\n         monoid_type::construct(monoid_ptr(), leftmost_ptr());\n@@ -1125,19 +1199,24 @@ class reducer : public internal::reducer_content<Monoid>\n     }\n \n     template <typename T1, typename T2, typename T3, typename T4, typename T5>\n-    reducer(const T1& x1, const T2& x2, const T3& x3, const T4& x4, const T5& x5)\n+    reducer(const T1& x1, const T2& x2, const T3& x3, const T4& x4,\n+            const T5& x5)\n     {\n-        monoid_type::construct(monoid_ptr(), leftmost_ptr(), x1, x2, x3, x4, x5);\n+        monoid_type::construct(monoid_ptr(), leftmost_ptr(),\n+                               x1, x2, x3, x4, x5);\n     }\n \n-    template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6>\n-    reducer(const T1& x1, const T2& x2, const T3& x3, const T4& x4, const T5& x5, const T6& x6)\n+    template <typename T1, typename T2, typename T3, typename T4,\n+              typename T5, typename T6>\n+    reducer(const T1& x1, const T2& x2, const T3& x3, const T4& x4,\n+            const T5& x5, const T6& x6)\n     {\n-        monoid_type::construct(monoid_ptr(), leftmost_ptr(), x1, x2, x3, x4, x5, x6);\n+        monoid_type::construct(monoid_ptr(), leftmost_ptr(),\n+                               x1, x2, x3, x4, x5, x6);\n     }\n-    \n+\n     //@}\n-    \n+\n     /** 1 non-const reference parameter.\n      */\n     //@{\n@@ -1147,7 +1226,7 @@ class reducer : public internal::reducer_content<Monoid>\n     {\n         monoid_type::construct(monoid_ptr(), leftmost_ptr(), x1);\n     }\n-    \n+\n     //@}\n \n     /** Destructor.\n@@ -1164,37 +1243,37 @@ class reducer : public internal::reducer_content<Monoid>\n      *  @return A reference to the monoid object belonging to this reducer.\n      */\n     Monoid& monoid() { return *monoid_ptr(); }\n-    \n-    const Monoid& monoid() const \n+\n+    const Monoid& monoid() const\n     { return const_cast<reducer*>(this)->monoid(); }\n     //@}\n \n     //@{\n     /** Access the current view.\n      *\n-     *  Return a reference to the instance of the reducer\u2019s view that was \n+     *  Return a reference to the instance of the reducer's view that was\n      *  created for the current strand of a parallel computation (and create\n-     *  it if it doesn\u2019t already exist).\n+     *  it if it doesn't already exist).\n      */\n           view_type& view()       { return base::view(); }\n     const view_type& view() const { return base::view(); }\n     //@}\n-        \n+\n \n     /** @name Dereference the reducer to get the view.\n      *\n-     *  \u201cDereferencing\u201d a reducer yields the view for the current strand. The\n+     *  \"Dereferencing\" a reducer yields the view for the current strand. The\n      *  view, in turn, acts as a proxy for its contained value, exposing only\n-     *  those operations which are consistent with the reducer\u2019s monoid. Thus,\n-     *  all modifications of the reducer\u2019s accumulator variable are written as\n+     *  those operations which are consistent with the reducer's monoid. Thus,\n+     *  all modifications of the reducer's accumulator variable are written as\n      *\n      *      *reducer OP ...\n      *\n      *  or\n      *\n      *      reducer->func(...)\n      *\n-     *  (The permitted operations on a reducer\u2019s accumulator are listed in the\n+     *  (The permitted operations on a reducer's accumulator are listed in the\n      *  documentation for that particular kind of reducer.)\n      *\n      *  @note   `*r` is a synonym for `r.view()`. Recommended style is to use\n@@ -1204,7 +1283,7 @@ class reducer : public internal::reducer_content<Monoid>\n      *          call attention to the view itself.\n      */\n     //@{\n-    \n+\n     //@{\n     /** Dereference operator.\n      *\n@@ -1222,12 +1301,12 @@ class reducer : public internal::reducer_content<Monoid>\n     view_type*       operator->()       { return &view(); }\n     view_type const* operator->() const { return &view(); }\n     //@}\n-    \n+\n     //@{\n     /** Deprecated view access.\n      *\n-     *  `r()` is a synonym for `*r` which was used with early versions of Cilk\n-     *  reducers. `*r` is now the preferred usage.\n+     *  `r()` is a synonym for `*r` which was used with early versions of\n+     *  Intel Cilk Plus reducers. `*r` is now the preferred usage.\n      *\n      *  @deprecated Use operator*() instead of operator()().\n      *\n@@ -1236,9 +1315,9 @@ class reducer : public internal::reducer_content<Monoid>\n     view_type&       operator()()       { return view(); }\n     view_type const& operator()() const { return view(); }\n     //@}\n-    \n+\n     //@}\n-    \n+\n     /** @name Set and get the value.\n      *\n      *  These functions are used to set an initial value for the reducer before\n@@ -1247,25 +1326,25 @@ class reducer : public internal::reducer_content<Monoid>\n      *\n      *  @note   These functions are completely different from the view\n      *          operations that are made available via operator*() and\n-     *          operator->(), which are used to _modify_ the reducer\u2019s value\n+     *          operator->(), which are used to _modify_ the reducer's value\n      *          _during_ the reduction.\n      *\n-     *  @warning    These functions _can_ be called at any time, and in \n+     *  @warning    These functions _can_ be called at any time, and in\n      *              general, they will refer to the value contained in the view\n      *              for the current strand. However, using them other than to\n-     *              set the reduction\u2019s initial value or get its final value\n+     *              set the reduction's initial value or get its final value\n      *              will almost always result in undefined behavior.\n      */\n     //@{\n \n     /** Move a value into the reducer.\n      *\n-     *  This function is used to set the initial value of the reducer\u2019s\n+     *  This function is used to set the initial value of the reducer's\n      *  accumulator variable by either copying or _moving_ the value of @a obj\n      *  into it. Moving a value can often be performed in constant time, even\n      *  for large container objects, but has the side effect of leaving the\n-     *  value of @a obj undefined. (See the description of the \n-     *  @ref move_in_wrapper class for a discussion of moving values.) \n+     *  value of @a obj undefined. (See the description of the\n+     *  @ref move_in_wrapper class for a discussion of moving values.)\n      *\n      *  @par    Usage\n      *          A move_in() call to initialize a reducer is often paired with a\n@@ -1278,14 +1357,14 @@ class reducer : public internal::reducer_content<Monoid>\n      *\n      *  @par Assumptions\n      *      -   You cannot assume either that this will function will copy its\n-     *          value or that it will move it. \n-     *      -   You must assume that the value of @a obj will be undefined \n-     *          after the call to move_in(). \n+     *          value or that it will move it.\n+     *      -   You must assume that the value of @a obj will be undefined\n+     *          after the call to move_in().\n      *      -   You can assume that move_in() will be at least as efficient as\n      *          set_value(), and you should therefore prefer move_in() unless\n      *          you need the value of @a obj to be unchanged after the call.\n      *          (But you should usually prefer the move-in constructor over a\n-     *          move_in() call \u2014 see the note below.)\n+     *          move_in() call - see the note below.)\n      *\n      *  @note   The behavior of a default constructor followed by move-in\n      *          initialization:\n@@ -1296,14 +1375,14 @@ class reducer : public internal::reducer_content<Monoid>\n      *  @note   is not necessarily the same as a move-in constructor:\n      *\n      *      reducer<Type> xr(move_in(x));\n-     * \n-     *  @note   In particular, when @a Type is a container type with a \n+     *\n+     *  @note   In particular, when @a Type is a container type with a\n      *          non-empty allocator, the move-in constructor will create the\n      *          accumulator variable with the same allocator as the input\n      *          argument @a x, while the default constructor will create the\n      *          accumulator variable with a default allocator. The mismatch of\n-     *          allocators in the latter case means that the input argument \n-     *          @a x may have to be copied in linear time instead of being \n+     *          allocators in the latter case means that the input argument\n+     *          @a x may have to be copied in linear time instead of being\n      *          moved in constant time.\n      *\n      *  @note   Best practice is to prefer the move-in constructor over the\n@@ -1326,13 +1405,13 @@ class reducer : public internal::reducer_content<Monoid>\n \n     /** Move the value out of the reducer.\n      *\n-     *  This function is used to retrieve the final value of the reducer\u2019s\n+     *  This function is used to retrieve the final value of the reducer's\n      *  accumulator variable by either copying or _moving_ the value of @a obj\n      *  into it. Moving a value can often be performed in constant time, even\n      *  for large container objects, but has the side effect of leaving the\n-     *  value of the reducer\u2019s accumulator variable undefined. (See the\n-     *  description of the @ref move_in_wrapper class for a discussion of \n-     *  moving values.) \n+     *  value of the reducer's accumulator variable undefined. (See the\n+     *  description of the @ref move_in_wrapper class for a discussion of\n+     *  moving values.)\n      *\n      *  @par    Usage\n      *          A move_in() call to initialize a reducer is often paired with a\n@@ -1345,15 +1424,15 @@ class reducer : public internal::reducer_content<Monoid>\n      *\n      *  @par Assumptions\n      *      -   You cannot assume either that this will function will copy its\n-     *          value or that it will move it. \n-     *      -   You must assume that the value of the reducer\u2019s accumulator\n+     *          value or that it will move it.\n+     *      -   You must assume that the value of the reducer's accumulator\n      *          variable will be undefined after the call to move_out().\n      *      -   You can assume that move_out() will be at least as efficient as\n      *          get_value(), and you should therefore prefer move_out() unless\n      *          you need the accumulator variable to be preserved after the\n      *          call.\n      *\n-     *  @warning    Calling this function other than to retrieve the final \n+     *  @warning    Calling this function other than to retrieve the final\n      *              value of a reduction will almost always result in undefined\n      *              behavior.\n      *\n@@ -1368,7 +1447,7 @@ class reducer : public internal::reducer_content<Monoid>\n \n     /** Set the value of the reducer.\n      *\n-     *  This function sets the initial value of the reducer\u2019s accumulator\n+     *  This function sets the initial value of the reducer's accumulator\n      *  variable to the value of @a obj.\n      *\n      *  @note   The behavior of a default constructor followed by\n@@ -1380,8 +1459,8 @@ class reducer : public internal::reducer_content<Monoid>\n      *  @note   is not necessarily the same as a value constructor:\n      *\n      *      reducer<Type> xr(x);\n-     * \n-     *  @note   In particular, when @a Type is a container type with a \n+     *\n+     *  @note   In particular, when @a Type is a container type with a\n      *          non-empty allocator, the value constructor will create the\n      *          accumulator variable with the same allocator as the input\n      *          argument @a x, while the default constructor will create the\n@@ -1391,7 +1470,7 @@ class reducer : public internal::reducer_content<Monoid>\n      *              for a reduction will almost always result in undefined\n      *              behavior.\n      *\n-     *  @param  obj The object containing the value that will be copied into \n+     *  @param  obj The object containing the value that will be copied into\n      *              the reducer.\n      *\n      *  @post   The reducer contains a copy of the value in @a obj.\n@@ -1402,20 +1481,20 @@ class reducer : public internal::reducer_content<Monoid>\n \n     /** Get the value of the reducer.\n      *\n-     *  This function gets the final value of the reducer\u2019s accumulator\n+     *  This function gets the final value of the reducer's accumulator\n      *  variable.\n      *\n-     *  @warning    Calling this function other than to retrieve the final \n+     *  @warning    Calling this function other than to retrieve the final\n      *              value of a reduction will almost always result in undefined\n      *              behavior.\n      *\n      *  @return     A reference to the value contained in the reducer.\n      *\n      *  @see move_out()\n      */\n-    typename set_get::get_value_type get_value() const \n+    typename set_get::return_type_for_get_value get_value() const\n         { return set_get::get_value(view()); }\n-    \n+\n     //@}\n \n     /** Implicit downcast to legacy reducer wrapper, if any.\n@@ -1452,137 +1531,148 @@ using stub::reducer;\n /** @page page_reducers_in_c Creating and Using Reducers in C\n  *\n  *  @tableofcontents\n- *  \n- *  The Cilk runtime supports reducers written in C as well as in C++. The basic logic is the\n- *  same, but the implementation details are very different. The C++ reducer implementation uses\n- *  templates heavily to create very generic components. The C reducer implementation uses\n- *  macros, which are a much blunter instrument. The most immediate consequence is that the \n- *  monoid/view/reducer architecture is mostly implicit rather than explicit in C reducers.\n- *  \n+ *\n+ *  The Intel Cilk Plus runtime supports reducers written in C as well as in C++. The\n+ *  basic logic is the same, but the implementation details are very\n+ *  different. The C++ reducer implementation uses templates heavily to create\n+ *  very generic components. The C reducer implementation uses macros, which\n+ *  are a much blunter instrument. The most immediate consequence is that the\n+ *  monoid/view/reducer architecture is mostly implicit rather than explicit\n+ *  in C reducers.\n+ *\n  *  @section reducers_c_overview Overview of Using Reducers in C\n- *  \n+ *\n  *  The basic usage pattern for C reducers is:\n- *  \n+ *\n  *  1.  Create and initialize a reducer object.\n- *  2.  Tell the Cilk runtime about the reducer.\n+ *  2.  Tell the Intel Cilk Plus runtime about the reducer.\n  *  3.  Update the value contained in the reducer in a parallel computation.\n- *  4.  Tell the Cilk runtime that you are done with the reducer.\n+ *  4.  Tell the Intel Cilk Plus runtime that you are done with the reducer.\n  *  5.  Retrieve the value from the reducer.\n- *  \n+ *\n  *  @subsection reducers_c_creation Creating and Initializing a C Reducer\n- *  \n+ *\n  *  The basic pattern for creating and initializing a reducer object in C is\n- *  \n+ *\n  *      CILK_C_DECLARE_REDUCER(value-type) reducer-name =\n  *          CILK_C_INIT_REDUCER(value-type,\n  *                              reduce-function,\n  *                              identity-function,\n  *                              destroy-function,\n  *                              initial-value);\n- *                              \n- *  This is simply an initialized definition of a variable named _reducer-name_. The\n- *  @ref CILK_C_DECLARE_REDUCER macro expands to an anonymous `struct` declaration for a reducer \n- *  object containing a view of type _value-type_, and the @ref CILK_C_INIT_REDUCER macro\n- *  expands to a struct initializer.\n- *  \n+ *\n+ *  This is simply an initialized definition of a variable named\n+ *  _reducer-name_. The @ref CILK_C_DECLARE_REDUCER macro expands to an\n+ *  anonymous `struct` declaration for a reducer object containing a view of\n+ *  type _value-type_, and the @ref CILK_C_INIT_REDUCER macro expands to a\n+ *  struct initializer.\n+ *\n  *  @subsection reducers_c_reduce_func Reduce Functions\n- *  \n- *  The reduce function for a reducer is called when a parallel execution strand terminates, to\n- *  combine the values computed by the terminating strand and the strand to its left. It takes\n- *  three arguments:\n- *  \n- *  -   `void* reducer` \u2014 the address of the reducer.\n- *  -   `void* left` \u2014 the address of the value for the left strand.\n- *  -   `void* right` \u2014 the address of the value for the right (terminating) strand.\n- *  \n- *  It must apply the reducer\u2019s reduction operation to the `left` and `right` values, leaving\n- *  the result in the `left` value. The `right` value is undefined after the reduce function\n- *  call.\n- *  \n+ *\n+ *  The reduce function for a reducer is called when a parallel execution\n+ *  strand terminates, to combine the values computed by the terminating\n+ *  strand and the strand to its left. It takes three arguments:\n+ *\n+ *  -   `void* reducer` - the address of the reducer.\n+ *  -   `void* left` - the address of the value for the left strand.\n+ *  -   `void* right` - the address of the value for the right (terminating)\n+ *                      strand.\n+ *\n+ *  It must apply the reducer's reduction operation to the `left` and `right`\n+ *  values, leaving the result in the `left` value. The `right` value is\n+ *  undefined after the reduce function call.\n+ *\n  *  @subsection reducers_c_identity_func Identity Functions\n- *  \n- *  The identity function for a reducer is called when a parallel execution strand begins, to\n- *  initialize its value to the reducer\u2019s identity value. It takes two arguments:\n- *  \n- *  -   `void* reducer` \u2014 the address of the reducer.\n- *  -   `void* v` \u2014 the address of a freshly allocated block of memory of size\n+ *\n+ *  The identity function for a reducer is called when a parallel execution\n+ *  strand begins, to initialize its value to the reducer's identity value. It\n+ *  takes two arguments:\n+ *\n+ *  -   `void* reducer` - the address of the reducer.\n+ *  -   `void* v` - the address of a freshly allocated block of memory of size\n  *      `sizeof(value-type)`.\n- *  \n- *  It must initialize the memory pointed to by `v` so that it contains the reducer\u2019s identity \n- *  value.\n- *  \n+ *\n+ *  It must initialize the memory pointed to by `v` so that it contains the\n+ *  reducer's identity value.\n+ *\n  *  @subsection reducers_c_destroy_func Destroy Functions\n- *  \n- *  The destroy function for a reducer is called when a parallel execution strand terminates, to\n- *  do any necessary cleanup before its value is deallocated. It takes two arguments:\n- *  \n- *  -   `void* reducer` \u2014 the address of the reducer.\n- *  -   `void* p` \u2014 the address of the value for the terminating strand.\n- *  \n- *  It must release any resources belonging to the value pointed to by `p`, to avoid a resource \n- *  leak when the memory containing the value is deallocated.\n- *  \n- *  The runtime function `__cilkrts_hyperobject_noop_destroy` can be used for the destructor \n- *  function if the reducer\u2019s values do not need any cleanup.\n- *  \n- *  @subsection reducers_c_register Tell the Cilk Runtime About the Reducer\n- *  \n- *  Call the @ref CILK_C_REGISTER_REDUCER macro to register the reducer with the Cilk runtime:\n- *  \n+ *\n+ *  The destroy function for a reducer is called when a parallel execution\n+ *  strand terminates, to do any necessary cleanup before its value is\n+ *  deallocated. It takes two arguments:\n+ *\n+ *  -   `void* reducer` - the address of the reducer.\n+ *  -   `void* p` - the address of the value for the terminating strand.\n+ *\n+ *  It must release any resources belonging to the value pointed to by `p`, to\n+ *  avoid a resource leak when the memory containing the value is deallocated.\n+ *\n+ *  The runtime function `__cilkrts_hyperobject_noop_destroy` can be used for\n+ *  the destructor function if the reducer's values do not need any cleanup.\n+ *\n+ *  @subsection reducers_c_register Tell the Intel Cilk Plus Runtime About the\n+ *  Reducer\n+ *\n+ *  Call the @ref CILK_C_REGISTER_REDUCER macro to register the reducer with\n+ *  the Intel Cilk Plus runtime:\n+ *\n  *      CILK_C_REGISTER_REDUCER(reducer-name);\n- *  \n- *  The runtime will manage reducer values for all registered reducers when parallel execution \n- *  strands begin and end.\n- *  \n+ *\n+ *  The runtime will manage reducer values for all registered reducers when\n+ *  parallel execution strands begin and end.\n+ *\n  *  @subsection reducers_c_update Update the Value Contained in the Reducer\n- *  \n- *  The @ref REDUCER_VIEW macro returns a reference to the reducer\u2019s value for the  current\n- *  parallel strand:\n- *  \n+ *\n+ *  The @ref REDUCER_VIEW macro returns a reference to the reducer's value for\n+ *  the current parallel strand:\n+ *\n  *      REDUCER_VIEW(reducer-name) = REDUCER_VIEW(reducer-name) OP x;\n- *      \n- *  C++ reducer views restrict access to the wrapped value so that it can only be modified in\n- *  ways consistent with the reducer\u2019s operation. No such protection is provided for C reducers.\n- *  It is\n- *  entirely the responsibility of the user to avoid modifying the value in any\n- *  inappropriate way.\n- *  \n- *  @subsection c_reducers_unregister Tell the Cilk Runtime That You Are Done with the Reducer\n- *  \n- *  When the parallel computation is complete, call the @ref CILK_C_UNREGISTER_REDUCER macro to \n- *  unregister the reducer with the Cilk runtime:\n- *  \n+ *\n+ *  C++ reducer views restrict access to the wrapped value so that it can only\n+ *  be modified in ways consistent with the reducer's operation. No such\n+ *  protection is provided for C reducers.  It is entirely the responsibility\n+ *  of the user to avoid modifying the value in any inappropriate way.\n+ *\n+ *  @subsection c_reducers_unregister Tell the Intel Cilk Plus Runtime That You Are\n+ *  Done with the Reducer\n+ *\n+ *  When the parallel computation is complete, call the @ref\n+ *  CILK_C_UNREGISTER_REDUCER macro to unregister the reducer with the\n+ *  Intel Cilk Plus runtime:\n+ *\n  *      CILK_C_UNREGISTER_REDUCER(reducer-name);\n- *  \n+ *\n  *  The runtime will stop managing reducer values for the reducer.\n- *  \n+ *\n  *  @subsection c_reducers_retrieve Retrieve the Value from the Reducer\n- *  \n- *  When the parallel computation is complete, use the @ref REDUCER_VIEW macro to retrieve the\n- *  final value computed by the reducer.\n- *  \n- *  @subsection reducers_c_example_custom Example \u2014 Creating and Using a Custom C Reducer\n- *  \n+ *\n+ *  When the parallel computation is complete, use the @ref REDUCER_VIEW macro\n+ *  to retrieve the final value computed by the reducer.\n+ *\n+ *  @subsection reducers_c_example_custom Example - Creating and Using a\n+ *              Custom C Reducer\n+ *\n  *  The `IntList` type represents a simple list of integers.\n- *  \n+ *\n  *      struct _intListNode {\n  *          int value;\n  *          _intListNode* next;\n  *      } IntListNode;\n  *      typedef struct { IntListNode* head; IntListNode* tail; } IntList;\n- *      \n+ *\n  *      // Initialize a list to be empty\n  *      void IntList_init(IntList* list) { list->head = list->tail = 0; }\n- *      \n+ *\n  *      // Append an integer to the list\n- *      void IntList_append(IntList* list, int x) \n- *      { \n+ *      void IntList_append(IntList* list, int x)\n+ *      {\n  *          IntListNode* node = (IntListNode*) malloc(sizeof(IntListNode));\n  *          if (list->tail) list->tail->next = node; else list->head = node;\n  *          list->tail = node;\n  *      }\n- *      \n- *      // Append the right list to the left list, and leave the right list empty\n+ *\n+ *      // Append the right list to the left list, and leave the right list\n+ *      // empty\n  *      void IntList_concat(IntList* left, IntList* right)\n  *      {\n  *          if (left->head) {\n@@ -1594,19 +1684,20 @@ using stub::reducer;\n  *          }\n  *          IntList_init(*right);\n  *      }\n- *      \n- *  This code creates a reducer that supports creating an `IntList` by appending values to it.\n- *  \n+ *\n+ *  This code creates a reducer that supports creating an `IntList` by\n+ *  appending values to it.\n+ *\n  *      void identity_IntList(void* reducer, void* list)\n  *      {\n  *          IntList_init((IntList*)list);\n  *      }\n- *      \n+ *\n  *      void reduce_IntList(void* reducer, void* left, void* right)\n  *      {\n  *          IntList_concat((IntList*)left, (IntList*)right);\n  *      }\n- *          \n+ *\n  *      CILK_C_DECLARE_REDUCER(IntList) my_list_int_reducer =\n  *          CILK_C_INIT_REDUCER(IntList,\n  *                              reduce_int_list,\n@@ -1620,28 +1711,29 @@ using stub::reducer;\n  *          IntList_append(&REDUCER_VIEW(my_int_list_reducer), a[i]);\n  *      }\n  *      CILK_C_UNREGISTER_REDUCER(my_int_list_reducer);\n- *      \n+ *\n  *      IntList result = REDUCER_VIEW(my_int_list_reducer);\n  *\n  *  @section reducers_c_predefined Predefined C Reducers\n  *\n- *  Some of the predefined reducer classes in the Cilk library come with a set of predefined\n- *  macros to provide the same capabilities in C. In general, two macros are provided for each\n- *  predefined reducer family:\n+ *  Some of the predefined reducer classes in the Intel Cilk Plus library come with\n+ *  a set of predefined macros to provide the same capabilities in C.\n+ *  In general, two macros are provided for each predefined reducer family:\n  *\n- *  -   `CILK_C_REDUCER_operation(reducer-name, type-name, initial-value)` \u2014 Declares a\n- *      reducer object named _reducer-name_ with initial value _initial-value_ to perform\n- *      a reduction using the _operation_ on values of the type specified by _type-name_.\n- *      This is the equivalent of the general code described in @ref reducers_c_creation :\n+ *  -   `CILK_C_REDUCER_operation(reducer-name, type-name, initial-value)` -\n+ *      Declares a reducer object named _reducer-name_ with initial value\n+ *      _initial-value_ to perform a reduction using the _operation_ on values\n+ *      of the type specified by _type-name_.  This is the equivalent of the\n+ *      general code described in @ref reducers_c_creation :\n  *\n  *          CILK_C_DECLARE_REDUCER(type) reducer-name =\n  *              CILK_C_INIT_REDUCER(type, ..., initial-value);\n  *\n- *      where _type_ is the C type corresponding to _type_name_. See @ref reducers_c_type_names\n- *      below for the _type-names_ that you can use.\n+ *      where _type_ is the C type corresponding to _type_name_. See @ref\n+ *      reducers_c_type_names below for the _type-names_ that you can use.\n  *\n- *  -   `CILK_C_REDUCER_operation_TYPE(type-name)` \u2014 Expands to the `typedef` name for the type\n- *      of the reducer object declared by\n+ *  -   `CILK_C_REDUCER_operation_TYPE(type-name)` - Expands to the `typedef`\n+ *      name for the type of the reducer object declared by\n  *      `CILK_C_REDUCER_operation(reducer-name, type-name, initial-value)`.\n  *\n  *  See @ref reducers_c_example_predefined.\n@@ -1651,22 +1743,23 @@ using stub::reducer;\n  *  |   Operation       |   Name        |   Documentation               |\n  *  |-------------------|---------------|-------------------------------|\n  *  |   addition        |   `OPADD`     |   @ref ReducersAdd            |\n- *  |   bitwise and     |   `OPAND`     |   @ref ReducersAnd            |\n- *  |   bitwise or      |   `OPOR`      |   @ref ReducersOr             |\n- *  |   bitwise xor     |   `OPXOR`     |   @ref ReducersXor            |\n+ *  |   bitwise AND     |   `OPAND`     |   @ref ReducersAnd            |\n+ *  |   bitwise OR      |   `OPOR`      |   @ref ReducersOr             |\n+ *  |   bitwise XOR     |   `OPXOR`     |   @ref ReducersXor            |\n  *  |   multiplication  |   `OPMUL`     |   @ref ReducersMul            |\n  *  |   minimum         |   `MIN`       |   @ref ReducersMinMax         |\n  *  |   minimum & index |   `MIN_INDEX` |   @ref ReducersMinMax         |\n- *  |   maximum         |   `MIN`       |   @ref ReducersMinMax         |\n- *  |   maximum & index |   `MIN_INDEX` |   @ref ReducersMinMax         |\n- *      \n+ *  |   maximum         |   `MAX`       |   @ref ReducersMinMax         |\n+ *  |   maximum & index |   `MAX_INDEX` |   @ref ReducersMinMax         |\n+ *\n  *  @subsection reducers_c_type_names Numeric Type Names\n- *  \n- *  The type and function names created by the C reducer definition macros incorporate both the\n- *  reducer kind (`opadd`, `opxor`, etc.) and the value type of the reducer (`int`, `double`, \n- *  etc.). The value type is represented by a _numeric type name_ string. The types supported \n- *  in C reducers, and their corresponding numeric type names, are given in the following table:\n- *  \n+ *\n+ *  The type and function names created by the C reducer definition macros\n+ *  incorporate both the reducer kind (`opadd`, `opxor`, etc.) and the value\n+ *  type of the reducer (`int`, `double`, etc.). The value type is represented\n+ *  by a _numeric type name_ string. The types supported in C reducers, and\n+ *  their corresponding numeric type names, are given in the following table:\n+ *\n  *  |   Type                |   Numeric Type Name           |\n  *  |-----------------------|-------------------------------|\n  *  |  `char`               |  `char`                       |\n@@ -1685,8 +1778,9 @@ using stub::reducer;\n  *  |  `float`              |  `float`                      |\n  *  |  `double`             |  `double`                     |\n  *  |  `long double`        |  `longdouble`                 |\n- *  \n- *  @subsection reducers_c_example_predefined Example \u2014 Using a Predefined C Reducer\n+ *\n+ *  @subsection reducers_c_example_predefined Example - Using a Predefined C\n+ *              Reducer\n  *\n  *  To compute the sum of all the values in an array of `unsigned int`:\n  *\n@@ -1699,7 +1793,7 @@ using stub::reducer;\n  *      printf(\"The sum is %u\\n\", REDUCER_VIEW(sum));\n  */\n \n- \n+\n  /** @name C language reducer macros\n  *\n  *  These macros are used to declare and work with reducers in C code.\n@@ -1712,7 +1806,8 @@ using stub::reducer;\n \n /** @name Compound identifier macros.\n  *\n- *  These macros are used to construct an identifier by concatenating two or three identifiers.\n+ *  These macros are used to construct an identifier by concatenating two or\n+ *  three identifiers.\n  */\n //@{\n \n@@ -1730,23 +1825,24 @@ using stub::reducer;\n \n //@}\n \n-/** Compiler-specific keyword for the \u201ctype of\u201d operator.\n+/** Compiler-specific keyword for the \"type of\" operator.\n  */\n #if defined(__GNUC__) && !defined(__INTEL_COMPILER)\n # define _Typeof __typeof__\n #endif\n \n /** @name Predefined reducer function declaration macros.\n  *\n- *  These macros are used to create the function headers for the identity, reduction,\n- *  and destructor functions for a builtin reducer family. The macro can be followed by\n- *  a semicolon to create a declaration, or by a brace-enclosed body to create a definition.\n+ *  These macros are used to create the function headers for the identity,\n+ *  reduction, and destructor functions for a builtin reducer family. The\n+ *  macro can be followed by a semicolon to create a declaration, or by a\n+ *  brace-enclosed body to create a definition.\n  */\n //@{\n \n /** Create an identity function header.\n  *\n- *  @note   The name of the function\u2019s value pointer parameter will always be `v`.\n+ *  @note The name of the function's value pointer parameter will always be `v`.\n  *\n  *  @param name The reducer family name.\n  *  @param tn   The type name.\n@@ -1758,8 +1854,9 @@ using stub::reducer;\n  *\n  *  @param name The reducer family name.\n  *  @param tn   The type name.\n- *  @param l    The name to use for the function\u2019s left value pointer parameter.\n- *  @param r    The name to use for the function\u2019s right value pointer parameter.\n+ *  @param l    The name to use for the function's left value pointer parameter.\n+ *  @param r    The name to use for the function's right value pointer \n+ *              parameter.\n  */\n #define __CILKRTS_DECLARE_REDUCER_REDUCE(name,tn,l,r) CILK_EXPORT        \\\n     void __CILKRTS_MKIDENT3(name,_reduce_,tn)(void* key, void* l, void* r)\n@@ -1768,7 +1865,7 @@ using stub::reducer;\n  *\n  *  @param name The reducer family name.\n  *  @param tn   The type name.\n- *  @param p    The name to use for the function\u2019s value pointer parameter.\n+ *  @param p    The name to use for the function's value pointer parameter.\n  */\n #define __CILKRTS_DECLARE_REDUCER_DESTROY(name,tn,p) CILK_EXPORT         \\\n     void __CILKRTS_MKIDENT3(name,_destroy_,tn)(void* key, void* p)\n@@ -1784,8 +1881,8 @@ using stub::reducer;\n \n /** Declaration of a C reducer structure type.\n  *\n- *  This macro expands into an anonymous structure declaration for a C reducer structure\n- *  which contains a @a Type value. For example:\n+ *  This macro expands into an anonymous structure declaration for a C reducer\n+ *  structure which contains a @a Type value. For example:\n  *\n  *      CILK_C_DECLARE_REDUCER(int) my_add_int_reducer =\n  *          CILK_C_INIT_REDUCER(int, \u2026);\n@@ -1801,27 +1898,30 @@ using stub::reducer;\n \n /** Initializer for a C reducer structure.\n  *\n- *  This macro expands into a brace-enclosed structure initializer for a C reducer structure\n- *  that was declared with `CILK_C_DECLARE_REDUCER(Type)`. For example:\n+ *  This macro expands into a brace-enclosed structure initializer for a C\n+ *  reducer structure that was declared with\n+ *  `CILK_C_DECLARE_REDUCER(Type)`. For example:\n  *\n  *      CILK_C_DECLARE_REDUCER(int) my_add_int_reducer =\n- *          CILK_C_INIT_REDUCER(int, \n- *                              add_int_reduce, \n- *                              add_int_identity, \n+ *          CILK_C_INIT_REDUCER(int,\n+ *                              add_int_reduce,\n+ *                              add_int_identity,\n  *                              __cilkrts_hyperobject_noop_destroy,\n  *                              0);\n  *\n- *  @param Type     The type of the value contained in the reducer object. Must be the same as\n- *                  the @a Type argument of the CILK_C_DECLARE_REDUCER macro call that created\n- *                  the reducer.\n- *  @param Reduce   The address of the @ref reducers_c_reduce_func \"reduce function\" for the\n+ *  @param Type     The type of the value contained in the reducer object. Must\n+ *                  be the same as the @a Type argument of the\n+ *                  CILK_C_DECLARE_REDUCER macro call that created the\n  *                  reducer.\n- *  @param Identity The address of the @ref reducers_c_identity_func \"identity function\" for\n- *                  the reducer.\n- *  @param Destroy  The address of the @ref reducers_c_destroy_func \"destroy function\" for the\n- *                  reducer.\n- *  @param ...      The initial value for the reducer. (A single expression if @a Type is a\n- *                  scalar type; a list of values if @a Type is a struct or array type.)\n+ *  @param Reduce   The address of the @ref reducers_c_reduce_func\n+ *                  \"reduce function\" for the reducer.\n+ *  @param Identity The address of the @ref reducers_c_identity_func\n+ *                  \"identity function\" for the reducer.\n+ *  @param Destroy  The address of the @ref reducers_c_destroy_func\n+ *                  \"destroy function\" for the reducer.\n+ *  @param ...      The initial value for the reducer. (A single expression if\n+ *                  @a Type is a scalar type; a list of values if @a Type is a\n+ *                  struct or array type.)\n  *\n  *  @see @ref reducers_c_creation\n  */\n@@ -1840,10 +1940,10 @@ using stub::reducer;\n     ,   __VA_ARGS__                                                     \\\n     }\n \n-/** Register a reducer with the Cilk runtime.\n+/** Register a reducer with the Intel Cilk Plus runtime.\n  *\n- *  The runtime will manage reducer values for all registered reducers when parallel execution \n- *  strands begin and end. For example:\n+ *  The runtime will manage reducer values for all registered reducers when\n+ *  parallel execution strands begin and end. For example:\n  *\n  *      CILK_C_REGISTER_REDUCER(my_add_int_reducer);\n  *      cilk_for (int i = 0; i != n; ++i) {\n@@ -1857,10 +1957,10 @@ using stub::reducer;\n #define CILK_C_REGISTER_REDUCER(Expr) \\\n     __cilkrts_hyper_create(&(Expr).__cilkrts_hyperbase)\n \n-/** Unregister a reducer with the Cilk runtime.\n+/** Unregister a reducer with the Intel Cilk Plus runtime.\n  *\n- *  The runtime will stop managing reducer values for a reducer after it is unregistered. For\n- *  example:\n+ *  The runtime will stop managing reducer values for a reducer after it is\n+ *  unregistered. For example:\n  *\n  *      cilk_for (int i = 0; i != n; ++i) {\n  *          \u2026\n@@ -1876,17 +1976,19 @@ using stub::reducer;\n \n /** Get the current view for a reducer.\n  *\n- *  The `REDUCER_VIEW(reducer-name)` returns a reference to the reducer\u2019s value for the \n- *  current parallel strand. This can be used to initialize thevalue of the  reducer before it\n- *  is used, to modify the value of the reducer on the current parallel strand, or to retrieve\n- *  the final value of the reducer at the end of the parallel computation.\n+ *  The `REDUCER_VIEW(reducer-name)` returns a reference to the reducer's\n+ *  value for the current parallel strand. This can be used to initialize the\n+ *  value of the reducer before it is used, to modify the value of the reducer\n+ *  on the current parallel strand, or to retrieve the final value of the\n+ *  reducer at the end of the parallel computation.\n  *\n  *      REDUCER_VIEW(my_add_int_reducer) = REDUCER_VIEW(my_add_int_reducer) + x;\n  *\n- *  @note   C++ reducer views restrict access to the wrapped value so that it can only be\n- *  modified in ways consistent with the reducer\u2019s operation. No such protection is provided \n- *  for C reducers. It is entirely the responsibility of the user to refrain from modifying the\n- *  value in any inappropriate way.\n+ *  @note C++ reducer views restrict access to the wrapped value so that it\n+ *  can only be modified in ways consistent with the reducer's operation. No\n+ *  such protection is provided for C reducers. It is entirely the\n+ *  responsibility of the user to refrain from modifying the value in any\n+ *  inappropriate way.\n  *\n  *  @param Expr The reducer whose value is to be returned.\n  *"}, {"sha": "a372cee7cda2b668c7aba0335ab90456ed86c20e", "filename": "libcilkrts/include/cilk/reducer_file.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Freducer_file.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Freducer_file.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Fcilk%2Freducer_file.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,9 +1,7 @@\n /*\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -18,7 +16,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -31,6 +28,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  *\n  */\n "}, {"sha": "80204af1d9e0482024ac563d855057dde0fbd028", "filename": "libcilkrts/include/cilk/reducer_list.h", "status": "modified", "additions": 242, "deletions": 219, "changes": 461, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Freducer_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Freducer_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Fcilk%2Freducer_list.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,10 +1,8 @@\n /*  reducer_list.h                  -*- C++ -*-\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -19,7 +17,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -32,12 +29,26 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  */\n \n /** @file reducer_list.h\n  *\n- *  @brief Defines classes for doing parallel list creation by appending or\n- *  prepending.\n+ *  @brief Defines classes for parallel list creation by appending or\n+ *  prepending reducers.\n  *\n  *  @ingroup ReducersList\n  *\n@@ -52,28 +63,28 @@\n \n /** @defgroup ReducersList List Reducers\n  *\n- *  List append and prepend reducers allow the creation of a standard list by\n+ *  List-append and list-prepend reducers create standard lists by\n  *  concatenating a set of lists or values in parallel.\n  *\n  *  @ingroup Reducers\n  *\n- *  You should be familiar with @ref pagereducers \"Cilk reducers\", described in\n- *  file `reducers.md`, and particularly with @ref reducers_using, before trying\n- *  to use the information in this file.\n+ *  You should be familiar with @ref pagereducers \"Intel(R) Cilk(TM) Plus reducers\"\n+ *  (from file `reducers.md`) and particularly with @ref reducers_using, before\n+ *  trying to use the information in this file.\n  *\n  *  @section redlist_usage Usage Example\n  *\n  *      // Create a list containing the labels of the nodes of a tree in\n- *      // \u201cinorder\u201d (left subtree, root, right subtree).\n+ *      // \"inorder\" (left subtree, root, right subtree).\n  *\n  *      struct Tree { Tree* left; Tree* right; string label; ... };\n  *\n  *      list<string> x;\n  *      cilk::reducer< cilk::op_list_append<string> > xr(cilk::move_in(x));\n  *      collect_labels(tree, xr);\n  *      xr.move_out(x);\n- *      \n- *      void collect_labels(Tree* node, \n+ *\n+ *      void collect_labels(Tree* node,\n  *                          cilk::reducer< cilk::op_list_append<string> >& xr)\n  *      {\n  *          if (node) {\n@@ -88,39 +99,39 @@\n  *\n  *  @subsection redlist_monoid_values Value Set\n  *\n- *  The value set of a list reducer is the set of values of the class \n- *  `std::list<Type, Allocator>`, which we refer to as \u201cthe reducer\u2019s list \n- *  type\u201d.\n+ *  The __value set__ of a list reducer is the set of values of the class\n+ *  `std::list<Type, Allocator>`, which we refer to as the reducer's _list\n+ *  type_.\n  *\n  *  @subsection redlist_monoid_operator Operator\n  *\n- *  The operator of a list append reducer is defined as\n+ *  The operator of a list-append reducer is defined as\n  *\n  *      x CAT y == (every element of x, followed by every element of y)\n  *\n- *  The operator of a list prepend reducer is defined as\n+ *  The operator of a list-prepend reducer is defined as\n  *\n  *      x RCAT y == (every element of y, followed by every element of x)\n  *\n  *  @subsection redlist_monoid_identity Identity\n  *\n- *  The identity value of a list reducer is the empty list, which is the value \n+ *  The identity value of a list reducer is the empty list, which is the value\n  *  of the expression `std::list<Type, Allocator>([allocator])`.\n  *\n  *  @section redlist_operations Operations\n  *\n- *  In the operation descriptions below, the type name `List` refers to the \n- *  reducer\u2019s string type, `std::list<Type, Allocator>`.\n+ *  In the operation descriptions below, the type name `List` refers to the\n+ *  reducer's string type, `std::list<Type, Allocator>`.\n  *\n  *  @subsection redlist_constructors Constructors\n  *\n- *  Any argument list which is valid for a `std::list` constructor is valid for \n+ *  Any argument list which is valid for a `std::list` constructor is valid for\n  *  a list reducer constructor. The usual move-in constructor is also provided:\n  *\n  *      reducer(move_in(List& variable))\n  *\n- *  A list reducer with no constructor arguments, or with only an allocator \n- *  argument, will initially contain the identity value, an empty list. \n+ *  A list reducer with no constructor arguments, or with only an allocator\n+ *  argument, will initially contain the identity value, an empty list.\n  *\n  *  @subsection redlist_get_set Set and Get\n  *\n@@ -131,46 +142,46 @@\n  *\n  *  @subsection redlist_view_ops View Operations\n  *\n- *  The view of a list append reducer provides the following member functions:\n+ *  The view of a list-append reducer provides the following member functions:\n  *\n- *      void push_back(const Type& element) \n- *      void insert_back(List::size_type n, const Type& element) \n+ *      void push_back(const Type& element)\n+ *      void insert_back(List::size_type n, const Type& element)\n  *      template <typename Iter> void insert_back(Iter first, Iter last)\n  *      void splice_back(List& x)\n  *      void splice_back(List& x, List::iterator i)\n  *      void splice_back(List& x, List::iterator first, List::iterator last)\n- *  \n- *  The view of a list prepend reducer provides the following member functions:\n  *\n- *      void push_front(const Type& element) \n- *      void insert_front(List::size_type n, const Type& element) \n+ *  The view of a list-prepend reducer provides the following member functions:\n+ *\n+ *      void push_front(const Type& element)\n+ *      void insert_front(List::size_type n, const Type& element)\n  *      template <typename Iter> void insert_front(Iter first, Iter last)\n  *      void splice_front(List& x)\n  *      void splice_front(List& x, List::iterator i)\n  *      void splice_front(List& x, List::iterator first, List::iterator last)\n  *\n  *  The `push_back` and `push_front` functions are the same as the\n  *  corresponding `std::list` functions. The `insert_back`, `splice_back`,\n- *  `insert_front`, and `splice_front` functions are the same as the \n+ *  `insert_front`, and `splice_front` functions are the same as the\n  *  `std::list` `insert` and `splice` functions, with the first parameter\n  *  fixed to the end or beginning of the list, respectively.\n  *\n  *  @section redlist_performance Performance Considerations\n  *\n- *  An efficient reducer requires that combining the values of two views (using \n+ *  An efficient reducer requires that combining the values of two views (using\n  *  the view `reduce()` function) be a constant-time operations. Two lists can\n  *  be merged in constant time using the `splice()` function if they have the\n  *  same allocator. Therefore, the lists for new views are created (by the view\n  *  identity constructor) using the same allocator as the list that was created\n  *  when the reducer was constructed.\n  *\n- *  The performance of adding elements to a list reducer depends on the view \n+ *  The performance of adding elements to a list reducer depends on the view\n  *  operations that are used:\n  *\n  *  *   The `push` functions add a single element to the list, and therefore\n  *      take constant time.\n  *  *   An `insert` function that inserts _N_ elements adds each of them\n- *      individually, and therefore takes _O(N)_ time. \n+ *      individually, and therefore takes _O(N)_ time.\n  *  *   A `splice` function that inserts _N_ elements just adjusts a couple of\n  *      pointers, and therefore takes constant time, _if the splice is from a\n  *      list with the same allocator as the reducer_. Otherwise, it is\n@@ -183,7 +194,7 @@\n  *  The reducer `move_in` and `move_out` functions do a constant-time `swap` if\n  *  the variable has the same allocator as the reducer, and a linear-time copy\n  *  otherwise.\n- *  \n+ *\n  *  Note that the allocator of a list reducer is determined when the reducer is\n  *  constructed. The following two examples may have very different behavior:\n  *\n@@ -199,16 +210,16 @@\n  *      reducer2.move_out(a_list);\n  *\n  *  *   `reducer1` will be constructed with the same allocator as `a_list`,\n- *      because the list was was specified in the constructor. The `move_in`\n- *      and`move_out` can therefore be done with a `swap` in constant time.\n+ *      because the list was specified in the constructor. The `move_in`\n+ *      and `move_out` can therefore be done with a `swap` in constant time.\n  *  *   `reducer2` will be constructed with a _default_ allocator,\n- *      \u201c`Allocator()`\u201d, which may or may not be the same as the allocator of\n+ *      \"`Allocator()`\", which may or may not be the same as the allocator of\n  *      `a_list`. Therefore, the `move_in` and `move_out` may have to be done\n  *      with a copy in _O(N)_ time.\n- *  \n+ *\n  *  (All instances of an allocator type with no internal state (like\n- *  `std::allocator`) are \u201cthe same\u201d. You only need to worry about the \u201csame\n- *  allocator\u201d issue when you create list reducers with custom allocator types.)\n+ *  `std::allocator`) are \"the same\". You only need to worry about the \"same\n+ *  allocator\" issue when you create list reducers with custom allocator types.)\n  *\n  *  @section redlist_types Type and Operator Requirements\n  *\n@@ -223,11 +234,11 @@ namespace internal {\n /** @ingroup ReducersList */\n //@{\n \n-/** Base class for list append and prepend view classes.\n+/** Base class for list-append and prepend view classes.\n  *\n  *  @note   This class provides the definitions that are required for a class\n  *          that will be used as the parameter of a @ref list_monoid_base\n- *          specialization. \n+ *          specialization.\n  *\n  *  @tparam Type        The list element type (not the list type).\n  *  @tparam Allocator   The list's allocator class.\n@@ -250,31 +261,31 @@ class list_view_base\n     /** @name Monoid support.\n      */\n     //@{\n-    \n+\n     /// Required by @ref monoid_with_view\n     typedef list_type   value_type;\n \n     /// Required by @ref list_monoid_base\n     Allocator get_allocator() const\n-    { \n-        return m_value.get_allocator(); \n+    {\n+        return m_value.get_allocator();\n     }\n-    \n+\n     //@}\n-    \n-    \n+\n+\n     /** @name Constructors.\n      */\n     //@{\n-    \n+\n     /// Standard list constructor.\n     explicit list_view_base(const Allocator& a = Allocator()) : m_value(a) {}\n     explicit list_view_base(\n-        typename list_type::size_type n, \n-        const Type& value = Type(), \n+        typename list_type::size_type n,\n+        const Type& value = Type(),\n         const Allocator& a = Allocator() ) : m_value(n, value, a) {}\n-    template <typename Iter> \n-    list_view_base(Iter first, Iter last, const Allocator& a = Allocator()) : \n+    template <typename Iter>\n+    list_view_base(Iter first, Iter last, const Allocator& a = Allocator()) :\n         m_value(first, last, a) {}\n     list_view_base(const list_type& list) : m_value(list) {}\n \n@@ -284,13 +295,13 @@ class list_view_base\n     {\n         m_value.swap(w.value());\n     }\n-    \n+\n     //@}\n-    \n+\n     /** @name Reducer support.\n      */\n     //@{\n-    \n+\n     /// Required by reducer::move_in()\n     void view_move_in(value_type& v)\n     {\n@@ -302,7 +313,7 @@ class list_view_base\n             m_value = v;\n         v.clear();\n     }\n-    \n+\n     /// Required by reducer::move_out()\n     void view_move_out(value_type& v)\n     {\n@@ -314,43 +325,46 @@ class list_view_base\n             v = m_value;\n         m_value.clear();\n     }\n-    \n+\n     /// Required by reducer::set_value()\n     void view_set_value(const value_type& v) { m_value = v; }\n \n     /// Required by reducer::get_value()\n     value_type const& view_get_value()     const { return m_value; }\n-    \n+\n+    /// Type returned by view_get_value.\n+    typedef value_type const& return_type_for_get_value;\n+\n     // Required by legacy wrapper get_reference()\n     value_type      & view_get_reference()       { return m_value; }\n     value_type const& view_get_reference() const { return m_value; }\n-    \n+\n     //@}\n };\n \n \n-/** Base class for list append and prepend monoid classes.\n+/** Base class for list-append and prepend monoid classes.\n  *\n  *  The key to efficient reducers is that the `identity` operation, which\n  * creates a new per-strand view, and the `reduce` operation, which combines\n  *  two per-strand views, must be constant-time operations. Two lists can be\n  *  concatenated in constant time only if they have the same allocator.\n  *  Therefore, all the per-strand list accumulator variables must be created\n- *   with the same allocator as the leftmost view list. \n+ *   with the same allocator as the leftmost view list.\n  *\n  *  This means that a list reduction monoid must have a copy of the allocator\n- *  of the leftmost view\u2019s list, so that it can use it in the `identity`\n+ *  of the leftmost view's list, so that it can use it in the `identity`\n  *  operation. This, in turn, requires that list reduction monoids have a\n  *  specialized `construct()` function, which constructs the leftmost view\n- *  before the monoid, and then passes the leftmost view\u2019s allocator to the\n+ *  before the monoid, and then passes the leftmost view's allocator to the\n  *  monoid constructor.\n  *\n- *  @tparam View    The list append or prepend view class.\n+ *  @tparam View    The list-append or prepend view class.\n  *  @tparam Align   If `false` (the default), reducers instantiated on this\n- *                  monoid will be naturally aligned (the Cilk library 1.0\n+ *                  monoid will be naturally aligned (the Intel Cilk Plus library 1.0\n  *                  behavior). If `true`, reducers instantiated on this monoid\n- *                  will be cache-aligned for binary compatibility with \n- *                  reducers in Cilk library version 0.9.\n+ *                  will be cache-aligned for binary compatibility with\n+ *                  reducers in Intel Cilk Plus library version 0.9.\n  *\n  *  @see ReducersList\n  *  @see list_view_base\n@@ -360,15 +374,15 @@ class list_monoid_base : public monoid_with_view<View, Align>\n {\n     typedef typename View::value_type           list_type;\n     typedef typename list_type::allocator_type  allocator_type;\n+    typedef provisional_guard<View>             view_guard;\n+\n     allocator_type                              m_allocator;\n-    \n-    using monoid_base<list_type, View>::provisional;\n-    \n+\n public:\n \n     /** Constructor.\n      *\n-     *  There is no default constructor for list monoids, because the allocator \n+     *  There is no default constructor for list monoids, because the allocator\n      *  must always be specified.\n      *\n      *  @param  allocator   The list allocator to be used when\n@@ -377,45 +391,54 @@ class list_monoid_base : public monoid_with_view<View, Align>\n     list_monoid_base(const allocator_type& allocator = allocator_type()) :\n         m_allocator(allocator) {}\n \n-    /** Create an identity view.\n+    /** Creates an identity view.\n      *\n      *  List view identity constructors take the list allocator as an argument.\n      *\n      *  @param v    The address of the uninitialized memory in which the view\n      *              will be constructed.\n      */\n     void identity(View *v) const { ::new((void*) v) View(m_allocator); }\n-    \n+\n     /** @name construct functions\n      *\n-     *  All `construct()` functions first construct the leftmost view, using \n+     *  All `construct()` functions first construct the leftmost view, using\n      *  the optional @a x1, @a x2, and @a x3 arguments that were passed in from\n-     *  the reducer constructor. They then call the view\u2019s `get_allocator()`\n+     *  the reducer constructor. They then call the view's `get_allocator()`\n      *  function to get the list allocator from its contained list, and pass it\n      *  to the monoid constructor.\n      */\n     //@{\n \n     template <typename Monoid>\n     static void construct(Monoid* monoid, View* view)\n-        { provisional( new ((void*)view) View() ).confirm_if( \n-            new ((void*)monoid) Monoid(view->get_allocator()) ); }\n+    {\n+        view_guard vg( new((void*) view) View() );\n+        vg.confirm_if( new((void*) monoid) Monoid(view->get_allocator()) ); \n+    }\n \n     template <typename Monoid, typename T1>\n     static void construct(Monoid* monoid, View* view, const T1& x1)\n-        { provisional( new ((void*)view) View(x1) ).confirm_if( \n-            new ((void*)monoid) Monoid(view->get_allocator()) ); }\n+    {\n+        view_guard vg( new((void*) view) View(x1) );\n+        vg.confirm_if( new((void*) monoid) Monoid(view->get_allocator()) ); \n+    }\n \n     template <typename Monoid, typename T1, typename T2>\n-    static void construct(Monoid* monoid, View* view, const T1& x1, const T2& x2)\n-        { provisional( new ((void*)view) View(x1, x2) ).confirm_if( \n-            new ((void*)monoid) Monoid(view->get_allocator()) ); }\n+    static void construct(Monoid* monoid, View* view,\n+                          const T1& x1, const T2& x2)\n+    {\n+        view_guard vg( new((void*) view) View(x1, x2) );\n+        vg.confirm_if( new((void*) monoid) Monoid(view->get_allocator()) ); \n+    }\n \n     template <typename Monoid, typename T1, typename T2, typename T3>\n-    static void construct(Monoid* monoid, View* view, const T1& x1, const T2& x2, \n-                            const T3& x3)\n-        { provisional( new ((void*)view) View(x1, x2, x3) ).confirm_if( \n-            new ((void*)monoid) Monoid(view->get_allocator()) ); }\n+    static void construct(Monoid* monoid, View* view,\n+                          const T1& x1, const T2& x2, const T3& x3)\n+    {\n+        view_guard vg( new((void*) view) View(x1, x2, x3) );\n+        vg.confirm_if( new((void*) monoid) Monoid(view->get_allocator()) ); \n+    }\n \n     //@}\n };\n@@ -428,32 +451,32 @@ class list_monoid_base : public monoid_with_view<View, Align>\n /** @ingroup ReducersList */\n //@{\n \n-/** The list append reducer view class.\n+/** The list-append reducer view class.\n  *\n- *  This is the view class for reducers created with \n+ *  This is the view class for reducers created with\n  *  `cilk::reducer< cilk::op_list_append<Type, Allocator> >`. It holds the\n  *  accumulator variable for the reduction, and allows only append operations\n  *  to be performed on it.\n  *\n- *  @note   The reducer \u201cdereference\u201d operation (`reducer::operator *()`) \n- *          yields a reference to the view. Thus, for example, the view class\u2019s\n+ *  @note   The reducer \"dereference\" operation (`reducer::operator *()`)\n+ *          yields a reference to the view. Thus, for example, the view class's\n  *          `push_back` operation would be used in an expression like\n- *          `r->push_back(a)`, where `r` is a list append reducer variable.\n+ *          `r->push_back(a)`, where `r` is a list-append reducer variable.\n  *\n  *  @tparam Type        The list element type (not the list type).\n  *  @tparam Allocator   The list allocator type.\n  *\n  *  @see ReducersList\n  *  @see op_list_append\n  */\n-template <class Type, \n+template <class Type,\n           class Allocator = typename std::list<Type>::allocator_type>\n class op_list_append_view : public internal::list_view_base<Type, Allocator>\n {\n     typedef internal::list_view_base<Type, Allocator>   base;\n     typedef std::list<Type, Allocator>                  list_type;\n     typedef typename list_type::iterator                iterator;\n-    \n+\n     iterator end() { return this->m_value.end(); }\n \n public:\n@@ -467,48 +490,48 @@ class op_list_append_view : public internal::list_view_base<Type, Allocator>\n      *  forms, as well as the reducer move_in constructor form.\n      */\n     //@{\n-    \n+\n     op_list_append_view() : base() {}\n-    \n+\n     template <typename T1>\n     op_list_append_view(const T1& x1) : base(x1) {}\n-    \n+\n     template <typename T1, typename T2>\n     op_list_append_view(const T1& x1, const T2& x2) : base(x1, x2) {}\n-    \n+\n     template <typename T1, typename T2, typename T3>\n-    op_list_append_view(const T1& x1, const T2& x2, const T3& x3) : \n+    op_list_append_view(const T1& x1, const T2& x2, const T3& x3) :\n         base(x1, x2, x3) {}\n \n-    //@}    \n+    //@}\n \n     /** @name View modifier operations.\n      */\n     //@{\n-    \n-    /** Add an element at the end of the list.\n+\n+    /** Adds an element at the end of the list.\n      *\n      *  This is equivalent to `list.push_back(element)`\n      */\n-    void push_back(const Type& element) \n+    void push_back(const Type& element)\n         { this->m_value.push_back(element); }\n \n-    /** Insert elements at the end of the list.\n+    /** Inserts elements at the end of the list.\n      *\n      *  This is equivalent to `list.insert(list.end(), n, element)`\n      */\n-    void insert_back(typename list_type::size_type n, const Type& element) \n+    void insert_back(typename list_type::size_type n, const Type& element)\n         { this->m_value.insert(end(), n, element); }\n \n-    /** Insert elements at the end of the list.\n+    /** Inserts elements at the end of the list.\n      *\n      *  This is equivalent to `list.insert(list.end(), first, last)`\n      */\n     template <typename Iter>\n     void insert_back(Iter first, Iter last)\n         { this->m_value.insert(end(), first, last); }\n \n-    /** Splice elements at the end of the list.\n+    /** Splices elements at the end of the list.\n      *\n      *  This is equivalent to `list.splice(list.end(), x)`\n      */\n@@ -521,7 +544,7 @@ class op_list_append_view : public internal::list_view_base<Type, Allocator>\n         }\n     }\n \n-    /** Splice elements at the end of the list.\n+    /** Splices elements at the end of the list.\n      *\n      *  This is equivalent to `list.splice(list.end(), x, i)`\n      */\n@@ -534,7 +557,7 @@ class op_list_append_view : public internal::list_view_base<Type, Allocator>\n         }\n     }\n \n-    /** Splice elements at the end of the list.\n+    /** Splices elements at the end of the list.\n      *\n      *  This is equivalent to `list.splice(list.end(), x, first, last)`\n      */\n@@ -546,14 +569,14 @@ class op_list_append_view : public internal::list_view_base<Type, Allocator>\n             x.erase(first, last);\n         }\n     }\n-    \n+\n     //@}\n \n-    /** Reduction operation.\n+    /** Reduces the views of two strands.\n      *\n      *  This function is invoked by the @ref op_list_append monoid to combine\n-     *  the views of two strands when the right strand merges with the left \n-     *  one. It appends the value contained in the right-strand view to the \n+     *  the views of two strands when the right strand merges with the left\n+     *  one. It appends the value contained in the right-strand view to the\n      *  value contained in the left-strand view, and leaves the value in the\n      *  right-strand view undefined.\n      *\n@@ -572,32 +595,32 @@ class op_list_append_view : public internal::list_view_base<Type, Allocator>\n };\n \n \n-/** The list prepend reducer view class.\n+/** The list-prepend reducer view class.\n  *\n- *  This is the view class for reducers created with \n+ *  This is the view class for reducers created with\n  *  `cilk::reducer< cilk::op_list_prepend<Type, Allocator> >`. It holds the\n  *  accumulator variable for the reduction, and allows only prepend operations\n  *  to be performed on it.\n  *\n- *  @note   The reducer \u201cdereference\u201d operation (`reducer::operator *()`) \n- *          yields a reference to the view. Thus, for example, the view class\u2019s\n+ *  @note   The reducer \"dereference\" operation (`reducer::operator *()`)\n+ *          yields a reference to the view. Thus, for example, the view class's\n  *          `push_front` operation would be used in an expression like\n- *          `r->push_front(a)`, where `r` is a list prepend reducer variable.\n+ *          `r->push_front(a)`, where `r` is a list-prepend reducer variable.\n  *\n  *  @tparam Type        The list element type (not the list type).\n  *  @tparam Allocator   The list allocator type.\n  *\n  *  @see ReducersList\n  *  @see op_list_prepend\n  */\n-template <class Type, \n+template <class Type,\n           class Allocator = typename std::list<Type>::allocator_type>\n class op_list_prepend_view : public internal::list_view_base<Type, Allocator>\n {\n     typedef internal::list_view_base<Type, Allocator>   base;\n     typedef std::list<Type, Allocator>                  list_type;\n     typedef typename list_type::iterator                iterator;\n-    \n+\n     iterator begin() { return this->m_value.begin(); }\n \n public:\n@@ -612,48 +635,48 @@ class op_list_prepend_view : public internal::list_view_base<Type, Allocator>\n      *\n      */\n     //@{\n-    \n+\n     op_list_prepend_view() : base() {}\n-    \n+\n     template <typename T1>\n     op_list_prepend_view(const T1& x1) : base(x1) {}\n-    \n+\n     template <typename T1, typename T2>\n     op_list_prepend_view(const T1& x1, const T2& x2) : base(x1, x2) {}\n-    \n+\n     template <typename T1, typename T2, typename T3>\n-    op_list_prepend_view(const T1& x1, const T2& x2, const T3& x3) : \n+    op_list_prepend_view(const T1& x1, const T2& x2, const T3& x3) :\n         base(x1, x2, x3) {}\n \n-    //@}    \n+    //@}\n \n     /** @name View modifier operations.\n      */\n     //@{\n-    \n-    /** Add an element at the beginning of the list.\n+\n+    /** Adds an element at the beginning of the list.\n      *\n      *  This is equivalent to `list.push_front(element)`\n      */\n-    void push_front(const Type& element) \n+    void push_front(const Type& element)\n         { this->m_value.push_front(element); }\n \n-    /** Insert elements at the beginning of the list.\n+    /** Inserts elements at the beginning of the list.\n      *\n      *  This is equivalent to `list.insert(list.begin(), n, element)`\n      */\n-    void insert_front(typename list_type::size_type n, const Type& element) \n+    void insert_front(typename list_type::size_type n, const Type& element)\n         { this->m_value.insert(begin(), n, element); }\n \n-    /** Insert elements at the beginning of the list.\n+    /** Inserts elements at the beginning of the list.\n      *\n      *  This is equivalent to `list.insert(list.begin(), first, last)`\n      */\n     template <typename Iter>\n     void insert_front(Iter first, Iter last)\n         { this->m_value.insert(begin(), first, last); }\n \n-    /** Splice elements at the beginning of the list.\n+    /** Splices elements at the beginning of the list.\n      *\n      *  This is equivalent to `list.splice(list.begin(), x)`\n      */\n@@ -666,7 +689,7 @@ class op_list_prepend_view : public internal::list_view_base<Type, Allocator>\n         }\n     }\n \n-    /** Splice elements at the beginning of the list.\n+    /** Splices elements at the beginning of the list.\n      *\n      *  This is equivalent to `list.splice(list.begin(), x, i)`\n      */\n@@ -679,7 +702,7 @@ class op_list_prepend_view : public internal::list_view_base<Type, Allocator>\n         }\n     }\n \n-    /** Splice elements at the beginning of the list.\n+    /** Splices elements at the beginning of the list.\n      *\n      *  This is equivalent to `list.splice(list.begin(), x, first, last)`\n      */\n@@ -691,14 +714,14 @@ class op_list_prepend_view : public internal::list_view_base<Type, Allocator>\n             x.erase(first, last);\n         }\n     }\n-    \n+\n     //@}\n \n-    /** Reduction operation.\n+    /** Reduces the views of two strands.\n      *\n      *  This function is invoked by the @ref op_list_prepend monoid to combine\n-     *  the views of two strands when the right strand merges with the left \n-     *  one. It prepends the value contained in the right-strand view to the \n+     *  the views of two strands when the right strand merges with the left\n+     *  one. It prepends the value contained in the right-strand view to the\n      *  value contained in the left-strand view, and leaves the value in the\n      *  right-strand view undefined.\n      *\n@@ -722,84 +745,84 @@ class op_list_prepend_view : public internal::list_view_base<Type, Allocator>\n \n \n \n-/** Monoid class for list append reductions. Instantiate the cilk::reducer\n- *  template class with a op_list_append monoid to create a list append reducer\n+/** Monoid class for list-append reductions. Instantiate the cilk::reducer\n+ *  template class with a op_list_append monoid to create a list-append reducer\n  *  class. For example, to create a list of strings:\n  *\n  *      cilk::reducer< cilk::op_list_append<std::string> > r;\n  *\n  *  @tparam Type    The list element type (not the list type).\n  *  @tparam Alloc   The list allocator type.\n  *  @tparam Align   If `false` (the default), reducers instantiated on this\n- *                  monoid will be naturally aligned (the Cilk library 1.0\n+ *                  monoid will be naturally aligned (the Intel Cilk Plus library 1.0\n  *                  behavior). If `true`, reducers instantiated on this monoid\n- *                  will be cache-aligned for binary compatibility with \n- *                  reducers in Cilk library version 0.9.\n+ *                  will be cache-aligned for binary compatibility with\n+ *                  reducers in Intel Cilk Plus library version 0.9.\n  *\n  *  @see ReducersList\n  *  @see op_list_append_view\n  */\n-template <typename Type, \n+template <typename Type,\n           typename Allocator = typename std::list<Type>::allocator_type,\n           bool Align = false>\n-struct op_list_append : \n-    public internal::list_monoid_base<op_list_append_view<Type, Allocator>, Align> \n+struct op_list_append :\n+    public internal::list_monoid_base<op_list_append_view<Type, Allocator>, Align>\n {\n     /// Construct with default allocator.\n     op_list_append() {}\n     /// Construct with specified allocator.\n-    op_list_append(const Allocator& alloc) : \n+    op_list_append(const Allocator& alloc) :\n         internal::list_monoid_base<op_list_append_view<Type, Allocator>, Align>(alloc) {}\n };\n \n-/** Monoid class for list prepend reductions. Instantiate the cilk::reducer\n- *  template class with a op_list_prepend monoid to create a list prepend\n+/** Monoid class for list-prepend reductions. Instantiate the cilk::reducer\n+ *  template class with a op_list_prepend monoid to create a list-prepend\n  *  reducer class. For example, to create a list of strings:\n  *\n  *      cilk::reducer< cilk::op_list_prepend<std::string> > r;\n  *\n  *  @tparam Type    The list element type (not the list type).\n  *  @tparam Alloc   The list allocator type.\n  *  @tparam Align   If `false` (the default), reducers instantiated on this\n- *                  monoid will be naturally aligned (the Cilk library 1.0\n+ *                  monoid will be naturally aligned (the Intel Cilk Plus library 1.0\n  *                  behavior). If `true`, reducers instantiated on this monoid\n- *                  will be cache-aligned for binary compatibility with \n- *                  reducers in Cilk library version 0.9.\n+ *                  will be cache-aligned for binary compatibility with\n+ *                  reducers in Intel Cilk Plus library version 0.9.\n  *\n  *  @see ReducersList\n  *  @see op_list_prepend_view\n  */\n-template <typename Type, \n+template <typename Type,\n           typename Allocator = typename std::list<Type>::allocator_type,\n           bool Align = false>\n-struct op_list_prepend : \n-    public internal::list_monoid_base<op_list_prepend_view<Type, Allocator>, Align> \n+struct op_list_prepend :\n+    public internal::list_monoid_base<op_list_prepend_view<Type, Allocator>, Align>\n {\n     /// Construct with default allocator.\n     op_list_prepend() {}\n     /// Construct with specified allocator.\n-    op_list_prepend(const Allocator& alloc) : \n+    op_list_prepend(const Allocator& alloc) :\n         internal::list_monoid_base<op_list_prepend_view<Type, Allocator>, Align>(alloc) {}\n };\n \n \n-/** Deprecated list append reducer wrapper class.\n+/** Deprecated list-append reducer wrapper class.\n  *\n- *  reducer_list_append is the same as \n+ *  reducer_list_append is the same as\n  *  @ref reducer<@ref op_list_append>, except that reducer_list_append is a\n- *  proxy for the contained view, so that accumulator variable update \n+ *  proxy for the contained view, so that accumulator variable update\n  *  operations can be applied directly to the reducer. For example, an element\n  *  is appended to a `reducer<%op_list_append>` with `r->push_back(a)`, but an\n  *  element can be appended to a `%reducer_list_append` with `r.push_back(a)`.\n  *\n  *  @deprecated Users are strongly encouraged to use `reducer<monoid>`\n- *              reducers rather than the old wrappers like reducer_list_append. \n+ *              reducers rather than the old wrappers like reducer_list_append.\n  *              The `reducer<monoid>` reducers show the reducer/monoid/view\n  *              architecture more clearly, are more consistent in their\n  *              implementation, and present a simpler model for new\n  *              user-implemented reducers.\n  *\n- *  @note   Implicit conversions are provided between `%reducer_list_append` \n+ *  @note   Implicit conversions are provided between `%reducer_list_append`\n  *          and `reducer<%op_list_append>`. This allows incremental code\n  *          conversion: old code that used `%reducer_list_append` can pass a\n  *          `%reducer_list_append` to a converted function that now expects a\n@@ -814,20 +837,20 @@ struct op_list_prepend :\n  *  @see ReducersList\n  */\n template <class Type, class Allocator = std::allocator<Type> >\n-class reducer_list_append : \n+class reducer_list_append :\n     public reducer<op_list_append<Type, Allocator, true> >\n {\n     typedef reducer<op_list_append<Type, Allocator, true> > base;\n     using base::view;\n public:\n \n-    /// The reducer\u2019s list type.\n+    /// The reducer's list type.\n     typedef typename base::value_type list_type;\n \n-    /// The list\u2019s element type.\n+    /// The list's element type.\n     typedef Type list_value_type;\n \n-    /// The reducer\u2019s primitive component type.\n+    /// The reducer's primitive component type.\n     typedef Type basic_value_type;\n \n     /// The monoid type.\n@@ -836,18 +859,18 @@ class reducer_list_append :\n     /** @name Constructors\n      */\n     //@{\n-    \n-    /** Construct a reducer with an empty list.\n+\n+    /** Constructs a reducer with an empty list.\n      */\n     reducer_list_append() {}\n \n-    /** Construct a reducer with a specified initial list value.\n+    /** Constructs a reducer with a specified initial list value.\n      */\n-    reducer_list_append(const std::list<Type, Allocator> &initial_value) : \n+    reducer_list_append(const std::list<Type, Allocator> &initial_value) :\n         base(initial_value) {}\n-        \n+\n     //@}\n-        \n+\n \n     /** @name Forwarded functions\n      *  @details Functions that update the contained accumulator variable are\n@@ -856,25 +879,25 @@ class reducer_list_append :\n \n     /// @copydoc op_list_append_view::push_back(const Type&)\n     void push_back(const Type& element) { view().push_back(element); }\n-    \n+\n     //@}\n \n-    /** Allow mutable access to the list within the current view.\n-     * \n+    /** Allows mutable access to the list within the current view.\n+     *\n      *  @warning    If this method is called before the parallel calculation is\n      *              complete, the list returned by this method will be a partial\n      *              result.\n-     * \n+     *\n      *  @returns    A mutable reference to the list within the current view.\n      */\n     list_type &get_reference() { return view().view_get_reference(); }\n \n-    /** Allow read-only access to the list within the current view.\n-     * \n+    /** Allows read-only access to the list within the current view.\n+     *\n      *  @warning    If this method is called before the parallel calculation is\n      *              complete, the list returned by this method will be a partial\n      *              result.\n-     * \n+     *\n      *  @returns    A const reference to the list within the current view.\n      */\n     list_type const &get_reference() const { return view().view_get_reference(); }\n@@ -903,12 +926,12 @@ class reducer_list_append :\n     reducer_list_append*       operator->()       { return this; }\n     reducer_list_append const* operator->() const { return this; }\n     //@}\n-    \n+\n     /** @name Upcast\n-     *  @details In Cilk library 0.9, reducers were always cache-aligned. In\n-     *  library  1.0, reducer cache alignment is optional. By default, reducers\n-     *  are unaligned (i.e., just naturally aligned), but legacy wrappers\n-     *  inherit from cache-aligned reducers for binary compatibility.\n+     *  @details In Intel Cilk Plus library 0.9, reducers were always cache-aligned.\n+     *  In library  1.0, reducer cache alignment is optional. By default,\n+     *  reducers are unaligned (i.e., just naturally aligned), but legacy\n+     *  wrappers inherit from cache-aligned reducers for binary compatibility.\n      *\n      *  This means that a wrapper will automatically be upcast to its aligned\n      *  reducer base class. The following conversion operators provide\n@@ -923,32 +946,32 @@ class reducer_list_append :\n     }\n     operator const reducer< op_list_append<Type, Allocator, false> >& () const\n     {\n-        return *reinterpret_cast< \n-            const reducer< op_list_append<Type, Allocator, false> >* \n+        return *reinterpret_cast<\n+            const reducer< op_list_append<Type, Allocator, false> >*\n             >(this);\n     }\n     //@}\n-    \n+\n };\n \n \n-/** Deprecated list prepend reducer wrapper class.\n+/** Deprecated list-prepend reducer wrapper class.\n  *\n- *  reducer_list_prepend is the same as \n+ *  reducer_list_prepend is the same as\n  *  @ref reducer<@ref op_list_prepend>, except that reducer_list_prepend is a\n  *  proxy for the contained view, so that accumulator variable update operations\n  *  can be applied directly to the reducer. For example, an element is prepended\n  *  to a `reducer<op_list_prepend>` with `r->push_back(a)`, but an element is\n  *  prepended to a `reducer_list_prepend` with `r.push_back(a)`.\n  *\n  *  @deprecated Users are strongly encouraged to use `reducer<monoid>`\n- *              reducers rather than the old wrappers like reducer_list_prepend. \n+ *              reducers rather than the old wrappers like reducer_list_prepend.\n  *              The `reducer<monoid>` reducers show the reducer/monoid/view\n  *              architecture more clearly, are more consistent in their\n  *              implementation, and present a simpler model for new\n  *              user-implemented reducers.\n  *\n- *  @note   Implicit conversions are provided between `%reducer_list_prepend` \n+ *  @note   Implicit conversions are provided between `%reducer_list_prepend`\n  *          and `reducer<%op_list_prepend>`. This allows incremental code\n  *          conversion: old code that used `%reducer_list_prepend` can pass a\n  *          `%reducer_list_prepend` to a converted function that now expects a\n@@ -963,22 +986,22 @@ class reducer_list_append :\n  *  @see ReducersList\n  */\n template <class Type, class Allocator = std::allocator<Type> >\n-class reducer_list_prepend : \n+class reducer_list_prepend :\n     public reducer<op_list_prepend<Type, Allocator, true> >\n {\n     typedef reducer<op_list_prepend<Type, Allocator, true> > base;\n     using base::view;\n public:\n \n-    /** The reducer\u2019s list type.\n+    /** The reducer's list type.\n      */\n     typedef typename base::value_type list_type;\n \n-    /** The list\u2019s element type.\n+    /** The list's element type.\n      */\n     typedef Type list_value_type;\n \n-    /** The reducer\u2019s primitive component type.\n+    /** The reducer's primitive component type.\n      */\n     typedef Type basic_value_type;\n \n@@ -989,45 +1012,45 @@ class reducer_list_prepend :\n     /** @name Constructors\n      */\n     //@{\n-    \n-    /** Construct a reducer with an empty list.\n+\n+    /** Constructs a reducer with an empty list.\n      */\n     reducer_list_prepend() {}\n \n-    /** Construct a reducer with a specified initial list value.\n+    /** Constructs a reducer with a specified initial list value.\n      */\n-    reducer_list_prepend(const std::list<Type, Allocator> &initial_value) : \n+    reducer_list_prepend(const std::list<Type, Allocator> &initial_value) :\n         base(initial_value) {}\n-        \n+\n     //@}\n \n     /** @name Forwarded functions\n      *  @details Functions that update the contained accumulator variable are\n-     *  simply forwarded to the contained @ref op_and_view. \n+     *  simply forwarded to the contained @ref op_and_view.\n      */\n     //@{\n \n     /// @copydoc op_list_prepend_view::push_front(const Type&)\n     void push_front(const Type& element) { view().push_front(element); }\n-    \n+\n     //@}\n \n-    /** Allow mutable access to the list within the current view.\n-     * \n+    /** Allows mutable access to the list within the current view.\n+     *\n      *  @warning    If this method is called before the parallel calculation is\n      *              complete, the list returned by this method will be a partial\n      *              result.\n-     * \n+     *\n      *  @returns    A mutable reference to the list within the current view.\n      */\n     list_type &get_reference() { return view().view_get_reference(); }\n \n-    /** Allow read-only access to the list within the current view.\n-     * \n+    /** Allows read-only access to the list within the current view.\n+     *\n      *  @warning    If this method is called before the parallel calculation is\n      *              complete, the list returned by this method will be a partial\n      *              result.\n-     * \n+     *\n      *  @returns    A const reference to the list within the current view.\n      */\n     list_type const &get_reference() const { return view().view_get_reference(); }\n@@ -1055,12 +1078,12 @@ class reducer_list_prepend :\n     reducer_list_prepend*       operator->()       { return this; }\n     reducer_list_prepend const* operator->() const { return this; }\n     //@}\n-    \n+\n     /** @name Upcast\n-     *  @details In Cilk library 0.9, reducers were always cache-aligned. In\n-     *  library  1.0, reducer cache alignment is optional. By default, reducers\n-     *  are unaligned (i.e., just naturally aligned), but legacy wrappers\n-     *  inherit from cache-aligned reducers for binary compatibility.\n+     *  @details In Intel Cilk Plus library 0.9, reducers were always cache-aligned.\n+     *  In library 1.0, reducer cache alignment is optional. By default,\n+     *  reducers are unaligned (i.e., just naturally aligned), but legacy\n+     *  wrappers inherit from cache-aligned reducers for binary compatibility.\n      *\n      *  This means that a wrapper will automatically be upcast to its aligned\n      *  reducer base class. The following conversion operators provide\n@@ -1070,17 +1093,17 @@ class reducer_list_prepend :\n     operator reducer< op_list_prepend<Type, Allocator, false> >& ()\n     {\n         return *reinterpret_cast<\n-            reducer< op_list_prepend<Type, Allocator, false> >* \n+            reducer< op_list_prepend<Type, Allocator, false> >*\n             >(this);\n     }\n     operator const reducer< op_list_prepend<Type, Allocator, false> >& () const\n     {\n         return *reinterpret_cast<\n-            const reducer< op_list_prepend<Type, Allocator, false> >* \n+            const reducer< op_list_prepend<Type, Allocator, false> >*\n             >(this);\n     }\n     //@}\n-    \n+\n };\n \n /// @cond internal\n@@ -1105,7 +1128,7 @@ struct legacy_reducer_downcast<reducer<op_list_append<Type, Allocator, Align> >\n  *\n  *  This specialization of the @ref legacy_reducer_downcast template class\n  *  defined in reducer.h causes the\n- *  `reducer< op_list_prepend<Type, Allocator> >` class to have an \n+ *  `reducer< op_list_prepend<Type, Allocator> >` class to have an\n  *  `operator reducer_list_prepend<Type, Allocator>& ()` conversion operator\n  *  that statically downcasts the `reducer<op_list_prepend>` to the\n  *  corresponding `reducer_list_prepend` type. (The reverse conversion, from"}, {"sha": "3982cb11c2ac474b87d4866c98aaa62298c7e671", "filename": "libcilkrts/include/cilk/reducer_max.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Freducer_max.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Freducer_max.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Fcilk%2Freducer_max.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,10 +1,8 @@\n /*  reducer_max.h                  -*- C++ -*-\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -19,7 +17,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -32,6 +29,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  */\n \n /** @file reducer_max.h"}, {"sha": "912979d7229ee1bf7b7ff0ce1e977a4d51e0a059", "filename": "libcilkrts/include/cilk/reducer_min.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Freducer_min.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Freducer_min.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Fcilk%2Freducer_min.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,10 +1,8 @@\n /*  reducer_min.h                  -*- C++ -*-\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -19,7 +17,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -32,6 +29,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  */\n \n /** @file reducer_min.h"}, {"sha": "641aa8239013a4f0a02f916db0b9f06c0c345c6d", "filename": "libcilkrts/include/cilk/reducer_min_max.h", "status": "modified", "additions": 847, "deletions": 712, "changes": 1559, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Freducer_min_max.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Freducer_min_max.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Fcilk%2Freducer_min_max.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d"}, {"sha": "46d4b6e9b57b9d6a486f3d7481fc5cc4f43e1122", "filename": "libcilkrts/include/cilk/reducer_opadd.h", "status": "modified", "additions": 119, "deletions": 108, "changes": 227, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Freducer_opadd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Freducer_opadd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Fcilk%2Freducer_opadd.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,10 +1,8 @@\n /*  reducer_opadd.h                  -*- C++ -*-\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -19,7 +17,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -32,6 +29,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  */\n \n /** @file reducer_opadd.h\n@@ -55,9 +66,9 @@\n  *\n  *  @ingroup Reducers\n  *\n- *  You should be familiar with @ref pagereducers \"Cilk reducers\", described in\n- *  file `reducers.md`, and particularly with @ref reducers_using, before trying\n- *  to use the information in this file.\n+ *  You should be familiar with @ref pagereducers \"Intel(R) Cilk(TM) Plus reducers\",\n+ *  described in file `reducers.md`, and particularly with @ref reducers_using,\n+ *  before trying to use the information in this file.\n  *\n  *  @section redopadd_usage Usage Example\n  *\n@@ -78,11 +89,11 @@\n  *  @subsection redopadd_monoid_operator Operator\n  *\n  *  The operator of an addition reducer is the addition operator, defined by\n- *  the \u201c`+`\u201d binary operator on `Type`.\n+ *  the \"`+`\" binary operator on `Type`.\n  *\n  *  @subsection redopadd_monoid_identity Identity\n  *\n- *  The identity value of the reducer is the numeric value \u201c`0`\u201d. This is\n+ *  The identity value of the reducer is the numeric value \"`0`\". This is\n  *  expected to be the value of the default constructor `Type()`.\n  *\n  *  @section redopadd_operations Operations\n@@ -130,22 +141,22 @@\n  *  @section redopadd_floating_point Issues with Floating-Point Types\n  *\n  *  Because of precision and round-off issues, floating-point addition is not\n- *  really associative. For example, `(1e30 + -1e30) + 1 == 1`, but \n+ *  really associative. For example, `(1e30 + -1e30) + 1 == 1`, but\n  *  `1e30 + (-1e30 + 1) == 0`.\n  *\n- *  In many cases, this won\u2019t matter, but computations which have been\n+ *  In many cases, this won't matter, but computations which have been\n  *  carefully ordered to control round-off errors may not deal well with\n  *  being reassociated. In general, you should be sure to understand the\n- *  floating-point behavior of your program before doing any transformation \n- *  that will reassociate its computations. \n+ *  floating-point behavior of your program before doing any transformation\n+ *  that will reassociate its computations.\n  *\n  *  @section redopadd_types Type and Operator Requirements\n  *\n  *  `Type` must be `Copy Constructible`, `Default Constructible`, and\n  *  `Assignable`.\n  *\n- *  The operator \u201c`+=`\u201d must be defined on `Type`, with `x += a` having the\n- *  same meaning as `x = x + a`. In addition, if the code uses the \u201c`-=`\u201d,\n+ *  The operator \"`+=`\" must be defined on `Type`, with `x += a` having the\n+ *  same meaning as `x = x + a`. In addition, if the code uses the \"`-=`\",\n  *  pre-increment, post-increment, pre-decrement, or post-decrement operators,\n  *  then the corresponding operators must be defined on `Type`.\n  *\n@@ -174,18 +185,18 @@ namespace cilk {\n \n /** The addition reducer view class.\n  *\n- *  This is the view class for reducers created with \n- *  `cilk::reducer< cilk::op_add<Type> >`. It holds the accumulator variable \n- *  for the reduction, and allows only addition and subtraction operations to \n+ *  This is the view class for reducers created with\n+ *  `cilk::reducer< cilk::op_add<Type> >`. It holds the accumulator variable\n+ *  for the reduction, and allows only addition and subtraction operations to\n  *  be performed on it.\n  *\n- *  @note   The reducer \u201cdereference\u201d operation (`reducer::operator *()`) \n- *          yields a reference to the view. Thus, for example, the view class\u2019s\n+ *  @note   The reducer \"dereference\" operation (`reducer::operator *()`)\n+ *          yields a reference to the view. Thus, for example, the view class's\n  *          `+=` operation would be used in an expression like `*r += a`, where\n  *          `r` is an op_add reducer variable.\n  *\n- *  @tparam Type    The type of the contained accumulator variable. This will \n- *                  be the value type of a monoid_with_view that is \n+ *  @tparam Type    The type of the contained accumulator variable. This will\n+ *                  be the value type of a monoid_with_view that is\n  *                  instantiated with this view.\n  *\n  *  @see ReducersAdd\n@@ -197,19 +208,19 @@ template <typename Type>\n class op_add_view : public scalar_view<Type>\n {\n     typedef scalar_view<Type> base;\n-    \n+\n public:\n-    /** Class to represent the right-hand side of \n+    /** Class to represent the right-hand side of\n      *  `*reducer = *reducer \u00b1 value`.\n      *\n      *  The only assignment operator for the op_add_view class takes an\n      *  rhs_proxy as its operand. This results in the syntactic restriction\n      *  that the only expressions that can be assigned to an op_add_view are\n-     *  ones which generate an rhs_proxy \u2014 that is, expressions of the form\n+     *  ones which generate an rhs_proxy - that is, expressions of the form\n      *  `op_add_view \u00b1 value ... \u00b1 value`.\n      *\n      *  @warning\n-     *  The lhs and rhs views in such an assignment must be the same; \n+     *  The lhs and rhs views in such an assignment must be the same;\n      *  otherwise, the behavior will be undefined. (I.e., `v1 = v1 + x` is\n      *  legal; `v1 = v2 + x` is illegal.) This condition will be checked with a\n      *  runtime assertion when compiled in debug mode.\n@@ -222,7 +233,7 @@ class op_add_view : public scalar_view<Type>\n         const op_add_view* m_view;\n         Type               m_value;\n \n-        // Constructor is invoked only from op_add_view::operator+() and \n+        // Constructor is invoked only from op_add_view::operator+() and\n         // op_add_view::operator-().\n         //\n         rhs_proxy(const op_add_view* view, const Type& value) :\n@@ -232,13 +243,13 @@ class op_add_view : public scalar_view<Type>\n         rhs_proxy();                            // Disable default constructor\n \n     public:\n-        //@{\n-        /** Add or subtract an additional rhs value. If `v` is an op_add_view\n-         *  and `a1` is a value, then the expression `v + a1` invokes the view\u2019s\n-         *  `operator+()` to create an rhs_proxy for `(v, a1)`; then \n-         *  `v + a1 + a2` invokes the rhs_proxy\u2019s `operator+()` to create a new\n+        ///@{\n+        /** Adds or subtracts an additional rhs value. If `v` is an op_add_view\n+         *  and `a1` is a value, then the expression `v + a1` invokes the view's\n+         *  `operator+()` to create an rhs_proxy for `(v, a1)`; then\n+         *  `v + a1 + a2` invokes the rhs_proxy's `operator+()` to create a new\n          *  rhs_proxy for `(v, a1+a2)`. This allows the right-hand side of an\n-         *  assignment to be not just `view \u00b1 value`, but \n+         *  assignment to be not just `view \u00b1 value`, but\n          *  `view \u00b1 value \u00b1 value ... \u00b1 value`. The effect is that\n          *\n          *      v = v \u00b1 a1 \u00b1 a2 ... \u00b1 an;\n@@ -249,11 +260,11 @@ class op_add_view : public scalar_view<Type>\n          */\n         rhs_proxy& operator+(const Type& x) { m_value += x; return *this; }\n         rhs_proxy& operator-(const Type& x) { m_value -= x; return *this; }\n-        //@}\n+        ///@}\n     };\n \n-    \n-    /** Default/identity constructor. This constructor initializes the \n+\n+    /** Default/identity constructor. This constructor initializes the\n      *  contained value to `Type()`, which is expected to be the identity value\n      *  for addition on `Type`.\n      */\n@@ -262,8 +273,8 @@ class op_add_view : public scalar_view<Type>\n     /** Construct with a specified initial value.\n      */\n     explicit op_add_view(const Type& v) : base(v) {}\n-    \n-    /** Reduction operation.\n+\n+    /** Reduces the views of two strands.\n      *\n      *  This function is invoked by the @ref op_add monoid to combine the views\n      *  of two strands when the right strand merges with the left one. It adds\n@@ -284,21 +295,21 @@ class op_add_view : public scalar_view<Type>\n      *  These functions support the various syntaxes for incrementing or\n      *  decrementing the accumulator variable contained in the view.\n      */\n-    //@{\n+    ///@{\n \n-    /** Increment the accumulator variable by @a x.\n+    /** Increments the accumulator variable by @a x.\n      */\n     op_add_view& operator+=(const Type& x) { this->m_value += x; return *this; }\n \n-    /** Decrement the accumulator variable by @a x.\n+    /** Decrements the accumulator variable by @a x.\n      */\n     op_add_view& operator-=(const Type& x) { this->m_value -= x; return *this; }\n \n     /** Pre-increment.\n      */\n     op_add_view& operator++() { ++this->m_value; return *this; }\n \n-    /** Post-increment.\n+    /** Post-increments.\n      *\n      *  @note   Conventionally, post-increment operators return the old value\n      *          of the incremented variable. However, reducer views do not\n@@ -307,11 +318,11 @@ class op_add_view : public scalar_view<Type>\n      */\n     void operator++(int) { this->m_value++; }\n \n-    /** Pre-decrement.\n+    /** Pre-decrements.\n      */\n     op_add_view& operator--() { --this->m_value; return *this; }\n \n-    /** Post-decrement.\n+    /** Post-decrements.\n      *\n      *  @note   Conventionally, post-decrement operators return the old value\n      *          of the decremented variable. However, reducer views do not\n@@ -320,19 +331,19 @@ class op_add_view : public scalar_view<Type>\n      */\n     void operator--(int) { this->m_value--; }\n \n-    /** Create an object representing `*this + x`.\n+    /** Creates an object representing `*this + x`.\n      *\n      *  @see rhs_proxy\n      */\n     rhs_proxy operator+(const Type& x) const { return rhs_proxy(this, x); }\n \n-    /** Create an object representing `*this - x`.\n+    /** Creates an object representing `*this - x`.\n      *\n      *  @see rhs_proxy\n      */\n     rhs_proxy operator-(const Type& x) const { return rhs_proxy(this, -x); }\n \n-    /** Assign the result of a `view \u00b1 value` expression to the view. Note that\n+    /** Assigns the result of a `view \u00b1 value` expression to the view. Note that\n      *  this is the only assignment operator for this class.\n      *\n      *  @see rhs_proxy\n@@ -342,12 +353,12 @@ class op_add_view : public scalar_view<Type>\n         this->m_value += rhs.m_value;\n         return *this;\n     }\n-    \n-    //@}\n+\n+    ///@}\n };\n \n \n-/** Monoid class for addition reductions. Instantiate the cilk::reducer \n+/** Monoid class for addition reductions. Instantiate the cilk::reducer\n  *  template class with an op_add monoid to create an addition reducer class.\n  *  For example, to compute\n  *  the sum of a set of `int` values:\n@@ -356,10 +367,10 @@ class op_add_view : public scalar_view<Type>\n  *\n  *  @tparam Type    The reducer value type.\n  *  @tparam Align   If `false` (the default), reducers instantiated on this\n- *                  monoid will be naturally aligned (the Cilk library 1.0\n+ *                  monoid will be naturally aligned (the Intel Cilk Plus library 1.0\n  *                  behavior). If `true`, reducers instantiated on this monoid\n- *                  will be cache-aligned for binary compatibility with \n- *                  reducers in Cilk library version 0.9.\n+ *                  will be cache-aligned for binary compatibility with\n+ *                  reducers in Intel Cilk Plus library version 0.9.\n  *\n  *  @see ReducersAdd\n  *  @see op_add_view\n@@ -378,13 +389,13 @@ struct op_add : public monoid_with_view<op_add_view<Type>, Align> {};\n  *  value can be added to a `%reducer_opadd` with `r += a`.\n  *\n  *  @deprecated Users are strongly encouraged to use `reducer<monoid>`\n- *              reducers rather than the old wrappers like reducer_opadd. \n+ *              reducers rather than the old wrappers like reducer_opadd.\n  *              The `reducer<monoid>` reducers show the reducer/monoid/view\n  *              architecture more clearly, are more consistent in their\n  *              implementation, and present a simpler model for new\n  *              user-implemented reducers.\n  *\n- *  @note   Implicit conversions are provided between `%reducer_opadd` \n+ *  @note   Implicit conversions are provided between `%reducer_opadd`\n  *          and `reducer<%op_add>`. This allows incremental code\n  *          conversion: old code that used `%reducer_opadd` can pass a\n  *          `%reducer_opadd` to a converted function that now expects a\n@@ -408,8 +419,8 @@ class reducer_opadd : public reducer< op_add<Type, true> >\n   public:\n     /// The view type for the reducer.\n     typedef typename base::view_type        view_type;\n-    \n-    /// The view\u2019s rhs proxy type.\n+\n+    /// The view's rhs proxy type.\n     typedef typename view_type::rhs_proxy   rhs_proxy;\n \n     /// The view type for the reducer.\n@@ -420,8 +431,8 @@ class reducer_opadd : public reducer< op_add<Type, true> >\n \n     /** @name Constructors\n      */\n-    //@{\n-    \n+    ///@{\n+\n     /** Default (identity) constructor.\n      *\n      * Constructs the wrapper with the default initial value of `Type()`.\n@@ -433,56 +444,56 @@ class reducer_opadd : public reducer< op_add<Type, true> >\n      *  Constructs the wrapper with a specified initial value.\n      */\n     explicit reducer_opadd(const Type& initial_value) : base(initial_value) {}\n-    \n-    //@}\n+\n+    ///@}\n \n     /** @name Forwarded functions\n      *  @details Functions that update the contained accumulator variable are\n      *  simply forwarded to the contained @ref op_add_view. */\n-    //@{\n-    \n+    ///@{\n+\n     /// @copydoc op_add_view::operator+=(const Type&)\n     reducer_opadd& operator+=(const Type& x)    { view() += x; return *this; }\n-    \n+\n     /// @copydoc op_add_view::operator-=(const Type&)\n     reducer_opadd& operator-=(const Type& x)    { view() -= x; return *this; }\n-    \n+\n     /// @copydoc op_add_view::operator++()\n     reducer_opadd& operator++()                 { ++view(); return *this; }\n-    \n+\n     /// @copydoc op_add_view::operator++(int)\n     void operator++(int)                        { view()++; }\n-    \n+\n     /// @copydoc op_add_view::operator-\\-()\n     reducer_opadd& operator--()                 { --view(); return *this; }\n-    \n+\n     /// @copydoc op_add_view::operator-\\-(int)\n     void operator--(int)                        { view()--; }\n \n     // The legacy definitions of reducer_opadd::operator+() and\n     // reducer_opadd::operator-() have different behavior and a different\n     // return type than this definition. The legacy version is defined as a\n     // member function, so this new version is defined as a free function to\n-    // give it a different signature, so that they won\u2019t end up sharing a\n+    // give it a different signature, so that they won't end up sharing a\n     // single object file entry.\n \n     /// @copydoc op_add_view::operator+(const Type&) const\n     friend rhs_proxy operator+(const reducer_opadd& r, const Type& x)\n-    { \n-        return r.view() + x; \n+    {\n+        return r.view() + x;\n     }\n     /// @copydoc op_add_view::operator-(const Type&) const\n     friend rhs_proxy operator-(const reducer_opadd& r, const Type& x)\n-    { \n-        return r.view() - x; \n+    {\n+        return r.view() - x;\n     }\n     /// @copydoc op_add_view::operator=(const rhs_proxy&)\n-    reducer_opadd& operator=(const rhs_proxy& temp) \n+    reducer_opadd& operator=(const rhs_proxy& temp)\n     {\n         view() = temp;\n-        return *this; \n+        return *this;\n     }\n-    //@}\n+    ///@}\n \n     /** @name Dereference\n      *  @details Dereferencing a wrapper is a no-op. It simply returns the\n@@ -501,25 +512,25 @@ class reducer_opadd : public reducer< op_add<Type, true> >\n      *                  // operator += is a wrapper member function that\n      *                  // calls the corresponding view function\n      */\n-    //@{\n+    ///@{\n     reducer_opadd&       operator*()       { return *this; }\n     reducer_opadd const& operator*() const { return *this; }\n \n     reducer_opadd*       operator->()       { return this; }\n     reducer_opadd const* operator->() const { return this; }\n-    //@}\n-    \n+    ///@}\n+\n     /** @name Upcast\n-     *  @details In Cilk library 0.9, reducers were always cache-aligned. In\n-     *  library  1.0, reducer cache alignment is optional. By default, reducers\n-     *  are unaligned (i.e., just naturally aligned), but legacy wrappers\n-     *  inherit from cache-aligned reducers for binary compatibility.\n+     *  @details In Intel Cilk Plus library 0.9, reducers were always cache-aligned.\n+     *  In library 1.0, reducer cache alignment is optional. By default,\n+     *  reducers are unaligned (i.e., just naturally aligned), but legacy\n+     *  wrappers inherit from cache-aligned reducers for binary compatibility.\n      *\n      *  This means that a wrapper will automatically be upcast to its aligned\n      *  reducer base class. The following conversion operators provide\n      *  pseudo-upcasts to the corresponding unaligned reducer class.\n      */\n-    //@{\n+    ///@{\n     operator reducer< op_add<Type, false> >& ()\n     {\n         return *reinterpret_cast< reducer< op_add<Type, false> >* >(this);\n@@ -528,15 +539,15 @@ class reducer_opadd : public reducer< op_add<Type, true> >\n     {\n         return *reinterpret_cast< const reducer< op_add<Type, false> >* >(this);\n     }\n-    //@}\n+    ///@}\n };\n \n /// @cond internal\n /** Metafunction specialization for reducer conversion.\n  *\n- *  This specialization of the @ref legacy_reducer_downcast template class \n- *  defined in reducer.h causes the `reducer< op_add<Type> >` class to have an \n- *  `operator reducer_opadd<Type>& ()` conversion operator that statically \n+ *  This specialization of the @ref legacy_reducer_downcast template class\n+ *  defined in reducer.h causes the `reducer< op_add<Type> >` class to have an\n+ *  `operator reducer_opadd<Type>& ()` conversion operator that statically\n  *  downcasts the `reducer<op_add>` to the corresponding `reducer_opadd` type.\n  *  (The reverse conversion, from `reducer_opadd` to `reducer<op_add>`, is just\n  *  an upcast, which is provided for free by the language.)\n@@ -557,20 +568,20 @@ struct legacy_reducer_downcast<reducer<op_add<Type, Align> > >\n \n /** @ingroup ReducersAdd\n  */\n-//@{\n+///@{\n \n /** @name C Language Reducer Macros\n  *\n- *  These macros are used to declare and work with numeric op_add reducers in \n+ *  These macros are used to declare and work with numeric op_add reducers in\n  *  C code.\n  *\n  *  @see @ref page_reducers_in_c\n  */\n- //@{\n- \n+ ///@{\n+\n __CILKRTS_BEGIN_EXTERN_C\n \n-/** Opadd reducer type name.\n+/** Declares opadd reducer type name.\n  *\n  *  This macro expands into the identifier which is the name of the op_add\n  *  reducer type for a specified numeric type.\n@@ -584,7 +595,7 @@ __CILKRTS_BEGIN_EXTERN_C\n #define CILK_C_REDUCER_OPADD_TYPE(tn)                                         \\\n     __CILKRTS_MKIDENT(cilk_c_reducer_opadd_,tn)\n \n-/** Declare an op_add reducer object.\n+/** Declares an op_add reducer object.\n  *\n  *  This macro expands into a declaration of an op_add reducer object for a\n  *  specified numeric type. For example:\n@@ -609,29 +620,29 @@ __CILKRTS_BEGIN_EXTERN_C\n \n /// @cond internal\n \n-/** Declare the op_add reducer functions for a numeric type.\n+/** Declares the op_add reducer functions for a numeric type.\n  *\n  *  This macro expands into external function declarations for functions which\n  *  implement the reducer functionality for the op_add reducer type for a\n  *  specified numeric type.\n  *\n  *  @param  t   The value type of the reducer.\n- *  @param  tn  The value \u201ctype name\u201d identifier, used to construct the reducer\n+ *  @param  tn  The value \"type name\" identifier, used to construct the reducer\n  *              type name, function names, etc.\n  */\n #define CILK_C_REDUCER_OPADD_DECLARATION(t,tn)                             \\\n     typedef CILK_C_DECLARE_REDUCER(t) CILK_C_REDUCER_OPADD_TYPE(tn);       \\\n     __CILKRTS_DECLARE_REDUCER_REDUCE(cilk_c_reducer_opadd,tn,l,r);         \\\n     __CILKRTS_DECLARE_REDUCER_IDENTITY(cilk_c_reducer_opadd,tn);\n- \n-/** Define the op_add reducer functions for a numeric type.\n+\n+/** Defines the op_add reducer functions for a numeric type.\n  *\n  *  This macro expands into function definitions for functions which implement\n  *  the reducer functionality for the op_add reducer type for a specified\n  *  numeric type.\n  *\n  *  @param  t   The value type of the reducer.\n- *  @param  tn  The value \u201ctype name\u201d identifier, used to construct the reducer\n+ *  @param  tn  The value \"type name\" identifier, used to construct the reducer\n  *              type name, function names, etc.\n  */\n #define CILK_C_REDUCER_OPADD_DEFINITION(t,tn)                              \\\n@@ -640,13 +651,13 @@ __CILKRTS_BEGIN_EXTERN_C\n         { *(t*)l += *(t*)r; }                                              \\\n     __CILKRTS_DECLARE_REDUCER_IDENTITY(cilk_c_reducer_opadd,tn)            \\\n         { *(t*)v = 0; }\n- \n-//@{\n-/** @def CILK_C_REDUCER_OPADD_INSTANCE \n- *  @brief Declare or define implementation functions for a reducer type.\n+\n+///@{\n+/** @def CILK_C_REDUCER_OPADD_INSTANCE\n+ *  @brief Declares or defines implementation functions for a reducer type.\n  *\n  *  In the runtime source file c_reducers.c, the macro `CILK_C_DEFINE_REDUCERS`\n- *  will be defined, and this macro will generate reducer implementation \n+ *  will be defined, and this macro will generate reducer implementation\n  *  functions. Everywhere else, `CILK_C_DEFINE_REDUCERS` will be undefined,\n  *  and this macro will expand into external declarations for the functions.\n  */\n@@ -657,9 +668,9 @@ __CILKRTS_BEGIN_EXTERN_C\n #   define CILK_C_REDUCER_OPADD_INSTANCE(t,tn)  \\\n         CILK_C_REDUCER_OPADD_DECLARATION(t,tn)\n #endif\n-//@}\n+///@}\n \n-/*  Declare or define an instance of the reducer type and its functions for each \n+/*  Declares or defines an instance of the reducer type and its functions for each\n  *  numeric type.\n  */\n CILK_C_REDUCER_OPADD_INSTANCE(char,                 char)\n@@ -683,8 +694,8 @@ CILK_C_REDUCER_OPADD_INSTANCE(long double,          longdouble)\n \n __CILKRTS_END_EXTERN_C\n \n-//@}\n+///@}\n \n-//@}\n+///@}\n \n #endif /*  REDUCER_OPADD_H_INCLUDED */"}, {"sha": "44d537d4f36911a4de63ea6f6cd00081df7c72ad", "filename": "libcilkrts/include/cilk/reducer_opand.h", "status": "modified", "additions": 113, "deletions": 103, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Freducer_opand.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Freducer_opand.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Fcilk%2Freducer_opand.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,10 +1,8 @@\n /*  reducer_opand.h                  -*- C++ -*-\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -19,7 +17,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -32,11 +29,25 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  */\n \n /** @file reducer_opand.h\n  *\n- *  @brief Defines classes for doing parallel bitwise and reductions.\n+ *  @brief Defines classes for doing parallel bitwise AND reductions.\n  *\n  *  @ingroup ReducersAnd\n  *\n@@ -48,16 +59,16 @@\n \n #include <cilk/reducer.h>\n \n-/** @defgroup ReducersAnd Bitwise And Reducers\n+/** @defgroup ReducersAnd Bitwise AND Reducers\n  *\n- *  Bitwise and reducers allow the computation of the bitwise and of a set of\n+ *  Bitwise AND reducers allow the computation of the bitwise AND of a set of\n  *  values in parallel.\n  *\n  *  @ingroup Reducers\n  *\n- *  You should be familiar with @ref pagereducers \"Cilk reducers\", described in\n- *  file `reducers.md`, and particularly with @ref reducers_using, before trying\n- *  to use the information in this file.\n+ *  You should be familiar with @ref pagereducers \"Intel(R) Cilk(TM) Plus reducers\",\n+ *  described in file `reducers.md`, and particularly with @ref reducers_using,\n+ *  before trying to use the information in this file.\n  *\n  *  @section redopand_usage Usage Example\n  *\n@@ -72,19 +83,18 @@\n  *\n  *  @subsection redopand_monoid_values Value Set\n  *\n- *  The value set of a bitwise and reducer is the set of values of `Type`, \n+ *  The value set of a bitwise AND reducer is the set of values of `Type`,\n  *  which is expected to be a builtin integer type which has a representation\n  *  as a sequence of bits (or something like it, such as `bool` or\n  *  `std::bitset`).\n  *\n  *  @subsection redopand_monoid_operator Operator\n  *\n- *  The operator of a bitwise and reducer is the bitwise and operator, defined\n- *  by the \u201c`&`\u201d binary operator on `Type`.\n+ *  The bitwise AND operator is defined by the \"`&`\" binary operator on `Type`.\n  *\n  *  @subsection redopand_monoid_identity Identity\n  *\n- *  The identity value of the reducer is the value whose representation \n+ *  The identity value of the reducer is the value whose representation\n  *  contains all 1-bits. This is expected to be the value of the expression\n  *  `~Type()` (i.e., the bitwise negation operator applied to the default value\n  *  of the value type).\n@@ -106,7 +116,7 @@\n  *\n  *  @subsection redopand_initial Initial Values\n  *\n- *  If a bitwise and reducer is constructed without an explicit initial value,\n+ *  If a bitwise AND reducer is constructed without an explicit initial value,\n  *  then its initial value will be its identity value, as long as `Type`\n  *  satisfies the requirements of @ref redopand_types.\n  *\n@@ -121,17 +131,17 @@\n  *  `Type` must be `Copy Constructible`, `Default Constructible`, and\n  *  `Assignable`.\n  *\n- *  The operator \u201c`&=`\u201d must be defined on `Type`, with `x &= a` having the \n+ *  The operator \"`&=`\" must be defined on `Type`, with `x &= a` having the\n  *  same meaning as `x = x & a`.\n  *\n  *  The expression `~ Type()` must be a valid expression which yields the\n  *  identity value (the value of `Type` whose representation consists of all\n  *  1-bits).\n  *\n- *  @section redopand_in_c Bitwise And Reducers in C\n+ *  @section redopand_in_c Bitwise AND Reducers in C\n  *\n  *  The @ref CILK_C_REDUCER_OPAND and @ref CILK_C_REDUCER_OPAND_TYPE macros can\n- *  be used to do bitwise and reductions in C. For example:\n+ *  be used to do bitwise AND reductions in C. For example:\n  *\n  *      CILK_C_REDUCER_OPAND(r, uint, ~0);\n  *      CILK_C_REGISTER_REDUCER(r);\n@@ -148,14 +158,14 @@\n \n namespace cilk {\n \n-/** The bitwise and reducer view class.\n+/** The bitwise AND reducer view class.\n  *\n- *  This is the view class for reducers created with \n- *  `cilk::reducer< cilk::op_and<Type> >`. It holds the accumulator variable \n- *  for the reduction, and allows only `and` operations to be performed on it.\n+ *  This is the view class for reducers created with\n+ *  `cilk::reducer< cilk::op_and<Type> >`. It holds the accumulator variable\n+ *  for the reduction, and allows only AND operations to be performed on it.\n  *\n- *  @note   The reducer \u201cdereference\u201d operation (`reducer::operator *()`)\n- *          yields a reference to the view. Thus, for example, the view class\u2019s\n+ *  @note   The reducer \"dereference\" operation (`reducer::operator *()`)\n+ *          yields a reference to the view. Thus, for example, the view class's\n  *          `&=` operation would be used in an expression like `*r &= a`, where\n  *          `r` is an opmod reducer variable.\n  *\n@@ -172,18 +182,18 @@ template <typename Type>\n class op_and_view : public scalar_view<Type>\n {\n     typedef scalar_view<Type> base;\n-    \n+\n public:\n     /** Class to represent the right-hand side of `*reducer = *reducer & value`.\n      *\n      *  The only assignment operator for the op_and_view class takes an\n-     *  rhs_proxy as its operand. This results in the syntactic restriction \n+     *  rhs_proxy as its operand. This results in the syntactic restriction\n      *  that the only expressions that can be assigned to an op_and_view are\n-     *  ones which generate an rhs_proxy \u2014 that is, expressions of the form\n+     *  ones which generate an rhs_proxy - that is, expressions of the form\n      *  `op_and_view & value ... & value`.\n      *\n      *  @warning\n-     *  The lhs and rhs views in such an assignment must be the same; \n+     *  The lhs and rhs views in such an assignment must be the same;\n      *  otherwise, the behavior will be undefined. (I.e., `v1 = v1 & x` is\n      *  legal; `v1 = v2 & x` is illegal.)  This condition will be checked with\n      *  a runtime assertion when compiled in debug mode.\n@@ -205,12 +215,12 @@ class op_and_view : public scalar_view<Type>\n         rhs_proxy();                            // Disable default constructor\n \n     public:\n-        /** Bitwise and with an additional rhs value. If `v` is an op_and_view\n+        /** Bitwise AND with an additional `rhs` value. If `v` is an op_and_view\n          *  and `a1` is a value, then the expression `v & a1` invokes the\n-         *  view\u2019s `operator&()` to create an rhs_proxy for `(v, a1)`; then\n-         *  `v & a1 & a2` invokes the rhs_proxy\u2019s `operator&()` to create a new\n+         *  view's `operator&()` to create an rhs_proxy for `(v, a1)`; then\n+         *  `v & a1 & a2` invokes the rhs_proxy's `operator&()` to create a new\n          *  rhs_proxy for `(v, a1&a2)`. This allows the right-hand side of an\n-         *  assignment to be not just `view & value`, but \n+         *  assignment to be not just `view & value`, but\n          *  `view & value & value ... & value`. The effect is that\n          *\n          *      v = v & a1 & a2 ... & an;\n@@ -231,13 +241,13 @@ class op_and_view : public scalar_view<Type>\n     /** Construct with a specified initial value.\n      */\n     explicit op_and_view(const Type& v) : base(v) {}\n-    \n-    \n-    /** Reduction operation.\n+\n+\n+    /** Reduces the views of two strands.\n      *\n      *  This function is invoked by the @ref op_and monoid to combine the views\n      *  of two strands when the right strand merges with the left one. It\n-     *  \u201cands\u201d the value contained in the left-strand view with the value\n+     *  \"ANDs\" the value contained in the left-strand view with the value\n      *  contained in the right-strand view, and leaves the value in the\n      *  right-strand view undefined.\n      *\n@@ -248,25 +258,25 @@ class op_and_view : public scalar_view<Type>\n      *          reduce operation.\n      */\n     void reduce(op_and_view* right) { this->m_value &= right->m_value; }\n-    \n+\n     /** @name Accumulator variable updates.\n      *\n-     *  These functions support the various syntaxes for \u201canding\u201d the\n+     *  These functions support the various syntaxes for \"ANDing\" the\n      *  accumulator variable contained in the view with some value.\n      */\n-    //@{\n+    ///@{\n \n-    /** And the accumulator variable with @a x.\n+    /** Performs AND between the accumulator variable and @a x.\n      */\n     op_and_view& operator&=(const Type& x) { this->m_value &= x; return *this; }\n \n-    /** Create an object representing `*this & x`.\n+    /** Creates an object representing `*this & x`.\n      *\n      *  @see rhs_proxy\n      */\n     rhs_proxy operator&(const Type& x) const { return rhs_proxy(this, x); }\n \n-    /** Assign the result of a `view & value` expression to the view. Note that\n+    /** Assigns the result of a `view & value` expression to the view. Note that\n      *  this is the only assignment operator for this class.\n      *\n      *  @see rhs_proxy\n@@ -276,23 +286,23 @@ class op_and_view : public scalar_view<Type>\n         this->m_value &= rhs.m_value;\n         return *this;\n     }\n-    \n-    //@}\n+\n+    ///@}\n };\n \n-/** Monoid class for bitwise and reductions. Instantiate the cilk::reducer\n- *  template class with an op_and monoid to create a bitwise and reducer\n- *  class. For example, to compute the bitwise and of a set of `unsigned long`\n+/** Monoid class for bitwise AND reductions. Instantiate the cilk::reducer\n+ *  template class with an op_and monoid to create a bitwise AND reducer\n+ *  class. For example, to compute the bitwise AND of a set of `unsigned long`\n  *  values:\n  *\n  *      cilk::reducer< cilk::op_and<unsigned long> > r;\n  *\n  *  @tparam Type    The reducer value type.\n  *  @tparam Align   If `false` (the default), reducers instantiated on this\n- *                  monoid will be naturally aligned (the Cilk library 1.0\n+ *                  monoid will be naturally aligned (the Intel Cilk Plus library 1.0\n  *                  behavior). If `true`, reducers instantiated on this monoid\n- *                  will be cache-aligned for binary compatibility with \n- *                  reducers in Cilk library version 0.9.\n+ *                  will be cache-aligned for binary compatibility with\n+ *                  reducers in Intel Cilk Plus library version 0.9.\n  *\n  *  @see ReducersAnd\n  *  @see op_and_view\n@@ -302,22 +312,22 @@ class op_and_view : public scalar_view<Type>\n template <typename Type, bool Align = false>\n struct op_and : public monoid_with_view<op_and_view<Type>, Align> {};\n \n-/** Deprecated bitwise and reducer class.\n+/** Deprecated bitwise AND reducer class.\n  *\n  *  reducer_opand is the same as @ref reducer<@ref op_and>, except that\n  *  reducer_opand is a proxy for the contained view, so that accumulator\n  *  variable update operations can be applied directly to the reducer. For\n- *  example, a value is anded with  a `reducer<%op_and>` with `*r &= a`, but a\n- *  value can be anded with a `%reducer_opand` with `r &= a`.\n+ *  example, a value is \"ANDed\" with  a `reducer<%op_and>` with `*r &= a`, but a\n+ *  value can be \"ANDed\" with a `%reducer_opand` with `r &= a`.\n  *\n  *  @deprecated Users are strongly encouraged to use `reducer<monoid>`\n- *              reducers rather than the old wrappers like reducer_opand. \n+ *              reducers rather than the old wrappers like reducer_opand.\n  *              The `reducer<monoid>` reducers show the reducer/monoid/view\n  *              architecture more clearly, are more consistent in their\n  *              implementation, and present a simpler model for new\n  *              user-implemented reducers.\n  *\n- *  @note   Implicit conversions are provided between `%reducer_opand` \n+ *  @note   Implicit conversions are provided between `%reducer_opand`\n  *          and `reducer<%op_and>`. This allows incremental code\n  *          conversion: old code that used `%reducer_opand` can pass a\n  *          `%reducer_opand` to a converted function that now expects a\n@@ -341,20 +351,20 @@ class reducer_opand : public reducer< op_and<Type, true> >\n public:\n     /// The view type for the reducer.\n     typedef typename base::view_type        view_type;\n-    \n-    /// The view\u2019s rhs proxy type.\n+\n+    /// The view's rhs proxy type.\n     typedef typename view_type::rhs_proxy   rhs_proxy;\n-    \n+\n     /// The view type for the reducer.\n     typedef view_type                       View;\n \n     /// The monoid type for the reducer.\n     typedef typename base::monoid_type      Monoid;\n-    \n+\n     /** @name Constructors\n      */\n-    //@{\n-    \n+    ///@{\n+\n     /** Default constructor.\n      *\n      *  Constructs the wrapper with the default initial value of `Type()`\n@@ -367,40 +377,40 @@ class reducer_opand : public reducer< op_and<Type, true> >\n      *  Constructs the wrapper with a specified initial value.\n      */\n     explicit reducer_opand(const Type& initial_value) : base(initial_value) {}\n-    \n-    //@}\n+\n+    ///@}\n \n     /** @name Forwarded functions\n      *  @details Functions that update the contained accumulator variable are\n      *  simply forwarded to the contained @ref op_and_view. */\n-    //@{\n+    ///@{\n \n     /// @copydoc op_and_view::operator&=(const Type&)\n     reducer_opand& operator&=(const Type& x)\n     {\n         view() &= x;\n         return *this;\n     }\n-    \n+\n     // The legacy definition of reducer_opand::operator&() has different\n     // behavior and a different return type than this definition. The legacy\n     // version is defined as a member function, so this new version is defined\n-    // as a free function to give it a different signature, so that they won\u2019t \n+    // as a free function to give it a different signature, so that they won't\n     // end up sharing a single object file entry.\n-    \n+\n     /// @copydoc op_and_view::operator&(const Type&) const\n     friend rhs_proxy operator&(const reducer_opand& r, const Type& x)\n-    { \n-        return r.view() & x; \n+    {\n+        return r.view() & x;\n     }\n \n     /// @copydoc op_and_view::operator=(const rhs_proxy&)\n-    reducer_opand& operator=(const rhs_proxy& temp) \n-    { \n+    reducer_opand& operator=(const rhs_proxy& temp)\n+    {\n         view() = temp;\n-        return *this; \n+        return *this;\n     }\n-    //@}\n+    ///@}\n \n     /** @name Dereference\n      *  @details Dereferencing a wrapper is a no-op. It simply returns the\n@@ -419,25 +429,25 @@ class reducer_opand : public reducer< op_and<Type, true> >\n      *                  // operator &= is a wrapper member function that\n      *                  // calls the corresponding view function\n      */\n-    //@{\n+    ///@{\n     reducer_opand&       operator*()       { return *this; }\n     reducer_opand const& operator*() const { return *this; }\n \n     reducer_opand*       operator->()       { return this; }\n     reducer_opand const* operator->() const { return this; }\n-    //@}\n-    \n+    ///@}\n+\n     /** @name Upcast\n-     *  @details In Cilk library 0.9, reducers were always cache-aligned. In\n-     *  library  1.0, reducer cache alignment is optional. By default, reducers\n-     *  are unaligned (i.e., just naturally aligned), but legacy wrappers\n-     *  inherit from cache-aligned reducers for binary compatibility.\n+     *  @details In Intel Cilk Plus library 0.9, reducers were always cache-aligned.\n+     *  In library 1.0, reducer cache alignment is optional. By default,\n+     *  reducers are unaligned (i.e., just naturally aligned), but legacy\n+     *  wrappers inherit from cache-aligned reducers for binary compatibility.\n      *\n      *  This means that a wrapper will automatically be upcast to its aligned\n      *  reducer base class. The following conversion operators provide\n      *  pseudo-upcasts to the corresponding unaligned reducer class.\n      */\n-    //@{\n+    ///@{\n     operator reducer< op_and<Type, false> >& ()\n     {\n         return *reinterpret_cast< reducer< op_and<Type, false> >* >(this);\n@@ -446,14 +456,14 @@ class reducer_opand : public reducer< op_and<Type, true> >\n     {\n         return *reinterpret_cast< const reducer< op_and<Type, false> >* >(this);\n     }\n-    //@}\n+    ///@}\n };\n \n /// @cond internal\n /** Metafunction specialization for reducer conversion.\n  *\n- *  This specialization of the @ref legacy_reducer_downcast template class \n- *  defined in reducer.h causes the `reducer< op_and<Type> >` class to have an \n+ *  This specialization of the @ref legacy_reducer_downcast template class\n+ *  defined in reducer.h causes the `reducer< op_and<Type> >` class to have an\n  *  `operator reducer_opand<Type>& ()` conversion operator that statically\n  *  downcasts the `reducer<op_and>` to the corresponding `reducer_opand` type.\n  *  (The reverse conversion, from `reducer_opand` to `reducer<op_and>`, is just\n@@ -475,21 +485,21 @@ struct legacy_reducer_downcast<reducer<op_and<Type, Align> > >\n \n /** @ingroup ReducersAdd\n  */\n-//@{\n+///@{\n \n /** @name C language reducer macros\n  *\n  *  These macros are used to declare and work with op_and reducers in C code.\n  *\n  *  @see @ref page_reducers_in_c\n  */\n- //@{\n- \n+ ///@{\n+\n __CILKRTS_BEGIN_EXTERN_C\n \n-/** Opand reducer type name.\n+/** Declares `opand` reducer type name.\n  *\n- *  This macro expands into the identifier which is the name of the op_and \n+ *  This macro expands into the identifier which is the name of the op_and\n  *  reducer type for a specified numeric type.\n  *\n  *  @param  tn  The @ref reducers_c_type_names \"numeric type name\" specifying\n@@ -501,7 +511,7 @@ __CILKRTS_BEGIN_EXTERN_C\n #define CILK_C_REDUCER_OPAND_TYPE(tn)                                         \\\n     __CILKRTS_MKIDENT(cilk_c_reducer_opand_,tn)\n \n-/** Declare an op_and reducer object.\n+/** Declares an op_and reducer object.\n  *\n  *  This macro expands into a declaration of an op_and reducer object for a\n  *  specified numeric type. For example:\n@@ -526,29 +536,29 @@ __CILKRTS_BEGIN_EXTERN_C\n \n /// @cond internal\n \n-/** Declare the op_and reducer functions for a numeric type.\n+/** Declares the op_and reducer functions for a numeric type.\n  *\n  *  This macro expands into external function declarations for functions which\n  *  implement the reducer functionality for the op_and reducer type for a\n  *  specified numeric type.\n  *\n  *  @param  t   The value type of the reducer.\n- *  @param  tn  The value \u201ctype name\u201d identifier, used to construct the reducer\n+ *  @param  tn  The value \"type name\" identifier, used to construct the reducer\n  *              type name, function names, etc.\n  */\n #define CILK_C_REDUCER_OPAND_DECLARATION(t,tn)                             \\\n     typedef CILK_C_DECLARE_REDUCER(t) CILK_C_REDUCER_OPAND_TYPE(tn);       \\\n     __CILKRTS_DECLARE_REDUCER_REDUCE(cilk_c_reducer_opand,tn,l,r);         \\\n     __CILKRTS_DECLARE_REDUCER_IDENTITY(cilk_c_reducer_opand,tn);\n- \n-/** Define the op_and reducer functions for a numeric type.\n+\n+/** Defines the op_and reducer functions for a numeric type.\n  *\n  *  This macro expands into function definitions for functions which implement\n  *  the reducer functionality for the op_and reducer type for a specified\n  *  numeric type.\n  *\n  *  @param  t   The value type of the reducer.\n- *  @param  tn  The value \u201ctype name\u201d identifier, used to construct the reducer\n+ *  @param  tn  The value \"type name\" identifier, used to construct the reducer\n  *              type name, function names, etc.\n  */\n #define CILK_C_REDUCER_OPAND_DEFINITION(t,tn)                              \\\n@@ -557,10 +567,10 @@ __CILKRTS_BEGIN_EXTERN_C\n         { *(t*)l &= *(t*)r; }                                              \\\n     __CILKRTS_DECLARE_REDUCER_IDENTITY(cilk_c_reducer_opand,tn)            \\\n         { *(t*)v = ~((t)0); }\n- \n-//@{\n-/** @def CILK_C_REDUCER_OPAND_INSTANCE \n- *  @brief Declare or define implementation functions for a reducer type.\n+\n+///@{\n+/** @def CILK_C_REDUCER_OPAND_INSTANCE\n+ *  @brief Declares or defines implementation functions for a reducer type.\n  *\n  *  In the runtime source file c_reducers.c, the macro `CILK_C_DEFINE_REDUCERS`\n  *  will be defined, and this macro will generate reducer implementation\n@@ -574,9 +584,9 @@ __CILKRTS_BEGIN_EXTERN_C\n #   define CILK_C_REDUCER_OPAND_INSTANCE(t,tn)  \\\n         CILK_C_REDUCER_OPAND_DECLARATION(t,tn)\n #endif\n-//@}\n+///@}\n \n-/*  Declare or define an instance of the reducer type and its functions for\n+/*  Declares or defines an instance of the reducer type and its functions for\n  *  each numeric type.\n  */\n CILK_C_REDUCER_OPAND_INSTANCE(char,                 char)\n@@ -597,8 +607,8 @@ CILK_C_REDUCER_OPAND_INSTANCE(unsigned long long,   ulonglong)\n \n __CILKRTS_END_EXTERN_C\n \n-//@}\n+///@}\n \n-//@}\n+///@}\n \n #endif /*  REDUCER_OPAND_H_INCLUDED */"}, {"sha": "8a3e2d2a2a56858f6054ff8716e021ca7eba3977", "filename": "libcilkrts/include/cilk/reducer_opmul.h", "status": "modified", "additions": 71, "deletions": 60, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Freducer_opmul.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Freducer_opmul.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Fcilk%2Freducer_opmul.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,10 +1,8 @@\n /*  reducer_opmul.h                  -*- C++ -*-\n  *\n- *  @copyright\n- *  Copyright (C) 2012-2013, Intel Corporation\n+ *  Copyright (C) 2012-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -19,7 +17,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -32,6 +29,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  */\n \n /** @file reducer_opmul.h\n@@ -55,9 +66,9 @@\n  *\n  *  @ingroup Reducers\n  *\n- *  You should be familiar with @ref pagereducers \"Cilk reducers\", described in\n- *  file `reducers.md`, and particularly with @ref reducers_using, before trying\n- *  to use the information in this file.\n+ *  You should be familiar with @ref pagereducers \"Intel(R) Cilk(TM) Plus reducers\",\n+ *  described in file `reducers.md`, and particularly with @ref reducers_using,\n+ *  before trying to use the information in this file.\n  *\n  *  @section redopmul_usage Usage Example\n  *\n@@ -79,11 +90,11 @@\n  *  @subsection redopmul_monoid_operator Operator\n  *\n  *  The operator of a multiplication reducer is the multiplication operation,\n- *  defined by the \u201c`*`\u201d binary operator on `Type`.\n+ *  defined by the \"`*`\" binary operator on `Type`.\n  *\n  *  @subsection redopmul_monoid_identity Identity\n  *\n- *  The identity value of the reducer is the numeric value \u201c`1`\u201d. This is\n+ *  The identity value of the reducer is the numeric value \"`1`\". This is\n  *  expected to be the value of the expression `Type(1)`.\n  *\n  *  @section redopmul_operations Operations\n@@ -119,18 +130,18 @@\n  *  not really associative. For example, `(1e200 * 1e-200) * 1e-200 == 1e-200`,\n  *  but `1e200 * (1e-200 * 1e-200 == 0.\n  *\n- *  In many cases, this won\u2019t matter, but computations which have been\n+ *  In many cases, this won't matter, but computations which have been\n  *  carefully ordered to control overflow and underflow may not deal well with\n  *  being reassociated. In general, you should be sure to understand the\n- *  floating-point behavior of your program before doing any transformation \n- *  that will reassociate its computations. \n+ *  floating-point behavior of your program before doing any transformation\n+ *  that will reassociate its computations.\n  *\n  *  @section redopmul_types Type and Operator Requirements\n  *\n- *  `Type` must be `Copy Constructible`, `Default Constructible`, and \n+ *  `Type` must be `Copy Constructible`, `Default Constructible`, and\n  *  `Assignable`.\n  *\n- *  The operator \u201c`*=`\u201d must be defined on `Type`, with `x *= a` having the same\n+ *  The operator \"`*=`\" must be defined on `Type`, with `x *= a` having the same\n  *  meaning as `x = x * a`.\n  *\n  *  The expression `Type(1)` must be a valid expression which yields the\n@@ -158,18 +169,18 @@ namespace cilk {\n \n /** The multiplication reducer view class.\n  *\n- *  This is the view class for reducers created with \n- *  `cilk::reducer< cilk::op_mul<Type> >`. It holds the accumulator variable \n- *  for the reduction, and allows only multiplication operations to be \n+ *  This is the view class for reducers created with\n+ *  `cilk::reducer< cilk::op_mul<Type> >`. It holds the accumulator variable\n+ *  for the reduction, and allows only multiplication operations to be\n  *  performed on it.\n  *\n- *  @note   The reducer \u201cdereference\u201d operation (`reducer::operator *()`) \n- *          yields a reference to the view. Thus, for example, the view class\u2019s\n+ *  @note   The reducer \"dereference\" operation (`reducer::operator *()`)\n+ *          yields a reference to the view. Thus, for example, the view class's\n  *          `*=` operation would be used in an expression like `*r *= a`, where\n  *          `r` is an op_mul reducer variable.\n  *\n- *  @tparam Type    The type of the contained accumulator variable. This will \n- *                  be the value type of a monoid_with_view that is \n+ *  @tparam Type    The type of the contained accumulator variable. This will\n+ *                  be the value type of a monoid_with_view that is\n  *                  instantiated with this view.\n  *\n  *  @see ReducersMul\n@@ -181,18 +192,18 @@ template <typename Type>\n class op_mul_view : public scalar_view<Type>\n {\n     typedef scalar_view<Type> base;\n-    \n+\n public:\n     /** Class to represent the right-hand side of `*reducer = *reducer * value`.\n      *\n-     *  The only assignment operator for the op_mul_view class takes an \n-     *  rhs_proxy as its operand. This results in the syntactic restriction \n+     *  The only assignment operator for the op_mul_view class takes an\n+     *  rhs_proxy as its operand. This results in the syntactic restriction\n      *  that the only expressions that can be assigned to an op_mul_view are\n-     *  ones which generate an rhs_proxy \u2014 that is, expressions of the form\n+     *  ones which generate an rhs_proxy - that is, expressions of the form\n      *  `op_mul_view * value ... * value`.\n      *\n      *  @warning\n-     *  The lhs and rhs views in such an assignment must be the same; \n+     *  The lhs and rhs views in such an assignment must be the same;\n      *  otherwise, the behavior will be undefined. (I.e., `v1 = v1 * x` is\n      *  legal; `v1 = v2 * x` is illegal.) This condition will be checked with a\n      *  runtime assertion when compiled in debug mode.\n@@ -213,12 +224,12 @@ class op_mul_view : public scalar_view<Type>\n         rhs_proxy();                            // Disable default constructor\n \n     public:\n-        /** Multiply by an additional rhs value. If `v` is an op_mul_view and \n-         *  `a1` is a value, then the expression `v * a1` invokes the view\u2019s\n-         *  `operator*()` to create an rhs_proxy for `(v, a1)`; then \n-         *  `v * a1 * a2` invokes the rhs_proxy\u2019s `operator*()` to create a\n+        /** Multiplies by an additional `rhs` value. If `v` is an op_mul_view and\n+         *  `a1` is a value, then the expression `v * a1` invokes the view's\n+         *  `operator*()` to create an rhs_proxy for `(v, a1)`; then\n+         *  `v * a1 * a2` invokes the rhs_proxy's `operator*()` to create a\n          *  new rhs_proxy for `(v, a1*a2)`. This allows the right-hand side of\n-         *  an assignment to be not just `view * value`, but \n+         *  an assignment to be not just `view * value`, but\n          *  `view * value * value ... * value`. The effect is that\n          *\n          *      v = v * a1 * a2 ... * an;\n@@ -231,7 +242,7 @@ class op_mul_view : public scalar_view<Type>\n     };\n \n \n-    /** Default/identity constructor. This constructor initializes the \n+    /** Default/identity constructor. This constructor initializes the\n      *  contained value to `Type(1)`, which is expected to be the identity\n      *  value for multiplication on `Type`.\n      */\n@@ -240,8 +251,8 @@ class op_mul_view : public scalar_view<Type>\n     /** Construct with a specified initial value.\n      */\n     explicit op_mul_view(const Type& v) : base(v) {}\n-    \n-    /** Reduction operation.\n+\n+    /** Reduces two strand views.\n      *\n      *  This function is invoked by the @ref op_mul monoid to combine the views\n      *  of two strands when the right strand merges with the left one. It\n@@ -256,25 +267,25 @@ class op_mul_view : public scalar_view<Type>\n      *          reduce operation.\n      */\n     void reduce(op_mul_view* right) { this->m_value *= right->m_value; }\n-    \n+\n     /** @name Accumulator variable updates.\n      *\n      *  These functions support the various syntaxes for multiplying the\n      *  accumulator variable contained in the view by some value.\n      */\n-    //@{\n+    ///@{\n \n-    /** Multiply the accumulator variable by @a x.\n+    /** Multiplies the accumulator variable by @a x.\n      */\n     op_mul_view& operator*=(const Type& x) { this->m_value *= x; return *this; }\n \n-    /** Create an object representing `*this * x`.\n+    /** Creates an object representing `*this * x`.\n      *\n      *  @see rhs_proxy\n      */\n     rhs_proxy operator*(const Type& x) const { return rhs_proxy(this, x); }\n \n-    /** Assign the result of a `view * value` expression to the view. Note that\n+    /** Assigns the result of a `view * value` expression to the view. Note that\n      *  this is the only assignment operator for this class.\n      *\n      *  @see rhs_proxy\n@@ -284,8 +295,8 @@ class op_mul_view : public scalar_view<Type>\n         this->m_value *= rhs.m_value;\n         return *this;\n     }\n-    \n-    //@}\n+\n+    ///@}\n };\n \n /** Monoid class for multiplication reductions. Instantiate the cilk::reducer\n@@ -309,7 +320,7 @@ struct op_mul : public monoid_with_view< op_mul_view<Type> > {};\n \n /** @ingroup ReducersAdd\n  */\n-//@{\n+///@{\n \n /** @name C language reducer macros\n  *\n@@ -318,11 +329,11 @@ struct op_mul : public monoid_with_view< op_mul_view<Type> > {};\n  *\n  *  @see @ref page_reducers_in_c\n  */\n- //@{\n- \n+ ///@{\n+\n __CILKRTS_BEGIN_EXTERN_C\n \n-/** Opmul reducer type name.\n+/** Declares `opmul` reducer type name.\n  *\n  *  This macro expands into the identifier which is the name of the op_mul\n  *  reducer type for a specified numeric type.\n@@ -336,7 +347,7 @@ __CILKRTS_BEGIN_EXTERN_C\n #define CILK_C_REDUCER_OPMUL_TYPE(tn)                                         \\\n     __CILKRTS_MKIDENT(cilk_c_reducer_opmul_,tn)\n \n-/** Declare an op_mul reducer object.\n+/** Declares an op_mul reducer object.\n  *\n  *  This macro expands into a declaration of an op_mul reducer object for a\n  *  specified numeric type. For example:\n@@ -361,29 +372,29 @@ __CILKRTS_BEGIN_EXTERN_C\n \n /// @cond internal\n \n-/** Declare the op_mul reducer functions for a numeric type.\n+/** Declares the op_mul reducer functions for a numeric type.\n  *\n- *  This macro expands into external function declarations for functions which \n+ *  This macro expands into external function declarations for functions which\n  *  implement the reducer functionality for the op_mul reducer type for a\n  *  specified numeric type.\n  *\n  *  @param  t   The value type of the reducer.\n- *  @param  tn  The value \u201ctype name\u201d identifier, used to construct the reducer\n+ *  @param  tn  The value \"type name\" identifier, used to construct the reducer\n  *              type name, function names, etc.\n  */\n #define CILK_C_REDUCER_OPMUL_DECLARATION(t,tn)                             \\\n     typedef CILK_C_DECLARE_REDUCER(t) CILK_C_REDUCER_OPMUL_TYPE(tn);       \\\n     __CILKRTS_DECLARE_REDUCER_REDUCE(cilk_c_reducer_opmul,tn,l,r);         \\\n     __CILKRTS_DECLARE_REDUCER_IDENTITY(cilk_c_reducer_opmul,tn);\n- \n-/** Define the op_mul reducer functions for a numeric type.\n+\n+/** Defines the op_mul reducer functions for a numeric type.\n  *\n  *  This macro expands into function definitions for functions which implement\n  *  the reducer functionality for the op_mul reducer type for a specified\n  *  numeric type.\n  *\n  *  @param  t   The value type of the reducer.\n- *  @param  tn  The value \u201ctype name\u201d identifier, used to construct the reducer\n+ *  @param  tn  The value \"type name\" identifier, used to construct the reducer\n  *              type name, function names, etc.\n  */\n #define CILK_C_REDUCER_OPMUL_DEFINITION(t,tn)                              \\\n@@ -392,10 +403,10 @@ __CILKRTS_BEGIN_EXTERN_C\n         { *(t*)l *= *(t*)r; }                                              \\\n     __CILKRTS_DECLARE_REDUCER_IDENTITY(cilk_c_reducer_opmul,tn)            \\\n         { *(t*)v = 1; }\n- \n-//@{\n-/** @def CILK_C_REDUCER_OPMUL_INSTANCE \n- *  @brief Declare or define implementation functions for a reducer type.\n+\n+///@{\n+/** @def CILK_C_REDUCER_OPMUL_INSTANCE\n+ *  @brief Declares or defines implementation functions for a reducer type.\n  *\n  *  In the runtime source file c_reducers.c, the macro `CILK_C_DEFINE_REDUCERS`\n  *  will be defined, and this macro will generate reducer implementation\n@@ -409,9 +420,9 @@ __CILKRTS_BEGIN_EXTERN_C\n #   define CILK_C_REDUCER_OPMUL_INSTANCE(t,tn)  \\\n         CILK_C_REDUCER_OPMUL_DECLARATION(t,tn)\n #endif\n-//@}\n+///@}\n \n-/*  Declare or define an instance of the reducer type and its functions for each \n+/*  Declares or defines an instance of the reducer type and its functions for each\n  *  numeric type.\n  */\n CILK_C_REDUCER_OPMUL_INSTANCE(char,                 char)\n@@ -435,8 +446,8 @@ CILK_C_REDUCER_OPMUL_INSTANCE(long double,          longdouble)\n \n __CILKRTS_END_EXTERN_C\n \n-//@}\n+///@}\n \n-//@}\n+///@}\n \n #endif /*  REDUCER_OPMUL_H_INCLUDED */"}, {"sha": "8d6d52024888e400a95d8be85c6861251679778e", "filename": "libcilkrts/include/cilk/reducer_opor.h", "status": "modified", "additions": 112, "deletions": 101, "changes": 213, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Freducer_opor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Freducer_opor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Fcilk%2Freducer_opor.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,10 +1,8 @@\n /*  reducer_opor.h                  -*- C++ -*-\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -19,7 +17,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -32,11 +29,25 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  */\n \n /** @file reducer_opor.h\n  *\n- *  @brief Defines classes for doing parallel bitwise or reductions.\n+ *  @brief Defines classes for doing parallel bitwise OR reductions.\n  *\n  *  @ingroup ReducersOr\n  *\n@@ -48,16 +59,16 @@\n \n #include <cilk/reducer.h>\n \n-/** @defgroup ReducersOr Bitwise Or Reducers\n+/** @defgroup ReducersOr Bitwise `OR` Reducers\n  *\n- *  Bitwise and reducers allow the computation of the bitwise and of a set of\n+ *  Bitwise `OR` reducers allow the computation of the bitwise `OR` of a set of\n  *  values in parallel.\n  *\n  *  @ingroup Reducers\n  *\n- *  You should be familiar with @ref pagereducers \"Cilk reducers\", described in\n- *  file `reducers.md`, and particularly with @ref reducers_using, before trying\n- *  to use the information in this file.\n+ *  You should be familiar with @ref pagereducers \"Intel(R) Cilk(TM) Plus reducers\",\n+ *  described in file `reducers.md`, and particularly with @ref reducers_using,\n+ *  before trying to use the information in this file.\n  *\n  *  @section redopor_usage Usage Example\n  *\n@@ -72,18 +83,18 @@\n  *\n  *  @subsection redopor_monoid_values Value Set\n  *\n- *  The value set of a bitwise or reducer is the set of values of `Type`, which\n+ *  The value set of a bitwise `OR` reducer is the set of values of `Type`, which\n  *  is expected to be a builtin integer type which has a representation as a\n  *  sequence of bits (or something like it, such as `bool` or `std::bitset`).\n  *\n  *  @subsection redopor_monoid_operator Operator\n  *\n- *  The operator of a bitwise or reducer is the bitwise or operator, defined by\n- *  the \u201c`|`\u201d binary operator on `Type`.\n+ *  The operator of a bitwise `OR` reducer is the bitwise OR operator, defined by\n+ *  the \"`|`\" binary operator on `Type`.\n  *\n  *  @subsection redopor_monoid_identity Identity\n  *\n- *  The identity value of the reducer is the value whose representation \n+ *  The identity value of the reducer is the value whose representation\n  *  contains all 0-bits. This is expected to be the value of the default\n  *  constructor `Type()`.\n  *\n@@ -104,8 +115,8 @@\n  *\n  *  @subsection redopor_initial Initial Values\n  *\n- *  If a bitwise or reducer is constructed without an explicit initial value, \n- *  then its initial value will be its identity value, as long as `Type` \n+ *  If a bitwise OR reducer is constructed without an explicit initial value,\n+ *  then its initial value will be its identity value, as long as `Type`\n  *  satisfies the requirements of @ref redopor_types.\n  *\n  *  @subsection redopor_view_ops View Operations\n@@ -119,17 +130,17 @@\n  *  `Type` must be `Copy Constructible`, `Default Constructible`, and\n  *  `Assignable`.\n  *\n- *  The operator \u201c`|=`\u201d must be defined on `Type`, with `x |= a` having the \n+ *  The operator \"`|=`\" must be defined on `Type`, with `x |= a` having the\n  *  same meaning as `x = x | a`.\n  *\n  *  The expression `Type()` must be a valid expression which yields the\n  *  identity value (the value of `Type` whose representation consists of all\n  *  0-bits).\n  *\n- *  @section redopor_in_c Bitwise Or Reducers in C\n+ *  @section redopor_in_c Bitwise OR Reducers in C\n  *\n  *  The @ref CILK_C_REDUCER_OPOR and @ref CILK_C_REDUCER_OPOR_TYPE macros can\n- *  be used to do bitwise or reductions in C. For example:\n+ *  be used to do bitwise OR reductions in C. For example:\n  *\n  *      CILK_C_REDUCER_OPOR(r, uint, 0);\n  *      CILK_C_REGISTER_REDUCER(r);\n@@ -146,14 +157,14 @@\n \n namespace cilk {\n \n-/** The bitwise or reducer view class.\n+/** The bitwise OR reducer view class.\n  *\n- *  This is the view class for reducers created with \n+ *  This is the view class for reducers created with\n  *  `cilk::reducer< cilk::op_or<Type> >`. It holds the accumulator variable for\n  *  the reduction, and allows only `or` operations to be performed on it.\n  *\n- *  @note   The reducer \u201cdereference\u201d operation (`reducer::operator *()`) \n- *          yields a reference to the view. Thus, for example, the view class\u2019s\n+ *  @note   The reducer \"dereference\" operation (`reducer::operator *()`)\n+ *          yields a reference to the view. Thus, for example, the view class's\n  *          `|=` operation would be used in an expression like `*r |= a`, where\n  *          `r` is an opmod reducer variable.\n  *\n@@ -170,18 +181,18 @@ template <typename Type>\n class op_or_view : public scalar_view<Type>\n {\n     typedef scalar_view<Type> base;\n-    \n+\n public:\n     /** Class to represent the right-hand side of `*reducer = *reducer | value`.\n      *\n-     *  The only assignment operator for the op_or_view class takes an \n+     *  The only assignment operator for the op_or_view class takes an\n      *  rhs_proxy as its operand. This results in the syntactic restriction\n      *  that the only expressions that can be assigned to an op_or_view are\n-     *  ones which generate an rhs_proxy \u2014 that is, expressions of the form\n+     *  ones which generate an rhs_proxy - that is, expressions of the form\n      *  `op_or_view | value ... | value`.\n      *\n      *  @warning\n-     *  The lhs and rhs views in such an assignment must be the same; \n+     *  The lhs and rhs views in such an assignment must be the same;\n      *  otherwise, the behavior will be undefined. (I.e., `v1 = v1 | x` is\n      *  legal; `v1 = v2 | x` is illegal.) This condition will be checked with\n      *  a runtime assertion when compiled in debug mode.\n@@ -202,12 +213,12 @@ class op_or_view : public scalar_view<Type>\n         rhs_proxy();                            // Disable default constructor\n \n     public:\n-        /** Bitwise or with an additional rhs value. If `v` is an op_or_view\n-         *  and `a1` is a value, then the expression `v | a1` invokes the \n-         *  view\u2019s `operator|()` to create an rhs_proxy for `(v, a1)`; then \n-         *  `v | a1 | a2` invokes the rhs_proxy\u2019s `operator|()` to create a new\n+        /** bitwise OR with an additional rhs value. If `v` is an op_or_view\n+         *  and `a1` is a value, then the expression `v | a1` invokes the\n+         *  view's `operator|()` to create an rhs_proxy for `(v, a1)`; then\n+         *  `v | a1 | a2` invokes the rhs_proxy's `operator|()` to create a new\n          *  rhs_proxy for `(v, a1|a2)`. This allows the right-hand side of an\n-         *  assignment to be not just `view | value`, but \n+         *  assignment to be not just `view | value`, but\n          (  `view | value | value ... | value`. The effect is that\n          *\n          *      v = v | a1 | a2 ... | an;\n@@ -228,12 +239,12 @@ class op_or_view : public scalar_view<Type>\n     /** Construct with a specified initial value.\n      */\n     explicit op_or_view(const Type& v) : base(v) {}\n-    \n-    /** Reduction operation.\n+\n+    /** Reduces the views of two strands.\n      *\n      *  This function is invoked by the @ref op_or monoid to combine the views\n      *  of two strands when the right strand merges with the left one. It\n-     *  \u201cors\u201d the value contained in the left-strand view by the value\n+     *  \"ORs\" the value contained in the left-strand view by the value\n      *  contained in the right-strand view, and leaves the value in the\n      *  right-strand view undefined.\n      *\n@@ -244,25 +255,25 @@ class op_or_view : public scalar_view<Type>\n      *          reduce operation.\n      */\n     void reduce(op_or_view* right) { this->m_value |= right->m_value; }\n-    \n+\n     /** @name Accumulator variable updates.\n      *\n-     *  These functions support the various syntaxes for \u201coring\u201d the\n+     *  These functions support the various syntaxes for \"ORing\" the\n      *  accumulator variable contained in the view with some value.\n      */\n-    //@{\n+    ///@{\n \n-    /** Or the accumulator variable with @a x.\n+    /** Perfoms an OR operation between the accumulator variable and @a x.\n      */\n     op_or_view& operator|=(const Type& x) { this->m_value |= x; return *this; }\n \n-    /** Create an object representing `*this | x`.\n+    /** Creates an object representing `*this | x`.\n      *\n      *  @see rhs_proxy\n      */\n     rhs_proxy operator|(const Type& x) const { return rhs_proxy(this, x); }\n \n-    /** Assign the result of a `view | value` expression to the view. Note that\n+    /** Assigns the result of a `view | value` expression to the view. Note that\n      *  this is the only assignment operator for this class.\n      *\n      *  @see rhs_proxy\n@@ -272,23 +283,23 @@ class op_or_view : public scalar_view<Type>\n         this->m_value |= rhs.m_value;\n         return *this;\n     }\n-    \n-    //@}\n+\n+    ///@}\n };\n \n-/** Monoid class for bitwise or reductions. Instantiate the cilk::reducer \n- *  template class with an op_or monoid to create a bitwise or reducer\n- *  class. For example, to compute the bitwise or of a set of `unsigned long`\n+/** Monoid class for bitwise OR reductions. Instantiate the cilk::reducer\n+ *  template class with an op_or monoid to create a bitwise OR reducer\n+ *  class. For example, to compute the bitwise OR of a set of `unsigned long`\n  *  values:\n  *\n  *      cilk::reducer< cilk::op_or<unsigned long> > r;\n  *\n  *  @tparam Type    The reducer value type.\n  *  @tparam Align   If `false` (the default), reducers instantiated on this\n- *                  monoid will be naturally aligned (the Cilk library 1.0\n+ *                  monoid will be naturally aligned (the Intel Cilk Plus library 1.0\n  *                  behavior). If `true`, reducers instantiated on this monoid\n- *                  will be cache-aligned for binary compatibility with \n- *                  reducers in Cilk library version 0.9.\n+ *                  will be cache-aligned for binary compatibility with\n+ *                  reducers in Intel Cilk Plus library version 0.9.\n  *\n  *  @see ReducersOr\n  *  @see op_or_view\n@@ -298,22 +309,22 @@ class op_or_view : public scalar_view<Type>\n template <typename Type, bool Align = false>\n struct op_or : public monoid_with_view<op_or_view<Type>, Align> {};\n \n-/** Deprecated bitwise or reducer class.\n+/** Deprecated bitwise OR reducer class.\n  *\n  *  reducer_opor is the same as @ref reducer<@ref op_or>, except that\n  *  reducer_opor is a proxy for the contained view, so that accumulator\n  *  variable update operations can be applied directly to the reducer. For\n- *  example, a value is ored with  a `reducer<%op_or>` with `*r |= a`, but a\n- *  value can be ored with a `%reducer_opor` with `r |= a`.\n+ *  example, a value is \"ORed\" with  a `reducer<%op_or>` with `*r |= a`, but a\n+ *  value can be \"ORed\" with a `%reducer_opor` with `r |= a`.\n  *\n  *  @deprecated Users are strongly encouraged to use `reducer<monoid>`\n- *              reducers rather than the old wrappers like reducer_opor. \n+ *              reducers rather than the old wrappers like reducer_opor.\n  *              The `reducer<monoid>` reducers show the reducer/monoid/view\n  *              architecture more clearly, are more consistent in their\n  *              implementation, and present a simpler model for new\n  *              user-implemented reducers.\n  *\n- *  @note   Implicit conversions are provided between `%reducer_opor` \n+ *  @note   Implicit conversions are provided between `%reducer_opor`\n  *          and `reducer<%op_or>`. This allows incremental code\n  *          conversion: old code that used `%reducer_opor` can pass a\n  *          `%reducer_opor` to a converted function that now expects a\n@@ -337,20 +348,20 @@ class reducer_opor : public reducer< op_or<Type, true> >\n   public:\n     /// The view type for the reducer.\n     typedef typename base::view_type        view_type;\n-    \n-    /// The view\u2019s rhs proxy type.\n+\n+    /// The view's rhs proxy type.\n     typedef typename view_type::rhs_proxy   rhs_proxy;\n-    \n+\n     /// The view type for the reducer.\n     typedef view_type                       View;\n \n     /// The monoid type for the reducer.\n     typedef typename base::monoid_type      Monoid;\n-    \n+\n     /** @name Constructors\n      */\n-    //@{\n-    \n+    ///@{\n+\n     /** Default (identity) constructor.\n      *\n      * Constructs the wrapper with the default initial value of `Type()`.\n@@ -362,38 +373,38 @@ class reducer_opor : public reducer< op_or<Type, true> >\n      *  Constructs the wrapper with a specified initial value.\n      */\n     explicit reducer_opor(const Type& initial_value) : base(initial_value) {}\n-    \n-    //@}\n+\n+    ///@}\n \n     /** @name Forwarded functions\n      *  @details Functions that update the contained accumulator variable are\n      *  simply forwarded to the contained @ref op_and_view. */\n-    //@{\n+    ///@{\n \n     /// @copydoc op_or_view::operator|=(const Type&)\n     reducer_opor& operator|=(const Type& x)\n     {\n-        view() |= x; return *this; \n+        view() |= x; return *this;\n     }\n-    \n+\n     // The legacy definition of reducer_opor::operator|() has different\n     // behavior and a different return type than this definition. The legacy\n     // version is defined as a member function, so this new version is defined\n-    // as a free function to give it a different signature, so that they won\u2019t \n+    // as a free function to give it a different signature, so that they won't\n     // end up sharing a single object file entry.\n \n     /// @copydoc op_or_view::operator|(const Type&) const\n     friend rhs_proxy operator|(const reducer_opor& r, const Type& x)\n-    { \n-        return r.view() | x; \n+    {\n+        return r.view() | x;\n     }\n \n     /// @copydoc op_and_view::operator=(const rhs_proxy&)\n     reducer_opor& operator=(const rhs_proxy& temp)\n     {\n-        view() = temp; return *this; \n+        view() = temp; return *this;\n     }\n-    //@}\n+    ///@}\n \n     /** @name Dereference\n      *  @details Dereferencing a wrapper is a no-op. It simply returns the\n@@ -412,25 +423,25 @@ class reducer_opor : public reducer< op_or<Type, true> >\n      *                  // operator &= is a wrapper member function that\n      *                  // calls the corresponding view function\n      */\n-    //@{\n+    ///@{\n     reducer_opor&       operator*()       { return *this; }\n     reducer_opor const& operator*() const { return *this; }\n \n     reducer_opor*       operator->()       { return this; }\n     reducer_opor const* operator->() const { return this; }\n-    //@}\n-    \n+    ///@}\n+\n     /** @name Upcast\n-     *  @details In Cilk library 0.9, reducers were always cache-aligned. In\n-     *  library  1.0, reducer cache alignment is optional. By default, reducers\n-     *  are unaligned (i.e., just naturally aligned), but legacy wrappers\n-     *  inherit from cache-aligned reducers for binary compatibility.\n+     *  @details In Intel Cilk Plus library 0.9, reducers were always cache-aligned.\n+     *  In library 1.0, reducer cache alignment is optional. By default,\n+     *  reducers are unaligned (i.e., just naturally aligned), but legacy\n+     *  wrappers inherit from cache-aligned reducers for binary compatibility.\n      *\n      *  This means that a wrapper will automatically be upcast to its aligned\n      *  reducer base class. The following conversion operators provide\n      *  pseudo-upcasts to the corresponding unaligned reducer class.\n      */\n-    //@{\n+    ///@{\n     operator reducer< op_or<Type, false> >& ()\n     {\n         return *reinterpret_cast< reducer< op_or<Type, false> >* >(this);\n@@ -439,15 +450,15 @@ class reducer_opor : public reducer< op_or<Type, true> >\n     {\n         return *reinterpret_cast< const reducer< op_or<Type, false> >* >(this);\n     }\n-    //@}\n-    \n+    ///@}\n+\n };\n \n /// @cond internal\n /** Metafunction specialization for reducer conversion.\n  *\n- *  This specialization of the @ref legacy_reducer_downcast template class \n- *  defined in reducer.h causes the `reducer< op_or<Type> >` class to have an \n+ *  This specialization of the @ref legacy_reducer_downcast template class\n+ *  defined in reducer.h causes the `reducer< op_or<Type> >` class to have an\n  *  `operator reducer_opor<Type>& ()` conversion operator that statically\n  *  downcasts the `reducer<op_or>` to the corresponding `reducer_opor` type.\n  *  (The reverse conversion, from `reducer_opor` to `reducer<op_or>`, is just\n@@ -469,19 +480,19 @@ struct legacy_reducer_downcast<reducer<op_or<Type, Align> > >\n \n /** @ingroup ReducersOr\n  */\n-//@{\n+///@{\n \n /** @name C language reducer macros\n  *\n  *  These macros are used to declare and work with op_or reducers in C code.\n  *\n  *  @see @ref page_reducers_in_c\n  */\n- //@{\n- \n+ ///@{\n+\n __CILKRTS_BEGIN_EXTERN_C\n \n-/** Opor reducer type name.\n+/** Declares OPOR reducer type name.\n  *\n  *  This macro expands into the identifier which is the name of the op_or\n  *  reducer type for a specified numeric type.\n@@ -495,7 +506,7 @@ __CILKRTS_BEGIN_EXTERN_C\n #define CILK_C_REDUCER_OPOR_TYPE(tn)                                         \\\n     __CILKRTS_MKIDENT(cilk_c_reducer_opor_,tn)\n \n-/** Declare an op_or reducer object.\n+/** Declares an op_or reducer object.\n  *\n  *  This macro expands into a declaration of an op_or reducer object for a\n  *  specified numeric type. For example:\n@@ -520,29 +531,29 @@ __CILKRTS_BEGIN_EXTERN_C\n \n /// @cond internal\n \n-/** Declare the op_or reducer functions for a numeric type.\n+/** Declares the op_or reducer functions for a numeric type.\n  *\n  *  This macro expands into external function declarations for functions which\n  *  implement the reducer functionality for the op_or reducer type for a\n  *  specified numeric type.\n  *\n  *  @param  t   The value type of the reducer.\n- *  @param  tn  The value \u201ctype name\u201d identifier, used to construct the reducer\n+ *  @param  tn  The value \"type name\" identifier, used to construct the reducer\n  *              type name, function names, etc.\n  */\n #define CILK_C_REDUCER_OPOR_DECLARATION(t,tn)                             \\\n     typedef CILK_C_DECLARE_REDUCER(t) CILK_C_REDUCER_OPOR_TYPE(tn);       \\\n     __CILKRTS_DECLARE_REDUCER_REDUCE(cilk_c_reducer_opor,tn,l,r);         \\\n     __CILKRTS_DECLARE_REDUCER_IDENTITY(cilk_c_reducer_opor,tn);\n- \n-/** Define the op_or reducer functions for a numeric type.\n+\n+/** Defines the op_or reducer functions for a numeric type.\n  *\n  *  This macro expands into function definitions for functions which implement\n- *  the reducer functionality for the op_or reducer type for a specified \n+ *  the reducer functionality for the op_or reducer type for a specified\n  *  numeric type.\n  *\n  *  @param  t   The value type of the reducer.\n- *  @param  tn  The value \u201ctype name\u201d identifier, used to construct the reducer\n+ *  @param  tn  The value \"type name\" identifier, used to construct the reducer\n  *              type name, function names, etc.\n  */\n #define CILK_C_REDUCER_OPOR_DEFINITION(t,tn)                              \\\n@@ -551,10 +562,10 @@ __CILKRTS_BEGIN_EXTERN_C\n         { *(t*)l |= *(t*)r; }                                              \\\n     __CILKRTS_DECLARE_REDUCER_IDENTITY(cilk_c_reducer_opor,tn)            \\\n         { *(t*)v = 0; }\n- \n-//@{\n-/** @def CILK_C_REDUCER_OPOR_INSTANCE \n- *  @brief Declare or define implementation functions for a reducer type.\n+\n+///@{\n+/** @def CILK_C_REDUCER_OPOR_INSTANCE\n+ *  @brief Declares or defines implementation functions for a reducer type.\n  *\n  *  In the runtime source file c_reducers.c, the macro `CILK_C_DEFINE_REDUCERS`\n  *  will be defined, and this macro will generate reducer implementation\n@@ -568,9 +579,9 @@ __CILKRTS_BEGIN_EXTERN_C\n #   define CILK_C_REDUCER_OPOR_INSTANCE(t,tn)  \\\n         CILK_C_REDUCER_OPOR_DECLARATION(t,tn)\n #endif\n-//@}\n+///@}\n \n-/*  Declare or define an instance of the reducer type and its functions for each \n+/*  Declare or define an instance of the reducer type and its functions for each\n  *  numeric type.\n  */\n CILK_C_REDUCER_OPOR_INSTANCE(char,                 char)\n@@ -591,8 +602,8 @@ CILK_C_REDUCER_OPOR_INSTANCE(unsigned long long,   ulonglong)\n \n __CILKRTS_END_EXTERN_C\n \n-//@}\n+///@}\n \n-//@}\n+///@}\n \n #endif /*  REDUCER_OPOR_H_INCLUDED */"}, {"sha": "cb6560f9c5739dfdd4966c4c59c853b5fadda1f5", "filename": "libcilkrts/include/cilk/reducer_opxor.h", "status": "modified", "additions": 111, "deletions": 101, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Freducer_opxor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Freducer_opxor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Fcilk%2Freducer_opxor.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,10 +1,8 @@\n /*  reducer_opxor.h                  -*- C++ -*-\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -19,7 +17,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -32,6 +29,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  */\n \n /** @file reducer_opxor.h\n@@ -48,16 +59,16 @@\n \n #include <cilk/reducer.h>\n \n-/** @defgroup ReducersXor Bitwise Xor Reducers\n+/** @defgroup ReducersXor Bitwise XOR Reducers\n  *\n- *  Bitwise and reducers allow the computation of the bitwise and of a set of\n+ *  Bitwise XOR reducers allow the computation of the bitwise XOR of a set of\n  *  values in parallel.\n  *\n  *  @ingroup Reducers\n  *\n- *  You should be familiar with @ref pagereducers \"Cilk reducers\", described in\n- *  file `reducers.md`, and particularly with @ref reducers_using, before trying\n- *  to use the information in this file.\n+ *  You should be familiar with @ref pagereducers \"Intel(R) Cilk(TM) Plus reducers\",\n+ *  described in file `reducers.md`, and particularly with @ref reducers_using,\n+ *  before trying to use the information in this file.\n  *\n  *  @section redopxor_usage Usage Example\n  *\n@@ -72,18 +83,17 @@\n  *\n  *  @subsection redopxor_monoid_values Value Set\n  *\n- *  The value set of a bitwise xor reducer is the set of values of `Type`, which\n+ *  The value set of a bitwise XOR reducer is the set of values of `Type`, which\n  *  is expected to be a builtin integer type which has a representation as a\n  *  sequence of bits (or something like it, such as `bool` or `std::bitset`).\n  *\n  *  @subsection redopxor_monoid_operator Operator\n  *\n- *  The operator of a bitwise xor reducer is the bitwise xor operator, defined\n- *  by the \u201c`^`\u201d binary operator on `Type`.\n+ *  The bitwise XOR operator is defined by the \"`^`\" binary operator on `Type`.\n  *\n  *  @subsection redopxor_monoid_identity Identity\n  *\n- *  The identity value of the reducer is the value whose representation \n+ *  The identity value of the reducer is the value whose representation\n  *  contains all 0-bits. This is expected to be the value of the default\n  *  constructor `Type()`.\n  *\n@@ -104,8 +114,8 @@\n  *\n  *  @subsection redopxor_initial Initial Values\n  *\n- *  If a bitwise xor reducer is constructed without an explicit initial value, \n- *  then its initial value will be its identity value, as long as `Type` \n+ *  If a bitwise XOR reducer is constructed without an explicit initial value,\n+ *  then its initial value will be its identity value, as long as `Type`\n  *  satisfies the requirements of @ref redopxor_types.\n  *\n  *  @subsection redopxor_view_ops View Operations\n@@ -119,17 +129,17 @@\n  *  `Type` must be `Copy Constructible`, `Default Constructible`, and\n  *  `Assignable`.\n  *\n- *  The operator \u201c`^=`\u201d must be defined on `Type`, with `x ^= a` having the \n+ *  The operator \"`^=`\" must be defined on `Type`, with `x ^= a` having the\n  *  same meaning as `x = x ^ a`.\n  *\n  *  The expression `Type()` must be a valid expression which yields the\n  *  identity value (the value of `Type` whose representation consists of all\n  *  0-bits).\n  *\n- *  @section redopxor_in_c Bitwise Xor Reducers in C\n+ *  @section redopxor_in_c Bitwise XOR Reducers in C\n  *\n  *  The @ref CILK_C_REDUCER_OPXOR and @ref CILK_C_REDUCER_OPXOR_TYPE macros can\n- *  be used to do bitwise xor reductions in C. For example:\n+ *  be used to do bitwise XOR reductions in C. For example:\n  *\n  *      CILK_C_REDUCER_OPXOR(r, uint, 0);\n  *      CILK_C_REGISTER_REDUCER(r);\n@@ -146,14 +156,14 @@\n \n namespace cilk {\n \n-/** The bitwise xor reducer view class.\n+/** The bitwise XOR reducer view class.\n  *\n- *  This is the view class for reducers created with \n- *  `cilk::reducer< cilk::op_xor<Type> >`. It holds the accumulator variable \n+ *  This is the view class for reducers created with\n+ *  `cilk::reducer< cilk::op_xor<Type> >`. It holds the accumulator variable\n  *  for the reduction, and allows only `xor` operations to be performed on it.\n  *\n- *  @note   The reducer \u201cdereference\u201d operation (`reducer::operator *()`) \n- *          yields a reference to the view. Thus, for example, the view class\u2019s\n+ *  @note   The reducer \"dereference\" operation (`reducer::operator *()`)\n+ *          yields a reference to the view. Thus, for example, the view class's\n  *          `^=` operation would be used in an expression like `*r ^= a`, where\n  *          `r` is an opmod reducer variable.\n  *\n@@ -170,18 +180,18 @@ template <typename Type>\n class op_xor_view : public scalar_view<Type>\n {\n     typedef scalar_view<Type> base;\n-    \n+\n public:\n     /** Class to represent the right-hand side of `*reducer = *reducer ^ value`.\n      *\n-     *  The only assignment operator for the op_xor_view class takes an \n+     *  The only assignment operator for the op_xor_view class takes an\n      *  rhs_proxy as its operand. This results in the syntactic restriction\n      *  that the only expressions that can be assigned to an op_xor_view are\n-     *  ones which generate an rhs_proxy \u2014 that is, expressions of the form\n+     *  ones which generate an rhs_proxy - that is, expressions of the form\n      *  `op_xor_view ^ value ... ^ value`.\n      *\n      *  @warning\n-     *  The lhs and rhs views in such an assignment must be the same; \n+     *  The lhs and rhs views in such an assignment must be the same;\n      *  otherwise, the behavior will be undefined. (I.e., `v1 = v1 ^ x` is\n      *  legal; `v1 = v2 ^ x` is illegal.) This condition will be checked with\n      *  a runtime assertion when compiled in debug mode.\n@@ -202,12 +212,12 @@ class op_xor_view : public scalar_view<Type>\n         rhs_proxy();                            // Disable default constructor\n \n     public:\n-        /** Bitwise xor with an additional rhs value. If `v` is an op_xor_view\n-         *  and `a1` is a value, then the expression `v ^ a1` invokes the \n-         *  view\u2019s `operator^()` to create an rhs_proxy for `(v, a1)`; then \n-         *  `v ^ a1 ^ a2` invokes the rhs_proxy\u2019s `operator^()` to create a new\n+        /** bitwise XOR with an additional rhs value. If `v` is an op_xor_view\n+         *  and `a1` is a value, then the expression `v ^ a1` invokes the\n+         *  view's `operator^()` to create an rhs_proxy for `(v, a1)`; then\n+         *  `v ^ a1 ^ a2` invokes the rhs_proxy's `operator^()` to create a new\n          *  rhs_proxy for `(v, a1^a2)`. This allows the right-hand side of an\n-         *  assignment to be not just `view ^ value`, but \n+         *  assignment to be not just `view ^ value`, but\n          (  `view ^ value ^ value ... ^ value`. The effect is that\n          *\n          *      v = v ^ a1 ^ a2 ... ^ an;\n@@ -228,12 +238,12 @@ class op_xor_view : public scalar_view<Type>\n     /** Construct with a specified initial value.\n      */\n     explicit op_xor_view(const Type& v) : base(v) {}\n-    \n-    /** Reduction operation.\n+\n+    /** Reduces the views of two strands.\n      *\n      *  This function is invoked by the @ref op_xor monoid to combine the views\n      *  of two strands when the right strand merges with the left one. It\n-     *  \u201cxors\u201d the value contained in the left-strand view by the value\n+     *  \"XORs\" the value contained in the left-strand view by the value\n      *  contained in the right-strand view, and leaves the value in the\n      *  right-strand view undefined.\n      *\n@@ -244,25 +254,25 @@ class op_xor_view : public scalar_view<Type>\n      *          reduce operation.\n      */\n     void reduce(op_xor_view* right) { this->m_value ^= right->m_value; }\n-    \n+\n     /** @name Accumulator variable updates.\n      *\n-     *  These functions support the various syntaxes for \u201cxoring\u201d the\n+     *  These functions support the various syntaxes for \"XORing\" the\n      *  accumulator variable contained in the view with some value.\n      */\n-    //@{\n+    ///@{\n \n-    /** Xor the accumulator variable with @a x.\n+    /** Performs XOR operation between the accumulator variable and @a x.\n      */\n     op_xor_view& operator^=(const Type& x) { this->m_value ^= x; return *this; }\n \n-    /** Create an object representing `*this ^ x`.\n+    /** Creates an object representing `*this ^ x`.\n      *\n      *  @see rhs_proxy\n      */\n     rhs_proxy operator^(const Type& x) const { return rhs_proxy(this, x); }\n \n-    /** Assign the result of a `view ^ value` expression to the view. Note that\n+    /** Assigns the result of a `view ^ value` expression to the view. Note that\n      *  this is the only assignment operator for this class.\n      *\n      *  @see rhs_proxy\n@@ -272,23 +282,23 @@ class op_xor_view : public scalar_view<Type>\n         this->m_value ^= rhs.m_value;\n         return *this;\n     }\n-    \n-    //@}\n+\n+    ///@}\n };\n \n-/** Monoid class for bitwise xor reductions. Instantiate the cilk::reducer \n- *  template class with an op_xor monoid to create a bitwise xor reducer\n- *  class. For example, to compute the bitwise xor of a set of `unsigned long`\n+/** Monoid class for bitwise XOR reductions. Instantiate the cilk::reducer\n+ *  template class with an op_xor monoid to create a bitwise XOR reducer\n+ *  class. For example, to compute the bitwise XOR of a set of `unsigned long`\n  *  values:\n  *\n  *      cilk::reducer< cilk::op_xor<unsigned long> > r;\n  *\n  *  @tparam Type    The reducer value type.\n  *  @tparam Align   If `false` (the default), reducers instantiated on this\n- *                  monoid will be naturally aligned (the Cilk library 1.0\n+ *                  monoid will be naturally aligned (the Intel Cilk Plus library 1.0\n  *                  behavior). If `true`, reducers instantiated on this monoid\n- *                  will be cache-aligned for binary compatibility with \n- *                  reducers in Cilk library version 0.9.\n+ *                  will be cache-aligned for binary compatibility with\n+ *                  reducers in Intel Cilk Plus library version 0.9.\n  *\n  *  @see ReducersXor\n  *  @see op_xor_view\n@@ -298,22 +308,22 @@ class op_xor_view : public scalar_view<Type>\n template <typename Type, bool Align = false>\n struct op_xor : public monoid_with_view<op_xor_view<Type>, Align> {};\n \n-/** Deprecated bitwise xor reducer class.\n+/** Deprecated bitwise XOR reducer class.\n  *\n  *  reducer_opxor is the same as @ref reducer<@ref op_xor>, except that\n  *  reducer_opxor is a proxy for the contained view, so that accumulator\n  *  variable update operations can be applied directly to the reducer. For\n- *  example, a value is xored with  a `reducer<%op_xor>` with `*r ^= a`, but a\n- *  value can be xored with a `%reducer_opxor` with `r ^= a`.\n+ *  example, a value is \"XORed\" with  a `reducer<%op_xor>` with `*r ^= a`, but a\n+ *  value can be \"XORed\" with a `%reducer_opxor` with `r ^= a`.\n  *\n  *  @deprecated Users are strongly encouraged to use `reducer<monoid>`\n- *              reducers rather than the old wrappers like reducer_opand. \n+ *              reducers rather than the old wrappers like reducer_opand.\n  *              The `reducer<monoid>` reducers show the reducer/monoid/view\n  *              architecture more clearly, are more consistent in their\n  *              implementation, and present a simpler model for new\n  *              user-implemented reducers.\n  *\n- *  @note   Implicit conversions are provided between `%reducer_opxor` \n+ *  @note   Implicit conversions are provided between `%reducer_opxor`\n  *          and `reducer<%op_xor>`. This allows incremental code\n  *          conversion: old code that used `%reducer_opxor` can pass a\n  *          `%reducer_opxor` to a converted function that now expects a\n@@ -337,20 +347,20 @@ class reducer_opxor : public reducer< op_xor<Type, true> >\n   public:\n     /// The view type for the reducer.\n     typedef typename base::view_type        view_type;\n-    \n-    /// The view\u2019s rhs proxy type.\n+\n+    /// The view's rhs proxy type.\n     typedef typename view_type::rhs_proxy   rhs_proxy;\n-    \n+\n     /// The view type for the reducer.\n     typedef view_type                       View;\n \n     /// The monoid type for the reducer.\n     typedef typename base::monoid_type      Monoid;\n-    \n+\n     /** @name Constructors\n      */\n-    //@{\n-    \n+    ///@{\n+\n     /** Default (identity) constructor.\n      *\n      * Constructs the wrapper with the default initial value of `Type()`.\n@@ -362,38 +372,38 @@ class reducer_opxor : public reducer< op_xor<Type, true> >\n      *  Constructs the wrapper with a specified initial value.\n      */\n     explicit reducer_opxor(const Type& initial_value) : base(initial_value) {}\n-    \n-    //@}\n+\n+    ///@}\n \n     /** @name Forwarded functions\n      *  @details Functions that update the contained accumulator variable are\n      *  simply forwarded to the contained @ref op_and_view. */\n-    //@{\n+    ///@{\n \n     /// @copydoc op_xor_view::operator^=(const Type&)\n     reducer_opxor& operator^=(const Type& x)\n     {\n-        view() ^= x; return *this; \n+        view() ^= x; return *this;\n     }\n-    \n+\n     // The legacy definition of reducer_opxor::operator^() has different\n     // behavior and a different return type than this definition. The legacy\n     // version is defined as a member function, so this new version is defined\n-    // as a free function to give it a different signature, so that they won\u2019t \n+    // as a free function to give it a different signature, so that they won't\n     // end up sharing a single object file entry.\n \n     /// @copydoc op_xor_view::operator^(const Type&) const\n     friend rhs_proxy operator^(const reducer_opxor& r, const Type& x)\n-    { \n-        return r.view() ^ x; \n+    {\n+        return r.view() ^ x;\n     }\n \n     /// @copydoc op_and_view::operator=(const rhs_proxy&)\n     reducer_opxor& operator=(const rhs_proxy& temp)\n     {\n-        view() = temp; return *this; \n+        view() = temp; return *this;\n     }\n-    //@}\n+    ///@}\n \n     /** @name Dereference\n      *  @details Dereferencing a wrapper is a no-op. It simply returns the\n@@ -412,25 +422,25 @@ class reducer_opxor : public reducer< op_xor<Type, true> >\n      *                  // operator &= is a wrapper member function that\n      *                  // calls the corresponding view function\n      */\n-    //@{\n+    ///@{\n     reducer_opxor&       operator*()       { return *this; }\n     reducer_opxor const& operator*() const { return *this; }\n \n     reducer_opxor*       operator->()       { return this; }\n     reducer_opxor const* operator->() const { return this; }\n-    //@}\n-    \n+    ///@}\n+\n     /** @name Upcast\n-     *  @details In Cilk library 0.9, reducers were always cache-aligned. In\n-     *  library  1.0, reducer cache alignment is optional. By default, reducers\n-     *  are unaligned (i.e., just naturally aligned), but legacy wrappers\n-     *  inherit from cache-aligned reducers for binary compatibility.\n+     *  @details In Intel Cilk Plus library 0.9, reducers were always cache-aligned.\n+     *  In library 1.0, reducer cache alignment is optional. By default,\n+     *  reducers are unaligned (i.e., just naturally aligned), but legacy\n+     *  wrappers inherit from cache-aligned reducers for binary compatibility.\n      *\n      *  This means that a wrapper will automatically be upcast to its aligned\n      *  reducer base class. The following conversion operators provide\n      *  pseudo-upcasts to the corresponding unaligned reducer class.\n      */\n-    //@{\n+    ///@{\n     operator reducer< op_xor<Type, false> >& ()\n     {\n         return *reinterpret_cast< reducer< op_xor<Type, false> >* >(this);\n@@ -439,15 +449,15 @@ class reducer_opxor : public reducer< op_xor<Type, true> >\n     {\n         return *reinterpret_cast< const reducer< op_xor<Type, false> >* >(this);\n     }\n-    //@}\n-    \n+    ///@}\n+\n };\n \n /// @cond internal\n /** Metafunction specialization for reducer conversion.\n  *\n- *  This specialization of the @ref legacy_reducer_downcast template class \n- *  defined in reducer.h causes the `reducer< op_xor<Type> >` class to have an \n+ *  This specialization of the @ref legacy_reducer_downcast template class\n+ *  defined in reducer.h causes the `reducer< op_xor<Type> >` class to have an\n  *  `operator reducer_opxor<Type>& ()` conversion operator that statically\n  *  downcasts the `reducer<op_xor>` to the corresponding `reducer_opxor` type.\n  *  (The reverse conversion, from `reducer_opxor` to `reducer<op_xor>`, is just\n@@ -469,19 +479,19 @@ struct legacy_reducer_downcast<reducer<op_xor<Type, Align> > >\n \n /** @ingroup ReducersXor\n  */\n-//@{\n+///@{\n \n /** @name C language reducer macros\n  *\n  *  These macros are used to declare and work with op_xor reducers in C code.\n  *\n  *  @see @ref page_reducers_in_c\n  */\n- //@{\n- \n+ ///@{\n+\n __CILKRTS_BEGIN_EXTERN_C\n \n-/** Opxor reducer type name.\n+/** Declares OPXOR reducer type name.\n  *\n  *  This macro expands into the identifier which is the name of the op_xor\n  *  reducer type for a specified numeric type.\n@@ -495,7 +505,7 @@ __CILKRTS_BEGIN_EXTERN_C\n #define CILK_C_REDUCER_OPXOR_TYPE(tn)                                         \\\n     __CILKRTS_MKIDENT(cilk_c_reducer_opxor_,tn)\n \n-/** Declare an op_xor reducer object.\n+/** Declares an op_xor reducer object.\n  *\n  *  This macro expands into a declaration of an op_xor reducer object for a\n  *  specified numeric type. For example:\n@@ -520,29 +530,29 @@ __CILKRTS_BEGIN_EXTERN_C\n \n /// @cond internal\n \n-/** Declare the op_xor reducer functions for a numeric type.\n+/** Declares the op_xor reducer functions for a numeric type.\n  *\n  *  This macro expands into external function declarations for functions which\n  *  implement the reducer functionality for the op_xor reducer type for a\n  *  specified numeric type.\n  *\n  *  @param  t   The value type of the reducer.\n- *  @param  tn  The value \u201ctype name\u201d identifier, used to construct the reducer\n+ *  @param  tn  The value \"type name\" identifier, used to construct the reducer\n  *              type name, function names, etc.\n  */\n #define CILK_C_REDUCER_OPXOR_DECLARATION(t,tn)                             \\\n     typedef CILK_C_DECLARE_REDUCER(t) CILK_C_REDUCER_OPXOR_TYPE(tn);       \\\n     __CILKRTS_DECLARE_REDUCER_REDUCE(cilk_c_reducer_opxor,tn,l,r);         \\\n     __CILKRTS_DECLARE_REDUCER_IDENTITY(cilk_c_reducer_opxor,tn);\n- \n-/** Define the op_xor reducer functions for a numeric type.\n+\n+/** Defines the op_xor reducer functions for a numeric type.\n  *\n  *  This macro expands into function definitions for functions which implement\n- *  the reducer functionality for the op_xor reducer type for a specified \n+ *  the reducer functionality for the op_xor reducer type for a specified\n  *  numeric type.\n  *\n  *  @param  t   The value type of the reducer.\n- *  @param  tn  The value \u201ctype name\u201d identifier, used to construct the reducer\n+ *  @param  tn  The value \"type name\" identifier, used to construct the reducer\n  *              type name, function names, etc.\n  */\n #define CILK_C_REDUCER_OPXOR_DEFINITION(t,tn)                              \\\n@@ -551,10 +561,10 @@ __CILKRTS_BEGIN_EXTERN_C\n         { *(t*)l ^= *(t*)r; }                                              \\\n     __CILKRTS_DECLARE_REDUCER_IDENTITY(cilk_c_reducer_opxor,tn)            \\\n         { *(t*)v = 0; }\n- \n-//@{\n-/** @def CILK_C_REDUCER_OPXOR_INSTANCE \n- *  @brief Declare or define implementation functions for a reducer type.\n+\n+///@{\n+/** @def CILK_C_REDUCER_OPXOR_INSTANCE\n+ *  @brief Declares or defines implementation functions for a reducer type.\n  *\n  *  In the runtime source file c_reducers.c, the macro `CILK_C_DEFINE_REDUCERS`\n  *  will be defined, and this macro will generate reducer implementation\n@@ -568,9 +578,9 @@ __CILKRTS_BEGIN_EXTERN_C\n #   define CILK_C_REDUCER_OPXOR_INSTANCE(t,tn)  \\\n         CILK_C_REDUCER_OPXOR_DECLARATION(t,tn)\n #endif\n-//@}\n+///@}\n \n-/*  Declare or define an instance of the reducer type and its functions for each \n+/*  Declares or defines an instance of the reducer type and its functions for each\n  *  numeric type.\n  */\n CILK_C_REDUCER_OPXOR_INSTANCE(char,                 char)\n@@ -591,8 +601,8 @@ CILK_C_REDUCER_OPXOR_INSTANCE(unsigned long long,   ulonglong)\n \n __CILKRTS_END_EXTERN_C\n \n-//@}\n+///@}\n \n-//@}\n+///@}\n \n #endif /*  REDUCER_OPXOR_H_INCLUDED */"}, {"sha": "793c3c5020cdf79df0a558018de930e3c83eebae", "filename": "libcilkrts/include/cilk/reducer_ostream.h", "status": "modified", "additions": 437, "deletions": 213, "changes": 650, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Freducer_ostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Freducer_ostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Fcilk%2Freducer_ostream.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,9 +1,8 @@\n-/*\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+/*  reducer_ostream.h                  -*- C++ -*-\n+ *\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -18,7 +17,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -31,263 +29,489 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n- *\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  */\n \n-/*\n- * reducer_ostream.h\n- *\n- * Purpose: Hyper-object to write to 'std::ostream's\n- *\n- * Classes: reducer_ostream\n- *\n- * Description:\n- * ============\n- * Output streams ('std::ostream's) are a convenient means of writing text to\n- * files, the user console, or sockets.  In a serial program, text is written\n- * to an ostream in a specific, logical order.  For example, computing while\n- * traversing a data structure and printing them to an 'ostream' will result\n- * in the values being printed in the order of traversal.  In a parallel\n- * version of the same program, however, different parts of the data structure\n- * may be traversed in a different order, resulting in a non-deterministic\n- * ordering of the stream.  Worse, multiple strands may write to the same\n- * stream simultaneously, resulting in a data race.  Replacing the\n- * 'std::ostream' with a 'cilk::reducer_ostream' will solve both problems: Data\n- * will appeaer in the stream in the same order as it would for the serial\n- * program, and there will be no races (no locks) on the common stream.\n- *\n- * Usage Example:\n- * ==============\n- * Assume we wish to traverse an array of objects, performing an operation on\n- * each object and writing the result to a file.  Without a reducer_ostream,\n- * we have a race on the 'output' file stream:\n- *..\n- *  void compute(std::ostream& os, double x)\n- *  {\n- *      // Perform some significant computation and print the result:\n- *      os << std::asin(x);\n- *  }\n- *\n- *  int test()\n- *  {\n- *      const std::size_t ARRAY_SIZE = 1000000;\n- *      extern double myArray[ARRAY_SIZE];\n- *\n- *      std::ofstream output(\"output.txt\");\n- *      cilk_for (std::size_t i = 0; i < ARRAY_SIZE; ++i)\n- *      {\n- *          compute(output, myArray[i]);\n- *      }\n+/** @file reducer_ostream.h\n  *\n- *      return 0;\n- *  }\n- *..\n- * The race is solved by using a reducer_ostream to proxy the 'output' file:\n- *..\n- *  void compute(cilk::reducer_ostream& os, double x)\n- *  {\n- *      // Perform some significant computation and print the result:\n- *      *os << std::asin(x);\n- *  }\n- *\n- *  int test()\n- *  {\n- *      const std::size_t ARRAY_SIZE = 1000000;\n- *      extern double myArray[ARRAY_SIZE];\n- *\n- *      std::ofstream output(\"output.txt\");\n- *      cilk::reducer_ostream hyper_output(output);\n- *      cilk_for (std::size_t i = 0; i < ARRAY_SIZE; ++i)\n- *      {\n- *          compute(hyper_output, myArray[i]);\n- *      }\n+ *  @brief Defines a class for writing to an ostream in parallel.\n  *\n- *      return 0;\n- *  }\n- *..\n- *\n- * Limitations:\n- * ============\n- * There are two possible values for the formatting flags immediately after a\n- * 'cilk_spawn' statement: they may either have the value that was set by the\n- * spawn function, or they may have default values.  Because of\n- * non-determinism in the processor scheduling, there is no way to determine\n- * which it will be.  Similarly, the formatting flags after a 'cilk_sync' may\n- * or may not have the same value as before the sync.  Therefore, one must use\n- * a disciplined coding style to avoid formatting errors.  There are two\n- * approaches to mitigating the problem: The first is to eliminate the\n- * difference between the two possible outcomes by ensuring that the spawned\n- * function always returns the flags to their initial state:\n- *..\n- *  void compute(cilk::reducer_ostream& os, double x)\n- *  {\n- *      // Perform some significant computation and print the result:\n- *      int saveprec = os.precision(5);\n- *      os << std::asin(x);\n- *      os.precision(saveprec);\n- *  }\n- *..\n- * The second approach is to write your streaming operations such that they\n- * don't depend on the previous state of the formatting flags by setting any\n- * important flags before every block of output:\n- *..\n- *      cilk_spawn compute(hyper_output, value);\n- *\n- *      hyper_output->precision(2);  // Don't depend on previous precision\n- *      *hyper_output << f();\n- *      *hyper_output << g();\n- *..\n- * Another concern is memory usage.  A reducer_ostream will buffer as much text\n- * as necessary to ensure that the order of output matches that of the serial\n- * version of the program.  If all spawn branches perform an equal amount of\n- * output, then one can expect that half of the output before a sync will be\n- * buffered in memory.  This hyperobject is therefore not well suited for\n- * serializing very large quantities of text output.\n+ *  @ingroup ReducersOstream\n+ *\n+ *  @see @ref ReducersOstream\n  */\n \n #ifndef REDUCER_OSTREAM_H_INCLUDED\n #define REDUCER_OSTREAM_H_INCLUDED\n \n #include <cilk/reducer.h>\n-#include <iostream>\n+#include <ostream>\n #include <sstream>\n \n+/** @defgroup ReducersOstream Ostream Reducers\n+ *\n+ *  Ostream reducers allow multiple strands to write to an ostream in parallel.\n+ *\n+ *  @ingroup Reducers\n+ *\n+ *  You should be familiar with @ref pagereducers \"Intel(R) Cilk(TM) Plus reducers\",\n+ *  described in file reducers.md, and particularly with @ref reducers_using,\n+ *  before trying to use the information in this file.\n+ *\n+ *  @section redostream_usage Usage Example\n+ *\n+ *  One of the most common debugging techniques is adding `print` statements\n+ *  to the code being debugged. When the code is parallelized, the results can\n+ *  be less than satisfactory, as output from multiple strands is mingled in an\n+ *  unpredictable way. Like other reducers, an ostream reducer requires minimal\n+ *  recoding to guarantee that the output from parallelized computation will be\n+ *  ordered the same as though the computation were executed serially.\n+ *\n+ *      cilk::reducer<cilk::op_ostream> r(std::cerr);\n+ *      cilk_for (int i = 0; i != data.size(); ++i) {\n+ *          *r << \"Iteration \" << i << \":\\n\";\n+ *          ... some computation ...\n+ *          *r << \"   Step 1:\" << some information;\n+ *          ... some more computation ...\n+ *          *r << \"   Step 2:\" << some more information;\n+ *          ... still more computation ...\n+ *          *r << \"   Step 3:\" << still more information;\n+ *      }\n+ *\n+ *  Output on standard error:\n+ *\n+ *      Iteration 1:\n+ *          Step 1: ...\n+ *          Step 2: ...\n+ *          Step 3: ...\n+ *      Iteration 2:\n+ *          Step 1: ...\n+ *          Step 2: ...\n+ *          Step 3: ...\n+ *      Iteration 3:\n+ *          Step 1: ...\n+ *          Step 2: ...\n+ *          Step 3: ...\n+ *      ...\n+ *\n+ *  @section redostream_overview Overview\n+ *\n+ *  An \"ostream reducer\" is not really a reducer. It uses the reducer\n+ *  technology to coordinate operations on parallel strands to achieve\n+ *  the same behavior in a parallel computation that would be seen in a\n+ *  serial computation, but it does not have a monoid. It has a \"monoid\n+ *  class,\" because that is part of the implementation framework, but it\n+ *  does not represent a mathematical monoid: there is no value type, no\n+ *  associative operation, and no identity value. The reducer is used for\n+ *  its side effect rather than to construct a value.\n+ *\n+ *  You might think of an ostream reducer as a relative of a\n+ *  @ref ReducersString \"string reducer\" which uses stream output\n+ *  syntax (`stream << value`) instead of string append syntax\n+ *  (`string += value`), and which writes its result string to an\n+ *  ostream instead of making it available as the reducer value.\n+ *\n+ *  Another difference is that \"real\" reducers protect their contained\n+ *  value quite strongly from improper access by the user. Ostream reducers,\n+ *  on the other hand, pretty much have to expose the ostream, since normal\n+ *  use of an ostream involves accessing its internal state. Furthermore,\n+ *  the ostream reducer just coordinates output to an existing ostream -\n+ *  there is nothing to keep the user from writing directly to the attached\n+ *  stream, with unpredictable results.\n+ *\n+ *  @section redostream_operations Operations\n+ *\n+ *  In the operation descriptions below, the type name `Ostream` refers to the\n+ *  reducer's ostream type, `std::basic_ostream<Char, Traits>`.\n+ *\n+ *  @subsection redostream_constructors Constructors\n+ *\n+ *  The only constructor is\n+ *\n+ *      reducer(const Ostream& os)\n+ *\n+ *  This creates a reducer that is associated with the existing ostream `os`.\n+ *  Anything \"written to\" the reducer will (eventually) be written to `os`.\n+ *\n+ *  @subsection redostream_get_set Set and Get\n+ *\n+ *  Just as a stream does not have a \"value,\" neither does an ostream\n+ *  reducer. Therefore, none of the usual `set_value`, `get_value`,\n+ *  `move_in`, or `move_out` functions are available for ostream reducers.\n+ *\n+ *  @subsection redostream_initial Initial Values\n+ *\n+ *  Ostream reducers do not have default constructors.\n+ *\n+ *  @subsection redostream_view_ops View Operations\n+ *\n+ *  An ostream reducer view is actually a kind of `std::ostream`. Therefore,\n+ *  any operation that can be used on an ostream can be used on an ostream\n+ *  reducer view. For example:\n+ *\n+ *      reducer<op_ostream> r(cout);\n+ *      *r << setw(5) << (x=1) << endl;\n+ *\n+ *\n+ *  @section redostream_performance Performance Considerations\n+ *\n+ *  Ostream reducers work by creating a string stream for each non-leftmost\n+ *  view. When two strands are merged, the contents of the string buffer of the\n+ *  right view are written to the left view. Since all non-leftmost strands are\n+ *  eventually merged, all output is eventually written to the associated\n+ *  ostream.\n+ *\n+ *  This implementation has two consequences.\n+ *\n+ *  First, all output written to an ostream reducer on a stolen strand is kept\n+ *  in memory (in a string buffer) until the strand is merged with the leftmost\n+ *  strand. This means that some portion of the output written to an ostream\n+ *  reducer during a parallel computation - half of the total output, on\n+ *  average - will temporarily be held in memory during the computation.\n+ *  Obviously, ostream reducers will work better for small and moderate amounts\n+ *  of output.\n+ *\n+ *  Second, buffered ostream reducer content must be copied at every merge.\n+ *  The total amount of copying is potentially proportional to the total amount\n+ *  of output multiplied by the number of strands stolen during the computation.\n+ *\n+ *  In short, writing to an ostream in a parallel computation with an ostream\n+ *  reducer will always be less efficient than writing the same output directly\n+ *  to the ostream in a serial computation. The value of the ostream\n+ *  reducer is not in the writing of the ostream itself, but in removing the\n+ *  race and serialization obstacles that the ostream output would cause in an\n+ *  otherwise parallelizable computation.\n+ *\n+ *\n+ *  @section redostream_state Stream State\n+ *\n+ *  The reducer implementation can correctly order the output that is written\n+ *  to an ostream. However, an ostream has additional state that controls its\n+ *  behavior, such as its formatting attributes, error state, extensible arrays, *  and registered callbacks. If these are modified during the computation, the *  reducer implementation cannot guarantee that they will be the same in a\n+ *  parallel computation as in a serial computation. In particular:\n+ *\n+ *  -   In the serial execution, the ostream state in the continuation of a\n+ *      spawn will be the same as the state at the end of the spawned function.\n+ *      In the parallel execution, if the continuation is stolen, its view will\n+ *      contain a newly created ostream with the default initial state.\n+ *  -   In the serial execution, the ostream state following a sync is the same\n+ *      as the state before the sync. In the parallel execution, if the\n+ *      continuation is stolen, then the state following the sync will be the\n+ *      same as the state at the end of some spawned function.\n+ *\n+ *  In short, you must not make any assumptions about the stream state of an\n+ *  ostream reducer:\n+ *\n+ *  -   Following a `cilk_spawn`.\n+ *  -   Following a `cilk_sync`.\n+ *  -   At the start of an iteration of a `cilk_for` loop.\n+ *  -   Following the completion of a `cilk_for` loop.\n+ *\n+ *  @section redostream_types Type and Operator Requirements\n+ *\n+ *  `std::basic_ostream<Char, Traits>` must be a valid type.\n+*/\n+\n namespace cilk {\n \n-/**\n- * @brief Class 'reducer_ostream' is the representation of a hyperobject for\n- * output text streaming.\n+/** @ingroup ReducersOstream */\n+//@{\n+\n+/** The ostream reducer view class.\n+ *\n+ *  This is the view class for reducers created with\n+ *  `cilk::reducer< cilk::op_basic_ostream<Char, Traits> >`. It holds the\n+ *  actual ostream for a parallel strand, and allows only stream output\n+ *  operations to be performed on it.\n+ *\n+ *  @note   The reducer \"dereference\" operation (`reducer::operator *()`)\n+ *          yields a reference to the view. Thus, for example, the view\n+ *          class's `<<` operation would be used in an expression like\n+ *          `*r << \"x = \" << x`, where `r` is an ostream reducer.\n+ *\n+ *  @tparam Char        The ostream element type (not the ostream type).\n+ *  @tparam Traits      The character traits type.\n+ *\n+ *  @see ReducersOstream\n+ *  @see op_basic_ostream\n  */\n-class reducer_ostream\n+template<typename Char, typename Traits>\n+class op_basic_ostream_view : public std::basic_ostream<Char, Traits>\n {\n+    typedef std::basic_ostream<Char, Traits>  base;\n+    typedef std::basic_ostream<Char, Traits>  ostream_type;\n+\n+    // A non-leftmost view is associated with a private string buffer. (The\n+    // leftmost view is associated with the buffer of the reducer's associated\n+    // ostream, so its private buffer is unused.)\n+    //\n+    std::basic_stringbuf<Char, Traits> m_buffer;\n+\n public:\n-    /// Internal representation of the per-strand view of the data for reducer_ostream\n-    class View: public std::ostream\n+\n+    /** Value type. Required by @ref monoid_with_view.\n+     */\n+    typedef ostream_type value_type;\n+\n+    /** Reduce operation. Required by @ref monoid_with_view.\n+     */\n+    void reduce(op_basic_ostream_view* other)\n     {\n-    public:\n-        /// Type of the std::stream reducer_ostream is based on\n-        typedef std::ostream Base;\n-\n-        friend class reducer_ostream;\n-\n-        View():\n-            std::ostream(0)\n-        {\n-            Base::rdbuf(&strbuf_);\n-        };\n-\n-    private:\n-        void use_ostream (const std::ostream &os)\n-        {\n-            Base::rdbuf(os.rdbuf());\n-            Base::flags(os.flags());       // Copy formatting flags\n-            Base::setstate(os.rdstate());  // Copy error state\n+        // Writing an empty buffer results in failure. Testing `sgetc()` is the\n+        // easiest way of checking for an empty buffer.\n+        if (other->m_buffer.sgetc() != Traits::eof()) {\n+            *this << (&other->m_buffer);\n         }\n+    }\n \n-    private:\n-        std::stringbuf  strbuf_;\n-    };\n+    /** Non-leftmost (identity) view constructor. The view is associated with\n+     *  its internal buffer. Required by @ref monoid_base.\n+     */\n+    op_basic_ostream_view() : base(&m_buffer) {}\n \n-public:\n-    /// Definition of data view, operation, and identity for reducer_ostream\n-    struct Monoid: monoid_base< View >\n+    /** Leftmost view constructor. The view is associated with an existing\n+     *  ostream.\n+     */\n+    op_basic_ostream_view(const ostream_type& os) : base(0)\n     {\n-        static void reduce (View *left, View *right);\n-    };\n+        base::rdbuf(os.rdbuf());       // Copy stream buffer\n+        base::flags(os.flags());       // Copy formatting flags\n+        base::setstate(os.rdstate());  // Copy error state\n+    }\n \n-private:\n-    // Hyperobject to serve up views\n-    reducer<Monoid> imp_;\n+    /** Sets/gets.\n+     *\n+     *  These are all no-ops.\n+     */\n+    //@{\n \n-    // Methods that provide the API for the reducer\n-public:\n+    void view_set_value(const value_type&)\n+        { assert(\"set_value() is not allowed on ostream reducers\" && 0); }\n+    const value_type& view_get_value() const\n+        { assert(\"get_value() is not allowed on ostream reducers\" && 0);\n+          return *this; }\n+    typedef value_type const& return_type_for_get_value;\n+    void view_move_in(const value_type&)\n+        { assert(\"move_in() is not allowed on ostream reducers\" && 0); }\n+    void view_move_out(const value_type&)\n+        { assert(\"move_out() is not allowed on ostream reducers\" && 0); }\n \n-    // Construct an initial 'reducer_ostream' from an 'std::ostream'.  The\n-    // specified 'os' stream is used as the eventual destination for all\n-    // text streamed to this hyperobject.\n-    explicit reducer_ostream(const std::ostream &os);\n+    //@}\n+};\n \n-    // Return a modifiable reference to the underlying 'ostream' object.\n-    std::ostream& get_reference();\n+/** Ostream monoid class. Instantiate the cilk::reducer template class with an\n+ *  op_basic_ostream monoid to create an ostream reducer class:\n+ *\n+ *      cilk::reducer< cilk::op_basic_string<char> > r;\n+ *\n+ *  @tparam Char        The stream element type (not the stream type).\n+ *  @tparam Traits      The character traits type.\n+ *\n+ *  @see ReducersOstream\n+ *  @see op_basic_ostream_view\n+ *  @see reducer_ostream\n+ *  @see op_ostream\n+ *  @see op_wostream\n+ */\n+template<typename Char,\n+         typename Traits = std::char_traits<Char>,\n+         bool     Align = false>\n+class op_basic_ostream :\n+    public monoid_with_view< op_basic_ostream_view<Char, Traits>, Align >\n+{\n+    typedef monoid_with_view< op_basic_ostream_view<Char, Traits>, Align >\n+            base;\n+    typedef std::basic_ostream<Char, Traits>            ostream_type;\n+    typedef provisional_guard<typename base::view_type> view_guard;\n \n-    /**\n-     * Append data from some type to the reducer_ostream\n-     *\n-     * @param v Value to be appended to the reducer_ostream\n+public:\n+\n+    /** View type of the monoid.\n      */\n-    template<typename T>\n-    std::ostream &\n-    operator<< (const T &v)\n-    {\n-        return imp_.view() << v;\n-    }\n+    typedef typename base::view_type view_type;\n \n-    /**\n-     * Append data from a std::ostream to the reducer_ostream\n+    /** @name Construct function.\n      *\n-     * @param _Pfn std::ostream to copy from\n+     *  The only supported ostream reducer constructor takes a reference to\n+     *  an existing ostream.\n+     *\n+     *  @param os   The ostream destination for receive all data written to the\n+     *              reducer.\n      */\n-    std::ostream &\n-    operator<< (std::ostream &(*_Pfn)(std::ostream &))\n+    static void construct(\n+        op_basic_ostream*   monoid,\n+        view_type*          view,\n+        const ostream_type& os)\n     {\n-        View &v = imp_.view();\n-\n-        return ((*_Pfn)(v));\n+        view_guard vg( new((void*) view) view_type(os) );\n+        vg.confirm_if( new((void*) monoid) op_basic_ostream );\n     }\n-\n-    reducer_ostream&       operator*()       { return *this; }\n-    reducer_ostream const& operator*() const { return *this; }\n-\n-    reducer_ostream*       operator->()       { return this; }\n-    reducer_ostream const* operator->() const { return this; }\n };\n \n \n-// -------------------------------------------\n-// class reducer_ostream::Monoid\n-// -------------------------------------------\n+/**\n+ *  Convenience typedef for narrow ostreams.\n+ */\n+typedef op_basic_ostream<char> op_ostream;\n \n /**\n- * Appends string from \"right\" reducer_basic_string onto the end of\n- * the \"left\". When done, the \"right\" reducer_basic_string is empty.\n+ *  Convenience typedef for wide ostreams.\n  */\n-void\n-reducer_ostream::Monoid::reduce(View *left, View *right)\n-{\n-    left->operator<< (&right->strbuf_);\n-}\n+typedef op_basic_ostream<wchar_t> op_wostream;\n \n-// --------------------------\n-// class reducer_ostream\n-// --------------------------\n+/// @cond internal\n \n-/**\n- * Construct a reducer_ostream which will write to the specified std::ostream\n+class reducer_ostream;\n+\n+/** Metafunction specialization for reducer conversion.\n  *\n- * @param os std::ostream to write to\n+ *  This specialization of the @ref legacy_reducer_downcast template class\n+ *  defined in reducer.h causes the `reducer<op_basic_ostream<char> >` class\n+ *  to have an `operator reducer_ostream& ()` conversion operator that\n+ *  statically downcasts the `reducer<op_basic_ostream<char> >` to\n+ *  `reducer_ostream`. (The reverse conversion, from `reducer_ostream` to\n+ *  `reducer<op_basic_ostream<char> >`, is just an upcast, which is provided\n+ *  for free by the language.)\n  */\n-inline\n-reducer_ostream::reducer_ostream(const std::ostream &os) :\n-    imp_()\n+template<bool Align>\n+struct legacy_reducer_downcast<\n+    reducer<op_basic_ostream<char, std::char_traits<char>, Align> > >\n {\n-    View &v = imp_.view();\n+    typedef reducer_ostream type;\n+};\n \n-    v.use_ostream(os);\n-}\n+/// @endcond\n \n-/**\n- * Get a reference to the std::ostream\n+/** Deprecated ostream reducer class.\n+ *\n+ *  reducer_ostream is the same as @ref cilk::reducer<@ref op_ostream>, except\n+ *  that reducer_ostream is a proxy for the contained view, so that ostream\n+ *  operations can be applied directly to the reducer. For example, a number is\n+ *  written to a `reducer<op_ostream>` with `*r << x`, but a number can be\n+ *  written to a `reducer_ostream` with `r << x`.\n+ *\n+ *  @deprecated Users are strongly encouraged to use `reducer<monoid>`\n+ *              reducers rather than the old wrappers like reducer_ostream. The\n+ *              `reducer<monoid>` reducers show the reducer/monoid/view\n+ *              architecture more clearly, are more consistent in their\n+ *              implementation, and present a simpler model for new\n+ *              user-implemented reducers.\n+ *\n+ *  @note   Implicit conversions are provided between `%reducer_ostream`\n+ *          and `reducer<%op_ostream>`. This allows incremental code\n+ *          conversion: old code that used  `%reducer_ostream` can pass a\n+ *          `%reducer_ostream` to a converted function that now expects a\n+ *          pointer or reference to a `reducer<%op_ostream>`, and vice versa.\n+ *\n+ *  @tparam Char        The stream element type (not the stream type).\n+ *  @tparam Traits      The character traits type.\n+ *\n+ *  @see op_ostream\n+ *  @see reducer\n+ *  @see ReducersOstream\n  */\n-inline\n-std::ostream &\n-reducer_ostream::get_reference()\n+class reducer_ostream :\n+      public reducer<op_basic_ostream<char, std::char_traits<char>, true> >\n {\n-    View &v = imp_.view();\n+    typedef reducer<op_basic_ostream<char, std::char_traits<char>, true> > base;\n+    using base::view;\n+public:\n \n-    return v;\n-}\n+    /// The view type for the reducer.\n+    typedef base::view_type        View;\n \n-} // namespace cilk\n+    /// The monoid type for the reducer.\n+    typedef base::monoid_type      Monoid;\n+\n+    /** Constructs an initial `reducer_ostream` from a `std::ostream`.  The\n+     *  specified stream is used as the eventual destination for all text\n+     *  streamed to this hyperobject.\n+     */\n+    explicit reducer_ostream(const std::ostream &os) : base(os) {}\n+\n+    /** Returns a modifiable reference to the underlying 'ostream' object.\n+     */\n+    std::ostream& get_reference() { return view(); }\n+\n+    /** Writes to the ostream.\n+     */\n+    template<typename T>\n+    std::ostream& operator<< (const T &v)\n+    {\n+        return view() << v;\n+    }\n+\n+    /**\n+     * Calls a manipulator.\n+     *\n+     * @param _Pfn Pointer to the manipulator function.\n+     */\n+    reducer_ostream& operator<< (std::ostream &(*_Pfn)(std::ostream &))\n+    {\n+        (*_Pfn)(view());\n+        return *this;\n+    }\n+\n+    /** @name Dereference\n+     *  @details Dereferencing a wrapper is a no-op. It simply returns the\n+     *  wrapper. Combined with the rule that the wrapper forwards view\n+     *  operations to its contained view, this means that view operations can\n+     *  be written the same way on reducers and wrappers, which is convenient\n+     *  for incrementally converting old code using wrappers to use reducers\n+     *  instead. That is:\n+     *\n+     *      reducer<op_ostream> r;\n+     *      *r << \"a\";      // *r returns the view\n+     *                      // operator<<() is a view member function\n+     *\n+     *      reducer_ostream w;\n+     *      *w << \"a\";      // *w returns the wrapper\n+     *                      // operator<<() is a wrapper member function\n+     *                      // that calls the corresponding view function\n+     */\n+    //@{\n+    reducer_ostream&       operator*()       { return *this; }\n+    reducer_ostream const& operator*() const { return *this; }\n \n-#endif //  REDUCER_OSTREAM_H_INCLUDED\n+    reducer_ostream*       operator->()       { return this; }\n+    reducer_ostream const* operator->() const { return this; }\n+    //@}\n+\n+    /** @name Upcast\n+     *  @details In Intel Cilk Plus library 0.9, reducers were always cache-aligned.\n+     *  In library  1.0, reducer cache alignment is optional. By default,\n+     *  reducers are unaligned (i.e., just naturally aligned), but legacy\n+     *  wrappers inherit from cache-aligned reducers for binary compatibility.\n+     *\n+     *  This means that a wrapper will automatically be upcast to its aligned\n+     *  reducer base class. The following conversion operators provide\n+     *  pseudo-upcasts to the corresponding unaligned reducer class.\n+     */\n+    //@{\n+    operator reducer<op_ostream>& ()\n+    {\n+        return *reinterpret_cast< reducer<op_ostream>* >(this);\n+    }\n+    operator const reducer<op_ostream>& () const\n+    {\n+        return *reinterpret_cast< const reducer<op_ostream>* >(this);\n+    }\n+    //@}\n+};\n+\n+} // namespace cilk\n \n+#endif // REDUCER_OSTREAM_H_INCLUDED"}, {"sha": "9af65d553417c311b549d0417a54c06764e5305e", "filename": "libcilkrts/include/cilk/reducer_string.h", "status": "modified", "additions": 116, "deletions": 82, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Freducer_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Freducer_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Fcilk%2Freducer_string.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,10 +1,8 @@\n /*  reducer_string.h                  -*- C++ -*-\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -19,7 +17,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -32,6 +29,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  */\n \n /** @file reducer_string.h\n@@ -52,14 +63,14 @@\n \n /** @defgroup ReducersString String Reducers\n  *\n- *  String reducers allow the creation of a string by concatenating a set of \n+ *  String reducers allow the creation of a string by concatenating a set of\n  *  strings or characters in parallel.\n  *\n  *  @ingroup Reducers\n  *\n- *  You should be familiar with @ref pagereducers \"Cilk reducers\", described in\n- *  file reducers.md, and particularly with @ref reducers_using, before trying\n- *  to use the information in this file.\n+ *  You should be familiar with @ref pagereducers \"Intel(R) Cilk(TM) Plus reducers\",\n+ *  described in file reducers.md, and particularly with @ref reducers_using,\n+ *  before trying to use the information in this file.\n  *\n  *  @section redstring_usage Usage Example\n  *\n@@ -79,24 +90,24 @@\n  *  @subsection redstring_monoid_values Value Set\n  *\n  *  The value set of a string reducer is the set of values of the class\n- *  `std::basic_string<Char, Traits, Alloc>`, which we refer to as \u201cthe\n- *  reducer\u2019s string type\u201d.\n+ *  `std::basic_string<Char, Traits, Alloc>`, which we refer to as \"the\n+ *  reducer's string type\".\n  *\n  *  @subsection redstring_monoid_operator Operator\n  *\n- *  The operator of a string reducer is the string concatenation operator, \n- *  defined by the \u201c`+`\u201d binary operator on the reducer\u2019s string type.\n+ *  The operator of a string reducer is the string concatenation operator,\n+ *  defined by the \"`+`\" binary operator on the reducer's string type.\n  *\n  *  @subsection redstring_monoid_identity Identity\n  *\n- *  The identity value of a string reducer is the empty string, which is the \n+ *  The identity value of a string reducer is the empty string, which is the\n  *  value of the expression\n  *  `std::basic_string<Char, Traits, Alloc>([allocator])`.\n  *\n  *  @section redstring_operations Operations\n  *\n  *  In the operation descriptions below, the type name `String` refers to the\n- *  reducer\u2019s string type, `std::basic_string<Char, Traits, Alloc>`.\n+ *  reducer's string type, `std::basic_string<Char, Traits, Alloc>`.\n  *\n  *  @subsection redstring_constructors Constructors\n  *\n@@ -151,8 +162,8 @@\n  *  the string computation.\n  *\n  *  The strings for new views are created (by the view identity constructor)\n- *  using the same allocator as the string that was created when the reducer \n- *  was constructed. Note that this allocator is determined when the reducer is \n+ *  using the same allocator as the string that was created when the reducer\n+ *  was constructed. Note that this allocator is determined when the reducer is\n  *  constructed. The following two examples may have very different behavior:\n  *\n  *      string<Char, Traits, Allocator> a_string;\n@@ -166,7 +177,7 @@\n  *      ... parallel computation ...\n  *      reducer2.move_out(a_string);\n  *\n- *  *   `reducer1` will be constructed with the same allocator as `a_string`, \n+ *  *   `reducer1` will be constructed with the same allocator as `a_string`,\n  *      because the string was specified in the constructor. The `move_in`\n  *      and `move_out` can therefore be done with a `swap` in constant time.\n  *  *   `reducer2` will be constructed with a _default_ allocator of type\n@@ -175,8 +186,8 @@\n  *      in _O(N)_ time.\n  *\n  *  (All instances of an allocator type with no internal state (like\n- *  `std::allocator`) are \u201cthe same\u201d. You only need to worry about the \u201csame\n- *  allocator\u201d issue when you create string reducers with custom allocator\n+ *  `std::allocator`) are \"the same\". You only need to worry about the \"same\n+ *  allocator\" issue when you create string reducers with custom allocator\n  *  types.)\n  *\n  *  @section redstring_types Type and Operator Requirements\n@@ -192,12 +203,12 @@ namespace cilk {\n /** The string append reducer view class.\n  *\n  *  This is the view class for reducers created with\n- *  `cilk::reducer< cilk::op_basic_string<Type, Traits, Allocator> >`. It holds\n+ *  `cilk::reducer< cilk::op_basic_string<Char, Traits, Allocator> >`. It holds\n  *  the accumulator variable for the reduction, and allows only append\n  *  operations to be performed on it.\n  *\n- *  @note   The reducer \u201cdereference\u201d operation (`reducer::operator *()`) \n- *          yields a reference to the view. Thus, for example, the view class\u2019s\n+ *  @note   The reducer \"dereference\" operation (`reducer::operator *()`)\n+ *          yields a reference to the view. Thus, for example, the view class's\n  *          `append` operation would be used in an expression like\n  *          `r->append(a)`, where `r` is a string append reducer variable.\n  *\n@@ -215,7 +226,7 @@ class op_basic_string_view\n     typedef std::list<string_type>                  list_type;\n     typedef typename string_type::size_type         size_type;\n \n-    // The view's value is represented by a list of strings and a single \n+    // The view's value is represented by a list of strings and a single\n     // string. The value is the concatenation of the strings in the list with\n     // the single string at the end. All string operations apply to the single\n     // string; reduce operations cause lists of partial strings from multiple\n@@ -224,7 +235,7 @@ class op_basic_string_view\n     mutable string_type                             m_string;\n     mutable list_type                               m_list;\n \n-    // Before returning the value of the reducer, concatenate all the strings \n+    // Before returning the value of the reducer, concatenate all the strings\n     // in the list with the single string.\n     //\n     void flatten() const\n@@ -263,11 +274,11 @@ class op_basic_string_view\n         return m_string.get_allocator();\n     }\n \n-    /** Reduction operation.\n+    /** Reduces the views of two strands.\n      *\n      *  This function is invoked by the @ref op_basic_string monoid to combine\n-     *  the views of two strands when the right strand merges with the left \n-     *  one. It appends the value contained in the right-strand view to the \n+     *  the views of two strands when the right strand merges with the left\n+     *  one. It appends the value contained in the right-strand view to the\n      *  value contained in the left-strand view, and leaves the value in the\n      *  right-strand view undefined.\n      *\n@@ -294,7 +305,7 @@ class op_basic_string_view\n \n     //@}\n \n-    /** @name Pass constructor arguments through to the string constructor.\n+    /** @name Passes constructor arguments to the string constructor.\n      */\n     //@{\n \n@@ -351,16 +362,18 @@ class op_basic_string_view\n         m_string.clear();\n     }\n \n-    void view_set_value(const string_type& s) \n+    void view_set_value(const string_type& s)\n         { m_list.clear(); m_string = s; }\n \n-    string_type const& view_get_value()     const \n+    string_type const& view_get_value()     const\n         { flatten(); return m_string; }\n \n-    string_type      & view_get_reference()       \n+    typedef string_type const& return_type_for_get_value;\n+\n+    string_type      & view_get_reference()\n         { flatten(); return m_string; }\n \n-    string_type const& view_get_reference() const \n+    string_type const& view_get_reference() const\n         { flatten(); return m_string; }\n \n     //@}\n@@ -403,10 +416,10 @@ class op_basic_string_view\n  *  @tparam Traits  The character traits type.\n  *  @tparam Alloc   The string allocator type.\n  *  @tparam Align   If `false` (the default), reducers instantiated on this\n- *                  monoid will be naturally aligned (the Cilk library 1.0\n+ *                  monoid will be naturally aligned (the Intel Cilk Plus library 1.0\n  *                  behavior). If `true`, reducers instantiated on this monoid\n- *                  will be cache-aligned for binary compatibility with \n- *                  reducers in Cilk library version 0.9.\n+ *                  will be cache-aligned for binary compatibility with\n+ *                  reducers in Intel Cilk Plus library version 0.9.\n  *\n  *  @see ReducersString\n  *  @see op_basic_string_view\n@@ -418,11 +431,13 @@ template<typename Char,\n          typename Traits = std::char_traits<Char>,\n          typename Alloc = std::allocator<Char>,\n          bool     Align = false>\n-class op_basic_string : \n+class op_basic_string :\n     public monoid_with_view< op_basic_string_view<Char, Traits, Alloc>, Align >\n {\n     typedef monoid_with_view< op_basic_string_view<Char, Traits, Alloc>, Align >\n             base;\n+    typedef provisional_guard<typename base::view_type> view_guard;\n+\n     Alloc m_allocator;\n \n public:\n@@ -442,56 +457,75 @@ class op_basic_string :\n     op_basic_string(const Alloc& allocator = Alloc()) : m_allocator(allocator)\n     {}\n \n-    /** Create an identity view.\n+    /** Creates an identity view.\n      *\n      *  String view identity constructors take the string allocator as an\n      *  argument.\n      *\n      *  @param v    The address of the uninitialized memory in which the view\n      *              will be constructed.\n      */\n-    void identity(view_type *v) const { ::new((void*) v) view_type(m_allocator); }\n+    void identity(view_type *v) const\n+        { ::new((void*) v) view_type(m_allocator); }\n \n     /** @name Construct functions\n      *\n      *  A string append reduction monoid must have a copy of the allocator of\n-     *  the leftmost view\u2019s string, so that it can use it in the `identity`\n+     *  the leftmost view's string, so that it can use it in the `identity`\n      *  operation. This, in turn, requires that string reduction monoids have a\n      *  specialized `construct()` function.\n      *\n      *  All string reducer monoid `construct()` functions first construct the\n      *  leftmost view, using the arguments that were passed in from the reducer\n-     *  constructor. They then call the view\u2019s `get_allocator()` function to\n+     *  constructor. They then call the view's `get_allocator()` function to\n      *  get the string allocator from the string in the leftmost view, and pass\n      *  that to the monoid constructor.\n      */\n     //@{\n \n     static void construct(op_basic_string* monoid, view_type* view)\n-        { provisional( new ((void*)view) view_type() ).confirm_if(\n-            new ((void*)monoid) op_basic_string(view->get_allocator()) ); }\n+    {\n+        view_guard vg( new((void*) view) view_type() );\n+        vg.confirm_if(\n+            new((void*) monoid) op_basic_string(view->get_allocator()) ); \n+    }\n \n     template <typename T1>\n-    static void construct(op_basic_string* monoid, view_type* view, const T1& x1)\n-        { provisional( new ((void*)view) view_type(x1) ).confirm_if(\n-            new ((void*)monoid) op_basic_string(view->get_allocator()) ); }\n+    static void construct(op_basic_string* monoid, view_type* view,\n+                          const T1& x1)\n+    {\n+        view_guard vg( new((void*) view) view_type(x1) );\n+        vg.confirm_if(\n+            new((void*) monoid) op_basic_string(view->get_allocator()) ); \n+    }\n \n     template <typename T1, typename T2>\n-    static void construct(op_basic_string* monoid, view_type* view, const T1& x1, const T2& x2)\n-        { provisional( new ((void*)view) view_type(x1, x2) ).confirm_if(\n-            new ((void*)monoid) op_basic_string(view->get_allocator()) ); }\n+    static void construct(op_basic_string* monoid, view_type* view,\n+                          const T1& x1, const T2& x2)\n+    {\n+        view_guard vg( new((void*) view) view_type(x1, x2) );\n+        vg.confirm_if(\n+            new((void*) monoid) op_basic_string(view->get_allocator()) ); \n+    }\n \n     template <typename T1, typename T2, typename T3>\n-    static void construct(op_basic_string* monoid, view_type* view, const T1& x1, const T2& x2,\n-                            const T3& x3)\n-        { provisional( new ((void*)view) view_type(x1, x2, x3) ).confirm_if(\n-            new ((void*)monoid) op_basic_string(view->get_allocator()) ); }\n+    static void construct(op_basic_string* monoid, view_type* view,\n+                          const T1& x1, const T2& x2, const T3& x3)\n+    {\n+        view_guard vg( new((void*) view) view_type(x1, x2, x3) );\n+        vg.confirm_if(\n+            new((void*) monoid) op_basic_string(view->get_allocator()) ); \n+    }\n \n     template <typename T1, typename T2, typename T3, typename T4>\n-    static void construct(op_basic_string* monoid, view_type* view, const T1& x1, const T2& x2,\n-                            const T3& x3, const T4& x4)\n-        { provisional( new ((void*)view) view_type(x1, x2, x3, x4) ).confirm_if(\n-            new ((void*)monoid) op_basic_string(view->get_allocator()) ); }\n+    static void construct(op_basic_string* monoid, view_type* view,\n+                          const T1& x1, const T2& x2, const T3& x3,\n+                          const T4& x4)\n+    {\n+        view_guard vg( new((void*) view) view_type(x1, x2, x3, x4) );\n+        vg.confirm_if(\n+            new((void*) monoid) op_basic_string(view->get_allocator()) ); \n+    }\n \n     //@}\n };\n@@ -500,7 +534,7 @@ class op_basic_string :\n /** Convenience typedef for 8-bit strings\n  */\n typedef op_basic_string<char> op_string;\n-    \n+\n /** Convenience typedef for 16-bit strings\n  */\n typedef op_basic_string<wchar_t> op_wstring;\n@@ -516,13 +550,13 @@ typedef op_basic_string<wchar_t> op_wstring;\n  *  with `r.push_back(a)`.\n  *\n  *  @deprecated Users are strongly encouraged to use `reducer<monoid>`\n- *              reducers rather than the old wrappers like reducer_basic_string. \n+ *              reducers rather than the old wrappers like reducer_basic_string.\n  *              The `reducer<monoid>` reducers show the reducer/monoid/view\n  *              architecture more clearly, are more consistent in their\n  *              implementation, and present a simpler model for new\n  *              user-implemented reducers.\n  *\n- *  @note   Implicit conversions are provided between `%reducer_basic_string` \n+ *  @note   Implicit conversions are provided between `%reducer_basic_string`\n  *          and `reducer<%op_basic_string>`. This allows incremental code\n  *          conversion: old code that used `%reducer_basic_string` can pass a\n  *          `%reducer_basic_string` to a converted function that now expects a\n@@ -540,17 +574,17 @@ typedef op_basic_string<wchar_t> op_wstring;\n template<typename Char,\n          typename Traits = std::char_traits<Char>,\n          typename Alloc = std::allocator<Char> >\n-class reducer_basic_string : \n+class reducer_basic_string :\n     public reducer< op_basic_string<Char, Traits, Alloc, true> >\n {\n     typedef reducer< op_basic_string<Char, Traits, Alloc, true> > base;\n     using base::view;\n public:\n \n-    /// The reducer\u2019s string type.\n+    /// The reducer's string type.\n     typedef typename base::value_type       string_type;\n \n-    /// The reducer\u2019s primitive component type.\n+    /// The reducer's primitive component type.\n     typedef Char                            basic_value_type;\n \n     /// The string size type.\n@@ -566,7 +600,7 @@ class reducer_basic_string :\n     /** @name Constructors\n      */\n     //@{\n-    \n+\n     /** @name Forward constructor calls to the base class.\n      *\n      *  All basic_string constructor forms are supported.\n@@ -575,45 +609,45 @@ class reducer_basic_string :\n     reducer_basic_string() {}\n \n     template <typename T1>\n-    reducer_basic_string(const T1& x1) : \n+    reducer_basic_string(const T1& x1) :\n         base(x1) {}\n \n     template <typename T1, typename T2>\n-    reducer_basic_string(const T1& x1, const T2& x2) : \n+    reducer_basic_string(const T1& x1, const T2& x2) :\n         base(x1, x2) {}\n \n     template <typename T1, typename T2, typename T3>\n-    reducer_basic_string(const T1& x1, const T2& x2, const T3& x3) : \n+    reducer_basic_string(const T1& x1, const T2& x2, const T3& x3) :\n         base(x1, x2, x3) {}\n \n     template <typename T1, typename T2, typename T3, typename T4>\n     reducer_basic_string(const T1& x1, const T2& x2, const T3& x3, const T4& x4) :\n         base(x1, x2, x3, x4) {}\n     //@}\n \n-    /** Allow mutable access to the string within the current view.\n+    /** Allows mutable access to the string within the current view.\n      *\n-     *  @warning    If this method is called before the parallel calculation is \n+     *  @warning    If this method is called before the parallel calculation is\n      *              complete, the string returned by this method will be a\n      *              partial result.\n      *\n      *  @returns    A mutable reference to the string within the current view.\n      */\n-    string_type &get_reference() \n+    string_type &get_reference()\n         { return view().view_get_reference(); }\n \n-    /** Allow read-only access to the string within the current view.\n+    /** Allows read-only access to the string within the current view.\n      *\n      *  @warning    If this method is called before the parallel calculation is\n      *              complete, the string returned by this method will be a\n      *              partial result.\n      *\n      *  @returns    A const reference to the string within the current view.\n      */\n-    string_type const &get_reference() const \n+    string_type const &get_reference() const\n         { return view().view_get_reference(); }\n \n-    /** @name Append to the string.\n+    /** @name Appends to the string.\n      *\n      *  These operations are simply forwarded to the view.\n      */\n@@ -629,7 +663,7 @@ class reducer_basic_string :\n     void append(size_type count, Char ch)\n         { view().append(count, ch); }\n \n-    // Append to the string\n+    // Appends to the string\n     reducer_basic_string<Char, Traits, Alloc> &operator+=(Char ch)\n         { view() += ch; return *this; }\n     reducer_basic_string<Char, Traits, Alloc> &operator+=(const Char *ptr)\n@@ -664,10 +698,10 @@ class reducer_basic_string :\n     //@}\n \n     /** @name Upcast\n-     *  @details In Cilk library 0.9, reducers were always cache-aligned. In\n-     *  library  1.0, reducer cache alignment is optional. By default, reducers\n-     *  are unaligned (i.e., just naturally aligned), but legacy wrappers\n-     *  inherit from cache-aligned reducers for binary compatibility.\n+     *  @details In Intel Cilk Plus library 0.9, reducers were always cache-aligned.\n+     *  In library 1.0, reducer cache alignment is optional. By default,\n+     *  reducers are unaligned (i.e., just naturally aligned), but legacy\n+     *  wrappers inherit from cache-aligned reducers for binary compatibility.\n      *\n      *  This means that a wrapper will automatically be upcast to its aligned\n      *  reducer base class. The following conversion operators provide\n@@ -676,14 +710,14 @@ class reducer_basic_string :\n     //@{\n     operator reducer< op_basic_string<Char, Traits, Alloc, false> >& ()\n     {\n-        return *reinterpret_cast< reducer< \n-            op_basic_string<Char, Traits, Alloc, false> >* \n+        return *reinterpret_cast< reducer<\n+            op_basic_string<Char, Traits, Alloc, false> >*\n         >(this);\n     }\n     operator const reducer< op_basic_string<Char, Traits, Alloc, false> >& () const\n     {\n         return *reinterpret_cast< const reducer<\n-            op_basic_string<Char, Traits, Alloc, false> >* \n+            op_basic_string<Char, Traits, Alloc, false> >*\n         >(this);\n     }\n     //@}\n@@ -703,11 +737,11 @@ typedef reducer_basic_string<wchar_t> reducer_wstring;\n /// @cond internal\n /** Metafunction specialization for reducer conversion.\n  *\n- *  This specialization of the @ref legacy_reducer_downcast template class \n+ *  This specialization of the @ref legacy_reducer_downcast template class\n  *  defined in reducer.h causes the `reducer< op_basic_string<Char> >` class to\n  *  have an `operator reducer_basic_string<Char>& ()` conversion operator that\n  *  statically downcasts the `reducer<op_basic_string>` to the corresponding\n- *  `reducer_basic_string` type. (The reverse conversion, from \n+ *  `reducer_basic_string` type. (The reverse conversion, from\n  *  `reducer_basic_string` to `reducer<op_basic_string>`, is just an upcast,\n  *  which is provided for free by the language.)\n  *"}, {"sha": "fa53eee1d24383ea939a5082576d98ecf4daa7e8", "filename": "libcilkrts/include/cilk/reducer_vector.h", "status": "added", "additions": 533, "deletions": 0, "changes": 533, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Freducer_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilk%2Freducer_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Fcilk%2Freducer_vector.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -0,0 +1,533 @@\n+/*  reducer_vector.h                  -*- C++ -*-\n+ *\n+ *  Copyright (C) 2009-2016, Intel Corporation\n+ *  All rights reserved.\n+ *  \n+ *  Redistribution and use in source and binary forms, with or without\n+ *  modification, are permitted provided that the following conditions\n+ *  are met:\n+ *  \n+ *    * Redistributions of source code must retain the above copyright\n+ *      notice, this list of conditions and the following disclaimer.\n+ *    * Redistributions in binary form must reproduce the above copyright\n+ *      notice, this list of conditions and the following disclaimer in\n+ *      the documentation and/or other materials provided with the\n+ *      distribution.\n+ *    * Neither the name of Intel Corporation nor the names of its\n+ *      contributors may be used to endorse or promote products derived\n+ *      from this software without specific prior written permission.\n+ *  \n+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+ *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+ *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+ *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+ *  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n+ *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS\n+ *  OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\n+ *  AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n+ *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n+ */\n+\n+/** @file reducer_vector.h\n+ *\n+ *  @brief Defines classes for doing parallel vector creation by appending.\n+ *\n+ *  @ingroup ReducersVector\n+ *\n+ *  @see ReducersVector\n+ */\n+\n+#ifndef REDUCER_VECTOR_H_INCLUDED\n+#define REDUCER_VECTOR_H_INCLUDED\n+\n+#include <cilk/reducer.h>\n+#include <vector>\n+#include <list>\n+\n+/** @defgroup ReducersVector Vector Reducers\n+ *\n+ *  Vector reducers allow the creation of a standard vector by\n+ *  appending a set of elements in parallel.\n+ *\n+ *  @ingroup Reducers\n+ *\n+ *  You should be familiar with @ref pagereducers \"Intel(R) Cilk(TM) Plus reducers\",\n+ *  described in file `reducers.md`, and particularly with @ref reducers_using,\n+ *  before trying to use the information in this file.\n+ *\n+ *  @section redvector_usage Usage Example\n+ *\n+ *      typedef ... SourceData;\n+ *      typedef ... ResultData;\n+ *      vector<SourceData> input;\n+ *      ResultData expensive_computation(const SourceData& x);\n+ *      cilk::reducer< cilk::op_vector<ResultData> > r;\n+ *      cilk_for (int i = 0; i != input.size(); ++i) {\n+ *          r->push_back(expensive_computation(input[i]));\n+ *      }\n+ *      vector result;\n+ *      r.move_out(result);\n+ *\n+ *  @section redvector_monoid The Monoid\n+ *\n+ *  @subsection redvector_monoid_values Value Set\n+ *\n+ *  The value set of a vector reducer is the set of values of the class\n+ *  `std::vector<Type, Alloc>`, which we refer to as \"the reducer's vector\n+ *  type\".\n+ *\n+ *  @subsection redvector_monoid_operator Operator\n+ *\n+ *  The operator of a vector reducer is vector concatenation.\n+ *\n+ *  @subsection redvector_monoid_identity Identity\n+ *\n+ *  The identity value of a vector reducer is the empty vector, which is the\n+ *  value of the expression `std::vector<Type, Alloc>([allocator])`.\n+ *\n+ *  @section redvector_operations Operations\n+ *\n+ *  In the operation descriptions below, the type name `Vector` refers to\n+ *  the reducer's vector type, `std::vector<Type, Alloc>`.\n+ *\n+ *  @subsection redvector_constructors Constructors\n+ *\n+ *  Any argument list which is valid for a `std::vector` constructor is valid\n+ *  for a vector reducer constructor. The usual move-in constructor is also\n+ *  provided:\n+ *\n+ *      reducer(move_in(Vector& variable))\n+ *\n+ *  @subsection redvector_get_set Set and Get\n+ *\n+ *      void r.set_value(const Vector& value)\n+ *      const Vector& = r.get_value() const\n+ *      void r.move_in(Vector& variable)\n+ *      void r.move_out(Vector& variable)\n+ *\n+ *  @subsection redvector_initial Initial Values\n+ *\n+ *  A vector reducer with no constructor arguments, or with only an allocator\n+ *  argument, will initially contain the identity value, an empty vector.\n+ *\n+ *  @subsection redvector_view_ops View Operations\n+ *\n+ *  The view of a vector reducer provides the following member functions:\n+ *\n+ *      void push_back(const Type& element)\n+ *      void insert_back(const Type& element)\n+ *      void insert_back(Vector::size_type n, const Type& element)\n+ *      template <typename Iter> void insert_back(Iter first, Iter last)\n+ *\n+ *  The `push_back` functions is the same as the corresponding `std::vector`\n+ *  function. The `insert_back` function is the same as the `std::vector`\n+ *  `insert` function, with the first parameter fixed to the end of the vector.\n+ *\n+ *  @section redvector_performance Performance Considerations\n+ *\n+ *  Vector reducers work by creating a vector for each view, collecting those\n+ *  vectors in a list, and then concatenating them into a single result vector\n+ *  at the end of the computation. This last step takes place in serial code,\n+ *  and necessarily takes time proportional to the length of the result vector.\n+ *  Thus, a parallel vector reducer cannot actually speed up the time spent\n+ *  directly creating the vector. This trivial example would probably be slower\n+ *  (because of reducer overhead) than the corresponding serial code:\n+ *\n+ *      vector<T> a;\n+ *      reducer<op_vector<T> > r;\n+ *      cilk_for (int i = 0; i != a.length(); ++i) {\n+ *          r->push_back(a[i]);\n+ *      }\n+ *      vector<T> result;\n+ *      r.move_out(result);\n+ *\n+ *  What a vector reducer _can_ do is to allow the _remainder_ of the\n+ *  computation to be done in parallel, without having to worry about\n+ *  managing the vector computation.\n+ *\n+ *  The vectors for new views are created (by the view identity constructor)\n+ *  using the same allocator as the vector that was created when the reducer\n+ *  was constructed. Note that this allocator is determined when the reducer\n+ *  is constructed. The following two examples may have very different\n+ *  behavior:\n+ *\n+ *      vector<Type, Allocator> a_vector;\n+ *\n+ *      reducer< op_vector<Type, Allocator> reducer1(move_in(a_vector));\n+ *      ... parallel computation ...\n+ *      reducer1.move_out(a_vector);\n+ *\n+ *      reducer< op_vector<Type, Allocator> reducer2;\n+ *      reducer2.move_in(a_vector);\n+ *      ... parallel computation ...\n+ *      reducer2.move_out(a_vector);\n+ *\n+ *  *   `reducer1` will be constructed with the same allocator as `a_vector`,\n+ *      because the vector was specified in the constructor. The `move_in`\n+ *      and`move_out` can therefore be done with a `swap` in constant time.\n+ *  *   `reducer2` will be constructed with a _default_ allocator of type\n+ *      `Allocator`, which may not be the same as the allocator of `a_vector`.\n+ *      Therefore, the `move_in` and `move_out` may have to be done with a\n+ *      copy in _O(N)_ time.\n+ *\n+ *  (All instances of an allocator class with no internal state (like\n+ *  `std::allocator`) are \"the same\". You only need to worry about the \"same\n+ *  allocator\" issue when you create vector reducers with a custom allocator\n+ *  class that has data members.)\n+ *\n+ *  @section redvector_types Type and Operator Requirements\n+ *\n+ *  `std::vector<Type, Alloc>` must be a valid type.\n+*/\n+\n+namespace cilk {\n+\n+/** @ingroup ReducersVector */\n+//@{\n+\n+/** @brief The vector reducer view class.\n+ *\n+ *  This is the view class for reducers created with\n+ *  `cilk::reducer< cilk::op_vector<Type, Allocator> >`. It holds the\n+ *  accumulator variable for the reduction, and allows only append operations\n+ *  to be performed on it.\n+ *\n+ *  @note   The reducer \"dereference\" operation (`reducer::operator *()`)\n+ *          yields a reference to the view. Thus, for example, the view\n+ *          class's `push_back` operation would be used in an expression like\n+ *          `r->push_back(a)`, where `r` is a vector reducer variable.\n+ *\n+ *  @tparam Type        The vector element type (not the vector type).\n+ *  @tparam Alloc       The vector allocator type.\n+ *\n+ *  @see @ref ReducersVector\n+ *  @see op_vector\n+ */\n+template<typename Type, typename Alloc>\n+class op_vector_view\n+{\n+    typedef std::vector<Type, Alloc>                vector_type;\n+    typedef std::list<vector_type, typename Alloc::template rebind<vector_type>::other>\n+                                                    list_type;\n+    typedef typename vector_type::size_type         size_type;\n+\n+    // The view's value is represented by a list of vectors and a single\n+    // vector. The value is the concatenation of the vectors in the list with\n+    // the single vector at the end. All vector operations apply to the single\n+    // vector; reduce operations cause lists of partial vectors from multiple\n+    // strands to be combined.\n+    //\n+    mutable vector_type                             m_vector;\n+    mutable list_type                               m_list;\n+\n+    // Before returning the value of the reducer, concatenate all the vectors\n+    // in the list with the single vector.\n+    //\n+    void flatten() const\n+    {\n+        if (m_list.empty()) return;\n+\n+        typename list_type::iterator i;\n+\n+        size_type len = m_vector.size();\n+        for (i = m_list.begin(); i != m_list.end(); ++i)\n+            len += i->size();\n+\n+        vector_type result(get_allocator());\n+        result.reserve(len);\n+\n+        for (i = m_list.begin(); i != m_list.end(); ++i)\n+            result.insert(result.end(), i->begin(), i->end());\n+        m_list.clear();\n+\n+        result.insert(result.end(), m_vector.begin(), m_vector.end());\n+        result.swap(m_vector);\n+    }\n+\n+public:\n+\n+    /** @name Monoid support.\n+     */\n+    //@{\n+\n+    /// Required by cilk::monoid_with_view\n+    typedef vector_type value_type;\n+\n+    /// Required by @ref op_vector\n+    Alloc get_allocator() const\n+    {\n+        return m_vector.get_allocator();\n+    }\n+\n+    /** Reduces the views of two strands.\n+     *\n+     *  This function is invoked by the @ref op_vector monoid to combine\n+     *  the views of two strands when the right strand merges with the left\n+     *  one. It appends the value contained in the right-strand view to the\n+     *  value contained in the left-strand view, and leaves the value in the\n+     *  right-strand view undefined.\n+     *\n+     *  @param  other   A pointer to the right-strand view. (`this` points to\n+     *                  the left-strand view.)\n+     *\n+     *  @note   Used only by the @ref op_vector monoid to implement the\n+     *          monoid reduce operation.\n+     */\n+    void reduce(op_vector_view* other)\n+    {\n+        if (!other->m_vector.empty() || !other->m_list.empty()) {\n+            // (list, string) + (other_list, other_string) =>\n+            //      (list + {string} + other_list, other_string)\n+            if (!m_vector.empty()) {\n+                // simulate m_list.push_back(std::move(m_vector))\n+                m_list.push_back(vector_type(get_allocator()));\n+                m_list.back().swap(m_vector);\n+            }\n+            m_list.splice(m_list.end(), other->m_list);\n+            m_vector.swap(other->m_vector);\n+        }\n+    }\n+\n+    //@}\n+\n+    /** @name Passes constructor arguments to the vector constructor.\n+     */\n+    //@{\n+\n+    op_vector_view() :\n+        m_vector(), m_list(get_allocator()) {}\n+\n+    template <typename T1>\n+    op_vector_view(const T1& x1) :\n+        m_vector(x1), m_list(get_allocator()) {}\n+\n+    template <typename T1, typename T2>\n+    op_vector_view(const T1& x1, const T2& x2) :\n+        m_vector(x1, x2), m_list(get_allocator()) {}\n+\n+    template <typename T1, typename T2, typename T3>\n+    op_vector_view(const T1& x1, const T2& x2, const T3& x3) :\n+        m_vector(x1, x2, x3), m_list(get_allocator()) {}\n+\n+    template <typename T1, typename T2, typename T3, typename T4>\n+    op_vector_view(const T1& x1, const T2& x2, const T3& x3, const T4& x4) :\n+        m_vector(x1, x2, x3, x4), m_list(get_allocator()) {}\n+\n+    //@}\n+\n+    /** Move-in constructor.\n+     */\n+    explicit op_vector_view(cilk::move_in_wrapper<value_type> w) :\n+        m_vector(w.value().get_allocator()),\n+        m_list(w.value().get_allocator())\n+    {\n+        m_vector.swap(w.value());\n+    }\n+\n+    /** @name Reducer support.\n+     */\n+    //@{\n+\n+    void view_move_in(vector_type& v)\n+    {\n+        m_list.clear();\n+        if (get_allocator() == v.get_allocator()) {\n+            // Equal allocators. Do a (fast) swap.\n+            m_vector.swap(v);\n+        }\n+        else {\n+            // Unequal allocators. Do a (slow) copy.\n+            m_vector = v;\n+        }\n+        v.clear();\n+    }\n+\n+    void view_move_out(vector_type& v)\n+    {\n+        flatten();\n+        if (get_allocator() == v.get_allocator()) {\n+            // Equal allocators.  Do a (fast) swap.\n+            m_vector.swap(v);\n+        }\n+        else {\n+            // Unequal allocators.  Do a (slow) copy.\n+            v = m_vector;\n+        m_vector.clear();\n+        }\n+    }\n+\n+    void view_set_value(const vector_type& v)\n+    {\n+        m_list.clear();\n+        m_vector = v;\n+    }\n+\n+    vector_type const& view_get_value()     const\n+    {\n+        flatten();\n+        return m_vector;\n+    }\n+\n+    typedef vector_type const& return_type_for_get_value;\n+\n+    //@}\n+\n+    /** @name View modifier operations.\n+     *\n+     *  @details These simply wrap the corresponding operations on the\n+     *  underlying vector.\n+     */\n+    //@{\n+\n+    /** Adds an element at the end of the list.\n+     *\n+     *  Equivalent to `vector.push_back(\u2026)`\n+     */\n+    void push_back(const Type x)\n+    {\n+        m_vector.push_back(x);\n+    }\n+\n+    /** @name Insert elements at the end of the vector.\n+     *\n+     *  Equivalent to `vector.insert(vector.end(), \u2026)`\n+     */\n+    //@{\n+\n+    void insert_back(const Type& element)\n+        { m_vector.insert(m_vector.end(), element); }\n+\n+    void insert_back(typename vector_type::size_type n, const Type& element)\n+        { m_vector.insert(m_vector.end(), n, element); }\n+\n+    template <typename Iter>\n+    void insert_back(Iter first, Iter last)\n+        { m_vector.insert(m_vector.end(), first, last); }\n+\n+    //@}\n+\n+    //@}\n+};\n+\n+\n+/** @brief The vector append monoid class.\n+ *\n+ *  Instantiate the cilk::reducer template class with an op_vector monoid to\n+ *  create a vector reducer class. For example, to concatenate a\n+ *  collection of integers:\n+ *\n+ *      cilk::reducer< cilk::op_vector<int> > r;\n+ *\n+ *  @tparam Type        The vector element type (not the vector type).\n+ *  @tparam Alloc       The vector allocator type.\n+ *\n+ *  @see ReducersVector\n+ *  @see op_vector_view\n+ *  @ingroup ReducersVector\n+ */\n+template<typename Type, typename Alloc = std::allocator<Type> >\n+class op_vector :\n+    public cilk::monoid_with_view< op_vector_view<Type, Alloc>, false >\n+{\n+    typedef cilk::monoid_with_view< op_vector_view<Type, Alloc>, false > base;\n+    typedef provisional_guard<typename base::view_type> view_guard;\n+\n+    // The allocator to be used when constructing new views.\n+    Alloc m_allocator;\n+\n+public:\n+\n+    /// View type.\n+    typedef typename base::view_type view_type;\n+\n+    /** Constructor.\n+     *\n+     *  There is no default constructor for vector monoids, because the\n+     *  allocator must always be specified.\n+     *\n+     *  @param  allocator   The list allocator to be used when\n+     *                      identity-constructing new views.\n+     */\n+    op_vector(const Alloc& allocator = Alloc()) : m_allocator(allocator) {}\n+\n+    /** Creates an identity view.\n+     *\n+     *  Vector view identity constructors take the vector allocator as an\n+     *  argument.\n+     *\n+     *  @param v    The address of the uninitialized memory in which the view\n+     *              will be constructed.\n+     */\n+    void identity(view_type *v) const\n+    {\n+        ::new((void*) v) view_type(m_allocator);\n+    }\n+\n+    /** @name construct functions\n+     *\n+     *  A vector append monoid must have a copy of the allocator of\n+     *  the leftmost view's vector, so that it can use it in the `identity`\n+     *  operation. This, in turn, requires that vector append monoids have a\n+     *  specialized `construct()` function.\n+     *\n+     *  All vector append monoid `construct()` functions first construct the\n+     *  leftmost view, using the arguments that were passed in from the reducer\n+     *  constructor. They then call the view's `get_allocator()` function to\n+     *  get the vector allocator from the vector in the leftmost view, and pass\n+     *  that to the monoid constructor.\n+     */\n+    //@{\n+\n+    static void construct(op_vector* monoid, view_type* view)\n+    {\n+        view_guard vg( new((void*) view) view_type() );\n+        vg.confirm_if( new((void*) monoid) op_vector(view->get_allocator()) ); \n+    }\n+\n+    template <typename T1>\n+    static void construct(op_vector* monoid, view_type* view, const T1& x1)\n+    {\n+        view_guard vg( new((void*) view) view_type(x1) );\n+        vg.confirm_if( new((void*) monoid) op_vector(view->get_allocator()) ); \n+    }\n+\n+    template <typename T1, typename T2>\n+    static void construct(op_vector* monoid, view_type* view,\n+        const T1& x1, const T2& x2)\n+    {\n+        view_guard vg( new((void*) view) view_type(x1, x2) );\n+        vg.confirm_if( new((void*) monoid) op_vector(view->get_allocator()) ); \n+    }\n+\n+    template <typename T1, typename T2, typename T3>\n+    static void construct(op_vector* monoid, view_type* view,\n+        const T1& x1, const T2& x2, const T3& x3)\n+    {\n+        view_guard vg( new((void*) view) view_type(x1, x2, x3) );\n+        vg.confirm_if( new((void*) monoid) op_vector(view->get_allocator()) ); \n+    }\n+\n+    //@}\n+};\n+\n+\n+} // namespace cilk\n+\n+#endif //  REDUCER_VECTOR_H_INCLUDED"}, {"sha": "1e26c450ebed3577fa16b24679813b3e7ed3cebb", "filename": "libcilkrts/include/cilktools/cilkscreen.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilktools%2Fcilkscreen.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilktools%2Fcilkscreen.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Fcilktools%2Fcilkscreen.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- * @copyright\n- * Copyright (C) 2010-2013, Intel Corporation\n+ * Copyright (C) 2010-2016, Intel Corporation\n  * All rights reserved.\n  * \n- * @copyright\n  * Redistribution and use in source and binary forms, with or without\n  * modification, are permitted provided that the following conditions\n  * are met:\n@@ -21,7 +19,6 @@\n  *     contributors may be used to endorse or promote products derived\n  *     from this software without specific prior written permission.\n  * \n- * @copyright\n  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  * POSSIBILITY OF SUCH DAMAGE.\n+ * \n+ * *********************************************************************\n+ * \n+ * PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ * a repository at cilkplus.org. Changes made to this file that are not\n+ * submitted through the contribution process detailed at\n+ * http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ * time that a new version is released. Changes only submitted to the\n+ * GNU compiler collection or posted to the git repository at\n+ * https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ * not tracked.\n+ * \n+ * We welcome your contributions to this open source project. Thank you\n+ * for your assistance in helping us improve Cilk Plus.\n  *\n  **************************************************************************/\n "}, {"sha": "e98489368af8b79b9a2603212027c5c065aacea5", "filename": "libcilkrts/include/cilktools/cilkview.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilktools%2Fcilkview.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilktools%2Fcilkview.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Fcilktools%2Fcilkview.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- * @copyright\n- * Copyright (C) 2010-2013, Intel Corporation\n+ * Copyright (C) 2010-2016, Intel Corporation\n  * All rights reserved.\n  * \n- * @copyright\n  * Redistribution and use in source and binary forms, with or without\n  * modification, are permitted provided that the following conditions\n  * are met:\n@@ -21,7 +19,6 @@\n  *     contributors may be used to endorse or promote products derived\n  *     from this software without specific prior written permission.\n  * \n- * @copyright\n  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  * POSSIBILITY OF SUCH DAMAGE.\n+ * \n+ * *********************************************************************\n+ * \n+ * PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ * a repository at cilkplus.org. Changes made to this file that are not\n+ * submitted through the contribution process detailed at\n+ * http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ * time that a new version is released. Changes only submitted to the\n+ * GNU compiler collection or posted to the git repository at\n+ * https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ * not tracked.\n+ * \n+ * We welcome your contributions to this open source project. Thank you\n+ * for your assistance in helping us improve Cilk Plus.\n  *\n  **************************************************************************/\n "}, {"sha": "b7facf83f6d7b776406dbb467355eff1b5e8e236", "filename": "libcilkrts/include/cilktools/fake_mutex.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilktools%2Ffake_mutex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilktools%2Ffake_mutex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Fcilktools%2Ffake_mutex.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- * @copyright\n- * Copyright (C) 2013, Intel Corporation\n+ * Copyright (C) 2013-2016, Intel Corporation\n  * All rights reserved.\n  * \n- * @copyright\n  * Redistribution and use in source and binary forms, with or without\n  * modification, are permitted provided that the following conditions\n  * are met:\n@@ -21,7 +19,6 @@\n  *     contributors may be used to endorse or promote products derived\n  *     from this software without specific prior written permission.\n  * \n- * @copyright\n  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  * POSSIBILITY OF SUCH DAMAGE.\n+ * \n+ * *********************************************************************\n+ * \n+ * PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ * a repository at cilkplus.org. Changes made to this file that are not\n+ * submitted through the contribution process detailed at\n+ * http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ * time that a new version is released. Changes only submitted to the\n+ * GNU compiler collection or posted to the git repository at\n+ * https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ * not tracked.\n+ * \n+ * We welcome your contributions to this open source project. Thank you\n+ * for your assistance in helping us improve Cilk Plus.\n  *\n  **************************************************************************\n  *"}, {"sha": "e2e16382b753284d5754adcac0ea6caacd11027e", "filename": "libcilkrts/include/cilktools/lock_guard.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilktools%2Flock_guard.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Fcilktools%2Flock_guard.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Fcilktools%2Flock_guard.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- * @copyright\n- * Copyright (C) 2011-2013, Intel Corporation\n+ * Copyright (C) 2011-2016, Intel Corporation\n  * All rights reserved.\n  * \n- * @copyright\n  * Redistribution and use in source and binary forms, with or without\n  * modification, are permitted provided that the following conditions\n  * are met:\n@@ -21,7 +19,6 @@\n  *     contributors may be used to endorse or promote products derived\n  *     from this software without specific prior written permission.\n  * \n- * @copyright\n  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  * POSSIBILITY OF SUCH DAMAGE.\n+ * \n+ * *********************************************************************\n+ * \n+ * PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ * a repository at cilkplus.org. Changes made to this file that are not\n+ * submitted through the contribution process detailed at\n+ * http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ * time that a new version is released. Changes only submitted to the\n+ * GNU compiler collection or posted to the git repository at\n+ * https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ * not tracked.\n+ * \n+ * We welcome your contributions to this open source project. Thank you\n+ * for your assistance in helping us improve Cilk Plus.\n  *\n  **************************************************************************\n  *"}, {"sha": "3f38485d26b03c7c970b42bf62ff4916304f7283", "filename": "libcilkrts/include/internal/abi.h", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Finternal%2Fabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Finternal%2Fabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Finternal%2Fabi.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,11 +1,9 @@\n /*\n  *  abi.h\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -20,7 +18,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -33,6 +30,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  *\n  ******************************************************************************/\n \n@@ -460,6 +471,20 @@ CILK_ABI(void) __cilkrts_enter_frame_fast_1(__cilkrts_stack_frame *sf);\n  */\n CILK_ABI(void) __cilkrts_leave_frame(__cilkrts_stack_frame *sf);\n \n+/**\n+ * Suspends the runtime by notifying the workers that they should not try to\n+ * steal. This function is supposed to be called from a non-parallel region\n+ * (i.e., after cilk_sync in the top-level spawning function). Otherwise,\n+ * which workers are sleeping or busy is unpredictable in general.\n+ * The runtime can be resumed by calling __cilkrts_resume().\n+ */\n+CILK_ABI(void) __cilkrts_suspend(void);\n+\n+/**\n+ * Resumes the runtime by notifying the workers that they can steal.\n+ */\n+CILK_ABI(void) __cilkrts_resume(void);\n+\n /**\n  * Wait for any spawned children of this function to complete before\n  * continuing.  This function will only return when the join counter"}, {"sha": "7d09de29c1e88dd29abfdbfcac34aab657e2fd87", "filename": "libcilkrts/include/internal/cilk_fake.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Finternal%2Fcilk_fake.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Finternal%2Fcilk_fake.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Finternal%2Fcilk_fake.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2011-2013, Intel Corporation\n+ *  Copyright (C) 2011-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n /**"}, {"sha": "95e1f2ec5443da2ee5c7648fa19bdb98123e5329", "filename": "libcilkrts/include/internal/cilk_version.h", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Finternal%2Fcilk_version.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Finternal%2Fcilk_version.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Finternal%2Fcilk_version.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,10 +1,8 @@\n // cilk_version.h\n //\n-//  @copyright\n-//  Copyright (C) 2009-2013, Intel Corporation\n+//  Copyright (C) 2009-2016, Intel Corporation\n //  All rights reserved.\n //  \n-//  @copyright\n //  Redistribution and use in source and binary forms, with or without\n //  modification, are permitted provided that the following conditions\n //  are met:\n@@ -19,7 +17,6 @@\n //      contributors may be used to endorse or promote products derived\n //      from this software without specific prior written permission.\n //  \n-//  @copyright\n //  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n //  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n //  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -32,16 +29,30 @@\n //  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n //  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n //  POSSIBILITY OF SUCH DAMAGE.\n+//  \n+//  *********************************************************************\n+//  \n+//  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+//  a repository at cilkplus.org. Changes made to this file that are not\n+//  submitted through the contribution process detailed at\n+//  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+//  time that a new version is released. Changes only submitted to the\n+//  GNU compiler collection or posted to the git repository at\n+//  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+//  not tracked.\n+//  \n+//  We welcome your contributions to this open source project. Thank you\n+//  for your assistance in helping us improve Cilk Plus.\n // DO NOT EDIT THIS FILE!\n //\n // It was automatically generated by cilkrts/include/internal/Makefile\n \n #define VERSION_MAJOR 2\n #define VERSION_MINOR 0\n-#define VERSION_BUILD 3902\n+#define VERSION_BUILD 4420\n #define VERSION_REV 0\n-#define VERSION_STRING \"2,0,3902,0\"\n-#define VERSION_HASH \"b4e38f4f7e3e\"\n-#define VERSION_BRANCH \"v14.0\"\n-#define TBB_REV_NUMBER \"\"\n-#define VERSION_YEAR \"2013\"\n+#define VERSION_STRING \"2,0,4420,0\"\n+#define VERSION_HASH \"3b2d6aa9059c\"\n+#define VERSION_BRANCH \"eng\"\n+#define TBB_REV_NUMBER \"14788\"\n+#define VERSION_YEAR \"2015\""}, {"sha": "00aa0f1598a5869b99b52544a94c20d6d452f8e9", "filename": "libcilkrts/include/internal/metacall.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Finternal%2Fmetacall.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Finternal%2Fmetacall.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Finternal%2Fmetacall.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,11 +1,9 @@\n // -*- C++ -*-\n \n /*\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -20,7 +18,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -33,6 +30,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  *\n  ******************************************************************************\n  *"}, {"sha": "96ffdc4aa4e6ed4db37bf04018085f44e76e56b8", "filename": "libcilkrts/include/internal/rev.mk", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Finternal%2Frev.mk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Finclude%2Finternal%2Frev.mk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Finternal%2Frev.mk?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,10 +1,8 @@\n #########################################################################\n #\n-#  @copyright\n-#  Copyright (C) 2011-2013, Intel Corporation\n+#  Copyright (C) 2011-2016, Intel Corporation\n #  All rights reserved.\n #  \n-#  @copyright\n #  Redistribution and use in source and binary forms, with or without\n #  modification, are permitted provided that the following conditions\n #  are met:\n@@ -19,7 +17,6 @@\n #      contributors may be used to endorse or promote products derived\n #      from this software without specific prior written permission.\n #  \n-#  @copyright\n #  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n #  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n #  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -32,10 +29,24 @@\n #  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n #  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n #  POSSIBILITY OF SUCH DAMAGE.\n+#  \n+#  *********************************************************************\n+#  \n+#  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+#  a repository at cilkplus.org. Changes made to this file that are not\n+#  submitted through the contribution process detailed at\n+#  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+#  time that a new version is released. Changes only submitted to the\n+#  GNU compiler collection or posted to the git repository at\n+#  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+#  not tracked.\n+#  \n+#  We welcome your contributions to this open source project. Thank you\n+#  for your assistance in helping us improve Cilk Plus.\n ###########################################################################\n \n # DO NOT EDIT THIS FILE!\n #\n # It was automatically generated by cilkrts/include/internal/Makefile\n \n-CILK_REVISION = 3902\n+CILK_REVISION = 4420"}, {"sha": "49f524a68093a4749fa74dcc6bf3e79fea205089", "filename": "libcilkrts/mk/cilk-version.mk", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fmk%2Fcilk-version.mk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fmk%2Fcilk-version.mk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fmk%2Fcilk-version.mk?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,10 +1,8 @@\n #########################################################################\n #\n-#  @copyright\n-#  Copyright (C) 2009-2013, Intel Corporation\n+#  Copyright (C) 2009-2016, Intel Corporation\n #  All rights reserved.\n #  \n-#  @copyright\n #  Redistribution and use in source and binary forms, with or without\n #  modification, are permitted provided that the following conditions\n #  are met:\n@@ -19,7 +17,6 @@\n #      contributors may be used to endorse or promote products derived\n #      from this software without specific prior written permission.\n #  \n-#  @copyright\n #  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n #  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n #  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -32,6 +29,20 @@\n #  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n #  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n #  POSSIBILITY OF SUCH DAMAGE.\n+#  \n+#  *********************************************************************\n+#  \n+#  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+#  a repository at cilkplus.org. Changes made to this file that are not\n+#  submitted through the contribution process detailed at\n+#  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+#  time that a new version is released. Changes only submitted to the\n+#  GNU compiler collection or posted to the git repository at\n+#  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+#  not tracked.\n+#  \n+#  We welcome your contributions to this open source project. Thank you\n+#  for your assistance in helping us improve Cilk Plus.\n ###########################################################################\n # cilk-version.mk\n #"}, {"sha": "7f6271ccafa98be2c8552ddbfb52873de008dd0f", "filename": "libcilkrts/runtime/acknowledgements.dox", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Facknowledgements.dox", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Facknowledgements.dox", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Facknowledgements.dox?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\r\n  *************************************************************************\r\n  *\r\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\r\n \r\n /*\r"}, {"sha": "f2109852a5739257adf62e682bb52c9fa88831d6", "filename": "libcilkrts/runtime/bug.cpp", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fbug.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fbug.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fbug.cpp?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n #include \"bug.h\"\n@@ -54,7 +65,7 @@ __CILKRTS_BEGIN_EXTERN_C\n COMMON_PORTABLE const char *const __cilkrts_assertion_failed =\n     \"%s:%d: cilk assertion failed: %s\\n\";\n \n-COMMON_PORTABLE void __cilkrts_bug(const char *fmt,...) cilk_nothrow\n+COMMON_PORTABLE NORETURN __cilkrts_bug(const char *fmt,...) cilk_nothrow\n {\n #if defined (_WIN32) && defined(_DEBUG)\n     _CRTIMP void __cdecl _wassert(__in_z const wchar_t * _Message,"}, {"sha": "3b5493bace6bc7e2b8527286e1d3e79c78edacd3", "filename": "libcilkrts/runtime/bug.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fbug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fbug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fbug.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n /**"}, {"sha": "f99ecbe6dd3e6593c69d07e937fb2f5cd27dd296", "filename": "libcilkrts/runtime/c_reducers.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fc_reducers.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fc_reducers.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fc_reducers.c?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2010-2013, Intel Corporation\n+ *  Copyright (C) 2010-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  *\n  **************************************************************************/\n \n@@ -47,6 +58,13 @@\n \n #define CILK_C_DEFINE_REDUCERS\n \n+#ifdef _WRS_KERNEL\n+#define WCHAR_MIN   0\n+#define WCHAR_MAX   USHRT_MAX\n+#define WINT_MIN    INT_MIN\n+#define WINT_MAX    INT_MAX\n+#endif\n+\n #include <cilk/reducer_opadd.h>\n #include <cilk/reducer_opand.h>\n #include <cilk/reducer_opmul.h>"}, {"sha": "6e7c08a08af172771843c13eaab61017cd51bcb0", "filename": "libcilkrts/runtime/cilk-abi-cilk-for.cpp", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fcilk-abi-cilk-for.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fcilk-abi-cilk-for.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fcilk-abi-cilk-for.cpp?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2011, 2013, Intel Corporation\n+ *  Copyright (C) 2011-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  *\n  **************************************************************************/\n \n@@ -405,6 +416,9 @@ CILK_ABI_THROWS_VOID __cilkrts_cilk_for_32(__cilk_abi_f32_t body, void *data,\n CILK_ABI_THROWS_VOID __cilkrts_cilk_for_64(__cilk_abi_f64_t body, void *data,\n                                             cilk64_t count, int grain)\n {\n+    // Cilkscreen should not report this call in a stack trace\n+    NOTIFY_ZC_INTRINSIC((char *)\"cilkscreen_hide_call\", 0);\n+\n     // Check for an empty range here as an optimization - don't need to do any\n     // __cilkrts_stack_frame initialization\n     if (count > 0)"}, {"sha": "b76966111655cfb18ce4f8cbf49f0de512348d91", "filename": "libcilkrts/runtime/cilk-abi-vla-internal.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fcilk-abi-vla-internal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fcilk-abi-vla-internal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fcilk-abi-vla-internal.c?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2013, Intel Corporation\n+ *  Copyright (C) 2013-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n /*"}, {"sha": "57fe51ce4c7e11e7feabd77390063d57d9bc7810", "filename": "libcilkrts/runtime/cilk-abi-vla-internal.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fcilk-abi-vla-internal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fcilk-abi-vla-internal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fcilk-abi-vla-internal.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2013, Intel Corporation\n+ *  Copyright (C) 2013-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n /**"}, {"sha": "35bb413bf0a2212eb41fe681f9ab858741d9cd35", "filename": "libcilkrts/runtime/cilk-abi.c", "status": "modified", "additions": 62, "deletions": 11, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fcilk-abi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fcilk-abi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fcilk-abi.c?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2010-2013, Intel Corporation\n+ *  Copyright (C) 2010-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  *\n  **************************************************************************/\n \n@@ -296,6 +307,45 @@ CILK_ABI_VOID __cilkrts_sync(__cilkrts_stack_frame *sf)\n     __cilkrts_c_sync(w, sf);\n }\n \n+/**\n+ * Suspends the runtime by notifying the workers that they should not try to\n+ * steal. This function is supposed to be called from a non-parallel region\n+ * (i.e., after cilk_sync in the top-level spawning function). Otherwise,\n+ * which workers are sleeping or busy is unpredictable in general.\n+ * The runtime can be resumed by calling __cilkrts_resume().\n+ */\n+CILK_ABI_VOID __cilkrts_suspend(void)\n+{\n+    global_state_t *g = cilkg_get_global_state();\n+    if (NULL == g || g->P < 2)\n+        return;\n+    __cilkrts_worker *w = __cilkrts_get_tls_worker();\n+    // Do nothing if worker/frame is not available\n+    if (NULL == w || NULL == w->current_stack_frame)\n+        return;\n+    // Do nothing if this was called within a parallel region.\n+    __cilkrts_stack_frame *sf = w->current_stack_frame;\n+    if (0 == (sf->flags & CILK_FRAME_LAST) || (sf->flags & CILK_FRAME_UNSYNCHED))\n+        return;\n+    __cilkrts_worker *root = g->workers[0];\n+    root->l->steal_failure_count = g->max_steal_failures + 1;\n+    CILK_ASSERT(root->l->signal_node);\n+    signal_node_msg(root->l->signal_node, 0);\n+}\n+\n+/**\n+ * Resumes the runtime by notifying the workers that they can steal.\n+ */\n+CILK_ABI_VOID __cilkrts_resume(void)\n+{\n+    global_state_t *g = cilkg_get_global_state();\n+    if (NULL == g || g->P < 2)\n+        return;\n+    __cilkrts_worker *root = g->workers[0];\n+    CILK_ASSERT(root->l->signal_node);\n+    signal_node_msg(root->l->signal_node, 1);\n+}\n+\n /*\n  * __cilkrts_get_sf\n  *\n@@ -391,6 +441,10 @@ CILK_ABI_WORKER_PTR BIND_THREAD_RTN(void)\n \n     __cilkrts_set_tls_worker(w);\n     __cilkrts_cilkscreen_establish_worker(w);\n+\n+\n+    START_INTERVAL(w, INTERVAL_IN_SCHEDULER);\n+    START_INTERVAL(w, INTERVAL_IN_RUNTIME);\n     {\n         full_frame *ff = __cilkrts_make_full_frame(w, 0);\n \n@@ -462,13 +516,10 @@ CILK_ABI_WORKER_PTR BIND_THREAD_RTN(void)\n \n     global_os_mutex_unlock();\n \n-    /* If there's only 1 worker, the counts will be started in\n-     * __cilkrts_scheduler */\n-    if (g->P > 1)\n-    {\n-        START_INTERVAL(w, INTERVAL_IN_SCHEDULER);\n-        START_INTERVAL(w, INTERVAL_WORKING);\n-    }\n+    /* We are about to switch back into user code after binding the\n+       thread.  Start working again. */\n+    STOP_INTERVAL(w, INTERVAL_IN_RUNTIME);\n+    START_INTERVAL(w, INTERVAL_WORKING);\n \n     ITT_SYNC_RELEASING(&unique_obj);\n "}, {"sha": "256f334dcea433e7af6420b236835cee98854d11", "filename": "libcilkrts/runtime/cilk-ittnotify.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fcilk-ittnotify.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fcilk-ittnotify.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fcilk-ittnotify.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n #ifndef INCLUDED_CILK_ITTNOTIFY_DOT_H"}, {"sha": "c073ab172c6ba598ee866ce9b7269430a5231459", "filename": "libcilkrts/runtime/cilk-tbb-interop.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fcilk-tbb-interop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fcilk-tbb-interop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fcilk-tbb-interop.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n /**"}, {"sha": "62798d29c766758bfb1357b521f4fc2a088fc506", "filename": "libcilkrts/runtime/cilk_api.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fcilk_api.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fcilk_api.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fcilk_api.c?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n /*"}, {"sha": "d59bfcae4cb561f0d021aa84b8b68e14cab676f9", "filename": "libcilkrts/runtime/cilk_fiber-unix.cpp", "status": "modified", "additions": 34, "deletions": 24, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fcilk_fiber-unix.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fcilk_fiber-unix.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fcilk_fiber-unix.cpp?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2012-2013, Intel Corporation\n+ *  Copyright (C) 2012-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n #include \"cilk_fiber-unix.h\"\n@@ -47,33 +58,32 @@\n #include <errno.h>\n #include <sys/mman.h>\n #include <unistd.h>\n-\n-// You'd think that getting a defintion for alloca would be easy.  But you'd\n-// be wrong. Here's a variant on what's recommended in the autoconf doc.  I've\n-// remove the Windows portion since this is Unix-specific code.\n-#if defined HAVE_ALLOCA_H\n-#   include <alloca.h>\n-#elif defined __GNUC__\n-#   define alloca __builtin_alloca\n-#elif defined _AIX\n-#   define alloca __alloca\n-#else\n-#   include <stddef.h>\n-#   ifdef  __cplusplus\n-extern \"C\"\n-#   endif\n-void *alloca (size_t);\n-#endif\n+#include \"declare-alloca.h\"\n \n // MAP_ANON is deprecated on Linux, but seems to be required on Mac...\n #ifndef MAP_ANONYMOUS\n-#define MAP_ANONYMOUS MAP_ANON\n+#   define MAP_ANONYMOUS MAP_ANON\n+#endif\n+\n+// MAP_STACK and MAP_GROWSDOWN have no affect in Linux as of 2014-04-04, but\n+// could be very useful in future versions.  If they are not defined, then set\n+// them to zero (no bits set).\n+#ifndef MAP_STACK\n+#   define MAP_STACK 0\n+#endif\n+#ifndef MAP_GROWSDOWN\n+#   define MAP_GROWSDOWN 0\n #endif\n \n // Magic number for sanity checking fiber structure\n const unsigned magic_number = 0x5afef00d;\n \n-int cilk_fiber_sysdep::s_page_size = getpagesize();\n+// Page size for stacks\n+#ifdef _WRS_KERNEL\n+long cilk_fiber_sysdep::s_page_size = 4096;\n+#else\n+long cilk_fiber_sysdep::s_page_size = sysconf(_SC_PAGESIZE);\n+#endif\n \n cilk_fiber_sysdep::cilk_fiber_sysdep(std::size_t stack_size)\n     : cilk_fiber(stack_size)\n@@ -270,7 +280,7 @@ void cilk_fiber_sysdep::make_stack(size_t stack_size)\n \n     p = (char*)mmap(0, rounded_stack_size,\n                     PROT_READ|PROT_WRITE,\n-                    MAP_PRIVATE|MAP_ANONYMOUS,\n+                    MAP_PRIVATE|MAP_ANONYMOUS|MAP_STACK|MAP_GROWSDOWN,\n                     -1, 0);\n     if (MAP_FAILED == p) {\n         // For whatever reason (probably ran out of memory), mmap() failed."}, {"sha": "5ebe840616f7ed925e61764ac5207de9360bc64a", "filename": "libcilkrts/runtime/cilk_fiber-unix.h", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fcilk_fiber-unix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fcilk_fiber-unix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fcilk_fiber-unix.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2012-2013, Intel Corporation\n+ *  Copyright (C) 2012-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n #ifndef INCLUDED_CILK_FIBER_UNIX_DOT_H\n@@ -126,13 +137,12 @@ struct cilk_fiber_sysdep : public cilk_fiber\n     inline char* get_stack_base_sysdep() { return m_stack_base; }\n \n   private:\n-    char*                       m_stack_base;     ///< The base of this fiber's stack.\n-    char*                       m_stack;          // Stack memory (low address)\n-    __CILK_JUMP_BUFFER          m_resume_jmpbuf;  // Place to resume fiber\n-    unsigned                    m_magic;          // Magic number for checking\n+    char*                       m_stack_base;    ///< The base of this fiber's stack.\n+    char*                       m_stack;         ///< Stack memory (low address)\n+    __CILK_JUMP_BUFFER          m_resume_jmpbuf; ///< Place to resume fiber\n+    unsigned                    m_magic;         ///< Magic number for checking\n \n-    static int                  s_page_size;      // Page size for\n-                                                  // stacks.\n+    static long                 s_page_size;     ///< Page size for stacks.\n \n     // Allocate memory for a stack.  This method\n     // initializes m_stack and m_stack_base."}, {"sha": "218c73ba813cdefd9f6fae3f622da625b3536c72", "filename": "libcilkrts/runtime/cilk_fiber.cpp", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fcilk_fiber.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fcilk_fiber.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fcilk_fiber.cpp?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2012-2013, Intel Corporation\n+ *  Copyright (C) 2012-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n /* Implementations of non-platform-specific aspects of cilk_fiber, especially"}, {"sha": "d91687aa57a237a731e28fddb756205221f30276", "filename": "libcilkrts/runtime/cilk_fiber.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fcilk_fiber.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fcilk_fiber.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fcilk_fiber.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2012-2013, Intel Corporation\n+ *  Copyright (C) 2012-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n /**"}, {"sha": "3ddaad67af32731a806beb9364bd1e8c5d5e07dd", "filename": "libcilkrts/runtime/cilk_malloc.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fcilk_malloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fcilk_malloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fcilk_malloc.c?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,12 +31,26 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n #include \"cilk_malloc.h\"\n \n #include <stdlib.h>\n-#if defined _WIN32 || defined _WIN64 || defined __linux__\n+#if defined _WIN32 || defined _WIN64 || defined __GLIBC__ || defined __linux__\n #include <malloc.h>\n #define HAS_MEMALIGN 1\n #endif"}, {"sha": "d8ed58d2445bc2412be57e8d21754e5ee5cec9b5", "filename": "libcilkrts/runtime/cilk_malloc.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fcilk_malloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fcilk_malloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fcilk_malloc.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n /**"}, {"sha": "0da50b40928beaaa30f7298ff49b3d399c0d9f1d", "filename": "libcilkrts/runtime/cilk_str_mem.h", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fcilk_str_mem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fcilk_str_mem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fcilk_str_mem.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -0,0 +1,94 @@\n+/* cilk_str_mem.h                  -*-C-*-\n+ *\n+ *************************************************************************\n+ *\n+ *  Copyright (C) 2014-2016, Intel Corporation\n+ *  All rights reserved.\n+ *  \n+ *  Redistribution and use in source and binary forms, with or without\n+ *  modification, are permitted provided that the following conditions\n+ *  are met:\n+ *  \n+ *    * Redistributions of source code must retain the above copyright\n+ *      notice, this list of conditions and the following disclaimer.\n+ *    * Redistributions in binary form must reproduce the above copyright\n+ *      notice, this list of conditions and the following disclaimer in\n+ *      the documentation and/or other materials provided with the\n+ *      distribution.\n+ *    * Neither the name of Intel Corporation nor the names of its\n+ *      contributors may be used to endorse or promote products derived\n+ *      from this software without specific prior written permission.\n+ *  \n+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+ *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+ *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+ *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+ *  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n+ *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS\n+ *  OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\n+ *  AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n+ *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n+ **************************************************************************/\n+\n+/**\n+ * @file cilk_str_mem.h\n+ *\n+ * @breif Interface to safe string/memmory C API to replace banned C API.\n+ */\n+\n+#ifndef INCLUDED_CILK_STR_MEM_DOT_H\n+#define INCLUDED_CILK_STR_MEM_DOT_H\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+#ifndef _WIN32\n+\n+#   include \"safe_lib.h\"\n+#   include \"snprintf_s.h\"\n+\n+#define cilk_strlen(str) strnlen_s(str, RSIZE_MAX_STR)\n+#define cilk_strcpy_s    strcpy_s\n+// Different sprintf entries with different argument lists.\n+#define cilk_snprintf_s  snprintf_s_s\n+#define cilk_snprintf_i  snprintf_s_i\n+#define cilk_snprintf_l  snprintf_s_l\n+#define cilk_snprintf_si snprintf_s_si\n+#define cilk_snprintf_sl snprintf_s_sl\n+\n+#else // ! defined _WIN32\n+\n+#define CILK_MAX_STR (4UL << 10) // 4KB\n+#define cilk_strlen(str) strnlen_s(str, CILK_MAX_STR)\n+#define cilk_strcpy_s    strcpy_s\n+#define cilk_snprintf_s  sprintf_s\n+#define cilk_snprintf_i  sprintf_s\n+#define cilk_snprintf_l  sprintf_s\n+#define cilk_snprintf_si sprintf_s\n+#define cilk_snprintf_sl sprintf_s\n+\n+#endif // ! defined _WIN32\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#endif // INCLUDED_CILK_STR_MEM_DOT_H"}, {"sha": "34776233f327d4ea6e9772358bb30b7a95339eed", "filename": "libcilkrts/runtime/component.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fcomponent.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fcomponent.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fcomponent.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n #ifndef INCLUDED_COMPONENT_DOT_H"}, {"sha": "cf88d997046f6a5d2d6ef08ef359fdcf56615834", "filename": "libcilkrts/runtime/config/arm/cilk-abi-vla.c", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fconfig%2Farm%2Fcilk-abi-vla.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fconfig%2Farm%2Fcilk-abi-vla.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fconfig%2Farm%2Fcilk-abi-vla.c?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -0,0 +1,115 @@\n+/* cilk-abi-vla.cpp                  -*-C++-*-\n+ *\n+ *************************************************************************\n+ *\n+ *  Copyright (C) 2013-2016, Intel Corporation\n+ *  All rights reserved.\n+ *  \n+ *  Redistribution and use in source and binary forms, with or without\n+ *  modification, are permitted provided that the following conditions\n+ *  are met:\n+ *  \n+ *    * Redistributions of source code must retain the above copyright\n+ *      notice, this list of conditions and the following disclaimer.\n+ *    * Redistributions in binary form must reproduce the above copyright\n+ *      notice, this list of conditions and the following disclaimer in\n+ *      the documentation and/or other materials provided with the\n+ *      distribution.\n+ *    * Neither the name of Intel Corporation nor the names of its\n+ *      contributors may be used to endorse or promote products derived\n+ *      from this software without specific prior written permission.\n+ *  \n+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+ *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+ *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+ *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+ *  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n+ *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS\n+ *  OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\n+ *  AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n+ *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n+ *\n+ **************************************************************************/\n+\n+/*\n+ * Implementation of Variable Length Array (VLA) ABI.\n+ *\n+ * The compiler calls these functions to allocate Variable Length Arrays\n+ * at runtime.  The compiler must guarantee that __cilkrts_stack_free() is\n+ * called to cleanup any memory allocated by __cilkrts_stack_alloc().\n+ *\n+ * This generic implementation always allocates the memory from the heap.\n+ * Optimally, the implementation should expand the frame of the calling\n+ * function if possible, since that will be faster.  See the x86 version\n+ * for one possible implementation.\n+ */\n+\n+#include <assert.h>\n+#include <stdlib.h>\n+#include <stdint.h>\n+\n+#include \"internal/abi.h\"\n+#include \"cilk-abi-vla-internal.h\"\n+\n+// Allocate space for a variable length array\n+CILK_ABI(__cilkrts_void_ptr)\n+__cilkrts_stack_alloc(\n+    __cilkrts_stack_frame *sf,\n+    size_t size,\n+    size_t distance_from_sp_to_alloca_area,\n+    uint32_t align,     // align is always >= minimum stack alignment and\n+                        // >= ptr_size as well, and must be a power of 2.\n+    uint32_t needs_tag  // non-zero if the pointer being returned needs to\n+                        // be tagged\n+)\n+{\n+    // full_size will be a multiple of align, and contains\n+    // enough extra space to allocate a marker.\n+    size_t full_size = (size + align - 1) & ~(align - 1);\n+\n+    // Allocate memory from the heap.  The compiler is responsible\n+    // for guaranteeing us a chance to free it before the function\n+    // exits\n+\n+    return (void *)vla_internal_heap_alloc(sf, full_size, align);\n+}\n+\n+// Free the space allocated for a variable length array.\n+CILK_ABI(void)\n+__cilkrts_stack_free(\n+    __cilkrts_stack_frame *sf,\n+    void *p,\n+    size_t size,\n+    size_t distance_from_sp_to_alloca_area,\n+    uint32_t align, // same requirements as for align in allocation,\n+                    // and must match alignment that was passed when\n+                    // doing the allocation \n+    uint32_t known_from_stack  // non-zero if this is known to be allocated\n+                               // on the stack, and therefore has no tag\n+)\n+{\n+    // full_size will be a multiple of align, and contains\n+    // enough extra space to allocate a marker if one was needed.\n+    size_t full_size = (size + align - 1) & ~(align - 1);\n+\n+    // Just free the allocated memory to the heap since we don't know\n+    // how to expand/contract the calling frame\n+    vla_internal_heap_free(p, full_size);\n+}"}, {"sha": "67e157a19e54cf4cf869d965fa84c55833d68cb8", "filename": "libcilkrts/runtime/config/arm/os-fence.h", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fconfig%2Farm%2Fos-fence.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fconfig%2Farm%2Fos-fence.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fconfig%2Farm%2Fos-fence.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -0,0 +1,64 @@\n+/* os.h                  -*-C++-*-\n+ *\n+ *************************************************************************\n+ *\n+ *  Copyright (C) 2009-2016, Intel Corporation\n+ *  All rights reserved.\n+ *  \n+ *  Redistribution and use in source and binary forms, with or without\n+ *  modification, are permitted provided that the following conditions\n+ *  are met:\n+ *  \n+ *    * Redistributions of source code must retain the above copyright\n+ *      notice, this list of conditions and the following disclaimer.\n+ *    * Redistributions in binary form must reproduce the above copyright\n+ *      notice, this list of conditions and the following disclaimer in\n+ *      the documentation and/or other materials provided with the\n+ *      distribution.\n+ *    * Neither the name of Intel Corporation nor the names of its\n+ *      contributors may be used to endorse or promote products derived\n+ *      from this software without specific prior written permission.\n+ *  \n+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+ *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+ *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+ *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+ *  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n+ *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS\n+ *  OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\n+ *  AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n+ *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n+ **************************************************************************/\n+\n+/*\n+ * void __cilkrts_fence(void)\n+ *\n+ * Executes an MFENCE instruction to serialize all load and store instructions\n+ * that were issued prior the MFENCE instruction. This serializing operation\n+ * guarantees that every load and store instruction that precedes the MFENCE\n+ * instruction is globally visible before any load or store instruction that\n+ * follows the MFENCE instruction. The MFENCE instruction is ordered with\n+ * respect to all load and store instructions, other MFENCE instructions, any\n+ * SFENCE and LFENCE instructions, and any serializing instructions (such as\n+ * the CPUID instruction).\n+ */\n+\n+// COMMON_SYSDEP void __cilkrts_fence(void); ///< MFENCE instruction\n+# define __cilkrts_fence() __asm__ __volatile__ (\"mcr   p15,0,%[t],c7,c10,4\\n\" :: [t] \"r\" (0) : \"memory\");"}, {"sha": "02d8c2bebfffe09722afd133109b1646a272ed17", "filename": "libcilkrts/runtime/config/arm/os-unix-sysdep.c", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fconfig%2Farm%2Fos-unix-sysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fconfig%2Farm%2Fos-unix-sysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fconfig%2Farm%2Fos-unix-sysdep.c?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -0,0 +1,105 @@\n+/* os-unix-sysdep.c                  -*-C-*-\n+ *\n+ *************************************************************************\n+ *\n+ *  Copyright (C) 2009-2016, Intel Corporation\n+ *  All rights reserved.\n+ *  \n+ *  Redistribution and use in source and binary forms, with or without\n+ *  modification, are permitted provided that the following conditions\n+ *  are met:\n+ *  \n+ *    * Redistributions of source code must retain the above copyright\n+ *      notice, this list of conditions and the following disclaimer.\n+ *    * Redistributions in binary form must reproduce the above copyright\n+ *      notice, this list of conditions and the following disclaimer in\n+ *      the documentation and/or other materials provided with the\n+ *      distribution.\n+ *    * Neither the name of Intel Corporation nor the names of its\n+ *      contributors may be used to endorse or promote products derived\n+ *      from this software without specific prior written permission.\n+ *  \n+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+ *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+ *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+ *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+ *  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n+ *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS\n+ *  OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\n+ *  AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n+ *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n+ *************************************************************************\n+ *\n+ * This file contains generic implementations of system-specific code for\n+ * Unix-based systems\n+ */\n+\n+#include \"os.h\"\n+#include \"sysdep.h\"\n+\n+/*\n+ * The cycle counter is used for debugging.  This funciton is only called if\n+ * CILK_PROFILE is defined when the runtime is built.\n+ */\n+COMMON_SYSDEP unsigned long long __cilkrts_getticks(void)\n+{\n+#   warning \"unimplemented cycle counter\"\n+    return 0;\n+}\n+\n+/*\n+ * A \"short pause\" - called from the Cilk runtime's spinloops.\n+ */\n+COMMON_SYSDEP void __cilkrts_short_pause(void)\n+{\n+#   warning __cilkrts_short_pause empty\n+}\n+\n+/*\n+ * Interlocked exchange - used to implement the Cilk runtime's spinloops\n+ */\n+COMMON_SYSDEP int __cilkrts_xchg(volatile int *ptr, int x)\n+{\n+    x = __sync_lock_test_and_set(ptr, x);\n+    return x;\n+}\n+\n+\n+/*\n+ * Restore the floating point state that is stored in a stack frame at each\n+ * spawn.  This should be called each time a frame is resumed.\n+ *\n+ * Only valid for IA32 and Intel64 processors.\n+ */\n+void restore_x86_fp_state (__cilkrts_stack_frame *sf)\n+{\n+}\n+\n+\n+/*\n+ * Save the floating point state to the __cilkrts_stack_frame at each spawn.\n+ *\n+ * Architecture-specific - Should only be needed on IA32 and Intel64\n+ * processors.\n+ */\n+void sysdep_save_fp_ctrl_state(__cilkrts_stack_frame *sf)\n+{\n+}\n+"}, {"sha": "d0b65381069b1a61316a676848e432d3f52d3e29", "filename": "libcilkrts/runtime/config/generic/cilk-abi-vla.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fconfig%2Fgeneric%2Fcilk-abi-vla.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fconfig%2Fgeneric%2Fcilk-abi-vla.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fconfig%2Fgeneric%2Fcilk-abi-vla.c?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2013, Intel Corporation\n+ *  Copyright (C) 2013-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  *\n  **************************************************************************/\n \n@@ -103,5 +114,5 @@ __cilkrts_stack_free(\n \n     // Just free the allocated memory to the heap since we don't know\n     // how to expand/contract the calling frame\n-    vla_internal_heap_free(t, full_size);\n+    vla_internal_heap_free(p, full_size);\n }"}, {"sha": "231f136bd5eeb980cfa42856d27262fcfff3cbf5", "filename": "libcilkrts/runtime/config/generic/os-fence.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fconfig%2Fgeneric%2Fos-fence.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fconfig%2Fgeneric%2Fos-fence.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fconfig%2Fgeneric%2Fos-fence.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n /*"}, {"sha": "02d8c2bebfffe09722afd133109b1646a272ed17", "filename": "libcilkrts/runtime/config/generic/os-unix-sysdep.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fconfig%2Fgeneric%2Fos-unix-sysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fconfig%2Fgeneric%2Fos-unix-sysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fconfig%2Fgeneric%2Fos-unix-sysdep.c?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  *************************************************************************\n  *\n  * This file contains generic implementations of system-specific code for"}, {"sha": "873757f98d8338314422ec0ab97ca241332f9c3f", "filename": "libcilkrts/runtime/config/x86/cilk-abi-vla.c", "status": "modified", "additions": 40, "deletions": 38, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fconfig%2Fx86%2Fcilk-abi-vla.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fconfig%2Fx86%2Fcilk-abi-vla.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fconfig%2Fx86%2Fcilk-abi-vla.c?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2013, Intel Corporation\n+ *  Copyright (C) 2013-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  *\n  **************************************************************************/\n \n@@ -58,37 +69,21 @@\n #include <assert.h>\n #include <stdlib.h>\n #include <stdint.h>\n-\n-// Getting a definition for alloca appears to be a pain in the butt.  Here's\n-// a variant on what's recommended in the autoconf doc\n-#if defined _MSC_VER\n-# include <malloc.h>\n-# define alloca _alloca\n-#elif defined HAVE_ALLOCA_H\n-# include <alloca.h>\n-#elif defined __GNUC__\n-# define alloca __builtin_alloca\n-#elif defined _AIX\n-# define alloca __alloca\n-#else\n-# include <stddef.h>\n-# ifdef  __cplusplus\n-extern \"C\"\n-# endif\n-void *alloca (size_t);\n-#endif\n+#include \"declare-alloca.h\"\n \n #ifdef _WIN32\n-# define INLINE static __inline\n-# pragma warning(disable:1025)  // Don't whine about zero extending result of unary operation\n+#   define INLINE static __inline\n+#   pragma warning(disable:1025)  // Don't whine about zero extending result of unary operation\n #else\n-# define INLINE static inline\n+#   define INLINE static inline\n #endif\n \n \n #include \"internal/abi.h\"\n #include \"cilk-abi-vla-internal.h\"\n \n+#ifdef __INTEL_COMPILER\n+// These functions are used only within __INTEL_COMPILER.\n #if defined(__x86_64) || defined(_M_X64)\n INLINE void setsp(void *val)\n {\n@@ -151,7 +146,7 @@ INLINE void copy_frame_up_and_move_bp(\n         \"movq %2, %%rcx;\"\n         \"shrq $3, %%rcx;\"\n         \"std; rep movsq; cld;\"\n-        \"movl %3, %%rbp;\" : \n+        \"movq %3, %%rbp;\" : \n         :\n         \"rm\"(dst), \"rm\"(src), \"rm\"(cpy_bytes), \"rm\"(new_ebp) :\n         \"rsi\", \"rdi\", \"rcx\", \"rbp\", \"memory\");\n@@ -226,6 +221,7 @@ INLINE void copy_frame_up_and_move_bp(\n }\n #endif\n \n+#endif // __INTEL_COMPILER\n \n #define c_cilk_ptr_from_heap  0xc2f2f00d\n #define c_cilk_ptr_from_stack 0xc3f30d0f\n@@ -241,11 +237,17 @@ __cilkrts_stack_alloc(\n                         // be tagged\n )\n {\n-#ifdef __INTEL_COMPILER\n     // full_size will be a multiple of align, and contains\n     // enough extra space to allocate a marker.\n     size_t full_size = (size + align - 1) & ~(align - 1);\n \n+#ifndef __INTEL_COMPILER\n+    // Allocate memory from the heap.  The compiler is responsible\n+    // for guaranteeing us a chance to free it before the function\n+    // exits\n+    return (void *)vla_internal_heap_alloc(sf, full_size, align);\n+\n+#else\n     if (needs_tag) {\n         full_size += align;\n     }\n@@ -336,10 +338,7 @@ __cilkrts_stack_alloc(\n     }\n \n     return t;\n-#else // Not __INTEL_COMPILER\n-    // Not supported unless we can figure out how to get the size of the frame\n-    return NULL;\n-#endif\n+#endif // __INTEL_COMPILER\n }\n \n // This frees the space allocated for a variable length array.\n@@ -356,12 +355,17 @@ __cilkrts_stack_free(\n                                // on the stack, and therefore has no tag\n )\n {\n-#ifdef __INTEL_COMPILER\n-    uint32_t *t = (uint32_t*)p;\n-\n     // full_size will be a multiple of align, and contains\n     // enough extra space to allocate a marker if one was needed.\n     size_t full_size = (size + align - 1) & ~(align - 1);\n+\n+#ifndef __INTEL_COMPILER\n+    // Just free the allocated memory to the heap since we don't know\n+    // how to expand/contract the calling frame\n+    vla_internal_heap_free(p, full_size);\n+\n+#else\n+    uint32_t *t = (uint32_t*)p;\n     if (known_from_stack == 0) {\n         // if the compiler hasn't told the run-time that this is\n         // known to be on the stack, then this pointer must have been\n@@ -435,7 +439,5 @@ __cilkrts_stack_free(\n     else {\n         vla_internal_heap_free(t, full_size);\n     }\n-#else // Not __INTEL_COMPILER\n-    // Not supported unless we can figure out how to get the size of the frame\n-#endif\n+#endif // __INTEL_COMPILER\n }"}, {"sha": "520eb42554195c70336cb4e7684e97ae9e950581", "filename": "libcilkrts/runtime/config/x86/os-fence.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fconfig%2Fx86%2Fos-fence.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fconfig%2Fx86%2Fos-fence.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fconfig%2Fx86%2Fos-fence.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n /* gcc before 4.4 does not implement __sync_synchronize properly */"}, {"sha": "ce043803b02a5c918be6209823f986c76f51b197", "filename": "libcilkrts/runtime/config/x86/os-unix-sysdep.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fconfig%2Fx86%2Fos-unix-sysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fconfig%2Fx86%2Fos-unix-sysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fconfig%2Fx86%2Fos-unix-sysdep.c?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,7 +2,7 @@\n  *\n  *************************************************************************\n  *\n- *  Copyright (C) 2009-2014, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n  *  Redistribution and use in source and binary forms, with or without\n@@ -31,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  *************************************************************************\n  *\n  * This file contains system-specific code for Unix systems\n@@ -96,7 +110,7 @@ COMMON_SYSDEP int __cilkrts_xchg(volatile int *ptr, int x)\n  * This declaration should generate an error when the Intel compiler adds\n  * supprt for the intrinsic.\n  */\n-#ifdef __INTEL_COMPILER\n+#if defined(__INTEL_COMPILER) || defined(__clang__)\n static inline int __builtin_cpu_supports(const char *feature)\n {\n     return 1;\n@@ -124,7 +138,6 @@ void restore_x86_fp_state (__cilkrts_stack_frame *sf) {\n #endif\n }\n \n-\n void sysdep_save_fp_ctrl_state(__cilkrts_stack_frame *sf)\n {\n // If we're not going to restore, don't bother saving it\n@@ -135,7 +148,7 @@ void sysdep_save_fp_ctrl_state(__cilkrts_stack_frame *sf)\n         {\n             __asm__ (\"stmxcsr %0\" : \"=m\" (sf->mxcsr));\n         }\n-\t__asm__ (\"fnstcw %0\" : \"=m\" (sf->fpcsr));\n+        __asm__ (\"fnstcw %0\" : \"=m\" (sf->fpcsr));\n     }\n #endif\n }"}, {"sha": "b0ed8b2fe0afeee2c50e6b102ad77760e11ef620", "filename": "libcilkrts/runtime/declare-alloca.h", "status": "renamed", "additions": 36, "deletions": 28, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fdeclare-alloca.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fdeclare-alloca.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fdeclare-alloca.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,12 +1,10 @@\n-/* symbol_test.c                  -*-C-*-\n+/* cilk-abi-vla.cpp                  -*-C++-*-\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2013-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,30 +31,41 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n+ *\n  **************************************************************************/\n \n-/* simple program to verify that there are no undefined symbols in the runtime.\n- * If the runtime uses any symbols that are not defined, compiling this program\n- * will cause a linker error.\n+/*\n+ * You'd think that getting a declaration for alloca would be easy.  But you'd\n+ * be wrong. Here's a variant on what's recommended in the autoconf doc\n  */\n \n-#define _Cilk_for for\n-extern void* __cilkrts_global_state;\n-void *volatile p;\n-\n-void foo () { }\n-int main ()\n-{\n-    int i;\n-    long long j;\n-\n-    _Cilk_spawn foo();\n-    _Cilk_for (i = 0; i < 2; ++i)\n-        foo();\n-    _Cilk_for (j = 0; j < 2; ++j)\n-        foo();\n-    p = __cilkrts_global_state;\n-    return 0;\n-}\n-\n-/* End symbol_test.c */\n+#if defined _MSC_VER\n+#   include <malloc.h>\n+#   define alloca _alloca\n+#elif defined HAVE_ALLOCA_H\n+#   include <alloca.h>\n+#elif defined __GNUC__\n+#   define alloca __builtin_alloca\n+#elif defined _AIX\n+#   define alloca __alloca\n+#else\n+#   include <stddef.h>\n+#   ifdef  __cplusplus\n+extern \"C\"\n+#   endif\n+void *alloca (size_t);\n+#endif", "previous_filename": "libcilkrts/runtime/symbol_test.c"}, {"sha": "3083cb6c0e3cfadf0bd25ea216cd77993a1fcc79", "filename": "libcilkrts/runtime/doxygen-layout.xml", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fdoxygen-layout.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fdoxygen-layout.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fdoxygen-layout.xml?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,11 +1,9 @@\n <doxygenlayout version=\"1.0\">\n \n <!--\n-#  @copyright\n-#  Copyright (C) 2011-2013, Intel Corporation\n+#  Copyright (C) 2011-2016, Intel Corporation\n #  All rights reserved.\n #  \n-#  @copyright\n #  Redistribution and use in source and binary forms, with or without\n #  modification, are permitted provided that the following conditions\n #  are met:\n@@ -20,7 +18,6 @@\n #      contributors may be used to endorse or promote products derived\n #      from this software without specific prior written permission.\n #  \n-#  @copyright\n #  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n #  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n #  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -33,6 +30,20 @@\n #  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n #  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n #  POSSIBILITY OF SUCH DAMAGE.\n+#  \n+#  *********************************************************************\n+#  \n+#  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+#  a repository at cilkplus.org. Changes made to this file that are not\n+#  submitted through the contribution process detailed at\n+#  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+#  time that a new version is released. Changes only submitted to the\n+#  GNU compiler collection or posted to the git repository at\n+#  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+#  not tracked.\n+#  \n+#  We welcome your contributions to this open source project. Thank you\n+#  for your assistance in helping us improve Cilk Plus.\n -->\n \n   <!-- Navigation index tabs for HTML output -->"}, {"sha": "f9bf047d4b2a080e79cd39edd39cb0949d66d57d", "filename": "libcilkrts/runtime/doxygen.cfg", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fdoxygen.cfg", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fdoxygen.cfg", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fdoxygen.cfg?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,10 +1,8 @@\n # Doxyfile 1.7.4\r\n \r\n-#  @copyright\n-#  Copyright (C) 2011-2013, Intel Corporation\n+#  Copyright (C) 2011-2016, Intel Corporation\n #  All rights reserved.\n #  \n-#  @copyright\n #  Redistribution and use in source and binary forms, with or without\n #  modification, are permitted provided that the following conditions\n #  are met:\n@@ -19,7 +17,6 @@\n #      contributors may be used to endorse or promote products derived\n #      from this software without specific prior written permission.\n #  \n-#  @copyright\n #  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n #  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n #  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -32,6 +29,20 @@\n #  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n #  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n #  POSSIBILITY OF SUCH DAMAGE.\n+#  \n+#  *********************************************************************\n+#  \n+#  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+#  a repository at cilkplus.org. Changes made to this file that are not\n+#  submitted through the contribution process detailed at\n+#  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+#  time that a new version is released. Changes only submitted to the\n+#  GNU compiler collection or posted to the git repository at\n+#  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+#  not tracked.\n+#  \n+#  We welcome your contributions to this open source project. Thank you\n+#  for your assistance in helping us improve Cilk Plus.\n \r\n # This file describes the settings to be used by the documentation system\r\n # doxygen (www.doxygen.org) for a project.\r"}, {"sha": "4940acb41f7a1789988f30962924c153a78fdf2c", "filename": "libcilkrts/runtime/except-gcc.cpp", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fexcept-gcc.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fexcept-gcc.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fexcept-gcc.cpp?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n #include \"except-gcc.h\"\n@@ -100,12 +111,12 @@ static void\n decode_exceptions(char *out, size_t len, struct pending_exception_info *info)\n {\n     if (info->empty())\n-        snprintf(out, len, \"[empty]\");\n+        cilk_snprintf_s(out, len, \"%s\", \"[empty]\");\n     else if (info->rethrow)\n-        snprintf(out, len, \"[rethrow %p]\",\n-                 info->runtime_state.caughtExceptions);\n+        cilk_snprintf_l(out, len, \"[rethrow %p]\",\n+                        info->runtime_state.caughtExceptions);\n     else\n-        snprintf(out, len, \"[throw %p]\", (void *)info->active);\n+        cilk_snprintf_l(out, len, \"[throw %p]\", (void *)info->active);\n }\n #endif\n "}, {"sha": "3ef40616269c685d24927d24e91ed86d3e02b0f6", "filename": "libcilkrts/runtime/except-gcc.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fexcept-gcc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fexcept-gcc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fexcept-gcc.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n /**"}, {"sha": "6df7443e01a0eebd868cd1b67703b6e1fc6850ec", "filename": "libcilkrts/runtime/except.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fexcept.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n /**"}, {"sha": "9cbea45d22cd82bae1e405bd2b3c3a3b204c04c3", "filename": "libcilkrts/runtime/frame_malloc.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fframe_malloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fframe_malloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fframe_malloc.c?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n #include \"frame_malloc.h\""}, {"sha": "6f4521e2bc338c5e906f6f2a90d403d17bb1e9a1", "filename": "libcilkrts/runtime/frame_malloc.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fframe_malloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fframe_malloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fframe_malloc.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n /**"}, {"sha": "5d1f2a1b5d0cfe575bddf8263abd065d7c336908", "filename": "libcilkrts/runtime/full_frame.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Ffull_frame.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Ffull_frame.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Ffull_frame.c?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2010-2013, Intel Corporation\n+ *  Copyright (C) 2010-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  *\n  **************************************************************************/\n "}, {"sha": "185675db9590be83ec2d8c78e4e0477d98010c13", "filename": "libcilkrts/runtime/full_frame.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Ffull_frame.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Ffull_frame.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Ffull_frame.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n #ifndef INCLUDED_FULL_FRAME_DOT_H"}, {"sha": "2af6697b27a4ed6795c29bab6c3afc1ac7c31430", "filename": "libcilkrts/runtime/global_state.cpp", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fglobal_state.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fglobal_state.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fglobal_state.cpp?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n #include \"global_state.h\"\n@@ -57,7 +68,7 @@\n \n // TBD: There is a race when multiple threads try to initialize the\n // user_settable_values??\n-// \n+//\n // Set to true if the user settable values portion of the global state\n // singleton is initialized, even if the rest of the singleton is not\n // initialized.\n@@ -69,9 +80,10 @@ namespace {\n // cilkg_get_user_settable_values() is called and partially-zero-filled until\n // cilkg_init_global_state() is called.  The first field is filled in with\n // the size of a void* for the debugger and must be valid before initialization\n-global_state_t global_state_singleton =\n+static global_state_t global_state_singleton =\n {\n-    sizeof(void *),    // addr_size\n+    sizeof(void *),         // addr_size\n+    GLOBAL_STATE_VERSION,   // structure version\n };\n \n \n@@ -93,13 +105,15 @@ inline bool strmatch(const char* a, const char* b)\n     return 0 == std::strcmp(a, b);\n }\n \n-// Returns the integer value represented by the null-terminated string at 's'.\n+// Returns the integer value represented by the null-terminated, decimal string\n+// at 's'.\n+\n inline long to_long(const char* s)\n {\n     char *end;\n \n     errno = 0;\n-    return std::strtol(s, &end, 0);\n+    return std::strtol(s, &end, 10);\n }\n \n #ifdef _WIN32\n@@ -571,7 +585,6 @@ global_state_t* cilkg_init_global_state()\n \n void cilkg_publish_global_state(global_state_t* g) \n {\n-\n     // TBD: which one of these needs to be executed first?  I say\n     // cilkg_singleton_ptr needs to be set last, with a mfence in\n     // between, since it is the flag that cilkg_is_published_is\n@@ -584,7 +597,15 @@ void cilkg_publish_global_state(global_state_t* g)\n void cilkg_deinit_global_state()\n {\n     cilkg_singleton_ptr = NULL;\n-    __cilkrts_global_state = NULL;\n+\n+    // The pointer to the global state needs to remain valid for the\n+    // debugger.  Thus, we can't clear the following pointer.\n+    //    __cilkrts_global_state = NULL;\n+\n+\n+    // We also don't reset the global state, so that if we resume\n+    // execution after ending Cilk, user set variables (e.g., # of\n+    // workers) remains valid.\n }\n \n int cilkg_is_published(void)"}, {"sha": "527a4b54e4504b50d68bdb669b39fe1143d4134e", "filename": "libcilkrts/runtime/global_state.h", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fglobal_state.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fglobal_state.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fglobal_state.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n /**\n@@ -69,6 +80,16 @@ enum record_replay_t {\n     REPLAY_LOG\n };\n \n+/**\n+ * @brief Global state structure version.\n+ *\n+ * Since the global state is exposed for debugger access, we need a version\n+ * number to let it know that the version of the structure is what it expects\n+ * to see.  If any of the fields marked as (fixed) below are changed, the\n+ * version number needs to be bumped.\n+ */\n+#define GLOBAL_STATE_VERSION 0\n+\n /**\n  * @brief The global state is a structure that is shared by all workers in\n  * Cilk.\n@@ -109,7 +130,9 @@ struct global_state_t { /* COMMON_PORTABLE */\n      * debugger integration library will need to be changed to match!!!\n      *************************************************************************/\n \n-    int addr_size; ///< Number of bytes for an address, used by debugger (fixed)\n+    uint16_t addr_size; ///< Number of bytes for an address, used by debugger (fixed)\n+\n+    uint16_t version;   ///< Version of this structure (fixed)\n \n     int system_workers; ///< Number of system workers (fixed)\n "}, {"sha": "857e0210749aa2d6968ec6fd75c9778cf15caa17", "filename": "libcilkrts/runtime/jmpbuf.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fjmpbuf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fjmpbuf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fjmpbuf.c?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n #include \"jmpbuf.h\""}, {"sha": "0ce7ff8dbb28c06644732ae7bf2cfc183208557d", "filename": "libcilkrts/runtime/jmpbuf.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fjmpbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fjmpbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fjmpbuf.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n /**"}, {"sha": "d6568421a50cfe244133e6441f12bd9fbd788262", "filename": "libcilkrts/runtime/linux-symbols.ver", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Flinux-symbols.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Flinux-symbols.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Flinux-symbols.ver?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -1,11 +1,9 @@\n /*\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -20,7 +18,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -33,6 +30,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n CILKABI0\n@@ -87,11 +98,13 @@ CILKABI1\n     __cilkrts_get_sf;\n     __cilkrts_get_stack_size;\n     __cilkrts_get_worker_rank;\n+    __cilkrts_resume;\n     __cilkrts_save_fp_ctrl_state;\n     __cilkrts_stack_alloc;\n     __cilkrts_stack_free;\n+    __cilkrts_suspend;\n     __cilkrts_watch_stack;\n-} CILKABI0;\n+};\n \n CILKLIB1.02\n {"}, {"sha": "ae070d4158d3bb9e7e2804e7c0ffb105cbd52ae8", "filename": "libcilkrts/runtime/local_state.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Flocal_state.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Flocal_state.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Flocal_state.c?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2010-2013, Intel Corporation\n+ *  Copyright (C) 2010-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  *\n  **************************************************************************/\n "}, {"sha": "d16599f1add45038ba44df38a483e2c3b971a930", "filename": "libcilkrts/runtime/local_state.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Flocal_state.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Flocal_state.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Flocal_state.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n /**"}, {"sha": "efec3e984fd0c2e39981257ed27d509a672e07c6", "filename": "libcilkrts/runtime/mac-symbols.txt", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fmac-symbols.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fmac-symbols.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fmac-symbols.txt?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -7,7 +7,7 @@ ___cilkrts_bump_worker_rank\n ___cilkrts_bump_worker_rank_internal\n ___cilkrts_cilk_for_32\n ___cilkrts_cilk_for_64\n-___cilkrts_debugger_notification\n+\n ___cilkrts_dump_stats\n ___cilkrts_end_cilk\n ___cilkrts_enter_frame\n@@ -33,15 +33,17 @@ ___cilkrts_hyperobject_alloc\n ___cilkrts_hyperobject_dealloc\n ___cilkrts_hyperobject_noop_destroy\n ___cilkrts_init\n-___cilkrts_irml_version\n+\n ___cilkrts_leave_frame\n ___cilkrts_metacall\n+___cilkrts_resume\n ___cilkrts_rethrow\n ___cilkrts_return_exception\n ___cilkrts_save_fp_ctrl_state\n ___cilkrts_set_param\n ___cilkrts_stack_alloc\n ___cilkrts_stack_free\n+___cilkrts_suspend\n ___cilkrts_sync\n ___cilkrts_synched\n ___cilkrts_watch_stack"}, {"sha": "e5b3f0f9d8b8379daa978ae66f3bfc5b5581b475", "filename": "libcilkrts/runtime/metacall_impl.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fmetacall_impl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fmetacall_impl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fmetacall_impl.c?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n #include \"metacall_impl.h\""}, {"sha": "d395c523570f8874afd4fddf12ab2e7a6e94b979", "filename": "libcilkrts/runtime/metacall_impl.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fmetacall_impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fmetacall_impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fmetacall_impl.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2010-2013, Intel Corporation\n+ *  Copyright (C) 2010-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  *\n  **************************************************************************/\n "}, {"sha": "d339daf7026835f1db40506295eabbca8e63ebe0", "filename": "libcilkrts/runtime/os-unix.c", "status": "modified", "additions": 136, "deletions": 74, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fos-unix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fos-unix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fos-unix.c?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,15 +31,22 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n-#ifdef __linux__\n-    // define _GNU_SOURCE before *any* #include.\n-    // Even <stdint.h> will break later #includes if this macro is not\n-    // already defined when it is #included.\n-#   define _GNU_SOURCE\n-#endif\n-\n #include \"os.h\"\n #include \"bug.h\"\n #include \"cilk_malloc.h\"\n@@ -51,22 +55,27 @@\n #if defined __linux__\n #   include <sys/sysinfo.h>\n #   include <sys/syscall.h>\n+\n #elif defined __APPLE__\n #   include <sys/sysctl.h>\n     // Uses sysconf(_SC_NPROCESSORS_ONLN) in verbose output\n-#elif defined  __DragonFly__\n-// No additional include files\n-#elif defined  __FreeBSD__\n-// No additional include files\n-#elif defined __CYGWIN__\n-// Cygwin on Windows - no additional include files\n+\n #elif defined  __VXWORKS__\n #   include <vxWorks.h>   \n #   include <vxCpuLib.h>   \n-#   include <taskLib.h>   \n+#   include <taskLib.h>\n+   \n // Solaris\n #elif defined __sun__ && defined __svr4__\n #   include <sched.h>\n+\n+// OSes we know about which don't require any additional files\n+#elif defined __CYGWIN__ || \\\n+      defined __DragonFly__ || \\\n+      defined __FreeBSD__ || \\\n+      defined __GNU__\n+// No additional include files\n+\n #else\n #   error \"Unsupported OS\"\n #endif\n@@ -311,39 +320,67 @@ static pid_t linux_gettid(void)\n  * mask is set by the offload library to force the offload code away from\n  * cores that have offload support threads running on them.\n  */\n-static int linux_get_affinity_count (int tid) \n+static int linux_get_affinity_count ()\n {\n-#if !defined HAVE_PTHREAD_AFFINITY_NP\n-  return 0;\n+    long system_cores = sysconf(_SC_NPROCESSORS_ONLN);\n+    int affinity_cores = 0;\n+\n+#if defined HAVE_PTHREAD_AFFINITY_NP\n+\n+#if defined (CPU_ALLOC_SIZE) && ! defined(DONT_USE_CPU_ALLOC_SIZE)\n+    // Statically allocated cpu_set_t's max out at 1024 cores.  If\n+    // CPU_ALLOC_SIZE is available, use it to support large numbers of cores\n+    size_t cpusetsize = CPU_ALLOC_SIZE(system_cores);\n+    cpu_set_t *process_mask = (cpu_set_t *)__cilkrts_malloc(cpusetsize);\n+\n+    // Get the affinity mask for this thread\n+    int err = pthread_getaffinity_np(pthread_self(),\n+                                     cpusetsize,\n+                                     process_mask);\n+\n+    // Count the available cores.\n+    if (0 == err)\n+        affinity_cores = CPU_COUNT_S(cpusetsize, process_mask);\n+\n+    __cilkrts_free(process_mask);\n+\n #else\n+    // CPU_ALLOC_SIZE isn't available, or this is the Intel compiler build\n+    // and we have to support RHEL5.  Use a statically allocated cpu_set_t\n \n     cpu_set_t process_mask;\n \n     // Extract the thread affinity mask\n-    int err = sched_getaffinity (tid, sizeof(process_mask),&process_mask);\n+    int err = pthread_getaffinity_np(pthread_self(),\n+                                     sizeof(process_mask),\n+                                     &process_mask);\n \n-    if (0 != err)\n+    if (0 == err)\n     {\n-        return 0;\n-    }\n-\n-    // We have extracted the mask OK, so now we can count the number of threads\n-    // in it.  This is linear in the maximum number of CPUs available, We\n-    // could do a logarithmic version, if we assume the format of the mask,\n-    // but it's not really worth it. We only call this at thread startup\n-    // anyway.\n-    int available_procs = 0;\n-    int i;\n-    for (i = 0; i < CPU_SETSIZE; i++)\n-    {\n-        if (CPU_ISSET(i, &process_mask))\n+        // We have extracted the mask OK, so now we can count the number of\n+        // threads in it.  This is linear in the maximum number of CPUs\n+        // available, We could do a logarithmic version, if we assume the\n+        // format of the mask, but it's not really worth it. We only call\n+        // this at thread startup anyway.\n+        int i;\n+        for (i = 0; i < CPU_SETSIZE; i++)\n         {\n-            available_procs++;\n+            if (CPU_ISSET(i, &process_mask))\n+            {\n+                affinity_cores++;\n+            }\n         }\n     }\n-\n-    return available_procs;\n-#endif\n+#endif  // CPU_ALLOC_SIZE\n+#endif  //  ! defined HAVE_PTHREAD_AFFINITY_NP\n+\n+    // If we've got a count of cores this thread is supposed to use, that's\n+    // the number or cores we'll use.  Otherwise, default to the number of\n+    // cores on the system.\n+    if (0 == affinity_cores)\n+        return system_cores;\n+    else\n+        return affinity_cores;\n }\n #endif  //  defined (__linux__) && ! defined(__ANDROID__)\n \n@@ -356,72 +393,84 @@ static int linux_get_affinity_count (int tid)\n \n COMMON_SYSDEP int __cilkrts_hardware_cpu_count(void)\n {\n-#if defined __ANDROID__ || (defined(__sun__) && defined(__svr4__))\n-    return sysconf (_SC_NPROCESSORS_ONLN);\n+#if defined __ANDROID__  || \\\n+    defined __CYGWIN__   || \\\n+    defined __DragonFly__  || \\\n+    defined __FreeBSD__  || \\\n+    (defined(__sun__) && defined(__svr4__))\n+    return (int)sysconf(_SC_NPROCESSORS_ONLN);\n #elif defined __MIC__\n     /// HACK: Usually, the 3rd and 4th hyperthreads are not beneficial\n     /// on KNC.  Also, ignore the last core.\n-    int P = sysconf (_SC_NPROCESSORS_ONLN);\n-    return P/2 - 2;\n+    int count = (int)sysconf (_SC_NPROCESSORS_ONLN);\n+    return count/2 - 2;\n #elif defined __linux__\n-    int affinity_count = linux_get_affinity_count(linux_gettid());\n-\n-    return (0 != affinity_count) ? affinity_count : sysconf (_SC_NPROCESSORS_ONLN);\n+    return linux_get_affinity_count();\n #elif defined __APPLE__\n-    int count = 0;\n-    int cmd[2] = { CTL_HW, HW_NCPU };\n+    int count;\n     size_t len = sizeof count;\n-    int status = sysctl(cmd, 2, &count, &len, 0, 0);\n-    assert(status >= 0);\n-    assert((unsigned)count == count);\n+    int status = sysctlbyname(\"hw.logicalcpu\", &count, &len, 0, 0);\n+    assert(0 == status);\n \n     return count;\n-#elif defined  __FreeBSD__ || defined __CYGWIN__ || defined __DragonFly__\n-    int ncores = sysconf(_SC_NPROCESSORS_ONLN);\n-\n-    return ncores;\n-    // Just get the number of processors\n-//    return sysconf(_SC_NPROCESSORS_ONLN);\n #elif defined  __VXWORKS__\n-    return __builtin_popcount( vxCpuEnabledGet() );\n+    return __builtin_popcount(vxCpuEnabledGet());\n #else\n-#error \"Unknown architecture\"\n+#error \"Unsupported architecture\"\n+#endif\n+}\n+\n+COMMON_SYSDEP void __cilkrts_idle(void)\n+{\n+    // This is another version of __cilkrts_yield() to be used when\n+    // silencing workers that are not stealing work.\n+#if defined(__ANDROID__)  || \\\n+    defined(__FreeBSD__)  || \\\n+    defined(__VXWORKS__)  || \\\n+    (defined(__sun__) && defined(__svr4__))\n+    sched_yield();\n+#elif defined(__MIC__)\n+    _mm_delay_32(1024);\n+#elif defined(__linux__) || \\\n+      defined(__APPLE__)\n+    usleep(10000);\n+#else\n+# error \"Unsupported architecture\"\n #endif\n }\n \n COMMON_SYSDEP void __cilkrts_sleep(void)\n {\n #ifdef __VXWORKS__\n-\ttaskDelay(1);\n+    taskDelay(1);\n #else\t\t\t\n     usleep(1);\n #endif\t\n }\n \n COMMON_SYSDEP void __cilkrts_yield(void)\n {\n-#if __APPLE__ || __FreeBSD__ || __VXWORKS__\n-    // On MacOS, call sched_yield to yield quantum.  I'm not sure why we\n+#if defined(__ANDROID__)  || \\\n+    defined(__APPLE__)    || \\\n+    defined(__FreeBSD__)  || \\\n+    defined(__VXWORKS__)  || \\\n+    (defined(__sun__) && defined(__svr4__))\n+    // Call sched_yield to yield quantum.  I'm not sure why we\n     // don't do this on Linux also.\n     sched_yield();\n-#elif defined(__DragonFly__)\n-    // On DragonFly BSD, call sched_yield to yield quantum.\n-    sched_yield();\n #elif defined(__MIC__)\n     // On MIC, pthread_yield() really trashes things.  Arch's measurements\n     // showed that calling _mm_delay_32() (or doing nothing) was a better\n     // option.  Delaying 1024 clock cycles is a reasonable compromise between\n     // giving up the processor and latency starting up when work becomes\n     // available\n     _mm_delay_32(1024);\n-#elif defined(__ANDROID__) || (defined(__sun__) && defined(__svr4__))\n-    // On Android and Solaris, call sched_yield to yield quantum.  I'm not\n-    // sure why we don't do this on Linux also.\n-    sched_yield();\n-#else\n+#elif defined(__linux__)\n     // On Linux, call pthread_yield (which in turn will call sched_yield)\n     // to yield quantum.\n     pthread_yield();\n+#else\n+# error \"Unsupported architecture\"\n #endif\n }\n \n@@ -434,11 +483,10 @@ COMMON_SYSDEP __STDNS size_t cilkos_getenv(char* value, __STDNS size_t vallen,\n     const char* envstr = getenv(varname);\n     if (envstr)\n     {\n-        size_t len = strlen(envstr);\n+        size_t len = cilk_strlen(envstr);\n         if (len > vallen - 1)\n             return len + 1;\n-\n-        strcpy(value, envstr);\n+        cilk_strcpy_s(value, vallen, envstr);\n         return len;\n     }\n     else\n@@ -479,11 +527,25 @@ COMMON_SYSDEP void cilkos_warning(const char *fmt, ...)\n     fflush(stderr);\n }\n \n+#ifdef __VXWORKS__\n+#ifdef _WRS_KERNEL\n+void cilkStart()\n+{\n+    __cilkrts_init_tls_variables();\n+}\n+#else\n+_WRS_CONSTRUCTOR(cilkInit, 100)\n+{\n+    __cilkrts_init_tls_variables();\n+}\n+#endif\n+#else\n static void __attribute__((constructor)) init_once()\n {\n     /*__cilkrts_debugger_notification_internal(CILK_DB_RUNTIME_LOADED);*/\n     __cilkrts_init_tls_variables();\n }\n+#endif\n \n \n #define PAGE 4096"}, {"sha": "bfdf0203c229a61897372fa8ad1b319e6643920a", "filename": "libcilkrts/runtime/os.h", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fos.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n /**\n@@ -49,6 +60,7 @@\n #include \"rts-common.h\"\n #include \"cilk/common.h\"\n #include \"cilk-tbb-interop.h\"\n+#include \"cilk_str_mem.h\"\n \n #ifdef __cplusplus\n #   include <cstddef>\n@@ -156,6 +168,7 @@ COMMON_SYSDEP int __cilkrts_xchg(volatile int *ptr, int x);\n \n COMMON_SYSDEP void __cilkrts_sleep(void); ///< Sleep briefly \n COMMON_SYSDEP void __cilkrts_yield(void); ///< Yield quantum \n+COMMON_SYSDEP void __cilkrts_idle(void);  ///< Idle\n \n /**\n  * @brief Gets environment variable 'varname' and copy its value into 'value'."}, {"sha": "e0f058eb4a9ebedea2b4bdfa5174d7e2ec48bbda", "filename": "libcilkrts/runtime/os_mutex-unix.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fos_mutex-unix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fos_mutex-unix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fos_mutex-unix.c?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n #include \"os_mutex.h\""}, {"sha": "e2c12061a64702852ef0783e0cd84d423c6b732e", "filename": "libcilkrts/runtime/os_mutex.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fos_mutex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fos_mutex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fos_mutex.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n /**"}, {"sha": "19b390ac74a34ec2105222ba5756bf147166fa38", "filename": "libcilkrts/runtime/pedigrees.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fpedigrees.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fpedigrees.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fpedigrees.c?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2007-2013, Intel Corporation\n+ *  Copyright (C) 2007-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  *\n  **************************************************************************/\n "}, {"sha": "0e5c8d70da8b5feb35494ab8aff0445845176ba1", "filename": "libcilkrts/runtime/pedigrees.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fpedigrees.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fpedigrees.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fpedigrees.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n #ifndef INCLUDED_PEDIGREES_DOT_H"}, {"sha": "293c99ae65fad39f2e77137eb95f3eaeb8a53af2", "filename": "libcilkrts/runtime/record-replay.cpp", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Frecord-replay.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Frecord-replay.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Frecord-replay.cpp?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2012-2013, Intel Corporation\n+ *  Copyright (C) 2012-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  *\n  **************************************************************************/\n \n@@ -46,8 +57,8 @@\n #include <stdlib.h>\n \n // clang is really strict about printf formats, so use the annoying integer\n-// printf macros.  Unfortunately they're not avaiable on Windows\n-#ifdef _WIN32\n+// printf macros.  Unfortunately they're not available on Windows (or on VxWorks)\n+#if defined(_WIN32) || defined(_WRS_KERNEL)\n #define PRIu64 \"llu\"\n #else\n #define __STDC_FORMAT_MACROS 1\n@@ -251,10 +262,9 @@ char * walk_pedigree_nodes(char *p, const __cilkrts_pedigree *pnode)\n     if (pnode->parent)\n     {\n         p = walk_pedigree_nodes(p, pnode->parent);\n-        p += sprintf(p, \"_\");\n+        p += cilk_snprintf_s(p, PEDIGREE_BUFF_SIZE, \"%s\", (char *) \"_\");\n     }\n-\n-    return p + sprintf(p, \"%\" PRIu64, pnode->rank);\n+    return p + cilk_snprintf_l(p, PEDIGREE_BUFF_SIZE, \"%\" PRIu64, pnode->rank);\n }\n \n /**\n@@ -278,7 +288,7 @@ void write_to_replay_log (__cilkrts_worker *w, const char *type,\n \n     // If we don't have an initial pedigree node, just use \"0\" to fill the slot\n     if (NULL == initial_node)\n-        strcpy(pedigree, \"0\");\n+        cilk_strcpy_s(pedigree, PEDIGREE_BUFF_SIZE, \"0\");\n     else\n         walk_pedigree_nodes(pedigree, initial_node);\n \n@@ -544,7 +554,9 @@ void load_recorded_log(__cilkrts_worker *w)\n     FILE *f;\n \n     // Open the log for reading\n-    sprintf(local_replay_file_name, \"%s%d.cilklog\", w->g->record_replay_file_name,  w->self);\n+    cilk_snprintf_si(local_replay_file_name, sizeof(local_replay_file_name),\n+                     \"%s%d.cilklog\", w->g->record_replay_file_name,  w->self);\n+\n     f = fopen(local_replay_file_name, \"r\");\n \n     // Make sure we found a log!\n@@ -701,7 +713,8 @@ void replay_init_workers(global_state_t *g)\n         for(i = 0; i < g->total_workers; ++i)\n         {\n             __cilkrts_worker *w = g->workers[i];\n-            sprintf(worker_file_name, \"replay_log_%d.cilklog\",  w->self);\n+            cilk_snprintf_i(worker_file_name, sizeof(worker_file_name),\n+                            \"replay_log_%d.cilklog\",  w->self);\n             w->l->record_replay_fptr = fopen(worker_file_name, \"w+\");\n             CILK_ASSERT(NULL != w->l->record_replay_fptr);\n         }\n@@ -717,9 +730,8 @@ void replay_init_workers(global_state_t *g)\n         for(i = 0; i < g->total_workers; ++i)\n         {\n             __cilkrts_worker *w = g->workers[i];\n-            sprintf(worker_file_name, \"%s%d.cilklog\",\n-                    g->record_replay_file_name,\n-                    w->self);\n+            cilk_snprintf_si(worker_file_name, sizeof(worker_file_name),\n+                             \"%s%d.cilklog\", g->record_replay_file_name, w->self);\n             w->l->record_replay_fptr = fopen(worker_file_name, \"w+\");\n             CILK_ASSERT(NULL != w->l->record_replay_fptr);\n         }"}, {"sha": "a68790fc92c41ecff8cf53858d4364988055d320", "filename": "libcilkrts/runtime/record-replay.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Frecord-replay.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Frecord-replay.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Frecord-replay.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2012-2013, Intel Corporation\n+ *  Copyright (C) 2012-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  *\n  **************************************************************************/\n "}, {"sha": "f3acb3c30f13b7cba264cf40ded8a80ae78d37fe", "filename": "libcilkrts/runtime/reducer_impl.cpp", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Freducer_impl.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Freducer_impl.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Freducer_impl.cpp?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  *\n  *  Patents Pending, Intel Corporation.\n  **************************************************************************/"}, {"sha": "722eac14d107d7002a0b5cf1a4d54556719e679c", "filename": "libcilkrts/runtime/reducer_impl.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Freducer_impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Freducer_impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Freducer_impl.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n /**"}, {"sha": "75a5efe7dba43a6bd2ea82c6d9dd5aafad889582", "filename": "libcilkrts/runtime/rts-common.h", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Frts-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Frts-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Frts-common.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n #ifndef INCLUDED_RTS_COMMON_DOT_H\n@@ -64,8 +75,8 @@\n #define COMMON_SYSDEP\n #define NON_COMMON\n \n-#if !(defined __GNUC__ || defined __ICC)\n-#   define __builtin_expect(a_, b_) a_\n+#if !(defined __GNUC__ || defined __ICC) || defined(_WRS_KERNEL)\n+#   define __builtin_expect(a_, b_) (a_)\n #endif\n \n #ifdef __cplusplus\n@@ -103,7 +114,7 @@\n  * intrinsics (__notify_intrinsic()).  For those that don't, #undef the\n  * following definition:\n  */\n-//#define ENABLE_NOTIFY_ZC_INTRINSIC 1\n+#define ENABLE_NOTIFY_ZC_INTRINSIC 1\n \n #if defined(__INTEL_COMPILER)\n /* The notify intrinsic was introduced in ICC 12.0. */\n@@ -112,12 +123,16 @@\n #   endif\n #elif defined(__VXWORKS__)\n #   undef ENABLE_NOTIFY_ZC_INTRINSIC\n+#elif defined(__GNUC__)\n+#   // GCC doesn't support the notify intrinsic as of 4.9\n+#   undef ENABLE_NOTIFY_ZC_INTRINSIC\n #elif defined(__clang__)\n #   if !defined(__has_extension) || !__has_extension(notify_zc_intrinsic)\n #      undef ENABLE_NOTIFY_ZC_INTRINSIC\n #   endif\n-#elif defined(__arm__)\n-// __notify_zc_intrinsic not yet supported by gcc for ARM\n+#elif ! (defined(__x86_64__) || defined(__i386) \\\n+         || defined(_M_X64) || defined(_M_IX86))\n+// __notify_zc_intrinsic currently supported only for intel architecture\n #   undef ENABLE_NOTIFY_ZC_INTRINSIC\n #endif\n "}, {"sha": "538c43104f3a01d596ebba980a22ba1be4823aa1", "filename": "libcilkrts/runtime/scheduler.c", "status": "modified", "additions": 85, "deletions": 29, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fscheduler.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fscheduler.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fscheduler.c?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2007-2013, Intel Corporation\n+ *  Copyright (C) 2007-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  *\n  **************************************************************************/\n \n@@ -1778,7 +1789,15 @@ static full_frame* check_for_work(__cilkrts_worker *w)\n         if (NULL == ff) {\n             // Punish the worker for failing to steal.\n             // No quantum for you!\n-            __cilkrts_yield();\n+            if (w->l->steal_failure_count > 30000) {\n+                // Punish more if the worker has been doing unsuccessful steals\n+                // for a long time. After return from the idle state, it will\n+                // be given a grace period to react quickly.\n+                __cilkrts_idle();\n+                w->l->steal_failure_count -= 300;\n+            } else {\n+                __cilkrts_yield();\n+            }\n             w->l->steal_failure_count++;\n         } else {\n             // Reset steal_failure_count since there is obviously still work to\n@@ -1808,6 +1827,7 @@ static full_frame* search_until_work_found_or_done(__cilkrts_worker *w)\n             ff = check_for_work(w);\n             break;\n         case SCHEDULE_WAIT:            // go into wait-mode.\n+            START_INTERVAL(w, INTERVAL_SCHEDULE_WAIT);\n             CILK_ASSERT(WORKER_SYSTEM == w->l->type);\n             // If we are about to wait, then we better not have\n             // a frame that we should execute...\n@@ -1818,6 +1838,7 @@ static full_frame* search_until_work_found_or_done(__cilkrts_worker *w)\n             // Runtime is waking up.\n             notify_children_run(w);\n             w->l->steal_failure_count = 0;\n+            STOP_INTERVAL(w, INTERVAL_SCHEDULE_WAIT);\n             break;\n         case SCHEDULE_EXIT:            // exit the scheduler.\n             CILK_ASSERT(WORKER_USER != w->l->type);\n@@ -2006,9 +2027,6 @@ static void worker_scheduler_init_function(__cilkrts_worker *w)\n     // The startup work varies, depending on the worker type.\n     switch (w->l->type) {\n     case WORKER_USER:\n-        // Stop working once we've entered the scheduler.\n-        // For user workers, INTERVAL_IN_SCHEDULER counts the time\n-        // since we called bind_thread.\n         break;\n \n     case WORKER_SYSTEM:\n@@ -2022,11 +2040,6 @@ static void worker_scheduler_init_function(__cilkrts_worker *w)\n         // Runtime is waking up.\n         notify_children_run(w);\n         w->l->steal_failure_count = 0;\n-\n-        // For system threads, count all the time this thread is\n-        // alive in the scheduling loop.\n-        START_INTERVAL(w, INTERVAL_IN_SCHEDULER);\n-        START_INTERVAL(w, INTERVAL_WORKING);\n         break;\n     default:\n         __cilkrts_bug(\"Unknown worker %p of type %d entering scheduling loop\\n\",\n@@ -2047,8 +2060,6 @@ static void worker_scheduler_terminate_function(__cilkrts_worker *w)\n     // A user worker should never finish by falling through the\n     // scheduling loop.\n     CILK_ASSERT(WORKER_USER != w->l->type);\n-    STOP_INTERVAL(w, INTERVAL_IN_RUNTIME);\n-    STOP_INTERVAL(w, INTERVAL_IN_SCHEDULER);\n }\n \n /**\n@@ -2060,30 +2071,36 @@ static void worker_scheduler_terminate_function(__cilkrts_worker *w)\n  */\n static void worker_scheduler_function(__cilkrts_worker *w)\n {\n+    START_INTERVAL(w, INTERVAL_INIT_WORKER);\n     worker_scheduler_init_function(w);\n-\n+    STOP_INTERVAL(w, INTERVAL_INIT_WORKER);\n+    \n     // The main scheduling loop body.\n \n     while (!w->g->work_done) {    \n-        // Set intervals.  Now we are in the runtime instead of working.\n-        START_INTERVAL(w, INTERVAL_IN_RUNTIME);\n-        STOP_INTERVAL(w, INTERVAL_WORKING);\n-\n         // Execute the \"body\" of the scheduling loop, and figure\n         // out the fiber to jump to next.\n+        START_INTERVAL(w, INTERVAL_SCHED_LOOP);\n         cilk_fiber* fiber_to_resume\n             = worker_scheduling_loop_body(w->l->scheduling_fiber, w);\n-\n+        STOP_INTERVAL(w, INTERVAL_SCHED_LOOP);\n+        \n         if (fiber_to_resume) {\n             // Suspend the current fiber and resume next one.\n             NOTE_INTERVAL(w, INTERVAL_SUSPEND_RESUME_OTHER);\n+\n+            // Whenever we jump to resume user code, we stop being in\n+            // the runtime, and start working.\n             STOP_INTERVAL(w, INTERVAL_IN_RUNTIME);\n             START_INTERVAL(w, INTERVAL_WORKING);\n             cilk_fiber_suspend_self_and_resume_other(w->l->scheduling_fiber,\n                                                      fiber_to_resume);\n-\n             // Return here only when this (scheduling) fiber is\n             // resumed (i.e., this worker wants to reenter the runtime).\n+\n+            // We've already switched from WORKING to IN_RUNTIME in\n+            // the runtime code that handles the fiber switch.  Thus, at\n+            // this point we are IN_RUNTIME already.\n         }\n     }\n \n@@ -2183,6 +2200,8 @@ NORETURN __cilkrts_c_sync(__cilkrts_worker *w,\n                           __cilkrts_stack_frame *sf_at_sync)\n {\n     full_frame *ff; \n+    STOP_INTERVAL(w, INTERVAL_WORKING);\n+    START_INTERVAL(w, INTERVAL_IN_RUNTIME);\n \n     // Claim: This read of w->l->frame_ff can occur without\n     // holding the worker lock because when w has reached a sync\n@@ -2343,6 +2362,11 @@ void __cilkrts_c_THE_exception_check(__cilkrts_worker *w,\n     int stolen_p;\n     __cilkrts_stack_frame *saved_sf = NULL;\n \n+    // For the exception check, stop working and count as time in\n+    // runtime.\n+    STOP_INTERVAL(w, INTERVAL_WORKING);\n+    START_INTERVAL(w, INTERVAL_IN_RUNTIME);\n+\n     START_INTERVAL(w, INTERVAL_THE_EXCEPTION_CHECK);\n \n     BEGIN_WITH_WORKER_LOCK(w) {\n@@ -2410,6 +2434,11 @@ void __cilkrts_c_THE_exception_check(__cilkrts_worker *w,\n     else\n     {\n         NOTE_INTERVAL(w, INTERVAL_THE_EXCEPTION_CHECK_USELESS);\n+\n+        // If we fail the exception check and return, then switch back\n+        // to working.\n+        STOP_INTERVAL(w, INTERVAL_IN_RUNTIME);\n+        START_INTERVAL(w, INTERVAL_WORKING);\n         return;\n     }\n }\n@@ -2419,6 +2448,9 @@ NORETURN __cilkrts_exception_from_spawn(__cilkrts_worker *w,\n                                         __cilkrts_stack_frame *returning_sf) \n {\n     full_frame *ff = w->l->frame_ff;\n+    STOP_INTERVAL(w, INTERVAL_WORKING);\n+    START_INTERVAL(w, INTERVAL_IN_RUNTIME);\n+\n     // This is almost the same as THE_exception_check, except\n     // the detach didn't happen, we don't need to undo the tail\n     // update.\n@@ -2551,6 +2583,10 @@ __cilkrts_stack_frame *simulate_pop_tail(__cilkrts_worker *w)\n void __cilkrts_return(__cilkrts_worker *w)\n {\n     full_frame *ff, *parent_ff;\n+\n+    // Count time during the return as in the runtime.\n+    STOP_INTERVAL(w, INTERVAL_WORKING);\n+    START_INTERVAL(w, INTERVAL_IN_RUNTIME);\n     START_INTERVAL(w, INTERVAL_RETURNING);\n \n     BEGIN_WITH_WORKER_LOCK_OPTIONAL(w) {\n@@ -2604,6 +2640,8 @@ void __cilkrts_return(__cilkrts_worker *w)\n     } END_WITH_WORKER_LOCK_OPTIONAL(w);\n \n     STOP_INTERVAL(w, INTERVAL_RETURNING);\n+    STOP_INTERVAL(w, INTERVAL_IN_RUNTIME);\n+    START_INTERVAL(w, INTERVAL_WORKING);\n }\n \n static void __cilkrts_unbind_thread()\n@@ -2619,13 +2657,10 @@ static void __cilkrts_unbind_thread()\n         if (w) {\n             g = w->g;\n \n-            // If there's only 1 worker, the counts will be stopped in\n-            // __cilkrts_scheduler\n-            if (g->P > 1)\n-            {\n-                STOP_INTERVAL(w, INTERVAL_WORKING);\n-                STOP_INTERVAL(w, INTERVAL_IN_SCHEDULER);\n-            }\n+\n+            // Matches the START in bind_thread in cilk-abi.c.\n+            STOP_INTERVAL(w, INTERVAL_IN_RUNTIME);\n+            STOP_INTERVAL(w, INTERVAL_IN_SCHEDULER);\n \n             __cilkrts_set_tls_worker(0);\n \n@@ -2658,6 +2693,11 @@ void __cilkrts_c_return_from_initial(__cilkrts_worker *w)\n {\n     struct cilkred_map *rm;\n \n+    // When we are returning from the initial frame, switch from\n+    // INTERVAL_WORKING into INTERVAL_IN_RUNTIME. \n+    STOP_INTERVAL(w, INTERVAL_WORKING);\n+    START_INTERVAL(w, INTERVAL_IN_RUNTIME);\n+\n     /* This is only called on a user thread worker. */\n     CILK_ASSERT(w->l->type == WORKER_USER);\n \n@@ -3629,6 +3669,11 @@ slow_path_reductions_for_spawn_return(__cilkrts_worker *w,\n             // We have reductions to execute (and we can't hold locks).\n             __cilkrts_frame_unlock(w, ff->parent);\n \n+            // After we've released the lock, start counting time as\n+            // WORKING again.\n+            STOP_INTERVAL(w, INTERVAL_IN_RUNTIME);\n+            START_INTERVAL(w, INTERVAL_WORKING);\n+\n             // Merge all reducers into the left map.\n             left_map = repeated_merge_reducer_maps(&w,\n                                                    left_map,\n@@ -3649,6 +3694,9 @@ slow_path_reductions_for_spawn_return(__cilkrts_worker *w,\n             ff->pending_exception = w->l->pending_exception;\n             w->l->pending_exception = NULL;\n \n+            STOP_INTERVAL(w, INTERVAL_WORKING);\n+            START_INTERVAL(w, INTERVAL_IN_RUNTIME);\n+\n             // Lock ff->parent for the next loop around.\n             __cilkrts_frame_lock(w, ff->parent);\n \n@@ -3809,13 +3857,21 @@ slow_path_reductions_for_sync(__cilkrts_worker *w,\n                 return w;\n             }\n         } END_WITH_FRAME_LOCK(w, ff);\n+\n+        // After we've released the lock, start counting time as\n+        // WORKING again.\n+        STOP_INTERVAL(w, INTERVAL_IN_RUNTIME);\n+        START_INTERVAL(w, INTERVAL_WORKING);\n         \n         // If we get here, we have a nontrivial reduction to execute.\n         middle_map = repeated_merge_reducer_maps(&w,\n                                                  left_map,\n                                                  middle_map);\n         verify_current_wkr(w);\n \n+        STOP_INTERVAL(w, INTERVAL_WORKING);\n+        START_INTERVAL(w, INTERVAL_IN_RUNTIME);\n+\n         // Save any exceptions generated because of the reduction\n         // process.  These get merged the next time around the\n         // loop."}, {"sha": "74c45096fca4d517337c276203e4a1b8d3e00452", "filename": "libcilkrts/runtime/scheduler.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fscheduler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fscheduler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fscheduler.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n /**"}, {"sha": "bdf820c7a8eb8090a06298f3b329fd6f44c615ad", "filename": "libcilkrts/runtime/signal_node.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsignal_node.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsignal_node.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fsignal_node.c?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2011-2013, Intel Corporation\n+ *  Copyright (C) 2011-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  *\n  **************************************************************************/\n "}, {"sha": "354b4ac74567d8ccd33cfe06c41c167fbdb82041", "filename": "libcilkrts/runtime/signal_node.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsignal_node.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsignal_node.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fsignal_node.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n /**"}, {"sha": "f9d8c47675ab954fb6bcf9afc26d3713c4f82472", "filename": "libcilkrts/runtime/spin_mutex.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fspin_mutex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fspin_mutex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fspin_mutex.c?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n #include \"spin_mutex.h\""}, {"sha": "d46b956f974cc17c6f214969ccb3f6a57773bdc3", "filename": "libcilkrts/runtime/spin_mutex.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fspin_mutex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fspin_mutex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fspin_mutex.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n /**"}, {"sha": "54b65c9a23f228979a8b7427bb54bcfe5c4170ad", "filename": "libcilkrts/runtime/sslib/ignore_handler_s.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsslib%2Fignore_handler_s.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsslib%2Fignore_handler_s.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fsslib%2Fignore_handler_s.c?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -0,0 +1,72 @@\n+/*------------------------------------------------------------------\n+ * ignore_handler_s.c\n+ *\n+ * 2012, Jonathan Toppins <jtoppins@users.sourceforge.net>\n+ *\n+ * Copyright (c) 2012 Cisco Systems\n+ * All rights reserved.\n+ *\n+ * Permission is hereby granted, free of charge, to any person\n+ * obtaining a copy of this software and associated documentation\n+ * files (the \"Software\"), to deal in the Software without\n+ * restriction, including without limitation the rights to use,\n+ * copy, modify, merge, publish, distribute, sublicense, and/or\n+ * sell copies of the Software, and to permit persons to whom the\n+ * Software is furnished to do so, subject to the following\n+ * conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be\n+ * included in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n+ * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n+ * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n+ * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n+ * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n+ * OTHER DEALINGS IN THE SOFTWARE.\n+ *------------------------------------------------------------------\n+ */\n+\n+#include \"safeclib_private.h\"\n+\n+/**\n+ * NAME\n+ *    ignore_handler_s\n+ *\n+ * SYNOPSIS\n+ *    #include \"safe_lib.h\"\n+ *    void ignore_handler_s(const char *msg, void *ptr, errno_t error)\n+ *\n+ * DESCRIPTION\n+ *    This function simply returns to the caller.\n+ *\n+ * SPECIFIED IN\n+ *    ISO/IEC JTC1 SC22 WG14 N1172, Programming languages, environments\n+ *    and system software interfaces, Extensions to the C Library,\n+ *    Part I: Bounds-checking interfaces\n+ *\n+ * INPUT PARAMETERS\n+ *    msg       Pointer to the message describing the error\n+ *\n+ *    ptr       Pointer to aassociated data.  Can be NULL.\n+ *\n+ *    error     The error code encountered.\n+ *\n+ * RETURN VALUE\n+ *    Returns no value.\n+ *\n+ * ALSO SEE\n+ *    abort_handler_s()\n+ *\n+ */\n+\n+void ignore_handler_s(const char *msg, void *ptr, errno_t error)\n+{\n+\n+\tsldebug_printf(\"IGNORE CONSTRAINT HANDLER: (%u) %s\\n\", error,\n+\t\t       (msg) ? msg : \"Null message\");\n+\treturn;\n+}\n+EXPORT_SYMBOL(ignore_handler_s);"}, {"sha": "9ffb24e72ab03d4412ac8bedca6b5379a23a9f82", "filename": "libcilkrts/runtime/sslib/safe_lib.h", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsslib%2Fsafe_lib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsslib%2Fsafe_lib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fsslib%2Fsafe_lib.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -0,0 +1,61 @@\n+/*------------------------------------------------------------------\n+ * safe_lib.h -- Safe C Library\n+ *\n+ * October 2008, Bo Berry\n+ * Modified 2012, Jonathan Toppins <jtoppins@users.sourceforge.net>\n+ *\n+ * Copyright (c) 2008-2013 by Cisco Systems, Inc\n+ * All rights reserved.\n+ *\n+ * Permission is hereby granted, free of charge, to any person\n+ * obtaining a copy of this software and associated documentation\n+ * files (the \"Software\"), to deal in the Software without\n+ * restriction, including without limitation the rights to use,\n+ * copy, modify, merge, publish, distribute, sublicense, and/or\n+ * sell copies of the Software, and to permit persons to whom the\n+ * Software is furnished to do so, subject to the following\n+ * conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be\n+ * included in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n+ * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n+ * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n+ * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n+ * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n+ * OTHER DEALINGS IN THE SOFTWARE.\n+ *------------------------------------------------------------------\n+ */\n+\n+#ifndef __SAFE_LIB_H__\n+#define __SAFE_LIB_H__\n+\n+#include \"safe_types.h\"\n+#include \"safe_lib_errno.h\"\n+\n+/* C11 appendix K types - specific for bounds checking */\n+typedef size_t  rsize_t;\n+\n+/*\n+ * We depart from the standard and allow memory and string operations to\n+ * have different max sizes. See the respective safe_mem_lib.h or\n+ * safe_str_lib.h files.\n+ */\n+/* #define RSIZE_MAX (~(rsize_t)0)  - leave here for completeness */\n+\n+typedef void (*constraint_handler_t) (const char * /* msg */,\n+                                      void *       /* ptr */,\n+                                      errno_t      /* error */);\n+\n+extern void abort_handler_s(const char *msg, void *ptr, errno_t error);\n+extern void ignore_handler_s(const char *msg, void *ptr, errno_t error);\n+\n+#define sl_default_handler ignore_handler_s\n+\n+//#include \"safe_mem_lib.h\"\n+#include \"safe_str_lib.h\"\n+\n+#endif /* __SAFE_LIB_H__ */"}, {"sha": "8f27111c3530b9d270db029663fba61083c8282b", "filename": "libcilkrts/runtime/sslib/safe_lib_errno.h", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsslib%2Fsafe_lib_errno.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsslib%2Fsafe_lib_errno.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fsslib%2Fsafe_lib_errno.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -0,0 +1,100 @@\n+/*------------------------------------------------------------------\n+ * safe_lib_errno.h -- Safe C Lib Error codes\n+ *\n+ * October 2008, Bo Berry\n+ * Modified 2012, Jonathan Toppins <jtoppins@users.sourceforge.net>\n+ *\n+ * Copyright (c) 2008-2013 by Cisco Systems, Inc\n+ * All rights reserved.\n+ *\n+ * Permission is hereby granted, free of charge, to any person\n+ * obtaining a copy of this software and associated documentation\n+ * files (the \"Software\"), to deal in the Software without\n+ * restriction, including without limitation the rights to use,\n+ * copy, modify, merge, publish, distribute, sublicense, and/or\n+ * sell copies of the Software, and to permit persons to whom the\n+ * Software is furnished to do so, subject to the following\n+ * conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be\n+ * included in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n+ * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n+ * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n+ * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n+ * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n+ * OTHER DEALINGS IN THE SOFTWARE.\n+ *------------------------------------------------------------------\n+ */\n+\n+#ifndef __SAFE_LIB_ERRNO_H__\n+#define __SAFE_LIB_ERRNO_H__\n+\n+#ifdef __KERNEL__\n+# include <linux/errno.h>\n+#else\n+#include <errno.h>\n+#endif /* __KERNEL__ */\n+\n+/*\n+ * Safe Lib specific errno codes.  These can be added to the errno.h file\n+ * if desired.\n+ */\n+#ifndef ESNULLP\n+#define ESNULLP         ( 400 )       /* null ptr                    */\n+#endif\n+\n+#ifndef ESZEROL\n+#define ESZEROL         ( 401 )       /* length is zero              */\n+#endif\n+\n+#ifndef ESLEMIN\n+#define ESLEMIN         ( 402 )       /* length is below min         */\n+#endif\n+\n+#ifndef ESLEMAX\n+#define ESLEMAX         ( 403 )       /* length exceeds max          */\n+#endif\n+\n+#ifndef ESOVRLP\n+#define ESOVRLP         ( 404 )       /* overlap undefined           */\n+#endif\n+\n+#ifndef ESEMPTY\n+#define ESEMPTY         ( 405 )       /* empty string                */\n+#endif\n+\n+#ifndef ESNOSPC\n+#define ESNOSPC         ( 406 )       /* not enough space for s2     */\n+#endif\n+\n+#ifndef ESUNTERM\n+#define ESUNTERM        ( 407 )       /* unterminated string         */\n+#endif\n+\n+#ifndef ESNODIFF\n+#define ESNODIFF        ( 408 )       /* no difference               */\n+#endif\n+\n+#ifndef ESNOTFND\n+#define ESNOTFND        ( 409 )       /* not found                   */\n+#endif\n+\n+/* Additional for safe snprintf_s interfaces                         */\n+#ifndef ESBADFMT\n+#define ESBADFMT        ( 410 )       /* bad format string           */\n+#endif\n+\n+#ifndef ESFMTTYP\n+#define ESFMTTYP        ( 411 )       /* bad format type             */\n+#endif\n+\n+/* EOK may or may not be defined in errno.h */\n+#ifndef EOK\n+#define EOK             ( 0 )\n+#endif\n+\n+#endif /* __SAFE_LIB_ERRNO_H__ */"}, {"sha": "17e7fbbb4d2f7717349182228df4ef7ddb4b50f9", "filename": "libcilkrts/runtime/sslib/safe_str_constraint.c", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsslib%2Fsafe_str_constraint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsslib%2Fsafe_str_constraint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fsslib%2Fsafe_str_constraint.c?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -0,0 +1,146 @@\n+/*------------------------------------------------------------------\n+ * safe_str_constraint.c\n+ *\n+ * October 2008, Bo Berry\n+ * 2012, Jonathan Toppins <jtoppins@users.sourceforge.net>\n+ *\n+ * Copyright (c) 2008, 2009, 2012 Cisco Systems\n+ * All rights reserved.\n+ *\n+ * Permission is hereby granted, free of charge, to any person\n+ * obtaining a copy of this software and associated documentation\n+ * files (the \"Software\"), to deal in the Software without\n+ * restriction, including without limitation the rights to use,\n+ * copy, modify, merge, publish, distribute, sublicense, and/or\n+ * sell copies of the Software, and to permit persons to whom the\n+ * Software is furnished to do so, subject to the following\n+ * conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be\n+ * included in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n+ * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n+ * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n+ * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n+ * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n+ * OTHER DEALINGS IN THE SOFTWARE.\n+ *------------------------------------------------------------------\n+ */\n+\n+#include \"safeclib_private.h\"\n+#include \"safe_str_constraint.h\"\n+#include \"safe_str_lib.h\"\n+\n+\n+static constraint_handler_t str_handler = NULL;\n+\n+\n+/**\n+ * NAME\n+ *    set_str_constraint_handler_s\n+ *\n+ * SYNOPSIS\n+ *    #include \"safe_str_lib.h\"\n+ *    constraint_handler_t\n+ *    set_str_constraint_handler_s(constraint_handler_t handler)\n+ *\n+ * DESCRIPTION\n+ *    The set_str_constraint_handler_s function sets the runtime-constraint\n+ *    handler to be handler. The runtime-constraint handler is the function to\n+ *    be called when a library function detects a runtime-constraint\n+ *    violation. Only the most recent handler registered with\n+ *    set_str_constraint_handler_s is called when a runtime-constraint\n+ *    violation occurs.\n+ *    When the handler is called, it is passed the following arguments in\n+ *    the following order:\n+ *        1.    A pointer to a character string describing the\n+ *              runtime-constraint violation.\n+ *        2.    A null pointer or a pointer to an implementation defined\n+ *              object.\n+ *        3.    If the function calling the handler has a return type declared\n+ *              as errno_t, the return value of the function is passed.\n+ *              Otherwise, a positive value of type errno_t is passed.\n+ *    The implementation has a default constraint handler that is used if no\n+ *    calls to the set_constraint_handler_s function have been made. The\n+ *    behavior of the default handler is implementation-defined, and it may\n+ *    cause the program to exit or abort.  If the handler argument to\n+ *    set_constraint_handler_s is a null pointer, the implementation default\n+ *    handler becomes the current constraint handler.\n+ *\n+ * SPECIFIED IN\n+ *    ISO/IEC JTC1 SC22 WG14 N1172, Programming languages, environments\n+ *    and system software interfaces, Extensions to the C Library,\n+ *    Part I: Bounds-checking interfaces\n+ *\n+ * INPUT PARAMETERS\n+ *   *msg            Pointer to the message describing the error\n+ *\n+ *   *ptr            Pointer to aassociated data.  Can be NULL.\n+ *\n+ *    error          The error code encountered.\n+ *\n+ * OUTPUT PARAMETERS\n+ *    none\n+ *\n+ * RETURN VALUE\n+ *    none\n+ *\n+ * ALSO SEE\n+ *    set_str_constraint_handler_s()\n+ */\n+constraint_handler_t\n+set_str_constraint_handler_s (constraint_handler_t handler)\n+{\n+    constraint_handler_t prev_handler = str_handler;\n+    if (NULL == handler) {\n+        str_handler = sl_default_handler;\n+    } else {\n+        str_handler = handler;\n+    }\n+    return prev_handler;\n+}\n+EXPORT_SYMBOL(set_str_constraint_handler_s);\n+\n+\n+/**\n+ * NAME\n+ *    invoke_safe_str_constraint_handler\n+ *\n+ * SYNOPSIS\n+ *    #include \"safe_str_constraint.h\"\n+ *    void\n+ *    invoke_safe_str_constraint_handler (const char *msg,\n+ *                                void *ptr,\n+ *                                errno_t error)\n+ *\n+ * DESCRIPTION\n+ *    Invokes the currently set constraint handler or the default.\n+ *\n+ * INPUT PARAMETERS\n+ *   *msg            Pointer to the message describing the error\n+ *\n+ *   *ptr            Pointer to aassociated data.  Can be NULL.\n+ *\n+ *    error          The error code encountered.\n+ *\n+ * OUTPUT PARAMETERS\n+ *    none\n+ *\n+ * RETURN VALUE\n+ *    none\n+ *\n+ */\n+void\n+invoke_safe_str_constraint_handler (const char *msg,\n+                                    void *ptr,\n+                                    errno_t error)\n+{\n+    if (NULL != str_handler) {\n+        str_handler(msg, ptr, error);\n+    } else {\n+        sl_default_handler(msg, ptr, error);\n+    }\n+}"}, {"sha": "a1fba3e7e85c1774c2996fc49bf91b765b5e0024", "filename": "libcilkrts/runtime/sslib/safe_str_constraint.h", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsslib%2Fsafe_str_constraint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsslib%2Fsafe_str_constraint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fsslib%2Fsafe_str_constraint.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -0,0 +1,78 @@\n+/*------------------------------------------------------------------\n+ * safe_str_constraint.h\n+ *\n+ * October 2008, Bo Berry\n+ *\n+ * Copyright (c) 2008-2011 Cisco Systems\n+ * All rights reserved.\n+ *\n+ * Permission is hereby granted, free of charge, to any person\n+ * obtaining a copy of this software and associated documentation\n+ * files (the \"Software\"), to deal in the Software without\n+ * restriction, including without limitation the rights to use,\n+ * copy, modify, merge, publish, distribute, sublicense, and/or\n+ * sell copies of the Software, and to permit persons to whom the\n+ * Software is furnished to do so, subject to the following\n+ * conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be\n+ * included in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n+ * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n+ * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n+ * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n+ * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n+ * OTHER DEALINGS IN THE SOFTWARE.\n+ *------------------------------------------------------------------\n+ */\n+\n+#ifndef __SAFE_STR_CONSTRAINT_H__\n+#define __SAFE_STR_CONSTRAINT_H__\n+\n+#include \"safeclib_private.h\"\n+\n+/*\n+ * Function used by the libraries to invoke the registered\n+ * runtime-constraint handler. Always needed.\n+ */\n+extern void invoke_safe_str_constraint_handler(\n+                           const char *msg,\n+                           void *ptr,\n+                           errno_t error);\n+\n+\n+/*\n+ * Safe C Lib internal string routine to consolidate error handling\n+ */\n+static inline void handle_error(char *orig_dest, rsize_t orig_dmax,\n+                                char *err_msg, errno_t err_code)\n+{\n+#ifdef SAFECLIB_STR_NULL_SLACK\n+    /* null string to eliminate partial copy */\n+    while (orig_dmax) { *orig_dest = '\\0'; orig_dmax--; orig_dest++; }\n+#else\n+    *orig_dest = '\\0';\n+#endif\n+\n+    invoke_safe_str_constraint_handler(err_msg, NULL, err_code);\n+    return;\n+}\n+\n+static inline void handle_wc_error(wchar_t *orig_dest, rsize_t orig_dmax,\n+                                char *err_msg, errno_t err_code)\n+{\n+#ifdef SAFECLIB_STR_NULL_SLACK\n+    /* null string to eliminate partial copy */\n+    while (orig_dmax) { *orig_dest = L'\\0'; orig_dmax--; orig_dest++; }\n+#else\n+    *orig_dest = L'\\0';\n+#endif\n+\n+    invoke_safe_str_constraint_handler(err_msg, NULL, err_code);\n+    return;\n+}\n+\n+#endif   /* __SAFE_STR_CONSTRAINT_H__ */"}, {"sha": "3bc841ea551bc7725500f93d0286c6bb20c8b388", "filename": "libcilkrts/runtime/sslib/safe_str_lib.h", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsslib%2Fsafe_str_lib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsslib%2Fsafe_str_lib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fsslib%2Fsafe_str_lib.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -0,0 +1,70 @@\n+/*------------------------------------------------------------------\n+ * safe_str_lib.h -- Safe C Library String APIs\n+ *\n+ * October 2008, Bo Berry\n+ *\n+ * Copyright (c) 2008-2011, 2013 by Cisco Systems, Inc.\n+ * All rights reserved.\n+ *\n+ * Permission is hereby granted, free of charge, to any person\n+ * obtaining a copy of this software and associated documentation\n+ * files (the \"Software\"), to deal in the Software without\n+ * restriction, including without limitation the rights to use,\n+ * copy, modify, merge, publish, distribute, sublicense, and/or\n+ * sell copies of the Software, and to permit persons to whom the\n+ * Software is furnished to do so, subject to the following\n+ * conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be\n+ * included in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n+ * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n+ * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n+ * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n+ * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n+ * OTHER DEALINGS IN THE SOFTWARE.\n+ *------------------------------------------------------------------\n+ */\n+\n+#ifndef __SAFE_STR_LIB_H__\n+#define __SAFE_STR_LIB_H__\n+\n+#include \"safe_lib.h\"\n+\n+/*\n+ * The shortest string is a null string!!\n+ */\n+#define RSIZE_MIN_STR      ( 1 )\n+\n+/* maximum sring length */\n+#define RSIZE_MAX_STR      ( 4UL << 10 )      /* 4KB */\n+\n+\n+/* The makeup of a password */\n+#define SAFE_STR_MIN_LOWERCASE     ( 2 )\n+#define SAFE_STR_MIN_UPPERCASE     ( 2 )\n+#define SAFE_STR_MIN_NUMBERS       ( 1 )\n+#define SAFE_STR_MIN_SPECIALS      ( 1 )\n+\n+#define SAFE_STR_PASSWORD_MIN_LENGTH   ( 6 )\n+#define SAFE_STR_PASSWORD_MAX_LENGTH   ( 32 )\n+\n+\n+/* set string constraint handler */\n+extern constraint_handler_t\n+set_str_constraint_handler_s(constraint_handler_t handler);\n+\n+\n+/* string copy */\n+extern errno_t\n+strcpy_s(char *dest, rsize_t dmax, const char *src);\n+\n+/* string length */\n+extern rsize_t\n+strnlen_s (const char *s, rsize_t smax);\n+\n+\n+#endif   /* __SAFE_STR_LIB_H__ */"}, {"sha": "5c2df9c6128890e823ffc12e6f73b1d5fdd59840", "filename": "libcilkrts/runtime/sslib/safe_types.h", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsslib%2Fsafe_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsslib%2Fsafe_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fsslib%2Fsafe_types.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -0,0 +1,61 @@\n+/*------------------------------------------------------------------\n+ * safe_types.h - C99 std types & defs or Linux kernel equivalents\n+ *\n+ * March 2007, Bo Berry\n+ * Modified 2012, Jonathan Toppins <jtoppins@users.sourceforge.net>\n+ *\n+ * Copyright (c) 2007-2013 by Cisco Systems, Inc\n+ * All rights reserved.\n+ *\n+ * Permission is hereby granted, free of charge, to any person\n+ * obtaining a copy of this software and associated documentation\n+ * files (the \"Software\"), to deal in the Software without\n+ * restriction, including without limitation the rights to use,\n+ * copy, modify, merge, publish, distribute, sublicense, and/or\n+ * sell copies of the Software, and to permit persons to whom the\n+ * Software is furnished to do so, subject to the following\n+ * conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be\n+ * included in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n+ * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n+ * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n+ * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n+ * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n+ * OTHER DEALINGS IN THE SOFTWARE.\n+ *------------------------------------------------------------------\n+ */\n+\n+#ifndef __SAFE_TYPES_H__\n+#define __SAFE_TYPES_H__\n+\n+#ifdef __KERNEL__\n+/* linux kernel environment */\n+\n+#include <linux/stddef.h>\n+#include <linux/types.h>\n+#include <linux/errno.h>\n+\n+/* errno_t isn't defined in the kernel */\n+typedef int errno_t;\n+\n+#else\n+\n+#include <stdio.h>\n+#include <sys/types.h>\n+#ifndef _WRS_KERNEL\n+#include <inttypes.h>\n+#endif\n+#include <stdint.h>\n+#include <errno.h>\n+\n+typedef int errno_t;\n+\n+#include <stdbool.h>\n+\n+#endif /* __KERNEL__ */\n+#endif /* __SAFE_TYPES_H__ */"}, {"sha": "7280e879a8e48ddd1c647aab93cd6de542d34fe1", "filename": "libcilkrts/runtime/sslib/safeclib_private.h", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsslib%2Fsafeclib_private.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsslib%2Fsafeclib_private.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fsslib%2Fsafeclib_private.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -0,0 +1,93 @@\n+/*------------------------------------------------------------------\n+ * safeclib_private.h - Internal library references\n+ *\n+ * 2012, Jonathan Toppins <jtoppins@users.sourceforge.net>\n+ *\n+ * Copyright (c) 2012, 2013 by Cisco Systems, Inc\n+ * All rights reserved.\n+ *\n+ * Permission is hereby granted, free of charge, to any person\n+ * obtaining a copy of this software and associated documentation\n+ * files (the \"Software\"), to deal in the Software without\n+ * restriction, including without limitation the rights to use,\n+ * copy, modify, merge, publish, distribute, sublicense, and/or\n+ * sell copies of the Software, and to permit persons to whom the\n+ * Software is furnished to do so, subject to the following\n+ * conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be\n+ * included in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n+ * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n+ * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n+ * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n+ * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n+ * OTHER DEALINGS IN THE SOFTWARE.\n+ *------------------------------------------------------------------\n+ */\n+\n+#ifndef __SAFECLIB_PRIVATE_H__\n+#define __SAFECLIB_PRIVATE_H__\n+\n+#ifdef __KERNEL__\n+/* linux kernel environment */\n+\n+#include <linux/kernel.h>\n+#include <linux/module.h>\n+#include <linux/ctype.h>\n+\n+#define RCNEGATE(x)  ( -(x) )\n+\n+#define slprintf(...) printk(KERN_EMERG __VA_ARGS__)\n+#define slabort()\n+#ifdef DEBUG\n+#define sldebug_printf(...) printk(KERN_DEBUG __VA_ARGS__)\n+#endif\n+\n+#else  /* !__KERNEL__ */\n+\n+#if HAVE_CONFIG_H\n+#include \"config.h\"\n+#endif\n+\n+#include <stdio.h>\n+#ifdef STDC_HEADERS\n+# include <ctype.h>\n+# include <stdlib.h>\n+# include <stddef.h>\n+#else\n+# ifdef HAVE_STDLIB_H\n+#  include <stdlib.h>\n+# endif\n+#endif\n+#ifdef HAVE_STRING_H\n+# if !defined STDC_HEADERS && defined HAVE_MEMORY_H\n+#  include <memory.h>\n+# endif\n+# include <string.h>\n+#endif\n+#ifdef HAVE_LIMITS_H\n+# include <limits.h>\n+#endif\n+\n+#define EXPORT_SYMBOL(sym)\n+#define RCNEGATE(x)  (x)\n+\n+#define slprintf(...) fprintf(stderr, __VA_ARGS__)\n+#define slabort()     abort()\n+#ifdef DEBUG\n+#define sldebug_printf(...) printf(__VA_ARGS__)\n+#endif\n+\n+#endif /* __KERNEL__ */\n+\n+#ifndef sldebug_printf\n+#define sldebug_printf(...)\n+#endif\n+\n+#include \"safe_lib.h\"\n+\n+#endif /* __SAFECLIB_PRIVATE_H__ */"}, {"sha": "b4abb8652c1567c4082c2922c5067324950ec4de", "filename": "libcilkrts/runtime/sslib/snprintf_s.h", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsslib%2Fsnprintf_s.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsslib%2Fsnprintf_s.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fsslib%2Fsnprintf_s.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -0,0 +1,49 @@\n+/*------------------------------------------------------------------\n+ * sprintf_s.h -- Safe Sprintf Interfaces\n+ *\n+ * August 2014, D Wheeler\n+ *\n+ * Copyright (c) 2014 by Intel Corp\n+ * All rights reserved.\n+ *\n+ * Permission is hereby granted, free of charge, to any person\n+ * obtaining a copy of this software and associated documentation\n+ * files (the \"Software\"), to deal in the Software without\n+ * restriction, including without limitation the rights to use,\n+ * copy, modify, merge, publish, distribute, sublicense, and/or\n+ * sell copies of the Software, and to permit persons to whom the\n+ * Software is furnished to do so, subject to the following\n+ * conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be\n+ * included in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n+ * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n+ * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n+ * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n+ * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n+ * OTHER DEALINGS IN THE SOFTWARE.\n+ *------------------------------------------------------------------\n+ */\n+#ifndef SPRINTF_S_H_\n+#define SPRINTF_S_H_\n+\n+#include <safe_lib_errno.h>\n+\n+\n+#define SNPRFNEGATE(x) (-1*(x))\n+\n+\n+\n+int snprintf_s_s(char *dest, rsize_t dmax, const char *format, char *s);\n+int snprintf_s_i(char *dest, rsize_t dmax, const char *format, int a);\n+int snprintf_s_si(char *dest, rsize_t dmax, const char *format, char *s, int a);\n+int snprintf_s_l(char *dest, rsize_t dmax, const char *format, long a);\n+int snprintf_s_sl(char *dest, rsize_t dmax, const char *format, char *s, long a);\n+\n+\n+\n+#endif /* SPRINTF_S_H_ */"}, {"sha": "5ee0e3dd36b50bf7a14481986dbea4e7c29f2b20", "filename": "libcilkrts/runtime/sslib/snprintf_support.c", "status": "added", "additions": 353, "deletions": 0, "changes": 353, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsslib%2Fsnprintf_support.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsslib%2Fsnprintf_support.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fsslib%2Fsnprintf_support.c?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -0,0 +1,353 @@\n+/*------------------------------------------------------------------\n+ * snprintf_support.c\n+ *\n+ * August 2014, D Wheeler\n+ *\n+ * Copyright (c) 2014 by Intel Corp\n+ * All rights reserved.\n+ *\n+ * Permission is hereby granted, free of charge, to any person\n+ * obtaining a copy of this software and associated documentation\n+ * files (the \"Software\"), to deal in the Software without\n+ * restriction, including without limitation the rights to use,\n+ * copy, modify, merge, publish, distribute, sublicense, and/or\n+ * sell copies of the Software, and to permit persons to whom the\n+ * Software is furnished to do so, subject to the following\n+ * conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be\n+ * included in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n+ * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n+ * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n+ * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n+ * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n+ * OTHER DEALINGS IN THE SOFTWARE.\n+ *------------------------------------------------------------------\n+ */\n+#include \"safeclib_private.h\"\n+#include \"safe_str_constraint.h\"\n+#include \"safe_str_lib.h\"\n+#include \"snprintf_s.h\"\n+\n+#define FMT_CHAR    'c'\n+#define FMT_WCHAR   'C'\n+#define FMT_SHORT   'h'\n+#define FMT_INT\t\t'd'\n+#define FMT_LONG\t'l'\n+#define FMT_STRING\t's'\n+#define FMT_WSTRING\t'S'\n+#define FMT_DOUBLE\t'g'\n+#define FMT_LDOUBLE\t'G'\n+#define FMT_VOID    'p'\n+#define FMT_PCHAR\t'1'\n+#define FMT_PSHORT\t'2'\n+#define FMT_PINT\t'3'\n+#define FMT_PLONG\t'4'\n+\n+\n+\n+#define MAX_FORMAT_ELEMENTS    16\n+\n+#define CHK_FORMAT(X,Y)   (((X)==(Y))?1:0)\n+\n+\n+unsigned int\n+parse_format(const char *format, char pformatList[], unsigned int maxFormats)\n+{\n+\tunsigned int  numFormats = 0;\n+\tunsigned int  index = 0;\n+\tunsigned int  start = 0;\n+\tchar\t\t  lmod = 0;\n+\n+\twhile (index < RSIZE_MAX_STR && format[index] != '\\0' && numFormats < maxFormats)\n+\t{\n+\t\tif (format[index] == '%') {\n+\t\t\tstart = index; // remember where the format string started\n+\t\t\t// Check for flags\n+\t\t\tswitch( format[++index]) {\n+\t\t\tcase '\\0': continue; // skip - end of format string\n+\t\t\tcase '%' : continue; // skip - actually a percent character\n+\t\t\tcase '#' : // convert to alternate form\n+\t\t\tcase '0' : // zero pad\n+\t\t\tcase '-' : // left adjust\n+\t\t\tcase ' ' : // pad with spaces\n+\t\t\tcase '+' : // force a sign be used\n+\t\t\t\tindex++; // skip the flag character\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\t// check for and skip the optional field width\n+\t\t\twhile ( format[index] != '\\0' && format[index] >= '0' && format[index] <= '9') {\n+\t\t\t\tindex++;\n+\t\t\t}\n+\t\t\t// Check for an skip the optional precision\n+\t\t\tif ( format[index] != '\\0' && format[index] == '.') {\n+\t\t\t\tindex++; // skip the period\n+\t\t\t\twhile ( format[index] != '\\0' && format[index] >= '0' && format[index] <= '9') {\n+\t\t\t\t\tindex++;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// Check for and skip the optional length modifiers\n+\t\t\tlmod = ' ';\n+\t\t\tswitch( format[index]) {\n+\t\t\tcase 'h' : if ( format[++index] == 'h') {\n+\t\t\t\t           ++index; //also recognize the 'hh' modifier\n+\t\t\t\t           lmod = 'H'; // for char\n+\t\t\t           } else {\n+\t\t\t               lmod = 'h'; // for short\n+\t\t\t           }\n+\t\t\t\t\t   break;\n+\t\t\tcase 'l' : if ( format[++index] == 'l') {\n+\t\t\t\t           ++index; //also recognize the 'll' modifier\n+\t\t\t\t           lmod = 'd'; // for long long\n+\t\t\t           } else {\n+\t\t\t               lmod = 'l'; // for long\n+\t\t\t           }\n+\t\t\t           break;\n+\t\t\tcase 'L' : lmod = 'L'; break;\n+\t\t\tcase 'j' :\n+\t\t\tcase 'z' :\n+\t\t\tcase 't' : index++;\n+\t\t\t           break;\n+\t\t\t}\n+\n+\t\t\t// Recognize and record the actual modifier\n+\t\t\tswitch( format[index]) {\n+\t\t\tcase 'c' :\n+\t\t\t\t if ( lmod == 'l') {\n+\t\t\t\t\t pformatList[numFormats] = FMT_WCHAR; // store the format character\n+\t\t\t\t } else {\n+\t\t\t\t\t pformatList[numFormats] = FMT_CHAR;\n+\t\t\t\t }\n+\t\t\t\t numFormats++;\n+\t\t\t\t index++; // skip the format character\n+\t\t\t\t break;\n+\n+\t\t\tcase 'd' : case 'i' : // signed\n+\t\t\tcase 'o' : case 'u' : // unsigned\n+\t\t\tcase 'x' : case 'X' : // unsigned\n+\t\t\t\t if ( lmod == 'H') {\n+\t\t\t\t\t pformatList[numFormats] = FMT_CHAR; // store the format character\n+\t\t\t\t } else if ( lmod == 'l') {\n+\t\t\t\t \t pformatList[numFormats] = FMT_LONG; // store the format character\n+\t\t\t\t } else if ( lmod == 'h') {\n+\t\t\t\t\t pformatList[numFormats] = FMT_SHORT; // store the format character\n+\t\t\t\t } else{\n+\t\t\t\t\t pformatList[numFormats] = FMT_INT;\n+\t\t\t\t }\n+\t\t\t\t numFormats++;\n+\t\t\t\t index++; // skip the format character\n+\t\t\t\t break;\n+\n+\t\t\tcase 'e' : case 'E' :\n+\t\t\tcase 'f' : case 'F' :\n+\t\t\tcase 'g' : case 'G' :\n+\t\t\tcase 'a' : case 'A' :\n+\t\t\t\t if ( lmod == 'L') {\n+\t\t\t\t\t pformatList[numFormats] = FMT_LDOUBLE; // store the format character\n+\t\t\t\t } else{\n+\t\t\t\t\t pformatList[numFormats] = FMT_DOUBLE;\n+\t\t\t\t }\n+\t\t\t\t numFormats++;\n+\t\t\t\t index++; // skip the format character\n+\t\t\t\t break;\n+\n+\t\t\tcase 's' :\n+\t\t\t\t if ( lmod == 'l' || lmod == 'L') {\n+\t\t\t\t\t pformatList[numFormats] = FMT_WSTRING; // store the format character\n+\t\t\t\t } else {\n+\t\t\t\t\t pformatList[numFormats] = FMT_STRING;\n+\t\t\t\t }\n+\t\t\t\t numFormats++;\n+\t\t\t\t index++; // skip the format character\n+\t\t\t\t break;\n+\n+\t\t\tcase 'p' :\n+\t\t\t\t pformatList[numFormats] = FMT_VOID;\n+\t\t\t\t numFormats++;\n+\t\t\t\t index++; // skip the format character\n+\t\t\t\t break;\n+\n+\t\t\tcase 'n' :\n+\t\t\t\t if ( lmod == 'H') {\n+\t\t\t\t\t pformatList[numFormats] = FMT_PCHAR; // store the format character\n+\t\t\t\t } else if ( lmod == 'l') {\n+\t\t\t\t\t pformatList[numFormats] = FMT_PLONG; // store the format character\n+\t\t\t\t } else if ( lmod == 'h') {\n+\t\t\t\t\t pformatList[numFormats] = FMT_PSHORT; // store the format character\n+\t\t\t\t } else{\n+\t\t\t\t\t pformatList[numFormats] = FMT_PINT;\n+\t\t\t\t }\n+\t\t\t\t numFormats++;\n+\t\t\t\t index++; // skip the format character\n+\t\t\t\t break;\n+\t\t\tcase 'm' :\n+\t\t\t     // Does not represent an argument in the call stack\n+\t\t\t     index++; // skip the format character\n+\t\t\t     continue;\n+\t\t\tdefault:\n+\t\t\t\tprintf(\"failed to recognize format string [\");\n+\t\t\t\tfor (;start<index; start++) { printf(\"%c\", format[start]); }\n+\t\t\t\tputs(\"]\");\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+        if (format[index] != '%')\n+            // don't know why it skips over blindly, not handling cases such as \"%s%d\".\n+            index++; // move past this character\n+\t}\n+\n+\treturn numFormats;\n+}\n+\n+unsigned int\n+check_integer_format(const char format)\n+{\n+\tunsigned int  retValue = 0; // default failure\n+\tswitch( format) {\n+\t\tcase FMT_CHAR  :\n+\t\tcase FMT_SHORT :\n+\t\tcase FMT_INT   :\n+\t\t\tretValue = 1;\n+\t\t\tbreak;\n+\t}\n+\treturn retValue;\n+}\n+\n+\n+\n+inline int snprintf_s_i(char *dest, rsize_t dmax, const char *format, int a)\n+{\n+\tchar pformatList[MAX_FORMAT_ELEMENTS];\n+\tunsigned int index = 0;\n+\n+\t// Determine the number of format options in the format string\n+\tunsigned int  nfo = parse_format(format, &pformatList[0], MAX_FORMAT_ELEMENTS);\n+\n+\t// Check that there are not too many format options\n+\tif ( nfo != 1 ) {\n+\t\tdest[0] = '\\0';\n+\t\treturn SNPRFNEGATE(ESBADFMT);\n+\t}\n+\t// Check that the format is for an integer type\n+\tif ( check_integer_format(pformatList[index]) == 0) {\n+\t\tdest[0] = '\\0';\n+\t\treturn SNPRFNEGATE(ESFMTTYP);\n+\t}\n+\tindex++;\n+\n+\treturn snprintf(dest, dmax, format, a);\n+}\n+\n+\n+\n+inline int snprintf_s_l(char *dest, rsize_t dmax, const char *format, long a)\n+{\n+\tchar pformatList[MAX_FORMAT_ELEMENTS];\n+\tunsigned int index = 0;\n+\n+\t// Determine the number of format options in the format string\n+\tunsigned int  nfo = parse_format(format, &pformatList[0], MAX_FORMAT_ELEMENTS);\n+\n+\t// Check that there are not too many format options\n+\tif ( nfo != 1 ) {\n+\t\tdest[0] = '\\0';\n+\t\treturn SNPRFNEGATE(ESBADFMT);\n+\t}\n+\t// Check that the format is for an long type\n+\tif ( CHK_FORMAT(FMT_LONG, pformatList[index]) == 0) {\n+\t\tdest[0] = '\\0';\n+\t\treturn SNPRFNEGATE(ESFMTTYP);\n+\t}\n+\tindex++;\n+\n+\treturn snprintf(dest, dmax, format, a);\n+}\n+\n+\n+inline int snprintf_s_si(char *dest, rsize_t dmax, const char *format, char *s, int a)\n+{\n+\tchar pformatList[MAX_FORMAT_ELEMENTS];\n+\tunsigned int index = 0;\n+\n+\t// Determine the number of format options in the format string\n+\tunsigned int  nfo = parse_format(format, &pformatList[0], MAX_FORMAT_ELEMENTS);\n+\n+\t// Check that there are not too many format options\n+\tif ( nfo != 2 ) {\n+\t\tdest[0] = '\\0';\n+\t\treturn SNPRFNEGATE(ESBADFMT);\n+\t}\n+\t// Check first format is of string type\n+\tif ( CHK_FORMAT(FMT_STRING, pformatList[index]) == 0) {\n+\t\tdest[0] = '\\0';\n+\t\treturn SNPRFNEGATE(ESFMTTYP);\n+\t}\n+\tindex++;\n+\n+\t// Check that the format is for an integer type\n+\tif ( check_integer_format(pformatList[index]) == 0) {\n+\t\tdest[0] = '\\0';\n+\t\treturn SNPRFNEGATE(ESFMTTYP);\n+\t}\n+\tindex++;\n+\n+\treturn snprintf(dest, dmax, format, s, a);\n+}\n+\n+\n+inline int snprintf_s_sl(char *dest, rsize_t dmax, const char *format, char *s, long a)\n+{\n+\tchar pformatList[MAX_FORMAT_ELEMENTS];\n+\tunsigned int index = 0;\n+\n+\t// Determine the number of format options in the format string\n+\tunsigned int  nfo = parse_format(format, &pformatList[0], MAX_FORMAT_ELEMENTS);\n+\n+\t// Check that there are not too many format options\n+\tif ( nfo != 2 ) {\n+\t\tdest[0] = '\\0';\n+\t\treturn SNPRFNEGATE(ESBADFMT);\n+\t}\n+\t// Check first format is of string type\n+\tif ( CHK_FORMAT(FMT_STRING, pformatList[index]) == 0) {\n+\t\tdest[0] = '\\0';\n+\t\treturn SNPRFNEGATE(ESFMTTYP);\n+\t}\n+\tindex++;\n+\n+\t// Check that the format is for an integer type\n+\tif ( CHK_FORMAT(FMT_LONG, pformatList[index]) == 0) {\n+\t\t\tdest[0] = '\\0';\n+\t\t\treturn SNPRFNEGATE(ESFMTTYP);\n+\t}\n+\tindex++;\n+\n+\treturn snprintf(dest, dmax, format, s, a);\n+}\n+\n+inline int snprintf_s_s(char *dest, rsize_t dmax, const char *format, char *s)\n+{\n+    char pformatList[MAX_FORMAT_ELEMENTS];\n+    unsigned int index = 0;\n+\n+\t// Determine the number of format options in the format string\n+\tunsigned int  nfo = parse_format(format, &pformatList[0], MAX_FORMAT_ELEMENTS);\n+\n+\t// Check that there are not too many format options\n+\tif ( nfo != 1 ) {\n+\t\tdest[0] = '\\0';\n+\t\treturn SNPRFNEGATE(ESBADFMT);\n+\t}\n+\t// Check first format is of string type\n+\tif ( CHK_FORMAT(FMT_STRING, pformatList[index]) == 0) {\n+\t\tdest[0] = '\\0';\n+\t\treturn SNPRFNEGATE(ESFMTTYP);\n+\t}\n+\tindex++;\n+\n+\treturn snprintf(dest, dmax, format, s);\n+}"}, {"sha": "a0cbd6dc93011262ee5d50185fbabb543f532507", "filename": "libcilkrts/runtime/sslib/strcpy_s.c", "status": "added", "additions": 198, "deletions": 0, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsslib%2Fstrcpy_s.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsslib%2Fstrcpy_s.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fsslib%2Fstrcpy_s.c?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -0,0 +1,198 @@\n+/*------------------------------------------------------------------\n+ * strcpy_s.c\n+ *\n+ * October 2008, Bo Berry\n+ *\n+ * Copyright (c) 2008-2011 by Cisco Systems, Inc\n+ * All rights reserved.\n+ *\n+ * Permission is hereby granted, free of charge, to any person\n+ * obtaining a copy of this software and associated documentation\n+ * files (the \"Software\"), to deal in the Software without\n+ * restriction, including without limitation the rights to use,\n+ * copy, modify, merge, publish, distribute, sublicense, and/or\n+ * sell copies of the Software, and to permit persons to whom the\n+ * Software is furnished to do so, subject to the following\n+ * conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be\n+ * included in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n+ * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n+ * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n+ * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n+ * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n+ * OTHER DEALINGS IN THE SOFTWARE.\n+ *------------------------------------------------------------------\n+ */\n+\n+#include \"safeclib_private.h\"\n+#include \"safe_str_constraint.h\"\n+#include \"safe_str_lib.h\"\n+\n+\n+/**\n+ * NAME\n+ *    strcpy_s\n+ *\n+ * SYNOPSIS\n+ *    #include \"safe_str_lib.h\"\n+ *    errno_t\n+ *    strcpy_s(char *dest, rsize_t dmax, const char *src)\n+ *\n+ * DESCRIPTION\n+ *    The strcpy_s function copies the string pointed to by src\n+ *    (including the terminating null character) into the array\n+ *    pointed to by dest. All elements following the terminating\n+ *    null character (if any) written by strcpy_s in the array\n+ *    of dmax characters pointed to by dest are nulled when\n+ *    strcpy_s returns.\n+ *\n+ * SPECIFIED IN\n+ *    ISO/IEC TR 24731, Programming languages, environments\n+ *    and system software interfaces, Extensions to the C Library,\n+ *    Part I: Bounds-checking interfaces\n+ *\n+ * INPUT PARAMETERS\n+ *    dest      pointer to string that will be replaced by src.\n+ *\n+ *    dmax      restricted maximum length of dest\n+ *\n+ *    src       pointer to the string that will be copied\n+ *               to dest\n+ *\n+ * OUTPUT PARAMETERS\n+ *    dest      updated\n+ *\n+ * RUNTIME CONSTRAINTS\n+ *    Neither dest nor src shall be a null pointer.\n+ *    dmax shall not be greater than RSIZE_MAX_STR.\n+ *    dmax shall not equal zero.\n+ *    dmax shall be greater than strnlen_s(src, dmax).\n+ *    Copying shall not take place between objects that overlap.\n+ *    If there is a runtime-constraint violation, then if dest\n+ *       is not a null pointer and destmax is greater than zero and\n+ *       not greater than RSIZE_MAX_STR, then strcpy_s nulls dest.\n+ *\n+ * RETURN VALUE\n+ *    EOK        successful operation, the characters in src were\n+ *               copied into dest and the result is null terminated.\n+ *    ESNULLP    NULL pointer\n+ *    ESZEROL    zero length\n+ *    ESLEMAX    length exceeds max limit\n+ *    ESOVRLP    strings overlap\n+ *    ESNOSPC    not enough space to copy src\n+ *\n+ * ALSO SEE\n+ *    strcat_s(), strncat_s(), strncpy_s()\n+ *\n+ */\n+errno_t\n+strcpy_s (char *dest, rsize_t dmax, const char *src)\n+{\n+    rsize_t orig_dmax;\n+    char *orig_dest;\n+    const char *overlap_bumper;\n+\n+    if (dest == NULL) {\n+        invoke_safe_str_constraint_handler(\"strcpy_s: dest is null\",\n+                   NULL, ESNULLP);\n+        return RCNEGATE(ESNULLP);\n+    }\n+\n+    if (dmax == 0) {\n+        invoke_safe_str_constraint_handler(\"strcpy_s: dmax is 0\",\n+                   NULL, ESZEROL);\n+        return RCNEGATE(ESZEROL);\n+    }\n+\n+    if (dmax > RSIZE_MAX_STR) {\n+        invoke_safe_str_constraint_handler(\"strcpy_s: dmax exceeds max\",\n+                   NULL, ESLEMAX);\n+        return RCNEGATE(ESLEMAX);\n+    }\n+\n+    if (src == NULL) {\n+#ifdef SAFECLIB_STR_NULL_SLACK\n+        /* null string to clear data */\n+        while (dmax) {  *dest = '\\0'; dmax--; dest++; }\n+#else\n+        *dest = '\\0';\n+#endif\n+        invoke_safe_str_constraint_handler(\"strcpy_s: src is null\",\n+                   NULL, ESNULLP);\n+        return RCNEGATE(ESNULLP);\n+    }\n+\n+    if (dest == src) {\n+        return RCNEGATE(EOK);\n+    }\n+\n+    /* hold base of dest in case src was not copied */\n+    orig_dmax = dmax;\n+    orig_dest = dest;\n+\n+    if (dest < src) {\n+        overlap_bumper = src;\n+\n+        while (dmax > 0) {\n+            if (dest == overlap_bumper) {\n+                handle_error(orig_dest, orig_dmax, \"strcpy_s: \"\n+                             \"overlapping objects\",\n+                             ESOVRLP);\n+                return RCNEGATE(ESOVRLP);\n+            }\n+\n+            *dest = *src;\n+            if (*dest == '\\0') {\n+#ifdef SAFECLIB_STR_NULL_SLACK\n+                /* null slack to clear any data */\n+                while (dmax) { *dest = '\\0'; dmax--; dest++; }\n+#endif\n+                return RCNEGATE(EOK);\n+            }\n+\n+            dmax--;\n+            dest++;\n+            src++;\n+        }\n+\n+    } else {\n+        overlap_bumper = dest;\n+\n+        while (dmax > 0) {\n+            if (src == overlap_bumper) {\n+                handle_error(orig_dest, orig_dmax, \"strcpy_s: \"\n+                      \"overlapping objects\",\n+                      ESOVRLP);\n+                return RCNEGATE(ESOVRLP);\n+            }\n+\n+            *dest = *src;\n+            if (*dest == '\\0') {\n+#ifdef SAFECLIB_STR_NULL_SLACK\n+                /* null slack to clear any data */\n+                while (dmax) { *dest = '\\0'; dmax--; dest++; }\n+#endif\n+                return RCNEGATE(EOK);\n+            }\n+\n+            dmax--;\n+            dest++;\n+            src++;\n+        }\n+    }\n+\n+    /*\n+     * the entire src must have been copied, if not reset dest\n+     * to null the string.\n+     */\n+    handle_error(orig_dest, orig_dmax, \"strcpy_s: not \"\n+                 \"enough space for src\",\n+                 ESNOSPC);\n+    return RCNEGATE(ESNOSPC);\n+}\n+EXPORT_SYMBOL(strcpy_s);"}, {"sha": "e1cdd6b172154fe04432b877021e63edb289d158", "filename": "libcilkrts/runtime/sslib/strncpy_s.c", "status": "added", "additions": 238, "deletions": 0, "changes": 238, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsslib%2Fstrncpy_s.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsslib%2Fstrncpy_s.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fsslib%2Fstrncpy_s.c?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -0,0 +1,238 @@\n+/*------------------------------------------------------------------\n+ * strncpy_s.c\n+ *\n+ * October 2008, Bo Berry\n+ *\n+ * Copyright (c) 2008-2011 by Cisco Systems, Inc\n+ * All rights reserved.\n+ *\n+ * Permission is hereby granted, free of charge, to any person\n+ * obtaining a copy of this software and associated documentation\n+ * files (the \"Software\"), to deal in the Software without\n+ * restriction, including without limitation the rights to use,\n+ * copy, modify, merge, publish, distribute, sublicense, and/or\n+ * sell copies of the Software, and to permit persons to whom the\n+ * Software is furnished to do so, subject to the following\n+ * conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be\n+ * included in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n+ * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n+ * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n+ * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n+ * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n+ * OTHER DEALINGS IN THE SOFTWARE.\n+ *------------------------------------------------------------------\n+ */\n+\n+#include \"safeclib_private.h\"\n+#include \"safe_str_constraint.h\"\n+#include \"safe_str_lib.h\"\n+\n+\n+/*\n+ * NAME\n+ *    strncpy_s\n+ *\n+ * SYNOPSIS\n+ *    #include \"safe_str_lib.h\"\n+ *    errno_t\n+ *    strncpy_s(char *dest, rsize_t dmax, const char *src, rsize_t slen)\n+ *\n+ * DESCRIPTION\n+ *    The strncpy_s function copies not more than slen successive characters\n+ *    (characters that follow a null character are not copied) from the\n+ *    array pointed to by src to the array pointed to by dest. If no null\n+ *    character was copied from src, then dest[n] is set to a null character.\n+ *\n+ *    All elements following the terminating null character (if any)\n+ *    written by strncpy_s in the array of dmax characters pointed to\n+ *    by dest take on the null value when strncpy_s returns.\n+ *\n+ * Specicified in:\n+ *    ISO/IEC TR 24731-1, Programming languages, environments\n+ *    and system software interfaces, Extensions to the C Library,\n+ *    Part I: Bounds-checking interfaces\n+ *\n+ * INPUT PARAMETERS\n+ *    dest      pointer to string that will be replaced by src.\n+ *              The resulting string is null terminated.\n+ *\n+ *    dmax      restricted maximum length of the resulting dest,\n+ *              including the null\n+ *\n+ *    src       pointer to the string that will be copied\n+ *              to string dest\n+ *\n+ *    slen      the maximum number of characters to copy from src\n+ *\n+ * OUTPUT PARAMETERS\n+ *    dest      updated with src string\n+ *\n+ * RUNTIME CONSTRAINTS\n+ *    Neither dmax nor slen shall be equal to zero.\n+ *    Neither dmax nor slen shall be equal zero.\n+ *    Neither dmax nor slen shall be greater than RSIZE_MAX_STR.\n+ *    If slen is either greater than or equal to dmax, then dmax\n+ *     should be more than strnlen_s(src,dmax)\n+ *    Copying shall not take place between objects that overlap.\n+ *    If there is a runtime-constraint violation, then if dest\n+ *       is not a null pointer and dmax greater than RSIZE_MAX_STR,\n+ *       then strncpy_s nulls dest.\n+ *\n+ * RETURN VALUE\n+ *    EOK        successful operation, the characters in src were copied\n+ *                  to dest and the result is null terminated.\n+ *    ESNULLP    NULL pointer\n+ *    ESZEROL    zero length\n+ *    ESLEMAX    length exceeds max limit\n+ *    ESOVRLP    strings overlap\n+ *    ESNOSPC    not enough space to copy src\n+ *\n+ * ALSO SEE\n+ *    strcat_s(), strncat_s(), strcpy_s()\n+ *-\n+ */\n+errno_t\n+strncpy_s (char *dest, rsize_t dmax, const char *src, rsize_t slen)\n+{\n+    rsize_t orig_dmax;\n+    char *orig_dest;\n+    const char *overlap_bumper;\n+\n+    if (dest == NULL) {\n+        invoke_safe_str_constraint_handler(\"strncpy_s: dest is null\",\n+                   NULL, ESNULLP);\n+        return RCNEGATE(ESNULLP);\n+    }\n+\n+    if (dmax == 0) {\n+        invoke_safe_str_constraint_handler(\"strncpy_s: dmax is 0\",\n+                   NULL, ESZEROL);\n+        return RCNEGATE(ESZEROL);\n+    }\n+\n+    if (dmax > RSIZE_MAX_STR) {\n+        invoke_safe_str_constraint_handler(\"strncpy_s: dmax exceeds max\",\n+                   NULL, ESLEMAX);\n+        return RCNEGATE(ESLEMAX);\n+    }\n+\n+    /* hold base in case src was not copied */\n+    orig_dmax = dmax;\n+    orig_dest = dest;\n+\n+    if (src == NULL) {\n+        handle_error(orig_dest, orig_dmax, \"strncpy_s: \"\n+                     \"src is null\",\n+                     ESNULLP);\n+        return RCNEGATE(ESNULLP);\n+    }\n+\n+    if (slen == 0) {\n+        handle_error(orig_dest, orig_dmax, \"strncpy_s: \"\n+                     \"slen is zero\",\n+                     ESZEROL);\n+        return RCNEGATE(ESZEROL);\n+    }\n+\n+    if (slen > RSIZE_MAX_STR) {\n+        handle_error(orig_dest, orig_dmax, \"strncpy_s: \"\n+                     \"slen exceeds max\",\n+                     ESLEMAX);\n+        return RCNEGATE(ESLEMAX);\n+    }\n+\n+\n+   if (dest < src) {\n+       overlap_bumper = src;\n+\n+        while (dmax > 0) {\n+            if (dest == overlap_bumper) {\n+                handle_error(orig_dest, orig_dmax, \"strncpy_s: \"\n+                        \"overlapping objects\",\n+                        ESOVRLP);\n+                return RCNEGATE(ESOVRLP);\n+            }\n+\n+\t    if (slen == 0) {\n+                /*\n+                 * Copying truncated to slen chars.  Note that the TR says to\n+                 * copy slen chars plus the null char.  We null the slack.\n+                 */\n+#ifdef SAFECLIB_STR_NULL_SLACK\n+                while (dmax) { *dest = '\\0'; dmax--; dest++; }\n+#else\n+                *dest = '\\0';\n+#endif\n+                return RCNEGATE(EOK);\n+            }\n+\n+            *dest = *src;\n+            if (*dest == '\\0') {\n+#ifdef SAFECLIB_STR_NULL_SLACK\n+                /* null slack */\n+                while (dmax) { *dest = '\\0'; dmax--; dest++; }\n+#endif\n+                return RCNEGATE(EOK);\n+            }\n+\n+            dmax--;\n+            slen--;\n+            dest++;\n+            src++;\n+        }\n+\n+    } else {\n+        overlap_bumper = dest;\n+\n+        while (dmax > 0) {\n+            if (src == overlap_bumper) {\n+                handle_error(orig_dest, orig_dmax, \"strncpy_s: \"\n+                        \"overlapping objects\",\n+                        ESOVRLP);\n+                return RCNEGATE(ESOVRLP);\n+            }\n+\n+\t    if (slen == 0) {\n+                /*\n+                 * Copying truncated to slen chars.  Note that the TR says to\n+                 * copy slen chars plus the null char.  We null the slack.\n+                 */\n+#ifdef SAFECLIB_STR_NULL_SLACK\n+                while (dmax) { *dest = '\\0'; dmax--; dest++; }\n+#else\n+                *dest = '\\0';\n+#endif\n+                return RCNEGATE(EOK);\n+            }\n+\n+            *dest = *src;\n+            if (*dest == '\\0') {\n+#ifdef SAFECLIB_STR_NULL_SLACK\n+                /* null slack */\n+                while (dmax) { *dest = '\\0'; dmax--; dest++; }\n+#endif\n+                return RCNEGATE(EOK);\n+            }\n+\n+            dmax--;\n+            slen--;\n+            dest++;\n+            src++;\n+        }\n+    }\n+\n+    /*\n+     * the entire src was not copied, so zero the string\n+     */\n+    handle_error(orig_dest, orig_dmax, \"strncpy_s: not enough \"\n+                 \"space for src\",\n+                 ESNOSPC);\n+    return RCNEGATE(ESNOSPC);\n+}\n+EXPORT_SYMBOL(strncpy_s);"}, {"sha": "e3cab9a6428e68394bc4ca039934f3f5c4cfa97f", "filename": "libcilkrts/runtime/sslib/strnlen_s.c", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsslib%2Fstrnlen_s.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsslib%2Fstrnlen_s.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fsslib%2Fstrnlen_s.c?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -0,0 +1,112 @@\n+/*------------------------------------------------------------------\n+ * strnlen_s.c\n+ *\n+ * October 2008, Bo Berry\n+ *\n+ * Copyright (c) 2008-2011 by Cisco Systems, Inc\n+ * All rights reserved.\n+ *\n+ * Permission is hereby granted, free of charge, to any person\n+ * obtaining a copy of this software and associated documentation\n+ * files (the \"Software\"), to deal in the Software without\n+ * restriction, including without limitation the rights to use,\n+ * copy, modify, merge, publish, distribute, sublicense, and/or\n+ * sell copies of the Software, and to permit persons to whom the\n+ * Software is furnished to do so, subject to the following\n+ * conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be\n+ * included in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n+ * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n+ * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n+ * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n+ * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n+ * OTHER DEALINGS IN THE SOFTWARE.\n+ *------------------------------------------------------------------\n+ */\n+\n+#include \"safeclib_private.h\"\n+#include \"safe_str_constraint.h\"\n+#include \"safe_str_lib.h\"\n+\n+\n+/**\n+ * NAME\n+ *    strnlen_s\n+ *\n+ * SYNOPSIS\n+ *    #include \"safe_str_lib.h\"\n+ *    rsize_t\n+ *    strnlen_s(const char *dest, rsize_t dmax)\n+ *\n+ * DESCRIPTION\n+ *    The strnlen_s function computes the length of the string pointed\n+ *    to by dest.\n+ *\n+ * SPECIFIED IN\n+ *    ISO/IEC TR 24731-1, Programming languages, environments\n+ *    and system software interfaces, Extensions to the C Library,\n+ *    Part I: Bounds-checking interfaces\n+ *\n+ * INPUT PARAMETERS\n+ *    dest      pointer to string\n+ *\n+ *    dmax      restricted maximum length.\n+ *\n+ * OUTPUT PARAMETERS\n+ *    none\n+ *\n+ * RUNTIME CONSTRAINTS\n+ *    dest shall not be a null pointer\n+ *    dmax shall not be greater than RSIZE_MAX_STR\n+ *    dmax shall not equal zero\n+ *\n+ * RETURN VALUE\n+ *    The function returns the string length, excluding  the terminating\n+ *    null character.  If dest is NULL, then strnlen_s returns 0.\n+ *\n+ *    Otherwise, the strnlen_s function returns the number of characters\n+ *    that precede the terminating null character. If there is no null\n+ *    character in the first dmax characters of dest then strnlen_s returns\n+ *    dmax. At most the first dmax characters of dest are accessed\n+ *    by strnlen_s.\n+ *\n+ * ALSO SEE\n+ *    strnterminate_s()\n+ *\n+ */\n+rsize_t\n+strnlen_s (const char *dest, rsize_t dmax)\n+{\n+    rsize_t count;\n+\n+    if (dest == NULL) {\n+        return RCNEGATE(0);\n+    }\n+\n+    if (dmax == 0) {\n+        invoke_safe_str_constraint_handler(\"strnlen_s: dmax is 0\",\n+                   NULL, ESZEROL);\n+        return RCNEGATE(0);\n+    }\n+\n+    if (dmax > RSIZE_MAX_STR) {\n+        invoke_safe_str_constraint_handler(\"strnlen_s: dmax exceeds max\",\n+                   NULL, ESLEMAX);\n+        return RCNEGATE(0);\n+    }\n+\n+    count = 0;\n+    while (*dest && dmax) {\n+        count++;\n+        dmax--;\n+        dest++;\n+    }\n+\n+    return RCNEGATE(count);\n+}\n+EXPORT_SYMBOL(strnlen_s);"}, {"sha": "407a85ddd98a62a05bd32b539cd3d08f52969697", "filename": "libcilkrts/runtime/stats.c", "status": "modified", "additions": 44, "deletions": 25, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fstats.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fstats.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fstats.c?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n #include \"stats.h\"\n@@ -51,7 +62,8 @@ static const char *names[] = {\n     /*[INTERVAL_IN_SCHEDULER]*/                 \"in scheduler\",\n     /*[INTERVAL_WORKING]*/                      \"  of which: working\",\n     /*[INTERVAL_IN_RUNTIME]*/                   \"  of which: in runtime\",\n-    /*[INTERVAL_STEALING]*/                     \"     of which: stealing\",\n+    /*[INTERVAL_IN_SCHED_LOOP]*/                \"     of which: in sched loop\",\n+    /*[INTERVAL_STEALING]*/                     \"        of which: stealing\",\n     /*[INTERVAL_STEAL_SUCCESS]*/                \"steal success: detach\",\n     /*[INTERVAL_STEAL_FAIL_EMPTYQ]*/            \"steal fail: empty queue\",\n     /*[INTERVAL_STEAL_FAIL_LOCK]*/              \"steal fail: victim locked\",\n@@ -81,6 +93,8 @@ static const char *names[] = {\n     /*[INTERVAL_FIBER_DEALLOCATE_FROM_THREAD]*/ \"fiber_deallocate (thread)\", \n     /*[INTERVAL_SUSPEND_RESUME_OTHER]*/         \"fiber suspend self + resume\",\n     /*[INTERVAL_DEALLOCATE_RESUME_OTHER]*/      \"fiber deallocate self + resume\", \n+    /*[INTERVAL_INIT_WORKER]*/                  \"init worker thread\", \n+    /*[INTERVAL_SCHEDULE_WAIT]*/                \"schedule wait state\", \n };\n #endif\n \n@@ -144,27 +158,32 @@ void __cilkrts_stop_interval(__cilkrts_worker *w, enum interval i)\n \n void dump_stats_to_file(FILE *stat_file, statistics *s)\n {\n-    int i;\n-    fprintf(stat_file, \"\\nCILK PLUS RUNTIME SYSTEM STATISTICS:\\n\\n\");\n-\n-    fprintf(stat_file,\n-            \"  %-32s: %15s %10s %12s %10s\\n\",\n-            \"event\",\n-            \"count\",\n-            \"ticks\",\n-            \"ticks/count\",\n-            \"%total\"\n-        );\n-    for (i = 0; i < INTERVAL_N; ++i) {\n-        fprintf(stat_file, \"  %-32s: %15llu\", names[i], s->count[i]);\n-        if (s->accum[i]) {\n-            fprintf(stat_file, \" %10.3g %12.3g %10.2f\",\n-                    (double)s->accum[i],\n-                    (double)s->accum[i] / (double)s->count[i],\n-                    100.0 * (double)s->accum[i] / \n-                    (double)s->accum[INTERVAL_IN_SCHEDULER]);\n+    // Only print out stats for worker if they are nonzero.\n+    if (s->accum[INTERVAL_IN_SCHEDULER] > 0) {\n+        int i;\n+        fprintf(stat_file, \"\\nCILK PLUS RUNTIME SYSTEM STATISTICS:\\n\\n\");\n+        fprintf(stat_file,\n+                \"  %-32s: %15s %10s %12s %10s\\n\",\n+                \"event\",\n+                \"count\",\n+                \"ticks\",\n+                \"ticks/count\",\n+                \"%total\"\n+            );\n+        for (i = 0; i < INTERVAL_N; ++i) {\n+            fprintf(stat_file, \"  %-32s: %15llu\", names[i], s->count[i]);\n+            if (s->accum[i]) {\n+                fprintf(stat_file, \" %10.3g %12.3g %10.2f\",\n+                        (double)s->accum[i],\n+                        (double)s->accum[i] / (double)s->count[i],\n+                        100.0 * (double)s->accum[i] / \n+                        (double)s->accum[INTERVAL_IN_SCHEDULER]);\n+            }\n+            fprintf(stat_file, \"\\n\");\n         }\n-        fprintf(stat_file, \"\\n\");\n+    }\n+    else {\n+        fprintf(stat_file, \"empty statistics\\n\");\n     }\n }\n #endif // CILK_PROFILE"}, {"sha": "befc620a4d02334ffe7ef7272057dcdc0ba4abbc", "filename": "libcilkrts/runtime/stats.h", "status": "modified", "additions": 51, "deletions": 5, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fstats.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fstats.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fstats.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n /**\n@@ -63,12 +74,45 @@\n \n __CILKRTS_BEGIN_EXTERN_C\n \n+// Some notes on the stats we are counting for the Cilk Plus runtime. \n+//\n+// INTERVAL_IN_SCHEDULER:\n+//\n+//   For a user worker, it starts counting when the worker thread is\n+//   bound, and stops when the worker thread is unbound.\n+//\n+//   For a system worker, it starts counting when the worker thread is\n+//   created, and stops after it returns from the scheduling loop\n+//   (which usually won't happen unless __cilkrts_end_cilk() is\n+//   called.)\n+// \n+// INTERVAL_WORKING + INTERVAL_IN_RUNTIME should be equal to\n+// INTERVAL_IN_SCHEDULER (modulo overheads in instrumentation).\n+//\n+// INTERVAL_IN_RUNTIME tries to count all the time spent inside\n+// runtime code.  (leave_frame and reudctions blur the accounting a\n+// bit).  We switch from WORKING to IN_RUNTIME from:\n+// \n+//    1. __cilkrts_leave_frame, when we start doing an exception check\n+//       and might jump into the runtime, either when returning from a\n+//       spawn or have an exception to process.\n+//\n+//    2. __cilkrts_c_sync, when we are at a sync and the frame has\n+//       been stolen from.\n+//\n+// We switch back to WORKING when we are returning to user code.\n+// \n+// We also switch back to WORKING when we need to do a slow merge of\n+// reducer maps.  Otherwise, parallel reductions can mess up the stat\n+// collection.\n+\n /** @brief Events that we measure. */\n enum interval\n {\n     INTERVAL_IN_SCHEDULER,                  ///< Time threads spend \"bound\" to Cilk\n     INTERVAL_WORKING,                       ///< Time spent working\n-    INTERVAL_IN_RUNTIME,                    ///< Time spent executing runtime scheduling loop\n+    INTERVAL_IN_RUNTIME,                    ///< Time spent executing runtime code\n+    INTERVAL_SCHED_LOOP,                    ///< Time spent in scheduling loop\n     INTERVAL_STEALING,                      ///< Time spent stealing work\n     INTERVAL_STEAL_SUCCESS,                 ///< Time to do a successful steal\n     INTERVAL_STEAL_FAIL_EMPTYQ,             ///< Count of steal failures due to lack of stealable work\n@@ -99,6 +143,8 @@ enum interval\n     INTERVAL_FIBER_DEALLOCATE_FROM_THREAD,  ///< Time spent calling cilk_fiber_deallocate (from thread)\n     INTERVAL_SUSPEND_RESUME_OTHER,          ///< Count of fiber suspend_self_and_resume_other\n     INTERVAL_DEALLOCATE_RESUME_OTHER,       ///< Count of fiber deallocate_self_and_resume_other\n+    INTERVAL_INIT_WORKER,                   ///< Time spent on initialization of worker thread\n+    INTERVAL_SCHEDULE_WAIT,                 ///< Time worker spends in SCHEDULE_WAIT state\n     INTERVAL_N                              ///< Number of intervals, must be last\n };\n "}, {"sha": "611934a9bbf97873e17ed5587e118a7fcae22909", "filename": "libcilkrts/runtime/sysdep-unix.c", "status": "modified", "additions": 56, "deletions": 91, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsysdep-unix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsysdep-unix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fsysdep-unix.c?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -3,11 +3,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2010-2013, Intel Corporation\n+ *  Copyright (C) 2010-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -22,7 +20,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -35,17 +32,24 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  *\n  **************************************************************************\n  */\n \n-#ifdef __linux__\n-    // define _GNU_SOURCE before *any* #include.\n-    // Even <stdint.h> will break later #includes if this macro is not\n-    // already defined when it is #included.\n-#   define _GNU_SOURCE\n-#endif\n-\n #include \"sysdep.h\"\n #include \"os.h\"\n #include \"bug.h\"\n@@ -80,24 +84,7 @@\n #include <string.h>\n #include <pthread.h>\n #include <unistd.h>\n-\n-#if defined HAVE_ALLOCA_H\n-# include <alloca.h>\n-#elif defined __GNUC__\n-# define alloca __builtin_alloca\n-#elif defined _AIX\n-# define alloca __alloca\n-#else\n-# include <stddef.h>\n-# ifdef  __cplusplus\n-extern \"C\"\n-# endif\n-void *alloca (size_t);\n-#endif\n-\n-#ifdef __APPLE__\n-//#   include <scheduler.h>  // Angle brackets include Apple's scheduler.h, not ours.\n-#endif\n+#include \"declare-alloca.h\"\n \n #ifdef __linux__\n #   include <sys/resource.h>\n@@ -205,11 +192,17 @@ NON_COMMON void* scheduler_thread_proc_for_system_worker(void *arg)\n     \n     __cilkrts_set_tls_worker(w);\n \n+    START_INTERVAL(w, INTERVAL_IN_SCHEDULER);\n+    START_INTERVAL(w, INTERVAL_IN_RUNTIME);\n+    START_INTERVAL(w, INTERVAL_INIT_WORKER);\n+\n     // Create a cilk fiber for this worker on this thread.\n     START_INTERVAL(w, INTERVAL_FIBER_ALLOCATE_FROM_THREAD) {\n         w->l->scheduling_fiber = cilk_fiber_allocate_from_thread();\n         cilk_fiber_set_owner(w->l->scheduling_fiber, w);\n     } STOP_INTERVAL(w, INTERVAL_FIBER_ALLOCATE_FROM_THREAD);\n+\n+    STOP_INTERVAL(w, INTERVAL_INIT_WORKER);\n     \n     internal_run_scheduler_with_exceptions(w);\n \n@@ -225,35 +218,11 @@ NON_COMMON void* scheduler_thread_proc_for_system_worker(void *arg)\n         w->l->scheduling_fiber = NULL;\n     } STOP_INTERVAL(w, INTERVAL_FIBER_DEALLOCATE_FROM_THREAD);\n     \n+    STOP_INTERVAL(w, INTERVAL_IN_RUNTIME);\n+    STOP_INTERVAL(w, INTERVAL_IN_SCHEDULER);\n     return 0;\n }\n \n-\n-/*\n- * __cilkrts_user_worker_scheduling_stub\n- *\n- * Routine for the scheduling fiber created for an imported user\n- * worker thread.  This method is analogous to\n- * scheduler_thread_proc_for_system_worker.\n- *\n- */\n-void __cilkrts_user_worker_scheduling_stub(cilk_fiber* fiber, void* null_arg)\n-{\n-    __cilkrts_worker *w = __cilkrts_get_tls_worker();\n-\n-    // Sanity check.\n-    CILK_ASSERT(WORKER_USER == w->l->type);\n-\n-    // Enter the scheduling loop on the user worker.\n-    // This function will never return.\n-    __cilkrts_run_scheduler_with_exceptions(w);\n-\n-    // A WORKER_USER, at some point, will resume on the original stack and leave\n-    // Cilk.  Under no circumstances do we ever exit off of the bottom of this\n-    // stack.\n-    CILK_ASSERT(0);\n-}\n-\n /**\n  * We are exporting a function with this name to Inspector?\n  * What a confusing name...\n@@ -266,8 +235,6 @@ void* __cilkrts_worker_stub(void* arg)\n     return scheduler_thread_proc_for_system_worker(arg);\n }\n \n-\n-\n // /* Return the lesser of the argument and the operating system\n //    limit on the number of workers (threads) that may or ought\n //    to be created. */\n@@ -571,64 +538,51 @@ void __cilkrts_make_unrunnable_sysdep(__cilkrts_worker *w,\n     }\n }\n \n-/*\n- * __cilkrts_sysdep_is_worker_thread_id\n- *\n- * Returns true if the thread ID specified matches the thread ID we saved\n- * for a worker.\n- */\n-\n-int __cilkrts_sysdep_is_worker_thread_id(global_state_t *g,\n-                                         int i,\n-                                         void *thread_id)\n-{\n-#if defined( __linux__) || defined(__VXWORKS__)\n-    pthread_t tid = *(pthread_t *)thread_id;\n-    if (i < 0 || i > g->total_workers)\n-        return 0;\n-    return g->sysdep->threads[i] == tid;\n-#else\n-    // Needs to be implemented\n-    return 0;\n-#endif\n-}\n-\n-\n-\n-\n /*************************************************************\n   Version information:\n *************************************************************/\n \n+#ifndef _WRS_KERNEL\n #include <dlfcn.h>\n+#endif\n #include \"internal/cilk_version.h\"\n #include <stdio.h>\n+#ifndef _WRS_KERNEL\n #include <sys/utsname.h>\n+#endif\n \n #ifdef __VXWORKS__\n #include <version.h>\n-# endif\n+#endif\n \n /* (Non-static) dummy function is used by get_runtime_path() to find the path\n  * to the .so containing the Cilk runtime.\n  */\n void dummy_function() { }\n \n-/* return a string with the path to the Cilk runtime, or \"unknown\" if the path\n+/*\n+ * Return a string with the path to the Cilk runtime, or \"unknown\" if the path\n  * cannot be determined.\n  */\n static const char *get_runtime_path ()\n {\n-#ifdef __CYGWIN__\n-    // Cygwin doesn't support dladdr, which sucks\n-    return \"unknown\";\n-#else\n+    // dladdr is a glibc extension. If it's available, use it to find the path\n+    // for libcilkrts.so\n+#ifdef _GNU_SOURCE\n     Dl_info info;\n-    if (0 == dladdr(dummy_function, &info)) return \"unknown\";\n-    return info.dli_fname;\n+    if (0 != dladdr(dummy_function, &info))\n+        return info.dli_fname;\n #endif\n+\n+    // If dladdr isn't available, or dladdr failed, we can't know the path for\n+    // the shared object\n+    return \"unknown\";\n }\n \n+#ifdef _WRS_KERNEL\n+#include <version.h>\n+#include <sysLib.h>\n+#endif\n /* if the environment variable, CILK_VERSION, is defined, writes the version\n  * information to the specified file.\n  * g is the global state that was just created, and n is the number of workers\n@@ -640,7 +594,9 @@ static void write_version_file (global_state_t *g, int n)\n     char buf[256];        // print buffer.\n     time_t t;\n     FILE *fp;\n+#ifndef _WRS_KERNEL\n     struct utsname sys_info;\n+#endif\n     int err;              // error code from system calls.\n \n     // if CILK_VERSION is not set, or if the file cannot be opened, fail\n@@ -711,15 +667,22 @@ static void write_version_file (global_state_t *g, int n)\n     // System OS: Linux, release 2.6.28-19-generic\n     // System architecture: x86_64\n \n-    err = uname(&sys_info);\n     fprintf(fp, \"\\nSystem information\\n\");\n     fprintf(fp, \"==================\\n\");\n     fprintf(fp, \"Cilk runtime path: %s\\n\", get_runtime_path());\n+#ifndef _WRS_KERNEL\n+    err = uname(&sys_info);\n     fprintf(fp, \"System OS: %s, release %s\\n\",\n             err < 0 ? \"unknown\" : sys_info.sysname,\n             err < 0 ? \"?\" : sys_info.release);\n     fprintf(fp, \"System architecture: %s\\n\",\n             err < 0 ? \"unknown\" : sys_info.machine);\n+#else\n+    fprintf(fp, \"System OS: %s, release %s\\n\",\n+            \"VxWorks\", RUNTIME_NAME RUNTIME_VERSION);\n+    fprintf(fp, \"System architecture: %s\\n\",\n+            sysModel());\n+#endif\n \n     // Print thread info.  E.g.,\n     // Thread information\n@@ -792,10 +755,12 @@ void __cilkrts_establish_c_stack(void)\n static __attribute__((noinline))\n void internal_enforce_global_visibility()\n {\n+#ifndef __VXWORKS__\n     void* handle = dlopen( get_runtime_path(), RTLD_GLOBAL|RTLD_LAZY );\n \n     /* For proper reference counting, close the handle immediately. */\n     if( handle) dlclose(handle);\n+#endif\n }\n \n /*"}, {"sha": "76ebc63d733b22a7b630c4a6a56ef1a590d5ab14", "filename": "libcilkrts/runtime/sysdep.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsysdep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fsysdep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fsysdep.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n /**"}, {"sha": "94e39b0beaa0db7588788fca64bd272e2d43a928", "filename": "libcilkrts/runtime/worker_mutex.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fworker_mutex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fworker_mutex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fworker_mutex.c?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n #include \"worker_mutex.h\""}, {"sha": "5faabd85d01f729707e177c4035e9cb1ede075aa", "filename": "libcilkrts/runtime/worker_mutex.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fworker_mutex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d/libcilkrts%2Fruntime%2Fworker_mutex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fworker_mutex.h?ref=2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "patch": "@@ -2,11 +2,9 @@\n  *\n  *************************************************************************\n  *\n- *  @copyright\n- *  Copyright (C) 2009-2013, Intel Corporation\n+ *  Copyright (C) 2009-2016, Intel Corporation\n  *  All rights reserved.\n  *  \n- *  @copyright\n  *  Redistribution and use in source and binary forms, with or without\n  *  modification, are permitted provided that the following conditions\n  *  are met:\n@@ -21,7 +19,6 @@\n  *      contributors may be used to endorse or promote products derived\n  *      from this software without specific prior written permission.\n  *  \n- *  @copyright\n  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n@@ -34,6 +31,20 @@\n  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n /**"}]}