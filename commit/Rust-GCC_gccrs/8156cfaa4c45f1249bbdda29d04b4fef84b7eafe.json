{"sha": "8156cfaa4c45f1249bbdda29d04b4fef84b7eafe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE1NmNmYWE0YzQ1ZjEyNDliYmRkYTI5ZDA0YjRmZWY4NGI3ZWFmZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-19T19:02:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-19T19:09:55Z"}, "message": "c, tree: Fix ICE from get_parm_array_spec [PR97860]\n\nThe C and C++ FEs handle zero sized arrays differently, C uses\nNULL TYPE_MAX_VALUE on non-NULL TYPE_DOMAIN on complete ARRAY_TYPEs\nwith bitsize_zero_node TYPE_SIZE, while C++ FE likes to set\nTYPE_MAX_VALUE to the largest value (and min to the lowest).\n\nMartin has used array_type_nelts in get_parm_array_spec where the\nfunction on the C form of [0] arrays returns error_mark_node and the code\ncrashes soon afterwards.  The following patch teaches array_type_nelts about\nthis (e.g. dwarf2out already handles that as [0]).  While it will change\nwhat is_empty_type returns for certain types (e.g. struct S { int a[0]; };),\nas those types occupy zero bits in C, it should make an ABI difference.\n\nSo, the tree.c change makes the c-decl.c code handle the [0] arrays\nlike any other constant extents, and the c-decl.c change just makes sure\nthat if we'd run into error_mark_node e.g. from the VLA expressions, we\ndon't crash on those.\n\n2020-11-19  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c/97860\n\t* tree.c (array_type_nelts): For complete arrays with zero min\n\tand NULL max and zero size return -1.\n\n\t* c-decl.c (get_parm_array_spec): Bail out of nelts is\n\terror_operand_p.\n\n\t* gcc.dg/pr97860.c: New test.", "tree": {"sha": "37610149c21e123d64615c72769a1a9a69b89697", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37610149c21e123d64615c72769a1a9a69b89697"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8156cfaa4c45f1249bbdda29d04b4fef84b7eafe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8156cfaa4c45f1249bbdda29d04b4fef84b7eafe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8156cfaa4c45f1249bbdda29d04b4fef84b7eafe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8156cfaa4c45f1249bbdda29d04b4fef84b7eafe/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae48b74ca0c0ba33d396a6ebad7a1c0a6dadb1f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae48b74ca0c0ba33d396a6ebad7a1c0a6dadb1f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae48b74ca0c0ba33d396a6ebad7a1c0a6dadb1f7"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "1b02240114b8a2aed9453ee30f3437fe20957b9b", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8156cfaa4c45f1249bbdda29d04b4fef84b7eafe/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8156cfaa4c45f1249bbdda29d04b4fef84b7eafe/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=8156cfaa4c45f1249bbdda29d04b4fef84b7eafe", "patch": "@@ -5775,6 +5775,8 @@ get_parm_array_spec (const struct c_parm *parm, tree attrs)\n \t       type = TREE_TYPE (type))\n \t    {\n \t      tree nelts = array_type_nelts (type);\n+\t      if (error_operand_p (nelts))\n+\t\treturn attrs;\n \t      if (TREE_CODE (nelts) != INTEGER_CST)\n \t\t{\n \t\t  /* Each variable VLA bound is represented by the dollar"}, {"sha": "04c0f194bde04987410902768455b8a0e8a01698", "filename": "gcc/testsuite/gcc.dg/pr97860.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8156cfaa4c45f1249bbdda29d04b4fef84b7eafe/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97860.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8156cfaa4c45f1249bbdda29d04b4fef84b7eafe/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97860.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97860.c?ref=8156cfaa4c45f1249bbdda29d04b4fef84b7eafe", "patch": "@@ -0,0 +1,11 @@\n+/* PR c/97860 */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+void\n+foo (int n)\n+{\n+  typedef int T[0];\n+  typedef T V[n];\n+  void bar (V);\n+}"}, {"sha": "531fe96542259967d85ea058a1832e5300f5ab84", "filename": "gcc/tree.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8156cfaa4c45f1249bbdda29d04b4fef84b7eafe/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8156cfaa4c45f1249bbdda29d04b4fef84b7eafe/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=8156cfaa4c45f1249bbdda29d04b4fef84b7eafe", "patch": "@@ -3483,7 +3483,17 @@ array_type_nelts (const_tree type)\n \n   /* TYPE_MAX_VALUE may not be set if the array has unknown length.  */\n   if (!max)\n-    return error_mark_node;\n+    {\n+      /* zero sized arrays are represented from C FE as complete types with\n+\t NULL TYPE_MAX_VALUE and zero TYPE_SIZE, while C++ FE represents\n+\t them as min 0, max -1.  */\n+      if (COMPLETE_TYPE_P (type)\n+\t  && integer_zerop (TYPE_SIZE (type))\n+\t  && integer_zerop (min))\n+\treturn build_int_cst (TREE_TYPE (min), -1);\n+\n+      return error_mark_node;\n+    }\n \n   return (integer_zerop (min)\n \t  ? max"}]}