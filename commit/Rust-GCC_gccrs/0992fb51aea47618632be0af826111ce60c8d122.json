{"sha": "0992fb51aea47618632be0af826111ce60c8d122", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk5MmZiNTFhZWE0NzYxODYzMmJlMGFmODI2MTExY2U2MGM4ZDEyMg==", "commit": {"author": {"name": "Nathan Myers", "email": "ncm@cantrip.org", "date": "2003-05-02T18:35:24Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-05-02T18:35:24Z"}, "message": "streambuf.tcc (__copy_streambufs): Rewrote.\n\n2003-05-02  Nathan Myers  <ncm@cantrip.org>\n\t    Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/bits/streambuf.tcc (__copy_streambufs): Rewrote.\n\nCo-Authored-By: Paolo Carlini <pcarlini@unitus.it>\n\nFrom-SVN: r66395", "tree": {"sha": "2d3e0d674d6dfb8c262c7a25c5cc9d1d08c890fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d3e0d674d6dfb8c262c7a25c5cc9d1d08c890fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0992fb51aea47618632be0af826111ce60c8d122", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0992fb51aea47618632be0af826111ce60c8d122", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0992fb51aea47618632be0af826111ce60c8d122", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0992fb51aea47618632be0af826111ce60c8d122/comments", "author": {"login": "ncm", "id": 215047, "node_id": "MDQ6VXNlcjIxNTA0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/215047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ncm", "html_url": "https://github.com/ncm", "followers_url": "https://api.github.com/users/ncm/followers", "following_url": "https://api.github.com/users/ncm/following{/other_user}", "gists_url": "https://api.github.com/users/ncm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ncm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ncm/subscriptions", "organizations_url": "https://api.github.com/users/ncm/orgs", "repos_url": "https://api.github.com/users/ncm/repos", "events_url": "https://api.github.com/users/ncm/events{/privacy}", "received_events_url": "https://api.github.com/users/ncm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "20bfcd69246d50a2457e4f05ce41879beaef614d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20bfcd69246d50a2457e4f05ce41879beaef614d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20bfcd69246d50a2457e4f05ce41879beaef614d"}], "stats": {"total": 69, "additions": 23, "deletions": 46}, "files": [{"sha": "55e7538b39b2f4a0574a5a1e8a566a9a9011a192", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0992fb51aea47618632be0af826111ce60c8d122/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0992fb51aea47618632be0af826111ce60c8d122/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0992fb51aea47618632be0af826111ce60c8d122", "patch": "@@ -1,3 +1,8 @@\n+2003-05-02  Nathan Myers  <ncm@cantrip.org>\n+\t    Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/bits/streambuf.tcc (__copy_streambufs): Rewrote.\n+\n 2003-05-02  Jonathan Wakely  <redi@gcc.gnu.org>\n \n \t* include/bits/basic_string.h (swap): Remove redundant template"}, {"sha": "f80a815aa42723293798026e4faea9a84c52290c", "filename": "libstdc++-v3/include/bits/streambuf.tcc", "status": "modified", "additions": 18, "deletions": 46, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0992fb51aea47618632be0af826111ce60c8d122/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0992fb51aea47618632be0af826111ce60c8d122/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc?ref=0992fb51aea47618632be0af826111ce60c8d122", "patch": "@@ -183,61 +183,33 @@ namespace std\n     __copy_streambufs(basic_ios<_CharT, _Traits>& __ios,\n \t\t      basic_streambuf<_CharT, _Traits>* __sbin,\n \t\t      basic_streambuf<_CharT, _Traits>* __sbout) \n-  {\n-      typedef typename _Traits::int_type\tint_type;\n-\n+    {\n       streamsize __ret = 0;\n       try \n \t{\n-\t  for (;;)\n-  \t    {\n-\t      streamsize __xtrct;\n-\t      const ptrdiff_t __avail = __sbin->_M_in_end\n-\t\t                        - __sbin->_M_in_cur;\n- \t      if (__avail)\n+\t  typename _Traits::int_type __c = __sbin->sgetc();\n+\t  while (!_Traits::eq_int_type(__c, _Traits::eof()))\n+\t    {\n+\t      const size_t __n = __sbin->_M_in_end - __sbin->_M_in_cur;\n+\t      if (__n > 1)\n \t\t{\n-\t\t  __xtrct = __sbout->sputn(__sbin->_M_in_cur, __avail);\n-\t\t  __ret += __xtrct;\n-\t\t  __sbin->_M_move_in_cur(__xtrct);\n-\t\t  if (__xtrct != __avail)\n+\t\t  const size_t __wrote = __sbout->sputn(__sbin->_M_in_cur,\n+\t\t\t\t\t\t\t__n);\n+\t\t  __sbin->_M_move_in_cur(__wrote);\n+\t\t  __ret += __wrote;\n+\t\t  if (__wrote < __n)\n \t\t    break;\n+\t\t  __c = __sbin->underflow();\n \t\t}\n- \t      else \n+\t      else \n \t\t{\n-\t\t  streamsize __charsread;\n-\t\t  const size_t __size = __sbout->_M_out_end\n-\t\t                        - __sbout->_M_out_cur;\n-\t\t  if (__size)\n-\t\t    {\n-\t\t      _CharT* __buf =\n-\t\t\tstatic_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)\n-\t\t\t\t\t\t\t      * __size));\n-\t\t      // Since the next sputn cannot fail sgetn can be\n-\t\t      // safely used.\n-\t\t      __charsread = __sbin->sgetn(__buf, __size);\n-\t\t      __xtrct = __sbout->sputn(__buf, __charsread);\n-\t\t    }\n-\t\t  else\n-\t\t    {\n-\t\t      __xtrct = __charsread = 0;\n-\t\t      const int_type __c = __sbin->sgetc();\n-\t\t      if (!_Traits::eq_int_type(__c, _Traits::eof()))\n-\t\t\t{\n-\t\t\t  ++__charsread;\n-\t\t\t  if (_Traits::eq_int_type(__sbout->overflow(__c),\n-\t\t\t\t\t\t   _Traits::eof()))\n-\t\t\t    break;\n-\t\t\t  ++__xtrct;\n-\t\t\t  __sbin->sbumpc();\n-\t\t\t}\n-\t\t    }\t\t      \n-\t\t  __ret += __xtrct;\n-\t\t  if (__xtrct != __charsread)\n+\t\t  __c = __sbout->sputc(_Traits::to_char_type(__c));\n+\t\t  if (_Traits::eq_int_type(__c, _Traits::eof()))\n \t\t    break;\n+\t\t  ++__ret;\n+\t\t  __c = __sbin->snextc();\n \t\t}\n- \t      if (_Traits::eq_int_type(__sbin->sgetc(), _Traits::eof()))\n-  \t\tbreak;\n-  \t    }\n+\t    }\n \t}\n       catch(exception& __fail) \n \t{"}]}