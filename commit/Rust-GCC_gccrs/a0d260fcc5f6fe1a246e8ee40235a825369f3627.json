{"sha": "a0d260fcc5f6fe1a246e8ee40235a825369f3627", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBkMjYwZmNjNWY2ZmUxYTI0NmU4ZWU0MDIzNWE4MjUzNjlmMzYyNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-04-25T22:27:19Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-04-25T22:27:19Z"}, "message": "c-common.c (struct c_common_resword): Add __underlying_type.\n\n/gcc\n2011-04-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* c-family/c-common.c (struct c_common_resword): Add\n\t__underlying_type.\n\t* c-family/c-common.h (enum rid): Add RID_UNDERLYING_TYPE.\n\n/cp\n2011-04-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* cp-tree.def: Add a new UNDERLYING_TYPE tree code.\n\t* cp-tree.h (enum cp_trait_kind): Add CPTK_UNDERLYING_TYPE, tidy.\n\t(UNDERLYING_TYPE_TYPE): Add.\n\t* cp-objcp-common.c (cp_common_init_ts): Mark UNDERLYING_TYPE\n\tas TS_COMMON.\n\t* parser.c (cp_lexer_next_token_is_decl_specifier_keyword,\n\tcp_parser_simple_type_specifier): Handle UNDERLYING_TYPE.\n\t(cp_parser_trait_expr): Deal with RID_UNDERLYING_TYPE; tidy.\n\t* semantics.c (finish_underlying_type): New.\n\t* typeck.c (structural_comptypes): Handle UNDERLYING_TYPE.\n\t* error.c (dump_type, dump_type_prefix, dump_type_suffix): Likewise.\n\t* cxx-pretty-print.c (p_cxx_type_id): Likewise.\n\t* tree.c (cp_walk_subtrees): Likewise.\n\t* pt.c (for_each_template_parm_r, tsubst, unify,\n\tdependent_type_p_r): Likewise.\n\t* mangle.c (write_type): Sorry for __underlying_type.\n\t* doc/extend.texi: Document __underlying_type.\n\n/testsuite\n2011-04-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/ext/underlying_type1.C: New.\n\t* g++.dg/ext/underlying_type2.C: Likewise.\n\t* g++.dg/ext/underlying_type3.C: Likewise.\n\t* g++.dg/ext/underlying_type4.C: Likewise.\n\t* g++.dg/ext/underlying_type5.C: Likewise.\n\t* g++.dg/ext/underlying_type6.C: Likewise.\n\t* g++.dg/ext/underlying_type7.C: Likewise.\n\t* g++.dg/ext/underlying_type8.C: Likewise.\n\t* g++.dg/ext/underlying_type9.C: Likewise.\n\t* g++.dg/ext/underlying_type10.C: Likewise.\n\nFrom-SVN: r172943", "tree": {"sha": "b836cd0e728b772f3240bdb6c981032673cb2745", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b836cd0e728b772f3240bdb6c981032673cb2745"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0d260fcc5f6fe1a246e8ee40235a825369f3627", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0d260fcc5f6fe1a246e8ee40235a825369f3627", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0d260fcc5f6fe1a246e8ee40235a825369f3627", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0d260fcc5f6fe1a246e8ee40235a825369f3627/comments", "author": null, "committer": null, "parents": [{"sha": "d95f258e9027e7d797bde4eace3e29ab7d9382db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d95f258e9027e7d797bde4eace3e29ab7d9382db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d95f258e9027e7d797bde4eace3e29ab7d9382db"}], "stats": {"total": 464, "additions": 448, "deletions": 16}, "files": [{"sha": "334ee8f6b86ae122b58f657500eff17a0b780534", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0d260fcc5f6fe1a246e8ee40235a825369f3627", "patch": "@@ -1,3 +1,9 @@\n+2011-04-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* c-family/c-common.c (struct c_common_resword): Add\n+\t__underlying_type.\n+\t* c-family/c-common.h (enum rid): Add RID_UNDERLYING_TYPE.\n+\n 2011-04-25  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/titan.md (automata_option \"progress\"): Remove."}, {"sha": "63277ca76af06d3698feca0e74c46ccc89c2155b", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=a0d260fcc5f6fe1a246e8ee40235a825369f3627", "patch": "@@ -450,6 +450,7 @@ const struct c_common_resword c_common_reswords[] =\n   { \"__is_trivial\",     RID_IS_TRIVIAL, D_CXXONLY },\n   { \"__is_union\",\tRID_IS_UNION,\tD_CXXONLY },\n   { \"__is_literal_type\", RID_IS_LITERAL_TYPE, D_CXXONLY },\n+  { \"__underlying_type\", RID_UNDERLYING_TYPE, D_CXXONLY },\n   { \"__imag\",\t\tRID_IMAGPART,\t0 },\n   { \"__imag__\",\t\tRID_IMAGPART,\t0 },\n   { \"__inline\",\t\tRID_INLINE,\t0 },"}, {"sha": "09aa6000689e72dd3ee73ba7682ce6727c9c8e39", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=a0d260fcc5f6fe1a246e8ee40235a825369f3627", "patch": "@@ -138,6 +138,7 @@ enum rid\n   RID_IS_POD,                  RID_IS_POLYMORPHIC,\n   RID_IS_STD_LAYOUT,           RID_IS_TRIVIAL,\n   RID_IS_UNION,                RID_IS_LITERAL_TYPE,\n+  RID_UNDERLYING_TYPE,\n \n   /* C++0x */\n   RID_CONSTEXPR, RID_DECLTYPE, RID_NOEXCEPT, RID_NULLPTR, RID_STATIC_ASSERT,"}, {"sha": "303a4c9dd1f61b38676bb803fbe67cdf395cab68", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a0d260fcc5f6fe1a246e8ee40235a825369f3627", "patch": "@@ -1,3 +1,23 @@\n+2011-04-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* cp-tree.def: Add a new UNDERLYING_TYPE tree code.\n+\t* cp-tree.h (enum cp_trait_kind): Add CPTK_UNDERLYING_TYPE, tidy.\n+\t(UNDERLYING_TYPE_TYPE): Add.\n+\t* cp-objcp-common.c (cp_common_init_ts): Mark UNDERLYING_TYPE\n+\tas TS_COMMON.\n+\t* parser.c (cp_lexer_next_token_is_decl_specifier_keyword,\n+\tcp_parser_simple_type_specifier): Handle UNDERLYING_TYPE.\n+\t(cp_parser_trait_expr): Deal with RID_UNDERLYING_TYPE; tidy.\n+\t* semantics.c (finish_underlying_type): New.\n+\t* typeck.c (structural_comptypes): Handle UNDERLYING_TYPE.\n+\t* error.c (dump_type, dump_type_prefix, dump_type_suffix): Likewise.\n+\t* cxx-pretty-print.c (p_cxx_type_id): Likewise.\n+\t* tree.c (cp_walk_subtrees): Likewise.\n+\t* pt.c (for_each_template_parm_r, tsubst, unify,\n+\tdependent_type_p_r): Likewise.\n+\t* mangle.c (write_type): Sorry for __underlying_type.\n+\t* doc/extend.texi: Document __underlying_type.\n+\n 2011-04-25  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/48707"}, {"sha": "d15aed0c2c247d8eecb27f0c4d945d7431a6d0dd", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=a0d260fcc5f6fe1a246e8ee40235a825369f3627", "patch": "@@ -238,6 +238,7 @@ cp_common_init_ts (void)\n   MARK_TS_COMMON (TEMPLATE_INFO);\n   MARK_TS_COMMON (TYPENAME_TYPE);\n   MARK_TS_COMMON (TYPEOF_TYPE);\n+  MARK_TS_COMMON (UNDERLYING_TYPE);\n   MARK_TS_COMMON (BASELINK);\n   MARK_TS_COMMON (TYPE_PACK_EXPANSION);\n   MARK_TS_COMMON (EXPR_PACK_EXPANSION);"}, {"sha": "7bd35e0d6b29a5fa2c1fee98d314c90b9ea0dbed", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=a0d260fcc5f6fe1a246e8ee40235a825369f3627", "patch": "@@ -2,7 +2,7 @@\n    additional tree codes used in the GNU C++ compiler (see tree.def\n    for the standard codes).\n    Copyright (C) 1987, 1988, 1990, 1993, 1997, 1998, 2003, 2004, 2005,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2010\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2010, 2011\n    Free Software Foundation, Inc.\n    Hacked by Michael Tiemann (tiemann@cygnus.com)\n \n@@ -450,6 +450,10 @@ DEFTREECODE (LAMBDA_EXPR, \"lambda_expr\", tcc_exceptional, 0)\n    DECLTYPE_FOR_LAMBDA_RETURN is set if we want lambda return deduction.  */\n DEFTREECODE (DECLTYPE_TYPE, \"decltype_type\", tcc_type, 0)\n \n+/* A type designated by `__underlying_type (type)'.\n+   UNDERLYING_TYPE_TYPE is the type in question.  */\n+DEFTREECODE (UNDERLYING_TYPE, \"underlying_type\", tcc_type, 0)\n+\n /* Used to represent the template information stored by template\n    specializations.\n    The accessors are:"}, {"sha": "1c7a4e66f61d2eb811ed4bb5e6423416ae30a308", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a0d260fcc5f6fe1a246e8ee40235a825369f3627", "patch": "@@ -556,12 +556,13 @@ typedef enum cp_trait_kind\n   CPTK_IS_CONVERTIBLE_TO,\n   CPTK_IS_EMPTY,\n   CPTK_IS_ENUM,\n+  CPTK_IS_LITERAL_TYPE,\n   CPTK_IS_POD,\n   CPTK_IS_POLYMORPHIC,\n   CPTK_IS_STD_LAYOUT,\n   CPTK_IS_TRIVIAL,\n-  CPTK_IS_LITERAL_TYPE,\n-  CPTK_IS_UNION\n+  CPTK_IS_UNION,\n+  CPTK_UNDERLYING_TYPE\n } cp_trait_kind;\n \n /* The types that we are processing.  */\n@@ -3360,6 +3361,10 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n /* The expression in question for a TYPEOF_TYPE.  */\n #define TYPEOF_TYPE_EXPR(NODE) (TYPEOF_TYPE_CHECK (NODE))->type.values\n \n+/* The type in question for an UNDERLYING_TYPE.  */\n+#define UNDERLYING_TYPE_TYPE(NODE) \\\n+  (UNDERLYING_TYPE_CHECK (NODE))->type.values\n+\n /* The expression in question for a DECLTYPE_TYPE.  */\n #define DECLTYPE_TYPE_EXPR(NODE) (DECLTYPE_TYPE_CHECK (NODE))->type.values\n \n@@ -5321,6 +5326,7 @@ extern tree finish_id_expression\t\t(tree, tree, tree,\n \t\t\t\t\t\t const char **,\n                                                  location_t);\n extern tree finish_typeof\t\t\t(tree);\n+extern tree finish_underlying_type\t        (tree);\n extern tree finish_offsetof\t\t\t(tree);\n extern void finish_decl_cleanup\t\t\t(tree, tree);\n extern void finish_eh_cleanup\t\t\t(tree);"}, {"sha": "bd0381bf438aea0bd820ec8ff256867d8918723b", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=a0d260fcc5f6fe1a246e8ee40235a825369f3627", "patch": "@@ -1,6 +1,6 @@\n /* Implementation of subroutines for the GNU C++ pretty-printer.\n    Copyright (C) 2003, 2004, 2005, 2007, 2008,\n-   2009, 2010 Free Software Foundation, Inc.\n+   2009, 2010, 2011 Free Software Foundation, Inc.\n    Contributed by Gabriel Dos Reis <gdr@integrable-solutions.net>\n \n This file is part of GCC.\n@@ -1694,6 +1694,7 @@ pp_cxx_type_id (cxx_pretty_printer *pp, tree t)\n     case TEMPLATE_PARM_INDEX:\n     case TEMPLATE_DECL:\n     case TYPEOF_TYPE:\n+    case UNDERLYING_TYPE:\n     case DECLTYPE_TYPE:\n     case TEMPLATE_ID_EXPR:\n       pp_cxx_type_specifier_seq (pp, t);"}, {"sha": "fce74036b0235c8e2cf0af21750f754647ebf741", "filename": "gcc/cp/error.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=a0d260fcc5f6fe1a246e8ee40235a825369f3627", "patch": "@@ -1,7 +1,8 @@\n /* Call-backs for C++ error reporting.\n    This code is non-reentrant.\n    Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2002, 2003,\n-   2004, 2005, 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n+   2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n    This file is part of GCC.\n \n GCC is free software; you can redistribute it and/or modify\n@@ -483,6 +484,14 @@ dump_type (tree t, int flags)\n       pp_cxx_right_paren (cxx_pp);\n       break;\n \n+    case UNDERLYING_TYPE:\n+      pp_cxx_ws_string (cxx_pp, \"__underlying_type\");\n+      pp_cxx_whitespace (cxx_pp);\n+      pp_cxx_left_paren (cxx_pp);\n+      dump_expr (UNDERLYING_TYPE_TYPE (t), flags & ~TFF_EXPR_IN_PARENS);\n+      pp_cxx_right_paren (cxx_pp);\n+      break;\n+\n     case TYPE_PACK_EXPANSION:\n       dump_type (PACK_EXPANSION_PATTERN (t), flags);\n       pp_cxx_ws_string (cxx_pp, \"...\");\n@@ -731,6 +740,7 @@ dump_type_prefix (tree t, int flags)\n     case COMPLEX_TYPE:\n     case VECTOR_TYPE:\n     case TYPEOF_TYPE:\n+    case UNDERLYING_TYPE:\n     case DECLTYPE_TYPE:\n     case TYPE_PACK_EXPANSION:\n     case FIXED_POINT_TYPE:\n@@ -834,6 +844,7 @@ dump_type_suffix (tree t, int flags)\n     case COMPLEX_TYPE:\n     case VECTOR_TYPE:\n     case TYPEOF_TYPE:\n+    case UNDERLYING_TYPE:\n     case DECLTYPE_TYPE:\n     case TYPE_PACK_EXPANSION:\n     case FIXED_POINT_TYPE:"}, {"sha": "3dbc3b7782a5a69b16833501b56328fbc47296aa", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=a0d260fcc5f6fe1a246e8ee40235a825369f3627", "patch": "@@ -1991,6 +1991,10 @@ write_type (tree type)\n \t      sorry (\"mangling typeof, use decltype instead\");\n \t      break;\n \n+\t    case UNDERLYING_TYPE:\n+\t      sorry (\"mangling __underlying_type\");\n+\t      break;\n+\n \t    case LANG_TYPE:\n \t      /* fall through.  */\n "}, {"sha": "bb97700fe62f4ab913461b9505b96456a816cf17", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=a0d260fcc5f6fe1a246e8ee40235a825369f3627", "patch": "@@ -1,6 +1,6 @@\n /* C++ Parser.\n    Copyright (C) 2000, 2001, 2002, 2003, 2004,\n-   2005, 2007, 2008, 2009, 2010  Free Software Foundation, Inc.\n+   2005, 2007, 2008, 2009, 2010, 2011  Free Software Foundation, Inc.\n    Written by Mark Mitchell <mark@codesourcery.com>.\n \n    This file is part of GCC.\n@@ -654,6 +654,7 @@ cp_lexer_next_token_is_decl_specifier_keyword (cp_lexer *lexer)\n     case RID_TYPEOF:\n       /* C++0x extensions.  */\n     case RID_DECLTYPE:\n+    case RID_UNDERLYING_TYPE:\n       return true;\n \n     default:\n@@ -7129,7 +7130,10 @@ cp_parser_builtin_offsetof (cp_parser *parser)\n   return expr;\n }\n \n-/* Parse a trait expression.  */\n+/* Parse a trait expression.\n+\n+   Returns a representation of the expression, the underlying type\n+   of the type at issue when KEYWORD is RID_UNDERLYING_TYPE.  */\n \n static tree\n cp_parser_trait_expr (cp_parser* parser, enum rid keyword)\n@@ -7185,6 +7189,9 @@ cp_parser_trait_expr (cp_parser* parser, enum rid keyword)\n     case RID_IS_ENUM:\n       kind = CPTK_IS_ENUM;\n       break;\n+    case RID_IS_LITERAL_TYPE:\n+      kind = CPTK_IS_LITERAL_TYPE;\n+      break;\n     case RID_IS_POD:\n       kind = CPTK_IS_POD;\n       break;\n@@ -7200,8 +7207,8 @@ cp_parser_trait_expr (cp_parser* parser, enum rid keyword)\n     case RID_IS_UNION:\n       kind = CPTK_IS_UNION;\n       break;\n-    case RID_IS_LITERAL_TYPE:\n-      kind = CPTK_IS_LITERAL_TYPE;\n+    case RID_UNDERLYING_TYPE:\n+      kind = CPTK_UNDERLYING_TYPE;\n       break;\n     default:\n       gcc_unreachable ();\n@@ -7247,7 +7254,9 @@ cp_parser_trait_expr (cp_parser* parser, enum rid keyword)\n \n   /* Complete the trait expression, which may mean either processing\n      the trait expr now or saving it for template instantiation.  */\n-  return finish_trait_expr (kind, type1, type2);\n+  return kind != CPTK_UNDERLYING_TYPE\n+    ? finish_trait_expr (kind, type1, type2)\n+    : finish_underlying_type (type1);\n }\n \n /* Lambdas that appear in variable initializer or default argument scope\n@@ -12505,6 +12514,7 @@ cp_parser_type_specifier (cp_parser* parser,\n      decltype ( expression )   \n      char16_t\n      char32_t\n+     __underlying_type ( type-id )\n \n    GNU Extension:\n \n@@ -12621,6 +12631,16 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n \n       return type;\n \n+    case RID_UNDERLYING_TYPE:\n+      type = cp_parser_trait_expr (parser, RID_UNDERLYING_TYPE);\n+\n+      if (decl_specs)\n+\tcp_parser_set_decl_spec_type (decl_specs, type,\n+\t\t\t\t      token->location,\n+\t\t\t\t      /*user_defined_p=*/true);\n+\n+      return type;\n+\n     default:\n       break;\n     }"}, {"sha": "654289a9e6dd61371d8c995239152eee82f36a12", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a0d260fcc5f6fe1a246e8ee40235a825369f3627", "patch": "@@ -7255,6 +7255,7 @@ for_each_template_parm_r (tree *tp, int *walk_subtrees, void *d)\n       break;\n \n     case TYPEOF_TYPE:\n+    case UNDERLYING_TYPE:\n       if (pfd->include_nondeduced_p\n \t  && for_each_template_parm (TYPE_FIELDS (t), fn, data,\n \t\t\t\t     pfd->visited, \n@@ -11032,6 +11033,13 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t\t\t\t\t     complain);\n       }\n \n+    case UNDERLYING_TYPE:\n+      {\n+\ttree type = tsubst (UNDERLYING_TYPE_TYPE (t), args,\n+\t\t\t    complain, in_decl);\n+\treturn finish_underlying_type (type);\n+      }\n+\n     case TYPE_ARGUMENT_PACK:\n     case NONTYPE_ARGUMENT_PACK:\n       {\n@@ -15692,8 +15700,9 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict)\n \n     case TYPEOF_TYPE:\n     case DECLTYPE_TYPE:\n-      /* Cannot deduce anything from TYPEOF_TYPE or DECLTYPE_TYPE\n-         nodes.  */\n+    case UNDERLYING_TYPE:\n+      /* Cannot deduce anything from TYPEOF_TYPE, DECLTYPE_TYPE,\n+\t or UNDERLYING_TYPE nodes.  */\n       return 0;\n \n     case ERROR_MARK:\n@@ -17952,11 +17961,12 @@ dependent_type_p_r (tree type)\n \t       (INNERMOST_TEMPLATE_ARGS (CLASSTYPE_TI_ARGS (type)))))\n     return true;\n \n-  /* All TYPEOF_TYPEs and DECLTYPE_TYPEs are dependent; if the\n-     argument of the `typeof' expression is not type-dependent, then\n-     it should already been have resolved.  */\n+  /* All TYPEOF_TYPEs, DECLTYPE_TYPEs, and UNDERLYING_TYPEs are\n+     dependent; if the argument of the `typeof' expression is not\n+     type-dependent, then it should already been have resolved.  */\n   if (TREE_CODE (type) == TYPEOF_TYPE\n-      || TREE_CODE (type) == DECLTYPE_TYPE)\n+      || TREE_CODE (type) == DECLTYPE_TYPE\n+      || TREE_CODE (type) == UNDERLYING_TYPE)\n     return true;\n \n   /* A template argument pack is dependent if any of its packed"}, {"sha": "62272aaccfadce136a7111db8f3f91bdbcfdc897", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=a0d260fcc5f6fe1a246e8ee40235a825369f3627", "patch": "@@ -3366,6 +3366,44 @@ finish_typeof (tree expr)\n   return type;\n }\n \n+/* Implement the __underlying_type keyword: Return the underlying\n+   type of TYPE, suitable for use as a type-specifier.  */\n+\n+tree\n+finish_underlying_type (tree type)\n+{\n+  tree underlying_type;\n+\n+  if (processing_template_decl)\n+    {\n+      underlying_type = cxx_make_type (UNDERLYING_TYPE);\n+      UNDERLYING_TYPE_TYPE (underlying_type) = type;\n+      SET_TYPE_STRUCTURAL_EQUALITY (underlying_type);\n+\n+      return underlying_type;\n+    }\n+\n+  complete_type (type);\n+\n+  if (TREE_CODE (type) != ENUMERAL_TYPE)\n+    {\n+      error (\"%qE is not an enumeration type\", type);\n+      return error_mark_node;\n+    }\n+\n+  underlying_type = ENUM_UNDERLYING_TYPE (type);\n+\n+  /* Fixup necessary in this case because ENUM_UNDERLYING_TYPE\n+     includes TYPE_MIN_VALUE and TYPE_MAX_VALUE information.\n+     See finish_enum_value_list for details.  */\n+  if (!ENUM_FIXED_UNDERLYING_TYPE_P (type))\n+    underlying_type\n+      = c_common_type_for_mode (TYPE_MODE (underlying_type),\n+\t\t\t\tTYPE_UNSIGNED (underlying_type));\n+\n+  return underlying_type;\n+}\n+\n /* Perform C++-specific checks for __builtin_offsetof before calling\n    fold_offsetof.  */\n "}, {"sha": "fd5c55e4da3f65f7be1507b39591b0847d95e636", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=a0d260fcc5f6fe1a246e8ee40235a825369f3627", "patch": "@@ -2831,6 +2831,7 @@ cp_walk_subtrees (tree *tp, int *walk_subtrees_p, walk_tree_fn func,\n     case TEMPLATE_TYPE_PARM:\n     case TYPENAME_TYPE:\n     case TYPEOF_TYPE:\n+    case UNDERLYING_TYPE:\n       /* None of these have subtrees other than those already walked\n \t above.  */\n       *walk_subtrees_p = 0;"}, {"sha": "afe0dbcf2b258623c76c16adb7c677883ac5f8a2", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=a0d260fcc5f6fe1a246e8ee40235a825369f3627", "patch": "@@ -1331,6 +1331,10 @@ structural_comptypes (tree t1, tree t2, int strict)\n         return false;\n       break;\n \n+    case UNDERLYING_TYPE:\n+      return same_type_p (UNDERLYING_TYPE_TYPE (t1), \n+\t\t\t  UNDERLYING_TYPE_TYPE (t2));\n+\n     default:\n       return false;\n     }"}, {"sha": "f464fa416195de762a3dd43c11d8e3747c28694a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a0d260fcc5f6fe1a246e8ee40235a825369f3627", "patch": "@@ -1,3 +1,16 @@\n+2011-04-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/ext/underlying_type1.C: New.\n+\t* g++.dg/ext/underlying_type2.C: Likewise.\n+\t* g++.dg/ext/underlying_type3.C: Likewise.\n+\t* g++.dg/ext/underlying_type4.C: Likewise.\n+\t* g++.dg/ext/underlying_type5.C: Likewise.\n+\t* g++.dg/ext/underlying_type6.C: Likewise.\n+\t* g++.dg/ext/underlying_type7.C: Likewise.\n+\t* g++.dg/ext/underlying_type8.C: Likewise.\n+\t* g++.dg/ext/underlying_type9.C: Likewise.\n+\t* g++.dg/ext/underlying_type10.C: Likewise.\n+\n 2011-04-25  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/regress/template-const2.C: New."}, {"sha": "a8f68d3d60a8d3df0f7f15fbc2475bebd8fd4897", "filename": "gcc/testsuite/g++.dg/ext/underlying_type1.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type1.C?ref=a0d260fcc5f6fe1a246e8ee40235a825369f3627", "patch": "@@ -0,0 +1,18 @@\n+// { dg-do compile }\n+\n+struct B { };\n+union U { };\n+\n+template<typename T>\n+  struct underlying_type\n+  { typedef __underlying_type(T) type; }; // { dg-error \"not an enumeration\" }\n+\n+__underlying_type(int) i1; // { dg-error \"not an enumeration|invalid\" }\n+__underlying_type(A)   i2; // { dg-error \"expected\" }\n+__underlying_type(B)   i3; // { dg-error \"not an enumeration|invalid\" }\n+__underlying_type(U)   i4; // { dg-error \"not an enumeration|invalid\" }\n+\n+underlying_type<int>::type i5;\n+underlying_type<A>::type   i6; // { dg-error \"not declared|template|expected\" }\n+underlying_type<B>::type   i7;\n+underlying_type<U>::type   i8;"}, {"sha": "cb57407fe884a61a538fd8a52c3bd74f9c0fe09b", "filename": "gcc/testsuite/g++.dg/ext/underlying_type10.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type10.C?ref=a0d260fcc5f6fe1a246e8ee40235a825369f3627", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do run }\n+// { dg-options \"-std=c++0x\" }\n+\n+#include <cassert>\n+\n+enum E1 : unsigned { E1_en = 1 };\n+enum E2 : char { E2_en = 1 };\n+enum class E3 { a = -1 };\n+enum class E4 : unsigned char { c = 1 };\n+enum class E5 : int { a = -1, b = 1 };\n+enum class E6 : long { c = __LONG_MAX__ };\n+\n+template<typename T>\n+  struct underlying_type\n+  { typedef __underlying_type(T) type; };\n+\n+template<typename T>\n+  void\n+  test(T t, typename underlying_type<T>::type v)\n+  {\n+    assert( t == T(v) );\n+  }\n+\n+int main()\n+{\n+  test(E1::E1_en, 1);\n+  test(E2::E2_en, 1);\n+  test(E3::a, -1);\n+  test(E4::c, 1);\n+  test(E5::a, -1);\n+  test(E6::c, __LONG_MAX__);\n+}"}, {"sha": "0e4519876d2fc9544b7c08186547f29e54c62ef4", "filename": "gcc/testsuite/g++.dg/ext/underlying_type2.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type2.C?ref=a0d260fcc5f6fe1a246e8ee40235a825369f3627", "patch": "@@ -0,0 +1,9 @@\n+// { dg-do compile }\n+\n+enum E1 { };\n+enum E2 { a = -1, b = 1 };\n+enum E3 { c = __LONG_MAX__ };\n+\n+__underlying_type(E1) e1 = 0;\n+__underlying_type(E2) e2 = b;\n+__underlying_type(E3) e3 = __LONG_MAX__;"}, {"sha": "b78cc7dd3f68ff9973759314359e5bbaadc5b548", "filename": "gcc/testsuite/g++.dg/ext/underlying_type3.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type3.C?ref=a0d260fcc5f6fe1a246e8ee40235a825369f3627", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+template<typename T1, typename T2>\n+  struct is_same\n+  { static const bool value = false; };\n+\n+template<typename T>\n+  struct is_same<T, T>\n+  { static const bool value = true; };\n+\n+enum E1 : unsigned { };\n+enum E2 : char { };\n+enum class E3 { };\n+enum class E4 : unsigned char { c = 1 };\n+enum class E5 : int { a = -1, b = 1 };\n+enum class E6 : long { c = __LONG_MAX__ };\n+\n+__underlying_type(E1) i1 = __INT_MAX__ * 2U + 1;\n+__underlying_type(E2) i2 = (char(-1) < 0\n+\t\t\t    ? __SCHAR_MAX__\n+\t\t\t    : __SCHAR_MAX__ * 2U + 1);\n+__underlying_type(E3) i3 = __INT_MAX__;\n+__underlying_type(E4) i4 = __SCHAR_MAX__ * 2U + 1;\n+__underlying_type(E5) i5 = int(E5::b);\n+__underlying_type(E6) i6 = __LONG_MAX__;\n+\n+static_assert(is_same<__underlying_type(E1), unsigned>::value, \"Error\");\n+static_assert(is_same<__underlying_type(E2), char>::value, \"Error\");\n+static_assert(is_same<__underlying_type(E3), int>::value, \"Error\");\n+static_assert(is_same<__underlying_type(E4), unsigned char>::value, \"Error\");\n+static_assert(is_same<__underlying_type(E5), int>::value, \"Error\");\n+static_assert(is_same<__underlying_type(E6), long>::value, \"Error\");"}, {"sha": "b80ed57694ba9a93b1e8bc388e5abf584b260b8f", "filename": "gcc/testsuite/g++.dg/ext/underlying_type4.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type4.C?ref=a0d260fcc5f6fe1a246e8ee40235a825369f3627", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do compile }\n+\n+#include <tr1/type_traits>\n+\n+using namespace std::tr1;\n+\n+enum E1 { };\n+enum E2 { a = -1, b = 1 };\n+enum E3 { c = __LONG_MAX__ };\n+\n+typedef __underlying_type(E1) UTE1;\n+typedef __underlying_type(E2) UTE2;\n+typedef __underlying_type(E3) UTE3;\n+\n+template<typename T>\n+  struct underlying_type\n+  { typedef __underlying_type(T) type; };\n+\n+int test1[is_same<underlying_type<E1>::type, UTE1>::value ? 1 : -1];\n+int test2[is_same<underlying_type<E2>::type, UTE2>::value ? 1 : -1];\n+int test3[is_same<underlying_type<E3>::type, UTE3>::value ? 1 : -1];\n+\n+int test4[is_integral<underlying_type<E1>::type>::value ? 1 : -1];\n+int test5[is_integral<underlying_type<E2>::type>::value ? 1 : -1];\n+int test6[is_integral<underlying_type<E3>::type>::value ? 1 : -1];"}, {"sha": "a9c19924b9569cf14e22b7b3e267f1768f3aa5d0", "filename": "gcc/testsuite/g++.dg/ext/underlying_type5.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type5.C?ref=a0d260fcc5f6fe1a246e8ee40235a825369f3627", "patch": "@@ -0,0 +1,43 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+template<typename T1, typename T2>\n+  struct is_same\n+  { static const bool value = false; };\n+\n+template<typename T>\n+  struct is_same<T, T>\n+  { static const bool value = true; };\n+\n+enum E1 : unsigned { };\n+enum E2 : char { };\n+enum class E3 { };\n+enum class E4 : unsigned char { c = 1 };\n+enum class E5 : int { a = -1, b = 1 };\n+enum class E6 : long { c = __LONG_MAX__ };\n+\n+typedef __underlying_type(E1) UTE1;\n+typedef __underlying_type(E2) UTE2;\n+typedef __underlying_type(E3) UTE3;\n+typedef __underlying_type(E4) UTE4;\n+typedef __underlying_type(E5) UTE5;\n+typedef __underlying_type(E6) UTE6;\n+\n+template<typename T>\n+  struct underlying_type\n+  { typedef __underlying_type(T) type; };\n+\n+static_assert(is_same<underlying_type<E1>::type, UTE1>::value, \"Error\");\n+static_assert(is_same<underlying_type<E2>::type, UTE2>::value, \"Error\");\n+static_assert(is_same<underlying_type<E3>::type, UTE3>::value, \"Error\");\n+static_assert(is_same<underlying_type<E4>::type, UTE4>::value, \"Error\");\n+static_assert(is_same<underlying_type<E5>::type, UTE5>::value, \"Error\");\n+static_assert(is_same<underlying_type<E6>::type, UTE6>::value, \"Error\");\n+\n+static_assert(is_same<underlying_type<E1>::type, unsigned>::value, \"Error\");\n+static_assert(is_same<underlying_type<E2>::type, char>::value, \"Error\");\n+static_assert(is_same<underlying_type<E3>::type, int>::value, \"Error\");\n+static_assert(is_same<underlying_type<E4>::type, \n+\t              unsigned char>::value, \"Error\");\n+static_assert(is_same<underlying_type<E5>::type, int>::value, \"Error\");\n+static_assert(is_same<underlying_type<E6>::type, long>::value, \"Error\");"}, {"sha": "50f528856d7ff310d4600fd307782d3b8baa2f56", "filename": "gcc/testsuite/g++.dg/ext/underlying_type6.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type6.C?ref=a0d260fcc5f6fe1a246e8ee40235a825369f3627", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+template<typename T1, typename T2>\n+  struct is_same\n+  { static const bool value = false; };\n+\n+template<typename T>\n+  struct is_same<T, T>\n+  { static const bool value = true; };\n+\n+enum E1 : unsigned { };\n+enum E2 : char { };\n+enum class E3 { };\n+enum class E4 : unsigned char { c = 1 };\n+enum class E5 : int { a = -1, b = 1 };\n+enum class E6 : long { c = __LONG_MAX__ };\n+\n+template<typename T, typename U,\n+\t typename V = __underlying_type(T)>\n+  struct test\n+  {\n+    static_assert(is_same<U, V>::value, \"Error\");\n+  };\n+\n+template class test<E1, unsigned>;\n+template class test<E2, char>;\n+template class test<E3, int>;\n+template class test<E4, unsigned char>;\n+template class test<E5, int>;\n+template class test<E6, long>;"}, {"sha": "872fe52b00e1d7859019daf62ee7fbb36177ae2c", "filename": "gcc/testsuite/g++.dg/ext/underlying_type7.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type7.C?ref=a0d260fcc5f6fe1a246e8ee40235a825369f3627", "patch": "@@ -0,0 +1,24 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+enum E1 : unsigned { E1_en = 1 };\n+enum E2 : char { E2_en = 1 };\n+enum class E3 { a = -1 };\n+enum class E4 : unsigned char { c = 1 };\n+enum class E5 : int { a = -1, b = 1 };\n+enum class E6 : long { c = __LONG_MAX__ };\n+\n+template<typename T>\n+  void\n+  test(T, __underlying_type(T)) // { dg-message \"sorry, unimplemented: mangling\" }\n+  { }\n+\n+int main()\n+{\n+  test(E1::E1_en, 1);\n+  test(E2::E2_en, 1);\n+  test(E3::a, -1);\n+  test(E4::c, 1);\n+  test(E5::a, -1);\n+  test(E6::c, __LONG_MAX__);\n+}"}, {"sha": "0bbed2b489cdafd251a06aec59dad0c5005962f0", "filename": "gcc/testsuite/g++.dg/ext/underlying_type8.C", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type8.C?ref=a0d260fcc5f6fe1a246e8ee40235a825369f3627", "patch": "@@ -0,0 +1,46 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+enum E1 : unsigned { E1_en = 1 };\n+enum E2 : char { E2_en = 1 };\n+enum class E3 { a = -1 };\n+enum class E4 : unsigned char { c = 1 };\n+enum class E5 : int { a = -1, b = 1 };\n+enum class E6 : long { c = __LONG_MAX__ };\n+\n+template<typename T1, typename T2>\n+  struct is_same\n+  { static const bool value = false; };\n+\n+template<typename T>\n+  struct is_same<T, T>\n+  { static const bool value = true; };\n+\n+template<typename>\n+  struct underlying_type;\n+\n+template<typename T, typename U>\n+  void\n+  test(T, U, typename underlying_type<T>::type);\n+\n+template<typename T>\n+  struct underlying_type\n+  { typedef __underlying_type(T) type; };\n+\n+template<typename T, typename U>\n+  void\n+  test(T, U, typename underlying_type<T>::type)\n+  {\n+    static_assert(is_same<typename underlying_type<T>::type, U>::value,\n+\t\t  \"Error\");\n+  }\n+\n+int main()\n+{\n+  test(E1::E1_en, unsigned(), 1);\n+  test(E2::E2_en, char(), 1);\n+  test(E3::a, int(), -1);\n+  test(E4::c, (unsigned char)(1), 1);\n+  test(E5::a, int(), -1);\n+  test(E6::c, long(), __LONG_MAX__);\n+}"}, {"sha": "9ffd24439a44b2814b566847132c64a29dd93db4", "filename": "gcc/testsuite/g++.dg/ext/underlying_type9.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d260fcc5f6fe1a246e8ee40235a825369f3627/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type9.C?ref=a0d260fcc5f6fe1a246e8ee40235a825369f3627", "patch": "@@ -0,0 +1,30 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+template<typename T1, typename T2>\n+  struct is_same\n+  { static const bool value = false; };\n+\n+template<typename T>\n+  struct is_same<T, T>\n+  { static const bool value = true; };\n+\n+enum E1 : unsigned { };\n+enum E2 : char { };\n+enum class E3 { };\n+enum class E4 : unsigned char { c = 1 };\n+enum class E5 : int { a = -1, b = 1 };\n+enum class E6 : long { c = __LONG_MAX__ };\n+\n+template<typename T, typename U>\n+  struct test\n+  {\n+    static_assert(is_same<T, U>::value, \"Error\");\n+  };\n+\n+test<__underlying_type(E1), unsigned>       t1;\n+test<__underlying_type(E2), char>           t2;\n+test<__underlying_type(E3), int>            t3;\n+test<__underlying_type(E4), unsigned char>  t4;\n+test<__underlying_type(E5), int>            t5;\n+test<__underlying_type(E6), long>           t6;"}]}