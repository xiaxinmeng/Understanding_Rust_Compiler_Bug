{"sha": "b405d54fcd60126cd14ffe71142a9066d34b009d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQwNWQ1NGZjZDYwMTI2Y2QxNGZmZTcxMTQyYTkwNjZkMzRiMDA5ZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-08-23T10:13:26Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-08-23T10:13:26Z"}, "message": "Implement resolution of LWG DR 685 precisely\n\n\tPR libstdc++/71771\n\t* include/bits/stl_iterator.h\n\t(operator-(reverse_iterator<Iter>, reverse_iterator<Iter>): Only\n\tdefine for C++98 mode.\n\t(operator-(move_iterator<Iter>, move_iterator<Iter>): Don't define.\n\t* testsuite/24_iterators/headers/iterator/synopsis.cc: Use\n\t-std=gnu++98.\n\t* testsuite/24_iterators/headers/iterator/synopsis_c++11.cc: New test.\n\t* testsuite/24_iterators/headers/iterator/synopsis_c++14.cc: New test.\n\t* testsuite/24_iterators/headers/iterator/synopsis_c++17.cc: New test.\n\t* testsuite/24_iterators/move_iterator/greedy_ops.cc: Don't test\n\tdifference operator.\n\t* testsuite/24_iterators/reverse_iterator/greedy_ops.cc: Only test\n\tdifference operator for C++98.\n\t* testsuite/24_iterators/reverse_iterator/71771.cc: New test.\n\nFrom-SVN: r239691", "tree": {"sha": "8f1e862f81e10c13ee501a67012876febfc18151", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f1e862f81e10c13ee501a67012876febfc18151"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b405d54fcd60126cd14ffe71142a9066d34b009d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b405d54fcd60126cd14ffe71142a9066d34b009d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b405d54fcd60126cd14ffe71142a9066d34b009d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b405d54fcd60126cd14ffe71142a9066d34b009d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06db992005654ed7993b9f7696e2c34751f82db2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06db992005654ed7993b9f7696e2c34751f82db2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06db992005654ed7993b9f7696e2c34751f82db2"}], "stats": {"total": 491, "additions": 462, "deletions": 29}, "files": [{"sha": "dc42ee466c480c309d3b84d2441614f7dd8d9d55", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b405d54fcd60126cd14ffe71142a9066d34b009d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b405d54fcd60126cd14ffe71142a9066d34b009d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b405d54fcd60126cd14ffe71142a9066d34b009d", "patch": "@@ -1,5 +1,21 @@\n 2016-08-23  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/71771\n+\t* include/bits/stl_iterator.h\n+\t(operator-(reverse_iterator<Iter>, reverse_iterator<Iter>): Only\n+\tdefine for C++98 mode.\n+\t(operator-(move_iterator<Iter>, move_iterator<Iter>): Don't define.\n+\t* testsuite/24_iterators/headers/iterator/synopsis.cc: Use\n+\t-std=gnu++98.\n+\t* testsuite/24_iterators/headers/iterator/synopsis_c++11.cc: New test.\n+\t* testsuite/24_iterators/headers/iterator/synopsis_c++14.cc: New test.\n+\t* testsuite/24_iterators/headers/iterator/synopsis_c++17.cc: New test.\n+\t* testsuite/24_iterators/move_iterator/greedy_ops.cc: Don't test\n+\tdifference operator.\n+\t* testsuite/24_iterators/reverse_iterator/greedy_ops.cc: Only test\n+\tdifference operator for C++98.\n+\t* testsuite/24_iterators/reverse_iterator/71771.cc: New test.\n+\n \t* include/bits/c++config (_GLIBCXX17_CONSTEXPR): Define.\n \t* include/bits/range_access.h (begin, end, rbegin, rend, crbegin)\n \t(crend): Add _GLIBCXX17_CONSTEXPR as per P0031R0."}, {"sha": "a98fff183f8c9254f042ce386644fdcf44b58c9a", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 22, "deletions": 27, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b405d54fcd60126cd14ffe71142a9066d34b009d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b405d54fcd60126cd14ffe71142a9066d34b009d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=b405d54fcd60126cd14ffe71142a9066d34b009d", "patch": "@@ -330,19 +330,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       const reverse_iterator<_Iterator>& __y)\n     { return !(__x < __y); }\n \n-  template<typename _Iterator>\n-    inline _GLIBCXX17_CONSTEXPR\n-    typename reverse_iterator<_Iterator>::difference_type\n-    operator-(const reverse_iterator<_Iterator>& __x,\n-\t      const reverse_iterator<_Iterator>& __y)\n-    { return __y.base() - __x.base(); }\n-\n-  template<typename _Iterator>\n-    inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>\n-    operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n-\t      const reverse_iterator<_Iterator>& __x)\n-    { return reverse_iterator<_Iterator>(__x.base() - __n); }\n-\n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // DR 280. Comparison of reverse_iterator to const reverse_iterator.\n   template<typename _IteratorL, typename _IteratorR>\n@@ -380,21 +367,36 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator>=(const reverse_iterator<_IteratorL>& __x,\n \t       const reverse_iterator<_IteratorR>& __y)\n     { return !(__x < __y); }\n+  //@}\n+\n+#if __cplusplus < 201103L\n+  template<typename _Iterator>\n+    inline typename reverse_iterator<_Iterator>::difference_type\n+    operator-(const reverse_iterator<_Iterator>& __x,\n+\t      const reverse_iterator<_Iterator>& __y)\n+    { return __y.base() - __x.base(); }\n \n   template<typename _IteratorL, typename _IteratorR>\n-#if __cplusplus >= 201103L\n-    // DR 685.\n-    inline _GLIBCXX17_CONSTEXPR auto\n+    inline typename reverse_iterator<_IteratorL>::difference_type\n     operator-(const reverse_iterator<_IteratorL>& __x,\n \t      const reverse_iterator<_IteratorR>& __y)\n-    -> decltype(__y.base() - __x.base())\n+    { return __y.base() - __x.base(); }\n #else\n-    inline typename reverse_iterator<_IteratorL>::difference_type\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // DR 685. reverse_iterator/move_iterator difference has invalid signatures\n+  template<typename _IteratorL, typename _IteratorR>\n+    inline _GLIBCXX17_CONSTEXPR auto\n     operator-(const reverse_iterator<_IteratorL>& __x,\n \t      const reverse_iterator<_IteratorR>& __y)\n-#endif\n+    -> decltype(__y.base() - __x.base())\n     { return __y.base() - __x.base(); }\n-  //@}\n+#endif\n+\n+  template<typename _Iterator>\n+    inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>\n+    operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n+\t      const reverse_iterator<_Iterator>& __x)\n+    { return reverse_iterator<_Iterator>(__x.base() - __n); }\n \n #if __cplusplus >= 201103L\n   // Same as C++14 make_reverse_iterator but used in C++03 mode too.\n@@ -1191,13 +1193,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     -> decltype(__x.base() - __y.base())\n     { return __x.base() - __y.base(); }\n \n-  template<typename _Iterator>\n-    inline _GLIBCXX17_CONSTEXPR auto\n-    operator-(const move_iterator<_Iterator>& __x,\n-\t      const move_iterator<_Iterator>& __y)\n-    -> decltype(__x.base() - __y.base())\n-    { return __x.base() - __y.base(); }\n-\n   template<typename _Iterator>\n     inline _GLIBCXX17_CONSTEXPR move_iterator<_Iterator>\n     operator+(typename move_iterator<_Iterator>::difference_type __n,"}, {"sha": "35284d06ea95187c5adca6948d3750992891128b", "filename": "libstdc++-v3/testsuite/24_iterators/headers/iterator/synopsis.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b405d54fcd60126cd14ffe71142a9066d34b009d/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b405d54fcd60126cd14ffe71142a9066d34b009d/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis.cc?ref=b405d54fcd60126cd14ffe71142a9066d34b009d", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-std=gnu++98\" }\n // { dg-do compile }\n \n // Copyright (C) 2007-2016 Free Software Foundation, Inc."}, {"sha": "f0b620fe336532fa2ab994353171aeefb735bec2", "filename": "libstdc++-v3/testsuite/24_iterators/headers/iterator/synopsis_c++11.cc", "status": "added", "additions": 165, "deletions": 0, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b405d54fcd60126cd14ffe71142a9066d34b009d/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis_c%2B%2B11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b405d54fcd60126cd14ffe71142a9066d34b009d/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis_c%2B%2B11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis_c%2B%2B11.cc?ref=b405d54fcd60126cd14ffe71142a9066d34b009d", "patch": "@@ -0,0 +1,165 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <iterator>\n+\n+namespace std {\n+\n+  // C++11 24.4.4, iterator operations:\n+  template <class InputIterator, class Distance>\n+    void\n+    advance(InputIterator& i, Distance n);\n+\n+  template <class InputIterator>\n+    typename iterator_traits<InputIterator>::difference_type\n+    distance(InputIterator first, InputIterator last);\n+\n+  template<class ForwardIterator>\n+    ForwardIterator\n+    next(ForwardIterator x,\n+\t typename iterator_traits<ForwardIterator>::difference_type);\n+\n+  template<class BidirectionalIterator>\n+    BidirectionalIterator\n+    prev(BidirectionalIterator x,\n+\t typename iterator_traits<BidirectionalIterator>::difference_type);\n+\n+  // C++11 24.5, Iterator adaptors:\n+  template <class Iterator> class reverse_iterator;\n+\n+  template <class Iterator1, class Iterator2>\n+  bool operator==(const reverse_iterator<Iterator1>& x,\n+\t\t  const reverse_iterator<Iterator2>& y);\n+\n+  template <class Iterator1, class Iterator2>\n+  bool operator<(const reverse_iterator<Iterator1>& x,\n+\t\t const reverse_iterator<Iterator2>& y);\n+\n+  template <class Iterator1, class Iterator2>\n+  bool operator!=(const reverse_iterator<Iterator1>& x,\n+\t\t  const reverse_iterator<Iterator2>& y);\n+\n+  template <class Iterator1, class Iterator2>\n+  bool operator>(const reverse_iterator<Iterator1>& x,\n+\t\t const reverse_iterator<Iterator2>& y);\n+\n+  template <class Iterator1, class Iterator2>\n+  bool operator>=(const reverse_iterator<Iterator1>& x,\n+\t\t  const reverse_iterator<Iterator2>& y);\n+\n+  template <class Iterator1, class Iterator2>\n+  bool operator<=(const reverse_iterator<Iterator1>& x,\n+\t\t  const reverse_iterator<Iterator2>& y);\n+\n+  template <class Iterator1, class Iterator2>\n+  auto\n+  operator-(const reverse_iterator<Iterator1>& x,\n+\t    const reverse_iterator<Iterator2>& y)\n+  -> decltype(x.base() - y.base());\n+\n+  template <class Iterator>\n+  reverse_iterator<Iterator>\n+  operator+(typename reverse_iterator<Iterator>::difference_type n,\n+\t    const reverse_iterator<Iterator>& x);\n+\n+  template <class Container> class back_insert_iterator;\n+\n+  template <class Container>\n+  back_insert_iterator<Container> back_inserter(Container& x);\n+\n+  template <class Container> class front_insert_iterator;\n+\n+  template <class Container>\n+  front_insert_iterator<Container> front_inserter(Container& x);\n+\n+  template <class Container> class insert_iterator;\n+\n+  template <class Container, class Iterator>\n+  insert_iterator<Container> inserter(Container& x, Iterator i);\n+\n+  template <class Iterator> class move_iterator;\n+\n+  template <class Iterator1, class Iterator2>\n+  bool operator==(const move_iterator<Iterator1>& x,\n+\t\t  const move_iterator<Iterator2>& y);\n+\n+  template <class Iterator1, class Iterator2>\n+  bool operator!=(const move_iterator<Iterator1>& x,\n+\t\t  const move_iterator<Iterator2>& y);\n+\n+  template <class Iterator1, class Iterator2>\n+  bool operator<(const move_iterator<Iterator1>& x,\n+\t\t const move_iterator<Iterator2>& y);\n+\n+  template <class Iterator1, class Iterator2>\n+  bool operator<=(const move_iterator<Iterator1>& x,\n+\t\t  const move_iterator<Iterator2>& y);\n+\n+  template <class Iterator1, class Iterator2>\n+  bool operator>(const move_iterator<Iterator1>& x,\n+\t\t const move_iterator<Iterator2>& y);\n+\n+  template <class Iterator1, class Iterator2>\n+  bool operator>=(const move_iterator<Iterator1>& x,\n+\t\t  const move_iterator<Iterator2>& y);\n+\n+  template <class Iterator1, class Iterator2>\n+  auto operator-(const move_iterator<Iterator1>& x,\n+\t\t const move_iterator<Iterator2>& y)\n+  -> decltype(x.base() - y.base());\n+\n+  template <class Iterator>\n+  move_iterator<Iterator>\n+  operator+(typename move_iterator<Iterator>::difference_type,\n+\t    const move_iterator<Iterator>&);\n+\n+  template <class Iterator>\n+  move_iterator<Iterator> make_move_iterator(const Iterator&);\n+\n+  // 24.6, stream iterators:\n+  template <class T, class charT, class traits, class Distance>\n+  class istream_iterator;\n+\n+  template <class T, class charT, class traits, class Distance>\n+  bool operator==(const istream_iterator<T,charT,traits,Distance>& x,\n+\t\t  const istream_iterator<T,charT,traits,Distance>& y);\n+\n+  template <class T, class charT, class traits, class Distance>\n+  bool operator!=(const istream_iterator<T,charT,traits,Distance>& x,\n+\t\t  const istream_iterator<T,charT,traits,Distance>& y);\n+\n+  template <class T, class charT, class traits>\n+  class ostream_iterator;\n+\n+  template<class charT, class traits>\n+  class istreambuf_iterator;\n+\n+  template <class charT, class traits>\n+  bool\n+  operator==(const istreambuf_iterator<charT,traits>&,\n+\t     const istreambuf_iterator<charT,traits>&);\n+\n+  template <class charT, class traits>\n+    bool operator!=(const istreambuf_iterator<charT,traits>&,\n+                    const istreambuf_iterator<charT,traits>&);\n+\n+  template <class charT, class traits>\n+    class ostreambuf_iterator;\n+}"}, {"sha": "7f6063fd00508c255c15c479968f883a6607fecc", "filename": "libstdc++-v3/testsuite/24_iterators/headers/iterator/synopsis_c++14.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b405d54fcd60126cd14ffe71142a9066d34b009d/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis_c%2B%2B14.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b405d54fcd60126cd14ffe71142a9066d34b009d/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis_c%2B%2B14.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis_c%2B%2B14.cc?ref=b405d54fcd60126cd14ffe71142a9066d34b009d", "patch": "@@ -0,0 +1,28 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"./synopsis_c++11.cc\"\n+\n+namespace std {\n+\n+  // C++14 24.5, iterator adaptors:\n+  template <class Iterator>\n+  reverse_iterator<Iterator> make_reverse_iterator(const Iterator&);\n+}"}, {"sha": "c2adc40adb06d06b449103fe52281ad52c1e7912", "filename": "libstdc++-v3/testsuite/24_iterators/headers/iterator/synopsis_c++17.cc", "status": "added", "additions": 181, "deletions": 0, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b405d54fcd60126cd14ffe71142a9066d34b009d/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis_c%2B%2B17.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b405d54fcd60126cd14ffe71142a9066d34b009d/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis_c%2B%2B17.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis_c%2B%2B17.cc?ref=b405d54fcd60126cd14ffe71142a9066d34b009d", "patch": "@@ -0,0 +1,181 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <iterator>\n+\n+namespace std {\n+\n+  // C++17 24.4.3, iterator operations:\n+  template <class InputIterator, class Distance>\n+    constexpr void\n+    advance(InputIterator& i, Distance n);\n+\n+  template <class InputIterator>\n+    constexpr typename iterator_traits<InputIterator>::difference_type\n+    distance(InputIterator first, InputIterator last);\n+\n+  template <class ForwardIterator>\n+    constexpr ForwardIterator\n+    next(ForwardIterator x,\n+\t typename iterator_traits<ForwardIterator>::difference_type);\n+\n+  template <class BidirectionalIterator>\n+    constexpr BidirectionalIterator\n+    prev(BidirectionalIterator x,\n+\t typename iterator_traits<BidirectionalIterator>::difference_type);\n+\n+  // C++17 24.5, iterator adaptors:\n+  template <class Iterator> class reverse_iterator;\n+\n+  template <class Iterator1, class Iterator2>\n+  constexpr\n+  bool operator==(const reverse_iterator<Iterator1>& x,\n+\t\t  const reverse_iterator<Iterator2>& y);\n+\n+  template <class Iterator1, class Iterator2>\n+  constexpr\n+  bool operator<(const reverse_iterator<Iterator1>& x,\n+\t\t const reverse_iterator<Iterator2>& y);\n+\n+  template <class Iterator1, class Iterator2>\n+  constexpr\n+  bool operator!=(const reverse_iterator<Iterator1>& x,\n+\t\t  const reverse_iterator<Iterator2>& y);\n+\n+  template <class Iterator1, class Iterator2>\n+  constexpr\n+  bool operator>(const reverse_iterator<Iterator1>& x,\n+\t\t const reverse_iterator<Iterator2>& y);\n+\n+  template <class Iterator1, class Iterator2>\n+  constexpr\n+  bool operator>=(const reverse_iterator<Iterator1>& x,\n+\t\t  const reverse_iterator<Iterator2>& y);\n+\n+  template <class Iterator1, class Iterator2>\n+  constexpr\n+  bool operator<=(const reverse_iterator<Iterator1>& x,\n+\t\t  const reverse_iterator<Iterator2>& y);\n+\n+  template <class Iterator1, class Iterator2>\n+  constexpr auto\n+  operator-(const reverse_iterator<Iterator1>& x,\n+\t    const reverse_iterator<Iterator2>& y)\n+  -> decltype(x.base() - y.base());\n+\n+  template <class Iterator>\n+  constexpr reverse_iterator<Iterator>\n+  operator+(typename reverse_iterator<Iterator>::difference_type n,\n+\t    const reverse_iterator<Iterator>& x);\n+\n+  template <class Iterator>\n+  constexpr reverse_iterator<Iterator> make_reverse_iterator(const Iterator&);\n+\n+  template <class Container> class back_insert_iterator;\n+\n+  template <class Container>\n+  back_insert_iterator<Container> back_inserter(Container& x);\n+\n+  template <class Container> class front_insert_iterator;\n+\n+  template <class Container>\n+  front_insert_iterator<Container> front_inserter(Container& x);\n+\n+  template <class Container> class insert_iterator;\n+\n+  template <class Container, class Iterator>\n+  insert_iterator<Container> inserter(Container& x, Iterator i);\n+\n+  template <class Iterator> class move_iterator;\n+\n+  template <class Iterator1, class Iterator2>\n+  constexpr\n+  bool operator==(const move_iterator<Iterator1>& x,\n+\t\t  const move_iterator<Iterator2>& y);\n+\n+  template <class Iterator1, class Iterator2>\n+  constexpr\n+  bool operator!=(const move_iterator<Iterator1>& x,\n+\t\t  const move_iterator<Iterator2>& y);\n+\n+  template <class Iterator1, class Iterator2>\n+  constexpr\n+  bool operator<(const move_iterator<Iterator1>& x,\n+\t\t const move_iterator<Iterator2>& y);\n+\n+  template <class Iterator1, class Iterator2>\n+  constexpr\n+  bool operator<=(const move_iterator<Iterator1>& x,\n+\t\t  const move_iterator<Iterator2>& y);\n+\n+  template <class Iterator1, class Iterator2>\n+  constexpr\n+  bool operator>(const move_iterator<Iterator1>& x,\n+\t\t const move_iterator<Iterator2>& y);\n+\n+  template <class Iterator1, class Iterator2>\n+  constexpr\n+  bool operator>=(const move_iterator<Iterator1>& x,\n+\t\t  const move_iterator<Iterator2>& y);\n+\n+  template <class Iterator1, class Iterator2>\n+  constexpr\n+  auto operator-(const move_iterator<Iterator1>& x,\n+\t\t const move_iterator<Iterator2>& y)\n+  -> decltype(x.base() - y.base());\n+\n+  template <class Iterator>\n+  constexpr move_iterator<Iterator>\n+  operator+(typename move_iterator<Iterator>::difference_type,\n+\t    const move_iterator<Iterator>&);\n+\n+  template <class Iterator>\n+  constexpr move_iterator<Iterator> make_move_iterator(const Iterator&);\n+\n+  // 24.6, stream iterators:\n+  template <class T, class charT, class traits, class Distance>\n+  class istream_iterator;\n+\n+  template <class T, class charT, class traits, class Distance>\n+  bool operator==(const istream_iterator<T,charT,traits,Distance>& x,\n+\t\t  const istream_iterator<T,charT,traits,Distance>& y);\n+\n+  template <class T, class charT, class traits, class Distance>\n+  bool operator!=(const istream_iterator<T,charT,traits,Distance>& x,\n+\t\t  const istream_iterator<T,charT,traits,Distance>& y);\n+\n+  template <class T, class charT, class traits>\n+  class ostream_iterator;\n+\n+  template<class charT, class traits>\n+  class istreambuf_iterator;\n+\n+  template <class charT, class traits>\n+  bool\n+  operator==(const istreambuf_iterator<charT,traits>&,\n+\t     const istreambuf_iterator<charT,traits>&);\n+\n+  template <class charT, class traits>\n+    bool operator!=(const istreambuf_iterator<charT,traits>&,\n+                    const istreambuf_iterator<charT,traits>&);\n+\n+  template <class charT, class traits>\n+    class ostreambuf_iterator;\n+}"}, {"sha": "e546e19ab8236e7b9f8cf72617f55c25eae43cf1", "filename": "libstdc++-v3/testsuite/24_iterators/move_iterator/greedy_ops.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b405d54fcd60126cd14ffe71142a9066d34b009d/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fgreedy_ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b405d54fcd60126cd14ffe71142a9066d34b009d/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fgreedy_ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fgreedy_ops.cc?ref=b405d54fcd60126cd14ffe71142a9066d34b009d", "patch": "@@ -32,7 +32,7 @@ void test01()\n   it <= it;\n   it > it;\n   it >= it;\n-  it - it;\n+  // it - it;  // See PR libstdc++/71771\n   1 + it;\n   it + 1;\n }"}, {"sha": "41b5086b052921a076345b8fab444498eb1f45bc", "filename": "libstdc++-v3/testsuite/24_iterators/reverse_iterator/71771.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b405d54fcd60126cd14ffe71142a9066d34b009d/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2F71771.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b405d54fcd60126cd14ffe71142a9066d34b009d/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2F71771.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2F71771.cc?ref=b405d54fcd60126cd14ffe71142a9066d34b009d", "patch": "@@ -0,0 +1,45 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <iterator>\n+#include <testsuite_iterators.h>\n+\n+// PR libstdc++/71771\n+\n+template<typename Iter>\n+auto\n+diff2(std::reverse_iterator<Iter> it1, std::reverse_iterator<Iter> it2)\n+-> decltype(it1 - it2)\n+{ return it1 - it2; }\n+\n+template<typename Iter>\n+void\n+diff2(Iter, Iter)\n+{ }\n+\n+void\n+test01()\n+{\n+  int i[2];\n+  __gnu_test::test_container<int, __gnu_test::bidirectional_iterator_wrapper>\n+    c(i);\n+  using reverse_iterator\n+    = std::reverse_iterator<__gnu_test::bidirectional_iterator_wrapper<int>>;\n+  diff2(reverse_iterator(c.end()), reverse_iterator(c.begin()));\n+}"}, {"sha": "1360029ebad9461e8a4ec1f31f886d56e76cb36a", "filename": "libstdc++-v3/testsuite/24_iterators/reverse_iterator/greedy_ops.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b405d54fcd60126cd14ffe71142a9066d34b009d/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Fgreedy_ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b405d54fcd60126cd14ffe71142a9066d34b009d/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Fgreedy_ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Fgreedy_ops.cc?ref=b405d54fcd60126cd14ffe71142a9066d34b009d", "patch": "@@ -31,7 +31,9 @@ void test01()\n   it <= it;\n   it > it;\n   it >= it;\n-  it - it;\n+#if __cplusplus < 201103L\n+  it - it; // See PR libstdc++/71771\n+#endif\n   1 + it;\n   it + 1;\n }"}]}