{"sha": "674ba2d6bfd0710a72b397571afab1378c8e347a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc0YmEyZDZiZmQwNzEwYTcyYjM5NzU3MWFmYWIxMzc4YzhlMzQ3YQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-08-20T01:32:51Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-08-20T01:32:51Z"}, "message": "(have_cmove_flag): New variable.\n\n(walk_insn_part): Add new parm NON_PC_SET_SRC; all callers changed.\nLook for IF_THEN_ELSE in a SET_SRC that isn't setting PC and set\nhave_cmove_flag if so.\n(main): Define HAVE_conditional_move if have_cmove_flag is non-zero.\n\nFrom-SVN: r1902", "tree": {"sha": "92cb0ecfca230941446c7e85f2a41b6dfdf4d835", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92cb0ecfca230941446c7e85f2a41b6dfdf4d835"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/674ba2d6bfd0710a72b397571afab1378c8e347a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/674ba2d6bfd0710a72b397571afab1378c8e347a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/674ba2d6bfd0710a72b397571afab1378c8e347a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/674ba2d6bfd0710a72b397571afab1378c8e347a/comments", "author": null, "committer": null, "parents": [{"sha": "cd1ceb3ca5b037b4366ee005335feb9848208160", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd1ceb3ca5b037b4366ee005335feb9848208160", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd1ceb3ca5b037b4366ee005335feb9848208160"}], "stats": {"total": 36, "additions": 28, "deletions": 8}, "files": [{"sha": "820e1d850bfba49ff7e39e9615277e1d0ab078cb", "filename": "gcc/genconfig.c", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/674ba2d6bfd0710a72b397571afab1378c8e347a/gcc%2Fgenconfig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/674ba2d6bfd0710a72b397571afab1378c8e347a/gcc%2Fgenconfig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconfig.c?ref=674ba2d6bfd0710a72b397571afab1378c8e347a", "patch": "@@ -40,6 +40,7 @@ static int max_dup_operands;    /* Largest number of match_dup in any insn.  */\n static int max_clobbers_per_insn;\n static int register_constraint_flag;\n static int have_cc0_flag;\n+static int have_cmove_flag;\n static int have_lo_sum_flag;\n \n /* Maximum number of insns seen in a split.  */\n@@ -53,11 +54,16 @@ static void fatal ();\n void fancy_abort ();\n \n /* RECOG_P will be non-zero if this pattern was seen in a context where it will\n-   be used to recognize, rather than just generate an insn.  */\n+   be used to recognize, rather than just generate an insn. \n+\n+   NON_PC_SET_SRC will be non-zero if this pattern was seen in a SET_SRC\n+   of a SET whose destination is not (pc).  */\n \n static void\n-walk_insn_part (part, recog_p)\n+walk_insn_part (part, recog_p, non_pc_set_src)\n      rtx part;\n+     int recog_p;\n+     int non_pc_set_src;\n {\n   register int i, j;\n   register RTX_CODE code;\n@@ -113,6 +119,17 @@ walk_insn_part (part, recog_p)\n \thave_lo_sum_flag = 1;\n       return;\n \n+    case SET:\n+      walk_insn_part (SET_DEST (part), 0, recog_p);\n+      walk_insn_part (SET_SRC (part), recog_p,\n+\t\t      GET_CODE (SET_DEST (part)) != PC);\n+      return;\n+\n+    case IF_THEN_ELSE:\n+      if (recog_p && non_pc_set_src)\n+\thave_cmove_flag = 1;\n+      break;\n+\n     case REG: case CONST_INT: case SYMBOL_REF:\n     case PC:\n       return;\n@@ -125,12 +142,12 @@ walk_insn_part (part, recog_p)\n       {\n       case 'e':\n       case 'u':\n-\twalk_insn_part (XEXP (part, i), recog_p);\n+\twalk_insn_part (XEXP (part, i), recog_p, non_pc_set_src);\n \tbreak;\n       case 'E':\n \tif (XVEC (part, i) != NULL)\n \t  for (j = 0; j < XVECLEN (part, i); j++)\n-\t    walk_insn_part (XVECEXP (part, i, j), recog_p);\n+\t    walk_insn_part (XVECEXP (part, i, j), recog_p, non_pc_set_src);\n \tbreak;\n       }\n }\n@@ -146,7 +163,7 @@ gen_insn (insn)\n   dup_operands_seen_this_insn = 0;\n   if (XVEC (insn, 1) != 0)\n     for (i = 0; i < XVECLEN (insn, 1); i++)\n-      walk_insn_part (XVECEXP (insn, 1, i), 1);\n+      walk_insn_part (XVECEXP (insn, 1, i), 1, 0);\n \n   if (clobbers_seen_this_insn > max_clobbers_per_insn)\n     max_clobbers_per_insn = clobbers_seen_this_insn;\n@@ -174,7 +191,7 @@ gen_expand (insn)\n \t   don't sum across all of them.  */\n \tclobbers_seen_this_insn = 0;\n \n-\twalk_insn_part (XVECEXP (insn, 1, i), 0);\n+\twalk_insn_part (XVECEXP (insn, 1, i), 0, 0);\n \n \tif (clobbers_seen_this_insn > max_clobbers_per_insn)\n \t  max_clobbers_per_insn = clobbers_seen_this_insn;\n@@ -192,7 +209,7 @@ gen_split (split)\n   /* Look through the patterns that are matched\n      to compute the maximum operand number.  */\n   for (i = 0; i < XVECLEN (split, 0); i++)\n-    walk_insn_part (XVECEXP (split, 0, i), 1);\n+    walk_insn_part (XVECEXP (split, 0, i), 1, 0);\n   /* Look at the number of insns this insn could split into.  */\n   if (XVECLEN (split, 2) > max_insns_per_split)\n     max_insns_per_split = XVECLEN (split, 2);\n@@ -207,7 +224,7 @@ gen_peephole (peep)\n   /* Look through the patterns that are matched\n      to compute the maximum operand number.  */\n   for (i = 0; i < XVECLEN (peep, 0); i++)\n-    walk_insn_part (XVECEXP (peep, 0, i), 1);\n+    walk_insn_part (XVECEXP (peep, 0, i), 1, 0);\n }\n \f\n char *\n@@ -317,6 +334,9 @@ from the machine description file `md'.  */\\n\\n\");\n   if (have_cc0_flag)\n     printf (\"#define HAVE_cc0\\n\");\n \n+  if (have_cmove_flag)\n+    printf (\"#define HAVE_conditional_move\\n\");\n+\n   if (have_lo_sum_flag)\n     printf (\"#define HAVE_lo_sum\\n\");\n "}]}