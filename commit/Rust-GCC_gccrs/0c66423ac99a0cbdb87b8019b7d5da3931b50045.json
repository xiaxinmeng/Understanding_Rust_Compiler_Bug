{"sha": "0c66423ac99a0cbdb87b8019b7d5da3931b50045", "node_id": "C_kwDOANBUbNoAKDBjNjY0MjNhYzk5YTBjYmRiODdiODAxOWI3ZDVkYTM5MzFiNTAwNDU", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2021-10-31T19:52:04Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-11-10T08:57:40Z"}, "message": "[Ada] Use predefined equality for arrays inside records\n\ngcc/ada/\n\n\t* exp_ch4.adb (Expand_Composite_Equality): Handle arrays inside\n\trecords just like scalars; only records inside records need\n\tdedicated handling.", "tree": {"sha": "02d6a03a5c287a5c7ec7185c1a2857f3125b2953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02d6a03a5c287a5c7ec7185c1a2857f3125b2953"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c66423ac99a0cbdb87b8019b7d5da3931b50045", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c66423ac99a0cbdb87b8019b7d5da3931b50045", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c66423ac99a0cbdb87b8019b7d5da3931b50045", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c66423ac99a0cbdb87b8019b7d5da3931b50045/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55a213950e9584ca84e96dc52ba496ff88de7bc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55a213950e9584ca84e96dc52ba496ff88de7bc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55a213950e9584ca84e96dc52ba496ff88de7bc8"}], "stats": {"total": 70, "additions": 2, "deletions": 68}, "files": [{"sha": "7e250014379aa072021b0e5698acf2ecfd031db9", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 2, "deletions": 68, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c66423ac99a0cbdb87b8019b7d5da3931b50045/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c66423ac99a0cbdb87b8019b7d5da3931b50045/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=0c66423ac99a0cbdb87b8019b7d5da3931b50045", "patch": "@@ -2475,75 +2475,9 @@ package body Exp_Ch4 is\n          Full_Type := Underlying_Type (Full_Type);\n       end if;\n \n-      --  Case of array types\n-\n-      if Is_Array_Type (Full_Type) then\n-\n-         --  If the operand is an elementary type other than a floating-point\n-         --  type, then we can simply use the built-in block bitwise equality,\n-         --  since the predefined equality operators always apply and bitwise\n-         --  equality is fine for all these cases.\n-\n-         if Is_Elementary_Type (Component_Type (Full_Type))\n-           and then not Is_Floating_Point_Type (Component_Type (Full_Type))\n-         then\n-            return Make_Op_Eq (Loc, Left_Opnd => Lhs, Right_Opnd => Rhs);\n-\n-         --  For composite component types, and floating-point types, use the\n-         --  expansion. This deals with tagged component types (where we use\n-         --  the applicable equality routine) and floating-point (where we\n-         --  need to worry about negative zeroes), and also the case of any\n-         --  composite type recursively containing such fields.\n-\n-         else\n-            declare\n-               Comp_Typ : Entity_Id;\n-               Hi       : Node_Id;\n-               Indx     : Node_Id;\n-               Ityp     : Entity_Id;\n-               Lo       : Node_Id;\n-\n-            begin\n-               --  Do the comparison in the type (or its full view) and not in\n-               --  its unconstrained base type, because the latter operation is\n-               --  more complex and would also require an unchecked conversion.\n-\n-               if Is_Private_Type (Typ) then\n-                  Comp_Typ := Underlying_Type (Typ);\n-               else\n-                  Comp_Typ := Typ;\n-               end if;\n-\n-               --  Except for the case where the bounds of the type depend on a\n-               --  discriminant, or else we would run into scoping issues.\n-\n-               Indx := First_Index (Comp_Typ);\n-               while Present (Indx) loop\n-                  Ityp := Etype (Indx);\n-\n-                  Lo := Type_Low_Bound (Ityp);\n-                  Hi := Type_High_Bound (Ityp);\n-\n-                  if (Nkind (Lo) = N_Identifier\n-                       and then Ekind (Entity (Lo)) = E_Discriminant)\n-                    or else\n-                     (Nkind (Hi) = N_Identifier\n-                       and then Ekind (Entity (Hi)) = E_Discriminant)\n-                  then\n-                     Comp_Typ := Full_Type;\n-                     exit;\n-                  end if;\n-\n-                  Next_Index (Indx);\n-               end loop;\n-\n-               return Expand_Array_Equality (Nod, Lhs, Rhs, Bodies, Comp_Typ);\n-            end;\n-         end if;\n-\n       --  Case of tagged record types\n \n-      elsif Is_Tagged_Type (Full_Type) then\n+      if Is_Tagged_Type (Full_Type) then\n          Eq_Op := Find_Primitive_Eq (Typ);\n          pragma Assert (Present (Eq_Op));\n \n@@ -2734,7 +2668,7 @@ package body Exp_Ch4 is\n             return Expand_Record_Equality (Nod, Full_Type, Lhs, Rhs, Bodies);\n          end if;\n \n-      --  Non-composite types (always use predefined equality)\n+      --  Case of non-record types (always use predefined equality)\n \n       else\n          return Make_Op_Eq (Loc, Left_Opnd => Lhs, Right_Opnd => Rhs);"}]}