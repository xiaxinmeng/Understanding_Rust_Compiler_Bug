{"sha": "3626621a07bd682cb31ea832d2034776dde4e780", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYyNjYyMWEwN2JkNjgyY2IzMWVhODMyZDIwMzQ3NzZkZGU0ZTc4MA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-01-07T15:34:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-01-07T15:34:43Z"}, "message": "re PR tree-optimization/55890 (calling a builtin func through a cast triggers an ICE)\n\n2013-01-07  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/55890\n\t* gimple.h (gimple_call_builtin_p): New overload.\n\t* gimple.c (validate_call): New function.\n\t(gimple_call_builtin_p): Likewise.\n\t* tree-ssa-structalias.c (find_func_aliases_for_builtin_call):\n\tUse gimple_call_builtin_p.\n\t(find_func_clobbers): Likewise.\n\t* tree-ssa-strlen.c (adjust_last_stmt): Likewise.\n\t(strlen_optimize_stmt): Likewise.\n\n\t* gcc.dg/torture/pr55890-1.c: New testcase.\n\t* gcc.dg/torture/pr55890-2.c: Likewise.\n\nFrom-SVN: r194975", "tree": {"sha": "4175c00ea44d892ce1035c8ff1cbaf29665e98fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4175c00ea44d892ce1035c8ff1cbaf29665e98fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3626621a07bd682cb31ea832d2034776dde4e780", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3626621a07bd682cb31ea832d2034776dde4e780", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3626621a07bd682cb31ea832d2034776dde4e780", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3626621a07bd682cb31ea832d2034776dde4e780/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8b2ea410c7d5ccc14b94447d449abdc0b4d547ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b2ea410c7d5ccc14b94447d449abdc0b4d547ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b2ea410c7d5ccc14b94447d449abdc0b4d547ac"}], "stats": {"total": 97, "additions": 83, "deletions": 14}, "files": [{"sha": "7fb1b33462c1f0fef8cee82334cbc59359c289e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3626621a07bd682cb31ea832d2034776dde4e780/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3626621a07bd682cb31ea832d2034776dde4e780/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3626621a07bd682cb31ea832d2034776dde4e780", "patch": "@@ -1,3 +1,15 @@\n+2013-01-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/55890\n+\t* gimple.h (gimple_call_builtin_p): New overload.\n+\t* gimple.c (validate_call): New function.\n+\t(gimple_call_builtin_p): Likewise.\n+\t* tree-ssa-structalias.c (find_func_aliases_for_builtin_call):\n+\tUse gimple_call_builtin_p.\n+\t(find_func_clobbers): Likewise.\n+\t* tree-ssa-strlen.c (adjust_last_stmt): Likewise.\n+\t(strlen_optimize_stmt): Likewise.\n+\n 2013-01-07  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/arm_neon.h (vld1_dup_*): Make argument const."}, {"sha": "4f4bac860c4df7379c718c70c97d37e1878bbbd6", "filename": "gcc/gimple.c", "status": "modified", "additions": 49, "deletions": 5, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3626621a07bd682cb31ea832d2034776dde4e780/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3626621a07bd682cb31ea832d2034776dde4e780/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=3626621a07bd682cb31ea832d2034776dde4e780", "patch": "@@ -4137,16 +4137,60 @@ is_gimple_builtin_call (gimple stmt)\n   return false;\n }\n \n-/* Return true when STMT is builtins call to CODE.  */\n+/* Return true when STMTs arguments match those of FNDECL.  */\n+\n+static bool\n+validate_call (gimple stmt, tree fndecl)\n+{\n+  tree targs = TYPE_ARG_TYPES (TREE_TYPE (fndecl));\n+  unsigned nargs = gimple_call_num_args (stmt);\n+  for (unsigned i = 0; i < nargs; ++i)\n+    {\n+      /* Variadic args follow.  */\n+      if (!targs)\n+\treturn true;\n+      tree arg = gimple_call_arg (stmt, i);\n+      if (INTEGRAL_TYPE_P (TREE_TYPE (arg))\n+\t  && INTEGRAL_TYPE_P (TREE_VALUE (targs)))\n+\t;\n+      else if (POINTER_TYPE_P (TREE_TYPE (arg))\n+\t       && POINTER_TYPE_P (TREE_VALUE (targs)))\n+\t;\n+      else if (TREE_CODE (TREE_TYPE (arg))\n+\t       != TREE_CODE (TREE_VALUE (targs)))\n+\treturn false;\n+      targs = TREE_CHAIN (targs);\n+    }\n+  if (targs && !VOID_TYPE_P (TREE_VALUE (targs)))\n+    return false;\n+  return true;\n+}\n+\n+/* Return true when STMT is builtins call to CLASS.  */\n+\n+bool\n+gimple_call_builtin_p (gimple stmt, enum built_in_class klass)\n+{\n+  tree fndecl;\n+  if (is_gimple_call (stmt)\n+      && (fndecl = gimple_call_fndecl (stmt)) != NULL_TREE\n+      && DECL_BUILT_IN_CLASS (fndecl) == klass)\n+    return validate_call (stmt, fndecl);\n+  return false;\n+}\n+\n+/* Return true when STMT is builtins call to CODE of CLASS.  */\n \n bool\n gimple_call_builtin_p (gimple stmt, enum built_in_function code)\n {\n   tree fndecl;\n-  return (is_gimple_call (stmt)\n-\t  && (fndecl = gimple_call_fndecl (stmt)) != NULL\n-\t  && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL\n-\t  && DECL_FUNCTION_CODE (fndecl) == code);\n+  if (is_gimple_call (stmt)\n+      && (fndecl = gimple_call_fndecl (stmt)) != NULL_TREE\n+      && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL \n+      && DECL_FUNCTION_CODE (fndecl) == code)\n+    return validate_call (stmt, fndecl);\n+  return false;\n }\n \n /* Return true if STMT clobbers memory.  STMT is required to be a"}, {"sha": "a5be00a48aae77379c8ad2e192c66bef18943be9", "filename": "gcc/gimple.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3626621a07bd682cb31ea832d2034776dde4e780/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3626621a07bd682cb31ea832d2034776dde4e780/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=3626621a07bd682cb31ea832d2034776dde4e780", "patch": "@@ -893,6 +893,7 @@ extern bool walk_stmt_load_store_ops (gimple, void *,\n \t\t\t\t      bool (*)(gimple, tree, void *),\n \t\t\t\t      bool (*)(gimple, tree, void *));\n extern bool gimple_ior_addresses_taken (bitmap, gimple);\n+extern bool gimple_call_builtin_p (gimple, enum built_in_class);\n extern bool gimple_call_builtin_p (gimple, enum built_in_function);\n extern bool gimple_asm_clobbers_memory_p (const_gimple);\n "}, {"sha": "80f18baf19bdfd762f668f3999cf19375382866f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3626621a07bd682cb31ea832d2034776dde4e780/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3626621a07bd682cb31ea832d2034776dde4e780/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3626621a07bd682cb31ea832d2034776dde4e780", "patch": "@@ -1,3 +1,9 @@\n+2013-01-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/55890\n+\t* gcc.dg/torture/pr55890-1.c: New testcase.\n+\t* gcc.dg/torture/pr55890-2.c: Likewise.\n+\n 2013-01-07  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* gcc.target/aarch64/fmovd.c: New."}, {"sha": "9fd558ea03ff763aaad7b60f2a3003e93afaaf88", "filename": "gcc/testsuite/gcc.dg/torture/pr55890-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3626621a07bd682cb31ea832d2034776dde4e780/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55890-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3626621a07bd682cb31ea832d2034776dde4e780/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55890-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55890-1.c?ref=3626621a07bd682cb31ea832d2034776dde4e780", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+\n+extern void *memmove(void *, void *, __SIZE_TYPE__);\n+typedef int (*_TEST_fun_) ();\n+static _TEST_fun_ i = (_TEST_fun_) memmove;\n+main() { i(); }"}, {"sha": "a753e573dce27016200bac83318ddcb85cea16b6", "filename": "gcc/testsuite/gcc.dg/torture/pr55890-2.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3626621a07bd682cb31ea832d2034776dde4e780/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55890-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3626621a07bd682cb31ea832d2034776dde4e780/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55890-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55890-2.c?ref=3626621a07bd682cb31ea832d2034776dde4e780", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\r\n+\r\n+extern void *memcpy();\r\n+main() { memcpy(); }\r"}, {"sha": "a574a83fe438373ddc2e7edaac7028c3c02c0108", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3626621a07bd682cb31ea832d2034776dde4e780/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3626621a07bd682cb31ea832d2034776dde4e780/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=3626621a07bd682cb31ea832d2034776dde4e780", "patch": "@@ -807,12 +807,10 @@ adjust_last_stmt (strinfo si, gimple stmt, bool is_strcat)\n       return;\n     }\n \n-  if (!is_gimple_call (last.stmt))\n-    return;\n-  callee = gimple_call_fndecl (last.stmt);\n-  if (callee == NULL_TREE || DECL_BUILT_IN_CLASS (callee) != BUILT_IN_NORMAL)\n+  if (!gimple_call_builtin_p (last.stmt, BUILT_IN_NORMAL))\n     return;\n \n+  callee = gimple_call_fndecl (last.stmt);\n   switch (DECL_FUNCTION_CODE (callee))\n     {\n     case BUILT_IN_MEMCPY:\n@@ -1750,7 +1748,7 @@ strlen_optimize_stmt (gimple_stmt_iterator *gsi)\n   if (is_gimple_call (stmt))\n     {\n       tree callee = gimple_call_fndecl (stmt);\n-      if (callee && DECL_BUILT_IN_CLASS (callee) == BUILT_IN_NORMAL)\n+      if (gimple_call_builtin_p (stmt, BUILT_IN_NORMAL))\n \tswitch (DECL_FUNCTION_CODE (callee))\n \t  {\n \t  case BUILT_IN_STRLEN:"}, {"sha": "8eb8544a3d41bb346c35ce4de42cac95fa35e058", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3626621a07bd682cb31ea832d2034776dde4e780/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3626621a07bd682cb31ea832d2034776dde4e780/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=3626621a07bd682cb31ea832d2034776dde4e780", "patch": "@@ -4014,8 +4014,7 @@ find_func_aliases_for_builtin_call (gimple t)\n   vec<ce_s> rhsc = vNULL;\n   varinfo_t fi;\n \n-  if (fndecl != NULL_TREE\n-      && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n+  if (gimple_call_builtin_p (t, BUILT_IN_NORMAL))\n     /* ???  All builtins that are handled here need to be handled\n        in the alias-oracle query functions explicitly!  */\n     switch (DECL_FUNCTION_CODE (fndecl))\n@@ -4768,8 +4767,7 @@ find_func_clobbers (gimple origt)\n \n       /* For builtins we do not have separate function info.  For those\n \t we do not generate escapes for we have to generate clobbers/uses.  */\n-      if (decl\n-\t  && DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL)\n+      if (gimple_call_builtin_p (t, BUILT_IN_NORMAL))\n \tswitch (DECL_FUNCTION_CODE (decl))\n \t  {\n \t  /* The following functions use and clobber memory pointed to"}]}