{"sha": "665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY1ZGIzYWViNDhmMGYwOTcwYmIwZTAxZjM3ZjlmZDlmYjAxM2VhNA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-12-05T23:10:08Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-12-05T23:10:08Z"}, "message": "re PR c/87028 (false positive -Wstringop-truncation strncpy with global variable source string)\n\n\tPR c/87028\n\t* calls.c (get_attr_nonstring_decl): Avoid setting *REF to\n\tSSA_NAME_VAR.\n\t* gcc/gimple-low.c (lower_stmt): Fold builtin calls here.\n\t* gimplify (maybe_fold_stmt): Avoid folding builtin calls.\n\n\tPR c/87028\n\t* c-c++-common/Wstringop-truncation.c: Remove xfails.\n\t* gcc.dg/Wstringop-truncation-5.c: New test.\n\t* gcc.dg/strcmpopt_1.c: Adjust.\n\t* gcc.dg/tree-ssa/pr79697.c: Same.\n\nFrom-SVN: r266833", "tree": {"sha": "2c210ca46a2a9c1f9f7c1d5eb1b25887d17f511f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c210ca46a2a9c1f9f7c1d5eb1b25887d17f511f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4/comments", "author": null, "committer": null, "parents": [{"sha": "c43137e800bb9ca2ecda0a6b6189e0eb5c22f0d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c43137e800bb9ca2ecda0a6b6189e0eb5c22f0d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c43137e800bb9ca2ecda0a6b6189e0eb5c22f0d7"}], "stats": {"total": 194, "additions": 179, "deletions": 15}, "files": [{"sha": "639f5cfd9849048f8c6722d786d4814550c0017b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4", "patch": "@@ -1,3 +1,12 @@\n+2018-12-05  Richard Biener  <rguenther@suse.de>\n+\t    Martin Sebor <msebor@redhat.com>\n+\n+\tPR c/87028\n+\t* calls.c (get_attr_nonstring_decl): Avoid setting *REF to\n+\tSSA_NAME_VAR.\n+\t* gcc/gimple-low.c (lower_stmt): Fold builtin calls here.\n+\t* gimplify (maybe_fold_stmt): Avoid folding builtin calls.\n+\n 2018-12-05  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* configure.ac (gcc_cv_otool): Set."}, {"sha": "98c6377d78f6f21359785db971316dbb3fe51f2a", "filename": "gcc/calls.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4", "patch": "@@ -1503,6 +1503,7 @@ tree\n get_attr_nonstring_decl (tree expr, tree *ref)\n {\n   tree decl = expr;\n+  tree var = NULL_TREE;\n   if (TREE_CODE (decl) == SSA_NAME)\n     {\n       gimple *def = SSA_NAME_DEF_STMT (decl);\n@@ -1515,17 +1516,25 @@ get_attr_nonstring_decl (tree expr, tree *ref)\n \t      || code == VAR_DECL)\n \t    decl = gimple_assign_rhs1 (def);\n \t}\n-      else if (tree var = SSA_NAME_VAR (decl))\n-\tdecl = var;\n+      else\n+\tvar = SSA_NAME_VAR (decl);\n     }\n \n   if (TREE_CODE (decl) == ADDR_EXPR)\n     decl = TREE_OPERAND (decl, 0);\n \n+  /* To simplify calling code, store the referenced DECL regardless of\n+     the attribute determined below, but avoid storing the SSA_NAME_VAR\n+     obtained above (it's not useful for dataflow purposes).  */\n   if (ref)\n     *ref = decl;\n \n-  if (TREE_CODE (decl) == ARRAY_REF)\n+  /* Use the SSA_NAME_VAR that was determined above to see if it's\n+     declared nonstring.  Otherwise drill down into the referenced\n+     DECL.  */\n+  if (var)\n+    decl = var;\n+  else if (TREE_CODE (decl) == ARRAY_REF)\n     decl = TREE_OPERAND (decl, 0);\n   else if (TREE_CODE (decl) == COMPONENT_REF)\n     decl = TREE_OPERAND (decl, 1);"}, {"sha": "b00e14f6554b4d591acc0dde07cd20c0d62951ec", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-low.h\"\n #include \"predict.h\"\n #include \"gimple-predict.h\"\n+#include \"gimple-fold.h\"\n \n /* The differences between High GIMPLE and Low GIMPLE are the\n    following:\n@@ -378,6 +379,12 @@ lower_stmt (gimple_stmt_iterator *gsi, struct lower_data *data)\n \t    gsi_next (gsi);\n \t    return;\n \t  }\n+\n+\t/* We delay folding of built calls from gimplification to\n+\t   here so the IL is in consistent state for the diagnostic\n+\t   machineries job.  */\n+\tif (gimple_call_builtin_p (stmt))\n+\t  fold_stmt (gsi);\n       }\n       break;\n "}, {"sha": "d96ee43e7deedc2ecc546641c9b49f5f9d96f4ab", "filename": "gcc/gimplify.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4", "patch": "@@ -3192,6 +3192,10 @@ maybe_fold_stmt (gimple_stmt_iterator *gsi)\n       return false;\n     else if ((ctx->region_type & ORT_HOST_TEAMS) == ORT_HOST_TEAMS)\n       return false;\n+  /* Delay folding of builtins until the IL is in consistent state\n+     so the diagnostic machinery can do a better job.  */\n+  if (gimple_call_builtin_p (gsi_stmt (*gsi)))\n+    return false;\n   return fold_stmt (gsi);\n }\n "}, {"sha": "8bed4b455e0414ddaf930235330d238c7e395477", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4", "patch": "@@ -1,3 +1,11 @@\n+2018-12-05  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/87028\n+\t* c-c++-common/Wstringop-truncation.c: Remove xfails.\n+\t* gcc.dg/Wstringop-truncation-5.c: New test.\n+\t* gcc.dg/strcmpopt_1.c: Adjust.\n+\t* gcc.dg/tree-ssa/pr79697.c: Same.\n+\n 2018-12-05  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR tree-optimization/88064"}, {"sha": "b85711d6b3f399a476a7ae0a9cce9c03b90fd1e2", "filename": "gcc/testsuite/c-c++-common/Wstringop-truncation.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWstringop-truncation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWstringop-truncation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWstringop-truncation.c?ref=665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4", "patch": "@@ -329,9 +329,8 @@ void test_strncpy_array (Dest *pd, int i, const char* s)\n      of the array to NUL is not diagnosed.  */\n   {\n     /* This might be better written using memcpy() but it's safe so\n-       it probably shouldn't be diagnosed.  It currently triggers\n-       a warning because of bug 81704.  */\n-    strncpy (dst7, \"0123456\", sizeof dst7);   /* { dg-bogus \"\\\\\\[-Wstringop-truncation]\" \"bug 81704\" { xfail *-*-* } } */\n+       it shouldn't be diagnosed.  */\n+    strncpy (dst7, \"0123456\", sizeof dst7);   /* { dg-bogus \"\\\\\\[-Wstringop-truncation]\" } */\n     dst7[sizeof dst7 - 1] = '\\0';\n     sink (dst7);\n   }\n@@ -350,7 +349,7 @@ void test_strncpy_array (Dest *pd, int i, const char* s)\n   }\n \n   {\n-    strncpy (pd->a5, \"01234\", sizeof pd->a5);   /* { dg-bogus \"\\\\\\[-Wstringop-truncation]\" \"bug 81704\" { xfail *-*-* } } */\n+    strncpy (pd->a5, \"01234\", sizeof pd->a5);   /* { dg-bogus \"\\\\\\[-Wstringop-truncation]\" } */\n     pd->a5[sizeof pd->a5 - 1] = '\\0';\n     sink (pd);\n   }"}, {"sha": "dbb5e1fed32b7ac941c53ee62d2438ae6ec2222f", "filename": "gcc/testsuite/gcc.dg/Wstringop-truncation-5.c", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-truncation-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-truncation-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-truncation-5.c?ref=665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4", "patch": "@@ -0,0 +1,128 @@\n+/* PR tree-optimization/87028 - false positive -Wstringop-truncation\n+   strncpy with global variable source string\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wstringop-truncation\" } */\n+\n+char *strncpy (char *, const char *, __SIZE_TYPE__);\n+\n+#define STR   \"1234567890\"\n+\n+struct S\n+{\n+  char a[5], b[5];\n+};\n+\n+const char arr[] = STR;\n+const char* const ptr = STR;\n+\n+const char arr2[][10] = { \"123\", STR };\n+\n+void test_literal (struct S *s)\n+{\n+  strncpy (s->a, STR, sizeof s->a - 1);     /* { dg-bogus \"\\\\\\[-Wstringop-truncation]\" } */\n+  s->a[sizeof s->a - 1] = '\\0';\n+}\n+\n+void test_global_arr (struct S *s)\n+{\n+  strncpy (s->a, arr, sizeof s->a - 1);     /* { dg-bogus \"\\\\\\[-Wstringop-truncation]\" } */\n+  s->a [sizeof s->a - 1] = '\\0';\n+}\n+\n+void test_global_arr2 (struct S *s)\n+{\n+  strncpy (s->a, arr2[1], sizeof s->a - 1); /* { dg-bogus \"\\\\\\[-Wstringop-truncation]\" } */\n+  s->a [sizeof s->a - 1] = '\\0';\n+\n+  strncpy (s->b, arr2[0], sizeof s->a - 1);\n+}\n+\n+void test_global_ptr (struct S *s)\n+{\n+  strncpy (s->a, ptr, sizeof s->a - 1);     /* { dg-bogus \"\\\\\\[-Wstringop-truncation]\" } */\n+  s->a [sizeof s->a - 1] = '\\0';\n+}\n+\n+void test_local_arr (struct S *s)\n+{\n+  const char arr[] = STR;\n+  strncpy (s->a, arr, sizeof s->a - 1);\n+  s->a [sizeof s->a - 1] = '\\0';\n+}\n+\n+void test_local_ptr (struct S *s)\n+{\n+  const char* const ptr = STR;\n+  strncpy (s->a, ptr, sizeof s->a - 1);     /* { dg-bogus \"\\\\\\[-Wstringop-truncation]\" } */\n+  s->a [sizeof s->a - 1] = '\\0';\n+}\n+\n+void test_compound_literal (struct S *s)\n+{\n+  strncpy (s->a, (char[]){ STR }, sizeof s->a - 1);\n+  s->a [sizeof s->a - 1] = '\\0';\n+}\n+/* PR tree-optimization/87028 - false positive -Wstringop-truncation\n+   strncpy with global variable source string\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wstringop-truncation\" } */\n+\n+char *strncpy (char *, const char *, __SIZE_TYPE__);\n+\n+#define STR   \"1234567890\"\n+\n+struct S\n+{\n+  char a[5], b[5];\n+};\n+\n+const char arr[] = STR;\n+const char* const ptr = STR;\n+\n+const char arr2[][10] = { \"123\", STR };\n+\n+void test_literal (struct S *s)\n+{\n+  strncpy (s->a, STR, sizeof s->a - 1);     /* { dg-bogus \"\\\\\\[-Wstringop-truncation]\" } */\n+  s->a[sizeof s->a - 1] = '\\0';\n+}\n+\n+void test_global_arr (struct S *s)\n+{\n+  strncpy (s->a, arr, sizeof s->a - 1);     /* { dg-bogus \"\\\\\\[-Wstringop-truncation]\" } */\n+  s->a [sizeof s->a - 1] = '\\0';\n+}\n+\n+void test_global_arr2 (struct S *s)\n+{\n+  strncpy (s->a, arr2[1], sizeof s->a - 1); /* { dg-bogus \"\\\\\\[-Wstringop-truncation]\" } */\n+  s->a [sizeof s->a - 1] = '\\0';\n+\n+  strncpy (s->b, arr2[0], sizeof s->a - 1);\n+}\n+\n+void test_global_ptr (struct S *s)\n+{\n+  strncpy (s->a, ptr, sizeof s->a - 1);     /* { dg-bogus \"\\\\\\[-Wstringop-truncation]\" } */\n+  s->a [sizeof s->a - 1] = '\\0';\n+}\n+\n+void test_local_arr (struct S *s)\n+{\n+  const char arr[] = STR;\n+  strncpy (s->a, arr, sizeof s->a - 1);\n+  s->a [sizeof s->a - 1] = '\\0';\n+}\n+\n+void test_local_ptr (struct S *s)\n+{\n+  const char* const ptr = STR;\n+  strncpy (s->a, ptr, sizeof s->a - 1);     /* { dg-bogus \"\\\\\\[-Wstringop-truncation]\" } */\n+  s->a [sizeof s->a - 1] = '\\0';\n+}\n+\n+void test_compound_literal (struct S *s)\n+{\n+  strncpy (s->a, (char[]){ STR }, sizeof s->a - 1);\n+  s->a [sizeof s->a - 1] = '\\0';\n+}"}, {"sha": "9a5448465eea0bb713fbdf6a946aabee9b8001b3", "filename": "gcc/testsuite/gcc.dg/fold-bcopy.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-bcopy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-bcopy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-bcopy.c?ref=665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4", "patch": "@@ -1,6 +1,6 @@\n /* PR tree-optimization/80933 - redundant bzero/bcopy calls not eliminated\n    { dg-do compile }\n-   { dg-options \"-O0 -Wall -fdump-tree-gimple\" } */\n+   { dg-options \"-O1 -Wall -fdump-tree-lower\" } */\n \n void f0 (void *dst, const void *src, unsigned n)\n {\n@@ -46,9 +46,9 @@ void f6 (void *p)\n /* Verify that calls to bcmp, bcopy, and bzero have all been removed\n    and one of each replaced with memcmp, memmove, and memset, respectively.\n    The remaining three should be eliminated.\n-  { dg-final { scan-tree-dump-not \"bcmp|bcopy|bzero\" \"gimple\" } }\n-  { dg-final { scan-tree-dump-times \"memcmp|memmove|memset\" 3 \"gimple\" } }\n+  { dg-final { scan-tree-dump-not \"bcmp|bcopy|bzero\" \"lower\" } }\n+  { dg-final { scan-tree-dump-times \"memcmp|memmove|memset\" 3 \"lower\" } }\n \n   Verify that the bcopy to memmove transformation correctly transposed\n   the source and destination pointer arguments.\n-  { dg-final { scan-tree-dump-times \"memmove \\\\(dst, src\" 1 \"gimple\" } }  */\n+  { dg-final { scan-tree-dump-times \"memmove \\\\(dst, src\" 1 \"lower\" } }  */"}, {"sha": "b1e0bc3b274ed6bd3e0c4ed874506d39c9be5d90", "filename": "gcc/testsuite/gcc.dg/strcmpopt_1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4/gcc%2Ftestsuite%2Fgcc.dg%2Fstrcmpopt_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4/gcc%2Ftestsuite%2Fgcc.dg%2Fstrcmpopt_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrcmpopt_1.c?ref=665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fdump-tree-gimple\" } */\n+/* { dg-options \"-fdump-tree-lower\" } */\n \n #include <string.h>\n #include <stdlib.h>\n@@ -25,4 +25,4 @@ int main ()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"strcmp \\\\(\" 2 \"gimple\" } } */\n+/* { dg-final { scan-tree-dump-times \"strcmp \\\\(\" 2 \"lower\" } } */"}, {"sha": "973ec0dc1937a0cfa4c0d420c6e3387cba9c3af9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr79697.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr79697.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr79697.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr79697.c?ref=665db3aeb48f0f0970bb0e01f37f9fd9fb013ea4", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-gimple -fdump-tree-cddce-details -fdump-tree-optimized\" } */\n+/* { dg-options \"-O2 -fdump-tree-lower -fdump-tree-cddce-details -fdump-tree-optimized\" } */\n \n void f(void)\n {\n@@ -18,4 +18,4 @@ void h(void)\n \n /* { dg-final { scan-tree-dump \"Deleting : __builtin_strdup\" \"cddce1\" } } */\n /* { dg-final { scan-tree-dump \"Deleting : __builtin_strndup\" \"cddce1\" } } */\n-/* { dg-final { scan-tree-dump \"__builtin_malloc\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"__builtin_malloc\" \"lower\" } } */"}]}