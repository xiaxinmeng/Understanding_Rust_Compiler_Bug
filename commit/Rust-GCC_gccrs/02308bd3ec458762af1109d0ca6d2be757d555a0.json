{"sha": "02308bd3ec458762af1109d0ca6d2be757d555a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIzMDhiZDNlYzQ1ODc2MmFmMTEwOWQwY2E2ZDJiZTc1N2Q1NTVhMA==", "commit": {"author": {"name": "Markus Trippelsdorf", "email": "markus@trippelsdorf.de", "date": "2017-12-16T04:28:08Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-12-16T04:28:08Z"}, "message": "re PR target/83358 (division not converted with Intel tuning since r253934)\n\n2017-12-15  Markus Trippelsdorf  <markus@trippelsdorf.de>\n\n\tPR target/83358\n\t* config/i386/x86-tune-costs.h (skylake_cost, core_cost): Increase\n\tdiv/mod latencies a bit.\n\n        PR target/83358\n\t* gcc.target/i386/pr83358-1.c: New test.\n\t* gcc.target/i386/pr83358-2.c: New test.\n\nFrom-SVN: r255739", "tree": {"sha": "5c27f6c88574b704b4ab412f7415a72bdf436ad6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c27f6c88574b704b4ab412f7415a72bdf436ad6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02308bd3ec458762af1109d0ca6d2be757d555a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02308bd3ec458762af1109d0ca6d2be757d555a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02308bd3ec458762af1109d0ca6d2be757d555a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02308bd3ec458762af1109d0ca6d2be757d555a0/comments", "author": null, "committer": null, "parents": [{"sha": "be528ae9aa5a04611019c42f4d94fed7e4727dad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be528ae9aa5a04611019c42f4d94fed7e4727dad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be528ae9aa5a04611019c42f4d94fed7e4727dad"}], "stats": {"total": 92, "additions": 84, "deletions": 8}, "files": [{"sha": "c2d037a9f8d6a07ffe0e038d2d180c7882e918d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02308bd3ec458762af1109d0ca6d2be757d555a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02308bd3ec458762af1109d0ca6d2be757d555a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02308bd3ec458762af1109d0ca6d2be757d555a0", "patch": "@@ -1,3 +1,9 @@\n+2017-12-15  Markus Trippelsdorf  <markus@trippelsdorf.de>\n+\n+\tPR target/83358\n+\t* config/i386/x86-tune-costs.h (skylake_cost, core_cost): Increase\n+\tdiv/mod latencies a bit.\n+\n 2017-12-15  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/36550"}, {"sha": "64821933830859a1a2707a527bda316e0dd1c15f", "filename": "gcc/config/i386/x86-tune-costs.h", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02308bd3ec458762af1109d0ca6d2be757d555a0/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02308bd3ec458762af1109d0ca6d2be757d555a0/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h?ref=02308bd3ec458762af1109d0ca6d2be757d555a0", "patch": "@@ -1541,9 +1541,11 @@ struct processor_costs skylake_cost = {\n    COSTS_N_INSNS (4),\t\t\t/*\t\t\t\t DI */\n    COSTS_N_INSNS (4)},\t\t\t/*\t\t\t      other */\n   0,\t\t\t\t\t/* cost of multiply per each bit set */\n-  {COSTS_N_INSNS (8),\t\t\t/* cost of a divide/mod for QI */\n-   COSTS_N_INSNS (8),\t\t\t/*\t\t\t    HI */\n-   COSTS_N_INSNS (11),\t\t\t/*\t\t\t    SI */\n+  /* Expanding div/mod currently doesn't consider parallelism. So the cost\n+     model is not realistic. We compensate by increasing the latencies a bit.  */\n+  {COSTS_N_INSNS (11),\t\t\t/* cost of a divide/mod for QI */\n+   COSTS_N_INSNS (11),\t\t\t/*\t\t\t    HI */\n+   COSTS_N_INSNS (14),\t\t\t/*\t\t\t    SI */\n    COSTS_N_INSNS (76),\t\t\t/*\t\t\t    DI */\n    COSTS_N_INSNS (76)},\t\t\t/*\t\t\t    other */\n   COSTS_N_INSNS (1),\t\t\t/* cost of movsx */\n@@ -2342,11 +2344,11 @@ struct processor_costs core_cost = {\n    COSTS_N_INSNS (4),\t\t\t/*\t\t\t\t DI */\n    COSTS_N_INSNS (4)},\t\t\t/*\t\t\t      other */\n   0,\t\t\t\t\t/* cost of multiply per each bit set */\n-  {COSTS_N_INSNS (8),\t\t\t/* cost of a divide/mod for QI */\n-   COSTS_N_INSNS (8),\t\t\t/*\t\t\t    HI */\n-   /* 8-11 */\n-   COSTS_N_INSNS (11),\t\t\t/*\t\t\t    SI */\n-   /* 24-81 */\n+  /* Expanding div/mod currently doesn't consider parallelism. So the cost\n+     model is not realistic. We compensate by increasing the latencies a bit.  */\n+  {COSTS_N_INSNS (11),\t\t\t/* cost of a divide/mod for QI */\n+   COSTS_N_INSNS (11),\t\t\t/*\t\t\t    HI */\n+   COSTS_N_INSNS (14),\t\t\t/*\t\t\t    SI */\n    COSTS_N_INSNS (81),\t\t\t/*\t\t\t    DI */\n    COSTS_N_INSNS (81)},\t\t\t/*\t\t\t    other */\n   COSTS_N_INSNS (1),\t\t\t/* cost of movsx */"}, {"sha": "10dc8b2ef194cc19f6059e184b50b58e98913c6a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02308bd3ec458762af1109d0ca6d2be757d555a0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02308bd3ec458762af1109d0ca6d2be757d555a0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=02308bd3ec458762af1109d0ca6d2be757d555a0", "patch": "@@ -1,3 +1,9 @@\n+2017-12-15  Markus Trippelsdorf  <markus@trippelsdorf.de>\n+\n+        PR target/83358\n+\t* gcc.target/i386/pr83358-1.c: New test.\n+\t* gcc.target/i386/pr83358-2.c: New test.\n+\n 2017-12-15  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/36550"}, {"sha": "96427b2f56dd169eaa9e1d43e6d773b535f3b4d4", "filename": "gcc/testsuite/gcc.target/i386/pr83358-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02308bd3ec458762af1109d0ca6d2be757d555a0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr83358-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02308bd3ec458762af1109d0ca6d2be757d555a0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr83358-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr83358-1.c?ref=02308bd3ec458762af1109d0ca6d2be757d555a0", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=core2\" } */\n+\n+#include <stdint.h>\n+\n+void bin2ascii(uint64_t val, char *dst) {\n+  const int64_t POW10_10 = ((int64_t)10) * 1000 * 1000 * 1000;\n+  int64_t hix = val / POW10_10;\n+  int64_t lox = val % POW10_10;\n+  int32_t v0 = hix / 100000;\n+  int32_t v1 = hix % 100000;\n+  int32_t v2 = lox / 100000;\n+  int32_t v3 = lox % 100000;\n+  for (int i = 4; i != 0; --i) {\n+    dst[i + 0 * 5] = v0 % 10 + '0';\n+    v0 /= 10;\n+    dst[i + 1 * 5] = v1 % 10 + '0';\n+    v1 /= 10;\n+    dst[i + 2 * 5] = v2 % 10 + '0';\n+    v2 /= 10;\n+    dst[i + 3 * 5] = v3 % 10 + '0';\n+    v3 /= 10;\n+  }\n+  dst[0 * 5] = v0 + '0';\n+  dst[1 * 5] = v1 + '0';\n+  dst[2 * 5] = v2 + '0';\n+  dst[3 * 5] = v3 + '0';\n+  dst[4 * 5] = 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"idiv\" } } */"}, {"sha": "f6039bf72feb5bc92afe295bb3757a54ffba665a", "filename": "gcc/testsuite/gcc.target/i386/pr83358-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02308bd3ec458762af1109d0ca6d2be757d555a0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr83358-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02308bd3ec458762af1109d0ca6d2be757d555a0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr83358-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr83358-2.c?ref=02308bd3ec458762af1109d0ca6d2be757d555a0", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=skylake-avx512\" } */\n+\n+#include <stdint.h>\n+\n+void bin2ascii(uint64_t val, char *dst) {\n+  const int64_t POW10_10 = ((int64_t)10) * 1000 * 1000 * 1000;\n+  int64_t hix = val / POW10_10;\n+  int64_t lox = val % POW10_10;\n+  int32_t v0 = hix / 100000;\n+  int32_t v1 = hix % 100000;\n+  int32_t v2 = lox / 100000;\n+  int32_t v3 = lox % 100000;\n+  for (int i = 4; i != 0; --i) {\n+    dst[i + 0 * 5] = v0 % 10 + '0';\n+    v0 /= 10;\n+    dst[i + 1 * 5] = v1 % 10 + '0';\n+    v1 /= 10;\n+    dst[i + 2 * 5] = v2 % 10 + '0';\n+    v2 /= 10;\n+    dst[i + 3 * 5] = v3 % 10 + '0';\n+    v3 /= 10;\n+  }\n+  dst[0 * 5] = v0 + '0';\n+  dst[1 * 5] = v1 + '0';\n+  dst[2 * 5] = v2 + '0';\n+  dst[3 * 5] = v3 + '0';\n+  dst[4 * 5] = 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"idiv\" } } */"}]}