{"sha": "1e78b49adb52ccf9493515ae002d87f3af1f5de9", "node_id": "C_kwDOANBUbNoAKDFlNzhiNDlhZGI1MmNjZjk0OTM1MTVhZTAwMmQ4N2YzYWYxZjVkZTk", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2022-09-30T22:27:00Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-11-04T13:47:24Z"}, "message": "ada: Allow enabling a restricted set of language extensions.\n\nThe -gnatX switch (and the related Extensions_Allowed pragma) is currently a\ntwo-valued all-or-nothing option. Add support for enabling a curated subset\nof language extensions without enabling others via the -gnatX switch\nand for enabling all language extensions via the new -gnatX0 switch.\nSimilarly, the existing \"ON\" argument for the Extensions_Allowed pragma\nnow only enables the curated subset; the new argument \"ALL\" enables all\nlanguage extensions. The subset of language extensions currently includes\nprefixed-view notation with an untagged prefix, fixed-low-bound array\nsubtypes, and casing on composite values.\n\ngcc/ada/\n\n\t* opt.ads: Replace Ada_Version_Type enumeration literal\n\tAda_With_Extensions with two literals, Ada_With_Core_Extensions\n\tand Ada_With_All_Extensions. Update uses of the deleted literal.\n\tReplace Extensions_Allowed function with two functions:\n\tAll_Extensions_Allowed and Core_Extensions_Allowed.\n\t* errout.ads, errout.adb: Add Boolean parameter to\n\tError_Msg_GNAT_Extension to indicate whether the construct in\n\tquestion belongs to the curated subset.\n\t* exp_ch5.adb, par-ch4.adb, sem_case.adb, sem_ch3.adb:\n\t* sem_ch4.adb, sem_ch5.adb, sem_ch8.adb: Replace calls to\n\tExtensions_Allowed with calls to Core_Extensions_Allowed for\n\tconstructs that are in the curated subset.\n\t* sem_attr.adb, sem_ch13.adb, sem_eval.adb, sem_util.adb: Replace\n\tcalls to Extensions_Allowed with calls to All_Extensions_Allowed\n\tfor constructs that are not in the curated subset.\n\t* par-ch3.adb: Override default for new parameter in calls to\n\tError_Msg_GNAT_Extension for constructs in the curated subset.\n\t* par-prag.adb: Add Boolean parameter to Check_Arg_Is_On_Or_Off to\n\talso allow ALL. Set Opt.Ada_Version appropriately for ALL or ON\n\targuments.\n\t* sem_prag.adb: Allowed ALL argument for an Extensions_Allowed\n\tpragma. Set Opt.Ada_Version appropriately for ALL or ON arguments.\n\t* switch-c.adb: The -gnatX switch now enables only the curated\n\tsubset of language extensions (formerly it enabled all of them);\n\tthe new -gnatX0 switch enables all of them.\n\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst:\n\tDocument new \"-gnatX0\" switch and update documentation for\n\t\"-gnatX\" switch.\n\t* doc/gnat_rm/implementation_defined_pragmas.rst: Document new ALL\n\targument for pragma Extensions_Allowed and update documentation\n\tfor the ON argument. Delete mention of Ada 2022 Reduce attribute\n\tas an extension.\n\t* gnat_rm.texi, gnat_ugn.texi: Regenerate.", "tree": {"sha": "dc255aac6355787df6cee090f9da4a9d79571a6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc255aac6355787df6cee090f9da4a9d79571a6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e78b49adb52ccf9493515ae002d87f3af1f5de9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e78b49adb52ccf9493515ae002d87f3af1f5de9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e78b49adb52ccf9493515ae002d87f3af1f5de9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e78b49adb52ccf9493515ae002d87f3af1f5de9/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c07da8567bfc67bd28191f63a9247566260063ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c07da8567bfc67bd28191f63a9247566260063ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c07da8567bfc67bd28191f63a9247566260063ad"}], "stats": {"total": 307, "additions": 212, "deletions": 95}, "files": [{"sha": "1f371a50168a5c09be41af7654f9ae6b9e320cdc", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=1e78b49adb52ccf9493515ae002d87f3af1f5de9", "patch": "@@ -2174,16 +2174,19 @@ Syntax:\n \n .. code-block:: ada\n \n-  pragma Extensions_Allowed (On | Off);\n+  pragma Extensions_Allowed (On | Off | All);\n \n \n-This configuration pragma enables or disables the implementation\n-extension mode (the use of Off as a parameter cancels the effect\n-of the *-gnatX* command switch).\n+This configuration pragma enables (via the \"On\" or \"All\" argument) or disables\n+(via the \"Off\" argument) the implementation extension mode; the pragma takes\n+precedence over the *-gnatX* and *-gnatX0* command switches.\n \n-In extension mode, the latest version of the Ada language is\n-implemented (currently Ada 2022), and in addition a number\n-of GNAT specific extensions are recognized as follows:\n+If an argument of \"All\" is specified, the latest version of the Ada language\n+is implemented (currently Ada 2022) and, in addition, a number\n+of GNAT specific extensions are recognized. These extensions are listed\n+below. An argument of \"On\" has the same effect except that only\n+some, not all, of the listed extensions are enabled; those extensions\n+are identified below.\n \n * Constrained attribute for generic objects\n \n@@ -2197,11 +2200,6 @@ of GNAT specific extensions are recognized as follows:\n   functions and the compiler will evaluate some of these intrinsic statically,\n   in particular the ``Shift_Left`` and ``Shift_Right`` intrinsics.\n \n-* ``'Reduce`` attribute\n-\n-  This attribute part of the Ada 202x language definition is provided for\n-  now under -gnatX to confirm and potentially refine its usage and syntax.\n-\n * ``[]`` aggregates\n \n   This new aggregate syntax for arrays and containers is provided under -gnatX\n@@ -2334,6 +2332,8 @@ of GNAT specific extensions are recognized as follows:\n   for a given identifer must all statically match. Currently, the case\n   of a binding for a nondiscrete component is not implemented.\n \n+  An Extensions_Allowed pragma argument of \"On\" enables this extension.\n+\n * Fixed lower bounds for array types and subtypes\n \n   Unconstrained array types and subtypes can be specified with a lower bound\n@@ -2378,6 +2378,8 @@ of GNAT specific extensions are recognized as follows:\n   knows the lower bound of unconstrained array formals when the formal's\n   subtype has index ranges with static fixed lower bounds.\n \n+  An Extensions_Allowed pragma argument of \"On\" enables this extension.\n+\n * Prefixed-view notation for calls to primitive subprograms of untagged types\n \n   Since Ada 2005, calls to primitive subprograms of a tagged type that\n@@ -2395,6 +2397,8 @@ of GNAT specific extensions are recognized as follows:\n   name, preference is given to the component in a selected_component\n   (as is currently the case for tagged types with such component names).\n \n+  An Extensions_Allowed pragma argument of \"On\" enables this extension.\n+\n * Expression defaults for generic formal functions\n \n   The declaration of a generic formal function is allowed to specify"}, {"sha": "49cfc7477af282e6e8e3edd63ffdf0e786a1e2c9", "filename": "gcc/ada/doc/gnat_ugn/building_executable_programs_with_gnat.rst", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst?ref=1e78b49adb52ccf9493515ae002d87f3af1f5de9", "patch": "@@ -2180,7 +2180,13 @@ Alphabetical List of All Switches\n .. index:: -gnatX  (gcc)\n \n :switch:`-gnatX`\n-  Enable GNAT implementation extensions and latest Ada version.\n+  Enable core GNAT implementation extensions and latest Ada version.\n+\n+\n+.. index:: -gnatX0  (gcc)\n+\n+:switch:`-gnatX0`\n+  Enable all GNAT implementation extensions and latest Ada version.\n \n \n .. index:: -gnaty  (gcc)\n@@ -5585,16 +5591,27 @@ indicate Ada 83 compatibility mode.\n   language.\n \n \n-.. index:: -gnatX  (gcc)\n+.. index:: -gnatX0  (gcc)\n .. index:: Ada language extensions\n .. index:: GNAT extensions\n \n-:switch:`-gnatX` (Enable GNAT Extensions)\n+:switch:`-gnatX0` (Enable GNAT Extensions)\n   This switch directs the compiler to implement the latest version of the\n   language (currently Ada 2022) and also to enable certain GNAT implementation\n   extensions that are not part of any Ada standard. For a full list of these\n   extensions, see the GNAT reference manual, ``Pragma Extensions_Allowed``.\n \n+.. index:: -gnatX  (gcc)\n+.. index:: Ada language extensions\n+.. index:: GNAT extensions\n+\n+:switch:`-gnatX` (Enable core GNAT Extensions)\n+  This switch is similar to -gnatX0 except that only some, not all, of the\n+  GNAT-defined language extensions are enabled. For a list of the\n+  extensions enabled by this switch, see the GNAT reference manual\n+  ``Pragma Extensions_Allowed`` and the description of that pragma's\n+  \"On\" (as opposed to \"All\") argument.\n+\n \n .. _Character_Set_Control:\n "}, {"sha": "85931552970889db5961921b4434becf8a2d4b2f", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=1e78b49adb52ccf9493515ae002d87f3af1f5de9", "patch": "@@ -881,18 +881,40 @@ package body Errout is\n    -- Error_Msg_GNAT_Extension --\n    ------------------------------\n \n-   procedure Error_Msg_GNAT_Extension (Extension : String; Loc : Source_Ptr) is\n+   procedure Error_Msg_GNAT_Extension\n+     (Extension : String;\n+      Loc : Source_Ptr;\n+      Is_Core_Extension : Boolean := False)\n+   is\n    begin\n-      if not Extensions_Allowed then\n-         Error_Msg (Extension & \" is a 'G'N'A'T-specific extension\", Loc);\n+      if (if Is_Core_Extension\n+           then Core_Extensions_Allowed\n+           else All_Extensions_Allowed)\n+      then\n+         return;\n+      end if;\n \n-         if No (Ada_Version_Pragma) then\n-            Error_Msg (\"\\unit must be compiled with -gnatX \"\n-                       & \"or use pragma Extensions_Allowed (On)\", Loc);\n+      Error_Msg (Extension & \" is a 'G'N'A'T-specific extension\", Loc);\n+\n+      if No (Ada_Version_Pragma) then\n+         if Is_Core_Extension then\n+            Error_Msg\n+              (\"\\unit must be compiled with -gnatX '[or -gnatX0'] \" &\n+               \"or use pragma Extensions_Allowed (On) '[or All']\", Loc);\n          else\n-            Error_Msg_Sloc := Sloc (Ada_Version_Pragma);\n-            Error_Msg (\"\\incompatible with Ada version set#\", Loc);\n-            Error_Msg (\"\\must use pragma Extensions_Allowed (On)\", Loc);\n+            Error_Msg\n+              (\"\\unit must be compiled with -gnatX0 \" &\n+               \"or use pragma Extensions_Allowed (All)\", Loc);\n+         end if;\n+      else\n+         Error_Msg_Sloc := Sloc (Ada_Version_Pragma);\n+         Error_Msg (\"\\incompatible with Ada version set#\", Loc);\n+         if Is_Core_Extension then\n+            Error_Msg\n+              (\"\\must use pragma Extensions_Allowed (On) '[or All']\", Loc);\n+         else\n+            Error_Msg\n+              (\"\\must use pragma Extensions_Allowed (All)\", Loc);\n          end if;\n       end if;\n    end Error_Msg_GNAT_Extension;"}, {"sha": "78fe51482ac4ba6d9aa1f7aa332c2f5509888d78", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=1e78b49adb52ccf9493515ae002d87f3af1f5de9", "patch": "@@ -937,11 +937,18 @@ package Errout is\n    procedure Error_Msg_Ada_2022_Feature (Feature : String; Loc : Source_Ptr);\n    --  Analogous to Error_Msg_Ada_2012_Feature, for Ada 2022\n \n-   procedure Error_Msg_GNAT_Extension (Extension : String; Loc : Source_Ptr);\n-   --  If not operating with extensions allowed, posts errors complaining\n-   --  that Extension is only supported when the -gnatX switch is enabled\n-   --  or pragma Extensions_Allowed (On) is used. Loc indicates the source\n-   --  location of the extension construct.\n+   procedure Error_Msg_GNAT_Extension\n+    (Extension         : String;\n+     Loc               : Source_Ptr;\n+     Is_Core_Extension : Boolean := False);\n+   --  To be called as part of checking a GNAT language extension (either a\n+   --  core extension or not, as indicated by the Is_Core_Extension parameter).\n+   --  If switch -gnatX0 or pragma Extension_Allowed (All) is in effect, then\n+   --  either kind of extension is allowed; if switch -gnatX or pragma\n+   --  Extensions_Allowed (On) is in effect, then only core extensions are\n+   --  allowed. Otherwise, no extensions are allowed. A disallowed construct\n+   --  is flagged as an error. Loc indicates the source location of the\n+   --  extension construct.\n \n    procedure dmsg (Id : Error_Msg_Id) renames Erroutc.dmsg;\n    --  Debugging routine to dump an error message"}, {"sha": "1dbbff9e0e473b51f59c1908ddf4cbac3313b332", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=1e78b49adb52ccf9493515ae002d87f3af1f5de9", "patch": "@@ -3939,7 +3939,9 @@ package body Exp_Ch5 is\n    --  Start of processing for Expand_N_Case_Statement\n \n    begin\n-      if Extensions_Allowed and then not Is_Discrete_Type (Etype (Expr)) then\n+      if Core_Extensions_Allowed\n+        and then not Is_Discrete_Type (Etype (Expr))\n+      then\n          Rewrite (N, Expand_General_Case_Statement);\n          Analyze (N);\n          return;"}, {"sha": "adcb09b106b61c1fd1d38e9ccdfad8e048bb17e5", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=1e78b49adb52ccf9493515ae002d87f3af1f5de9", "patch": "@@ -3608,16 +3608,19 @@ GNAT User\u2019s Guide.\n Syntax:\n \n @example\n-pragma Extensions_Allowed (On | Off);\n+pragma Extensions_Allowed (On | Off | All);\n @end example\n \n-This configuration pragma enables or disables the implementation\n-extension mode (the use of Off as a parameter cancels the effect\n-of the `-gnatX' command switch).\n+This configuration pragma enables (via the \u201cOn\u201d or \u201cAll\u201d argument) or disables\n+(via the \u201cOff\u201d argument) the implementation extension mode; the pragma takes\n+precedence over the `-gnatX' and `-gnatX0' command switches.\n \n-In extension mode, the latest version of the Ada language is\n-implemented (currently Ada 2022), and in addition a number\n-of GNAT specific extensions are recognized as follows:\n+If an argument of \u201cAll\u201d is specified, the latest version of the Ada language\n+is implemented (currently Ada 2022) and, in addition, a number\n+of GNAT specific extensions are recognized. These extensions are listed\n+below. An argument of \u201cOn\u201d has the same effect except that only\n+some, not all, of the listed extensions are enabled; those extensions\n+are identified below.\n \n \n @itemize *\n@@ -3636,12 +3639,6 @@ The Ada 202x @code{Static} aspect can be specified on Intrinsic imported\n functions and the compiler will evaluate some of these intrinsic statically,\n in particular the @code{Shift_Left} and @code{Shift_Right} intrinsics.\n \n-@item \n-@code{'Reduce} attribute\n-\n-This attribute part of the Ada 202x language definition is provided for\n-now under -gnatX to confirm and potentially refine its usage and syntax.\n-\n @item \n @code{[]} aggregates\n \n@@ -3785,6 +3782,8 @@ define the same set of bindings and the component subtypes for\n for a given identifer must all statically match. Currently, the case\n of a binding for a nondiscrete component is not implemented.\n \n+An Extensions_Allowed pragma argument of \u201cOn\u201d enables this extension.\n+\n @item \n Fixed lower bounds for array types and subtypes\n \n@@ -3833,6 +3832,8 @@ improve the efficiency of indexing operations, since the compiler statically\n knows the lower bound of unconstrained array formals when the formal\u2019s\n subtype has index ranges with static fixed lower bounds.\n \n+An Extensions_Allowed pragma argument of \u201cOn\u201d enables this extension.\n+\n @item \n Prefixed-view notation for calls to primitive subprograms of untagged types\n \n@@ -3851,6 +3852,8 @@ component is visible at the point of a selected_component using that\n name, preference is given to the component in a selected_component\n (as is currently the case for tagged types with such component names).\n \n+An Extensions_Allowed pragma argument of \u201cOn\u201d enables this extension.\n+\n @item \n Expression defaults for generic formal functions\n "}, {"sha": "513ab1e4e94f895f41d4907c67b292c3454bef91", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=1e78b49adb52ccf9493515ae002d87f3af1f5de9", "patch": "@@ -9881,7 +9881,17 @@ Suppress generation of cross-reference information.\n \n @item @code{-gnatX}\n \n-Enable GNAT implementation extensions and latest Ada version.\n+Enable core GNAT implementation extensions and latest Ada version.\n+@end table\n+\n+@geindex -gnatX0 (gcc)\n+\n+\n+@table @asis\n+\n+@item @code{-gnatX0}\n+\n+Enable all GNAT implementation extensions and latest Ada version.\n @end table\n \n @geindex -gnaty (gcc)\n@@ -14416,7 +14426,7 @@ This switch directs the compiler to implement the Ada 2022 version of the\n language.\n @end table\n \n-@geindex -gnatX (gcc)\n+@geindex -gnatX0 (gcc)\n \n @geindex Ada language extensions\n \n@@ -14425,14 +14435,32 @@ language.\n \n @table @asis\n \n-@item @code{-gnatX} (Enable GNAT Extensions)\n+@item @code{-gnatX0} (Enable GNAT Extensions)\n \n This switch directs the compiler to implement the latest version of the\n language (currently Ada 2022) and also to enable certain GNAT implementation\n extensions that are not part of any Ada standard. For a full list of these\n extensions, see the GNAT reference manual, @code{Pragma Extensions_Allowed}.\n @end table\n \n+@geindex -gnatX (gcc)\n+\n+@geindex Ada language extensions\n+\n+@geindex GNAT extensions\n+\n+\n+@table @asis\n+\n+@item @code{-gnatX} (Enable core GNAT Extensions)\n+\n+This switch is similar to -gnatX0 except that only some, not all, of the\n+GNAT-defined language extensions are enabled. For a list of the\n+extensions enabled by this switch, see the GNAT reference manual\n+@code{Pragma Extensions_Allowed} and the description of that pragma\u2019s\n+\u201cOn\u201d (as opposed to \u201cAll\u201d) argument.\n+@end table\n+\n @node Character Set Control,File Naming Control,Compiling Different Versions of Ada,Compiler Switches\n @anchor{gnat_ugn/building_executable_programs_with_gnat character-set-control}@anchor{31}@anchor{gnat_ugn/building_executable_programs_with_gnat id23}@anchor{fb}\n @subsection Character Set Control"}, {"sha": "9eb792e281cd66e953ad0f913ba8208ad0964d26", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=1e78b49adb52ccf9493515ae002d87f3af1f5de9", "patch": "@@ -73,15 +73,16 @@ package Opt is\n    --  Ada_xxx) or generate an error (in case of -gnat83/95/xx switches).\n \n    type Ada_Version_Type is\n-     (Ada_83, Ada_95, Ada_2005, Ada_2012, Ada_2022, Ada_With_Extensions);\n+     (Ada_83, Ada_95, Ada_2005, Ada_2012, Ada_2022,\n+      Ada_With_Core_Extensions, Ada_With_All_Extensions);\n    pragma Ordered (Ada_Version_Type);\n    pragma Convention (C, Ada_Version_Type);\n    --  Versions of Ada for Ada_Version below. Note that these are ordered,\n    --  so that tests like Ada_Version >= Ada_95 are legitimate and useful.\n    --  Think twice before using \"=\"; Ada_Version >= Ada_2012 is more likely\n    --  what you want, because it will apply to future versions of the language.\n-   --  Note that Ada_With_Extensions should always be last since it should\n-   --  always be a superset of the latest Ada version.\n+   --  Note that Ada_With_All_Extensions should always be last since it should\n+   --  always be a superset of the other Ada versions.\n \n    --  WARNING: There is a matching C declaration of this type in fe.h\n \n@@ -111,7 +112,7 @@ package Opt is\n    --  remains set to Ada_Version_Default). This is used in the rare cases\n    --  (notably pragma Obsolescent) where we want the explicit version set.\n \n-   Ada_Version_Runtime : Ada_Version_Type := Ada_With_Extensions;\n+   Ada_Version_Runtime : Ada_Version_Type := Ada_With_All_Extensions;\n    --  GNAT\n    --  Ada version used to compile the runtime. Used to set Ada_Version (but\n    --  not Ada_Version_Explicit) when compiling predefined or internal units.\n@@ -630,11 +631,16 @@ package Opt is\n    --  Set to True to convert nonbinary modular additions into code\n    --  that relies on the front-end expansion of operator Mod.\n \n-   function Extensions_Allowed return Boolean is\n-     (Ada_Version = Ada_With_Extensions);\n+   function All_Extensions_Allowed return Boolean is\n+     (Ada_Version = Ada_With_All_Extensions);\n    --  True if GNAT specific language extensions are allowed. See GNAT RM for\n    --  details.\n \n+   function Core_Extensions_Allowed return Boolean is\n+     (Ada_Version >= Ada_With_Core_Extensions);\n+   --  True if some but not all GNAT specific language extensions are allowed.\n+   --  See GNAT RM for details.\n+\n    type External_Casing_Type is (\n      As_Is,       -- External names cased as they appear in the Ada source\n      Uppercase,   -- External names forced to all uppercase letters"}, {"sha": "aac45890c97c71f7556eaaba83bbb49aeaf10549", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=1e78b49adb52ccf9493515ae002d87f3af1f5de9", "patch": "@@ -2839,7 +2839,8 @@ package body Ch3 is\n             else\n                P_Index_Subtype_Def_With_Fixed_Lower_Bound (Subtype_Mark_Node);\n \n-               Error_Msg_GNAT_Extension (\"fixed-lower-bound array\", Token_Ptr);\n+               Error_Msg_GNAT_Extension (\"fixed-lower-bound array\", Token_Ptr,\n+                                         Is_Core_Extension => True);\n             end if;\n \n             exit when Token in Tok_Right_Paren | Tok_Of;\n@@ -2909,7 +2910,8 @@ package body Ch3 is\n                        (Subtype_Mark_Node);\n \n                      Error_Msg_GNAT_Extension\n-                       (\"fixed-lower-bound array\", Token_Ptr);\n+                       (\"fixed-lower-bound array\", Token_Ptr,\n+                        Is_Core_Extension => True);\n                   end if;\n \n                   exit when Token in Tok_Right_Paren | Tok_Of;\n@@ -3412,7 +3414,8 @@ package body Ch3 is\n             --  later during analysis), and scan to the next token.\n \n             if Token = Tok_Box then\n-               Error_Msg_GNAT_Extension (\"fixed-lower-bound array\", Token_Ptr);\n+               Error_Msg_GNAT_Extension (\"fixed-lower-bound array\", Token_Ptr,\n+                                         Is_Core_Extension => True);\n \n                Expr_Node := Empty;\n                Scan;"}, {"sha": "82b09b29bea0afd8b8a4f6394ed1402684b108e1", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=1e78b49adb52ccf9493515ae002d87f3af1f5de9", "patch": "@@ -1775,7 +1775,7 @@ package body Ch4 is\n             if Token = Tok_Identifier then\n                Id := P_Defining_Identifier;\n                if Token = Tok_Greater then\n-                  if Extensions_Allowed then\n+                  if Core_Extensions_Allowed then\n                      Set_Box_Present (Assoc_Node);\n                      Set_Binding_Chars (Assoc_Node, Chars (Id));\n                      Box_Present := True;\n@@ -1813,7 +1813,7 @@ package body Ch4 is\n             if Token = Tok_Identifier then\n                Id := P_Defining_Identifier;\n \n-               if not Extensions_Allowed then\n+               if not Core_Extensions_Allowed then\n                   Error_Msg_GNAT_Extension\n                     (\"IS following component association\", Token_Ptr);\n                elsif Box_With_Identifier_Present then"}, {"sha": "0adb702740becc46d69585cc2964c3ee1e4959a0", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=1e78b49adb52ccf9493515ae002d87f3af1f5de9", "patch": "@@ -73,10 +73,12 @@ function Prag (Pragma_Node : Node_Id; Semi : Source_Ptr) return Node_Id is\n    --  Check the expression of the specified argument to make sure that it\n    --  is a string literal. If not give error and raise Error_Resync.\n \n-   procedure Check_Arg_Is_On_Or_Off (Arg : Node_Id);\n+   procedure Check_Arg_Is_On_Or_Off\n+     (Arg : Node_Id; All_OK_Too : Boolean := False);\n    --  Check the expression of the specified argument to make sure that it\n    --  is an identifier which is either ON or OFF, and if not, then issue\n-   --  an error message and raise Error_Resync.\n+   --  an error message and raise Error_Resync. If All_OK_Too is True,\n+   --  then an ALL identifer is also acceptable.\n \n    procedure Check_No_Identifier (Arg : Node_Id);\n    --  Checks that the given argument does not have an identifier. If\n@@ -167,17 +169,26 @@ function Prag (Pragma_Node : Node_Id; Semi : Source_Ptr) return Node_Id is\n    -- Check_Arg_Is_On_Or_Off --\n    ----------------------------\n \n-   procedure Check_Arg_Is_On_Or_Off (Arg : Node_Id) is\n+   procedure Check_Arg_Is_On_Or_Off\n+     (Arg : Node_Id; All_OK_Too : Boolean := False)\n+   is\n       Argx : constant Node_Id := Expression (Arg);\n-\n+      Error : Boolean := Nkind (Expression (Arg)) /= N_Identifier;\n    begin\n-      if Nkind (Expression (Arg)) /= N_Identifier\n-        or else Chars (Argx) not in Name_On | Name_Off\n-      then\n+      if not Error then\n+         Error := (Chars (Argx) not in Name_On | Name_Off)\n+           and then not (All_OK_Too and Chars (Argx) = Name_All);\n+      end if;\n+      if Error then\n          Error_Msg_Name_2 := Name_On;\n          Error_Msg_Name_3 := Name_Off;\n \n-         Error_Msg_N (\"argument for pragma% must be% or%\", Argx);\n+         if All_OK_Too then\n+            Error_Msg_Name_4 := Name_All;\n+            Error_Msg_N (\"argument for pragma% must be% or% or%\", Argx);\n+         else\n+            Error_Msg_N (\"argument for pragma% must be% or%\", Argx);\n+         end if;\n          raise Error_Resync;\n       end if;\n    end Check_Arg_Is_On_Or_Off;\n@@ -414,18 +425,20 @@ begin\n       -- Extensions_Allowed (GNAT) --\n       -------------------------------\n \n-      --  pragma Extensions_Allowed (Off | On)\n+      --  pragma Extensions_Allowed (Off | On | All)\n \n       --  The processing for pragma Extensions_Allowed must be done at\n       --  parse time, since extensions mode may affect what is accepted.\n \n       when Pragma_Extensions_Allowed =>\n          Check_Arg_Count (1);\n          Check_No_Identifier (Arg1);\n-         Check_Arg_Is_On_Or_Off (Arg1);\n+         Check_Arg_Is_On_Or_Off (Arg1, All_OK_Too => True);\n \n          if Chars (Expression (Arg1)) = Name_On then\n-            Ada_Version := Ada_With_Extensions;\n+            Ada_Version := Ada_With_Core_Extensions;\n+         elsif Chars (Expression (Arg1)) = Name_All then\n+            Ada_Version := Ada_With_All_Extensions;\n          else\n             Ada_Version := Ada_Version_Explicit;\n          end if;"}, {"sha": "d518aca37584374cf08730a18c90e8c34e55ae6a", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=1e78b49adb52ccf9493515ae002d87f3af1f5de9", "patch": "@@ -3888,7 +3888,7 @@ package body Sem_Attr is\n \n             elsif (Is_Generic_Type (P_Type)\n                     or else Is_Generic_Actual_Type (P_Type))\n-              and then Extensions_Allowed\n+              and then All_Extensions_Allowed\n             then\n                return;\n             end if;"}, {"sha": "5042c9ecab0f3053e4205fe80189025552fe9eb5", "filename": "gcc/ada/sem_case.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fsem_case.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fsem_case.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_case.adb?ref=1e78b49adb52ccf9493515ae002d87f3af1f5de9", "patch": "@@ -3581,7 +3581,7 @@ package body Sem_Case is\n \n             --  Hold on, maybe it isn't a complete mess after all.\n \n-            if Extensions_Allowed and then Subtyp /= Any_Type then\n+            if Core_Extensions_Allowed and then Subtyp /= Any_Type then\n                Check_Composite_Case_Selector;\n                Check_Case_Pattern_Choices;\n             end if;\n@@ -3864,7 +3864,7 @@ package body Sem_Case is\n    function Is_Case_Choice_Pattern (Expr : Node_Id) return Boolean is\n       E : Node_Id := Expr;\n    begin\n-      if not Extensions_Allowed then\n+      if not Core_Extensions_Allowed then\n          return False;\n       end if;\n "}, {"sha": "0dea4d4f03d6657cf3f2864489e607241f05e7cb", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=1e78b49adb52ccf9493515ae002d87f3af1f5de9", "patch": "@@ -2399,9 +2399,9 @@ package body Sem_Ch13 is\n \n                if not Is_Expression_Function (E)\n                  and then\n-                   not (Extensions_Allowed and then Is_Imported_Intrinsic)\n+                   not (All_Extensions_Allowed and then Is_Imported_Intrinsic)\n                then\n-                  if Extensions_Allowed then\n+                  if All_Extensions_Allowed then\n                      Error_Msg_N\n                        (\"aspect % requires intrinsic or expression function\",\n                         Aspect);\n@@ -4212,7 +4212,7 @@ package body Sem_Ch13 is\n                   goto Continue;\n \n                when Aspect_Designated_Storage_Model =>\n-                  if not Extensions_Allowed then\n+                  if not All_Extensions_Allowed then\n                      Error_Msg_GNAT_Extension (\"aspect %\", Sloc (Aspect));\n \n                   elsif not Is_Type (E)\n@@ -4227,7 +4227,7 @@ package body Sem_Ch13 is\n                   goto Continue;\n \n                when Aspect_Storage_Model_Type =>\n-                  if not Extensions_Allowed then\n+                  if not All_Extensions_Allowed then\n                      Error_Msg_GNAT_Extension (\"aspect %\", Sloc (Aspect));\n \n                   elsif not Is_Type (E)"}, {"sha": "766290144ab943cf0b757bfbf78b42a17dc2e3ac", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=1e78b49adb52ccf9493515ae002d87f3af1f5de9", "patch": "@@ -3519,7 +3519,7 @@ package body Sem_Ch3 is\n       --  Initialize the list of primitive operations to an empty list,\n       --  to cover tagged types as well as untagged types. For untagged\n       --  types this is used either to analyze the call as legal when\n-      --  Extensions_Allowed is True, or to issue a better error message\n+      --  Core_Extensions_Allowed is True, or to issue a better error message\n       --  otherwise.\n \n       Set_Direct_Primitive_Operations (T, New_Elmt_List);\n@@ -5730,7 +5730,7 @@ package body Sem_Ch3 is\n                   --  operations to an empty list.\n \n                   if Is_Tagged_Type (Id)\n-                    or else Extensions_Allowed\n+                    or else Core_Extensions_Allowed\n                   then\n                      Set_Direct_Primitive_Operations (Id, New_Elmt_List);\n                   end if;"}, {"sha": "f136e9715d7c8a013655c90af9c7c65bb80fef48", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=1e78b49adb52ccf9493515ae002d87f3af1f5de9", "patch": "@@ -5423,7 +5423,8 @@ package body Sem_Ch4 is\n          --  untagged record types.\n \n          if Ada_Version >= Ada_2005\n-           and then (Is_Tagged_Type (Prefix_Type) or else Extensions_Allowed)\n+           and then (Is_Tagged_Type (Prefix_Type)\n+                       or else Core_Extensions_Allowed)\n            and then not Is_Concurrent_Type (Prefix_Type)\n          then\n             if Nkind (Parent (N)) = N_Generic_Association\n@@ -5499,7 +5500,7 @@ package body Sem_Ch4 is\n          --  Extension feature: Also support calls with prefixed views for\n          --  untagged private types.\n \n-         if Extensions_Allowed then\n+         if Core_Extensions_Allowed then\n             if Try_Object_Operation (N) then\n                return;\n             end if;\n@@ -5760,7 +5761,7 @@ package body Sem_Ch4 is\n       --  Extension feature: Also support calls with prefixed views for\n       --  untagged types.\n \n-      elsif Extensions_Allowed\n+      elsif Core_Extensions_Allowed\n         and then Try_Object_Operation (N)\n       then\n          return;\n@@ -9862,7 +9863,7 @@ package body Sem_Ch4 is\n \n          if (not Is_Tagged_Type (Obj_Type)\n               and then\n-                (not (Extensions_Allowed or Allow_Extensions)\n+                (not (Core_Extensions_Allowed or Allow_Extensions)\n                   or else not Present (Primitive_Operations (Obj_Type))))\n            or else Is_Incomplete_Type (Obj_Type)\n          then\n@@ -9891,7 +9892,7 @@ package body Sem_Ch4 is\n                --  have homographic prefixed-view operations that could result\n                --  in an ambiguity, but handling properly may be tricky. ???)\n \n-               if (Extensions_Allowed or Allow_Extensions)\n+               if (Core_Extensions_Allowed or Allow_Extensions)\n                  and then not Prim_Result\n                  and then Is_Named_Access_Type (Prev_Obj_Type)\n                  and then Present (Direct_Primitive_Operations (Prev_Obj_Type))"}, {"sha": "ac4952311564148e2cf5b2927718e559e0607db7", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=1e78b49adb52ccf9493515ae002d87f3af1f5de9", "patch": "@@ -1614,7 +1614,7 @@ package body Sem_Ch5 is\n       --  out non-discretes may resolve the ambiguity.\n       --  But GNAT extensions allow casing on non-discretes.\n \n-      elsif Extensions_Allowed and then Is_Overloaded (Exp) then\n+      elsif Core_Extensions_Allowed and then Is_Overloaded (Exp) then\n \n          --  It would be nice if we could generate all the right error\n          --  messages by calling \"Resolve (Exp, Any_Type);\" in the\n@@ -1632,7 +1632,7 @@ package body Sem_Ch5 is\n       --  Check for a GNAT-extension \"general\" case statement (i.e., one where\n       --  the type of the selecting expression is not discrete).\n \n-      elsif Extensions_Allowed\n+      elsif Core_Extensions_Allowed\n          and then not Is_Discrete_Type (Etype (Exp))\n       then\n          Resolve (Exp, Etype (Exp));\n@@ -1670,7 +1670,7 @@ package body Sem_Ch5 is\n            (\"(Ada 83) case expression cannot be of a generic type\", Exp);\n          return;\n \n-      elsif not Extensions_Allowed\n+      elsif not Core_Extensions_Allowed\n         and then not Is_Discrete_Type (Exp_Type)\n       then\n          Error_Msg_N"}, {"sha": "c4812e2a563f64fe78c41a513012676b1947295c", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=1e78b49adb52ccf9493515ae002d87f3af1f5de9", "patch": "@@ -7918,7 +7918,7 @@ package body Sem_Ch8 is\n \n          if Is_Type (P_Type)\n            and then (Has_Components (P_Type)\n-                      or else (Extensions_Allowed\n+                      or else (Core_Extensions_Allowed\n                                 and then not Is_Concurrent_Type (P_Type)))\n            and then not Is_Overloadable (P_Name)\n            and then not Is_Type (P_Name)\n@@ -8173,7 +8173,7 @@ package body Sem_Ch8 is\n                        (\"prefixed call is only allowed for objects of a \"\n                         & \"tagged type unless -gnatX is used\", N);\n \n-                     if not Extensions_Allowed\n+                     if not Core_Extensions_Allowed\n                        and then\n                          Try_Object_Operation (N, Allow_Extensions => True)\n                      then"}, {"sha": "6339cfe3b04957de46a4fea6ba7fcc1782ac0c3e", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=1e78b49adb52ccf9493515ae002d87f3af1f5de9", "patch": "@@ -2859,7 +2859,7 @@ package body Sem_Eval is\n       --  Intrinsic calls as part of a static function is a language extension.\n \n       if Checking_Potentially_Static_Expression\n-        and then not Extensions_Allowed\n+        and then not All_Extensions_Allowed\n       then\n          return;\n       end if;"}, {"sha": "cdf4cbcccd4258f658172ce5d605cb7784313991", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=1e78b49adb52ccf9493515ae002d87f3af1f5de9", "patch": "@@ -16595,16 +16595,18 @@ package body Sem_Prag is\n          -- Extensions_Allowed --\n          ------------------------\n \n-         --  pragma Extensions_Allowed (ON | OFF);\n+         --  pragma Extensions_Allowed (ON | OFF | ALL);\n \n          when Pragma_Extensions_Allowed =>\n             GNAT_Pragma;\n             Check_Arg_Count (1);\n             Check_No_Identifiers;\n-            Check_Arg_Is_One_Of (Arg1, Name_On, Name_Off);\n+            Check_Arg_Is_One_Of (Arg1, Name_On, Name_Off, Name_All);\n \n             if Chars (Get_Pragma_Arg (Arg1)) = Name_On then\n-               Ada_Version := Ada_With_Extensions;\n+               Ada_Version := Ada_With_Core_Extensions;\n+            elsif Chars (Get_Pragma_Arg (Arg1)) = Name_All then\n+               Ada_Version := Ada_With_All_Extensions;\n             else\n                Ada_Version := Ada_Version_Explicit;\n                Ada_Version_Pragma := Empty;"}, {"sha": "2736286d60d23d77c67e5dd77345338483bee81d", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=1e78b49adb52ccf9493515ae002d87f3af1f5de9", "patch": "@@ -3195,7 +3195,7 @@ package body Sem_Util is\n       Actual : Node_Id;\n \n    begin\n-      if Extensions_Allowed then\n+      if All_Extensions_Allowed then\n          Actual := First_Actual (Call);\n          while Present (Actual) loop\n             if Nkind (Actual) = N_Aggregate then"}, {"sha": "a1a877716f0371a4ebe578dd4f0544af02fc8b2d", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e78b49adb52ccf9493515ae002d87f3af1f5de9/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=1e78b49adb52ccf9493515ae002d87f3af1f5de9", "patch": "@@ -1391,12 +1391,21 @@ package body Switch.C is\n                Ptr := Ptr + 1;\n                Xref_Active := False;\n \n-            --  -gnatX (language extensions)\n+            --  -gnatX (core language extensions)\n \n             when 'X' =>\n                Ptr := Ptr + 1;\n-               Ada_Version          := Ada_With_Extensions;\n-               Ada_Version_Explicit := Ada_With_Extensions;\n+\n+               if Ptr <= Max and then Switch_Chars (Ptr) = '0' then\n+                  --  -gnatX0 (all language extensions)\n+\n+                  Ptr := Ptr + 1;\n+                  Ada_Version := Ada_With_All_Extensions;\n+               else\n+                  Ada_Version := Ada_With_Core_Extensions;\n+               end if;\n+\n+               Ada_Version_Explicit := Ada_Version;\n                Ada_Version_Pragma   := Empty;\n \n             --  -gnaty (style checks)"}]}