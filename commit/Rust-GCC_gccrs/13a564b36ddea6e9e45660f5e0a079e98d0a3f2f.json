{"sha": "13a564b36ddea6e9e45660f5e0a079e98d0a3f2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNhNTY0YjM2ZGRlYTZlOWU0NTY2MGY1ZTBhMDc5ZTk4ZDBhM2YyZg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-05-02T14:23:21Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-05-02T14:23:21Z"}, "message": "2003-05-02  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/URI.java\n\t(create): Doesnt throws any exceptions.\n\t* java/net/URLConnection.java\n\t(URLConnection): Commend added.\n\t(getExpiration): The header field is called \"expires\" not\n\t\"expiration\".\n\t(getHeaderField): Merged documentation with classpath.\n\t(getHeaderFieldInt): Likewise.\n\t(getHeaderFieldDate): Likewise.\n\t(getHeaderFieldKey): Likewise.\n\t(getPermission): Likewise.\n\t(setDefaultUseCaches): Likewise.\n\t(setRequestProperty): Likewise.\n\t(addRequestProperty): Likewise.\n\t(getRequestProperty): Likewise.\n\t(getRequestProperties): Likewise.\n\t(setDefaultRequestProperty): Likewise.\n\t(getDefaultRequestProperty): Likewise.\n\t(guessContentTypeFromStream): Likewise.\n\t(getFileNameMap): Likewise.\n\t(setFileNameMap): Likewise.\n\t(setDoInput): Merged implementation and documentation with classpath.\n\t(setDoOutput): Likewise.\n\t(setAllowUserInteraction): Likewise.\n\t(setDefaultAllowUserInteraction): Likewise.\n\t(setContentHandlerFactory): Made it synchronized, merged documentation\n\twith classpath.\n\t(guessContentTypeFromName): Renamed argument fname to filename to\n\tmatch classpath, merged documentation with classpath.\n\nFrom-SVN: r66384", "tree": {"sha": "7df55d7e034c369ea856b464cd853664ce8751a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7df55d7e034c369ea856b464cd853664ce8751a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13a564b36ddea6e9e45660f5e0a079e98d0a3f2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13a564b36ddea6e9e45660f5e0a079e98d0a3f2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13a564b36ddea6e9e45660f5e0a079e98d0a3f2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13a564b36ddea6e9e45660f5e0a079e98d0a3f2f/comments", "author": null, "committer": null, "parents": [{"sha": "e79498768f45a4021b4d6f518958c0dc0accc4dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e79498768f45a4021b4d6f518958c0dc0accc4dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e79498768f45a4021b4d6f518958c0dc0accc4dd"}], "stats": {"total": 188, "additions": 128, "deletions": 60}, "files": [{"sha": "7a62c156e79fe93d331c63cff17d1fa5ff93bc8f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13a564b36ddea6e9e45660f5e0a079e98d0a3f2f/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13a564b36ddea6e9e45660f5e0a079e98d0a3f2f/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=13a564b36ddea6e9e45660f5e0a079e98d0a3f2f", "patch": "@@ -1,3 +1,35 @@\n+2003-05-02  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/URI.java\n+\t(create): Doesnt throws any exceptions.\n+\t* java/net/URLConnection.java\n+\t(URLConnection): Commend added.\n+\t(getExpiration): The header field is called \"expires\" not\n+\t\"expiration\".\n+\t(getHeaderField): Merged documentation with classpath.\n+\t(getHeaderFieldInt): Likewise.\n+\t(getHeaderFieldDate): Likewise.\n+\t(getHeaderFieldKey): Likewise.\n+\t(getPermission): Likewise.\n+\t(setDefaultUseCaches): Likewise.\n+\t(setRequestProperty): Likewise.\n+\t(addRequestProperty): Likewise.\n+\t(getRequestProperty): Likewise.\n+\t(getRequestProperties): Likewise.\n+\t(setDefaultRequestProperty): Likewise.\n+\t(getDefaultRequestProperty): Likewise.\n+\t(guessContentTypeFromStream): Likewise.\n+\t(getFileNameMap): Likewise.\n+\t(setFileNameMap): Likewise.\n+\t(setDoInput): Merged implementation and documentation with classpath.\n+\t(setDoOutput): Likewise.\n+\t(setAllowUserInteraction): Likewise.\n+\t(setDefaultAllowUserInteraction): Likewise.\n+\t(setContentHandlerFactory): Made it synchronized, merged documentation\n+\twith classpath.\n+\t(guessContentTypeFromName): Renamed argument fname to filename to\n+\tmatch classpath, merged documentation with classpath.\n+\n 2003-05-02  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/JarURLConnection.java"}, {"sha": "2065cad314cc93499fa156cd155a616417107290", "filename": "libjava/java/net/URLConnection.java", "status": "modified", "additions": 96, "deletions": 60, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13a564b36ddea6e9e45660f5e0a079e98d0a3f2f/libjava%2Fjava%2Fnet%2FURLConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13a564b36ddea6e9e45660f5e0a079e98d0a3f2f/libjava%2Fjava%2Fnet%2FURLConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLConnection.java?ref=13a564b36ddea6e9e45660f5e0a079e98d0a3f2f", "patch": "@@ -180,6 +180,7 @@\n    */\n   protected URLConnection(URL url)\n   {\n+    // Set up all our instance variables\n     this.url = url;\n     allowUserInteraction = defaultAllowUserInteraction;\n     useCaches = defaultUseCaches;\n@@ -247,7 +248,7 @@ public String getContentEncoding()\n    */\n   public long getExpiration()\n   {\n-    return getHeaderFieldDate(\"expiration\", 0L);\n+    return getHeaderFieldDate(\"expires\", 0L);\n   }\n \n   /**\n@@ -276,11 +277,16 @@ public long getLastModified()\n   }\n \n   /**\n-   * Returns the value of the n-th header field\n+   * Return a String representing the header value at the specified index.\n+   * This allows the caller to walk the list of header fields.  The analogous\n+   * getHeaderFieldKey(int) method allows access to the corresponding key\n+   * for this header field\n+   *\n+   * @param index The index into the header field list to retrieve the value for\n    *\n-   * @param num The number of the header field\n+   * @return The header value or null if index is past the end of the headers\n    */\n-  public String getHeaderField(int num)\n+  public String getHeaderField(int index)\n   {\n     // Subclasses for specific protocols override this.\n     return null;\n@@ -290,7 +296,9 @@ public String getHeaderField(int num)\n    * Returns a String representing the value of the header field having\n    * the named key.  Returns null if the header field does not exist.\n    *\n-   * @param name The name of the header field\n+   * @param The key of the header field\n+   *\n+   * @return The value of the header field as a String\n    */\n   public String getHeaderField(String name)\n   {\n@@ -310,13 +318,15 @@ public Map getHeaderFields()\n   }\n \n   /**\n-   * Returns the value of the header filed name as int.\n+   * Returns the value of the named header field as an int.  If the field\n+   * is not present or cannot be parsed as an integer, the default value\n+   * will be returned.\n    *\n    * @param name The name of the header field\n    * @param val The default value\n    *\n-   * @return Returns the value of the header filed or the default value\n-   * if the field is missing or malformed\n+   * @return The value of the header field or the default value if the field\n+   * is missing or malformed\n    */\n   public int getHeaderFieldInt(String name, int val)\n   {\n@@ -334,8 +344,9 @@ public int getHeaderFieldInt(String name, int val)\n   }\n \n   /**\n-   * Returns the value of a header field parsed as date. The result is then\n-   * number of milliseconds since January 1st, 1970 GMT.\n+   * Returns the value of the named header field as a date.  This date will\n+   * be the number of seconds since midnight 1/1/1970 GMT or the default\n+   * value if the field is not present or cannot be converted to a date.\n    *\n    * @param name The name of the header field\n    * @param val The dafault date\n@@ -367,9 +378,12 @@ else if ((date = dateFormat3.parse(str, new ParsePosition(0))) != null)\n    * getHeaderField(int) method allows access to the corresponding value for\n    * this tag.\n    *\n-   * @param num The number of the header field\n+   * @param index The index into the header field list to retrieve the key for. \n+   *\n+   * @return The header field key or null if index is past the end\n+   * of the headers.\n    */\n-  public String getHeaderFieldKey(int num)\n+  public String getHeaderFieldKey(int index)\n   {\n     // Subclasses for specific protocols override this.\n     return null;\n@@ -432,6 +446,8 @@ public Object getContent(Class[] classes) throws IOException\n    * Note that because of items such as HTTP redirects, the permission\n    * object returned might be different before and after connecting.\n    *\n+   * @return A Permission object\n+   *\n    * @exception IOException If the computation of the permission requires\n    * network or file I/O and an exception occurs while computing it\n    */\n@@ -485,18 +501,20 @@ public String toString()\n   }\n \n   /**\n-   * Sets tha value of the doInput field.\n-   *\n+   * Returns the value of a flag indicating whether or not input is going\n+   * to be done for this connection.  This default to true unless the\n+   * doOutput flag is set to false, in which case this defaults to false.\n+   * \n    * @param doinput The new value of the doInput field\n    *\n    * @exception IllegalStateException If already connected\n    */\n-  public void setDoInput(boolean doinput)\n+  public void setDoInput(boolean input)\n   {\n     if (connected)\n       throw new IllegalStateException (\"Already connected\");\n \n-    doInput = doinput;\n+    doInput = input;\n   }\n \n   /**\n@@ -512,18 +530,20 @@ public boolean getDoInput()\n   }\n \n   /**\n-   * Sets the value of the doOutput field\n+   * Returns a boolean flag indicating whether or not output will be done\n+   * on this connection.  The default value is false, so this method can\n+   * be used to override the default\n    *\n-   * @param dooutput The new value of the doOutput field\n+   * @param output ture if output is to be done, false otherwise\n    *\n    * @exception IllegalStateException If already connected\n    */\n-  public void setDoOutput(boolean dooutput)\n+  public void setDoOutput(boolean output)\n   {\n     if (connected)\n       throw new IllegalStateException (\"Already connected\");\n \n-    doOutput = dooutput;\n+    doOutput = output;\n   }\n \n   /**\n@@ -542,16 +562,13 @@ public boolean getDoOutput()\n    * allowed for this connection.  (For example, in order to prompt for\n    * username and password info.\n    *\n-   * @param allowed The new value\n+   * @param allow true if user interaction should be allowed, false otherwise.\n    *\n    * @exception IllegalStateException If already connected\n    */\n-  public void setAllowUserInteraction(boolean allowed)\n+  public void setAllowUserInteraction(boolean allow)\n   {\n-    if (connected)\n-      throw new IllegalStateException (\"Already connected\");\n-\n-    allowUserInteraction = allowed;\n+    allowUserInteraction = allow;\n   }\n \n   /**\n@@ -570,11 +587,11 @@ public boolean getAllowUserInteraction()\n    * Sets the default flag for whether or not interaction with a user\n    * is allowed.  This will be used for all connections unless overridden\n    *\n-   * @param allowed The new default value\n+   * @param allow true to allow user interaction, false otherwise\n    */\n-  public static void setDefaultAllowUserInteraction(boolean allowed)\n+  public static void setDefaultAllowUserInteraction(boolean allow)\n   {\n-    defaultAllowUserInteraction = allowed;\n+    defaultAllowUserInteraction = allow;\n   }\n \n   /**\n@@ -661,16 +678,17 @@ public boolean getDefaultUseCaches()\n    * Sets the default value used to determine whether or not caching\n    * of documents will be done when possible.\n    *\n-   * @param defaultusecaches The new default value\n+   * @param use true to use caches if possible by default, false otherwise\n    */\n   public void setDefaultUseCaches(boolean defaultusecaches)\n   {\n     defaultUseCaches = defaultusecaches;\n   }\n \n   /**\n-   * Sets a property specified by key to value.\n-   * \n+   * Returns the default value used to determine whether or not caching\n+   * of documents will be done when possible.\n+   *\n    * @param key Key of the property to set\n    * @param value Value of the Property to set\n    *\n@@ -690,9 +708,8 @@ public void setRequestProperty(String key, String value)\n   }\n \n   /**\n-   * Sets a property specified by key to value. If the property key already\n-   * is assigned to a value it does nothing.\n-   * \n+   * Sets the value of the named request property\n+   *\n    * @param key Key of the property to add\n    * @param value Value of the Property to add\n    *\n@@ -716,16 +733,16 @@ public void addRequestProperty(String key, String value)\n   }\n \n   /**\n-   * Returns a property value specified by key.\n+   * Returns the value of the named request property.\n    *\n-   * @param key Key of the property to return\n+   * @param key The name of the property\n+   *\n+   * @return Value of the property\n    *\n    * @exception IllegalStateException If already connected\n    *\n    * @see URLConnection#setRequestProperty(String key, String value)\n    * @see URLConnection#addRequestProperty(String key, String value)\n-   * \n-   * @return Value of the property.\n    */\n   public String getRequestProperty(String key)\n   {\n@@ -738,11 +755,13 @@ public String getRequestProperty(String key)\n   }\n \n   /**\n-   * Returns a map that contains all properties of the request\n+   * Returns an unmodifiable Map containing the request properties.\n+   *\n+   * @return The map of properties\n    *\n    * @exception IllegalStateException If already connected\n    *\n-   * @return The map of properties\n+   * @since 1.4\n    */\n   public Map getRequestProperties()\n   {\n@@ -756,8 +775,8 @@ public Map getRequestProperties()\n    * for all connections unless the value of the property is manually\n    * overridden.\n    *\n-   * @param key The key of the property\n-   * @param value The value of the property\n+   * @param key The request property name the default is being set for\n+   * @param value The value to set the default to\n    *\n    * @deprecated 1.3 The method setRequestProperty should be used instead\n    *\n@@ -774,7 +793,7 @@ public static void setDefaultRequestProperty(String key, String value)\n    * for all connections unless the value of the property is manually\n    * overridden.\n    *\n-   * @param key The key of the default property\n+   * @param key The request property to return the default value of\n    *\n    * @return The value of the default property or null if not available\n    * \n@@ -794,13 +813,14 @@ public static String getDefaultRequestProperty(String key)\n    * Unlike for other set factory methods, this one does not do a security\n    * check prior to setting the factory.\n    *\n-   * @param fac The ContentHandlerFactory\n+   * @param factory The ContentHandlerFactory for this application\n    *\n    * @exception Error If the factory has already been defined\n    * @exception SecurityException If a security manager exists and its\n    * checkSetFactory method doesn't allow the operation\n    */\n-  public static void setContentHandlerFactory(ContentHandlerFactory fac)\n+  public static synchronized void setContentHandlerFactory\n+                                    (ContentHandlerFactory fac)\n   {\n     if (factory != null)\n       throw new Error(\"ContentHandlerFactory already set\");\n@@ -810,42 +830,55 @@ public static void setContentHandlerFactory(ContentHandlerFactory fac)\n     SecurityManager s = System.getSecurityManager();\n     if (s != null)\n       s.checkSetFactory();\n+\n     factory = fac;\n   }\n \n   /**\n-   * Tries to determine the content type of an object, based on the\n-   * specified file name\n+   * Returns the MIME type of a file based on the name of the file.  This\n+   * works by searching for the file's extension in a list of file extensions\n+   * and returning the MIME type associated with it.  If no type is found,\n+   * then a MIME type of \"application/octet-stream\" will be returned.\n+   *\n+   * @param filename The filename to determine the MIME type for\n    *\n-   * @param fname The filename to guess the content type from\n+   * @return The MIME type String\n    *\n    * @specnote public since JDK 1.4\n    */\n-  public static String guessContentTypeFromName(String fname)\n+  public static String guessContentTypeFromName(String filename)\n   {\n-    int dot = fname.lastIndexOf (\".\");\n+    int dot = filename.lastIndexOf (\".\");\n     \n     if (dot != -1)\n       {\n-\tif (dot == fname.length())\n+\tif (dot == filename.length())\n \t  return (\"application/octet-stream\");\n \telse\n-\t  fname = fname.substring (dot + 1);\n+\t  filename = filename.substring (dot + 1);\n       }\n     \n-    String type = MimeTypes.getMimeTypeFromExtension (fname);\n+    String type = MimeTypes.getMimeTypeFromExtension (filename);\n     \n     if (type == null)\n       return(\"application/octet-stream\");\n \n-    return(type);\n+    return type;\n   }\n \n   /**\n-   * Tries to guess the content type of an object, based on the characters\n-   * at the beginning of then input stream\n+   * Returns the MIME type of a stream based on the first few characters\n+   * at the beginning of the stream.  This routine can be used to determine\n+   * the MIME type if a server is believed to be returning an incorrect\n+   * MIME type.  This method returns \"application/octet-stream\" if it \n+   * cannot determine the MIME type.\n+   * <p>\n+   * NOTE: Overriding MIME types sent from the server can be obnoxious\n+   * to user's.  See Internet Exploder 4 if you don't believe me.\n+   *\n+   * @param is The InputStream to determine the MIME type from\n    *\n-   * @param is The input stream to guess from\n+   * @return The MIME type\n    *\n    * @exception IOException If an error occurs\n    */\n@@ -862,6 +895,8 @@ public static String guessContentTypeFromStream(InputStream is)\n    * This method returns the <code>FileNameMap</code> object being used\n    * to decode MIME types by file extension.\n    *\n+   * @return The <code>FileNameMap</code>.\n+   *\n    * @since 1.2\n    */\n   public static FileNameMap getFileNameMap()\n@@ -870,9 +905,10 @@ public static FileNameMap getFileNameMap()\n   }\n \n   /**\n-   * Sets a FileNameMap\n+   * This method set the <code>FileNameMap</code> object being used\n+   * to decode MIME types by file extension.\n    *\n-   * @param map The new FileNameMap\n+   * @param map The <code>FileNameMap</code>.\n    *\n    * @exception SecurityException If a security manager exists and its\n    * checkSetFactory method doesn't allow the operation"}]}