{"sha": "6ba86ba72f9d437275d9352244fb833ea471e494", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJhODZiYTcyZjlkNDM3Mjc1ZDkzNTIyNDRmYjgzM2VhNDcxZTQ5NA==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2017-05-09T01:15:46Z"}, "committer": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2017-05-09T01:15:46Z"}, "message": "re PR target/80101 (ICE in store_data_bypass_p, at recog.c:3737)\n\ngcc/testsuite/ChangeLog:\n\n2017-05-08  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\tPR target/80101\n\t* gcc.target/powerpc/pr80101-1.c: New test.\n\n\ngcc/ChangeLog:\n\n2017-05-08  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\tPR target/80101\n\t* config/rs6000/power6.md: Replace store_data_bypass_p calls with\n\trs6000_store_data_bypass_p in seven define_bypass directives and\n\tin several comments.\n\t* config/rs6000/rs6000-protos.h: Add prototype for\n\trs6000_store_data_bypass_p function.\n\t* config/rs6000/rs6000.c (rs6000_store_data_bypass_p): New\n\tfunction implements slightly different (rs6000-specific) semantics\n\tthan store_data_bypass_p, returning false rather than aborting\n\twith assertion error when arguments do not satisfy the\n\trequirements of store data bypass.\n\t(rs6000_adjust_cost): Replace six calls of store_data_bypass_p with\n\trs6000_store_data_bypass_p.\n\nFrom-SVN: r247777", "tree": {"sha": "983d2cdc09a95e55df3fa4587bb58c87d65e8499", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/983d2cdc09a95e55df3fa4587bb58c87d65e8499"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ba86ba72f9d437275d9352244fb833ea471e494", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ba86ba72f9d437275d9352244fb833ea471e494", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ba86ba72f9d437275d9352244fb833ea471e494", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ba86ba72f9d437275d9352244fb833ea471e494/comments", "author": null, "committer": null, "parents": [{"sha": "6abd0017dd59a3abcbc93bb1bd8708c308b63cb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6abd0017dd59a3abcbc93bb1bd8708c308b63cb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6abd0017dd59a3abcbc93bb1bd8708c308b63cb7"}], "stats": {"total": 159, "additions": 144, "deletions": 15}, "files": [{"sha": "4f4af366c983155ac63d021937a1b05363e05f4e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba86ba72f9d437275d9352244fb833ea471e494/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba86ba72f9d437275d9352244fb833ea471e494/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ba86ba72f9d437275d9352244fb833ea471e494", "patch": "@@ -1,3 +1,19 @@\n+2017-05-08  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\tPR target/80101\n+\t* config/rs6000/power6.md: Replace store_data_bypass_p calls with\n+\trs6000_store_data_bypass_p in seven define_bypass directives and\n+\tin several comments.\n+\t* config/rs6000/rs6000-protos.h: Add prototype for\n+\trs6000_store_data_bypass_p function.\n+\t* config/rs6000/rs6000.c (rs6000_store_data_bypass_p): New\n+\tfunction implements slightly different (rs6000-specific) semantics\n+\tthan store_data_bypass_p, returning false rather than aborting\n+\twith assertion error when arguments do not satisfy the\n+\trequirements of store data bypass.\n+\t(rs6000_adjust_cost): Replace six calls of store_data_bypass_p with\n+\trs6000_store_data_bypass_p.\n+\n 2017-05-08  Max Filippov  <jcmvbkbc@gmail.com>\n \n \t* config/xtensa/xtensa-protos.h"}, {"sha": "0d81cdebda525a4c4c93900ad92eee94866996ad", "filename": "gcc/config/rs6000/power6.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba86ba72f9d437275d9352244fb833ea471e494/gcc%2Fconfig%2Frs6000%2Fpower6.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba86ba72f9d437275d9352244fb833ea471e494/gcc%2Fconfig%2Frs6000%2Fpower6.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower6.md?ref=6ba86ba72f9d437275d9352244fb833ea471e494", "patch": "@@ -108,7 +108,7 @@\n                   power6-store-update-indexed,\\\n                   power6-fpstore,\\\n                   power6-fpstore-update\"\n-  \"store_data_bypass_p\")\n+  \"rs6000_store_data_bypass_p\")\n \n (define_insn_reservation \"power6-load-ext\" 4 ; fx\n   (and (eq_attr \"type\" \"load\")\n@@ -128,7 +128,7 @@\n                   power6-store-update-indexed,\\\n                   power6-fpstore,\\\n                   power6-fpstore-update\"\n-  \"store_data_bypass_p\")\n+  \"rs6000_store_data_bypass_p\")\n \n (define_insn_reservation \"power6-load-update\" 2 ; fx\n   (and (eq_attr \"type\" \"load\")\n@@ -276,7 +276,7 @@\n                   power6-store-update-indexed,\\\n                   power6-fpstore,\\\n                   power6-fpstore-update\"\n-  \"store_data_bypass_p\")\n+  \"rs6000_store_data_bypass_p\")\n \n (define_insn_reservation \"power6-cntlz\" 2\n   (and (eq_attr \"type\" \"cntlz\")\n@@ -289,7 +289,7 @@\n                   power6-store-update-indexed,\\\n                   power6-fpstore,\\\n                   power6-fpstore-update\"\n-  \"store_data_bypass_p\")\n+  \"rs6000_store_data_bypass_p\")\n \n (define_insn_reservation \"power6-var-rotate\" 4\n   (and (eq_attr \"type\" \"shift\")\n@@ -355,7 +355,7 @@\n                   power6-store-update-indexed,\\\n                   power6-fpstore,\\\n                   power6-fpstore-update\"\n-  \"store_data_bypass_p\")\n+  \"rs6000_store_data_bypass_p\")\n \n (define_insn_reservation \"power6-delayed-compare\" 2 ; N/A\n   (and (eq_attr \"type\" \"shift\")\n@@ -420,7 +420,7 @@\n                   power6-store-update-indexed,\\\n                   power6-fpstore,\\\n                   power6-fpstore-update\"\n-  \"store_data_bypass_p\")\n+  \"rs6000_store_data_bypass_p\")\n \n (define_insn_reservation \"power6-idiv\" 44\n   (and (eq_attr \"type\" \"div\")\n@@ -436,7 +436,7 @@\n ;                  power6-store-update-indexed,\\\n ;                  power6-fpstore,\\\n ;                  power6-fpstore-update\"\n-;  \"store_data_bypass_p\")\n+;  \"rs6000_store_data_bypass_p\")\n \n (define_insn_reservation \"power6-ldiv\" 56\n   (and (eq_attr \"type\" \"div\")\n@@ -452,7 +452,7 @@\n ;                  power6-store-update-indexed,\\\n ;                  power6-fpstore,\\\n ;                  power6-fpstore-update\"\n-;  \"store_data_bypass_p\")\n+;  \"rs6000_store_data_bypass_p\")\n \n (define_insn_reservation \"power6-mtjmpr\" 2\n   (and (eq_attr \"type\" \"mtjmpr,mfjmpr\")\n@@ -510,7 +510,7 @@\n \n (define_bypass 1 \"power6-fp\"\n                  \"power6-fpstore,power6-fpstore-update\"\n-  \"store_data_bypass_p\")\n+  \"rs6000_store_data_bypass_p\")\n \n (define_insn_reservation \"power6-fpcompare\" 8\n   (and (eq_attr \"type\" \"fpcompare\")"}, {"sha": "0344823db0a8404e68cb945a41fe5bbb79e525cc", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba86ba72f9d437275d9352244fb833ea471e494/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba86ba72f9d437275d9352244fb833ea471e494/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=6ba86ba72f9d437275d9352244fb833ea471e494", "patch": "@@ -226,6 +226,7 @@ extern void rs6000_aix_asm_output_dwarf_table_ref (char *);\n extern void get_ppc476_thunk_name (char name[32]);\n extern bool rs6000_overloaded_builtin_p (enum rs6000_builtins);\n extern const char *rs6000_overloaded_builtin_name (enum rs6000_builtins);\n+extern int rs6000_store_data_bypass_p (rtx_insn *, rtx_insn *);\n extern HOST_WIDE_INT rs6000_builtin_mask_calculate (void);\n extern void rs6000_asm_output_dwarf_pcrel (FILE *file, int size,\n \t\t\t\t\t   const char *label);"}, {"sha": "17b93a65b80296f0cf8750bded579f5a59aeadf7", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 91, "deletions": 6, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba86ba72f9d437275d9352244fb833ea471e494/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba86ba72f9d437275d9352244fb833ea471e494/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=6ba86ba72f9d437275d9352244fb833ea471e494", "patch": "@@ -508,6 +508,91 @@ mode_supports_pre_modify_p (machine_mode mode)\n \t  != 0);\n }\n \n+/* Given that there exists at least one variable that is set (produced)\n+   by OUT_INSN and read (consumed) by IN_INSN, return true iff\n+   IN_INSN represents one or more memory store operations and none of\n+   the variables set by OUT_INSN is used by IN_INSN as the address of a\n+   store operation.  If either IN_INSN or OUT_INSN does not represent\n+   a \"single\" RTL SET expression (as loosely defined by the\n+   implementation of the single_set function) or a PARALLEL with only\n+   SETs, CLOBBERs, and USEs inside, this function returns false.\n+\n+   This rs6000-specific version of store_data_bypass_p checks for\n+   certain conditions that result in assertion failures (and internal\n+   compiler errors) in the generic store_data_bypass_p function and\n+   returns false rather than calling store_data_bypass_p if one of the\n+   problematic conditions is detected.  */\n+\n+int\n+rs6000_store_data_bypass_p (rtx_insn *out_insn, rtx_insn *in_insn)\n+{\n+  rtx out_set, in_set;\n+  rtx out_pat, in_pat;\n+  rtx out_exp, in_exp;\n+  int i, j;\n+\n+  in_set = single_set (in_insn);\n+  if (in_set)\n+    {\n+      if (MEM_P (SET_DEST (in_set)))\n+\t{\n+\t  out_set = single_set (out_insn);\n+\t  if (!out_set)\n+\t    {\n+\t      out_pat = PATTERN (out_insn);\n+\t      if (GET_CODE (out_pat) == PARALLEL)\n+\t\t{\n+\t\t  for (i = 0; i < XVECLEN (out_pat, 0); i++)\n+\t\t    {\n+\t\t      out_exp = XVECEXP (out_pat, 0, i);\n+\t\t      if ((GET_CODE (out_exp) == CLOBBER)\n+\t\t\t  || (GET_CODE (out_exp) == USE))\n+\t\t\tcontinue;\n+\t\t      else if (GET_CODE (out_exp) != SET)\n+\t\t\treturn false;\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+    }\n+  else\n+    {\n+      in_pat = PATTERN (in_insn);\n+      if (GET_CODE (in_pat) != PARALLEL)\n+\treturn false;\n+\n+      for (i = 0; i < XVECLEN (in_pat, 0); i++)\n+\t{\n+\t  in_exp = XVECEXP (in_pat, 0, i);\n+\t  if ((GET_CODE (in_exp) == CLOBBER) || (GET_CODE (in_exp) == USE))\n+\t    continue;\n+\t  else if (GET_CODE (in_exp) != SET)\n+\t    return false;\n+\n+\t  if (MEM_P (SET_DEST (in_exp)))\n+\t    {\n+\t      out_set = single_set (out_insn);\n+\t      if (!out_set)\n+\t\t{\n+\t\t  out_pat = PATTERN (out_insn);\n+\t\t  if (GET_CODE (out_pat) != PARALLEL)\n+\t\t    return false;\n+\t\t  for (j = 0; j < XVECLEN (out_pat, 0); j++)\n+\t\t    {\n+\t\t      out_exp = XVECEXP (out_pat, 0, j);\n+\t\t      if ((GET_CODE (out_exp) == CLOBBER)\n+\t\t\t  || (GET_CODE (out_exp) == USE))\n+\t\t\tcontinue;\n+\t\t      else if (GET_CODE (out_exp) != SET)\n+\t\t\treturn false;\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+    }\n+  return store_data_bypass_p (out_insn, in_insn);\n+}\n+\n /* Return true if we have D-form addressing in altivec registers.  */\n static inline bool\n mode_supports_vmx_dform (machine_mode mode)\n@@ -33058,14 +33143,14 @@ rs6000_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn, int cost,\n                   case TYPE_LOAD:\n                   case TYPE_CNTLZ:\n                     {\n-                      if (! store_data_bypass_p (dep_insn, insn))\n+                      if (! rs6000_store_data_bypass_p (dep_insn, insn))\n                         return get_attr_sign_extend (dep_insn)\n                                == SIGN_EXTEND_YES ? 6 : 4;\n                       break;\n                     }\n                   case TYPE_SHIFT:\n                     {\n-                      if (! store_data_bypass_p (dep_insn, insn))\n+                      if (! rs6000_store_data_bypass_p (dep_insn, insn))\n                         return get_attr_var_shift (dep_insn) == VAR_SHIFT_YES ?\n                                6 : 3;\n                       break;\n@@ -33076,7 +33161,7 @@ rs6000_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn, int cost,\n                   case TYPE_EXTS:\n                   case TYPE_INSERT:\n                     {\n-                      if (! store_data_bypass_p (dep_insn, insn))\n+                      if (! rs6000_store_data_bypass_p (dep_insn, insn))\n                         return 3;\n                       break;\n                     }\n@@ -33085,19 +33170,19 @@ rs6000_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn, int cost,\n                   case TYPE_FPSTORE:\n                     {\n                       if (get_attr_update (dep_insn) == UPDATE_YES\n-                          && ! store_data_bypass_p (dep_insn, insn))\n+                          && ! rs6000_store_data_bypass_p (dep_insn, insn))\n                         return 3;\n                       break;\n                     }\n                   case TYPE_MUL:\n                     {\n-                      if (! store_data_bypass_p (dep_insn, insn))\n+                      if (! rs6000_store_data_bypass_p (dep_insn, insn))\n                         return 17;\n                       break;\n                     }\n                   case TYPE_DIV:\n                     {\n-                      if (! store_data_bypass_p (dep_insn, insn))\n+                      if (! rs6000_store_data_bypass_p (dep_insn, insn))\n                         return get_attr_size (dep_insn) == SIZE_32 ? 45 : 57;\n                       break;\n                     }"}, {"sha": "597930c69b2928175791d2e3043eb7aec578a83f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba86ba72f9d437275d9352244fb833ea471e494/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba86ba72f9d437275d9352244fb833ea471e494/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6ba86ba72f9d437275d9352244fb833ea471e494", "patch": "@@ -1,3 +1,8 @@\n+2017-05-08  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\tPR target/80101\n+\t* gcc.target/powerpc/pr80101-1.c: New test.\n+\n 2017-05-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/79930"}, {"sha": "45011d54ac22bf9da0e25a49b4428cc7cc15dd58", "filename": "gcc/testsuite/gcc.target/powerpc/pr80101-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba86ba72f9d437275d9352244fb833ea471e494/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80101-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba86ba72f9d437275d9352244fb833ea471e494/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80101-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80101-1.c?ref=6ba86ba72f9d437275d9352244fb833ea471e494", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power6\" } } */\n+/* { dg-require-effective-target dfp_hw } */\n+/* { dg-options \"-mcpu=power6 -mno-sched-epilog -Ofast\" } */\n+\n+/* Prior to resolving PR 80101, this test case resulted in an internal\n+   compiler error.  The role of this test program is to assure that\n+   dejagnu's \"test for excess errors\" does not find any.  */\n+\n+int b;\n+\n+void e ();\n+\n+int c ()\n+{\n+  struct\n+  {\n+    int a[b];\n+  } d;\n+  if (d.a[0])\n+    e ();\n+}"}]}