{"sha": "f4bed77be41f90e53463f8bf7a71ff503402a963", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRiZWQ3N2JlNDFmOTBlNTM0NjNmOGJmN2E3MWZmNTAzNDAyYTk2Mw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-10-17T09:59:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-10-17T09:59:47Z"}, "message": "re PR tree-optimization/58143 (wrong code at -O3)\n\n2013-10-17  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/58143\n\t* tree-ssa-loop-im.c (arith_code_with_undefined_signed_overflow):\n\tNew function.\n\t(rewrite_to_defined_overflow): Likewise.\n\t(move_computations_dom_walker::before_dom): Rewrite stmts\n\twith undefined signed overflow that are not always executed\n\tinto unsigned arithmetic.\n\n\t* gcc.dg/torture/pr58143-1.c: New testcase.\n\t* gcc.dg/torture/pr58143-2.c: Likewise.\n\t* gcc.dg/torture/pr58143-3.c: Likewise.\n\nFrom-SVN: r203745", "tree": {"sha": "8d7974135748186f9ae1e8c1ad50e589d9721b56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d7974135748186f9ae1e8c1ad50e589d9721b56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4bed77be41f90e53463f8bf7a71ff503402a963", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4bed77be41f90e53463f8bf7a71ff503402a963", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4bed77be41f90e53463f8bf7a71ff503402a963", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4bed77be41f90e53463f8bf7a71ff503402a963/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "568a31f2f6e231543a32e388c12ee8da9df23c53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/568a31f2f6e231543a32e388c12ee8da9df23c53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/568a31f2f6e231543a32e388c12ee8da9df23c53"}], "stats": {"total": 197, "additions": 196, "deletions": 1}, "files": [{"sha": "5a8fb7f2242e3a20e0173d285e919644536274b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4bed77be41f90e53463f8bf7a71ff503402a963/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4bed77be41f90e53463f8bf7a71ff503402a963/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f4bed77be41f90e53463f8bf7a71ff503402a963", "patch": "@@ -1,3 +1,13 @@\n+2013-10-17  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/58143\n+\t* tree-ssa-loop-im.c (arith_code_with_undefined_signed_overflow):\n+\tNew function.\n+\t(rewrite_to_defined_overflow): Likewise.\n+\t(move_computations_dom_walker::before_dom): Rewrite stmts\n+\twith undefined signed overflow that are not always executed\n+\tinto unsigned arithmetic.\n+\n 2013-10-16  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/57756"}, {"sha": "dce8a58de8c62647412510388fc2853f2cf6ad2e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4bed77be41f90e53463f8bf7a71ff503402a963/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4bed77be41f90e53463f8bf7a71ff503402a963/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f4bed77be41f90e53463f8bf7a71ff503402a963", "patch": "@@ -1,3 +1,10 @@\n+2013-10-17  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/58143\n+\t* gcc.dg/torture/pr58143-1.c: New testcase.\n+\t* gcc.dg/torture/pr58143-2.c: Likewise.\n+\t* gcc.dg/torture/pr58143-3.c: Likewise.\n+\n 2013-10-17  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/58267"}, {"sha": "855515edb97778f245147bf0798083cf98f34c93", "filename": "gcc/testsuite/gcc.dg/torture/pr58143-1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4bed77be41f90e53463f8bf7a71ff503402a963/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58143-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4bed77be41f90e53463f8bf7a71ff503402a963/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58143-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58143-1.c?ref=f4bed77be41f90e53463f8bf7a71ff503402a963", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-fstrict-overflow\" } */\n+\n+extern void abort (void);\n+\n+int a, b, c, d, e, f, g, h = 1, i;\n+\n+int foo (int p)\n+{\n+  return p < 0 && a < - __INT_MAX__ - 1 - p ? 0 : 1;\n+}\n+\n+int *bar ()\n+{\n+  int j; \n+  i = h ? 0 : 1 % h;\n+  for (j = 0; j < 1; j++)\n+    for (d = 0; d; d++)\n+      for (e = 1; e;)\n+\treturn 0;\n+  return 0;\n+}\n+\n+int baz ()\n+{\n+  for (; b >= 0; b--)\n+    for (c = 1; c >= 0; c--)\n+      {\n+\tint *k = &c;\n+\tfor (;;)\n+\t  {\n+\t    for (f = 0; f < 1; f++)\n+\t      {\n+\t\tg = foo (*k);\n+\t\tbar ();\n+\t      }\n+\t    if (*k)\n+\t      break;\n+\t    return 0;\n+\t  }\n+      }\n+  return 0;\n+}\n+\n+int main ()\n+{\n+  baz ();\n+  if (b != 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "dd0dae1efe0be396521bcee682bccaa50a189988", "filename": "gcc/testsuite/gcc.dg/torture/pr58143-2.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4bed77be41f90e53463f8bf7a71ff503402a963/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58143-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4bed77be41f90e53463f8bf7a71ff503402a963/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58143-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58143-2.c?ref=f4bed77be41f90e53463f8bf7a71ff503402a963", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-fstrict-overflow\" } */\n+\n+int a, b, d, e, f, *g, h, i;\n+volatile int c;\n+\n+char foo (unsigned char p)\n+{\n+  return p + 1;\n+}\n+\n+int bar () \n+{\n+  for (h = 0; h < 3; h = foo (h))\n+    {\n+      c;\n+      for (f = 0; f < 1; f++)\n+\t{\n+\t  i = a && 0 < -__INT_MAX__ - h ? 0 : 1;\n+\t  if (e)\n+\t    for (; d;)\n+\t      b = 0;\n+\t  else\n+\t    g = 0;\n+\t}\n+    }\n+  return 0;\n+}\n+\n+int main ()\n+{\n+  bar ();\n+  return 0;\n+}"}, {"sha": "23ae9cd39cefa74066567653c1048e3b7e14eecb", "filename": "gcc/testsuite/gcc.dg/torture/pr58143-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4bed77be41f90e53463f8bf7a71ff503402a963/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58143-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4bed77be41f90e53463f8bf7a71ff503402a963/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58143-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58143-3.c?ref=f4bed77be41f90e53463f8bf7a71ff503402a963", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-fstrict-overflow\" } */\n+\n+int a, b, c, d, e;\n+\n+int\n+main ()\n+{\n+  for (b = 4; b > -30; b--)\n+    for (; c;)\n+      for (;;)\n+\t{\n+\t  e = a > __INT_MAX__ - b;\n+\t  if (d)\n+\t    break;\n+\t}\n+  return 0;\n+}"}, {"sha": "15af428f51fb7ccced098030a17f5206c3dbd9be", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 76, "deletions": 1, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4bed77be41f90e53463f8bf7a71ff503402a963/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4bed77be41f90e53463f8bf7a71ff503402a963/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=f4bed77be41f90e53463f8bf7a71ff503402a963", "patch": "@@ -1117,6 +1117,67 @@ class move_computations_dom_walker : public dom_walker\n   unsigned int todo_;\n };\n \n+/* Return true if CODE is an operation that when operating on signed\n+   integer types involves undefined behavior on overflow and the\n+   operation can be expressed with unsigned arithmetic.  */\n+\n+static bool\n+arith_code_with_undefined_signed_overflow (tree_code code)\n+{\n+  switch (code)\n+    {\n+    case PLUS_EXPR:\n+    case MINUS_EXPR:\n+    case MULT_EXPR:\n+    case NEGATE_EXPR:\n+    case POINTER_PLUS_EXPR:\n+      return true;\n+    default:\n+      return false;\n+    }\n+}\n+\n+/* Rewrite STMT, an assignment with a signed integer or pointer arithmetic\n+   operation that can be transformed to unsigned arithmetic by converting\n+   its operand, carrying out the operation in the corresponding unsigned\n+   type and converting the result back to the original type.\n+\n+   Returns a sequence of statements that replace STMT and also contain\n+   a modified form of STMT itself.  */\n+\n+static gimple_seq\n+rewrite_to_defined_overflow (gimple stmt)\n+{\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      fprintf (dump_file, \"rewriting stmt with undefined signed \"\n+\t       \"overflow \");\n+      print_gimple_stmt (dump_file, stmt, 0, TDF_SLIM);\n+    }\n+\n+  tree lhs = gimple_assign_lhs (stmt);\n+  tree type = unsigned_type_for (TREE_TYPE (lhs));\n+  gimple_seq stmts = NULL;\n+  for (unsigned i = 1; i < gimple_num_ops (stmt); ++i)\n+    {\n+      gimple_seq stmts2 = NULL;\n+      gimple_set_op (stmt, i,\n+\t\t     force_gimple_operand (fold_convert (type,\n+\t\t\t\t\t\t\t gimple_op (stmt, i)),\n+\t\t\t\t\t   &stmts2, true, NULL_TREE));\n+      gimple_seq_add_seq (&stmts, stmts2);\n+    }\n+  gimple_assign_set_lhs (stmt, make_ssa_name (type, stmt));\n+  if (gimple_assign_rhs_code (stmt) == POINTER_PLUS_EXPR)\n+    gimple_assign_set_rhs_code (stmt, PLUS_EXPR);\n+  gimple_seq_add_stmt (&stmts, stmt);\n+  gimple cvt = gimple_build_assign_with_ops\n+      (NOP_EXPR, lhs, gimple_assign_lhs (stmt), NULL_TREE);\n+  gimple_seq_add_stmt (&stmts, cvt);\n+\n+  return stmts;\n+}\n+\n /* Hoist the statements in basic block BB out of the loops prescribed by\n    data stored in LIM_DATA structures associated with each statement.  Callback\n    for walk_dominator_tree.  */\n@@ -1247,7 +1308,21 @@ move_computations_dom_walker::before_dom_children (basic_block bb)\n \t    }\n \t}\n       gsi_remove (&bsi, false);\n-      gsi_insert_on_edge (e, stmt);\n+      /* In case this is a stmt that is not unconditionally executed\n+         when the target loop header is executed and the stmt may\n+\t invoke undefined integer or pointer overflow rewrite it to\n+\t unsigned arithmetic.  */\n+      if (is_gimple_assign (stmt)\n+\t  && INTEGRAL_TYPE_P (TREE_TYPE (gimple_assign_lhs (stmt)))\n+\t  && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (gimple_assign_lhs (stmt)))\n+\t  && arith_code_with_undefined_signed_overflow\n+\t       (gimple_assign_rhs_code (stmt))\n+\t  && (!ALWAYS_EXECUTED_IN (bb)\n+\t      || !(ALWAYS_EXECUTED_IN (bb) == level\n+\t\t   || flow_loop_nested_p (ALWAYS_EXECUTED_IN (bb), level))))\n+\tgsi_insert_seq_on_edge (e, rewrite_to_defined_overflow (stmt));\n+      else\n+\tgsi_insert_on_edge (e, stmt);\n     }\n }\n "}]}