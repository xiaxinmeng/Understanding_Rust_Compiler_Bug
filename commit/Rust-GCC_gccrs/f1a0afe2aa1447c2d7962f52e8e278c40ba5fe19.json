{"sha": "f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFhMGFmZTJhYTE0NDdjMmQ3OTYyZjUyZThlMjc4YzQwYmE1ZmUxOQ==", "commit": {"author": {"name": "Monk Chiang", "email": "sh.chiang04@gmail.com", "date": "2018-04-07T06:21:56Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2018-04-07T06:21:56Z"}, "message": "[NDS32] Add intrinsic functions for cache control.\n\ngcc/\n\t* config/nds32/constants.md (unspec_volatile_element): Add cache\n\tcontrol enum values.\n\t* config/nds32/nds32-intrinsic.c: Add cache control expand functions.\n\t* config/nds32/nds32-intrinsic.md: Add cache control patterns.\n\t* config/nds32/nds32.c (nds32_cctl_names): New.\n\t(nds32_print_operand): Handle cache control register names.\n\t* config/nds32/nds32.h (nds32_builtins): New enum values.\n\t* config/nds32/nds32_intrinsic.h: Add cache control enum types and\n\tmacros.\n\t* config/nds32/nds32.md (type): Add mmu.\n\t* config/nds32/pipelines.md (simple_insn): Add mmu.\n\nFrom-SVN: r259205", "tree": {"sha": "d6c75d8ea7b037e9472b1119b738b49aff9f9e68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6c75d8ea7b037e9472b1119b738b49aff9f9e68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19/comments", "author": {"login": "monkchiang", "id": 62004175, "node_id": "MDQ6VXNlcjYyMDA0MTc1", "avatar_url": "https://avatars.githubusercontent.com/u/62004175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/monkchiang", "html_url": "https://github.com/monkchiang", "followers_url": "https://api.github.com/users/monkchiang/followers", "following_url": "https://api.github.com/users/monkchiang/following{/other_user}", "gists_url": "https://api.github.com/users/monkchiang/gists{/gist_id}", "starred_url": "https://api.github.com/users/monkchiang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/monkchiang/subscriptions", "organizations_url": "https://api.github.com/users/monkchiang/orgs", "repos_url": "https://api.github.com/users/monkchiang/repos", "events_url": "https://api.github.com/users/monkchiang/events{/privacy}", "received_events_url": "https://api.github.com/users/monkchiang/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "79f0e157d5fb1eee2fbb35e9623692bf12c18bd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79f0e157d5fb1eee2fbb35e9623692bf12c18bd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79f0e157d5fb1eee2fbb35e9623692bf12c18bd8"}], "stats": {"total": 342, "additions": 339, "deletions": 3}, "files": [{"sha": "1f0dff3f6ab4630e372ea48b0e588b2d411cd6d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19", "patch": "@@ -1,3 +1,17 @@\n+2018-04-07  Monk Chiang  <sh.chiang04@gmail.com>\n+\n+\t* config/nds32/constants.md (unspec_volatile_element): Add cache\n+\tcontrol enum values.\n+\t* config/nds32/nds32-intrinsic.c: Add cache control expand functions.\n+\t* config/nds32/nds32-intrinsic.md: Add cache control patterns.\n+\t* config/nds32/nds32.c (nds32_cctl_names): New.\n+\t(nds32_print_operand): Handle cache control register names.\n+\t* config/nds32/nds32.h (nds32_builtins): New enum values.\n+\t* config/nds32/nds32_intrinsic.h: Add cache control enum types and\n+\tmacros.\n+\t* config/nds32/nds32.md (type): Add mmu.\n+\t* config/nds32/pipelines.md (simple_insn): Add mmu.\n+\n 2018-04-07  Chung-Ju Wu  <jasonwucj@gmail.com>\n \n \t* config/nds32/nds32.md (type): Remove call."}, {"sha": "92181fd850b162f3fcab163752675c57a5cfab1a", "filename": "gcc/config/nds32/constants.md", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19/gcc%2Fconfig%2Fnds32%2Fconstants.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19/gcc%2Fconfig%2Fnds32%2Fconstants.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fconstants.md?ref=f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19", "patch": "@@ -61,7 +61,15 @@\n   UNSPEC_VOLATILE_FMFCSR\n   UNSPEC_VOLATILE_FMTCSR\n   UNSPEC_VOLATILE_FMFCFG\n-\n+  UNSPEC_VOLATILE_CCTL_L1D_INVALALL\n+  UNSPEC_VOLATILE_CCTL_L1D_WBALL_ALVL\n+  UNSPEC_VOLATILE_CCTL_L1D_WBALL_ONE_LVL\n+  UNSPEC_VOLATILE_CCTL_IDX_WRITE\n+  UNSPEC_VOLATILE_CCTL_IDX_READ\n+  UNSPEC_VOLATILE_CCTL_VA_WBINVAL_L1\n+  UNSPEC_VOLATILE_CCTL_VA_WBINVAL_LA\n+  UNSPEC_VOLATILE_CCTL_IDX_WBINVAL\n+  UNSPEC_VOLATILE_CCTL_VA_LCK\n   UNSPEC_VOLATILE_RELAX_GROUP\n   UNSPEC_VOLATILE_POP25_RETURN\n ])"}, {"sha": "3dc9aa29aadab83483309f94462cddf73f25d04b", "filename": "gcc/config/nds32/nds32-intrinsic.c", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c?ref=f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19", "patch": "@@ -222,6 +222,47 @@ nds32_expand_binop_builtin (enum insn_code icode, tree exp, rtx target,\n   return target;\n }\n \n+/* Expand cctl builtins.  */\n+static rtx\n+nds32_expand_cctl_builtin (enum insn_code icode, tree exp, rtx target,\n+\t\t\t   bool return_p, const char *name)\n+{\n+  rtx pat;\n+  rtx op0 = nds32_read_argument (exp, 0);\n+  rtx op1 = nds32_read_argument (exp, 1);\n+  int op0_num = return_p ? 1 : 0;\n+  int op1_num = return_p ? 2 : 1;\n+\n+  if (return_p)\n+    target = nds32_legitimize_target (icode, target);\n+\n+  if (!nds32_check_constant_argument (icode, op0_num, op0, name))\n+    return NULL_RTX;\n+\n+  op0 = nds32_legitimize_argument (icode, op0_num, op0);\n+  op1 = nds32_legitimize_argument (icode, op1_num, op1);\n+\n+  /* Emit and return the new instruction. */\n+  if (icode == CODE_FOR_cctl_idx_write)\n+    {\n+      /* cctl_idx_write is three argument,\n+\t so create operand2 for cctl_idx_write pattern.  */\n+      rtx op2 = nds32_read_argument (exp, 2);\n+      op2 = nds32_legitimize_argument (icode, 2, op2);\n+      pat = GEN_FCN (icode) (op0, op1, op2);\n+    }\n+  else if (return_p)\n+    pat = GEN_FCN (icode) (target, op0, op1);\n+  else\n+    pat = GEN_FCN (icode) (op0, op1);\n+\n+  if (! pat)\n+    return NULL_RTX;\n+\n+  emit_insn (pat);\n+  return target;\n+}\n+\n struct builtin_description\n {\n   const enum insn_code icode;\n@@ -280,6 +321,20 @@ static struct builtin_description bdesc_2arg[] =\n \n };\n \n+\n+static struct builtin_description bdesc_cctl[] =\n+{\n+  NDS32_BUILTIN(cctl_idx_read, \"cctl_idx_read\", CCTL_IDX_READ)\n+  NDS32_NO_TARGET_BUILTIN(cctl_idx_write, \"cctl_idx_write\", CCTL_IDX_WRITE)\n+  NDS32_NO_TARGET_BUILTIN(cctl_va_lck, \"cctl_va_lck\", CCTL_VA_LCK)\n+  NDS32_NO_TARGET_BUILTIN(cctl_idx_wbinval,\n+\t\t\t  \"cctl_idx_wbinval\", CCTL_IDX_WBINVAL)\n+  NDS32_NO_TARGET_BUILTIN(cctl_va_wbinval_l1,\n+\t\t\t  \"cctl_va_wbinval_l1\", CCTL_VA_WBINVAL_L1)\n+  NDS32_NO_TARGET_BUILTIN(cctl_va_wbinval_la,\n+\t\t\t  \"cctl_va_wbinval_la\", CCTL_VA_WBINVAL_LA)\n+};\n+\n rtx\n nds32_expand_builtin_impl (tree exp,\n \t\t\t   rtx target,\n@@ -346,6 +401,15 @@ nds32_expand_builtin_impl (tree exp,\n       return target;\n     case NDS32_BUILTIN_SETGIE_DIS:\n       emit_insn (gen_unspec_volatile_setgie_dis ());\n+    case NDS32_BUILTIN_CCTL_L1D_INVALALL:\n+      emit_insn (gen_cctl_l1d_invalall());\n+      return target;\n+    case NDS32_BUILTIN_CCTL_L1D_WBALL_ALVL:\n+      emit_insn (gen_cctl_l1d_wball_alvl());\n+      return target;\n+    case NDS32_BUILTIN_CCTL_L1D_WBALL_ONE_LVL:\n+      emit_insn (gen_cctl_l1d_wball_one_lvl());\n+      return target;\n       return target;\n     default:\n       break;\n@@ -369,6 +433,10 @@ nds32_expand_builtin_impl (tree exp,\n     if (d->code == fcode)\n       return nds32_expand_binop_builtin (d->icode, exp, target, d->return_p);\n \n+  for (i = 0, d = bdesc_cctl; i < ARRAY_SIZE (bdesc_cctl); i++, d++)\n+    if (d->code == fcode)\n+      return nds32_expand_cctl_builtin (d->icode, exp, target,\n+\t\t\t\t\td->return_p, d->name);\n \n   return NULL_RTX;\n }\n@@ -451,6 +519,22 @@ nds32_init_builtins_impl (void)\n   ADD_NDS32_BUILTIN0 (\"setgie_en\", void, SETGIE_EN);\n   ADD_NDS32_BUILTIN0 (\"setgie_dis\", void, SETGIE_DIS);\n \n+  /* CCTL  */\n+  ADD_NDS32_BUILTIN0 (\"cctl_l1d_invalall\", void, CCTL_L1D_INVALALL);\n+  ADD_NDS32_BUILTIN0 (\"cctl_l1d_wball_alvl\", void, CCTL_L1D_WBALL_ALVL);\n+  ADD_NDS32_BUILTIN0 (\"cctl_l1d_wball_one_lvl\", void, CCTL_L1D_WBALL_ONE_LVL);\n+  ADD_NDS32_BUILTIN2 (\"cctl_va_lck\", void, integer, ptr_uint, CCTL_VA_LCK);\n+  ADD_NDS32_BUILTIN2 (\"cctl_idx_wbinval\", void, integer, unsigned,\n+\t\t      CCTL_IDX_WBINVAL);\n+  ADD_NDS32_BUILTIN2 (\"cctl_va_wbinval_l1\", void, integer, ptr_uint,\n+\t\t      CCTL_VA_WBINVAL_L1);\n+  ADD_NDS32_BUILTIN2 (\"cctl_va_wbinval_la\", void, integer, ptr_uint,\n+\t\t      CCTL_VA_WBINVAL_LA);\n+  ADD_NDS32_BUILTIN2 (\"cctl_idx_read\", unsigned, integer, unsigned,\n+\t\t      CCTL_IDX_READ);\n+  ADD_NDS32_BUILTIN3 (\"cctl_idx_write\", void, integer, unsigned, unsigned,\n+\t\t      CCTL_IDX_WRITE);\n+\n   /* Unaligned Load/Store  */\n   ADD_NDS32_BUILTIN1 (\"unaligned_load_hw\", short_unsigned, ptr_ushort,\n \t\t      UALOAD_HW);"}, {"sha": "d9f1eb07dbec3aa11bcf20758d853dcd61b8da81", "filename": "gcc/config/nds32/nds32-intrinsic.md", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.md?ref=f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19", "patch": "@@ -162,6 +162,79 @@\n   [(set_attr \"type\" \"misc\")]\n )\n \n+\n+;; CCTL\n+\n+(define_insn \"cctl_l1d_invalall\"\n+  [(unspec_volatile:SI [(const_int 0)] UNSPEC_VOLATILE_CCTL_L1D_INVALALL)]\n+  \"\"\n+  \"cctl\\tL1D_INVALALL\"\n+  [(set_attr \"type\" \"mmu\")]\n+)\n+\n+(define_insn \"cctl_l1d_wball_alvl\"\n+  [(unspec_volatile:SI [(const_int 0)] UNSPEC_VOLATILE_CCTL_L1D_WBALL_ALVL)]\n+  \"\"\n+  \"cctl\\tL1D_WBALL, alevel\"\n+  [(set_attr \"type\" \"mmu\")]\n+)\n+\n+(define_insn \"cctl_l1d_wball_one_lvl\"\n+  [(unspec_volatile:SI [(const_int 0)] UNSPEC_VOLATILE_CCTL_L1D_WBALL_ONE_LVL)]\n+  \"\"\n+  \"cctl\\tL1D_WBALL, 1level\"\n+  [(set_attr \"type\" \"mmu\")]\n+)\n+\n+(define_insn \"cctl_idx_read\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec_volatile:SI [(match_operand:SI 1 \"immediate_operand\" \"i\")\n+\t\t\t     (match_operand:SI 2 \"register_operand\" \"r\")] UNSPEC_VOLATILE_CCTL_IDX_READ))]\n+  \"\"\n+  \"cctl\\t%0, %2, %X1\"\n+  [(set_attr \"type\" \"mmu\")]\n+)\n+\n+(define_insn \"cctl_idx_write\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"immediate_operand\" \"i\")\n+\t\t\t(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t(match_operand:SI 2 \"register_operand\" \"r\")] UNSPEC_VOLATILE_CCTL_IDX_WRITE)]\n+  \"\"\n+  \"cctl\\t%1, %2, %W0\"\n+  [(set_attr \"type\" \"mmu\")]\n+)\n+\n+(define_insn \"cctl_va_wbinval_l1\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"immediate_operand\" \"i\")\n+\t\t\t(match_operand:SI 1 \"register_operand\" \"r\")] UNSPEC_VOLATILE_CCTL_VA_WBINVAL_L1)]\n+  \"\"\n+  \"cctl\\t%1, %U0, 1level\"\n+  [(set_attr \"type\" \"mmu\")]\n+)\n+\n+(define_insn \"cctl_va_wbinval_la\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"immediate_operand\" \"i\")\n+\t\t\t(match_operand:SI 1 \"register_operand\" \"r\")] UNSPEC_VOLATILE_CCTL_VA_WBINVAL_LA)]\n+  \"\"\n+  \"cctl\\t%1, %U0, alevel\"\n+  [(set_attr \"type\" \"mmu\")]\n+)\n+\n+(define_insn \"cctl_idx_wbinval\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"immediate_operand\" \"i\")\n+\t\t\t(match_operand:SI 1 \"register_operand\" \"r\")] UNSPEC_VOLATILE_CCTL_IDX_WBINVAL)]\n+  \"\"\n+  \"cctl\\t%1, %T0\"\n+  [(set_attr \"type\" \"mmu\")]\n+)\n+\n+(define_insn \"cctl_va_lck\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"immediate_operand\" \"i\")\n+\t\t\t(match_operand:SI 1 \"register_operand\" \"r\")] UNSPEC_VOLATILE_CCTL_VA_LCK)]\n+  \"\"\n+  \"cctl\\t%1, %R0\"\n+  [(set_attr \"type\" \"mmu\")]\n+)\n ;; String Extension\n \n (define_insn \"unspec_ffb\""}, {"sha": "98835096afea599a8c00b904afa6dbf4d9d8d5ee", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19", "patch": "@@ -237,6 +237,34 @@ static const char * const nds32_intrinsic_register_names[] =\n   \"$ITB\"\n };\n \n+/* Define instrinsic cctl names.  */\n+static const char * const nds32_cctl_names[] =\n+{\n+  \"L1D_VA_FILLCK\",\n+  \"L1D_VA_ULCK\",\n+  \"L1I_VA_FILLCK\",\n+  \"L1I_VA_ULCK\",\n+\n+  \"L1D_IX_WBINVAL\",\n+  \"L1D_IX_INVAL\",\n+  \"L1D_IX_WB\",\n+  \"L1I_IX_INVAL\",\n+\n+  \"L1D_VA_INVAL\",\n+  \"L1D_VA_WB\",\n+  \"L1D_VA_WBINVAL\",\n+  \"L1I_VA_INVAL\",\n+\n+  \"L1D_IX_RTAG\",\n+  \"L1D_IX_RWD\",\n+  \"L1I_IX_RTAG\",\n+  \"L1I_IX_RWD\",\n+\n+  \"L1D_IX_WTAG\",\n+  \"L1D_IX_WWD\",\n+  \"L1I_IX_WTAG\",\n+  \"L1I_IX_WWD\"\n+};\n \n /* Defining register allocation order for performance.\n    We want to allocate callee-saved registers after others.\n@@ -2906,6 +2934,41 @@ nds32_print_operand (FILE *stream, rtx x, int code)\n       /* No need to handle following process, so return immediately.  */\n       return;\n \n+    case 'R': /* cctl valck  */\n+      /* Note the cctl divide to 5 group and share the same name table.  */\n+      if (op_value < 0 || op_value > 4)\n+\terror (\"CCTL intrinsic function subtype out of range!\");\n+      fprintf (stream, \"%s\", nds32_cctl_names[op_value]);\n+      return;\n+\n+    case 'T': /* cctl idxwbinv  */\n+      /* Note the cctl divide to 5 group and share the same name table.  */\n+      if (op_value < 0 || op_value > 4)\n+\terror (\"CCTL intrinsic function subtype out of range!\");\n+      fprintf (stream, \"%s\", nds32_cctl_names[op_value + 4]);\n+      return;\n+\n+    case 'U': /* cctl vawbinv  */\n+      /* Note the cctl divide to 5 group and share the same name table.  */\n+      if (op_value < 0 || op_value > 4)\n+\terror (\"CCTL intrinsic function subtype out of range!\");\n+      fprintf (stream, \"%s\", nds32_cctl_names[op_value + 8]);\n+      return;\n+\n+    case 'X': /* cctl idxread  */\n+      /* Note the cctl divide to 5 group and share the same name table.  */\n+      if (op_value < 0 || op_value > 4)\n+\terror (\"CCTL intrinsic function subtype out of range!\");\n+      fprintf (stream, \"%s\", nds32_cctl_names[op_value + 12]);\n+      return;\n+\n+    case 'W': /* cctl idxwitre  */\n+      /* Note the cctl divide to 5 group and share the same name table.  */\n+      if (op_value < 0 || op_value > 4)\n+\terror (\"CCTL intrinsic function subtype out of range!\");\n+      fprintf (stream, \"%s\", nds32_cctl_names[op_value + 16]);\n+      return;\n+\n     default :\n       /* Unknown flag.  */\n       output_operand_lossage (\"invalid operand output code\");"}, {"sha": "353034eb828e07f3c55988e721e1d99a9bff6308", "filename": "gcc/config/nds32/nds32.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19/gcc%2Fconfig%2Fnds32%2Fnds32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19/gcc%2Fconfig%2Fnds32%2Fnds32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.h?ref=f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19", "patch": "@@ -452,6 +452,15 @@ enum nds32_builtins\n   NDS32_BUILTIN_FFB,\n   NDS32_BUILTIN_FFMISM,\n   NDS32_BUILTIN_FLMISM,\n+  NDS32_BUILTIN_CCTL_VA_LCK,\n+  NDS32_BUILTIN_CCTL_IDX_WBINVAL,\n+  NDS32_BUILTIN_CCTL_VA_WBINVAL_L1,\n+  NDS32_BUILTIN_CCTL_VA_WBINVAL_LA,\n+  NDS32_BUILTIN_CCTL_IDX_READ,\n+  NDS32_BUILTIN_CCTL_IDX_WRITE,\n+  NDS32_BUILTIN_CCTL_L1D_INVALALL,\n+  NDS32_BUILTIN_CCTL_L1D_WBALL_ALVL,\n+  NDS32_BUILTIN_CCTL_L1D_WBALL_ONE_LVL,\n   NDS32_BUILTIN_UALOAD_HW,\n   NDS32_BUILTIN_UALOAD_W,\n   NDS32_BUILTIN_UALOAD_DW,"}, {"sha": "428d8164af27a4af4d09321a9d2b82e98d2e82cf", "filename": "gcc/config/nds32/nds32.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19/gcc%2Fconfig%2Fnds32%2Fnds32.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19/gcc%2Fconfig%2Fnds32%2Fnds32.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.md?ref=f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19", "patch": "@@ -55,7 +55,7 @@\n \n ;; Insn type, it is used to default other attribute values.\n (define_attr \"type\"\n-  \"unknown,load,store,load_multiple,store_multiple,alu,alu_shift,mul,mac,div,branch,misc,\\\n+  \"unknown,load,store,load_multiple,store_multiple,alu,alu_shift,mul,mac,div,branch,mmu,misc,\\\n    falu,fmuls,fmuld,fmacs,fmacd,fdivs,fdivd,fsqrts,fsqrtd,fcmp,fabs,fcpy,fcmov,fmfsr,fmfdr,fmtsr,fmtdr,fload,fstore\"\n   (const_string \"unknown\"))\n "}, {"sha": "24f6516d16e784f6596e81551cdbaf2a3eae0cb0", "filename": "gcc/config/nds32/nds32_intrinsic.h", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19/gcc%2Fconfig%2Fnds32%2Fnds32_intrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19/gcc%2Fconfig%2Fnds32%2Fnds32_intrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32_intrinsic.h?ref=f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19", "patch": "@@ -185,6 +185,46 @@ enum nds32_intrinsic_registers\n   __NDS32_REG_ITB__\n };\n \n+/* The cctl subtype for intrinsic.  */\n+enum nds32_cctl_valck\n+{\n+  __NDS32_CCTL_L1D_VA_FILLCK__,\n+  __NDS32_CCTL_L1D_VA_ULCK__,\n+  __NDS32_CCTL_L1I_VA_FILLCK__,\n+  __NDS32_CCTL_L1I_VA_ULCK__\n+};\n+\n+enum nds32_cctl_idxwbinv\n+{\n+  __NDS32_CCTL_L1D_IX_WBINVAL__,\n+  __NDS32_CCTL_L1D_IX_INVAL__,\n+  __NDS32_CCTL_L1D_IX_WB__,\n+  __NDS32_CCTL_L1I_IX_INVAL__\n+};\n+\n+enum nds32_cctl_vawbinv\n+{\n+  __NDS32_CCTL_L1D_VA_INVAL__,\n+  __NDS32_CCTL_L1D_VA_WB__,\n+  __NDS32_CCTL_L1D_VA_WBINVAL__,\n+  __NDS32_CCTL_L1I_VA_INVAL__\n+};\n+\n+enum nds32_cctl_idxread\n+{\n+  __NDS32_CCTL_L1D_IX_RTAG__,\n+  __NDS32_CCTL_L1D_IX_RWD__,\n+  __NDS32_CCTL_L1I_IX_RTAG__,\n+  __NDS32_CCTL_L1I_IX_RWD__\n+};\n+\n+enum nds32_cctl_idxwrite\n+{\n+  __NDS32_CCTL_L1D_IX_WTAG__,\n+  __NDS32_CCTL_L1D_IX_WWD__,\n+  __NDS32_CCTL_L1I_IX_WTAG__,\n+  __NDS32_CCTL_L1I_IX_WWD__\n+};\n \n /* ------------------------------------------------------------------------ */\n \n@@ -345,6 +385,51 @@ enum nds32_intrinsic_registers\n #define NDS32_USR_IFC_LP                __NDS32_REG_IFC_LP__\n #define NDS32_USR_ITB                   __NDS32_REG_ITB__\n \n+#define NDS32_CCTL_L1D_VA_FILLCK        __NDS32_CCTL_L1D_VA_FILLCK__\n+#define NDS32_CCTL_L1D_VA_ULCK          __NDS32_CCTL_L1D_VA_ULCK__\n+#define NDS32_CCTL_L1I_VA_FILLCK        __NDS32_CCTL_L1I_VA_FILLCK__\n+#define NDS32_CCTL_L1I_VA_ULCK          __NDS32_CCTL_L1I_VA_ULCK__\n+\n+#define NDS32_CCTL_L1D_IX_WBINVAL       __NDS32_CCTL_L1D_IX_WBINVAL__\n+#define NDS32_CCTL_L1D_IX_INVAL         __NDS32_CCTL_L1D_IX_INVAL__\n+#define NDS32_CCTL_L1D_IX_WB            __NDS32_CCTL_L1D_IX_WB__\n+#define NDS32_CCTL_L1I_IX_INVAL         __NDS32_CCTL_L1I_IX_INVAL__\n+\n+#define NDS32_CCTL_L1D_VA_INVAL         __NDS32_CCTL_L1D_VA_INVAL__\n+#define NDS32_CCTL_L1D_VA_WB            __NDS32_CCTL_L1D_VA_WB__\n+#define NDS32_CCTL_L1D_VA_WBINVAL       __NDS32_CCTL_L1D_VA_WBINVAL__\n+#define NDS32_CCTL_L1I_VA_INVAL         __NDS32_CCTL_L1I_VA_INVAL__\n+\n+#define NDS32_CCTL_L1D_IX_RTAG          __NDS32_CCTL_L1D_IX_RTAG__\n+#define NDS32_CCTL_L1D_IX_RWD           __NDS32_CCTL_L1D_IX_RWD__\n+#define NDS32_CCTL_L1I_IX_RTAG          __NDS32_CCTL_L1I_IX_RTAG__\n+#define NDS32_CCTL_L1I_IX_RWD           __NDS32_CCTL_L1I_IX_RWD__\n+\n+#define NDS32_CCTL_L1D_IX_WTAG          __NDS32_CCTL_L1D_IX_WTAG__\n+#define NDS32_CCTL_L1D_IX_WWD           __NDS32_CCTL_L1D_IX_WWD__\n+#define NDS32_CCTL_L1I_IX_WTAG          __NDS32_CCTL_L1I_IX_WTAG__\n+#define NDS32_CCTL_L1I_IX_WWD           __NDS32_CCTL_L1I_IX_WWD__\n+/* ------------------------------------------------------------------------ */\n+\n+#define __nds32__cctlva_lck(subtype, va) \\\n+  (__builtin_nds32_cctl_va_lck ((subtype), (va)))\n+#define __nds32__cctlidx_wbinval(subtype, idx) \\\n+  (__builtin_nds32_cctl_idx_wbinval ((subtype), (idx)))\n+#define __nds32__cctlva_wbinval_alvl(subtype, va) \\\n+  (__builtin_nds32_cctl_va_wbinval_la ((subtype), (va)))\n+#define __nds32__cctlva_wbinval_one_lvl(subtype, va) \\\n+  (__builtin_nds32_cctl_va_wbinval_l1 ((subtype), (va)))\n+#define __nds32__cctlidx_read(subtype, idx) \\\n+  (__builtin_nds32_cctl_idx_read ((subtype), (idx)))\n+#define __nds32__cctlidx_write(subtype, b, idxw) \\\n+  (__builtin_nds32_cctl_idx_write ((subtype), (b), (idxw)))\n+#define __nds32__cctl_l1d_invalall()  \\\n+  (__builtin_nds32_cctl_l1d_invalall())\n+#define __nds32__cctl_l1d_wball_alvl() \\\n+  (__builtin_nds32_cctl_l1d_wball_alvl())\n+#define __nds32__cctl_l1d_wball_one_lvl() \\\n+  (__builtin_nds32_cctl_l1d_wball_one_lvl())\n+\n #define __nds32__fcpynsd(a, b) \\\n   (__builtin_nds32_fcpynsd ((a), (b)))\n #define __nds32__fcpynss(a, b) \\"}, {"sha": "e60b4b7e63469c8cf6da418434996ee6736b256e", "filename": "gcc/config/nds32/pipelines.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19/gcc%2Fconfig%2Fnds32%2Fpipelines.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19/gcc%2Fconfig%2Fnds32%2Fpipelines.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fpipelines.md?ref=f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19", "patch": "@@ -23,7 +23,7 @@\n (define_cpu_unit \"general_unit\" \"nds32_machine\")\n \n (define_insn_reservation \"simple_insn\" 1\n-\t\t\t (eq_attr \"type\" \"unknown,load,store,load_multiple,store_multiple,alu,alu_shift,mul,mac,div,branch,misc\")\n+\t\t\t (eq_attr \"type\" \"unknown,load,store,load_multiple,store_multiple,alu,alu_shift,mul,mac,div,branch,mmu,misc\")\n \t\t\t \"general_unit\")\n \n ;; ------------------------------------------------------------------------"}]}