{"sha": "1448093c327947d4b1a644c42ef82ce064d1dc31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ0ODA5M2MzMjc5NDdkNGIxYTY0NGM0MmVmODJjZTA2NGQxZGMzMQ==", "commit": {"author": {"name": "Tristan Gingold", "email": "gingold@adacore.com", "date": "2013-11-11T16:55:29Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-11-11T16:55:29Z"}, "message": "tree.h (CONSTRUCTOR_NO_CLEARING): Define.\n\n\t* tree.h (CONSTRUCTOR_NO_CLEARING): Define.\n\t* tree-core.h (CONSTRUCTOR_NO_CLEARING): Document it.\n\t* tree.def (CONSTRUCTOR): Likewise.\n\t* doc/generic.texi (CONSTRUCTOR): Likewise.  Update description.\n\t* gimplify.c (gimplify_init_constructor): Do not clear the object when\n\tthe constructor is incomplete and CONSTRUCTOR_NO_CLEARING is set.\nada/\n\t* gcc-interface/utils2.c (gnat_build_constructor): Also set the flag\n\tCONSTRUCTOR_NO_CLEARING on the constructor.\n\nFrom-SVN: r204677", "tree": {"sha": "9d801bea0646b4030a6ef1115de2690dafea369c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d801bea0646b4030a6ef1115de2690dafea369c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1448093c327947d4b1a644c42ef82ce064d1dc31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1448093c327947d4b1a644c42ef82ce064d1dc31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1448093c327947d4b1a644c42ef82ce064d1dc31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1448093c327947d4b1a644c42ef82ce064d1dc31/comments", "author": {"login": "gingold-adacore", "id": 16334725, "node_id": "MDQ6VXNlcjE2MzM0NzI1", "avatar_url": "https://avatars.githubusercontent.com/u/16334725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gingold-adacore", "html_url": "https://github.com/gingold-adacore", "followers_url": "https://api.github.com/users/gingold-adacore/followers", "following_url": "https://api.github.com/users/gingold-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/gingold-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/gingold-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gingold-adacore/subscriptions", "organizations_url": "https://api.github.com/users/gingold-adacore/orgs", "repos_url": "https://api.github.com/users/gingold-adacore/repos", "events_url": "https://api.github.com/users/gingold-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/gingold-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7008512d47e0b608da552569a5e2bb2eb1789bae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7008512d47e0b608da552569a5e2bb2eb1789bae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7008512d47e0b608da552569a5e2bb2eb1789bae"}], "stats": {"total": 76, "additions": 51, "deletions": 25}, "files": [{"sha": "ca7e6a01f0ce15e566a3a06abd9069e8778da07a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1448093c327947d4b1a644c42ef82ce064d1dc31/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1448093c327947d4b1a644c42ef82ce064d1dc31/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1448093c327947d4b1a644c42ef82ce064d1dc31", "patch": "@@ -1,8 +1,17 @@\n+2013-11-11  Tristan Gingold  <gingold@adacore.com>\n+\t    Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree.h (CONSTRUCTOR_NO_CLEARING): Define.\n+\t* tree-core.h (CONSTRUCTOR_NO_CLEARING): Document it.\n+\t* tree.def (CONSTRUCTOR): Likewise.\n+\t* doc/generic.texi (CONSTRUCTOR): Likewise.  Update description.\n+\t* gimplify.c (gimplify_init_constructor): Do not clear the object when\n+\tthe constructor is incomplete and CONSTRUCTOR_NO_CLEARING is set.\n \n 2013-11-11  Basile Starynkevitch  <basile@starynkevitch.net>\n \n-         * toplev.c (toplev_main): Move PLUGIN_FINISH invocation before\n-           diagnostic_finish.\n+\t* toplev.c (toplev_main): Move PLUGIN_FINISH invocation before\n+\tdiagnostic_finish.\n \n 2013-11-11  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n "}, {"sha": "a5c9456e4c575ac88d5511e07fcaa12c3394722b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1448093c327947d4b1a644c42ef82ce064d1dc31/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1448093c327947d4b1a644c42ef82ce064d1dc31/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1448093c327947d4b1a644c42ef82ce064d1dc31", "patch": "@@ -1,3 +1,9 @@\n+2013-11-11  Tristan Gingold  <gingold@adacore.com>\n+\t    Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils2.c (gnat_build_constructor): Also set the flag\n+\tCONSTRUCTOR_NO_CLEARING on the constructor.\n+\n 2013-10-30  Sharad Singhai  <singhai@google.com>\n \n \t* gnat_ugn.texi: Remove option description for PR middle-end/58134."}, {"sha": "9410b4083bf25ae23fb2402e523601d5eb3fe8a9", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1448093c327947d4b1a644c42ef82ce064d1dc31/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1448093c327947d4b1a644c42ef82ce064d1dc31/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=1448093c327947d4b1a644c42ef82ce064d1dc31", "patch": "@@ -1874,6 +1874,7 @@ gnat_build_constructor (tree type, vec<constructor_elt, va_gc> *v)\n     v->qsort (compare_elmt_bitpos);\n \n   result = build_constructor (type, v);\n+  CONSTRUCTOR_NO_CLEARING (result) = 1;\n   TREE_CONSTANT (result) = TREE_STATIC (result) = allconstant;\n   TREE_SIDE_EFFECTS (result) = side_effects;\n   TREE_READONLY (result) = TYPE_READONLY (type) || allconstant;"}, {"sha": "f2dd0ffae65deee306806035144fda67d75d8666", "filename": "gcc/doc/generic.texi", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1448093c327947d4b1a644c42ef82ce064d1dc31/gcc%2Fdoc%2Fgeneric.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1448093c327947d4b1a644c42ef82ce064d1dc31/gcc%2Fdoc%2Fgeneric.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgeneric.texi?ref=1448093c327947d4b1a644c42ef82ce064d1dc31", "patch": "@@ -1616,29 +1616,31 @@ of temporaries during the evaluation of that expression should be\n performed immediately after the expression is evaluated.\n \n @item CONSTRUCTOR\n-These nodes represent the brace-enclosed initializers for a structure or\n-array.  The first operand is reserved for use by the back end.  The\n-second operand is a @code{TREE_LIST}.  If the @code{TREE_TYPE} of the\n-@code{CONSTRUCTOR} is a @code{RECORD_TYPE} or @code{UNION_TYPE}, then\n-the @code{TREE_PURPOSE} of each node in the @code{TREE_LIST} will be a\n-@code{FIELD_DECL} and the @code{TREE_VALUE} of each node will be the\n-expression used to initialize that field.\n-\n-If the @code{TREE_TYPE} of the @code{CONSTRUCTOR} is an\n-@code{ARRAY_TYPE}, then the @code{TREE_PURPOSE} of each element in the\n-@code{TREE_LIST} will be an @code{INTEGER_CST} or a @code{RANGE_EXPR} of\n-two @code{INTEGER_CST}s.  A single @code{INTEGER_CST} indicates which\n-element of the array (indexed from zero) is being assigned to.  A\n-@code{RANGE_EXPR} indicates an inclusive range of elements to\n-initialize.  In both cases the @code{TREE_VALUE} is the corresponding\n+These nodes represent the brace-enclosed initializers for a structure or an\n+array.  They contain a sequence of component values made out of a vector of\n+constructor_elt, which is a (@code{INDEX}, @code{VALUE}) pair.\n+\n+If the @code{TREE_TYPE} of the @code{CONSTRUCTOR} is a @code{RECORD_TYPE},\n+@code{UNION_TYPE} or @code{QUAL_UNION_TYPE} then the @code{INDEX} of each\n+node in the sequence will be a @code{FIELD_DECL} and the @code{VALUE} will\n+be the expression used to initialize that field.\n+\n+If the @code{TREE_TYPE} of the @code{CONSTRUCTOR} is an @code{ARRAY_TYPE},\n+then the @code{INDEX} of each node in the sequence will be an\n+@code{INTEGER_CST} or a @code{RANGE_EXPR} of two @code{INTEGER_CST}s.\n+A single @code{INTEGER_CST} indicates which element of the array is being\n+assigned to.  A @code{RANGE_EXPR} indicates an inclusive range of elements\n+to initialize.  In both cases the @code{VALUE} is the corresponding\n initializer.  It is re-evaluated for each element of a\n-@code{RANGE_EXPR}.  If the @code{TREE_PURPOSE} is @code{NULL_TREE}, then\n+@code{RANGE_EXPR}.  If the @code{INDEX} is @code{NULL_TREE}, then\n the initializer is for the next available array element.\n \n In the front end, you should not depend on the fields appearing in any\n particular order.  However, in the middle end, fields must appear in\n declaration order.  You should not assume that all fields will be\n-represented.  Unrepresented fields will be set to zero.\n+represented.  Unrepresented fields will be cleared (zeroed), unless the\n+CONSTRUCTOR_NO_CLEARING flag is set, in which case their value becomes\n+undefined.\n \n @item COMPOUND_LITERAL_EXPR\n @findex COMPOUND_LITERAL_EXPR_DECL_EXPR"}, {"sha": "94ff7f85b16faf33bfc15ccf3213aeb5715226dd", "filename": "gcc/tree-core.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1448093c327947d4b1a644c42ef82ce064d1dc31/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1448093c327947d4b1a644c42ef82ce064d1dc31/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=1448093c327947d4b1a644c42ef82ce064d1dc31", "patch": "@@ -831,6 +831,9 @@ struct GTY(()) tree_base {\n            VAR_DECL, FUNCTION_DECL\n            IDENTIFIER_NODE\n \n+       CONSTRUCTOR_NO_CLEARING in\n+           CONSTRUCTOR\n+\n        ASM_VOLATILE_P in\n            ASM_EXPR\n "}, {"sha": "6763e78835fa6413773ada26a65508b7b3e9324e", "filename": "gcc/tree.def", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1448093c327947d4b1a644c42ef82ce064d1dc31/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1448093c327947d4b1a644c42ef82ce064d1dc31/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=1448093c327947d4b1a644c42ef82ce064d1dc31", "patch": "@@ -445,10 +445,12 @@ DEFTREECODE (INDIRECT_REF, \"indirect_ref\", tcc_reference, 1)\n    OBJ_TYPE_REF_TOKEN: An integer index to the virtual method table.  */\n DEFTREECODE (OBJ_TYPE_REF, \"obj_type_ref\", tcc_expression, 3)\n \n-/* Constructor: return an aggregate value made from specified components.\n-   In C, this is used only for structure and array initializers.\n-   The operand is a sequence of component values made out of a VEC of\n-   struct constructor_elt.\n+/* Used to represent the brace-enclosed initializers for a structure or an\n+   array.  It contains a sequence of component values made out of a VEC of\n+   constructor_elt.\n+\n+   For RECORD_TYPE, UNION_TYPE, or QUAL_UNION_TYPE:\n+   The field INDEX of each constructor_elt is a FIELD_DECL.\n \n    For ARRAY_TYPE:\n    The field INDEX of each constructor_elt is the corresponding index.\n@@ -457,8 +459,9 @@ DEFTREECODE (OBJ_TYPE_REF, \"obj_type_ref\", tcc_expression, 3)\n    has side-effects, they are evaluated once for each element.  Wrap the\n    value in a SAVE_EXPR if you want to evaluate side effects only once.)\n \n-   For RECORD_TYPE, UNION_TYPE, or QUAL_UNION_TYPE:\n-   The field INDEX of each node is a FIELD_DECL.  */\n+   Components that aren't present are cleared as per the C semantics,\n+   unless the CONSTRUCTOR_NO_CLEARING flag is set, in which case their\n+   value becomes undefined.  */\n DEFTREECODE (CONSTRUCTOR, \"constructor\", tcc_exceptional, 0)\n \n /* The expression types are mostly straightforward, with the fourth argument"}, {"sha": "3633caf183919a148080b80d01f934689a82f4fe", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1448093c327947d4b1a644c42ef82ce064d1dc31/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1448093c327947d4b1a644c42ef82ce064d1dc31/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=1448093c327947d4b1a644c42ef82ce064d1dc31", "patch": "@@ -957,6 +957,8 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n   (&(*CONSTRUCTOR_ELTS (NODE))[IDX])\n #define CONSTRUCTOR_NELTS(NODE) \\\n   (vec_safe_length (CONSTRUCTOR_ELTS (NODE)))\n+#define CONSTRUCTOR_NO_CLEARING(NODE) \\\n+  (CONSTRUCTOR_CHECK (NODE)->base.public_flag)\n \n /* Iterate through the vector V of CONSTRUCTOR_ELT elements, yielding the\n    value of each element (stored within VAL). IX must be a scratch variable"}]}