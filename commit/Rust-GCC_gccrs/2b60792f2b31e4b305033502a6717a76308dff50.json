{"sha": "2b60792f2b31e4b305033502a6717a76308dff50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI2MDc5MmYyYjMxZTRiMzA1MDMzNTAyYTY3MTdhNzYzMDhkZmY1MA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-01-08T22:17:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-01-08T22:17:43Z"}, "message": "builtins.c (fold_builtin_int_roundingfn): Use fit_double_type.\n\n2007-01-08  Richard Guenther  <rguenther@suse.de>\n\n\t* builtins.c (fold_builtin_int_roundingfn): Use fit_double_type.\n\t* tree.c (build_int_cst_type): Likewise.\n\t(size_in_bytes): Don't call force_fit_type on the result.\n\t(int_fits_type_p): Use fit_double_type.\n\t* fold-const.c (fit_double_type): New function.\n\t(force_fit_type): Use it.\n\t* tree.h (fit_double_type): Export.\n\nFrom-SVN: r120593", "tree": {"sha": "97a13c6eafb874c8f14484040aaf7da2c160f41f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97a13c6eafb874c8f14484040aaf7da2c160f41f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b60792f2b31e4b305033502a6717a76308dff50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b60792f2b31e4b305033502a6717a76308dff50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b60792f2b31e4b305033502a6717a76308dff50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b60792f2b31e4b305033502a6717a76308dff50/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "61fcaeefb219b791d9161525fb2fd83066693898", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61fcaeefb219b791d9161525fb2fd83066693898", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61fcaeefb219b791d9161525fb2fd83066693898"}], "stats": {"total": 205, "additions": 100, "deletions": 105}, "files": [{"sha": "319ed86804508680395759f62c04cd2a494ef053", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b60792f2b31e4b305033502a6717a76308dff50/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b60792f2b31e4b305033502a6717a76308dff50/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b60792f2b31e4b305033502a6717a76308dff50", "patch": "@@ -1,3 +1,13 @@\n+2007-01-08  Richard Guenther  <rguenther@suse.de>\n+\n+\t* builtins.c (fold_builtin_int_roundingfn): Use fit_double_type.\n+\t* tree.c (build_int_cst_type): Likewise.\n+\t(size_in_bytes): Don't call force_fit_type on the result.\n+\t(int_fits_type_p): Use fit_double_type.\n+\t* fold-const.c (fit_double_type): New function.\n+\t(force_fit_type): Use it.\n+\t* tree.h (fit_double_type): Export.\n+\n 2007-01-08  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-vectorizer.c (gate_increase_alignment): Fix return type."}, {"sha": "a39a4c1624132602f8b9f116ed789a3fa01eeeb7", "filename": "gcc/builtins.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b60792f2b31e4b305033502a6717a76308dff50/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b60792f2b31e4b305033502a6717a76308dff50/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=2b60792f2b31e4b305033502a6717a76308dff50", "patch": "@@ -7576,7 +7576,8 @@ fold_builtin_int_roundingfn (tree fndecl, tree arglist)\n       if (! REAL_VALUE_ISNAN (x) && ! REAL_VALUE_ISINF (x))\n \t{\n \t  tree itype = TREE_TYPE (TREE_TYPE (fndecl));\n-\t  tree ftype = TREE_TYPE (arg), result;\n+\t  tree ftype = TREE_TYPE (arg);\n+\t  unsigned HOST_WIDE_INT lo2;\n \t  HOST_WIDE_INT hi, lo;\n \t  REAL_VALUE_TYPE r;\n \n@@ -7602,11 +7603,8 @@ fold_builtin_int_roundingfn (tree fndecl, tree arglist)\n \t    }\n \n \t  REAL_VALUE_TO_INT (&lo, &hi, r);\n-\t  result = build_int_cst_wide (itype, lo, hi);\n-\t  result = force_fit_type (result, 0, false, false);\n-\t  if (TREE_INT_CST_LOW (result) == lo\n-\t      && TREE_INT_CST_HIGH (result) == hi)\n-\t    return result;\n+\t  if (!fit_double_type (lo, hi, &lo2, &hi, itype))\n+\t    return build_int_cst_wide (itype, lo2, hi);\n \t}\n     }\n "}, {"sha": "d082ed3408857dac3f9593133db394889ff5866a", "filename": "gcc/fold-const.c", "status": "modified", "additions": 72, "deletions": 44, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b60792f2b31e4b305033502a6717a76308dff50/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b60792f2b31e4b305033502a6717a76308dff50/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=2b60792f2b31e4b305033502a6717a76308dff50", "patch": "@@ -192,87 +192,115 @@ decode (HOST_WIDE_INT *words, unsigned HOST_WIDE_INT *low,\n   *hi = words[2] + words[3] * BASE;\n }\n \f\n-/* T is an INT_CST node.  OVERFLOWABLE indicates if we are interested\n-   in overflow of the value, when >0 we are only interested in signed\n-   overflow, for <0 we are interested in any overflow.  OVERFLOWED\n-   indicates whether overflow has already occurred.  CONST_OVERFLOWED\n-   indicates whether constant overflow has already occurred.  We force\n-   T's value to be within range of T's type (by setting to 0 or 1 all\n-   the bits outside the type's range).  We set TREE_OVERFLOWED if,\n-  \tOVERFLOWED is nonzero,\n-\tor OVERFLOWABLE is >0 and signed overflow occurs\n-\tor OVERFLOWABLE is <0 and any overflow occurs\n-   We set TREE_CONSTANT_OVERFLOWED if,\n-        CONST_OVERFLOWED is nonzero\n-\tor we set TREE_OVERFLOWED.\n-  We return either the original T, or a copy.  */\n+/* Force the double-word integer L1, H1 to be within the range of the\n+   integer type TYPE.  Stores the properly truncated and sign-extended\n+   double-word integer in *LV, *HV.  Returns true if the operation\n+   overflows, that is, argument and result are different.  */\n \n-tree\n-force_fit_type (tree t, int overflowable,\n-\t\tbool overflowed, bool overflowed_const)\n+int\n+fit_double_type (unsigned HOST_WIDE_INT l1, HOST_WIDE_INT h1,\n+\t\t unsigned HOST_WIDE_INT *lv, HOST_WIDE_INT *hv, tree type)\n {\n-  unsigned HOST_WIDE_INT low;\n-  HOST_WIDE_INT high;\n+  unsigned HOST_WIDE_INT low0 = l1;\n+  HOST_WIDE_INT high0 = h1;\n   unsigned int prec;\n   int sign_extended_type;\n \n-  gcc_assert (TREE_CODE (t) == INTEGER_CST);\n-\n-  low = TREE_INT_CST_LOW (t);\n-  high = TREE_INT_CST_HIGH (t);\n-\n-  if (POINTER_TYPE_P (TREE_TYPE (t))\n-      || TREE_CODE (TREE_TYPE (t)) == OFFSET_TYPE)\n+  if (POINTER_TYPE_P (type)\n+      || TREE_CODE (type) == OFFSET_TYPE)\n     prec = POINTER_SIZE;\n   else\n-    prec = TYPE_PRECISION (TREE_TYPE (t));\n+    prec = TYPE_PRECISION (type);\n+\n   /* Size types *are* sign extended.  */\n-  sign_extended_type = (!TYPE_UNSIGNED (TREE_TYPE (t))\n-\t\t\t|| (TREE_CODE (TREE_TYPE (t)) == INTEGER_TYPE\n-\t\t\t    && TYPE_IS_SIZETYPE (TREE_TYPE (t))));\n+  sign_extended_type = (!TYPE_UNSIGNED (type)\n+\t\t\t|| (TREE_CODE (type) == INTEGER_TYPE\n+\t\t\t    && TYPE_IS_SIZETYPE (type)));\n \n   /* First clear all bits that are beyond the type's precision.  */\n-\n   if (prec >= 2 * HOST_BITS_PER_WIDE_INT)\n     ;\n   else if (prec > HOST_BITS_PER_WIDE_INT)\n-    high &= ~((HOST_WIDE_INT) (-1) << (prec - HOST_BITS_PER_WIDE_INT));\n+    h1 &= ~((HOST_WIDE_INT) (-1) << (prec - HOST_BITS_PER_WIDE_INT));\n   else\n     {\n-      high = 0;\n+      h1 = 0;\n       if (prec < HOST_BITS_PER_WIDE_INT)\n-\tlow &= ~((HOST_WIDE_INT) (-1) << prec);\n+\tl1 &= ~((HOST_WIDE_INT) (-1) << prec);\n     }\n \n+  /* Then do sign extension if necessary.  */\n   if (!sign_extended_type)\n     /* No sign extension */;\n   else if (prec >= 2 * HOST_BITS_PER_WIDE_INT)\n     /* Correct width already.  */;\n   else if (prec > HOST_BITS_PER_WIDE_INT)\n     {\n       /* Sign extend top half? */\n-      if (high & ((unsigned HOST_WIDE_INT)1\n-\t\t  << (prec - HOST_BITS_PER_WIDE_INT - 1)))\n-\thigh |= (HOST_WIDE_INT) (-1) << (prec - HOST_BITS_PER_WIDE_INT);\n+      if (h1 & ((unsigned HOST_WIDE_INT)1\n+\t\t<< (prec - HOST_BITS_PER_WIDE_INT - 1)))\n+\th1 |= (HOST_WIDE_INT) (-1) << (prec - HOST_BITS_PER_WIDE_INT);\n     }\n   else if (prec == HOST_BITS_PER_WIDE_INT)\n     {\n-      if ((HOST_WIDE_INT)low < 0)\n-\thigh = -1;\n+      if ((HOST_WIDE_INT)l1 < 0)\n+\th1 = -1;\n     }\n   else\n     {\n       /* Sign extend bottom half? */\n-      if (low & ((unsigned HOST_WIDE_INT)1 << (prec - 1)))\n+      if (l1 & ((unsigned HOST_WIDE_INT)1 << (prec - 1)))\n \t{\n-\t  high = -1;\n-\t  low |= (HOST_WIDE_INT)(-1) << prec;\n+\t  h1 = -1;\n+\t  l1 |= (HOST_WIDE_INT)(-1) << prec;\n \t}\n     }\n \n+  *lv = l1;\n+  *hv = h1;\n+\n+  /* If the value didn't fit, signal overflow.  */\n+  return l1 != low0 || h1 != high0;\n+}\n+\n+/* T is an INT_CST node.  OVERFLOWABLE indicates if we are interested\n+   in overflow of the value, when >0 we are only interested in signed\n+   overflow, for <0 we are interested in any overflow.  OVERFLOWED\n+   indicates whether overflow has already occurred.  CONST_OVERFLOWED\n+   indicates whether constant overflow has already occurred.  We force\n+   T's value to be within range of T's type (by setting to 0 or 1 all\n+   the bits outside the type's range).  We set TREE_OVERFLOWED if,\n+  \tOVERFLOWED is nonzero,\n+\tor OVERFLOWABLE is >0 and signed overflow occurs\n+\tor OVERFLOWABLE is <0 and any overflow occurs\n+   We set TREE_CONSTANT_OVERFLOWED if,\n+        CONST_OVERFLOWED is nonzero\n+\tor we set TREE_OVERFLOWED.\n+  We return either the original T, or a copy.  */\n+\n+tree\n+force_fit_type (tree t, int overflowable,\n+\t\tbool overflowed, bool overflowed_const)\n+{\n+  unsigned HOST_WIDE_INT low;\n+  HOST_WIDE_INT high;\n+  int sign_extended_type;\n+  bool overflow;\n+\n+  gcc_assert (TREE_CODE (t) == INTEGER_CST);\n+\n+  /* Size types *are* sign extended.  */\n+  sign_extended_type = (!TYPE_UNSIGNED (TREE_TYPE (t))\n+\t\t\t|| (TREE_CODE (TREE_TYPE (t)) == INTEGER_TYPE\n+\t\t\t    && TYPE_IS_SIZETYPE (TREE_TYPE (t))));\n+\n+  low = TREE_INT_CST_LOW (t);\n+  high = TREE_INT_CST_HIGH (t);\n+\n+  overflow = fit_double_type (low, high, &low, &high, TREE_TYPE (t));\n+\n   /* If the value changed, return a new node.  */\n-  if (overflowed || overflowed_const\n-      || low != TREE_INT_CST_LOW (t) || high != TREE_INT_CST_HIGH (t))\n+  if (overflowed || overflowed_const || overflow)\n     {\n       t = build_int_cst_wide (TREE_TYPE (t), low, high);\n "}, {"sha": "348d288f50fb554bb55b9597f949480498fa35c5", "filename": "gcc/tree.c", "status": "modified", "additions": 12, "deletions": 55, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b60792f2b31e4b305033502a6717a76308dff50/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b60792f2b31e4b305033502a6717a76308dff50/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=2b60792f2b31e4b305033502a6717a76308dff50", "patch": "@@ -779,53 +779,14 @@ build_int_cstu (tree type, unsigned HOST_WIDE_INT low)\n tree\n build_int_cst_type (tree type, HOST_WIDE_INT low)\n {\n-  unsigned HOST_WIDE_INT val = (unsigned HOST_WIDE_INT) low;\n-  unsigned HOST_WIDE_INT hi, mask;\n-  unsigned bits;\n-  bool signed_p;\n-  bool negative;\n+  unsigned HOST_WIDE_INT low1;\n+  HOST_WIDE_INT hi;\n \n-  if (!type)\n-    type = integer_type_node;\n-\n-  bits = TYPE_PRECISION (type);\n-  signed_p = !TYPE_UNSIGNED (type);\n-\n-  if (bits >= HOST_BITS_PER_WIDE_INT)\n-    negative = (low < 0);\n-  else\n-    {\n-      /* If the sign bit is inside precision of LOW, use it to determine\n-\t the sign of the constant.  */\n-      negative = ((val >> (bits - 1)) & 1) != 0;\n-\n-      /* Mask out the bits outside of the precision of the constant.  */\n-      mask = (((unsigned HOST_WIDE_INT) 2) << (bits - 1)) - 1;\n-\n-      if (signed_p && negative)\n-\tval |= ~mask;\n-      else\n-\tval &= mask;\n-    }\n-\n-  /* Determine the high bits.  */\n-  hi = (negative ? ~(unsigned HOST_WIDE_INT) 0 : 0);\n+  gcc_assert (type);\n \n-  /* For unsigned type we need to mask out the bits outside of the type\n-     precision.  */\n-  if (!signed_p)\n-    {\n-      if (bits <= HOST_BITS_PER_WIDE_INT)\n-\thi = 0;\n-      else\n-\t{\n-\t  bits -= HOST_BITS_PER_WIDE_INT;\n-\t  mask = (((unsigned HOST_WIDE_INT) 2) << (bits - 1)) - 1;\n-\t  hi &= mask;\n-\t}\n-    }\n+  fit_double_type (low, low < 0 ? -1 : 0, &low1, &hi, type);\n \n-  return build_int_cst_wide (type, val, hi);\n+  return build_int_cst_wide (type, low1, hi);\n }\n \n /* These are the hash table functions for the hash table of INTEGER_CST\n@@ -1818,9 +1779,6 @@ size_in_bytes (tree type)\n       return size_zero_node;\n     }\n \n-  if (TREE_CODE (t) == INTEGER_CST)\n-    t = force_fit_type (t, 0, false, false);\n-\n   return t;\n }\n \n@@ -6009,12 +5967,13 @@ int_fits_type_p (tree c, tree type)\n   tree type_low_bound = TYPE_MIN_VALUE (type);\n   tree type_high_bound = TYPE_MAX_VALUE (type);\n   bool ok_for_low_bound, ok_for_high_bound;\n-  tree tmp;\n+  unsigned HOST_WIDE_INT low;\n+  HOST_WIDE_INT high;\n \n   /* If at least one bound of the type is a constant integer, we can check\n      ourselves and maybe make a decision. If no such decision is possible, but\n      this type is a subtype, try checking against that.  Otherwise, use\n-     force_fit_type, which checks against the precision.\n+     fit_double_type, which checks against the precision.\n \n      Compute the status for each possibly constant bound, and return if we see\n      one does not match. Use ok_for_xxx_bound for this purpose, assigning -1\n@@ -6069,12 +6028,10 @@ int_fits_type_p (tree c, tree type)\n       && TYPE_PRECISION (type) == TYPE_PRECISION (TREE_TYPE (type)))\n     return int_fits_type_p (c, TREE_TYPE (type));\n \n-  /* Or to force_fit_type, if nothing else.  */\n-  tmp = copy_node (c);\n-  TREE_TYPE (tmp) = type;\n-  tmp = force_fit_type (tmp, -1, false, false);\n-  return TREE_INT_CST_HIGH (tmp) == TREE_INT_CST_HIGH (c)\n-         && TREE_INT_CST_LOW (tmp) == TREE_INT_CST_LOW (c);\n+  /* Or to fit_double_type, if nothing else.  */\n+  low = TREE_INT_CST_LOW (c);\n+  high = TREE_INT_CST_HIGH (c);\n+  return !fit_double_type (low, high, &low, &high, type);\n }\n \n /* Subprogram of following function.  Called by walk_tree."}, {"sha": "fd9e14a585ad4123e2800297d6f7e32afe5d3c8b", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b60792f2b31e4b305033502a6717a76308dff50/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b60792f2b31e4b305033502a6717a76308dff50/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=2b60792f2b31e4b305033502a6717a76308dff50", "patch": "@@ -4321,6 +4321,8 @@ extern tree fold_indirect_ref_1 (tree, tree);\n \n extern tree force_fit_type (tree, int, bool, bool);\n \n+extern int fit_double_type (unsigned HOST_WIDE_INT, HOST_WIDE_INT,\n+\t\t\t    unsigned HOST_WIDE_INT *, HOST_WIDE_INT *, tree);\n extern int add_double_with_sign (unsigned HOST_WIDE_INT, HOST_WIDE_INT,\n \t\t\t\t unsigned HOST_WIDE_INT, HOST_WIDE_INT,\n \t\t\t\t unsigned HOST_WIDE_INT *, HOST_WIDE_INT *,"}]}