{"sha": "ee9aa7b6637c3254a12f5887d9ca2b425543b5a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU5YWE3YjY2MzdjMzI1NGExMmY1ODg3ZDljYTJiNDI1NTQzYjVhMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-20T12:59:51Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-20T12:59:51Z"}, "message": "[multiple changes]\n\n2009-04-20  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_disp.adb (Find_Dispatching_Type): For subprograms internally\n\tgenerated by derivations of tagged types use the aliased subprogram a\n\treference to locate their controlling type.\n\n2009-04-20  Tristan Gingold  <gingold@adacore.com>\n\n\t* g-trasym.adb: Set size of result buffer before calling\n\tconvert_address.\n\n2009-04-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch4.adb (Valid_Candidate): When checking whether a prefixed call\n\tto a function returning an array can be interpreted as a call with\n\tdefaulted parameters whose result is indexed, take into account the\n\ttypes of all the indices of the array result type.\n\n2009-04-20  Pascal Obry  <obry@adacore.com>\n\n\t* a-direct.adb, s-os_lib.adb: Minor reformatting.\n\nFrom-SVN: r146411", "tree": {"sha": "ab7726b0a2ecb46134539f364db82c09ad20e775", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab7726b0a2ecb46134539f364db82c09ad20e775"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee9aa7b6637c3254a12f5887d9ca2b425543b5a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee9aa7b6637c3254a12f5887d9ca2b425543b5a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee9aa7b6637c3254a12f5887d9ca2b425543b5a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee9aa7b6637c3254a12f5887d9ca2b425543b5a0/comments", "author": null, "committer": null, "parents": [{"sha": "bddd6058a2b9c29980962301b65a911985a3e00d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bddd6058a2b9c29980962301b65a911985a3e00d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bddd6058a2b9c29980962301b65a911985a3e00d"}], "stats": {"total": 173, "additions": 134, "deletions": 39}, "files": [{"sha": "cde186e6a6aea700ae3053d4c984d40f43f84469", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee9aa7b6637c3254a12f5887d9ca2b425543b5a0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee9aa7b6637c3254a12f5887d9ca2b425543b5a0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ee9aa7b6637c3254a12f5887d9ca2b425543b5a0", "patch": "@@ -1,3 +1,25 @@\n+2009-04-20  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_disp.adb (Find_Dispatching_Type): For subprograms internally\n+\tgenerated by derivations of tagged types use the aliased subprogram a\n+\treference to locate their controlling type.\n+\n+2009-04-20  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* g-trasym.adb: Set size of result buffer before calling\n+\tconvert_address.\n+\n+2009-04-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Valid_Candidate): When checking whether a prefixed call\n+\tto a function returning an array can be interpreted as a call with\n+\tdefaulted parameters whose result is indexed, take into account the\n+\ttypes of all the indices of the array result type.\n+\n+2009-04-20  Pascal Obry  <obry@adacore.com>\n+\n+\t* a-direct.adb, s-os_lib.adb: Minor reformatting.\n+\n 2009-04-20  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch8.adb (Analyze_Object_Renaming): Proper checks on incorrect"}, {"sha": "db40b8c85be484e8105c03d7b38bf42edd6c60c0", "filename": "gcc/ada/a-direct.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee9aa7b6637c3254a12f5887d9ca2b425543b5a0/gcc%2Fada%2Fa-direct.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee9aa7b6637c3254a12f5887d9ca2b425543b5a0/gcc%2Fada%2Fa-direct.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-direct.adb?ref=ee9aa7b6637c3254a12f5887d9ca2b425543b5a0", "patch": "@@ -1154,8 +1154,7 @@ package body Ada.Directories is\n    end Simple_Name;\n \n    function Simple_Name\n-     (Directory_Entry : Directory_Entry_Type) return String\n-   is\n+     (Directory_Entry : Directory_Entry_Type) return String is\n    begin\n       --  First, the invalid case\n "}, {"sha": "6b048001dfa38b069947161345f9ce30dd8cd960", "filename": "gcc/ada/g-trasym.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee9aa7b6637c3254a12f5887d9ca2b425543b5a0/gcc%2Fada%2Fg-trasym.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee9aa7b6637c3254a12f5887d9ca2b425543b5a0/gcc%2Fada%2Fg-trasym.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-trasym.adb?ref=ee9aa7b6637c3254a12f5887d9ca2b425543b5a0", "patch": "@@ -77,7 +77,8 @@ package body GNAT.Traceback.Symbolic is\n       --  This is the procedure version of the Ada aware addr2line.  It places\n       --  in BUF a string representing the symbolic translation of the N_ADDRS\n       --  raw addresses provided in ADDRS, looked up in debug information from\n-      --  FILENAME.  LEN is filled with the result length.\n+      --  FILENAME.  LEN points to an integer which contains the size of the\n+      --  BUF buffer at input and the result length at output.\n       --\n       --  This procedure is provided by libaddr2line on targets that support\n       --  it. A dummy version is in adaint.c for other targets so that build\n@@ -125,6 +126,7 @@ package body GNAT.Traceback.Symbolic is\n       end if;\n \n       if Exename /= System.Null_Address then\n+         Len := Res'Length;\n          convert_addresses\n            (Exename, Traceback'Address, Traceback'Length,\n             Res (1)'Address, Len'Address);"}, {"sha": "41d1077c2c04b2ffdfcf89971388bdfb389e9a01", "filename": "gcc/ada/s-os_lib.adb", "status": "modified", "additions": 34, "deletions": 24, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee9aa7b6637c3254a12f5887d9ca2b425543b5a0/gcc%2Fada%2Fs-os_lib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee9aa7b6637c3254a12f5887d9ca2b425543b5a0/gcc%2Fada%2Fs-os_lib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.adb?ref=ee9aa7b6637c3254a12f5887d9ca2b425543b5a0", "patch": "@@ -1833,8 +1833,8 @@ package body System.OS_Lib is\n \n                --  By default, the drive letter on Windows is in upper case\n \n-               if On_Windows and then Path_Len >= 2 and then\n-                 Buffer (2) = ':'\n+               if On_Windows and then Path_Len >= 2\n+                 and then Buffer (2) = ':'\n                then\n                   System.Case_Util.To_Upper (Buffer (1 .. 1));\n                end if;\n@@ -1906,31 +1906,41 @@ package body System.OS_Lib is\n       --  it may have multiple equivalences and if resolved we will only\n       --  get the first one.\n \n-      --  On Windows, if we have an absolute path starting with a directory\n-      --  separator, we need to have the drive letter appended in front.\n+      if On_Windows then\n \n-      --  On Windows, Get_Current_Dir will return a suitable directory\n-      --  name (path starting with a drive letter on Windows). So we take this\n-      --  drive letter and prepend it to the current path.\n+         --  On Windows, if we have an absolute path starting with a directory\n+         --  separator, we need to have the drive letter appended in front.\n \n-      if On_Windows\n-        and then Path_Buffer (1) = Directory_Separator\n-        and then Path_Buffer (2) /= Directory_Separator\n-      then\n-         declare\n-            Cur_Dir : constant String := Get_Directory (\"\");\n-            --  Get the current directory to get the drive letter\n+         --  On Windows, Get_Current_Dir will return a suitable directory name\n+         --  (path starting with a drive letter on Windows). So we take this\n+         --  drive letter and prepend it to the current path.\n \n-         begin\n-            if Cur_Dir'Length > 2\n-              and then Cur_Dir (Cur_Dir'First + 1) = ':'\n-            then\n-               Path_Buffer (3 .. End_Path + 2) := Path_Buffer (1 .. End_Path);\n-               Path_Buffer (1 .. 2) :=\n-                 Cur_Dir (Cur_Dir'First .. Cur_Dir'First + 1);\n-               End_Path := End_Path + 2;\n-            end if;\n-         end;\n+         if Path_Buffer (1) = Directory_Separator\n+           and then Path_Buffer (2) /= Directory_Separator\n+         then\n+            declare\n+               Cur_Dir : constant String := Get_Directory (\"\");\n+               --  Get the current directory to get the drive letter\n+\n+            begin\n+               if Cur_Dir'Length > 2\n+                 and then Cur_Dir (Cur_Dir'First + 1) = ':'\n+               then\n+                  Path_Buffer (3 .. End_Path + 2) :=\n+                    Path_Buffer (1 .. End_Path);\n+                  Path_Buffer (1 .. 2) :=\n+                    Cur_Dir (Cur_Dir'First .. Cur_Dir'First + 1);\n+                  End_Path := End_Path + 2;\n+               end if;\n+            end;\n+\n+         --  We have a drive letter, ensure it is upper-case\n+\n+         elsif Path_Buffer (1) in 'a' .. 'z'\n+           and then Path_Buffer (2) = ':'\n+         then\n+            System.Case_Util.To_Upper (Path_Buffer (1 .. 1));\n+         end if;\n       end if;\n \n       --  On Windows, remove all double-quotes that are possibly part of the"}, {"sha": "d86cfd473987810e03f935c0666be2a43d9e928e", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee9aa7b6637c3254a12f5887d9ca2b425543b5a0/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee9aa7b6637c3254a12f5887d9ca2b425543b5a0/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=ee9aa7b6637c3254a12f5887d9ca2b425543b5a0", "patch": "@@ -5829,6 +5829,7 @@ package body Sem_Ch4 is\n          Call    : Node_Id;\n          Subp    : Entity_Id) return Entity_Id\n       is\n+         Arr_Type  : Entity_Id;\n          Comp_Type : Entity_Id;\n \n       begin\n@@ -5844,26 +5845,59 @@ package body Sem_Ch4 is\n          --  If the call may be an indexed call, retrieve component type of\n          --  resulting expression, and add possible interpretation.\n \n+         Arr_Type  := Empty;\n          Comp_Type := Empty;\n \n          if Nkind (Call) = N_Function_Call\n            and then Nkind (Parent (N)) = N_Indexed_Component\n            and then Needs_One_Actual (Subp)\n          then\n             if Is_Array_Type (Etype (Subp)) then\n-               Comp_Type := Component_Type (Etype (Subp));\n+               Arr_Type := Etype (Subp);\n \n             elsif Is_Access_Type (Etype (Subp))\n               and then Is_Array_Type (Designated_Type (Etype (Subp)))\n             then\n-               Comp_Type := Component_Type (Designated_Type (Etype (Subp)));\n+               Arr_Type := Designated_Type (Etype (Subp));\n             end if;\n          end if;\n \n-         if Present (Comp_Type)\n-           and then Etype (Subprog) /= Comp_Type\n-         then\n-            Add_One_Interp (Subprog, Subp, Comp_Type);\n+         if Present (Arr_Type) then\n+\n+            --  Verify that the actuals (excluding the object)\n+            --  match the types of the indices.\n+\n+            declare\n+               Actual : Node_Id;\n+               Index  : Node_Id;\n+\n+            begin\n+               Actual := Next (First_Actual (Call));\n+               Index  := First_Index (Arr_Type);\n+\n+               while Present (Actual) and then Present (Index) loop\n+                  if not Has_Compatible_Type (Actual, Etype (Index)) then\n+                     Arr_Type := Empty;\n+                     exit;\n+                  end if;\n+\n+                  Next_Actual (Actual);\n+                  Next_Index  (Index);\n+               end loop;\n+\n+               if No (Actual)\n+                  and then No (Index)\n+                  and then Present (Arr_Type)\n+               then\n+                  Comp_Type := Component_Type (Arr_Type);\n+               end if;\n+            end;\n+\n+            if Present (Comp_Type)\n+              and then Etype (Subprog) /= Comp_Type\n+            then\n+               Add_One_Interp (Subprog, Subp, Comp_Type);\n+            end if;\n          end if;\n \n          if Etype (Call) /= Any_Type then"}, {"sha": "33044b3a810d51fd00cfbb6e0679751bbe6d258d", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 34, "deletions": 6, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee9aa7b6637c3254a12f5887d9ca2b425543b5a0/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee9aa7b6637c3254a12f5887d9ca2b425543b5a0/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=ee9aa7b6637c3254a12f5887d9ca2b425543b5a0", "patch": "@@ -1395,13 +1395,45 @@ package body Sem_Disp is\n    ---------------------------\n \n    function Find_Dispatching_Type (Subp : Entity_Id) return Entity_Id is\n+      A_Formal  : Entity_Id;\n       Formal    : Entity_Id;\n       Ctrl_Type : Entity_Id;\n \n    begin\n       if Present (DTC_Entity (Subp)) then\n          return Scope (DTC_Entity (Subp));\n \n+      --  For subprograms internally generated by derivations of tagged types\n+      --  use the alias subprogram as a reference to locate the dispatching\n+      --  type of Subp\n+\n+      elsif not Comes_From_Source (Subp)\n+        and then Present (Alias (Subp))\n+        and then Is_Dispatching_Operation (Alias (Subp))\n+      then\n+         if Ekind (Alias (Subp)) = E_Function\n+           and then Has_Controlling_Result (Alias (Subp))\n+         then\n+            return Check_Controlling_Type (Etype (Subp), Subp);\n+\n+         else\n+            Formal   := First_Formal (Subp);\n+            A_Formal := First_Formal (Alias (Subp));\n+            while Present (A_Formal) loop\n+               if Is_Controlling_Formal (A_Formal) then\n+                  return Check_Controlling_Type (Etype (Formal), Subp);\n+               end if;\n+\n+               Next_Formal (Formal);\n+               Next_Formal (A_Formal);\n+            end loop;\n+\n+            pragma Assert (False);\n+            return Empty;\n+         end if;\n+\n+      --  General case\n+\n       else\n          Formal := First_Formal (Subp);\n          while Present (Formal) loop\n@@ -1414,14 +1446,10 @@ package body Sem_Disp is\n             Next_Formal (Formal);\n          end loop;\n \n-      --  The subprogram may also be dispatching on result\n+         --  The subprogram may also be dispatching on result\n \n          if Present (Etype (Subp)) then\n-            Ctrl_Type := Check_Controlling_Type (Etype (Subp), Subp);\n-\n-            if Present (Ctrl_Type) then\n-               return Ctrl_Type;\n-            end if;\n+            return Check_Controlling_Type (Etype (Subp), Subp);\n          end if;\n       end if;\n "}]}