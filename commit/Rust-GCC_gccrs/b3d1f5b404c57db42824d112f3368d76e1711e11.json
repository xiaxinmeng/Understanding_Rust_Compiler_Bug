{"sha": "b3d1f5b404c57db42824d112f3368d76e1711e11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNkMWY1YjQwNGM1N2RiNDI4MjRkMTEyZjMzNjhkNzZlMTcxMWUxMQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-08-23T11:57:02Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-08-23T11:57:02Z"}, "message": "Makefile.in (BUILD_ERRORS): Set to build-errors.\n\n\t* Makefile.in (BUILD_ERRORS): Set to build-errors.\n\t(errors.o): New target for host.\n\t(build-errors.o): New target for build.\n\t(genobjs): Replace errors.o with build-errors.\n\t(gengenrtl$(buildexeext)): Add $(BUILD_ERRORS).\n\t(GCOV_OBJS, GCOV_DUMP_OBJS): Add errors.o.\n\t(fix-headers$(build_exeext)): Add $(BUILD_ERRORS).\n\t(fix-header.o): Add errors.h\n\t* collect2.c (fancy_abort): Add parameters.\n\t* collect2.h (fancy_abort): Don't declare.\n\t* errors.h (fancy_abort): Don't declare.\n\t* errors.c: Include either bconfig.h or config.h.\n\t(fancy_abort): Trim filename.\n\t* fix-header.c (v_fatal, fatal): Remove.\n\t(progname): Remove definition.\n\t(main): Set progname here.\n\t* gcc.c (fancy_abort): Add parameters.\n\t* gcc.h (fancy_abort): Remove declaration.\n\t* gcov.c (fancy_abort): Remove.\n\t* rtl.h (fancy_abort): Don't declare.\n\t(abort): Don't define.\n\t* tree.h (fancy_abort): Don't declare.\n\t(abort): Don't define.\n\t* system.h (fancy_abort): Declare.\n\t(abort): Define to fancy_abort.\n\t* fixinc/Makefile.in (ALLOBJ): Add ../build-errors.o\n\t* java/jv-scan.c (fancy_abort): Add.\n\nFrom-SVN: r86424", "tree": {"sha": "363bce80c38ec2136e0b02d1c6967f54b9a7c3e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/363bce80c38ec2136e0b02d1c6967f54b9a7c3e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3d1f5b404c57db42824d112f3368d76e1711e11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3d1f5b404c57db42824d112f3368d76e1711e11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3d1f5b404c57db42824d112f3368d76e1711e11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3d1f5b404c57db42824d112f3368d76e1711e11/comments", "author": null, "committer": null, "parents": [{"sha": "a60945f82f0eb22a72005c0d24f155740e3450b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a60945f82f0eb22a72005c0d24f155740e3450b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a60945f82f0eb22a72005c0d24f155740e3450b3"}], "stats": {"total": 152, "additions": 70, "deletions": 82}, "files": [{"sha": "a9aee48f70f8f5291737c250ba372d718a4008c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d1f5b404c57db42824d112f3368d76e1711e11/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d1f5b404c57db42824d112f3368d76e1711e11/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b3d1f5b404c57db42824d112f3368d76e1711e11", "patch": "@@ -1,5 +1,32 @@\n 2004-08-23  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\t* Makefile.in (BUILD_ERRORS): Set to build-errors.\n+\t(errors.o): New target for host.\n+\t(build-errors.o): New target for build.\n+\t(genobjs): Replace errors.o with build-errors.\n+\t(gengenrtl$(buildexeext)): Add $(BUILD_ERRORS).\n+\t(GCOV_OBJS, GCOV_DUMP_OBJS): Add errors.o.\n+\t(fix-headers$(build_exeext)): Add $(BUILD_ERRORS).\n+\t(fix-header.o): Add errors.h\n+\t* collect2.c (fancy_abort): Add parameters.\n+\t* collect2.h (fancy_abort): Don't declare.\n+\t* errors.h (fancy_abort): Don't declare.\n+\t* errors.c: Include either bconfig.h or config.h.\n+\t(fancy_abort): Trim filename.\n+\t* fix-header.c (v_fatal, fatal): Remove.\n+\t(progname): Remove definition.\n+\t(main): Set progname here.\n+\t* gcc.c (fancy_abort): Add parameters.\n+\t* gcc.h (fancy_abort): Remove declaration.\n+\t* gcov.c (fancy_abort): Remove.\n+\t* rtl.h (fancy_abort): Don't declare.\n+\t(abort): Don't define.\n+\t* tree.h (fancy_abort): Don't declare.\n+\t(abort): Don't define.\n+\t* system.h (fancy_abort): Declare.\n+\t(abort): Define to fancy_abort.\n+\t* fixinc/Makefile.in (ALLOBJ): Add ../build-errors.o\n+\n \t* tree.h (enum size_type_kind): Remove USIZETYPE, UBITSIZETYPE.\n \t(usize_type, ubitsizetype): Remove.\n \t* stor-layout.c (set_sizetype): Don't initialize usizetype,\n@@ -3223,7 +3250,7 @@\n \t* config/i386/xmmintrin.h: Include <mm_malloc.h>.\n \n 2004-08-03  H.J. Lu  <hongjiu.lu@intel.com>\n-\t    Tanguy Fautr\ufffd  <tfautre@pandora.be>\n+\t    Tanguy Fautr\u00c3  <tfautre@pandora.be>\n \n \t* config/i386/pmm_malloc.h: New file.\n "}, {"sha": "14de81e2b0726c7bec614a2db8f87d8527f9df3b", "filename": "gcc/Makefile.in", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d1f5b404c57db42824d112f3368d76e1711e11/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d1f5b404c57db42824d112f3368d76e1711e11/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=b3d1f5b404c57db42824d112f3368d76e1711e11", "patch": "@@ -771,7 +771,7 @@ BUILD_SUPPORT = gensupport.o insn-conditions.o\n BUILD_EARLY_SUPPORT = gensupport.o dummy-conditions.o\n \n BUILD_PRINT = build-print-rtl.o\n-BUILD_ERRORS = errors.o\n+BUILD_ERRORS = build-errors.o\n BUILD_VARRAY = build-varray.o\n \n # Specify the directories to be searched for header files.\n@@ -2137,6 +2137,7 @@ lambda-mat.o : lambda-mat.c lambda.h $(GGC_H) $(SYSTEM_H) $(CONFIG_H) $(TM_H)\n params.o : params.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(PARAMS_H) toplev.h\n hooks.o: hooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(HOOKS_H)\n pretty-print.o: $(CONFIG_H) $(SYSTEM_H) pretty-print.c $(PRETTY_PRINT_H)\n+errors.o : errors.c $(CONFIG_H) $(SYSTEM_H) errors.h\n \n $(out_object_file): $(out_file) $(CONFIG_H) coretypes.h $(TM_H) $(TREE_H) $(GGC_H) \\\n    $(RTL_H) $(REGS_H) hard-reg-set.h real.h insn-config.h conditions.h \\\n@@ -2464,8 +2465,9 @@ genprogs=$(genprognames:%=%$(build_exeext))\n genobjs=$(genprognames:%=%.o) read-rtl.o gensupport.o genattrtab.o \\\n         genautomata.o gengenrtl.o genmodes.o genpreds.o gengtype.o \\\n \tgenconstants.o gen-protos.o scan.o fix-header.o scan-decls.o \\\n-\tgencheck.o dummy-conditions.o genconditions.o errors.o ggc-none.o \\\n-\tmin-insn-modes.o build-rtl.o build-print-rtl.o build-varray.o\n+\tgencheck.o dummy-conditions.o genconditions.o build-errors.o \\\n+\tggc-none.o min-insn-modes.o build-rtl.o build-print-rtl.o \\\n+\tbuild-varray.o\n \n $(genprogs): %$(build_exeext): %.o  $(BUILD_RTL) $(BUILD_SUPPORT) \\\n \t\t\t       $(BUILD_PRINT) $(BUILD_ERRORS) \\\n@@ -2537,9 +2539,9 @@ genautomata.o : genautomata.c $(RTL_BASE_H) $(OBSTACK_H) $(BCONFIG_H) \\\n genoutput.o : genoutput.c $(RTL_BASE_H) $(BCONFIG_H) \\\n   $(SYSTEM_H) coretypes.h $(GTM_H) errors.h gensupport.h\n \n-gengenrtl$(build_exeext) : gengenrtl.o $(BUILD_LIBDEPS)\n+gengenrtl$(build_exeext) : gengenrtl.o $(BUILD_ERRORS) $(BUILD_LIBDEPS)\n \t$(CC_FOR_BUILD) $(BUILD_CFLAGS) $(BUILD_LDFLAGS) -o $@ \\\n-\t gengenrtl.o $(BUILD_LIBS)\n+\t gengenrtl.o $(BUILD_ERRORS) $(BUILD_LIBS)\n \n gengenrtl.o : gengenrtl.c $(BCONFIG_H) $(SYSTEM_H) rtl.def\n \n@@ -2592,7 +2594,7 @@ genconditions$(build_exeext) : genconditions.o $(BUILD_EARLY_SUPPORT) \\\n genconditions.o : genconditions.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H) \\\n \tcoretypes.h $(GTM_H) errors.h\n \n-errors.o : errors.c $(BCONFIG_H) $(SYSTEM_H) errors.h\n+build-errors.o : errors.c $(BCONFIG_H) $(SYSTEM_H) errors.h\n ggc-none.o : ggc-none.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GGC_H)\n min-insn-modes.o : min-insn-modes.c $(BCONFIG_H) system.h $(MACHMODE_H)\n build-rtl.o: rtl.c $(BCONFIG_H) coretypes.h $(GTM_H) $(SYSTEM_H) $(RTL_H) \\\n@@ -2711,12 +2713,10 @@ s-iov: gcov-iov$(build_exeext)\n gcov.o: gcov.c gcov-io.h gcov-io.c gcov-iov.h intl.h $(SYSTEM_H) coretypes.h $(TM_H) $(CONFIG_H)\n gcov-dump.o: gcov-dump.c gcov-io.h gcov-io.c gcov-iov.h $(SYSTEM_H) coretypes.h $(TM_H) $(CONFIG_H)\n \n-# Only one of 'gcov' or 'gcov.exe' is actually built, depending\n-# upon whether $(exeext) is empty or not.\n-GCOV_OBJS = gcov.o intl.o version.o\n+GCOV_OBJS = gcov.o intl.o version.o errors.o\n gcov$(exeext): $(GCOV_OBJS) $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) $(GCOV_OBJS) $(LIBS) -o $@\n-GCOV_DUMP_OBJS = gcov-dump.o version.o\n+GCOV_DUMP_OBJS = gcov-dump.o version.o errors.o\n gcov-dump$(exeext): $(GCOV_DUMP_OBJS) $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) $(GCOV_DUMP_OBJS) $(LIBS) -o $@\n #\f\n@@ -2841,11 +2841,12 @@ xsys-protos.h: $(GCC_PASSES) $(srcdir)/sys-protos.h deduced.h gen-protos$(build_\n # This is nominally a 'build' program, but it's run only when host==build,\n # so we can (indeed, must) use $(LIBDEPS) and $(LIBS).\n fix-header$(build_exeext): fix-header.o scan-decls.o scan.o xsys-protos.h \\\n-           c-incpath.o cppdefault.o prefix.o $(LIBDEPS)\n+           c-incpath.o cppdefault.o prefix.o $(BUILD_ERRORS) $(LIBDEPS)\n \t$(CC_FOR_BUILD) $(BUILD_CFLAGS) $(BUILD_LDFLAGS) -o $@ fix-header.o \\\n-\tc-incpath.o cppdefault.o scan-decls.o prefix.o scan.o $(LIBS)\n+\t  c-incpath.o cppdefault.o scan-decls.o prefix.o scan.o \\\n+\t  $(BUILD_ERRORS) $(LIBS)\n \n-fix-header.o: fix-header.c $(OBSTACK_H) scan.h \\\n+fix-header.o: fix-header.c $(OBSTACK_H) scan.h errors.h \\\n \txsys-protos.h $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) $(CPPLIB_H)\n \n scan-decls.o: scan-decls.c scan.h $(CPPLIB_H) $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H)"}, {"sha": "0b398f74b982f07301ba2616182db24bd056513e", "filename": "gcc/collect2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d1f5b404c57db42824d112f3368d76e1711e11/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d1f5b404c57db42824d112f3368d76e1711e11/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=b3d1f5b404c57db42824d112f3368d76e1711e11", "patch": "@@ -401,9 +401,9 @@ error (const char * msgid, ...)\n    provide a default entry.  */\n \n void\n-fancy_abort (void)\n+fancy_abort (const char *file, int line, const char *func)\n {\n-  fatal (\"internal error\");\n+  fatal (\"internal gcc abort in %s, at %s:%d\", func, file, line);\n }\n \f\n static void"}, {"sha": "710e19ab28ff4a11bfde2aa4ae22ffedb8511e8c", "filename": "gcc/collect2.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d1f5b404c57db42824d112f3368d76e1711e11/gcc%2Fcollect2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d1f5b404c57db42824d112f3368d76e1711e11/gcc%2Fcollect2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.h?ref=b3d1f5b404c57db42824d112f3368d76e1711e11", "patch": "@@ -39,7 +39,6 @@ extern struct obstack temporary_obstack;\n extern char *temporary_firstobj;\n extern int vflag, debug;\n \n-extern void fancy_abort (void) ATTRIBUTE_NORETURN;\n extern void error (const char *, ...) ATTRIBUTE_PRINTF_1;\n extern void notice (const char *, ...) ATTRIBUTE_PRINTF_1;\n extern void fatal (const char *, ...) ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;"}, {"sha": "6889c736efd079e890f54060dbc473edc985dfc3", "filename": "gcc/errors.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d1f5b404c57db42824d112f3368d76e1711e11/gcc%2Ferrors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d1f5b404c57db42824d112f3368d76e1711e11/gcc%2Ferrors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ferrors.c?ref=b3d1f5b404c57db42824d112f3368d76e1711e11", "patch": "@@ -23,7 +23,11 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    in the generator programs; the compiler has a more elaborate suite\n    of diagnostic printers, found in diagnostic.c.  */\n \n+#ifdef GENERATOR_FILE\n #include \"bconfig.h\"\n+#else\n+#include \"config.h\"\n+#endif\n #include \"system.h\"\n #include \"errors.h\"\n \n@@ -126,5 +130,5 @@ trim_filename (const char *name)\n void\n fancy_abort (const char *file, int line, const char *func)\n {\n-  internal_error (\"abort in %s, at %s:%d\", func, file, line);\n+  internal_error (\"abort in %s, at %s:%d\", func, trim_filename (file), line);\n }"}, {"sha": "df5d8d870b5b924e7b48edc1636c5010e2eea65a", "filename": "gcc/errors.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d1f5b404c57db42824d112f3368d76e1711e11/gcc%2Ferrors.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d1f5b404c57db42824d112f3368d76e1711e11/gcc%2Ferrors.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ferrors.h?ref=b3d1f5b404c57db42824d112f3368d76e1711e11", "patch": "@@ -35,8 +35,6 @@ extern void error (const char *, ...);\n extern void fatal (const char *, ...) ATTRIBUTE_NORETURN;\n extern void internal_error (const char *, ...) ATTRIBUTE_NORETURN;\n extern const char *trim_filename (const char *);\n-extern void fancy_abort (const char *, int, const char *)\n-    ATTRIBUTE_NORETURN;\n \n extern int have_error;\n extern const char *progname;"}, {"sha": "0212cf77ca4ebc0f0875d0dff3cfc57489b438e2", "filename": "gcc/fix-header.c", "status": "modified", "additions": 2, "deletions": 26, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d1f5b404c57db42824d112f3368d76e1711e11/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d1f5b404c57db42824d112f3368d76e1711e11/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=b3d1f5b404c57db42824d112f3368d76e1711e11", "patch": "@@ -79,10 +79,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #include \"scan.h\"\n #include \"cpplib.h\"\n #include \"c-incpath.h\"\n-\n-static void v_fatal (const char *, va_list)\n-     ATTRIBUTE_PRINTF (1,0) ATTRIBUTE_NORETURN;\n-static void fatal (const char *, ...) ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n+#include \"errors.h\"\n \n #ifdef TARGET_EXTRA_INCLUDES\n static void hook_void_int(int u ATTRIBUTE_UNUSED) { }\n@@ -407,7 +404,6 @@ lookup_std_proto (const char *name, int name_length)\n \n char *inc_filename;\n int inc_filename_length;\n-const char *progname = \"fix-header\";\n FILE *outf;\n sstring line;\n \n@@ -1076,6 +1072,7 @@ main (int argc, char **argv)\n   long int inf_size;\n   struct symbol_list *cur_symbols;\n \n+  progname = \"fix-header\";\n   if (argv[0] && argv[0][0])\n     {\n       char *p;\n@@ -1301,24 +1298,3 @@ main (int argc, char **argv)\n \n   return 0;\n }\n-\f\n-\n-static void\n-v_fatal (const char *str, va_list ap)\n-{\n-  fprintf (stderr, \"%s: %s: \", progname, inc_filename);\n-  vfprintf (stderr, str, ap);\n-  fprintf (stderr, \"\\n\");\n-\n-  exit (FATAL_EXIT_CODE);\n-}\n-\n-static void\n-fatal (const char *str, ...)\n-{\n-  va_list ap;\n-\n-  va_start (ap, str);\n-  v_fatal (str, ap);\n-  va_end (ap);\n-}"}, {"sha": "ae410e14386697fc99773f0905cb99f00e8a2e3a", "filename": "gcc/fixinc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d1f5b404c57db42824d112f3368d76e1711e11/gcc%2Ffixinc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d1f5b404c57db42824d112f3368d76e1711e11/gcc%2Ffixinc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2FMakefile.in?ref=b3d1f5b404c57db42824d112f3368d76e1711e11", "patch": "@@ -68,7 +68,7 @@ INCLUDES = -I. -I.. -I$(srcdir) -I$(srcdir)/.. \\\n LIBERTY = ../../libiberty/libiberty.a\n \n ALLOBJ = fixincl.o fixtests.o fixfixes.o server.o procopen.o \\\n-      fixlib.o\n+      fixlib.o ../build-errors.o\n \n TESTOBJ = fixincl.o fixlib.o fixtests.o\n FIXOBJ  = fixfixes.o fixlib.o"}, {"sha": "7685274cc5f58194a46fc9db79759d030097cb31", "filename": "gcc/gcc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d1f5b404c57db42824d112f3368d76e1711e11/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d1f5b404c57db42824d112f3368d76e1711e11/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=b3d1f5b404c57db42824d112f3368d76e1711e11", "patch": "@@ -6724,9 +6724,9 @@ pfatal_pexecute (const char *errmsg_fmt, const char *errmsg_arg)\n /* Output an error message and exit.  */\n \n void\n-fancy_abort (void)\n+fancy_abort (const char *file, int line, const char *func)\n {\n-  fatal (\"internal gcc abort\");\n+  fatal (\"internal gcc abort in %s, at %s:%d\", func, file, line);\n }\n \f\n /* Output an error message and exit.  */"}, {"sha": "772dfb8ede448830e1d3622dcc00e3bd6e6c0e99", "filename": "gcc/gcc.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d1f5b404c57db42824d112f3368d76e1711e11/gcc%2Fgcc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d1f5b404c57db42824d112f3368d76e1711e11/gcc%2Fgcc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.h?ref=b3d1f5b404c57db42824d112f3368d76e1711e11", "patch": "@@ -56,7 +56,6 @@ struct spec_function\n /* These are exported by gcc.c.  */\n extern int do_spec (const char *);\n extern void record_temp_file (const char *, int, int);\n-extern void fancy_abort (void) ATTRIBUTE_NORETURN;\n extern void fatal (const char *, ...) ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n extern void error (const char *, ...) ATTRIBUTE_PRINTF_1;\n extern void pfatal_with_name (const char *) ATTRIBUTE_NORETURN;"}, {"sha": "0e6a6f8de494bbef25a96ffe39380d7beebbfc78", "filename": "gcc/gcov.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d1f5b404c57db42824d112f3368d76e1711e11/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d1f5b404c57db42824d112f3368d76e1711e11/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=b3d1f5b404c57db42824d112f3368d76e1711e11", "patch": "@@ -373,17 +373,6 @@ fnotice (FILE *file, const char *msgid, ...)\n   vfprintf (file, _(msgid), ap);\n   va_end (ap);\n }\n-\n-/* More 'friendly' abort that prints the line and file.\n-   config.h can #define abort fancy_abort if you like that sort of thing.  */\n-extern void fancy_abort (void) ATTRIBUTE_NORETURN;\n-\n-void\n-fancy_abort (void)\n-{\n-  fnotice (stderr, \"Internal gcov abort.\\n\");\n-  exit (FATAL_EXIT_CODE);\n-}\n \f\n /* Print a usage message and exit.  If ERROR_P is nonzero, this is an error,\n    otherwise the output of --help.  */"}, {"sha": "0e7bb8b4b0a8de592a90858a49b69b772869ea61", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d1f5b404c57db42824d112f3368d76e1711e11/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d1f5b404c57db42824d112f3368d76e1711e11/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=b3d1f5b404c57db42824d112f3368d76e1711e11", "patch": "@@ -1,3 +1,7 @@\n+2004-08-23  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* jv-scan.c (fancy_abort): Add.\n+\n 2004-08-20  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* expr.c (build_java_arrayaccess): Use convert to change\n@@ -8592,7 +8596,7 @@\n \tproperly initialize `finished_label'. Don't emit gotos for empty\n \ttry statements.\n \n-2000-03-19  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n+2000-03-19  Martin v. L\u00f6wis  <loewis@informatik.hu-berlin.de>\n \n \t* except.c (emit_handlers): Clear catch_clauses_last.\n "}, {"sha": "77320e606c3d5ad306f8387bdf8a7de804b27482", "filename": "gcc/java/jv-scan.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d1f5b404c57db42824d112f3368d76e1711e11/gcc%2Fjava%2Fjv-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d1f5b404c57db42824d112f3368d76e1711e11/gcc%2Fjava%2Fjv-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjv-scan.c?ref=b3d1f5b404c57db42824d112f3368d76e1711e11", "patch": "@@ -261,3 +261,9 @@ warning (const char *msgid, ...)\n   fputc ('\\n', stderr);\n   va_end (ap);\n }\n+\n+void\n+fancy_abort (const char *file, int line, const char *func)\n+{\n+  fatal_error (\"abort in %s, at %s:%d\", func, file, line);\n+}"}, {"sha": "6af321ed0bb696aa3b4b1a1d513cb584613c6200", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d1f5b404c57db42824d112f3368d76e1711e11/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d1f5b404c57db42824d112f3368d76e1711e11/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=b3d1f5b404c57db42824d112f3368d76e1711e11", "patch": "@@ -2151,16 +2151,6 @@ extern rtx read_rtx (FILE *);\n extern const char *read_rtx_filename;\n extern int read_rtx_lineno;\n \n-/* Redefine abort to report an internal error w/o coredump, and\n-   reporting the location of the error in the source file.  This logic\n-   is duplicated in rtl.h and tree.h because every file that needs the\n-   special abort includes one or both.  toplev.h gets too few files,\n-   system.h gets too many.  */\n-\n-extern void fancy_abort (const char *, int, const char *)\n-    ATTRIBUTE_NORETURN;\n-#define abort() fancy_abort (__FILE__, __LINE__, __FUNCTION__)\n-\n /* In alias.c */\n extern void clear_reg_alias_info (rtx);\n extern rtx canon_rtx (rtx);"}, {"sha": "ccb3d4b381e999d25479d1df4dbcaf6ce217141f", "filename": "gcc/system.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d1f5b404c57db42824d112f3368d76e1711e11/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d1f5b404c57db42824d112f3368d76e1711e11/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=b3d1f5b404c57db42824d112f3368d76e1711e11", "patch": "@@ -500,6 +500,11 @@ extern int snprintf (char *, size_t, const char *, ...);\n #define __builtin_expect(a, b) (a)\n #endif\n \n+/* Redefine abort to report an internal error w/o coredump, and\n+   reporting the location of the error in the source file.  */\n+extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n+#define abort() fancy_abort (__FILE__, __LINE__, __FUNCTION__)\n+\n /* Provide a fake boolean type.  We make no attempt to use the\n    C99 _Bool, as it may not be available in the bootstrap compiler,\n    and even if it is, it is liable to be buggy.  "}, {"sha": "e0df473f32bfc6db7b8ac0eb06c33e34d6f11dcf", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d1f5b404c57db42824d112f3368d76e1711e11/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d1f5b404c57db42824d112f3368d76e1711e11/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b3d1f5b404c57db42824d112f3368d76e1711e11", "patch": "@@ -3746,16 +3746,6 @@ extern const char *dump_flag_name (enum tree_dump_index);\n extern void set_decl_rtl (tree, rtx);\n extern void set_decl_incoming_rtl (tree, rtx);\n \f\n-/* Redefine abort to report an internal error w/o coredump, and\n-   reporting the location of the error in the source file.  This logic\n-   is duplicated in rtl.h and tree.h because every file that needs the\n-   special abort includes one or both.  toplev.h gets too few files,\n-   system.h gets too many.  */\n-\n-extern void fancy_abort (const char *, int, const char *)\n-    ATTRIBUTE_NORETURN;\n-#define abort() fancy_abort (__FILE__, __LINE__, __FUNCTION__)\n-\n /* Enum and arrays used for tree allocation stats.\n    Keep in sync with tree.c:tree_node_kind_names.  */\n typedef enum"}]}