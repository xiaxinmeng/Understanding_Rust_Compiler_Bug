{"sha": "6c9c7b735c04bbcf4b840634d484441e764a7175", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM5YzdiNzM1YzA0YmJjZjRiODQwNjM0ZDQ4NDQ0MWU3NjRhNzE3NQ==", "commit": {"author": {"name": "Alejandro Martinez", "email": "alejandro.martinezvicente@arm.com", "date": "2019-01-09T13:57:06Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2019-01-09T13:57:06Z"}, "message": "[Aarch64][SVE] Add copysign and xorsign support\n\nThis patch adds support for copysign and xorsign builtins to SVE. With the new\nexpands, they can be vectorized using bitwise logical operations.\n\nI tested this patch in an aarch64 machine bootstrapping the compiler and\nrunning the checks.\n\n2019-01-09  Alejandro Martinez  <alejandro.martinezvicente@arm.com>\n\n\t* config/aarch64/aarch64-sve.md (copysign<mode>3): New define_expand.\n\t(xorsign<mode>3): Likewise.\n\n2019-01-09  Alejandro Martinez  <alejandro.martinezvicente@arm.com>\n\n\t* gcc.target/aarch64/sve/copysign_1.c: New test for SVE vectorized\n\tcopysign.\n\t* gcc.target/aarch64/sve/copysign_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/xorsign_1.c: New test for SVE vectorized\n\txorsign.\n\t* gcc.target/aarch64/sve/xorsign_1_run.c: Likewise.\n\nFrom-SVN: r267764", "tree": {"sha": "86e8baa94db41644e538b9f293562c2e01f9692f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86e8baa94db41644e538b9f293562c2e01f9692f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c9c7b735c04bbcf4b840634d484441e764a7175", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c9c7b735c04bbcf4b840634d484441e764a7175", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c9c7b735c04bbcf4b840634d484441e764a7175", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c9c7b735c04bbcf4b840634d484441e764a7175/comments", "author": null, "committer": null, "parents": [{"sha": "d3c8a7cfdbe30993cc051deba0a93f2f541ab88b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3c8a7cfdbe30993cc051deba0a93f2f541ab88b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3c8a7cfdbe30993cc051deba0a93f2f541ab88b"}], "stats": {"total": 290, "additions": 290, "deletions": 0}, "files": [{"sha": "6cd2690ae808ef9f76b656c9250ea03ef0fd90fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9c7b735c04bbcf4b840634d484441e764a7175/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9c7b735c04bbcf4b840634d484441e764a7175/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c9c7b735c04bbcf4b840634d484441e764a7175", "patch": "@@ -1,3 +1,8 @@\n+2019-01-09  Alejandro Martinez  <alejandro.martinezvicente@arm.com>\n+\n+\t* config/aarch64/aarch64-sve.md (copysign<mode>3): New define_expand.\n+\t(xorsign<mode>3): Likewise.\n+\n 2019-01-09  Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/88758"}, {"sha": "5bb3422a7165452f1bb37cb4eb2bcd583189fee2", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9c7b735c04bbcf4b840634d484441e764a7175/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9c7b735c04bbcf4b840634d484441e764a7175/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=6c9c7b735c04bbcf4b840634d484441e764a7175", "patch": "@@ -3074,3 +3074,57 @@\n    insr\\t%0.<Vetype>, %<vwcore>2\n    insr\\t%0.<Vetype>, %<Vetype>2\"\n )\n+\n+(define_expand \"copysign<mode>3\"\n+  [(match_operand:SVE_F 0 \"register_operand\")\n+   (match_operand:SVE_F 1 \"register_operand\")\n+   (match_operand:SVE_F 2 \"register_operand\")]\n+  \"TARGET_SVE\"\n+  {\n+    rtx sign = gen_reg_rtx (<V_INT_EQUIV>mode);\n+    rtx mant = gen_reg_rtx (<V_INT_EQUIV>mode);\n+    rtx int_res = gen_reg_rtx (<V_INT_EQUIV>mode);\n+    int bits = GET_MODE_UNIT_BITSIZE (<MODE>mode) - 1;\n+\n+    rtx arg1 = lowpart_subreg (<V_INT_EQUIV>mode, operands[1], <MODE>mode);\n+    rtx arg2 = lowpart_subreg (<V_INT_EQUIV>mode, operands[2], <MODE>mode);\n+\n+    emit_insn (gen_and<v_int_equiv>3\n+\t       (sign, arg2,\n+\t\taarch64_simd_gen_const_vector_dup (<V_INT_EQUIV>mode,\n+\t\t\t\t\t\t   HOST_WIDE_INT_M1U\n+\t\t\t\t\t\t   << bits)));\n+    emit_insn (gen_and<v_int_equiv>3\n+\t       (mant, arg1,\n+\t\taarch64_simd_gen_const_vector_dup (<V_INT_EQUIV>mode,\n+\t\t\t\t\t\t   ~(HOST_WIDE_INT_M1U\n+\t\t\t\t\t\t     << bits))));\n+    emit_insn (gen_ior<v_int_equiv>3 (int_res, sign, mant));\n+    emit_move_insn (operands[0], gen_lowpart (<MODE>mode, int_res));\n+    DONE;\n+  }\n+)\n+\n+(define_expand \"xorsign<mode>3\"\n+  [(match_operand:SVE_F 0 \"register_operand\")\n+   (match_operand:SVE_F 1 \"register_operand\")\n+   (match_operand:SVE_F 2 \"register_operand\")]\n+  \"TARGET_SVE\"\n+  {\n+    rtx sign = gen_reg_rtx (<V_INT_EQUIV>mode);\n+    rtx int_res = gen_reg_rtx (<V_INT_EQUIV>mode);\n+    int bits = GET_MODE_UNIT_BITSIZE (<MODE>mode) - 1;\n+\n+    rtx arg1 = lowpart_subreg (<V_INT_EQUIV>mode, operands[1], <MODE>mode);\n+    rtx arg2 = lowpart_subreg (<V_INT_EQUIV>mode, operands[2], <MODE>mode);\n+\n+    emit_insn (gen_and<v_int_equiv>3\n+\t       (sign, arg2,\n+\t\taarch64_simd_gen_const_vector_dup (<V_INT_EQUIV>mode,\n+\t\t\t\t\t\t   HOST_WIDE_INT_M1U\n+\t\t\t\t\t\t   << bits)));\n+    emit_insn (gen_xor<v_int_equiv>3 (int_res, arg1, sign));\n+    emit_move_insn (operands[0], gen_lowpart (<MODE>mode, int_res));\n+    DONE;\n+  }\n+)"}, {"sha": "5909ee26747ef716120c47c99bdcd08d464fcc1d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9c7b735c04bbcf4b840634d484441e764a7175/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9c7b735c04bbcf4b840634d484441e764a7175/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6c9c7b735c04bbcf4b840634d484441e764a7175", "patch": "@@ -1,3 +1,12 @@\n+2019-01-09  Alejandro Martinez  <alejandro.martinezvicente@arm.com>\n+\n+\t* gcc.target/aarch64/sve/copysign_1.c: New test for SVE vectorized\n+\tcopysign.\n+\t* gcc.target/aarch64/sve/copysign_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/xorsign_1.c: New test for SVE vectorized\n+\txorsign.\n+\t* gcc.target/aarch64/sve/xorsign_1_run.c: Likewise.\n+\n 2019-01-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/88331"}, {"sha": "ca33cec6d7dce05209fb163284c07439a83fb06c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/copysign_1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9c7b735c04bbcf4b840634d484441e764a7175/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcopysign_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9c7b735c04bbcf4b840634d484441e764a7175/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcopysign_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcopysign_1.c?ref=6c9c7b735c04bbcf4b840634d484441e764a7175", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math -fdump-tree-vect-details --save-temps\" } */\n+\n+void\n+copysign_half (_Float16 * restrict a, _Float16 * restrict b,\n+\t       _Float16 * restrict r, int n)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      r[i] = __builtin_copysignf16 (a[i], b[i]);\n+    }\n+}\n+\n+void\n+copysign_float (float *restrict a, float *restrict b, float *restrict r,\n+\t\tint n)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      r[i] = __builtin_copysignf (a[i], b[i]);\n+    }\n+}\n+\n+void\n+copysign_double (double *restrict a, double *restrict b, double *restrict r,\n+\t\t int n)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      r[i] = __builtin_copysign (a[i], b[i]);\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops in function\" 3 \"vect\" } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.h, z[0-9]+\\.h, #0x8000\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.h, z[0-9]+\\.h, #0x7fff\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x80000000\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x7fffffff\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.d, z[0-9]+\\.d, #0x8000000000000000\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.d, z[0-9]+\\.d, #0x7fffffffffffffff\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 3 } } */"}, {"sha": "c3d0bfa53cf4b411424c2cc8de801de12230ad2d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/copysign_1_run.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9c7b735c04bbcf4b840634d484441e764a7175/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcopysign_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9c7b735c04bbcf4b840634d484441e764a7175/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcopysign_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcopysign_1_run.c?ref=6c9c7b735c04bbcf4b840634d484441e764a7175", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#include \"copysign_1.c\"\n+\n+extern void abort ();\n+\n+#define N 16\n+_Float16 ah[N] = { -0.1f16, -3.2f16, -6.3f16, -9.4f16,\n+  -12.5f16, -15.6f16, -18.7f16, -21.8f16,\n+  24.9f16, 27.1f16, 30.2f16, 33.3f16,\n+  36.4f16, 39.5f16, 42.6f16, 45.7f\n+};\n+\n+_Float16 bh[N] = { -1.2f16, 3.4f16, -5.6f16, 7.8f16,\n+  -9.0f16, 1.0f16, -2.0f16, 3.0f16,\n+  -4.0f16, -5.0f16, 6.0f16, 7.0f16,\n+  -8.0f16, -9.0f16, 10.0f16, 11.0f16\n+};\n+\n+_Float16 rh[N];\n+\n+float a[N] = { -0.1f, -3.2f, -6.3f, -9.4f,\n+  -12.5f, -15.6f, -18.7f, -21.8f,\n+  24.9f, 27.1f, 30.2f, 33.3f,\n+  36.4f, 39.5f, 42.6f, 45.7f\n+};\n+\n+float b[N] = { -1.2f, 3.4f, -5.6f, 7.8f,\n+  -9.0f, 1.0f, -2.0f, 3.0f,\n+  -4.0f, -5.0f, 6.0f, 7.0f,\n+  -8.0f, -9.0f, 10.0f, 11.0f\n+};\n+\n+float r[N];\n+\n+double ad[N] = { -0.1d, -3.2d, -6.3d, -9.4d,\n+  -12.5d, -15.6d, -18.7d, -21.8d,\n+  24.9d, 27.1d, 30.2d, 33.3d,\n+  36.4d, 39.5d, 42.6d, 45.7d\n+};\n+\n+double bd[N] = { -1.2d, 3.4d, -5.6d, 7.8d,\n+  -9.0d, 1.0d, -2.0d, 3.0d,\n+  -4.0d, -5.0d, 6.0d, 7.0d,\n+  -8.0d, -9.0d, 10.0d, 11.0d\n+};\n+\n+double rd[N];\n+\n+int\n+main (void)\n+{\n+  int i;\n+\n+  copysign_half (ah, bh, rh, N);\n+  for (i = 0; i < N; i++)\n+    if (rh[i] != __builtin_copysignf16 (ah[i], bh[i]))\n+      abort ();\n+\n+  copysign_float (a, b, r, N);\n+  for (i = 0; i < N; i++)\n+    if (r[i] != __builtin_copysignf (a[i], b[i]))\n+      abort ();\n+\n+  copysign_double (ad, bd, rd, N);\n+  for (i = 0; i < N; i++)\n+    if (rd[i] != __builtin_copysign (ad[i], bd[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "5c4ad0222a80bb643a90b930c25cb86ff98c6d67", "filename": "gcc/testsuite/gcc.target/aarch64/sve/xorsign_1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9c7b735c04bbcf4b840634d484441e764a7175/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fxorsign_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9c7b735c04bbcf4b840634d484441e764a7175/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fxorsign_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fxorsign_1.c?ref=6c9c7b735c04bbcf4b840634d484441e764a7175", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math -fdump-tree-vect-details --save-temps\" } */\n+\n+void\n+xorsign_half (_Float16 * restrict a, _Float16 * restrict b,\n+\t      _Float16 * restrict r, int n)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      r[i] = a[i] * __builtin_copysignf16 (1.0f16, b[i]);\n+    }\n+}\n+\n+void\n+xorsign_float (float *restrict a, float *restrict b, float *restrict r, int n)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      r[i] = a[i] * __builtin_copysignf (1.0f, b[i]);\n+    }\n+}\n+\n+void\n+xorsign_double (double *restrict a, double *restrict b, double *restrict r,\n+\t\tint n)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      r[i] = a[i] * __builtin_copysign (1.0d, b[i]);\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops in function\" 3 \"vect\" } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.h, z[0-9]+\\.h, #0x8000\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x80000000\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.d, z[0-9]+\\.d, #0x8000000000000000\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 3 } } */"}, {"sha": "de8ff83700c55096fc40e174e061bf130a0f52e9", "filename": "gcc/testsuite/gcc.target/aarch64/sve/xorsign_1_run.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9c7b735c04bbcf4b840634d484441e764a7175/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fxorsign_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9c7b735c04bbcf4b840634d484441e764a7175/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fxorsign_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fxorsign_1_run.c?ref=6c9c7b735c04bbcf4b840634d484441e764a7175", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#include \"xorsign_1.c\"\n+\n+extern void abort ();\n+\n+#define N 16\n+_Float16 ah[N] = { -0.1f16, -3.2f16, -6.3f16, -9.4f16,\n+  -12.5f16, -15.6f16, -18.7f16, -21.8f16,\n+  24.9f16, 27.1f16, 30.2f16, 33.3f16,\n+  36.4f16, 39.5f16, 42.6f16, 45.7f\n+};\n+\n+_Float16 bh[N] = { -1.2f16, 3.4f16, -5.6f16, 7.8f16,\n+  -9.0f16, 1.0f16, -2.0f16, 3.0f16,\n+  -4.0f16, -5.0f16, 6.0f16, 7.0f16,\n+  -8.0f16, -9.0f16, 10.0f16, 11.0f16\n+};\n+\n+_Float16 rh[N];\n+\n+float a[N] = { -0.1f, -3.2f, -6.3f, -9.4f,\n+  -12.5f, -15.6f, -18.7f, -21.8f,\n+  24.9f, 27.1f, 30.2f, 33.3f,\n+  36.4f, 39.5f, 42.6f, 45.7f\n+};\n+\n+float b[N] = { -1.2f, 3.4f, -5.6f, 7.8f,\n+  -9.0f, 1.0f, -2.0f, 3.0f,\n+  -4.0f, -5.0f, 6.0f, 7.0f,\n+  -8.0f, -9.0f, 10.0f, 11.0f\n+};\n+\n+float r[N];\n+\n+double ad[N] = { -0.1d, -3.2d, -6.3d, -9.4d,\n+  -12.5d, -15.6d, -18.7d, -21.8d,\n+  24.9d, 27.1d, 30.2d, 33.3d,\n+  36.4d, 39.5d, 42.6d, 45.7d\n+};\n+\n+double bd[N] = { -1.2d, 3.4d, -5.6d, 7.8d,\n+  -9.0d, 1.0d, -2.0d, 3.0d,\n+  -4.0d, -5.0d, 6.0d, 7.0d,\n+  -8.0d, -9.0d, 10.0d, 11.0d\n+};\n+\n+double rd[N];\n+\n+int\n+main (void)\n+{\n+  int i;\n+\n+  xorsign_half (ah, bh, rh, N);\n+  for (i = 0; i < N; i++)\n+    if (rh[i] != ah[i] * __builtin_copysignf16 (1.0f16, bh[i]))\n+      abort ();\n+\n+  xorsign_float (a, b, r, N);\n+  for (i = 0; i < N; i++)\n+    if (r[i] != a[i] * __builtin_copysignf (1.0f, b[i]))\n+      abort ();\n+\n+  xorsign_double (ad, bd, rd, N);\n+  for (i = 0; i < N; i++)\n+    if (rd[i] != ad[i] * __builtin_copysign (1.0d, bd[i]))\n+      abort ();\n+\n+  return 0;\n+}"}]}