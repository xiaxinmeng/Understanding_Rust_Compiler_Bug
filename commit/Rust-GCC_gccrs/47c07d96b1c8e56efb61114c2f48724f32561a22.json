{"sha": "47c07d96b1c8e56efb61114c2f48724f32561a22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdjMDdkOTZiMWM4ZTU2ZWZiNjExMTRjMmY0ODcyNGYzMjU2MWEyMg==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2006-11-03T11:51:09Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2006-11-03T11:51:09Z"}, "message": "re PR libfortran/27895 (problem with RESHAPE and zero-sized arrays)\n\n\tPR libfortran/27895\n\n\t* intrinsics/reshape_generic.c (reshape_internal): Fix so that it\n\tworks correctly for zero-sized arrays.\n\t* m4/reshape.m4: Likewise.\n\t* generated/reshape_r16.c: Regenerate.\n\t* generated/reshape_c4.c: Regenerate.\n\t* generated/reshape_i4.c: Regenerate.\n\t* generated/reshape_c16.c: Regenerate.\n\t* generated/reshape_r10.c: Regenerate.\n\t* generated/reshape_r8.c: Regenerate.\n\t* generated/reshape_c10.c: Regenerate.\n\t* generated/reshape_c8.c: Regenerate.\n\t* generated/reshape_i8.c: Regenerate.\n\t* generated/reshape_i16.c: Regenerate.\n\t* generated/reshape_r4.c: Regenerate.\n\n\t* gcc/testsuite/gfortran.dg/zero_sized_1.f90: Uncomment checks\n\tfor RESHAPE.\n\nFrom-SVN: r118455", "tree": {"sha": "7f7ee3c23137112ffed130880db80d7f2498f938", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f7ee3c23137112ffed130880db80d7f2498f938"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47c07d96b1c8e56efb61114c2f48724f32561a22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47c07d96b1c8e56efb61114c2f48724f32561a22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47c07d96b1c8e56efb61114c2f48724f32561a22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47c07d96b1c8e56efb61114c2f48724f32561a22/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54f9963a2063e02aa8fa254bf2fce7f35acbb393", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54f9963a2063e02aa8fa254bf2fce7f35acbb393", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54f9963a2063e02aa8fa254bf2fce7f35acbb393"}], "stats": {"total": 528, "additions": 459, "deletions": 69}, "files": [{"sha": "7a20460353036285e9ddf095dfa5bcf20fffe759", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c07d96b1c8e56efb61114c2f48724f32561a22/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c07d96b1c8e56efb61114c2f48724f32561a22/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=47c07d96b1c8e56efb61114c2f48724f32561a22", "patch": "@@ -1,3 +1,9 @@\n+2006-11-03  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR libfortran/27895\n+\t* gcc/testsuite/gfortran.dg/zero_sized_1.f90: Uncomment checks\n+\tfor RESHAPE.\n+\n 2006-11-02  Brooks Moses  <brooks.moses@codesourcery.com>\n \n \t* lib/gfortran-dg.exp (gfortran-dg-test): Remove expected \"In file\""}, {"sha": "224b2c007d3074447e11709534572667363b1460", "filename": "gcc/testsuite/gfortran.dg/zero_sized_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c07d96b1c8e56efb61114c2f48724f32561a22/gcc%2Ftestsuite%2Fgfortran.dg%2Fzero_sized_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c07d96b1c8e56efb61114c2f48724f32561a22/gcc%2Ftestsuite%2Fgfortran.dg%2Fzero_sized_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fzero_sized_1.f90?ref=47c07d96b1c8e56efb61114c2f48724f32561a22", "patch": "@@ -193,5 +193,5 @@ program test\n   call test_unpack\n   call test_spread\n   call test_pack\n-!  call test_reshape\n+  call test_reshape\n end"}, {"sha": "8b5eddff4ec221afbe57dbb8273815087712b3a5", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c07d96b1c8e56efb61114c2f48724f32561a22/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c07d96b1c8e56efb61114c2f48724f32561a22/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=47c07d96b1c8e56efb61114c2f48724f32561a22", "patch": "@@ -1,3 +1,21 @@\n+2006-11-03  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR libfortran/27895\n+\t* intrinsics/reshape_generic.c (reshape_internal): Fix so that it\n+\tworks correctly for zero-sized arrays.\n+\t* m4/reshape.m4: Likewise.\n+\t* generated/reshape_r16.c: Regenerate.\n+\t* generated/reshape_c4.c: Regenerate.\n+\t* generated/reshape_i4.c: Regenerate.\n+\t* generated/reshape_c16.c: Regenerate.\n+\t* generated/reshape_r10.c: Regenerate.\n+\t* generated/reshape_r8.c: Regenerate.\n+\t* generated/reshape_c10.c: Regenerate.\n+\t* generated/reshape_c8.c: Regenerate.\n+\t* generated/reshape_i8.c: Regenerate.\n+\t* generated/reshape_i16.c: Regenerate.\n+\t* generated/reshape_r4.c: Regenerate.\n+\n 2006-10-31  Thomas Koenig  <Thomas.Koenig@online.de>\n \n \tPR libfortran/29627"}, {"sha": "1440e75b116a9ce243fff6fda0a96760af0a67e7", "filename": "libgfortran/generated/reshape_c10.c", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c07d96b1c8e56efb61114c2f48724f32561a22/libgfortran%2Fgenerated%2Freshape_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c07d96b1c8e56efb61114c2f48724f32561a22/libgfortran%2Fgenerated%2Freshape_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_c10.c?ref=47c07d96b1c8e56efb61114c2f48724f32561a22", "patch": "@@ -37,8 +37,6 @@ Boston, MA 02110-1301, USA.  */\n \n typedef GFC_ARRAY_DESCRIPTOR(1, index_type) shape_type;\n \n-/* The shape parameter is ignored. We can currently deduce the shape from the\n-   return array.  */\n \n extern void reshape_c10 (gfc_array_c10 * const restrict, \n \tgfc_array_c10 * const restrict, \n@@ -83,12 +81,13 @@ reshape_c10 (gfc_array_c10 * const restrict ret,\n   const GFC_COMPLEX_10 *src;\n   int n;\n   int dim;\n+  int sempty, pempty;\n \n   if (ret->data == NULL)\n     {\n       rdim = shape->dim[0].ubound - shape->dim[0].lbound + 1;\n       rs = 1;\n-      for (n=0; n < rdim; n++)\n+      for (n = 0; n < rdim; n++)\n \t{\n \t  ret->dim[n].lbound = 0;\n \t  rex = shape->data[n * shape->dim[0].stride];\n@@ -130,13 +129,17 @@ reshape_c10 (gfc_array_c10 * const restrict ret,\n \n   sdim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;\n+  sempty = 0;\n   for (n = 0; n < sdim; n++)\n     {\n       scount[n] = 0;\n       sstride[n] = source->dim[n].stride;\n       sextent[n] = source->dim[n].ubound + 1 - source->dim[n].lbound;\n       if (sextent[n] <= 0)\n-        abort ();\n+\t{\n+\t  sempty = 1;\n+\t  sextent[n] = 0;\n+\t}\n \n       if (ssize == sstride[n])\n         ssize *= sextent[n];\n@@ -148,13 +151,18 @@ reshape_c10 (gfc_array_c10 * const restrict ret,\n     {\n       pdim = GFC_DESCRIPTOR_RANK (pad);\n       psize = 1;\n+      pempty = 0;\n       for (n = 0; n < pdim; n++)\n         {\n           pcount[n] = 0;\n           pstride[n] = pad->dim[n].stride;\n           pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n           if (pextent[n] <= 0)\n-            abort ();\n+\t    {\n+\t      pempty = 1;\n+\t      pextent[n] = 0;\n+\t    }\n+\n           if (psize == pstride[n])\n             psize *= pextent[n];\n           else\n@@ -166,6 +174,7 @@ reshape_c10 (gfc_array_c10 * const restrict ret,\n     {\n       pdim = 0;\n       psize = 1;\n+      pempty = 1;\n       pptr = NULL;\n     }\n \n@@ -183,6 +192,24 @@ reshape_c10 (gfc_array_c10 * const restrict ret,\n   rstride0 = rstride[0];\n   sstride0 = sstride[0];\n \n+  if (sempty && pempty)\n+    abort ();\n+\n+  if (sempty)\n+    {\n+      /* Switch immediately to the pad array.  */\n+      src = pptr;\n+      sptr = NULL;\n+      sdim = pdim;\n+      for (dim = 0; dim < pdim; dim++)\n+\t{\n+\t  scount[dim] = pcount[dim];\n+\t  sextent[dim] = pextent[dim];\n+\t  sstride[dim] = pstride[dim];\n+\t  sstride0 = sstride[0] * sizeof (GFC_COMPLEX_10);\n+\t}\n+    }\n+\n   while (rptr)\n     {\n       /* Select between the source and pad arrays.  */\n@@ -192,6 +219,7 @@ reshape_c10 (gfc_array_c10 * const restrict ret,\n       src += sstride0;\n       rcount[0]++;\n       scount[0]++;\n+\n       /* Advance to the next destination element.  */\n       n = 0;\n       while (rcount[n] == rextent[n])"}, {"sha": "2ab6111cf3c55a94efafca3aa7a4dc590e068939", "filename": "libgfortran/generated/reshape_c16.c", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c07d96b1c8e56efb61114c2f48724f32561a22/libgfortran%2Fgenerated%2Freshape_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c07d96b1c8e56efb61114c2f48724f32561a22/libgfortran%2Fgenerated%2Freshape_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_c16.c?ref=47c07d96b1c8e56efb61114c2f48724f32561a22", "patch": "@@ -37,8 +37,6 @@ Boston, MA 02110-1301, USA.  */\n \n typedef GFC_ARRAY_DESCRIPTOR(1, index_type) shape_type;\n \n-/* The shape parameter is ignored. We can currently deduce the shape from the\n-   return array.  */\n \n extern void reshape_c16 (gfc_array_c16 * const restrict, \n \tgfc_array_c16 * const restrict, \n@@ -83,12 +81,13 @@ reshape_c16 (gfc_array_c16 * const restrict ret,\n   const GFC_COMPLEX_16 *src;\n   int n;\n   int dim;\n+  int sempty, pempty;\n \n   if (ret->data == NULL)\n     {\n       rdim = shape->dim[0].ubound - shape->dim[0].lbound + 1;\n       rs = 1;\n-      for (n=0; n < rdim; n++)\n+      for (n = 0; n < rdim; n++)\n \t{\n \t  ret->dim[n].lbound = 0;\n \t  rex = shape->data[n * shape->dim[0].stride];\n@@ -130,13 +129,17 @@ reshape_c16 (gfc_array_c16 * const restrict ret,\n \n   sdim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;\n+  sempty = 0;\n   for (n = 0; n < sdim; n++)\n     {\n       scount[n] = 0;\n       sstride[n] = source->dim[n].stride;\n       sextent[n] = source->dim[n].ubound + 1 - source->dim[n].lbound;\n       if (sextent[n] <= 0)\n-        abort ();\n+\t{\n+\t  sempty = 1;\n+\t  sextent[n] = 0;\n+\t}\n \n       if (ssize == sstride[n])\n         ssize *= sextent[n];\n@@ -148,13 +151,18 @@ reshape_c16 (gfc_array_c16 * const restrict ret,\n     {\n       pdim = GFC_DESCRIPTOR_RANK (pad);\n       psize = 1;\n+      pempty = 0;\n       for (n = 0; n < pdim; n++)\n         {\n           pcount[n] = 0;\n           pstride[n] = pad->dim[n].stride;\n           pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n           if (pextent[n] <= 0)\n-            abort ();\n+\t    {\n+\t      pempty = 1;\n+\t      pextent[n] = 0;\n+\t    }\n+\n           if (psize == pstride[n])\n             psize *= pextent[n];\n           else\n@@ -166,6 +174,7 @@ reshape_c16 (gfc_array_c16 * const restrict ret,\n     {\n       pdim = 0;\n       psize = 1;\n+      pempty = 1;\n       pptr = NULL;\n     }\n \n@@ -183,6 +192,24 @@ reshape_c16 (gfc_array_c16 * const restrict ret,\n   rstride0 = rstride[0];\n   sstride0 = sstride[0];\n \n+  if (sempty && pempty)\n+    abort ();\n+\n+  if (sempty)\n+    {\n+      /* Switch immediately to the pad array.  */\n+      src = pptr;\n+      sptr = NULL;\n+      sdim = pdim;\n+      for (dim = 0; dim < pdim; dim++)\n+\t{\n+\t  scount[dim] = pcount[dim];\n+\t  sextent[dim] = pextent[dim];\n+\t  sstride[dim] = pstride[dim];\n+\t  sstride0 = sstride[0] * sizeof (GFC_COMPLEX_16);\n+\t}\n+    }\n+\n   while (rptr)\n     {\n       /* Select between the source and pad arrays.  */\n@@ -192,6 +219,7 @@ reshape_c16 (gfc_array_c16 * const restrict ret,\n       src += sstride0;\n       rcount[0]++;\n       scount[0]++;\n+\n       /* Advance to the next destination element.  */\n       n = 0;\n       while (rcount[n] == rextent[n])"}, {"sha": "66b162218f64e52475c6e44e93ec813a99995e79", "filename": "libgfortran/generated/reshape_c4.c", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c07d96b1c8e56efb61114c2f48724f32561a22/libgfortran%2Fgenerated%2Freshape_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c07d96b1c8e56efb61114c2f48724f32561a22/libgfortran%2Fgenerated%2Freshape_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_c4.c?ref=47c07d96b1c8e56efb61114c2f48724f32561a22", "patch": "@@ -37,8 +37,6 @@ Boston, MA 02110-1301, USA.  */\n \n typedef GFC_ARRAY_DESCRIPTOR(1, index_type) shape_type;\n \n-/* The shape parameter is ignored. We can currently deduce the shape from the\n-   return array.  */\n \n extern void reshape_c4 (gfc_array_c4 * const restrict, \n \tgfc_array_c4 * const restrict, \n@@ -83,12 +81,13 @@ reshape_c4 (gfc_array_c4 * const restrict ret,\n   const GFC_COMPLEX_4 *src;\n   int n;\n   int dim;\n+  int sempty, pempty;\n \n   if (ret->data == NULL)\n     {\n       rdim = shape->dim[0].ubound - shape->dim[0].lbound + 1;\n       rs = 1;\n-      for (n=0; n < rdim; n++)\n+      for (n = 0; n < rdim; n++)\n \t{\n \t  ret->dim[n].lbound = 0;\n \t  rex = shape->data[n * shape->dim[0].stride];\n@@ -130,13 +129,17 @@ reshape_c4 (gfc_array_c4 * const restrict ret,\n \n   sdim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;\n+  sempty = 0;\n   for (n = 0; n < sdim; n++)\n     {\n       scount[n] = 0;\n       sstride[n] = source->dim[n].stride;\n       sextent[n] = source->dim[n].ubound + 1 - source->dim[n].lbound;\n       if (sextent[n] <= 0)\n-        abort ();\n+\t{\n+\t  sempty = 1;\n+\t  sextent[n] = 0;\n+\t}\n \n       if (ssize == sstride[n])\n         ssize *= sextent[n];\n@@ -148,13 +151,18 @@ reshape_c4 (gfc_array_c4 * const restrict ret,\n     {\n       pdim = GFC_DESCRIPTOR_RANK (pad);\n       psize = 1;\n+      pempty = 0;\n       for (n = 0; n < pdim; n++)\n         {\n           pcount[n] = 0;\n           pstride[n] = pad->dim[n].stride;\n           pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n           if (pextent[n] <= 0)\n-            abort ();\n+\t    {\n+\t      pempty = 1;\n+\t      pextent[n] = 0;\n+\t    }\n+\n           if (psize == pstride[n])\n             psize *= pextent[n];\n           else\n@@ -166,6 +174,7 @@ reshape_c4 (gfc_array_c4 * const restrict ret,\n     {\n       pdim = 0;\n       psize = 1;\n+      pempty = 1;\n       pptr = NULL;\n     }\n \n@@ -183,6 +192,24 @@ reshape_c4 (gfc_array_c4 * const restrict ret,\n   rstride0 = rstride[0];\n   sstride0 = sstride[0];\n \n+  if (sempty && pempty)\n+    abort ();\n+\n+  if (sempty)\n+    {\n+      /* Switch immediately to the pad array.  */\n+      src = pptr;\n+      sptr = NULL;\n+      sdim = pdim;\n+      for (dim = 0; dim < pdim; dim++)\n+\t{\n+\t  scount[dim] = pcount[dim];\n+\t  sextent[dim] = pextent[dim];\n+\t  sstride[dim] = pstride[dim];\n+\t  sstride0 = sstride[0] * sizeof (GFC_COMPLEX_4);\n+\t}\n+    }\n+\n   while (rptr)\n     {\n       /* Select between the source and pad arrays.  */\n@@ -192,6 +219,7 @@ reshape_c4 (gfc_array_c4 * const restrict ret,\n       src += sstride0;\n       rcount[0]++;\n       scount[0]++;\n+\n       /* Advance to the next destination element.  */\n       n = 0;\n       while (rcount[n] == rextent[n])"}, {"sha": "89316539443139a92ccbf5aa22bbf7a0f4e3c97b", "filename": "libgfortran/generated/reshape_c8.c", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c07d96b1c8e56efb61114c2f48724f32561a22/libgfortran%2Fgenerated%2Freshape_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c07d96b1c8e56efb61114c2f48724f32561a22/libgfortran%2Fgenerated%2Freshape_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_c8.c?ref=47c07d96b1c8e56efb61114c2f48724f32561a22", "patch": "@@ -37,8 +37,6 @@ Boston, MA 02110-1301, USA.  */\n \n typedef GFC_ARRAY_DESCRIPTOR(1, index_type) shape_type;\n \n-/* The shape parameter is ignored. We can currently deduce the shape from the\n-   return array.  */\n \n extern void reshape_c8 (gfc_array_c8 * const restrict, \n \tgfc_array_c8 * const restrict, \n@@ -83,12 +81,13 @@ reshape_c8 (gfc_array_c8 * const restrict ret,\n   const GFC_COMPLEX_8 *src;\n   int n;\n   int dim;\n+  int sempty, pempty;\n \n   if (ret->data == NULL)\n     {\n       rdim = shape->dim[0].ubound - shape->dim[0].lbound + 1;\n       rs = 1;\n-      for (n=0; n < rdim; n++)\n+      for (n = 0; n < rdim; n++)\n \t{\n \t  ret->dim[n].lbound = 0;\n \t  rex = shape->data[n * shape->dim[0].stride];\n@@ -130,13 +129,17 @@ reshape_c8 (gfc_array_c8 * const restrict ret,\n \n   sdim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;\n+  sempty = 0;\n   for (n = 0; n < sdim; n++)\n     {\n       scount[n] = 0;\n       sstride[n] = source->dim[n].stride;\n       sextent[n] = source->dim[n].ubound + 1 - source->dim[n].lbound;\n       if (sextent[n] <= 0)\n-        abort ();\n+\t{\n+\t  sempty = 1;\n+\t  sextent[n] = 0;\n+\t}\n \n       if (ssize == sstride[n])\n         ssize *= sextent[n];\n@@ -148,13 +151,18 @@ reshape_c8 (gfc_array_c8 * const restrict ret,\n     {\n       pdim = GFC_DESCRIPTOR_RANK (pad);\n       psize = 1;\n+      pempty = 0;\n       for (n = 0; n < pdim; n++)\n         {\n           pcount[n] = 0;\n           pstride[n] = pad->dim[n].stride;\n           pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n           if (pextent[n] <= 0)\n-            abort ();\n+\t    {\n+\t      pempty = 1;\n+\t      pextent[n] = 0;\n+\t    }\n+\n           if (psize == pstride[n])\n             psize *= pextent[n];\n           else\n@@ -166,6 +174,7 @@ reshape_c8 (gfc_array_c8 * const restrict ret,\n     {\n       pdim = 0;\n       psize = 1;\n+      pempty = 1;\n       pptr = NULL;\n     }\n \n@@ -183,6 +192,24 @@ reshape_c8 (gfc_array_c8 * const restrict ret,\n   rstride0 = rstride[0];\n   sstride0 = sstride[0];\n \n+  if (sempty && pempty)\n+    abort ();\n+\n+  if (sempty)\n+    {\n+      /* Switch immediately to the pad array.  */\n+      src = pptr;\n+      sptr = NULL;\n+      sdim = pdim;\n+      for (dim = 0; dim < pdim; dim++)\n+\t{\n+\t  scount[dim] = pcount[dim];\n+\t  sextent[dim] = pextent[dim];\n+\t  sstride[dim] = pstride[dim];\n+\t  sstride0 = sstride[0] * sizeof (GFC_COMPLEX_8);\n+\t}\n+    }\n+\n   while (rptr)\n     {\n       /* Select between the source and pad arrays.  */\n@@ -192,6 +219,7 @@ reshape_c8 (gfc_array_c8 * const restrict ret,\n       src += sstride0;\n       rcount[0]++;\n       scount[0]++;\n+\n       /* Advance to the next destination element.  */\n       n = 0;\n       while (rcount[n] == rextent[n])"}, {"sha": "c8777cfc09bcb13b798314c13dbb438e41a58a9c", "filename": "libgfortran/generated/reshape_i16.c", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c07d96b1c8e56efb61114c2f48724f32561a22/libgfortran%2Fgenerated%2Freshape_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c07d96b1c8e56efb61114c2f48724f32561a22/libgfortran%2Fgenerated%2Freshape_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_i16.c?ref=47c07d96b1c8e56efb61114c2f48724f32561a22", "patch": "@@ -37,8 +37,6 @@ Boston, MA 02110-1301, USA.  */\n \n typedef GFC_ARRAY_DESCRIPTOR(1, index_type) shape_type;\n \n-/* The shape parameter is ignored. We can currently deduce the shape from the\n-   return array.  */\n \n extern void reshape_16 (gfc_array_i16 * const restrict, \n \tgfc_array_i16 * const restrict, \n@@ -83,12 +81,13 @@ reshape_16 (gfc_array_i16 * const restrict ret,\n   const GFC_INTEGER_16 *src;\n   int n;\n   int dim;\n+  int sempty, pempty;\n \n   if (ret->data == NULL)\n     {\n       rdim = shape->dim[0].ubound - shape->dim[0].lbound + 1;\n       rs = 1;\n-      for (n=0; n < rdim; n++)\n+      for (n = 0; n < rdim; n++)\n \t{\n \t  ret->dim[n].lbound = 0;\n \t  rex = shape->data[n * shape->dim[0].stride];\n@@ -130,13 +129,17 @@ reshape_16 (gfc_array_i16 * const restrict ret,\n \n   sdim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;\n+  sempty = 0;\n   for (n = 0; n < sdim; n++)\n     {\n       scount[n] = 0;\n       sstride[n] = source->dim[n].stride;\n       sextent[n] = source->dim[n].ubound + 1 - source->dim[n].lbound;\n       if (sextent[n] <= 0)\n-        abort ();\n+\t{\n+\t  sempty = 1;\n+\t  sextent[n] = 0;\n+\t}\n \n       if (ssize == sstride[n])\n         ssize *= sextent[n];\n@@ -148,13 +151,18 @@ reshape_16 (gfc_array_i16 * const restrict ret,\n     {\n       pdim = GFC_DESCRIPTOR_RANK (pad);\n       psize = 1;\n+      pempty = 0;\n       for (n = 0; n < pdim; n++)\n         {\n           pcount[n] = 0;\n           pstride[n] = pad->dim[n].stride;\n           pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n           if (pextent[n] <= 0)\n-            abort ();\n+\t    {\n+\t      pempty = 1;\n+\t      pextent[n] = 0;\n+\t    }\n+\n           if (psize == pstride[n])\n             psize *= pextent[n];\n           else\n@@ -166,6 +174,7 @@ reshape_16 (gfc_array_i16 * const restrict ret,\n     {\n       pdim = 0;\n       psize = 1;\n+      pempty = 1;\n       pptr = NULL;\n     }\n \n@@ -183,6 +192,24 @@ reshape_16 (gfc_array_i16 * const restrict ret,\n   rstride0 = rstride[0];\n   sstride0 = sstride[0];\n \n+  if (sempty && pempty)\n+    abort ();\n+\n+  if (sempty)\n+    {\n+      /* Switch immediately to the pad array.  */\n+      src = pptr;\n+      sptr = NULL;\n+      sdim = pdim;\n+      for (dim = 0; dim < pdim; dim++)\n+\t{\n+\t  scount[dim] = pcount[dim];\n+\t  sextent[dim] = pextent[dim];\n+\t  sstride[dim] = pstride[dim];\n+\t  sstride0 = sstride[0] * sizeof (GFC_INTEGER_16);\n+\t}\n+    }\n+\n   while (rptr)\n     {\n       /* Select between the source and pad arrays.  */\n@@ -192,6 +219,7 @@ reshape_16 (gfc_array_i16 * const restrict ret,\n       src += sstride0;\n       rcount[0]++;\n       scount[0]++;\n+\n       /* Advance to the next destination element.  */\n       n = 0;\n       while (rcount[n] == rextent[n])"}, {"sha": "f51b73096d8931b95cbc1c9d82d0cb911995ae89", "filename": "libgfortran/generated/reshape_i4.c", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c07d96b1c8e56efb61114c2f48724f32561a22/libgfortran%2Fgenerated%2Freshape_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c07d96b1c8e56efb61114c2f48724f32561a22/libgfortran%2Fgenerated%2Freshape_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_i4.c?ref=47c07d96b1c8e56efb61114c2f48724f32561a22", "patch": "@@ -37,8 +37,6 @@ Boston, MA 02110-1301, USA.  */\n \n typedef GFC_ARRAY_DESCRIPTOR(1, index_type) shape_type;\n \n-/* The shape parameter is ignored. We can currently deduce the shape from the\n-   return array.  */\n \n extern void reshape_4 (gfc_array_i4 * const restrict, \n \tgfc_array_i4 * const restrict, \n@@ -83,12 +81,13 @@ reshape_4 (gfc_array_i4 * const restrict ret,\n   const GFC_INTEGER_4 *src;\n   int n;\n   int dim;\n+  int sempty, pempty;\n \n   if (ret->data == NULL)\n     {\n       rdim = shape->dim[0].ubound - shape->dim[0].lbound + 1;\n       rs = 1;\n-      for (n=0; n < rdim; n++)\n+      for (n = 0; n < rdim; n++)\n \t{\n \t  ret->dim[n].lbound = 0;\n \t  rex = shape->data[n * shape->dim[0].stride];\n@@ -130,13 +129,17 @@ reshape_4 (gfc_array_i4 * const restrict ret,\n \n   sdim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;\n+  sempty = 0;\n   for (n = 0; n < sdim; n++)\n     {\n       scount[n] = 0;\n       sstride[n] = source->dim[n].stride;\n       sextent[n] = source->dim[n].ubound + 1 - source->dim[n].lbound;\n       if (sextent[n] <= 0)\n-        abort ();\n+\t{\n+\t  sempty = 1;\n+\t  sextent[n] = 0;\n+\t}\n \n       if (ssize == sstride[n])\n         ssize *= sextent[n];\n@@ -148,13 +151,18 @@ reshape_4 (gfc_array_i4 * const restrict ret,\n     {\n       pdim = GFC_DESCRIPTOR_RANK (pad);\n       psize = 1;\n+      pempty = 0;\n       for (n = 0; n < pdim; n++)\n         {\n           pcount[n] = 0;\n           pstride[n] = pad->dim[n].stride;\n           pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n           if (pextent[n] <= 0)\n-            abort ();\n+\t    {\n+\t      pempty = 1;\n+\t      pextent[n] = 0;\n+\t    }\n+\n           if (psize == pstride[n])\n             psize *= pextent[n];\n           else\n@@ -166,6 +174,7 @@ reshape_4 (gfc_array_i4 * const restrict ret,\n     {\n       pdim = 0;\n       psize = 1;\n+      pempty = 1;\n       pptr = NULL;\n     }\n \n@@ -183,6 +192,24 @@ reshape_4 (gfc_array_i4 * const restrict ret,\n   rstride0 = rstride[0];\n   sstride0 = sstride[0];\n \n+  if (sempty && pempty)\n+    abort ();\n+\n+  if (sempty)\n+    {\n+      /* Switch immediately to the pad array.  */\n+      src = pptr;\n+      sptr = NULL;\n+      sdim = pdim;\n+      for (dim = 0; dim < pdim; dim++)\n+\t{\n+\t  scount[dim] = pcount[dim];\n+\t  sextent[dim] = pextent[dim];\n+\t  sstride[dim] = pstride[dim];\n+\t  sstride0 = sstride[0] * sizeof (GFC_INTEGER_4);\n+\t}\n+    }\n+\n   while (rptr)\n     {\n       /* Select between the source and pad arrays.  */\n@@ -192,6 +219,7 @@ reshape_4 (gfc_array_i4 * const restrict ret,\n       src += sstride0;\n       rcount[0]++;\n       scount[0]++;\n+\n       /* Advance to the next destination element.  */\n       n = 0;\n       while (rcount[n] == rextent[n])"}, {"sha": "463919db1883eebaeea62b01d3e87c21c6966ea4", "filename": "libgfortran/generated/reshape_i8.c", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c07d96b1c8e56efb61114c2f48724f32561a22/libgfortran%2Fgenerated%2Freshape_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c07d96b1c8e56efb61114c2f48724f32561a22/libgfortran%2Fgenerated%2Freshape_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_i8.c?ref=47c07d96b1c8e56efb61114c2f48724f32561a22", "patch": "@@ -37,8 +37,6 @@ Boston, MA 02110-1301, USA.  */\n \n typedef GFC_ARRAY_DESCRIPTOR(1, index_type) shape_type;\n \n-/* The shape parameter is ignored. We can currently deduce the shape from the\n-   return array.  */\n \n extern void reshape_8 (gfc_array_i8 * const restrict, \n \tgfc_array_i8 * const restrict, \n@@ -83,12 +81,13 @@ reshape_8 (gfc_array_i8 * const restrict ret,\n   const GFC_INTEGER_8 *src;\n   int n;\n   int dim;\n+  int sempty, pempty;\n \n   if (ret->data == NULL)\n     {\n       rdim = shape->dim[0].ubound - shape->dim[0].lbound + 1;\n       rs = 1;\n-      for (n=0; n < rdim; n++)\n+      for (n = 0; n < rdim; n++)\n \t{\n \t  ret->dim[n].lbound = 0;\n \t  rex = shape->data[n * shape->dim[0].stride];\n@@ -130,13 +129,17 @@ reshape_8 (gfc_array_i8 * const restrict ret,\n \n   sdim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;\n+  sempty = 0;\n   for (n = 0; n < sdim; n++)\n     {\n       scount[n] = 0;\n       sstride[n] = source->dim[n].stride;\n       sextent[n] = source->dim[n].ubound + 1 - source->dim[n].lbound;\n       if (sextent[n] <= 0)\n-        abort ();\n+\t{\n+\t  sempty = 1;\n+\t  sextent[n] = 0;\n+\t}\n \n       if (ssize == sstride[n])\n         ssize *= sextent[n];\n@@ -148,13 +151,18 @@ reshape_8 (gfc_array_i8 * const restrict ret,\n     {\n       pdim = GFC_DESCRIPTOR_RANK (pad);\n       psize = 1;\n+      pempty = 0;\n       for (n = 0; n < pdim; n++)\n         {\n           pcount[n] = 0;\n           pstride[n] = pad->dim[n].stride;\n           pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n           if (pextent[n] <= 0)\n-            abort ();\n+\t    {\n+\t      pempty = 1;\n+\t      pextent[n] = 0;\n+\t    }\n+\n           if (psize == pstride[n])\n             psize *= pextent[n];\n           else\n@@ -166,6 +174,7 @@ reshape_8 (gfc_array_i8 * const restrict ret,\n     {\n       pdim = 0;\n       psize = 1;\n+      pempty = 1;\n       pptr = NULL;\n     }\n \n@@ -183,6 +192,24 @@ reshape_8 (gfc_array_i8 * const restrict ret,\n   rstride0 = rstride[0];\n   sstride0 = sstride[0];\n \n+  if (sempty && pempty)\n+    abort ();\n+\n+  if (sempty)\n+    {\n+      /* Switch immediately to the pad array.  */\n+      src = pptr;\n+      sptr = NULL;\n+      sdim = pdim;\n+      for (dim = 0; dim < pdim; dim++)\n+\t{\n+\t  scount[dim] = pcount[dim];\n+\t  sextent[dim] = pextent[dim];\n+\t  sstride[dim] = pstride[dim];\n+\t  sstride0 = sstride[0] * sizeof (GFC_INTEGER_8);\n+\t}\n+    }\n+\n   while (rptr)\n     {\n       /* Select between the source and pad arrays.  */\n@@ -192,6 +219,7 @@ reshape_8 (gfc_array_i8 * const restrict ret,\n       src += sstride0;\n       rcount[0]++;\n       scount[0]++;\n+\n       /* Advance to the next destination element.  */\n       n = 0;\n       while (rcount[n] == rextent[n])"}, {"sha": "c3d414320ade3a1c1d8c36db62ce2f728009e48e", "filename": "libgfortran/generated/reshape_r10.c", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c07d96b1c8e56efb61114c2f48724f32561a22/libgfortran%2Fgenerated%2Freshape_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c07d96b1c8e56efb61114c2f48724f32561a22/libgfortran%2Fgenerated%2Freshape_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_r10.c?ref=47c07d96b1c8e56efb61114c2f48724f32561a22", "patch": "@@ -37,8 +37,6 @@ Boston, MA 02110-1301, USA.  */\n \n typedef GFC_ARRAY_DESCRIPTOR(1, index_type) shape_type;\n \n-/* The shape parameter is ignored. We can currently deduce the shape from the\n-   return array.  */\n \n extern void reshape_r10 (gfc_array_r10 * const restrict, \n \tgfc_array_r10 * const restrict, \n@@ -83,12 +81,13 @@ reshape_r10 (gfc_array_r10 * const restrict ret,\n   const GFC_REAL_10 *src;\n   int n;\n   int dim;\n+  int sempty, pempty;\n \n   if (ret->data == NULL)\n     {\n       rdim = shape->dim[0].ubound - shape->dim[0].lbound + 1;\n       rs = 1;\n-      for (n=0; n < rdim; n++)\n+      for (n = 0; n < rdim; n++)\n \t{\n \t  ret->dim[n].lbound = 0;\n \t  rex = shape->data[n * shape->dim[0].stride];\n@@ -130,13 +129,17 @@ reshape_r10 (gfc_array_r10 * const restrict ret,\n \n   sdim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;\n+  sempty = 0;\n   for (n = 0; n < sdim; n++)\n     {\n       scount[n] = 0;\n       sstride[n] = source->dim[n].stride;\n       sextent[n] = source->dim[n].ubound + 1 - source->dim[n].lbound;\n       if (sextent[n] <= 0)\n-        abort ();\n+\t{\n+\t  sempty = 1;\n+\t  sextent[n] = 0;\n+\t}\n \n       if (ssize == sstride[n])\n         ssize *= sextent[n];\n@@ -148,13 +151,18 @@ reshape_r10 (gfc_array_r10 * const restrict ret,\n     {\n       pdim = GFC_DESCRIPTOR_RANK (pad);\n       psize = 1;\n+      pempty = 0;\n       for (n = 0; n < pdim; n++)\n         {\n           pcount[n] = 0;\n           pstride[n] = pad->dim[n].stride;\n           pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n           if (pextent[n] <= 0)\n-            abort ();\n+\t    {\n+\t      pempty = 1;\n+\t      pextent[n] = 0;\n+\t    }\n+\n           if (psize == pstride[n])\n             psize *= pextent[n];\n           else\n@@ -166,6 +174,7 @@ reshape_r10 (gfc_array_r10 * const restrict ret,\n     {\n       pdim = 0;\n       psize = 1;\n+      pempty = 1;\n       pptr = NULL;\n     }\n \n@@ -183,6 +192,24 @@ reshape_r10 (gfc_array_r10 * const restrict ret,\n   rstride0 = rstride[0];\n   sstride0 = sstride[0];\n \n+  if (sempty && pempty)\n+    abort ();\n+\n+  if (sempty)\n+    {\n+      /* Switch immediately to the pad array.  */\n+      src = pptr;\n+      sptr = NULL;\n+      sdim = pdim;\n+      for (dim = 0; dim < pdim; dim++)\n+\t{\n+\t  scount[dim] = pcount[dim];\n+\t  sextent[dim] = pextent[dim];\n+\t  sstride[dim] = pstride[dim];\n+\t  sstride0 = sstride[0] * sizeof (GFC_REAL_10);\n+\t}\n+    }\n+\n   while (rptr)\n     {\n       /* Select between the source and pad arrays.  */\n@@ -192,6 +219,7 @@ reshape_r10 (gfc_array_r10 * const restrict ret,\n       src += sstride0;\n       rcount[0]++;\n       scount[0]++;\n+\n       /* Advance to the next destination element.  */\n       n = 0;\n       while (rcount[n] == rextent[n])"}, {"sha": "a8ba40b421bea6e9e7c40e49494b2d10f6b04f58", "filename": "libgfortran/generated/reshape_r16.c", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c07d96b1c8e56efb61114c2f48724f32561a22/libgfortran%2Fgenerated%2Freshape_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c07d96b1c8e56efb61114c2f48724f32561a22/libgfortran%2Fgenerated%2Freshape_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_r16.c?ref=47c07d96b1c8e56efb61114c2f48724f32561a22", "patch": "@@ -37,8 +37,6 @@ Boston, MA 02110-1301, USA.  */\n \n typedef GFC_ARRAY_DESCRIPTOR(1, index_type) shape_type;\n \n-/* The shape parameter is ignored. We can currently deduce the shape from the\n-   return array.  */\n \n extern void reshape_r16 (gfc_array_r16 * const restrict, \n \tgfc_array_r16 * const restrict, \n@@ -83,12 +81,13 @@ reshape_r16 (gfc_array_r16 * const restrict ret,\n   const GFC_REAL_16 *src;\n   int n;\n   int dim;\n+  int sempty, pempty;\n \n   if (ret->data == NULL)\n     {\n       rdim = shape->dim[0].ubound - shape->dim[0].lbound + 1;\n       rs = 1;\n-      for (n=0; n < rdim; n++)\n+      for (n = 0; n < rdim; n++)\n \t{\n \t  ret->dim[n].lbound = 0;\n \t  rex = shape->data[n * shape->dim[0].stride];\n@@ -130,13 +129,17 @@ reshape_r16 (gfc_array_r16 * const restrict ret,\n \n   sdim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;\n+  sempty = 0;\n   for (n = 0; n < sdim; n++)\n     {\n       scount[n] = 0;\n       sstride[n] = source->dim[n].stride;\n       sextent[n] = source->dim[n].ubound + 1 - source->dim[n].lbound;\n       if (sextent[n] <= 0)\n-        abort ();\n+\t{\n+\t  sempty = 1;\n+\t  sextent[n] = 0;\n+\t}\n \n       if (ssize == sstride[n])\n         ssize *= sextent[n];\n@@ -148,13 +151,18 @@ reshape_r16 (gfc_array_r16 * const restrict ret,\n     {\n       pdim = GFC_DESCRIPTOR_RANK (pad);\n       psize = 1;\n+      pempty = 0;\n       for (n = 0; n < pdim; n++)\n         {\n           pcount[n] = 0;\n           pstride[n] = pad->dim[n].stride;\n           pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n           if (pextent[n] <= 0)\n-            abort ();\n+\t    {\n+\t      pempty = 1;\n+\t      pextent[n] = 0;\n+\t    }\n+\n           if (psize == pstride[n])\n             psize *= pextent[n];\n           else\n@@ -166,6 +174,7 @@ reshape_r16 (gfc_array_r16 * const restrict ret,\n     {\n       pdim = 0;\n       psize = 1;\n+      pempty = 1;\n       pptr = NULL;\n     }\n \n@@ -183,6 +192,24 @@ reshape_r16 (gfc_array_r16 * const restrict ret,\n   rstride0 = rstride[0];\n   sstride0 = sstride[0];\n \n+  if (sempty && pempty)\n+    abort ();\n+\n+  if (sempty)\n+    {\n+      /* Switch immediately to the pad array.  */\n+      src = pptr;\n+      sptr = NULL;\n+      sdim = pdim;\n+      for (dim = 0; dim < pdim; dim++)\n+\t{\n+\t  scount[dim] = pcount[dim];\n+\t  sextent[dim] = pextent[dim];\n+\t  sstride[dim] = pstride[dim];\n+\t  sstride0 = sstride[0] * sizeof (GFC_REAL_16);\n+\t}\n+    }\n+\n   while (rptr)\n     {\n       /* Select between the source and pad arrays.  */\n@@ -192,6 +219,7 @@ reshape_r16 (gfc_array_r16 * const restrict ret,\n       src += sstride0;\n       rcount[0]++;\n       scount[0]++;\n+\n       /* Advance to the next destination element.  */\n       n = 0;\n       while (rcount[n] == rextent[n])"}, {"sha": "b03900ae29f8a4b8da05fee182a9a89887247661", "filename": "libgfortran/generated/reshape_r4.c", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c07d96b1c8e56efb61114c2f48724f32561a22/libgfortran%2Fgenerated%2Freshape_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c07d96b1c8e56efb61114c2f48724f32561a22/libgfortran%2Fgenerated%2Freshape_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_r4.c?ref=47c07d96b1c8e56efb61114c2f48724f32561a22", "patch": "@@ -37,8 +37,6 @@ Boston, MA 02110-1301, USA.  */\n \n typedef GFC_ARRAY_DESCRIPTOR(1, index_type) shape_type;\n \n-/* The shape parameter is ignored. We can currently deduce the shape from the\n-   return array.  */\n \n extern void reshape_r4 (gfc_array_r4 * const restrict, \n \tgfc_array_r4 * const restrict, \n@@ -83,12 +81,13 @@ reshape_r4 (gfc_array_r4 * const restrict ret,\n   const GFC_REAL_4 *src;\n   int n;\n   int dim;\n+  int sempty, pempty;\n \n   if (ret->data == NULL)\n     {\n       rdim = shape->dim[0].ubound - shape->dim[0].lbound + 1;\n       rs = 1;\n-      for (n=0; n < rdim; n++)\n+      for (n = 0; n < rdim; n++)\n \t{\n \t  ret->dim[n].lbound = 0;\n \t  rex = shape->data[n * shape->dim[0].stride];\n@@ -130,13 +129,17 @@ reshape_r4 (gfc_array_r4 * const restrict ret,\n \n   sdim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;\n+  sempty = 0;\n   for (n = 0; n < sdim; n++)\n     {\n       scount[n] = 0;\n       sstride[n] = source->dim[n].stride;\n       sextent[n] = source->dim[n].ubound + 1 - source->dim[n].lbound;\n       if (sextent[n] <= 0)\n-        abort ();\n+\t{\n+\t  sempty = 1;\n+\t  sextent[n] = 0;\n+\t}\n \n       if (ssize == sstride[n])\n         ssize *= sextent[n];\n@@ -148,13 +151,18 @@ reshape_r4 (gfc_array_r4 * const restrict ret,\n     {\n       pdim = GFC_DESCRIPTOR_RANK (pad);\n       psize = 1;\n+      pempty = 0;\n       for (n = 0; n < pdim; n++)\n         {\n           pcount[n] = 0;\n           pstride[n] = pad->dim[n].stride;\n           pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n           if (pextent[n] <= 0)\n-            abort ();\n+\t    {\n+\t      pempty = 1;\n+\t      pextent[n] = 0;\n+\t    }\n+\n           if (psize == pstride[n])\n             psize *= pextent[n];\n           else\n@@ -166,6 +174,7 @@ reshape_r4 (gfc_array_r4 * const restrict ret,\n     {\n       pdim = 0;\n       psize = 1;\n+      pempty = 1;\n       pptr = NULL;\n     }\n \n@@ -183,6 +192,24 @@ reshape_r4 (gfc_array_r4 * const restrict ret,\n   rstride0 = rstride[0];\n   sstride0 = sstride[0];\n \n+  if (sempty && pempty)\n+    abort ();\n+\n+  if (sempty)\n+    {\n+      /* Switch immediately to the pad array.  */\n+      src = pptr;\n+      sptr = NULL;\n+      sdim = pdim;\n+      for (dim = 0; dim < pdim; dim++)\n+\t{\n+\t  scount[dim] = pcount[dim];\n+\t  sextent[dim] = pextent[dim];\n+\t  sstride[dim] = pstride[dim];\n+\t  sstride0 = sstride[0] * sizeof (GFC_REAL_4);\n+\t}\n+    }\n+\n   while (rptr)\n     {\n       /* Select between the source and pad arrays.  */\n@@ -192,6 +219,7 @@ reshape_r4 (gfc_array_r4 * const restrict ret,\n       src += sstride0;\n       rcount[0]++;\n       scount[0]++;\n+\n       /* Advance to the next destination element.  */\n       n = 0;\n       while (rcount[n] == rextent[n])"}, {"sha": "2a3e73380188b8444f18e9ff2fae18fc2232e391", "filename": "libgfortran/generated/reshape_r8.c", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c07d96b1c8e56efb61114c2f48724f32561a22/libgfortran%2Fgenerated%2Freshape_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c07d96b1c8e56efb61114c2f48724f32561a22/libgfortran%2Fgenerated%2Freshape_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_r8.c?ref=47c07d96b1c8e56efb61114c2f48724f32561a22", "patch": "@@ -37,8 +37,6 @@ Boston, MA 02110-1301, USA.  */\n \n typedef GFC_ARRAY_DESCRIPTOR(1, index_type) shape_type;\n \n-/* The shape parameter is ignored. We can currently deduce the shape from the\n-   return array.  */\n \n extern void reshape_r8 (gfc_array_r8 * const restrict, \n \tgfc_array_r8 * const restrict, \n@@ -83,12 +81,13 @@ reshape_r8 (gfc_array_r8 * const restrict ret,\n   const GFC_REAL_8 *src;\n   int n;\n   int dim;\n+  int sempty, pempty;\n \n   if (ret->data == NULL)\n     {\n       rdim = shape->dim[0].ubound - shape->dim[0].lbound + 1;\n       rs = 1;\n-      for (n=0; n < rdim; n++)\n+      for (n = 0; n < rdim; n++)\n \t{\n \t  ret->dim[n].lbound = 0;\n \t  rex = shape->data[n * shape->dim[0].stride];\n@@ -130,13 +129,17 @@ reshape_r8 (gfc_array_r8 * const restrict ret,\n \n   sdim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;\n+  sempty = 0;\n   for (n = 0; n < sdim; n++)\n     {\n       scount[n] = 0;\n       sstride[n] = source->dim[n].stride;\n       sextent[n] = source->dim[n].ubound + 1 - source->dim[n].lbound;\n       if (sextent[n] <= 0)\n-        abort ();\n+\t{\n+\t  sempty = 1;\n+\t  sextent[n] = 0;\n+\t}\n \n       if (ssize == sstride[n])\n         ssize *= sextent[n];\n@@ -148,13 +151,18 @@ reshape_r8 (gfc_array_r8 * const restrict ret,\n     {\n       pdim = GFC_DESCRIPTOR_RANK (pad);\n       psize = 1;\n+      pempty = 0;\n       for (n = 0; n < pdim; n++)\n         {\n           pcount[n] = 0;\n           pstride[n] = pad->dim[n].stride;\n           pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n           if (pextent[n] <= 0)\n-            abort ();\n+\t    {\n+\t      pempty = 1;\n+\t      pextent[n] = 0;\n+\t    }\n+\n           if (psize == pstride[n])\n             psize *= pextent[n];\n           else\n@@ -166,6 +174,7 @@ reshape_r8 (gfc_array_r8 * const restrict ret,\n     {\n       pdim = 0;\n       psize = 1;\n+      pempty = 1;\n       pptr = NULL;\n     }\n \n@@ -183,6 +192,24 @@ reshape_r8 (gfc_array_r8 * const restrict ret,\n   rstride0 = rstride[0];\n   sstride0 = sstride[0];\n \n+  if (sempty && pempty)\n+    abort ();\n+\n+  if (sempty)\n+    {\n+      /* Switch immediately to the pad array.  */\n+      src = pptr;\n+      sptr = NULL;\n+      sdim = pdim;\n+      for (dim = 0; dim < pdim; dim++)\n+\t{\n+\t  scount[dim] = pcount[dim];\n+\t  sextent[dim] = pextent[dim];\n+\t  sstride[dim] = pstride[dim];\n+\t  sstride0 = sstride[0] * sizeof (GFC_REAL_8);\n+\t}\n+    }\n+\n   while (rptr)\n     {\n       /* Select between the source and pad arrays.  */\n@@ -192,6 +219,7 @@ reshape_r8 (gfc_array_r8 * const restrict ret,\n       src += sstride0;\n       rcount[0]++;\n       scount[0]++;\n+\n       /* Advance to the next destination element.  */\n       n = 0;\n       while (rcount[n] == rextent[n])"}, {"sha": "c58fab017953bc09bdcb459632d3c1115ce3f887", "filename": "libgfortran/intrinsics/reshape_generic.c", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c07d96b1c8e56efb61114c2f48724f32561a22/libgfortran%2Fintrinsics%2Freshape_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c07d96b1c8e56efb61114c2f48724f32561a22/libgfortran%2Fintrinsics%2Freshape_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Freshape_generic.c?ref=47c07d96b1c8e56efb61114c2f48724f32561a22", "patch": "@@ -37,9 +37,6 @@ Boston, MA 02110-1301, USA.  */\n typedef GFC_ARRAY_DESCRIPTOR(1, index_type) shape_type;\n typedef GFC_ARRAY_DESCRIPTOR(GFC_MAX_DIMENSIONS, char) parray;\n \n-/* The shape parameter is ignored. We can currently deduce the shape from the\n-   return array.  */\n-\n static void\n reshape_internal (parray *ret, parray *source, shape_type *shape,\n \t\t  parray *pad, shape_type *order, index_type size)\n@@ -73,12 +70,13 @@ reshape_internal (parray *ret, parray *source, shape_type *shape,\n   const char *src;\n   int n;\n   int dim;\n+  int sempty, pempty;\n \n   if (ret->data == NULL)\n     {\n       rdim = shape->dim[0].ubound - shape->dim[0].lbound + 1;\n       rs = 1;\n-      for (n=0; n < rdim; n++)\n+      for (n = 0; n < rdim; n++)\n \t{\n \t  ret->dim[n].lbound = 0;\n \t  rex = shape->data[n * shape->dim[0].stride];\n@@ -120,13 +118,17 @@ reshape_internal (parray *ret, parray *source, shape_type *shape,\n \n   sdim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;\n+  sempty = 0;\n   for (n = 0; n < sdim; n++)\n     {\n       scount[n] = 0;\n       sstride[n] = source->dim[n].stride;\n       sextent[n] = source->dim[n].ubound + 1 - source->dim[n].lbound;\n       if (sextent[n] <= 0)\n-        abort ();\n+\t{\n+\t  sempty = 1;\n+\t  sextent[n] = 0;\n+\t}\n \n       if (ssize == sstride[n])\n         ssize *= sextent[n];\n@@ -138,13 +140,18 @@ reshape_internal (parray *ret, parray *source, shape_type *shape,\n     {\n       pdim = GFC_DESCRIPTOR_RANK (pad);\n       psize = 1;\n+      pempty = 0;\n       for (n = 0; n < pdim; n++)\n         {\n           pcount[n] = 0;\n           pstride[n] = pad->dim[n].stride;\n           pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n           if (pextent[n] <= 0)\n-            abort ();\n+\t    {\n+\t      pempty = 1;\n+              pextent[n] = 0;\n+\t    }\n+\n           if (psize == pstride[n])\n             psize *= pextent[n];\n           else\n@@ -156,6 +163,7 @@ reshape_internal (parray *ret, parray *source, shape_type *shape,\n     {\n       pdim = 0;\n       psize = 1;\n+      pempty = 1;\n       pptr = NULL;\n     }\n \n@@ -173,6 +181,24 @@ reshape_internal (parray *ret, parray *source, shape_type *shape,\n   rstride0 = rstride[0] * size;\n   sstride0 = sstride[0] * size;\n \n+  if (sempty && pempty)\n+    abort ();\n+\n+  if (sempty)\n+    {\n+      /* Switch immediately to the pad array.  */\n+      src = pptr;\n+      sptr = NULL;\n+      sdim = pdim;\n+      for (dim = 0; dim < pdim; dim++)\n+\t{\n+\t  scount[dim] = pcount[dim];\n+\t  sextent[dim] = pextent[dim];\n+\t  sstride[dim] = pstride[dim];\n+\t  sstride0 = sstride[0] * size;\n+\t}\n+    }\n+\n   while (rptr)\n     {\n       /* Select between the source and pad arrays.  */\n@@ -182,6 +208,7 @@ reshape_internal (parray *ret, parray *source, shape_type *shape,\n       src += sstride0;\n       rcount[0]++;\n       scount[0]++;\n+\n       /* Advance to the next destination element.  */\n       n = 0;\n       while (rcount[n] == rextent[n])\n@@ -204,7 +231,8 @@ reshape_internal (parray *ret, parray *source, shape_type *shape,\n               rcount[n]++;\n               rptr += rstride[n] * size;\n             }\n-        }\n+\t}\n+\n       /* Advance to the next source element.  */\n       n = 0;\n       while (scount[n] == sextent[n])"}, {"sha": "345837a32cc39219721ed750635c0ebe539a0fa3", "filename": "libgfortran/m4/reshape.m4", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c07d96b1c8e56efb61114c2f48724f32561a22/libgfortran%2Fm4%2Freshape.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c07d96b1c8e56efb61114c2f48724f32561a22/libgfortran%2Fm4%2Freshape.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Freshape.m4?ref=47c07d96b1c8e56efb61114c2f48724f32561a22", "patch": "@@ -38,9 +38,9 @@ include(iparm.m4)dnl\n \n typedef GFC_ARRAY_DESCRIPTOR(1, index_type) shape_type;\n \n-/* The shape parameter is ignored. We can currently deduce the shape from the\n-   return array.  */\n-dnl Only the kind (ie size) is used to name the function.\n+dnl For integer routines, only the kind (ie size) is used to name the\n+dnl function.  The same function will be used for integer and logical\n+dnl arrays of the same kind.\n \n extern void reshape_`'rtype_ccode (rtype * const restrict, \n \trtype * const restrict, \n@@ -85,12 +85,13 @@ reshape_`'rtype_ccode (rtype * const restrict ret,\n   const rtype_name *src;\n   int n;\n   int dim;\n+  int sempty, pempty;\n \n   if (ret->data == NULL)\n     {\n       rdim = shape->dim[0].ubound - shape->dim[0].lbound + 1;\n       rs = 1;\n-      for (n=0; n < rdim; n++)\n+      for (n = 0; n < rdim; n++)\n \t{\n \t  ret->dim[n].lbound = 0;\n \t  rex = shape->data[n * shape->dim[0].stride];\n@@ -132,13 +133,17 @@ reshape_`'rtype_ccode (rtype * const restrict ret,\n \n   sdim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;\n+  sempty = 0;\n   for (n = 0; n < sdim; n++)\n     {\n       scount[n] = 0;\n       sstride[n] = source->dim[n].stride;\n       sextent[n] = source->dim[n].ubound + 1 - source->dim[n].lbound;\n       if (sextent[n] <= 0)\n-        abort ();\n+\t{\n+\t  sempty = 1;\n+\t  sextent[n] = 0;\n+\t}\n \n       if (ssize == sstride[n])\n         ssize *= sextent[n];\n@@ -150,13 +155,18 @@ reshape_`'rtype_ccode (rtype * const restrict ret,\n     {\n       pdim = GFC_DESCRIPTOR_RANK (pad);\n       psize = 1;\n+      pempty = 0;\n       for (n = 0; n < pdim; n++)\n         {\n           pcount[n] = 0;\n           pstride[n] = pad->dim[n].stride;\n           pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n           if (pextent[n] <= 0)\n-            abort ();\n+\t    {\n+\t      pempty = 1;\n+\t      pextent[n] = 0;\n+\t    }\n+\n           if (psize == pstride[n])\n             psize *= pextent[n];\n           else\n@@ -168,6 +178,7 @@ reshape_`'rtype_ccode (rtype * const restrict ret,\n     {\n       pdim = 0;\n       psize = 1;\n+      pempty = 1;\n       pptr = NULL;\n     }\n \n@@ -185,6 +196,24 @@ reshape_`'rtype_ccode (rtype * const restrict ret,\n   rstride0 = rstride[0];\n   sstride0 = sstride[0];\n \n+  if (sempty && pempty)\n+    abort ();\n+\n+  if (sempty)\n+    {\n+      /* Switch immediately to the pad array.  */\n+      src = pptr;\n+      sptr = NULL;\n+      sdim = pdim;\n+      for (dim = 0; dim < pdim; dim++)\n+\t{\n+\t  scount[dim] = pcount[dim];\n+\t  sextent[dim] = pextent[dim];\n+\t  sstride[dim] = pstride[dim];\n+\t  sstride0 = sstride[0] * sizeof (rtype_name);\n+\t}\n+    }\n+\n   while (rptr)\n     {\n       /* Select between the source and pad arrays.  */\n@@ -194,6 +223,7 @@ reshape_`'rtype_ccode (rtype * const restrict ret,\n       src += sstride0;\n       rcount[0]++;\n       scount[0]++;\n+\n       /* Advance to the next destination element.  */\n       n = 0;\n       while (rcount[n] == rextent[n])"}]}