{"sha": "67aeaded2f8dabe16b4879261c6b6ddda6b53cd2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdhZWFkZWQyZjhkYWJlMTZiNDg3OTI2MWM2YjZkZGRhNmI1M2NkMg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2018-10-12T20:11:27Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2018-10-12T20:11:27Z"}, "message": "introduce --enable-large-address-aware\n\nAdd a configure knob for mingw32 and 64 toolchains to default passing\n--large-address-aware to the linker, when creating 32-bit binaries.\n-Wl,--disable-large-address-aware can still reverse its effects.\n\nfor  gcc/ChangeLog\n\n\t* configure.ac: Introduce --enable-large-address-aware\n\tto define MINGW_DEFAULT_LARGE_ADDR_AWARE.\n\t* doc/install.texi: Document it.\n\t* configure, config.in: Rebuilt.\n\t* config/i386/mingw32.h (LINK_SPEC_LARGE_ADDR_AWARE): Define,\n\tbased on MINGW_DEFAULT_LARGE_ADDR_AWARE.\n\t(LINK_SPEC): Insert it.\n\t* config/i386/mingw-264.h: Likewise.\n\nFrom-SVN: r265130", "tree": {"sha": "2c0666d5a96feaaa414d864ef835106a6dc116ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c0666d5a96feaaa414d864ef835106a6dc116ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67aeaded2f8dabe16b4879261c6b6ddda6b53cd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67aeaded2f8dabe16b4879261c6b6ddda6b53cd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67aeaded2f8dabe16b4879261c6b6ddda6b53cd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67aeaded2f8dabe16b4879261c6b6ddda6b53cd2/comments", "author": null, "committer": null, "parents": [{"sha": "9e41e97531b6fe141ca2f35839f4f1d45f47170e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e41e97531b6fe141ca2f35839f4f1d45f47170e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e41e97531b6fe141ca2f35839f4f1d45f47170e"}], "stats": {"total": 71, "additions": 69, "deletions": 2}, "files": [{"sha": "1cc85d8f23e53a6b1c2076d7893bd3440f3c881b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67aeaded2f8dabe16b4879261c6b6ddda6b53cd2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67aeaded2f8dabe16b4879261c6b6ddda6b53cd2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67aeaded2f8dabe16b4879261c6b6ddda6b53cd2", "patch": "@@ -1,5 +1,14 @@\n 2018-10-12  Alexandre Oliva <oliva@adacore.com>\n \n+\t* configure.ac: Introduce --enable-large-address-aware\n+\tto define MINGW_DEFAULT_LARGE_ADDR_AWARE.\n+\t* doc/install.texi: Document it.\n+\t* configure, config.in: Rebuilt.\n+\t* config/i386/mingw32.h (LINK_SPEC_LARGE_ADDR_AWARE): Define,\n+\tbased on MINGW_DEFAULT_LARGE_ADDR_AWARE.\n+\t(LINK_SPEC): Insert it.\n+\t* config/i386/mingw-264.h: Likewise.\n+\n \t* cygming.h (HAVE_GAS_ALIGNED_COMM): Fallback-define.\n \n 2018-10-12  Peter Bergner  <bergner@linux.ibm.com>"}, {"sha": "b807d49712e56481919794ef002c517be4420b22", "filename": "gcc/config.in", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67aeaded2f8dabe16b4879261c6b6ddda6b53cd2/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67aeaded2f8dabe16b4879261c6b6ddda6b53cd2/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=67aeaded2f8dabe16b4879261c6b6ddda6b53cd2", "patch": "@@ -1993,6 +1993,18 @@\n #endif\n \n \n+/* Define if we should link with --large-address-aware by default */\n+#ifndef USED_FOR_TARGET\n+#undef MINGW_DEFAULT_LARGE_ADDR_AWARE\n+#endif\n+\n+\n+/* Define if we should link with --large-address-aware by default */\n+#ifndef USED_FOR_TARGET\n+#undef MINGW_DEFAULT_LARGE_ADDR_AWARE\n+#endif\n+\n+\n /* Value to set mingw's _dowildcard to. */\n #ifndef USED_FOR_TARGET\n #undef MINGW_DOWILDCARD"}, {"sha": "00b3f042a36cae7e31318b548e6f25edf291abe2", "filename": "gcc/config/i386/mingw-w64.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67aeaded2f8dabe16b4879261c6b6ddda6b53cd2/gcc%2Fconfig%2Fi386%2Fmingw-w64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67aeaded2f8dabe16b4879261c6b6ddda6b53cd2/gcc%2Fconfig%2Fi386%2Fmingw-w64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmingw-w64.h?ref=67aeaded2f8dabe16b4879261c6b6ddda6b53cd2", "patch": "@@ -81,11 +81,20 @@ along with GCC; see the file COPYING3.  If not see\n #define MULTILIB_DEFAULTS { \"m32\" }\n #endif\n \n+#undef LINK_SPEC_LARGE_ADDR_AWARE\n+#if MINGW_DEFAULT_LARGE_ADDR_AWARE\n+# define LINK_SPEC_LARGE_ADDR_AWARE \\\n+  \"%{!shared:%{!mdll:%{\" SPEC_32 \":--large-address-aware}}}\"\n+#else\n+# define LINK_SPEC_LARGE_ADDR_AWARE \"\"\n+#endif\n+\n #undef LINK_SPEC\n #define LINK_SPEC SUB_LINK_SPEC \" %{mwindows:--subsystem windows} \\\n   %{mconsole:--subsystem console} \\\n   %{shared: %{mdll: %eshared and mdll are not compatible}} \\\n   %{shared: --shared} %{mdll:--dll} \\\n   %{static:-Bstatic} %{!static:-Bdynamic} \\\n   %{shared|mdll: \" SUB_LINK_ENTRY \" --enable-auto-image-base} \\\n+  \" LINK_SPEC_LARGE_ADDR_AWARE \"\\\n   %(shared_libgcc_undefs)\""}, {"sha": "c9d8a7a31f30e7bfd235e912d98ba9decf473092", "filename": "gcc/config/i386/mingw32.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67aeaded2f8dabe16b4879261c6b6ddda6b53cd2/gcc%2Fconfig%2Fi386%2Fmingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67aeaded2f8dabe16b4879261c6b6ddda6b53cd2/gcc%2Fconfig%2Fi386%2Fmingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmingw32.h?ref=67aeaded2f8dabe16b4879261c6b6ddda6b53cd2", "patch": "@@ -114,12 +114,20 @@ along with GCC; see the file COPYING3.  If not see\n #define SUBTARGET_EXTRA_SPECS\t\t\t\t\t\t\\\n   { \"shared_libgcc_undefs\", SHARED_LIBGCC_UNDEFS_SPEC }\n \n+#if MINGW_DEFAULT_LARGE_ADDR_AWARE\n+# define LINK_SPEC_LARGE_ADDR_AWARE \\\n+  \"%{!shared:%{!mdll:--large-address-aware}}\"\n+#else\n+# define LINK_SPEC_LARGE_ADDR_AWARE \"\"\n+#endif\n+\n #define LINK_SPEC \"%{mwindows:--subsystem windows} \\\n   %{mconsole:--subsystem console} \\\n   %{shared: %{mdll: %eshared and mdll are not compatible}} \\\n   %{shared: --shared} %{mdll:--dll} \\\n   %{static:-Bstatic} %{!static:-Bdynamic} \\\n   %{shared|mdll: \" SUB_LINK_ENTRY \" --enable-auto-image-base} \\\n+  \" LINK_SPEC_LARGE_ADDR_AWARE \"\\\n   %(shared_libgcc_undefs)\"\n \n /* Include in the mingw32 libraries with libgcc */"}, {"sha": "563860181a1c1ae7e469e89a1716e0dd8fceb124", "filename": "gcc/configure", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67aeaded2f8dabe16b4879261c6b6ddda6b53cd2/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67aeaded2f8dabe16b4879261c6b6ddda6b53cd2/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=67aeaded2f8dabe16b4879261c6b6ddda6b53cd2", "patch": "@@ -928,6 +928,7 @@ enable_sjlj_exceptions\n with_gcc_major_version_only\n enable_secureplt\n enable_mingw_wildcard\n+enable_large_address_aware\n enable_leading_mingw64_underscores\n enable_cld\n enable_frame_pointer\n@@ -1645,6 +1646,8 @@ Optional Features:\n   --enable-secureplt      enable -msecure-plt by default for PowerPC\n   --enable-mingw-wildcard Set whether to expand wildcard on command-line.\n                           Default to platform configuration\n+  --enable-large-address-aware\n+                          Link mingw executables with --large-address-aware\n   --enable-leading-mingw64-underscores\n                           enable leading underscores on 64 bit mingw targets\n   --enable-cld            enable -mcld by default for 32bit x86\n@@ -12037,6 +12040,17 @@ _ACEOF\n \n fi\n \n+# Check whether --enable-large-address-aware was given.\n+if test \"${enable_large_address_aware+set}\" = set; then :\n+  enableval=$enable_large_address_aware;\n+fi\n+\n+if test x\"$enable_large_address_aware\" = xyes; then :\n+\n+$as_echo \"#define MINGW_DEFAULT_LARGE_ADDR_AWARE 1\" >>confdefs.h\n+\n+fi\n+\n # Check whether --enable-leading-mingw64-underscores was given.\n if test \"${enable_leading_mingw64_underscores+set}\" = set; then :\n   enableval=$enable_leading_mingw64_underscores;\n@@ -18495,7 +18509,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18498 \"configure\"\n+#line 18512 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -18601,7 +18615,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18604 \"configure\"\n+#line 18618 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "c5c33af374ccb1fa84c0d8be6522c65dc06c029d", "filename": "gcc/configure.ac", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67aeaded2f8dabe16b4879261c6b6ddda6b53cd2/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67aeaded2f8dabe16b4879261c6b6ddda6b53cd2/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=67aeaded2f8dabe16b4879261c6b6ddda6b53cd2", "patch": "@@ -1852,6 +1852,13 @@ AS_IF([test x\"$enable_mingw_wildcard\" != xplatform ],\n \t\t $(test x\"$enable_mingw_wildcard\" = xno; echo $?),\n \t\t [Value to set mingw's _dowildcard to.])])\n \n+AC_ARG_ENABLE(large-address-aware,\n+[AS_HELP_STRING([--enable-large-address-aware],\n+\t\t[Link mingw executables with --large-address-aware])])\n+AS_IF([test x\"$enable_large_address_aware\" = xyes],\n+  [AC_DEFINE([MINGW_DEFAULT_LARGE_ADDR_AWARE], 1,\n+    [Define if we should link mingw executables with --large-address-aware])])\n+\n AC_ARG_ENABLE(leading-mingw64-underscores,\n   AS_HELP_STRING([--enable-leading-mingw64-underscores],\n                  [enable leading underscores on 64 bit mingw targets]),"}, {"sha": "6dd21bb915ee855aded1eb52a92ac1d33d27e9ca", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67aeaded2f8dabe16b4879261c6b6ddda6b53cd2/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67aeaded2f8dabe16b4879261c6b6ddda6b53cd2/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=67aeaded2f8dabe16b4879261c6b6ddda6b53cd2", "patch": "@@ -1734,6 +1734,14 @@ Using the GNU Compiler Collection (GCC)},\n See ``i386 and x86-64 Options'' in the main manual\n @end ifhtml\n \n+@item --enable-large-address-aware\n+The @option{--enable-large-address-aware} option arranges for MinGW\n+executables to be linked using the @option{--large-address-aware}\n+option, that enables the use of more than 2GB of memory.  If GCC is\n+configured with this option, its effects can be reversed by passing the\n+@option{-Wl,--disable-large-address-aware} option to the so-configured\n+compiler driver.\n+\n @item --enable-win32-registry\n @itemx --enable-win32-registry=@var{key}\n @itemx --disable-win32-registry"}]}