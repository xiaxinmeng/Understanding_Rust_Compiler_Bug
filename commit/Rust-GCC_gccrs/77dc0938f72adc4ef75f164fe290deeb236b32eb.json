{"sha": "77dc0938f72adc4ef75f164fe290deeb236b32eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdkYzA5MzhmNzJhZGM0ZWY3NWYxNjRmZTI5MGRlZWIyMzZiMzJlYg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-05-19T07:19:17Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-05-19T07:19:17Z"}, "message": "Warning fixes:\n\n        * Makefile.in (parse.o): Depend on toplev.h.\n        * class.c (typecode_p): Remove prototype and definition.\n        * cp-tree.h (currently_open_class, is_empty_class, member_p):\n        Add prototype.\n        * decl.c (push_overloaded_decl_top_level): Remove prototype and\n        definition.\n        * errfn.c (cp_error): Cast function pointer `error' to (errorfn *)\n        in call to `cp_thing'.\n        (cp_warning): Likewise for function pointer `warning'.\n        * except.c (do_function_call): Remove prototype and definition.\n        (call_eh_info): Wrap variable `t1' in macro NEW_EH_MODEL.\n        * method.c (is_java_type): Add prototype and make it static.\n        * parse.y: Include toplev.h.\n        * pt.c (type_unification): Remove unused variable `arg'.\n        (instantiate_decl): likewise for `save_ti'.\n        * tree.c (propagate_binfo_offsets): Likewise for `base_binfos'.\n\nFrom-SVN: r19866", "tree": {"sha": "b8d3defbc89a227144e054b7b36e1da85937bbb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8d3defbc89a227144e054b7b36e1da85937bbb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77dc0938f72adc4ef75f164fe290deeb236b32eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77dc0938f72adc4ef75f164fe290deeb236b32eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77dc0938f72adc4ef75f164fe290deeb236b32eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77dc0938f72adc4ef75f164fe290deeb236b32eb/comments", "author": null, "committer": null, "parents": [{"sha": "12c45d894bb083f9a735c121a371d3b404302d82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12c45d894bb083f9a735c121a371d3b404302d82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12c45d894bb083f9a735c121a371d3b404302d82"}], "stats": {"total": 95, "additions": 43, "deletions": 52}, "files": [{"sha": "e02f940322e54866815a5599ce95270910d36f1f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77dc0938f72adc4ef75f164fe290deeb236b32eb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77dc0938f72adc4ef75f164fe290deeb236b32eb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=77dc0938f72adc4ef75f164fe290deeb236b32eb", "patch": "@@ -1,3 +1,31 @@\n+Tue May 19 10:05:02 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (parse.o): Depend on toplev.h.\n+\n+\t* class.c (typecode_p): Remove prototype and definition.\n+\n+\t* cp-tree.h (currently_open_class, is_empty_class, member_p):\n+\tAdd prototype.\n+\n+\t* decl.c (push_overloaded_decl_top_level): Remove prototype and\n+\tdefinition.\n+\n+\t* errfn.c (cp_error): Cast function pointer `error' to (errorfn *)\n+ \tin call to `cp_thing'.\n+\t(cp_warning): Likewise for function pointer `warning'.\n+\n+\t* except.c (do_function_call): Remove prototype and definition.\n+\t(call_eh_info): Wrap variable `t1' in macro NEW_EH_MODEL.\n+\n+\t* method.c (is_java_type): Add prototype and make it static.\n+\n+\t* parse.y: Include toplev.h.\n+\n+\t* pt.c (type_unification): Remove unused variable `arg'.\n+\t(instantiate_decl): likewise for `save_ti'.\n+\n+\t* tree.c (propagate_binfo_offsets): Likewise for `base_binfos'.\n+\t\n Tue May 19 02:43:25 1998  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* init.c (build_member_call): Handle template_ids."}, {"sha": "85bb833d4e12bf29b7b16b7fe04434b90dc8add6", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77dc0938f72adc4ef75f164fe290deeb236b32eb/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77dc0938f72adc4ef75f164fe290deeb236b32eb/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=77dc0938f72adc4ef75f164fe290deeb236b32eb", "patch": "@@ -208,7 +208,8 @@ PARSE_H = $(srcdir)/parse.h\n PARSE_C = $(srcdir)/parse.c\n \n parse.o : $(PARSE_C) $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h lex.h \\\n-\t$(srcdir)/../except.h $(srcdir)/../output.h $(srcdir)/../system.h\n+\t$(srcdir)/../except.h $(srcdir)/../output.h $(srcdir)/../system.h \\\n+\t$(srcdir)/../toplev.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(BIG_SWITCHFLAG) \\\n   `echo $(PARSE_C) | sed 's,^\\./,,'`\n "}, {"sha": "e7a9251d332be96540ca643ff78aa1ad2bdd872f", "filename": "gcc/cp/class.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77dc0938f72adc4ef75f164fe290deeb236b32eb/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77dc0938f72adc4ef75f164fe290deeb236b32eb/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=77dc0938f72adc4ef75f164fe290deeb236b32eb", "patch": "@@ -90,7 +90,6 @@ static tree get_vfield_name PROTO((tree));\n static void finish_struct_anon PROTO((tree));\n static tree build_vbase_pointer PROTO((tree, tree));\n static int complete_type_p PROTO((tree));\n-static int typecode_p PROTO((tree, enum tree_code));\n static tree build_vtable_entry PROTO((tree, tree));\n static tree get_vtable_name PROTO((tree));\n static tree get_derived_offset PROTO((tree, tree));\n@@ -1728,16 +1727,6 @@ finish_base_struct (t, b)\n \n   return first_vfn_base_index;\n }\n-\n-static int\n-typecode_p (type, code)\n-     tree type;\n-     enum tree_code code;\n-{\n-  return (TREE_CODE (type) == code\n-\t  || (TREE_CODE (type) == REFERENCE_TYPE\n-\t      && TREE_CODE (TREE_TYPE (type)) == code));\n-}\n \f\n /* Set memoizing fields and bits of T (and its variants) for later use.\n    MAX_HAS_VIRTUAL is the largest size of any T's virtual function tables.  */"}, {"sha": "a42ac73b1c3dde2882f9b3e6aebec46b6702039a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77dc0938f72adc4ef75f164fe290deeb236b32eb/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77dc0938f72adc4ef75f164fe290deeb236b32eb/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=77dc0938f72adc4ef75f164fe290deeb236b32eb", "patch": "@@ -2141,13 +2141,15 @@ extern tree build_vbase_path\t\t\tPROTO((enum tree_code, tree, tree, tree, int));\n extern tree build_vtbl_ref\t\t\tPROTO((tree, tree));\n extern tree build_vfn_ref\t\t\tPROTO((tree *, tree, tree));\n extern void add_method\t\t\t\tPROTO((tree, tree *, tree));\n+extern int currently_open_class\t\t\tPROTO((tree));\n extern tree get_vfield_offset\t\t\tPROTO((tree));\n extern void duplicate_tag_error\t\t\tPROTO((tree));\n extern tree finish_struct\t\t\tPROTO((tree, tree, tree, int));\n extern tree finish_struct_1\t\t\tPROTO((tree, int));\n extern tree finish_struct_methods\t\tPROTO((tree, tree, int));\n extern int resolves_to_fixed_type_p\t\tPROTO((tree, int *));\n extern void init_class_processing\t\tPROTO((void));\n+extern int is_empty_class\t\t\tPROTO((tree));\n extern void pushclass\t\t\t\tPROTO((tree, int));\n extern void popclass\t\t\t\tPROTO((int));\n extern void push_nested_class\t\t\tPROTO((tree, int));\n@@ -2684,6 +2686,7 @@ extern int yylex\t\t\t\tPROTO((void));\n extern tree arbitrate_lookup\t\t\tPROTO((tree, tree, tree));\n \n /* in tree.c */\n+extern int member_p\t\t\t\tPROTO((tree));\n extern int real_lvalue_p\t\t\tPROTO((tree));\n extern tree build_min\t\t\t\tPVPROTO((enum tree_code, tree, ...));\n extern tree build_min_nt\t\t\tPVPROTO((enum tree_code, ...));"}, {"sha": "d5816f43bac287af64ff6070f1c8c58b0fb4faf1", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77dc0938f72adc4ef75f164fe290deeb236b32eb/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77dc0938f72adc4ef75f164fe290deeb236b32eb/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=77dc0938f72adc4ef75f164fe290deeb236b32eb", "patch": "@@ -132,7 +132,6 @@ static tree grokparms\t\t\t\tPROTO((tree, int));\n static tree lookup_nested_type\t\t\tPROTO((tree, tree));\n static char *redeclaration_error_message\tPROTO((tree, tree));\n static tree push_overloaded_decl\t\tPROTO((tree, int));\n-static void push_overloaded_decl_top_level\tPROTO((tree, int));\n \n static struct stack_level *push_decl_level PROTO((struct stack_level *,\n \t\t\t\t\t\t  struct obstack *));\n@@ -3677,21 +3676,6 @@ pushdecl_top_level (x)\n   return x;\n }\n \n-/* Like push_overloaded_decl, only it places X in GLOBAL_BINDING_LEVEL,\n-   if appropriate.  */\n-\n-static void\n-push_overloaded_decl_top_level (x, forget)\n-     tree x;\n-     int forget;\n-{\n-  struct binding_level *b = current_binding_level;\n-\n-  current_binding_level = global_binding_level;\n-  push_overloaded_decl (x, forget);\n-  current_binding_level = b;\n-}\n-\n /* Make the declaration of X appear in CLASS scope.  */\n \n tree"}, {"sha": "60a024f285c0e04a5e597d4482034e82db1adbda", "filename": "gcc/cp/errfn.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77dc0938f72adc4ef75f164fe290deeb236b32eb/gcc%2Fcp%2Ferrfn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77dc0938f72adc4ef75f164fe290deeb236b32eb/gcc%2Fcp%2Ferrfn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferrfn.c?ref=77dc0938f72adc4ef75f164fe290deeb236b32eb", "patch": "@@ -200,7 +200,7 @@ DECLARE (cp_error)\n   va_list ap;\n   INIT;\n   if (! cp_silent)\n-    cp_thing (error, 0, format, ap);\n+    cp_thing ((errorfn *) error, 0, format, ap);\n   va_end (ap);\n }\n \n@@ -209,7 +209,7 @@ DECLARE (cp_warning)\n   va_list ap;\n   INIT;\n   if (! cp_silent)\n-    cp_thing (warning, 0, format, ap);\n+    cp_thing ((errorfn *) warning, 0, format, ap);\n   va_end (ap);\n }\n "}, {"sha": "89dee7ee19c9cab32abe611875fcb3c78fd2d6b3", "filename": "gcc/cp/except.c", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77dc0938f72adc4ef75f164fe290deeb236b32eb/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77dc0938f72adc4ef75f164fe290deeb236b32eb/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=77dc0938f72adc4ef75f164fe290deeb236b32eb", "patch": "@@ -45,7 +45,6 @@ tree builtin_return_address_fndecl;\n /* A couple of backend routines from m88k.c */\n \n static void push_eh_cleanup PROTO((void));\n-static rtx do_function_call PROTO((tree, tree, tree));\n static tree build_eh_type_type PROTO((tree));\n static tree build_eh_type PROTO((tree));\n static void expand_end_eh_spec PROTO((tree));\n@@ -182,22 +181,6 @@ extern tree const_ptr_type_node;\n \n /* ========================================================================= */\n \n-/* Cheesyness to save some typing.  Returns the return value rtx.  */\n-\n-static rtx\n-do_function_call (func, params, return_type)\n-     tree func, params, return_type;\n-{\n-  tree func_call;\n-  func_call = build_function_call (func, params);\n-  expand_call (func_call, NULL_RTX, 0);\n-  if (return_type != NULL_TREE)\n-    return hard_function_value (return_type, func_call);\n-  return NULL_RTX;\n-}\n-\n-/* ========================================================================= */\n-\n /* sets up all the global eh stuff that needs to be initialized at the\n    start of compilation.\n \n@@ -267,7 +250,10 @@ call_eh_info ()\n     fn = IDENTIFIER_GLOBAL_VALUE (fn);\n   else\n     {\n-      tree t1,t, fields[7];\n+#ifdef NEW_EH_MODEL\n+      tree t1;\n+#endif\n+      tree t, fields[7];\n       int fo = 0;\n \n       /* Declare cp_eh_info * __cp_exception_info (void),"}, {"sha": "5cf4133166d6dd4a5583499e234f1deabcc99182", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77dc0938f72adc4ef75f164fe290deeb236b32eb/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77dc0938f72adc4ef75f164fe290deeb236b32eb/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=77dc0938f72adc4ef75f164fe290deeb236b32eb", "patch": "@@ -83,6 +83,7 @@ static int issue_ktype PROTO((tree));\n static void build_overload_scope_ref PROTO((tree));\n static void build_mangled_template_parm_index PROTO((char *, tree));\n static int check_btype PROTO((tree));\n+static int is_java_type PROTO((tree));\n \n # define OB_INIT() (scratch_firstobj ? (obstack_free (&scratch_obstack, scratch_firstobj), 0) : 0)\n # define OB_PUTC(C) (obstack_1grow (&scratch_obstack, (C)))\n@@ -1117,7 +1118,7 @@ process_modifiers (parmtype)\n \n /* True iff TYPE was declared as a \"Java\" type (inside extern \"Java\"). */\n \n-int\n+static int\n is_java_type (type)\n      tree type;\n {"}, {"sha": "276dbb7916033d7a0810ca315bb2c2ce2abf667d", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77dc0938f72adc4ef75f164fe290deeb236b32eb/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77dc0938f72adc4ef75f164fe290deeb236b32eb/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=77dc0938f72adc4ef75f164fe290deeb236b32eb", "patch": "@@ -107,6 +107,7 @@\n #include \"cp-tree.h\"\n #include \"output.h\"\n #include \"except.h\"\n+#include \"toplev.h\"\n \n /* Since parsers are distinct for each language, put the language string\n    definition here.  (fnf) */"}, {"sha": "70af50b770437fc5c41c99504092e62edfa594f2", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77dc0938f72adc4ef75f164fe290deeb236b32eb/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77dc0938f72adc4ef75f164fe290deeb236b32eb/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=77dc0938f72adc4ef75f164fe290deeb236b32eb", "patch": "@@ -41,6 +41,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"cp-tree.h\"\n #include \"output.h\"\n #include \"except.h\"\n+#include \"toplev.h\"\n \n /* Since parsers are distinct for each language, put the language string\n    definition here.  (fnf) */"}, {"sha": "43ab3d294bfb091e8ecda2560de701816d32f83d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77dc0938f72adc4ef75f164fe290deeb236b32eb/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77dc0938f72adc4ef75f164fe290deeb236b32eb/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=77dc0938f72adc4ef75f164fe290deeb236b32eb", "patch": "@@ -5671,7 +5671,6 @@ type_unification (tparms, targs, parms, args, targs_in,\n      unification_kind_t strict;\n      int allow_incomplete;\n {\n-  tree arg;\n   int* explicit_mask;\n   int i;\n \n@@ -6965,7 +6964,6 @@ instantiate_decl (d)\n   tree args = TI_ARGS (ti);\n   tree td;\n   tree decl_pattern, code_pattern;\n-  tree save_ti;\n   int nested = in_function_p ();\n   int d_defined;\n   int pattern_defined;"}, {"sha": "f2dd941fbb9d7d06d8dc952f54eb7d75d4f7cbd4", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77dc0938f72adc4ef75f164fe290deeb236b32eb/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77dc0938f72adc4ef75f164fe290deeb236b32eb/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=77dc0938f72adc4ef75f164fe290deeb236b32eb", "patch": "@@ -570,7 +570,6 @@ propagate_binfo_offsets (binfo, offset)\n       else\n \t{\n \t  int j;\n-\t  tree base_binfos = BINFO_BASETYPES (base_binfo);\n \t  tree delta = NULL_TREE;\n \n \t  for (j = i+1; j < n_baselinks; j++)"}]}