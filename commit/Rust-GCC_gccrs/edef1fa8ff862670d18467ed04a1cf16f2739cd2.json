{"sha": "edef1fa8ff862670d18467ed04a1cf16f2739cd2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRlZjFmYThmZjg2MjY3MGQxODQ2N2VkMDRhMWNmMTZmMjczOWNkMg==", "commit": {"author": {"name": "Christian Bruel", "email": "christian.bruel@st.com", "date": "2016-01-15T08:46:49Z"}, "committer": {"name": "Christian Bruel", "email": "chrbr@gcc.gnu.org", "date": "2016-01-15T08:46:49Z"}, "message": "re PR target/65837 ([arm-linux-gnueabihf] lto1 target specific builtin not available)\n\ngcc\n2015-01-16  Christian Bruel  <christian.bruel@st.com>\n\n\tPR target/65837\n\t* config/arm/arm-builtins.c (ARM_BUILTIN_CRYPTO_BASE): New enum tag.\n\t(arm_init_neon_builtins_internal): Rename arm_init_neon_builtins,\n\t(arm_init_crypto_builtins_internal): Rename arm_init_crypto_builtins.\n\tuse add_builtin_function_ext_scope instead of add_builtin_function.\n\t(neon_set_p, neon_crypto_set_p): Remove.\n\t(arm_init_builtins): Always call arm_init_neon_builtins and\n\tarm_init_crypto_builtins.\n\t(arm_expand_builtin): Check that builtins are allowed for the arch.\n\t* config/arm/arm-protos.h (arm_init_neon_builtins): Remove prototype.\n\t* config/arm/arm.c (arm_valid_target_attribute_tree): Remove\n\tarm_init_neon_builtins call.\n\ngcc/testsuite\n2015-01-16  Christian Bruel  <christian.bruel@st.com>\n\n\tPR target/65837\n\t* gcc.target/arm/attr-neon-builtin-fail2.c: New test.\n\t* gcc.target/arm/lto/pr65837-attr_0.c: New test.\n\t* gcc.target/arm/lto/pr65837_0.c: Fix skip condition and use ACLE name.\n\nFrom-SVN: r232403", "tree": {"sha": "b02d35fccccc54ca40a32d294c093f9e9face700", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b02d35fccccc54ca40a32d294c093f9e9face700"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edef1fa8ff862670d18467ed04a1cf16f2739cd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edef1fa8ff862670d18467ed04a1cf16f2739cd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edef1fa8ff862670d18467ed04a1cf16f2739cd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edef1fa8ff862670d18467ed04a1cf16f2739cd2/comments", "author": null, "committer": null, "parents": [{"sha": "bdc27e509cbf4546f66a0581ce74d636e5fa888c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdc27e509cbf4546f66a0581ce74d636e5fa888c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdc27e509cbf4546f66a0581ce74d636e5fa888c"}], "stats": {"total": 119, "additions": 90, "deletions": 29}, "files": [{"sha": "611801b583c91a26eaa4d1b53c945c0f9dd67f58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edef1fa8ff862670d18467ed04a1cf16f2739cd2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edef1fa8ff862670d18467ed04a1cf16f2739cd2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=edef1fa8ff862670d18467ed04a1cf16f2739cd2", "patch": "@@ -1,3 +1,18 @@\n+2015-01-16  Christian Bruel  <christian.bruel@st.com>\n+\n+\tPR target/65837\n+\t* config/arm/arm-builtins.c (ARM_BUILTIN_CRYPTO_BASE): New enum tag.\n+\t(arm_init_neon_builtins_internal): Rename arm_init_neon_builtins,\n+\t(arm_init_crypto_builtins_internal): Rename arm_init_crypto_builtins.\n+\tuse add_builtin_function_ext_scope instead of add_builtin_function.\n+\t(neon_set_p, neon_crypto_set_p): Remove.\n+\t(arm_init_builtins): Always call arm_init_neon_builtins and\n+\tarm_init_crypto_builtins.\n+\t(arm_expand_builtin): Check that builtins are allowed for the arch.\n+\t* config/arm/arm-protos.h (arm_init_neon_builtins): Remove prototype.\n+\t* config/arm/arm.c (arm_valid_target_attribute_tree): Remove\n+\tarm_init_neon_builtins call.\n+\n 2016-01-15  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/69117\n@@ -142,7 +157,7 @@\n \t* ipa-polymorphic-call.c (inlined_polymorphic_ctor_dtor_block_p):\n \tuse block_ultimate_origin\n \t(noncall-stmt_may_be_vtbl_ptr_store): Likewise.\n-\t\n+\n 2016-01-13  Sandra Loosemore <sandra@codesourcery.com>\n \n \t* doc/invoke.texi (Submodel Options): Rename section to"}, {"sha": "db6b29d310d57d7a7cb4b8f592e2f7e138606250", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 34, "deletions": 23, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edef1fa8ff862670d18467ed04a1cf16f2739cd2/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edef1fa8ff862670d18467ed04a1cf16f2739cd2/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=edef1fa8ff862670d18467ed04a1cf16f2739cd2", "patch": "@@ -526,6 +526,8 @@ enum arm_builtins\n #define CRYPTO3(L, U, M1, M2, M3, M4) \\\n   ARM_BUILTIN_CRYPTO_##U,\n \n+  ARM_BUILTIN_CRYPTO_BASE,\n+\n #include \"crypto.def\"\n \n #undef CRYPTO1\n@@ -893,8 +895,13 @@ arm_init_simd_builtin_scalar_types (void)\n \t\t\t\t\t     \"__builtin_neon_uti\");\n }\n \n+/* Set up all the NEON builtins, even builtins for instructions that are not\n+   in the current target ISA to allow the user to compile particular modules\n+   with different target specific options that differ from the command line\n+   options. Such builtins will be rejected in arm_expand_builtin.  */\n+\n static void\n-arm_init_neon_builtins_internal (void)\n+arm_init_neon_builtins (void)\n {\n   unsigned int i, fcode = ARM_BUILTIN_NEON_PATTERN_START;\n \n@@ -1018,7 +1025,7 @@ arm_init_neon_builtins_internal (void)\n }\n \n static void\n-arm_init_crypto_builtins_internal (void)\n+arm_init_crypto_builtins (void)\n {\n   tree V16UQI_type_node\n     = arm_simd_builtin_type (V16QImode, true, false);\n@@ -1098,25 +1105,6 @@ arm_init_crypto_builtins_internal (void)\n   #undef FT3\n }\n \n-static bool neon_set_p = false;\n-static bool neon_crypto_set_p = false;\n-\n-void\n-arm_init_neon_builtins (void)\n-{\n-  if (! neon_set_p)\n-    {\n-      neon_set_p = true;\n-      arm_init_neon_builtins_internal ();\n-    }\n-\n-  if (! neon_crypto_set_p && TARGET_CRYPTO && TARGET_HARD_FLOAT)\n-    {\n-      neon_crypto_set_p = true;\n-      arm_init_crypto_builtins_internal ();\n-    }\n-}\n-\n #undef NUM_DREG_TYPES\n #undef NUM_QREG_TYPES\n \n@@ -1777,8 +1765,12 @@ arm_init_builtins (void)\n      arm_init_neon_builtins which uses it.  */\n   arm_init_fp16_builtins ();\n \n-  if (TARGET_NEON)\n-    arm_init_neon_builtins ();\n+  if (TARGET_HARD_FLOAT)\n+    {\n+      arm_init_neon_builtins ();\n+\n+      arm_init_crypto_builtins ();\n+    }\n \n   if (TARGET_CRC32)\n     arm_init_crc32_builtins ();\n@@ -2226,6 +2218,15 @@ arm_expand_neon_args (rtx target, machine_mode map_mode, int fcode,\n static rtx\n arm_expand_neon_builtin (int fcode, tree exp, rtx target)\n {\n+  /* Check in the context of the function making the call whether the\n+     builtin is supported.  */\n+  if (! TARGET_NEON)\n+    {\n+      fatal_error (input_location,\n+\t\t   \"You must enable NEON instructions (e.g. -mfloat-abi=softfp -mfpu=neon) to use these intrinsics.\");\n+      return const0_rtx;\n+    }\n+\n   if (fcode == ARM_BUILTIN_NEON_LANE_CHECK)\n     {\n       /* Builtin is only to check bounds of the lane passed to some intrinsics\n@@ -2336,6 +2337,16 @@ arm_expand_builtin (tree exp,\n   if (fcode >= ARM_BUILTIN_NEON_BASE)\n     return arm_expand_neon_builtin (fcode, exp, target);\n \n+  /* Check in the context of the function making the call whether the\n+     builtin is supported.  */\n+  if (fcode >= ARM_BUILTIN_CRYPTO_BASE\n+      && (!TARGET_CRYPTO || !TARGET_HARD_FLOAT))\n+    {\n+      fatal_error (input_location,\n+\t\t   \"You must enable crypto intrinsics (e.g. include -mfloat-abi=softfp -mfpu=crypto-neon...) to use these intrinsics.\");\n+      return const0_rtx;\n+    }\n+\n   switch (fcode)\n     {\n     case ARM_BUILTIN_GET_FPSCR:"}, {"sha": "28f226324a0e010dade7c0c6b97e2406f96ca448", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edef1fa8ff862670d18467ed04a1cf16f2739cd2/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edef1fa8ff862670d18467ed04a1cf16f2739cd2/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=edef1fa8ff862670d18467ed04a1cf16f2739cd2", "patch": "@@ -213,7 +213,6 @@ extern void arm_mark_dllimport (tree);\n extern bool arm_change_mode_p (tree);\n #endif\n \n-extern void arm_init_neon_builtins (void);\n extern tree arm_valid_target_attribute_tree (tree, struct gcc_options *,\n \t\t\t\t\t     struct gcc_options *);\n extern void arm_pr_long_calls (struct cpp_reader *);"}, {"sha": "1bbaa4a2b0207b8031ee7472b5bd33ef7737eb84", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edef1fa8ff862670d18467ed04a1cf16f2739cd2/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edef1fa8ff862670d18467ed04a1cf16f2739cd2/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=edef1fa8ff862670d18467ed04a1cf16f2739cd2", "patch": "@@ -29937,9 +29937,6 @@ arm_valid_target_attribute_tree (tree args, struct gcc_options *opts,\n   /* Do any overrides, such as global options arch=xxx.  */\n   arm_option_override_internal (opts, opts_set);\n \n-  if (TARGET_NEON)\n-    arm_init_neon_builtins ();\n-\n   return build_target_option_node (opts);\n }\n "}, {"sha": "8d21e6a09a69fc78b2e7f1fd1654f47184413f54", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edef1fa8ff862670d18467ed04a1cf16f2739cd2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edef1fa8ff862670d18467ed04a1cf16f2739cd2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=edef1fa8ff862670d18467ed04a1cf16f2739cd2", "patch": "@@ -1,3 +1,10 @@\n+2015-01-16  Christian Bruel  <christian.bruel@st.com>\n+\n+\tPR target/65837\n+\t* gcc.target/arm/attr-neon-builtin-fail2.c: New test.\n+\t* gcc.target/arm/lto/pr65837-attr_0.c: New test.\n+\t* gcc.target/arm/lto/pr65837_0.c: Fix skip condition and use ACLE name.\n+\n 2016-01-15  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/69117"}, {"sha": "0f8ac1b723c286eb5987c6a1f134b621d63bb7e4", "filename": "gcc/testsuite/gcc.target/arm/attr-neon-builtin-fail2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edef1fa8ff862670d18467ed04a1cf16f2739cd2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-neon-builtin-fail2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edef1fa8ff862670d18467ed04a1cf16f2739cd2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-neon-builtin-fail2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-neon-builtin-fail2.c?ref=edef1fa8ff862670d18467ed04a1cf16f2739cd2", "patch": "@@ -0,0 +1,15 @@\n+/* Check that calling a neon builtin from a function compiled with vfp fails.  */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_vfp_ok } */\n+/* { dg-options \"-O2 -mfloat-abi=softfp\" } */\n+\n+extern __simd64_int8_t a, b;\n+\n+__attribute__ ((target (\"fpu=vfp\")))\n+void\n+foo (__simd128_int16_t *p)\n+{\n+  *p = (__simd128_int16_t)__builtin_neon_vaddlsv8qi (a, b); /* { dg-error \"You must enable NEON instructions .*\" } */\n+\n+}\n+"}, {"sha": "ebc5f447a08be401d3ae254d295a57ba8a7d3be2", "filename": "gcc/testsuite/gcc.target/arm/lto/pr65837-attr_0.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edef1fa8ff862670d18467ed04a1cf16f2739cd2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flto%2Fpr65837-attr_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edef1fa8ff862670d18467ed04a1cf16f2739cd2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flto%2Fpr65837-attr_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flto%2Fpr65837-attr_0.c?ref=edef1fa8ff862670d18467ed04a1cf16f2739cd2", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-lto-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-lto-options {{-flto}} } */\n+\n+#include \"arm_neon.h\"\n+\n+#pragma GCC target (\"fpu=neon\")\n+\n+float32x2_t a, b, c, e;\n+\n+int main()\n+{\n+  e = vmls_lane_f32 (a, b, c, 0);\n+  return 0;\n+}\n+"}, {"sha": "6b2def9985d63a449f86a3be940c41375b93a7f8", "filename": "gcc/testsuite/gcc.target/arm/lto/pr65837_0.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edef1fa8ff862670d18467ed04a1cf16f2739cd2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flto%2Fpr65837_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edef1fa8ff862670d18467ed04a1cf16f2739cd2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flto%2Fpr65837_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flto%2Fpr65837_0.c?ref=edef1fa8ff862670d18467ed04a1cf16f2739cd2", "patch": "@@ -1,4 +1,5 @@\n /* { dg-lto-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n /* { dg-lto-options {{-flto -mfpu=neon}} } */\n /* { dg-suppress-ld-options {-mfpu=neon} } */\n \n@@ -8,7 +9,7 @@ float32x2_t a, b, c, e;\n \n int main()\n {\n-  e = __builtin_neon_vmls_lanev2sf (a, b, c, 0);\n+  e = vmls_lane_f32 (a, b, c, 0);\n   return 0;\n }\n "}]}