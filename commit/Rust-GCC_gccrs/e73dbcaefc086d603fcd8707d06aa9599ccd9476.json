{"sha": "e73dbcaefc086d603fcd8707d06aa9599ccd9476", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTczZGJjYWVmYzA4NmQ2MDNmY2Q4NzA3ZDA2YWE5NTk5Y2NkOTQ3Ng==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-10-28T18:03:21Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-10-28T18:03:21Z"}, "message": "re PR middle-end/26899 (Fold does not fold (i0 > i1 + 1) || (i1 < i0 - 1))\n\n2006-10-28  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/26899\n\t* fold-const.c (maybe_canonicalize_comparison_1): Helper\n\tfor maybe_canonicalize_comparison.\n\t(maybe_canonicalize_comparison): New function for canonicalizing\n\tcomparison trees.\n\t(fold_comparison): Call it to canonicalize comparisons with\n\tconstants involved.\n\n\t* gcc.dg/tree-ssa/pr26899.c: New testcase.\n\nFrom-SVN: r118106", "tree": {"sha": "cc83b84ce7c4da661546d58027790862ce4092db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc83b84ce7c4da661546d58027790862ce4092db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e73dbcaefc086d603fcd8707d06aa9599ccd9476", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e73dbcaefc086d603fcd8707d06aa9599ccd9476", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e73dbcaefc086d603fcd8707d06aa9599ccd9476", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e73dbcaefc086d603fcd8707d06aa9599ccd9476/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4d81bf84358f0f905b606a5cb27777e614d213e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d81bf84358f0f905b606a5cb27777e614d213e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d81bf84358f0f905b606a5cb27777e614d213e1"}], "stats": {"total": 149, "additions": 149, "deletions": 0}, "files": [{"sha": "fe590bf2ac28fb7f1d8cf64968999d9ed473c400", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73dbcaefc086d603fcd8707d06aa9599ccd9476/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73dbcaefc086d603fcd8707d06aa9599ccd9476/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e73dbcaefc086d603fcd8707d06aa9599ccd9476", "patch": "@@ -1,3 +1,13 @@\n+2006-10-28  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/26899\n+\t* fold-const.c (maybe_canonicalize_comparison_1): Helper\n+\tfor maybe_canonicalize_comparison.\n+\t(maybe_canonicalize_comparison): New function for canonicalizing\n+\tcomparison trees.\n+\t(fold_comparison): Call it to canonicalize comparisons with\n+\tconstants involved.\n+\n 2006-10-28  Richard Guenther  <rguenther@suse.de>\n \n \tPR target/28806"}, {"sha": "32e64c99e1f4ec57d2c662201db374dc1a1e2b36", "filename": "gcc/fold-const.c", "status": "modified", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73dbcaefc086d603fcd8707d06aa9599ccd9476/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73dbcaefc086d603fcd8707d06aa9599ccd9476/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e73dbcaefc086d603fcd8707d06aa9599ccd9476", "patch": "@@ -7749,6 +7749,126 @@ fold_minmax (enum tree_code code, tree type, tree op0, tree op1)\n   return NULL_TREE;\n }\n \n+/* Helper that tries to canonicalize the comparison ARG0 CODE ARG1\n+   by changing CODE to reduce the magnitude of constants involved in\n+   ARG0 of the comparison.\n+   Returns a canonicalized comparison tree if a simplification was\n+   possible, otherwise returns NULL_TREE.  */\n+\n+static tree\n+maybe_canonicalize_comparison_1 (enum tree_code code, tree type,\n+\t\t\t\t tree arg0, tree arg1)\n+{\n+  enum tree_code code0 = TREE_CODE (arg0);\n+  tree t, cst0 = NULL_TREE;\n+  int sgn0;\n+  bool swap = false;\n+\n+  /* Match A +- CST code arg1 and CST code arg1.  */\n+  if (!(((code0 == MINUS_EXPR\n+          || code0 == PLUS_EXPR)\n+         && TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST)\n+\t|| code0 == INTEGER_CST))\n+    return NULL_TREE;\n+\n+  /* Identify the constant in arg0 and its sign.  */\n+  if (code0 == INTEGER_CST)\n+    cst0 = arg0;\n+  else\n+    cst0 = TREE_OPERAND (arg0, 1);\n+  sgn0 = tree_int_cst_sgn (cst0);\n+\n+  /* Overflowed constants and zero will cause problems.  */\n+  if (integer_zerop (cst0)\n+      || TREE_OVERFLOW (cst0))\n+    return NULL_TREE;\n+\n+  /* See if we can reduce the mangitude of the constant in\n+     arg0 by changing the comparison code.  */\n+  if (code0 == INTEGER_CST)\n+    {\n+      /* CST <= arg1  ->  CST-1 < arg1.  */\n+      if (code == LE_EXPR && sgn0 == 1)\n+\tcode = LT_EXPR;\n+      /* -CST < arg1  ->  -CST-1 <= arg1.  */\n+      else if (code == LT_EXPR && sgn0 == -1)\n+\tcode = LE_EXPR;\n+      /* CST > arg1  ->  CST-1 >= arg1.  */\n+      else if (code == GT_EXPR && sgn0 == 1)\n+\tcode = GE_EXPR;\n+      /* -CST >= arg1  ->  -CST-1 > arg1.  */\n+      else if (code == GE_EXPR && sgn0 == -1)\n+\tcode = GT_EXPR;\n+      else\n+        return NULL_TREE;\n+      /* arg1 code' CST' might be more canonical.  */\n+      swap = true;\n+    }\n+  else\n+    {\n+      /* A - CST < arg1  ->  A - CST-1 <= arg1.  */\n+      if (code == LT_EXPR\n+\t  && code0 == ((sgn0 == -1) ? PLUS_EXPR : MINUS_EXPR))\n+\tcode = LE_EXPR;\n+      /* A + CST > arg1  ->  A + CST-1 >= arg1.  */\n+      else if (code == GT_EXPR\n+\t       && code0 == ((sgn0 == -1) ? MINUS_EXPR : PLUS_EXPR))\n+\tcode = GE_EXPR;\n+      /* A + CST <= arg1  ->  A + CST-1 < arg1.  */\n+      else if (code == LE_EXPR\n+\t       && code0 == ((sgn0 == -1) ? MINUS_EXPR : PLUS_EXPR))\n+\tcode = LT_EXPR;\n+      /* A - CST >= arg1  ->  A - CST-1 > arg1.  */\n+      else if (code == GE_EXPR\n+\t       && code0 == ((sgn0 == -1) ? PLUS_EXPR : MINUS_EXPR))\n+\tcode = GT_EXPR;\n+      else\n+\treturn NULL_TREE;\n+    }\n+\n+  /* Now build the constant reduced in magnitude.  */\n+  t = int_const_binop (sgn0 == -1 ? PLUS_EXPR : MINUS_EXPR,\n+  \t\t       cst0, build_int_cst (TREE_TYPE (cst0), 1), 0);\n+  if (code0 != INTEGER_CST)\n+    t = fold_build2 (code0, TREE_TYPE (arg0), TREE_OPERAND (arg0, 0), t);\n+\n+  /* If swapping might yield to a more canonical form, do so.  */\n+  if (swap)\n+    return fold_build2 (swap_tree_comparison (code), type, arg1, t);\n+  else\n+    return fold_build2 (code, type, t, arg1);\n+}\n+\n+/* Canonicalize the comparison ARG0 CODE ARG1 with type TYPE with undefined\n+   overflow further.  Try to decrease the magnitude of constants involved\n+   by changing LE_EXPR and GE_EXPR to LT_EXPR and GT_EXPR or vice versa\n+   and put sole constants at the second argument position.\n+   Returns the canonicalized tree if changed, otherwise NULL_TREE.  */\n+\n+static tree\n+maybe_canonicalize_comparison (enum tree_code code, tree type,\n+\t\t\t       tree arg0, tree arg1)\n+{\n+  tree t;\n+\n+  /* In principle pointers also have undefined overflow behavior,\n+     but that causes problems elsewhere.  */\n+  if ((flag_wrapv || flag_trapv)\n+      || (TYPE_UNSIGNED (TREE_TYPE (arg0))\n+\t  && !POINTER_TYPE_P (TREE_TYPE (arg0))))\n+    return NULL_TREE;\n+\n+  /* Try canonicalization by simplifying arg0.  */\n+  t = maybe_canonicalize_comparison_1 (code, type, arg0, arg1);\n+  if (t)\n+    return t;\n+\n+  /* Try canonicalization by simplifying arg1 using the swapped\n+     comparsion.  */\n+  code = swap_tree_comparison (code);\n+  return maybe_canonicalize_comparison_1 (code, type, arg1, arg0);\n+}\n+\n /* Subroutine of fold_binary.  This routine performs all of the\n    transformations that are common to the equality/inequality\n    operators (EQ_EXPR and NE_EXPR) and the ordering operators\n@@ -7877,6 +7997,10 @@ fold_comparison (enum tree_code code, tree type, tree op0, tree op1)\n \t\t\t    variable2);\n     }\n \n+  tem = maybe_canonicalize_comparison (code, type, arg0, arg1);\n+  if (tem)\n+    return tem;\n+\n   if (FLOAT_TYPE_P (TREE_TYPE (arg0)))\n     {\n       tree targ0 = strip_float_extensions (arg0);"}, {"sha": "e2096ba55ae1c3cb7649ef8d3dda1394a7f34c7c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73dbcaefc086d603fcd8707d06aa9599ccd9476/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73dbcaefc086d603fcd8707d06aa9599ccd9476/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e73dbcaefc086d603fcd8707d06aa9599ccd9476", "patch": "@@ -1,3 +1,8 @@\n+2006-10-28  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/26899\n+\t* gcc.dg/tree-ssa/pr26899.c: New testcase.\n+\n 2006-10-28  Richard Guenther  <rguenther@suse.de>\n \n \tPR target/28806"}, {"sha": "5e19f56d94d32df533ca0b14a490808cff5f5abd", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr26899.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73dbcaefc086d603fcd8707d06aa9599ccd9476/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr26899.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73dbcaefc086d603fcd8707d06aa9599ccd9476/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr26899.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr26899.c?ref=e73dbcaefc086d603fcd8707d06aa9599ccd9476", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-options \"-fdump-tree-gimple\" } */\n+\n+int foo (int i, int j)\n+{\n+  return (i < j + 1) || (j > i - 1);\n+}\n+\n+/* { dg-final { scan-tree-dump \"j >= i\" \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */\n+"}]}