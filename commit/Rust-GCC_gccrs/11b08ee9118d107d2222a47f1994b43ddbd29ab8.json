{"sha": "11b08ee9118d107d2222a47f1994b43ddbd29ab8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFiMDhlZTkxMThkMTA3ZDIyMjJhNDdmMTk5NGI0M2RkYmQyOWFiOA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-08-18T08:42:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-08-18T08:42:57Z"}, "message": "passes.c (init_optimization_passes): Remove cleanup_cfg1, sdse1 and addressables2 passes.\n\n2008-08-18  Richard Guenther  <rguenther@suse.de>\n\n\t* passes.c (init_optimization_passes): Remove cleanup_cfg1,\n\tsdse1 and addressables2 passes.  Replace dce1 with cddce1.\n\tMove call_cdce before build_alias.  Move copyrename2,\n\tcunrolli and ccp2 beafore build_alias.  Re-add addressable2\n\tright after final inlining.\n\t* tree-cfg.c (build_gimple_cfg): Do not dump function here.\n\t(pass_build_cfg): But instead via TODO_dump_func.\n\n\t* gcc.dg/fold-alloca-1.c: Scan cfg dump instead of cleanup_cfg1.\n\t* gcc.dg/fold-compare-3.c: Likewise.\n\t* gcc.dg/tree-ssa/20030709-2.c: Scan cddce2 dump.\n\t* gcc.dg/tree-ssa/20030808-1.c: Likewise.\n\t* gcc.dg/tree-ssa/20040211-1.c: Likewise.\n\t* gcc.dg/tree-ssa/20040305-1.c: Likewise.\n\t* gcc.dg/tree-ssa/forwprop-1.c: Adjust pattern.\n\t* gcc.dg/tree-ssa/forwprop-2.c: Likewise..\n\t* gcc.dg/tree-ssa/ssa-dce-3.c: Scan cddce1 dump.\n\nFrom-SVN: r139189", "tree": {"sha": "90244459393ae5110783d90fa8c81ab974e5c8c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90244459393ae5110783d90fa8c81ab974e5c8c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11b08ee9118d107d2222a47f1994b43ddbd29ab8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11b08ee9118d107d2222a47f1994b43ddbd29ab8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11b08ee9118d107d2222a47f1994b43ddbd29ab8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11b08ee9118d107d2222a47f1994b43ddbd29ab8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "400196f17b3ba17b1a6be96f6ec3c5aa1fec71fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/400196f17b3ba17b1a6be96f6ec3c5aa1fec71fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/400196f17b3ba17b1a6be96f6ec3c5aa1fec71fc"}], "stats": {"total": 127, "additions": 72, "deletions": 55}, "files": [{"sha": "48f6ea4eb60bad6d68e14f8cb2fc758be607800b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b08ee9118d107d2222a47f1994b43ddbd29ab8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b08ee9118d107d2222a47f1994b43ddbd29ab8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11b08ee9118d107d2222a47f1994b43ddbd29ab8", "patch": "@@ -1,3 +1,13 @@\n+2008-08-18  Richard Guenther  <rguenther@suse.de>\n+\n+\t* passes.c (init_optimization_passes): Remove cleanup_cfg1,\n+\tsdse1 and addressables2 passes.  Replace dce1 with cddce1.\n+\tMove call_cdce before build_alias.  Move copyrename2,\n+\tcunrolli and ccp2 beafore build_alias.  Re-add addressable2\n+\tright after final inlining.\n+\t* tree-cfg.c (build_gimple_cfg): Do not dump function here.\n+\t(pass_build_cfg): But instead via TODO_dump_func.\n+\n 2008-08-18  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-sra.c (generate_element_init_1): Deal with NULL constructor"}, {"sha": "a9af10d1c927ec503ebccf255b93c323d1fef794", "filename": "gcc/passes.c", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b08ee9118d107d2222a47f1994b43ddbd29ab8/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b08ee9118d107d2222a47f1994b43ddbd29ab8/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=11b08ee9118d107d2222a47f1994b43ddbd29ab8", "patch": "@@ -550,25 +550,14 @@ init_optimization_passes (void)\n \t  struct opt_pass **p = &pass_all_early_optimizations.pass.sub;\n \t  NEXT_PASS (pass_rebuild_cgraph_edges);\n \t  NEXT_PASS (pass_early_inline);\n-\t  NEXT_PASS (pass_cleanup_cfg);\n \t  NEXT_PASS (pass_rename_ssa_copies);\n \t  NEXT_PASS (pass_ccp);\n \t  NEXT_PASS (pass_forwprop);\n \t  NEXT_PASS (pass_update_address_taken);\n-\t  NEXT_PASS (pass_simple_dse);\n \t  NEXT_PASS (pass_sra_early);\n \t  NEXT_PASS (pass_copy_prop);\n \t  NEXT_PASS (pass_merge_phi);\n-\t  NEXT_PASS (pass_dce);\n-          /* Ideally the function call conditional \n-             dead code elimination phase can be delayed\n-             till later where potentially more opportunities\n-             can be found.  Due to lack of good ways to\n-             update VDEFs associated with the shrink-wrapped\n-             calls, it is better to do the transformation\n-             here where memory SSA is not built yet.  */\n-\t  NEXT_PASS (pass_call_cdce);\n-\t  NEXT_PASS (pass_update_address_taken);\n+\t  NEXT_PASS (pass_cd_dce);\n \t  NEXT_PASS (pass_simple_dse);\n \t  NEXT_PASS (pass_tail_recursion);\n \t  NEXT_PASS (pass_convert_switch);\n@@ -594,14 +583,26 @@ init_optimization_passes (void)\n   NEXT_PASS (pass_all_optimizations);\n     {\n       struct opt_pass **p = &pass_all_optimizations.pass.sub;\n-      /* pass_build_alias is a dummy pass that ensures that we\n-\t execute TODO_rebuild_alias at this point.  */\n-      NEXT_PASS (pass_build_alias);\n-      NEXT_PASS (pass_return_slot);\n+      /* Initial scalar cleanups before alias computation.\n+\t They ensure memory accesses are not indirect wherever possible.  */\n+      NEXT_PASS (pass_update_address_taken);\n       NEXT_PASS (pass_rename_ssa_copies);\n-      /* Initial scalar cleanups.  */\n       NEXT_PASS (pass_complete_unrolli);\n       NEXT_PASS (pass_ccp);\n+      /* Ideally the function call conditional\n+\t dead code elimination phase can be delayed\n+\t till later where potentially more opportunities\n+\t can be found.  Due to lack of good ways to\n+\t update VDEFs associated with the shrink-wrapped\n+\t calls, it is better to do the transformation\n+\t here where memory SSA is not built yet.  */\n+      NEXT_PASS (pass_call_cdce);\n+      /* pass_build_alias is a dummy pass that ensures that we\n+\t execute TODO_rebuild_alias at this point.  Re-building\n+\t alias information also rewrites no longer addressed\n+\t locals into SSA form if possible.  */\n+      NEXT_PASS (pass_build_alias);\n+      NEXT_PASS (pass_return_slot);\n       NEXT_PASS (pass_phiprop);\n       NEXT_PASS (pass_fre);\n       NEXT_PASS (pass_dce);"}, {"sha": "bd294ade16578e0f3341010e7e2c48ddcbd3d901", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b08ee9118d107d2222a47f1994b43ddbd29ab8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b08ee9118d107d2222a47f1994b43ddbd29ab8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=11b08ee9118d107d2222a47f1994b43ddbd29ab8", "patch": "@@ -1,3 +1,15 @@\n+2008-08-18  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/fold-alloca-1.c: Scan cfg dump instead of cleanup_cfg1.\n+\t* gcc.dg/fold-compare-3.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030709-2.c: Scan cddce2 dump.\n+\t* gcc.dg/tree-ssa/20030808-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/20040211-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/20040305-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/forwprop-1.c: Adjust pattern.\n+\t* gcc.dg/tree-ssa/forwprop-2.c: Likewise..\n+\t* gcc.dg/tree-ssa/ssa-dce-3.c: Scan cddce1 dump.\n+\n 2008-08-16  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/36825"}, {"sha": "93f28cfa1ae020ba2e75387c6ec801cbc523723a", "filename": "gcc/testsuite/gcc.dg/fold-alloca-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b08ee9118d107d2222a47f1994b43ddbd29ab8/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-alloca-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b08ee9118d107d2222a47f1994b43ddbd29ab8/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-alloca-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-alloca-1.c?ref=11b08ee9118d107d2222a47f1994b43ddbd29ab8", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fdump-tree-cleanup_cfg1\" } */\n+/* { dg-options \"-fdump-tree-cfg\" } */\n \n void *alloca (__SIZE_TYPE__);\n void link_error ();\n@@ -10,5 +10,5 @@ int main (int argc, char *argv[]) {\n \t  link_error ();\n \treturn 0;\n }\n-/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"cleanup_cfg1\" } } */\n-/* { dg-final { cleanup-tree-dump \"cleanup_cfg1\" } } */\n+/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"cfg\" } } */\n+/* { dg-final { cleanup-tree-dump \"cfg\" } } */"}, {"sha": "d38a945aeec27e4248be540f4195040199f2a290", "filename": "gcc/testsuite/gcc.dg/fold-compare-3.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b08ee9118d107d2222a47f1994b43ddbd29ab8/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-compare-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b08ee9118d107d2222a47f1994b43ddbd29ab8/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-compare-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-compare-3.c?ref=11b08ee9118d107d2222a47f1994b43ddbd29ab8", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-cleanup_cfg1\" } */\n+/* { dg-options \"-O2 -fdump-tree-cfg\" } */\n \n #include <limits.h>\n \n@@ -151,9 +151,9 @@ void bla4ge (int var)\n     this_comparison_is_not_decidable ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"this_comparison_is_false\" 0 \"cleanup_cfg1\" } } */\n-/* { dg-final { scan-tree-dump-times \"this_comparison_is_true\" 6 \"cleanup_cfg1\" } } */\n-/* { dg-final { scan-tree-dump-times \"this_comparison_is_not_decidable\" 12 \"cleanup_cfg1\" } } */\n-/* { dg-final { scan-tree-dump-times \"if \" 12 \"cleanup_cfg1\" } } */\n+/* { dg-final { scan-tree-dump-times \"this_comparison_is_false\" 0 \"cfg\" } } */\n+/* { dg-final { scan-tree-dump-times \"this_comparison_is_true\" 6 \"cfg\" } } */\n+/* { dg-final { scan-tree-dump-times \"this_comparison_is_not_decidable\" 12 \"cfg\" } } */\n+/* { dg-final { scan-tree-dump-times \"if \" 12 \"cfg\" } } */\n \n-/* { dg-final { cleanup-tree-dump \"cleanup_cfg1\" } } */\n+/* { dg-final { cleanup-tree-dump \"cfg\" } } */"}, {"sha": "f99598d73cf7bd6822b6002d47e1d91734d0717c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030709-2.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b08ee9118d107d2222a47f1994b43ddbd29ab8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030709-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b08ee9118d107d2222a47f1994b43ddbd29ab8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030709-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030709-2.c?ref=11b08ee9118d107d2222a47f1994b43ddbd29ab8", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-cddce\" } */\n+/* { dg-options \"-O2 -fdump-tree-cddce2\" } */\n   \n struct rtx_def;\n typedef struct rtx_def *rtx;\n@@ -41,14 +41,14 @@ get_alias_set (t)\n \n /* There should be precisely one load of ->decl.rtl.  If there is\n    more than, then the dominator optimizations failed.  */\n-/* { dg-final { scan-tree-dump-times \"->decl\\\\.rtl\" 1 \"cddce\"} } */\n+/* { dg-final { scan-tree-dump-times \"->decl\\\\.rtl\" 1 \"cddce2\"} } */\n   \n /* There should be no loads of .rtmem since the complex return statement\n    is just \"return 0\".  */\n-/* { dg-final { scan-tree-dump-times \".rtmem\" 0 \"cddce\"} } */\n+/* { dg-final { scan-tree-dump-times \".rtmem\" 0 \"cddce2\"} } */\n   \n /* There should be one IF statement (the complex return statement should\n    collapse down to a simple return 0 without any conditionals).  */\n-/* { dg-final { scan-tree-dump-times \"if \" 1 \"cddce\"} } */\n+/* { dg-final { scan-tree-dump-times \"if \" 1 \"cddce2\"} } */\n \n-/* { dg-final { cleanup-tree-dump \"cddce\" } } */\n+/* { dg-final { cleanup-tree-dump \"cddce2\" } } */"}, {"sha": "27e2c7105f6a3fdba3a45f0c5585bfbc71d96d0d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030808-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b08ee9118d107d2222a47f1994b43ddbd29ab8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030808-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b08ee9118d107d2222a47f1994b43ddbd29ab8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030808-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030808-1.c?ref=11b08ee9118d107d2222a47f1994b43ddbd29ab8", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-cddce\" } */\n+/* { dg-options \"-O1 -fdump-tree-cddce2\" } */\n       \n extern void abort (void);\n \n@@ -33,9 +33,9 @@ delete_dead_jumptables ()\n /* There should be no loads of ->code.  If any exist, then we failed to\n    optimize away all the IF statements and the statements feeding\n    their conditions.  */\n-/* { dg-final { scan-tree-dump-times \"->code\" 0 \"cddce\"} } */\n+/* { dg-final { scan-tree-dump-times \"->code\" 0 \"cddce2\"} } */\n    \n /* There should be no IF statements.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 0 \"cddce\"} } */\n+/* { dg-final { scan-tree-dump-times \"if \" 0 \"cddce2\"} } */\n \n-/* { dg-final { cleanup-tree-dump \"cddce\" } } */\n+/* { dg-final { cleanup-tree-dump \"cddce2\" } } */"}, {"sha": "34a5926796ed05c5ab047a55bd35f216669fecec", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20040211-1.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b08ee9118d107d2222a47f1994b43ddbd29ab8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040211-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b08ee9118d107d2222a47f1994b43ddbd29ab8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040211-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040211-1.c?ref=11b08ee9118d107d2222a47f1994b43ddbd29ab8", "patch": "@@ -1,8 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-cddce\" } */\n-  \n-\n- \n+/* { dg-options \"-O2 -fdump-tree-cddce2\" } */\n \n struct rtx_def;\n typedef struct rtx_def *rtx;\n@@ -37,5 +34,5 @@ com (rtx insn, int blah)\n \n /* Cddce cannot remove possibly infinite loops and there is no way how to\n    determine whether the loop in can_move_up ends.  */\n-/* { dg-final { scan-tree-dump \"if \" \"cddce\"} } */\n-/* { dg-final { cleanup-tree-dump \"cddce\" } } */\n+/* { dg-final { scan-tree-dump \"if \" \"cddce2\"} } */\n+/* { dg-final { cleanup-tree-dump \"cddce2\" } } */"}, {"sha": "8e9f61da60a775be4bf8a33cac607f66f48d25d9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20040305-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b08ee9118d107d2222a47f1994b43ddbd29ab8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040305-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b08ee9118d107d2222a47f1994b43ddbd29ab8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040305-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040305-1.c?ref=11b08ee9118d107d2222a47f1994b43ddbd29ab8", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-cddce -fdump-tree-forwprop1-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-cddce2 -fdump-tree-forwprop1-details\" } */\n   \n int abarney[2];\n int afred[1];\n@@ -28,5 +28,5 @@ void foo(int edx, int eax)\n \n /* After cddce we should have two IF statements remaining as the other\n    two tests can be threaded.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 2 \"cddce\"} } */\n-/* { dg-final { cleanup-tree-dump \"cddce\" } } */\n+/* { dg-final { scan-tree-dump-times \"if \" 2 \"cddce2\"} } */\n+/* { dg-final { cleanup-tree-dump \"cddce2\" } } */"}, {"sha": "ee3cb0ebfe52320f4be1d157647e4e0689700e75", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b08ee9118d107d2222a47f1994b43ddbd29ab8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b08ee9118d107d2222a47f1994b43ddbd29ab8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-1.c?ref=11b08ee9118d107d2222a47f1994b43ddbd29ab8", "patch": "@@ -15,5 +15,5 @@ void f(struct a * b, __SIZE_TYPE__ i)\n   c[i] = 1;\n }\n \n-/* { dg-final { scan-tree-dump \"t\\\\\\[i.*\\\\\\] = 1;\" \"forwprop1\" } } */\n+/* { dg-final { scan-tree-dump-times \"t\\\\\\[i.*\\\\\\] =.* 1;\" 1 \"forwprop1\" } } */\n /* { dg-final { cleanup-tree-dump \"forwprop1\" } } */"}, {"sha": "fe04e66fa1a54b6655341d163edc98bea2815310", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b08ee9118d107d2222a47f1994b43ddbd29ab8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b08ee9118d107d2222a47f1994b43ddbd29ab8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-2.c?ref=11b08ee9118d107d2222a47f1994b43ddbd29ab8", "patch": "@@ -17,5 +17,5 @@ void f(__SIZE_TYPE__ i)\n   c[i] = 1;\n }\n \n-/* { dg-final { scan-tree-dump \"t\\\\\\[i.*\\\\\\] = 1;\" \"forwprop1\" } } */\n+/* { dg-final { scan-tree-dump-times \"t\\\\\\[i.*\\\\\\] =.* 1;\" 1 \"forwprop1\" } } */\n /* { dg-final { cleanup-tree-dump \"forwprop?\" } } */"}, {"sha": "f7645c353def3f265e337428fac0e53b787f54e9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dce-3.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b08ee9118d107d2222a47f1994b43ddbd29ab8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dce-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b08ee9118d107d2222a47f1994b43ddbd29ab8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dce-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dce-3.c?ref=11b08ee9118d107d2222a47f1994b43ddbd29ab8", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-cddce\" } */\n+/* { dg-options \"-O2 -fdump-tree-cddce1\" } */\n \n int main(void)\n {\n@@ -23,9 +23,9 @@ int main(void)\n \n /* We should eliminate the inner condition, but the loop must be preserved\n    as it is infinite.  Therefore there should be just one phi node (for i):  */\n-/* { dg-final { scan-tree-dump-times \"PHI \" 1 \"cddce\"} } */\n+/* { dg-final { scan-tree-dump-times \"PHI \" 1 \"cddce1\"} } */\n \n /* And one if (for the exit condition of the loop):  */\n-/* { dg-final { scan-tree-dump-times \"if \" 1 \"cddce\"} } */\n+/* { dg-final { scan-tree-dump-times \"if \" 1 \"cddce1\"} } */\n \n-/* { dg-final { cleanup-tree-dump \"cddce\" } } */\n+/* { dg-final { cleanup-tree-dump \"cddce1\" } } */"}, {"sha": "c1344a75ab30dc4b4876280cb406f93a011f5c33", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b08ee9118d107d2222a47f1994b43ddbd29ab8/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b08ee9118d107d2222a47f1994b43ddbd29ab8/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=11b08ee9118d107d2222a47f1994b43ddbd29ab8", "patch": "@@ -212,10 +212,6 @@ build_gimple_cfg (gimple_seq seq)\n #ifdef ENABLE_CHECKING\n   verify_stmts ();\n #endif\n-\n-  /* Dump a textual representation of the flowgraph.  */\n-  if (dump_file)\n-    gimple_dump_cfg (dump_file, dump_flags);\n }\n \n static unsigned int\n@@ -240,7 +236,8 @@ struct gimple_opt_pass pass_build_cfg =\n   PROP_cfg,\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_verify_stmts | TODO_cleanup_cfg\t/* todo_flags_finish */\n+  TODO_verify_stmts | TODO_cleanup_cfg\n+  | TODO_dump_func\t\t\t/* todo_flags_finish */\n  }\n };\n "}]}