{"sha": "818625cf9eb14c87e7ea46471321c38fda7cb6a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE4NjI1Y2Y5ZWIxNGM4N2U3ZWE0NjQ3MTMyMWMzOGZkYTdjYjZhNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-10-01T07:41:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-10-01T07:41:10Z"}, "message": "re PR tree-optimization/58553 (New fail in PASS->FAIL: gcc.c-torture/execute/memcpy-2.c execution on arm and aarch64)\n\n2013-10-01  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/58553\n\t* tree-loop-distribution.c (struct partition_s): Add niter member.\n\t(classify_partition): Populate niter member for the partition\n\tand properly identify whether the relevant store happens before\n\tor after the loop exit.\n\t(generate_memset_builtin): Use niter member from the partition.\n\t(generate_memcpy_builtin): Likewise.\n\n\t* gcc.dg/torture/pr58553.c: New testcase.\n\nFrom-SVN: r203054", "tree": {"sha": "4364870cc24e53f1deed7befaaf0e34bc35fad06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4364870cc24e53f1deed7befaaf0e34bc35fad06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/818625cf9eb14c87e7ea46471321c38fda7cb6a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/818625cf9eb14c87e7ea46471321c38fda7cb6a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/818625cf9eb14c87e7ea46471321c38fda7cb6a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/818625cf9eb14c87e7ea46471321c38fda7cb6a5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2cb01a397200b182e28f9d91dfde104e3a3895d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cb01a397200b182e28f9d91dfde104e3a3895d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cb01a397200b182e28f9d91dfde104e3a3895d1"}], "stats": {"total": 78, "additions": 62, "deletions": 16}, "files": [{"sha": "3a810c847c1b8a392dd061e1ed23aec642ae89a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818625cf9eb14c87e7ea46471321c38fda7cb6a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818625cf9eb14c87e7ea46471321c38fda7cb6a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=818625cf9eb14c87e7ea46471321c38fda7cb6a5", "patch": "@@ -1,3 +1,13 @@\n+2013-10-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/58553\n+\t* tree-loop-distribution.c (struct partition_s): Add niter member.\n+\t(classify_partition): Populate niter member for the partition\n+\tand properly identify whether the relevant store happens before\n+\tor after the loop exit.\n+\t(generate_memset_builtin): Use niter member from the partition.\n+\t(generate_memcpy_builtin): Likewise.\n+\n 2013-09-30  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* vec.h (vec_prefix, vec): Prefix member names with \"m_\"."}, {"sha": "37af098de5d25779792f182b9400ef9c8938a283", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818625cf9eb14c87e7ea46471321c38fda7cb6a5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818625cf9eb14c87e7ea46471321c38fda7cb6a5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=818625cf9eb14c87e7ea46471321c38fda7cb6a5", "patch": "@@ -1,3 +1,8 @@\n+2013-10-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/58553\n+\t* gcc.dg/torture/pr58553.c: New testcase.\n+\n 2013-09-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/58564"}, {"sha": "542bf3f10187d5841ebc0f6e280457fc236ba8a8", "filename": "gcc/testsuite/gcc.dg/torture/pr58553.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818625cf9eb14c87e7ea46471321c38fda7cb6a5/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58553.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818625cf9eb14c87e7ea46471321c38fda7cb6a5/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58553.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58553.c?ref=818625cf9eb14c87e7ea46471321c38fda7cb6a5", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+\n+#define MAX_LENGTH 96\n+#define SEQUENCE_LENGTH 31\n+\n+static struct {\n+  char buf[MAX_LENGTH + 1];\n+} u1, u2;\n+\n+extern void abort (void);\n+\n+int main ()\n+{\n+  int i;\n+  char c;\n+\n+  for (i = 0, c = 'A'; i < MAX_LENGTH; i++, c++)\n+    {\n+      u1.buf[i] = 'a';\n+      if (c >= 'A' + SEQUENCE_LENGTH)\n+\tc = 'A';\n+      u2.buf[i] = c;\n+    }\n+  if (u1.buf[MAX_LENGTH] != '\\0')\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "fe2f7b65b590b6214429665c33f080e82f97e08b", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818625cf9eb14c87e7ea46471321c38fda7cb6a5/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818625cf9eb14c87e7ea46471321c38fda7cb6a5/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=818625cf9eb14c87e7ea46471321c38fda7cb6a5", "patch": "@@ -569,6 +569,7 @@ typedef struct partition_s\n   /* data-references a kind != PKIND_NORMAL partition is about.  */\n   data_reference_p main_dr;\n   data_reference_p secondary_dr;\n+  tree niter;\n } *partition_t;\n \n \n@@ -848,21 +849,17 @@ generate_memset_builtin (struct loop *loop, partition_t partition)\n {\n   gimple_stmt_iterator gsi;\n   gimple stmt, fn_call;\n-  tree nb_iter, mem, fn, nb_bytes;\n+  tree mem, fn, nb_bytes;\n   location_t loc;\n   tree val;\n \n   stmt = DR_STMT (partition->main_dr);\n   loc = gimple_location (stmt);\n-  if (gimple_bb (stmt) == loop->latch)\n-    nb_iter = number_of_latch_executions (loop);\n-  else\n-    nb_iter = number_of_exit_cond_executions (loop);\n \n   /* The new statements will be placed before LOOP.  */\n   gsi = gsi_last_bb (loop_preheader_edge (loop)->src);\n \n-  nb_bytes = build_size_arg_loc (loc, partition->main_dr, nb_iter);\n+  nb_bytes = build_size_arg_loc (loc, partition->main_dr, partition->niter);\n   nb_bytes = force_gimple_operand_gsi (&gsi, nb_bytes, true, NULL_TREE,\n \t\t\t\t       false, GSI_CONTINUE_LINKING);\n   mem = build_addr_arg_loc (loc, partition->main_dr, nb_bytes);\n@@ -908,21 +905,17 @@ generate_memcpy_builtin (struct loop *loop, partition_t partition)\n {\n   gimple_stmt_iterator gsi;\n   gimple stmt, fn_call;\n-  tree nb_iter, dest, src, fn, nb_bytes;\n+  tree dest, src, fn, nb_bytes;\n   location_t loc;\n   enum built_in_function kind;\n \n   stmt = DR_STMT (partition->main_dr);\n   loc = gimple_location (stmt);\n-  if (gimple_bb (stmt) == loop->latch)\n-    nb_iter = number_of_latch_executions (loop);\n-  else\n-    nb_iter = number_of_exit_cond_executions (loop);\n \n   /* The new statements will be placed before LOOP.  */\n   gsi = gsi_last_bb (loop_preheader_edge (loop)->src);\n \n-  nb_bytes = build_size_arg_loc (loc, partition->main_dr, nb_iter);\n+  nb_bytes = build_size_arg_loc (loc, partition->main_dr, partition->niter);\n   nb_bytes = force_gimple_operand_gsi (&gsi, nb_bytes, true, NULL_TREE,\n \t\t\t\t       false, GSI_CONTINUE_LINKING);\n   dest = build_addr_arg_loc (loc, partition->main_dr, nb_bytes);\n@@ -1125,6 +1118,7 @@ classify_partition (loop_p loop, struct graph *rdg, partition_t partition)\n   partition->kind = PKIND_NORMAL;\n   partition->main_dr = NULL;\n   partition->secondary_dr = NULL;\n+  partition->niter = NULL_TREE;\n \n   EXECUTE_IF_SET_IN_BITMAP (partition->stmts, 0, i, bi)\n     {\n@@ -1151,10 +1145,6 @@ classify_partition (loop_p loop, struct graph *rdg, partition_t partition)\n       || !flag_tree_loop_distribute_patterns)\n     return;\n \n-  nb_iter = number_of_exit_cond_executions (loop);\n-  if (!nb_iter || nb_iter == chrec_dont_know)\n-    return;\n-\n   /* Detect memset and memcpy.  */\n   single_load = NULL;\n   single_store = NULL;\n@@ -1193,6 +1183,17 @@ classify_partition (loop_p loop, struct graph *rdg, partition_t partition)\n \t}\n     }\n \n+  if (!single_store)\n+    return;\n+\n+  if (!dominated_by_p (CDI_DOMINATORS, single_exit (loop)->src,\n+\t\t       gimple_bb (DR_STMT (single_store))))\n+    nb_iter = number_of_latch_executions (loop);\n+  else\n+    nb_iter = number_of_exit_cond_executions (loop);\n+  if (!nb_iter || nb_iter == chrec_dont_know)\n+    return;\n+\n   if (single_store && !single_load)\n     {\n       gimple stmt = DR_STMT (single_store);\n@@ -1212,6 +1213,7 @@ classify_partition (loop_p loop, struct graph *rdg, partition_t partition)\n \treturn;\n       partition->kind = PKIND_MEMSET;\n       partition->main_dr = single_store;\n+      partition->niter = nb_iter;\n     }\n   else if (single_store && single_load)\n     {\n@@ -1268,6 +1270,7 @@ classify_partition (loop_p loop, struct graph *rdg, partition_t partition)\n       partition->kind = PKIND_MEMCPY;\n       partition->main_dr = single_store;\n       partition->secondary_dr = single_load;\n+      partition->niter = nb_iter;\n     }\n }\n "}]}