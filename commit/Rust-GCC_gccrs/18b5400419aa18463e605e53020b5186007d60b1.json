{"sha": "18b5400419aa18463e605e53020b5186007d60b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThiNTQwMDQxOWFhMTg0NjNlNjA1ZTUzMDIwYjUxODYwMDdkNjBiMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-05-23T14:09:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-05-23T14:09:35Z"}, "message": "re PR tree-optimization/71230 (ICE : in zero_one_operation, at tree-ssa-reassoc.c:1230)\n\n2016-05-23  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/71230\n\t* tree-ssa-reassoc.c (acceptable_pow_call): Move initial condition...\n\t(try_special_add_to_ops): ... here.  Always test for single-use.\n\n\t* gfortran.dg/pr71230-1.f90: New testcase.\n\t* gfortran.dg/pr71230-2.f90: Likewise.\n\nFrom-SVN: r236591", "tree": {"sha": "408acbfab7a6060c79becc8a1c1a8864a6a24e1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/408acbfab7a6060c79becc8a1c1a8864a6a24e1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18b5400419aa18463e605e53020b5186007d60b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18b5400419aa18463e605e53020b5186007d60b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18b5400419aa18463e605e53020b5186007d60b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18b5400419aa18463e605e53020b5186007d60b1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a50575432b41b3bc3b0a14cb2e6e53881941a99f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a50575432b41b3bc3b0a14cb2e6e53881941a99f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a50575432b41b3bc3b0a14cb2e6e53881941a99f"}], "stats": {"total": 101, "additions": 92, "deletions": 9}, "files": [{"sha": "d85700a6bb4636e0f76e87b3eb78fedaa69bef1c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b5400419aa18463e605e53020b5186007d60b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b5400419aa18463e605e53020b5186007d60b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18b5400419aa18463e605e53020b5186007d60b1", "patch": "@@ -1,3 +1,9 @@\n+2016-05-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71230\n+\t* tree-ssa-reassoc.c (acceptable_pow_call): Move initial condition...\n+\t(try_special_add_to_ops): ... here.  Always test for single-use.\n+\n 2016-05-23  Martin Jambor  <mjambor@suse.cz>\n \n \t* hsa-gen.c (gen_hsa_insns_for_switch_stmt): Create an empty"}, {"sha": "2cffaa1a85b6ada7d6de9851b46562491233c625", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b5400419aa18463e605e53020b5186007d60b1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b5400419aa18463e605e53020b5186007d60b1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=18b5400419aa18463e605e53020b5186007d60b1", "patch": "@@ -1,3 +1,9 @@\n+2016-05-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71230\n+\t* gfortran.dg/pr71230-1.f90: New testcase.\n+\t* gfortran.dg/pr71230-2.f90: Likewise.\n+\n 2016-05-23  Venkataramanan Kumar  <venkataramanan.kumar@amd.com>\n \n \t* gcc.dg/vect/bb-slp-19.c:  Remove XFAIL. "}, {"sha": "6acfea13c313a09c54efb12e764a27302ef0fa01", "filename": "gcc/testsuite/gfortran.dg/pr71230-1.f90", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b5400419aa18463e605e53020b5186007d60b1/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr71230-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b5400419aa18463e605e53020b5186007d60b1/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr71230-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr71230-1.f90?ref=18b5400419aa18463e605e53020b5186007d60b1", "patch": "@@ -0,0 +1,6 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fbounds-check -ffast-math\" }\n+  FUNCTION pw_integral_aa ( cc ) RESULT ( integral_value )\n+    COMPLEX(KIND=8), DIMENSION(:), POINTER :: cc\n+    integral_value = accurate_sum ( CONJG ( cc (:) ) * cc (:) )\n+  END FUNCTION pw_integral_aa"}, {"sha": "78df649533c6154146c24c86cb565aa2ff3d580d", "filename": "gcc/testsuite/gfortran.dg/pr71230-2.f90", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b5400419aa18463e605e53020b5186007d60b1/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr71230-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b5400419aa18463e605e53020b5186007d60b1/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr71230-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr71230-2.f90?ref=18b5400419aa18463e605e53020b5186007d60b1", "patch": "@@ -0,0 +1,67 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -ffast-math\" }\n+\n+MODULE xc_b97\n+  INTEGER, PARAMETER :: dp=8\n+  PRIVATE\n+  PUBLIC :: b97_lsd_eval\n+CONTAINS\n+  SUBROUTINE b97_lsd_eval(rho_set,deriv_set,grad_deriv,b97_params)\n+    INTEGER, INTENT(in)                      :: grad_deriv\n+    INTEGER                                  :: handle, npoints, param, stat\n+    LOGICAL                                  :: failure\n+    REAL(kind=dp)                            :: epsilon_drho, epsilon_rho, &\n+                                                scale_c, scale_x\n+    REAL(kind=dp), DIMENSION(:, :, :), POINTER :: dummy, e_0, e_ndra, &\n+      e_ndra_ndra, e_ndra_ndrb, e_ndra_ra, e_ndra_rb, e_ndrb, e_ndrb_ndrb, &\n+      e_ndrb_ra, e_ndrb_rb, e_ra, e_ra_ra, e_ra_rb, e_rb, e_rb_rb, &\n+      norm_drhoa, norm_drhob, rhoa, rhob\n+    IF (.NOT. failure) THEN\n+       CALL b97_lsd_calc(&\n+            rhoa=rhoa, rhob=rhob, norm_drhoa=norm_drhoa,&\n+            norm_drhob=norm_drhob, e_0=e_0, &\n+            e_ra=e_ra, e_rb=e_rb, &\n+            e_ndra=e_ndra, e_ndrb=e_ndrb, &\n+            e_ra_ra=e_ra_ra, e_ra_rb=e_ra_rb, e_rb_rb=e_rb_rb,&\n+            e_ra_ndra=e_ndra_ra, e_ra_ndrb=e_ndrb_ra, &\n+            e_rb_ndrb=e_ndrb_rb, e_rb_ndra=e_ndra_rb,&\n+            e_ndra_ndra=e_ndra_ndra, e_ndrb_ndrb=e_ndrb_ndrb,&\n+            e_ndra_ndrb=e_ndra_ndrb,&\n+            grad_deriv=grad_deriv, npoints=npoints, &\n+            epsilon_rho=epsilon_rho,epsilon_drho=epsilon_drho,&\n+            param=param,scale_c_in=scale_c,scale_x_in=scale_x)\n+    END IF\n+  END SUBROUTINE b97_lsd_eval\n+  SUBROUTINE b97_lsd_calc(rhoa, rhob, norm_drhoa, norm_drhob,&\n+       e_0, e_ra, e_rb, e_ndra, e_ndrb, &\n+       e_ra_ndra,e_ra_ndrb, e_rb_ndra, e_rb_ndrb,&\n+       e_ndra_ndra, e_ndrb_ndrb, e_ndra_ndrb, &\n+       e_ra_ra, e_ra_rb, e_rb_rb,&\n+       grad_deriv,npoints,epsilon_rho,epsilon_drho, &\n+       param, scale_c_in, scale_x_in)\n+    REAL(kind=dp), DIMENSION(*), INTENT(in)  :: rhoa, rhob, norm_drhoa, &\n+                                                norm_drhob\n+    REAL(kind=dp), DIMENSION(*), INTENT(inout) :: e_0, e_ra, e_rb, e_ndra, &\n+      e_ndrb, e_ra_ndra, e_ra_ndrb, e_rb_ndra, e_rb_ndrb, e_ndra_ndra, &\n+      e_ndrb_ndrb, e_ndra_ndrb, e_ra_ra, e_ra_rb, e_rb_rb\n+    INTEGER, INTENT(in)                      :: grad_deriv, npoints\n+    REAL(kind=dp), INTENT(in)                :: epsilon_rho, epsilon_drho\n+    INTEGER, INTENT(in)                      :: param\n+    REAL(kind=dp), INTENT(in)                :: scale_c_in, scale_x_in\n+    REAL(kind=dp) :: A_1, A_2, A_3, alpha_1_1, alpha_1_2, alpha_1_3, alpha_c, &\n+      rs_b, rs_brhob, rs_brhobrhob, rsrhoa, rsrhoarhoa, rsrhoarhob, rsrhob, &\n+      t1014, t102, t1047, t1049, t105, t106, t107\n+      rsrhoa = -t4 * t212 * t208 / 0.12e2_dp\n+      t235 = t224 * rsrhoa / 0.2e1_dp + beta_2_1 * rsrhoa + & \n+          0.3e1_dp / 0.2e1_dp * t228 * rsrhoa + t50 * t48 * rsrhoa * t232\n+      t237 = t235 * t236\n+      e_c_u_0rhoa = -0.2e1_dp * t216 * rsrhoa * t56 + t222 * t237\n+      epsilon_c_unifrhoa = e_c_u_0rhoa + t285 * t110 + t287 * t110 - &\n+          t293 + t295 * t108 + t297 * t108 + t301\n+      e_lsda_c_abrhoa = epsilon_c_unifrhoa * rho + epsilon_c_unif - e_lsda_c_arhoa\n+      exc_rhoa = scale_x * (e_lsda_x_arhoa * gx_a + e_lsda_x_a * gx_arhoa) + &\n+          scale_c * (e_lsda_c_abrhoa * gc_ab + e_lsda_c_ab * gc_abrhoa + &\n+          e_lsda_c_arhoa * gc_a + e_lsda_c_a * gc_arhoa)\n+      e_ra(ii)=e_ra(ii)+exc_rhoa\n+  END SUBROUTINE b97_lsd_calc\n+END MODULE xc_b97"}, {"sha": "596920f5197ab20663e8bb7c50698352e78c1fec", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b5400419aa18463e605e53020b5186007d60b1/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b5400419aa18463e605e53020b5186007d60b1/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=18b5400419aa18463e605e53020b5186007d60b1", "patch": "@@ -4271,17 +4271,11 @@ break_up_subtract (gimple *stmt, gimple_stmt_iterator *gsip)\n    If any of these conditions does not hold, return FALSE.  */\n \n static bool\n-acceptable_pow_call (gimple *stmt, tree *base, HOST_WIDE_INT *exponent)\n+acceptable_pow_call (gcall *stmt, tree *base, HOST_WIDE_INT *exponent)\n {\n   tree arg1;\n   REAL_VALUE_TYPE c, cint;\n \n-  if (!reassoc_insert_powi_p\n-      || !flag_unsafe_math_optimizations\n-      || !is_gimple_call (stmt)\n-      || !has_single_use (gimple_call_lhs (stmt)))\n-    return false;\n-\n   switch (gimple_call_combined_fn (stmt))\n     {\n     CASE_CFN_POW:\n@@ -4340,11 +4334,15 @@ try_special_add_to_ops (vec<operand_entry *> *ops,\n   tree base = NULL_TREE;\n   HOST_WIDE_INT exponent = 0;\n \n-  if (TREE_CODE (op) != SSA_NAME)\n+  if (TREE_CODE (op) != SSA_NAME\n+      || ! has_single_use (op))\n     return false;\n \n   if (code == MULT_EXPR\n-      && acceptable_pow_call (def_stmt, &base, &exponent))\n+      && reassoc_insert_powi_p\n+      && flag_unsafe_math_optimizations\n+      && is_gimple_call (def_stmt)\n+      && acceptable_pow_call (as_a <gcall *> (def_stmt), &base, &exponent))\n     {\n       add_repeat_to_ops_vec (ops, base, exponent);\n       gimple_set_visited (def_stmt, true);"}]}