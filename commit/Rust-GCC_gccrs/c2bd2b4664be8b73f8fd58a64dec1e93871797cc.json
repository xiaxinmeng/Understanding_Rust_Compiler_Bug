{"sha": "c2bd2b4664be8b73f8fd58a64dec1e93871797cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJiZDJiNDY2NGJlOGI3M2Y4ZmQ1OGE2NGRlYzFlOTM4NzE3OTdjYw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-01-27T09:48:18Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-01-27T09:48:18Z"}, "message": "Do not generate a unique fnname for resolver.\n\n\tPR target/93274\n\t* config/i386/i386-features.c (make_resolver_func):\n\tAlign the code with ppc64 target implementation.\n\tDo not generate a unique name for resolver function.\n\tPR target/93274\n\t* gcc.target/i386/pr81213.c: Adjust to not expect\n\ta globally unique name.", "tree": {"sha": "59b6cb3c845ea09b06038d6f0bd922930e7828cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59b6cb3c845ea09b06038d6f0bd922930e7828cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2bd2b4664be8b73f8fd58a64dec1e93871797cc", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl4useIACgkQTcGC3A+n\nN4Xvlgf/QRBO/AFhP5lttiNe/OemZ0bfW6H1Qv06dMSlKvYIVtD7/F0J1uVbfK41\nQ3poD0jE84WcCWkNza5kCPOtCnewQ7ZtL+VzuWhCKgXw1itnY+9LI1on+LaSDD7R\nE5FwZ8m3jyHOWgWo5DOEhYPVnVdwBiVe02hF0FZQqQ6sTWPIhplKPS+Yf48htyl+\n8ttdMPjpby2kB5az/nh3IlbE138L2SsSj7UAw7xmx5op0lNNbcYxwBbC0TIt+m59\no+nbn0jV5ee7tjgv2L16/p65AhWBWrZzZ+6pzSzriVBf+nUN88d8kdDVInNZGJfM\nYCa3ytONhvjPHJXu+tq83n1c3w6pNg==\n=M1Gf\n-----END PGP SIGNATURE-----", "payload": "tree 59b6cb3c845ea09b06038d6f0bd922930e7828cc\nparent 1442bc31da61a7f6c7d7c526e0449cfd9a917cd5\nauthor Martin Liska <mliska@suse.cz> 1580118498 +0100\ncommitter Martin Liska <mliska@suse.cz> 1580118498 +0100\n\nDo not generate a unique fnname for resolver.\n\n\tPR target/93274\n\t* config/i386/i386-features.c (make_resolver_func):\n\tAlign the code with ppc64 target implementation.\n\tDo not generate a unique name for resolver function.\n\tPR target/93274\n\t* gcc.target/i386/pr81213.c: Adjust to not expect\n\ta globally unique name.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2bd2b4664be8b73f8fd58a64dec1e93871797cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2bd2b4664be8b73f8fd58a64dec1e93871797cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2bd2b4664be8b73f8fd58a64dec1e93871797cc/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1442bc31da61a7f6c7d7c526e0449cfd9a917cd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1442bc31da61a7f6c7d7c526e0449cfd9a917cd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1442bc31da61a7f6c7d7c526e0449cfd9a917cd5"}], "stats": {"total": 36, "additions": 19, "deletions": 17}, "files": [{"sha": "59806baa7574784301e97e5319efd2ced189995b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2bd2b4664be8b73f8fd58a64dec1e93871797cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2bd2b4664be8b73f8fd58a64dec1e93871797cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2bd2b4664be8b73f8fd58a64dec1e93871797cc", "patch": "@@ -1,3 +1,10 @@\n+2020-01-27  Martin Liska  <mliska@suse.cz>\n+\n+\tPR target/93274\n+\t* config/i386/i386-features.c (make_resolver_func):\n+\tAlign the code with ppc64 target implementation.\n+\tDo not generate a unique name for resolver function.\n+\n 2020-01-27  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/93397"}, {"sha": "b49e6f8d408a1b2b482e906dd848308e74d346f2", "filename": "gcc/config/i386/i386-features.c", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2bd2b4664be8b73f8fd58a64dec1e93871797cc/gcc%2Fconfig%2Fi386%2Fi386-features.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2bd2b4664be8b73f8fd58a64dec1e93871797cc/gcc%2Fconfig%2Fi386%2Fi386-features.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-features.c?ref=c2bd2b4664be8b73f8fd58a64dec1e93871797cc", "patch": "@@ -2738,26 +2738,16 @@ make_resolver_func (const tree default_decl,\n \t\t    const tree ifunc_alias_decl,\n \t\t    basic_block *empty_bb)\n {\n-  char *resolver_name;\n-  tree decl, type, decl_name, t;\n+  tree decl, type, t;\n \n-  /* IFUNC's have to be globally visible.  So, if the default_decl is\n-     not, then the name of the IFUNC should be made unique.  */\n-  if (TREE_PUBLIC (default_decl) == 0)\n-    {\n-      char *ifunc_name = make_unique_name (default_decl, \"ifunc\", true);\n-      symtab->change_decl_assembler_name (ifunc_alias_decl,\n-\t\t\t\t\t  get_identifier (ifunc_name));\n-      XDELETEVEC (ifunc_name);\n-    }\n-\n-  resolver_name = make_unique_name (default_decl, \"resolver\", false);\n+  /* Create resolver function name based on default_decl.  */\n+  tree decl_name = clone_function_name (default_decl, \"resolver\");\n+  const char *resolver_name = IDENTIFIER_POINTER (decl_name);\n \n   /* The resolver function should return a (void *). */\n   type = build_function_type_list (ptr_type_node, NULL_TREE);\n \n   decl = build_fn_decl (resolver_name, type);\n-  decl_name = get_identifier (resolver_name);\n   SET_DECL_ASSEMBLER_NAME (decl, decl_name);\n \n   DECL_NAME (decl) = decl_name;\n@@ -2809,7 +2799,6 @@ make_resolver_func (const tree default_decl,\n \n   /* Create the alias for dispatch to resolver here.  */\n   cgraph_node::create_same_body_alias (ifunc_alias_decl, decl);\n-  XDELETEVEC (resolver_name);\n   return decl;\n }\n "}, {"sha": "22a37dd1ab217dd8e71ea1aca6da7077f6116f2c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2bd2b4664be8b73f8fd58a64dec1e93871797cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2bd2b4664be8b73f8fd58a64dec1e93871797cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c2bd2b4664be8b73f8fd58a64dec1e93871797cc", "patch": "@@ -1,3 +1,9 @@\n+2020-01-27  Martin Liska  <mliska@suse.cz>\n+\n+\tPR target/93274\n+\t* gcc.target/i386/pr81213.c: Adjust to not expect\n+\ta globally unique name.\n+\n 2020-01-27  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/93397"}, {"sha": "89c4752986119b160388cadeee1ca0ed84a7c699", "filename": "gcc/testsuite/gcc.target/i386/pr81213.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2bd2b4664be8b73f8fd58a64dec1e93871797cc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81213.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2bd2b4664be8b73f8fd58a64dec1e93871797cc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81213.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81213.c?ref=c2bd2b4664be8b73f8fd58a64dec1e93871797cc", "patch": "@@ -14,6 +14,6 @@ int main()\n   return foo();\n }\n \n-/* { dg-final { scan-assembler \"\\t.globl\\tfoo\\\\..*\\\\.ifunc\" } } */\n+/* { dg-final { scan-assembler \"\\t.globl\\tfoo\" } } */\n /* { dg-final { scan-assembler \"foo.resolver:\" } } */\n-/* { dg-final { scan-assembler \"foo\\\\..*\\\\.ifunc, @gnu_indirect_function\" } } */\n+/* { dg-final { scan-assembler \"foo\\\\, @gnu_indirect_function\" } } */"}]}