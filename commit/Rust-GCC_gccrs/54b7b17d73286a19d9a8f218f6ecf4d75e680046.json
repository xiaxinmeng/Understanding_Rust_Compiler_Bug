{"sha": "54b7b17d73286a19d9a8f218f6ecf4d75e680046", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRiN2IxN2Q3MzI4NmExOWQ5YThmMjE4ZjZlY2Y0ZDc1ZTY4MDA0Ng==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-12-04T17:20:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-12-04T17:20:34Z"}, "message": "re PR middle-end/34334 (ICE in vuses_compare, at tree-vn.c:118)\n\n2007-12-04  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/34334\n\tPR middle-end/34222\n\t* tree-ssa-operands.c (get_addr_dereference_operands): If we\n\tfall back to using the SMTs aliases, make sure to add virtual\n\toperands for the SMT itself.\n\t(create_ssa_artificial_load_stmt): Fix typo.  Make sure to also\n\tclear the loaded and stored symbols bitmaps.\n\n\t* gcc.c-torture/compile/pr34334.c: New testcase.\n\t* g++.dg/torture/pr34222.C: New testcase.\n\nFrom-SVN: r130602", "tree": {"sha": "e4978fe5fce020d21312561a9423cd654c78b718", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4978fe5fce020d21312561a9423cd654c78b718"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54b7b17d73286a19d9a8f218f6ecf4d75e680046", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54b7b17d73286a19d9a8f218f6ecf4d75e680046", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54b7b17d73286a19d9a8f218f6ecf4d75e680046", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54b7b17d73286a19d9a8f218f6ecf4d75e680046/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "91ee70c3474d8ffe588224402caff0cafa4cdcef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91ee70c3474d8ffe588224402caff0cafa4cdcef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91ee70c3474d8ffe588224402caff0cafa4cdcef"}], "stats": {"total": 242, "additions": 239, "deletions": 3}, "files": [{"sha": "9c32e260a70c5689e27e0adcfb34ceb47c2988c5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54b7b17d73286a19d9a8f218f6ecf4d75e680046/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54b7b17d73286a19d9a8f218f6ecf4d75e680046/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=54b7b17d73286a19d9a8f218f6ecf4d75e680046", "patch": "@@ -1,3 +1,13 @@\n+2007-12-04  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/34334\n+\tPR middle-end/34222\n+\t* tree-ssa-operands.c (get_addr_dereference_operands): If we\n+\tfall back to using the SMTs aliases, make sure to add virtual\n+\toperands for the SMT itself.\n+\t(create_ssa_artificial_load_stmt): Fix typo.  Make sure to also\n+\tclear the loaded and stored symbols bitmaps.\n+\n 2007-12-04  Ben Elliston  <bje@au.ibm.com>\n \n \t* config/spu/spu.h (ASM_FORMAT_PRIVATE_NAME): Remove; use default."}, {"sha": "920ffa3e71eb2725d81ffe257fdf1fb379fb313b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54b7b17d73286a19d9a8f218f6ecf4d75e680046/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54b7b17d73286a19d9a8f218f6ecf4d75e680046/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=54b7b17d73286a19d9a8f218f6ecf4d75e680046", "patch": "@@ -1,3 +1,10 @@\n+2007-12-04  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/34334\n+\tPR middle-end/34222\n+\t* gcc.c-torture/compile/pr34334.c: New testcase.\n+\t* g++.dg/torture/pr34222.C: New testcase.\n+\n 2007-12-04  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.c-torture/execute/20071202-1.c: New test."}, {"sha": "1939b5015b1725dfdaadd52550c111a8eea37c5a", "filename": "gcc/testsuite/g++.dg/torture/pr34222.C", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54b7b17d73286a19d9a8f218f6ecf4d75e680046/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr34222.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54b7b17d73286a19d9a8f218f6ecf4d75e680046/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr34222.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr34222.C?ref=54b7b17d73286a19d9a8f218f6ecf4d75e680046", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do compile } */\n+\n+namespace std __attribute__ ((__visibility__ (\"default\"))) {\n+    template<class _CharT>     struct char_traits;\n+  }\n+typedef long int ptrdiff_t;\n+namespace std __attribute__ ((__visibility__ (\"default\"))) {\n+    typedef ptrdiff_t streamsize;\n+    template<typename _CharT, typename _Traits = char_traits<_CharT> >     class basic_ifstream;\n+    typedef basic_ifstream<char> ifstream;\n+    class ios_base   {\n+    };\n+  }\n+template<class T> class Vector4 {\n+   public:\n+      inline Vector4();\n+      inline Vector4(T, T, T, T);\n+      T x, y, z, w;\n+  };\n+template<class T> class Matrix4 {\n+   public:\n+      Matrix4(const Vector4<T>&, const Vector4<T>&,             const Vector4<T>&, const Vector4<T>&);\n+      Matrix4(const Matrix4<T>& m);\n+      Vector4<T> r[4];\n+  };\n+typedef Vector4<float> Vec4f;\n+typedef Matrix4<float> Mat4f;\n+template<class T> Vector4<T>::Vector4() : x(0), y(0), z(0), w(0) {\n+  }\n+template<class T> Vector4<T>::Vector4(T _x, T _y, T _z, T _w) :     x(_x), y(_y), z(_z), w(_w) {\n+  }\n+template<class T> Matrix4<T>::Matrix4(const Vector4<T>& v0,                                       const Vector4<T>& v1,                                       const Vector4<T>& v2,                                       const Vector4<T>& v3) {\n+  }\n+namespace std __attribute__ ((__visibility__ (\"default\"))) {\n+    template<typename _CharT, typename _Traits>     class basic_ios : public ios_base     {\n+      };\n+    template<typename _CharT, typename _Traits>     class basic_istream : virtual public basic_ios<_CharT, _Traits>     {\n+      public:\n+        typedef _CharT char_type;\n+        typedef basic_istream<_CharT, _Traits> __istream_type;\n+        __istream_type&       read(char_type* __s, streamsize __n);\n+      };\n+    template<typename _CharT, typename _Traits>     class basic_ifstream : public basic_istream<_CharT, _Traits>     {\n+      };\n+  }\n+using namespace std;\n+static float readFloat(ifstream& in) {\n+      float f;\n+      in.read((char*) &f, sizeof(float));\n+  }\n+Mat4f readMeshMatrix(ifstream& in, int nBytes) {\n+      float m00 = readFloat(in);\n+      float m01 = readFloat(in);\n+      float m02 = readFloat(in);\n+      float m10 = readFloat(in);\n+      float m11 = readFloat(in);\n+      float m12 = readFloat(in);\n+      float m20 = readFloat(in);\n+      float m21 = readFloat(in);\n+      float m22 = readFloat(in);\n+      float m30 = readFloat(in);\n+      float m31 = readFloat(in);\n+      float m32 = readFloat(in);\n+      return Mat4f(Vec4f(m00, m01, m02, 0),                  Vec4f(m10, m11, m12, 0),                  Vec4f(m20, m21, m22, 0),                  Vec4f(m30, m31, m32, 1));\n+  }"}, {"sha": "15f895f1cba00008974654a60e4fa9650cb1472b", "filename": "gcc/testsuite/gcc.c-torture/compile/pr34334.c", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54b7b17d73286a19d9a8f218f6ecf4d75e680046/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr34334.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54b7b17d73286a19d9a8f218f6ecf4d75e680046/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr34334.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr34334.c?ref=54b7b17d73286a19d9a8f218f6ecf4d75e680046", "patch": "@@ -0,0 +1,140 @@\n+typedef unsigned int size_t;\n+__extension__ typedef long long int __quad_t;\n+__extension__ typedef unsigned int __mode_t;\n+__extension__ typedef __quad_t __off64_t;\n+typedef __mode_t mode_t;\n+typedef __off64_t off_t;\n+struct timeval   {};\n+typedef struct   {} fd_set;\n+typedef union {} __pthread_slist_t;\n+typedef union {\n+    struct __pthread_mutex_s   { __extension__ union { };   } __data;\n+};\n+extern int stat64 (__const char *__restrict __file,      struct stat64 *__restrict __buf) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));\n+extern int fstatat64 (int __fd, __const char *__restrict __file,         struct stat64 *__restrict __buf, int __flag)      __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3)));\n+enum __socket_type { SOCK_STREAM = 1, };\n+enum { SI_ASYNCNL = -60, };\n+enum { CLD_EXITED = 1, };\n+typedef struct sigaltstack   { } stack_t;\n+enum __rlimit_resource { __RLIMIT_SIGPENDING = 11, };\n+struct rlimit   { };\n+enum __priority_which { PRIO_PROCESS = 0, };\n+typedef union   { } __WAIT_STATUS __attribute__ ((__transparent_union__));\n+union wait   {\n+    struct       {       } __wait_stopped;\n+};\n+typedef enum {  P_ALL, } idtype_t;\n+struct utsname   { };\n+enum   { IPPROTO_IP = 0,   };\n+enum   { IPPORT_ECHO = 7,   };\n+struct in_addr   { };\n+struct in6_addr   {\n+    union       {       } in6_u;\n+};\n+typedef long int wchar_t;\n+typedef unsigned char guint8;\n+typedef signed int gint32;\n+typedef unsigned int guint32;\n+typedef signed int gssize;\n+typedef unsigned int gsize;\n+struct _GStaticMutex {\n+    union {   } static_mutex;\n+};\n+union _GSystemThread { };\n+typedef int GPid;\n+typedef char gchar;\n+typedef int gint;\n+typedef gint gboolean;\n+typedef unsigned short gushort;\n+typedef unsigned long gulong;\n+typedef unsigned int guint;\n+typedef void* gpointer;\n+typedef const void *gconstpointer;\n+typedef gboolean (*GEqualFunc) (gconstpointer a, gconstpointer b);\n+typedef void (*GFunc) (gpointer data,   gpointer user_data);\n+typedef void (*GHFunc) (gpointer key,   gpointer user_data);\n+struct _GTimeVal { };\n+typedef struct _GByteArray GByteArray;\n+guint8* g_byte_array_free (GByteArray *array,      guint index_);\n+typedef guint32 GQuark;\n+typedef struct _GError GError;\n+GError* g_error_new (GQuark domain,   const gchar *message);\n+gboolean g_error_matches (const GError *error,   gint code);\n+typedef __builtin_va_list __gnuc_va_list;\n+typedef __gnuc_va_list va_list;\n+typedef enum { G_USER_DIRECTORY_DESKTOP, } GUserDirectory;\n+typedef enum { G_THREAD_PRIORITY_URGENT } GThreadPriority;\n+struct _GThread { };\n+typedef struct _GCond GCond;\n+struct _GThreadFunctions {\n+    void (*cond_wait) (GCond *cond,  GError **error);\n+    gboolean (*thread_equal) (gpointer thread1,        gpointer thread2);\n+};\n+typedef struct _GAsyncQueue GAsyncQueue;\n+void g_async_queue_sort (GAsyncQueue *queue,           guint *save);\n+struct tm { };\n+typedef struct __locale_struct { } *__locale_t;\n+extern int getaddrinfo (__const char *__restrict __name, struct addrinfo **__restrict __pai);\n+typedef struct _IO_FILE FILE;\n+__strsep_1c (char **__s, char __reject) { }\n+__strsep_2c (char **__s, char __reject1, char __reject2) { }\n+typedef struct stack_st  { } STACK;\n+typedef struct asn1_string_st ASN1_BIT_STRING;\n+typedef struct bn_mont_ctx_st BN_MONT_CTX;\n+typedef struct evp_cipher_st EVP_CIPHER;\n+typedef struct EDIPartyName_st {\n+    union { } d;\n+} GENERAL_NAME;\n+typedef struct DIST_POINT_NAME_st {\n+    union { } name;\n+} DIST_POINT_NAME;\n+typedef struct SXNET_st { } NOTICEREF;\n+typedef struct GENERAL_SUBTREE_st { } X509_PURPOSE;\n+int X509V3_add_value(const char *name, const char *value, STACK **extlist);\n+int X509_PURPOSE_add(int id, int trust, int flags, char *name, char *sname, void *arg);\n+extern char *dcgettext (__const char *__domainname, __const char *__msgid, int __category) __attribute__ ((__nothrow__)) __attribute__ ((__format_arg__ (2)));\n+enum { __LC_CTYPE = 0, };\n+struct lconv { };\n+typedef enum gftp_logging_level_tag { gftp_logging_send, } gftp_logging_level;\n+struct gftp_file_tag {\n+    char *file,        *destfile;\n+    unsigned int selected : 1,\n+                is_fd : 1;\n+    gint32 ipv4_network_address, ipv4_netmask;\n+} gftp_proxy_hosts;\n+typedef enum { gftp_option_type_text = 0, } gftp_option_type_enum;\n+typedef struct gftp_config_list_vars_tag { } gftp_config_list_vars;\n+typedef struct gftp_config_vars_tag { } gftp_config_vars;\n+typedef struct gftp_option_type_tag {\n+    int (*read_function) (char *str, gftp_config_vars * cv, int line);\n+    int (*write_function) (gftp_config_vars * cv, char *buf, size_t buflen, int to_config_file);\n+} gftp_option_type_var;\n+typedef struct gftp_request_tag gftp_request;\n+typedef void (*gftp_logging_func) ( gftp_logging_level level, const char *string, ... );\n+typedef struct gftp_transfer_tag {\n+    gftp_request * fromreq, * toreq;\n+    unsigned int cancel : 1,\n+                skip_file : 1;\n+    long numfiles,  resumed_bytes;\n+} gftp_transfer;\n+typedef struct gftp_log_tag {\n+    unsigned int shown : 1,\n+\tuse_threads : 1;\n+} supported_gftp_protocols;\n+void\n+gftp_config_parse_args (char *str, int numargs, int lineno, char **first, ...)\n+{\n+    char *curpos, *endpos, *pos, **dest, tempchar;\n+    va_list argp;\n+    dest = first;\n+    while (numargs > 0)\n+    {\n+        if (numargs > 1)\n+\t{  \n+\t    dest = __builtin_va_arg(argp,char **); \n+\t    *dest = ((void *)0);\n+\t} \n+\tnumargs--; \n+\t**dest = '\\0'; \n+    }\n+}"}, {"sha": "fb611664c0937a820ae35e972ca1b13e40c4a0fb", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54b7b17d73286a19d9a8f218f6ecf4d75e680046/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54b7b17d73286a19d9a8f218f6ecf4d75e680046/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=54b7b17d73286a19d9a8f218f6ecf4d75e680046", "patch": "@@ -1665,8 +1665,18 @@ get_addr_dereference_operands (tree stmt, tree *addr, int flags, tree full_ref,\n \t     to make sure to not prune virtual operands based on offset\n \t     and size.  */\n \t  if (v_ann->symbol_mem_tag)\n-\t    add_virtual_operand (v_ann->symbol_mem_tag, s_ann, flags,\n-\t\t\t\t full_ref, 0, -1, false);\n+\t    {\n+\t      add_virtual_operand (v_ann->symbol_mem_tag, s_ann, flags,\n+\t\t\t\t   full_ref, 0, -1, false);\n+\t      /* Make sure we add the SMT itself.  */\n+\t      if (!(flags & opf_no_vops))\n+\t\t{\n+\t\t  if (flags & opf_def)\n+\t\t    append_vdef (v_ann->symbol_mem_tag);\n+\t\t  else\n+\t\t    append_vuse (v_ann->symbol_mem_tag);\n+\t\t}\n+\t    }\n \n \t  /* Aliasing information is missing; mark statement as\n \t     volatile so we won't optimize it out too actively.  */\n@@ -2657,14 +2667,18 @@ create_ssa_artificial_load_stmt (tree new_stmt, tree old_stmt)\n     if (TREE_CODE (op) != SSA_NAME)\n       var_ann (op)->in_vuse_list = false;\n    \n-  for (i = 0; VEC_iterate (tree, build_vuses, i, op); i++)\n+  for (i = 0; VEC_iterate (tree, build_vdefs, i, op); i++)\n     if (TREE_CODE (op) != SSA_NAME)\n       var_ann (op)->in_vdef_list = false;\n \n   /* Remove any virtual operands that were found.  */\n   VEC_truncate (tree, build_vdefs, 0);\n   VEC_truncate (tree, build_vuses, 0);\n \n+  /* Clear the loads and stores bitmaps.  */\n+  bitmap_clear (build_loads);\n+  bitmap_clear (build_stores);\n+\n   /* For each VDEF on the original statement, we want to create a\n      VUSE of the VDEF result operand on the new statement.  */\n   FOR_EACH_SSA_TREE_OPERAND (op, old_stmt, iter, SSA_OP_VDEF)"}]}