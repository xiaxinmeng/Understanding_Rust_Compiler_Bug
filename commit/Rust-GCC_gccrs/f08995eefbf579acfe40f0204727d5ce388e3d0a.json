{"sha": "f08995eefbf579acfe40f0204727d5ce388e3d0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA4OTk1ZWVmYmY1NzlhY2ZlNDBmMDIwNDcyN2Q1Y2UzODhlM2QwYQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-06-07T20:07:28Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-06-07T20:09:49Z"}, "message": "i386: Improve expansion of __builtin_parity\n\nGCC currently hides the shift and xor reduction inside a backend\nspecific UNSPEC PARITY, making it invisible to the RTL optimizers until\nvery late during compilation.  It is normally reasonable for the\nmiddle-end to maintain wider mode representations for as long as possible\nand split them later, but this only helps if the semantics are visible\nat the RTL-level (to combine and other passes), but UNSPECs are black\nboxes, so in this case splitting early (during RTL expansion) is a\nbetter strategy.\n\nIt turns out that that popcount instruction on modern x86_64 processors\nhas (almost) made the integer parity flag in the x86 ALU completely\nobsolete, especially as POPCOUNT's integer semantics are a much better\nfit to RTL.  The one remaining case where these transistors are useful\nis where __builtin_parity is immediately tested by a conditional branch,\nand therefore the result is wanted in a flags register rather than as\nan integer.  This case is captured by two peephole2 optimizations in\nthe attached patch.\n\n2020-06-07  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog:\n\n\t* config/i386/i386.md (paritydi2, paritysi2): Expand reduction\n\tvia shift and xor to an USPEC PARITY matching a parityhi2_cmp.\n\t(paritydi2_cmp, paritysi2_cmp): Delete these define_insn_and_split.\n\t(parityhi2, parityqi2): New expanders.\n\t(parityhi2_cmp): Implement set parity flag with xorb insn.\n\t(parityqi2_cmp): Implement set parity flag with testb insn.\n\tNew peephole2s to use these insns (UNSPEC PARITY) when appropriate.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/parity-3.c: New test.\n\t* gcc.target/i386/parity-4.c: Likewise.\n\t* gcc.target/i386/parity-5.c: Likewise.\n\t* gcc.target/i386/parity-6.c: Likewise.\n\t* gcc.target/i386/parity-7.c: Likewise.\n\t* gcc.target/i386/parity-8.c: Likewise.\n\t* gcc.target/i386/parity-9.c: Likewise.", "tree": {"sha": "ef2c088a1e449d8776e3721cef11cf1e0cc7690f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef2c088a1e449d8776e3721cef11cf1e0cc7690f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f08995eefbf579acfe40f0204727d5ce388e3d0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f08995eefbf579acfe40f0204727d5ce388e3d0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f08995eefbf579acfe40f0204727d5ce388e3d0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f08995eefbf579acfe40f0204727d5ce388e3d0a/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fced594b313ddfb941913b2f59b10ce3514faaf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fced594b313ddfb941913b2f59b10ce3514faaf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fced594b313ddfb941913b2f59b10ce3514faaf6"}], "stats": {"total": 323, "additions": 270, "deletions": 53}, "files": [{"sha": "9db7469dfcc08a1ca01ea3938a0f75d6b8327eef", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 143, "deletions": 53, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08995eefbf579acfe40f0204727d5ce388e3d0a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08995eefbf579acfe40f0204727d5ce388e3d0a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f08995eefbf579acfe40f0204727d5ce388e3d0a", "patch": "@@ -14866,9 +14866,32 @@\n   \"! TARGET_POPCNT\"\n {\n   rtx scratch = gen_reg_rtx (QImode);\n+  rtx hipart1 = gen_reg_rtx (SImode);\n+  rtx lopart1 = gen_reg_rtx (SImode);\n+  rtx xor1 = gen_reg_rtx (SImode);\n+  rtx shift2 = gen_reg_rtx (SImode);\n+  rtx hipart2 = gen_reg_rtx (HImode);\n+  rtx lopart2 = gen_reg_rtx (HImode);\n+  rtx xor2 = gen_reg_rtx (HImode);\n \n-  emit_insn (gen_paritydi2_cmp (NULL_RTX, NULL_RTX,\n-\t\t\t\tNULL_RTX, operands[1]));\n+  if (TARGET_64BIT)\n+    {\n+      rtx shift1 = gen_reg_rtx (DImode);\n+      emit_insn (gen_lshrdi3 (shift1, operands[1], GEN_INT (32)));\n+      emit_move_insn (hipart1, gen_lowpart (SImode, shift1));\n+    }\n+  else\n+    emit_move_insn (hipart1, gen_highpart (SImode, operands[1]));\n+\n+  emit_move_insn (lopart1, gen_lowpart (SImode, operands[1]));\n+  emit_insn (gen_xorsi3 (xor1, hipart1, lopart1));\n+\n+  emit_insn (gen_lshrsi3 (shift2, xor1, GEN_INT (16)));\n+  emit_move_insn (hipart2, gen_lowpart (HImode, shift2));\n+  emit_move_insn (lopart2, gen_lowpart (HImode, xor1));\n+  emit_insn (gen_xorhi3 (xor2, hipart2, lopart2));\n+\n+  emit_insn (gen_parityhi2_cmp (xor2));\n \n   ix86_expand_setcc (scratch, ORDERED,\n \t\t     gen_rtx_REG (CCmode, FLAGS_REG), const0_rtx);\n@@ -14891,8 +14914,17 @@\n   \"! TARGET_POPCNT\"\n {\n   rtx scratch = gen_reg_rtx (QImode);\n+  rtx shift = gen_reg_rtx (SImode);\n+  rtx hipart = gen_reg_rtx (HImode);\n+  rtx lopart = gen_reg_rtx (HImode);\n+  rtx tmp = gen_reg_rtx (HImode);\n+\n+  emit_insn (gen_lshrsi3 (shift, operands[1], GEN_INT (16)));\n+  emit_move_insn (hipart, gen_lowpart (HImode, shift));\n+  emit_move_insn (lopart, gen_lowpart (HImode, operands[1]));\n+  emit_insn (gen_xorhi3 (tmp, hipart, lopart));\n \n-  emit_insn (gen_paritysi2_cmp (NULL_RTX, NULL_RTX, operands[1]));\n+  emit_insn (gen_parityhi2_cmp (tmp));\n \n   ix86_expand_setcc (scratch, ORDERED,\n \t\t     gen_rtx_REG (CCmode, FLAGS_REG), const0_rtx);\n@@ -14901,70 +14933,128 @@\n   DONE;\n })\n \n-(define_insn_and_split \"paritydi2_cmp\"\n-  [(set (reg:CC FLAGS_REG)\n-\t(unspec:CC [(match_operand:DI 3 \"register_operand\" \"0\")]\n-\t\t   UNSPEC_PARITY))\n-   (clobber (match_scratch:DI 0 \"=r\"))\n-   (clobber (match_scratch:SI 1 \"=&r\"))\n-   (clobber (match_scratch:HI 2 \"=Q\"))]\n+(define_expand \"parityhi2\"\n+  [(set (match_operand:HI 0 \"register_operand\")\n+\t(parity:HI (match_operand:HI 1 \"register_operand\")))]\n   \"! TARGET_POPCNT\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(parallel\n-     [(set (match_dup 1)\n-\t   (xor:SI (match_dup 1) (match_dup 4)))\n-      (clobber (reg:CC FLAGS_REG))])\n-   (parallel\n-     [(set (reg:CC FLAGS_REG)\n-\t   (unspec:CC [(match_dup 1)] UNSPEC_PARITY))\n-      (clobber (match_dup 1))\n-      (clobber (match_dup 2))])]\n {\n-  operands[4] = gen_lowpart (SImode, operands[3]);\n+  rtx scratch = gen_reg_rtx (QImode);\n \n-  if (TARGET_64BIT)\n-    {\n-      emit_move_insn (operands[1], gen_lowpart (SImode, operands[3]));\n-      emit_insn (gen_lshrdi3 (operands[3], operands[3], GEN_INT (32)));\n-    }\n-  else\n-    operands[1] = gen_highpart (SImode, operands[3]);\n+  emit_insn (gen_parityhi2_cmp (operands[1]));\n+\n+  ix86_expand_setcc (scratch, ORDERED,\n+\t\t     gen_rtx_REG (CCmode, FLAGS_REG), const0_rtx);\n+\n+  emit_insn (gen_zero_extendqihi2 (operands[0], scratch));\n+  DONE;\n })\n \n-(define_insn_and_split \"paritysi2_cmp\"\n-  [(set (reg:CC FLAGS_REG)\n-\t(unspec:CC [(match_operand:SI 2 \"register_operand\" \"0\")]\n-\t\t   UNSPEC_PARITY))\n-   (clobber (match_scratch:SI 0 \"=r\"))\n-   (clobber (match_scratch:HI 1 \"=&Q\"))]\n+(define_expand \"parityqi2\"\n+  [(set (match_operand:QI 0 \"register_operand\")\n+\t(parity:QI (match_operand:QI 1 \"register_operand\")))]\n   \"! TARGET_POPCNT\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(parallel\n-     [(set (match_dup 1)\n-\t   (xor:HI (match_dup 1) (match_dup 3)))\n-      (clobber (reg:CC FLAGS_REG))])\n-   (parallel\n-     [(set (reg:CC FLAGS_REG)\n-\t   (unspec:CC [(match_dup 1)] UNSPEC_PARITY))\n-      (clobber (match_dup 1))])]\n {\n-  operands[3] = gen_lowpart (HImode, operands[2]);\n+  emit_insn (gen_parityqi2_cmp (operands[1]));\n \n-  emit_move_insn (operands[1], gen_lowpart (HImode, operands[2]));\n-  emit_insn (gen_lshrsi3 (operands[2], operands[2], GEN_INT (16)));\n+  ix86_expand_setcc (operands[0], ORDERED,\n+\t\t     gen_rtx_REG (CCmode, FLAGS_REG), const0_rtx);\n+  DONE;\n })\n \n-(define_insn \"*parityhi2_cmp\"\n+(define_insn \"parityhi2_cmp\"\n   [(set (reg:CC FLAGS_REG)\n-\t(unspec:CC [(match_operand:HI 1 \"register_operand\" \"0\")]\n+\t(unspec:CC [(match_operand:HI 0 \"register_operand\" \"+Q\")]\n \t\t   UNSPEC_PARITY))\n-   (clobber (match_scratch:HI 0 \"=Q\"))]\n-  \"! TARGET_POPCNT\"\n+   (clobber (match_dup 0))]\n+  \"\"\n   \"xor{b}\\t{%h0, %b0|%b0, %h0}\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"mode\" \"HI\")])\n+   (set_attr \"mode\" \"QI\")])\n+\n+(define_insn \"parityqi2_cmp\"\n+  [(set (reg:CC FLAGS_REG)\n+\t(unspec:CC [(match_operand:QI 0 \"register_operand\" \"q\")]\n+\t\t   UNSPEC_PARITY))]\n+  \"\"\n+  \"test{b}\\t%0, %0\"\n+  [(set_attr \"mode\" \"QI\")])\n+\n+;; Replace zero_extend:HI followed by parityhi2_cmp with parityqi2_cmp\n+(define_peephole2\n+  [(set (match_operand:HI 0 \"register_operand\")\n+\t(zero_extend:HI (match_operand:QI 1 \"register_operand\")))\n+   (parallel [(set (reg:CC FLAGS_REG)\n+\t\t   (unspec:CC [(match_dup 0)] UNSPEC_PARITY))\n+\t      (clobber (match_dup 0))])]\n+  \"\"\n+  [(set (reg:CC FLAGS_REG)\n+\t(unspec:CC [(match_dup 1)] UNSPEC_PARITY))])\n+\n+;; Eliminate QImode popcount&1 using parity flag\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(zero_extend:SI (match_operand:QI 1 \"register_operand\")))\n+   (parallel [(set (match_operand:SI 2 \"register_operand\")\n+\t\t   (popcount:SI (match_dup 0)))\n+\t      (clobber (reg:CC FLAGS_REG))])\n+   (set (reg:CCZ FLAGS_REG)\n+\t(compare:CCZ (and:QI (match_operand:QI 3 \"register_operand\")\n+\t\t\t     (const_int 1))\n+\t\t     (const_int 0)))\n+   (set (pc) (if_then_else (match_operator 4 \"bt_comparison_operator\"\n+\t\t\t    [(reg:CCZ FLAGS_REG)\n+\t\t\t     (const_int 0)])\n+\t\t\t   (label_ref (match_operand 5))\n+\t\t\t   (pc)))]\n+  \"REGNO (operands[2]) == REGNO (operands[3])\n+   && peep2_reg_dead_p (3, operands[0])\n+   && peep2_reg_dead_p (3, operands[2])\n+   && peep2_regno_dead_p (4, FLAGS_REG)\"\n+  [(set (reg:CC FLAGS_REG)\n+\t(unspec:CC [(match_dup 1)] UNSPEC_PARITY))\n+   (set (pc) (if_then_else (match_op_dup 4 [(reg:CC FLAGS_REG)\n+\t\t\t\t\t    (const_int 0)])\n+\t\t\t   (label_ref (match_dup 5))\n+\t\t\t   (pc)))]\n+{\n+  operands[4] = shallow_copy_rtx (operands[4]);\n+  PUT_CODE (operands[4], GET_CODE (operands[4]) == EQ ? UNORDERED : ORDERED);\n+})\n+\n+;; Eliminate HImode popcount&1 using parity flag\n+(define_peephole2\n+  [(match_scratch:HI 0 \"Q\")\n+   (parallel [(set (match_operand:HI 1 \"register_operand\")\n+\t\t   (popcount:HI\n+\t\t    (match_operand:HI 2 \"nonimmediate_operand\")))\n+\t      (clobber (reg:CC FLAGS_REG))])\n+   (set (match_operand 3 \"register_operand\")\n+\t(zero_extend (match_dup 1)))\n+   (set (reg:CCZ FLAGS_REG)\n+\t(compare:CCZ (and:QI (match_operand:QI 4 \"register_operand\")\n+\t\t\t     (const_int 1))\n+\t\t     (const_int 0)))\n+   (set (pc) (if_then_else (match_operator 5 \"bt_comparison_operator\"\n+\t\t\t    [(reg:CCZ FLAGS_REG)\n+\t\t\t     (const_int 0)])\n+\t\t\t   (label_ref (match_operand 6))\n+\t\t\t   (pc)))]\n+  \"REGNO (operands[3]) == REGNO (operands[4])\n+   && peep2_reg_dead_p (3, operands[1])\n+   && peep2_reg_dead_p (3, operands[3])\n+   && peep2_regno_dead_p (4, FLAGS_REG)\"\n+  [(set (match_dup 0) (match_dup 2))\n+   (parallel [(set (reg:CC FLAGS_REG)\n+\t\t   (unspec:CC [(match_dup 0)] UNSPEC_PARITY))\n+\t      (clobber (match_dup 0))])\n+   (set (pc) (if_then_else (match_op_dup 5 [(reg:CC FLAGS_REG)\n+\t\t\t\t\t    (const_int 0)])\n+\t\t\t   (label_ref (match_dup 6))\n+\t\t\t   (pc)))]\n+{\n+  operands[5] = shallow_copy_rtx (operands[5]);\n+  PUT_CODE (operands[5], GET_CODE (operands[5]) == EQ ? UNORDERED : ORDERED);\n+})\n \n \f\n ;; Thread-local storage patterns for ELF."}, {"sha": "6b72591aad195a43845101e4dff2a86f902aa948", "filename": "gcc/testsuite/gcc.target/i386/parity-3.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08995eefbf579acfe40f0204727d5ce388e3d0a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fparity-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08995eefbf579acfe40f0204727d5ce388e3d0a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fparity-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fparity-3.c?ref=f08995eefbf579acfe40f0204727d5ce388e3d0a", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=core-avx2 -mno-popcnt\" } */\n+/* { dg-final { scan-assembler \"setp\" } } */\n+/* { dg-final { scan-assembler \"jnp\" } } */\n+/* { dg-final { scan-assembler \"jp\" } } */\n+\n+void dummy(void);\n+\n+int foo(unsigned int x)\n+{\n+  return !__builtin_parity(x);\n+}\n+\n+void bar(unsigned int x)\n+{\n+  if (__builtin_parity(x))\n+    dummy();\n+}\n+\n+void baz(unsigned int x)\n+{\n+  if (!__builtin_parity(x))\n+    dummy();\n+}"}, {"sha": "48384c23ea1b1ce6e7809012af9f627bcfc4b7b6", "filename": "gcc/testsuite/gcc.target/i386/parity-4.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08995eefbf579acfe40f0204727d5ce388e3d0a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fparity-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08995eefbf579acfe40f0204727d5ce388e3d0a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fparity-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fparity-4.c?ref=f08995eefbf579acfe40f0204727d5ce388e3d0a", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=core-avx2 -mno-popcnt\" } */\n+/* { dg-final { scan-assembler \"setp\" } } */\n+/* { dg-final { scan-assembler \"jnp\" } } */\n+/* { dg-final { scan-assembler \"jp\" } } */\n+\n+void dummy(void);\n+\n+int foo(unsigned long long x)\n+{\n+  return !__builtin_parityll(x);\n+}\n+\n+void bar(unsigned long long x)\n+{\n+  if (__builtin_parityll(x))\n+    dummy();\n+}\n+\n+void baz(unsigned long long x)\n+{\n+  if (!__builtin_parityll(x))\n+    dummy();\n+}"}, {"sha": "d19ed265b615f218fb106209bb006f8e2a526c18", "filename": "gcc/testsuite/gcc.target/i386/parity-5.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08995eefbf579acfe40f0204727d5ce388e3d0a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fparity-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08995eefbf579acfe40f0204727d5ce388e3d0a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fparity-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fparity-5.c?ref=f08995eefbf579acfe40f0204727d5ce388e3d0a", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=core-avx2\" } */\n+/* { dg-final { scan-assembler \"popcnt\" } } */\n+/* { dg-final { scan-assembler \"and\" } } */\n+\n+int foo(unsigned int x)\n+{\n+  return __builtin_parity(x);\n+}"}, {"sha": "33918e121d70f7dc3bbcc76cc6911f9590aeb2bb", "filename": "gcc/testsuite/gcc.target/i386/parity-6.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08995eefbf579acfe40f0204727d5ce388e3d0a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fparity-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08995eefbf579acfe40f0204727d5ce388e3d0a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fparity-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fparity-6.c?ref=f08995eefbf579acfe40f0204727d5ce388e3d0a", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=core-avx2\" } */\n+/* { dg-final { scan-assembler \"popcnt\" } } */\n+/* { dg-final { scan-assembler \"and\" } } */\n+\n+int foo(unsigned long long x)\n+{\n+  return __builtin_parityll(x);\n+}"}, {"sha": "ed9357f47db0e8316b7c19c06fc00cd868b5a273", "filename": "gcc/testsuite/gcc.target/i386/parity-7.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08995eefbf579acfe40f0204727d5ce388e3d0a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fparity-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08995eefbf579acfe40f0204727d5ce388e3d0a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fparity-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fparity-7.c?ref=f08995eefbf579acfe40f0204727d5ce388e3d0a", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=core-avx2 -mno-popcnt\" } */\n+/* { dg-additional-options \"-mregparm=1\" { target ia32 } } */\n+/* { dg-final { scan-assembler-times \"test\" 2 } } */\n+/* { dg-final { scan-assembler-not \"shr\" } } */\n+\n+int foo(unsigned char x)\n+{\n+  return __builtin_parity(x);\n+}\n+\n+int bar(unsigned char x)\n+{\n+  return __builtin_parityll(x);\n+}"}, {"sha": "a87845583ff1b099546931f7482c00e2f591e40d", "filename": "gcc/testsuite/gcc.target/i386/parity-8.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08995eefbf579acfe40f0204727d5ce388e3d0a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fparity-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08995eefbf579acfe40f0204727d5ce388e3d0a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fparity-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fparity-8.c?ref=f08995eefbf579acfe40f0204727d5ce388e3d0a", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=core-avx2 -mno-popcnt\" } */\n+/* { dg-final { scan-assembler-not \"shr\" } } */\n+\n+int foo(unsigned short x)\n+{\n+  return __builtin_parity(x);\n+}\n+\n+int bar(unsigned short x)\n+{\n+  return __builtin_parityll(x);\n+}"}, {"sha": "9d6cfe26a24fb4247ebffdc20acdcfb22363538d", "filename": "gcc/testsuite/gcc.target/i386/parity-9.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08995eefbf579acfe40f0204727d5ce388e3d0a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fparity-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08995eefbf579acfe40f0204727d5ce388e3d0a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fparity-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fparity-9.c?ref=f08995eefbf579acfe40f0204727d5ce388e3d0a", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=core-avx2\" } */\n+/* { dg-additional-options \"-mregparm=1\" { target ia32 } } */\n+/* { dg-final { scan-assembler-not \"popcnt\" } } */\n+/* { dg-final { scan-assembler-not \"shr\" } } */\n+/* { dg-final { scan-assembler-times \"jp\" 2 } } */\n+/* { dg-final { scan-assembler-times \"jnp\" 2 } } */\n+\n+void dummy(void);\n+\n+void pos8(unsigned char x)\n+{\n+  if (__builtin_parity(x))\n+    dummy();\n+}\n+\n+void neg8(unsigned char x)\n+{\n+  if (!__builtin_parity(x))\n+    dummy();\n+}\n+\n+void pos16(unsigned short x)\n+{\n+  if (__builtin_parity(x))\n+    dummy();\n+}\n+\n+void neg16(unsigned short x)\n+{\n+  if (!__builtin_parity(x))\n+    dummy();\n+}"}]}