{"sha": "c2e25d51a607bdaeacb5dc9a560484fa13e75946", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJlMjVkNTFhNjA3YmRhZWFjYjVkYzlhNTYwNDg0ZmExM2U3NTk0Ng==", "commit": {"author": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-04-26T10:28:36Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-04-26T10:28:36Z"}, "message": "* cpplex.c: fix typos in comment\n\nFrom-SVN: r33444", "tree": {"sha": "bf557dbaf8a80cb58792d4a19cdd0381dafb7cb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf557dbaf8a80cb58792d4a19cdd0381dafb7cb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2e25d51a607bdaeacb5dc9a560484fa13e75946", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2e25d51a607bdaeacb5dc9a560484fa13e75946", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2e25d51a607bdaeacb5dc9a560484fa13e75946", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2e25d51a607bdaeacb5dc9a560484fa13e75946/comments", "author": null, "committer": null, "parents": [{"sha": "d6d5f7955b117b2583e8200e6da0dc6f89c6ceea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6d5f7955b117b2583e8200e6da0dc6f89c6ceea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6d5f7955b117b2583e8200e6da0dc6f89c6ceea"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "bff1429f4e20b0413d9bc3ca54eae857130bc7a8", "filename": "gcc/cpplex.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e25d51a607bdaeacb5dc9a560484fa13e75946/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e25d51a607bdaeacb5dc9a560484fa13e75946/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=c2e25d51a607bdaeacb5dc9a560484fa13e75946", "patch": "@@ -2106,21 +2106,22 @@ _cpp_init_input_buffer (pfile)\n  trigraphs and escaped newlines in the input stream.\n \n  The trigraphs are three consecutive characters beginning with two\n- question marks.  A question mark is not a valid as part of a number\n- or identifier, so parsing of a number or identifier terminates\n- normally upon reaching it, returning to the mainloop which handles\n- the trigraph just like it would in any other position.  Similarly for\n- the backslash of a backslash-newline combination.  So we just need\n- the escaped-newline dropper in the mainloop to check if the token on\n- the top of the stack is a number or identifier, and to continue the\n- processing of the token as if nothing had happened.\n+ question marks.  A question mark is not valid as part of a number or\n+ identifier, so parsing of a number or identifier terminates normally\n+ upon reaching it, returning to the mainloop which handles the\n+ trigraph just like it would in any other position.  Similarly for the\n+ backslash of a backslash-newline combination.  So we just need the\n+ escaped-newline dropper in the mainloop to check if the token on the\n+ top of the stack after dropping the escaped newline is a number or\n+ identifier, and if so to continue the processing it as if nothing had\n+ happened.\n \n  For strings, we replace trigraphs whenever we reach a quote or\n  newline, because there might be a backslash trigraph escaping them.\n  We need to be careful that we start trigraph replacing from where we\n  left off previously, because it is possible for a first scan to leave\n  \"fake\" trigraphs that a second scan would pick up as real (e.g. the\n- sequence \"????\\\\n=\" would find a fake ??= trigraph after removing the\n+ sequence \"????/\\n=\" would find a fake ??= trigraph after removing the\n  escaped newline.)\n \n  For line comments, on reaching a newline we scan the previous"}]}