{"sha": "adace78911705f25a06b48a0559612402065530e", "node_id": "C_kwDOANBUbNoAKGFkYWNlNzg5MTE3MDVmMjVhMDZiNDhhMDU1OTYxMjQwMjA2NTUzMGU", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-16T10:09:29Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-16T11:39:26Z"}, "message": "Move code_helper to tree.h\n\ntree.h already contains combined_fn handling at the top and moving\ncode_helper away from gimple-match.h makes improving the gimple_build\nAPI easier.\n\n2022-05-16  Richard Biener  <rguenther@suse.de>\n\n\t* gimple-match.h (code_helper): Move class ...\n\t* tree.h (code_helper): ... here.", "tree": {"sha": "5d545f1818cb3ffa57a60edf60b3b29e57aebea9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d545f1818cb3ffa57a60edf60b3b29e57aebea9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adace78911705f25a06b48a0559612402065530e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adace78911705f25a06b48a0559612402065530e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adace78911705f25a06b48a0559612402065530e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adace78911705f25a06b48a0559612402065530e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef7b8976b9143aa78dd9cf5cfdaa02552d6e18a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef7b8976b9143aa78dd9cf5cfdaa02552d6e18a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef7b8976b9143aa78dd9cf5cfdaa02552d6e18a0"}], "stats": {"total": 98, "additions": 49, "deletions": 49}, "files": [{"sha": "e96c31ed09ff0818b3050594017101f1a77567bb", "filename": "gcc/gimple-match.h", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adace78911705f25a06b48a0559612402065530e/gcc%2Fgimple-match.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adace78911705f25a06b48a0559612402065530e/gcc%2Fgimple-match.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-match.h?ref=adace78911705f25a06b48a0559612402065530e", "patch": "@@ -23,55 +23,6 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_GIMPLE_MATCH_H\n \n \n-/* Helper to transparently allow tree codes and builtin function codes\n-   exist in one storage entity.  */\n-class code_helper\n-{\n-public:\n-  code_helper () {}\n-  code_helper (tree_code code) : rep ((int) code) {}\n-  code_helper (combined_fn fn) : rep (-(int) fn) {}\n-  code_helper (internal_fn fn) : rep (-(int) as_combined_fn (fn)) {}\n-  explicit operator tree_code () const { return (tree_code) rep; }\n-  explicit operator combined_fn () const { return (combined_fn) -rep; }\n-  explicit operator internal_fn () const;\n-  explicit operator built_in_function () const;\n-  bool is_tree_code () const { return rep > 0; }\n-  bool is_fn_code () const { return rep < 0; }\n-  bool is_internal_fn () const;\n-  bool is_builtin_fn () const;\n-  int get_rep () const { return rep; }\n-  bool operator== (const code_helper &other) { return rep == other.rep; }\n-  bool operator!= (const code_helper &other) { return rep != other.rep; }\n-  bool operator== (tree_code c) { return rep == code_helper (c).rep; }\n-  bool operator!= (tree_code c) { return rep != code_helper (c).rep; }\n-\n-private:\n-  int rep;\n-};\n-\n-inline code_helper::operator internal_fn () const\n-{\n-  return as_internal_fn (combined_fn (*this));\n-}\n-\n-inline code_helper::operator built_in_function () const\n-{\n-  return as_builtin_fn (combined_fn (*this));\n-}\n-\n-inline bool\n-code_helper::is_internal_fn () const\n-{\n-  return is_fn_code () && internal_fn_p (combined_fn (*this));\n-}\n-\n-inline bool\n-code_helper::is_builtin_fn () const\n-{\n-  return is_fn_code () && builtin_fn_p (combined_fn (*this));\n-}\n-\n /* Represents the condition under which an operation should happen,\n    and the value to use otherwise.  The condition applies elementwise\n    (as for VEC_COND_EXPR) if the values are vectors.  */"}, {"sha": "c92c5bf344b09e06fb047d8bdb60bca2d75722c3", "filename": "gcc/tree.h", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adace78911705f25a06b48a0559612402065530e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adace78911705f25a06b48a0559612402065530e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=adace78911705f25a06b48a0559612402065530e", "patch": "@@ -75,6 +75,55 @@ as_internal_fn (combined_fn code)\n   return internal_fn (int (code) - int (END_BUILTINS));\n }\n \n+/* Helper to transparently allow tree codes and builtin function codes\n+   exist in one storage entity.  */\n+class code_helper\n+{\n+public:\n+  code_helper () {}\n+  code_helper (tree_code code) : rep ((int) code) {}\n+  code_helper (combined_fn fn) : rep (-(int) fn) {}\n+  code_helper (internal_fn fn) : rep (-(int) as_combined_fn (fn)) {}\n+  explicit operator tree_code () const { return (tree_code) rep; }\n+  explicit operator combined_fn () const { return (combined_fn) -rep; }\n+  explicit operator internal_fn () const;\n+  explicit operator built_in_function () const;\n+  bool is_tree_code () const { return rep > 0; }\n+  bool is_fn_code () const { return rep < 0; }\n+  bool is_internal_fn () const;\n+  bool is_builtin_fn () const;\n+  int get_rep () const { return rep; }\n+  bool operator== (const code_helper &other) { return rep == other.rep; }\n+  bool operator!= (const code_helper &other) { return rep != other.rep; }\n+  bool operator== (tree_code c) { return rep == code_helper (c).rep; }\n+  bool operator!= (tree_code c) { return rep != code_helper (c).rep; }\n+\n+private:\n+  int rep;\n+};\n+\n+inline code_helper::operator internal_fn () const\n+{\n+  return as_internal_fn (combined_fn (*this));\n+}\n+\n+inline code_helper::operator built_in_function () const\n+{\n+  return as_builtin_fn (combined_fn (*this));\n+}\n+\n+inline bool\n+code_helper::is_internal_fn () const\n+{\n+  return is_fn_code () && internal_fn_p (combined_fn (*this));\n+}\n+\n+inline bool\n+code_helper::is_builtin_fn () const\n+{\n+  return is_fn_code () && builtin_fn_p (combined_fn (*this));\n+}\n+\n /* Macros for initializing `tree_contains_struct'.  */\n #define MARK_TS_BASE(C)\t\t\t\t\t\\\n   (tree_contains_struct[C][TS_BASE] = true)"}]}