{"sha": "b09649fdc609c79ea5acb9668636c7d8a5f64a7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA5NjQ5ZmRjNjA5Yzc5ZWE1YWNiOTY2ODYzNmM3ZDhhNWY2NGE3Yw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-06-09T20:57:38Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-06-09T20:57:38Z"}, "message": "Add support for mutually-incompatible fix-it hints\n\nThis patch adds a method:\n  rich_location::fixits_cannot_be_auto_applied\nfor ensuring that mutually-incompatible fix-its hints don't\nlead to insane output from -fdiagnostics-generate-patch.\n\nFix-it hints within such rich_location instances are printed\nas normal by diagnostic_show_locus, but don't affect the output\nof -fdiagnostics-generate-patch.\n\ngcc/ChangeLog:\n\t* diagnostic.c (diagnostic_report_diagnostic): Only add fixits\n\tto the edit_context if they can be auto-applied.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/plugin/diagnostic-test-show-locus-bw.c\n\t(test_mutually_exclusive_suggestions): New test function.\n\t* gcc.dg/plugin/diagnostic-test-show-locus-generate-patch.c\n\t(test_mutually_exclusive_suggestions): New test function.\n\t* gcc.dg/plugin/diagnostic-test-show-locus-parseable-fixits.c\n\t(test_mutually_exclusive_suggestions): New test function.\n\t* gcc.dg/plugin/diagnostic_plugin_test_show_locus.c\n\t(test_show_locus): Add special-case for\n\t\"test_mutually_exclusive_suggestions\".\n\nlibcpp/ChangeLog:\n\t* include/line-map.h\n\t(rich_location::fixits_cannot_be_auto_applied): New method.\n\t(rich_location::fixits_can_be_auto_applied_p): New accessor.\n\t(rich_location::m_fixits_cannot_be_auto_applied): New field.\n\t* line-map.c (rich_location::rich_location): Initialize new field.\n\nFrom-SVN: r249081", "tree": {"sha": "8ee5ecb323a5f1d30224c7950f593ad2f112c2f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ee5ecb323a5f1d30224c7950f593ad2f112c2f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b09649fdc609c79ea5acb9668636c7d8a5f64a7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b09649fdc609c79ea5acb9668636c7d8a5f64a7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b09649fdc609c79ea5acb9668636c7d8a5f64a7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b09649fdc609c79ea5acb9668636c7d8a5f64a7c/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c5d6c6d94e74dd2f72e323ff01ad2506115ffe05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5d6c6d94e74dd2f72e323ff01ad2506115ffe05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5d6c6d94e74dd2f72e323ff01ad2506115ffe05"}], "stats": {"total": 124, "additions": 122, "deletions": 2}, "files": [{"sha": "4ab6f8a168afe770c8d11e24c0211f8127478eef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b09649fdc609c79ea5acb9668636c7d8a5f64a7c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b09649fdc609c79ea5acb9668636c7d8a5f64a7c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b09649fdc609c79ea5acb9668636c7d8a5f64a7c", "patch": "@@ -1,3 +1,8 @@\n+2017-06-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* diagnostic.c (diagnostic_report_diagnostic): Only add fixits\n+\tto the edit_context if they can be auto-applied.\n+\n 2017-06-9  Ian Lance Taylor  <iant@golang.org>\n \n \t* opts.c (finish_options): If -fsplit-stack, disable implicit"}, {"sha": "bbf5f5ce7a611e5fba0784bcedd8e35f8115d5c1", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b09649fdc609c79ea5acb9668636c7d8a5f64a7c/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b09649fdc609c79ea5acb9668636c7d8a5f64a7c/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=b09649fdc609c79ea5acb9668636c7d8a5f64a7c", "patch": "@@ -986,7 +986,8 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n   diagnostic->x_data = NULL;\n \n   if (context->edit_context_ptr)\n-    context->edit_context_ptr->add_fixits (diagnostic->richloc);\n+    if (diagnostic->richloc->fixits_can_be_auto_applied_p ())\n+      context->edit_context_ptr->add_fixits (diagnostic->richloc);\n \n   context->lock--;\n "}, {"sha": "cc36d7a35b6c8e760ff97775e0600763f682e399", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b09649fdc609c79ea5acb9668636c7d8a5f64a7c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b09649fdc609c79ea5acb9668636c7d8a5f64a7c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b09649fdc609c79ea5acb9668636c7d8a5f64a7c", "patch": "@@ -1,3 +1,15 @@\n+2017-06-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/plugin/diagnostic-test-show-locus-bw.c\n+\t(test_mutually_exclusive_suggestions): New test function.\n+\t* gcc.dg/plugin/diagnostic-test-show-locus-generate-patch.c\n+\t(test_mutually_exclusive_suggestions): New test function.\n+\t* gcc.dg/plugin/diagnostic-test-show-locus-parseable-fixits.c\n+\t(test_mutually_exclusive_suggestions): New test function.\n+\t* gcc.dg/plugin/diagnostic_plugin_test_show_locus.c\n+\t(test_show_locus): Add special-case for\n+\t\"test_mutually_exclusive_suggestions\".\n+\n 2017-06-09  Ian Lance Taylor  <iant@golang.org>\n \n \t* gcc.dg/tree-prof/split-1.c: New test."}, {"sha": "100fa380cd70df22ae4e9d5a715f4102f5758e22", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-show-locus-bw.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b09649fdc609c79ea5acb9668636c7d8a5f64a7c/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-bw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b09649fdc609c79ea5acb9668636c7d8a5f64a7c/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-bw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-bw.c?ref=b09649fdc609c79ea5acb9668636c7d8a5f64a7c", "patch": "@@ -269,3 +269,23 @@ void test_fixit_insert_newline (void)\n    { dg-end-multiline-output \"\" } */\n #endif\n }\n+\n+/* Unit test for mutually-exclusive suggestions.  */\n+\n+void test_mutually_exclusive_suggestions (void)\n+{\n+#if 0\n+  original; /* { dg-warning \"warning 1\" } */\n+/* { dg-warning \"warning 2\" \"\" { target *-*-* } .-1 } */\n+/* { dg-begin-multiline-output \"\" }\n+   original;\n+   ^~~~~~~~\n+   replacement_1\n+   { dg-end-multiline-output \"\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   original;\n+   ^~~~~~~~\n+   replacement_2\n+   { dg-end-multiline-output \"\" } */\n+#endif\n+}"}, {"sha": "f1963dd20c1e3a8925461f3eb81f62fc23b5ea1d", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-show-locus-generate-patch.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b09649fdc609c79ea5acb9668636c7d8a5f64a7c/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-generate-patch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b09649fdc609c79ea5acb9668636c7d8a5f64a7c/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-generate-patch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-generate-patch.c?ref=b09649fdc609c79ea5acb9668636c7d8a5f64a7c", "patch": "@@ -51,6 +51,19 @@ void test_fixit_insert_newline (void)\n #endif\n }\n \n+/* Unit test for mutually-exclusive suggestions.  */\n+\n+void test_mutually_exclusive_suggestions (void)\n+{\n+#if 0\n+  original; /* { dg-warning \"warning 1\" } */\n+/* { dg-warning \"warning 2\" \"\" { target *-*-* } .-1 } */\n+/* We should not print the mutually-incompatible fix-it hints within\n+   the generated patch; they are not listed in the big expected\n+   multiline output below.  */\n+#endif\n+}\n+\n /* Verify the output from -fdiagnostics-generate-patch.\n    We expect a header, containing the filename.  This is the absolute path,\n    so we can only capture it via regexps.  */"}, {"sha": "16162baeb7ec60cecd093f1508477e3ec0418842", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-show-locus-parseable-fixits.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b09649fdc609c79ea5acb9668636c7d8a5f64a7c/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-parseable-fixits.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b09649fdc609c79ea5acb9668636c7d8a5f64a7c/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-parseable-fixits.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-parseable-fixits.c?ref=b09649fdc609c79ea5acb9668636c7d8a5f64a7c", "patch": "@@ -55,3 +55,17 @@ void test_fixit_insert_newline (void)\n /* { dg-regexp \"fix-it:.*\\\\{52:1-52:1\\\\}:.*\\\\n\" } */\n #endif\n }\n+\n+/* Unit test for mutually-exclusive suggestions.  */\n+\n+void test_mutually_exclusive_suggestions (void)\n+{\n+#if 0\n+  original; /* { dg-warning \"warning 1\" } */\n+/* { dg-warning \"warning 2\" \"\" { target *-*-* } .-1 } */\n+/* We should print the mutually-incompatible fix-it hints within\n+   -fdiagnostics-parseable-fixits; verify that they are printed.  */\n+/* { dg-regexp \"fix-it:.*\\\\{64:3-64:11}:.*\\\\n\" } */\n+/* { dg-regexp \"fix-it:.*\\\\{64:3-64:11}:.*\\\\n\" } */\n+#endif\n+}"}, {"sha": "0a8eeba1846d7fa1ae3961867915e98abe547c26", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic_plugin_test_show_locus.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b09649fdc609c79ea5acb9668636c7d8a5f64a7c/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b09649fdc609c79ea5acb9668636c7d8a5f64a7c/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c?ref=b09649fdc609c79ea5acb9668636c7d8a5f64a7c", "patch": "@@ -306,6 +306,30 @@ test_show_locus (function *fun)\n       warning_at_rich_loc (&richloc, 0, \"example of a replacement hint\");\n     }\n \n+  if (0 == strcmp (fnname, \"test_mutually_exclusive_suggestions\"))\n+    {\n+      const int line = fnstart_line + 2;\n+      location_t start = get_loc (line, 2);\n+      location_t finish = get_loc (line, 9);\n+      source_range src_range;\n+      src_range.m_start = start;\n+      src_range.m_finish = finish;\n+\n+      {\n+\trich_location richloc (line_table, make_location (start, start, finish));\n+\trichloc.add_fixit_replace (src_range, \"replacement_1\");\n+\trichloc.fixits_cannot_be_auto_applied ();\n+\twarning_at_rich_loc (&richloc, 0, \"warning 1\");\n+      }\n+\n+      {\n+\trich_location richloc (line_table, make_location (start, start, finish));\n+\trichloc.add_fixit_replace (src_range, \"replacement_2\");\n+\trichloc.fixits_cannot_be_auto_applied ();\n+\twarning_at_rich_loc (&richloc, 0, \"warning 2\");\n+      }\n+    }  \n+\n   /* Example of two carets where both carets appear to have an off-by-one\n      error appearing one column early.\n      Seen with gfortran.dg/associate_5.f03."}, {"sha": "13a33c302f633f3e8e90344eebaf5f7fe1e1681c", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b09649fdc609c79ea5acb9668636c7d8a5f64a7c/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b09649fdc609c79ea5acb9668636c7d8a5f64a7c/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=b09649fdc609c79ea5acb9668636c7d8a5f64a7c", "patch": "@@ -1,3 +1,11 @@\n+2017-06-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* include/line-map.h\n+\t(rich_location::fixits_cannot_be_auto_applied): New method.\n+\t(rich_location::fixits_can_be_auto_applied_p): New accessor.\n+\t(rich_location::m_fixits_cannot_be_auto_applied): New field.\n+\t* line-map.c (rich_location::rich_location): Initialize new field.\n+\n 2017-06-05  David Malcolm  <dmalcolm@redhat.com>\n \n \t* include/cpplib.h (struct cpp_callbacks): Add \"comment\""}, {"sha": "be3041df2bec1df50edc45a99b5f995b87fad696", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b09649fdc609c79ea5acb9668636c7d8a5f64a7c/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b09649fdc609c79ea5acb9668636c7d8a5f64a7c/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=b09649fdc609c79ea5acb9668636c7d8a5f64a7c", "patch": "@@ -1663,6 +1663,27 @@ class rich_location\n   fixit_hint *get_last_fixit_hint () const;\n   bool seen_impossible_fixit_p () const { return m_seen_impossible_fixit; }\n \n+  /* Set this if the fix-it hints are not suitable to be\n+     automatically applied.\n+\n+     For example, if you are suggesting more than one\n+     mutually exclusive solution to a problem, then\n+     it doesn't make sense to apply all of the solutions;\n+     manual intervention is required.\n+\n+     If set, then the fix-it hints in the rich_location will\n+     be printed, but will not be added to generated patches,\n+     or affect the modified version of the file.  */\n+  void fixits_cannot_be_auto_applied ()\n+  {\n+    m_fixits_cannot_be_auto_applied = true;\n+  }\n+\n+  bool fixits_can_be_auto_applied_p () const\n+  {\n+    return !m_fixits_cannot_be_auto_applied;\n+  }\n+\n private:\n   bool reject_impossible_fixit (source_location where);\n   void stop_supporting_fixits ();\n@@ -1686,6 +1707,7 @@ class rich_location\n   semi_embedded_vec <fixit_hint *, MAX_STATIC_FIXIT_HINTS> m_fixit_hints;\n \n   bool m_seen_impossible_fixit;\n+  bool m_fixits_cannot_be_auto_applied;\n };\n \n /* A fix-it hint: a suggested insertion, replacement, or deletion of text."}, {"sha": "5caaf6b2d68472c29a680ee1dfe7d3455a44910c", "filename": "libcpp/line-map.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b09649fdc609c79ea5acb9668636c7d8a5f64a7c/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b09649fdc609c79ea5acb9668636c7d8a5f64a7c/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=b09649fdc609c79ea5acb9668636c7d8a5f64a7c", "patch": "@@ -2012,7 +2012,8 @@ rich_location::rich_location (line_maps *set, source_location loc) :\n   m_column_override (0),\n   m_have_expanded_location (false),\n   m_fixit_hints (),\n-  m_seen_impossible_fixit (false)\n+  m_seen_impossible_fixit (false),\n+  m_fixits_cannot_be_auto_applied (false)\n {\n   add_range (loc, true);\n }"}]}