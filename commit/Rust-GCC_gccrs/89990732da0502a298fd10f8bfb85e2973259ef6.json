{"sha": "89990732da0502a298fd10f8bfb85e2973259ef6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk5OTA3MzJkYTA1MDJhMjk4ZmQxMGY4YmZiODVlMjk3MzI1OWVmNg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2016-11-21T17:15:54Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2016-11-21T17:15:54Z"}, "message": "Enable -fprintf-return-value by default.  Tested on powerpc64le and x86.\n\ngcc/c-family/ChangeLog:\n\n\t* c.opt (-fprintf-return-value): Enable by default.\n\ngcc/ChangeLog:\n\n\t* doc/invoke.texi (-fprintf-return-value): Document that option\n\tis enabled by default.\n\nFrom-SVN: r242674", "tree": {"sha": "15ec3f07505e52dec9c26a060a43fc171ee971dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15ec3f07505e52dec9c26a060a43fc171ee971dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89990732da0502a298fd10f8bfb85e2973259ef6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89990732da0502a298fd10f8bfb85e2973259ef6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89990732da0502a298fd10f8bfb85e2973259ef6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89990732da0502a298fd10f8bfb85e2973259ef6/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9636feef4d6ade39ba9682ed7f7826d2cf31bcb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9636feef4d6ade39ba9682ed7f7826d2cf31bcb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9636feef4d6ade39ba9682ed7f7826d2cf31bcb9"}], "stats": {"total": 43, "additions": 27, "deletions": 16}, "files": [{"sha": "543d38b5e242abd318ec41a23d977b45ad931be3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89990732da0502a298fd10f8bfb85e2973259ef6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89990732da0502a298fd10f8bfb85e2973259ef6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89990732da0502a298fd10f8bfb85e2973259ef6", "patch": "@@ -1,3 +1,8 @@\n+2016-11-21  Martin Sebor  <msebor@redhat.com>\n+\n+\t* doc/invoke.texi (-fprintf-return-value): Document that option\n+\tis enabled by default.\n+\n 2016-11-21  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/avr-c.c (avr_register_target_pragmas): Use C++"}, {"sha": "f2ea179761e9d33bbf7ffb39280353b4f3e4eeac", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89990732da0502a298fd10f8bfb85e2973259ef6/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89990732da0502a298fd10f8bfb85e2973259ef6/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=89990732da0502a298fd10f8bfb85e2973259ef6", "patch": "@@ -1,3 +1,7 @@\n+2016-11-21  Martin Sebor  <msebor@redhat.com>\n+\n+\t* c.opt (-fprintf-return-value): Enable by default.\n+\n 2016-11-21  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR c++/71973"}, {"sha": "c61fab8d2bc0af0d14aca78e8da285b80b9069aa", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89990732da0502a298fd10f8bfb85e2973259ef6/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89990732da0502a298fd10f8bfb85e2973259ef6/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=89990732da0502a298fd10f8bfb85e2973259ef6", "patch": "@@ -1554,7 +1554,7 @@ C++ ObjC++ Var(flag_pretty_templates) Init(1)\n -fno-pretty-templates Do not pretty-print template specializations as the template signature followed by the arguments.\n \n fprintf-return-value\n-C ObjC C++ ObjC++ LTO Optimization Var(flag_printf_return_value) Init(0)\n+C ObjC C++ ObjC++ LTO Optimization Var(flag_printf_return_value) Init(1)\n Treat known sprintf return values as constants.\n \n freplace-objc-classes"}, {"sha": "e02665318b1cf35c2c71f9cfc12e14687adfa4ed", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89990732da0502a298fd10f8bfb85e2973259ef6/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89990732da0502a298fd10f8bfb85e2973259ef6/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=89990732da0502a298fd10f8bfb85e2973259ef6", "patch": "@@ -381,11 +381,12 @@ Objective-C and Objective-C++ Dialects}.\n -fmove-loop-invariants -fno-branch-count-reg @gol\n -fno-defer-pop -fno-fp-int-builtin-inexact -fno-function-cse @gol\n -fno-guess-branch-probability -fno-inline -fno-math-errno -fno-peephole @gol\n--fno-peephole2 -fno-sched-interblock -fno-sched-spec -fno-signed-zeros @gol\n+-fno-peephole2 -fno-printf-return-value -fno-sched-interblock @gol\n+-fno-sched-spec -fno-signed-zeros @gol\n -fno-toplevel-reorder -fno-trapping-math -fno-zero-initialized-in-bss @gol\n -fomit-frame-pointer -foptimize-sibling-calls @gol\n -fpartial-inlining -fpeel-loops -fpredictive-commoning @gol\n--fprefetch-loop-arrays -fprintf-return-value @gol\n+-fprefetch-loop-arrays @gol\n -fprofile-correction @gol\n -fprofile-use -fprofile-use=@var{path} -fprofile-values @gol\n -fprofile-reorder-functions @gol\n@@ -8274,18 +8275,19 @@ dependent on the structure of loops within the source code.\n \n Disabled at level @option{-Os}.\n \n-@item -fprintf-return-value\n-@opindex fprintf-return-value\n-Substitute constants for known return value of formatted output functions\n-such as @code{sprintf}, @code{snprintf}, @code{vsprintf}, and @code{vsnprintf}\n-(but not @code{printf} of @code{fprintf}).  This transformation allows GCC\n-to optimize or even eliminate branches based on the known return value of\n-these functions called with arguments that are either constant, or whose\n-values are known to be in a range that makes determining the exact return\n-value possible.  For example, both the branch and the body of the @code{if}\n-statement (but not the call to @code{snprint}) can be optimized away when\n-@code{i} is a 32-bit or smaller integer because the return value is guaranteed\n-to be at most 8.\n+@item -fno-printf-return-value\n+@opindex fno-printf-return-value\n+Do not substitute constants for known return value of formatted output\n+functions such as @code{sprintf}, @code{snprintf}, @code{vsprintf}, and\n+@code{vsnprintf} (but not @code{printf} of @code{fprintf}).  This\n+transformation allows GCC to optimize or even eliminate branches based\n+on the known return value of these functions called with arguments that\n+are either constant, or whose values are known to be in a range that\n+makes determining the exact return value possible.  For example, when\n+@option{-fprintf-return-value} is in effect, both the branch and the\n+body of the @code{if} statement (but not the call to @code{snprint})\n+can be optimized away when @code{i} is a 32-bit or smaller integer\n+because the return value is guaranteed to be at most 8.\n \n @smallexample\n char buf[9];\n@@ -8296,7 +8298,7 @@ if (snprintf (buf, \"%08x\", i) >= sizeof buf)\n The @option{-fprintf-return-value} option relies on other optimizations\n and yields best results with @option{-O2}.  It works in tandem with the\n @option{-Wformat-length} option.  The @option{-fprintf-return-value}\n-option is disabled by default.\n+option is enabled by default.\n \n @item -fno-peephole\n @itemx -fno-peephole2"}]}