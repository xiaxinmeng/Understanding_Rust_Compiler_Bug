{"sha": "8d1f5f99484f2b79439b86dca7123eb0260776d7", "node_id": "C_kwDOANBUbNoAKDhkMWY1Zjk5NDg0ZjJiNzk0MzliODZkY2E3MTIzZWIwMjYwNzc2ZDc", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-06-02T14:46:57Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-06-02T14:50:06Z"}, "message": "Add new mappings for items within a module\n\nThis patch adds two new interfaces to the mappings class.\n\n  - Lookup the child items within a module\n  - Lookup the parent module id from the child item id\n\nEach of these API's are going to be required so that we can resolve two new\ntypes of path segment:\n\n  super::foo::bar\n\nWhere we need to be able to lookup the super module node id from the\ncurrent scope node id. To then lookup the children within that scope. The\nother path is simpler such as: crate::foo::bar. Where we lookup the items\nwithin the current Crate NodeId and follow on as normal.\n\nAddresses #1227", "tree": {"sha": "5a46117460f55955071a47c3a3b381f1fdc21218", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a46117460f55955071a47c3a3b381f1fdc21218"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d1f5f99484f2b79439b86dca7123eb0260776d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d1f5f99484f2b79439b86dca7123eb0260776d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d1f5f99484f2b79439b86dca7123eb0260776d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d1f5f99484f2b79439b86dca7123eb0260776d7/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0866a4fbc6e7f70cd3708467419c60af8c6104f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0866a4fbc6e7f70cd3708467419c60af8c6104f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0866a4fbc6e7f70cd3708467419c60af8c6104f2"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "8d4e12b0616d747991d98bf17004dd28ddbc0d39", "filename": "gcc/rust/resolve/rust-ast-resolve-toplevel.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1f5f99484f2b79439b86dca7123eb0260776d7/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1f5f99484f2b79439b86dca7123eb0260776d7/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h?ref=8d1f5f99484f2b79439b86dca7123eb0260776d7", "patch": "@@ -41,6 +41,8 @@ class ResolveTopLevel : public ResolverBase\n \n     ResolveTopLevel resolver (prefix, canonical_prefix, current_module);\n     item->accept_vis (resolver);\n+    resolver.mappings->insert_child_item_to_parent_module_mapping (\n+      item->get_node_id (), current_module);\n   };\n \n   void visit (AST::Module &module) override\n@@ -62,6 +64,7 @@ class ResolveTopLevel : public ResolverBase\n \t\t\t\t     Definition{module.get_node_id (),\n \t\t\t\t\t\tmodule.get_node_id ()});\n \n+    mappings->insert_module_child_item (current_module, mod);\n     mappings->insert_module_child (current_module, module.get_node_id ());\n \n     for (auto &item : module.get_items ())\n@@ -86,6 +89,7 @@ class ResolveTopLevel : public ResolverBase\n \trust_error_at (r, \"redefined multiple times\");\n       });\n \n+    mappings->insert_module_child_item (current_module, talias);\n     mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t     alias.get_node_id (), cpath);\n   }\n@@ -105,6 +109,7 @@ class ResolveTopLevel : public ResolverBase\n \trust_error_at (r, \"redefined multiple times\");\n       });\n \n+    mappings->insert_module_child_item (current_module, decl);\n     mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t     struct_decl.get_node_id (), cpath);\n   }\n@@ -127,6 +132,7 @@ class ResolveTopLevel : public ResolverBase\n     for (auto &variant : enum_decl.get_variants ())\n       ResolveTopLevel::go (variant.get (), path, cpath, current_module);\n \n+    mappings->insert_module_child_item (current_module, decl);\n     mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t     enum_decl.get_node_id (), cpath);\n   }\n@@ -146,6 +152,7 @@ class ResolveTopLevel : public ResolverBase\n \trust_error_at (r, \"redefined multiple times\");\n       });\n \n+    mappings->insert_module_child_item (current_module, decl);\n     mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t     item.get_node_id (), cpath);\n   }\n@@ -222,6 +229,7 @@ class ResolveTopLevel : public ResolverBase\n \trust_error_at (r, \"redefined multiple times\");\n       });\n \n+    mappings->insert_module_child_item (current_module, decl);\n     mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t     struct_decl.get_node_id (), cpath);\n   }\n@@ -241,6 +249,7 @@ class ResolveTopLevel : public ResolverBase\n \trust_error_at (r, \"redefined multiple times\");\n       });\n \n+    mappings->insert_module_child_item (current_module, decl);\n     mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t     union_decl.get_node_id (), cpath);\n   }\n@@ -264,6 +273,7 @@ class ResolveTopLevel : public ResolverBase\n \t\t\t\t\t\tvar.get_node_id ()});\n     resolver->mark_decl_mutability (var.get_node_id (), var.is_mutable ());\n \n+    mappings->insert_module_child_item (current_module, decl);\n     mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t     var.get_node_id (), cpath);\n   }\n@@ -285,6 +295,7 @@ class ResolveTopLevel : public ResolverBase\n \t\t\t\t     Definition{constant.get_node_id (),\n \t\t\t\t\t\tconstant.get_node_id ()});\n \n+    mappings->insert_module_child_item (current_module, decl);\n     mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t     constant.get_node_id (), cpath);\n   }\n@@ -314,6 +325,7 @@ class ResolveTopLevel : public ResolverBase\n \t\t\t\t\tfunction.get_node_id ());\n       }\n \n+    mappings->insert_module_child_item (current_module, decl);\n     mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t     function.get_node_id (), cpath);\n   }\n@@ -391,6 +403,7 @@ class ResolveTopLevel : public ResolverBase\n     for (auto &item : trait.get_trait_items ())\n       ResolveTopLevelTraitItems::go (item.get (), path, cpath);\n \n+    mappings->insert_module_child_item (current_module, decl);\n     mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t     trait.get_node_id (), cpath);\n   }"}, {"sha": "f9932a4705ed096c3e930e3d1c4d12e4cd26e51f", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1f5f99484f2b79439b86dca7123eb0260776d7/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1f5f99484f2b79439b86dca7123eb0260776d7/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=8d1f5f99484f2b79439b86dca7123eb0260776d7", "patch": "@@ -884,5 +884,46 @@ Mappings::lookup_module_children (NodeId module)\n   return Optional<std::vector<NodeId> &>::some (it->second);\n }\n \n+void\n+Mappings::insert_module_child_item (NodeId module,\n+\t\t\t\t    Resolver::CanonicalPath child)\n+{\n+  rust_assert (!child.is_empty ());\n+  rust_assert (child.get_node_id () != UNKNOWN_NODEID);\n+\n+  auto it = module_child_items.find (module);\n+  if (it == module_child_items.end ())\n+    module_child_items.insert ({module, {child}});\n+  else\n+    it->second.emplace_back (child);\n+}\n+\n+Optional<std::vector<Resolver::CanonicalPath> &>\n+Mappings::lookup_module_chidren_items (NodeId module)\n+{\n+  auto it = module_child_items.find (module);\n+  if (it == module_child_items.end ())\n+    return Optional<std::vector<Resolver::CanonicalPath> &>::none ();\n+\n+  return Optional<std::vector<Resolver::CanonicalPath> &>::some (it->second);\n+}\n+\n+void\n+Mappings::insert_child_item_to_parent_module_mapping (NodeId child_item,\n+\t\t\t\t\t\t      NodeId parent_module)\n+{\n+  child_to_parent_module_map.insert ({child_item, parent_module});\n+}\n+\n+Optional<NodeId>\n+Mappings::lookup_parent_module (NodeId child_item)\n+{\n+  auto it = child_to_parent_module_map.find (child_item);\n+  if (it == child_to_parent_module_map.end ())\n+    return Optional<NodeId>::none ();\n+\n+  return Optional<NodeId>::some (it->second);\n+}\n+\n } // namespace Analysis\n } // namespace Rust"}, {"sha": "a48d4beace7bae569928252865a1f2aa87cba574", "filename": "gcc/rust/util/rust-hir-map.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1f5f99484f2b79439b86dca7123eb0260776d7/gcc%2Frust%2Futil%2Frust-hir-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1f5f99484f2b79439b86dca7123eb0260776d7/gcc%2Frust%2Futil%2Frust-hir-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.h?ref=8d1f5f99484f2b79439b86dca7123eb0260776d7", "patch": "@@ -326,6 +326,14 @@ class Mappings\n   void insert_module_child (NodeId module, NodeId child);\n   Optional<std::vector<NodeId> &> lookup_module_children (NodeId module);\n \n+  void insert_module_child_item (NodeId module, Resolver::CanonicalPath item);\n+  Optional<std::vector<Resolver::CanonicalPath> &>\n+  lookup_module_chidren_items (NodeId module);\n+\n+  void insert_child_item_to_parent_module_mapping (NodeId child_item,\n+\t\t\t\t\t\t   NodeId parent_module);\n+  Optional<NodeId> lookup_parent_module (NodeId child_item);\n+\n private:\n   Mappings ();\n \n@@ -396,6 +404,8 @@ class Mappings\n \n   // Maps each module's node id to a list of its children\n   std::map<NodeId, std::vector<NodeId>> module_child_map;\n+  std::map<NodeId, std::vector<Resolver::CanonicalPath>> module_child_items;\n+  std::map<NodeId, NodeId> child_to_parent_module_map;\n };\n \n } // namespace Analysis"}]}