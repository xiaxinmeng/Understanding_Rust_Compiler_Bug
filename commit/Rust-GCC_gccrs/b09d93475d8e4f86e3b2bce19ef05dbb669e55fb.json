{"sha": "b09d93475d8e4f86e3b2bce19ef05dbb669e55fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA5ZDkzNDc1ZDhlNGY4NmUzYjJiY2UxOWVmMDVkYmI2NjllNTVmYg==", "commit": {"author": {"name": "Alan Hayward", "email": "alan.hayward@arm.com", "date": "2015-11-20T14:20:24Z"}, "committer": {"name": "Alan Hayward", "email": "alahay01@gcc.gnu.org", "date": "2015-11-20T14:20:24Z"}, "message": "re PR tree-optimization/68413 (internal compiler error: in vect_transform_stmt)\n\n2015-11-20  Alan Hayward <alan.hayward@arm.com>\n\t\n\tPR tree-optimization/68413\n\t* tree-vect-loop.c (vect_analyze_scalar_cycles_1): Cache\n\tevolution base\n\t(vectorizable_reduction): Use cached base\n\nFrom-SVN: r230658", "tree": {"sha": "33776ebf3c7c995ca522d109f57e202a41944ca9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33776ebf3c7c995ca522d109f57e202a41944ca9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b09d93475d8e4f86e3b2bce19ef05dbb669e55fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b09d93475d8e4f86e3b2bce19ef05dbb669e55fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b09d93475d8e4f86e3b2bce19ef05dbb669e55fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b09d93475d8e4f86e3b2bce19ef05dbb669e55fb/comments", "author": {"login": "a74nh", "id": 4146708, "node_id": "MDQ6VXNlcjQxNDY3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a74nh", "html_url": "https://github.com/a74nh", "followers_url": "https://api.github.com/users/a74nh/followers", "following_url": "https://api.github.com/users/a74nh/following{/other_user}", "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}", "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions", "organizations_url": "https://api.github.com/users/a74nh/orgs", "repos_url": "https://api.github.com/users/a74nh/repos", "events_url": "https://api.github.com/users/a74nh/events{/privacy}", "received_events_url": "https://api.github.com/users/a74nh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0b78e62cff89045311459e512a43fc9010c61353", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b78e62cff89045311459e512a43fc9010c61353", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b78e62cff89045311459e512a43fc9010c61353"}], "stats": {"total": 56, "additions": 36, "deletions": 20}, "files": [{"sha": "b9beee772a7b44e55ee97311b75ec3cb2258e656", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b09d93475d8e4f86e3b2bce19ef05dbb669e55fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b09d93475d8e4f86e3b2bce19ef05dbb669e55fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b09d93475d8e4f86e3b2bce19ef05dbb669e55fb", "patch": "@@ -1,3 +1,10 @@\n+2015-11-20  Alan Hayward <alan.hayward@arm.com>\n+\n+\tPR tree-optimization/68413\n+\t* tree-vect-loop.c (vect_analyze_scalar_cycles_1): Cache\n+\tevolution base\n+\t(vectorizable_reduction): Use cached base\n+\n 2015-11-20  Tom de Vries  <tom@codesourcery.com>\n \n \t* tree-parloops.c (build_new_reduction): Fix trailing whitespace in"}, {"sha": "41e50319f0033eb4ecabe9345744a1e2113e1002", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b09d93475d8e4f86e3b2bce19ef05dbb669e55fb/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b09d93475d8e4f86e3b2bce19ef05dbb669e55fb/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=b09d93475d8e4f86e3b2bce19ef05dbb669e55fb", "patch": "@@ -815,6 +815,8 @@ vect_analyze_scalar_cycles_1 (loop_vec_info loop_vinfo, struct loop *loop)\n \t      dump_generic_expr (MSG_NOTE, TDF_SLIM, access_fn);\n               dump_printf (MSG_NOTE, \"\\n\");\n \t    }\n+\t  STMT_VINFO_LOOP_PHI_EVOLUTION_BASE_UNCHANGED (stmt_vinfo)\n+\t    = initial_condition_in_loop_num (access_fn, loop->num);\n \t  STMT_VINFO_LOOP_PHI_EVOLUTION_PART (stmt_vinfo)\n \t    = evolution_part_in_loop_num (access_fn, loop->num);\n \t}\n@@ -828,6 +830,8 @@ vect_analyze_scalar_cycles_1 (loop_vec_info loop_vinfo, struct loop *loop)\n \t  continue;\n \t}\n \n+      gcc_assert (STMT_VINFO_LOOP_PHI_EVOLUTION_BASE_UNCHANGED (stmt_vinfo)\n+\t\t  != NULL_TREE);\n       gcc_assert (STMT_VINFO_LOOP_PHI_EVOLUTION_PART (stmt_vinfo) != NULL_TREE);\n \n       if (dump_enabled_p ())\n@@ -5128,7 +5132,7 @@ static bool\n is_nonwrapping_integer_induction (gimple *stmt, struct loop *loop)\n {\n   stmt_vec_info stmt_vinfo = vinfo_for_stmt (stmt);\n-  tree base = PHI_ARG_DEF_FROM_EDGE (stmt, loop_preheader_edge (loop));\n+  tree base = STMT_VINFO_LOOP_PHI_EVOLUTION_BASE_UNCHANGED (stmt_vinfo);\n   tree step = STMT_VINFO_LOOP_PHI_EVOLUTION_PART (stmt_vinfo);\n   tree lhs_type = TREE_TYPE (gimple_phi_result (stmt));\n   widest_int ni, max_loop_value, lhs_max;\n@@ -5263,7 +5267,7 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n   tree def0, def1, tem, op0, op1 = NULL_TREE;\n   bool first_p = true;\n   tree cr_index_scalar_type = NULL_TREE, cr_index_vector_type = NULL_TREE;\n-  bool cond_expr_is_nonwrapping_integer_induction = false;\n+  gimple *cond_expr_induction_def_stmt = NULL;\n \n   /* In case of reduction chain we switch to the first stmt in the chain, but\n      we don't update STMT_INFO, since only the last stmt is marked as reduction\n@@ -5413,15 +5417,8 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n           reduc_index = i;\n         }\n \n-      if (i == 1 && code == COND_EXPR && dt == vect_induction_def\n-\t  && is_nonwrapping_integer_induction (def_stmt, loop))\n-\t{\n-\t  if (dump_enabled_p ())\n-\t    dump_printf_loc (MSG_NOTE, vect_location,\n-\t\t\t     \"condition expression based on integer \"\n-\t\t\t     \"induction.\\n\");\n-\t  cond_expr_is_nonwrapping_integer_induction = true;\n-\t}\n+      if (i == 1 && code == COND_EXPR && dt == vect_induction_def)\n+\tcond_expr_induction_def_stmt = def_stmt;\n     }\n \n   is_simple_use = vect_is_simple_use (ops[reduc_index], loop_vinfo,\n@@ -5448,14 +5445,23 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n       return false;\n     }\n \n-  gimple *tmp = vect_is_simple_reduction\n-\t\t  (loop_vinfo, reduc_def_stmt,\n-\t\t  !nested_cycle, &dummy, false,\n-\t\t  &STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info));\n+  enum vect_reduction_type v_reduc_type;\n+  gimple *tmp = vect_is_simple_reduction (loop_vinfo, reduc_def_stmt,\n+\t\t\t\t\t  !nested_cycle, &dummy, false,\n+\t\t\t\t\t  &v_reduc_type);\n \n-  if (cond_expr_is_nonwrapping_integer_induction\n-      && STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info) == COND_REDUCTION)\n-    STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info) = INTEGER_INDUC_COND_REDUCTION;\n+  /* If we have a condition reduction, see if we can simplify it further.  */\n+  if (v_reduc_type == COND_REDUCTION\n+      && cond_expr_induction_def_stmt != NULL\n+      && is_nonwrapping_integer_induction (cond_expr_induction_def_stmt, loop))\n+    {\n+      if (dump_enabled_p ())\n+\tdump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t \"condition expression based on integer induction.\\n\");\n+      STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info) = INTEGER_INDUC_COND_REDUCTION;\n+    }\n+  else\n+   STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info) = v_reduc_type;\n \n   if (orig_stmt)\n     gcc_assert (tmp == orig_stmt"}, {"sha": "327f08d79ed55c6394a57a4d6258c5c5a01c1fac", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b09d93475d8e4f86e3b2bce19ef05dbb669e55fb/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b09d93475d8e4f86e3b2bce19ef05dbb669e55fb/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=b09d93475d8e4f86e3b2bce19ef05dbb669e55fb", "patch": "@@ -518,11 +518,13 @@ typedef struct _stmt_vec_info {\n   tree dr_step;\n   tree dr_aligned_to;\n \n-  /* For loop PHI nodes, the evolution part of it.  This makes sure\n+  /* For loop PHI nodes, the base and evolution part of it.  This makes sure\n      this information is still available in vect_update_ivs_after_vectorizer\n      where we may not be able to re-analyze the PHI nodes evolution as\n      peeling for the prologue loop can make it unanalyzable.  The evolution\n-     part is still correct though.  */\n+     part is still correct after peeling, but the base may have changed from\n+     the version here.  */\n+  tree loop_phi_evolution_base_unchanged;\n   tree loop_phi_evolution_part;\n \n   /* Used for various bookkeeping purposes, generally holding a pointer to\n@@ -645,6 +647,7 @@ STMT_VINFO_BB_VINFO (stmt_vec_info stmt_vinfo)\n #define STMT_VINFO_GROUP_GAP(S)            (S)->gap\n #define STMT_VINFO_GROUP_SAME_DR_STMT(S)   (S)->same_dr_stmt\n #define STMT_VINFO_GROUPED_ACCESS(S)      ((S)->first_element != NULL && (S)->data_ref_info)\n+#define STMT_VINFO_LOOP_PHI_EVOLUTION_BASE_UNCHANGED(S) (S)->loop_phi_evolution_base_unchanged\n #define STMT_VINFO_LOOP_PHI_EVOLUTION_PART(S) (S)->loop_phi_evolution_part\n #define STMT_VINFO_MIN_NEG_DIST(S)\t(S)->min_neg_dist\n "}]}