{"sha": "f50eecba1389ff9da5112b2aaeb93c6ebaa38afc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjUwZWVjYmExMzg5ZmY5ZGE1MTEyYjJhYWViOTNjNmViYWEzOGFmYw==", "commit": {"author": {"name": "Varvara Rainchik", "email": "varvara.rainchik@intel.com", "date": "2014-12-10T13:42:20Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-12-10T13:42:20Z"}, "message": "config.h.in: Regenerate.\n\n\nlibgomp/\n        * config.h.in: Regenerate.\n        * configure: Regenerate.\n        * configure.ac: Add GCC_CHECK_EMUTLS.\n        * libgomp.h: Add check for USE_EMUTLS: this case\n        is equal to HAVE_TLS.\n        * team.c: Likewise.\n\nFrom-SVN: r218576", "tree": {"sha": "669b9c23b1f8d3be5e8f8ec8a4b43aaee66653da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/669b9c23b1f8d3be5e8f8ec8a4b43aaee66653da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f50eecba1389ff9da5112b2aaeb93c6ebaa38afc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f50eecba1389ff9da5112b2aaeb93c6ebaa38afc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f50eecba1389ff9da5112b2aaeb93c6ebaa38afc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f50eecba1389ff9da5112b2aaeb93c6ebaa38afc/comments", "author": null, "committer": null, "parents": [{"sha": "d0d7c3578223567be0795ac70f4c26e788fc2387", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0d7c3578223567be0795ac70f4c26e788fc2387", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0d7c3578223567be0795ac70f4c26e788fc2387"}], "stats": {"total": 54, "additions": 50, "deletions": 4}, "files": [{"sha": "acf45fb00af8dcb8f89afdc3c5542b815ca8d137", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f50eecba1389ff9da5112b2aaeb93c6ebaa38afc/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f50eecba1389ff9da5112b2aaeb93c6ebaa38afc/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=f50eecba1389ff9da5112b2aaeb93c6ebaa38afc", "patch": "@@ -1,3 +1,12 @@\n+2014-12-09  Varvara Rainchik  <varvara.rainchik@intel.com>\n+\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* configure.ac: Add GCC_CHECK_EMUTLS.\n+\t* libgomp.h: Add check for USE_EMUTLS: this case\n+\tis equal to HAVE_TLS.\n+\t* team.c: Likewise.\n+\n 2014-12-03  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* configure.tgt (x86_64-*-linux*): Tune -m32 multilib to generic."}, {"sha": "a5e27ca4eaf84d95514b45d7fa70bd2d4bcb9858", "filename": "libgomp/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f50eecba1389ff9da5112b2aaeb93c6ebaa38afc/libgomp%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f50eecba1389ff9da5112b2aaeb93c6ebaa38afc/libgomp%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig.h.in?ref=f50eecba1389ff9da5112b2aaeb93c6ebaa38afc", "patch": "@@ -79,6 +79,9 @@\n /* Define to 1 if the target supports thread-local storage. */\n #undef HAVE_TLS\n \n+/* Define to 1 if the target use emutls for thread-local storage. */\n+#undef USE_EMUTLS\n+\n /* Define to 1 if you have the <unistd.h> header file. */\n #undef HAVE_UNISTD_H\n "}, {"sha": "f5d6b6b57bad0b10a5a3d98987a984ebbe392ed9", "filename": "libgomp/configure", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f50eecba1389ff9da5112b2aaeb93c6ebaa38afc/libgomp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f50eecba1389ff9da5112b2aaeb93c6ebaa38afc/libgomp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure?ref=f50eecba1389ff9da5112b2aaeb93c6ebaa38afc", "patch": "@@ -15515,6 +15515,37 @@ $as_echo \"#define HAVE_TLS 1\" >>confdefs.h\n \n   fi\n \n+# See if we have emulated thread-local storage.\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether the thread-local storage support is from emutls\" >&5\n+$as_echo_n \"checking whether the thread-local storage support is from emutls... \" >&6; }\n+if test \"${gcc_cv_use_emutls+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+    gcc_cv_use_emutls=no\n+    echo '__thread int a; int b; int main() { return a = b; }' > conftest.c\n+    if { ac_try='${CC-cc} -Werror -S -o conftest.s conftest.c 1>&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }; then\n+      if grep __emutls_get_address conftest.s > /dev/null; then\n+\tgcc_cv_use_emutls=yes\n+      fi\n+    fi\n+    rm -f conftest.*\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_use_emutls\" >&5\n+$as_echo \"$gcc_cv_use_emutls\" >&6; }\n+  if test \"$gcc_cv_use_emutls\" = \"yes\" ; then\n+\n+$as_echo \"#define USE_EMUTLS 1\" >>confdefs.h\n+\n+  fi\n+\n # See what sort of export controls are available.\n \n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether the target supports hidden visibility\" >&5"}, {"sha": "16ec158a79e14d852c1f12ad1beef2ad0f61c6cf", "filename": "libgomp/configure.ac", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f50eecba1389ff9da5112b2aaeb93c6ebaa38afc/libgomp%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f50eecba1389ff9da5112b2aaeb93c6ebaa38afc/libgomp%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure.ac?ref=f50eecba1389ff9da5112b2aaeb93c6ebaa38afc", "patch": "@@ -245,6 +245,9 @@ fi\n # See if we support thread-local storage.\n GCC_CHECK_TLS\n \n+# See if we have emulated thread-local storage.\n+GCC_CHECK_EMUTLS\n+\n # See what sort of export controls are available.\n LIBGOMP_CHECK_ATTRIBUTE_VISIBILITY\n LIBGOMP_CHECK_ATTRIBUTE_DLLEXPORT"}, {"sha": "b694356f67edb6ae49818246873096ad1ad69719", "filename": "libgomp/libgomp.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f50eecba1389ff9da5112b2aaeb93c6ebaa38afc/libgomp%2Flibgomp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f50eecba1389ff9da5112b2aaeb93c6ebaa38afc/libgomp%2Flibgomp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.h?ref=f50eecba1389ff9da5112b2aaeb93c6ebaa38afc", "patch": "@@ -471,7 +471,7 @@ enum gomp_cancel_kind\n \n /* ... and here is that TLS data.  */\n \n-#ifdef HAVE_TLS\n+#if defined HAVE_TLS || defined USE_EMUTLS\n extern __thread struct gomp_thread gomp_tls_data;\n static inline struct gomp_thread *gomp_thread (void)\n {"}, {"sha": "594127ca13292c621c41da62972cb59ebcddf84e", "filename": "libgomp/team.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f50eecba1389ff9da5112b2aaeb93c6ebaa38afc/libgomp%2Fteam.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f50eecba1389ff9da5112b2aaeb93c6ebaa38afc/libgomp%2Fteam.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fteam.c?ref=f50eecba1389ff9da5112b2aaeb93c6ebaa38afc", "patch": "@@ -37,7 +37,7 @@ pthread_key_t gomp_thread_destructor;\n \n \n /* This is the libgomp per-thread data structure.  */\n-#ifdef HAVE_TLS\n+#if defined HAVE_TLS || defined USE_EMUTLS\n __thread struct gomp_thread gomp_tls_data;\n #else\n pthread_key_t gomp_tls_key;\n@@ -70,7 +70,7 @@ gomp_thread_start (void *xdata)\n   void (*local_fn) (void *);\n   void *local_data;\n \n-#ifdef HAVE_TLS\n+#if defined HAVE_TLS || defined USE_EMUTLS\n   thr = &gomp_tls_data;\n #else\n   struct gomp_thread local_thr;\n@@ -916,7 +916,7 @@ gomp_team_end (void)\n static void __attribute__((constructor))\n initialize_team (void)\n {\n-#ifndef HAVE_TLS\n+#if !defined HAVE_TLS && !defined USE_EMUTLS\n   static struct gomp_thread initial_thread_tls_data;\n \n   pthread_key_create (&gomp_tls_key, NULL);"}]}