{"sha": "a7023245ceb1d6e7cae3235cabdc5daa81b1db5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTcwMjMyNDVjZWIxZDZlN2NhZTMyMzVjYWJkYzVkYWE4MWIxZGI1ZQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-07-25T19:01:33Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-07-25T19:01:33Z"}, "message": "toplev.c (pipe_closed): Delete.\n\n\t* toplev.c (pipe_closed): Delete.\n\t(crash_signal): New.  Generate ICE for a fatal signal.\n\t(float_signal): Call crash_signal outside a float-handler\n\tblock, not abort.\n\t(main): Install crash_signal as handler for core-dumping signals.\n\n\t* cp/decl.c: Remove all signal handling code, now done in toplev.c.\n\nFrom-SVN: r35247", "tree": {"sha": "6ef0f46d2a62f205d691791478a1f32cb9d5610a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ef0f46d2a62f205d691791478a1f32cb9d5610a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7023245ceb1d6e7cae3235cabdc5daa81b1db5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7023245ceb1d6e7cae3235cabdc5daa81b1db5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7023245ceb1d6e7cae3235cabdc5daa81b1db5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7023245ceb1d6e7cae3235cabdc5daa81b1db5e/comments", "author": null, "committer": null, "parents": [{"sha": "cccf3bdc5c87885124ff12b812e2819a5bd574e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cccf3bdc5c87885124ff12b812e2819a5bd574e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cccf3bdc5c87885124ff12b812e2819a5bd574e4"}], "stats": {"total": 102, "additions": 39, "deletions": 63}, "files": [{"sha": "8c767e1f84ef9ccdb9b3b0fdda20fe29a65b032d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7023245ceb1d6e7cae3235cabdc5daa81b1db5e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7023245ceb1d6e7cae3235cabdc5daa81b1db5e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7023245ceb1d6e7cae3235cabdc5daa81b1db5e", "patch": "@@ -1,3 +1,11 @@\n+2000-07-25  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* toplev.c (pipe_closed): Delete.\n+\t(crash_signal): New.  Generate ICE for a fatal signal.\n+\t(float_signal): Call crash_signal outside a float-handler\n+\tblock, not abort.\n+\t(main): Install crash_signal as handler for core-dumping signals.\n+\n 2000-07-25  David Edelsohn  <edelsohn@gnu.org>\n \n \t* rs6000.c (print_operand, case 'T'): New case."}, {"sha": "a221131cf53751b2617ca88f917e4d0959e9bd14", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7023245ceb1d6e7cae3235cabdc5daa81b1db5e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7023245ceb1d6e7cae3235cabdc5daa81b1db5e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a7023245ceb1d6e7cae3235cabdc5daa81b1db5e", "patch": "@@ -1,3 +1,7 @@\n+2000-07-25  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* decl.c: Remove all signal handling code, now done in toplev.c.\n+\n 2000-07-23  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl.c (make_rtl_for_nonlocal_decl): Rework."}, {"sha": "bd64e2ea441e80a35559d397e20e8f916b2514cd", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7023245ceb1d6e7cae3235cabdc5daa81b1db5e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7023245ceb1d6e7cae3235cabdc5daa81b1db5e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=a7023245ceb1d6e7cae3235cabdc5daa81b1db5e", "patch": "@@ -37,7 +37,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"cp-tree.h\"\n #include \"decl.h\"\n #include \"lex.h\"\n-#include <signal.h>\n #include \"defaults.h\"\n #include \"output.h\"\n #include \"except.h\"\n@@ -105,7 +104,6 @@ static void suspend_binding_level PARAMS ((void));\n static void resume_binding_level PARAMS ((struct binding_level *));\n static struct binding_level *make_binding_level PARAMS ((void));\n static void declare_namespace_level PARAMS ((void));\n-static void signal_catch PARAMS ((int)) ATTRIBUTE_NORETURN;\n static int decl_jump_unsafe PARAMS ((tree));\n static void storedecls PARAMS ((tree));\n static void require_complete_types_for_parms PARAMS ((tree));\n@@ -6096,36 +6094,6 @@ end_only_namespace_names ()\n   only_namespace_names = 0;\n }\n \f\n-/* Arrange for the user to get a source line number, even when the\n-   compiler is going down in flames, so that she at least has a\n-   chance of working around problems in the compiler.  We used to\n-   call error(), but that let the segmentation fault continue\n-   through; now, it's much more passive by asking them to send the\n-   maintainers mail about the problem.  */\n-\n-static void\n-signal_catch (sig)\n-     int sig;\n-{\n-  signal (SIGSEGV, SIG_DFL);\n-#ifdef SIGIOT\n-  signal (SIGIOT, SIG_DFL);\n-#endif\n-#ifdef SIGILL\n-  signal (SIGILL, SIG_DFL);\n-#endif\n-#ifdef SIGABRT\n-  signal (SIGABRT, SIG_DFL);\n-#endif\n-#ifdef SIGBUS\n-  signal (SIGBUS, SIG_DFL);\n-#endif\n-\n-  fatal (\"Internal error: %s\\n\\\n-Please submit a full bug report.\\n\\\n-See %s for instructions.\", strsignal (sig), GCCBUGURL);\n-}\n-\n /* Push the declarations of builtin types into the namespace.\n    RID_INDEX, if < CP_RID_MAX is the index of the builtin type\n    in the array RID_POINTERS.  NAME is the name used when looking\n@@ -6334,28 +6302,6 @@ init_decl_processing ()\n   current_binding_level = NULL_BINDING_LEVEL;\n   free_binding_level = NULL_BINDING_LEVEL;\n \n-  /* Because most segmentation signals can be traced back into user\n-     code, catch them and at least give the user a chance of working\n-     around compiler bugs.  */\n-  signal (SIGSEGV, signal_catch);\n-\n-  /* We will also catch aborts in the back-end through signal_catch and\n-     give the user a chance to see where the error might be, and to defeat\n-     aborts in the back-end when there have been errors previously in their\n-     code.  */\n-#ifdef SIGIOT\n-  signal (SIGIOT, signal_catch);\n-#endif\n-#ifdef SIGILL\n-  signal (SIGILL, signal_catch);\n-#endif\n-#ifdef SIGABRT\n-  signal (SIGABRT, signal_catch);\n-#endif\n-#ifdef SIGBUS\n-  signal (SIGBUS, signal_catch);\n-#endif\n-\n   build_common_tree_nodes (flag_signed_char);\n \n   error_mark_list = build_tree_list (error_mark_node, error_mark_node);"}, {"sha": "cb60d518a530115c9fa2248f9d57c357451a543f", "filename": "gcc/toplev.c", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7023245ceb1d6e7cae3235cabdc5daa81b1db5e/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7023245ceb1d6e7cae3235cabdc5daa81b1db5e/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a7023245ceb1d6e7cae3235cabdc5daa81b1db5e", "patch": "@@ -160,7 +160,7 @@ static void set_target_switch PARAMS ((const char *));\n static const char *decl_name PARAMS ((tree, int));\n \n static void float_signal PARAMS ((int)) ATTRIBUTE_NORETURN;\n-static void pipe_closed PARAMS ((int)) ATTRIBUTE_NORETURN;\n+static void crash_signal PARAMS ((int)) ATTRIBUTE_NORETURN;\n #ifdef ASM_IDENTIFY_LANGUAGE\n /* This might or might not be used in ASM_IDENTIFY_LANGUAGE. */\n static void output_lang_identify PARAMS ((FILE *)) ATTRIBUTE_UNUSED;\n@@ -1543,7 +1543,7 @@ float_signal (signo)\n      int signo ATTRIBUTE_UNUSED;\n {\n   if (float_handled == 0)\n-    abort ();\n+    crash_signal (signo);\n #if defined (USG) || defined (hpux)\n   signal (SIGFPE, float_signal);  /* re-enable the signal catcher */\n #endif\n@@ -1629,14 +1629,17 @@ pop_float_handler (handled, handler)\n     bcopy ((char *) handler, (char *) float_handler, sizeof (float_handler));\n }\n \n-/* Handler for SIGPIPE.  */\n+/* Handler for fatal signals, such as SIGSEGV.  These are transformed\n+   into ICE messages, which is much more user friendly.  */\n \n static void\n-pipe_closed (signo)\n+crash_signal (signo)\n      /* If this is missing, some compilers complain.  */\n-     int signo ATTRIBUTE_UNUSED;\n+     int signo;\n {\n-  fatal (\"output pipe has been closed\");\n+  fatal (\"Internal error: %s.\\n\\\n+Please submit a full bug report.\\n\\\n+See %s for instructions.\", strsignal (signo), GCCBUGURL);\n }\n \n /* Strip off a legitimate source ending from the input string NAME of\n@@ -4431,12 +4434,27 @@ main (argc, argv)\n   (void) bindtextdomain (PACKAGE, localedir);\n   (void) textdomain (PACKAGE);\n \n+  /* Install handler for SIGFPE, which may be received while we do\n+     compile-time floating point arithmetic.  */\n   signal (SIGFPE, float_signal);\n \n-#ifdef SIGPIPE\n-  signal (SIGPIPE, pipe_closed);\n+  /* Trap fatal signals, e.g. SIGSEGV, and convert them to ICE messages.  */\n+#ifdef SIGSEGV\n+  signal (SIGSEGV, crash_signal);\n #endif\n-\n+#ifdef SIGILL\n+  signal (SIGILL, crash_signal);\n+#endif\n+#ifdef SIGBUS\n+  signal (SIGBUS, crash_signal);\n+#endif\n+#ifdef SIGABRT\n+  signal (SIGABRT, crash_signal);\n+#endif\n+#if defined SIGIOT && (!defined SIGABRT || SIGABRT != SIGIOT)\n+  signal (SIGIOT, crash_signal);\n+#endif\n+  \n   decl_printable_name = decl_name;\n   lang_expand_expr = (lang_expand_expr_t) do_abort;\n "}]}