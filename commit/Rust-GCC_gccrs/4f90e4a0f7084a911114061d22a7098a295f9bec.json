{"sha": "4f90e4a0f7084a911114061d22a7098a295f9bec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY5MGU0YTBmNzA4NGE5MTExMTQwNjFkMjJhNzA5OGEyOTVmOWJlYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-10T13:07:10Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-10T13:07:10Z"}, "message": "If __STDC__, include gstdarg and use ANSI form of varargs.\n\nFrom-SVN: r6514", "tree": {"sha": "d54eb0e741311e685d4e924d13d490819e3474e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d54eb0e741311e685d4e924d13d490819e3474e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f90e4a0f7084a911114061d22a7098a295f9bec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f90e4a0f7084a911114061d22a7098a295f9bec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f90e4a0f7084a911114061d22a7098a295f9bec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f90e4a0f7084a911114061d22a7098a295f9bec/comments", "author": null, "committer": null, "parents": [{"sha": "6c1e249352a1bd5941d060ae75b18e287e726cb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c1e249352a1bd5941d060ae75b18e287e726cb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c1e249352a1bd5941d060ae75b18e287e726cb4"}], "stats": {"total": 180, "additions": 126, "deletions": 54}, "files": [{"sha": "596209fee6c0affd39d589d0cb96c6d6123b2cb6", "filename": "gcc/bc-emit.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f90e4a0f7084a911114061d22a7098a295f9bec/gcc%2Fbc-emit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f90e4a0f7084a911114061d22a7098a295f9bec/gcc%2Fbc-emit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbc-emit.c?ref=4f90e4a0f7084a911114061d22a7098a295f9bec", "patch": "@@ -1,5 +1,5 @@\n /* Output bytecodes for GNU C-compiler.\n-   Copyright (C) 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1994 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -19,7 +19,11 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n \n #include \"config.h\"\n+#ifdef __STDC__\n+#include \"gstdarg.h\"\n+#else\n #include \"gvarargs.h\"\n+#endif\n #include \"machmode.h\"\n #include \"rtl.h\"\n #include \"real.h\"\n@@ -906,18 +910,21 @@ bc_emit_bytecode (bytecode)\n    of literal values in the call.  First argument is the instruction, the\n    remaining arguments are literals of size HOST_WIDE_INT or smaller. */\n void\n-bc_emit_instruction (va_alist)\n-     va_dcl\n+bc_emit_instruction VPROTO((enum bytecode_opcode opcode, ...))\n {\n-  va_list arguments;\n+#ifndef __STDC__\n   enum bytecode_opcode opcode;\n+#endif\n+  va_list arguments;\n   int nliteral, instruction;\n \n+  VA_START (arguments, opcode);\n \n-  va_start (arguments);\n+#ifndef __STDC__\n+  opcode = va_arg (arguments, enum bytecode_opcode);\n+#endif\n \n   /* Emit instruction bytecode */\n-  opcode = va_arg (arguments, enum bytecode_opcode);\n   bc_emit_bytecode (opcode);\n   instruction = (int) opcode;\n "}, {"sha": "898272db8079bea04d6a8f355cb25610f491439a", "filename": "gcc/calls.c", "status": "modified", "additions": 35, "deletions": 17, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f90e4a0f7084a911114061d22a7098a295f9bec/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f90e4a0f7084a911114061d22a7098a295f9bec/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=4f90e4a0f7084a911114061d22a7098a295f9bec", "patch": "@@ -22,7 +22,11 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"tree.h\"\n #include \"flags.h\"\n #include \"expr.h\"\n+#ifdef __STDC__\n+#include \"gstdarg.h\"\n+#else\n #include \"gvarargs.h\"\n+#endif\n #include \"insn-flags.h\"\n \n /* Decide whether a function's arguments should be processed\n@@ -2069,19 +2073,22 @@ expand_call (exp, target, ignore)\n    move memory references across the non-const call.  */\n \n void\n-emit_library_call (va_alist)\n-     va_dcl\n+emit_library_call VPROTO((rtx orgfun, int no_queue, enum machine_mode outmode,\n+\t\t\t  int nargs, ...))\n {\n+#ifndef __STDC__\n+  rtx orgfun;\n+  int no_queue;\n+  enum machine_mode outmode;\n+  int nargs;\n+#endif\n   va_list p;\n   /* Total size in bytes of all the stack-parms scanned so far.  */\n   struct args_size args_size;\n   /* Size of arguments before any adjustments (such as rounding).  */\n   struct args_size original_args_size;\n   register int argnum;\n-  enum machine_mode outmode;\n-  int nargs;\n   rtx fun;\n-  rtx orgfun;\n   int inc;\n   int count;\n   rtx argblock = 0;\n@@ -2090,16 +2097,20 @@ emit_library_call (va_alist)\n \t       struct args_size offset; struct args_size size; };\n   struct arg *argvec;\n   int old_inhibit_defer_pop = inhibit_defer_pop;\n-  int no_queue = 0;\n   rtx use_insns;\n   /* library calls are never indirect calls.  */\n   int current_call_is_indirect = 0;\n \n-  va_start (p);\n-  orgfun = fun = va_arg (p, rtx);\n+  VA_START (p, nargs);\n+\n+#ifndef __STDC__\n+  orgfun = va_arg (p, rtx);\n   no_queue = va_arg (p, int);\n   outmode = va_arg (p, enum machine_mode);\n   nargs = va_arg (p, int);\n+#endif\n+\n+  fun = orgfun;\n \n   /* Copy all the libcall-arguments out of the varargs data\n      and into a vector ARGVEC.\n@@ -2338,19 +2349,23 @@ emit_library_call (va_alist)\n    If VALUE is nonzero, VALUE is returned.  */\n \n rtx\n-emit_library_call_value (va_alist)\n-     va_dcl\n+emit_library_call_value VPROTO((rtx orgfun, rtx value, int no_queue,\n+\t\t\t\tenum machine_mode outmode, int nargs, ...))\n {\n+#ifndef __STDC__\n+  rtx orgfun;\n+  rtx value;\n+  int no_queue;\n+  enum machine_mode outmode;\n+  int nargs;\n+#endif\n   va_list p;\n   /* Total size in bytes of all the stack-parms scanned so far.  */\n   struct args_size args_size;\n   /* Size of arguments before any adjustments (such as rounding).  */\n   struct args_size original_args_size;\n   register int argnum;\n-  enum machine_mode outmode;\n-  int nargs;\n   rtx fun;\n-  rtx orgfun;\n   int inc;\n   int count;\n   rtx argblock = 0;\n@@ -2359,21 +2374,24 @@ emit_library_call_value (va_alist)\n \t       struct args_size offset; struct args_size size; };\n   struct arg *argvec;\n   int old_inhibit_defer_pop = inhibit_defer_pop;\n-  int no_queue = 0;\n   rtx use_insns;\n-  rtx value;\n   rtx mem_value = 0;\n   int pcc_struct_value = 0;\n   int struct_value_size = 0;\n   /* library calls are never indirect calls.  */\n   int current_call_is_indirect = 0;\n \n-  va_start (p);\n-  orgfun = fun = va_arg (p, rtx);\n+  VA_START (p, nargs);\n+\n+#ifndef __STDC__\n+  orgfun = va_arg (p, rtx);\n   value = va_arg (p, rtx);\n   no_queue = va_arg (p, int);\n   outmode = va_arg (p, enum machine_mode);\n   nargs = va_arg (p, int);\n+#endif\n+\n+  fun = orgfun;\n \n   /* If this kind of value comes back in memory,\n      decide where in memory it should come back.  */"}, {"sha": "9c411a7a2ee92f9bc13c4cee80740c23a65114dd", "filename": "gcc/combine.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f90e4a0f7084a911114061d22a7098a295f9bec/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f90e4a0f7084a911114061d22a7098a295f9bec/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=4f90e4a0f7084a911114061d22a7098a295f9bec", "patch": "@@ -74,7 +74,11 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    combine anyway.  */\n \n #include \"config.h\"\n+#ifdef __STDC__\n+#include \"gstdarg.h\"\n+#else\n #include \"gvarargs.h\"\n+#endif\n \n /* Must precede rtl.h for FFS.  */\n #include <stdio.h>\n@@ -398,7 +402,8 @@ static rtx simplify_shift_const\tPROTO((rtx, enum rtx_code, enum machine_mode,\n \t\t\t\t       rtx, int));\n static int recog_for_combine\tPROTO((rtx *, rtx, rtx *));\n static rtx gen_lowpart_for_combine  PROTO((enum machine_mode, rtx));\n-static rtx gen_rtx_combine ();  /* This is varargs.  */\n+static rtx gen_rtx_combine PROTO((enum rtx_code code, enum machine_mode mode,\n+\t\t\t\t  ...));\n static rtx gen_binary\t\tPROTO((enum rtx_code, enum machine_mode,\n \t\t\t\t       rtx, rtx));\n static rtx gen_unary\t\tPROTO((enum rtx_code, enum machine_mode, rtx));\n@@ -8293,21 +8298,26 @@ gen_lowpart_for_combine (mode, x)\n \n /*VARARGS2*/\n static rtx\n-gen_rtx_combine (va_alist)\n-     va_dcl\n+gen_rtx_combine VPROTO((enum rtx_code code, enum machine_mode mode, ...))\n {\n-  va_list p;\n+#ifndef __STDC__\n   enum rtx_code code;\n   enum machine_mode mode;\n+#endif\n+  va_list p;\n   int n_args;\n   rtx args[3];\n   int i, j;\n   char *fmt;\n   rtx rt;\n \n-  va_start (p);\n+  VA_START (p, mode);\n+\n+#ifndef __STDC__\n   code = va_arg (p, enum rtx_code);\n   mode = va_arg (p, enum machine_mode);\n+#endif\n+\n   n_args = GET_RTX_LENGTH (code);\n   fmt = GET_RTX_FORMAT (code);\n "}, {"sha": "382960c0351919bacf9e383644da5c5fb7b95c40", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f90e4a0f7084a911114061d22a7098a295f9bec/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f90e4a0f7084a911114061d22a7098a295f9bec/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=4f90e4a0f7084a911114061d22a7098a295f9bec", "patch": "@@ -34,7 +34,11 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    is the kind of rtx's they make and what arguments they use.  */\n \n #include \"config.h\"\n+#ifdef __STDC__\n+#include \"gstdarg.h\"\n+#else\n #include \"gvarargs.h\"\n+#endif\n #include \"rtl.h\"\n #include \"tree.h\"\n #include \"flags.h\"\n@@ -277,19 +281,23 @@ extern int max_stack_depth;\n \n /*VARARGS2*/\n rtx\n-gen_rtx (va_alist)\n-     va_dcl\n+gen_rtx VPROTO((enum rtx_code code, enum machine_mode mode, ...))\n {\n-  va_list p;\n+#ifndef __STDC__\n   enum rtx_code code;\n   enum machine_mode mode;\n+#endif\n+  va_list p;\n   register int i;\t\t/* Array indices...\t\t\t*/\n   register char *fmt;\t\t/* Current rtx's format...\t\t*/\n   register rtx rt_val;\t\t/* RTX to return to caller...\t\t*/\n \n-  va_start (p);\n+  VA_START (p, mode);\n+\n+#ifndef __STDC__\n   code = va_arg (p, enum rtx_code);\n   mode = va_arg (p, enum machine_mode);\n+#endif\n \n   if (code == CONST_INT)\n     {\n@@ -397,20 +405,26 @@ gen_rtx (va_alist)\n \n /*VARARGS1*/\n rtvec\n-gen_rtvec (va_alist)\n-     va_dcl\n+gen_rtvec VPROTO((int n, ...))\n {\n-  int n, i;\n+#ifndef __STDC__\n+  int n;\n+#endif\n+  int i;\n   va_list p;\n   rtx *vector;\n \n-  va_start (p);\n+  VA_START (p, n);\n+\n+#ifndef __STDC__\n   n = va_arg (p, int);\n+#endif\n \n   if (n == 0)\n     return NULL_RTVEC;\t\t/* Don't allocate an empty rtvec...\t*/\n \n   vector = (rtx *) alloca (n * sizeof (rtx));\n+\n   for (i = 0; i < n; i++)\n     vector[i] = va_arg (p, rtx);\n   va_end (p);"}, {"sha": "d4b34b2915a627566352ea4c3f53f25b9e63e5f9", "filename": "gcc/final.c", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f90e4a0f7084a911114061d22a7098a295f9bec/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f90e4a0f7084a911114061d22a7098a295f9bec/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=4f90e4a0f7084a911114061d22a7098a295f9bec", "patch": "@@ -1,5 +1,5 @@\n /* Convert RTL to assembler code and output it, for GNU compiler.\n-   Copyright (C) 1987, 1988, 1989, 1992, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 89, 92, 93, 1994 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -44,7 +44,11 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    FUNCTION_EPILOGUE.  Those instructions never exist as rtl.  */\n \n #include \"config.h\"\n+#ifdef __STDC__\n+#include \"gstdarg.h\"\n+#else\n #include \"gvarargs.h\"\n+#endif\n #include \"tree.h\"\n #include \"rtl.h\"\n #include \"regs.h\"\n@@ -2679,19 +2683,24 @@ output_addr_const (file, x)\n    We handle alternate assembler dialects here, just like output_asm_insn.  */\n \n void\n-asm_fprintf (va_alist)\n-     va_dcl\n+asm_fprintf VPROTO((FILE *file, char *p, ...))\n {\n-  va_list argptr;\n+#ifndef __STDC__\n   FILE *file;\n+  char *p;\n+#endif\n+  va_list argptr;\n   char buf[10];\n-  char *p, *q, c;\n+  char *q, c;\n   int i;\n \n-  va_start (argptr);\n+  VA_START (argptr, p);\n+\n+#ifndef __STDC__\n+  file = va_arg (argptr, FILE*);\n+  p = va_arg (argptr, char*);\n+#endif\n \n-  file = va_arg (argptr, FILE *);\n-  p = va_arg (argptr, char *);\n   buf[0] = '%';\n \n   while (c = *p++)"}, {"sha": "eef27501a2a21922136ba19c09da93fc8eaeac64", "filename": "gcc/gcc.c", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f90e4a0f7084a911114061d22a7098a295f9bec/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f90e4a0f7084a911114061d22a7098a295f9bec/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=4f90e4a0f7084a911114061d22a7098a295f9bec", "patch": "@@ -38,7 +38,11 @@ compilation is specified by a string called a \"spec\".  */\n \n #include \"config.h\"\n #include \"obstack.h\"\n+#ifdef __STDC__\n+#include \"gstdarg.h\"\n+#else\n #include \"gvarargs.h\"\n+#endif\n #include <stdio.h>\n \n #ifndef R_OK\n@@ -4178,14 +4182,19 @@ fancy_abort ()\n /* Output an error message and exit */\n \n static void\n-fatal (va_alist)\n-     va_dcl\n+fatal VPROTO((char *format, ...))\n {\n-  va_list ap;\n+#ifndef __STDC__\n   char *format;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, format);\n+\n+#ifndef __STDC__\n+  format = va_arg (ap, char*);\n+#endif\n \n-  va_start (ap);\n-  format = va_arg (ap, char *);\n   fprintf (stderr, \"%s: \", programname);\n   vfprintf (stderr, format, ap);\n   va_end (ap);\n@@ -4195,14 +4204,19 @@ fatal (va_alist)\n }\n \n static void\n-error (va_alist)\n-     va_dcl\n+error VPROTO((char *format, ...))\n {\n-  va_list ap;\n+#ifndef __STDC__\n   char *format;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, format);\n+\n+#ifndef __STDC__\n+  format = va_arg (ap, char*);\n+#endif\n \n-  va_start (ap);\n-  format = va_arg (ap, char *);\n   fprintf (stderr, \"%s: \", programname);\n   vfprintf (stderr, format, ap);\n   va_end (ap);"}]}