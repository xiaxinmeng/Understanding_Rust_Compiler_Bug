{"sha": "0583835c7dac1e94dce3c6f83fdf3ba7c1a2ec7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU4MzgzNWM3ZGFjMWU5NGRjZTNjNmY4M2ZkZjNiYTdjMWEyZWM3Yw==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2010-05-20T22:49:07Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2010-05-20T22:49:07Z"}, "message": "ira.c (ira_non_ordered_class_hard_regs): Define.\n\n       * ira.c (ira_non_ordered_class_hard_regs): Define.\n        (setup_class_hard_regs): Initialize ira_non_ordered_class_hard_regs.\n        * ira-int.h (ira_non_ordered_class_hard_regs): Declare.\n        * ira-costs.c (ira_tune_allocno_costs_and_cover_classes): Increase\n        cost of unaligned hard regs when allocating multi-reg pseudos.\n\nFrom-SVN: r159644", "tree": {"sha": "ad5c9a81fe8ced03d64f7354f5cdb7c56da2c287", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad5c9a81fe8ced03d64f7354f5cdb7c56da2c287"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0583835c7dac1e94dce3c6f83fdf3ba7c1a2ec7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0583835c7dac1e94dce3c6f83fdf3ba7c1a2ec7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0583835c7dac1e94dce3c6f83fdf3ba7c1a2ec7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0583835c7dac1e94dce3c6f83fdf3ba7c1a2ec7c/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/882b3d5c2e3be0b367f0eb9a9b94a99a1e22c60a"}], "stats": {"total": 54, "additions": 53, "deletions": 1}, "files": [{"sha": "2c7fcc0c58da3afe9dcd92468f7ae9d19e365fe6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0583835c7dac1e94dce3c6f83fdf3ba7c1a2ec7c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0583835c7dac1e94dce3c6f83fdf3ba7c1a2ec7c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0583835c7dac1e94dce3c6f83fdf3ba7c1a2ec7c", "patch": "@@ -1,3 +1,11 @@\n+2009-09-14  Vladimir Makarov <vmakarov@redhat.com>\n+\n+\t* ira.c (ira_non_ordered_class_hard_regs): Define.\n+        (setup_class_hard_regs): Initialize ira_non_ordered_class_hard_regs.\n+\t* ira-int.h (ira_non_ordered_class_hard_regs): Declare.\n+\t* ira-costs.c (ira_tune_allocno_costs_and_cover_classes): Increase\n+\tcost of unaligned hard regs when allocating multi-reg pseudos.\n+\n 2010-05-20  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* config.gcc (mips*-sde-elf*): Don't use sdemtk.opt."}, {"sha": "6942931bdd0c25e543d71978e5f0c418dfbdec9a", "filename": "gcc/ira-costs.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0583835c7dac1e94dce3c6f83fdf3ba7c1a2ec7c/gcc%2Fira-costs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0583835c7dac1e94dce3c6f83fdf3ba7c1a2ec7c/gcc%2Fira-costs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-costs.c?ref=0583835c7dac1e94dce3c6f83fdf3ba7c1a2ec7c", "patch": "@@ -1773,5 +1773,32 @@ ira_tune_allocno_costs_and_cover_classes (void)\n \t}\n       if (min_cost != INT_MAX)\n \tALLOCNO_COVER_CLASS_COST (a) = min_cost;\n+\n+      /* Some targets allow pseudos to be allocated to unaligned\n+         sequences of hard registers.  However, selecting an unaligned\n+         sequence can unnecessarily restrict later allocations.  So\n+         increase the cost of unaligned hard regs to encourage the use\n+         of aligned hard regs.  */\n+      {\n+\tint nregs, index;\n+\n+\tif ((nregs = ira_reg_class_nregs[cover_class][ALLOCNO_MODE (a)]) > 1)\n+\t  {\n+\t    ira_allocate_and_set_costs\n+\t      (&ALLOCNO_HARD_REG_COSTS (a), cover_class,\n+\t       ALLOCNO_COVER_CLASS_COST (a));\n+\t    reg_costs = ALLOCNO_HARD_REG_COSTS (a);\n+\t    for (j = n - 1; j >= 0; j--)\n+\t      {\n+\t\tif (j % nregs != 0)\n+\t\t  {\n+\t\t    regno = ira_non_ordered_class_hard_regs[cover_class][j];\n+\t\t    index = ira_class_hard_reg_index[cover_class][regno];\n+\t\t    ira_assert (index != 0);\n+\t\t    reg_costs[index] += ALLOCNO_FREQ (a);\n+\t\t  }\n+\t      }\n+\t  }\n+      }\n     }\n }"}, {"sha": "6ee7393b36df99b02e647aa364b0264f0959fbe1", "filename": "gcc/ira-int.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0583835c7dac1e94dce3c6f83fdf3ba7c1a2ec7c/gcc%2Fira-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0583835c7dac1e94dce3c6f83fdf3ba7c1a2ec7c/gcc%2Fira-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-int.h?ref=0583835c7dac1e94dce3c6f83fdf3ba7c1a2ec7c", "patch": "@@ -743,6 +743,11 @@ extern move_table *ira_may_move_out_cost[MAX_MACHINE_MODE];\n    allocation.  */\n extern int ira_class_subset_p[N_REG_CLASSES][N_REG_CLASSES];\n \n+/* Array of the number of hard registers of given class which are\n+   available for allocation.  The order is defined by the the hard\n+   register numbers.  */\n+extern short ira_non_ordered_class_hard_regs[N_REG_CLASSES][FIRST_PSEUDO_REGISTER];\n+\n /* Index (in ira_class_hard_regs) for given register class and hard\n    register (in general case a hard register can belong to several\n    register classes).  The index is negative for hard registers"}, {"sha": "372539e08a2cdde73c0e660d67df7cec3d496542", "filename": "gcc/ira.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0583835c7dac1e94dce3c6f83fdf3ba7c1a2ec7c/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0583835c7dac1e94dce3c6f83fdf3ba7c1a2ec7c/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=0583835c7dac1e94dce3c6f83fdf3ba7c1a2ec7c", "patch": "@@ -413,6 +413,11 @@ static HARD_REG_SET no_unit_alloc_regs;\n    allocation order.  */\n short ira_class_hard_regs[N_REG_CLASSES][FIRST_PSEUDO_REGISTER];\n \n+/* Array of the number of hard registers of given class which are\n+   available for allocation.  The order is defined by the\n+   the hard register numbers.  */\n+short ira_non_ordered_class_hard_regs[N_REG_CLASSES][FIRST_PSEUDO_REGISTER];\n+\n /* The number of elements of the above array for given register\n    class.  */\n int ira_class_hard_regs_num[N_REG_CLASSES];\n@@ -437,7 +442,10 @@ setup_class_hard_regs (void)\n       AND_COMPL_HARD_REG_SET (temp_hard_regset, no_unit_alloc_regs);\n       CLEAR_HARD_REG_SET (processed_hard_reg_set);\n       for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-\tira_class_hard_reg_index[cl][0] = -1;\n+\t{\n+\t  ira_non_ordered_class_hard_regs[cl][0] = -1;\n+\t  ira_class_hard_reg_index[cl][0] = -1;\n+\t}\n       for (n = 0, i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n \t{\n #ifdef REG_ALLOC_ORDER\n@@ -457,6 +465,10 @@ setup_class_hard_regs (void)\n \t    }\n \t}\n       ira_class_hard_regs_num[cl] = n;\n+      for (n = 0, i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n+\tif (TEST_HARD_REG_BIT (temp_hard_regset, i))\n+\t  ira_non_ordered_class_hard_regs[cl][n++] = i;\n+      ira_assert (ira_class_hard_regs_num[cl] == n);\n     }\n }\n "}]}