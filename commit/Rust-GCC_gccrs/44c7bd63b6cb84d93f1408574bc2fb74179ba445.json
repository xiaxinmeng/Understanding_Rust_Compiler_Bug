{"sha": "44c7bd63b6cb84d93f1408574bc2fb74179ba445", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRjN2JkNjNiNmNiODRkOTNmMTQwODU3NGJjMmZiNzQxNzliYTQ0NQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2007-03-17T17:44:02Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2007-03-17T17:44:02Z"}, "message": "arm.c, [...]: Fix comment typos.\n\n\t* config/arm/arm.c, config/arm/thumb2.md, config/m68k/m68k.c,\n\tconfig/spu/spu.c, omega.h, passes.c, predict.c: Fix comment\n\ttypos.\n\t* doc/cpp.texi, doc/extend.texi, doc/invoke.texi: Fix typos.\n\tFollow spelling conventions.\n\nFrom-SVN: r123025", "tree": {"sha": "53acd4868efeee02477736aa3dc09717ec6a8df9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53acd4868efeee02477736aa3dc09717ec6a8df9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44c7bd63b6cb84d93f1408574bc2fb74179ba445", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44c7bd63b6cb84d93f1408574bc2fb74179ba445", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44c7bd63b6cb84d93f1408574bc2fb74179ba445", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44c7bd63b6cb84d93f1408574bc2fb74179ba445/comments", "author": null, "committer": null, "parents": [{"sha": "a757b5c594279e7e3a4a51bf5748dbd0785a3fbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a757b5c594279e7e3a4a51bf5748dbd0785a3fbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a757b5c594279e7e3a4a51bf5748dbd0785a3fbc"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "895e561077fc200519bd3d0bb20756718f7aca77", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c7bd63b6cb84d93f1408574bc2fb74179ba445/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c7bd63b6cb84d93f1408574bc2fb74179ba445/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=44c7bd63b6cb84d93f1408574bc2fb74179ba445", "patch": "@@ -1,3 +1,11 @@\n+2007-03-17  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* config/arm/arm.c, config/arm/thumb2.md, config/m68k/m68k.c,\n+\tconfig/spu/spu.c, omega.h, passes.c, predict.c: Fix comment\n+\ttypos.\n+\t* doc/cpp.texi, doc/extend.texi, doc/invoke.texi: Fix typos.\n+\tFollow spelling conventions.\n+\n 2007-03-17  Dorit Nuzman  <dorit@il.ibm.com>\n \n \tPR tree-optimization/31041"}, {"sha": "cab9eadbf7fab6f024e3e1fcc27b4decc7e48098", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c7bd63b6cb84d93f1408574bc2fb74179ba445/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c7bd63b6cb84d93f1408574bc2fb74179ba445/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=44c7bd63b6cb84d93f1408574bc2fb74179ba445", "patch": "@@ -12247,7 +12247,7 @@ get_arm_condition_code (rtx comparison)\n     }\n }\n \n-/* Tell arm_asm_ouput_opcode to output IT blocks for conditionally executed\n+/* Tell arm_asm_output_opcode to output IT blocks for conditionally executed\n    instructions.  */\n void\n thumb2_final_prescan_insn (rtx insn)"}, {"sha": "685da30d2abfac0c15b95a01cc7f7277d77ec8fa", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c7bd63b6cb84d93f1408574bc2fb74179ba445/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c7bd63b6cb84d93f1408574bc2fb74179ba445/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=44c7bd63b6cb84d93f1408574bc2fb74179ba445", "patch": "@@ -277,7 +277,7 @@\n )\n \n ;; Thumb-2 always has load/store halfword instructions, so we can avoid a lot\n-;; of the messyness associated with the ARM patterns.\n+;; of the messiness associated with the ARM patterns.\n (define_insn \"*thumb2_movhi_insn\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,m,r\")    \n \t(match_operand:HI 1 \"general_operand\"      \"rI,n,r,m\"))]"}, {"sha": "794659868a31b3ed951fff99c88ba516f5756270", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c7bd63b6cb84d93f1408574bc2fb74179ba445/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c7bd63b6cb84d93f1408574bc2fb74179ba445/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=44c7bd63b6cb84d93f1408574bc2fb74179ba445", "patch": "@@ -3732,7 +3732,7 @@ print_operand_address (FILE *file, rtx addr)\n       int labelno;\n \n       /* If ADDR is a (d8,pc,Xn) address, this is the number of the\n-\t label being acceesed, otherwise it is -1.  */\n+\t label being accessed, otherwise it is -1.  */\n       labelno = (address.offset\n \t\t && !address.base\n \t\t && GET_CODE (address.offset) == LABEL_REF"}, {"sha": "8512333da2359e6f8f1b092fc08e9d7bb439811e", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c7bd63b6cb84d93f1408574bc2fb74179ba445/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c7bd63b6cb84d93f1408574bc2fb74179ba445/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=44c7bd63b6cb84d93f1408574bc2fb74179ba445", "patch": "@@ -1377,7 +1377,7 @@ print_operand (FILE * file, rtx x, int code)\n \toutput_addr_const (file, x);\n       return;\n \n-      /* unsed letters\n+      /* unused letters\n \t              o qr  uvw yz\n \tAB            OPQR  UVWXYZ */\n     default:"}, {"sha": "2a57feec9df6a355f52de3e107e54d5bfe2b69a5", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c7bd63b6cb84d93f1408574bc2fb74179ba445/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c7bd63b6cb84d93f1408574bc2fb74179ba445/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=44c7bd63b6cb84d93f1408574bc2fb74179ba445", "patch": "@@ -2030,7 +2030,7 @@ neither @code{extern} nor @code{static} will never be compiled as a\n standalone function.\n \n If this macro is defined, GCC supports the @code{gnu_inline} function\n-attribute as a way to always get the gnu89 behaviour.  Support for\n+attribute as a way to always get the gnu89 behavior.  Support for\n this and @code{__GNUC_GNU_INLINE__} was added in GCC 4.1.3.  If\n neither macro is defined, an older version of GCC is being used:\n @code{inline} functions will be compiled in gnu89 mode, and the"}, {"sha": "d01e5fab3a1b8d493e75776914825fd3a26003d7", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c7bd63b6cb84d93f1408574bc2fb74179ba445/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c7bd63b6cb84d93f1408574bc2fb74179ba445/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=44c7bd63b6cb84d93f1408574bc2fb74179ba445", "patch": "@@ -2262,7 +2262,7 @@ unlikely executed.  The function is optimized for size rather than speed and on\n many targets it is placed into special subsection of the text section so all\n cold functions appears close together improving code locality of non-cold parts\n of program.  The paths leading to call of cold functions within code are marked\n-as unlikely by the branch prediction mechanizm. It is thus useful to mark\n+as unlikely by the branch prediction mechanism. It is thus useful to mark\n functions used to handle unlikely conditions, such as @code{perror}, as cold to\n improve optimization of hot functions that do call marked functions in rare\n occasions."}, {"sha": "b11681b9ad9b8a3cb06e797c7998ad3408beb4f1", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c7bd63b6cb84d93f1408574bc2fb74179ba445/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c7bd63b6cb84d93f1408574bc2fb74179ba445/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=44c7bd63b6cb84d93f1408574bc2fb74179ba445", "patch": "@@ -1376,7 +1376,7 @@ C99 semantics for @code{inline} when in C99 or gnu99 mode (i.e., it\n specifies the default behavior).  This option was first supported in\n GCC 4.3.  This option is not supported in C89 or gnu89 mode.\n \n-The preprocesor macros @code{__GNUC_GNU_INLINE__} and\n+The preprocessor macros @code{__GNUC_GNU_INLINE__} and\n @code{__GNUC_STDC_INLINE__} may be used to check which semantics are\n in effect for @code{inline} functions.  @xref{Common Predefined\n Macros,,,cpp,The C Preprocessor}."}, {"sha": "0d6b403954fbbdcec056529f198f96196ace3f61", "filename": "gcc/omega.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c7bd63b6cb84d93f1408574bc2fb74179ba445/gcc%2Fomega.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c7bd63b6cb84d93f1408574bc2fb74179ba445/gcc%2Fomega.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomega.h?ref=44c7bd63b6cb84d93f1408574bc2fb74179ba445", "patch": "@@ -198,7 +198,7 @@ omega_copy_eqn (eqn e1, eqn e2, int s)\n   memcpy (e1->coef, e2->coef, (s + 1) * sizeof (int));\n }\n \n-/* Intialize E = 0.  Equation E contains S variables.  */\n+/* Initialize E = 0.  Equation E contains S variables.  */\n \n static inline void\n omega_init_eqn_zero (eqn e, int s)"}, {"sha": "5674d9b6b96008fe6cbca38b8909e29e55a80fea", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c7bd63b6cb84d93f1408574bc2fb74179ba445/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c7bd63b6cb84d93f1408574bc2fb74179ba445/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=44c7bd63b6cb84d93f1408574bc2fb74179ba445", "patch": "@@ -460,7 +460,7 @@ init_optimization_passes (void)\n \n   /* Interprocedural optimization passes. \n      All these passes are ignored in -fno-unit-at-a-time\n-     except for subpases of early_local_pases.  */\n+     except for subpasses of early_local_passes.  */\n   p = &all_ipa_passes;\n   NEXT_PASS (pass_ipa_function_and_variable_visibility);\n   NEXT_PASS (pass_ipa_early_inline);"}, {"sha": "097cfb860703c66a61f134a47d49cb9352177225", "filename": "gcc/predict.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c7bd63b6cb84d93f1408574bc2fb74179ba445/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c7bd63b6cb84d93f1408574bc2fb74179ba445/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=44c7bd63b6cb84d93f1408574bc2fb74179ba445", "patch": "@@ -1311,10 +1311,10 @@ tree_estimate_probability (void)\n \t     care for error returns and other cases are often used for\n \t     fast paths through function. \n \n-\t     Since we've already removed the return statments, we are\n+\t     Since we've already removed the return statements, we are\n \t     looking for CFG like:\n \n-\t       if (conditoinal)\n+\t       if (conditional)\n \t         {\n \t\t   ..\n \t\t   goto return_block"}]}