{"sha": "e671e48e352ee278d816d4633146208807a0e403", "node_id": "C_kwDOANBUbNoAKGU2NzFlNDhlMzUyZWUyNzhkODE2ZDQ2MzMxNDYyMDg4MDdhMGU0MDM", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2022-03-10T13:49:23Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2022-03-10T13:50:54Z"}, "message": "ipa-cp: Avoid adjusting references through self-recursion (PR 104813)\n\nWhen writing the patch that downgrades address-taken references to\nload references when IPA-CP can prove that all uses of the taken\naddress ends up in loads, I unfortunately did not take into account\nthat find_more_scalar_values_for_callers_subset now happily adds\nself-recursive edges to the set of callers which should be immediately\nredirected (originally recursion was meant to be handled as edge\nredirection in a second pass over the SCC).\n\nThe code as it is can now decrement the referece counters too many\ntimes.  This can remedied by removing self-recursive edges earlier, we\nalready do it because of thunk expansion issues, and so this patch\ndoes exactly that.\n\ngcc/ChangeLog:\n\n2022-03-07  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/104813\n\t* ipa-cp.cc (create_specialized_node): Move removal of\n\tself-recursive calls from callers vector before refrence\n\tadjustments.\n\ngcc/testsuite/ChangeLog:\n\n2022-03-07  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/104813\n\t* gcc.dg/ipa/pr104813.c: New test.", "tree": {"sha": "d3f8d1b5c97d31ca8a68c953618831280844347b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3f8d1b5c97d31ca8a68c953618831280844347b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e671e48e352ee278d816d4633146208807a0e403", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE5elVTFt/d09Vsoczv2PBvD+kNUAFAmIqAj4ACgkQv2PBvD+k\nNUALOg/+Je2VP+nKLbPxAvJI+3WqS9Jhh2nSg5jcPhV5hqBA3T8HEmmSMaZNigKn\ny/7a+V2kGCKINyXFwkJ1c1ORLM71LGsjsXLOo5qwgjObmI7X8pnaE16oj0hl9bpe\nwO50qSnjqn/ZaX9GY20jm5Core1CIhpfq6ER3AGW3E6GGZFqefHvZ3VNSJmDNIhQ\nOpe5ESQxFPh25c4o8kONA2b2306aphQYEkFvZQkKFTXdZhsRXGik+t0W0h20XBYJ\nyNhW8hncLjSHhf+BzSIfVcARKKQfqnsVULJ2xFaEE8YL9jtXpxDOogvWFLf4xx8p\nP9nxEg0xoV88pEogCROH2AENWHJ4OpA7+6kpVyr0WiwGXw5p2XOkLW0PIi95BOYh\nmxTgF/euxAvwCqaD8H+CRHEOHzX+n1n1M7ImY5rTHTknXkx2XJU4gIBnByP0ulg5\nb0tG0Tcl3vnVLTjWued5wd7xliPeY1h3amIgQ5NLBqod+kIiPYcfLmMizVGr6kG2\n4oe5go+B0tXiAnFPdOPctEfFbOH4IiWQA1U1DZeX/PmLgZnzVIuAZJvYKK8bXWtO\nqwe2OqcBlhRBBr8bNuVnowNcW/0hljeoisFn6abKRxNLeQYrEk8q7TKoGO8kkkeX\nAnHpwg8FgU6wNsDLlVB2mlRURvVUY7guWCy4ydg727rjcS44S1s=\n=9sJ7\n-----END PGP SIGNATURE-----", "payload": "tree d3f8d1b5c97d31ca8a68c953618831280844347b\nparent ee34ffa429a399f292ad1421333721a92b998772\nauthor Martin Jambor <mjambor@suse.cz> 1646920163 +0100\ncommitter Martin Jambor <mjambor@suse.cz> 1646920254 +0100\n\nipa-cp: Avoid adjusting references through self-recursion (PR 104813)\n\nWhen writing the patch that downgrades address-taken references to\nload references when IPA-CP can prove that all uses of the taken\naddress ends up in loads, I unfortunately did not take into account\nthat find_more_scalar_values_for_callers_subset now happily adds\nself-recursive edges to the set of callers which should be immediately\nredirected (originally recursion was meant to be handled as edge\nredirection in a second pass over the SCC).\n\nThe code as it is can now decrement the referece counters too many\ntimes.  This can remedied by removing self-recursive edges earlier, we\nalready do it because of thunk expansion issues, and so this patch\ndoes exactly that.\n\ngcc/ChangeLog:\n\n2022-03-07  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/104813\n\t* ipa-cp.cc (create_specialized_node): Move removal of\n\tself-recursive calls from callers vector before refrence\n\tadjustments.\n\ngcc/testsuite/ChangeLog:\n\n2022-03-07  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/104813\n\t* gcc.dg/ipa/pr104813.c: New test.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e671e48e352ee278d816d4633146208807a0e403", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e671e48e352ee278d816d4633146208807a0e403", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e671e48e352ee278d816d4633146208807a0e403/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee34ffa429a399f292ad1421333721a92b998772", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee34ffa429a399f292ad1421333721a92b998772", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee34ffa429a399f292ad1421333721a92b998772"}], "stats": {"total": 52, "additions": 42, "deletions": 10}, "files": [{"sha": "18047c209a80273dc69a4471468593784b049fb4", "filename": "gcc/ipa-cp.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e671e48e352ee278d816d4633146208807a0e403/gcc%2Fipa-cp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e671e48e352ee278d816d4633146208807a0e403/gcc%2Fipa-cp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.cc?ref=e671e48e352ee278d816d4633146208807a0e403", "patch": "@@ -5099,6 +5099,16 @@ create_specialized_node (struct cgraph_node *node,\n   else\n     new_adjustments = NULL;\n \n+  auto_vec<cgraph_edge *, 2> self_recursive_calls;\n+  for (i = callers.length () - 1; i >= 0; i--)\n+    {\n+      cgraph_edge *cs = callers[i];\n+      if (cs->caller == node)\n+\t{\n+\t  self_recursive_calls.safe_push (cs);\n+\t  callers.unordered_remove (i);\n+\t}\n+    }\n   replace_trees = cinfo ? vec_safe_copy (cinfo->tree_map) : NULL;\n   for (i = 0; i < count; i++)\n     {\n@@ -5129,16 +5139,6 @@ create_specialized_node (struct cgraph_node *node,\n       if (replace_map)\n \tvec_safe_push (replace_trees, replace_map);\n     }\n-  auto_vec<cgraph_edge *, 2> self_recursive_calls;\n-  for (i = callers.length () - 1; i >= 0; i--)\n-    {\n-      cgraph_edge *cs = callers[i];\n-      if (cs->caller == node)\n-\t{\n-\t  self_recursive_calls.safe_push (cs);\n-\t  callers.unordered_remove (i);\n-\t}\n-    }\n \n   unsigned &suffix_counter = clone_num_suffixes->get_or_insert (\n \t\t\t       IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME ("}, {"sha": "34f413e3823078908f9b6b4fca3713f491b7da1c", "filename": "gcc/testsuite/gcc.dg/ipa/pr104813.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e671e48e352ee278d816d4633146208807a0e403/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr104813.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e671e48e352ee278d816d4633146208807a0e403/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr104813.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr104813.c?ref=e671e48e352ee278d816d4633146208807a0e403", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\"  } */\n+\n+int a, b, c, d, *e;\n+void f(int h) {\n+  if (b) {\n+    int g;\n+    while (g++)\n+      d = *e;\n+    e++;\n+  }\n+}\n+static void i();\n+static void j(int *h, int k, int *l) {\n+  if (c) {\n+    int *o = h, m;\n+    f(*l);\n+    i(m);\n+    j(o, 1, o);\n+    for (;;)\n+      ;\n+  }\n+}\n+void i() {\n+  int *n = &a;\n+  while (1)\n+    j(n, 1, n);\n+}\n+int main() {\n+  j(&a, 0, &a);\n+  return 0;\n+}"}]}