{"sha": "0bdcca681d9bb477bf1288a1d0a9d06b2af02952", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJkY2NhNjgxZDliYjQ3N2JmMTI4OGExZDBhOWQwNmIyYWYwMjk1Mg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-06-10T18:57:15Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-06-10T18:57:15Z"}, "message": "concat.c: Include string.h.\n\n        * concat.c: Include string.h.  Fix int vs size_t usage.\n        Simplify the iteration loops.  Use memcpy.\n\nFrom-SVN: r43149", "tree": {"sha": "27b7713c8516cba28a54a5888c305e0de97e25fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27b7713c8516cba28a54a5888c305e0de97e25fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bdcca681d9bb477bf1288a1d0a9d06b2af02952", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bdcca681d9bb477bf1288a1d0a9d06b2af02952", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bdcca681d9bb477bf1288a1d0a9d06b2af02952", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bdcca681d9bb477bf1288a1d0a9d06b2af02952/comments", "author": null, "committer": null, "parents": [{"sha": "33a1b84b69a52dba5cfce24f2c09251c97852d74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33a1b84b69a52dba5cfce24f2c09251c97852d74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33a1b84b69a52dba5cfce24f2c09251c97852d74"}], "stats": {"total": 83, "additions": 35, "deletions": 48}, "files": [{"sha": "00ad6edde2fe7661bc35548f3e9cef735ea18ccb", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bdcca681d9bb477bf1288a1d0a9d06b2af02952/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bdcca681d9bb477bf1288a1d0a9d06b2af02952/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=0bdcca681d9bb477bf1288a1d0a9d06b2af02952", "patch": "@@ -1,3 +1,8 @@\n+2001-06-10  Richard Henderson  <rth@redhat.com>\n+\n+\t* concat.c: Include string.h.  Fix int vs size_t usage.\n+\tSimplify the iteration loops.  Use memcpy.\n+\n 2001-05-16  Matt Kraai  <kraai@alumni.carnegiemellon.edu>\n \n \t* partition.c: Fix misspelling of `implementation'."}, {"sha": "8e6838f1cd84e4cf1a12feb99d2ffe72f7c42bbd", "filename": "libiberty/concat.c", "status": "modified", "additions": 30, "deletions": 48, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bdcca681d9bb477bf1288a1d0a9d06b2af02952/libiberty%2Fconcat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bdcca681d9bb477bf1288a1d0a9d06b2af02952/libiberty%2Fconcat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconcat.c?ref=0bdcca681d9bb477bf1288a1d0a9d06b2af02952", "patch": "@@ -1,5 +1,5 @@\n /* Concatenate variable number of strings.\n-   Copyright (C) 1991, 1994 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1994, 2001 Free Software Foundation, Inc.\n    Written by Fred Fish @ Cygnus Support\n \n This file is part of the libiberty library.\n@@ -62,14 +62,13 @@ NOTES\n #include <varargs.h>\n #endif\n \n-#ifdef __STDC__\n-#include <stddef.h>\n-extern size_t strlen (const char *s);\n-#else\n-extern int strlen ();\n-#endif\n-\n-#define NULLP (char *)0\n+# if HAVE_STRING_H\n+#  include <string.h>\n+# else\n+#  if HAVE_STRINGS_H\n+#   include <strings.h>\n+#  endif\n+# endif\n \n /* VARARGS */\n #ifdef ANSI_PROTOTYPES\n@@ -81,7 +80,7 @@ concat (va_alist)\n      va_dcl\n #endif\n {\n-  register int length;\n+  register size_t length;\n   register char *newstr;\n   register char *end;\n   register const char *arg;\n@@ -90,62 +89,45 @@ concat (va_alist)\n   const char *first;\n #endif\n \n-  /* First compute the size of the result and get sufficient memory. */\n-\n+  /* First compute the size of the result and get sufficient memory.  */\n #ifdef ANSI_PROTOTYPES\n   va_start (args, first);\n #else\n   va_start (args);\n   first = va_arg (args, const char *);\n #endif\n \n-  if (first == NULLP)\n-    length = 0;\n-  else\n-    {\n-      length = strlen (first);\n-      while ((arg = va_arg (args, const char *)) != NULLP)\n-\t{\n-\t  length += strlen (arg);\n-\t}\n-    }\n-  newstr = (char *) xmalloc (length + 1);\n+  length = 0;\n+  for (arg = first; arg ; arg = va_arg (args, const char *))\n+    length += strlen (arg);\n+\n   va_end (args);\n \n-  /* Now copy the individual pieces to the result string. */\n+  newstr = (char *) xmalloc (length + 1);\n \n-  if (newstr != NULLP)\n-    {\n+  /* Now copy the individual pieces to the result string. */\n #ifdef ANSI_PROTOTYPES\n-      va_start (args, first);\n+  va_start (args, first);\n #else\n-      va_start (args);\n-      first = va_arg (args, const char *);\n+  va_start (args);\n+  first = va_arg (args, const char *);\n #endif\n-      end = newstr;\n-      if (first != NULLP)\n-\t{\n-\t  arg = first;\n-\t  while (*arg)\n-\t    {\n-\t      *end++ = *arg++;\n-\t    }\n-\t  while ((arg = va_arg (args, const char *)) != NULLP)\n-\t    {\n-\t      while (*arg)\n-\t\t{\n-\t\t  *end++ = *arg++;\n-\t\t}\n-\t    }\n-\t}\n-      *end = '\\000';\n-      va_end (args);\n+\n+  end = newstr;\n+  for (arg = first; arg ; arg = va_arg (args, const char *))\n+    {\n+      length = strlen (arg);\n+      memcpy (end, arg, length);\n+      end += length;\n     }\n+  *end = '\\000';\n+  va_end (args);\n \n-  return (newstr);\n+  return newstr;\n }\n \n #ifdef MAIN\n+#define NULLP (char *)0\n \n /* Simple little test driver. */\n "}]}