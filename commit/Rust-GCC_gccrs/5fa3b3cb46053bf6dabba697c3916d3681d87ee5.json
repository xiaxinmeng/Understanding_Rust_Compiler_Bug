{"sha": "5fa3b3cb46053bf6dabba697c3916d3681d87ee5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZhM2IzY2I0NjA1M2JmNmRhYmJhNjk3YzM5MTZkMzY4MWQ4N2VlNQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2019-05-23T15:20:33Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2019-05-23T15:20:33Z"}, "message": "Add infrastructure to support -mcpu=future to represent a future\narchitecture level, as yet unnamed.\n\n[gcc]\n\n2019-05-22  Bill Schmidt  <wschmidt@linux.ibm.com>\n\t    Michael Meissner  <meissner@linux.ibm.com>\n\t    Segher Boessenkool  <segher@kernel.crashing.org>\n\n\t* config.gcc: Add future cpu.\n\t* config/rs6000/driver-rs6000.c (asm_names): Add future cpu.\n\t* config/rs6000/rs6000-cpus.def (ISA_FUTURE_MASKS_SERVER): New\n\t#define.\n\t(POWERPC_MASKS): Add OPTION_MASK_FUTURE.\n\t(RS6000_CPU): New instantiation for future cpu.\n\t* config/rs6000/rs6000-opts.h (enum processor_type): Add\n\tPROCESSOR_FUTURE.\n\t* config/rs6000/rs6000-string.c (expand_compare_loop): Treat\n\tPROCESSOR_FUTURE like PROCESSOR_POWER9 for now.\n\t* config/rs6000/rs6000-tables.opt: Regenerate.\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Treat\n\tPROCESSOR_FUTURE similarly to PROCESSOR_POWER9 for now.\n\t(rs6000_machine_from_flags): Handle future cpu.\n\t(rs6000_reassociation_width): Treat PROCESSOR_FUTURE like\n\tPROCESSOR_POWER9 for now.\n\t(rs6000_adjust_cost): Likewise.\n\t(rs6000_issue_rate): Likewise.\n\t(rs6000_register_move_cost): Likewise.\n\t(rs6000_opt_mask): Add entry for future.\n\t* config/rs6000/rs6000.h (ASM_CPU_SPEC): Add future cpu.\n\t(MASK_FUTURE): New #define.\n\t* config/rs6000/rs6000.md (define_attr \"cpu\"): Add future cpu.\n\t* config/rs6000/rs6000.opt (mfuture): New target option.\n\t* doc/invoke.texi (mcpu): Add future cpu.\n\n[gcc/testsuite]\n\n2019-05-22  Bill Schmidt  <wschmidt@linux.ibm.com>\n\n\t* gcc.target/powerpc/cpu-future.c: New test.\n\n\nCo-Authored-By: Michael Meissner <meissner@linux.ibm.com>\nCo-Authored-By: Segher Boessenkool <segher@kernel.crashing.org>\n\nFrom-SVN: r271567", "tree": {"sha": "d22552562b9a636207bc9c859309e2a1358a5aa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d22552562b9a636207bc9c859309e2a1358a5aa4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fa3b3cb46053bf6dabba697c3916d3681d87ee5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fa3b3cb46053bf6dabba697c3916d3681d87ee5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fa3b3cb46053bf6dabba697c3916d3681d87ee5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fa3b3cb46053bf6dabba697c3916d3681d87ee5/comments", "author": null, "committer": null, "parents": [{"sha": "aa573a6a3e165632103f2f8defb9768106db6a61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa573a6a3e165632103f2f8defb9768106db6a61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa573a6a3e165632103f2f8defb9768106db6a61"}], "stats": {"total": 85, "additions": 79, "deletions": 6}, "files": [{"sha": "3b91d4befab3d45e1a079c7c5adff88f65814d17", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa3b3cb46053bf6dabba697c3916d3681d87ee5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa3b3cb46053bf6dabba697c3916d3681d87ee5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5fa3b3cb46053bf6dabba697c3916d3681d87ee5", "patch": "@@ -1,3 +1,33 @@\n+2019-05-23  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\t    Michael Meissner  <meissner@linux.ibm.com>\n+\t    Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config.gcc: Add future cpu.\n+\t* config/rs6000/driver-rs6000.c (asm_names): Add future cpu.\n+\t* config/rs6000/rs6000-cpus.def (ISA_FUTURE_MASKS_SERVER): New\n+\t#define.\n+\t(POWERPC_MASKS): Add OPTION_MASK_FUTURE.\n+\t(RS6000_CPU): New instantiation for future cpu.\n+\t* config/rs6000/rs6000-opts.h (enum processor_type): Add\n+\tPROCESSOR_FUTURE.\n+\t* config/rs6000/rs6000-string.c (expand_compare_loop): Treat\n+\tPROCESSOR_FUTURE like PROCESSOR_POWER9 for now.\n+\t* config/rs6000/rs6000-tables.opt: Regenerate.\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Treat\n+\tPROCESSOR_FUTURE similarly to PROCESSOR_POWER9 for now.\n+\t(rs6000_machine_from_flags): Handle future cpu.\n+\t(rs6000_reassociation_width): Treat PROCESSOR_FUTURE like\n+\tPROCESSOR_POWER9 for now.\n+\t(rs6000_adjust_cost): Likewise.\n+\t(rs6000_issue_rate): Likewise.\n+\t(rs6000_register_move_cost): Likewise.\n+\t(rs6000_opt_masks): Add entry for future.\n+\t* config/rs6000/rs6000.h (ASM_CPU_SPEC): Add future cpu.\n+\t(MASK_FUTURE): New #define.\n+\t* config/rs6000/rs6000.md (define_attr \"cpu\"): Add future cpu.\n+\t* config/rs6000/rs6000.opt (mfuture): New target option.\n+\t* doc/invoke.texi (mcpu): Add future cpu.\n+\n 2019-05-23  Martin Liska  <mliska@suse.cz>\n \n \tPR c++/90587"}, {"sha": "09d305457e4042e6c44e1bc857b178832e191cb4", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa3b3cb46053bf6dabba697c3916d3681d87ee5/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa3b3cb46053bf6dabba697c3916d3681d87ee5/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=5fa3b3cb46053bf6dabba697c3916d3681d87ee5", "patch": "@@ -506,7 +506,7 @@ powerpc*-*-*)\n \textra_headers=\"${extra_headers} ppu_intrinsics.h spu2vmx.h vec_types.h si2vmx.h\"\n \textra_headers=\"${extra_headers} amo.h\"\n \tcase x$with_cpu in\n-\t    xpowerpc64|xdefault64|x6[23]0|x970|xG5|xpower[3456789]|xpower6x|xrs64a|xcell|xa2|xe500mc64|xe5500|xe6500)\n+\t    xpowerpc64|xdefault64|x6[23]0|x970|xG5|xpower[3456789]|xpower6x|xrs64a|xcell|xa2|xe500mc64|xe5500|xe6500|xfuture)\n \t\tcpu_is_64bit=yes\n \t\t;;\n \tesac"}, {"sha": "cd6c889e3681be6216768f728f3d59b279352fc5", "filename": "gcc/config/rs6000/driver-rs6000.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa3b3cb46053bf6dabba697c3916d3681d87ee5/gcc%2Fconfig%2Frs6000%2Fdriver-rs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa3b3cb46053bf6dabba697c3916d3681d87ee5/gcc%2Fconfig%2Frs6000%2Fdriver-rs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdriver-rs6000.c?ref=5fa3b3cb46053bf6dabba697c3916d3681d87ee5", "patch": "@@ -457,6 +457,7 @@ static const struct asm_name asm_names[] = {\n   { \"630\",\t\"-m620\" },\n   { \"970\",\t\"-m970\" },\n   { \"G5\",\t\"-m970\" },\n+  { \"future\",\t\"-mfuture\" },\n   { NULL,\t\"\\\n   %{mvsx: -mpwr6; \\\n     maltivec: -m970; \\\n@@ -520,6 +521,7 @@ static const struct asm_name asm_names[] = {\n   { \"e5500\",\t\"-me5500\" },\n   { \"e6500\",\t\"-me6500\" },\n   { \"titan\",\t\"-mtitan\" },\n+  { \"future\",\t\"-mfuture\" },\n   { NULL,\t\"\\\n %{mpower9-vector: -mpower9; \\\n   mpower8-vector|mcrypto|mdirect-move|mhtm: -mpower8; \\"}, {"sha": "6220f2bdd593e324c0ef1a0a91629ecfe6f24577", "filename": "gcc/config/rs6000/rs6000-cpus.def", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa3b3cb46053bf6dabba697c3916d3681d87ee5/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa3b3cb46053bf6dabba697c3916d3681d87ee5/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def?ref=5fa3b3cb46053bf6dabba697c3916d3681d87ee5", "patch": "@@ -72,6 +72,10 @@\n \t\t\t\t | OPTION_MASK_P9_VECTOR\t\t\\\n \t\t\t\t | OPTION_MASK_DIRECT_MOVE)\n \n+/* Support for a future processor's features.  */\n+#define ISA_FUTURE_MASKS_SERVER\t(ISA_3_0_MASKS_SERVER\t\t\t\\\n+\t\t\t\t | OPTION_MASK_FUTURE)\n+\n /* Flags that need to be turned off if -mno-power9-vector.  */\n #define OTHER_P9_VECTOR_MASKS\t(OPTION_MASK_FLOAT128_HW\t\t\\\n \t\t\t\t | OPTION_MASK_P9_MINMAX)\n@@ -112,6 +116,7 @@\n \t\t\t\t | OPTION_MASK_FLOAT128_HW\t\t\\\n \t\t\t\t | OPTION_MASK_FLOAT128_KEYWORD\t\t\\\n \t\t\t\t | OPTION_MASK_FPRND\t\t\t\\\n+\t\t\t\t | OPTION_MASK_FUTURE\t\t\t\\\n \t\t\t\t | OPTION_MASK_HTM\t\t\t\\\n \t\t\t\t | OPTION_MASK_ISEL\t\t\t\\\n \t\t\t\t | OPTION_MASK_MFCRF\t\t\t\\\n@@ -227,3 +232,5 @@ RS6000_CPU (\"powerpc\", PROCESSOR_POWERPC, 0)\n RS6000_CPU (\"powerpc64\", PROCESSOR_POWERPC64, MASK_PPC_GFXOPT | MASK_POWERPC64)\n RS6000_CPU (\"powerpc64le\", PROCESSOR_POWER8, MASK_POWERPC64 | ISA_2_7_MASKS_SERVER)\n RS6000_CPU (\"rs64\", PROCESSOR_RS64A, MASK_PPC_GFXOPT | MASK_POWERPC64)\n+RS6000_CPU (\"future\", PROCESSOR_FUTURE, MASK_POWERPC64\n+\t    | ISA_FUTURE_MASKS_SERVER)"}, {"sha": "ae877bc550c776da902d95f12cdfc734b1735a2b", "filename": "gcc/config/rs6000/rs6000-opts.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa3b3cb46053bf6dabba697c3916d3681d87ee5/gcc%2Fconfig%2Frs6000%2Frs6000-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa3b3cb46053bf6dabba697c3916d3681d87ee5/gcc%2Fconfig%2Frs6000%2Frs6000-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-opts.h?ref=5fa3b3cb46053bf6dabba697c3916d3681d87ee5", "patch": "@@ -62,6 +62,8 @@ enum processor_type\n    PROCESSOR_POWER8,\n    PROCESSOR_POWER9,\n \n+   PROCESSOR_FUTURE,\n+\n    PROCESSOR_RS64A,\n    PROCESSOR_MPCCORE,\n    PROCESSOR_CELL,"}, {"sha": "b9391855e16100a154acefb267673030ee47a108", "filename": "gcc/config/rs6000/rs6000-string.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa3b3cb46053bf6dabba697c3916d3681d87ee5/gcc%2Fconfig%2Frs6000%2Frs6000-string.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa3b3cb46053bf6dabba697c3916d3681d87ee5/gcc%2Fconfig%2Frs6000%2Frs6000-string.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-string.c?ref=5fa3b3cb46053bf6dabba697c3916d3681d87ee5", "patch": "@@ -963,6 +963,7 @@ expand_compare_loop (rtx operands[])\n \t  max_bytes = 64;\n       break;\n     case PROCESSOR_POWER9:\n+    case PROCESSOR_FUTURE:\n       if (bytes_is_const)\n \tmax_bytes = 191;\n       else"}, {"sha": "911ed0923b9efefe010cd31c97c0d00bdfe476f8", "filename": "gcc/config/rs6000/rs6000-tables.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa3b3cb46053bf6dabba697c3916d3681d87ee5/gcc%2Fconfig%2Frs6000%2Frs6000-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa3b3cb46053bf6dabba697c3916d3681d87ee5/gcc%2Fconfig%2Frs6000%2Frs6000-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-tables.opt?ref=5fa3b3cb46053bf6dabba697c3916d3681d87ee5", "patch": "@@ -194,3 +194,6 @@ Enum(rs6000_cpu_opt_value) String(powerpc64le) Value(54)\n EnumValue\n Enum(rs6000_cpu_opt_value) String(rs64) Value(55)\n \n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(future) Value(56)\n+"}, {"sha": "8ad59ecb481fdca8550354cb69f20d6d763a2c01", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa3b3cb46053bf6dabba697c3916d3681d87ee5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa3b3cb46053bf6dabba697c3916d3681d87ee5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=5fa3b3cb46053bf6dabba697c3916d3681d87ee5", "patch": "@@ -4436,6 +4436,7 @@ rs6000_option_override_internal (bool global_init_p)\n \t\t\t&& rs6000_tune != PROCESSOR_POWER7\n \t\t\t&& rs6000_tune != PROCESSOR_POWER8\n \t\t\t&& rs6000_tune != PROCESSOR_POWER9\n+\t\t\t&& rs6000_tune != PROCESSOR_FUTURE\n \t\t\t&& rs6000_tune != PROCESSOR_PPCA2\n \t\t\t&& rs6000_tune != PROCESSOR_CELL\n \t\t\t&& rs6000_tune != PROCESSOR_PPC476);\n@@ -4449,6 +4450,7 @@ rs6000_option_override_internal (bool global_init_p)\n \t\t\t\t || rs6000_tune == PROCESSOR_POWER7\n \t\t\t\t || rs6000_tune == PROCESSOR_POWER8\n \t\t\t\t || rs6000_tune == PROCESSOR_POWER9\n+\t\t\t\t || rs6000_tune == PROCESSOR_FUTURE\n \t\t\t\t || rs6000_tune == PROCESSOR_PPCE500MC\n \t\t\t\t || rs6000_tune == PROCESSOR_PPCE500MC64\n \t\t\t\t || rs6000_tune == PROCESSOR_PPCE5500\n@@ -4749,6 +4751,7 @@ rs6000_option_override_internal (bool global_init_p)\n \tbreak;\n \n       case PROCESSOR_POWER9:\n+      case PROCESSOR_FUTURE:\n \trs6000_cost = &power9_cost;\n \tbreak;\n \n@@ -5638,6 +5641,9 @@ static const char *rs6000_machine;\n static const char *\n rs6000_machine_from_flags (void)\n {\n+  if ((rs6000_isa_flags & (ISA_FUTURE_MASKS_SERVER & ~ISA_3_0_MASKS_SERVER))\n+      != 0)\n+    return \"future\";\n   if ((rs6000_isa_flags & (ISA_3_0_MASKS_SERVER & ~ISA_2_7_MASKS_SERVER)) != 0)\n     return \"power9\";\n   if ((rs6000_isa_flags & (ISA_2_7_MASKS_SERVER & ~ISA_2_6_MASKS_SERVER)) != 0)\n@@ -9109,6 +9115,7 @@ rs6000_reassociation_width (unsigned int opc ATTRIBUTE_UNUSED,\n     {\n     case PROCESSOR_POWER8:\n     case PROCESSOR_POWER9:\n+    case PROCESSOR_FUTURE:\n       if (DECIMAL_FLOAT_MODE_P (mode))\n \treturn 1;\n       if (VECTOR_MODE_P (mode))\n@@ -30183,7 +30190,8 @@ rs6000_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn, int cost,\n \t   some cycles later.  */\n \n \t/* Separate a load from a narrower, dependent store.  */\n-\tif ((rs6000_sched_groups || rs6000_tune == PROCESSOR_POWER9)\n+\tif ((rs6000_sched_groups || rs6000_tune == PROCESSOR_POWER9\n+\t     || rs6000_tune == PROCESSOR_FUTURE)\n \t    && GET_CODE (PATTERN (insn)) == SET\n \t    && GET_CODE (PATTERN (dep_insn)) == SET\n \t    && MEM_P (XEXP (PATTERN (insn), 1))\n@@ -30221,6 +30229,7 @@ rs6000_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn, int cost,\n \t\t || rs6000_tune == PROCESSOR_POWER7\n \t\t || rs6000_tune == PROCESSOR_POWER8\n \t\t || rs6000_tune == PROCESSOR_POWER9\n+\t\t || rs6000_tune == PROCESSOR_FUTURE\n                  || rs6000_tune == PROCESSOR_CELL)\n                 && recog_memoized (dep_insn)\n                 && (INSN_CODE (dep_insn) >= 0))\n@@ -30800,6 +30809,7 @@ rs6000_issue_rate (void)\n   case PROCESSOR_POWER8:\n     return 7;\n   case PROCESSOR_POWER9:\n+  case PROCESSOR_FUTURE:\n     return 6;\n   default:\n     return 1;\n@@ -34652,7 +34662,8 @@ rs6000_register_move_cost (machine_mode mode,\n \t\t can't be a nop, whereas with ideal register\n \t\t allocation a move within the same class might turn\n \t\t out to be a nop.  */\n-\t      if (rs6000_tune == PROCESSOR_POWER9)\n+\t      if (rs6000_tune == PROCESSOR_POWER9\n+\t\t  || rs6000_tune == PROCESSOR_FUTURE)\n \t\tret = 3 * hard_regno_nregs (FIRST_GPR_REGNO, mode);\n \t      else\n \t\tret = 4 * hard_regno_nregs (FIRST_GPR_REGNO, mode);\n@@ -36254,6 +36265,7 @@ static struct rs6000_opt_mask const rs6000_opt_masks[] =\n   { \"float128\",\t\t\tOPTION_MASK_FLOAT128_KEYWORD,\tfalse, true  },\n   { \"float128-hardware\",\tOPTION_MASK_FLOAT128_HW,\tfalse, true  },\n   { \"fprnd\",\t\t\tOPTION_MASK_FPRND,\t\tfalse, true  },\n+  { \"future\",\t\t\tOPTION_MASK_FUTURE,\t\tfalse, true  },\n   { \"hard-dfp\",\t\t\tOPTION_MASK_DFP,\t\tfalse, true  },\n   { \"htm\",\t\t\tOPTION_MASK_HTM,\t\tfalse, true  },\n   { \"isel\",\t\t\tOPTION_MASK_ISEL,\t\tfalse, true  },"}, {"sha": "335d75ae85fec93835f455da73dde0128beba963", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa3b3cb46053bf6dabba697c3916d3681d87ee5/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa3b3cb46053bf6dabba697c3916d3681d87ee5/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=5fa3b3cb46053bf6dabba697c3916d3681d87ee5", "patch": "@@ -138,6 +138,7 @@\n   mcpu=e5500: -me5500; \\\n   mcpu=e6500: -me6500; \\\n   mcpu=titan: -mtitan; \\\n+  mcpu=future: -mfuture; \\\n   !mcpu*: %{mpower9-vector: -mpower9; \\\n \t    mpower8-vector|mcrypto|mdirect-move|mhtm: -mpower8; \\\n \t    mvsx: -mpower7; \\\n@@ -524,6 +525,7 @@ extern int rs6000_vector_align[];\n #define MASK_STRICT_ALIGN\t\tOPTION_MASK_STRICT_ALIGN\n #define MASK_UPDATE\t\t\tOPTION_MASK_UPDATE\n #define MASK_VSX\t\t\tOPTION_MASK_VSX\n+#define MASK_FUTURE\t\t\tOPTION_MASK_FUTURE\n \n #ifndef IN_LIBGCC2\n #define MASK_POWERPC64\t\t\tOPTION_MASK_POWERPC64"}, {"sha": "71613e213843d97335eb750114d7ae32bc28b799", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa3b3cb46053bf6dabba697c3916d3681d87ee5/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa3b3cb46053bf6dabba697c3916d3681d87ee5/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=5fa3b3cb46053bf6dabba697c3916d3681d87ee5", "patch": "@@ -261,7 +261,7 @@\n    ppc750,ppc7400,ppc7450,\n    ppc403,ppc405,ppc440,ppc476,\n    ppc8540,ppc8548,ppce300c2,ppce300c3,ppce500mc,ppce500mc64,ppce5500,ppce6500,\n-   power4,power5,power6,power7,power8,power9,\n+   power4,power5,power6,power7,power8,power9,future,\n    rs64a,mpccore,cell,ppca2,titan\"\n   (const (symbol_ref \"(enum attr_cpu) rs6000_tune\")))\n "}, {"sha": "196e75d7009a4eece11381e10e4381be85101a37", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa3b3cb46053bf6dabba697c3916d3681d87ee5/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa3b3cb46053bf6dabba697c3916d3681d87ee5/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=5fa3b3cb46053bf6dabba697c3916d3681d87ee5", "patch": "@@ -569,3 +569,7 @@ long rs6000_stack_protector_guard_offset = 0\n ;; branches via the CTR.\n mspeculate-indirect-jumps\n Target Undocumented Var(rs6000_speculate_indirect_jumps) Init(1) Save\n+\n+mfuture\n+Target Report Mask(FUTURE) Var(rs6000_isa_flags)\n+Use instructions for a future architecture."}, {"sha": "61645044504964e0ba30e34f57b6ff2376d9ab69", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa3b3cb46053bf6dabba697c3916d3681d87ee5/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa3b3cb46053bf6dabba697c3916d3681d87ee5/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5fa3b3cb46053bf6dabba697c3916d3681d87ee5", "patch": "@@ -24088,8 +24088,8 @@ Supported values for @var{cpu_type} are @samp{401}, @samp{403},\n @samp{e6500}, @samp{ec603e}, @samp{G3}, @samp{G4}, @samp{G5},\n @samp{titan}, @samp{power3}, @samp{power4}, @samp{power5}, @samp{power5+},\n @samp{power6}, @samp{power6x}, @samp{power7}, @samp{power8},\n-@samp{power9}, @samp{powerpc}, @samp{powerpc64}, @samp{powerpc64le},\n-@samp{rs64}, and @samp{native}.\n+@samp{power9}, @samp{future}, @samp{powerpc}, @samp{powerpc64},\n+@samp{powerpc64le}, @samp{rs64}, and @samp{native}.\n \n @option{-mcpu=powerpc}, @option{-mcpu=powerpc64}, and\n @option{-mcpu=powerpc64le} specify pure 32-bit PowerPC (either"}, {"sha": "7746fbeb4ee5b84527f6063b5cbcfe592703ba4a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa3b3cb46053bf6dabba697c3916d3681d87ee5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa3b3cb46053bf6dabba697c3916d3681d87ee5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5fa3b3cb46053bf6dabba697c3916d3681d87ee5", "patch": "@@ -1,3 +1,7 @@\n+2019-05-23  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/cpu-future.c: New test.\n+\n 2019-05-23  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/88440"}, {"sha": "d0725867ffa5b12d35d8c4c386404dc225f8dfd8", "filename": "gcc/testsuite/gcc.target/powerpc/cpu-future.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa3b3cb46053bf6dabba697c3916d3681d87ee5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcpu-future.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa3b3cb46053bf6dabba697c3916d3681d87ee5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcpu-future.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcpu-future.c?ref=5fa3b3cb46053bf6dabba697c3916d3681d87ee5", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future -O2\" } */\n+\n+/* Ensure -mcpu=future compiles cleanly.  */\n+\n+void x (void) { }"}]}