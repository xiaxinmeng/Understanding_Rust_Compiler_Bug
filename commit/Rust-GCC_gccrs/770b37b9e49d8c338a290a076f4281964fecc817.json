{"sha": "770b37b9e49d8c338a290a076f4281964fecc817", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzcwYjM3YjllNDlkOGMzMzhhMjkwYTA3NmY0MjgxOTY0ZmVjYzgxNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-09-04T09:51:33Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-09-04T09:51:33Z"}, "message": "predicates.md (sse_reg_operand): New predicate.\n\n\t* config/i386/predicates.md (sse_reg_operand): New predicate.\n\t* config/i386/i386.md (TFmode push splitter): Use sse_reg_operand\n\tpredicate for operand 1.\n\t(XFmode push splitter): Use fp_register_operand predicate\n\tfor operand 1.\n\t(*dummy_extendsfdf2, *dummy_extendsfxf2): Remove disabled patterns.\n\t(SF-DF float_extend push splitter): Add reload_completed insn\n\tpredicate.\n\t({SF,DF}-XF float_extend_push splitter): Macroize splitter using\n\tMODEF mode macro.  Add reload_completed insn predicate.\n\nFrom-SVN: r163857", "tree": {"sha": "07487f3f6ade846bbbb4d956d435b51fe67d3a6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07487f3f6ade846bbbb4d956d435b51fe67d3a6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/770b37b9e49d8c338a290a076f4281964fecc817", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/770b37b9e49d8c338a290a076f4281964fecc817", "html_url": "https://github.com/Rust-GCC/gccrs/commit/770b37b9e49d8c338a290a076f4281964fecc817", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/770b37b9e49d8c338a290a076f4281964fecc817/comments", "author": null, "committer": null, "parents": [{"sha": "b6ff8128de0583a91126718e81c48320aad243ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6ff8128de0583a91126718e81c48320aad243ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6ff8128de0583a91126718e81c48320aad243ce"}], "stats": {"total": 71, "additions": 34, "deletions": 37}, "files": [{"sha": "4922fa73940c6d54fe5c3c31f4d0fa856f3b93f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770b37b9e49d8c338a290a076f4281964fecc817/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770b37b9e49d8c338a290a076f4281964fecc817/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=770b37b9e49d8c338a290a076f4281964fecc817", "patch": "@@ -1,3 +1,16 @@\n+2010-09-04  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/predicates.md (sse_reg_operand): New predicate.\n+\t* config/i386/i386.md (TFmode push splitter): Use sse_reg_operand\n+\tpredicate for operand 1.\n+\t(XFmode push splitter): Use fp_register_operand predicate\n+\tfor operand 1.\n+\t(*dummy_extendsfdf2, *dummy_extendsfxf2): Remove disabled patterns.\n+\t(SF-DF float_extend push splitter): Add reload_completed insn\n+\tpredicate.\n+\t({SF,DF}-XF float_extend_push splitter): Macroize splitter using\n+\tMODEF mode macro.  Add reload_completed insn predicate.\n+\n 2010-09-04  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* df.h (enum df_ref_class): Remove DF_REF_EXTRACT.\n@@ -58,8 +71,7 @@\n \t-mno-data-in-code and -mcode-xonly here.\n \t* defaults.h (DEFAULT_SWITCH_TAKES_ARG): Add 'd'.\n \t* gcc.c (option_map): Add \"j\" to --dump entry.\n-\t(translate_options): Don't translate -d to -foutput-class-dir=\n-\there.\n+\t(translate_options): Don't translate -d to -foutput-class-dir= here.\n \n 2010-09-03  Sebastian Pop  <sebastian.pop@amd.com>\n "}, {"sha": "c2fd671d78b4cca593cf6cf40898b76c02e31b84", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 15, "deletions": 35, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770b37b9e49d8c338a290a076f4281964fecc817/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770b37b9e49d8c338a290a076f4281964fecc817/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=770b37b9e49d8c338a290a076f4281964fecc817", "patch": "@@ -1685,7 +1685,7 @@\n ;; \"push a byte/word\".  But actually we use pushl, which has the effect\n ;; of rounding the amount pushed up to a word.\n \n-;; For 64BIT abi we always round up to 8 bytes.\n+;; For TARGET_64BIT we always round up to 8 bytes.\n (define_insn \"*push<mode>2_rex64\"\n   [(set (match_operand:SWI124 0 \"push_operand\" \"=X\")\n \t(match_operand:SWI124 1 \"nonmemory_no_elim_operand\" \"r<i>\"))]\n@@ -2586,6 +2586,13 @@\n    (set_attr \"unit\" \"sse,*,*\")\n    (set_attr \"mode\" \"TF,SI,SI\")])\n \n+(define_split\n+  [(set (match_operand:TF 0 \"push_operand\" \"\")\n+\t(match_operand:TF 1 \"sse_reg_operand\" \"\"))]\n+  \"TARGET_SSE2 && reload_completed\"\n+  [(set (reg:P SP_REG) (plus:P (reg:P SP_REG) (const_int -16)))\n+   (set (mem:TF (reg:P SP_REG)) (match_dup 1))])\n+\n (define_split\n   [(set (match_operand:TF 0 \"push_operand\" \"\")\n \t(match_operand:TF 1 \"general_operand\" \"\"))]\n@@ -2594,13 +2601,6 @@\n   [(const_int 0)]\n   \"ix86_split_long_move (operands); DONE;\")\n \n-(define_split\n-  [(set (match_operand:TF 0 \"push_operand\" \"\")\n-\t(match_operand:TF 1 \"any_fp_register_operand\" \"\"))]\n-  \"TARGET_SSE2\"\n-  [(set (reg:P SP_REG) (plus:P (reg:P SP_REG) (const_int -16)))\n-   (set (mem:TF (reg:P SP_REG)) (match_dup 1))])\n-\n (define_insn \"*pushxf\"\n   [(set (match_operand:XF 0 \"push_operand\" \"=<,<\")\n \t(match_operand:XF 1 \"general_no_elim_operand\" \"f,ro\"))]\n@@ -2633,7 +2633,7 @@\n \n (define_split\n   [(set (match_operand:XF 0 \"push_operand\" \"\")\n-\t(match_operand:XF 1 \"any_fp_register_operand\" \"\"))]\n+\t(match_operand:XF 1 \"fp_register_operand\" \"\"))]\n   \"reload_completed\"\n   [(set (reg:P SP_REG) (plus:P (reg:P SP_REG) (match_dup 2)))\n    (set (mem:XF (reg:P SP_REG)) (match_dup 1))]\n@@ -2643,7 +2643,7 @@\n   [(set (match_operand:XF 0 \"push_operand\" \"\")\n \t(match_operand:XF 1 \"general_operand\" \"\"))]\n   \"reload_completed\n-   && !ANY_FP_REG_P (operands[1])\"\n+   && !FP_REG_P (operands[1])\"\n   [(const_int 0)]\n   \"ix86_split_long_move (operands); DONE;\")\n \n@@ -3970,45 +3970,25 @@\n \f\n ;; Conversions between float and double.\n \n-;; These are all no-ops in the model used for the 80387.  So just\n-;; emit moves.\n+;; These are all no-ops in the model used for the 80387.\n+;; So just emit moves.\n \n ;; %%% Kill these when call knows how to work out a DFmode push earlier.\n-(define_insn \"*dummy_extendsfdf2\"\n-  [(set (match_operand:DF 0 \"push_operand\" \"=<\")\n-\t(float_extend:DF (match_operand:SF 1 \"nonimmediate_operand\" \"fY2\")))]\n-  \"0\"\n-  \"#\")\n-\n (define_split\n   [(set (match_operand:DF 0 \"push_operand\" \"\")\n \t(float_extend:DF (match_operand:SF 1 \"fp_register_operand\" \"\")))]\n-  \"\"\n+  \"reload_completed\"\n   [(set (reg:P SP_REG) (plus:P (reg:P SP_REG) (const_int -8)))\n    (set (mem:DF (reg:P SP_REG)) (float_extend:DF (match_dup 1)))])\n \n-(define_insn \"*dummy_extendsfxf2\"\n-  [(set (match_operand:XF 0 \"push_operand\" \"=<\")\n-\t(float_extend:XF (match_operand:SF 1 \"nonimmediate_operand\" \"f\")))]\n-  \"0\"\n-  \"#\")\n-\n (define_split\n   [(set (match_operand:XF 0 \"push_operand\" \"\")\n-\t(float_extend:XF (match_operand:SF 1 \"fp_register_operand\" \"\")))]\n-  \"\"\n+\t(float_extend:XF (match_operand:MODEF 1 \"fp_register_operand\" \"\")))]\n+  \"reload_completed\"\n   [(set (reg:P SP_REG) (plus:P (reg:P SP_REG) (match_dup 2)))\n    (set (mem:XF (reg:P SP_REG)) (float_extend:XF (match_dup 1)))]\n   \"operands[2] = GEN_INT (-GET_MODE_SIZE (XFmode));\")\n \n-(define_split\n-  [(set (match_operand:XF 0 \"push_operand\" \"\")\n-\t(float_extend:XF (match_operand:DF 1 \"fp_register_operand\" \"\")))]\n-  \"\"\n-  [(set (reg:P SP_REG) (plus:P (reg:P SP_REG) (match_dup 2)))\n-   (set (mem:DF (reg:P SP_REG)) (float_extend:XF (match_dup 1)))]\n-  \"operands[2] = GEN_INT (-GET_MODE_SIZE (XFmode));\")\n-\n (define_expand \"extendsfdf2\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"\")\n         (float_extend:DF (match_operand:SF 1 \"general_operand\" \"\")))]"}, {"sha": "2f09f64e5ae02026b4fcc82e368d064dc1d31b7e", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770b37b9e49d8c338a290a076f4281964fecc817/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770b37b9e49d8c338a290a076f4281964fecc817/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=770b37b9e49d8c338a290a076f4281964fecc817", "patch": "@@ -43,6 +43,11 @@\n   (and (match_code \"reg\")\n        (match_test \"MMX_REGNO_P (REGNO (op))\")))\n \n+;; True if the operand is an SSE register.\n+(define_predicate \"sse_reg_operand\"\n+  (and (match_code \"reg\")\n+       (match_test \"SSE_REGNO_P (REGNO (op))\")))\n+\n ;; True if the operand is a Q_REGS class register.\n (define_predicate \"q_regs_operand\"\n   (match_operand 0 \"register_operand\")"}]}