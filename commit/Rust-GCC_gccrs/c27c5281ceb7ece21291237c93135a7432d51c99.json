{"sha": "c27c5281ceb7ece21291237c93135a7432d51c99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI3YzUyODFjZWI3ZWNlMjEyOTEyMzdjOTMxMzVhNzQzMmQ1MWM5OQ==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-04-20T23:38:22Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-04-20T23:38:22Z"}, "message": "(init_reg_sets_1): Make static.\n\n(init_reg_modes): New function.\n(init_regs): Likewise.\n\nFrom-SVN: r7104", "tree": {"sha": "e59a3e90f0fe631e21a5f67c29258476de3b9719", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e59a3e90f0fe631e21a5f67c29258476de3b9719"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c27c5281ceb7ece21291237c93135a7432d51c99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c27c5281ceb7ece21291237c93135a7432d51c99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c27c5281ceb7ece21291237c93135a7432d51c99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c27c5281ceb7ece21291237c93135a7432d51c99/comments", "author": null, "committer": null, "parents": [{"sha": "34d0205f1735df038f2b7122fbf526a144cc05e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34d0205f1735df038f2b7122fbf526a144cc05e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34d0205f1735df038f2b7122fbf526a144cc05e0"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "593f3a950844ab7449bd38953ecd68026d53c70b", "filename": "gcc/regclass.c", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c27c5281ceb7ece21291237c93135a7432d51c99/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c27c5281ceb7ece21291237c93135a7432d51c99/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=c27c5281ceb7ece21291237c93135a7432d51c99", "patch": "@@ -356,7 +356,7 @@ init_reg_sets ()\n /* After switches have been processed, which perhaps alter\n    `fixed_regs' and `call_used_regs', convert them to HARD_REG_SETs.  */\n \n-void\n+static void\n init_reg_sets_1 ()\n {\n   register int i;\n@@ -398,17 +398,35 @@ init_reg_sets_1 ()\n       if (call_fixed_regs[i])\n \tSET_HARD_REG_BIT (call_fixed_reg_set, i);\n     }\n+}\n+\n+/* Compute the table of register modes.\n+   These values are used to record death information for individual registers\n+   (as opposed to a multi-register mode).  */\n \n-  /* Compute the table of register modes.\n-     These values are used to record death information for individual registers\n-     (as opposed to a multi-register mode).\n-     This can't be done until HARD_REGNO_NREGS and HARD_REGNO_MODE_OK are\n-     usable which is after OVERRIDE_OPTIONS on some targets.  */\n+static void\n+init_reg_modes ()\n+{\n+  register int i;\n \n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n     reg_raw_mode[i] = choose_hard_reg_mode (i, 1);\n }\n \n+/* Finish initializing the register sets and\n+   initialize the register modes.  */\n+\n+void\n+init_regs ()\n+{\n+  /* This finishes what was started by init_reg_sets, but couldn't be done\n+     until after register usage was specified.  */\n+  if (!output_bytecode)\n+    init_reg_sets_1 ();\n+\n+  init_reg_modes ();\n+}\n+\n /* Return a machine mode that is legitimate for hard reg REGNO and large\n    enough to save nregs.  If we can't find one, return VOIDmode.  */\n "}]}