{"sha": "82e5048e70ef790559ba768132b4afd266a30fee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJlNTA0OGU3MGVmNzkwNTU5YmE3NjgxMzJiNGFmZDI2NmEzMGZlZQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-21T00:16:29Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-21T00:16:29Z"}, "message": "Daily bump.", "tree": {"sha": "e86b021406176a1e7f4baa3e1d8e340566926a42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e86b021406176a1e7f4baa3e1d8e340566926a42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82e5048e70ef790559ba768132b4afd266a30fee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82e5048e70ef790559ba768132b4afd266a30fee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82e5048e70ef790559ba768132b4afd266a30fee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82e5048e70ef790559ba768132b4afd266a30fee/comments", "author": null, "committer": null, "parents": [{"sha": "81a3f3d1b6fecc10ba8c460644dfb9ebabbb9eec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81a3f3d1b6fecc10ba8c460644dfb9ebabbb9eec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81a3f3d1b6fecc10ba8c460644dfb9ebabbb9eec"}], "stats": {"total": 422, "additions": 421, "deletions": 1}, "files": [{"sha": "64743bc0642db82cb9021f2154d87f918c9a590b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e5048e70ef790559ba768132b4afd266a30fee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e5048e70ef790559ba768132b4afd266a30fee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=82e5048e70ef790559ba768132b4afd266a30fee", "patch": "@@ -1,3 +1,130 @@\n+2020-11-20  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-call.c (rs6000_expand_builtin): Add missing\n+\tXSCMP* cases for IEEE 128-bit long double.\n+\n+2020-11-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/97918\n+\t* dwarf2out.c (dwarf2out_early_finish): flush_limbo_die_list\n+\tafter gen_scheduled_generic_parms_dies.\n+\n+2020-11-20  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97879\n+\t* tree-core.h (enum attribute_flags): Add ATTR_FLAG_INTERNAL.\n+\n+2020-11-20  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-icf-gimple.c (func_checker::hash_operand): Improve hashing of\n+\tdecls.\n+\n+2020-11-20  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-icf-gimple.c (func_checker::compare_decl): Do not compare types\n+\tof local variables.\n+\n+2020-11-20  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* doc/invoke.texi: Replace a couple of @code with @command\n+\n+2020-11-20  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* tree-vect-slp.c (vectorizable_slp_permutation): Update types on nodes\n+\twhen needed.\n+\n+2020-11-20  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (maybe_push_to_hybrid_worklist): New function.\n+\t(vect_detect_hybrid_slp): Use it.  Perform a backward walk\n+\tover the IL.\n+\n+2020-11-20  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_print_slp_tree): Also dump\n+\tSLP_TREE_REPRESENTATIVE.\n+\n+2020-11-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libstdc++/88101\n+\t* builtins.def (BUILT_IN_CLEAR_PADDING): New built-in function.\n+\t* gimplify.c (gimplify_call_expr): Rewrite single argument\n+\tBUILT_IN_CLEAR_PADDING into two-argument variant.\n+\t* gimple-fold.c (clear_padding_unit, clear_padding_buf_size): New\n+\tconst variables.\n+\t(struct clear_padding_struct): New type.\n+\t(clear_padding_flush, clear_padding_add_padding,\n+\tclear_padding_emit_loop, clear_padding_type,\n+\tclear_padding_union, clear_padding_real_needs_padding_p,\n+\tclear_padding_type_may_have_padding_p,\n+\tgimple_fold_builtin_clear_padding): New functions.\n+\t(gimple_fold_builtin): Handle BUILT_IN_CLEAR_PADDING.\n+\t* doc/extend.texi (__builtin_clear_padding): Document.\n+\n+2020-11-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/97528\n+\t* config/arm/arm.c (neon_vector_mem_operand): For POST_MODIFY, require\n+\tfirst POST_MODIFY operand is a REG and is equal to the first operand\n+\tof PLUS.\n+\n+2020-11-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gimple-ssa-store-merging.c (struct merged_store_group): Add\n+\tnew 'consecutive' field.\n+\t(merged_store_group): Set it to true.\n+\t(do_merge): Set it to false if the store is not consecutive and\n+\tset string_concatenation to false in this case.\n+\t(merge_into): Call do_merge on entry.\n+\t(merge_overlapping): Likewise.\n+\n+2020-11-20  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-icf-gimple.c (func_checker::operand_equal_p): Fix comment.\n+\n+2020-11-20  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-icf-gimple.c (func_checker::hash_operand): Hash gimple clobber.\n+\t(func_checker::operand_equal_p): Special case gimple clobber.\n+\n+2020-11-20  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/97873\n+\t* config/i386/i386.md (*neg<mode>2_2): Rename from\n+\t\"*neg<mode>2_cmpz\".  Use CCGOCmode instead of CCZmode.\n+\t(*negsi2_zext): Rename from *negsi2_cmpz_zext.\n+\tUse CCGOCmode instead of CCZmode.\n+\t(*neg<mode>_ccc_1): New insn pattern.\n+\t(*neg<dwi>2_doubleword): Use *neg<mode>_ccc_1.\n+\t(abs<mode>2): Add FLAGS_REG clobber.\n+\tUse TARGET_CMOVE insn predicate.\n+\t(*abs<mode>2_1): New insn_and_split pattern.\n+\t(*absdi2_doubleword): Ditto.\n+\t(<maxmin:code><mode>3): Use SWI48x mode iterator.\n+\t(*<maxmin:code><mode>3): Use SWI48 mode iterator.\n+\t* config/i386/i386-features.c\n+\t(general_scalar_chain::compute_convert_gain): Handle ABS code.\n+\t(general_scalar_chain::convert_insn): Ditto.\n+\t(general_scalar_to_vector_candidate_p): Ditto.\n+\n+2020-11-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR other/97911\n+\t* configure.ac: In SERIAL_LIST use lang words without .serial\n+\tsuffix.  Change $lang.prev from a target to variable and instead\n+\tof depending on *.serial expand to the *.serial variable if\n+\tthe word is in the SERIAL_LIST at all, otherwise to nothing.\n+\t* configure: Regenerated.\n+\n+2020-11-20  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.md (p8_mtvsrd_df): Fix insn type.\n+\n+2020-11-20  Martin Uecker  <muecker@gwdg.de>\n+\n+\t* gimplify.c (gimplify_modify_expr_rhs): Optimizie\n+\tNOP_EXPRs that contain compound literals.\n+\n 2020-11-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/91029"}, {"sha": "1867e9391c318d9b83df0870d4ae5c4bca81b3c4", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e5048e70ef790559ba768132b4afd266a30fee/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e5048e70ef790559ba768132b4afd266a30fee/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=82e5048e70ef790559ba768132b4afd266a30fee", "patch": "@@ -1 +1 @@\n-20201120\n+20201121"}, {"sha": "01c02e3d394451ee1853ac724d9cd99946eacf20", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e5048e70ef790559ba768132b4afd266a30fee/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e5048e70ef790559ba768132b4afd266a30fee/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=82e5048e70ef790559ba768132b4afd266a30fee", "patch": "@@ -1,3 +1,17 @@\n+2020-11-20  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* adaint.c (__gnat_number_of_cpus): Check for the presence of\n+\t_SC_NPROCESSORS_ONLN rather than a list of OS-specific macros\n+\tto decide whether to use `sysconf'.\n+\n+2020-11-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR other/97911\n+\t* gcc-interface/Make-lang.in (ada.serial): Change from goal to a\n+\tvariable.\n+\t(.PHONY): Drop ada.serial and ada.prev.\n+\t(gnat1$(exeext)): Depend on $(ada.serial) rather than ada.serial.\n+\n 2020-11-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR ada/97805"}, {"sha": "518b13aecbe0641f342ce9952ed56adf81bd2da9", "filename": "gcc/brig/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e5048e70ef790559ba768132b4afd266a30fee/gcc%2Fbrig%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e5048e70ef790559ba768132b4afd266a30fee/gcc%2Fbrig%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2FChangeLog?ref=82e5048e70ef790559ba768132b4afd266a30fee", "patch": "@@ -1,3 +1,10 @@\n+2020-11-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR other/97911\n+\t* Make-lang.in (brig.serial): Change from goal to a variable.\n+\t(.PHONY): Drop brig.serial and brig.prev.\n+\t(brig1$(exeext)): Depend on $(brig.serial) rather than brig.serial.\n+\n 2020-11-18  Jakub Jelinek  <jakub@redhat.com>\n \n \t* Make-lang.in (brig.serial): New goal."}, {"sha": "0d1445f454ef0a58f9bc3d0121a7942924d337b7", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e5048e70ef790559ba768132b4afd266a30fee/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e5048e70ef790559ba768132b4afd266a30fee/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=82e5048e70ef790559ba768132b4afd266a30fee", "patch": "@@ -1,3 +1,20 @@\n+2020-11-20  Martin Sebor  <msebor@redhat.com>\n+\n+\t* c-warn.c (warn_parm_array_mismatch): Bail on invalid redeclarations\n+\twith fewer arguments.\n+\n+2020-11-20  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97879\n+\t* c-attribs.c (handle_access_attribute): Handle ATTR_FLAG_INTERNAL.\n+\tError out on invalid modes.\n+\n+2020-11-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libstdc++/88101\n+\t* c-common.c (check_builtin_function_arguments): Handle\n+\tBUILT_IN_CLEAR_PADDING.\n+\n 2020-11-18  Nathan Sidwell  <nathan@acm.org>\n \n \t* c-lex.c (c_lex_with_flags): CPP_HEADER_NAMEs can now be seen."}, {"sha": "c97a9f7c6b445bbb6231c322e3ae59db291509b0", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e5048e70ef790559ba768132b4afd266a30fee/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e5048e70ef790559ba768132b4afd266a30fee/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=82e5048e70ef790559ba768132b4afd266a30fee", "patch": "@@ -1,3 +1,18 @@\n+2020-11-20  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97879\n+\t* c-decl.c (start_function): Set ATTR_FLAG_INTERNAL in flags.\n+\n+2020-11-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR other/97911\n+\t* Make-lang.in (c.serial): Change from goal to a variable.\n+\t(.PHONY): Drop c.serial.\n+\n+2020-11-20  Martin Uecker  <muecker@gwdg.de>\n+\n+\t* c-typeck.c (convert_lvalue_to_rvalue): Drop qualifiers.\n+\n 2020-11-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/97860"}, {"sha": "bc3bbe3b51bd37e0c8aae0e953279f55a8f79ae0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e5048e70ef790559ba768132b4afd266a30fee/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e5048e70ef790559ba768132b4afd266a30fee/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=82e5048e70ef790559ba768132b4afd266a30fee", "patch": "@@ -1,3 +1,10 @@\n+2020-11-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR other/97911\n+\t* Make-lang.in (c++.serial): Change from goal to a variable.\n+\t(.PHONY): Drop c++.serial and c++.prev.\n+\t(cc1plus$(exeext)): Depend on $(c++.serial) rather than c++.serial.\n+\n 2020-11-19  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-tree.h (struct spec_entry): Moved from pt.c."}, {"sha": "ae1034e5ee073a0cf0b93b77311ef4b2586edcf8", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e5048e70ef790559ba768132b4afd266a30fee/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e5048e70ef790559ba768132b4afd266a30fee/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=82e5048e70ef790559ba768132b4afd266a30fee", "patch": "@@ -1,3 +1,10 @@\n+2020-11-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR other/97911\n+\t* Make-lang.in (d.serial): Change from goal to a variable.\n+\t(.PHONY): Drop d.serial and d.prev.\n+\t(d21$(exeext)): Depend on $(d.serial) rather than d.serial.\n+\n 2020-11-18  Jakub Jelinek  <jakub@redhat.com>\n \n \t* Make-lang.in (d.serial): New goal."}, {"sha": "998ad9c1c0807c81a03cd389e880331e6b3793c1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e5048e70ef790559ba768132b4afd266a30fee/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e5048e70ef790559ba768132b4afd266a30fee/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=82e5048e70ef790559ba768132b4afd266a30fee", "patch": "@@ -1,3 +1,11 @@\n+2020-11-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR other/97911\n+\t* Make-lang.in (fortran.serial): Change from goal to a variable.\n+\t(.PHONY): Drop fortran.serial and fortran.prev.\n+\t(f951$(exeext)): Depend on $(fortran.serial) rather than\n+\tfortran.serial.\n+\n 2020-11-18  Jakub Jelinek  <jakub@redhat.com>\n \n \t* Make-lang.in (fortran.serial): New goal."}, {"sha": "5ed46d6e60c7fccd5ef8cd03116b1fcdff38a3f9", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e5048e70ef790559ba768132b4afd266a30fee/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e5048e70ef790559ba768132b4afd266a30fee/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=82e5048e70ef790559ba768132b4afd266a30fee", "patch": "@@ -1,3 +1,10 @@\n+2020-11-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR other/97911\n+\t* Make-lang.in (go.serial): Change from goal to a variable.\n+\t(.PHONY): Drop go.serial and go.prev.\n+\t(go1$(exeext)): Depend on $(go.serial) rather than go.serial.\n+\n 2020-11-18  Jakub Jelinek  <jakub@redhat.com>\n \n \t* Make-lang.in (go.serial): New goal."}, {"sha": "28e33023bfc9f3f19aca5d06b37d45aa9059f080", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e5048e70ef790559ba768132b4afd266a30fee/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e5048e70ef790559ba768132b4afd266a30fee/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=82e5048e70ef790559ba768132b4afd266a30fee", "patch": "@@ -1,3 +1,12 @@\n+2020-11-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR other/97911\n+\t* Make-lang.in (jit.serial): Change from goal to a\n+\tvariable.\n+\t(.PHONY): Drop jit.serial and jit.prev.\n+\t($(LIBGCCJIT_FILENAME)): Depend on $(jit.serial) rather than\n+\tjit.serial.\n+\n 2020-11-18  Jakub Jelinek  <jakub@redhat.com>\n \n \t* Make-lang.in (jit.serial): New goal."}, {"sha": "25c90638d30e589714d9ade52ebd3e99af5a74a4", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e5048e70ef790559ba768132b4afd266a30fee/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e5048e70ef790559ba768132b4afd266a30fee/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=82e5048e70ef790559ba768132b4afd266a30fee", "patch": "@@ -1,3 +1,12 @@\n+2020-11-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR other/97911\n+\t* Make-lang.in (lto1.serial, lto2.serial): Change from goals to\n+\tvariables.\n+\t(.PHONY): Drop lto1.serial, lto2.serial, lto1.prev and lto2.prev.\n+\t($(LTO_EXE)): Depend on $(lto1.serial) rather than lto1.serial.\n+\t($(LTO_DUMP_EXE)): Depend on $(lto2.serial) rather than lto2.serial.\n+\n 2020-11-18  Jerry Clcanny  <a837940593@gmail.com>\n \n \t* lto-symtab.c (lto_symtab_merge_symbols): Fix typos in comment."}, {"sha": "3e83a4f7cfbe412122f063cd3caa9e496051cdf1", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e5048e70ef790559ba768132b4afd266a30fee/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e5048e70ef790559ba768132b4afd266a30fee/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=82e5048e70ef790559ba768132b4afd266a30fee", "patch": "@@ -1,3 +1,10 @@\n+2020-11-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR other/97911\n+\t* Make-lang.in (objc.serial): Change from goal to a variable.\n+\t(.PHONY): Drop objc.serial and objc.prev.\n+\t(cc1obj$(exeext)): Depend on $(objc.serial) rather than objc.serial.\n+\n 2020-11-18  Jakub Jelinek  <jakub@redhat.com>\n \n \t* Make-lang.in (objc.serial): New goal."}, {"sha": "0b257a96e6433d40301034925a0294b8f2b72c2f", "filename": "gcc/objcp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e5048e70ef790559ba768132b4afd266a30fee/gcc%2Fobjcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e5048e70ef790559ba768132b4afd266a30fee/gcc%2Fobjcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2FChangeLog?ref=82e5048e70ef790559ba768132b4afd266a30fee", "patch": "@@ -1,3 +1,11 @@\n+2020-11-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR other/97911\n+\t* Make-lang.in (obj-c++.serial): Change from goal to a variable.\n+\t(.PHONY): Drop obj-c++.serial and obj-c++.prev.\n+\t(cc1objplus$(exeext)): Depend on $(obj-c++.serial) rather than\n+\tobj-c++.serial.\n+\n 2020-11-18  Jakub Jelinek  <jakub@redhat.com>\n \n \t* Make-lang.in (obj-c++.serial): New goal."}, {"sha": "db07b73117c1ec3a19cd31f8da6e04a571bd83d1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e5048e70ef790559ba768132b4afd266a30fee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e5048e70ef790559ba768132b4afd266a30fee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=82e5048e70ef790559ba768132b4afd266a30fee", "patch": "@@ -1,3 +1,82 @@\n+2020-11-20  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* gcc.dg/nextafter-2.c: Include math.h.\n+\n+2020-11-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/97918\n+\t* g++.dg/debug/localclass2.C: New test.\n+\n+2020-11-20  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc.dg/attr-access-4.c: New test.\n+\n+2020-11-20  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97879\n+\t* gcc.dg/attr-access-3.c: New test.\n+\n+2020-11-20  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/pr97515.c: Check in ccp2, not evrp.\n+\n+2020-11-20  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\tPR target/97727\n+\t* gcc.target/aarch64/advsimd-intrinsics/bf16_vstN_lane_2.c: Relax\n+\tregexps.\n+\n+2020-11-20  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\tPR target/97726\n+\t* gcc.target/arm/simd/bf16_vldn_1.c: Relax regexps not to fail on\n+\tbig endian.\n+\t* gcc.target/arm/simd/vldn_lane_bf16_1.c: Likewise\n+\t* gcc.target/arm/simd/vmmla_1.c: Add -mfloat-abi=hard flag.\n+\n+2020-11-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libstdc++/88101\n+\t* c-c++-common/builtin-clear-padding-1.c: New test.\n+\t* c-c++-common/torture/builtin-clear-padding-1.c: New test.\n+\t* c-c++-common/torture/builtin-clear-padding-2.c: New test.\n+\t* c-c++-common/torture/builtin-clear-padding-3.c: New test.\n+\t* c-c++-common/torture/builtin-clear-padding-4.c: New test.\n+\t* c-c++-common/torture/builtin-clear-padding-5.c: New test.\n+\t* g++.dg/torture/builtin-clear-padding-1.C: New test.\n+\t* g++.dg/torture/builtin-clear-padding-2.C: New test.\n+\t* gcc.dg/builtin-clear-padding-1.c: New test.\n+\n+2020-11-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/97528\n+\t* gcc.target/arm/pr97528.c: New test.\n+\n+2020-11-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/opt90a.adb: New test.\n+\t* gnat.dg/opt90b.adb: Likewise.\n+\t* gnat.dg/opt90c.adb: Likewise.\n+\t* gnat.dg/opt90d.adb: Likewise.\n+\t* gnat.dg/opt90e.adb: Likewise.\n+\t* gnat.dg/opt90a_pkg.ads: New helper.\n+\t* gnat.dg/opt90b_pkg.ads: Likewise.\n+\t* gnat.dg/opt90c_pkg.ads: Likewise.\n+\t* gnat.dg/opt90d_pkg.ads: Likewise.\n+\t* gnat.dg/opt90e_pkg.ads: Likewise.\n+\n+2020-11-20  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/97873\n+\t* gcc.target/i386/pr97873.c: New test.\n+\t* gcc.target/i386/pr97873-1.c: New test.\n+\n+2020-11-20  Martin Uecker  <muecker@gwdg.de>\n+\n+\t* gcc.dg/cond-constqual-1.c: Adapt test.\n+\t* gcc.dg/lvalue-11.c: New test.\n+\t* gcc.dg/pr60195.c: Add warning.\n+\n 2020-11-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/91029"}, {"sha": "62a6914f68c90c64a75cf8fe2a5eb5610410ef20", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e5048e70ef790559ba768132b4afd266a30fee/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e5048e70ef790559ba768132b4afd266a30fee/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=82e5048e70ef790559ba768132b4afd266a30fee", "patch": "@@ -1,3 +1,8 @@\n+2020-11-20  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* unwind-dw2-fde-dip.c [__OpenBSD__ || __NetBSD__]\n+\t(USE_PT_GNU_EH_FRAME): Do not define if !TARGET_DL_ITERATE_PHDR.\n+\n 2020-11-18  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* config/msp430/lib2hw_mul.S (mult64_hw): New."}, {"sha": "9d92483e309f2859854dad9ef26a2458b0b1328c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e5048e70ef790559ba768132b4afd266a30fee/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e5048e70ef790559ba768132b4afd266a30fee/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=82e5048e70ef790559ba768132b4afd266a30fee", "patch": "@@ -1,3 +1,97 @@\n+2020-11-20  Thomas Rodgers  <trodgers@redhat.com>\n+\n+\t* include/Makefile.am (bits_headers): Add new header.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/bits/atomic_base.h (__atomic_flag::wait): Define.\n+\t(__atomic_flag::notify_one): Likewise.\n+\t(__atomic_flag::notify_all): Likewise.\n+\t(__atomic_base<_Itp>::wait): Likewise.\n+\t(__atomic_base<_Itp>::notify_one): Likewise.\n+\t(__atomic_base<_Itp>::notify_all): Likewise.\n+\t(__atomic_base<_Ptp*>::wait): Likewise.\n+\t(__atomic_base<_Ptp*>::notify_one): Likewise.\n+\t(__atomic_base<_Ptp*>::notify_all): Likewise.\n+\t(__atomic_impl::wait): Likewise.\n+\t(__atomic_impl::notify_one): Likewise.\n+\t(__atomic_impl::notify_all): Likewise.\n+\t(__atomic_float<_Fp>::wait): Likewise.\n+\t(__atomic_float<_Fp>::notify_one): Likewise.\n+\t(__atomic_float<_Fp>::notify_all): Likewise.\n+\t(__atomic_ref<_Tp>::wait): Likewise.\n+\t(__atomic_ref<_Tp>::notify_one): Likewise.\n+\t(__atomic_ref<_Tp>::notify_all): Likewise.\n+\t(atomic_wait<_Tp>): Likewise.\n+\t(atomic_wait_explicit<_Tp>): Likewise.\n+\t(atomic_notify_one<_Tp>): Likewise.\n+\t(atomic_notify_all<_Tp>): Likewise.\n+\t* include/bits/atomic_wait.h: New file.\n+\t* include/bits/atomic_timed_wait.h: New file.\n+\t* include/bits/semaphore_base.h: New file.\n+\t* include/std/atomic (atomic<bool>::wait): Define.\n+\t(atomic<bool>::wait_one): Likewise.\n+\t(atomic<bool>::wait_all): Likewise.\n+\t(atomic<_Tp>::wait): Likewise.\n+\t(atomic<_Tp>::wait_one): Likewise.\n+\t(atomic<_Tp>::wait_all): Likewise.\n+\t(atomic<_Tp*>::wait): Likewise.\n+\t(atomic<_Tp*>::wait_one): Likewise.\n+\t(atomic<_Tp*>::wait_all): Likewise.\n+\t* include/std/latch: New file.\n+\t* include/std/semaphore: New file.\n+\t* include/std/version: Add __cpp_lib_semaphore and\n+\t__cpp_lib_latch defines.\n+\t* testsuite/29_atomics/atomic/wait_notify/bool.cc: New test.\n+\t* testsuite/29_atomics/atomic/wait_notify/pointers.cc: Likewise.\n+\t* testsuite/29_atomics/atomic/wait_notify/generic.cc: Liekwise.\n+\t* testsuite/29_atomics/atomic_flag/wait_notify/1.cc: Likewise.\n+\t* testsuite/29_atomics/atomic_float/wait_notify.cc: Likewise.\n+\t* testsuite/29_atomics/atomic_integral/wait_notify.cc: Likewise.\n+\t* testsuite/29_atomics/atomic_ref/wait_notify.cc: Likewise.\n+\t* testsuite/30_threads/semaphore/1.cc: New test.\n+\t* testsuite/30_threads/semaphore/2.cc: Likewise.\n+\t* testsuite/30_threads/semaphore/least_max_value_neg.cc: Likewise.\n+\t* testsuite/30_threads/semaphore/try_acquire.cc: Likewise.\n+\t* testsuite/30_threads/semaphore/try_acquire_for.cc: Likewise.\n+\t* testsuite/30_threads/semaphore/try_acquire_posix.cc: Likewise.\n+\t* testsuite/30_threads/semaphore/try_acquire_until.cc: Likewise.\n+\t* testsuite/30_threads/latch/1.cc: New test.\n+\t* testsuite/30_threads/latch/2.cc: New test.\n+\t* testsuite/30_threads/latch/3.cc: New test.\n+\t* testsuite/util/atomic/wait_notify_util.h: New File.\n+\n+2020-11-20  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\tPR libstdc++/83938\n+\t* include/bits/stl_tempbuf.h (get_temporary_buffer): Change __len\n+\tcomputation in the loop to avoid truncation.\n+\t* include/bits/stl_algo.h:\n+\t(__inplace_merge): Take temporary buffer length from smallest range.\n+\t(__stable_sort): Limit temporary buffer length.\n+\t* testsuite/25_algorithms/inplace_merge/1.cc (test4): New.\n+\t* testsuite/performance/25_algorithms/stable_sort.cc: Test stable_sort\n+\tunder different heap memory conditions.\n+\t* testsuite/performance/25_algorithms/inplace_merge.cc: New test.\n+\n+2020-11-20  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/move.h (_GLIBCXX_FWDREF): New.\n+\t* include/bits/stl_tree.h: Adapt to use latter.\n+\t(_Rb_tree<>::_M_clone_node): Add _MoveValue template parameter.\n+\t(_Rb_tree<>::_M_mbegin): New.\n+\t(_Rb_tree<>::_M_begin): Use latter.\n+\t(_Rb_tree<>::_M_copy): Add _MoveValues template parameter.\n+\t* testsuite/23_containers/map/allocator/move_cons.cc: New test.\n+\t* testsuite/23_containers/multimap/allocator/move_cons.cc: New test.\n+\t* testsuite/23_containers/multiset/allocator/move_cons.cc: New test.\n+\t* testsuite/23_containers/set/allocator/move_cons.cc: New test.\n+\n+2020-11-20  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/92546\n+\t* include/std/regex (pmr::smatch, pmr::wsmatch): Declare using\n+\tunderlying __normal_iterator type, not nested typedef\n+\tbasic_string::const_iterator.\n+\n 2020-11-19  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/95989"}]}