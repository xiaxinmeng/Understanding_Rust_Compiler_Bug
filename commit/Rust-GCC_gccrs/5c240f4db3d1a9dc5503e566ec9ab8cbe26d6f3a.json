{"sha": "5c240f4db3d1a9dc5503e566ec9ab8cbe26d6f3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMyNDBmNGRiM2QxYTlkYzU1MDNlNTY2ZWM5YWI4Y2JlMjZkNmYzYQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-03-22T14:20:49Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-03-22T14:20:49Z"}, "message": "PR c/69993: improvements to wording of -Wmisleading-indentation\n\ngcc/c-family/ChangeLog:\n\tPR c/69993\n\t* c-indentation.c (warn_for_misleading_indentation): Rewrite the\n\tdiagnostic text, reversing the order of the warning and note so\n\tthat they appear in source order.\n\ngcc/testsuite/ChangeLog:\n\tPR c/69993\n\t* c-c++-common/Wmisleading-indentation-3.c: New test, based on\n\tWmisleading-indentation.c.\n\t* c-c++-common/Wmisleading-indentation.c: Update thoughout to\n\treflect change to diagnostic text and order of messages.\n\t* gcc.dg/plugin/location-overflow-test-2.c: Likewise.\n\nFrom-SVN: r234403", "tree": {"sha": "4ec7a98191c5579ee965a5da16e54b282da5cc8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ec7a98191c5579ee965a5da16e54b282da5cc8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c240f4db3d1a9dc5503e566ec9ab8cbe26d6f3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c240f4db3d1a9dc5503e566ec9ab8cbe26d6f3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c240f4db3d1a9dc5503e566ec9ab8cbe26d6f3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c240f4db3d1a9dc5503e566ec9ab8cbe26d6f3a/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "80f6631ba04be3d07df968ed338a98b4dc65d0ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80f6631ba04be3d07df968ed338a98b4dc65d0ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80f6631ba04be3d07df968ed338a98b4dc65d0ac"}], "stats": {"total": 304, "additions": 202, "deletions": 102}, "files": [{"sha": "9944759d90cbfe63652395d9fa7c345d55a9ee9e", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c240f4db3d1a9dc5503e566ec9ab8cbe26d6f3a/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c240f4db3d1a9dc5503e566ec9ab8cbe26d6f3a/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=5c240f4db3d1a9dc5503e566ec9ab8cbe26d6f3a", "patch": "@@ -1,3 +1,10 @@\n+2016-03-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/69993\n+\t* c-indentation.c (warn_for_misleading_indentation): Rewrite the\n+\tdiagnostic text, reversing the order of the warning and note so\n+\tthat they appear in source order.\n+\n 2016-03-17  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/69407"}, {"sha": "1da3f6824c1f5fcb9ed17dbcb823ef864b32aa79", "filename": "gcc/c-family/c-indentation.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c240f4db3d1a9dc5503e566ec9ab8cbe26d6f3a/gcc%2Fc-family%2Fc-indentation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c240f4db3d1a9dc5503e566ec9ab8cbe26d6f3a/gcc%2Fc-family%2Fc-indentation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-indentation.c?ref=5c240f4db3d1a9dc5503e566ec9ab8cbe26d6f3a", "patch": "@@ -602,10 +602,12 @@ warn_for_misleading_indentation (const token_indent_info &guard_tinfo,\n \t\t\t\t\t      body_tinfo,\n \t\t\t\t\t      next_tinfo))\n     {\n-      if (warning_at (next_tinfo.location, OPT_Wmisleading_indentation,\n-\t\t      \"statement is indented as if it were guarded by...\"))\n-        inform (guard_tinfo.location,\n-\t\t\"...this %qs clause, but it is not\",\n+      if (warning_at (guard_tinfo.location, OPT_Wmisleading_indentation,\n+\t\t      \"this %qs clause does not guard...\",\n+\t\t      guard_tinfo_to_string (guard_tinfo)))\n+\tinform (next_tinfo.location,\n+\t\t(\"...this statement, but the latter is misleadingly indented\"\n+\t\t \" as if it is guarded by the %qs\"),\n \t\tguard_tinfo_to_string (guard_tinfo));\n     }\n }"}, {"sha": "cbf14803368201524fe471dd71d1705be33a3e7a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c240f4db3d1a9dc5503e566ec9ab8cbe26d6f3a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c240f4db3d1a9dc5503e566ec9ab8cbe26d6f3a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5c240f4db3d1a9dc5503e566ec9ab8cbe26d6f3a", "patch": "@@ -1,3 +1,12 @@\n+2016-03-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/69993\n+\t* c-c++-common/Wmisleading-indentation-3.c: New test, based on\n+\tWmisleading-indentation.c.\n+\t* c-c++-common/Wmisleading-indentation.c: Update thoughout to\n+\treflect change to diagnostic text and order of messages.\n+\t* gcc.dg/plugin/location-overflow-test-2.c: Likewise.\n+\n 2016-03-22  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* g++.dg/ext/java-3.C: Don't compile on AIX."}, {"sha": "277a3885e219507a33bf4daa2f2230902f76d4bd", "filename": "gcc/testsuite/c-c++-common/Wmisleading-indentation-3.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c240f4db3d1a9dc5503e566ec9ab8cbe26d6f3a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmisleading-indentation-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c240f4db3d1a9dc5503e566ec9ab8cbe26d6f3a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmisleading-indentation-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmisleading-indentation-3.c?ref=5c240f4db3d1a9dc5503e566ec9ab8cbe26d6f3a", "patch": "@@ -0,0 +1,82 @@\n+/* Verify -Wmisleading-indentation with source-printing.\n+   This is a subset of Wmisleading-indentation.c.  */\n+\n+/* { dg-options \"-Wmisleading-indentation -fdiagnostics-show-caret\" } */\n+/* { dg-do compile } */\n+\n+extern int foo (int);\n+extern int bar (int, int);\n+extern int flagA;\n+extern int flagB;\n+extern int flagC;\n+extern int flagD;\n+\n+void\n+fn_5 (double *a, double *b, double *sum, double *prod)\n+{\n+  int i = 0;\n+  for (i = 0; i < 10; i++) /* { dg-warning \"3: this 'for' clause does not guard...\" } */\n+    sum[i] = a[i] * b[i];\n+    prod[i] = a[i] * b[i]; /* { dg-message \"5: ...this statement, but the latter is misleadingly indented as if it is guarded by the 'for'\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   for (i = 0; i < 10; i++)\n+   ^~~\n+   { dg-end-multiline-output \"\" } */\n+/* { dg-begin-multiline-output \"\" }\n+     prod[i] = a[i] * b[i];\n+     ^~~~\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+/* Based on CVE-2014-1266 aka \"goto fail\" */\n+int fn_6 (int a, int b, int c)\n+{\n+\tint err;\n+\n+\t/* ... */\n+\tif ((err = foo (a)) != 0)\n+\t\tgoto fail;\n+\tif ((err = foo (b)) != 0) /* { dg-message \"2: this 'if' clause does not guard...\" } */\n+\t\tgoto fail;\n+\t\tgoto fail; /* { dg-message \"3: ...this statement, but the latter is misleadingly indented as if it is guarded by the 'if'\" } */\n+\tif ((err = foo (c)) != 0)\n+\t\tgoto fail;\n+\t/* ... */\n+\n+/* { dg-begin-multiline-output \"\" }\n+  if ((err = foo (b)) != 0)\n+  ^~\n+   { dg-end-multiline-output \"\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   goto fail;\n+   ^~~~\n+   { dg-end-multiline-output \"\" } */\n+\n+fail:\n+\treturn err;\n+}\n+\n+#define FOR_EACH(VAR, START, STOP) \\\n+  for ((VAR) = (START); (VAR) < (STOP); (VAR++)) /* { dg-warning \"3: this 'for' clause does not guard...\" } */\n+\n+void fn_14 (void)\n+{\n+  int i;\n+  FOR_EACH (i, 0, 10) /* { dg-message \"in expansion of macro .FOR_EACH.\" } */\n+    foo (i);\n+    bar (i, i); /* { dg-message \"5: ...this statement, but the latter is misleadingly indented as if it is guarded by the 'for'\" } */\n+\n+/* { dg-begin-multiline-output \"\" }\n+   for ((VAR) = (START); (VAR) < (STOP); (VAR++))\n+   ^\n+   { dg-end-multiline-output \"\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   FOR_EACH (i, 0, 10)\n+   ^~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+/* { dg-begin-multiline-output \"\" }\n+     bar (i, i);\n+     ^~~\n+   { dg-end-multiline-output \"\" } */\n+}\n+#undef FOR_EACH"}, {"sha": "dcc66e7f6fc8db436f7a26b13659839991194515", "filename": "gcc/testsuite/c-c++-common/Wmisleading-indentation.c", "status": "modified", "additions": 97, "deletions": 97, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c240f4db3d1a9dc5503e566ec9ab8cbe26d6f3a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmisleading-indentation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c240f4db3d1a9dc5503e566ec9ab8cbe26d6f3a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmisleading-indentation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmisleading-indentation.c?ref=5c240f4db3d1a9dc5503e566ec9ab8cbe26d6f3a", "patch": "@@ -12,17 +12,17 @@ int\n fn_1 (int flag)\n {\n   int x = 4, y = 5;\n-  if (flag) /* { dg-message \"3: ...this 'if' clause, but it is not\" } */\n+  if (flag) /* { dg-warning \"3: this 'if' clause does not guard...\" } */\n     x = 3;\n-    y = 2; /* { dg-warning \"statement is indented as if it were guarded by...\" } */\n+    y = 2; /* { dg-message \"5: ...this statement, but the latter is misleadingly indented as if it is guarded by the 'if'\" } */\n   return x * y;\n }\n \n int\n fn_2 (int flag, int x, int y)\n {\n-  if (flag) /* { dg-message \"3: ...this 'if' clause, but it is not\" } */\n-    x++; y++; /* { dg-warning \"statement is indented as if it were guarded by...\" } */\n+  if (flag) /* { dg-warning \"3: this 'if' clause does not guard...\" } */\n+    x++; y++; /* { dg-message \"10: ...this statement, but the latter is misleadingly indented as if it is guarded by the 'if'\" } */\n \n   return x * y;\n }\n@@ -33,28 +33,28 @@ fn_3 (int flag)\n   int x = 4, y = 5;\n   if (flag)\n     x = 3;\n-  else /* { dg-message \"3: ...this 'else' clause, but it is not\" } */\n+  else /* { dg-warning \"3: this 'else' clause does not guard...\" } */\n     x = 2;\n-    y = 2; /* { dg-warning \"statement is indented as if it were guarded by...\" } */\n+    y = 2; /* { dg-message \"5: ...this statement, but the latter is misleadingly indented as if it is guarded by the 'else'\" } */\n   return x * y;\n }\n \n void\n fn_4 (double *a, double *b, double *c)\n {\n   int i = 0;\n-  while (i < 10) /* { dg-message \"3: ...this 'while' clause, but it is not\" } */\n+  while (i < 10) /* { dg-warning \"3: this 'while' clause does not guard...\" } */\n     a[i] = b[i] * c[i];\n-    i++; /* { dg-warning \"statement is indented as if it were guarded by...\" } */\n+    i++; /* { dg-message \"5: ...this statement, but the latter is misleadingly indented as if it is guarded by the 'while'\" } */\n }\n \n void\n fn_5 (double *a, double *b, double *sum, double *prod)\n {\n   int i = 0;\n-  for (i = 0; i < 10; i++) /* { dg-output \"3: ...this 'for' clause, but it is not\" } */\n+  for (i = 0; i < 10; i++) /* { dg-warning \"3: this 'for' clause does not guard...\" } */\n     sum[i] = a[i] * b[i];\n-    prod[i] = a[i] * b[i]; /* { dg-warning \"statement is indented as if it were guarded by...\" } */\n+    prod[i] = a[i] * b[i]; /* { dg-message \"5: ...this statement, but the latter is misleadingly indented as if it is guarded by the 'for'\" } */\n }\n \n /* Based on CVE-2014-1266 aka \"goto fail\" */\n@@ -65,9 +65,9 @@ int fn_6 (int a, int b, int c)\n \t/* ... */\n \tif ((err = foo (a)) != 0)\n \t\tgoto fail;\n-\tif ((err = foo (b)) != 0) /* { dg-message \"2: ...this 'if' clause, but it is not\" } */\n+\tif ((err = foo (b)) != 0) /* { dg-message \"2: this 'if' clause does not guard...\" } */\n \t\tgoto fail;\n-\t\tgoto fail; /* { dg-warning \"statement is indented as if it were guarded by...\" } */\n+\t\tgoto fail; /* { dg-message \"3: ...this statement, but the latter is misleadingly indented as if it is guarded by the 'if'\" } */\n \tif ((err = foo (c)) != 0)\n \t\tgoto fail;\n \t/* ... */\n@@ -80,8 +80,8 @@ int fn_7 (int p, int q, int r, int s, int t)\n {\n   if (bar (p, q))\n     {\n-      if (p) /* { dg-message \"7: ...this 'if' clause, but it is not\" } */\n-        q++; r++; /* { dg-warning \"statement is indented as if it were guarded by...\" } */\n+      if (p) /* { dg-message \"7: this 'if' clause does not guard...\" } */\n+        q++; r++; /* { dg-message \"14: ...this statement, but the latter is misleadingly indented as if it is guarded by the 'if'\" } */\n       t++;\n     }\n   return p + q + r + s + t;\n@@ -95,69 +95,69 @@ int fn_8 (int a, int b, int c)\n \n void fn_9 (int flag)\n {\n-  if (flag) /* { dg-message \"3: ...this 'if' clause, but it is not\" } */\n+  if (flag) /* { dg-warning \"3: this 'if' clause does not guard...\" } */\n     foo (0);\n-    foo (1); /* { dg-warning \"statement is indented as if it were guarded by...\" } */\n+    foo (1); /* { dg-message \"5: ...this statement, but the latter is misleadingly indented as if it is guarded by the 'if'\" } */\n }\n \n void fn_10 (int flag)\n {\n-  if (flag) /* { dg-message \"3: ...this 'if' clause, but it is not\" } */\n+  if (flag) /* { dg-warning \"3: this 'if' clause does not guard...\" } */\n     if (flag / 2)\n       {\n         foo (0);\n         foo (1);\n       }\n-    foo (2); /* { dg-warning \"statement is indented as if it were guarded by...\" } */\n+    foo (2); /* { dg-message \"5: ...this statement, but the latter is misleadingly indented as if it is guarded by the 'if'\" } */\n   foo (3);\n }\n \n void fn_11 (void)\n {\n   if (flagA)\n     if (flagB)\n-      if (flagC) /* { dg-message \"7: ...this 'if' clause, but it is not\" } */\n+      if (flagC) /* { dg-message \"7: this 'if' clause does not guard...\" } */\n         foo (0);\n-        bar (1, 2); /* { dg-warning \"statement is indented as if it were guarded by...\" } */\n+        bar (1, 2); /* { dg-message \"9: ...this statement, but the latter is misleadingly indented as if it is guarded by the 'if'\" } */\n }\n \n void fn_12 (void)\n {\n   if (flagA)\n-    if (flagB) /* { dg-message \"5: ...this 'if' clause, but it is not\" } */\n+    if (flagB) /* { dg-message \"5: this 'if' clause does not guard...\" } */\n       if (flagC)\n         foo (0);\n-      bar (1, 2); /* { dg-warning \"statement is indented as if it were guarded by...\" } */\n+      bar (1, 2); /* { dg-message \"7: ...this statement, but the latter is misleadingly indented as if it is guarded by the 'if'\" } */\n }\n \n void fn_13 (void)\n {\n-  if (flagA) /* { dg-message \"3: ...this 'if' clause, but it is not\" } */\n+  if (flagA) /* { dg-warning \"3: this 'if' clause does not guard...\" } */\n     if (flagB)\n       if (flagC)\n         foo (0);\n-    bar (1, 2); /* { dg-warning \"statement is indented as if it were guarded by...\" } */\n+    bar (1, 2); /* { dg-message \"5: ...this statement, but the latter is misleadingly indented as if it is guarded by the 'if'\" } */\n }\n \n #define FOR_EACH(VAR, START, STOP) \\\n-  for ((VAR) = (START); (VAR) < (STOP); (VAR++)) /* { dg-message \"3: ...this 'for' clause, but it is not\" } */\n+  for ((VAR) = (START); (VAR) < (STOP); (VAR++)) /* { dg-warning \"3: this 'for' clause does not guard...\" } */\n \n void fn_14 (void)\n {\n   int i;\n-  FOR_EACH (i, 0, 10) /* { dg-message \"3: in expansion of macro\" } */\n+  FOR_EACH (i, 0, 10) /* { dg-message \"in expansion of macro .FOR_EACH.\" } */\n     foo (i);\n-    bar (i, i); /* { dg-warning \"statement is indented as if it were guarded by...\" } */\n+    bar (i, i); /* { dg-message \"5: ...this statement, but the latter is misleadingly indented as if it is guarded by the 'for'\" } */\n }\n #undef FOR_EACH\n \n-#define FOR_EACH(VAR, START, STOP) for ((VAR) = (START); (VAR) < (STOP); (VAR++)) /* { dg-message \"36: ...this 'for' clause, but it is not\" } */\n+#define FOR_EACH(VAR, START, STOP) for ((VAR) = (START); (VAR) < (STOP); (VAR++)) /* { dg-message \"36: this 'for' clause does not guard...\" } */\n void fn_15 (void)\n {\n   int i;\n-  FOR_EACH (i, 0, 10) /* { dg-message \"3: in expansion of macro\" } */\n+  FOR_EACH (i, 0, 10) /* { dg-message \"in expansion of macro .FOR_EACH.\" } */\n     foo (i);\n-    bar (i, i); /* { dg-warning \"statement is indented as if it were guarded by...\" } */\n+    bar (i, i); /* { dg-message \"5: ...this statement, but the latter is misleadingly indented as if it is guarded by the 'for'\" } */\n }\n #undef FOR_EACH\n \n@@ -166,59 +166,59 @@ void fn_16_spaces (void)\n   int i;\n   for (i = 0; i < 10; i++)\n     while (flagA)\n-      if (flagB) /* { dg-message \"7: ...this 'if' clause, but it is not\" } */\n+      if (flagB) /* { dg-message \"7: this 'if' clause does not guard...\" } */\n         foo (0);\n-        foo (1); /* { dg-warning \"statement is indented as if it were guarded by...\" } */\n+        foo (1); /* { dg-message \"9: ...this statement, but the latter is misleadingly indented as if it is guarded by the 'if'\" } */\n }\n \n void fn_16_tabs (void)\n {\n   int i;\n   for (i = 0; i < 10; i++)\n     while (flagA)\n-      if (flagB) /* { dg-message \"7: ...this 'if' clause, but it is not\" } */\n+      if (flagB) /* { dg-message \"7: this 'if' clause does not guard...\" } */\n \tfoo (0);\n-\tfoo (1);/* { dg-warning \"statement is indented as if it were guarded by...\" } */\n+\tfoo (1);/* { dg-message \"2: ...this statement, but the latter is misleadingly indented as if it is guarded by the 'if'\" } */\n }\n \n void fn_17_spaces (void)\n {\n   int i;\n-  for (i = 0; i < 10; i++) /* { dg-message \"3: ...this 'for' clause, but it is not\" } */\n+  for (i = 0; i < 10; i++) /* { dg-warning \"3: this 'for' clause does not guard...\" } */\n     while (flagA)\n       if (flagB)\n         foo (0);\n-    foo (1);/* { dg-warning \"statement is indented as if it were guarded by...\" } */\n+    foo (1);/* { dg-message \"5: ...this statement, but the latter is misleadingly indented as if it is guarded by the 'for'\" } */\n }\n \n void fn_17_tabs (void)\n {\n   int i;\n-  for (i = 0; i < 10; i++) /* { dg-message \"3: ...this 'for' clause, but it is not\" } */\n+  for (i = 0; i < 10; i++) /* { dg-warning \"3: this 'for' clause does not guard...\" } */\n     while (flagA)\n       if (flagB)\n \tfoo (0);\n-    foo (1);/* { dg-warning \"statement is indented as if it were guarded by...\" } */\n+    foo (1);/* { dg-message \"5: ...this statement, but the latter is misleadingly indented as if it is guarded by the 'for'\" } */\n }\n \n void fn_18_spaces (void)\n {\n   int i;\n   for (i = 0; i < 10; i++)\n-    while (flagA) /* { dg-message \"5: ...this 'while' clause, but it is not\" } */\n+    while (flagA) /* { dg-message \"5: this 'while' clause does not guard...\" } */\n       if (flagB)\n         foo (0);\n-      foo (1);/* { dg-warning \"statement is indented as if it were guarded by...\" } */\n+      foo (1);/* { dg-message \"7: ...this statement, but the latter is misleadingly indented as if it is guarded by the 'while'\" } */\n }\n \n void fn_18_tabs (void)\n {\n   int i;\n   for (i = 0; i < 10; i++)\n-    while (flagA) /* { dg-message \"5: ...this 'while' clause, but it is not\" } */\n+    while (flagA) /* { dg-message \"5: this 'while' clause does not guard...\" } */\n       if (flagB)\n \tfoo (0);\n-      foo (1);/* { dg-warning \"statement is indented as if it were guarded by...\" } */\n+      foo (1);/* { dg-message \"7: ...this statement, but the latter is misleadingly indented as if it is guarded by the 'while'\" } */\n }\n \n /* This shouldn't lead to a warning.  */\n@@ -701,108 +701,108 @@ fn_37 (void)\n   int i;\n \n #define EMPTY\n-#define FOR_EACH(VAR, START, STOP) for (VAR = START; VAR < STOP; VAR++)\n+#define FOR_EACH(VAR, START, STOP) for (VAR = START; VAR < STOP; VAR++) /* { dg-warning \"this 'for' clause\" } */\n \n-  while (flagA); /* { dg-message \"3: ...this 'while' clause\" } */\n-    foo (0); /* { dg-warning \"statement is indented as if\" } */\n+  while (flagA); /* { dg-warning \"3: this 'while' clause\" } */\n+    foo (0); /* { dg-message \"5: ...this statement, but the latter is misleadingly indented as if it is guarded by the 'while'\" } */\n \n   if (flagA)\n     ;\n-  else if (flagB); /* { dg-message \"8: ...this 'if' clause\" } */\n-    foo (0); /* { dg-warning \"statement is indented as if\" } */\n-  while (flagA) /* { dg-message \"3: ...this 'while' clause\" } */\n+  else if (flagB); /* { dg-warning \"8: this 'if' clause\" } */\n+    foo (0); /* { dg-message \"5: ...this statement, but the latter is misleadingly indented as if it is guarded by the 'if'\" } */\n+  while (flagA) /* { dg-warning \"3: this 'while' clause\" } */\n     /* blah */;\n-    foo (0); /* { dg-warning \"statement is indented as if\" } */\n+    foo (0); /* { dg-message \"5: ...this statement, but the latter is misleadingly indented as if it is guarded by the 'while'\" } */\n \n   if (flagA)\n     ;\n-  else if (flagB) /* { dg-message \"8: ...this 'if' clause\" } */\n+  else if (flagB) /* { dg-warning \"8: this 'if' clause\" } */\n     foo (1);\n-    foo (2); /* { dg-warning \"statement is indented as if\" } */\n+    foo (2); /* { dg-message \"5: ...this statement, but the latter is misleadingly indented as if it is guarded by the 'if'\" } */\n \n   if (flagA)\n     foo (1);\n-  else if (flagB) /* { dg-message \"8: ...this 'if' clause\" } */\n+  else if (flagB) /* { dg-warning \"8: this 'if' clause\" } */\n     foo (2);\n-    foo (3); /* { dg-warning \"statement is indented as if\" } */\n+    foo (3); /* { dg-message \"5: ...this statement, but the latter is misleadingly indented as if it is guarded by the 'if'\" } */\n \n-  if (flagB) /* { dg-message \"3: ...this 'if' clause\" } */\n+  if (flagB) /* { dg-warning \"3: this 'if' clause\" } */\n     /* blah */;\n-    { /* { dg-warning \"statement is indented as if\" } */\n+    { /* { dg-message \"5: ...this statement, but the latter is misleadingly indented as if it is guarded by the 'if'\" } */\n       foo (0);\n     }\n \n-  if (flagB) /* { dg-message \"3: ...this 'if' clause\" } */\n+  if (flagB) /* { dg-warning \"3: this 'if' clause\" } */\n     /* blah */;\n-   { /* { dg-warning \"statement is indented as if\" } */\n+   { /* { dg-message \"4: ...this statement, but the latter is misleadingly indented as if it is guarded by the 'if'\" } */\n      foo (0);\n    }\n \n \n   if (flagB)\n     ;\n-  else; foo (0); /* { dg-warning \"statement is indented as if\" } */\n+  else; foo (0); /* { dg-warning \"3: this 'else' clause\" } */\n \n-  if (flagC); foo (2); /* { dg-warning \"statement is indented as if\" } */\n+  if (flagC); foo (2); /* { dg-warning \"3: this 'if' clause\" } */\n \n-  if (flagA)\n-    ; /* blah */ { /* { dg-warning \"statement is indented as if\" } */\n+  if (flagA) /* { dg-warning \"3: this 'if' clause\" } */\n+    ; /* blah */ { /* { dg-message \"18: ...this statement\" } */\n       foo (1);\n     }\n \n-  if (flagB) ; /* { dg-message \"3: ...this 'if' clause\" } */\n-    return; /* { dg-warning \"statement is indented as if\" } */\n+  if (flagB) ; /* { dg-warning \"3: this 'if' clause\" } */\n+    return; /* { dg-message \"5: ...this statement\" } */\n \n-  if (flagB) EMPTY; /* { dg-message \"3: ...this 'if' clause\" } */\n-    foo (1); /* { dg-warning \"statement is indented as if\" } */\n+  if (flagB) EMPTY; /* { dg-warning \"3: this 'if' clause\" } */\n+    foo (1); /* { dg-message \"5: ...this statement\" } */\n \n-  for (i = 0; i < 10; i++); /* { dg-message \"3: ...this 'for' clause\" } */\n-    foo (2); /* { dg-warning \"statement is indented as if\" } */\n+  for (i = 0; i < 10; i++); /* { dg-warning \"3: this 'for' clause\" } */\n+    foo (2); /* { dg-message \"5: ...this statement\" } */\n \n-  FOR_EACH (i, 0, 10);\n-    foo (2); /* { dg-warning \"statement is indented as if\" } */\n+  FOR_EACH (i, 0, 10); /* { dg-message \"3: in expansion of macro .FOR_EACH.\" } */\n+    foo (2); /* { dg-message \"5: ...this statement\" } */\n \n-  FOR_EACH (i, 0, 10);\n-    { /* { dg-warning \"statement is indented as if\" } */\n+  FOR_EACH (i, 0, 10); /* { dg-message \"3: in expansion of macro .FOR_EACH.\" } */\n+    { /* { dg-message \"5: ...this statement\" } */\n       foo (3);\n     }\n \n-  FOR_EACH (i, 0, 10);\n-  { /* { dg-warning \"statement is indented as if\" } */\n+  FOR_EACH (i, 0, 10); /* { dg-message \"3: in expansion of macro .FOR_EACH.\" } */\n+  { /* { dg-message \"3: ...this statement\" } */\n     foo (3);\n   }\n \n-  while (i++); { /* { dg-warning \"statement is indented as if\" } */\n+  while (i++); { /* { dg-warning \"3: this 'while' clause\" } */\n     foo (3);\n   }\n \n-  if (i++); { /* { dg-warning \"statement is indented as if\" } */\n+  if (i++); { /* { dg-warning \"3: this 'if' clause\" } */\n     foo (3);\n   }\n \n   if (flagA) {\n     foo (1);\n-  } else /* { dg-message \"5: ...this 'else' clause\" } */\n+  } else /* { dg-warning \"5: this 'else' clause\" } */\n     if (flagB)\n        foo (2);\n-    foo (3); /* { dg-warning \"statement is indented as if\" } */\n+    foo (3); /* { dg-message \"5: ...this statement\" } */\n \n   if (flagA)\n     foo (1);\n-  else if (flagB); /* { dg-message \"8: ...this 'if' clause\" } */\n-    foo (2); /* { dg-warning \"statement is indented as if\" } */\n+  else if (flagB); /* { dg-warning \"8: this 'if' clause\" } */\n+    foo (2); /* { dg-message \"5: ...this statement\" } */\n \n-  for (i = 0; /* { dg-message \"3: ...this 'for' clause\" } */\n+  for (i = 0; /* { dg-warning \"3: this 'for' clause\" } */\n        i < 10;\n        i++);\n-    foo (i); /* { dg-warning \"statement is indented as if\" } */\n+    foo (i); /* { dg-message \"5: ...this statement\" } */\n \n   if (flagA)\n   {\n     foo (1);\n   }\n-  else if (flagB); /* { dg-message \"8: ...this 'if' clause\" } */\n-  { /* { dg-warning \"statement is indented as if\" } */\n+  else if (flagB); /* { dg-warning \"8: this 'if' clause\" } */\n+  { /* { dg-message \"3: ...this statement\" } */\n     foo (2);\n   }\n \n@@ -1025,10 +1025,10 @@ fn_42_b (int locked)\n \n     if (locked)\n         i = foo (0);\n-    else /* { dg-message \"...this .else. clause\" } */\n+    else /* { dg-warning \"this .else. clause\" } */\n         i = foo (1);\n         engine_ref_debug(e, 0, -1)\n-        if (i > 0) /* { dg-warning \"statement is indented\" } */\n+        if (i > 0) /* { dg-message \"...this statement\" } */\n         return 1;\n     return 0;\n #undef engine_ref_debug\n@@ -1117,7 +1117,7 @@ test43_c (void)\n     foo (1);\n   } else if (flagB) /* { dg-message \"...this .if. clause\" } */\n    foo (2);\n-   foo (3); /* { dg-warning \"statement is indented\" } */\n+   foo (3); /* { dg-message \"...this statement\" } */\n }\n \n /* Aligned with the \"else\".  Likewise, we should warn.  */\n@@ -1129,7 +1129,7 @@ test43_d (void)\n     foo (1);\n   } else if (flagB) /* { dg-message \"...this .if. clause\" } */\n     foo (2);\n-    foo (3); /* { dg-warning \"statement is indented\" } */\n+    foo (3); /* { dg-message \"...this statement\" } */\n }\n \n /* Indented between the \"else\" and the \"if\".  Likewise, we should warn.  */\n@@ -1141,7 +1141,7 @@ test43_e (void)\n     foo (1);\n   } else if (flagB) /* { dg-message \"...this .if. clause\" } */\n       foo (2);\n-      foo (3); /* { dg-warning \"statement is indented\" } */\n+      foo (3); /* { dg-message \"...this statement\" } */\n }\n \n /* Aligned with the \"if\".  Likewise, we should warn.  */\n@@ -1151,9 +1151,9 @@ test43_f (void)\n {\n   if (flagA) {\n     foo (1);\n-  } else if (flagB) /* { dg-message \"...this .else. clause\" } */\n+  } else if (flagB) /* { dg-warning \"this .else. clause\" } */\n          foo (2);\n-         foo (3); /* { dg-warning \"statement is indented\" } */\n+         foo (3); /* { dg-message \"...this statement\" } */\n }\n \n /* Indented more than the \"if\".  Likewise, we should warn.  */\n@@ -1165,7 +1165,7 @@ test43_g (void)\n     foo (1);\n   } else if (flagB) /* { dg-message \"...this .if. clause\" } */\n             foo (2);\n-            foo (3); /* { dg-warning \"statement is indented\" } */\n+            foo (3); /* { dg-message \"...this statement\" } */\n }\n \n /* Again, but without the 2nd \"if\".  */\n@@ -1210,9 +1210,9 @@ test44_c (void)\n {\n   if (flagA) {\n     foo (1);\n-  } else  /* { dg-message \"...this .else. clause\" } */\n+  } else  /* { dg-warning \"this .else. clause\" } */\n    foo (2);\n-   foo (3);  /* { dg-warning \"statement is indented\" } */\n+   foo (3);  /* { dg-message \"...this statement\" } */\n }\n \n /* Aligned with the \"else\".  Likewise, we should warn.  */\n@@ -1222,9 +1222,9 @@ test44_d (void)\n {\n   if (flagA) {\n     foo (1);\n-  } else  /* { dg-message \"...this .else. clause\" } */\n+  } else  /* { dg-warning \"this .else. clause\" } */\n     foo (2);\n-    foo (3);  /* { dg-warning \"statement is indented\" } */\n+    foo (3);  /* { dg-message \"...this statement\" } */\n }\n \n /* Indented more than the \"else\".  Likewise, we should warn.  */\n@@ -1234,7 +1234,7 @@ test44_e (void)\n {\n   if (flagA) {\n     foo (1);\n-  } else  /* { dg-message \"...this .else. clause\" } */\n+  } else  /* { dg-warning \"this .else. clause\" } */\n         foo (2);\n-        foo (3);  /* { dg-warning \"statement is indented\" } */\n+        foo (3);  /* { dg-message \"...this statement\" } */\n }"}, {"sha": "eb37519a0db8e4be6113911968b286ccbda9f071", "filename": "gcc/testsuite/gcc.dg/plugin/location-overflow-test-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c240f4db3d1a9dc5503e566ec9ab8cbe26d6f3a/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Flocation-overflow-test-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c240f4db3d1a9dc5503e566ec9ab8cbe26d6f3a/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Flocation-overflow-test-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Flocation-overflow-test-2.c?ref=5c240f4db3d1a9dc5503e566ec9ab8cbe26d6f3a", "patch": "@@ -20,7 +20,7 @@ int\n fn_1 (int flag)\n {\n   int foo = 4, bar = 5;\n-  if (flag) foo = 3; bar = 2; /* { dg-warning \"indented\" } */\n+  if (flag) foo = 3; bar = 2; /* { dg-warning \"this .if.\" } */\n   return foo * bar;\n }\n "}]}