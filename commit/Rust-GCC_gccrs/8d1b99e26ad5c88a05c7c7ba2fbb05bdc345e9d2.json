{"sha": "8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQxYjk5ZTI2YWQ1Yzg4YTA1YzdjN2JhMmZiYjA1YmRjMzQ1ZTlkMg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2009-08-10T18:24:47Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-08-10T18:24:47Z"}, "message": "future: Fixes for -fno-exceptions.\n\n2009-08-10  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/std/future: Fixes for -fno-exceptions.\n\t* include/bits/functexcept.h: Same.\n\t* libsupc++/exception_ptr.h: Same.\n\t* src/pool_allocator.cc: Same.\n\t* src/future.cc: Same.\n\t* src/functexcept.cc: Same.\n\t* config/abi/pre/gnu.ver: New exports.\n\t* testsuite/30_threads/packaged_task/cons/assign_neg.cc: Adjust.\n\t* testsuite/30_threads/packaged_task/cons/copy_neg.cc: Same.\n\t* testsuite/30_threads/unique_future/cons/assign_neg.cc: Same.\n\t* testsuite/30_threads/unique_future/cons/copy_neg.cc: Same.\n\t* testsuite/30_threads/shared_future/cons/assign_neg.cc: Same.\n\t* testsuite/30_threads/promise/cons/assign_neg.cc: Same.\n\t* testsuite/30_threads/promise/cons/copy_neg.cc: Same.\n\n\t* testsuite/23_containers/deque/operators/1.cc: Separate in two...\n\t* testsuite/23_containers/deque/operators/2.cc: New.\n\nFrom-SVN: r150633", "tree": {"sha": "230597b4bbde6bf2acfd8a8a8dea94ffdc056bd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/230597b4bbde6bf2acfd8a8a8dea94ffdc056bd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/comments", "author": null, "committer": null, "parents": [{"sha": "35076532472d49156e476529d846466a53d989c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35076532472d49156e476529d846466a53d989c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35076532472d49156e476529d846466a53d989c9"}], "stats": {"total": 194, "additions": 142, "deletions": 52}, "files": [{"sha": "3b9b506b37569d39cb271770cb046f02538de388", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2", "patch": "@@ -1,3 +1,23 @@\n+2009-08-10  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/std/future: Fixes for -fno-exceptions.\n+\t* include/bits/functexcept.h: Same.\n+\t* libsupc++/exception_ptr.h: Same.\n+\t* src/pool_allocator.cc: Same.\n+\t* src/future.cc: Same.\n+\t* src/functexcept.cc: Same.\n+\t* config/abi/pre/gnu.ver: New exports.\n+\t* testsuite/30_threads/packaged_task/cons/assign_neg.cc: Adjust.\n+\t* testsuite/30_threads/packaged_task/cons/copy_neg.cc: Same.\n+\t* testsuite/30_threads/unique_future/cons/assign_neg.cc: Same.\n+\t* testsuite/30_threads/unique_future/cons/copy_neg.cc: Same.\n+\t* testsuite/30_threads/shared_future/cons/assign_neg.cc: Same.\n+\t* testsuite/30_threads/promise/cons/assign_neg.cc: Same.\n+\t* testsuite/30_threads/promise/cons/copy_neg.cc: Same.\n+\n+\t* testsuite/23_containers/deque/operators/1.cc: Separate in two...\n+\t* testsuite/23_containers/deque/operators/2.cc: New.\n+\n 2009-08-07  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* src/hash.cc (hash<string>::operator()(string),"}, {"sha": "c4967db551379688058b42b8461697cc23167919", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2", "patch": "@@ -517,7 +517,7 @@ GLIBCXX_3.4 {\n     _ZTVSt13bad_exception;\n     _ZTVSt[0-9][0-9]basic*;\n     _ZTVSt[0-9][0-9][c-d]*;\n-    _ZTVSt[0-9][0-9][f-k]*;\n+    _ZTVSt[0-9][0-9][g-k]*;\n     _ZTVSt11logic_error;\n     _ZTVSt12length_error;\n     _ZTVSt[0-9][0-9][m-r]*;\n@@ -545,7 +545,7 @@ GLIBCXX_3.4 {\n     _ZTISt13bad_exception;\n     _ZTISt[0-9][0-9]basic*;\n     _ZTISt[0-9][0-9][c-d]*;\n-    _ZTISt[0-9][0-9][f-k]*;\n+    _ZTISt[0-9][0-9][g-k]*;\n     _ZTISt11logic_error;\n     _ZTISt12length_error;\n     _ZTISt[0-9][0-9][m-r]*;\n@@ -577,7 +577,7 @@ GLIBCXX_3.4 {\n     _ZTSSt13bad_exception;\n     _ZTSSt[0-9][0-9]basic*;\n     _ZTSSt[0-9][0-9][c-d]*;\n-    _ZTSSt[0-9][0-9][f-k]*;\n+    _ZTSSt[0-9][0-9][g-k]*;\n     _ZTSSt11logic_error;\n     _ZTSSt12length_error;\n     _ZTSSt[0-9][0-9][m-r]*;\n@@ -973,6 +973,12 @@ GLIBCXX_3.4.13 {\n \n     # future\n     _ZSt15future_category;\n+    _ZNSt12future_errorD*;\n+    _ZNKSt12future_error4whatEv;\n+    _ZTSSt12future_error;\n+    _ZTVSt12future_error;\n+    _ZTISt12future_error;\n+    _ZSt20__throw_future_errori;\n \n } GLIBCXX_3.4.12;\n "}, {"sha": "62174819118bbd33172c7df1bd8e936aadfc1f75", "filename": "libstdc++-v3/include/bits/functexcept.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h?ref=8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2", "patch": "@@ -88,6 +88,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   void\n   __throw_system_error(int) __attribute__((__noreturn__));\n \n+  void\n+  __throw_future_error(int) __attribute__((__noreturn__));\n+\n _GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "53ad4fee503b65e39cb2a5b9b1ce67388243be44", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2", "patch": "@@ -76,20 +76,26 @@ namespace std\n   inline error_condition make_error_condition(future_errc __errc)\n   { return error_condition(static_cast<int>(__errc), *future_category); }\n \n-  /// Exception type thrown by futures.\n+  /**\n+   *  @brief Exception type thrown by futures.\n+   *  @ingroup exceptions\n+   */\n   class future_error : public logic_error\n   {\n+    error_code _M_code;\n+\n   public:\n     explicit future_error(future_errc __ec)\n     : logic_error(\"std::future_error\"), _M_code(make_error_code(__ec))\n     { }\n \n-    const error_code& code() const throw() { return _M_code; }\n+    virtual ~future_error() throw();\n \n-    const char* what() const throw() { return _M_code.message().c_str(); }\n+    virtual const char* \n+    what() const throw();\n \n-  private:\n-    error_code _M_code;\n+    const error_code& \n+    code() const throw() { return _M_code; }\n   };\n \n   // Forward declarations.\n@@ -200,7 +206,7 @@ namespace std\n       {\n         lock_guard<mutex> __lock(_M_mutex);\n         if (_M_ready())\n-          throw future_error(future_errc::promise_already_satisfied);\n+\t  __throw_future_error(int(future_errc::promise_already_satisfied));\n         _M_result.swap(__res);\n       }\n       _M_cond.notify_all();\n@@ -226,7 +232,7 @@ namespace std\n     _M_set_retrieved_flag()\n     {\n       if (_M_retrieved.test_and_set())\n-        throw future_error(future_errc::future_already_retrieved);\n+        __throw_future_error(int(future_errc::future_already_retrieved));\n     }\n \n   private:\n@@ -366,7 +372,7 @@ namespace std\n         if (static_cast<bool>(this->_M_state))\n           this->_M_state->_M_set_retrieved_flag();\n         else\n-          throw future_error(future_errc::future_already_retrieved);\n+          __throw_future_error(int(future_errc::future_already_retrieved));\n       }\n \n       // copy construction from a shared_future\n@@ -878,15 +884,17 @@ namespace std\n       unique_future<_Result>\n       get_future()\n       {\n-        try\n+        __try\n         {\n           return _M_promise.get_future();\n         }\n-        catch (const future_error& __e)\n+        __catch (const future_error& __e)\n         {\n+#ifdef __EXCEPTIONS\n           if (__e.code() == future_errc::future_already_retrieved)\n-            throw std::bad_function_call();\n-          throw;\n+\t    throw std::bad_function_call();\n+\t  throw;\n+#endif\n         }\n       }\n \n@@ -895,13 +903,20 @@ namespace std\n       operator()(_ArgTypes... __args)\n       {\n         if (!static_cast<bool>(_M_task) || _M_promise._M_satisfied())\n-          throw std::bad_function_call();\n-        try\n+\t  {\n+#ifdef __EXCEPTIONS\n+\t    throw std::bad_function_call();\n+#else\n+\t    __builtin_abort();\n+#endif\n+\t  }\n+\n+        __try\n         {\n           _Run_task<_Result, _ArgTypes...>::_S_run(_M_promise, _M_task,\n               std::forward<_ArgTypes>(__args)...);\n         }\n-        catch (...)\n+        __catch (...)\n         {\n           _M_promise.set_exception(current_exception());\n         }"}, {"sha": "9192a2244e74917fc1f06b82e1a4c7973d797cb4", "filename": "libstdc++-v3/libsupc++/exception_ptr.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h?ref=8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2", "patch": "@@ -156,11 +156,13 @@ namespace std\n     {\n       __try\n \t{\n+#ifdef __EXCEPTIONS\n \t  throw __ex;\n+#endif\n \t}\n       __catch(...)\n \t{\n-\t  return current_exception ();\n+\t  return current_exception();\n \t}\n     }\n "}, {"sha": "352a6b70aef270ba0af7e03beeb7c9338316112c", "filename": "libstdc++-v3/src/functexcept.cc", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc?ref=8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2", "patch": "@@ -24,10 +24,11 @@\n #include <cstdlib>\n #include <exception>\n #include <stdexcept>\n-#include <system_error>\n #include <new>\n #include <typeinfo>\n #include <ios>\n+#include <system_error>\n+#include <future>\n \n #ifdef _GLIBCXX_USE_NLS\n # include <libintl.h>\n@@ -98,6 +99,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   void\n   __throw_system_error(int __i)\n   { throw system_error(error_code(__i, generic_category())); }\n+\n+  void\n+  __throw_future_error(int __i)\n+  { throw future_error(future_errc(__i)); }\n+\n #else\n   void\n   __throw_bad_exception(void)\n@@ -156,8 +162,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   { std::abort(); }\n \n   void\n-  __throw_system_error(int __i)\n+  __throw_system_error(int)\n   { std::abort(); }\n+\n+  void\n+  __throw_future_error(int)\n+  { std::abort(); }\n+\n #endif //__EXCEPTIONS\n \n _GLIBCXX_END_NAMESPACE"}, {"sha": "f4ef7856a18423fe950c15251bcc596faeebaa8a", "filename": "libstdc++-v3/src/future.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2Fsrc%2Ffuture.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2Fsrc%2Ffuture.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffuture.cc?ref=8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2", "patch": "@@ -67,6 +67,11 @@ namespace\n namespace std\n {\n   const error_category* const future_category = &__future_category_instance();\n+\n+  future_error::~future_error() throw() { }\n+\n+  const char* \n+  future_error::what() const throw() { return _M_code.message().c_str(); }\n }\n \n #endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1"}, {"sha": "ebaa394900bab969ec0449fd406d92ba087c0f66", "filename": "libstdc++-v3/src/pool_allocator.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2Fsrc%2Fpool_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2Fsrc%2Fpool_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fpool_allocator.cc?ref=8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2", "patch": "@@ -90,11 +90,11 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\n \tsize_t __bytes_to_get = (2 * __total_bytes\n \t\t\t\t + _M_round_up(_S_heap_size >> 4));\n-\ttry\n+\t__try\n \t  {\n \t    _S_start_free = static_cast<char*>(::operator new(__bytes_to_get));\n \t  }\n-\tcatch (...)\n+\t__catch (...)\n \t  {\n \t    // Try to make do with what we have.  That can't hurt.  We\n \t    // do not try smaller requests, since that tends to result"}, {"sha": "5db862186ceffc76adbbc394b3f2266972b3f3f0", "filename": "libstdc++-v3/testsuite/23_containers/deque/operators/1.cc", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Foperators%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Foperators%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Foperators%2F1.cc?ref=8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2", "patch": "@@ -55,30 +55,8 @@ void test01()\n   VERIFY( constend <= end );\n }\n \n-// libstdc++/7186\n-void test02()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::deque<int> d(2);       \n-  typedef std::deque<int>::iterator iter;         \n-  typedef std::deque<int>::const_iterator constiter;\n-\n-  iter beg = d.begin();\n-  iter end = d.end();\n-  constiter constbeg = d.begin();\n-  constiter constend = d.end();\n-\n-  VERIFY( beg - constbeg == 0 );\n-  VERIFY( constend - end == 0 );\n-\n-  VERIFY( end - constbeg > 0 );\n-  VERIFY( constend - beg > 0 );\n-}\n-\n int main()\n {\n   test01();\n-  test02();\n   return 0;\n }"}, {"sha": "4db5e0ee209fbeed291457c277ddaaa02c161eac", "filename": "libstdc++-v3/testsuite/23_containers/deque/operators/2.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Foperators%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Foperators%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Foperators%2F2.cc?ref=8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2", "patch": "@@ -0,0 +1,50 @@\n+// 2002-05-18  Paolo Carlini  <pcarlini@unitus.it>\n+\n+// Copyright (C) 2002, 2004, 2005, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 23.2.1 deque operators\n+\n+#include <deque>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/7186\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::deque<int> d(2);       \n+  typedef std::deque<int>::iterator iter;         \n+  typedef std::deque<int>::const_iterator constiter;\n+\n+  iter beg = d.begin();\n+  iter end = d.end();\n+  constiter constbeg = d.begin();\n+  constiter constend = d.end();\n+\n+  VERIFY( beg - constbeg == 0 );\n+  VERIFY( constend - end == 0 );\n+\n+  VERIFY( end - constbeg > 0 );\n+  VERIFY( constend - beg > 0 );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "0bad6ba2f32726d9dd68dd641f15c5b0784024c2", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fassign_neg.cc?ref=8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2", "patch": "@@ -33,4 +33,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 32 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 856 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 862 }"}, {"sha": "655ca8c2f95ab97aacfb844f5dffdbe5ab41803c", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fcopy_neg.cc?ref=8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2", "patch": "@@ -32,4 +32,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 31 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 855 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 861 }"}, {"sha": "f2fbf178c363ee7d6122f3467559721b1c198b8b", "filename": "libstdc++-v3/testsuite/30_threads/promise/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fassign_neg.cc?ref=8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2", "patch": "@@ -33,4 +33,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 32 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 582 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 588 }"}, {"sha": "17757aed0ad6e1e5659dfed7c186eeaa38598bcf", "filename": "libstdc++-v3/testsuite/30_threads/promise/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fcopy_neg.cc?ref=8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2", "patch": "@@ -32,4 +32,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 31 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 566 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 572 }"}, {"sha": "868e0b8a4b85208db649d402f8265d5f98aac8b2", "filename": "libstdc++-v3/testsuite/30_threads/shared_future/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fcons%2Fassign_neg.cc?ref=8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2", "patch": "@@ -35,4 +35,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 34 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 475 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 481 }"}, {"sha": "f8f5a690cf45c854cdd12cfc81d38f2cb2c8a354", "filename": "libstdc++-v3/testsuite/30_threads/unique_future/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fcons%2Fassign_neg.cc?ref=8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2", "patch": "@@ -35,4 +35,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 34 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 395 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 401 }"}, {"sha": "95b5a1d7d9a5c8fdf118e14021eb68935e067170", "filename": "libstdc++-v3/testsuite/30_threads/unique_future/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fcons%2Fcopy_neg.cc?ref=8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2", "patch": "@@ -34,4 +34,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 33 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 394 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 400 }"}]}