{"sha": "5044ab0e64544ee48062cfd2498ce3e11bd49b83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA0NGFiMGU2NDU0NGVlNDgwNjJjZmQyNDk4Y2UzZTExYmQ0OWI4Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2007-09-18T22:50:03Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2007-09-18T22:50:03Z"}, "message": "re PR c++/17743 (dependent expressions in attributes)\n\n        PR c++/17743\n        * pt.c (apply_late_template_attributes): Set processing_template_decl.\n        (tsubst_decl) [TYPE_DECL]: Preserve naming typedef, pass\n        ATTR_FLAG_TYPE_IN_PLACE.\n        (tsubst): Do unqualified lookup to find typedefs from current class.\n        [ARRAY_TYPE]: Propagate alignment info.\n        * decl2.c (is_late_template_attribute): Only defer handling of\n        attribute aligned if the expression is dependent.\n        (save_template_attributes): If we're deferring any attributes,\n        make this a naming typedef.\n\nFrom-SVN: r128590", "tree": {"sha": "2ee8091936fa9f80661d3131455c96b63fb43a40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ee8091936fa9f80661d3131455c96b63fb43a40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5044ab0e64544ee48062cfd2498ce3e11bd49b83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5044ab0e64544ee48062cfd2498ce3e11bd49b83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5044ab0e64544ee48062cfd2498ce3e11bd49b83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5044ab0e64544ee48062cfd2498ce3e11bd49b83/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "80a6ca747aa083f973741bace6b07f12f2933c49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80a6ca747aa083f973741bace6b07f12f2933c49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80a6ca747aa083f973741bace6b07f12f2933c49"}], "stats": {"total": 120, "additions": 113, "deletions": 7}, "files": [{"sha": "ebf9b3d95ee7b96da94d6384e76915d130640464", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5044ab0e64544ee48062cfd2498ce3e11bd49b83/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5044ab0e64544ee48062cfd2498ce3e11bd49b83/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5044ab0e64544ee48062cfd2498ce3e11bd49b83", "patch": "@@ -1,3 +1,16 @@\n+2007-09-18  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/17743\n+\t* pt.c (apply_late_template_attributes): Set processing_template_decl.\n+\t(tsubst_decl) [TYPE_DECL]: Preserve naming typedef, pass\n+\tATTR_FLAG_TYPE_IN_PLACE.\n+\t(tsubst): Do unqualified lookup to find typedefs from current class.\n+\t[ARRAY_TYPE]: Propagate alignment info.\n+\t* decl2.c (is_late_template_attribute): Only defer handling of\n+\tattribute aligned if the expression is dependent.\n+\t(save_template_attributes): If we're deferring any attributes,\n+\tmake this a naming typedef.\n+\n 2007-09-18  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR c++/33462 (again)\n@@ -38,17 +51,12 @@\n \n 2007-09-16  Nathan Sidwell  <nathan@codesourcery.com>\n \n-\tcp/\n \tPR c++/32756\n \t* call.c (maybe_handle_implicit_object): Set this_p, clear\n \trvaluedness_matches_p.\n \t(compare_ics): Do not compare rvaluedness matching when one of the\n \toperands is an implicit object.\n \n-\ttestsuite/\n-\tPR c++/32756\n-\t* g++.dg/overload/operator3.C: New.\n-\n 2007-09-14  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/17743, c++/19163"}, {"sha": "a8c0f9262a092f83259c198317afc0b6f36289e1", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5044ab0e64544ee48062cfd2498ce3e11bd49b83/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5044ab0e64544ee48062cfd2498ce3e11bd49b83/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=5044ab0e64544ee48062cfd2498ce3e11bd49b83", "patch": "@@ -992,7 +992,10 @@ bool\n is_late_template_attribute (tree attr)\n {\n   tree name = TREE_PURPOSE (attr);\n-  if (is_attribute_p (\"aligned\", name))\n+  tree args = TREE_VALUE (attr);\n+  if (is_attribute_p (\"aligned\", name)\n+      && args\n+      && value_dependent_expression_p (TREE_VALUE (args)))\n     return true;\n   else\n     return false;\n@@ -1039,6 +1042,19 @@ save_template_attributes (tree *attr_p, tree *decl_p)\n   if (!late_attrs)\n     return;\n \n+  /* Give this type a name so we know to look it up again at instantiation\n+     time.  */\n+  if (TREE_CODE (*decl_p) == TYPE_DECL\n+      && DECL_ORIGINAL_TYPE (*decl_p) == NULL_TREE)\n+    {\n+      tree oldt = TREE_TYPE (*decl_p);\n+      tree newt = build_variant_type_copy (oldt);\n+      DECL_ORIGINAL_TYPE (*decl_p) = oldt;\n+      TREE_TYPE (*decl_p) = newt;\n+      TYPE_NAME (newt) = *decl_p;\n+      TREE_USED (newt) = TREE_USED (*decl_p);\n+    }\n+\n   if (DECL_P (*decl_p))\n     q = &DECL_ATTRIBUTES (*decl_p);\n   else"}, {"sha": "e54bc5fba1ed5ad0d57ed482a29d50cae2768daa", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 62, "deletions": 1, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5044ab0e64544ee48062cfd2498ce3e11bd49b83/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5044ab0e64544ee48062cfd2498ce3e11bd49b83/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5044ab0e64544ee48062cfd2498ce3e11bd49b83", "patch": "@@ -6493,6 +6493,10 @@ apply_late_template_attributes (tree *decl_p, tree attributes, int attr_flags,\n   else\n     TYPE_ATTRIBUTES (*decl_p) = attributes;\n \n+  /* Set processing_template_decl so we can check for dependent\n+     expressions.  */\n+  ++processing_template_decl;\n+\n   for (t = attributes; t; t = TREE_CHAIN (t))\n     if (is_late_template_attribute (t))\n       late_attrs = tree_cons\n@@ -6501,6 +6505,8 @@ apply_late_template_attributes (tree *decl_p, tree attributes, int attr_flags,\n \t\t      /*integral_constant_expression_p=*/false),\n \t late_attrs);\n \n+  --processing_template_decl;\n+\n   cplus_decl_attributes (decl_p, late_attrs, attr_flags);\n }\n \n@@ -8223,6 +8229,16 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \t      }\n \t    determine_visibility (r);\n \t  }\n+\t/* Preserve a typedef that names a type.  */\n+\telse if (TREE_CODE (r) == TYPE_DECL\n+\t\t && DECL_ORIGINAL_TYPE (t)\n+\t\t && type != error_mark_node)\n+\t  {\n+\t    DECL_ORIGINAL_TYPE (r) = tsubst (DECL_ORIGINAL_TYPE (t),\n+\t\t\t\t\t     args, complain, in_decl);\n+\t    TREE_TYPE (r) = type = build_variant_type_copy (type);\n+\t    TYPE_NAME (type) = r;\n+\t  }\n \n \tif (!local_p)\n \t  {\n@@ -8241,7 +8257,8 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \n \tTREE_CHAIN (r) = NULL_TREE;\n \n-\tapply_late_template_attributes (&r, DECL_ATTRIBUTES (r), 0,\n+\tapply_late_template_attributes (&r, DECL_ATTRIBUTES (r),\n+\t\t\t\t\t(int) ATTR_FLAG_TYPE_IN_PLACE,\n \t\t\t\t\targs, complain, in_decl);\n \tlayout_decl (r, 0);\n       }\n@@ -8534,6 +8551,43 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \n   gcc_assert (type != unknown_type_node);\n \n+  /* Reuse typedefs.  This is a rather complicated way to check whether the\n+     type is a typedef from the same class template as the current scope,\n+     but I can't think of a better one.\n+\n+     We need to do this to handle dependent attributes, specifically\n+     attribute aligned.  */\n+  if (TYPE_P (t)\n+      && TYPE_NAME (t)\n+      && !IS_AGGR_TYPE (t)\n+      && current_class_type\n+      && CLASSTYPE_TEMPLATE_INFO (current_class_type))\n+    {\n+      tree decl = TYPE_NAME (t);\n+      tree context = DECL_CONTEXT (decl);\n+      if (context\n+\t  && CLASS_TYPE_P (context)\n+\t  && CLASSTYPE_TEMPLATE_INFO (context)\n+\t  && (CLASSTYPE_TI_TEMPLATE (context)\n+\t      == CLASSTYPE_TI_TEMPLATE (current_class_type))\n+\t  && (tsubst_aggr_type (context, args, complain, in_decl,\n+\t\t\t\t/*entering_scope=*/0)\n+\t      == current_class_type))\n+\t    {\n+\t      r = lookup_name (DECL_NAME (decl));\n+\t      if (r && TREE_CODE (r) == TYPE_DECL\n+\t\t  && DECL_CONTEXT (r) == current_class_type)\n+\t\t{\n+\t\t  r = TREE_TYPE (r);\n+\t\t  r = cp_build_qualified_type_real\n+\t\t    (r, cp_type_quals (t) | cp_type_quals (r),\n+\t\t     complain | tf_ignore_bad_quals);\n+\t\t  return r;\n+\t\t  /* Else we're instantiating the typedef, so fall through.  */\n+\t\t}\n+\t    }\n+    }\n+\n   if (type\n       && TREE_CODE (t) != TYPENAME_TYPE\n       && TREE_CODE (t) != IDENTIFIER_NODE\n@@ -9013,6 +9067,13 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t  }\n \n \tr = build_cplus_array_type (type, domain);\n+\n+\tif (TYPE_USER_ALIGN (t))\n+\t  {\n+\t    TYPE_ALIGN (r) = TYPE_ALIGN (t);\n+\t    TYPE_USER_ALIGN (r) = 1;\n+\t  }\n+\n \treturn r;\n       }\n "}, {"sha": "51f5daf19b1576941737312cf46bd0a725a3a4cb", "filename": "gcc/testsuite/g++.dg/ext/tmplattr3.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5044ab0e64544ee48062cfd2498ce3e11bd49b83/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftmplattr3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5044ab0e64544ee48062cfd2498ce3e11bd49b83/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftmplattr3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftmplattr3.C?ref=5044ab0e64544ee48062cfd2498ce3e11bd49b83", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/17743\n+\n+template<typename T>\n+struct X {\n+  typedef char layout_type[sizeof(T)]\n+  __attribute ((aligned(__alignof(double))));\n+  layout_type data;\n+};\n+\n+template<typename T>\n+struct Y {\n+  typedef char layout_type[sizeof(T)]\n+  __attribute ((aligned(__alignof(T))));\n+  layout_type data;\n+};\n+\n+template<bool> struct StaticAssert;\n+template<> struct StaticAssert<true> {};\n+\n+StaticAssert<__alignof(X<double>) == __alignof(double)> d1;\n+StaticAssert<__alignof(Y<double>) == __alignof(double)> d2;"}]}