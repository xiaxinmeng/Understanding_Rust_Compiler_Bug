{"sha": "6f0a6218e31cbfe8912fa90d74f1d43ceaeed336", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmYwYTYyMThlMzFjYmZlODkxMmZhOTBkNzRmMWQ0M2NlYWVlZDMzNg==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2015-01-14T11:51:40Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2015-01-14T11:51:40Z"}, "message": "re PR target/64453 (Live high register not saved in function prolog on ARM with -Os)\n\n2015-01-14  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n    gcc/\n    PR target/64453\n    * config/arm/arm.c (callee_saved_reg_p): Define.\n    (arm_compute_save_reg0_reg12_mask): Use callee_saved_reg_p to check if\n    register is callee saved instead of !call_used_regs[reg].\n    (thumb1_compute_save_reg_mask): Likewise.\n\n    gcc/testsuite/\n    PR target/64453\n    * gcc.target/arm/pr64453.c: New.\n\nFrom-SVN: r219592", "tree": {"sha": "4203df76e39460f15fa96a84e72ae957a56b3bc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4203df76e39460f15fa96a84e72ae957a56b3bc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f0a6218e31cbfe8912fa90d74f1d43ceaeed336", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f0a6218e31cbfe8912fa90d74f1d43ceaeed336", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f0a6218e31cbfe8912fa90d74f1d43ceaeed336", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f0a6218e31cbfe8912fa90d74f1d43ceaeed336/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6af2585d5c9880f8a3925e2f3fb4b0713b0647db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6af2585d5c9880f8a3925e2f3fb4b0713b0647db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6af2585d5c9880f8a3925e2f3fb4b0713b0647db"}], "stats": {"total": 39, "additions": 34, "deletions": 5}, "files": [{"sha": "4472ed2b6b3c92acfdab7c83ff35355b57bdf346", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f0a6218e31cbfe8912fa90d74f1d43ceaeed336/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f0a6218e31cbfe8912fa90d74f1d43ceaeed336/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f0a6218e31cbfe8912fa90d74f1d43ceaeed336", "patch": "@@ -1,3 +1,11 @@\n+2015-01-14  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\tPR target/64453\n+\t* config/arm/arm.c (callee_saved_reg_p): Define.\n+\t(arm_compute_save_reg0_reg12_mask): Use callee_saved_reg_p to check if\n+\tregister is callee saved instead of !call_used_regs[reg].\n+\t(thumb1_compute_save_reg_mask): Likewise.\n+\n 2015-01-14  Hale Wang  <hale.wang@arm.com>\n \n \t* config/arm/arm.c: Tune the max_cond_insns/branch_cost for"}, {"sha": "237211a1f6dbc96f3c8bc0a37a6d94332c0abf29", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f0a6218e31cbfe8912fa90d74f1d43ceaeed336/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f0a6218e31cbfe8912fa90d74f1d43ceaeed336/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=6f0a6218e31cbfe8912fa90d74f1d43ceaeed336", "patch": "@@ -19033,6 +19033,14 @@ output_ascii_pseudo_op (FILE *stream, const unsigned char *p, int len)\n   fputs (\"\\\"\\n\", stream);\n }\n \f\n+/* Whether a register is callee saved or not.  This is necessary because high\n+   registers are marked as caller saved when optimizing for size on Thumb-1\n+   targets despite being callee saved in order to avoid using them.  */\n+#define callee_saved_reg_p(reg) \\\n+  (!call_used_regs[reg] \\\n+   || (TARGET_THUMB1 && optimize_size \\\n+       && reg >= FIRST_HI_REGNUM && reg <= LAST_HI_REGNUM))\n+\n /* Compute the register save mask for registers 0 through 12\n    inclusive.  This code is used by arm_compute_save_reg_mask.  */\n \n@@ -19093,7 +19101,7 @@ arm_compute_save_reg0_reg12_mask (void)\n       /* In the normal case we only need to save those registers\n \t which are call saved and which are used by this function.  */\n       for (reg = 0; reg <= 11; reg++)\n-\tif (df_regs_ever_live_p (reg) && ! call_used_regs[reg])\n+\tif (df_regs_ever_live_p (reg) && callee_saved_reg_p (reg))\n \t  save_reg_mask |= (1 << reg);\n \n       /* Handle the frame pointer as a special case.  */\n@@ -19257,7 +19265,7 @@ thumb1_compute_save_reg_mask (void)\n \n   mask = 0;\n   for (reg = 0; reg < 12; reg ++)\n-    if (df_regs_ever_live_p (reg) && !call_used_regs[reg])\n+    if (df_regs_ever_live_p (reg) && callee_saved_reg_p (reg))\n       mask |= 1 << reg;\n \n   if (flag_pic\n@@ -19290,7 +19298,7 @@ thumb1_compute_save_reg_mask (void)\n       if (reg * UNITS_PER_WORD <= (unsigned) arm_size_return_regs ())\n \treg = LAST_LO_REGNUM;\n \n-      if (! call_used_regs[reg])\n+      if (callee_saved_reg_p (reg))\n \tmask |= 1 << reg;\n     }\n \n@@ -27230,8 +27238,7 @@ arm_conditional_register_usage (void)\n       /* When optimizing for size on Thumb-1, it's better not\n         to use the HI regs, because of the overhead of\n         stacking them.  */\n-      for (regno = FIRST_HI_REGNUM;\n-\t   regno <= LAST_HI_REGNUM; ++regno)\n+      for (regno = FIRST_HI_REGNUM; regno <= LAST_HI_REGNUM; ++regno)\n \tfixed_regs[regno] = call_used_regs[regno] = 1;\n     }\n "}, {"sha": "6429922d59f0bf852fb62a252ae8a7e5e8f9691b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f0a6218e31cbfe8912fa90d74f1d43ceaeed336/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f0a6218e31cbfe8912fa90d74f1d43ceaeed336/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6f0a6218e31cbfe8912fa90d74f1d43ceaeed336", "patch": "@@ -1,3 +1,8 @@\n+2015-01-14  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\tPR target/64453\n+\t* gcc.target/arm/pr64453.c: New.\n+\n 2015-01-14  Richard Biener  <rguenther@suse.de>\n \n \tPR lto/64415"}, {"sha": "17155afc9d79c9b66d7f3a211505fdfdbaa4dfab", "filename": "gcc/testsuite/gcc.target/arm/pr64453.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f0a6218e31cbfe8912fa90d74f1d43ceaeed336/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr64453.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f0a6218e31cbfe8912fa90d74f1d43ceaeed336/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr64453.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr64453.c?ref=6f0a6218e31cbfe8912fa90d74f1d43ceaeed336", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mthumb -Os \" }  */\n+/* { dg-require-effective-target arm_thumb1_ok } */\n+\n+void save_regs () {\n+  __asm volatile (\"\" ::: \"r8\");\n+}\n+\n+/* { dg-final { scan-assembler \"\\tmov\\tr., r8\" } } */"}]}