{"sha": "ce4674f2a6ac6bb7b8926076adf92694443f3f1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U0Njc0ZjJhNmFjNmJiN2I4OTI2MDc2YWRmOTI2OTQ0NDNmM2YxYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-02-17T12:18:54Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-02-17T12:18:54Z"}, "message": "limits: Implement resolution of DR 559 (CD1) in C++0x mode.\n\n2010-02-17  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/limits: Implement resolution of DR 559 (CD1) in\n\tC++0x mode.\n\t* testsuite/18_support/numeric_limits/dr559.cc: New.\n\nFrom-SVN: r156830", "tree": {"sha": "8f4cd303cff6ada2cf97e2e396a50200893298d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f4cd303cff6ada2cf97e2e396a50200893298d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce4674f2a6ac6bb7b8926076adf92694443f3f1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce4674f2a6ac6bb7b8926076adf92694443f3f1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce4674f2a6ac6bb7b8926076adf92694443f3f1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce4674f2a6ac6bb7b8926076adf92694443f3f1b/comments", "author": null, "committer": null, "parents": [{"sha": "96e41f16111dff01330090bdf037242a22b430a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96e41f16111dff01330090bdf037242a22b430a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96e41f16111dff01330090bdf037242a22b430a9"}], "stats": {"total": 130, "additions": 125, "deletions": 5}, "files": [{"sha": "5eff61ac9638d60067fb2226ddca6e4a1ab7801d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4674f2a6ac6bb7b8926076adf92694443f3f1b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4674f2a6ac6bb7b8926076adf92694443f3f1b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ce4674f2a6ac6bb7b8926076adf92694443f3f1b", "patch": "@@ -1,3 +1,9 @@\n+2010-02-17  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/limits: Implement resolution of DR 559 (CD1) in\n+\tC++0x mode.\n+\t* testsuite/18_support/numeric_limits/dr559.cc: New.\n+\n 2010-02-16  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* src/ios_locale.cc: Fixes for -pedantic."}, {"sha": "a633d78bf034bf8cb4799048c3d07f9bab3e7e89", "filename": "libstdc++-v3/include/std/limits", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4674f2a6ac6bb7b8926076adf92694443f3f1b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4674f2a6ac6bb7b8926076adf92694443f3f1b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits?ref=ce4674f2a6ac6bb7b8926076adf92694443f3f1b", "patch": "@@ -45,10 +45,10 @@\n //\n // The numeric_limits<> traits document implementation-defined aspects\n // of fundamental arithmetic data types (integers and floating points).\n-// From Standard C++ point of view, there are 13 such types:\n+// From Standard C++ point of view, there are 14 such types:\n //   * integers\n //         bool\t\t\t\t\t\t        (1)\n-//         char, signed char, unsigned char\t\t\t(3)\n+//         char, signed char, unsigned char, wchar_t            (4)\n //         short, unsigned short\t\t\t\t(2)\n //         int, unsigned\t\t\t\t\t(2)\n //         long, unsigned long\t\t\t\t\t(2)\n@@ -62,7 +62,7 @@\n //   * integer\n //         long long, unsigned long long\t\t\t(2)\n //\n-// which brings us to 15 fundamental arithmetic data types in GNU C++.\n+// which brings us to 16 fundamental arithmetic data types in GNU C++.\n //\n //\n // Since a numeric_limits<> is a bit tricky to get right, we rely on\n@@ -302,8 +302,22 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       static _Tp denorm_min() throw() { return static_cast<_Tp>(0); }\n     };\n \n-  // Now there follow 15 explicit specializations.  Yes, 15.  Make sure\n-  // you get the count right.\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Tp>\n+    struct numeric_limits<const _Tp>\n+    : public numeric_limits<_Tp> { };\n+\n+  template<typename _Tp>\n+    struct numeric_limits<volatile _Tp>\n+    : public numeric_limits<_Tp> { };\n+\n+  template<typename _Tp>\n+    struct numeric_limits<const volatile _Tp>\n+    : public numeric_limits<_Tp> { };\n+#endif\n+\n+  // Now there follow 16 explicit specializations.  Yes, 16.  Make sure\n+  // you get the count right. (18 in c++0x mode)\n \n   /// numeric_limits<bool> specialization.\n   template<>"}, {"sha": "f541faae583d0888ab16150ffb71c3dad0f095d4", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/dr559.cc", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4674f2a6ac6bb7b8926076adf92694443f3f1b/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fdr559.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4674f2a6ac6bb7b8926076adf92694443f3f1b/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fdr559.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fdr559.cc?ref=ce4674f2a6ac6bb7b8926076adf92694443f3f1b", "patch": "@@ -0,0 +1,100 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2010-02-17  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <limits>\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+  void do_test_aux()\n+  {\n+    bool test __attribute__((unused)) = true;\n+    typedef std::numeric_limits<T> cv_limits;\n+    typedef std::numeric_limits<typename std::remove_cv<T>::type> limits;\n+\n+    VERIFY( cv_limits::is_specialized == limits::is_specialized );\n+    VERIFY( cv_limits::min() == limits::min() );\n+    VERIFY( cv_limits::max() == limits::max() );\n+    VERIFY( cv_limits::digits == limits::digits );\n+    VERIFY( cv_limits::digits10 == limits::digits10 );\n+    VERIFY( cv_limits::is_signed == limits::is_signed );\n+    VERIFY( cv_limits::is_integer == limits::is_integer );\n+    VERIFY( cv_limits::is_exact == limits::is_exact );\n+    VERIFY( cv_limits::radix == limits::radix );\n+    VERIFY( cv_limits::epsilon() == limits::epsilon() );\n+    VERIFY( cv_limits::round_error() == limits::round_error() );\n+    VERIFY( cv_limits::min_exponent == limits::min_exponent );\n+    VERIFY( cv_limits::min_exponent10 == limits::min_exponent10 );\n+    VERIFY( cv_limits::max_exponent == limits::max_exponent );\n+    VERIFY( cv_limits::max_exponent10 == limits::max_exponent10 );\n+    VERIFY( cv_limits::has_infinity == limits::has_infinity );\n+    VERIFY( cv_limits::has_quiet_NaN == limits::has_quiet_NaN );\n+    VERIFY( cv_limits::has_signaling_NaN == limits::has_signaling_NaN );\n+    VERIFY( cv_limits::has_denorm == limits::has_denorm );\n+    VERIFY( cv_limits::has_denorm_loss == limits::has_denorm_loss );\n+    VERIFY( cv_limits::infinity() == limits::infinity() );\n+    if (!std::is_floating_point<T>::value)\n+      {\n+\tVERIFY( cv_limits::quiet_NaN() == limits::quiet_NaN() );\n+\tVERIFY( cv_limits::signaling_NaN() == limits::signaling_NaN() );\n+      }\n+    VERIFY( cv_limits::denorm_min() == limits::denorm_min() );\n+    VERIFY( cv_limits::is_iec559 == limits::is_iec559 );\n+    VERIFY( cv_limits::is_bounded == limits::is_bounded );\n+    VERIFY( cv_limits::is_modulo == limits::is_modulo );\n+    VERIFY( cv_limits::traps == limits::traps );\n+    VERIFY( cv_limits::tinyness_before == limits::tinyness_before );\n+    VERIFY( cv_limits::round_style == limits::round_style );\n+  }\n+\n+template<typename T>\n+  void\n+  do_test()\n+  {\n+    do_test_aux<T>();\n+    do_test_aux<const T>();\n+    do_test_aux<volatile T>();\n+    do_test_aux<const volatile T>();\n+  }\n+\n+// DR 559.\n+int main()\n+{\n+  do_test<bool>();\n+  do_test<char>();\n+  do_test<signed char>();\n+  do_test<unsigned char>();\n+  do_test<wchar_t>();\n+  do_test<char16_t>();\n+  do_test<char32_t>();\n+  do_test<short>();\n+  do_test<unsigned short>();\n+  do_test<int>();\n+  do_test<unsigned int>();\n+  do_test<long>();\n+  do_test<unsigned long>();\n+  do_test<long long>();\n+  do_test<unsigned long long>();\n+  do_test<float>();\n+  do_test<double>();\n+  do_test<long double>();\n+  return 0;\n+}"}]}