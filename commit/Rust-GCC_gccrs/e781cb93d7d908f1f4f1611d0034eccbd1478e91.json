{"sha": "e781cb93d7d908f1f4f1611d0034eccbd1478e91", "node_id": "C_kwDOANBUbNoAKGU3ODFjYjkzZDdkOTA4ZjFmNGYxNjExZDAwMzRlY2NiZDE0NzhlOTE", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-12-17T14:18:39Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-12-17T14:18:39Z"}, "message": "vect: Fix multi-vector SLP gather loads [PR103744]\n\nThis PR shows that I didn't properly test the multi-vector case when\nadding support for SLP gather loads.  The patch fixes that case using\nthe same approach as we do for non-SLP cases: keep the scalar base\nthe same, but iterate through the (also multi-vector) vector offsets.\n\u201cvec_num * j + i\u201d is already used elsewhere as a way of handling both\nthe multi-vector SLP case and the multi-vector non-SLP case.\n\ngcc/\n\tPR tree-optimization/103744\n\t* tree-vect-stmts.c (vectorizable_load): Handle multi-vector\n\tSLP gather loads.\n\ngcc/testsuite/\n\tPR tree-optimization/103744\n\t* gcc.dg/vect/pr103744-1.c: New test.\n\t* gcc.dg/vect/pr103744-2.c: Likewise.", "tree": {"sha": "c4fe0953ca4dfa108c4b825fb73123b11e88ce85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4fe0953ca4dfa108c4b825fb73123b11e88ce85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e781cb93d7d908f1f4f1611d0034eccbd1478e91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e781cb93d7d908f1f4f1611d0034eccbd1478e91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e781cb93d7d908f1f4f1611d0034eccbd1478e91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e781cb93d7d908f1f4f1611d0034eccbd1478e91/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dca2ad64910ba4aeae8e1f373f4d4796702b42b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dca2ad64910ba4aeae8e1f373f4d4796702b42b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dca2ad64910ba4aeae8e1f373f4d4796702b42b"}], "stats": {"total": 57, "additions": 55, "deletions": 2}, "files": [{"sha": "1bc81e26fe4abde4e3735fb6aa30120692017d17", "filename": "gcc/testsuite/gcc.dg/vect/pr103744-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e781cb93d7d908f1f4f1611d0034eccbd1478e91/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr103744-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e781cb93d7d908f1f4f1611d0034eccbd1478e91/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr103744-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr103744-1.c?ref=e781cb93d7d908f1f4f1611d0034eccbd1478e91", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+\n+int r;\n+\n+void\n+foo (short int *s, short int *d1, short int *d2, int z)\n+{\n+  int *a;\n+\n+  while (z < 1)\n+    {\n+      int i;\n+\n+      i = *s++ - (*d1++ + *d2++);\n+      r += a[i];\n+      i = *s++ - (*d1++ + *d2++);\n+      r += a[i];\n+      ++z;\n+    }\n+}"}, {"sha": "52307abf2462d6aef2409e64f024dc1083a3db16", "filename": "gcc/testsuite/gcc.dg/vect/pr103744-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e781cb93d7d908f1f4f1611d0034eccbd1478e91/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr103744-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e781cb93d7d908f1f4f1611d0034eccbd1478e91/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr103744-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr103744-2.c?ref=e781cb93d7d908f1f4f1611d0034eccbd1478e91", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+\n+int\n+f1 (int *restrict x, unsigned short *restrict y)\n+{\n+  int res = 0;\n+  for (int i = 0; i < 100; i += 2)\n+    {\n+      unsigned short i1 = y[i + 0] + 1;\n+      unsigned short i2 = y[i + 1] + 2;\n+      res += x[i1];\n+      res += x[i2];\n+    }\n+  return res;\n+}\n+\n+void\n+f2 (int *restrict x, unsigned short *restrict y)\n+{\n+  int res1 = 0;\n+  int res2 = 0;\n+  for (int i = 0; i < 100; i += 2)\n+    {\n+      unsigned short i1 = y[i + 0] + 1;\n+      unsigned short i2 = y[i + 1] + 2;\n+      res1 += x[i1];\n+      res2 += x[i2];\n+    }\n+  x[0] = res1;\n+  x[1] = res2;\n+}"}, {"sha": "c842d500d104be0cdbcea02532aafed20a942421", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e781cb93d7d908f1f4f1611d0034eccbd1478e91/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e781cb93d7d908f1f4f1611d0034eccbd1478e91/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=e781cb93d7d908f1f4f1611d0034eccbd1478e91", "patch": "@@ -9249,6 +9249,8 @@ vectorizable_load (vec_info *vinfo,\n       group_size = vec_num = 1;\n       group_gap_adj = 0;\n       ref_type = reference_alias_ptr_type (DR_REF (first_dr_info->dr));\n+      if (slp)\n+\tvec_num = SLP_TREE_NUMBER_OF_VEC_STMTS (slp_node);\n     }\n \n   gcc_assert (alignment_support_scheme);\n@@ -9594,7 +9596,7 @@ vectorizable_load (vec_info *vinfo,\n \t\tfinal_mask = prepare_vec_mask (loop_vinfo, mask_vectype,\n \t\t\t\t\t       final_mask, vec_mask, gsi);\n \n-\t      if (i > 0)\n+\t      if (i > 0 && !STMT_VINFO_GATHER_SCATTER_P (stmt_info))\n \t\tdataref_ptr = bump_vector_ptr (vinfo, dataref_ptr, ptr_incr,\n \t\t\t\t\t       gsi, stmt_info, bump);\n \n@@ -9611,7 +9613,7 @@ vectorizable_load (vec_info *vinfo,\n \t\t\t&& gs_info.ifn != IFN_LAST)\n \t\t      {\n \t\t\tif (STMT_VINFO_GATHER_SCATTER_P (stmt_info))\n-\t\t\t  vec_offset = vec_offsets[j];\n+\t\t\t  vec_offset = vec_offsets[vec_num * j + i];\n \t\t\ttree zero = build_zero_cst (vectype);\n \t\t\ttree scale = size_int (gs_info.scale);\n \t\t\tgcall *call;"}]}