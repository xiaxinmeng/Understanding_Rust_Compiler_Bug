{"sha": "96e360963381870a4c87c6bbcc918eb65a48bc90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZlMzYwOTYzMzgxODcwYTRjODdjNmJiY2M5MThlYjY1YTQ4YmM5MA==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2006-05-29T15:52:51Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2006-05-29T15:52:51Z"}, "message": "re PR middle-end/26237 (None of the OMP_* trees are documented in c-tree.texi)\n\n\n\tPR 26237\n\t* c-tree.texi: Document OpenMP directives and clauses.\n\nFrom-SVN: r114204", "tree": {"sha": "9abf42d791d205f47d96e06f806b2c751bff4e7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9abf42d791d205f47d96e06f806b2c751bff4e7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96e360963381870a4c87c6bbcc918eb65a48bc90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96e360963381870a4c87c6bbcc918eb65a48bc90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96e360963381870a4c87c6bbcc918eb65a48bc90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96e360963381870a4c87c6bbcc918eb65a48bc90/comments", "author": null, "committer": null, "parents": [{"sha": "eb5fa7733e28c01d4a2f79ca4f24c21466a409c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb5fa7733e28c01d4a2f79ca4f24c21466a409c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb5fa7733e28c01d4a2f79ca4f24c21466a409c4"}], "stats": {"total": 183, "additions": 183, "deletions": 0}, "files": [{"sha": "eba12e76fb26e7e745f916294fbf8be5acddfb9b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e360963381870a4c87c6bbcc918eb65a48bc90/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e360963381870a4c87c6bbcc918eb65a48bc90/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96e360963381870a4c87c6bbcc918eb65a48bc90", "patch": "@@ -1,3 +1,8 @@\n+2006-05-29  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR 26237\n+\t* c-tree.texi: Document OpenMP directives and clauses.\n+\n 2006-05-29  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* varasm.c (globalize_decl): Fix indentation."}, {"sha": "06dcc82fe2335a2df9040ce7bf5b68e57d4676cd", "filename": "gcc/doc/c-tree.texi", "status": "modified", "additions": 178, "deletions": 0, "changes": 178, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e360963381870a4c87c6bbcc918eb65a48bc90/gcc%2Fdoc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e360963381870a4c87c6bbcc918eb65a48bc90/gcc%2Fdoc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fc-tree.texi?ref=96e360963381870a4c87c6bbcc918eb65a48bc90", "patch": "@@ -1908,6 +1908,18 @@ This macro returns the attributes on the type @var{type}.\n @tindex TARGET_EXPR\n @tindex AGGR_INIT_EXPR\n @tindex VA_ARG_EXPR\n+@tindex OMP_PARALLEL\n+@tindex OMP_FOR\n+@tindex OMP_SECTIONS\n+@tindex OMP_SINGLE\n+@tindex OMP_SECTION\n+@tindex OMP_MASTER\n+@tindex OMP_ORDERED\n+@tindex OMP_CRITICAL\n+@tindex OMP_RETURN\n+@tindex OMP_CONTINUE\n+@tindex OMP_ATOMIC\n+@tindex OMP_CLAUSE\n \n The internal representation for expressions is for the most part quite\n straightforward.  However, there are a few facts that one must bear in\n@@ -1945,6 +1957,9 @@ TREE_OPERAND (expr, 0)\n @noindent\n As this example indicates, the operands are zero-indexed.\n \n+All the expressions starting with @code{OMP_} represent directives and\n+clauses used by the OpenMP API @w{@uref{http://www.openmp.org/}}.\n+\n The table below begins with constants, moves on to unary expressions,\n then proceeds to binary expressions, and concludes with various other\n kinds of expressions:\n@@ -2549,4 +2564,167 @@ mechanism.  It represents expressions like @code{va_arg (ap, type)}.\n Its @code{TREE_TYPE} yields the tree representation for @code{type} and\n its sole argument yields the representation for @code{ap}.\n \n+@item OMP_PARALLEL\n+\n+Represents @code{#pragma omp parallel [clause1 ... clauseN]}. It\n+has four operands:\n+\n+Operand @code{OMP_PARALLEL_BODY} is valid while in GENERIC and\n+High GIMPLE forms.  It contains the body of code to be executed\n+by all the threads.  During GIMPLE lowering, this operand becomes\n+@code{NULL} and the body is emitted linearly after\n+@code{OMP_PARALLEL}.\n+\n+Operand @code{OMP_PARALLEL_CLAUSES} is the list of clauses\n+associated with the directive.\n+\n+Operand @code{OMP_PARALLEL_FN} is created by\n+@code{pass_lower_omp}, it contains the @code{FUNCTION_DECL}\n+for the function that will contain the body of the parallel\n+region.\n+\n+Operand @code{OMP_PARALLEL_DATA_ARG} is also created by\n+@code{pass_lower_omp}. If there are shared variables to be\n+communicated to the children threads, this operand will contain\n+the @code{VAR_DECL} that contains all the shared values and\n+variables.\n+\n+@item OMP_FOR\n+\n+Represents @code{#pragma omp for [clause1 ... clauseN]}.  It\n+has 5 operands:\n+\n+Operand @code{OMP_FOR_BODY} contains the loop body.\n+\n+Operand @code{OMP_FOR_CLAUSES} is the list of clauses\n+associated with the directive.\n+\n+Operand @code{OMP_FOR_INIT} is the loop initialization code of\n+the form @code{VAR = N1}.\n+\n+Operand @code{OMP_FOR_COND} is the loop conditional expression\n+of the form @code{VAR @{<,>,<=,>=@} N2}.\n+\n+Operand @code{OMP_FOR_INCR} is the loop index increment of the\n+form @code{VAR @{+=,-=@} INCR}.\n+\n+Operand @code{OMP_FOR_PRE_BODY} contains side-effect code from\n+operands @code{OMP_FOR_INIT}, @code{OMP_FOR_COND} and\n+@code{OMP_FOR_INC}.  These side-effects are part of the\n+@code{OMP_FOR} block but must be evaluated before the start of\n+loop body.\n+\n+The loop index variable @code{VAR} must be a signed integer variable,\n+which is implicitly private to each thread.  Bounds\n+@code{N1} and @code{N2} and the increment expression\n+@code{INCR} are required to be loop invariant integer\n+expressions that are evaluated without any synchronization. The\n+evaluation order, frequency of evaluation and side-effects are\n+unspecified by the standard.\n+\n+@item OMP_SECTIONS\n+\n+Represents @code{#pragma omp sections [clause1 ... clauseN]}.\n+\n+Operand @code{OMP_SECTIONS_BODY} contains the sections body,\n+which in turn contains a set of @code{OMP_SECTION} nodes for\n+each of the concurrent sections delimited by @code{#pragma omp\n+section}.\n+\n+Operand @code{OMP_SECTIONS_CLAUSES} is the list of clauses\n+associated with the directive.\n+\n+@item OMP_SECTION\n+\n+Section delimiter for @code{OMP_SECTIONS}.\n+\n+@item OMP_SINGLE\n+\n+Represents @code{#pragma omp single}.\n+\n+Operand @code{OMP_SINGLE_BODY} contains the body of code to be\n+executed by a single thread.\n+\n+Operand @code{OMP_SINGLE_CLAUSES} is the list of clauses\n+associated with the directive.\n+\n+@item OMP_MASTER\n+\n+Represents @code{#pragma omp master}.\n+\n+Operand @code{OMP_MASTER_BODY} contains the body of code to be\n+executed by the master thread.\n+\n+@item OMP_ORDERED\n+\n+Represents @code{#pragma omp ordered}.\n+\n+Operand @code{OMP_ORDERED_BODY} contains the body of code to be\n+executed in the sequential order dictated by the loop index\n+variable.\n+\n+@item OMP_CRITICAL\n+\n+Represents @code{#pragma omp critical [name]}.\n+\n+Operand @code{OMP_CRITICAL_BODY} is the critical section.\n+\n+Operand @code{OMP_CRITICAL_NAME} is an optional identifier to\n+label the critical section.\n+\n+@item OMP_RETURN\n+\n+This does not represent any OpenMP directive, it is an artificial\n+marker to indicate the end of the body of an OpenMP. It is used\n+by the flow graph (@code{tree-cfg.c}) and OpenMP region\n+building code (@code{omp-low.c}).\n+\n+@item OMP_CONTINUE\n+\n+Similarly, this instruction does not represent an OpenMP\n+directive, it is used by @code{OMP_FOR} and\n+@code{OMP_SECTIONS} to mark the place where the code needs to\n+loop to the next iteration (in the case of @code{OMP_FOR}) or\n+the next section (in the case of @code{OMP_SECTIONS}).\n+\n+In some cases, @code{OMP_CONTINUE} is placed right before\n+@code{OMP_RETURN}.  But if there are cleanups that need to\n+occur right after the looping body, it will be emitted between\n+@code{OMP_CONTINUE} and @code{OMP_RETURN}.\n+\n+@item OMP_ATOMIC\n+\n+Represents @code{#pragma omp atomic}.\n+\n+Operand 0 is the address at which the atomic operation is to be\n+performed.\n+\n+Operand 1 is the expression to evaluate.  The gimplifier tries\n+three alternative code generation strategies.  Whenever possible,\n+an atomic update built-in is used.  If that fails, a\n+compare-and-swap loop is attempted.  If that also fails, a\n+regular critical section around the expression is used.\n+\n+@item OMP_CLAUSE\n+\n+Represents clauses associated with one of the @code{OMP_} directives.\n+Clauses are represented by separate sub-codes defined in\n+@file{tree.h}.  Clauses codes can be one of:\n+@code{OMP_CLAUSE_PRIVATE}, @code{OMP_CLAUSE_SHARED},\n+@code{OMP_CLAUSE_FIRSTPRIVATE},\n+@code{OMP_CLAUSE_LASTPRIVATE}, @code{OMP_CLAUSE_COPYIN},\n+@code{OMP_CLAUSE_COPYPRIVATE}, @code{OMP_CLAUSE_IF},\n+@code{OMP_CLAUSE_NUM_THREADS}, @code{OMP_CLAUSE_SCHEDULE},\n+@code{OMP_CLAUSE_NOWAIT}, @code{OMP_CLAUSE_ORDERED},\n+@code{OMP_CLAUSE_DEFAULT}, and @code{OMP_CLAUSE_REDUCTION}.  Each code\n+represents the corresponding OpenMP clause.\n+\n+Clauses associated with the same directive are chained together\n+via @code{OMP_CLAUSE_CHAIN}. Those clauses that accept a list\n+of variables are restricted to exactly one, accessed with\n+@code{OMP_CLAUSE_VAR}.  Therefore, multiple variables under the\n+same clause @code{C} need to be represented as multiple @code{C} clauses\n+chained together.  This facilitates adding new clauses during\n+compilation.\n+\n @end table"}]}