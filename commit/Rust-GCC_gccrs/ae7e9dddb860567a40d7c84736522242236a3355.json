{"sha": "ae7e9dddb860567a40d7c84736522242236a3355", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU3ZTlkZGRiODYwNTY3YTQwZDdjODQ3MzY1MjIyNDIyMzZhMzM1NQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2013-11-18T14:52:19Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2013-11-18T14:52:19Z"}, "message": "decl.c, [...]: Replace tree_low_cst (..., 1) with tree_to_uhwi throughout.\n\ngcc/ada/\n\t* gcc-interface/decl.c, gcc-interface/utils.c, gcc-interface/utils2.c:\n\tReplace tree_low_cst (..., 1) with tree_to_uhwi throughout.\n\ngcc/c-family/\n\t* c-common.c, c-cppbuiltin.c: Replace tree_low_cst (..., 1) with\n\ttree_to_uhwi throughout.\n\ngcc/c/\n\t* c-decl.c, c-typeck.c: Replace tree_low_cst (..., 1) with\n\ttree_to_uhwi throughout.\n\ngcc/cp/\n\t* call.c, class.c, decl.c, error.c: Replace tree_low_cst (..., 1) with\n\ttree_to_uhwi throughout.\n\ngcc/objc/\n\t* objc-encoding.c: Replace tree_low_cst (..., 1) with tree_to_uhwi\n\tthroughout.\n\ngcc/\n\t* alias.c, asan.c, builtins.c, cfgexpand.c, cgraph.c,\n\tconfig/aarch64/aarch64.c, config/alpha/predicates.md,\n\tconfig/arm/arm.c, config/darwin.c, config/epiphany/epiphany.c,\n\tconfig/i386/i386.c, config/iq2000/iq2000.c, config/m32c/m32c-pragma.c,\n\tconfig/mep/mep-pragma.c, config/mips/mips.c,\n\tconfig/picochip/picochip.c, config/rs6000/rs6000.c, cppbuiltin.c,\n\tdbxout.c, dwarf2out.c, emit-rtl.c, except.c, expr.c, fold-const.c,\n\tfunction.c, gimple-fold.c, godump.c, ipa-cp.c, ipa-prop.c, omp-low.c,\n\tpredict.c, sdbout.c, stor-layout.c, trans-mem.c, tree-object-size.c,\n\ttree-sra.c, tree-ssa-ccp.c, tree-ssa-forwprop.c,\n\ttree-ssa-loop-ivcanon.c, tree-ssa-loop-ivopts.c, tree-ssa-loop-niter.c,\n\ttree-ssa-loop-prefetch.c, tree-ssa-strlen.c, tree-stdarg.c,\n\ttree-switch-conversion.c, tree-vect-generic.c, tree-vect-loop.c,\n\ttree-vect-patterns.c, tree-vrp.c, tree.c, tsan.c, ubsan.c, varasm.c:\n\tReplace tree_low_cst (..., 1) with tree_to_uhwi throughout.\n\nFrom-SVN: r204961", "tree": {"sha": "586ec6bfb385ba75fc95f0a7d521c0b51c136124", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/586ec6bfb385ba75fc95f0a7d521c0b51c136124"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae7e9dddb860567a40d7c84736522242236a3355", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae7e9dddb860567a40d7c84736522242236a3355", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae7e9dddb860567a40d7c84736522242236a3355", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae7e9dddb860567a40d7c84736522242236a3355/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9439e9a1a4aed9382d459eab247958671ea5a30d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9439e9a1a4aed9382d459eab247958671ea5a30d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9439e9a1a4aed9382d459eab247958671ea5a30d"}], "stats": {"total": 661, "additions": 352, "deletions": 309}, "files": [{"sha": "e9350e4c9732bb76bd75a17fe5a540e35a8291c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -1,3 +1,21 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* alias.c, asan.c, builtins.c, cfgexpand.c, cgraph.c,\n+\tconfig/aarch64/aarch64.c, config/alpha/predicates.md,\n+\tconfig/arm/arm.c, config/darwin.c, config/epiphany/epiphany.c,\n+\tconfig/i386/i386.c, config/iq2000/iq2000.c, config/m32c/m32c-pragma.c,\n+\tconfig/mep/mep-pragma.c, config/mips/mips.c,\n+\tconfig/picochip/picochip.c, config/rs6000/rs6000.c, cppbuiltin.c,\n+\tdbxout.c, dwarf2out.c, emit-rtl.c, except.c, expr.c, fold-const.c,\n+\tfunction.c, gimple-fold.c, godump.c, ipa-cp.c, ipa-prop.c, omp-low.c,\n+\tpredict.c, sdbout.c, stor-layout.c, trans-mem.c, tree-object-size.c,\n+\ttree-sra.c, tree-ssa-ccp.c, tree-ssa-forwprop.c,\n+\ttree-ssa-loop-ivcanon.c, tree-ssa-loop-ivopts.c, tree-ssa-loop-niter.c,\n+\ttree-ssa-loop-prefetch.c, tree-ssa-strlen.c, tree-stdarg.c,\n+\ttree-switch-conversion.c, tree-vect-generic.c, tree-vect-loop.c,\n+\ttree-vect-patterns.c, tree-vrp.c, tree.c, tsan.c, ubsan.c, varasm.c:\n+\tReplace tree_low_cst (..., 1) with tree_to_uhwi throughout.\n+\n 2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* builtins.c, cilk-common.c, config/aarch64/aarch64.c,"}, {"sha": "3f1bcfb43e19a5a94fa083e4272a5084bcce7ce7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -1,3 +1,8 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* gcc-interface/decl.c, gcc-interface/utils.c, gcc-interface/utils2.c:\n+\tReplace tree_low_cst (..., 1) with tree_to_uhwi throughout.\n+\n 2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* gcc-interface/cuintp.c: Update comments to refer to"}, {"sha": "f5d7f2fc0c26ebf926ee11dfc204c5dc450362ac", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -843,7 +843,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t    else if (compare_tree_int (TYPE_SIZE (gnu_type), align_cap) > 0)\n \t      align = align_cap;\n \t    else\n-\t      align = ceil_pow2 (tree_low_cst (TYPE_SIZE (gnu_type), 1));\n+\t      align = ceil_pow2 (tree_to_uhwi (TYPE_SIZE (gnu_type)));\n \n \t    /* But make sure not to under-align the object.  */\n \t    if (align <= TYPE_ALIGN (gnu_type))\n@@ -4933,11 +4933,11 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t       && tree_fits_uhwi_p (TYPE_SIZE (gnu_type))\n \t       && integer_pow2p (TYPE_SIZE (gnu_type)))\n \talign = MIN (BIGGEST_ALIGNMENT,\n-\t\t     tree_low_cst (TYPE_SIZE (gnu_type), 1));\n+\t\t     tree_to_uhwi (TYPE_SIZE (gnu_type)));\n       else if (Is_Atomic (gnat_entity) && gnu_size\n \t       && tree_fits_uhwi_p (gnu_size)\n \t       && integer_pow2p (gnu_size))\n-\talign = MIN (BIGGEST_ALIGNMENT, tree_low_cst (gnu_size, 1));\n+\talign = MIN (BIGGEST_ALIGNMENT, tree_to_uhwi (gnu_size));\n \n       /* See if we need to pad the type.  If we did, and made a record,\n \t the name of the new type may be changed.  So get it back for\n@@ -8362,7 +8362,7 @@ create_field_decl_from (tree old_field, tree field_type, tree record_type,\n {\n   tree t = TREE_VALUE (purpose_member (old_field, pos_list));\n   tree pos = TREE_VEC_ELT (t, 0), bitpos = TREE_VEC_ELT (t, 2);\n-  unsigned int offset_align = tree_low_cst (TREE_VEC_ELT (t, 1), 1);\n+  unsigned int offset_align = tree_to_uhwi (TREE_VEC_ELT (t, 1));\n   tree new_pos, new_field;\n   unsigned int i;\n   subst_pair *s;"}, {"sha": "b92531b3fd6569d63f845a9136c57d4ead68d253", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -771,7 +771,7 @@ make_aligning_type (tree type, unsigned int align, tree size,\n tree\n make_packable_type (tree type, bool in_record)\n {\n-  unsigned HOST_WIDE_INT size = tree_low_cst (TYPE_SIZE (type), 1);\n+  unsigned HOST_WIDE_INT size = tree_to_uhwi (TYPE_SIZE (type));\n   unsigned HOST_WIDE_INT new_size;\n   tree new_type, old_field, field_list = NULL_TREE;\n   unsigned int align;\n@@ -918,7 +918,7 @@ make_type_from_size (tree type, tree size_tree, bool for_biased)\n   if (!size_tree || !tree_fits_uhwi_p (size_tree))\n     return type;\n \n-  size = tree_low_cst (size_tree, 1);\n+  size = tree_to_uhwi (size_tree);\n \n   switch (TREE_CODE (type))\n     {\n@@ -1744,7 +1744,7 @@ rest_of_record_type_compilation (tree record_type)\n \t      && tree_fits_uhwi_p (TREE_OPERAND (curpos, 1)))\n \t    {\n \t      tree offset = TREE_OPERAND (curpos, 0);\n-\t      align = tree_low_cst (TREE_OPERAND (curpos, 1), 1);\n+\t      align = tree_to_uhwi (TREE_OPERAND (curpos, 1));\n \t      align = scale_by_factor_of (offset, align);\n \t      last_pos = round_up (last_pos, align);\n \t      pos = compute_related_constant (curpos, last_pos);\n@@ -1758,9 +1758,9 @@ rest_of_record_type_compilation (tree record_type)\n \t    {\n \t      tree offset = TREE_OPERAND (TREE_OPERAND (curpos, 0), 0);\n \t      unsigned HOST_WIDE_INT addend\n-\t        = tree_low_cst (TREE_OPERAND (curpos, 1), 1);\n+\t        = tree_to_uhwi (TREE_OPERAND (curpos, 1));\n \t      align\n-\t\t= tree_low_cst (TREE_OPERAND (TREE_OPERAND (curpos, 0), 1), 1);\n+\t\t= tree_to_uhwi (TREE_OPERAND (TREE_OPERAND (curpos, 0), 1));\n \t      align = scale_by_factor_of (offset, align);\n \t      align = MIN (align, addend & -addend);\n \t      last_pos = round_up (last_pos, align);\n@@ -2378,7 +2378,7 @@ create_field_decl (tree field_name, tree field_type, tree record_type,\n       unsigned int known_align;\n \n       if (tree_fits_uhwi_p (pos))\n-\tknown_align = tree_low_cst (pos, 1) & - tree_low_cst (pos, 1);\n+\tknown_align = tree_to_uhwi (pos) & - tree_to_uhwi (pos);\n       else\n \tknown_align = BITS_PER_UNIT;\n \n@@ -2549,7 +2549,7 @@ bool\n value_factor_p (tree value, HOST_WIDE_INT factor)\n {\n   if (tree_fits_uhwi_p (value))\n-    return tree_low_cst (value, 1) % factor == 0;\n+    return tree_to_uhwi (value) % factor == 0;\n \n   if (TREE_CODE (value) == MULT_EXPR)\n     return (value_factor_p (TREE_OPERAND (value, 0), factor)\n@@ -2616,8 +2616,8 @@ potential_alignment_gap (tree prev_field, tree curr_field, tree offset)\n      iff it is not multiple of the current field alignment. */\n   if (tree_fits_uhwi_p (DECL_SIZE (prev_field))\n       && tree_fits_uhwi_p (bit_position (prev_field)))\n-    return ((tree_low_cst (bit_position (prev_field), 1)\n-\t     + tree_low_cst (DECL_SIZE (prev_field), 1))\n+    return ((tree_to_uhwi (bit_position (prev_field))\n+\t     + tree_to_uhwi (DECL_SIZE (prev_field)))\n \t    % DECL_ALIGN (curr_field) != 0);\n \n   /* If both the position and size of the previous field are multiples\n@@ -3274,7 +3274,7 @@ build_vms_descriptor32 (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n     case ENUMERAL_TYPE:\n     case BOOLEAN_TYPE:\n       if (TYPE_VAX_FLOATING_POINT_P (type))\n-\tswitch (tree_low_cst (TYPE_DIGITS_VALUE (type), 1))\n+\tswitch (tree_to_uhwi (TYPE_DIGITS_VALUE (type)))\n \t  {\n \t  case 6:\n \t    dtype = 10;\n@@ -3314,7 +3314,7 @@ build_vms_descriptor32 (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n     case COMPLEX_TYPE:\n       if (TREE_CODE (TREE_TYPE (type)) == INTEGER_TYPE\n \t  && TYPE_VAX_FLOATING_POINT_P (type))\n-\tswitch (tree_low_cst (TYPE_DIGITS_VALUE (type), 1))\n+\tswitch (tree_to_uhwi (TYPE_DIGITS_VALUE (type)))\n \t  {\n \t  case 6:\n \t    dtype = 12;\n@@ -3575,7 +3575,7 @@ build_vms_descriptor (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n     case ENUMERAL_TYPE:\n     case BOOLEAN_TYPE:\n       if (TYPE_VAX_FLOATING_POINT_P (type))\n-\tswitch (tree_low_cst (TYPE_DIGITS_VALUE (type), 1))\n+\tswitch (tree_to_uhwi (TYPE_DIGITS_VALUE (type)))\n \t  {\n \t  case 6:\n \t    dtype = 10;\n@@ -3615,7 +3615,7 @@ build_vms_descriptor (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n     case COMPLEX_TYPE:\n       if (TREE_CODE (TREE_TYPE (type)) == INTEGER_TYPE\n \t  && TYPE_VAX_FLOATING_POINT_P (type))\n-\tswitch (tree_low_cst (TYPE_DIGITS_VALUE (type), 1))\n+\tswitch (tree_to_uhwi (TYPE_DIGITS_VALUE (type)))\n \t  {\n \t  case 6:\n \t    dtype = 12;\n@@ -6310,7 +6310,7 @@ handle_vector_size_attribute (tree *node, tree name, tree args,\n     }\n \n   /* Get the vector size (in bytes).  */\n-  vecsize = tree_low_cst (size, 1);\n+  vecsize = tree_to_uhwi (size);\n \n   /* We need to provide for vector pointers, vector arrays, and\n      functions returning vectors.  For example:\n@@ -6342,7 +6342,7 @@ handle_vector_size_attribute (tree *node, tree name, tree args,\n       return NULL_TREE;\n     }\n \n-  if (vecsize % tree_low_cst (TYPE_SIZE_UNIT (type), 1))\n+  if (vecsize % tree_to_uhwi (TYPE_SIZE_UNIT (type)))\n     {\n       error (\"vector size not an integral multiple of component size\");\n       return NULL;\n@@ -6355,7 +6355,7 @@ handle_vector_size_attribute (tree *node, tree name, tree args,\n     }\n \n   /* Calculate how many units fit in the vector.  */\n-  nunits = vecsize / tree_low_cst (TYPE_SIZE_UNIT (type), 1);\n+  nunits = vecsize / tree_to_uhwi (TYPE_SIZE_UNIT (type));\n   if (nunits & (nunits - 1))\n     {\n       error (\"number of components of the vector not a power of two\");\n@@ -6427,9 +6427,9 @@ handle_vector_type_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n \n   /* Sanity check the vector size and element type consistency.  */\n \n-  vec_bytes = tree_low_cst (rep_size, 1);\n+  vec_bytes = tree_to_uhwi (rep_size);\n \n-  if (vec_bytes % tree_low_cst (TYPE_SIZE_UNIT (elem_type), 1))\n+  if (vec_bytes % tree_to_uhwi (TYPE_SIZE_UNIT (elem_type)))\n     {\n       error (\"vector size not an integral multiple of component size\");\n       return NULL;\n@@ -6441,7 +6441,7 @@ handle_vector_type_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n       return NULL;\n     }\n \n-  vec_units = vec_bytes / tree_low_cst (TYPE_SIZE_UNIT (elem_type), 1);\n+  vec_units = vec_bytes / tree_to_uhwi (TYPE_SIZE_UNIT (elem_type));\n   if (vec_units & (vec_units - 1))\n     {\n       error (\"number of components of the vector not a power of two\");"}, {"sha": "c45f1c3fc636ab434398a196e26aa875322799f8", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -626,7 +626,7 @@ nonbinary_modular_operation (enum tree_code op_code, tree type, tree lhs,\n static unsigned int\n resolve_atomic_size (tree type)\n {\n-  unsigned HOST_WIDE_INT size = tree_low_cst (TYPE_SIZE_UNIT (type), 1);\n+  unsigned HOST_WIDE_INT size = tree_to_uhwi (TYPE_SIZE_UNIT (type));\n \n   if (size == 1 || size == 2 || size == 4 || size == 8 || size == 16)\n     return size;"}, {"sha": "e53cb8033c5378753fcf7d4eb7cbbd687191800b", "filename": "gcc/alias.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -2352,8 +2352,8 @@ adjust_offset_for_component_ref (tree x, bool *known_p,\n \t  *known_p = false;\n \t  return;\n \t}\n-      *offset += (tree_low_cst (xoffset, 1)\n-\t\t  + (tree_low_cst (DECL_FIELD_BIT_OFFSET (field), 1)\n+      *offset += (tree_to_uhwi (xoffset)\n+\t\t  + (tree_to_uhwi (DECL_FIELD_BIT_OFFSET (field))\n \t\t     / BITS_PER_UNIT));\n \n       x = TREE_OPERAND (x, 0);"}, {"sha": "4353db6316016acc3af18431c4cf0c1f3c9c1133", "filename": "gcc/asan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -2029,7 +2029,7 @@ asan_add_global (tree decl, tree type, vec<constructor_elt, va_gc> *v)\n   CONSTRUCTOR_APPEND_ELT (vinner, NULL_TREE,\n \t\t\t  fold_convert (const_ptr_type_node,\n \t\t\t\t\tbuild_fold_addr_expr (refdecl)));\n-  size = tree_low_cst (DECL_SIZE_UNIT (decl), 1);\n+  size = tree_to_uhwi (DECL_SIZE_UNIT (decl));\n   CONSTRUCTOR_APPEND_ELT (vinner, NULL_TREE, build_int_cst (uptr, size));\n   size += asan_red_zone_size (size);\n   CONSTRUCTOR_APPEND_ELT (vinner, NULL_TREE, build_int_cst (uptr, size));"}, {"sha": "1405868ec39508d6811af887d581aad999d2e9f6", "filename": "gcc/builtins.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -662,7 +662,7 @@ c_getstr (tree src)\n \t   || compare_tree_int (offset_node, TREE_STRING_LENGTH (src) - 1) > 0)\n     return 0;\n \n-  return TREE_STRING_POINTER (src) + tree_low_cst (offset_node, 1);\n+  return TREE_STRING_POINTER (src) + tree_to_uhwi (offset_node);\n }\n \n /* Return a CONST_INT or CONST_DOUBLE corresponding to target reading\n@@ -3126,11 +3126,11 @@ determine_block_size (tree len, rtx len_rtx,\n       else\n \t{\n \t  if (tree_fits_uhwi_p (TYPE_MIN_VALUE (TREE_TYPE (len))))\n-\t    *min_size = tree_low_cst (TYPE_MIN_VALUE (TREE_TYPE (len)), 1);\n+\t    *min_size = tree_to_uhwi (TYPE_MIN_VALUE (TREE_TYPE (len)));\n \t  else\n \t    *min_size = 0;\n \t  if (tree_fits_uhwi_p (TYPE_MAX_VALUE (TREE_TYPE (len))))\n-\t    *max_size = tree_low_cst (TYPE_MAX_VALUE (TREE_TYPE (len)), 1);\n+\t    *max_size = tree_to_uhwi (TYPE_MAX_VALUE (TREE_TYPE (len)));\n \t  else\n \t    *max_size = GET_MODE_MASK (GET_MODE (len_rtx));\n \t}\n@@ -3529,14 +3529,14 @@ expand_builtin_strncpy (tree exp, rtx target)\n \t  rtx dest_mem;\n \n \t  if (!p || dest_align == 0 || !tree_fits_uhwi_p (len)\n-\t      || !can_store_by_pieces (tree_low_cst (len, 1),\n+\t      || !can_store_by_pieces (tree_to_uhwi (len),\n \t\t\t\t       builtin_strncpy_read_str,\n \t\t\t\t       CONST_CAST (char *, p),\n \t\t\t\t       dest_align, false))\n \t    return NULL_RTX;\n \n \t  dest_mem = get_memory_rtx (dest, len);\n-\t  store_by_pieces (dest_mem, tree_low_cst (len, 1),\n+\t  store_by_pieces (dest_mem, tree_to_uhwi (len),\n \t\t\t   builtin_strncpy_read_str,\n \t\t\t   CONST_CAST (char *, p), dest_align, false, 0);\n \t  dest_mem = force_operand (XEXP (dest_mem, 0), target);\n@@ -3673,12 +3673,12 @@ expand_builtin_memset_args (tree dest, tree val, tree len,\n        * We can't pass builtin_memset_gen_str as that emits RTL.  */\n       c = 1;\n       if (tree_fits_uhwi_p (len)\n-\t  && can_store_by_pieces (tree_low_cst (len, 1),\n+\t  && can_store_by_pieces (tree_to_uhwi (len),\n \t\t\t\t  builtin_memset_read_str, &c, dest_align,\n \t\t\t\t  true))\n \t{\n \t  val_rtx = force_reg (val_mode, val_rtx);\n-\t  store_by_pieces (dest_mem, tree_low_cst (len, 1),\n+\t  store_by_pieces (dest_mem, tree_to_uhwi (len),\n \t\t\t   builtin_memset_gen_str, val_rtx, dest_align,\n \t\t\t   true, 0);\n \t}\n@@ -3698,10 +3698,10 @@ expand_builtin_memset_args (tree dest, tree val, tree len,\n   if (c)\n     {\n       if (tree_fits_uhwi_p (len)\n-\t  && can_store_by_pieces (tree_low_cst (len, 1),\n+\t  && can_store_by_pieces (tree_to_uhwi (len),\n \t\t\t\t  builtin_memset_read_str, &c, dest_align,\n \t\t\t\t  true))\n-\tstore_by_pieces (dest_mem, tree_low_cst (len, 1),\n+\tstore_by_pieces (dest_mem, tree_to_uhwi (len),\n \t\t\t builtin_memset_read_str, &c, dest_align, true, 0);\n       else if (!set_storage_via_setmem (dest_mem, len_rtx,\n \t\t\t\t\tgen_int_mode (c, val_mode),\n@@ -4406,7 +4406,7 @@ expand_builtin_frame_address (tree fndecl, tree exp)\n     {\n       rtx tem\n \t= expand_builtin_return_addr (DECL_FUNCTION_CODE (fndecl),\n-\t\t\t\t      tree_low_cst (CALL_EXPR_ARG (exp, 0), 1));\n+\t\t\t\t      tree_to_uhwi (CALL_EXPR_ARG (exp, 0)));\n \n       /* Some ports cannot access arbitrary stack frames.  */\n       if (tem == NULL)\n@@ -8676,7 +8676,7 @@ fold_builtin_memset (location_t loc, tree dest, tree c, tree len,\n   if (! var_decl_component_p (var))\n     return NULL_TREE;\n \n-  length = tree_low_cst (len, 1);\n+  length = tree_to_uhwi (len);\n   if (GET_MODE_SIZE (TYPE_MODE (etype)) != length\n       || get_pointer_alignment (dest) / BITS_PER_UNIT < length)\n     return NULL_TREE;\n@@ -8781,7 +8781,7 @@ fold_builtin_memory_op (location_t loc, tree dest, tree src,\n \t  if (readonly_data_expr (src)\n \t      || (tree_fits_uhwi_p (len)\n \t\t  && (MIN (src_align, dest_align) / BITS_PER_UNIT\n-\t\t      >= (unsigned HOST_WIDE_INT) tree_low_cst (len, 1))))\n+\t\t      >= (unsigned HOST_WIDE_INT) tree_to_uhwi (len))))\n \t    {\n \t      tree fn = builtin_decl_implicit (BUILT_IN_MEMCPY);\n \t      if (!fn)\n@@ -8805,7 +8805,7 @@ fold_builtin_memory_op (location_t loc, tree dest, tree src,\n \t      dest_base = get_ref_base_and_extent (destvar, &dest_offset,\n \t\t\t\t\t\t   &size, &maxsize);\n \t      if (tree_fits_uhwi_p (len))\n-\t\tmaxsize = tree_low_cst (len, 1);\n+\t\tmaxsize = tree_to_uhwi (len);\n \t      else\n \t\tmaxsize = -1;\n \t      src_offset /= BITS_PER_UNIT;\n@@ -9172,7 +9172,7 @@ fold_builtin_memchr (location_t loc, tree arg1, tree arg2, tree len, tree type)\n \t  if (target_char_cast (arg2, &c))\n \t    return NULL_TREE;\n \n-\t  r = (const char *) memchr (p1, c, tree_low_cst (len, 1));\n+\t  r = (const char *) memchr (p1, c, tree_to_uhwi (len));\n \n \t  if (r == NULL)\n \t    return build_int_cst (TREE_TYPE (arg1), 0);\n@@ -9215,7 +9215,7 @@ fold_builtin_memcmp (location_t loc, tree arg1, tree arg2, tree len)\n       && compare_tree_int (len, strlen (p1) + 1) <= 0\n       && compare_tree_int (len, strlen (p2) + 1) <= 0)\n     {\n-      const int r = memcmp (p1, p2, tree_low_cst (len, 1));\n+      const int r = memcmp (p1, p2, tree_to_uhwi (len));\n \n       if (r > 0)\n \treturn integer_one_node;\n@@ -9227,7 +9227,7 @@ fold_builtin_memcmp (location_t loc, tree arg1, tree arg2, tree len)\n \n   /* If len parameter is one, return an expression corresponding to\n      (*(const unsigned char*)arg1 - (const unsigned char*)arg2).  */\n-  if (tree_fits_uhwi_p (len) && tree_low_cst (len, 1) == 1)\n+  if (tree_fits_uhwi_p (len) && tree_to_uhwi (len) == 1)\n     {\n       tree cst_uchar_node = build_type_variant (unsigned_char_type_node, 1, 0);\n       tree cst_uchar_ptr_node\n@@ -9341,7 +9341,7 @@ fold_builtin_strncmp (location_t loc, tree arg1, tree arg2, tree len)\n \n   if (tree_fits_uhwi_p (len) && p1 && p2)\n     {\n-      const int i = strncmp (p1, p2, tree_low_cst (len, 1));\n+      const int i = strncmp (p1, p2, tree_to_uhwi (len));\n       if (i > 0)\n \treturn integer_one_node;\n       else if (i < 0)\n@@ -9387,7 +9387,7 @@ fold_builtin_strncmp (location_t loc, tree arg1, tree arg2, tree len)\n \n   /* If len parameter is one, return an expression corresponding to\n      (*(const unsigned char*)arg1 - (const unsigned char*)arg2).  */\n-  if (tree_fits_uhwi_p (len) && tree_low_cst (len, 1) == 1)\n+  if (tree_fits_uhwi_p (len) && tree_to_uhwi (len) == 1)\n     {\n       tree cst_uchar_node = build_type_variant (unsigned_char_type_node, 1, 0);\n       tree cst_uchar_ptr_node\n@@ -12256,7 +12256,7 @@ fold_builtin_snprintf (location_t loc, tree dest, tree destsize, tree fmt,\n   if (!init_target_chars ())\n     return NULL_TREE;\n \n-  destlen = tree_low_cst (destsize, 1);\n+  destlen = tree_to_uhwi (destsize);\n \n   /* If the format doesn't contain % args or %%, use strcpy.  */\n   if (strchr (fmt_str, target_percent) == NULL)\n@@ -12304,7 +12304,7 @@ fold_builtin_snprintf (location_t loc, tree dest, tree destsize, tree fmt,\n       if (!retval || !tree_fits_uhwi_p (retval))\n \treturn NULL_TREE;\n \n-      origlen = tree_low_cst (retval, 1);\n+      origlen = tree_to_uhwi (retval);\n       /* We could expand this as\n \t memcpy (str1, str2, cst - 1); str1[cst - 1] = '\\0';\n \t or to"}, {"sha": "3900b4de47bf8350f46d95dd652d39748cc20a71", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -1,3 +1,8 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* c-common.c, c-cppbuiltin.c: Replace tree_low_cst (..., 1) with\n+\ttree_to_uhwi throughout.\n+\n 2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* c-common.c, c-format.c, c-omp.c, c-pretty-print.c: Replace"}, {"sha": "7761494cbaac27ac4bf63b307d7aabb0f9f2d9e1", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -8484,7 +8484,7 @@ handle_vector_size_attribute (tree *node, tree name, tree args,\n     }\n \n   /* Get the vector size (in bytes).  */\n-  vecsize = tree_low_cst (size, 1);\n+  vecsize = tree_to_uhwi (size);\n \n   /* We need to provide for vector pointers, vector arrays, and\n      functions returning vectors.  For example:\n@@ -8517,7 +8517,7 @@ handle_vector_size_attribute (tree *node, tree name, tree args,\n       return NULL_TREE;\n     }\n \n-  if (vecsize % tree_low_cst (TYPE_SIZE_UNIT (type), 1))\n+  if (vecsize % tree_to_uhwi (TYPE_SIZE_UNIT (type)))\n     {\n       error (\"vector size not an integral multiple of component size\");\n       return NULL;\n@@ -8530,7 +8530,7 @@ handle_vector_size_attribute (tree *node, tree name, tree args,\n     }\n \n   /* Calculate how many units fit in the vector.  */\n-  nunits = vecsize / tree_low_cst (TYPE_SIZE_UNIT (type), 1);\n+  nunits = vecsize / tree_to_uhwi (TYPE_SIZE_UNIT (type));\n   if (nunits & (nunits - 1))\n     {\n       error (\"number of components of the vector not a power of two\");\n@@ -10149,7 +10149,7 @@ sync_resolve_size (tree function, vec<tree, va_gc> *params)\n   if (!INTEGRAL_TYPE_P (type) && !POINTER_TYPE_P (type))\n     goto incompatible;\n \n-  size = tree_low_cst (TYPE_SIZE_UNIT (type), 1);\n+  size = tree_to_uhwi (TYPE_SIZE_UNIT (type));\n   if (size == 1 || size == 2 || size == 4 || size == 8 || size == 16)\n     return size;\n \n@@ -10309,7 +10309,7 @@ get_atomic_generic_size (location_t loc, tree function,\n       return 0;\n     }\n \n-  size_0 = tree_low_cst (TYPE_SIZE_UNIT (TREE_TYPE (type_0)), 1);\n+  size_0 = tree_to_uhwi (TYPE_SIZE_UNIT (TREE_TYPE (type_0)));\n \n   /* Zero size objects are not allowed.  */\n   if (size_0 == 0)\n@@ -10334,7 +10334,7 @@ get_atomic_generic_size (location_t loc, tree function,\n \t\t    function);\n \t  return 0;\n \t}\n-      size = tree_low_cst (TYPE_SIZE_UNIT (TREE_TYPE (type)), 1);\n+      size = tree_to_uhwi (TYPE_SIZE_UNIT (TREE_TYPE (type)));\n       if (size != size_0)\n \t{\n \t  error_at (loc, \"size mismatch in argument %d of %qE\", x + 1,\n@@ -10349,7 +10349,7 @@ get_atomic_generic_size (location_t loc, tree function,\n       tree p = (*params)[x];\n       if (TREE_CODE (p) == INTEGER_CST)\n         {\n-\t  int i = tree_low_cst (p, 1);\n+\t  int i = tree_to_uhwi (p);\n \t  if (i < 0 || (i & MEMMODEL_MASK) >= MEMMODEL_LAST)\n \t    {\n \t      warning_at (loc, OPT_Winvalid_memory_model,\n@@ -11703,7 +11703,7 @@ convert_vector_to_pointer_for_subscript (location_t loc,\n \n       if (TREE_CODE (index) == INTEGER_CST)\n         if (!tree_fits_uhwi_p (index)\n-            || ((unsigned HOST_WIDE_INT) tree_low_cst (index, 1)\n+            || ((unsigned HOST_WIDE_INT) tree_to_uhwi (index)\n                >= TYPE_VECTOR_SUBPARTS (type)))\n           warning_at (loc, OPT_Warray_bounds, \"index value is out of bound\");\n "}, {"sha": "c5e895c58506de761c455b32cdfdfc785d6adc90", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -106,7 +106,7 @@ static void\n builtin_define_type_sizeof (const char *name, tree type)\n {\n   builtin_define_with_int_value (name,\n-\t\t\t\t tree_low_cst (TYPE_SIZE_UNIT (type), 1));\n+\t\t\t\t tree_to_uhwi (TYPE_SIZE_UNIT (type)));\n }\n \n /* Define the float.h constants for TYPE using NAME_PREFIX, FP_SUFFIX,\n@@ -648,7 +648,7 @@ cpp_atomic_builtins (cpp_reader *pfile)\n   /* Tell the source code about various types.  These map to the C++11 and C11\n      macros where 2 indicates lock-free always, and 1 indicates sometimes\n      lock free.  */\n-#define SIZEOF_NODE(T) (tree_low_cst (TYPE_SIZE_UNIT (T), 1))\n+#define SIZEOF_NODE(T) (tree_to_uhwi (TYPE_SIZE_UNIT (T)))\n #define SWAP_INDEX(T) ((SIZEOF_NODE (T) < SWAP_LIMIT) ? SIZEOF_NODE (T) : 0)\n   builtin_define_with_int_value (\"__GCC_ATOMIC_BOOL_LOCK_FREE\", \n \t\t\t(have_swap[SWAP_INDEX (boolean_type_node)]? 2 : 1));"}, {"sha": "65b40eec5ef1e759f29114d0abcced9d8bba4018", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -1,3 +1,8 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* c-decl.c, c-typeck.c: Replace tree_low_cst (..., 1) with\n+\ttree_to_uhwi throughout.\n+\n 2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* c-parser.c: Replace tree_low_cst (..., 0) with tree_to_shwi"}, {"sha": "1f9c286708c6ebacc09c63dabaa2a3e9cd30a3c8", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -4832,7 +4832,7 @@ check_bitfield_type_and_width (tree *type, tree *width, tree orig_name)\n       *width = build_int_cst (integer_type_node, w);\n     }\n   else\n-    w = tree_low_cst (*width, 1);\n+    w = tree_to_uhwi (*width);\n \n   if (TREE_CODE (*type) == ENUMERAL_TYPE)\n     {\n@@ -7263,7 +7263,7 @@ finish_struct (location_t loc, tree t, tree fieldlist, tree attributes,\n \n       if (DECL_INITIAL (x))\n \t{\n-\t  unsigned HOST_WIDE_INT width = tree_low_cst (DECL_INITIAL (x), 1);\n+\t  unsigned HOST_WIDE_INT width = tree_to_uhwi (DECL_INITIAL (x));\n \t  DECL_SIZE (x) = bitsize_int (width);\n \t  DECL_BIT_FIELD (x) = 1;\n \t  SET_DECL_C_BIT_FIELD (x);\n@@ -7334,7 +7334,7 @@ finish_struct (location_t loc, tree t, tree fieldlist, tree attributes,\n \t  && TREE_TYPE (*fieldlistp) != error_mark_node)\n \t{\n \t  unsigned HOST_WIDE_INT width\n-\t    = tree_low_cst (DECL_INITIAL (*fieldlistp), 1);\n+\t    = tree_to_uhwi (DECL_INITIAL (*fieldlistp));\n \t  tree type = TREE_TYPE (*fieldlistp);\n \t  if (width != TYPE_PRECISION (type))\n \t    {"}, {"sha": "42b6a6e312292cb69fedbeac31d0f4b0a667e68b", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -7210,7 +7210,7 @@ push_init_level (int implicit, struct obstack * braced_init_obstack)\n   else if (TREE_CODE (constructor_type) == ARRAY_TYPE)\n     {\n       constructor_type = TREE_TYPE (constructor_type);\n-      push_array_bounds (tree_low_cst (constructor_index, 1));\n+      push_array_bounds (tree_to_uhwi (constructor_index));\n       constructor_depth++;\n     }\n \n@@ -8760,7 +8760,7 @@ process_init_element (struct c_expr value, bool implicit,\n \t  /* Now output the actual element.  */\n \t  if (value.value)\n \t    {\n-\t      push_array_bounds (tree_low_cst (constructor_index, 1));\n+\t      push_array_bounds (tree_to_uhwi (constructor_index));\n \t      output_init_element (value.value, value.original_type,\n \t\t\t\t   strict_string, elttype,\n \t\t\t\t   constructor_index, 1, implicit,"}, {"sha": "7732b097ea785f1cd14b020bc3ec453eae3c40f6", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -293,7 +293,7 @@ add_stack_var (tree decl)\n   * (size_t *)pointer_map_insert (decl_to_stack_part, decl) = stack_vars_num;\n \n   v->decl = decl;\n-  v->size = tree_low_cst (DECL_SIZE_UNIT (SSAVAR (decl)), 1);\n+  v->size = tree_to_uhwi (DECL_SIZE_UNIT (SSAVAR (decl)));\n   /* Ensure that all variables have size, so that &a != &b for any two\n      variables that are simultaneously live.  */\n   if (v->size == 0)\n@@ -1057,7 +1057,7 @@ expand_one_stack_var (tree var)\n   HOST_WIDE_INT size, offset;\n   unsigned byte_align;\n \n-  size = tree_low_cst (DECL_SIZE_UNIT (SSAVAR (var)), 1);\n+  size = tree_to_uhwi (DECL_SIZE_UNIT (SSAVAR (var)));\n   byte_align = align_local_variable (SSAVAR (var));\n \n   /* We handle highly aligned variables in expand_stack_vars.  */\n@@ -1133,7 +1133,7 @@ defer_stack_allocation (tree var, bool toplevel)\n   /* Whether the variable is small enough for immediate allocation not to be\n      a problem with regard to the frame size.  */\n   bool smallish\n-    = (tree_low_cst (DECL_SIZE_UNIT (var), 1)\n+    = (tree_to_uhwi (DECL_SIZE_UNIT (var))\n        < PARAM_VALUE (PARAM_MIN_SIZE_FOR_STACK_SHARING));\n \n   /* If stack protection is enabled, *all* stack variables must be deferred,\n@@ -1281,7 +1281,7 @@ expand_one_var (tree var, bool toplevel, bool really_expand)\n     {\n       if (really_expand)\n         expand_one_stack_var (origvar);\n-      return tree_low_cst (DECL_SIZE_UNIT (var), 1);\n+      return tree_to_uhwi (DECL_SIZE_UNIT (var));\n     }\n   return 0;\n }\n@@ -1361,7 +1361,7 @@ stack_protect_classify_type (tree type)\n \t      || !tree_fits_uhwi_p (TYPE_SIZE_UNIT (type)))\n \t    len = max;\n \t  else\n-\t    len = tree_low_cst (TYPE_SIZE_UNIT (type), 1);\n+\t    len = tree_to_uhwi (TYPE_SIZE_UNIT (type));\n \n \t  if (len < max)\n \t    ret = SPCT_HAS_SMALL_CHAR_ARRAY | SPCT_HAS_ARRAY;"}, {"sha": "1ada64b120d66b54a296a9939a64d970c6b675b1", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -966,7 +966,7 @@ cgraph_create_indirect_edge (struct cgraph_node *caller, gimple call_stmt,\n       gcc_assert (TREE_CODE (type) == RECORD_TYPE);\n       edge->indirect_info->param_index = -1;\n       edge->indirect_info->otr_token\n-\t = tree_low_cst (OBJ_TYPE_REF_TOKEN (target), 1);\n+\t = tree_to_uhwi (OBJ_TYPE_REF_TOKEN (target));\n       edge->indirect_info->otr_type = type;\n       edge->indirect_info->polymorphic = 1;\n     }"}, {"sha": "3bc35935248f5fbffdc4f22461db083ad2b1f00a", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -6036,12 +6036,12 @@ aapcs_vfp_sub_candidate (const_tree type, enum machine_mode *modep)\n \t    || count < 0)\n \t  return -1;\n \n-\tcount *= (1 + tree_low_cst (TYPE_MAX_VALUE (index), 1)\n-\t\t      - tree_low_cst (TYPE_MIN_VALUE (index), 1));\n+\tcount *= (1 + tree_to_uhwi (TYPE_MAX_VALUE (index))\n+\t\t      - tree_to_uhwi (TYPE_MIN_VALUE (index)));\n \n \t/* There must be no padding.  */\n \tif (!tree_fits_uhwi_p (TYPE_SIZE (type))\n-\t    || (tree_low_cst (TYPE_SIZE (type), 1)\n+\t    || (tree_to_uhwi (TYPE_SIZE (type))\n \t\t!= count * GET_MODE_BITSIZE (*modep)))\n \t  return -1;\n \n@@ -6071,7 +6071,7 @@ aapcs_vfp_sub_candidate (const_tree type, enum machine_mode *modep)\n \n \t/* There must be no padding.  */\n \tif (!tree_fits_uhwi_p (TYPE_SIZE (type))\n-\t    || (tree_low_cst (TYPE_SIZE (type), 1)\n+\t    || (tree_to_uhwi (TYPE_SIZE (type))\n \t\t!= count * GET_MODE_BITSIZE (*modep)))\n \t  return -1;\n \n@@ -6103,7 +6103,7 @@ aapcs_vfp_sub_candidate (const_tree type, enum machine_mode *modep)\n \n \t/* There must be no padding.  */\n \tif (!tree_fits_uhwi_p (TYPE_SIZE (type))\n-\t    || (tree_low_cst (TYPE_SIZE (type), 1)\n+\t    || (tree_to_uhwi (TYPE_SIZE (type))\n \t\t!= count * GET_MODE_BITSIZE (*modep)))\n \t  return -1;\n "}, {"sha": "8a2166c1e031bf89a68acf7e92edfdb3c33bc518", "filename": "gcc/config/alpha/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fconfig%2Falpha%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fconfig%2Falpha%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fpredicates.md?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -357,7 +357,7 @@\n \t    && !SYMBOL_REF_TLS_MODEL (op))\n     {\n       if (SYMBOL_REF_DECL (op))\n-        max_ofs = tree_low_cst (DECL_SIZE_UNIT (SYMBOL_REF_DECL (op)), 1);\n+        max_ofs = tree_to_uhwi (DECL_SIZE_UNIT (SYMBOL_REF_DECL (op)));\n     }\n   else\n     return false;"}, {"sha": "72ba2ed5548b4d7362756002a08a97b2931b6135", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -4734,12 +4734,12 @@ aapcs_vfp_sub_candidate (const_tree type, enum machine_mode *modep)\n \t    || count < 0)\n \t  return -1;\n \n-\tcount *= (1 + tree_low_cst (TYPE_MAX_VALUE (index), 1)\n-\t\t      - tree_low_cst (TYPE_MIN_VALUE (index), 1));\n+\tcount *= (1 + tree_to_uhwi (TYPE_MAX_VALUE (index))\n+\t\t      - tree_to_uhwi (TYPE_MIN_VALUE (index)));\n \n \t/* There must be no padding.  */\n \tif (!tree_fits_uhwi_p (TYPE_SIZE (type))\n-\t    || (tree_low_cst (TYPE_SIZE (type), 1)\n+\t    || (tree_to_uhwi (TYPE_SIZE (type))\n \t\t!= count * GET_MODE_BITSIZE (*modep)))\n \t  return -1;\n \n@@ -4769,7 +4769,7 @@ aapcs_vfp_sub_candidate (const_tree type, enum machine_mode *modep)\n \n \t/* There must be no padding.  */\n \tif (!tree_fits_uhwi_p (TYPE_SIZE (type))\n-\t    || (tree_low_cst (TYPE_SIZE (type), 1)\n+\t    || (tree_to_uhwi (TYPE_SIZE (type))\n \t\t!= count * GET_MODE_BITSIZE (*modep)))\n \t  return -1;\n \n@@ -4801,7 +4801,7 @@ aapcs_vfp_sub_candidate (const_tree type, enum machine_mode *modep)\n \n \t/* There must be no padding.  */\n \tif (!tree_fits_uhwi_p (TYPE_SIZE (type))\n-\t    || (tree_low_cst (TYPE_SIZE (type), 1)\n+\t    || (tree_to_uhwi (TYPE_SIZE (type))\n \t\t!= count * GET_MODE_BITSIZE (*modep)))\n \t  return -1;\n "}, {"sha": "63efe49475d311ba9c71eaa4435aa31f7aa72d10", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -1509,7 +1509,7 @@ machopic_select_section (tree decl,\n \n   zsize = (DECL_P (decl) \n \t   && (TREE_CODE (decl) == VAR_DECL || TREE_CODE (decl) == CONST_DECL) \n-\t   && tree_low_cst (DECL_SIZE_UNIT (decl), 1) == 0);\n+\t   && tree_to_uhwi (DECL_SIZE_UNIT (decl)) == 0);\n \n   one = DECL_P (decl) \n \t&& TREE_CODE (decl) == VAR_DECL \n@@ -1650,7 +1650,7 @@ machopic_select_section (tree decl,\n       static bool warned_objc_46 = false;\n       /* We shall assert that zero-sized objects are an error in ObjC \n          meta-data.  */\n-      gcc_assert (tree_low_cst (DECL_SIZE_UNIT (decl), 1) != 0);\n+      gcc_assert (tree_to_uhwi (DECL_SIZE_UNIT (decl)) != 0);\n       \n       /* ??? This mechanism for determining the metadata section is\n \t broken when LTO is in use, since the frontend that generated\n@@ -2187,7 +2187,7 @@ darwin_asm_declare_object_name (FILE *file,\n \tmachopic_define_symbol (DECL_RTL (decl));\n     }\n \n-  size = tree_low_cst (DECL_SIZE_UNIT (decl), 1);\n+  size = tree_to_uhwi (DECL_SIZE_UNIT (decl));\n \n #ifdef DEBUG_DARWIN_MEM_ALLOCATORS\n fprintf (file, \"# dadon: %s %s (%llu, %u) local %d weak %d\""}, {"sha": "3a09efa0a1c2f1f53dfeca23b3437e5038ba6c19", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -2785,7 +2785,7 @@ epiphany_adjust_field_align (tree field, unsigned computed)\n     {\n       tree elmsz = TYPE_SIZE (TREE_TYPE (TREE_TYPE (field)));\n \n-      if (!tree_fits_uhwi_p (elmsz) || tree_low_cst (elmsz, 1) >= 32)\n+      if (!tree_fits_uhwi_p (elmsz) || tree_to_uhwi (elmsz) >= 32)\n \treturn 64;\n     }\n   return computed;"}, {"sha": "8cc408b10fe70e0a42e77f6e7585566d04587417", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -29317,7 +29317,7 @@ ix86_builtin_tm_load (tree type)\n {\n   if (TREE_CODE (type) == VECTOR_TYPE)\n     {\n-      switch (tree_low_cst (TYPE_SIZE (type), 1))\n+      switch (tree_to_uhwi (TYPE_SIZE (type)))\n \t{\n \tcase 64:\n \t  return builtin_decl_explicit (BUILT_IN_TM_LOAD_M64);\n@@ -29337,7 +29337,7 @@ ix86_builtin_tm_store (tree type)\n {\n   if (TREE_CODE (type) == VECTOR_TYPE)\n     {\n-      switch (tree_low_cst (TYPE_SIZE (type), 1))\n+      switch (tree_to_uhwi (TYPE_SIZE (type)))\n \t{\n \tcase 64:\n \t  return builtin_decl_explicit (BUILT_IN_TM_STORE_M64);\n@@ -32658,7 +32658,7 @@ get_element_number (tree vec_type, tree arg)\n   unsigned HOST_WIDE_INT elt, max = TYPE_VECTOR_SUBPARTS (vec_type) - 1;\n \n   if (!tree_fits_uhwi_p (arg)\n-      || (elt = tree_low_cst (arg, 1), elt > max))\n+      || (elt = tree_to_uhwi (arg), elt > max))\n     {\n       error (\"selector must be an integer constant in the range 0..%wi\", max);\n       return 0;"}, {"sha": "e65d0ccdc030e3322fbc9abbbdbdce49a0c46764", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -1307,7 +1307,7 @@ iq2000_function_arg (cumulative_args_t cum_v, enum machine_mode mode,\n \t      /* ??? If this is a packed structure, then the last hunk won't\n \t\t be 64 bits.  */\n \t      chunks\n-\t\t= tree_low_cst (TYPE_SIZE_UNIT (type), 1) / UNITS_PER_WORD;\n+\t\t= tree_to_uhwi (TYPE_SIZE_UNIT (type)) / UNITS_PER_WORD;\n \t      if (chunks + *arg_words + bias > (unsigned) MAX_ARGS_IN_REGISTERS)\n \t\tchunks = MAX_ARGS_IN_REGISTERS - *arg_words - bias;\n "}, {"sha": "aa16a30453d25774685739e396a44147e7f8f33d", "filename": "gcc/config/m32c/m32c-pragma.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fconfig%2Fm32c%2Fm32c-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fconfig%2Fm32c%2Fm32c-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c-pragma.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -48,7 +48,7 @@ m32c_pragma_memregs (cpp_reader * reader ATTRIBUTE_UNUSED)\n     {\n       if (tree_fits_uhwi_p (val))\n \t{\n-\t  i = tree_low_cst (val, 1);\n+\t  i = tree_to_uhwi (val);\n \n \t  type = pragma_lex (&val);\n \t  if (type != CPP_EOF)\n@@ -95,7 +95,7 @@ m32c_pragma_address (cpp_reader * reader ATTRIBUTE_UNUSED)\n \t{\n \t  if (var != error_mark_node)\n \t    {\n-\t      unsigned uaddr = tree_low_cst (addr, 1);\n+\t      unsigned uaddr = tree_to_uhwi (addr);\n \t      m32c_note_pragma_address (IDENTIFIER_POINTER (var), uaddr);\n \t    }\n "}, {"sha": "45a4b4496a41d168ae13212156957bb7eb508b04", "filename": "gcc/config/mep/mep-pragma.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fconfig%2Fmep%2Fmep-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fconfig%2Fmep%2Fmep-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep-pragma.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -234,7 +234,7 @@ mep_pragma_coprocessor_width (void)\n     case CPP_NUMBER:\n       if (! tree_fits_uhwi_p (val))\n \tbreak;\n-      i = tree_low_cst (val, 1);\n+      i = tree_to_uhwi (val);\n       /* This pragma no longer has any effect.  */\n #if 0\n       if (i == 32)\n@@ -273,7 +273,7 @@ mep_pragma_coprocessor_subclass (void)\n   type = mep_pragma_lex (&val);\n   if (type != CPP_CHAR)\n     goto syntax_error;\n-  class_letter = tree_low_cst (val, 1);\n+  class_letter = tree_to_uhwi (val);\n   if (class_letter >= 'A' && class_letter <= 'D')\n     switch (class_letter)\n       {"}, {"sha": "c2666317caa2b80601670482cf037fd5eab46b3e", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -14940,7 +14940,7 @@ r10k_safe_mem_expr_p (tree expr, HOST_WIDE_INT offset)\n     return false;\n \n   offset += bitoffset / BITS_PER_UNIT;\n-  return offset >= 0 && offset < tree_low_cst (DECL_SIZE_UNIT (inner), 1);\n+  return offset >= 0 && offset < tree_to_uhwi (DECL_SIZE_UNIT (inner));\n }\n \n /* A for_each_rtx callback for which DATA points to the instruction"}, {"sha": "641bccb81f61c6f4e0eb264df1f88a578e06b9cd", "filename": "gcc/config/picochip/picochip.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -810,7 +810,7 @@ picochip_compute_arg_size (const_tree type, enum machine_mode mode)\n   int type_size_in_units = 0;\n \n   if (type)\n-    type_size_in_units = tree_low_cst (TYPE_SIZE_UNIT (type), 1);\n+    type_size_in_units = tree_to_uhwi (TYPE_SIZE_UNIT (type));\n   else\n     type_size_in_units = GET_MODE_SIZE (mode);\n "}, {"sha": "cb6ce999a300978b10b2e1aa00520cc57508c29c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -6128,7 +6128,7 @@ offsettable_ok_by_alignment (rtx op, HOST_WIDE_INT offset,\n \t  if (!tree_fits_uhwi_p (DECL_SIZE_UNIT (decl)))\n \t    return false;\n \n-\t  dsize = tree_low_cst (DECL_SIZE_UNIT (decl), 1);\n+\t  dsize = tree_to_uhwi (DECL_SIZE_UNIT (decl));\n \t  if (dsize > 32768)\n \t    return false;\n \n@@ -6152,7 +6152,7 @@ offsettable_ok_by_alignment (rtx op, HOST_WIDE_INT offset,\n \t    dsize = TREE_STRING_LENGTH (decl);\n \t  else if (TYPE_SIZE_UNIT (type)\n \t\t   && tree_fits_uhwi_p (TYPE_SIZE_UNIT (type)))\n-\t    dsize = tree_low_cst (TYPE_SIZE_UNIT (type), 1);\n+\t    dsize = tree_to_uhwi (TYPE_SIZE_UNIT (type));\n \t  else\n \t    return false;\n \t  if (dsize > 32768)\n@@ -8559,12 +8559,12 @@ rs6000_aggregate_candidate (const_tree type, enum machine_mode *modep)\n \t    || count < 0)\n \t  return -1;\n \n-\tcount *= (1 + tree_low_cst (TYPE_MAX_VALUE (index), 1)\n-\t\t      - tree_low_cst (TYPE_MIN_VALUE (index), 1));\n+\tcount *= (1 + tree_to_uhwi (TYPE_MAX_VALUE (index))\n+\t\t      - tree_to_uhwi (TYPE_MIN_VALUE (index)));\n \n \t/* There must be no padding.  */\n \tif (!tree_fits_uhwi_p (TYPE_SIZE (type))\n-\t    || (tree_low_cst (TYPE_SIZE (type), 1)\n+\t    || (tree_to_uhwi (TYPE_SIZE (type))\n \t\t!= count * GET_MODE_BITSIZE (*modep)))\n \t  return -1;\n \n@@ -8594,7 +8594,7 @@ rs6000_aggregate_candidate (const_tree type, enum machine_mode *modep)\n \n \t/* There must be no padding.  */\n \tif (!tree_fits_uhwi_p (TYPE_SIZE (type))\n-\t    || (tree_low_cst (TYPE_SIZE (type), 1)\n+\t    || (tree_to_uhwi (TYPE_SIZE (type))\n \t\t!= count * GET_MODE_BITSIZE (*modep)))\n \t  return -1;\n \n@@ -8626,7 +8626,7 @@ rs6000_aggregate_candidate (const_tree type, enum machine_mode *modep)\n \n \t/* There must be no padding.  */\n \tif (!tree_fits_uhwi_p (TYPE_SIZE (type))\n-\t    || (tree_low_cst (TYPE_SIZE (type), 1)\n+\t    || (tree_to_uhwi (TYPE_SIZE (type))\n \t\t!= count * GET_MODE_BITSIZE (*modep)))\n \t  return -1;\n \n@@ -12387,7 +12387,7 @@ get_element_number (tree vec_type, tree arg)\n   unsigned HOST_WIDE_INT elt, max = TYPE_VECTOR_SUBPARTS (vec_type) - 1;\n \n   if (!tree_fits_uhwi_p (arg)\n-      || (elt = tree_low_cst (arg, 1), elt > max))\n+      || (elt = tree_to_uhwi (arg), elt > max))\n     {\n       error (\"selector must be an integer constant in the range 0..%wi\", max);\n       return 0;"}, {"sha": "e2705f9108e979d72ecd6e8c02009b2a8c4124ff", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -1,3 +1,8 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* call.c, class.c, decl.c, error.c: Replace tree_low_cst (..., 1) with\n+\ttree_to_uhwi throughout.\n+\n 2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* class.c, dump.c, error.c, init.c, method.c, parser.c, semantics.c:"}, {"sha": "fd7b1cc78d451bba2b12bf037fb30ec704af5a22", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -941,7 +941,7 @@ build_array_conv (tree type, tree ctor, int flags, tsubst_flags_t complain)\n \n   if (TYPE_DOMAIN (type))\n     {\n-      unsigned HOST_WIDE_INT alen = tree_low_cst (array_type_nelts_top (type), 1);\n+      unsigned HOST_WIDE_INT alen = tree_to_uhwi (array_type_nelts_top (type));\n       if (alen < len)\n \treturn NULL;\n     }"}, {"sha": "39ff6a54fb0f20381a7ab4eea4f74e959d97308c", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -6169,7 +6169,7 @@ layout_class_type (tree t, tree *virtuals_p)\n \t{\n \t  unsigned HOST_WIDE_INT width;\n \t  tree ftype = TREE_TYPE (field);\n-\t  width = tree_low_cst (DECL_SIZE (field), /*unsignedp=*/1);\n+\t  width = tree_to_uhwi (DECL_SIZE (field));\n \t  if (width != TYPE_PRECISION (ftype))\n \t    {\n \t      TREE_TYPE (field)"}, {"sha": "1a1581e24c927e627a3a96c6472e3b37dab8562b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -5094,7 +5094,7 @@ reshape_init_array_1 (tree elt_type, tree max_index, reshape_iter *d,\n \treturn new_init;\n \n       if (tree_fits_uhwi_p (max_index))\n-\tmax_index_cst = tree_low_cst (max_index, 1);\n+\tmax_index_cst = tree_to_uhwi (max_index);\n       /* sizetype is sign extended, not zero extended.  */\n       else\n \tmax_index_cst = tree_low_cst (fold_convert (size_type_node, max_index),"}, {"sha": "0ad9f0722db1d0c8f61d14fcb7dfe3e3d2229d45", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -1853,7 +1853,7 @@ static tree\n resolve_virtual_fun_from_obj_type_ref (tree ref)\n {\n   tree obj_type = TREE_TYPE (OBJ_TYPE_REF_OBJECT (ref));\n-  HOST_WIDE_INT index = tree_low_cst (OBJ_TYPE_REF_TOKEN (ref), 1);\n+  HOST_WIDE_INT index = tree_to_uhwi (OBJ_TYPE_REF_TOKEN (ref));\n   tree fun = BINFO_VIRTUALS (TYPE_BINFO (TREE_TYPE (obj_type)));\n   while (index)\n     {"}, {"sha": "0c112654cd5242c806d29634da7d933ebd707e10", "filename": "gcc/cppbuiltin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fcppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fcppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppbuiltin.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -130,7 +130,7 @@ define_builtin_macros_for_type_sizes (cpp_reader *pfile)\n {\n #define define_type_sizeof(NAME, TYPE)                             \\\n     cpp_define_formatted (pfile, NAME\"=\"HOST_WIDE_INT_PRINT_DEC,   \\\n-                          tree_low_cst (TYPE_SIZE_UNIT (TYPE), 1))\n+                          tree_to_uhwi (TYPE_SIZE_UNIT (TYPE)))\n \n   define_type_sizeof (\"__SIZEOF_INT__\", integer_type_node);\n   define_type_sizeof (\"__SIZEOF_LONG__\", long_integer_type_node);"}, {"sha": "2e03c124ee86d43496e64dfe4c7bdab8c358e6e0", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -1566,7 +1566,7 @@ dbxout_type_fields (tree type)\n \t      stabstr_C (',');\n \t      stabstr_D (int_bit_position (tem));\n \t      stabstr_C (',');\n-\t      stabstr_D (tree_low_cst (DECL_SIZE (tem), 1));\n+\t      stabstr_D (tree_to_uhwi (DECL_SIZE (tem)));\n \t      stabstr_C (';');\n \t    }\n \t}"}, {"sha": "4f7bcf4f79e2d2387559a0cd45de3ebbda02e840", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -10262,7 +10262,7 @@ simple_type_size_in_bits (const_tree type)\n   else if (TYPE_SIZE (type) == NULL_TREE)\n     return 0;\n   else if (tree_fits_uhwi_p (TYPE_SIZE (type)))\n-    return tree_low_cst (TYPE_SIZE (type), 1);\n+    return tree_to_uhwi (TYPE_SIZE (type));\n   else\n     return TYPE_ALIGN (type);\n }\n@@ -13543,7 +13543,7 @@ dw_sra_loc_expr (tree decl, rtx loc)\n       || !tree_fits_uhwi_p (DECL_SIZE (decl)))\n     return NULL;\n \n-  decl_size = tree_low_cst (DECL_SIZE (decl), 1);\n+  decl_size = tree_to_uhwi (DECL_SIZE (decl));\n   descr = NULL;\n   descr_tail = &descr;\n \n@@ -16436,7 +16436,7 @@ add_bit_size_attribute (dw_die_ref die, tree decl)\n \t      && DECL_BIT_FIELD_TYPE (decl));\n \n   if (tree_fits_uhwi_p (DECL_SIZE (decl)))\n-    add_AT_unsigned (die, DW_AT_bit_size, tree_low_cst (DECL_SIZE (decl), 1));\n+    add_AT_unsigned (die, DW_AT_bit_size, tree_to_uhwi (DECL_SIZE (decl)));\n }\n \n /* If the compiled language is ANSI C, then add a 'prototyped'\n@@ -17073,7 +17073,7 @@ descr_info_loc (tree val, tree base_decl)\n     case POINTER_PLUS_EXPR:\n     case PLUS_EXPR:\n       if (tree_fits_uhwi_p (TREE_OPERAND (val, 1))\n-\t  && (unsigned HOST_WIDE_INT) tree_low_cst (TREE_OPERAND (val, 1), 1)\n+\t  && (unsigned HOST_WIDE_INT) tree_to_uhwi (TREE_OPERAND (val, 1))\n \t     < 16384)\n \t{\n \t  loc = descr_info_loc (TREE_OPERAND (val, 0), base_decl);"}, {"sha": "af228d94bd4b6c7c73ad7f0962d5561622d55ed3", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -1545,8 +1545,8 @@ get_mem_align_offset (rtx mem, unsigned int align)\n \t      || !tree_fits_uhwi_p (bit_offset))\n \t    return -1;\n \n-\t  offset += tree_low_cst (byte_offset, 1);\n-\t  offset += tree_low_cst (bit_offset, 1) / BITS_PER_UNIT;\n+\t  offset += tree_to_uhwi (byte_offset);\n+\t  offset += tree_to_uhwi (bit_offset) / BITS_PER_UNIT;\n \n \t  if (inner == NULL_TREE)\n \t    {\n@@ -1773,7 +1773,7 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n \t      if (tree_fits_uhwi_p (off_tree))\n \t\t{\n \t\t  attrs.offset_known_p = true;\n-\t\t  attrs.offset = tree_low_cst (off_tree, 1);\n+\t\t  attrs.offset = tree_to_uhwi (off_tree);\n \t\t  apply_bitpos = bitpos;\n \t\t}\n \t    }\n@@ -1803,7 +1803,7 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n   if (tree_fits_uhwi_p (new_size))\n     {\n       attrs.size_known_p = true;\n-      attrs.size = tree_low_cst (new_size, 1);\n+      attrs.size = tree_to_uhwi (new_size);\n     }\n \n   /* If we modified OFFSET based on T, then subtract the outstanding\n@@ -2280,8 +2280,8 @@ widen_memory_access (rtx memref, enum machine_mode mode, HOST_WIDE_INT offset)\n \t    }\n \n \t  attrs.expr = TREE_OPERAND (attrs.expr, 0);\n-\t  attrs.offset += tree_low_cst (offset, 1);\n-\t  attrs.offset += (tree_low_cst (DECL_FIELD_BIT_OFFSET (field), 1)\n+\t  attrs.offset += tree_to_uhwi (offset);\n+\t  attrs.offset += (tree_to_uhwi (DECL_FIELD_BIT_OFFSET (field))\n \t\t\t   / BITS_PER_UNIT);\n \t}\n       /* Similarly for the decl.  */"}, {"sha": "6043ef293e636708315d861c84176ea4d9a6c44b", "filename": "gcc/except.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -313,20 +313,20 @@ init_eh (void)\n       /* Cache the interesting field offsets so that we have\n \t easy access from rtl.  */\n       sjlj_fc_call_site_ofs\n-\t= (tree_low_cst (DECL_FIELD_OFFSET (f_cs), 1)\n-\t   + tree_low_cst (DECL_FIELD_BIT_OFFSET (f_cs), 1) / BITS_PER_UNIT);\n+\t= (tree_to_uhwi (DECL_FIELD_OFFSET (f_cs))\n+\t   + tree_to_uhwi (DECL_FIELD_BIT_OFFSET (f_cs)) / BITS_PER_UNIT);\n       sjlj_fc_data_ofs\n-\t= (tree_low_cst (DECL_FIELD_OFFSET (f_data), 1)\n-\t   + tree_low_cst (DECL_FIELD_BIT_OFFSET (f_data), 1) / BITS_PER_UNIT);\n+\t= (tree_to_uhwi (DECL_FIELD_OFFSET (f_data))\n+\t   + tree_to_uhwi (DECL_FIELD_BIT_OFFSET (f_data)) / BITS_PER_UNIT);\n       sjlj_fc_personality_ofs\n-\t= (tree_low_cst (DECL_FIELD_OFFSET (f_per), 1)\n-\t   + tree_low_cst (DECL_FIELD_BIT_OFFSET (f_per), 1) / BITS_PER_UNIT);\n+\t= (tree_to_uhwi (DECL_FIELD_OFFSET (f_per))\n+\t   + tree_to_uhwi (DECL_FIELD_BIT_OFFSET (f_per)) / BITS_PER_UNIT);\n       sjlj_fc_lsda_ofs\n-\t= (tree_low_cst (DECL_FIELD_OFFSET (f_lsda), 1)\n-\t   + tree_low_cst (DECL_FIELD_BIT_OFFSET (f_lsda), 1) / BITS_PER_UNIT);\n+\t= (tree_to_uhwi (DECL_FIELD_OFFSET (f_lsda))\n+\t   + tree_to_uhwi (DECL_FIELD_BIT_OFFSET (f_lsda)) / BITS_PER_UNIT);\n       sjlj_fc_jbuf_ofs\n-\t= (tree_low_cst (DECL_FIELD_OFFSET (f_jbuf), 1)\n-\t   + tree_low_cst (DECL_FIELD_BIT_OFFSET (f_jbuf), 1) / BITS_PER_UNIT);\n+\t= (tree_to_uhwi (DECL_FIELD_OFFSET (f_jbuf))\n+\t   + tree_to_uhwi (DECL_FIELD_BIT_OFFSET (f_jbuf)) / BITS_PER_UNIT);\n     }\n }\n \n@@ -2145,7 +2145,7 @@ expand_builtin_eh_return_data_regno (tree exp)\n       return constm1_rtx;\n     }\n \n-  iwhich = tree_low_cst (which, 1);\n+  iwhich = tree_to_uhwi (which);\n   iwhich = EH_RETURN_DATA_REGNO (iwhich);\n   if (iwhich == INVALID_REGNUM)\n     return constm1_rtx;"}, {"sha": "4ce87119c2d2950e9978ed47f6b134f63c839bda", "filename": "gcc/expr.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -4630,12 +4630,12 @@ get_bit_range (unsigned HOST_WIDE_INT *bitstart,\n      see finish_bitfield_layout.  */\n   if (tree_fits_uhwi_p (DECL_FIELD_OFFSET (field))\n       && tree_fits_uhwi_p (DECL_FIELD_OFFSET (repr)))\n-    bitoffset = (tree_low_cst (DECL_FIELD_OFFSET (field), 1)\n-\t\t - tree_low_cst (DECL_FIELD_OFFSET (repr), 1)) * BITS_PER_UNIT;\n+    bitoffset = (tree_to_uhwi (DECL_FIELD_OFFSET (field))\n+\t\t - tree_to_uhwi (DECL_FIELD_OFFSET (repr))) * BITS_PER_UNIT;\n   else\n     bitoffset = 0;\n-  bitoffset += (tree_low_cst (DECL_FIELD_BIT_OFFSET (field), 1)\n-\t\t- tree_low_cst (DECL_FIELD_BIT_OFFSET (repr), 1));\n+  bitoffset += (tree_to_uhwi (DECL_FIELD_BIT_OFFSET (field))\n+\t\t- tree_to_uhwi (DECL_FIELD_BIT_OFFSET (repr)));\n \n   /* If the adjustment is larger than bitpos, we would have a negative bit\n      position for the lower bound and this may wreak havoc later.  Adjust\n@@ -4656,7 +4656,7 @@ get_bit_range (unsigned HOST_WIDE_INT *bitstart,\n   else\n     *bitstart = *bitpos - bitoffset;\n \n-  *bitend = *bitstart + tree_low_cst (DECL_SIZE (repr), 1) - 1;\n+  *bitend = *bitstart + tree_to_uhwi (DECL_SIZE (repr)) - 1;\n }\n \n /* Returns true if ADDR is an ADDR_EXPR of a DECL that does not reside\n@@ -5474,7 +5474,7 @@ count_type_elements (const_tree type, bool for_ctor_p)\n \t  {\n \t    unsigned HOST_WIDE_INT n;\n \n-\t    n = tree_low_cst (nelts, 1) + 1;\n+\t    n = tree_to_uhwi (nelts) + 1;\n \t    if (n == 0 || for_ctor_p)\n \t      return n;\n \t    else\n@@ -5590,8 +5590,8 @@ categorize_ctor_elements_1 (const_tree ctor, HOST_WIDE_INT *p_nz_elts,\n \t  tree hi_index = TREE_OPERAND (purpose, 1);\n \n \t  if (tree_fits_uhwi_p (lo_index) && tree_fits_uhwi_p (hi_index))\n-\t    mult = (tree_low_cst (hi_index, 1)\n-\t\t    - tree_low_cst (lo_index, 1) + 1);\n+\t    mult = (tree_to_uhwi (hi_index)\n+\t\t    - tree_to_uhwi (lo_index) + 1);\n \t}\n       num_fields += mult;\n       elt_type = TREE_TYPE (value);\n@@ -5909,7 +5909,7 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t      continue;\n \n \t    if (tree_fits_uhwi_p (DECL_SIZE (field)))\n-\t      bitsize = tree_low_cst (DECL_SIZE (field), 1);\n+\t      bitsize = tree_to_uhwi (DECL_SIZE (field));\n \t    else\n \t      bitsize = -1;\n \n@@ -6054,8 +6054,8 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t\t\tbreak;\n \t\t      }\n \n-\t\t    this_node_count = (tree_low_cst (hi_index, 1)\n-\t\t\t\t       - tree_low_cst (lo_index, 1) + 1);\n+\t\t    this_node_count = (tree_to_uhwi (hi_index)\n+\t\t\t\t       - tree_to_uhwi (lo_index) + 1);\n \t\t  }\n \t\telse\n \t\t  this_node_count = 1;\n@@ -6103,7 +6103,7 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t    mode = TYPE_MODE (elttype);\n \t    if (mode == BLKmode)\n \t      bitsize = (tree_fits_uhwi_p (TYPE_SIZE (elttype))\n-\t\t\t ? tree_low_cst (TYPE_SIZE (elttype), 1)\n+\t\t\t ? tree_to_uhwi (TYPE_SIZE (elttype))\n \t\t\t : -1);\n \t    else\n \t      bitsize = GET_MODE_BITSIZE (mode);\n@@ -6126,7 +6126,7 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t\t\t(!MEM_P (target)\n \t\t\t || count <= 2\n \t\t\t || (tree_fits_uhwi_p (TYPE_SIZE (elttype))\n-\t\t\t     && (tree_low_cst (TYPE_SIZE (elttype), 1) * count\n+\t\t\t     && (tree_to_uhwi (TYPE_SIZE (elttype)) * count\n \t\t\t\t <= 40 * 8)))))\n \t\t  {\n \t\t    lo -= minelt;  hi -= minelt;\n@@ -6236,9 +6236,9 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t      {\n \t\tif (index != 0)\n \t\t  bitpos = ((tree_to_shwi (index) - minelt)\n-\t\t\t    * tree_low_cst (TYPE_SIZE (elttype), 1));\n+\t\t\t    * tree_to_uhwi (TYPE_SIZE (elttype)));\n \t\telse\n-\t\t  bitpos = (i * tree_low_cst (TYPE_SIZE (elttype), 1));\n+\t\t  bitpos = (i * tree_to_uhwi (TYPE_SIZE (elttype)));\n \n \t\tif (MEM_P (target) && !MEM_KEEP_ALIAS_SET_P (target)\n \t\t    && TREE_CODE (type) == ARRAY_TYPE\n@@ -6262,7 +6262,7 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \tint need_to_clear;\n \tint icode = CODE_FOR_nothing;\n \ttree elttype = TREE_TYPE (type);\n-\tint elt_size = tree_low_cst (TYPE_SIZE (elttype), 1);\n+\tint elt_size = tree_to_uhwi (TYPE_SIZE (elttype));\n \tenum machine_mode eltmode = TYPE_MODE (elttype);\n \tHOST_WIDE_INT bitsize;\n \tHOST_WIDE_INT bitpos;\n@@ -6344,12 +6344,12 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t    HOST_WIDE_INT eltpos;\n \t    tree value = ce->value;\n \n-\t    bitsize = tree_low_cst (TYPE_SIZE (TREE_TYPE (value)), 1);\n+\t    bitsize = tree_to_uhwi (TYPE_SIZE (TREE_TYPE (value)));\n \t    if (cleared && initializer_zerop (value))\n \t      continue;\n \n \t    if (ce->index)\n-\t      eltpos = tree_low_cst (ce->index, 1);\n+\t      eltpos = tree_to_uhwi (ce->index);\n \t    else\n \t      eltpos = i;\n \n@@ -6679,7 +6679,7 @@ get_inner_reference (tree exp, HOST_WIDE_INT *pbitsize,\n       if (! tree_fits_uhwi_p (size_tree))\n \tmode = BLKmode, *pbitsize = -1;\n       else\n-\t*pbitsize = tree_low_cst (size_tree, 1);\n+\t*pbitsize = tree_to_uhwi (size_tree);\n     }\n \n   /* Compute cumulative bit-offset for nested component-refs and array-refs,\n@@ -7758,7 +7758,7 @@ expand_constructor (tree exp, rtx target, enum expand_modifier modifier,\n \t\t  || TREE_ADDRESSABLE (exp)\n \t\t  || (tree_fits_uhwi_p (TYPE_SIZE_UNIT (type))\n \t\t      && (! MOVE_BY_PIECES_P\n-\t\t\t\t     (tree_low_cst (TYPE_SIZE_UNIT (type), 1),\n+\t\t\t\t     (tree_to_uhwi (TYPE_SIZE_UNIT (type)),\n \t\t\t\t      TYPE_ALIGN (type)))\n \t\t      && ! mostly_zeros_p (exp))))\n       || ((modifier == EXPAND_INITIALIZER || modifier == EXPAND_CONST_ADDRESS)\n@@ -10561,7 +10561,7 @@ is_aligning_offset (const_tree offset, const_tree exp)\n       || !tree_fits_uhwi_p (TREE_OPERAND (offset, 1))\n       || compare_tree_int (TREE_OPERAND (offset, 1),\n \t\t\t   BIGGEST_ALIGNMENT / BITS_PER_UNIT) <= 0\n-      || !exact_log2 (tree_low_cst (TREE_OPERAND (offset, 1), 1) + 1) < 0)\n+      || !exact_log2 (tree_to_uhwi (TREE_OPERAND (offset, 1)) + 1) < 0)\n     return 0;\n \n   /* Look at the first operand of BIT_AND_EXPR and strip any conversion."}, {"sha": "f4997ba8330f2c7db3ec34f3ffc1fc893cef809d", "filename": "gcc/fold-const.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -1433,10 +1433,10 @@ const_binop (enum tree_code code, tree arg1, tree arg2)\n \t  if (!tree_fits_uhwi_p (arg2))\n \t    return NULL_TREE;\n \n-\t  unsigned HOST_WIDE_INT shiftc = tree_low_cst (arg2, 1);\n-\t  unsigned HOST_WIDE_INT outerc = tree_low_cst (TYPE_SIZE (type), 1);\n+\t  unsigned HOST_WIDE_INT shiftc = tree_to_uhwi (arg2);\n+\t  unsigned HOST_WIDE_INT outerc = tree_to_uhwi (TYPE_SIZE (type));\n \t  unsigned HOST_WIDE_INT innerc\n-\t    = tree_low_cst (TYPE_SIZE (TREE_TYPE (type)), 1);\n+\t    = tree_to_uhwi (TYPE_SIZE (TREE_TYPE (type)));\n \t  if (shiftc >= outerc || (shiftc % innerc) != 0)\n \t    return NULL_TREE;\n \t  int offset = shiftc / innerc;\n@@ -8102,7 +8102,7 @@ fold_unary_loc (location_t loc, enum tree_code code, tree type, tree op0)\n \t    {\n \t      unsigned HOST_WIDE_INT cst;\n \n-\t      cst = tree_low_cst (and1, 1);\n+\t      cst = tree_to_uhwi (and1);\n \t      cst &= HOST_WIDE_INT_M1U\n \t\t     << (TYPE_PRECISION (TREE_TYPE (and1)) - 1);\n \t      change = (cst == 0);\n@@ -11866,7 +11866,7 @@ fold_binary_loc (location_t loc,\n \t If B is constant and (B & M) == 0, fold into A & M.  */\n       if (tree_fits_uhwi_p (arg1))\n \t{\n-\t  unsigned HOST_WIDE_INT cst1 = tree_low_cst (arg1, 1);\n+\t  unsigned HOST_WIDE_INT cst1 = tree_to_uhwi (arg1);\n \t  if (~cst1 && (cst1 & (cst1 + 1)) == 0\n \t      && INTEGRAL_TYPE_P (TREE_TYPE (arg0))\n \t      && (TREE_CODE (arg0) == PLUS_EXPR\n@@ -11891,7 +11891,7 @@ fold_binary_loc (location_t loc,\n \t\t}\n \n \t      if (!tree_fits_uhwi_p (TYPE_MAX_VALUE (TREE_TYPE (arg0)))\n-\t\t  || (tree_low_cst (TYPE_MAX_VALUE (TREE_TYPE (arg0)), 1)\n+\t\t  || (tree_to_uhwi (TYPE_MAX_VALUE (TREE_TYPE (arg0)))\n \t\t      & cst1) != cst1)\n \t\twhich = -1;\n \n@@ -12036,11 +12036,11 @@ fold_binary_loc (location_t loc,\n \t  && TYPE_PRECISION (TREE_TYPE (arg0)) <= HOST_BITS_PER_WIDE_INT\n \t  && TREE_CODE (arg1) == INTEGER_CST\n \t  && tree_fits_uhwi_p (TREE_OPERAND (arg0, 1))\n-\t  && tree_low_cst (TREE_OPERAND (arg0, 1), 1) > 0\n-\t  && (tree_low_cst (TREE_OPERAND (arg0, 1), 1)\n+\t  && tree_to_uhwi (TREE_OPERAND (arg0, 1)) > 0\n+\t  && (tree_to_uhwi (TREE_OPERAND (arg0, 1))\n \t      < TYPE_PRECISION (TREE_TYPE (arg0))))\n \t{\n-\t  unsigned int shiftc = tree_low_cst (TREE_OPERAND (arg0, 1), 1);\n+\t  unsigned int shiftc = tree_to_uhwi (TREE_OPERAND (arg0, 1));\n \t  unsigned HOST_WIDE_INT mask = TREE_INT_CST_LOW (arg1);\n \t  unsigned HOST_WIDE_INT newmask, zerobits = 0;\n \t  tree shift_type = TREE_TYPE (arg0);\n@@ -14503,9 +14503,9 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \t\t  && TREE_TYPE (type) == TREE_TYPE (TREE_TYPE (arg0)))))\n \t{\n \t  tree eltype = TREE_TYPE (TREE_TYPE (arg0));\n-\t  unsigned HOST_WIDE_INT width = tree_low_cst (TYPE_SIZE (eltype), 1);\n-\t  unsigned HOST_WIDE_INT n = tree_low_cst (arg1, 1);\n-\t  unsigned HOST_WIDE_INT idx = tree_low_cst (op2, 1);\n+\t  unsigned HOST_WIDE_INT width = tree_to_uhwi (TYPE_SIZE (eltype));\n+\t  unsigned HOST_WIDE_INT n = tree_to_uhwi (arg1);\n+\t  unsigned HOST_WIDE_INT idx = tree_to_uhwi (op2);\n \n \t  if (n != 0\n \t      && (idx % width) == 0\n@@ -14576,7 +14576,7 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \n       /* A bit-field-ref that referenced the full argument can be stripped.  */\n       if (INTEGRAL_TYPE_P (TREE_TYPE (arg0))\n-\t  && TYPE_PRECISION (TREE_TYPE (arg0)) == tree_low_cst (arg1, 1)\n+\t  && TYPE_PRECISION (TREE_TYPE (arg0)) == tree_to_uhwi (arg1)\n \t  && integer_zerop (op2))\n \treturn fold_convert_loc (loc, type, arg0);\n \n@@ -14587,14 +14587,14 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \t  && tree_fits_uhwi_p (TYPE_SIZE_UNIT (TREE_TYPE (arg0)))\n \t  /* This limitation should not be necessary, we just need to\n \t     round this up to mode size.  */\n-\t  && tree_low_cst (op1, 1) % BITS_PER_UNIT == 0\n+\t  && tree_to_uhwi (op1) % BITS_PER_UNIT == 0\n \t  /* Need bit-shifting of the buffer to relax the following.  */\n-\t  && tree_low_cst (op2, 1) % BITS_PER_UNIT == 0)\n+\t  && tree_to_uhwi (op2) % BITS_PER_UNIT == 0)\n \t{\n-\t  unsigned HOST_WIDE_INT bitpos = tree_low_cst (op2, 1);\n-\t  unsigned HOST_WIDE_INT bitsize = tree_low_cst (op1, 1);\n+\t  unsigned HOST_WIDE_INT bitpos = tree_to_uhwi (op2);\n+\t  unsigned HOST_WIDE_INT bitsize = tree_to_uhwi (op1);\n \t  unsigned HOST_WIDE_INT clen;\n-\t  clen = tree_low_cst (TYPE_SIZE_UNIT (TREE_TYPE (arg0)), 1);\n+\t  clen = tree_to_uhwi (TYPE_SIZE_UNIT (TREE_TYPE (arg0)));\n \t  /* ???  We cannot tell native_encode_expr to start at\n \t     some random byte only.  So limit us to a reasonable amount\n \t     of work.  */"}, {"sha": "41382310e04de75c594f78989bbb8c8aa79adc42", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -3814,7 +3814,7 @@ locate_and_pad_parm (enum machine_mode passed_mode, tree type, int in_regs,\n     tree s2 = sizetree;\n     if (where_pad != none\n \t&& (!tree_fits_uhwi_p (sizetree)\n-\t    || (tree_low_cst (sizetree, 1) * BITS_PER_UNIT) % round_boundary))\n+\t    || (tree_to_uhwi (sizetree) * BITS_PER_UNIT) % round_boundary))\n       s2 = round_up (s2, round_boundary / BITS_PER_UNIT);\n     SUB_PARM_SIZE (locate->slot_offset, s2);\n   }\n@@ -3859,7 +3859,7 @@ locate_and_pad_parm (enum machine_mode passed_mode, tree type, int in_regs,\n \n   if (where_pad != none\n       && (!tree_fits_uhwi_p (sizetree)\n-\t  || (tree_low_cst (sizetree, 1) * BITS_PER_UNIT) % round_boundary))\n+\t  || (tree_to_uhwi (sizetree) * BITS_PER_UNIT) % round_boundary))\n     sizetree = round_up (sizetree, round_boundary / BITS_PER_UNIT);\n \n   ADD_PARM_SIZE (locate->size, sizetree);"}, {"sha": "a5277eb9b0ff3fd25e18a3baecf07c7bbeadb5bf", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -1076,7 +1076,7 @@ gimple_extract_devirt_binfo_from_cst (tree cst, tree expected_type)\n \t    continue;\n \n \t  pos = int_bit_position (fld);\n-\t  size = tree_low_cst (DECL_SIZE (fld), 1);\n+\t  size = tree_to_uhwi (DECL_SIZE (fld));\n \t  if (pos <= offset && (pos + size) > offset)\n \t    break;\n \t}\n@@ -3151,7 +3151,7 @@ gimple_get_virt_method_for_binfo (HOST_WIDE_INT token, tree known_binfo)\n \n   if (TREE_CODE (v) == POINTER_PLUS_EXPR)\n     {\n-      offset = tree_low_cst (TREE_OPERAND (v, 1), 1) * BITS_PER_UNIT;\n+      offset = tree_to_uhwi (TREE_OPERAND (v, 1)) * BITS_PER_UNIT;\n       v = TREE_OPERAND (v, 0);\n     }\n   else\n@@ -3177,7 +3177,7 @@ gimple_get_virt_method_for_binfo (HOST_WIDE_INT token, tree known_binfo)\n       return NULL_TREE;\n     }\n   gcc_checking_assert (TREE_CODE (TREE_TYPE (v)) == ARRAY_TYPE);\n-  size = tree_low_cst (TYPE_SIZE (TREE_TYPE (TREE_TYPE (v))), 1);\n+  size = tree_to_uhwi (TYPE_SIZE (TREE_TYPE (TREE_TYPE (v))));\n   offset += token * size;\n   fn = fold_ctor_reference (TREE_TYPE (TREE_TYPE (v)), init,\n \t\t\t    offset, size, v);\n@@ -3403,7 +3403,7 @@ gimple_fold_indirect_ref (tree t)\n \t  && useless_type_conversion_p (type, TREE_TYPE (TREE_TYPE (addrtype)))\n \t  && tree_fits_uhwi_p (off))\n \t{\n-          unsigned HOST_WIDE_INT offset = tree_low_cst (off, 1);\n+          unsigned HOST_WIDE_INT offset = tree_to_uhwi (off);\n           tree part_width = TYPE_SIZE (type);\n           unsigned HOST_WIDE_INT part_widthi\n             = tree_to_shwi (part_width) / BITS_PER_UNIT;"}, {"sha": "4c319c47737d53f67764de0abe50d3b04927c7fe", "filename": "gcc/godump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fgodump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fgodump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgodump.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -987,7 +987,7 @@ go_output_typedef (struct godump_container *container, tree decl)\n \t  else if (tree_fits_uhwi_p (TREE_VALUE (element)))\n \t    snprintf (buf, sizeof buf, HOST_WIDE_INT_PRINT_UNSIGNED,\n \t\t     ((unsigned HOST_WIDE_INT)\n-\t\t      tree_low_cst (TREE_VALUE (element), 1)));\n+\t\t      tree_to_uhwi (TREE_VALUE (element))));\n \t  else\n \t    snprintf (buf, sizeof buf, HOST_WIDE_INT_PRINT_DOUBLE_HEX,\n \t\t     ((unsigned HOST_WIDE_INT)"}, {"sha": "d0fa8db55d9f474983a9d4fa14b74edf41e52aa3", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -1371,7 +1371,7 @@ propagate_aggs_accross_jump_function (struct cgraph_edge *cs,\n \t  if (item->offset < 0)\n \t    continue;\n \t  gcc_checking_assert (is_gimple_ip_invariant (item->value));\n-\t  val_size = tree_low_cst (TYPE_SIZE (TREE_TYPE (item->value)), 1);\n+\t  val_size = tree_to_uhwi (TYPE_SIZE (TREE_TYPE (item->value)));\n \n \t  if (merge_agg_lats_step (dest_plats, item->offset, val_size,\n \t\t\t\t   &aglat, pre_existing, &ret))"}, {"sha": "b0f501e1bf2fc5b6acf5371e1c2f5bf49e244ef6", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -297,7 +297,7 @@ ipa_print_node_jump_functions_for_edge (FILE *f, struct cgraph_edge *cs)\n \t\t       item->offset);\n \t      if (TYPE_P (item->value))\n \t\tfprintf (f, \"clobber of \" HOST_WIDE_INT_PRINT_DEC \" bits\",\n-\t\t\t tree_low_cst (TYPE_SIZE (item->value), 1));\n+\t\t\t tree_to_uhwi (TYPE_SIZE (item->value)));\n \t      else\n \t\t{\n \t\t  fprintf (f, \"cst: \");\n@@ -1348,7 +1348,7 @@ determine_known_aggregate_parts (gimple call, tree arg,\n \t  arg_base = arg;\n \t  arg_offset = 0;\n \t  type_size = TYPE_SIZE (TREE_TYPE (TREE_TYPE (arg)));\n-\t  arg_size = tree_low_cst (type_size, 1);\n+\t  arg_size = tree_to_uhwi (type_size);\n \t  ao_ref_init_from_ptr_and_size (&r, arg_base, NULL_TREE);\n \t}\n       else if (TREE_CODE (arg) == ADDR_EXPR)\n@@ -1995,7 +1995,7 @@ ipa_analyze_virtual_call_uses (struct cgraph_node *node,\n   cs = ipa_note_param_call (node, index, call);\n   ii = cs->indirect_info;\n   ii->offset = anc_offset;\n-  ii->otr_token = tree_low_cst (OBJ_TYPE_REF_TOKEN (target), 1);\n+  ii->otr_token = tree_to_uhwi (OBJ_TYPE_REF_TOKEN (target));\n   ii->otr_type = obj_type_ref_class (target);\n   ii->polymorphic = 1;\n }\n@@ -2207,7 +2207,7 @@ ipa_intraprocedural_devirtualization (gimple call)\n   if (!binfo)\n     return NULL_TREE;\n   token = OBJ_TYPE_REF_TOKEN (otr);\n-  fndecl = gimple_get_virt_method_for_binfo (tree_low_cst (token, 1),\n+  fndecl = gimple_get_virt_method_for_binfo (tree_to_uhwi (token),\n \t\t\t\t\t     binfo);\n #ifdef ENABLE_CHECKING\n   if (fndecl)"}, {"sha": "881ac6ed341d33d89e5536ae197535e10084fc72", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -1,3 +1,8 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* objc-encoding.c: Replace tree_low_cst (..., 1) with tree_to_uhwi\n+\tthroughout.\n+\n 2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* objc-next-runtime-abi-02.c: Replace tree_low_cst (..., 0) with"}, {"sha": "532725114a2ac1015719d33ae2b24783f8db9f6c", "filename": "gcc/objc/objc-encoding.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fobjc%2Fobjc-encoding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fobjc%2Fobjc-encoding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-encoding.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -820,7 +820,7 @@ encode_field (tree field_decl, int curtype, int format)\n      between GNU and NeXT runtimes.  */\n   if (DECL_BIT_FIELD_TYPE (field_decl))\n     {\n-      int size = tree_low_cst (DECL_SIZE (field_decl), 1);\n+      int size = tree_to_uhwi (DECL_SIZE (field_decl));\n \n       if (flag_next_runtime)\n \tencode_next_bitfield (size);"}, {"sha": "4141dd9a6c0d46d4b23ff33ae648c4ee40f21d95", "filename": "gcc/omp-low.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -6770,11 +6770,11 @@ expand_omp_simd (struct omp_region *region, struct omp_for_data *fd)\n \t{\n \t  safelen = OMP_CLAUSE_SAFELEN_EXPR (safelen);\n \t  if (!tree_fits_uhwi_p (safelen)\n-\t      || (unsigned HOST_WIDE_INT) tree_low_cst (safelen, 1)\n+\t      || (unsigned HOST_WIDE_INT) tree_to_uhwi (safelen)\n \t\t > INT_MAX)\n \t    loop->safelen = INT_MAX;\n \t  else\n-\t    loop->safelen = tree_low_cst (safelen, 1);\n+\t    loop->safelen = tree_to_uhwi (safelen);\n \t  if (loop->safelen == 1)\n \t    loop->safelen = 0;\n \t}\n@@ -7678,7 +7678,7 @@ expand_omp_atomic (struct omp_region *region)\n   HOST_WIDE_INT index;\n \n   /* Make sure the type is one of the supported sizes.  */\n-  index = tree_low_cst (TYPE_SIZE_UNIT (type), 1);\n+  index = tree_to_uhwi (TYPE_SIZE_UNIT (type));\n   index = exact_log2 (index);\n   if (index >= 0 && index <= 4)\n     {"}, {"sha": "b9303e2883f0c70733b289454931e4d1adccb9cb", "filename": "gcc/predict.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -1560,7 +1560,7 @@ predict_loops (void)\n \t      if (tree_fits_uhwi_p (niter)\n \t\t  && max\n \t\t  && compare_tree_int (niter, max - 1) == -1)\n-\t\tnitercst = tree_low_cst (niter, 1) + 1;\n+\t\tnitercst = tree_to_uhwi (niter) + 1;\n \t      else\n \t\tnitercst = max;\n \t      predictor = PRED_LOOP_ITERATIONS;"}, {"sha": "f10869922d74908d707e00667480b9bf10892715", "filename": "gcc/sdbout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -1185,7 +1185,7 @@ sdbout_one_type (tree type)\n \t\t    PUT_SDB_INT_VAL (int_bit_position (tem));\n \t\t    PUT_SDB_SCL (C_FIELD);\n \t\t    sdbout_type (DECL_BIT_FIELD_TYPE (tem));\n-\t\t    PUT_SDB_SIZE (tree_low_cst (DECL_SIZE (tem), 1));\n+\t\t    PUT_SDB_SIZE (tree_to_uhwi (DECL_SIZE (tem)));\n \t\t  }\n \t\telse\n \t\t  {"}, {"sha": "659bfbb55663bb3b0926d58e8643b7a2020dd795", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -334,7 +334,7 @@ mode_for_size_tree (const_tree size, enum mode_class mclass, int limit)\n \n   if (!tree_fits_uhwi_p (size))\n     return BLKmode;\n-  uhwi = tree_low_cst (size, 1);\n+  uhwi = tree_to_uhwi (size);\n   ui = uhwi;\n   if (uhwi != ui)\n     return BLKmode;\n@@ -485,8 +485,8 @@ mode_for_array (tree elem_type, tree size)\n   limit_p = true;\n   if (tree_fits_uhwi_p (size) && tree_fits_uhwi_p (elem_size))\n     {\n-      int_size = tree_low_cst (size, 1);\n-      int_elem_size = tree_low_cst (elem_size, 1);\n+      int_size = tree_to_uhwi (size);\n+      int_elem_size = tree_to_uhwi (elem_size);\n       if (int_elem_size > 0\n \t  && int_size % int_elem_size == 0\n \t  && targetm.array_mode_supported_p (TYPE_MODE (elem_type),\n@@ -1053,7 +1053,7 @@ excess_unit_span (HOST_WIDE_INT byte_offset, HOST_WIDE_INT bit_offset,\n \n   offset = offset % align;\n   return ((offset + size + align - 1) / align\n-\t  > ((unsigned HOST_WIDE_INT) tree_low_cst (TYPE_SIZE (type), 1)\n+\t  > ((unsigned HOST_WIDE_INT) tree_to_uhwi (TYPE_SIZE (type))\n \t     / align));\n }\n #endif\n@@ -1113,14 +1113,14 @@ place_field (record_layout_info rli, tree field)\n   /* Work out the known alignment so far.  Note that A & (-A) is the\n      value of the least-significant bit in A that is one.  */\n   if (! integer_zerop (rli->bitpos))\n-    known_align = (tree_low_cst (rli->bitpos, 1)\n-\t\t   & - tree_low_cst (rli->bitpos, 1));\n+    known_align = (tree_to_uhwi (rli->bitpos)\n+\t\t   & - tree_to_uhwi (rli->bitpos));\n   else if (integer_zerop (rli->offset))\n     known_align = 0;\n   else if (tree_fits_uhwi_p (rli->offset))\n     known_align = (BITS_PER_UNIT\n-\t\t   * (tree_low_cst (rli->offset, 1)\n-\t\t      & - tree_low_cst (rli->offset, 1)));\n+\t\t   * (tree_to_uhwi (rli->offset)\n+\t\t      & - tree_to_uhwi (rli->offset)));\n   else\n     known_align = rli->offset_align;\n \n@@ -1200,7 +1200,7 @@ place_field (record_layout_info rli, tree field)\n     {\n       unsigned int type_align = TYPE_ALIGN (type);\n       tree dsize = DECL_SIZE (field);\n-      HOST_WIDE_INT field_size = tree_low_cst (dsize, 1);\n+      HOST_WIDE_INT field_size = tree_to_uhwi (dsize);\n       HOST_WIDE_INT offset = tree_to_shwi (rli->offset);\n       HOST_WIDE_INT bit_offset = tree_to_shwi (rli->bitpos);\n \n@@ -1244,7 +1244,7 @@ place_field (record_layout_info rli, tree field)\n     {\n       unsigned int type_align = TYPE_ALIGN (type);\n       tree dsize = DECL_SIZE (field);\n-      HOST_WIDE_INT field_size = tree_low_cst (dsize, 1);\n+      HOST_WIDE_INT field_size = tree_to_uhwi (dsize);\n       HOST_WIDE_INT offset = tree_to_shwi (rli->offset);\n       HOST_WIDE_INT bit_offset = tree_to_shwi (rli->bitpos);\n \n@@ -1307,11 +1307,11 @@ place_field (record_layout_info rli, tree field)\n \t      /* We're in the middle of a run of equal type size fields; make\n \t\t sure we realign if we run out of bits.  (Not decl size,\n \t\t type size!) */\n-\t      HOST_WIDE_INT bitsize = tree_low_cst (DECL_SIZE (field), 1);\n+\t      HOST_WIDE_INT bitsize = tree_to_uhwi (DECL_SIZE (field));\n \n \t      if (rli->remaining_in_alignment < bitsize)\n \t\t{\n-\t\t  HOST_WIDE_INT typesize = tree_low_cst (TYPE_SIZE (type), 1);\n+\t\t  HOST_WIDE_INT typesize = tree_to_uhwi (TYPE_SIZE (type));\n \n \t\t  /* out of bits; bump up to next 'word'.  */\n \t\t  rli->bitpos\n@@ -1387,9 +1387,9 @@ place_field (record_layout_info rli, tree field)\n \t      && tree_fits_uhwi_p (DECL_SIZE (field)))\n \t    {\n \t      unsigned HOST_WIDE_INT bitsize\n-\t\t= tree_low_cst (DECL_SIZE (field), 1);\n+\t\t= tree_to_uhwi (DECL_SIZE (field));\n \t      unsigned HOST_WIDE_INT typesize\n-\t\t= tree_low_cst (TYPE_SIZE (TREE_TYPE (field)), 1);\n+\t\t= tree_to_uhwi (TYPE_SIZE (TREE_TYPE (field)));\n \n \t      if (typesize < bitsize)\n \t\trli->remaining_in_alignment = 0;\n@@ -1421,14 +1421,14 @@ place_field (record_layout_info rli, tree field)\n      approximate this by seeing if its position changed), lay out the field\n      again; perhaps we can use an integral mode for it now.  */\n   if (! integer_zerop (DECL_FIELD_BIT_OFFSET (field)))\n-    actual_align = (tree_low_cst (DECL_FIELD_BIT_OFFSET (field), 1)\n-\t\t    & - tree_low_cst (DECL_FIELD_BIT_OFFSET (field), 1));\n+    actual_align = (tree_to_uhwi (DECL_FIELD_BIT_OFFSET (field))\n+\t\t    & - tree_to_uhwi (DECL_FIELD_BIT_OFFSET (field)));\n   else if (integer_zerop (DECL_FIELD_OFFSET (field)))\n     actual_align = MAX (BIGGEST_ALIGNMENT, rli->record_align);\n   else if (tree_fits_uhwi_p (DECL_FIELD_OFFSET (field)))\n     actual_align = (BITS_PER_UNIT\n-\t\t   * (tree_low_cst (DECL_FIELD_OFFSET (field), 1)\n-\t\t      & - tree_low_cst (DECL_FIELD_OFFSET (field), 1)));\n+\t\t   * (tree_to_uhwi (DECL_FIELD_OFFSET (field))\n+\t\t      & - tree_to_uhwi (DECL_FIELD_OFFSET (field))));\n   else\n     actual_align = DECL_OFFSET_ALIGN (field);\n   /* ACTUAL_ALIGN is still the actual alignment *within the record* .\n@@ -1764,10 +1764,10 @@ finish_bitfield_representative (tree repr, tree field)\n   size = size_diffop (DECL_FIELD_OFFSET (field),\n \t\t      DECL_FIELD_OFFSET (repr));\n   gcc_assert (tree_fits_uhwi_p (size));\n-  bitsize = (tree_low_cst (size, 1) * BITS_PER_UNIT\n-\t     + tree_low_cst (DECL_FIELD_BIT_OFFSET (field), 1)\n-\t     - tree_low_cst (DECL_FIELD_BIT_OFFSET (repr), 1)\n-\t     + tree_low_cst (DECL_SIZE (field), 1));\n+  bitsize = (tree_to_uhwi (size) * BITS_PER_UNIT\n+\t     + tree_to_uhwi (DECL_FIELD_BIT_OFFSET (field))\n+\t     - tree_to_uhwi (DECL_FIELD_BIT_OFFSET (repr))\n+\t     + tree_to_uhwi (DECL_SIZE (field)));\n \n   /* Round up bitsize to multiples of BITS_PER_UNIT.  */\n   bitsize = (bitsize + BITS_PER_UNIT - 1) & ~(BITS_PER_UNIT - 1);\n@@ -1787,9 +1787,9 @@ finish_bitfield_representative (tree repr, tree field)\n \t\t\t     DECL_FIELD_OFFSET (repr));\n       if (tree_fits_uhwi_p (maxsize))\n \t{\n-\t  maxbitsize = (tree_low_cst (maxsize, 1) * BITS_PER_UNIT\n-\t\t\t+ tree_low_cst (DECL_FIELD_BIT_OFFSET (nextf), 1)\n-\t\t\t- tree_low_cst (DECL_FIELD_BIT_OFFSET (repr), 1));\n+\t  maxbitsize = (tree_to_uhwi (maxsize) * BITS_PER_UNIT\n+\t\t\t+ tree_to_uhwi (DECL_FIELD_BIT_OFFSET (nextf))\n+\t\t\t- tree_to_uhwi (DECL_FIELD_BIT_OFFSET (repr)));\n \t  /* If the group ends within a bitfield nextf does not need to be\n \t     aligned to BITS_PER_UNIT.  Thus round up.  */\n \t  maxbitsize = (maxbitsize + BITS_PER_UNIT - 1) & ~(BITS_PER_UNIT - 1);\n@@ -1807,8 +1807,8 @@ finish_bitfield_representative (tree repr, tree field)\n       tree maxsize = size_diffop (TYPE_SIZE_UNIT (DECL_CONTEXT (field)),\n \t\t\t\t  DECL_FIELD_OFFSET (repr));\n       if (tree_fits_uhwi_p (maxsize))\n-\tmaxbitsize = (tree_low_cst (maxsize, 1) * BITS_PER_UNIT\n-\t\t      - tree_low_cst (DECL_FIELD_BIT_OFFSET (repr), 1));\n+\tmaxbitsize = (tree_to_uhwi (maxsize) * BITS_PER_UNIT\n+\t\t      - tree_to_uhwi (DECL_FIELD_BIT_OFFSET (repr)));\n       else\n \tmaxbitsize = bitsize;\n     }"}, {"sha": "d3cc1ab5e8124e322094c6bbc42a264f41eb6029", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -1104,7 +1104,7 @@ tm_log_add (basic_block entry_block, tree addr, gimple stmt)\n \t  && transaction_invariant_address_p (lp->addr, entry_block)\n \t  && TYPE_SIZE_UNIT (type) != NULL\n \t  && tree_fits_uhwi_p (TYPE_SIZE_UNIT (type))\n-\t  && (tree_low_cst (TYPE_SIZE_UNIT (type), 1)\n+\t  && (tree_to_uhwi (TYPE_SIZE_UNIT (type))\n \t      < PARAM_VALUE (PARAM_TM_MAX_AGGREGATE_SIZE))\n \t  /* We must be able to copy this type normally.  I.e., no\n \t     special constructors and the like.  */\n@@ -1189,7 +1189,7 @@ tm_log_emit_stmt (tree addr, gimple stmt)\n     code = BUILT_IN_TM_LOG_LDOUBLE;\n   else if (tree_fits_uhwi_p (size))\n     {\n-      unsigned int n = tree_low_cst (size, 1);\n+      unsigned int n = tree_to_uhwi (size);\n       switch (n)\n \t{\n \tcase 1:\n@@ -2107,7 +2107,7 @@ build_tm_load (location_t loc, tree lhs, tree rhs, gimple_stmt_iterator *gsi)\n   else if (TYPE_SIZE_UNIT (type) != NULL\n \t   && tree_fits_uhwi_p (TYPE_SIZE_UNIT (type)))\n     {\n-      switch (tree_low_cst (TYPE_SIZE_UNIT (type), 1))\n+      switch (tree_to_uhwi (TYPE_SIZE_UNIT (type)))\n \t{\n \tcase 1:\n \t  code = BUILT_IN_TM_LOAD_1;\n@@ -2179,7 +2179,7 @@ build_tm_store (location_t loc, tree lhs, tree rhs, gimple_stmt_iterator *gsi)\n   else if (TYPE_SIZE_UNIT (type) != NULL\n \t   && tree_fits_uhwi_p (TYPE_SIZE_UNIT (type)))\n     {\n-      switch (tree_low_cst (TYPE_SIZE_UNIT (type), 1))\n+      switch (tree_to_uhwi (TYPE_SIZE_UNIT (type)))\n \t{\n \tcase 1:\n \t  code = BUILT_IN_TM_STORE_1;"}, {"sha": "f3fb932de231b4050a6619684a626f7507739061", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -82,7 +82,7 @@ static void\n init_offset_limit (void)\n {\n   if (tree_fits_uhwi_p (TYPE_MAX_VALUE (sizetype)))\n-    offset_limit = tree_low_cst (TYPE_MAX_VALUE (sizetype), 1);\n+    offset_limit = tree_to_uhwi (TYPE_MAX_VALUE (sizetype));\n   else\n     offset_limit = -1;\n   offset_limit /= 2;\n@@ -110,7 +110,7 @@ compute_object_offset (const_tree expr, const_tree var)\n \n       t = TREE_OPERAND (expr, 1);\n       off = size_binop (PLUS_EXPR, DECL_FIELD_OFFSET (t),\n-\t\t\tsize_int (tree_low_cst (DECL_FIELD_BIT_OFFSET (t), 1)\n+\t\t\tsize_int (tree_to_uhwi (DECL_FIELD_BIT_OFFSET (t))\n \t\t\t\t  / BITS_PER_UNIT));\n       break;\n \n@@ -211,14 +211,14 @@ addr_object_size (struct object_size_info *osi, const_tree ptr,\n \t   && DECL_P (pt_var)\n \t   && tree_fits_uhwi_p (DECL_SIZE_UNIT (pt_var))\n \t   && (unsigned HOST_WIDE_INT)\n-\t        tree_low_cst (DECL_SIZE_UNIT (pt_var), 1) < offset_limit)\n+\t        tree_to_uhwi (DECL_SIZE_UNIT (pt_var)) < offset_limit)\n     pt_var_size = DECL_SIZE_UNIT (pt_var);\n   else if (pt_var\n \t   && TREE_CODE (pt_var) == STRING_CST\n \t   && TYPE_SIZE_UNIT (TREE_TYPE (pt_var))\n \t   && tree_fits_uhwi_p (TYPE_SIZE_UNIT (TREE_TYPE (pt_var)))\n \t   && (unsigned HOST_WIDE_INT)\n-\t      tree_low_cst (TYPE_SIZE_UNIT (TREE_TYPE (pt_var)), 1)\n+\t      tree_to_uhwi (TYPE_SIZE_UNIT (TREE_TYPE (pt_var)))\n \t      < offset_limit)\n     pt_var_size = TYPE_SIZE_UNIT (TREE_TYPE (pt_var));\n   else\n@@ -372,7 +372,7 @@ addr_object_size (struct object_size_info *osi, const_tree ptr,\n     bytes = pt_var_size;\n \n   if (tree_fits_uhwi_p (bytes))\n-    return tree_low_cst (bytes, 1);\n+    return tree_to_uhwi (bytes);\n \n   return unknown[object_size_type];\n }\n@@ -436,7 +436,7 @@ alloc_object_size (const_gimple call, int object_size_type)\n     bytes = fold_convert (sizetype, gimple_call_arg (call, arg1));\n \n   if (bytes && tree_fits_uhwi_p (bytes))\n-    return tree_low_cst (bytes, 1);\n+    return tree_to_uhwi (bytes);\n \n   return unknown[object_size_type];\n }\n@@ -799,10 +799,10 @@ plus_stmt_object_size (struct object_size_info *osi, tree var, gimple stmt)\n       if (! tree_fits_uhwi_p (op1))\n \tbytes = unknown[object_size_type];\n       else if (TREE_CODE (op0) == SSA_NAME)\n-\treturn merge_object_sizes (osi, var, op0, tree_low_cst (op1, 1));\n+\treturn merge_object_sizes (osi, var, op0, tree_to_uhwi (op1));\n       else\n \t{\n-\t  unsigned HOST_WIDE_INT off = tree_low_cst (op1, 1);\n+\t  unsigned HOST_WIDE_INT off = tree_to_uhwi (op1);\n \n           /* op0 will be ADDR_EXPR here.  */\n \t  bytes = addr_object_size (osi, op0, object_size_type);\n@@ -1231,7 +1231,7 @@ compute_object_sizes (void)\n \t\t  if (tree_fits_uhwi_p (ost))\n \t\t    {\n \t\t      unsigned HOST_WIDE_INT object_size_type\n-\t\t\t= tree_low_cst (ost, 1);\n+\t\t\t= tree_to_uhwi (ost);\n \n \t\t      if (object_size_type < 2)\n \t\t\tresult = fold_convert (size_type_node,"}, {"sha": "1194d099650864597dae0bed01ee5f81a8c5233c", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -989,7 +989,7 @@ completely_scalarize_record (tree base, tree decl, HOST_WIDE_INT offset,\n \t    struct access *access;\n \t    HOST_WIDE_INT size;\n \n-\t    size = tree_low_cst (DECL_SIZE (fld), 1);\n+\t    size = tree_to_uhwi (DECL_SIZE (fld));\n \t    access = create_access_1 (base, pos, size);\n \t    access->expr = nref;\n \t    access->type = ft;\n@@ -1008,7 +1008,7 @@ completely_scalarize_record (tree base, tree decl, HOST_WIDE_INT offset,\n static void\n completely_scalarize_var (tree var)\n {\n-  HOST_WIDE_INT size = tree_low_cst (DECL_SIZE (var), 1);\n+  HOST_WIDE_INT size = tree_to_uhwi (DECL_SIZE (var));\n   struct access *access;\n \n   access = create_access_1 (var, 0, size);\n@@ -1683,7 +1683,7 @@ build_user_friendly_ref_for_offset (tree *res, tree type, HOST_WIDE_INT offset,\n \t  tr_size = TYPE_SIZE (TREE_TYPE (type));\n \t  if (!tr_size || !tree_fits_uhwi_p (tr_size))\n \t    return false;\n-\t  el_size = tree_low_cst (tr_size, 1);\n+\t  el_size = tree_to_uhwi (tr_size);\n \n \t  minidx = TYPE_MIN_VALUE (TYPE_DOMAIN (type));\n \t  if (TREE_CODE (minidx) != INTEGER_CST || el_size == 0)\n@@ -1764,7 +1764,7 @@ maybe_add_sra_candidate (tree var)\n       reject (var, \"type size not fixed\");\n       return false;\n     }\n-  if (tree_low_cst (TYPE_SIZE (type), 1) == 0)\n+  if (tree_to_uhwi (TYPE_SIZE (type)) == 0)\n     {\n       reject (var, \"type size is zero\");\n       return false;\n@@ -2488,7 +2488,7 @@ analyze_all_variable_accesses (void)\n \tif (TREE_CODE (var) == VAR_DECL\n \t    && type_consists_of_records_p (TREE_TYPE (var)))\n \t  {\n-\t    if ((unsigned) tree_low_cst (TYPE_SIZE (TREE_TYPE (var)), 1)\n+\t    if ((unsigned) tree_to_uhwi (TYPE_SIZE (TREE_TYPE (var)))\n \t\t<= max_total_scalarization_size)\n \t      {\n \t\tcompletely_scalarize_var (var);\n@@ -2802,9 +2802,9 @@ sra_modify_expr (tree *expr, gimple_stmt_iterator *gsi, bool write)\n \t  && tree_fits_uhwi_p (TREE_OPERAND (bfr, 1))\n \t  && tree_fits_uhwi_p (TREE_OPERAND (bfr, 2)))\n \t{\n-\t  chunk_size = tree_low_cst (TREE_OPERAND (bfr, 1), 1);\n+\t  chunk_size = tree_to_uhwi (TREE_OPERAND (bfr, 1));\n \t  start_offset = access->offset\n-\t    + tree_low_cst (TREE_OPERAND (bfr, 2), 1);\n+\t    + tree_to_uhwi (TREE_OPERAND (bfr, 2));\n \t}\n       else\n \tstart_offset = chunk_size = 0;\n@@ -3694,7 +3694,7 @@ find_param_candidates (void)\n \n       if (!COMPLETE_TYPE_P (type)\n \t  || !tree_fits_uhwi_p (TYPE_SIZE (type))\n-          || tree_low_cst (TYPE_SIZE (type), 1) == 0\n+          || tree_to_uhwi (TYPE_SIZE (type)) == 0\n \t  || (AGGREGATE_TYPE_P (type)\n \t      && type_internals_preclude_sra_p (type, &msg)))\n \tcontinue;\n@@ -4067,9 +4067,9 @@ splice_param_accesses (tree parm, bool *ro_grp)\n     }\n \n   if (POINTER_TYPE_P (TREE_TYPE (parm)))\n-    agg_size = tree_low_cst (TYPE_SIZE (TREE_TYPE (TREE_TYPE (parm))), 1);\n+    agg_size = tree_to_uhwi (TYPE_SIZE (TREE_TYPE (TREE_TYPE (parm))));\n   else\n-    agg_size = tree_low_cst (TYPE_SIZE (TREE_TYPE (parm)), 1);\n+    agg_size = tree_to_uhwi (TYPE_SIZE (TREE_TYPE (parm)));\n   if (total_size >= agg_size)\n     return NULL;\n \n@@ -4088,13 +4088,13 @@ decide_one_param_reduction (struct access *repr)\n   tree parm;\n \n   parm = repr->base;\n-  cur_parm_size = tree_low_cst (TYPE_SIZE (TREE_TYPE (parm)), 1);\n+  cur_parm_size = tree_to_uhwi (TYPE_SIZE (TREE_TYPE (parm)));\n   gcc_assert (cur_parm_size > 0);\n \n   if (POINTER_TYPE_P (TREE_TYPE (parm)))\n     {\n       by_ref = true;\n-      agg_size = tree_low_cst (TYPE_SIZE (TREE_TYPE (TREE_TYPE (parm))), 1);\n+      agg_size = tree_to_uhwi (TYPE_SIZE (TREE_TYPE (TREE_TYPE (parm))));\n     }\n   else\n     {"}, {"sha": "06da6a2ec3ed1c4c39d987659d87c4b62a3a25ae", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -1489,7 +1489,7 @@ bit_value_assume_aligned (gimple stmt)\n   align = gimple_call_arg (stmt, 1);\n   if (!tree_fits_uhwi_p (align))\n     return ptrval;\n-  aligni = tree_low_cst (align, 1);\n+  aligni = tree_to_uhwi (align);\n   if (aligni <= 1\n       || (aligni & (aligni - 1)) != 0)\n     return ptrval;\n@@ -1498,7 +1498,7 @@ bit_value_assume_aligned (gimple stmt)\n       misalign = gimple_call_arg (stmt, 2);\n       if (!tree_fits_uhwi_p (misalign))\n \treturn ptrval;\n-      misaligni = tree_low_cst (misalign, 1);\n+      misaligni = tree_to_uhwi (misalign);\n       if (misaligni >= aligni)\n \treturn ptrval;\n     }"}, {"sha": "0a8d42561c46bd3246e9fa83d89b97e590606545", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -1555,7 +1555,7 @@ simplify_builtin_call (gimple_stmt_iterator *gsi_p, tree callee2)\n \t      if (!tree_fits_uhwi_p (off1)\n \t\t  || compare_tree_int (off1, TREE_STRING_LENGTH (str1) - 1) > 0\n \t\t  || compare_tree_int (len1, TREE_STRING_LENGTH (str1)\n-\t\t\t\t\t     - tree_low_cst (off1, 1)) > 0\n+\t\t\t\t\t     - tree_to_uhwi (off1)) > 0\n \t\t  || TREE_CODE (TREE_TYPE (str1)) != ARRAY_TYPE\n \t\t  || TYPE_MODE (TREE_TYPE (TREE_TYPE (str1)))\n \t\t     != TYPE_MODE (char_type_node))\n@@ -1599,10 +1599,10 @@ simplify_builtin_call (gimple_stmt_iterator *gsi_p, tree callee2)\n \n \t  /* Use maximum of difference plus memset length and memcpy length\n \t     as the new memcpy length, if it is too big, bail out.  */\n-\t  src_len = tree_low_cst (diff, 1);\n-\t  src_len += tree_low_cst (len2, 1);\n-\t  if (src_len < (unsigned HOST_WIDE_INT) tree_low_cst (len1, 1))\n-\t    src_len = tree_low_cst (len1, 1);\n+\t  src_len = tree_to_uhwi (diff);\n+\t  src_len += tree_to_uhwi (len2);\n+\t  if (src_len < (unsigned HOST_WIDE_INT) tree_to_uhwi (len1))\n+\t    src_len = tree_to_uhwi (len1);\n \t  if (src_len > 1024)\n \t    break;\n \n@@ -1628,12 +1628,12 @@ simplify_builtin_call (gimple_stmt_iterator *gsi_p, tree callee2)\n \t  src_buf = XALLOCAVEC (char, src_len + 1);\n \t  if (callee1)\n \t    memcpy (src_buf,\n-\t\t    TREE_STRING_POINTER (str1) + tree_low_cst (off1, 1),\n-\t\t    tree_low_cst (len1, 1));\n+\t\t    TREE_STRING_POINTER (str1) + tree_to_uhwi (off1),\n+\t\t    tree_to_uhwi (len1));\n \t  else\n \t    src_buf[0] = tree_to_shwi (src1);\n-\t  memset (src_buf + tree_low_cst (diff, 1),\n-\t\t  tree_to_shwi (val2), tree_low_cst (len2, 1));\n+\t  memset (src_buf + tree_to_uhwi (diff),\n+\t\t  tree_to_shwi (val2), tree_to_uhwi (len2));\n \t  src_buf[src_len] = '\\0';\n \t  /* Neither builtin_strncpy_read_str nor builtin_memcpy_read_str\n \t     handle embedded '\\0's.  */\n@@ -2319,8 +2319,8 @@ simplify_rotate (gimple_stmt_iterator *gsi)\n   /* CNT1 + CNT2 == B case above.  */\n   if (tree_fits_uhwi_p (def_arg2[0])\n       && tree_fits_uhwi_p (def_arg2[1])\n-      && (unsigned HOST_WIDE_INT) tree_low_cst (def_arg2[0], 1)\n-\t + tree_low_cst (def_arg2[1], 1) == TYPE_PRECISION (rtype))\n+      && (unsigned HOST_WIDE_INT) tree_to_uhwi (def_arg2[0])\n+\t + tree_to_uhwi (def_arg2[1]) == TYPE_PRECISION (rtype))\n     rotcnt = def_arg2[0];\n   else if (TREE_CODE (def_arg2[0]) != SSA_NAME\n \t   || TREE_CODE (def_arg2[1]) != SSA_NAME)"}, {"sha": "97b95ab2d319e9559fbdd0a1f598592209f8c32c", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -669,7 +669,7 @@ try_unroll_loop_completely (struct loop *loop,\n      from the iv test.  */\n   if (tree_fits_uhwi_p (niter))\n     {\n-      n_unroll = tree_low_cst (niter, 1);\n+      n_unroll = tree_to_uhwi (niter);\n       n_unroll_found = true;\n       edge_to_cancel = EDGE_SUCC (exit->src, 0);\n       if (edge_to_cancel == exit)"}, {"sha": "51d88b1c35d6140c34657b9d4cf313eec9b78109", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -4356,7 +4356,7 @@ iv_period (struct iv *iv)\n \n   period = build_low_bits_mask (type,\n                                 (TYPE_PRECISION (type)\n-                                 - tree_low_cst (pow2div, 1)));\n+                                 - tree_to_uhwi (pow2div)));\n \n   return period;\n }"}, {"sha": "97cad3de977b6c923b09bd4c1dc0c6ec0e03ed1b", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -659,7 +659,7 @@ number_of_iterations_ne_max (mpz_t bnd, bool no_overflow, tree c, tree s,\n   if (!no_overflow)\n     {\n       max = double_int::mask (TYPE_PRECISION (type)\n-\t\t\t      - tree_low_cst (num_ending_zeros (s), 1));\n+\t\t\t      - tree_to_uhwi (num_ending_zeros (s)));\n       mpz_set_double_int (bnd, max, true);\n       return;\n     }\n@@ -748,7 +748,7 @@ number_of_iterations_ne (tree type, affine_iv *iv, tree final,\n   bits = num_ending_zeros (s);\n   bound = build_low_bits_mask (niter_type,\n \t\t\t       (TYPE_PRECISION (niter_type)\n-\t\t\t\t- tree_low_cst (bits, 1)));\n+\t\t\t\t- tree_to_uhwi (bits)));\n \n   d = fold_binary_to_constant (LSHIFT_EXPR, niter_type,\n \t\t\t       build_int_cst (niter_type, 1), bits);"}, {"sha": "3738f62fa09a343b3379699a2c803e3d81382ce1", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -1509,7 +1509,7 @@ self_reuse_distance (data_reference_p dr, unsigned *loop_sizes, unsigned n,\n \t{\n \t  stride = TYPE_SIZE_UNIT (TREE_TYPE (ref));\n \t  if (tree_fits_uhwi_p (stride))\n-\t    astride = tree_low_cst (stride, 1);\n+\t    astride = tree_to_uhwi (stride);\n \t  else\n \t    astride = L1_CACHE_LINE_SIZE;\n "}, {"sha": "bf2a5fb61d583be8ed1ef95b52bbc3fadb74f483", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -850,12 +850,12 @@ adjust_last_stmt (strinfo si, gimple stmt, bool is_strcat)\n     {\n       if (!tree_fits_uhwi_p (last.len)\n \t  || integer_zerop (len)\n-\t  || (unsigned HOST_WIDE_INT) tree_low_cst (len, 1)\n-\t     != (unsigned HOST_WIDE_INT) tree_low_cst (last.len, 1) + 1)\n+\t  || (unsigned HOST_WIDE_INT) tree_to_uhwi (len)\n+\t     != (unsigned HOST_WIDE_INT) tree_to_uhwi (last.len) + 1)\n \treturn;\n       /* Don't adjust the length if it is divisible by 4, it is more efficient\n \t to store the extra '\\0' in that case.  */\n-      if ((((unsigned HOST_WIDE_INT) tree_low_cst (len, 1)) & 3) == 0)\n+      if ((((unsigned HOST_WIDE_INT) tree_to_uhwi (len)) & 3) == 0)\n \treturn;\n     }\n   else if (TREE_CODE (len) == SSA_NAME)\n@@ -1337,7 +1337,7 @@ handle_builtin_memcpy (enum built_in_function bcode, gimple_stmt_iterator *gsi)\n       /* Handle memcpy (x, \"abcd\", 5) or\n \t memcpy (x, \"abc\\0uvw\", 7).  */\n       if (!tree_fits_uhwi_p (len)\n-\t  || (unsigned HOST_WIDE_INT) tree_low_cst (len, 1)\n+\t  || (unsigned HOST_WIDE_INT) tree_to_uhwi (len)\n \t     <= (unsigned HOST_WIDE_INT) ~idx)\n \treturn;\n     }\n@@ -1627,10 +1627,10 @@ handle_pointer_plus (gimple_stmt_iterator *gsi)\n     {\n       tree off = gimple_assign_rhs2 (stmt);\n       if (tree_fits_uhwi_p (off)\n-\t  && (unsigned HOST_WIDE_INT) tree_low_cst (off, 1)\n+\t  && (unsigned HOST_WIDE_INT) tree_to_uhwi (off)\n \t     <= (unsigned HOST_WIDE_INT) ~idx)\n \tssa_ver_to_stridx[SSA_NAME_VERSION (lhs)]\n-\t    = ~(~idx - (int) tree_low_cst (off, 1));\n+\t    = ~(~idx - (int) tree_to_uhwi (off));\n       return;\n     }\n "}, {"sha": "5cd845c0d527b6085892485be8accf38c5508569", "filename": "gcc/tree-stdarg.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftree-stdarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftree-stdarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-stdarg.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -174,7 +174,7 @@ va_list_counter_bump (struct stdarg_info *si, tree counter, tree rhs,\n \t  && TREE_CODE (rhs1) == SSA_NAME\n \t  && tree_fits_uhwi_p (gimple_assign_rhs2 (stmt)))\n \t{\n-\t  ret += tree_low_cst (gimple_assign_rhs2 (stmt), 1);\n+\t  ret += tree_to_uhwi (gimple_assign_rhs2 (stmt));\n \t  lhs = rhs1;\n \t  continue;\n \t}\n@@ -184,7 +184,7 @@ va_list_counter_bump (struct stdarg_info *si, tree counter, tree rhs,\n \t  && TREE_CODE (TREE_OPERAND (TREE_OPERAND (rhs1, 0), 0)) == SSA_NAME\n \t  && tree_fits_uhwi_p (TREE_OPERAND (TREE_OPERAND (rhs1, 0), 1)))\n \t{\n-\t  ret += tree_low_cst (TREE_OPERAND (TREE_OPERAND (rhs1, 0), 1), 1);\n+\t  ret += tree_to_uhwi (TREE_OPERAND (TREE_OPERAND (rhs1, 0), 1));\n \t  lhs = TREE_OPERAND (TREE_OPERAND (rhs1, 0), 0);\n \t  continue;\n \t}\n@@ -241,7 +241,7 @@ va_list_counter_bump (struct stdarg_info *si, tree counter, tree rhs,\n \t  && TREE_CODE (rhs1) == SSA_NAME\n \t  && tree_fits_uhwi_p (gimple_assign_rhs2 (stmt)))\n \t{\n-\t  val -= tree_low_cst (gimple_assign_rhs2 (stmt), 1);\n+\t  val -= tree_to_uhwi (gimple_assign_rhs2 (stmt));\n \t  lhs = rhs1;\n \t  continue;\n \t}\n@@ -251,7 +251,7 @@ va_list_counter_bump (struct stdarg_info *si, tree counter, tree rhs,\n \t  && TREE_CODE (TREE_OPERAND (TREE_OPERAND (rhs1, 0), 0)) == SSA_NAME\n \t  && tree_fits_uhwi_p (TREE_OPERAND (TREE_OPERAND (rhs1, 0), 1)))\n \t{\n-\t  val -= tree_low_cst (TREE_OPERAND (TREE_OPERAND (rhs1, 0), 1), 1);\n+\t  val -= tree_to_uhwi (TREE_OPERAND (TREE_OPERAND (rhs1, 0), 1));\n \t  lhs = TREE_OPERAND (TREE_OPERAND (rhs1, 0), 0);\n \t  continue;\n \t}\n@@ -597,7 +597,7 @@ check_all_va_list_escapes (struct stdarg_info *si)\n \n \t\t      gpr_size = si->offsets[SSA_NAME_VERSION (use)]\n \t\t\t  \t + tree_to_shwi (TREE_OPERAND (rhs, 1))\n-\t\t\t\t + tree_low_cst (access_size, 1);\n+\t\t\t\t + tree_to_uhwi (access_size);\n \t\t      if (gpr_size >= VA_LIST_MAX_GPR_SIZE)\n \t\t\tcfun->va_list_gpr_size = VA_LIST_MAX_GPR_SIZE;\n \t\t      else if (gpr_size > cfun->va_list_gpr_size)"}, {"sha": "40e50671a6d67b148d7b1c63de49db34f782cc8a", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -703,7 +703,7 @@ check_range (struct switch_conv_info *info)\n       return false;\n     }\n \n-  if ((unsigned HOST_WIDE_INT) tree_low_cst (info->range_size, 1)\n+  if ((unsigned HOST_WIDE_INT) tree_to_uhwi (info->range_size)\n       > ((unsigned) info->count * SWITCH_CONVERSION_BRANCH_RATIO))\n     {\n       info->reason = \"the maximum range-branch ratio exceeded\";\n@@ -805,7 +805,7 @@ create_temp_arrays (struct switch_conv_info *info)\n   info->target_inbound_names = info->default_values + info->phi_count;\n   info->target_outbound_names = info->target_inbound_names + info->phi_count;\n   for (i = 0; i < info->phi_count; i++)\n-    vec_alloc (info->constructors[i], tree_low_cst (info->range_size, 1) + 1);\n+    vec_alloc (info->constructors[i], tree_to_uhwi (info->range_size) + 1);\n }\n \n /* Free the arrays created by create_temp_arrays().  The vectors that are"}, {"sha": "9fcab5d2a832b74791e3e44c0f2d24f16240e544", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -49,7 +49,7 @@ static void expand_vector_operations_1 (gimple_stmt_iterator *);\n static tree\n build_replicated_const (tree type, tree inner_type, HOST_WIDE_INT value)\n {\n-  int width = tree_low_cst (TYPE_SIZE (inner_type), 1);\n+  int width = tree_to_uhwi (TYPE_SIZE (inner_type));\n   int n = HOST_BITS_PER_WIDE_INT / width;\n   unsigned HOST_WIDE_INT low, high, mask;\n   tree ret;\n@@ -238,8 +238,8 @@ expand_vector_piecewise (gimple_stmt_iterator *gsi, elem_op_func f,\n   tree part_width = TYPE_SIZE (inner_type);\n   tree index = bitsize_int (0);\n   int nunits = TYPE_VECTOR_SUBPARTS (type);\n-  int delta = tree_low_cst (part_width, 1)\n-\t      / tree_low_cst (TYPE_SIZE (TREE_TYPE (type)), 1);\n+  int delta = tree_to_uhwi (part_width)\n+\t      / tree_to_uhwi (TYPE_SIZE (TREE_TYPE (type)));\n   int i;\n   location_t loc = gimple_location (gsi_stmt (*gsi));\n \n@@ -272,7 +272,7 @@ expand_vector_parallel (gimple_stmt_iterator *gsi, elem_op_func f, tree type,\n {\n   tree result, compute_type;\n   enum machine_mode mode;\n-  int n_words = tree_low_cst (TYPE_SIZE_UNIT (type), 1) / UNITS_PER_WORD;\n+  int n_words = tree_to_uhwi (TYPE_SIZE_UNIT (type)) / UNITS_PER_WORD;\n   location_t loc = gimple_location (gsi_stmt (*gsi));\n \n   /* We have three strategies.  If the type is already correct, just do\n@@ -295,7 +295,7 @@ expand_vector_parallel (gimple_stmt_iterator *gsi, elem_op_func f, tree type,\n   else\n     {\n       /* Use a single scalar operation with a mode no wider than word_mode.  */\n-      mode = mode_for_size (tree_low_cst (TYPE_SIZE (type), 1), MODE_INT, 0);\n+      mode = mode_for_size (tree_to_uhwi (TYPE_SIZE (type)), MODE_INT, 0);\n       compute_type = lang_hooks.types.type_for_mode (mode, 1);\n       result = f (gsi, compute_type, a, b, NULL_TREE, NULL_TREE, code);\n       warning_at (loc, OPT_Wvector_operation_performance,\n@@ -317,7 +317,7 @@ expand_vector_addition (gimple_stmt_iterator *gsi,\n \t\t\ttree type, tree a, tree b, enum tree_code code)\n {\n   int parts_per_word = UNITS_PER_WORD\n-\t  \t       / tree_low_cst (TYPE_SIZE_UNIT (TREE_TYPE (type)), 1);\n+\t  \t       / tree_to_uhwi (TYPE_SIZE_UNIT (TREE_TYPE (type)));\n \n   if (INTEGRAL_TYPE_P (TREE_TYPE (type))\n       && parts_per_word >= 4\n@@ -487,7 +487,7 @@ expand_vector_divmod (gimple_stmt_iterator *gsi, tree type, tree op0,\n \n \t\t      if (!tree_fits_uhwi_p (cst2))\n \t\t\treturn NULL_TREE;\n-\t\t      d2 = tree_low_cst (cst2, 1) & mask;\n+\t\t      d2 = tree_to_uhwi (cst2) & mask;\n \t\t      if (d2 == 0)\n \t\t\treturn NULL_TREE;\n \t\t      this_pre_shift = floor_log2 (d2 & -d2);"}, {"sha": "86ebbd226a7b3a03e7817bd4c5bd900fd79094cd", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -3099,10 +3099,10 @@ vect_model_reduction_cost (stmt_vec_info stmt_info, enum tree_code reduc_code,\n \t}\n       else\n \t{\n-\t  int vec_size_in_bits = tree_low_cst (TYPE_SIZE (vectype), 1);\n+\t  int vec_size_in_bits = tree_to_uhwi (TYPE_SIZE (vectype));\n \t  tree bitsize =\n \t    TYPE_SIZE (TREE_TYPE (gimple_assign_lhs (orig_stmt)));\n-\t  int element_bitsize = tree_low_cst (bitsize, 1);\n+\t  int element_bitsize = tree_to_uhwi (bitsize);\n \t  int nelements = vec_size_in_bits / element_bitsize;\n \n \t  optab = optab_for_tree_code (code, vectype, optab_default);\n@@ -4115,8 +4115,8 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple stmt,\n       enum tree_code shift_code = ERROR_MARK;\n       bool have_whole_vector_shift = true;\n       int bit_offset;\n-      int element_bitsize = tree_low_cst (bitsize, 1);\n-      int vec_size_in_bits = tree_low_cst (TYPE_SIZE (vectype), 1);\n+      int element_bitsize = tree_to_uhwi (bitsize);\n+      int vec_size_in_bits = tree_to_uhwi (TYPE_SIZE (vectype));\n       tree vec_temp;\n \n       if (optab_handler (vec_shr_optab, mode) != CODE_FOR_nothing)\n@@ -4193,7 +4193,7 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple stmt,\n             dump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t     \"Reduce using scalar code.\\n\");\n \n-          vec_size_in_bits = tree_low_cst (TYPE_SIZE (vectype), 1);\n+          vec_size_in_bits = tree_to_uhwi (TYPE_SIZE (vectype));\n           FOR_EACH_VEC_ELT (new_phis, i, new_phi)\n             {\n               if (gimple_code (new_phi) == GIMPLE_PHI)"}, {"sha": "c186c9a5a96ffbc2036ac304c1dc819ac836f513", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -1636,13 +1636,13 @@ vect_recog_rotate_pattern (vec<gimple> *stmts, tree *type_in, tree *type_out)\n   if (TREE_CODE (def) == INTEGER_CST)\n     {\n       if (!tree_fits_uhwi_p (def)\n-\t  || (unsigned HOST_WIDE_INT) tree_low_cst (def, 1)\n+\t  || (unsigned HOST_WIDE_INT) tree_to_uhwi (def)\n \t     >= GET_MODE_PRECISION (TYPE_MODE (type))\n \t  || integer_zerop (def))\n \treturn NULL;\n       def2 = build_int_cst (stype,\n \t\t\t    GET_MODE_PRECISION (TYPE_MODE (type))\n-\t\t\t    - tree_low_cst (def, 1));\n+\t\t\t    - tree_to_uhwi (def));\n     }\n   else\n     {"}, {"sha": "696cadba767175a58ff5410cfaa93da1d97d2a1e", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -5017,13 +5017,13 @@ register_edge_assert_for_2 (tree name, edge e, gimple_stmt_iterator bsi,\n \t  if (TREE_CODE (name2) == SSA_NAME\n \t      && tree_fits_uhwi_p (cst2)\n \t      && INTEGRAL_TYPE_P (TREE_TYPE (name2))\n-\t      && IN_RANGE (tree_low_cst (cst2, 1), 1, prec - 1)\n+\t      && IN_RANGE (tree_to_uhwi (cst2), 1, prec - 1)\n \t      && prec <= HOST_BITS_PER_DOUBLE_INT\n \t      && prec == GET_MODE_PRECISION (TYPE_MODE (TREE_TYPE (val)))\n \t      && live_on_edge (e, name2)\n \t      && !has_single_use (name2))\n \t    {\n-\t      mask = double_int::mask (tree_low_cst (cst2, 1));\n+\t      mask = double_int::mask (tree_to_uhwi (cst2));\n \t      val2 = fold_binary (LSHIFT_EXPR, TREE_TYPE (val), val, cst2);\n \t    }\n \t}"}, {"sha": "f49f1fe405a2dbf0da73fc0fec09acdf3a9e6268", "filename": "gcc/tree.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -2211,20 +2211,20 @@ tree_ctz (const_tree expr)\n     case LSHIFT_EXPR:\n       ret1 = tree_ctz (TREE_OPERAND (expr, 0));\n       if (tree_fits_uhwi_p (TREE_OPERAND (expr, 1))\n-\t  && ((unsigned HOST_WIDE_INT) tree_low_cst (TREE_OPERAND (expr, 1), 1)\n+\t  && ((unsigned HOST_WIDE_INT) tree_to_uhwi (TREE_OPERAND (expr, 1))\n \t      < (unsigned HOST_WIDE_INT) prec))\n \t{\n-\t  ret2 = tree_low_cst (TREE_OPERAND (expr, 1), 1);\n+\t  ret2 = tree_to_uhwi (TREE_OPERAND (expr, 1));\n \t  return MIN (ret1 + ret2, prec);\n \t}\n       return ret1;\n     case RSHIFT_EXPR:\n       if (tree_fits_uhwi_p (TREE_OPERAND (expr, 1))\n-\t  && ((unsigned HOST_WIDE_INT) tree_low_cst (TREE_OPERAND (expr, 1), 1)\n+\t  && ((unsigned HOST_WIDE_INT) tree_to_uhwi (TREE_OPERAND (expr, 1))\n \t      < (unsigned HOST_WIDE_INT) prec))\n \t{\n \t  ret1 = tree_ctz (TREE_OPERAND (expr, 0));\n-\t  ret2 = tree_low_cst (TREE_OPERAND (expr, 1), 1);\n+\t  ret2 = tree_to_uhwi (TREE_OPERAND (expr, 1));\n \t  if (ret1 > ret2)\n \t    return ret1 - ret2;\n \t}\n@@ -2675,7 +2675,7 @@ max_int_size_in_bytes (const_tree type)\n       size_tree = TYPE_ARRAY_MAX_SIZE (type);\n \n       if (size_tree && tree_fits_uhwi_p (size_tree))\n-\tsize = tree_low_cst (size_tree, 1);\n+\tsize = tree_to_uhwi (size_tree);\n     }\n \n   /* If we still haven't been able to get a size, see if the language\n@@ -2686,7 +2686,7 @@ max_int_size_in_bytes (const_tree type)\n       size_tree = lang_hooks.types.max_size (type);\n \n       if (size_tree && tree_fits_uhwi_p (size_tree))\n-\tsize = tree_low_cst (size_tree, 1);\n+\tsize = tree_to_uhwi (size_tree);\n     }\n \n   return size;\n@@ -6120,7 +6120,7 @@ find_atomic_core_type (tree type)\n   if (TYPE_SIZE (type) == NULL_TREE)\n     return NULL_TREE;\n \n-  HOST_WIDE_INT type_size = tree_low_cst (TYPE_SIZE (type), 1);\n+  HOST_WIDE_INT type_size = tree_to_uhwi (TYPE_SIZE (type));\n   switch (type_size)\n     {\n     case 8:\n@@ -7709,7 +7709,7 @@ build_nonstandard_integer_type (unsigned HOST_WIDE_INT precision,\n \n   ret = itype;\n   if (tree_fits_uhwi_p (TYPE_MAX_VALUE (itype)))\n-    ret = type_hash_canon (tree_low_cst (TYPE_MAX_VALUE (itype), 1), itype);\n+    ret = type_hash_canon (tree_to_uhwi (TYPE_MAX_VALUE (itype)), itype);\n   if (precision <= MAX_INT_CACHED_PREC)\n     nonstandard_integer_type_cache[precision + unsignedp] = ret;\n \n@@ -8548,7 +8548,7 @@ get_narrower (tree op, int *unsignedp_ptr)\n       && tree_fits_uhwi_p (DECL_SIZE (TREE_OPERAND (op, 1))))\n     {\n       unsigned HOST_WIDE_INT innerprec\n-\t= tree_low_cst (DECL_SIZE (TREE_OPERAND (op, 1)), 1);\n+\t= tree_to_uhwi (DECL_SIZE (TREE_OPERAND (op, 1)));\n       int unsignedp = (DECL_UNSIGNED (TREE_OPERAND (op, 1))\n \t\t       || TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (op, 1))));\n       tree type = lang_hooks.types.type_for_size (innerprec, unsignedp);\n@@ -11971,7 +11971,7 @@ get_binfo_at_offset (tree binfo, HOST_WIDE_INT offset, tree expected_type)\n \t    continue;\n \n \t  pos = int_bit_position (fld);\n-\t  size = tree_low_cst (DECL_SIZE (fld), 1);\n+\t  size = tree_to_uhwi (DECL_SIZE (fld));\n \t  if (pos <= offset && (pos + size) > offset)\n \t    break;\n \t}"}, {"sha": "8aac468a4445be00db3c2246df38923881f8acdb", "filename": "gcc/tsan.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Ftsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftsan.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -448,7 +448,7 @@ instrument_builtin_call (gimple_stmt_iterator *gsi)\n \t  case fetch_op:\n \t    last_arg = gimple_call_arg (stmt, num - 1);\n \t    if (!tree_fits_uhwi_p (last_arg)\n-\t\t|| (unsigned HOST_WIDE_INT) tree_low_cst (last_arg, 1)\n+\t\t|| (unsigned HOST_WIDE_INT) tree_to_uhwi (last_arg)\n \t\t   > MEMMODEL_SEQ_CST)\n \t      return;\n \t    gimple_call_set_fndecl (stmt, decl);\n@@ -520,11 +520,11 @@ instrument_builtin_call (gimple_stmt_iterator *gsi)\n \t    for (j = 0; j < 6; j++)\n \t      args[j] = gimple_call_arg (stmt, j);\n \t    if (!tree_fits_uhwi_p (args[4])\n-\t\t|| (unsigned HOST_WIDE_INT) tree_low_cst (args[4], 1)\n+\t\t|| (unsigned HOST_WIDE_INT) tree_to_uhwi (args[4])\n \t\t   > MEMMODEL_SEQ_CST)\n \t      return;\n \t    if (!tree_fits_uhwi_p (args[5])\n-\t\t|| (unsigned HOST_WIDE_INT) tree_low_cst (args[5], 1)\n+\t\t|| (unsigned HOST_WIDE_INT) tree_to_uhwi (args[5])\n \t\t   > MEMMODEL_SEQ_CST)\n \t      return;\n \t    update_gimple_call (gsi, decl, 5, args[0], args[1], args[2],"}, {"sha": "9e9b94da12a182bb6040df9802430561c8ae65f2", "filename": "gcc/ubsan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -234,7 +234,7 @@ static unsigned short\n get_ubsan_type_info_for_type (tree type)\n {\n   gcc_assert (TYPE_SIZE (type) && tree_fits_uhwi_p (TYPE_SIZE (type)));\n-  int prec = exact_log2 (tree_low_cst (TYPE_SIZE (type), 1));\n+  int prec = exact_log2 (tree_to_uhwi (TYPE_SIZE (type)));\n   gcc_assert (prec != -1);\n   return (prec << 1) | !TYPE_UNSIGNED (type);\n }"}, {"sha": "1fd53f0457f61fbbb7cfedf3864164a0ecb4d4be", "filename": "gcc/varasm.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e9dddb860567a40d7c84736522242236a3355/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=ae7e9dddb860567a40d7c84736522242236a3355", "patch": "@@ -1889,7 +1889,7 @@ assemble_noswitch_variable (tree decl, const char *name, section *sect,\n {\n   unsigned HOST_WIDE_INT size, rounded;\n \n-  size = tree_low_cst (DECL_SIZE_UNIT (decl), 1);\n+  size = tree_to_uhwi (DECL_SIZE_UNIT (decl));\n   rounded = size;\n \n   if ((flag_sanitize & SANITIZE_ADDRESS) && asan_protect_global (decl))\n@@ -1936,11 +1936,11 @@ assemble_variable_contents (tree decl, const char *name,\n \t  && !initializer_zerop (DECL_INITIAL (decl)))\n \t/* Output the actual data.  */\n \toutput_constant (DECL_INITIAL (decl),\n-\t\t\t tree_low_cst (DECL_SIZE_UNIT (decl), 1),\n+\t\t\t tree_to_uhwi (DECL_SIZE_UNIT (decl)),\n \t\t\t get_variable_align (decl));\n       else\n \t/* Leave space for it.  */\n-\tassemble_zeros (tree_low_cst (DECL_SIZE_UNIT (decl), 1));\n+\tassemble_zeros (tree_to_uhwi (DECL_SIZE_UNIT (decl)));\n     }\n }\n \n@@ -2126,7 +2126,7 @@ assemble_variable (tree decl, int top_level ATTRIBUTE_UNUSED,\n       if (asan_protected)\n \t{\n \t  unsigned HOST_WIDE_INT int size\n-\t    = tree_low_cst (DECL_SIZE_UNIT (decl), 1);\n+\t    = tree_to_uhwi (DECL_SIZE_UNIT (decl));\n \t  assemble_zeros (asan_red_zone_size (size));\n \t}\n     }\n@@ -2717,7 +2717,7 @@ decode_addr_const (tree exp, struct addr_const *value)\n       else if (TREE_CODE (target) == ARRAY_REF\n \t       || TREE_CODE (target) == ARRAY_RANGE_REF)\n \t{\n-\t  offset += (tree_low_cst (TYPE_SIZE_UNIT (TREE_TYPE (target)), 1)\n+\t  offset += (tree_to_uhwi (TYPE_SIZE_UNIT (TREE_TYPE (target)))\n \t\t     * tree_to_shwi (TREE_OPERAND (target, 1)));\n \t  target = TREE_OPERAND (target, 0);\n \t}\n@@ -4876,7 +4876,7 @@ output_constructor_regular_field (oc_local_state *local)\n       double_int idx = tree_to_double_int (local->index)\n \t\t       - tree_to_double_int (local->min_index);\n       idx = idx.sext (prec);\n-      fieldpos = (tree_low_cst (TYPE_SIZE_UNIT (TREE_TYPE (local->val)), 1)\n+      fieldpos = (tree_to_uhwi (TYPE_SIZE_UNIT (TREE_TYPE (local->val)))\n \t\t  * idx.low);\n     }\n   else if (local->field != NULL_TREE)\n@@ -4926,7 +4926,7 @@ output_constructor_regular_field (oc_local_state *local)\n \t  gcc_assert (!fieldsize || !DECL_CHAIN (local->field));\n \t}\n       else\n-\tfieldsize = tree_low_cst (DECL_SIZE_UNIT (local->field), 1);\n+\tfieldsize = tree_to_uhwi (DECL_SIZE_UNIT (local->field));\n     }\n   else\n     fieldsize = int_size_in_bytes (TREE_TYPE (local->type));\n@@ -4951,8 +4951,8 @@ output_constructor_bitfield (oc_local_state *local, unsigned int bit_offset)\n   /* Bit size of this element.  */\n   HOST_WIDE_INT ebitsize\n     = (local->field\n-       ? tree_low_cst (DECL_SIZE (local->field), 1)\n-       : tree_low_cst (TYPE_SIZE (TREE_TYPE (local->type)), 1));\n+       ? tree_to_uhwi (DECL_SIZE (local->field))\n+       : tree_to_uhwi (TYPE_SIZE (TREE_TYPE (local->type))));\n \n   /* Relative index of this element if this is an array component.  */\n   HOST_WIDE_INT relative_index\n@@ -7070,7 +7070,7 @@ place_block_symbol (rtx symbol)\n     {\n       decl = SYMBOL_REF_DECL (symbol);\n       alignment = get_variable_align (decl);\n-      size = tree_low_cst (DECL_SIZE_UNIT (decl), 1);\n+      size = tree_to_uhwi (DECL_SIZE_UNIT (decl));\n       if ((flag_sanitize & SANITIZE_ADDRESS)\n \t  && asan_protect_global (decl))\n \t{\n@@ -7236,7 +7236,7 @@ output_object_block (struct object_block *block)\n \t  HOST_WIDE_INT size;\n \t  decl = SYMBOL_REF_DECL (symbol);\n \t  assemble_variable_contents (decl, XSTR (symbol, 0), false);\n-\t  size = tree_low_cst (DECL_SIZE_UNIT (decl), 1);\n+\t  size = tree_to_uhwi (DECL_SIZE_UNIT (decl));\n \t  offset += size;\n \t  if ((flag_sanitize & SANITIZE_ADDRESS)\n \t      && asan_protect_global (decl))"}]}