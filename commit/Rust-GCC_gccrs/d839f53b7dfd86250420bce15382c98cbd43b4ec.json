{"sha": "d839f53b7dfd86250420bce15382c98cbd43b4ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgzOWY1M2I3ZGZkODYyNTA0MjBiY2UxNTM4MmM5OGNiZDQzYjRlYw==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2014-05-07T22:00:58Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2014-05-07T22:00:58Z"}, "message": "rs6000: New attributes for load/store: \"sign_extend\", \"update\" and \"indexed\"\n\nThe new attributes replace the instruction types *_ext*, *_u, *_ux.\n\nThis simplifies all code that does not care about the addressing modes,\nputting the burden on the code that does care (mostly the scheduling\ndescriptions for certain CPUs).\n\nIt fixes a few minor bugs in the process.\n\nThe \"update\" and \"indexed\" attributes are automatic for any insn that\nhas a MEM as operand 0 or 1.  Other insns have to set it manually, if\nthey do not like the default (which is \"no\").  Insns that are type\nload/store/fpload/fpstore but have fewer than two operands need to set\nit too, or the compiler will crash.  There are very few of those.\n\nThis tries not to change semantics anywhere; in particular, the string\nand multiple instructions set both \"update\" and \"indexed\" (although\nthey are neither).\n\nFrom-SVN: r210190", "tree": {"sha": "cd8a170e4a1bf065792be21e8461f7608f25a897", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd8a170e4a1bf065792be21e8461f7608f25a897"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d839f53b7dfd86250420bce15382c98cbd43b4ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d839f53b7dfd86250420bce15382c98cbd43b4ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d839f53b7dfd86250420bce15382c98cbd43b4ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d839f53b7dfd86250420bce15382c98cbd43b4ec/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d3b4df0b173c3ad5f1e8f5d9f6a5df3518322129", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3b4df0b173c3ad5f1e8f5d9f6a5df3518322129", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3b4df0b173c3ad5f1e8f5d9f6a5df3518322129"}], "stats": {"total": 1404, "additions": 647, "deletions": 757}, "files": [{"sha": "203d647289662d7622b29b17e054798cec48774a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d839f53b7dfd86250420bce15382c98cbd43b4ec", "patch": "@@ -1,3 +1,101 @@\n+2014-05-07  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/predicates.md (indexed_address_mem): New.\n+\t* config/rs6000/rs6000.md (type): Remove load_ext, load_ext_u,\n+\tload_ext_ux, load_ux, load_u, store_ux, store_u, fpload_ux, fpload_u,\n+\tfpstore_ux, fpstore_u.\n+\t(sign_extend, indexed, update): New.\n+\t(cell_micro): Adjust.\n+\t(*zero_extend<mode>di2_internal1, *zero_extendsidi2_lfiwzx,\n+\t*extendsidi2_lfiwax, *extendsidi2_nocell, *extendsfdf2_fpr,\n+\t*movsi_internal1, *movsi_internal1_single, *movhi_internal,\n+\t*movqi_internal, *movcc_internal1, mov<mode>_hardfloat,\n+\t*mov<mode>_softfloat, *mov<mode>_hardfloat32, *mov<mode>_hardfloat64,\n+\t*mov<mode>_softfloat64, *movdi_internal32, *movdi_internal64,\n+\t*mov<mode>_string, *ldmsi8, *ldmsi7, *ldmsi6, *ldmsi5, *ldmsi4,\n+\t*ldmsi3, *stmsi8, *stmsi7, *stmsi6, *stmsi5, *stmsi4, *stmsi3,\n+\t*movdi_update1, movdi_<mode>_update, movdi_<mode>_update_stack,\n+\t*movsi_update1, *movsi_update2, movsi_update, movsi_update_stack,\n+\t*movhi_update1, *movhi_update2, *movhi_update3, *movhi_update4,\n+\t*movqi_update1, *movqi_update2, *movqi_update3, *movsf_update1,\n+\t*movsf_update2, *movsf_update3, *movsf_update4, *movdf_update1,\n+\t*movdf_update2, load_toc_aix_si, load_toc_aix_di, probe_stack_<mode>,\n+\t*stmw, *lmw, as well as 10 anonymous patterns): Adjust.\n+\n+\t* config/rs6000/dfp.md (movsd_store, movsd_load): Adjust.\n+\t* config/rs6000/vsx.md (*vsx_movti_32bit, *vsx_extract_<mode>_load,\n+\t*vsx_extract_<mode>_store): Adjust.\n+\t* config/rs6000/rs6000.c (rs6000_adjust_cost, is_microcoded_insn,\n+\tis_cracked_insn, insn_must_be_first_in_group,\n+\tinsn_must_be_last_in_group): Adjust.\n+\n+\t* config/rs6000/40x.md (ppc403-load, ppc403-store, ppc405-float):\n+\tAdjust.\n+\t* config/rs6000/440.md (ppc440-load, ppc440-store, ppc440-fpload,\n+\tppc440-fpstore): Adjust.\n+\t* config/rs6000/476.md (ppc476-load, ppc476-store, ppc476-fpload,\n+\tppc476-fpstore): Adjust.\n+\t* config/rs6000/601.md (ppc601-load, ppc601-store, ppc601-fpload,\n+\tppc601-fpstore): Adjust.\n+\t* config/rs6000/603.md (ppc603-load, ppc603-store, ppc603-fpload):\n+\tAdjust.\n+\t* config/rs6000/6xx.md (ppc604-load, ppc604-store, ppc604-fpload):\n+\tAdjust.\n+\t* config/rs6000/7450.md (ppc7450-load, ppc7450-store, ppc7450-fpload,\n+\tppc7450-fpstore): Adjust.\n+\t* config/rs6000/7xx.md (ppc750-load, ppc750-store): Adjust.\n+\t* config/rs6000/8540.md (ppc8540_load, ppc8540_store): Adjust.\n+\t* config/rs6000/a2.md (ppca2-load, ppca2-fp-load, ppca2-fp-store):\n+\tAdjust.\n+\t* config/rs6000/cell.md (cell-load, cell-load-ux, cell-load-ext,\n+\tcell-fpload, cell-fpload-update, cell-store, cell-store-update,\n+\tcell-fpstore, cell-fpstore-update): Adjust.\n+\t* config/rs6000/e300c2c3.md (ppce300c3_load, ppce300c3_fpload,\n+\tppce300c3_store, ppce300c3_fpstore): Adjust.\n+\t* config/rs6000/e500mc.md (e500mc_load, e500mc_fpload, e500mc_store,\n+\te500mc_fpstore): Adjust.\n+\t* config/rs6000/e500mc64.md (e500mc64_load, e500mc64_fpload,\n+\te500mc64_store, e500mc64_fpstore): Adjust.\n+\t* config/rs6000/e5500.md (e5500_load, e5500_fpload, e5500_store,\n+\te5500_fpstore): Adjust.\n+\t* config/rs6000/e6500.md (e6500_load, e6500_fpload, e6500_store,\n+\te6500_fpstore): Adjust.\n+\t* config/rs6000/mpc.md (mpccore-load, mpccore-store, mpccore-fpload):\n+\tAdjust.\n+\t* config/rs6000/power4.md (power4-load, power4-load-ext,\n+\tpower4-load-ext-update, power4-load-ext-update-indexed,\n+\tpower4-load-update-indexed, power4-load-update, power4-fpload,\n+\tpower4-fpload-update, power4-store, power4-store-update,\n+\tpower4-store-update-indexed, power4-fpstore, power4-fpstore-update):\n+\tAdjust.\n+\t* config/rs6000/power5.md (power5-load, power5-load-ext,\n+\tpower5-load-ext-update, power5-load-ext-update-indexed,\n+\tpower5-load-update-indexed, power5-load-update, power5-fpload,\n+\tpower5-fpload-update, power5-store, power5-store-update,\n+\tpower5-store-update-indexed, power5-fpstore, power5-fpstore-update):\n+\tAdjust.\n+\t* config/rs6000/power6.md (power6-load, power6-load-ext,\n+\tpower6-load-update, power6-load-update-indexed,\n+\tpower6-load-ext-update, power6-load-ext-update-indexed, power6-fpload,\n+\tpower6-fpload-update, power6-store, power6-store-update,\n+\tpower6-store-update-indexed, power6-fpstore, power6-fpstore-update):\n+\tAdjust.\n+\t* config/rs6000/power7.md (power7-load, power7-load-ext,\n+\tpower7-load-update, power7-load-update-indexed,\n+\tpower7-load-ext-update, power7-load-ext-update-indexed, power7-fpload,\n+\tpower7-fpload-update, power7-store, power7-store-update,\n+\tpower7-store-update-indexed, power7-fpstore, power7-fpstore-update):\n+\tAdjust.\n+\t* config/rs6000/power8.md (power8-load, power8-load-update,\n+\tpower8-load-ext, power8-load-ext-update, power8-fpload,\n+\tpower8-fpload-update, power8-store, power8-store-update-indexed,\n+\tpower8-fpstore, power8-fpstore-update): Adjust.\n+\t* config/rs6000/rs64.md (rs64a-load, rs64a-store, rs64a-fpload):\n+\tAdjust.\n+\t* config/rs6000/titan.md (titan_lsu_load, titan_lsu_fpload,\n+\ttitan_lsu_store, titan_lsu_fpstore): Adjust.\n+\t* config/rs6000/xfpu.md (fp-load, fp-store): Adjust.\n+\n 2014-05-07  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/60884"}, {"sha": "ed236a418f4e3ab5d5bacc9ec90b1a7dd6d5665b", "filename": "gcc/config/rs6000/40x.md", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2F40x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2F40x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F40x.md?ref=d839f53b7dfd86250420bce15382c98cbd43b4ec", "patch": "@@ -26,13 +26,12 @@\n ;; In-order execution\n ;; Max issue two insns/cycle (includes one branch)\n (define_insn_reservation \"ppc403-load\" 2\n-  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u,\\\n-\t\t\tload_l,store_c,sync\")\n+  (and (eq_attr \"type\" \"load,load_l,store_c,sync\")\n        (eq_attr \"cpu\" \"ppc403,ppc405\"))\n   \"iu_40x\")\n \n (define_insn_reservation \"ppc403-store\" 2\n-  (and (eq_attr \"type\" \"store,store_ux,store_u\")\n+  (and (eq_attr \"type\" \"store\")\n        (eq_attr \"cpu\" \"ppc403,ppc405\"))\n   \"iu_40x\")\n \n@@ -114,7 +113,6 @@\n   \"bpu_40x\")\n \n (define_insn_reservation \"ppc405-float\" 11\n-  (and (eq_attr \"type\" \"fpload,fpload_ux,fpload_u,fpstore,fpstore_ux,fpstore_u,\\\n-\t\t\tfpcompare,fp,dmul,sdiv,ddiv\")\n+  (and (eq_attr \"type\" \"fpload,fpstore,fpcompare,fp,dmul,sdiv,ddiv\")\n        (eq_attr \"cpu\" \"ppc405\"))\n   \"fpu_405*10\")"}, {"sha": "2dcc58d696975bc062d34a6d0eac17e39d36739f", "filename": "gcc/config/rs6000/440.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2F440.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2F440.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F440.md?ref=d839f53b7dfd86250420bce15382c98cbd43b4ec", "patch": "@@ -33,23 +33,22 @@\n \n \n (define_insn_reservation \"ppc440-load\" 3\n-  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u,\\\n-\t\t\tload_l,store_c,sync\")\n+  (and (eq_attr \"type\" \"load,load_l,store_c,sync\")\n        (eq_attr \"cpu\" \"ppc440\"))\n   \"ppc440_issue,ppc440_l_pipe\")\n \n (define_insn_reservation \"ppc440-store\" 3\n-  (and (eq_attr \"type\" \"store,store_ux,store_u\")\n+  (and (eq_attr \"type\" \"store\")\n        (eq_attr \"cpu\" \"ppc440\"))\n   \"ppc440_issue,ppc440_l_pipe\")\n \n (define_insn_reservation \"ppc440-fpload\" 4\n-  (and (eq_attr \"type\" \"fpload,fpload_ux,fpload_u\")\n+  (and (eq_attr \"type\" \"fpload\")\n        (eq_attr \"cpu\" \"ppc440\"))\n   \"ppc440_issue,ppc440_l_pipe\")\n \n (define_insn_reservation \"ppc440-fpstore\" 3\n-  (and (eq_attr \"type\" \"fpstore,fpstore_ux,fpstore_u\")\n+  (and (eq_attr \"type\" \"fpstore\")\n        (eq_attr \"cpu\" \"ppc440\"))\n   \"ppc440_issue,ppc440_l_pipe\")\n "}, {"sha": "8b4e65f04259ebf109260e67846d95269566f9c1", "filename": "gcc/config/rs6000/476.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2F476.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2F476.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F476.md?ref=d839f53b7dfd86250420bce15382c98cbd43b4ec", "patch": "@@ -39,26 +39,25 @@\n (define_reservation \"ppc476_issue3\" \"ppc476_issue_0+ppc476_issue_1+ppc476_issue_2\")\n \n (define_insn_reservation \"ppc476-load\" 4\n-  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u,\\\n-\t\t\tload_l,store_c,sync\")\n+  (and (eq_attr \"type\" \"load,load_l,store_c,sync\")\n        (eq_attr \"cpu\" \"ppc476\"))\n   \"ppc476_issue,\\\n    ppc476_lj_pipe\")\n \n (define_insn_reservation \"ppc476-store\" 4\n-  (and (eq_attr \"type\" \"store,store_ux,store_u\")\n+  (and (eq_attr \"type\" \"store\")\n        (eq_attr \"cpu\" \"ppc476\"))\n   \"ppc476_issue,\\\n    ppc476_lj_pipe\")\n \n (define_insn_reservation \"ppc476-fpload\" 4\n-  (and (eq_attr \"type\" \"fpload,fpload_ux,fpload_u\")\n+  (and (eq_attr \"type\" \"fpload\")\n        (eq_attr \"cpu\" \"ppc476\"))\n   \"ppc476_issue,\\\n    ppc476_lj_pipe\")\n \n (define_insn_reservation \"ppc476-fpstore\" 4\n-  (and (eq_attr \"type\" \"fpstore,fpstore_ux,fpstore_u\")\n+  (and (eq_attr \"type\" \"fpstore\")\n        (eq_attr \"cpu\" \"ppc476\"))\n   \"ppc476_issue,\\\n    ppc476_lj_pipe\")"}, {"sha": "94ba06cebcda0788c84309525f30eb4e49c77562", "filename": "gcc/config/rs6000/601.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2F601.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2F601.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F601.md?ref=d839f53b7dfd86250420bce15382c98cbd43b4ec", "patch": "@@ -25,23 +25,22 @@\n ;; PPC601  32-bit IU, FPU, BPU\n \n (define_insn_reservation \"ppc601-load\" 2\n-  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u,\\\n-\t\t        load_l,store_c,sync\")\n+  (and (eq_attr \"type\" \"load,load_l,store_c,sync\")\n        (eq_attr \"cpu\" \"ppc601\"))\n   \"iu_ppc601\")\n \n (define_insn_reservation \"ppc601-store\" 2\n-  (and (eq_attr \"type\" \"store,store_ux,store_u\")\n+  (and (eq_attr \"type\" \"store\")\n        (eq_attr \"cpu\" \"ppc601\"))\n   \"iu_ppc601\")\n \n (define_insn_reservation \"ppc601-fpload\" 3\n-  (and (eq_attr \"type\" \"fpload,fpload_ux,fpload_u\")\n+  (and (eq_attr \"type\" \"fpload\")\n        (eq_attr \"cpu\" \"ppc601\"))\n   \"iu_ppc601\")\n \n (define_insn_reservation \"ppc601-fpstore\" 3\n-  (and (eq_attr \"type\" \"fpstore,fpstore_ux,fpstore_u\")\n+  (and (eq_attr \"type\" \"fpstore\")\n        (eq_attr \"cpu\" \"ppc601\"))\n   \"iu_ppc601+fpu_ppc601\")\n "}, {"sha": "2c778cd2768f94cef34cd63b86e85cdf81aae431", "filename": "gcc/config/rs6000/603.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2F603.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2F603.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F603.md?ref=d839f53b7dfd86250420bce15382c98cbd43b4ec", "patch": "@@ -38,17 +38,17 @@\n ;; CR insns get executed in the SRU.  Not modelled.\n \n (define_insn_reservation \"ppc603-load\" 2\n-  (and (eq_attr \"type\" \"load,load_ext,load_ux,load_u,load_l\")\n+  (and (eq_attr \"type\" \"load,load_l\")\n        (eq_attr \"cpu\" \"ppc603\"))\n   \"lsu_603\")\n \n (define_insn_reservation \"ppc603-store\" 2\n-  (and (eq_attr \"type\" \"store,store_ux,store_u,fpstore,fpstore_ux,fpstore_u\")\n+  (and (eq_attr \"type\" \"store,fpstore\")\n        (eq_attr \"cpu\" \"ppc603\"))\n   \"lsu_603*2\")\n \n (define_insn_reservation \"ppc603-fpload\" 2\n-  (and (eq_attr \"type\" \"fpload,fpload_ux,fpload_u\")\n+  (and (eq_attr \"type\" \"fpload\")\n        (eq_attr \"cpu\" \"ppc603\"))\n   \"lsu_603\")\n "}, {"sha": "88895a1cc929a48291f396a659c38ba0b9b7d9f9", "filename": "gcc/config/rs6000/6xx.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2F6xx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2F6xx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F6xx.md?ref=d839f53b7dfd86250420bce15382c98cbd43b4ec", "patch": "@@ -48,17 +48,17 @@\n ;; Four insns can be dispatched per cycle.\n \n (define_insn_reservation \"ppc604-load\" 2\n-  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u\")\n+  (and (eq_attr \"type\" \"load\")\n        (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n   \"lsu_6xx\")\n \n (define_insn_reservation \"ppc604-fpload\" 3\n-  (and (eq_attr \"type\" \"fpload,fpload_ux,fpload_u\")\n+  (and (eq_attr \"type\" \"fpload\")\n        (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n   \"lsu_6xx\")\n \n (define_insn_reservation \"ppc604-store\" 3\n-  (and (eq_attr \"type\" \"store,fpstore,store_ux,store_u,fpstore_ux,fpstore_u\")\n+  (and (eq_attr \"type\" \"store,fpstore\")\n        (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n   \"lsu_6xx\")\n "}, {"sha": "cae8c49f8887cc42e3c5e0aeb14888613ebe5548", "filename": "gcc/config/rs6000/7450.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2F7450.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2F7450.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F7450.md?ref=d839f53b7dfd86250420bce15382c98cbd43b4ec", "patch": "@@ -43,23 +43,22 @@\n (define_reservation \"ppc7450_vec_du\" \"vdu1_7450|vdu2_7450\")\n \n (define_insn_reservation \"ppc7450-load\" 3\n-  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,\\\n-\t\t        load_ux,load_u,vecload\")\n+  (and (eq_attr \"type\" \"load,vecload\")\n        (eq_attr \"cpu\" \"ppc7450\"))\n   \"ppc7450_du,lsu_7450\")\n \n (define_insn_reservation \"ppc7450-store\" 3\n-  (and (eq_attr \"type\" \"store,store_ux,store_u,vecstore\")\n+  (and (eq_attr \"type\" \"store,vecstore\")\n        (eq_attr \"cpu\" \"ppc7450\"))\n   \"ppc7450_du,lsu_7450\")\n \n (define_insn_reservation \"ppc7450-fpload\" 4\n-  (and (eq_attr \"type\" \"fpload,fpload_ux,fpload_u\")\n+  (and (eq_attr \"type\" \"fpload\")\n        (eq_attr \"cpu\" \"ppc7450\"))\n   \"ppc7450_du,lsu_7450\")\n \n (define_insn_reservation \"ppc7450-fpstore\" 3\n-  (and (eq_attr \"type\" \"fpstore,fpstore_ux,fpstore_u\")\n+  (and (eq_attr \"type\" \"fpstore\")\n        (eq_attr \"cpu\" \"ppc7450\"))\n   \"ppc7450_du,lsu_7450*3\")\n "}, {"sha": "65934dd8baec3e6d233a99d54518816bf5916533", "filename": "gcc/config/rs6000/7xx.md", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2F7xx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2F7xx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F7xx.md?ref=d839f53b7dfd86250420bce15382c98cbd43b4ec", "patch": "@@ -46,15 +46,12 @@\n (define_reservation \"ppc7400_vec_du\" \"vdu_7xx\")\n \n (define_insn_reservation \"ppc750-load\" 2\n-  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,\\\n-\t\t        load_ux,load_u,fpload,fpload_ux,fpload_u,\\\n-\t\t\tvecload,load_l\")\n+  (and (eq_attr \"type\" \"load,fpload,vecload,load_l\")\n        (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n   \"ppc750_du,lsu_7xx\")\n \n (define_insn_reservation \"ppc750-store\" 2\n-  (and (eq_attr \"type\" \"store,store_ux,store_u,\\\n-\t\t        fpstore,fpstore_ux,fpstore_u,vecstore\")\n+  (and (eq_attr \"type\" \"store,fpstore,vecstore\")\n        (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n   \"ppc750_du,lsu_7xx\")\n "}, {"sha": "76cca3fbf31feade63c91afd21485dd6b9c2e96e", "filename": "gcc/config/rs6000/8540.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2F8540.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2F8540.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F8540.md?ref=d839f53b7dfd86250420bce15382c98cbd43b4ec", "patch": "@@ -152,14 +152,13 @@\n \n ;; Loads\n (define_insn_reservation \"ppc8540_load\" 3\n-  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u,\\\n-\t\t\tload_l,sync\")\n+  (and (eq_attr \"type\" \"load,load_l,sync\")\n        (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n   \"ppc8540_decode,ppc8540_issue+ppc8540_lsu,nothing,ppc8540_retire\")\n \n ;; Stores.\n (define_insn_reservation \"ppc8540_store\" 3\n-  (and (eq_attr \"type\" \"store,store_ux,store_u,store_c\")\n+  (and (eq_attr \"type\" \"store,store_c\")\n        (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n   \"ppc8540_decode,ppc8540_issue+ppc8540_lsu,nothing,ppc8540_retire\")\n "}, {"sha": "02a98546dfe8e76daae40ae88d15187a3ab64c4f", "filename": "gcc/config/rs6000/a2.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fa2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fa2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fa2.md?ref=d839f53b7dfd86250420bce15382c98cbd43b4ec", "patch": "@@ -71,7 +71,7 @@\n \n ;; D.4.13\n (define_insn_reservation \"ppca2-load\" 5\n-  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u\")\n+  (and (eq_attr \"type\" \"load\")\n        (eq_attr \"cpu\" \"ppca2\"))\n   \"nothing\")\n \n@@ -83,13 +83,13 @@\n \n ;; D.8.4\n (define_insn_reservation \"ppca2-fp-load\" 6\n-  (and (eq_attr \"type\" \"fpload,fpload_u,fpload_ux\")\n+  (and (eq_attr \"type\" \"fpload\")\n        (eq_attr \"cpu\" \"ppca2\"))\n   \"axu\")\n \n ;; D.8.5\n (define_insn_reservation \"ppca2-fp-store\" 2\n-  (and (eq_attr \"type\" \"fpstore,fpstore_u,fpstore_ux\")\n+  (and (eq_attr \"type\" \"fpstore\")\n        (eq_attr \"cpu\" \"ppca2\"))\n   \"axu\")\n "}, {"sha": "d13dcb6b7cd80a8da3e915a3d46dbc817b07df0a", "filename": "gcc/config/rs6000/cell.md", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fcell.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fcell.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fcell.md?ref=d839f53b7dfd86250420bce15382c98cbd43b4ec", "patch": "@@ -92,32 +92,39 @@\n ;;   these instr are not simulated\n (define_insn_reservation \"cell-load\" 2\n   (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"no\")\n        (eq_attr \"cpu\" \"cell\"))\n   \"slot01,lsu_cell\")\n \n ;; ldux, ldu, lbzux, lbzu, hardware breaks it down to two instrs,\n ;;  if with 32bytes alignment, CMC\n (define_insn_reservation \"cell-load-ux\" 2\n-  (and (eq_attr \"type\" \"load_ux,load_u\")\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"yes\")\n        (eq_attr \"cpu\" \"cell\"))\n   \"slot01,fxu_cell+lsu_cell\")\n \n ;; lha, lhax, lhau, lhaux, lwa, lwax, lwaux, MC, latency unknown\n ;;   11/7, 11/8, 11/12\n (define_insn_reservation \"cell-load-ext\" 2\n-  (and (eq_attr \"type\" \"load_ext,load_ext_u,load_ext_ux\")\n-       (eq_attr \"cpu\" \"cell\")) \n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"cpu\" \"cell\"))\n   \"slot01,fxu_cell+lsu_cell\")\n \n ;;lfs,lfsx,lfd,lfdx, 1 cycle\n (define_insn_reservation \"cell-fpload\" 1\n   (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"no\")\n        (eq_attr \"cpu\" \"cell\"))\n   \"vsu2_cell+lsu_cell+slot01\")\n \n ;; lfsu,lfsux,lfdu,lfdux 1cycle(fpr) 2 cycle(gpr)\n (define_insn_reservation \"cell-fpload-update\" 1\n-  (and (eq_attr \"type\" \"fpload,fpload_u,fpload_ux\")\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"yes\")\n        (eq_attr \"cpu\" \"cell\"))\n   \"fxu_cell+vsu2_cell+lsu_cell+slot01\")\n \n@@ -129,22 +136,26 @@\n ;;st? stw(MC)\n (define_insn_reservation \"cell-store\" 1\n   (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"no\")\n        (eq_attr \"cpu\" \"cell\"))\n   \"lsu_cell+slot01\")\n \n ;;stdux, stdu, (hardware breaks into store and add) 2 for update reg\n (define_insn_reservation \"cell-store-update\" 1\n-  (and (eq_attr \"type\" \"store_ux,store_u\")\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"yes\")\n        (eq_attr \"cpu\" \"cell\"))\n   \"fxu_cell+lsu_cell+slot01\")\n \n (define_insn_reservation \"cell-fpstore\" 1\n   (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"update\" \"no\")\n        (eq_attr \"cpu\" \"cell\"))\n   \"vsu2_cell+lsu_cell+slot01\")\n \n (define_insn_reservation \"cell-fpstore-update\" 1\n-  (and (eq_attr \"type\" \"fpstore_ux,fpstore_u\")\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"update\" \"yes\")\n        (eq_attr \"cpu\" \"cell\"))\n   \"vsu2_cell+fxu_cell+lsu_cell+slot01\")\n "}, {"sha": "63ae541225e709b7b1bc1023fa3b87096cdb2650", "filename": "gcc/config/rs6000/dfp.md", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fdfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fdfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdfp.md?ref=d839f53b7dfd86250420bce15382c98cbd43b4ec", "patch": "@@ -37,14 +37,7 @@\n    || gpc_reg_operand (operands[1], SDmode))\n    && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"stfd%U0%X0 %1,%0\"\n-  [(set (attr \"type\")\n-      (if_then_else\n-\t(match_test \"update_indexed_address_mem (operands[0], VOIDmode)\")\n-\t(const_string \"fpstore_ux\")\n-\t(if_then_else\n-\t  (match_test \"update_address_mem (operands[0], VOIDmode)\")\n-\t  (const_string \"fpstore_u\")\n-\t  (const_string \"fpstore\"))))\n+  [(set_attr \"type\" \"fpstore\")\n    (set_attr \"length\" \"4\")])\n \n (define_insn \"movsd_load\"\n@@ -55,14 +48,7 @@\n    || gpc_reg_operand (operands[1], DDmode))\n    && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"lfd%U1%X1 %0,%1\"\n-  [(set (attr \"type\")\n-      (if_then_else\n-\t(match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n-\t(const_string \"fpload_ux\")\n-\t(if_then_else\n-\t  (match_test \"update_address_mem (operands[1], VOIDmode)\")\n-\t  (const_string \"fpload_u\")\n-\t  (const_string \"fpload\"))))\n+  [(set_attr \"type\" \"fpload\")\n    (set_attr \"length\" \"4\")])\n \n ;; Hardware support for decimal floating point operations."}, {"sha": "7a54dba16e2bb6e087063820b06cbe1fb71a0526", "filename": "gcc/config/rs6000/e300c2c3.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fe300c2c3.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fe300c2c3.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fe300c2c3.md?ref=d839f53b7dfd86250420bce15382c98cbd43b4ec", "patch": "@@ -168,22 +168,22 @@\n \n ;; Loads\n (define_insn_reservation \"ppce300c3_load\" 2\n-  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u\")\n+  (and (eq_attr \"type\" \"load\")\n        (ior (eq_attr \"cpu\" \"ppce300c2\") (eq_attr \"cpu\" \"ppce300c3\")))\n   \"ppce300c3_decode,ppce300c3_issue+ppce300c3_lsu,ppce300c3_retire\")\n \n (define_insn_reservation \"ppce300c3_fpload\" 2\n-  (and (eq_attr \"type\" \"fpload,fpload_ux,fpload_u\")\n+  (and (eq_attr \"type\" \"fpload\")\n        (eq_attr \"cpu\" \"ppce300c3\"))\n   \"ppce300c3_decode,ppce300c3_issue+ppce300c3_lsu,ppce300c3_retire\")\n \n ;; Stores.\n (define_insn_reservation \"ppce300c3_store\" 2\n-  (and (eq_attr \"type\" \"store,store_ux,store_u\")\n+  (and (eq_attr \"type\" \"store\")\n        (ior (eq_attr \"cpu\" \"ppce300c2\") (eq_attr \"cpu\" \"ppce300c3\")))\n   \"ppce300c3_decode,ppce300c3_issue+ppce300c3_lsu,ppce300c3_retire\")\n \n (define_insn_reservation \"ppce300c3_fpstore\" 2\n-  (and (eq_attr \"type\" \"fpstore,fpstore_ux,fpstore_u\")\n+  (and (eq_attr \"type\" \"fpstore\")\n        (eq_attr \"cpu\" \"ppce300c3\"))\n   \"ppce300c3_decode,ppce300c3_issue+ppce300c3_lsu,ppce300c3_retire\")"}, {"sha": "7c14c631c9268747ca2406de451b6dd7907ed18c", "filename": "gcc/config/rs6000/e500mc.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fe500mc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fe500mc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fe500mc.md?ref=d839f53b7dfd86250420bce15382c98cbd43b4ec", "patch": "@@ -141,24 +141,23 @@\n \n ;; Loads.\n (define_insn_reservation \"e500mc_load\" 3\n-  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u,\\\n-\t\t\tload_l,sync\")\n+  (and (eq_attr \"type\" \"load,load_l,sync\")\n        (eq_attr \"cpu\" \"ppce500mc\"))\n   \"e500mc_decode,e500mc_issue+e500mc_lsu,nothing,e500mc_retire\")\n \n (define_insn_reservation \"e500mc_fpload\" 4\n-  (and (eq_attr \"type\" \"fpload,fpload_ux,fpload_u\")\n+  (and (eq_attr \"type\" \"fpload\")\n        (eq_attr \"cpu\" \"ppce500mc\"))\n   \"e500mc_decode,e500mc_issue+e500mc_lsu,nothing*2,e500mc_retire\")\n \n ;; Stores.\n (define_insn_reservation \"e500mc_store\" 3\n-  (and (eq_attr \"type\" \"store,store_ux,store_u,store_c\")\n+  (and (eq_attr \"type\" \"store,store_c\")\n        (eq_attr \"cpu\" \"ppce500mc\"))\n   \"e500mc_decode,e500mc_issue+e500mc_lsu,nothing,e500mc_retire\")\n \n (define_insn_reservation \"e500mc_fpstore\" 3\n-  (and (eq_attr \"type\" \"fpstore,fpstore_ux,fpstore_u\")\n+  (and (eq_attr \"type\" \"fpstore\")\n        (eq_attr \"cpu\" \"ppce500mc\"))\n   \"e500mc_decode,e500mc_issue+e500mc_lsu,nothing,e500mc_retire\")\n "}, {"sha": "6418339d241518b5866987bb97adb961f4ce165c", "filename": "gcc/config/rs6000/e500mc64.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fe500mc64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fe500mc64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fe500mc64.md?ref=d839f53b7dfd86250420bce15382c98cbd43b4ec", "patch": "@@ -149,24 +149,23 @@\n \n ;; Loads.\n (define_insn_reservation \"e500mc64_load\" 3\n-  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u,\\\n-\t\t\tload_l,sync\")\n+  (and (eq_attr \"type\" \"load,load_l,sync\")\n        (eq_attr \"cpu\" \"ppce500mc64\"))\n   \"e500mc64_decode,e500mc64_issue+e500mc64_lsu,nothing,e500mc64_retire\")\n \n (define_insn_reservation \"e500mc64_fpload\" 4\n-  (and (eq_attr \"type\" \"fpload,fpload_ux,fpload_u\")\n+  (and (eq_attr \"type\" \"fpload\")\n        (eq_attr \"cpu\" \"ppce500mc64\"))\n   \"e500mc64_decode,e500mc64_issue+e500mc64_lsu,nothing*2,e500mc64_retire\")\n \n ;; Stores.\n (define_insn_reservation \"e500mc64_store\" 3\n-  (and (eq_attr \"type\" \"store,store_ux,store_u,store_c\")\n+  (and (eq_attr \"type\" \"store,store_c\")\n        (eq_attr \"cpu\" \"ppce500mc64\"))\n   \"e500mc64_decode,e500mc64_issue+e500mc64_lsu,nothing,e500mc64_retire\")\n \n (define_insn_reservation \"e500mc64_fpstore\" 3\n-  (and (eq_attr \"type\" \"fpstore,fpstore_ux,fpstore_u\")\n+  (and (eq_attr \"type\" \"fpstore\")\n        (eq_attr \"cpu\" \"ppce500mc64\"))\n   \"e500mc64_decode,e500mc64_issue+e500mc64_lsu,nothing,e500mc64_retire\")\n "}, {"sha": "51645266cb91d82d46484246274f7e795d1ff1d6", "filename": "gcc/config/rs6000/e5500.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fe5500.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fe5500.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fe5500.md?ref=d839f53b7dfd86250420bce15382c98cbd43b4ec", "patch": "@@ -126,24 +126,23 @@\n \n ;; LSU - Loads.\n (define_insn_reservation \"e5500_load\" 3\n-  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u,\\\n-\t\t\tload_l,sync\")\n+  (and (eq_attr \"type\" \"load,load_l,sync\")\n        (eq_attr \"cpu\" \"ppce5500\"))\n   \"e5500_decode,e5500_lsu\")\n \n (define_insn_reservation \"e5500_fpload\" 4\n-  (and (eq_attr \"type\" \"fpload,fpload_ux,fpload_u\")\n+  (and (eq_attr \"type\" \"fpload\")\n        (eq_attr \"cpu\" \"ppce5500\"))\n   \"e5500_decode,e5500_lsu\")\n \n ;; LSU - Stores.\n (define_insn_reservation \"e5500_store\" 3\n-  (and (eq_attr \"type\" \"store,store_ux,store_u,store_c\")\n+  (and (eq_attr \"type\" \"store,store_c\")\n        (eq_attr \"cpu\" \"ppce5500\"))\n   \"e5500_decode,e5500_lsu\")\n \n (define_insn_reservation \"e5500_fpstore\" 3\n-  (and (eq_attr \"type\" \"fpstore,fpstore_ux,fpstore_u\")\n+  (and (eq_attr \"type\" \"fpstore\")\n        (eq_attr \"cpu\" \"ppce5500\"))\n   \"e5500_decode,e5500_lsu\")\n "}, {"sha": "b2d8426acb7c034adc1b67de289ba9cc04ee56ee", "filename": "gcc/config/rs6000/e6500.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fe6500.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fe6500.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fe6500.md?ref=d839f53b7dfd86250420bce15382c98cbd43b4ec", "patch": "@@ -129,13 +129,12 @@\n \n ;; LSU - Loads.\n (define_insn_reservation \"e6500_load\" 3\n-  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u,\\\n-\t\t\tload_l,sync\")\n+  (and (eq_attr \"type\" \"load,load_l,sync\")\n        (eq_attr \"cpu\" \"ppce6500\"))\n   \"e6500_decode,e6500_lsu\")\n \n (define_insn_reservation \"e6500_fpload\" 4\n-  (and (eq_attr \"type\" \"fpload,fpload_ux,fpload_u\")\n+  (and (eq_attr \"type\" \"fpload\")\n        (eq_attr \"cpu\" \"ppce6500\"))\n   \"e6500_decode,e6500_lsu\")\n \n@@ -146,12 +145,12 @@\n \n ;; LSU - Stores.\n (define_insn_reservation \"e6500_store\" 3\n-  (and (eq_attr \"type\" \"store,store_ux,store_u,store_c\")\n+  (and (eq_attr \"type\" \"store,store_c\")\n        (eq_attr \"cpu\" \"ppce6500\"))\n   \"e6500_decode,e6500_lsu\")\n \n (define_insn_reservation \"e6500_fpstore\" 3\n-  (and (eq_attr \"type\" \"fpstore,fpstore_ux,fpstore_u\")\n+  (and (eq_attr \"type\" \"fpstore\")\n        (eq_attr \"cpu\" \"ppce6500\"))\n   \"e6500_decode,e6500_lsu\")\n "}, {"sha": "bce5f85c562e8631afe5eccba7b773e34fabb541", "filename": "gcc/config/rs6000/mpc.md", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fmpc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fmpc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fmpc.md?ref=d839f53b7dfd86250420bce15382c98cbd43b4ec", "patch": "@@ -26,18 +26,17 @@\n ;; 505/801/821/823\n \n (define_insn_reservation \"mpccore-load\" 2\n-  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u,\\\n-\t\t\tload_l,store_c,sync\")\n+  (and (eq_attr \"type\" \"load,load_l,store_c,sync\")\n        (eq_attr \"cpu\" \"mpccore\"))\n   \"lsu_mpc\")\n \n (define_insn_reservation \"mpccore-store\" 2\n-  (and (eq_attr \"type\" \"store,store_ux,store_u,fpstore,fpstore_ux,fpstore_u\")\n+  (and (eq_attr \"type\" \"store,fpstore\")\n        (eq_attr \"cpu\" \"mpccore\"))\n   \"lsu_mpc\")\n \n (define_insn_reservation \"mpccore-fpload\" 2\n-  (and (eq_attr \"type\" \"fpload,fpload_ux,fpload_u\")\n+  (and (eq_attr \"type\" \"fpload\")\n        (eq_attr \"cpu\" \"mpccore\"))\n   \"lsu_mpc\")\n "}, {"sha": "bafb4297f2a2e3ab704e796bba3f393092a0c935", "filename": "gcc/config/rs6000/power4.md", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fpower4.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fpower4.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower4.md?ref=d839f53b7dfd86250420bce15382c98cbd43b4ec", "patch": "@@ -77,11 +77,15 @@\n ; Load/store\n (define_insn_reservation \"power4-load\" 4 ; 3\n   (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"no\")\n        (eq_attr \"cpu\" \"power4\"))\n   \"lsq_power4\")\n \n (define_insn_reservation \"power4-load-ext\" 5\n-  (and (eq_attr \"type\" \"load_ext\")\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"no\")\n        (eq_attr \"cpu\" \"power4\"))\n   \"(du1_power4+du2_power4,lsu1_power4\\\n     |du2_power4+du3_power4,lsu2_power4\\\n@@ -90,35 +94,49 @@\n    (iu2_power4|iu1_power4)\")\n \n (define_insn_reservation \"power4-load-ext-update\" 5\n-  (and (eq_attr \"type\" \"load_ext_u\")\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"no\")\n        (eq_attr \"cpu\" \"power4\"))\n   \"du1_power4+du2_power4+du3_power4+du4_power4,\\\n    lsu1_power4+iu2_power4,nothing,nothing,iu2_power4\")\n \n (define_insn_reservation \"power4-load-ext-update-indexed\" 5\n-  (and (eq_attr \"type\" \"load_ext_ux\")\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"yes\")\n        (eq_attr \"cpu\" \"power4\"))\n   \"du1_power4+du2_power4+du3_power4+du4_power4,\\\n    iu1_power4,lsu2_power4+iu1_power4,nothing,nothing,iu2_power4\")\n \n (define_insn_reservation \"power4-load-update-indexed\" 3\n-  (and (eq_attr \"type\" \"load_ux\")\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"yes\")\n        (eq_attr \"cpu\" \"power4\"))\n   \"du1_power4+du2_power4+du3_power4+du4_power4,\\\n    iu1_power4,lsu2_power4+iu2_power4\")\n \n (define_insn_reservation \"power4-load-update\" 4 ; 3\n-  (and (eq_attr \"type\" \"load_u\")\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"no\")\n        (eq_attr \"cpu\" \"power4\"))\n   \"lsuq_power4\")\n \n (define_insn_reservation \"power4-fpload\" 6 ; 5\n   (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"no\")\n        (eq_attr \"cpu\" \"power4\"))\n   \"lsq_power4\")\n \n (define_insn_reservation \"power4-fpload-update\" 6 ; 5\n-  (and (eq_attr \"type\" \"fpload_u,fpload_ux\")\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"yes\")\n        (eq_attr \"cpu\" \"power4\"))\n   \"lsuq_power4\")\n \n@@ -129,6 +147,7 @@\n \n (define_insn_reservation \"power4-store\" 12\n   (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"no\")\n        (eq_attr \"cpu\" \"power4\"))\n   \"((du1_power4,lsu1_power4)\\\n     |(du2_power4,lsu2_power4)\\\n@@ -137,7 +156,9 @@\n    (iu1_power4|iu2_power4)\")\n \n (define_insn_reservation \"power4-store-update\" 12\n-  (and (eq_attr \"type\" \"store_u\")\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"no\")\n        (eq_attr \"cpu\" \"power4\"))\n   \"((du1_power4+du2_power4,lsu1_power4)\\\n     |(du2_power4+du3_power4,lsu2_power4)\\\n@@ -147,13 +168,16 @@\n     |(nothing,iu2_power4,iu1_power4))\")\n \n (define_insn_reservation \"power4-store-update-indexed\" 12\n-  (and (eq_attr \"type\" \"store_ux\")\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"yes\")\n        (eq_attr \"cpu\" \"power4\"))\n    \"du1_power4+du2_power4+du3_power4+du4_power4,\\\n     iu1_power4,lsu2_power4+iu2_power4,iu2_power4\")\n \n (define_insn_reservation \"power4-fpstore\" 12\n   (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"update\" \"no\")\n        (eq_attr \"cpu\" \"power4\"))\n   \"((du1_power4,lsu1_power4)\\\n     |(du2_power4,lsu2_power4)\\\n@@ -162,7 +186,8 @@\n    (fpu1_power4|fpu2_power4)\")\n \n (define_insn_reservation \"power4-fpstore-update\" 12\n-  (and (eq_attr \"type\" \"fpstore_u,fpstore_ux\")\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"update\" \"yes\")\n        (eq_attr \"cpu\" \"power4\"))\n   \"((du1_power4+du2_power4,lsu1_power4)\\\n     |(du2_power4+du3_power4,lsu2_power4)\\"}, {"sha": "747fda3fdd520bc92365ee14600fec59e78dfc0d", "filename": "gcc/config/rs6000/power5.md", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fpower5.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fpower5.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower5.md?ref=d839f53b7dfd86250420bce15382c98cbd43b4ec", "patch": "@@ -57,49 +57,68 @@\n ; Load/store\n (define_insn_reservation \"power5-load\" 4 ; 3\n   (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"no\")\n        (eq_attr \"cpu\" \"power5\"))\n   \"lsq_power5\")\n \n (define_insn_reservation \"power5-load-ext\" 5\n-  (and (eq_attr \"type\" \"load_ext\")\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"no\")\n        (eq_attr \"cpu\" \"power5\"))\n   \"du1_power5+du2_power5,lsu1_power5,nothing,nothing,iu2_power5\")\n \n (define_insn_reservation \"power5-load-ext-update\" 5\n-  (and (eq_attr \"type\" \"load_ext_u\")\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"no\")\n        (eq_attr \"cpu\" \"power5\"))\n   \"du1_power5+du2_power5+du3_power5+du4_power5,\\\n    lsu1_power5+iu2_power5,nothing,nothing,iu2_power5\")\n \n (define_insn_reservation \"power5-load-ext-update-indexed\" 5\n-  (and (eq_attr \"type\" \"load_ext_ux\")\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"yes\")\n        (eq_attr \"cpu\" \"power5\"))\n   \"du1_power5+du2_power5+du3_power5+du4_power5,\\\n    iu1_power5,lsu2_power5+iu1_power5,nothing,nothing,iu2_power5\")\n \n (define_insn_reservation \"power5-load-update-indexed\" 3\n-  (and (eq_attr \"type\" \"load_ux\")\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"yes\")\n        (eq_attr \"cpu\" \"power5\"))\n   \"du1_power5+du2_power5+du3_power5+du4_power5,\\\n    iu1_power5,lsu2_power5+iu2_power5\")\n \n (define_insn_reservation \"power5-load-update\" 4 ; 3\n-  (and (eq_attr \"type\" \"load_u\")\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"no\")\n        (eq_attr \"cpu\" \"power5\"))\n   \"du1_power5+du2_power5,lsu1_power5+iu2_power5\")\n \n (define_insn_reservation \"power5-fpload\" 6 ; 5\n   (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"no\")\n        (eq_attr \"cpu\" \"power5\"))\n   \"lsq_power5\")\n \n (define_insn_reservation \"power5-fpload-update\" 6 ; 5\n-  (and (eq_attr \"type\" \"fpload_u,fpload_ux\")\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"yes\")\n        (eq_attr \"cpu\" \"power5\"))\n   \"du1_power5+du2_power5,lsu1_power5+iu2_power5\")\n \n (define_insn_reservation \"power5-store\" 12\n   (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"no\")\n        (eq_attr \"cpu\" \"power5\"))\n   \"((du1_power5,lsu1_power5)\\\n     |(du2_power5,lsu2_power5)\\\n@@ -108,18 +127,23 @@\n     (iu1_power5|iu2_power5)\")\n \n (define_insn_reservation \"power5-store-update\" 12\n-  (and (eq_attr \"type\" \"store_u\")\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"no\")\n        (eq_attr \"cpu\" \"power5\"))\n   \"du1_power5+du2_power5,lsu1_power5+iu2_power5,iu1_power5\")\n \n (define_insn_reservation \"power5-store-update-indexed\" 12\n-  (and (eq_attr \"type\" \"store_ux\")\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"yes\")\n        (eq_attr \"cpu\" \"power5\"))\n    \"du1_power5+du2_power5+du3_power5+du4_power5,\\\n     iu1_power5,lsu2_power5+iu2_power5,iu2_power5\")\n \n (define_insn_reservation \"power5-fpstore\" 12\n   (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"update\" \"no\")\n        (eq_attr \"cpu\" \"power5\"))\n   \"((du1_power5,lsu1_power5)\\\n     |(du2_power5,lsu2_power5)\\\n@@ -128,7 +152,8 @@\n     (fpu1_power5|fpu2_power5)\")\n \n (define_insn_reservation \"power5-fpstore-update\" 12\n-  (and (eq_attr \"type\" \"fpstore_u,fpstore_ux\")\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"update\" \"yes\")\n        (eq_attr \"cpu\" \"power5\"))\n   \"du1_power5+du2_power5,lsu1_power5+iu2_power5,fpu1_power5\")\n "}, {"sha": "29476686eb162f3fcb5d723f1cef3bf32e6a7a0b", "filename": "gcc/config/rs6000/power6.md", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fpower6.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fpower6.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower6.md?ref=d839f53b7dfd86250420bce15382c98cbd43b4ec", "patch": "@@ -92,6 +92,8 @@\n ; that is read/written by a subsequent fixed point op.\n (define_insn_reservation \"power6-load\" 2 ; fx\n   (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"no\")\n        (eq_attr \"cpu\" \"power6\"))\n   \"LSU_power6\")\n \n@@ -109,7 +111,9 @@\n   \"store_data_bypass_p\")\n \n (define_insn_reservation \"power6-load-ext\" 4 ; fx\n-  (and (eq_attr \"type\" \"load_ext\")\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"no\")\n        (eq_attr \"cpu\" \"power6\"))\n   \"LSU_power6\")\n \n@@ -127,57 +131,78 @@\n   \"store_data_bypass_p\")\n \n (define_insn_reservation \"power6-load-update\" 2 ; fx\n-  (and (eq_attr \"type\" \"load_u\")\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"no\")\n        (eq_attr \"cpu\" \"power6\"))\n   \"LSX_power6\")\n \n (define_insn_reservation \"power6-load-update-indexed\" 2 ; fx\n-  (and (eq_attr \"type\" \"load_ux\")\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"yes\")\n        (eq_attr \"cpu\" \"power6\"))\n   \"LSX_power6\")\n \n (define_insn_reservation \"power6-load-ext-update\" 4 ; fx\n-  (and (eq_attr \"type\" \"load_ext_u\")\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"no\")\n        (eq_attr \"cpu\" \"power6\"))\n   \"LSX_power6\")\n \n (define_insn_reservation \"power6-load-ext-update-indexed\" 4 ; fx\n-  (and (eq_attr \"type\" \"load_ext_ux\")\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"yes\")\n        (eq_attr \"cpu\" \"power6\"))\n   \"LSX_power6\")\n \n (define_insn_reservation \"power6-fpload\" 1\n   (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"no\")\n        (eq_attr \"cpu\" \"power6\"))\n   \"LSU_power6\")\n \n (define_insn_reservation \"power6-fpload-update\" 1\n-  (and (eq_attr \"type\" \"fpload_u,fpload_ux\")\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"yes\")\n        (eq_attr \"cpu\" \"power6\"))\n   \"LSX_power6\")\n \n (define_insn_reservation \"power6-store\" 14\n   (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"no\")\n        (eq_attr \"cpu\" \"power6\"))\n   \"LSU_power6\")\n \n (define_insn_reservation \"power6-store-update\" 14\n-  (and (eq_attr \"type\" \"store_u\")\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"no\")\n        (eq_attr \"cpu\" \"power6\"))\n   \"LSX_power6\")\n \n (define_insn_reservation \"power6-store-update-indexed\" 14\n-  (and (eq_attr \"type\" \"store_ux\")\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"yes\")\n        (eq_attr \"cpu\" \"power6\"))\n   \"LX2_power6\")\n \n (define_insn_reservation \"power6-fpstore\" 14\n   (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"update\" \"no\")\n        (eq_attr \"cpu\" \"power6\"))\n   \"LSF_power6\")\n \n (define_insn_reservation \"power6-fpstore-update\" 14\n-  (and (eq_attr \"type\" \"fpstore_u,fpstore_ux\")\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"update\" \"yes\")\n        (eq_attr \"cpu\" \"power6\"))\n   \"XLF_power6\")\n "}, {"sha": "35ac88ef0844f5d0a584422921094f49ec333946", "filename": "gcc/config/rs6000/power7.md", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fpower7.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fpower7.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower7.md?ref=d839f53b7dfd86250420bce15382c98cbd43b4ec", "patch": "@@ -58,66 +58,91 @@\n ; LS Unit\n (define_insn_reservation \"power7-load\" 2\n   (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"no\")\n        (eq_attr \"cpu\" \"power7\"))\n   \"DU_power7,LSU_power7\")\n \n (define_insn_reservation \"power7-load-ext\" 3\n-  (and (eq_attr \"type\" \"load_ext\")\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"no\")\n        (eq_attr \"cpu\" \"power7\"))\n   \"DU2F_power7,LSU_power7,FXU_power7\")\n \n (define_insn_reservation \"power7-load-update\" 2\n-  (and (eq_attr \"type\" \"load_u\")\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"no\")\n        (eq_attr \"cpu\" \"power7\"))\n   \"DU2F_power7,LSU_power7+FXU_power7\")\n \n (define_insn_reservation \"power7-load-update-indexed\" 3\n-  (and (eq_attr \"type\" \"load_ux\")\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"yes\")\n        (eq_attr \"cpu\" \"power7\"))\n   \"DU4_power7,FXU_power7,LSU_power7+FXU_power7\")\n \n (define_insn_reservation \"power7-load-ext-update\" 4\n-  (and (eq_attr \"type\" \"load_ext_u\")\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"no\")\n        (eq_attr \"cpu\" \"power7\"))\n   \"DU2F_power7,LSU_power7+FXU_power7,FXU_power7\")\n \n (define_insn_reservation \"power7-load-ext-update-indexed\" 4\n-  (and (eq_attr \"type\" \"load_ext_ux\")\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"yes\")\n        (eq_attr \"cpu\" \"power7\"))\n   \"DU4_power7,FXU_power7,LSU_power7+FXU_power7,FXU_power7\")\n \n (define_insn_reservation \"power7-fpload\" 3\n   (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"no\")\n        (eq_attr \"cpu\" \"power7\"))\n   \"DU_power7,LSU_power7\")\n \n (define_insn_reservation \"power7-fpload-update\" 3\n-  (and (eq_attr \"type\" \"fpload_u,fpload_ux\")\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"yes\")\n        (eq_attr \"cpu\" \"power7\"))\n   \"DU2F_power7,LSU_power7+FXU_power7\")\n \n (define_insn_reservation \"power7-store\" 6 ; store-forwarding latency\n   (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"no\")\n        (eq_attr \"cpu\" \"power7\"))\n   \"DU_power7,LSU_power7+FXU_power7\")\n \n (define_insn_reservation \"power7-store-update\" 6\n-  (and (eq_attr \"type\" \"store_u\")\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"no\")\n        (eq_attr \"cpu\" \"power7\"))\n   \"DU2F_power7,LSU_power7+FXU_power7,FXU_power7\")\n \n (define_insn_reservation \"power7-store-update-indexed\" 6\n-  (and (eq_attr \"type\" \"store_ux\")\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"yes\")\n        (eq_attr \"cpu\" \"power7\"))\n   \"DU4_power7,LSU_power7+FXU_power7,FXU_power7\")\n \n (define_insn_reservation \"power7-fpstore\" 6\n   (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"update\" \"no\")\n        (eq_attr \"cpu\" \"power7\"))\n   \"DU_power7,LSU_power7+VSU_power7\")\n \n (define_insn_reservation \"power7-fpstore-update\" 6\n-  (and (eq_attr \"type\" \"fpstore_u,fpstore_ux\")\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"update\" \"yes\")\n        (eq_attr \"cpu\" \"power7\"))\n   \"DU_power7,LSU_power7+VSU_power7+FXU_power7\")\n "}, {"sha": "7af5eab02bd3edb3a12a1b8342d7058e1edcdcd4", "filename": "gcc/config/rs6000/power8.md", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fpower8.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fpower8.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower8.md?ref=d839f53b7dfd86250420bce15382c98cbd43b4ec", "patch": "@@ -80,51 +80,68 @@\n ; LS Unit\n (define_insn_reservation \"power8-load\" 3\n   (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"no\")\n        (eq_attr \"cpu\" \"power8\"))\n   \"DU_any_power8,LU_or_LSU_power8\")\n \n (define_insn_reservation \"power8-load-update\" 3\n-  (and (eq_attr \"type\" \"load_u,load_ux\")\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"yes\")\n        (eq_attr \"cpu\" \"power8\"))\n   \"DU_cracked_power8,LU_or_LSU_power8+FXU_power8\")\n \n (define_insn_reservation \"power8-load-ext\" 3\n-  (and (eq_attr \"type\" \"load_ext\")\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"no\")\n        (eq_attr \"cpu\" \"power8\"))\n   \"DU_cracked_power8,LU_or_LSU_power8,FXU_power8\")\n \n (define_insn_reservation \"power8-load-ext-update\" 3\n-  (and (eq_attr \"type\" \"load_ext_u,load_ext_ux\")\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"yes\")\n        (eq_attr \"cpu\" \"power8\"))\n   \"DU_both_power8,LU_or_LSU_power8+FXU_power8,FXU_power8\")\n \n (define_insn_reservation \"power8-fpload\" 5\n-  (and (eq_attr \"type\" \"fpload,vecload\")\n+  (and (ior (eq_attr \"type\" \"vecload\")\n+\t    (and (eq_attr \"type\" \"fpload\")\n+\t\t (eq_attr \"update\" \"no\")))\n        (eq_attr \"cpu\" \"power8\"))\n   \"DU_any_power8,LU_power8\")\n \n (define_insn_reservation \"power8-fpload-update\" 5\n-  (and (eq_attr \"type\" \"fpload_u,fpload_ux\")\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"yes\")\n        (eq_attr \"cpu\" \"power8\"))\n   \"DU_cracked_power8,LU_power8+FXU_power8\")\n \n (define_insn_reservation \"power8-store\" 5 ; store-forwarding latency\n-  (and (eq_attr \"type\" \"store,store_u\")\n+  (and (eq_attr \"type\" \"store\")\n+       (not (and (eq_attr \"update\" \"yes\")\n+\t\t (eq_attr \"indexed\" \"yes\")))\n        (eq_attr \"cpu\" \"power8\"))\n   \"DU_any_power8,LSU_power8+LU_power8\")\n \n (define_insn_reservation \"power8-store-update-indexed\" 5\n-  (and (eq_attr \"type\" \"store_ux\")\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"yes\")\n        (eq_attr \"cpu\" \"power8\"))\n   \"DU_cracked_power8,LSU_power8+LU_power8\")\n \n (define_insn_reservation \"power8-fpstore\" 5\n   (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"update\" \"no\")\n        (eq_attr \"cpu\" \"power8\"))\n   \"DU_any_power8,LSU_power8+VSU_power8\")\n \n (define_insn_reservation \"power8-fpstore-update\" 5\n-  (and (eq_attr \"type\" \"fpstore_u,fpstore_ux\")\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"update\" \"yes\")\n        (eq_attr \"cpu\" \"power8\"))\n   \"DU_any_power8,LSU_power8+VSU_power8\")\n "}, {"sha": "382fefa49a5a31510e414329515f5addef1e6768", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=d839f53b7dfd86250420bce15382c98cbd43b4ec", "patch": "@@ -751,6 +751,13 @@\n \t\t&& GET_CODE (XEXP (op, 0)) == PRE_MODIFY\n \t\t&& indexed_address (XEXP (XEXP (op, 0), 1), mode))\"))\n \n+;; Return 1 if the operand is a MEM with an indexed-form address.\n+(define_special_predicate \"indexed_address_mem\"\n+  (match_test \"(MEM_P (op)\n+\t\t&& (indexed_address (XEXP (op, 0), mode)\n+\t\t    || (GET_CODE (XEXP (op, 0)) == PRE_MODIFY\n+\t\t\t&& indexed_address (XEXP (XEXP (op, 0), 1), mode))))\"))\n+\n ;; Used for the destination of the fix_truncdfsi2 expander.\n ;; If stfiwx will be used, the result goes to memory; otherwise,\n ;; we're going to emit a store and a load of a subreg, so the dest is a"}, {"sha": "2de6125b1c56724389d9db5284c603a0ff20bc65", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 101, "deletions": 74, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d839f53b7dfd86250420bce15382c98cbd43b4ec", "patch": "@@ -26152,11 +26152,7 @@ rs6000_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n             break;\n \n           case TYPE_STORE:\n-          case TYPE_STORE_U:\n-          case TYPE_STORE_UX:\n           case TYPE_FPSTORE:\n-          case TYPE_FPSTORE_U:\n-          case TYPE_FPSTORE_UX:\n             if ((rs6000_cpu == PROCESSOR_POWER6)\n                 && recog_memoized (dep_insn)\n                 && (INSN_CODE (dep_insn) >= 0))\n@@ -26173,17 +26169,13 @@ rs6000_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n                 switch (get_attr_type (dep_insn))\n                   {\n                   case TYPE_LOAD:\n-                  case TYPE_LOAD_U:\n-                  case TYPE_LOAD_UX:\n                   case TYPE_CNTLZ:\n                     {\n                       if (! store_data_bypass_p (dep_insn, insn))\n-                        return 4;\n+                        return get_attr_sign_extend (dep_insn)\n+                               == SIGN_EXTEND_YES ? 6 : 4;\n                       break;\n                     }\n-                  case TYPE_LOAD_EXT:\n-                  case TYPE_LOAD_EXT_U:\n-                  case TYPE_LOAD_EXT_UX:\n                   case TYPE_VAR_SHIFT_ROTATE:\n                   case TYPE_VAR_DELAYED_COMPARE:\n                     {\n@@ -26198,17 +26190,20 @@ rs6000_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n                   case TYPE_SHIFT:\n                   case TYPE_INSERT_WORD:\n                   case TYPE_INSERT_DWORD:\n-                  case TYPE_FPLOAD_U:\n-                  case TYPE_FPLOAD_UX:\n-                  case TYPE_STORE_U:\n-                  case TYPE_STORE_UX:\n-                  case TYPE_FPSTORE_U:\n-                  case TYPE_FPSTORE_UX:\n                     {\n                       if (! store_data_bypass_p (dep_insn, insn))\n                         return 3;\n                       break;\n                     }\n+                  case TYPE_STORE:\n+                  case TYPE_FPLOAD:\n+                  case TYPE_FPSTORE:\n+                    {\n+                      if (get_attr_update (dep_insn) == UPDATE_YES\n+                          && ! store_data_bypass_p (dep_insn, insn))\n+                        return 3;\n+                      break;\n+                    }\n                   case TYPE_IMUL:\n                   case TYPE_IMUL2:\n                   case TYPE_IMUL3:\n@@ -26239,11 +26234,6 @@ rs6000_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n \t    break;\n \n           case TYPE_LOAD:\n-          case TYPE_LOAD_U:\n-          case TYPE_LOAD_UX:\n-          case TYPE_LOAD_EXT:\n-          case TYPE_LOAD_EXT_U:\n-          case TYPE_LOAD_EXT_UX:\n             if ((rs6000_cpu == PROCESSOR_POWER6)\n                 && recog_memoized (dep_insn)\n                 && (INSN_CODE (dep_insn) >= 0))\n@@ -26255,17 +26245,13 @@ rs6000_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n                 switch (get_attr_type (dep_insn))\n                   {\n                   case TYPE_LOAD:\n-                  case TYPE_LOAD_U:\n-                  case TYPE_LOAD_UX:\n                   case TYPE_CNTLZ:\n                     {\n                       if (set_to_load_agen (dep_insn, insn))\n-                        return 4;\n+                        return get_attr_sign_extend (dep_insn)\n+                               == SIGN_EXTEND_YES ? 6 : 4;\n                       break;\n                     }\n-                  case TYPE_LOAD_EXT:\n-                  case TYPE_LOAD_EXT_U:\n-                  case TYPE_LOAD_EXT_UX:\n                   case TYPE_VAR_SHIFT_ROTATE:\n                   case TYPE_VAR_DELAYED_COMPARE:\n                     {\n@@ -26280,17 +26266,20 @@ rs6000_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n                   case TYPE_SHIFT:\n                   case TYPE_INSERT_WORD:\n                   case TYPE_INSERT_DWORD:\n-                  case TYPE_FPLOAD_U:\n-                  case TYPE_FPLOAD_UX:\n-                  case TYPE_STORE_U:\n-                  case TYPE_STORE_UX:\n-                  case TYPE_FPSTORE_U:\n-                  case TYPE_FPSTORE_UX:\n                     {\n                       if (set_to_load_agen (dep_insn, insn))\n                         return 3;\n                       break;\n                     }\n+                  case TYPE_STORE:\n+                  case TYPE_FPLOAD:\n+                  case TYPE_FPSTORE:\n+                    {\n+                      if (get_attr_update (dep_insn) == UPDATE_YES\n+                          && set_to_load_agen (dep_insn, insn))\n+                        return 3;\n+                      break;\n+                    }\n                   case TYPE_IMUL:\n                   case TYPE_IMUL2:\n                   case TYPE_IMUL3:\n@@ -26322,6 +26311,7 @@ rs6000_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n \n           case TYPE_FPLOAD:\n             if ((rs6000_cpu == PROCESSOR_POWER6)\n+                && get_attr_update (insn) == UPDATE_NO\n                 && recog_memoized (dep_insn)\n                 && (INSN_CODE (dep_insn) >= 0)\n                 && (get_attr_type (dep_insn) == TYPE_MFFGPR))\n@@ -26351,7 +26341,8 @@ rs6000_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n                 return 1;\n               break;\n             case TYPE_FPLOAD:\n-              if (get_attr_type (dep_insn) == TYPE_MFFGPR)\n+              if (get_attr_update (insn) == UPDATE_NO\n+                  && get_attr_type (dep_insn) == TYPE_MFFGPR)\n                 return 2;\n               break;\n             default:\n@@ -26417,10 +26408,12 @@ is_microcoded_insn (rtx insn)\n       && (rs6000_cpu == PROCESSOR_POWER4 || rs6000_cpu == PROCESSOR_POWER5))\n     {\n       enum attr_type type = get_attr_type (insn);\n-      if (type == TYPE_LOAD_EXT_U\n-\t  || type == TYPE_LOAD_EXT_UX\n-\t  || type == TYPE_LOAD_UX\n-\t  || type == TYPE_STORE_UX\n+      if ((type == TYPE_LOAD\n+\t   && get_attr_update (insn) == UPDATE_YES\n+\t   && get_attr_sign_extend (insn) == SIGN_EXTEND_YES)\n+\t  || ((type == TYPE_LOAD || type == TYPE_STORE)\n+\t      && get_attr_update (insn) == UPDATE_YES\n+\t      && get_attr_indexed (insn) == INDEXED_YES)\n \t  || type == TYPE_MFCR)\n \treturn true;\n     }\n@@ -26443,10 +26436,19 @@ is_cracked_insn (rtx insn)\n       && (rs6000_cpu == PROCESSOR_POWER4 || rs6000_cpu == PROCESSOR_POWER5))\n     {\n       enum attr_type type = get_attr_type (insn);\n-      if (type == TYPE_LOAD_U || type == TYPE_STORE_U\n-\t  || type == TYPE_FPLOAD_U || type == TYPE_FPSTORE_U\n-\t  || type == TYPE_FPLOAD_UX || type == TYPE_FPSTORE_UX\n-\t  || type == TYPE_LOAD_EXT || type == TYPE_DELAYED_CR\n+      if ((type == TYPE_LOAD\n+\t   && get_attr_sign_extend (insn) == SIGN_EXTEND_YES\n+\t   && get_attr_update (insn) == UPDATE_NO)\n+\t  || (type == TYPE_LOAD\n+\t      && get_attr_sign_extend (insn) == SIGN_EXTEND_NO\n+\t      && get_attr_update (insn) == UPDATE_YES\n+\t      && get_attr_indexed (insn) == INDEXED_NO)\n+\t  || (type == TYPE_STORE\n+\t      && get_attr_update (insn) == UPDATE_YES\n+\t      && get_attr_indexed (insn) == INDEXED_NO)\n+\t  || ((type == TYPE_FPLOAD || type == TYPE_FPSTORE)\n+\t      && get_attr_update (insn) == UPDATE_YES)\n+\t  || type == TYPE_DELAYED_CR\n \t  || type == TYPE_COMPARE || type == TYPE_DELAYED_COMPARE\n \t  || type == TYPE_IMUL_COMPARE || type == TYPE_LMUL_COMPARE\n \t  || type == TYPE_IDIV || type == TYPE_LDIV\n@@ -27299,16 +27301,15 @@ insn_must_be_first_in_group (rtx insn)\n         case TYPE_SYNC:\n         case TYPE_LOAD_L:\n         case TYPE_STORE_C:\n-        case TYPE_LOAD_U:\n-        case TYPE_LOAD_UX:\n-        case TYPE_LOAD_EXT_UX:\n-        case TYPE_STORE_U:\n-        case TYPE_STORE_UX:\n-        case TYPE_FPLOAD_U:\n-        case TYPE_FPLOAD_UX:\n-        case TYPE_FPSTORE_U:\n-        case TYPE_FPSTORE_UX:\n           return true;\n+        case TYPE_LOAD:\n+        case TYPE_STORE:\n+        case TYPE_FPLOAD:\n+        case TYPE_FPSTORE:\n+          if (get_attr_update (insn) == UPDATE_YES)\n+            return true;\n+          else\n+            break;\n         default:\n           break;\n         }\n@@ -27330,20 +27331,22 @@ insn_must_be_first_in_group (rtx insn)\n         case TYPE_ISYNC:\n         case TYPE_LOAD_L:\n         case TYPE_STORE_C:\n-        case TYPE_LOAD_U:\n-        case TYPE_LOAD_UX:\n-        case TYPE_LOAD_EXT:\n-        case TYPE_LOAD_EXT_U:\n-        case TYPE_LOAD_EXT_UX:\n-        case TYPE_STORE_U:\n-        case TYPE_STORE_UX:\n-        case TYPE_FPLOAD_U:\n-        case TYPE_FPLOAD_UX:\n-        case TYPE_FPSTORE_U:\n-        case TYPE_FPSTORE_UX:\n         case TYPE_MFJMPR:\n         case TYPE_MTJMPR:\n           return true;\n+        case TYPE_LOAD:\n+          if (get_attr_sign_extend (insn) == SIGN_EXTEND_YES\n+              || get_attr_update (insn) == UPDATE_YES)\n+            return true;\n+          else\n+            break;\n+        case TYPE_STORE:\n+        case TYPE_FPLOAD:\n+        case TYPE_FPSTORE:\n+          if (get_attr_update (insn) == UPDATE_YES)\n+            return true;\n+          else\n+            break;\n         default:\n           break;\n         }\n@@ -27367,16 +27370,22 @@ insn_must_be_first_in_group (rtx insn)\n         case TYPE_ISYNC:\n         case TYPE_LOAD_L:\n         case TYPE_STORE_C:\n-        case TYPE_LOAD_U:\n-        case TYPE_LOAD_UX:\n-        case TYPE_LOAD_EXT:\n-        case TYPE_LOAD_EXT_U:\n-        case TYPE_LOAD_EXT_UX:\n-        case TYPE_STORE_UX:\n         case TYPE_VECSTORE:\n         case TYPE_MFJMPR:\n         case TYPE_MTJMPR:\n           return true;\n+        case TYPE_LOAD:\n+          if (get_attr_sign_extend (insn) == SIGN_EXTEND_YES\n+              || get_attr_update (insn) == UPDATE_YES)\n+            return true;\n+          else\n+            break;\n+        case TYPE_STORE:\n+          if (get_attr_update (insn) == UPDATE_YES\n+              && get_attr_indexed (insn) == INDEXED_YES)\n+            return true;\n+          else\n+            break;\n         default:\n           break;\n         }\n@@ -27451,10 +27460,19 @@ insn_must_be_last_in_group (rtx insn)\n       case TYPE_SYNC:\n       case TYPE_LOAD_L:\n       case TYPE_STORE_C:\n-      case TYPE_LOAD_EXT_U:\n-      case TYPE_LOAD_EXT_UX:\n-      case TYPE_STORE_UX:\n         return true;\n+      case TYPE_LOAD:\n+        if (get_attr_sign_extend (insn) == SIGN_EXTEND_YES\n+            && get_attr_update (insn) == UPDATE_YES)\n+          return true;\n+        else\n+          break;\n+      case TYPE_STORE:\n+        if (get_attr_update (insn) == UPDATE_YES\n+            && get_attr_indexed (insn) == INDEXED_YES)\n+          return true;\n+        else\n+          break;\n       default:\n         break;\n     }\n@@ -27470,10 +27488,19 @@ insn_must_be_last_in_group (rtx insn)\n       case TYPE_SYNC:\n       case TYPE_LOAD_L:\n       case TYPE_STORE_C:\n-      case TYPE_LOAD_EXT_U:\n-      case TYPE_LOAD_EXT_UX:\n-      case TYPE_STORE_UX:\n         return true;\n+      case TYPE_LOAD:\n+        if (get_attr_sign_extend (insn) == SIGN_EXTEND_YES\n+            && get_attr_update (insn) == UPDATE_YES)\n+          return true;\n+        else\n+          break;\n+      case TYPE_STORE:\n+        if (get_attr_update (insn) == UPDATE_YES\n+            && get_attr_indexed (insn) == INDEXED_YES)\n+          return true;\n+        else\n+          break;\n       default:\n         break;\n     }"}, {"sha": "300bd3698d6521306d762b66e52cf8dc26657693", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 191, "deletions": 508, "changes": 699, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=d839f53b7dfd86250420bce15382c98cbd43b4ec", "patch": "@@ -157,9 +157,32 @@\n \f\n ;; Define an insn type attribute.  This is used in function unit delay\n ;; computations.\n-(define_attr \"type\" \"integer,two,three,load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u,store,store_ux,store_u,fpload,fpload_ux,fpload_u,fpstore,fpstore_ux,fpstore_u,vecload,vecstore,imul,imul2,imul3,lmul,idiv,ldiv,insert_word,branch,cmp,fast_compare,compare,var_delayed_compare,delayed_compare,imul_compare,lmul_compare,fpcompare,cr_logical,delayed_cr,mfcr,mfcrf,mtcr,mfjmpr,mtjmpr,fp,fpsimple,dmul,sdiv,ddiv,ssqrt,dsqrt,jmpreg,brinc,vecsimple,veccomplex,vecdiv,veccmp,veccmpsimple,vecperm,vecfloat,vecfdiv,vecdouble,isync,sync,load_l,store_c,shift,trap,insert_dword,var_shift_rotate,cntlz,exts,mffgpr,mftgpr,isel,popcnt,crypto,htm\"\n+(define_attr \"type\" \"integer,two,three,load,store,fpload,fpstore,vecload,vecstore,imul,imul2,imul3,lmul,idiv,ldiv,insert_word,branch,cmp,fast_compare,compare,var_delayed_compare,delayed_compare,imul_compare,lmul_compare,fpcompare,cr_logical,delayed_cr,mfcr,mfcrf,mtcr,mfjmpr,mtjmpr,fp,fpsimple,dmul,sdiv,ddiv,ssqrt,dsqrt,jmpreg,brinc,vecsimple,veccomplex,vecdiv,veccmp,veccmpsimple,vecperm,vecfloat,vecfdiv,vecdouble,isync,sync,load_l,store_c,shift,trap,insert_dword,var_shift_rotate,cntlz,exts,mffgpr,mftgpr,isel,popcnt,crypto,htm\"\n   (const_string \"integer\"))\n \n+;; Does this instruction sign-extend its result?\n+;; This is used for load insns.\n+(define_attr \"sign_extend\" \"no,yes\" (const_string \"no\"))\n+\n+;; Does this instruction use indexed (that is, reg+reg) addressing?\n+;; This is used for load and store insns.  If operand 0 or 1 is a MEM\n+;; it is automatically set based on that.  If a load or store instruction\n+;; has fewer than two operands it needs to set this attribute manually\n+;; or the compiler will crash.\n+(define_attr \"indexed\" \"no,yes\"\n+  (if_then_else (ior (match_operand 0 \"indexed_address_mem\")\n+\t\t     (match_operand 1 \"indexed_address_mem\"))\n+\t\t(const_string \"yes\")\n+\t\t(const_string \"no\")))\n+\n+;; Does this instruction use update addressing?\n+;; This is used for load and store insns.  See the comments for \"indexed\".\n+(define_attr \"update\" \"no,yes\"\n+  (if_then_else (ior (match_operand 0 \"update_address_mem\")\n+\t\t     (match_operand 1 \"update_address_mem\"))\n+\t\t(const_string \"yes\")\n+\t\t(const_string \"no\")))\n+\n ;; Define floating point instruction sub-types for use with Xfpu.md\n (define_attr \"fp_type\" \"fp_default,fp_addsub_s,fp_addsub_d,fp_mul_s,fp_mul_d,fp_div_s,fp_div_d,fp_maddsub_s,fp_maddsub_d,fp_sqrt_s,fp_sqrt_d\" (const_string \"fp_default\"))\n \n@@ -191,7 +214,9 @@\n ;; If this instruction is microcoded on the CELL processor\n ; The default for load extended, the recorded instructions and rotate/shifts by a variable is always microcoded\n (define_attr \"cell_micro\" \"not,conditional,always\"\n-  (if_then_else (eq_attr \"type\" \"compare,delayed_compare,imul_compare,lmul_compare,load_ext,load_ext_ux,var_shift_rotate,var_delayed_compare\")\n+  (if_then_else (ior (eq_attr \"type\" \"compare,delayed_compare,imul_compare,lmul_compare,var_shift_rotate,var_delayed_compare\")\n+\t\t     (and (eq_attr \"type\" \"load\")\n+\t\t\t  (eq_attr \"sign_extend\" \"yes\")))\n \t\t(const_string \"always\")\n \t\t(const_string \"not\")))\n \n@@ -512,15 +537,7 @@\n   \"@\n    l<wd>z%U1%X1 %0,%1\n    rldicl %0,%1,0,<dbits>\"\n-  [(set_attr_alternative \"type\"\n-      [(if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n-\t (const_string \"load_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[1], VOIDmode)\")\n-\t   (const_string \"load_u\")\n-\t   (const_string \"load\")))\n-       (const_string \"*\")])])\n+  [(set_attr \"type\" \"load,*\")])\n \n (define_insn \"*zero_extend<mode>di2_internal2\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n@@ -584,18 +601,7 @@\n    mtvsrwz %x0,%1\n    lfiwzx %0,%y1\n    lxsiwzx %x0,%y1\"\n-  [(set_attr_alternative \"type\"\n-      [(if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n-\t (const_string \"load_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[1], VOIDmode)\")\n-\t   (const_string \"load_u\")\n-\t   (const_string \"load\")))\n-       (const_string \"*\")\n-       (const_string \"mffgpr\")\n-       (const_string \"fpload\")\n-       (const_string \"fpload\")])])\n+  [(set_attr \"type\" \"load,*,mffgpr,fpload,fpload\")])\n \n (define_insn \"extendqidi2\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n@@ -669,15 +675,8 @@\n   \"@\n    lha%U1%X1 %0,%1\n    extsh %0,%1\"\n-  [(set_attr_alternative \"type\"\n-      [(if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n-\t (const_string \"load_ext_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[1], VOIDmode)\")\n-\t   (const_string \"load_ext_u\")\n-\t   (const_string \"load_ext\")))\n-       (const_string \"exts\")])])\n+  [(set_attr \"type\" \"load,exts\")\n+   (set_attr \"sign_extend\" \"yes\")])\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n@@ -754,18 +753,8 @@\n    mtvsrwa %x0,%1\n    lfiwax %0,%y1\n    lxsiwax %x0,%y1\"\n-  [(set_attr_alternative \"type\"\n-      [(if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n-\t (const_string \"load_ext_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[1], VOIDmode)\")\n-\t   (const_string \"load_ext_u\")\n-\t   (const_string \"load_ext\")))\n-       (const_string \"exts\")\n-       (const_string \"mffgpr\")\n-       (const_string \"fpload\")\n-       (const_string \"fpload\")])])\n+  [(set_attr \"type\" \"load,exts,mffgpr,fpload,fpload\")\n+   (set_attr \"sign_extend\" \"yes\")])\n \n (define_insn \"*extendsidi2_nocell\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n@@ -774,15 +763,8 @@\n   \"@\n    lwa%U1%X1 %0,%1\n    extsw %0,%1\"\n-  [(set_attr_alternative \"type\"\n-      [(if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n-\t (const_string \"load_ext_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[1], VOIDmode)\")\n-\t   (const_string \"load_ext_u\")\n-\t   (const_string \"load_ext\")))\n-       (const_string \"exts\")])])\n+  [(set_attr \"type\" \"load,exts\")\n+   (set_attr \"sign_extend\" \"yes\")])\n \n (define_insn \"*extendsidi2_nocell\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n@@ -856,15 +838,7 @@\n   \"@\n    lbz%U1%X1 %0,%1\n    rlwinm %0,%1,0,0xff\"\n-  [(set_attr_alternative \"type\"\n-      [(if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n-\t (const_string \"load_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[1], VOIDmode)\")\n-\t   (const_string \"load_u\")\n-\t   (const_string \"load\")))\n-       (const_string \"*\")])])\n+  [(set_attr \"type\" \"load,*\")])\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n@@ -984,15 +958,7 @@\n   \"@\n    lbz%U1%X1 %0,%1\n    rlwinm %0,%1,0,0xff\"\n-  [(set_attr_alternative \"type\"\n-      [(if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n-\t (const_string \"load_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[1], VOIDmode)\")\n-\t   (const_string \"load_u\")\n-\t   (const_string \"load\")))\n-       (const_string \"*\")])])\n+  [(set_attr \"type\" \"load,*\")])\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n@@ -1118,15 +1084,7 @@\n   \"@\n    lhz%U1%X1 %0,%1\n    rlwinm %0,%1,0,0xffff\"\n-  [(set_attr_alternative \"type\"\n-      [(if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n-\t (const_string \"load_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[1], VOIDmode)\")\n-\t   (const_string \"load_u\")\n-\t   (const_string \"load\")))\n-       (const_string \"*\")])])\n+  [(set_attr \"type\" \"load,*\")])\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n@@ -1193,15 +1151,8 @@\n   \"@\n    lha%U1%X1 %0,%1\n    extsh %0,%1\"\n-  [(set_attr_alternative \"type\"\n-      [(if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n-\t (const_string \"load_ext_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[1], VOIDmode)\")\n-\t   (const_string \"load_ext_u\")\n-\t   (const_string \"load_ext\")))\n-       (const_string \"exts\")])])\n+  [(set_attr \"type\" \"load,exts\")\n+   (set_attr \"sign_extend\" \"yes\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n@@ -5260,25 +5211,7 @@\n   emit_note (NOTE_INSN_DELETED);\n   DONE;\n }\n-  [(set_attr_alternative \"type\"\n-      [(const_string \"fp\")\n-       (const_string \"fp\")\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n-\t (const_string \"fpload_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[1], VOIDmode)\")\n-\t   (const_string \"fpload_u\")\n-\t   (const_string \"fpload\")))\n-       (const_string \"fp\")\n-       (const_string \"vecsimple\")\n-       (if_then_else\n-\t(match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n-\t(const_string \"fpload_ux\")\n-\t(if_then_else\n-\t (match_test \"update_address_mem (operands[1], VOIDmode)\")\n-\t (const_string \"fpload_u\")\n-\t (const_string \"fpload\")))])])\n+  [(set_attr \"type\" \"fp,fp,fpload,fp,vecsimple,fpload\")])\n \n (define_expand \"truncdfsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n@@ -8878,31 +8811,7 @@\n    mt%0 %1\n    mt%0 %1\n    nop\"\n-  [(set_attr_alternative \"type\"\n-      [(const_string \"*\")\n-       (const_string \"*\")\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n-\t (const_string \"load_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[1], VOIDmode)\")\n-\t   (const_string \"load_u\")\n-\t   (const_string \"load\")))\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[0], VOIDmode)\")\n-\t (const_string \"store_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[0], VOIDmode)\")\n-\t   (const_string \"store_u\")\n-\t   (const_string \"store\")))\n-       (const_string \"*\")\n-       (const_string \"*\")\n-       (const_string \"*\")\n-       (const_string \"mfjmpr\")\n-       (const_string \"mtjmpr\")\n-       (const_string \"*\")\n-       (const_string \"*\")])\n-\n+  [(set_attr \"type\" \"*,*,load,store,*,*,*,mfjmpr,mtjmpr,*,*\")\n    (set_attr \"length\" \"4,4,4,4,4,4,8,4,4,4,4\")])\n \n (define_insn \"*movsi_internal1_single\"\n@@ -8924,44 +8833,7 @@\n    nop\n    stfs%U0%X0 %1,%0\n    lfs%U1%X1 %0,%1\"\n-  [(set_attr_alternative \"type\"\n-      [(const_string \"*\")\n-       (const_string \"*\")\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n-\t (const_string \"load_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[1], VOIDmode)\")\n-\t   (const_string \"load_u\")\n-\t   (const_string \"load\")))\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[0], VOIDmode)\")\n-\t (const_string \"store_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[0], VOIDmode)\")\n-\t   (const_string \"store_u\")\n-\t   (const_string \"store\")))\n-       (const_string \"*\")\n-       (const_string \"*\")\n-       (const_string \"*\")\n-       (const_string \"mfjmpr\")\n-       (const_string \"mtjmpr\")\n-       (const_string \"*\")\n-       (const_string \"*\")\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[0], VOIDmode)\")\n-\t (const_string \"fpstore_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[0], VOIDmode)\")\n-\t   (const_string \"fpstore_u\")\n-\t   (const_string \"fpstore\")))\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n-\t (const_string \"fpload_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[1], VOIDmode)\")\n-\t   (const_string \"fpload_u\")\n-\t   (const_string \"fpload\")))])\n+  [(set_attr \"type\" \"*,*,load,store,*,*,*,mfjmpr,mtjmpr,*,*,fpstore,fpload\")\n    (set_attr \"length\" \"4,4,4,4,4,4,8,4,4,4,4,4,4\")])\n \n ;; Split a load of a large constant into the appropriate two-insn\n@@ -9024,26 +8896,7 @@\n    mf%1 %0\n    mt%0 %1\n    nop\"\n-  [(set_attr_alternative \"type\"\n-      [(const_string \"*\")\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n-\t (const_string \"load_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[1], VOIDmode)\")\n-\t   (const_string \"load_u\")\n-\t   (const_string \"load\")))\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[0], VOIDmode)\")\n-\t (const_string \"store_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[0], VOIDmode)\")\n-\t   (const_string \"store_u\")\n-\t   (const_string \"store\")))\n-       (const_string \"*\")\n-       (const_string \"mfjmpr\")\n-       (const_string \"mtjmpr\")\n-       (const_string \"*\")])])\n+  [(set_attr \"type\" \"*,load,store,*,mfjmpr,mtjmpr,*\")])\n \n (define_expand \"mov<mode>\"\n   [(set (match_operand:INT 0 \"general_operand\" \"\")\n@@ -9064,26 +8917,7 @@\n    mf%1 %0\n    mt%0 %1\n    nop\"\n-  [(set_attr_alternative \"type\"\n-      [(const_string \"*\")\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n-\t (const_string \"load_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[1], VOIDmode)\")\n-\t   (const_string \"load_u\")\n-\t   (const_string \"load\")))\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[0], VOIDmode)\")\n-\t (const_string \"store_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[0], VOIDmode)\")\n-\t   (const_string \"store_u\")\n-\t   (const_string \"store\")))\n-       (const_string \"*\")\n-       (const_string \"mfjmpr\")\n-       (const_string \"mtjmpr\")\n-       (const_string \"*\")])])\n+  [(set_attr \"type\" \"*,load,store,*,mfjmpr,mtjmpr,*\")])\n \f\n ;; Here is how to move condition codes around.  When we store CC data in\n ;; an integer register or memory, we store just the high-order 4 bits.\n@@ -9124,23 +8958,9 @@\n \t    (eq_attr \"alternative\" \"9\")\n \t\t(const_string \"mtjmpr\")\n \t    (eq_attr \"alternative\" \"10\")\n-\t\t(if_then_else\n-\t\t  (match_test \"update_indexed_address_mem (operands[1],\n-\t\t\t\t\t\t\t   VOIDmode)\")\n-\t\t  (const_string \"load_ux\")\n-\t\t  (if_then_else\n-\t\t    (match_test \"update_address_mem (operands[1], VOIDmode)\")\n-\t\t    (const_string \"load_u\")\n-\t\t    (const_string \"load\")))\n+\t\t(const_string \"load\")\n \t    (eq_attr \"alternative\" \"11\")\n-\t\t(if_then_else\n-\t\t  (match_test \"update_indexed_address_mem (operands[0],\n-\t\t\t\t\t\t\t   VOIDmode)\")\n-\t\t  (const_string \"store_ux\")\n-\t\t  (if_then_else\n-\t\t    (match_test \"update_address_mem (operands[0], VOIDmode)\")\n-\t\t    (const_string \"store_u\")\n-\t\t    (const_string \"store\")))\n+\t\t(const_string \"store\")\n \t    (match_test \"TARGET_MFCRF\")\n \t\t(const_string \"mfcrf\")\n \t   ]\n@@ -9209,48 +9029,7 @@\n    nop\n    #\n    #\"\n-  [(set_attr_alternative \"type\"\n-      [(const_string \"*\")\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n-\t (const_string \"load_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[1], VOIDmode)\")\n-\t   (const_string \"load_u\")\n-\t   (const_string \"load\")))\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[0], VOIDmode)\")\n-\t (const_string \"store_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[0], VOIDmode)\")\n-\t   (const_string \"store_u\")\n-\t   (const_string \"store\")))\n-       (const_string \"fp\")\n-       (const_string \"vecsimple\")\n-       (const_string \"vecsimple\")\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n-\t (const_string \"fpload_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[1], VOIDmode)\")\n-\t   (const_string \"fpload_u\")\n-\t   (const_string \"fpload\")))\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[0], VOIDmode)\")\n-\t (const_string \"fpstore_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[0], VOIDmode)\")\n-\t   (const_string \"fpstore_u\")\n-\t   (const_string \"fpstore\")))\n-       (const_string \"fpload\")\n-       (const_string \"fpstore\")\n-       (const_string \"mftgpr\")\n-       (const_string \"mffgpr\")\n-       (const_string \"mtjmpr\")\n-       (const_string \"mfjmpr\")\n-       (const_string \"*\")\n-       (const_string \"*\")\n-       (const_string \"*\")])\n+  [(set_attr \"type\" \"*,load,store,fp,vecsimple,vecsimple,fpload,fpstore,fpload,fpstore,mftgpr,mffgpr,mtjmpr,mfjmpr,*,*,*\")\n    (set_attr \"length\" \"4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,8\")])\n \n (define_insn \"*mov<mode>_softfloat\"\n@@ -9270,29 +9049,7 @@\n    #\n    #\n    nop\"\n-  [(set_attr_alternative \"type\"\n-      [(const_string \"*\")\n-       (const_string \"mtjmpr\")\n-       (const_string \"mfjmpr\")\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n-\t (const_string \"load_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[1], VOIDmode)\")\n-\t   (const_string \"load_u\")\n-\t   (const_string \"load\")))\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[0], VOIDmode)\")\n-\t (const_string \"store_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[0], VOIDmode)\")\n-\t   (const_string \"store_u\")\n-\t   (const_string \"store\")))\n-       (const_string \"*\")\n-       (const_string \"*\")\n-       (const_string \"*\")\n-       (const_string \"*\")\n-       (const_string \"*\")])\n+  [(set_attr \"type\" \"*,mtjmpr,mfjmpr,load,store,*,*,*,*,*\")\n    (set_attr \"length\" \"4,4,4,4,4,4,4,4,8,4\")])\n \n \f\n@@ -9407,38 +9164,7 @@\n    #\n    #\n    #\"\n-  [(set_attr_alternative \"type\"\n-      [(if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[0], VOIDmode)\")\n-\t (const_string \"fpstore_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[0], VOIDmode)\")\n-\t   (const_string \"fpstore_u\")\n-\t   (const_string \"fpstore\")))\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n-\t (const_string \"fpload_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[1], VOIDmode)\")\n-\t   (const_string \"fpload_u\")\n-\t   (const_string \"fpload\")))\n-       (const_string \"fp\")\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n-\t (const_string \"fpload_ux\")\n-\t (const_string \"fpload\"))\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[0], VOIDmode)\")\n-\t (const_string \"fpstore_ux\")\n-\t (const_string \"fpstore\"))\n-       (const_string \"vecsimple\")\n-       (const_string \"vecsimple\")\n-       (const_string \"store\")\n-       (const_string \"load\")\n-       (const_string \"two\")\n-       (const_string \"fp\")\n-       (const_string \"fp\")\n-       (const_string \"*\")])\n+  [(set_attr \"type\" \"fpstore,fpload,fp,fpload,fpstore,vecsimple,vecsimple,store,load,two,fp,fp,*\")\n    (set_attr \"length\" \"4,4,4,4,4,4,4,8,8,8,8,12,16\")])\n \n (define_insn \"*mov<mode>_softfloat32\"\n@@ -9483,57 +9209,7 @@\n    mffgpr %0,%1\n    mfvsrd %0,%x1\n    mtvsrd %x0,%1\"\n-  [(set_attr_alternative \"type\"\n-      [(if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[0], VOIDmode)\")\n-\t (const_string \"fpstore_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[0], VOIDmode)\")\n-\t   (const_string \"fpstore_u\")\n-\t   (const_string \"fpstore\")))\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n-\t (const_string \"fpload_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[1], VOIDmode)\")\n-\t   (const_string \"fpload_u\")\n-\t   (const_string \"fpload\")))\n-       (const_string \"fp\")\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n-\t (const_string \"fpload_ux\")\n-\t (const_string \"fpload\"))\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[0], VOIDmode)\")\n-\t (const_string \"fpstore_ux\")\n-\t (const_string \"fpstore\"))\n-       (const_string \"vecsimple\")\n-       (const_string \"vecsimple\")\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[0], VOIDmode)\")\n-\t (const_string \"store_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[0], VOIDmode)\")\n-\t   (const_string \"store_u\")\n-\t   (const_string \"store\")))\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n-\t (const_string \"load_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[1], VOIDmode)\")\n-\t   (const_string \"load_u\")\n-\t   (const_string \"load\")))\n-       (const_string \"*\")\n-       (const_string \"mtjmpr\")\n-       (const_string \"mfjmpr\")\n-       (const_string \"*\")\n-       (const_string \"*\")\n-       (const_string \"*\")\n-       (const_string \"*\")\n-       (const_string \"mftgpr\")\n-       (const_string \"mffgpr\")\n-       (const_string \"mftgpr\")\n-       (const_string \"mffgpr\")])\n+  [(set_attr \"type\" \"fpstore,fpload,fp,fpload,fpstore,vecsimple,vecsimple,store,load,*,mtjmpr,mfjmpr,*,*,*,*,mftgpr,mffgpr,mftgpr,mffgpr\")\n    (set_attr \"length\" \"4,4,4,4,4,4,4,4,4,4,4,4,4,8,12,16,4,4,4,4\")])\n \n (define_insn \"*mov<mode>_softfloat64\"\n@@ -9552,28 +9228,7 @@\n    #\n    #\n    nop\"\n-  [(set_attr_alternative \"type\"\n-      [(if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[0], VOIDmode)\")\n-\t (const_string \"store_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[0], VOIDmode)\")\n-\t   (const_string \"store_u\")\n-\t   (const_string \"store\")))\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n-\t (const_string \"load_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[1], VOIDmode)\")\n-\t   (const_string \"load_u\")\n-\t   (const_string \"load\")))\n-       (const_string \"*\")\n-       (const_string \"mtjmpr\")\n-       (const_string \"mfjmpr\")\n-       (const_string \"*\")\n-       (const_string \"*\")\n-       (const_string \"*\")\n-       (const_string \"*\")])\n+  [(set_attr \"type\" \"store,load,*,mtjmpr,mfjmpr,*,*,*,*\")\n    (set_attr \"length\" \"4,4,4,4,4,8,12,16,4\")])\n \f\n (define_expand \"mov<mode>\"\n@@ -10187,26 +9842,7 @@\n    lfd%U1%X1 %0,%1\n    fmr %0,%1\n    #\"\n-  [(set_attr_alternative \"type\"\n-      [(const_string \"store\")\n-       (const_string \"load\")\n-       (const_string \"*\")\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[0], VOIDmode)\")\n-\t (const_string \"fpstore_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[0], VOIDmode)\")\n-\t   (const_string \"fpstore_u\")\n-\t   (const_string \"fpstore\")))\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n-\t (const_string \"fpload_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[1], VOIDmode)\")\n-\t   (const_string \"fpload_u\")\n-\t   (const_string \"fpload\")))\n-       (const_string \"fp\")\n-       (const_string \"*\")])])\n+  [(set_attr \"type\" \"store,load,*,fpstore,fpload,fp,*\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n@@ -10259,47 +9895,7 @@\n    mffgpr %0,%1\n    mfvsrd %0,%x1\n    mtvsrd %x0,%1\"\n-  [(set_attr_alternative \"type\"\n-      [(if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[0], VOIDmode)\")\n-\t (const_string \"store_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[0], VOIDmode)\")\n-\t   (const_string \"store_u\")\n-\t   (const_string \"store\")))\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n-\t (const_string \"load_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[1], VOIDmode)\")\n-\t   (const_string \"load_u\")\n-\t   (const_string \"load\")))\n-       (const_string \"*\")\n-       (const_string \"*\")\n-       (const_string \"*\")\n-       (const_string \"*\")\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[0], VOIDmode)\")\n-\t (const_string \"fpstore_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[0], VOIDmode)\")\n-\t   (const_string \"fpstore_u\")\n-\t   (const_string \"fpstore\")))\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n-\t (const_string \"fpload_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[1], VOIDmode)\")\n-\t   (const_string \"fpload_u\")\n-\t   (const_string \"fpload\")))\n-       (const_string \"fp\")\n-       (const_string \"mfjmpr\")\n-       (const_string \"mtjmpr\")\n-       (const_string \"*\")\n-       (const_string \"mftgpr\")\n-       (const_string \"mffgpr\")\n-       (const_string \"mftgpr\")\n-       (const_string \"mffgpr\")])\n+  [(set_attr \"type\" \"store,load,*,*,*,*,fpstore,fpload,fp,mfjmpr,mtjmpr,*,mftgpr,mffgpr,mftgpr,mffgpr\")\n    (set_attr \"length\" \"4,4,4,4,4,20,4,4,4,4,4,4,4,4,4,4\")])\n \n ;; Generate all one-bits and clear left or right.\n@@ -10383,7 +9979,9 @@\n       return \\\"#\\\";\n     }\n }\"\n-  [(set_attr \"type\" \"store_ux,store_ux,load_ux,load_ux,*,*\")\n+  [(set_attr \"type\" \"store,store,load,load,*,*\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes\")\n    (set (attr \"cell_micro\") (if_then_else (match_test \"TARGET_STRING\")\n    \t\t\t                  (const_string \"always\")\n \t\t\t\t\t  (const_string \"conditional\")))])\n@@ -10495,7 +10093,9 @@\n   \"TARGET_STRING && XVECLEN (operands[0], 0) == 8\"\n   \"*\n { return rs6000_output_load_multiple (operands); }\"\n-  [(set_attr \"type\" \"load_ux\")\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes\")\n    (set_attr \"length\" \"32\")])\n \n (define_insn \"*ldmsi7\"\n@@ -10517,7 +10117,9 @@\n   \"TARGET_STRING && XVECLEN (operands[0], 0) == 7\"\n   \"*\n { return rs6000_output_load_multiple (operands); }\"\n-  [(set_attr \"type\" \"load_ux\")\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes\")\n    (set_attr \"length\" \"32\")])\n \n (define_insn \"*ldmsi6\"\n@@ -10537,7 +10139,9 @@\n   \"TARGET_STRING && XVECLEN (operands[0], 0) == 6\"\n   \"*\n { return rs6000_output_load_multiple (operands); }\"\n-  [(set_attr \"type\" \"load_ux\")\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes\")\n    (set_attr \"length\" \"32\")])\n \n (define_insn \"*ldmsi5\"\n@@ -10555,7 +10159,9 @@\n   \"TARGET_STRING && XVECLEN (operands[0], 0) == 5\"\n   \"*\n { return rs6000_output_load_multiple (operands); }\"\n-  [(set_attr \"type\" \"load_ux\")\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes\")\n    (set_attr \"length\" \"32\")])\n \n (define_insn \"*ldmsi4\"\n@@ -10571,7 +10177,9 @@\n   \"TARGET_STRING && XVECLEN (operands[0], 0) == 4\"\n   \"*\n { return rs6000_output_load_multiple (operands); }\"\n-  [(set_attr \"type\" \"load_ux\")\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes\")\n    (set_attr \"length\" \"32\")])\n \n (define_insn \"*ldmsi3\"\n@@ -10585,7 +10193,9 @@\n   \"TARGET_STRING && XVECLEN (operands[0], 0) == 3\"\n   \"*\n { return rs6000_output_load_multiple (operands); }\"\n-  [(set_attr \"type\" \"load_ux\")\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes\")\n    (set_attr \"length\" \"32\")])\n \n (define_expand \"store_multiple\"\n@@ -10653,7 +10263,9 @@\n \t  (match_operand:SI 10 \"gpc_reg_operand\" \"r\"))])]\n   \"TARGET_STRING && XVECLEN (operands[0], 0) == 9\"\n   \"stswi %2,%1,%O0\"\n-  [(set_attr \"type\" \"store_ux\")\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes\")\n    (set_attr \"cell_micro\" \"always\")])\n \n (define_insn \"*stmsi7\"\n@@ -10675,7 +10287,9 @@\n \t  (match_operand:SI 9 \"gpc_reg_operand\" \"r\"))])]\n   \"TARGET_STRING && XVECLEN (operands[0], 0) == 8\"\n   \"stswi %2,%1,%O0\"\n-  [(set_attr \"type\" \"store_ux\")\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes\")\n    (set_attr \"cell_micro\" \"always\")])\n \n (define_insn \"*stmsi6\"\n@@ -10695,7 +10309,9 @@\n \t  (match_operand:SI 8 \"gpc_reg_operand\" \"r\"))])]\n   \"TARGET_STRING && XVECLEN (operands[0], 0) == 7\"\n   \"stswi %2,%1,%O0\"\n-  [(set_attr \"type\" \"store_ux\")\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes\")\n    (set_attr \"cell_micro\" \"always\")])\n \n (define_insn \"*stmsi5\"\n@@ -10713,7 +10329,9 @@\n \t  (match_operand:SI 7 \"gpc_reg_operand\" \"r\"))])]\n   \"TARGET_STRING && XVECLEN (operands[0], 0) == 6\"\n   \"stswi %2,%1,%O0\"\n-  [(set_attr \"type\" \"store_ux\")\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes\")\n    (set_attr \"cell_micro\" \"always\")])\n \n (define_insn \"*stmsi4\"\n@@ -10729,7 +10347,9 @@\n \t  (match_operand:SI 6 \"gpc_reg_operand\" \"r\"))])]\n   \"TARGET_STRING && XVECLEN (operands[0], 0) == 5\"\n   \"stswi %2,%1,%O0\"\n-  [(set_attr \"type\" \"store_ux\")\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes\")\n    (set_attr \"cell_micro\" \"always\")])\n \n (define_insn \"*stmsi3\"\n@@ -10743,7 +10363,9 @@\n \t  (match_operand:SI 5 \"gpc_reg_operand\" \"r\"))])]\n   \"TARGET_STRING && XVECLEN (operands[0], 0) == 4\"\n   \"stswi %2,%1,%O0\"\n-  [(set_attr \"type\" \"store_ux\")\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes\")\n    (set_attr \"cell_micro\" \"always\")])\n \f\n (define_expand \"setmemsi\"\n@@ -10825,7 +10447,9 @@\n    && (REGNO (operands[1]) < 5 || REGNO (operands[1]) > 12)\n    && REGNO (operands[4]) == 5\"\n   \"lswi %4,%1,%2\\;stswi %4,%0,%2\"\n-  [(set_attr \"type\" \"store_ux\")\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes\")\n    (set_attr \"cell_micro\" \"always\")\n    (set_attr \"length\" \"8\")])\n \n@@ -10865,7 +10489,9 @@\n    && (REGNO (operands[1]) < 5 || REGNO (operands[1]) > 10)\n    && REGNO (operands[4]) == 5\"\n   \"lswi %4,%1,%2\\;stswi %4,%0,%2\"\n-  [(set_attr \"type\" \"store_ux\")\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes\")\n    (set_attr \"cell_micro\" \"always\")\n    (set_attr \"length\" \"8\")])\n \n@@ -10901,7 +10527,9 @@\n    && (REGNO (operands[1]) < 5 || REGNO (operands[1]) > 8)\n    && REGNO (operands[4]) == 5\"\n   \"lswi %4,%1,%2\\;stswi %4,%0,%2\"\n-  [(set_attr \"type\" \"store_ux\")\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes\")\n    (set_attr \"cell_micro\" \"always\")\n    (set_attr \"length\" \"8\")])\n \n@@ -10926,7 +10554,9 @@\n   \"TARGET_STRING && ! TARGET_POWERPC64\n    && INTVAL (operands[2]) > 4 && INTVAL (operands[2]) <= 8\"\n   \"lswi %4,%1,%2\\;stswi %4,%0,%2\"\n-  [(set_attr \"type\" \"store_ux\")\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes\")\n    (set_attr \"cell_micro\" \"always\")\n    (set_attr \"length\" \"8\")])\n \n@@ -10950,7 +10580,9 @@\n    (clobber (match_scratch:SI 5 \"=X\"))]\n   \"TARGET_STRING && INTVAL (operands[2]) > 0 && INTVAL (operands[2]) <= 4\"\n   \"lswi %4,%1,%2\\;stswi %4,%0,%2\"\n-  [(set_attr \"type\" \"store_ux\")\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes\")\n    (set_attr \"cell_micro\" \"always\")\n    (set_attr \"length\" \"8\")])\n \f\n@@ -10975,7 +10607,9 @@\n   \"@\n    ldux %3,%0,%2\n    ldu %3,%2(%0)\"\n-  [(set_attr \"type\" \"load_ux,load_u\")])\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes,no\")])\n \n (define_insn \"movdi_<mode>_update\"\n   [(set (mem:DI (plus:P (match_operand:P 1 \"gpc_reg_operand\" \"0,0\")\n@@ -10991,7 +10625,9 @@\n   \"@\n    stdux %3,%0,%2\n    stdu %3,%2(%0)\"\n-  [(set_attr \"type\" \"store_ux,store_u\")])\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes,no\")])\n \n ;; This pattern is only conditional on TARGET_POWERPC64, as it is\n ;; needed for stack allocation, even if the user passes -mno-update.\n@@ -11005,7 +10641,9 @@\n   \"@\n    stdux %3,%0,%2\n    stdu %3,%2(%0)\"\n-  [(set_attr \"type\" \"store_ux,store_u\")])\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes,no\")])\n \n (define_insn \"*movsi_update1\"\n   [(set (match_operand:SI 3 \"gpc_reg_operand\" \"=r,r\")\n@@ -11019,7 +10657,9 @@\n   \"@\n    lwzux %3,%0,%2\n    lwzu %3,%2(%0)\"\n-  [(set_attr \"type\" \"load_ux,load_u\")])\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes,no\")])\n \n (define_insn \"*movsi_update2\"\n   [(set (match_operand:DI 3 \"gpc_reg_operand\" \"=r\")\n@@ -11031,7 +10671,10 @@\n   \"TARGET_POWERPC64 && rs6000_gen_cell_microcode\n    && !avoiding_indexed_address_p (DImode)\"\n   \"lwaux %3,%0,%2\"\n-  [(set_attr \"type\" \"load_ext_ux\")])\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"sign_extend\" \"yes\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes\")])\n \n (define_insn \"movsi_update\"\n   [(set (mem:SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\")\n@@ -11047,7 +10690,9 @@\n   \"@\n    stwux %3,%0,%2\n    stwu %3,%2(%0)\"\n-  [(set_attr \"type\" \"store_ux,store_u\")])\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes,no\")])\n \n ;; This is an unconditional pattern; needed for stack allocation, even\n ;; if the user passes -mno-update.\n@@ -11061,7 +10706,9 @@\n   \"@\n    stwux %3,%0,%2\n    stwu %3,%2(%0)\"\n-  [(set_attr \"type\" \"store_ux,store_u\")])\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes,no\")])\n \n (define_insn \"*movhi_update1\"\n   [(set (match_operand:HI 3 \"gpc_reg_operand\" \"=r,r\")\n@@ -11075,7 +10722,9 @@\n   \"@\n    lhzux %3,%0,%2\n    lhzu %3,%2(%0)\"\n-  [(set_attr \"type\" \"load_ux,load_u\")])\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes,no\")])\n \n (define_insn \"*movhi_update2\"\n   [(set (match_operand:SI 3 \"gpc_reg_operand\" \"=r,r\")\n@@ -11090,7 +10739,9 @@\n   \"@\n    lhzux %3,%0,%2\n    lhzu %3,%2(%0)\"\n-  [(set_attr \"type\" \"load_ux,load_u\")])\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes,no\")])\n \n (define_insn \"*movhi_update3\"\n   [(set (match_operand:SI 3 \"gpc_reg_operand\" \"=r,r\")\n@@ -11105,7 +10756,10 @@\n   \"@\n    lhaux %3,%0,%2\n    lhau %3,%2(%0)\"\n-  [(set_attr \"type\" \"load_ext_ux,load_ext_u\")])\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"sign_extend\" \"yes\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes,no\")])\n \n (define_insn \"*movhi_update4\"\n   [(set (mem:HI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\")\n@@ -11119,7 +10773,9 @@\n   \"@\n    sthux %3,%0,%2\n    sthu %3,%2(%0)\"\n-  [(set_attr \"type\" \"store_ux,store_u\")])\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes,no\")])\n \n (define_insn \"*movqi_update1\"\n   [(set (match_operand:QI 3 \"gpc_reg_operand\" \"=r,r\")\n@@ -11133,7 +10789,9 @@\n   \"@\n    lbzux %3,%0,%2\n    lbzu %3,%2(%0)\"\n-  [(set_attr \"type\" \"load_ux,load_u\")])\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes,no\")])\n \n (define_insn \"*movqi_update2\"\n   [(set (match_operand:SI 3 \"gpc_reg_operand\" \"=r,r\")\n@@ -11148,7 +10806,9 @@\n   \"@\n    lbzux %3,%0,%2\n    lbzu %3,%2(%0)\"\n-  [(set_attr \"type\" \"load_ux,load_u\")])\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes,no\")])\n \n (define_insn \"*movqi_update3\"\n   [(set (mem:QI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\")\n@@ -11162,7 +10822,9 @@\n   \"@\n    stbux %3,%0,%2\n    stbu %3,%2(%0)\"\n-  [(set_attr \"type\" \"store_ux,store_u\")])\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes,no\")])\n \n (define_insn \"*movsf_update1\"\n   [(set (match_operand:SF 3 \"gpc_reg_operand\" \"=f,f\")\n@@ -11176,7 +10838,9 @@\n   \"@\n    lfsux %3,%0,%2\n    lfsu %3,%2(%0)\"\n-  [(set_attr \"type\" \"fpload_ux,fpload_u\")])\n+  [(set_attr \"type\" \"fpload\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes,no\")])\n \n (define_insn \"*movsf_update2\"\n   [(set (mem:SF (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\")\n@@ -11190,7 +10854,9 @@\n   \"@\n    stfsux %3,%0,%2\n    stfsu %3,%2(%0)\"\n-  [(set_attr \"type\" \"fpstore_ux,fpstore_u\")])\n+  [(set_attr \"type\" \"fpstore\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes,no\")])\n \n (define_insn \"*movsf_update3\"\n   [(set (match_operand:SF 3 \"gpc_reg_operand\" \"=r,r\")\n@@ -11204,7 +10870,9 @@\n   \"@\n    lwzux %3,%0,%2\n    lwzu %3,%2(%0)\"\n-  [(set_attr \"type\" \"load_ux,load_u\")])\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes,no\")])\n \n (define_insn \"*movsf_update4\"\n   [(set (mem:SF (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\")\n@@ -11218,7 +10886,9 @@\n   \"@\n    stwux %3,%0,%2\n    stwu %3,%2(%0)\"\n-  [(set_attr \"type\" \"store_ux,store_u\")])\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes,no\")])\n \n (define_insn \"*movdf_update1\"\n   [(set (match_operand:DF 3 \"gpc_reg_operand\" \"=d,d\")\n@@ -11232,7 +10902,9 @@\n   \"@\n    lfdux %3,%0,%2\n    lfdu %3,%2(%0)\"\n-  [(set_attr \"type\" \"fpload_ux,fpload_u\")])\n+  [(set_attr \"type\" \"fpload\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes,no\")])\n \n (define_insn \"*movdf_update2\"\n   [(set (mem:DF (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\")\n@@ -11246,7 +10918,9 @@\n   \"@\n    stfdux %3,%0,%2\n    stfdu %3,%2(%0)\"\n-  [(set_attr \"type\" \"fpstore_ux,fpstore_u\")])\n+  [(set_attr \"type\" \"fpstore\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes,no\")])\n \n \n ;; After inserting conditional returns we can sometimes have\n@@ -11916,7 +11590,9 @@\n   operands[2] = gen_rtx_REG (Pmode, 2);\n   return \\\"lwz %0,%1(%2)\\\";\n }\"\n-  [(set_attr \"type\" \"load\")])\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"update\" \"no\")\n+   (set_attr \"indexed\" \"no\")])\n \n (define_insn \"load_toc_aix_di\"\n   [(parallel [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n@@ -11938,7 +11614,9 @@\n   operands[2] = gen_rtx_REG (Pmode, 2);\n   return \\\"ld %0,%1(%2)\\\";\n }\"\n-  [(set_attr \"type\" \"load\")])\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"update\" \"no\")\n+   (set_attr \"indexed\" \"no\")])\n \n (define_insn \"load_toc_v4_pic_si\"\n   [(set (reg:SI LR_REGNO)\n@@ -12914,14 +12592,15 @@\n   operands[1] = gen_rtx_REG (Pmode, 0);\n   return \"st<wd>%U0%X0 %1,%0\";\n }\n-  [(set (attr \"type\")\n-      (if_then_else\n-\t(match_test \"update_indexed_address_mem (operands[0], VOIDmode)\")\n-\t(const_string \"store_ux\")\n-\t(if_then_else\n-\t  (match_test \"update_address_mem (operands[0], VOIDmode)\")\n-\t  (const_string \"store_u\")\n-\t  (const_string \"store\"))))\n+  [(set_attr \"type\" \"store\")\n+   (set (attr \"update\")\n+\t(if_then_else (match_operand 0 \"update_address_mem\")\n+\t\t      (const_string \"yes\")\n+\t\t      (const_string \"no\")))\n+   (set (attr \"indexed\")\n+\t(if_then_else (match_operand 0 \"indexed_address_mem\")\n+\t\t      (const_string \"yes\")\n+\t\t      (const_string \"no\")))\n    (set_attr \"length\" \"4\")])\n \n (define_insn \"probe_stack_range<P:mode>\"\n@@ -15118,7 +14797,9 @@\n        \t\t\t (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))])]\n   \"TARGET_MULTIPLE\"\n   \"stmw %2,%1\"\n-  [(set_attr \"type\" \"store_ux\")])\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes\")])\n \n ; The following comment applies to:\n ;     save_gpregs_*\n@@ -15277,7 +14958,9 @@\n        \t\t\t (match_operand:SI 2 \"memory_operand\" \"m\"))])]\n   \"TARGET_MULTIPLE\"\n   \"lmw %1,%2\"\n-  [(set_attr \"type\" \"load_ux\")\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"update\" \"yes\")\n+   (set_attr \"indexed\" \"yes\")\n    (set_attr \"cell_micro\" \"always\")])\n \n (define_insn \"*return_internal_<mode>\""}, {"sha": "977ed658f44daffcffaf979451ebb4ec18e2870b", "filename": "gcc/config/rs6000/rs64.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Frs64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Frs64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs64.md?ref=d839f53b7dfd86250420bce15382c98cbd43b4ec", "patch": "@@ -26,17 +26,17 @@\n ;; RS64a 64-bit IU, LSU, FPU, BPU\n \n (define_insn_reservation \"rs64a-load\" 2\n-  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u\")\n+  (and (eq_attr \"type\" \"load\")\n        (eq_attr \"cpu\" \"rs64a\"))\n   \"lsu_rs64\")\n \n (define_insn_reservation \"rs64a-store\" 2\n-  (and (eq_attr \"type\" \"store,store_ux,store_u,fpstore,fpstore_ux,fpstore_u\")\n+  (and (eq_attr \"type\" \"store,fpstore\")\n        (eq_attr \"cpu\" \"rs64a\"))\n   \"lsu_rs64\")\n \n (define_insn_reservation \"rs64a-fpload\" 3\n-  (and (eq_attr \"type\" \"fpload,fpload_ux,fpload_u\")\n+  (and (eq_attr \"type\" \"fpload\")\n        (eq_attr \"cpu\" \"rs64a\"))\n   \"lsu_rs64\")\n "}, {"sha": "1adbee58fff6ffbaf582bc05b1003c7bc187bab8", "filename": "gcc/config/rs6000/titan.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Ftitan.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Ftitan.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ftitan.md?ref=d839f53b7dfd86250420bce15382c98cbd43b4ec", "patch": "@@ -95,13 +95,12 @@\n \n ;; Loads.\n (define_insn_reservation \"titan_lsu_load\" 3\n-  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u,\\\n-\t\t\tload_l,sync\")\n+  (and (eq_attr \"type\" \"load,load_l,sync\")\n        (eq_attr \"cpu\" \"titan\"))\n   \"titan_issue,titan_lsu_sh\")\n \n (define_insn_reservation \"titan_lsu_fpload\" 12\n-  (and (eq_attr \"type\" \"fpload,fpload_ux,fpload_u\")\n+  (and (eq_attr \"type\" \"fpload\")\n        (eq_attr \"cpu\" \"titan\"))\n   \"titan_issue,titan_lsu_sh\")\n \n@@ -115,12 +114,12 @@\n \n ;; Stores.\n (define_insn_reservation \"titan_lsu_store\" 12\n-  (and (eq_attr \"type\" \"store,store_ux,store_u,store_c\")\n+  (and (eq_attr \"type\" \"store,store_c\")\n        (eq_attr \"cpu\" \"titan\"))\n   \"titan_issue,titan_lsu_sh\")\n \n (define_insn_reservation \"titan_lsu_fpstore\" 12\n-  (and (eq_attr \"type\" \"fpstore,fpstore_ux,fpstore_u\")\n+  (and (eq_attr \"type\" \"fpstore\")\n        (eq_attr \"cpu\" \"titan\"))\n   \"titan_issue,titan_lsu_sh\")\n "}, {"sha": "cf430bb5387b35fcd9668515ce843373db1aefd0", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 5, "deletions": 28, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=d839f53b7dfd86250420bce15382c98cbd43b4ec", "patch": "@@ -657,8 +657,9 @@\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"type\" \"vecstore,vecload,vecsimple,vecsimple,vecsimple,vecstore,vecload,store_ux,store_ux,load_ux,load_ux, *, *\")\n-   (set_attr \"length\" \"     4,      4,        4,       4,         8,       4,      4,      16,      16,     16,     16,16,16\")\n+  [(set_attr \"type\" \"vecstore,vecload,vecsimple,vecsimple,vecsimple,vecstore,vecload,store,store,load,load, *, *\")\n+   (set_attr \"update\" \"     *,      *,        *,       *,         *,       *,      *,  yes,  yes, yes, yes, *, *\")\n+   (set_attr \"length\" \"     4,      4,        4,       4,         8,       4,      4,   16,   16,  16,  16,16,16\")\n    (set (attr \"cell_micro\") (if_then_else (match_test \"TARGET_STRING\")\n    \t\t\t                  (const_string \"always\")\n \t\t\t\t\t  (const_string \"conditional\")))])\n@@ -1613,22 +1614,7 @@\n    lfd%U1%X1 %0,%1\n    lxsd%U1x %x0,%y1\n    ld%U1%X1 %0,%1\"\n-  [(set_attr_alternative \"type\"\n-      [(if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n-\t (const_string \"fpload_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[1], VOIDmode)\")\n-\t   (const_string \"fpload_u\")\n-\t   (const_string \"fpload\")))\n-       (const_string \"fpload\")\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n-\t (const_string \"load_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[1], VOIDmode)\")\n-\t   (const_string \"load_u\")\n-\t   (const_string \"load\")))])\n+  [(set_attr \"type\" \"fpload,fpload,load\")\n    (set_attr \"length\" \"4\")])\n \n ;; Optimize storing a single scalar element that is the right location to\n@@ -1643,16 +1629,7 @@\n    stfd%U0%X0 %1,%0\n    stxsd%U0x %x1,%y0\n    stxsd%U0x %x1,%y0\"\n-  [(set_attr_alternative \"type\"\n-      [(if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[0], VOIDmode)\")\n-\t (const_string \"fpstore_ux\")\n-\t (if_then_else\n-\t   (match_test \"update_address_mem (operands[0], VOIDmode)\")\n-\t   (const_string \"fpstore_u\")\n-\t   (const_string \"fpstore\")))\n-       (const_string \"fpstore\")\n-       (const_string \"fpstore\")])\n+  [(set_attr \"type\" \"fpstore\")\n    (set_attr \"length\" \"4\")])\n \n ;; Extract a SF element from V4SF"}, {"sha": "c875df3a24834843ceb10155179449b73257cdf1", "filename": "gcc/config/rs6000/xfpu.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fxfpu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d839f53b7dfd86250420bce15382c98cbd43b4ec/gcc%2Fconfig%2Frs6000%2Fxfpu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxfpu.md?ref=d839f53b7dfd86250420bce15382c98cbd43b4ec", "patch": "@@ -118,12 +118,12 @@\n   \"Xfpu_issue*2,Xfpu_mul,nothing*7,Xfpu_addsub\")\n \n (define_insn_reservation \"fp-load\" 10                   ;; FIXME. Is double/single precision the same ?\n-  (and (eq_attr \"type\" \"fpload, fpload_ux, fpload_u\")\n+  (and (eq_attr \"type\" \"fpload\")\n        (eq_attr \"cpu\" \"ppc405\"))\n   \"Xfpu_issue*10\")\n \n-(define_insn_reservation \"fp-store\" 4 \n-  (and (eq_attr \"type\" \"fpstore, fpstore_ux, fpstore_u\")\n+(define_insn_reservation \"fp-store\" 4\n+  (and (eq_attr \"type\" \"fpstore\")\n        (eq_attr \"cpu\" \"ppc405\"))\n   \"Xfpu_issue*4\")\n "}]}