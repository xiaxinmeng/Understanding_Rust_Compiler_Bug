{"sha": "5f81043f512950a722e1e71082afb05ed6c90f86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY4MTA0M2Y1MTI5NTBhNzIyZTFlNzEwODJhZmIwNWVkNmM5MGY4Ng==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-09-15T21:43:55Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-09-15T21:43:55Z"}, "message": "(decrement_and_branchsi and related insns): Don't use a \"2\" to select a...\n\n(decrement_and_branchsi and related insns): Don't use a \"2\" to select\na register preference for operand 1 if operand 2 hasn't been seen yet.\nAdd appropriate clobbers in decrement_and_branchsi.\nAdd patterns where the pc/label_ref are interchanged.\n\nFrom-SVN: r10363", "tree": {"sha": "6c89be67c1586f5d338609d77549a467e53b2ff8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c89be67c1586f5d338609d77549a467e53b2ff8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f81043f512950a722e1e71082afb05ed6c90f86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f81043f512950a722e1e71082afb05ed6c90f86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f81043f512950a722e1e71082afb05ed6c90f86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f81043f512950a722e1e71082afb05ed6c90f86/comments", "author": null, "committer": null, "parents": [{"sha": "45d9a5c65defa61b3aa35a020979ed11a42d823d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45d9a5c65defa61b3aa35a020979ed11a42d823d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45d9a5c65defa61b3aa35a020979ed11a42d823d"}], "stats": {"total": 132, "additions": 113, "deletions": 19}, "files": [{"sha": "55c0273cc6886e81e5159d6a6f5d0ed86a2a0946", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 113, "deletions": 19, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f81043f512950a722e1e71082afb05ed6c90f86/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f81043f512950a722e1e71082afb05ed6c90f86/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=5f81043f512950a722e1e71082afb05ed6c90f86", "patch": "@@ -7265,25 +7265,33 @@\n ;; so loop.c knows what to generate.\n \n (define_expand \"decrement_and_branchsi\"\n-  [(parallel [(set (pc) (if_then_else (ne (match_operand:SI 0 \"register_operand\" \"c\")\n+  [(parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t\t   (plus:SI (match_dup 0)\n+\t\t\t    (const_int -1)))\n+\t      (set (pc) (if_then_else (ne (match_dup 0)\n \t\t\t\t\t  (const_int 1))\n \t\t\t\t      (label_ref (match_operand 1 \"\" \"\"))\n \t\t\t\t      (pc)))\n-\t      (set (match_dup 0) (plus:SI (match_dup 0) (const_int -1)))])]\n+\t      (clobber (match_scratch:CC 2 \"\"))\n+\t      (clobber (match_scratch:SI 3 \"\"))])]\n   \"\"\n   \"\")\n \n ;; We need to be able to do this for any operand, including MEM, or we\n ;; will cause reload to blow up since we don't allow output reloads on\n ;; JUMP_INSNs.\n+;; In order that the length attribute is calculated correctly, the\n+;; label MUST be operand 0.\n+\n (define_insn \"\"\n   [(set (pc)\n-\t(if_then_else (ne (match_operand:SI 1 \"register_operand\" \"2,*r,*r\")\n+\t(if_then_else (ne (match_operand:SI 1 \"register_operand\" \"c,*r,*r\")\n \t\t\t  (const_int 1))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-   (set (match_operand:SI 2 \"register_operand\" \"=c,*r,m*q*c*l\")\n-\t(plus:SI (match_dup 1) (const_int -1)))\n+   (set (match_operand:SI 2 \"register_operand\" \"=1,*r,m*q*c*l\")\n+\t(plus:SI (match_dup 1)\n+\t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x\"))\n    (clobber (match_scratch:SI 4 \"=X,X,r\"))]\n   \"\"\n@@ -7299,15 +7307,40 @@\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"*,12,16\")])\n \n+(define_insn \"\"\n+  [(set (pc)\n+\t(if_then_else (ne (match_operand:SI 1 \"register_operand\" \"c,*r,*r\")\n+\t\t\t  (const_int 1))\n+\t\t      (pc)\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))))\n+   (set (match_operand:SI 2 \"register_operand\" \"=1,*r,m*q*c*l\")\n+\t(plus:SI (match_dup 1)\n+\t\t (const_int -1)))\n+   (clobber (match_scratch:CC 3 \"=X,&x,&x\"))\n+   (clobber (match_scratch:SI 4 \"=X,X,r\"))]\n+  \"\"\n+  \"*\n+{\n+  if (which_alternative != 0)\n+    return \\\"#\\\";\n+  else if (get_attr_length (insn) == 8)\n+    return \\\"bdz %l0\\\";\n+  else\n+    return \\\"{bdn|bdnz} $+8\\;b %l0\\\";\n+}\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"*,12,16\")])\n+\n ;; Similar, but we can use GE since we have a REG_NONNEG.\n (define_insn \"\"\n   [(set (pc)\n-\t(if_then_else (ge (match_operand:SI 1 \"register_operand\" \"2,*r,*r\")\n+\t(if_then_else (ge (match_operand:SI 1 \"register_operand\" \"c,*r,*r\")\n \t\t\t  (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-   (set (match_operand:SI 2 \"register_operand\" \"=c,*r,m*q*c*l\")\n-\t(plus:SI (match_dup 1) (const_int -1)))\n+   (set (match_operand:SI 2 \"register_operand\" \"=1,*r,m*q*c*l\")\n+\t(plus:SI (match_dup 1)\n+\t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&X\"))\n    (clobber (match_scratch:SI 4 \"=X,X,r\"))]\n   \"find_reg_note (insn, REG_NONNEG, 0)\"\n@@ -7325,12 +7358,37 @@\n \n (define_insn \"\"\n   [(set (pc)\n-\t(if_then_else (eq (match_operand:SI 1 \"register_operand\" \"2,*r,*r\")\n+\t(if_then_else (ge (match_operand:SI 1 \"register_operand\" \"c,*r,*r\")\n+\t\t\t  (const_int 0))\n+\t\t      (pc)\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))))\n+   (set (match_operand:SI 2 \"register_operand\" \"=1,*r,m*q*c*l\")\n+\t(plus:SI (match_dup 1)\n+\t\t (const_int -1)))\n+   (clobber (match_scratch:CC 3 \"=X,&x,&X\"))\n+   (clobber (match_scratch:SI 4 \"=X,X,r\"))]\n+  \"find_reg_note (insn, REG_NONNEG, 0)\"\n+  \"*\n+{\n+  if (which_alternative != 0)\n+    return \\\"#\\\";\n+  else if (get_attr_length (insn) == 8)\n+    return \\\"bdz %l0\\\";\n+  else\n+    return \\\"{bdn|bdnz} $+8\\;b %l0\\\";\n+}\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"*,12,16\")])\n+\n+(define_insn \"\"\n+  [(set (pc)\n+\t(if_then_else (eq (match_operand:SI 1 \"register_operand\" \"c,*r,*r\")\n \t\t\t  (const_int 1))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-   (set (match_operand:SI 2 \"register_operand\" \"=c,*r,m*q*c*l\")\n-\t(plus:SI (match_dup 1) (const_int -1)))\n+   (set (match_operand:SI 2 \"register_operand\" \"=1,*r,m*q*c*l\")\n+\t(plus:SI (match_dup 1)\n+\t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x\"))\n    (clobber (match_scratch:SI 4 \"=X,X,r\"))]\n   \"\"\n@@ -7346,6 +7404,30 @@\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"*,12,16\")])\n \n+(define_insn \"\"\n+  [(set (pc)\n+\t(if_then_else (eq (match_operand:SI 1 \"register_operand\" \"c,*r,*r\")\n+\t\t\t  (const_int 1))\n+\t\t      (pc)\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))))\n+   (set (match_operand:SI 2 \"register_operand\" \"=1,*r,m*q*c*l\")\n+\t(plus:SI (match_dup 1)\n+\t\t (const_int -1)))\n+   (clobber (match_scratch:CC 3 \"=X,&x,&x\"))\n+   (clobber (match_scratch:SI 4 \"=X,X,r\"))]\n+  \"\"\n+  \"*\n+{\n+  if (which_alternative != 0)\n+    return \\\"#\\\";\n+  else if (get_attr_length (insn) == 8)\n+    return \\\"{bdn|bdnz} %l0\\\";\n+  else\n+    return \\\"bdz $+8\\;b %l0\\\";\n+}\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"*,12,16\")])\n+\n (define_split\n   [(set (pc)\n \t(if_then_else (match_operator 2 \"comparison_operator\"\n@@ -7354,15 +7436,21 @@\n \t\t      (match_operand 5 \"\" \"\")\n \t\t      (match_operand 6 \"\" \"\")))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(plus:SI (match_dup 1) (const_int -1)))\n+\t(plus:SI (match_dup 1)\n+\t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"\"))\n    (clobber (match_scratch:SI 4 \"\"))]\n   \"reload_completed\"\n   [(parallel [(set (match_dup 3)\n-\t\t   (compare:CC (plus:SI (match_dup 1) (const_int -1))\n+\t\t   (compare:CC (plus:SI (match_dup 1)\n+\t\t\t\t\t(const_int -1))\n \t\t\t       (const_int 0)))\n-\t      (set (match_dup 0) (plus:SI (match_dup 1) (const_int -1)))])\n-   (set (pc) (if_then_else (match_dup 7) (match_dup 5) (match_dup 6)))]\n+\t      (set (match_dup 0)\n+\t\t   (plus:SI (match_dup 1)\n+\t\t\t    (const_int -1)))])\n+   (set (pc) (if_then_else (match_dup 7)\n+\t\t\t   (match_dup 5)\n+\t\t\t   (match_dup 6)))]\n   \"\n { operands[7] = gen_rtx (GET_CODE (operands[2]), VOIDmode, operands[3],\n \t\t\t const0_rtx); }\")\n@@ -7380,11 +7468,17 @@\n    (clobber (match_scratch:SI 4 \"\"))]\n   \"reload_completed && ! gpc_reg_operand (operands[0], SImode)\"\n   [(parallel [(set (match_dup 3)\n-\t\t   (compare:CC (plus:SI (match_dup 1) (const_int -1))\n+\t\t   (compare:CC (plus:SI (match_dup 1)\n+\t\t\t\t\t(const_int -1))\n \t\t\t       (const_int 0)))\n-\t      (set (match_dup 4) (plus:SI (match_dup 1) (const_int -1)))])\n-   (set (match_dup 0) (match_dup 4))\n-   (set (pc) (if_then_else (match_dup 7) (match_dup 5) (match_dup 6)))]\n+\t      (set (match_dup 4)\n+\t\t   (plus:SI (match_dup 1)\n+\t\t\t    (const_int -1)))])\n+   (set (match_dup 0)\n+\t(match_dup 4))\n+   (set (pc) (if_then_else (match_dup 7)\n+\t\t\t   (match_dup 5)\n+\t\t\t   (match_dup 6)))]\n   \"\n { operands[7] = gen_rtx (GET_CODE (operands[2]), VOIDmode, operands[3],\n \t\t\t const0_rtx); }\")"}]}