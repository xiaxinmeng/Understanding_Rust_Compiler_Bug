{"sha": "b641f833bac3fe7e57f98f68f645aa63eb614d0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY0MWY4MzNiYWMzZmU3ZTU3Zjk4ZjY4ZjY0NWFhNjNlYjYxNGQwYQ==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2016-09-21T17:37:17Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2016-09-21T17:37:17Z"}, "message": "re PR libstdc++/77288 (Std::experimental::optional::operator= implementation is broken in gcc 6.1)\n\n\tPR libstdc++/77288\n\t* include/std/optional (__is_optional_impl, __is_optional): Remove.\n\t(__converts_from_optional, __assigns_from_optional): New.\n\t(optional(_Up&&)): Use is_same instead of __is_optional.\n\t(optional(const optional<_Up>&)): Constrain with\n\t__converts_from_optional.\n\t(optional(optional<_Up>&&)): Likewise.\n\t(operator=(_Up&&)): Use is_same instead of __is_optional, check\n\tis_same and is_scalar.\n\t(operator=(const optional<_Up>&)): Constrain with\n\t__converts_from_optional and __assigns_from_optional.\n\t(operator=(optional<_Up>&&)): Likewise.\n\t* testsuite/20_util/optional/77288.cc: New.\n\t* testsuite/20_util/optional/cons/value.cc: Adjust.\n\nFrom-SVN: r240324", "tree": {"sha": "ae2d2b476ed53a16d1938ed6aacf96d09b73395d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae2d2b476ed53a16d1938ed6aacf96d09b73395d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b641f833bac3fe7e57f98f68f645aa63eb614d0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b641f833bac3fe7e57f98f68f645aa63eb614d0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b641f833bac3fe7e57f98f68f645aa63eb614d0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b641f833bac3fe7e57f98f68f645aa63eb614d0a/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "557867852474743abd1e6b2ca678af8a8cf18b51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/557867852474743abd1e6b2ca678af8a8cf18b51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/557867852474743abd1e6b2ca678af8a8cf18b51"}], "stats": {"total": 497, "additions": 470, "deletions": 27}, "files": [{"sha": "7e7c3468c2abf312010ebfb91a89378a11901eaf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b641f833bac3fe7e57f98f68f645aa63eb614d0a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b641f833bac3fe7e57f98f68f645aa63eb614d0a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b641f833bac3fe7e57f98f68f645aa63eb614d0a", "patch": "@@ -1,3 +1,20 @@\n+2016-09-21  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tPR libstdc++/77288\n+\t* include/std/optional (__is_optional_impl, __is_optional): Remove.\n+\t(__converts_from_optional, __assigns_from_optional): New.\n+\t(optional(_Up&&)): Use is_same instead of __is_optional.\n+\t(optional(const optional<_Up>&)): Constrain with\n+\t__converts_from_optional.\n+\t(optional(optional<_Up>&&)): Likewise.\n+\t(operator=(_Up&&)): Use is_same instead of __is_optional, check\n+\tis_same and is_scalar.\n+\t(operator=(const optional<_Up>&)): Constrain with\n+\t__converts_from_optional and __assigns_from_optional.\n+\t(operator=(optional<_Up>&&)): Likewise.\n+\t* testsuite/20_util/optional/77288.cc: New.\n+\t* testsuite/20_util/optional/cons/value.cc: Adjust.\n+\n 2016-09-21  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tImplement LWG 2729 for tuple."}, {"sha": "efb0eb61e9d1707b0705a9fb736d70d467d39b09", "filename": "libstdc++-v3/include/std/optional", "status": "modified", "additions": 39, "deletions": 23, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b641f833bac3fe7e57f98f68f645aa63eb614d0a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b641f833bac3fe7e57f98f68f645aa63eb614d0a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional?ref=b641f833bac3fe7e57f98f68f645aa63eb614d0a", "patch": "@@ -423,19 +423,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n   class optional;\n \n-  template<typename>\n-    struct __is_optional_impl : false_type\n-    { };\n-\n-  template<typename _Tp>\n-  struct __is_optional_impl<optional<_Tp>> : true_type\n-    { };\n-\n-  template<typename _Tp>\n-    struct __is_optional\n-    : public __is_optional_impl<std::remove_cv_t<std::remove_reference_t<_Tp>>>\n-    { };\n-\n+  template<typename _Tp, typename _Up>\n+    using __converts_from_optional =\n+      __or_<is_constructible<_Tp, const optional<_Up>&>,\n+\t    is_constructible<_Tp, optional<_Up>&>,\n+\t    is_constructible<_Tp, const optional<_Up>&&>,\n+\t    is_constructible<_Tp, optional<_Up>&&>,\n+\t    is_convertible<const optional<_Up>&, _Tp>,\n+\t    is_convertible<optional<_Up>&, _Tp>,\n+\t    is_convertible<const optional<_Up>&&, _Tp>,\n+\t    is_convertible<optional<_Up>&&, _Tp>>;\n+\n+  template<typename _Tp, typename _Up>\n+    using __assigns_from_optional =\n+      __or_<is_assignable<_Tp&, const optional<_Up>&>,\n+\t    is_assignable<_Tp&, optional<_Up>&>,\n+\t    is_assignable<_Tp&, const optional<_Up>&&>,\n+\t    is_assignable<_Tp&, optional<_Up>&&>>;\n \n   /**\n     * @brief Class template for optional values.\n@@ -474,7 +478,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Converting constructors for engaged optionals.\n       template <typename _Up = _Tp,\n                 enable_if_t<__and_<\n-\t\t\t      __not_<__is_optional<decay_t<_Up>>>,\n+\t\t\t      __not_<is_same<optional<_Tp>, decay_t<_Up>>>,\n \t\t\t      is_constructible<_Tp, _Up&&>,\n \t\t\t      is_convertible<_Up&&, _Tp>\n \t\t\t      >::value, bool> = true>\n@@ -483,7 +487,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       template <typename _Up = _Tp,\n                 enable_if_t<__and_<\n-\t\t\t      __not_<__is_optional<decay_t<_Up>>>,\n+\t\t\t      __not_<is_same<optional<_Tp>, decay_t<_Up>>>,\n \t\t\t      is_constructible<_Tp, _Up&&>,\n \t\t\t      __not_<is_convertible<_Up&&, _Tp>>\n \t\t\t      >::value, bool> = false>\n@@ -494,7 +498,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                 enable_if_t<__and_<\n \t\t\t    __not_<is_same<_Tp, _Up>>,\n \t\t\t    is_constructible<_Tp, const _Up&>,\n-\t\t\t    is_convertible<const _Up&, _Tp>\n+\t\t\t    is_convertible<const _Up&, _Tp>,\n+\t\t\t    __not_<__converts_from_optional<_Tp, _Up>>\n \t\t\t    >::value, bool> = true>\n       constexpr optional(const optional<_Up>& __t)\n         : _Base(__t ? _Base(std::in_place, *__t) : _Base()) { }\n@@ -503,7 +508,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                  enable_if_t<__and_<\n \t\t\t       __not_<is_same<_Tp, _Up>>,\n \t\t\t       is_constructible<_Tp, const _Up&>,\n-\t\t\t       __not_<is_convertible<const _Up&, _Tp>>\n+\t\t\t       __not_<is_convertible<const _Up&, _Tp>>,\n+\t\t\t       __not_<__converts_from_optional<_Tp, _Up>>\n \t\t\t       >::value, bool> = false>\n       explicit constexpr optional(const optional<_Up>& __t)\n         : _Base(__t ? _Base(std::in_place, *__t) : _Base()) { }\n@@ -512,7 +518,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                 enable_if_t<__and_<\n \t\t\t      __not_<is_same<_Tp, _Up>>,\n \t\t\t      is_constructible<_Tp, _Up&&>,\n-\t\t\t      is_convertible<_Up&&, _Tp>\n+\t\t\t      is_convertible<_Up&&, _Tp>,\n+\t\t\t      __not_<__converts_from_optional<_Tp, _Up>>\n \t\t\t      >::value, bool> = true>\n       constexpr optional(optional<_Up>&& __t)\n         : _Base(__t ? _Base(std::in_place, std::move(*__t)) : _Base()) { }\n@@ -521,7 +528,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                 enable_if_t<__and_<\n \t\t\t    __not_<is_same<_Tp, _Up>>,\n \t\t\t    is_constructible<_Tp, _Up&&>,\n-\t\t\t    __not_<is_convertible<_Up&&, _Tp>>\n+\t\t\t    __not_<is_convertible<_Up&&, _Tp>>,\n+\t\t\t    __not_<__converts_from_optional<_Tp, _Up>>\n \t\t\t    >::value, bool> = false>\n       explicit constexpr optional(optional<_Up>&& __t)\n         : _Base(__t ? _Base(std::in_place, std::move(*__t)) : _Base()) { }\n@@ -550,8 +558,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       template<typename _Up = _Tp,\n                enable_if_t<__and_<\n-\t\t\t     __not_<__is_optional<decay_t<_Up>>>,\n+\t\t\t     __not_<is_same<optional<_Tp>, decay_t<_Up>>>,\n \t\t\t     is_constructible<_Tp, _Up>,\n+\t\t\t     __not_<__and_<is_scalar<_Tp>,\n+\t\t\t\t\t   is_same<_Tp, decay_t<_Up>>>>,\n \t\t\t     is_assignable<_Tp&, _Up>>::value,\n \t\t\t   bool> = true>\n         optional&\n@@ -568,8 +578,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Up,\n                enable_if_t<__and_<\n \t\t\t     __not_<is_same<_Tp, _Up>>,\n-\t\t\t     is_constructible<_Tp, _Up>,\n-\t\t\t     is_assignable<_Tp&, _Up>>::value,\n+\t\t\t     is_constructible<_Tp, const _Up&>,\n+\t\t\t     is_assignable<_Tp&, _Up>,\n+\t\t\t     __not_<__converts_from_optional<_Tp, _Up>>,\n+\t\t\t     __not_<__assigns_from_optional<_Tp, _Up>>\n+\t\t\t     >::value,\n \t\t\t   bool> = true>\n         optional&\n         operator=(const optional<_Up>& __u)\n@@ -592,7 +605,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       enable_if_t<__and_<\n \t\t\t     __not_<is_same<_Tp, _Up>>,\n \t\t\t     is_constructible<_Tp, _Up>,\n-\t\t\t     is_assignable<_Tp&, _Up>>::value,\n+\t\t\t     is_assignable<_Tp&, _Up>,\n+\t\t\t     __not_<__converts_from_optional<_Tp, _Up>>,\n+\t\t\t     __not_<__assigns_from_optional<_Tp, _Up>>\n+\t\t\t     >::value,\n \t\t\t   bool> = true>\n         optional&\n         operator=(optional<_Up>&& __u)"}, {"sha": "eafafb7163935d8b52d3d720bbd55c065fe3a760", "filename": "libstdc++-v3/testsuite/20_util/optional/77288.cc", "status": "added", "additions": 406, "deletions": 0, "changes": 406, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b641f833bac3fe7e57f98f68f645aa63eb614d0a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2F77288.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b641f833bac3fe7e57f98f68f645aa63eb614d0a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2F77288.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2F77288.cc?ref=b641f833bac3fe7e57f98f68f645aa63eb614d0a", "patch": "@@ -0,0 +1,406 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <exception>\n+#include <optional>\n+#include <any>\n+\n+using std::optional;\n+\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+    optional<optional<std::exception_ptr>> nested_element;\n+    optional<std::exception_ptr> element = {};\n+    nested_element = element;\n+    VERIFY(nested_element);\n+}\n+\n+template <class T>\n+struct service_result\n+{\n+  static optional<T> get_result()\n+  {\n+    T sr;\n+    return sr;\n+  }\n+\n+  static optional<T> get_result_with_cond(bool cond)\n+  {\n+    if (cond)\n+      return T{};\n+    return {};\n+  }\n+};\n+\n+void test02()\n+{\n+  VERIFY(service_result<int>::get_result());\n+  VERIFY(service_result<optional<int>>::get_result());\n+  VERIFY(service_result<int>::get_result_with_cond(true));\n+  VERIFY(service_result<optional<int>>::get_result_with_cond(true));\n+  VERIFY(!service_result<int>::get_result_with_cond(false));\n+  VERIFY(!service_result<optional<int>>::get_result_with_cond(false));\n+}\n+\n+struct Widget\n+{\n+  Widget(int) {}\n+  Widget(optional<int>) {}\n+};\n+\n+\n+void test03()\n+{\n+  optional<Widget> w;\n+  w = optional<int>();\n+  VERIFY(w);\n+  static_assert(!std::is_assignable_v<optional<Widget>&,\n+\t\toptional<short>>);;\n+  w = optional<optional<int>>();\n+  VERIFY(!w);\n+  static_assert(!std::is_assignable_v<optional<Widget>&,\n+\t\toptional<optional<short>>>);;\n+\n+  optional<Widget> w2{optional<int>()};\n+  VERIFY(w2);\n+  optional<Widget> w3  = optional<int>();\n+  VERIFY(w3);\n+  optional<Widget> w4{optional<short>()};\n+  VERIFY(w4);\n+  static_assert(!std::is_convertible_v<optional<short>&&, optional<Widget>>);\n+\n+  optional<Widget> w6{optional<optional<int>>()};\n+  VERIFY(!w6);\n+  optional<Widget> w7  = optional<optional<int>>();\n+  VERIFY(!w7);\n+  optional<Widget> w8{optional<optional<short>>()};\n+  VERIFY(!w8);\n+  static_assert(!std::is_convertible_v<optional<optional<short>>&&,\n+\t\toptional<Widget>>);\n+  optional<Widget> w10{optional<optional<short>>(10)};\n+  VERIFY(w10);\n+  optional<Widget> w11 = std::nullopt;\n+  VERIFY(!w11);\n+  optional<Widget> w12 = {};\n+  VERIFY(!w12);\n+  optional<Widget> w13{std::nullopt};\n+  VERIFY(!w13);\n+  optional<Widget> w14;\n+  w14 = {};\n+  VERIFY(!w14);\n+}\n+\n+struct Widget2\n+{\n+  Widget2(int) {}\n+  Widget2(optional<int>) {}\n+  Widget2& operator=(int) {return *this;}\n+  Widget2& operator=(optional<int>) {return *this;}\n+};\n+\n+void test04()\n+{\n+  optional<Widget2> w;\n+  w = optional<int>();\n+  VERIFY(w);\n+  w = optional<short>();\n+  VERIFY(w);\n+  w = optional<optional<int>>();\n+  VERIFY(!w);\n+  w = optional<optional<short>>();\n+  VERIFY(!w);\n+  w = optional<optional<short>>(10);\n+  optional<Widget2> w2 = std::nullopt;\n+  VERIFY(!w2);\n+  optional<Widget2> w3 = {};\n+  VERIFY(!w3);\n+  optional<Widget2> w4{std::nullopt};\n+  VERIFY(!w4);\n+  optional<Widget2> w5;\n+  w5 = {};\n+  VERIFY(!w5);\n+}\n+\n+struct Thingy\n+{\n+  Thingy(int) {}\n+  Thingy(Widget) {}\n+};\n+\n+void test05()\n+{\n+  optional<Thingy> ot;\n+\n+  static_assert(!std::is_assignable_v<optional<Thingy>&,\n+\t\toptional<int>>);\n+  static_assert(std::is_assignable_v<optional<Thingy>&,\n+\t\toptional<short>>);\n+  static_assert(!std::is_assignable_v<optional<Thingy>&,\n+\t\toptional<optional<int>>>);\n+  ot = optional<Widget>();\n+  VERIFY(!ot);\n+  optional<Thingy> ot2{optional<int>()};\n+  VERIFY(ot2);\n+  static_assert(!std::is_convertible_v<optional<int>&&,\n+\t\toptional<Thingy>>);\n+  optional<Thingy> ot3{optional<short>()};\n+  VERIFY(!ot3);\n+  optional<Thingy> ot4 = optional<short>();\n+  VERIFY(!ot4);\n+\n+  optional<Thingy> ot5{optional<optional<int>>()};\n+  VERIFY(!ot5);\n+  static_assert(!std::is_convertible_v<optional<optional<int>>&&,\n+\t\toptional<Thingy>>);\n+\n+  optional<Thingy> ot7{optional<Widget>()};\n+  VERIFY(!ot7);\n+  optional<Thingy> ot8 = optional<Widget>();\n+  VERIFY(!ot8);\n+  static_assert(!std::is_constructible_v<optional<Thingy>,\n+\t\toptional<optional<short>>>);\n+  static_assert(!std::is_convertible_v<optional<optional<short>>,\n+\t\toptional<Thingy>>);\n+  static_assert(!std::is_assignable_v<optional<Thingy>&,\n+\t\toptional<optional<short>>>);\n+  optional<Thingy> ot9 = std::nullopt;\n+  VERIFY(!ot9);\n+  optional<Thingy> ot10 = {};\n+  VERIFY(!ot10);\n+  optional<Thingy> ot11{std::nullopt};\n+  VERIFY(!ot11);\n+  optional<Thingy> ot12;\n+  ot12 = {};\n+  VERIFY(!ot12);\n+}\n+\n+struct RvalueConstructible\n+{\n+  RvalueConstructible(int) {}\n+  RvalueConstructible(optional<int>&&) {}\n+};\n+\n+void test06()\n+{\n+  optional<int> oi;\n+  optional<RvalueConstructible> ori;\n+  static_assert(!std::is_assignable_v<optional<RvalueConstructible>&,\n+\t\toptional<int>&>);\n+  ori = std::move(oi);\n+  VERIFY(ori);\n+\n+  optional<optional<int>> ooi;\n+  static_assert(!std::is_assignable_v<optional<RvalueConstructible>&,\n+\t\toptional<optional<int>>&>);\n+  ori = std::move(ooi);\n+  VERIFY(!ori);\n+\n+  static_assert(!std::is_constructible_v<optional<RvalueConstructible>,\n+\t\toptional<int>&>);\n+  static_assert(!std::is_convertible_v<optional<int>&,\n+\t\toptional<RvalueConstructible>>);\n+\n+  optional<RvalueConstructible> ori2(std::move(oi));\n+  VERIFY(ori2);\n+  optional<RvalueConstructible> ori3 = std::move(oi);\n+  VERIFY(ori3);\n+\n+  static_assert(!std::is_constructible_v<optional<RvalueConstructible>,\n+\t\toptional<optional<int>>&>);\n+  static_assert(!std::is_convertible_v<optional<optional<int>>&,\n+\t\toptional<RvalueConstructible>>);\n+  optional<RvalueConstructible> ori6(std::move(ooi));\n+  VERIFY(!ori6);\n+  optional<RvalueConstructible> ori7 = std::move(ooi);\n+  VERIFY(!ori7);\n+  optional<RvalueConstructible> ori8 = std::nullopt;\n+  VERIFY(!ori8);\n+  optional<RvalueConstructible> ori9 = {};\n+  VERIFY(!ori9);\n+  optional<RvalueConstructible> ori10{std::nullopt};\n+  VERIFY(!ori10);\n+  optional<RvalueConstructible> ori11;\n+  ori11 = {};\n+  VERIFY(!ori11);\n+}\n+\n+struct Thingy2\n+{\n+  Thingy2(int) {}\n+  explicit Thingy2(optional<int>) {}\n+  Thingy2(Widget) {}\n+};\n+\n+void test07()\n+{\n+  optional<Thingy2> ot{optional<int>{}};\n+  VERIFY(ot);\n+  static_assert(!std::is_convertible_v<optional<int>,\n+\t\toptional<Thingy2>>);\n+  optional<Thingy2> ot2{optional<short>{}};\n+  VERIFY(ot2);\n+  static_assert(!std::is_convertible_v<optional<short>,\n+\t\toptional<Thingy2>>);\n+  optional<Thingy2> ot3{optional<optional<int>>{}};\n+  VERIFY(!ot3);\n+  static_assert(!std::is_convertible_v<optional<optional<int>>,\n+\t\toptional<Thingy2>>);\n+  optional<Thingy2> ot4{optional<optional<short>>{}};\n+  VERIFY(!ot4);\n+  static_assert(!std::is_convertible_v<optional<optional<short>>,\n+\t\toptional<Thingy2>>);\n+\n+  optional<Thingy2> ot5{optional<Widget>{}};\n+  VERIFY(!ot5);\n+  optional<Thingy2> ot6 = optional<Widget>();\n+  VERIFY(!ot6);\n+\n+  static_assert(!std::is_assignable_v<optional<Thingy2>&,\n+\t\toptional<int>>);\n+  static_assert(!std::is_assignable_v<optional<Thingy2>&,\n+\t\toptional<short>>);\n+  static_assert(!std::is_assignable_v<optional<Thingy2>&,\n+\t\toptional<optional<int>>>);\n+  static_assert(!std::is_assignable_v<optional<Thingy2>&,\n+\t\toptional<optional<short>>>);\n+  optional<Thingy2> ot7;\n+  ot = optional<Widget>();\n+  VERIFY(!ot7);\n+  optional<Thingy2> ot8 = std::nullopt;\n+  VERIFY(!ot8);\n+  optional<Thingy2> ot9 = {};\n+  VERIFY(!ot9);\n+  optional<Thingy2> ot10{std::nullopt};\n+  VERIFY(!ot10);\n+  optional<Thingy2> ot11;\n+  ot11 = {};\n+  VERIFY(!ot11);\n+}\n+\n+struct Thingy3\n+{\n+  Thingy3(int) {}\n+  template<class... Args,\n+\t   std::enable_if_t<std::is_constructible_v<Widget, Args&&...>,\n+\t\t\t    bool> = true>\n+  explicit Thingy3(Args&&... args) {}\n+  Thingy3(Widget) {}\n+};\n+\n+void test08()\n+{\n+  optional<Thingy3> ot{optional<int>{}};\n+  VERIFY(ot);\n+  static_assert(!std::is_convertible_v<optional<int>,\n+\t\toptional<Thingy3>>);\n+  optional<Thingy3> ot2{optional<short>{}};\n+  VERIFY(ot2);\n+  static_assert(!std::is_convertible_v<optional<short>,\n+\t\toptional<Thingy3>>);\n+  optional<Thingy3> ot3{optional<optional<int>>{}};\n+  VERIFY(!ot3);\n+  static_assert(!std::is_convertible_v<optional<optional<int>>,\n+\t\toptional<Thingy3>>);\n+  optional<Thingy3> ot4{optional<optional<short>>{}};\n+  VERIFY(!ot4);\n+  static_assert(!std::is_convertible_v<optional<optional<short>>,\n+\t\toptional<Thingy3>>);\n+\n+  optional<Thingy3> ot5{optional<Widget>{}};\n+  VERIFY(!ot5);\n+  optional<Thingy3> ot6 = optional<Widget>();\n+  VERIFY(!ot6);\n+\n+  static_assert(!std::is_assignable_v<optional<Thingy3>&,\n+\t\toptional<int>>);\n+  static_assert(!std::is_assignable_v<optional<Thingy3>&,\n+\t\toptional<short>>);\n+  static_assert(!std::is_assignable_v<optional<Thingy3>&,\n+\t\toptional<optional<int>>>);\n+  static_assert(!std::is_assignable_v<optional<Thingy3>&,\n+\t\toptional<optional<short>>>);\n+  optional<Thingy3> ot7;\n+  ot = optional<Widget>();\n+  VERIFY(!ot7);\n+  optional<Thingy3> ot8 = std::nullopt;\n+  VERIFY(!ot8);\n+  optional<Thingy3> ot9 = {};\n+  VERIFY(!ot9);\n+  optional<Thingy3> ot10{std::nullopt};\n+  VERIFY(!ot10);\n+  optional<Thingy3> ot11;\n+  ot11 = {};\n+  VERIFY(!ot11);\n+}\n+\n+void test09()\n+{\n+  std::any a = 42;\n+  optional<std::any> oa2 = a;\n+  VERIFY(oa2);\n+  VERIFY(std::any_cast<int>(*oa2) == 42);\n+  optional<std::any> oa3 = oa2;\n+  VERIFY(oa3);\n+  VERIFY(std::any_cast<int>(*oa3) == 42);\n+  optional<std::any> oa4{oa2};\n+  VERIFY(oa4);\n+  VERIFY(std::any_cast<int>(*oa4) == 42);\n+  optional<std::any> oa5(oa2);\n+  VERIFY(oa5);\n+  VERIFY(std::any_cast<int>(*oa5) == 42);\n+  optional<std::any> oa6;\n+  VERIFY(!oa6);\n+  optional<std::any> oa7 = oa6;\n+  VERIFY(!oa7);\n+  optional<std::any> oa8{oa6};\n+  VERIFY(!oa8);\n+  optional<std::any> oa9(oa6);\n+  VERIFY(!oa9);\n+}\n+\n+void test10()\n+{\n+  struct X {};\n+  optional<int> oi(std::in_place);\n+  oi = {};\n+  VERIFY(oi.has_value() == false);\n+  optional<X> ot(std::in_place);\n+  ot = {};\n+  VERIFY(ot.has_value() == false);\n+  optional<int> oi2(std::in_place);\n+  short int si = 6;\n+  oi2 = si;\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+  test05();\n+  test06();\n+  test07();\n+  test08();\n+  test09();\n+  test10();\n+}"}, {"sha": "141293c1bc24a2b2efb5a1f0956b69f42186c340", "filename": "libstdc++-v3/testsuite/20_util/optional/cons/value.cc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b641f833bac3fe7e57f98f68f645aa63eb614d0a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fcons%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b641f833bac3fe7e57f98f68f645aa63eb614d0a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fcons%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fcons%2Fvalue.cc?ref=b641f833bac3fe7e57f98f68f645aa63eb614d0a", "patch": "@@ -256,17 +256,21 @@ int main()\n     ox4 = oi;\n   }\n   {\n+    std::optional<int> oi = std::optional<short>();\n+    VERIFY(!bool(oi));\n+    std::optional<std::string> os = std::optional<const char*>();\n+    VERIFY(!bool(os));\n     std::optional<std::optional<int>> ooi = std::optional<int>();\n-    VERIFY(!bool(ooi));\n+    VERIFY(bool(ooi));\n     ooi = std::optional<int>();\n-    VERIFY(!bool(ooi));\n+    VERIFY(bool(ooi));\n     ooi = std::optional<int>(42);\n     VERIFY(bool(ooi));\n     VERIFY(bool(*ooi));\n     std::optional<std::optional<int>> ooi2 = std::optional<short>();\n-    VERIFY(!bool(ooi2));\n+    VERIFY(bool(ooi2));\n     ooi2 = std::optional<short>();\n-    VERIFY(!bool(ooi2));\n+    VERIFY(bool(ooi2));\n     ooi2 = std::optional<short>(6);\n     VERIFY(bool(ooi2));\n     VERIFY(bool(*ooi2));"}]}