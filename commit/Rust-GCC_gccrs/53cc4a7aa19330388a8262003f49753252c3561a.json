{"sha": "53cc4a7aa19330388a8262003f49753252c3561a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNjYzRhN2FhMTkzMzAzODhhODI2MjAwM2Y0OTc1MzI1MmMzNTYxYQ==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2006-10-31T17:56:43Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-10-31T17:56:43Z"}, "message": "exp_intr.adb (Expand_Dispatching_Constructor_Call): Add missing run-time membership test to ensure that the constructed object...\n\n2006-10-31  Javier Miranda  <miranda@adacore.com>\n        \n\t* exp_intr.adb (Expand_Dispatching_Constructor_Call): Add missing\n\trun-time membership test to ensure that the constructed object\n\timplements the target abstract interface.\n\nFrom-SVN: r118267", "tree": {"sha": "1326c5796e6d6dae10635be578b788c8ffc7caf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1326c5796e6d6dae10635be578b788c8ffc7caf3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53cc4a7aa19330388a8262003f49753252c3561a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53cc4a7aa19330388a8262003f49753252c3561a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53cc4a7aa19330388a8262003f49753252c3561a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53cc4a7aa19330388a8262003f49753252c3561a/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c99e6969f278593d84c622ced0fd01b3ae9a30cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c99e6969f278593d84c622ced0fd01b3ae9a30cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c99e6969f278593d84c622ced0fd01b3ae9a30cf"}], "stats": {"total": 79, "additions": 59, "deletions": 20}, "files": [{"sha": "9bb4d729de2062dfad996a3883ac6ae789a79665", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 59, "deletions": 20, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cc4a7aa19330388a8262003f49753252c3561a/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cc4a7aa19330388a8262003f49753252c3561a/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=53cc4a7aa19330388a8262003f49753252c3561a", "patch": "@@ -25,6 +25,7 @@\n ------------------------------------------------------------------------------\n \n with Atree;    use Atree;\n+with Checks;   use Checks;\n with Einfo;    use Einfo;\n with Elists;   use Elists;\n with Errout;   use Errout;\n@@ -115,17 +116,17 @@ package body Exp_Intr is\n    --     GDC_Instance (The_Tag, Parameters'Access)\n \n    --  to a class-wide conversion of a dispatching call to the actual\n-   --  associated with the formal subprogram Construct, designating\n-   --  The_Tag as the controlling tag of the call:\n+   --  associated with the formal subprogram Construct, designating The_Tag\n+   --  as the controlling tag of the call:\n \n    --     T'Class (Construct'Actual (Params)) -- Controlling tag is The_Tag\n \n    --  which will eventually be expanded to the following:\n \n    --     T'Class (The_Tag.all (Construct'Actual'Index).all (Params))\n \n-   --  A class-wide membership test is also generated, preceding the call,\n-   --  to ensure that the controlling tag denotes a type in T'Class.\n+   --  A class-wide membership test is also generated, preceding the call, to\n+   --  ensure that the controlling tag denotes a type in T'Class.\n \n    procedure Expand_Dispatching_Constructor_Call (N : Node_Id) is\n       Loc        : constant Source_Ptr := Sloc (N);\n@@ -169,23 +170,61 @@ package body Exp_Intr is\n       Rewrite (N, Convert_To (Result_Typ, Cnstr_Call));\n       Analyze_And_Resolve (N, Etype (Act_Constr));\n \n+      --  Do not generate a run-time check on the built object if tag\n+      --  checks is suppressed for the result type.\n+\n+      if Tag_Checks_Suppressed (Etype (Result_Typ)) then\n+         null;\n+\n       --  Generate a class-wide membership test to ensure that the call's tag\n-      --  argument denotes a type within the class.\n-\n-      Insert_Action (N,\n-        Make_Implicit_If_Statement (N,\n-          Condition =>\n-            Make_Op_Not (Loc,\n-              Make_DT_Access_Action (Result_Typ,\n-                 Action => CW_Membership,\n-                 Args   => New_List (\n-                   Duplicate_Subexpr (Tag_Arg),\n-                   New_Reference_To (\n-                     Node (First_Elmt (Access_Disp_Table (\n-                                         Root_Type (Result_Typ)))), Loc)))),\n-          Then_Statements =>\n-            New_List (Make_Raise_Statement (Loc,\n-                        New_Occurrence_Of (RTE (RE_Tag_Error), Loc)))));\n+      --  argument denotes a type within the class. We must keep separate the\n+      --  case in which the Result_Type of the constructor function is a tagged\n+      --  type from the case in which it is an abstract interface because the\n+      --  run-time subprogram required to check these cases differ (and have\n+      --  one difference in their parameters profile).\n+\n+      --  Call CW_Membership if the Result_Type is a tagged type to look for\n+      --  the tag in the table of ancestor tags.\n+\n+      elsif not Is_Interface (Result_Typ) then\n+         Insert_Action (N,\n+           Make_Implicit_If_Statement (N,\n+             Condition =>\n+               Make_Op_Not (Loc,\n+                 Make_DT_Access_Action (Result_Typ,\n+                    Action => CW_Membership,\n+                    Args   => New_List (\n+                      Duplicate_Subexpr (Tag_Arg),\n+                      New_Reference_To (\n+                        Node (First_Elmt (Access_Disp_Table (\n+                                            Root_Type (Result_Typ)))), Loc)))),\n+             Then_Statements =>\n+               New_List (Make_Raise_Statement (Loc,\n+                           New_Occurrence_Of (RTE (RE_Tag_Error), Loc)))));\n+\n+      --  Call IW_Membership test if the Result_Type is an abstract interface\n+      --  to look for the tag in the table of interface tags.\n+\n+      else\n+         Insert_Action (N,\n+           Make_Implicit_If_Statement (N,\n+             Condition =>\n+               Make_Op_Not (Loc,\n+                 Make_DT_Access_Action (Result_Typ,\n+                    Action => IW_Membership,\n+                    Args   => New_List (\n+                      Make_Attribute_Reference (Loc,\n+                        Prefix => Duplicate_Subexpr (Tag_Arg),\n+                        Attribute_Name => Name_Address),\n+\n+                      New_Reference_To (\n+                        Node (First_Elmt (Access_Disp_Table (\n+                                            Root_Type (Result_Typ)))), Loc)))),\n+             Then_Statements =>\n+               New_List (\n+                 Make_Raise_Statement (Loc,\n+                   Name => New_Occurrence_Of (RTE (RE_Tag_Error), Loc)))));\n+      end if;\n    end Expand_Dispatching_Constructor_Call;\n \n    ---------------------------"}]}