{"sha": "54e32f9d2fac5e8147c1e266229e838f7b122233", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRlMzJmOWQyZmFjNWU4MTQ3YzFlMjY2MjI5ZTgzOGY3YjEyMjIzMw==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2016-01-15T02:45:44Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2016-01-15T02:45:44Z"}, "message": "re PR tree-optimization/69270 (DOM should exploit range information to create more equivalences)\n\n       PR tree-optimization/69270\n        * tree-ssa-dom.c (ssa_name_has_boolean_range): If the type has a\n        single bit of precision, verify it's also unsigned.\n        (record_edge_info): Use constant_boolean_node rather than fold_convert\n        to convert boolean_true/boolean_false to the right type.\n\nFrom-SVN: r232399", "tree": {"sha": "11920a5ccbf0db329177863f74c5da9fcadba8d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11920a5ccbf0db329177863f74c5da9fcadba8d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54e32f9d2fac5e8147c1e266229e838f7b122233", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54e32f9d2fac5e8147c1e266229e838f7b122233", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54e32f9d2fac5e8147c1e266229e838f7b122233", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54e32f9d2fac5e8147c1e266229e838f7b122233/comments", "author": null, "committer": null, "parents": [{"sha": "3f18cd8253cf88a6312580956c72bcd3ada7d2ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f18cd8253cf88a6312580956c72bcd3ada7d2ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f18cd8253cf88a6312580956c72bcd3ada7d2ac"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "6f9c6a5f90673f84bfbae315b91d11e670ac0c2b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e32f9d2fac5e8147c1e266229e838f7b122233/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e32f9d2fac5e8147c1e266229e838f7b122233/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=54e32f9d2fac5e8147c1e266229e838f7b122233", "patch": "@@ -1,3 +1,11 @@\n+2016-01-14  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/69270\n+\t* tree-ssa-dom.c (ssa_name_has_boolean_range): If the type has a\n+\tsingle bit of precision, verify it's also unsigned.\n+\t(record_edge_info): Use constant_boolean_node rather than fold_convert\n+\tto convert boolean_true/boolean_false to the right type.\n+\n 2016-01-14  Richard Henderson  <rth@redhat.com>\n \n \tPR rtl-opt/69014"}, {"sha": "f2257b33dd36505e194c2bbc92c8f838dfc535d9", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e32f9d2fac5e8147c1e266229e838f7b122233/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e32f9d2fac5e8147c1e266229e838f7b122233/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=54e32f9d2fac5e8147c1e266229e838f7b122233", "patch": "@@ -319,8 +319,8 @@ record_conditions (struct edge_info *edge_info, tree cond, tree inverted)\n /* Return TRUE is OP, an SSA_NAME has a range of values [0..1], false\n    otherwise.\n \n-   This can be because it is a boolean type, any type with\n-   a single bit of precision, or has known range of [0..1]\n+   This can be because it is a boolean type, any unsigned integral\n+   type with a single bit of precision, or has known range of [0..1]\n    via VRP analysis.  */\n \n static bool\n@@ -332,6 +332,7 @@ ssa_name_has_boolean_range (tree op)\n \n   /* An integral type with a single bit of precision.  */\n   if (INTEGRAL_TYPE_P (TREE_TYPE (op))\n+      && TYPE_UNSIGNED (TREE_TYPE (op))\n       && TYPE_PRECISION (TREE_TYPE (op)) == 1)\n     return true;\n \n@@ -425,10 +426,9 @@ record_edge_info (basic_block bb)\n \t      && ssa_name_has_boolean_range (op0)\n               && is_gimple_min_invariant (op1))\n             {\n-\t      tree true_val = fold_convert (TREE_TYPE (op0),\n-\t\t\t\t\t    boolean_true_node);\n-\t      tree false_val = fold_convert (TREE_TYPE (op0),\n-\t\t\t\t\t     boolean_false_node);\n+\t      tree true_val = constant_boolean_node (true, TREE_TYPE (op0));\n+\t      tree false_val = constant_boolean_node (false, TREE_TYPE (op0));\n+\n               if (code == EQ_EXPR)\n                 {\n                   edge_info = allocate_edge_info (true_edge);"}]}