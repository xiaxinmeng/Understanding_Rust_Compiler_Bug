{"sha": "b5228b1bc8cb81be494f5b5faa68b6b859ce0227", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUyMjhiMWJjOGNiODFiZTQ5NGY1YjVmYWE2OGI2Yjg1OWNlMDIyNw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-03-25T16:48:13Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-03-25T16:48:13Z"}, "message": "PR middle-end/94004 - missing -Walloca on calls to alloca due to -Wno-system-headers\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/94004\n\t* gcc.dg/Walloca-larger-than-3.c: New test.\n\t* gcc.dg/Walloca-larger-than-3.h: New test header.\n\t* gcc.dg/Wvla-larger-than-4.c: New test.\n\ngcc/ChangeLog:\n\n\tPR middle-end/94004\n\t* gimple-ssa-warn-alloca.c (pass_walloca::execute): Issue warnings\n\teven for alloca calls resulting from system macro expansion.\n\tInclude inlining context in all warnings.", "tree": {"sha": "f5dd2542a72f62d6682b0a2abe62045b7e95babb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5dd2542a72f62d6682b0a2abe62045b7e95babb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5228b1bc8cb81be494f5b5faa68b6b859ce0227", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5228b1bc8cb81be494f5b5faa68b6b859ce0227", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5228b1bc8cb81be494f5b5faa68b6b859ce0227", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5228b1bc8cb81be494f5b5faa68b6b859ce0227/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "713ecb3d417363a4b12c725b335fce10355da206", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/713ecb3d417363a4b12c725b335fce10355da206", "html_url": "https://github.com/Rust-GCC/gccrs/commit/713ecb3d417363a4b12c725b335fce10355da206"}], "stats": {"total": 156, "additions": 130, "deletions": 26}, "files": [{"sha": "f9ba7519f1251db638f4630c607b188d1393277b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5228b1bc8cb81be494f5b5faa68b6b859ce0227/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5228b1bc8cb81be494f5b5faa68b6b859ce0227/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5228b1bc8cb81be494f5b5faa68b6b859ce0227", "patch": "@@ -1,3 +1,10 @@\n+2020-03-25  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/94004\n+\t* gimple-ssa-warn-alloca.c (pass_walloca::execute): Issue warnings\n+\teven for alloca calls resulting from system macro expansion.\n+\tInclude inlining context in all warnings.\n+\n 2020-03-25  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR target/94254"}, {"sha": "9e80e5dbbd90df037a19bec4409281a4978dbdcf", "filename": "gcc/gimple-ssa-warn-alloca.c", "status": "modified", "additions": 39, "deletions": 26, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5228b1bc8cb81be494f5b5faa68b6b859ce0227/gcc%2Fgimple-ssa-warn-alloca.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5228b1bc8cb81be494f5b5faa68b6b859ce0227/gcc%2Fgimple-ssa-warn-alloca.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-alloca.c?ref=b5228b1bc8cb81be494f5b5faa68b6b859ce0227", "patch": "@@ -510,11 +510,12 @@ pass_walloca::execute (function *fun)\n \t   gsi_next (&si))\n \t{\n \t  gimple *stmt = gsi_stmt (si);\n-\t  location_t loc = gimple_location (stmt);\n-\n \t  if (!gimple_alloca_call_p (stmt))\n \t    continue;\n \n+\t  location_t loc = gimple_nonartificial_location (stmt);\n+\t  loc = expansion_point_location_if_in_system_header (loc);\n+\n \t  const bool is_vla\n \t    = gimple_call_alloca_for_var_p (as_a <gcall *> (stmt));\n \n@@ -528,7 +529,7 @@ pass_walloca::execute (function *fun)\n \t    }\n \t  else if (warn_alloca)\n \t    {\n-\t      warning_at (loc, OPT_Walloca, \"use of %<alloca%>\");\n+\t      warning_at (loc, OPT_Walloca, \"%Guse of %<alloca%>\", stmt);\n \t      continue;\n \t    }\n \t  else if (warn_alloca_limit < 0)\n@@ -564,10 +565,12 @@ pass_walloca::execute (function *fun)\n \t      {\n \t\tauto_diagnostic_group d;\n \t\tif (warning_at (loc, wcode,\n-\t\t\t\tis_vla ? G_(\"argument to variable-length \"\n-\t\t\t\t\t    \"array may be too large\")\n-\t\t\t\t: G_(\"argument to %<alloca%> may be too \"\n-\t\t\t\t     \"large\"))\n+\t\t\t\t(is_vla\n+\t\t\t\t ? G_(\"%Gargument to variable-length \"\n+\t\t\t\t      \"array may be too large\")\n+\t\t\t\t : G_(\"%Gargument to %<alloca%> may be too \"\n+\t\t\t\t      \"large\")),\n+\t\t\t\tstmt)\n \t\t    && t.limit != 0)\n \t\t  {\n \t\t    print_decu (t.limit, buff);\n@@ -582,47 +585,57 @@ pass_walloca::execute (function *fun)\n \t      {\n \t\tauto_diagnostic_group d;\n \t\tif (warning_at (loc, wcode,\n-\t\t\t\tis_vla ? G_(\"argument to variable-length\"\n-\t\t\t\t\t    \" array is too large\")\n-\t\t\t\t: G_(\"argument to %<alloca%> is too large\"))\n+\t\t\t\t(is_vla\n+\t\t\t\t ? G_(\"%Gargument to variable-length\"\n+\t\t\t\t      \" array is too large\")\n+\t\t\t\t : G_(\"%Gargument to %<alloca%> is too large\")),\n+\t\t\t\tstmt)\n \t\t    && t.limit != 0)\n \t\t  {\n \t\t    print_decu (t.limit, buff);\n \t\t    inform (loc, \"limit is %wu bytes, but argument is %s\",\n-\t\t\t      is_vla ? warn_vla_limit : adjusted_alloca_limit,\n-\t\t\t      buff);\n+\t\t\t    is_vla ? warn_vla_limit : adjusted_alloca_limit,\n+\t\t\t    buff);\n \t\t  }\n \t      }\n \t      break;\n \t    case ALLOCA_BOUND_UNKNOWN:\n \t      warning_at (loc, wcode,\n-\t\t\t  is_vla ? G_(\"variable-length array bound is unknown\")\n-\t\t\t  : G_(\"%<alloca%> bound is unknown\"));\n+\t\t\t  (is_vla\n+\t\t\t   ? G_(\"%Gvariable-length array bound is unknown\")\n+\t\t\t   : G_(\"%G%<alloca%> bound is unknown\")),\n+\t\t\t  stmt);\n \t      break;\n \t    case ALLOCA_UNBOUNDED:\n \t      warning_at (loc, wcode,\n-\t\t\t  is_vla ? G_(\"unbounded use of variable-length array\")\n-\t\t\t  : G_(\"unbounded use of %<alloca%>\"));\n+\t\t\t  (is_vla\n+\t\t\t   ? G_(\"%Gunbounded use of variable-length array\")\n+\t\t\t   : G_(\"%Gunbounded use of %<alloca%>\")),\n+\t\t\t  stmt);\n \t      break;\n \t    case ALLOCA_IN_LOOP:\n \t      gcc_assert (!is_vla);\n-\t      warning_at (loc, wcode, \"use of %<alloca%> within a loop\");\n+\t      warning_at (loc, wcode,\n+\t\t\t  \"%Guse of %<alloca%> within a loop\", stmt);\n \t      break;\n \t    case ALLOCA_CAST_FROM_SIGNED:\n \t      gcc_assert (invalid_casted_type != NULL_TREE);\n \t      warning_at (loc, wcode,\n-\t\t\t  is_vla ? G_(\"argument to variable-length array \"\n-\t\t\t\t      \"may be too large due to \"\n-\t\t\t\t      \"conversion from %qT to %qT\")\n-\t\t\t  : G_(\"argument to %<alloca%> may be too large \"\n-\t\t\t       \"due to conversion from %qT to %qT\"),\n-\t\t\t  invalid_casted_type, size_type_node);\n+\t\t\t  (is_vla\n+\t\t\t   ? G_(\"%Gargument to variable-length array \"\n+\t\t\t\t\"may be too large due to \"\n+\t\t\t\t\"conversion from %qT to %qT\")\n+\t\t\t   : G_(\"%Gargument to %<alloca%> may be too large \"\n+\t\t\t\t\"due to conversion from %qT to %qT\")),\n+\t\t\t  stmt, invalid_casted_type, size_type_node);\n \t      break;\n \t    case ALLOCA_ARG_IS_ZERO:\n \t      warning_at (loc, wcode,\n-\t\t\t  is_vla ? G_(\"argument to variable-length array \"\n-\t\t\t\t      \"is zero\")\n-\t\t\t  : G_(\"argument to %<alloca%> is zero\"));\n+\t\t\t  (is_vla\n+\t\t\t   ? G_(\"%Gargument to variable-length array \"\n+\t\t\t\t\"is zero\")\n+\t\t\t   : G_(\"%Gargument to %<alloca%> is zero\")),\n+\t\t\t  stmt);\n \t      break;\n \t    default:\n \t      gcc_unreachable ();"}, {"sha": "855edb686fbc6c0487abae80129363fd186a647a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5228b1bc8cb81be494f5b5faa68b6b859ce0227/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5228b1bc8cb81be494f5b5faa68b6b859ce0227/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b5228b1bc8cb81be494f5b5faa68b6b859ce0227", "patch": "@@ -1,3 +1,10 @@\n+2020-03-25  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/94004\n+\t* gcc.dg/Walloca-larger-than-3.c: New test.\n+\t* gcc.dg/Walloca-larger-than-3.h: New test header.\n+\t* gcc.dg/Wvla-larger-than-4.c: New test.\n+\n 2020-03-25  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/94265"}, {"sha": "6f8ede04c7d263714a566d8601fb3a3144a3bfde", "filename": "gcc/testsuite/gcc.dg/Walloca-larger-than-3.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5228b1bc8cb81be494f5b5faa68b6b859ce0227/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-larger-than-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5228b1bc8cb81be494f5b5faa68b6b859ce0227/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-larger-than-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-larger-than-3.c?ref=b5228b1bc8cb81be494f5b5faa68b6b859ce0227", "patch": "@@ -0,0 +1,38 @@\n+/* PR middle-end/94004 - missing -Walloca on calls to alloca due\n+   to -Wno-system-headers\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -Walloca-larger-than=8 -ftrack-macro-expansion=0\" }\n+   { dg-require-effective-target alloca } */\n+\n+#include \"Walloca-larger-than-3.h\"\n+\n+void sink (void*, ...);\n+\n+void call_builtin_alloca (int n)\n+{\n+  if (n < 9)\n+    n = 9;\n+  void *p = __builtin_alloca (n);   // { dg-warning \"\\\\\\[-Walloca-larger-than\" }\n+  sink (p, 0);\n+}\n+\n+void call_alloca_sys_hdr (int n)\n+{\n+  if (n < 9)\n+    n = 9;\n+  void *p = alloca (n);             // { dg-warning \"\\\\\\[-Walloca-larger-than\" }\n+  sink (p, 1);\n+}\n+\n+static inline void inline_call_alloca (int n)\n+{\n+  if (n > 9)\n+    n = 9;\n+  void *p = alloca (n);             // { dg-warning \"\\\\\\[-Walloca-larger-than\" }\n+  sink (p, 2);\n+}\n+\n+void make_inlined_call (void)\n+{\n+  inline_call_alloca (10);\n+}"}, {"sha": "ca5a84cff4fc8e5aaaa66edce6f5ecec9581489d", "filename": "gcc/testsuite/gcc.dg/Walloca-larger-than-3.h", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5228b1bc8cb81be494f5b5faa68b6b859ce0227/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-larger-than-3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5228b1bc8cb81be494f5b5faa68b6b859ce0227/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-larger-than-3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-larger-than-3.h?ref=b5228b1bc8cb81be494f5b5faa68b6b859ce0227", "patch": "@@ -0,0 +1,9 @@\n+#if __has_include (<alloca.h>)\n+#  include <alloca.h>\n+#endif\n+\n+#ifndef alloca\n+   /* Simulate a definition in a system header. */\n+#  pragma GCC system_header\n+#  define alloca(n) __builtin_alloca (n)\n+#endif"}, {"sha": "de99afbe56e3458fb8f83822dfa40088c892b8c9", "filename": "gcc/testsuite/gcc.dg/Wvla-larger-than-4.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5228b1bc8cb81be494f5b5faa68b6b859ce0227/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-larger-than-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5228b1bc8cb81be494f5b5faa68b6b859ce0227/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-larger-than-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-larger-than-4.c?ref=b5228b1bc8cb81be494f5b5faa68b6b859ce0227", "patch": "@@ -0,0 +1,30 @@\n+/* PR middle-end/94004 - missing -Walloca on calls to alloca due\n+   to -Wno-system-headers\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -Wvla-larger-than=31 -ftrack-macro-expansion=0\" }\n+   { dg-require-effective-target alloca } */\n+\n+void sink (void*, ...);\n+\n+static inline void inline_use_vla (unsigned n)\n+{\n+  if (n > 32)\n+    n = 32;\n+  char a[n];                  // { dg-warning \"\\\\\\[-Wvla-larger-than\" }\n+  sink (a, 2);\n+}\n+\n+static inline void use_inlined_vla (unsigned n)\n+{\n+  inline_use_vla (n);         // this call is okay\n+  inline_use_vla (n + 1);     // this one is not\n+}\n+\n+void call_inline (void)\n+{\n+  use_inlined_vla (31);\n+}\n+\n+/* Verify that the inlining context is included and that it points\n+   to the correct line number in the inlined function:\n+   { dg-message \"function 'inline_use_vla'..*inlined from 'call_inline' .*:20:\" \"\" { target *-*-* } 0 }  */"}]}