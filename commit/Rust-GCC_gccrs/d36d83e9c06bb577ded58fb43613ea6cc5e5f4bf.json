{"sha": "d36d83e9c06bb577ded58fb43613ea6cc5e5f4bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM2ZDgzZTljMDZiYjU3N2RlZDU4ZmI0MzYxM2VhNmNjNWU1ZjRiZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-06-18T16:38:29Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-06-18T16:38:29Z"}, "message": "re PR rtl-optimization/40900 (redundant sign extend of short function returned value)\n\n\tPR rtl-optimization/40900\n\t* expr.c (expand_expr_real_1) <SSA_NAME>: Fix long line.  Save the\n\toriginal expression for later reuse.\n\t<expand_decl_rtl>: Use promote_function_mode to compute the signedness\n\tof the promoted RTL for a SSA_NAME on the LHS of a call statement.\n\nFrom-SVN: r161006", "tree": {"sha": "7b1e91617dd4292647c01da5f89b0a1680d2cc7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b1e91617dd4292647c01da5f89b0a1680d2cc7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d36d83e9c06bb577ded58fb43613ea6cc5e5f4bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d36d83e9c06bb577ded58fb43613ea6cc5e5f4bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d36d83e9c06bb577ded58fb43613ea6cc5e5f4bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d36d83e9c06bb577ded58fb43613ea6cc5e5f4bf/comments", "author": null, "committer": null, "parents": [{"sha": "c88f5c498699dc01f321eafdd081ebcbdc9b538d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c88f5c498699dc01f321eafdd081ebcbdc9b538d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c88f5c498699dc01f321eafdd081ebcbdc9b538d"}], "stats": {"total": 64, "additions": 49, "deletions": 15}, "files": [{"sha": "d03212cc865ee3aaa853299809e78ce24bfdb1a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d36d83e9c06bb577ded58fb43613ea6cc5e5f4bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d36d83e9c06bb577ded58fb43613ea6cc5e5f4bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d36d83e9c06bb577ded58fb43613ea6cc5e5f4bf", "patch": "@@ -1,3 +1,11 @@\n+2010-06-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR rtl-optimization/40900\n+\t* expr.c (expand_expr_real_1) <SSA_NAME>: Fix long line.  Save the\n+\toriginal expression for later reuse.\n+\t<expand_decl_rtl>: Use promote_function_mode to compute the signedness\n+\tof the promoted RTL for a SSA_NAME on the LHS of a call statement.\n+\n 2010-06-18  Anatoly Sokolov  <aesok@post.ru>\n \n \t* double-int.h (double_int_to_shwi, double_int_to_uhwi,"}, {"sha": "ab761d39bf22bd48bba2c57bfb7ca3ffaa2e2b2b", "filename": "gcc/expr.c", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d36d83e9c06bb577ded58fb43613ea6cc5e5f4bf/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d36d83e9c06bb577ded58fb43613ea6cc5e5f4bf/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=d36d83e9c06bb577ded58fb43613ea6cc5e5f4bf", "patch": "@@ -8301,6 +8301,8 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n   location_t loc = EXPR_LOCATION (exp);\n   struct separate_ops ops;\n   tree treeop0, treeop1, treeop2;\n+  tree ssa_name = NULL_TREE;\n+  gimple g;\n \n   type = TREE_TYPE (exp);\n   mode = TYPE_MODE (type);\n@@ -8413,15 +8415,17 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t base variable.  This unnecessarily allocates a pseudo, see how we can\n \t reuse it, if partition base vars have it set already.  */\n       if (!currently_expanding_to_rtl)\n-\treturn expand_expr_real_1 (SSA_NAME_VAR (exp), target, tmode, modifier, NULL);\n-      {\n-\tgimple g = get_gimple_for_ssa_name (exp);\n-\tif (g)\n-\t  return expand_expr_real (gimple_assign_rhs_to_tree (g), target,\n-\t\t\t\t   tmode, modifier, NULL);\n-      }\n-      decl_rtl = get_rtx_for_ssa_name (exp);\n-      exp = SSA_NAME_VAR (exp);\n+\treturn expand_expr_real_1 (SSA_NAME_VAR (exp), target, tmode, modifier,\n+\t\t\t\t   NULL);\n+\n+      g = get_gimple_for_ssa_name (exp);\n+      if (g)\n+\treturn expand_expr_real (gimple_assign_rhs_to_tree (g), target, tmode,\n+\t\t\t\t modifier, NULL);\n+\n+      ssa_name = exp;\n+      decl_rtl = get_rtx_for_ssa_name (ssa_name);\n+      exp = SSA_NAME_VAR (ssa_name);\n       goto expand_decl_rtl;\n \n     case PARM_DECL:\n@@ -8523,15 +8527,21 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       /* If the mode of DECL_RTL does not match that of the decl, it\n \t must be a promoted value.  We return a SUBREG of the wanted mode,\n \t but mark it so that we know that it was already extended.  */\n-\n-      if (REG_P (decl_rtl)\n-\t  && GET_MODE (decl_rtl) != DECL_MODE (exp))\n+      if (REG_P (decl_rtl) && GET_MODE (decl_rtl) != DECL_MODE (exp))\n \t{\n \t  enum machine_mode pmode;\n \n-\t  /* Get the signedness used for this variable.  Ensure we get the\n-\t     same mode we got when the variable was declared.  */\n-\t  pmode = promote_decl_mode (exp, &unsignedp);\n+\t  /* Get the signedness to be used for this variable.  Ensure we get\n+\t     the same mode we got when the variable was declared.  */\n+\t  if (code == SSA_NAME\n+\t      && (g = SSA_NAME_DEF_STMT (ssa_name))\n+\t      && gimple_code (g) == GIMPLE_CALL)\n+\t    pmode = promote_function_mode (type, mode, &unsignedp,\n+\t\t\t\t\t   TREE_TYPE\n+\t\t\t\t\t   (TREE_TYPE (gimple_call_fn (g))),\n+\t\t\t\t\t   2);\n+\t  else\n+\t    pmode = promote_decl_mode (exp, &unsignedp);\n \t  gcc_assert (GET_MODE (decl_rtl) == pmode);\n \n \t  temp = gen_lowpart_SUBREG (mode, decl_rtl);"}, {"sha": "ce75762dcb3ffd945482eb55741192ac5889550d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d36d83e9c06bb577ded58fb43613ea6cc5e5f4bf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d36d83e9c06bb577ded58fb43613ea6cc5e5f4bf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d36d83e9c06bb577ded58fb43613ea6cc5e5f4bf", "patch": "@@ -1,3 +1,7 @@\n+2010-06-18  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* gcc.target/arm/pr40900.c: New test.\n+\n 2010-06-18  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gnat.dg/class_wide2.adb: Remove bogus message, no longer generated."}, {"sha": "278bc3702231aae947b82f3c6b7e69449a77ba21", "filename": "gcc/testsuite/gcc.target/arm/pr40900.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d36d83e9c06bb577ded58fb43613ea6cc5e5f4bf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr40900.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d36d83e9c06bb577ded58fb43613ea6cc5e5f4bf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr40900.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr40900.c?ref=d36d83e9c06bb577ded58fb43613ea6cc5e5f4bf", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-optimize-sibling-calls\" }  */\n+\n+extern short shortv2();\n+short shortv1()\n+{\n+  return shortv2();\n+}\n+\n+/* { dg-final { scan-assembler-not \"lsl\" } } */\n+/* { dg-final { scan-assembler-not \"asr\" } } */\n+/* { dg-final { scan-assembler-not \"sxth\" } } */"}]}