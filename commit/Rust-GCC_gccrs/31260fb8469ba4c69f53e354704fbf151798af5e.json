{"sha": "31260fb8469ba4c69f53e354704fbf151798af5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzEyNjBmYjg0NjliYTRjNjlmNTNlMzU0NzA0ZmJmMTUxNzk4YWY1ZQ==", "commit": {"author": {"name": "Loren J. Rittle", "email": "ljrittle@acm.org", "date": "2003-03-20T03:11:25Z"}, "committer": {"name": "Loren J. Rittle", "email": "ljrittle@gcc.gnu.org", "date": "2003-03-20T03:11:25Z"}, "message": "Makefile.in (STRICT2_WARN): Add @WERROR@.\n\n        * Makefile.in (STRICT2_WARN): Add @WERROR@.\n        (GCC_WARN_CFLAGS): Remove $(WERROR).\n        (fixinc.sh-warn): New.\n        * ada/Make-lang.in (ada-warn): Add $(WERROR).\n        * cp/Make-lang.in (cp-warn): Add $(WERROR).\n        * f/Make-lang.in (f-warn): Add $(WERROR).\n        * java/Make-lang.in (java-warn): Add $(WERROR).\n        * treelang/Make-lang.in (treelang-warn): Add $(WERROR).\n\nFrom-SVN: r64606", "tree": {"sha": "45962ae4d69dedca71c4459bdbf83f07acc1bd01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45962ae4d69dedca71c4459bdbf83f07acc1bd01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31260fb8469ba4c69f53e354704fbf151798af5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31260fb8469ba4c69f53e354704fbf151798af5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31260fb8469ba4c69f53e354704fbf151798af5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31260fb8469ba4c69f53e354704fbf151798af5e/comments", "author": null, "committer": null, "parents": [{"sha": "951312c8190b927f30693f0e9ab122f991efaeab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/951312c8190b927f30693f0e9ab122f991efaeab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/951312c8190b927f30693f0e9ab122f991efaeab"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "3dd1e4694b56be7b3d864039d96a768b311218e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31260fb8469ba4c69f53e354704fbf151798af5e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31260fb8469ba4c69f53e354704fbf151798af5e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31260fb8469ba4c69f53e354704fbf151798af5e", "patch": "@@ -1,3 +1,14 @@\n+2003-03-19  Loren James Rittle  <ljrittle@acm.org>\n+\n+\t* Makefile.in (STRICT2_WARN): Add @WERROR@.\n+\t(GCC_WARN_CFLAGS): Remove $(WERROR).\n+\t(fixinc.sh-warn): New.\n+\t* ada/Make-lang.in (ada-warn): Add $(WERROR).\n+\t* cp/Make-lang.in (cp-warn): Add $(WERROR).\n+\t* f/Make-lang.in (f-warn): Add $(WERROR).\n+\t* java/Make-lang.in (java-warn): Add $(WERROR).\n+\t* treelang/Make-lang.in (treelang-warn): Add $(WERROR).\n+\n 2003-03-19  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* c-common.h (c_dump_tree), c-dump.c (c_dump_tree),"}, {"sha": "f2c23fb98688560188350e75e2c2126aca313d37", "filename": "gcc/Makefile.in", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31260fb8469ba4c69f53e354704fbf151798af5e/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31260fb8469ba4c69f53e354704fbf151798af5e/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=31260fb8469ba4c69f53e354704fbf151798af5e", "patch": "@@ -142,7 +142,7 @@ coverageexts = .{da,bbg}\n # stage1, as not all versions of gcc understand -Wno-long-long.\n LOOSE_WARN = -W -Wall -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes\n STRICT_WARN = -Wtraditional @strict1_warn@\n-STRICT2_WARN = -Wtraditional -pedantic -Wno-long-long\n+STRICT2_WARN = -Wtraditional -pedantic -Wno-long-long @WERROR@\n \n # This is set by --enable-checking.  The idea is to catch forgotten\n # \"extern\" tags in header files.\n@@ -154,7 +154,7 @@ VALGRIND_DRIVER_DEFINES = @valgrind_path_defines@\n \n # This is how we control whether or not the additional warnings are applied.\n .-warn = $(STRICT_WARN)\n-GCC_WARN_CFLAGS = $(LOOSE_WARN) $($(@D)-warn) $(NOCOMMON_FLAG) $(WERROR) $($@-warn)\n+GCC_WARN_CFLAGS = $(LOOSE_WARN) $($(@D)-warn) $(NOCOMMON_FLAG) $($@-warn)\n \n # These files are to have -Werror bypassed in stage2:\n # These are very hard to completely clean due to target complexities.\n@@ -2475,6 +2475,11 @@ specs.ready: specs\n \t\t$(STAMP) specs.ready; \\\n \tfi\n \n+# Until someone fixes this recursive make nightmare (please note where\n+# BUILD_CFLAGS and WARN_CFLAGS are first expanded below versus which\n+# later make invocation has the fine-grain -warn markings for fixinc):\n+fixinc.sh-warn = -Wno-error\n+\n FIXINCSRCDIR=$(srcdir)/fixinc\n fixinc.sh: $(FIXINCSRCDIR)/mkfixinc.sh $(FIXINCSRCDIR)/fixincl.c \\\n \t$(FIXINCSRCDIR)/procopen.c $(FIXINCSRCDIR)/gnu-regex.c \\"}, {"sha": "c357ddbaf95e43c5221da24791575fd48683899d", "filename": "gcc/ada/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31260fb8469ba4c69f53e354704fbf151798af5e/gcc%2Fada%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31260fb8469ba4c69f53e354704fbf151798af5e/gcc%2Fada%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMake-lang.in?ref=31260fb8469ba4c69f53e354704fbf151798af5e", "patch": "@@ -83,7 +83,7 @@ ADA_FLAGS_TO_PASS = \\\n \n # FIXME: need to add $(ALL_ADA_CFLAGS) to .c.o suffix rule\n # Use loose warnings for this front end, but add some special flags\n-ada-warn = $(ALL_ADA_CFLAGS)\n+ada-warn = $(ALL_ADA_CFLAGS) $(WERROR)\n # unresolved warnings in a couple of files\n ada/tracebak.o-warn = -Wno-error\n ada/b_gnatb.o-warn = -Wno-error"}, {"sha": "cd4b21c0d4f8bafda0cf5a30d8ae52799a739b56", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31260fb8469ba4c69f53e354704fbf151798af5e/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31260fb8469ba4c69f53e354704fbf151798af5e/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=31260fb8469ba4c69f53e354704fbf151798af5e", "patch": "@@ -90,7 +90,7 @@ CXX_OBJS = cp/call.o cp/decl.o cp/expr.o cp/pt.o cp/typeck2.o \\\n  cp/optimize.o cp/mangle.o cp/cp-lang.o\n \n # Use loose warnings for this front end.\n-cp-warn =\n+cp-warn = $(WERROR)\n \n cc1plus$(exeext): $(CXX_OBJS) $(CXX_C_OBJS) $(BACKEND) \\\n \t\t  libcpp.a $(LIBDEPS)"}, {"sha": "7acba675a3e391837698304cf35d948d747aeaea", "filename": "gcc/f/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31260fb8469ba4c69f53e354704fbf151798af5e/gcc%2Ff%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31260fb8469ba4c69f53e354704fbf151798af5e/gcc%2Ff%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FMake-lang.in?ref=31260fb8469ba4c69f53e354704fbf151798af5e", "patch": "@@ -92,7 +92,7 @@ F77_OBJS = f/bad.o f/bit.o f/bld.o f/com.o f/data.o f/equiv.o f/expr.o \\\n  f/stv.o f/stw.o f/symbol.o f/target.o f/top.o f/type.o f/where.o\n \n # Use loose warnings for this front end.\n-f-warn =\n+f-warn = $(WERROR)\n # type-punning warning\n f/sta.o-warn = -Wno-error\n "}, {"sha": "b7c963b0ed0a330a2f4103063ca94ccf0000babb", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31260fb8469ba4c69f53e354704fbf151798af5e/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31260fb8469ba4c69f53e354704fbf151798af5e/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=31260fb8469ba4c69f53e354704fbf151798af5e", "patch": "@@ -123,7 +123,7 @@ JCFDUMP_OBJS = java/jcf-dump.o java/jcf-io.o java/jcf-depend.o java/jcf-path.o \\\n JVGENMAIN_OBJS = java/jvgenmain.o java/mangle_name.o errors.o\n \n # Use loose warnings for this front end.\n-java-warn =\n+java-warn = $(WERROR)\n # String length warnings\n jvspec.o-warn = -Wno-error\n "}, {"sha": "9180d76183f6795a3f9b0b699465aba0f5d6147c", "filename": "gcc/treelang/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31260fb8469ba4c69f53e354704fbf151798af5e/gcc%2Ftreelang%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31260fb8469ba4c69f53e354704fbf151798af5e/gcc%2Ftreelang%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FMake-lang.in?ref=31260fb8469ba4c69f53e354704fbf151798af5e", "patch": "@@ -64,7 +64,7 @@ TREE_SOURCE = ${srcdir}/treelang/parse.y ${srcdir}/treelang/lex.l ${srcdir}/tree\n TREE_EXES = tree1$(exeext)\n \n #no -Wtraditional warnings, allow long long\n-treelang-warn = $(LOOSE_WARN) -pedantic -Wno-long-long -Wmissing-prototypes -Wmissing-declarations\n+treelang-warn = $(LOOSE_WARN) -pedantic -Wno-long-long -Wmissing-prototypes -Wmissing-declarations $(WERROR)\n # bison emits some unused static arrays (yytoknum)\n treelang/parse.o-warn = -Wno-error\n "}]}