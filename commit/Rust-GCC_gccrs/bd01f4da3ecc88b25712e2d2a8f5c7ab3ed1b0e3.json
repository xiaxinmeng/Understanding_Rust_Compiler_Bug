{"sha": "bd01f4da3ecc88b25712e2d2a8f5c7ab3ed1b0e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQwMWY0ZGEzZWNjODhiMjU3MTJlMmQyYThmNWM3YWIzZWQxYjBlMw==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2019-10-11T14:17:32Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2019-10-11T14:17:32Z"}, "message": "tree-vect-loop.c (vect_analyze_loop_operations): Adjust call to vectorizable_live_operation.\n\n2019-10-11  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * tree-vect-loop.c (vect_analyze_loop_operations): Adjust call to\n        vectorizable_live_operation.\n        (vectorizable_live_operation): Adjust parameters.\n        * tree-vect-stmts.c (vect_init_vector,\n        vect_gen_widened_results_half): Fix typo in function comment.\n        (can_vectorize_live_stmts): Adjust function comment.\n        Adjust parameters.  Adjust call to vectorizable_live_operation.\n        (vect_analyze_stmt): Adjust call to can_vectorize_live_stmts.\n        (vect_transform_stmt): Adjust function comment.  Adjust call to\n        can_vectorize_live_stmts.\n        * tree-vectorizer.h (vectorizable_live_operation): Adjust parameters.\n\nFrom-SVN: r276886", "tree": {"sha": "46e0faf29e20621f118f6fd50b50b0d7289563a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46e0faf29e20621f118f6fd50b50b0d7289563a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd01f4da3ecc88b25712e2d2a8f5c7ab3ed1b0e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd01f4da3ecc88b25712e2d2a8f5c7ab3ed1b0e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd01f4da3ecc88b25712e2d2a8f5c7ab3ed1b0e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd01f4da3ecc88b25712e2d2a8f5c7ab3ed1b0e3/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "643d443665ec68270af4c950fed4cdc1adad5154", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/643d443665ec68270af4c950fed4cdc1adad5154", "html_url": "https://github.com/Rust-GCC/gccrs/commit/643d443665ec68270af4c950fed4cdc1adad5154"}], "stats": {"total": 45, "additions": 29, "deletions": 16}, "files": [{"sha": "1a86675904399c4540b493cf50eabd091d13d8b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd01f4da3ecc88b25712e2d2a8f5c7ab3ed1b0e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd01f4da3ecc88b25712e2d2a8f5c7ab3ed1b0e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd01f4da3ecc88b25712e2d2a8f5c7ab3ed1b0e3", "patch": "@@ -1,3 +1,17 @@\n+2019-10-11  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* tree-vect-loop.c (vect_analyze_loop_operations): Adjust call to\n+\tvectorizable_live_operation.\n+\t(vectorizable_live_operation): Adjust parameters.\n+\t* tree-vect-stmts.c (vect_init_vector,\n+\tvect_gen_widened_results_half): Fix typo in function comment.\n+\t(can_vectorize_live_stmts): Adjust function comment.\n+\tAdjust parameters.  Adjust call to vectorizable_live_operation.\n+\t(vect_analyze_stmt): Adjust call to can_vectorize_live_stmts.\n+\t(vect_transform_stmt): Adjust function comment.  Adjust call to\n+\tcan_vectorize_live_stmts.\n+\t* tree-vectorizer.h (vectorizable_live_operation): Adjust parameters.\n+\n 2019-10-11  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/90883"}, {"sha": "cb95ea36298886955cfd789c75f09242e02e98d1", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd01f4da3ecc88b25712e2d2a8f5c7ab3ed1b0e3/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd01f4da3ecc88b25712e2d2a8f5c7ab3ed1b0e3/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=bd01f4da3ecc88b25712e2d2a8f5c7ab3ed1b0e3", "patch": "@@ -1566,7 +1566,7 @@ vect_analyze_loop_operations (loop_vec_info loop_vinfo)\n \t      && STMT_VINFO_LIVE_P (stmt_info)\n \t      && !PURE_SLP_STMT (stmt_info))\n \t    ok = vectorizable_live_operation (stmt_info, NULL, NULL, NULL,\n-\t\t\t\t\t      -1, NULL, &cost_vec);\n+\t\t\t\t\t      -1, false, &cost_vec);\n \n           if (!ok)\n \t    return opt_result::failure_at (phi,\n@@ -7628,9 +7628,9 @@ vectorizable_induction (stmt_vec_info stmt_info,\n \n bool\n vectorizable_live_operation (stmt_vec_info stmt_info,\n-\t\t\t     gimple_stmt_iterator *gsi ATTRIBUTE_UNUSED,\n+\t\t\t     gimple_stmt_iterator *gsi,\n \t\t\t     slp_tree slp_node, slp_instance slp_node_instance,\n-\t\t\t     int slp_index, stmt_vec_info *vec_stmt,\n+\t\t\t     int slp_index, bool vec_stmt_p,\n \t\t\t     stmt_vector_for_cost *)\n {\n   loop_vec_info loop_vinfo = STMT_VINFO_LOOP_VINFO (stmt_info);\n@@ -7652,7 +7652,7 @@ vectorizable_live_operation (stmt_vec_info stmt_info,\n      validity so just trigger the transform here.  */\n   if (STMT_VINFO_REDUC_DEF (vect_orig_stmt (stmt_info)))\n     {\n-      if (!vec_stmt)\n+      if (!vec_stmt_p)\n \treturn true;\n       if (slp_node)\n \t{\n@@ -7721,7 +7721,7 @@ vectorizable_live_operation (stmt_vec_info stmt_info,\n \t}\n     }\n \n-  if (!vec_stmt)\n+  if (!vec_stmt_p)\n     {\n       /* No transformation required.  */\n       if (LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo))"}, {"sha": "e606945d536ad3353b2317aed5b504a89eec9fc3", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd01f4da3ecc88b25712e2d2a8f5c7ab3ed1b0e3/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd01f4da3ecc88b25712e2d2a8f5c7ab3ed1b0e3/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=bd01f4da3ecc88b25712e2d2a8f5c7ab3ed1b0e3", "patch": "@@ -1449,7 +1449,7 @@ vect_init_vector_1 (stmt_vec_info stmt_vinfo, gimple *new_stmt,\n    Insert a new stmt (INIT_STMT) that initializes a new variable of type\n    TYPE with the value VAL.  If TYPE is a vector type and VAL does not have\n    vector type a vector with all elements equal to VAL is created first.\n-   Place the initialization at BSI if it is not NULL.  Otherwise, place the\n+   Place the initialization at GSI if it is not NULL.  Otherwise, place the\n    initialization at the loop preheader.\n    Return the DEF of INIT_STMT.\n    It will be used in the vectorization of STMT_INFO.  */\n@@ -4484,7 +4484,7 @@ vectorizable_simd_clone_call (stmt_vec_info stmt_info,\n \n    Create a vector stmt whose code, type, number of arguments, and result\n    variable are CODE, OP_TYPE, and VEC_DEST, and its arguments are\n-   VEC_OPRND0 and VEC_OPRND1.  The new vector stmt is to be inserted at BSI.\n+   VEC_OPRND0 and VEC_OPRND1.  The new vector stmt is to be inserted at GSI.\n    In the case that CODE is a CALL_EXPR, this means that a call to DECL\n    needs to be created (DECL is a function-decl of a target-builtin).\n    STMT_INFO is the original scalar stmt that we are vectorizing.  */\n@@ -10474,12 +10474,12 @@ vectorizable_comparison (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n /* If SLP_NODE is nonnull, return true if vectorizable_live_operation\n    can handle all live statements in the node.  Otherwise return true\n    if STMT_INFO is not live or if vectorizable_live_operation can handle it.\n-   GSI and VEC_STMT are as for vectorizable_live_operation.  */\n+   GSI and VEC_STMT_P are as for vectorizable_live_operation.  */\n \n static bool\n can_vectorize_live_stmts (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t\t\t  slp_tree slp_node, slp_instance slp_node_instance,\n-\t\t\t  stmt_vec_info *vec_stmt,\n+\t\t\t  bool vec_stmt_p,\n \t\t\t  stmt_vector_for_cost *cost_vec)\n {\n   if (slp_node)\n@@ -10491,14 +10491,14 @@ can_vectorize_live_stmts (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t  if (STMT_VINFO_LIVE_P (slp_stmt_info)\n \t      && !vectorizable_live_operation (slp_stmt_info, gsi, slp_node,\n \t\t\t\t\t       slp_node_instance, i,\n-\t\t\t\t\t       vec_stmt, cost_vec))\n+\t\t\t\t\t       vec_stmt_p, cost_vec))\n \t    return false;\n \t}\n     }\n   else if (STMT_VINFO_LIVE_P (stmt_info)\n \t   && !vectorizable_live_operation (stmt_info, gsi, slp_node,\n \t\t\t\t\t    slp_node_instance, -1,\n-\t\t\t\t\t    vec_stmt, cost_vec))\n+\t\t\t\t\t    vec_stmt_p, cost_vec))\n     return false;\n \n   return true;\n@@ -10712,7 +10712,7 @@ vect_analyze_stmt (stmt_vec_info stmt_info, bool *need_to_vectorize,\n       && STMT_VINFO_TYPE (stmt_info) != reduc_vec_info_type\n       && STMT_VINFO_TYPE (stmt_info) != lc_phi_info_type\n       && !can_vectorize_live_stmts (stmt_info, NULL, node, node_instance,\n-\t\t\t\t    NULL, cost_vec))\n+\t\t\t\t    false, cost_vec))\n     return opt_result::failure_at (stmt_info->stmt,\n \t\t\t\t   \"not vectorized:\"\n \t\t\t\t   \" live stmt not supported: %G\",\n@@ -10724,7 +10724,7 @@ vect_analyze_stmt (stmt_vec_info stmt_info, bool *need_to_vectorize,\n \n /* Function vect_transform_stmt.\n \n-   Create a vectorized stmt to replace STMT_INFO, and insert it at BSI.  */\n+   Create a vectorized stmt to replace STMT_INFO, and insert it at GSI.  */\n \n bool\n vect_transform_stmt (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n@@ -10945,7 +10945,7 @@ vect_transform_stmt (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n   /* Handle stmts whose DEF is used outside the loop-nest that is\n      being vectorized.  */\n   done = can_vectorize_live_stmts (stmt_info, gsi, slp_node,\n-\t\t\t\t   slp_node_instance, &vec_stmt, NULL);\n+\t\t\t\t   slp_node_instance, true, NULL);\n   gcc_assert (done);\n \n   return false;"}, {"sha": "291304fe95e13d8123877d4ff41c6d9fe8d60bb6", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd01f4da3ecc88b25712e2d2a8f5c7ab3ed1b0e3/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd01f4da3ecc88b25712e2d2a8f5c7ab3ed1b0e3/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=bd01f4da3ecc88b25712e2d2a8f5c7ab3ed1b0e3", "patch": "@@ -1653,8 +1653,7 @@ extern opt_loop_vec_info vect_analyze_loop_form (class loop *,\n \t\t\t\t\t\t vec_info_shared *);\n extern bool vectorizable_live_operation (stmt_vec_info, gimple_stmt_iterator *,\n \t\t\t\t\t slp_tree, slp_instance, int,\n-\t\t\t\t\t stmt_vec_info *,\n-\t\t\t\t\t stmt_vector_for_cost *);\n+\t\t\t\t\t bool, stmt_vector_for_cost *);\n extern bool vectorizable_reduction (stmt_vec_info, slp_tree, slp_instance,\n \t\t\t\t    stmt_vector_for_cost *);\n extern bool vectorizable_induction (stmt_vec_info, gimple_stmt_iterator *,"}]}