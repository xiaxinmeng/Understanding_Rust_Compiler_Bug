{"sha": "a40970cf043553f0ca09a3b7be1c5a949623d915", "node_id": "C_kwDOANBUbNoAKGE0MDk3MGNmMDQzNTUzZjBjYTA5YTNiN2JlMWM1YTk0OTYyM2Q5MTU", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-10-08T22:44:13Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-11T13:38:13Z"}, "message": "[Ada] Fix problematic import of type-generic GCC atomic builtin\n\ngcc/ada/\n\n\t* gcc-interface/gigi.h (resolve_atomic_size): Declare.\n\t(list_third): New inline function.\n\t* gcc-interface/decl.c (type_for_atomic_builtin_p): New function.\n\t(resolve_atomic_builtin): Likewise.\n\t(gnat_to_gnu_subprog_type): Perform type resolution for most of\n\ttype-generic GCC atomic builtins and give an error for the rest.\n\t* gcc-interface/utils2.c (resolve_atomic_size): Make public.", "tree": {"sha": "b977237c5022bf6bcb363c9ee9588719c1b40077", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b977237c5022bf6bcb363c9ee9588719c1b40077"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a40970cf043553f0ca09a3b7be1c5a949623d915", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a40970cf043553f0ca09a3b7be1c5a949623d915", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a40970cf043553f0ca09a3b7be1c5a949623d915", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a40970cf043553f0ca09a3b7be1c5a949623d915/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a0d6b70e3877728772b177e35b0a429d5501698", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a0d6b70e3877728772b177e35b0a429d5501698", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a0d6b70e3877728772b177e35b0a429d5501698"}], "stats": {"total": 152, "additions": 142, "deletions": 10}, "files": [{"sha": "639cf064d7818641c7e3d5683d07c0805c2d587e", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 130, "deletions": 9, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40970cf043553f0ca09a3b7be1c5a949623d915/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40970cf043553f0ca09a3b7be1c5a949623d915/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=a40970cf043553f0ca09a3b7be1c5a949623d915", "patch": "@@ -241,6 +241,8 @@ static void set_rm_size (Uint, tree, Entity_Id);\n static unsigned int validate_alignment (Uint, Entity_Id, unsigned int);\n static unsigned int promote_object_alignment (tree, tree, Entity_Id);\n static void check_ok_for_atomic_type (tree, Entity_Id, bool);\n+static bool type_for_atomic_builtin_p (tree);\n+static tree resolve_atomic_builtin (enum built_in_function, tree);\n static tree create_field_decl_from (tree, tree, tree, tree, tree,\n \t\t\t\t    vec<subst_pair>);\n static tree create_rep_part (tree, tree, tree);\n@@ -6312,14 +6314,106 @@ gnat_to_gnu_subprog_type (Entity_Id gnat_subprog, bool definition,\n \t     the checker is expected to post diagnostics in this case.  */\n \t  if (gnu_builtin_decl)\n \t    {\n-\t      const intrin_binding_t inb\n-\t\t= { gnat_subprog, gnu_type, TREE_TYPE (gnu_builtin_decl) };\n-\n-\t      if (!intrin_profiles_compatible_p (&inb))\n-\t\tpost_error\n-\t\t  (\"??profile of& doesn''t match the builtin it binds!\",\n-\t\t   gnat_subprog);\n-\t      return gnu_builtin_decl;\n+\t      if (fndecl_built_in_p (gnu_builtin_decl, BUILT_IN_NORMAL))\n+\t\t{\n+\t\t  const enum built_in_function fncode\n+\t\t    = DECL_FUNCTION_CODE (gnu_builtin_decl);\n+\n+\t\t  switch (fncode)\n+\t\t  {\n+\t\t    case BUILT_IN_SYNC_FETCH_AND_ADD_N:\n+\t\t    case BUILT_IN_SYNC_FETCH_AND_SUB_N:\n+\t\t    case BUILT_IN_SYNC_FETCH_AND_OR_N:\n+\t\t    case BUILT_IN_SYNC_FETCH_AND_AND_N:\n+\t\t    case BUILT_IN_SYNC_FETCH_AND_XOR_N:\n+\t\t    case BUILT_IN_SYNC_FETCH_AND_NAND_N:\n+\t\t    case BUILT_IN_SYNC_ADD_AND_FETCH_N:\n+\t\t    case BUILT_IN_SYNC_SUB_AND_FETCH_N:\n+\t\t    case BUILT_IN_SYNC_OR_AND_FETCH_N:\n+\t\t    case BUILT_IN_SYNC_AND_AND_FETCH_N:\n+\t\t    case BUILT_IN_SYNC_XOR_AND_FETCH_N:\n+\t\t    case BUILT_IN_SYNC_NAND_AND_FETCH_N:\n+\t\t    case BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_N:\n+\t\t    case BUILT_IN_SYNC_LOCK_TEST_AND_SET_N:\n+\t\t    case BUILT_IN_ATOMIC_EXCHANGE_N:\n+\t\t    case BUILT_IN_ATOMIC_LOAD_N:\n+\t\t    case BUILT_IN_ATOMIC_ADD_FETCH_N:\n+\t\t    case BUILT_IN_ATOMIC_SUB_FETCH_N:\n+\t\t    case BUILT_IN_ATOMIC_AND_FETCH_N:\n+\t\t    case BUILT_IN_ATOMIC_NAND_FETCH_N:\n+\t\t    case BUILT_IN_ATOMIC_XOR_FETCH_N:\n+\t\t    case BUILT_IN_ATOMIC_OR_FETCH_N:\n+\t\t    case BUILT_IN_ATOMIC_FETCH_ADD_N:\n+\t\t    case BUILT_IN_ATOMIC_FETCH_SUB_N:\n+\t\t    case BUILT_IN_ATOMIC_FETCH_AND_N:\n+\t\t    case BUILT_IN_ATOMIC_FETCH_NAND_N:\n+\t\t    case BUILT_IN_ATOMIC_FETCH_XOR_N:\n+\t\t    case BUILT_IN_ATOMIC_FETCH_OR_N:\n+\t\t      /* This is a generic builtin overloaded on its return\n+\t\t\t type, so do type resolution based on it.  */\n+\t\t      if (!VOID_TYPE_P (gnu_return_type)\n+\t\t\t  && type_for_atomic_builtin_p (gnu_return_type))\n+\t\t\tgnu_builtin_decl\n+\t\t\t  = resolve_atomic_builtin (fncode, gnu_return_type);\n+\t\t      else\n+\t\t\t{\n+\t\t\t  post_error\n+\t\t\t    (\"??cannot import type-generic 'G'C'C builtin!\",\n+\t\t\t     gnat_subprog);\n+\t\t\t  post_error\n+\t\t\t    (\"\\\\?use a supported result type\",\n+\t\t\t     gnat_subprog);\n+\t\t\t  gnu_builtin_decl = NULL_TREE;\n+\t\t\t}\n+\t\t      break;\n+\n+\t\t    case BUILT_IN_ATOMIC_COMPARE_EXCHANGE_N:\n+\t\t      /* This is a generic builtin overloaded on its third\n+\t\t\t parameter type, so do type resolution based on it.  */\n+\t\t      if (list_length (gnu_param_type_list) >= 4\n+\t\t\t  && type_for_atomic_builtin_p\n+\t\t\t       (list_third (gnu_param_type_list)))\n+\t\t\tgnu_builtin_decl\n+\t\t\t  = resolve_atomic_builtin\n+\t\t\t      (fncode, list_third (gnu_param_type_list));\n+\t\t      else\n+\t\t\t{\n+\t\t\t  post_error\n+\t\t\t    (\"??cannot import type-generic 'G'C'C builtin!\",\n+\t\t\t     gnat_subprog);\n+\t\t\t  post_error\n+\t\t\t    (\"\\\\?use a supported third parameter type\",\n+\t\t\t     gnat_subprog);\n+\t\t\t  gnu_builtin_decl = NULL_TREE;\n+\t\t\t}\n+\t\t      break;\n+\n+\t\t    case BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_N:\n+\t\t    case BUILT_IN_SYNC_LOCK_RELEASE_N:\n+\t\t    case BUILT_IN_ATOMIC_STORE_N:\n+\t\t      post_error\n+\t\t\t(\"??unsupported type-generic 'G'C'C builtin!\",\n+\t\t\t gnat_subprog);\n+\t\t      gnu_builtin_decl = NULL_TREE;\n+\t\t      break;\n+\n+\t\t    default:\n+\t\t      break;\n+\t\t  }\n+\t\t}\n+\n+\t      if (gnu_builtin_decl)\n+\t\t{\n+\t\t  const intrin_binding_t inb\n+\t\t    = { gnat_subprog, gnu_type, TREE_TYPE (gnu_builtin_decl) };\n+\n+\t\t  if (!intrin_profiles_compatible_p (&inb))\n+\t\t    post_error\n+\t\t      (\"??profile of& doesn''t match the builtin it binds!\",\n+\t\t       gnat_subprog);\n+\n+\t\t  return gnu_builtin_decl;\n+\t\t}\n \t    }\n \n \t  /* Inability to find the builtin DECL most often indicates a genuine\n@@ -6329,7 +6423,7 @@ gnat_to_gnu_subprog_type (Entity_Id gnat_subprog, bool definition,\n \t     on demand without risking false positives with common default sets\n \t     of options.  */\n \t  if (warn_shadow)\n-\t    post_error (\"'G'C'C intrinsic not found for&!??\", gnat_subprog);\n+\t    post_error (\"'G'C'C builtin not found for&!??\", gnat_subprog);\n \t}\n     }\n \n@@ -9512,6 +9606,33 @@ check_ok_for_atomic_type (tree type, Entity_Id gnat_entity, bool component_p)\n \t\t   gnat_error_point, gnat_entity);\n }\n \n+/* Return true if TYPE is suitable for a type-generic atomic builtin.  */\n+\n+static bool\n+type_for_atomic_builtin_p (tree type)\n+{\n+  const enum machine_mode mode = TYPE_MODE (type);\n+  if (GET_MODE_CLASS (mode) == MODE_FLOAT)\n+    return true;\n+\n+  scalar_int_mode imode;\n+  if (is_a <scalar_int_mode> (mode, &imode) && GET_MODE_SIZE (imode) <= 16)\n+    return true;\n+\n+  return false;\n+}\n+\n+/* Return the GCC atomic builtin based on CODE and sized for TYPE.  */\n+\n+static tree\n+resolve_atomic_builtin (enum built_in_function code, tree type)\n+{\n+  const unsigned int size = resolve_atomic_size (type);\n+  code = (enum built_in_function) ((int) code + exact_log2 (size) + 1);\n+\n+  return builtin_decl_implicit (code);\n+}\n+\n /* Helper for intrin_profiles_compatible_p, to perform compatibility checks\n    on the Ada/builtin argument lists for the INB binding.  */\n "}, {"sha": "1b55ec55df407ba79772b004ce2195bb0c5ade38", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40970cf043553f0ca09a3b7be1c5a949623d915/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40970cf043553f0ca09a3b7be1c5a949623d915/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=a40970cf043553f0ca09a3b7be1c5a949623d915", "patch": "@@ -1026,6 +1026,9 @@ extern Entity_Id get_debug_scope (Node_Id gnat_node, bool *is_subprogram);\n    should be synchronized with Exp_Dbug.Debug_Renaming_Declaration.  */\n extern bool can_materialize_object_renaming_p (Node_Id expr);\n \n+/* Return the size of TYPE, which must be a positive power of 2.  */\n+extern unsigned int resolve_atomic_size (tree type);\n+\n #ifdef __cplusplus\n extern \"C\" {\n #endif\n@@ -1223,3 +1226,11 @@ operand_type (tree expr)\n {\n   return TREE_TYPE (TREE_OPERAND (expr, 0));\n }\n+\n+/* Return the third value of a list.  */\n+\n+static inline tree\n+list_third (tree list)\n+{\n+  return TREE_VALUE (TREE_CHAIN (TREE_CHAIN (list)));\n+}"}, {"sha": "06d82035c67f38d4bdf2ad1239389eedc7158873", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40970cf043553f0ca09a3b7be1c5a949623d915/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40970cf043553f0ca09a3b7be1c5a949623d915/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=a40970cf043553f0ca09a3b7be1c5a949623d915", "patch": "@@ -663,7 +663,7 @@ nonbinary_modular_operation (enum tree_code op_code, tree type, tree lhs,\n \n /* Return the size of TYPE, which must be a positive power of 2.  */\n \n-static unsigned int\n+unsigned int\n resolve_atomic_size (tree type)\n {\n   unsigned HOST_WIDE_INT size = tree_to_uhwi (TYPE_SIZE_UNIT (type));"}]}