{"sha": "27fa520dc722b9044c303f4ba9a88a57dabd0501", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdmYTUyMGRjNzIyYjkwNDRjMzAzZjRiYTlhODhhNTdkYWJkMDUwMQ==", "commit": {"author": {"name": "Adam Megacz", "email": "adam@xwt.org", "date": "2002-02-12T01:54:18Z"}, "committer": {"name": "Adam Megacz", "email": "megacz@gcc.gnu.org", "date": "2002-02-12T01:54:18Z"}, "message": "natFileWin32.cc: Created a placeholder class with lots of FIXMEs.\n\n2002-02-11  Adam Megacz <adam@xwt.org>\n\n        * java/io/natFileWin32.cc: Created a placeholder class with lots\n        of FIXMEs.\n\nFrom-SVN: r49691", "tree": {"sha": "8ed587c280d539be0d402915941cc1926f9b6529", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ed587c280d539be0d402915941cc1926f9b6529"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27fa520dc722b9044c303f4ba9a88a57dabd0501", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27fa520dc722b9044c303f4ba9a88a57dabd0501", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27fa520dc722b9044c303f4ba9a88a57dabd0501", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27fa520dc722b9044c303f4ba9a88a57dabd0501/comments", "author": null, "committer": null, "parents": [{"sha": "5667c33d018a6f97ce58985a46c6f4e6e545f034", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5667c33d018a6f97ce58985a46c6f4e6e545f034", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5667c33d018a6f97ce58985a46c6f4e6e545f034"}], "stats": {"total": 116, "additions": 53, "deletions": 63}, "files": [{"sha": "895286a6520c04adcb7c11bd0abd82734ba1720b", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27fa520dc722b9044c303f4ba9a88a57dabd0501/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27fa520dc722b9044c303f4ba9a88a57dabd0501/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=27fa520dc722b9044c303f4ba9a88a57dabd0501", "patch": "@@ -1,3 +1,8 @@\n+2002-02-11  Adam Megacz <adam@xwt.org>\n+\n+\t* java/io/natFileWin32.cc: Created a placeholder class with lots\n+\tof FIXMEs.\n+\n 2002-02-11  Adam Megacz <adam@xwt.org>\n \n \t* exception.cc (_Jv_Throw, PERSONALITY_FUNCTION): Changed"}, {"sha": "2ecfbf226b0cea095b65daa578316776382c0954", "filename": "libjava/java/io/natFileWin32.cc", "status": "modified", "additions": 48, "deletions": 63, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27fa520dc722b9044c303f4ba9a88a57dabd0501/libjava%2Fjava%2Fio%2FnatFileWin32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27fa520dc722b9044c303f4ba9a88a57dabd0501/libjava%2Fjava%2Fio%2FnatFileWin32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FnatFileWin32.cc?ref=27fa520dc722b9044c303f4ba9a88a57dabd0501", "patch": "@@ -1,6 +1,6 @@\n-// natFileWin32.cc - Native part of File class for Win32.\n+// natFileWin32.cc - Native part of File class.\n \n-/* Copyright (C) 1998, 1999, 2001  Free Software Foundation, Inc.\n+/* Copyright (C) 1998, 1999  Red Hat, Inc.\n \n    This file is part of libgcj.\n \n@@ -22,13 +22,17 @@ details.  */\n #include <java/util/Vector.h>\n #include <java/lang/String.h>\n #include <java/io/FilenameFilter.h>\n+#include <java/io/FileFilter.h>\n #include <java/lang/System.h>\n \n jboolean\n java::io::File::_access (jint query)\n {\n+  jstring canon = getCanonicalPath();\n+  if (! canon)\n+    return false;\n   char buf[MAX_PATH];\n-  jsize total = JvGetStringUTFRegion (path, 0, path->length(), buf);\n+  jsize total = JvGetStringUTFRegion (canon, 0, canon->length(), buf);\n   // FIXME?\n   buf[total] = '\\0';\n \n@@ -48,13 +52,14 @@ java::io::File::_access (jint query)\n jboolean\n java::io::File::_stat (jint query)\n {\n+  jstring canon = getCanonicalPath();\n+  if (! canon)\n+    return false;\n   char buf[MAX_PATH];\n-  jsize total = JvGetStringUTFRegion (path, 0, path->length(), buf);\n+  jsize total = JvGetStringUTFRegion (canon, 0, canon->length(), buf);\n   // FIXME?\n   buf[total] = '\\0';\n \n-  // FIXME: Need to handle ISHIDDEN query.\n-\n   JvAssert (query == DIRECTORY || query == ISFILE);\n \n   DWORD attributes = GetFileAttributes (buf);\n@@ -70,8 +75,11 @@ java::io::File::_stat (jint query)\n jlong\n java::io::File::attr (jint query)\n {\n+  jstring canon = getCanonicalPath();\n+  if (! canon)\n+    return false;\n   char buf[MAX_PATH];\n-  jsize total = JvGetStringUTFRegion (path, 0, path->length(), buf);\n+  jsize total = JvGetStringUTFRegion (canon, 0, canon->length(), buf);\n   // FIXME?\n   buf[total] = '\\0';\n \n@@ -84,7 +92,7 @@ java::io::File::attr (jint query)\n   if (query == LENGTH)\n     return ((long long)info.nFileSizeHigh) << 32 | (unsigned long long)info.nFileSizeLow;\n   else {\n-    // FIXME? This is somewhat compiler dependent (the LL constant suffix)\n+    // FIXME? This is somewhat compiler dependant (the LL constant suffix)\n     // The file time as return by windows is the number of 100-nanosecond intervals since January 1, 1601\n     return (((((long long)info.ftLastWriteTime.dwHighDateTime) << 32) | ((unsigned long long)info.ftLastWriteTime.dwLowDateTime)) - 116444736000000000LL) / 10000LL;\n   }\n@@ -100,7 +108,7 @@ java::io::File::getCanonicalPath (void)\n \n   LPTSTR unused;\n   if(!GetFullPathName(buf, MAX_PATH, buf2, &unused))\n-    throw new IOException (JvNewStringLatin1 (\"GetFullPathName failed\"));\n+    _Jv_Throw (new IOException (JvNewStringLatin1 (\"GetFullPathName failed\")));\n \n   // FIXME: what encoding to assume for file names?  This affects many\n   // calls.\n@@ -123,13 +131,19 @@ java::io::File::isAbsolute (void)\n \t  && (path->charAt(2) == '/' || path->charAt(2) == '\\\\'));\n }\n \n-jstringArray\n+void java::io::File::init_native() { }\n+\n+\n+jobjectArray\n java::io::File::performList (java::io::FilenameFilter *filter, \n \t\t\t     java::io::FileFilter *fileFilter, \n-\t\t\t     java::lang::Class *result_type)\n+\t\t\t     java::lang::Class *clazz)\n {\n+  jstring canon = getCanonicalPath();\n+  if (! canon)\n+    return NULL;\n   char buf[MAX_PATH];\n-  jsize total = JvGetStringUTFRegion (path, 0, path->length(), buf);\n+  jsize total = JvGetStringUTFRegion (canon, 0, canon->length(), buf);\n   // FIXME?\n   strcpy(&buf[total], \"\\\\*.*\");\n \n@@ -138,28 +152,22 @@ java::io::File::performList (java::io::FilenameFilter *filter,\n   if (handle == INVALID_HANDLE_VALUE)\n     return NULL;\n \n-  java::util::ArrayList *list = new java::util::ArrayList ();\n+  java::util::Vector *vec = new java::util::Vector ();\n \n   do\n     {\n       if (strcmp (data.cFileName, \".\") && strcmp (data.cFileName, \"..\"))\n         {\n           jstring name = JvNewStringUTF (data.cFileName);\n \n-\t  if (filter && ! filter->accept(this, name))\n-\t    continue;\n-\n-\t  if (result_type == &java::io::File::class$)\n-            {\n-\t      java::io::File *file = new java::io::File (this, name);\n-\t      if (fileFilter && ! fileFilter->accept(file))\n-\t\tcontinue;\n+          if (filter && !filter->accept(this, name)) continue;\n+          if (clazz == &java::io::File::class$) {\n+              java::io::File *file = new java::io::File (this, name);\n+              if (fileFilter && !fileFilter->accept(file)) continue;\n+          }\n+          vec->addElement (name);\n \n-\t      list->add(file);\n-\t    }\n-\t  else\n-\t    list->add(name);\n-\t}\n+        }\n     }\n   while (FindNextFile (handle, &data));\n \n@@ -168,11 +176,17 @@ java::io::File::performList (java::io::FilenameFilter *filter,\n \n   FindClose (handle);\n \n-  jobjectArray ret = JvNewObjectArray (vec->size(), path->getClass(), NULL);\n+  jobjectArray ret = JvNewObjectArray (vec->size(), canon->getClass(), NULL);\n   vec->copyInto (ret);\n-  return reinterpret_cast<jstringArray> (ret);\n+  if (clazz == &java::io::File::class$) {\n+      jobject *ret_elements = elements(ret);\n+      for(int i=0; i<ret->length; i++)\n+          ret_elements[i] = new File((jstring)(ret_elements[i]));\n+  }\n+  return ret;\n }\n \n+\n jboolean\n java::io::File::performMkdir (void)\n {\n@@ -184,20 +198,6 @@ java::io::File::performMkdir (void)\n   return (CreateDirectory(buf, NULL)) ? true : false;\n }\n \n-jboolean\n-java::io::File::performSetReadOnly (void)\n-{\n-  // PLEASE IMPLEMENT ME\n-  return false;\n-}\n-\n-JArray< ::java::io::File *>*\n-java::io::File::performListRoots ()\n-{\n-  // PLEASE IMPLEMENT ME\n-  return NULL;\n-}\n-\n jboolean\n java::io::File::performRenameTo (File *dest)\n {\n@@ -213,25 +213,12 @@ java::io::File::performRenameTo (File *dest)\n   return (MoveFile(buf, buf2)) ? true : false;\n }\n \n-jboolean\n-java::io::File::performSetLastModified (jlong time)\n-{\n-  // PLEASE IMPLEMENT ME\n-  return false;\n-}\n-\n-jboolean\n-java::io::File::performCreate (void)\n-{\n-  // PLEASE IMPLEMENT ME\n-  return false;\n-}\n-\n jboolean\n java::io::File::performDelete ()\n {\n+  jstring canon = getCanonicalPath();\n   char buf[MAX_PATH];\n-  jsize total = JvGetStringUTFRegion(path, 0, path->length(), buf);\n+  jsize total = JvGetStringUTFRegion(canon, 0, canon->length(), buf);\n   // FIXME?\n   buf[total] = '\\0';\n \n@@ -245,9 +232,7 @@ java::io::File::performDelete ()\n     return (DeleteFile (buf)) ? true : false;\n }\n \n-void\n-java::io::File::init_native ()\n-{\n-  maxPathLen = MAX_PATH;\n-  caseSensitive = false;\n-}\n+jboolean java::io::File::performCreate (void) { JvFail(\"unimplemented\\n\"); }\n+jboolean java::io::File::performSetReadOnly() { JvFail(\"unimplemented\"); }\n+jboolean java::io::File::performSetLastModified(jlong time) { JvFail(\"unimplemented\"); }\n+JArray<java::io::File*>* java::io::File::performListRoots() { JvFail(\"unimplemented\"); }"}]}