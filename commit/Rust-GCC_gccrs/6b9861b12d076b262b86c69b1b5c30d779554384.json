{"sha": "6b9861b12d076b262b86c69b1b5c30d779554384", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI5ODYxYjEyZDA3NmIyNjJiODZjNjliMWI1YzMwZDc3OTU1NDM4NA==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2015-02-20T10:30:24Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2015-02-20T10:30:24Z"}, "message": "re PR target/64452 (ICE in avr-gcc when passing struct member to varargs function)\n\ngcc/\n\tPR target/64452\n\t* config/avr/avr.md (pushhi_insn): New insn.\n\t(push<mode>1): Push virtual regs in one chunk using pushhi1_insn.\ngcc/testsuite/\n\tPR target/64452\n\t* gcc.target/avr/torture/pr64452.c: New test.\n\nFrom-SVN: r220847", "tree": {"sha": "32404d84675376465de1430fa8c5ef9d914e0340", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32404d84675376465de1430fa8c5ef9d914e0340"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b9861b12d076b262b86c69b1b5c30d779554384", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b9861b12d076b262b86c69b1b5c30d779554384", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b9861b12d076b262b86c69b1b5c30d779554384", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b9861b12d076b262b86c69b1b5c30d779554384/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db3267c60664bcfa8d7b0683a5567b24432b5a48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db3267c60664bcfa8d7b0683a5567b24432b5a48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db3267c60664bcfa8d7b0683a5567b24432b5a48"}], "stats": {"total": 93, "additions": 85, "deletions": 8}, "files": [{"sha": "8d37e3534e7a2ba1dabf08b971cbce6f97c3c493", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9861b12d076b262b86c69b1b5c30d779554384/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9861b12d076b262b86c69b1b5c30d779554384/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b9861b12d076b262b86c69b1b5c30d779554384", "patch": "@@ -1,3 +1,9 @@\n+2015-02-20  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/64452\n+\t* config/avr/avr.md (pushhi_insn): New insn.\n+\t(push<mode>1): Push virtual regs in one chunk using pushhi1_insn.\n+\n 2015-02-20  Bernd Schmidt  <bernds@codesourcery.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "d6d930c74b68c31c0d165bf474f4e654f8cd9aa6", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 40, "deletions": 8, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9861b12d076b262b86c69b1b5c30d779554384/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9861b12d076b262b86c69b1b5c30d779554384/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=6b9861b12d076b262b86c69b1b5c30d779554384", "patch": "@@ -371,6 +371,13 @@\n \tpush __zero_reg__\"\n   [(set_attr \"length\" \"1,1\")])\n \n+(define_insn \"pushhi1_insn\"\n+  [(set (mem:HI (post_dec:HI (reg:HI REG_SP)))\n+        (match_operand:HI 0 \"register_operand\" \"r\"))]\n+  \"\"\n+  \"push %B0\\;push %A0\"\n+  [(set_attr \"length\" \"2\")])\n+\n ;; All modes for a multi-byte push.  We must include complex modes here too,\n ;; lest emit_single_push_insn \"helpfully\" create the auto-inc itself.\n (define_mode_iterator MPUSH\n@@ -386,17 +393,42 @@\n   [(match_operand:MPUSH 0 \"\" \"\")]\n   \"\"\n   {\n-    int i;\n-\n-    // Avoid (subreg (mem)) for non-generic address spaces below.  Because\n-    // of the poor addressing capabilities of these spaces it's better to\n-    // load them in one chunk.  And it avoids PR61443.\n-\n     if (MEM_P (operands[0])\n         && !ADDR_SPACE_GENERIC_P (MEM_ADDR_SPACE (operands[0])))\n-      operands[0] = copy_to_mode_reg (<MODE>mode, operands[0]);\n+      {\n+        // Avoid (subreg (mem)) for non-generic address spaces.  Because\n+        // of the poor addressing capabilities of these spaces it's better to\n+        // load them in one chunk.  And it avoids PR61443.\n+\n+        operands[0] = copy_to_mode_reg (<MODE>mode, operands[0]);\n+      }\n+    else if (REG_P (operands[0])\n+             && IN_RANGE (REGNO (operands[0]), FIRST_VIRTUAL_REGISTER,\n+                          LAST_VIRTUAL_REGISTER))\n+      {\n+        // Byte-wise pushing of virtual regs might result in something like\n+        //\n+        //     (set (mem:QI (post_dec:HI (reg:HI 32 SP)))\n+        //          (subreg:QI (plus:HI (reg:HI 28)\n+        //                              (const_int 17)) 0))\n+        //\n+        // after elimination.  This cannot be handled by reload, cf. PR64452.\n+        // Reload virtuals in one chunk.  That way it's possible to reload\n+        // above situation and finally\n+        //\n+        //    (set (reg:HI **)\n+        //         (const_int 17))\n+        //    (set (reg:HI **)\n+        //         (plus:HI (reg:HI **)\n+        //                  (reg:HI 28)))\n+        //    (set (mem:HI (post_dec:HI (reg:HI 32 SP))\n+        //         (reg:HI **)))\n+ \n+        emit_insn (gen_pushhi1_insn (operands[0]));\n+        DONE;\n+      }\n \n-    for (i = GET_MODE_SIZE (<MODE>mode) - 1; i >= 0; --i)\n+    for (int i = GET_MODE_SIZE (<MODE>mode) - 1; i >= 0; --i)\n       {\n         rtx part = simplify_gen_subreg (QImode, operands[0], <MODE>mode, i);\n         if (part != const0_rtx)"}, {"sha": "2409cfb0fa7e788e30e0f52864b92989e57a5310", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9861b12d076b262b86c69b1b5c30d779554384/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9861b12d076b262b86c69b1b5c30d779554384/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b9861b12d076b262b86c69b1b5c30d779554384", "patch": "@@ -1,3 +1,8 @@\n+2015-02-20  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/64452\n+\t* gcc.target/avr/torture/pr64452.c: New test.\n+\n 2015-02-19  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* gcc.dg/tree-ssa/20040204-1.c: Don't XFAIL on sh*-*-*."}, {"sha": "44cb2e057ddc72f8d86e4dc61c2952527eb445fa", "filename": "gcc/testsuite/gcc.target/avr/torture/pr64452.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9861b12d076b262b86c69b1b5c30d779554384/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fpr64452.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9861b12d076b262b86c69b1b5c30d779554384/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fpr64452.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fpr64452.c?ref=6b9861b12d076b262b86c69b1b5c30d779554384", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99\" } */\n+\n+struct A\n+{\n+    char str[8];\n+    void* v;\n+};\n+\n+int varf (char* fmt, ...);\n+\n+void foo (struct A a, struct A b)\n+{\n+    varf (\"%s%s\", b.str, b.str);\n+}\n+\n+long long x64;\n+\n+void foo2 (long long j0,\n+           struct A a, struct A b, struct A c, struct A d,\n+           struct A e, struct A f, struct A g, struct A h, struct A i,\n+           long long j1)\n+{\n+    varf (\"%s%s\", i.str, i.str, x64, j1+j0);\n+}\n+\n+\n+void foo3 (long long j0,\n+           struct A a, struct A b, struct A c, struct A d,\n+           struct A e, struct A f, struct A g, struct A h, struct A i,\n+           long long j1)\n+{\n+    varf (\"%s%s\", &i.str, &b.str, x64, j1+j0);\n+}"}]}