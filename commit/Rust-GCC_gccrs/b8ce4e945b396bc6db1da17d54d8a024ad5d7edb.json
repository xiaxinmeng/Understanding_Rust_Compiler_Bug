{"sha": "b8ce4e945b396bc6db1da17d54d8a024ad5d7edb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhjZTRlOTQ1YjM5NmJjNmRiMWRhMTdkNTRkOGEwMjRhZDVkN2VkYg==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@redhat.com", "date": "2011-04-11T17:44:04Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2011-04-11T17:44:04Z"}, "message": "re PR target/9601 (-mrtd switch/stdcall attribute raises warnings for __buitltin functions)\n\n2011-04-11  Kai Tietz  <ktietz@redhat.com>\n\n\tPR target/9601\n\tPR target/11772\n\t* config/i386/i386-protos.h (ix86_get_callcvt): New prototype.\n\t* config/i386/i386.c (ix86_handle_cconv_attribute): Adjust\n\tcomment.\n\t(ix86_is_msabi_thiscall): Removed.\n\t(ix86_is_type_thiscall): Likewise.\n\t(ix86_get_callcvt): New function.\n\t(ix86_comp_type_attributes): Simplify check.\n\t(ix86_function_regparm): Use ix86_get_callcvt for calling\n\tconvention attribute checks.\n\t(ix86_return_pops_args): Likewise.\n\t(ix86_static_chain): Likewise.\n\t(x86_this_parameter): Likewise.\n\t(x86_output_mi_thunk): Likewise.\n\t(ix86_function_type_abi): Optimize check for types without attributes.\n\t* config/i386/i386.h (IX86_CALLCVT_CDECL, IX86_CALLCVT_STDCALL,\n\tIX86_CALLCVT_FASTCALL, IX86_CALLCVT_THISCALL, IX86_CALLCVT_REGPARM,\n\tIX86_CALLCVT_SSEREGPARM): New macros to represent calling convention\n\tby flag-values.\n\t(IX86_BASE_CALLCVT): Helper macro.\n\t* config/i386/netware.c (i386_nlm_maybe_mangle_decl_assembler_name):\n\tUse ix86_get_callcvt for calling convention attribute checks and avoid\n\tsymbol-decoration for stdcall in TARGET_RTD case.\n\t* config/i386/winnt.c (i386_pe_maybe_mangle_decl_assembler_name):\n\tLikewise.\n\t(gen_stdcall_or_fastcall_suffix): Adjust ident and use DECL_ORIGIN\n\tfor declaration.\n\nFrom-SVN: r172268", "tree": {"sha": "16d3f3c329373f5acdb052ece30109419b3d2949", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16d3f3c329373f5acdb052ece30109419b3d2949"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8ce4e945b396bc6db1da17d54d8a024ad5d7edb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8ce4e945b396bc6db1da17d54d8a024ad5d7edb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8ce4e945b396bc6db1da17d54d8a024ad5d7edb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8ce4e945b396bc6db1da17d54d8a024ad5d7edb/comments", "author": null, "committer": null, "parents": [{"sha": "a1b01a84590fa422d7c9d913b6131d0d7ba57f20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1b01a84590fa422d7c9d913b6131d0d7ba57f20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1b01a84590fa422d7c9d913b6131d0d7ba57f20"}], "stats": {"total": 279, "additions": 162, "deletions": 117}, "files": [{"sha": "36ca4804b1274b2ef42e2dab72b49fd97e7ddc78", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ce4e945b396bc6db1da17d54d8a024ad5d7edb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ce4e945b396bc6db1da17d54d8a024ad5d7edb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8ce4e945b396bc6db1da17d54d8a024ad5d7edb", "patch": "@@ -1,3 +1,34 @@\n+2011-04-11  Kai Tietz  <ktietz@redhat.com>\n+\n+\tPR target/9601\n+\tPR target/11772\n+\t* config/i386/i386-protos.h (ix86_get_callcvt): New prototype.\n+\t* config/i386/i386.c (ix86_handle_cconv_attribute): Adjust\n+\tcomment.\n+\t(ix86_is_msabi_thiscall): Removed.\n+\t(ix86_is_type_thiscall): Likewise.\n+\t(ix86_get_callcvt): New function.\n+\t(ix86_comp_type_attributes): Simplify check.\n+\t(ix86_function_regparm): Use ix86_get_callcvt for calling\n+\tconvention attribute checks.\n+\t(ix86_return_pops_args): Likewise.\n+\t(ix86_static_chain): Likewise.\n+\t(x86_this_parameter): Likewise.\n+\t(x86_output_mi_thunk): Likewise.\n+\t(ix86_function_type_abi): Optimize check for types without attributes.\n+\t* config/i386/i386.h (IX86_CALLCVT_CDECL, IX86_CALLCVT_STDCALL,\n+\tIX86_CALLCVT_FASTCALL, IX86_CALLCVT_THISCALL, IX86_CALLCVT_REGPARM,\n+\tIX86_CALLCVT_SSEREGPARM): New macros to represent calling convention\n+\tby flag-values.\n+\t(IX86_BASE_CALLCVT): Helper macro.\n+\t* config/i386/netware.c (i386_nlm_maybe_mangle_decl_assembler_name):\n+\tUse ix86_get_callcvt for calling convention attribute checks and avoid\n+\tsymbol-decoration for stdcall in TARGET_RTD case.\n+\t* config/i386/winnt.c (i386_pe_maybe_mangle_decl_assembler_name):\n+\tLikewise.\n+\t(gen_stdcall_or_fastcall_suffix): Adjust ident and use DECL_ORIGIN\n+\tfor declaration.\n+\n 2011-04-11  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/sse.md (VI_128): New mode iterator."}, {"sha": "4b34e411808a960feab0103ea0459875a98c72af", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ce4e945b396bc6db1da17d54d8a024ad5d7edb/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ce4e945b396bc6db1da17d54d8a024ad5d7edb/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=b8ce4e945b396bc6db1da17d54d8a024ad5d7edb", "patch": "@@ -191,6 +191,8 @@ extern tree ix86_handle_shared_attribute (tree *, tree, tree, int, bool *);\n extern tree ix86_handle_selectany_attribute (tree *, tree, tree, int, bool *);\n extern int x86_field_alignment (tree, int);\n extern tree ix86_valid_target_attribute_tree (tree);\n+extern unsigned int ix86_get_callcvt (const_tree);\n+\n #endif\n \n extern rtx ix86_tls_get_addr (void);"}, {"sha": "62187021e8aeb967db2d7228cea9e45d19acd370", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 92, "deletions": 107, "changes": 199, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ce4e945b396bc6db1da17d54d8a024ad5d7edb/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ce4e945b396bc6db1da17d54d8a024ad5d7edb/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b8ce4e945b396bc6db1da17d54d8a024ad5d7edb", "patch": "@@ -5312,7 +5312,7 @@ ix86_handle_cconv_attribute (tree *node, tree name,\n       return NULL_TREE;\n     }\n \n-  /* Can combine regparm with all attributes but fastcall.  */\n+  /* Can combine regparm with all attributes but fastcall, and thiscall.  */\n   if (is_attribute_p (\"regparm\", name))\n     {\n       tree cst;\n@@ -5436,38 +5436,54 @@ ix86_handle_cconv_attribute (tree *node, tree name,\n   return NULL_TREE;\n }\n \n-/* This function checks if the method-function has default __thiscall\n-   calling-convention for 32-bit msabi.\n-   It returns true if TYPE is of kind METHOD_TYPE, no stdarg function,\n-   and the MS_ABI 32-bit is used.  Otherwise it returns false.  */\n+/* This function determines from TYPE the calling-convention.  */\n \n-static bool\n-ix86_is_msabi_thiscall (const_tree type)\n+unsigned int\n+ix86_get_callcvt (const_tree type)\n {\n-  if (TARGET_64BIT || ix86_function_type_abi (type) != MS_ABI\n-      || TREE_CODE (type) != METHOD_TYPE || stdarg_p (type))\n-    return false;\n-  /* Check for different calling-conventions.  */\n-  if (lookup_attribute (\"cdecl\", TYPE_ATTRIBUTES (type))\n-      || lookup_attribute (\"stdcall\", TYPE_ATTRIBUTES (type))\n-      || lookup_attribute (\"fastcall\", TYPE_ATTRIBUTES (type))\n-      || lookup_attribute (\"regparm\", TYPE_ATTRIBUTES (type))\n-      || lookup_attribute (\"sseregparm\", TYPE_ATTRIBUTES (type)))\n-    return false;\n-  return true;\n-}\n+  unsigned int ret = 0;\n+  bool is_stdarg;\n+  tree attrs;\n \n-/* This function checks if the thiscall attribute is set for the TYPE,\n-   or if it is an method-type with default thiscall convention.\n-   It returns true if function match, otherwise false is returned.  */\n+  if (TARGET_64BIT)\n+    return IX86_CALLCVT_CDECL;\n \n-static bool\n-ix86_is_type_thiscall (const_tree type)\n-{\n-  if (lookup_attribute (\"thiscall\", TYPE_ATTRIBUTES (type))\n-      || ix86_is_msabi_thiscall (type))\n-    return true;\n-  return false;\n+  attrs = TYPE_ATTRIBUTES (type);\n+  if (attrs != NULL_TREE)\n+    {\n+      if (lookup_attribute (\"cdecl\", attrs))\n+\tret |= IX86_CALLCVT_CDECL;\n+      else if (lookup_attribute (\"stdcall\", attrs))\n+\tret |= IX86_CALLCVT_STDCALL;\n+      else if (lookup_attribute (\"fastcall\", attrs))\n+\tret |= IX86_CALLCVT_FASTCALL;\n+      else if (lookup_attribute (\"thiscall\", attrs))\n+\tret |= IX86_CALLCVT_THISCALL;\n+\n+      /* Regparam isn't allowed for thiscall and fastcall.  */\n+      if ((ret & (IX86_CALLCVT_THISCALL | IX86_CALLCVT_FASTCALL)) == 0)\n+\t{\n+\t  if (lookup_attribute (\"regparm\", attrs))\n+\t    ret |= IX86_CALLCVT_REGPARM;\n+\t  if (lookup_attribute (\"sseregparm\", attrs))\n+\t    ret |= IX86_CALLCVT_SSEREGPARM;\n+\t}\n+\n+      if (IX86_BASE_CALLCVT(ret) != 0)\n+\treturn ret;\n+    }\n+\n+  is_stdarg = stdarg_p (type);\n+  if (TARGET_RTD && !is_stdarg)\n+    return IX86_CALLCVT_STDCALL | ret;\n+\n+  if (ret != 0\n+      || is_stdarg\n+      || TREE_CODE (type) != METHOD_TYPE\n+      || ix86_function_type_abi (type) != MS_ABI)\n+    return IX86_CALLCVT_CDECL | ret;\n+\n+  return IX86_CALLCVT_THISCALL;\n }\n \n /* Return 0 if the attributes for two types are incompatible, 1 if they\n@@ -5477,43 +5493,18 @@ ix86_is_type_thiscall (const_tree type)\n static int\n ix86_comp_type_attributes (const_tree type1, const_tree type2)\n {\n-  /* Check for mismatch of non-default calling convention.  */\n-  bool is_thiscall = ix86_is_msabi_thiscall (type1);\n-  const char *const rtdstr = TARGET_RTD ? (is_thiscall ? \"thiscall\" : \"cdecl\") : \"stdcall\";\n+  unsigned int ccvt1, ccvt2;\n \n   if (TREE_CODE (type1) != FUNCTION_TYPE\n       && TREE_CODE (type1) != METHOD_TYPE)\n     return 1;\n \n-  /* Check for mismatched fastcall/regparm types.  */\n-  if ((!lookup_attribute (\"fastcall\", TYPE_ATTRIBUTES (type1))\n-       != !lookup_attribute (\"fastcall\", TYPE_ATTRIBUTES (type2)))\n-      || (ix86_function_regparm (type1, NULL)\n-\t  != ix86_function_regparm (type2, NULL)))\n-    return 0;\n-\n-  /* Check for mismatched sseregparm types.  */\n-  if (!lookup_attribute (\"sseregparm\", TYPE_ATTRIBUTES (type1))\n-      != !lookup_attribute (\"sseregparm\", TYPE_ATTRIBUTES (type2)))\n+  ccvt1 = ix86_get_callcvt (type1);\n+  ccvt2 = ix86_get_callcvt (type2);\n+  if (ccvt1 != ccvt2)\n     return 0;\n-\n-  /* Check for mismatched thiscall types.  */\n-  if (is_thiscall && !TARGET_RTD)\n-    {\n-      if (!lookup_attribute (\"cdecl\", TYPE_ATTRIBUTES (type1))\n-\t  != !lookup_attribute (\"cdecl\", TYPE_ATTRIBUTES (type2)))\n-\treturn 0;\n-    }\n-  else if (!is_thiscall || TARGET_RTD)\n-    {\n-      if (!lookup_attribute (\"thiscall\", TYPE_ATTRIBUTES (type1))\n-\t  != !lookup_attribute (\"thiscall\", TYPE_ATTRIBUTES (type2)))\n-\treturn 0;\n-    }\n-\n-  /* Check for mismatched return types (cdecl vs stdcall).  */\n-  if (!lookup_attribute (rtdstr, TYPE_ATTRIBUTES (type1))\n-      != !lookup_attribute (rtdstr, TYPE_ATTRIBUTES (type2)))\n+  if (ix86_function_regparm (type1, NULL)\n+      != ix86_function_regparm (type2, NULL))\n     return 0;\n \n   return 1;\n@@ -5528,23 +5519,26 @@ ix86_function_regparm (const_tree type, const_tree decl)\n {\n   tree attr;\n   int regparm;\n+  unsigned int ccvt;\n \n   if (TARGET_64BIT)\n     return (ix86_function_type_abi (type) == SYSV_ABI\n \t    ? X86_64_REGPARM_MAX : X86_64_MS_REGPARM_MAX);\n-\n+  ccvt = ix86_get_callcvt (type);\n   regparm = ix86_regparm;\n-  attr = lookup_attribute (\"regparm\", TYPE_ATTRIBUTES (type));\n-  if (attr)\n+\n+  if ((ccvt & IX86_CALLCVT_REGPARM) != 0)\n     {\n-      regparm = TREE_INT_CST_LOW (TREE_VALUE (TREE_VALUE (attr)));\n-      return regparm;\n+      attr = lookup_attribute (\"regparm\", TYPE_ATTRIBUTES (type));\n+      if (attr)\n+\t{\n+\t  regparm = TREE_INT_CST_LOW (TREE_VALUE (TREE_VALUE (attr)));\n+\t  return regparm;\n+\t}\n     }\n-\n-  if (lookup_attribute (\"fastcall\", TYPE_ATTRIBUTES (type)))\n+  else if ((ccvt & IX86_CALLCVT_FASTCALL) != 0)\n     return 2;\n-\n-  if (ix86_is_type_thiscall (type))\n+  else if ((ccvt & IX86_CALLCVT_THISCALL) != 0)\n     return 1;\n \n   /* Use register calling convention for local functions when possible.  */\n@@ -5695,27 +5689,18 @@ ix86_keep_aggregate_return_pointer (tree fntype)\n static int\n ix86_return_pops_args (tree fundecl, tree funtype, int size)\n {\n-  int rtd;\n+  unsigned int ccvt;\n \n   /* None of the 64-bit ABIs pop arguments.  */\n   if (TARGET_64BIT)\n     return 0;\n \n-  rtd = TARGET_RTD && (!fundecl || TREE_CODE (fundecl) != IDENTIFIER_NODE);\n+  ccvt = ix86_get_callcvt (funtype);\n \n-  /* Cdecl functions override -mrtd, and never pop the stack.  */\n-  if (! lookup_attribute (\"cdecl\", TYPE_ATTRIBUTES (funtype)))\n-    {\n-      /* Stdcall and fastcall functions will pop the stack if not\n-         variable args.  */\n-      if (lookup_attribute (\"stdcall\", TYPE_ATTRIBUTES (funtype))\n-\t  || lookup_attribute (\"fastcall\", TYPE_ATTRIBUTES (funtype))\n-          || ix86_is_type_thiscall (funtype))\n-\trtd = 1;\n-\n-      if (rtd && ! stdarg_p (funtype))\n-\treturn size;\n-    }\n+  if ((ccvt & (IX86_CALLCVT_STDCALL | IX86_CALLCVT_FASTCALL\n+\t       | IX86_CALLCVT_THISCALL)) != 0\n+      && ! stdarg_p (funtype))\n+    return size;\n \n   /* Lose any fake structure return argument if it is passed on the stack.  */\n   if (aggregate_value_p (TREE_TYPE (funtype), fundecl)\n@@ -5818,7 +5803,7 @@ ix86_reg_parm_stack_space (const_tree fndecl)\n enum calling_abi\n ix86_function_type_abi (const_tree fntype)\n {\n-  if (fntype != NULL)\n+  if (fntype != NULL_TREE && TYPE_ATTRIBUTES (fntype) != NULL_TREE)\n     {\n       enum calling_abi abi = ix86_abi;\n       if (abi == SYSV_ABI)\n@@ -6048,12 +6033,13 @@ init_cumulative_args (CUMULATIVE_ARGS *cum,  /* Argument info to initialize */\n \t else look for regparm information.  */\n       if (fntype)\n \t{\n-\t  if (ix86_is_type_thiscall (fntype))\n+\t  unsigned int ccvt = ix86_get_callcvt (fntype);\n+\t  if ((ccvt & IX86_CALLCVT_THISCALL) != 0)\n \t    {\n \t      cum->nregs = 1;\n \t      cum->fastcall = 1; /* Same first register as in fastcall.  */\n \t    }\n-\t  else if (lookup_attribute (\"fastcall\", TYPE_ATTRIBUTES (fntype)))\n+\t  else if ((ccvt & IX86_CALLCVT_FASTCALL) != 0)\n \t    {\n \t      cum->nregs = 2;\n \t      cum->fastcall = 1;\n@@ -9839,13 +9825,13 @@ find_drap_reg (void)\n \n       /* Reuse static chain register if it isn't used for parameter\n          passing.  */\n-      if (ix86_function_regparm (TREE_TYPE (decl), decl) <= 2\n-\t  && !lookup_attribute (\"fastcall\",\n-    \t\t\t\tTYPE_ATTRIBUTES (TREE_TYPE (decl)))\n-\t  && !ix86_is_type_thiscall (TREE_TYPE (decl)))\n-\treturn CX_REG;\n-      else\n-\treturn DI_REG;\n+      if (ix86_function_regparm (TREE_TYPE (decl), decl) <= 2)\n+\t{\n+\t  unsigned int ccvt = ix86_get_callcvt (TREE_TYPE (decl));\n+\t  if ((ccvt & (IX86_CALLCVT_FASTCALL | IX86_CALLCVT_THISCALL)) == 0)\n+\t    return CX_REG;\n+\t}\n+      return DI_REG;\n     }\n }\n \n@@ -23283,20 +23269,19 @@ ix86_static_chain (const_tree fndecl, bool incoming_p)\n   else\n     {\n       tree fntype;\n+      unsigned int ccvt;\n+\n       /* By default in 32-bit mode we use ECX to pass the static chain.  */\n       regno = CX_REG;\n \n       fntype = TREE_TYPE (fndecl);\n-      if (lookup_attribute (\"fastcall\", TYPE_ATTRIBUTES (fntype)))\n+      ccvt = ix86_get_callcvt (fntype);\n+      if ((ccvt & (IX86_CALLCVT_FASTCALL | IX86_CALLCVT_THISCALL)) != 0)\n \t{\n \t  /* Fastcall functions use ecx/edx for arguments, which leaves\n-\t     us with EAX for the static chain.  */\n-\t  regno = AX_REG;\n-\t}\n-      else if (ix86_is_type_thiscall (fntype))\n-\t{\n-\t  /* Thiscall functions use ecx for arguments, which leaves\n-\t     us with EAX for the static chain.  */\n+\t     us with EAX for the static chain.\n+\t     Thiscall functions use ecx for arguments, which also\n+\t     leaves us with EAX for the static chain.  */\n \t  regno = AX_REG;\n \t}\n       else if (ix86_function_regparm (fntype, fndecl) == 3)\n@@ -29847,10 +29832,11 @@ x86_this_parameter (tree function)\n   if (nregs > 0 && !stdarg_p (type))\n     {\n       int regno;\n+      unsigned int ccvt = ix86_get_callcvt (type);\n \n-      if (lookup_attribute (\"fastcall\", TYPE_ATTRIBUTES (type)))\n+      if ((ccvt & IX86_CALLCVT_FASTCALL) != 0)\n \tregno = aggr ? DX_REG : CX_REG;\n-      else if (ix86_is_type_thiscall (type))\n+      else if ((ccvt & IX86_CALLCVT_THISCALL) != 0)\n         {\n \t  regno = CX_REG;\n \t  if (aggr)\n@@ -29967,9 +29953,8 @@ x86_output_mi_thunk (FILE *file,\n       else\n \t{\n \t  int tmp_regno = CX_REG;\n-\t  if (lookup_attribute (\"fastcall\",\n-\t\t\t\tTYPE_ATTRIBUTES (TREE_TYPE (function)))\n-\t      || ix86_is_type_thiscall (TREE_TYPE (function)))\n+\t  unsigned int ccvt = ix86_get_callcvt (TREE_TYPE (function));\n+\t  if ((ccvt & (IX86_CALLCVT_FASTCALL | IX86_CALLCVT_THISCALL)) != 0)\n \t    tmp_regno = AX_REG;\n \t  tmp = gen_rtx_REG (SImode, tmp_regno);\n \t}"}, {"sha": "511429a727a4cfe7f46f20f7095136c43990b3d8", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ce4e945b396bc6db1da17d54d8a024ad5d7edb/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ce4e945b396bc6db1da17d54d8a024ad5d7edb/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=b8ce4e945b396bc6db1da17d54d8a024ad5d7edb", "patch": "@@ -2368,6 +2368,18 @@ extern void debug_dispatch_window (int);\n \t((VALUE) = GET_MODE_BITSIZE (MODE), TARGET_BMI)\n \n \n+/* Flags returned by ix86_get_callcvt ().  */\n+#define IX86_CALLCVT_CDECL\t0x1\n+#define IX86_CALLCVT_STDCALL\t0x2\n+#define IX86_CALLCVT_FASTCALL\t0x4\n+#define IX86_CALLCVT_THISCALL\t0x8\n+#define IX86_CALLCVT_REGPARM\t0x10\n+#define IX86_CALLCVT_SSEREGPARM\t0x20\n+\n+#define IX86_BASE_CALLCVT(FLAGS) \\\n+\t((FLAGS) & (IX86_CALLCVT_CDECL | IX86_CALLCVT_STDCALL \\\n+\t\t    | IX86_CALLCVT_FASTCALL | IX86_CALLCVT_THISCALL))\n+\n /*\n Local variables:\n version-control: t"}, {"sha": "80f26f88aecddfa6e16bd734154d7344ca6ac0f3", "filename": "gcc/config/i386/netware.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ce4e945b396bc6db1da17d54d8a024ad5d7edb/gcc%2Fconfig%2Fi386%2Fnetware.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ce4e945b396bc6db1da17d54d8a024ad5d7edb/gcc%2Fconfig%2Fi386%2Fnetware.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetware.c?ref=b8ce4e945b396bc6db1da17d54d8a024ad5d7edb", "patch": "@@ -148,12 +148,20 @@ i386_nlm_maybe_mangle_decl_assembler_name (tree decl, tree id)\n {\n   tree type_attributes = TYPE_ATTRIBUTES (TREE_TYPE (decl));\n   tree new_id;\n+  unsigned int ccvt = ix86_get_callcvt (TREE_TYPE (decl));\n \n-  if (lookup_attribute (\"stdcall\", type_attributes))\n-    new_id = gen_stdcall_or_fastcall_decoration (decl, id, '_');\n-  else if (lookup_attribute (\"fastcall\", type_attributes))\n+  if ((ccvt & IX86_CALLCVT_STDCALL) != 0)\n+    {\n+      if (TARGET_RTD)\n+\t/* If we are using -mrtd emit undecorated symbol and let linker\n+\t   do the proper resolving.  */\n+\treturn NULL_TREE;\n+      new_id = gen_stdcall_or_fastcall_decoration (decl, id, '_');\n+    }\n+  else if ((ccvt & IX86_CALLCVT_FASTCALL) != 0)\n     new_id = gen_stdcall_or_fastcall_decoration (decl, id, FASTCALL_PREFIX);\n-  else if ((new_id = lookup_attribute (\"regparm\", type_attributes)))\n+  else if ((cvt & IX86_CALLCVT_REGPARM) != 0\n+\t   && (new_id = lookup_attribute (\"regparm\", type_attributes)))\n     new_id = gen_regparm_prefix (decl, id,\n \t\t  TREE_INT_CST_LOW (TREE_VALUE (TREE_VALUE (new_id))));\n   else"}, {"sha": "8e7043f1fe524d98e8ab43b3c3c6d3676ef72d07", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ce4e945b396bc6db1da17d54d8a024ad5d7edb/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ce4e945b396bc6db1da17d54d8a024ad5d7edb/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=b8ce4e945b396bc6db1da17d54d8a024ad5d7edb", "patch": "@@ -170,7 +170,7 @@ gen_stdcall_or_fastcall_suffix (tree decl, tree id, bool fastcall)\n   HOST_WIDE_INT total = 0;\n   const char *old_str = IDENTIFIER_POINTER (id != NULL_TREE ? id : DECL_NAME (decl));\n   char *new_str, *p;\n-  tree type = TREE_TYPE (decl);\n+  tree type = TREE_TYPE (DECL_ORIGIN (decl));\n   tree arg;\n   function_args_iterator args_iter;\n \n@@ -202,7 +202,8 @@ gen_stdcall_or_fastcall_suffix (tree decl, tree id, bool fastcall)\n \t\t       / parm_boundary_bytes * parm_boundary_bytes);\n \t  total += parm_size;\n \t}\n-      }\n+    }\n+\n   /* Assume max of 8 base 10 digits in the suffix.  */\n   p = new_str = XALLOCAVEC (char, 1 + strlen (old_str) + 1 + 8 + 1);\n   if (fastcall)\n@@ -222,10 +223,16 @@ i386_pe_maybe_mangle_decl_assembler_name (tree decl, tree id)\n \n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     { \n-      tree type_attributes = TYPE_ATTRIBUTES (TREE_TYPE (decl));\n-      if (lookup_attribute (\"stdcall\", type_attributes))\n-\tnew_id = gen_stdcall_or_fastcall_suffix (decl, id, false);\n-      else if (lookup_attribute (\"fastcall\", type_attributes))\n+      unsigned int ccvt = ix86_get_callcvt (TREE_TYPE (decl));\n+      if ((ccvt & IX86_CALLCVT_STDCALL) != 0)\n+        {\n+\t  if (TARGET_RTD)\n+\t    /* If we are using -mrtd emit undecorated symbol and let linker\n+\t       do the proper resolving.  */\n+\t    return NULL_TREE;\n+\t  new_id = gen_stdcall_or_fastcall_suffix (decl, id, false);\n+\t}\n+      else if ((ccvt & IX86_CALLCVT_FASTCALL) != 0)\n \tnew_id = gen_stdcall_or_fastcall_suffix (decl, id, true);\n     }\n "}]}