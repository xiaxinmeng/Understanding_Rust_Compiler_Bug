{"sha": "0e5b369ef15294d10ee8efa432bbb3d6822d065b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU1YjM2OWVmMTUyOTRkMTBlZThlZmE0MzJiYmIzZDY4MjJkMDY1Yg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-07-30T14:16:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-07-30T14:16:24Z"}, "message": "re PR tree-optimization/91257 (Compile-time and memory-hog hog)\n\n2019-07-30  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/91257\n\t* bitmap.c (bitmap_ior_and_compl_into): Open-code.\n\nFrom-SVN: r273909", "tree": {"sha": "128e9e1184a90f8f94fc60d9f437c12d100788a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/128e9e1184a90f8f94fc60d9f437c12d100788a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e5b369ef15294d10ee8efa432bbb3d6822d065b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e5b369ef15294d10ee8efa432bbb3d6822d065b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e5b369ef15294d10ee8efa432bbb3d6822d065b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e5b369ef15294d10ee8efa432bbb3d6822d065b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "200b0e7e82c8dce95aa9afeec23579b8a7e19dce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/200b0e7e82c8dce95aa9afeec23579b8a7e19dce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/200b0e7e82c8dce95aa9afeec23579b8a7e19dce"}], "stats": {"total": 76, "additions": 70, "deletions": 6}, "files": [{"sha": "052586441744f6ea33864bc123ac513bb8ddda70", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e5b369ef15294d10ee8efa432bbb3d6822d065b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e5b369ef15294d10ee8efa432bbb3d6822d065b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e5b369ef15294d10ee8efa432bbb3d6822d065b", "patch": "@@ -1,3 +1,8 @@\n+2019-07-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/91257\n+\t* bitmap.c (bitmap_ior_and_compl_into): Open-code.\n+\n 2019-07-30  Martin Liska  <mliska@suse.cz>\n \n \t* doc/invoke.texi: Document new behavior."}, {"sha": "ce68a62835826b01414ff949525023b47b1625da", "filename": "gcc/bitmap.c", "status": "modified", "additions": 65, "deletions": 6, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e5b369ef15294d10ee8efa432bbb3d6822d065b/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e5b369ef15294d10ee8efa432bbb3d6822d065b/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=0e5b369ef15294d10ee8efa432bbb3d6822d065b", "patch": "@@ -2421,16 +2421,75 @@ bitmap_ior_and_compl (bitmap dst, const_bitmap a, const_bitmap b, const_bitmap k\n bool\n bitmap_ior_and_compl_into (bitmap a, const_bitmap b, const_bitmap c)\n {\n-  bitmap_head tmp;\n-  bool changed;\n+  bitmap_element *a_elt = a->first;\n+  const bitmap_element *b_elt = b->first;\n+  const bitmap_element *c_elt = c->first;\n+  bitmap_element and_elt;\n+  bitmap_element *a_prev = NULL;\n+  bitmap_element **a_prev_pnext = &a->first;\n+  bool changed = false;\n+  unsigned ix;\n \n   gcc_checking_assert (!a->tree_form && !b->tree_form && !c->tree_form);\n \n-  bitmap_initialize (&tmp, &bitmap_default_obstack);\n-  bitmap_and_compl (&tmp, b, c);\n-  changed = bitmap_ior_into (a, &tmp);\n-  bitmap_clear (&tmp);\n+  if (a == b)\n+    return false;\n+  if (bitmap_empty_p (c))\n+    return bitmap_ior_into (a, b);\n+  else if (bitmap_empty_p (a))\n+    return bitmap_and_compl (a, b, c);\n+\n+  and_elt.indx = -1;\n+  while (b_elt)\n+    {\n+      /* Advance C.  */\n+      while (c_elt && c_elt->indx < b_elt->indx)\n+\tc_elt = c_elt->next;\n+\n+      const bitmap_element *and_elt_ptr;\n+      if (c_elt && c_elt->indx == b_elt->indx)\n+\t{\n+\t  BITMAP_WORD overall = 0;\n+\t  and_elt_ptr = &and_elt;\n+\t  and_elt.indx = b_elt->indx;\n+\t  for (ix = 0; ix < BITMAP_ELEMENT_WORDS; ix++)\n+\t    {\n+\t      and_elt.bits[ix] = b_elt->bits[ix] & ~c_elt->bits[ix];\n+\t      overall |= and_elt.bits[ix];\n+\t    }\n+\t  if (!overall)\n+\t    {\n+\t      b_elt = b_elt->next;\n+\t      continue;\n+\t    }\n+\t}\n+      else\n+\tand_elt_ptr = b_elt;\n+\n+      b_elt = b_elt->next;\n \n+      /* Now find a place to insert AND_ELT.  */\n+      do\n+\t{\n+\t  ix = a_elt ? a_elt->indx : and_elt_ptr->indx;\n+          if (ix == and_elt_ptr->indx)\n+\t    changed = bitmap_elt_ior (a, a_elt, a_prev, a_elt,\n+\t\t\t\t      and_elt_ptr, changed);\n+          else if (ix > and_elt_ptr->indx)\n+\t    changed = bitmap_elt_copy (a, NULL, a_prev, and_elt_ptr, changed);\n+\n+          a_prev = *a_prev_pnext;\n+          a_prev_pnext = &a_prev->next;\n+          a_elt = *a_prev_pnext;\n+\n+          /* If A lagged behind B/C, we advanced it so loop once more.  */\n+\t}\n+      while (ix < and_elt_ptr->indx);\n+    }\n+\n+  gcc_checking_assert (!a->current == !a->first);\n+  if (a->current)\n+    a->indx = a->current->indx;\n   return changed;\n }\n "}]}