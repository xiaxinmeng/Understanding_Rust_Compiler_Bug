{"sha": "778032166d960d97541e652c59684d1187d0233c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc4MDMyMTY2ZDk2MGQ5NzU0MWU2NTJjNTk2ODRkMTE4N2QwMjMzYw==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-04-17T12:24:15Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-04-26T13:42:50Z"}, "message": "Replace !irange::undefined_p checks with num_ranges > 0 for readability.\n\nA few of the undefined_p checks in the irange code are really checking if\nthere are sub-ranges.  It just so happens that undefined_p is\nimplemented with num_ranges > 0, so it was a shorthand used throughout.\nThis shorthand was making the code unreadable.\n\ngcc/ChangeLog:\n\n\t* value-range.cc (irange::legacy_lower_bound): Replace\n\t  !undefined_p check with num_ranges > 0.\n\t(irange::legacy_upper_bound): Same.\n\t* value-range.h (irange::type): Same.\n\t(irange::lower_bound): Same.\n\t(irange::upper_bound): Same.", "tree": {"sha": "f1308637d63494986959d0346435372079fc082a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1308637d63494986959d0346435372079fc082a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/778032166d960d97541e652c59684d1187d0233c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/778032166d960d97541e652c59684d1187d0233c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/778032166d960d97541e652c59684d1187d0233c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/778032166d960d97541e652c59684d1187d0233c/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ff66d1ea48960fe96bb51a750c01135e65fe452", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ff66d1ea48960fe96bb51a750c01135e65fe452", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ff66d1ea48960fe96bb51a750c01135e65fe452"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "d46662397e7e1ed5b7b2a9a483f18565e7471637", "filename": "gcc/value-range.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/778032166d960d97541e652c59684d1187d0233c/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/778032166d960d97541e652c59684d1187d0233c/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=778032166d960d97541e652c59684d1187d0233c", "patch": "@@ -441,7 +441,7 @@ irange::legacy_lower_bound (unsigned pair) const\n       numeric_range.normalize_symbolics ();\n       return numeric_range.legacy_lower_bound (pair);\n     }\n-  gcc_checking_assert (!undefined_p ());\n+  gcc_checking_assert (m_num_ranges > 0);\n   gcc_checking_assert (pair + 1 <= num_pairs ());\n   if (m_kind == VR_ANTI_RANGE)\n     {\n@@ -468,7 +468,7 @@ irange::legacy_upper_bound (unsigned pair) const\n       numeric_range.normalize_symbolics ();\n       return numeric_range.legacy_upper_bound (pair);\n     }\n-  gcc_checking_assert (!undefined_p ());\n+  gcc_checking_assert (m_num_ranges > 0);\n   gcc_checking_assert (pair + 1 <= num_pairs ());\n   if (m_kind == VR_ANTI_RANGE)\n     {"}, {"sha": "bb27e7062078ae70b90ece5363e6f69bbf15623c", "filename": "gcc/value-range.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/778032166d960d97541e652c59684d1187d0233c/gcc%2Fvalue-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/778032166d960d97541e652c59684d1187d0233c/gcc%2Fvalue-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.h?ref=778032166d960d97541e652c59684d1187d0233c", "patch": "@@ -224,7 +224,7 @@ irange::num_pairs () const\n inline tree\n irange::type () const\n {\n-  gcc_checking_assert (!undefined_p ());\n+  gcc_checking_assert (m_num_ranges > 0);\n   return TREE_TYPE (m_base[0]);\n }\n \n@@ -501,7 +501,7 @@ irange::lower_bound (unsigned pair) const\n {\n   if (legacy_mode_p ())\n     return legacy_lower_bound (pair);\n-  gcc_checking_assert (!undefined_p ());\n+  gcc_checking_assert (m_num_ranges > 0);\n   gcc_checking_assert (pair + 1 <= num_pairs ());\n   return wi::to_wide (tree_lower_bound (pair));\n }\n@@ -514,7 +514,7 @@ irange::upper_bound (unsigned pair) const\n {\n   if (legacy_mode_p ())\n     return legacy_upper_bound (pair);\n-  gcc_checking_assert (!undefined_p ());\n+  gcc_checking_assert (m_num_ranges > 0);\n   gcc_checking_assert (pair + 1 <= num_pairs ());\n   return wi::to_wide (tree_upper_bound (pair));\n }"}]}