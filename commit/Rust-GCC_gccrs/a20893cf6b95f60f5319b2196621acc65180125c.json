{"sha": "a20893cf6b95f60f5319b2196621acc65180125c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIwODkzY2Y2Yjk1ZjYwZjUzMTliMjE5NjYyMWFjYzY1MTgwMTI1Yw==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2021-01-05T10:32:31Z"}, "committer": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2021-01-05T10:32:31Z"}, "message": "build: libcody: Link with -lsocket -lnsl if necessary [PR98316]\n\nWith the introduction of C++20 modules and libcody, cc1plus and\ncc1objplus gained a dependency on the socket functions.  Before those\nwere merged into libc in Solaris 11.4, one needed to link with -lsocket -lnsl\non Solaris, so that merge broke the Solaris 11.3 build.\n\nWhile we already have 4 different checks for those libraries in the\ntree, I decided to import autoconf-archive's AX_LIB_SOCKET_NSL macro\ninstead.  At the same time, the patch only links libcody and the\nnetworking libs where needed (cc1plus, cc1objplus).\n\nBootstrapped without regressions on i386-pc-solaris2.11 (Solaris 11.3\nand 11.4), sparc-sun-solaris2.11, and x86_64-pc-linux-gnu.\n\n2020-12-16  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n\n\tc++tools:\n\tPR c++/98316\n\t* configure.ac: Include ../config/ax_lib_socket_nsl.m4.\n\t(NETLIBS): Determine using AX_LIB_SOCKET_NSL.\n\t* configure: Regenerate.\n\t* Makefile.in (NETLIBS): Define.\n\t(g++-mapper-server$(exeext)): Add $(NETLIBS).\n\n\tgcc/objcp:\n\tPR c++/98316\n\t* Make-lang.in (cc1objplus$(exeext)): Add $(CODYLIB), $(NETLIBS).\n\n\tgcc/cp:\n\tPR c++/98316\n\t* Make-lang.in (cc1plus$(exeext)): Add $(CODYLIB), $(NETLIBS).\n\n\tgcc:\n\tPR c++/98316\n\t* configure.ac (NETLIBS): Determine using AX_LIB_SOCKET_NSL.\n\t* aclocal.m4, configure: Regenerate.\n\t* Makefile.in (NETLIBS): Define.\n\t(BACKEND): Remove $(CODYLIB).\n\n\tconfig:\n\tPR c++/98316\n\t* ax_lib_socket_nsl.m4: Import from autoconf-archive.", "tree": {"sha": "a9758792f3a9e925d450b313def0d351a93ab00f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9758792f3a9e925d450b313def0d351a93ab00f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a20893cf6b95f60f5319b2196621acc65180125c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a20893cf6b95f60f5319b2196621acc65180125c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a20893cf6b95f60f5319b2196621acc65180125c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a20893cf6b95f60f5319b2196621acc65180125c/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4615cde5d7ef281d4b554df411f82ad707f0a54d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4615cde5d7ef281d4b554df411f82ad707f0a54d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4615cde5d7ef281d4b554df411f82ad707f0a54d"}], "stats": {"total": 452, "additions": 446, "deletions": 6}, "files": [{"sha": "9700706206d5601a713485d6507fd121bf7e5476", "filename": "c++tools/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20893cf6b95f60f5319b2196621acc65180125c/c%2B%2Btools%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20893cf6b95f60f5319b2196621acc65180125c/c%2B%2Btools%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/c%2B%2Btools%2FMakefile.in?ref=a20893cf6b95f60f5319b2196621acc65180125c", "patch": "@@ -33,6 +33,7 @@ CXXOPTS := $(CXXFLAGS) $(PIEFLAG) -fno-exceptions -fno-rtti\n LDFLAGS := @LDFLAGS@\n exeext := @EXEEXT@\n LIBIBERTY := ../libiberty/libiberty.a\n+NETLIBS := @NETLIBS@\n VERSION.O := ../gcc/version.o\n \n all::\n@@ -90,7 +91,7 @@ MAPPER.O := server.o resolver.o\n CODYLIB = ../libcody/libcody.a\n CXXINC += -I$(srcdir)/../libcody -I$(srcdir)/../include -I$(srcdir)/../gcc -I.\n g++-mapper-server$(exeext): $(MAPPER.O) $(CODYLIB)\n-\t+$(CXX) $(LDFLAGS) $(PIEFLAG) -o $@ $^ $(VERSION.O) $(LIBIBERTY)\n+\t+$(CXX) $(LDFLAGS) $(PIEFLAG) -o $@ $^ $(VERSION.O) $(LIBIBERTY) $(NETLIBS)\n \n # copy to gcc dir so tests there can run\n all::../gcc/g++-mapper-server$(exeext)"}, {"sha": "3f511b2dbee0485103bc36efbf77431b6f3a3869", "filename": "c++tools/configure", "status": "modified", "additions": 211, "deletions": 0, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20893cf6b95f60f5319b2196621acc65180125c/c%2B%2Btools%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20893cf6b95f60f5319b2196621acc65180125c/c%2B%2Btools%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/c%2B%2Btools%2Fconfigure?ref=a20893cf6b95f60f5319b2196621acc65180125c", "patch": "@@ -622,6 +622,7 @@ ac_includes_default=\"\\\n \n ac_subst_vars='LTLIBOBJS\n LIBOBJS\n+NETLIBS\n get_gcc_base_ver\n EGREP\n GREP\n@@ -1703,6 +1704,52 @@ $as_echo \"$ac_res\" >&6; }\n   eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n \n } # ac_fn_c_check_header_compile\n+\n+# ac_fn_c_try_link LINENO\n+# -----------------------\n+# Try to link conftest.$ac_ext, and return whether this succeeded.\n+ac_fn_c_try_link ()\n+{\n+  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n+  rm -f conftest.$ac_objext conftest$ac_exeext\n+  if { { ac_try=\"$ac_link\"\n+case \"(($ac_try\" in\n+  *\\\"* | *\\`* | *\\\\*) ac_try_echo=\\$ac_try;;\n+  *) ac_try_echo=$ac_try;;\n+esac\n+eval ac_try_echo=\"\\\"\\$as_me:${as_lineno-$LINENO}: $ac_try_echo\\\"\"\n+$as_echo \"$ac_try_echo\"; } >&5\n+  (eval \"$ac_link\") 2>conftest.err\n+  ac_status=$?\n+  if test -s conftest.err; then\n+    grep -v '^ *+' conftest.err >conftest.er1\n+    cat conftest.er1 >&5\n+    mv -f conftest.er1 conftest.err\n+  fi\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; } && {\n+\t test -z \"$ac_c_werror_flag\" ||\n+\t test ! -s conftest.err\n+       } && test -s conftest$ac_exeext && {\n+\t test \"$cross_compiling\" = yes ||\n+\t test -x conftest$ac_exeext\n+       }; then :\n+  ac_retval=0\n+else\n+  $as_echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+\tac_retval=1\n+fi\n+  # Delete the IPA/IPO (Inter Procedural Analysis/Optimization) information\n+  # created by the PGI compiler (conftest_ipa8_conftest.oo), as it would\n+  # interfere with the next link command; also delete a directory that is\n+  # left behind by Apple's compiler.  We do this before executing the actions.\n+  rm -rf conftest.dSYM conftest_ipa8_conftest.oo\n+  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n+  as_fn_set_status $ac_retval\n+\n+} # ac_fn_c_try_link\n cat >config.log <<_ACEOF\n This file contains any messages produced by compilers while\n running configure, to aid debugging if configure makes a mistake.\n@@ -4242,6 +4289,170 @@ fi\n \n \n \n+# Solaris needs libsocket and libnsl for socket functions before 11.4.\n+# libcody uses those.\n+save_LIBS=\"$LIBS\"\n+LIBS=\n+\n+\t{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for library containing gethostbyname\" >&5\n+$as_echo_n \"checking for library containing gethostbyname... \" >&6; }\n+if ${ac_cv_search_gethostbyname+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_func_search_save_LIBS=$LIBS\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char gethostbyname ();\n+int\n+main ()\n+{\n+return gethostbyname ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+for ac_lib in '' nsl; do\n+  if test -z \"$ac_lib\"; then\n+    ac_res=\"none required\"\n+  else\n+    ac_res=-l$ac_lib\n+    LIBS=\"-l$ac_lib  $ac_func_search_save_LIBS\"\n+  fi\n+  if ac_fn_c_try_link \"$LINENO\"; then :\n+  ac_cv_search_gethostbyname=$ac_res\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext\n+  if ${ac_cv_search_gethostbyname+:} false; then :\n+  break\n+fi\n+done\n+if ${ac_cv_search_gethostbyname+:} false; then :\n+\n+else\n+  ac_cv_search_gethostbyname=no\n+fi\n+rm conftest.$ac_ext\n+LIBS=$ac_func_search_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_search_gethostbyname\" >&5\n+$as_echo \"$ac_cv_search_gethostbyname\" >&6; }\n+ac_res=$ac_cv_search_gethostbyname\n+if test \"$ac_res\" != no; then :\n+  test \"$ac_res\" = \"none required\" || LIBS=\"$ac_res $LIBS\"\n+\n+fi\n+\n+\t{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for library containing socket\" >&5\n+$as_echo_n \"checking for library containing socket... \" >&6; }\n+if ${ac_cv_search_socket+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_func_search_save_LIBS=$LIBS\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char socket ();\n+int\n+main ()\n+{\n+return socket ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+for ac_lib in '' socket; do\n+  if test -z \"$ac_lib\"; then\n+    ac_res=\"none required\"\n+  else\n+    ac_res=-l$ac_lib\n+    LIBS=\"-l$ac_lib  $ac_func_search_save_LIBS\"\n+  fi\n+  if ac_fn_c_try_link \"$LINENO\"; then :\n+  ac_cv_search_socket=$ac_res\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext\n+  if ${ac_cv_search_socket+:} false; then :\n+  break\n+fi\n+done\n+if ${ac_cv_search_socket+:} false; then :\n+\n+else\n+  ac_cv_search_socket=no\n+fi\n+rm conftest.$ac_ext\n+LIBS=$ac_func_search_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_search_socket\" >&5\n+$as_echo \"$ac_cv_search_socket\" >&6; }\n+ac_res=$ac_cv_search_socket\n+if test \"$ac_res\" != no; then :\n+  test \"$ac_res\" = \"none required\" || LIBS=\"$ac_res $LIBS\"\n+\n+else\n+\n+\t\t{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for socket in -lsocket\" >&5\n+$as_echo_n \"checking for socket in -lsocket... \" >&6; }\n+if ${ac_cv_lib_socket_socket+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lsocket -lnsl $LIBS\"\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char socket ();\n+int\n+main ()\n+{\n+return socket ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  ac_cv_lib_socket_socket=yes\n+else\n+  ac_cv_lib_socket_socket=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_socket_socket\" >&5\n+$as_echo \"$ac_cv_lib_socket_socket\" >&6; }\n+if test \"x$ac_cv_lib_socket_socket\" = xyes; then :\n+  LIBS=\"-lsocket -lnsl $LIBS\"\n+fi\n+\n+fi\n+\n+\n+NETLIBS=\"$LIBS\"\n+LIBS=\"$save_LIBS\"\n+\n+\n ac_config_headers=\"$ac_config_headers config.h\"\n \n ac_config_files=\"$ac_config_files Makefile\""}, {"sha": "5771f2ace687fe22655b9a1d9bd0803cf351f2a3", "filename": "c++tools/configure.ac", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20893cf6b95f60f5319b2196621acc65180125c/c%2B%2Btools%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20893cf6b95f60f5319b2196621acc65180125c/c%2B%2Btools%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/c%2B%2Btools%2Fconfigure.ac?ref=a20893cf6b95f60f5319b2196621acc65180125c", "patch": "@@ -22,6 +22,7 @@\n # By default g++ uses an in-process mapper.\n \n sinclude(../config/acx.m4)\n+sinclude(../config/ax_lib_socket_nsl.m4)\n \n AC_INIT(c++tools)\n \n@@ -218,6 +219,15 @@ fi\n # Determine what GCC version number to use in filesystem paths.\n GCC_BASE_VER\n \n+# Solaris needs libsocket and libnsl for socket functions before 11.4.\n+# libcody uses those.\n+save_LIBS=\"$LIBS\"\n+LIBS=\n+AX_LIB_SOCKET_NSL\n+NETLIBS=\"$LIBS\"\n+LIBS=\"$save_LIBS\"\n+AC_SUBST(NETLIBS)\n+\n AC_CONFIG_HEADERS([config.h])\n AC_CONFIG_FILES([Makefile])\n "}, {"sha": "54cad68b4c8cd8faec8f672c5b801225a5558509", "filename": "config/ax_lib_socket_nsl.m4", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20893cf6b95f60f5319b2196621acc65180125c/config%2Fax_lib_socket_nsl.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20893cf6b95f60f5319b2196621acc65180125c/config%2Fax_lib_socket_nsl.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fax_lib_socket_nsl.m4?ref=a20893cf6b95f60f5319b2196621acc65180125c", "patch": "@@ -0,0 +1,40 @@\n+# ===========================================================================\n+#    https://www.gnu.org/software/autoconf-archive/ax_lib_socket_nsl.html\n+# ===========================================================================\n+#\n+# SYNOPSIS\n+#\n+#   AX_LIB_SOCKET_NSL\n+#\n+# DESCRIPTION\n+#\n+#   This macro figures out what libraries are required on this platform to\n+#   link sockets programs.\n+#\n+#   The common cases are not to need any extra libraries, or to need\n+#   -lsocket and -lnsl. We need to avoid linking with libnsl unless we need\n+#   it, though, since on some OSes where it isn't necessary it will totally\n+#   break networking. Unisys also includes gethostbyname() in libsocket but\n+#   needs libnsl for socket().\n+#\n+# LICENSE\n+#\n+#   Copyright (c) 2008 Russ Allbery <rra@stanford.edu>\n+#   Copyright (c) 2008 Stepan Kasal <kasal@ucw.cz>\n+#   Copyright (c) 2008 Warren Young <warren@etr-usa.com>\n+#\n+#   Copying and distribution of this file, with or without modification, are\n+#   permitted in any medium without royalty provided the copyright notice\n+#   and this notice are preserved. This file is offered as-is, without any\n+#   warranty.\n+\n+#serial 7\n+\n+AU_ALIAS([LIB_SOCKET_NSL], [AX_LIB_SOCKET_NSL])\n+AC_DEFUN([AX_LIB_SOCKET_NSL],\n+[\n+\tAC_SEARCH_LIBS([gethostbyname], [nsl])\n+\tAC_SEARCH_LIBS([socket], [socket], [], [\n+\t\tAC_CHECK_LIB([socket], [socket], [LIBS=\"-lsocket -lnsl $LIBS\"],\n+\t\t[], [-lnsl])])\n+])"}, {"sha": "30751fe2fe155458ccb885634b2d797b523799bc", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20893cf6b95f60f5319b2196621acc65180125c/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20893cf6b95f60f5319b2196621acc65180125c/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=a20893cf6b95f60f5319b2196621acc65180125c", "patch": "@@ -415,6 +415,7 @@ CPPINC = -I$(srcdir)/../libcpp/include\n \n CODYLIB = ../libcody/libcody.a\n CODYINC = -I$(srcdir)/../libcody\n+NETLIBS = @NETLIBS@\n \n # Where to find decNumber\n enable_decimal_float = @enable_decimal_float@\n@@ -1729,7 +1730,7 @@ endif\n ALL_HOST_OBJS = $(ALL_HOST_FRONTEND_OBJS) $(ALL_HOST_BACKEND_OBJS)\n \n BACKEND = libbackend.a main.o libcommon-target.a libcommon.a \\\n-\t$(CPPLIB) $(CODYLIB) $(LIBDECNUMBER)\n+\t$(CPPLIB) $(LIBDECNUMBER)\n \n # This is defined to \"yes\" if Tree checking is enabled, which roughly means\n # front-end checking."}, {"sha": "6be36df5190c75cb7352b8576c928a0f726a1965", "filename": "gcc/aclocal.m4", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20893cf6b95f60f5319b2196621acc65180125c/gcc%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20893cf6b95f60f5319b2196621acc65180125c/gcc%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Faclocal.m4?ref=a20893cf6b95f60f5319b2196621acc65180125c", "patch": "@@ -18,6 +18,7 @@ m4_include([../ltsugar.m4])\n m4_include([../ltversion.m4])\n m4_include([../lt~obsolete.m4])\n m4_include([../config/acx.m4])\n+m4_include([../config/ax_lib_socket_nsl.m4])\n m4_include([../config/cet.m4])\n m4_include([../config/codeset.m4])\n m4_include([../config/depstand.m4])"}, {"sha": "993ea9d362f3295f6679f74986cab4514c117adf", "filename": "gcc/configure", "status": "modified", "additions": 167, "deletions": 2, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20893cf6b95f60f5319b2196621acc65180125c/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20893cf6b95f60f5319b2196621acc65180125c/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=a20893cf6b95f60f5319b2196621acc65180125c", "patch": "@@ -794,6 +794,7 @@ ZSTD_LIB\n ZSTD_INCLUDE\n DL_LIB\n LDEXP_LIB\n+NETLIBS\n EXTRA_GCC_LIBS\n GNAT_LIBEXC\n COLLECT2_LIBS\n@@ -9866,6 +9867,170 @@ EXTRA_GCC_LIBS=\"$LIBS\"\n LIBS=\"$save_LIBS\"\n \n \n+# Solaris needs libsocket and libnsl for socket functions before 11.4.\n+# C++ needs those for libcody.\n+save_LIBS=\"$LIBS\"\n+LIBS=\n+\n+\t{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for library containing gethostbyname\" >&5\n+$as_echo_n \"checking for library containing gethostbyname... \" >&6; }\n+if ${ac_cv_search_gethostbyname+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_func_search_save_LIBS=$LIBS\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char gethostbyname ();\n+int\n+main ()\n+{\n+return gethostbyname ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+for ac_lib in '' nsl; do\n+  if test -z \"$ac_lib\"; then\n+    ac_res=\"none required\"\n+  else\n+    ac_res=-l$ac_lib\n+    LIBS=\"-l$ac_lib  $ac_func_search_save_LIBS\"\n+  fi\n+  if ac_fn_cxx_try_link \"$LINENO\"; then :\n+  ac_cv_search_gethostbyname=$ac_res\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext\n+  if ${ac_cv_search_gethostbyname+:} false; then :\n+  break\n+fi\n+done\n+if ${ac_cv_search_gethostbyname+:} false; then :\n+\n+else\n+  ac_cv_search_gethostbyname=no\n+fi\n+rm conftest.$ac_ext\n+LIBS=$ac_func_search_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_search_gethostbyname\" >&5\n+$as_echo \"$ac_cv_search_gethostbyname\" >&6; }\n+ac_res=$ac_cv_search_gethostbyname\n+if test \"$ac_res\" != no; then :\n+  test \"$ac_res\" = \"none required\" || LIBS=\"$ac_res $LIBS\"\n+\n+fi\n+\n+\t{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for library containing socket\" >&5\n+$as_echo_n \"checking for library containing socket... \" >&6; }\n+if ${ac_cv_search_socket+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_func_search_save_LIBS=$LIBS\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char socket ();\n+int\n+main ()\n+{\n+return socket ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+for ac_lib in '' socket; do\n+  if test -z \"$ac_lib\"; then\n+    ac_res=\"none required\"\n+  else\n+    ac_res=-l$ac_lib\n+    LIBS=\"-l$ac_lib  $ac_func_search_save_LIBS\"\n+  fi\n+  if ac_fn_cxx_try_link \"$LINENO\"; then :\n+  ac_cv_search_socket=$ac_res\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext\n+  if ${ac_cv_search_socket+:} false; then :\n+  break\n+fi\n+done\n+if ${ac_cv_search_socket+:} false; then :\n+\n+else\n+  ac_cv_search_socket=no\n+fi\n+rm conftest.$ac_ext\n+LIBS=$ac_func_search_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_search_socket\" >&5\n+$as_echo \"$ac_cv_search_socket\" >&6; }\n+ac_res=$ac_cv_search_socket\n+if test \"$ac_res\" != no; then :\n+  test \"$ac_res\" = \"none required\" || LIBS=\"$ac_res $LIBS\"\n+\n+else\n+\n+\t\t{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for socket in -lsocket\" >&5\n+$as_echo_n \"checking for socket in -lsocket... \" >&6; }\n+if ${ac_cv_lib_socket_socket+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lsocket -lnsl $LIBS\"\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char socket ();\n+int\n+main ()\n+{\n+return socket ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_link \"$LINENO\"; then :\n+  ac_cv_lib_socket_socket=yes\n+else\n+  ac_cv_lib_socket_socket=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_socket_socket\" >&5\n+$as_echo \"$ac_cv_lib_socket_socket\" >&6; }\n+if test \"x$ac_cv_lib_socket_socket\" = xyes; then :\n+  LIBS=\"-lsocket -lnsl $LIBS\"\n+fi\n+\n+fi\n+\n+\n+NETLIBS=\"$LIBS\"\n+LIBS=\"$save_LIBS\"\n+\n+\n # Some systems put ldexp and frexp in libm instead of libc; assume\n # they're both in the same place.  jcf-dump needs them.\n save_LIBS=\"$LIBS\"\n@@ -19237,7 +19402,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19240 \"configure\"\n+#line 19405 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -19343,7 +19508,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19346 \"configure\"\n+#line 19511 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "f2ba3a3589d6061d9d654ee783022c6b69643729", "filename": "gcc/configure.ac", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20893cf6b95f60f5319b2196621acc65180125c/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20893cf6b95f60f5319b2196621acc65180125c/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=a20893cf6b95f60f5319b2196621acc65180125c", "patch": "@@ -1333,6 +1333,15 @@ EXTRA_GCC_LIBS=\"$LIBS\"\n LIBS=\"$save_LIBS\"\n AC_SUBST(EXTRA_GCC_LIBS)\n \n+# Solaris needs libsocket and libnsl for socket functions before 11.4.\n+# C++ needs those for libcody.\n+save_LIBS=\"$LIBS\"\n+LIBS=\n+AX_LIB_SOCKET_NSL\n+NETLIBS=\"$LIBS\"\n+LIBS=\"$save_LIBS\"\n+AC_SUBST(NETLIBS)\n+\n # Some systems put ldexp and frexp in libm instead of libc; assume\n # they're both in the same place.  jcf-dump needs them.\n save_LIBS=\"$LIBS\""}, {"sha": "7f01c7d5684e9aab5ea71ed55bc339e94ea63ccc", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20893cf6b95f60f5319b2196621acc65180125c/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20893cf6b95f60f5319b2196621acc65180125c/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=a20893cf6b95f60f5319b2196621acc65180125c", "patch": "@@ -134,7 +134,8 @@ cc1plus-checksum.c : build/genchecksum$(build_exeext) checksum-options \\\n cc1plus$(exeext): $(CXX_OBJS) cc1plus-checksum.o $(BACKEND) $(LIBDEPS) $(c++.prev)\n \t@$(call LINK_PROGRESS,$(INDEX.c++),start)\n \t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n-\t      $(CXX_OBJS) cc1plus-checksum.o $(BACKEND) $(LIBS) $(BACKENDLIBS)\n+\t      $(CXX_OBJS) cc1plus-checksum.o $(BACKEND) $(CODYLIB) $(NETLIBS) \\\n+\t\t$(LIBS) $(BACKENDLIBS)\n \t@$(call LINK_PROGRESS,$(INDEX.c++),end)\n \n ifeq ($(ENABLE_MAINTAINER_RULES), true)"}, {"sha": "a6b474556839be023cb003f71d0856a75eb74305", "filename": "gcc/objcp/Make-lang.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20893cf6b95f60f5319b2196621acc65180125c/gcc%2Fobjcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20893cf6b95f60f5319b2196621acc65180125c/gcc%2Fobjcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2FMake-lang.in?ref=a20893cf6b95f60f5319b2196621acc65180125c", "patch": "@@ -71,7 +71,8 @@ cc1objplus$(exeext): $(OBJCXX_OBJS) cc1objplus-checksum.o $(BACKEND) \\\n \t\t     $(LIBDEPS) $(obj-c++.prev)\n \t@$(call LINK_PROGRESS,$(INDEX.obj-c++),start)\n \t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n-\t\t$(OBJCXX_OBJS) cc1objplus-checksum.o $(BACKEND) $(LIBS) $(BACKENDLIBS)\n+\t\t$(OBJCXX_OBJS) cc1objplus-checksum.o $(BACKEND) \\\n+\t\t  $(CODYLIB) $(NETLIBS) $(LIBS) $(BACKENDLIBS)\n \t@$(call LINK_PROGRESS,$(INDEX.obj-c++),end)\n \n # Objective C++ language specific files."}]}