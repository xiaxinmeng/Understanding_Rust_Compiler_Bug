{"sha": "dfea6c85d86d561ce13b3e0278afab4106547ba8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZlYTZjODVkODZkNTYxY2UxM2IzZTAyNzhhZmFiNDEwNjU0N2JhOA==", "commit": {"author": {"name": "Ben Elliston", "email": "bje@au.ibm.com", "date": "2005-07-19T04:08:32Z"}, "committer": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2005-07-19T04:08:32Z"}, "message": "bt-load.c (link_btr_uses): Fix uninitialised warnings.\n\n\t* bt-load.c (link_btr_uses): Fix uninitialised warnings.\n\t* cfganal.c (find_edge_index): Ditto.\n\t* combine.c (combine_instructions): Ditto.\n\t* ddg.c (create_scc): Ditto.\n\t(find_successors): Ditto.\n\t(find_predecessors): Ditto.\n\t(find_nodes_on_paths): Ditto.\n\t(longest_simple_path): Ditto.\n\t* flow.c (update_life_info): Ditto.\n\t(count_or_remove_death_notes): Ditto.\n\t(clear_log_links): Ditto.\n\t* modulo-sched.c (generate_reg_moves): Ditto.\n\t(find_max_asap): Ditto.\n\t(find_max_hv_min_mob): Ditto.\n\t(find_max_dv_min_mob): Ditto.\n\t* sbitmap.c (sbitmap_first_set_bit): Ditto.\n\t* sched-rgn.c (extract_edgelst): Ditto.\n\t* tree-into-ssa.c (prepare_names_to_update): Ditto.\n\t(dump_update_ssa): Ditto.\n\t(ssa_names_to_replace) Ditto.\n\t(switch_virtuals_to_full_rewrite): Ditto.\n\t(update_ssa): Ditto.\n\t* tree-vect-transform.c (vect_create_epilog_for_reduction): Ditto.\n\nFrom-SVN: r102151", "tree": {"sha": "6dbb8cbe0b281c1de8f2264e4a111ada8e550d69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dbb8cbe0b281c1de8f2264e4a111ada8e550d69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfea6c85d86d561ce13b3e0278afab4106547ba8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfea6c85d86d561ce13b3e0278afab4106547ba8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfea6c85d86d561ce13b3e0278afab4106547ba8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfea6c85d86d561ce13b3e0278afab4106547ba8/comments", "author": null, "committer": null, "parents": [{"sha": "b9d3348810a657d5b64e23cb6f098bd7d479191b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9d3348810a657d5b64e23cb6f098bd7d479191b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9d3348810a657d5b64e23cb6f098bd7d479191b"}], "stats": {"total": 73, "additions": 49, "deletions": 24}, "files": [{"sha": "856623ee7d73b441371f7ae2184755b5e1af5468", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfea6c85d86d561ce13b3e0278afab4106547ba8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfea6c85d86d561ce13b3e0278afab4106547ba8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dfea6c85d86d561ce13b3e0278afab4106547ba8", "patch": "@@ -1,3 +1,29 @@\n+2005-07-19  Ben Elliston  <bje@au.ibm.com>\n+\n+\t* bt-load.c (link_btr_uses): Fix uninitialised warnings.\n+\t* cfganal.c (find_edge_index): Ditto.\n+\t* combine.c (combine_instructions): Ditto.\n+\t* ddg.c (create_scc): Ditto.\n+\t(find_successors): Ditto.\n+\t(find_predecessors): Ditto.\n+\t(find_nodes_on_paths): Ditto.\n+\t(longest_simple_path): Ditto.\n+\t* flow.c (update_life_info): Ditto.\n+\t(count_or_remove_death_notes): Ditto.\n+\t(clear_log_links): Ditto.\n+\t* modulo-sched.c (generate_reg_moves): Ditto.\n+\t(find_max_asap): Ditto.\n+\t(find_max_hv_min_mob): Ditto.\n+\t(find_max_dv_min_mob): Ditto.\n+\t* sbitmap.c (sbitmap_first_set_bit): Ditto.\n+\t* sched-rgn.c (extract_edgelst): Ditto.\n+\t* tree-into-ssa.c (prepare_names_to_update): Ditto.\n+\t(dump_update_ssa): Ditto.\n+\t(ssa_names_to_replace) Ditto.\n+\t(switch_virtuals_to_full_rewrite): Ditto.\n+\t(update_ssa): Ditto.\n+\t* tree-vect-transform.c (vect_create_epilog_for_reduction): Ditto.\n+\n 2005-07-18  Daniel Berlin  <dberlin@dberlin.org>\n \n \tFix PR tree-optimization/22483\n@@ -140,7 +166,6 @@\n \tstatics are not marked as clobbered if the call does not clobber\n \tthem.\n \n-\n 2005-07-16  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* tree-ssa-structalias.c (need_to_solve): Need to check for preds,"}, {"sha": "ae6484119406f1c07dd8b1ec65dc82a390665d76", "filename": "gcc/bt-load.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfea6c85d86d561ce13b3e0278afab4106547ba8/gcc%2Fbt-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfea6c85d86d561ce13b3e0278afab4106547ba8/gcc%2Fbt-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbt-load.c?ref=dfea6c85d86d561ce13b3e0278afab4106547ba8", "patch": "@@ -701,7 +701,7 @@ link_btr_uses (btr_def *def_array, btr_user *use_array, sbitmap *bb_out,\n \t\t{\n \t\t  /* Find all the reaching defs for this use.  */\n \t\t  sbitmap reaching_defs_of_reg = sbitmap_alloc(max_uid);\n-\t\t  unsigned int uid;\n+\t\t  unsigned int uid = 0;\n \t\t  sbitmap_iterator sbi;\n \n \t\t  if (user->use)"}, {"sha": "3ed1c5921865375227c734c72c41bd2e88381c12", "filename": "gcc/cfganal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfea6c85d86d561ce13b3e0278afab4106547ba8/gcc%2Fcfganal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfea6c85d86d561ce13b3e0278afab4106547ba8/gcc%2Fcfganal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfganal.c?ref=dfea6c85d86d561ce13b3e0278afab4106547ba8", "patch": "@@ -521,7 +521,7 @@ find_edge_index (struct edge_list *edge_list, basic_block pred, basic_block succ\n void\n flow_nodes_print (const char *str, const sbitmap nodes, FILE *file)\n {\n-  unsigned int node;\n+  unsigned int node = 0;\n   sbitmap_iterator sbi;\n \n   if (! nodes)"}, {"sha": "24170608edde2e9bcc2161d5ceb78a4cef86891a", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfea6c85d86d561ce13b3e0278afab4106547ba8/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfea6c85d86d561ce13b3e0278afab4106547ba8/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=dfea6c85d86d561ce13b3e0278afab4106547ba8", "patch": "@@ -641,7 +641,7 @@ combine_instructions (rtx f, unsigned int nregs)\n   rtx prev;\n #endif\n   int i;\n-  unsigned int j;\n+  unsigned int j = 0;\n   rtx links, nextlinks;\n   sbitmap_iterator sbi;\n "}, {"sha": "6bb3d6c374dd814c3fc7692d07221d22439fda6a", "filename": "gcc/ddg.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfea6c85d86d561ce13b3e0278afab4106547ba8/gcc%2Fddg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfea6c85d86d561ce13b3e0278afab4106547ba8/gcc%2Fddg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fddg.c?ref=dfea6c85d86d561ce13b3e0278afab4106547ba8", "patch": "@@ -692,7 +692,7 @@ static ddg_scc_ptr\n create_scc (ddg_ptr g, sbitmap nodes)\n {\n   ddg_scc_ptr scc;\n-  unsigned int u;\n+  unsigned int u = 0;\n   sbitmap_iterator sbi;\n \n   scc = (ddg_scc_ptr) xmalloc (sizeof (struct ddg_scc));\n@@ -783,7 +783,7 @@ get_node_of_insn (ddg_ptr g, rtx insn)\n void\n find_successors (sbitmap succ, ddg_ptr g, sbitmap ops)\n {\n-  unsigned int i;\n+  unsigned int i = 0;\n   sbitmap_iterator sbi;\n \n   EXECUTE_IF_SET_IN_SBITMAP (ops, 0, i, sbi)\n@@ -802,7 +802,7 @@ find_successors (sbitmap succ, ddg_ptr g, sbitmap ops)\n void\n find_predecessors (sbitmap preds, ddg_ptr g, sbitmap ops)\n {\n-  unsigned int i;\n+  unsigned int i = 0;\n   sbitmap_iterator sbi;\n \n   EXECUTE_IF_SET_IN_SBITMAP (ops, 0, i, sbi)\n@@ -905,7 +905,7 @@ find_nodes_on_paths (sbitmap result, ddg_ptr g, sbitmap from, sbitmap to)\n {\n   int answer;\n   int change;\n-  unsigned int u;\n+  unsigned int u = 0;\n   int num_nodes = g->num_nodes;\n   sbitmap_iterator sbi;\n \n@@ -1015,7 +1015,7 @@ int\n longest_simple_path (struct ddg * g, int src, int dest, sbitmap nodes)\n {\n   int i;\n-  unsigned int u;\n+  unsigned int u = 0;\n   int change = 1;\n   int result;\n   int num_nodes = g->num_nodes;"}, {"sha": "2ebcdda0073ab2faace2efbe676e3b7612a5ef56", "filename": "gcc/flow.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfea6c85d86d561ce13b3e0278afab4106547ba8/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfea6c85d86d561ce13b3e0278afab4106547ba8/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=dfea6c85d86d561ce13b3e0278afab4106547ba8", "patch": "@@ -572,7 +572,7 @@ update_life_info (sbitmap blocks, enum update_life_extent extent,\n \t\t  int prop_flags)\n {\n   regset tmp;\n-  unsigned i;\n+  unsigned i = 0;\n   int stabilized_prop_flags = prop_flags;\n   basic_block bb;\n \n@@ -4383,7 +4383,7 @@ int\n count_or_remove_death_notes (sbitmap blocks, int kill)\n {\n   int count = 0;\n-  unsigned int i;\n+  unsigned int i = 0;\n   basic_block bb;\n \n   /* This used to be a loop over all the blocks with a membership test\n@@ -4489,7 +4489,7 @@ clear_log_links (sbitmap blocks)\n     }\n   else\n     {\n-      unsigned int i;\n+      unsigned int i = 0;\n       sbitmap_iterator sbi;\n \n       EXECUTE_IF_SET_IN_SBITMAP (blocks, 0, i, sbi)"}, {"sha": "69a9d33664f4c54751e54ae167502f8b80ec1b9a", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfea6c85d86d561ce13b3e0278afab4106547ba8/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfea6c85d86d561ce13b3e0278afab4106547ba8/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=dfea6c85d86d561ce13b3e0278afab4106547ba8", "patch": "@@ -501,7 +501,7 @@ generate_reg_moves (partial_schedule_ptr ps)\n \n       for (i_reg_move = 0; i_reg_move < nreg_moves; i_reg_move++)\n \t{\n-\t  unsigned int i_use;\n+\t  unsigned int i_use = 0;\n \t  rtx new_reg = gen_reg_rtx (GET_MODE (prev_reg));\n \t  rtx reg_move = gen_move_insn (new_reg, prev_reg);\n \t  sbitmap_iterator sbi;\n@@ -1845,7 +1845,7 @@ calculate_order_params (ddg_ptr g, int mii ATTRIBUTE_UNUSED)\n static int\n find_max_asap (ddg_ptr g, sbitmap nodes)\n {\n-  unsigned int u;\n+  unsigned int u = 0;\n   int max_asap = -1;\n   int result = -1;\n   sbitmap_iterator sbi;\n@@ -1866,7 +1866,7 @@ find_max_asap (ddg_ptr g, sbitmap nodes)\n static int\n find_max_hv_min_mob (ddg_ptr g, sbitmap nodes)\n {\n-  unsigned int u;\n+  unsigned int u = 0;\n   int max_hv = -1;\n   int min_mob = INT_MAX;\n   int result = -1;\n@@ -1895,7 +1895,7 @@ find_max_hv_min_mob (ddg_ptr g, sbitmap nodes)\n static int\n find_max_dv_min_mob (ddg_ptr g, sbitmap nodes)\n {\n-  unsigned int u;\n+  unsigned int u = 0;\n   int max_dv = -1;\n   int min_mob = INT_MAX;\n   int result = -1;"}, {"sha": "5ef7f08d2c5398eaabfd184a0d956c0355f49418", "filename": "gcc/sbitmap.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfea6c85d86d561ce13b3e0278afab4106547ba8/gcc%2Fsbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfea6c85d86d561ce13b3e0278afab4106547ba8/gcc%2Fsbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.c?ref=dfea6c85d86d561ce13b3e0278afab4106547ba8", "patch": "@@ -690,7 +690,7 @@ sbitmap_union_of_preds (sbitmap dst, sbitmap *src, int bb)\n int\n sbitmap_first_set_bit (sbitmap bmap)\n {\n-  unsigned int n;\n+  unsigned int n = 0;\n   sbitmap_iterator sbi;\n \n   EXECUTE_IF_SET_IN_SBITMAP (bmap, 0, n, sbi)"}, {"sha": "1083c5c0cadf95bbae8f154ffcd23af4cfdcdbb4", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfea6c85d86d561ce13b3e0278afab4106547ba8/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfea6c85d86d561ce13b3e0278afab4106547ba8/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=dfea6c85d86d561ce13b3e0278afab4106547ba8", "patch": "@@ -353,7 +353,7 @@ is_cfg_nonregular (void)\n static void\n extract_edgelst (sbitmap set, edgelst *el)\n {\n-  unsigned int i;\n+  unsigned int i = 0;\n   sbitmap_iterator sbi;\n \n   /* edgelst table space is reused in each call to extract_edgelst.  */"}, {"sha": "5885c04e682185bfb054912c629b38b6247fb6e7", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfea6c85d86d561ce13b3e0278afab4106547ba8/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfea6c85d86d561ce13b3e0278afab4106547ba8/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=dfea6c85d86d561ce13b3e0278afab4106547ba8", "patch": "@@ -2031,7 +2031,7 @@ prepare_def_site_for (tree name, bitmap blocks, bool insert_phi_p)\n static void\n prepare_names_to_update (bitmap blocks, bool insert_phi_p)\n {\n-  unsigned i;\n+  unsigned i = 0;\n   bitmap_iterator bi;\n   sbitmap_iterator sbi;\n \n@@ -2098,7 +2098,7 @@ debug_names_replaced_by (tree name)\n void\n dump_update_ssa (FILE *file)\n {\n-  unsigned i;\n+  unsigned i = 0;\n   bitmap_iterator bi;\n \n   if (!need_ssa_update_p ())\n@@ -2347,7 +2347,7 @@ name_registered_for_update_p (tree n)\n bitmap\n ssa_names_to_replace (void)\n {\n-  unsigned i;\n+  unsigned i = 0;\n   bitmap ret;\n   sbitmap_iterator sbi;\n   \n@@ -2519,7 +2519,7 @@ switch_virtuals_to_full_rewrite_p (void)\n static void\n switch_virtuals_to_full_rewrite (void)\n {\n-  unsigned i;\n+  unsigned i = 0;\n   sbitmap_iterator sbi;\n \n   if (dump_file)\n@@ -2618,7 +2618,7 @@ update_ssa (unsigned update_flags)\n   bitmap blocks;\n   basic_block bb, start_bb;\n   bitmap_iterator bi;\n-  unsigned i;\n+  unsigned i = 0;\n   sbitmap tmp;\n   bool insert_phi_p;\n   sbitmap_iterator sbi;"}, {"sha": "525eef46001ccd4e3b6c5988a9712ebea54b4a68", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfea6c85d86d561ce13b3e0278afab4106547ba8/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfea6c85d86d561ce13b3e0278afab4106547ba8/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=dfea6c85d86d561ce13b3e0278afab4106547ba8", "patch": "@@ -924,7 +924,7 @@ vect_create_epilog_for_reduction (tree vect_def, tree stmt, tree reduction_op,\n     }\n   else\n     {\n-      enum tree_code shift_code;\n+      enum tree_code shift_code = 0;\n       bool have_whole_vector_shift = true;\n       enum tree_code code = TREE_CODE (TREE_OPERAND (stmt, 1)); /* CHECKME */\n       int bit_offset;"}]}