{"sha": "7cf8c994b62e1c0f4b48deb4cb300cab5e50aecf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NmOGM5OTRiNjJlMWMwZjRiNDhkZWI0Y2IzMDBjYWI1ZTUwYWVjZg==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2012-11-21T23:55:29Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-11-21T23:55:29Z"}, "message": "atanq.c (atanq): Update from GLIBC.\n\n2012-11-22  David S. Miller  <davem@davemloft.net>\n            Tobias Burnus  <burnus@net-b.de>\n            Joseph Myers  <joseph@codesourcery.com>\n\n        * math/atanq.c (atanq): Update from GLIBC. Handle tiny and\n        very large arguments properly.\n        * math/j0q.c (y0q): Update from GLIBC. Avoid arithmetic\n        underflow when 'x' is very small.\n        * math/j1q.c (y1q): Ditto.\n        * math/log1pq.c (log1pq): Update from GLIBC. Saturate\n        nonzero exponents with absolute value below 0x1p-128 to\n        +/- 0x1p-128.\n        * math/powq.c (powq): Update from GLIBC. If xm1 is\n        smaller than LDBL_EPSILON/2.0L, just return xm1.\n\n\nCo-Authored-By: Joseph Myers <joseph@codesourcery.com>\nCo-Authored-By: Tobias Burnus <burnus@net-b.de>\n\nFrom-SVN: r193716", "tree": {"sha": "fc57edee06bfb00a7b2b91c9ea11ef86e3c7eec7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc57edee06bfb00a7b2b91c9ea11ef86e3c7eec7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cf8c994b62e1c0f4b48deb4cb300cab5e50aecf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cf8c994b62e1c0f4b48deb4cb300cab5e50aecf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cf8c994b62e1c0f4b48deb4cb300cab5e50aecf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cf8c994b62e1c0f4b48deb4cb300cab5e50aecf/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e4689920bd5ae525d5641c2789dc3dac830f5dd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4689920bd5ae525d5641c2789dc3dac830f5dd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4689920bd5ae525d5641c2789dc3dac830f5dd0"}], "stats": {"total": 51, "additions": 49, "deletions": 2}, "files": [{"sha": "ffd5927b72e57c973d7341394fe15039508df57e", "filename": "libquadmath/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cf8c994b62e1c0f4b48deb4cb300cab5e50aecf/libquadmath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cf8c994b62e1c0f4b48deb4cb300cab5e50aecf/libquadmath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FChangeLog?ref=7cf8c994b62e1c0f4b48deb4cb300cab5e50aecf", "patch": "@@ -1,3 +1,18 @@\n+2012-11-22  David S. Miller  <davem@davemloft.net>\n+\t    Tobias Burnus  <burnus@net-b.de>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* math/atanq.c (atanq): Update from GLIBC. Handle tiny and\n+\tvery large arguments properly.\n+\t* math/j0q.c (y0q): Update from GLIBC. Avoid arithmetic\n+\tunderflow when 'x' is very small.\n+\t* math/j1q.c (y1q): Ditto.\n+\t* math/log1pq.c (log1pq): Update from GLIBC. Saturate\n+\tnonzero exponents with absolute value below 0x1p-128 to\n+\t+/- 0x1p-128.\n+\t* math/powq.c (powq): Update from GLIBC. If xm1 is\n+\tsmaller than LDBL_EPSILON/2.0L, just return xm1.\n+\n 2012-11-21  Tobias Burnus  <burnus@net-b.de>\n \n \tPR libquadmath/55225"}, {"sha": "8eccdc3317dab7bc5b389251e4e1c5e13c1af444", "filename": "libquadmath/math/atanq.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cf8c994b62e1c0f4b48deb4cb300cab5e50aecf/libquadmath%2Fmath%2Fatanq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cf8c994b62e1c0f4b48deb4cb300cab5e50aecf/libquadmath%2Fmath%2Fatanq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fatanq.c?ref=7cf8c994b62e1c0f4b48deb4cb300cab5e50aecf", "patch": "@@ -167,6 +167,7 @@ static const __float128\n   q4 = 2.173623741810414221251136181221172551416E1Q;\n   /* q5 = 1.000000000000000000000000000000000000000E0 */\n \n+static const long double huge = 1.0e4930Q;\n \n __float128\n atanq (__float128 x)\n@@ -197,6 +198,22 @@ atanq (__float128 x)\n \treturn atantbl[83];\n     }\n \n+  if (k <= 0x3fc50000) /* |x| < 2**-58 */\n+    {\n+      /* Raise inexact. */\n+      if (huge + x > 0.0)\n+\treturn x;\n+    }\n+\n+  if (k >= 0x40720000) /* |x| > 2**115 */\n+    {\n+      /* Saturate result to {-,+}pi/2 */\n+      if (sign)\n+\treturn -atantbl[83];\n+      else\n+\treturn atantbl[83];\n+    }\n+\n   if (sign)\n       x = -x;\n "}, {"sha": "8c6f811125e702c230576079ad2725e25d2c0cba", "filename": "libquadmath/math/j0q.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cf8c994b62e1c0f4b48deb4cb300cab5e50aecf/libquadmath%2Fmath%2Fj0q.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cf8c994b62e1c0f4b48deb4cb300cab5e50aecf/libquadmath%2Fmath%2Fj0q.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fj0q.c?ref=7cf8c994b62e1c0f4b48deb4cb300cab5e50aecf", "patch": "@@ -807,6 +807,7 @@ static __float128 Y0_2D[NY0_2D + 1] = {\n  /* 1.000000000000000000000000000000000000000E0 */\n };\n \n+static const long double U0 = -7.3804295108687225274343927948483016310862e-02Q;\n \n /* Bessel function of the second kind, order zero.  */\n \n@@ -829,6 +830,8 @@ y0q (__float128 x)\n       return -HUGE_VALQ + x;\n     }\n   xx = fabsq (x);\n+  if (xx <= 0x1p-57)\n+    return U0 + TWOOPI * logq (x);\n   if (xx <= 2.0Q)\n     {\n       /* 0 <= x <= 2 */"}, {"sha": "eb599c949a90e3aa97c13bb8b28c921084a689db", "filename": "libquadmath/math/j1q.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cf8c994b62e1c0f4b48deb4cb300cab5e50aecf/libquadmath%2Fmath%2Fj1q.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cf8c994b62e1c0f4b48deb4cb300cab5e50aecf/libquadmath%2Fmath%2Fj1q.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fj1q.c?ref=7cf8c994b62e1c0f4b48deb4cb300cab5e50aecf", "patch": "@@ -836,8 +836,10 @@ y1q (__float128 x)\n       return -HUGE_VALQ + x;\n     }\n   xx = fabsq (x);\n+  if (xx <= 0x1p-114)\n+    return -TWOOPI / x;\n   if (xx <= 2.0Q)\n-    {\n+   {\n       /* 0 <= x <= 2 */\n       z = xx * xx;\n       p = xx * neval (z, Y0_2N, NY0_2N) / deval (z, Y0_2D, NY0_2D);"}, {"sha": "d8bff405dff32c59a901ef3fd71f8ba1a44d252b", "filename": "libquadmath/math/log1pq.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cf8c994b62e1c0f4b48deb4cb300cab5e50aecf/libquadmath%2Fmath%2Flog1pq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cf8c994b62e1c0f4b48deb4cb300cab5e50aecf/libquadmath%2Fmath%2Flog1pq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Flog1pq.c?ref=7cf8c994b62e1c0f4b48deb4cb300cab5e50aecf", "patch": "@@ -136,6 +136,12 @@ log1pq (__float128 xm1)\n       && (u.words32.w1 | u.words32.w2 | u.words32.w3) == 0)\n     return xm1;\n \n+  if ((hx & 0x7fffffff) < 0x3f8e0000)\n+    {\n+      if ((int) xm1 == 0)\n+       return xm1;\n+    }\n+\n   x = xm1 + 1.0Q;\n \n   /* log1p(-1) = -inf */"}, {"sha": "dd44b7c175a011f1a1e661105d76a2ce5df600b6", "filename": "libquadmath/math/powq.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cf8c994b62e1c0f4b48deb4cb300cab5e50aecf/libquadmath%2Fmath%2Fpowq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cf8c994b62e1c0f4b48deb4cb300cab5e50aecf/libquadmath%2Fmath%2Fpowq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fpowq.c?ref=7cf8c994b62e1c0f4b48deb4cb300cab5e50aecf", "patch": "@@ -148,7 +148,7 @@ powq (__float128 x, __float128 y)\n {\n   __float128 z, ax, z_h, z_l, p_h, p_l;\n   __float128 y1, t1, t2, r, s, t, u, v, w;\n-  __float128 s2, s_h, s_l, t_h, t_l;\n+  __float128 s2, s_h, s_l, t_h, t_l, ay;\n   int32_t i, j, k, yisint, n;\n   uint32_t ix, iy;\n   int32_t hx, hy;\n@@ -281,6 +281,10 @@ powq (__float128 x, __float128 y)\n \treturn (hy > 0) ? huge * huge : tiny * tiny;\n     }\n \n+  ay = y > 0 ? y : -y;\n+  if (ay < 0x1p-128)\n+    y = y < 0 ? -0x1p-128 : 0x1p-128;\n+\n   n = 0;\n   /* take care subnormal number */\n   if (ix < 0x00010000)"}]}