{"sha": "88cd0e88e36515f01b6f1e398358dc11cc06c389", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhjZDBlODhlMzY1MTVmMDFiNmYxZTM5ODM1OGRjMTFjYzA2YzM4OQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-11-23T16:04:03Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-11-23T16:04:03Z"}, "message": "re PR c++/54046 (wrong control reaches end of non-void function for switch case with throw and default)\n\n\tPR c++/54046\n\t* Makefile.in (gimple-low.o): Depend on langhooks.h.\n\t* gimple-low.c: Include langhooks.c.\n\t(block_may_fallthru): Handle TARGET_EXPR and ERROR_MARK,\n\tby default call lang_hooks.block_may_fallthru.\n\t* langhooks.h (struct lang_hooks): Add block_may_fallthru\n\tlanghook.\n\t* langhooks-def.h (LANG_HOOKS_BLOCK_MAY_FALLTHRU): Define.\n\t(LANG_HOOKS_INITIALIZER): Use it.\n\n\t* cp-objcp-common.h (LANG_HOOKS_BLOCK_MAY_FALLTHRU): Redefine.\n\t* cp-objcp-common.c (cxx_block_may_fallthru): New function.\n\t* cp-tree.h (cxx_block_may_fallthru): New prototype.\n\n\t* g++.dg/warn/Wreturn-type-8.C: New test.\n\nFrom-SVN: r193762", "tree": {"sha": "756c94d3f1786802105c930a7ed81bf4e39c9a8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/756c94d3f1786802105c930a7ed81bf4e39c9a8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88cd0e88e36515f01b6f1e398358dc11cc06c389", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88cd0e88e36515f01b6f1e398358dc11cc06c389", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88cd0e88e36515f01b6f1e398358dc11cc06c389", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88cd0e88e36515f01b6f1e398358dc11cc06c389/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "340ef734b8072d2b58f946bb69170f2e535813d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/340ef734b8072d2b58f946bb69170f2e535813d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/340ef734b8072d2b58f946bb69170f2e535813d7"}], "stats": {"total": 153, "additions": 150, "deletions": 3}, "files": [{"sha": "ee7531ce40de9bc650c99d5d217d269965120865", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88cd0e88e36515f01b6f1e398358dc11cc06c389/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88cd0e88e36515f01b6f1e398358dc11cc06c389/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88cd0e88e36515f01b6f1e398358dc11cc06c389", "patch": "@@ -1,3 +1,15 @@\n+2012-11-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/54046\n+\t* Makefile.in (gimple-low.o): Depend on langhooks.h.\n+\t* gimple-low.c: Include langhooks.c.\n+\t(block_may_fallthru): Handle TARGET_EXPR and ERROR_MARK,\n+\tby default call lang_hooks.block_may_fallthru.\n+\t* langhooks.h (struct lang_hooks): Add block_may_fallthru\n+\tlanghook.\n+\t* langhooks-def.h (LANG_HOOKS_BLOCK_MAY_FALLTHRU): Define.\n+\t(LANG_HOOKS_INITIALIZER): Use it.\n+\n 2012-11-23  Jan Hubicka  <jh@suse.cz>\n \n \t* i386-c.c (ix86_target_macros_internal): Update handling of core"}, {"sha": "44f1e0858661f8b5c1ae7d702fec466ab1346902", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88cd0e88e36515f01b6f1e398358dc11cc06c389/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88cd0e88e36515f01b6f1e398358dc11cc06c389/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=88cd0e88e36515f01b6f1e398358dc11cc06c389", "patch": "@@ -2527,7 +2527,7 @@ gimple-low.o : gimple-low.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\\n    $(DIAGNOSTIC_CORE_H) $(GIMPLE_H) $(TREE_INLINE_H) langhooks.h \\\n    $(LANGHOOKS_DEF_H) $(TREE_FLOW_H) $(TM_H) coretypes.h \\\n    $(EXCEPT_H) $(FLAGS_H) $(RTL_H) $(FUNCTION_H) $(TREE_PASS_H) \\\n-   $(HASHTAB_H) $(DIAGNOSTIC_CORE_H) tree-iterator.h\n+   $(HASHTAB_H) $(DIAGNOSTIC_CORE_H) tree-iterator.h langhooks.h\n omp-low.o : omp-low.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(RTL_H) $(GIMPLE_H) $(TREE_INLINE_H) langhooks.h $(DIAGNOSTIC_CORE_H) \\\n    $(TREE_FLOW_H) $(FLAGS_H) $(EXPR_H) $(DIAGNOSTIC_CORE_H) \\"}, {"sha": "95fb0bff8641a35f9a8e723a040308b57012c66b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88cd0e88e36515f01b6f1e398358dc11cc06c389/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88cd0e88e36515f01b6f1e398358dc11cc06c389/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=88cd0e88e36515f01b6f1e398358dc11cc06c389", "patch": "@@ -1,3 +1,10 @@\n+2012-11-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/54046\n+\t* cp-objcp-common.h (LANG_HOOKS_BLOCK_MAY_FALLTHRU): Redefine.\n+\t* cp-objcp-common.c (cxx_block_may_fallthru): New function.\n+\t* cp-tree.h (cxx_block_may_fallthru): New prototype.\n+\n 2012-11-23  Markus Trippelsdorf  <markus@trippelsdorf.de>\n \n \tPR c++/55418"}, {"sha": "20dd33950374d58945e99a29abd577669f3deacc", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88cd0e88e36515f01b6f1e398358dc11cc06c389/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88cd0e88e36515f01b6f1e398358dc11cc06c389/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=88cd0e88e36515f01b6f1e398358dc11cc06c389", "patch": "@@ -227,6 +227,25 @@ init_shadowed_var_for_decl (void)\n \t\t\t\t\t   tree_decl_map_eq, 0);\n }\n \n+/* Return true if stmt can fall thru.  Used by block_may_fallthru\n+   default case.  */\n+\n+bool\n+cxx_block_may_fallthru (const_tree stmt)\n+{\n+  switch (TREE_CODE (stmt))\n+    {\n+    case EXPR_STMT:\n+      return block_may_fallthru (EXPR_STMT_EXPR (stmt));\n+\n+    case THROW_EXPR:\n+      return false;\n+\n+    default:\n+      return true;\n+    }\n+}\n+\n void\n cp_common_init_ts (void)\n {"}, {"sha": "4cfc59c40d209668f9aef9a0c86248a3efbec5e6", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88cd0e88e36515f01b6f1e398358dc11cc06c389/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88cd0e88e36515f01b6f1e398358dc11cc06c389/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=88cd0e88e36515f01b6f1e398358dc11cc06c389", "patch": "@@ -94,6 +94,8 @@ extern void cp_common_init_ts (void);\n #define LANG_HOOKS_TYPE_HASH_EQ\tcxx_type_hash_eq\n #undef LANG_HOOKS_MISSING_NORETURN_OK_P\n #define LANG_HOOKS_MISSING_NORETURN_OK_P cp_missing_noreturn_ok_p\n+#undef LANG_HOOKS_BLOCK_MAY_FALLTHRU\n+#define LANG_HOOKS_BLOCK_MAY_FALLTHRU cxx_block_may_fallthru\n \n /* Attribute hooks.  */\n #undef LANG_HOOKS_COMMON_ATTRIBUTE_TABLE"}, {"sha": "85c8e7c702cce3138b54d08c625d9f356edc1826", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88cd0e88e36515f01b6f1e398358dc11cc06c389/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88cd0e88e36515f01b6f1e398358dc11cc06c389/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=88cd0e88e36515f01b6f1e398358dc11cc06c389", "patch": "@@ -6019,6 +6019,7 @@ extern bool cp_var_mod_type_p\t\t\t(tree, tree);\n extern void cxx_initialize_diagnostics\t\t(diagnostic_context *);\n extern int cxx_types_compatible_p\t\t(tree, tree);\n extern void init_shadowed_var_for_decl\t\t(void);\n+extern bool cxx_block_may_fallthru\t\t(const_tree);\n \n /* in cp-gimplify.c */\n extern int cp_gimplify_expr\t\t\t(tree *, gimple_seq *,"}, {"sha": "282dba187c3eb3dfaf713a55dc1f0bc60962d972", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88cd0e88e36515f01b6f1e398358dc11cc06c389/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88cd0e88e36515f01b6f1e398358dc11cc06c389/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=88cd0e88e36515f01b6f1e398358dc11cc06c389", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"function.h\"\n #include \"diagnostic-core.h\"\n #include \"tree-pass.h\"\n+#include \"langhooks.h\"\n \n /* The differences between High GIMPLE and Low GIMPLE are the\n    following:\n@@ -739,8 +740,14 @@ block_may_fallthru (const_tree block)\n     case CLEANUP_POINT_EXPR:\n       return block_may_fallthru (TREE_OPERAND (stmt, 0));\n \n-    default:\n+    case TARGET_EXPR:\n+      return block_may_fallthru (TREE_OPERAND (stmt, 1));\n+\n+    case ERROR_MARK:\n       return true;\n+\n+    default:\n+      return lang_hooks.block_may_fallthru (stmt);\n     }\n }\n "}, {"sha": "75793f623255fb6de933b21f7a73d025e160558f", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88cd0e88e36515f01b6f1e398358dc11cc06c389/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88cd0e88e36515f01b6f1e398358dc11cc06c389/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=88cd0e88e36515f01b6f1e398358dc11cc06c389", "patch": "@@ -115,6 +115,7 @@ extern void lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *,\n #define LANG_HOOKS_EH_PERSONALITY\tlhd_gcc_personality\n #define LANG_HOOKS_EH_RUNTIME_TYPE\tlhd_pass_through_t\n #define LANG_HOOKS_EH_PROTECT_CLEANUP_ACTIONS\tNULL\n+#define LANG_HOOKS_BLOCK_MAY_FALLTHRU\thook_bool_const_tree_true\n #define LANG_HOOKS_EH_USE_CXA_END_CLEANUP\tfalse\n #define LANG_HOOKS_DEEP_UNSHARING\tfalse\n \n@@ -300,6 +301,7 @@ extern void lhd_end_section (void);\n   LANG_HOOKS_EH_PERSONALITY, \\\n   LANG_HOOKS_EH_RUNTIME_TYPE, \\\n   LANG_HOOKS_EH_PROTECT_CLEANUP_ACTIONS, \\\n+  LANG_HOOKS_BLOCK_MAY_FALLTHRU, \\\n   LANG_HOOKS_EH_USE_CXA_END_CLEANUP, \\\n   LANG_HOOKS_DEEP_UNSHARING \\\n }"}, {"sha": "8481ba46d6cbbbf980e4b8ab680f1a00a4602aa4", "filename": "gcc/langhooks.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88cd0e88e36515f01b6f1e398358dc11cc06c389/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88cd0e88e36515f01b6f1e398358dc11cc06c389/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=88cd0e88e36515f01b6f1e398358dc11cc06c389", "patch": "@@ -1,6 +1,6 @@\n /* The lang_hooks data structure.\n    Copyright 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n-   2011 Free Software Foundation, Inc.\n+   2011, 2012 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -456,6 +456,10 @@ struct lang_hooks\n      FUNCTION_DECL for `std::terminate'.  */\n   tree (*eh_protect_cleanup_actions) (void);\n \n+  /* Return true if a stmt can fallthru.  Used by block_may_fallthru\n+     to possibly handle language trees.  */\n+  bool (*block_may_fallthru) (const_tree);\n+\n   /* True if this language uses __cxa_end_cleanup when the ARM EABI\n      is enabled.  */\n   bool eh_use_cxa_end_cleanup;"}, {"sha": "a42b0013393c8713cf0b1ccb5ceb2cfa3684287a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88cd0e88e36515f01b6f1e398358dc11cc06c389/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88cd0e88e36515f01b6f1e398358dc11cc06c389/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=88cd0e88e36515f01b6f1e398358dc11cc06c389", "patch": "@@ -1,5 +1,8 @@\n 2012-11-23  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/54046\n+\t* g++.dg/warn/Wreturn-type-8.C: New test.\n+\n \tPR middle-end/55430\n \t* gcc.dg/pr55430.c: New test.\n "}, {"sha": "346cab476495799623fdba3ddcefb2c3f766c98d", "filename": "gcc/testsuite/g++.dg/warn/Wreturn-type-8.C", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88cd0e88e36515f01b6f1e398358dc11cc06c389/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreturn-type-8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88cd0e88e36515f01b6f1e398358dc11cc06c389/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreturn-type-8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreturn-type-8.C?ref=88cd0e88e36515f01b6f1e398358dc11cc06c389", "patch": "@@ -0,0 +1,90 @@\n+// PR c++/54046\n+// { dg-do compile }\n+// { dg-options \"-O0 -Wall\" }\n+\n+void foo (void) __attribute__((noreturn));\n+\n+struct A\n+{\n+  ~A () {}\n+};\n+\n+bool\n+check1 (int x)\n+{\n+  A z;\n+  switch (x)\n+    {\n+    case 0:\n+      return false;\n+    default:\n+      throw \"X\";\n+      break;\n+    }\n+}\n+\n+bool\n+check2 (int x)\n+{\n+  A z;\n+  switch (x)\n+    {\n+    case 0:\n+      return false;\n+    default:\n+      foo ();\n+      break;\n+    }\n+}\n+\n+bool\n+check3 (int x)\n+{\n+  switch (x)\n+    {\n+    case 0:\n+      return false;\n+    default:\n+      throw \"X\";\n+      break;\n+    }\n+}\n+\n+bool\n+check4 (int x)\n+{\n+  switch (x)\n+    {\n+    case 0:\n+      return false;\n+    default:\n+      foo ();\n+      break;\n+    }\n+}\n+\n+bool\n+check5 (int x)\n+{\n+  A z;\n+  switch (x)\n+    {\n+    case 0:\n+      return false;\n+    default:\n+      throw \"X\";\n+    }\n+}\n+\n+bool\n+check6 (int x)\n+{\n+  A z;\n+  switch (x)\n+    {\n+    case 0:\n+      return false;\n+    default:\n+      foo ();\n+    }\n+}"}]}