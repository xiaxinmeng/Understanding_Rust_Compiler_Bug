{"sha": "10522ed1089277e2aa6cd708205aa5c730179cf0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA1MjJlZDEwODkyNzdlMmFhNmNkNzA4MjA1YWE1YzczMDE3OWNmMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-26T12:55:47Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-26T16:15:52Z"}, "message": "libstdc++: Fix some more deadlocks in tests [PR 97936]\n\nThe missed notifications fixed in r11-5383 also happen in some other\ntests which have similar code.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/97936\n\t* testsuite/29_atomics/atomic/wait_notify/bool.cc: Fix missed\n\tnotifications by making the new thread wait until the parent\n\tthread is waiting on the condition variable.\n\t* testsuite/29_atomics/atomic/wait_notify/pointers.cc: Likewise.\n\t* testsuite/29_atomics/atomic_flag/wait_notify/1.cc: Likewise.\n\t* testsuite/29_atomics/atomic_ref/wait_notify.cc: Likewise.", "tree": {"sha": "53128151673d121ef05989f22da826b591223b76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53128151673d121ef05989f22da826b591223b76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10522ed1089277e2aa6cd708205aa5c730179cf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10522ed1089277e2aa6cd708205aa5c730179cf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10522ed1089277e2aa6cd708205aa5c730179cf0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10522ed1089277e2aa6cd708205aa5c730179cf0/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10ee46adf44ae731fc4f9e9fdc25ad60c9d43a9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10ee46adf44ae731fc4f9e9fdc25ad60c9d43a9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10ee46adf44ae731fc4f9e9fdc25ad60c9d43a9c"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "1fc01491173789319654e3dff56b82ce06f77bc7", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/wait_notify/bool.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10522ed1089277e2aa6cd708205aa5c730179cf0/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2Fbool.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10522ed1089277e2aa6cd708205aa5c730179cf0/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2Fbool.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2Fbool.cc?ref=10522ed1089277e2aa6cd708205aa5c730179cf0", "patch": "@@ -36,19 +36,23 @@ main ()\n \n   std::mutex m;\n   std::condition_variable cv;\n+  std::unique_lock<std::mutex> l(m);\n \n   std::atomic<bool> a(false);\n   std::atomic<bool> b(false);\n   std::thread t([&]\n \t\t{\n+\t\t  {\n+\t\t    // This ensures we block until cv.wait(l) starts.\n+\t\t    std::lock_guard<std::mutex> ll(m);\n+\t\t  }\n \t\t  cv.notify_one();\n \t\t  a.wait(false);\n \t\t  if (a.load())\n \t\t    {\n \t\t      b.store(true);\n \t\t    }\n \t\t});\n-  std::unique_lock<std::mutex> l(m);\n   cv.wait(l);\n   std::this_thread::sleep_for(100ms);\n   a.store(true);"}, {"sha": "3b699e9133b262b5c2e2583c7afde550187ecccb", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/wait_notify/pointers.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10522ed1089277e2aa6cd708205aa5c730179cf0/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2Fpointers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10522ed1089277e2aa6cd708205aa5c730179cf0/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2Fpointers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2Fpointers.cc?ref=10522ed1089277e2aa6cd708205aa5c730179cf0", "patch": "@@ -36,19 +36,23 @@ main ()\n \n   std::mutex m;\n   std::condition_variable cv;\n+  std::unique_lock<std::mutex> l(m);\n \n   long aa;\n   long bb;\n \n   std::atomic<long*> a(nullptr);\n   std::thread t([&]\n \t\t{\n+\t\t  {\n+\t\t    // This ensures we block until cv.wait(l) starts.\n+\t\t    std::lock_guard<std::mutex> ll(m);\n+\t\t  }\n \t\t  cv.notify_one();\n \t\t  a.wait(nullptr);\n \t\t  if (a.load() == &aa)\n \t\t    a.store(&bb);\n \t\t});\n-  std::unique_lock<std::mutex> l(m);\n   cv.wait(l);\n   std::this_thread::sleep_for(100ms);\n   a.store(&aa);"}, {"sha": "5d5e06dde31caf6ebdb3b09a9c32edc379bfa79c", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_flag/wait_notify/1.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10522ed1089277e2aa6cd708205aa5c730179cf0/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fwait_notify%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10522ed1089277e2aa6cd708205aa5c730179cf0/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fwait_notify%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fwait_notify%2F1.cc?ref=10522ed1089277e2aa6cd708205aa5c730179cf0", "patch": "@@ -36,18 +36,22 @@ main()\n \n   std::mutex m;\n   std::condition_variable cv;\n+  std::unique_lock<std::mutex> l(m);\n \n   std::atomic_flag a;\n   std::atomic_flag b;\n   std::thread t([&]\n \t\t{\n+\t\t  {\n+\t\t    // This ensures we block until cv.wait(l) starts.\n+\t\t    std::lock_guard<std::mutex> ll(m);\n+\t\t  }\n \t\t  cv.notify_one();\n \t\t  a.wait(false);\n \t\t  b.test_and_set();\n \t\t  b.notify_one();\n \t\t});\n \n-  std::unique_lock<std::mutex> l(m);\n   cv.wait(l);\n   std::this_thread::sleep_for(100ms);\n   a.test_and_set();"}, {"sha": "bc5a7d0d8bf91654e5e074947a8dde0fc721e16a", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_ref/wait_notify.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10522ed1089277e2aa6cd708205aa5c730179cf0/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_ref%2Fwait_notify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10522ed1089277e2aa6cd708205aa5c730179cf0/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_ref%2Fwait_notify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_ref%2Fwait_notify.cc?ref=10522ed1089277e2aa6cd708205aa5c730179cf0", "patch": "@@ -37,17 +37,21 @@ Tp check_wait_notify(Tp val1, Tp val2)\n \n   std::mutex m;\n   std::condition_variable cv;\n+  std::unique_lock<std::mutex> l(m);\n \n   Tp aa = val1;\n   std::atomic_ref<Tp> a(aa);\n   std::thread t([&]\n \t\t{\n+\t\t  {\n+\t\t    // This ensures we block until cv.wait(l) starts.\n+\t\t    std::lock_guard<std::mutex> ll(m);\n+\t\t  }\n \t\t  cv.notify_one();\n \t\t  a.wait(val1);\n \t\t  if (a.load() != val2)\n \t\t    a = val1;\n \t\t});\n-  std::unique_lock<std::mutex> l(m);\n   cv.wait(l);\n   std::this_thread::sleep_for(100ms);\n   a.store(val2);"}]}