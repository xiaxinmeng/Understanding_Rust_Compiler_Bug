{"sha": "9eeaed6ec41bb97d84e38fc81339e36b0598a442", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVlYWVkNmVjNDFiYjk3ZDg0ZTM4ZmM4MTMzOWUzNmIwNTk4YTQ0Mg==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2007-10-19T04:29:38Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2007-10-19T04:29:38Z"}, "message": "Add Niagara-2 support.\n\n2007-10-18  David S. Miller  <davem@davemloft.net>\n\n\tAdd Niagara-2 support.\n\t* doc/invoke.texi: Document -m{cpu,tune}=niagara2.\n\t* config.gcc: Add niagara2 to cpu and tune lists for sparc.\n\t* config/sparc/sparc.md (sparc_cpu_attr): Add niagara2.\n\t(include): Add inclusion of niagara2.md\n\t* config/sparc/sparc.c (niagara2_costs): New.\n\t(sparc_override_options): Add niagara2 entry to cpu_default[]\n\tand cpu_table[].  Set align_functions to 32 on Niagara2.  Use\n\tniagara2_costs when PROCESSOR_NIAGARA2.  Handle Niagara2 for\n\tPARAM_SIMULTANEOUS_PREFETCHES and PARAM_L1_CACHE_LINE_SIZE.\n\t(sparc_initialize_trampoline): Handle niagara2 like niagara.\n\t(sparc64_initialize_trampoline): Likewise.\n\t(sparc_use_sched_lookahead): Likewise.\n\t(sparc_issue_rate): Likewise.\n\t* config/sparc/sol2-bi.h: Handle TARGET_CPU_niagara2 and\n\tmcpu=niagara2\n\t* config/sparc/sparc.h (TARGET_CPU_niagara2): Define.\n\t({CPP,ASM}_CPU64_DEFAULT_SPEC): Set appropriately for\n\tTARGET_CPU_niagara2.\n\t(PROCESSOR_NIAGARA2): New.\n\t(REGISTER_MOVE_COST): Handle PROCESSOR_NIAGARA2.\n\t(BRANCH_COST): Likewise.\n\t* config/sparc/linux64.h: Handle TARGET_CPU_niagara2.\n\t* config/sparc/sol2.h: Likewise.\n\t* config/sparc/niagara2.md: New file.\n\nFrom-SVN: r129472", "tree": {"sha": "a29ad799a69b10144515b4f308ac4ae353fabdf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a29ad799a69b10144515b4f308ac4ae353fabdf7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9eeaed6ec41bb97d84e38fc81339e36b0598a442", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eeaed6ec41bb97d84e38fc81339e36b0598a442", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eeaed6ec41bb97d84e38fc81339e36b0598a442", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eeaed6ec41bb97d84e38fc81339e36b0598a442/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f41899f6cadaee6ab5b8a82cfad27ddf1d7c9a44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f41899f6cadaee6ab5b8a82cfad27ddf1d7c9a44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f41899f6cadaee6ab5b8a82cfad27ddf1d7c9a44"}], "stats": {"total": 233, "additions": 212, "deletions": 21}, "files": [{"sha": "7b2ae24c1d968c00fc486d9509ee86d8439b664f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eeaed6ec41bb97d84e38fc81339e36b0598a442/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eeaed6ec41bb97d84e38fc81339e36b0598a442/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9eeaed6ec41bb97d84e38fc81339e36b0598a442", "patch": "@@ -1,3 +1,31 @@\n+2007-10-18  David S. Miller  <davem@davemloft.net>\n+\n+\tAdd Niagara-2 support.\n+\t* doc/invoke.texi: Document -m{cpu,tune}=niagara2.\n+\t* config.gcc: Add niagara2 to cpu and tune lists for sparc.\n+\t* config/sparc/sparc.md (sparc_cpu_attr): Add niagara2.\n+\t(include): Add inclusion of niagara2.md\n+\t* config/sparc/sparc.c (niagara2_costs): New.\n+\t(sparc_override_options): Add niagara2 entry to cpu_default[]\n+\tand cpu_table[].  Set align_functions to 32 on Niagara2.  Use\n+\tniagara2_costs when PROCESSOR_NIAGARA2.  Handle Niagara2 for\n+\tPARAM_SIMULTANEOUS_PREFETCHES and PARAM_L1_CACHE_LINE_SIZE.\n+\t(sparc_initialize_trampoline): Handle niagara2 like niagara.\n+\t(sparc64_initialize_trampoline): Likewise.\n+\t(sparc_use_sched_lookahead): Likewise.\n+\t(sparc_issue_rate): Likewise.\n+\t* config/sparc/sol2-bi.h: Handle TARGET_CPU_niagara2 and\n+\tmcpu=niagara2\n+\t* config/sparc/sparc.h (TARGET_CPU_niagara2): Define.\n+\t({CPP,ASM}_CPU64_DEFAULT_SPEC): Set appropriately for\n+\tTARGET_CPU_niagara2.\n+\t(PROCESSOR_NIAGARA2): New.\n+\t(REGISTER_MOVE_COST): Handle PROCESSOR_NIAGARA2.\n+\t(BRANCH_COST): Likewise.\n+\t* config/sparc/linux64.h: Handle TARGET_CPU_niagara2.\n+\t* config/sparc/sol2.h: Likewise.\n+\t* config/sparc/niagara2.md: New file.\n+\n 2007-10-18  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \t* config/mips/mips.c (mips_frame_info): Remove gp_reg_size and"}, {"sha": "2195b51088fcad0b559910d5f78bcc9f8a2fb198", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eeaed6ec41bb97d84e38fc81339e36b0598a442/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eeaed6ec41bb97d84e38fc81339e36b0598a442/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=9eeaed6ec41bb97d84e38fc81339e36b0598a442", "patch": "@@ -3190,7 +3190,7 @@ case \"${target}\" in\n \t\t\t\"\" | sparc | sparcv9 | sparc64 | sparc86x \\\n \t\t\t| v7 | cypress | v8 | supersparc | sparclite | f930 \\\n \t\t\t| f934 | hypersparc | sparclite86x | sparclet | tsc701 \\\n-\t\t\t| v9 | ultrasparc | ultrasparc3 | niagara)\n+\t\t\t| v9 | ultrasparc | ultrasparc3 | niagara | niagara2)\n \t\t\t\t# OK\n \t\t\t\t;;\n \t\t\t*)"}, {"sha": "b205552874bbeaa82ce59577f4c1030510a1a39a", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eeaed6ec41bb97d84e38fc81339e36b0598a442/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eeaed6ec41bb97d84e38fc81339e36b0598a442/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=9eeaed6ec41bb97d84e38fc81339e36b0598a442", "patch": "@@ -43,7 +43,8 @@ along with GCC; see the file COPYING3.  If not see\n #if TARGET_CPU_DEFAULT == TARGET_CPU_v9 \\\n     || TARGET_CPU_DEFAULT == TARGET_CPU_ultrasparc \\\n     || TARGET_CPU_DEFAULT == TARGET_CPU_ultrasparc3 \\\n-    || TARGET_CPU_DEFAULT == TARGET_CPU_niagara\n+    || TARGET_CPU_DEFAULT == TARGET_CPU_niagara \\\n+    || TARGET_CPU_DEFAULT == TARGET_CPU_niagara2\n /* A 64 bit v9 compiler with stack-bias,\n    in a Medium/Low code model environment.  */\n "}, {"sha": "4a59404b86ecb16e44381d8f858cdabf1c5b81fe", "filename": "gcc/config/sparc/niagara2.md", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eeaed6ec41bb97d84e38fc81339e36b0598a442/gcc%2Fconfig%2Fsparc%2Fniagara2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eeaed6ec41bb97d84e38fc81339e36b0598a442/gcc%2Fconfig%2Fsparc%2Fniagara2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fniagara2.md?ref=9eeaed6ec41bb97d84e38fc81339e36b0598a442", "patch": "@@ -0,0 +1,91 @@\n+;; Scheduling description for Niagara-2.\n+;;   Copyright (C) 2007 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 2, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING.  If not, write to\n+;; the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+;; Boston, MA 02110-1301, USA.\n+\n+;; Niagara-2 is a single-issue processor.\n+\n+(define_automaton \"niagara2_0\")\n+\n+(define_cpu_unit \"niag2_pipe\" \"niagara2_0\")\n+\n+(define_insn_reservation \"niag2_25cycle\" 25\n+  (and (eq_attr \"cpu\" \"niagara2\")\n+    (eq_attr \"type\" \"flushw\"))\n+  \"niag2_pipe*25\")\n+\n+(define_insn_reservation \"niag2_5cycle\" 5\n+  (and (eq_attr \"cpu\" \"niagara2\")\n+    (eq_attr \"type\" \"multi,flushw,iflush,trap\"))\n+  \"niag2_pipe*5\")\n+\n+(define_insn_reservation \"niag2_6cycle\" 4\n+  (and (eq_attr \"cpu\" \"niagara2\")\n+    (eq_attr \"type\" \"savew\"))\n+  \"niag2_pipe*4\")\n+\n+/* Most basic operations are single-cycle. */\n+(define_insn_reservation \"niag2_ialu\" 1\n+ (and (eq_attr \"cpu\" \"niagara2\")\n+   (eq_attr \"type\" \"ialu,shift,compare,cmove\"))\n+ \"niag2_pipe\")\n+\n+(define_insn_reservation \"niag2_imul\" 5\n+ (and (eq_attr \"cpu\" \"niagara2\")\n+   (eq_attr \"type\" \"imul\"))\n+ \"niag2_pipe*5\")\n+\n+(define_insn_reservation \"niag2_idiv\" 31\n+ (and (eq_attr \"cpu\" \"niagara2\")\n+   (eq_attr \"type\" \"idiv\"))\n+ \"niag2_pipe*31\")\n+\n+(define_insn_reservation \"niag2_branch\" 5\n+  (and (eq_attr \"cpu\" \"niagara2\")\n+    (eq_attr \"type\" \"call,sibcall,call_no_delay_slot,uncond_branch,branch\"))\n+  \"niag2_pipe*5\")\n+\n+(define_insn_reservation \"niag2_3cycle_load\" 3\n+  (and (eq_attr \"cpu\" \"niagara2\")\n+    (eq_attr \"type\" \"load,fpload\"))\n+  \"niag2_pipe*3\")\n+\n+(define_insn_reservation \"niag2_1cycle_store\" 1\n+  (and (eq_attr \"cpu\" \"niagara2\")\n+    (eq_attr \"type\" \"store,fpstore\"))\n+  \"niag2_pipe\")\n+\n+(define_insn_reservation \"niag2_fp\" 3\n+  (and (eq_attr \"cpu\" \"niagara2\")\n+    (eq_attr \"type\" \"fpmove,fpcmove,fpcrmove,fpcmp,fpmul\"))\n+  \"niag2_pipe*3\")\n+\n+(define_insn_reservation \"niag2_fdivs\" 19\n+  (and (eq_attr \"cpu\" \"niagara2\")\n+    (eq_attr \"type\" \"fpdivs\"))\n+  \"niag2_pipe*19\")\n+\n+(define_insn_reservation \"niag2_fdivd\" 33\n+  (and (eq_attr \"cpu\" \"niagara2\")\n+    (eq_attr \"type\" \"fpdivd\"))\n+  \"niag2_pipe*33\")\n+\n+(define_insn_reservation \"niag2_vis\" 6\n+  (and (eq_attr \"cpu\" \"niagara2\")\n+    (eq_attr \"type\" \"fga,fgm_pack,fgm_mul,fgm_cmp,fgm_pdist\"))\n+  \"niag2_pipe*6\")"}, {"sha": "91d5e130be54f5d16178e9ac9c9e99693188c468", "filename": "gcc/config/sparc/sol2-bi.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eeaed6ec41bb97d84e38fc81339e36b0598a442/gcc%2Fconfig%2Fsparc%2Fsol2-bi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eeaed6ec41bb97d84e38fc81339e36b0598a442/gcc%2Fconfig%2Fsparc%2Fsol2-bi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2-bi.h?ref=9eeaed6ec41bb97d84e38fc81339e36b0598a442", "patch": "@@ -48,6 +48,15 @@\n #define ASM_CPU64_DEFAULT_SPEC AS_SPARC64_FLAG \"b\"\n #endif\n \n+#if TARGET_CPU_DEFAULT == TARGET_CPU_niagara2\n+#undef CPP_CPU64_DEFAULT_SPEC\n+#define CPP_CPU64_DEFAULT_SPEC \"\"\n+#undef ASM_CPU32_DEFAULT_SPEC\n+#define ASM_CPU32_DEFAULT_SPEC \"-xarch=v8plusb\"\n+#undef ASM_CPU64_DEFAULT_SPEC\n+#define ASM_CPU64_DEFAULT_SPEC AS_SPARC64_FLAG \"b\"\n+#endif\n+\n #if DEFAULT_ARCH32_P\n #define DEF_ARCH32_SPEC(__str) \"%{!m64:\" __str \"}\"\n #define DEF_ARCH64_SPEC(__str) \"%{m64:\" __str \"}\"\n@@ -66,7 +75,7 @@\n %{mcpu=sparclite|mcpu-f930|mcpu=f934:-D__sparclite__} \\\n %{mcpu=v8:\" DEF_ARCH32_SPEC(\"-D__sparcv8\") \"} \\\n %{mcpu=supersparc:-D__supersparc__ \" DEF_ARCH32_SPEC(\"-D__sparcv8\") \"} \\\n-%{mcpu=v9|mcpu=ultrasparc|mcpu=ultrasparc3|mcpu=niagara:\" DEF_ARCH32_SPEC(\"-D__sparcv8\") \"} \\\n+%{mcpu=v9|mcpu=ultrasparc|mcpu=ultrasparc3|mcpu=niagara|mcpu=niagara2:\" DEF_ARCH32_SPEC(\"-D__sparcv8\") \"} \\\n %{!mcpu*:%{!mcypress:%{!msparclite:%{!mf930:%{!mf934:%{!mv8:%{!msupersparc:%(cpp_cpu_default)}}}}}}} \\\n \"\n \n@@ -76,7 +85,8 @@\n %{mcpu=ultrasparc:\" DEF_ARCH32_SPEC(\"-xarch=v8plusa\") DEF_ARCH64_SPEC(AS_SPARC64_FLAG \"a\") \"} \\\n %{mcpu=ultrasparc3:\" DEF_ARCH32_SPEC(\"-xarch=v8plusb\") DEF_ARCH64_SPEC(AS_SPARC64_FLAG \"b\") \"} \\\n %{mcpu=niagara:\" DEF_ARCH32_SPEC(\"-xarch=v8plusb\") DEF_ARCH64_SPEC(AS_SPARC64_FLAG \"b\") \"} \\\n-%{!mcpu=niagara:%{!mcpu=ultrasparc3:%{!mcpu=ultrasparc:%{!mcpu=v9:%{mcpu*:\" DEF_ARCH32_SPEC(\"-xarch=v8\") DEF_ARCH64_SPEC(AS_SPARC64_FLAG) \"}}}}} \\\n+%{mcpu=niagara2:\" DEF_ARCH32_SPEC(\"-xarch=v8plusb\") DEF_ARCH64_SPEC(AS_SPARC64_FLAG \"b\") \"} \\\n+%{!mcpu=niagara2:%{!mcpu=niagara:%{!mcpu=ultrasparc3:%{!mcpu=ultrasparc:%{!mcpu=v9:%{mcpu*:\" DEF_ARCH32_SPEC(\"-xarch=v8\") DEF_ARCH64_SPEC(AS_SPARC64_FLAG) \"}}}}}} \\\n %{!mcpu*:%(asm_cpu_default)} \\\n \"\n "}, {"sha": "1890ce9b1d6fdfc238bea3eab8dca7f4ce1d5c21", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eeaed6ec41bb97d84e38fc81339e36b0598a442/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eeaed6ec41bb97d84e38fc81339e36b0598a442/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=9eeaed6ec41bb97d84e38fc81339e36b0598a442", "patch": "@@ -45,12 +45,18 @@ along with GCC; see the file COPYING3.  If not see\n #define ASM_CPU_DEFAULT_SPEC \"-xarch=v8plusb\"\n #endif\n \n+#if TARGET_CPU_DEFAULT == TARGET_CPU_niagara2\n+#undef ASM_CPU_DEFAULT_SPEC\n+#define ASM_CPU_DEFAULT_SPEC \"-xarch=v8plusb\"\n+#endif\n+\n #undef ASM_CPU_SPEC\n #define ASM_CPU_SPEC \"\\\n %{mcpu=v9:-xarch=v8plus} \\\n %{mcpu=ultrasparc:-xarch=v8plusa} \\\n %{mcpu=ultrasparc3:-xarch=v8plusb} \\\n %{mcpu=niagara:-xarch=v8plusb} \\\n+%{mcpu=niagara2:-xarch=v8plusb} \\\n %{!mcpu*:%(asm_cpu_default)} \\\n \"\n "}, {"sha": "ca3463060a3d1c0050a47ef9aecd4531b0abcd7c", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 42, "deletions": 6, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eeaed6ec41bb97d84e38fc81339e36b0598a442/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eeaed6ec41bb97d84e38fc81339e36b0598a442/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=9eeaed6ec41bb97d84e38fc81339e36b0598a442", "patch": "@@ -222,6 +222,30 @@ struct processor_costs niagara_costs = {\n   0, /* shift penalty */\n };\n \n+static const\n+struct processor_costs niagara2_costs = {\n+  COSTS_N_INSNS (3), /* int load */\n+  COSTS_N_INSNS (3), /* int signed load */\n+  COSTS_N_INSNS (3), /* int zeroed load */\n+  COSTS_N_INSNS (3), /* float load */\n+  COSTS_N_INSNS (6), /* fmov, fneg, fabs */\n+  COSTS_N_INSNS (6), /* fadd, fsub */\n+  COSTS_N_INSNS (6), /* fcmp */\n+  COSTS_N_INSNS (6), /* fmov, fmovr */\n+  COSTS_N_INSNS (6), /* fmul */\n+  COSTS_N_INSNS (19), /* fdivs */\n+  COSTS_N_INSNS (33), /* fdivd */\n+  COSTS_N_INSNS (19), /* fsqrts */\n+  COSTS_N_INSNS (33), /* fsqrtd */\n+  COSTS_N_INSNS (5), /* imul */\n+  COSTS_N_INSNS (5), /* imulX */\n+  0, /* imul bit factor */\n+  COSTS_N_INSNS (31), /* idiv, average of 12 - 41 cycle range */\n+  COSTS_N_INSNS (31), /* idivX, average of 12 - 41 cycle range */\n+  COSTS_N_INSNS (1), /* movcc/movr */\n+  0, /* shift penalty */\n+};\n+\n const struct processor_costs *sparc_costs = &cypress_costs;\n \n #ifdef HAVE_AS_RELAX_OPTION\n@@ -623,6 +647,7 @@ sparc_override_options (void)\n     { TARGET_CPU_ultrasparc, \"ultrasparc\" },\n     { TARGET_CPU_ultrasparc3, \"ultrasparc3\" },\n     { TARGET_CPU_niagara, \"niagara\" },\n+    { TARGET_CPU_niagara2, \"niagara2\" },\n     { 0, 0 }\n   };\n   const struct cpu_default *def;\n@@ -660,6 +685,7 @@ sparc_override_options (void)\n     { \"ultrasparc3\", PROCESSOR_ULTRASPARC3, MASK_ISA, MASK_V9|MASK_DEPRECATED_V8_INSNS},\n     /* UltraSPARC T1 */\n     { \"niagara\", PROCESSOR_NIAGARA, MASK_ISA, MASK_V9|MASK_DEPRECATED_V8_INSNS},\n+    { \"niagara2\", PROCESSOR_NIAGARA, MASK_ISA, MASK_V9},\n     { 0, 0, 0, 0 }\n   };\n   const struct cpu_table *cpu;\n@@ -770,7 +796,8 @@ sparc_override_options (void)\n   if (align_functions == 0\n       && (sparc_cpu == PROCESSOR_ULTRASPARC\n \t  || sparc_cpu == PROCESSOR_ULTRASPARC3\n-\t  || sparc_cpu == PROCESSOR_NIAGARA))\n+\t  || sparc_cpu == PROCESSOR_NIAGARA\n+\t  || sparc_cpu == PROCESSOR_NIAGARA2))\n     align_functions = 32;\n \n   /* Validate PCC_STRUCT_RETURN.  */\n@@ -822,6 +849,9 @@ sparc_override_options (void)\n     case PROCESSOR_NIAGARA:\n       sparc_costs = &niagara_costs;\n       break;\n+    case PROCESSOR_NIAGARA2:\n+      sparc_costs = &niagara2_costs;\n+      break;\n     };\n \n #ifdef TARGET_DEFAULT_LONG_DOUBLE_128\n@@ -832,15 +862,17 @@ sparc_override_options (void)\n   if (!PARAM_SET_P (PARAM_SIMULTANEOUS_PREFETCHES))\n     set_param_value (\"simultaneous-prefetches\",\n \t\t     ((sparc_cpu == PROCESSOR_ULTRASPARC\n-\t\t       || sparc_cpu == PROCESSOR_NIAGARA)\n+\t\t       || sparc_cpu == PROCESSOR_NIAGARA\n+\t\t       || sparc_cpu == PROCESSOR_NIAGARA2)\n \t\t      ? 2\n \t\t      : (sparc_cpu == PROCESSOR_ULTRASPARC3\n \t\t\t ? 8 : 3)));\n   if (!PARAM_SET_P (PARAM_L1_CACHE_LINE_SIZE))\n     set_param_value (\"l1-cache-line-size\", \n \t\t     ((sparc_cpu == PROCESSOR_ULTRASPARC\n \t\t       || sparc_cpu == PROCESSOR_ULTRASPARC3\n-\t\t       || sparc_cpu == PROCESSOR_NIAGARA)\n+\t\t       || sparc_cpu == PROCESSOR_NIAGARA\n+\t\t       || sparc_cpu == PROCESSOR_NIAGARA2)\n \t\t      ? 64 : 32));\n }\n \f\n@@ -7236,7 +7268,8 @@ sparc_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n   emit_insn (gen_flush (validize_mem (gen_rtx_MEM (SImode, tramp))));\n   if (sparc_cpu != PROCESSOR_ULTRASPARC\n       && sparc_cpu != PROCESSOR_ULTRASPARC3\n-      && sparc_cpu != PROCESSOR_NIAGARA)\n+      && sparc_cpu != PROCESSOR_NIAGARA\n+      && sparc_cpu != PROCESSOR_NIAGARA2)\n     emit_insn (gen_flush (validize_mem (gen_rtx_MEM (SImode,\n \t\t\t\t\t\t     plus_constant (tramp, 8)))));\n \n@@ -7279,7 +7312,8 @@ sparc64_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n \n   if (sparc_cpu != PROCESSOR_ULTRASPARC\n       && sparc_cpu != PROCESSOR_ULTRASPARC3\n-      && sparc_cpu != PROCESSOR_NIAGARA)\n+      && sparc_cpu != PROCESSOR_NIAGARA\n+      && sparc_cpu != PROCESSOR_NIAGARA2)\n     emit_insn (gen_flushdi (validize_mem (gen_rtx_MEM (DImode, plus_constant (tramp, 8)))));\n \n   /* Call __enable_execute_stack after writing onto the stack to make sure\n@@ -7459,7 +7493,8 @@ sparc_sched_init (FILE *dump ATTRIBUTE_UNUSED,\n static int\n sparc_use_sched_lookahead (void)\n {\n-  if (sparc_cpu == PROCESSOR_NIAGARA)\n+  if (sparc_cpu == PROCESSOR_NIAGARA\n+      || sparc_cpu == PROCESSOR_NIAGARA2)\n     return 0;\n   if (sparc_cpu == PROCESSOR_ULTRASPARC\n       || sparc_cpu == PROCESSOR_ULTRASPARC3)\n@@ -7477,6 +7512,7 @@ sparc_issue_rate (void)\n   switch (sparc_cpu)\n     {\n     case PROCESSOR_NIAGARA:\n+    case PROCESSOR_NIAGARA2:\n     default:\n       return 1;\n     case PROCESSOR_V9:"}, {"sha": "0ff70f6395d6a05ef816be85cdd347c9a7dac9d6", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eeaed6ec41bb97d84e38fc81339e36b0598a442/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eeaed6ec41bb97d84e38fc81339e36b0598a442/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=9eeaed6ec41bb97d84e38fc81339e36b0598a442", "patch": "@@ -207,7 +207,8 @@ extern enum cmodel sparc_cmodel;\n    which requires the following macro to be true if enabled.  Prior to V9,\n    there are no instructions to even talk about memory synchronization.\n    Note that the UltraSPARC III processors don't implement RMO, unlike the\n-   UltraSPARC II processors.  Niagara does not implement RMO either.\n+   UltraSPARC II processors.  Niagara and Niagara-2 do not implement RMO\n+   either.\n \n    Default to false; for example, Solaris never enables RMO, only ever uses\n    total memory ordering (TMO).  */\n@@ -240,11 +241,13 @@ extern enum cmodel sparc_cmodel;\n #define TARGET_CPU_ultrasparc\t8\n #define TARGET_CPU_ultrasparc3\t9\n #define TARGET_CPU_niagara\t10\n+#define TARGET_CPU_niagara2\t11\n \n #if TARGET_CPU_DEFAULT == TARGET_CPU_v9 \\\n  || TARGET_CPU_DEFAULT == TARGET_CPU_ultrasparc \\\n  || TARGET_CPU_DEFAULT == TARGET_CPU_ultrasparc3 \\\n- || TARGET_CPU_DEFAULT == TARGET_CPU_niagara\n+ || TARGET_CPU_DEFAULT == TARGET_CPU_niagara \\\n+ || TARGET_CPU_DEFAULT == TARGET_CPU_niagara2\n \n #define CPP_CPU32_DEFAULT_SPEC \"\"\n #define ASM_CPU32_DEFAULT_SPEC \"\"\n@@ -269,6 +272,10 @@ extern enum cmodel sparc_cmodel;\n #define CPP_CPU64_DEFAULT_SPEC \"-D__sparc_v9__\"\n #define ASM_CPU64_DEFAULT_SPEC \"-Av9b\"\n #endif\n+#if TARGET_CPU_DEFAULT == TARGET_CPU_niagara2\n+#define CPP_CPU64_DEFAULT_SPEC \"-D__sparc_v9__\"\n+#define ASM_CPU64_DEFAULT_SPEC \"-Av9b\"\n+#endif\n \n #else\n \n@@ -360,6 +367,7 @@ extern enum cmodel sparc_cmodel;\n %{mcpu=ultrasparc:-D__sparc_v9__} \\\n %{mcpu=ultrasparc3:-D__sparc_v9__} \\\n %{mcpu=niagara:-D__sparc_v9__} \\\n+%{mcpu=niagara2:-D__sparc_v9__} \\\n %{!mcpu*:%{!mcypress:%{!msparclite:%{!mf930:%{!mf934:%{!mv8:%{!msupersparc:%(cpp_cpu_default)}}}}}}} \\\n \"\n #define CPP_ARCH32_SPEC \"\"\n@@ -410,6 +418,7 @@ extern enum cmodel sparc_cmodel;\n %{mcpu=ultrasparc:%{!mv8plus:-Av9a}} \\\n %{mcpu=ultrasparc3:%{!mv8plus:-Av9b}} \\\n %{mcpu=niagara:%{!mv8plus:-Av9b}} \\\n+%{mcpu=niagara2:%{!mv8plus:-Av9b}} \\\n %{!mcpu*:%{!mcypress:%{!msparclite:%{!mf930:%{!mf934:%{!mv8:%{!msupersparc:%(asm_cpu_default)}}}}}}} \\\n \"\n \n@@ -534,7 +543,8 @@ enum processor_type {\n   PROCESSOR_V9,\n   PROCESSOR_ULTRASPARC,\n   PROCESSOR_ULTRASPARC3,\n-  PROCESSOR_NIAGARA\n+  PROCESSOR_NIAGARA,\n+  PROCESSOR_NIAGARA2\n };\n \n /* This is set from -m{cpu,tune}=xxx.  */\n@@ -2155,7 +2165,8 @@ do {                                                                    \\\n     || (CLASS1) == FPCC_REGS || (CLASS2) == FPCC_REGS)\t\t\\\n    ? ((sparc_cpu == PROCESSOR_ULTRASPARC \\\n        || sparc_cpu == PROCESSOR_ULTRASPARC3 \\\n-       || sparc_cpu == PROCESSOR_NIAGARA) ? 12 : 6) : 2)\n+       || sparc_cpu == PROCESSOR_NIAGARA \\\n+       || sparc_cpu == PROCESSOR_NIAGARA2) ? 12 : 6) : 2)\n \n /* Provide the cost of a branch.  For pre-v9 processors we use\n    a value of 3 to take into account the potential annulling of\n@@ -2168,7 +2179,10 @@ do {                                                                    \\\n    mispredicted branch.\n \n    On Niagara, normal branches insert 3 bubbles into the pipe\n-   and annulled branches insert 4 bubbles.  */\n+   and annulled branches insert 4 bubbles.\n+\n+   On Niagara-2, a not-taken branch costs 1 cycle whereas a taken\n+   branch costs 6 cycles.  */\n \n #define BRANCH_COST \\\n \t((sparc_cpu == PROCESSOR_V9 \\\n@@ -2178,7 +2192,9 @@ do {                                                                    \\\n             ? 9 \\\n \t : (sparc_cpu == PROCESSOR_NIAGARA \\\n \t    ? 4 \\\n-\t : 3)))\n+\t : (sparc_cpu == PROCESSOR_NIAGARA2 \\\n+\t    ? 5 \\\n+\t : 3))))\n \f\n /* Control the assembler format that we output.  */\n "}, {"sha": "daf172ccbb11d84b81f9690b9aeb3aa582c17d59", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eeaed6ec41bb97d84e38fc81339e36b0598a442/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eeaed6ec41bb97d84e38fc81339e36b0598a442/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=9eeaed6ec41bb97d84e38fc81339e36b0598a442", "patch": "@@ -94,7 +94,8 @@\n    v9,\n    ultrasparc,\n    ultrasparc3,\n-   niagara\"\n+   niagara,\n+   niagara2\"\n   (const (symbol_ref \"sparc_cpu_attr\")))\n \n ;; Attribute for the instruction set.\n@@ -316,6 +317,7 @@\n (include \"ultra1_2.md\")\n (include \"ultra3.md\")\n (include \"niagara.md\")\n+(include \"niagara2.md\")\n \n \n ;; Operand and operator predicates."}, {"sha": "3374914ea065940506922b9a2ff6684f8c6b7600", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eeaed6ec41bb97d84e38fc81339e36b0598a442/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eeaed6ec41bb97d84e38fc81339e36b0598a442/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9eeaed6ec41bb97d84e38fc81339e36b0598a442", "patch": "@@ -13924,7 +13924,7 @@ for machine type @var{cpu_type}.  Supported values for @var{cpu_type} are\n @samp{v7}, @samp{cypress}, @samp{v8}, @samp{supersparc}, @samp{sparclite},\n @samp{f930}, @samp{f934}, @samp{hypersparc}, @samp{sparclite86x},\n @samp{sparclet}, @samp{tsc701}, @samp{v9}, @samp{ultrasparc},\n-@samp{ultrasparc3}, and @samp{niagara}.\n+@samp{ultrasparc3}, @samp{niagara} and @samp{niagara2}.\n \n Default instruction scheduling parameters are used for values that select\n an architecture and not an implementation.  These are @samp{v7}, @samp{v8},\n@@ -13938,7 +13938,7 @@ implementations.\n     v8:             supersparc, hypersparc\n     sparclite:      f930, f934, sparclite86x\n     sparclet:       tsc701\n-    v9:             ultrasparc, ultrasparc3, niagara\n+    v9:             ultrasparc, ultrasparc3, niagara, niagara2\n @end smallexample\n \n By default (unless configured otherwise), GCC generates code for the V7\n@@ -13976,7 +13976,8 @@ optimizes it for the Sun UltraSPARC I/II/IIi chips.  With\n @option{-mcpu=ultrasparc3}, the compiler additionally optimizes it for the\n Sun UltraSPARC III/III+/IIIi/IIIi+/IV/IV+ chips.  With\n @option{-mcpu=niagara}, the compiler additionally optimizes it for\n-Sun UltraSPARC T1 chips.\n+Sun UltraSPARC T1 chips.  With @option{-mcpu=niagara2}, the compiler\n+additionally optimizes it for Sun UltraSPARC T2 chips.\n \n @item -mtune=@var{cpu_type}\n @opindex mtune\n@@ -13989,7 +13990,7 @@ The same values for @option{-mcpu=@var{cpu_type}} can be used for\n that select a particular cpu implementation.  Those are @samp{cypress},\n @samp{supersparc}, @samp{hypersparc}, @samp{f930}, @samp{f934},\n @samp{sparclite86x}, @samp{tsc701}, @samp{ultrasparc},\n-@samp{ultrasparc3}, and @samp{niagara}.\n+@samp{ultrasparc3}, @samp{niagara}, and @samp{niagara2}.\n \n @item -mv8plus\n @itemx -mno-v8plus"}]}