{"sha": "b76e28c64d8a13f0fcaf6bddee53c06115c1d186", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc2ZTI4YzY0ZDhhMTNmMGZjYWY2YmRkZWU1M2MwNjExNWMxZDE4Ng==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-08-17T09:11:00Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-08-17T09:11:00Z"}, "message": "re PR fortran/40877 (memory leaks with gfc_charlen?)\n\n2009-08-17  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/40877\n\t* array.c (gfc_resolve_character_array_constructor): Add NULL argument\n\tto gfc_new_charlen.\n\t* decl.c (add_init_expr_to_sym,variable_decl,match_char_spec,\n\tgfc_match_implicit): Ditto.\n\t* expr.c (simplify_const_ref): Fix memory leak.\n\t(gfc_simplify_expr): Add NULL argument to gfc_new_charlen.\n\t* gfortran.h (gfc_new_charlen): Modified prototype.\n\t* iresolve.c (check_charlen_present,gfc_resolve_char_achar): Add NULL\n\targument to gfc_new_charlen.\n\t* module.c (mio_charlen): Ditto.\n\t* resolve.c (gfc_resolve_substring_charlen,\n\tgfc_resolve_character_operator,fixup_charlen): Ditto.\n\t(resolve_fl_derived,resolve_symbol): Add argument to gfc_charlen.\n\t* symbol.c (gfc_new_charlen): Add argument 'old_cl' (to make a copy of\n\tan existing charlen).\n\t(gfc_set_default_type,generate_isocbinding_symbol): Fix memory leak.\n\t(gfc_copy_formal_args_intr): Add NULL argument to gfc_new_charlen.\n\t* trans-decl.c (create_function_arglist): Fix memory leak.\n\nFrom-SVN: r150823", "tree": {"sha": "b8373165dd65e8525462591a15c32863293ad590", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8373165dd65e8525462591a15c32863293ad590"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b76e28c64d8a13f0fcaf6bddee53c06115c1d186", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b76e28c64d8a13f0fcaf6bddee53c06115c1d186", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b76e28c64d8a13f0fcaf6bddee53c06115c1d186", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b76e28c64d8a13f0fcaf6bddee53c06115c1d186/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9d9afef6f725fc3444d2639c0961a70b1da54a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9d9afef6f725fc3444d2639c0961a70b1da54a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9d9afef6f725fc3444d2639c0961a70b1da54a0"}], "stats": {"total": 109, "additions": 64, "deletions": 45}, "files": [{"sha": "8a63538bc2378a7373882799e206a4cd4dc925cf", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76e28c64d8a13f0fcaf6bddee53c06115c1d186/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76e28c64d8a13f0fcaf6bddee53c06115c1d186/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b76e28c64d8a13f0fcaf6bddee53c06115c1d186", "patch": "@@ -1,3 +1,25 @@\n+2009-08-17  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/40877\n+\t* array.c (gfc_resolve_character_array_constructor): Add NULL argument\n+\tto gfc_new_charlen.\n+\t* decl.c (add_init_expr_to_sym,variable_decl,match_char_spec,\n+\tgfc_match_implicit): Ditto.\n+\t* expr.c (simplify_const_ref): Fix memory leak.\n+\t(gfc_simplify_expr): Add NULL argument to gfc_new_charlen.\n+\t* gfortran.h (gfc_new_charlen): Modified prototype.\n+\t* iresolve.c (check_charlen_present,gfc_resolve_char_achar): Add NULL\n+\targument to gfc_new_charlen.\n+\t* module.c (mio_charlen): Ditto.\n+\t* resolve.c (gfc_resolve_substring_charlen,\n+\tgfc_resolve_character_operator,fixup_charlen): Ditto.\n+\t(resolve_fl_derived,resolve_symbol): Add argument to gfc_charlen.\n+\t* symbol.c (gfc_new_charlen): Add argument 'old_cl' (to make a copy of\n+\tan existing charlen).\n+\t(gfc_set_default_type,generate_isocbinding_symbol): Fix memory leak.\n+\t(gfc_copy_formal_args_intr): Add NULL argument to gfc_new_charlen.\n+\t* trans-decl.c (create_function_arglist): Fix memory leak.\n+\n 2009-08-17  Richard Guenther  <rguenther@suse.de>\n \n \t* trans-expr.c (gfc_trans_scalar_assign): Replace hack with"}, {"sha": "3ceb0e751813c0796c0c5d2bde5553479f0b0f3a", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76e28c64d8a13f0fcaf6bddee53c06115c1d186/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76e28c64d8a13f0fcaf6bddee53c06115c1d186/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=b76e28c64d8a13f0fcaf6bddee53c06115c1d186", "patch": "@@ -1599,7 +1599,7 @@ gfc_resolve_character_array_constructor (gfc_expr *expr)\n \t    goto got_charlen;\n \t  }\n \n-      expr->ts.u.cl = gfc_new_charlen (gfc_current_ns);\n+      expr->ts.u.cl = gfc_new_charlen (gfc_current_ns, NULL);\n     }\n \n got_charlen:"}, {"sha": "e4813b8003896828a41ddb1144244ef479ce7701", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76e28c64d8a13f0fcaf6bddee53c06115c1d186/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76e28c64d8a13f0fcaf6bddee53c06115c1d186/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=b76e28c64d8a13f0fcaf6bddee53c06115c1d186", "patch": "@@ -1265,7 +1265,7 @@ add_init_expr_to_sym (const char *name, gfc_expr **initp, locus *var_locus)\n \t      int clen;\n \t      /* If there are multiple CHARACTER variables declared on the\n \t\t same line, we don't want them to share the same length.  */\n-\t      sym->ts.u.cl = gfc_new_charlen (gfc_current_ns);\n+\t      sym->ts.u.cl = gfc_new_charlen (gfc_current_ns, NULL);\n \n \t      if (sym->attr.flavor == FL_PARAMETER)\n \t\t{\n@@ -1297,7 +1297,7 @@ add_init_expr_to_sym (const char *name, gfc_expr **initp, locus *var_locus)\n \t\t{\n \t\t  /* Build a new charlen to prevent simplification from\n \t\t     deleting the length before it is resolved.  */\n-\t\t  init->ts.u.cl = gfc_new_charlen (gfc_current_ns);\n+\t\t  init->ts.u.cl = gfc_new_charlen (gfc_current_ns, NULL);\n \t\t  init->ts.u.cl->length = gfc_copy_expr (sym->ts.u.cl->length);\n \n \t\t  for (p = init->value.constructor; p; p = p->next)\n@@ -1601,7 +1601,7 @@ variable_decl (int elem)\n       switch (match_char_length (&char_len))\n \t{\n \tcase MATCH_YES:\n-\t  cl = gfc_new_charlen (gfc_current_ns);\n+\t  cl = gfc_new_charlen (gfc_current_ns, NULL);\n \n \t  cl->length = char_len;\n \t  break;\n@@ -1613,7 +1613,7 @@ variable_decl (int elem)\n \t      && (current_ts.u.cl->length == NULL\n \t\t  || current_ts.u.cl->length->expr_type != EXPR_CONSTANT))\n \t    {\n-\t      cl = gfc_new_charlen (gfc_current_ns);\n+\t      cl = gfc_new_charlen (gfc_current_ns, NULL);\n \t      cl->length = gfc_copy_expr (current_ts.u.cl->length);\n \t    }\n \t  else\n@@ -2235,7 +2235,7 @@ match_char_spec (gfc_typespec *ts)\n     }\n \n   /* Do some final massaging of the length values.  */\n-  cl = gfc_new_charlen (gfc_current_ns);\n+  cl = gfc_new_charlen (gfc_current_ns, NULL);\n \n   if (seen_length == 0)\n     cl->length = gfc_int_expr (1);\n@@ -2618,7 +2618,7 @@ gfc_match_implicit (void)\n \t      if (ts.type == BT_CHARACTER && !ts.u.cl)\n \t\t{\n \t\t  ts.kind = gfc_default_character_kind;\n-\t\t  ts.u.cl = gfc_new_charlen (gfc_current_ns);\n+\t\t  ts.u.cl = gfc_new_charlen (gfc_current_ns, NULL);\n \t\t  ts.u.cl->length = gfc_int_expr (1);\n \t\t}\n "}, {"sha": "57582a9fc4767170aa8ed0c3553f4fec22b04185", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76e28c64d8a13f0fcaf6bddee53c06115c1d186/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76e28c64d8a13f0fcaf6bddee53c06115c1d186/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=b76e28c64d8a13f0fcaf6bddee53c06115c1d186", "patch": "@@ -1505,12 +1505,11 @@ simplify_const_ref (gfc_expr *p)\n \t\t\tstring_len = 0;\n \n \t\t      if (!p->ts.u.cl)\n-\t\t\t{\n-\t\t\t  p->ts.u.cl = gfc_get_charlen ();\n-\t\t\t  p->ts.u.cl->next = NULL;\n-\t\t\t  p->ts.u.cl->length = NULL;\n-\t\t\t}\n-\t\t      gfc_free_expr (p->ts.u.cl->length);\n+\t\t\tp->ts.u.cl = gfc_new_charlen (p->symtree->n.sym->ns,\n+\t\t\t\t\t\t      NULL);\n+\t\t      else\n+\t\t\tgfc_free_expr (p->ts.u.cl->length);\n+\n \t\t      p->ts.u.cl->length = gfc_int_expr (string_len);\n \t\t    }\n \t\t}\n@@ -1681,7 +1680,7 @@ gfc_simplify_expr (gfc_expr *p, int type)\n \t  gfc_free (p->value.character.string);\n \t  p->value.character.string = s;\n \t  p->value.character.length = end - start;\n-\t  p->ts.u.cl = gfc_new_charlen (gfc_current_ns);\n+\t  p->ts.u.cl = gfc_new_charlen (gfc_current_ns, NULL);\n \t  p->ts.u.cl->length = gfc_int_expr (p->value.character.length);\n \t  gfc_free_ref_list (p->ref);\n \t  p->ref = NULL;"}, {"sha": "a4a3b817cf955e4b62f9f69d03c8bbf34d2b90cb", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76e28c64d8a13f0fcaf6bddee53c06115c1d186/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76e28c64d8a13f0fcaf6bddee53c06115c1d186/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=b76e28c64d8a13f0fcaf6bddee53c06115c1d186", "patch": "@@ -2436,7 +2436,7 @@ int gfc_symbols_could_alias (gfc_symbol *, gfc_symbol *);\n void gfc_undo_symbols (void);\n void gfc_commit_symbols (void);\n void gfc_commit_symbol (gfc_symbol *);\n-gfc_charlen *gfc_new_charlen (gfc_namespace *);\n+gfc_charlen *gfc_new_charlen (gfc_namespace *, gfc_charlen *);\n void gfc_free_charlen (gfc_charlen *, gfc_charlen *);\n void gfc_free_namespace (gfc_namespace *);\n "}, {"sha": "ee8609e696b4a6034af1e375e44fc1f54eb7db4c", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76e28c64d8a13f0fcaf6bddee53c06115c1d186/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76e28c64d8a13f0fcaf6bddee53c06115c1d186/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=b76e28c64d8a13f0fcaf6bddee53c06115c1d186", "patch": "@@ -63,7 +63,7 @@ static void\n check_charlen_present (gfc_expr *source)\n {\n   if (source->ts.u.cl == NULL)\n-    source->ts.u.cl = gfc_new_charlen (gfc_current_ns);\n+    source->ts.u.cl = gfc_new_charlen (gfc_current_ns, NULL);\n \n   if (source->expr_type == EXPR_CONSTANT)\n     {\n@@ -161,7 +161,7 @@ gfc_resolve_char_achar (gfc_expr *f, gfc_expr *x, gfc_expr *kind,\n   f->ts.type = BT_CHARACTER;\n   f->ts.kind = (kind == NULL)\n \t     ? gfc_default_character_kind : mpz_get_si (kind->value.integer);\n-  f->ts.u.cl = gfc_new_charlen (gfc_current_ns);\n+  f->ts.u.cl = gfc_new_charlen (gfc_current_ns, NULL);\n   f->ts.u.cl->length = gfc_int_expr (1);\n \n   f->value.function.name = gfc_get_string (name, f->ts.kind,"}, {"sha": "c791797d7ddf1dade68dc508724839d2b0bb2982", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76e28c64d8a13f0fcaf6bddee53c06115c1d186/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76e28c64d8a13f0fcaf6bddee53c06115c1d186/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=b76e28c64d8a13f0fcaf6bddee53c06115c1d186", "patch": "@@ -2009,7 +2009,7 @@ mio_charlen (gfc_charlen **clp)\n     {\n       if (peek_atom () != ATOM_RPAREN)\n \t{\n-\t  cl = gfc_new_charlen (gfc_current_ns);\n+\t  cl = gfc_new_charlen (gfc_current_ns, NULL);\n \t  mio_expr (&cl->length);\n \t  *clp = cl;\n \t}"}, {"sha": "fb72b938bee1bf1a1001b2e71c0fe83b40c5ab1e", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76e28c64d8a13f0fcaf6bddee53c06115c1d186/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76e28c64d8a13f0fcaf6bddee53c06115c1d186/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=b76e28c64d8a13f0fcaf6bddee53c06115c1d186", "patch": "@@ -4129,7 +4129,7 @@ gfc_resolve_substring_charlen (gfc_expr *e)\n   e->ts.kind = gfc_default_character_kind;\n \n   if (!e->ts.u.cl)\n-    e->ts.u.cl = gfc_new_charlen (gfc_current_ns);\n+    e->ts.u.cl = gfc_new_charlen (gfc_current_ns, NULL);\n \n   if (char_ref->u.ss.start)\n     start = gfc_copy_expr (char_ref->u.ss.start);\n@@ -4602,7 +4602,7 @@ gfc_resolve_character_operator (gfc_expr *e)\n   else if (op2->expr_type == EXPR_CONSTANT)\n     e2 = gfc_int_expr (op2->value.character.length);\n \n-  e->ts.u.cl = gfc_new_charlen (gfc_current_ns);\n+  e->ts.u.cl = gfc_new_charlen (gfc_current_ns, NULL);\n \n   if (!e1 || !e2)\n     return;\n@@ -4641,7 +4641,7 @@ fixup_charlen (gfc_expr *e)\n \n     default:\n       if (!e->ts.u.cl)\n-\te->ts.u.cl = gfc_new_charlen (gfc_current_ns);\n+\te->ts.u.cl = gfc_new_charlen (gfc_current_ns, NULL);\n \n       break;\n     }\n@@ -9452,9 +9452,7 @@ resolve_fl_derived (gfc_symbol *sym)\n \t      /* Copy char length.  */\n \t      if (ifc->ts.type == BT_CHARACTER && ifc->ts.u.cl)\n \t\t{\n-\t\t  c->ts.u.cl = gfc_new_charlen (sym->ns);\n-\t          c->ts.u.cl->resolved = ifc->ts.u.cl->resolved;\n-\t\t  c->ts.u.cl->length = gfc_copy_expr (ifc->ts.u.cl->length);\n+\t\t  c->ts.u.cl = gfc_new_charlen (sym->ns, ifc->ts.u.cl);\n \t\t  /* TODO: gfc_expr_replace_symbols (c->ts.u.cl->length, c);*/\n \t\t}\n \t    }\n@@ -9956,9 +9954,7 @@ resolve_symbol (gfc_symbol *sym)\n \t  /* Copy char length.  */\n \t  if (ifc->ts.type == BT_CHARACTER && ifc->ts.u.cl)\n \t    {\n-\t      sym->ts.u.cl = gfc_new_charlen (sym->ns);\n-\t      sym->ts.u.cl->resolved = ifc->ts.u.cl->resolved;\n-\t      sym->ts.u.cl->length = gfc_copy_expr (ifc->ts.u.cl->length);\n+\t      sym->ts.u.cl = gfc_new_charlen (sym->ns, ifc->ts.u.cl);\n \t      gfc_expr_replace_symbols (sym->ts.u.cl->length, sym);\n \t    }\n \t}"}, {"sha": "8e4f6e9a114dc73afd0d58592215e6a76cc6f1f7", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76e28c64d8a13f0fcaf6bddee53c06115c1d186/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76e28c64d8a13f0fcaf6bddee53c06115c1d186/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=b76e28c64d8a13f0fcaf6bddee53c06115c1d186", "patch": "@@ -270,10 +270,7 @@ gfc_set_default_type (gfc_symbol *sym, int error_flag, gfc_namespace *ns)\n   sym->attr.implicit_type = 1;\n \n   if (ts->type == BT_CHARACTER && ts->u.cl)\n-    {\n-      sym->ts.u.cl = gfc_get_charlen ();\n-      *sym->ts.u.cl = *ts->u.cl;\n-    }\n+    sym->ts.u.cl = gfc_new_charlen (sym->ns, ts->u.cl);\n \n   if (sym->attr.is_bind_c == 1)\n     {\n@@ -3076,15 +3073,29 @@ gfc_free_finalizer_list (gfc_finalizer* list)\n }\n \n \n-/* Create a new gfc_charlen structure and add it to a namespace.  */\n+/* Create a new gfc_charlen structure and add it to a namespace.\n+   If 'old_cl' is given, the newly created charlen will be a copy of it.  */\n \n gfc_charlen*\n-gfc_new_charlen (gfc_namespace *ns)\n+gfc_new_charlen (gfc_namespace *ns, gfc_charlen *old_cl)\n {\n   gfc_charlen *cl;\n   cl = gfc_get_charlen ();\n+\n+  /* Put into namespace.  */\n   cl->next = ns->cl_list;\n   ns->cl_list = cl;\n+\n+  /* Copy old_cl.  */\n+  if (old_cl)\n+    {\n+      cl->length = gfc_copy_expr (old_cl->length);\n+      cl->length_from_typespec = old_cl->length_from_typespec;\n+      cl->backend_decl = old_cl->backend_decl;\n+      cl->passed_length = old_cl->passed_length;\n+      cl->resolved = old_cl->resolved;\n+    }\n+\n   return cl;\n }\n \n@@ -3956,7 +3967,7 @@ gfc_copy_formal_args_intr (gfc_symbol *dest, gfc_intrinsic_sym *src)\n       formal_arg->sym->attr.dummy = 1;\n \n       if (formal_arg->sym->ts.type == BT_CHARACTER)\n-\tformal_arg->sym->ts.u.cl = gfc_new_charlen (gfc_current_ns);\n+\tformal_arg->sym->ts.u.cl = gfc_new_charlen (gfc_current_ns, NULL);\n \n       /* If this isn't the first arg, set up the next ptr.  For the\n         last arg built, the formal_arg->next will never get set to\n@@ -4219,7 +4230,7 @@ generate_isocbinding_symbol (const char *mod_name, iso_c_binding_symbol s,\n \ttmp_sym->value->value.character.string[0]\n \t  = (gfc_char_t) c_interop_kinds_table[s].value;\n \ttmp_sym->value->value.character.string[1] = '\\0';\n-\ttmp_sym->ts.u.cl = gfc_get_charlen ();\n+\ttmp_sym->ts.u.cl = gfc_new_charlen (gfc_current_ns, NULL);\n \ttmp_sym->ts.u.cl->length = gfc_int_expr (1);\n \n \t/* May not need this in both attr and ts, but do need in"}, {"sha": "3cc790381ae35d8effeb530558f87c0bd1479ea5", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76e28c64d8a13f0fcaf6bddee53c06115c1d186/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76e28c64d8a13f0fcaf6bddee53c06115c1d186/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=b76e28c64d8a13f0fcaf6bddee53c06115c1d186", "patch": "@@ -1796,16 +1796,7 @@ create_function_arglist (gfc_symbol * sym)\n \t      /* This can happen if the same type is used for multiple\n \t\t arguments. We need to copy cl as otherwise\n \t\t cl->passed_length gets overwritten.  */\n-\t      gfc_charlen *cl, *cl2;\n-\t      cl = f->sym->ts.u.cl;\n-\t      f->sym->ts.u.cl = gfc_get_charlen();\n-\t      f->sym->ts.u.cl->length = cl->length;\n-\t      f->sym->ts.u.cl->backend_decl = cl->backend_decl;\n-\t      f->sym->ts.u.cl->length_from_typespec = cl->length_from_typespec;\n-\t      f->sym->ts.u.cl->resolved = cl->resolved;\n-\t      cl2 = f->sym->ts.u.cl->next;\n-\t      f->sym->ts.u.cl->next = cl;\n-              cl->next = cl2;\n+\t      f->sym->ts.u.cl = gfc_new_charlen (f->sym->ns, f->sym->ts.u.cl);\n             }\n \t  f->sym->ts.u.cl->passed_length = length;\n "}]}