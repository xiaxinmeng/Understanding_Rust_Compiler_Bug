{"sha": "f658f1d7a22c09e1192fb2343f20263890106b82", "node_id": "C_kwDOANBUbNoAKGY2NThmMWQ3YTIyYzA5ZTExOTJmYjIzNDNmMjAyNjM4OTAxMDZiODI", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-21T00:16:32Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-21T00:16:32Z"}, "message": "Daily bump.", "tree": {"sha": "45c6b9ab0f7d1fef151f5a30373f442d1a5fb263", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45c6b9ab0f7d1fef151f5a30373f442d1a5fb263"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f658f1d7a22c09e1192fb2343f20263890106b82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f658f1d7a22c09e1192fb2343f20263890106b82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f658f1d7a22c09e1192fb2343f20263890106b82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f658f1d7a22c09e1192fb2343f20263890106b82/comments", "author": null, "committer": null, "parents": [{"sha": "ce2dbf943ac8ffefe048016ac3abfd3b6a4518d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce2dbf943ac8ffefe048016ac3abfd3b6a4518d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce2dbf943ac8ffefe048016ac3abfd3b6a4518d4"}], "stats": {"total": 132, "additions": 131, "deletions": 1}, "files": [{"sha": "0100f7a5ce50d1d87e6592707e94eabb46610d44", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f658f1d7a22c09e1192fb2343f20263890106b82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f658f1d7a22c09e1192fb2343f20263890106b82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f658f1d7a22c09e1192fb2343f20263890106b82", "patch": "@@ -1,3 +1,32 @@\n+2021-11-20  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/103052\n+\t* ipa-modref.c (ignore_nondeterminism_p): Allow looping pure/cont.\n+\t(merge_call_side_effects): Improve debug output.\n+\n+2021-11-20  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/103052\n+\t* ipa-pure-const.c (propagate_pure_const): Fix merging of loping flag.\n+\n+2021-11-20  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\tPR tree-optimization/103226\n+\t* config/bfin/bfin.md (doloop pattern, splitter and expander): Clobber\n+\tCC.\n+\n+2021-11-20  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/103220\n+\t* match.pd ((type) X bitop CST): Don't check if CST\n+\tfits into the type if only the sign changes.\n+\n+2021-11-20  Alexandre Oliva  <oliva@adacore.com>\n+\n+\tPR tree-optimization/102988\n+\t* gimple-harden-conditionals.cc (detach_value): Copy SSA_NAME\n+\twithout decl sharing.\n+\n 2021-11-19  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* doc/invoke.texi: Remove whitespace after an @option."}, {"sha": "ffe2a46379b6086a50a4431f3da9559c4b7dc21e", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f658f1d7a22c09e1192fb2343f20263890106b82/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f658f1d7a22c09e1192fb2343f20263890106b82/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=f658f1d7a22c09e1192fb2343f20263890106b82", "patch": "@@ -1 +1 @@\n-20211120\n+20211121"}, {"sha": "c2fc2bd3ff8338628792d43726386c5bbd433900", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f658f1d7a22c09e1192fb2343f20263890106b82/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f658f1d7a22c09e1192fb2343f20263890106b82/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=f658f1d7a22c09e1192fb2343f20263890106b82", "patch": "@@ -1,3 +1,54 @@\n+2021-11-20  Antoni Boucher  <bouanto@zoho.com>\n+\n+\tPR target/96889\n+\t* docs/topics/compatibility.rst (LIBGCCJIT_ABI_16): New ABI tag.\n+\t* docs/topics/functions.rst: Add documentation for the\n+\tfunctions gcc_jit_function_get_return_type and\n+\tgcc_jit_function_get_param_count\n+\t* docs/topics/types.rst: Add documentation for the functions\n+\tgcc_jit_function_type_get_return_type,\n+\tgcc_jit_function_type_get_param_count,\n+\tgcc_jit_function_type_get_param_type,\n+\tgcc_jit_type_unqualified, gcc_jit_type_dyncast_array,\n+\tgcc_jit_type_is_bool,\n+\tgcc_jit_type_dyncast_function_ptr_type,\n+\tgcc_jit_type_is_integral, gcc_jit_type_is_pointer,\n+\tgcc_jit_type_dyncast_vector,\n+\tgcc_jit_vector_type_get_element_type,\n+\tgcc_jit_vector_type_get_num_units,\n+\tgcc_jit_struct_get_field, gcc_jit_type_is_struct,\n+\tand gcc_jit_struct_get_field_count\n+\t* libgccjit.c:\n+\t(gcc_jit_function_get_return_type, gcc_jit_function_get_param_count,\n+\tgcc_jit_function_type_get_return_type,\n+\tgcc_jit_function_type_get_param_count,\n+\tgcc_jit_function_type_get_param_type, gcc_jit_type_unqualified,\n+\tgcc_jit_type_dyncast_array, gcc_jit_type_is_bool,\n+\tgcc_jit_type_dyncast_function_ptr_type, gcc_jit_type_is_integral,\n+\tgcc_jit_type_is_pointer, gcc_jit_type_dyncast_vector,\n+\tgcc_jit_vector_type_get_element_type,\n+\tgcc_jit_vector_type_get_num_units, gcc_jit_struct_get_field,\n+\tgcc_jit_type_is_struct, gcc_jit_struct_get_field_count): New\n+\tfunctions.\n+\t(struct gcc_jit_function_type, struct gcc_jit_vector_type):\n+\tNew types.\n+\t* libgccjit.h:\n+\t(gcc_jit_function_get_return_type, gcc_jit_function_get_param_count,\n+\tgcc_jit_function_type_get_return_type,\n+\tgcc_jit_function_type_get_param_count,\n+\tgcc_jit_function_type_get_param_type, gcc_jit_type_unqualified,\n+\tgcc_jit_type_dyncast_array, gcc_jit_type_is_bool,\n+\tgcc_jit_type_dyncast_function_ptr_type, gcc_jit_type_is_integral,\n+\tgcc_jit_type_is_pointer, gcc_jit_type_dyncast_vector,\n+\tgcc_jit_vector_type_get_element_type,\n+\tgcc_jit_vector_type_get_num_units, gcc_jit_struct_get_field,\n+\tgcc_jit_type_is_struct, gcc_jit_struct_get_field_count): New\n+\tfunction declarations.\n+\t(struct gcc_jit_function_type, struct gcc_jit_vector_type):\n+\tNew types.\n+\t* jit-recording.h: New functions (is_struct and is_vector)\n+\t* libgccjit.map (LIBGCCJIT_ABI_16): New ABI tag.\n+\n 2021-11-12  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/103199"}, {"sha": "b342b71dd23f1ab9db5f3d913e478acc91d59d7b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f658f1d7a22c09e1192fb2343f20263890106b82/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f658f1d7a22c09e1192fb2343f20263890106b82/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f658f1d7a22c09e1192fb2343f20263890106b82", "patch": "@@ -1,3 +1,27 @@\n+2021-11-20  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/103052\n+\t* gcc.c-torture/execute/pr103052.c: New test.\n+\n+2021-11-20  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/103220\n+\t* gcc.dg/tree-ssa/pr103220-1.c: New test.\n+\t* gcc.dg/tree-ssa/pr103220-2.c: New test.\n+\t* gcc.dg/pr25530.c: Update test to check for\n+\t4294967294 in the case -2 is not matched.\n+\n+2021-11-20  Alexandre Oliva  <oliva@adacore.com>\n+\n+\tPR tree-optimization/102988\n+\t* g++.dg/pr102988.C: New.\n+\n+2021-11-20  Antoni Boucher  <bouanto@zoho.com>\n+\n+\tPR target/96889\n+\t* jit.dg/all-non-failing-tests.h: Add test-reflection.c.\n+\t* jit.dg/test-reflection.c: New test.\n+\n 2021-11-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/101180"}, {"sha": "c943bf81e5071fbad818ae1b04d5f8f57946298f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f658f1d7a22c09e1192fb2343f20263890106b82/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f658f1d7a22c09e1192fb2343f20263890106b82/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f658f1d7a22c09e1192fb2343f20263890106b82", "patch": "@@ -1,3 +1,29 @@\n+2021-11-20  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/erase_if.h (__erase_nodes_if): Add _UnsafeContainer template\n+\tparameter. Use it to get iterators to work with.\n+\t* include/debug/macros.h (__glibcxx_check_erase2): New.\n+\t* include/debug/map.h (map<>::erase(_Base_const_iterator)): New.\n+\t(map<>::erase(const_iterator)): Use latter.\n+\t* include/debug/multimap.h (multimap<>::erase(_Base_const_iterator)): New.\n+\t(multimap<>::erase(const_iterator)): Use latter.\n+\t* include/debug/multiset.h (multiset<>::erase(_Base_const_iterator)): New.\n+\t(multiset<>::erase(const_iterator)): Use latter.\n+\t* include/debug/set.h (set<>::erase(_Base_const_iterator)): New.\n+\t(set<>::erase(const_iterator)): Use latter.\n+\t* include/debug/unordered_map (unordered_map<>::erase(_Base_const_iterator)): New.\n+\t(unordered_multimap<>::erase(const_iterator)): New.\n+\t* include/debug/unordered_set (unordered_set<>::erase(_Base_const_iterator)): New.\n+\t(unordered_multiset<>::erase(const_iterator)): New.\n+\t* include/experimental/map (erase_if): Adapt.\n+\t* include/experimental/set (erase_if): Adapt.\n+\t* include/experimental/unordered_map (erase_if): Adapt.\n+\t* include/experimental/unordered_set (erase_if): Adapt.\n+\t* include/std/map (erase_if): Adapt.\n+\t* include/std/set (erase_if): Adapt.\n+\t* include/std/unordered_map (erase_if): Adapt.\n+\t* include/std/unordered_set (erase_if): Adapt.\n+\n 2021-11-19  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/27_io/basic_istringstream/cons/char/1.cc: Check all"}]}