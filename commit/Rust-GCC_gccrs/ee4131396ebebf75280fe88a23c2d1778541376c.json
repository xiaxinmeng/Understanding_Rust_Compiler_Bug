{"sha": "ee4131396ebebf75280fe88a23c2d1778541376c", "node_id": "C_kwDOANBUbNoAKGVlNDEzMTM5NmViZWJmNzUyODBmZTg4YTIzYzJkMTc3ODU0MTM3NmM", "commit": {"author": {"name": "M V V S Manoj Kumar", "email": "mvvsmanojkumar@gmail.com", "date": "2022-02-13T03:22:25Z"}, "committer": {"name": "M V V S Manoj Kumar", "email": "mvvsmanojkumar@gmail.com", "date": "2022-02-17T16:41:23Z"}, "message": " Removed Lambda Function within AST::PathPattern\n\nAddresses issue #717\n1) Changed the rust-path.h and removed the iterate_path_segments\n   fuction.\n2) Removed the lambda fuction form rust-ast-lower.cc and replaced it\n   with a for loop.\n\nSigned-off-by : M V V S Manoj Kumar <mvvsmanojkumar@gmail.com>", "tree": {"sha": "b3e268e01cf45bc6ab4302439812f207e26d9169", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3e268e01cf45bc6ab4302439812f207e26d9169"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee4131396ebebf75280fe88a23c2d1778541376c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee4131396ebebf75280fe88a23c2d1778541376c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee4131396ebebf75280fe88a23c2d1778541376c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee4131396ebebf75280fe88a23c2d1778541376c/comments", "author": {"login": "mvvsmk", "id": 71825974, "node_id": "MDQ6VXNlcjcxODI1OTc0", "avatar_url": "https://avatars.githubusercontent.com/u/71825974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mvvsmk", "html_url": "https://github.com/mvvsmk", "followers_url": "https://api.github.com/users/mvvsmk/followers", "following_url": "https://api.github.com/users/mvvsmk/following{/other_user}", "gists_url": "https://api.github.com/users/mvvsmk/gists{/gist_id}", "starred_url": "https://api.github.com/users/mvvsmk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mvvsmk/subscriptions", "organizations_url": "https://api.github.com/users/mvvsmk/orgs", "repos_url": "https://api.github.com/users/mvvsmk/repos", "events_url": "https://api.github.com/users/mvvsmk/events{/privacy}", "received_events_url": "https://api.github.com/users/mvvsmk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mvvsmk", "id": 71825974, "node_id": "MDQ6VXNlcjcxODI1OTc0", "avatar_url": "https://avatars.githubusercontent.com/u/71825974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mvvsmk", "html_url": "https://github.com/mvvsmk", "followers_url": "https://api.github.com/users/mvvsmk/followers", "following_url": "https://api.github.com/users/mvvsmk/following{/other_user}", "gists_url": "https://api.github.com/users/mvvsmk/gists{/gist_id}", "starred_url": "https://api.github.com/users/mvvsmk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mvvsmk/subscriptions", "organizations_url": "https://api.github.com/users/mvvsmk/orgs", "repos_url": "https://api.github.com/users/mvvsmk/repos", "events_url": "https://api.github.com/users/mvvsmk/events{/privacy}", "received_events_url": "https://api.github.com/users/mvvsmk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b71cc52613219f353b054eb5520cd3886f354c10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b71cc52613219f353b054eb5520cd3886f354c10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b71cc52613219f353b054eb5520cd3886f354c10"}], "stats": {"total": 50, "additions": 21, "deletions": 29}, "files": [{"sha": "a4749ccb67890f75814edd04cc7b478c07c731f1", "filename": "gcc/rust/ast/rust-path.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4131396ebebf75280fe88a23c2d1778541376c/gcc%2Frust%2Fast%2Frust-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4131396ebebf75280fe88a23c2d1778541376c/gcc%2Frust%2Fast%2Frust-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-path.h?ref=ee4131396ebebf75280fe88a23c2d1778541376c", "patch": "@@ -303,15 +303,6 @@ class PathPattern : public Pattern\n   // TODO: this seems kinda dodgy\n   std::vector<PathExprSegment> &get_segments () { return segments; }\n   const std::vector<PathExprSegment> &get_segments () const { return segments; }\n-\n-  void iterate_path_segments (std::function<bool (PathExprSegment &)> cb)\n-  {\n-    for (auto it = segments.begin (); it != segments.end (); it++)\n-      {\n-\tif (!cb (*it))\n-\t  return;\n-      }\n-  }\n };\n \n /* AST node representing a path-in-expression pattern (path that allows generic"}, {"sha": "aac6ee5f1f8113f680fb8a69fddf304acd8bd97b", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4131396ebebf75280fe88a23c2d1778541376c/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4131396ebebf75280fe88a23c2d1778541376c/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=ee4131396ebebf75280fe88a23c2d1778541376c", "patch": "@@ -263,17 +263,17 @@ void\n ASTLowerPathInExpression::visit (AST::PathInExpression &expr)\n {\n   std::vector<HIR::PathExprSegment> path_segments;\n-  expr.iterate_path_segments ([&] (AST::PathExprSegment &s) mutable -> bool {\n-    path_segments.push_back (lower_path_expr_seg (s));\n-\n-    // insert the mappings for the segment\n-    HIR::PathExprSegment *lowered_seg = &path_segments.back ();\n-    mappings->insert_hir_path_expr_seg (\n-      lowered_seg->get_mappings ().get_crate_num (),\n-      lowered_seg->get_mappings ().get_hirid (), lowered_seg);\n-    return true;\n-  });\n+  auto &segments = expr.get_segments ();\n+  for (auto &s : segments)\n+    {\n+      path_segments.push_back (lower_path_expr_seg ((s)));\n \n+      // insert the mappings for the segment\n+      HIR::PathExprSegment *lowered_seg = &path_segments.back ();\n+      mappings->insert_hir_path_expr_seg (\n+\tlowered_seg->get_mappings ().get_crate_num (),\n+\tlowered_seg->get_mappings ().get_hirid (), lowered_seg);\n+    }\n   auto crate_num = mappings->get_current_crate ();\n   Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n \t\t\t\t mappings->get_next_hir_id (crate_num),\n@@ -311,16 +311,17 @@ ASTLowerQualPathInExpression::visit (AST::QualifiedPathInExpression &expr)\n     = lower_qual_path_type (expr.get_qualified_path_type ());\n \n   std::vector<HIR::PathExprSegment> path_segments;\n-  expr.iterate_path_segments ([&] (AST::PathExprSegment &s) mutable -> bool {\n-    path_segments.push_back (lower_path_expr_seg (s));\n-\n-    // insert the mappings for the segment\n-    HIR::PathExprSegment *lowered_seg = &path_segments.back ();\n-    mappings->insert_hir_path_expr_seg (\n-      lowered_seg->get_mappings ().get_crate_num (),\n-      lowered_seg->get_mappings ().get_hirid (), lowered_seg);\n-    return true;\n-  });\n+  auto &segments = expr.get_segments ();\n+  for (auto &s : segments)\n+    {\n+      path_segments.push_back (lower_path_expr_seg ((s)));\n+\n+      // insert the mappings for the segment\n+      HIR::PathExprSegment *lowered_seg = &path_segments.back ();\n+      mappings->insert_hir_path_expr_seg (\n+\tlowered_seg->get_mappings ().get_crate_num (),\n+\tlowered_seg->get_mappings ().get_hirid (), lowered_seg);\n+    }\n \n   auto crate_num = mappings->get_current_crate ();\n   Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),"}]}