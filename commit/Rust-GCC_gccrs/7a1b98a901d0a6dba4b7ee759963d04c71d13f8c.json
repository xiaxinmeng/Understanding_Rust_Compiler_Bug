{"sha": "7a1b98a901d0a6dba4b7ee759963d04c71d13f8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ExYjk4YTkwMWQwYTZkYmE0YjdlZTc1OTk2M2QwNGM3MWQxM2Y4Yw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-19T12:37:55Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-19T12:37:55Z"}, "message": "(MASK_*): New macros.\n\n(OVERRIDE_OPTIONS): Use them.\n(TARGET_SWITCHES): Likewise.\nTreat -m68332 like -m68000.\n\nFrom-SVN: r11563", "tree": {"sha": "4e9eb70400037bb060c54bfc4d2027da6cff9827", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e9eb70400037bb060c54bfc4d2027da6cff9827"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a1b98a901d0a6dba4b7ee759963d04c71d13f8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a1b98a901d0a6dba4b7ee759963d04c71d13f8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a1b98a901d0a6dba4b7ee759963d04c71d13f8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a1b98a901d0a6dba4b7ee759963d04c71d13f8c/comments", "author": null, "committer": null, "parents": [{"sha": "1d6eaf3dea4928714cd2e1f365d5758d73770d55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d6eaf3dea4928714cd2e1f365d5758d73770d55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d6eaf3dea4928714cd2e1f365d5758d73770d55"}], "stats": {"total": 100, "additions": 54, "deletions": 46}, "files": [{"sha": "a53678ed08f01839dd681281db744ffd8a98a16e", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 54, "deletions": 46, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1b98a901d0a6dba4b7ee759963d04c71d13f8c/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1b98a901d0a6dba4b7ee759963d04c71d13f8c/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=7a1b98a901d0a6dba4b7ee759963d04c71d13f8c", "patch": "@@ -50,56 +50,63 @@ extern int target_flags;\n /* Macros used in the machine description to test the flags.  */\n \n /* Compile for a 68020 (not a 68000 or 68010).  */\n-#define TARGET_68020 (target_flags & 1)\n+#define MASK_68020\t1\n+#define TARGET_68020 (target_flags & MASK_68020)\n \n /* Compile 68881 insns for floating point (not library calls).  */\n-#define TARGET_68881 (target_flags & 2)\n+#define MASK_68881\t2\n+#define TARGET_68881 (target_flags & MASK_68881)\n \n /* Compile using 68020 bitfield insns.  */\n-#define TARGET_BITFIELD (target_flags & 4)\n+#define MASK_BITFIELD\t4\n+#define TARGET_BITFIELD (target_flags & MASK_BITFIELD)\n \n /* Compile using rtd insn calling sequence.\n    This will not work unless you use prototypes at least\n    for all functions that can take varying numbers of args.  */\n-#define TARGET_RTD (target_flags & 8)\n+#define MASK_RTD\t8\n+#define TARGET_RTD (target_flags & MASK_RTD)\n \n /* Compile passing first two args in regs 0 and 1.\n    This exists only to test compiler features that will\n    be needed for RISC chips.  It is not usable\n    and is not intended to be usable on this cpu.  */\n-#define TARGET_REGPARM (target_flags & 020)\n+#define MASK_REGPARM\t16\n+#define TARGET_REGPARM (target_flags & MASK_REGPARM)\n \n /* Compile with 16-bit `int'.  */\n-#define TARGET_SHORT (target_flags & 040)\n+#define MASK_SHORT\t32\n+#define TARGET_SHORT (target_flags & MASK_SHORT)\n \n /* Compile with special insns for Sun FPA.  */\n-#ifdef SUPPORT_SUN_FPA\n-#define TARGET_FPA (target_flags & 0100)\n-#else\n-#define TARGET_FPA 0\n-#endif\n+#define MASK_FPA\t64\n+#define TARGET_FPA (target_flags & MASK_FPA)\n \n /* Compile (actually, link) for Sun SKY board.  */\n-#define TARGET_SKY (target_flags & 0200)\n+#define MASK_SKY\t128\n+#define TARGET_SKY (target_flags & MASK_SKY)\n \n /* Optimize for 68040, but still allow execution on 68020\n    (-m68020-40 or -m68040).\n    The 68040 will execute all 68030 and 68881/2 instructions, but some\n    of them must be emulated in software by the OS.  When TARGET_68040 is\n    turned on, these instructions won't be used.  This code will still\n    run on a 68030 and 68881/2. */\n-#define TARGET_68040 (target_flags & 01400)\n+#define MASK_68040\t(256|512)\n+#define TARGET_68040 (target_flags & MASK_68040)\n \n /* Use the 68040-only fp instructions (-m68040 or -m68060).  */\n-#define TARGET_68040_ONLY (target_flags & 01000)\n+#define MASK_68040_ONLY\t512\n+#define TARGET_68040_ONLY (target_flags & MASK_68040_ONLY)\n \n /* Optimize for 68060, but still allow execution on 68020\n    (-m68060).\n    The 68060 will execute all 68030 and 68881/2 instructions, but some\n    of them must be emulated in software by the OS.  When TARGET_68060 is\n    turned on, these instructions won't be used.  This code will still\n    run on a 68030 and 68881/2. */\n-#define TARGET_68060 (target_flags & 02000)\n+#define MASK_68060\t1024\n+#define TARGET_68060 (target_flags & MASK_68060)\n \n /* Macro to define tables used to set the flags.\n    This is a list in braces of pairs in braces,\n@@ -108,36 +115,37 @@ extern int target_flags;\n    An empty string NAME is used to identify the default VALUE.  */\n \n #define TARGET_SWITCHES  \\\n-  { { \"68020\", -03400},\t\t\t\t\\\n-    { \"c68020\", -03400},\t\t\t\\\n-    { \"68020\", 5},\t\t\t\t\\\n-    { \"c68020\", 5},\t\t\t\t\\\n-    { \"68881\", 2},\t\t\t\t\\\n-    { \"bitfield\", 4},\t\t\t\t\\\n-    { \"68000\", -03405},\t\t\t\t\\\n-    { \"c68000\", -03405},\t\t\t\\\n-    { \"soft-float\", -03102},\t\t\t\\\n-    { \"nobitfield\", -4},\t\t\t\\\n-    { \"rtd\", 8},\t\t\t\t\\\n-    { \"nortd\", -8},\t\t\t\t\\\n-    { \"short\", 040},\t\t\t\t\\\n-    { \"noshort\", -040},\t\t\t\t\\\n-    { \"fpa\", 0100},\t\t\t\t\\\n-    { \"nofpa\", -0100},\t\t\t\t\\\n-    { \"sky\", 0200},\t\t\t\t\\\n-    { \"nosky\", -0200},\t\t\t\t\\\n-    { \"68020-40\", 0407},\t\t\t\\\n-    { \"68030\", -03400},\t\t\t\t\\\n-    { \"68030\", 5},\t\t\t\t\\\n-    { \"68040\", 01007},\t\t\t\t\\\n-    { \"68060\", 03007},\t\t\t\t\\\n-    { \"68851\", 0},\t/* Affects *_SPEC and/or GAS.  */\t\\\n-    { \"no-68851\", 0},\t/* Affects *_SPEC and/or GAS.  */\t\\\n-    { \"68302\", 0},\t/* Affects *_SPEC and/or GAS.  */\t\\\n-    { \"no-68302\", 0},\t/* Affects *_SPEC and/or GAS.  */\t\\\n-    { \"68332\", 0},\t/* Affects *_SPEC and/or GAS.  */\t\\\n-    { \"no-68332\", 0},\t/* Affects *_SPEC and/or GAS.  */\t\\\n-    SUBTARGET_SWITCHES\t\t\t\t\\\n+  { { \"68020\", - (MASK_68060|MASK_68040)},\t\t\t\t\\\n+    { \"c68020\", - (MASK_68060|MASK_68040)},\t\t\t\t\\\n+    { \"68020\", (MASK_68020|MASK_BITFIELD)},\t\t\t\t\\\n+    { \"c68020\", (MASK_68020|MASK_BITFIELD)},\t\t\t\t\\\n+    { \"68881\", MASK_68881},\t\t\t\t\t\t\\\n+    { \"bitfield\", MASK_BITFIELD},\t\t\t\t\t\\\n+    { \"68000\", - (MASK_68060|MASK_68040|MASK_68020|MASK_BITFIELD)},\t\\\n+    { \"c68000\", - (MASK_68020|MASK_68040|MASK_68020|MASK_BITFIELD)},\t\\\n+    { \"soft-float\", - (MASK_68060|MASK_68040_ONLY|MASK_68881)},\t\t\\\n+    { \"nobitfield\", - MASK_BITFIELD},\t\t\t\t\t\\\n+    { \"rtd\", MASK_RTD},\t\t\t\t\t\t\t\\\n+    { \"nortd\", - MASK_RTD},\t\t\t\t\t\t\\\n+    { \"short\", MASK_SHORT},\t\t\t\t\t\t\\\n+    { \"noshort\", - MASK_SHORT},\t\t\t\t\t\t\\\n+    { \"fpa\", MASK_FPA},\t\t\t\t\t\t\t\\\n+    { \"nofpa\", - MASK_FPA},\t\t\t\t\t\t\\\n+    { \"sky\", MASK_SKY},\t\t\t\t\t\t\t\\\n+    { \"nosky\", - MASK_SKY},\t\t\t\t\t\t\\\n+    { \"68020-40\", (MASK_BITFIELD|MASK_68881|MASK_68020)},\t\t\\\n+    { \"68030\", - (MASK_68040|MASK_68060)},\t\t\t\t\\\n+    { \"68030\", (MASK_68020|MASK_BITFIELD)},\t\t\t\t\\\n+    { \"68040\", (MASK_68020|MASK_68881|MASK_BITFIELD|MASK_68040_ONLY)},\t\\\n+    { \"68060\", (MASK_68020|MASK_68881|MASK_BITFIELD\t\t\t\\\n+\t\t|MASK_68040_ONLY|MASK_68060)},\t\t\t\t\\\n+    { \"68851\", 0},\t\t\t\t\t\t\t\\\n+    { \"no-68851\", 0},\t\t\t\t\t\t\t\\\n+    { \"68302\", 0},\t\t\t\t\t\t\t\\\n+    { \"no-68302\", 0},\t\t\t\t\t\t\t\\\n+    { \"68332\", - (MASK_68060|MASK_68040|MASK_68020|MASK_BITFIELD)},\t\\\n+    { \"no-68332\", 0},\t\t\t\t\t\t\t\\\n+    SUBTARGET_SWITCHES\t\t\t\t\t\t\t\\\n     { \"\", TARGET_DEFAULT}}\n /* TARGET_DEFAULT is defined in sun*.h and isi.h, etc.  */\n \n@@ -149,7 +157,7 @@ extern int target_flags;\n    any bits in TARGET_SWITCHES above) */\n #define OVERRIDE_OPTIONS\t\t\\\n {\t\t\t\t\t\\\n-  if (TARGET_FPA) target_flags &= ~2;\t\\\n+  if (TARGET_FPA) target_flags &= ~ MASK_68881;\t\\\n   if (! TARGET_68020 && flag_pic == 2)\t\\\n     error(\"-fPIC is not currently supported on the 68000 or 68010\\n\");\t\\\n   SUBTARGET_OVERRIDE_OPTIONS;\t\t\\"}]}