{"sha": "16c5b95d4100ba3522d9c26eb3843b78f3ae8f6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZjNWI5NWQ0MTAwYmEzNTIyZDljMjZlYjM4NDNiNzhmM2FlOGY2Yg==", "commit": {"author": {"name": "Mostafa Hagog", "email": "mustafa@il.ibm.com", "date": "2005-06-01T05:17:59Z"}, "committer": {"name": "Mostafa Hagog", "email": "hagog@gcc.gnu.org", "date": "2005-06-01T05:17:59Z"}, "message": "gcse.c (compute_transp, [...]): Use MEM_READONLY_P.\n\n2005-06-01 Mostafa Hagog <mustafa@il.ibm.com>\n\n      * gcse.c (compute_transp, load_killed_in_block): Use MEM_READONLY_P.\n\nFrom-SVN: r100425", "tree": {"sha": "909c379f8919b6dbcfdeb4a0662aa91e2b1bc55d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/909c379f8919b6dbcfdeb4a0662aa91e2b1bc55d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16c5b95d4100ba3522d9c26eb3843b78f3ae8f6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16c5b95d4100ba3522d9c26eb3843b78f3ae8f6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16c5b95d4100ba3522d9c26eb3843b78f3ae8f6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16c5b95d4100ba3522d9c26eb3843b78f3ae8f6b/comments", "author": null, "committer": null, "parents": [{"sha": "bf3ddf8a1f39e6c7cbf18535b184b077b3dd41be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf3ddf8a1f39e6c7cbf18535b184b077b3dd41be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf3ddf8a1f39e6c7cbf18535b184b077b3dd41be"}], "stats": {"total": 88, "additions": 50, "deletions": 38}, "files": [{"sha": "741ee96a5d362c6883f297ec82a50713f76f7e0d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c5b95d4100ba3522d9c26eb3843b78f3ae8f6b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c5b95d4100ba3522d9c26eb3843b78f3ae8f6b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16c5b95d4100ba3522d9c26eb3843b78f3ae8f6b", "patch": "@@ -1,3 +1,8 @@\n+2005-06-01 Mostafa Hagog <mustafa@il.ibm.com>\n+\n+\t* gcse.c (compute_transp, load_killed_in_block): Use \n+\tMEM_READONLY_P.\n+\n 2005-06-01  David.Billinghurst  <David.Billinghurst@riotinto.com>\n \n \tPR target/21854"}, {"sha": "d29a507d238ac1ba78c6c8b3546e975035aa66ed", "filename": "gcc/gcse.c", "status": "modified", "additions": 45, "deletions": 38, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c5b95d4100ba3522d9c26eb3843b78f3ae8f6b/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c5b95d4100ba3522d9c26eb3843b78f3ae8f6b/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=16c5b95d4100ba3522d9c26eb3843b78f3ae8f6b", "patch": "@@ -1370,6 +1370,11 @@ static int\n load_killed_in_block_p (basic_block bb, int uid_limit, rtx x, int avail_p)\n {\n   rtx list_entry = modify_mem_list[bb->index];\n+\n+  /* If this is a readonly then we aren't going to be changing it.  */\n+  if (MEM_READONLY_P (x))\n+    return 0;\n+\n   while (list_entry)\n     {\n       rtx setter;\n@@ -2462,51 +2467,53 @@ compute_transp (rtx x, int indx, sbitmap *bmap, int set_p)\n       return;\n \n     case MEM:\n-      {\n-\tbitmap_iterator bi;\n-\tunsigned bb_index;\n-\n-\t/* First handle all the blocks with calls.  We don't need to\n-\t   do any list walking for them.  */\n-\tEXECUTE_IF_SET_IN_BITMAP (blocks_with_calls, 0, bb_index, bi)\n-\t  {\n-\t    if (set_p)\n-\t      SET_BIT (bmap[bb_index], indx);\n-\t    else\n-\t      RESET_BIT (bmap[bb_index], indx);\n-\t  }\n+      if (! MEM_READONLY_P (x))\n+\t{\n+\t  bitmap_iterator bi;\n+\t  unsigned bb_index;\n \n-\t/* Now iterate over the blocks which have memory modifications\n-\t   but which do not have any calls.  */\n-\tEXECUTE_IF_AND_COMPL_IN_BITMAP (modify_mem_list_set, blocks_with_calls,\n-\t\t\t\t\t0, bb_index, bi)\n-\t  {\n-\t    rtx list_entry = canon_modify_mem_list[bb_index];\n+\t  /* First handle all the blocks with calls.  We don't need to\n+\t     do any list walking for them.  */\n+\t  EXECUTE_IF_SET_IN_BITMAP (blocks_with_calls, 0, bb_index, bi)\n+\t    {\n+\t      if (set_p)\n+\t\tSET_BIT (bmap[bb_index], indx);\n+\t      else\n+\t\tRESET_BIT (bmap[bb_index], indx);\n+\t    }\n \n-\t    while (list_entry)\n+\t    /* Now iterate over the blocks which have memory modifications\n+\t       but which do not have any calls.  */\n+\t    EXECUTE_IF_AND_COMPL_IN_BITMAP (modify_mem_list_set, \n+\t\t\t\t\t    blocks_with_calls,\n+\t\t\t\t\t    0, bb_index, bi)\n \t      {\n-\t\trtx dest, dest_addr;\n+\t\trtx list_entry = canon_modify_mem_list[bb_index];\n \n-\t\t/* LIST_ENTRY must be an INSN of some kind that sets memory.\n-\t\t   Examine each hunk of memory that is modified.  */\n+\t\twhile (list_entry)\n+\t\t  {\n+\t\t    rtx dest, dest_addr;\n \n-\t\tdest = XEXP (list_entry, 0);\n-\t\tlist_entry = XEXP (list_entry, 1);\n-\t\tdest_addr = XEXP (list_entry, 0);\n+\t\t    /* LIST_ENTRY must be an INSN of some kind that sets memory.\n+\t\t       Examine each hunk of memory that is modified.  */\n \n-\t\tif (canon_true_dependence (dest, GET_MODE (dest), dest_addr,\n-\t\t\t\t\t   x, rtx_addr_varies_p))\n-\t\t  {\n-\t\t    if (set_p)\n-\t\t      SET_BIT (bmap[bb_index], indx);\n-\t\t    else\n-\t\t      RESET_BIT (bmap[bb_index], indx);\n-\t\t    break;\n-\t\t  }\n-\t\tlist_entry = XEXP (list_entry, 1);\n+\t\t    dest = XEXP (list_entry, 0);\n+\t\t    list_entry = XEXP (list_entry, 1);\n+\t\t    dest_addr = XEXP (list_entry, 0);\n+\n+\t\t    if (canon_true_dependence (dest, GET_MODE (dest), dest_addr,\n+\t\t\t\t\t       x, rtx_addr_varies_p))\n+\t\t      {\n+\t\t\tif (set_p)\n+\t\t\t  SET_BIT (bmap[bb_index], indx);\n+\t\t\telse\n+\t\t\t  RESET_BIT (bmap[bb_index], indx);\n+\t\t\tbreak;\n+\t\t      }\n+\t\t    list_entry = XEXP (list_entry, 1);\n+\t          }\n \t      }\n-\t  }\n-      }\n+\t}\n \n       x = XEXP (x, 0);\n       goto repeat;"}]}