{"sha": "b6a182f28e5c5f541b517bb834b260ae7a9d841c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZhMTgyZjI4ZTVjNWY1NDFiNTE3YmI4MzRiMjYwYWU3YTlkODQxYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-10-20T21:21:11Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-10-20T21:21:11Z"}, "message": "re PR libstdc++/41763 (valarray_array.h seems to overuse __restrict__)\n\n2009-10-20  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/41763\n\t* include/bits/valarray_array.h (__valarray_default_construct,\n\t__valarray_fill_construct, __valarray_copy_construct, __valarray_sum\n\t__valarray_destroy_elements, __valarray_product): Do not qualify with\n\t__restrict__ pointers accessing data also accessed by other pointers.\n\nFrom-SVN: r153039", "tree": {"sha": "d638bceb96bed7b635b81f47bae18ba2c1e814c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d638bceb96bed7b635b81f47bae18ba2c1e814c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6a182f28e5c5f541b517bb834b260ae7a9d841c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6a182f28e5c5f541b517bb834b260ae7a9d841c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6a182f28e5c5f541b517bb834b260ae7a9d841c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6a182f28e5c5f541b517bb834b260ae7a9d841c/comments", "author": null, "committer": null, "parents": [{"sha": "ddd0c7810185a4dde7041c37c72411e78639471d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddd0c7810185a4dde7041c37c72411e78639471d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddd0c7810185a4dde7041c37c72411e78639471d"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "2140fdd78422a5680cc6a988b91959243178f4d9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a182f28e5c5f541b517bb834b260ae7a9d841c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a182f28e5c5f541b517bb834b260ae7a9d841c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b6a182f28e5c5f541b517bb834b260ae7a9d841c", "patch": "@@ -1,3 +1,11 @@\n+2009-10-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/41763\n+\t* include/bits/valarray_array.h (__valarray_default_construct,\n+\t__valarray_fill_construct, __valarray_copy_construct, __valarray_sum\n+\t__valarray_destroy_elements, __valarray_product): Do not qualify with\n+\t__restrict__ pointers accessing data also accessed by other pointers.\n+\n 2009-10-20  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/basic_string.h (_S_construct(const _CharT*, size_type,"}, {"sha": "a12b3347b9d8cf074339d7ec868166ee1f55a358", "filename": "libstdc++-v3/include/bits/valarray_array.h", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a182f28e5c5f541b517bb834b260ae7a9d841c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a182f28e5c5f541b517bb834b260ae7a9d841c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h?ref=b6a182f28e5c5f541b517bb834b260ae7a9d841c", "patch": "@@ -1,7 +1,7 @@\n // The template and inlines for the -*- C++ -*- internal _Array helper class.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2009\n+// 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -73,7 +73,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // Please note that this isn't exception safe.  But\n       // valarrays aren't required to be exception safe.\n       inline static void\n-      _S_do_it(_Tp* __restrict__ __b, _Tp* __restrict__ __e)\n+      _S_do_it(_Tp* __b, _Tp* __e)\n       {\n \twhile (__b != __e)\n \t  new(__b++) _Tp();\n@@ -85,13 +85,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       // For fundamental types, it suffices to say 'memset()'\n       inline static void\n-      _S_do_it(_Tp* __restrict__ __b, _Tp* __restrict__ __e)\n+      _S_do_it(_Tp* __b, _Tp* __e)\n       { __builtin_memset(__b, 0, (__e - __b) * sizeof(_Tp)); }\n     };\n \n   template<typename _Tp>\n     inline void\n-    __valarray_default_construct(_Tp* __restrict__ __b, _Tp* __restrict__ __e)\n+    __valarray_default_construct(_Tp* __b, _Tp* __e)\n     {\n       _Array_default_ctor<_Tp, __is_scalar<_Tp>::__value>::_S_do_it(__b, __e);\n     }\n@@ -105,7 +105,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // Please note that this isn't exception safe.  But\n       // valarrays aren't required to be exception safe.\n       inline static void\n-      _S_do_it(_Tp* __restrict__ __b, _Tp* __restrict__ __e, const _Tp __t)\n+      _S_do_it(_Tp* __b, _Tp* __e, const _Tp __t)\n       {\n \twhile (__b != __e)\n \t  new(__b++) _Tp(__t);\n@@ -116,7 +116,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     struct _Array_init_ctor<_Tp, true>\n     {\n       inline static void\n-      _S_do_it(_Tp* __restrict__ __b, _Tp* __restrict__ __e,  const _Tp __t)\n+      _S_do_it(_Tp* __b, _Tp* __e, const _Tp __t)\n       {\n \twhile (__b != __e)\n \t  *__b++ = __t;\n@@ -125,8 +125,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   template<typename _Tp>\n     inline void\n-    __valarray_fill_construct(_Tp* __restrict__ __b, _Tp* __restrict__ __e,\n-\t\t\t      const _Tp __t)\n+    __valarray_fill_construct(_Tp* __b, _Tp* __e, const _Tp __t)\n     {\n       _Array_init_ctor<_Tp, __is_pod(_Tp)>::_S_do_it(__b, __e, __t);\n     }\n@@ -141,8 +140,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // Please note that this isn't exception safe.  But\n       // valarrays aren't required to be exception safe.\n       inline static void\n-      _S_do_it(const _Tp* __restrict__ __b, const _Tp* __restrict__ __e,\n-\t       _Tp* __restrict__ __o)\n+      _S_do_it(const _Tp* __b, const _Tp* __e, _Tp* __restrict__ __o)\n       {\n \twhile (__b != __e)\n \t  new(__o++) _Tp(*__b++);\n@@ -153,15 +151,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     struct _Array_copy_ctor<_Tp, true>\n     {\n       inline static void\n-      _S_do_it(const _Tp* __restrict__ __b, const _Tp* __restrict__ __e,\n-\t       _Tp* __restrict__ __o)\n+      _S_do_it(const _Tp* __b, const _Tp* __e, _Tp* __restrict__ __o)\n       { __builtin_memcpy(__o, __b, (__e - __b) * sizeof(_Tp)); }\n     };\n \n   template<typename _Tp>\n     inline void\n-    __valarray_copy_construct(const _Tp* __restrict__ __b,\n-\t\t\t      const _Tp* __restrict__ __e,\n+    __valarray_copy_construct(const _Tp* __b, const _Tp* __e,\n \t\t\t      _Tp* __restrict__ __o)\n     {\n       _Array_copy_ctor<_Tp, __is_pod(_Tp)>::_S_do_it(__b, __e, __o);\n@@ -205,7 +201,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // Do the necessary cleanup when we're done with arrays.\n   template<typename _Tp>\n     inline void\n-    __valarray_destroy_elements(_Tp* __restrict__ __b, _Tp* __restrict__ __e)\n+    __valarray_destroy_elements(_Tp* __b, _Tp* __e)\n     {\n       if (!__is_pod(_Tp))\n \twhile (__b != __e)\n@@ -347,7 +343,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   //\n   template<typename _Tp>\n     inline _Tp\n-    __valarray_sum(const _Tp* __restrict__ __f, const _Tp* __restrict__ __l)\n+    __valarray_sum(const _Tp* __f, const _Tp* __l)\n     {\n       _Tp __r = _Tp();\n       while (__f != __l)\n@@ -358,8 +354,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // Compute the product of all elements in range [__f, __l)\n   template<typename _Tp>\n     inline _Tp\n-    __valarray_product(const _Tp* __restrict__ __f,\n-\t\t       const _Tp* __restrict__ __l)\n+    __valarray_product(const _Tp* __f, const _Tp* __l)\n     {\n       _Tp __r = _Tp(1);\n       while (__f != __l)"}]}