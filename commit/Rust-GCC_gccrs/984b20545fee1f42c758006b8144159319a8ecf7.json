{"sha": "984b20545fee1f42c758006b8144159319a8ecf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg0YjIwNTQ1ZmVlMWY0MmM3NTgwMDZiODE0NDE1OTMxOWE4ZWNmNw==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2015-04-15T07:29:01Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2015-04-15T07:29:01Z"}, "message": "re PR target/65408 (powerpc64 function argument passing may access invalid memory)\n\n\tPR target/65408\n\tPR target/58744\n\tPR middle-end/36043\n\t* calls.c (load_register_parameters): Don't load past end of\n\tmem unless suitably aligned.\n\nFrom-SVN: r222115", "tree": {"sha": "e2dfd885331ef51f36d2ef602d993d57106c8270", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2dfd885331ef51f36d2ef602d993d57106c8270"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/984b20545fee1f42c758006b8144159319a8ecf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/984b20545fee1f42c758006b8144159319a8ecf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/984b20545fee1f42c758006b8144159319a8ecf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/984b20545fee1f42c758006b8144159319a8ecf7/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9368432388432fc22a85f74150d0f30e486a9bc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9368432388432fc22a85f74150d0f30e486a9bc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9368432388432fc22a85f74150d0f30e486a9bc0"}], "stats": {"total": 164, "additions": 152, "deletions": 12}, "files": [{"sha": "c68a2fac88250676d4c414b8c24c5d56401f00b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984b20545fee1f42c758006b8144159319a8ecf7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984b20545fee1f42c758006b8144159319a8ecf7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=984b20545fee1f42c758006b8144159319a8ecf7", "patch": "@@ -1,3 +1,11 @@\n+2015-04-15  Alan Modra  <amodra@gmail.com>\n+\n+\tPR target/65408\n+\tPR target/58744\n+\tPR middle-end/36043\n+\t* calls.c (load_register_parameters): Don't load past end of\n+\tmem unless suitably aligned.\n+\n 2015-04-15  Nick Clifton  <nickc@redhat.com>\n \n \t* config/rl78/rl78.c (rl78_expand_prologue): Mark large stack"}, {"sha": "32ea4eb1f5404fddf94ba0002b2d74445556d2d8", "filename": "gcc/calls.c", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984b20545fee1f42c758006b8144159319a8ecf7/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984b20545fee1f42c758006b8144159319a8ecf7/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=984b20545fee1f42c758006b8144159319a8ecf7", "patch": "@@ -2099,29 +2099,45 @@ load_register_parameters (struct arg_data *args, int num_actuals,\n \t\t\t\t\t   (XEXP (args[i].value, 0), size)))\n \t\t*sibcall_failure = 1;\n \n+\t      if (size % UNITS_PER_WORD == 0\n+\t\t  || MEM_ALIGN (mem) % BITS_PER_WORD == 0)\n+\t\tmove_block_to_reg (REGNO (reg), mem, nregs, args[i].mode);\n+\t      else\n+\t\t{\n+\t\t  if (nregs > 1)\n+\t\t    move_block_to_reg (REGNO (reg), mem, nregs - 1,\n+\t\t\t\t       args[i].mode);\n+\t\t  rtx dest = gen_rtx_REG (word_mode, REGNO (reg) + nregs - 1);\n+\t\t  unsigned int bitoff = (nregs - 1) * BITS_PER_WORD;\n+\t\t  unsigned int bitsize = size * BITS_PER_UNIT - bitoff;\n+\t\t  rtx x = extract_bit_field (mem, bitsize, bitoff, 1,\n+\t\t\t\t\t     dest, word_mode, word_mode);\n+\t\t  if (BYTES_BIG_ENDIAN)\n+\t\t    x = expand_shift (LSHIFT_EXPR, word_mode, x,\n+\t\t\t\t      BITS_PER_WORD - bitsize, dest, 1);\n+\t\t  if (x != dest)\n+\t\t    emit_move_insn (dest, x);\n+\t\t}\n+\n \t      /* Handle a BLKmode that needs shifting.  */\n \t      if (nregs == 1 && size < UNITS_PER_WORD\n #ifdef BLOCK_REG_PADDING\n \t\t  && args[i].locate.where_pad == downward\n #else\n \t\t  && BYTES_BIG_ENDIAN\n #endif\n-\t\t )\n+\t\t  )\n \t\t{\n-\t\t  rtx tem = operand_subword_force (mem, 0, args[i].mode);\n-\t\t  rtx ri = gen_rtx_REG (word_mode, REGNO (reg));\n-\t\t  rtx x = gen_reg_rtx (word_mode);\n+\t\t  rtx dest = gen_rtx_REG (word_mode, REGNO (reg));\n \t\t  int shift = (UNITS_PER_WORD - size) * BITS_PER_UNIT;\n-\t\t  enum tree_code dir = BYTES_BIG_ENDIAN ? RSHIFT_EXPR\n-\t\t\t\t\t\t\t: LSHIFT_EXPR;\n+\t\t  enum tree_code dir = (BYTES_BIG_ENDIAN\n+\t\t\t\t\t? RSHIFT_EXPR : LSHIFT_EXPR);\n+\t\t  rtx x;\n \n-\t\t  emit_move_insn (x, tem);\n-\t\t  x = expand_shift (dir, word_mode, x, shift, ri, 1);\n-\t\t  if (x != ri)\n-\t\t    emit_move_insn (ri, x);\n+\t\t  x = expand_shift (dir, word_mode, dest, shift, dest, 1);\n+\t\t  if (x != dest)\n+\t\t    emit_move_insn (dest, x);\n \t\t}\n-\t      else\n-\t\tmove_block_to_reg (REGNO (reg), mem, nregs, args[i].mode);\n \t    }\n \n \t  /* When a parameter is a block, and perhaps in other cases, it is"}, {"sha": "db3d1d325cd39825a7508b2bef19a58053456455", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984b20545fee1f42c758006b8144159319a8ecf7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984b20545fee1f42c758006b8144159319a8ecf7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=984b20545fee1f42c758006b8144159319a8ecf7", "patch": "@@ -1,3 +1,7 @@\n+2015-04-15  Alan Modra  <amodra@gmail.com>\n+\n+\t* gcc.dg/pr65408.c: New.\n+\n 2015-04-14  Yvan Roux  <yvan.roux@linaro.org>\n \n \tPR target/65729"}, {"sha": "8eec1d2dc369879ddc38aff8653a940858613e3a", "filename": "gcc/testsuite/gcc.dg/pr65408.c", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984b20545fee1f42c758006b8144159319a8ecf7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr65408.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984b20545fee1f42c758006b8144159319a8ecf7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr65408.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr65408.c?ref=984b20545fee1f42c758006b8144159319a8ecf7", "patch": "@@ -0,0 +1,112 @@\n+/* PR middle-end/36043 target/58744 target/65408 */\n+/* { dg-do run { target mmap } } */\n+/* { dg-options \"-O2\" } */\n+\n+#include <sys/mman.h>\n+#ifndef MAP_ANONYMOUS\n+#define MAP_ANONYMOUS MAP_ANON\n+#endif\n+#ifndef MAP_ANON\n+#define MAP_ANON 0\n+#endif\n+#ifndef MAP_FAILED\n+#define MAP_FAILED ((void *)-1)\n+#endif\n+\n+typedef struct\n+{\n+  unsigned char r;\n+  unsigned char g;\n+  unsigned char b;\n+} __attribute__((packed)) pr58744;\n+\n+typedef struct\n+{\n+  unsigned short r;\n+  unsigned short g;\n+  unsigned short b;\n+} pr36043;\n+\n+typedef struct\n+{\n+  int r;\n+  int g;\n+  int b;\n+} pr65408;\n+\n+__attribute__ ((noinline, noclone))\n+void\n+f1a (pr58744 x)\n+{\n+  if (x.r != 1 || x.g != 2 || x.b != 3)\n+    __builtin_abort();\n+}\n+\n+__attribute__ ((noinline, noclone))\n+void\n+f1 (pr58744 *x)\n+{\n+  f1a (*x);\n+}\n+\n+__attribute__ ((noinline, noclone))\n+void\n+f2a (pr36043 x)\n+{\n+  if (x.r != 1 || x.g != 2 || x.b != 3)\n+    __builtin_abort();\n+}\n+\n+__attribute__ ((noinline, noclone))\n+void\n+f2 (pr36043 *x)\n+{\n+  f2a (*x);\n+}\n+\n+__attribute__ ((noinline, noclone))\n+void\n+f3a (pr65408 x)\n+{\n+  if (x.r != 1 || x.g != 2 || x.b != 3)\n+    __builtin_abort();\n+}\n+\n+__attribute__ ((noinline, noclone))\n+void\n+f3 (pr65408 *x)\n+{\n+  f3a (*x);\n+}\n+\n+int\n+main ()\n+{\n+  char *p = mmap ((void *) 0, 131072, PROT_READ | PROT_WRITE,\n+\t\t  MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);\n+  if (p == MAP_FAILED)\n+    return 0;\n+  char *endp = p + 65536;\n+  if (munmap (endp, 65536) < 0)\n+    return 0;\n+\n+  pr58744 *s1 = (pr58744 *) endp - 1;\n+  s1->r = 1;\n+  s1->g = 2;\n+  s1->b = 3;\n+  f1 (s1);\n+\n+  pr36043 *s2 = (pr36043 *) endp - 1;\n+  s2->r = 1;\n+  s2->g = 2;\n+  s2->b = 3;\n+  f2 (s2);\n+\n+  pr65408 *s3 = (pr65408 *) endp - 1;\n+  s3->r = 1;\n+  s3->g = 2;\n+  s3->b = 3;\n+  f3 (s3);\n+\n+  return 0;\n+}"}]}