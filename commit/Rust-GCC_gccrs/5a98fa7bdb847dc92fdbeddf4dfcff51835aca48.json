{"sha": "5a98fa7bdb847dc92fdbeddf4dfcff51835aca48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE5OGZhN2JkYjg0N2RjOTJmZGJlZGRmNGRmY2ZmNTE4MzVhY2E0OA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-02-03T16:53:27Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-02-03T16:53:27Z"}, "message": "re PR c++/13975 (ICE on misplaced visibility specifier.)\n\n\tPR c++/13975\n\t* tree.h (enum tree_index): Add TI_PUBLIC, TI_PROTECTED, and\n\tTI_PRIVATE.\n\t(access_public_node): Redefine.\n\t(access_protected_node): Likewise.\n\t(access_private_node): Likewise.\n\t* tree.c (build_common_tree_nodes): Create access_public_node,\n\taccess_protected_node, and access_private_node.\n\n\tPR c++/13978\n\t* pt.c (build_non_dependent_expr): Do not build\n\tNON_DEPENDENT_EXPRs for FUNCTION_DECLs or TEMPLATE_DECLs.\n\n\tPR c++/13968\n\t* semantics.c (finish_id_expression): Do not return an\n\tIDENTIFIER_NODE when lookup finds a VAR_DECL.\n\n\tPR c++/13975\n\t* parser.c (cp_parser_simple_declaration): When skipping to the\n\tend of the statement swallow the terminating semicolon.\n\n\tPR c++/13978\n\t* g++.dg/template/koenig4.C: New test.\n\n\tPR c++/13968\n\t* g++.dg/template/crash17.C: New test.\n\n\tPR c++/13975\n\t* g++.dg/parse/error13.C: New test.\n\t* g++.old-deja/g++.robertl/eb125.C: Tweak error messages.\n\nFrom-SVN: r77176", "tree": {"sha": "aad012333fc4dc0d216db7ad633eef56c2ea58ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aad012333fc4dc0d216db7ad633eef56c2ea58ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a98fa7bdb847dc92fdbeddf4dfcff51835aca48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a98fa7bdb847dc92fdbeddf4dfcff51835aca48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a98fa7bdb847dc92fdbeddf4dfcff51835aca48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a98fa7bdb847dc92fdbeddf4dfcff51835aca48/comments", "author": null, "committer": null, "parents": [{"sha": "0263e6bf3c7ccd1cccbc18b5e6cef273878d9e7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0263e6bf3c7ccd1cccbc18b5e6cef273878d9e7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0263e6bf3c7ccd1cccbc18b5e6cef273878d9e7f"}], "stats": {"total": 96, "additions": 91, "deletions": 5}, "files": [{"sha": "eedaab5d58d62e3164785b13f6d454a0cba9e005", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a98fa7bdb847dc92fdbeddf4dfcff51835aca48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a98fa7bdb847dc92fdbeddf4dfcff51835aca48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a98fa7bdb847dc92fdbeddf4dfcff51835aca48", "patch": "@@ -1,3 +1,14 @@\n+2004-02-03  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/13975\n+\t* tree.h (enum tree_index): Add TI_PUBLIC, TI_PROTECTED, and\n+\tTI_PRIVATE.\n+\t(access_public_node): Redefine.\n+\t(access_protected_node): Likewise.\n+\t(access_private_node): Likewise.\n+\t* tree.c (build_common_tree_nodes): Create access_public_node,\n+\taccess_protected_node, and access_private_node.\n+\n 2004-02-03  Steve Ellcey  <sje@cup.hp.com>\n \n \t* config/ia64/ia64.h (MASK_INLINE_INT_DIV_LAT): Change value."}, {"sha": "221fbe627a96fdfffebc2fb431907639c0663230", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a98fa7bdb847dc92fdbeddf4dfcff51835aca48/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a98fa7bdb847dc92fdbeddf4dfcff51835aca48/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5a98fa7bdb847dc92fdbeddf4dfcff51835aca48", "patch": "@@ -1,3 +1,17 @@\n+2004-02-03  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/13978\n+\t* pt.c (build_non_dependent_expr): Do not build\n+\tNON_DEPENDENT_EXPRs for FUNCTION_DECLs or TEMPLATE_DECLs.\n+\n+\tPR c++/13968\n+\t* semantics.c (finish_id_expression): Do not return an\n+\tIDENTIFIER_NODE when lookup finds a VAR_DECL.\n+\n+\tPR c++/13975\n+\t* parser.c (cp_parser_simple_declaration): When skipping to the\n+\tend of the statement swallow the terminating semicolon.\n+\n 2004-02-02  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/13113"}, {"sha": "2857468f20fe77ccfa3c1a0627f007ff08707348", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a98fa7bdb847dc92fdbeddf4dfcff51835aca48/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a98fa7bdb847dc92fdbeddf4dfcff51835aca48/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5a98fa7bdb847dc92fdbeddf4dfcff51835aca48", "patch": "@@ -6506,6 +6506,9 @@ cp_parser_simple_declaration (cp_parser* parser,\n \t  cp_parser_error (parser, \"expected `,' or `;'\");\n \t  /* Skip tokens until we reach the end of the statement.  */\n \t  cp_parser_skip_to_end_of_statement (parser);\n+\t  /* If the next token is now a `;', consume it.  */\n+\t  if (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON))\n+\t    cp_lexer_consume_token (parser->lexer);\n \t  goto done;\n \t}\n       /* After the first time around, a function-definition is not"}, {"sha": "b8a02fbe47e0fd1e48d3e8d9624c9c3478184ba1", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a98fa7bdb847dc92fdbeddf4dfcff51835aca48/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a98fa7bdb847dc92fdbeddf4dfcff51835aca48/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5a98fa7bdb847dc92fdbeddf4dfcff51835aca48", "patch": "@@ -12027,7 +12027,9 @@ build_non_dependent_expr (tree expr)\n     return expr;\n   /* Preserve OVERLOADs; the functions must be available to resolve\n      types.  */\n-  if (TREE_CODE (expr) == OVERLOAD)\n+  if (TREE_CODE (expr) == OVERLOAD \n+      || TREE_CODE (expr) == FUNCTION_DECL\n+      || TREE_CODE (expr) == TEMPLATE_DECL)\n     return expr;\n   /* Preserve string constants; conversions from string constants to\n      \"char *\" are allowed, even though normally a \"const char *\""}, {"sha": "5b1b1ef4d1cbed7ee34e0a1693d0a3add90e442e", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a98fa7bdb847dc92fdbeddf4dfcff51835aca48/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a98fa7bdb847dc92fdbeddf4dfcff51835aca48/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=5a98fa7bdb847dc92fdbeddf4dfcff51835aca48", "patch": "@@ -2524,6 +2524,11 @@ finish_id_expression (tree id_expression,\n \t  if (integral_constant_expression_p)\n \t    *non_integral_constant_expression_p = true;\n \t  *idk = CP_ID_KIND_UNQUALIFIED_DEPENDENT;\n+\t  /* If we found a variable, then name lookup during the\n+\t     instantiation will always resolve to the same VAR_DECL\n+\t     (or an instantiation thereof).  */\n+\t  if (TREE_CODE (decl) == VAR_DECL)\n+\t    return decl;\n \t  return id_expression;\n \t}\n "}, {"sha": "a746adb2583828e0a3b8844656e7c4f48b86bb46", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a98fa7bdb847dc92fdbeddf4dfcff51835aca48/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a98fa7bdb847dc92fdbeddf4dfcff51835aca48/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5a98fa7bdb847dc92fdbeddf4dfcff51835aca48", "patch": "@@ -1,3 +1,15 @@\n+2004-02-03  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/13978\n+\t* g++.dg/template/koenig4.C: New test.\n+\n+\tPR c++/13968\n+\t* g++.dg/template/crash17.C: New test.\n+\n+\tPR c++/13975\n+\t* g++.dg/parse/error13.C: New test.\n+\t* g++.old-deja/g++.robertl/eb125.C: Tweak error messages.\n+\n 2004-02-03  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* gcc.dg/20020503-1.c: Remove -mflat dg-options."}, {"sha": "9fa826b999d6717ff0f64c2fe3e6b7d328982559", "filename": "gcc/testsuite/g++.dg/template/crash17.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a98fa7bdb847dc92fdbeddf4dfcff51835aca48/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a98fa7bdb847dc92fdbeddf4dfcff51835aca48/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash17.C?ref=5a98fa7bdb847dc92fdbeddf4dfcff51835aca48", "patch": "@@ -0,0 +1,19 @@\n+template <int I> \n+struct A {\n+};\n+\n+template <typename T>\n+struct B {\n+  typedef typename T::type type;\n+  static const type j = T::j;\n+\n+  A<j> b;\n+};\n+\n+struct C {\n+  typedef int type;\n+  static const int j = 3;\n+};\n+\n+int i = B<C>::j;\n+"}, {"sha": "31e41fcf97f844a5a295684721148f04be90597d", "filename": "gcc/testsuite/g++.dg/template/koenig4.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a98fa7bdb847dc92fdbeddf4dfcff51835aca48/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fkoenig4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a98fa7bdb847dc92fdbeddf4dfcff51835aca48/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fkoenig4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fkoenig4.C?ref=5a98fa7bdb847dc92fdbeddf4dfcff51835aca48", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/13978\n+\n+namespace ns {\n+  template <class TP> void func1(TP* t);\n+  struct A {};\n+}\n+ \n+template < class TP >\n+void func2() {\n+  func1( new ns::A() );\n+}\n+"}, {"sha": "b06823685e426b1e7c471c24315b8c28d67458c2", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb125.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a98fa7bdb847dc92fdbeddf4dfcff51835aca48/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb125.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a98fa7bdb847dc92fdbeddf4dfcff51835aca48/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb125.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb125.C?ref=5a98fa7bdb847dc92fdbeddf4dfcff51835aca48", "patch": "@@ -17,6 +17,6 @@ class test_square\n template <class BOX> void test(BOX *the_box)  // { dg-error \"\" } semicolon missing\n     {x\n     the_box->print();\n-    }; // { dg-error \"\" }\n+    };\n \n template void test<> (test_box *); // { dg-error \"\" }"}, {"sha": "ac0da204031f89f8247a1c5999ee681339675bae", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a98fa7bdb847dc92fdbeddf4dfcff51835aca48/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a98fa7bdb847dc92fdbeddf4dfcff51835aca48/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=5a98fa7bdb847dc92fdbeddf4dfcff51835aca48", "patch": "@@ -4917,6 +4917,10 @@ build_common_tree_nodes (int signed_char)\n   unsigned_intSI_type_node = make_unsigned_type (GET_MODE_BITSIZE (SImode));\n   unsigned_intDI_type_node = make_unsigned_type (GET_MODE_BITSIZE (DImode));\n   unsigned_intTI_type_node = make_unsigned_type (GET_MODE_BITSIZE (TImode));\n+  \n+  access_public_node = get_identifier (\"public\");\n+  access_protected_node = get_identifier (\"protected\");\n+  access_private_node = get_identifier (\"private\");\n }\n \n /* Call this function after calling build_common_tree_nodes and set_sizetype."}, {"sha": "3f97099ef62187b542310f0789cd408727aaa777", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a98fa7bdb847dc92fdbeddf4dfcff51835aca48/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a98fa7bdb847dc92fdbeddf4dfcff51835aca48/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=5a98fa7bdb847dc92fdbeddf4dfcff51835aca48", "patch": "@@ -1816,6 +1816,10 @@ enum tree_index\n   TI_BITSIZE_ONE,\n   TI_BITSIZE_UNIT,\n \n+  TI_PUBLIC,\n+  TI_PROTECTED,\n+  TI_PRIVATE,\n+\n   TI_BOOLEAN_FALSE,\n   TI_BOOLEAN_TRUE,\n \n@@ -1901,9 +1905,9 @@ extern GTY(()) tree global_trees[TI_MAX];\n #define bitsize_unit_node\t\tglobal_trees[TI_BITSIZE_UNIT]\n \n /* Base access nodes.  */\n-#define access_public_node\t\tNULL_TREE\n-#define access_protected_node\t\tsize_zero_node\n-#define access_private_node\t\tsize_one_node\n+#define access_public_node\t\tglobal_trees[TI_PUBLIC]\n+#define access_protected_node\t        global_trees[TI_PROTECTED]\n+#define access_private_node\t\tglobal_trees[TI_PRIVATE]\n \n #define null_pointer_node\t\tglobal_trees[TI_NULL_POINTER]\n "}]}