{"sha": "d3cc82dc9cc2d4f1021fc5d4c1463c3a14fc6795", "node_id": "C_kwDOANBUbNoAKGQzY2M4MmRjOWNjMmQ0ZjEwMjFmYzVkNGMxNDYzYzNhMTRmYzY3OTU", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-11-12T17:03:09Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-11-15T19:35:10Z"}, "message": "configure, Darwin: Check ld64 support for -platform-version.\n\nNewer versions of ld64 allow specifiying the OS target (e.g.\nmacos or ios) the version and the SDK version all in a single\ncommand.  This checks the availability of the command for the\ncurrent toolchain.\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\ngcc/ChangeLog:\n\n\t* config.in: Regenerate.\n\t* configure: Regenerate.\n\t* configure.ac: Test ld64 for -platform-version support.", "tree": {"sha": "5d785380de88b25dca64f64bb8e9e14305226194", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d785380de88b25dca64f64bb8e9e14305226194"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3cc82dc9cc2d4f1021fc5d4c1463c3a14fc6795", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3cc82dc9cc2d4f1021fc5d4c1463c3a14fc6795", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3cc82dc9cc2d4f1021fc5d4c1463c3a14fc6795", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3cc82dc9cc2d4f1021fc5d4c1463c3a14fc6795/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd5159bdd4f26ea6e01c1411149e8e2eaec62531", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd5159bdd4f26ea6e01c1411149e8e2eaec62531", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd5159bdd4f26ea6e01c1411149e8e2eaec62531"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "d6adc7212a87730a27da060a826335c0f43e65b0", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3cc82dc9cc2d4f1021fc5d4c1463c3a14fc6795/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3cc82dc9cc2d4f1021fc5d4c1463c3a14fc6795/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=d3cc82dc9cc2d4f1021fc5d4c1463c3a14fc6795", "patch": "@@ -2226,6 +2226,12 @@\n #endif\n \n \n+/* Define to 1 if ld64 supports '-platform_version'. */\n+#ifndef USED_FOR_TARGET\n+#undef LD64_HAS_PLATFORM_VERSION\n+#endif\n+\n+\n /* Define to ld64 version. */\n #ifndef USED_FOR_TARGET\n #undef LD64_VERSION"}, {"sha": "74b9d9be4c853e55a6e2e2d7dcd0acc438722177", "filename": "gcc/configure", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3cc82dc9cc2d4f1021fc5d4c1463c3a14fc6795/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3cc82dc9cc2d4f1021fc5d4c1463c3a14fc6795/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=d3cc82dc9cc2d4f1021fc5d4c1463c3a14fc6795", "patch": "@@ -30398,6 +30398,7 @@ if test x\"$ld64_flag\" = x\"yes\"; then\n \n   # Set defaults for possibly untestable items.\n   gcc_cv_ld64_export_dynamic=0\n+  gcc_cv_ld64_platform_version=0\n \n   if test \"$build\" = \"$host\"; then\n     darwin_try_test=1\n@@ -30421,9 +30422,12 @@ $as_echo_n \"checking ld64 specified version... \" >&6; }\n     gcc_cv_ld64_major=`echo \"$gcc_cv_ld64_version\" | sed -e 's/\\..*//'`\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_ld64_major\" >&5\n $as_echo \"$gcc_cv_ld64_major\" >&6; }\n-   if test \"$gcc_cv_ld64_major\" -ge 236; then\n+    if test \"$gcc_cv_ld64_major\" -ge 236; then\n       gcc_cv_ld64_export_dynamic=1\n     fi\n+    if test \"$gcc_cv_ld64_major\" -ge 512; then\n+      gcc_cv_ld64_platform_version=1\n+    fi\n   elif test -x \"$gcc_cv_ld\" -a \"$darwin_try_test\" -eq 1; then\n     # If the version was not specified, try to find it.\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: checking linker version\" >&5\n@@ -30442,6 +30446,15 @@ $as_echo_n \"checking linker for -export_dynamic support... \" >&6; }\n     fi\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_ld64_export_dynamic\" >&5\n $as_echo \"$gcc_cv_ld64_export_dynamic\" >&6; }\n+\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking linker for -platform_version support\" >&5\n+$as_echo_n \"checking linker for -platform_version support... \" >&6; }\n+    gcc_cv_ld64_platform_version=1\n+    if $gcc_cv_ld -platform_version macos 10.5 0.0 < /dev/null 2>&1 | grep 'unknown option' > /dev/null; then\n+      gcc_cv_ld64_platform_version=0\n+    fi\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_ld64_platform_version\" >&5\n+$as_echo \"$gcc_cv_ld64_platform_version\" >&6; }\n   fi\n \n   if test x\"${gcc_cv_ld64_version}\" != x; then\n@@ -30457,6 +30470,12 @@ cat >>confdefs.h <<_ACEOF\n #define LD64_HAS_EXPORT_DYNAMIC $gcc_cv_ld64_export_dynamic\n _ACEOF\n \n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define LD64_HAS_PLATFORM_VERSION $gcc_cv_ld64_platform_version\n+_ACEOF\n+\n fi\n \n if test x\"$dsymutil_flag\" = x\"yes\"; then"}, {"sha": "c9ee1fb8919e973de99195afdffd3dc8e5fdd549", "filename": "gcc/configure.ac", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3cc82dc9cc2d4f1021fc5d4c1463c3a14fc6795/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3cc82dc9cc2d4f1021fc5d4c1463c3a14fc6795/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=d3cc82dc9cc2d4f1021fc5d4c1463c3a14fc6795", "patch": "@@ -6253,6 +6253,7 @@ if test x\"$ld64_flag\" = x\"yes\"; then\n \n   # Set defaults for possibly untestable items.\n   gcc_cv_ld64_export_dynamic=0\n+  gcc_cv_ld64_platform_version=0\n \n   if test \"$build\" = \"$host\"; then\n     darwin_try_test=1\n@@ -6274,9 +6275,12 @@ if test x\"$ld64_flag\" = x\"yes\"; then\n     AC_MSG_CHECKING(ld64 specified version)\n     gcc_cv_ld64_major=`echo \"$gcc_cv_ld64_version\" | sed -e 's/\\..*//'`\n     AC_MSG_RESULT($gcc_cv_ld64_major)\n-   if test \"$gcc_cv_ld64_major\" -ge 236; then\n+    if test \"$gcc_cv_ld64_major\" -ge 236; then\n       gcc_cv_ld64_export_dynamic=1\n     fi\n+    if test \"$gcc_cv_ld64_major\" -ge 512; then\n+      gcc_cv_ld64_platform_version=1\n+    fi\n   elif test -x \"$gcc_cv_ld\" -a \"$darwin_try_test\" -eq 1; then\n     # If the version was not specified, try to find it.\n     AC_MSG_CHECKING(linker version)\n@@ -6291,6 +6295,13 @@ if test x\"$ld64_flag\" = x\"yes\"; then\n       gcc_cv_ld64_export_dynamic=0\n     fi\n     AC_MSG_RESULT($gcc_cv_ld64_export_dynamic)\n+\n+    AC_MSG_CHECKING(linker for -platform_version support)\n+    gcc_cv_ld64_platform_version=1\n+    if $gcc_cv_ld -platform_version macos 10.5 0.0 < /dev/null 2>&1 | grep 'unknown option' > /dev/null; then\n+      gcc_cv_ld64_platform_version=0\n+    fi\n+    AC_MSG_RESULT($gcc_cv_ld64_platform_version)\n   fi\n \n   if test x\"${gcc_cv_ld64_version}\" != x; then\n@@ -6300,6 +6311,9 @@ if test x\"$ld64_flag\" = x\"yes\"; then\n \n   AC_DEFINE_UNQUOTED(LD64_HAS_EXPORT_DYNAMIC, $gcc_cv_ld64_export_dynamic,\n   [Define to 1 if ld64 supports '-export_dynamic'.])\n+\n+  AC_DEFINE_UNQUOTED(LD64_HAS_PLATFORM_VERSION, $gcc_cv_ld64_platform_version,\n+  [Define to 1 if ld64 supports '-platform_version'.])\n fi\n \n if test x\"$dsymutil_flag\" = x\"yes\"; then"}]}