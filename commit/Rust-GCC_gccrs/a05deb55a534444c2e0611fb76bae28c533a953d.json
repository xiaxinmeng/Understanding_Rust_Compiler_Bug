{"sha": "a05deb55a534444c2e0611fb76bae28c533a953d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA1ZGViNTVhNTM0NDQ0YzJlMDYxMWZiNzZiYWUyOGM1MzNhOTUzZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-06-27T19:19:01Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-06-27T19:19:01Z"}, "message": "comment\n\nFrom-SVN: r189023", "tree": {"sha": "3053ebe289855a223f0507adf3ac27f25007634e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3053ebe289855a223f0507adf3ac27f25007634e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a05deb55a534444c2e0611fb76bae28c533a953d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a05deb55a534444c2e0611fb76bae28c533a953d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a05deb55a534444c2e0611fb76bae28c533a953d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a05deb55a534444c2e0611fb76bae28c533a953d/comments", "author": null, "committer": null, "parents": [{"sha": "362aa474604751c48e9ff6c39fcf81ee9adad8d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/362aa474604751c48e9ff6c39fcf81ee9adad8d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/362aa474604751c48e9ff6c39fcf81ee9adad8d2"}], "stats": {"total": 2, "additions": 2, "deletions": 0}, "files": [{"sha": "5df8b84687f1af045ef746d61b24ee6d2dab3554", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a05deb55a534444c2e0611fb76bae28c533a953d/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a05deb55a534444c2e0611fb76bae28c533a953d/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a05deb55a534444c2e0611fb76bae28c533a953d", "patch": "@@ -1679,6 +1679,8 @@ struct GTY(()) tree_constructor {\n   (CAN_HAVE_LOCATION_P ((NODE)) ? (NODE)->exp.locus : UNKNOWN_LOCATION)\n #define SET_EXPR_LOCATION(NODE, LOCUS) EXPR_CHECK ((NODE))->exp.locus = (LOCUS)\n #define EXPR_HAS_LOCATION(NODE) (EXPR_LOCATION (NODE) != UNKNOWN_LOCATION)\n+/* The location to be used in a diagnostic about this expression.  Do not\n+   use this macro if the location will be assigned to other expressions.  */\n #define EXPR_LOC_OR_HERE(NODE) (EXPR_HAS_LOCATION (NODE) ? (NODE)->exp.locus : input_location)\n #define EXPR_FILENAME(NODE) LOCATION_FILE (EXPR_CHECK ((NODE))->exp.locus)\n #define EXPR_LINENO(NODE) LOCATION_LINE (EXPR_CHECK (NODE)->exp.locus)"}]}