{"sha": "c1ae8be51fb22104066600fdddeaf94b004e63c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFhZThiZTUxZmIyMjEwNDA2NjYwMGZkZGRlYWY5NGIwMDRlNjNjOA==", "commit": {"author": {"name": "Simon Martin", "email": "simartin@users.sourceforge.net", "date": "2007-06-07T19:59:33Z"}, "committer": {"name": "Simon Martin", "email": "simartin@gcc.gnu.org", "date": "2007-06-07T19:59:33Z"}, "message": "re PR c++/30759 (initializer-list accepted for object of non-POD type)\n\ngcc/\n\n2007-06-07  Simon Martin  <simartin@users.sourceforge.net>\n\n\tPR c++/30759\n\t* c-common.h (flag_cpp0x): Replaced by...\n\t(cxx_dialect): ... this new variable specifying the C++ dialect that\n\tis used.\n\t* c-common.c (flag_cpp0x): Removed.\n\t(cxx_dialect): Defined.\n\t* c-cppbuiltin.c (c_cpp_builtins): flag_cpp0x rewritten in terms of\n\tcxx_dialect.\n\t* c-opts.c (c_common_post_options): Likewise.\n\t(set_std_cxx98): Set cxx_dialect to cxx98.\n\t(set_std_cxx0x): Set cxx_dialect to cxx0x.\n\ngcc/cp/\n\n2007-06-07  Simon Martin  <simartin@users.sourceforge.net>\n\n\tPR c++/30759\n\t* decl.c (check_initializer): Report an error when a brace enclosed\n\tinitializer is used for a non-aggregate type in C++98.\n\t(redeclaration_error_message): Rewrote flag_cpp0x in terms of\n\tcxx_dialect.\n\t(grokdeclarator): Likewise.\n\t(move_fn_p): Likewise.\n\t* typeck.c (check_return_expr): Likewise.\n\t* call.c (reference_binding): Likewise.\n\t* error.c (cp_cpp_error): Likewise.\n\t* pt.c (check_default_tmpl_args): Likewise.\n\t(tsubst): Likewise.\n\t* lex.c (init_reswords): Likewise.\n\t* parser.c (p_parser_primary_expression): Likewise.\n\t(TOKEN_PRECEDENCE): Likewise.\n\t(cp_parser_init_declarator): Likewise.\n\t(cp_parser_ptr_operator): Likewise.\n\t(cp_parser_parameter_declaration): Likewise.\n\t(cp_parser_enclosed_template_argument_list): Likewise.\n\t(cp_parser_skip_to_end_of_template_parameter_list): Likewise.\n\t(cp_parser_next_token_ends_template_argument_p): Likewise.\n\ngcc/testsuite/\n\n2007-06-07  Simon Martin  <simartin@users.sourceforge.net>\n\n\tPR c++/30759\n\t* g++.dg/init/brace6.C: New test.\n\nFrom-SVN: r125539", "tree": {"sha": "c9bfce8481cc2ab5d947f7ccd7de24217b53132e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9bfce8481cc2ab5d947f7ccd7de24217b53132e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1ae8be51fb22104066600fdddeaf94b004e63c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1ae8be51fb22104066600fdddeaf94b004e63c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1ae8be51fb22104066600fdddeaf94b004e63c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1ae8be51fb22104066600fdddeaf94b004e63c8/comments", "author": {"login": "simartin", "id": 935202, "node_id": "MDQ6VXNlcjkzNTIwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/935202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simartin", "html_url": "https://github.com/simartin", "followers_url": "https://api.github.com/users/simartin/followers", "following_url": "https://api.github.com/users/simartin/following{/other_user}", "gists_url": "https://api.github.com/users/simartin/gists{/gist_id}", "starred_url": "https://api.github.com/users/simartin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simartin/subscriptions", "organizations_url": "https://api.github.com/users/simartin/orgs", "repos_url": "https://api.github.com/users/simartin/repos", "events_url": "https://api.github.com/users/simartin/events{/privacy}", "received_events_url": "https://api.github.com/users/simartin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "20967296dc0517322a6058ec55491de9707c0c34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20967296dc0517322a6058ec55491de9707c0c34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20967296dc0517322a6058ec55491de9707c0c34"}], "stats": {"total": 179, "additions": 136, "deletions": 43}, "files": [{"sha": "30e9f6ec38e2de488c263b95ec1a2bb6a81cb26a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ae8be51fb22104066600fdddeaf94b004e63c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ae8be51fb22104066600fdddeaf94b004e63c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1ae8be51fb22104066600fdddeaf94b004e63c8", "patch": "@@ -1,3 +1,17 @@\n+2007-06-07  Simon Martin  <simartin@users.sourceforge.net>\n+\n+\tPR c++/30759\n+\t* c-common.h (flag_cpp0x): Replaced by...\n+\t(cxx_dialect): ... this new variable specifying the C++ dialect that\n+\tis used.\n+\t* c-common.c (flag_cpp0x): Removed.\n+\t(cxx_dialect): Defined.\n+\t* c-cppbuiltin.c (c_cpp_builtins): flag_cpp0x rewritten in terms of\n+\tcxx_dialect.\n+\t* c-opts.c (c_common_post_options): Likewise.\n+\t(set_std_cxx98): Set cxx_dialect to cxx98.\n+\t(set_std_cxx0x): Set cxx_dialect to cxx0x.\n+\n 2007-06-06  Geoffrey Keating  <geoffk@apple.com>\n \t    Hui-May Chang <hm.chang@apple.com>\n "}, {"sha": "f17bb7fef686bc29576672943616d8940b7a5ae8", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ae8be51fb22104066600fdddeaf94b004e63c8/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ae8be51fb22104066600fdddeaf94b004e63c8/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=c1ae8be51fb22104066600fdddeaf94b004e63c8", "patch": "@@ -406,10 +406,9 @@ int flag_access_control = 1;\n \n int flag_check_new;\n \n-/* Nonzero if we want to allow the use of experimental features that\n-   are likely to become part of C++0x. */\n+/* The C++ dialect being used. C++98 is the default.  */\n \n-int flag_cpp0x = 0;\n+enum cxx_dialect cxx_dialect = cxx98;\n \n /* Nonzero if we want the new ISO rules for pushing a new scope for `for'\n    initialization variables."}, {"sha": "62032c62c686419762019654e26d84c7eea8a7b8", "filename": "gcc/c-common.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ae8be51fb22104066600fdddeaf94b004e63c8/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ae8be51fb22104066600fdddeaf94b004e63c8/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=c1ae8be51fb22104066600fdddeaf94b004e63c8", "patch": "@@ -543,10 +543,18 @@ extern int flag_access_control;\n \n extern int flag_check_new;\n \n-/* Nonzero if we want to allow the use of experimental features that\n-   are likely to become part of C++0x. */\n+/* The supported C++ dialects.  */\n+\n+enum cxx_dialect {\n+  /* C++98  */\n+  cxx98,\n+  /* Experimental features that are likely to become part of\n+     C++0x.  */\n+  cxx0x\n+};\n \n-extern int flag_cpp0x;\n+/* The C++ dialect being used. C++98 is the default.  */\n+extern enum cxx_dialect cxx_dialect;\n \n /* Nonzero if we want the new ISO rules for pushing a new scope for `for'\n    initialization variables."}, {"sha": "19bb47c14102ae17943dba9a534c202106475cc9", "filename": "gcc/c-cppbuiltin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ae8be51fb22104066600fdddeaf94b004e63c8/gcc%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ae8be51fb22104066600fdddeaf94b004e63c8/gcc%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-cppbuiltin.c?ref=c1ae8be51fb22104066600fdddeaf94b004e63c8", "patch": "@@ -419,7 +419,7 @@ c_cpp_builtins (cpp_reader *pfile)\n \tcpp_define (pfile, \"__GXX_WEAK__=0\");\n       if (warn_deprecated)\n \tcpp_define (pfile, \"__DEPRECATED\");\n-      if (flag_cpp0x)\n+      if (cxx_dialect == cxx0x)\n         cpp_define (pfile, \"__GXX_EXPERIMENTAL_CXX0X__\");\n     }\n   /* Note that we define this for C as well, so that we know if"}, {"sha": "d0fafc6f9dbcd740b7541d0f9bccf2d630b50fcd", "filename": "gcc/c-opts.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ae8be51fb22104066600fdddeaf94b004e63c8/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ae8be51fb22104066600fdddeaf94b004e63c8/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=c1ae8be51fb22104066600fdddeaf94b004e63c8", "patch": "@@ -1145,7 +1145,7 @@ c_common_post_options (const char **pfilename)\n \n   /* If we're allowing C++0x constructs, don't warn about C++0x\n      compatibility problems.  */\n-  if (flag_cpp0x)\n+  if (cxx_dialect == cxx0x)\n     warn_cxx0x_compat = 0;\n \n   if (flag_preprocess_only)\n@@ -1610,6 +1610,7 @@ set_std_cxx98 (int iso)\n   flag_no_gnu_keywords = iso;\n   flag_no_nonansi_builtin = iso;\n   flag_iso = iso;\n+  cxx_dialect = cxx98;\n }\n \n /* Set the C++ 0x working draft \"standard\" (without GNU extensions if ISO).  */\n@@ -1620,7 +1621,7 @@ set_std_cxx0x (int iso)\n   flag_no_gnu_keywords = iso;\n   flag_no_nonansi_builtin = iso;\n   flag_iso = iso;\n-  flag_cpp0x = 1;\n+  cxx_dialect = cxx0x;\n }\n \n /* Handle setting implicit to ON.  */"}, {"sha": "bc6bdd19d7e076cd122281550748fdc489ed75a9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ae8be51fb22104066600fdddeaf94b004e63c8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ae8be51fb22104066600fdddeaf94b004e63c8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c1ae8be51fb22104066600fdddeaf94b004e63c8", "patch": "@@ -1,3 +1,27 @@\n+2007-06-07  Simon Martin  <simartin@users.sourceforge.net>\n+\n+\tPR c++/30759\n+\t* decl.c (check_initializer): Report an error when a brace enclosed\n+\tinitializer is used for a non-aggregate type in C++98.\n+\t(redeclaration_error_message): Rewrote flag_cpp0x in terms of\n+\tcxx_dialect.\n+\t(grokdeclarator): Likewise.\n+\t(move_fn_p): Likewise.\n+\t* typeck.c (check_return_expr): Likewise.\n+\t* call.c (reference_binding): Likewise.\n+\t* error.c (cp_cpp_error): Likewise.\n+\t* pt.c (check_default_tmpl_args): Likewise.\n+\t(tsubst): Likewise.\n+\t* lex.c (init_reswords): Likewise.\n+\t* parser.c (p_parser_primary_expression): Likewise.\n+\t(TOKEN_PRECEDENCE): Likewise.\n+\t(cp_parser_init_declarator): Likewise.\n+\t(cp_parser_ptr_operator): Likewise.\n+\t(cp_parser_parameter_declaration): Likewise.\n+\t(cp_parser_enclosed_template_argument_list): Likewise.\n+\t(cp_parser_skip_to_end_of_template_parameter_list): Likewise.\n+\t(cp_parser_next_token_ends_template_argument_p): Likewise.\n+\n 2007-06-04  Simon Baldwin  <simonb@google.com>\n \n \t* decl.c (grokdeclarator): Readability change.  Moved case labels"}, {"sha": "6e6be645d6e59a4089a969543bb2c0101b032b39", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ae8be51fb22104066600fdddeaf94b004e63c8/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ae8be51fb22104066600fdddeaf94b004e63c8/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=c1ae8be51fb22104066600fdddeaf94b004e63c8", "patch": "@@ -1160,7 +1160,7 @@ reference_binding (tree rto, tree rfrom, tree expr, bool c_cast_p, int flags)\n      DR391. */\n   if (compatible_p\n       && (lvalue_p\n-\t  || (flag_cpp0x\n+\t  || ((cxx_dialect != cxx98)\n \t      && (CP_TYPE_CONST_NON_VOLATILE_P(to) || TYPE_REF_IS_RVALUE (rto))\n \t      && CLASS_TYPE_P (from))))\n     {"}, {"sha": "f7a9f1ec5475b381d8bf6f96605d2c1fd552b8a6", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ae8be51fb22104066600fdddeaf94b004e63c8/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ae8be51fb22104066600fdddeaf94b004e63c8/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c1ae8be51fb22104066600fdddeaf94b004e63c8", "patch": "@@ -2161,7 +2161,7 @@ redeclaration_error_message (tree newdecl, tree olddecl)\n            default template-argument, that declaration shall be a\n            definition and shall be the only declaration of the\n            function template in the translation unit.  */\n-      if (flag_cpp0x \n+      if ((cxx_dialect != cxx98) \n           && TREE_CODE (ot) == FUNCTION_DECL && DECL_FRIEND_P (ot)\n           && !check_default_tmpl_args (nt, DECL_TEMPLATE_PARMS (newdecl), \n                                        /*is_primary=*/1, /*is_partial=*/0,\n@@ -4777,14 +4777,29 @@ check_initializer (tree decl, tree init, int flags, tree *cleanup)\n   else\n     /* There is no way to make a variable-sized class type in GNU C++.  */\n     gcc_assert (TREE_CONSTANT (TYPE_SIZE (type)));\n-  \n-  if (!CP_AGGREGATE_TYPE_P (type)\n-      && init && BRACE_ENCLOSED_INITIALIZER_P (init)\n-      && VEC_length (constructor_elt, CONSTRUCTOR_ELTS (init)) != 1)\n+\n+  if (init && BRACE_ENCLOSED_INITIALIZER_P (init))\n     {\n-      error (\"scalar object %qD requires one element in initializer\", decl);\n-      TREE_TYPE (decl) = error_mark_node;\n-      return NULL_TREE;\n+      int init_len = VEC_length (constructor_elt, CONSTRUCTOR_ELTS (init));\n+      if (SCALAR_TYPE_P (type))\n+\t{\n+\t  if (init_len != 1)\n+\t    {\n+\t      error (\"scalar object %qD requires one element in initializer\",\n+\t\t     decl);\n+\t      TREE_TYPE (decl) = error_mark_node;\n+\t      return NULL_TREE;\n+\t    }\n+\t}\n+      else if ((cxx_dialect == cxx98) && !CP_AGGREGATE_TYPE_P (type))\n+\t{\n+\t  /* A non-aggregate that is not a scalar cannot be initialized\n+\t     via an initializer-list in C++98.  */\n+\t  error (\"braces around initializer for non-aggregate type %qT\",\n+\t\t type);\n+\t  TREE_TYPE (decl) = error_mark_node;\n+\t  return NULL_TREE;\n+\t}\n     }\n \n   if (TREE_CODE (decl) == CONST_DECL)\n@@ -7871,7 +7886,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t are still forbidden, occurs below. Reasoning behind the change\n \t\t can be found in DR106, DR540, and the rvalue reference\n \t\t proposals. */\n-\t      else if (!flag_cpp0x)\n+\t      else if (cxx_dialect == cxx98)\n \t\t{\n \t\t  error (\"cannot declare reference to %q#T\", type);\n \t\t  type = TREE_TYPE (type);\n@@ -9217,8 +9232,8 @@ move_fn_p (tree d)\n \n   gcc_assert (DECL_FUNCTION_MEMBER_P (d));\n \n-  if (!flag_cpp0x)\n-    /* There are no move constructors if we aren't in C++0x mode.  */\n+  if (cxx_dialect == cxx98)\n+    /* There are no move constructors if we are in C++98 mode.  */\n     return false;\n \n   if (TREE_CODE (d) == TEMPLATE_DECL"}, {"sha": "512944b5ce59b3f8d2dec8db548d239d7c844b6a", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ae8be51fb22104066600fdddeaf94b004e63c8/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ae8be51fb22104066600fdddeaf94b004e63c8/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=c1ae8be51fb22104066600fdddeaf94b004e63c8", "patch": "@@ -2549,7 +2549,7 @@ cp_cpp_error (cpp_reader *pfile ATTRIBUTE_UNUSED, int level,\n void\n maybe_warn_variadic_templates (void)\n {\n-  if (!flag_cpp0x && !in_system_header)\n+  if ((cxx_dialect == cxx98) && !in_system_header)\n     /* We really want to suppress this warning in system headers,\n        because libstdc++ uses variadic templates even when we aren't\n        in C++0x mode. */"}, {"sha": "f1dc8643a01fbe5e4590944b3f944c77824c0564", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ae8be51fb22104066600fdddeaf94b004e63c8/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ae8be51fb22104066600fdddeaf94b004e63c8/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=c1ae8be51fb22104066600fdddeaf94b004e63c8", "patch": "@@ -334,7 +334,7 @@ init_reswords (void)\n   int mask = ((flag_no_asm ? D_ASM : 0)\n \t      | D_OBJC\n \t      | (flag_no_gnu_keywords ? D_EXT : 0)\n-              | (flag_cpp0x ? 0 : D_CXX0X));\n+              | ((cxx_dialect == cxx0x) ? 0 : D_CXX0X));\n \n   ridpointers = GGC_CNEWVEC (tree, (int) RID_MAX);\n   for (i = 0; i < ARRAY_SIZE (reswords); i++)"}, {"sha": "7b41a5682f2d7b58b356fddc0ad29230e030d104", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ae8be51fb22104066600fdddeaf94b004e63c8/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ae8be51fb22104066600fdddeaf94b004e63c8/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=c1ae8be51fb22104066600fdddeaf94b004e63c8", "patch": "@@ -3109,7 +3109,7 @@ cp_parser_primary_expression (cp_parser *parser,\n \t\t  /* C++0x only: A \">>\" treated like two \">\" tokens,\n                      in a template-argument-list.  */\n \t\t  && (next_token->type != CPP_RSHIFT\n-                      || !flag_cpp0x\n+                      || (cxx_dialect == cxx98)\n \t\t      || parser->greater_than_is_operator_p))\n \t\tcast_p = false;\n \t    }\n@@ -5887,11 +5887,11 @@ cp_parser_cast_expression (cp_parser *parser, bool address_p, bool cast_p)\n    The binops_by_token map is used to get the tree codes for each <token> type.\n    binary-expressions are associated according to a precedence table.  */\n \n-#define TOKEN_PRECEDENCE(token)\t\t\t\t\\\n-(((token->type == CPP_GREATER\t\t\t\t\\\n-   || (flag_cpp0x && token->type == CPP_RSHIFT))\t\\\n-  && !parser->greater_than_is_operator_p)\t\t\\\n- ? PREC_NOT_OPERATOR\t\t\t\t\t\\\n+#define TOKEN_PRECEDENCE(token)\t\t\t\t     \\\n+(((token->type == CPP_GREATER\t\t\t\t     \\\n+   || ((cxx_dialect != cxx98) && token->type == CPP_RSHIFT)) \\\n+  && !parser->greater_than_is_operator_p)\t\t     \\\n+ ? PREC_NOT_OPERATOR\t\t\t\t\t     \\\n  : binops_by_token[token->type].prec)\n \n static tree\n@@ -11974,7 +11974,8 @@ cp_parser_init_declarator (cp_parser* parser,\n \t\t      ((is_parenthesized_init || !is_initialized)\n \t\t     ? 0 : LOOKUP_ONLYCONVERTING));\n     }\n-  else if (flag_cpp0x && friend_p && decl && TREE_CODE (decl) == FUNCTION_DECL)\n+  else if ((cxx_dialect != cxx98) && friend_p\n+\t   && decl && TREE_CODE (decl) == FUNCTION_DECL)\n     /* Core issue #226 (C++0x only): A default template-argument\n        shall not be specified in a friend class template\n        declaration. */\n@@ -12590,7 +12591,8 @@ cp_parser_ptr_operator (cp_parser* parser,\n     code = INDIRECT_REF;\n   else if (token->type == CPP_AND)\n     code = ADDR_EXPR;\n-  else if (flag_cpp0x && token->type == CPP_AND_AND) /* C++0x only */\n+  else if ((cxx_dialect != cxx98) &&\n+\t   token->type == CPP_AND_AND) /* C++0x only */\n     code = NON_LVALUE_EXPR;\n \n   if (code != ERROR_MARK)\n@@ -13273,7 +13275,7 @@ cp_parser_parameter_declaration (cp_parser *parser,\n \t\t  break;\n \n                 case CPP_RSHIFT:\n-                  if (!flag_cpp0x)\n+                  if (cxx_dialect == cxx98)\n                     break;\n                   /* Fall through for C++0x, which treats the `>>'\n                      operator like two `>' tokens in certain\n@@ -16808,7 +16810,7 @@ cp_parser_enclosed_template_argument_list (cp_parser* parser)\n      a '>>' instead, it's probably just a typo.  */\n   if (cp_lexer_next_token_is (parser->lexer, CPP_RSHIFT))\n     {\n-      if (flag_cpp0x)\n+      if (cxx_dialect != cxx98)\n         {\n           /* In C++0x, a `>>' in a template argument list or cast\n              expression is considered to be two separate `>'\n@@ -17338,7 +17340,7 @@ cp_parser_skip_to_end_of_template_parameter_list (cp_parser* parser)\n \t  break;\n \n         case CPP_RSHIFT:\n-          if (!flag_cpp0x)\n+          if (cxx_dialect == cxx98)\n             /* C++0x views the `>>' operator as two `>' tokens, but\n                C++98 does not. */\n             break;\n@@ -17460,7 +17462,7 @@ cp_parser_next_token_ends_template_argument_p (cp_parser *parser)\n   return (token->type == CPP_COMMA \n           || token->type == CPP_GREATER\n           || token->type == CPP_ELLIPSIS\n-\t  || (flag_cpp0x && token->type == CPP_RSHIFT));\n+\t  || ((cxx_dialect != cxx98) && token->type == CPP_RSHIFT));\n }\n \n /* Returns TRUE iff the n-th token is a \"<\", or the n-th is a \"[\" and the"}, {"sha": "f3210dd5b8fdf8ca2dddf7ea5d91c7001ed6068d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ae8be51fb22104066600fdddeaf94b004e63c8/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ae8be51fb22104066600fdddeaf94b004e63c8/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c1ae8be51fb22104066600fdddeaf94b004e63c8", "patch": "@@ -3447,7 +3447,7 @@ check_default_tmpl_args (tree decl, tree parms, int is_primary,\n \n   /* Core issue 226 (C++0x only): the following only applies to class\n      templates.  */\n-  if (!flag_cpp0x || TREE_CODE (decl) != FUNCTION_DECL)\n+  if ((cxx_dialect == cxx98) || TREE_CODE (decl) != FUNCTION_DECL)\n     {\n       /* [temp.param]\n \n@@ -3482,7 +3482,7 @@ check_default_tmpl_args (tree decl, tree parms, int is_primary,\n         }\n     }\n \n-  if ((!flag_cpp0x && TREE_CODE (decl) != TYPE_DECL)\n+  if (((cxx_dialect == cxx98) && TREE_CODE (decl) != TYPE_DECL)\n       || is_partial \n       || !is_primary\n       || is_friend_decl)\n@@ -3510,7 +3510,7 @@ check_default_tmpl_args (tree decl, tree parms, int is_primary,\n     msg = \"default template arguments may not be used in function template friend re-declaration\";\n   else if (is_friend_decl)\n     msg = \"default template arguments may not be used in function template friend declarations\";\n-  else if (TREE_CODE (decl) == FUNCTION_DECL && !flag_cpp0x)\n+  else if (TREE_CODE (decl) == FUNCTION_DECL && (cxx_dialect == cxx98))\n     msg = \"default template arguments may not be used in function templates\";\n   else if (is_partial)\n     msg = \"default template arguments may not be used in partial specializations\";\n@@ -8736,7 +8736,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t  during instantiation is no longer a cause for failure. We\n \t  only enforce this check in strict C++98 mode.  */\n \tif ((TREE_CODE (type) == REFERENCE_TYPE\n-\t     && ((!flag_cpp0x && flag_iso) || code != REFERENCE_TYPE))\n+\t     && (((cxx_dialect == cxx98) && flag_iso) || code != REFERENCE_TYPE))\n \t    || (code == REFERENCE_TYPE && TREE_CODE (type) == VOID_TYPE))\n \t  {\n \t    static location_t last_loc;\n@@ -11537,9 +11537,9 @@ type_unification_real (tree tparms,\n                If a template argument has not been deduced, its\n                default template argument, if any, is used. \n \n-             When we are not in C++0x mode (i.e., !flag_cpp0x),\n-             TREE_PURPOSE will either be NULL_TREE or ERROR_MARK_NODE,\n-             so we do not need to explicitly check flag_cpp0x here.  */\n+             When we are in C++98 mode, TREE_PURPOSE will either\n+\t     be NULL_TREE or ERROR_MARK_NODE, so we do not need\n+\t     to explicitly check cxx_dialect here.  */\n           if (TREE_PURPOSE (TREE_VEC_ELT (tparms, i)))\n             {\n               tree arg = tsubst (TREE_PURPOSE (TREE_VEC_ELT (tparms, i)), "}, {"sha": "f17aa807de4fc9e5fc6914c471242bf6552b2d05", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ae8be51fb22104066600fdddeaf94b004e63c8/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ae8be51fb22104066600fdddeaf94b004e63c8/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=c1ae8be51fb22104066600fdddeaf94b004e63c8", "patch": "@@ -6733,7 +6733,7 @@ check_return_expr (tree retval, bool *no_warning)\n       /* Under C++0x [12.8/16 class.copy], a returned lvalue is sometimes\n \t treated as an rvalue for the purposes of overload resolution to\n \t favor move constructors over copy constructors.  */\n-      if (flag_cpp0x \n+      if ((cxx_dialect != cxx98) \n           && named_return_value_okay_p\n           /* The variable must not have the `volatile' qualifier.  */\n \t  && !(cp_type_quals (TREE_TYPE (retval)) & TYPE_QUAL_VOLATILE)"}, {"sha": "0c650e7fa5e1de3d2b0359c456b95896a4c660f6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ae8be51fb22104066600fdddeaf94b004e63c8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ae8be51fb22104066600fdddeaf94b004e63c8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c1ae8be51fb22104066600fdddeaf94b004e63c8", "patch": "@@ -1,3 +1,8 @@\n+2007-06-07  Simon Martin  <simartin@users.sourceforge.net>\n+\n+\tPR c++/30759\n+\t* g++.dg/init/brace6.C: New test.\n+\n 2007-06-07  Geoffrey Keating  <geoffk@apple.com>\n \n \t* gcc.dg/attr-weakref-1-darwin.c: Run on all Darwin platforms."}, {"sha": "ffb70118f9e8da74b9683f7f1202f23ad516e61d", "filename": "gcc/testsuite/g++.dg/init/brace6.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ae8be51fb22104066600fdddeaf94b004e63c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fbrace6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ae8be51fb22104066600fdddeaf94b004e63c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fbrace6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fbrace6.C?ref=c1ae8be51fb22104066600fdddeaf94b004e63c8", "patch": "@@ -0,0 +1,25 @@\n+/* PR c++/30759 */\n+/* { dg-do \"compile\" } */\n+\n+struct A {\n+   A(int) { }\n+};\n+\n+struct B {\n+   B(const B&);\n+   int b;\n+};\n+\n+struct C {};\n+\n+struct D { int c; };\n+\n+int main()\n+{\n+   int i = { 1 };\n+   int j = { 1, 2 }; /* { dg-error \"requires one element\" } */\n+   A a = { 6 }; /* { dg-error \"initializer for non\" } */\n+   B b = { 6 }; /* { dg-error \"initializer for non\" } */\n+   C c = { 6 }; /* { dg-error \"too many initializers\" } */\n+   D d = { 6 };\n+}"}]}