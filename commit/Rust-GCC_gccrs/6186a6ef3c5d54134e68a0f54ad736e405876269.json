{"sha": "6186a6ef3c5d54134e68a0f54ad736e405876269", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE4NmE2ZWYzYzVkNTQxMzRlNjhhMGY1NGFkNzM2ZTQwNTg3NjI2OQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-12-11T11:11:31Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-12-11T11:11:31Z"}, "message": "[Ada] Fix elaboration of record with 1-element dynamic array\n\n2018-12-11  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* einfo.ads (Is_Bit_Packed_Array): Fix values of component size.\n\t(Is_Packed): Likewise.\n\t* gcc-interface/utils.c (convert): Do not extract the value of a\n\tjustified modular type if the destination type is a regular\n\tarray.\n\t* gcc-interface/decl.c (gnat_to_gnu_component_type): Pass\n\tTYPE_DECL to validate_size wherever the array has packed\n\tcomponents.\n\nFrom-SVN: r267005", "tree": {"sha": "b70f11386b52bb051ba0a8178d21ea4101368992", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b70f11386b52bb051ba0a8178d21ea4101368992"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6186a6ef3c5d54134e68a0f54ad736e405876269", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6186a6ef3c5d54134e68a0f54ad736e405876269", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6186a6ef3c5d54134e68a0f54ad736e405876269", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6186a6ef3c5d54134e68a0f54ad736e405876269/comments", "author": null, "committer": null, "parents": [{"sha": "af3ded0832bd13e8f00fc62d96a367635398d1d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af3ded0832bd13e8f00fc62d96a367635398d1d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af3ded0832bd13e8f00fc62d96a367635398d1d6"}], "stats": {"total": 42, "additions": 29, "deletions": 13}, "files": [{"sha": "d56897b4fed8f1a5da20d81eb0badfe9d2986b23", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6186a6ef3c5d54134e68a0f54ad736e405876269/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6186a6ef3c5d54134e68a0f54ad736e405876269/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6186a6ef3c5d54134e68a0f54ad736e405876269", "patch": "@@ -1,3 +1,14 @@\n+2018-12-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* einfo.ads (Is_Bit_Packed_Array): Fix values of component size.\n+\t(Is_Packed): Likewise.\n+\t* gcc-interface/utils.c (convert): Do not extract the value of a\n+\tjustified modular type if the destination type is a regular\n+\tarray.\n+\t* gcc-interface/decl.c (gnat_to_gnu_component_type): Pass\n+\tTYPE_DECL to validate_size wherever the array has packed\n+\tcomponents.\n+\n 2018-12-11  Bob Duff  <duff@adacore.com>\n \n \t* gnat1drv.adb (gnat1drv): Pass the correct Object value when"}, {"sha": "9533a471e7f07e70555f2a63612229563e5a770e", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6186a6ef3c5d54134e68a0f54ad736e405876269/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6186a6ef3c5d54134e68a0f54ad736e405876269/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=6186a6ef3c5d54134e68a0f54ad736e405876269", "patch": "@@ -2355,7 +2355,7 @@ package Einfo is\n --    Is_Bit_Packed_Array (Flag122) [implementation base type only]\n --       Defined in all entities. This flag is set for a packed array type that\n --       is bit-packed (i.e. the component size is known by the front end and\n---       is in the range 1-7, 9-15, 17-31, or 33-63). Is_Packed is always set\n+--       is in the range 1-63 but not a multiple of 8). Is_Packed is always set\n --       if Is_Bit_Packed_Array is set, but it is possible for Is_Packed to be\n --       set without Is_Bit_Packed_Array if the component size is not known by\n --       the front-end or for the case of an array having one or more index\n@@ -3020,9 +3020,9 @@ package Einfo is\n --       out that the component size doesn't require packing, the Is_Packed\n --       flag gets turned off.\n \n---       In the bit-packed array case (i.e. component size is known at compile\n---       time and is 1-7, 9-15, 17-31 or 33-63), Is_Bit_Packed_Array will be\n---       set once the array type is frozen.\n+--       In the bit-packed array case (i.e. the component size is known by the\n+--       front end and is in the range 1-63 but not a multiple of 8), then the\n+--       Is_Bit_Packed_Array flag will be set once the array type is frozen.\n --\n --    Is_Packed_Array (synth)\n --       Applies to all entities, true if entity is for a packed array."}, {"sha": "eaa1a52fd2fa739759ceb60692ab5877c30d6fff", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6186a6ef3c5d54134e68a0f54ad736e405876269/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6186a6ef3c5d54134e68a0f54ad736e405876269/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=6186a6ef3c5d54134e68a0f54ad736e405876269", "patch": "@@ -5051,6 +5051,7 @@ gnat_to_gnu_component_type (Entity_Id gnat_array, bool definition,\n {\n   const Entity_Id gnat_type = Component_Type (gnat_array);\n   tree gnu_type = gnat_to_gnu_type (gnat_type);\n+  bool has_packed_components = Is_Bit_Packed_Array (gnat_array);\n   tree gnu_comp_size;\n   unsigned int max_align;\n \n@@ -5063,20 +5064,23 @@ gnat_to_gnu_component_type (Entity_Id gnat_array, bool definition,\n   else\n     max_align = 0;\n \n-  /* Try to get a smaller form of the component if needed.  */\n+  /* Try to get a packable form of the component if needed.  */\n   if ((Is_Packed (gnat_array) || Has_Component_Size_Clause (gnat_array))\n-      && !Is_Bit_Packed_Array (gnat_array)\n       && !Has_Aliased_Components (gnat_array)\n       && !Strict_Alignment (gnat_type)\n+      && !has_packed_components\n       && RECORD_OR_UNION_TYPE_P (gnu_type)\n       && !TYPE_FAT_POINTER_P (gnu_type)\n       && tree_fits_uhwi_p (TYPE_SIZE (gnu_type)))\n-    gnu_type = make_packable_type (gnu_type, false, max_align);\n+    {\n+      gnu_type = make_packable_type (gnu_type, false, max_align);\n+      has_packed_components = true;\n+    }\n \n   /* Get and validate any specified Component_Size.  */\n   gnu_comp_size\n     = validate_size (Component_Size (gnat_array), gnu_type, gnat_array,\n-\t\t     Is_Bit_Packed_Array (gnat_array) ? TYPE_DECL : VAR_DECL,\n+\t\t     has_packed_components ? TYPE_DECL : VAR_DECL,\n \t\t     true, Has_Component_Size_Clause (gnat_array));\n \n   /* If the component type is a RECORD_TYPE that has a self-referential size,"}, {"sha": "24d8cd973990c17954e5cba51feb988bd83df334", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6186a6ef3c5d54134e68a0f54ad736e405876269/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6186a6ef3c5d54134e68a0f54ad736e405876269/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=6186a6ef3c5d54134e68a0f54ad736e405876269", "patch": "@@ -4361,12 +4361,13 @@ convert (tree type, tree expr)\n \t\t\t\t\t\tTYPE_MIN_VALUE (etype))));\n \n   /* If the input is a justified modular type, we need to extract the actual\n-     object before converting it to any other type with the exceptions of an\n-     unconstrained array or of a mere type variant.  It is useful to avoid the\n-     extraction and conversion in the type variant case because it could end\n-     up replacing a VAR_DECL expr by a constructor and we might be about the\n-     take the address of the result.  */\n+     object before converting it to an other type with the exceptions of an\n+     [unconstrained] array or a mere type variant.  It is useful to avoid\n+     the extraction and conversion in these cases because it could end up\n+     replacing a VAR_DECL by a constructor and we might be about the take\n+     the address of the result.  */\n   if (ecode == RECORD_TYPE && TYPE_JUSTIFIED_MODULAR_P (etype)\n+      && code != ARRAY_TYPE\n       && code != UNCONSTRAINED_ARRAY_TYPE\n       && TYPE_MAIN_VARIANT (type) != TYPE_MAIN_VARIANT (etype))\n     return"}]}