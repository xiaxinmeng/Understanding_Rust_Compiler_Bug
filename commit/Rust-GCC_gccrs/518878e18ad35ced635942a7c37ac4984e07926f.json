{"sha": "518878e18ad35ced635942a7c37ac4984e07926f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE4ODc4ZTE4YWQzNWNlZDYzNTk0MmE3YzM3YWM0OTg0ZTA3OTI2Zg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2002-07-25T02:51:31Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2002-07-25T02:51:31Z"}, "message": "eabi.h: Define TARGET_SPE_ABI, TARGET_SPE, TARGET_ISEL, and TARGET_FPRS.\n\n\n2002-07-24  Aldy Hernandez  <aldyh@redhat.com>\n\n\t* config/rs6000/eabi.h: Define TARGET_SPE_ABI, TARGET_SPE,\n\tTARGET_ISEL, and TARGET_FPRS.\n\n\t* doc/invoke.texi (RS/6000 and PowerPC Options): Document\n\t-mabi=spe, -mabi=no-spe, and -misel=.\n\n\t* config/rs6000/rs6000-protos.h: Add output_isel.\n\tMove vrsave_operation prototype here.\n\n\t* config/rs6000/rs6000.md (sminsi3): Allow pattern for TARGET_ISEL.\n\t(smaxsi3): Same.\n\t(uminsi3): Same.\n\t(umaxsi3): Same.\n\t(abssi2_nopower): Disallow when TARGET_ISEL.\n\t(*ne0): Same.\n\t(negsf2): Change to expand and rename old pattern to *negsf2.\n\t(abssf2): Change to expand and rename old pattern to *abssf2.\n\n\tNew expanders: fix_truncsfsi2, floatunssisf2, floatsisf2,\n\tfixunssfsi2.\n\n\tChange patterns that check for TARGET_HARD_FLOAT or\n\tTARGET_SOFT_FLOAT to also check TARGET_FPRS.\n\n\t* config/rs6000/rs6000.c: New globals: rs6000_spe_abi,\n\trs6000_isel, rs6000_fprs, rs6000_isel_string.\n\t(rs6000_override_options): Add 8540 case to\n\tprocessor_target_table.\n\tSet rs6000_isel for the 8540.\n\tCall rs6000_parse_isel_option.\n\t(enable_mask_for_builtins): New.\n\t(rs6000_parse_isel_option): New.\n\t(rs6000_parse_abi_options): Add spe and no-spe.\n\t(easy_fp_constant): Treat !TARGET_FPRS as soft-float.\n\t(rs6000_legitimize_address): Check for TARGET_FPRS when checking\n\tfor TARGET_HARD_FLOAT.\n\tAdd case for SPE_VECTOR_MODE.\n\t(rs6000_legitimize_reload_address): Handle SPE vector modes.\n\t(rs6000_legitimate_address): Disallow PRE_INC/PRE_DEC for SPE\n\tvector modes.\n\tCheck for TARGET_FPRS when checking for TARGET_HARD_FLOAT.\n\t(rs6000_emit_move): Check for TARGET_FPRS.\n\tAdd cases for SPE vector modes.\n\t(function_arg_boundary): Return 64 for SPE vector modes.\n\t(function_arg_advance): Check for TARGET_FPRS and\n\tHandle SPE vectors.\n\t(function_arg): Same.\n\t(setup_incoming_varargs): Check for TARGET_FPRS.\n\t(rs6000_va_arg): Same.\n\t(struct builtin_description): Un-constify mask field.  Move up in\n\tfile.\n\t(bdesc_2arg): Un-constify and add SPE builtins.\n\t(bdesc_1arg): Same.\n\t(bdesc_spe_predicates): New.\n\t(bdesc_spe_evsel): New.\n\t(rs6000_expand_unop_builtin): Add SPE 5-bit literal builtins.\n\t(rs6000_expand_binop_builtin): Same.\n\t(bdesc_2arg_spe): New.\n\t(spe_expand_builtin): New.\n\t(spe_expand_predicate_builtin): New.\n\t(spe_expand_evsel_builtin): New.\n\t(rs6000_expand_builtin): Call spe_expand_builtin for SPE.\n\t(rs6000_init_builtins): Initialize SPE builtins.  Call\n\trs6000_common_init_builtins.\n\t(altivec_init_builtins): Move all non-altivec builtin code to...\n\t(rs6000_common_init_builtins): ...here.  New function.\n\t(branch_positive_comparison_operator): Allow NE code for SPE.\n\t(ccr_bit): Return correct ccr bit for SPE fp.\n\t(print_operand): Emit crnor in 'D' case for SPE.\n\tNew case 't'.\n\tAdd SPE code for 'y' case.\n\t(rs6000_generate_compare): Generate rtl for SPE fp.\n\t(output_cbranch): Handle SPE hard floats.\n\t(rs6000_emit_cmove): Handle isel.\n\t(rs6000_emit_int_cmove): New.\n\t(output_isel): New.\n\t(rs6000_stack_info): Adjust stack frame so GPRs are saved in\n\t64-bits for SPE.\n\t(debug_stack_info): Add SPE info.\n\t(gen_frame_mem_offset): New.\n\t(rs6000_emit_prologue): Save GPRs in 64-bits for SPE abi.\n\tChange mode of frame pointer, when saving it, to Pmode.\n\t(rs6000_emit_epilogue): Restore GPRs in 64-bits for SPE abi.\n\tMisc cleanups and use gen_frame_mem_offset when appropriate.\n\n\t* config/rs6000/rs6000.h (processor_type): Add PROCESSOR_PPC8540.\n\t(TARGET_SPE_ABI): New.\n\t(TARGET_SPE): New.\n\t(TARGET_ISEL): New.\n\t(TARGET_FPRS): New.\n\t(FIXED_SCRATCH): New.\n\t(RTX_COSTS): Add PROCESSOR_PPC8540.\n\t(ASM_CPU_SPEC): Add case for 8540.\n\t(TARGET_OPTIONS): Add isel= case.\n\t(rs6000_spe_abi): New.\n\t(rs6000_isel): New.\n\t(rs6000_fprs): New.\n\t(rs6000_isel_string): New.\n\t(UNITS_PER_SPE_WORD): New.\n\t(LOCAL_ALIGNMENT): Adjust for SPE.\n\t(HARD_REGNO_MODE_OK): Same.\n\t(DATA_ALIGNMENT): Same.\n\t(MEMBER_TYPE_FORCES_BLK): New.\n\t(FIRST_PSEUDO_REGISTER): Set to 113.\n\t(FIXED_REGISTERS): Add SPE registers.\n\t(reg_class): Same.\n\t(REG_CLASS_NAMES): Same.\n\t(REG_CLASS_CONTENTS): Same.\n\t(REGNO_REG_CLASS): Same.\n\t(REGISTER_NAMES): Same.\n\t(DEBUG_REGISTER_NAMES): Same.\n\t(ADDITIONAL_REGISTER_NAMES): Same.\n\t(CALL_USED_REGISTERS): Same.\n\t(CALL_REALLY_USED_REGISTERS): Same.\n\t(SPE_ACC_REGNO): New.\n\t(SPEFSCR_REGNO): New.\n\t(SPE_SIMD_REGNO_P): New.\n\t(HARD_REGNO_NREGS): Adjust for SPE.\n\t(VECTOR_MODE_SUPPORTED_P): Same.\n\t(REGNO_REG_CLASS): Same.\n\t(FUNCTION_VALUE): Same.\n\t(LIBCALL_VALUE): Same.\n\t(LEGITIMATE_OFFSET_ADDRESS_P): Same.\n\t(SPE_VECTOR_MODE): New.\n\t(CONDITIONAL_REGISTER_USAGE): Disable FPRs when target does FP on\n\tthe GPRs.  Set FIXED_SCRATCH fixed in SPE case.\n\t(rs6000_stack): Add spe_gp_size, spe_padding_size,\n\tspe_gp_save_offset.\n\t(USE_FP_FOR_ARG_P): Check for TARGET_FPRS.\n\t(LEGITIMATE_LO_SUM_ADDRESS_P): Same.\n\t(SPE_CONST_OFFSET_OK): New.\n\t(rs6000_builtins): Add SPE builtins.\n\n\t* testsuite/gcc.dg/ppc-spe.c: New.\n\n\t* config/rs6000/eabispe.h: New.\n\n\t* config/rs6000/spe.h: New.\n\n\t* config/rs600/spe.md: New.\n\n\t* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): Define\n\t__SIMD__ for TARGET_SPE.\n\n\t* config.gcc: Add powerpc-*-eabispe* case.\n\tAdd spe.h to user headers for powerpc.\n\nFrom-SVN: r55734", "tree": {"sha": "b90feffa5f95a3ee8459c9e4a8f95634f6f5975f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b90feffa5f95a3ee8459c9e4a8f95634f6f5975f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/518878e18ad35ced635942a7c37ac4984e07926f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/518878e18ad35ced635942a7c37ac4984e07926f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/518878e18ad35ced635942a7c37ac4984e07926f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/518878e18ad35ced635942a7c37ac4984e07926f/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0b72793f198510bb59bceea74f30bf79b19ca976", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b72793f198510bb59bceea74f30bf79b19ca976", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b72793f198510bb59bceea74f30bf79b19ca976"}], "stats": {"total": 156, "additions": 155, "deletions": 1}, "files": [{"sha": "4e37e14cf41139de2d00e9486f75cdffb6be2756", "filename": "gcc/ChangeLog", "status": "modified", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/518878e18ad35ced635942a7c37ac4984e07926f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/518878e18ad35ced635942a7c37ac4984e07926f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=518878e18ad35ced635942a7c37ac4984e07926f", "patch": "@@ -1,3 +1,152 @@\n+2002-07-24  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* config/rs6000/eabi.h: Define TARGET_SPE_ABI, TARGET_SPE,\n+\tTARGET_ISEL, and TARGET_FPRS.\n+\t\n+\t* doc/invoke.texi (RS/6000 and PowerPC Options): Document\n+\t-mabi=spe, -mabi=no-spe, and -misel=.\n+\n+\t* config/rs6000/rs6000-protos.h: Add output_isel.\n+\tMove vrsave_operation prototype here.\n+\n+\t* config/rs6000/rs6000.md (sminsi3): Allow pattern for TARGET_ISEL.\n+\t(smaxsi3): Same.\n+\t(uminsi3): Same.\n+\t(umaxsi3): Same.\n+\t(abssi2_nopower): Disallow when TARGET_ISEL.\n+\t(*ne0): Same.\n+\t(negsf2): Change to expand and rename old pattern to *negsf2.\n+\t(abssf2): Change to expand and rename old pattern to *abssf2.\n+\t\n+\tNew expanders: fix_truncsfsi2, floatunssisf2, floatsisf2,\n+\tfixunssfsi2.\n+\n+\tChange patterns that check for TARGET_HARD_FLOAT or\n+\tTARGET_SOFT_FLOAT to also check TARGET_FPRS.\n+\n+\t* config/rs6000/rs6000.c: New globals: rs6000_spe_abi,\n+\trs6000_isel, rs6000_fprs, rs6000_isel_string.\n+\t(rs6000_override_options): Add 8540 case to\n+\tprocessor_target_table.\n+\tSet rs6000_isel for the 8540.\n+\tCall rs6000_parse_isel_option.\n+\t(enable_mask_for_builtins): New.\n+\t(rs6000_parse_isel_option): New.\n+\t(rs6000_parse_abi_options): Add spe and no-spe.\n+\t(easy_fp_constant): Treat !TARGET_FPRS as soft-float.\n+\t(rs6000_legitimize_address): Check for TARGET_FPRS when checking\n+\tfor TARGET_HARD_FLOAT.\n+\tAdd case for SPE_VECTOR_MODE.\n+\t(rs6000_legitimize_reload_address): Handle SPE vector modes.\n+\t(rs6000_legitimate_address): Disallow PRE_INC/PRE_DEC for SPE\n+\tvector modes.\n+\tCheck for TARGET_FPRS when checking for TARGET_HARD_FLOAT.\n+\t(rs6000_emit_move): Check for TARGET_FPRS.\n+\tAdd cases for SPE vector modes.\n+\t(function_arg_boundary): Return 64 for SPE vector modes.\n+\t(function_arg_advance): Check for TARGET_FPRS and\n+\tHandle SPE vectors.\n+\t(function_arg): Same.\n+\t(setup_incoming_varargs): Check for TARGET_FPRS.\n+\t(rs6000_va_arg): Same.\n+\t(struct builtin_description): Un-constify mask field.  Move up in\n+\tfile.\n+\t(bdesc_2arg): Un-constify and add SPE builtins.\n+\t(bdesc_1arg): Same.\n+\t(bdesc_spe_predicates): New.\n+\t(bdesc_spe_evsel): New.\n+\t(rs6000_expand_unop_builtin): Add SPE 5-bit literal builtins.\n+\t(rs6000_expand_binop_builtin): Same.\n+\t(bdesc_2arg_spe): New.\n+\t(spe_expand_builtin): New.\n+\t(spe_expand_predicate_builtin): New.\n+\t(spe_expand_evsel_builtin): New.\n+\t(rs6000_expand_builtin): Call spe_expand_builtin for SPE.\n+\t(rs6000_init_builtins): Initialize SPE builtins.  Call\n+\trs6000_common_init_builtins.\n+\t(altivec_init_builtins): Move all non-altivec builtin code to...\n+\t(rs6000_common_init_builtins): ...here.  New function.\n+\t(branch_positive_comparison_operator): Allow NE code for SPE.\n+\t(ccr_bit): Return correct ccr bit for SPE fp.\n+\t(print_operand): Emit crnor in 'D' case for SPE.\n+\tNew case 't'.\n+\tAdd SPE code for 'y' case.\n+\t(rs6000_generate_compare): Generate rtl for SPE fp.\n+\t(output_cbranch): Handle SPE hard floats.\n+\t(rs6000_emit_cmove): Handle isel.\n+\t(rs6000_emit_int_cmove): New.\n+\t(output_isel): New.\n+\t(rs6000_stack_info): Adjust stack frame so GPRs are saved in\n+\t64-bits for SPE.\n+\t(debug_stack_info): Add SPE info.\n+\t(gen_frame_mem_offset): New.\n+\t(rs6000_emit_prologue): Save GPRs in 64-bits for SPE abi.\n+\tChange mode of frame pointer, when saving it, to Pmode.\n+\t(rs6000_emit_epilogue): Restore GPRs in 64-bits for SPE abi.\n+\tMisc cleanups and use gen_frame_mem_offset when appropriate.\n+\n+\t* config/rs6000/rs6000.h (processor_type): Add PROCESSOR_PPC8540.\n+\t(TARGET_SPE_ABI): New.\n+\t(TARGET_SPE): New.\n+\t(TARGET_ISEL): New.\n+\t(TARGET_FPRS): New.\n+\t(FIXED_SCRATCH): New.\n+\t(RTX_COSTS): Add PROCESSOR_PPC8540.\n+\t(ASM_CPU_SPEC): Add case for 8540.\n+\t(TARGET_OPTIONS): Add isel= case.\n+\t(rs6000_spe_abi): New.\n+\t(rs6000_isel): New.\n+\t(rs6000_fprs): New.\n+\t(rs6000_isel_string): New.\n+\t(UNITS_PER_SPE_WORD): New.\n+\t(LOCAL_ALIGNMENT): Adjust for SPE.\n+\t(HARD_REGNO_MODE_OK): Same.\n+\t(DATA_ALIGNMENT): Same.\n+\t(MEMBER_TYPE_FORCES_BLK): New.\n+\t(FIRST_PSEUDO_REGISTER): Set to 113.\n+\t(FIXED_REGISTERS): Add SPE registers.\n+\t(reg_class): Same.\n+\t(REG_CLASS_NAMES): Same.\n+\t(REG_CLASS_CONTENTS): Same.\n+\t(REGNO_REG_CLASS): Same.\n+\t(REGISTER_NAMES): Same.\n+\t(DEBUG_REGISTER_NAMES): Same.\n+\t(ADDITIONAL_REGISTER_NAMES): Same.\n+\t(CALL_USED_REGISTERS): Same.\n+\t(CALL_REALLY_USED_REGISTERS): Same.\n+\t(SPE_ACC_REGNO): New.\n+\t(SPEFSCR_REGNO): New.\n+\t(SPE_SIMD_REGNO_P): New.\n+\t(HARD_REGNO_NREGS): Adjust for SPE.\n+\t(VECTOR_MODE_SUPPORTED_P): Same.\n+\t(REGNO_REG_CLASS): Same.\n+\t(FUNCTION_VALUE): Same.\n+\t(LIBCALL_VALUE): Same.\n+\t(LEGITIMATE_OFFSET_ADDRESS_P): Same.\n+\t(SPE_VECTOR_MODE): New.\n+\t(CONDITIONAL_REGISTER_USAGE): Disable FPRs when target does FP on\n+\tthe GPRs.  Set FIXED_SCRATCH fixed in SPE case.\n+\t(rs6000_stack): Add spe_gp_size, spe_padding_size,\n+\tspe_gp_save_offset.\n+\t(USE_FP_FOR_ARG_P): Check for TARGET_FPRS.\n+\t(LEGITIMATE_LO_SUM_ADDRESS_P): Same.\n+\t(SPE_CONST_OFFSET_OK): New.\n+\t(rs6000_builtins): Add SPE builtins.\n+\n+\t* testsuite/gcc.dg/ppc-spe.c: New.\n+\t\n+\t* config/rs6000/eabispe.h: New.\n+\n+\t* config/rs6000/spe.h: New.\n+\n+\t* config/rs600/spe.md: New.\n+\n+\t* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): Define\n+\t__SIMD__ for TARGET_SPE.\n+\n+\t* config.gcc: Add powerpc-*-eabispe* case.\n+\tAdd spe.h to user headers for powerpc.\n+\n 2002-07-24  Chris Demetriou  <cgd@broadcom.com>\n \n \t* config/mips/elf.h (STARTFILE_SPEC): Undo previous change."}, {"sha": "1091b13fad0e0616299af67c064ad522927fc9ba", "filename": "gcc/config.gcc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/518878e18ad35ced635942a7c37ac4984e07926f/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/518878e18ad35ced635942a7c37ac4984e07926f/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=518878e18ad35ced635942a7c37ac4984e07926f", "patch": "@@ -278,7 +278,7 @@ mips*-*-*)\n \t;;\n powerpc*-*-*)\n \tcpu_type=rs6000\n-\textra_headers=\"ppc-asm.h altivec.h\"\n+\textra_headers=\"ppc-asm.h altivec.h spe.h\"\n \t;;\n sparc*-*-*)\n \tcpu_type=sparc\n@@ -2026,6 +2026,11 @@ powerpc-*-eabiaix*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h freebsd-spec.h rs6000/sysv4.h rs6000/eabi.h rs6000/eabiaix.h\"\n \ttmake_file=\"rs6000/t-ppcgas rs6000/t-ppccomm\"\n \t;;\n+powerpc-*-eabispe*)\n+\txm_defines=POSIX\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h freebsd-spec.h rs6000/sysv4.h rs6000/eabi.h rs6000/eabispe.h\"\n+\ttmake_file=\"rs6000/t-ppcendian rs6000/t-ppccomm\"\n+\t;;\n powerpc-*-eabisimaltivec*)\n \txm_defines=POSIX\n \ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h freebsd-spec.h rs6000/sysv4.h rs6000/eabi.h rs6000/eabisim.h rs6000/eabialtivec.h\""}]}