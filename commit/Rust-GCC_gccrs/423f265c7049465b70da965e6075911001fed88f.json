{"sha": "423f265c7049465b70da965e6075911001fed88f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIzZjI2NWM3MDQ5NDY1YjcwZGE5NjVlNjA3NTkxMTAwMWZlZDg4Zg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-09-05T11:10:11Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-09-05T11:10:11Z"}, "message": "Makefile.in (pexecute.o): Use pexecute.c from libiberty.\n\n        * Makefile.in (pexecute.o): Use pexecute.c from libiberty.  Provide\n        explicit rules for building.  Similarly for alloca, vfprintf,\n        choose-temp and mkstemp.\n        * pexecute.c, alloca.c, vfprintf.c, choose-temp.c, mkstemp.c: Delete.\n\nFrom-SVN: r22253", "tree": {"sha": "8c883b00c23fbd1bd538dc5cd74ab34152b595f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c883b00c23fbd1bd538dc5cd74ab34152b595f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/423f265c7049465b70da965e6075911001fed88f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/423f265c7049465b70da965e6075911001fed88f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/423f265c7049465b70da965e6075911001fed88f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/423f265c7049465b70da965e6075911001fed88f/comments", "author": null, "committer": null, "parents": [{"sha": "16ba4214ee315678d2dabe417a71d09a9b867662", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16ba4214ee315678d2dabe417a71d09a9b867662", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16ba4214ee315678d2dabe417a71d09a9b867662"}], "stats": {"total": 351, "additions": 14, "deletions": 337}, "files": [{"sha": "00ef1f8bcc795fd053aaf3b8f08ae370a9ec8a23", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/423f265c7049465b70da965e6075911001fed88f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/423f265c7049465b70da965e6075911001fed88f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=423f265c7049465b70da965e6075911001fed88f", "patch": "@@ -1,8 +1,9 @@\n Sat Sep  5 03:23:05 1998  Jeffrey A Law  (law@cygnus.com)\n \n         * Makefile.in (pexecute.o): Use pexecute.c from libiberty.  Provide\n-\texplicit rules for building.  Similarly for alloca and vfprintf.\n-        * pexecute.c, alloca.c, vfprintf.c: Delete.\n+\texplicit rules for building.  Similarly for alloca, vfprintf,\n+\tchoose-temp and mkstemp.\n+        * pexecute.c, alloca.c, vfprintf.c, choose-temp.c, mkstemp.c: Delete.\n \n Fri Sep  4 11:57:50 1998  Tom Tromey  <tromey@cygnus.com>\n "}, {"sha": "bf8311777fb3e29c2f8e93215965c499e91f0202", "filename": "gcc/Makefile.in", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/423f265c7049465b70da965e6075911001fed88f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/423f265c7049465b70da965e6075911001fed88f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=423f265c7049465b70da965e6075911001fed88f", "patch": "@@ -1370,8 +1370,17 @@ dumpvers: dumpvers.c\n \n version.o: version.c\n obstack.o: obstack.c $(CONFIG_H)\n-choose-temp.o: choose-temp.c $(CONFIG_H) gansidecl.h system.h\n-mkstemp.o: mkstemp.c $(CONFIG_H) gansidecl.h system.h\n+choose-temp.o: $(srcdir)/../libiberty/choose-temp.c $(CONFIG_H) gansidecl.h \\\n+\tsystem.h\n+\trm -f choose-temp.c\n+\t$(LN_S) $(srcdir)/../libiberty/choose-temp.c choose-temp.c\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) choose-temp.c\n+\n+mkstemp.o: $(srcdir)/../libiberty/mkstemp.c $(CONFIG_H) gansidecl.h system.h\n+\trm -f mkstemp.c\n+\t$(LN_S) $(srcdir)/../libiberty/mkstemp.c mkstemp.c\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) mkstemp.c\n+\n prefix.o: prefix.c $(CONFIG_H) system.h gansidecl.h Makefile\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t-DPREFIX=\\\"$(prefix)\\\" \\"}, {"sha": "46293367613b5ac18f4bb8a0faca3e82abc76852", "filename": "gcc/choose-temp.c", "status": "removed", "additions": 0, "deletions": 211, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16ba4214ee315678d2dabe417a71d09a9b867662/gcc%2Fchoose-temp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16ba4214ee315678d2dabe417a71d09a9b867662/gcc%2Fchoose-temp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fchoose-temp.c?ref=16ba4214ee315678d2dabe417a71d09a9b867662", "patch": "@@ -1,211 +0,0 @@\n-/* Utility to pick a temporary filename prefix.\n-   Copyright (C) 1996, 1997, 1998 Free Software Foundation, Inc.\n-\n-This file is part of the libiberty library.\n-Libiberty is free software; you can redistribute it and/or\n-modify it under the terms of the GNU Library General Public\n-License as published by the Free Software Foundation; either\n-version 2 of the License, or (at your option) any later version.\n-\n-Libiberty is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-Library General Public License for more details.\n-\n-You should have received a copy of the GNU Library General Public\n-License along with libiberty; see the file COPYING.LIB.  If not,\n-write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n-\n-/* This file exports two functions: choose_temp_base and make_temp_file.  */\n-\n-/* This file lives in at least two places: libiberty and gcc.\n-   Don't change one without the other.  */\n-\n-#if defined (IN_GCC) || defined (HAVE_CONFIG_H)\n-#include \"config.h\"\n-#endif\n-\n-#ifdef IN_GCC\n-#include \"system.h\"\n-#else\n-\n-/* If we are in gcc, system.h has handled everything.  When not in\n-   gcc, if we have a config.h we assume that HAVE_SYS_FILE_H tells us\n-   whether to include sys/file.h.  However, libiberty does not have a\n-   config.h, and instead arranges to define NO_SYS_FILE_H on the\n-   command line when there is no sys/file.h.  */\n-\n-#if defined (HAVE_CONFIG_H) ? defined (HAVE_SYS_FILE_H) : ! defined (NO_SYS_FILE_H)\n-#include <sys/types.h>\n-#include <sys/file.h>   /* May get R_OK, etc. on some systems.  */\n-#endif\n-\n-#ifndef R_OK\n-#define R_OK 4\n-#define W_OK 2\n-#define X_OK 1\n-#endif\n-\n-#include <stdio.h>\t/* May get P_tmpdir.  */\n-#endif /* IN_GCC */\n-\n-#ifdef IN_GCC\n-#include \"gansidecl.h\"\n-extern char *xmalloc ();\n-#else\n-#include \"ansidecl.h\"\n-#include \"libiberty.h\"\n-#if defined (__MSDOS__) || defined (_WIN32)\n-#define DIR_SEPARATOR '\\\\'\n-#endif\n-#endif\n-\n-#ifndef DIR_SEPARATOR\n-#define DIR_SEPARATOR '/'\n-#endif\n-\n-/* On MSDOS, write temp files in current dir\n-   because there's no place else we can expect to use.  */\n-/* ??? Although the current directory is tried as a last resort,\n-   this is left in so that on MSDOS it is preferred to /tmp on the\n-   off chance that someone requires this, since that was the previous\n-   behaviour.  */\n-#ifdef __MSDOS__\n-#ifndef P_tmpdir\n-#define P_tmpdir \".\"\n-#endif\n-#endif\n-\n-/* Name of temporary file.\n-   mktemp requires 6 trailing X's.  */\n-#define TEMP_FILE \"ccXXXXXX\"\n-\n-/* Subroutine of choose_temp_base.\n-   If BASE is non-NULL, return it.\n-   Otherwise it checks if DIR is a usable directory.\n-   If success, DIR is returned.\n-   Otherwise NULL is returned.  */\n-\n-static char *\n-try (dir, base)\n-     char *dir, *base;\n-{\n-  if (base != 0)\n-    return base;\n-  if (dir != 0\n-      && access (dir, R_OK | W_OK | X_OK) == 0)\n-    return dir;\n-  return 0;\n-}\n-\n-/* Return a prefix for temporary file names or NULL if unable to find one.\n-   The current directory is chosen if all else fails so the program is\n-   exited if a temporary directory can't be found (mktemp fails).\n-   The buffer for the result is obtained with xmalloc. \n-\n-   This function is provided for backwards compatability only.  It use\n-   is not recommended.  */\n-\n-char *\n-choose_temp_base ()\n-{\n-  char *base = 0;\n-  char *temp_filename;\n-  int len;\n-  static char tmp[] = { DIR_SEPARATOR, 't', 'm', 'p', 0 };\n-  static char usrtmp[] = { DIR_SEPARATOR, 'u', 's', 'r', DIR_SEPARATOR, 't', 'm', 'p', 0 };\n-\n-  base = try (getenv (\"TMPDIR\"), base);\n-  base = try (getenv (\"TMP\"), base);\n-  base = try (getenv (\"TEMP\"), base);\n-\n-#ifdef P_tmpdir\n-  base = try (P_tmpdir, base);\n-#endif\n-\n-  /* Try /usr/tmp, then /tmp.  */\n-  base = try (usrtmp, base);\n-  base = try (tmp, base);\n- \n-  /* If all else fails, use the current directory!  */\n-  if (base == 0)\n-    base = \".\";\n-\n-  len = strlen (base);\n-  temp_filename = xmalloc (len + 1 /*DIR_SEPARATOR*/\n-\t\t\t   + strlen (TEMP_FILE) + 1);\n-  strcpy (temp_filename, base);\n-\n-  if (len != 0\n-      && temp_filename[len-1] != '/'\n-      && temp_filename[len-1] != DIR_SEPARATOR)\n-    temp_filename[len++] = DIR_SEPARATOR;\n-  strcpy (temp_filename + len, TEMP_FILE);\n-\n-  mktemp (temp_filename);\n-  if (strlen (temp_filename) == 0)\n-    abort ();\n-  return temp_filename;\n-}\n-/* Return a temporary file name (as a string) or NULL if unable to create\n-   one.  */\n-\n-char *\n-make_temp_file (suffix)\n-     char *suffix;\n-{\n-  char *base = 0;\n-  char *temp_filename;\n-  int base_len, suffix_len;\n-  int fd;\n-  static char tmp[] = { DIR_SEPARATOR, 't', 'm', 'p', 0 };\n-  static char usrtmp[] = { DIR_SEPARATOR, 'u', 's', 'r', DIR_SEPARATOR, 't', 'm', 'p', 0 };\n-\n-  base = try (getenv (\"TMPDIR\"), base);\n-  base = try (getenv (\"TMP\"), base);\n-  base = try (getenv (\"TEMP\"), base);\n-\n-#ifdef P_tmpdir\n-  base = try (P_tmpdir, base);\n-#endif\n-\n-  /* Try /usr/tmp, then /tmp.  */\n-  base = try (usrtmp, base);\n-  base = try (tmp, base);\n- \n-  /* If all else fails, use the current directory!  */\n-  if (base == 0)\n-    base = \".\";\n-\n-  base_len = strlen (base);\n-\n-  if (suffix)\n-    suffix_len = strlen (suffix);\n-  else\n-    suffix_len = 0;\n-\n-  temp_filename = xmalloc (base_len + 1 /*DIR_SEPARATOR*/\n-\t\t\t   + strlen (TEMP_FILE)\n-\t\t\t   + suffix_len + 1);\n-  strcpy (temp_filename, base);\n-\n-  if (base_len != 0\n-      && temp_filename[base_len-1] != '/'\n-      && temp_filename[base_len-1] != DIR_SEPARATOR)\n-    temp_filename[base_len++] = DIR_SEPARATOR;\n-  strcpy (temp_filename + base_len, TEMP_FILE);\n-\n-  if (suffix)\n-    strcat (temp_filename, suffix);\n-\n-  fd = mkstemps (temp_filename, suffix_len);\n-  /* If mkstemps failed, then something bad is happening.  Maybe we should\n-     issue a message about a possible security attack in progress?  */\n-  if (fd == -1)\n-    abort ();\n-  /* Similarly if we can not close the file.  */\n-  if (close (fd))\n-    abort ();\n-  return temp_filename;\n-}"}, {"sha": "d55e5837f15883491012a948a3678e8b3806872e", "filename": "gcc/mkstemp.c", "status": "removed", "additions": 0, "deletions": 122, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16ba4214ee315678d2dabe417a71d09a9b867662/gcc%2Fmkstemp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16ba4214ee315678d2dabe417a71d09a9b867662/gcc%2Fmkstemp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmkstemp.c?ref=16ba4214ee315678d2dabe417a71d09a9b867662", "patch": "@@ -1,122 +0,0 @@\n-/* Copyright (C) 1991, 1992, 1996, 1998 Free Software Foundation, Inc.\n-   This file is derived from mkstemp.c from the GNU C Library.\n-\n-   The GNU C Library is free software; you can redistribute it and/or\n-   modify it under the terms of the GNU Library General Public License as\n-   published by the Free Software Foundation; either version 2 of the\n-   License, or (at your option) any later version.\n-\n-   The GNU C Library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-   Library General Public License for more details.\n-\n-   You should have received a copy of the GNU Library General Public\n-   License along with the GNU C Library; see the file COPYING.LIB.  If not,\n-   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n-   Boston, MA 02111-1307, USA.  */\n-\n-#ifndef IN_GCC\n-#include <stdlib.h>\n-#include <string.h>\n-#include <errno.h>\n-#include <stdint.h>\n-#include <stdio.h>\n-#include <fcntl.h>\n-#include <unistd.h>\n-#include <sys/time.h>\n-#else\n-#include \"config.h\"\n-#include \"system.h\"\n-#include \"gansidecl.h\"\n-\n-/* We need to provide a type for gcc_uint64_t.  */\n-#ifdef __GNUC__\n-typedef unsigned long long gcc_uint64_t;\n-#else\n-typedef unsigned long gcc_uint64_t;\n-#endif\n-\n-#ifndef TMP_MAX\n-#define TMP_MAX 16384\n-#endif\n-#endif\n-\n-/* Generate a unique temporary file name from TEMPLATE.\n-\n-   TEMPLATE has the form:\n-\n-   <path>/ccXXXXXX<suffix>\n-\n-   SUFFIX_LEN tells us how long <suffix> is (it can be zero length).\n-\n-   The last six characters of TEMPLATE before <suffix> must be \"XXXXXX\";\n-   they are replaced with a string that makes the filename unique.\n-\n-   Returns a file descriptor open on the file for reading and writing.  */\n-int\n-mkstemps (template, suffix_len)\n-     char *template;\n-     int suffix_len;\n-{\n-  static const char letters[]\n-    = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n-  static gcc_uint64_t value;\n-#ifdef HAVE_GETTIMEOFDAY\n-  struct timeval tv;\n-#endif\n-  char *XXXXXX;\n-  size_t len;\n-  int count;\n-\n-  len = strlen (template);\n-\n-  if (len < 6 + suffix_len\n-      || strncmp (&template[len - 6 - suffix_len], \"XXXXXX\", 6))\n-    {\n-      return -1;\n-    }\n-\n-  XXXXXX = &template[len - 6 - suffix_len];\n-\n-#ifdef HAVE_GETTIMEOFDAY\n-  /* Get some more or less random data.  */\n-  gettimeofday (&tv, NULL);\n-  value += ((gcc_uint64_t) tv.tv_usec << 16) ^ tv.tv_sec ^ getpid ();\n-#else\n-  value += getpid ();\n-#endif\n-\n-  for (count = 0; count < TMP_MAX; ++count)\n-    {\n-      gcc_uint64_t v = value;\n-      int fd;\n-\n-      /* Fill in the random bits.  */\n-      XXXXXX[0] = letters[v % 62];\n-      v /= 62;\n-      XXXXXX[1] = letters[v % 62];\n-      v /= 62;\n-      XXXXXX[2] = letters[v % 62];\n-      v /= 62;\n-      XXXXXX[3] = letters[v % 62];\n-      v /= 62;\n-      XXXXXX[4] = letters[v % 62];\n-      v /= 62;\n-      XXXXXX[5] = letters[v % 62];\n-\n-      fd = open (template, O_RDWR|O_CREAT|O_EXCL, 0600);\n-      if (fd >= 0)\n-\t/* The file does not exist.  */\n-\treturn fd;\n-\n-      /* This is a random value.  It is only necessary that the next\n-\t TMP_MAX values generated by adding 7777 to VALUE are different\n-\t with (module 2^32).  */\n-      value += 7777;\n-    }\n-\n-  /* We return the null string if we can't find a unique file name.  */\n-  template[0] = '\\0';\n-  return -1;\n-}"}]}