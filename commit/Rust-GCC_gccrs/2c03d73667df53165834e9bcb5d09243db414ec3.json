{"sha": "2c03d73667df53165834e9bcb5d09243db414ec3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmMwM2Q3MzY2N2RmNTMxNjU4MzRlOWJjYjVkMDkyNDNkYjQxNGVjMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-11-07T20:24:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-11-07T20:24:38Z"}, "message": "PR c++/91370 - Implement P1041R4 and P1139R2 - Stronger Unicode reqs\n\n\tPR c++/91370 - Implement P1041R4 and P1139R2 - Stronger Unicode reqs\n\t* charset.c (narrow_str_to_charconst): Add TYPE argument.  For\n\tCPP_UTF8CHAR diagnose whenever number of chars is > 1, using\n\tCPP_DL_ERROR instead of CPP_DL_WARNING.\n\t(wide_str_to_charconst): For CPP_CHAR16 or CPP_CHAR32, use\n\tCPP_DL_ERROR instead of CPP_DL_WARNING when multiple char16_t\n\tor char32_t chars are needed.\n\t(cpp_interpret_charconst): Adjust narrow_str_to_charconst caller.\n\n\t* g++.dg/cpp1z/utf8-neg.C: Expect errors rather than -Wmultichar\n\twarnings.\n\t* g++.dg/ext/utf16-4.C: Expect errors rather than warnings.\n\t* g++.dg/ext/utf32-4.C: Likewise.\n\t* g++.dg/cpp2a/ucn2.C: New test.\n\nFrom-SVN: r277929", "tree": {"sha": "2b484f05c4147f1d373d5966366fa8899c4c8a74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b484f05c4147f1d373d5966366fa8899c4c8a74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c03d73667df53165834e9bcb5d09243db414ec3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c03d73667df53165834e9bcb5d09243db414ec3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c03d73667df53165834e9bcb5d09243db414ec3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c03d73667df53165834e9bcb5d09243db414ec3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8b4f2b5e0871d32d0f78ce3f3250af71bfb6f65a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b4f2b5e0871d32d0f78ce3f3250af71bfb6f65a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b4f2b5e0871d32d0f78ce3f3250af71bfb6f65a"}], "stats": {"total": 80, "additions": 68, "deletions": 12}, "files": [{"sha": "5b3f9d5c8b0fdb1b6250884f1efef26ce29d46b3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c03d73667df53165834e9bcb5d09243db414ec3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c03d73667df53165834e9bcb5d09243db414ec3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2c03d73667df53165834e9bcb5d09243db414ec3", "patch": "@@ -1,3 +1,12 @@\n+2019-11-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/91370 - Implement P1041R4 and P1139R2 - Stronger Unicode reqs\n+\t* g++.dg/cpp1z/utf8-neg.C: Expect errors rather than -Wmultichar\n+\twarnings.\n+\t* g++.dg/ext/utf16-4.C: Expect errors rather than warnings.\n+\t* g++.dg/ext/utf32-4.C: Likewise.\n+\t* g++.dg/cpp2a/ucn2.C: New test.\n+\n 2019-11-07  Peter Bergner <bergner@linux.ibm.com>\n \n \tPR other/92090"}, {"sha": "7bca12489555e1ad6ffd1e3704bf847a68b13d8b", "filename": "gcc/testsuite/g++.dg/cpp1z/utf8-neg.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c03d73667df53165834e9bcb5d09243db414ec3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Futf8-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c03d73667df53165834e9bcb5d09243db414ec3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Futf8-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Futf8-neg.C?ref=2c03d73667df53165834e9bcb5d09243db414ec3", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile { target c++17 } } */\n \n const static char c0 = u8'';\t\t// { dg-error \"empty character\" }\n-const static char c1 = u8'ab';  \t// { dg-warning \"multi-character character constant\" }\n-const static char c2 = u8'\\u0124';\t// { dg-warning \"multi-character character constant\" }\n-const static char c3 = u8'\\U00064321';  // { dg-warning \"multi-character character constant\" }\n+const static char c1 = u8'ab';  \t// { dg-error \"character constant too long for its type\" }\n+const static char c2 = u8'\\u0124';\t// { dg-error \"character constant too long for its type\" }\n+const static char c3 = u8'\\U00064321';  // { dg-error \"character constant too long for its type\" }"}, {"sha": "2e6ce11d2e771f43a1fdbd389b9f4ce99d11d629", "filename": "gcc/testsuite/g++.dg/cpp2a/ucn2.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c03d73667df53165834e9bcb5d09243db414ec3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fucn2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c03d73667df53165834e9bcb5d09243db414ec3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fucn2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fucn2.C?ref=2c03d73667df53165834e9bcb5d09243db414ec3", "patch": "@@ -0,0 +1,30 @@\n+// P1139R2\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options \"-fchar8_t\" { target c++17_down } }\n+\n+const char16_t *a = u\"\\U0001F914\\u2753\";\n+const char32_t *b = U\"\\U0001F914\\u2753\";\n+const char16_t *c = u\"\\uD802\";\t\t// { dg-error \"is not a valid universal character\" }\n+const char16_t *d = u\"\\U0000DFF0\";\t// { dg-error \"is not a valid universal character\" }\n+const char16_t *e = u\"\\U00110000\";\t// { dg-error \"is outside the UCS codespace\" \"\" { target c++2a } }\n+\t\t\t\t\t// { dg-error \"converting UCN to execution character set\" \"\" { target *-*-* } .-1 }\n+const char32_t *f = U\"\\uD802\";\t\t// { dg-error \"is not a valid universal character\" }\n+const char32_t *g = U\"\\U0000DFF0\";\t// { dg-error \"is not a valid universal character\" }\n+const char32_t *h = U\"\\U00110001\";\t// { dg-error \"is outside the UCS codespace\" \"\" { target c++2a } }\n+#if __cpp_unicode_characters >= 201411\n+const char8_t i = u8'\\u00C0';\t\t// { dg-error \"character constant too long for its type\" \"\" { target c++17 } }\n+#endif\n+const char16_t j = u'\\U0001F914';\t// { dg-error \"character constant too long for its type\" }\n+const char32_t k = U'\\U0001F914';\n+#if __cpp_unicode_characters >= 201411\n+const char8_t l = u8'ab';\t\t// { dg-error \"character constant too long for its type\" \"\" { target c++17 } }\n+#endif\n+const char16_t m = u'ab';\t\t// { dg-error \"character constant too long for its type\" }\n+const char32_t n = U'ab';\t\t// { dg-error \"character constant too long for its type\" }\n+#if __cpp_unicode_characters >= 201411\n+const char8_t o = u8'\\U00110002';\t// { dg-error \"is outside the UCS codespace\" \"\" { target c++2a } }\n+\t\t\t\t\t// { dg-error \"character constant too long for its type\" \"\" { target c++17 } .-1 }\n+#endif\n+const char16_t p = u'\\U00110003';\t// { dg-error \"is outside the UCS codespace\" \"\" { target c++2a } }\n+\t\t\t\t\t// { dg-error \"converting UCN to execution character set\" \"\" { target *-*-* } .-1 }\n+const char32_t q = U'\\U00110004';\t// { dg-error \"is outside the UCS codespace\" \"\" { target c++2a } }"}, {"sha": "030e085a82e491e8f99c169aba243c75160e2155", "filename": "gcc/testsuite/g++.dg/ext/utf16-4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c03d73667df53165834e9bcb5d09243db414ec3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf16-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c03d73667df53165834e9bcb5d09243db414ec3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf16-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf16-4.C?ref=2c03d73667df53165834e9bcb5d09243db414ec3", "patch": "@@ -4,8 +4,8 @@\n \n \n const static char16_t\tc0 = u'';\t\t/* { dg-error \"empty character\" } */\n-const static char16_t\tc1 = u'ab';\t\t/* { dg-warning \"constant too long\" } */\n-const static char16_t\tc2 = u'\\U00064321';\t/* { dg-warning \"constant too long\" } */\n+const static char16_t\tc1 = u'ab';\t\t/* { dg-error \"constant too long\" } */\n+const static char16_t\tc2 = u'\\U00064321';\t/* { dg-error \"constant too long\" } */\n \n const static char16_t\tc3 = 'a';\n const static char16_t\tc4 = U'a';"}, {"sha": "96bf0bb2b4a4ec33fe089c6e62e1621bca9c26a9", "filename": "gcc/testsuite/g++.dg/ext/utf32-4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c03d73667df53165834e9bcb5d09243db414ec3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf32-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c03d73667df53165834e9bcb5d09243db414ec3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf32-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf32-4.C?ref=2c03d73667df53165834e9bcb5d09243db414ec3", "patch": "@@ -3,13 +3,13 @@\n /* { dg-do compile { target c++11 } } */\n \n const static char32_t\tc0 = U'';\t\t/* { dg-error \"empty character\" } */\n-const static char32_t\tc1 = U'ab';\t\t/* { dg-warning \"constant too long\" } */\n+const static char32_t\tc1 = U'ab';\t\t/* { dg-error \"constant too long\" } */\n const static char32_t\tc2 = U'\\U00064321';\n \n const static char32_t\tc3 = 'a';\n const static char32_t\tc4 = u'a';\n const static char32_t\tc5 = u'\\u2029';\n-const static char32_t\tc6 = u'\\U00064321';\t/* { dg-warning \"constant too long\" } */\n+const static char32_t\tc6 = u'\\U00064321';\t/* { dg-error \"constant too long\" } */\n const static char32_t\tc7 = L'a';\n const static char32_t\tc8 = L'\\u2029';\n const static char32_t\tc9 = L'\\U00064321';     /* { dg-warning \"constant too long\" \"\" { target { ! 4byte_wchar_t } } } */  "}, {"sha": "b57f26584a150d892f6d03209d69e532d4593729", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c03d73667df53165834e9bcb5d09243db414ec3/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c03d73667df53165834e9bcb5d09243db414ec3/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=2c03d73667df53165834e9bcb5d09243db414ec3", "patch": "@@ -1,3 +1,14 @@\n+2019-11-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/91370 - Implement P1041R4 and P1139R2 - Stronger Unicode reqs\n+\t* charset.c (narrow_str_to_charconst): Add TYPE argument.  For\n+\tCPP_UTF8CHAR diagnose whenever number of chars is > 1, using\n+\tCPP_DL_ERROR instead of CPP_DL_WARNING.\n+\t(wide_str_to_charconst): For CPP_CHAR16 or CPP_CHAR32, use\n+\tCPP_DL_ERROR instead of CPP_DL_WARNING when multiple char16_t\n+\tor char32_t chars are needed.\n+\t(cpp_interpret_charconst): Adjust narrow_str_to_charconst caller.\n+\n 2019-11-05  Tim van Deurzen  <tim@kompiler.org>\n \n \t* cpplib.h: Add spaceship operator for C++."}, {"sha": "0b8815af46bceaadfd7837f7a31befd6371fb29c", "filename": "libcpp/charset.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c03d73667df53165834e9bcb5d09243db414ec3/libcpp%2Fcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c03d73667df53165834e9bcb5d09243db414ec3/libcpp%2Fcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fcharset.c?ref=2c03d73667df53165834e9bcb5d09243db414ec3", "patch": "@@ -1881,10 +1881,11 @@ cpp_interpret_string_notranslate (cpp_reader *pfile, const cpp_string *from,\n /* Subroutine of cpp_interpret_charconst which performs the conversion\n    to a number, for narrow strings.  STR is the string structure returned\n    by cpp_interpret_string.  PCHARS_SEEN and UNSIGNEDP are as for\n-   cpp_interpret_charconst.  */\n+   cpp_interpret_charconst.  TYPE is the token type.  */\n static cppchar_t\n narrow_str_to_charconst (cpp_reader *pfile, cpp_string str,\n-\t\t\t unsigned int *pchars_seen, int *unsignedp)\n+\t\t\t unsigned int *pchars_seen, int *unsignedp,\n+\t\t\t enum cpp_ttype type)\n {\n   size_t width = CPP_OPTION (pfile, char_precision);\n   size_t max_chars = CPP_OPTION (pfile, int_precision) / width;\n@@ -1913,10 +1914,12 @@ narrow_str_to_charconst (cpp_reader *pfile, cpp_string str,\n \tresult = c;\n     }\n \n+  if (type == CPP_UTF8CHAR)\n+    max_chars = 1;\n   if (i > max_chars)\n     {\n       i = max_chars;\n-      cpp_error (pfile, CPP_DL_WARNING,\n+      cpp_error (pfile, type == CPP_UTF8CHAR ? CPP_DL_ERROR : CPP_DL_WARNING,\n \t\t \"character constant too long for its type\");\n     }\n   else if (i > 1 && CPP_OPTION (pfile, warn_multichar))\n@@ -1980,7 +1983,9 @@ wide_str_to_charconst (cpp_reader *pfile, cpp_string str,\n      character exactly fills a wchar_t, so a multi-character wide\n      character constant is guaranteed to overflow.  */\n   if (str.len > nbwc * 2)\n-    cpp_error (pfile, CPP_DL_WARNING,\n+    cpp_error (pfile, (CPP_OPTION (pfile, cplusplus)\n+\t\t       && (type == CPP_CHAR16 || type == CPP_CHAR32))\n+\t\t      ? CPP_DL_ERROR : CPP_DL_WARNING,\n \t       \"character constant too long for its type\");\n \n   /* Truncate the constant to its natural width, and simultaneously\n@@ -2038,7 +2043,8 @@ cpp_interpret_charconst (cpp_reader *pfile, const cpp_token *token,\n     result = wide_str_to_charconst (pfile, str, pchars_seen, unsignedp,\n \t\t\t\t    token->type);\n   else\n-    result = narrow_str_to_charconst (pfile, str, pchars_seen, unsignedp);\n+    result = narrow_str_to_charconst (pfile, str, pchars_seen, unsignedp,\n+\t\t\t\t      token->type);\n \n   if (str.text != token->val.str.text)\n     free ((void *)str.text);"}]}