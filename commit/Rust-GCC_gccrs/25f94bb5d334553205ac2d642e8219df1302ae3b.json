{"sha": "25f94bb5d334553205ac2d642e8219df1302ae3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVmOTRiYjVkMzM0NTUzMjA1YWMyZDY0MmU4MjE5ZGYxMzAyYWUzYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-03-09T16:40:43Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-03-09T16:40:43Z"}, "message": "i386.h (MASK_64BIT): New constant.\n\n\t* i386.h (MASK_64BIT): New constant.\n\t(TARGET_64BIT): New macro.\n\t(TARGET_OPTIONS): Add '64'/'32'\n\t(TARGET_DEFAULT): Define.\n\t* cygwin.h freebsd-aout.h i386-interix.h i386.h i386elf.h isc.h isccoff.h\n\tnetbsd.h next.h openbsd.h p sco.h sco5.h scodbx.h sequent.h unix.h win32.h\n\t(TARGET_DEFAULT): Rename to TARGET_SUBTARGET_DEFAULT.\n\nFrom-SVN: r40345", "tree": {"sha": "0da13c8365fe9ef3f9d6d3ba9bada75899c61167", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0da13c8365fe9ef3f9d6d3ba9bada75899c61167"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25f94bb5d334553205ac2d642e8219df1302ae3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25f94bb5d334553205ac2d642e8219df1302ae3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25f94bb5d334553205ac2d642e8219df1302ae3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25f94bb5d334553205ac2d642e8219df1302ae3b/comments", "author": null, "committer": null, "parents": [{"sha": "b891e06c45b76efcc5337f56ecb2c2345cc6a482", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b891e06c45b76efcc5337f56ecb2c2345cc6a482", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b891e06c45b76efcc5337f56ecb2c2345cc6a482"}], "stats": {"total": 76, "additions": 50, "deletions": 26}, "files": [{"sha": "0d3a530b08b77be78ff52094de328978555a33bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f94bb5d334553205ac2d642e8219df1302ae3b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f94bb5d334553205ac2d642e8219df1302ae3b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25f94bb5d334553205ac2d642e8219df1302ae3b", "patch": "@@ -1,3 +1,13 @@\n+Fri Mar  9 17:38:08 CET 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.h (mask_64bit): New constant.\n+\t(target_64bit): New macro.\n+\t(target_options): Add '64'/'32'\n+\t(target_default): Define.\n+\t* cygwin.h freebsd-aout.h i386-interix.h i386.h i386elf.h isc.h\n+\tisccoff.h netbsd.h next.h openbsd.h p sco.h sco5.h scodbx.h sequent.h\n+\tunix.h win32.h (TARGET_DEFAULT): Rename to TARGET_SUBTARGET_DEFAULT.\n+\n Thu Mar  8 23:36:56 2001  Jeffrey A Law  (law@cygnus.com)\n \n \t* config/pa/som.h (MAKE_DECL_ONE_ONLY, ASM_WEAKEN_LABEL): Disable."}, {"sha": "3dc30354bdee34b0ff2f798d3e91caab5a743f7c", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f94bb5d334553205ac2d642e8219df1302ae3b/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f94bb5d334553205ac2d642e8219df1302ae3b/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=25f94bb5d334553205ac2d642e8219df1302ae3b", "patch": "@@ -391,9 +391,9 @@ do {\t\t\t\t\t\t\t\\\n \n /* By default, target has a 80387, uses IEEE compatible arithmetic,\n    and returns float values in the 387 and needs stack probes */\n-#undef TARGET_DEFAULT\n+#undef TARGET_SUBTARGET_DEFAULT\n \n-#define TARGET_DEFAULT \\\n+#define TARGET_SUBTARGET_DEFAULT \\\n    (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_STACK_PROBE) \n \n /* This is how to output an assembler line"}, {"sha": "0a86ac2a56e0e825ae4a6bba54e4e8794c5482a7", "filename": "gcc/config/i386/freebsd-aout.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f94bb5d334553205ac2d642e8219df1302ae3b/gcc%2Fconfig%2Fi386%2Ffreebsd-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f94bb5d334553205ac2d642e8219df1302ae3b/gcc%2Fconfig%2Fi386%2Ffreebsd-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffreebsd-aout.h?ref=25f94bb5d334553205ac2d642e8219df1302ae3b", "patch": "@@ -30,8 +30,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"i386/gstabs.h\"\n \n /* This goes away when the math-emulator is fixed */\n-#undef TARGET_DEFAULT\n-#define TARGET_DEFAULT \\\n+#undef TARGET_SUBTARGET_DEFAULT\n+#define TARGET_SUBTARGET_DEFAULT \\\n   (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_NO_FANCY_MATH_387)\n \n #undef CPP_PREDEFINES"}, {"sha": "aa452453e6ab6fc56c3f7ecd8b8e29a9ae1d0b78", "filename": "gcc/config/i386/i386-interix.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f94bb5d334553205ac2d642e8219df1302ae3b/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f94bb5d334553205ac2d642e8219df1302ae3b/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-interix.h?ref=25f94bb5d334553205ac2d642e8219df1302ae3b", "patch": "@@ -40,8 +40,8 @@ Boston, MA 02111-1307, USA.  */\n /* By default, target has a 80387, uses IEEE compatible arithmetic,\n    and returns float values in the 387 and needs stack probes\n    We also align doubles to 64-bits for MSVC default compatability */\n-#undef TARGET_DEFAULT\n-#define TARGET_DEFAULT \\\n+#undef TARGET_SUBTARGET_DEFAULT\n+#define TARGET_SUBTARGET_DEFAULT \\\n    (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_STACK_PROBE | \\\n     MASK_ALIGN_DOUBLE)\n "}, {"sha": "9da78c72b2748a385e4610ffd830a4fba52f7e99", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f94bb5d334553205ac2d642e8219df1302ae3b/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f94bb5d334553205ac2d642e8219df1302ae3b/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=25f94bb5d334553205ac2d642e8219df1302ae3b", "patch": "@@ -119,6 +119,7 @@ extern int target_flags;\n #define MASK_SSE2\t\t0x00040000\t/* Support SSE2 regs/builtins */\n #define MASK_128BIT_LONG_DOUBLE 0x00080000\t/* long double size is 128bit */\n #define MASK_MIX_SSE_I387\t0x00100000\t/* Mix SSE and i387 instructions */\n+#define MASK_64BIT\t\t0x00200000\t/* Produce 64bit code */\n \n /* Temporary codegen switches */\n #define MASK_INTEL_SYNTAX\t0x00000200\n@@ -178,6 +179,9 @@ extern int target_flags;\n /* Debug FUNCTION_ARG macros */\n #define TARGET_DEBUG_ARG (target_flags & MASK_DEBUG_ARG)\n \n+/* 64bit Sledgehammer mode */\n+#define TARGET_64BIT (target_flags & MASK_64BIT)\n+\n #define TARGET_386 (ix86_cpu == PROCESSOR_I386)\n #define TARGET_486 (ix86_cpu == PROCESSOR_I486)\n #define TARGET_PENTIUM (ix86_cpu == PROCESSOR_PENTIUM)\n@@ -330,9 +334,19 @@ extern const int x86_partial_reg_dependency, x86_memory_mismatch_stall;\n     N_(\"sizeof(long double) is 16.\") },\t\t\t\t\t      \\\n   { \"96bit-long-double\",\t-MASK_128BIT_LONG_DOUBLE,\t\t      \\\n     N_(\"sizeof(long double) is 12.\") },\t\t\t\t\t      \\\n+  { \"64\",\t\t\tMASK_64BIT,\t\t\t\t      \\\n+    N_(\"Generate 64bit x86-64 code\") },\t\t\t\t\t      \\\n+  { \"32\",\t\t\t-MASK_64BIT,\t\t\t\t      \\\n+    N_(\"Generate 32bit i386 code\") },\t\t\t\t\t      \\\n   SUBTARGET_SWITCHES\t\t\t\t\t\t\t      \\\n   { \"\", TARGET_DEFAULT, 0 }}\n \n+#ifdef TARGET_64BIT_DEFAULT\n+#define TARGET_DEFAULT (MASK_64BIT | TARGET_SUBTARGET_DEFAULT)\n+#else\n+#define TARGET_DEFAULT TARGET_SUBTARGET_DEFAULT\n+#endif\n+\n /* Which processor to schedule for. The cpu attribute defines a list that\n    mirrors this list, so changes to i386.md must be made at the same time.  */\n "}, {"sha": "904446aeee9ffb64b3dc6b3a43c4297a924c5cbe", "filename": "gcc/config/i386/i386elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f94bb5d334553205ac2d642e8219df1302ae3b/gcc%2Fconfig%2Fi386%2Fi386elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f94bb5d334553205ac2d642e8219df1302ae3b/gcc%2Fconfig%2Fi386%2Fi386elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386elf.h?ref=25f94bb5d334553205ac2d642e8219df1302ae3b", "patch": "@@ -29,7 +29,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n /* By default, target has a 80387, uses IEEE compatible arithmetic,\n    and returns float values in the 387.  */\n \n-#define TARGET_DEFAULT (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS)\n+#define TARGET_SUBTARGET_DEFAULT (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS)\n \n /* The ELF ABI for the i386 says that records and unions are returned\n    in memory.  */"}, {"sha": "c07aa066495d3c46a8f24a6cae96c7f588210af7", "filename": "gcc/config/i386/isc.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f94bb5d334553205ac2d642e8219df1302ae3b/gcc%2Fconfig%2Fi386%2Fisc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f94bb5d334553205ac2d642e8219df1302ae3b/gcc%2Fconfig%2Fi386%2Fisc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fisc.h?ref=25f94bb5d334553205ac2d642e8219df1302ae3b", "patch": "@@ -58,8 +58,8 @@\n    opcode.  fucomp is only used when generating IEEE compliant code.\n    So don't make TARGET_IEEE_FP default for ISC. */\n \n-#undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_80387 | MASK_FLOAT_RETURNS)\n+#undef TARGET_SUBTARGET_DEFAULT\n+#define TARGET_SUBTARGET_DEFAULT (MASK_80387 | MASK_FLOAT_RETURNS)\n \n /* The ISC 2.0.2 software FPU emulator apparently can't handle\n    80-bit XFmode insns, so don't generate them.  */"}, {"sha": "3b5bf9c3e9d9ecc8d7941e21851d1919dcb1d05f", "filename": "gcc/config/i386/netbsd.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f94bb5d334553205ac2d642e8219df1302ae3b/gcc%2Fconfig%2Fi386%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f94bb5d334553205ac2d642e8219df1302ae3b/gcc%2Fconfig%2Fi386%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetbsd.h?ref=25f94bb5d334553205ac2d642e8219df1302ae3b", "patch": "@@ -10,8 +10,8 @@\n #include <netbsd.h>\n \n /* This goes away when the math-emulator is fixed */\n-#undef TARGET_DEFAULT\n-#define TARGET_DEFAULT \\\n+#undef TARGET_SUBTARGET_DEFAULT\n+#define TARGET_SUBTARGET_DEFAULT \\\n   (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_NO_FANCY_MATH_387)\n \n #undef CPP_PREDEFINES"}, {"sha": "0638dffa1733d1c13d7a312862139abb0f148f1a", "filename": "gcc/config/i386/next.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f94bb5d334553205ac2d642e8219df1302ae3b/gcc%2Fconfig%2Fi386%2Fnext.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f94bb5d334553205ac2d642e8219df1302ae3b/gcc%2Fconfig%2Fi386%2Fnext.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnext.h?ref=25f94bb5d334553205ac2d642e8219df1302ae3b", "patch": "@@ -23,8 +23,8 @@ Boston, MA 02111-1307, USA.  */\n \n /* By default, target has a 80387, with IEEE FP.  */\n \n-#undef\tTARGET_DEFAULT\n-#define TARGET_DEFAULT  (MASK_80387 | MASK_IEEE_FP)\n+#undef\tTARGET_SUBTARGET_DEFAULT\n+#define TARGET_SUBTARGET_DEFAULT  (MASK_80387 | MASK_IEEE_FP)\n \n /* Implicit library calls should use memcpy, not bcopy, etc.  */\n "}, {"sha": "b24a94cdc1999cac2d6f47c242634a298fa44a73", "filename": "gcc/config/i386/openbsd.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f94bb5d334553205ac2d642e8219df1302ae3b/gcc%2Fconfig%2Fi386%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f94bb5d334553205ac2d642e8219df1302ae3b/gcc%2Fconfig%2Fi386%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fopenbsd.h?ref=25f94bb5d334553205ac2d642e8219df1302ae3b", "patch": "@@ -31,8 +31,8 @@ Boston, MA 02111-1307, USA.  */\n #include <openbsd.h>\n \n /* This goes away when the math-emulator is fixed */\n-#undef TARGET_DEFAULT\n-#define TARGET_DEFAULT \\\n+#undef TARGET_SUBTARGET_DEFAULT\n+#define TARGET_SUBTARGET_DEFAULT \\\n   (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_NO_FANCY_MATH_387)\n \n /* Run-time target specifications */"}, {"sha": "9a397ed8c1e1905394c3ba70fa8fc1a9ad666c70", "filename": "gcc/config/i386/sco.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f94bb5d334553205ac2d642e8219df1302ae3b/gcc%2Fconfig%2Fi386%2Fsco.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f94bb5d334553205ac2d642e8219df1302ae3b/gcc%2Fconfig%2Fi386%2Fsco.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsco.h?ref=25f94bb5d334553205ac2d642e8219df1302ae3b", "patch": "@@ -31,8 +31,8 @@ Boston, MA 02111-1307, USA.  */\n    opcode.  fucomp is only used when generating IEEE compliant code.\n    So don't make TARGET_IEEE_FP default for SCO. */\n \n-#undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_80387 | MASK_FLOAT_RETURNS)\n+#undef TARGET_SUBTARGET_DEFAULT\n+#define TARGET_SUBTARGET_DEFAULT (MASK_80387 | MASK_FLOAT_RETURNS)\n \n /* Let's guess that the SCO software FPU emulator can't handle\n    80-bit XFmode insns, so don't generate them.  */"}, {"sha": "039b26a80fd564f2bc0fcfd6ee0ff104da271390", "filename": "gcc/config/i386/sco5.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f94bb5d334553205ac2d642e8219df1302ae3b/gcc%2Fconfig%2Fi386%2Fsco5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f94bb5d334553205ac2d642e8219df1302ae3b/gcc%2Fconfig%2Fi386%2Fsco5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsco5.h?ref=25f94bb5d334553205ac2d642e8219df1302ae3b", "patch": "@@ -708,8 +708,8 @@ dtors_section ()\t\t\t\t\t\t\t\\\n   && strcmp (STR, \"Tdata\") && strcmp (STR, \"Ttext\")\t\t\t\\\n   && strcmp (STR, \"Tbss\"))\n \n-#undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS)\n+#undef TARGET_SUBTARGET_DEFAULT\n+#define TARGET_SUBTARGET_DEFAULT (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS)\n \n #undef HANDLE_SYSV_PRAGMA\n #define HANDLE_SYSV_PRAGMA 1"}, {"sha": "17bbfe95f81d26f4ca73ef5aec9fd90e0b7f60ca", "filename": "gcc/config/i386/scodbx.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f94bb5d334553205ac2d642e8219df1302ae3b/gcc%2Fconfig%2Fi386%2Fscodbx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f94bb5d334553205ac2d642e8219df1302ae3b/gcc%2Fconfig%2Fi386%2Fscodbx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fscodbx.h?ref=25f94bb5d334553205ac2d642e8219df1302ae3b", "patch": "@@ -31,8 +31,8 @@ Boston, MA 02111-1307, USA.  */\n    opcode.  fucomp is only used when generating IEEE compliant code.\n    So don't make TARGET_IEEE_FP default for SCO. */\n \n-#undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_80387 | MASK_FLOAT_RETURNS)\n+#undef TARGET_SUBTARGET_DEFAULT\n+#define TARGET_SUBTARGET_DEFAULT (MASK_80387 | MASK_FLOAT_RETURNS)\n \n /* Use crt1.o as a startup file and crtn.o as a closing file.  */\n "}, {"sha": "c8ba852a9a10e0fe6388034d292beec55b40662d", "filename": "gcc/config/i386/sequent.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f94bb5d334553205ac2d642e8219df1302ae3b/gcc%2Fconfig%2Fi386%2Fsequent.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f94bb5d334553205ac2d642e8219df1302ae3b/gcc%2Fconfig%2Fi386%2Fsequent.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsequent.h?ref=25f94bb5d334553205ac2d642e8219df1302ae3b", "patch": "@@ -28,8 +28,8 @@ Boston, MA 02111-1307, USA.  */\n    because the assembler can't handle the fucom insn.\n    Return float values in the 387.  */\n \n-#undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_80387 | MASK_FLOAT_RETURNS)\n+#undef TARGET_SUBTARGET_DEFAULT\n+#define TARGET_SUBTARGET_DEFAULT (MASK_80387 | MASK_FLOAT_RETURNS)\n \n /* Specify predefined symbols in preprocessor.  */\n "}, {"sha": "508d4c89ecead6bb8db83532b62f6515766c27cc", "filename": "gcc/config/i386/unix.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f94bb5d334553205ac2d642e8219df1302ae3b/gcc%2Fconfig%2Fi386%2Funix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f94bb5d334553205ac2d642e8219df1302ae3b/gcc%2Fconfig%2Fi386%2Funix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Funix.h?ref=25f94bb5d334553205ac2d642e8219df1302ae3b", "patch": "@@ -67,7 +67,7 @@ Boston, MA 02111-1307, USA.  */\n /* By default, target has a 80387, uses IEEE compatible arithmetic,\n    and returns float values in the 387.  */\n \n-#define TARGET_DEFAULT (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS)\n+#define TARGET_SUBTARGET_DEFAULT (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS)\n \n /* Floating-point return values come in the FP register.  */\n "}, {"sha": "36707f040fffa270b3d4720d87cc5628006342b7", "filename": "gcc/config/i386/win32.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f94bb5d334553205ac2d642e8219df1302ae3b/gcc%2Fconfig%2Fi386%2Fwin32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f94bb5d334553205ac2d642e8219df1302ae3b/gcc%2Fconfig%2Fi386%2Fwin32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwin32.h?ref=25f94bb5d334553205ac2d642e8219df1302ae3b", "patch": "@@ -214,9 +214,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* By default, target has a 80387, uses IEEE compatible arithmetic,\n    and returns float values in the 387 and needs stack probes */\n-#undef TARGET_DEFAULT\n+#undef TARGET_SUBTARGET_DEFAULT\n \n-#define TARGET_DEFAULT \\\n+#define TARGET_SUBTARGET_DEFAULT \\\n    (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_STACK_PROBE) \n \n /* This is how to output an assembler line"}]}