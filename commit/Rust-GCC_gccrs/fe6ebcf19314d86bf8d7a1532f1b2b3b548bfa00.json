{"sha": "fe6ebcf19314d86bf8d7a1532f1b2b3b548bfa00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU2ZWJjZjE5MzE0ZDg2YmY4ZDdhMTUzMmYxYjJiM2I1NDhiZmEwMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-06-04T15:51:01Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-06-04T15:51:01Z"}, "message": "re PR c++/51253 ([C++11][DR 1030] Evaluation order (sequenced-before relation) among initializer-clauses in braced-init-list)\n\n\tPR c++/51253\n\tPR c++/61382\ngcc/\n\t* gimplify.c (gimplify_arg): Non-static.\n\t* gimplify.h: Declare it.\ngcc/cp/\n\t* cp-gimplify.c (cp_gimplify_expr): Handle CALL_EXPR_LIST_INIT_P here.\n\t* semantics.c (simplify_aggr_init_expr): Not here, just copy it.\n\nFrom-SVN: r211235", "tree": {"sha": "3b703171163f9b0f85930ac0e96633ca603a07c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b703171163f9b0f85930ac0e96633ca603a07c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe6ebcf19314d86bf8d7a1532f1b2b3b548bfa00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe6ebcf19314d86bf8d7a1532f1b2b3b548bfa00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe6ebcf19314d86bf8d7a1532f1b2b3b548bfa00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe6ebcf19314d86bf8d7a1532f1b2b3b548bfa00/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "38af3208d5385b8b2601599479179888ce7f09a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38af3208d5385b8b2601599479179888ce7f09a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38af3208d5385b8b2601599479179888ce7f09a8"}], "stats": {"total": 71, "additions": 56, "deletions": 15}, "files": [{"sha": "a664baf3ed1793a92788de4788ecb4cd7fcfc7cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe6ebcf19314d86bf8d7a1532f1b2b3b548bfa00/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe6ebcf19314d86bf8d7a1532f1b2b3b548bfa00/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe6ebcf19314d86bf8d7a1532f1b2b3b548bfa00", "patch": "@@ -1,3 +1,10 @@\n+2014-06-04  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/51253\n+\tPR c++/61382\n+\t* gimplify.c (gimplify_arg): Non-static.\n+\t* gimplify.h: Declare it.\n+\n 2014-06-04  Richard Biener  <rguenther@suse.de>\n \n \t* tree.h (may_be_aliased): Trust TREE_ADDRESSABLE from"}, {"sha": "6c501a8d0e2c8b2101f7aefea22fd8fc716909eb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe6ebcf19314d86bf8d7a1532f1b2b3b548bfa00/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe6ebcf19314d86bf8d7a1532f1b2b3b548bfa00/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fe6ebcf19314d86bf8d7a1532f1b2b3b548bfa00", "patch": "@@ -1,3 +1,10 @@\n+2014-06-04  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/51253\n+\tPR c++/61382\n+\t* cp-gimplify.c (cp_gimplify_expr): Handle CALL_EXPR_LIST_INIT_P here.\n+\t* semantics.c (simplify_aggr_init_expr): Not here, just copy it.\n+\n 2014-06-04  Igor Zamyatin  <igor.zamyatin@intel.com>\n \n \tPR c/58942"}, {"sha": "18142bf396ef618d7ee91603dc880c6aab96808b", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe6ebcf19314d86bf8d7a1532f1b2b3b548bfa00/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe6ebcf19314d86bf8d7a1532f1b2b3b548bfa00/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=fe6ebcf19314d86bf8d7a1532f1b2b3b548bfa00", "patch": "@@ -723,6 +723,27 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t  && !seen_error ())\n \treturn (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n \n+      /* DR 1030 says that we need to evaluate the elements of an\n+\t initializer-list in forward order even when it's used as arguments to\n+\t a constructor.  So if the target wants to evaluate them in reverse\n+\t order and there's more than one argument other than 'this', gimplify\n+\t them in order.  */\n+      ret = GS_OK;\n+      if (PUSH_ARGS_REVERSED && CALL_EXPR_LIST_INIT_P (*expr_p)\n+\t  && call_expr_nargs (*expr_p) > 2)\n+\t{\n+\t  int nargs = call_expr_nargs (*expr_p);\n+\t  location_t loc = EXPR_LOC_OR_LOC (*expr_p, input_location);\n+\t  for (int i = 1; i < nargs; ++i)\n+\t    {\n+\t      enum gimplify_status t\n+\t\t= gimplify_arg (&CALL_EXPR_ARG (*expr_p, i), pre_p, loc);\n+\t      if (t == GS_ERROR)\n+\t\tret = GS_ERROR;\n+\t    }\n+\t}\n+      break;\n+\n     default:\n       ret = (enum gimplify_status) c_gimplify_expr (expr_p, pre_p, post_p);\n       break;"}, {"sha": "ca0c34bf6f29dae0e627a2e1377dffd58675e4ea", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe6ebcf19314d86bf8d7a1532f1b2b3b548bfa00/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe6ebcf19314d86bf8d7a1532f1b2b3b548bfa00/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=fe6ebcf19314d86bf8d7a1532f1b2b3b548bfa00", "patch": "@@ -3869,6 +3869,7 @@ simplify_aggr_init_expr (tree *tp)\n \t\t\t\t    aggr_init_expr_nargs (aggr_init_expr),\n \t\t\t\t    AGGR_INIT_EXPR_ARGP (aggr_init_expr));\n   TREE_NOTHROW (call_expr) = TREE_NOTHROW (aggr_init_expr);\n+  CALL_EXPR_LIST_INIT_P (call_expr) = CALL_EXPR_LIST_INIT_P (aggr_init_expr);\n   tree ret = call_expr;\n \n   if (style == ctor)\n@@ -3900,20 +3901,6 @@ simplify_aggr_init_expr (tree *tp)\n       ret = build2 (COMPOUND_EXPR, TREE_TYPE (slot), ret, slot);\n     }\n \n-  /* DR 1030 says that we need to evaluate the elements of an\n-     initializer-list in forward order even when it's used as arguments to\n-     a constructor.  So if the target wants to evaluate them in reverse\n-     order and there's more than one argument other than 'this', force\n-     pre-evaluation.  */\n-  if (PUSH_ARGS_REVERSED && CALL_EXPR_LIST_INIT_P (aggr_init_expr)\n-      && aggr_init_expr_nargs (aggr_init_expr) > 2)\n-    {\n-      tree preinit;\n-      stabilize_call (call_expr, &preinit);\n-      if (preinit)\n-\tret = build2 (COMPOUND_EXPR, TREE_TYPE (ret), preinit, ret);\n-    }\n-\n   if (AGGR_INIT_ZERO_FIRST (aggr_init_expr))\n     {\n       tree init = build_zero_init (type, NULL_TREE,"}, {"sha": "89ae41fb6984e0cee1351ce28a387faa1ea7f195", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe6ebcf19314d86bf8d7a1532f1b2b3b548bfa00/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe6ebcf19314d86bf8d7a1532f1b2b3b548bfa00/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=fe6ebcf19314d86bf8d7a1532f1b2b3b548bfa00", "patch": "@@ -2170,7 +2170,7 @@ maybe_with_size_expr (tree *expr_p)\n    Store any side-effects in PRE_P.  CALL_LOCATION is the location of\n    the CALL_EXPR.  */\n \n-static enum gimplify_status\n+enum gimplify_status\n gimplify_arg (tree *arg_p, gimple_seq *pre_p, location_t call_location)\n {\n   bool (*test) (tree);"}, {"sha": "5085ccfe554cc54f278a9269e0d48c3cb0deed12", "filename": "gcc/gimplify.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe6ebcf19314d86bf8d7a1532f1b2b3b548bfa00/gcc%2Fgimplify.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe6ebcf19314d86bf8d7a1532f1b2b3b548bfa00/gcc%2Fgimplify.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.h?ref=fe6ebcf19314d86bf8d7a1532f1b2b3b548bfa00", "patch": "@@ -77,6 +77,7 @@ extern enum gimplify_status gimplify_expr (tree *, gimple_seq *, gimple_seq *,\n extern void gimplify_type_sizes (tree, gimple_seq *);\n extern void gimplify_one_sizepos (tree *, gimple_seq *);\n extern gimple gimplify_body (tree, bool);\n+extern enum gimplify_status gimplify_arg (tree *, gimple_seq *, location_t);\n extern void gimplify_function_tree (tree);\n extern enum gimplify_status gimplify_va_arg_expr (tree *, gimple_seq *,\n \t\t\t\t\t\t  gimple_seq *);"}, {"sha": "16af47636ad187250c71623edf8d9965b5acd264", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist86.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe6ebcf19314d86bf8d7a1532f1b2b3b548bfa00/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist86.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe6ebcf19314d86bf8d7a1532f1b2b3b548bfa00/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist86.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist86.C?ref=fe6ebcf19314d86bf8d7a1532f1b2b3b548bfa00", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/61382\n+// { dg-do run { target c++11 } }\n+\n+struct A\n+{\n+  int i,j;\n+  A(int i,int j):i(i),j(j){}\n+};\n+\n+extern \"C\" int printf (const char *, ...);\n+\n+int main()\n+{\n+  int i;\n+  A a{i++,i++};\n+  if (a.i != 0 || a.j != 1)\n+    __builtin_abort();\n+}"}]}