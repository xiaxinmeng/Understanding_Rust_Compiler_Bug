{"sha": "6d217c3249d527bb15f4e6153f39ce7e82b01778", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQyMTdjMzI0OWQ1MjdiYjE1ZjRlNjE1M2YzOWNlN2U4MmIwMTc3OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-03-24T20:44:48Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-03-24T20:44:48Z"}, "message": "re PR debug/43293 (Invalid unwind info for i?86 -fpic)\n\n\tPR debug/43293\n\t* target.h (struct gcc_target): Add code_end hook.\n\t* target-def.h (TARGET_ASM_CODE_END): Define to hook_void_void\n\tif not yet defined.\n\t(TARGET_ASM_OUT): Add TARGET_ASM_CODE_END.\n\t* toplev.c (compile_file): Call targetm.asm_out.code_end\n\thook before unwind info/debug info output.\n\t* config/i386/winnt.c (i386_pe_file_end): Don't call ix86_file_end.\n\t* config/i386/linux.h (NEED_INDICATE_EXEC_STACK): Don't define.\n\t(TARGET_ASM_FILE_END): Define to file_end_indicate_exec_stack.\n\t* config/i386/linux64.h (NEED_INDICATE_EXEC_STACK): Don't define.\n\t(TARGET_ASM_FILE_END): Define to file_end_indicate_exec_stack.\n\t* config/i386/i386.c (ix86_file_end): Renamed to...\n\t(ix86_code_end): ... this.  Make static.  Don't call\n\tfile_end_indicate_exec_stack.  Emit unwind info using\n\tfinal_start_function/final_end_function.\n\t(darwin_x86_file_end): Remove.\n\t(TARGET_ASM_CODE_END): Define.\n\t* config/i386/i386.h (TARGET_ASM_FILE_END,\n\tNEED_INDICATE_EXEC_STACK): Don't define.\n\t* config/i386/darwin.h (darwin_x86_file_end): Remove prototype.\n\t(TARGET_ASM_FILE_END): Define to darwin_file_end.\n\t* config/i386/i386-protos.h (ix86_file_end): Remove prototype.\n\t* doc/tm.texi (TARGET_ASM_CODE_END): Document.\n\nFrom-SVN: r157707", "tree": {"sha": "38ab18bcefc3a4d40156011bab09d1a86a4a0d59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38ab18bcefc3a4d40156011bab09d1a86a4a0d59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d217c3249d527bb15f4e6153f39ce7e82b01778", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d217c3249d527bb15f4e6153f39ce7e82b01778", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d217c3249d527bb15f4e6153f39ce7e82b01778", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d217c3249d527bb15f4e6153f39ce7e82b01778/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "81ef7e2403b3d6025205e253c87fc3f50828b941", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81ef7e2403b3d6025205e253c87fc3f50828b941", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81ef7e2403b3d6025205e253c87fc3f50828b941"}], "stats": {"total": 131, "additions": 81, "deletions": 50}, "files": [{"sha": "e6d05fe1671fcb59622c835357109fde3e9e132d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d217c3249d527bb15f4e6153f39ce7e82b01778/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d217c3249d527bb15f4e6153f39ce7e82b01778/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d217c3249d527bb15f4e6153f39ce7e82b01778", "patch": "@@ -1,5 +1,30 @@\n 2010-03-24  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR debug/43293\n+\t* target.h (struct gcc_target): Add code_end hook.\n+\t* target-def.h (TARGET_ASM_CODE_END): Define to hook_void_void\n+\tif not yet defined.\n+\t(TARGET_ASM_OUT): Add TARGET_ASM_CODE_END.\n+\t* toplev.c (compile_file): Call targetm.asm_out.code_end\n+\thook before unwind info/debug info output.\n+\t* config/i386/winnt.c (i386_pe_file_end): Don't call ix86_file_end.\n+\t* config/i386/linux.h (NEED_INDICATE_EXEC_STACK): Don't define.\n+\t(TARGET_ASM_FILE_END): Define to file_end_indicate_exec_stack.\n+\t* config/i386/linux64.h (NEED_INDICATE_EXEC_STACK): Don't define.\n+\t(TARGET_ASM_FILE_END): Define to file_end_indicate_exec_stack.\n+\t* config/i386/i386.c (ix86_file_end): Renamed to...\n+\t(ix86_code_end): ... this.  Make static.  Don't call\n+\tfile_end_indicate_exec_stack.  Emit unwind info using\n+\tfinal_start_function/final_end_function.\n+\t(darwin_x86_file_end): Remove.\n+\t(TARGET_ASM_CODE_END): Define.\n+\t* config/i386/i386.h (TARGET_ASM_FILE_END,\n+\tNEED_INDICATE_EXEC_STACK): Don't define.\n+\t* config/i386/darwin.h (darwin_x86_file_end): Remove prototype.\n+\t(TARGET_ASM_FILE_END): Define to darwin_file_end.\n+\t* config/i386/i386-protos.h (ix86_file_end): Remove prototype.\n+\t* doc/tm.texi (TARGET_ASM_CODE_END): Document.\n+\n \tPR target/43498\n \t* config/i386/i386.c (x86_output_mi_thunk): Call final_start_function\n \tat the beginning and final_end_function at the end."}, {"sha": "f95d9c9d94d9f0cd360728a0313ba6e03695ce0c", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d217c3249d527bb15f4e6153f39ce7e82b01778/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d217c3249d527bb15f4e6153f39ce7e82b01778/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=6d217c3249d527bb15f4e6153f39ce7e82b01778", "patch": "@@ -1,5 +1,5 @@\n /* Target definitions for x86 running Darwin.\n-   Copyright (C) 2001, 2002, 2004, 2005, 2006, 2007, 2008\n+   Copyright (C) 2001, 2002, 2004, 2005, 2006, 2007, 2008, 2010\n    Free Software Foundation, Inc.\n    Contributed by Apple Computer Inc.\n \n@@ -141,9 +141,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #define SHIFT_DOUBLE_OMITS_COUNT 0\n \n-extern void darwin_x86_file_end (void);\n #undef TARGET_ASM_FILE_END\n-#define TARGET_ASM_FILE_END darwin_x86_file_end\n+#define TARGET_ASM_FILE_END darwin_file_end\n \n /* Define the syntax of pseudo-ops, labels and comments.  */\n "}, {"sha": "d0dd8ca7f902f5ad4cf4a72d9d8c8cf372ecf754", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d217c3249d527bb15f4e6153f39ce7e82b01778/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d217c3249d527bb15f4e6153f39ce7e82b01778/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=6d217c3249d527bb15f4e6153f39ce7e82b01778", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GCC for IA-32.\n    Copyright (C) 1988, 1992, 1994, 1995, 1996, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -27,7 +27,6 @@ extern void ix86_conditional_register_usage (void);\n extern int ix86_can_use_return_insn_p (void);\n extern void ix86_setup_frame_addresses (void);\n \n-extern void ix86_file_end (void);\n extern HOST_WIDE_INT ix86_initial_elimination_offset (int, int);\n extern void ix86_expand_prologue (void);\n extern void ix86_expand_epilogue (int);"}, {"sha": "da2a981cb1eb2a58eb48aa1b0ccddd47d634bb9b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 25, "deletions": 31, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d217c3249d527bb15f4e6153f39ce7e82b01778/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d217c3249d527bb15f4e6153f39ce7e82b01778/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6d217c3249d527bb15f4e6153f39ce7e82b01778", "patch": "@@ -7580,24 +7580,30 @@ get_pc_thunk_name (char name[32], unsigned int regno)\n /* This function generates code for -fpic that loads %ebx with\n    the return address of the caller and then returns.  */\n \n-void\n-ix86_file_end (void)\n+static void\n+ix86_code_end (void)\n {\n   rtx xops[2];\n   int regno;\n \n   for (regno = 0; regno < 8; ++regno)\n     {\n       char name[32];\n-#ifdef DWARF2_UNWIND_INFO\n-      bool do_cfi;\n-#endif\n+      tree decl;\n \n       if (! ((pic_labels_used >> regno) & 1))\n \tcontinue;\n \n       get_pc_thunk_name (name, regno);\n \n+      decl = build_decl (BUILTINS_LOCATION, FUNCTION_DECL,\n+\t\t\t get_identifier (name),\n+\t\t\t build_function_type (void_type_node, void_list_node));\n+      DECL_RESULT (decl) = build_decl (BUILTINS_LOCATION, RESULT_DECL,\n+\t\t\t\t       NULL_TREE, void_type_node);\n+      TREE_PUBLIC (decl) = 1;\n+      TREE_STATIC (decl) = 1;\n+\n #if TARGET_MACHO\n       if (TARGET_MACHO)\n \t{\n@@ -7613,13 +7619,6 @@ ix86_file_end (void)\n #endif\n       if (USE_HIDDEN_LINKONCE)\n \t{\n-\t  tree decl;\n-\n-\t  decl = build_decl (BUILTINS_LOCATION,\n-\t\t\t     FUNCTION_DECL, get_identifier (name),\n-\t\t\t     error_mark_node);\n-\t  TREE_PUBLIC (decl) = 1;\n-\t  TREE_STATIC (decl) = 1;\n \t  DECL_COMDAT_GROUP (decl) = DECL_ASSEMBLER_NAME (decl);\n \n \t  (*targetm.asm_out.unique_section) (decl, 0);\n@@ -7637,23 +7636,22 @@ ix86_file_end (void)\n \t  ASM_OUTPUT_LABEL (asm_out_file, name);\n \t}\n \n-#ifdef DWARF2_UNWIND_INFO\n-      do_cfi = dwarf2out_do_cfi_asm ();\n-      if (do_cfi)\n-\tfprintf (asm_out_file, \"\\t.cfi_startproc\\n\");\n-#endif\n+      DECL_INITIAL (decl) = make_node (BLOCK);\n+      current_function_decl = decl;\n+      init_function_start (decl);\n+      /* Make sure unwind info is emitted for the thunk if needed.  */\n+      final_start_function (emit_barrier (), asm_out_file, 1);\n+\n       xops[0] = gen_rtx_REG (Pmode, regno);\n       xops[1] = gen_rtx_MEM (Pmode, stack_pointer_rtx);\n       output_asm_insn (\"mov%z0\\t{%1, %0|%0, %1}\", xops);\n       output_asm_insn (\"ret\", xops);\n-#ifdef DWARF2_UNWIND_INFO\n-      if (do_cfi)\n-\tfprintf (asm_out_file, \"\\t.cfi_endproc\\n\");\n-#endif\n+      final_end_function ();\n+      init_insn_lengths ();\n+      free_after_compilation (cfun);\n+      set_cfun (NULL);\n+      current_function_decl = NULL;\n     }\n-\n-  if (NEED_INDICATE_EXEC_STACK)\n-    file_end_indicate_exec_stack ();\n }\n \n /* Emit code for the SET_GOT patterns.  */\n@@ -25938,13 +25936,6 @@ machopic_output_stub (FILE *file, const char *symb, const char *stub)\n   fprintf (file, \"\\t.indirect_symbol %s\\n\", symbol_name);\n   fprintf (file, ASM_LONG \"%s\\n\", binder_name);\n }\n-\n-void\n-darwin_x86_file_end (void)\n-{\n-  darwin_file_end ();\n-  ix86_file_end ();\n-}\n #endif /* TARGET_MACHO */\n \n /* Order the registers for register allocator.  */\n@@ -30550,6 +30541,9 @@ ix86_enum_va_list (int idx, const char **pname, tree *ptree)\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE ix86_can_eliminate\n \n+#undef TARGET_ASM_CODE_END\n+#define TARGET_ASM_CODE_END ix86_code_end\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n #include \"gt-i386.h\""}, {"sha": "0f133593ad8ca389b3bbced5289154ab26d8722c", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d217c3249d527bb15f4e6153f39ce7e82b01778/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d217c3249d527bb15f4e6153f39ce7e82b01778/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=6d217c3249d527bb15f4e6153f39ce7e82b01778", "patch": "@@ -1627,9 +1627,6 @@ typedef struct ix86_args {\n #define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n   function_arg (&(CUM), (MODE), (TYPE), (NAMED))\n \n-#define TARGET_ASM_FILE_END ix86_file_end\n-#define NEED_INDICATE_EXEC_STACK 0\n-\n /* Output assembler code to FILE to increment profiler label # LABELNO\n    for profiling a function entry.  */\n "}, {"sha": "2a31880e6d6c996595c22ee3f6d5159f20872f6f", "filename": "gcc/config/i386/linux.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d217c3249d527bb15f4e6153f39ce7e82b01778/gcc%2Fconfig%2Fi386%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d217c3249d527bb15f4e6153f39ce7e82b01778/gcc%2Fconfig%2Fi386%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux.h?ref=6d217c3249d527bb15f4e6153f39ce7e82b01778", "patch": "@@ -1,6 +1,6 @@\n /* Definitions for Intel 386 running Linux-based GNU systems with ELF format.\n    Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2001, 2002, 2004, 2005,\n-   2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n+   2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Eric Youngdale.\n    Modified for stabs-in-ELF by H.J. Lu.\n \n@@ -202,8 +202,7 @@ along with GCC; see the file COPYING3.  If not see\n #define LIBGCC2_TF_CEXT q\n #define TF_SIZE 113\n \n-#undef NEED_INDICATE_EXEC_STACK\n-#define NEED_INDICATE_EXEC_STACK 1\n+#define TARGET_ASM_FILE_END file_end_indicate_exec_stack\n \n #define MD_UNWIND_SUPPORT \"config/i386/linux-unwind.h\"\n "}, {"sha": "867de59a5ecefeb4c65fd8c8dfecadc30d8fac8b", "filename": "gcc/config/i386/linux64.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d217c3249d527bb15f4e6153f39ce7e82b01778/gcc%2Fconfig%2Fi386%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d217c3249d527bb15f4e6153f39ce7e82b01778/gcc%2Fconfig%2Fi386%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux64.h?ref=6d217c3249d527bb15f4e6153f39ce7e82b01778", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for AMD x86-64 running Linux-based GNU systems with ELF format.\n-   Copyright (C) 2001, 2002, 2004, 2005, 2006, 2007, 2008, 2009\n+   Copyright (C) 2001, 2002, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n    Contributed by Jan Hubicka <jh@suse.cz>, based on linux.h.\n \n@@ -105,8 +105,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define LIBGCC2_TF_CEXT q\n #define TF_SIZE 113\n \n-#undef NEED_INDICATE_EXEC_STACK\n-#define NEED_INDICATE_EXEC_STACK 1\n+#define TARGET_ASM_FILE_END file_end_indicate_exec_stack\n \n #define MD_UNWIND_SUPPORT \"config/i386/linux-unwind.h\"\n "}, {"sha": "725f3a168b3cefa21bdb6c3456285dcf70f7c8dd", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d217c3249d527bb15f4e6153f39ce7e82b01778/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d217c3249d527bb15f4e6153f39ce7e82b01778/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=6d217c3249d527bb15f4e6153f39ce7e82b01778", "patch": "@@ -1,7 +1,7 @@\n /* Subroutines for insn-output.c for Windows NT.\n    Contributed by Douglas Rupp (drupp@cs.washington.edu)\n    Copyright (C) 1995, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-   2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n+   2005, 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -670,8 +670,6 @@ i386_pe_file_end (void)\n {\n   struct extern_list *p;\n \n-  ix86_file_end ();\n-\n   for (p = extern_head; p != NULL; p = p->next)\n     {\n       tree decl;"}, {"sha": "a9822ab036e4def4fc6d46e6f824a2101829bdf2", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d217c3249d527bb15f4e6153f39ce7e82b01778/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d217c3249d527bb15f4e6153f39ce7e82b01778/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=6d217c3249d527bb15f4e6153f39ce7e82b01778", "patch": "@@ -7137,6 +7137,14 @@ need to do other things in that hook, have your hook function call\n this function.\n @end deftypefun\n \n+@deftypefn {Target Hook} void TARGET_ASM_CODE_END (void)\n+Output to @code{asm_out_file} any text which is needed before emitting\n+unwind info and debug info at the end of a file.  Some targets emit\n+here PIC setup thunks that cannot be emitted at the end of file,\n+because they couldn't have unwind info then.  The default is to output\n+nothing.\n+@end deftypefn\n+\n @defmac ASM_COMMENT_START\n A C string constant describing how to begin a comment in the target\n assembler language.  The compiler assumes that the comment will end at"}, {"sha": "a3c0b2c13a53fa7bd4a1f4e880e28692551657fc", "filename": "gcc/target-def.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d217c3249d527bb15f4e6153f39ce7e82b01778/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d217c3249d527bb15f4e6153f39ce7e82b01778/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=6d217c3249d527bb15f4e6153f39ce7e82b01778", "patch": "@@ -1,5 +1,5 @@\n /* Default initializers for a generic GCC target.\n-   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n    This program is free software; you can redistribute it and/or modify it\n@@ -204,6 +204,10 @@\n #define TARGET_ASM_FILE_END hook_void_void\n #endif\n \n+#ifndef TARGET_ASM_CODE_END\n+#define TARGET_ASM_CODE_END hook_void_void\n+#endif\n+\n #ifndef TARGET_EXTRA_LIVE_ON_ENTRY\n #define TARGET_EXTRA_LIVE_ON_ENTRY hook_void_bitmap\n #endif\n@@ -292,6 +296,7 @@\n                         TARGET_ASM_CAN_OUTPUT_MI_THUNK,         \\\n                         TARGET_ASM_FILE_START,                  \\\n                         TARGET_ASM_FILE_END,\t\t\t\\\n+                        TARGET_ASM_CODE_END,\t\t\t\\\n \t\t\tTARGET_ASM_EXTERNAL_LIBCALL,            \\\n                         TARGET_ASM_MARK_DECL_PRESERVED,\t\t\\\n \t\t\tTARGET_ASM_RECORD_GCC_SWITCHES,\t\t\\"}, {"sha": "645bd0adeec79571c7c96b87db060131783040b0", "filename": "gcc/target.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d217c3249d527bb15f4e6153f39ce7e82b01778/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d217c3249d527bb15f4e6153f39ce7e82b01778/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=6d217c3249d527bb15f4e6153f39ce7e82b01778", "patch": "@@ -1,5 +1,5 @@\n /* Data structure definitions for a generic GCC target.\n-   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n    This program is free software; you can redistribute it and/or modify it\n@@ -235,6 +235,10 @@ struct gcc_target\n        translation unit.  */\n     void (*file_end) (void);\n \n+    /* Output any boilerplace text needed at the end of a\n+       translation unit before debug and unwind info is emitted.  */\n+    void (*code_end) (void);\n+\n     /* Output an assembler pseudo-op to declare a library function name\n        external.  */\n     void (*external_libcall) (rtx);"}, {"sha": "fb3c4b2606380e6a905363bc1e54c87319e63f90", "filename": "gcc/toplev.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d217c3249d527bb15f4e6153f39ce7e82b01778/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d217c3249d527bb15f4e6153f39ce7e82b01778/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=6d217c3249d527bb15f4e6153f39ce7e82b01778", "patch": "@@ -1084,6 +1084,10 @@ compile_file (void)\n   /* Write out any pending weak symbol declarations.  */\n   weak_finish ();\n \n+  /* This must be at the end before unwind and debug info.\n+     Some target ports emit PIC setup thunks here.  */\n+  targetm.asm_out.code_end ();\n+\n   /* Do dbx symbols.  */\n   timevar_push (TV_SYMOUT);\n "}]}