{"sha": "d91480dee934478063fe5945b73ff3c108e40a91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkxNDgwZGVlOTM0NDc4MDYzZmU1OTQ1YjczZmYzYzEwOGU0MGE5MQ==", "commit": {"author": {"name": "Duan bo", "email": "duanbo3@huawei.com", "date": "2020-03-18T10:18:39Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-03-18T11:50:04Z"}, "message": "aarch64: Fix SYMBOL_TINY_GOT handling for ILP32 [PR94201]\n\nThe SYMBOL_TINY_GOT case in aarch64_load_symref_appropriately was\nmissing support for ILP32.  This caused an ICE on the testcase.\n\n2020-03-18  Duan bo  <duanbo3@huawei.com>\n\ngcc/\n\tPR target/94201\n\t* config/aarch64/aarch64.md (ldr_got_tiny): Delete.\n\t(@ldr_got_tiny_<mode>): New pattern.\n\t(ldr_got_tiny_sidi): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_load_symref_appropriately): Use\n\tthem to handle SYMBOL_TINY_GOT for ILP32.\n\ngcc/testsuite/\n\tPR target/94201\n\t* gcc.target/aarch64/pr94201.c\uff1aNew test.", "tree": {"sha": "43a863f30f27e06acdd2724d2c135263e646891f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43a863f30f27e06acdd2724d2c135263e646891f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d91480dee934478063fe5945b73ff3c108e40a91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d91480dee934478063fe5945b73ff3c108e40a91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d91480dee934478063fe5945b73ff3c108e40a91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d91480dee934478063fe5945b73ff3c108e40a91/comments", "author": null, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb26919c857f002fc17f7c478e7c8f0eb2a7c9b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb26919c857f002fc17f7c478e7c8f0eb2a7c9b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb26919c857f002fc17f7c478e7c8f0eb2a7c9b2"}], "stats": {"total": 66, "additions": 58, "deletions": 8}, "files": [{"sha": "5eb23b5703797e6dce68d16c8e82048ac7e22d90", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91480dee934478063fe5945b73ff3c108e40a91/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91480dee934478063fe5945b73ff3c108e40a91/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d91480dee934478063fe5945b73ff3c108e40a91", "patch": "@@ -1,3 +1,12 @@\n+2020-03-18  Duan bo  <duanbo3@huawei.com>\n+\n+\tPR target/94201\n+\t* config/aarch64/aarch64.md (ldr_got_tiny): Delete.\n+\t(@ldr_got_tiny_<mode>): New pattern.\n+\t(ldr_got_tiny_sidi): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_load_symref_appropriately): Use\n+\tthem to handle SYMBOL_TINY_GOT for ILP32.\n+\n 2020-03-18  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_sve_abi): Treat p12-p15 as"}, {"sha": "c90de65de127992cc0bd9603a32684ebb5bd4fdf", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91480dee934478063fe5945b73ff3c108e40a91/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91480dee934478063fe5945b73ff3c108e40a91/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=d91480dee934478063fe5945b73ff3c108e40a91", "patch": "@@ -2739,8 +2739,21 @@ aarch64_load_symref_appropriately (rtx dest, rtx imm,\n       }\n \n     case SYMBOL_TINY_GOT:\n-      emit_insn (gen_ldr_got_tiny (dest, imm));\n-      return;\n+      {\n+\trtx insn;\n+\tmachine_mode mode = GET_MODE (dest);\n+\n+\tif (mode == ptr_mode)\n+\t  insn = gen_ldr_got_tiny (mode, dest, imm);\n+\telse\n+\t  {\n+\t    gcc_assert (mode == Pmode);\n+\t    insn = gen_ldr_got_tiny_sidi (dest, imm);\n+\t  }\n+\n+\temit_insn (insn);\n+\treturn;\n+      }\n \n     case SYMBOL_TINY_TLSIE:\n       {"}, {"sha": "c7c4d1dd519af6c9df03ba74e7b6ade5f122b4d8", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91480dee934478063fe5945b73ff3c108e40a91/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91480dee934478063fe5945b73ff3c108e40a91/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=d91480dee934478063fe5945b73ff3c108e40a91", "patch": "@@ -6766,13 +6766,23 @@\n   [(set_attr \"type\" \"load_4\")]\n )\n \n-(define_insn \"ldr_got_tiny\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(unspec:DI [(match_operand:DI 1 \"aarch64_valid_symref\" \"S\")]\n-\t\t   UNSPEC_GOTTINYPIC))]\n+(define_insn \"@ldr_got_tiny_<mode>\"\n+  [(set (match_operand:PTR 0 \"register_operand\" \"=r\")\n+\t(unspec:PTR [(match_operand:PTR 1 \"aarch64_valid_symref\" \"S\")]\n+\t\t    UNSPEC_GOTTINYPIC))]\n   \"\"\n-  \"ldr\\\\t%0, %L1\"\n-  [(set_attr \"type\" \"load_8\")]\n+  \"ldr\\t%<w>0, %L1\"\n+  [(set_attr \"type\" \"load_<ldst_sz>\")]\n+)\n+\n+(define_insn \"ldr_got_tiny_sidi\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (unspec:SI [(match_operand:DI 1 \"aarch64_valid_symref\" \"S\")]\n+\t\t     UNSPEC_GOTTINYPIC)))]\n+  \"TARGET_ILP32\"\n+  \"ldr\\t%w0, %L1\"\n+  [(set_attr \"type\" \"load_4\")]\n )\n \n (define_insn \"aarch64_load_tp_hard\""}, {"sha": "e8b78df02def2800befd89e9f758d734a5d873e0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91480dee934478063fe5945b73ff3c108e40a91/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91480dee934478063fe5945b73ff3c108e40a91/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d91480dee934478063fe5945b73ff3c108e40a91", "patch": "@@ -1,3 +1,8 @@\n+2020-03-18  Duan bo  <duanbo3@huawei.com>\n+\n+\tPR target/94201\n+\t* gcc.target/aarch64/pr94201.c\uff1aNew test.\n+\n 2020-03-18  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/acle/general/cpy_1.c: Leave gaps for in the"}, {"sha": "691761691868a15e0e53e2340577d02a2b87a24c", "filename": "gcc/testsuite/gcc.target/aarch64/pr94201.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91480dee934478063fe5945b73ff3c108e40a91/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr94201.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91480dee934478063fe5945b73ff3c108e40a91/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr94201.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr94201.c?ref=d91480dee934478063fe5945b73ff3c108e40a91", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmodel=tiny -mabi=ilp32 -fPIC\" } */\n+\n+extern int bar (void *);\n+extern long long a;\n+\n+int\n+foo (void)\n+{\n+  a = 1;\n+  return bar ((void *)bar);\n+}\n+"}]}