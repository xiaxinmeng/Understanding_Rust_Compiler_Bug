{"sha": "3e406d3330ca865244cd867572cdd02627a8757a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U0MDZkMzMzMGNhODY1MjQ0Y2Q4Njc1NzJjZGQwMjYyN2E4NzU3YQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2017-11-23T00:04:07Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-11-23T00:04:07Z"}, "message": "gimple-ssa-evrp-analyze.c (evrp_range_analyzer::try_find_new_range): Use new method allocate_value_range rather than accessing the...\n\n\t* gimple-ssa-evrp-analyze.c (evrp_range_analyzer::try_find_new_range):\n\tUse new method allocate_value_range rather than accessing the\n\tvrp_value_range_pool data member directly.\n\t* tree-vrp.c (simplify_stmt_for_jump_threading): Tweak slightly\n\tto use extract_range_from_stmt method to avoid need for\n\textract_range_from_assignment method.\n\t(vrp_prop::vrp_finalize): Use set_lattice_propagation_complete\n\tmethod rather than setting values_propgated data member directly.\n\t* vr-values.h (class vr_values): Privatize vrp_value_range_pool,\n\tand values propagated data members and extract_range_from_assignment\n\tmethod.  Reorder private data members to conform to standards.\n\tAdd new methods set_lattice_propagation_complete and\n\tallocate_value_range.\n\nFrom-SVN: r255086", "tree": {"sha": "3dda1b044f1ae730bf711bfbf9af55eafb61a65f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3dda1b044f1ae730bf711bfbf9af55eafb61a65f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e406d3330ca865244cd867572cdd02627a8757a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e406d3330ca865244cd867572cdd02627a8757a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e406d3330ca865244cd867572cdd02627a8757a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e406d3330ca865244cd867572cdd02627a8757a/comments", "author": null, "committer": null, "parents": [{"sha": "d057fdc8e968b701df4e50be2a823f3f9a54e60e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d057fdc8e968b701df4e50be2a823f3f9a54e60e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d057fdc8e968b701df4e50be2a823f3f9a54e60e"}], "stats": {"total": 53, "additions": 41, "deletions": 12}, "files": [{"sha": "8d5ee90ab02bfb89efaa9003a2143dbd47581e68", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e406d3330ca865244cd867572cdd02627a8757a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e406d3330ca865244cd867572cdd02627a8757a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e406d3330ca865244cd867572cdd02627a8757a", "patch": "@@ -1,3 +1,19 @@\n+2017-11-22  Jeff Law  <law@redhat.com>\n+\n+\t* gimple-ssa-evrp-analyze.c (evrp_range_analyzer::try_find_new_range):\n+\tUse new method allocate_value_range rather than accessing the\n+\tvrp_value_range_pool data member directly.\n+\t* tree-vrp.c (simplify_stmt_for_jump_threading): Tweak slightly\n+\tto use extract_range_from_stmt method to avoid need for\n+\textract_range_from_assignment method.\n+\t(vrp_prop::vrp_finalize): Use set_lattice_propagation_complete\n+\tmethod rather than setting values_propgated data member directly.\n+\t* vr-values.h (class vr_values): Privatize vrp_value_range_pool,\n+\tand values propagated data members and extract_range_from_assignment\n+\tmethod.  Reorder private data members to conform to standards.\n+\tAdd new methods set_lattice_propagation_complete and\n+\tallocate_value_range.\n+\n 2017-11-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR rtl-optimization/83030"}, {"sha": "cfaf18feecb39d5f48154dab70d4d9f7365e667e", "filename": "gcc/gimple-ssa-evrp-analyze.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e406d3330ca865244cd867572cdd02627a8757a/gcc%2Fgimple-ssa-evrp-analyze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e406d3330ca865244cd867572cdd02627a8757a/gcc%2Fgimple-ssa-evrp-analyze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-evrp-analyze.c?ref=3e406d3330ca865244cd867572cdd02627a8757a", "patch": "@@ -84,7 +84,7 @@ evrp_range_analyzer::try_find_new_range (tree name,\n \t  && vrp_operand_equal_p (old_vr->min, vr.min)\n \t  && vrp_operand_equal_p (old_vr->max, vr.max))\n \treturn NULL;\n-      value_range *new_vr = vr_values->vrp_value_range_pool.allocate ();\n+      value_range *new_vr = vr_values->allocate_value_range ();\n       *new_vr = vr;\n       return new_vr;\n     }"}, {"sha": "5f9baa3e7ff2bc59f3f6fac8fcb5ddda2794cfcb", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e406d3330ca865244cd867572cdd02627a8757a/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e406d3330ca865244cd867572cdd02627a8757a/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=3e406d3330ca865244cd867572cdd02627a8757a", "patch": "@@ -6580,14 +6580,17 @@ simplify_stmt_for_jump_threading (gimple *stmt, gimple *within_stmt,\n \n   if (gassign *assign_stmt = dyn_cast <gassign *> (stmt))\n     {\n-      value_range new_vr = VR_INITIALIZER;\n       tree lhs = gimple_assign_lhs (assign_stmt);\n-\n       if (TREE_CODE (lhs) == SSA_NAME\n \t  && (INTEGRAL_TYPE_P (TREE_TYPE (lhs))\n-\t      || POINTER_TYPE_P (TREE_TYPE (lhs))))\n+\t      || POINTER_TYPE_P (TREE_TYPE (lhs)))\n+\t  && stmt_interesting_for_vrp (stmt))\n \t{\n-\t  vr_values->extract_range_from_assignment (&new_vr, assign_stmt);\n+\t  edge dummy_e;\n+\t  tree dummy_tree;\n+\t  value_range new_vr = VR_INITIALIZER;\n+\t  vr_values->extract_range_from_stmt (stmt, &dummy_e,\n+\t\t\t\t\t      &dummy_tree, &new_vr);\n \t  if (range_int_cst_singleton_p (&new_vr))\n \t    return new_vr.min;\n \t}\n@@ -6755,7 +6758,8 @@ vrp_prop::vrp_finalize (bool warn_array_bounds_p)\n {\n   size_t i;\n \n-  vr_values.values_propagated = true;\n+  /* We have completed propagating through the lattice.  */\n+  vr_values.set_lattice_propagation_complete ();\n \n   if (dump_file)\n     {"}, {"sha": "124ee6f43568ecb8d9a7b1556b2b539088a2b538", "filename": "gcc/vr-values.h", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e406d3330ca865244cd867572cdd02627a8757a/gcc%2Fvr-values.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e406d3330ca865244cd867572cdd02627a8757a/gcc%2Fvr-values.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.h?ref=3e406d3330ca865244cd867572cdd02627a8757a", "patch": "@@ -54,22 +54,21 @@ class vr_values\n \t\t\t\t\t\t   tree, tree, value_range *);\n   void extract_range_from_phi_node (gphi *, value_range *);\n   void extract_range_basic (value_range *, gimple *);\n-  void extract_range_from_assignment (value_range *, gassign *);\n   void extract_range_from_stmt (gimple *, edge *, tree *, value_range *);\n \n   void vrp_visit_cond_stmt (gcond *, edge *);\n \n   void simplify_cond_using_ranges_2 (gcond *);\n   bool simplify_stmt_using_ranges (gimple_stmt_iterator *);\n \n-  /* This probably belongs in the lattice rather than in here.  */\n-  bool values_propagated;\n+  /* Indicate that propagation through the lattice is complete.  */\n+  void set_lattice_propagation_complete (void) { values_propagated = true; }\n \n-  /* Allocation pools for tree-vrp allocations.  */\n-  object_allocator<value_range> vrp_value_range_pool;\n+  /* Allocate a new value_range object.  */\n+  value_range *allocate_value_range (void)\n+    { return vrp_value_range_pool.allocate (); }\n \n  private:\n-  bitmap_obstack vrp_equiv_obstack;\n   void add_equivalence (bitmap *, const_tree);\n   bool vrp_stmt_computes_nonzero (gimple *);\n   bool op_with_boolean_value_range_p (tree);\n@@ -84,6 +83,7 @@ class vr_values\n   tree vrp_evaluate_conditional_warnv_with_ops (enum tree_code,\n \t\t\t\t\t\ttree, tree, bool,\n \t\t\t\t\t\tbool *, bool *);\n+  void extract_range_from_assignment (value_range *, gassign *);\n   void extract_range_from_assert (value_range *, tree);\n   void extract_range_from_ssa_name (value_range *, tree);\n   void extract_range_from_binary_expr (value_range *, enum tree_code,\n@@ -106,6 +106,15 @@ class vr_values\n \t\t\t\t\t       gimple *);\n   bool simplify_internal_call_using_ranges (gimple_stmt_iterator *, gimple *);\n \n+  /* Allocation pools for value_range objects.  */\n+  object_allocator<value_range> vrp_value_range_pool;\n+\n+  /* This probably belongs in the lattice rather than in here.  */\n+  bool values_propagated;\n+\n+  /* Allocations for equivalences all come from this obstack.  */\n+  bitmap_obstack vrp_equiv_obstack;\n+\n   /* Value range array.  After propagation, VR_VALUE[I] holds the range\n      of values that SSA name N_I may take.  */\n   unsigned int num_vr_values;"}]}