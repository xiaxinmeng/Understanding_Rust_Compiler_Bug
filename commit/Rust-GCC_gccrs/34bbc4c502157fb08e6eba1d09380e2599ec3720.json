{"sha": "34bbc4c502157fb08e6eba1d09380e2599ec3720", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRiYmM0YzUwMjE1N2ZiMDhlNmViYTFkMDkzODBlMjU5OWVjMzcyMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-07-15T18:38:15Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-07-15T18:38:15Z"}, "message": "PR c++/71814 - mangling sizeof... (sP and sZ)\n\ngcc/cp/\n\t* mangle.c (write_expression): Handle sizeof... an argument pack.\nlibiberty/\n\t* cp-demangle.c (cplus_demangle_operators): Add sP and sZ.\n\t(d_print_comp_inner): Handle them.\n\t(d_template_args_1): Split out from d_template_args.\n\t(d_args_length): New.\n\nFrom-SVN: r238389", "tree": {"sha": "1ee707547ea5521e317e522ed83b170324ec4a05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ee707547ea5521e317e522ed83b170324ec4a05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34bbc4c502157fb08e6eba1d09380e2599ec3720", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34bbc4c502157fb08e6eba1d09380e2599ec3720", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34bbc4c502157fb08e6eba1d09380e2599ec3720", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34bbc4c502157fb08e6eba1d09380e2599ec3720/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d022c55a4b8bdac385efadf42ba2a374c5960418", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d022c55a4b8bdac385efadf42ba2a374c5960418", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d022c55a4b8bdac385efadf42ba2a374c5960418"}], "stats": {"total": 233, "additions": 218, "deletions": 15}, "files": [{"sha": "b56ba47d0a7b796247cc14660ea2ac2c774489c9", "filename": "gcc/common.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34bbc4c502157fb08e6eba1d09380e2599ec3720/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34bbc4c502157fb08e6eba1d09380e2599ec3720/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=34bbc4c502157fb08e6eba1d09380e2599ec3720", "patch": "@@ -882,6 +882,9 @@ Driver Undocumented\n ;     identity, such as ia32 calling convention attributes (stdcall, etc.)\n ;     Default in G++ 6 (set in c_common_post_options).\n ;\n+; 11: The version of the ABI that corrects mangling of sizeof... expressions.\n+;     Default in G++ 7.\n+;\n ; Additional positive integers will be assigned as new versions of\n ; the ABI become the default version of the ABI.\n fabi-version="}, {"sha": "eb4f0b93531eccfee9f98451955322ed019c8cde", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34bbc4c502157fb08e6eba1d09380e2599ec3720/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34bbc4c502157fb08e6eba1d09380e2599ec3720/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=34bbc4c502157fb08e6eba1d09380e2599ec3720", "patch": "@@ -1,5 +1,8 @@\n 2016-07-15  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/71814\n+\t* mangle.c (write_expression): Handle sizeof... an argument pack.\n+\n \tPR c++/71718\n \t* pt.c (push_tinst_level_loc): Set at_eof before fatal_error.\n "}, {"sha": "8205da92a31fcabbc176f5059ade27b6dd9f5af5", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 61, "deletions": 10, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34bbc4c502157fb08e6eba1d09380e2599ec3720/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34bbc4c502157fb08e6eba1d09380e2599ec3720/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=34bbc4c502157fb08e6eba1d09380e2599ec3720", "patch": "@@ -2767,17 +2767,67 @@ write_expression (tree expr)\n       write_mangled_name (expr, false);\n       write_char ('E');\n     }\n-  else if (TREE_CODE (expr) == SIZEOF_EXPR\n-\t   && SIZEOF_EXPR_TYPE_P (expr))\n+  else if (TREE_CODE (expr) == SIZEOF_EXPR)\n     {\n-      write_string (\"st\");\n-      write_type (TREE_TYPE (TREE_OPERAND (expr, 0)));\n-    }\n-  else if (TREE_CODE (expr) == SIZEOF_EXPR\n-\t   && TYPE_P (TREE_OPERAND (expr, 0)))\n-    {\n-      write_string (\"st\");\n-      write_type (TREE_OPERAND (expr, 0));\n+      tree op = TREE_OPERAND (expr, 0);\n+\n+      if (PACK_EXPANSION_P (op))\n+\t{\n+\t  if (abi_warn_or_compat_version_crosses (11))\n+\t    G.need_abi_warning = true;\n+\t  if (abi_version_at_least (11))\n+\t    {\n+\t      /* sZ rather than szDp.  */\n+\t      write_string (\"sZ\");\n+\t      write_expression (PACK_EXPANSION_PATTERN (op));\n+\t      return;\n+\t    }\n+\t}\n+\n+      if (SIZEOF_EXPR_TYPE_P (expr))\n+\t{\n+\t  write_string (\"st\");\n+\t  write_type (TREE_TYPE (op));\n+\t}\n+      else if (ARGUMENT_PACK_P (op))\n+\t{\n+\t  tree args = ARGUMENT_PACK_ARGS (op);\n+\t  int length = TREE_VEC_LENGTH (args);\n+\t  if (abi_warn_or_compat_version_crosses (10))\n+\t    G.need_abi_warning = true;\n+\t  if (abi_version_at_least (10))\n+\t    {\n+\t      /* sP <template-arg>* E # sizeof...(T), size of a captured\n+\t\t template parameter pack from an alias template */\n+\t      write_string (\"sP\");\n+\t      for (int i = 0; i < length; ++i)\n+\t\twrite_template_arg (TREE_VEC_ELT (args, i));\n+\t      write_char ('E');\n+\t    }\n+\t  else\n+\t    {\n+\t      /* In GCC 5 we represented this sizeof wrong, with the effect\n+\t\t that we mangled it as the last element of the pack.  */\n+\t      tree arg = TREE_VEC_ELT (args, length-1);\n+\t      if (TYPE_P (op))\n+\t\t{\n+\t\t  write_string (\"st\");\n+\t\t  write_type (arg);\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  write_string (\"sz\");\n+\t\t  write_expression (arg);\n+\t\t}\n+\t    }\n+\t}\n+      else if (TYPE_P (TREE_OPERAND (expr, 0)))\n+\t{\n+\t  write_string (\"st\");\n+\t  write_type (TREE_OPERAND (expr, 0));\n+\t}\n+      else\n+\tgoto normal_expr;\n     }\n   else if (TREE_CODE (expr) == ALIGNOF_EXPR\n \t   && TYPE_P (TREE_OPERAND (expr, 0)))\n@@ -2947,6 +2997,7 @@ write_expression (tree expr)\n     }\n   else\n     {\n+    normal_expr:\n       int i, len;\n       const char *name;\n "}, {"sha": "51f9581c6d105ce97ce1d9c9878f8dd5067a8aa5", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-mangle1.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34bbc4c502157fb08e6eba1d09380e2599ec3720/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-mangle1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34bbc4c502157fb08e6eba1d09380e2599ec3720/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-mangle1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-mangle1.C?ref=34bbc4c502157fb08e6eba1d09380e2599ec3720", "patch": "@@ -0,0 +1,11 @@\n+// Test for sZ mangling.\n+// { dg-do compile { target c++11 } }\n+// { dg-final { scan-assembler \"_Z1fIJidEEv1AIXsZT_EE\" } }\n+\n+template <int I> struct A { };\n+template <typename... Ts> void f(A<sizeof...(Ts)>);\n+\n+int main()\n+{\n+  f<int,double>(A<2>());\n+}"}, {"sha": "b230ffa6560d68f02fe8ff7cc78ae7c7d8272eda", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-mangle1a.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34bbc4c502157fb08e6eba1d09380e2599ec3720/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-mangle1a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34bbc4c502157fb08e6eba1d09380e2599ec3720/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-mangle1a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-mangle1a.C?ref=34bbc4c502157fb08e6eba1d09380e2599ec3720", "patch": "@@ -0,0 +1,12 @@\n+// Test for sZ mangling.\n+// { dg-do compile { target c++11 } }\n+// { dg-final { scan-assembler \"_Z1fIJidEEv1AIXstDpT_EE\" } }\n+// { dg-options -fabi-version=9 }\n+\n+template <int I> struct A { };\n+template <typename... Ts> void f(A<sizeof...(Ts)>);\n+\n+int main()\n+{\n+  f<int,double>(A<2>());\n+}"}, {"sha": "ea96ef87308603e3e36bff7984814afdfbdf23a5", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-mangle2.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34bbc4c502157fb08e6eba1d09380e2599ec3720/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-mangle2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34bbc4c502157fb08e6eba1d09380e2599ec3720/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-mangle2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-mangle2.C?ref=34bbc4c502157fb08e6eba1d09380e2599ec3720", "patch": "@@ -0,0 +1,18 @@\n+// Testcase from cxx-abi-dev.\n+// { dg-do compile { target c++11 } }\n+\n+struct A {\n+  template<int...T> using N = int[sizeof...(T)];\n+  template<int...A> void f(N<A...> &);\n+\n+  template<typename...T> using M = int[sizeof...(T)];\n+  template<typename...A> void g(M<A...> &);\n+};\n+void g(A a)\n+{\n+  int arr[3];\n+  // { dg-final { scan-assembler \"_ZN1A1fIJLi1ELi2ELi3EEEEvRAsZT__i\" } }\n+  a.f<1,2,3>(arr);\n+  // { dg-final { scan-assembler \"_ZN1A1gIJiiiEEEvRAsZT__i\" } }\n+  a.g<int,int,int>(arr);\n+}"}, {"sha": "3ac1517670426c78445ee9126125157000b56fa6", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-mangle2a.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34bbc4c502157fb08e6eba1d09380e2599ec3720/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-mangle2a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34bbc4c502157fb08e6eba1d09380e2599ec3720/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-mangle2a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-mangle2a.C?ref=34bbc4c502157fb08e6eba1d09380e2599ec3720", "patch": "@@ -0,0 +1,19 @@\n+// Testcase from cxx-abi-dev.\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-fabi-version=9\" }\n+\n+struct A {\n+  template<int...T> using N = int[sizeof...(T)];\n+  template<int...A> void f(N<A...> &);\n+\n+  template<typename...T> using M = int[sizeof...(T)];\n+  template<typename...A> void g(M<A...> &);\n+};\n+void g(A a)\n+{\n+  int arr[3];\n+  // { dg-final { scan-assembler \"_ZN1A1fIJLi1ELi2ELi3EEEEvRAszspT__i\" } }\n+  a.f<1,2,3>(arr);\n+  // { dg-final { scan-assembler \"_ZN1A1gIJiiiEEEvRAstDpT__i\" } }\n+  a.g<int,int,int>(arr);\n+}"}, {"sha": "f239ef717dee763674f19dce4a207df5dbad9663", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-mangle3.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34bbc4c502157fb08e6eba1d09380e2599ec3720/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-mangle3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34bbc4c502157fb08e6eba1d09380e2599ec3720/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-mangle3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-mangle3.C?ref=34bbc4c502157fb08e6eba1d09380e2599ec3720", "patch": "@@ -0,0 +1,10 @@\n+// Testcase from cxx-abi-dev.\n+// { dg-do compile { target c++11 } }\n+// { dg-final { scan-assembler \"_ZN1A1fIJiiEiJiiiEEEvRAsPDpT_T0_DpT1_E_iS3_S5_\" } }\n+\n+struct A {\n+  template<typename...T> using N = int[sizeof...(T)];\n+  template<typename...A, typename B, typename...C>\n+      void f(N<A..., B, C...> &, B, C...);\n+};\n+void g(A a) { int arr[6]; a.f<int, int>(arr, 1, 2, 3, 4); }"}, {"sha": "eba8f591c3e53eabf09939770f829b85c29818af", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-mangle3a.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34bbc4c502157fb08e6eba1d09380e2599ec3720/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-mangle3a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34bbc4c502157fb08e6eba1d09380e2599ec3720/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-mangle3a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-mangle3a.C?ref=34bbc4c502157fb08e6eba1d09380e2599ec3720", "patch": "@@ -0,0 +1,11 @@\n+// Testcase from cxx-abi-dev.\n+// { dg-do compile { target c++11 } }\n+// { dg-options -fabi-version=9 }\n+// { dg-final { scan-assembler \"_ZN1A1fIJiiEiJiiiEEEvRAstDpT1__iT0_S2_\" } }\n+\n+struct A {\n+  template<typename...T> using N = int[sizeof...(T)];\n+  template<typename...A, typename B, typename...C>\n+      void f(N<A..., B, C...> &, B, C...);\n+};\n+void g(A a) { int arr[6]; a.f<int, int>(arr, 1, 2, 3, 4); }"}, {"sha": "3b50cdcd5b49efc5d7bcfaf80101bb4e370f9d94", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34bbc4c502157fb08e6eba1d09380e2599ec3720/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34bbc4c502157fb08e6eba1d09380e2599ec3720/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=34bbc4c502157fb08e6eba1d09380e2599ec3720", "patch": "@@ -1,3 +1,10 @@\n+2016-07-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-demangle.c (cplus_demangle_operators): Add sP and sZ.\n+\t(d_print_comp_inner): Handle them.\n+\t(d_template_args_1): Split out from d_template_args.\n+\t(d_args_length): New.\n+\n 2016-07-13  Marcel B\u00c3hme  <boehme.marcel@gmail.com>\n \n \tPR c++/70926"}, {"sha": "56d3bcb28fd33e4ca3cdc48f82fdfbae20a0d99d", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 57, "deletions": 5, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34bbc4c502157fb08e6eba1d09380e2599ec3720/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34bbc4c502157fb08e6eba1d09380e2599ec3720/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=34bbc4c502157fb08e6eba1d09380e2599ec3720", "patch": "@@ -466,6 +466,7 @@ static struct demangle_component *\n d_template_param (struct d_info *);\n \n static struct demangle_component *d_template_args (struct d_info *);\n+static struct demangle_component *d_template_args_1 (struct d_info *);\n \n static struct demangle_component *\n d_template_arg (struct d_info *);\n@@ -1795,6 +1796,8 @@ const struct demangle_operator_info cplus_demangle_operators[] =\n   { \"rc\", NL (\"reinterpret_cast\"), 2 },\n   { \"rm\", NL (\"%\"),         2 },\n   { \"rs\", NL (\">>\"),        2 },\n+  { \"sP\", NL (\"sizeof...\"), 1 },\n+  { \"sZ\", NL (\"sizeof...\"), 1 },\n   { \"sc\", NL (\"static_cast\"), 2 },\n   { \"st\", NL (\"sizeof \"),   1 },\n   { \"sz\", NL (\"sizeof \"),   1 },\n@@ -2994,6 +2997,19 @@ d_template_param (struct d_info *di)\n \n static struct demangle_component *\n d_template_args (struct d_info *di)\n+{\n+  if (d_peek_char (di) != 'I'\n+      && d_peek_char (di) != 'J')\n+    return NULL;\n+  d_advance (di, 1);\n+\n+  return d_template_args_1 (di);\n+}\n+\n+/* <template-arg>* E  */\n+\n+static struct demangle_component *\n+d_template_args_1 (struct d_info *di)\n {\n   struct demangle_component *hold_last_name;\n   struct demangle_component *al;\n@@ -3004,11 +3020,6 @@ d_template_args (struct d_info *di)\n      constructor or destructor.  */\n   hold_last_name = di->last_name;\n \n-  if (d_peek_char (di) != 'I'\n-      && d_peek_char (di) != 'J')\n-    return NULL;\n-  d_advance (di, 1);\n-\n   if (d_peek_char (di) == 'E')\n     {\n       /* An argument pack can be empty.  */\n@@ -3270,6 +3281,8 @@ d_expression_1 (struct d_info *di)\n \t    if (op->type == DEMANGLE_COMPONENT_CAST\n \t\t&& d_check_char (di, '_'))\n \t      operand = d_exprlist (di, 'E');\n+\t    else if (code && !strcmp (code, \"sP\"))\n+\t      operand = d_template_args_1 (di);\n \t    else\n \t      operand = d_expression_1 (di);\n \n@@ -4289,6 +4302,30 @@ d_pack_length (const struct demangle_component *dc)\n   return count;\n }\n \n+/* Returns the number of template args in DC, expanding any pack expansions\n+   found there.  */\n+\n+static int\n+d_args_length (struct d_print_info *dpi, const struct demangle_component *dc)\n+{\n+  int count = 0;\n+  for (; dc && dc->type == DEMANGLE_COMPONENT_TEMPLATE_ARGLIST;\n+       dc = d_right (dc))\n+    {\n+      struct demangle_component *elt = d_left (dc);\n+      if (elt == NULL)\n+\tbreak;\n+      if (elt->type == DEMANGLE_COMPONENT_PACK_EXPANSION)\n+\t{\n+\t  struct demangle_component *a = d_find_pack (dpi, d_left (elt));\n+\t  count += d_pack_length (a);\n+\t}\n+      else\n+\t++count;\n+    }\n+  return count;\n+}\n+\n /* DC is a component of a mangled expression.  Print it, wrapped in parens\n    if needed.  */\n \n@@ -5125,6 +5162,21 @@ d_print_comp_inner (struct d_print_info *dpi, int options,\n \t      }\n \t  }\n \n+\t/* For sizeof..., just print the pack length.  */\n+\tif (code && !strcmp (code, \"sZ\"))\n+\t  {\n+\t    struct demangle_component *a = d_find_pack (dpi, operand);\n+\t    int len = d_pack_length (a);\n+\t    d_append_num (dpi, len);\n+\t    return;\n+\t  }\n+\telse if (code && !strcmp (code, \"sP\"))\n+\t  {\n+\t    int len = d_args_length (dpi, operand);\n+\t    d_append_num (dpi, len);\n+\t    return;\n+\t  }\n+\n \tif (op->type != DEMANGLE_COMPONENT_CAST)\n \t  d_print_expr_op (dpi, options, op);\n \telse"}, {"sha": "92ad01f6e61ee9e274f14a6d2348877b5a1181dd", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34bbc4c502157fb08e6eba1d09380e2599ec3720/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34bbc4c502157fb08e6eba1d09380e2599ec3720/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=34bbc4c502157fb08e6eba1d09380e2599ec3720", "patch": "@@ -4536,6 +4536,12 @@ void baz<int>(A<sizeof (foo((int)(), (floatcomplex )00000000_00000000))>*)\n --format=gnu-v3\n _Z3fooI1FEN1XIXszdtcl1PclcvT__EEE5arrayEE4TypeEv\n X<sizeof ((P(((F)())())).array)>::Type foo<F>()\n+\n+_Z1fIJidEEv1AIXsZT_EE\n+void f<int, double>(A<2>)\n+\n+_ZN1A1fIJiiEiJiiiEEEvRAsPDpT_T0_DpT1_E_iS3_S5_\n+void A::f<int, int, int, int, int, int>(int (&) [6], int, int, int, int)\n #\n # Tests a use-after-free problem PR70481\n "}]}