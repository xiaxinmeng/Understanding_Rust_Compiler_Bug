{"sha": "7c55755d4c760de326809636531478fd7419e1e5", "node_id": "C_kwDOANBUbNoAKDdjNTU3NTVkNGM3NjBkZTMyNjgwOTYzNjUzMTQ3OGZkNzQxOWUxZTU", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2022-10-14T11:06:07Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-10-20T09:58:40Z"}, "message": "amdgcn: Use FLAT addressing for all functions with pointer arguments [PR105421]\n\nThe GCN backend uses a heuristic to determine whether to use FLAT or\nGLOBAL addressing in a particular (offload) function: namely, if a\nfunction takes a pointer-to-scalar parameter, it is assumed that the\npointer may refer to \"flat scratch\" space, and thus FLAT addressing must\nbe used instead of GLOBAL.\n\nI came up with this heuristic initially whilst working on support for\nmoving OpenACC gang-private variables into local-data share (scratch)\nmemory. The assumption that only scalar variables would be transformed in\nthat way turned out to be wrong.  For example, prior to the next patch in\nthe series, Fortran compiler-generated temporary structures were treated\nas gang private and moved to LDS space, typically overflowing the region\nallocated for such variables.  That will no longer happen after that\npatch is applied, but there may be other cases of structs moving to LDS\nspace now or in the future that this patch may be needed for.\n\n2022-10-14  Julian Brown  <julian@codesourcery.com>\n\n\tPR target/105421\ngcc/\n\t* config/gcn/gcn.cc (gcn_detect_incoming_pointer_arg): Any pointer\n\targument forces FLAT addressing mode, not just\n\tpointer-to-non-aggregate.", "tree": {"sha": "58a242754d1c1a62568b2e5fafe2b7fbc5c5f935", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58a242754d1c1a62568b2e5fafe2b7fbc5c5f935"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c55755d4c760de326809636531478fd7419e1e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c55755d4c760de326809636531478fd7419e1e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c55755d4c760de326809636531478fd7419e1e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c55755d4c760de326809636531478fd7419e1e5/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25861cf3a88a07c8dca3fb32d098c0ad756bbe38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25861cf3a88a07c8dca3fb32d098c0ad756bbe38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25861cf3a88a07c8dca3fb32d098c0ad756bbe38"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "a9ef5c3dc02f453e320f378b1cc34e3b29dd969a", "filename": "gcc/config/gcn/gcn.cc", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c55755d4c760de326809636531478fd7419e1e5/gcc%2Fconfig%2Fgcn%2Fgcn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c55755d4c760de326809636531478fd7419e1e5/gcc%2Fconfig%2Fgcn%2Fgcn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.cc?ref=7c55755d4c760de326809636531478fd7419e1e5", "patch": "@@ -2809,10 +2809,14 @@ gcn_arg_partial_bytes (cumulative_args_t cum_v, const function_arg_info &arg)\n   return (NUM_PARM_REGS - cum_num) * regsize;\n }\n \n-/* A normal function which takes a pointer argument (to a scalar) may be\n-   passed a pointer to LDS space (via a high-bits-set aperture), and that only\n-   works with FLAT addressing, not GLOBAL.  Force FLAT addressing if the\n-   function has an incoming pointer-to-scalar parameter.  */\n+/* A normal function which takes a pointer argument may be passed a pointer to\n+   LDS space (via a high-bits-set aperture), and that only works with FLAT\n+   addressing, not GLOBAL.  Force FLAT addressing if the function has an\n+   incoming pointer parameter.  NOTE: This is a heuristic that works in the\n+   offloading case, but in general, a function might read global pointer\n+   variables, etc. that may refer to LDS space or other special memory areas\n+   not supported by GLOBAL instructions, and then this argument check would not\n+   suffice.  */\n \n static void\n gcn_detect_incoming_pointer_arg (tree fndecl)\n@@ -2822,8 +2826,7 @@ gcn_detect_incoming_pointer_arg (tree fndecl)\n   for (tree arg = TYPE_ARG_TYPES (TREE_TYPE (fndecl));\n        arg;\n        arg = TREE_CHAIN (arg))\n-    if (POINTER_TYPE_P (TREE_VALUE (arg))\n-\t&& !AGGREGATE_TYPE_P (TREE_TYPE (TREE_VALUE (arg))))\n+    if (POINTER_TYPE_P (TREE_VALUE (arg)))\n       cfun->machine->use_flat_addressing = true;\n }\n "}]}