{"sha": "dcc748dd77c692eb3ef01043a8fed55c796f6f0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNjNzQ4ZGQ3N2M2OTJlYjNlZjAxMDQzYThmZWQ1NWM3OTZmNmYwZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-08-07T10:36:01Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-08-07T10:36:01Z"}, "message": "gimple.h (gimple_phi_set_result): Adjust SSA_NAME_DEF_STMT.\n\n2012-08-07  Richard Guenther  <rguenther@suse.de>\n\n\t* gimple.h (gimple_phi_set_result): Adjust SSA_NAME_DEF_STMT.\n\t* tree-phinodes.c (make_phi_node): Allow a NULL var.\n\t* tree-into-ssa.c (insert_phi_nodes_for): Simplify.\n\t* tree-complex.c (update_phi_components): Likewise.\n\t* tree-ssa-loop-manip.c (create_iv): Likewise.\n\t(add_exit_phis_edge): Likewise.\n\t(split_loop_exit_edge): Likewise.\n\t(tree_transform_and_unroll_loop): Likewise.\n\t* value-prof.c (gimple_ic): Likewise.\n\t(gimple_stringop_fixed_value): Likewise.\n\t* tree-tailcall.c (tree_optimize_tail_calls_1): Likewise.\n\t* omp-low.c (expand_parallel_call): Likewise.\n\t(expand_omp_for_static_chunk): Likewise.\n\t(expand_omp_atomic_pipeline): Likewise.\n\t* tree-parloops.c (create_phi_for_local_result): Likewise.\n\t(transform_to_exit_first_loop): Likewise.\n\t* tree-vect-data-refs.c (vect_setup_realignment): Likewise.\n\t* graphite-scop-detection.c (canonicalize_loop_closed_ssa): Likewise.\n\t* tree-predcom.c (initialize_root_vars): Likewise.\n\t(initialize_root_vars_lm): Likewise.\n\t* sese.c (sese_add_exit_phis_edge): Likewise.\n\t* gimple-streamer-in.c (input_phi): Likewise.\n\t* tree-inline.c (copy_phis_for_bb): Likewise.\n\t* tree-ssa-phiprop.c (phiprop_insert_phi): Likewise.\n\t* tree-cfg.c (gimple_make_forwarder_block): Likewise.\n\t(gimple_duplicate_bb): Likewise.\n\nFrom-SVN: r190199", "tree": {"sha": "0722103d911d9addbcfe640de327d0032f4d832b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0722103d911d9addbcfe640de327d0032f4d832b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcc748dd77c692eb3ef01043a8fed55c796f6f0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcc748dd77c692eb3ef01043a8fed55c796f6f0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcc748dd77c692eb3ef01043a8fed55c796f6f0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d13abe1e88d3397bedaeafaedfd2ede1315a37d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d13abe1e88d3397bedaeafaedfd2ede1315a37d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d13abe1e88d3397bedaeafaedfd2ede1315a37d3"}], "stats": {"total": 93, "additions": 48, "deletions": 45}, "files": [{"sha": "b732bed7355f85c535350f36ef3a22b916790718", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dcc748dd77c692eb3ef01043a8fed55c796f6f0e", "patch": "@@ -1,3 +1,32 @@\n+2012-08-07  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gimple.h (gimple_phi_set_result): Adjust SSA_NAME_DEF_STMT.\n+\t* tree-phinodes.c (make_phi_node): Allow a NULL var.\n+\t* tree-into-ssa.c (insert_phi_nodes_for): Simplify.\n+\t* tree-complex.c (update_phi_components): Likewise.\n+\t* tree-ssa-loop-manip.c (create_iv): Likewise.\n+\t(add_exit_phis_edge): Likewise.\n+\t(split_loop_exit_edge): Likewise.\n+\t(tree_transform_and_unroll_loop): Likewise.\n+\t* value-prof.c (gimple_ic): Likewise.\n+\t(gimple_stringop_fixed_value): Likewise.\n+\t* tree-tailcall.c (tree_optimize_tail_calls_1): Likewise.\n+\t* omp-low.c (expand_parallel_call): Likewise.\n+\t(expand_omp_for_static_chunk): Likewise.\n+\t(expand_omp_atomic_pipeline): Likewise.\n+\t* tree-parloops.c (create_phi_for_local_result): Likewise.\n+\t(transform_to_exit_first_loop): Likewise.\n+\t* tree-vect-data-refs.c (vect_setup_realignment): Likewise.\n+\t* graphite-scop-detection.c (canonicalize_loop_closed_ssa): Likewise.\n+\t* tree-predcom.c (initialize_root_vars): Likewise.\n+\t(initialize_root_vars_lm): Likewise.\n+\t* sese.c (sese_add_exit_phis_edge): Likewise.\n+\t* gimple-streamer-in.c (input_phi): Likewise.\n+\t* tree-inline.c (copy_phis_for_bb): Likewise.\n+\t* tree-ssa-phiprop.c (phiprop_insert_phi): Likewise.\n+\t* tree-cfg.c (gimple_make_forwarder_block): Likewise.\n+\t(gimple_duplicate_bb): Likewise.\n+\n 2012-08-07  Nick Clifton  <nickc@redhat.com>\n \n \t* config/mn10300/mn10300.c (mn10300_expand_prologue): Report"}, {"sha": "56cdc6f4f67ce58d4920333489159d663aad8151", "filename": "gcc/gimple-streamer-in.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Fgimple-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Fgimple-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-streamer-in.c?ref=dcc748dd77c692eb3ef01043a8fed55c796f6f0e", "patch": "@@ -45,7 +45,6 @@ input_phi (struct lto_input_block *ib, basic_block bb, struct data_in *data_in,\n   phi_result = VEC_index (tree, SSANAMES (fn), ix);\n   len = EDGE_COUNT (bb->preds);\n   result = create_phi_node (phi_result, bb);\n-  SSA_NAME_DEF_STMT (phi_result) = result;\n \n   /* We have to go through a lookup process here because the preds in the\n      reconstructed graph are generally in a different order than they"}, {"sha": "64ef68e57a1476c5e5d9ddb44906d3a5aaa58a1f", "filename": "gcc/gimple.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=dcc748dd77c692eb3ef01043a8fed55c796f6f0e", "patch": "@@ -3494,6 +3494,8 @@ gimple_phi_set_result (gimple gs, tree result)\n {\n   GIMPLE_CHECK (gs, GIMPLE_PHI);\n   gs->gimple_phi.result = result;\n+  if (result && TREE_CODE (result) == SSA_NAME)\n+    SSA_NAME_DEF_STMT (result) = gs;\n }\n \n "}, {"sha": "2fb1997c844a395631be94b2f47ca83f9fd93783", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=dcc748dd77c692eb3ef01043a8fed55c796f6f0e", "patch": "@@ -1325,9 +1325,8 @@ canonicalize_loop_closed_ssa (loop_p loop)\n \t\tif (TREE_CODE (arg) != SSA_NAME)\n \t\t  continue;\n \n-\t\tclose_phi = create_phi_node (arg, close);\n-\t\tres = create_new_def_for (gimple_phi_result (close_phi),\n-\t\t\t\t\t  close_phi,\n+\t\tclose_phi = create_phi_node (NULL_TREE, close);\n+\t\tres = create_new_def_for (arg, close_phi,\n \t\t\t\t\t  gimple_phi_result_ptr (close_phi));\n \t\tadd_phi_arg (close_phi, arg,\n \t\t\t     gimple_phi_arg_edge (close_phi, 0),"}, {"sha": "846840e2b679804816b75589c4b7d668e21413cf", "filename": "gcc/omp-low.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=dcc748dd77c692eb3ef01043a8fed55c796f6f0e", "patch": "@@ -3059,7 +3059,6 @@ expand_parallel_call (struct omp_region *region, basic_block bb,\n \t  if (gimple_in_ssa_p (cfun))\n \t    {\n \t      gimple phi = create_phi_node (tmp_join, bb);\n-\t      SSA_NAME_DEF_STMT (tmp_join) = phi;\n \t      add_phi_arg (phi, tmp_then, e_then, UNKNOWN_LOCATION);\n \t      add_phi_arg (phi, tmp_else, e_else, UNKNOWN_LOCATION);\n \t    }\n@@ -4592,7 +4591,6 @@ expand_omp_for_static_chunk (struct omp_region *region, struct omp_for_data *fd)\n \t  t = gimple_phi_result (phi);\n \t  gcc_assert (t == redirect_edge_var_map_result (vm));\n \t  nphi = create_phi_node (t, iter_part_bb);\n-\t  SSA_NAME_DEF_STMT (t) = nphi;\n \n \t  t = PHI_ARG_DEF_FROM_EDGE (phi, se);\n \t  locus = gimple_phi_arg_location_from_edge (phi, se);\n@@ -4617,7 +4615,6 @@ expand_omp_for_static_chunk (struct omp_region *region, struct omp_for_data *fd)\n \n       /* Make phi node for trip.  */\n       phi = create_phi_node (trip_main, iter_part_bb);\n-      SSA_NAME_DEF_STMT (trip_main) = phi;\n       add_phi_arg (phi, trip_back, single_succ_edge (trip_update_bb),\n \t\t   UNKNOWN_LOCATION);\n       add_phi_arg (phi, trip_init, single_succ_edge (entry_bb),\n@@ -5319,7 +5316,6 @@ expand_omp_atomic_pipeline (basic_block load_bb, basic_block store_bb,\n     {\n       gcc_assert (gimple_seq_empty_p (phi_nodes (loop_header)));\n       phi = create_phi_node (loadedi, loop_header);\n-      SSA_NAME_DEF_STMT (loadedi) = phi;\n       SET_USE (PHI_ARG_DEF_PTR_FROM_EDGE (phi, single_succ_edge (load_bb)),\n \t       initial);\n     }"}, {"sha": "f3dc2b7c49e5c611ea84031921f58cb4ee381755", "filename": "gcc/sese.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=dcc748dd77c692eb3ef01043a8fed55c796f6f0e", "patch": "@@ -345,10 +345,8 @@ free_sese (sese region)\n static void\n sese_add_exit_phis_edge (basic_block exit, tree use, edge false_e, edge true_e)\n {\n-  gimple phi = create_phi_node (use, exit);\n-\n-  create_new_def_for (gimple_phi_result (phi), phi,\n-\t\t      gimple_phi_result_ptr (phi));\n+  gimple phi = create_phi_node (NULL_TREE, exit);\n+  create_new_def_for (use, phi, gimple_phi_result_ptr (phi));\n   add_phi_arg (phi, use, false_e, UNKNOWN_LOCATION);\n   add_phi_arg (phi, use, true_e, UNKNOWN_LOCATION);\n }"}, {"sha": "601899c4e01796106ed0a40a759cf4613a91941f", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=dcc748dd77c692eb3ef01043a8fed55c796f6f0e", "patch": "@@ -5010,7 +5010,6 @@ gimple_make_forwarder_block (edge fallthru)\n       phi = gsi_stmt (gsi);\n       var = gimple_phi_result (phi);\n       new_phi = create_phi_node (var, bb);\n-      SSA_NAME_DEF_STMT (var) = new_phi;\n       gimple_phi_set_result (phi, make_ssa_name (SSA_NAME_VAR (var), phi));\n       add_phi_arg (new_phi, gimple_phi_result (phi), fallthru,\n \t\t   UNKNOWN_LOCATION);\n@@ -5370,8 +5369,8 @@ gimple_duplicate_bb (basic_block bb)\n   for (gsi = gsi_start (phis); !gsi_end_p (gsi); gsi_next (&gsi))\n     {\n       phi = gsi_stmt (gsi);\n-      copy = create_phi_node (gimple_phi_result (phi), new_bb);\n-      create_new_def_for (gimple_phi_result (copy), copy,\n+      copy = create_phi_node (NULL_TREE, new_bb);\n+      create_new_def_for (gimple_phi_result (phi), copy,\n \t\t\t  gimple_phi_result_ptr (copy));\n     }\n "}, {"sha": "82ec14a7a6fc7727341a8e93162864fcfbef26d8", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=dcc748dd77c692eb3ef01043a8fed55c796f6f0e", "patch": "@@ -720,17 +720,11 @@ update_phi_components (basic_block bb)\n \n \t  lr = get_component_ssa_name (gimple_phi_result (phi), false);\n \t  if (TREE_CODE (lr) == SSA_NAME)\n-\t    {\n-\t      pr = create_phi_node (lr, bb);\n-\t      SSA_NAME_DEF_STMT (lr) = pr;\n-\t    }\n+\t    pr = create_phi_node (lr, bb);\n \n \t  li = get_component_ssa_name (gimple_phi_result (phi), true);\n \t  if (TREE_CODE (li) == SSA_NAME)\n-\t    {\n-\t      pi = create_phi_node (li, bb);\n-\t      SSA_NAME_DEF_STMT (li) = pi;\n-\t    }\n+\t    pi = create_phi_node (li, bb);\n \n \t  for (i = 0, n = gimple_phi_num_args (phi); i < n; ++i)\n \t    {"}, {"sha": "04c3109e94b86f210eed3bfce5a8ee45f5ddf450", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=dcc748dd77c692eb3ef01043a8fed55c796f6f0e", "patch": "@@ -1941,8 +1941,7 @@ copy_phis_for_bb (basic_block bb, copy_body_data *id)\n       if (is_gimple_reg (res))\n \t{\n \t  walk_tree (&new_res, copy_tree_body_r, id, NULL);\n-\t  SSA_NAME_DEF_STMT (new_res)\n-\t    = new_phi = create_phi_node (new_res, new_bb);\n+\t  new_phi = create_phi_node (new_res, new_bb);\n \t  FOR_EACH_EDGE (new_edge, ei, new_bb->preds)\n \t    {\n \t      edge old_edge = find_edge ((basic_block) new_edge->src->aux, bb);"}, {"sha": "1350d77abbfa16e770e4fa086ec78c9d333d9ff9", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=dcc748dd77c692eb3ef01043a8fed55c796f6f0e", "patch": "@@ -1039,10 +1039,8 @@ insert_phi_nodes_for (tree var, bitmap phi_insertion_points, bool update_p)\n \t  tree new_lhs;\n \n \t  gcc_assert (update_p);\n-\t  phi = create_phi_node (var, bb);\n-\n-\t  new_lhs = duplicate_ssa_name (var, phi);\n-\t  gimple_phi_set_result (phi, new_lhs);\n+\t  new_lhs = duplicate_ssa_name (var, NULL);\n+\t  phi = create_phi_node (new_lhs, bb);\n \t  add_new_name_mapping (new_lhs, var);\n \n \t  /* Add VAR to every argument slot of PHI.  We need VAR in"}, {"sha": "25416abb62120abbccef4f981daef1f7e195da54", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=dcc748dd77c692eb3ef01043a8fed55c796f6f0e", "patch": "@@ -1013,7 +1013,6 @@ create_phi_for_local_result (void **slot, void *data)\n \t\t     NULL);\n   locus = gimple_location (reduc->reduc_stmt);\n   new_phi = create_phi_node (local_res, store_bb);\n-  SSA_NAME_DEF_STMT (local_res) = new_phi;\n   add_phi_arg (new_phi, reduc->init, e, locus);\n   add_phi_arg (new_phi, gimple_assign_lhs (reduc->reduc_stmt),\n \t       FALLTHRU_EDGE (loop->latch), locus);\n@@ -1489,7 +1488,6 @@ transform_to_exit_first_loop (struct loop *loop, htab_t reduction_list, tree nit\n       t = make_ssa_name (SSA_NAME_VAR (res), phi);\n       SET_PHI_RESULT (phi, t);\n       nphi = create_phi_node (res, orig_header);\n-      SSA_NAME_DEF_STMT (res) = nphi;\n       add_phi_arg (nphi, t, hpred, UNKNOWN_LOCATION);\n \n       if (res == control)"}, {"sha": "4bb10e59ac73d3dc55a4154817429876f21b737c", "filename": "gcc/tree-phinodes.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Ftree-phinodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Ftree-phinodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-phinodes.c?ref=dcc748dd77c692eb3ef01043a8fed55c796f6f0e", "patch": "@@ -189,7 +189,9 @@ make_phi_node (tree var, int len)\n   gimple_init_singleton (phi);\n   phi->gimple_phi.nargs = len;\n   phi->gimple_phi.capacity = capacity;\n-  if (TREE_CODE (var) == SSA_NAME)\n+  if (!var)\n+    ;\n+  else if (TREE_CODE (var) == SSA_NAME)\n     gimple_phi_set_result (phi, var);\n   else\n     gimple_phi_set_result (phi, make_ssa_name (var, phi));"}, {"sha": "a0d5d3ea14c3e2947f53f16c25ff768e6cea2b9b", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=dcc748dd77c692eb3ef01043a8fed55c796f6f0e", "patch": "@@ -1495,7 +1495,6 @@ initialize_root_vars (struct loop *loop, chain_p chain, bitmap tmp_vars)\n \tgsi_insert_seq_on_edge_immediate (entry, stmts);\n \n       phi = create_phi_node (var, loop->header);\n-      SSA_NAME_DEF_STMT (var) = phi;\n       add_phi_arg (phi, init, entry, UNKNOWN_LOCATION);\n       add_phi_arg (phi, next, latch, UNKNOWN_LOCATION);\n     }\n@@ -1559,7 +1558,6 @@ initialize_root_vars_lm (struct loop *loop, dref root, bool written,\n     {\n       next = VEC_index (tree, *vars, 1);\n       phi = create_phi_node (var, loop->header);\n-      SSA_NAME_DEF_STMT (var) = phi;\n       add_phi_arg (phi, init, entry, UNKNOWN_LOCATION);\n       add_phi_arg (phi, next, latch, UNKNOWN_LOCATION);\n     }"}, {"sha": "0ddc56f832a467495daf9868cbdbd57368405f5c", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=dcc748dd77c692eb3ef01043a8fed55c796f6f0e", "patch": "@@ -116,7 +116,6 @@ create_iv (tree base, tree step, tree var, struct loop *loop,\n     gsi_insert_seq_on_edge_immediate (pe, stmts);\n \n   stmt = create_phi_node (vb, loop->header);\n-  SSA_NAME_DEF_STMT (vb) = stmt;\n   add_phi_arg (stmt, initial, loop_preheader_edge (loop), UNKNOWN_LOCATION);\n   add_phi_arg (stmt, va, loop_latch_edge (loop), UNKNOWN_LOCATION);\n }\n@@ -144,9 +143,8 @@ add_exit_phis_edge (basic_block exit, tree use)\n   if (!e)\n     return;\n \n-  phi = create_phi_node (use, exit);\n-  create_new_def_for (gimple_phi_result (phi), phi,\n-\t\t      gimple_phi_result_ptr (phi));\n+  phi = create_phi_node (NULL_TREE, exit);\n+  create_new_def_for (use, phi, gimple_phi_result_ptr (phi));\n   FOR_EACH_EDGE (e, ei, exit->preds)\n     add_phi_arg (phi, use, e, UNKNOWN_LOCATION);\n }\n@@ -499,7 +497,6 @@ split_loop_exit_edge (edge exit)\n \t of the SSA name out of the loop.  */\n       new_name = duplicate_ssa_name (name, NULL);\n       new_phi = create_phi_node (new_name, bb);\n-      SSA_NAME_DEF_STMT (new_name) = new_phi;\n       add_phi_arg (new_phi, name, exit, locus);\n       SET_USE (op_p, new_name);\n     }\n@@ -1012,7 +1009,6 @@ tree_transform_and_unroll_loop (struct loop *loop, unsigned factor,\n \n       new_init = make_ssa_name (var, NULL);\n       phi_rest = create_phi_node (new_init, rest);\n-      SSA_NAME_DEF_STMT (new_init) = phi_rest;\n \n       add_phi_arg (phi_rest, init, precond_edge, UNKNOWN_LOCATION);\n       add_phi_arg (phi_rest, next, new_exit, UNKNOWN_LOCATION);"}, {"sha": "cc2b89364c9c16de67f7d4326ee7e382aebf859f", "filename": "gcc/tree-ssa-phiprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Ftree-ssa-phiprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Ftree-ssa-phiprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiprop.c?ref=dcc748dd77c692eb3ef01043a8fed55c796f6f0e", "patch": "@@ -141,7 +141,7 @@ phiprop_insert_phi (basic_block bb, gimple phi, gimple use_stmt,\n   /* Build a new PHI node to replace the definition of\n      the indirect reference lhs.  */\n   res = gimple_assign_lhs (use_stmt);\n-  SSA_NAME_DEF_STMT (res) = new_phi = create_phi_node (res, bb);\n+  new_phi = create_phi_node (res, bb);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {"}, {"sha": "b5356f5edbf61cc2f7593c9d3a1cf208b8268d3e", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=dcc748dd77c692eb3ef01043a8fed55c796f6f0e", "patch": "@@ -975,7 +975,6 @@ tree_optimize_tail_calls_1 (bool opt_tailcalls)\n \n \t\tset_ssa_default_def (cfun, param, new_name);\n \t\tphi = create_phi_node (name, first);\n-\t\tSSA_NAME_DEF_STMT (name) = phi;\n \t\tadd_phi_arg (phi, new_name, single_pred_edge (first),\n \t\t\t     EXPR_LOCATION (param));\n \t      }"}, {"sha": "e123bea88a0f30f84e03871e3e857b0594b7d98f", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=dcc748dd77c692eb3ef01043a8fed55c796f6f0e", "patch": "@@ -4446,7 +4446,6 @@ vect_setup_realignment (gimple stmt, gimple_stmt_iterator *gsi,\n   vec_dest = vect_create_destination_var (scalar_dest, vectype);\n   msq = make_ssa_name (vec_dest, NULL);\n   phi_stmt = create_phi_node (msq, containing_loop->header);\n-  SSA_NAME_DEF_STMT (msq) = phi_stmt;\n   add_phi_arg (phi_stmt, msq_init, pe, UNKNOWN_LOCATION);\n \n   return msq;"}, {"sha": "6044dd74e188cf4141d71cdea96816e3d804dce6", "filename": "gcc/value-prof.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc748dd77c692eb3ef01043a8fed55c796f6f0e/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=dcc748dd77c692eb3ef01043a8fed55c796f6f0e", "patch": "@@ -1275,7 +1275,6 @@ gimple_ic (gimple icall_stmt, struct cgraph_node *direct_call,\n     {\n       tree result = gimple_call_lhs (icall_stmt);\n       gimple phi = create_phi_node (result, join_bb);\n-      SSA_NAME_DEF_STMT (result) = phi;\n       gimple_call_set_lhs (icall_stmt,\n \t\t\t   make_ssa_name (SSA_NAME_VAR (result), icall_stmt));\n       add_phi_arg (phi, gimple_call_lhs (icall_stmt), e_ij, UNKNOWN_LOCATION);\n@@ -1507,7 +1506,6 @@ gimple_stringop_fixed_value (gimple vcall_stmt, tree icall_size, int prob,\n     {\n       tree result = gimple_call_lhs (vcall_stmt);\n       gimple phi = create_phi_node (result, join_bb);\n-      SSA_NAME_DEF_STMT (result) = phi;\n       gimple_call_set_lhs (vcall_stmt,\n \t\t\t   make_ssa_name (SSA_NAME_VAR (result), vcall_stmt));\n       add_phi_arg (phi, gimple_call_lhs (vcall_stmt), e_vj, UNKNOWN_LOCATION);"}]}