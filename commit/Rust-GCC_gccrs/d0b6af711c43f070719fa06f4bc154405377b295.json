{"sha": "d0b6af711c43f070719fa06f4bc154405377b295", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBiNmFmNzExYzQzZjA3MDcxOWZhMDZmNGJjMTU0NDA1Mzc3YjI5NQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@redhat.com", "date": "2000-12-19T00:42:31Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2000-12-19T00:42:31Z"}, "message": "reload.c (push_reload): When using a dying register for the reload register in an in-out reload...\n\n\t* reload.c (push_reload): When using a dying register for the reload\n\tregister in an in-out reload, use outmode if wider than inmode.\n\nFrom-SVN: r38373", "tree": {"sha": "32bd2cbf3c3edcfbc6f2bde32226fb2e8a067bd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32bd2cbf3c3edcfbc6f2bde32226fb2e8a067bd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0b6af711c43f070719fa06f4bc154405377b295", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b6af711c43f070719fa06f4bc154405377b295", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0b6af711c43f070719fa06f4bc154405377b295", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b6af711c43f070719fa06f4bc154405377b295/comments", "author": null, "committer": null, "parents": [{"sha": "3173ca6431f12a3a48eabfed93ade74edb47788e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3173ca6431f12a3a48eabfed93ade74edb47788e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3173ca6431f12a3a48eabfed93ade74edb47788e"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "6932876158beac2844ea5687dde7360e2b661d62", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b6af711c43f070719fa06f4bc154405377b295/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b6af711c43f070719fa06f4bc154405377b295/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0b6af711c43f070719fa06f4bc154405377b295", "patch": "@@ -1,3 +1,8 @@\n+Tue Dec 19 00:37:08 2000  J\"orn Rennecke <amylaar@redhat.com>\n+\n+\t* reload.c (push_reload): When using a dying register for the reload\n+\tregister in an in-out reload, use outmode if wider than inmode.\n+\n 2000-12-19  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* config/d30v/d30v.h (EXIT_BODY): Update comment."}, {"sha": "ddc599fc247d070d8dbe410426f3d0b815039575", "filename": "gcc/reload.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b6af711c43f070719fa06f4bc154405377b295/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b6af711c43f070719fa06f4bc154405377b295/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=d0b6af711c43f070719fa06f4bc154405377b295", "patch": "@@ -1451,6 +1451,10 @@ push_reload (in, out, inloc, outloc, class,\n     {\n       rtx note;\n       int regno;\n+      enum machine_mode rel_mode = inmode;\n+\n+      if (out && GET_MODE_SIZE (outmode) > GET_MODE_SIZE (inmode))\n+\trel_mode = outmode;\n \n       for (note = REG_NOTES (this_insn); note; note = XEXP (note, 1))\n \tif (REG_NOTE_KIND (note) == REG_DEAD\n@@ -1460,7 +1464,7 @@ push_reload (in, out, inloc, outloc, class,\n \t    && ! refers_to_regno_for_reload_p (regno,\n \t\t\t\t\t       (regno\n \t\t\t\t\t\t+ HARD_REGNO_NREGS (regno,\n-\t\t\t\t\t\t\t\t    inmode)),\n+\t\t\t\t\t\t\t\t    rel_mode)),\n \t\t\t\t\t       PATTERN (this_insn), inloc)\n \t    /* If this is also an output reload, IN cannot be used as\n \t       the reload register if it is set in this insn unless IN\n@@ -1469,7 +1473,7 @@ push_reload (in, out, inloc, outloc, class,\n \t\t|| ! hard_reg_set_here_p (regno,\n \t\t\t\t\t  (regno\n \t\t\t\t\t   + HARD_REGNO_NREGS (regno,\n-\t\t\t\t\t\t\t       inmode)),\n+\t\t\t\t\t\t\t       rel_mode)),\n \t\t\t\t\t  PATTERN (this_insn)))\n \t    /* ??? Why is this code so different from the previous?\n \t       Is there any simple coherent way to describe the two together?\n@@ -1481,9 +1485,9 @@ push_reload (in, out, inloc, outloc, class,\n \t\t\t== ((GET_MODE_SIZE (GET_MODE (SUBREG_REG (in)))\n \t\t\t     + (UNITS_PER_WORD - 1)) / UNITS_PER_WORD))))\n \t    /* Make sure the operand fits in the reg that dies.  */\n-\t    && GET_MODE_SIZE (inmode) <= GET_MODE_SIZE (GET_MODE (XEXP (note, 0)))\n+\t    && (GET_MODE_SIZE (rel_mode)\n+\t\t<= GET_MODE_SIZE (GET_MODE (XEXP (note, 0))))\n \t    && HARD_REGNO_MODE_OK (regno, inmode)\n-\t    && GET_MODE_SIZE (outmode) <= GET_MODE_SIZE (GET_MODE (XEXP (note, 0)))\n \t    && HARD_REGNO_MODE_OK (regno, outmode))\n \t  {\n \t    unsigned int offs;\n@@ -1498,7 +1502,7 @@ push_reload (in, out, inloc, outloc, class,\n \n \t    if (offs == nregs)\n \t      {\n-\t\trld[i].reg_rtx = gen_rtx_REG (inmode, regno);\n+\t\trld[i].reg_rtx = gen_rtx_REG (rel_mode, regno);\n \t\tbreak;\n \t      }\n \t  }"}]}