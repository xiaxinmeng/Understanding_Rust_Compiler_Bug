{"sha": "104dfaa8c0bdc7e0538287334bdf8372f1631b2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA0ZGZhYThjMGJkYzdlMDUzODI4NzMzNGJkZjgzNzJmMTYzMWIyYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-10-15T18:07:48Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-10-15T18:07:48Z"}, "message": "Based on patch from Michael Gschwind <mikeg@watson.ibm.com>:\n\n        * unroll.c (unroll_loop): Cast return value of alloca.\n        * i370/i370.c: Include function.h and toplev.h.\n        (i370_label_scan): Remove c++ commented abort.\n        * i370/i370.h (HANDLE_PRAGMA): Takes three arguments.\n        (ASM_OUTPUT_LABELREF): Fix TOUPPER/else broken 16 Sept.\n        * i370/xm-i370.h (HOST_BITS_PER_LONGLONG): Define.\n        * i370/xm-mvs.h, i370/xm-oe.h: Likewise.\n\nFrom-SVN: r30021", "tree": {"sha": "53a35e1d7cd0e768b90efc076810b3d0586b534c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53a35e1d7cd0e768b90efc076810b3d0586b534c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/104dfaa8c0bdc7e0538287334bdf8372f1631b2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/104dfaa8c0bdc7e0538287334bdf8372f1631b2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/104dfaa8c0bdc7e0538287334bdf8372f1631b2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/104dfaa8c0bdc7e0538287334bdf8372f1631b2c/comments", "author": null, "committer": null, "parents": [{"sha": "76ed0c0a4bd74a140e0de578eb94f2fd969646bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76ed0c0a4bd74a140e0de578eb94f2fd969646bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76ed0c0a4bd74a140e0de578eb94f2fd969646bd"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "a9ba8463a1d1af04eb43ced0fd413b68d8770b3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104dfaa8c0bdc7e0538287334bdf8372f1631b2c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104dfaa8c0bdc7e0538287334bdf8372f1631b2c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=104dfaa8c0bdc7e0538287334bdf8372f1631b2c", "patch": "@@ -1,3 +1,14 @@\n+Fri Oct 15 11:02:46 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\tBased on patch from Michael Gschwind <mikeg@watson.ibm.com>:\n+\t* unroll.c (unroll_loop): Cast return value of alloca.\n+\t* i370/i370.c: Include function.h and toplev.h.\n+\t(i370_label_scan): Remove c++ commented abort.\n+\t* i370/i370.h (HANDLE_PRAGMA): Takes three arguments.\n+\t(ASM_OUTPUT_LABELREF): Fix TOUPPER/else broken 16 Sept.\n+\t* i370/xm-i370.h (HOST_BITS_PER_LONGLONG): Define.\n+\t* i370/xm-mvs.h, i370/xm-oe.h: Likewise.\n+\n Fri Oct 15 03:01:01 1999  Loren Rittle  <ljrittle@acm.org>\n \n \t* config/t-freebsd: Do not override USER_H."}, {"sha": "6957b5de06e270cccf6e25b75d1083591035db3a", "filename": "gcc/config/i370/i370.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104dfaa8c0bdc7e0538287334bdf8372f1631b2c/gcc%2Fconfig%2Fi370%2Fi370.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104dfaa8c0bdc7e0538287334bdf8372f1631b2c/gcc%2Fconfig%2Fi370%2Fi370.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.c?ref=104dfaa8c0bdc7e0538287334bdf8372f1631b2c", "patch": "@@ -33,9 +33,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"insn-flags.h\"\n #include \"output.h\"\n #include \"insn-attr.h\"\n-/* #include \"function.h\" */\n+#include \"function.h\"\n #include \"flags.h\"\n #include \"recog.h\"\n+#include \"toplev.h\"\n \n extern FILE *asm_out_file;\n \n@@ -473,7 +474,6 @@ i370_label_scan (void)\n    last week, and so we punt for now.  */\n \n                     debug_rtx (insn);\n-// abort();\n                     for (j=0; j < XVECLEN (body, 0); j++)\n                       {\n                          int labelno;"}, {"sha": "4ecc07dd29210fd298156407b961f568c760dd2b", "filename": "gcc/config/i370/i370.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104dfaa8c0bdc7e0538287334bdf8372f1631b2c/gcc%2Fconfig%2Fi370%2Fi370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104dfaa8c0bdc7e0538287334bdf8372f1631b2c/gcc%2Fconfig%2Fi370%2Fi370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.h?ref=104dfaa8c0bdc7e0538287334bdf8372f1631b2c", "patch": "@@ -152,7 +152,8 @@ extern int mvs_function_name_length;\n    text can be read.  CH is the first character after the #pragma.  The\n    result of the expression is the terminating character found\n    (newline or EOF).  */\n-#define HANDLE_PRAGMA(FILE, NODE) handle_pragma ((FILE), (NODE))\n+#define HANDLE_PRAGMA(FILE, ungetc_unused, NODE) \\\n+  handle_pragma ((FILE), (NODE))\n #endif /* TARGET_HLASM */\n \n /* Define maximum length of page minus page escape overhead.  */\n@@ -1137,10 +1138,7 @@ enum reg_class\n   else\t\t\t\t\t\t\t\t\t\\\n     ch = '@';\t\t\t\t\t\t\t\t\\\n   for (bp = temp; *bp; bp++)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      *bp = TOUPPER (*bp);\t\t\t\t\t\t\\\n-      else if (*bp == '_') *bp = ch;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n+    *bp = (*bp == '_' ? ch : TOUPPER (*bp));\t\t\t\t\\\n   fprintf (FILE, \"%s\", temp);\t\t\t\t\t\t\\\n }\n "}, {"sha": "b80efb9917d725a02f7f96ca8aaaf47ce2731cab", "filename": "gcc/config/i370/xm-i370.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104dfaa8c0bdc7e0538287334bdf8372f1631b2c/gcc%2Fconfig%2Fi370%2Fxm-i370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104dfaa8c0bdc7e0538287334bdf8372f1631b2c/gcc%2Fconfig%2Fi370%2Fxm-i370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fxm-i370.h?ref=104dfaa8c0bdc7e0538287334bdf8372f1631b2c", "patch": "@@ -31,6 +31,7 @@ Boston, MA 02111-1307, USA.  */\n #define HOST_BITS_PER_SHORT\t16\n #define HOST_BITS_PER_INT\t32\n #define HOST_BITS_PER_LONG\t32\n+#define HOST_BITS_PER_LONGLONG\t64\n #define HOST_FLOAT_FORMAT\tIBM_FLOAT_FORMAT\n #define HOST_EBCDIC\t\t1\n "}, {"sha": "f43a8408ce2188e9b37a13dc00fa82b8224a66e6", "filename": "gcc/config/i370/xm-mvs.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104dfaa8c0bdc7e0538287334bdf8372f1631b2c/gcc%2Fconfig%2Fi370%2Fxm-mvs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104dfaa8c0bdc7e0538287334bdf8372f1631b2c/gcc%2Fconfig%2Fi370%2Fxm-mvs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fxm-mvs.h?ref=104dfaa8c0bdc7e0538287334bdf8372f1631b2c", "patch": "@@ -31,6 +31,7 @@ Boston, MA 02111-1307, USA.  */\n #define HOST_BITS_PER_SHORT\t16\n #define HOST_BITS_PER_INT\t32\n #define HOST_BITS_PER_LONG\t32\n+#define HOST_BITS_PER_LONGLONG\t64\n #define HOST_FLOAT_FORMAT\tIBM_FLOAT_FORMAT\n #define HOST_EBCDIC\t\t1\n "}, {"sha": "370ec09c9c44ae1421235fa0968666dcd6e1f63d", "filename": "gcc/config/i370/xm-oe.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104dfaa8c0bdc7e0538287334bdf8372f1631b2c/gcc%2Fconfig%2Fi370%2Fxm-oe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104dfaa8c0bdc7e0538287334bdf8372f1631b2c/gcc%2Fconfig%2Fi370%2Fxm-oe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fxm-oe.h?ref=104dfaa8c0bdc7e0538287334bdf8372f1631b2c", "patch": "@@ -34,6 +34,7 @@ Boston, MA 02111-1307, USA.  */\n #define HOST_BITS_PER_SHORT\t16\n #define HOST_BITS_PER_INT\t32\n #define HOST_BITS_PER_LONG\t32\n+#define HOST_BITS_PER_LONGLONG\t64\n #define HOST_FLOAT_FORMAT\tIBM_FLOAT_FORMAT\n #define HOST_EBCDIC\t\t1\n "}, {"sha": "c21638f15887e4a9c65b3fd4fc9fd2b3264a2ada", "filename": "gcc/unroll.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104dfaa8c0bdc7e0538287334bdf8372f1631b2c/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104dfaa8c0bdc7e0538287334bdf8372f1631b2c/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=104dfaa8c0bdc7e0538287334bdf8372f1631b2c", "patch": "@@ -769,7 +769,7 @@ unroll_loop (loop_end, insn_count, loop_start, end_insert_before,\n \n   splittable_regs = (rtx *) alloca (maxregnum * sizeof (rtx));\n   bzero ((char *) splittable_regs, maxregnum * sizeof (rtx));\n-  derived_regs = alloca (maxregnum);\n+  derived_regs = (char *) alloca (maxregnum);\n   bzero (derived_regs, maxregnum);\n   splittable_regs_updates = (int *) alloca (maxregnum * sizeof (int));\n   bzero ((char *) splittable_regs_updates, maxregnum * sizeof (int));"}]}