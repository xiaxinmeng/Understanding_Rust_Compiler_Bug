{"sha": "3ebe61b87e6923eee258e26be7fcf00f05fbeff9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ViZTYxYjg3ZTY5MjNlZWUyNThlMjZiZTdmY2YwMGYwNWZiZWZmOQ==", "commit": {"author": {"name": "Petr Murzin", "email": "petr.murzin@intel.com", "date": "2014-08-25T11:39:18Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-08-25T11:39:18Z"}, "message": "i386.md (SWI1248_AVX512BW): New mode iterator.\n\ngcc/\n        * config/i386/i386.md (SWI1248_AVX512BW): New mode iterator.\n        (*k<logic><mode>): Add *k<logic>qi and *k<logic>hi and use\n        SWI1248_AVX512BW mode iterator.\n\nFrom-SVN: r214417", "tree": {"sha": "c0f523910eb2b8a9ead2d7461a737009da509697", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0f523910eb2b8a9ead2d7461a737009da509697"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ebe61b87e6923eee258e26be7fcf00f05fbeff9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ebe61b87e6923eee258e26be7fcf00f05fbeff9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ebe61b87e6923eee258e26be7fcf00f05fbeff9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ebe61b87e6923eee258e26be7fcf00f05fbeff9/comments", "author": null, "committer": null, "parents": [{"sha": "41608dd07452cfb440463b3cd60d92e8847b1c6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41608dd07452cfb440463b3cd60d92e8847b1c6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41608dd07452cfb440463b3cd60d92e8847b1c6d"}], "stats": {"total": 50, "additions": 20, "deletions": 30}, "files": [{"sha": "86617e09934a4695d434ed2857cf18dad0ad3bea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebe61b87e6923eee258e26be7fcf00f05fbeff9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebe61b87e6923eee258e26be7fcf00f05fbeff9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ebe61b87e6923eee258e26be7fcf00f05fbeff9", "patch": "@@ -1,3 +1,9 @@\n+2014-08-25  Petr Murzin  <petr.murzin@intel.com>\n+\n+\t* config/i386/i386.md (SWI1248_AVX512BW): New mode iterator.\n+\t(*k<logic><mode>): Add *k<logic>qi and *k<logic>hi and use\n+\tSWI1248_AVX512BW mode iterator.\n+\n 2014-08-25  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \tPR target/62111"}, {"sha": "f56ad078c2aad6d3ff60cf950bdfee124c3851bb", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 14, "deletions": 30, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebe61b87e6923eee258e26be7fcf00f05fbeff9/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebe61b87e6923eee258e26be7fcf00f05fbeff9/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=3ebe61b87e6923eee258e26be7fcf00f05fbeff9", "patch": "@@ -890,6 +890,10 @@\n ;; All integer modes.\n (define_mode_iterator SWI1248x [QI HI SI DI])\n \n+;; All integer modes with AVX512BW.\n+(define_mode_iterator SWI1248_AVX512BW\n+  [QI HI (SI \"TARGET_AVX512BW\") (DI \"TARGET_AVX512BW\")]\n+\n ;; All integer modes without QImode.\n (define_mode_iterator SWI248x [HI SI DI])\n \n@@ -7543,37 +7547,17 @@\n \t(any_logic:SWI1248x (match_dup 1)\n \t\t\t    (match_dup 2)))])\n \n-;; TODO: It seems to be possible to macroize following\n-;; 3 patterns.\n-(define_insn \"*k<logic>qi\"\n-  [(set (match_operand:QI 0 \"mask_reg_operand\" \"=k\")\n-\t(any_logic:QI (match_operand:QI 1 \"mask_reg_operand\" \"k\")\n-\t\t      (match_operand:QI 2 \"mask_reg_operand\" \"k\")))]\n-  \"TARGET_AVX512F\"\n-{\n-  return TARGET_AVX512DQ ? \"k<logic>b\\t{%2, %1, %0|%0, %1, %2}\"\n-\t\t\t : \"k<logic>w\\t{%2, %1, %0|%0, %1, %2}\";\n-}\n-  [(set_attr \"mode\" \"QI\")\n-   (set_attr \"type\" \"msklog\")\n-   (set_attr \"prefix\" \"vex\")])\n-\n-(define_insn \"*k<logic>hi\"\n-  [(set (match_operand:HI 0 \"mask_reg_operand\" \"=k\")\n-\t(any_logic:HI (match_operand:HI 1 \"mask_reg_operand\" \"k\")\n-\t\t      (match_operand:HI 2 \"mask_reg_operand\" \"k\")))]\n-  \"TARGET_AVX512F\"\n-  \"k<logic>w\\t{%2, %1, %0|%0, %1, %2}\";\n-  [(set_attr \"mode\" \"HI\")\n-   (set_attr \"type\" \"msklog\")\n-   (set_attr \"prefix\" \"vex\")])\n-\n (define_insn \"*k<logic><mode>\"\n-  [(set (match_operand:SWI48x 0 \"mask_reg_operand\" \"=k\")\n-\t(any_logic:SWI48x (match_operand:SWI48x 1 \"mask_reg_operand\" \"k\")\n-\t\t\t  (match_operand:SWI48x 2 \"mask_reg_operand\" \"k\")))]\n-  \"TARGET_AVX512BW\"\n-  \"k<logic><mskmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\";\n+  [(set (match_operand:SWI1248_AVX512BW 0 \"mask_reg_operand\" \"=k\")\n+\t(any_logic:SWI1248_AVX512BW (match_operand:SWI1248_AVX512BW 1 \"mask_reg_operand\" \"k\")\n+\t\t\t  (match_operand:SWI1248_AVX512BW 2 \"mask_reg_operand\" \"k\")))]\n+  \"TARGET_AVX512F\"\n+  {\n+    if (!TARGET_AVX512DQ && <MODE>mode == QImode)\n+      return \"k<logic>w\\t{%2, %1, %0|%0, %1, %2}\";\n+    else\n+      return \"k<logic><mskmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\";\n+  }\n   [(set_attr \"mode\" \"<MODE>\")\n    (set_attr \"type\" \"msklog\")\n    (set_attr \"prefix\" \"vex\")])"}]}