{"sha": "3cbcb5d0cfcd1713867ded483cb81148e2ccf0fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NiY2I1ZDBjZmNkMTcxMzg2N2RlZDQ4M2NiODExNDhlMmNjZjBmYw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-05-13T11:41:17Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-05-17T09:46:05Z"}, "message": "LTO: merge -flto=foo both from IL and linker cmdline\n\ngcc/ChangeLog:\n\n\t* lto-wrapper.c (merge_flto_options): Factor out a new function.\n\t(merge_and_complain): Use it.\n\t(run_gcc): Merge also linker command line -flto=foo argument\n\twith IL files.", "tree": {"sha": "8bb7b3eacecc1b7e13ef7ae8380b7546acd1c948", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bb7b3eacecc1b7e13ef7ae8380b7546acd1c948"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cbcb5d0cfcd1713867ded483cb81148e2ccf0fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cbcb5d0cfcd1713867ded483cb81148e2ccf0fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cbcb5d0cfcd1713867ded483cb81148e2ccf0fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cbcb5d0cfcd1713867ded483cb81148e2ccf0fc/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b050cf6a4d9c305daff4a96e5a2489ece69dc287", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b050cf6a4d9c305daff4a96e5a2489ece69dc287", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b050cf6a4d9c305daff4a96e5a2489ece69dc287"}], "stats": {"total": 118, "additions": 65, "deletions": 53}, "files": [{"sha": "1c2643984f9f2e8017b21a48ded4ea5f691907a7", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 65, "deletions": 53, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbcb5d0cfcd1713867ded483cb81148e2ccf0fc/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbcb5d0cfcd1713867ded483cb81148e2ccf0fc/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=3cbcb5d0cfcd1713867ded483cb81148e2ccf0fc", "patch": "@@ -189,6 +189,37 @@ find_option (vec<cl_decoded_option> &options, cl_decoded_option *option)\n   return find_option (options, option->opt_index);\n }\n \n+/* Merge -flto FOPTION into vector of DECODED_OPTIONS.  */\n+\n+static void\n+merge_flto_options (vec<cl_decoded_option> &decoded_options,\n+\t\t    cl_decoded_option *foption)\n+{\n+  int existing_opt = find_option (decoded_options, foption);\n+  if (existing_opt == -1)\n+    decoded_options.safe_push (*foption);\n+  else\n+    {\n+      if (strcmp (foption->arg, decoded_options[existing_opt].arg) != 0)\n+\t{\n+\t  /* -flto=auto is preferred.  */\n+\t  if (strcmp (decoded_options[existing_opt].arg, \"auto\") == 0)\n+\t    ;\n+\t  else if (strcmp (foption->arg, \"auto\") == 0\n+\t\t   || strcmp (foption->arg, \"jobserver\") == 0)\n+\t    decoded_options[existing_opt].arg = foption->arg;\n+\t  else if (strcmp (decoded_options[existing_opt].arg,\n+\t\t\t   \"jobserver\") != 0)\n+\t    {\n+\t      int n = atoi (foption->arg);\n+\t      int original_n = atoi (decoded_options[existing_opt].arg);\n+\t      if (n > original_n)\n+\t\tdecoded_options[existing_opt].arg = foption->arg;\n+\t    }\n+\t}\n+    }\n+}\n+\n /* Try to merge and complain about options FDECODED_OPTIONS when applied\n    ontop of DECODED_OPTIONS.  */\n \n@@ -427,28 +458,7 @@ merge_and_complain (vec<cl_decoded_option> decoded_options,\n \t  break;\n \n \tcase OPT_flto_:\n-\t  if (existing_opt == -1)\n-\t    decoded_options.safe_push (*foption);\n-\t  else\n-\t    {\n-\t      if (strcmp (foption->arg, decoded_options[existing_opt].arg) != 0)\n-\t\t{\n-\t\t  /* -flto=auto is preferred.  */\n-\t\t  if (strcmp (decoded_options[existing_opt].arg, \"auto\") == 0)\n-\t\t    ;\n-\t\t  else if (strcmp (foption->arg, \"auto\") == 0\n-\t\t\t   || strcmp (foption->arg, \"jobserver\") == 0)\n-\t\t    decoded_options[existing_opt].arg = foption->arg;\n-\t\t  else if (strcmp (decoded_options[existing_opt].arg,\n-\t\t\t\t   \"jobserver\") != 0)\n-\t\t    {\n-\t\t      int n = atoi (foption->arg);\n-\t\t      int original_n = atoi (decoded_options[existing_opt].arg);\n-\t\t      if (n > original_n)\n-\t\t\tdecoded_options[existing_opt].arg = foption->arg;\n-\t\t    }\n-\t\t}\n-\t    }\n+\t  merge_flto_options (decoded_options, foption);\n \t  break;\n \t}\n     }\n@@ -1515,37 +1525,6 @@ run_gcc (unsigned argc, char *argv[])\n   append_compiler_options (&argv_obstack, fdecoded_options);\n   append_linker_options (&argv_obstack, decoded_options);\n \n-  /* Process LTO-related options on merged options.  */\n-  for (j = 1; j < fdecoded_options.length (); ++j)\n-    {\n-      cl_decoded_option *option = &fdecoded_options[j];\n-      switch (option->opt_index)\n-\t{\n-\tcase OPT_flto_:\n-\t  if (strcmp (option->arg, \"jobserver\") == 0)\n-\t    {\n-\t      parallel = 1;\n-\t      jobserver = 1;\n-\t    }\n-\t  else if (strcmp (option->arg, \"auto\") == 0)\n-\t    {\n-\t      parallel = 1;\n-\t      auto_parallel = 1;\n-\t    }\n-\t  else\n-\t    {\n-\t      parallel = atoi (option->arg);\n-\t      if (parallel <= 1)\n-\t\tparallel = 0;\n-\t    }\n-\t  /* Fallthru.  */\n-\n-\tcase OPT_flto:\n-\t  lto_mode = LTO_MODE_WHOPR;\n-\t  break;\n-\t}\n-    }\n-\n   /* Scan linker driver arguments for things that are of relevance to us.  */\n   for (j = 1; j < decoded_options.length (); ++j)\n     {\n@@ -1574,6 +1553,8 @@ run_gcc (unsigned argc, char *argv[])\n \t  break;\n \n \tcase OPT_flto_:\n+\t  /* Merge linker -flto= option with what we have in IL files.  */\n+\t  merge_flto_options (fdecoded_options, option);\n \t  if (strcmp (option->arg, \"jobserver\") == 0)\n \t    jobserver_requested = true;\n \t  break;\n@@ -1596,6 +1577,37 @@ run_gcc (unsigned argc, char *argv[])\n \t}\n     }\n \n+  /* Process LTO-related options on merged options.  */\n+  for (j = 1; j < fdecoded_options.length (); ++j)\n+    {\n+      cl_decoded_option *option = &fdecoded_options[j];\n+      switch (option->opt_index)\n+\t{\n+\tcase OPT_flto_:\n+\t  if (strcmp (option->arg, \"jobserver\") == 0)\n+\t    {\n+\t      parallel = 1;\n+\t      jobserver = 1;\n+\t    }\n+\t  else if (strcmp (option->arg, \"auto\") == 0)\n+\t    {\n+\t      parallel = 1;\n+\t      auto_parallel = 1;\n+\t    }\n+\t  else\n+\t    {\n+\t      parallel = atoi (option->arg);\n+\t      if (parallel <= 1)\n+\t\tparallel = 0;\n+\t    }\n+\t  /* Fallthru.  */\n+\n+\tcase OPT_flto:\n+\t  lto_mode = LTO_MODE_WHOPR;\n+\t  break;\n+\t}\n+    }\n+\n   /* Output lto-wrapper invocation command.  */\n   if (verbose)\n     {"}]}