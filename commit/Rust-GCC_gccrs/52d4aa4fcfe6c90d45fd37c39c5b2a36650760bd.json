{"sha": "52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJkNGFhNGZjZmU2YzkwZDQ1ZmQzN2MzOWM1YjJhMzY2NTA3NjBiZA==", "commit": {"author": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2018-08-08T10:55:56Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2018-08-08T10:55:56Z"}, "message": "S/390: Remove support for g5 and g6 machines\n\ng5 and g6 were deprecated since gcc 6.1.0 (commit 3bd8520f).\n\ngcc/ChangeLog:\n\n2018-08-08  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\t* common/config/s390/s390-common.c (processor_flags_table):\n        Remove flags.\n\t* config.gcc: Remove with_arch/with_tune support.\n\t* config/s390/2064.md: Remove cpu attribute comparisons.\n\t* config/s390/driver-native.c (s390_host_detect_local_cpu):\n        Remove MTN.\n\t* config/s390/linux.h (ASM_SPEC):\n        Remove -march support.\n\t* config/s390/s390-c.c (s390_cpu_cpp_builtins_internal):\n        Use a table to get an arch level.\n\t* config/s390/s390-opts.h (enum processor_type):\n        Remove enum values.\n\t* config/s390/s390.c\n        (processor_table): Remove entries, add arch_level values.\n        (s390_issue_rate): Remove cases.\n        (s390_option_override): Adjust\n        s390_option_override_internal() call.\n\t(s390_option_override_internal): Remove deprecation warning.\n        (s390_valid_target_attribute_tree): Adjust\n        s390_option_override_internal() call.\n\t* config/s390/s390.h (struct s390_processor):\n        Share with s390-c.c, add arch_level field.\n\t* config/s390/s390.md:\n        Remove occurrences in cpu attribute.\n\t* config/s390/s390.opt: Remove -march/-mtune support.\n\t* config/s390/tpf.h (ASM_SPEC): Remove -march support.\n\t* doc/invoke.texi: Remove deprecation warning.\n\ngcc/testsuite/ChangeLog:\n\n2018-08-08  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\t* gcc.target/s390/hotpatch-8.c: Remove.\n\t* gcc.target/s390/hotpatch-9.c: Remove.\n\t* gcc.target/s390/mnop-mcount-m31-fpic.c: Remove.\n\t* gcc.target/s390/mnop-mcount-m31.c: Remove.\n\nFrom-SVN: r263393", "tree": {"sha": "19a7b7a71df389e98af791587cc020b412d618c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19a7b7a71df389e98af791587cc020b412d618c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd/comments", "author": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e408261123697a82b5965c700fa2465999f0fd62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e408261123697a82b5965c700fa2465999f0fd62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e408261123697a82b5965c700fa2465999f0fd62"}], "stats": {"total": 248, "additions": 85, "deletions": 163}, "files": [{"sha": "75a79c688255d997a6326220c3ec646140a2dfef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd", "patch": "@@ -1,3 +1,33 @@\n+2018-08-08  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* common/config/s390/s390-common.c (processor_flags_table):\n+        Remove flags.\n+\t* config.gcc: Remove with_arch/with_tune support.\n+\t* config/s390/2064.md: Remove cpu attribute comparisons.\n+\t* config/s390/driver-native.c (s390_host_detect_local_cpu):\n+        Remove MTN.\n+\t* config/s390/linux.h (ASM_SPEC):\n+        Remove -march support.\n+\t* config/s390/s390-c.c (s390_cpu_cpp_builtins_internal):\n+        Use a table to get an arch level.\n+\t* config/s390/s390-opts.h (enum processor_type):\n+        Remove enum values.\n+\t* config/s390/s390.c\n+        (processor_table): Remove entries, add arch_level values.\n+        (s390_issue_rate): Remove cases.\n+        (s390_option_override): Adjust\n+        s390_option_override_internal() call.\n+\t(s390_option_override_internal): Remove deprecation warning.\n+        (s390_valid_target_attribute_tree): Adjust\n+        s390_option_override_internal() call.\n+\t* config/s390/s390.h (struct s390_processor):\n+        Share with s390-c.c, add arch_level field.\n+\t* config/s390/s390.md:\n+        Remove occurrences in cpu attribute.\n+\t* config/s390/s390.opt: Remove -march/-mtune support.\n+\t* config/s390/tpf.h (ASM_SPEC): Remove -march support.\n+\t* doc/invoke.texi: Remove deprecation warning.\n+\n 2018-08-08  Luis Machado  <luis.machado@linaro.org>\n \n \t* config/aarch64/aarch64.c (qdf24xx_vector_cost): New static"}, {"sha": "a56443c03397b03787c9f03880e16a6f6be0d6d1", "filename": "gcc/common/config/s390/s390-common.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd/gcc%2Fcommon%2Fconfig%2Fs390%2Fs390-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd/gcc%2Fcommon%2Fconfig%2Fs390%2Fs390-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fs390%2Fs390-common.c?ref=52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd", "patch": "@@ -29,8 +29,6 @@ along with GCC; see the file COPYING3.  If not see\n \n EXPORTED_CONST int processor_flags_table[] =\n   {\n-    /* g5 */     PF_IEEE_FLOAT,\n-    /* g6 */     PF_IEEE_FLOAT,\n     /* z900 */   PF_IEEE_FLOAT | PF_ZARCH,\n     /* z990 */   PF_IEEE_FLOAT | PF_ZARCH | PF_LONG_DISPLACEMENT,\n     /* z9-109 */ PF_IEEE_FLOAT | PF_ZARCH | PF_LONG_DISPLACEMENT"}, {"sha": "f777a28e3ad6a7a059bd9e9ea8fc146db02daa03", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd", "patch": "@@ -4574,7 +4574,7 @@ case \"${target}\" in\n \t\tfor which in arch tune; do\n \t\t\teval \"val=\\$with_$which\"\n \t\t\tcase ${val} in\n-\t\t\t\"\" | native | g5 | g6 | z900 | z990 | z9-109 | z9-ec | z10 | z196 | zEC12 | z13 | z14 | arch3 | arch5 | arch6 | arch7 | arch8 | arch9 | arch10 | arch11 | arch12)\n+\t\t\t\"\" | native | z900 | z990 | z9-109 | z9-ec | z10 | z196 | zEC12 | z13 | z14 | arch5 | arch6 | arch7 | arch8 | arch9 | arch10 | arch11 | arch12)\n \t\t\t\t# OK\n \t\t\t\t;;\n \t\t\t*)"}, {"sha": "4a73446ce37bd61a9f959a99701d80ecf56cc480", "filename": "gcc/config/s390/2064.md", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd/gcc%2Fconfig%2Fs390%2F2064.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd/gcc%2Fconfig%2Fs390%2F2064.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2F2064.md?ref=52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd", "patch": "@@ -39,63 +39,61 @@\n ;;                  |\n ;;                  wr\n \n-;; This scheduler description is also used for the g5 and g6.\n-\n (define_automaton \"z_ipu\")\n (define_cpu_unit \"z_e1\"   \"z_ipu\")\n (define_cpu_unit \"z_wr\"   \"z_ipu\")\n \n \n (define_insn_reservation \"z_la\" 1\n-  (and (eq_attr \"cpu\" \"z900,g5,g6\")\n+  (and (eq_attr \"cpu\" \"z900\")\n        (eq_attr \"type\" \"la\"))\n   \"z_e1,z_wr\")\n \n (define_insn_reservation \"z_larl\" 1\n-  (and (eq_attr \"cpu\" \"z900,g5,g6\")\n+  (and (eq_attr \"cpu\" \"z900\")\n        (eq_attr \"type\" \"larl\"))\n   \"z_e1,z_wr\")\n \n (define_insn_reservation \"z_load\" 1\n-  (and (eq_attr \"cpu\" \"z900,g5,g6\")\n+  (and (eq_attr \"cpu\" \"z900\")\n        (eq_attr \"type\" \"load\"))\n   \"z_e1,z_wr\")\n \n (define_insn_reservation \"z_store\" 1\n-  (and (eq_attr \"cpu\" \"z900,g5,g6\")\n+  (and (eq_attr \"cpu\" \"z900\")\n        (eq_attr \"type\" \"store\"))\n   \"z_e1,z_wr\")\n \n (define_insn_reservation \"z_sem\" 2\n-  (and (eq_attr \"cpu\" \"z900,g5,g6\")\n+  (and (eq_attr \"cpu\" \"z900\")\n        (eq_attr \"type\" \"sem\"))\n   \"z_e1*2,z_wr\")\n \n (define_insn_reservation \"z_call\" 5\n-  (and (eq_attr \"cpu\" \"z900,g5,g6\")\n+  (and (eq_attr \"cpu\" \"z900\")\n        (eq_attr \"type\" \"jsr\"))\n   \"z_e1*5,z_wr\")\n \n (define_insn_reservation \"z_mul\" 5\n-  (and (eq_attr \"cpu\" \"g5,g6,z900\")\n+  (and (eq_attr \"cpu\" \"z900\")\n        (eq_attr \"type\" \"imulsi,imulhi\"))\n   \"z_e1*5,z_wr\")\n \n (define_insn_reservation \"z_inf\" 10\n-  (and (eq_attr \"cpu\" \"g5,g6,z900\")\n+  (and (eq_attr \"cpu\" \"z900\")\n        (eq_attr \"type\" \"idiv,imuldi\"))\n   \"z_e1*10,z_wr\")\n \n ;; For everything else we check the atype flag.\n \n (define_insn_reservation \"z_int\" 1\n-  (and (eq_attr \"cpu\" \"z900,g5,g6\")\n+  (and (eq_attr \"cpu\" \"z900\")\n        (and (not (eq_attr \"type\" \"la,larl,load,store,jsr\"))\n             (eq_attr \"atype\" \"reg\")))\n   \"z_e1,z_wr\")\n \n (define_insn_reservation \"z_agen\" 1\n-  (and (eq_attr \"cpu\" \"z900,g5,g6\")\n+  (and (eq_attr \"cpu\" \"z900\")\n        (and (not (eq_attr \"type\" \"la,larl,load,store,jsr\"))\n             (eq_attr \"atype\" \"agen\")))\n   \"z_e1,z_wr\")"}, {"sha": "4b2dd6e1ae8d11b04139a771f384eeddd4dbb2c5", "filename": "gcc/config/s390/driver-native.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd/gcc%2Fconfig%2Fs390%2Fdriver-native.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd/gcc%2Fconfig%2Fs390%2Fdriver-native.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fdriver-native.c?ref=52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd", "patch": "@@ -86,8 +86,6 @@ s390_host_detect_local_cpu (int argc, const char **argv)\n \t  machine_id = strtol (p, NULL, 16);\n \t  switch (machine_id)\n \t    {\n-\t      /* g5 and g6 default to z900 */\n-\t    case 0x9672:\n \t    case 0x2064:\n \t    case 0x2066:\n \t      cpu = \"z900\";"}, {"sha": "480030a02fc9114c8f11cd4396fdf12da989886b", "filename": "gcc/config/s390/linux.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd/gcc%2Fconfig%2Fs390%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd/gcc%2Fconfig%2Fs390%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Flinux.h?ref=52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd", "patch": "@@ -55,7 +55,6 @@ along with GCC; see the file COPYING3.  If not see\n #undef  ASM_SPEC\n #define ASM_SPEC\t\t\t\t\t\\\n   \"%{m31&m64}%{mesa&mzarch}%{march=z*}\"\t\t\t\\\n-  \"%{march=arch3:-march=g5}\"\t\t\t\t\\\n   \"%{march=arch5:-march=z900}\"\t\t\t\t\\\n   \"%{march=arch6:-march=z990}\"\t\t\t\t\\\n   \"%{march=arch7:-march=z9-ec}\"\t\t\t\t\\"}, {"sha": "77f3abb664b5b47332653c2357048209a5cc3615", "filename": "gcc/config/s390/s390-c.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd/gcc%2Fconfig%2Fs390%2Fs390-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd/gcc%2Fconfig%2Fs390%2Fs390-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-c.c?ref=52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd", "patch": "@@ -335,15 +335,8 @@ s390_cpu_cpp_builtins_internal (cpp_reader *pfile,\n \t\t\t   \"__bool\");\n   {\n     char macro_def[64];\n-    int arch_level;\n     gcc_assert (s390_arch != PROCESSOR_NATIVE);\n-    arch_level = (int)s390_arch + 3;\n-    if (s390_arch >= PROCESSOR_2094_Z9_EC)\n-      /* Z9_EC has the same level as Z9_109.  */\n-      arch_level--;\n-    /* Review when a new arch is added and increase the value.  */\n-    char dummy[(PROCESSOR_max > 12) ? -1 : 1] __attribute__((unused));\n-    sprintf (macro_def, \"__ARCH__=%d\", arch_level);\n+    sprintf (macro_def, \"__ARCH__=%d\", processor_table[s390_arch].arch_level);\n     cpp_undef (pfile, \"__ARCH__\");\n     cpp_define (pfile, macro_def);\n   }"}, {"sha": "3c06432f7ae26dc04f3c80ee53e91b0eaa125b8a", "filename": "gcc/config/s390/s390-opts.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd/gcc%2Fconfig%2Fs390%2Fs390-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd/gcc%2Fconfig%2Fs390%2Fs390-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-opts.h?ref=52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd", "patch": "@@ -20,16 +20,14 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef S390_OPTS_H\n #define S390_OPTS_H\n \n-/* Which processor to generate code or schedule for. The cpu attribute\n+/* Which processor to generate code or schedule for. The `cpu' attribute\n    defines a list that mirrors this list, so changes to s390.md must be\n-   made at the same time.  The enumeration must also be kept in snyc with\n-   processor_table in s390.c (the enumeration values are used as indices into\n-   the table).  */\n+   made at the same time.  The enumeration must also be kept in sync with\n+   `processor_table' and `processor_flags_table' in s390.c (the enumeration\n+   values are used as indices into these tables).  */\n \n enum processor_type\n {\n-  PROCESSOR_9672_G5,\n-  PROCESSOR_9672_G6,\n   PROCESSOR_2064_Z900,\n   PROCESSOR_2084_Z990,\n   PROCESSOR_2094_Z9_109,"}, {"sha": "24d875f5fa56347efe63fabe74c21107dcf67956", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 15, "deletions": 58, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd", "patch": "@@ -326,29 +326,18 @@ struct processor_costs zEC12_cost =\n   COSTS_N_INSNS (160),   /* DSGR cracked */\n };\n \n-static struct\n-{\n-  /* The preferred name to be used in user visible output.  */\n-  const char *const name;\n-  /* CPU name as it should be passed to Binutils via .machine  */\n-  const char *const binutils_name;\n-  const enum processor_type processor;\n-  const struct processor_costs *cost;\n-}\n-const processor_table[] =\n-{\n-  { \"g5\",     \"g5\",     PROCESSOR_9672_G5,     &z900_cost },\n-  { \"g6\",     \"g6\",     PROCESSOR_9672_G6,     &z900_cost },\n-  { \"z900\",   \"z900\",   PROCESSOR_2064_Z900,   &z900_cost },\n-  { \"z990\",   \"z990\",   PROCESSOR_2084_Z990,   &z990_cost },\n-  { \"z9-109\", \"z9-109\", PROCESSOR_2094_Z9_109, &z9_109_cost },\n-  { \"z9-ec\",  \"z9-ec\",  PROCESSOR_2094_Z9_EC,  &z9_109_cost },\n-  { \"z10\",    \"z10\",    PROCESSOR_2097_Z10,    &z10_cost },\n-  { \"z196\",   \"z196\",   PROCESSOR_2817_Z196,   &z196_cost },\n-  { \"zEC12\",  \"zEC12\",  PROCESSOR_2827_ZEC12,  &zEC12_cost },\n-  { \"z13\",    \"z13\",    PROCESSOR_2964_Z13,    &zEC12_cost },\n-  { \"z14\",    \"arch12\", PROCESSOR_3906_Z14,    &zEC12_cost },\n-  { \"native\", \"\",       PROCESSOR_NATIVE,      NULL }\n+const struct s390_processor processor_table[] =\n+{\n+  { \"z900\",   \"z900\",   PROCESSOR_2064_Z900,   &z900_cost,   5  },\n+  { \"z990\",   \"z990\",   PROCESSOR_2084_Z990,   &z990_cost,   6  },\n+  { \"z9-109\", \"z9-109\", PROCESSOR_2094_Z9_109, &z9_109_cost, 7  },\n+  { \"z9-ec\",  \"z9-ec\",  PROCESSOR_2094_Z9_EC,  &z9_109_cost, 7  },\n+  { \"z10\",    \"z10\",    PROCESSOR_2097_Z10,    &z10_cost,    8  },\n+  { \"z196\",   \"z196\",   PROCESSOR_2817_Z196,   &z196_cost,   9  },\n+  { \"zEC12\",  \"zEC12\",  PROCESSOR_2827_ZEC12,  &zEC12_cost,  10 },\n+  { \"z13\",    \"z13\",    PROCESSOR_2964_Z13,    &zEC12_cost,  11 },\n+  { \"z14\",    \"arch12\", PROCESSOR_3906_Z14,    &zEC12_cost,  12 },\n+  { \"native\", \"\",       PROCESSOR_NATIVE,      NULL,         0  }\n };\n \n extern int reload_completed;\n@@ -8190,8 +8179,6 @@ s390_issue_rate (void)\n       return 3;\n     case PROCESSOR_2097_Z10:\n       return 2;\n-    case PROCESSOR_9672_G5:\n-    case PROCESSOR_9672_G6:\n     case PROCESSOR_2064_Z900:\n       /* Starting with EC12 we use the sched_reorder hook to take care\n \t of instruction dispatch constraints.  The algorithm only\n@@ -15457,27 +15444,9 @@ s390_override_options_after_change (void)\n }\n \n static void\n-s390_option_override_internal (bool main_args_p,\n-\t\t\t       struct gcc_options *opts,\n+s390_option_override_internal (struct gcc_options *opts,\n \t\t\t       const struct gcc_options *opts_set)\n {\n-  const char *prefix;\n-  const char *suffix;\n-\n-  /* Set up prefix/suffix so the error messages refer to either the command\n-     line argument, or the attribute(target).  */\n-  if (main_args_p)\n-    {\n-      prefix = \"-m\";\n-      suffix = \"\";\n-    }\n-  else\n-    {\n-      prefix = \"option(\\\"\";\n-      suffix = \"\\\")\";\n-    }\n-\n-\n   /* Architecture mode defaults according to ABI.  */\n   if (!(opts_set->x_target_flags & MASK_ZARCH))\n     {\n@@ -15490,24 +15459,12 @@ s390_option_override_internal (bool main_args_p,\n   /* Set the march default in case it hasn't been specified on cmdline.  */\n   if (!opts_set->x_s390_arch)\n     opts->x_s390_arch = PROCESSOR_2064_Z900;\n-  else if (opts->x_s390_arch == PROCESSOR_9672_G5\n-\t   || opts->x_s390_arch == PROCESSOR_9672_G6)\n-    warning (OPT_Wdeprecated, \"%sarch=%s%s is deprecated and will be removed \"\n-\t     \"in future releases; use at least %sarch=z900%s\",\n-\t     prefix, opts->x_s390_arch == PROCESSOR_9672_G5 ? \"g5\" : \"g6\",\n-\t     suffix, prefix, suffix);\n \n   opts->x_s390_arch_flags = processor_flags_table[(int) opts->x_s390_arch];\n \n   /* Determine processor to tune for.  */\n   if (!opts_set->x_s390_tune)\n     opts->x_s390_tune = opts->x_s390_arch;\n-  else if (opts->x_s390_tune == PROCESSOR_9672_G5\n-\t   || opts->x_s390_tune == PROCESSOR_9672_G6)\n-    warning (OPT_Wdeprecated, \"%stune=%s%s is deprecated and will be removed \"\n-\t     \"in future releases; use at least %stune=z900%s\",\n-\t     prefix, opts->x_s390_tune == PROCESSOR_9672_G5 ? \"g5\" : \"g6\",\n-\t     suffix, prefix, suffix);\n \n   opts->x_s390_tune_flags = processor_flags_table[opts->x_s390_tune];\n \n@@ -15763,7 +15720,7 @@ s390_option_override (void)\n   /* Set up function hooks.  */\n   init_machine_status = s390_init_machine_status;\n \n-  s390_option_override_internal (true, &global_options, &global_options_set);\n+  s390_option_override_internal (&global_options, &global_options_set);\n \n   /* Save the initial options in case the user does function specific\n      options.  */\n@@ -16068,7 +16025,7 @@ s390_valid_target_attribute_tree (tree args,\n \tdest[i] |= src[i];\n \n       /* Do any overrides, such as arch=xxx, or tune=xxx support.  */\n-      s390_option_override_internal (false, opts, &new_opts_set);\n+      s390_option_override_internal (opts, &new_opts_set);\n       /* Save the current options unless we are validating options for\n \t #pragma.  */\n       t = build_target_option_node (opts);"}, {"sha": "95f40d9e2679b7626e40e58f8e9afab9c4007b48", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd", "patch": "@@ -1029,6 +1029,19 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n extern const int processor_flags_table[];\n \n+struct s390_processor\n+{\n+  /* The preferred name to be used in user visible output.  */\n+  const char *const name;\n+  /* CPU name as it should be passed to Binutils via .machine  */\n+  const char *const binutils_name;\n+  const enum processor_type processor;\n+  const struct processor_costs *cost;\n+  int arch_level;\n+};\n+\n+extern const struct s390_processor processor_table[];\n+\n /* The truth element value for vector comparisons.  Our instructions\n    always generate -1 in that case.  */\n #define VECTOR_STORE_FLAG_VALUE(MODE) CONSTM1_RTX (GET_MODE_INNER (MODE))"}, {"sha": "c86c52c4436ad2c32e1fbc0f55b6cb8455197a8d", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd", "patch": "@@ -492,11 +492,9 @@\n \n \n ;; Processor type.  This attribute must exactly match the processor_type\n-;; enumeration in s390.h.  The current machine description does not\n-;; distinguish between g5 and g6, but there are differences between the two\n-;; CPUs could in theory be modeled.\n+;; enumeration in s390.h.\n \n-(define_attr \"cpu\" \"g5,g6,z900,z990,z9_109,z9_ec,z10,z196,zEC12,z13,arch12\"\n+(define_attr \"cpu\" \"z900,z990,z9_109,z9_ec,z10,z196,zEC12,z13,arch12\"\n   (const (symbol_ref \"s390_tune_attr\")))\n \n (define_attr \"cpu_facility\"\n@@ -561,8 +559,7 @@\n \t ]\n \t(const_int 0)))\n \n-;; Pipeline description for z900.  For lack of anything better,\n-;; this description is also used for the g5 and g6.\n+;; Pipeline description for z900.\n (include \"2064.md\")\n \n ;; Pipeline description for z990, z9-109 and z9-ec."}, {"sha": "c56ecebd67be96d1d1cbc32cba45334f33306ca3", "filename": "gcc/config/s390/s390.opt", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd/gcc%2Fconfig%2Fs390%2Fs390.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd/gcc%2Fconfig%2Fs390%2Fs390.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.opt?ref=52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd", "patch": "@@ -58,15 +58,6 @@ Generate code for given CPU.\n Enum\n Name(processor_type) Type(enum processor_type)\n \n-EnumValue\n-Enum(processor_type) String(g5) Value(PROCESSOR_9672_G5)\n-\n-EnumValue\n-Enum(processor_type) String(arch3) Value(PROCESSOR_9672_G5)\n-\n-EnumValue\n-Enum(processor_type) String(g6) Value(PROCESSOR_9672_G6)\n-\n EnumValue\n Enum(processor_type) String(z900) Value(PROCESSOR_2064_Z900)\n "}, {"sha": "5a363f021f720b98bd452d52febba9d2f6ebe7ad", "filename": "gcc/config/s390/tpf.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd/gcc%2Fconfig%2Fs390%2Ftpf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd/gcc%2Fconfig%2Fs390%2Ftpf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Ftpf.h?ref=52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd", "patch": "@@ -94,7 +94,6 @@ along with GCC; see the file COPYING3.  If not see\n #undef  ASM_SPEC\n #define ASM_SPEC\t\t\t\t\t\\\n   \"%{m31&m64}%{mesa&mzarch}%{march=z*}\"\t\t\t\\\n-  \"%{march=arch3:-march=g5}\"\t\t\t\t\\\n   \"%{march=arch5:-march=z900}\"\t\t\t\t\\\n   \"%{march=arch6:-march=z990}\"\t\t\t\t\\\n   \"%{march=arch7:-march=z9-ec}\"\t\t\t\t\\"}, {"sha": "1de89680b2769e166e2c8d9386894233b0b27ff8", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd", "patch": "@@ -24857,8 +24857,7 @@ system representing a certain processor type.  Possible values for\n @samp{z196}/@samp{arch9}, @samp{zEC12}, @samp{z13}/@samp{arch11}, and\n @samp{native}.\n \n-The default is @option{-march=z900}.  @samp{g5}/@samp{arch3} and\n-@samp{g6} are deprecated and will be removed with future releases.\n+The default is @option{-march=z900}.\n \n Specifying @samp{native} as cpu type can be used to select the best\n architecture option for the host processor."}, {"sha": "ccfd013611abe9b6cbe32cc316dec4244e528999", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=52d4aa4fcfe6c90d45fd37c39c5b2a36650760bd", "patch": "@@ -1,3 +1,10 @@\n+2018-08-08  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* gcc.target/s390/hotpatch-8.c: Remove.\n+\t* gcc.target/s390/hotpatch-9.c: Remove.\n+\t* gcc.target/s390/mnop-mcount-m31-fpic.c: Remove.\n+\t* gcc.target/s390/mnop-mcount-m31.c: Remove.\n+\n 2018-08-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tP0595R1 - is_constant_evaluated"}, {"sha": "a2fb83f29777197dded99f6405c466f18f4b0b80", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e408261123697a82b5965c700fa2465999f0fd62/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e408261123697a82b5965c700fa2465999f0fd62/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-8.c?ref=e408261123697a82b5965c700fa2465999f0fd62", "patch": "@@ -1,20 +0,0 @@\n-/* Functional tests for the function hotpatching feature.  */\n-\n-/* { dg-do compile { target { ! lp64 } } } */\n-/* { dg-options \"-mesa -march=g5 -Wno-deprecated -mhotpatch=0,3\" } */\n-/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-O*\" } } */\n-\n-#include <stdio.h>\n-\n-void hp1(void)\n-{\n-  printf(\"hello, world!\\n\");\n-}\n-\n-/* Check number of occurences of certain instructions.  */\n-/* { dg-final { scan-assembler-not \"pre-label NOPs\" } } */\n-/* { dg-final { scan-assembler \"^\\[^.\\].*:\\n.*post-label.*(3 halfwords).*\\n\\(\\(.L.*:\\n\\)\\|\\(\\[\\[:space:\\]\\]*.cfi_.*\\n\\)\\)*\\[\\[:space:\\]\\]*nop\\t0\" } } */\n-/* { dg-final { scan-assembler-times \"nopr\\t%r0\" 1 } } */\n-/* { dg-final { scan-assembler-times \"nop\\t0\" 1 } } */\n-/* { dg-final { scan-assembler-not \"brcl\\t0, 0\" } } */\n-/* { dg-final { scan-assembler-not \"alignment for hotpatch\" } } */"}, {"sha": "34fae55d3ada7402865255db226aaf277e8139bf", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-9.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e408261123697a82b5965c700fa2465999f0fd62/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e408261123697a82b5965c700fa2465999f0fd62/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-9.c?ref=e408261123697a82b5965c700fa2465999f0fd62", "patch": "@@ -1,19 +0,0 @@\n-/* Functional tests for the function hotpatching feature.  */\n-\n-/* { dg-do compile { target { ! lp64 } } } */\n-/* { dg-options \"-mesa -march=g5 -Wno-deprecated -mhotpatch=0,4\" } */\n-/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-O*\" } } */\n-\n-#include <stdio.h>\n-\n-void hp1(void)\n-{\n-  printf(\"hello, world!\\n\");\n-}\n-\n-/* Check number of occurences of certain instructions.  */\n-/* { dg-final { scan-assembler-not \"pre-label NOPs\" } } */\n-/* { dg-final { scan-assembler \"^\\[^.\\].*:\\n.*post-label.*(4 halfwords).*\\n\\(\\(.L.*:\\n\\)\\|\\(\\[\\[:space:\\]\\]*.cfi_.*\\n\\)\\)*\\[\\[:space:\\]\\]*nop\\t0\" } } */\n-/* { dg-final { scan-assembler-not \"nopr\\t%r0\" } } */\n-/* { dg-final { scan-assembler-times \"nop\\t0\" 2 } } */\n-/* { dg-final { scan-assembler-not \"brcl\\t0, 0\" } } */"}, {"sha": "5b00ab65668542c10f6c4451833926ff113771b9", "filename": "gcc/testsuite/gcc.target/s390/mnop-mcount-m31-fpic.c", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e408261123697a82b5965c700fa2465999f0fd62/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmnop-mcount-m31-fpic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e408261123697a82b5965c700fa2465999f0fd62/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmnop-mcount-m31-fpic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmnop-mcount-m31-fpic.c?ref=e408261123697a82b5965c700fa2465999f0fd62", "patch": "@@ -1,8 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-m31 -mesa -march=g5 -fPIC -pg -mnop-mcount -Wno-deprecated\" } */\n-\n-void\n-profileme (void)\n-{\n-  /* { dg-final { scan-assembler \"NOPs for -mnop-mcount \\\\(16 halfwords\\\\)\\n.*bc\\t0,0\\n.*bc\\t0,0\\n.*bc\\t0,0\\n.*bc\\t0,0\\n.*bc\\t0,0\\n.*bc\\t0,0\\n.*bc\\t0,0\\n.*bc\\t0,0\" } } */\n-}"}, {"sha": "e64c8d7d7bcef043545cb033b31e6bd9b2cea016", "filename": "gcc/testsuite/gcc.target/s390/mnop-mcount-m31.c", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e408261123697a82b5965c700fa2465999f0fd62/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmnop-mcount-m31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e408261123697a82b5965c700fa2465999f0fd62/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmnop-mcount-m31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmnop-mcount-m31.c?ref=e408261123697a82b5965c700fa2465999f0fd62", "patch": "@@ -1,8 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-m31 -mesa -march=g5 -pg -mnop-mcount -Wno-deprecated\" } */\n-\n-void\n-profileme (void)\n-{\n-  /* { dg-final { scan-assembler \"NOPs for -mnop-mcount \\\\(15 halfwords\\\\)\\n.*bc\\t0,0\\n.*bc\\t0,0\\n.*bc\\t0,0\\n.*bc\\t0,0\\n.*bc\\t0,0\\n.*bc\\t0,0\\n.*bc\\t0,0\\n.*bcr\\t0,0\" } } */\n-}"}]}