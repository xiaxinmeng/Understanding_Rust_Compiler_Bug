{"sha": "4710d3eb4bb35cc3d3792bad8452c4863634dfdc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDcxMGQzZWI0YmIzNWNjM2QzNzkyYmFkODQ1MmM0ODYzNjM0ZGZkYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2000-03-06T18:51:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2000-03-06T18:51:52Z"}, "message": "real.h (MAX_LONG_DOUBLE_TYPE_SIZE): Define to LONG_DOUBLE_TYPE_SIZE if not defined.\n\n\t* real.h (MAX_LONG_DOUBLE_TYPE_SIZE): Define to\n\tLONG_DOUBLE_TYPE_SIZE if not defined.\n\tUse MAX_LONG_DOUBLE_TYPE_SIZE instead of\n\tLONG_DOUBLE_TYPE_SIZE in preprocessor if clauses.\n\t* real.c: Likewise.\n\t* gengenrtl.c: Likewise.\n\t* print-rtl.c: Likewise.\n\t* rtl.c: Likewise.\n\t* config/sparc/sol2-sld-64.h (TARGET_DEFAULT): Set\n\tMASK_LONG_DOUBLE_128.\n\t* config/sparc/sol2.h (TARGET_DEFAULT): Likewise.\n\t* config/sparc/sp64-elf.h (TARGET_DEFAULT): Likewise.\n\t* config/sparc/linux64 (TARGET_DEFAULT): Likewise.\n\t(SUBTARGET_SWITCHES): Define.\n\t(CPP_ARCH32_SPEC): Define __LONG_DOUBLE_128__ if compiling\n\twith -mlong-double-128.\n\t(LONG_DOUBLE_TYPE_SIZE): Define depending on target_flags.\n\t(MAX_LONG_DOUBLE_TYPE_SIZE): Define.\n\t(LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Define depending on CPP macros.\n\t(CC1_SPEC): Include -mlong-double-{64,128} as needed.\n\t* config/sparc/linux.h (SUBTARGET_SWITCHES): Define.\n\t(CPP_SUBTARGET_SPEC): Define __LONG_DOUBLE_128__ if compiling\n\twith -mlong-double-128.\n\t(LONG_DOUBLE_TYPE_SIZE): Define depending on target_flags.\n\t(MAX_LONG_DOUBLE_TYPE_SIZE): Define.\n\t(LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Define depending on CPP macros.\n\t* config/sparc/sparc.h (MASK_LONG_DOUBLE_128,\n\tTARGET_LONG_DOUBLE_128): Define.\n\t* config/sparc/linux-aout.h (LONG_DOUBLE_TYPE_SIZE): Remove.\n\t* config/sparc/sparc.c (sparc_override_options): Disallow 64bit\n\tlong double on TARGET_ARCH64.\n\nFrom-SVN: r32367", "tree": {"sha": "251c088773457d9c51cd7f6ce790406d85595dd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/251c088773457d9c51cd7f6ce790406d85595dd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4710d3eb4bb35cc3d3792bad8452c4863634dfdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4710d3eb4bb35cc3d3792bad8452c4863634dfdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4710d3eb4bb35cc3d3792bad8452c4863634dfdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4710d3eb4bb35cc3d3792bad8452c4863634dfdc/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6149cebb5271f69e7e12bb5bf874fb7f5a149084", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6149cebb5271f69e7e12bb5bf874fb7f5a149084", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6149cebb5271f69e7e12bb5bf874fb7f5a149084"}], "stats": {"total": 162, "additions": 122, "deletions": 40}, "files": [{"sha": "de22acd581334fbfd0ed881ddd17efb46af1af14", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4710d3eb4bb35cc3d3792bad8452c4863634dfdc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4710d3eb4bb35cc3d3792bad8452c4863634dfdc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4710d3eb4bb35cc3d3792bad8452c4863634dfdc", "patch": "@@ -37,6 +37,38 @@\n \t* config/sparc/sparc.h (ASM_ARCH64_SPEC): Pass -no-undeclared-regs\n \tto gas if it supports .register pseudo.\n \n+\t* real.h (MAX_LONG_DOUBLE_TYPE_SIZE): Define to\n+\tLONG_DOUBLE_TYPE_SIZE if not defined.\n+\tUse MAX_LONG_DOUBLE_TYPE_SIZE instead of\n+\tLONG_DOUBLE_TYPE_SIZE in preprocessor if clauses.\n+\t* real.c: Likewise.\n+\t* gengenrtl.c: Likewise.\n+\t* print-rtl.c: Likewise.\n+\t* rtl.c: Likewise.\n+\t* config/sparc/sol2-sld-64.h (TARGET_DEFAULT): Set\n+\tMASK_LONG_DOUBLE_128.\n+\t* config/sparc/sol2.h (TARGET_DEFAULT): Likewise.\n+\t* config/sparc/sp64-elf.h (TARGET_DEFAULT): Likewise.\n+\t* config/sparc/linux64 (TARGET_DEFAULT): Likewise.\n+\t(SUBTARGET_SWITCHES): Define.\n+\t(CPP_ARCH32_SPEC): Define __LONG_DOUBLE_128__ if compiling\n+\twith -mlong-double-128.\n+\t(LONG_DOUBLE_TYPE_SIZE): Define depending on target_flags.\n+\t(MAX_LONG_DOUBLE_TYPE_SIZE): Define.\n+\t(LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Define depending on CPP macros.\n+\t(CC1_SPEC): Include -mlong-double-{64,128} as needed.\n+\t* config/sparc/linux.h (SUBTARGET_SWITCHES): Define.\n+\t(CPP_SUBTARGET_SPEC): Define __LONG_DOUBLE_128__ if compiling\n+\twith -mlong-double-128.\n+\t(LONG_DOUBLE_TYPE_SIZE): Define depending on target_flags.\n+\t(MAX_LONG_DOUBLE_TYPE_SIZE): Define.\n+\t(LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Define depending on CPP macros.\n+\t* config/sparc/sparc.h (MASK_LONG_DOUBLE_128,\n+\tTARGET_LONG_DOUBLE_128): Define.\n+\t* config/sparc/linux-aout.h (LONG_DOUBLE_TYPE_SIZE): Remove.\n+\t* config/sparc/sparc.c (sparc_override_options): Disallow 64bit\n+\tlong double on TARGET_ARCH64.\n+\n 2000-03-06  Mark Mitchell  <mark@codesourcery.com>\n \n \t* function.c (free_temps_for_rtl_expr): Don't free slots"}, {"sha": "74ddd92e5da85200a1d04578caae3a62859f6abf", "filename": "gcc/config/sparc/linux-aout.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4710d3eb4bb35cc3d3792bad8452c4863634dfdc/gcc%2Fconfig%2Fsparc%2Flinux-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4710d3eb4bb35cc3d3792bad8452c4863634dfdc/gcc%2Fconfig%2Fsparc%2Flinux-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux-aout.h?ref=4710d3eb4bb35cc3d3792bad8452c4863634dfdc", "patch": "@@ -101,13 +101,6 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_SPEC\n #define ASM_SPEC \\\n   \"%{V} %{v:%{!V:-V}} %{n} %{T} %{Ym,*} %{Wa,*:%*} -s %{fpic:-K PIC} %{fPIC:-K PIC}\"\n-\n-#if 0\n-/* Define for support of TFmode long double and REAL_ARITHMETIC.\n-   Sparc ABI says that long double is 4 words. GNU/Linux does not support\n-   long double yet.  */\n-#define LONG_DOUBLE_TYPE_SIZE 128\n-#endif\n \f\n /* No weird SPARC variants on Linux */\n #undef TARGET_LIVE_G0"}, {"sha": "630ca9c45ad017b88f3dc1556933e21f3e676928", "filename": "gcc/config/sparc/linux.h", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4710d3eb4bb35cc3d3792bad8452c4863634dfdc/gcc%2Fconfig%2Fsparc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4710d3eb4bb35cc3d3792bad8452c4863634dfdc/gcc%2Fconfig%2Fsparc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux.h?ref=4710d3eb4bb35cc3d3792bad8452c4863634dfdc", "patch": "@@ -87,6 +87,11 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (sparc GNU/Linux with ELF)\");\n \n+#undef SUBTARGET_SWITCHES\n+#define SUBTARGET_SWITCHES \\\n+{\"long-double-64\", -MASK_LONG_DOUBLE_128, \"Use 64 bit long doubles\" }, \\\n+{\"long-double-128\", MASK_LONG_DOUBLE_128, \"Use 128 bit long doubles\" },\n+\n #undef SIZE_TYPE\n #define SIZE_TYPE \"unsigned int\"\n  \n@@ -107,10 +112,12 @@ Boston, MA 02111-1307, USA.  */\n #undef CPP_SUBTARGET_SPEC\n #ifdef USE_GNULIBC_1\n #define CPP_SUBTARGET_SPEC \\\n-\"%{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} %{posix:-D_POSIX_SOURCE}\"\n+\"%{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} %{posix:-D_POSIX_SOURCE} \\\n+%{mlong-double-128:-D__LONG_DOUBLE_128__}\"\n #else\n #define CPP_SUBTARGET_SPEC \\\n-\"%{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} %{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n+\"%{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} %{posix:-D_POSIX_SOURCE} \\\n+%{pthread:-D_REENTRANT} %{mlong-double-128:-D__LONG_DOUBLE_128__}\"\n #endif\n \n #undef LIB_SPEC\n@@ -231,11 +238,19 @@ do {\t\t\t\t\t\t\t\t\t\\\n   sprintf (LABEL, \"*.L%s%d\", PREFIX, NUM)\n \n \f\n-#if 0\n /* Define for support of TFmode long double and REAL_ARITHMETIC.\n-   Sparc ABI says that long double is 4 words. GNU/Linux does not support\n-   long double yet.  */\n-#define LONG_DOUBLE_TYPE_SIZE 128\n+   Sparc ABI says that long double is 4 words.  */\n+#define LONG_DOUBLE_TYPE_SIZE (TARGET_LONG_DOUBLE_128 ? 128 : 64)\n+\n+/* Constant which presents upper bound of the above value.  */\n+#define MAX_LONG_DOUBLE_TYPE_SIZE 128\n+\n+/* Define this to set long double type size to use in libgcc2.c, which can\n+   not depend on target_flags.  */\n+#ifdef __LONG_DOUBLE_128__\n+#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 128\n+#else\n+#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n #endif\n \f\n /* No weird SPARC variants on Linux */"}, {"sha": "8d4672fb4855cf2e0584ae7af751115969d6cf09", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4710d3eb4bb35cc3d3792bad8452c4863634dfdc/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4710d3eb4bb35cc3d3792bad8452c4863634dfdc/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=4710d3eb4bb35cc3d3792bad8452c4863634dfdc", "patch": "@@ -41,7 +41,7 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT \\\n   (MASK_V9 + MASK_PTR64 + MASK_64BIT /* + MASK_HARD_QUAD */ \\\n-   + MASK_STACK_BIAS + MASK_APP_REGS + MASK_EPILOGUE + MASK_FPU)\n+   + MASK_STACK_BIAS + MASK_APP_REGS + MASK_EPILOGUE + MASK_FPU + MASK_LONG_DOUBLE_128)\n #endif\n \n /* Output at beginning of assembler file.  */\n@@ -56,6 +56,15 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_CPU_DEFAULT_SPEC\n #define ASM_CPU_DEFAULT_SPEC \"-Av9a\"\n \n+#ifdef SPARC_BI_ARCH\n+\n+#undef CPP_ARCH32_SPEC\n+#define CPP_ARCH32_SPEC \"%{mlong-double-128:-D__LONG_DOUBLE_128__} \\\n+-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int \\\n+-D__GCC_NEW_VARARGS__ -Acpu(sparc) -Amachine(sparc)\"\n+\n+#endif\n+\n /* Provide a STARTFILE_SPEC appropriate for GNU/Linux.  Here we add\n    the GNU/Linux magical crtbegin.o file (see crtstuff.c) which\n    provides part of the support for getting C++ file-scope static\n@@ -134,6 +143,11 @@ Boston, MA 02111-1307, USA.  */\n #undef SPARC_DEFAULT_CMODEL\n #define SPARC_DEFAULT_CMODEL CM_MEDLOW\n \n+#undef SUBTARGET_SWITCHES\n+#define SUBTARGET_SWITCHES \\\n+{\"long-double-64\", -MASK_LONG_DOUBLE_128, \"Use 64 bit long doubles\" }, \\\n+{\"long-double-128\", MASK_LONG_DOUBLE_128, \"Use 128 bit long doubles\" },\n+\n #undef WCHAR_TYPE\n #define WCHAR_TYPE \"int\"\n \n@@ -142,8 +156,22 @@ Boston, MA 02111-1307, USA.  */\n \n #undef MAX_WCHAR_TYPE_SIZE\n \n+/* Define for support of TFmode long double and REAL_ARITHMETIC.\n+   Sparc ABI says that long double is 4 words.  */\n #undef LONG_DOUBLE_TYPE_SIZE\n-#define LONG_DOUBLE_TYPE_SIZE 128\n+#define LONG_DOUBLE_TYPE_SIZE (TARGET_LONG_DOUBLE_128 ? 128 : 64)\n+\n+/* Constant which presents upper bound of the above value.  */\n+#undef MAX_LONG_DOUBLE_TYPE_SIZE\n+#define MAX_LONG_DOUBLE_TYPE_SIZE 128\n+\n+/* Define this to set long double type size to use in libgcc2.c, which can\n+   not depend on target_flags.  */\n+#if defined(__arch64__) || defined(__LONG_DOUBLE_128__)\n+#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 128\n+#else\n+#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n+#endif\n \n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \"-D__ELF__ -Dunix -D_LONGLONG -D__sparc__ -Dlinux -Asystem(unix) -Asystem(posix)\"\n@@ -227,7 +255,7 @@ Boston, MA 02111-1307, USA.  */\n %{mcypress:-mcpu=cypress} \\\n %{msparclite:-mcpu=sparclite} %{mf930:-mcpu=f930} %{mf934:-mcpu=f934} \\\n %{mv8:-mcpu=v8} %{msupersparc:-mcpu=supersparc} \\\n-%{m64:-mptr64 -mstack-bias \\\n+%{m64:-mptr64 -mstack-bias -mlong-double-128 \\\n   %{!mcpu*:%{!mcypress:%{!msparclite:%{!mf930:%{!mf934:%{!mv8:%{!msupersparc:-mcpu=ultrasparc}}}}}}} \\\n   %{!mno-vis:%{!mcpu=v9:-mvis}}} \\\n %{!m64:%{g*:%{!gs*:%{!gd*:%{!gx*:%{!gc*:-gstabs+}}}}}} \\\n@@ -238,7 +266,7 @@ Boston, MA 02111-1307, USA.  */\n %{mcypress:-mcpu=cypress} \\\n %{msparclite:-mcpu=sparclite} %{mf930:-mcpu=f930} %{mf934:-mcpu=f934} \\\n %{mv8:-mcpu=v8} %{msupersparc:-mcpu=supersparc} \\\n-%{m32:-mptr32 -mno-stack-bias \\\n+%{m32:-mptr32 -mno-stack-bias %{!mlong-double-128:-mlong-double-64} \\\n   %{!mcpu*:%{!mcypress:%{!msparclite:%{!mf930:%{!mf934:%{!mv8:%{!msupersparc:-mcpu=cypress}}}}}}} \\\n   %{g*:%{!gs*:%{!gd*:%{!gx*:%{!gc*:-gstabs+}}}}}} \\\n %{!m32:%{!mcpu*:-mcpu=ultrasparc}} \\"}, {"sha": "cc441d50f17aaa5be4c121a2ae1058c8828d3b49", "filename": "gcc/config/sparc/sol2-sld-64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4710d3eb4bb35cc3d3792bad8452c4863634dfdc/gcc%2Fconfig%2Fsparc%2Fsol2-sld-64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4710d3eb4bb35cc3d3792bad8452c4863634dfdc/gcc%2Fconfig%2Fsparc%2Fsol2-sld-64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2-sld-64.h?ref=4710d3eb4bb35cc3d3792bad8452c4863634dfdc", "patch": "@@ -24,7 +24,7 @@\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT \\\n   (MASK_V9 + MASK_PTR64 + MASK_64BIT /* + MASK_HARD_QUAD */ + \\\n-   MASK_STACK_BIAS + MASK_EPILOGUE + MASK_FPU)\n+   MASK_STACK_BIAS + MASK_EPILOGUE + MASK_FPU + MASK_LONG_DOUBLE_128)\n #endif\n \n /* The default code model.  */"}, {"sha": "000fbc6a21f710149de144459f0609bf4e4ae1ed", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4710d3eb4bb35cc3d3792bad8452c4863634dfdc/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4710d3eb4bb35cc3d3792bad8452c4863634dfdc/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=4710d3eb4bb35cc3d3792bad8452c4863634dfdc", "patch": "@@ -213,7 +213,7 @@ Boston, MA 02111-1307, USA.  */\n /* Solaris allows 64 bit out and global registers in 32 bit mode.\n    sparc_override_options will disable V8+ if not generating V9 code.  */\n #undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_EPILOGUE + MASK_FPU + MASK_V8PLUS)\n+#define TARGET_DEFAULT (MASK_EPILOGUE + MASK_FPU + MASK_V8PLUS + MASK_LONG_DOUBLE_128)\n \f\n #if TARGET_ARCH32\n /* Override MACHINE_STATE_{SAVE,RESTORE} because we have special"}, {"sha": "b6991474c82545476bad017a5151c8cf921c2f39", "filename": "gcc/config/sparc/sp64-elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4710d3eb4bb35cc3d3792bad8452c4863634dfdc/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4710d3eb4bb35cc3d3792bad8452c4863634dfdc/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h?ref=4710d3eb4bb35cc3d3792bad8452c4863634dfdc", "patch": "@@ -35,7 +35,7 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT \\\n (MASK_V9 + MASK_PTR64 + MASK_64BIT + MASK_HARD_QUAD \\\n- + MASK_APP_REGS + MASK_EPILOGUE + MASK_FPU + MASK_STACK_BIAS)\n+ + MASK_APP_REGS + MASK_EPILOGUE + MASK_FPU + MASK_STACK_BIAS + MASK_LONG_DOUBLE_128)\n \n #undef SPARC_DEFAULT_CMODEL\n #define SPARC_DEFAULT_CMODEL CM_EMBMEDANY"}, {"sha": "0b9cd18f93d06b9d4a9712c2d2d81f87fe534945", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4710d3eb4bb35cc3d3792bad8452c4863634dfdc/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4710d3eb4bb35cc3d3792bad8452c4863634dfdc/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=4710d3eb4bb35cc3d3792bad8452c4863634dfdc", "patch": "@@ -250,6 +250,13 @@ sparc_override_options ()\n         target_flags &= ~MASK_PTR64;\n     }\n \n+  /* We force all 64bit archs to use 128 bit long double */\n+  if (TARGET_64BIT && ! TARGET_LONG_DOUBLE_128)\n+    {\n+      error (\"-mlong-double-64 not allowed with -m64\");\n+      target_flags |= MASK_LONG_DOUBLE_128;\n+    }\n+\n   /* Code model selection.  */\n   sparc_cmodel = SPARC_DEFAULT_CMODEL;\n   "}, {"sha": "a099796cef787e76c26e77fae3493cd1f28e7bdf", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4710d3eb4bb35cc3d3792bad8452c4863634dfdc/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4710d3eb4bb35cc3d3792bad8452c4863634dfdc/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=4710d3eb4bb35cc3d3792bad8452c4863634dfdc", "patch": "@@ -555,6 +555,10 @@ extern int target_flags;\n #define MASK_FASTER_STRUCTS 0x4000000\n #define TARGET_FASTER_STRUCTS (target_flags & MASK_FASTER_STRUCTS)\n \n+/* Use IEEE quad long double.  */\n+#define MASK_LONG_DOUBLE_128 0x8000000\n+#define TARGET_LONG_DOUBLE_128 (target_flags & MASK_LONG_DOUBLE_128)\n+\n /* TARGET_HARD_MUL: Use hardware multiply instructions but not %y.\n    TARGET_HARD_MUL32: Use hardware multiply instructions with rd %y\n    to get high 32 bits.  False in V8+ or V9 because multiply stores"}, {"sha": "96b1d277d1340814541caa9ecfce824f98a76c9f", "filename": "gcc/gengenrtl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4710d3eb4bb35cc3d3792bad8452c4863634dfdc/gcc%2Fgengenrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4710d3eb4bb35cc3d3792bad8452c4863634dfdc/gcc%2Fgengenrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengenrtl.c?ref=4710d3eb4bb35cc3d3792bad8452c4863634dfdc", "patch": "@@ -40,21 +40,21 @@ Boston, MA 02111-1307, USA.  */\n    slots in a CONST_DOUBLE, so we provide them even if one would suffice.  */\n \n #ifdef REAL_ARITHMETIC\n-#if LONG_DOUBLE_TYPE_SIZE == 96\n+#if MAX_LONG_DOUBLE_TYPE_SIZE == 96\n #define REAL_WIDTH\t(11*8 + HOST_BITS_PER_WIDE_INT)/HOST_BITS_PER_WIDE_INT\n-#elif LONG_DOUBLE_TYPE_SIZE == 128\n+#elif MAX_LONG_DOUBLE_TYPE_SIZE == 128\n #define REAL_WIDTH\t(19*8 + HOST_BITS_PER_WIDE_INT)/HOST_BITS_PER_WIDE_INT\n #elif HOST_FLOAT_FORMAT != TARGET_FLOAT_FORMAT\n #define REAL_WIDTH\t(7*8 + HOST_BITS_PER_WIDE_INT)/HOST_BITS_PER_WIDE_INT\n #endif\n #endif /* REAL_ARITHMETIC */\n \n #ifndef REAL_WIDTH\n-#if HOST_BITS_PER_WIDE_INT*2 >= LONG_DOUBLE_TYPE_SIZE\n+#if HOST_BITS_PER_WIDE_INT*2 >= MAX_LONG_DOUBLE_TYPE_SIZE\n #define REAL_WIDTH\t2\n-#elif HOST_BITS_PER_WIDE_INT*3 >= LONG_DOUBLE_TYPE_SIZE\n+#elif HOST_BITS_PER_WIDE_INT*3 >= MAX_LONG_DOUBLE_TYPE_SIZE\n #define REAL_WIDTH\t3\n-#elif HOST_BITS_PER_WIDE_INT*4 >= LONG_DOUBLE_TYPE_SIZE\n+#elif HOST_BITS_PER_WIDE_INT*4 >= MAX_LONG_DOUBLE_TYPE_SIZE\n #define REAL_WIDTH\t4\n #endif\n #endif /* REAL_WIDTH */"}, {"sha": "2c7194a48cb85e8c6855bdadb43acc4edf7a5937", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4710d3eb4bb35cc3d3792bad8452c4863634dfdc/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4710d3eb4bb35cc3d3792bad8452c4863634dfdc/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=4710d3eb4bb35cc3d3792bad8452c4863634dfdc", "patch": "@@ -357,7 +357,7 @@ print_rtx (in_rtx)\n   if (GET_CODE (in_rtx) == MEM)\n     fprintf (outfile, \" %d\", MEM_ALIAS_SET (in_rtx));\n \n-#if HOST_FLOAT_FORMAT == TARGET_FLOAT_FORMAT && LONG_DOUBLE_TYPE_SIZE == 64\n+#if HOST_FLOAT_FORMAT == TARGET_FLOAT_FORMAT && MAX_LONG_DOUBLE_TYPE_SIZE == 64\n   if (GET_CODE (in_rtx) == CONST_DOUBLE && FLOAT_MODE_P (GET_MODE (in_rtx)))\n     {\n       double val;"}, {"sha": "0e4b71654e3e2f0c13b3bb35bd272ca7cf41d41f", "filename": "gcc/real.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4710d3eb4bb35cc3d3792bad8452c4863634dfdc/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4710d3eb4bb35cc3d3792bad8452c4863634dfdc/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=4710d3eb4bb35cc3d3792bad8452c4863634dfdc", "patch": "@@ -244,7 +244,7 @@ unknown arithmetic type\n    A REAL_VALUE_TYPE is guaranteed to occupy contiguous locations\n    in memory, with no holes.  */\n \n-#if LONG_DOUBLE_TYPE_SIZE == 96\n+#if MAX_LONG_DOUBLE_TYPE_SIZE == 96\n /* Number of 16 bit words in external e type format */\n #define NE 6\n #define MAXDECEXP 4932\n@@ -257,7 +257,7 @@ do {\t\t\t\t\t\t\\\n   bcopy ((char *) e, (char *) r, 2*NE);\t\t\\\n } while (0)\n #else /* no XFmode */\n-#if LONG_DOUBLE_TYPE_SIZE == 128\n+#if MAX_LONG_DOUBLE_TYPE_SIZE == 128\n #define NE 10\n #define MAXDECEXP 4932\n #define MINDECEXP -4977\n@@ -1479,7 +1479,7 @@ ereal_isneg (x)\n \n /*  e type constants used by high precision check routines */\n \n-#if LONG_DOUBLE_TYPE_SIZE == 128\n+#if MAX_LONG_DOUBLE_TYPE_SIZE == 128\n /* 0.0 */\n unsigned EMUSHORT ezero[NE] =\n  {0x0000, 0x0000, 0x0000, 0x0000,\n@@ -3646,7 +3646,7 @@ toe64 (a, b)\n   else\n     {\n       q = b + 4;\t\t\t/* point to output exponent */\n-#if LONG_DOUBLE_TYPE_SIZE == 96\n+#if MAX_LONG_DOUBLE_TYPE_SIZE == 96\n       /* Clear the last two bytes of 12-byte Intel format */\n       *(q+1) = 0;\n #endif\n@@ -4550,7 +4550,7 @@ enormlz (x)\n #define NTEN 12\n #define MAXP 4096\n \n-#if LONG_DOUBLE_TYPE_SIZE == 128\n+#if MAX_LONG_DOUBLE_TYPE_SIZE == 128\n static unsigned EMUSHORT etens[NTEN + 1][NE] =\n {\n   {0x6576, 0x4a92, 0x804a, 0x153f,"}, {"sha": "66981f02fd28f00798d51411196c8d84b2be5a8e", "filename": "gcc/real.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4710d3eb4bb35cc3d3792bad8452c4863634dfdc/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4710d3eb4bb35cc3d3792bad8452c4863634dfdc/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=4710d3eb4bb35cc3d3792bad8452c4863634dfdc", "patch": "@@ -68,7 +68,10 @@ Boston, MA 02111-1307, USA.  */\n #ifndef LONG_DOUBLE_TYPE_SIZE\n #define LONG_DOUBLE_TYPE_SIZE 64\n #endif\n-#if (LONG_DOUBLE_TYPE_SIZE == 96) || (LONG_DOUBLE_TYPE_SIZE == 128)\n+#ifndef MAX_LONG_DOUBLE_TYPE_SIZE\n+#define MAX_LONG_DOUBLE_TYPE_SIZE LONG_DOUBLE_TYPE_SIZE\n+#endif\n+#if (MAX_LONG_DOUBLE_TYPE_SIZE == 96) || (MAX_LONG_DOUBLE_TYPE_SIZE == 128)\n #ifndef REAL_ARITHMETIC\n #define REAL_ARITHMETIC\n #endif\n@@ -78,7 +81,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Support 80-bit extended real XFmode if LONG_DOUBLE_TYPE_SIZE\n    has been defined to be 96 in the tm.h machine file. */\n-#if (LONG_DOUBLE_TYPE_SIZE == 96)\n+#if (MAX_LONG_DOUBLE_TYPE_SIZE == 96)\n #define REAL_IS_NOT_DOUBLE\n #define REAL_ARITHMETIC\n typedef struct {\n@@ -88,7 +91,7 @@ typedef struct {\n \n #else /* no XFmode support */\n \n-#if (LONG_DOUBLE_TYPE_SIZE == 128)\n+#if (MAX_LONG_DOUBLE_TYPE_SIZE == 128)\n \n #define REAL_IS_NOT_DOUBLE\n #define REAL_ARITHMETIC\n@@ -199,7 +202,7 @@ extern REAL_VALUE_TYPE real_value_truncate\tPARAMS ((enum machine_mode,\n   ereal_from_uint (&d, lo, hi, mode)\n \n /* IN is a REAL_VALUE_TYPE.  OUT is an array of longs. */\n-#if LONG_DOUBLE_TYPE_SIZE == 96\n+#if MAX_LONG_DOUBLE_TYPE_SIZE == 96\n #define REAL_VALUE_TO_TARGET_LONG_DOUBLE(IN, OUT) (etarldouble ((IN), (OUT)))\n #else\n #define REAL_VALUE_TO_TARGET_LONG_DOUBLE(IN, OUT) (etartdouble ((IN), (OUT)))"}, {"sha": "7f7906e4f7d445977dd1ef8c06c645b342b255bf", "filename": "gcc/rtl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4710d3eb4bb35cc3d3792bad8452c4863634dfdc/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4710d3eb4bb35cc3d3792bad8452c4863634dfdc/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=4710d3eb4bb35cc3d3792bad8452c4863634dfdc", "patch": "@@ -52,21 +52,21 @@ extern struct obstack *rtl_obstack;\n    slots in a CONST_DOUBLE, so we provide them even if one would suffice.  */\n \n #ifdef REAL_ARITHMETIC\n-#if LONG_DOUBLE_TYPE_SIZE == 96\n+#if MAX_LONG_DOUBLE_TYPE_SIZE == 96\n #define REAL_WIDTH\t(11*8 + HOST_BITS_PER_WIDE_INT)/HOST_BITS_PER_WIDE_INT\n-#elif LONG_DOUBLE_TYPE_SIZE == 128\n+#elif MAX_LONG_DOUBLE_TYPE_SIZE == 128\n #define REAL_WIDTH\t(19*8 + HOST_BITS_PER_WIDE_INT)/HOST_BITS_PER_WIDE_INT\n #elif HOST_FLOAT_FORMAT != TARGET_FLOAT_FORMAT\n #define REAL_WIDTH\t(7*8 + HOST_BITS_PER_WIDE_INT)/HOST_BITS_PER_WIDE_INT\n #endif\n #endif /* REAL_ARITHMETIC */\n \n #ifndef REAL_WIDTH\n-#if HOST_BITS_PER_WIDE_INT*2 >= LONG_DOUBLE_TYPE_SIZE\n+#if HOST_BITS_PER_WIDE_INT*2 >= MAX_LONG_DOUBLE_TYPE_SIZE\n #define REAL_WIDTH\t2\n-#elif HOST_BITS_PER_WIDE_INT*3 >= LONG_DOUBLE_TYPE_SIZE\n+#elif HOST_BITS_PER_WIDE_INT*3 >= MAX_LONG_DOUBLE_TYPE_SIZE\n #define REAL_WIDTH\t3\n-#elif HOST_BITS_PER_WIDE_INT*4 >= LONG_DOUBLE_TYPE_SIZE\n+#elif HOST_BITS_PER_WIDE_INT*4 >= MAX_LONG_DOUBLE_TYPE_SIZE\n #define REAL_WIDTH\t4\n #endif\n #endif /* REAL_WIDTH */"}]}