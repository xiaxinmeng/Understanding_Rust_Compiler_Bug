{"sha": "f3ff49007a5cebef6e082abc5778875692792cb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNmZjQ5MDA3YTVjZWJlZjZlMDgyYWJjNTc3ODg3NTY5Mjc5MmNiNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-03T07:17:52Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-03T07:17:52Z"}, "message": "poly_int: expand_expr_real_1\n\nThis patch makes the VIEW_CONVERT_EXPR handling in expand_expr_real_1\ncope with polynomial type and mode sizes.\n\n2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* expr.c (expand_expr_real_1): Use tree_to_poly_uint64\n\tinstead of int_size_in_bytes when handling VIEW_CONVERT_EXPRs\n\tvia stack temporaries.  Treat the mode size as polynomial too.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r256152", "tree": {"sha": "64d7ed8be45b1888ab20d2b3fbbdebc73bd10f91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64d7ed8be45b1888ab20d2b3fbbdebc73bd10f91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3ff49007a5cebef6e082abc5778875692792cb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ff49007a5cebef6e082abc5778875692792cb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3ff49007a5cebef6e082abc5778875692792cb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ff49007a5cebef6e082abc5778875692792cb6/comments", "author": null, "committer": null, "parents": [{"sha": "0fd03b44ab4d77f8b8c09e5bbc2def4eeb855053", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fd03b44ab4d77f8b8c09e5bbc2def4eeb855053", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fd03b44ab4d77f8b8c09e5bbc2def4eeb855053"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "37737bcabd990f8757fb7fe716fc3eb6df51f17b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ff49007a5cebef6e082abc5778875692792cb6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ff49007a5cebef6e082abc5778875692792cb6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3ff49007a5cebef6e082abc5778875692792cb6", "patch": "@@ -1,3 +1,11 @@\n+2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* expr.c (expand_expr_real_1): Use tree_to_poly_uint64\n+\tinstead of int_size_in_bytes when handling VIEW_CONVERT_EXPRs\n+\tvia stack temporaries.  Treat the mode size as polynomial too.\n+\n 2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "a82d9e41ae22e688c762659012a60a40177342d1", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ff49007a5cebef6e082abc5778875692792cb6/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ff49007a5cebef6e082abc5778875692792cb6/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=f3ff49007a5cebef6e082abc5778875692792cb6", "patch": "@@ -11132,9 +11132,10 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n \t      else if (STRICT_ALIGNMENT)\n \t\t{\n \t\t  tree inner_type = TREE_TYPE (treeop0);\n-\t\t  HOST_WIDE_INT temp_size\n-\t\t    = MAX (int_size_in_bytes (inner_type),\n-\t\t\t   (HOST_WIDE_INT) GET_MODE_SIZE (mode));\n+\t\t  poly_uint64 mode_size = GET_MODE_SIZE (mode);\n+\t\t  poly_uint64 op0_size\n+\t\t    = tree_to_poly_uint64 (TYPE_SIZE_UNIT (inner_type));\n+\t\t  poly_int64 temp_size = upper_bound (op0_size, mode_size);\n \t\t  rtx new_rtx\n \t\t    = assign_stack_temp_for_type (mode, temp_size, type);\n \t\t  rtx new_with_op0_mode"}]}