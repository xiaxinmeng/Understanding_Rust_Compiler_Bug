{"sha": "885c9a395a444eb03053a2cae0e5316981b823db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg1YzlhMzk1YTQ0NGViMDMwNTNhMmNhZTBlNTMxNjk4MWI4MjNkYg==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1996-11-21T20:53:26Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1996-11-21T20:53:26Z"}, "message": "(output_stack_adjust): New argument TEMP.  Changed all callers.\n\nIf the adjust cannot be done with one, but can be done with two\nCONST_OK_FOR_I constants, do it that way.\n\nFrom-SVN: r13213", "tree": {"sha": "9c338f3744aeea20f114321c2118d483240c1eda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c338f3744aeea20f114321c2118d483240c1eda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/885c9a395a444eb03053a2cae0e5316981b823db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/885c9a395a444eb03053a2cae0e5316981b823db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/885c9a395a444eb03053a2cae0e5316981b823db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/885c9a395a444eb03053a2cae0e5316981b823db/comments", "author": null, "committer": null, "parents": [{"sha": "58cf6a1630c02512c93839677b52adabc674a1ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58cf6a1630c02512c93839677b52adabc674a1ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58cf6a1630c02512c93839677b52adabc674a1ab"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "11d662ae6020a4f00ca7d4968ae37ca41624a8b1", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c9a395a444eb03053a2cae0e5316981b823db/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c9a395a444eb03053a2cae0e5316981b823db/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=885c9a395a444eb03053a2cae0e5316981b823db", "patch": "@@ -2473,12 +2473,15 @@ output_jump_label_table ()\n \n static int extra_push;\n \n-/* Adjust the stack and return the number of bytes taken to do it.  */\n+/* Adjust the stack by SIZE bytes.  REG holds the rtl of the register\n+  to be adjusted, and TEMP, if nonnegative, holds the register number\n+  of a general register that we may clobber.  */\n \n static void\n-output_stack_adjust (size, reg)\n+output_stack_adjust (size, reg, temp)\n      int size;\n      rtx reg;\n+     int temp;\n {\n   if (size)\n     {\n@@ -2487,9 +2490,25 @@ output_stack_adjust (size, reg)\n \n       if (! CONST_OK_FOR_I (size))\n \t{\n-\t  rtx reg = gen_rtx (REG, SImode, 3);\n-\t  emit_insn (gen_movsi (reg, val));\n-\t  val = reg;\n+\t  if (CONST_OK_FOR_I (size / 2) && CONST_OK_FOR_I (size - size / 2))\n+\t    {\n+\t      val = GEN_INT (size / 2);\n+\t      emit_insn (gen_addsi3 (reg, reg, val));\n+\t      val = GEN_INT (size - size / 2);\n+\t    }\n+\t  else\n+\t    {\n+\t      rtx reg;\n+\n+\t      /* If TEMP is invalid, we could temporarily save a general\n+\t\t register to MACL.  However, there is currently no need\n+\t\t to handle this case, so just abort when we see it.  */\n+\t      if (temp < 0)\n+\t\tabort ();\n+\t      reg = gen_rtx (REG, SImode, temp);\n+\t      emit_insn (gen_movsi (reg, val));\n+\t      val = reg;\n+\t    }\n \t}\n \n       insn = gen_addsi3 (reg, reg, val);\n@@ -2615,7 +2634,8 @@ sh_expand_prologue ()\n \n   /* We have pretend args if we had an object sent partially in registers\n      and partially on the stack, e.g. a large structure.  */\n-  output_stack_adjust (-current_function_pretend_args_size, stack_pointer_rtx);\n+  output_stack_adjust (-current_function_pretend_args_size,\n+\t\t       stack_pointer_rtx, 3);\n \n   extra_push = 0;\n \n@@ -2644,7 +2664,7 @@ sh_expand_prologue ()\n \n   push_regs (live_regs_mask, live_regs_mask2);\n \n-  output_stack_adjust (-get_frame_size (), stack_pointer_rtx);\n+  output_stack_adjust (-get_frame_size (), stack_pointer_rtx, 3);\n \n   if (frame_pointer_needed)\n     emit_insn (gen_movsi (frame_pointer_rtx, stack_pointer_rtx));\n@@ -2665,11 +2685,11 @@ sh_expand_epilogue ()\n \t to ensure that instruction scheduling won't move the stack pointer\n \t adjust before instructions reading from the frame.  This can fail\n \t if there is an interrupt which then writes to the stack.  */\n-      output_stack_adjust (get_frame_size (), frame_pointer_rtx);\n+      output_stack_adjust (get_frame_size (), frame_pointer_rtx, 7);\n       emit_insn (gen_movsi (stack_pointer_rtx, frame_pointer_rtx));\n     }\n   else\n-    output_stack_adjust (get_frame_size (), stack_pointer_rtx);\n+    output_stack_adjust (get_frame_size (), stack_pointer_rtx, 7);\n \n   /* Pop all the registers.  */\n \n@@ -2683,7 +2703,7 @@ sh_expand_epilogue ()\n     }\n \n   output_stack_adjust (extra_push + current_function_pretend_args_size,\n-\t\t       stack_pointer_rtx);\n+\t\t       stack_pointer_rtx, 7);\n }\n \n /* Clear variables at function end.  */"}]}