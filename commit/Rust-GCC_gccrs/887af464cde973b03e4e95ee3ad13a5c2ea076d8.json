{"sha": "887af464cde973b03e4e95ee3ad13a5c2ea076d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg3YWY0NjRjZGU5NzNiMDNlNGU5NWVlM2FkMTNhNWMyZWEwNzZkOA==", "commit": {"author": {"name": "Bob Wilson", "email": "bob.wilson@acm.org", "date": "2006-11-21T21:49:26Z"}, "committer": {"name": "Bob Wilson", "email": "bwilson@gcc.gnu.org", "date": "2006-11-21T21:49:26Z"}, "message": "xtensa.c (xtensa_char_to_class): Delete.\n\n\t* config/xtensa/xtensa.c (xtensa_char_to_class): Delete.\n\t(xtensa_const_ok_for_letter_p): Delete.\n\t(xtensa_extra_constraint): Delete.\n\t(override_options): Delete xtensa_char_to_class initialization.\n\t* config/xtensa/xtensa.h (REG_CLASS_FROM_LETTER): Delete.\n\t(CONST_OK_FOR_LETTER_P, CONST_DOUBLE_OK_FOR_LETTER_P): Delete.\n\t(EXTRA_CONSTRAINT): Delete.\n\t* config/xtensa/xtensa.md: Include constraints.md.\n\t(call_internal): Combine alternatives.\n\t(call_value_internal): Likewise, and remove invalid constraints.\n\t* config/xtensa/constraints.md: New file.\n\t* config/xtensa/xtensa-protos.h (xtensa_const_ok_for_letter_p): Delete.\n\t(xtensa_extra_constraint): Delete.\n\t* doc/md.texi (Machine Constraints): Refer to constraints.md for\n\tXtensa constraints.\n--Ths line, and those below, will be ignored--\n\nM    gcc/doc/md.texi\nM    gcc/ChangeLog\nM    gcc/config/xtensa/xtensa.c\nM    gcc/config/xtensa/xtensa.h\nM    gcc/config/xtensa/xtensa.md\nA    gcc/config/xtensa/constraints.md\nM    gcc/config/xtensa/xtensa-protos.h\n\nFrom-SVN: r119072", "tree": {"sha": "f5f55b6ba240745a81e91eba8b4d2ba17ec37398", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5f55b6ba240745a81e91eba8b4d2ba17ec37398"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/887af464cde973b03e4e95ee3ad13a5c2ea076d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/887af464cde973b03e4e95ee3ad13a5c2ea076d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/887af464cde973b03e4e95ee3ad13a5c2ea076d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/887af464cde973b03e4e95ee3ad13a5c2ea076d8/comments", "author": null, "committer": null, "parents": [{"sha": "df5487ee86555da5ce5a2728fe3bb7c646afd92f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df5487ee86555da5ce5a2728fe3bb7c646afd92f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df5487ee86555da5ce5a2728fe3bb7c646afd92f"}], "stats": {"total": 375, "additions": 168, "deletions": 207}, "files": [{"sha": "6c05926a8c7e9c38a5ab337926f63e06f7b40248", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/887af464cde973b03e4e95ee3ad13a5c2ea076d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/887af464cde973b03e4e95ee3ad13a5c2ea076d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=887af464cde973b03e4e95ee3ad13a5c2ea076d8", "patch": "@@ -1,3 +1,21 @@\n+2006-11-21  Bob Wilson  <bob.wilson@acm.org>\n+\n+\t* config/xtensa/xtensa.c (xtensa_char_to_class): Delete.\n+\t(xtensa_const_ok_for_letter_p): Delete.\n+\t(xtensa_extra_constraint): Delete.\n+\t(override_options): Delete xtensa_char_to_class initialization.\n+\t* config/xtensa/xtensa.h (REG_CLASS_FROM_LETTER): Delete.\n+\t(CONST_OK_FOR_LETTER_P, CONST_DOUBLE_OK_FOR_LETTER_P): Delete.\n+\t(EXTRA_CONSTRAINT): Delete.\n+\t* config/xtensa/xtensa.md: Include constraints.md.\n+\t(call_internal): Combine alternatives.\n+\t(call_value_internal): Likewise, and remove invalid constraints.\n+\t* config/xtensa/constraints.md: New file.\n+\t* config/xtensa/xtensa-protos.h (xtensa_const_ok_for_letter_p): Delete.\n+\t(xtensa_extra_constraint): Delete.\n+\t* doc/md.texi (Machine Constraints): Refer to constraints.md for\n+\tXtensa constraints.\n+\n 2006-11-21  Janis Johnson  <janis187@us.ibm.com>\n \n \t* config/dfp-bits.c (DFP_TO_INT): Remove code to saturate result"}, {"sha": "c58d979c3ce0f865df8359612e40e2c4fbacaf0b", "filename": "gcc/config/xtensa/constraints.md", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/887af464cde973b03e4e95ee3ad13a5c2ea076d8/gcc%2Fconfig%2Fxtensa%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/887af464cde973b03e4e95ee3ad13a5c2ea076d8/gcc%2Fconfig%2Fxtensa%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fconstraints.md?ref=887af464cde973b03e4e95ee3ad13a5c2ea076d8", "patch": "@@ -0,0 +1,140 @@\n+;; Constraint definitions for Xtensa.\n+;; Copyright (C) 2006 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 2, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING.  If not, write to\n+;; the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+;; Boston, MA 02110-1301, USA.\n+\n+;; Register constraints.\n+\n+(define_register_constraint \"a\" \"GR_REGS\"\n+ \"General-purpose AR registers @code{a0}-@code{a15},\n+  except @code{a1} (@code{sp}).\")\n+\n+(define_register_constraint \"b\" \"TARGET_BOOLEANS ? BR_REGS : NO_REGS\"\n+ \"Boolean registers @code{b0}-@code{b15}; only available if the Xtensa\n+  Boolean Option is configured.\")\n+\n+(define_register_constraint \"d\" \"TARGET_DENSITY ? AR_REGS: NO_REGS\"\n+ \"@internal\n+  All AR registers, including sp, but only if the Xtensa Code Density\n+  Option is configured.\")\n+\n+(define_register_constraint \"f\" \"TARGET_HARD_FLOAT ? FP_REGS : NO_REGS\"\n+ \"Floating-point registers @code{f0}-@code{f15}; only available if the\n+  Xtensa Floating-Pointer Coprocessor is configured.\")\n+\n+(define_register_constraint \"q\" \"SP_REG\"\n+ \"@internal\n+  The stack pointer (register @code{a1}).\")\n+\n+(define_register_constraint \"A\" \"TARGET_MAC16 ? ACC_REG : NO_REGS\"\n+ \"The low 32 bits of the accumulator from the Xtensa MAC16 Option.\")\n+\n+(define_register_constraint \"B\" \"TARGET_SEXT ? GR_REGS : NO_REGS\"\n+ \"@internal\n+  General-purpose AR registers, but only if the Xtensa Sign Extend\n+  Option is configured.\")\n+\n+(define_register_constraint \"C\" \"TARGET_MUL16 ? GR_REGS: NO_REGS\"\n+ \"@internal\n+  General-purpose AR registers, but only if the Xtensa 16-Bit Integer\n+  Multiply Option is configured.\")\n+\n+(define_register_constraint \"D\" \"TARGET_DENSITY ? GR_REGS: NO_REGS\"\n+ \"@internal\n+  General-purpose AR registers, but only if the Xtensa Code Density\n+  Option is configured.\")\n+\n+(define_register_constraint \"W\" \"TARGET_CONST16 ? GR_REGS: NO_REGS\"\n+ \"@internal\n+  General-purpose AR registers, but only if the Xtensa Const16\n+  Option is configured.\")\n+\n+;; Integer constant constraints.\n+\n+(define_constraint \"I\"\n+ \"A signed 12-bit integer constant for use with MOVI instructions.\"\n+ (and (match_code \"const_int\")\n+      (match_test \"xtensa_simm12b (ival)\")))\n+\n+(define_constraint \"J\"\n+ \"A signed 8-bit integer constant for use with ADDI instructions.\"\n+ (and (match_code \"const_int\")\n+      (match_test \"xtensa_simm8 (ival)\")))\n+\n+(define_constraint \"K\"\n+ \"A constant integer that can be an immediate operand of an Xtensa\n+  conditional branch instruction that performs a signed comparison or\n+  a comparison against zero.\"\n+ (and (match_code \"const_int\")\n+      (match_test \"xtensa_b4const_or_zero (ival)\")))\n+\n+(define_constraint \"L\"\n+ \"A constant integer that can be an immediate operand of an Xtensa\n+  conditional branch instruction that performs an unsigned comparison.\"\n+ (and (match_code \"const_int\")\n+      (match_test \"xtensa_b4constu (ival)\")))\n+\n+(define_constraint \"M\"\n+ \"An integer constant in the range @minus{}32-95 for use with MOVI.N\n+  instructions.\"\n+ (and (match_code \"const_int\")\n+      (match_test \"ival >= -32 && ival <= 95\")))\n+\n+(define_constraint \"N\"\n+ \"An unsigned 8-bit integer constant shifted left by 8 bits for use\n+  with ADDMI instructions.\"\n+ (and (match_code \"const_int\")\n+      (match_test \"xtensa_simm8x256 (ival)\")))\n+\n+(define_constraint \"O\"\n+ \"An integer constant that can be used in ADDI.N instructions.\"\n+ (and (match_code \"const_int\")\n+      (match_test \"ival == -1 || (ival >= 1 && ival <= 15)\")))\n+\n+(define_constraint \"P\"\n+ \"An integer constant that can be used as a mask value in an EXTUI\n+  instruction.\"\n+ (and (match_code \"const_int\")\n+      (match_test \"xtensa_mask_immediate (ival)\")))\n+\n+;; Memory constraints.  Do not use define_memory_constraint here.  Doing so\n+;; causes reload to force some constants into the constant pool, but since\n+;; the Xtensa constant pool can only be accessed with L32R instructions, it\n+;; is always better to just copy a constant into a register.  Instead, use\n+;; regular constraints but add a check to allow pseudos during reload.\n+\n+(define_constraint \"R\"\n+ \"Memory that can be accessed with a 4-bit unsigned offset from a register.\"\n+ (ior (and (match_code \"mem\")\n+\t   (match_test \"smalloffset_mem_p (op)\"))\n+      (and (match_code \"reg\")\n+\t   (match_test \"reload_in_progress\n+\t\t\t&& REGNO (op) >= FIRST_PSEUDO_REGISTER\"))))\n+\n+(define_constraint \"T\"\n+ \"Memory in a literal pool (addressable with an L32R instruction).\"\n+ (and (match_code \"mem\")\n+      (match_test \"!TARGET_CONST16 && constantpool_mem_p (op)\")))\n+\n+(define_constraint \"U\"\n+ \"Memory that is not in a literal pool.\"\n+ (ior (and (match_code \"mem\")\n+\t   (match_test \"! constantpool_mem_p (op)\"))\n+      (and (match_code \"reg\")\n+\t   (match_test \"reload_in_progress\n+\t\t\t&& REGNO (op) >= FIRST_PSEUDO_REGISTER\"))))"}, {"sha": "762aa0aed61e605fc075dcccc3b52a5b41b84930", "filename": "gcc/config/xtensa/xtensa-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/887af464cde973b03e4e95ee3ad13a5c2ea076d8/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/887af464cde973b03e4e95ee3ad13a5c2ea076d8/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h?ref=887af464cde973b03e4e95ee3ad13a5c2ea076d8", "patch": "@@ -29,7 +29,6 @@ extern bool xtensa_simm12b (HOST_WIDE_INT);\n extern bool xtensa_b4const_or_zero (HOST_WIDE_INT);\n extern bool xtensa_b4constu (HOST_WIDE_INT);\n extern bool xtensa_mask_immediate (HOST_WIDE_INT);\n-extern bool xtensa_const_ok_for_letter_p (HOST_WIDE_INT, int);\n extern bool xtensa_mem_offset (unsigned, enum machine_mode);\n \n /* Functions within xtensa.c that we reference.  */\n@@ -40,7 +39,6 @@ extern int smalloffset_mem_p (rtx);\n extern int constantpool_address_p (rtx);\n extern int constantpool_mem_p (rtx);\n extern void xtensa_extend_reg (rtx, rtx);\n-extern bool xtensa_extra_constraint (rtx, int);\n extern void xtensa_expand_conditional_branch (rtx *, enum rtx_code);\n extern int xtensa_expand_conditional_move (rtx *, int);\n extern int xtensa_expand_scc (rtx *);"}, {"sha": "011f63cd275d4dc5a301ca5ca7e05e31c6bde078", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 2, "deletions": 123, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/887af464cde973b03e4e95ee3ad13a5c2ea076d8/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/887af464cde973b03e4e95ee3ad13a5c2ea076d8/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=887af464cde973b03e4e95ee3ad13a5c2ea076d8", "patch": "@@ -123,75 +123,6 @@ const enum reg_class xtensa_regno_to_class[FIRST_PSEUDO_REGISTER] =\n   ACC_REG,\n };\n \n-/* Map register constraint character to register class.  */\n-enum reg_class xtensa_char_to_class[256] =\n-{\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n-};\n-\n static enum internal_test map_test_to_internal_test (enum rtx_code);\n static rtx gen_int_relational (enum rtx_code, rtx, rtx, int *);\n static rtx gen_float_relational (enum rtx_code, rtx, rtx);\n@@ -276,11 +207,9 @@ static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =\n #define TARGET_EXPAND_BUILTIN xtensa_expand_builtin\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n-\f\n \n-/*\n- * Functions to test Xtensa immediate operand validity.\n- */\n+\f\n+/* Functions to test Xtensa immediate operand validity.  */\n \n bool\n xtensa_simm8 (HOST_WIDE_INT v)\n@@ -406,25 +335,6 @@ xtensa_mask_immediate (HOST_WIDE_INT v)\n }\n \n \n-bool\n-xtensa_const_ok_for_letter_p (HOST_WIDE_INT v, int c)\n-{\n-  switch (c)\n-    {\n-    case 'I': return xtensa_simm12b (v);\n-    case 'J': return xtensa_simm8 (v);\n-    case 'K': return (v == 0 || xtensa_b4const (v));\n-    case 'L': return xtensa_b4constu (v);\n-    case 'M': return (v >= -32 && v <= 95);\n-    case 'N': return xtensa_simm8x256 (v);\n-    case 'O': return (v == -1 || (v >= 1 && v <= 15));\n-    case 'P': return xtensa_mask_immediate (v);\n-    default: break;\n-    }\n-  return false;\n-}\n-\n-\n /* This is just like the standard true_regnum() function except that it\n    works even when reg_renumber is not initialized.  */\n \n@@ -590,26 +500,6 @@ xtensa_mem_offset (unsigned v, enum machine_mode mode)\n }\n \n \n-bool\n-xtensa_extra_constraint (rtx op, int c)\n-{\n-  /* Allow pseudo registers during reload.  */\n-  if (GET_CODE (op) != MEM)\n-    return (c >= 'R' && c <= 'U'\n-\t    && reload_in_progress && GET_CODE (op) == REG\n-\t    && REGNO (op) >= FIRST_PSEUDO_REGISTER);\n-\n-  switch (c)\n-    {\n-    case 'R': return smalloffset_mem_p (op);\n-    case 'T': return !TARGET_CONST16 && constantpool_mem_p (op);\n-    case 'U': return !constantpool_mem_p (op);\n-    default: break;\n-    }\n-  return false;\n-}\n-\n-\n /* Make normal rtx_code into something we can index from an array.  */\n \n static enum internal_test\n@@ -1623,17 +1513,6 @@ override_options (void)\n   if (!TARGET_BOOLEANS && TARGET_HARD_FLOAT)\n     error (\"boolean registers required for the floating-point option\");\n \n-  xtensa_char_to_class['q'] = SP_REG;\n-  xtensa_char_to_class['a'] = GR_REGS;\n-  xtensa_char_to_class['b'] = ((TARGET_BOOLEANS) ? BR_REGS : NO_REGS);\n-  xtensa_char_to_class['f'] = ((TARGET_HARD_FLOAT) ? FP_REGS : NO_REGS);\n-  xtensa_char_to_class['A'] = ((TARGET_MAC16) ? ACC_REG : NO_REGS);\n-  xtensa_char_to_class['B'] = ((TARGET_SEXT) ? GR_REGS : NO_REGS);\n-  xtensa_char_to_class['C'] = ((TARGET_MUL16) ? GR_REGS: NO_REGS);\n-  xtensa_char_to_class['D'] = ((TARGET_DENSITY) ? GR_REGS: NO_REGS);\n-  xtensa_char_to_class['d'] = ((TARGET_DENSITY) ? AR_REGS: NO_REGS);\n-  xtensa_char_to_class['W'] = ((TARGET_CONST16) ? GR_REGS: NO_REGS);\n-\n   /* Set up array giving whether a given register can hold a given mode.  */\n   for (mode = VOIDmode;\n        mode != MAX_MACHINE_MODE;"}, {"sha": "4300e11d71140854cebd387092c2186d342b8771", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/887af464cde973b03e4e95ee3ad13a5c2ea076d8/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/887af464cde973b03e4e95ee3ad13a5c2ea076d8/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=887af464cde973b03e4e95ee3ad13a5c2ea076d8", "patch": "@@ -485,75 +485,6 @@ extern const enum reg_class xtensa_regno_to_class[FIRST_PSEUDO_REGISTER];\n    incoming or outgoing arguments.  */\n #define SMALL_REGISTER_CLASSES 1\n \n-\n-/* REGISTER AND CONSTANT CLASSES */\n-\n-/* Get reg_class from a letter such as appears in the machine\n-   description.\n-\n-   Available letters: a-f,h,j-l,q,t-z,A-D,W,Y-Z\n-\n-   DEFINED REGISTER CLASSES:\n-\n-   'a'  general-purpose registers except sp\n-   'q'  sp (aka a1)\n-   'D'\tgeneral-purpose registers (only if density option enabled)\n-   'd'  general-purpose registers, including sp (only if density enabled)\n-   'A'\tMAC16 accumulator (only if MAC16 option enabled)\n-   'B'\tgeneral-purpose registers (only if sext instruction enabled)\n-   'C'  general-purpose registers (only if mul16 option enabled)\n-   'W'  general-purpose registers (only if const16 option enabled)\n-   'b'\tcoprocessor boolean registers\n-   'f'\tfloating-point registers\n-*/\n-\n-extern enum reg_class xtensa_char_to_class[256];\n-\n-#define REG_CLASS_FROM_LETTER(C) xtensa_char_to_class[ (int) (C) ]\n-\n-/* The letters I, J, K, L, M, N, O, and P in a register constraint\n-   string can be used to stand for particular ranges of immediate\n-   operands.  This macro defines what the ranges are.  C is the\n-   letter, and VALUE is a constant value.  Return 1 if VALUE is\n-   in the range specified by C.\n-\n-   For Xtensa:\n-\n-   I = 12-bit signed immediate for MOVI\n-   J = 8-bit signed immediate for ADDI\n-   K = 4-bit value in (b4const U {0})\n-   L = 4-bit value in b4constu\n-   M = 7-bit immediate value for MOVI.N\n-   N = 8-bit unsigned immediate shifted left by 8 bits for ADDMI\n-   O = 4-bit immediate for ADDI.N\n-   P = valid immediate mask value for EXTUI */\n-\n-#define CONST_OK_FOR_LETTER_P  xtensa_const_ok_for_letter_p\n-#define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C) (0)\n-\n-\n-/* Other letters can be defined in a machine-dependent fashion to\n-   stand for particular classes of registers or other arbitrary\n-   operand types.\n-\n-   R = memory that can be accessed with a 4-bit unsigned offset\n-   T = memory in a constant pool (addressable with a pc-relative load)\n-   U = memory *NOT* in a constant pool\n-\n-   The offset range should not be checked here (except to distinguish\n-   denser versions of the instructions for which more general versions\n-   are available).  Doing so leads to problems in reloading: an\n-   argptr-relative address may become invalid when the phony argptr is\n-   eliminated in favor of the stack pointer (the offset becomes too\n-   large to fit in the instruction's immediate field); a reload is\n-   generated to fix this but the RTL is not immediately updated; in\n-   the meantime, the constraints are checked and none match.  The\n-   solution seems to be to simply skip the offset check here.  The\n-   address will be checked anyway because of the code in\n-   GO_IF_LEGITIMATE_ADDRESS.  */\n-\n-#define EXTRA_CONSTRAINT  xtensa_extra_constraint\n-\n #define PREFERRED_RELOAD_CLASS(X, CLASS)\t\t\t\t\\\n   xtensa_preferred_reload_class (X, CLASS, 0)\n "}, {"sha": "6b48e86e1dced4aa4a36bcb3e7365a325857c601", "filename": "gcc/config/xtensa/xtensa.md", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/887af464cde973b03e4e95ee3ad13a5c2ea076d8/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/887af464cde973b03e4e95ee3ad13a5c2ea076d8/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.md?ref=887af464cde973b03e4e95ee3ad13a5c2ea076d8", "patch": "@@ -117,9 +117,10 @@\n \t\t\t (eq_attr \"type\" \"fconv\")\n \t\t\t \"nothing\")\n \f\n-;; Include predicate definitions\n+;; Include predicates and constraints.\n \n (include \"predicates.md\")\n+(include \"constraints.md\")\n \n \f\n ;; Addition.\n@@ -1570,8 +1571,8 @@\n })\n \n (define_insn \"call_internal\"\n-  [(call (mem (match_operand:SI 0 \"call_insn_operand\" \"n,i,r\"))\n-\t (match_operand 1 \"\" \"i,i,i\"))]\n+  [(call (mem (match_operand:SI 0 \"call_insn_operand\" \"nir\"))\n+\t (match_operand 1 \"\" \"i\"))]\n   \"\"\n {\n   return xtensa_emit_call (0, operands);\n@@ -1594,16 +1595,10 @@\n     XEXP (operands[1], 0) = copy_to_mode_reg (Pmode, addr);\n })\n \n-;; Cannot combine constraints for operand 0 into \"afvb\":\n-;; reload.c:find_reloads seems to assume that grouped constraints somehow\n-;; specify related register classes, and when they don't the constraints\n-;; fail to match.  By not grouping the constraints, we get the correct\n-;; behavior.\n (define_insn \"call_value_internal\"\n-   [(set (match_operand 0 \"register_operand\" \"=af,af,af,v,v,v,b,b,b\")\n-         (call (mem (match_operand:SI 1 \"call_insn_operand\"\n-\t\t\t\t\t\"n,i,r,n,i,r,n,i,r\"))\n-               (match_operand 2 \"\" \"i,i,i,i,i,i,i,i,i\")))]\n+   [(set (match_operand 0 \"register_operand\" \"=a\")\n+         (call (mem (match_operand:SI 1 \"call_insn_operand\" \"nir\"))\n+               (match_operand 2 \"\" \"i\")))]\n   \"\"\n {\n   return xtensa_emit_call (1, operands);"}, {"sha": "6e7a55a34ec2f3bc0e2d48847ab16da7cf68d9b8", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/887af464cde973b03e4e95ee3ad13a5c2ea076d8/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/887af464cde973b03e4e95ee3ad13a5c2ea076d8/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=887af464cde973b03e4e95ee3ad13a5c2ea076d8", "patch": "@@ -3006,7 +3006,7 @@ The constant 0.\n \n @end table\n \n-@item Xtensa---@file{config/xtensa/xtensa.h}\n+@item Xtensa---@file{config/xtensa/constraints.md}\n @table @code\n @item a\n General-purpose 32-bit register"}]}