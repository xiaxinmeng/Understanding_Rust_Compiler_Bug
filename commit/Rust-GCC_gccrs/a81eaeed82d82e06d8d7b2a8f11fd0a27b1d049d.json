{"sha": "a81eaeed82d82e06d8d7b2a8f11fd0a27b1d049d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgxZWFlZWQ4MmQ4MmUwNmQ4ZDdiMmE4ZjExZmQwYTI3YjFkMDQ5ZA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-10-23T23:57:32Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-10-23T23:57:32Z"}, "message": "compiler: use builtin runtime calls for integer to string and string to array conversions.\n\nFrom-SVN: r203996", "tree": {"sha": "eb9cab3db8708b452891ba35b8f370be8c515ba6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb9cab3db8708b452891ba35b8f370be8c515ba6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a81eaeed82d82e06d8d7b2a8f11fd0a27b1d049d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a81eaeed82d82e06d8d7b2a8f11fd0a27b1d049d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a81eaeed82d82e06d8d7b2a8f11fd0a27b1d049d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a81eaeed82d82e06d8d7b2a8f11fd0a27b1d049d/comments", "author": null, "committer": null, "parents": [{"sha": "c2240038a67c0e5887c0d9aef55a8b3497751b71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2240038a67c0e5887c0d9aef55a8b3497751b71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2240038a67c0e5887c0d9aef55a8b3497751b71"}], "stats": {"total": 37, "additions": 11, "deletions": 26}, "files": [{"sha": "8d23e1d23a11dd2e0e65d06c60fc3b054fb73f93", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 11, "deletions": 26, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81eaeed82d82e06d8d7b2a8f11fd0a27b1d049d/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81eaeed82d82e06d8d7b2a8f11fd0a27b1d049d/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=a81eaeed82d82e06d8d7b2a8f11fd0a27b1d049d", "patch": "@@ -3351,14 +3351,10 @@ Type_conversion_expression::do_get_tree(Translate_context* context)\n \t  return se->get_tree(context);\n \t}\n \n-      static tree int_to_string_fndecl;\n-      ret = Gogo::call_builtin(&int_to_string_fndecl,\n-\t\t\t       this->location(),\n-\t\t\t       \"__go_int_to_string\",\n-\t\t\t       1,\n-\t\t\t       type_tree,\n-\t\t\t       int_type_tree,\n-\t\t\t       expr_tree);\n+      Call_expression* i2s_expr =\n+          Runtime::make_call(Runtime::INT_TO_STRING, this->location(), 1,\n+                             this->expr_);\n+      ret = i2s_expr->get_tree(context);\n     }\n   else if (type->is_string_type() && expr_type->is_slice_type())\n     {\n@@ -3408,29 +3404,18 @@ Type_conversion_expression::do_get_tree(Translate_context* context)\n     {\n       Type* e = type->array_type()->element_type()->forwarded();\n       go_assert(e->integer_type() != NULL);\n+\n+      Call_expression* s2a_expr;\n       if (e->integer_type()->is_byte())\n-\t{\n-\t  tree string_to_byte_array_fndecl = NULL_TREE;\n-\t  ret = Gogo::call_builtin(&string_to_byte_array_fndecl,\n-\t\t\t\t   this->location(),\n-\t\t\t\t   \"__go_string_to_byte_array\",\n-\t\t\t\t   1,\n-\t\t\t\t   type_tree,\n-\t\t\t\t   TREE_TYPE(expr_tree),\n-\t\t\t\t   expr_tree);\n-\t}\n+        s2a_expr = Runtime::make_call(Runtime::STRING_TO_BYTE_ARRAY,\n+                                      this->location(), 1, this->expr_);\n       else\n \t{\n \t  go_assert(e->integer_type()->is_rune());\n-\t  tree string_to_int_array_fndecl = NULL_TREE;\n-\t  ret = Gogo::call_builtin(&string_to_int_array_fndecl,\n-\t\t\t\t   this->location(),\n-\t\t\t\t   \"__go_string_to_int_array\",\n-\t\t\t\t   1,\n-\t\t\t\t   type_tree,\n-\t\t\t\t   TREE_TYPE(expr_tree),\n-\t\t\t\t   expr_tree);\n+          s2a_expr = Runtime::make_call(Runtime::STRING_TO_INT_ARRAY,\n+                                        this->location(), 1, this->expr_);\n \t}\n+      ret = s2a_expr->get_tree(context);\n     }\n   else if ((type->is_unsafe_pointer_type()\n \t    && expr_type->points_to() != NULL)"}]}