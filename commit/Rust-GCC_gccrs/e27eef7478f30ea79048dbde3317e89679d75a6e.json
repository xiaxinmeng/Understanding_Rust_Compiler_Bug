{"sha": "e27eef7478f30ea79048dbde3317e89679d75a6e", "node_id": "C_kwDOANBUbNoAKGUyN2VlZjc0NzhmMzBlYTc5MDQ4ZGJkZTMzMTdlODk2NzlkNzVhNmU", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-04-27T06:28:31Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-04-29T06:08:17Z"}, "message": "middle-end/105376 - invalid REAL_CST for DFP constant\n\nWe are eventually ICEing in decimal_to_decnumber on non-decimal\nREAL_VALUE_TYPE that creep in from uses of build_real (..., dconst*)\nfor DFP types.  The following extends the decimal_to_decnumber\nspecial-casing of dconst* to build_real, avoiding the bogus REAL_CSTs\nfrom creeping into the IL and modified to ones not handled by\nthe decimal_to_decnumber special casing.  It also makes sure to\nICE for not handled dconst* values at the point we build the REAL_CST.\n\n2022-04-27  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/105376\n\t* tree.cc (build_real): Special case dconst* arguments\n\tfor decimal floating point types.\n\n\t* gcc.dg/pr105376.c: New testcase.", "tree": {"sha": "7d58bccb9bf59c8234a596ff60dee89f9ffec4fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d58bccb9bf59c8234a596ff60dee89f9ffec4fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e27eef7478f30ea79048dbde3317e89679d75a6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e27eef7478f30ea79048dbde3317e89679d75a6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e27eef7478f30ea79048dbde3317e89679d75a6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e27eef7478f30ea79048dbde3317e89679d75a6e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae5168ddc92d070058ec0fcc78de0ef40e4ba1a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae5168ddc92d070058ec0fcc78de0ef40e4ba1a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae5168ddc92d070058ec0fcc78de0ef40e4ba1a1"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "f19ecf4aab21142abe88b9166f4718ed22477fe7", "filename": "gcc/testsuite/gcc.dg/pr105376.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e27eef7478f30ea79048dbde3317e89679d75a6e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105376.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e27eef7478f30ea79048dbde3317e89679d75a6e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105376.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105376.c?ref=e27eef7478f30ea79048dbde3317e89679d75a6e", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile { target dfp } } */\n+/* { dg-options \"-O -g\" } */\n+\n+void\n+foo (_Decimal64 d, _Decimal64 e)\n+{\n+  d -= -d;\n+  d *= -e;\n+}"}, {"sha": "4cf3785270b38d7ca9ef77087aba729c8cdf8c84", "filename": "gcc/tree.cc", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e27eef7478f30ea79048dbde3317e89679d75a6e/gcc%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e27eef7478f30ea79048dbde3317e89679d75a6e/gcc%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.cc?ref=e27eef7478f30ea79048dbde3317e89679d75a6e", "patch": "@@ -70,6 +70,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"escaped_string.h\"\n #include \"gimple-range.h\"\n #include \"gomp-constants.h\"\n+#include \"dfp.h\"\n \n /* Tree code classes.  */\n \n@@ -2383,6 +2384,26 @@ build_real (tree type, REAL_VALUE_TYPE d)\n   REAL_VALUE_TYPE *dp;\n   int overflow = 0;\n \n+  /* dconst{1,2,m1,half} are used in various places in\n+     the middle-end and optimizers, allow them here\n+     even for decimal floating point types as an exception\n+     by converting them to decimal.  */\n+  if (DECIMAL_FLOAT_MODE_P (TYPE_MODE (type))\n+      && d.cl == rvc_normal\n+      && !d.decimal)\n+    {\n+      if (memcmp (&d, &dconst1, sizeof (d)) == 0)\n+\tdecimal_real_from_string (&d, \"1\");\n+      else if (memcmp (&d, &dconst2, sizeof (d)) == 0)\n+\tdecimal_real_from_string (&d, \"2\");\n+      else if (memcmp (&d, &dconstm1, sizeof (d)) == 0)\n+\tdecimal_real_from_string (&d, \"-1\");\n+      else if (memcmp (&d, &dconsthalf, sizeof (d)) == 0)\n+\tdecimal_real_from_string (&d, \"0.5\");\n+      else\n+\tgcc_unreachable ();\n+    }\n+\n   /* ??? Used to check for overflow here via CHECK_FLOAT_TYPE.\n      Consider doing it via real_convert now.  */\n "}]}