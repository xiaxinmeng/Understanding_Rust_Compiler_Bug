{"sha": "34f016ed1f9ab59baa74e2b429b25e6d9ce9e80d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRmMDE2ZWQxZjlhYjU5YmFhNzRlMmI0MjliMjVlNmQ5Y2U5ZTgwZA==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1995-12-14T23:39:17Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1995-12-14T23:39:17Z"}, "message": "(expand_divmod...\n\n(expand_divmod, case TRUNC_DIV_EXPR): Only reject\nlarger-than-HOST_BITS_PER_WIDE_INT modes for general constants,\nnot for powers-of-2.\n\nFrom-SVN: r10727", "tree": {"sha": "1c388ed40c37cc299169a158ac14f5572b140f74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c388ed40c37cc299169a158ac14f5572b140f74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34f016ed1f9ab59baa74e2b429b25e6d9ce9e80d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34f016ed1f9ab59baa74e2b429b25e6d9ce9e80d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34f016ed1f9ab59baa74e2b429b25e6d9ce9e80d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34f016ed1f9ab59baa74e2b429b25e6d9ce9e80d/comments", "author": null, "committer": null, "parents": [{"sha": "f20200f4bc55067621823cd2f0ba9e87c18b4e17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f20200f4bc55067621823cd2f0ba9e87c18b4e17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f20200f4bc55067621823cd2f0ba9e87c18b4e17"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "4341b9930311ce110693369bb26b3c98aa7d5ab5", "filename": "gcc/expmed.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f016ed1f9ab59baa74e2b429b25e6d9ce9e80d/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f016ed1f9ab59baa74e2b429b25e6d9ce9e80d/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=34f016ed1f9ab59baa74e2b429b25e6d9ce9e80d", "patch": "@@ -2835,7 +2835,7 @@ expand_divmod (rem_flag, code, mode, op0, op1, target, unsignedp)\n       {\n       case TRUNC_MOD_EXPR:\n       case TRUNC_DIV_EXPR:\n-\tif (op1_is_constant && HOST_BITS_PER_WIDE_INT >= size)\n+\tif (op1_is_constant)\n \t  {\n \t    if (unsignedp)\n \t      {\n@@ -2870,7 +2870,7 @@ expand_divmod (rem_flag, code, mode, op0, op1, target, unsignedp)\n \t\t    if (quotient == 0)\n \t\t      goto fail1;\n \t\t  }\n-\t\telse\n+\t\telse if (size <= HOST_BITS_PER_WIDE_INT)\n \t\t  {\n \t\t    /* Find a suitable multiplier and right shift count instead\n \t\t       of multiplying with D.  */\n@@ -2936,6 +2936,8 @@ expand_divmod (rem_flag, code, mode, op0, op1, target, unsignedp)\n \t\t\t\t\t\t tquotient, 1);\n \t\t      }\n \t\t  }\n+\t\telse\t\t/* Too wide mode to use tricky code */\n+\t\t  break;\n \n \t\tinsn = get_last_insn ();\n \t\tif (insn != last\n@@ -3029,7 +3031,7 @@ expand_divmod (rem_flag, code, mode, op0, op1, target, unsignedp)\n \t\t\t\t\t\tquotient, quotient, 0);\n \t\t      }\n \t\t  }\n-\t\telse\n+\t\telse if (size <= HOST_BITS_PER_WIDE_INT)\n \t\t  {\n \t\t    choose_multiplier (abs_d, size, size - 1,\n \t\t\t\t       &ml, &post_shift, &lgup);\n@@ -3081,6 +3083,8 @@ expand_divmod (rem_flag, code, mode, op0, op1, target, unsignedp)\n \t\t\t\t\t\t    tquotient);\n \t\t      }\n \t\t  }\n+\t\telse\t\t/* Too wide mode to use tricky code */\n+\t\t  break;\n \n \t\tinsn = get_last_insn ();\n \t\tif (insn != last"}]}