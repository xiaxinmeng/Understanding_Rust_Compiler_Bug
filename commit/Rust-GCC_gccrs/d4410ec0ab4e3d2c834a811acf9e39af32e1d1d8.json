{"sha": "d4410ec0ab4e3d2c834a811acf9e39af32e1d1d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ0MTBlYzBhYjRlM2QyYzgzNGE4MTFhY2Y5ZTM5YWYzMmUxZDFkOA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2019-05-15T15:31:18Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2019-05-15T15:31:18Z"}, "message": "i386: Allow MMX vector expanders with TARGET_MMX_WITH_SSE\n\n\tPR target/89021\n\t* config/i386/mmx.md (*vec_dupv2sf): Changed to\n\tdefine_insn_and_split to support SSE emulation.\n\t(*vec_extractv2sf_0): Likewise.\n\t(*vec_extractv2sf_1): Likewise.\n\t(*vec_extractv2si_0): Likewise.\n\t(*vec_extractv2si_1): Likewise.\n\t(*vec_extractv2si_zext_mem): Likewise.\n\t(vec_setv2sf): Also allow TARGET_MMX_WITH_SSE.\n\t(vec_extractv2sf_1 splitter): Likewise.\n\t(vec_extractv2sfsf): Likewise.\n\t(vec_setv2si): Likewise.\n\t(vec_extractv2si_1 splitter): Likewise.\n\t(vec_extractv2sisi): Likewise.\n\t(vec_setv4hi): Likewise.\n\t(vec_extractv4hihi): Likewise.\n\t(vec_setv8qi): Likewise.\n\t(vec_extractv8qiqi): Likewise.\n\t(vec_extractv2sfsf): Also allow TARGET_MMX_WITH_SSE.  Pass\n\tTARGET_MMX_WITH_SSE ix86_expand_vector_extract.\n\t(vec_extractv2sisi): Likewise.\n\t(vec_extractv4hihi): Likewise.\n\t(vec_extractv8qiqi): Likewise.\n\t(vec_initv2sfsf): Also allow TARGET_MMX_WITH_SSE.  Pass\n\tTARGET_MMX_WITH_SSE to ix86_expand_vector_init.\n\t(vec_initv2sisi): Likewise.\n\t(vec_initv4hihi): Likewise.\n\t(vec_initv8qiqi): Likewise.\n\t(vec_setv2si): Also allow TARGET_MMX_WITH_SSE.  Pass\n\tTARGET_MMX_WITH_SSE to ix86_expand_vector_set.\n\t(vec_setv4hi): Likewise.\n\t(vec_setv8qi): Likewise.\n\nFrom-SVN: r271251", "tree": {"sha": "dd6246bb8119b4deb36a544455be140392689c3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd6246bb8119b4deb36a544455be140392689c3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4410ec0ab4e3d2c834a811acf9e39af32e1d1d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4410ec0ab4e3d2c834a811acf9e39af32e1d1d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4410ec0ab4e3d2c834a811acf9e39af32e1d1d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4410ec0ab4e3d2c834a811acf9e39af32e1d1d8/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e093d046bf0d4747fb69a45d46252413bda638dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e093d046bf0d4747fb69a45d46252413bda638dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e093d046bf0d4747fb69a45d46252413bda638dd"}], "stats": {"total": 145, "additions": 101, "deletions": 44}, "files": [{"sha": "c58b5f68c598786a333b2725dcd422636c2fab33", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4410ec0ab4e3d2c834a811acf9e39af32e1d1d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4410ec0ab4e3d2c834a811acf9e39af32e1d1d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d4410ec0ab4e3d2c834a811acf9e39af32e1d1d8", "patch": "@@ -1,3 +1,38 @@\n+2019-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/89021\n+\t* config/i386/mmx.md (*vec_dupv2sf): Changed to\n+\tdefine_insn_and_split to support SSE emulation.\n+\t(*vec_extractv2sf_0): Likewise.\n+\t(*vec_extractv2sf_1): Likewise.\n+\t(*vec_extractv2si_0): Likewise.\n+\t(*vec_extractv2si_1): Likewise.\n+\t(*vec_extractv2si_zext_mem): Likewise.\n+\t(vec_setv2sf): Also allow TARGET_MMX_WITH_SSE.\n+\t(vec_extractv2sf_1 splitter): Likewise.\n+\t(vec_extractv2sfsf): Likewise.\n+\t(vec_setv2si): Likewise.\n+\t(vec_extractv2si_1 splitter): Likewise.\n+\t(vec_extractv2sisi): Likewise.\n+\t(vec_setv4hi): Likewise.\n+\t(vec_extractv4hihi): Likewise.\n+\t(vec_setv8qi): Likewise.\n+\t(vec_extractv8qiqi): Likewise.\n+\t(vec_extractv2sfsf): Also allow TARGET_MMX_WITH_SSE.  Pass\n+\tTARGET_MMX_WITH_SSE ix86_expand_vector_extract.\n+\t(vec_extractv2sisi): Likewise.\n+\t(vec_extractv4hihi): Likewise.\n+\t(vec_extractv8qiqi): Likewise.\n+\t(vec_initv2sfsf): Also allow TARGET_MMX_WITH_SSE.  Pass\n+\tTARGET_MMX_WITH_SSE to ix86_expand_vector_init.\n+\t(vec_initv2sisi): Likewise.\n+\t(vec_initv4hihi): Likewise.\n+\t(vec_initv8qiqi): Likewise.\n+\t(vec_setv2si): Also allow TARGET_MMX_WITH_SSE.  Pass\n+\tTARGET_MMX_WITH_SSE to ix86_expand_vector_set.\n+\t(vec_setv4hi): Likewise.\n+\t(vec_setv8qi): Likewise.\n+\n 2019-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/89021"}, {"sha": "29bcf931836185a233b0a6a598f207404e5b6ecf", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 66, "deletions": 44, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4410ec0ab4e3d2c834a811acf9e39af32e1d1d8/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4410ec0ab4e3d2c834a811acf9e39af32e1d1d8/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=d4410ec0ab4e3d2c834a811acf9e39af32e1d1d8", "patch": "@@ -580,14 +580,23 @@\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2SF\")])\n \n-(define_insn \"*vec_dupv2sf\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+(define_insn_and_split \"*vec_dupv2sf\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y,x,Yv\")\n \t(vec_duplicate:V2SF\n-\t  (match_operand:SF 1 \"register_operand\" \"0\")))]\n-  \"TARGET_MMX\"\n-  \"punpckldq\\t%0, %0\"\n-  [(set_attr \"type\" \"mmxcvt\")\n-   (set_attr \"mode\" \"DI\")])\n+\t  (match_operand:SF 1 \"register_operand\" \"0,0,Yv\")))]\n+  \"TARGET_MMX || TARGET_MMX_WITH_SSE\"\n+  \"@\n+   punpckldq\\t%0, %0\n+   #\n+   #\"\n+  \"TARGET_MMX_WITH_SSE && reload_completed\"\n+  [(set (match_dup 0)\n+\t(vec_duplicate:V4SF (match_dup 1)))]\n+  \"operands[0] = lowpart_subreg (V4SFmode, operands[0],\n+\t\t\t\t GET_MODE (operands[0]));\"\n+  [(set_attr \"mmx_isa\" \"native,x64_noavx,x64_avx\")\n+   (set_attr \"type\" \"mmxcvt,ssemov,ssemov\")\n+   (set_attr \"mode\" \"DI,TI,TI\")])\n \n (define_insn \"*mmx_concatv2sf\"\n   [(set (match_operand:V2SF 0 \"register_operand\"     \"=y,y\")\n@@ -605,9 +614,9 @@\n   [(match_operand:V2SF 0 \"register_operand\")\n    (match_operand:SF 1 \"register_operand\")\n    (match_operand 2 \"const_int_operand\")]\n-  \"TARGET_MMX\"\n+  \"TARGET_MMX || TARGET_MMX_WITH_SSE\"\n {\n-  ix86_expand_vector_set (false, operands[0], operands[1],\n+  ix86_expand_vector_set (TARGET_MMX_WITH_SSE, operands[0], operands[1],\n \t\t\t  INTVAL (operands[2]));\n   DONE;\n })\n@@ -619,11 +628,13 @@\n \t(vec_select:SF\n \t  (match_operand:V2SF 1 \"nonimmediate_operand\" \" xm,x,ym,y,m,m\")\n \t  (parallel [(const_int 0)])))]\n-  \"TARGET_MMX && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  \"(TARGET_MMX || TARGET_MMX_WITH_SSE)\n+   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 0) (match_dup 1))]\n-  \"operands[1] = gen_lowpart (SFmode, operands[1]);\")\n+  \"operands[1] = gen_lowpart (SFmode, operands[1]);\"\n+  [(set_attr \"mmx_isa\" \"*,*,native,native,*,*\")])\n \n ;; Avoid combining registers from different units in a single alternative,\n ;; see comment above inline_secondary_memory_needed function in i386.c\n@@ -632,7 +643,8 @@\n \t(vec_select:SF\n \t  (match_operand:V2SF 1 \"nonimmediate_operand\" \" 0,x,x,o,o,o,o\")\n \t  (parallel [(const_int 1)])))]\n-  \"TARGET_MMX && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  \"(TARGET_MMX || TARGET_MMX_WITH_SSE)\n+   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n    punpckhdq\\t%0, %0\n    %vmovshdup\\t{%1, %0|%0, %1}\n@@ -642,6 +654,7 @@\n    #\n    #\"\n   [(set_attr \"isa\" \"*,sse3,noavx,*,*,*,*\")\n+   (set_attr \"mmx_isa\" \"native,*,*,native,*,*,*\")\n    (set_attr \"type\" \"mmxcvt,sse,sseshuf1,mmxmov,ssemov,fmov,imov\")\n    (set (attr \"length_immediate\")\n      (if_then_else (eq_attr \"alternative\" \"2\")\n@@ -659,27 +672,28 @@\n \t(vec_select:SF\n \t  (match_operand:V2SF 1 \"memory_operand\")\n \t  (parallel [(const_int 1)])))]\n-  \"TARGET_MMX && reload_completed\"\n+  \"(TARGET_MMX || TARGET_MMX_WITH_SSE) && reload_completed\"\n   [(set (match_dup 0) (match_dup 1))]\n   \"operands[1] = adjust_address (operands[1], SFmode, 4);\")\n \n (define_expand \"vec_extractv2sfsf\"\n   [(match_operand:SF 0 \"register_operand\")\n    (match_operand:V2SF 1 \"register_operand\")\n    (match_operand 2 \"const_int_operand\")]\n-  \"TARGET_MMX\"\n+  \"TARGET_MMX || TARGET_MMX_WITH_SSE\"\n {\n-  ix86_expand_vector_extract (false, operands[0], operands[1],\n-\t\t\t      INTVAL (operands[2]));\n+  ix86_expand_vector_extract (TARGET_MMX_WITH_SSE, operands[0],\n+\t\t\t      operands[1], INTVAL (operands[2]));\n   DONE;\n })\n \n (define_expand \"vec_initv2sfsf\"\n   [(match_operand:V2SF 0 \"register_operand\")\n    (match_operand 1)]\n-  \"TARGET_SSE\"\n+  \"(TARGET_MMX || TARGET_MMX_WITH_SSE) && TARGET_SSE\"\n {\n-  ix86_expand_vector_init (false, operands[0], operands[1]);\n+  ix86_expand_vector_init (TARGET_MMX_WITH_SSE, operands[0],\n+\t\t\t   operands[1]);\n   DONE;\n })\n \n@@ -1551,9 +1565,9 @@\n   [(match_operand:V2SI 0 \"register_operand\")\n    (match_operand:SI 1 \"register_operand\")\n    (match_operand 2 \"const_int_operand\")]\n-  \"TARGET_MMX\"\n+  \"TARGET_MMX || TARGET_MMX_WITH_SSE\"\n {\n-  ix86_expand_vector_set (false, operands[0], operands[1],\n+  ix86_expand_vector_set (TARGET_MMX_WITH_SSE, operands[0], operands[1],\n \t\t\t  INTVAL (operands[2]));\n   DONE;\n })\n@@ -1565,11 +1579,13 @@\n \t(vec_select:SI\n \t  (match_operand:V2SI 1 \"nonimmediate_operand\" \"xm,x,ym,y,m\")\n \t  (parallel [(const_int 0)])))]\n-  \"TARGET_MMX && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  \"(TARGET_MMX || TARGET_MMX_WITH_SSE)\n+   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 0) (match_dup 1))]\n-  \"operands[1] = gen_lowpart (SImode, operands[1]);\")\n+  \"operands[1] = gen_lowpart (SImode, operands[1]);\"\n+  [(set_attr \"mmx_isa\" \"*,*,native,native,*\")])\n \n ;; Avoid combining registers from different units in a single alternative,\n ;; see comment above inline_secondary_memory_needed function in i386.c\n@@ -1578,7 +1594,8 @@\n \t(vec_select:SI\n \t  (match_operand:V2SI 1 \"nonimmediate_operand\" \" 0,x,x,o,o,o\")\n \t  (parallel [(const_int 1)])))]\n-  \"TARGET_MMX && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  \"(TARGET_MMX || TARGET_MMX_WITH_SSE)\n+   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n    punpckhdq\\t%0, %0\n    %vpshufd\\t{$0xe5, %1, %0|%0, %1, 0xe5}\n@@ -1587,6 +1604,7 @@\n    #\n    #\"\n   [(set_attr \"isa\" \"*,sse2,noavx,*,*,*\")\n+   (set_attr \"mmx_isa\" \"native,*,*,native,*,*\")\n    (set_attr \"type\" \"mmxcvt,sseshuf1,sseshuf1,mmxmov,ssemov,imov\")\n    (set (attr \"length_immediate\")\n      (if_then_else (eq_attr \"alternative\" \"1,2\")\n@@ -1600,7 +1618,7 @@\n \t(vec_select:SI\n \t  (match_operand:V2SI 1 \"memory_operand\")\n \t  (parallel [(const_int 1)])))]\n-  \"TARGET_MMX && reload_completed\"\n+  \"(TARGET_MMX || TARGET_MMX_WITH_SSE) && reload_completed\"\n   [(set (match_dup 0) (match_dup 1))]\n   \"operands[1] = adjust_address (operands[1], SImode, 4);\")\n \n@@ -1617,35 +1635,37 @@\n {\n   operands[1] = adjust_address (operands[1], SImode, INTVAL (operands[2]) * 4);\n }\n-  [(set_attr \"isa\" \"*,sse2,*\")])\n+  [(set_attr \"isa\" \"*,sse2,*\")\n+   (set_attr \"mmx_isa\" \"native,*,*\")])\n \n (define_expand \"vec_extractv2sisi\"\n   [(match_operand:SI 0 \"register_operand\")\n    (match_operand:V2SI 1 \"register_operand\")\n    (match_operand 2 \"const_int_operand\")]\n-  \"TARGET_MMX\"\n+  \"TARGET_MMX || TARGET_MMX_WITH_SSE\"\n {\n-  ix86_expand_vector_extract (false, operands[0], operands[1],\n-\t\t\t      INTVAL (operands[2]));\n+  ix86_expand_vector_extract (TARGET_MMX_WITH_SSE, operands[0],\n+\t\t\t      operands[1], INTVAL (operands[2]));\n   DONE;\n })\n \n (define_expand \"vec_initv2sisi\"\n   [(match_operand:V2SI 0 \"register_operand\")\n    (match_operand 1)]\n-  \"TARGET_SSE\"\n+  \"(TARGET_MMX || TARGET_MMX_WITH_SSE) && TARGET_SSE\"\n {\n-  ix86_expand_vector_init (false, operands[0], operands[1]);\n+  ix86_expand_vector_init (TARGET_MMX_WITH_SSE, operands[0],\n+\t\t\t   operands[1]);\n   DONE;\n })\n \n (define_expand \"vec_setv4hi\"\n   [(match_operand:V4HI 0 \"register_operand\")\n    (match_operand:HI 1 \"register_operand\")\n    (match_operand 2 \"const_int_operand\")]\n-  \"TARGET_MMX\"\n+  \"TARGET_MMX || TARGET_MMX_WITH_SSE\"\n {\n-  ix86_expand_vector_set (false, operands[0], operands[1],\n+  ix86_expand_vector_set (TARGET_MMX_WITH_SSE, operands[0], operands[1],\n \t\t\t  INTVAL (operands[2]));\n   DONE;\n })\n@@ -1654,29 +1674,30 @@\n   [(match_operand:HI 0 \"register_operand\")\n    (match_operand:V4HI 1 \"register_operand\")\n    (match_operand 2 \"const_int_operand\")]\n-  \"TARGET_MMX\"\n+  \"TARGET_MMX || TARGET_MMX_WITH_SSE\"\n {\n-  ix86_expand_vector_extract (false, operands[0], operands[1],\n-\t\t\t      INTVAL (operands[2]));\n+  ix86_expand_vector_extract (TARGET_MMX_WITH_SSE, operands[0],\n+\t\t\t      operands[1], INTVAL (operands[2]));\n   DONE;\n })\n \n (define_expand \"vec_initv4hihi\"\n   [(match_operand:V4HI 0 \"register_operand\")\n    (match_operand 1)]\n-  \"TARGET_SSE\"\n+  \"(TARGET_MMX || TARGET_MMX_WITH_SSE) && TARGET_SSE\"\n {\n-  ix86_expand_vector_init (false, operands[0], operands[1]);\n+  ix86_expand_vector_init (TARGET_MMX_WITH_SSE, operands[0],\n+\t\t\t   operands[1]);\n   DONE;\n })\n \n (define_expand \"vec_setv8qi\"\n   [(match_operand:V8QI 0 \"register_operand\")\n    (match_operand:QI 1 \"register_operand\")\n    (match_operand 2 \"const_int_operand\")]\n-  \"TARGET_MMX\"\n+  \"TARGET_MMX || TARGET_MMX_WITH_SSE\"\n {\n-  ix86_expand_vector_set (false, operands[0], operands[1],\n+  ix86_expand_vector_set (TARGET_MMX_WITH_SSE, operands[0], operands[1],\n \t\t\t  INTVAL (operands[2]));\n   DONE;\n })\n@@ -1685,19 +1706,20 @@\n   [(match_operand:QI 0 \"register_operand\")\n    (match_operand:V8QI 1 \"register_operand\")\n    (match_operand 2 \"const_int_operand\")]\n-  \"TARGET_MMX\"\n+  \"TARGET_MMX || TARGET_MMX_WITH_SSE\"\n {\n-  ix86_expand_vector_extract (false, operands[0], operands[1],\n-\t\t\t      INTVAL (operands[2]));\n+  ix86_expand_vector_extract (TARGET_MMX_WITH_SSE, operands[0],\n+\t\t\t      operands[1], INTVAL (operands[2]));\n   DONE;\n })\n \n (define_expand \"vec_initv8qiqi\"\n   [(match_operand:V8QI 0 \"register_operand\")\n    (match_operand 1)]\n-  \"TARGET_SSE\"\n+  \"(TARGET_MMX || TARGET_MMX_WITH_SSE) && TARGET_SSE\"\n {\n-  ix86_expand_vector_init (false, operands[0], operands[1]);\n+  ix86_expand_vector_init (TARGET_MMX_WITH_SSE, operands[0],\n+\t\t\t   operands[1]);\n   DONE;\n })\n "}]}