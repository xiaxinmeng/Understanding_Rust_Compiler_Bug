{"sha": "ebd63afa68237d05f4f5dfeb847d341a76239b68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJkNjNhZmE2ODIzN2QwNWY0ZjVkZmViODQ3ZDM0MWE3NjIzOWI2OA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2015-03-17T05:20:08Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2015-03-17T05:20:08Z"}, "message": "re PR fortran/59198 (ICE on cyclically dependent polymorphic types)\n\n2014-03-17  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/59198\n\t* trans-types.c (gfc_get_derived_type): If an abstract derived\n\ttype with procedure pointer components has no other type of\n\tcomponent, return the backend_decl. Otherwise build the\n\tcomponents if any of the non-procedure pointer components have\n\tno backend_decl.\n\n2014-03-17  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/59198\n\t* gfortran.dg/proc_ptr_comp_44.f90 : New test\n\t* gfortran.dg/proc_ptr_comp_45.f90 : New test\n\nFrom-SVN: r221474", "tree": {"sha": "2c81bd7fbe477a4652381330a41551d646354630", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c81bd7fbe477a4652381330a41551d646354630"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebd63afa68237d05f4f5dfeb847d341a76239b68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebd63afa68237d05f4f5dfeb847d341a76239b68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebd63afa68237d05f4f5dfeb847d341a76239b68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebd63afa68237d05f4f5dfeb847d341a76239b68/comments", "author": null, "committer": null, "parents": [{"sha": "448c7e25258690336857663669ae85fba4e229d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/448c7e25258690336857663669ae85fba4e229d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/448c7e25258690336857663669ae85fba4e229d6"}], "stats": {"total": 154, "additions": 152, "deletions": 2}, "files": [{"sha": "21a3b35e9a894004c4e18ee5ab1a2de8d89f33f6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebd63afa68237d05f4f5dfeb847d341a76239b68/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebd63afa68237d05f4f5dfeb847d341a76239b68/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ebd63afa68237d05f4f5dfeb847d341a76239b68", "patch": "@@ -1,3 +1,12 @@\n+2014-03-17  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/59198\n+\t* trans-types.c (gfc_get_derived_type): If an abstract derived\n+\ttype with procedure pointer components has no other type of\n+\tcomponent, return the backend_decl. Otherwise build the\n+\tcomponents if any of the non-procedure pointer components have\n+\tno backend_decl.\n+\n 2015-03-16  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/64432"}, {"sha": "708289f064faa857355f8a204d9e596128f15c0a", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebd63afa68237d05f4f5dfeb847d341a76239b68/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebd63afa68237d05f4f5dfeb847d341a76239b68/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=ebd63afa68237d05f4f5dfeb847d341a76239b68", "patch": "@@ -2448,9 +2448,24 @@ gfc_get_derived_type (gfc_symbol * derived)\n       /* Its components' backend_decl have been built or we are\n \t seeing recursion through the formal arglist of a procedure\n \t pointer component.  */\n-      if (TYPE_FIELDS (derived->backend_decl)\n-\t    || derived->attr.proc_pointer_comp)\n+      if (TYPE_FIELDS (derived->backend_decl))\n         return derived->backend_decl;\n+      else if (derived->attr.abstract\n+\t       && derived->attr.proc_pointer_comp)\n+\t{\n+\t  /* If an abstract derived type with procedure pointer\n+\t     components has no other type of component, return the\n+\t     backend_decl. Otherwise build the components if any of the\n+\t     non-procedure pointer components have no backend_decl.  */\n+\t  for (c = derived->components; c; c = c->next)\n+\t    {\n+\t      if (!c->attr.proc_pointer && c->backend_decl == NULL)\n+\t\tbreak;\n+\t      else if (c->next == NULL)\n+\t\treturn derived->backend_decl;\n+\t    }\n+\t  typenode = derived->backend_decl;\n+\t}\n       else\n         typenode = derived->backend_decl;\n     }"}, {"sha": "12324f0e4940f3efd9adba2b1dd867f084e8afb5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebd63afa68237d05f4f5dfeb847d341a76239b68/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebd63afa68237d05f4f5dfeb847d341a76239b68/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ebd63afa68237d05f4f5dfeb847d341a76239b68", "patch": "@@ -1,3 +1,9 @@\n+2014-03-17  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/59198\n+\t* gfortran.dg/proc_ptr_comp_44.f90 : New test\n+\t* gfortran.dg/proc_ptr_comp_45.f90 : New test\n+\n 2015-03-16 Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/64432"}, {"sha": "15795c2d0faafb1d84e43ce184ca004ac936e4ef", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_comp_44.f90", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebd63afa68237d05f4f5dfeb847d341a76239b68/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_44.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebd63afa68237d05f4f5dfeb847d341a76239b68/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_44.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_44.f90?ref=ebd63afa68237d05f4f5dfeb847d341a76239b68", "patch": "@@ -0,0 +1,71 @@\n+! { dg-do compile }\n+! Test the fix for PR59198, where the field for the component 'term' in\n+! the derived type 'decay_gen_t' was not being built.\n+!\n+! Contributed by Juergen Reuter  <juergen.reuter@desy.de>\n+!\n+module decays\n+  abstract interface\n+     function obs_unary_int ()\n+     end function obs_unary_int\n+  end interface\n+\n+  type, abstract :: any_config_t\n+   contains\n+     procedure (any_config_final), deferred :: final\n+  end type any_config_t\n+\n+  type :: decay_term_t\n+     type(unstable_t), dimension(:), pointer :: unstable_product => null ()\n+  end type decay_term_t\n+\n+  type, abstract :: decay_gen_t\n+     type(decay_term_t), dimension(:), allocatable :: term\n+     procedure(obs_unary_int),   nopass, pointer :: obs1_int  => null ()\n+  end type decay_gen_t\n+\n+  type, extends (decay_gen_t) :: decay_root_t\n+   contains\n+     procedure :: final => decay_root_final\n+  end type decay_root_t\n+\n+  type, abstract :: rng_t\n+  end type rng_t\n+\n+  type, extends (decay_gen_t) :: decay_t\n+     class(rng_t), allocatable :: rng\n+   contains\n+     procedure :: final => decay_final\n+  end type decay_t\n+\n+  type, extends (any_config_t) :: unstable_config_t\n+   contains\n+     procedure :: final => unstable_config_final\n+  end type unstable_config_t\n+\n+  type :: unstable_t\n+     type(unstable_config_t), pointer :: config => null ()\n+     type(decay_t), dimension(:), allocatable :: decay\n+  end type unstable_t\n+\n+  interface\n+     subroutine any_config_final (object)\n+       import\n+       class(any_config_t), intent(inout) :: object\n+     end subroutine any_config_final\n+  end interface\n+\n+contains\n+  subroutine decay_root_final (object)\n+    class(decay_root_t), intent(inout) :: object\n+  end subroutine decay_root_final\n+\n+  recursive subroutine decay_final (object)\n+    class(decay_t), intent(inout) :: object\n+  end subroutine decay_final\n+\n+  recursive subroutine unstable_config_final (object)\n+    class(unstable_config_t), intent(inout) :: object\n+  end subroutine unstable_config_final\n+\n+end module decays"}, {"sha": "8f8a8fee241fa01e97d3eac03bd00e76cc46a34a", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_comp_45.f90", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebd63afa68237d05f4f5dfeb847d341a76239b68/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_45.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebd63afa68237d05f4f5dfeb847d341a76239b68/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_45.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_45.f90?ref=ebd63afa68237d05f4f5dfeb847d341a76239b68", "patch": "@@ -0,0 +1,49 @@\n+! { dg-do run }\n+! Test the fix for PR59198, where the field for the component 'term' in\n+! the derived type 'decay_gen_t' was not being built.\n+!\n+! Contributed by Paul Thomas and based on the original testcase by\n+! Juergen Reuter  <juergen.reuter@desy.de>\n+!\n+module decays\n+\n+  implicit none\n+\n+  interface\n+    real elemental function iface (arg)\n+      real, intent(in) :: arg\n+    end function\n+  end interface\n+\n+  type :: decay_term_t\n+     type(decay_t), pointer :: unstable_product\n+     integer :: i\n+  end type\n+\n+  type :: decay_gen_t\n+     procedure(iface), nopass, pointer :: obs1_int\n+     type(decay_term_t), allocatable :: term\n+  end type\n+\n+  type :: rng_t\n+    integer :: i\n+  end type\n+\n+  type, extends (decay_gen_t) :: decay_t\n+     class(rng_t), allocatable :: rng\n+  end type\n+\n+  class(decay_t), allocatable :: object\n+\n+end\n+\n+  use decays\n+  type(decay_t), pointer :: template\n+  real, parameter :: arg = 1.570796327\n+  allocate (template)\n+  allocate (template%rng)\n+  template%obs1_int => cos\n+  if (template%obs1_int (arg) .ne. cos (arg)) call abort\n+  allocate (object, source = template)\n+  if (object%obs1_int (arg) .ne. cos (arg)) call abort\n+end"}]}