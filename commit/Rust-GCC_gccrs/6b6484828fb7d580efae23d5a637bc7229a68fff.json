{"sha": "6b6484828fb7d580efae23d5a637bc7229a68fff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI2NDg0ODI4ZmI3ZDU4MGVmYWUyM2Q1YTYzN2JjNzIyOWE2OGZmZg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2006-05-16T05:39:49Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2006-05-16T05:39:49Z"}, "message": "re PR c++/27339 (out-of-class definition of value template parameter with private type)\n\n\tPR c++/27339\n\t* cp-tree.h (perform_access_checks): New function.\n\t* semantics.c (perform_access_checks): New function.\n\t(perform_deferred_access_checks): Use it.\n\t* parser.c (cp_parser_simple_declaration): Adjust call to\n\tcp_parser_init_declarator.\n\t(cp_parser_type_parameter): Do not defer checks in default\n\targuments.\n\t(cp_parser_explicit_specialization): Adjust call to\n\tcp_parser_single_declaration.\n\t(cp_parser_init_declarator): Perform template-parameter access\n\tchecks. \n\t(cp_parser_parameter_declaration): Do not defer checks for\n\ttemplate parameter default arguments.\n\t(cp_parser_template_declaration_after_export): Gather access\n\tchecks for template parameters, and pass them to\n\tcp_parser_single_declaration.\n\t(cp_parser_template_parameter_access_checks): New function.\n\t(cp_parser_single_declaration): Add checks parameter.\n\tPR c++/27339\n\t* g++.dg/parser/access8.C: Adjust error marker.\n\t* g++.dg/template/access17.C: New test.\n\t* g++.dg/template/access18.C: Likewise.\n\nFrom-SVN: r113819", "tree": {"sha": "e988ca30c77d6ca9b32595fdbd4b59589db99563", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e988ca30c77d6ca9b32595fdbd4b59589db99563"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b6484828fb7d580efae23d5a637bc7229a68fff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b6484828fb7d580efae23d5a637bc7229a68fff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b6484828fb7d580efae23d5a637bc7229a68fff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b6484828fb7d580efae23d5a637bc7229a68fff/comments", "author": null, "committer": null, "parents": [{"sha": "d0b898529b9ac6e3c227567a197d12dcf71dc800", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b898529b9ac6e3c227567a197d12dcf71dc800", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0b898529b9ac6e3c227567a197d12dcf71dc800"}], "stats": {"total": 165, "additions": 147, "deletions": 18}, "files": [{"sha": "42af5fd3d02f1aca0d288788c184c60c4ceff5cf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6484828fb7d580efae23d5a637bc7229a68fff/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6484828fb7d580efae23d5a637bc7229a68fff/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6b6484828fb7d580efae23d5a637bc7229a68fff", "patch": "@@ -1,5 +1,25 @@\n 2006-05-15  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/27339\n+\t* cp-tree.h (perform_access_checks): New function.\n+\t* semantics.c (perform_access_checks): New function.\n+\t(perform_deferred_access_checks): Use it.\n+\t* parser.c (cp_parser_simple_declaration): Adjust call to\n+\tcp_parser_init_declarator.\n+\t(cp_parser_type_parameter): Do not defer checks in default\n+\targuments.\n+\t(cp_parser_explicit_specialization): Adjust call to\n+\tcp_parser_single_declaration.\n+\t(cp_parser_init_declarator): Perform template-parameter access\n+\tchecks. \n+\t(cp_parser_parameter_declaration): Do not defer checks for\n+\ttemplate parameter default arguments.\n+\t(cp_parser_template_declaration_after_export): Gather access\n+\tchecks for template parameters, and pass them to\n+\tcp_parser_single_declaration.\n+\t(cp_parser_template_parameter_access_checks): New function.\n+\t(cp_parser_single_declaration): Add checks parameter.\n+\n \tPR c++/27505\n \t* call.c (convert_like_real): Convert bitfields to their declared\n \ttypes when forming an rvalue."}, {"sha": "38376288ef9af3cac1c5bec23cf0e33eb56b8794", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6484828fb7d580efae23d5a637bc7229a68fff/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6484828fb7d580efae23d5a637bc7229a68fff/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=6b6484828fb7d580efae23d5a637bc7229a68fff", "patch": "@@ -4153,6 +4153,7 @@ extern void stop_deferring_access_checks\t(void);\n extern void pop_deferring_access_checks\t\t(void);\n extern tree get_deferred_access_checks\t\t(void);\n extern void pop_to_parent_deferring_access_checks (void);\n+extern void perform_access_checks               (tree);\n extern void perform_deferred_access_checks\t(void);\n extern void perform_or_defer_access_check\t(tree, tree);\n extern int stmts_are_full_exprs_p\t\t(void);"}, {"sha": "c89c357e200cc98368e28e39fc89c028b4a68bf7", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 59, "deletions": 8, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6484828fb7d580efae23d5a637bc7229a68fff/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6484828fb7d580efae23d5a637bc7229a68fff/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=6b6484828fb7d580efae23d5a637bc7229a68fff", "patch": "@@ -1527,7 +1527,7 @@ static void cp_parser_linkage_specification\n /* Declarators [gram.dcl.decl] */\n \n static tree cp_parser_init_declarator\n-  (cp_parser *, cp_decl_specifier_seq *, bool, bool, int, bool *);\n+  (cp_parser *, cp_decl_specifier_seq *, tree, bool, bool, int, bool *);\n static cp_declarator *cp_parser_declarator\n   (cp_parser *, cp_parser_declarator_kind, int *, bool *, bool);\n static cp_declarator *cp_parser_direct_declarator\n@@ -1726,8 +1726,10 @@ static tree cp_parser_function_definition_after_declarator\n   (cp_parser *, bool);\n static void cp_parser_template_declaration_after_export\n   (cp_parser *, bool);\n+static void cp_parser_perform_template_parameter_access_checks\n+  (tree);\n static tree cp_parser_single_declaration\n-  (cp_parser *, bool, bool *);\n+  (cp_parser *, tree, bool, bool *);\n static tree cp_parser_functional_cast\n   (cp_parser *, tree);\n static tree cp_parser_save_member_function_body\n@@ -7271,6 +7273,7 @@ cp_parser_simple_declaration (cp_parser* parser,\n \n       /* Parse the init-declarator.  */\n       decl = cp_parser_init_declarator (parser, &decl_specifiers,\n+\t\t\t\t\t/*checks=*/NULL_TREE,\n \t\t\t\t\tfunction_definition_allowed_p,\n \t\t\t\t\t/*member_p=*/false,\n \t\t\t\t\tdeclares_class_or_enum,\n@@ -8574,7 +8577,9 @@ cp_parser_type_parameter (cp_parser* parser)\n \t    /* Consume the `=' token.  */\n \t    cp_lexer_consume_token (parser->lexer);\n \t    /* Parse the default-argument.  */\n+\t    push_deferring_access_checks (dk_no_deferred);\n \t    default_argument = cp_parser_type_id (parser);\n+\t    pop_deferring_access_checks ();\n \t  }\n \telse\n \t  default_argument = NULL_TREE;\n@@ -8628,6 +8633,7 @@ cp_parser_type_parameter (cp_parser* parser)\n \t    /* Consume the `='.  */\n \t    cp_lexer_consume_token (parser->lexer);\n \t    /* Parse the id-expression.  */\n+\t    push_deferring_access_checks (dk_no_deferred);\n \t    default_argument\n \t      = cp_parser_id_expression (parser,\n \t\t\t\t\t /*template_keyword_p=*/false,\n@@ -8652,6 +8658,7 @@ cp_parser_type_parameter (cp_parser* parser)\n \t    /* See if the default argument is valid.  */\n \t    default_argument\n \t      = check_template_template_default_arg (default_argument);\n+\t    pop_deferring_access_checks ();\n \t  }\n \telse\n \t  default_argument = NULL_TREE;\n@@ -9500,6 +9507,7 @@ cp_parser_explicit_specialization (cp_parser* parser)\n   else\n     /* Parse the dependent declaration.  */\n     cp_parser_single_declaration (parser,\n+\t\t\t\t  /*checks=*/NULL_TREE,\n \t\t\t\t  /*member_p=*/false,\n \t\t\t\t  /*friend_p=*/NULL);\n   /* We're done with the specialization.  */\n@@ -10870,10 +10878,14 @@ cp_parser_asm_definition (cp_parser* parser)\n    function-definition:\n      __extension__ function-definition\n \n-   The DECL_SPECIFIERS and PREFIX_ATTRIBUTES apply to this declarator.\n-   Returns a representation of the entity declared.  If MEMBER_P is TRUE,\n-   then this declarator appears in a class scope.  The new DECL created\n-   by this declarator is returned.\n+   The DECL_SPECIFIERS apply to this declarator.  Returns a\n+   representation of the entity declared.  If MEMBER_P is TRUE, then\n+   this declarator appears in a class scope.  The new DECL created by\n+   this declarator is returned.\n+\n+   The CHECKS are access checks that should be performed once we know\n+   what entity is being declared (and, therefore, what classes have\n+   befriended it).\n \n    If FUNCTION_DEFINITION_ALLOWED_P then we handle the declarator and\n    for a function-definition here as well.  If the declarator is a\n@@ -10887,6 +10899,7 @@ cp_parser_asm_definition (cp_parser* parser)\n static tree\n cp_parser_init_declarator (cp_parser* parser,\n \t\t\t   cp_decl_specifier_seq *decl_specifiers,\n+\t\t\t   tree checks,\n \t\t\t   bool function_definition_allowed_p,\n \t\t\t   bool member_p,\n \t\t\t   int declares_class_or_enum,\n@@ -11096,6 +11109,9 @@ cp_parser_init_declarator (cp_parser* parser,\n \t  current_function_decl = decl;\n \t}\n \n+      /* Perform access checks for template parameters.  */\n+      cp_parser_perform_template_parameter_access_checks (checks);\n+\n       /* Perform the access control checks for the declarator and the\n \t the decl-specifiers.  */\n       perform_deferred_access_checks ();\n@@ -12438,8 +12454,12 @@ cp_parser_parameter_declaration (cp_parser *parser,\n \t     to avoid collecting live data on the stack.  */\n \t  ++function_depth;\n \t  /* Parse the assignment-expression.  */\n+\t  if (template_parm_p)\n+\t    push_deferring_access_checks (dk_no_deferred);\n \t  default_argument\n \t    = cp_parser_assignment_expression (parser, /*cast_p=*/false);\n+\t  if (template_parm_p)\n+\t    pop_deferring_access_checks ();\n \t  /* Restore saved state.  */\n \t  --function_depth;\n \t  parser->greater_than_is_operator_p\n@@ -15418,6 +15438,7 @@ static void\n cp_parser_template_declaration_after_export (cp_parser* parser, bool member_p)\n {\n   tree decl = NULL_TREE;\n+  tree checks;\n   tree parameter_list;\n   bool friend_p = false;\n   bool need_lang_pop;\n@@ -15442,6 +15463,12 @@ cp_parser_template_declaration_after_export (cp_parser* parser, bool member_p)\n     }\n   else\n     need_lang_pop = false;\n+\n+  /* We cannot perform access checks on the template parameter\n+     declarations until we know what is being declared, just as we\n+     cannot check the decl-specifier list.  */\n+  push_deferring_access_checks (dk_deferred);\n+\n   /* If the next token is `>', then we have an invalid\n      specialization.  Rather than complain about an invalid template\n      parameter, issue an error message here.  */\n@@ -15455,6 +15482,12 @@ cp_parser_template_declaration_after_export (cp_parser* parser, bool member_p)\n     /* Parse the template parameters.  */\n     parameter_list = cp_parser_template_parameter_list (parser);\n \n+  /* Get the deferred access checks from the parameter list.  These\n+     will be checked once we know what is being declared, as for a\n+     member template the checks must be performed in the scope of the\n+     class containing the member.  */\n+  checks = get_deferred_access_checks ();\n+\n   /* Look for the `>'.  */\n   cp_parser_skip_until_found (parser, CPP_GREATER, \"`>'\");\n   /* We just processed one more parameter list.  */\n@@ -15469,11 +15502,10 @@ cp_parser_template_declaration_after_export (cp_parser* parser, bool member_p)\n       /* There are no access checks when parsing a template, as we do not\n \t know if a specialization will be a friend.  */\n       push_deferring_access_checks (dk_no_check);\n-\n       decl = cp_parser_single_declaration (parser,\n+\t\t\t\t\t   checks,\n \t\t\t\t\t   member_p,\n \t\t\t\t\t   &friend_p);\n-\n       pop_deferring_access_checks ();\n \n       /* If this is a member template declaration, let the front\n@@ -15492,6 +15524,8 @@ cp_parser_template_declaration_after_export (cp_parser* parser, bool member_p)\n   /* We are done with the current parameter list.  */\n   --parser->num_template_parameter_lists;\n \n+  pop_deferring_access_checks ();\n+\n   /* Finish up.  */\n   finish_template_decl (parameter_list);\n \n@@ -15513,6 +15547,18 @@ cp_parser_template_declaration_after_export (cp_parser* parser, bool member_p)\n \t\t   TREE_VALUE (parser->unparsed_functions_queues));\n }\n \n+/* Perform the deferred access checks from a template-parameter-list.\n+   CHECKS is a TREE_LIST of access checks, as returned by\n+   get_deferred_access_checks.  */\n+\n+static void\n+cp_parser_perform_template_parameter_access_checks (tree checks)\n+{\n+  ++processing_template_parmlist;\n+  perform_access_checks (checks);\n+  --processing_template_parmlist;\n+}\n+\n /* Parse a `decl-specifier-seq [opt] init-declarator [opt] ;' or\n    `function-definition' sequence.  MEMBER_P is true, this declaration\n    appears in a class scope.\n@@ -15522,6 +15568,7 @@ cp_parser_template_declaration_after_export (cp_parser* parser, bool member_p)\n \n static tree\n cp_parser_single_declaration (cp_parser* parser,\n+\t\t\t      tree checks,\n \t\t\t      bool member_p,\n \t\t\t      bool* friend_p)\n {\n@@ -15583,6 +15630,9 @@ cp_parser_single_declaration (cp_parser* parser,\n \t    decl = TYPE_NAME (decl);\n \t  else\n \t    decl = error_mark_node;\n+\n+\t  /* Perform access checks for template parameters.  */\n+\t  cp_parser_perform_template_parameter_access_checks (checks);\n \t}\n     }\n   /* If it's not a template class, try for a template function.  If\n@@ -15595,6 +15645,7 @@ cp_parser_single_declaration (cp_parser* parser,\n \t  || decl_specifiers.type != error_mark_node))\n     decl = cp_parser_init_declarator (parser,\n \t\t\t\t      &decl_specifiers,\n+\t\t\t\t      checks,\n \t\t\t\t      /*function_definition_allowed_p=*/true,\n \t\t\t\t      member_p,\n \t\t\t\t      declares_class_or_enum,"}, {"sha": "1e315e2d1233de6d43575ab269dc4e9a8bf2018d", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6484828fb7d580efae23d5a637bc7229a68fff/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6484828fb7d580efae23d5a637bc7229a68fff/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=6b6484828fb7d580efae23d5a637bc7229a68fff", "patch": "@@ -261,6 +261,21 @@ pop_to_parent_deferring_access_checks (void)\n     }\n }\n \n+/* Perform the access checks in CHECKS.  The TREE_PURPOSE of each node\n+   is the BINFO indicating the qualifying scope used to access the\n+   DECL node stored in the TREE_VALUE of the node.  */\n+\n+void\n+perform_access_checks (tree checks)\n+{\n+  while (checks)\n+    {\n+      enforce_access (TREE_PURPOSE (checks),\n+\t\t      TREE_VALUE (checks));\n+      checks = TREE_CHAIN (checks);\n+    }\n+}\n+\n /* Perform the deferred access checks.\n \n    After performing the checks, we still have to keep the list\n@@ -280,14 +295,7 @@ pop_to_parent_deferring_access_checks (void)\n void\n perform_deferred_access_checks (void)\n {\n-  tree deferred_check;\n-\n-  for (deferred_check = get_deferred_access_checks ();\n-       deferred_check;\n-       deferred_check = TREE_CHAIN (deferred_check))\n-    /* Check access.  */\n-    enforce_access (TREE_PURPOSE (deferred_check),\n-\t\t    TREE_VALUE (deferred_check));\n+  perform_access_checks (get_deferred_access_checks ());\n }\n \n /* Defer checking the accessibility of DECL, when looked up in"}, {"sha": "ce8b924392dfe6908ee14bd345a0f8061b6e50af", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6484828fb7d580efae23d5a637bc7229a68fff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6484828fb7d580efae23d5a637bc7229a68fff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b6484828fb7d580efae23d5a637bc7229a68fff", "patch": "@@ -1,3 +1,10 @@\n+2006-05-15  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/27339\n+\t* g++.dg/parser/access8.C: Adjust error marker.\n+\t* g++.dg/template/access17.C: New test.\n+\t* g++.dg/template/access18.C: Likewise.\n+\n 2006-05-15  Roger Sayle  <roger@eyesopen.com>\n \n \tPR target/26600"}, {"sha": "45f4be70288aaaad7a8a472e2adf62083c030f3b", "filename": "gcc/testsuite/g++.dg/parse/access8.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6484828fb7d580efae23d5a637bc7229a68fff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Faccess8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6484828fb7d580efae23d5a637bc7229a68fff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Faccess8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Faccess8.C?ref=6b6484828fb7d580efae23d5a637bc7229a68fff", "patch": "@@ -5,8 +5,8 @@ class foo\n   typedef int memfun;  // { dg-error \"private\" }\n };\n \n-template<foo::memfun> // { dg-error \"context\" } \n-struct fm_obj { };\n+template<foo::memfun>\n+struct fm_obj { }; // { dg-error \"context\" } \n \n template <typename T = foo::memfun> // { dg-error \"context\" }\n struct S {};"}, {"sha": "0c45100058c73d409ae38325c36df7dacdb1ffe9", "filename": "gcc/testsuite/g++.dg/template/access17.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6484828fb7d580efae23d5a637bc7229a68fff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6484828fb7d580efae23d5a637bc7229a68fff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess17.C?ref=6b6484828fb7d580efae23d5a637bc7229a68fff", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/27339\n+\n+class A \n+{\n+private: \n+  enum private_enum {a};\n+\n+  template<A::private_enum v>  // OK \n+  struct B\n+  {\n+    void bm();\n+  }; \n+public: \n+  void am() \n+  { \n+    B<a> instance; //OK\n+    instance.bm();\n+  }\n+};\n+\n+template<A::private_enum v>  // FAIL\n+void\n+A::B<v>::bm(){}"}, {"sha": "3338bc932ff1ca0212d2a8b59ee08de8d189a3d0", "filename": "gcc/testsuite/g++.dg/template/access18.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6484828fb7d580efae23d5a637bc7229a68fff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6484828fb7d580efae23d5a637bc7229a68fff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess18.C?ref=6b6484828fb7d580efae23d5a637bc7229a68fff", "patch": "@@ -0,0 +1,19 @@\n+// DR 401\n+\n+class X {\n+  typedef int a; // { dg-error \"private\" }\n+  static const int b = 5; // { dg-error \"private\" }\n+  template <typename>\n+  struct c; // { dg-error \"private\" }\n+};\n+\n+template <typename = X::a> // { dg-error \"context\" }\n+struct A;\n+\n+template <int = X::b> // { dg-error \"context\" }\n+struct B;\n+\n+template <template <typename> class T = X::c> // { dg-error \"context\" }\n+struct C;\n+  \n+  "}]}