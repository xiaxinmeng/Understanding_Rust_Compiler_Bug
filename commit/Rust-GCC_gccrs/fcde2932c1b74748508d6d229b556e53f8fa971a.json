{"sha": "fcde2932c1b74748508d6d229b556e53f8fa971a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNkZTI5MzJjMWI3NDc0ODUwOGQ2ZDIyOWI1NTZlNTNmOGZhOTcxYQ==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2007-09-06T17:15:55Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2007-09-06T17:15:55Z"}, "message": "Revert:\n\n \t2007-09-06  Jan Hubicka  <jh@suse.cz>\n \n\t* i386.c (ix86_expand_lround, ix86_expand_round): Update call of\n\treal_2expN.\n\n\t2007-09-06  Richard Sandiford  <richard@codesourcery.com>\n\n\t* config/mips/mips.md (fixuns_truncdfsi2, fixuns_truncdfdi2)\n\t(fixuns_truncsfsi2, fixuns_truncsfdi2): Update calls to real_2expN.\n\n\t2007-09-05  Janis Johnson  <janis187@us.ibm.com>\n\n\t* optabs.c (expand_float): Convert unsigned integer as signed only\n\tif it provides sufficient accuracy; add mode argument to real_2expN.\n\t(expand_fix): Fix comment typos; extend binary float into mode\n\twider than destination for converion to unsigned integer; add mode\n\targument to real_2expN.\n\t* real.c (real_2expN): Add mode argument to special-case decimal\n\tfloat values.\n\t* real.h (real_2expN): Ditto.\n\t* fixed-value.c (check_real_for_fixed_mode): Add mode argument to\n\treal_2expN.\n\t(fixed_from_string): Ditto.\n\t(fixed_to_decimal): Ditto.\n\t(fixed_convert_from_real): Ditto.\n\t(real_convert_from_fixed): Ditto.\n\t* config/rs6000/rs6000.md (FP): Include DD and TD modes.\n\t* config/rs6000/dfp.md (extendddtd2, adddd3, addtd3, subdd3, subtd3,\n\tmuldd3, multd3, divdd3, divtd3, cmpdd_internal1, cmptd_internal1,\n\tfloatditd2, ftruncdd2, fixdddi2, ftrunctd2, fixddi2): New.\n\nFrom-SVN: r128193", "tree": {"sha": "4884c12a844106036e0f76542407dc878198058d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4884c12a844106036e0f76542407dc878198058d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcde2932c1b74748508d6d229b556e53f8fa971a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcde2932c1b74748508d6d229b556e53f8fa971a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcde2932c1b74748508d6d229b556e53f8fa971a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcde2932c1b74748508d6d229b556e53f8fa971a/comments", "author": null, "committer": null, "parents": [{"sha": "48492bdf79b6ccaa27f806d46c791a7a18529c16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48492bdf79b6ccaa27f806d46c791a7a18529c16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48492bdf79b6ccaa27f806d46c791a7a18529c16"}], "stats": {"total": 242, "additions": 60, "deletions": 182}, "files": [{"sha": "84c3359c8b33e9527b840d9c751091a942fbf420", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcde2932c1b74748508d6d229b556e53f8fa971a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcde2932c1b74748508d6d229b556e53f8fa971a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fcde2932c1b74748508d6d229b556e53f8fa971a", "patch": "@@ -1,3 +1,38 @@\n+2007-09-06  Janis Johnson  <janis187@us.ibm.com>\n+\n+\tRevert:\n+\n+ \t2007-09-06  Jan Hubicka  <jh@suse.cz>\n+ \n+\t* i386.c (ix86_expand_lround, ix86_expand_round): Update call of\n+\treal_2expN.\n+\n+\t2007-09-06  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* config/mips/mips.md (fixuns_truncdfsi2, fixuns_truncdfdi2)\n+\t(fixuns_truncsfsi2, fixuns_truncsfdi2): Update calls to real_2expN.\n+\n+\t2007-09-05  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* optabs.c (expand_float): Convert unsigned integer as signed only\n+\tif it provides sufficient accuracy; add mode argument to real_2expN.\n+\t(expand_fix): Fix comment typos; extend binary float into mode\n+\twider than destination for converion to unsigned integer; add mode\n+\targument to real_2expN.\n+\t* real.c (real_2expN): Add mode argument to special-case decimal\n+\tfloat values.\n+\t* real.h (real_2expN): Ditto.\n+\t* fixed-value.c (check_real_for_fixed_mode): Add mode argument to\n+\treal_2expN.\n+\t(fixed_from_string): Ditto.\n+\t(fixed_to_decimal): Ditto.\n+\t(fixed_convert_from_real): Ditto.\n+\t(real_convert_from_fixed): Ditto.\n+\t* config/rs6000/rs6000.md (FP): Include DD and TD modes.\n+\t* config/rs6000/dfp.md (extendddtd2, adddd3, addtd3, subdd3, subtd3,\n+\tmuldd3, multd3, divdd3, divtd3, cmpdd_internal1, cmptd_internal1,\n+\tfloatditd2, ftruncdd2, fixdddi2, ftrunctd2, fixddi2): New.\n+\n 2007-09-06  Tom Tromey  <tromey@redhat.com>\n \n \t* tree-cfg.c (remove_bb): Only warn if line is non-zero."}, {"sha": "dba72dfa7373e688852667c024373c634906b594", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcde2932c1b74748508d6d229b556e53f8fa971a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcde2932c1b74748508d6d229b556e53f8fa971a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=fcde2932c1b74748508d6d229b556e53f8fa971a", "patch": "@@ -23144,7 +23144,7 @@ ix86_expand_lround (rtx op0, rtx op1)\n \n   /* load nextafter (0.5, 0.0) */\n   fmt = REAL_MODE_FORMAT (mode);\n-  real_2expN (&half_minus_pred_half, -(fmt->p) - 1, mode);\n+  real_2expN (&half_minus_pred_half, -(fmt->p) - 1);\n   REAL_ARITHMETIC (pred_half, MINUS_EXPR, dconsthalf, half_minus_pred_half);\n \n   /* adj = copysign (0.5, op1) */\n@@ -23555,7 +23555,7 @@ ix86_expand_round (rtx operand0, rtx operand1)\n \n   /* load nextafter (0.5, 0.0) */\n   fmt = REAL_MODE_FORMAT (mode);\n-  real_2expN (&half_minus_pred_half, -(fmt->p) - 1, mode);\n+  real_2expN (&half_minus_pred_half, -(fmt->p) - 1);\n   REAL_ARITHMETIC (pred_half, MINUS_EXPR, dconsthalf, half_minus_pred_half);\n \n   /* xa = xa + 0.5 */"}, {"sha": "6cda709aca080c3a47521107cca8116400986721", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcde2932c1b74748508d6d229b556e53f8fa971a/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcde2932c1b74748508d6d229b556e53f8fa971a/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=fcde2932c1b74748508d6d229b556e53f8fa971a", "patch": "@@ -2805,7 +2805,7 @@\n   rtx label2 = gen_label_rtx ();\n   REAL_VALUE_TYPE offset;\n \n-  real_2expN (&offset, 31, DFmode);\n+  real_2expN (&offset, 31);\n \n   if (reg1)\t\t\t/* Turn off complaints about unreached code.  */\n     {\n@@ -2850,7 +2850,7 @@\n   rtx label2 = gen_label_rtx ();\n   REAL_VALUE_TYPE offset;\n \n-  real_2expN (&offset, 63, DFmode);\n+  real_2expN (&offset, 63);\n \n   mips_emit_move (reg1, CONST_DOUBLE_FROM_REAL_VALUE (offset, DFmode));\n   do_pending_stack_adjust ();\n@@ -2892,7 +2892,7 @@\n   rtx label2 = gen_label_rtx ();\n   REAL_VALUE_TYPE offset;\n \n-  real_2expN (&offset, 31, SFmode);\n+  real_2expN (&offset, 31);\n \n   mips_emit_move (reg1, CONST_DOUBLE_FROM_REAL_VALUE (offset, SFmode));\n   do_pending_stack_adjust ();\n@@ -2934,7 +2934,7 @@\n   rtx label2 = gen_label_rtx ();\n   REAL_VALUE_TYPE offset;\n \n-  real_2expN (&offset, 63, SFmode);\n+  real_2expN (&offset, 63);\n \n   mips_emit_move (reg1, CONST_DOUBLE_FROM_REAL_VALUE (offset, SFmode));\n   do_pending_stack_adjust ();"}, {"sha": "0bc405a3f54e275ecd286a1e44bfde1c173c38ed", "filename": "gcc/config/rs6000/dfp.md", "status": "modified", "additions": 0, "deletions": 148, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcde2932c1b74748508d6d229b556e53f8fa971a/gcc%2Fconfig%2Frs6000%2Fdfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcde2932c1b74748508d6d229b556e53f8fa971a/gcc%2Fconfig%2Frs6000%2Fdfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdfp.md?ref=fcde2932c1b74748508d6d229b556e53f8fa971a", "patch": "@@ -405,151 +405,3 @@\n { rs6000_split_multireg_move (operands[0], operands[1]); DONE; }\n   [(set_attr \"length\" \"8,8,8,20,20,16\")])\n \n-;; Hardware support for decimal floating point operations.\n-\n-(define_insn \"extendddtd2\"\n-  [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=f\")\n-\t(float_extend:TD (match_operand:DD 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_DFP\"\n-  \"dctqpq %0,%1\"\n-  [(set_attr \"type\" \"fp\")])\n-\n-;; The result of drdpq is an even/odd register pair with the converted\n-;; value in the even register and zero in the odd register.\n-;; FIXME: Avoid the register move by using a reload constraint to ensure\n-;; that the result is the first of the pair receiving the result of drdpq.\n-\n-(define_insn \"trunctddd2\"\n-  [(set (match_operand:DD 0 \"gpc_reg_operand\" \"=f\")\n-\t(float_truncate:DD (match_operand:TD 1 \"gpc_reg_operand\" \"f\")))\n-   (clobber (match_scratch:TD 2 \"=f\"))]\n-  \"TARGET_DFP\"\n-  \"drdpq %2,%1\\;fmr %0,%2\"\n-  [(set_attr \"type\" \"fp\")])\n-\n-(define_insn \"adddd3\"\n-  [(set (match_operand:DD 0 \"gpc_reg_operand\" \"=f\")\n-\t(plus:DD (match_operand:DD 1 \"gpc_reg_operand\" \"%f\")\n-\t\t (match_operand:DD 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_DFP\"\n-  \"dadd %0,%1,%2\"\n-  [(set_attr \"type\" \"fp\")])\n-\n-(define_insn \"addtd3\"\n-  [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=f\")\n-\t(plus:TD (match_operand:TD 1 \"gpc_reg_operand\" \"%f\")\n-\t\t (match_operand:TD 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_DFP\"\n-  \"daddq %0,%1,%2\"\n-  [(set_attr \"type\" \"fp\")])\n-\n-(define_insn \"subdd3\"\n-  [(set (match_operand:DD 0 \"gpc_reg_operand\" \"=f\")\n-\t(minus:DD (match_operand:DD 1 \"gpc_reg_operand\" \"f\")\n-\t\t  (match_operand:DD 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_DFP\"\n-  \"dsub %0,%1,%2\"\n-  [(set_attr \"type\" \"fp\")])\n-\n-(define_insn \"subtd3\"\n-  [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=f\")\n-\t(minus:TD (match_operand:TD 1 \"gpc_reg_operand\" \"f\")\n-\t\t  (match_operand:TD 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_DFP\"\n-  \"dsubq %0,%1,%2\"\n-  [(set_attr \"type\" \"fp\")])\n-\n-(define_insn \"muldd3\"\n-  [(set (match_operand:DD 0 \"gpc_reg_operand\" \"=f\")\n-\t(mult:DD (match_operand:DD 1 \"gpc_reg_operand\" \"%f\")\n-\t\t (match_operand:DD 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_DFP\"\n-  \"dmul %0,%1,%2\"\n-  [(set_attr \"type\" \"fp\")])\n-\n-(define_insn \"multd3\"\n-  [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=f\")\n-\t(mult:TD (match_operand:TD 1 \"gpc_reg_operand\" \"%f\")\n-\t\t (match_operand:TD 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_DFP\"\n-  \"dmulq %0,%1,%2\"\n-  [(set_attr \"type\" \"fp\")])\n-\n-(define_insn \"divdd3\"\n-  [(set (match_operand:DD 0 \"gpc_reg_operand\" \"=f\")\n-\t(div:DD (match_operand:DD 1 \"gpc_reg_operand\" \"f\")\n-\t\t(match_operand:DD 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_DFP\"\n-  \"ddiv %0,%1,%2\"\n-  [(set_attr \"type\" \"fp\")])\n-\n-(define_insn \"divtd3\"\n-  [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=f\")\n-\t(div:TD (match_operand:TD 1 \"gpc_reg_operand\" \"f\")\n-\t\t(match_operand:TD 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_DFP\"\n-  \"ddivq %0,%1,%2\"\n-  [(set_attr \"type\" \"fp\")])\n-\n-(define_insn \"*cmpdd_internal1\"\n-  [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n-\t(compare:CCFP (match_operand:DD 1 \"gpc_reg_operand\" \"f\")\n-\t\t      (match_operand:DD 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_DFP\"\n-  \"dcmpu %0,%1,%2\"\n-  [(set_attr \"type\" \"fpcompare\")])\n-\n-(define_insn \"*cmptd_internal1\"\n-  [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n-\t(compare:CCFP (match_operand:TD 1 \"gpc_reg_operand\" \"f\")\n-\t\t      (match_operand:TD 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_DFP\"\n-  \"dcmpuq %0,%1,%2\"\n-  [(set_attr \"type\" \"fpcompare\")])\n-\n-(define_insn \"floatditd2\"\n-  [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=f\")\n-\t(float:TD (match_operand:DI 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_DFP\"\n-  \"dcffixq %0,%1\"\n-  [(set_attr \"type\" \"fp\")])\n-\n-;; Convert a decimal64 to a decimal64 whose value is an integer.\n-;; This is the first stage of converting it to an integer type.\n-\n-(define_insn \"ftruncdd2\"\n-  [(set (match_operand:DD 0 \"gpc_reg_operand\" \"=f\")\n-\t(fix:DD (match_operand:DD 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_DFP\"\n-  \"drintn. 0,%0,%1,1\"\n-  [(set_attr \"type\" \"fp\")])\n-\n-;; Convert a decimal64 whose value is an integer to an actual integer.\n-;; This is the second stage of converting decimal float to integer type.\n-\n-(define_insn \"fixdddi2\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=f\")\n-\t(fix:DI (match_operand:DD 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_DFP\"\n-  \"dctfix %0,%1\"\n-  [(set_attr \"type\" \"fp\")])\n-\n-;; Convert a decimal128 to a decimal128 whose value is an integer.\n-;; This is the first stage of converting it to an integer type.\n-\n-(define_insn \"ftrunctd2\"\n-  [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=f\")\n-\t(fix:TD (match_operand:TD 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_DFP\"\n-  \"drintnq. 0,%0,%1,1\"\n-  [(set_attr \"type\" \"fp\")])\n-\n-;; Convert a decimal128 whose value is an integer to an actual integer.\n-;; This is the second stage of converting decimal float to integer type.\n-\n-(define_insn \"fixtddi2\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=f\")\n-\t(fix:DI (match_operand:TD 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_DFP\"\n-  \"dctfixq %0,%1\"\n-  [(set_attr \"type\" \"fp\")])"}, {"sha": "e3505d1e5ae83c497ba7adb3dd09bddd98830ad1", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcde2932c1b74748508d6d229b556e53f8fa971a/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcde2932c1b74748508d6d229b556e53f8fa971a/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=fcde2932c1b74748508d6d229b556e53f8fa971a", "patch": "@@ -204,9 +204,7 @@\n   (TF \"!TARGET_IEEEQUAD\n    && TARGET_HARD_FLOAT\n    && (TARGET_FPRS || TARGET_E500_DOUBLE)\n-   && TARGET_LONG_DOUBLE_128\")\n-  (DD \"TARGET_DFP\")\n-  (TD \"TARGET_DFP\")])\n+   && TARGET_LONG_DOUBLE_128\")])\n \n ; Various instructions that come in SI and DI forms.\n ; A generic w/d attribute, for things like cmpw/cmpd."}, {"sha": "aca386a6d9c00c8cb35fd91d7f7efa177ac44272", "filename": "gcc/fixed-value.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcde2932c1b74748508d6d229b556e53f8fa971a/gcc%2Ffixed-value.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcde2932c1b74748508d6d229b556e53f8fa971a/gcc%2Ffixed-value.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixed-value.c?ref=fcde2932c1b74748508d6d229b556e53f8fa971a", "patch": "@@ -64,8 +64,8 @@ check_real_for_fixed_mode (REAL_VALUE_TYPE *real_value, enum machine_mode mode)\n {\n   REAL_VALUE_TYPE max_value, min_value, epsilon_value;\n \n-  real_2expN (&max_value, GET_MODE_IBIT (mode), mode);\n-  real_2expN (&epsilon_value, -GET_MODE_FBIT (mode), mode);\n+  real_2expN (&max_value, GET_MODE_IBIT (mode));\n+  real_2expN (&epsilon_value, -GET_MODE_FBIT (mode));\n \n   if (SIGNED_FIXED_POINT_MODE_P (mode))\n     min_value = REAL_VALUE_NEGATE (max_value);\n@@ -102,7 +102,7 @@ fixed_from_string (FIXED_VALUE_TYPE *f, const char *str, enum machine_mode mode)\n       || (temp == FIXED_MAX_EPS && ALL_ACCUM_MODE_P (f->mode)))\n     warning (OPT_Woverflow,\n \t     \"large fixed-point constant implicitly truncated to fixed-point type\");\n-  real_2expN (&base_value, fbit, mode);\n+  real_2expN (&base_value, fbit);\n   real_arithmetic (&fixed_value, MULT_EXPR, &real_value, &base_value);\n   real_to_integer2 ((HOST_WIDE_INT *)&f->data.low, &f->data.high,\n \t\t    &fixed_value);\n@@ -132,7 +132,7 @@ fixed_to_decimal (char *str, const FIXED_VALUE_TYPE *f_orig,\n {\n   REAL_VALUE_TYPE real_value, base_value, fixed_value;\n \n-  real_2expN (&base_value, GET_MODE_FBIT (f_orig->mode), f_orig->mode);\n+  real_2expN (&base_value, GET_MODE_FBIT (f_orig->mode));\n   real_from_integer (&real_value, VOIDmode, f_orig->data.low, f_orig->data.high,\n \t\t     UNSIGNED_FIXED_POINT_MODE_P (f_orig->mode));\n   real_arithmetic (&fixed_value, RDIV_EXPR, &real_value, &base_value);\n@@ -1067,7 +1067,7 @@ fixed_convert_from_real (FIXED_VALUE_TYPE *f, enum machine_mode mode,\n \n   real_value = *a;\n   f->mode = mode;\n-  real_2expN (&base_value, fbit, mode);\n+  real_2expN (&base_value, fbit);\n   real_arithmetic (&fixed_value, MULT_EXPR, &real_value, &base_value);\n   real_to_integer2 ((HOST_WIDE_INT *)&f->data.low, &f->data.high, &fixed_value);\n   temp = check_real_for_fixed_mode (&real_value, mode);\n@@ -1116,7 +1116,7 @@ real_convert_from_fixed (REAL_VALUE_TYPE *r, enum machine_mode mode,\n {\n   REAL_VALUE_TYPE base_value, fixed_value, real_value;\n \n-  real_2expN (&base_value, GET_MODE_FBIT (f->mode), f->mode);\n+  real_2expN (&base_value, GET_MODE_FBIT (f->mode));\n   real_from_integer (&fixed_value, VOIDmode, f->data.low, f->data.high,\n \t\t     UNSIGNED_FIXED_POINT_MODE_P (f->mode));\n   real_arithmetic (&real_value, RDIV_EXPR, &fixed_value, &base_value);"}, {"sha": "ff4c3dd3f6fcac8c0109870ab6f5f3a0fcdef4ae", "filename": "gcc/optabs.c", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcde2932c1b74748508d6d229b556e53f8fa971a/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcde2932c1b74748508d6d229b556e53f8fa971a/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=fcde2932c1b74748508d6d229b556e53f8fa971a", "patch": "@@ -5121,11 +5121,10 @@ expand_float (rtx to, rtx from, int unsignedp)\n \t  }\n       }\n \n-  /* Unsigned integer, and no way to convert directly.  Convert as signed,\n-     then unconditionally adjust the result.  For decimal float values we\n-     do this only if we have already determined that a signed conversion\n-     provides sufficient accuracy.  */\n-  if (unsignedp && (can_do_signed || !DECIMAL_FLOAT_MODE_P (GET_MODE (to))))\n+  /* Unsigned integer, and no way to convert directly.  For binary\n+     floating point modes, convert as signed, then conditionally adjust\n+     the result.  */\n+  if (unsignedp && can_do_signed && !DECIMAL_FLOAT_MODE_P (GET_MODE (to)))\n     {\n       rtx label = gen_label_rtx ();\n       rtx temp;\n@@ -5216,7 +5215,7 @@ expand_float (rtx to, rtx from, int unsignedp)\n \t\t\t       0, label);\n \n \n-      real_2expN (&offset, GET_MODE_BITSIZE (GET_MODE (from)), fmode);\n+      real_2expN (&offset, GET_MODE_BITSIZE (GET_MODE (from)));\n       temp = expand_binop (fmode, add_optab, target,\n \t\t\t   CONST_DOUBLE_FROM_REAL_VALUE (offset, fmode),\n \t\t\t   target, 0, OPTAB_LIB_WIDEN);\n@@ -5327,33 +5326,30 @@ expand_fix (rtx to, rtx from, int unsignedp)\n      anything with a wider integer mode.\n \n      This code used to extend FP value into mode wider than the destination.\n-     This is needed for decimal float modes which cannot accurately\n-     represent one plus the highest signed number of the same size, but\n-     not for binary modes.  Consider, for instance conversion from SFmode\n+     This is not needed.  Consider, for instance conversion from SFmode\n      into DImode.\n \n      The hot path through the code is dealing with inputs smaller than 2^63\n      and doing just the conversion, so there is no bits to lose.\n \n      In the other path we know the value is positive in the range 2^63..2^64-1\n-     inclusive.  (as for other input overflow happens and result is undefined)\n+     inclusive.  (as for other imput overflow happens and result is undefined)\n      So we know that the most important bit set in mantissa corresponds to\n      2^63.  The subtraction of 2^63 should not generate any rounding as it\n      simply clears out that bit.  The rest is trivial.  */\n \n   if (unsignedp && GET_MODE_BITSIZE (GET_MODE (to)) <= HOST_BITS_PER_WIDE_INT)\n     for (fmode = GET_MODE (from); fmode != VOIDmode;\n \t fmode = GET_MODE_WIDER_MODE (fmode))\n-      if (CODE_FOR_nothing != can_fix_p (GET_MODE (to), fmode, 0, &must_trunc)\n-\t  && (!DECIMAL_FLOAT_MODE_P (fmode)\n-\t      || GET_MODE_BITSIZE (fmode) > GET_MODE_BITSIZE (GET_MODE (to))))\n+      if (CODE_FOR_nothing != can_fix_p (GET_MODE (to), fmode, 0,\n+\t\t\t\t\t &must_trunc))\n \t{\n \t  int bitsize;\n \t  REAL_VALUE_TYPE offset;\n \t  rtx limit, lab1, lab2, insn;\n \n \t  bitsize = GET_MODE_BITSIZE (GET_MODE (to));\n-\t  real_2expN (&offset, bitsize - 1, fmode);\n+\t  real_2expN (&offset, bitsize - 1);\n \t  limit = CONST_DOUBLE_FROM_REAL_VALUE (offset, fmode);\n \t  lab1 = gen_label_rtx ();\n \t  lab2 = gen_label_rtx ();"}, {"sha": "9686309cf3d33cca02665fae566073fbfa83a1f1", "filename": "gcc/real.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcde2932c1b74748508d6d229b556e53f8fa971a/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcde2932c1b74748508d6d229b556e53f8fa971a/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=fcde2932c1b74748508d6d229b556e53f8fa971a", "patch": "@@ -2304,7 +2304,7 @@ real_maxval (REAL_VALUE_TYPE *r, int sign, enum machine_mode mode)\n /* Fills R with 2**N.  */\n \n void\n-real_2expN (REAL_VALUE_TYPE *r, int n, enum machine_mode fmode)\n+real_2expN (REAL_VALUE_TYPE *r, int n)\n {\n   memset (r, 0, sizeof (*r));\n \n@@ -2319,9 +2319,6 @@ real_2expN (REAL_VALUE_TYPE *r, int n, enum machine_mode fmode)\n       SET_REAL_EXP (r, n);\n       r->sig[SIGSZ-1] = SIG_MSB;\n     }\n-\n-  if (DECIMAL_FLOAT_MODE_P (fmode))\n-    decimal_real_convert (r, fmode, r);\n }\n \n \f"}, {"sha": "e24a0df8a6458684dba1864430e79984202c608d", "filename": "gcc/real.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcde2932c1b74748508d6d229b556e53f8fa971a/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcde2932c1b74748508d6d229b556e53f8fa971a/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=fcde2932c1b74748508d6d229b556e53f8fa971a", "patch": "@@ -248,7 +248,7 @@ extern bool real_nan (REAL_VALUE_TYPE *, const char *, int, enum machine_mode);\n \n extern void real_maxval (REAL_VALUE_TYPE *, int, enum machine_mode);\n \n-extern void real_2expN (REAL_VALUE_TYPE *, int, enum machine_mode);\n+extern void real_2expN (REAL_VALUE_TYPE *, int);\n \n extern unsigned int real_hash (const REAL_VALUE_TYPE *);\n "}]}