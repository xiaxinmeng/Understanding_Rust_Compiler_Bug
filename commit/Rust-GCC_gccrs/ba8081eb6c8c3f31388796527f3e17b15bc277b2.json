{"sha": "ba8081eb6c8c3f31388796527f3e17b15bc277b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE4MDgxZWI2YzhjM2YzMTM4ODc5NjUyN2YzZTE3YjE1YmMyNzdiMg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-12-06T00:14:07Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-12-06T00:14:07Z"}, "message": "expr.c (expand_expr_real_1): Abort on COND_EXPR of VOID_TYPE.\n\n\t* expr.c (expand_expr_real_1): Abort on COND_EXPR of\n\tVOID_TYPE.\n\nFrom-SVN: r91758", "tree": {"sha": "d152ed5cdac80e796f4a2cfa7a883f81d24c6186", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d152ed5cdac80e796f4a2cfa7a883f81d24c6186"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba8081eb6c8c3f31388796527f3e17b15bc277b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba8081eb6c8c3f31388796527f3e17b15bc277b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba8081eb6c8c3f31388796527f3e17b15bc277b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba8081eb6c8c3f31388796527f3e17b15bc277b2/comments", "author": null, "committer": null, "parents": [{"sha": "ae23f7575ce99a08d5c86fa1ba33a90dd49f1513", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae23f7575ce99a08d5c86fa1ba33a90dd49f1513", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae23f7575ce99a08d5c86fa1ba33a90dd49f1513"}], "stats": {"total": 24, "additions": 9, "deletions": 15}, "files": [{"sha": "844e6b92c4ccbf7050d0a159603918217eec146c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba8081eb6c8c3f31388796527f3e17b15bc277b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba8081eb6c8c3f31388796527f3e17b15bc277b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba8081eb6c8c3f31388796527f3e17b15bc277b2", "patch": "@@ -1,3 +1,8 @@\n+2004-12-05  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* expr.c (expand_expr_real_1): Abort on COND_EXPR of\n+\tVOID_TYPE.\n+\n 2004-12-05  Richard Henderson  <rth@redhat.com>\n \n \tPR target/18841"}, {"sha": "b5939ae626d662f011b364bb6fca6b640ae9b774", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba8081eb6c8c3f31388796527f3e17b15bc277b2/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba8081eb6c8c3f31388796527f3e17b15bc277b2/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=ba8081eb6c8c3f31388796527f3e17b15bc277b2", "patch": "@@ -8063,21 +8063,10 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       return const0_rtx;\n \n     case COND_EXPR:\n-      /* If it's void, we don't need to worry about computing a value.  */\n-      if (VOID_TYPE_P (TREE_TYPE (exp)))\n-\t{\n-\t  tree pred = TREE_OPERAND (exp, 0);\n-  \t  tree then_ = TREE_OPERAND (exp, 1);\n-  \t  tree else_ = TREE_OPERAND (exp, 2);\n-\n-\t  gcc_assert (TREE_CODE (then_) == GOTO_EXPR\n-\t\t      && TREE_CODE (GOTO_DESTINATION (then_)) == LABEL_DECL\n-\t\t      && TREE_CODE (else_) == GOTO_EXPR\n-\t\t      && TREE_CODE (GOTO_DESTINATION (else_)) == LABEL_DECL);\n-\n-\t  jumpif (pred, label_rtx (GOTO_DESTINATION (then_)));\n-\t  return expand_expr (else_, const0_rtx, VOIDmode, 0);\n-  \t}\n+      /* A COND_EXPR with its type being VOID_TYPE represents a\n+\t conditional jump and is handled in\n+\t expand_gimple_cond_expr.  */\n+      gcc_assert (!VOID_TYPE_P (TREE_TYPE (exp)));\n \n         /* Note that COND_EXPRs whose type is a structure or union\n   \t are required to be constructed to contain assignments of"}]}