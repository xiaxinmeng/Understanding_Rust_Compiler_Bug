{"sha": "566576e718cd3b186d65e3c61f06d502a8a18391", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY2NTc2ZTcxOGNkM2IxODZkNjVlM2M2MWYwNmQ1MDJhOGExODM5MQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2002-04-18T22:11:39Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2002-04-18T22:11:39Z"}, "message": "flow.c (update_life_info): Ignore return value of cleanup_cfg.\n\n\t* flow.c (update_life_info): Ignore return value of cleanup_cfg.\n\tMask out PROP_SCAN_DEAD_CODE | PROP_KILL_DEAD_CODE in\n\tpropagate_block calls after relaxation loop using new variable\n\tstabilized_prop_flags.\n\nFrom-SVN: r52498", "tree": {"sha": "2550711f6345c8adfdb0b74c4c8867c6f20bed66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2550711f6345c8adfdb0b74c4c8867c6f20bed66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/566576e718cd3b186d65e3c61f06d502a8a18391", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/566576e718cd3b186d65e3c61f06d502a8a18391", "html_url": "https://github.com/Rust-GCC/gccrs/commit/566576e718cd3b186d65e3c61f06d502a8a18391", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/566576e718cd3b186d65e3c61f06d502a8a18391/comments", "author": null, "committer": null, "parents": [{"sha": "0c7c67f076002dedbf8efd533e03e46c28c60ad4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c7c67f076002dedbf8efd533e03e46c28c60ad4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c7c67f076002dedbf8efd533e03e46c28c60ad4"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "742f308cbc5c2844f459b39fc2d1d5738efb5ab0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/566576e718cd3b186d65e3c61f06d502a8a18391/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/566576e718cd3b186d65e3c61f06d502a8a18391/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=566576e718cd3b186d65e3c61f06d502a8a18391", "patch": "@@ -1,3 +1,10 @@\n+2002-04-18  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* flow.c (update_life_info): Ignore return value of cleanup_cfg.\n+\tMask out PROP_SCAN_DEAD_CODE | PROP_KILL_DEAD_CODE in\n+\tpropagate_block calls after relaxation loop using new variable\n+\tstabilized_prop_flags.\n+\n 2002-04-18  Richard Henderson  <rth@redhat.com>\n \n \t* config/ia64/ia64.c (ia64_function_arg_pass_by_reference): New."}, {"sha": "380c3d3421d7e4700d12066097a133040330f59c", "filename": "gcc/flow.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/566576e718cd3b186d65e3c61f06d502a8a18391/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/566576e718cd3b186d65e3c61f06d502a8a18391/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=566576e718cd3b186d65e3c61f06d502a8a18391", "patch": "@@ -637,6 +637,7 @@ update_life_info (blocks, extent, prop_flags)\n   regset tmp;\n   regset_head tmp_head;\n   int i;\n+  int stabilized_prop_flags = prop_flags;\n \n   tmp = INITIALIZE_REG_SET (tmp_head);\n   ndead = 0;\n@@ -677,8 +678,21 @@ update_life_info (blocks, extent, prop_flags)\n \t\t\t\t\t      | PROP_KILL_DEAD_CODE));\n \t    }\n \n-\t  if (! changed || ! cleanup_cfg (CLEANUP_EXPENSIVE))\n+\t  /* Don't pass PROP_SCAN_DEAD_CODE or PROP_KILL_DEAD_CODE to\n+\t     subsequent propagate_block calls, since removing or acting as\n+\t     removing dead code can affect global register liveness, which\n+\t     is supposed to be finalized for this call after this loop.  */\n+\t  stabilized_prop_flags\n+\t    &= ~(PROP_SCAN_DEAD_CODE | PROP_KILL_DEAD_CODE);\n+\n+\t  if (! changed)\n \t    break;\n+\n+\t  /* We repeat regardless of what cleanup_cfg says.  If there were\n+\t     instructions deleted above, that might have been only a\n+\t     partial improvement (see MAX_MEM_SET_LIST_LEN usage).\n+\t     Further improvement may be possible.  */\n+\t  cleanup_cfg (CLEANUP_EXPENSIVE);\n \t}\n \n       /* If asked, remove notes from the blocks we'll update.  */\n@@ -697,7 +711,7 @@ update_life_info (blocks, extent, prop_flags)\n \t  basic_block bb = BASIC_BLOCK (i);\n \n \t  COPY_REG_SET (tmp, bb->global_live_at_end);\n-\t  propagate_block (bb, tmp, NULL, NULL, prop_flags);\n+\t  propagate_block (bb, tmp, NULL, NULL, stabilized_prop_flags);\n \n \t  if (extent == UPDATE_LIFE_LOCAL)\n \t    verify_local_live_at_start (tmp, bb);\n@@ -710,7 +724,8 @@ update_life_info (blocks, extent, prop_flags)\n \t  basic_block bb = BASIC_BLOCK (i);\n \n \t  COPY_REG_SET (tmp, bb->global_live_at_end);\n-\t  propagate_block (bb, tmp, NULL, NULL, prop_flags);\n+\n+\t  propagate_block (bb, tmp, NULL, NULL, stabilized_prop_flags);\n \n \t  if (extent == UPDATE_LIFE_LOCAL)\n \t    verify_local_live_at_start (tmp, bb);"}]}