{"sha": "888d65b5a81249c56aa92bc2998c798929f29f30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg4ZDY1YjVhODEyNDljNTZhYTkyYmMyOTk4Yzc5ODkyOWYyOWYzMA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-02-03T21:31:00Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-02-03T21:31:00Z"}, "message": "re PR target/9348 ([HP-UX] error in int to unsigned long multiplication)\n\n\n\tPR target/9348\n\t* expr.c (expand_expr_real) <MULT_EXPR>:  When performing widening\n\tmultiplies with a multiplication of the wrong signedness, its the\n\tsignedness of the multiplication that we've performed that needs to\n\tbe passed to expand_mult_highpart_adjust.  Avoid emitting a nop-move\n\tif expand_mult_highpart_adjust places the result in target.\n\n\t* gcc.c-torture/execute/multdi-1.c: New test case.\n\nFrom-SVN: r77192", "tree": {"sha": "df60fe33a838990b239163a30dda629632e31212", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df60fe33a838990b239163a30dda629632e31212"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/888d65b5a81249c56aa92bc2998c798929f29f30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/888d65b5a81249c56aa92bc2998c798929f29f30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/888d65b5a81249c56aa92bc2998c798929f29f30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/888d65b5a81249c56aa92bc2998c798929f29f30/comments", "author": null, "committer": null, "parents": [{"sha": "a8c0bbc7214a44d82448ea5b6d443f53c8b5c43b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8c0bbc7214a44d82448ea5b6d443f53c8b5c43b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8c0bbc7214a44d82448ea5b6d443f53c8b5c43b"}], "stats": {"total": 60, "additions": 47, "deletions": 13}, "files": [{"sha": "2ee6a1435877bccf1dab2e84a7f7e600ae95f6b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/888d65b5a81249c56aa92bc2998c798929f29f30/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/888d65b5a81249c56aa92bc2998c798929f29f30/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=888d65b5a81249c56aa92bc2998c798929f29f30", "patch": "@@ -1,3 +1,12 @@\n+2004-02-03  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR target/9348\n+\t* expr.c (expand_expr_real) <MULT_EXPR>:  When performing widening\n+\tmultiplies with a multiplication of the wrong signedness, its the\n+\tsignedness of the multiplication that we've performed that needs to\n+\tbe passed to expand_mult_highpart_adjust.  Avoid emitting a nop-move\n+\tif expand_mult_highpart_adjust places the result in target.\n+\n 2004-02-03  Richard Henderson  <rth@redhat.com>\n \n \t* varasm.c (const_desc_rtx_sym_eq): Compare symbol strings."}, {"sha": "55e5f0690fe7d598adacab8b75daca3966bc089d", "filename": "gcc/expr.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/888d65b5a81249c56aa92bc2998c798929f29f30/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/888d65b5a81249c56aa92bc2998c798929f29f30/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=888d65b5a81249c56aa92bc2998c798929f29f30", "patch": "@@ -7859,12 +7859,12 @@ expand_expr_real (tree exp, rtx target, enum machine_mode tmode,\n \t\t   ==\n \t\t   TREE_UNSIGNED (TREE_TYPE (TREE_OPERAND (TREE_OPERAND (exp, 0), 0)))))))\n \t{\n-\t  enum machine_mode innermode\n-\t    = TYPE_MODE (TREE_TYPE (TREE_OPERAND (TREE_OPERAND (exp, 0), 0)));\n-\t  optab other_optab = (TREE_UNSIGNED (TREE_TYPE (TREE_OPERAND (TREE_OPERAND (exp, 0), 0)))\n-\t\t\t? smul_widen_optab : umul_widen_optab);\n-\t  this_optab = (TREE_UNSIGNED (TREE_TYPE (TREE_OPERAND (TREE_OPERAND (exp, 0), 0)))\n-\t\t\t? umul_widen_optab : smul_widen_optab);\n+\t  tree op0type = TREE_TYPE (TREE_OPERAND (TREE_OPERAND (exp, 0), 0));\n+\t  enum machine_mode innermode = TYPE_MODE (op0type);\n+\t  bool zextend_p = TREE_UNSIGNED (op0type);\n+\t  optab other_optab = zextend_p ? smul_widen_optab : umul_widen_optab;\n+\t  this_optab = zextend_p ? umul_widen_optab : smul_widen_optab;\n+\n \t  if (mode == GET_MODE_WIDER_MODE (innermode))\n \t    {\n \t      if (this_optab->handlers[(int) mode].insn_code != CODE_FOR_nothing)\n@@ -7882,7 +7882,7 @@ expand_expr_real (tree exp, rtx target, enum machine_mode tmode,\n \t      else if (other_optab->handlers[(int) mode].insn_code != CODE_FOR_nothing\n \t\t       && innermode == word_mode)\n \t\t{\n-\t\t  rtx htem;\n+\t\t  rtx htem, hipart;\n \t\t  op0 = expand_expr (TREE_OPERAND (TREE_OPERAND (exp, 0), 0),\n \t\t\t\t     NULL_RTX, VOIDmode, 0);\n \t\t  if (TREE_CODE (TREE_OPERAND (exp, 1)) == INTEGER_CST)\n@@ -7895,12 +7895,12 @@ expand_expr_real (tree exp, rtx target, enum machine_mode tmode,\n \t\t\t\t       NULL_RTX, VOIDmode, 0);\n \t\t  temp = expand_binop (mode, other_optab, op0, op1, target,\n \t\t\t\t       unsignedp, OPTAB_LIB_WIDEN);\n-\t\t  htem = expand_mult_highpart_adjust (innermode,\n-\t\t\t\t\t\t      gen_highpart (innermode, temp),\n-\t\t\t\t\t\t      op0, op1,\n-\t\t\t\t\t\t      gen_highpart (innermode, temp),\n-\t\t\t\t\t\t      unsignedp);\n-\t\t  emit_move_insn (gen_highpart (innermode, temp), htem);\n+\t\t  hipart = gen_highpart (innermode, temp);\n+\t\t  htem = expand_mult_highpart_adjust (innermode, hipart,\n+\t\t\t\t\t\t      op0, op1, hipart,\n+\t\t\t\t\t\t      zextend_p);\n+\t\t  if (htem != hipart)\n+\t\t    emit_move_insn (hipart, htem);\n \t\t  return temp;\n \t\t}\n \t    }"}, {"sha": "ca134857b2d41a4c37aff278e5ac34f2efd505f9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/888d65b5a81249c56aa92bc2998c798929f29f30/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/888d65b5a81249c56aa92bc2998c798929f29f30/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=888d65b5a81249c56aa92bc2998c798929f29f30", "patch": "@@ -1,3 +1,8 @@\n+2004-02-03  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR target/9348\n+\t* gcc.c-torture/execute/multdi-1.c: New test case.\n+\n 2004-02-03  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/13925"}, {"sha": "1ffcc578e516617c0e73000c13aab120c7b51b80", "filename": "gcc/testsuite/gcc.c-torture/execute/multdi-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/888d65b5a81249c56aa92bc2998c798929f29f30/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmultdi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/888d65b5a81249c56aa92bc2998c798929f29f30/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmultdi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmultdi-1.c?ref=888d65b5a81249c56aa92bc2998c798929f29f30", "patch": "@@ -0,0 +1,20 @@\n+/* PR target/9348 */\n+\n+#define u_l_l unsigned long long\n+#define l_l long long\n+\n+l_l mpy_res;\n+\n+u_l_l mpy (long a, long b)\n+{\n+  return (u_l_l) a * (u_l_l) b;\n+}\n+ \n+int main(void)\n+{\n+  mpy_res = mpy(1,-1);\n+  if (mpy_res != -1LL)\n+    abort ();\n+  return 0;\n+}\n+"}]}