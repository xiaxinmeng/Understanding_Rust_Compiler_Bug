{"sha": "6ee86466ad973510f4a8e13cf356acf919b9fa20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVlODY0NjZhZDk3MzUxMGY0YThlMTNjZjM1NmFjZjkxOWI5ZmEyMA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2019-11-14T07:03:30Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2019-11-14T07:03:30Z"}, "message": "Make normalize_addresses and normalize_symbolics work on THIS, instead\nof returning by value.\n\nFrom-SVN: r278196", "tree": {"sha": "947226c138b6c939062716fbc0cb6bba4ed69bf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/947226c138b6c939062716fbc0cb6bba4ed69bf1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ee86466ad973510f4a8e13cf356acf919b9fa20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ee86466ad973510f4a8e13cf356acf919b9fa20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ee86466ad973510f4a8e13cf356acf919b9fa20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ee86466ad973510f4a8e13cf356acf919b9fa20/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9773f69c1161677e68f693562da82c92fd3821da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9773f69c1161677e68f693562da82c92fd3821da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9773f69c1161677e68f693562da82c92fd3821da"}], "stats": {"total": 117, "additions": 80, "deletions": 37}, "files": [{"sha": "db5c5e6aebaf1869d593c902532518cd97b55ce1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee86466ad973510f4a8e13cf356acf919b9fa20/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee86466ad973510f4a8e13cf356acf919b9fa20/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ee86466ad973510f4a8e13cf356acf919b9fa20", "patch": "@@ -1,3 +1,18 @@\n+2019-11-14  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-vrp.c (range_fold_binary_symbolics_p): Adapt for\n+\tnormalize_symbolics and normalize_addresses working in place.\n+\t(range_fold_unary_symbolics_p): Same.\n+\t(range_fold_unary_symbolics_p): Same.\n+\t* value-range.cc (num_pairs): Same.\n+\t(lower_bound): Same.\n+\t(upper_bound): Same.\n+\t(contains_p): Same.\n+\t(normalize_addresses): Same.\n+\t(normalize_symbolics): Same.\n+\t* value-range.h (normalize_symbolics): Same.\n+\t(normalize_addresses): Same.\n+\n 2019-11-14  Feng Xue  <fxue@os.amperecomputing.com>\n \n \tPR ipa/91682"}, {"sha": "ff66bed4b038f627f6fec11dfd3d6f2923cd66cb", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee86466ad973510f4a8e13cf356acf919b9fa20/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee86466ad973510f4a8e13cf356acf919b9fa20/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=6ee86466ad973510f4a8e13cf356acf919b9fa20", "patch": "@@ -1182,8 +1182,10 @@ range_fold_binary_symbolics_p (value_range *vr,\n \t  return true;\n \t}\n       const range_operator *op = get_range_op_handler (vr, code, expr_type);\n-      op->fold_range (*vr, expr_type, vr0->normalize_symbolics (),\n-\t\t      vr1->normalize_symbolics ());\n+      value_range vr0_cst (*vr0), vr1_cst (*vr1);\n+      vr0_cst.normalize_symbolics ();\n+      vr1_cst.normalize_symbolics ();\n+      op->fold_range (*vr, expr_type, vr0_cst, vr1_cst);\n       return true;\n     }\n   return false;\n@@ -1217,8 +1219,9 @@ range_fold_unary_symbolics_p (value_range *vr,\n \t  return true;\n \t}\n       const range_operator *op = get_range_op_handler (vr, code, expr_type);\n-      op->fold_range (*vr, expr_type, vr0->normalize_symbolics (),\n-\t\t      value_range (expr_type));\n+      value_range vr0_cst (*vr0);\n+      vr0_cst.normalize_symbolics ();\n+      op->fold_range (*vr, expr_type, vr0_cst, value_range (expr_type));\n       return true;\n     }\n   return false;\n@@ -1245,8 +1248,9 @@ range_fold_binary_expr (value_range *vr,\n   if (range_fold_binary_symbolics_p (vr, code, expr_type, &vr0, &vr1))\n     return;\n \n-  op->fold_range (*vr, expr_type, vr0.normalize_addresses (),\n-\t\t  vr1.normalize_addresses ());\n+  vr0.normalize_addresses ();\n+  vr1.normalize_addresses ();\n+  op->fold_range (*vr, expr_type, vr0, vr1);\n }\n \n /* Perform a unary operation on a range.  */\n@@ -1267,8 +1271,9 @@ range_fold_unary_expr (value_range *vr,\n   if (range_fold_unary_symbolics_p (vr, code, expr_type, vr0))\n     return;\n \n-  op->fold_range (*vr, expr_type, vr0->normalize_addresses (),\n-\t\t  value_range (expr_type));\n+  value_range vr0_cst (*vr0);\n+  vr0_cst.normalize_addresses ();\n+  op->fold_range (*vr, expr_type, vr0_cst, value_range (expr_type));\n }\n \n /* Given a COND_EXPR COND of the form 'V OP W', and an SSA name V,"}, {"sha": "c4c3416e6fcbca706bcbf04a219e34db2b4cc947", "filename": "gcc/value-range.cc", "status": "modified", "additions": 50, "deletions": 27, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee86466ad973510f4a8e13cf356acf919b9fa20/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee86466ad973510f4a8e13cf356acf919b9fa20/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=6ee86466ad973510f4a8e13cf356acf919b9fa20", "patch": "@@ -305,7 +305,11 @@ value_range::num_pairs () const\n   if (varying_p ())\n     return 1;\n   if (symbolic_p ())\n-    return normalize_symbolics ().num_pairs ();\n+    {\n+      value_range numeric_range (*this);\n+      numeric_range.normalize_symbolics ();\n+      return numeric_range.num_pairs ();\n+    }\n   if (m_kind == VR_ANTI_RANGE)\n     {\n       // ~[MIN, X] has one sub-range of [X+1, MAX], and\n@@ -324,7 +328,11 @@ wide_int\n value_range::lower_bound (unsigned pair) const\n {\n   if (symbolic_p ())\n-    return normalize_symbolics ().lower_bound (pair);\n+    {\n+      value_range numeric_range (*this);\n+      numeric_range.normalize_symbolics ();\n+      return numeric_range.lower_bound (pair);\n+    }\n \n   gcc_checking_assert (!undefined_p ());\n   gcc_checking_assert (pair + 1 <= num_pairs ());\n@@ -349,7 +357,11 @@ wide_int\n value_range::upper_bound (unsigned pair) const\n {\n   if (symbolic_p ())\n-    return normalize_symbolics ().upper_bound (pair);\n+    {\n+      value_range numeric_range (*this);\n+      numeric_range.normalize_symbolics ();\n+      return numeric_range.upper_bound (pair);\n+    }\n \n   gcc_checking_assert (!undefined_p ());\n   gcc_checking_assert (pair + 1 <= num_pairs ());\n@@ -505,57 +517,69 @@ value_range::contains_p (tree cst) const\n {\n   gcc_checking_assert (TREE_CODE (cst) == INTEGER_CST);\n   if (symbolic_p ())\n-    return normalize_symbolics ().contains_p (cst);\n+    {\n+      value_range numeric_range (*this);\n+      numeric_range.normalize_symbolics ();\n+      return numeric_range.contains_p (cst);\n+    }\n   return value_inside_range (cst) == 1;\n }\n \n /* Normalize addresses into constants.  */\n \n-value_range\n-value_range::normalize_addresses () const\n+void\n+value_range::normalize_addresses ()\n {\n   if (undefined_p ())\n-    return *this;\n+    return;\n \n   if (!POINTER_TYPE_P (type ()) || range_has_numeric_bounds_p (this))\n-    return *this;\n+    return;\n \n   if (!range_includes_zero_p (this))\n     {\n       gcc_checking_assert (TREE_CODE (m_min) == ADDR_EXPR\n \t\t\t   || TREE_CODE (m_max) == ADDR_EXPR);\n-      return range_nonzero (type ());\n+      set_nonzero (type ());\n+      return;\n     }\n-  return value_range (type ());\n+  set_varying (type ());\n }\n \n /* Normalize symbolics and addresses into constants.  */\n \n-value_range\n-value_range::normalize_symbolics () const\n+void\n+value_range::normalize_symbolics ()\n {\n   if (varying_p () || undefined_p ())\n-    return *this;\n+    return;\n+\n   tree ttype = type ();\n   bool min_symbolic = !is_gimple_min_invariant (min ());\n   bool max_symbolic = !is_gimple_min_invariant (max ());\n   if (!min_symbolic && !max_symbolic)\n-    return normalize_addresses ();\n+    {\n+      normalize_addresses ();\n+      return;\n+    }\n \n   // [SYM, SYM] -> VARYING\n   if (min_symbolic && max_symbolic)\n     {\n-      value_range var;\n-      var.set_varying (ttype);\n-      return var;\n+      set_varying (ttype);\n+      return;\n     }\n   if (kind () == VR_RANGE)\n     {\n       // [SYM, NUM] -> [-MIN, NUM]\n       if (min_symbolic)\n-\treturn value_range (vrp_val_min (ttype), max ());\n+\t{\n+\t  set (vrp_val_min (ttype), max ());\n+\t  return;\n+\t}\n       // [NUM, SYM] -> [NUM, +MAX]\n-      return value_range (min (), vrp_val_max (ttype));\n+      set (min (), vrp_val_max (ttype));\n+      return;\n     }\n   gcc_checking_assert (kind () == VR_ANTI_RANGE);\n   // ~[SYM, NUM] -> [NUM + 1, +MAX]\n@@ -564,21 +588,20 @@ value_range::normalize_symbolics () const\n       if (!vrp_val_is_max (max ()))\n \t{\n \t  tree n = wide_int_to_tree (ttype, wi::to_wide (max ()) + 1);\n-\t  return value_range (n, vrp_val_max (ttype));\n+\t  set (n, vrp_val_max (ttype));\n+\t  return;\n \t}\n-      value_range var;\n-      var.set_varying (ttype);\n-      return var;\n+      set_varying (ttype);\n+      return;\n     }\n   // ~[NUM, SYM] -> [-MIN, NUM - 1]\n   if (!vrp_val_is_min (min ()))\n     {\n       tree n = wide_int_to_tree (ttype, wi::to_wide (min ()) - 1);\n-      return value_range (vrp_val_min (ttype), n);\n+      set (vrp_val_min (ttype), n);\n+      return;\n     }\n-  value_range var;\n-  var.set_varying (ttype);\n-  return var;\n+  set_varying (ttype);\n }\n \n /* Intersect the two value-ranges { *VR0TYPE, *VR0MIN, *VR0MAX } and"}, {"sha": "23b05b4be915ca11bce1ed235065dcd34b086f39", "filename": "gcc/value-range.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee86466ad973510f4a8e13cf356acf919b9fa20/gcc%2Fvalue-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee86466ad973510f4a8e13cf356acf919b9fa20/gcc%2Fvalue-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.h?ref=6ee86466ad973510f4a8e13cf356acf919b9fa20", "patch": "@@ -83,8 +83,8 @@ class GTY((for_user)) value_range\n   void dump () const;\n \n   static bool supports_type_p (tree);\n-  value_range normalize_symbolics () const;\n-  value_range normalize_addresses () const;\n+  void normalize_symbolics ();\n+  void normalize_addresses ();\n \n   static const unsigned int m_max_pairs = 2;\n   bool contains_p (tree) const;"}]}