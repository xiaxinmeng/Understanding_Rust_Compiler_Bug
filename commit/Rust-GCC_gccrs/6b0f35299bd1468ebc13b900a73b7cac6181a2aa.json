{"sha": "6b0f35299bd1468ebc13b900a73b7cac6181a2aa", "node_id": "C_kwDOANBUbNoAKDZiMGYzNTI5OWJkMTQ2OGViYzEzYjkwMGE3M2I3Y2FjNjE4MWEyYWE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-27T07:16:48Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-27T07:16:48Z"}, "message": "openmp: Don't reject some valid initializers or conditions of non-rectangular loops [PR102854]\n\nIn C++, if an iterator has or might have (e.g. dependent type) class type we\nremember the original init expressions and check those separately for presence\nof iterators, because for class iterators we turn those into expressions that\nalways do contain reference to the current iterator.  But this resulted in\nrejecting valid non-rectangular loop where the dependent type is later instantiated\nto an integral type.\n\nNon-rectangular loops with class random access iterators remain broken, that is something\nto be fixed incrementally.\n\n2021-10-27  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/102854\ngcc/c-family/\n\t* c-common.h (c_omp_check_loop_iv_exprs): Add enum tree_code argument.\n\t* c-omp.c (c_omp_check_loop_iv_r): For trees other than decls,\n\tTREE_VEC, PLUS_EXPR, MINUS_EXPR, MULT_EXPR, POINTER_PLUS_EXPR or\n\tconversions temporarily clear the 3rd bit from d->kind while walking\n\tsubtrees.\n\t(c_omp_check_loop_iv_exprs): Add CODE argument.  Or in 4 into data.kind\n\tif possibly non-rectangular.\ngcc/cp/\n\t* semantics.c (handle_omp_for_class_iterator,\n\tfinish_omp_for): Adjust c_omp_check_loop_iv_exprs caller.\ngcc/testsuite/\n\t* g++.dg/gomp/loop-3.C: Don't expect some errors.\n\t* g++.dg/gomp/loop-7.C: New test.", "tree": {"sha": "d3fb9325a061bdb52e21c910f125f8ec8d28c158", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3fb9325a061bdb52e21c910f125f8ec8d28c158"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b0f35299bd1468ebc13b900a73b7cac6181a2aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b0f35299bd1468ebc13b900a73b7cac6181a2aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b0f35299bd1468ebc13b900a73b7cac6181a2aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b0f35299bd1468ebc13b900a73b7cac6181a2aa/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7473b8a90490e1dcd8fd5f7a92307d79fd2a5f8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7473b8a90490e1dcd8fd5f7a92307d79fd2a5f8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7473b8a90490e1dcd8fd5f7a92307d79fd2a5f8e"}], "stats": {"total": 65, "additions": 51, "deletions": 14}, "files": [{"sha": "f60714e3416042c2bd29027f28b69310177e7a20", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b0f35299bd1468ebc13b900a73b7cac6181a2aa/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b0f35299bd1468ebc13b900a73b7cac6181a2aa/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=6b0f35299bd1468ebc13b900a73b7cac6181a2aa", "patch": "@@ -1234,8 +1234,8 @@ extern void c_finish_omp_taskyield (location_t);\n extern tree c_finish_omp_for (location_t, enum tree_code, tree, tree, tree,\n \t\t\t      tree, tree, tree, tree, bool);\n extern bool c_omp_check_loop_iv (tree, tree, walk_tree_lh);\n-extern bool c_omp_check_loop_iv_exprs (location_t, tree, int, tree, tree, tree,\n-\t\t\t\t       walk_tree_lh);\n+extern bool c_omp_check_loop_iv_exprs (location_t, enum tree_code, tree, int,\n+\t\t\t\t       tree, tree, tree, walk_tree_lh);\n extern tree c_finish_oacc_wait (location_t, tree, tree);\n extern tree c_oacc_split_loop_clauses (tree, tree *, bool);\n extern void c_omp_split_clauses (location_t, enum tree_code, omp_clause_mask,"}, {"sha": "32db2268cee0ab4c36e06dd81ec2ae23c73c9679", "filename": "gcc/c-family/c-omp.c", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b0f35299bd1468ebc13b900a73b7cac6181a2aa/gcc%2Fc-family%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b0f35299bd1468ebc13b900a73b7cac6181a2aa/gcc%2Fc-family%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.c?ref=6b0f35299bd1468ebc13b900a73b7cac6181a2aa", "patch": "@@ -1353,6 +1353,19 @@ c_omp_check_loop_iv_r (tree *tp, int *walk_subtrees, void *data)\n \t}\n       d->fail = true;\n     }\n+  else if ((d->kind & 4)\n+\t   && TREE_CODE (*tp) != TREE_VEC\n+\t   && TREE_CODE (*tp) != PLUS_EXPR\n+\t   && TREE_CODE (*tp) != MINUS_EXPR\n+\t   && TREE_CODE (*tp) != MULT_EXPR\n+\t   && !CONVERT_EXPR_P (*tp))\n+    {\n+      *walk_subtrees = 0;\n+      d->kind &= 3;\n+      walk_tree_1 (tp, c_omp_check_loop_iv_r, data, NULL, d->lh);\n+      d->kind |= 4;\n+      return NULL_TREE;\n+    }\n   else if (d->ppset->add (*tp))\n     *walk_subtrees = 0;\n   /* Don't walk dtors added by C++ wrap_cleanups_r.  */\n@@ -1651,11 +1664,13 @@ c_omp_check_loop_iv (tree stmt, tree declv, walk_tree_lh lh)\n /* Similar, but allows to check the init or cond expressions individually.  */\n \n bool\n-c_omp_check_loop_iv_exprs (location_t stmt_loc, tree declv, int i, tree decl,\n-\t\t\t   tree init, tree cond, walk_tree_lh lh)\n+c_omp_check_loop_iv_exprs (location_t stmt_loc, enum tree_code code,\n+\t\t\t   tree declv, int i, tree decl, tree init, tree cond,\n+\t\t\t   walk_tree_lh lh)\n {\n   hash_set<tree> pset;\n   struct c_omp_check_loop_iv_data data;\n+  int kind = (code != OACC_LOOP && i > 0) ? 4 : 0;\n \n   data.declv = declv;\n   data.fail = false;\n@@ -1674,15 +1689,15 @@ c_omp_check_loop_iv_exprs (location_t stmt_loc, tree declv, int i, tree decl,\n   if (init)\n     {\n       data.expr_loc = EXPR_LOCATION (init);\n-      data.kind = 0;\n+      data.kind = kind;\n       walk_tree_1 (&init,\n \t\t   c_omp_check_loop_iv_r, &data, NULL, lh);\n     }\n   if (cond)\n     {\n       gcc_assert (COMPARISON_CLASS_P (cond));\n       data.expr_loc = EXPR_LOCATION (init);\n-      data.kind = 1;\n+      data.kind = kind | 1;\n       if (TREE_OPERAND (cond, 0) == decl)\n \twalk_tree_1 (&TREE_OPERAND (cond, 1),\n \t\t     c_omp_check_loop_iv_r, &data, NULL, lh);"}, {"sha": "3072ecdd29a5a195de0507b75724747079502f59", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b0f35299bd1468ebc13b900a73b7cac6181a2aa/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b0f35299bd1468ebc13b900a73b7cac6181a2aa/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=6b0f35299bd1468ebc13b900a73b7cac6181a2aa", "patch": "@@ -9211,7 +9211,7 @@ handle_omp_for_class_iterator (int i, location_t locus, enum tree_code code,\n \t\tTREE_OPERAND (cond, 1), iter);\n       return true;\n     }\n-  if (!c_omp_check_loop_iv_exprs (locus, orig_declv, i,\n+  if (!c_omp_check_loop_iv_exprs (locus, code, orig_declv, i,\n \t\t\t\t  TREE_VEC_ELT (declv, i), NULL_TREE,\n \t\t\t\t  cond, cp_walk_subtrees))\n     return true;\n@@ -9597,7 +9597,7 @@ finish_omp_for (location_t locus, enum tree_code code, tree declv,\n       tree orig_init;\n       FOR_EACH_VEC_ELT (*orig_inits, i, orig_init)\n \tif (orig_init\n-\t    && !c_omp_check_loop_iv_exprs (locus,\n+\t    && !c_omp_check_loop_iv_exprs (locus, code,\n \t\t\t\t\t   orig_declv ? orig_declv : declv, i,\n \t\t\t\t\t   TREE_VEC_ELT (declv, i), orig_init,\n \t\t\t\t\t   NULL_TREE, cp_walk_subtrees))"}, {"sha": "d9b84653d19e5960fcf3f8a94e0e9ed7a0e6f70c", "filename": "gcc/testsuite/g++.dg/gomp/loop-3.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b0f35299bd1468ebc13b900a73b7cac6181a2aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Floop-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b0f35299bd1468ebc13b900a73b7cac6181a2aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Floop-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Floop-3.C?ref=6b0f35299bd1468ebc13b900a73b7cac6181a2aa", "patch": "@@ -116,7 +116,7 @@ f1 (I<int> &x, I<int> &y, I<int> &u, I<int> &v)\n     for (j = x; j < y; j++)\n       ;\n   #pragma omp for collapse(2)\n-  for (i = x; i < y; i = i + 2) /* { dg-error \"initializer expression refers to iteration variable\" } */\n+  for (i = x; i < y; i = i + 2)\n     for (j = i; j < v; j += 2)\n       ;\n   #pragma omp for collapse(2)\n@@ -128,11 +128,11 @@ f1 (I<int> &x, I<int> &y, I<int> &u, I<int> &v)\n     for (j = baz (&i); j < v; j += 2) /* { dg-error \"initializer expression refers to iteration variable\" } */\n       ;\n   #pragma omp for collapse(2)\n-  for (i = x; i < y; i++) /* { dg-error \"condition expression refers to iteration variable\" } */\n+  for (i = x; i < y; i++)\n     for (j = v; j > i; j--)\n       ;\n   #pragma omp for collapse(2)\n-  for (i = x; i < y; i++) /* { dg-error \"condition expression refers to iteration variable\" } */\n+  for (i = x; i < y; i++)\n     for (j = x; j < i; j++)\n       ;\n   #pragma omp for collapse(2)\n@@ -234,7 +234,7 @@ f2 (I<int> &x, I<int> &y, I<int> &u, I<int> &v)\n     for (I<int> j = u; j < y; j += 2)\n       ;\n   #pragma omp for collapse(2)\n-  for (I<int> i = x; i < y; i = i + 2) /* { dg-error \"initializer expression refers to iteration variable\" } */\n+  for (I<int> i = x; i < y; i = i + 2)\n     for (I<int> j = i; j < v; j += 2)\n       ;\n   #pragma omp for collapse(2)\n@@ -246,11 +246,11 @@ f2 (I<int> &x, I<int> &y, I<int> &u, I<int> &v)\n     for (I<int> j = baz (&i); j < v; j += 2) /* { dg-error \"initializer expression refers to iteration variable\" } */\n       ;\n   #pragma omp for collapse(2)\n-  for (I<int> i = x; i < y; i++) /* { dg-error \"condition expression refers to iteration variable\" } */\n+  for (I<int> i = x; i < y; i++)\n     for (I<int> j = v; j > i; j--)\n       ;\n   #pragma omp for collapse(2)\n-  for (I<int> i = x; i < y; i++) /* { dg-error \"condition expression refers to iteration variable\" } */\n+  for (I<int> i = x; i < y; i++)\n     for (I<int> j = x; j < i; j++)\n       ;\n   #pragma omp for collapse(2)"}, {"sha": "9466c1c9db35ce20b82b09e9748d9cebdebe76e6", "filename": "gcc/testsuite/g++.dg/gomp/loop-7.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b0f35299bd1468ebc13b900a73b7cac6181a2aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Floop-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b0f35299bd1468ebc13b900a73b7cac6181a2aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Floop-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Floop-7.C?ref=6b0f35299bd1468ebc13b900a73b7cac6181a2aa", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/102854\n+// { dg-do compile }\n+\n+template <typename T>\n+void\n+foo (T N, T M)\n+{\n+  #pragma omp parallel for collapse(2)\n+  for (T i = 0; i < N; ++i)\n+    for (T k = i; k < M; ++k)\n+      ;\n+  #pragma omp parallel for collapse(2)\n+  for (T i = 0; i < N; ++i)\n+    for (T k = i; k < 2 * i; ++k)\n+      ;\n+}\n+\n+void\n+bar ()\n+{\n+  foo (5, 10);\n+}"}]}