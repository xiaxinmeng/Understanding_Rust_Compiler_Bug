{"sha": "39becbac3d5c936b5cd5fa69d6f04685216f7e38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzliZWNiYWMzZDVjOTM2YjVjZDVmYTY5ZDZmMDQ2ODUyMTZmN2UzOA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-07-05T11:24:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-07-05T11:24:26Z"}, "message": "re PR tree-optimization/49518 (ICE in vect_enhance_data_refs_alignment, at tree-vect-data-refs.c:1555)\n\n2011-07-05  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/49518\n\tPR tree-optimization/49628\n\t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment): Skip\n\tirrelevant and invariant data-references.\n\t(vect_analyze_data_ref_access): For invariant loads clear the\n\tgroup association.\n\n\t* g++.dg/torture/pr49628.C: New testcase.\n\t* gcc.dg/torture/pr49518.c: Likewise.\n\nFrom-SVN: r175847", "tree": {"sha": "65d44fb5fd726825cddd622e4483ffc45c59e88b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65d44fb5fd726825cddd622e4483ffc45c59e88b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39becbac3d5c936b5cd5fa69d6f04685216f7e38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39becbac3d5c936b5cd5fa69d6f04685216f7e38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39becbac3d5c936b5cd5fa69d6f04685216f7e38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39becbac3d5c936b5cd5fa69d6f04685216f7e38/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "08b3c764e8096983cbede38eecf7a50818c52114", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08b3c764e8096983cbede38eecf7a50818c52114", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08b3c764e8096983cbede38eecf7a50818c52114"}], "stats": {"total": 84, "additions": 83, "deletions": 1}, "files": [{"sha": "154c7cace3dff02bfac81ec3a484959f11c68c65", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39becbac3d5c936b5cd5fa69d6f04685216f7e38/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39becbac3d5c936b5cd5fa69d6f04685216f7e38/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39becbac3d5c936b5cd5fa69d6f04685216f7e38", "patch": "@@ -1,3 +1,12 @@\n+2011-07-05  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/49518\n+\tPR tree-optimization/49628\n+\t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment): Skip\n+\tirrelevant and invariant data-references.\n+\t(vect_analyze_data_ref_access): For invariant loads clear the\n+\tgroup association.\n+\n 2011-07-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/49619"}, {"sha": "5839b726cf399ed70c802973dcb197fbf926aa66", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39becbac3d5c936b5cd5fa69d6f04685216f7e38/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39becbac3d5c936b5cd5fa69d6f04685216f7e38/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=39becbac3d5c936b5cd5fa69d6f04685216f7e38", "patch": "@@ -1,3 +1,10 @@\n+2011-07-05  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/49518\n+\tPR tree-optimization/49628\n+\t* g++.dg/torture/pr49628.C: New testcase.\n+\t* gcc.dg/torture/pr49518.c: Likewise.\n+\n 2011-07-05  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* ada/acats/run_acats (which): Extract last field from type -p,"}, {"sha": "4bc6543a35e324b1ee7ca33e3a5d39e8755e136c", "filename": "gcc/testsuite/g++.dg/torture/pr49628.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39becbac3d5c936b5cd5fa69d6f04685216f7e38/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr49628.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39becbac3d5c936b5cd5fa69d6f04685216f7e38/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr49628.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr49628.C?ref=39becbac3d5c936b5cd5fa69d6f04685216f7e38", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+\n+#include <vector>\n+\n+template <int rank, int dim> class Tensor;\n+template <int dim> class Tensor<1,dim> {\n+public:\n+    explicit Tensor (const bool initialize = true);\n+    Tensor (const Tensor<1,dim> &);\n+    Tensor<1,dim> & operator = (const Tensor<1,dim> &);\n+    double values[(dim!=0) ? (dim) : 1];\n+};\n+template <int dim>\n+inline Tensor<1,dim> & Tensor<1,dim>::operator = (const Tensor<1,dim> &p)\n+{\n+  for (unsigned int i=0; i<dim; ++i)\n+    values[i] = p.values[i];\n+};\n+template <int dim> class Quadrature {\n+public:\n+    const unsigned int n_quadrature_points;\n+};\n+class MappingQ1\n+{\n+  class InternalData  {\n+  public:\n+      std::vector<Tensor<1,3> > shape_derivatives;\n+      unsigned int n_shape_functions;\n+  };\n+  void compute_data (const Quadrature<3> &quadrature, InternalData &data)\n+      const;\n+};\n+void MappingQ1::compute_data (const Quadrature<3> &q, InternalData &data) const\n+{\n+  const unsigned int n_q_points = q.n_quadrature_points;\n+  data.shape_derivatives.resize(data.n_shape_functions * n_q_points);\n+}"}, {"sha": "84a10fbbeebebc295d7307624069bedae3656a72", "filename": "gcc/testsuite/gcc.dg/torture/pr49518.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39becbac3d5c936b5cd5fa69d6f04685216f7e38/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr49518.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39becbac3d5c936b5cd5fa69d6f04685216f7e38/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr49518.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr49518.c?ref=39becbac3d5c936b5cd5fa69d6f04685216f7e38", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+\n+int a, b;\n+struct S { unsigned int s, t, u; } c, d = { 0, 1, 0 };\n+\n+void\n+test (unsigned char z)\n+{\n+  char e[] = {0, 0, 0, 0, 1};\n+  for (c.s = 1; c.s; c.s++)\n+    {\n+      b = e[c.s];\n+      if (a)\n+\tbreak;\n+      b = z >= c.u;\n+      if (d.t)\n+\tbreak;\n+    }\n+}"}, {"sha": "28147382aac24b37a4838b9711441152b9e5291f", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39becbac3d5c936b5cd5fa69d6f04685216f7e38/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39becbac3d5c936b5cd5fa69d6f04685216f7e38/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=39becbac3d5c936b5cd5fa69d6f04685216f7e38", "patch": "@@ -1495,12 +1495,19 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n       stmt = DR_STMT (dr);\n       stmt_info = vinfo_for_stmt (stmt);\n \n+      if (!STMT_VINFO_RELEVANT (stmt_info))\n+\tcontinue;\n+\n       /* For interleaving, only the alignment of the first access\n          matters.  */\n       if (STMT_VINFO_STRIDED_ACCESS (stmt_info)\n           && GROUP_FIRST_ELEMENT (stmt_info) != stmt)\n         continue;\n \n+      /* For invariant accesses there is nothing to enhance.  */\n+      if (integer_zerop (DR_STEP (dr)))\n+\tcontinue;\n+\n       supportable_dr_alignment = vect_supportable_dr_alignment (dr, true);\n       do_peeling = vector_alignment_reachable_p (dr);\n       if (do_peeling)\n@@ -2304,7 +2311,10 @@ vect_analyze_data_ref_access (struct data_reference *dr)\n \n   /* Allow invariant loads in loops.  */\n   if (loop_vinfo && dr_step == 0)\n-    return DR_IS_READ (dr);\n+    {\n+      GROUP_FIRST_ELEMENT (vinfo_for_stmt (stmt)) = NULL;\n+      return DR_IS_READ (dr);\n+    }\n \n   if (loop && nested_in_vect_loop_p (loop, stmt))\n     {"}]}