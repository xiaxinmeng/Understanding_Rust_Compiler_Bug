{"sha": "ce6054a22ae14594a2919d2ad87cd9478e616fb3", "node_id": "C_kwDOANBUbNoAKGNlNjA1NGEyMmFlMTQ1OTRhMjkxOWQyYWQ4N2NkOTQ3OGU2MTZmYjM", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-01-27T15:56:34Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-01-27T15:56:34Z"}, "message": "c++: constrained partial spec using qualified name [PR92944, PR103678]\n\nIn the nested_name_specifier branch within cp_parser_class_head, we need\nto update 'type' with the result of maybe_process_partial_specialization\nlike we do in the template_id_p branch.\n\n\tPR c++/92944\n\tPR c++/103678\n\ngcc/cp/ChangeLog:\n\n\t* parser.cc (cp_parser_class_head): Update 'type' with the result\n\tof maybe_process_partial_specialization in the\n\tnested_name_specifier branch.  Refactor nearby code to accomodate\n\tthat maybe_process_partial_specialization returns a _TYPE, not a\n\tTYPE_DECL, and eliminate local variable 'class_type' in passing.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-partial-spec10.C: New test.\n\t* g++.dg/cpp2a/concepts-partial-spec11.C: New test.", "tree": {"sha": "b9c1502edf19c7aa58460dec70d55040842dee0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9c1502edf19c7aa58460dec70d55040842dee0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce6054a22ae14594a2919d2ad87cd9478e616fb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce6054a22ae14594a2919d2ad87cd9478e616fb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce6054a22ae14594a2919d2ad87cd9478e616fb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce6054a22ae14594a2919d2ad87cd9478e616fb3/comments", "author": null, "committer": null, "parents": [{"sha": "14f339894db6ca7fe4772d5528c726694d2517c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14f339894db6ca7fe4772d5528c726694d2517c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14f339894db6ca7fe4772d5528c726694d2517c4"}], "stats": {"total": 54, "additions": 43, "deletions": 11}, "files": [{"sha": "f1947ee3a1c2eca54632296adabb1d7b6cf0afad", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce6054a22ae14594a2919d2ad87cd9478e616fb3/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce6054a22ae14594a2919d2ad87cd9478e616fb3/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=ce6054a22ae14594a2919d2ad87cd9478e616fb3", "patch": "@@ -26535,7 +26535,7 @@ cp_parser_class_head (cp_parser* parser,\n     }\n   else if (nested_name_specifier)\n     {\n-      tree class_type;\n+      type = TREE_TYPE (type);\n \n       /* Given:\n \n@@ -26545,31 +26545,27 @@ cp_parser_class_head (cp_parser* parser,\n \t we will get a TYPENAME_TYPE when processing the definition of\n \t `S::T'.  We need to resolve it to the actual type before we\n \t try to define it.  */\n-      if (TREE_CODE (TREE_TYPE (type)) == TYPENAME_TYPE)\n+      if (TREE_CODE (type) == TYPENAME_TYPE)\n \t{\n-\t  class_type = resolve_typename_type (TREE_TYPE (type),\n-\t\t\t\t\t      /*only_current_p=*/false);\n-\t  if (TREE_CODE (class_type) != TYPENAME_TYPE)\n-\t    type = TYPE_NAME (class_type);\n-\t  else\n+\t  type = resolve_typename_type (type, /*only_current_p=*/false);\n+\t  if (TREE_CODE (type) == TYPENAME_TYPE)\n \t    {\n \t      cp_parser_error (parser, \"could not resolve typename type\");\n \t      type = error_mark_node;\n \t    }\n \t}\n \n-      if (maybe_process_partial_specialization (TREE_TYPE (type))\n-\t  == error_mark_node)\n+      type = maybe_process_partial_specialization (type);\n+      if (type == error_mark_node)\n \t{\n \t  type = NULL_TREE;\n \t  goto done;\n \t}\n \n-      class_type = current_class_type;\n       /* Enter the scope indicated by the nested-name-specifier.  */\n       pushed_scope = push_scope (nested_name_specifier);\n       /* Get the canonical version of this type.  */\n-      type = TYPE_MAIN_DECL (TREE_TYPE (type));\n+      type = TYPE_MAIN_DECL (type);\n       /* Call push_template_decl if it seems like we should be defining a\n \t template either from the template headers or the type we're\n \t defining, so that we diagnose both extra and missing headers.  */"}, {"sha": "d45a1b03e89869196b1e471aa8549b5b4e0a6e3c", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-partial-spec10.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce6054a22ae14594a2919d2ad87cd9478e616fb3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-partial-spec10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce6054a22ae14594a2919d2ad87cd9478e616fb3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-partial-spec10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-partial-spec10.C?ref=ce6054a22ae14594a2919d2ad87cd9478e616fb3", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/92944\n+// { dg-do compile { target c++20 } }\n+\n+namespace ns { template<class T> struct A { }; }\n+\n+template<class T> requires true struct ns::A<T> { using type = T; };\n+template<class T> requires false struct ns::A<T> { };\n+\n+template<class T> struct ns::A<T*> { };\n+template<class T> requires true struct ns::A<T*> { using type = T; };\n+template<class T> requires false struct ns::A<T*> { };\n+\n+using ty1 = ns::A<int>::type;\n+using ty1 = int;\n+\n+using ty2 = ns::A<int*>::type;\n+using ty2 = int;"}, {"sha": "03334500238b1c6923f23f88aec40b7bb7fa936c", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-partial-spec11.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce6054a22ae14594a2919d2ad87cd9478e616fb3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-partial-spec11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce6054a22ae14594a2919d2ad87cd9478e616fb3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-partial-spec11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-partial-spec11.C?ref=ce6054a22ae14594a2919d2ad87cd9478e616fb3", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/103678\n+// { dg-do compile { target c++20 } }\n+\n+template<class>\n+struct A {\n+ template<class...>\n+ struct B;\n+};\n+\n+template<class A_t>\n+template<class B_t>\n+struct A<A_t>::B<B_t> {};\n+\n+template<class A_t>\n+template<class B_t>\n+requires requires {\n+ typename B_t;\n+}\n+struct A<A_t>::B<B_t> {};"}]}