{"sha": "6d585f0114eaf13241a1ee5c863ff26cc1a67df4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ1ODVmMDExNGVhZjEzMjQxYTFlZTVjODYzZmYyNmNjMWE2N2RmNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-09-17T23:53:26Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-09-17T23:53:26Z"}, "message": "re PR libstdc++/50441 ([C++0x] <type_traits> is missing GNU extension types)\n\n2011-09-17  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/50441\n\t* acinclude.m4 ([GLIBCXX_ENABLE_INT128_FLOAT128]): Add.\n\t* configure.ac: Call it.\n\t* include/std/type_traits (__is_integral_helper<__int128_t>,\n\t__is_integral_helper<__uint128_t>,\n\t__is_floating_point_helper<__float128>,\n\t__make_unsigned<__int128_t>, __make_signed<__uint128_t>): Add.\n\t* testsuite/20_util/make_signed/requirements/typedefs-1.cc: Extend.\n\t* testsuite/20_util/make_signed/requirements/typedefs-2.cc: Likewise.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs-1.cc: Likewise.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs-2.cc: Likewise.\n\t* testsuite/20_util/is_signed/value.cc: Likewise.\n\t* testsuite/20_util/is_unsigned/value.cc: Likewise.\n\t* testsuite/20_util/is_integral/value.cc: Likewise.\n\t* testsuite/20_util/is_floating_point/value.cc: New.\n\t* testsuite/20_util/is_floating_point/requirements/typedefs.cc:\n\tLikewise.\n\t* testsuite/20_util/is_floating_point/requirements/\n\texplicit_instantiation.cc: Likewise.\n\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Adjust\n\tdg-error line numbers.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n\tLikewise.\n\t* testsuite/20_util/declval/requirements/1_neg.cc: Likewise.\n\t* configure: Regenerate.\n\t* config.h.in: Likewise.\n\nFrom-SVN: r178933", "tree": {"sha": "c3c3bbc697c8eb502283f26c846f130bab407130", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3c3bbc697c8eb502283f26c846f130bab407130"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d585f0114eaf13241a1ee5c863ff26cc1a67df4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d585f0114eaf13241a1ee5c863ff26cc1a67df4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d585f0114eaf13241a1ee5c863ff26cc1a67df4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/comments", "author": null, "committer": null, "parents": [{"sha": "b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d"}], "stats": {"total": 472, "additions": 450, "deletions": 22}, "files": [{"sha": "04161592a6a4c24fe4e3a3a0071393b3274ca11a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6d585f0114eaf13241a1ee5c863ff26cc1a67df4", "patch": "@@ -1,3 +1,32 @@\n+2011-09-17  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/50441\n+\t* acinclude.m4 ([GLIBCXX_ENABLE_INT128_FLOAT128]): Add.\n+\t* configure.ac: Call it.\n+\t* include/std/type_traits (__is_integral_helper<__int128_t>,\n+\t__is_integral_helper<__uint128_t>,\n+\t__is_floating_point_helper<__float128>,\n+\t__make_unsigned<__int128_t>, __make_signed<__uint128_t>): Add.\n+\t* testsuite/20_util/make_signed/requirements/typedefs-1.cc: Extend.\n+\t* testsuite/20_util/make_signed/requirements/typedefs-2.cc: Likewise.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs-1.cc: Likewise.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs-2.cc: Likewise.\n+\t* testsuite/20_util/is_signed/value.cc: Likewise.\n+\t* testsuite/20_util/is_unsigned/value.cc: Likewise.\n+\t* testsuite/20_util/is_integral/value.cc: Likewise.\n+\t* testsuite/20_util/is_floating_point/value.cc: New.\n+\t* testsuite/20_util/is_floating_point/requirements/typedefs.cc:\n+\tLikewise.\n+\t* testsuite/20_util/is_floating_point/requirements/\n+\texplicit_instantiation.cc: Likewise.\n+\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Adjust\n+\tdg-error line numbers.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n+\tLikewise.\n+\t* testsuite/20_util/declval/requirements/1_neg.cc: Likewise.\n+\t* configure: Regenerate.\n+\t* config.h.in: Likewise.\n+\n 2011-09-17  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/bits/hashtable.h (_Hashtable<>::__rehash_policy(const"}, {"sha": "543f684f458d1f597e5f1db71d1f6f377ea62e59", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=6d585f0114eaf13241a1ee5c863ff26cc1a67df4", "patch": "@@ -2418,6 +2418,82 @@ EOF\n     rm -f conftest*\n ])\n \n+dnl\n+dnl Check for GNU 128-bit integer and floating point types.\n+dnl\n+dnl Note: also checks that the types aren't standard types.\n+dnl\n+dnl Defines:\n+dnl  _GLIBCXX_USE_INT128\n+dnl  _GLIBCXX_USE_FLOAT128\n+dnl\n+AC_DEFUN([GLIBCXX_ENABLE_INT128_FLOAT128], [\n+\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+\n+  # Fake what AC_TRY_COMPILE does, without linking as this is\n+  # unnecessary for this test.\n+\n+    cat > conftest.$ac_ext << EOF\n+[#]line __oline__ \"configure\"\n+template<typename T1, typename T2>\n+  struct same\n+  { typedef T2 type; };\n+\n+template<typename T>\n+  struct same<T, T>;\n+\n+int main()\n+{\n+  typename same<long, __int128_t>::type                i1;\n+  typename same<unsigned long, __uint128_t>::type      u1;\n+  typename same<long long, __int128_t>::type           i2;\n+  typename same<unsigned long long, __uint128_t>::type u2;\n+}\n+EOF\n+\n+    AC_MSG_CHECKING([for __int128_t and __uint128_t])\n+    if AC_TRY_EVAL(ac_compile); then\n+      AC_DEFINE(_GLIBCXX_USE_INT128, 1,\n+      [Define if __int128_t and __uint128_t types are supported on this host.])\n+      enable_int128=yes\n+    else\n+      enable_int128=no\n+    fi\n+    AC_MSG_RESULT($enable_int128)\n+    rm -f conftest*\n+\n+    cat > conftest.$ac_ext << EOF\n+[#]line __oline__ \"configure\"\n+template<typename T1, typename T2>\n+  struct same\n+  { typedef T2 type; };\n+\n+template<typename T>\n+  struct same<T, T>;\n+\n+int main()\n+{\n+  typename same<double, __float128>::type      f1;\t\n+  typename same<long double, __float128>::type f2;\n+}\n+EOF\n+\n+    AC_MSG_CHECKING([for __float128])\n+    if AC_TRY_EVAL(ac_compile); then\n+      AC_DEFINE(_GLIBCXX_USE_FLOAT128, 1,\n+      [Define if __float128 is supported on this host.])\n+      enable_float128=yes\n+    else\n+      enable_float128=no\n+    fi\n+    AC_MSG_RESULT($enable_float128)\n+    rm -f conftest*\n+\n+  AC_LANG_RESTORE\n+])\n+\n dnl\n dnl Check for template specializations for the 'wchar_t' type.\n dnl"}, {"sha": "19a40b8aed41b88f615e4fa6f8ba1a069ebf4790", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=6d585f0114eaf13241a1ee5c863ff26cc1a67df4", "patch": "@@ -807,12 +807,18 @@\n    this host. */\n #undef _GLIBCXX_USE_DECIMAL_FLOAT\n \n+/* Define if __float128 is supported on this host. */\n+#undef _GLIBCXX_USE_FLOAT128\n+\n /* Defined if gettimeofday is available. */\n #undef _GLIBCXX_USE_GETTIMEOFDAY\n \n /* Define if get_nprocs is available in <sys/sysinfo.h>. */\n #undef _GLIBCXX_USE_GET_NPROCS\n \n+/* Define if __int128_t and __uint128_t types are supported on this host. */\n+#undef _GLIBCXX_USE_INT128\n+\n /* Define if LFS support is available. */\n #undef _GLIBCXX_USE_LFS\n "}, {"sha": "5eb278ac758da084ab42c8d5d4e8d5ed3ac4c3a2", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=6d585f0114eaf13241a1ee5c863ff26cc1a67df4", "patch": "@@ -15538,6 +15538,96 @@ $as_echo \"$enable_dfp\" >&6; }\n     rm -f conftest*\n \n \n+\n+\n+  ac_ext=cpp\n+ac_cpp='$CXXCPP $CPPFLAGS'\n+ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n+\n+\n+  # Fake what AC_TRY_COMPILE does, without linking as this is\n+  # unnecessary for this test.\n+\n+    cat > conftest.$ac_ext << EOF\n+#line 15554 \"configure\"\n+template<typename T1, typename T2>\n+  struct same\n+  { typedef T2 type; };\n+\n+template<typename T>\n+  struct same<T, T>;\n+\n+int main()\n+{\n+  typename same<long, __int128_t>::type                i1;\n+  typename same<unsigned long, __uint128_t>::type      u1;\n+  typename same<long long, __int128_t>::type           i2;\n+  typename same<unsigned long long, __uint128_t>::type u2;\n+}\n+EOF\n+\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for __int128_t and __uint128_t\" >&5\n+$as_echo_n \"checking for __int128_t and __uint128_t... \" >&6; }\n+    if { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_compile\\\"\"; } >&5\n+  (eval $ac_compile) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; then\n+\n+$as_echo \"#define _GLIBCXX_USE_INT128 1\" >>confdefs.h\n+\n+      enable_int128=yes\n+    else\n+      enable_int128=no\n+    fi\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $enable_int128\" >&5\n+$as_echo \"$enable_int128\" >&6; }\n+    rm -f conftest*\n+\n+    cat > conftest.$ac_ext << EOF\n+#line 15590 \"configure\"\n+template<typename T1, typename T2>\n+  struct same\n+  { typedef T2 type; };\n+\n+template<typename T>\n+  struct same<T, T>;\n+\n+int main()\n+{\n+  typename same<double, __float128>::type      f1;\n+  typename same<long double, __float128>::type f2;\n+}\n+EOF\n+\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for __float128\" >&5\n+$as_echo_n \"checking for __float128... \" >&6; }\n+    if { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_compile\\\"\"; } >&5\n+  (eval $ac_compile) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; then\n+\n+$as_echo \"#define _GLIBCXX_USE_FLOAT128 1\" >>confdefs.h\n+\n+      enable_float128=yes\n+    else\n+      enable_float128=no\n+    fi\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $enable_float128\" >&5\n+$as_echo \"$enable_float128\" >&6; }\n+    rm -f conftest*\n+\n+  ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n+\n+\n # Checks for compiler support that doesn't require linking.\n \n   # All these tests are for C++; save the language and the compiler flags."}, {"sha": "8b528baaf9730c2b79cc1306ca5ed05673ad53c0", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=6d585f0114eaf13241a1ee5c863ff26cc1a67df4", "patch": "@@ -114,6 +114,7 @@ GLIBCXX_ENABLE_PCH($is_hosted)\n GLIBCXX_ENABLE_THREADS\n GLIBCXX_ENABLE_ATOMIC_BUILTINS\n GLIBCXX_ENABLE_DECIMAL_FLOAT\n+GLIBCXX_ENABLE_INT128_FLOAT128\n \n # Checks for compiler support that doesn't require linking.\n GLIBCXX_CHECK_COMPILER_FEATURES"}, {"sha": "a03fb34e26e48a07571424434ded31cfae8fdea7", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=6d585f0114eaf13241a1ee5c863ff26cc1a67df4", "patch": "@@ -213,6 +213,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_integral_helper<unsigned long long>\n     : public true_type { };\n \n+#if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_INT128)\n+  template<>\n+    struct __is_integral_helper<__int128_t>\n+    : public true_type { };\n+\n+  template<>\n+    struct __is_integral_helper<__uint128_t>\n+    : public true_type { };\n+#endif\n+\n   /// is_integral\n   template<typename _Tp>\n     struct is_integral\n@@ -236,6 +246,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_floating_point_helper<long double>\n     : public true_type { };\n \n+#if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_FLOAT128)\n+  template<>\n+    struct __is_floating_point_helper<__float128>\n+    : public true_type { };\n+#endif\n+\n   /// is_floating_point\n   template<typename _Tp>\n     struct is_floating_point\n@@ -1398,6 +1414,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __make_unsigned<long long>\n     { typedef unsigned long long __type; };\n \n+#if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_INT128)\n+  template<>\n+    struct __make_unsigned<__int128_t>\n+    { typedef __uint128_t __type; };\n+#endif\n+\n   // Select between integral and enum: not possible to be both.\n   template<typename _Tp, \n \t   bool _IsInt = is_integral<_Tp>::value,\n@@ -1474,6 +1496,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __make_signed<unsigned long long>\n     { typedef signed long long __type; };\n \n+#if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_INT128)\n+  template<>\n+    struct __make_signed<__uint128_t>\n+    { typedef __int128_t __type; };\n+#endif\n+\n   // Select between integral and enum: not possible to be both.\n   template<typename _Tp, \n \t   bool _IsInt = is_integral<_Tp>::value,"}, {"sha": "1f4065b92a85818f00eed8b483fc3c52ec176759", "filename": "libstdc++-v3/testsuite/20_util/declval/requirements/1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc?ref=6d585f0114eaf13241a1ee5c863ff26cc1a67df4", "patch": "@@ -19,7 +19,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 1731 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 1759 }\n \n #include <utility>\n "}, {"sha": "cbfd12e8f381635a60193913d16b5488852c8b77", "filename": "libstdc++-v3/testsuite/20_util/is_floating_point/requirements/explicit_instantiation.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_floating_point%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_floating_point%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_floating_point%2Frequirements%2Fexplicit_instantiation.cc?ref=6d585f0114eaf13241a1ee5c863ff26cc1a67df4", "patch": "@@ -0,0 +1,29 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct is_floating_point<test_type>;\n+}"}, {"sha": "b878ffb03d53929cb5b7694e9235825b7ba767dc", "filename": "libstdc++-v3/testsuite/20_util/is_floating_point/requirements/typedefs.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_floating_point%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_floating_point%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_floating_point%2Frequirements%2Ftypedefs.cc?ref=6d585f0114eaf13241a1ee5c863ff26cc1a67df4", "patch": "@@ -0,0 +1,35 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// \n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::is_floating_point<int>         test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "8f11924ae2578e81e28c3845c5f398403775ba05", "filename": "libstdc++-v3/testsuite/20_util/is_floating_point/value.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_floating_point%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_floating_point%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_floating_point%2Fvalue.cc?ref=6d585f0114eaf13241a1ee5c863ff26cc1a67df4", "patch": "@@ -0,0 +1,68 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::is_floating_point;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (test_category<is_floating_point, void>(false)) );\n+  VERIFY( (test_category<is_floating_point, char>(false)) );\n+  VERIFY( (test_category<is_floating_point, signed char>(false)) );\n+  VERIFY( (test_category<is_floating_point, unsigned char>(false)) );\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  VERIFY( (test_category<is_floating_point, wchar_t>(false)) );\n+#endif\n+  VERIFY( (test_category<is_floating_point, short>(false)) );\n+  VERIFY( (test_category<is_floating_point, unsigned short>(false)) );\n+  VERIFY( (test_category<is_floating_point, int>(false)) );\n+  VERIFY( (test_category<is_floating_point, unsigned int>(false)) );\n+  VERIFY( (test_category<is_floating_point, long>(false)) );\n+  VERIFY( (test_category<is_floating_point, unsigned long>(false)) );\n+  VERIFY( (test_category<is_floating_point, long long>(false)) );\n+  VERIFY( (test_category<is_floating_point, unsigned long long>(false)) );\n+\n+  VERIFY( (test_category<is_floating_point, float>(true)) );\n+  VERIFY( (test_category<is_floating_point, double>(true)) );\n+  VERIFY( (test_category<is_floating_point, long double>(true)) );\n+\n+  // GNU Extensions.\n+#ifdef _GLIBCXX_USE_FLOAT128\n+  VERIFY( (test_category<is_floating_point, __float128>(true)) );\n+#endif\n+\n+#ifdef _GLIBCXX_USE_INT128\n+  VERIFY( (test_category<is_floating_point, __int128_t>(false)) );\n+  VERIFY( (test_category<is_floating_point, __uint128_t>(false)) );\n+#endif\n+\n+  // Sanity check.\n+  VERIFY( (test_category<is_floating_point, ClassType>(false)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "04a91091ad09308d7a8c102593d723241a3d1b8c", "filename": "libstdc++-v3/testsuite/20_util/is_integral/value.cc", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_integral%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_integral%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_integral%2Fvalue.cc?ref=6d585f0114eaf13241a1ee5c863ff26cc1a67df4", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // 2008-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n //\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -51,6 +51,16 @@ void test01()\n   VERIFY( (test_category<is_integral, double>(false)) );\n   VERIFY( (test_category<is_integral, long double>(false)) );\n \n+  // GNU Extensions.\n+#ifdef _GLIBCXX_USE_INT128\n+  VERIFY( (test_category<is_integral, __int128_t>(true)) );\n+  VERIFY( (test_category<is_integral, __uint128_t>(true)) );\n+#endif\n+\n+#ifdef _GLIBCXX_USE_FLOAT128\n+  VERIFY( (test_category<is_integral, __float128>(false)) );\n+#endif\n+\n   // Sanity check.\n   VERIFY( (test_category<is_integral, ClassType>(false)) );\n }"}, {"sha": "f407b42a9a92c3aabe148ffbd33b0c9bef1e6322", "filename": "libstdc++-v3/testsuite/20_util/is_signed/value.cc", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_signed%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_signed%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_signed%2Fvalue.cc?ref=6d585f0114eaf13241a1ee5c863ff26cc1a67df4", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // 2005-01-24  Paolo Carlini  <pcarlini@suse.de>\n //\n-// Copyright (C) 2005, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -49,6 +49,16 @@ void test01()\n   VERIFY( (test_category<is_signed, double>(true)) );\n   VERIFY( (test_category<is_signed, long double>(true)) );\n \n+  // GNU Extensions.\n+#ifdef _GLIBCXX_USE_INT128\n+  VERIFY( (test_category<is_signed, __int128_t>(true)) );\n+  VERIFY( (test_category<is_signed, __uint128_t>(false)) );\n+#endif\n+\n+#ifdef _GLIBCXX_USE_FLOAT128\n+  VERIFY( (test_category<is_signed, __float128>(true)) );\n+#endif\n+\n   // Sanity check.\n   VERIFY( (test_category<is_signed, ClassType>(false)) );\n }"}, {"sha": "7628c99365329a11f7cb8dd93c1275d6c23c6057", "filename": "libstdc++-v3/testsuite/20_util/is_unsigned/value.cc", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_unsigned%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_unsigned%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_unsigned%2Fvalue.cc?ref=6d585f0114eaf13241a1ee5c863ff26cc1a67df4", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // 2005-01-24  Paolo Carlini  <pcarlini@suse.de>\n //\n-// Copyright (C) 2005, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -49,6 +49,16 @@ void test01()\n   VERIFY( (test_category<is_unsigned, double>(false)) );\n   VERIFY( (test_category<is_unsigned, long double>(false)) );\n \n+  // GNU Extensions.\n+#ifdef _GLIBCXX_USE_INT128\n+  VERIFY( (test_category<is_unsigned, __uint128_t>(true)) );\n+  VERIFY( (test_category<is_unsigned, __int128_t>(false)) );\n+#endif\n+\n+#ifdef _GLIBCXX_USE_FLOAT128\n+  VERIFY( (test_category<is_unsigned, __float128>(false)) );\n+#endif\n+\n   // Sanity check.\n   VERIFY( (test_category<is_unsigned, ClassType>(false)) );\n }"}, {"sha": "28d17af8ad373e44d0899958485b9bf1b94433fb", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs-1.cc", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-1.cc?ref=6d585f0114eaf13241a1ee5c863ff26cc1a67df4", "patch": "@@ -2,7 +2,7 @@\n \n // 2007-05-03  Benjamin Kosnik  <bkoz@redhat.com>\n //\n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -53,9 +53,18 @@ void test01()\n #endif\n \n   // Chapter 48, chapter 20. Smallest rank such that new signed type same size.\n-  typedef make_signed<test_enum>::type  \ttest25_type;\n-  VERIFY( is_signed<test25_type>::value );\n-  VERIFY( sizeof(test25_type) == sizeof(test_enum) );\n+  typedef make_signed<test_enum>::type  \ttest24_type;\n+  VERIFY( is_signed<test24_type>::value );\n+  VERIFY( sizeof(test24_type) == sizeof(test_enum) );\n+\n+  // GNU Extensions.\n+#ifdef _GLIBCXX_USE_INT128\n+  typedef make_signed<__uint128_t>::type  \ttest25_type;\n+  VERIFY( (is_same<test25_type, __int128_t>::value) );\n+\n+  typedef make_signed<__int128_t>::type  \ttest26_type;\n+  VERIFY( (is_same<test26_type, __int128_t>::value) );\n+#endif\n }\n \n int main()"}, {"sha": "209ea61013c69b7a7ef8db01d30b6172d1565e32", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs-2.cc", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-2.cc?ref=6d585f0114eaf13241a1ee5c863ff26cc1a67df4", "patch": "@@ -3,7 +3,7 @@\n \n // 2007-05-03  Benjamin Kosnik  <bkoz@redhat.com>\n //\n-// Copyright (C) 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -53,8 +53,17 @@ void test01()\n   VERIFY( (is_same<test23_type, volatile signed wchar_t>::value) );\n #endif\n \n-  typedef make_signed<test_enum>::type  \ttest25_type;\n-  VERIFY( (is_same<test25_type, short>::value) );\n+  typedef make_signed<test_enum>::type  \ttest24_type;\n+  VERIFY( (is_same<test24_type, short>::value) );\n+\n+  // GNU Extensions.\n+#ifdef _GLIBCXX_USE_INT128\n+  typedef make_signed<__uint128_t>::type  \ttest25_type;\n+  VERIFY( (is_same<test25_type, __int128_t>::value) );\n+\n+  typedef make_signed<__int128_t>::type  \ttest26_type;\n+  VERIFY( (is_same<test26_type, __int128_t>::value) );\n+#endif\n }\n \n int main()"}, {"sha": "d61daf3585321bdf917b4ce811b773582543afee", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=6d585f0114eaf13241a1ee5c863ff26cc1a67df4", "patch": "@@ -48,5 +48,5 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1517 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 1481 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1545 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 1509 }"}, {"sha": "021ac7e2f4ffc0dbe0821481710b10d7b149c4e7", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs-1.cc", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-1.cc?ref=6d585f0114eaf13241a1ee5c863ff26cc1a67df4", "patch": "@@ -2,7 +2,7 @@\n \n // 2007-05-03  Benjamin Kosnik  <bkoz@redhat.com>\n //\n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -54,9 +54,18 @@ void test01()\n \n   // Chapter 48, chapter 20. Smallest rank such that new unsigned type\n   // same size.\n-  typedef make_unsigned<test_enum>::type  \ttest25_type;\n-  VERIFY( is_unsigned<test25_type>::value );\n-  VERIFY( sizeof(test25_type) == sizeof(test_enum) );\n+  typedef make_unsigned<test_enum>::type  \ttest24_type;\n+  VERIFY( is_unsigned<test24_type>::value );\n+  VERIFY( sizeof(test24_type) == sizeof(test_enum) );\n+\n+  // GNU Extensions.\n+#ifdef _GLIBCXX_USE_INT128\n+  typedef make_unsigned<__uint128_t>::type  \ttest25_type;\n+  VERIFY( (is_same<test25_type, __uint128_t>::value) );\n+\n+  typedef make_unsigned<__int128_t>::type  \ttest26_type;\n+  VERIFY( (is_same<test26_type, __uint128_t>::value) );\n+#endif\n }\n \n int main()"}, {"sha": "da572624135b030aca1eb5a41af804eb6a93ab60", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs-2.cc", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-2.cc?ref=6d585f0114eaf13241a1ee5c863ff26cc1a67df4", "patch": "@@ -3,7 +3,7 @@\n \n // 2007-05-03  Benjamin Kosnik  <bkoz@redhat.com>\n //\n-// Copyright (C) 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -53,8 +53,17 @@ void test01()\n   VERIFY( (is_same<test23_type, volatile wchar_t>::value) );\n #endif\n \n-  typedef make_unsigned<test_enum>::type  \ttest25_type;\n-  VERIFY( (is_same<test25_type, unsigned short>::value) );\n+  typedef make_unsigned<test_enum>::type  \ttest24_type;\n+  VERIFY( (is_same<test24_type, unsigned short>::value) );\n+\n+  // GNU Extensions.\n+#ifdef _GLIBCXX_USE_INT128\n+  typedef make_unsigned<__uint128_t>::type  \ttest25_type;\n+  VERIFY( (is_same<test25_type, __uint128_t>::value) );\n+\n+  typedef make_unsigned<__int128_t>::type  \ttest26_type;\n+  VERIFY( (is_same<test26_type, __uint128_t>::value) );\n+#endif\n }\n \n int main()"}, {"sha": "ee74be9f267f8e8420eb70b077592584b5b3512b", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d585f0114eaf13241a1ee5c863ff26cc1a67df4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=6d585f0114eaf13241a1ee5c863ff26cc1a67df4", "patch": "@@ -48,5 +48,5 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1441 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 1405 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1463 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 1427 }"}]}