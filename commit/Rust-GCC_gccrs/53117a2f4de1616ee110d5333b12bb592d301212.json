{"sha": "53117a2f4de1616ee110d5333b12bb592d301212", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTMxMTdhMmY0ZGUxNjE2ZWUxMTBkNTMzM2IxMmJiNTkyZDMwMTIxMg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-22T18:39:29Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-22T18:39:29Z"}, "message": "(compiler_version): New variable.\n\n(spec_version): Initialize from DEFAULT_TARGET_VERSION.\n(main): Distinguish COMPILER_VERSION from TARGET_VERSION.\n(process_command): Use COMPILER_VERSION for %v.\nGuard against a COMPILER_VERSION that lacks a minor.\n\nFrom-SVN: r6264", "tree": {"sha": "95242e3949c0be51c2f835c52c87c031d8bde053", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95242e3949c0be51c2f835c52c87c031d8bde053"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53117a2f4de1616ee110d5333b12bb592d301212", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53117a2f4de1616ee110d5333b12bb592d301212", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53117a2f4de1616ee110d5333b12bb592d301212", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53117a2f4de1616ee110d5333b12bb592d301212/comments", "author": null, "committer": null, "parents": [{"sha": "964ceda1db0b52bb14da47fea846a8c893f849d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/964ceda1db0b52bb14da47fea846a8c893f849d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/964ceda1db0b52bb14da47fea846a8c893f849d7"}], "stats": {"total": 45, "additions": 33, "deletions": 12}, "files": [{"sha": "99c449534d530f465aed150b9b672af35e692da2", "filename": "gcc/gcc.c", "status": "modified", "additions": 33, "deletions": 12, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53117a2f4de1616ee110d5333b12bb592d301212/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53117a2f4de1616ee110d5333b12bb592d301212/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=53117a2f4de1616ee110d5333b12bb592d301212", "patch": "@@ -131,9 +131,13 @@ static int verbose_flag;\n \n static int save_temps_flag;\n \n-/* The compiler version specified with -V */\n+/* The compiler version.  */\n \n-static char *spec_version;\n+static char *compiler_version;\n+\n+/* The target version specified with -V */\n+\n+static char *spec_version = DEFAULT_TARGET_VERSION;\n \n /* The target machine specified with -b.  */\n \n@@ -2114,10 +2118,17 @@ process_command (argc, argv)\n   n_switches = 0;\n   n_infiles = 0;\n \n-  /* Default for -V is our version number, ending at first space.  */\n-  spec_version = save_string (version_string, strlen (version_string));\n-  for (temp = spec_version; *temp && *temp != ' '; temp++);\n-  if (*temp) *temp = '\\0';\n+  /* Figure compiler version from version string.  */\n+\n+  compiler_version = save_string (version_string, strlen (version_string));\n+  for (temp = compiler_version; *temp; ++temp)\n+    {\n+      if (*temp == ' ')\n+\t{\n+\t  *temp = '\\0';\n+\t  break;\n+\t}\n+    }\n \n   /* Set up the default search paths.  */\n \n@@ -2394,6 +2405,7 @@ process_command (argc, argv)\n \t\tspec_version = argv[++i];\n \t      else\n \t\tspec_version = p + 1;\n+\t      compiler_version = spec_version;\n \t      break;\n \n \t    case 's':\n@@ -3357,20 +3369,29 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t  case 'v':\n \t    {\n \t      int c1 = *p++;  /* Select first or second version number.  */\n-\t      char *p = spec_version;\n+\t      char *v = compiler_version;\n \t      char *q, *copy;\n \t      /* If desired, advance to second version number.  */\n \t      if (c1 == '2')\n \t\t{\n \t\t  /* Set P after the first period.  */\n-\t\t  while (*p != '.') p++;\n-\t\t  p++;\n+\t\t  while (*v != 0 && *v != ' ' && *v != '.')\n+\t\t    v++;\n+\t\t  if (*v == '.')\n+\t\t    v++;\n \t\t}\n \t      /* Set Q at the next period or at the end.  */\n-\t      q = p;\n-\t      while (*q != '.' && *q != 0) q++;\n+\t      q = v;\n+\t      while (*q != 0 && *q != ' ' && *q != '.')\n+\t\tq++;\n+\t      /* Empty string means zero.  */\n+\t      if (p == q)\n+\t\t{\n+\t\t  v = \"0\";\n+\t\t  q = v + 1;\n+\t\t}\n \t      /* Put that part into the command.  */\n-\t      obstack_grow (&obstack, p, q - p);\n+\t      obstack_grow (&obstack, v, q - v);\n \t      arg_going = 1;\n \t    }\n \t    break;"}]}