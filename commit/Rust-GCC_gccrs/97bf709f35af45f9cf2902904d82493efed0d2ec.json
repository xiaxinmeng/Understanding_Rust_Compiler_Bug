{"sha": "97bf709f35af45f9cf2902904d82493efed0d2ec", "node_id": "C_kwDOANBUbNoAKDk3YmY3MDlmMzVhZjQ1ZjljZjI5MDI5MDRkODI0OTNlZmVkMGQyZWM", "commit": {"author": {"name": "Gaius Mulley", "email": "gaiusmod2@gmail.com", "date": "2023-01-27T22:18:46Z"}, "committer": {"name": "Gaius Mulley", "email": "gaiusmod2@gmail.com", "date": "2023-01-27T22:18:46Z"}, "message": "PR-108557 Stuck compilation for empty file\n\nTrying to compile an empty file causes cc1gm2 to hang.\nThe bug occurs when M2LexBuf.mod calls m2flex.GetToken after\nan eof token has been seen which results in m2flex attempting\nto read from stdin.  The bug fix detects eof per file and\nblocks subsequent calls to m2flex.GetToken.\n\ngcc/m2/ChangeLog:\n\n\t* gm2-compiler/M2Comp.mod:  Import MetaString0.\n\t(ExamineCompilationUnit): New variable Message.\n\tCreate and format error string.\n\t* gm2-compiler/M2LexBuf.mod: New variable SeenEof.\n\t(GetNonEofToken): New procedure.\n\t(Init): Set SeenEof to FALSE.\n\t(GetToken): Use GetNonEofToken instead of calls to\n\tm2flex.GetToken and GetToken.\n\t(AddTok): Detect eoftok and set SeenEof.\n\ngcc/testsuite/ChangeLog:\n\n\t* gm2/pim/fail/empty.mod: New test.\n\nSigned-off-by: Gaius Mulley <gaiusmod2@gmail.com>", "tree": {"sha": "f53f7c974d358568b6a416c63a816287cd8df5dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f53f7c974d358568b6a416c63a816287cd8df5dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97bf709f35af45f9cf2902904d82493efed0d2ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97bf709f35af45f9cf2902904d82493efed0d2ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97bf709f35af45f9cf2902904d82493efed0d2ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97bf709f35af45f9cf2902904d82493efed0d2ec/comments", "author": null, "committer": null, "parents": [{"sha": "84eb39556cc8449e04b5f48bd5c131941a7a2529", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84eb39556cc8449e04b5f48bd5c131941a7a2529", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84eb39556cc8449e04b5f48bd5c131941a7a2529"}], "stats": {"total": 61, "additions": 46, "deletions": 15}, "files": [{"sha": "3c2c3643b186c2205f5e67f4b4c570dfca415e99", "filename": "gcc/m2/gm2-compiler/M2Comp.mod", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97bf709f35af45f9cf2902904d82493efed0d2ec/gcc%2Fm2%2Fgm2-compiler%2FM2Comp.mod", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97bf709f35af45f9cf2902904d82493efed0d2ec/gcc%2Fm2%2Fgm2-compiler%2FM2Comp.mod", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-compiler%2FM2Comp.mod?ref=97bf709f35af45f9cf2902904d82493efed0d2ec", "patch": "@@ -39,7 +39,7 @@ FROM libc IMPORT exit ;\n FROM M2Error IMPORT ErrorStringAt, ErrorStringAt2, ErrorStringsAt2,\n                     WriteFormat0, FlushErrors, FlushWarnings, ResetErrorScope ;\n \n-FROM M2MetaError IMPORT MetaErrorString1, MetaError0, MetaError1 ;\n+FROM M2MetaError IMPORT MetaErrorString0, MetaErrorString1, MetaError0, MetaError1, MetaString0 ;\n FROM FormatStrings IMPORT Sprintf1 ;\n FROM P0SymBuild IMPORT P0Init, P1Init ;\n \n@@ -173,6 +173,8 @@ END compile ;\n *)\n \n PROCEDURE ExamineCompilationUnit (VAR name: ADDRESS; VAR isdefimp: BOOLEAN) ;\n+VAR\n+   Message: String ;\n BEGIN\n    isdefimp := FALSE ;   (* default to program module *)\n    (* stop if we see eof, ';' or '[' *)\n@@ -189,8 +191,9 @@ BEGIN\n       END ;\n       GetToken\n    END ;\n-   m2flex.M2Error(string(InitString('failed to find module name'))) ;\n-   exit(1)\n+   Message := MetaString0 (InitString ('no {%kMODULE} name found')) ;\n+   m2flex.M2Error (string (Message)) ;\n+   exit (1)\n END ExamineCompilationUnit ;\n \n \n@@ -204,20 +207,20 @@ VAR\n    name    : ADDRESS ;\n    isdefimp: BOOLEAN ;\n BEGIN\n-   IF OpenSource(s)\n+   IF OpenSource (s)\n    THEN\n-      ExamineCompilationUnit(name, isdefimp) ;\n+      ExamineCompilationUnit (name, isdefimp) ;\n       IF isdefimp\n       THEN\n-         SetMainModule(MakeImplementationSource(GetTokenNo(), makekey(name)))\n+         SetMainModule (MakeImplementationSource (GetTokenNo (), makekey (name)))\n       ELSE\n-         SetMainModule(MakeProgramSource(GetTokenNo(), makekey(name)))\n+         SetMainModule (MakeProgramSource (GetTokenNo (), makekey (name)))\n       END ;\n       CloseSource ;\n       ReInitialize\n    ELSE\n-      fprintf1(StdErr, 'failed to open %s\\n', s) ;\n-      exit(1)\n+      fprintf1 (StdErr, 'failed to open %s\\n', s) ;\n+      exit (1)\n    END\n END PeepInto ;\n "}, {"sha": "ac496f2d9327c0ed36887ba1ec46de74d7edfedf", "filename": "gcc/m2/gm2-compiler/M2LexBuf.mod", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97bf709f35af45f9cf2902904d82493efed0d2ec/gcc%2Fm2%2Fgm2-compiler%2FM2LexBuf.mod", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97bf709f35af45f9cf2902904d82493efed0d2ec/gcc%2Fm2%2Fgm2-compiler%2FM2LexBuf.mod", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-compiler%2FM2LexBuf.mod?ref=97bf709f35af45f9cf2902904d82493efed0d2ec", "patch": "@@ -82,6 +82,8 @@ VAR\n    ListOfTokens     : ListDesc ;\n    CurrentTokNo     : CARDINAL ;\n    InsertionIndex   : CARDINAL ;\n+   SeenEof          : BOOLEAN ;  (* Have we seen eof since the last call\n+                                    to OpenSource.  *)\n \n \n (*\n@@ -122,6 +124,7 @@ END InitTokenList ;\n \n PROCEDURE Init ;\n BEGIN\n+   SeenEof := FALSE ;\n    InsertionIndex := 0 ;\n    currenttoken := eoftok ;\n    CurrentTokNo := InitialSourceToken ;\n@@ -337,6 +340,7 @@ END SetFile ;\n \n PROCEDURE OpenSource (s: String) : BOOLEAN ;\n BEGIN\n+   SeenEof := FALSE ;\n    IF UseBufferedTokens\n    THEN\n       GetToken ;\n@@ -605,6 +609,27 @@ BEGIN\n END DumpTokens ;\n \n \n+(*\n+   GetNonEofToken - providing that we have not already seen an eof for this source\n+                    file call m2flex.GetToken and GetToken if requested.\n+*)\n+\n+PROCEDURE GetNonEofToken (callGetToken: BOOLEAN) ;\n+BEGIN\n+   IF SeenEof\n+   THEN\n+      currenttoken := eoftok\n+   ELSE\n+      (* Call the lexical phase to place a new token into the last bucket.  *)\n+      m2flex.GetToken () ;\n+      IF callGetToken\n+      THEN\n+         GetToken\n+      END\n+   END\n+END GetNonEofToken ;\n+\n+\n (*\n    GetToken - gets the next token into currenttoken.\n *)\n@@ -622,24 +647,22 @@ BEGIN\n    ELSE\n       IF ListOfTokens.tail=NIL\n       THEN\n-         m2flex.GetToken () ;\n+         GetNonEofToken (FALSE) ;\n          IF ListOfTokens.tail=NIL\n          THEN\n             HALT\n          END\n       END ;\n       IF CurrentTokNo>=ListOfTokens.LastBucketOffset\n       THEN\n-         (* CurrentTokNo is in the last bucket or needs to be read *)\n+         (* CurrentTokNo is in the last bucket or needs to be read.  *)\n          IF CurrentTokNo-ListOfTokens.LastBucketOffset<ListOfTokens.tail^.len\n          THEN\n             UpdateFromBucket (ListOfTokens.tail,\n                               CurrentTokNo-ListOfTokens.LastBucketOffset)\n          ELSE\n-            (* call the lexical phase to place a new token into the last bucket *)\n-            m2flex.GetToken () ;\n-            GetToken ;  (* and call ourselves again to collect the token from bucket *)\n-            RETURN\n+            (* and call ourselves again to collect the token from bucket *)\n+            GetNonEofToken (TRUE)\n          END\n       ELSE\n          t := CurrentTokNo ;\n@@ -1175,6 +1198,10 @@ PROCEDURE AddTok (t: toktype) ;\n VAR\n    s: String ;\n BEGIN\n+   IF t = eoftok\n+   THEN\n+      SeenEof := TRUE\n+   END ;\n    IF NOT ((t=eoftok) AND IsLastTokenEof())\n    THEN\n       AddTokToList(t, NulName, 0,"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "gcc/testsuite/gm2/pim/fail/empty.mod", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97bf709f35af45f9cf2902904d82493efed0d2ec/gcc%2Ftestsuite%2Fgm2%2Fpim%2Ffail%2Fempty.mod", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97bf709f35af45f9cf2902904d82493efed0d2ec/gcc%2Ftestsuite%2Fgm2%2Fpim%2Ffail%2Fempty.mod", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgm2%2Fpim%2Ffail%2Fempty.mod?ref=97bf709f35af45f9cf2902904d82493efed0d2ec", "patch": "@@ -0,0 +1 @@\n+"}]}