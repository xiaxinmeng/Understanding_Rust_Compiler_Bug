{"sha": "647c5e3ea774f96c7f84b3ebacf1cb180aa2fbc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ3YzVlM2VhNzc0Zjk2YzdmODRiM2ViYWNmMWNiMTgwYWEyZmJjNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2019-01-16T15:33:34Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-01-16T15:33:34Z"}, "message": "alpha.c (alpha_gimplify_va_arg): Handle split indirect COMPLEX_TYPE arguments.\n\n\t* config/alpha/alpha.c (alpha_gimplify_va_arg):\n\tHandle split indirect COMPLEX_TYPE arguments.\n\nFrom-SVN: r267973", "tree": {"sha": "06484c4e4da15fc483b687690a4a165b49acaf3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06484c4e4da15fc483b687690a4a165b49acaf3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/647c5e3ea774f96c7f84b3ebacf1cb180aa2fbc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/647c5e3ea774f96c7f84b3ebacf1cb180aa2fbc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/647c5e3ea774f96c7f84b3ebacf1cb180aa2fbc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/647c5e3ea774f96c7f84b3ebacf1cb180aa2fbc5/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "638b5fcaa0dd5b3ee5f3fd430f4c27d9a847fa07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/638b5fcaa0dd5b3ee5f3fd430f4c27d9a847fa07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/638b5fcaa0dd5b3ee5f3fd430f4c27d9a847fa07"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "c0a7e237b1ff62053956b8a67cbabe8b99dc9ea7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/647c5e3ea774f96c7f84b3ebacf1cb180aa2fbc5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/647c5e3ea774f96c7f84b3ebacf1cb180aa2fbc5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=647c5e3ea774f96c7f84b3ebacf1cb180aa2fbc5", "patch": "@@ -1,3 +1,8 @@\n+2019-01-16  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/alpha.c (alpha_gimplify_va_arg):\n+\tHandle split indirect COMPLEX_TYPE arguments.\n+\n 2019-01-16  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR target/86891"}, {"sha": "f0e8124797f3a957efc74019e9555c7cf5a1304b", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/647c5e3ea774f96c7f84b3ebacf1cb180aa2fbc5/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/647c5e3ea774f96c7f84b3ebacf1cb180aa2fbc5/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=647c5e3ea774f96c7f84b3ebacf1cb180aa2fbc5", "patch": "@@ -6378,8 +6378,40 @@ alpha_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n   offset = get_initialized_tmp_var (t, pre_p, NULL);\n \n   indirect = pass_by_reference (NULL, TYPE_MODE (type), type, false);\n+\n   if (indirect)\n-    type = build_pointer_type_for_mode (type, ptr_mode, true);\n+    {\n+      if (TREE_CODE (type) == COMPLEX_TYPE\n+\t  && targetm.calls.split_complex_arg (type))\n+\t{\n+\t  tree real_part, imag_part, real_temp;\n+\n+\t  tree ptr_type = build_pointer_type_for_mode (TREE_TYPE (type),\n+\t\t\t\t\t\t       ptr_mode, true);\n+\n+\t  real_part = alpha_gimplify_va_arg_1 (ptr_type, base,\n+\t\t\t\t\t       offset, pre_p);\n+\t  real_part = build_va_arg_indirect_ref (real_part);\n+\n+\t  /* Copy the value into a new temporary, lest the formal temporary\n+\t     be reused out from under us.  */\n+\t  real_temp = get_initialized_tmp_var (real_part, pre_p, NULL);\n+\n+\t  imag_part = alpha_gimplify_va_arg_1 (ptr_type, base,\n+\t\t\t\t\t       offset, pre_p);\n+\t  imag_part = build_va_arg_indirect_ref (imag_part);\n+\n+\t  r = build2 (COMPLEX_EXPR, type, real_temp, imag_part);\n+\n+\t  /* Stuff the offset temporary back into its field.  */\n+\t  gimplify_assign (unshare_expr (offset_field),\n+\t\t\t   fold_convert (TREE_TYPE (offset_field), offset),\n+\t\t\t   pre_p);\n+\t  return r;\n+\t}\n+      else\n+\ttype = build_pointer_type_for_mode (type, ptr_mode, true);\n+    }\n \n   /* Find the value.  Note that this will be a stable indirection, or\n      a composite of stable indirections in the case of complex.  */"}]}