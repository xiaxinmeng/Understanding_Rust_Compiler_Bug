{"sha": "ecd0e562138661c58ed667767383c49b848247cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNkMGU1NjIxMzg2NjFjNThlZDY2Nzc2NzM4M2M0OWI4NDgyNDdjZg==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-04-28T20:58:51Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-04-28T20:58:51Z"}, "message": "Remove ifn_va_arg ap fixup\n\n2015-04-28  Tom de Vries  <tom@codesourcery.com>\n\n\tPR tree-optimization/65887\n\t* gimplify.c (gimplify_modify_expr): Remove ifn_va_arg ap fixup.\n\n\t* c-common.c (build_va_arg): Mark va_arg ap argument as addressable.\n\nFrom-SVN: r222546", "tree": {"sha": "d6c01e7b9faf57b69953dd6922f0884dd41daccb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6c01e7b9faf57b69953dd6922f0884dd41daccb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecd0e562138661c58ed667767383c49b848247cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecd0e562138661c58ed667767383c49b848247cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecd0e562138661c58ed667767383c49b848247cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecd0e562138661c58ed667767383c49b848247cf/comments", "author": null, "committer": null, "parents": [{"sha": "2a26eef835096987aa2fcf6fdb0c187f01075c04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a26eef835096987aa2fcf6fdb0c187f01075c04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a26eef835096987aa2fcf6fdb0c187f01075c04"}], "stats": {"total": 30, "additions": 14, "deletions": 16}, "files": [{"sha": "8ba462b6e743191a8e8930480e4b9f8951ede3d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecd0e562138661c58ed667767383c49b848247cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecd0e562138661c58ed667767383c49b848247cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ecd0e562138661c58ed667767383c49b848247cf", "patch": "@@ -1,3 +1,8 @@\n+2015-04-28  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/65887\n+\t* gimplify.c (gimplify_modify_expr): Remove ifn_va_arg ap fixup.\n+\n 2015-04-28  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* doc/extend.texi (Declaring Attributes of Functions): Split into"}, {"sha": "217aafb2df5fa679ab4287e7ae8a461badc309b3", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecd0e562138661c58ed667767383c49b848247cf/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecd0e562138661c58ed667767383c49b848247cf/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=ecd0e562138661c58ed667767383c49b848247cf", "patch": "@@ -1,3 +1,8 @@\n+2015-04-28  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/65887\n+\t* c-common.c (build_va_arg): Mark va_arg ap argument as addressable.\n+\n 2015-04-28  Eric Botcazou  <ebotcazou@adacore.com>\n             Pierre-Marie de Rodat  <derodat@adacore.com>\n "}, {"sha": "30456c6a552cf446f330d3f0978383d36144c402", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecd0e562138661c58ed667767383c49b848247cf/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecd0e562138661c58ed667767383c49b848247cf/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=ecd0e562138661c58ed667767383c49b848247cf", "patch": "@@ -5910,6 +5910,10 @@ set_compound_literal_name (tree decl)\n tree\n build_va_arg (location_t loc, tree expr, tree type)\n {\n+  /* In gimplify_va_arg_expr we take the address of the ap argument, mark it\n+     addressable now.  */\n+  mark_addressable (expr);\n+\n   expr = build1 (VA_ARG_EXPR, type, expr);\n   SET_EXPR_LOCATION (expr, loc);\n   return expr;"}, {"sha": "1d5341eec5b19028c7397a5f6a2f912a4c721620", "filename": "gcc/gimplify.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecd0e562138661c58ed667767383c49b848247cf/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecd0e562138661c58ed667767383c49b848247cf/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=ecd0e562138661c58ed667767383c49b848247cf", "patch": "@@ -4569,7 +4569,6 @@ gimplify_modify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n   gimple assign;\n   location_t loc = EXPR_LOCATION (*expr_p);\n   gimple_stmt_iterator gsi;\n-  tree ap = NULL_TREE, ap_copy = NULL_TREE;\n \n   gcc_assert (TREE_CODE (*expr_p) == MODIFY_EXPR\n \t      || TREE_CODE (*expr_p) == INIT_EXPR);\n@@ -4730,16 +4729,12 @@ gimplify_modify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t  enum internal_fn ifn = CALL_EXPR_IFN (*from_p);\n \t  auto_vec<tree> vargs (nargs);\n \n-\t  if (ifn == IFN_VA_ARG)\n-\t    ap = unshare_expr (CALL_EXPR_ARG (*from_p, 0));\n \t  for (i = 0; i < nargs; i++)\n \t    {\n \t      gimplify_arg (&CALL_EXPR_ARG (*from_p, i), pre_p,\n \t\t\t    EXPR_LOCATION (*from_p));\n \t      vargs.quick_push (CALL_EXPR_ARG (*from_p, i));\n \t    }\n-\t  if (ifn == IFN_VA_ARG)\n-\t    ap_copy = CALL_EXPR_ARG (*from_p, 0);\n \t  call_stmt = gimple_build_call_internal_vec (ifn, vargs);\n \t  gimple_set_location (call_stmt, EXPR_LOCATION (*expr_p));\n \t}\n@@ -4784,17 +4779,6 @@ gimplify_modify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n   gsi = gsi_last (*pre_p);\n   maybe_fold_stmt (&gsi);\n \n-  /* When gimplifying the &ap argument of va_arg, we might end up with\n-       ap.1 = ap\n-       va_arg (&ap.1, 0B)\n-     We need to assign ap.1 back to ap, otherwise va_arg has no effect on\n-     ap.  */\n-  if (ap != NULL_TREE\n-      && TREE_CODE (ap) == ADDR_EXPR\n-      && TREE_CODE (ap_copy) == ADDR_EXPR\n-      && !operand_equal_p (TREE_OPERAND (ap, 0), TREE_OPERAND (ap_copy, 0), 0))\n-    gimplify_assign (TREE_OPERAND (ap, 0), TREE_OPERAND (ap_copy, 0), pre_p);\n-\n   if (want_value)\n     {\n       *expr_p = TREE_THIS_VOLATILE (*to_p) ? *from_p : unshare_expr (*to_p);"}]}