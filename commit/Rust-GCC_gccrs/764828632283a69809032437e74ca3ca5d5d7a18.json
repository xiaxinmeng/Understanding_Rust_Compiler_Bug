{"sha": "764828632283a69809032437e74ca3ca5d5d7a18", "node_id": "C_kwDOANBUbNoAKDc2NDgyODYzMjI4M2E2OTgwOTAzMjQzN2U3NGNhM2NhNWQ1ZDdhMTg", "commit": {"author": {"name": "andrewnaguib", "email": "24280372+ndrwnaguib@users.noreply.github.com", "date": "2022-06-24T08:26:40Z"}, "committer": {"name": "andrewnaguib", "email": "24280372+ndrwnaguib@users.noreply.github.com", "date": "2022-06-24T09:05:00Z"}, "message": "hir/add: pretty printing visitor skeleton\n\nThis commit adds a visitor skeleton for pretty printing of the HIR. Also,\nmodifies the session manager to call the new entry point\n`Rust::HIR::Dump::crate` which simply prints the crate the way it used to be.\n\nCo-authored-by: CohenArthur <arthur.cohen@embecosm.com>", "tree": {"sha": "61b579cbde2ea3bbc987de6f6aefc3e04a0261d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61b579cbde2ea3bbc987de6f6aefc3e04a0261d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/764828632283a69809032437e74ca3ca5d5d7a18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/764828632283a69809032437e74ca3ca5d5d7a18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/764828632283a69809032437e74ca3ca5d5d7a18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/764828632283a69809032437e74ca3ca5d5d7a18/comments", "author": {"login": "ndrwnaguib", "id": 24280372, "node_id": "MDQ6VXNlcjI0MjgwMzcy", "avatar_url": "https://avatars.githubusercontent.com/u/24280372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ndrwnaguib", "html_url": "https://github.com/ndrwnaguib", "followers_url": "https://api.github.com/users/ndrwnaguib/followers", "following_url": "https://api.github.com/users/ndrwnaguib/following{/other_user}", "gists_url": "https://api.github.com/users/ndrwnaguib/gists{/gist_id}", "starred_url": "https://api.github.com/users/ndrwnaguib/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ndrwnaguib/subscriptions", "organizations_url": "https://api.github.com/users/ndrwnaguib/orgs", "repos_url": "https://api.github.com/users/ndrwnaguib/repos", "events_url": "https://api.github.com/users/ndrwnaguib/events{/privacy}", "received_events_url": "https://api.github.com/users/ndrwnaguib/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ndrwnaguib", "id": 24280372, "node_id": "MDQ6VXNlcjI0MjgwMzcy", "avatar_url": "https://avatars.githubusercontent.com/u/24280372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ndrwnaguib", "html_url": "https://github.com/ndrwnaguib", "followers_url": "https://api.github.com/users/ndrwnaguib/followers", "following_url": "https://api.github.com/users/ndrwnaguib/following{/other_user}", "gists_url": "https://api.github.com/users/ndrwnaguib/gists{/gist_id}", "starred_url": "https://api.github.com/users/ndrwnaguib/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ndrwnaguib/subscriptions", "organizations_url": "https://api.github.com/users/ndrwnaguib/orgs", "repos_url": "https://api.github.com/users/ndrwnaguib/repos", "events_url": "https://api.github.com/users/ndrwnaguib/events{/privacy}", "received_events_url": "https://api.github.com/users/ndrwnaguib/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0f11672d760513256997f325da678016d13f677", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0f11672d760513256997f325da678016d13f677", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0f11672d760513256997f325da678016d13f677"}], "stats": {"total": 643, "additions": 641, "deletions": 2}, "files": [{"sha": "6b0c4d7985687ff6a9fc1a498f9b2d71861bde1e", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/764828632283a69809032437e74ca3ca5d5d7a18/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/764828632283a69809032437e74ca3ca5d5d7a18/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=764828632283a69809032437e74ca3ca5d5d7a18", "patch": "@@ -70,6 +70,7 @@ GRS_OBJS = \\\n     rust/rust-parse.o \\\n     rust/rust-ast-full-test.o \\\n     rust/rust-ast-dump.o \\\n+    rust/rust-hir-dump.o \\\n     rust/rust-session-manager.o \\\n     rust/rust-compile.o \\\n     rust/rust-mangle.o \\"}, {"sha": "506334441fd47a74935f610395ad08f2b9c4b96d", "filename": "gcc/rust/hir/rust-hir-dump.cc", "status": "added", "additions": 446, "deletions": 0, "changes": 446, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/764828632283a69809032437e74ca3ca5d5d7a18/gcc%2Frust%2Fhir%2Frust-hir-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/764828632283a69809032437e74ca3ca5d5d7a18/gcc%2Frust%2Fhir%2Frust-hir-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-hir-dump.cc?ref=764828632283a69809032437e74ca3ca5d5d7a18", "patch": "@@ -0,0 +1,446 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-hir-dump.h\"\n+\n+namespace Rust {\n+namespace HIR {\n+\n+Dump::Dump (std::ostream &stream) : stream (stream) {}\n+\n+void\n+Dump::go (HIR::Crate &crate)\n+{\n+  // TODO: print crate inner_attrs\n+  // TODO: print crate items\n+  // TODO: print crate mappings\n+  stream << crate.as_string ();\n+}\n+\n+void\n+Dump::visit (IdentifierExpr &)\n+{}\n+void\n+Dump::visit (Lifetime &)\n+{}\n+void\n+Dump::visit (LifetimeParam &)\n+{}\n+void\n+Dump::visit (PathInExpression &)\n+{}\n+void\n+Dump::visit (TypePathSegment &)\n+{}\n+void\n+Dump::visit (TypePathSegmentGeneric &)\n+{}\n+void\n+Dump::visit (TypePathSegmentFunction &)\n+{}\n+void\n+Dump::visit (TypePath &)\n+{}\n+void\n+Dump::visit (QualifiedPathInExpression &)\n+{}\n+void\n+Dump::visit (QualifiedPathInType &)\n+{}\n+\n+void\n+Dump::visit (LiteralExpr &)\n+{}\n+void\n+Dump::visit (BorrowExpr &)\n+{}\n+void\n+Dump::visit (DereferenceExpr &)\n+{}\n+void\n+Dump::visit (ErrorPropagationExpr &)\n+{}\n+void\n+Dump::visit (NegationExpr &)\n+{}\n+void\n+Dump::visit (ArithmeticOrLogicalExpr &)\n+{}\n+void\n+Dump::visit (ComparisonExpr &)\n+{}\n+void\n+Dump::visit (LazyBooleanExpr &)\n+{}\n+void\n+Dump::visit (TypeCastExpr &)\n+{}\n+void\n+Dump::visit (AssignmentExpr &)\n+{}\n+void\n+Dump::visit (CompoundAssignmentExpr &)\n+{}\n+void\n+Dump::visit (GroupedExpr &)\n+{}\n+\n+void\n+Dump::visit (ArrayElemsValues &)\n+{}\n+void\n+Dump::visit (ArrayElemsCopied &)\n+{}\n+void\n+Dump::visit (ArrayExpr &)\n+{}\n+void\n+Dump::visit (ArrayIndexExpr &)\n+{}\n+void\n+Dump::visit (TupleExpr &)\n+{}\n+void\n+Dump::visit (TupleIndexExpr &)\n+{}\n+void\n+Dump::visit (StructExprStruct &)\n+{}\n+\n+void\n+Dump::visit (StructExprFieldIdentifier &)\n+{}\n+void\n+Dump::visit (StructExprFieldIdentifierValue &)\n+{}\n+\n+void\n+Dump::visit (StructExprFieldIndexValue &)\n+{}\n+void\n+Dump::visit (StructExprStructFields &)\n+{}\n+void\n+Dump::visit (StructExprStructBase &)\n+{}\n+\n+void\n+Dump::visit (CallExpr &)\n+{}\n+void\n+Dump::visit (MethodCallExpr &)\n+{}\n+void\n+Dump::visit (FieldAccessExpr &)\n+{}\n+void\n+Dump::visit (ClosureExprInner &)\n+{}\n+void\n+Dump::visit (BlockExpr &)\n+{}\n+void\n+Dump::visit (ClosureExprInnerTyped &)\n+{}\n+void\n+Dump::visit (ContinueExpr &)\n+{}\n+void\n+Dump::visit (BreakExpr &)\n+{}\n+void\n+Dump::visit (RangeFromToExpr &)\n+{}\n+void\n+Dump::visit (RangeFromExpr &)\n+{}\n+void\n+Dump::visit (RangeToExpr &)\n+{}\n+void\n+Dump::visit (RangeFullExpr &)\n+{}\n+void\n+Dump::visit (RangeFromToInclExpr &)\n+{}\n+void\n+Dump::visit (RangeToInclExpr &)\n+{}\n+void\n+Dump::visit (ReturnExpr &)\n+{}\n+void\n+Dump::visit (UnsafeBlockExpr &)\n+{}\n+void\n+Dump::visit (LoopExpr &)\n+{}\n+void\n+Dump::visit (WhileLoopExpr &)\n+{}\n+void\n+Dump::visit (WhileLetLoopExpr &)\n+{}\n+void\n+Dump::visit (ForLoopExpr &)\n+{}\n+void\n+Dump::visit (IfExpr &)\n+{}\n+void\n+Dump::visit (IfExprConseqElse &)\n+{}\n+void\n+Dump::visit (IfExprConseqIf &)\n+{}\n+void\n+Dump::visit (IfExprConseqIfLet &)\n+{}\n+void\n+Dump::visit (IfLetExpr &)\n+{}\n+void\n+Dump::visit (IfLetExprConseqElse &)\n+{}\n+void\n+Dump::visit (IfLetExprConseqIf &)\n+{}\n+void\n+Dump::visit (IfLetExprConseqIfLet &)\n+{}\n+\n+void\n+Dump::visit (MatchExpr &)\n+{}\n+void\n+Dump::visit (AwaitExpr &)\n+{}\n+void\n+Dump::visit (AsyncBlockExpr &)\n+{}\n+\n+void\n+Dump::visit (TypeParam &)\n+{}\n+\n+void\n+Dump::visit (LifetimeWhereClauseItem &)\n+{}\n+void\n+Dump::visit (TypeBoundWhereClauseItem &)\n+{}\n+void\n+Dump::visit (Module &)\n+{}\n+void\n+Dump::visit (ExternCrate &)\n+{}\n+\n+void\n+Dump::visit (UseTreeGlob &)\n+{}\n+void\n+Dump::visit (UseTreeList &)\n+{}\n+void\n+Dump::visit (UseTreeRebind &)\n+{}\n+void\n+Dump::visit (UseDeclaration &)\n+{}\n+void\n+Dump::visit (Function &)\n+{}\n+void\n+Dump::visit (TypeAlias &)\n+{}\n+void\n+Dump::visit (StructStruct &)\n+{}\n+void\n+Dump::visit (TupleStruct &)\n+{}\n+void\n+Dump::visit (EnumItem &)\n+{}\n+void\n+Dump::visit (EnumItemTuple &)\n+{}\n+void\n+Dump::visit (EnumItemStruct &)\n+{}\n+void\n+Dump::visit (EnumItemDiscriminant &)\n+{}\n+void\n+Dump::visit (Enum &)\n+{}\n+void\n+Dump::visit (Union &)\n+{}\n+void\n+Dump::visit (ConstantItem &)\n+{}\n+void\n+Dump::visit (StaticItem &)\n+{}\n+void\n+Dump::visit (TraitItemFunc &)\n+{}\n+void\n+Dump::visit (TraitItemConst &)\n+{}\n+void\n+Dump::visit (TraitItemType &)\n+{}\n+void\n+Dump::visit (Trait &)\n+{}\n+void\n+Dump::visit (ImplBlock &)\n+{}\n+\n+void\n+Dump::visit (ExternalStaticItem &)\n+{}\n+void\n+Dump::visit (ExternalFunctionItem &)\n+{}\n+void\n+Dump::visit (ExternBlock &)\n+{}\n+\n+void\n+Dump::visit (LiteralPattern &)\n+{}\n+void\n+Dump::visit (IdentifierPattern &)\n+{}\n+void\n+Dump::visit (WildcardPattern &)\n+{}\n+\n+void\n+Dump::visit (RangePatternBoundLiteral &)\n+{}\n+void\n+Dump::visit (RangePatternBoundPath &)\n+{}\n+void\n+Dump::visit (RangePatternBoundQualPath &)\n+{}\n+void\n+Dump::visit (RangePattern &)\n+{}\n+void\n+Dump::visit (ReferencePattern &)\n+{}\n+\n+void\n+Dump::visit (StructPatternFieldTuplePat &)\n+{}\n+void\n+Dump::visit (StructPatternFieldIdentPat &)\n+{}\n+void\n+Dump::visit (StructPatternFieldIdent &)\n+{}\n+void\n+Dump::visit (StructPattern &)\n+{}\n+\n+void\n+Dump::visit (TupleStructItemsNoRange &)\n+{}\n+void\n+Dump::visit (TupleStructItemsRange &)\n+{}\n+void\n+Dump::visit (TupleStructPattern &)\n+{}\n+\n+void\n+Dump::visit (TuplePatternItemsMultiple &)\n+{}\n+void\n+Dump::visit (TuplePatternItemsRanged &)\n+{}\n+void\n+Dump::visit (TuplePattern &)\n+{}\n+void\n+Dump::visit (GroupedPattern &)\n+{}\n+void\n+Dump::visit (SlicePattern &)\n+{}\n+\n+void\n+Dump::visit (EmptyStmt &)\n+{}\n+void\n+Dump::visit (LetStmt &)\n+{}\n+void\n+Dump::visit (ExprStmtWithoutBlock &)\n+{}\n+void\n+Dump::visit (ExprStmtWithBlock &)\n+{}\n+\n+void\n+Dump::visit (TraitBound &)\n+{}\n+void\n+Dump::visit (ImplTraitType &)\n+{}\n+void\n+Dump::visit (TraitObjectType &)\n+{}\n+void\n+Dump::visit (ParenthesisedType &)\n+{}\n+void\n+Dump::visit (ImplTraitTypeOneBound &)\n+{}\n+void\n+Dump::visit (TupleType &)\n+{}\n+void\n+Dump::visit (NeverType &)\n+{}\n+void\n+Dump::visit (RawPointerType &)\n+{}\n+void\n+Dump::visit (ReferenceType &)\n+{}\n+void\n+Dump::visit (ArrayType &)\n+{}\n+void\n+Dump::visit (SliceType &)\n+{}\n+void\n+Dump::visit (InferredType &)\n+{}\n+void\n+Dump::visit (BareFunctionType &)\n+{}\n+} // namespace HIR\n+} // namespace Rust"}, {"sha": "4569c90233b144c5bdf8532cdf65359c33891f8c", "filename": "gcc/rust/hir/rust-hir-dump.h", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/764828632283a69809032437e74ca3ca5d5d7a18/gcc%2Frust%2Fhir%2Frust-hir-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/764828632283a69809032437e74ca3ca5d5d7a18/gcc%2Frust%2Fhir%2Frust-hir-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-hir-dump.h?ref=764828632283a69809032437e74ca3ca5d5d7a18", "patch": "@@ -0,0 +1,191 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_HIR_DUMP_H\n+#define RUST_HIR_DUMP_H\n+\n+#include \"rust-hir-visitor.h\"\n+#include \"rust-hir.h\"\n+#include \"rust-hir-full.h\"\n+\n+namespace Rust {\n+namespace HIR {\n+\n+class Dump : public HIRFullVisitor\n+{\n+public:\n+  Dump (std::ostream &stream);\n+  void go (HIR::Crate &crate);\n+\n+private:\n+  std::ostream &stream;\n+\n+  virtual void visit (IdentifierExpr &) override;\n+  virtual void visit (Lifetime &) override;\n+  virtual void visit (LifetimeParam &) override;\n+  virtual void visit (PathInExpression &) override;\n+  virtual void visit (TypePathSegment &) override;\n+  virtual void visit (TypePathSegmentGeneric &) override;\n+  virtual void visit (TypePathSegmentFunction &) override;\n+  virtual void visit (TypePath &) override;\n+  virtual void visit (QualifiedPathInExpression &) override;\n+  virtual void visit (QualifiedPathInType &) override;\n+\n+  virtual void visit (LiteralExpr &) override;\n+  virtual void visit (BorrowExpr &) override;\n+  virtual void visit (DereferenceExpr &) override;\n+  virtual void visit (ErrorPropagationExpr &) override;\n+  virtual void visit (NegationExpr &) override;\n+  virtual void visit (ArithmeticOrLogicalExpr &) override;\n+  virtual void visit (ComparisonExpr &) override;\n+  virtual void visit (LazyBooleanExpr &) override;\n+  virtual void visit (TypeCastExpr &) override;\n+  virtual void visit (AssignmentExpr &) override;\n+  virtual void visit (CompoundAssignmentExpr &) override;\n+  virtual void visit (GroupedExpr &) override;\n+\n+  virtual void visit (ArrayElemsValues &) override;\n+  virtual void visit (ArrayElemsCopied &) override;\n+  virtual void visit (ArrayExpr &) override;\n+  virtual void visit (ArrayIndexExpr &) override;\n+  virtual void visit (TupleExpr &) override;\n+  virtual void visit (TupleIndexExpr &) override;\n+  virtual void visit (StructExprStruct &) override;\n+\n+  virtual void visit (StructExprFieldIdentifier &) override;\n+  virtual void visit (StructExprFieldIdentifierValue &) override;\n+\n+  virtual void visit (StructExprFieldIndexValue &) override;\n+  virtual void visit (StructExprStructFields &) override;\n+  virtual void visit (StructExprStructBase &) override;\n+\n+  virtual void visit (CallExpr &) override;\n+  virtual void visit (MethodCallExpr &) override;\n+  virtual void visit (FieldAccessExpr &) override;\n+  virtual void visit (ClosureExprInner &) override;\n+  virtual void visit (BlockExpr &) override;\n+  virtual void visit (ClosureExprInnerTyped &) override;\n+  virtual void visit (ContinueExpr &) override;\n+  virtual void visit (BreakExpr &) override;\n+  virtual void visit (RangeFromToExpr &) override;\n+  virtual void visit (RangeFromExpr &) override;\n+  virtual void visit (RangeToExpr &) override;\n+  virtual void visit (RangeFullExpr &) override;\n+  virtual void visit (RangeFromToInclExpr &) override;\n+  virtual void visit (RangeToInclExpr &) override;\n+  virtual void visit (ReturnExpr &) override;\n+  virtual void visit (UnsafeBlockExpr &) override;\n+  virtual void visit (LoopExpr &) override;\n+  virtual void visit (WhileLoopExpr &) override;\n+  virtual void visit (WhileLetLoopExpr &) override;\n+  virtual void visit (ForLoopExpr &) override;\n+  virtual void visit (IfExpr &) override;\n+  virtual void visit (IfExprConseqElse &) override;\n+  virtual void visit (IfExprConseqIf &) override;\n+  virtual void visit (IfExprConseqIfLet &) override;\n+  virtual void visit (IfLetExpr &) override;\n+  virtual void visit (IfLetExprConseqElse &) override;\n+  virtual void visit (IfLetExprConseqIf &) override;\n+  virtual void visit (IfLetExprConseqIfLet &) override;\n+\n+  virtual void visit (MatchExpr &) override;\n+  virtual void visit (AwaitExpr &) override;\n+  virtual void visit (AsyncBlockExpr &) override;\n+\n+  virtual void visit (TypeParam &) override;\n+\n+  virtual void visit (LifetimeWhereClauseItem &) override;\n+  virtual void visit (TypeBoundWhereClauseItem &) override;\n+  virtual void visit (Module &) override;\n+  virtual void visit (ExternCrate &) override;\n+\n+  virtual void visit (UseTreeGlob &) override;\n+  virtual void visit (UseTreeList &) override;\n+  virtual void visit (UseTreeRebind &) override;\n+  virtual void visit (UseDeclaration &) override;\n+  virtual void visit (Function &) override;\n+  virtual void visit (TypeAlias &) override;\n+  virtual void visit (StructStruct &) override;\n+  virtual void visit (TupleStruct &) override;\n+  virtual void visit (EnumItem &) override;\n+  virtual void visit (EnumItemTuple &) override;\n+  virtual void visit (EnumItemStruct &) override;\n+  virtual void visit (EnumItemDiscriminant &) override;\n+  virtual void visit (Enum &) override;\n+  virtual void visit (Union &) override;\n+  virtual void visit (ConstantItem &) override;\n+  virtual void visit (StaticItem &) override;\n+  virtual void visit (TraitItemFunc &) override;\n+  virtual void visit (TraitItemConst &) override;\n+  virtual void visit (TraitItemType &) override;\n+  virtual void visit (Trait &) override;\n+  virtual void visit (ImplBlock &) override;\n+\n+  virtual void visit (ExternalStaticItem &) override;\n+  virtual void visit (ExternalFunctionItem &) override;\n+  virtual void visit (ExternBlock &) override;\n+\n+  virtual void visit (LiteralPattern &) override;\n+  virtual void visit (IdentifierPattern &) override;\n+  virtual void visit (WildcardPattern &) override;\n+\n+  virtual void visit (RangePatternBoundLiteral &) override;\n+  virtual void visit (RangePatternBoundPath &) override;\n+  virtual void visit (RangePatternBoundQualPath &) override;\n+  virtual void visit (RangePattern &) override;\n+  virtual void visit (ReferencePattern &) override;\n+\n+  virtual void visit (StructPatternFieldTuplePat &) override;\n+  virtual void visit (StructPatternFieldIdentPat &) override;\n+  virtual void visit (StructPatternFieldIdent &) override;\n+  virtual void visit (StructPattern &) override;\n+\n+  virtual void visit (TupleStructItemsNoRange &) override;\n+  virtual void visit (TupleStructItemsRange &) override;\n+  virtual void visit (TupleStructPattern &) override;\n+\n+  virtual void visit (TuplePatternItemsMultiple &) override;\n+  virtual void visit (TuplePatternItemsRanged &) override;\n+  virtual void visit (TuplePattern &) override;\n+  virtual void visit (GroupedPattern &) override;\n+  virtual void visit (SlicePattern &) override;\n+\n+  virtual void visit (EmptyStmt &) override;\n+  virtual void visit (LetStmt &) override;\n+  virtual void visit (ExprStmtWithoutBlock &) override;\n+  virtual void visit (ExprStmtWithBlock &) override;\n+\n+  virtual void visit (TraitBound &) override;\n+  virtual void visit (ImplTraitType &) override;\n+  virtual void visit (TraitObjectType &) override;\n+  virtual void visit (ParenthesisedType &) override;\n+  virtual void visit (ImplTraitTypeOneBound &) override;\n+  virtual void visit (TupleType &) override;\n+  virtual void visit (NeverType &) override;\n+  virtual void visit (RawPointerType &) override;\n+  virtual void visit (ReferenceType &) override;\n+  virtual void visit (ArrayType &) override;\n+  virtual void visit (SliceType &) override;\n+  virtual void visit (InferredType &) override;\n+  virtual void visit (BareFunctionType &) override;\n+};\n+\n+} // namespace HIR\n+} // namespace Rust\n+\n+#endif // !RUST_HIR_DUMP_H"}, {"sha": "bbc4d6ee46fe57ee56b6e77c48d290b7b7e2d74c", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/764828632283a69809032437e74ca3ca5d5d7a18/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/764828632283a69809032437e74ca3ca5d5d7a18/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=764828632283a69809032437e74ca3ca5d5d7a18", "patch": "@@ -31,6 +31,7 @@\n #include \"rust-cfg-parser.h\"\n #include \"rust-lint-scan-deadcode.h\"\n #include \"rust-lint-unused-var.h\"\n+#include \"rust-hir-dump.h\"\n \n #include \"diagnostic.h\"\n #include \"input.h\"\n@@ -1045,7 +1046,7 @@ Session::dump_ast_expanded (Parser<Lexer> &parser, AST::Crate &crate) const\n }\n \n void\n-Session::dump_hir (HIR::Crate &hir) const\n+Session::dump_hir (HIR::Crate &crate) const\n {\n   std::ofstream out;\n   out.open (kHIRDumpFile);\n@@ -1056,7 +1057,7 @@ Session::dump_hir (HIR::Crate &hir) const\n       return;\n     }\n \n-  out << hir.as_string ();\n+  HIR::Dump (out).go (crate);\n   out.close ();\n }\n "}]}