{"sha": "9e6b3b4a22cb0c9151eb39abcdc9847daf5a5d61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU2YjNiNGEyMmNiMGM5MTUxZWIzOWFiY2RjOTg0N2RhZjVhNWQ2MQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-05-10T12:50:48Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-05-10T12:54:14Z"}, "message": "testsuite/arm: Add mve-vmul-scalar-1.c test\n\nSupport for vmul has been present for a while, but it was lacking a\ntest for the scalar variant.\n\nThis patch adds one, precisely noting that we do not yet use the T2\nvariants of vmul, which take a scalar as final argument.\n\n2021-05-10  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/testsuite/\n\t* gcc.target/arm/simd/mve-vmul-scalar-1.c: New.", "tree": {"sha": "d7771bac6bdf9479aaab4676670cb33b80eec758", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7771bac6bdf9479aaab4676670cb33b80eec758"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e6b3b4a22cb0c9151eb39abcdc9847daf5a5d61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e6b3b4a22cb0c9151eb39abcdc9847daf5a5d61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e6b3b4a22cb0c9151eb39abcdc9847daf5a5d61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e6b3b4a22cb0c9151eb39abcdc9847daf5a5d61/comments", "author": null, "committer": null, "parents": [{"sha": "d83b0c6975523ce57f29ec5a081b5b2068bf02bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d83b0c6975523ce57f29ec5a081b5b2068bf02bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d83b0c6975523ce57f29ec5a081b5b2068bf02bf"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "22be452e8d91caed46f237a21d3cbc3b1c2ea6a1", "filename": "gcc/testsuite/gcc.target/arm/simd/mve-vmul-scalar-1.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e6b3b4a22cb0c9151eb39abcdc9847daf5a5d61/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vmul-scalar-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e6b3b4a22cb0c9151eb39abcdc9847daf5a5d61/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vmul-scalar-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vmul-scalar-1.c?ref=9e6b3b4a22cb0c9151eb39abcdc9847daf5a5d61", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O3\" } */\n+\n+#include <stdint.h>\n+\n+#define FUNC_IMM(SIGN, TYPE, BITS, NB, OP, NAME)\t\t\t\\\n+  void test_ ## NAME ##_ ## SIGN ## BITS ## x ## NB (TYPE##BITS##_t * __restrict__ dest, \\\n+\t\t\t\t\t\t     TYPE##BITS##_t *a) { \\\n+    int i;\t\t\t\t\t\t\t\t\\\n+    for (i=0; i<NB; i++) {\t\t\t\t\t\t\\\n+      dest[i] = a[i] OP 5;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+/* 128-bit vectors.  */\n+FUNC_IMM(s, int, 32, 4, *, vmulimm)\n+FUNC_IMM(u, uint, 32, 4, *, vmulimm)\n+FUNC_IMM(s, int, 16, 8, *, vmulimm)\n+FUNC_IMM(u, uint, 16, 8, *, vmulimm)\n+FUNC_IMM(s, int, 8, 16, *, vmulimm)\n+FUNC_IMM(u, uint, 8, 16, *, vmulimm)\n+\n+/* For the moment we do not select the T2 vmul variant operating on a scalar\n+   final argument.  */\n+/* { dg-final { scan-assembler-times {vmul\\.i32\\tq[0-9]+, q[0-9]+, r[0-9]+} 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {vmul\\.i16\\tq[0-9]+, q[0-9]+, r[0-9]+} 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {vmul\\.i8\\tq[0-9]+, q[0-9]+, r[0-9]+} 2 { xfail *-*-* } } } */\n+\n+void test_vmul_f32 (float * dest, float * a, float * b) {\n+  int i;\n+  for (i=0; i<4; i++) {\n+    dest[i] = a[i] * b[1];\n+  }\n+}\n+void test_vmulimm_f32 (float * dest, float * a) {\n+  int i;\n+  for (i=0; i<4; i++) {\n+    dest[i] = a[i] * 5.0;\n+  }\n+}\n+/* { dg-final { scan-assembler-times {vmul\\.f32\\tq[0-9]+, q[0-9]+, r[0-9]+} 2 { xfail *-*-* } } } */\n+\n+void test_vmul_f16 (__fp16 * dest, __fp16 * a, __fp16 * b) {\n+  int i;\n+  for (i=0; i<8; i++) {\n+    dest[i] = a[i] * b[i];\n+  }\n+}\n+\n+/* Note that dest[i] = a[i] * 5.0f16 is not vectorized.  */\n+void test_vmulimm_f16 (__fp16 * dest, __fp16 * a) {\n+  int i;\n+  __fp16 b = 5.0f16;\n+  for (i=0; i<8; i++) {\n+    dest[i] = a[i] * b;\n+  }\n+}\n+/* { dg-final { scan-assembler-times {vmul\\.f16\\tq[0-9]+, q[0-9]+, r[0-9]+} 2 { xfail *-*-* } } } */"}]}