{"sha": "fe7496dd9fcb94be92815f2c91f1581da17ff96d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU3NDk2ZGQ5ZmNiOTRiZTkyODE1ZjJjOTFmMTU4MWRhMTdmZjk2ZA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2003-02-14T21:47:48Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2003-02-14T21:47:48Z"}, "message": "mn10300.c (mn10300_wide_const_load_uses_clr): New function.\n\n* config/mn10300/mn10300.c (mn10300_wide_const_load_uses_clr): New\nfunction.\n* config/mn10300/mn10300-protos.h: Declare it.\n* config/mn10300/mn10300.md (movdi, movdf): Use it to compute\nattribute cc of instructions that may use clr.\n\nFrom-SVN: r62916", "tree": {"sha": "3a23f589a277e44cf83c7f561cdfa71bf631e9bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a23f589a277e44cf83c7f561cdfa71bf631e9bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe7496dd9fcb94be92815f2c91f1581da17ff96d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe7496dd9fcb94be92815f2c91f1581da17ff96d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe7496dd9fcb94be92815f2c91f1581da17ff96d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe7496dd9fcb94be92815f2c91f1581da17ff96d/comments", "author": null, "committer": null, "parents": [{"sha": "e4402f97c18bdf20af5d1fc9a1f10f1b12e84eb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4402f97c18bdf20af5d1fc9a1f10f1b12e84eb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4402f97c18bdf20af5d1fc9a1f10f1b12e84eb2"}], "stats": {"total": 107, "additions": 101, "deletions": 6}, "files": [{"sha": "34128fe3be2e0d07a2e3b00f9f1dac813c888d1a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7496dd9fcb94be92815f2c91f1581da17ff96d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7496dd9fcb94be92815f2c91f1581da17ff96d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe7496dd9fcb94be92815f2c91f1581da17ff96d", "patch": "@@ -1,3 +1,11 @@\n+2003-02-14  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* config/mn10300/mn10300.c (mn10300_wide_const_load_uses_clr): New\n+\tfunction.\n+\t* config/mn10300/mn10300-protos.h: Declare it.\n+\t* config/mn10300/mn10300.md (movdi, movdf): Use it to compute\n+\tattribute cc of instructions that may use clr.\n+\n 2003-02-14  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* simplify-rtx.c (simplify_binary_operation): Simplify ~y when"}, {"sha": "4816e6f1f096b47c44f41ae6dc7c8e5b3d0bd354", "filename": "gcc/config/mn10300/mn10300-protos.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7496dd9fcb94be92815f2c91f1581da17ff96d/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7496dd9fcb94be92815f2c91f1581da17ff96d/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h?ref=fe7496dd9fcb94be92815f2c91f1581da17ff96d", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler. Matsushita MN10300 series\n-   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2003 Free Software Foundation, Inc.\n    Contributed by Jeff Law (law@cygnus.com).\n \n This file is part of GNU CC.\n@@ -40,6 +40,8 @@ extern int symbolic_operand PARAMS ((rtx, enum machine_mode));\n extern int call_address_operand PARAMS ((rtx, enum machine_mode));\n extern int impossible_plus_operand PARAMS ((rtx, enum machine_mode));\n extern int const_8bit_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern bool mn10300_wide_const_load_uses_clr PARAMS ((rtx operands[2]));\n #endif /* RTX_CODE */\n \n #ifdef TREE_CODE\n@@ -57,4 +59,3 @@ extern void expand_epilogue PARAMS ((void));\n extern int initial_offset PARAMS ((int, int));\n extern int can_use_return_insn PARAMS ((void));\n extern int mask_ok_for_mem_btst PARAMS ((int, int));\n-"}, {"sha": "5a281260ca3aedd2194cd036bed06f94ce2b6d57", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7496dd9fcb94be92815f2c91f1581da17ff96d/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7496dd9fcb94be92815f2c91f1581da17ff96d/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=fe7496dd9fcb94be92815f2c91f1581da17ff96d", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for Matsushita MN10300 series\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003\n    Free Software Foundation, Inc.\n    Contributed by Jeff Law (law@cygnus.com).\n \n@@ -1390,3 +1390,51 @@ mn10300_rtx_costs (x, code, outer_code, total)\n       return false;\n     }\n }\n+\n+/* Check whether a constant used to initialize a DImode or DFmode can\n+   use a clr instruction.  The code here must be kept in sync with\n+   movdf and movdi.  */\n+\n+bool\n+mn10300_wide_const_load_uses_clr (operands)\n+     rtx operands[2];\n+{\n+  long val[2];\n+\n+  if (GET_CODE (operands[0]) != REG\n+      || REGNO_REG_CLASS (REGNO (operands[0])) != DATA_REGS)\n+    return false;\n+\n+  switch (GET_CODE (operands[1]))\n+    {\n+    case CONST_INT:\n+      {\n+\trtx low, high;\n+\tsplit_double (operands[1], &low, &high);\n+\tval[0] = INTVAL (low);\n+\tval[1] = INTVAL (high);\n+      }\n+      break;\n+      \n+    case CONST_DOUBLE:\n+      if (GET_MODE (operands[1]) == DFmode)\n+\t{\n+\t  REAL_VALUE_TYPE rv;\n+\n+\t  REAL_VALUE_FROM_CONST_DOUBLE (rv, operands[1]);\n+\t  REAL_VALUE_TO_TARGET_DOUBLE (rv, val);\n+\t}\n+      else if (GET_MODE (operands[1]) == VOIDmode\n+\t       || GET_MODE (operands[1]) == DImode)\n+\t{\n+\t  val[0] = CONST_DOUBLE_LOW (operands[1]);\n+\t  val[1] = CONST_DOUBLE_HIGH (operands[1]);\n+\t}\n+      break;\n+      \n+    default:\n+      return false;\n+    }\n+\n+  return val[0] == 0 || val[1] == 0;\n+}"}, {"sha": "f889aa61cdd81450c381c0371630b9d23fd26b79", "filename": "gcc/config/mn10300/mn10300.md", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7496dd9fcb94be92815f2c91f1581da17ff96d/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7496dd9fcb94be92815f2c91f1581da17ff96d/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.md?ref=fe7496dd9fcb94be92815f2c91f1581da17ff96d", "patch": "@@ -1,5 +1,5 @@\n ;; GCC machine description for Matsushita MN10300\n-;; Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002\n+;; Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003\n ;; Free Software Foundation, Inc.\n ;; Contributed by Jeff Law (law@cygnus.com).\n \n@@ -520,7 +520,26 @@\n       abort ();\n     }\n }\"\n-  [(set_attr \"cc\" \"none,none,clobber,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit\")])\n+  [(set (attr \"cc\")\n+\t(cond\n+\t [\n+\t (lt (symbol_ref \"which_alternative\") (const_int 2)\n+\t     ) (const_string \"none\")\n+\t (eq (symbol_ref \"which_alternative\") (const_int 2)\n+\t     ) (const_string \"clobber\")\n+\t (eq (symbol_ref \"which_alternative\") (const_int 3)\n+\t     ) (if_then_else\n+\t\t(ne (symbol_ref \"rtx_equal_p (operands[0], operands[1])\")\n+\t\t    (const_int 0)) (const_string \"clobber\")\n+\t\t    (const_string \"none_0hit\"))\n+\t (ior (eq (symbol_ref \"which_alternative\") (const_int 8))\n+\t      (eq (symbol_ref \"which_alternative\") (const_int 9))\n+\t      ) (if_then_else\n+\t\t (ne (symbol_ref \"mn10300_wide_const_load_uses_clr\n+\t\t\t\t  (operands)\")\n+\t\t     (const_int 0)) (const_string \"clobber\")\n+\t\t     (const_string \"none_0hit\"))\n+\t ] (const_string \"none_0hit\")))])\n \n (define_expand \"movdf\"\n   [(set (match_operand:DF 0 \"general_operand\" \"\")\n@@ -670,7 +689,26 @@\n       abort ();\n     }\n }\"\n-  [(set_attr \"cc\" \"none,none,clobber,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit\")])\n+  [(set (attr \"cc\")\n+\t(cond\n+\t [\n+\t (lt (symbol_ref \"which_alternative\") (const_int 2)\n+\t     ) (const_string \"none\")\n+\t (eq (symbol_ref \"which_alternative\") (const_int 2)\n+\t     ) (const_string \"clobber\")\n+\t (eq (symbol_ref \"which_alternative\") (const_int 3)\n+\t     ) (if_then_else\n+\t\t(ne (symbol_ref \"rtx_equal_p (operands[0], operands[1])\")\n+\t\t    (const_int 0)) (const_string \"clobber\")\n+\t\t    (const_string \"none_0hit\"))\n+\t (ior (eq (symbol_ref \"which_alternative\") (const_int 8))\n+\t      (eq (symbol_ref \"which_alternative\") (const_int 9))\n+\t      ) (if_then_else\n+\t\t (ne (symbol_ref \"mn10300_wide_const_load_uses_clr\n+\t\t\t\t  (operands)\")\n+\t\t     (const_int 0)) (const_string \"clobber\")\n+\t\t     (const_string \"none_0hit\"))\n+\t ] (const_string \"none_0hit\")))])\n \n \n \f"}]}