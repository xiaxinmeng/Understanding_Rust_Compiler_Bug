{"sha": "0e055c1cd2818af3d636b0a9736fd873bcbeb56e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUwNTVjMWNkMjgxOGFmM2Q2MzZiMGE5NzM2ZmQ4NzNiY2JlYjU2ZQ==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2007-04-16T13:44:59Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2007-04-16T13:44:59Z"}, "message": "BootClassLoader.java (getBootURLLoader): New method.\n\n2007-04-16  Andrew Haley  <aph@redhat.com>\n\n        * gnu/gcj/runtime/BootClassLoader.java (getBootURLLoader): New\n        method.\n        (bootGetResource): Use getBootURLLoader() to load resources.\n        (bootGetResources): Likewise.\n\n        * java/lang/reflect/natMethod.cc (Method::invoke): In invoke also\n        check that the method's declaring class is accessible.\n\nFrom-SVN: r123862", "tree": {"sha": "596031af669670b840c0e1c7fc4b9cbcb65204c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/596031af669670b840c0e1c7fc4b9cbcb65204c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e055c1cd2818af3d636b0a9736fd873bcbeb56e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e055c1cd2818af3d636b0a9736fd873bcbeb56e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e055c1cd2818af3d636b0a9736fd873bcbeb56e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e055c1cd2818af3d636b0a9736fd873bcbeb56e/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "60555ced95a26a5454d66d2d5ce2e435ed0efc3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60555ced95a26a5454d66d2d5ce2e435ed0efc3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60555ced95a26a5454d66d2d5ce2e435ed0efc3b"}], "stats": {"total": 100, "additions": 93, "deletions": 7}, "files": [{"sha": "31bbd012d2c0353bd83a1fd701f30502df92215f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e055c1cd2818af3d636b0a9736fd873bcbeb56e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e055c1cd2818af3d636b0a9736fd873bcbeb56e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=0e055c1cd2818af3d636b0a9736fd873bcbeb56e", "patch": "@@ -1,3 +1,13 @@\n+2007-04-16  Andrew Haley  <aph@redhat.com>\n+\n+\t* gnu/gcj/runtime/BootClassLoader.java (getBootURLLoader): New\n+\tmethod.\n+\t(bootGetResource): Use getBootURLLoader() to load resources.\n+\t(bootGetResources): Likewise.\n+\n+\t* java/lang/reflect/natMethod.cc (Method::invoke): In invoke also\n+\tcheck that the method's declaring class is accessible.\n+\n 2007-04-10  Keith Seitz  <keiths@redhat.com>\n \n \t* sources.am: Regenerate."}, {"sha": "40f3147b7bedd41c40a7943f6ef184057825b059", "filename": "libjava/gnu/gcj/runtime/BootClassLoader.java", "status": "modified", "additions": 60, "deletions": 2, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e055c1cd2818af3d636b0a9736fd873bcbeb56e/libjava%2Fgnu%2Fgcj%2Fruntime%2FBootClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e055c1cd2818af3d636b0a9736fd873bcbeb56e/libjava%2Fgnu%2Fgcj%2Fruntime%2FBootClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fruntime%2FBootClassLoader.java?ref=0e055c1cd2818af3d636b0a9736fd873bcbeb56e", "patch": "@@ -9,9 +9,13 @@\n package gnu.gcj.runtime;\n \n import gnu.java.net.protocol.core.Handler;\n+import java.io.File;\n import java.io.IOException;\n import java.net.URL;\n+import java.net.URLClassLoader;\n import java.util.Enumeration;\n+import java.util.StringTokenizer;\n+import java.util.Vector;\n \n /**\n  * This is a helper for the bootstrap class loader.  It is a\n@@ -27,6 +31,9 @@ public final class BootClassLoader extends HelperClassLoader\n   // path fails otherwise.\n   static Class coreHandler = gnu.java.net.protocol.core.Handler.class;\n \n+  private boolean initialized;\n+  private URLClassLoader bootURLLoader;\n+\n   BootClassLoader(String libdir)\n   {\n     // The BootClassLoader is the top of the delegation chain. It does not\n@@ -68,13 +75,64 @@ public Class bootLoadClass(String name)\n     return c;\n   }\n \n+  // Parse the boot classpath and create a URLClassLoader that loads\n+  // resources from it.  This is provided for the benefit of code that\n+  // does things like\n+  //   ClassLoader.getResourceAsStream(\"java/lang/Object.class\")\n+  private synchronized URLClassLoader getBootURLLoader()\n+  {\n+    if (initialized)\n+      return bootURLLoader;\n+    initialized = true;\n+\n+    Vector<URL> urls = new Vector<URL>();\n+    String bootClasspath = System.getProperty (\"sun.boot.class.path\");\n+    StringTokenizer st =\n+      new StringTokenizer(bootClasspath, File.pathSeparator);\n+    while (st.hasMoreTokens())\n+      {\n+\ttry\n+\t  {\n+\t    urls.add(new File(st.nextToken()).toURL());\n+\t  }\n+\tcatch (java.net.MalformedURLException e)\n+\t  {\n+\t  }\n+      }\n+\n+    if (urls.size() > 0)\n+      bootURLLoader = new URLClassLoader(urls.toArray(new URL[urls.size()]));\n+    return bootURLLoader;\n+  }\n+\n   public URL bootGetResource(String name)\n   {\n-    return findResource(name);\n+    URL url = findResource(name);\n+    if (url != null)\n+      return url;\n+\n+    URLClassLoader loader = getBootURLLoader();\n+    if (loader != null)\n+      url = loader.findResource(name);\n+\n+    return url;\n   }\n \n   public Enumeration bootGetResources(String name) throws IOException\n   {\n-    return findResources(name);\n+    URLClassLoader loader = getBootURLLoader();\n+    Enumeration[] e =\n+      {\n+\tfindResources(name),\n+\t(loader != null) ? loader.findResources(name) : null\n+      };\n+\n+    Vector v = new Vector();\n+    for (Enumeration en : e)\n+      if (en != null)\n+\twhile (en.hasMoreElements())\n+\t  v.add(en.nextElement());\n+\n+    return v.elements();\n   }\n }"}, {"sha": "4593da7f49e373a16a491b57c4930c6a7a002f70", "filename": "libjava/java/lang/reflect/natMethod.cc", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e055c1cd2818af3d636b0a9736fd873bcbeb56e/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e055c1cd2818af3d636b0a9736fd873bcbeb56e/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc?ref=0e055c1cd2818af3d636b0a9736fd873bcbeb56e", "patch": "@@ -173,16 +173,34 @@ java::lang::reflect::Method::invoke (jobject obj, jobjectArray args)\n     }\n \n   // Check accessibility, if required.\n-  if (! (Modifier::isPublic (meth->accflags) || this->isAccessible()))\n+  if (! this->isAccessible())\n     {\n-      Class *caller = _Jv_StackTrace::GetCallingClass (&Method::class$);\n-      if (! _Jv_CheckAccess(caller, declaringClass, meth->accflags))\n-\tthrow new IllegalAccessException;\n+      if (! (Modifier::isPublic (meth->accflags)))\n+\t{\n+\t  Class *caller = _Jv_StackTrace::GetCallingClass (&Method::class$);\n+\t  if (! _Jv_CheckAccess(caller, declaringClass, meth->accflags))\n+\t    throw new IllegalAccessException;\n+\t}\n+      else\n+\t// Method is public, check to see if class is accessible.\n+\t{\n+\t  jint flags = (declaringClass->accflags\n+\t\t\t& (Modifier::PUBLIC\n+\t\t\t   | Modifier::PROTECTED\n+\t\t\t   | Modifier::PRIVATE));\n+\t  if (flags == 0) // i.e. class is package private\n+\t    {\n+\t      Class *caller = _Jv_StackTrace::GetCallingClass (&Method::class$);\n+\t      if (! _Jv_ClassNameSamePackage (caller->name,\n+\t\t\t\t\t      declaringClass->name))\n+\t\tthrow new IllegalAccessException;\n+\t    }\n+\t}\n     }\n \n   if (declaringClass->isInterface())\n     iface = declaringClass;\n-  \n+\n   return _Jv_CallAnyMethodA (obj, return_type, meth, false,\n \t\t\t     parameter_types, args, iface);\n }"}]}