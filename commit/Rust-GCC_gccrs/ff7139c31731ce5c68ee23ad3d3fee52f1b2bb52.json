{"sha": "ff7139c31731ce5c68ee23ad3d3fee52f1b2bb52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY3MTM5YzMxNzMxY2U1YzY4ZWUyM2FkM2QzZmVlNTJmMWIyYmI1Mg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-20T13:18:34Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-20T13:18:34Z"}, "message": "[multiple changes]\n\n2009-07-20  Vadim Godunko  <godunko@adacore.com>\n\n\t* a-coorma.adb: Minor reformatting.\n\n2009-07-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3 (Build_Itype_Reference): Make public, for use on non-null\n\taccess return types.\n\t* sem_ch6.adb (Analyze_Return_Type): If return is a not null subtype,\n\tprovide an itype reference to gigi to force elaboration of the subtype\n\tat the proper point.\n\n2009-07-20  Tristan Gingold  <gingold@adacore.com>\n\n\t* g-expect.adb: Avoid closeing already closed handle.\n\n2009-07-20  Robert Dewar  <dewar@adacore.com>\n\n\t* sprint.adb (Write_Subprogram_Name): New procedure to output\n\tsubprogram name with possible preceding $ (replaces\n\tNote_Implicit_Run_Time_Call).\n\nFrom-SVN: r149812", "tree": {"sha": "6d0d286c708ed3fff7533ab8f04416f1b91f3d68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d0d286c708ed3fff7533ab8f04416f1b91f3d68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff7139c31731ce5c68ee23ad3d3fee52f1b2bb52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff7139c31731ce5c68ee23ad3d3fee52f1b2bb52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff7139c31731ce5c68ee23ad3d3fee52f1b2bb52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff7139c31731ce5c68ee23ad3d3fee52f1b2bb52/comments", "author": null, "committer": null, "parents": [{"sha": "6fb4cddeee68c3284e62389aadc9e505092c11a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fb4cddeee68c3284e62389aadc9e505092c11a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fb4cddeee68c3284e62389aadc9e505092c11a9"}], "stats": {"total": 177, "additions": 120, "deletions": 57}, "files": [{"sha": "1d2f349f056d45a3361f67ed695d77ba9e3fd629", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7139c31731ce5c68ee23ad3d3fee52f1b2bb52/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7139c31731ce5c68ee23ad3d3fee52f1b2bb52/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ff7139c31731ce5c68ee23ad3d3fee52f1b2bb52", "patch": "@@ -1,3 +1,25 @@\n+2009-07-20  Vadim Godunko  <godunko@adacore.com>\n+\n+\t* a-coorma.adb: Minor reformatting.\n+\n+2009-07-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3 (Build_Itype_Reference): Make public, for use on non-null\n+\taccess return types.\n+\t* sem_ch6.adb (Analyze_Return_Type): If return is a not null subtype,\n+\tprovide an itype reference to gigi to force elaboration of the subtype\n+\tat the proper point.\n+\n+2009-07-20  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* g-expect.adb: Avoid closeing already closed handle.\n+\n+2009-07-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sprint.adb (Write_Subprogram_Name): New procedure to output\n+\tsubprogram name with possible preceding $ (replaces\n+\tNote_Implicit_Run_Time_Call).\n+\n 2009-07-20  Robert Dewar  <dewar@adacore.com>\n \n \t* vms_data.ads: Minor reformatting"}, {"sha": "934d9de658c56513a266c1554ea68a805dd7a405", "filename": "gcc/ada/a-coorma.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7139c31731ce5c68ee23ad3d3fee52f1b2bb52/gcc%2Fada%2Fa-coorma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7139c31731ce5c68ee23ad3d3fee52f1b2bb52/gcc%2Fada%2Fa-coorma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorma.adb?ref=ff7139c31731ce5c68ee23ad3d3fee52f1b2bb52", "patch": "@@ -545,6 +545,10 @@ package body Ada.Containers.Ordered_Maps is\n       end if;\n    end Include;\n \n+   ------------\n+   -- Insert --\n+   ------------\n+\n    procedure Insert\n      (Container : in out Map;\n       Key       : Key_Type;\n@@ -605,10 +609,6 @@ package body Ada.Containers.Ordered_Maps is\n       end if;\n    end Insert;\n \n-   ------------\n-   -- Insert --\n-   ------------\n-\n    procedure Insert\n      (Container : in out Map;\n       Key       : Key_Type;"}, {"sha": "405b0331275a0daafacc934d3ffe46fcc6b8ae47", "filename": "gcc/ada/g-expect.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7139c31731ce5c68ee23ad3d3fee52f1b2bb52/gcc%2Fada%2Fg-expect.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7139c31731ce5c68ee23ad3d3fee52f1b2bb52/gcc%2Fada%2Fg-expect.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-expect.adb?ref=ff7139c31731ce5c68ee23ad3d3fee52f1b2bb52", "patch": "@@ -814,7 +814,8 @@ package body GNAT.Expect is\n          Send (Process, Input);\n       end if;\n \n-      GNAT.OS_Lib.Close (Get_Input_Fd (Process));\n+      Close (Process.Input_Fd);\n+      Process.Input_Fd := Invalid_FD;\n \n       declare\n          Result : Expect_Match;\n@@ -1305,10 +1306,14 @@ package body GNAT.Expect is\n       pragma Warnings (Off, Pipe1);\n       pragma Warnings (Off, Pipe2);\n       pragma Warnings (Off, Pipe3);\n+\n    begin\n       Close (Pipe1.Input);\n       Close (Pipe2.Output);\n-      Close (Pipe3.Output);\n+\n+      if Pipe3.Output /= Pipe2.Output then\n+         Close (Pipe3.Output);\n+      end if;\n    end Set_Up_Parent_Communications;\n \n    ------------------"}, {"sha": "2050954cbe3c687f058c1e0c5eca9842480e0904", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7139c31731ce5c68ee23ad3d3fee52f1b2bb52/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7139c31731ce5c68ee23ad3d3fee52f1b2bb52/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=ff7139c31731ce5c68ee23ad3d3fee52f1b2bb52", "patch": "@@ -229,21 +229,6 @@ package body Sem_Ch3 is\n    --  Needs a more complete spec--what are the parameters exactly, and what\n    --  exactly is the returned value, and how is Bound affected???\n \n-   procedure Build_Itype_Reference\n-     (Ityp : Entity_Id;\n-      Nod  : Node_Id);\n-   --  Create a reference to an internal type, for use by Gigi. The back-end\n-   --  elaborates itypes on demand, i.e. when their first use is seen. This\n-   --  can lead to scope anomalies if the first use is within a scope that is\n-   --  nested within the scope that contains  the point of definition of the\n-   --  itype. The Itype_Reference node forces the elaboration of the itype\n-   --  in the proper scope. The node is inserted after Nod, which is the\n-   --  enclosing declaration that generated Ityp.\n-   --\n-   --  A related mechanism is used during expansion, for itypes created in\n-   --  branches of conditionals. See Ensure_Defined in exp_util.\n-   --  Could both mechanisms be merged ???\n-\n    procedure Build_Underlying_Full_View\n      (N   : Node_Id;\n       Typ : Entity_Id;\n@@ -11149,6 +11134,7 @@ package body Sem_Ch3 is\n       Set_Convention           (T1, Convention            (T2));\n       Set_Is_Limited_Composite (T1, Is_Limited_Composite  (T2));\n       Set_Is_Private_Composite (T1, Is_Private_Composite  (T2));\n+      Set_Packed_Array_Type    (T1, Packed_Array_Type     (T2));\n    end Copy_Array_Subtype_Attributes;\n \n    -----------------------------------"}, {"sha": "6c7dbaae032406bae4c62774bb89281e39ff7599", "filename": "gcc/ada/sem_ch3.ads", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7139c31731ce5c68ee23ad3d3fee52f1b2bb52/gcc%2Fada%2Fsem_ch3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7139c31731ce5c68ee23ad3d3fee52f1b2bb52/gcc%2Fada%2Fsem_ch3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.ads?ref=ff7139c31731ce5c68ee23ad3d3fee52f1b2bb52", "patch": "@@ -79,6 +79,21 @@ package Sem_Ch3 is\n    procedure Access_Type_Declaration (T : Entity_Id; Def : Node_Id);\n    --  Process an access type declaration\n \n+   procedure Build_Itype_Reference\n+     (Ityp : Entity_Id;\n+      Nod  : Node_Id);\n+   --  Create a reference to an internal type, for use by Gigi. The back-end\n+   --  elaborates itypes on demand, i.e. when their first use is seen. This\n+   --  can lead to scope anomalies if the first use is within a scope that is\n+   --  nested within the scope that contains  the point of definition of the\n+   --  itype. The Itype_Reference node forces the elaboration of the itype\n+   --  in the proper scope. The node is inserted after Nod, which is the\n+   --  enclosing declaration that generated Ityp.\n+   --\n+   --  A related mechanism is used during expansion, for itypes created in\n+   --  branches of conditionals. See Ensure_Defined in exp_util.\n+   --  Could both mechanisms be merged ???\n+\n    procedure Check_Abstract_Overriding (T : Entity_Id);\n    --  Check that all abstract subprograms inherited from T's parent type\n    --  have been overridden as required, and that nonabstract subprograms"}, {"sha": "9de012f5db75f0e310c419d213e661c4d06dbf75", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7139c31731ce5c68ee23ad3d3fee52f1b2bb52/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7139c31731ce5c68ee23ad3d3fee52f1b2bb52/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=ff7139c31731ce5c68ee23ad3d3fee52f1b2bb52", "patch": "@@ -641,6 +641,11 @@ package body Sem_Ch6 is\n          then\n             null;\n \n+         elsif Etype (Base_Type (R_Type)) = R_Stm_Type\n+           and then Is_Null_Extension (Base_Type (R_Type))\n+         then\n+            null;\n+\n          else\n             Error_Msg_N\n               (\"wrong type for return_subtype_indication\", Subtype_Ind);\n@@ -1322,9 +1327,32 @@ package body Sem_Ch6 is\n             then\n                Set_Etype  (Designator,\n                  Create_Null_Excluding_Itype\n-                   (T           => Typ,\n-                    Related_Nod => N,\n-                    Scope_Id    => Scope (Current_Scope)));\n+                  (T           => Typ,\n+                   Related_Nod => N,\n+                   Scope_Id    => Scope (Current_Scope)));\n+\n+               --  The new subtype must be elaborated before use because\n+               --  it is visible outside of the function. However its base\n+               --  type may not be frozen yet, so the reference that will\n+               --  force elaboration must be attached to the freezing of\n+               --  the base type.\n+\n+               if Is_Frozen (Typ) then\n+                  Build_Itype_Reference\n+                    (Etype (Designator), Parent (N));\n+               else\n+                  Ensure_Freeze_Node (Typ);\n+\n+                  declare\n+                     IR : constant Node_Id :=\n+                             Make_Itype_Reference (Sloc (N));\n+\n+                  begin\n+                     Set_Itype (IR, Etype (Designator));\n+                     Append_Freeze_Actions (Typ, New_List (IR));\n+                  end;\n+               end if;\n+\n             else\n                Set_Etype (Designator, Typ);\n             end if;"}, {"sha": "ec042b9ed792b8e3de6d07b22cf48a98af090bee", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 40, "deletions": 33, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7139c31731ce5c68ee23ad3d3fee52f1b2bb52/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7139c31731ce5c68ee23ad3d3fee52f1b2bb52/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=ff7139c31731ce5c68ee23ad3d3fee52f1b2bb52", "patch": "@@ -164,11 +164,6 @@ package body Sprint is\n    procedure Indent_End;\n    --  Decrease indentation level\n \n-   procedure Note_Implicit_Run_Time_Call (N : Node_Id);\n-   --  N is the Name field of a function call or procedure statement call.\n-   --  The effect of the call is to output a $ if the call is identified as\n-   --  an implicit call to a run time routine.\n-\n    procedure Print_Debug_Line (S : String);\n    --  Used to print output lines in Debug_Generated_Code mode (this is used\n    --  as the argument for a call to Set_Special_Output in package Output).\n@@ -328,6 +323,11 @@ package body Sprint is\n    --  Like Write_Str_With_Col_Check, but sets debug Sloc of current debug\n    --  node to first non-blank character if a current debug node is active.\n \n+   procedure Write_Subprogram_Name (N : Node_Id);\n+   --  N is the Name field of a function call or procedure statement call.\n+   --  The effect of the call is to output the name, preceded by a $ if the\n+   --  call is identified as an implicit call to a run time routine.\n+\n    procedure Write_Uint_With_Col_Check (U : Uint; Format : UI_Format);\n    --  Write Uint (using UI_Write) with initial column check, and possible\n    --  initial Write_Indent (to get new line) if current line is too full.\n@@ -395,30 +395,6 @@ package body Sprint is\n       Indent := Indent - 3;\n    end Indent_End;\n \n-   ---------------------------------\n-   -- Note_Implicit_Run_Time_Call --\n-   ---------------------------------\n-\n-   procedure Note_Implicit_Run_Time_Call (N : Node_Id) is\n-   begin\n-      if not Comes_From_Source (N)\n-        and then Is_Entity_Name (N)\n-      then\n-         declare\n-            Ent : constant Entity_Id := Entity (N);\n-         begin\n-            if not In_Extended_Main_Source_Unit (Ent)\n-              and then\n-                Is_Predefined_File_Name\n-                  (Unit_File_Name (Get_Source_Unit (Ent)))\n-            then\n-               Col_Check (Length_Of_Name (Chars (Ent)));\n-               Write_Char ('$');\n-            end if;\n-         end;\n-      end if;\n-   end Note_Implicit_Run_Time_Call;\n-\n    --------\n    -- pg --\n    --------\n@@ -1749,8 +1725,7 @@ package body Sprint is\n \n          when N_Function_Call =>\n             Set_Debug_Sloc;\n-            Note_Implicit_Run_Time_Call (Name (Node));\n-            Sprint_Node (Name (Node));\n+            Write_Subprogram_Name (Name (Node));\n             Sprint_Opt_Paren_Comma_List (Parameter_Associations (Node));\n \n          when N_Function_Instantiation =>\n@@ -2468,8 +2443,7 @@ package body Sprint is\n          when N_Procedure_Call_Statement =>\n             Write_Indent;\n             Set_Debug_Sloc;\n-            Note_Implicit_Run_Time_Call (Name (Node));\n-            Sprint_Node (Name (Node));\n+            Write_Subprogram_Name (Name (Node));\n             Sprint_Opt_Paren_Comma_List (Parameter_Associations (Node));\n             Write_Char (';');\n \n@@ -4266,6 +4240,39 @@ package body Sprint is\n       end if;\n    end Write_Str_With_Col_Check_Sloc;\n \n+   ---------------------------\n+   -- Write_Subprogram_Name --\n+   ---------------------------\n+\n+   procedure Write_Subprogram_Name (N : Node_Id) is\n+   begin\n+      if not Comes_From_Source (N)\n+        and then Is_Entity_Name (N)\n+      then\n+         declare\n+            Ent : constant Entity_Id := Entity (N);\n+         begin\n+            if not In_Extended_Main_Source_Unit (Ent)\n+              and then\n+                Is_Predefined_File_Name\n+                  (Unit_File_Name (Get_Source_Unit (Ent)))\n+            then\n+               --  Run-time routine name, output name with a preceding dollar\n+               --  making sure that we do not get a line split between them.\n+\n+               Col_Check (Length_Of_Name (Chars (Ent)) + 1);\n+               Write_Char ('$');\n+               Write_Name (Chars (Ent));\n+               return;\n+            end if;\n+         end;\n+      end if;\n+\n+      --  Normal case, not a run-time routine name\n+\n+      Sprint_Node (N);\n+   end Write_Subprogram_Name;\n+\n    -------------------------------\n    -- Write_Uint_With_Col_Check --\n    -------------------------------"}]}