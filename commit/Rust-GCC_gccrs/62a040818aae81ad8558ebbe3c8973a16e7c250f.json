{"sha": "62a040818aae81ad8558ebbe3c8973a16e7c250f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJhMDQwODE4YWFlODFhZDg1NThlYmJlM2M4OTczYTE2ZTdjMjUwZg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-10-02T13:44:32Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-10-02T13:44:32Z"}, "message": "prims.cc (_Jv_NewMultiArrayUnchecked): New method.\n\n\t* prims.cc (_Jv_NewMultiArrayUnchecked): New method.\n\t(_Jv_NewMultiArray): Use it.  Check each array dimension.\n\t(_Jv_NewMultiArray): Likewise.\n\t* java/lang/reflect/natMethod.cc (can_widen): Nothing promotes to\n\t`char'.\n\t* java/lang/reflect/natArray.cc (newInstance): Throw\n\tIllegalArgumentException if there are no dimensions.\n\nFrom-SVN: r45951", "tree": {"sha": "671927c18dd4a69605e4bc5e6e956d6b870a48d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/671927c18dd4a69605e4bc5e6e956d6b870a48d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62a040818aae81ad8558ebbe3c8973a16e7c250f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62a040818aae81ad8558ebbe3c8973a16e7c250f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62a040818aae81ad8558ebbe3c8973a16e7c250f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62a040818aae81ad8558ebbe3c8973a16e7c250f/comments", "author": null, "committer": null, "parents": [{"sha": "6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cbd1b6f7ebf08244942dd1aaae5ae73ef79da48"}], "stats": {"total": 43, "additions": 34, "deletions": 9}, "files": [{"sha": "ee54950d0d185ff6b1845cb339ae9ddea11da592", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62a040818aae81ad8558ebbe3c8973a16e7c250f/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62a040818aae81ad8558ebbe3c8973a16e7c250f/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=62a040818aae81ad8558ebbe3c8973a16e7c250f", "patch": "@@ -1,3 +1,13 @@\n+2001-10-01  Tom Tromey  <tromey@redhat.com>\n+\n+\t* prims.cc (_Jv_NewMultiArrayUnchecked): New method.\n+\t(_Jv_NewMultiArray): Use it.  Check each array dimension.\n+\t(_Jv_NewMultiArray): Likewise.\n+\t* java/lang/reflect/natMethod.cc (can_widen): Nothing promotes to\n+\t`char'.\n+\t* java/lang/reflect/natArray.cc (newInstance): Throw\n+\tIllegalArgumentException if there are no dimensions.\n+\n 2001-10-01  Mark Wielaard  <mark@klomp.org>\n \n \t* java/io/FileWriter.java: Merge with Classpath."}, {"sha": "78751229eaba658af31cebc5ac75537c916e2890", "filename": "libjava/java/lang/reflect/natArray.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62a040818aae81ad8558ebbe3c8973a16e7c250f/libjava%2Fjava%2Flang%2Freflect%2FnatArray.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62a040818aae81ad8558ebbe3c8973a16e7c250f/libjava%2Fjava%2Flang%2Freflect%2FnatArray.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FnatArray.cc?ref=62a040818aae81ad8558ebbe3c8973a16e7c250f", "patch": "@@ -43,11 +43,12 @@ java::lang::reflect::Array::newInstance (jclass componentType, jint length)\n }\n \n jobject\n-java::lang::reflect::Array::newInstance (jclass componentType, jintArray dimensions)\n+java::lang::reflect::Array::newInstance (jclass componentType,\n+\t\t\t\t\t jintArray dimensions)\n {\n   jint ndims = dimensions->length;\n   if (ndims == 0)\n-    return componentType->newInstance ();\n+    throw new java::lang::IllegalArgumentException ();\n   jint* dims = elements (dimensions);\n   if (ndims == 1)\n     return newInstance (componentType, dims[0]);"}, {"sha": "26c270e3e0332b9815bee6ea8150fba54c437f8e", "filename": "libjava/java/lang/reflect/natMethod.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62a040818aae81ad8558ebbe3c8973a16e7c250f/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62a040818aae81ad8558ebbe3c8973a16e7c250f/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc?ref=62a040818aae81ad8558ebbe3c8973a16e7c250f", "patch": "@@ -100,8 +100,8 @@ can_widen (jclass from, jclass to)\n   // Boolean arguments may not be widened.\n   if (fromx == BOOLEAN && tox != BOOLEAN)\n     return false;\n-  // Special-case short->char conversions.\n-  if (fromx == SHORT && tox == CHAR)\n+  // Nothing promotes to char.\n+  if (tox == CHAR && fromx != CHAR)\n     return false;\n \n   return fromx <= tox;"}, {"sha": "9b4ac240df9d69106b5bbf37a2966b6742f2062b", "filename": "libjava/prims.cc", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62a040818aae81ad8558ebbe3c8973a16e7c250f/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62a040818aae81ad8558ebbe3c8973a16e7c250f/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=62a040818aae81ad8558ebbe3c8973a16e7c250f", "patch": "@@ -516,8 +516,10 @@ _Jv_NewArray (jint type, jint size)\n   return NULL;\t\t\t// Placate compiler.\n }\n \n-jobject\n-_Jv_NewMultiArray (jclass type, jint dimensions, jint *sizes)\n+// Allocate a possibly multi-dimensional array but don't check that\n+// any array length is <0.\n+static jobject\n+_Jv_NewMultiArrayUnchecked (jclass type, jint dimensions, jint *sizes)\n {\n   JvAssert (type->isArray());\n   jclass element_type = type->getComponentType();\n@@ -533,13 +535,23 @@ _Jv_NewMultiArray (jclass type, jint dimensions, jint *sizes)\n       JvAssert (element_type->isArray());\n       jobject *contents = elements ((jobjectArray) result);\n       for (int i = 0; i < sizes[0]; ++i)\n-\tcontents[i] = _Jv_NewMultiArray (element_type, dimensions - 1,\n-\t\t\t\t\t sizes + 1);\n+\tcontents[i] = _Jv_NewMultiArrayUnchecked (element_type, dimensions - 1,\n+\t\t\t\t\t\t  sizes + 1);\n     }\n \n   return result;\n }\n \n+jobject\n+_Jv_NewMultiArray (jclass type, jint dimensions, jint *sizes)\n+{\n+  for (int i = 0; i < dimensions; ++i)\n+    if (sizes[i] < 0)\n+      throw new java::lang::NegativeArraySizeException;\n+\n+  return _Jv_NewMultiArrayUnchecked (type, dimensions, sizes);\n+}\n+\n jobject\n _Jv_NewMultiArray (jclass array_type, jint dimensions, ...)\n {\n@@ -549,11 +561,13 @@ _Jv_NewMultiArray (jclass array_type, jint dimensions, ...)\n   for (int i = 0; i < dimensions; ++i)\n     {\n       jint size = va_arg (args, jint);\n+      if (size < 0)\n+\tthrow new java::lang::NegativeArraySizeException;\n       sizes[i] = size;\n     }\n   va_end (args);\n \n-  return _Jv_NewMultiArray (array_type, dimensions, sizes);\n+  return _Jv_NewMultiArrayUnchecked (array_type, dimensions, sizes);\n }\n \n \f"}]}