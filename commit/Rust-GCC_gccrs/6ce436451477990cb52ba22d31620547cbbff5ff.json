{"sha": "6ce436451477990cb52ba22d31620547cbbff5ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNlNDM2NDUxNDc3OTkwY2I1MmJhMjJkMzE2MjA1NDdjYmJmZjVmZg==", "commit": {"author": {"name": "Renlin Li", "email": "renlin.li@arm.com", "date": "2015-08-24T14:59:58Z"}, "committer": {"name": "Renlin Li", "email": "renlin@gcc.gnu.org", "date": "2015-08-24T14:59:58Z"}, "message": "[PATCH][ARM]Tighten the conditions for arm_movw, arm_movt.\n\ngcc/\n\n2015-08-24  Renlin Li  <renlin.li@arm.com>\n\n\t* config/arm/arm-protos.h (arm_valid_symbolic_address_p): Declare.\n\t* config/arm/arm.c (arm_valid_symbolic_address_p): Define.\n\t* config/arm/arm.md (arm_movt): Use arm_valid_symbolic_address_p.\n\t* config/arm/constraints.md (\"j\"): Add check for high code.\n\nFrom-SVN: r227129", "tree": {"sha": "2191874de4bf18d207205043b5856b67c3009e08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2191874de4bf18d207205043b5856b67c3009e08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ce436451477990cb52ba22d31620547cbbff5ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ce436451477990cb52ba22d31620547cbbff5ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ce436451477990cb52ba22d31620547cbbff5ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ce436451477990cb52ba22d31620547cbbff5ff/comments", "author": null, "committer": null, "parents": [{"sha": "55466f20d76b4c619ae777f40d06f83e23dd5170", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55466f20d76b4c619ae777f40d06f83e23dd5170", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55466f20d76b4c619ae777f40d06f83e23dd5170"}], "stats": {"total": 45, "additions": 43, "deletions": 2}, "files": [{"sha": "33c91dca02379f85539cc0e8f8da679027e6b723", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ce436451477990cb52ba22d31620547cbbff5ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ce436451477990cb52ba22d31620547cbbff5ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ce436451477990cb52ba22d31620547cbbff5ff", "patch": "@@ -1,3 +1,10 @@\n+2015-08-24  Renlin Li  <renlin.li@arm.com>\n+\n+\t* config/arm/arm-protos.h (arm_valid_symbolic_address_p): Declare.\n+\t* config/arm/arm.c (arm_valid_symbolic_address_p): Define.\n+\t* config/arm/arm.md (arm_movt): Use arm_valid_symbolic_address_p.\n+\t* config/arm/constraints.md (\"j\"): Add check for high code.\n+\n 2015-08-24  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/65468"}, {"sha": "ff168bf2c5fa8e583cad6752615c0e17f3997617", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ce436451477990cb52ba22d31620547cbbff5ff/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ce436451477990cb52ba22d31620547cbbff5ff/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=6ce436451477990cb52ba22d31620547cbbff5ff", "patch": "@@ -319,6 +319,7 @@ extern int vfp3_const_double_for_bits (rtx);\n \n extern void arm_emit_coreregs_64bit_shift (enum rtx_code, rtx, rtx, rtx, rtx,\n \t\t\t\t\t   rtx);\n+extern bool arm_valid_symbolic_address_p (rtx);\n extern bool arm_validize_comparison (rtx *, rtx *, rtx *);\n #endif /* RTX_CODE */\n "}, {"sha": "7cc4d93476157309cf772bba536332d8dc71c00f", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ce436451477990cb52ba22d31620547cbbff5ff/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ce436451477990cb52ba22d31620547cbbff5ff/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=6ce436451477990cb52ba22d31620547cbbff5ff", "patch": "@@ -28664,6 +28664,38 @@ arm_emit_coreregs_64bit_shift (enum rtx_code code, rtx out, rtx in,\n   #undef BRANCH\n }\n \n+/* Returns true if the pattern is a valid symbolic address, which is either a\n+   symbol_ref or (symbol_ref + addend).\n+\n+   According to the ARM ELF ABI, the initial addend of REL-type relocations\n+   processing MOVW and MOVT instructions is formed by interpreting the 16-bit\n+   literal field of the instruction as a 16-bit signed value in the range\n+   -32768 <= A < 32768.  */\n+\n+bool\n+arm_valid_symbolic_address_p (rtx addr)\n+{\n+  rtx xop0, xop1 = NULL_RTX;\n+  rtx tmp = addr;\n+\n+  if (GET_CODE (tmp) == SYMBOL_REF || GET_CODE (tmp) == LABEL_REF)\n+    return true;\n+\n+  /* (const (plus: symbol_ref const_int))  */\n+  if (GET_CODE (addr) == CONST)\n+    tmp = XEXP (addr, 0);\n+\n+  if (GET_CODE (tmp) == PLUS)\n+    {\n+      xop0 = XEXP (tmp, 0);\n+      xop1 = XEXP (tmp, 1);\n+\n+      if (GET_CODE (xop0) == SYMBOL_REF && CONST_INT_P (xop1))\n+\t  return IN_RANGE (INTVAL (xop1), -0x8000, 0x7fff);\n+    }\n+\n+  return false;\n+}\n \n /* Returns true if a valid comparison operation and makes\n    the operands in a form that is valid.  */"}, {"sha": "eefb7fa773fbb5f9c90884f9a2ad5ae1586f949f", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ce436451477990cb52ba22d31620547cbbff5ff/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ce436451477990cb52ba22d31620547cbbff5ff/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=6ce436451477990cb52ba22d31620547cbbff5ff", "patch": "@@ -5774,7 +5774,7 @@\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r\")\n \t(lo_sum:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n \t\t   (match_operand:SI 2 \"general_operand\"      \"i\")))]\n-  \"arm_arch_thumb2\"\n+  \"arm_arch_thumb2 && arm_valid_symbolic_address_p (operands[2])\"\n   \"movt%?\\t%0, #:upper16:%c2\"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")"}, {"sha": "f9e11e0111879ffbd7bf0af77bb84d1e0503291c", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ce436451477990cb52ba22d31620547cbbff5ff/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ce436451477990cb52ba22d31620547cbbff5ff/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=6ce436451477990cb52ba22d31620547cbbff5ff", "patch": "@@ -67,7 +67,8 @@\n (define_constraint \"j\"\n  \"A constant suitable for a MOVW instruction. (ARM/Thumb-2)\"\n  (and (match_test \"TARGET_32BIT && arm_arch_thumb2\")\n-      (ior (match_code \"high\")\n+      (ior (and (match_code \"high\")\n+\t\t(match_test \"arm_valid_symbolic_address_p (XEXP (op, 0))\"))\n \t   (and (match_code \"const_int\")\n                 (match_test \"(ival & 0xffff0000) == 0\")))))\n "}]}