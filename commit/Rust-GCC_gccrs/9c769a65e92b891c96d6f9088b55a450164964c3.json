{"sha": "9c769a65e92b891c96d6f9088b55a450164964c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM3NjlhNjVlOTJiODkxYzk2ZDZmOTA4OGI1NWE0NTAxNjQ5NjRjMw==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-07-06T16:21:55Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-07-06T16:21:55Z"}, "message": "[ARM] fix movdi expander to avoid illegal ldrd/strd\n\n        * config/arm/arm.md (movdi): Avoid odd-number ldrd/strd in ARM state.\n\nFrom-SVN: r225461", "tree": {"sha": "e89a49b58b3d30c98f501e1a6fc0fddf8c985b0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e89a49b58b3d30c98f501e1a6fc0fddf8c985b0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c769a65e92b891c96d6f9088b55a450164964c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c769a65e92b891c96d6f9088b55a450164964c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c769a65e92b891c96d6f9088b55a450164964c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c769a65e92b891c96d6f9088b55a450164964c3/comments", "author": null, "committer": null, "parents": [{"sha": "385e3f0c2b92341efb1654e14968a9996f4e9720", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/385e3f0c2b92341efb1654e14968a9996f4e9720", "html_url": "https://github.com/Rust-GCC/gccrs/commit/385e3f0c2b92341efb1654e14968a9996f4e9720"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "82755498c1768aff310652f4ac70a785db37359b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c769a65e92b891c96d6f9088b55a450164964c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c769a65e92b891c96d6f9088b55a450164964c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c769a65e92b891c96d6f9088b55a450164964c3", "patch": "@@ -1,3 +1,7 @@\n+2015-07-06  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/arm/arm.md (movdi): Avoid odd-number ldrd/strd in ARM state.\n+\n 2015-07-06  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/66772"}, {"sha": "be51c77dd8efc4149138218fd2a765121bd5b77d", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c769a65e92b891c96d6f9088b55a450164964c3/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c769a65e92b891c96d6f9088b55a450164964c3/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=9c769a65e92b891c96d6f9088b55a450164964c3", "patch": "@@ -5481,6 +5481,42 @@\n       if (!REG_P (operands[0]))\n \toperands[1] = force_reg (DImode, operands[1]);\n     }\n+  if (REG_P (operands[0]) && REGNO (operands[0]) < FIRST_VIRTUAL_REGISTER\n+      && !HARD_REGNO_MODE_OK (REGNO (operands[0]), DImode))\n+    {\n+      /* Avoid LDRD's into an odd-numbered register pair in ARM state\n+\t when expanding function calls.  */\n+      gcc_assert (can_create_pseudo_p ());\n+      if (MEM_P (operands[1]) && MEM_VOLATILE_P (operands[1]))\n+\t{\n+\t  /* Perform load into legal reg pair first, then move.  */\n+\t  rtx reg = gen_reg_rtx (DImode);\n+\t  emit_insn (gen_movdi (reg, operands[1]));\n+\t  operands[1] = reg;\n+\t}\n+      emit_move_insn (gen_lowpart (SImode, operands[0]),\n+\t\t      gen_lowpart (SImode, operands[1]));\n+      emit_move_insn (gen_highpart (SImode, operands[0]),\n+\t\t      gen_highpart (SImode, operands[1]));\n+      DONE;\n+    }\n+  else if (REG_P (operands[1]) && REGNO (operands[1]) < FIRST_VIRTUAL_REGISTER\n+\t   && !HARD_REGNO_MODE_OK (REGNO (operands[1]), DImode))\n+    {\n+      /* Avoid STRD's from an odd-numbered register pair in ARM state\n+\t when expanding function prologue.  */\n+      gcc_assert (can_create_pseudo_p ());\n+      rtx split_dest = (MEM_P (operands[0]) && MEM_VOLATILE_P (operands[0]))\n+\t\t       ? gen_reg_rtx (DImode)\n+\t\t       : operands[0];\n+      emit_move_insn (gen_lowpart (SImode, split_dest),\n+\t\t      gen_lowpart (SImode, operands[1]));\n+      emit_move_insn (gen_highpart (SImode, split_dest),\n+\t\t      gen_highpart (SImode, operands[1]));\n+      if (split_dest != operands[0])\n+\temit_insn (gen_movdi (operands[0], split_dest));\n+      DONE;\n+    }\n   \"\n )\n "}]}