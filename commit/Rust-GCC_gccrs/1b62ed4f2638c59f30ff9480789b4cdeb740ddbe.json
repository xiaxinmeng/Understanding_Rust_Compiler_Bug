{"sha": "1b62ed4f2638c59f30ff9480789b4cdeb740ddbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI2MmVkNGYyNjM4YzU5ZjMwZmY5NDgwNzg5YjRjZGViNzQwZGRiZQ==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2016-08-05T16:08:24Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2016-08-05T16:08:24Z"}, "message": "[AArch64] Handle HFAs of float16 types properly\n\nFix PR Target/72819.\n\ngcc/\n\n\tPR Target/72819\n\t* config/aarch64/aarch64.h (aarch64_fp16_type_node): Declare.\n\t(aarch64_fp16_ptr_type_node): Likewise.\n\t* config/aarch64/aarch64-simd-builtins.c\n\t(aarch64_fp16_ptr_type_node): Define.\n\t(aarch64_init_fp16_types): New, refactored out of...\n\t(aarch64_init_builtins): ...here, update to call\n\taarch64_init_fp16_types.\n\t* config/aarch64/aarch64.c (aarch64_gimplify_va_arg_expr): Handle\n\tHFmode.\n\t(aapcs_vfp_sub_candidate): Likewise.\n\ngcc/testsuite/\n\n\tPR Target/72819\n\t* gcc.target/aarch64/aapcs64/abitest-common.h: Define half-precision\n\tregisters.\n\t* gcc.target/aarch64/aapcs64/abitest.S (dumpregs): Add assembly for\n\tsaving the half-precision registers.\n\t* gcc.target/aarch64/aapcs64/func-ret-1.c: Test that an __fp16\n\tvalue is returned in h0.\n\t* gcc.target/aarch64/aapcs64/test_2.c: Check that __FP16 arguments\n\tare passed in FP/SIMD registers.\n\t* gcc.target/aarch64/aapcs64/test_27.c: New, test that __fp16 HFA\n\tpassing works corrcetly.\n\t* gcc.target/aarch64/aapcs64/type-def.h (hfa_f16x1_t): New.\n\t(hfa_f16x2_t): Likewise.\n\t(hfa_f16x3_t): Likewise.\n\t* gcc.target/aarch64/aapcs64/va_arg-1.c: Check that __fp16 values\n\tare promoted to double and passed in a double register.\n\t* gcc.target/aarch64/aapcs64/va_arg-2.c: Check that __fp16 values\n\tare promoted to double and stacked.\n\t* gcc.target/aarch64/aapcs64/va_arg-4.c: Check stacking of HFA of\n\t__fp16 data types.\n\t* gcc.target/aarch64/aapcs64/va_arg-5.c: Likewise.\n\t* gcc.target/aarch64/aapcs64/va_arg-16.c: New, check HFAs of\n\t__fp16 first get passed in FP/SIMD registers, then stacked.\n\nFrom-SVN: r239173", "tree": {"sha": "2c24bacdc5d05c67a303b1d38c65b5b037488e77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c24bacdc5d05c67a303b1d38c65b5b037488e77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a0b1bf2181019d813855fe3eb832a6c907b45d5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0b1bf2181019d813855fe3eb832a6c907b45d5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0b1bf2181019d813855fe3eb832a6c907b45d5c"}], "stats": {"total": 235, "additions": 209, "deletions": 26}, "files": [{"sha": "1925a05d0e49821aed96fa54f194d8b3b77bfa66", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b62ed4f2638c59f30ff9480789b4cdeb740ddbe", "patch": "@@ -1,3 +1,17 @@\n+2016-08-05  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\tPR Target/72819\n+\t* config/aarch64/aarch64.h (aarch64_fp16_type_node): Declare.\n+\t(aarch64_fp16_ptr_type_node): Likewise.\n+\t* config/aarch64/aarch64-simd-builtins.c\n+\t(aarch64_fp16_ptr_type_node): Define.\n+\t(aarch64_init_fp16_types): New, refactored out of...\n+\t(aarch64_init_builtins): ...here, update to call\n+\taarch64_init_fp16_types.\n+\t* config/aarch64/aarch64.c (aarch64_gimplify_va_arg_expr): Handle\n+\tHFmode.\n+\t(aapcs_vfp_sub_candidate): Likewise.\n+\n 2016-08-05  Martin Liska  <mliska@suse.cz>\n \n \t    Joshua Cranmer  <Pidgeot18@gmail.com>"}, {"sha": "1de325a0fc3dc174f16cb0fa420ca1288469a2d4", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=1b62ed4f2638c59f30ff9480789b4cdeb740ddbe", "patch": "@@ -443,13 +443,15 @@ static struct aarch64_simd_type_info aarch64_simd_types [] = {\n };\n #undef ENTRY\n \n-/* This type is not SIMD-specific; it is the user-visible __fp16.  */\n-static tree aarch64_fp16_type_node = NULL_TREE;\n-\n static tree aarch64_simd_intOI_type_node = NULL_TREE;\n static tree aarch64_simd_intCI_type_node = NULL_TREE;\n static tree aarch64_simd_intXI_type_node = NULL_TREE;\n \n+/* The user-visible __fp16 type, and a pointer to that type.  Used\n+   across the back-end.  */\n+tree aarch64_fp16_type_node = NULL_TREE;\n+tree aarch64_fp16_ptr_type_node = NULL_TREE;\n+\n static const char *\n aarch64_mangle_builtin_scalar_type (const_tree type)\n {\n@@ -883,6 +885,21 @@ aarch64_init_builtin_rsqrt (void)\n   }\n }\n \n+/* Initialize the backend types that support the user-visible __fp16\n+   type, also initialize a pointer to that type, to be used when\n+   forming HFAs.  */\n+\n+static void\n+aarch64_init_fp16_types (void)\n+{\n+  aarch64_fp16_type_node = make_node (REAL_TYPE);\n+  TYPE_PRECISION (aarch64_fp16_type_node) = 16;\n+  layout_type (aarch64_fp16_type_node);\n+\n+  (*lang_hooks.types.register_builtin_type) (aarch64_fp16_type_node, \"__fp16\");\n+  aarch64_fp16_ptr_type_node = build_pointer_type (aarch64_fp16_type_node);\n+}\n+\n void\n aarch64_init_builtins (void)\n {\n@@ -904,11 +921,7 @@ aarch64_init_builtins (void)\n     = add_builtin_function (\"__builtin_aarch64_set_fpsr\", ftype_set_fpr,\n \t\t\t    AARCH64_BUILTIN_SET_FPSR, BUILT_IN_MD, NULL, NULL_TREE);\n \n-  aarch64_fp16_type_node = make_node (REAL_TYPE);\n-  TYPE_PRECISION (aarch64_fp16_type_node) = 16;\n-  layout_type (aarch64_fp16_type_node);\n-\n-  (*lang_hooks.types.register_builtin_type) (aarch64_fp16_type_node, \"__fp16\");\n+  aarch64_init_fp16_types ();\n \n   if (TARGET_SIMD)\n     aarch64_init_simd_builtins ();"}, {"sha": "3e663eb5f13a7909564d085b73ae55685eea4bea", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=1b62ed4f2638c59f30ff9480789b4cdeb740ddbe", "patch": "@@ -9881,15 +9881,10 @@ aarch64_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n \t  field_t = long_double_type_node;\n \t  field_ptr_t = long_double_ptr_type_node;\n \t  break;\n-/* The half precision and quad precision are not fully supported yet.  Enable\n-   the following code after the support is complete.  Need to find the correct\n-   type node for __fp16 *.  */\n-#if 0\n \tcase HFmode:\n-\t  field_t = float_type_node;\n-\t  field_ptr_t = float_ptr_type_node;\n+\t  field_t = aarch64_fp16_type_node;\n+\t  field_ptr_t = aarch64_fp16_ptr_type_node;\n \t  break;\n-#endif\n \tcase V2SImode:\n \tcase V4SImode:\n \t    {\n@@ -10051,7 +10046,8 @@ aapcs_vfp_sub_candidate (const_tree type, machine_mode *modep)\n     {\n     case REAL_TYPE:\n       mode = TYPE_MODE (type);\n-      if (mode != DFmode && mode != SFmode && mode != TFmode)\n+      if (mode != DFmode && mode != SFmode\n+\t  && mode != TFmode && mode != HFmode)\n \treturn -1;\n \n       if (*modep == VOIDmode)\n@@ -10064,7 +10060,8 @@ aapcs_vfp_sub_candidate (const_tree type, machine_mode *modep)\n \n     case COMPLEX_TYPE:\n       mode = TYPE_MODE (TREE_TYPE (type));\n-      if (mode != DFmode && mode != SFmode && mode != TFmode)\n+      if (mode != DFmode && mode != SFmode\n+\t  && mode != TFmode && mode != HFmode)\n \treturn -1;\n \n       if (*modep == VOIDmode)"}, {"sha": "19caf9f2979e30671720823829464300b5349273", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=1b62ed4f2638c59f30ff9480789b4cdeb740ddbe", "patch": "@@ -944,4 +944,9 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n \n #define ASM_OUTPUT_POOL_EPILOGUE  aarch64_asm_output_pool_epilogue\n \n+/* This type is the user-visible __fp16, and a pointer to that type.  We\n+   need it in many places in the backend.  Defined in aarch64-builtins.c.  */\n+extern tree aarch64_fp16_type_node;\n+extern tree aarch64_fp16_ptr_type_node;\n+\n #endif /* GCC_AARCH64_H */"}, {"sha": "c133af963eaf332a2e083253447bf10268c0e4d8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1b62ed4f2638c59f30ff9480789b4cdeb740ddbe", "patch": "@@ -1,3 +1,29 @@\n+2016-08-05  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\tPR Target/72819\n+\t* gcc.target/aarch64/aapcs64/abitest-common.h: Define half-precision\n+\tregisters.\n+\t* gcc.target/aarch64/aapcs64/abitest.S (dumpregs): Add assembly for\n+\tsaving the half-precision registers.\n+\t* gcc.target/aarch64/aapcs64/func-ret-1.c: Test that an __fp16\n+\tvalue is returned in h0.\n+\t* gcc.target/aarch64/aapcs64/test_2.c: Check that __FP16 arguments\n+\tare passed in FP/SIMD registers.\n+\t* gcc.target/aarch64/aapcs64/test_27.c: New, test that __fp16 HFA\n+\tpassing works corrcetly.\n+\t* gcc.target/aarch64/aapcs64/type-def.h (hfa_f16x1_t): New.\n+\t(hfa_f16x2_t): Likewise.\n+\t(hfa_f16x3_t): Likewise.\n+\t* gcc.target/aarch64/aapcs64/va_arg-1.c: Check that __fp16 values\n+\tare promoted to double and passed in a double register.\n+\t* gcc.target/aarch64/aapcs64/va_arg-2.c: Check that __fp16 values\n+\tare promoted to double and stacked.\n+\t* gcc.target/aarch64/aapcs64/va_arg-4.c: Check stacking of HFA of\n+\t__fp16 data types.\n+\t* gcc.target/aarch64/aapcs64/va_arg-5.c: Likewise.\n+\t* gcc.target/aarch64/aapcs64/va_arg-16.c: New, check HFAs of\n+\t__fp16 first get passed in FP/SIMD registers, then stacked.\n+\n 2016-08-05  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/68724"}, {"sha": "138de7321e922e6a76632e9b35b2eaff46157ffb", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/abitest-common.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest-common.h?ref=1b62ed4f2638c59f30ff9480789b4cdeb740ddbe", "patch": "@@ -57,7 +57,17 @@\n #define X8     320\n #define X9     328\n \n-#define STACK  336\n+#define H0\t336\n+#define H1\t338\n+#define H2\t340\n+#define H3\t342\n+#define H4\t344\n+#define H5\t346\n+#define H6\t348\n+#define H7\t350\n+\n+\n+#define STACK  352\n \n /* The type of test.  'myfunc' in abitest.S needs to know which kind of\n    test it is running to decide what to do at the runtime.  Keep the"}, {"sha": "893e68cb994da24f32cbde0f6b22edae1acecf3b", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/abitest.S", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest.S?ref=1b62ed4f2638c59f30ff9480789b4cdeb740ddbe", "patch": "@@ -13,7 +13,12 @@ dumpregs:\n myfunc:\n       mov\tx16, sp\n       mov\tx17, sp\n-      sub\tsp,  sp, 352 // 336 for registers and 16 for old sp and lr\n+      sub\tsp,  sp, 368 // 352 for registers and 16 for old sp and lr\n+\n+      sub\tx17, x17, 8\n+      st4\t{ v4.h, v5.h, v6.h, v7.h }[0], [x17] //344\n+      sub\tx17, x17, 8\n+      st4\t{ v0.h, v1.h, v2.h, v3.h }[0], [x17] //336\n \n       stp\tx8, x9, [x17, #-16]! //320\n "}, {"sha": "29a1ca6d45b1ff3a69281be377858e093bf04ae8", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/func-ret-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ffunc-ret-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ffunc-ret-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ffunc-ret-1.c?ref=1b62ed4f2638c59f30ff9480789b4cdeb740ddbe", "patch": "@@ -44,4 +44,5 @@ FUNC_VAL_CHECK (12,         vf2_t,        vf2, D0, f32in64)\n FUNC_VAL_CHECK (13,         vi4_t,        vi4, Q0, i32in128)\n FUNC_VAL_CHECK (14,         int *,    int_ptr, X0, flat)\n FUNC_VAL_CHECK (15,         vlf1_t,    vlf1, Q0, flat)\n+FUNC_VAL_CHECK (16,         __fp16,    0xabcd, H0, flat)\n #endif"}, {"sha": "ce7c60a8d7b58bbb764bf205829a994a53632e3d", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_2.c?ref=1b62ed4f2638c59f30ff9480789b4cdeb740ddbe", "patch": "@@ -12,5 +12,6 @@\n   ARG(double, 4.0, D1)\n   ARG(float, 2.0f, S2)\n   ARG(double, 5.0, D3)\n+  ARG(__fp16, 8.0f, H4)\n   LAST_ARG(int, 3, W0)\n #endif"}, {"sha": "7bc79f5fcafb77865c93371b32e32c3130f4a722", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_27.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_27.c?ref=1b62ed4f2638c59f30ff9480789b4cdeb740ddbe", "patch": "@@ -0,0 +1,46 @@\n+/* Test AAPCS64 layout\n+\n+   Test named homogeneous floating-point aggregates of __fp16 data,\n+   which should be passed in SIMD/FP registers or via the stack.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_27.c\"\n+\n+struct x0\n+{\n+  __fp16 v[1];\n+} f16x1;\n+\n+struct x1\n+{\n+  __fp16 v[2];\n+} f16x2;\n+\n+struct x2\n+{\n+  __fp16 v[3];\n+} f16x3;\n+\n+#define HAS_DATA_INIT_FUNC\n+void init_data ()\n+{\n+  f16x1.v[0] = 2.0f;\n+  f16x2.v[0] = 4.0f;\n+  f16x2.v[1] = 8.0f;\n+  f16x3.v[0] = 16.0f;\n+  f16x3.v[1] = 32.0f;\n+  f16x3.v[2] = 64.0f;\n+}\n+\n+#include \"abitest.h\"\n+#else\n+ARG (struct x0, f16x1, H0)\n+ARG (struct x1, f16x2, H1)\n+ARG (struct x2, f16x3, H3)\n+ARG (struct x1, f16x2, H6)\n+ARG (struct x0, f16x1, STACK)\n+ARG (int, 0xdeadbeef, W0)\n+LAST_ARG (double, 456.789, STACK+8)\n+#endif"}, {"sha": "ca1fa5811ff0ee58a9decb70e9e66cc26be80ba7", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/type-def.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftype-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftype-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftype-def.h?ref=1b62ed4f2638c59f30ff9480789b4cdeb740ddbe", "patch": "@@ -44,6 +44,24 @@ struct hfa_fx3_t\n   float c;\n };\n \n+struct hfa_f16x1_t\n+{\n+  __fp16 a;\n+};\n+\n+struct hfa_f16x2_t\n+{\n+  __fp16 a;\n+  __fp16 b;\n+};\n+\n+struct hfa_f16x3_t\n+{\n+  __fp16 a;\n+  __fp16 b;\n+  __fp16 c;\n+};\n+\n struct hfa_dx2_t\n {\n   double a;"}, {"sha": "5b9e0576dcda973d27ca2999356b8326598ceccd", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg-1.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-1.c?ref=1b62ed4f2638c59f30ff9480789b4cdeb740ddbe", "patch": "@@ -19,6 +19,8 @@ signed short ss = 0xcba9;\n signed int ss_promoted = 0xffffcba9;\n float fp = 65432.12345f;\n double fp_promoted = (double)65432.12345f;\n+__fp16 fp16 = 2.0f;\n+__fp16 fp16_promoted = (double)2.0f;\n \n #define HAS_DATA_INIT_FUNC\n void init_data ()\n@@ -46,9 +48,13 @@ void init_data ()\n   ANON         (    long double   , 98765432123456789.987654321L,      Q2,      12)\n   ANON         (             vf2_t, vf2   ,                            D3,      13)\n   ANON         (             vi4_t, vi4   ,                            Q4,      14)\n+  /* 7.2: For unprototyped (i.e. pre- ANSI or K&R C) and variadic functions,\n+     in addition to the normal conversions and promotions, arguments of\n+     type __fp16 are converted to type double.  */\n+  ANON_PROMOTED(            __fp16, fp16  ,     double, fp16_promoted, D5,      15)\n #ifndef __AAPCS64_BIG_ENDIAN__\n-  LAST_ANON    (         int      , 0xeeee,                            STACK+32,15)\n+  LAST_ANON    (         int      , 0xeeee,                            STACK+32,16)\n #else\n-  LAST_ANON    (         int      , 0xeeee,                            STACK+36,15)\n+  LAST_ANON    (         int      , 0xeeee,                            STACK+36,16)\n #endif\n #endif"}, {"sha": "73f8f1c7bef86907c4d300e03e39b8386792233d", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg-16.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-16.c?ref=1b62ed4f2638c59f30ff9480789b4cdeb740ddbe", "patch": "@@ -0,0 +1,28 @@\n+/* Test AAPCS64 layout and __builtin_va_arg.\n+\n+   This test is focused particularly on __fp16 unnamed homogeneous\n+   floating-point aggregate types which should be passed in fp/simd\n+   registers until we run out of those, then the stack.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define AAPCS64_TEST_STDARG\n+#define TESTFILE \"va_arg-16.c\"\n+#include \"type-def.h\"\n+\n+struct hfa_f16x1_t hfa_f16x1 = {2.0f};\n+struct hfa_f16x2_t hfa_f16x2 = {4.0f, 8.0f};\n+struct hfa_f16x3_t hfa_f16x3 = {16.0f, 32.0f, 64.0f};\n+\n+#include \"abitest.h\"\n+#else\n+  ARG      (int, 1, W0, LAST_NAMED_ARG_ID)\n+  DOTS\n+  ANON     (struct hfa_f16x1_t, hfa_f16x1, H0     , 0)\n+  ANON     (struct hfa_f16x2_t, hfa_f16x2, H1     , 1)\n+  ANON     (struct hfa_f16x3_t, hfa_f16x3, H3     , 2)\n+  ANON     (struct hfa_f16x2_t, hfa_f16x2, H6     , 3)\n+  ANON     (struct hfa_f16x1_t, hfa_f16x1, STACK  , 4)\n+  LAST_ANON(double            , 1.0      , STACK+8, 5)\n+#endif"}, {"sha": "8f2f8811b611babd6e28e7fa65edd1db1b779ef9", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg-2.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-2.c?ref=1b62ed4f2638c59f30ff9480789b4cdeb740ddbe", "patch": "@@ -19,6 +19,8 @@ signed short ss = 0xcba9;\n signed int ss_promoted = 0xffffcba9;\n float fp = 65432.12345f;\n double fp_promoted = (double)65432.12345f;\n+__fp16 fp16 = 2.0f;\n+__fp16 fp16_promoted = (double)2.0f;\n \n #define HAS_DATA_INIT_FUNC\n void init_data ()\n@@ -64,9 +66,10 @@ void init_data ()\n   ANON         (    long double   , 98765432123456789.987654321L,      STACK+80, 20)\n   ANON         (             vf2_t, vf2   ,                            STACK+96, 21)\n   ANON         (             vi4_t, vi4   ,                            STACK+112,22)\n+  ANON_PROMOTED(         __fp16   , fp16  ,     double, fp16_promoted, STACK+128,23)\n #ifndef __AAPCS64_BIG_ENDIAN__\n-  LAST_ANON    (         int      , 0xeeee,                            STACK+128,23)\n+  LAST_ANON    (         int      , 0xeeee,                            STACK+136,24)\n #else\n-  LAST_ANON    (         int      , 0xeeee,                            STACK+132,23)\n+  LAST_ANON    (         int      , 0xeeee,                            STACK+140,24)\n #endif\n #endif"}, {"sha": "010ad8b3f671d5023a0e524d9552449f58125121", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg-4.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-4.c?ref=1b62ed4f2638c59f30ff9480789b4cdeb740ddbe", "patch": "@@ -29,6 +29,8 @@ struct non_hfa_ffvf2_t non_hfa_ffvf2;\n struct non_hfa_fffd_t non_hfa_fffd = {33.f, 34.f, 35.f, 36.0};\n union hfa_union_t hfa_union;\n union non_hfa_union_t non_hfa_union;\n+struct hfa_f16x2_t hfa_f16x2 = {2.0f, 4.0f};\n+struct hfa_f16x3_t hfa_f16x3 = {2.0f, 4.0f, 8.0f};\n \n #define HAS_DATA_INIT_FUNC\n void init_data ()\n@@ -89,9 +91,12 @@ void init_data ()\n   PTR_ANON (struct non_hfa_ffs_t  , non_hfa_ffs  , STACK+120, 18)\n   ANON     (struct non_hfa_ffs_2_t, non_hfa_ffs_2, STACK+128, 19)\n   ANON     (union  non_hfa_union_t, non_hfa_union, STACK+144, 20)\n+  /* HFA of __fp16 passed on stack, directed __fp16 test is va_arg-10.c.  */\n+  ANON     (struct hfa_f16x2_t    , hfa_f16x2    , STACK+152, 21)\n+  ANON     (struct hfa_f16x3_t    , hfa_f16x3    , STACK+160, 22)\n #ifndef __AAPCS64_BIG_ENDIAN__\n-  LAST_ANON(int                   , 2            , STACK+152, 30)\n+  LAST_ANON(int                   , 2            , STACK+168, 30)\n #else\n-  LAST_ANON(int                   , 2            , STACK+156, 30)\n+  LAST_ANON(int                   , 2            , STACK+172, 30)\n #endif\n #endif"}, {"sha": "e54f1f51fb66c227e7c88b099636a66f3d1efd6f", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg-5.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-5.c?ref=1b62ed4f2638c59f30ff9480789b4cdeb740ddbe", "patch": "@@ -17,6 +17,8 @@ struct hfa_dx4_t hfa_dx4 = {1234.123, 2345.234, 3456.345, 4567.456};\n struct hfa_ldx3_t hfa_ldx3 = {123456.7890, 234567.8901, 345678.9012};\n struct hfa_ffs_t hfa_ffs;\n union hfa_union_t hfa_union;\n+struct hfa_f16x2_t hfa_f16x2 = {2.0f, 4.0f};\n+struct hfa_f16x3_t hfa_f16x3 = {2.0f, 4.0f, 8.0f};\n \n #define HAS_DATA_INIT_FUNC\n void init_data ()\n@@ -43,5 +45,8 @@ void init_data ()\n   ANON     (struct hfa_fx1_t  , hfa_fx1  , STACK+24, 4)\n   ANON     (struct hfa_fx2_t  , hfa_fx2  , STACK+32, 5)\n   ANON     (struct hfa_dx2_t  , hfa_dx2  , STACK+40, 6)\n-  LAST_ANON(double            , 1.0      , STACK+56, 7)\n+  /* HFA of __fp16 passed on stack, directed __fp16 test is va_arg-10.c.  */\n+  ANON     (struct hfa_f16x2_t, hfa_f16x2, STACK+56, 7)\n+  ANON     (struct hfa_f16x3_t, hfa_f16x3, STACK+64, 8)\n+  LAST_ANON(double            , 1.0      , STACK+72, 9)\n #endif"}]}