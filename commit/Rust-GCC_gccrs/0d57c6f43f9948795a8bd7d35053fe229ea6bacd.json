{"sha": "0d57c6f43f9948795a8bd7d35053fe229ea6bacd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ1N2M2ZjQzZjk5NDg3OTVhOGJkN2QzNTA1M2ZlMjI5ZWE2YmFjZA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2010-09-10T11:01:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-10T11:01:37Z"}, "message": "repinfo.adb (List_Type_Info): List Small and Range for fixed-point types.\n\n2010-09-10  Robert Dewar  <dewar@adacore.com>\n\n\t* repinfo.adb (List_Type_Info): List Small and Range for fixed-point\n\ttypes.\n\t* sprint.adb (Write_Ureal_With_Col_Check_Sloc): Use square brackets\n\trather than parens for fixed constants.\n\t* sprint.ads: Use square brackets rather than parens for fixed constants\n\t* urealp.adb (UR_Write): Use square brackets rather than parens\n\t(UR_Write): Add Brackets argument\n\t(UR_Write): Add many more special cases to output literals\n\t* urealp.ads (UR_Write): Use square brackets rather than parens\n\t(UR_Write): Add Brackets argument\n\n2010-09-10  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch4.adb: Minor reformatting.\n\nFrom-SVN: r164165", "tree": {"sha": "d4e6705fbd48b04ad6efd2b4decba123ab98240d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4e6705fbd48b04ad6efd2b4decba123ab98240d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d57c6f43f9948795a8bd7d35053fe229ea6bacd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d57c6f43f9948795a8bd7d35053fe229ea6bacd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d57c6f43f9948795a8bd7d35053fe229ea6bacd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d57c6f43f9948795a8bd7d35053fe229ea6bacd/comments", "author": null, "committer": null, "parents": [{"sha": "88df93ce3baa8e070122533b31928d3876138488", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88df93ce3baa8e070122533b31928d3876138488", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88df93ce3baa8e070122533b31928d3876138488"}], "stats": {"total": 273, "additions": 210, "deletions": 63}, "files": [{"sha": "120893fcd1c0ca4dbcc82061140b649c188767da", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d57c6f43f9948795a8bd7d35053fe229ea6bacd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d57c6f43f9948795a8bd7d35053fe229ea6bacd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0d57c6f43f9948795a8bd7d35053fe229ea6bacd", "patch": "@@ -1,3 +1,20 @@\n+2010-09-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* repinfo.adb (List_Type_Info): List Small and Range for fixed-point\n+\ttypes.\n+\t* sprint.adb (Write_Ureal_With_Col_Check_Sloc): Use square brackets\n+\trather than parens for fixed constants.\n+\t* sprint.ads: Use square brackets rather than parens for fixed constants\n+\t* urealp.adb (UR_Write): Use square brackets rather than parens\n+\t(UR_Write): Add Brackets argument\n+\t(UR_Write): Add many more special cases to output literals\n+\t* urealp.ads (UR_Write): Use square brackets rather than parens\n+\t(UR_Write): Add Brackets argument\n+\n+2010-09-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch4.adb: Minor reformatting.\n+\n 2010-09-10  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc-interface/utils.c (create_index_type): Use build_range_type."}, {"sha": "3f3f488e1c7e79541d918a8b5f9fce39cd5105ea", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d57c6f43f9948795a8bd7d35053fe229ea6bacd/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d57c6f43f9948795a8bd7d35053fe229ea6bacd/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=0d57c6f43f9948795a8bd7d35053fe229ea6bacd", "patch": "@@ -1054,6 +1054,39 @@ package body Repinfo is\n       Write_Str (\"'Alignment use \");\n       Write_Val (Alignment (Ent));\n       Write_Line (\";\");\n+\n+      --  Special stuff for fixed-point\n+\n+      if Is_Fixed_Point_Type (Ent) then\n+\n+         --  Write small (always a static constant)\n+\n+         Write_Str (\"for \");\n+         List_Name (Ent);\n+         Write_Str (\"'Small use \");\n+         UR_Write (Small_Value (Ent));\n+         Write_Line (\";\");\n+\n+         --  Write range if static\n+\n+         declare\n+            R : constant Node_Id := Scalar_Range (Ent);\n+\n+         begin\n+            if Nkind (Low_Bound (R)) = N_Real_Literal\n+                 and then\n+               Nkind (High_Bound (R)) = N_Real_Literal\n+            then\n+               Write_Str (\"for \");\n+               List_Name (Ent);\n+               Write_Str (\"'Range use \");\n+               UR_Write (Realval (Low_Bound (R)));\n+               Write_Str (\" .. \");\n+               UR_Write (Realval (High_Bound (R)));\n+               Write_Line (\";\");\n+            end if;\n+         end;\n+      end if;\n    end List_Type_Info;\n \n    ----------------------\n@@ -1087,8 +1120,8 @@ package body Repinfo is\n       --  Internal recursive routine to evaluate tree\n \n       function W (Val : Uint) return Word;\n-      --  Convert Val to Word, assuming Val is always in the Int range. This is\n-      --  a helper function for the evaluation of bitwise expressions like\n+      --  Convert Val to Word, assuming Val is always in the Int range. This\n+      --  is a helper function for the evaluation of bitwise expressions like\n       --  Bit_And_Expr, for which there is no direct support in uintp. Uint\n       --  values out of the Int range are expected to be seen in such\n       --  expressions only with overflowing byte sizes around, introducing"}, {"sha": "6084b5fc5654160564dbcaafc872481e85551a89", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d57c6f43f9948795a8bd7d35053fe229ea6bacd/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d57c6f43f9948795a8bd7d35053fe229ea6bacd/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=0d57c6f43f9948795a8bd7d35053fe229ea6bacd", "patch": "@@ -269,7 +269,10 @@ package body Sem_Ch4 is\n    --  the call may be overloaded with both interpretations.\n \n    function Try_Object_Operation (N : Node_Id) return Boolean;\n-   --  Ada 2005 (AI-252): Support the object.operation notation\n+   --  Ada 2005 (AI-252): Support the object.operation notation. If node N\n+   --  is a call in this notation, it is transformed into a normal subprogram\n+   --  call where the prefix is a parameter, and True is returned. If node\n+   --  N is not of this form, it is unchanged, and False is returned.\n \n    procedure wpo (T : Entity_Id);\n    pragma Warnings (Off, wpo);\n@@ -3392,11 +3395,11 @@ package body Sem_Ch4 is\n \n       if Is_Access_Type (Prefix_Type) then\n \n-         --  A RACW object can never be used as prefix of a selected\n-         --  component since that means it is dereferenced without\n-         --  being a controlling operand of a dispatching operation\n-         --  (RM E.2.2(16/1)). Before reporting an error, we must check\n-         --  whether this is actually a dispatching call in prefix form.\n+         --  A RACW object can never be used as prefix of a selected component\n+         --  since that means it is dereferenced without being a controlling\n+         --  operand of a dispatching operation (RM E.2.2(16/1)). Before\n+         --  reporting an error, we must check whether this is actually a\n+         --  dispatching call in prefix form.\n \n          if Is_Remote_Access_To_Class_Wide_Type (Prefix_Type)\n            and then Comes_From_Source (N)\n@@ -3586,8 +3589,8 @@ package body Sem_Ch4 is\n                --  this case gigi generates all the checks and can find the\n                --  necessary bounds information.\n \n-               --  We also do not need an actual subtype for the case of\n-               --  a first, last, length, or range attribute applied to a\n+               --  We also do not need an actual subtype for the case of a\n+               --  first, last, length, or range attribute applied to a\n                --  non-packed array, since gigi can again get the bounds in\n                --  these cases (gigi cannot handle the packed case, since it\n                --  has the bounds of the packed array type, not the original\n@@ -6146,9 +6149,10 @@ package body Sem_Ch4 is\n                                                    N_Function_Call);\n       Loc            : constant Source_Ptr := Sloc (N);\n       Obj            : constant Node_Id    := Prefix (N);\n-      Subprog        : constant Node_Id    :=\n-                         Make_Identifier (Sloc (Selector_Name (N)),\n-                           Chars => Chars (Selector_Name (N)));\n+\n+      Subprog : constant Node_Id    :=\n+                  Make_Identifier (Sloc (Selector_Name (N)),\n+                    Chars => Chars (Selector_Name (N)));\n       --  Identifier on which possible interpretations will be collected\n \n       Report_Error : Boolean := False;"}, {"sha": "3c780b51cd4414ed6ee67958e911a3264c7dfb99", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d57c6f43f9948795a8bd7d35053fe229ea6bacd/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d57c6f43f9948795a8bd7d35053fe229ea6bacd/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=0d57c6f43f9948795a8bd7d35053fe229ea6bacd", "patch": "@@ -4364,12 +4364,10 @@ package body Sprint is\n    procedure Write_Ureal_With_Col_Check_Sloc (U : Ureal) is\n       D : constant Uint := Denominator (U);\n       N : constant Uint := Numerator (U);\n-\n    begin\n-      Col_Check\n-        (UI_Decimal_Digits_Hi (D) + UI_Decimal_Digits_Hi (N) + 4);\n+      Col_Check (UI_Decimal_Digits_Hi (D) + UI_Decimal_Digits_Hi (N) + 4);\n       Set_Debug_Sloc;\n-      UR_Write (U);\n+      UR_Write (U, Brackets => True);\n    end Write_Ureal_With_Col_Check_Sloc;\n \n end Sprint;"}, {"sha": "ffbe208862445c87adc8fb0c4e84205f950b7be7", "filename": "gcc/ada/sprint.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d57c6f43f9948795a8bd7d35053fe229ea6bacd/gcc%2Fada%2Fsprint.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d57c6f43f9948795a8bd7d35053fe229ea6bacd/gcc%2Fada%2Fsprint.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.ads?ref=0d57c6f43f9948795a8bd7d35053fe229ea6bacd", "patch": "@@ -76,7 +76,7 @@ package Sprint is\n    --    Push exception label                %push_xxx_exception_label (label)\n    --    Raise xxx error                     [xxx_error [when cond]]\n    --    Raise xxx error with msg            [xxx_error [when cond], \"msg\"]\n-   --    Rational literal                    See UR_Write for details\n+   --    Rational literal                    [expression]\n    --    Rem wi Treat_Fixed_As_Integer       x #rem y\n    --    Reference                           expression'reference\n    --    Shift nodes                         shift_name!(expr, count)"}, {"sha": "0f2f2749da023c74f3efd3129c3d559794e809f5", "filename": "gcc/ada/urealp.adb", "status": "modified", "additions": 128, "deletions": 36, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d57c6f43f9948795a8bd7d35053fe229ea6bacd/gcc%2Fada%2Furealp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d57c6f43f9948795a8bd7d35053fe229ea6bacd/gcc%2Fada%2Furealp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Furealp.adb?ref=0d57c6f43f9948795a8bd7d35053fe229ea6bacd", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009  Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1307,28 +1307,108 @@ package body Urealp is\n    -- UR_Write --\n    --------------\n \n-   procedure UR_Write (Real : Ureal) is\n+   procedure UR_Write (Real : Ureal; Brackets : Boolean := False) is\n       Val : constant Ureal_Entry := Ureals.Table (Real);\n+      T   : Uint;\n \n    begin\n       --  If value is negative, we precede the constant by a minus sign\n-      --  and add an extra layer of parentheses on the outside since the\n-      --  minus sign is part of the value, not a negation operator.\n \n       if Val.Negative then\n-         Write_Str (\"(-\");\n+         Write_Char ('-');\n       end if;\n \n+      --  Zero is zero\n+\n+      if Val.Num = 0 then\n+         Write_Str (\"0.0\");\n+\n       --  Constants in base 10 can be written in normal Ada literal style\n \n-      if Val.Rbase = 10 then\n-         UI_Write (Val.Num / 10);\n-         Write_Char ('.');\n-         UI_Write (Val.Num mod 10);\n+      elsif Val.Rbase = 10 then\n \n-         if Val.Den /= 0 then\n+         --  Use fixed-point format for small scaling values\n+\n+         if Val.Den = 0 then\n+            UI_Write (Val.Num, Decimal);\n+            Write_Str (\".0\");\n+\n+         elsif Val.Den = 1 then\n+            UI_Write (Val.Num / 10, Decimal);\n+            Write_Char ('.');\n+            UI_Write (Val.Num mod 10, Decimal);\n+\n+         elsif Val.Den = 2 then\n+            UI_Write (Val.Num / 100, Decimal);\n+            Write_Char ('.');\n+            UI_Write (Val.Num mod 100 / 10, Decimal);\n+            UI_Write (Val.Num mod 10, Decimal);\n+\n+         elsif Val.Den = -1 then\n+            UI_Write (Val.Num, Decimal);\n+            Write_Str (\"0.0\");\n+\n+         elsif Val.Den = -2 then\n+            UI_Write (Val.Num, Decimal);\n+            Write_Str (\"00.0\");\n+\n+         --  Else use exponential format\n+\n+         else\n+            UI_Write (Val.Num / 10, Decimal);\n+            Write_Char ('.');\n+            UI_Write (Val.Num mod 10, Decimal);\n             Write_Char ('E');\n-            UI_Write (1 - Val.Den);\n+            UI_Write (1 - Val.Den, Decimal);\n+         end if;\n+\n+      --  If we have a constant in a base other than 10, and the denominator\n+      --  is zero, then the value is simply the numerator value, since we are\n+      --  dividing by base**0, which is 1.\n+\n+      elsif Val.Den = 0 then\n+         UI_Write (Val.Num, Decimal);\n+         Write_Str (\".0\");\n+\n+      --  Small powers of 2 get written in decimal fixed-point format\n+\n+      elsif Val.Rbase = 2\n+        and then Val.Den <= 3\n+        and then Val.Den >= -16\n+      then\n+         if Val.Den = 1 then\n+            T := Val.Num * (10/2);\n+            UI_Write (T / 10, Decimal);\n+            Write_Char ('.');\n+            UI_Write (T mod 10, Decimal);\n+\n+         elsif Val.Den = 2 then\n+            T := Val.Num * (100/4);\n+            UI_Write (T / 100, Decimal);\n+            Write_Char ('.');\n+            UI_Write (T mod 100 / 10, Decimal);\n+\n+            if T mod 10 /= 0 then\n+               UI_Write (T mod 10, Decimal);\n+            end if;\n+\n+         elsif Val.Den = 3 then\n+            T := Val.Num * (1000 / 8);\n+            UI_Write (T / 1000, Decimal);\n+            Write_Char ('.');\n+            UI_Write (T mod 1000 / 100, Decimal);\n+\n+            if T mod 100 /= 0 then\n+               UI_Write (T mod 100 / 10, Decimal);\n+\n+               if T mod 10 /= 0 then\n+                  UI_Write (T mod 10, Decimal);\n+               end if;\n+            end if;\n+\n+         else\n+            UI_Write (Val.Num * (Uint_2 ** (-Val.Den)), Decimal);\n+            Write_Str (\".0\");\n          end if;\n \n       --  Constants in a base other than 10 can still be easily written\n@@ -1343,48 +1423,60 @@ package body Urealp is\n       --  of the following forms, depending on the sign of the number\n       --  and the sign of the exponent (= minus denominator value)\n \n-      --    (numerator.0*base**exponent)\n-      --    (numerator.0*base**(-exponent))\n+      --    numerator.0*base**exponent\n+      --    numerator.0*base**-exponent\n+\n+      --  And of course an exponent of 0 can be omitted\n \n       elsif Val.Rbase /= 0 then\n-         Write_Char ('(');\n+         if Brackets then\n+            Write_Char ('[');\n+         end if;\n+\n          UI_Write (Val.Num, Decimal);\n-         Write_Str (\".0*\");\n-         Write_Int (Val.Rbase);\n-         Write_Str (\"**\");\n+         Write_Str (\".0\");\n \n-         if Val.Den <= 0 then\n-            UI_Write (-Val.Den, Decimal);\n+         if Val.Den /= 0 then\n+            Write_Char ('*');\n+            Write_Int (Val.Rbase);\n+            Write_Str (\"**\");\n \n-         else\n-            Write_Str (\"(-\");\n-            UI_Write (Val.Den, Decimal);\n-            Write_Char (')');\n+            if Val.Den <= 0 then\n+               UI_Write (-Val.Den, Decimal);\n+            else\n+               Write_Str (\"(-\");\n+               UI_Write (Val.Den, Decimal);\n+               Write_Char (')');\n+            end if;\n          end if;\n \n-         Write_Char (')');\n+         if Brackets then\n+            Write_Char (']');\n+         end if;\n \n-      --  Rational constants with a denominator of 1 can be written as\n-      --  a real literal for the numerator integer.\n+      --  Rationals where numerator is divisible by denominator can be output\n+      --  as literals after we do the division. This includes the common case\n+      --  where the denominator is 1.\n \n-      elsif Val.Den = 1 then\n-         UI_Write (Val.Num, Decimal);\n+      elsif Val.Num mod Val.Den = 0 then\n+         UI_Write (Val.Num / Val.Den, Decimal);\n          Write_Str (\".0\");\n \n-      --  Non-based (rational) constants are written in (num/den) style\n+      --  Other non-based (rational) constants are written in num/den style\n \n       else\n-         Write_Char ('(');\n+         if Brackets then\n+            Write_Char ('[');\n+         end if;\n+\n          UI_Write (Val.Num, Decimal);\n          Write_Str (\".0/\");\n          UI_Write (Val.Den, Decimal);\n-         Write_Str (\".0)\");\n-      end if;\n-\n-      --  Add trailing paren for negative values\n+         Write_Str (\".0\");\n \n-      if Val.Negative then\n-         Write_Char (')');\n+         if Brackets then\n+            Write_Char (']');\n+         end if;\n       end if;\n    end UR_Write;\n "}, {"sha": "ca90ac4a0db57508b361d6491ab74f697f8e14ed", "filename": "gcc/ada/urealp.ads", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d57c6f43f9948795a8bd7d35053fe229ea6bacd/gcc%2Fada%2Furealp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d57c6f43f9948795a8bd7d35053fe229ea6bacd/gcc%2Fada%2Furealp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Furealp.ads?ref=0d57c6f43f9948795a8bd7d35053fe229ea6bacd", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009  Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -264,14 +264,17 @@ package Urealp is\n    function UR_Is_Positive (Real : Ureal) return Boolean;\n    --  Test if real value is greater than zero\n \n-   procedure UR_Write (Real : Ureal);\n-   --  Writes value of Real to standard output. Used only for debugging and\n-   --  tree/source output. If the result is easily representable as a standard\n-   --  Ada literal, it will be given that way, but as a result of evaluation\n-   --  of static expressions, it is possible to generate constants (e.g. 1/13)\n-   --  which have no such representation. In such cases (and in cases where it\n-   --  is too much work to figure out the Ada literal), the string that is\n-   --  output is of the form [numerator/denominator].\n+   procedure UR_Write (Real : Ureal; Brackets : Boolean := False);\n+   --  Writes value of Real to standard output. Used for debugging and\n+   --  tree/source output, and also for -gnatR representation output. If the\n+   --  result is easily representable as a standard Ada literal, it will be\n+   --  given that way, but as a result of evaluation of static expressions, it\n+   --  is possible to generate constants (e.g. 1/13) which have no such\n+   --  representation. In such cases (and in cases where it is too much work to\n+   --  figure out the Ada literal), the string that is output is of the form\n+   --  of some expression such as integer/integer, or integer*integer**integer.\n+   --  In the case where an expression is output, if Brackets is set to True,\n+   --  the expression is surrounded by square brackets.\n \n    procedure pr (Real : Ureal);\n    pragma Export (Ada, pr);"}]}