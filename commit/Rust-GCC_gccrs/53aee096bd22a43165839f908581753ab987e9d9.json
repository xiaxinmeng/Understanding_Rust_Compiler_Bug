{"sha": "53aee096bd22a43165839f908581753ab987e9d9", "node_id": "C_kwDOANBUbNoAKDUzYWVlMDk2YmQyMmE0MzE2NTgzOWY5MDg1ODE3NTNhYjk4N2U5ZDk", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-07-25T11:29:31Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-07-27T13:30:09Z"}, "message": "hir: Add Item::ItemKind enumeration\n\nThis allows us to perform checks and dispatch when getting an HIR::Item*\nfrom Mappings::lookup_hir_item()", "tree": {"sha": "b2d7cf5d90794d168526987c4fa2f7bc173f7eb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2d7cf5d90794d168526987c4fa2f7bc173f7eb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53aee096bd22a43165839f908581753ab987e9d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53aee096bd22a43165839f908581753ab987e9d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53aee096bd22a43165839f908581753ab987e9d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53aee096bd22a43165839f908581753ab987e9d9/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d94d5b1ea23220d423fd40bd00cadb0e6ede751f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d94d5b1ea23220d423fd40bd00cadb0e6ede751f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d94d5b1ea23220d423fd40bd00cadb0e6ede751f"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "6156b2dacb39e0e81cde673840ad23bd81f2d623", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53aee096bd22a43165839f908581753ab987e9d9/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53aee096bd22a43165839f908581753ab987e9d9/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=53aee096bd22a43165839f908581753ab987e9d9", "patch": "@@ -723,6 +723,8 @@ class Module : public VisItem\n \n   Location get_locus () const override final { return locus; }\n \n+  ItemKind get_item_kind () const override { return ItemKind::Module; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */\n@@ -773,6 +775,8 @@ class ExternCrate : public VisItem\n \n   Location get_locus () const override final { return locus; }\n \n+  ItemKind get_item_kind () const override { return ItemKind::ExternCrate; }\n+\n   void accept_vis (HIRFullVisitor &vis) override;\n   void accept_vis (HIRStmtVisitor &vis) override;\n   void accept_vis (HIRVisItemVisitor &vis) override;\n@@ -1039,6 +1043,7 @@ class UseDeclaration : public VisItem\n   UseDeclaration &operator= (UseDeclaration &&other) = default;\n \n   Location get_locus () const override final { return locus; }\n+  ItemKind get_item_kind () const override { return ItemKind::UseDeclaration; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n   void accept_vis (HIRStmtVisitor &vis) override;\n@@ -1094,6 +1099,8 @@ class Function : public VisItem, public ImplItem\n     return ImplItem::ImplItemType::FUNCTION;\n   }\n \n+  ItemKind get_item_kind () const override { return ItemKind::Function; }\n+\n   // Mega-constructor with all possible fields\n   Function (Analysis::NodeMapping mappings, Identifier function_name,\n \t    FunctionQualifiers qualifiers,\n@@ -1329,6 +1336,8 @@ class TypeAlias : public VisItem, public ImplItem\n \n   Identifier get_new_type_name () const { return new_type_name; }\n \n+  ItemKind get_item_kind () const override { return ItemKind::TypeAlias; }\n+\n   Analysis::NodeMapping get_impl_mappings () const override\n   {\n     return get_mappings ();\n@@ -1373,6 +1382,7 @@ class Struct : public VisItem\n   bool has_where_clause () const { return !where_clause.is_empty (); }\n \n   Location get_locus () const override final { return locus; }\n+  ItemKind get_item_kind () const override { return ItemKind::Struct; }\n \n   std::vector<std::unique_ptr<GenericParam>> &get_generic_params ()\n   {\n@@ -1709,6 +1719,8 @@ class EnumItem : public Item\n \n   Identifier get_identifier () const { return variant_name; }\n \n+  ItemKind get_item_kind () const override { return ItemKind::EnumItem; }\n+\n protected:\n   EnumItem *clone_item_impl () const override { return new EnumItem (*this); }\n };\n@@ -1930,6 +1942,7 @@ class Enum : public VisItem\n   void accept_vis (HIRVisItemVisitor &vis) override;\n \n   Identifier get_identifier () const { return enum_name; }\n+  ItemKind get_item_kind () const override { return ItemKind::Enum; }\n \n   std::vector<std::unique_ptr<GenericParam>> &get_generic_params ()\n   {\n@@ -2037,6 +2050,8 @@ class Union : public VisItem\n \n   WhereClause &get_where_clause () { return where_clause; }\n \n+  ItemKind get_item_kind () const override { return ItemKind::Union; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */\n@@ -2111,6 +2126,8 @@ class ConstantItem : public VisItem, public ImplItem\n     return ImplItem::ImplItemType::CONSTANT;\n   }\n \n+  ItemKind get_item_kind () const override { return ItemKind::Constant; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */\n@@ -2188,6 +2205,8 @@ class StaticItem : public VisItem\n \n   Type *get_type () { return type.get (); }\n \n+  ItemKind get_item_kind () const override { return ItemKind::Static; }\n+\n protected:\n   StaticItem *clone_item_impl () const override\n   {\n@@ -2677,6 +2696,8 @@ class Trait : public VisItem\n     return type_param_bounds;\n   }\n \n+  ItemKind get_item_kind () const override { return ItemKind::Trait; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */\n@@ -2797,6 +2818,8 @@ class ImplBlock : public VisItem\n \n   WhereClause &get_where_clause () { return where_clause; }\n \n+  ItemKind get_item_kind () const override { return ItemKind::Impl; }\n+\n protected:\n   ImplBlock *clone_item_impl () const override { return new ImplBlock (*this); }\n };\n@@ -3149,6 +3172,8 @@ class ExternBlock : public VisItem\n     return extern_items;\n   }\n \n+  ItemKind get_item_kind () const override { return ItemKind::ExternBlock; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */"}, {"sha": "c2f6fef1383a577cc3a86d17e952e08bac891eec", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53aee096bd22a43165839f908581753ab987e9d9/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53aee096bd22a43165839f908581753ab987e9d9/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=53aee096bd22a43165839f908581753ab987e9d9", "patch": "@@ -175,6 +175,26 @@ class Item : public Stmt\n   // TODO: should outer attrs be defined here or in each derived class?\n \n public:\n+  enum class ItemKind\n+  {\n+    Static,\n+    Constant,\n+    TypeAlias,\n+    Function,\n+    UseDeclaration,\n+    ExternBlock,\n+    ExternCrate,\n+    Struct,\n+    Union,\n+    Enum,\n+    EnumItem, // FIXME: ARTHUR: Do we need that?\n+    Trait,\n+    Impl,\n+    Module,\n+  };\n+\n+  virtual ItemKind get_item_kind () const = 0;\n+\n   // Unique pointer custom clone function\n   std::unique_ptr<Item> clone_item () const\n   {"}]}