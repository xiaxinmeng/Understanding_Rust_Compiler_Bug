{"sha": "75b6a14c46e9572998f88ee211ae8e8323e0ce72", "node_id": "C_kwDOANBUbNoAKDc1YjZhMTRjNDZlOTU3Mjk5OGY4OGVlMjExYWU4ZTgzMjNlMGNlNzI", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-03-13T17:02:56Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-17T10:34:36Z"}, "message": "gccrs: Only infer when no generic arguments have been specified\n\nOn Paths such as: mem::size_of<T>() we always specified to infer the\ngenerics which is not always the case and can cause stay inference\nvariables.\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-hir-type-check-path.cc (TypeCheckExpr::visit): remove infer call\n\t(TypeCheckExpr::resolve_root_path): only infer when we need to\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/sizeof-stray-infer-var-bug.rs: New test.\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "d2bba9f14342253107d82966e92bde8238efcb74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2bba9f14342253107d82966e92bde8238efcb74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75b6a14c46e9572998f88ee211ae8e8323e0ce72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75b6a14c46e9572998f88ee211ae8e8323e0ce72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75b6a14c46e9572998f88ee211ae8e8323e0ce72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75b6a14c46e9572998f88ee211ae8e8323e0ce72/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dab27f737e1a2c5c071b7885de2fa73f70fccd63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dab27f737e1a2c5c071b7885de2fa73f70fccd63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dab27f737e1a2c5c071b7885de2fa73f70fccd63"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "cd0c670338645406f08ba8edede4fbe3f93e2fc7", "filename": "gcc/rust/typecheck/rust-hir-type-check-path.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75b6a14c46e9572998f88ee211ae8e8323e0ce72/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75b6a14c46e9572998f88ee211ae8e8323e0ce72/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc?ref=75b6a14c46e9572998f88ee211ae8e8323e0ce72", "patch": "@@ -151,11 +151,6 @@ TypeCheckExpr::visit (HIR::PathInExpression &expr)\n   if (tyseg->get_kind () == TyTy::TypeKind::ERROR)\n     return;\n \n-  if (tyseg->needs_generic_substitutions ())\n-    {\n-      tyseg = SubstMapper::InferSubst (tyseg, expr.get_locus ());\n-    }\n-\n   bool fully_resolved = offset == expr.get_segments ().size ();\n   if (fully_resolved)\n     {\n@@ -285,6 +280,10 @@ TypeCheckExpr::resolve_root_path (HIR::PathInExpression &expr, size_t *offset,\n \t  if (lookup->get_kind () == TyTy::TypeKind::ERROR)\n \t    return new TyTy::ErrorType (expr.get_mappings ().get_hirid ());\n \t}\n+      else if (lookup->needs_generic_substitutions ())\n+\t{\n+\t  lookup = SubstMapper::InferSubst (lookup, expr.get_locus ());\n+\t}\n \n       *root_resolved_node_id = ref_node_id;\n       *offset = *offset + 1;"}, {"sha": "310da661fca8223d03818203e6b1b88f3457fb18", "filename": "gcc/testsuite/rust/compile/sizeof-stray-infer-var-bug.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75b6a14c46e9572998f88ee211ae8e8323e0ce72/gcc%2Ftestsuite%2Frust%2Fcompile%2Fsizeof-stray-infer-var-bug.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75b6a14c46e9572998f88ee211ae8e8323e0ce72/gcc%2Ftestsuite%2Frust%2Fcompile%2Fsizeof-stray-infer-var-bug.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fsizeof-stray-infer-var-bug.rs?ref=75b6a14c46e9572998f88ee211ae8e8323e0ce72", "patch": "@@ -0,0 +1,14 @@\n+mod mem {\n+    extern \"rust-intrinsic\" {\n+        pub fn size_of<T>() -> usize;\n+    }\n+}\n+\n+mod ptr {\n+\n+    pub unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {\n+        let x = x as *mut T;\n+        let y = y as *mut T;\n+        let len = mem::size_of::<T>() * count;\n+    }\n+}"}]}