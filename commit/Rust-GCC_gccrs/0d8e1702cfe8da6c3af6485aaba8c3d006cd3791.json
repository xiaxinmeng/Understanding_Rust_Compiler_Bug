{"sha": "0d8e1702cfe8da6c3af6485aaba8c3d006cd3791", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ4ZTE3MDJjZmU4ZGE2YzNhZjY0ODVhYWJhOGMzZDAwNmNkMzc5MQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-10-27T18:30:55Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-10-27T18:30:55Z"}, "message": "[AArch64] Handle vector float modes properly in aarch64_output_simd_mov_immediate\n\n\t* config/aarch64/aarch64.c (aarch64_output_simd_mov_immediate):\n\tHandle floating point inner modes properly.\n\nFrom-SVN: r229454", "tree": {"sha": "f9da31709df6731bb4287085027287d1e4804521", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9da31709df6731bb4287085027287d1e4804521"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d8e1702cfe8da6c3af6485aaba8c3d006cd3791", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d8e1702cfe8da6c3af6485aaba8c3d006cd3791", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d8e1702cfe8da6c3af6485aaba8c3d006cd3791", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d8e1702cfe8da6c3af6485aaba8c3d006cd3791/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b7ddd3f14f3a5f3b9023b2b360c05c6426f37500", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7ddd3f14f3a5f3b9023b2b360c05c6426f37500", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7ddd3f14f3a5f3b9023b2b360c05c6426f37500"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "ac7bba496ae93562b7e8de108822577f864c53e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d8e1702cfe8da6c3af6485aaba8c3d006cd3791/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d8e1702cfe8da6c3af6485aaba8c3d006cd3791/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d8e1702cfe8da6c3af6485aaba8c3d006cd3791", "patch": "@@ -1,3 +1,8 @@\n+2015-10-27  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_output_simd_mov_immediate):\n+\tHandle floating point inner modes properly.\n+\n 2015-10-27  Alan Hayward  <alan.hayward@arm.com>\n \n \t* tree-vect-looop.c"}, {"sha": "5c8604ffa72799acf62ffd2075489cddceacda4a", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d8e1702cfe8da6c3af6485aaba8c3d006cd3791/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d8e1702cfe8da6c3af6485aaba8c3d006cd3791/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=0d8e1702cfe8da6c3af6485aaba8c3d006cd3791", "patch": "@@ -11450,9 +11450,11 @@ aarch64_output_simd_mov_immediate (rtx const_vector,\n   lane_count = width / info.element_width;\n \n   mode = GET_MODE_INNER (mode);\n-  if (mode == SFmode || mode == DFmode)\n+  if (GET_MODE_CLASS (mode) == MODE_FLOAT)\n     {\n       gcc_assert (info.shift == 0 && ! info.mvn);\n+      /* For FP zero change it to a CONST_INT 0 and use the integer SIMD\n+\t move immediate path.  */\n       if (aarch64_float_const_zero_rtx_p (info.value))\n         info.value = GEN_INT (0);\n       else\n@@ -11476,6 +11478,7 @@ aarch64_output_simd_mov_immediate (rtx const_vector,\n   mnemonic = info.mvn ? \"mvni\" : \"movi\";\n   shift_op = info.msl ? \"msl\" : \"lsl\";\n \n+  gcc_assert (CONST_INT_P (info.value));\n   if (lane_count == 1)\n     snprintf (templ, sizeof (templ), \"%s\\t%%d0, \" HOST_WIDE_INT_PRINT_HEX,\n \t      mnemonic, UINTVAL (info.value));"}]}