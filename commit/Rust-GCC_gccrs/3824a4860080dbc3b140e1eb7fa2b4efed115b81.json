{"sha": "3824a4860080dbc3b140e1eb7fa2b4efed115b81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgyNGE0ODYwMDgwZGJjM2IxNDBlMWViN2ZhMmI0ZWZlZDExNWI4MQ==", "commit": {"author": {"name": "Warren Levy", "email": "warrenl@redhat.com", "date": "2001-01-09T07:07:51Z"}, "committer": {"name": "Warren Levy", "email": "warrenl@gcc.gnu.org", "date": "2001-01-09T07:07:51Z"}, "message": "re PR libgcj/1411 (natTimeZone.cc should be removed)\n\n\tFix for PR libgcj/1411:\n\t* Makefile.am: Removed java/util/natTimeZone.cc.\n\t* Makefile.in: Rebuilt.\n\t* gnu/gcj/text/LocaleData_en_US.java (zoneStringsDefault): Added\n\tmissing localized timezone names.\n\t* java/lang/System.java (getDefaultTimeZoneId): New private method.\n\t* java/lang/natSystem.cc (getSystemTimeZone): New private method.\n\t(init_properties): Set user.timezone property.\n\t* java/text/DateFormatSymbols.java (zoneStringsDefault): Added\n\tdefault timezone names; removed non-standard ones.  Use standard\n\tID names per JCL.\n\t* java/util/Date.java (toGMTString): Removed zoneGMT variable.\n\t(UTC): Ditto.\n\t* java/util/TimeZone.java: Add standard ID names per JCL; removed\n\tnon-standard ones.\n\t(getDefaultTimeZoneId): Removed.\n\t(zoneGMT): Removed.\n\t(getDefaultTimeZoneId): Removed.\n\t* java/util/natTimeZone.cc: Removed.\n\nFrom-SVN: r38816", "tree": {"sha": "59c853c9c93930e645e808160cee16a1368a3fc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59c853c9c93930e645e808160cee16a1368a3fc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3824a4860080dbc3b140e1eb7fa2b4efed115b81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3824a4860080dbc3b140e1eb7fa2b4efed115b81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3824a4860080dbc3b140e1eb7fa2b4efed115b81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3824a4860080dbc3b140e1eb7fa2b4efed115b81/comments", "author": null, "committer": null, "parents": [{"sha": "61db460830bf37e7803f95472cead5cc3ba87da3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61db460830bf37e7803f95472cead5cc3ba87da3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61db460830bf37e7803f95472cead5cc3ba87da3"}], "stats": {"total": 388, "additions": 242, "deletions": 146}, "files": [{"sha": "22d78261ad2286964d2251272041d3668e947236", "filename": "libjava/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3824a4860080dbc3b140e1eb7fa2b4efed115b81/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3824a4860080dbc3b140e1eb7fa2b4efed115b81/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=3824a4860080dbc3b140e1eb7fa2b4efed115b81", "patch": "@@ -1,3 +1,25 @@\n+2001-01-08  Warren Levy  <warrenl@redhat.com>\n+\n+\tFix for PR libgcj/1411:\n+\t* Makefile.am: Removed java/util/natTimeZone.cc.\n+\t* Makefile.in: Rebuilt.\n+\t* gnu/gcj/text/LocaleData_en_US.java (zoneStringsDefault): Added\n+\tmissing localized timezone names.\n+\t* java/lang/System.java (getDefaultTimeZoneId): New private method.\n+\t* java/lang/natSystem.cc (getSystemTimeZone): New private method.\n+\t(init_properties): Set user.timezone property.\n+\t* java/text/DateFormatSymbols.java (zoneStringsDefault): Added\n+\tdefault timezone names; removed non-standard ones.  Use standard\n+\tID names per JCL.\n+\t* java/util/Date.java (toGMTString): Removed zoneGMT variable.\n+\t(UTC): Ditto.\n+\t* java/util/TimeZone.java: Add standard ID names per JCL; removed\n+\tnon-standard ones.\n+\t(getDefaultTimeZoneId): Removed.\n+\t(zoneGMT): Removed.\n+\t(getDefaultTimeZoneId): Removed.\n+\t* java/util/natTimeZone.cc: Removed.\n+\n 2001-01-08  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \t* java/lang/Class.h (_Jv_InitClass): Use __builtin_expect."}, {"sha": "53e3cabcc7f9440614587cce14032e474a5cb328", "filename": "libjava/Makefile.am", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3824a4860080dbc3b140e1eb7fa2b4efed115b81/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3824a4860080dbc3b140e1eb7fa2b4efed115b81/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=3824a4860080dbc3b140e1eb7fa2b4efed115b81", "patch": "@@ -1260,7 +1260,6 @@ java/net/natPlainDatagramSocketImpl.cc \\\n java/net/natPlainSocketImpl.cc \\\n java/text/natCollator.cc \\\n java/util/natGregorianCalendar.cc \\\n-java/util/natTimeZone.cc \\\n java/util/zip/natDeflater.cc \\\n java/util/zip/natInflater.cc\n "}, {"sha": "6dda807c2db560fcf55734cf3cab1efa1baf320c", "filename": "libjava/Makefile.in", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3824a4860080dbc3b140e1eb7fa2b4efed115b81/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3824a4860080dbc3b140e1eb7fa2b4efed115b81/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=3824a4860080dbc3b140e1eb7fa2b4efed115b81", "patch": "@@ -1020,7 +1020,6 @@ java/net/natPlainDatagramSocketImpl.cc \\\n java/net/natPlainSocketImpl.cc \\\n java/text/natCollator.cc \\\n java/util/natGregorianCalendar.cc \\\n-java/util/natTimeZone.cc \\\n java/util/zip/natDeflater.cc \\\n java/util/zip/natInflater.cc\n \n@@ -1172,8 +1171,8 @@ java/lang/reflect/natArray.lo java/lang/reflect/natConstructor.lo \\\n java/lang/reflect/natField.lo java/lang/reflect/natMethod.lo \\\n java/net/natInetAddress.lo java/net/natPlainDatagramSocketImpl.lo \\\n java/net/natPlainSocketImpl.lo java/text/natCollator.lo \\\n-java/util/natGregorianCalendar.lo java/util/natTimeZone.lo \\\n-java/util/zip/natDeflater.lo java/util/zip/natInflater.lo\n+java/util/natGregorianCalendar.lo java/util/zip/natDeflater.lo \\\n+java/util/zip/natInflater.lo\n libgcjx_la_OBJECTS =  gnu/gcj/xlib/natClip.lo \\\n gnu/gcj/xlib/natColormap.lo gnu/gcj/xlib/natDisplay.lo \\\n gnu/gcj/xlib/natDrawable.lo gnu/gcj/xlib/natFont.lo \\"}, {"sha": "eb5d4f14be164b87dcfbf826f9088794a783ced8", "filename": "libjava/gnu/gcj/text/LocaleData_en_US.java", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3824a4860080dbc3b140e1eb7fa2b4efed115b81/libjava%2Fgnu%2Fgcj%2Ftext%2FLocaleData_en_US.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3824a4860080dbc3b140e1eb7fa2b4efed115b81/libjava%2Fgnu%2Fgcj%2Ftext%2FLocaleData_en_US.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Ftext%2FLocaleData_en_US.java?ref=3824a4860080dbc3b140e1eb7fa2b4efed115b81", "patch": "@@ -21,6 +21,8 @@ public final class LocaleData_en_US extends ListResourceBundle\n {\n   // These are for DateFormatSymbols.\n   static String[][] zoneStringsDefault = {\n+    { \"GMT\", \"Greenwich Mean Time\", \"GMT\",\n+      /**/   \"Greenwich Mean Time\", \"GMT\", \"GMT\" },\n     { \"PST\", \"Pacific Standard Time\", \"PST\",\n       /**/   \"Pacific Daylight Time\", \"PDT\", \"San Francisco\" },\n     { \"MST\", \"Mountain Standard Time\", \"MST\",\n@@ -35,10 +37,18 @@ public final class LocaleData_en_US extends ListResourceBundle\n       /**/   \"Eastern Standard Time\", \"EST\", \"Indianapolis\" },\n     { \"PRT\", \"Atlantic Standard Time\", \"AST\",\n       /**/   \"Atlantic Daylight Time\", \"ADT\", \"Halifax\" },\n+    { \"CNT\", \"Newfoundland Standard Time\", \"NST\",\n+      /**/   \"Newfoundland Daylight Time\", \"NDT\", \"St. Johns\" },\n+    { \"ECT\", \"Central European Standard Time\", \"CET\",\n+      /**/   \"Central European Daylight Time\", \"CEST\", \"Paris\" },\n+    { \"CTT\", \"China Standard Time\", \"CST\",\n+      /**/   \"China Standard Time\", \"CST\", \"Shanghai\" },\n+    { \"JST\", \"Japan Standard Time\", \"JST\",\n+      /**/   \"Japan Standard Time\", \"JST\", \"Tokyo\" },\n     { \"HST\", \"Hawaii Standard Time\", \"HST\",\n-      /**/   \"Hawaii Daylight Time\", \"HDT\", \"Honolulu\" },\n-    { \"AST\", \"Alaska Standard Time\", \"AST\",\n-      /**/   \"Alaska Daylight Time\", \"ADT\", \"Anchorage\" }\n+      /**/   \"Hawaii Standard Time\", \"HST\", \"Honolulu\" },\n+    { \"AST\", \"Alaska Standard Time\", \"AKST\",\n+      /**/   \"Alaska Daylight Time\", \"AKDT\", \"Anchorage\" }\n   };\n \n   private static final Object[][] contents ="}, {"sha": "162bc1f21eb31fc56944f91e96a5001fbea2d7c9", "filename": "libjava/java/lang/System.java", "status": "modified", "additions": 79, "deletions": 1, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3824a4860080dbc3b140e1eb7fa2b4efed115b81/libjava%2Fjava%2Flang%2FSystem.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3824a4860080dbc3b140e1eb7fa2b4efed115b81/libjava%2Fjava%2Flang%2FSystem.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FSystem.java?ref=3824a4860080dbc3b140e1eb7fa2b4efed115b81", "patch": "@@ -1,6 +1,6 @@\n // System.java - System-specific info.\n \n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -20,6 +20,7 @@\n import java.io.BufferedOutputStream;\n import java.util.Properties;\n import java.util.PropertyPermission;\n+import java.util.TimeZone;\n \n /**\n  * @author Tom Tromey <tromey@cygnus.com>\n@@ -41,6 +42,83 @@ public static native void arraycopy (Object src, int srcOffset,\n \n   public static native long currentTimeMillis ();\n \n+  // FIXME: When merging with Classpath, remember to remove the call to\n+  // getDefaultTimeZoneId from java.util.Timezone.\n+  private static native String getSystemTimeZone ();\n+\n+  // Get the System Timezone as reported by the OS.  It should be in\n+  // the form PST8PDT so we'll need to parse it and check that it's valid.\n+  // The result is used to set the user.timezone property in init_properties.\n+  // FIXME: Using the code from Classpath for generating the System\n+  // Timezone IMO is suboptimal because it ignores whether the rules for\n+  // DST match up.\n+  private static String getDefaultTimeZoneId ()\n+  {\n+    String sysTimeZoneId = getSystemTimeZone ();\n+\n+    // Check if this is a valid timezone.  Make sure the IDs match\n+    // since getTimeZone returns GMT if no match is found.\n+    TimeZone tz = TimeZone.getTimeZone (sysTimeZoneId);\n+    if (tz.getID ().equals (sysTimeZoneId))\n+      return sysTimeZoneId;\n+\n+    // Check if the base part of sysTimeZoneId is a valid timezone that\n+    // matches with daylight usage and rawOffset.  Make sure the IDs match\n+    // since getTimeZone returns GMT if no match is found.\n+    // First find start of GMT offset info and any Daylight zone name.\n+    int startGMToffset = 0;\n+    int sysTimeZoneIdLength = sysTimeZoneId.length();\n+    for (int i = 0; i < sysTimeZoneIdLength && startGMToffset == 0; i++)\n+      {\n+        if (Character.isDigit (sysTimeZoneId.charAt (i)))\n+\t  startGMToffset = i;\n+      }\n+\n+    int startDaylightZoneName = 0;\n+    boolean usesDaylight = false;\n+    for (int i = sysTimeZoneIdLength - 1;\n+         i >= 0 && !Character.isDigit (sysTimeZoneId.charAt (i)); --i)\n+      {\n+        startDaylightZoneName = i;\n+      }\n+    if (startDaylightZoneName > 0)\n+      usesDaylight = true;\n+\n+    int GMToffset = Integer.parseInt (startDaylightZoneName == 0 ?\n+      sysTimeZoneId.substring (startGMToffset) :\n+      sysTimeZoneId.substring (startGMToffset, startDaylightZoneName));\n+\n+    // Offset could be in hours or seconds.  Convert to millis.\n+    if (GMToffset < 24)\n+      GMToffset *= 60 * 60;\n+    GMToffset *= -1000;\n+\n+    String tzBasename = sysTimeZoneId.substring (0, startGMToffset);\n+    tz = TimeZone.getTimeZone (tzBasename);\n+    if (tz.getID ().equals (tzBasename) && tz.getRawOffset () == GMToffset)\n+      {\n+        boolean tzUsesDaylight = tz.useDaylightTime ();\n+        if (usesDaylight && tzUsesDaylight || !usesDaylight && !tzUsesDaylight)\n+          return tzBasename;\n+      }\n+  \n+    // If no match, see if a valid timezone has the same attributes as this\n+    // and then use it instead.\n+    String[] IDs = TimeZone.getAvailableIDs (GMToffset);\n+    for (int i = 0; i < IDs.length; ++i)\n+      {\n+\t// FIXME: The daylight savings rules may not match the rules\n+\t// for the desired zone.\n+        boolean IDusesDaylight =\n+\t  TimeZone.getTimeZone (IDs[i]).useDaylightTime ();\n+        if (usesDaylight && IDusesDaylight || !usesDaylight && !IDusesDaylight)\n+\t  return IDs[i];\n+      }\n+\n+    // If all else fails, return null.\n+    return null;\n+  }\n+\n   public static void exit (int status)\n   {\n     Runtime.getRuntime().exit(status);"}, {"sha": "2fccf92f118c10e9615d92dfef7c7a85e9963357", "filename": "libjava/java/lang/natSystem.cc", "status": "modified", "additions": 63, "deletions": 1, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3824a4860080dbc3b140e1eb7fa2b4efed115b81/libjava%2Fjava%2Flang%2FnatSystem.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3824a4860080dbc3b140e1eb7fa2b4efed115b81/libjava%2Fjava%2Flang%2FnatSystem.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatSystem.cc?ref=3824a4860080dbc3b140e1eb7fa2b4efed115b81", "patch": "@@ -1,6 +1,6 @@\n // natSystem.cc - Native code implementing System class.\n \n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -10,6 +10,7 @@ details.  */\n \n #include <config.h>\n \n+#include <stdio.h>\n #include <string.h>\n #include <stdlib.h>\n \n@@ -28,6 +29,17 @@ details.  */\n #include <langinfo.h>\n #endif\n \n+#if TIME_WITH_SYS_TIME\n+# include <sys/time.h>\n+# include <time.h>\n+#else\n+# if HAVE_SYS_TIME_H\n+#  include <sys/time.h>\n+# else\n+#  include <time.h>\n+# endif\n+#endif\n+\n #include <gcj/cni.h>\n #include <jvm.h>\n #include <java-props.h>\n@@ -38,6 +50,7 @@ details.  */\n #include <java/lang/NullPointerException.h>\n #include <java/lang/StringBuffer.h>\n #include <java/util/Properties.h>\n+#include <java/util/TimeZone.h>\n #include <java/io/PrintStream.h>\n #include <java/io/InputStream.h>\n \n@@ -214,6 +227,50 @@ getpwuid_adaptor(T_passwd * (*getpwuid_r)(T_uid user_id, T_passwd *pwd_r,\n }\n #endif\n \n+/*\n+ * This method returns a time zone string that is used by init_properties\n+ * to set the default timezone property 'user.timezone'.  That value is\n+ * used by default as a key into the timezone table used by the\n+ * java::util::TimeZone class.\n+ */\n+jstring\n+java::lang::System::getSystemTimeZone (void)\n+{\n+  time_t current_time;\n+  char **tzinfo, *tzid;\n+  long tzoffset;\n+\n+  current_time = time(0);\n+\n+  mktime(localtime(&current_time));\n+  tzinfo = tzname;\n+  tzoffset = timezone;\n+\n+  if ((tzoffset % 3600) == 0)\n+    tzoffset = tzoffset / 3600;\n+\n+  if (!strcmp(tzinfo[0], tzinfo[1]))  \n+    {\n+      tzid = (char*) _Jv_Malloc (strlen(tzinfo[0]) + 6);\n+      if (!tzid)\n+        return NULL;\n+\n+      sprintf(tzid, \"%s%ld\", tzinfo[0], tzoffset);\n+    }\n+  else\n+    {\n+      tzid = (char*) _Jv_Malloc (strlen(tzinfo[0]) + strlen(tzinfo[1]) + 6);\n+      if (!tzid)\n+        return NULL;\n+\n+      sprintf(tzid, \"%s%ld%s\", tzinfo[0], tzoffset, tzinfo[1]);\n+    }\n+\n+  jstring retval = JvNewStringUTF (tzid);\n+  _Jv_Free (tzid);\n+  return retval;\n+}\n+\n void\n java::lang::System::init_properties (void)\n {\n@@ -364,6 +421,11 @@ java::lang::System::init_properties (void)\n       SET (\"user.language\", \"en\");\n     }  \n \n+  // Set the \"user.timezone\" property.\n+  jstring timezone = getDefaultTimeZoneId ();\n+  if (timezone != NULL)\n+    newprops->put (JvNewStringLatin1 (\"user.timezone\"), timezone);\n+\n   // Set some properties according to whatever was compiled in with\n   // `-D'.\n   for (int i = 0; _Jv_Compiler_Properties[i]; ++i)"}, {"sha": "252f9fa7743c8724afefcf0ddce99d6524f5ce26", "filename": "libjava/java/text/DateFormatSymbols.java", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3824a4860080dbc3b140e1eb7fa2b4efed115b81/libjava%2Fjava%2Ftext%2FDateFormatSymbols.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3824a4860080dbc3b140e1eb7fa2b4efed115b81/libjava%2Fjava%2Ftext%2FDateFormatSymbols.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FDateFormatSymbols.java?ref=3824a4860080dbc3b140e1eb7fa2b4efed115b81", "patch": "@@ -81,24 +81,18 @@ public class DateFormatSymbols extends Object\n       /**/   \"Eastern Standard Time\", \"EST\", \"Indianapolis\" },\n     { \"PRT\", \"Atlantic Standard Time\", \"AST\",\n       /**/   \"Atlantic Daylight Time\", \"ADT\", \"Halifax\" },\n+    { \"CNT\", \"Newfoundland Standard Time\", \"NST\",\n+      /**/   \"Newfoundland Daylight Time\", \"NDT\", \"St. Johns\" },\n+    { \"ECT\", \"Central European Standard Time\", \"CET\",\n+      /**/   \"Central European Daylight Time\", \"CEST\", \"Paris\" },\n+    { \"CTT\", \"China Standard Time\", \"CST\",\n+      /**/   \"China Standard Time\", \"CST\", \"Shanghai\" },\n+    { \"JST\", \"Japan Standard Time\", \"JST\",\n+      /**/   \"Japan Standard Time\", \"JST\", \"Tokyo\" },\n     { \"HST\", \"Hawaii Standard Time\", \"HST\",\n-      /**/   \"Hawaii Daylight Time\", \"HDT\", \"Honolulu\" },\n-    { \"AST\", \"Alaska Standard Time\", \"AST\",\n-      /**/   \"Alaska Daylight Time\", \"ADT\", \"Anchorage\" },\n-    { \"PST8PDT\", \"Pacific Standard Time\", \"PST\",\n-      /******/   \"Pacific Daylight Time\", \"PDT\", \"San Francisco\" },\n-    { \"MST7MDT\", \"Mountain Standard Time\", \"MST\",\n-      /******/   \"Mountain Daylight Time\", \"MDT\", \"Denver\" },\n-    { \"CST6CDT\", \"Central Standard Time\", \"CST\",\n-      /******/   \"Central Daylight Time\", \"CDT\", \"Chicago\" },\n-    { \"EST5EDT\", \"Eastern Standard Time\", \"EST\",\n-      /******/   \"Eastern Daylight Time\", \"EDT\", \"Boston\" },\n-    { \"AST4ADT\", \"Atlantic Standard Time\", \"AST\",\n-      /******/   \"Atlantic Daylight Time\", \"ADT\", \"Halifax\" },\n-    { \"HST10HDT\", \"Hawaii Standard Time\", \"HST\",\n-      /*******/   \"Hawaii Daylight Time\", \"HDT\", \"Honolulu\" },\n-    { \"AST9ADT\", \"Alaska Standard Time\", \"AKST\",\n-      /******/   \"Alaska Daylight Time\", \"AKDT\", \"Anchorage\" }\n+      /**/   \"Hawaii Standard Time\", \"HST\", \"Honolulu\" },\n+    { \"AST\", \"Alaska Standard Time\", \"AKST\",\n+      /**/   \"Alaska Daylight Time\", \"AKDT\", \"Anchorage\" }\n   };\n \n   // These are each arrays with a value for SHORT, MEDIUM, LONG, FULL,"}, {"sha": "d3301be3613d1a2ba9f227b176f1fe038314eaef", "filename": "libjava/java/util/Date.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3824a4860080dbc3b140e1eb7fa2b4efed115b81/libjava%2Fjava%2Futil%2FDate.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3824a4860080dbc3b140e1eb7fa2b4efed115b81/libjava%2Fjava%2Futil%2FDate.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FDate.java?ref=3824a4860080dbc3b140e1eb7fa2b4efed115b81", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -461,7 +461,7 @@ public String toGMTString ()\n     // This method is deprecated.  We don't care if it is very slow.\n     SimpleDateFormat fmt = new SimpleDateFormat (\"d MMM yyyy HH:mm:ss 'GMT'\",\n \t\t\t\t\t\t Locale.US);\n-    fmt.setTimeZone(TimeZone.zoneGMT);\n+    fmt.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n     return fmt.format(this);\n   }\n \n@@ -476,7 +476,7 @@ public String toLocaleString ()\n   public static long UTC (int year, int month, int date,\n \t\t\t  int hours, int minutes, int seconds)\n   {\n-    GregorianCalendar cal = new GregorianCalendar (TimeZone.zoneGMT);\n+    GregorianCalendar cal = new GregorianCalendar (TimeZone.getTimeZone(\"GMT\"));\n     cal.set(year+1900, month, date, hours, minutes, seconds);\n     return cal.getTimeInMillis();\n   }"}, {"sha": "e68f9b56a80c318bf1ba9475ff2f3eed5a19cf0d", "filename": "libjava/java/util/TimeZone.java", "status": "modified", "additions": 49, "deletions": 45, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3824a4860080dbc3b140e1eb7fa2b4efed115b81/libjava%2Fjava%2Futil%2FTimeZone.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3824a4860080dbc3b140e1eb7fa2b4efed115b81/libjava%2Fjava%2Futil%2FTimeZone.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FTimeZone.java?ref=3824a4860080dbc3b140e1eb7fa2b4efed115b81", "patch": "@@ -1,5 +1,5 @@\n /* java.util.TimeZone\n-   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -82,7 +82,8 @@ public abstract class TimeZone implements java.io.Serializable, Cloneable\n     TimeZone tz;\n     // Automatically generated by scripts/timezones.pl\n     // XXX - Should we read this data from a file?\n-    tz = new SimpleTimeZone(-11000 * 3600, \"Pacific/Niue\");\n+    tz = new SimpleTimeZone(-11000 * 3600, \"MIT\");\n+    timezones.put(\"MIT\", tz);\n     timezones.put(\"Pacific/Niue\", tz);\n     timezones.put(\"Pacific/Apia\", tz);\n     timezones.put(\"Pacific/Midway\", tz);\n@@ -100,9 +101,10 @@ public abstract class TimeZone implements java.io.Serializable, Cloneable\n     timezones.put(\"Pacific/Rarotonga\", tz);\n     timezones.put(\"Pacific/Tahiti\", tz);\n     tz = new SimpleTimeZone\n-      (-9000 * 3600, \"America/Juneau\",\n+      (-9000 * 3600, \"AST\",\n        Calendar.APRIL, 1, Calendar.SUNDAY, 2000 * 3600,\n        Calendar.OCTOBER, -1, Calendar.SUNDAY, 2000 * 3600);\n+    timezones.put(\"AST\", tz);\n     timezones.put(\"America/Juneau\", tz);\n     timezones.put(\"America/Anchorage\", tz);\n     timezones.put(\"America/Nome\", tz);\n@@ -112,10 +114,10 @@ public abstract class TimeZone implements java.io.Serializable, Cloneable\n     tz = new SimpleTimeZone(-8500 * 3600, \"Pacific/Marquesas\");\n     timezones.put(\"Pacific/Marquesas\", tz);\n     tz = new SimpleTimeZone\n-      (-8000 * 3600, \"PST8PDT\",\n+      (-8000 * 3600, \"PST\",\n        Calendar.APRIL, 1, Calendar.SUNDAY, 2000 * 3600,\n        Calendar.OCTOBER, -1, Calendar.SUNDAY, 2000 * 3600);\n-    timezones.put(\"PST8PDT\", tz);\n+    timezones.put(\"PST\", tz);\n     timezones.put(\"America/Dawson\", tz);\n     timezones.put(\"America/Los_Angeles\", tz);\n     timezones.put(\"America/Tijuana\", tz);\n@@ -124,15 +126,15 @@ public abstract class TimeZone implements java.io.Serializable, Cloneable\n     timezones.put(\"US/Pacific-New\", tz);\n     tz = new SimpleTimeZone(-8000 * 3600, \"Pacific/Pitcairn\");\n     timezones.put(\"Pacific/Pitcairn\", tz);\n-    tz = new SimpleTimeZone(-7000 * 3600, \"MST\");\n-    timezones.put(\"MST\", tz);\n+    tz = new SimpleTimeZone(-7000 * 3600, \"PNT\");\n+    timezones.put(\"PNT\", tz);\n     timezones.put(\"America/Dawson_Creek\", tz);\n     timezones.put(\"America/Phoenix\", tz);\n     tz = new SimpleTimeZone\n-      (-7000 * 3600, \"MST7MDT\",\n+      (-7000 * 3600, \"MST\",\n        Calendar.APRIL, 1, Calendar.SUNDAY, 2000 * 3600,\n        Calendar.OCTOBER, -1, Calendar.SUNDAY, 2000 * 3600);\n-    timezones.put(\"MST7MDT\", tz);\n+    timezones.put(\"MST\", tz);\n     timezones.put(\"America/Boise\", tz);\n     timezones.put(\"America/Chihuahua\", tz);\n     timezones.put(\"America/Denver\", tz);\n@@ -152,10 +154,10 @@ public abstract class TimeZone implements java.io.Serializable, Cloneable\n     timezones.put(\"America/Tegucigalpa\", tz);\n     timezones.put(\"Pacific/Galapagos\", tz);\n     tz = new SimpleTimeZone\n-      (-6000 * 3600, \"CST6CDT\",\n+      (-6000 * 3600, \"CST\",\n        Calendar.APRIL, 1, Calendar.SUNDAY, 2000 * 3600,\n        Calendar.OCTOBER, -1, Calendar.SUNDAY, 2000 * 3600);\n-    timezones.put(\"CST6CDT\", tz);\n+    timezones.put(\"CST\", tz);\n     timezones.put(\"America/Cambridge_Bay\", tz);\n     timezones.put(\"America/Cancun\", tz);\n     timezones.put(\"America/Chicago\", tz);\n@@ -181,8 +183,8 @@ public abstract class TimeZone implements java.io.Serializable, Cloneable\n        Calendar.APRIL, 1, 0, 0 * 3600,\n        Calendar.OCTOBER, -1, Calendar.SUNDAY, 0 * 3600);\n     timezones.put(\"America/Havana\", tz);\n-    tz = new SimpleTimeZone(-5000 * 3600, \"EST\");\n-    timezones.put(\"EST\", tz);\n+    tz = new SimpleTimeZone(-5000 * 3600, \"IET\");\n+    timezones.put(\"IET\", tz);\n     timezones.put(\"America/Bogota\", tz);\n     timezones.put(\"America/Cayman\", tz);\n     timezones.put(\"America/Guayaquil\", tz);\n@@ -197,18 +199,19 @@ public abstract class TimeZone implements java.io.Serializable, Cloneable\n     timezones.put(\"America/Port-au-Prince\", tz);\n     timezones.put(\"America/Porto_Acre\", tz);\n     tz = new SimpleTimeZone\n-      (-5000 * 3600, \"EST5EDT\",\n+      (-5000 * 3600, \"EST\",\n        Calendar.APRIL, 1, Calendar.SUNDAY, 2000 * 3600,\n        Calendar.OCTOBER, -1, Calendar.SUNDAY, 2000 * 3600);\n-    timezones.put(\"EST5EDT\", tz);\n+    timezones.put(\"EST\", tz);\n     timezones.put(\"America/Detroit\", tz);\n     timezones.put(\"America/Louisville\", tz);\n     timezones.put(\"America/Montreal\", tz);\n     timezones.put(\"America/Nassau\", tz);\n     timezones.put(\"America/New_York\", tz);\n     timezones.put(\"America/Nipigon\", tz);\n     timezones.put(\"America/Thunder_Bay\", tz);\n-    tz = new SimpleTimeZone(-4000 * 3600, \"America/Anguilla\");\n+    tz = new SimpleTimeZone(-4000 * 3600, \"PRT\");\n+    timezones.put(\"PRT\", tz);\n     timezones.put(\"America/Anguilla\", tz);\n     timezones.put(\"America/Antigua\", tz);\n     timezones.put(\"America/Aruba\", tz);\n@@ -259,7 +262,8 @@ public abstract class TimeZone implements java.io.Serializable, Cloneable\n        Calendar.SEPTEMBER, 2, Calendar.SUNDAY, 0 * 3600,\n        Calendar.APRIL, 16, -Calendar.SUNDAY, 0 * 3600);\n     timezones.put(\"Atlantic/Stanley\", tz);\n-    tz = new SimpleTimeZone(-3000 * 3600, \"America/Buenos_Aires\");\n+    tz = new SimpleTimeZone(-3000 * 3600, \"AGT\");\n+    timezones.put(\"AGT\", tz);\n     timezones.put(\"America/Buenos_Aires\", tz);\n     timezones.put(\"America/Belem\", tz);\n     timezones.put(\"America/Catamarca\", tz);\n@@ -289,9 +293,10 @@ public abstract class TimeZone implements java.io.Serializable, Cloneable\n        Calendar.OCTOBER, -1, Calendar.SUNDAY, 2000 * 3600);\n     timezones.put(\"America/Miquelon\", tz);\n     tz = new SimpleTimeZone\n-      (-2500 * 3600, \"America/St_Johns\",\n+      (-3500 * 3600, \"CNT\",\n        Calendar.APRIL, 1, Calendar.SUNDAY, 2000 * 3600,\n        Calendar.OCTOBER, -1, Calendar.SUNDAY, 2000 * 3600);\n+    timezones.put(\"CNT\", tz);\n     timezones.put(\"America/St_Johns\", tz);\n     tz = new SimpleTimeZone(-2000 * 3600, \"America/Noronha\");\n     timezones.put(\"America/Noronha\", tz);\n@@ -362,6 +367,7 @@ public abstract class TimeZone implements java.io.Serializable, Cloneable\n        Calendar.MARCH, -1, Calendar.SUNDAY, 2000 * 3600,\n        Calendar.OCTOBER, -1, Calendar.SUNDAY, 2000 * 3600);\n     timezones.put(\"CET\", tz);\n+    timezones.put(\"ECT\", tz);\n     timezones.put(\"Africa/Ceuta\", tz);\n     timezones.put(\"Arctic/Longyearbyen\", tz);\n     timezones.put(\"Europe/Amsterdam\", tz);\n@@ -399,7 +405,9 @@ public abstract class TimeZone implements java.io.Serializable, Cloneable\n        Calendar.APRIL, -1, Calendar.FRIDAY, 0 * 3600,\n        Calendar.SEPTEMBER, -1, Calendar.THURSDAY, 23000 * 3600);\n     timezones.put(\"Africa/Cairo\", tz);\n-    tz = new SimpleTimeZone(2000 * 3600, \"Africa/Gaborone\");\n+    timezones.put(\"ART\", tz);\n+    tz = new SimpleTimeZone(2000 * 3600, \"CAT\");\n+    timezones.put(\"CAT\", tz);\n     timezones.put(\"Africa/Gaborone\", tz);\n     timezones.put(\"Africa/Blantyre\", tz);\n     timezones.put(\"Africa/Bujumbura\", tz);\n@@ -470,7 +478,8 @@ public abstract class TimeZone implements java.io.Serializable, Cloneable\n        Calendar.OCTOBER, -1, Calendar.SUNDAY, 2000 * 3600);\n     timezones.put(\"Europe/Tiraspol\", tz);\n     timezones.put(\"Europe/Moscow\", tz);\n-    tz = new SimpleTimeZone(3000 * 3600, \"Indian/Comoro\");\n+    tz = new SimpleTimeZone(3000 * 3600, \"EAT\");\n+    timezones.put(\"EAT\", tz);\n     timezones.put(\"Indian/Comoro\", tz);\n     timezones.put(\"Africa/Addis_Ababa\", tz);\n     timezones.put(\"Africa/Asmera\", tz);\n@@ -506,7 +515,8 @@ public abstract class TimeZone implements java.io.Serializable, Cloneable\n        Calendar.OCTOBER, -1, Calendar.SUNDAY, 2000 * 3600);\n     timezones.put(\"Asia/Yerevan\", tz);\n     timezones.put(\"Europe/Samara\", tz);\n-    tz = new SimpleTimeZone(4000 * 3600, \"Indian/Mauritius\");\n+    tz = new SimpleTimeZone(4000 * 3600, \"NET\");\n+    timezones.put(\"NET\", tz);\n     timezones.put(\"Indian/Mauritius\", tz);\n     timezones.put(\"Asia/Dubai\", tz);\n     timezones.put(\"Asia/Muscat\", tz);\n@@ -529,7 +539,8 @@ public abstract class TimeZone implements java.io.Serializable, Cloneable\n        Calendar.MARCH, -1, Calendar.SUNDAY, 2000 * 3600,\n        Calendar.OCTOBER, -1, Calendar.SUNDAY, 2000 * 3600);\n     timezones.put(\"Asia/Yekaterinburg\", tz);\n-    tz = new SimpleTimeZone(5000 * 3600, \"Indian/Kerguelen\");\n+    tz = new SimpleTimeZone(5000 * 3600, \"PLT\");\n+    timezones.put(\"PLT\", tz);\n     timezones.put(\"Indian/Kerguelen\", tz);\n     timezones.put(\"Asia/Ashkhabad\", tz);\n     timezones.put(\"Asia/Dushanbe\", tz);\n@@ -538,11 +549,13 @@ public abstract class TimeZone implements java.io.Serializable, Cloneable\n     timezones.put(\"Asia/Tashkent\", tz);\n     timezones.put(\"Indian/Chagos\", tz);\n     timezones.put(\"Indian/Maldives\", tz);\n-    tz = new SimpleTimeZone(5500 * 3600, \"Asia/Calcutta\");\n+    tz = new SimpleTimeZone(5500 * 3600, \"IST\");\n+    timezones.put(\"IST\", tz);\n     timezones.put(\"Asia/Calcutta\", tz);\n     tz = new SimpleTimeZone(5750 * 3600, \"Asia/Katmandu\");\n     timezones.put(\"Asia/Katmandu\", tz);\n-    tz = new SimpleTimeZone(6000 * 3600, \"Antarctica/Mawson\");\n+    tz = new SimpleTimeZone(6000 * 3600, \"BST\");\n+    timezones.put(\"BST\", tz);\n     timezones.put(\"Antarctica/Mawson\", tz);\n     timezones.put(\"Asia/Colombo\", tz);\n     timezones.put(\"Asia/Dacca\", tz);\n@@ -561,7 +574,8 @@ public abstract class TimeZone implements java.io.Serializable, Cloneable\n     tz = new SimpleTimeZone(6500 * 3600, \"Asia/Rangoon\");\n     timezones.put(\"Asia/Rangoon\", tz);\n     timezones.put(\"Indian/Cocos\", tz);\n-    tz = new SimpleTimeZone(7000 * 3600, \"Antarctica/Davis\");\n+    tz = new SimpleTimeZone(7000 * 3600, \"VST\");\n+    timezones.put(\"VST\", tz);\n     timezones.put(\"Antarctica/Davis\", tz);\n     timezones.put(\"Asia/Bangkok\", tz);\n     timezones.put(\"Asia/Jakarta\", tz);\n@@ -574,7 +588,8 @@ public abstract class TimeZone implements java.io.Serializable, Cloneable\n        Calendar.MARCH, -1, Calendar.SUNDAY, 2000 * 3600,\n        Calendar.OCTOBER, -1, Calendar.SUNDAY, 2000 * 3600);\n     timezones.put(\"Asia/Krasnoyarsk\", tz);\n-    tz = new SimpleTimeZone(8000 * 3600, \"Antarctica/Casey\");\n+    tz = new SimpleTimeZone(8000 * 3600, \"CTT\");\n+    timezones.put(\"CTT\", tz);\n     timezones.put(\"Antarctica/Casey\", tz);\n     timezones.put(\"Asia/Brunei\", tz);\n     timezones.put(\"Asia/Chungking\", tz);\n@@ -602,7 +617,8 @@ public abstract class TimeZone implements java.io.Serializable, Cloneable\n        Calendar.MARCH, -1, Calendar.SUNDAY, 0 * 3600,\n        Calendar.SEPTEMBER, -1, Calendar.SUNDAY, 0 * 3600);\n     timezones.put(\"Asia/Ulan_Bator\", tz);\n-    tz = new SimpleTimeZone(9000 * 3600, \"Asia/Jayapura\");\n+    tz = new SimpleTimeZone(9000 * 3600, \"JST\");\n+    timezones.put(\"JST\", tz);\n     timezones.put(\"Asia/Jayapura\", tz);\n     timezones.put(\"Asia/Pyongyang\", tz);\n     timezones.put(\"Asia/Seoul\", tz);\n@@ -619,7 +635,8 @@ public abstract class TimeZone implements java.io.Serializable, Cloneable\n        Calendar.MARCH, -1, Calendar.SUNDAY, 2000 * 3600);\n     timezones.put(\"Australia/Adelaide\", tz);\n     timezones.put(\"Australia/Broken_Hill\", tz);\n-    tz = new SimpleTimeZone(9500 * 3600, \"Australia/Darwin\");\n+    tz = new SimpleTimeZone(9500 * 3600, \"ACT\");\n+    timezones.put(\"ACT\", tz);\n     timezones.put(\"Australia/Darwin\", tz);\n     tz = new SimpleTimeZone(10000 * 3600, \"Antarctica/DumontDUrville\");\n     timezones.put(\"Antarctica/DumontDUrville\", tz);\n@@ -646,6 +663,7 @@ public abstract class TimeZone implements java.io.Serializable, Cloneable\n        Calendar.MARCH, -1, Calendar.SUNDAY, 2000 * 3600);\n     timezones.put(\"Australia/Melbourne\", tz);\n     timezones.put(\"Australia/Sydney\", tz);\n+    timezones.put(\"AET\", tz);\n     tz = new SimpleTimeZone\n       (10500 * 3600, \"Australia/Lord_Howe\",\n        Calendar.OCTOBER, -1, Calendar.SUNDAY, 2000 * 3600,\n@@ -656,7 +674,8 @@ public abstract class TimeZone implements java.io.Serializable, Cloneable\n        Calendar.MARCH, -1, Calendar.SUNDAY, 2000 * 3600,\n        Calendar.OCTOBER, -1, Calendar.SUNDAY, 2000 * 3600);\n     timezones.put(\"Asia/Magadan\", tz);\n-    tz = new SimpleTimeZone(11000 * 3600, \"Pacific/Ponape\");\n+    tz = new SimpleTimeZone(11000 * 3600, \"SST\");\n+    timezones.put(\"SST\", tz);\n     timezones.put(\"Pacific/Ponape\", tz);\n     timezones.put(\"Pacific/Efate\", tz);\n     timezones.put(\"Pacific/Guadalcanal\", tz);\n@@ -671,6 +690,7 @@ public abstract class TimeZone implements java.io.Serializable, Cloneable\n     timezones.put(\"Antarctica/McMurdo\", tz);\n     timezones.put(\"Antarctica/South_Pole\", tz);\n     timezones.put(\"Pacific/Auckland\", tz);\n+    timezones.put(\"NST\", tz);\n     tz = new SimpleTimeZone\n       (12000 * 3600, \"Asia/Kamchatka\",\n        Calendar.MARCH, -1, Calendar.SUNDAY, 2000 * 3600,\n@@ -714,26 +734,12 @@ public abstract class TimeZone implements java.io.Serializable, Cloneable\n \n     String tzid = System.getProperty(\"user.timezone\");\n \n-    if (tzid == null)\n-      tzid = getDefaultTimeZoneId();\n-\n     if (tzid == null)\n       tzid = \"GMT\";\n \n     defaultZone = getTimeZone(tzid);\n   }\n \n-  /* This method returns us a time zone id string which is in the\n-     form <standard zone name><GMT offset><daylight time zone name>.\n-     The GMT offset is in seconds, except where it is evenly divisible\n-     by 3600, then it is in hours.  If the zone does not observe\n-     daylight time, then the daylight zone name is omitted.  Examples:\n-     in Chicago, the timezone would be CST6CDT.  In Indianapolis \n-     (which does not have Daylight Savings Time) the string would\n-     be EST5\n-   */\n-  private static native String getDefaultTimeZoneId();\n-\n   /**\n    * Gets the time zone offset, for current date, modified in case of \n    * daylight savings.  This is the offset to add to UTC to get the local\n@@ -1087,6 +1093,4 @@ public Object clone()\n \treturn null;\n       }\n   }\n-\n-  static final TimeZone zoneGMT = new SimpleTimeZone(0, \"GMT\");\n }"}, {"sha": "61128c833b60bcc9b2e05fc8fd443e4a70bb8dfb", "filename": "libjava/java/util/natTimeZone.cc", "status": "removed", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61db460830bf37e7803f95472cead5cc3ba87da3/libjava%2Fjava%2Futil%2FnatTimeZone.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61db460830bf37e7803f95472cead5cc3ba87da3/libjava%2Fjava%2Futil%2FnatTimeZone.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FnatTimeZone.cc?ref=61db460830bf37e7803f95472cead5cc3ba87da3", "patch": "@@ -1,72 +0,0 @@\n-/* Copyright (C) 2000  Free Software Foundation\n-\n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n-\n-#include <config.h>\n-\n-#include <gcj/cni.h>\n-#include <java/util/TimeZone.h>\n-\n-#include <stdio.h>\n-#include <string.h>\n-\n-#if TIME_WITH_SYS_TIME\n-# include <sys/time.h>\n-# include <time.h>\n-#else\n-# if HAVE_SYS_TIME_H\n-#  include <sys/time.h>\n-# else\n-#  include <time.h>\n-# endif\n-#endif\n-\n-/*\n- * This method returns a time zone string that is used by the static\n- * initializer in java.util.TimeZone to create the default timezone\n- * instance.  This is a key into the timezone table used by\n- * that class.\n- */\n-jstring\n-java::util::TimeZone::getDefaultTimeZoneId (void)\n-{\n-  time_t current_time;\n-  char **tzinfo, *tzid;\n-  long tzoffset;\n-  jstring retval;\n-\n-  current_time = time(0);\n-\n-  mktime(localtime(&current_time));\n-  tzinfo = tzname;\n-  tzoffset = timezone;\n-\n-  if ((tzoffset % 3600) == 0)\n-    tzoffset = tzoffset / 3600;\n-\n-  if (!strcmp(tzinfo[0], tzinfo[1]))  \n-    {\n-      tzid = (char*) _Jv_Malloc (strlen(tzinfo[0]) + 6);\n-      if (!tzid)\n-        return NULL;\n-\n-      sprintf(tzid, \"%s%ld\", tzinfo[0], tzoffset);\n-    }\n-  else\n-    {\n-      tzid = (char*) _Jv_Malloc (strlen(tzinfo[0]) + strlen(tzinfo[1]) + 6);\n-      if (!tzid)\n-        return NULL;\n-\n-      sprintf(tzid, \"%s%ld%s\", tzinfo[0], tzoffset, tzinfo[1]);\n-    }\n-\n-  retval = JvNewStringUTF (tzid);\n-  _Jv_Free (tzid);\n-  return retval;\n-}\n-"}]}