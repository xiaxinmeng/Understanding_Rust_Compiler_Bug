{"sha": "2288ea23816dd1368d92b4386f7f9aab2fcf1aaf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI4OGVhMjM4MTZkZDEzNjhkOTJiNDM4NmY3ZjlhYWIyZmNmMWFhZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-09-20T13:33:43Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-09-20T13:33:43Z"}, "message": "Revert my 2017-09-19 patch.\n\nFrom-SVN: r253012", "tree": {"sha": "f02a8b355a979e7cf7a41d1429839be91ad6d6a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f02a8b355a979e7cf7a41d1429839be91ad6d6a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2288ea23816dd1368d92b4386f7f9aab2fcf1aaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2288ea23816dd1368d92b4386f7f9aab2fcf1aaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2288ea23816dd1368d92b4386f7f9aab2fcf1aaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2288ea23816dd1368d92b4386f7f9aab2fcf1aaf/comments", "author": null, "committer": null, "parents": [{"sha": "20f661fbd2fce6c486bb8b0b5ff1161330c38e7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20f661fbd2fce6c486bb8b0b5ff1161330c38e7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20f661fbd2fce6c486bb8b0b5ff1161330c38e7d"}], "stats": {"total": 152, "additions": 0, "deletions": 152}, "files": [{"sha": "b41cd0353a990c3bc6b83810374ba36bb4720d41", "filename": "gcc/ChangeLog", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2288ea23816dd1368d92b4386f7f9aab2fcf1aaf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2288ea23816dd1368d92b4386f7f9aab2fcf1aaf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2288ea23816dd1368d92b4386f7f9aab2fcf1aaf", "patch": "@@ -128,12 +128,6 @@\n \tto -fstack-clash-protection for stack-clash-protection.\n \tDocument new params for stack clash protection.\n \n-2017-09-19  Uros Bizjak  <ubizjak@gmail.com>\n-\n-\t* config/i386/i386.md (*scc_bt<mode>): New insn_and_split pattern.\n-\t(*scc_bt<mode>_1): Ditto.\n-\t(*scc_bt<mode>_mask): Ditto.\n-\n 2017-09-19  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (ix86_split_long_move): Do not handle"}, {"sha": "43227dc77ee94bc93f14baae737c3cad9174ed54", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 0, "deletions": 92, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2288ea23816dd1368d92b4386f7f9aab2fcf1aaf/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2288ea23816dd1368d92b4386f7f9aab2fcf1aaf/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=2288ea23816dd1368d92b4386f7f9aab2fcf1aaf", "patch": "@@ -11246,98 +11246,6 @@\n \t  (const_string \"SI\")\n \t  (const_string \"<MODE>\")))])\n \n-(define_insn_and_split \"*scc_bt<mode>\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\")\n-  \t(match_operator 1 \"bt_comparison_operator\"\n-\t  [(zero_extract:SWI48\n-\t     (match_operand:SWI48 2 \"nonimmediate_operand\")\n-\t     (const_int 1)\n-\t     (match_operand:SI 3 \"nonmemory_operand\"))\n-\t   (const_int 0)]))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"(TARGET_USE_BT || optimize_function_for_size_p (cfun))\n-   && (CONST_INT_P (operands[3])\n-       ? (INTVAL (operands[3]) < GET_MODE_BITSIZE (<MODE>mode)\n-\t  && INTVAL (operands[3])\n-\t       >= (optimize_function_for_size_p (cfun) ? 8 : 32))\n-       : !memory_operand (operands[2], <MODE>mode))\n-   && can_create_pseudo_p ()\"\n-  \"#\"\n-  \"&& 1\"\n-  [(set (reg:CCC FLAGS_REG)\n-\t(compare:CCC\n-\t  (zero_extract:SWI48\n-\t    (match_dup 2)\n-\t    (const_int 1)\n-\t    (match_dup 3))\n-\t  (const_int 0)))\n-   (set (match_dup 0)\n-\t(match_op_dup 1 [(reg:CCC FLAGS_REG) (const_int 0)]))]\n-{\n-  operands[1] = shallow_copy_rtx (operands[1]);\n-  PUT_CODE (operands[1], reverse_condition (GET_CODE (operands[1])));\n-})\n-\n-(define_insn_and_split \"*scc_bt<mode>_1\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\")\n-  \t(match_operator 1 \"bt_comparison_operator\"\n-\t  [(zero_extract:SWI48\n-\t     (match_operand:SWI48 2 \"register_operand\")\n-\t     (const_int 1)\n-\t     (zero_extend:SI\n-\t       (match_operand:QI 3 \"register_operand\")))\n-\t   (const_int 0)]))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"(TARGET_USE_BT || optimize_function_for_size_p (cfun))\n-   && can_create_pseudo_p ()\"\n-  \"#\"\n-  \"&& 1\"\n-  [(set (reg:CCC FLAGS_REG)\n-\t(compare:CCC\n-\t  (zero_extract:SWI48\n-\t    (match_dup 2)\n-\t    (const_int 1)\n-\t    (match_dup 3))\n-\t  (const_int 0)))\n-   (set (match_dup 0)\n-\t(match_op_dup 1 [(reg:CCC FLAGS_REG) (const_int 0)]))]\n-{\n-  operands[3] = lowpart_subreg (SImode, operands[3], QImode);\n-  operands[1] = shallow_copy_rtx (operands[1]);\n-  PUT_CODE (operands[1], reverse_condition (GET_CODE (operands[1])));\n-})\n-\n-;; Avoid useless masking of bit offset operand.\n-(define_insn_and_split \"*scc_bt<mode>_mask\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\")\n-  \t(match_operator 1 \"bt_comparison_operator\"\n-\t  [(zero_extract:SWI48\n-\t     (match_operand:SWI48 2 \"register_operand\")\n-\t     (const_int 1)\n-\t     (and:SI\n-\t       (match_operand:SI 3 \"register_operand\")\n-\t       (match_operand 4 \"const_int_operand\")))]))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"(TARGET_USE_BT || optimize_function_for_size_p (cfun))\n-   && (INTVAL (operands[4]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n-      == GET_MODE_BITSIZE (<MODE>mode)-1\n-   && can_create_pseudo_p ()\"\n-  \"#\"\n-  \"&& 1\"\n-  [(set (reg:CCC FLAGS_REG)\n-\t(compare:CCC\n-\t  (zero_extract:SWI48\n-\t    (match_dup 2)\n-\t    (const_int 1)\n-\t    (match_dup 3))\n-\t  (const_int 0)))\n-   (set (match_dup 0)\n-\t(match_op_dup 1 [(reg:CCC FLAGS_REG) (const_int 0)]))]\n-{\n-  operands[1] = shallow_copy_rtx (operands[1]);\n-  PUT_CODE (operands[1], reverse_condition (GET_CODE (operands[1])));\n-})\n-\n (define_insn_and_split \"*jcc_bt<mode>\"\n   [(set (pc)\n   \t(if_then_else (match_operator 0 \"bt_comparison_operator\""}, {"sha": "65c489e9a5d0af16dda0498e4d45b3bd5c451744", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2288ea23816dd1368d92b4386f7f9aab2fcf1aaf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2288ea23816dd1368d92b4386f7f9aab2fcf1aaf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2288ea23816dd1368d92b4386f7f9aab2fcf1aaf", "patch": "@@ -58,13 +58,6 @@\n \t(check_effective_target_frame_pointer_for_non_leaf): Likewise.\n \t(check_effective_target_caller_implicit_probes): Likewise.\n \n-2017-09-19  Uros Bizjak  <ubizjak@gmail.com>\n-\n-\t* gcc.target/i386/bt-5.c: New test.\n-\t* gcc.target/i386/bt-6.c: Ditto.\n-\t* gcc.target/i386/bt-mask-3.c: Ditto.\n-\t* gcc.target/i386/bt-mask-4.c: Ditto.\n-\n 2017-09-19  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.dg/tree-ssa/pr31146-2.C: Only do scan-tree-dump for c++14_down."}, {"sha": "309adfe291e62a3be5485d04c847d13e5ba0f99d", "filename": "gcc/testsuite/gcc.target/i386/bt-5.c", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f661fbd2fce6c486bb8b0b5ff1161330c38e7d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f661fbd2fce6c486bb8b0b5ff1161330c38e7d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-5.c?ref=20f661fbd2fce6c486bb8b0b5ff1161330c38e7d", "patch": "@@ -1,11 +0,0 @@\n-/* PR target/36473 */\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -mtune=core2\" } */\n-/* { dg-additional-options \"-mregparm=2\" { target ia32 } } */\n-\n-int test(unsigned x, unsigned n)\n-{\n-  return !(x & ( 0x01 << n ));\n-}\n-\n-/* { dg-final { scan-assembler \"btl\\[ \\t\\]\" } } */"}, {"sha": "994ec432e0e5de7d756c3e52128b2038725f5589", "filename": "gcc/testsuite/gcc.target/i386/bt-6.c", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f661fbd2fce6c486bb8b0b5ff1161330c38e7d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f661fbd2fce6c486bb8b0b5ff1161330c38e7d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-6.c?ref=20f661fbd2fce6c486bb8b0b5ff1161330c38e7d", "patch": "@@ -1,12 +0,0 @@\n-/* PR target/36473 */\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -mtune=core2\" } */\n-/* { dg-additional-options \"-mregparm=2\" { target ia32 } } */\n-\n-int test(unsigned long x, unsigned long n)\n-{\n-  return !(x & ( (long)0x01 << n ));\n-}\n-\n-/* { dg-final { scan-assembler \"btl\\[ \\t\\]\" { target { ! lp64 } } } } */\n-/* { dg-final { scan-assembler \"btq\\[ \\t\\]\" { target lp64 } } } */"}, {"sha": "bf3a404b0d50b849404ca2dc6a83578cfa205885", "filename": "gcc/testsuite/gcc.target/i386/bt-mask-3.c", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f661fbd2fce6c486bb8b0b5ff1161330c38e7d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-mask-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f661fbd2fce6c486bb8b0b5ff1161330c38e7d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-mask-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-mask-3.c?ref=20f661fbd2fce6c486bb8b0b5ff1161330c38e7d", "patch": "@@ -1,12 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -mtune=core2\" } */\n-/* { dg-additional-options \"-mregparm=2\" { target ia32 } } */\n-\n-int test (unsigned x, unsigned n)\n-{\n-  n &= 0x1f;\n-\n-  return !(x & (0x01 << n));\n-}\n-\n-/* { dg-final { scan-assembler-not \"and\\[lq\\]\\[ \\t\\]\" } } */"}, {"sha": "819864686f44102d77f31ca57e08638e2cf0be94", "filename": "gcc/testsuite/gcc.target/i386/bt-mask-4.c", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f661fbd2fce6c486bb8b0b5ff1161330c38e7d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-mask-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f661fbd2fce6c486bb8b0b5ff1161330c38e7d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-mask-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-mask-4.c?ref=20f661fbd2fce6c486bb8b0b5ff1161330c38e7d", "patch": "@@ -1,12 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -mtune=core2\" } */\n-/* { dg-additional-options \"-mregparm=2\" { target ia32 } } */\n-\n-int test (unsigned long x, unsigned long n)\n-{\n-  n &= 0x3f;\n-\n-  return !(x & ((long)0x01 << n));\n-}\n-\n-/* { dg-final { scan-assembler-not \"and\\[lq\\]\\[ \\t\\]\" } } */"}]}