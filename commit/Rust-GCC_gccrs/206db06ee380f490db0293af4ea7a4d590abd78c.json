{"sha": "206db06ee380f490db0293af4ea7a4d590abd78c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA2ZGIwNmVlMzgwZjQ5MGRiMDI5M2FmNGVhN2E0ZDU5MGFiZDc4Yw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-10T22:31:18Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-10T22:31:18Z"}, "message": "c++: normalization of non-templated return-type-req [PR100946]\n\nHere the satisfaction cache is conflating the satisfaction value of the\ntwo return-type-requirements because the corresponding constrained\n'auto's have level 2, but they capture an empty current_template_parms.\nThis ultimately causes the satisfaction cache to think the type\nconstraint doesn't depend on the deduced type of the expression.\n\nWhen normalizing the constraints on an 'auto', the assumption made by\nnormalize_placeholder_type_constraints is that the level of the 'auto'\nis one greater than the depth of the captured current_template_parms, an\nassumption which is not holding here.  So this patch just makes n_p_t_c\nadjust the normalization context appropriately in this situation.\n\n\tPR c++/100946\n\ngcc/cp/ChangeLog:\n\n\t* constraint.cc (normalize_placeholder_type_constraints): When\n\tnormalizing a non-templated return-type-requirement, add a dummy\n\tlevel to initial_parms.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-return-req3.C: New test.", "tree": {"sha": "77addbd4eecfe70265bd8b5cf1c3399ef9117a19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77addbd4eecfe70265bd8b5cf1c3399ef9117a19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/206db06ee380f490db0293af4ea7a4d590abd78c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/206db06ee380f490db0293af4ea7a4d590abd78c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/206db06ee380f490db0293af4ea7a4d590abd78c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/206db06ee380f490db0293af4ea7a4d590abd78c/comments", "author": null, "committer": null, "parents": [{"sha": "a325bdd195ee96f826b208c3afb9bed2ec077e12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a325bdd195ee96f826b208c3afb9bed2ec077e12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a325bdd195ee96f826b208c3afb9bed2ec077e12"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "74b16d27101088972ad352096d57c6bf47b48be6", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206db06ee380f490db0293af4ea7a4d590abd78c/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206db06ee380f490db0293af4ea7a4d590abd78c/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=206db06ee380f490db0293af4ea7a4d590abd78c", "patch": "@@ -3065,6 +3065,15 @@ normalize_placeholder_type_constraints (tree t, bool diag)\n      scope for this placeholder type; use them as the initial template\n      parameters for normalization.  */\n   tree initial_parms = TREE_PURPOSE (ci);\n+\n+  if (!initial_parms && TEMPLATE_TYPE_LEVEL (t) == 2)\n+    /* This is a return-type-requirement of a non-templated requires-expression,\n+       which are parsed under processing_template_decl == 1 and empty\n+       current_template_parms; hence the 'auto' has level 2 and initial_parms\n+       is empty.  Fix up initial_parms to be consistent with the value of\n+       processing_template_decl whence the 'auto' was created.  */\n+    initial_parms = build_tree_list (size_int (1), make_tree_vec (0));\n+\n   /* The 'auto' itself is used as the first argument in its own constraints,\n      and its level is one greater than its template depth.  So in order to\n      capture all used template parameters, we need to add an extra level of"}, {"sha": "a546c6457be4f34a9ba6f4913029883625db2b68", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-return-req3.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206db06ee380f490db0293af4ea7a4d590abd78c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-return-req3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206db06ee380f490db0293af4ea7a4d590abd78c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-return-req3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-return-req3.C?ref=206db06ee380f490db0293af4ea7a4d590abd78c", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/100946\n+// { dg-do compile { target c++20 } }\n+\n+template<class T> concept C = __is_same(T, int);\n+static_assert(requires { { 0 } -> C; });\n+static_assert(requires { { true } -> C; }); // { dg-error \"failed\" }"}]}