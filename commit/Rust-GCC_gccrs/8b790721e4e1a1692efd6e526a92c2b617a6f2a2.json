{"sha": "8b790721e4e1a1692efd6e526a92c2b617a6f2a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI3OTA3MjFlNGUxYTE2OTJlZmQ2ZTUyNmE5MmMyYjYxN2E2ZjJhMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-03-11T10:34:01Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-03-11T10:34:01Z"}, "message": "dwarf2out.c (add_AT_lbl_offset): Rename from add_AT_section_offset.\n\n\t* dwarf2out.c (add_AT_lbl_offset): Rename from add_AT_section_offset.\n\t(print_die, size_of_die, value_format, output_die): Adjust.\n\t* dwarf2out.c (TEXT_SECTION_LAABEL, DEBUG_LINE_SECTION_LABEL,\n\tDEBUG_INFO_SECTION_LABEL, ABBREV_SECTION_LABEL,\n\ttext_section_laabel, debug_line_section_label,\n\tdebug_info_section_label, abbrev_section_label): New.\n\t(output_compilation_unit_header):  Emit label associated\n\twith section instead of section name itself.\n\t(out_pubnames, output_aranges, output_line_info,\n\tdwarf2out_finish): Likewise.\n\t(dwarf2out_init): Build internal label names for sections\n\tfrom static labels.\n\nFrom-SVN: r25700", "tree": {"sha": "09e2da610db93879aa2d8860d8b5a462c72dfaed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09e2da610db93879aa2d8860d8b5a462c72dfaed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b790721e4e1a1692efd6e526a92c2b617a6f2a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b790721e4e1a1692efd6e526a92c2b617a6f2a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b790721e4e1a1692efd6e526a92c2b617a6f2a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b790721e4e1a1692efd6e526a92c2b617a6f2a2/comments", "author": null, "committer": null, "parents": [{"sha": "44ccea4059a2085af0dd71d033781cc4a12a1104", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44ccea4059a2085af0dd71d033781cc4a12a1104", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44ccea4059a2085af0dd71d033781cc4a12a1104"}], "stats": {"total": 101, "additions": 75, "deletions": 26}, "files": [{"sha": "4e45036623d51fa70d36049d7923823b1925f4f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b790721e4e1a1692efd6e526a92c2b617a6f2a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b790721e4e1a1692efd6e526a92c2b617a6f2a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b790721e4e1a1692efd6e526a92c2b617a6f2a2", "patch": "@@ -1,8 +1,27 @@\n+Thu Mar 11 10:29:50 1999  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* dwarf2out.c (add_AT_lbl_offset): Rename from add_AT_section_offset.\n+\t(print_die, size_of_die, value_format, output_die): Adjust.\n+\n+Thu Mar 11 10:27:42 1999  Robert Lipe  <robertlipe@usa.net>\n+\n+\t* dwarf2out.c (TEXT_SECTION_LAABEL, DEBUG_LINE_SECTION_LABEL,\n+\tDEBUG_INFO_SECTION_LABEL, ABBREV_SECTION_LABEL, \n+\ttext_section_laabel, debug_line_section_label,\n+\tdebug_info_section_label, abbrev_section_label): New.\n+\t(output_compilation_unit_header):  Emit label associated\n+\twith section instead of section name itself.\n+\t(out_pubnames, output_aranges, output_line_info, \n+\tdwarf2out_finish): Likewise.\n+\t(dwarf2out_init): Build internal label names for sections\n+\tfrom static labels.\n+\n Thu Mar 11 17:28:32 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* sh.md (mulsi3): End mul.l sequence with a no-op move.\n \n Thu Mar 11 08:52:02 1999  Bruce Korb <korb@datadesign.com>\n+\n \t* Makefile.in: activated fixinc/mkfixinc.sh\n \t* configure.in: activated fixinc/mkfixinc.sh\n "}, {"sha": "5ee5535a63970d1a3e532a1187b43c5292528492", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 56, "deletions": 26, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b790721e4e1a1692efd6e526a92c2b617a6f2a2/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b790721e4e1a1692efd6e526a92c2b617a6f2a2/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=8b790721e4e1a1692efd6e526a92c2b617a6f2a2", "patch": "@@ -2013,7 +2013,7 @@ typedef enum\n   dw_val_class_die_ref,\n   dw_val_class_fde_ref,\n   dw_val_class_lbl_id,\n-  dw_val_class_section_offset,\n+  dw_val_class_lbl_offset,\n   dw_val_class_str\n }\n dw_val_class;\n@@ -2092,7 +2092,6 @@ typedef struct dw_val_struct\n       unsigned val_fde_index;\n       char *val_str;\n       char *val_lbl_id;\n-      char *val_section;\n       unsigned char val_flag;\n     }\n   v;\n@@ -2451,7 +2450,7 @@ static void add_AT_addr\t\t\tPROTO((dw_die_ref,\n \t\t\t\t\t       enum dwarf_attribute, char *));\n static void add_AT_lbl_id\t\tPROTO((dw_die_ref,\n \t\t\t\t\t       enum dwarf_attribute, char *));\n-static void add_AT_section_offset\tPROTO((dw_die_ref,\n+static void add_AT_lbl_offset\t\tPROTO((dw_die_ref,\n \t\t\t\t\t       enum dwarf_attribute, char *));\n static int is_extern_subr_die\t\tPROTO((dw_die_ref));\n static dw_attr_ref get_AT\t\tPROTO((dw_die_ref,\n@@ -2624,6 +2623,22 @@ static unsigned lookup_filename\t\tPROTO((char *));\n #define BSS_SECTION\t\t\".bss\"\n #endif\n \n+/* Labels we insert at beginning sections we can reference instead of\n+   the section names themselves. */\n+\n+#ifndef TEXT_SECTION_LABEL\n+#define TEXT_SECTION_LABEL\t \"Ltext\"\n+#endif\n+#ifndef DEBUG_LINE_SECTION_LABEL\n+#define DEBUG_LINE_SECTION_LABEL \"Ldebug_line\"\n+#endif\n+#ifndef DEBUG_INFO_SECTION_LABEL\n+#define DEBUG_INFO_SECTION_LABEL \"Ldebug_info\"\n+#endif\n+#ifndef ABBREV_SECTION_LABEL\n+#define ABBREV_SECTION_LABEL     \"Ldebug_abbrev\"\n+#endif\n+\n \n /* Definitions of defaults for formats and names of various special\n    (artificial) labels which may be generated within this file (when the -g\n@@ -2632,6 +2647,10 @@ static unsigned lookup_filename\t\tPROTO((char *));\n    typically, overriding these defaults is unnecessary.  */\n \n static char text_end_label[MAX_ARTIFICIAL_LABEL_BYTES];\n+static char text_section_label[MAX_ARTIFICIAL_LABEL_BYTES];\n+static char abbrev_section_label[MAX_ARTIFICIAL_LABEL_BYTES];\n+static char debug_info_section_label[MAX_ARTIFICIAL_LABEL_BYTES];\n+static char debug_line_section_label[MAX_ARTIFICIAL_LABEL_BYTES];\n \n #ifndef TEXT_END_LABEL\n #define TEXT_END_LABEL\t\t\"Letext\"\n@@ -3831,17 +3850,17 @@ add_AT_lbl_id (die, attr_kind, lbl_id)\n /* Add a section offset attribute value to a DIE.  */\n \n static inline void\n-add_AT_section_offset (die, attr_kind, section)\n+add_AT_lbl_offset (die, attr_kind, label)\n      register dw_die_ref die;\n      register enum dwarf_attribute attr_kind;\n-     register char *section;\n+     register char *label;\n {\n   register dw_attr_ref attr = (dw_attr_ref) xmalloc (sizeof (dw_attr_node));\n \n   attr->dw_attr_next = NULL;\n   attr->dw_attr = attr_kind;\n-  attr->dw_attr_val.val_class = dw_val_class_section_offset;\n-  attr->dw_attr_val.v.val_section = section;\n+  attr->dw_attr_val.val_class = dw_val_class_lbl_offset;\n+  attr->dw_attr_val.v.val_lbl_id = label;\n   add_dwarf_attr (die, attr);\n   \n }\n@@ -4304,11 +4323,9 @@ print_die (die, outfile)\n \t    fprintf (outfile, \"die -> <null>\");\n \t  break;\n \tcase dw_val_class_lbl_id:\n+\tcase dw_val_class_lbl_offset:\n \t  fprintf (outfile, \"label: %s\", a->dw_attr_val.v.val_lbl_id);\n \t  break;\n-\tcase dw_val_class_section_offset:\n-\t  fprintf (outfile, \"section: %s\", a->dw_attr_val.v.val_section);\n-\t  break;\n \tcase dw_val_class_str:\n \t  if (a->dw_attr_val.v.val_str != NULL)\n \t    fprintf (outfile, \"\\\"%s\\\"\", a->dw_attr_val.v.val_str);\n@@ -4672,7 +4689,7 @@ size_of_die (die)\n \tcase dw_val_class_lbl_id:\n \t  size += PTR_SIZE;\n \t  break;\n-\tcase dw_val_class_section_offset:\n+\tcase dw_val_class_lbl_offset:\n \t  size += DWARF_OFFSET_SIZE;\n \t  break;\n \tcase dw_val_class_str:\n@@ -4985,7 +5002,7 @@ value_format (v)\n       return DW_FORM_data;\n     case dw_val_class_lbl_id:\n       return DW_FORM_addr;\n-    case dw_val_class_section_offset:\n+    case dw_val_class_lbl_offset:\n       return DW_FORM_data;\n     case dw_val_class_str:\n       return DW_FORM_string;\n@@ -5360,10 +5377,8 @@ output_die (die)\n \t  ASM_OUTPUT_DWARF_ADDR (asm_out_file, a->dw_attr_val.v.val_lbl_id);\n \t  break;\n \n-\tcase dw_val_class_section_offset:\n-\t  ASM_OUTPUT_DWARF_OFFSET (asm_out_file,\n-\t\t\t\t   stripattributes\n-\t\t\t\t   (a->dw_attr_val.v.val_section));\n+\tcase dw_val_class_lbl_offset:\n+\t  ASM_OUTPUT_DWARF_OFFSET (asm_out_file, a->dw_attr_val.v.val_lbl_id);\n \t  break;\n \n \tcase dw_val_class_str:\n@@ -5423,7 +5438,7 @@ output_compilation_unit_header ()\n     fprintf (asm_out_file, \"\\t%s DWARF version number\", ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n-  ASM_OUTPUT_DWARF_OFFSET (asm_out_file, stripattributes (ABBREV_SECTION));\n+  ASM_OUTPUT_DWARF_OFFSET (asm_out_file, abbrev_section_label);\n   if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Offset Into Abbrev. Section\",\n \t     ASM_COMMENT_START);\n@@ -5496,7 +5511,7 @@ output_pubnames ()\n     fprintf (asm_out_file, \"\\t%s DWARF Version\", ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n-  ASM_OUTPUT_DWARF_OFFSET (asm_out_file, stripattributes (DEBUG_INFO_SECTION));\n+  ASM_OUTPUT_DWARF_OFFSET (asm_out_file, debug_info_section_label);\n   if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Offset of Compilation Unit Info.\",\n \t     ASM_COMMENT_START);\n@@ -5577,7 +5592,7 @@ output_aranges ()\n     fprintf (asm_out_file, \"\\t%s DWARF Version\", ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n-  ASM_OUTPUT_DWARF_OFFSET (asm_out_file, stripattributes (DEBUG_INFO_SECTION));\n+  ASM_OUTPUT_DWARF_OFFSET (asm_out_file, debug_info_section_label);\n   if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Offset of Compilation Unit Info.\",\n \t     ASM_COMMENT_START);\n@@ -5603,13 +5618,13 @@ output_aranges ()\n \t     ASM_COMMENT_START, 2 * PTR_SIZE);\n \n   fputc ('\\n', asm_out_file);\n-  ASM_OUTPUT_DWARF_ADDR (asm_out_file, stripattributes (TEXT_SECTION));\n+  ASM_OUTPUT_DWARF_ADDR (asm_out_file, text_section_label);\n   if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Address\", ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n   ASM_OUTPUT_DWARF_ADDR_DELTA (asm_out_file, text_end_label,\n-\t\t\t       stripattributes (TEXT_SECTION));\n+\t\t\t       text_section_label);\n   if (flag_debug_asm)\n     fprintf (asm_out_file, \"%s Length\", ASM_COMMENT_START);\n \n@@ -5794,14 +5809,14 @@ output_line_info ()\n   fputc ('\\n', asm_out_file);\n   ASM_OUTPUT_DWARF_DATA1 (asm_out_file, DW_LNE_set_address);\n   fputc ('\\n', asm_out_file);\n-  ASM_OUTPUT_DWARF_ADDR (asm_out_file, stripattributes (TEXT_SECTION));\n+  ASM_OUTPUT_DWARF_ADDR (asm_out_file, text_section_label);\n   fputc ('\\n', asm_out_file);\n \n   /* Generate the line number to PC correspondence table, encoded as\n      a series of state machine operations.  */\n   current_file = 1;\n   current_line = 1;\n-  strcpy (prev_line_label, stripattributes (TEXT_SECTION));\n+  strcpy (prev_line_label, text_section_label);\n   for (lt_index = 1; lt_index < line_info_table_in_use; ++lt_index)\n     {\n       register dw_line_info_ref line_info;\n@@ -9853,6 +9868,21 @@ dwarf2out_init (asm_out_file, main_input_filename)\n   gen_compile_unit_die (main_input_filename);\n \n   ASM_GENERATE_INTERNAL_LABEL (text_end_label, TEXT_END_LABEL, 0);\n+  ASM_GENERATE_INTERNAL_LABEL (abbrev_section_label, ABBREV_SECTION_LABEL, 0);\n+  ASM_GENERATE_INTERNAL_LABEL (text_section_label, TEXT_SECTION_LABEL, 0);\n+  ASM_GENERATE_INTERNAL_LABEL (debug_info_section_label, \n+\t\t\t       DEBUG_INFO_SECTION_LABEL, 0);\n+  ASM_GENERATE_INTERNAL_LABEL (debug_line_section_label, \n+\t\t\t       DEBUG_LINE_SECTION_LABEL, 0);\n+\n+  ASM_OUTPUT_SECTION (asm_out_file, ABBREV_SECTION);\n+  ASM_OUTPUT_LABEL (asm_out_file, abbrev_section_label);\n+  ASM_OUTPUT_SECTION (asm_out_file, TEXT_SECTION);\n+  ASM_OUTPUT_LABEL (asm_out_file, text_section_label);\n+  ASM_OUTPUT_SECTION (asm_out_file, DEBUG_INFO_SECTION);\n+  ASM_OUTPUT_LABEL (asm_out_file, debug_info_section_label);\n+  ASM_OUTPUT_SECTION (asm_out_file, DEBUG_LINE_SECTION);\n+  ASM_OUTPUT_LABEL (asm_out_file, debug_line_section_label);\n }\n \n /* Output stuff that dwarf requires at the end of every file,\n@@ -9920,12 +9950,12 @@ dwarf2out_finish ()\n \t was in .text.  */\n       if (separate_line_info_table_in_use == 0)\n \t{\n-\t  add_AT_lbl_id (comp_unit_die, DW_AT_low_pc,\n-\t\t\t stripattributes (TEXT_SECTION));\n+\t  add_AT_lbl_id (comp_unit_die, DW_AT_low_pc, text_section_label);\n \t  add_AT_lbl_id (comp_unit_die, DW_AT_high_pc, text_end_label);\n \t}\n \n-      add_AT_section_offset (comp_unit_die, DW_AT_stmt_list, DEBUG_LINE_SECTION);\n+      add_AT_lbl_offset (comp_unit_die, DW_AT_stmt_list,\n+\t\t\t debug_line_section_label);\n     }\n \n   /* Output the abbreviation table.  */"}]}