{"sha": "06b3ba23eb6ff965a92cd99d2835d4c29316a447", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZiM2JhMjNlYjZmZjk2NWE5MmNkOTlkMjgzNWQ0YzI5MzE2YTQ0Nw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-15T08:37:14Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-15T08:37:14Z"}, "message": "[AArch64] Add MOVPRFX alternatives for SVE EXT patterns\n\nWe use EXT both to implement vec_extract for large indices and as a\npermute.  In both cases we can use MOVPRFX to handle the case in which\nthe first input and output can't be tied.\n\n2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-sve.md (*vec_extract<mode><Vel>_ext)\n\t(*aarch64_sve_ext<mode>): Add MOVPRFX alternatives.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/ext_2.c: Expect a MOVPRFX.\n\t* gcc.target/aarch64/sve/ext_3.c: New test.\n\nFrom-SVN: r274515", "tree": {"sha": "318b8d020e52354c789c169d538ca72cfdc781a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/318b8d020e52354c789c169d538ca72cfdc781a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06b3ba23eb6ff965a92cd99d2835d4c29316a447", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06b3ba23eb6ff965a92cd99d2835d4c29316a447", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06b3ba23eb6ff965a92cd99d2835d4c29316a447", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06b3ba23eb6ff965a92cd99d2835d4c29316a447/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ae21bd133c357fcd7b6e06dc7d7d9e0660abe2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ae21bd133c357fcd7b6e06dc7d7d9e0660abe2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ae21bd133c357fcd7b6e06dc7d7d9e0660abe2c"}], "stats": {"total": 50, "additions": 41, "deletions": 9}, "files": [{"sha": "cb39212683cbd407b53954e9ab46cbc84e789863", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b3ba23eb6ff965a92cd99d2835d4c29316a447/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b3ba23eb6ff965a92cd99d2835d4c29316a447/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06b3ba23eb6ff965a92cd99d2835d4c29316a447", "patch": "@@ -1,3 +1,8 @@\n+2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve.md (*vec_extract<mode><Vel>_ext)\n+\t(*aarch64_sve_ext<mode>): Add MOVPRFX alternatives.\n+\n 2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64-sve.md (*sub<SVE_F:mode>3): Remove immediate"}, {"sha": "9007a79d0e974a260227768555158b1d121c783a", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b3ba23eb6ff965a92cd99d2835d4c29316a447/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b3ba23eb6ff965a92cd99d2835d4c29316a447/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=06b3ba23eb6ff965a92cd99d2835d4c29316a447", "patch": "@@ -1356,16 +1356,19 @@\n ;; Extract an element outside the range of DUP.  This pattern requires the\n ;; source and destination to be the same.\n (define_insn \"*vec_extract<mode><Vel>_ext\"\n-  [(set (match_operand:<VEL> 0 \"register_operand\" \"=w\")\n+  [(set (match_operand:<VEL> 0 \"register_operand\" \"=w, ?&w\")\n \t(vec_select:<VEL>\n-\t  (match_operand:SVE_ALL 1 \"register_operand\" \"0\")\n+\t  (match_operand:SVE_ALL 1 \"register_operand\" \"0, w\")\n \t  (parallel [(match_operand:SI 2 \"const_int_operand\")])))]\n   \"TARGET_SVE && INTVAL (operands[2]) * GET_MODE_SIZE (<VEL>mode) >= 64\"\n   {\n     operands[0] = gen_rtx_REG (<MODE>mode, REGNO (operands[0]));\n     operands[2] = GEN_INT (INTVAL (operands[2]) * GET_MODE_SIZE (<VEL>mode));\n-    return \"ext\\t%0.b, %0.b, %0.b, #%2\";\n+    return (which_alternative == 0\n+\t    ? \"ext\\t%0.b, %0.b, %0.b, #%2\"\n+\t    : \"movprfx\\t%0, %1\\;ext\\t%0.b, %0.b, %1.b, #%2\");\n   }\n+  [(set_attr \"movprfx\" \"*,yes\")]\n )\n \n ;; -------------------------------------------------------------------------\n@@ -4700,17 +4703,20 @@\n ;; Concatenate two vectors and extract a subvector.  Note that the\n ;; immediate (third) operand is the lane index not the byte index.\n (define_insn \"*aarch64_sve_ext<mode>\"\n-  [(set (match_operand:SVE_ALL 0 \"register_operand\" \"=w\")\n-\t(unspec:SVE_ALL [(match_operand:SVE_ALL 1 \"register_operand\" \"0\")\n-\t\t\t (match_operand:SVE_ALL 2 \"register_operand\" \"w\")\n+  [(set (match_operand:SVE_ALL 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_ALL [(match_operand:SVE_ALL 1 \"register_operand\" \"0, w\")\n+\t\t\t (match_operand:SVE_ALL 2 \"register_operand\" \"w, w\")\n \t\t\t (match_operand:SI 3 \"const_int_operand\")]\n \t\t\tUNSPEC_EXT))]\n   \"TARGET_SVE\n    && IN_RANGE (INTVAL (operands[3]) * GET_MODE_SIZE (<VEL>mode), 0, 255)\"\n   {\n     operands[3] = GEN_INT (INTVAL (operands[3]) * GET_MODE_SIZE (<VEL>mode));\n-    return \"ext\\\\t%0.b, %0.b, %2.b, #%3\";\n+    return (which_alternative == 0\n+\t    ? \"ext\\\\t%0.b, %0.b, %2.b, #%3\"\n+\t    : \"movprfx\\t%0, %1\\;ext\\\\t%0.b, %0.b, %2.b, #%3\");\n   }\n+  [(set_attr \"movprfx\" \"*,yes\")]\n )\n \n ;; -------------------------------------------------------------------------"}, {"sha": "731249adbdf5963752e42d4d268fd55977affdc1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b3ba23eb6ff965a92cd99d2835d4c29316a447/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b3ba23eb6ff965a92cd99d2835d4c29316a447/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=06b3ba23eb6ff965a92cd99d2835d4c29316a447", "patch": "@@ -1,3 +1,8 @@\n+2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/ext_2.c: Expect a MOVPRFX.\n+\t* gcc.target/aarch64/sve/ext_3.c: New test.\n+\n 2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n "}, {"sha": "5593b070ca77e6c09bdb4a6f0913fea66c752f5d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/ext_2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b3ba23eb6ff965a92cd99d2835d4c29316a447/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fext_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b3ba23eb6ff965a92cd99d2835d4c29316a447/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fext_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fext_2.c?ref=06b3ba23eb6ff965a92cd99d2835d4c29316a447", "patch": "@@ -14,5 +14,4 @@ foo (void)\n   asm volatile (\"\" :: \"w\" (x));\n }\n \n-/* { dg-final { scan-assembler {\\tmov\\tz0\\.d, z1\\.d\\n} } } */\n-/* { dg-final { scan-assembler {\\text\\tz0\\.b, z0\\.b, z[01]\\.b, #4\\n} } } */\n+/* { dg-final { scan-assembler {\\tmovprfx\\tz0, z1\\n\\text\\tz0\\.b, z0\\.b, z1\\.b, #4\\n} } } */"}, {"sha": "83c04c856a443f127cd9bc7e7f34fd108506b05b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/ext_3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b3ba23eb6ff965a92cd99d2835d4c29316a447/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fext_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b3ba23eb6ff965a92cd99d2835d4c29316a447/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fext_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fext_3.c?ref=06b3ba23eb6ff965a92cd99d2835d4c29316a447", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -msve-vector-bits=1024\" } */\n+\n+typedef int vnx4si __attribute__((vector_size (128)));\n+\n+void\n+foo (void)\n+{\n+  register int x asm (\"z0\");\n+  register vnx4si y asm (\"z1\");\n+\n+  asm volatile (\"\" : \"=w\" (y));\n+  x = y[21];\n+  asm volatile (\"\" :: \"w\" (x));\n+}\n+\n+/* { dg-final { scan-assembler {\\tmovprfx\\tz0, z1\\n\\text\\tz0\\.b, z0\\.b, z1\\.b, #84\\n} } } */"}]}