{"sha": "70356f771a65b378362b08d5fdb926fbb88e4aa7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAzNTZmNzcxYTY1YjM3ODM2MmIwOGQ1ZmRiOTI2ZmJiODhlNGFhNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-12-15T21:39:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-12-15T21:39:20Z"}, "message": "re PR c++/81197 (ICE with structured binding and lifetime-extended temporaries)\n\n\tPR c++/81197\n\t* cp-tree.h (cp_maybe_mangle_decomp): Declare.\n\t* decl.c (cp_maybe_mangle_decomp): New function.\n\t(cp_finish_decomp): Don't SET_DECL_ASSEMBLER_NAME here.\n\t* parser.c (cp_convert_range_for,\n\tcp_parser_decomposition_declaration): Call cp_maybe_mangle_decomp.\n\t* pt.c (tsubst_expr): Likewise.\n\t* mangle.c (find_decomp_unqualified_name): New function.\n\t(write_unqualified_name): Handle DECL_DECOMPOSITION_P\n\twhere DECL_ASSEMBLER_NAME is already set.\n\n\t* g++.dg/cpp1z/decomp34.C: New test.\n\nFrom-SVN: r255705", "tree": {"sha": "b5ee5b2b815030b7f06772d64cb74ea7a4a26e7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5ee5b2b815030b7f06772d64cb74ea7a4a26e7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70356f771a65b378362b08d5fdb926fbb88e4aa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70356f771a65b378362b08d5fdb926fbb88e4aa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70356f771a65b378362b08d5fdb926fbb88e4aa7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70356f771a65b378362b08d5fdb926fbb88e4aa7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a8c55cacaf8fa1e90f9e26c467a78081ae152b50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8c55cacaf8fa1e90f9e26c467a78081ae152b50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8c55cacaf8fa1e90f9e26c467a78081ae152b50"}], "stats": {"total": 124, "additions": 115, "deletions": 9}, "files": [{"sha": "d96b679de630687f0c7065b667c4d317d07c0300", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70356f771a65b378362b08d5fdb926fbb88e4aa7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70356f771a65b378362b08d5fdb926fbb88e4aa7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=70356f771a65b378362b08d5fdb926fbb88e4aa7", "patch": "@@ -1,5 +1,16 @@\n 2017-12-15  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/81197\n+\t* cp-tree.h (cp_maybe_mangle_decomp): Declare.\n+\t* decl.c (cp_maybe_mangle_decomp): New function.\n+\t(cp_finish_decomp): Don't SET_DECL_ASSEMBLER_NAME here.\n+\t* parser.c (cp_convert_range_for,\n+\tcp_parser_decomposition_declaration): Call cp_maybe_mangle_decomp.\n+\t* pt.c (tsubst_expr): Likewise.\n+\t* mangle.c (find_decomp_unqualified_name): New function.\n+\t(write_unqualified_name): Handle DECL_DECOMPOSITION_P\n+\twhere DECL_ASSEMBLER_NAME is already set.\n+\n \tPR c++/80135\n \tPR c++/81922\n \t* typeck2.c (digest_init_r): Change nested argument type from bool to"}, {"sha": "f5f974da72857424c2deb53e2544718bcc903ea2", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70356f771a65b378362b08d5fdb926fbb88e4aa7/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70356f771a65b378362b08d5fdb926fbb88e4aa7/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=70356f771a65b378362b08d5fdb926fbb88e4aa7", "patch": "@@ -6149,6 +6149,7 @@ extern void start_decl_1\t\t\t(tree, bool);\n extern bool check_array_initializer\t\t(tree, tree, tree);\n extern void cp_finish_decl\t\t\t(tree, tree, bool, tree, int);\n extern tree lookup_decomp_type\t\t\t(tree);\n+extern void cp_maybe_mangle_decomp\t\t(tree, tree, unsigned int);\n extern void cp_finish_decomp\t\t\t(tree, tree, unsigned int);\n extern int cp_complete_array_type\t\t(tree *, tree, bool);\n extern int cp_complete_array_type_or_error\t(tree *, tree, bool, tsubst_flags_t);"}, {"sha": "0e6ee059e230474faa133d0ee9b3183e74d76e87", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70356f771a65b378362b08d5fdb926fbb88e4aa7/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70356f771a65b378362b08d5fdb926fbb88e4aa7/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=70356f771a65b378362b08d5fdb926fbb88e4aa7", "patch": "@@ -7339,6 +7339,25 @@ lookup_decomp_type (tree v)\n   return *decomp_type_table->get (v);\n }\n \n+/* Mangle a decomposition declaration if needed.  Arguments like\n+   in cp_finish_decomp.  */\n+\n+void\n+cp_maybe_mangle_decomp (tree decl, tree first, unsigned int count)\n+{\n+  if (!processing_template_decl\n+      && !error_operand_p (decl)\n+      && DECL_NAMESPACE_SCOPE_P (decl))\n+    {\n+      auto_vec<tree, 16> v;\n+      v.safe_grow (count);\n+      tree d = first;\n+      for (unsigned int i = 0; i < count; i++, d = DECL_CHAIN (d))\n+\tv[count - i - 1] = d;\n+      SET_DECL_ASSEMBLER_NAME (decl, mangle_decomp (decl, v));\n+    }\n+}\n+\n /* Finish a decomposition declaration.  DECL is the underlying declaration\n    \"e\", FIRST is the head of a chain of decls for the individual identifiers\n    chained through DECL_CHAIN in reverse order and COUNT is the number of\n@@ -7612,8 +7631,6 @@ cp_finish_decomp (tree decl, tree first, unsigned int count)\n \t    DECL_HAS_VALUE_EXPR_P (v[i]) = 1;\n \t  }\n     }\n-  else if (DECL_NAMESPACE_SCOPE_P (decl))\n-    SET_DECL_ASSEMBLER_NAME (decl, mangle_decomp (decl, v));\n }\n \n /* Returns a declaration for a VAR_DECL as if:"}, {"sha": "ffd2b4c5844e374aa52c186873ca77355fb755d7", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70356f771a65b378362b08d5fdb926fbb88e4aa7/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70356f771a65b378362b08d5fdb926fbb88e4aa7/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=70356f771a65b378362b08d5fdb926fbb88e4aa7", "patch": "@@ -1247,6 +1247,51 @@ write_template_prefix (const tree node)\n   add_substitution (substitution);\n }\n \n+/* As the list of identifiers for the structured binding declaration\n+   DECL is likely gone, try to recover the DC <source-name>+ E portion\n+   from its mangled name.  Return pointer to the DC and set len to\n+   the length up to and including the terminating E.  On failure\n+   return NULL.  */\n+\n+static const char *\n+find_decomp_unqualified_name (tree decl, size_t *len)\n+{\n+  const char *p = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n+  const char *end = p + IDENTIFIER_LENGTH (DECL_ASSEMBLER_NAME (decl));\n+  bool nested = false;\n+  if (strncmp (p, \"_Z\", 2))\n+    return NULL;\n+  p += 2;\n+  if (!strncmp (p, \"St\", 2))\n+    p += 2;\n+  else if (*p == 'N')\n+    {\n+      nested = true;\n+      ++p;\n+      while (ISDIGIT (p[0]))\n+\t{\n+\t  char *e;\n+\t  long num = strtol (p, &e, 10);\n+\t  if (num >= 1 && num < end - e)\n+\t    p = e + num;\n+\t  else\n+\t    break;\n+\t}\n+    }\n+  if (strncmp (p, \"DC\", 2))\n+    return NULL;\n+  if (nested)\n+    {\n+      if (end[-1] != 'E')\n+\treturn NULL;\n+      --end;\n+    }\n+  if (end[-1] != 'E')\n+    return NULL;\n+  *len = end - p;\n+  return p;\n+}\n+\n /* We don't need to handle thunks, vtables, or VTTs here.  Those are\n    mangled through special entry points.\n \n@@ -1291,7 +1336,17 @@ write_unqualified_name (tree decl)\n     {\n       found = true;\n       gcc_assert (DECL_ASSEMBLER_NAME_SET_P (decl));\n-      write_source_name (DECL_ASSEMBLER_NAME (decl));\n+      const char *decomp_str = NULL;\n+      size_t decomp_len = 0;\n+      if (VAR_P (decl)\n+\t  && DECL_DECOMPOSITION_P (decl)\n+\t  && DECL_NAME (decl) == NULL_TREE\n+\t  && DECL_NAMESPACE_SCOPE_P (decl))\n+\tdecomp_str = find_decomp_unqualified_name (decl, &decomp_len);\n+      if (decomp_str)\n+\twrite_chars (decomp_str, decomp_len);\n+      else\n+\twrite_source_name (DECL_ASSEMBLER_NAME (decl));\n     }\n   else if (DECL_DECLARES_FUNCTION_P (decl))\n     {"}, {"sha": "e13e127d45fefe30874305c2f91b0d39f1a61bdd", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70356f771a65b378362b08d5fdb926fbb88e4aa7/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70356f771a65b378362b08d5fdb926fbb88e4aa7/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=70356f771a65b378362b08d5fdb926fbb88e4aa7", "patch": "@@ -11940,6 +11940,9 @@ cp_convert_range_for (tree statement, tree range_decl, tree range_expr,\n \t\t\t\t     tf_warning_or_error);\n   finish_for_expr (expression, statement);\n \n+  if (VAR_P (range_decl) && DECL_DECOMPOSITION_P (range_decl))\n+    cp_maybe_mangle_decomp (range_decl, decomp_first_name, decomp_cnt);\n+\n   /* The declaration is initialized with *__begin inside the loop body.  */\n   cp_finish_decl (range_decl,\n \t\t  build_x_indirect_ref (input_location, begin, RO_UNARY_STAR,\n@@ -13283,6 +13286,7 @@ cp_parser_decomposition_declaration (cp_parser *parser,\n \n       if (decl != error_mark_node)\n \t{\n+\t  cp_maybe_mangle_decomp (decl, prev, v.length ());\n \t  cp_finish_decl (decl, initializer, non_constant_p, NULL_TREE,\n \t\t\t  is_direct_init ? LOOKUP_NORMAL : LOOKUP_IMPLICIT);\n \t  cp_finish_decomp (decl, prev, v.length ());"}, {"sha": "dc50f31034b3015ebc1941612b8f632fad54e5af", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70356f771a65b378362b08d5fdb926fbb88e4aa7/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70356f771a65b378362b08d5fdb926fbb88e4aa7/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=70356f771a65b378362b08d5fdb926fbb88e4aa7", "patch": "@@ -16135,19 +16135,23 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \t\t    if (VAR_P (decl))\n \t\t      const_init = (DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P\n \t\t\t\t    (pattern_decl));\n-\t\t    cp_finish_decl (decl, init, const_init, NULL_TREE, 0);\n \t\t    if (VAR_P (decl)\n \t\t\t&& DECL_DECOMPOSITION_P (decl)\n \t\t\t&& TREE_TYPE (pattern_decl) != error_mark_node)\n \t\t      {\n \t\t\tunsigned int cnt;\n \t\t\ttree first;\n-\t\t\tdecl = tsubst_decomp_names (decl, pattern_decl, args,\n-\t\t\t\t\t\t    complain, in_decl, &first,\n-\t\t\t\t\t\t    &cnt);\n-\t\t\tif (decl != error_mark_node)\n-\t\t\t  cp_finish_decomp (decl, first, cnt);\n+\t\t\ttree ndecl\n+\t\t\t  = tsubst_decomp_names (decl, pattern_decl, args,\n+\t\t\t\t\t\t complain, in_decl, &first, &cnt);\n+\t\t\tif (ndecl != error_mark_node)\n+\t\t\t  cp_maybe_mangle_decomp (ndecl, first, cnt);\n+\t\t\tcp_finish_decl (decl, init, const_init, NULL_TREE, 0);\n+\t\t\tif (ndecl != error_mark_node)\n+\t\t\t  cp_finish_decomp (ndecl, first, cnt);\n \t\t      }\n+\t\t    else\n+\t\t      cp_finish_decl (decl, init, const_init, NULL_TREE, 0);\n \t\t  }\n \t      }\n \t  }"}, {"sha": "ba86d2f938091f015acbe40638b749b3576f779d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70356f771a65b378362b08d5fdb926fbb88e4aa7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70356f771a65b378362b08d5fdb926fbb88e4aa7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=70356f771a65b378362b08d5fdb926fbb88e4aa7", "patch": "@@ -1,5 +1,8 @@\n 2017-12-15  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/81197\n+\t* g++.dg/cpp1z/decomp34.C: New test.\n+\n \tPR c++/80135\n \tPR c++/81922\n \t* g++.dg/warn/Wplacement-new-size-1.C (fBx1): Initialize nested"}, {"sha": "c7f0b8ac16e931be9cc109d9b76250f156e53071", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp34.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70356f771a65b378362b08d5fdb926fbb88e4aa7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70356f771a65b378362b08d5fdb926fbb88e4aa7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp34.C?ref=70356f771a65b378362b08d5fdb926fbb88e4aa7", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/81197\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"\" }\n+\n+struct X { int a; };\n+struct Y { int b, c, d; };\n+auto&& [t] = X{};\t// { dg-warning \"structured bindings only available with\" \"\" { target c++14_down } }\n+namespace A { namespace B { auto&& [u, v, ww] = Y{}; } }\t// { dg-warning \"structured bindings only available with\" \"\" { target c++14_down } }\n+\n+// { dg-final { scan-assembler \"_ZGRDC1tE0\" } }\n+// { dg-final { scan-assembler \"_ZGRN1A1BDC1u1v2wwEE1\" } }"}]}