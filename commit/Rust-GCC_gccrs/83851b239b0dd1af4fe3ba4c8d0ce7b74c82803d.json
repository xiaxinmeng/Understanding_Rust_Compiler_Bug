{"sha": "83851b239b0dd1af4fe3ba4c8d0ce7b74c82803d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM4NTFiMjM5YjBkZDFhZjRmZTNiYTRjOGQwY2U3Yjc0YzgyODAzZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-11T12:38:20Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-11T12:38:20Z"}, "message": "[multiple changes]\n\n2013-04-11  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_util.adb (Set_Entity_With_Style_Check): Fix logic of\n\tcheck for implementation defined identifiers.\n\n2013-04-11  Yannick Moy  <moy@adacore.com>\n\n\t* checks.adb (Apply_Type_Conversion_Checks): Add an explanation\n\tof why range check and length are put on different nodes.\n\t* exp_ch4.adb (Apply_Type_Conversion_Checks): Remove check marks\n\twhen doing their expansion.\n\nFrom-SVN: r197776", "tree": {"sha": "2006f8c14d7772427d0df93a4483c5b7fa2bd8db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2006f8c14d7772427d0df93a4483c5b7fa2bd8db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83851b239b0dd1af4fe3ba4c8d0ce7b74c82803d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83851b239b0dd1af4fe3ba4c8d0ce7b74c82803d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83851b239b0dd1af4fe3ba4c8d0ce7b74c82803d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83851b239b0dd1af4fe3ba4c8d0ce7b74c82803d/comments", "author": null, "committer": null, "parents": [{"sha": "e6425869abeaf52c2c23e924140baa6c28dc9118", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6425869abeaf52c2c23e924140baa6c28dc9118", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6425869abeaf52c2c23e924140baa6c28dc9118"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "cb502858934413192c22bf14559b391e26f12969", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83851b239b0dd1af4fe3ba4c8d0ce7b74c82803d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83851b239b0dd1af4fe3ba4c8d0ce7b74c82803d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=83851b239b0dd1af4fe3ba4c8d0ce7b74c82803d", "patch": "@@ -1,3 +1,15 @@\n+2013-04-11  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_util.adb (Set_Entity_With_Style_Check): Fix logic of\n+\tcheck for implementation defined identifiers.\n+\n+2013-04-11  Yannick Moy  <moy@adacore.com>\n+\n+\t* checks.adb (Apply_Type_Conversion_Checks): Add an explanation\n+\tof why range check and length are put on different nodes.\n+\t* exp_ch4.adb (Apply_Type_Conversion_Checks): Remove check marks\n+\twhen doing their expansion.\n+\n 2013-04-11  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_util.ads, sem_util.adb (Get_Incomplete_View_Of_Ancestor):"}, {"sha": "640f0127c3cb4cbb58f77eacd7f50c157f84b4b5", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83851b239b0dd1af4fe3ba4c8d0ce7b74c82803d/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83851b239b0dd1af4fe3ba4c8d0ce7b74c82803d/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=83851b239b0dd1af4fe3ba4c8d0ce7b74c82803d", "patch": "@@ -3248,7 +3248,9 @@ package body Checks is\n       --  expansion, to take into accounts changes of representation. The\n       --  checks become range checks on the base type or length checks on the\n       --  subtype, depending on whether the target type is unconstrained or\n-      --  constrained.\n+      --  constrained. Note that the range check is put on the expression of a\n+      --  type conversion, while the length check is put on the type conversion\n+      --  itself.\n \n       elsif Is_Array_Type (Target_Type) then\n          if Is_Constrained (Target_Type) then"}, {"sha": "480151df7091b4d3397f2ceb949bcfe16c2fe2ef", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83851b239b0dd1af4fe3ba4c8d0ce7b74c82803d/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83851b239b0dd1af4fe3ba4c8d0ce7b74c82803d/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=83851b239b0dd1af4fe3ba4c8d0ce7b74c82803d", "patch": "@@ -10053,6 +10053,19 @@ package body Exp_Ch4 is\n    --  Start of processing for Expand_N_Type_Conversion\n \n    begin\n+      --  First remove check marks put by the semantic analysis on the type\n+      --  conversion between array types. The front end expands these checks\n+      --  explicitly, so they should not be set in the tree passed to the back\n+      --  end.\n+\n+      if Is_Array_Type (Target_Type) then\n+         if Is_Constrained (Target_Type) then\n+            Set_Do_Length_Check (N, False);\n+         else\n+            Set_Do_Range_Check (Operand, False);\n+         end if;\n+      end if;\n+\n       --  Nothing at all to do if conversion is to the identical type so remove\n       --  the conversion completely, it is useless, except that it may carry\n       --  an Assignment_OK attribute, which must be propagated to the operand."}, {"sha": "2892c8800810fd5efe3c85359a54307237642734", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83851b239b0dd1af4fe3ba4c8d0ce7b74c82803d/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83851b239b0dd1af4fe3ba4c8d0ce7b74c82803d/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=83851b239b0dd1af4fe3ba4c8d0ce7b74c82803d", "patch": "@@ -13419,9 +13419,10 @@ package body Sem_Util is\n          --  the entities within it).\n \n          if (Is_Implementation_Defined (Val)\n+               or else\n+             Is_Implementation_Defined (Scope (Val)))\n               and then not (Ekind_In (Val, E_Package, E_Generic_Package)\n-                              and then Is_Library_Level_Entity (Val)))\n-           or else Is_Implementation_Defined (Scope (Val))\n+                              and then Is_Library_Level_Entity (Val))\n          then\n             Check_Restriction (No_Implementation_Identifiers, N);\n          end if;"}]}