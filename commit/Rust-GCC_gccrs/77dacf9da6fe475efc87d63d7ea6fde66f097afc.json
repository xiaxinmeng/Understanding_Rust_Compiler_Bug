{"sha": "77dacf9da6fe475efc87d63d7ea6fde66f097afc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdkYWNmOWRhNmZlNDc1ZWZjODdkNjNkN2VhNmZkZTY2ZjA5N2FmYw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-11-04T09:07:09Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-11-04T09:07:09Z"}, "message": "re PR fortran/81735 (double free or corruption (fasttop) error (SIGABRT) with character(:) and custom return type with allocatable)\n\n2017-11-04  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/81735\n\t* trans-decl.c (gfc_trans_deferred_vars): Do a better job of a\n\tcase where 'tmp' was used unititialized and remove TODO.\n\n2017-11-04  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/81735\n\t* gfortran.dg/pr81735.f90: New test.\n\nFrom-SVN: r254404", "tree": {"sha": "9cfc4eb9f5646646c65966c675409c8089598d49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cfc4eb9f5646646c65966c675409c8089598d49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77dacf9da6fe475efc87d63d7ea6fde66f097afc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77dacf9da6fe475efc87d63d7ea6fde66f097afc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77dacf9da6fe475efc87d63d7ea6fde66f097afc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77dacf9da6fe475efc87d63d7ea6fde66f097afc/comments", "author": null, "committer": null, "parents": [{"sha": "9cfdd48417dce7d29a410510d2fb0e9b74b66878", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cfdd48417dce7d29a410510d2fb0e9b74b66878", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cfdd48417dce7d29a410510d2fb0e9b74b66878"}], "stats": {"total": 45, "additions": 40, "deletions": 5}, "files": [{"sha": "aa43ff4ebffa3c0fbb6473753d84498284c4191b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77dacf9da6fe475efc87d63d7ea6fde66f097afc/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77dacf9da6fe475efc87d63d7ea6fde66f097afc/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=77dacf9da6fe475efc87d63d7ea6fde66f097afc", "patch": "@@ -1,3 +1,9 @@\n+2017-11-04  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/81735\n+\t* trans-decl.c (gfc_trans_deferred_vars): Do a better job of a\n+\tcase where 'tmp' was used unititialized and remove TODO.\n+\n 2017-11-03  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/82796"}, {"sha": "45d5119236a4ee58efbc820c19114182ba78be7b", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77dacf9da6fe475efc87d63d7ea6fde66f097afc/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77dacf9da6fe475efc87d63d7ea6fde66f097afc/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=77dacf9da6fe475efc87d63d7ea6fde66f097afc", "patch": "@@ -4584,7 +4584,10 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \t\t    && sym->ts.u.cl->passed_length)\n \t\ttmp = gfc_null_and_pass_deferred_len (sym, &init, &loc);\n \t      else\n-\t\tgfc_restore_backend_locus (&loc);\n+\t\t{\n+\t\t  gfc_restore_backend_locus (&loc);\n+\t\t  tmp = NULL_TREE;\n+\t\t}\n \n \t      /* Deallocate when leaving the scope. Nullifying is not\n \t\t needed.  */\n@@ -4636,10 +4639,6 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \t\t}\n \n \t      gfc_add_init_cleanup (block, gfc_finish_block (&init), tmp);\n-\t      /* TODO find out why this is necessary to stop double calls to\n-\t\t free.  Somebody is reusing the expression in 'tmp' because\n-\t\t it is being used unititialized.  */\n-\t      tmp = NULL_TREE;\n \t    }\n \t}\n       else if (sym->ts.type == BT_CHARACTER && sym->ts.deferred)"}, {"sha": "10331b39929f57d84e6a3fa1827086afe155367d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77dacf9da6fe475efc87d63d7ea6fde66f097afc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77dacf9da6fe475efc87d63d7ea6fde66f097afc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=77dacf9da6fe475efc87d63d7ea6fde66f097afc", "patch": "@@ -1,3 +1,8 @@\n+2017-11-04  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/81735\n+\t* gfortran.dg/pr81735.f90: New test.\n+\n 2017-11-03  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/82796"}, {"sha": "6aae203aa0fa3275c72c940ae7561bf33058be4c", "filename": "gcc/testsuite/gfortran.dg/pr81735.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77dacf9da6fe475efc87d63d7ea6fde66f097afc/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr81735.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77dacf9da6fe475efc87d63d7ea6fde66f097afc/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr81735.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr81735.f90?ref=77dacf9da6fe475efc87d63d7ea6fde66f097afc", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+! Contributed by Danila  <flashmozzg@gmail.com>\n+!\n+program fooprog\n+    implicit none\n+    type FooType\n+        integer, allocatable :: x\n+    end type FooType\n+\n+    type(FooType), pointer :: bar\n+\n+    bar => foo()\n+\n+contains\n+    function foo() result(res)\n+        type(FooType), pointer :: res\n+\n+        character(:), allocatable :: rt\n+        rt = \"\"\n+        res => null()\n+    end function foo\n+end program fooprog\n+! { dg-final { scan-tree-dump-times \"__builtin_free\" 1 \"original\" } }"}]}