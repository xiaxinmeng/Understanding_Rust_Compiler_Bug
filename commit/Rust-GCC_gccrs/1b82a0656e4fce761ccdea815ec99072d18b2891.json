{"sha": "1b82a0656e4fce761ccdea815ec99072d18b2891", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI4MmEwNjU2ZTRmY2U3NjFjY2RlYTgxNWVjOTkwNzJkMThiMjg5MQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2009-01-13T03:14:32Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2009-01-13T03:14:32Z"}, "message": "add missing target-supports.exp commit\n\nFrom-SVN: r143326", "tree": {"sha": "d4e654bcf60ce2f9959ff1505a1e5d45d53ad336", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4e654bcf60ce2f9959ff1505a1e5d45d53ad336"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b82a0656e4fce761ccdea815ec99072d18b2891", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b82a0656e4fce761ccdea815ec99072d18b2891", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b82a0656e4fce761ccdea815ec99072d18b2891", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b82a0656e4fce761ccdea815ec99072d18b2891/comments", "author": null, "committer": null, "parents": [{"sha": "44c4becf0cec255eb125c8862e39ff765e0d7485", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44c4becf0cec255eb125c8862e39ff765e0d7485", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44c4becf0cec255eb125c8862e39ff765e0d7485"}], "stats": {"total": 59, "additions": 59, "deletions": 0}, "files": [{"sha": "1aa1855a1abe36a025d3858ec1d4cddbc123790d", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b82a0656e4fce761ccdea815ec99072d18b2891/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b82a0656e4fce761ccdea815ec99072d18b2891/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=1b82a0656e4fce761ccdea815ec99072d18b2891", "patch": "@@ -905,6 +905,65 @@ proc check_vmx_hw_available { } {\n     }]\n }\n \n+# Return 1 if the target supports executing 64-bit instructions, 0\n+# otherwise.  Cache the result.\n+\n+proc check_effective_target_powerpc64 { } {\n+    global powerpc64_available_saved\n+    global tool\n+\n+    if [info exists powerpc64_available_saved] {\n+\tverbose \"check_effective_target_powerpc64 returning saved $powerpc64_available_saved\" 2\n+    } else {\n+\tset powerpc64_available_saved 0\n+\n+\t# Some simulators are known to not support powerpc64 instructions.\n+\tif { [istarget powerpc-*-eabi*] || [istarget powerpc-ibm-aix*] } {\n+\t    verbose \"check_effective_target_powerpc64 returning 0\" 2\n+\t    return $powerpc64_available_saved\n+\t}\n+\n+\t# Set up, compile, and execute a test program containing a 64-bit\n+\t# instruction.  Include the current process ID in the file\n+\t# names to prevent conflicts with invocations for multiple\n+\t# testsuites.\n+\tset src ppc[pid].c\n+\tset exe ppc[pid].x\n+\n+\tset f [open $src \"w\"]\n+\tputs $f \"int main() {\"\n+\tputs $f \"#ifdef __MACH__\"\n+\tputs $f \"  asm volatile (\\\"extsw r0,r0\\\");\"\n+\tputs $f \"#else\"\n+\tputs $f \"  asm volatile (\\\"extsw 0,0\\\");\"\n+\tputs $f \"#endif\"\n+\tputs $f \"  return 0; }\"\n+\tclose $f\n+\n+\tset opts \"additional_flags=-mcpu=G5\"\n+\n+\tverbose \"check_effective_target_powerpc64 compiling testfile $src\" 2\n+\tset lines [${tool}_target_compile $src $exe executable \"$opts\"]\n+\tfile delete $src\n+\n+\tif [string match \"\" $lines] then {\n+\t    # No error message, compilation succeeded.\n+\t    set result [${tool}_load \"./$exe\" \"\" \"\"]\n+\t    set status [lindex $result 0]\n+\t    remote_file build delete $exe\n+\t    verbose \"check_effective_target_powerpc64 testfile status is <$status>\" 2\n+\n+\t    if { $status == \"pass\" } then {\n+\t\tset powerpc64_available_saved 1\n+\t    }\n+\t} else {\n+\t    verbose \"check_effective_target_powerpc64 testfile compilation failed\" 2\n+\t}\n+    }\n+\n+    return $powerpc64_available_saved\n+}\n+\n # GCC 3.4.0 for powerpc64-*-linux* included an ABI fix for passing\n # complex float arguments.  This affects gfortran tests that call cabsf\n # in libm built by an earlier compiler.  Return 1 if libm uses the same"}]}