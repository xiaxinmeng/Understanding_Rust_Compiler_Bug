{"sha": "43705f3fa343e08b2fb030460fc5e2a969954398", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM3MDVmM2ZhMzQzZTA4YjJmYjAzMDQ2MGZjNWUyYTk2OTk1NDM5OA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-01-21T14:06:16Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-01-21T14:08:29Z"}, "message": "aarch64: Use canonical RTL for sqdmlal patterns\n\nThe aarch64_sqdml<SBINQOPS:as>l patterns are of the form:\n  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n        (SBINQOPS:<VWIDE>\n\t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n\t  (ss_ashift:<VWIDE>\n\t      (mult:<VWIDE>\n\t\t(sign_extend:<VWIDE>\n\t\t      (match_operand:VSD_HSI 2 \"register_operand\" \"w\"))\n\t\t(sign_extend:<VWIDE>\n\t\t      (match_operand:VSD_HSI 3 \"register_operand\" \"w\")))\n\t      (const_int 1))))]\n\nwhere SBINQOPS is ss_plus and ss_minus. The problem is that for the\nss_plus case the RTL\nis not canonical: the (match_oprand 1) should be the second arm of the\nPLUS.\nI've seen this manifest in combine missing some legitimate\nsimplifications because it generates\nthe canonical ss_plus form and fails to match the pattern.\n\nThis patch splits the patterns into the ss_plus and ss_minus forms with\nthe canonical form for each.\nI've seen this improve my testcase (which I can't include as it's too\nlarge and not easy to test reliably).\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-simd.md (aarch64_sqdml<SBINQOPS:as>l<mode>):\n\tSplit into...\n\t(aarch64_sqdmlal<mode>): ... This...\n\t(aarch64_sqdmlsl<mode>): ... And this.\n\t(aarch64_sqdml<SBINQOPS:as>l_lane<mode>): Split into...\n\t(aarch64_sqdmlal_lane<mode>): ... This...\n\t(aarch64_sqdmlsl_lane<mode>): ... And this.\n\t(aarch64_sqdml<SBINQOPS:as>l_laneq<mode>): Split into...\n\t(aarch64_sqdmlsl_laneq<mode>): ... This...\n\t(aarch64_sqdmlal_laneq<mode>):  ... And this.\n\t(aarch64_sqdml<SBINQOPS:as>l_n<mode>): Split into...\n\t(aarch64_sqdmlsl_n<mode>): ... This...\n\t(aarch64_sqdmlal_n<mode>): ... And this.\n\t(aarch64_sqdml<SBINQOPS:as>l2<mode>_internal): Split into...\n\t(aarch64_sqdmlal2<mode>_internal): ... This...\n\t(aarch64_sqdmlsl2<mode>_internal): ... And this.", "tree": {"sha": "6cf42099225170d07bb9518c6e8c6a663c8f4a24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cf42099225170d07bb9518c6e8c6a663c8f4a24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43705f3fa343e08b2fb030460fc5e2a969954398", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43705f3fa343e08b2fb030460fc5e2a969954398", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43705f3fa343e08b2fb030460fc5e2a969954398", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43705f3fa343e08b2fb030460fc5e2a969954398/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "279d3a89b79f85d07a8ac4db1bebe9f60cb549e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/279d3a89b79f85d07a8ac4db1bebe9f60cb549e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/279d3a89b79f85d07a8ac4db1bebe9f60cb549e5"}], "stats": {"total": 193, "additions": 172, "deletions": 21}, "files": [{"sha": "be2a5a865172bdd7848be4082abb0fdfb0b35937", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 172, "deletions": 21, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43705f3fa343e08b2fb030460fc5e2a969954398/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43705f3fa343e08b2fb030460fc5e2a969954398/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=43705f3fa343e08b2fb030460fc5e2a969954398", "patch": "@@ -4155,9 +4155,25 @@\n \n ;; vqdml[sa]l\n \n-(define_insn \"aarch64_sqdml<SBINQOPS:as>l<mode>\"\n+(define_insn \"aarch64_sqdmlal<mode>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-        (SBINQOPS:<VWIDE>\n+        (ss_plus:<VWIDE>\n+\t  (ss_ashift:<VWIDE>\n+\t      (mult:<VWIDE>\n+\t\t(sign_extend:<VWIDE>\n+\t\t      (match_operand:VSD_HSI 2 \"register_operand\" \"w\"))\n+\t\t(sign_extend:<VWIDE>\n+\t\t      (match_operand:VSD_HSI 3 \"register_operand\" \"w\")))\n+\t      (const_int 1))\n+\t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")))]\n+  \"TARGET_SIMD\"\n+  \"sqdmlal\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %<v>3<Vmtype>\"\n+  [(set_attr \"type\" \"neon_sat_mla_<Vetype>_long\")]\n+)\n+\n+(define_insn \"aarch64_sqdmlsl<mode>\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+        (ss_minus:<VWIDE>\n \t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n \t  (ss_ashift:<VWIDE>\n \t      (mult:<VWIDE>\n@@ -4167,15 +4183,39 @@\n \t\t      (match_operand:VSD_HSI 3 \"register_operand\" \"w\")))\n \t      (const_int 1))))]\n   \"TARGET_SIMD\"\n-  \"sqdml<SBINQOPS:as>l\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %<v>3<Vmtype>\"\n+  \"sqdmlsl\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %<v>3<Vmtype>\"\n   [(set_attr \"type\" \"neon_sat_mla_<Vetype>_long\")]\n )\n \n ;; vqdml[sa]l_lane\n \n-(define_insn \"aarch64_sqdml<SBINQOPS:as>l_lane<mode>\"\n+(define_insn \"aarch64_sqdmlal_lane<mode>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-        (SBINQOPS:<VWIDE>\n+        (ss_plus:<VWIDE>\n+\t  (ss_ashift:<VWIDE>\n+\t    (mult:<VWIDE>\n+\t      (sign_extend:<VWIDE>\n+\t\t(match_operand:VD_HSI 2 \"register_operand\" \"w\"))\n+\t      (sign_extend:<VWIDE>\n+\t\t(vec_duplicate:VD_HSI\n+\t\t  (vec_select:<VEL>\n+\t\t    (match_operand:<VCOND> 3 \"register_operand\" \"<vwx>\")\n+\t\t    (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")])))\n+              ))\n+\t    (const_int 1))\n+\t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")))]\n+  \"TARGET_SIMD\"\n+  {\n+    operands[4] = aarch64_endian_lane_rtx (<VCOND>mode, INTVAL (operands[4]));\n+    return\n+      \"sqdmlal\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %3.<Vetype>[%4]\";\n+  }\n+  [(set_attr \"type\" \"neon_sat_mla_<Vetype>_scalar_long\")]\n+)\n+\n+(define_insn \"aarch64_sqdmlsl_lane<mode>\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+        (ss_minus:<VWIDE>\n \t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n \t  (ss_ashift:<VWIDE>\n \t    (mult:<VWIDE>\n@@ -4192,14 +4232,15 @@\n   {\n     operands[4] = aarch64_endian_lane_rtx (<VCOND>mode, INTVAL (operands[4]));\n     return\n-      \"sqdml<SBINQOPS:as>l\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %3.<Vetype>[%4]\";\n+      \"sqdmlsl\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %3.<Vetype>[%4]\";\n   }\n   [(set_attr \"type\" \"neon_sat_mla_<Vetype>_scalar_long\")]\n )\n \n-(define_insn \"aarch64_sqdml<SBINQOPS:as>l_laneq<mode>\"\n+\n+(define_insn \"aarch64_sqdmlsl_laneq<mode>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-        (SBINQOPS:<VWIDE>\n+        (ss_minus:<VWIDE>\n \t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n \t  (ss_ashift:<VWIDE>\n \t    (mult:<VWIDE>\n@@ -4216,14 +4257,62 @@\n   {\n     operands[4] = aarch64_endian_lane_rtx (<VCONQ>mode, INTVAL (operands[4]));\n     return\n-      \"sqdml<SBINQOPS:as>l\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %3.<Vetype>[%4]\";\n+      \"sqdmlsl\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %3.<Vetype>[%4]\";\n   }\n   [(set_attr \"type\" \"neon_sat_mla_<Vetype>_scalar_long\")]\n )\n \n-(define_insn \"aarch64_sqdml<SBINQOPS:as>l_lane<mode>\"\n+(define_insn \"aarch64_sqdmlal_laneq<mode>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-        (SBINQOPS:<VWIDE>\n+        (ss_plus:<VWIDE>\n+\t  (ss_ashift:<VWIDE>\n+\t    (mult:<VWIDE>\n+\t      (sign_extend:<VWIDE>\n+\t\t(match_operand:VD_HSI 2 \"register_operand\" \"w\"))\n+\t      (sign_extend:<VWIDE>\n+\t\t(vec_duplicate:VD_HSI\n+\t\t  (vec_select:<VEL>\n+\t\t    (match_operand:<VCONQ> 3 \"register_operand\" \"<vwx>\")\n+\t\t    (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")])))\n+              ))\n+\t    (const_int 1))\n+\t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")))]\n+  \"TARGET_SIMD\"\n+  {\n+    operands[4] = aarch64_endian_lane_rtx (<VCONQ>mode, INTVAL (operands[4]));\n+    return\n+      \"sqdmlal\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %3.<Vetype>[%4]\";\n+  }\n+  [(set_attr \"type\" \"neon_sat_mla_<Vetype>_scalar_long\")]\n+)\n+\n+\n+(define_insn \"aarch64_sqdmlal_lane<mode>\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+        (ss_plus:<VWIDE>\n+\t  (ss_ashift:<VWIDE>\n+\t    (mult:<VWIDE>\n+\t      (sign_extend:<VWIDE>\n+\t\t(match_operand:SD_HSI 2 \"register_operand\" \"w\"))\n+\t      (sign_extend:<VWIDE>\n+\t\t(vec_select:<VEL>\n+\t\t  (match_operand:<VCOND> 3 \"register_operand\" \"<vwx>\")\n+\t\t  (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")])))\n+              )\n+\t    (const_int 1))\n+\t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")))]\n+  \"TARGET_SIMD\"\n+  {\n+    operands[4] = aarch64_endian_lane_rtx (<VCOND>mode, INTVAL (operands[4]));\n+    return\n+      \"sqdmlal\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %3.<Vetype>[%4]\";\n+  }\n+  [(set_attr \"type\" \"neon_sat_mla_<Vetype>_scalar_long\")]\n+)\n+\n+(define_insn \"aarch64_sqdmlsl_lane<mode>\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+        (ss_minus:<VWIDE>\n \t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n \t  (ss_ashift:<VWIDE>\n \t    (mult:<VWIDE>\n@@ -4239,14 +4328,38 @@\n   {\n     operands[4] = aarch64_endian_lane_rtx (<VCOND>mode, INTVAL (operands[4]));\n     return\n-      \"sqdml<SBINQOPS:as>l\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %3.<Vetype>[%4]\";\n+      \"sqdmlsl\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %3.<Vetype>[%4]\";\n   }\n   [(set_attr \"type\" \"neon_sat_mla_<Vetype>_scalar_long\")]\n )\n \n-(define_insn \"aarch64_sqdml<SBINQOPS:as>l_laneq<mode>\"\n+\n+(define_insn \"aarch64_sqdmlal_laneq<mode>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-        (SBINQOPS:<VWIDE>\n+        (ss_plus:<VWIDE>\n+\t  (ss_ashift:<VWIDE>\n+\t    (mult:<VWIDE>\n+\t      (sign_extend:<VWIDE>\n+\t\t(match_operand:SD_HSI 2 \"register_operand\" \"w\"))\n+\t      (sign_extend:<VWIDE>\n+\t\t(vec_select:<VEL>\n+\t\t  (match_operand:<VCONQ> 3 \"register_operand\" \"<vwx>\")\n+\t\t  (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")])))\n+              )\n+\t    (const_int 1))\n+\t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")))]\n+  \"TARGET_SIMD\"\n+  {\n+    operands[4] = aarch64_endian_lane_rtx (<VCONQ>mode, INTVAL (operands[4]));\n+    return\n+      \"sqdmlal\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %3.<Vetype>[%4]\";\n+  }\n+  [(set_attr \"type\" \"neon_sat_mla_<Vetype>_scalar_long\")]\n+)\n+\n+(define_insn \"aarch64_sqdmlsl_laneq<mode>\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+        (ss_minus:<VWIDE>\n \t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n \t  (ss_ashift:<VWIDE>\n \t    (mult:<VWIDE>\n@@ -4262,16 +4375,16 @@\n   {\n     operands[4] = aarch64_endian_lane_rtx (<VCONQ>mode, INTVAL (operands[4]));\n     return\n-      \"sqdml<SBINQOPS:as>l\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %3.<Vetype>[%4]\";\n+      \"sqdmlsl\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %3.<Vetype>[%4]\";\n   }\n   [(set_attr \"type\" \"neon_sat_mla_<Vetype>_scalar_long\")]\n )\n \n ;; vqdml[sa]l_n\n \n-(define_insn \"aarch64_sqdml<SBINQOPS:as>l_n<mode>\"\n+(define_insn \"aarch64_sqdmlsl_n<mode>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-        (SBINQOPS:<VWIDE>\n+        (ss_minus:<VWIDE>\n \t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n \t  (ss_ashift:<VWIDE>\n \t      (mult:<VWIDE>\n@@ -4282,15 +4395,53 @@\n \t\t    (match_operand:<VEL> 3 \"register_operand\" \"<vwx>\"))))\n \t      (const_int 1))))]\n   \"TARGET_SIMD\"\n-  \"sqdml<SBINQOPS:as>l\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %3.<Vetype>[0]\"\n+  \"sqdmlsl\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %3.<Vetype>[0]\"\n+  [(set_attr \"type\" \"neon_sat_mla_<Vetype>_scalar_long\")]\n+)\n+\n+(define_insn \"aarch64_sqdmlal_n<mode>\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+        (ss_plus:<VWIDE>\n+\t  (ss_ashift:<VWIDE>\n+\t      (mult:<VWIDE>\n+\t\t(sign_extend:<VWIDE>\n+\t\t      (match_operand:VD_HSI 2 \"register_operand\" \"w\"))\n+\t\t(sign_extend:<VWIDE>\n+\t\t  (vec_duplicate:VD_HSI\n+\t\t    (match_operand:<VEL> 3 \"register_operand\" \"<vwx>\"))))\n+\t      (const_int 1))\n+\t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")))]\n+  \"TARGET_SIMD\"\n+  \"sqdmlal\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %3.<Vetype>[0]\"\n   [(set_attr \"type\" \"neon_sat_mla_<Vetype>_scalar_long\")]\n )\n \n+\n ;; sqdml[as]l2\n \n-(define_insn \"aarch64_sqdml<SBINQOPS:as>l2<mode>_internal\"\n+(define_insn \"aarch64_sqdmlal2<mode>_internal\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-        (SBINQOPS:<VWIDE>\n+        (ss_plus:<VWIDE>\n+         (ss_ashift:<VWIDE>\n+             (mult:<VWIDE>\n+               (sign_extend:<VWIDE>\n+                 (vec_select:<VHALF>\n+                     (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n+                     (match_operand:VQ_HSI 4 \"vect_par_cnst_hi_half\" \"\")))\n+               (sign_extend:<VWIDE>\n+                 (vec_select:<VHALF>\n+                     (match_operand:VQ_HSI 3 \"register_operand\" \"w\")\n+                     (match_dup 4))))\n+             (const_int 1))\n+\t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")))]\n+  \"TARGET_SIMD\"\n+  \"sqdmlal2\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %<v>3<Vmtype>\"\n+  [(set_attr \"type\" \"neon_sat_mla_<Vetype>_scalar_long\")]\n+)\n+\n+(define_insn \"aarch64_sqdmlsl2<mode>_internal\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+        (ss_minus:<VWIDE>\n          (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n          (ss_ashift:<VWIDE>\n              (mult:<VWIDE>\n@@ -4304,7 +4455,7 @@\n                      (match_dup 4))))\n              (const_int 1))))]\n   \"TARGET_SIMD\"\n-  \"sqdml<SBINQOPS:as>l2\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %<v>3<Vmtype>\"\n+  \"sqdmlsl2\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %<v>3<Vmtype>\"\n   [(set_attr \"type\" \"neon_sat_mla_<Vetype>_scalar_long\")]\n )\n "}]}