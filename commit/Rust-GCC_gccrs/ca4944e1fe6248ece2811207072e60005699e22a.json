{"sha": "ca4944e1fe6248ece2811207072e60005699e22a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E0OTQ0ZTFmZTYyNDhlY2UyODExMjA3MDcyZTYwMDA1Njk5ZTIyYQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2004-03-27T05:29:40Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2004-03-27T05:29:40Z"}, "message": "builtin-types.def (BT_WINT, [...]): New.\n\n\t* builtin-types.def (BT_WINT, BT_FN_INT_WINT, BT_FN_WINT_WINT): New.\n\t* builtins.def (DEF_C94_BUILTIN): New.  Add wctype builtins.\n\t* doc/extend.texi: Likewise.\ntestsuite:\n\t* gcc.dg/torture/builtin-wctype-1.c: New test.\n\nFrom-SVN: r80011", "tree": {"sha": "d4154ba69720250277e03667b8d74e3b1c935108", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4154ba69720250277e03667b8d74e3b1c935108"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca4944e1fe6248ece2811207072e60005699e22a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca4944e1fe6248ece2811207072e60005699e22a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca4944e1fe6248ece2811207072e60005699e22a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca4944e1fe6248ece2811207072e60005699e22a/comments", "author": null, "committer": null, "parents": [{"sha": "aaaf25eba87ec284a39da793c95b78868ba8af4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaaf25eba87ec284a39da793c95b78868ba8af4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaaf25eba87ec284a39da793c95b78868ba8af4f"}], "stats": {"total": 114, "additions": 107, "deletions": 7}, "files": [{"sha": "156d56b3fbaf54fcd62fa96f8336aedaf1fc910d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4944e1fe6248ece2811207072e60005699e22a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4944e1fe6248ece2811207072e60005699e22a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca4944e1fe6248ece2811207072e60005699e22a", "patch": "@@ -1,3 +1,9 @@\n+2004-03-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtin-types.def (BT_WINT, BT_FN_INT_WINT, BT_FN_WINT_WINT): New.\n+\t* builtins.def (DEF_C94_BUILTIN): New.  Add wctype builtins.\n+\t* doc/extend.texi: Likewise.\n+\n 2004-03-26  Diego Novillo  <dnovillo@redhat.com>\n \n \t* c-typeck.c (comptypes): Replace calls to TYPE_DOMAIN"}, {"sha": "81fdeb18505847feb67d6a04026a7f53bb715fb8", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4944e1fe6248ece2811207072e60005699e22a/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4944e1fe6248ece2811207072e60005699e22a/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=ca4944e1fe6248ece2811207072e60005699e22a", "patch": "@@ -82,6 +82,7 @@ DEF_PRIMITIVE_TYPE (BT_DOUBLE_PTR, double_ptr_type_node)\n DEF_PRIMITIVE_TYPE (BT_LONGDOUBLE_PTR, long_double_ptr_type_node)\n DEF_PRIMITIVE_TYPE (BT_SIZE, size_type_node)\n DEF_PRIMITIVE_TYPE (BT_SSIZE, signed_size_type_node)\n+DEF_PRIMITIVE_TYPE (BT_WINT, wint_type_node)\n DEF_PRIMITIVE_TYPE (BT_STRING, string_type_node)\n DEF_PRIMITIVE_TYPE (BT_CONST_STRING, const_string_type_node)\n \n@@ -144,6 +145,8 @@ DEF_FUNCTION_TYPE_1 (BT_FN_LONGDOUBLE_CONST_STRING,\n \t\t     BT_LONGDOUBLE, BT_CONST_STRING)\n DEF_FUNCTION_TYPE_1 (BT_FN_STRING_CONST_STRING, BT_STRING, BT_CONST_STRING)\n DEF_FUNCTION_TYPE_1 (BT_FN_WORD_PTR, BT_WORD, BT_PTR)\n+DEF_FUNCTION_TYPE_1 (BT_FN_INT_WINT, BT_INT, BT_WINT)\n+DEF_FUNCTION_TYPE_1 (BT_FN_WINT_WINT, BT_WINT, BT_WINT)\n \n DEF_FUNCTION_TYPE_2 (BT_FN_VOID_PTR_INT, BT_VOID, BT_PTR, BT_INT)\n DEF_FUNCTION_TYPE_2 (BT_FN_STRING_STRING_CONST_STRING, "}, {"sha": "0d2be2c437a82ce0979faa5feed21d4a1dfd4bc5", "filename": "gcc/builtins.def", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4944e1fe6248ece2811207072e60005699e22a/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4944e1fe6248ece2811207072e60005699e22a/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=ca4944e1fe6248ece2811207072e60005699e22a", "patch": "@@ -91,6 +91,13 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n   DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n    \t       true, true, true, ATTRS, false)\n \n+/* Like DEF_LIB_BUILTIN, except that the function is only a part of\n+   the standard in C94 or above.  */\n+#undef DEF_C94_BUILTIN\t\t\t\t\t\n+#define DEF_C94_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n+  DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n+   \t       true, true, !flag_isoc94, ATTRS, TARGET_C99_FUNCTIONS)\n+\n /* Like DEF_LIB_BUILTIN, except that the function is only a part of\n    the standard in C99 or above.  */\n #undef DEF_C99_BUILTIN\t\t\t\t\t\n@@ -509,6 +516,22 @@ DEF_EXT_LIB_BUILTIN    (BUILT_IN_TOASCII, \"toascii\", BT_FN_INT_INT, ATTR_CONST_N\n DEF_LIB_BUILTIN        (BUILT_IN_TOLOWER, \"tolower\", BT_FN_INT_INT, ATTR_PURE_NOTHROW_LIST)\n DEF_LIB_BUILTIN        (BUILT_IN_TOUPPER, \"toupper\", BT_FN_INT_INT, ATTR_PURE_NOTHROW_LIST)\n \n+/* Category: wctype builtins.  */\n+DEF_C94_BUILTIN        (BUILT_IN_ISWALNUM, \"iswalnum\", BT_FN_INT_WINT, ATTR_PURE_NOTHROW_LIST)\n+DEF_C94_BUILTIN        (BUILT_IN_ISWALPHA, \"iswalpha\", BT_FN_INT_WINT, ATTR_PURE_NOTHROW_LIST)\n+DEF_C99_BUILTIN        (BUILT_IN_ISWBLANK, \"iswblank\", BT_FN_INT_WINT, ATTR_PURE_NOTHROW_LIST)\n+DEF_C94_BUILTIN        (BUILT_IN_ISWCNTRL, \"iswcntrl\", BT_FN_INT_WINT, ATTR_PURE_NOTHROW_LIST)\n+DEF_C94_BUILTIN        (BUILT_IN_ISWDIGIT, \"iswdigit\", BT_FN_INT_WINT, ATTR_PURE_NOTHROW_LIST)\n+DEF_C94_BUILTIN        (BUILT_IN_ISWGRAPH, \"iswgraph\", BT_FN_INT_WINT, ATTR_PURE_NOTHROW_LIST)\n+DEF_C94_BUILTIN        (BUILT_IN_ISWLOWER, \"iswlower\", BT_FN_INT_WINT, ATTR_PURE_NOTHROW_LIST)\n+DEF_C94_BUILTIN        (BUILT_IN_ISWPRINT, \"iswprint\", BT_FN_INT_WINT, ATTR_PURE_NOTHROW_LIST)\n+DEF_C94_BUILTIN        (BUILT_IN_ISWPUNCT, \"iswpunct\", BT_FN_INT_WINT, ATTR_PURE_NOTHROW_LIST)\n+DEF_C94_BUILTIN        (BUILT_IN_ISWSPACE, \"iswspace\", BT_FN_INT_WINT, ATTR_PURE_NOTHROW_LIST)\n+DEF_C94_BUILTIN        (BUILT_IN_ISWUPPER, \"iswupper\", BT_FN_INT_WINT, ATTR_PURE_NOTHROW_LIST)\n+DEF_C94_BUILTIN        (BUILT_IN_ISWXDIGIT, \"iswxdigit\", BT_FN_INT_WINT, ATTR_PURE_NOTHROW_LIST)\n+DEF_C94_BUILTIN        (BUILT_IN_TOWLOWER, \"towlower\", BT_FN_WINT_WINT, ATTR_PURE_NOTHROW_LIST)\n+DEF_C94_BUILTIN        (BUILT_IN_TOWUPPER, \"towupper\", BT_FN_WINT_WINT, ATTR_PURE_NOTHROW_LIST)\n+\n /* Category: miscellaneous builtins.  */\n DEF_LIB_BUILTIN        (BUILT_IN_ABORT, \"abort\", BT_FN_VOID, ATTR_NORETURN_NOTHROW_LIST)\n DEF_LIB_BUILTIN        (BUILT_IN_ABS, \"abs\", BT_FN_INT_INT, ATTR_CONST_NOTHROW_LIST)"}, {"sha": "c5509a8073fefc49f1875cfdc0f4ee7923aedc6b", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4944e1fe6248ece2811207072e60005699e22a/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4944e1fe6248ece2811207072e60005699e22a/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=ca4944e1fe6248ece2811207072e60005699e22a", "patch": "@@ -4898,6 +4898,18 @@ v4si f (v4si a, v4si b, v4si c)\n @findex ispunct\n @findex isspace\n @findex isupper\n+@findex iswalnum\n+@findex iswalpha\n+@findex iswblank\n+@findex iswcntrl\n+@findex iswdigit\n+@findex iswgraph\n+@findex iswlower\n+@findex iswprint\n+@findex iswpunct\n+@findex iswspace\n+@findex iswupper\n+@findex iswxdigit\n @findex isxdigit\n @findex j0\n @findex j0f\n@@ -5042,6 +5054,8 @@ v4si f (v4si a, v4si b, v4si c)\n @findex toascii\n @findex tolower\n @findex toupper\n+@findex towlower\n+@findex towupper\n @findex trunc\n @findex truncf\n @findex truncl\n@@ -5127,13 +5141,13 @@ The ISO C99 functions\n @code{fmaxf}, @code{fmaxl}, @code{fmax}, @code{fma}, @code{fminf},\n @code{fminl}, @code{fmin}, @code{hypotf}, @code{hypotl}, @code{hypot},\n @code{ilogbf}, @code{ilogbl}, @code{ilogb}, @code{imaxabs},\n-@code{isblank}, @code{lgammaf}, @code{lgammal}, @code{lgamma},\n-@code{llabs}, @code{llrintf}, @code{llrintl}, @code{llrint},\n-@code{llroundf}, @code{llroundl}, @code{llround}, @code{log1pf},\n-@code{log1pl}, @code{log1p}, @code{log2f}, @code{log2l}, @code{log2},\n-@code{logbf}, @code{logbl}, @code{logb}, @code{lrintf}, @code{lrintl},\n-@code{lrint}, @code{lroundf}, @code{lroundl}, @code{lround},\n-@code{nearbyintf}, @code{nearbyintl}, @code{nearbyint},\n+@code{isblank}, @code{iswblank}, @code{lgammaf}, @code{lgammal},\n+@code{lgamma}, @code{llabs}, @code{llrintf}, @code{llrintl},\n+@code{llrint}, @code{llroundf}, @code{llroundl}, @code{llround},\n+@code{log1pf}, @code{log1pl}, @code{log1p}, @code{log2f}, @code{log2l},\n+@code{log2}, @code{logbf}, @code{logbl}, @code{logb}, @code{lrintf},\n+@code{lrintl}, @code{lrint}, @code{lroundf}, @code{lroundl},\n+@code{lround}, @code{nearbyintf}, @code{nearbyintl}, @code{nearbyint},\n @code{nextafterf}, @code{nextafterl}, @code{nextafter},\n @code{nexttowardf}, @code{nexttowardl}, @code{nexttoward},\n @code{remainderf}, @code{remainderl}, @code{remainder}, @code{remquof},\n@@ -5160,6 +5174,14 @@ that are recognized in any mode since ISO C90 reserves these names for\n the purpose to which ISO C99 puts them.  All these functions have\n corresponding versions prefixed with @code{__builtin_}.\n \n+The ISO C94 functions\n+@code{iswalnum}, @code{iswalpha}, @code{iswcntrl}, @code{iswdigit},\n+@code{iswgraph}, @code{iswlower}, @code{iswprint}, @code{iswpunct},\n+@code{iswspace}, @code{iswupper}, @code{iswxdigit}, @code{towlower} and\n+@code{towupper}\n+are handled as built-in functions\n+except in strict ISO C90 mode (@option{-ansi} or @option{-std=c89}).\n+\n The ISO C90 functions\n @code{abort}, @code{abs}, @code{acos}, @code{asin}, @code{atan2},\n @code{atan}, @code{calloc}, @code{ceil}, @code{cosh}, @code{cos},"}, {"sha": "2d35d02bd77b31d98fb4deef7b824a6e93188a1f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4944e1fe6248ece2811207072e60005699e22a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4944e1fe6248ece2811207072e60005699e22a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ca4944e1fe6248ece2811207072e60005699e22a", "patch": "@@ -1,3 +1,7 @@\n+2004-03-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/torture/builtin-wctype-1.c: New test.\n+\n 2004-03-26  James A. Morrison  <ja2morri@uwaterloo.ca>\n \n \t* gcc.dg/20001013-1.c: Run on 32-bit and 64-bit SPARC."}, {"sha": "b8338de0bd1cbdaad2512b88ebe675b367846f2a", "filename": "gcc/testsuite/gcc.dg/torture/builtin-wctype-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4944e1fe6248ece2811207072e60005699e22a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-wctype-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4944e1fe6248ece2811207072e60005699e22a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-wctype-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-wctype-1.c?ref=ca4944e1fe6248ece2811207072e60005699e22a", "patch": "@@ -0,0 +1,42 @@\n+/* Copyright (C) 2004  Free Software Foundation.\n+\n+   Verify that built-in wctype function attributes are correctly set\n+   by the compiler.\n+\n+   Written by Kaveh Ghazi, 2004-03-25.  */\n+\n+/* { dg-do link } */\n+\n+\n+void test(int i)\n+{\n+  /* All of these ctype functions should be const/pure and thus\n+     eliminated.  */\n+#define TEST_CTYPE(FN) \\\n+  extern int FN(int); \\\n+  extern void link_failure_##FN(void); \\\n+  if (FN(i) != FN(i)) \\\n+    link_failure_##FN()\n+  \n+#ifdef __OPTIMIZE__\n+  TEST_CTYPE(iswalnum);\n+  TEST_CTYPE(iswalpha);\n+  TEST_CTYPE(iswblank);\n+  TEST_CTYPE(iswcntrl);\n+  TEST_CTYPE(iswdigit);\n+  TEST_CTYPE(iswgraph);\n+  TEST_CTYPE(iswlower);\n+  TEST_CTYPE(iswprint);\n+  TEST_CTYPE(iswpunct);\n+  TEST_CTYPE(iswspace);\n+  TEST_CTYPE(iswupper);\n+  TEST_CTYPE(iswxdigit);\n+  TEST_CTYPE(towlower);\n+  TEST_CTYPE(towupper);\n+#endif /* __OPTIMIZE__ */\n+}\n+\n+int main (void)\n+{\n+  return 0;\n+}"}]}