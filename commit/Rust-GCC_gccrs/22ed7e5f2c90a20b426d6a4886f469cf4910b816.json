{"sha": "22ed7e5f2c90a20b426d6a4886f469cf4910b816", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJlZDdlNWYyYzkwYTIwYjQyNmQ2YTQ4ODZmNDY5Y2Y0OTEwYjgxNg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-07-24T23:33:26Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-07-24T23:33:26Z"}, "message": "cp-tree.h (convert_to_base_statically): Declare.\n\n\t* cp-tree.h (convert_to_base_statically): Declare.\n\t* call.c (build_special_member_call): Convert INSTANCE to the base\n\ttype.\n\t* class.c (convert_to_base_statically): New method.\n\t* init.c (construct_virtual_base): Use it.\n\t* method.c (do_build_assign_ref): Fix typo in comment.\n\n\t* g++.dg/inherit/access5.C: New test.\n\nFrom-SVN: r69763", "tree": {"sha": "796e409dc11901ee2b77ae057d565ef0d12f6050", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/796e409dc11901ee2b77ae057d565ef0d12f6050"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22ed7e5f2c90a20b426d6a4886f469cf4910b816", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22ed7e5f2c90a20b426d6a4886f469cf4910b816", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22ed7e5f2c90a20b426d6a4886f469cf4910b816", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22ed7e5f2c90a20b426d6a4886f469cf4910b816/comments", "author": null, "committer": null, "parents": [{"sha": "aecf642c785beeffc45043564f23778b21d48306", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aecf642c785beeffc45043564f23778b21d48306", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aecf642c785beeffc45043564f23778b21d48306"}], "stats": {"total": 87, "additions": 69, "deletions": 18}, "files": [{"sha": "a4e454bf814075e122c0fbbec31e159177107dfa", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ed7e5f2c90a20b426d6a4886f469cf4910b816/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ed7e5f2c90a20b426d6a4886f469cf4910b816/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=22ed7e5f2c90a20b426d6a4886f469cf4910b816", "patch": "@@ -1,3 +1,12 @@\n+2003-07-24  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (convert_to_base_statically): Declare.\n+\t* call.c (build_special_member_call): Convert INSTANCE to the base\n+\ttype.\n+\t* class.c (convert_to_base_statically): New method.\n+\t* init.c (construct_virtual_base): Use it.\n+\t* method.c (do_build_assign_ref): Fix typo in comment.\n+\n 2003-07-24  Jason Merrill  <jason@redhat.com>\n \n \t* decl.c: Just set truthvalue_* to boolean_*."}, {"sha": "58888eacf521aab579f285ba46649ef61eb11281", "filename": "gcc/cp/call.c", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ed7e5f2c90a20b426d6a4886f469cf4910b816/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ed7e5f2c90a20b426d6a4886f469cf4910b816/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=22ed7e5f2c90a20b426d6a4886f469cf4910b816", "patch": "@@ -4747,11 +4747,23 @@ build_special_member_call (tree instance, tree name, tree args,\n       TREE_TYPE (instance) = build_pointer_type (class_type);\n       instance = build1 (INDIRECT_REF, class_type, instance);\n     }\n-  else if (name == complete_dtor_identifier \n-\t   || name == base_dtor_identifier\n-\t   || name == deleting_dtor_identifier)\n-    my_friendly_assert (args == NULL_TREE, 20020712);\n+  else\n+    {\n+      if (name == complete_dtor_identifier \n+\t  || name == base_dtor_identifier\n+\t  || name == deleting_dtor_identifier)\n+\tmy_friendly_assert (args == NULL_TREE, 20020712);\n \n+      /* We must perform the conversion here so that we do not\n+\t subsequently check to see whether BINFO is an accessible\n+\t base.  (It is OK for a constructor to call a constructor in\n+\t an inaccessible base as long as the constructor being called\n+\t is accessible.)  */\n+      if (!same_type_ignoring_top_level_qualifiers_p \n+\t  (TREE_TYPE (instance), BINFO_TYPE (binfo)))\n+\tinstance = convert_to_base_statically (instance, binfo);\n+    }\n+  \n   my_friendly_assert (instance != NULL_TREE, 20020712);\n \n   /* Resolve the name.  */\n@@ -4787,7 +4799,9 @@ build_special_member_call (tree instance, tree name, tree args,\n       args = tree_cons (NULL_TREE, sub_vtt, args);\n     }\n \n-  return build_new_method_call (instance, fns, args, binfo, flags);\n+  return build_new_method_call (instance, fns, args, \n+\t\t\t\tTYPE_BINFO (BINFO_TYPE (binfo)), \n+\t\t\t\tflags);\n }\n \n /* Return the NAME, as a C string.  The NAME indicates a function that"}, {"sha": "d2fb90283dbcfb61ff3350a0f6980ac4e2952679", "filename": "gcc/cp/class.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ed7e5f2c90a20b426d6a4886f469cf4910b816/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ed7e5f2c90a20b426d6a4886f469cf4910b816/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=22ed7e5f2c90a20b426d6a4886f469cf4910b816", "patch": "@@ -391,6 +391,33 @@ convert_to_base (tree object, tree type, bool check_access)\n   return build_base_path (PLUS_EXPR, object, binfo, /*nonnull=*/1);\n }\n \n+/* EXPR is an expression with class type.  BASE is a base class (a\n+   BINFO) of that class type.  Returns EXPR, converted to the BASE\n+   type.  This function assumes that EXPR is the most derived class;\n+   therefore virtual bases can be found at their static offsets.  */\n+\n+tree\n+convert_to_base_statically (tree expr, tree base)\n+{\n+  tree expr_type;\n+\n+  expr_type = TREE_TYPE (expr);\n+  if (!same_type_p (expr_type, BINFO_TYPE (base)))\n+    {\n+      tree pointer_type;\n+\n+      pointer_type = build_pointer_type (expr_type);\n+      expr = build_unary_op (ADDR_EXPR, expr, /*noconvert=*/1);\n+      if (!integer_zerop (BINFO_OFFSET (base)))\n+\t  expr = build (PLUS_EXPR, pointer_type, expr, \n+\t\t\tbuild_nop (pointer_type, BINFO_OFFSET (base)));\n+      expr = build_nop (build_pointer_type (BINFO_TYPE (base)), expr);\n+      expr = build1 (INDIRECT_REF, BINFO_TYPE (base), expr);\n+    }\n+\n+  return expr;\n+}\n+\n \f\n /* Virtual function things.  */\n "}, {"sha": "8f543b4317e228d12af944989d45383f10d0e5e1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ed7e5f2c90a20b426d6a4886f469cf4910b816/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ed7e5f2c90a20b426d6a4886f469cf4910b816/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=22ed7e5f2c90a20b426d6a4886f469cf4910b816", "patch": "@@ -3561,6 +3561,7 @@ extern tree build_cxx_call (tree, tree, tree);\n /* in class.c */\n extern tree build_base_path\t\t\t(enum tree_code, tree, tree, int);\n extern tree convert_to_base                     (tree, tree, bool);\n+extern tree convert_to_base_statically (tree, tree);\n extern tree build_vtbl_ref\t\t\t(tree, tree);\n extern tree build_vfn_ref\t\t\t(tree, tree);\n extern tree get_vtable_decl                     (tree, int);"}, {"sha": "054ff30cd542da7aa33584895e0841ad430cf2f7", "filename": "gcc/cp/init.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ed7e5f2c90a20b426d6a4886f469cf4910b816/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ed7e5f2c90a20b426d6a4886f469cf4910b816/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=22ed7e5f2c90a20b426d6a4886f469cf4910b816", "patch": "@@ -863,18 +863,10 @@ construct_virtual_base (tree vbase, tree arguments)\n      constructing virtual bases, then we must be the most derived\n      class.  Therefore, we don't have to look up the virtual base;\n      we already know where it is.  */\n-  exp = build (PLUS_EXPR,\n-\t       TREE_TYPE (current_class_ptr),\n-\t       current_class_ptr,\n-\t       fold (build1 (NOP_EXPR, TREE_TYPE (current_class_ptr),\n-\t\t\t     BINFO_OFFSET (vbase))));\n-  exp = build1 (NOP_EXPR, \n-\t\tbuild_pointer_type (BINFO_TYPE (vbase)), \n-\t\texp);\n-  exp = build1 (INDIRECT_REF, BINFO_TYPE (vbase), exp);\n-\n-  expand_aggr_init_1 (vbase, current_class_ref, exp,\n-\t\t      arguments, LOOKUP_COMPLAIN);\n+  exp = convert_to_base_statically (current_class_ref, vbase);\n+\n+  expand_aggr_init_1 (vbase, current_class_ref, exp, arguments, \n+\t\t      LOOKUP_COMPLAIN);\n   finish_compound_stmt (/*has_no_scope=*/1, compound_stmt);\n   finish_then_clause (inner_if_stmt);\n   finish_if_stmt ();"}, {"sha": "00428b1348d4b5b58401716f4e0968d83e286d7a", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ed7e5f2c90a20b426d6a4886f469cf4910b816/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ed7e5f2c90a20b426d6a4886f469cf4910b816/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=22ed7e5f2c90a20b426d6a4886f469cf4910b816", "patch": "@@ -605,7 +605,7 @@ do_build_assign_ref (tree fndecl)\n       int cvquals = cp_type_quals (TREE_TYPE (parm));\n       int i;\n \n-      /* Assign to each of thedirect base classes.  */\n+      /* Assign to each of the direct base classes.  */\n       for (i = 0; i < CLASSTYPE_N_BASECLASSES (current_class_type); ++i)\n \t{\n \t  tree binfo;"}, {"sha": "0dcc60fc6e597e157c05332b1bee8ee071eabdd4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ed7e5f2c90a20b426d6a4886f469cf4910b816/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ed7e5f2c90a20b426d6a4886f469cf4910b816/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=22ed7e5f2c90a20b426d6a4886f469cf4910b816", "patch": "@@ -1,3 +1,7 @@\n+2003-07-24  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* g++.dg/inherit/access5.C: New test.\n+\n 2003-07-24  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/11513"}, {"sha": "715a4a3b29b3fd71d2a61c23bce86dbd87ba0af7", "filename": "gcc/testsuite/g++.dg/inherit/access5.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ed7e5f2c90a20b426d6a4886f469cf4910b816/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Faccess5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ed7e5f2c90a20b426d6a4886f469cf4910b816/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Faccess5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Faccess5.C?ref=22ed7e5f2c90a20b426d6a4886f469cf4910b816", "patch": "@@ -0,0 +1,4 @@\n+struct S { ~S(); };\n+struct T : virtual private S {};\n+struct U : private T {};\n+U u;"}]}