{"sha": "5071eab79a946632010c75349494c745f35ae1e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA3MWVhYjc5YTk0NjYzMjAxMGM3NTM0OTQ5NGM3NDVmMzVhZTFlNg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-07-03T11:30:51Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-07-03T11:30:51Z"}, "message": "i386.md (fix_trunc<mode>_fisttp_i387_1): Use can_create_pseudo_p.\n\n\t* config/i386/i386.md (fix_trunc<mode>_fisttp_i387_1): Use\n\tcan_create_pseudo_p.\n\t(*fix_trunc<mode>_i387_1): Ditto.\n\t(*floathi<mode>2_1): Ditto.\n\t(*float<SSEMODEI24:mode><X87MODEF:mode>2_1): Ditto.\n\t(*fistdi2_1): Ditto.\n\t(*fist<mode>2_1): Ditto.\n\t(frndintxf2_floor): Ditto.\n\t(*fist<mode>2_floor_1): Ditto.\n\t(frndintxf2_ceil): Ditto.\n\t(*fist<mode>2_ceil_1): Ditto.\n\t(frndintxf2_trunc): Ditto.\n\t(frndintxf2_mask_pm): Ditto.\n\t(fxam<mode>2_i387_with_temp): Ditto.\n\t* config/i386/sse.md (mulv16qi3): Ditto.\n\t(*sse2_mulv4si3): Ditto.\n\t(mulv2di3): Ditto.\n\t(sse4_2_pcmpestr): Ditto.\n\t(sse4_2_pcmpistr): Ditto.\n\nFrom-SVN: r149205", "tree": {"sha": "50682a92438973b62f5c5ed4683d2b51b2d6144f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50682a92438973b62f5c5ed4683d2b51b2d6144f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5071eab79a946632010c75349494c745f35ae1e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5071eab79a946632010c75349494c745f35ae1e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5071eab79a946632010c75349494c745f35ae1e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5071eab79a946632010c75349494c745f35ae1e6/comments", "author": null, "committer": null, "parents": [{"sha": "f0e410bca1566df48d5a8e5099271c9caf1fb5c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0e410bca1566df48d5a8e5099271c9caf1fb5c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0e410bca1566df48d5a8e5099271c9caf1fb5c9"}], "stats": {"total": 83, "additions": 52, "deletions": 31}, "files": [{"sha": "552fd4481ef0f2b05e0426d7434c48a848766a29", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5071eab79a946632010c75349494c745f35ae1e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5071eab79a946632010c75349494c745f35ae1e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5071eab79a946632010c75349494c745f35ae1e6", "patch": "@@ -1,3 +1,25 @@\n+2009-07-03  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (fix_trunc<mode>_fisttp_i387_1): Use\n+\tcan_create_pseudo_p.\n+\t(*fix_trunc<mode>_i387_1): Ditto.\n+\t(*floathi<mode>2_1): Ditto.\n+\t(*float<SSEMODEI24:mode><X87MODEF:mode>2_1): Ditto.\n+\t(*fistdi2_1): Ditto.\n+\t(*fist<mode>2_1): Ditto.\n+\t(frndintxf2_floor): Ditto.\n+\t(*fist<mode>2_floor_1): Ditto.\n+\t(frndintxf2_ceil): Ditto.\n+\t(*fist<mode>2_ceil_1): Ditto.\n+\t(frndintxf2_trunc): Ditto.\n+\t(frndintxf2_mask_pm): Ditto.\n+\t(fxam<mode>2_i387_with_temp): Ditto.\n+\t* config/i386/sse.md (mulv16qi3): Ditto.\n+\t(*sse2_mulv4si3): Ditto.\n+\t(mulv2di3): Ditto.\n+\t(sse4_2_pcmpestr): Ditto.\n+\t(sse4_2_pcmpistr): Ditto.\n+\n 2009-07-03  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-ssa-dce.c (bb_contains_live_stmts): New bitmap.\n@@ -48,8 +70,7 @@\n \n \t* config/mep/mep.c (mep_handle_option): Leave IVC2 control\n \tregisters as fixed.\n-\t(mep_interrupt_saved_reg): Save appropriate IVC2 control\n-\tregisters.\n+\t(mep_interrupt_saved_reg): Save appropriate IVC2 control registers.\n \t* config/mep/mep-ivc2.cpu: Add VOLATILE to insns that make\n \tunspecified accesses to control registers.\n \t* config/mep/intrinsics.md: Regenerate.\n@@ -100,7 +121,8 @@\n \n 2009-07-01  DJ Delorie  <dj@redhat.com>\n \n-\t* config/mep/mep-ivc2.cpu (cmov, cmovc, cmovh): Add intrinsic names to VLIW variants.\n+\t* config/mep/mep-ivc2.cpu (cmov, cmovc, cmovh): Add intrinsic\n+\tnames to VLIW variants.\n \t(ivc2rm, ivc2crn): Make data type consistent with non-VLIW variants.\n \t* config/mep/intrinsics.md: Regenerate.\n \t* config/mep/intrinsics.h: Regenerate.\n@@ -119,17 +141,16 @@\n \tof the jump table.\n \t(casesi64p): Likewise.\n \n-\t* pa.c (forward_branch_p): Return bool type.  Use instruction addresses\n-\twhen available.  Assert that INSN has a jump label.\n+\t* pa.c (forward_branch_p): Return bool type.  Use instruction\n+\taddresses when available.  Assert that INSN has a jump label.\n \t(pa_adjust_insn_length): Don't call forward_branch_p if INSN doesn't\n \thave a jump label.\n \n 2009-07-01  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/19831\n \t* tree-ssa-dce.c (propagate_necessity): Calls to functions\n-\tthat only act as barriers do not make any previous stores\n-\tnecessary.\n+\tthat only act as barriers do not make any previous stores necessary.\n \t* tree-ssa-structalias.c (handle_lhs_call): Delay making\n \tHEAP variables global, do not add a constraint from nonlocal.\n \t(find_func_aliases): Handle escapes through return statements.\n@@ -422,7 +443,7 @@\n \t* config/xtensa/xtensa-protos.h (xtensa_frame_pointer_required):\n \tRemove.\n \n-2009-06-29  Olatunji Ruwase   <tjruwase@google.com>\n+2009-06-29  Olatunji Ruwase  <tjruwase@google.com>\n \n \t* doc/plugins.texi: Document PLUGIN_START_UNIT.\n \t* toplev.c (compile_file): Call PLUGIN_START_UNIT."}, {"sha": "1da18964bd4850c20dd7af49cb76a6d201a45f1c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5071eab79a946632010c75349494c745f35ae1e6/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5071eab79a946632010c75349494c745f35ae1e6/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5071eab79a946632010c75349494c745f35ae1e6", "patch": "@@ -12760,7 +12760,7 @@ ix86_expand_move (enum machine_mode mode, rtx operands[])\n \t    op1 = force_reg (Pmode, op1);\n \t  else if (!TARGET_64BIT || !x86_64_movabs_operand (op1, Pmode))\n \t    {\n-\t      rtx reg = !can_create_pseudo_p () ? op0 : NULL_RTX;\n+\t      rtx reg = can_create_pseudo_p () ? NULL_RTX : op0;\n \t      op1 = legitimize_pic_address (op1, reg);\n \t      if (op0 == op1)\n \t\treturn;"}, {"sha": "353a70bc5baeace4e3e210bc5056492f45f07c11", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5071eab79a946632010c75349494c745f35ae1e6/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5071eab79a946632010c75349494c745f35ae1e6/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=5071eab79a946632010c75349494c745f35ae1e6", "patch": "@@ -5122,7 +5122,7 @@\n    && !((SSE_FLOAT_MODE_P (GET_MODE (operands[1]))\n \t && (TARGET_64BIT || <MODE>mode != DImode))\n \t&& TARGET_SSE_MATH)\n-   && !(reload_completed || reload_in_progress)\"\n+   && can_create_pseudo_p ()\"\n   \"#\"\n   \"&& 1\"\n   [(const_int 0)]\n@@ -5202,7 +5202,7 @@\n    && !TARGET_FISTTP\n    && !(SSE_FLOAT_MODE_P (GET_MODE (operands[1]))\n \t && (TARGET_64BIT || <MODE>mode != DImode))\n-   && !(reload_completed || reload_in_progress)\"\n+   && can_create_pseudo_p ()\"\n   \"#\"\n   \"&& 1\"\n   [(const_int 0)]\n@@ -5377,7 +5377,7 @@\n   \"TARGET_80387\n    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n        || TARGET_MIX_SSE_I387)\n-   && !(reload_completed || reload_in_progress)\"\n+   && can_create_pseudo_p ()\"\n   \"#\"\n   \"&& 1\"\n   [(parallel [(set (match_dup 0)\n@@ -5472,7 +5472,7 @@\n \t     && flag_trapping_math)\n \t    || !(TARGET_INTER_UNIT_CONVERSIONS\n \t         || optimize_function_for_size_p (cfun)))))\n-   && !(reload_completed || reload_in_progress)\"\n+   && can_create_pseudo_p ()\"\n   \"#\"\n   \"&& 1\"\n   [(parallel [(set (match_dup 0) (float:X87MODEF (match_dup 1)))\n@@ -16670,7 +16670,7 @@\n      (clobber (reg:CC FLAGS_REG))])]\n   \"!TARGET_64BIT && TARGET_GNU2_TLS\"\n {\n-  operands[3] = !can_create_pseudo_p () ? operands[0] : gen_reg_rtx (Pmode);\n+  operands[3] = can_create_pseudo_p () ? gen_reg_rtx (Pmode) : operands[0];\n   ix86_tls_descriptor_calls_expanded_in_cfun = true;\n })\n \n@@ -16719,7 +16719,7 @@\n   \"\"\n   [(set (match_dup 0) (match_dup 5))]\n {\n-  operands[5] = !can_create_pseudo_p () ? operands[0] : gen_reg_rtx (Pmode);\n+  operands[5] = can_create_pseudo_p () ? gen_reg_rtx (Pmode) : operands[0];\n   emit_insn (gen_tls_dynamic_gnu2_32 (operands[5], operands[1], operands[2]));\n })\n \n@@ -16734,7 +16734,7 @@\n      (clobber (reg:CC FLAGS_REG))])]\n   \"TARGET_64BIT && TARGET_GNU2_TLS\"\n {\n-  operands[2] = !can_create_pseudo_p () ? operands[0] : gen_reg_rtx (Pmode);\n+  operands[2] = can_create_pseudo_p () ? gen_reg_rtx (Pmode) : operands[0];\n   ix86_tls_descriptor_calls_expanded_in_cfun = true;\n })\n \n@@ -16778,7 +16778,7 @@\n   \"\"\n   [(set (match_dup 0) (match_dup 4))]\n {\n-  operands[4] = !can_create_pseudo_p () ? operands[0] : gen_reg_rtx (Pmode);\n+  operands[4] = can_create_pseudo_p () ? gen_reg_rtx (Pmode) : operands[0];\n   emit_insn (gen_tls_dynamic_gnu2_64 (operands[4], operands[1]));\n })\n \n@@ -18563,7 +18563,7 @@\n \t(unspec:DI [(match_operand:XF 1 \"register_operand\" \"\")]\n \t\t   UNSPEC_FIST))]\n   \"TARGET_USE_FANCY_MATH_387\n-   && !(reload_completed || reload_in_progress)\"\n+   && can_create_pseudo_p ()\"\n   \"#\"\n   \"&& 1\"\n   [(const_int 0)]\n@@ -18630,7 +18630,7 @@\n \t(unspec:X87MODEI12 [(match_operand:XF 1 \"register_operand\" \"\")]\n \t\t\t   UNSPEC_FIST))]\n   \"TARGET_USE_FANCY_MATH_387\n-   && !(reload_completed || reload_in_progress)\"\n+   && can_create_pseudo_p ()\"\n   \"#\"\n   \"&& 1\"\n   [(const_int 0)]\n@@ -18717,7 +18717,7 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_USE_FANCY_MATH_387\n    && flag_unsafe_math_optimizations\n-   && !(reload_completed || reload_in_progress)\"\n+   && can_create_pseudo_p ()\"\n   \"#\"\n   \"&& 1\"\n   [(const_int 0)]\n@@ -18808,7 +18808,7 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_USE_FANCY_MATH_387\n    && flag_unsafe_math_optimizations\n-   && !(reload_completed || reload_in_progress)\"\n+   && can_create_pseudo_p ()\"\n   \"#\"\n   \"&& 1\"\n   [(const_int 0)]\n@@ -18991,7 +18991,7 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_USE_FANCY_MATH_387\n    && flag_unsafe_math_optimizations\n-   && !(reload_completed || reload_in_progress)\"\n+   && can_create_pseudo_p ()\"\n   \"#\"\n   \"&& 1\"\n   [(const_int 0)]\n@@ -19082,7 +19082,7 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_USE_FANCY_MATH_387\n    && flag_unsafe_math_optimizations\n-   && !(reload_completed || reload_in_progress)\"\n+   && can_create_pseudo_p ()\"\n   \"#\"\n   \"&& 1\"\n   [(const_int 0)]\n@@ -19261,7 +19261,7 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_USE_FANCY_MATH_387\n    && flag_unsafe_math_optimizations\n-   && !(reload_completed || reload_in_progress)\"\n+   && can_create_pseudo_p ()\"\n   \"#\"\n   \"&& 1\"\n   [(const_int 0)]\n@@ -19353,7 +19353,7 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_USE_FANCY_MATH_387\n    && flag_unsafe_math_optimizations\n-   && !(reload_completed || reload_in_progress)\"\n+   && can_create_pseudo_p ()\"\n   \"#\"\n   \"&& 1\"\n   [(const_int 0)]\n@@ -19431,7 +19431,7 @@\n \t  [(match_operand:MODEF 1 \"memory_operand\" \"\")]\n \t  UNSPEC_FXAM_MEM))]\n   \"TARGET_USE_FANCY_MATH_387\n-   && !(reload_completed || reload_in_progress)\"\n+   && can_create_pseudo_p ()\"\n   \"#\"\n   \"&& 1\"\n   [(set (match_dup 2)(match_dup 1))"}, {"sha": "1e938ca3c94546ad84038adfb8583e16b4284834", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5071eab79a946632010c75349494c745f35ae1e6/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5071eab79a946632010c75349494c745f35ae1e6/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=5071eab79a946632010c75349494c745f35ae1e6", "patch": "@@ -4760,7 +4760,7 @@\n \t(mult:V16QI (match_operand:V16QI 1 \"register_operand\" \"\")\n \t\t    (match_operand:V16QI 2 \"register_operand\" \"\")))]\n   \"TARGET_SSE2\n-   && !(reload_completed || reload_in_progress)\"\n+   && can_create_pseudo_p ()\"\n   \"#\"\n   \"&& 1\"\n   [(const_int 0)]\n@@ -5218,7 +5218,7 @@\n \t(mult:V4SI (match_operand:V4SI 1 \"register_operand\" \"\")\n \t\t   (match_operand:V4SI 2 \"register_operand\" \"\")))]\n   \"TARGET_SSE2 && !TARGET_SSE4_1 && !TARGET_SSE5\n-   && !(reload_completed || reload_in_progress)\"\n+   && can_create_pseudo_p ()\"\n   \"#\"\n   \"&& 1\"\n   [(const_int 0)]\n@@ -5271,7 +5271,7 @@\n \t(mult:V2DI (match_operand:V2DI 1 \"register_operand\" \"\")\n \t\t   (match_operand:V2DI 2 \"register_operand\" \"\")))]\n   \"TARGET_SSE2\n-   && !(reload_completed || reload_in_progress)\"\n+   && can_create_pseudo_p ()\"\n   \"#\"\n   \"&& 1\"\n   [(const_int 0)]\n@@ -9842,7 +9842,7 @@\n \t   (match_dup 6)]\n \t  UNSPEC_PCMPESTR))]\n   \"TARGET_SSE4_2\n-   && !(reload_completed || reload_in_progress)\"\n+   && can_create_pseudo_p ()\"\n   \"#\"\n   \"&& 1\"\n   [(const_int 0)]\n@@ -9972,7 +9972,7 @@\n \t   (match_dup 4)]\n \t  UNSPEC_PCMPISTR))]\n   \"TARGET_SSE4_2\n-   && !(reload_completed || reload_in_progress)\"\n+   && can_create_pseudo_p ()\"\n   \"#\"\n   \"&& 1\"\n   [(const_int 0)]"}]}