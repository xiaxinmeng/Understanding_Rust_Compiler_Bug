{"sha": "373a9956d89e89f6769aae98a4cc2f7c9ec4b15e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzczYTk5NTZkODllODlmNjc2OWFhZTk4YTRjYzJmN2M5ZWM0YjE1ZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-01-07T01:46:25Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-01-07T01:46:25Z"}, "message": "alpha.md (adddi_2+1): Limit offset such that it will be loadable with a single ldah+lda pair.\n\n        * alpha.md (adddi_2+1): Limit offset such that it will be\n        loadable with a single ldah+lda pair.\n        (adddi_2+2): Explicitly fail split if we can't make it work.\n\nFrom-SVN: r31267", "tree": {"sha": "407b344546f554f0e2a571ccdd0c4d0fde0ac6cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/407b344546f554f0e2a571ccdd0c4d0fde0ac6cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/373a9956d89e89f6769aae98a4cc2f7c9ec4b15e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/373a9956d89e89f6769aae98a4cc2f7c9ec4b15e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/373a9956d89e89f6769aae98a4cc2f7c9ec4b15e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/373a9956d89e89f6769aae98a4cc2f7c9ec4b15e/comments", "author": null, "committer": null, "parents": [{"sha": "ee77eda571f5a82d2836c83c5a62914669397b73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee77eda571f5a82d2836c83c5a62914669397b73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee77eda571f5a82d2836c83c5a62914669397b73"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "86e1dda9819a914745087ed69b5fdab5371823c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373a9956d89e89f6769aae98a4cc2f7c9ec4b15e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373a9956d89e89f6769aae98a4cc2f7c9ec4b15e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=373a9956d89e89f6769aae98a4cc2f7c9ec4b15e", "patch": "@@ -1,3 +1,9 @@\n+2000-01-06  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alpha.md (adddi_2+1): Limit offset such that it will be\n+\tloadable with a single ldah+lda pair.\n+\t(adddi_2+2): Explicitly fail split if we can't make it work.\n+\n 2000-01-06  Mumit Khan  <khan@xraylith.wisc.edu>\n \n \t* protoize.c: Conditionally include unistd.h."}, {"sha": "577cbe647e9762e1a229577810274e40a83b5d38", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373a9956d89e89f6769aae98a4cc2f7c9ec4b15e/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373a9956d89e89f6769aae98a4cc2f7c9ec4b15e/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=373a9956d89e89f6769aae98a4cc2f7c9ec4b15e", "patch": "@@ -593,7 +593,19 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (plus:DI (match_operand:DI 1 \"reg_no_subreg_operand\" \"r\")\n \t\t (match_operand:DI 2 \"const_int_operand\" \"n\")))]\n-  \"REG_OK_FP_BASE_P (operands[1])\"\n+  \"REG_OK_FP_BASE_P (operands[1])\n+   && INTVAL (operands[2]) >= 0\n+   /* This is the largest constant an lda+ldah pair can add, minus\n+      an upper bound on the displacement between SP and AP during\n+      register elimination.  See INITIAL_ELIMINATION_OFFSET.  */\n+   && INTVAL (operands[2])\n+\t< (0x7fff8000\n+\t   - FIRST_PSEUDO_REGISTER * UNITS_PER_WORD\n+\t   - ALPHA_ROUND(current_function_outgoing_args_size)\n+\t   - (ALPHA_ROUND (get_frame_size ()\n+\t\t\t   + max_reg_num () * UNITS_PER_WORD\n+\t\t\t   + current_function_pretend_args_size)\n+\t      - current_function_pretend_args_size))\"\n   \"#\")\n \n ;; Don't do this if we are adjusting SP since we don't want to do it\n@@ -614,8 +626,18 @@\n   HOST_WIDE_INT low = (val & 0xffff) - 2 * (val & 0x8000);\n   HOST_WIDE_INT rest = val - low;\n \n-  operands[3] = GEN_INT (rest);\n   operands[4] = GEN_INT (low);\n+  if (CONST_OK_FOR_LETTER_P (rest, 'L'))\n+    operands[3] = GEN_INT (rest);\n+  else if (! no_new_pseudos)\n+    {\n+      operands[3] = gen_reg_rtx (DImode);\n+      emit_move_insn (operands[3], operands[2]);\n+      emit_insn (gen_adddi3 (operands[0], operands[1], operands[3]));\n+      DONE;\n+    }\n+  else\n+    FAIL;\n }\")\n \n (define_insn \"\""}]}