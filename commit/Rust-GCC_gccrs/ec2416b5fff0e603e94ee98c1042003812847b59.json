{"sha": "ec2416b5fff0e603e94ee98c1042003812847b59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMyNDE2YjVmZmYwZTYwM2U5NGVlOThjMTA0MjAwMzgxMjg0N2I1OQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-10-14T21:54:39Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-10-14T21:54:39Z"}, "message": "Implement P0017R1, C++17 aggregates with bases.\n\n\t* class.c (build_base_field_1): Split out from...\n\t(build_base_field): ...here.  In C++17 mode, build a field for\n\tempty bases.\n\t* decl.c (xref_basetypes): In C++17 aggregates can have bases.\n\t(next_initializable_field): Allow base fields in C++17.\n\t* typeck2.c (process_init_constructor_record): Likewise.\n\nFrom-SVN: r241187", "tree": {"sha": "20dc5c1492c844c3ef6699033ebb18974cd22f91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20dc5c1492c844c3ef6699033ebb18974cd22f91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec2416b5fff0e603e94ee98c1042003812847b59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec2416b5fff0e603e94ee98c1042003812847b59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec2416b5fff0e603e94ee98c1042003812847b59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec2416b5fff0e603e94ee98c1042003812847b59/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "efc5aa6bc7c686b302c5d7fd7f65e3f6361961e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc5aa6bc7c686b302c5d7fd7f65e3f6361961e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efc5aa6bc7c686b302c5d7fd7f65e3f6361961e1"}], "stats": {"total": 226, "additions": 193, "deletions": 33}, "files": [{"sha": "43c573b1e11c9d1e00cfcb8f78c6aed13c7fdc5b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2416b5fff0e603e94ee98c1042003812847b59/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2416b5fff0e603e94ee98c1042003812847b59/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ec2416b5fff0e603e94ee98c1042003812847b59", "patch": "@@ -1,3 +1,13 @@\n+2016-10-14  Jason Merrill  <jason@redhat.com>\n+\n+\tImplement P0017R1, C++17 aggregates with bases.\n+\t* class.c (build_base_field_1): Split out from...\n+\t(build_base_field): ...here.  In C++17 mode, build a field for\n+\tempty bases.\n+\t* decl.c (xref_basetypes): In C++17 aggregates can have bases.\n+\t(next_initializable_field): Allow base fields in C++17.\n+\t* typeck2.c (process_init_constructor_record): Likewise.\n+\n 2016-10-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tDR 1511 - const volatile variables and ODR"}, {"sha": "d334b7cdd6c0c7653b7028533831c5f0d54a3c79", "filename": "gcc/cp/class.c", "status": "modified", "additions": 46, "deletions": 29, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2416b5fff0e603e94ee98c1042003812847b59/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2416b5fff0e603e94ee98c1042003812847b59/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=ec2416b5fff0e603e94ee98c1042003812847b59", "patch": "@@ -4452,6 +4452,34 @@ layout_empty_base (record_layout_info rli, tree binfo,\n   return atend;\n }\n \n+/* Build the FIELD_DECL for BASETYPE as a base of T, add it to the chain of\n+   fields at NEXT_FIELD, and return it.  */\n+\n+static tree\n+build_base_field_1 (tree t, tree basetype, tree *&next_field)\n+{\n+  /* Create the FIELD_DECL.  */\n+  gcc_assert (CLASSTYPE_AS_BASE (basetype));\n+  tree decl = build_decl (input_location,\n+\t\t\t  FIELD_DECL, NULL_TREE, CLASSTYPE_AS_BASE (basetype));\n+  DECL_ARTIFICIAL (decl) = 1;\n+  DECL_IGNORED_P (decl) = 1;\n+  DECL_FIELD_CONTEXT (decl) = t;\n+  DECL_SIZE (decl) = CLASSTYPE_SIZE (basetype);\n+  DECL_SIZE_UNIT (decl) = CLASSTYPE_SIZE_UNIT (basetype);\n+  SET_DECL_ALIGN (decl, CLASSTYPE_ALIGN (basetype));\n+  DECL_USER_ALIGN (decl) = CLASSTYPE_USER_ALIGN (basetype);\n+  DECL_MODE (decl) = TYPE_MODE (basetype);\n+  DECL_FIELD_IS_BASE (decl) = 1;\n+\n+  /* Add the new FIELD_DECL to the list of fields for T.  */\n+  DECL_CHAIN (decl) = *next_field;\n+  *next_field = decl;\n+  next_field = &DECL_CHAIN (decl);\n+\n+  return decl;\n+}\n+\n /* Layout the base given by BINFO in the class indicated by RLI.\n    *BASE_ALIGN is a running maximum of the alignments of\n    any base class.  OFFSETS gives the location of empty base\n@@ -4483,29 +4511,12 @@ build_base_field (record_layout_info rli, tree binfo,\n       CLASSTYPE_EMPTY_P (t) = 0;\n \n       /* Create the FIELD_DECL.  */\n-      decl = build_decl (input_location,\n-\t\t\t FIELD_DECL, NULL_TREE, CLASSTYPE_AS_BASE (basetype));\n-      DECL_ARTIFICIAL (decl) = 1;\n-      DECL_IGNORED_P (decl) = 1;\n-      DECL_FIELD_CONTEXT (decl) = t;\n-      if (CLASSTYPE_AS_BASE (basetype))\n-\t{\n-\t  DECL_SIZE (decl) = CLASSTYPE_SIZE (basetype);\n-\t  DECL_SIZE_UNIT (decl) = CLASSTYPE_SIZE_UNIT (basetype);\n-\t  SET_DECL_ALIGN (decl, CLASSTYPE_ALIGN (basetype));\n-\t  DECL_USER_ALIGN (decl) = CLASSTYPE_USER_ALIGN (basetype);\n-\t  DECL_MODE (decl) = TYPE_MODE (basetype);\n-\t  DECL_FIELD_IS_BASE (decl) = 1;\n-\n-\t  /* Try to place the field.  It may take more than one try if we\n-\t     have a hard time placing the field without putting two\n-\t     objects of the same type at the same address.  */\n-\t  layout_nonempty_base_or_field (rli, decl, binfo, offsets);\n-\t  /* Add the new FIELD_DECL to the list of fields for T.  */\n-\t  DECL_CHAIN (decl) = *next_field;\n-\t  *next_field = decl;\n-\t  next_field = &DECL_CHAIN (decl);\n-\t}\n+      decl = build_base_field_1 (t, basetype, next_field);\n+\n+      /* Try to place the field.  It may take more than one try if we\n+\t have a hard time placing the field without putting two\n+\t objects of the same type at the same address.  */\n+      layout_nonempty_base_or_field (rli, decl, binfo, offsets);\n     }\n   else\n     {\n@@ -4536,11 +4547,17 @@ build_base_field (record_layout_info rli, tree binfo,\n \t    CLASSTYPE_NEARLY_EMPTY_P (t) = 0;\n \t}\n \n-      /* We do not create a FIELD_DECL for empty base classes because\n-\t it might overlap some other field.  We want to be able to\n-\t create CONSTRUCTORs for the class by iterating over the\n-\t FIELD_DECLs, and the back end does not handle overlapping\n-\t FIELD_DECLs.  */\n+      /* We used to not create a FIELD_DECL for empty base classes because of\n+\t back end issues with overlapping FIELD_DECLs, but that doesn't seem to\n+\t be a problem anymore.  We need them to handle initialization of C++17\n+\t aggregate bases.  */\n+      if (cxx_dialect >= cxx1z && !BINFO_VIRTUAL_P (binfo))\n+\t{\n+\t  tree decl = build_base_field_1 (t, basetype, next_field);\n+\t  DECL_FIELD_OFFSET (decl) = BINFO_OFFSET (binfo);\n+\t  DECL_FIELD_BIT_OFFSET (decl) = bitsize_zero_node;\n+\t  SET_DECL_OFFSET_ALIGN (decl, BITS_PER_UNIT);\n+\t}\n \n       /* An empty virtual base causes a class to be non-empty\n \t -- but in that case we do not need to clear CLASSTYPE_EMPTY_P\n@@ -6586,7 +6603,7 @@ layout_class_type (tree t, tree *virtuals_p)\n \n   /* Make sure that empty classes are reflected in RLI at this\n      point.  */\n-  include_empty_classes(rli);\n+  include_empty_classes (rli);\n \n   /* Make sure not to create any structures with zero size.  */\n   if (integer_zerop (rli_size_unit_so_far (rli)) && CLASSTYPE_EMPTY_P (t))"}, {"sha": "ecf4d147d2a24bbecdc6b49d29857ec031cbf682", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2416b5fff0e603e94ee98c1042003812847b59/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2416b5fff0e603e94ee98c1042003812847b59/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ec2416b5fff0e603e94ee98c1042003812847b59", "patch": "@@ -5569,7 +5569,8 @@ next_initializable_field (tree field)\n   while (field\n \t && (TREE_CODE (field) != FIELD_DECL\n \t     || (DECL_C_BIT_FIELD (field) && !DECL_NAME (field))\n-\t     || DECL_ARTIFICIAL (field)))\n+\t     || (DECL_ARTIFICIAL (field)\n+\t\t && !(cxx_dialect >= cxx1z && DECL_FIELD_IS_BASE (field)))))\n     field = DECL_CHAIN (field);\n \n   return field;\n@@ -13153,8 +13154,8 @@ xref_basetypes (tree ref, tree base_list)\n   if (max_bases)\n     {\n       vec_alloc (BINFO_BASE_ACCESSES (binfo), max_bases);\n-      /* An aggregate cannot have baseclasses.  */\n-      CLASSTYPE_NON_AGGREGATE (ref) = 1;\n+      /* A C++98 POD cannot have base classes.  */\n+      CLASSTYPE_NON_LAYOUT_POD_P (ref) = true;\n \n       if (TREE_CODE (ref) == UNION_TYPE)\n \terror (\"derived union %qT invalid\", ref);\n@@ -13182,6 +13183,13 @@ xref_basetypes (tree ref, tree base_list)\n       if (access == access_default_node)\n \taccess = default_access;\n \n+      /* Before C++17, an aggregate cannot have base classes.  In C++17, an\n+\t aggregate can't have virtual, private, or protected base classes.  */\n+      if (cxx_dialect < cxx1z\n+\t  || access != access_public_node\n+\t  || via_virtual)\n+\tCLASSTYPE_NON_AGGREGATE (ref) = true;\n+\n       if (PACK_EXPANSION_P (basetype))\n         basetype = PACK_EXPANSION_PATTERN (basetype);\n       if (TREE_CODE (basetype) == TYPE_DECL)"}, {"sha": "022a47883a0e4def6eaeca21c901ce4fac3558f5", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2416b5fff0e603e94ee98c1042003812847b59/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2416b5fff0e603e94ee98c1042003812847b59/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=ec2416b5fff0e603e94ee98c1042003812847b59", "patch": "@@ -1352,6 +1352,7 @@ process_init_constructor_record (tree type, tree init,\n   gcc_assert (TREE_CODE (type) == RECORD_TYPE);\n   gcc_assert (!CLASSTYPE_VBASECLASSES (type));\n   gcc_assert (!TYPE_BINFO (type)\n+\t      || cxx_dialect >= cxx1z\n \t      || !BINFO_N_BASE_BINFOS (TYPE_BINFO (type)));\n   gcc_assert (!TYPE_POLYMORPHIC_P (type));\n \n@@ -1369,7 +1370,9 @@ process_init_constructor_record (tree type, tree init,\n       if (!DECL_NAME (field) && DECL_C_BIT_FIELD (field))\n \tcontinue;\n \n-      if (TREE_CODE (field) != FIELD_DECL || DECL_ARTIFICIAL (field))\n+      if (TREE_CODE (field) != FIELD_DECL\n+\t  || (DECL_ARTIFICIAL (field)\n+\t      && !(cxx_dialect >= cxx1z && DECL_FIELD_IS_BASE (field))))\n \tcontinue;\n \n       /* If this is a bitfield, first convert to the declared type.  */"}, {"sha": "37bb472bbe1bd6e3154cfe6b6e1e326e5fb7735f", "filename": "gcc/testsuite/g++.dg/cpp1z/aggr-base1.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2416b5fff0e603e94ee98c1042003812847b59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2416b5fff0e603e94ee98c1042003812847b59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base1.C?ref=ec2416b5fff0e603e94ee98c1042003812847b59", "patch": "@@ -0,0 +1,23 @@\n+// { dg-options -std=c++1z }\n+// { dg-do run }\n+\n+struct base1 { int b1, b2 = 42; };\n+struct base2 {\n+  base2() {\n+    b3 = 42;\n+  }\n+  int b3;\n+};\n+struct derived : base1, base2 {\n+  int d;\n+};\n+\n+derived d1{{1, 2}, {}, 4};\n+derived d2{{}, {}, 4};\n+\n+#define assert(X) do { if (!(X)) __builtin_abort(); } while(0)\n+int main()\n+{\n+  assert (d1.b1 == 1 && d1.b2 == 2 && d1.b3 == 42 && d1.d == 4);\n+  assert (d2.b1 == 0 && d2.b2 == 42 && d2.b3 == 42 && d2.d == 4);\n+}"}, {"sha": "4b28485ffba9db9e5e903824607760538072b451", "filename": "gcc/testsuite/g++.dg/cpp1z/aggr-base1a.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2416b5fff0e603e94ee98c1042003812847b59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base1a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2416b5fff0e603e94ee98c1042003812847b59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base1a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base1a.C?ref=ec2416b5fff0e603e94ee98c1042003812847b59", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile { target { c++11 && c++14_down } } }\n+\n+struct base1 { int b1, b2 = 42; };\n+struct base2 {\n+  base2() {\n+    b3 = 42;\n+  }\n+  int b3;\n+};\n+struct derived : base1, base2 {\n+  int d;\n+};\n+\n+derived d1{{1, 2}, {}, 4};\t// { dg-error \"\" }\n+derived d2{{}, {}, 4};\t\t// { dg-error \"\" }"}, {"sha": "9da5ebfa94e1c00a4d290e06c297761a26827cb0", "filename": "gcc/testsuite/g++.dg/cpp1z/aggr-base2.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2416b5fff0e603e94ee98c1042003812847b59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2416b5fff0e603e94ee98c1042003812847b59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base2.C?ref=ec2416b5fff0e603e94ee98c1042003812847b59", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options -std=c++1z }\n+\n+struct derived;\n+struct base {\n+  friend struct derived;\n+private: \n+  base();\n+};\n+struct derived : base {};\n+\n+derived d1{};\t\t\t// { dg-error \"\" \"\" { target c++1z } }\n+derived d2;\t\t\t// still OK"}, {"sha": "821dce1d7e75361886246aed2f65f4322a22582b", "filename": "gcc/testsuite/g++.dg/cpp1z/aggr-base2a.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2416b5fff0e603e94ee98c1042003812847b59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base2a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2416b5fff0e603e94ee98c1042003812847b59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base2a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base2a.C?ref=ec2416b5fff0e603e94ee98c1042003812847b59", "patch": "@@ -0,0 +1,12 @@\n+// { dg-do compile { target c++11 } }\n+\n+struct derived;\n+struct base {\n+  friend struct derived;\n+private: \n+  base();\n+};\n+struct derived : base {};\n+\n+derived d1{};\t\t\t// { dg-error \"\" \"\" { target c++1z } }\n+derived d2;\t\t\t// still OK"}, {"sha": "4acbc0b83a1c49f5c52928bf075278a2c19dbf2a", "filename": "gcc/testsuite/g++.dg/cpp1z/aggr-base3.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2416b5fff0e603e94ee98c1042003812847b59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2416b5fff0e603e94ee98c1042003812847b59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base3.C?ref=ec2416b5fff0e603e94ee98c1042003812847b59", "patch": "@@ -0,0 +1,11 @@\n+// { dg-options -std=c++1z }\n+\n+struct derived;\n+struct base { };\n+struct derived : base {\n+  int i;\n+};\n+\n+derived d1{1};\t\t\t// { dg-error \"base\" }\n+derived d2{{},1};\t\t// OK\n+"}, {"sha": "fd93f4ae8d6e447f339005ff53ff7956927c929c", "filename": "gcc/testsuite/g++.dg/cpp1z/aggr-base4.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2416b5fff0e603e94ee98c1042003812847b59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2416b5fff0e603e94ee98c1042003812847b59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base4.C?ref=ec2416b5fff0e603e94ee98c1042003812847b59", "patch": "@@ -0,0 +1,21 @@\n+// { dg-options -std=c++1z }\n+// { dg-do run }\n+\n+struct derived;\n+struct base { };\n+struct derived : base {\n+  int i;\n+};\n+\n+bool flag;\n+base f() {\n+  flag = true;\n+  return base();\n+}\n+\n+derived d2{f(),1};\n+\n+int main()\n+{\n+  return (!flag || d2.i != 1);\n+}"}, {"sha": "85dd36582934aa49e36bef823a41f45f5e61f9e0", "filename": "gcc/testsuite/g++.dg/cpp1z/aggr-base5.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2416b5fff0e603e94ee98c1042003812847b59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2416b5fff0e603e94ee98c1042003812847b59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base5.C?ref=ec2416b5fff0e603e94ee98c1042003812847b59", "patch": "@@ -0,0 +1,14 @@\n+// { dg-options \"-std=c++1z -w\" }\n+// { dg-do run }\n+\n+struct A { };\n+struct B: A { int i; };\n+struct C: A, B { int j; };\n+\n+constexpr C c = { {}, { {}, 1 }, 2 };\n+\n+#define assert(X) do { if (!(X)) __builtin_abort(); } while(0)\n+int main()\n+{\n+  assert (c.i == 1 && c.j == 2);\n+}"}, {"sha": "31219ce742382a4db07813623441de1ef567f88d", "filename": "gcc/testsuite/g++.dg/cpp1z/aggr-base6.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2416b5fff0e603e94ee98c1042003812847b59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2416b5fff0e603e94ee98c1042003812847b59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base6.C?ref=ec2416b5fff0e603e94ee98c1042003812847b59", "patch": "@@ -0,0 +1,14 @@\n+// { dg-options \"-std=c++1z -w\" }\n+// { dg-do run }\n+\n+struct A { };\n+struct B: A { int i; };\n+struct C: B, A { int j; };\n+\n+constexpr C c = { { {}, 1 }, {}, 2 };\n+\n+#define assert(X) do { if (!(X)) __builtin_abort(); } while(0)\n+int main()\n+{\n+  assert (c.i == 1 && c.j == 2);\n+}"}]}