{"sha": "9e57d5caf27099facc4fba0bdc176b88568f9c58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU1N2Q1Y2FmMjcwOTlmYWNjNGZiYTBiZGMxNzZiODg1NjhmOWM1OA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-04-17T03:27:05Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-04-17T03:27:05Z"}, "message": "acinclude.m4 (GLIBCPP_CHECK_PCH): New.\n\n\n2003-04-16  Benjamin Kosnik  <bkoz@redhat.com>\n\n        * acinclude.m4 (GLIBCPP_CHECK_PCH): New.\n        * aclocal.m4: Regenerated.\n        * configure.in: Remove old demangler bits.\n        Call pch checks.\n        * configure: Regenerate.\n        * config.h.in: Regenerate.\n        * include/Makefile.am (allstamps): Now allstamped.\n        (allcreated): Define this.\n        (all-local): Use 'em.\n        Conditionally define pch_build, pch_install based on\n        GLIBCPP_BUILD_PCH.\n        (${pch_output}): New rule.\n        (install-pch): New rule.\n        (install-headers): New rule.\n        (install-data-local): Install headers and conditionally pch.\n        * include/Makefile.in: Regenerate.\n        * testsuite_flags.in (--build-cxx): Use pch file.\n\nFrom-SVN: r65717", "tree": {"sha": "e460cc4ca98c67c6e3fec7c55e4fdd90970d56db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e460cc4ca98c67c6e3fec7c55e4fdd90970d56db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e57d5caf27099facc4fba0bdc176b88568f9c58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e57d5caf27099facc4fba0bdc176b88568f9c58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e57d5caf27099facc4fba0bdc176b88568f9c58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e57d5caf27099facc4fba0bdc176b88568f9c58/comments", "author": null, "committer": null, "parents": [{"sha": "8cbd5ce01a5ed18a55e06f78933d33279c1817c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cbd5ce01a5ed18a55e06f78933d33279c1817c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cbd5ce01a5ed18a55e06f78933d33279c1817c3"}], "stats": {"total": 7403, "additions": 3752, "deletions": 3651}, "files": [{"sha": "945361179faae26138aae11ee71ec622bc5e1412", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e57d5caf27099facc4fba0bdc176b88568f9c58/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e57d5caf27099facc4fba0bdc176b88568f9c58/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9e57d5caf27099facc4fba0bdc176b88568f9c58", "patch": "@@ -1,3 +1,23 @@\n+2003-04-16  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* acinclude.m4 (GLIBCPP_CHECK_PCH): New.\n+\t* aclocal.m4: Regenerated.\n+\t* configure.in: Remove old demangler bits.\n+\tCall pch checks.\n+\t* configure: Regenerate.\n+\t* config.h.in: Regenerate.\n+\t* include/Makefile.am (allstamps): Now allstamped.\n+\t(allcreated): Define this.\n+\t(all-local): Use 'em.\n+\tConditionally define pch_build, pch_install based on\n+\tGLIBCPP_BUILD_PCH.\n+\t(${pch_output}): New rule.\n+\t(install-pch): New rule.\n+\t(install-headers): New rule.\n+\t(install-data-local): Install headers and conditionally pch.\n+        * include/Makefile.in: Regenerate.\n+        * testsuite_flags.in (--build-cxx): Use pch file.\n+\n 2003-04-16  Jonathan Wakely  <redi@gcc.gnu.org>\n \n \t* docs/html/ext/sgiexts.html: Fix path to stylesheet."}, {"sha": "fac091e74d1d10bdd682a0aae87b62e77fef13fe", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e57d5caf27099facc4fba0bdc176b88568f9c58/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e57d5caf27099facc4fba0bdc176b88568f9c58/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=9e57d5caf27099facc4fba0bdc176b88568f9c58", "patch": "@@ -1424,6 +1424,36 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n ])\n \n \n+dnl\n+dnl Check to see if building and using a C++ precompiled header can be done.\n+dnl\n+dnl GLIBCPP_CHECK_PCH\n+dnl\n+dnl If it looks like it may work, flip bits on in include/Makefile.am\n+dnl\n+AC_DEFUN(GLIBCPP_CHECK_PCH, [\n+  ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS='-Werror -Winvalid-pch -Wno-deprecated -x c++-header'\n+\n+  AC_MSG_CHECKING([for compiler that seems to compile .gch files])\n+  if test x${glibcpp_pch_comp+set} != xset; then\n+    AC_CACHE_VAL(glibcpp_pch_comp, [\n+      AC_LANG_SAVE\n+      AC_LANG_CPLUSPLUS\n+      AC_TRY_COMPILE([#include <math.h>\n+\t\t     ],\n+                     [ $1(0);],\n+                     [glibcpp_pch_comp=yes], [glibcpp_pch_comp=no])\n+      AC_LANG_RESTORE\n+    ])\n+  fi\n+  AC_MSG_RESULT([$glibcpp_pch_comp])\n+\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AM_CONDITIONAL(GLIBCPP_BUILD_PCH, test \"$glibcpp_pch_comp\" = yes)\n+])\n+\n dnl\n dnl Setup to use the gcc gthr.h thread-specific memory and mutex model.\n dnl We must stage the required headers so that they will be installed"}, {"sha": "6a329a46df3a427316d813f0991840871be3900a", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 35, "deletions": 37, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e57d5caf27099facc4fba0bdc176b88568f9c58/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e57d5caf27099facc4fba0bdc176b88568f9c58/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=9e57d5caf27099facc4fba0bdc176b88568f9c58", "patch": "@@ -1,4 +1,4 @@\n-dnl aclocal.m4 generated automatically by aclocal 1.4-p6\n+dnl aclocal.m4 generated automatically by aclocal 1.4-p5\n \n dnl Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n dnl This file is free software; the Free Software Foundation\n@@ -1436,6 +1436,36 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n ])\n \n \n+dnl\n+dnl Check to see if building and using a C++ precompiled header can be done.\n+dnl\n+dnl GLIBCPP_CHECK_PCH\n+dnl\n+dnl If it looks like it may work, flip bits on in include/Makefile.am\n+dnl\n+AC_DEFUN(GLIBCPP_CHECK_PCH, [\n+  ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS='-Werror -Winvalid-pch -Wno-deprecated -x c++-header'\n+\n+  AC_MSG_CHECKING([for compiler that seems to compile .gch files])\n+  if test x${glibcpp_pch_comp+set} != xset; then\n+    AC_CACHE_VAL(glibcpp_pch_comp, [\n+      AC_LANG_SAVE\n+      AC_LANG_CPLUSPLUS\n+      AC_TRY_COMPILE([#include <math.h>\n+\t\t     ],\n+                     [ $1(0);],\n+                     [glibcpp_pch_comp=yes], [glibcpp_pch_comp=no])\n+      AC_LANG_RESTORE\n+    ])\n+  fi\n+  AC_MSG_RESULT([$glibcpp_pch_comp])\n+\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AM_CONDITIONAL(GLIBCPP_BUILD_PCH, test \"$glibcpp_pch_comp\" = yes)\n+])\n+\n dnl\n dnl Setup to use the gcc gthr.h thread-specific memory and mutex model.\n dnl We must stage the required headers so that they will be installed\n@@ -2308,16 +2338,14 @@ AC_MSG_RESULT($enable_symvers)\n ])\n \n \n-# isc-posix.m4 serial 2 (gettext-0.11.2)\n+# isc-posix.m4 serial 1 (gettext-0.10.40)\n dnl Copyright (C) 1995-2002 Free Software Foundation, Inc.\n dnl This file is free software, distributed under the terms of the GNU\n dnl General Public License.  As a special exception to the GNU General\n dnl Public License, this file may be distributed as part of a program\n dnl that contains a configuration script generated by Autoconf, under\n dnl the same distribution terms as the rest of that program.\n \n-# This file is not needed with autoconf-2.53 and newer.  Remove it in 2005.\n-\n # This test replaces the one in autoconf.\n # Currently this macro should have the same name as the autoconf macro\n # because gettext's gettext.m4 (distributed in the automake package)\n@@ -2378,8 +2406,7 @@ dnl Usage:\n dnl AM_INIT_AUTOMAKE(package,version, [no-define])\n \n AC_DEFUN([AM_INIT_AUTOMAKE],\n-[AC_REQUIRE([AM_SET_CURRENT_AUTOMAKE_VERSION])dnl\n-AC_REQUIRE([AC_PROG_INSTALL])\n+[AC_REQUIRE([AC_PROG_INSTALL])\n PACKAGE=[$1]\n AC_SUBST(PACKAGE)\n VERSION=[$2]\n@@ -2395,42 +2422,13 @@ AC_REQUIRE([AM_SANITY_CHECK])\n AC_REQUIRE([AC_ARG_PROGRAM])\n dnl FIXME This is truly gross.\n missing_dir=`cd $ac_aux_dir && pwd`\n-AM_MISSING_PROG(ACLOCAL, aclocal-${am__api_version}, $missing_dir)\n+AM_MISSING_PROG(ACLOCAL, aclocal, $missing_dir)\n AM_MISSING_PROG(AUTOCONF, autoconf, $missing_dir)\n-AM_MISSING_PROG(AUTOMAKE, automake-${am__api_version}, $missing_dir)\n+AM_MISSING_PROG(AUTOMAKE, automake, $missing_dir)\n AM_MISSING_PROG(AUTOHEADER, autoheader, $missing_dir)\n AM_MISSING_PROG(MAKEINFO, makeinfo, $missing_dir)\n AC_REQUIRE([AC_PROG_MAKE_SET])])\n \n-# Copyright 2002  Free Software Foundation, Inc.\n-\n-# This program is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 2, or (at your option)\n-# any later version.\n-\n-# This program is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-\n-# You should have received a copy of the GNU General Public License\n-# along with this program; if not, write to the Free Software\n-# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA\n-\n-# AM_AUTOMAKE_VERSION(VERSION)\n-# ----------------------------\n-# Automake X.Y traces this macro to ensure aclocal.m4 has been\n-# generated from the m4 files accompanying Automake X.Y.\n-AC_DEFUN([AM_AUTOMAKE_VERSION],[am__api_version=\"1.4\"])\n-\n-# AM_SET_CURRENT_AUTOMAKE_VERSION\n-# -------------------------------\n-# Call AM_AUTOMAKE_VERSION so it can be traced.\n-# This function is AC_REQUIREd by AC_INIT_AUTOMAKE.\n-AC_DEFUN([AM_SET_CURRENT_AUTOMAKE_VERSION],\n-\t [AM_AUTOMAKE_VERSION([1.4-p6])])\n-\n #\n # Check to make sure that the build environment is sane.\n #"}, {"sha": "36e2ae536923f1a8b11abdc1046533f78c77b46b", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e57d5caf27099facc4fba0bdc176b88568f9c58/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e57d5caf27099facc4fba0bdc176b88568f9c58/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=9e57d5caf27099facc4fba0bdc176b88568f9c58", "patch": "@@ -746,9 +746,6 @@\n /* Define if you have the <stdlib.h> header file.  */\n #undef HAVE_STDLIB_H\n \n-/* Define if you have the <string.h> header file.  */\n-#undef HAVE_STRING_H\n-\n /* Define if you have the <sys/filio.h> header file.  */\n #undef HAVE_SYS_FILIO_H\n "}, {"sha": "8d58e67ab3d32d000c60ddfbc55daf3fd635ec17", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 3593, "deletions": 3570, "changes": 7163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e57d5caf27099facc4fba0bdc176b88568f9c58/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e57d5caf27099facc4fba0bdc176b88568f9c58/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=9e57d5caf27099facc4fba0bdc176b88568f9c58"}, {"sha": "89f69c7a1043a8ca35617aaba76feb6b52742bb4", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e57d5caf27099facc4fba0bdc176b88568f9c58/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e57d5caf27099facc4fba0bdc176b88568f9c58/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=9e57d5caf27099facc4fba0bdc176b88568f9c58", "patch": "@@ -68,12 +68,9 @@ GLIBCPP_ENABLE_CXX_FLAGS\n GLIBCPP_ENABLE_DEBUG([no])\n GLIBCPP_ENABLE_DEBUG_FLAGS([none])\n \n-# Check for headers necessary for libsupc++ using dyn-string.c/cxa_demangle.c\n-AC_CHECK_HEADERS(string.h stdlib.h)\n-\n # No surprises, no surprises...\n if test $ATOMICITYH = cpu/generic ; then\n-  AC_MSG_WARN([No native atomic operations are provided yet for this platform.])\n+  AC_MSG_WARN([No native atomic operations are provided for this platform.])\n   if test $target_thread_file = single; then\n     AC_MSG_WARN([They cannot be faked when thread support is disabled.])\n     AC_MSG_WARN([Thread-safety of certain classes is not guaranteed.])\n@@ -402,12 +399,14 @@ else\n \n   # Check for available headers.\n   AC_CHECK_HEADERS([nan.h ieeefp.h endian.h sys/isa_defs.h machine/endian.h \\\n-  machine/param.h sys/machine.h fp.h locale.h float.h inttypes.h gconv.h sys/types.h])\n+  machine/param.h sys/machine.h fp.h locale.h float.h inttypes.h gconv.h \\\n+  sys/types.h])\n \n   GLIBCPP_CHECK_COMPILER_FEATURES\n+  GLIBCPP_CHECK_PCH\n   GLIBCPP_CHECK_LINKER_FEATURES\n-  GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT\n   GLIBCPP_CHECK_MATH_SUPPORT\n+  GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT\n   GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT\n   GLIBCPP_CHECK_WCHAR_T_SUPPORT\n   GLIBCPP_CHECK_STDLIB_SUPPORT"}, {"sha": "0ab3d59400e7e8717840f9825ea2f8a1675ff5eb", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 35, "deletions": 17, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e57d5caf27099facc4fba0bdc176b88568f9c58/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e57d5caf27099facc4fba0bdc176b88568f9c58/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=9e57d5caf27099facc4fba0bdc176b88568f9c58", "patch": "@@ -343,15 +343,30 @@ thread_target_headers = \\\n pch_input = stdc++.h\n pch_output = stdc++.h.gch\n pch_source = ${glibcpp_srcdir}/include/${pch_input}\n+PCHFLAGS=-Winvalid-pch -Wno-deprecated -x c++-header $(CXXFLAGS)\n+if GLIBCPP_BUILD_PCH\n+pch_build = ${pch_output}\n+pch_install = install-pch\n+else\n+pch_build = \n+pch_install = \n+endif\n \n # List of all timestamp files.  By keeping only one copy of this list, both\n # CLEANFILES and all-local are kept up-to-date.\n-allstamps = \\\n+allstamped = \\\n \tstamp-std stamp-bits stamp-c_base stamp-c_compatibility \\\n-\tstamp-backward stamp-ext stamp-target\n+\tstamp-backward stamp-ext stamp-target \n+\n+# List of all files that are created by explicit building, editing, or\n+# catenation.\n+allcreated = \\\n+\t${target_builddir}/c++config.h \\\n+\t${thread_target_headers} \\\n+\t${pch_build}\n \n # Here are the rules for building the headers\n-all-local: ${target_builddir}/c++config.h ${thread_target_headers} ${allstamps}\n+all-local: ${allstamped} ${allcreated} \n \n # This rule is slightly different, in that we must change the name of the\n # local file from std_foo.h to foo.\n@@ -367,14 +382,6 @@ stamp-std: ${std_headers}\n \t  echo `date` > stamp-std ;\\\n \tfi\n \n-PCHFLAGS=-Winvalid-pch -x c++-header $(CXXFLAGS)\n-stamp-stdc++-precompile: stamp-std ${target_builddir}/c++config.h ${pch_source}\n-\tif [ ! -f \"${pch_output}\" ]; then \\\n-\t  $(CXX) $(PCHFLAGS) $(INCLUDES) ${pch_source} -o ${pch_output}; \\\n-\t  touch ${pch_input}; \\\n-\tfi; \\\n-\ttouch stamp-stdc++-precompile\n-\n stamp-bits: ${bits_headers}\n \t@if [ ! -d \"${bits_builddir}\" ]; then \\\n \t  mkdir -p ${bits_builddir} ;\\\n@@ -388,11 +395,11 @@ stamp-c_base: ${c_base_headers} ${c_base_headers_extra}\n \t@if [ ! -d \"${c_base_builddir}\" ]; then \\\n \t  mkdir -p ${c_base_builddir} ;\\\n \tfi ;\\\n-\t(cd ${c_base_builddir} && for h in ${c_base_headers}; do \\\n-\t  official_name=`echo $$h | sed -e 's,.*/std_,,' -e 's,\\.h$$,,'` ;\\\n-\t  @LN_S@ $$h ./$${official_name} || true ;\\\n-\tdone) ;\\\n \tif [ ! -f stamp-c_base ]; then \\\n+\t  (cd ${c_base_builddir} && for h in ${c_base_headers}; do \\\n+\t    official_name=`echo $$h | sed -e 's,.*/std_,,' -e 's,\\.h$$,,'` ;\\\n+\t    @LN_S@ $$h ./$${official_name} || true ;\\\n+\t  done) ;\\\n \t  if [ ! -z \"${c_base_headers_extra}\" ]; then \\\n \t  (cd ${bits_builddir} && @LN_S@ ${c_base_headers_extra}  . || true) ;\\\n \t  fi ;\\\n@@ -492,6 +499,11 @@ ${target_builddir}/gthr-default.h: ${toplevel_srcdir}/gcc/${glibcpp_thread_h} \\\n \t    -e 's,^#include \"\\(.*\\)\",#include <bits/\\1>,g' \\\n \t    < ${toplevel_srcdir}/gcc/${glibcpp_thread_h} > $@\n \n+# Build a precompiled C++ include, stdc++.h.gch.\n+${pch_output}: ${allstamped} ${target_builddir}/c++config.h ${pch_source}\n+\ttouch ${pch_input}; \\\n+\t$(CXX) $(PCHFLAGS) $(INCLUDES) ${pch_source} -o ${pch_output}; \n+\n # For robustness sake (in light of junk files or in-source\n # configuration), copy from the build or source tree to the install\n # tree using only the human-maintained file lists and directory\n@@ -501,7 +513,10 @@ ${target_builddir}/gthr-default.h: ${toplevel_srcdir}/gcc/${glibcpp_thread_h} \\\n # target_headers_extra are taken out of the build tree staging area;\n # the rest are taken from the original source tree.\n gxx_include_dir = @gxx_include_dir@\n-install-data-local:\n+\n+install-data-local: install-headers ${pch_install}\n+\n+install-headers:\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${bits_builddir}\n \tfor file in ${bits_headers}; do \\\n@@ -529,8 +544,11 @@ install-data-local:\n \t ${thread_target_headers}; do \\\n \t  $(INSTALL_DATA) $${file} $(DESTDIR)${gxx_include_dir}/${target_builddir}; done\n \n+install-pch:\n+\t$(INSTALL_DATA) ${std_builddir}/${pch_output} $(DESTDIR)${gxx_include_dir}/${std_builddir}\n+\n # By adding these files here, automake will remove them for 'make clean'\n-CLEANFILES = *.gch stamp-stdc++-precompile\n+CLEANFILES = *.gch \n \n # Stop implicit '.o' make rules from ever stomping on extensionless\n # headers, in the improbable case where some foolish, crack-addled"}, {"sha": "971b40e4ee33f6308ef32e63e8c995e1fe289fbf", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e57d5caf27099facc4fba0bdc176b88568f9c58/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e57d5caf27099facc4fba0bdc176b88568f9c58/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=9e57d5caf27099facc4fba0bdc176b88568f9c58", "patch": "@@ -460,15 +460,26 @@ thread_target_headers = \\\n pch_input = stdc++.h\n pch_output = stdc++.h.gch\n pch_source = ${glibcpp_srcdir}/include/${pch_input}\n+PCHFLAGS = -Winvalid-pch -Wno-deprecated -x c++-header $(CXXFLAGS)\n+@GLIBCPP_BUILD_PCH_TRUE@pch_build = @GLIBCPP_BUILD_PCH_TRUE@${pch_output}\n+@GLIBCPP_BUILD_PCH_FALSE@pch_build = \n+@GLIBCPP_BUILD_PCH_TRUE@pch_install = @GLIBCPP_BUILD_PCH_TRUE@install-pch\n+@GLIBCPP_BUILD_PCH_FALSE@pch_install = \n \n # List of all timestamp files.  By keeping only one copy of this list, both\n # CLEANFILES and all-local are kept up-to-date.\n-allstamps = \\\n+allstamped = \\\n \tstamp-std stamp-bits stamp-c_base stamp-c_compatibility \\\n-\tstamp-backward stamp-ext stamp-target\n+\tstamp-backward stamp-ext stamp-target \n \n \n-PCHFLAGS = -Winvalid-pch -x c++-header $(CXXFLAGS)\n+# List of all files that are created by explicit building, editing, or\n+# catenation.\n+allcreated = \\\n+\t${target_builddir}/c++config.h \\\n+\t${thread_target_headers} \\\n+\t${pch_build}\n+\n \n # Target includes for threads\n glibcpp_thread_h = @glibcpp_thread_h@\n@@ -485,7 +496,7 @@ uppercase = [ABCDEFGHIJKLMNOPQRSTUVWXYZ_]\n gxx_include_dir = @gxx_include_dir@\n \n # By adding these files here, automake will remove them for 'make clean'\n-CLEANFILES = *.gch stamp-stdc++-precompile\n+CLEANFILES = *.gch \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = \n DIST_COMMON =  Makefile.am Makefile.in\n@@ -590,7 +601,7 @@ mostlyclean distclean maintainer-clean\n \n \n # Here are the rules for building the headers\n-all-local: ${target_builddir}/c++config.h ${thread_target_headers} ${allstamps}\n+all-local: ${allstamped} ${allcreated} \n \n # This rule is slightly different, in that we must change the name of the\n # local file from std_foo.h to foo.\n@@ -605,12 +616,6 @@ stamp-std: ${std_headers}\n \t  done) ;\\\n \t  echo `date` > stamp-std ;\\\n \tfi\n-stamp-stdc++-precompile: stamp-std ${target_builddir}/c++config.h ${pch_source}\n-\tif [ ! -f \"${pch_output}\" ]; then \\\n-\t  $(CXX) $(PCHFLAGS) $(INCLUDES) ${pch_source} -o ${pch_output}; \\\n-\t  touch ${pch_input}; \\\n-\tfi; \\\n-\ttouch stamp-stdc++-precompile\n \n stamp-bits: ${bits_headers}\n \t@if [ ! -d \"${bits_builddir}\" ]; then \\\n@@ -625,11 +630,11 @@ stamp-c_base: ${c_base_headers} ${c_base_headers_extra}\n \t@if [ ! -d \"${c_base_builddir}\" ]; then \\\n \t  mkdir -p ${c_base_builddir} ;\\\n \tfi ;\\\n-\t(cd ${c_base_builddir} && for h in ${c_base_headers}; do \\\n-\t  official_name=`echo $$h | sed -e 's,.*/std_,,' -e 's,\\.h$$,,'` ;\\\n-\t  @LN_S@ $$h ./$${official_name} || true ;\\\n-\tdone) ;\\\n \tif [ ! -f stamp-c_base ]; then \\\n+\t  (cd ${c_base_builddir} && for h in ${c_base_headers}; do \\\n+\t    official_name=`echo $$h | sed -e 's,.*/std_,,' -e 's,\\.h$$,,'` ;\\\n+\t    @LN_S@ $$h ./$${official_name} || true ;\\\n+\t  done) ;\\\n \t  if [ ! -z \"${c_base_headers_extra}\" ]; then \\\n \t  (cd ${bits_builddir} && @LN_S@ ${c_base_headers_extra}  . || true) ;\\\n \t  fi ;\\\n@@ -724,7 +729,15 @@ ${target_builddir}/gthr-default.h: ${toplevel_srcdir}/gcc/${glibcpp_thread_h} \\\n \t    -e 's/\\(${uppercase}*WEAK\\)/_GLIBCPP_\\1/g' \\\n \t    -e 's,^#include \"\\(.*\\)\",#include <bits/\\1>,g' \\\n \t    < ${toplevel_srcdir}/gcc/${glibcpp_thread_h} > $@\n-install-data-local:\n+\n+# Build a precompiled C++ include, stdc++.h.gch.\n+${pch_output}: ${allstamped} ${target_builddir}/c++config.h ${pch_source}\n+\ttouch ${pch_input}; \\\n+\t$(CXX) $(PCHFLAGS) $(INCLUDES) ${pch_source} -o ${pch_output}; \n+\n+install-data-local: install-headers ${pch_install}\n+\n+install-headers:\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${bits_builddir}\n \tfor file in ${bits_headers}; do \\\n@@ -752,6 +765,9 @@ install-data-local:\n \t ${thread_target_headers}; do \\\n \t  $(INSTALL_DATA) $${file} $(DESTDIR)${gxx_include_dir}/${target_builddir}; done\n \n+install-pch:\n+\t$(INSTALL_DATA) ${std_builddir}/${pch_output} $(DESTDIR)${gxx_include_dir}/${std_builddir}\n+\n # Stop implicit '.o' make rules from ever stomping on extensionless\n # headers, in the improbable case where some foolish, crack-addled\n # developer tries to create them via make in the include build"}, {"sha": "6f24276cc3e1aa52fa043a7ea4df93af45dfa98a", "filename": "libstdc++-v3/testsuite_flags.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e57d5caf27099facc4fba0bdc176b88568f9c58/libstdc%2B%2B-v3%2Ftestsuite_flags.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e57d5caf27099facc4fba0bdc176b88568f9c58/libstdc%2B%2B-v3%2Ftestsuite_flags.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite_flags.in?ref=9e57d5caf27099facc4fba0bdc176b88568f9c58", "patch": "@@ -43,8 +43,8 @@ case ${query} in\n       echo ${CXX}\n       ;;\n     --build-cxx)\n-      PCHFLAGS=\"-Winvalid-pch -include ${BUILD_DIR}/include/stdc++.h\"\n-      CC_build=\"@glibcpp_CXX@\"\n+      PCHFLAGS=\"-include ${BUILD_DIR}/include/stdc++.h\"\n+      CC_build=\"@glibcpp_CXX@ ${PCHFLAGS}\"\n       CXX=`echo $CC_build | sed 's/xgcc/g++/g'`\n       echo ${CXX}\n       ;;"}]}