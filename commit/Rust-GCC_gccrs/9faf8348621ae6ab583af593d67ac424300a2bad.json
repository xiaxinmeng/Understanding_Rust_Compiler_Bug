{"sha": "9faf8348621ae6ab583af593d67ac424300a2bad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZhZjgzNDg2MjFhZTZhYjU4M2FmNTkzZDY3YWM0MjQzMDBhMmJhZA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-07-16T19:49:17Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-07-16T19:49:17Z"}, "message": "analyzer: add region_model::check_region_access\n\nI've been experimenting with various new diagnostics that\nrequire a common place for the analyzer to check the validity\nof reads or writes to memory (e.g. buffer overflow).\n\nAs preliminary work, this patch adds new\n  region_model::check_region_for_{read|write} functions\nwhich are called anywhere that the analyzer \"sees\" memory being\nread from or written to (via region_model::get_store_value and\nregion_model::set_value).\n\nThis takes over the hardcoded calls to check_for_writable_region\n(allowing for other kinds of checks on writes); checking reads is\ncurrently a no-op.\n\ngcc/analyzer/ChangeLog:\n\t* analyzer.h (enum access_direction): New.\n\t* engine.cc (exploded_node::on_longjmp): Update for new param of\n\tget_store_value.\n\t* program-state.cc (program_state::prune_for_point): Likewise.\n\t* region-model-impl-calls.cc (region_model::impl_call_memcpy):\n\tReplace call to check_for_writable_region with call to\n\tcheck_region_for_write.\n\t(region_model::impl_call_memset): Likewise.\n\t(region_model::impl_call_strcpy): Likewise.\n\t* region-model-reachability.cc (reachable_regions::add): Update\n\tfor new param of get_store_value.\n\t* region-model.cc (region_model::get_rvalue_1): Likewise, also for\n\tget_rvalue_for_bits.\n\t(region_model::get_store_value): Add ctxt param and use it to call\n\tcheck_region_for_read.\n\t(region_model::get_rvalue_for_bits): Add ctxt param and use it to\n\tcall get_store_value.\n\t(region_model::check_region_access): New.\n\t(region_model::check_region_for_write): New.\n\t(region_model::check_region_for_read): New.\n\t(region_model::set_value): Update comment.  Replace call to\n\tcheck_for_writable_region with call to check_region_for_write.\n\t* region-model.h (region_model::get_rvalue_for_bits): Add ctxt\n\tparam.\n\t(region_model::get_store_value): Add ctxt param.\n\t(region_model::check_region_access): New decl.\n\t(region_model::check_region_for_write): New decl.\n\t(region_model::check_region_for_read): New decl.\n\t* region.cc (region_model::copy_region): Update call to\n\tget_store_value.\n\t* svalue.cc (initial_svalue::implicitly_live_p): Likewise.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "2ce56172929a5d262ac10d1c7b0d80a763d5ca22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ce56172929a5d262ac10d1c7b0d80a763d5ca22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9faf8348621ae6ab583af593d67ac424300a2bad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9faf8348621ae6ab583af593d67ac424300a2bad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9faf8348621ae6ab583af593d67ac424300a2bad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9faf8348621ae6ab583af593d67ac424300a2bad/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ea10c480565fa42b1804fb436f7e26ca77b71a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ea10c480565fa42b1804fb436f7e26ca77b71a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ea10c480565fa42b1804fb436f7e26ca77b71a3"}], "stats": {"total": 108, "additions": 88, "deletions": 20}, "files": [{"sha": "90143d9aba23bd3cd962a5fa71acf147f743bd01", "filename": "gcc/analyzer/analyzer.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9faf8348621ae6ab583af593d67ac424300a2bad/gcc%2Fanalyzer%2Fanalyzer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9faf8348621ae6ab583af593d67ac424300a2bad/gcc%2Fanalyzer%2Fanalyzer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.h?ref=9faf8348621ae6ab583af593d67ac424300a2bad", "patch": "@@ -208,6 +208,14 @@ class plugin_analyzer_init_iface\n   virtual logger *get_logger () const = 0;\n };\n \n+/* An enum for describing the direction of an access to memory.  */\n+\n+enum access_direction\n+{\n+  DIR_READ,\n+  DIR_WRITE\n+};\n+\n } // namespace ana\n \n extern bool is_special_named_call_p (const gcall *call, const char *funcname,"}, {"sha": "ee625fbdcdf0d09c17b8787fedb6dadaef24757e", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9faf8348621ae6ab583af593d67ac424300a2bad/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9faf8348621ae6ab583af593d67ac424300a2bad/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=9faf8348621ae6ab583af593d67ac424300a2bad", "patch": "@@ -1468,7 +1468,8 @@ exploded_node::on_longjmp (exploded_graph &eg,\n   const region *buf = new_region_model->deref_rvalue (buf_ptr_sval, buf_ptr,\n \t\t\t\t\t\t       ctxt);\n \n-  const svalue *buf_content_sval = new_region_model->get_store_value (buf);\n+  const svalue *buf_content_sval\n+    = new_region_model->get_store_value (buf, ctxt);\n   const setjmp_svalue *setjmp_sval\n     = buf_content_sval->dyn_cast_setjmp_svalue ();\n   if (!setjmp_sval)"}, {"sha": "ccfe7b019b0df8b8789eec63199529b2035d26e8", "filename": "gcc/analyzer/program-state.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9faf8348621ae6ab583af593d67ac424300a2bad/gcc%2Fanalyzer%2Fprogram-state.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9faf8348621ae6ab583af593d67ac424300a2bad/gcc%2Fanalyzer%2Fprogram-state.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.cc?ref=9faf8348621ae6ab583af593d67ac424300a2bad", "patch": "@@ -1082,7 +1082,7 @@ program_state::prune_for_point (exploded_graph &eg,\n \t\t temporaries keep the value reachable until the frame is\n \t\t popped.  */\n \t      const svalue *sval\n-\t\t= new_state.m_region_model->get_store_value (reg);\n+\t\t= new_state.m_region_model->get_store_value (reg, NULL);\n \t      if (!new_state.can_purge_p (eg.get_ext_state (), sval)\n \t\t  && SSA_NAME_VAR (ssa_name))\n \t\t{"}, {"sha": "eff8caa8c0ad65081c0b2843b411c628f126a6e0", "filename": "gcc/analyzer/region-model-impl-calls.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9faf8348621ae6ab583af593d67ac424300a2bad/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9faf8348621ae6ab583af593d67ac424300a2bad/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc?ref=9faf8348621ae6ab583af593d67ac424300a2bad", "patch": "@@ -431,7 +431,7 @@ region_model::impl_call_memcpy (const call_details &cd)\n \treturn;\n     }\n \n-  check_for_writable_region (dest_reg, cd.get_ctxt ());\n+  check_region_for_write (dest_reg, cd.get_ctxt ());\n \n   /* Otherwise, mark region's contents as unknown.  */\n   mark_region_as_unknown (dest_reg, cd.get_uncertainty ());\n@@ -455,7 +455,7 @@ region_model::impl_call_memset (const call_details &cd)\n   const region *sized_dest_reg = m_mgr->get_sized_region (dest_reg,\n \t\t\t\t\t\t\t  NULL_TREE,\n \t\t\t\t\t\t\t  num_bytes_sval);\n-  check_for_writable_region (sized_dest_reg, cd.get_ctxt ());\n+  check_region_for_write (sized_dest_reg, cd.get_ctxt ());\n   fill_region (sized_dest_reg, fill_value_u8);\n   return true;\n }\n@@ -515,7 +515,7 @@ region_model::impl_call_strcpy (const call_details &cd)\n \n   cd.maybe_set_lhs (dest_sval);\n \n-  check_for_writable_region (dest_reg, cd.get_ctxt ());\n+  check_region_for_write (dest_reg, cd.get_ctxt ());\n \n   /* For now, just mark region's contents as unknown.  */\n   mark_region_as_unknown (dest_reg, cd.get_uncertainty ());"}, {"sha": "b5ae787cac98219af09c031ceacd48c9503a4642", "filename": "gcc/analyzer/region-model-reachability.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9faf8348621ae6ab583af593d67ac424300a2bad/gcc%2Fanalyzer%2Fregion-model-reachability.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9faf8348621ae6ab583af593d67ac424300a2bad/gcc%2Fanalyzer%2Fregion-model-reachability.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-reachability.cc?ref=9faf8348621ae6ab583af593d67ac424300a2bad", "patch": "@@ -154,7 +154,7 @@ reachable_regions::add (const region *reg, bool is_mutable)\n   if (binding_cluster *bind_cluster = m_store->get_cluster (base_reg))\n     bind_cluster->for_each_value (handle_sval_cb, this);\n   else\n-    handle_sval (m_model->get_store_value (reg));\n+    handle_sval (m_model->get_store_value (reg, NULL));\n }\n \n void"}, {"sha": "4fab1ef84275338a35ce6abbd4b8a459f2fdad93", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 60, "deletions": 10, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9faf8348621ae6ab583af593d67ac424300a2bad/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9faf8348621ae6ab583af593d67ac424300a2bad/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=9faf8348621ae6ab583af593d67ac424300a2bad", "patch": "@@ -1743,7 +1743,7 @@ region_model::get_rvalue_1 (path_var pv, region_model_context *ctxt) const\n \tgcc_assert (TREE_CODE (first_bit_offset) == INTEGER_CST);\n \tbit_range bits (TREE_INT_CST_LOW (first_bit_offset),\n \t\t\tTREE_INT_CST_LOW (num_bits));\n-\treturn get_rvalue_for_bits (TREE_TYPE (expr), reg, bits);\n+\treturn get_rvalue_for_bits (TREE_TYPE (expr), reg, bits, ctxt);\n       }\n \n     case SSA_NAME:\n@@ -1753,7 +1753,7 @@ region_model::get_rvalue_1 (path_var pv, region_model_context *ctxt) const\n     case ARRAY_REF:\n       {\n \tconst region *reg = get_lvalue (pv, ctxt);\n-\treturn get_store_value (reg);\n+\treturn get_store_value (reg, ctxt);\n       }\n \n     case REALPART_EXPR:\n@@ -1808,7 +1808,7 @@ region_model::get_rvalue_1 (path_var pv, region_model_context *ctxt) const\n     case MEM_REF:\n       {\n \tconst region *ref_reg = get_lvalue (pv, ctxt);\n-\treturn get_store_value (ref_reg);\n+\treturn get_store_value (ref_reg, ctxt);\n       }\n     }\n }\n@@ -1913,11 +1913,15 @@ region_model::get_initial_value_for_global (const region *reg) const\n }\n \n /* Get a value for REG, looking it up in the store, or otherwise falling\n-   back to \"initial\" or \"unknown\" values.  */\n+   back to \"initial\" or \"unknown\" values.\n+   Use CTXT to report any warnings associated with reading from REG. */\n \n const svalue *\n-region_model::get_store_value (const region *reg) const\n+region_model::get_store_value (const region *reg,\n+\t\t\t       region_model_context *ctxt) const\n {\n+  check_region_for_read (reg, ctxt);\n+\n   /* Special-case: handle var_decls in the constant pool.  */\n   if (const decl_region *decl_reg = reg->dyn_cast_decl_region ())\n     if (const svalue *sval = decl_reg->maybe_get_constant_value (m_mgr))\n@@ -2077,14 +2081,16 @@ region_model::deref_rvalue (const svalue *ptr_sval, tree ptr_tree,\n /* Attempt to get BITS within any value of REG, as TYPE.\n    In particular, extract values from compound_svalues for the case\n    where there's a concrete binding at BITS.\n-   Return an unknown svalue if we can't handle the given case.  */\n+   Return an unknown svalue if we can't handle the given case.\n+   Use CTXT to report any warnings associated with reading from REG.  */\n \n const svalue *\n region_model::get_rvalue_for_bits (tree type,\n \t\t\t\t   const region *reg,\n-\t\t\t\t   const bit_range &bits) const\n+\t\t\t\t   const bit_range &bits,\n+\t\t\t\t   region_model_context *ctxt) const\n {\n-  const svalue *sval = get_store_value (reg);\n+  const svalue *sval = get_store_value (reg, ctxt);\n   return m_mgr->get_or_create_bits_within (type, bits, sval);\n }\n \n@@ -2240,8 +2246,52 @@ region_model::get_capacity (const region *reg) const\n   return m_mgr->get_or_create_unknown_svalue (sizetype);\n }\n \n+/* If CTXT is non-NULL, use it to warn about any problems accessing REG,\n+   using DIR to determine if this access is a read or write.  */\n+\n+void\n+region_model::check_region_access (const region *reg,\n+\t\t\t\t   enum access_direction dir,\n+\t\t\t\t   region_model_context *ctxt) const\n+{\n+  /* Fail gracefully if CTXT is NULL.  */\n+  if (!ctxt)\n+    return;\n+\n+  switch (dir)\n+    {\n+    default:\n+      gcc_unreachable ();\n+    case DIR_READ:\n+      /* Currently a no-op.  */\n+      break;\n+    case DIR_WRITE:\n+      check_for_writable_region (reg, ctxt);\n+      break;\n+    }\n+}\n+\n+/* If CTXT is non-NULL, use it to warn about any problems writing to REG.  */\n+\n+void\n+region_model::check_region_for_write (const region *dest_reg,\n+\t\t\t\t      region_model_context *ctxt) const\n+{\n+  check_region_access (dest_reg, DIR_WRITE, ctxt);\n+}\n+\n+/* If CTXT is non-NULL, use it to warn about any problems reading from REG.  */\n+\n+void\n+region_model::check_region_for_read (const region *src_reg,\n+\t\t\t\t     region_model_context *ctxt) const\n+{\n+  check_region_access (src_reg, DIR_READ, ctxt);\n+}\n+\n /* Set the value of the region given by LHS_REG to the value given\n-   by RHS_SVAL.  */\n+   by RHS_SVAL.\n+   Use CTXT to report any warnings associated with writing to LHS_REG.  */\n \n void\n region_model::set_value (const region *lhs_reg, const svalue *rhs_sval,\n@@ -2250,7 +2300,7 @@ region_model::set_value (const region *lhs_reg, const svalue *rhs_sval,\n   gcc_assert (lhs_reg);\n   gcc_assert (rhs_sval);\n \n-  check_for_writable_region (lhs_reg, ctxt);\n+  check_region_for_write (lhs_reg, ctxt);\n \n   m_store.set_value (m_mgr->get_store_manager(), lhs_reg, rhs_sval,\n \t\t     ctxt ? ctxt->get_uncertainty () : NULL);"}, {"sha": "734ec6012375c1281f80da7ad49f9b4ea30fef7d", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9faf8348621ae6ab583af593d67ac424300a2bad/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9faf8348621ae6ab583af593d67ac424300a2bad/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=9faf8348621ae6ab583af593d67ac424300a2bad", "patch": "@@ -609,7 +609,8 @@ class region_model\n \n   const svalue *get_rvalue_for_bits (tree type,\n \t\t\t\t     const region *reg,\n-\t\t\t\t     const bit_range &bits) const;\n+\t\t\t\t     const bit_range &bits,\n+\t\t\t\t     region_model_context *ctxt) const;\n \n   void set_value (const region *lhs_reg, const svalue *rhs_sval,\n \t\t  region_model_context *ctxt);\n@@ -687,7 +688,8 @@ class region_model\n   static void append_ssa_names_cb (const region *base_reg,\n \t\t\t\t   struct append_ssa_names_cb_data *data);\n \n-  const svalue *get_store_value (const region *reg) const;\n+  const svalue *get_store_value (const region *reg,\n+\t\t\t\t region_model_context *ctxt) const;\n \n   bool region_exists_p (const region *reg) const;\n \n@@ -748,6 +750,13 @@ class region_model\n \n   void check_for_writable_region (const region* dest_reg,\n \t\t\t\t  region_model_context *ctxt) const;\n+  void check_region_access (const region *reg,\n+\t\t\t    enum access_direction dir,\n+\t\t\t    region_model_context *ctxt) const;\n+  void check_region_for_write (const region *dest_reg,\n+\t\t\t       region_model_context *ctxt) const;\n+  void check_region_for_read (const region *src_reg,\n+\t\t\t      region_model_context *ctxt) const;\n \n   /* Storing this here to avoid passing it around everywhere.  */\n   region_model_manager *const m_mgr;"}, {"sha": "fa187fde3313286f888302d10061c71d75153b73", "filename": "gcc/analyzer/region.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9faf8348621ae6ab583af593d67ac424300a2bad/gcc%2Fanalyzer%2Fregion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9faf8348621ae6ab583af593d67ac424300a2bad/gcc%2Fanalyzer%2Fregion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion.cc?ref=9faf8348621ae6ab583af593d67ac424300a2bad", "patch": "@@ -573,7 +573,7 @@ region_model::copy_region (const region *dst_reg, const region *src_reg,\n   if (dst_reg == src_reg)\n     return;\n \n-  const svalue *sval = get_store_value (src_reg);\n+  const svalue *sval = get_store_value (src_reg, ctxt);\n   set_value (dst_reg, sval, ctxt);\n }\n "}, {"sha": "323df8015fd67a169c91d95ec296f34da2120c0e", "filename": "gcc/analyzer/svalue.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9faf8348621ae6ab583af593d67ac424300a2bad/gcc%2Fanalyzer%2Fsvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9faf8348621ae6ab583af593d67ac424300a2bad/gcc%2Fanalyzer%2Fsvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsvalue.cc?ref=9faf8348621ae6ab583af593d67ac424300a2bad", "patch": "@@ -936,7 +936,7 @@ initial_svalue::implicitly_live_p (const svalue_set *,\n      a popped stack frame.  */\n   if (model->region_exists_p (m_reg))\n     {\n-      const svalue *reg_sval = model->get_store_value (m_reg);\n+      const svalue *reg_sval = model->get_store_value (m_reg, NULL);\n       if (reg_sval == this)\n \treturn true;\n     }"}]}