{"sha": "760df6d296b8fc59796f42dca5eb14012fbfa28b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYwZGY2ZDI5NmI4ZmM1OTc5NmY0MmRjYTVlYjE0MDEyZmJmYTI4Yg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-07-08T14:01:14Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-07-08T14:01:14Z"}, "message": "expr: Fix REDUCE_BIT_FIELD for constants [PR95694]\n\nThis is yet another PR caused by constant integer rtxes not storing\na mode.  We were calling REDUCE_BIT_FIELD on a constant integer that\ndidn't fit in poly_int64, and then tripped the as_a<scalar_int_mode>\nassert on VOIDmode.\n\nAFAICT REDUCE_BIT_FIELD is always passed rtxes that have TYPE_MODE\n(rather than some other mode) and it just fills in the redundant\nsign bits of that TYPE_MODE value.  So it should be safe to get\nthe mode from the type instead of the rtx.  The patch does that\nand asserts that the modes agree, where information is available.\n\nThat on its own is enough to fix the bug, but we might as well\nextend the folding case to all constant integers, not just those\nthat fit poly_int64.\n\ngcc/\n\tPR middle-end/95694\n\t* expr.c (expand_expr_real_2): Get the mode from the type rather\n\tthan the rtx, and assert that it is consistent with the mode of\n\tthe rtx (where known).  Optimize all constant integers, not just\n\tthose that can be represented in poly_int64.\n\ngcc/testsuite/\n\tPR middle-end/95694\n\t* gcc.dg/pr95694.c: New test.", "tree": {"sha": "54bdb9e2f98c5aa087819b65953c497bcfb7d074", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54bdb9e2f98c5aa087819b65953c497bcfb7d074"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/760df6d296b8fc59796f42dca5eb14012fbfa28b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/760df6d296b8fc59796f42dca5eb14012fbfa28b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/760df6d296b8fc59796f42dca5eb14012fbfa28b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/760df6d296b8fc59796f42dca5eb14012fbfa28b/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a51de1af063b0a9233762dcd6ecf2ea0bdf4cdff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a51de1af063b0a9233762dcd6ecf2ea0bdf4cdff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a51de1af063b0a9233762dcd6ecf2ea0bdf4cdff"}], "stats": {"total": 38, "additions": 31, "deletions": 7}, "files": [{"sha": "715edae819a1ed4e27739ce16dfb035200ff90a4", "filename": "gcc/expr.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/760df6d296b8fc59796f42dca5eb14012fbfa28b/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/760df6d296b8fc59796f42dca5eb14012fbfa28b/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=760df6d296b8fc59796f42dca5eb14012fbfa28b", "patch": "@@ -11525,26 +11525,27 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n static rtx\n reduce_to_bit_field_precision (rtx exp, rtx target, tree type)\n {\n+  scalar_int_mode mode = SCALAR_INT_TYPE_MODE (type);\n   HOST_WIDE_INT prec = TYPE_PRECISION (type);\n-  if (target && GET_MODE (target) != GET_MODE (exp))\n+  gcc_assert (GET_MODE (exp) == VOIDmode || GET_MODE (exp) == mode);\n+  if (target && GET_MODE (target) != mode)\n     target = 0;\n-  /* For constant values, reduce using build_int_cst_type. */\n-  poly_int64 const_exp;\n-  if (poly_int_rtx_p (exp, &const_exp))\n+\n+  /* For constant values, reduce using wide_int_to_tree. */\n+  if (poly_int_rtx_p (exp))\n     {\n-      tree t = build_int_cst_type (type, const_exp);\n+      auto value = wi::to_poly_wide (exp, mode);\n+      tree t = wide_int_to_tree (type, value);\n       return expand_expr (t, target, VOIDmode, EXPAND_NORMAL);\n     }\n   else if (TYPE_UNSIGNED (type))\n     {\n-      scalar_int_mode mode = as_a <scalar_int_mode> (GET_MODE (exp));\n       rtx mask = immed_wide_int_const\n \t(wi::mask (prec, false, GET_MODE_PRECISION (mode)), mode);\n       return expand_and (mode, exp, mask, target);\n     }\n   else\n     {\n-      scalar_int_mode mode = as_a <scalar_int_mode> (GET_MODE (exp));\n       int count = GET_MODE_PRECISION (mode) - prec;\n       exp = expand_shift (LSHIFT_EXPR, mode, exp, count, target, 0);\n       return expand_shift (RSHIFT_EXPR, mode, exp, count, target, 0);"}, {"sha": "6f5e1900a022e9c8f8c33aa1396e2fa6bb0aba67", "filename": "gcc/testsuite/gcc.dg/pr95694.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/760df6d296b8fc59796f42dca5eb14012fbfa28b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr95694.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/760df6d296b8fc59796f42dca5eb14012fbfa28b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr95694.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr95694.c?ref=760df6d296b8fc59796f42dca5eb14012fbfa28b", "patch": "@@ -0,0 +1,23 @@\n+/* PR tree-optimization/68835 */\n+/* { dg-do run { target int128 } } */\n+/* { dg-options \"-fno-tree-forwprop -fno-tree-ccp -O1 -fno-tree-dominator-opts -fno-tree-fre\" } */\n+\n+__attribute__((noinline, noclone)) unsigned __int128\n+foo (void)\n+{\n+  unsigned __int128 x = (unsigned __int128) 0xffffffffffffffffULL;\n+  struct { unsigned __int128 a : 65; } w;\n+  w.a = x;\n+  w.a += x;\n+  return w.a;\n+}\n+\n+int\n+main ()\n+{\n+  unsigned __int128 x = foo ();\n+  if ((unsigned long long) x != 0xfffffffffffffffeULL\n+      || (unsigned long long) (x >> 64) != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}