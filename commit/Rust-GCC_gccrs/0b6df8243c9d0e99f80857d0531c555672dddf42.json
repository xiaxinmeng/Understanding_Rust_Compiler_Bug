{"sha": "0b6df8243c9d0e99f80857d0531c555672dddf42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI2ZGY4MjQzYzlkMGU5OWY4MDg1N2QwNTMxYzU1NTY3MmRkZGY0Mg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2014-06-10T18:27:02Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-06-10T18:27:02Z"}, "message": "bid128_div.c (BID128_FUNCTION_ARG2): Remove unused variable 'Ql'.\n\n\t* bid128_div.c (BID128_FUNCTION_ARG2): Remove unused variable 'Ql'.\n\tCall __mul_128x128_high instead of __mul_128x128_full.\n\t(TYPE0_FUNCTION_ARGTYPE1_ARGTYPE2): Ditto.\n\t(BID128_FUNCTION_ARGTYPE1_ARG128): Ditto.\n\t(BID128_FUNCTION_ARG128_ARGTYPE2): Ditto.\n\t* bid64_div.c (TYPE0_FUNCTION_ARGTYPE1_ARG128): Ditto.\n\t(TYPE0_FUNCTION_ARG128_ARGTYPE2): Ditto.\n\t(TYPE0_FUNCTION_ARG128_ARG128): Ditto.\n\nFrom-SVN: r211424", "tree": {"sha": "f89bc046d18d3733b1be0cdd9478ca9f127756a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f89bc046d18d3733b1be0cdd9478ca9f127756a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b6df8243c9d0e99f80857d0531c555672dddf42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b6df8243c9d0e99f80857d0531c555672dddf42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b6df8243c9d0e99f80857d0531c555672dddf42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b6df8243c9d0e99f80857d0531c555672dddf42/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "060269c481f8678f6a88b1d4c57a6aaef858fc71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/060269c481f8678f6a88b1d4c57a6aaef858fc71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/060269c481f8678f6a88b1d4c57a6aaef858fc71"}], "stats": {"total": 61, "additions": 36, "deletions": 25}, "files": [{"sha": "9405a3a2a8df711ba6a3131a67b8da008618101f", "filename": "libgcc/config/libbid/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6df8243c9d0e99f80857d0531c555672dddf42/libgcc%2Fconfig%2Flibbid%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6df8243c9d0e99f80857d0531c555672dddf42/libgcc%2Fconfig%2Flibbid%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Flibbid%2FChangeLog?ref=0b6df8243c9d0e99f80857d0531c555672dddf42", "patch": "@@ -1,3 +1,14 @@\n+2014-06-10  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* bid128_div.c (BID128_FUNCTION_ARG2): Remove unused variable 'Ql'.\n+\tCall __mul_128x128_high instead of __mul_128x128_full.\n+\t(TYPE0_FUNCTION_ARGTYPE1_ARGTYPE2): Ditto.\n+\t(BID128_FUNCTION_ARGTYPE1_ARG128): Ditto.\n+\t(BID128_FUNCTION_ARG128_ARGTYPE2): Ditto.\n+\t* bid64_div.c (TYPE0_FUNCTION_ARGTYPE1_ARG128): Ditto.\n+\t(TYPE0_FUNCTION_ARG128_ARGTYPE2): Ditto.\n+\t(TYPE0_FUNCTION_ARG128_ARG128): Ditto.\n+\n 2014-01-02  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \tUpdate copyright years"}, {"sha": "ab7373ed06ea9361e73a107bbdb4506cc1c42c79", "filename": "libgcc/config/libbid/bid128_div.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6df8243c9d0e99f80857d0531c555672dddf42/libgcc%2Fconfig%2Flibbid%2Fbid128_div.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6df8243c9d0e99f80857d0531c555672dddf42/libgcc%2Fconfig%2Flibbid%2Fbid128_div.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Flibbid%2Fbid128_div.c?ref=0b6df8243c9d0e99f80857d0531c555672dddf42", "patch": "@@ -36,7 +36,7 @@ extern UINT8 packed_10000_zeros[];\n BID128_FUNCTION_ARG2 (bid128_div, x, y)\n \n      UINT256 CA4, CA4r, P256;\n-     UINT128 CX, CY, T128, CQ, CR, CA, TP128, Qh, Ql, res;\n+     UINT128 CX, CY, T128, CQ, CR, CA, TP128, Qh, res;\n      UINT64 sign_x, sign_y, T, carry64, D, Q_high, Q_low, QX, PD,\n        valid_y;\n      int_float fx, fy, f64;\n@@ -239,7 +239,7 @@ if (!CA4.w[0] && !CA4.w[1])\n     if (d5 < nzeros)\n       nzeros = d5;\n     // get P*(2^M[extra_digits])/10^extra_digits\n-    __mul_128x128_full (Qh, Ql, CQ, reciprocals10_128[nzeros]);\n+    __mul_128x128_high (Qh, CQ, reciprocals10_128[nzeros]);\n \n     // now get P/10^extra_digits: shift Q_high right by M[extra_digits]-128\n     amount = recip_scale[nzeros];\n@@ -365,7 +365,7 @@ if (!CA4.w[0] && !CA4.w[1])\n \n       if (nzeros) {\n \t// get P*(2^M[extra_digits])/10^extra_digits\n-\t__mul_128x128_full (Qh, Ql, CQ, reciprocals10_128[nzeros]);\n+\t__mul_128x128_high (Qh, CQ, reciprocals10_128[nzeros]);\n \n \t//now get P/10^extra_digits: shift Q_high right by M[extra_digits]-128\n \tamount = recip_scale[nzeros];\n@@ -487,7 +487,7 @@ TYPE0_FUNCTION_ARGTYPE1_ARGTYPE2 (UINT128, bid128dd_div, UINT64, x,\n \t\t\t\t  UINT64, y)\n \n      UINT256 CA4, CA4r, P256;\n-     UINT128 CX, CY, T128, CQ, CR, CA, TP128, Qh, Ql, res;\n+     UINT128 CX, CY, T128, CQ, CR, CA, TP128, Qh, res;\n      UINT64 sign_x, sign_y, T, carry64, D, Q_high, Q_low, QX, PD,\n        valid_y;\n      int_float fx, fy, f64;\n@@ -701,7 +701,7 @@ __div_256_by_128 (&CQ, &CA4, CY);\n       if (d5 < nzeros)\n \tnzeros = d5;\n       // get P*(2^M[extra_digits])/10^extra_digits\n-      __mul_128x128_full (Qh, Ql, CQ, reciprocals10_128[nzeros]);\n+      __mul_128x128_high (Qh, CQ, reciprocals10_128[nzeros]);\n       //__mul_128x128_to_256(P256, CQ, reciprocals10_128[nzeros]);Qh.w[1]=P256.w[3];Qh.w[0]=P256.w[2];\n \n       // now get P/10^extra_digits: shift Q_high right by M[extra_digits]-128\n@@ -829,7 +829,7 @@ __div_256_by_128 (&CQ, &CA4, CY);\n \n \tif (nzeros) {\n \t  // get P*(2^M[extra_digits])/10^extra_digits\n-\t  __mul_128x128_full (Qh, Ql, CQ, reciprocals10_128[nzeros]);\n+\t  __mul_128x128_high (Qh, CQ, reciprocals10_128[nzeros]);\n \n \t  // now get P/10^extra_digits: shift Q_high right by M[extra_digits]-128\n \t  amount = recip_scale[nzeros];\n@@ -946,7 +946,7 @@ BID_RETURN (res);\n \n BID128_FUNCTION_ARGTYPE1_ARG128 (bid128dq_div, UINT64, x, y)\n      UINT256 CA4, CA4r, P256;\n-     UINT128 CX, CY, T128, CQ, CR, CA, TP128, Qh, Ql, res;\n+     UINT128 CX, CY, T128, CQ, CR, CA, TP128, Qh, res;\n      UINT64 sign_x, sign_y, T, carry64, D, Q_high, Q_low, QX, valid_y,\n        PD;\n      int_float fx, fy, f64;\n@@ -1155,7 +1155,7 @@ __div_256_by_128 (&CQ, &CA4, CY);\n       if (d5 < nzeros)\n \tnzeros = d5;\n       // get P*(2^M[extra_digits])/10^extra_digits\n-      __mul_128x128_full (Qh, Ql, CQ, reciprocals10_128[nzeros]);\n+      __mul_128x128_high (Qh, CQ, reciprocals10_128[nzeros]);\n       //__mul_128x128_to_256(P256, CQ, reciprocals10_128[nzeros]);Qh.w[1]=P256.w[3];Qh.w[0]=P256.w[2];\n \n       // now get P/10^extra_digits: shift Q_high right by M[extra_digits]-128\n@@ -1285,7 +1285,7 @@ __div_256_by_128 (&CQ, &CA4, CY);\n \n \tif (nzeros) {\n \t  // get P*(2^M[extra_digits])/10^extra_digits\n-\t  __mul_128x128_full (Qh, Ql, CQ, reciprocals10_128[nzeros]);\n+\t  __mul_128x128_high (Qh, CQ, reciprocals10_128[nzeros]);\n \n \t  // now get P/10^extra_digits: shift Q_high right by M[extra_digits]-128\n \t  amount = recip_scale[nzeros];\n@@ -1403,7 +1403,7 @@ BID_RETURN (res);\n \n BID128_FUNCTION_ARG128_ARGTYPE2 (bid128qd_div, x, UINT64, y)\n      UINT256 CA4, CA4r, P256;\n-     UINT128 CX, CY, T128, CQ, CR, CA, TP128, Qh, Ql, res;\n+     UINT128 CX, CY, T128, CQ, CR, CA, TP128, Qh, res;\n      UINT64 sign_x, sign_y, T, carry64, D, Q_high, Q_low, QX, PD,\n        valid_y;\n      int_float fx, fy, f64;\n@@ -1607,7 +1607,7 @@ __div_256_by_128 (&CQ, &CA4, CY);\n       if (d5 < nzeros)\n \tnzeros = d5;\n       // get P*(2^M[extra_digits])/10^extra_digits\n-      __mul_128x128_full (Qh, Ql, CQ, reciprocals10_128[nzeros]);\n+      __mul_128x128_high (Qh, CQ, reciprocals10_128[nzeros]);\n       //__mul_128x128_to_256(P256, CQ, reciprocals10_128[nzeros]);Qh.w[1]=P256.w[3];Qh.w[0]=P256.w[2];\n \n       // now get P/10^extra_digits: shift Q_high right by M[extra_digits]-128\n@@ -1735,7 +1735,7 @@ __div_256_by_128 (&CQ, &CA4, CY);\n \n \tif (nzeros) {\n \t  // get P*(2^M[extra_digits])/10^extra_digits\n-\t  __mul_128x128_full (Qh, Ql, CQ, reciprocals10_128[nzeros]);\n+\t  __mul_128x128_high (Qh, CQ, reciprocals10_128[nzeros]);\n \n \t  // now get P/10^extra_digits: shift Q_high right by M[extra_digits]-128\n \t  amount = recip_scale[nzeros];"}, {"sha": "a0532f091ea9efc7859a7650c01ca2bdd464cf9b", "filename": "libgcc/config/libbid/bid64_div.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6df8243c9d0e99f80857d0531c555672dddf42/libgcc%2Fconfig%2Flibbid%2Fbid64_div.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6df8243c9d0e99f80857d0531c555672dddf42/libgcc%2Fconfig%2Flibbid%2Fbid64_div.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Flibbid%2Fbid64_div.c?ref=0b6df8243c9d0e99f80857d0531c555672dddf42", "patch": "@@ -520,7 +520,7 @@ bid64_div (UINT64 x,\n TYPE0_FUNCTION_ARGTYPE1_ARG128 (UINT64, bid64dq_div, UINT64, x, y)\n      UINT256 CA4 =\n        { {0x0ull, 0x0ull, 0x0ull, 0x0ull} }, CA4r, P256, QB256;\n-UINT128 CX, CY, T128, CQ, CQ2, CR, CA, TP128, Qh, Ql, Tmp;\n+UINT128 CX, CY, T128, CQ, CQ2, CR, CA, TP128, Qh, Tmp;\n UINT64 sign_x, sign_y, T, carry64, D, Q_low, QX, valid_y, PD, res;\n int_float fx, fy, f64;\n UINT32 QX32, tdigit[3], digit, digit_h, digit_low;\n@@ -600,7 +600,7 @@ if (!valid_y) {\n     Tmp.w[1] = (CY.w[1] & 0x00003fffffffffffull);\n     Tmp.w[0] = CY.w[0];\n     TP128 = reciprocals10_128[18];\n-    __mul_128x128_full (Qh, Ql, Tmp, TP128);\n+    __mul_128x128_high (Qh, Tmp, TP128);\n     amount = recip_scale[18];\n     __shr_128 (Tmp, Qh, amount);\n     res = (CY.w[1] & 0xfc00000000000000ull) | Tmp.w[0];\n@@ -746,7 +746,7 @@ if (!done) {\n       if (d5 < nzeros)\n \tnzeros = d5;\n       // get P*(2^M[extra_digits])/10^extra_digits\n-      __mul_128x128_full (Qh, Ql, CQ, reciprocals10_128[nzeros]);\n+      __mul_128x128_high (Qh, CQ, reciprocals10_128[nzeros]);\n \n       // now get P/10^extra_digits: shift Q_high right by M[extra_digits]-128\n       amount = recip_scale[nzeros];\n@@ -806,7 +806,7 @@ if (!done) {\n \n \tif (nzeros) {\n \t  // get P*(2^M[extra_digits])/10^extra_digits\n-\t  __mul_128x128_full (Qh, Ql, CQ, reciprocals10_128[nzeros]);\n+\t  __mul_128x128_high (Qh, CQ, reciprocals10_128[nzeros]);\n \n \t  // now get P/10^extra_digits: shift Q_high right by M[extra_digits]-128\n \t  amount = recip_scale[nzeros];\n@@ -934,7 +934,7 @@ TYPE0_FUNCTION_ARG128_ARGTYPE2 (UINT64, bid64qd_div, x, UINT64, y)\n \n      UINT256 CA4 =\n        { {0x0ull, 0x0ull, 0x0ull, 0x0ull} }, CA4r, P256, QB256;\n-UINT128 CX, CY, T128, CQ, CQ2, CR, CA, TP128, Qh, Ql, Tmp;\n+UINT128 CX, CY, T128, CQ, CQ2, CR, CA, TP128, Qh, Tmp;\n UINT64 sign_x, sign_y, T, carry64, D, Q_low, QX, PD, res, valid_y;\n int_float fx, fy, f64;\n UINT32 QX32, tdigit[3], digit, digit_h, digit_low;\n@@ -960,7 +960,7 @@ if (!unpack_BID128_value (&sign_x, &exponent_x, &CX, x)) {\n       Tmp.w[1] = (CX.w[1] & 0x00003fffffffffffull);\n       Tmp.w[0] = CX.w[0];\n       TP128 = reciprocals10_128[18];\n-      __mul_128x128_full (Qh, Ql, Tmp, TP128);\n+      __mul_128x128_high (Qh, Tmp, TP128);\n       amount = recip_scale[18];\n       __shr_128 (Tmp, Qh, amount);\n       res = (CX.w[1] & 0xfc00000000000000ull) | Tmp.w[0];\n@@ -1172,7 +1172,7 @@ if (!done) {\n       if (d5 < nzeros)\n \t\tnzeros = d5;\n       // get P*(2^M[extra_digits])/10^extra_digits\n-      __mul_128x128_full (Qh, Ql, CQ, reciprocals10_128[nzeros]);\n+      __mul_128x128_high (Qh, CQ, reciprocals10_128[nzeros]);\n       //__mul_128x128_to_256(P256, CQ, reciprocals10_128[nzeros]);Qh.w[1]=P256.w[3];Qh.w[0]=P256.w[2];\n \n       // now get P/10^extra_digits: shift Q_high right by M[extra_digits]-128\n@@ -1234,7 +1234,7 @@ if (!done) {\n \n \tif (nzeros) {\n \t  // get P*(2^M[extra_digits])/10^extra_digits\n-\t  __mul_128x128_full (Qh, Ql, CQ, reciprocals10_128[nzeros]);\n+\t  __mul_128x128_high (Qh, CQ, reciprocals10_128[nzeros]);\n \n \t  // now get P/10^extra_digits: shift Q_high right by M[extra_digits]-128\n \t  amount = recip_scale[nzeros];\n@@ -1371,7 +1371,7 @@ extern UINT8 packed_10000_zeros[];\n TYPE0_FUNCTION_ARG128_ARG128 (UINT64, bid64qq_div, x, y)\n      UINT256 CA4 =\n        { {0x0ull, 0x0ull, 0x0ull, 0x0ull} }, CA4r, P256, QB256;\n-UINT128 CX, CY, T128, CQ, CQ2, CR, CA, TP128, Qh, Ql, Tmp;\n+UINT128 CX, CY, T128, CQ, CQ2, CR, CA, TP128, Qh, Tmp;\n UINT64 sign_x, sign_y, T, carry64, D, Q_low, QX, valid_y, PD, res;\n int_float fx, fy, f64;\n UINT32 QX32, tdigit[3], digit, digit_h, digit_low;\n@@ -1397,7 +1397,7 @@ if (!unpack_BID128_value (&sign_x, &exponent_x, &CX, x)) {\n       Tmp.w[1] = (CX.w[1] & 0x00003fffffffffffull);\n       Tmp.w[0] = CX.w[0];\n       TP128 = reciprocals10_128[18];\n-      __mul_128x128_full (Qh, Ql, Tmp, TP128);\n+      __mul_128x128_high (Qh, Tmp, TP128);\n       amount = recip_scale[18];\n       __shr_128 (Tmp, Qh, amount);\n       res = (CX.w[1] & 0xfc00000000000000ull) | Tmp.w[0];\n@@ -1456,7 +1456,7 @@ if (!valid_y) {\n       Tmp.w[1] = (CY.w[1] & 0x00003fffffffffffull);\n       Tmp.w[0] = CY.w[0];\n       TP128 = reciprocals10_128[18];\n-      __mul_128x128_full (Qh, Ql, Tmp, TP128);\n+      __mul_128x128_high (Qh, Tmp, TP128);\n       amount = recip_scale[18];\n       __shr_128 (Tmp, Qh, amount);\n       res = (CY.w[1] & 0xfc00000000000000ull) | Tmp.w[0];\n@@ -1606,7 +1606,7 @@ if (!done) {\n       if (d5 < nzeros)\n \tnzeros = d5;\n       // get P*(2^M[extra_digits])/10^extra_digits\n-      __mul_128x128_full (Qh, Ql, CQ, reciprocals10_128[nzeros]);\n+      __mul_128x128_high (Qh, CQ, reciprocals10_128[nzeros]);\n       //__mul_128x128_to_256(P256, CQ, reciprocals10_128[nzeros]);Qh.w[1]=P256.w[3];Qh.w[0]=P256.w[2];\n \n       // now get P/10^extra_digits: shift Q_high right by M[extra_digits]-128\n@@ -1668,7 +1668,7 @@ if (!done) {\n \n \tif (nzeros) {\n \t  // get P*(2^M[extra_digits])/10^extra_digits\n-\t  __mul_128x128_full (Qh, Ql, CQ, reciprocals10_128[nzeros]);\n+\t  __mul_128x128_high (Qh, CQ, reciprocals10_128[nzeros]);\n \n \t  // now get P/10^extra_digits: shift Q_high right by M[extra_digits]-128\n \t  amount = recip_scale[nzeros];"}]}