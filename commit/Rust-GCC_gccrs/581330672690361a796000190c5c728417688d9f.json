{"sha": "581330672690361a796000190c5c728417688d9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgxMzMwNjcyNjkwMzYxYTc5NjAwMDE5MGM1YzcyODQxNzY4OGQ5Zg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-12T19:37:18Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-12T19:37:18Z"}, "message": "(dbxout_type, case INTEGER_TYPE): Output bounds in octal if type wider than HOST_WIDE_INT.\n\n(dbxout_type, case INTEGER_TYPE): Output bounds in octal if type wider\nthan HOST_WIDE_INT.\n(print_int_cst_octal): Trim bound by precision of its type.\nAvoid warning on what may be shift into sign bit.\n\nFrom-SVN: r5751", "tree": {"sha": "af69e12051c14f97bb7fc8e9fb6f074408fc14d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af69e12051c14f97bb7fc8e9fb6f074408fc14d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/581330672690361a796000190c5c728417688d9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/581330672690361a796000190c5c728417688d9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/581330672690361a796000190c5c728417688d9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/581330672690361a796000190c5c728417688d9f/comments", "author": null, "committer": null, "parents": [{"sha": "406b20508ffb78194875d7e9be57f5c50aa9a085", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/406b20508ffb78194875d7e9be57f5c50aa9a085", "html_url": "https://github.com/Rust-GCC/gccrs/commit/406b20508ffb78194875d7e9be57f5c50aa9a085"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "67435268999bbdbd5cc6540729c8c54c28e85026", "filename": "gcc/dbxout.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/581330672690361a796000190c5c728417688d9f/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/581330672690361a796000190c5c728417688d9f/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=581330672690361a796000190c5c728417688d9f", "patch": "@@ -1012,7 +1012,8 @@ dbxout_type (type, full, show_arg_types)\n \t   take care to make sure that `char' was type number 2.  */\n \tfprintf (asmfile, \"r%d;0;127;\", TYPE_SYMTAB_ADDRESS (type));\n       else if (use_gnu_debug_info_extensions\n-\t       && TYPE_PRECISION (type) > TYPE_PRECISION (integer_type_node))\n+\t       && (TYPE_PRECISION (type) > TYPE_PRECISION (integer_type_node)\n+\t\t   || TYPE_PRECISION (type) > HOST_BITS_PER_WIDE_INT))\n \t{\n \t  /* This used to say `r1' and we used to take care\n \t     to make sure that `int' was type number 1.  */\n@@ -1376,6 +1377,20 @@ print_int_cst_octal (c)\n   unsigned HOST_WIDE_INT high = TREE_INT_CST_HIGH (c);\n   unsigned HOST_WIDE_INT low = TREE_INT_CST_LOW (c);\n   int excess = (3 - (HOST_BITS_PER_WIDE_INT % 3));\n+  int width = TYPE_PRECISION (TREE_TYPE (c));\n+\n+  /* GDB wants constants with no extra leading \"1\" bits, so\n+     we need to remove any sign-extension that might be\n+     present.  */\n+  if (width == HOST_BITS_PER_WIDE_INT * 2)\n+    ;\n+  else if (width > HOST_BITS_PER_WIDE_INT)\n+    high &= (((HOST_WIDE_INT) 1 << (width - HOST_BITS_PER_WIDE_INT)) - 1);\n+  else \n+    {\n+      high = 0;\n+      low &= (((HOST_WIDE_INT) 1 << width) - 1);\n+    }\n \n   fprintf (asmfile, \"0\");\n \n@@ -1391,7 +1406,10 @@ print_int_cst_octal (c)\n \t= ((high & (((HOST_WIDE_INT) 1 << excess) - 1)) << (3 - excess)\n \t   | (low >> (HOST_BITS_PER_WIDE_INT / 3 * 3)));\n       unsigned HOST_WIDE_INT end\n-\t= low & (((HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT / 3 * 3)) - 1);\n+\t= low & (((unsigned HOST_WIDE_INT) 1\n+\t\t  << (HOST_BITS_PER_WIDE_INT / 3 * 3))\n+\t\t - 1);\n+\n       fprintf (asmfile, \"%o%01o\", beg, middle);\n       print_octal (end, HOST_BITS_PER_WIDE_INT / 3);\n     }"}]}