{"sha": "1ebc7e681079e61300e75a5c0f3b2da335720cc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWViYzdlNjgxMDc5ZTYxMzAwZTc1YTVjMGYzYjJkYTMzNTcyMGNjNw==", "commit": {"author": {"name": "Raksit Ashok", "email": "raksit@google.com", "date": "2008-07-09T08:23:48Z"}, "committer": {"name": "Raksit Ashok", "email": "raksit@gcc.gnu.org", "date": "2008-07-09T08:23:48Z"}, "message": "invoke.texi (Option Summary): Mention new option -Wdisallowed-function-list=...\n\n2008-07-09  Raksit Ashok <raksit@google.com>\n\n\t* doc/invoke.texi (Option Summary): Mention new option\n\t-Wdisallowed-function-list=...\n\t(Warning Options): Document -Wdisallowed-function-list=...\n\t* common.opt (Wdisallowed-function-list=): New flag.\n\t* flags.h (warn_disallowed_functions): External definition of new\n\tboolean warning flag.\n\t(warn_if_disallowed_function_p): Declare new function.\n\t* opts.c (warning_disallowed_functions): New static variable.\n\t(warn_disallowed_functions): New boolean warning flag.\n\t(warn_if_disallowed_function_p): New function.\n\t(add_comma_separated_to_vector): Rename\n\tadd_instrument_functions_exclude_list to this.\n\t(common_handle_option): Handle new option. Rename calls to\n\tadd_instrument_functions_exclude_list into calls to\n\tadd_comma_separated_to_vector.\n\t* c-parser.c (c_parser_postfix_expression_after_primary): New warning\n\tbased on flag warn_disallowed_functions.\n\n\ngcc/cp/ChangeLog\n\n2008-07-09  Raksit Ashok <raksit@google.com>\n\n\t* parser.c (cp_parser_postfix_expression): New warning based on flag\n\twarn_disallowed_functions.\n\n\ngcc/testsuite/ChangeLog\n\n2008-07-09  Raksit Ashok <raksit@google.com>\n\n\t* gcc.dg/wdisallowed-functions-1.c: New test.\n\t* gcc.dg/wdisallowed-functions-2.c: New test.\n\t* g++.dg/warn/Wdisallowed-functions-1.C: New test.\n\t* g++.dg/warn/Wdisallowed-functions-2.C: New test.\n\nFrom-SVN: r137655", "tree": {"sha": "52f1164b80ec03e33183a75b3810a57f8697a378", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52f1164b80ec03e33183a75b3810a57f8697a378"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ebc7e681079e61300e75a5c0f3b2da335720cc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ebc7e681079e61300e75a5c0f3b2da335720cc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ebc7e681079e61300e75a5c0f3b2da335720cc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ebc7e681079e61300e75a5c0f3b2da335720cc7/comments", "author": null, "committer": null, "parents": [{"sha": "47d268d0d33fbf5dbcd7d022c87e1dfcb6b61577", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47d268d0d33fbf5dbcd7d022c87e1dfcb6b61577", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47d268d0d33fbf5dbcd7d022c87e1dfcb6b61577"}], "stats": {"total": 145, "additions": 137, "deletions": 8}, "files": [{"sha": "29576bbc7ad1b417cb352e6161d5f97066d2c623", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebc7e681079e61300e75a5c0f3b2da335720cc7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebc7e681079e61300e75a5c0f3b2da335720cc7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ebc7e681079e61300e75a5c0f3b2da335720cc7", "patch": "@@ -1,3 +1,23 @@\n+2008-07-09  Raksit Ashok <raksit@google.com>\n+\n+\t* doc/invoke.texi (Option Summary): Mention new option\n+\t-Wdisallowed-function-list=...\n+\t(Warning Options): Document -Wdisallowed-function-list=...\n+\t* common.opt (Wdisallowed-function-list=): New flag.\n+\t* flags.h (warn_disallowed_functions): External definition of new\n+\tboolean warning flag.\n+\t(warn_if_disallowed_function_p): Declare new function.\n+\t* opts.c (warning_disallowed_functions): New static variable.\n+\t(warn_disallowed_functions): New boolean warning flag.\n+\t(warn_if_disallowed_function_p): New function.\n+\t(add_comma_separated_to_vector): Rename\n+\tadd_instrument_functions_exclude_list to this.\n+\t(common_handle_option): Handle new option. Rename calls to\n+\tadd_instrument_functions_exclude_list into calls to\n+\tadd_comma_separated_to_vector.\n+\t* c-parser.c (c_parser_postfix_expression_after_primary): New warning\n+\tbased on flag warn_disallowed_functions.\n+\n 2008-07-09  Christian Bruel  <christian.bruel@st.com>\n \n \t* final.c (get_attr_length_1): Call get_attr_length_1 with fallback_fn"}, {"sha": "4ca06fec414e22404e9133f05919c44ed66a60ac", "filename": "gcc/c-parser.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebc7e681079e61300e75a5c0f3b2da335720cc7/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebc7e681079e61300e75a5c0f3b2da335720cc7/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=1ebc7e681079e61300e75a5c0f3b2da335720cc7", "patch": "@@ -5630,6 +5630,8 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t\t\t\t     \"expected %<)%>\");\n \t  expr.value = build_function_call (expr.value, exprlist);\n \t  expr.original_code = ERROR_MARK;\n+          if (warn_disallowed_functions)\n+            warn_if_disallowed_function_p (expr.value);\n \t  break;\n \tcase CPP_DOT:\n \t  /* Structure element reference.  */"}, {"sha": "28a5af25dd984ccd5b824b41a3fb927d28f5753c", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebc7e681079e61300e75a5c0f3b2da335720cc7/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebc7e681079e61300e75a5c0f3b2da335720cc7/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=1ebc7e681079e61300e75a5c0f3b2da335720cc7", "patch": "@@ -94,6 +94,10 @@ Wdisabled-optimization\n Common Var(warn_disabled_optimization) Warning\n Warn when an optimization pass is disabled\n \n+Wdisallowed-function-list=\n+Common RejectNegative Joined Warning\n+Warn on calls to these functions\n+\n Werror\n Common Var(warnings_are_errors)\n Treat all warnings as errors"}, {"sha": "fa4419e998a472e7722a133dd7e818cfe4a661cd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebc7e681079e61300e75a5c0f3b2da335720cc7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebc7e681079e61300e75a5c0f3b2da335720cc7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1ebc7e681079e61300e75a5c0f3b2da335720cc7", "patch": "@@ -1,3 +1,8 @@\n+2008-07-09  Raksit Ashok <raksit@google.com>\n+\n+\t* parser.c (cp_parser_postfix_expression): New warning based on flag\n+\twarn_disallowed_functions.\n+\n 2008-07-08  Simon Martin  <simartin@users.sourceforge.net>\n \n \tPR c++/34963"}, {"sha": "767d14d2a6199cb92f9b3d0d6a125da7f54ee077", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebc7e681079e61300e75a5c0f3b2da335720cc7/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebc7e681079e61300e75a5c0f3b2da335720cc7/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=1ebc7e681079e61300e75a5c0f3b2da335720cc7", "patch": "@@ -4725,6 +4725,9 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t\t\t\t    koenig_p,\n \t\t\t\t    tf_warning_or_error);\n \n+            if (warn_disallowed_functions)\n+              warn_if_disallowed_function_p (postfix_expression);\n+\n \t    /* The POSTFIX_EXPRESSION is certainly no longer an id.  */\n \t    idk = CP_ID_KIND_NONE;\n \t  }"}, {"sha": "6122f791b680a0a2d986ebce42bc1bbdffd27fba", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebc7e681079e61300e75a5c0f3b2da335720cc7/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebc7e681079e61300e75a5c0f3b2da335720cc7/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=1ebc7e681079e61300e75a5c0f3b2da335720cc7", "patch": "@@ -231,8 +231,9 @@ Objective-C and Objective-C++ Dialects}.\n -Wno-attributes -Wc++-compat -Wc++0x-compat -Wcast-align  -Wcast-qual  @gol\n -Wchar-subscripts -Wclobbered  -Wcomment @gol\n -Wconversion  -Wcoverage-mismatch  -Wno-deprecated  @gol\n--Wno-deprecated-declarations -Wdisabled-optimization  -Wno-div-by-zero  @gol\n--Wempty-body  -Wenum-compare -Wno-endif-labels @gol\n+-Wno-deprecated-declarations -Wdisabled-optimization  @gol\n+-Wdisallowed-function-list=@var{sym},@var{sym},@dots{} @gol\n+-Wno-div-by-zero -Wempty-body  -Wenum-compare -Wno-endif-labels @gol\n -Werror  -Werror=* @gol\n -Wfatal-errors  -Wfloat-equal  -Wformat  -Wformat=2 @gol\n -Wno-format-contains-nul -Wno-format-extra-args -Wformat-nonliteral @gol\n@@ -4101,6 +4102,13 @@ minimum maximum, so we do not diagnose overlength strings in C++@.\n \n This option is implied by @option{-pedantic}, and can be disabled with\n @option{-Wno-overlength-strings}.\n+\n+@item -Wdisallowed-function-list=@var{sym},@var{sym},@dots{}\n+@opindex Wdisallowed-function-list\n+\n+If any of @var{sym} is called, GCC will issue a warning. This can be useful\n+in enforcing coding conventions that ban calls to certain functions, for\n+example, @code{alloca}, @code{malloc}, etc.\n @end table\n \n @node Debugging Options"}, {"sha": "edc96e95920c789d31f648499929ec8b1b5dc6f3", "filename": "gcc/flags.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebc7e681079e61300e75a5c0f3b2da335720cc7/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebc7e681079e61300e75a5c0f3b2da335720cc7/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=1ebc7e681079e61300e75a5c0f3b2da335720cc7", "patch": "@@ -279,6 +279,13 @@ extern bool flag_speculative_prefetching_set;\n    instrumentation.  */\n extern bool flag_instrument_functions_exclude_p (tree fndecl);\n \n+/* Emit warning if the function call is disallowed under\n+   -Wdisallowed-function-list=...  */\n+extern void warn_if_disallowed_function_p (const_tree fncall);\n+\n+/* True, if the -Wdisallowed-function-list=... option has been specified.  */\n+extern bool warn_disallowed_functions;\n+\n /* True if the given mode has a NaN representation and the treatment of\n    NaN operands is important.  Certain optimizations, such as folding\n    x * 0 into 0, are not correct for NaN operands, and are normally"}, {"sha": "8431a406bd7ac2c19749114dca11c19ef2e09e50", "filename": "gcc/opts.c", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebc7e681079e61300e75a5c0f3b2da335720cc7/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebc7e681079e61300e75a5c0f3b2da335720cc7/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=1ebc7e681079e61300e75a5c0f3b2da335720cc7", "patch": "@@ -371,6 +371,12 @@ DEF_VEC_ALLOC_P(const_char_p,heap);\n \n static VEC(const_char_p,heap) *ignored_options;\n \n+/* Function calls disallowed under -Wdisallowed-function-list=...  */\n+static VEC(char_p,heap) *warning_disallowed_functions;\n+\n+/* If -Wdisallowed-function-list=...  */\n+bool warn_disallowed_functions = false;\n+\n /* Input file names.  */\n const char **in_fnames;\n unsigned num_in_fnames;\n@@ -655,12 +661,10 @@ add_input_filename (const char *filename)\n   in_fnames[num_in_fnames - 1] = filename;\n }\n \n-/* Add functions or file names to a vector of names to exclude from\n-   instrumentation.  */\n+/* Add comma-separated strings to a char_p vector.  */\n \n static void\n-add_instrument_functions_exclude_list (VEC(char_p,heap) **pvec,\n-\t\t\t\t       const char* arg)\n+add_comma_separated_to_vector (VEC(char_p,heap) **pvec, const char* arg)\n {\n   char *tmp;\n   char *r;\n@@ -736,6 +740,31 @@ flag_instrument_functions_exclude_p (tree fndecl)\n   return false;\n }\n \n+\n+/* Return whether this function call is disallowed.  */\n+void\n+warn_if_disallowed_function_p (const_tree exp)\n+{\n+  if (TREE_CODE(exp) == CALL_EXPR\n+      && VEC_length (char_p, warning_disallowed_functions) > 0)\n+    {\n+      int i;\n+      char *s;\n+      const char *fnname =\n+          IDENTIFIER_POINTER (DECL_NAME (get_callee_fndecl (exp)));\n+      for (i = 0; VEC_iterate (char_p, warning_disallowed_functions, i, s);\n+           ++i)\n+        {\n+          if (strcmp (fnname, s) == 0)\n+            {\n+              warning (OPT_Wdisallowed_function_list_,\n+                       \"disallowed call to %qs\", fnname);\n+              break;\n+            }\n+        }\n+    }\n+}\n+\n /* Decode and handle the vector of command line options.  LANG_MASK\n    contains has a single bit set representing the current\n    language.  */\n@@ -1541,6 +1570,12 @@ common_handle_option (size_t scode, const char *arg, int value,\n       set_Wextra (value);\n       break;\n \n+    case OPT_Wdisallowed_function_list_:\n+      warn_disallowed_functions = true;\n+      add_comma_separated_to_vector\n+\t(&warning_disallowed_functions, arg);\n+      break;\n+\n     case OPT_Werror_:\n       enable_warning_as_error (arg, value, lang_mask);\n       break;\n@@ -1691,12 +1726,12 @@ common_handle_option (size_t scode, const char *arg, int value,\n       break;\n \n     case OPT_finstrument_functions_exclude_function_list_:\n-      add_instrument_functions_exclude_list\n+      add_comma_separated_to_vector\n \t(&flag_instrument_functions_exclude_functions, arg);\n       break;\n \n     case OPT_finstrument_functions_exclude_file_list_:\n-      add_instrument_functions_exclude_list\n+      add_comma_separated_to_vector\n \t(&flag_instrument_functions_exclude_files, arg);\n       break;\n "}, {"sha": "755f8e4719c956aa60b9dfe918cd28474a94188f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebc7e681079e61300e75a5c0f3b2da335720cc7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebc7e681079e61300e75a5c0f3b2da335720cc7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1ebc7e681079e61300e75a5c0f3b2da335720cc7", "patch": "@@ -1,3 +1,10 @@\n+2008-07-09  Raksit Ashok <raksit@google.com>\n+\n+\t* gcc.dg/wdisallowed-functions-1.c: New test.\n+\t* gcc.dg/wdisallowed-functions-2.c: New test.\n+\t* g++.dg/warn/Wdisallowed-functions-1.C: New test.\n+\t* g++.dg/warn/Wdisallowed-functions-2.C: New test.\n+\n 2008-07-08  Simon Martin  <simartin@users.sourceforge.net>\n \n \tPR c++/34963"}, {"sha": "39760950d69bfd2dd7768d2c458495236f0a18b3", "filename": "gcc/testsuite/g++.dg/warn/Wdisallowed-functions-1.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebc7e681079e61300e75a5c0f3b2da335720cc7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdisallowed-functions-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebc7e681079e61300e75a5c0f3b2da335720cc7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdisallowed-functions-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdisallowed-functions-1.C?ref=1ebc7e681079e61300e75a5c0f3b2da335720cc7", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wdisallowed-function-list=foobar\" } */\n+\n+int foobar (int i)\n+{\n+  return (i * 5);\n+}"}, {"sha": "ca5aab0e50d8196e60b695049230991272602bc3", "filename": "gcc/testsuite/g++.dg/warn/Wdisallowed-functions-2.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebc7e681079e61300e75a5c0f3b2da335720cc7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdisallowed-functions-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebc7e681079e61300e75a5c0f3b2da335720cc7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdisallowed-functions-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdisallowed-functions-2.C?ref=1ebc7e681079e61300e75a5c0f3b2da335720cc7", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wdisallowed-function-list=foo,foobar,bar,foobar\" } */\n+\n+int foobar (int i)\n+{\n+  return (i * 5);\n+}\n+\n+int foobar1 (int i)\n+{\n+  return foobar (i);  /* { dg-warning \"disallowed call to 'foobar'\" } */\n+}"}, {"sha": "39760950d69bfd2dd7768d2c458495236f0a18b3", "filename": "gcc/testsuite/gcc.dg/wdisallowed-functions-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebc7e681079e61300e75a5c0f3b2da335720cc7/gcc%2Ftestsuite%2Fgcc.dg%2Fwdisallowed-functions-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebc7e681079e61300e75a5c0f3b2da335720cc7/gcc%2Ftestsuite%2Fgcc.dg%2Fwdisallowed-functions-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwdisallowed-functions-1.c?ref=1ebc7e681079e61300e75a5c0f3b2da335720cc7", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wdisallowed-function-list=foobar\" } */\n+\n+int foobar (int i)\n+{\n+  return (i * 5);\n+}"}, {"sha": "ca5aab0e50d8196e60b695049230991272602bc3", "filename": "gcc/testsuite/gcc.dg/wdisallowed-functions-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebc7e681079e61300e75a5c0f3b2da335720cc7/gcc%2Ftestsuite%2Fgcc.dg%2Fwdisallowed-functions-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebc7e681079e61300e75a5c0f3b2da335720cc7/gcc%2Ftestsuite%2Fgcc.dg%2Fwdisallowed-functions-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwdisallowed-functions-2.c?ref=1ebc7e681079e61300e75a5c0f3b2da335720cc7", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wdisallowed-function-list=foo,foobar,bar,foobar\" } */\n+\n+int foobar (int i)\n+{\n+  return (i * 5);\n+}\n+\n+int foobar1 (int i)\n+{\n+  return foobar (i);  /* { dg-warning \"disallowed call to 'foobar'\" } */\n+}"}]}