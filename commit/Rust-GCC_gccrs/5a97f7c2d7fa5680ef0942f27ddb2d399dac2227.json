{"sha": "5a97f7c2d7fa5680ef0942f27ddb2d399dac2227", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE5N2Y3YzJkN2ZhNTY4MGVmMDk0MmYyN2RkYjJkMzk5ZGFjMjIyNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2000-03-28T15:41:40Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-03-28T15:41:40Z"}, "message": "regmove.c (struct csa_memlist): Make mem field rtx *.\n\n        * regmove.c (struct csa_memlist): Make mem field rtx *.\n        (record_one_stack_ref): Accept rtx * instead of rtx as parameter.\n        (try_apply_stack_adjustment): Replace whole MEM rtx.\n        (combine_stack_adjustments_for_block): Update calls\n        to record_one_stack_ref.\n\nFrom-SVN: r32782", "tree": {"sha": "32bd7ab15b48ee6c7209da64451293a7fcd591a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32bd7ab15b48ee6c7209da64451293a7fcd591a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a97f7c2d7fa5680ef0942f27ddb2d399dac2227", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a97f7c2d7fa5680ef0942f27ddb2d399dac2227", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a97f7c2d7fa5680ef0942f27ddb2d399dac2227", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a97f7c2d7fa5680ef0942f27ddb2d399dac2227/comments", "author": null, "committer": null, "parents": [{"sha": "04e3ec78036a73b107ff87da6a9dafa91aa85bf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04e3ec78036a73b107ff87da6a9dafa91aa85bf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04e3ec78036a73b107ff87da6a9dafa91aa85bf3"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "e69124bfcd7384734b2d195f8dfb34a31420c3fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a97f7c2d7fa5680ef0942f27ddb2d399dac2227/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a97f7c2d7fa5680ef0942f27ddb2d399dac2227/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a97f7c2d7fa5680ef0942f27ddb2d399dac2227", "patch": "@@ -1,3 +1,11 @@\n+Tue Mar 28 08:29:46 2000  Jan Hubicka  <jh@suse.cz>\n+\n+\t* regmove.c (struct csa_memlist): Make mem field rtx *.\n+\t(record_one_stack_ref): Accept rtx * instead of rtx as parameter.\n+\t(try_apply_stack_adjustment): Replace whole MEM rtx.\n+\t(combine_stack_adjustments_for_block): Update calls\n+\tto record_one_stack_ref.\n+\n 2000-03-28  Neil Booth  <NeilB@earthling.net>\n \n         * (cpplex.c) _cpp_read_and_prescan.  Mark end of input buffer with"}, {"sha": "3b4a7e660e0ee652f1c63bc90798ebcde155487f", "filename": "gcc/regmove.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a97f7c2d7fa5680ef0942f27ddb2d399dac2227/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a97f7c2d7fa5680ef0942f27ddb2d399dac2227/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=5a97f7c2d7fa5680ef0942f27ddb2d399dac2227", "patch": "@@ -2088,15 +2088,15 @@ stable_and_no_regs_but_for_p (x, src, dst)\n struct csa_memlist\n {\n   HOST_WIDE_INT sp_offset;\n-  rtx insn, mem;\n+  rtx insn, *mem;\n   struct csa_memlist *next;\n };\n \n static int stack_memref_p\t\tPARAMS ((rtx));\n static rtx single_set_for_csa\t\tPARAMS ((rtx));\n static void free_csa_memlist\t\tPARAMS ((struct csa_memlist *));\n static struct csa_memlist *record_one_stack_memref\n-  PARAMS ((rtx, rtx, struct csa_memlist *));\n+  PARAMS ((rtx, rtx *, struct csa_memlist *));\n static int try_apply_stack_adjustment\n   PARAMS ((rtx, struct csa_memlist *, HOST_WIDE_INT, HOST_WIDE_INT));\n static void combine_stack_adjustments_for_block PARAMS ((basic_block));\n@@ -2188,17 +2188,17 @@ free_csa_memlist (memlist)\n \n static struct csa_memlist *\n record_one_stack_memref (insn, mem, next_memlist)\n-     rtx insn, mem;\n+     rtx insn, *mem;\n      struct csa_memlist *next_memlist;\n {\n   struct csa_memlist *ml;\n \n   ml = (struct csa_memlist *) xmalloc (sizeof (*ml));\n \n-  if (XEXP (mem, 0) == stack_pointer_rtx)\n+  if (XEXP (*mem, 0) == stack_pointer_rtx)\n     ml->sp_offset = 0;\n   else\n-    ml->sp_offset = INTVAL (XEXP (XEXP (mem, 0), 1));\n+    ml->sp_offset = INTVAL (XEXP (XEXP (*mem, 0), 1));\n \n   ml->insn = insn;\n   ml->mem = mem;\n@@ -2241,8 +2241,9 @@ try_apply_stack_adjustment (insn, memlist, new_adjust, delta)\n \t  return 0;\n \t}\n \n-      validate_change (ml->insn, &XEXP (ml->mem, 0),\n-\t\t       plus_constant (stack_pointer_rtx, c), 1);\n+      validate_change (ml->insn, ml->mem,\n+\t\t       gen_rtx_MEM (GET_MODE (*ml->mem),\n+\t\t\t\t    plus_constant (stack_pointer_rtx, c)), 1);\n     }\n \n   if (apply_change_group ())\n@@ -2340,15 +2341,16 @@ combine_stack_adjustments_for_block (bb)\n \t  if (last_sp_set && stack_memref_p (src)\n \t      && ! reg_mentioned_p (stack_pointer_rtx, dest))\n \t    {\n-\t      memlist = record_one_stack_memref (insn, src, memlist);\n+\t      memlist = record_one_stack_memref (insn, &SET_SRC (set), memlist);\n \t      goto processed;\n \t    }\n \n \t  /* Find stores to stack memory and record them.  */\n \t  if (last_sp_set && stack_memref_p (dest)\n \t      && ! reg_mentioned_p (stack_pointer_rtx, src))\n \t    {\n-\t      memlist = record_one_stack_memref (insn, dest, memlist);\n+\t      memlist = record_one_stack_memref (insn, &SET_DEST (set),\n+\t\t\t\t\t\t memlist);\n \t      goto processed;\n \t    }\n "}]}