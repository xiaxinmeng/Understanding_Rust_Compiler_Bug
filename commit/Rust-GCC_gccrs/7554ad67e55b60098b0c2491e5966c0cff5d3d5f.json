{"sha": "7554ad67e55b60098b0c2491e5966c0cff5d3d5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU1NGFkNjdlNTViNjAwOThiMGMyNDkxZTU5NjZjMGNmZjVkM2Q1Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-01-26T00:54:44Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-01-26T00:54:44Z"}, "message": "Makefile.in (flow.o): Depend on $(EXPR_H).\n\n        * Makefile.in (flow.o): Depend on $(EXPR_H).\n        * flow.c (mark_regs_live_at_end): Use hard_function_value, i.e.\n        duplicate the structure of diddle_return_value for keeping regs live.\n\nFrom-SVN: r31620", "tree": {"sha": "8fd7c87269e615b141c3a804af07088990ede3da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fd7c87269e615b141c3a804af07088990ede3da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7554ad67e55b60098b0c2491e5966c0cff5d3d5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7554ad67e55b60098b0c2491e5966c0cff5d3d5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7554ad67e55b60098b0c2491e5966c0cff5d3d5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7554ad67e55b60098b0c2491e5966c0cff5d3d5f/comments", "author": null, "committer": null, "parents": [{"sha": "1a588ad7522098037aaa4b5989824dfc2e1dd5a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a588ad7522098037aaa4b5989824dfc2e1dd5a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a588ad7522098037aaa4b5989824dfc2e1dd5a9"}], "stats": {"total": 50, "additions": 26, "deletions": 24}, "files": [{"sha": "f14165a45dd81b2fc61ec56d7c333f5dfd507d96", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7554ad67e55b60098b0c2491e5966c0cff5d3d5f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7554ad67e55b60098b0c2491e5966c0cff5d3d5f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7554ad67e55b60098b0c2491e5966c0cff5d3d5f", "patch": "@@ -1,3 +1,9 @@\n+2000-01-25  Richard Henderson  <rth@cygnus.com>\n+\n+\t* Makefile.in (flow.o): Depend on $(EXPR_H).\n+\t* flow.c (mark_regs_live_at_end): Use hard_function_value, i.e.\n+\tduplicate the structure of diddle_return_value for keeping regs live.\n+\n 2000-01-26  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* loop.c (current_loop_info): Delete."}, {"sha": "fdf800a5d091ff1b9a818dfeffce82ba262892fe", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7554ad67e55b60098b0c2491e5966c0cff5d3d5f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7554ad67e55b60098b0c2491e5966c0cff5d3d5f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7554ad67e55b60098b0c2491e5966c0cff5d3d5f", "patch": "@@ -1573,7 +1573,7 @@ unroll.o : unroll.c $(CONFIG_H) system.h $(RTL_H) insn-config.h function.h \\\n    varray.h \n flow.o : flow.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h insn-config.h \\\n    $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h toplev.h $(RECOG_H) \\\n-   insn-flags.h function.h except.h\n+   insn-flags.h function.h except.h $(EXPR_H)\n combine.o : combine.c $(CONFIG_H) system.h $(RTL_H) flags.h function.h \\\n    insn-config.h insn-flags.h insn-codes.h insn-attr.h $(REGS_H) $(EXPR_H) \\\n    $(BASIC_BLOCK_H) $(RECOG_H) real.h hard-reg-set.h toplev.h"}, {"sha": "bee21d29b0beaf2a4e2088647131aab7bb0ffecb", "filename": "gcc/flow.c", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7554ad67e55b60098b0c2491e5966c0cff5d3d5f/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7554ad67e55b60098b0c2491e5966c0cff5d3d5f/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=7554ad67e55b60098b0c2491e5966c0cff5d3d5f", "patch": "@@ -133,6 +133,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"except.h\"\n #include \"toplev.h\"\n #include \"recog.h\"\n+#include \"expr.h\"\n #include \"insn-flags.h\"\n \n #include \"obstack.h\"\n@@ -2782,7 +2783,8 @@ static void\n mark_regs_live_at_end (set)\n      regset set;\n {\n-  tree type;\n+  tree return_decl, return_type;\n+  rtx return_reg;\n   int i;\n \n   /* If exiting needs the right stack value, consider the stack pointer\n@@ -2841,40 +2843,34 @@ mark_regs_live_at_end (set)\n \n   /* Mark function return value.  */\n \n-  type = TREE_TYPE (DECL_RESULT (current_function_decl));\n-  if (type != void_type_node)\n+  return_decl = DECL_RESULT (current_function_decl);\n+  return_type = TREE_TYPE (return_decl);\n+  return_reg = DECL_RTL (return_decl);\n+  if (return_reg)\n     {\n-      rtx outgoing;\n-\n-      if (current_function_returns_struct\n-\t  || current_function_returns_pcc_struct)\n-\ttype = build_pointer_type (type);\n-\n-#ifdef FUNCTION_OUTGOING_VALUE\n-      outgoing = FUNCTION_OUTGOING_VALUE (type, current_function_decl);\n-#else\n-      outgoing = FUNCTION_VALUE (type, current_function_decl);\n-#endif\n-\n-      if (GET_CODE (outgoing) == REG)\n-\tmark_reg (set, outgoing);\n-      else if (GET_CODE (outgoing) == PARALLEL)\n+      if (GET_CODE (return_reg) == REG\n+\t  && REGNO (return_reg) < FIRST_PSEUDO_REGISTER)\n \t{\n-\t  int len = XVECLEN (outgoing, 0);\n+\t  /* Use hard_function_value to avoid examining a BLKmode register.  */\n+\t  return_reg\n+\t    = hard_function_value (return_type, current_function_decl, 1);\n+\t  mark_reg (set, return_reg);\n+\t}\n+      else if (GET_CODE (return_reg) == PARALLEL)\n+\t{\n+\t  int len = XVECLEN (return_reg, 0);\n \n \t  /* Check for a NULL entry, used to indicate that the parameter\n \t     goes on the stack and in registers.  */\n-\t  i = (XEXP (XVECEXP (outgoing, 0, 0), 0) ? 0 : 1);\n+\t  i = (XEXP (XVECEXP (return_reg, 0, 0), 0) ? 0 : 1);\n \n \t  for ( ; i < len; ++i)\n \t    {\n-\t      rtx r = XVECEXP (outgoing, 0, i);\n+\t      rtx r = XVECEXP (return_reg, 0, i);\n \t      if (GET_CODE (r) == REG)\n \t\tmark_reg (set, r);\n \t    }\n \t}\n-      else\n-\tabort ();\n     }\n }\n "}]}