{"sha": "8269de5462d7c05231a3aab0f5ae337aa4bfa364", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI2OWRlNTQ2MmQ3YzA1MjMxYTNhYWIwZjVhZTMzN2FhNGJmYTM2NA==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@redhat.com", "date": "2013-03-27T20:54:01Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2013-03-27T20:54:01Z"}, "message": "cygwin-stdint.h: Add support for cygwin x64 target.\n\n\t* config/i386/cygwin-stdint.h: Add support for cygwin x64 target.\n\t* config/i386/t-cygwin-w64: New file.\n\t* config/i386/cygwin-w64.h: New file.\n\t* config/i386/cygwin.h (EXTRA_OS_CPP_BUILTINS): Extend\n\tand add support for x64-cygwin target.\n\t(CPP_SPEC): Likewise.\n\t(CXX_WRAP_SPEC_LIST): Undefine before define.\n\t(LIBGCJ_SONAME): Use 15 as version.\n\nFrom-SVN: r197168", "tree": {"sha": "195fcd3f696331699aa07373577e66bfc1155ad3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/195fcd3f696331699aa07373577e66bfc1155ad3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8269de5462d7c05231a3aab0f5ae337aa4bfa364", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8269de5462d7c05231a3aab0f5ae337aa4bfa364", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8269de5462d7c05231a3aab0f5ae337aa4bfa364", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8269de5462d7c05231a3aab0f5ae337aa4bfa364/comments", "author": null, "committer": null, "parents": [{"sha": "d348f172601e946ada34175d77cbccd671d37f18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d348f172601e946ada34175d77cbccd671d37f18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d348f172601e946ada34175d77cbccd671d37f18"}], "stats": {"total": 146, "additions": 142, "deletions": 4}, "files": [{"sha": "e3998013587692a8137db4c4c2480832fd4110ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8269de5462d7c05231a3aab0f5ae337aa4bfa364/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8269de5462d7c05231a3aab0f5ae337aa4bfa364/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8269de5462d7c05231a3aab0f5ae337aa4bfa364", "patch": "@@ -1,3 +1,14 @@\n+2013-03-27 Kai Tietz  <ktietz@redhat.com>\n+\n+\t* config/i386/cygwin-stdint.h: Add support for cygwin x64 target.\n+\t* config/i386/t-cygwin-w64: New file.\n+\t* config/i386/cygwin-w64.h: New file.\n+\t* config/i386/cygwin.h (EXTRA_OS_CPP_BUILTINS): Extend\n+\tand add support for x64-cygwin target.\n+\t(CPP_SPEC): Likewise.\n+\t(CXX_WRAP_SPEC_LIST): Undefine before define.\n+\t(LIBGCJ_SONAME): Use 15 as version.\n+\n 2013-03-27  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/56716"}, {"sha": "2dc207b5e4544280dec9bbc8351402e20f28201c", "filename": "gcc/config/i386/cygwin-stdint.h", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8269de5462d7c05231a3aab0f5ae337aa4bfa364/gcc%2Fconfig%2Fi386%2Fcygwin-stdint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8269de5462d7c05231a3aab0f5ae337aa4bfa364/gcc%2Fconfig%2Fi386%2Fcygwin-stdint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin-stdint.h?ref=8269de5462d7c05231a3aab0f5ae337aa4bfa364", "patch": "@@ -24,39 +24,71 @@ along with GCC; see the file COPYING3.  If not see\n #define INT8_TYPE \"signed char\"\n #define INT16_TYPE \"short int\"\n #define INT32_TYPE \"int\"\n+#ifdef __x86_64__\n+#define INT64_TYPE \"long int\"\n+#else\n #define INT64_TYPE \"long long int\"\n+#endif\n \n #define UINT8_TYPE \"unsigned char\"\n #define UINT16_TYPE \"short unsigned int\"\n #define UINT32_TYPE \"unsigned int\"\n+#ifdef __x86_64__\n+#define UINT64_TYPE \"long unsigned int\"\n+#else\n #define UINT64_TYPE \"long long unsigned int\"\n+#endif\n \n /* Minimum-width integer types */\n \n #define INT_LEAST8_TYPE \"signed char\"\n #define INT_LEAST16_TYPE \"short int\"\n #define INT_LEAST32_TYPE \"int\"\n+#ifdef __x86_64__\n+#define INT_LEAST64_TYPE \"long int\"\n+#else\n #define INT_LEAST64_TYPE \"long long int\"\n+#endif\n \n #define UINT_LEAST8_TYPE \"unsigned char\"\n #define UINT_LEAST16_TYPE \"short unsigned int\"\n #define UINT_LEAST32_TYPE \"unsigned int\"\n+#ifdef __x86_64__\n+#define UINT_LEAST64_TYPE \"long unsigned int\"\n+#else\n #define UINT_LEAST64_TYPE \"long long unsigned int\"\n+#endif\n \n /* Fastest minimum-width integer types */\n \n #define INT_FAST8_TYPE \"signed char\"\n+#ifdef __x86_64__\n+#define INT_FAST16_TYPE \"long int\"\n+#define INT_FAST32_TYPE \"long int\"\n+#define INT_FAST64_TYPE \"long int\"\n+#else\n #define INT_FAST16_TYPE \"int\"\n #define INT_FAST32_TYPE \"int\"\n #define INT_FAST64_TYPE \"long long int\"\n+#endif\n \n #define UINT_FAST8_TYPE \"unsigned char\"\n+#ifdef __x86_64__\n+#define UINT_FAST16_TYPE \"long unsigned int\"\n+#define UINT_FAST32_TYPE \"long unsigned int\"\n+#define UINT_FAST64_TYPE \"long unsigned int\"\n+#else\n #define UINT_FAST16_TYPE \"unsigned int\"\n #define UINT_FAST32_TYPE \"unsigned int\"\n #define UINT_FAST64_TYPE \"long long unsigned int\"\n+#endif\n \n /* Integer types capable of holding object pointers */\n \n+#ifdef __x86_64__\n+#define INTPTR_TYPE \"long int\"\n+#define UINTPTR_TYPE \"long unsigned int\"\n+#else\n #define INTPTR_TYPE \"int\"\n #define UINTPTR_TYPE \"unsigned int\"\n-\n+#endif"}, {"sha": "e39ace98ea047d161c4818b0982acfdc43cc2463", "filename": "gcc/config/i386/cygwin-w64.h", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8269de5462d7c05231a3aab0f5ae337aa4bfa364/gcc%2Fconfig%2Fi386%2Fcygwin-w64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8269de5462d7c05231a3aab0f5ae337aa4bfa364/gcc%2Fconfig%2Fi386%2Fcygwin-w64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin-w64.h?ref=8269de5462d7c05231a3aab0f5ae337aa4bfa364", "patch": "@@ -0,0 +1,83 @@\n+/* Operating system specific defines to be used when targeting GCC for\n+   hosting on Windows 32/64 via Cygwin runtime, using GNU tools and\n+   the Windows API Library.\n+   Copyright (C) 2013 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Enable multilib.  */\n+\n+#undef ASM_SPEC\n+#define ASM_SPEC \"%{m32:--32} %{m64:--64}\"\n+\n+/* To implement C++ function replacement we always wrap the cxx\n+   malloc-like operators.  See N2800 #17.6.4.6 [replacement.functions] */\n+#undef CXX_WRAP_SPEC_LIST\n+#define CXX_WRAP_SPEC_LIST \" \\\n+  --wrap _Znwm \\\n+  --wrap _Znam \\\n+  --wrap _ZdlPv \\\n+  --wrap _ZdaPv \\\n+  --wrap _ZnwmRKSt9nothrow_t \\\n+  --wrap _ZnamRKSt9nothrow_t \\\n+  --wrap _ZdlPvRKSt9nothrow_t \\\n+  --wrap _ZdaPvRKSt9nothrow_t \\\n+\"\n+\n+#undef SPEC_32\n+#undef SPEC_64\n+#define SPEC_32 \"m32\"\n+#define SPEC_64 \"!m32\"\n+\n+#undef SUB_LINK_ENTRY32\n+#undef SUB_LINK_ENTRY64\n+#define SUB_LINK_ENTRY32 \"-e __cygwin_dll_entry@12\"\n+#define SUB_LINK_ENTRY64 \"-e _cygwin_dll_entry\"\n+\n+#undef SUB_LINK_SPEC\n+#undef SUB_LINK_ENTRY\n+#define SUB_LINK_SPEC \"%{\" SPEC_64 \":-m i386pep} %{\" SPEC_32 \":-m i386pe}\"\n+#define SUB_LINK_ENTRY \"%{\" SPEC_64 \":\" SUB_LINK_ENTRY64 \"} %{\" SPEC_32 \":\" SUB_LINK_ENTRY32 \"}\"\n+\n+#undef MULTILIB_DEFAULTS\n+#define MULTILIB_DEFAULTS { \"m64\" }\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC SUB_LINK_SPEC \"\\\n+  %{mwindows:--subsystem windows} \\\n+  %{mconsole:--subsystem console} \\\n+  \" CXX_WRAP_SPEC \" \\\n+  %{shared: %{mdll: %eshared and mdll are not compatible}} \\\n+  %{shared: --shared} %{mdll:--dll} \\\n+  %{static:-Bstatic} %{!static:-Bdynamic} \\\n+  %{shared|mdll: \" SUB_LINK_ENTRY \" --enable-auto-image-base} \\\n+  %(shared_libgcc_undefs) \\\n+  --dll-search-prefix=cyg -tsaware\"\n+\n+/* Cygwin64 will have a 64-bit long type. */\n+#undef LONG_TYPE_SIZE\n+#undef LONG_TYPE_SIZE\n+#define LONG_TYPE_SIZE (TARGET_64BIT ? 64 : 32)\n+\n+/* Override default \"long long unsigned int\" from cygming.h. */\n+#undef SIZE_TYPE\n+#define SIZE_TYPE (TARGET_64BIT ? \"long unsigned int\" : \"unsigned int\")\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE (TARGET_64BIT ? \"long int\" : \"int\")\n+\n+#undef LIBGCC_SONAME\n+#define LIBGCC_SONAME \"cyggcc_s-seh-1.dll\""}, {"sha": "940b113a7c4b1c8f5f841fc585b8268e3f688d01", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8269de5462d7c05231a3aab0f5ae337aa4bfa364/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8269de5462d7c05231a3aab0f5ae337aa4bfa364/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=8269de5462d7c05231a3aab0f5ae337aa4bfa364", "patch": "@@ -18,11 +18,20 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-#define EXTRA_OS_CPP_BUILTINS()  /* Nothing.  */\n+#define EXTRA_OS_CPP_BUILTINS()\t\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      builtin_define (\"__CYGWIN__\");\t\t\t\t\\\n+      if (!TARGET_CYGWIN64)\t\t\t\t\t\\\n+\tbuiltin_define (\"__CYGWIN32__\");\t\t\t\\\n+      builtin_define (\"__unix__\");\t\t\t\t\\\n+      builtin_define (\"__unix\");\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n \n #undef CPP_SPEC\n #define CPP_SPEC \"%(cpp_cpu) %{posix:-D_POSIX_SOURCE} \\\n-  -D__CYGWIN32__ -D__CYGWIN__ %{!ansi:-Dunix} -D__unix__ -D__unix \\\n+  %{!ansi:-Dunix} \\\n   %{mwin32:-DWIN32 -D_WIN32 -D__WIN32 -D__WIN32__ %{!ansi:-DWINNT}} \\\n   %{!nostdinc:%{!mno-win32:-idirafter ../include/w32api%s -idirafter ../../include/w32api%s}}\\\n \"\n@@ -133,5 +142,5 @@ along with GCC; see the file COPYING3.  If not see\n #define LIBGCC_SONAME \"cyggcc_s\" LIBGCC_EH_EXTN \"-1.dll\"\n \n /* We should find a way to not have to update this manually.  */\n-#define LIBGCJ_SONAME \"cyggcj\" /*LIBGCC_EH_EXTN*/ \"-13.dll\"\n+#define LIBGCJ_SONAME \"cyggcj\" /*LIBGCC_EH_EXTN*/ \"-15.dll\"\n "}, {"sha": "01968fd88c3a1fc9315a710b770baa39dc60e6ef", "filename": "gcc/config/i386/t-cygwin-w64", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8269de5462d7c05231a3aab0f5ae337aa4bfa364/gcc%2Fconfig%2Fi386%2Ft-cygwin-w64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8269de5462d7c05231a3aab0f5ae337aa4bfa364/gcc%2Fconfig%2Fi386%2Ft-cygwin-w64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-cygwin-w64?ref=8269de5462d7c05231a3aab0f5ae337aa4bfa364", "patch": "@@ -0,0 +1,3 @@\n+MULTILIB_OPTIONS = m64/m32\n+MULTILIB_DIRNAMES = 64\n+MULTILIB_OSDIRNAMES = ../lib ../lib32"}]}