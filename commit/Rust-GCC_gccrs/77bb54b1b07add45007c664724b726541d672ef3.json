{"sha": "77bb54b1b07add45007c664724b726541d672ef3", "node_id": "C_kwDOANBUbNoAKDc3YmI1NGIxYjA3YWRkNDUwMDdjNjY0NzI0YjcyNjU0MWQ2NzJlZjM", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2023-02-08T18:47:36Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2023-02-08T18:47:36Z"}, "message": "analyzer: fix overzealous state purging with on-stack structs [PR108704]\n\nPR analyzer/108704 reports many false positives seen from\n-Wanalyzer-use-of-uninitialized-value on qemu's softfloat.c on code like\nthe following:\n\n   struct st s;\n   s = foo ();\n   s = bar (s); // bogusly reports that s is uninitialized here\n\nwhere e.g. \"struct st\" is \"floatx80\" in the qemu examples.\n\nThe root cause is overzealous purging of on-stack structs in the code I\nadded in r12-7718-gfaacafd2306ad7, where at:\n\n\ts = bar (s);\n\nstate_purge_per_decl::process_point_backwards \"sees\" the assignment to 's'\nand stops processing, effectively treating 's' as unneeded before this\nstmt, not noticing the use of 's' in the argument.\n\nFixed thusly.\n\nThe patch greatly reduces the number of\n-Wanalyzer-use-of-uninitialized-value warnings from my integration tests:\n  ImageMagick-7.1.0-57:  10 ->  6   (-4)\n              qemu-7.2: 858 -> 87 (-771)\n         haproxy-2.7.1:   1 ->  0   (-1)\nAll of the above that I've examined appear to be false positives.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/108704\n\t* state-purge.cc (state_purge_per_decl::process_point_backwards):\n\tDon't stop processing the decl if it's fully overwritten by\n\tthis stmt if it's also used by this stmt.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/108704\n\t* gcc.dg/analyzer/uninit-7.c: New test.\n\t* gcc.dg/analyzer/uninit-pr108704.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "99263fef9122f4abc105a68181d03fa293fb09e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99263fef9122f4abc105a68181d03fa293fb09e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77bb54b1b07add45007c664724b726541d672ef3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77bb54b1b07add45007c664724b726541d672ef3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77bb54b1b07add45007c664724b726541d672ef3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77bb54b1b07add45007c664724b726541d672ef3/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2eeda82d6288fb2a8fbc302d98ed51337e01aaaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eeda82d6288fb2a8fbc302d98ed51337e01aaaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2eeda82d6288fb2a8fbc302d98ed51337e01aaaa"}], "stats": {"total": 171, "additions": 170, "deletions": 1}, "files": [{"sha": "5f2d1f7fefa2a0f2c3c94bf9512687fb13513680", "filename": "gcc/analyzer/state-purge.cc", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77bb54b1b07add45007c664724b726541d672ef3/gcc%2Fanalyzer%2Fstate-purge.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77bb54b1b07add45007c664724b726541d672ef3/gcc%2Fanalyzer%2Fstate-purge.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstate-purge.cc?ref=77bb54b1b07add45007c664724b726541d672ef3", "patch": "@@ -922,7 +922,20 @@ process_point_backwards (const function_point &point,\n       {\n \t/* This is somewhat equivalent to how the SSA case handles\n \t   def-stmts.  */\n-\tif (fully_overwrites_p (point.get_stmt (), m_decl, model))\n+\tif (fully_overwrites_p (point.get_stmt (), m_decl, model)\n+\t    /* ...but we mustn't be at a point that also consumes the\n+\t       current value of the decl when it's generating the new\n+\t       value, for cases such as\n+\t\t  struct st s;\n+\t\t  s = foo ();\n+\t\t  s = bar (s);\n+\t       where we want to make sure that we don't stop at the:\n+\t\t  s = bar (s);\n+\t       since otherwise we would erroneously purge the state of \"s\"\n+\t       after:\n+\t\t  s = foo ();\n+\t    */\n+\t    && !m_points_needing_decl.contains (point))\n \t  {\n \t    if (logger)\n \t      logger->log (\"stmt fully overwrites %qE; terminating\", m_decl);"}, {"sha": "cb3e29abe8f3f2b2492de7cbd7975b823f923aad", "filename": "gcc/testsuite/gcc.dg/analyzer/uninit-7.c", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77bb54b1b07add45007c664724b726541d672ef3/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77bb54b1b07add45007c664724b726541d672ef3/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-7.c?ref=77bb54b1b07add45007c664724b726541d672ef3", "patch": "@@ -0,0 +1,127 @@\n+typedef struct st\n+{\n+  char buf[16];\n+} st;\n+\n+extern st foo (st);\n+extern st bar (st *);\n+extern char baz (st);\n+\n+void test_1 (st a)\n+{\n+  st b, c, d, e;\n+\n+  b = a;\n+  c = foo(a);\n+  d = bar(&a);\n+  c = foo(e); /* { dg-warning \"use of uninitialized value 'e'\" } */\n+}\n+\n+void test_2 (st a)\n+{\n+  a = a;\n+}\n+\n+st test_2a (void)\n+{\n+  st a;\n+  a = a; /* { dg-warning \"use of uninitialized value 'a'\" } */\n+  return a;\n+}\n+\n+void test_3 (st a)\n+{\n+  a = foo (a);\n+}\n+\n+st test_3a (void)\n+{\n+  st a;\n+  a = foo (a); /* { dg-warning \"use of uninitialized value 'a'\" } */\n+  return a;\n+}\n+\n+void test_3b (st a, st b)\n+{\n+  a = foo (a);\n+  foo (b);\n+  a = foo (a);\n+  foo (b);\n+  a = foo (a);\n+  foo (b);\n+}\n+\n+void test_4 (st a)\n+{\n+  a = bar (&a);\n+}\n+\n+st test_4a (void)\n+{\n+  st a;\n+  a = bar (&a);\n+  return a;\n+}\n+\n+void test_5 (st a)\n+{\n+  st b;\n+  a = bar (&a);\n+  b = b; /* { dg-warning \"use of uninitialized value 'b'\" } */\n+}\n+\n+st test_6 (st a)\n+{\n+  st b;\n+  a = bar (&b);\n+  b = b;\n+  return b;\n+}\n+\n+void test_6a (st a)\n+{\n+  st b;\n+  a = bar (&b);\n+  b = b;\n+}\n+\n+st test_7 (st a)\n+{\n+  st b;\n+  b = bar (&a);\n+  return b;\n+}\n+\n+void test_7a (st a)\n+{\n+  st b;\n+  b = bar (&a);\n+}\n+\n+st test_8 (void)\n+{\n+  st b;\n+  b = bar (&b);\n+  return b;\n+}\n+\n+void test_8a (void)\n+{\n+  st b;\n+  b = bar (&b);\n+}\n+\n+char test_9 (st a)\n+{\n+  char c;\n+  c = baz (a);\n+  return c;\n+}\n+\n+char test_10 (st a)\n+{\n+  char c;\n+  a = foo (a);\n+  c = baz (a);\n+  return c;\n+}"}, {"sha": "ebf8151e58fda606a92a37f92af7b5a1644aa79d", "filename": "gcc/testsuite/gcc.dg/analyzer/uninit-pr108704.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77bb54b1b07add45007c664724b726541d672ef3/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-pr108704.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77bb54b1b07add45007c664724b726541d672ef3/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-pr108704.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-pr108704.c?ref=77bb54b1b07add45007c664724b726541d672ef3", "patch": "@@ -0,0 +1,29 @@\n+typedef unsigned short int __uint16_t;\n+typedef unsigned int __uint32_t;\n+typedef unsigned long int __uint64_t;\n+typedef __uint16_t uint16_t;\n+typedef __uint32_t uint32_t;\n+typedef __uint64_t uint64_t;\n+\n+typedef uint32_t float32;\n+typedef struct\n+{\n+  uint64_t low;\n+  uint16_t high;\n+} floatx80;\n+\n+extern floatx80\n+float32_to_floatx80(float32);\n+\n+extern floatx80\n+floatx80_add(floatx80, floatx80);\n+\n+floatx80\n+test (floatx80 a)\n+{\n+  floatx80 fp0;\n+\n+  fp0 = a;\n+  fp0 = floatx80_add(fp0, float32_to_floatx80((0x3F800000))); /* { dg-bogus \"use of uninitialized value 'fp0'\" } */\n+  return fp0;\n+}"}]}