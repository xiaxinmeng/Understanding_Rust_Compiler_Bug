{"sha": "762613be3e563106eec05795785bd08d33466d7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYyNjEzYmUzZTU2MzEwNmVlYzA1Nzk1Nzg1YmQwOGQzMzQ2NmQ3ZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-08-24T17:58:42Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-08-24T17:58:42Z"}, "message": "df-scan.c (df_insn_info_init_fields): New function, split out from...\n\ngcc/\n\t* df-scan.c (df_insn_info_init_fields): New function, split out\n\tfrom...\n\t(df_insn_create_insn_record): ...here.\n\t(df_insn_info_free_fields): New function, split out from...\n\t(df_insn_info_delete): ...here.\n\t(df_insn_rescan): Use the new functions instead of freeing and\n\treallocating the df_insn_info.\n\nFrom-SVN: r227139", "tree": {"sha": "a23962d66c1645b2a65d7e45e0c2955a5caf10b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a23962d66c1645b2a65d7e45e0c2955a5caf10b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/762613be3e563106eec05795785bd08d33466d7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/762613be3e563106eec05795785bd08d33466d7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/762613be3e563106eec05795785bd08d33466d7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/762613be3e563106eec05795785bd08d33466d7e/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "50b43b866a3d99d9d3c140caf68f7d7bb2d63c21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50b43b866a3d99d9d3c140caf68f7d7bb2d63c21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50b43b866a3d99d9d3c140caf68f7d7bb2d63c21"}], "stats": {"total": 67, "additions": 45, "deletions": 22}, "files": [{"sha": "5ebafe1fbcc92510eb661d4db17412693382af50", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/762613be3e563106eec05795785bd08d33466d7e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/762613be3e563106eec05795785bd08d33466d7e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=762613be3e563106eec05795785bd08d33466d7e", "patch": "@@ -1,3 +1,13 @@\n+2015-08-24  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* df-scan.c (df_insn_info_init_fields): New function, split out\n+\tfrom...\n+\t(df_insn_create_insn_record): ...here.\n+\t(df_insn_info_free_fields): New function, split out from...\n+\t(df_insn_info_delete): ...here.\n+\t(df_insn_rescan): Use the new functions instead of freeing and\n+\treallocating the df_insn_info.\n+\n 2015-08-24  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \t* doc/install.texi (Binaries): Remove links no longer valid."}, {"sha": "259c959130749be90b2674e4baa0968e1045c975", "filename": "gcc/df-scan.c", "status": "modified", "additions": 35, "deletions": 22, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/762613be3e563106eec05795785bd08d33466d7e/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/762613be3e563106eec05795785bd08d33466d7e/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=762613be3e563106eec05795785bd08d33466d7e", "patch": "@@ -809,6 +809,14 @@ df_reg_chain_unlink (df_ref ref)\n   df_free_ref (ref);\n }\n \n+/* Initialize INSN_INFO to describe INSN.  */\n+\n+static void\n+df_insn_info_init_fields (df_insn_info *insn_info, rtx_insn *insn)\n+{\n+  memset (insn_info, 0, sizeof (struct df_insn_info));\n+  insn_info->insn = insn;\n+}\n \n /* Create the insn record for INSN.  If there was one there, zero it\n    out.  */\n@@ -827,8 +835,7 @@ df_insn_create_insn_record (rtx_insn *insn)\n       insn_rec = problem_data->insn_pool->allocate ();\n       DF_INSN_INFO_SET (insn, insn_rec);\n     }\n-  memset (insn_rec, 0, sizeof (struct df_insn_info));\n-  insn_rec->insn = insn;\n+  df_insn_info_init_fields (insn_rec, insn);\n   return insn_rec;\n }\n \n@@ -876,6 +883,29 @@ df_mw_hardreg_chain_delete (struct df_mw_hardreg *hardregs)\n     }\n }\n \n+/* Remove the contents of INSN_INFO (but don't free INSN_INFO itself).  */\n+\n+static void\n+df_insn_info_free_fields (df_insn_info *insn_info)\n+{\n+  /* In general, notes do not have the insn_info fields\n+     initialized.  However, combine deletes insns by changing them\n+     to notes.  How clever.  So we cannot just check if it is a\n+     valid insn before short circuiting this code, we need to see\n+     if we actually initialized it.  */\n+  df_mw_hardreg_chain_delete (insn_info->mw_hardregs);\n+\n+  if (df_chain)\n+    {\n+      df_ref_chain_delete_du_chain (insn_info->defs);\n+      df_ref_chain_delete_du_chain (insn_info->uses);\n+      df_ref_chain_delete_du_chain (insn_info->eq_uses);\n+    }\n+\n+  df_ref_chain_delete (insn_info->defs);\n+  df_ref_chain_delete (insn_info->uses);\n+  df_ref_chain_delete (insn_info->eq_uses);\n+}\n \n /* Delete all of the refs information from the insn with UID.\n    Internal helper for df_insn_delete, df_insn_rescan, and other\n@@ -895,24 +925,7 @@ df_insn_info_delete (unsigned int uid)\n       struct df_scan_problem_data *problem_data\n \t= (struct df_scan_problem_data *) df_scan->problem_data;\n \n-      /* In general, notes do not have the insn_info fields\n-\t initialized.  However, combine deletes insns by changing them\n-\t to notes.  How clever.  So we cannot just check if it is a\n-\t valid insn before short circuiting this code, we need to see\n-\t if we actually initialized it.  */\n-      df_mw_hardreg_chain_delete (insn_info->mw_hardregs);\n-\n-      if (df_chain)\n-\t{\n-\t  df_ref_chain_delete_du_chain (insn_info->defs);\n-\t  df_ref_chain_delete_du_chain (insn_info->uses);\n-\t  df_ref_chain_delete_du_chain (insn_info->eq_uses);\n-\t}\n-\n-      df_ref_chain_delete (insn_info->defs);\n-      df_ref_chain_delete (insn_info->uses);\n-      df_ref_chain_delete (insn_info->eq_uses);\n-\n+      df_insn_info_free_fields (insn_info);\n       problem_data->insn_pool->remove (insn_info);\n       DF_INSN_UID_SET (uid, NULL);\n     }\n@@ -1075,8 +1088,8 @@ df_insn_rescan (rtx_insn *insn)\n       /* There's change - we need to delete the existing info.\n \t Since the insn isn't moved, we can salvage its LUID.  */\n       luid = DF_INSN_LUID (insn);\n-      df_insn_info_delete (uid);\n-      df_insn_create_insn_record (insn);\n+      df_insn_info_free_fields (insn_info);\n+      df_insn_info_init_fields (insn_info, insn);\n       DF_INSN_LUID (insn) = luid;\n     }\n   else"}]}