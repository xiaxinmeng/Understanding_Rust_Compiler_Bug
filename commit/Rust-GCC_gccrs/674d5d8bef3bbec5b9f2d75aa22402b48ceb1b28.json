{"sha": "674d5d8bef3bbec5b9f2d75aa22402b48ceb1b28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc0ZDVkOGJlZjNiYmVjNWI5ZjJkNzVhYTIyNDAyYjQ4Y2ViMWIyOA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-21T00:16:01Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-21T00:16:01Z"}, "message": "(gen_lowpart_common): Return a new hard reg even if not valid in MODE\nif the input REG is not valid in its mode.\n\nFrom-SVN: r6249", "tree": {"sha": "ba82c1a724cae651ccea001ddc0954e44639238a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba82c1a724cae651ccea001ddc0954e44639238a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/674d5d8bef3bbec5b9f2d75aa22402b48ceb1b28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/674d5d8bef3bbec5b9f2d75aa22402b48ceb1b28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/674d5d8bef3bbec5b9f2d75aa22402b48ceb1b28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/674d5d8bef3bbec5b9f2d75aa22402b48ceb1b28/comments", "author": null, "committer": null, "parents": [{"sha": "405c5495313248c057a9d6df722134f49672a086", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/405c5495313248c057a9d6df722134f49672a086", "html_url": "https://github.com/Rust-GCC/gccrs/commit/405c5495313248c057a9d6df722134f49672a086"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "127052178aafacfe4e74615e7f3d4caebab9d314", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/674d5d8bef3bbec5b9f2d75aa22402b48ceb1b28/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/674d5d8bef3bbec5b9f2d75aa22402b48ceb1b28/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=674d5d8bef3bbec5b9f2d75aa22402b48ceb1b28", "patch": "@@ -595,9 +595,14 @@ gen_lowpart_common (mode, x)\n   else if (GET_CODE (x) == REG)\n     {\n       /* If the register is not valid for MODE, return 0.  If we don't\n-\t do this, there is no way to fix up the resulting REG later.  */\n+\t do this, there is no way to fix up the resulting REG later.  \n+\t But we do do this if the current REG is not valid for its\n+\t mode.  This latter is a kludge, but is required due to the\n+\t way that parameters are passed on some machines, most\n+\t notably Sparc.  */\n       if (REGNO (x) < FIRST_PSEUDO_REGISTER\n-\t  && ! HARD_REGNO_MODE_OK (REGNO (x) + word, mode))\n+\t  && ! HARD_REGNO_MODE_OK (REGNO (x) + word, mode)\n+\t  && HARD_REGNO_MODE_OK (REGNO (x), GET_MODE (x)))\n \treturn 0;\n       else if (REGNO (x) < FIRST_PSEUDO_REGISTER\n \t       /* integrate.c can't handle parts of a return value register. */"}]}