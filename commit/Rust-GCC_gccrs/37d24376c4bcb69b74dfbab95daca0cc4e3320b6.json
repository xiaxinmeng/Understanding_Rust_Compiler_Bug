{"sha": "37d24376c4bcb69b74dfbab95daca0cc4e3320b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdkMjQzNzZjNGJjYjY5Yjc0ZGZiYWI5NWRhY2EwY2M0ZTMzMjBiNg==", "commit": {"author": {"name": "Douglas Gregor", "email": "doug.gregor@gmail.com", "date": "2008-02-11T18:58:16Z"}, "committer": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2008-02-11T18:58:16Z"}, "message": "re PR c++/35113 (g++.dg/ext/vector13.C doesn't work)\n\n2008-02-11  Douglas Gregor  <doug.gregor@gmail.com>\n\n       PR c++/35113\n       * tree.c (cp_build_qualified_type_real): When building a\n       cv-qualified array type, build it as a unique type with\n       build_cplus_array_type_1 and then adopt the unqualified type's\n       main variant.\n\nFrom-SVN: r132242", "tree": {"sha": "c298948c45413e7898e0f1947f2ba50cfd4b213f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c298948c45413e7898e0f1947f2ba50cfd4b213f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37d24376c4bcb69b74dfbab95daca0cc4e3320b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37d24376c4bcb69b74dfbab95daca0cc4e3320b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37d24376c4bcb69b74dfbab95daca0cc4e3320b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37d24376c4bcb69b74dfbab95daca0cc4e3320b6/comments", "author": {"login": "DougGregor", "id": 989428, "node_id": "MDQ6VXNlcjk4OTQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/989428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DougGregor", "html_url": "https://github.com/DougGregor", "followers_url": "https://api.github.com/users/DougGregor/followers", "following_url": "https://api.github.com/users/DougGregor/following{/other_user}", "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}", "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions", "organizations_url": "https://api.github.com/users/DougGregor/orgs", "repos_url": "https://api.github.com/users/DougGregor/repos", "events_url": "https://api.github.com/users/DougGregor/events{/privacy}", "received_events_url": "https://api.github.com/users/DougGregor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5fd38b882f15bfa0100d328f147f4fcc763ff1bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fd38b882f15bfa0100d328f147f4fcc763ff1bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fd38b882f15bfa0100d328f147f4fcc763ff1bb"}], "stats": {"total": 74, "additions": 34, "deletions": 40}, "files": [{"sha": "1e26a168137101fcc1ff5465b734e0b49ef9f3d1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d24376c4bcb69b74dfbab95daca0cc4e3320b6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d24376c4bcb69b74dfbab95daca0cc4e3320b6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=37d24376c4bcb69b74dfbab95daca0cc4e3320b6", "patch": "@@ -1,3 +1,11 @@\n+2008-02-11  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+       PR c++/35113\n+       * tree.c (cp_build_qualified_type_real): When building a\n+       cv-qualified array type, build it as a unique type with\n+       build_cplus_array_type_1 and then adopt the unqualified type's\n+       main variant.\n+\t\n 2008-02-11  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR c++/35077"}, {"sha": "44a2e7899b155459edf9f9a7f1741da7409ca2e4", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 26, "deletions": 40, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d24376c4bcb69b74dfbab95daca0cc4e3320b6/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d24376c4bcb69b74dfbab95daca0cc4e3320b6/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=37d24376c4bcb69b74dfbab95daca0cc4e3320b6", "patch": "@@ -726,47 +726,33 @@ cp_build_qualified_type_real (tree type,\n \t  break;\n \n       if (!t)\n-\t{\n-\t  tree index_type = TYPE_DOMAIN (type);\n-\t  void **e;\n-\t  cplus_array_info cai;\n-\t  hashval_t hash;\n-\n-\t  if (cplus_array_htab == NULL)\n-\t    cplus_array_htab = htab_create_ggc (61, &cplus_array_hash,\n-\t\t\t\t\t\t&cplus_array_compare, \n-\t\t\t\t\t\tNULL);\n-\n-\t  hash = (htab_hash_pointer (element_type)\n-\t\t  ^ htab_hash_pointer (index_type));\n-\t  cai.type = element_type;\n-\t  cai.domain = index_type;\n-\t  \n-\t  e = htab_find_slot_with_hash (cplus_array_htab, &cai, hash, INSERT);\n-\t  if (*e)\n-\t    /* We have found the type: we're done. */\n-\t    return (tree) *e;\n-\n-\t  /* Build a new array type and add it into the table.  */\n-\t  t = build_variant_type_copy (type);\n-\t  TREE_TYPE (t) = element_type;\n-\t  *e = t;\n+      {\n+\tt = build_cplus_array_type_1 (element_type, TYPE_DOMAIN (type));\n \n-\t  /* Set the canonical type for this new node.  */\n-\t  if (TYPE_STRUCTURAL_EQUALITY_P (element_type)\n-\t      || (index_type && TYPE_STRUCTURAL_EQUALITY_P (index_type)))\n-\t    SET_TYPE_STRUCTURAL_EQUALITY (t);\n-\t  else if (TYPE_CANONICAL (element_type) != element_type\n-\t\t   || (index_type \n-\t\t       && TYPE_CANONICAL (index_type) != index_type)\n-\t\t   || TYPE_CANONICAL (type) != type)\n-\t    TYPE_CANONICAL (t)\n-\t      = build_cplus_array_type\n-\t         (TYPE_CANONICAL (element_type),\n-\t\t  index_type? TYPE_CANONICAL (index_type) : index_type);\n-\t  else\n-\t    TYPE_CANONICAL (t) = t;\n-\t}\n+\tif (TYPE_MAIN_VARIANT (t) != TYPE_MAIN_VARIANT (type))\n+\t  {\n+\t    /* Set the main variant of the newly-created ARRAY_TYPE\n+\t       (with cv-qualified element type) to the main variant of\n+\t       the unqualified ARRAY_TYPE we started with.  */\n+\t    tree last_variant = t;\n+\t    tree m = TYPE_MAIN_VARIANT (type);\n+\n+\t    /* Find the last variant on the new ARRAY_TYPEs list of\n+\t       variants, setting the main variant of each of the other\n+\t       types to the main variant of our unqualified\n+\t       ARRAY_TYPE.  */\n+\t    while (TYPE_NEXT_VARIANT (last_variant))\n+\t      {\n+\t\tTYPE_MAIN_VARIANT (last_variant) = m;\n+\t\tlast_variant = TYPE_NEXT_VARIANT (last_variant);\n+\t      }\n+\n+\t    /* Splice in the newly-created variants.  */\n+\t    TYPE_NEXT_VARIANT (last_variant) = TYPE_NEXT_VARIANT (m);\n+\t    TYPE_NEXT_VARIANT (m) = t;\n+\t    TYPE_MAIN_VARIANT (last_variant) = m;\n+\t  }\n+      }\n \n       /* Even if we already had this variant, we update\n \t TYPE_NEEDS_CONSTRUCTING and TYPE_HAS_NONTRIVIAL_DESTRUCTOR in case"}]}