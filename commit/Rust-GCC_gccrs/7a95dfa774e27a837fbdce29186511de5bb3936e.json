{"sha": "7a95dfa774e27a837fbdce29186511de5bb3936e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E5NWRmYTc3NGUyN2E4MzdmYmRjZTI5MTg2NTExZGU1YmIzOTM2ZQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2017-04-28T13:41:35Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2017-04-28T13:41:35Z"}, "message": "Remove superfluous \"\" in dg-(error|warning|message|bogus)\n\nfind $(find -type d -name testsuite) -type f \\\n     | xargs sed -ri 's#(dg-(error|warning|message|bogus).*)\" \"\" \\}#\\1\" }#'\n\n2017-04-28  Tom de Vries  <tom@codesourcery.com>\n\n\t* g++.dg/abi/bitfield3.C: Remove superfluous \"\" in\n\tdg-(error|warning|message|bogus).\n\t* g++.dg/conversion/dr195-1.C: Same.\n\t* g++.dg/conversion/dr195.C: Same.\n\t* g++.dg/cpp0x/constexpr-reinterpret1.C: Same.\n\t* g++.dg/cpp0x/gen-attrs-14.C: Same.\n\t* g++.dg/cpp0x/inline-ns7.C: Same.\n\t* g++.dg/cpp0x/variadic105.C: Same.\n\t* g++.dg/cpp0x/variadic65.C: Same.\n\t* g++.dg/expr/call2.C: Same.\n\t* g++.dg/expr/member-of-incomplete-type-1.C: Same.\n\t* g++.dg/expr/pmf-1.C: Same.\n\t* g++.dg/ext/altivec-types-1.C: Same.\n\t* g++.dg/ext/altivec-types-2.C: Same.\n\t* g++.dg/ext/altivec-types-3.C: Same.\n\t* g++.dg/ext/attrib14.C: Same.\n\t* g++.dg/ext/complit1.C: Same.\n\t* g++.dg/ext/forscope2.C: Same.\n\t* g++.dg/ext/gnu-inline-global-reject.C: Same.\n\t* g++.dg/ext/label13.C: Same.\n\t* g++.dg/ext/member-attr.C: Same.\n\t* g++.dg/ext/visibility/anon7.C: Same.\n\t* g++.dg/ext/visibility/visibility-7.C: Same.\n\t* g++.dg/ext/vla2.C: Same.\n\t* g++.dg/inherit/access2.C: Same.\n\t* g++.dg/inherit/covariant12.C: Same.\n\t* g++.dg/inherit/covariant14.C: Same.\n\t* g++.dg/inherit/namespace-as-base.C: Same.\n\t* g++.dg/inherit/template-as-base.C: Same.\n\t* g++.dg/lookup/ambig1.C: Same.\n\t* g++.dg/lookup/ambig2.C: Same.\n\t* g++.dg/lookup/ambig3.C: Same.\n\t* g++.dg/lookup/class-member-1.C: Same.\n\t* g++.dg/lookup/conv-1.C: Same.\n\t* g++.dg/lookup/decl1.C: Same.\n\t* g++.dg/lookup/koenig1.C: Same.\n\t* g++.dg/lookup/scoped1.C: Same.\n\t* g++.dg/lookup/scoped2.C: Same.\n\t* g++.dg/lookup/two-stage4.C: Same.\n\t* g++.dg/lookup/used-before-declaration.C: Same.\n\t* g++.dg/lookup/using.C: Same.\n\t* g++.dg/lookup/using17.C: Same.\n\t* g++.dg/lookup/using2.C: Same.\n\t* g++.dg/other/abstract2.C: Same.\n\t* g++.dg/other/classkey1.C: Same.\n\t* g++.dg/other/component1.C: Same.\n\t* g++.dg/other/const1.C: Same.\n\t* g++.dg/other/const2.C: Same.\n\t* g++.dg/other/conversion1.C: Same.\n\t* g++.dg/other/do1.C: Same.\n\t* g++.dg/other/error1.C: Same.\n\t* g++.dg/other/error10.C: Same.\n\t* g++.dg/other/error3.C: Same.\n\t* g++.dg/other/error4.C: Same.\n\t* g++.dg/other/error5.C: Same.\n\t* g++.dg/other/error8.C: Same.\n\t* g++.dg/other/error9.C: Same.\n\t* g++.dg/other/field1.C: Same.\n\t* g++.dg/other/init1.C: Same.\n\t* g++.dg/other/ptrmem2.C: Same.\n\t* g++.dg/other/return1.C: Same.\n\t* g++.dg/overload/builtin3.C: Same.\n\t* g++.dg/overload/error1.C: Same.\n\t* g++.dg/overload/error2.C: Same.\n\t* g++.dg/overload/koenig2.C: Same.\n\t* g++.dg/overload/pmf1.C: Same.\n\t* g++.dg/parse/args1.C: Same.\n\t* g++.dg/parse/attr3.C: Same.\n\t* g++.dg/parse/constant4.C: Same.\n\t* g++.dg/parse/crash10.C: Same.\n\t* g++.dg/parse/crash18.C: Same.\n\t* g++.dg/parse/crash19.C: Same.\n\t* g++.dg/parse/crash20.C: Same.\n\t* g++.dg/parse/crash21.C: Same.\n\t* g++.dg/parse/crash22.C: Same.\n\t* g++.dg/parse/crash32.C: Same.\n\t* g++.dg/parse/decl-specifier-1.C: Same.\n\t* g++.dg/parse/error58.C: Same.\n\t* g++.dg/parse/local-class1.C: Same.\n\t* g++.dg/parse/non-dependent2.C: Same.\n\t* g++.dg/parse/parameter-declaration-1.C: Same.\n\t* g++.dg/parse/ptrmem2.C: Same.\n\t* g++.dg/parse/ptrmem3.C: Same.\n\t* g++.dg/parse/saved1.C: Same.\n\t* g++.dg/tc1/dr101.C: Same.\n\t* g++.dg/tc1/dr142.C: Same.\n\t* g++.dg/tc1/dr176.C: Same.\n\t* g++.dg/template/conv4.C: Same.\n\t* g++.dg/template/crash56.C: Same.\n\t* g++.dg/template/dependent-expr2.C: Same.\n\t* g++.dg/template/error1.C: Same.\n\t* g++.dg/template/error2.C: Same.\n\t* g++.dg/template/explicit6.C: Same.\n\t* g++.dg/template/init-list.C: Same.\n\t* g++.dg/template/local1.C: Same.\n\t* g++.dg/template/lookup2.C: Same.\n\t* g++.dg/template/meminit2.C: Same.\n\t* g++.dg/template/nontype25.C: Same.\n\t* g++.dg/template/ptrmem2.C: Same.\n\t* g++.dg/template/qualttp19.C: Same.\n\t* g++.dg/template/qualttp20.C: Same.\n\t* g++.dg/template/ttp3.C: Same.\n\t* g++.dg/template/unify4.C: Same.\n\t* g++.dg/template/unify6.C: Same.\n\t* g++.dg/template/unify7.C: Same.\n\t* g++.dg/template/warn1.C: Same.\n\t* g++.dg/tree-ssa/dom-invalid.C: Same.\n\t* g++.dg/ubsan/shift-1.C: Same.\n\t* g++.dg/warn/Wunused-2.C: Same.\n\t* g++.dg/warn/Wunused-4.C: Same.\n\t* g++.dg/warn/Wunused-6.C: Same.\n\t* g++.dg/warn/deprecated-6.C: Same.\n\t* g++.dg/warn/deprecated.C: Same.\n\t* g++.dg/warn/effc1.C: Same.\n\t* g++.dg/warn/effc3.C: Same.\n\t* g++.dg/warn/incomplete1.C: Same.\n\t* g++.dg/warn/inline1.C: Same.\n\t* g++.dg/warn/noeffect2.C: Same.\n\t* g++.dg/warn/noeffect4.C: Same.\n\t* g++.dg/warn/oldcast1.C: Same.\n\t* g++.dg/warn/sentinel.C: Same.\n\t* g++.dg/warn/unit-1.C: Same.\n\t* g++.old-deja/g++.pt/inherit2.C: Same.\n\t* g++.old-deja/g++.pt/overload8.C: Same.\n\t* gcc.dg/20000926-1.c: Same.\n\t* gcc.dg/20040223-1.c: Same.\n\t* gcc.dg/Warray-bounds-7.c: Same.\n\t* gcc.dg/alias-1.c: Same.\n\t* gcc.dg/alias-12.c: Same.\n\t* gcc.dg/alias-13.c: Same.\n\t* gcc.dg/alias-2.c: Same.\n\t* gcc.dg/array-13.c: Same.\n\t* gcc.dg/array-4.c: Same.\n\t* gcc.dg/attr-ifunc-2.c: Same.\n\t* gcc.dg/attr-invalid.c: Same.\n\t* gcc.dg/attr-noinline.c: Same.\n\t* gcc.dg/bitfld-2.c: Same.\n\t* gcc.dg/c90-const-expr-7.c: Same.\n\t* gcc.dg/c99-const-expr-7.c: Same.\n\t* gcc.dg/cpp/20000625-1.c: Same.\n\t* gcc.dg/cpp/charconst-4.c: Same.\n\t* gcc.dg/cpp/include2.c: Same.\n\t* gcc.dg/cpp/include2a.c: Same.\n\t* gcc.dg/decl-4.c: Same.\n\t* gcc.dg/deprecated-4.c: Same.\n\t* gcc.dg/deprecated.c: Same.\n\t* gcc.dg/dfp/altivec-types.c: Same.\n\t* gcc.dg/float-range-1.c: Same.\n\t* gcc.dg/pack-test-3.c: Same.\n\t* gcc.dg/pr11492.c: Same.\n\t* gcc.dg/pr15360-1.c: Same.\n\t* gcc.dg/pr37908.c: Same.\n\t* gcc.dg/pr53265.c: Same.\n\t* gcc.dg/pr57287-2.c: Same.\n\t* gcc.dg/pr57287.c: Same.\n\t* gcc.dg/redecl-1.c: Same.\n\t* gcc.dg/sync-3.c: Same.\n\t* gcc.dg/two-types-1.c: Same.\n\t* gcc.dg/two-types-2.c: Same.\n\t* gcc.dg/two-types-4.c: Same.\n\t* gcc.dg/two-types-5.c: Same.\n\t* gcc.dg/two-types-6.c: Same.\n\t* gcc.dg/two-types-7.c: Same.\n\t* gcc.dg/two-types-8.c: Same.\n\t* gcc.dg/two-types-9.c: Same.\n\t* gcc.dg/uninit-I.c: Same.\n\t* gcc.dg/uninit-pr19430.c: Same.\n\t* gcc.dg/visibility-7.c: Same.\n\t* gcc.dg/winline-10.c: Same.\n\t* gcc.dg/winline-2.c: Same.\n\t* gcc.dg/winline-3.c: Same.\n\t* gcc.dg/winline-9.c: Same.\n\t* gcc.target/i386/attr-returns_twice-1.c: Same.\n\t* gcc.target/i386/chkp-const-check-2.c: Same.\n\t* gcc.target/i386/chkp-label-address.c: Same.\n\t* gcc.target/i386/chkp-remove-bndint-2.c: Same.\n\t* gcc.target/i386/pr39162.c: Same.\n\t* gcc.target/i386/sse-5.c: Same.\n\t* gcc.target/powerpc/altivec-types-1.c: Same.\n\t* gcc.target/powerpc/altivec-types-2.c: Same.\n\t* gcc.target/powerpc/altivec-types-3.c: Same.\n\t* gcc.target/powerpc/float128-mix.c: Same.\n\t* gcc.target/powerpc/no-r11-3.c: Same.\n\t* gcc.target/spu/Wmain.c: Same.\n\t* gcc.target/spu/ea/errors2.c: Same.\n\t* gfortran.dg/assignment_1.f90: Same.\n\t* gfortran.dg/common_3.f90: Same.\n\t* gfortran.dg/der_io_1.f90: Same.\n\t* gfortran.dg/g77/20030326-1.f: Same.\n\t* gfortran.dg/g77/9263.f: Same.\n\t* gfortran.dg/g77/960317-1.f: Same.\n\t* gfortran.dg/g77/970625-2.f: Same.\n\t* gfortran.dg/g77/980615-0.f: Same.\n\t* gfortran.dg/g77/check0.f: Same.\n\t* gfortran.dg/g77/dnrm2.f: Same.\n\t* gfortran.dg/g77/pr9258.f: Same.\n\t* gfortran.dg/ichar_1.f90: Same.\n\t* gfortran.dg/interface_1.f90: Same.\n\t* gfortran.dg/namelist_1.f90: Same.\n\t* gfortran.dg/namelist_2.f90: Same.\n\t* gfortran.dg/namelist_3.f90: Same.\n\t* gfortran.dg/namelist_print_2.f: Same.\n\t* gfortran.dg/oldstyle_1.f90: Same.\n\t* gfortran.dg/runtime_warning_1.f90: Same.\n\t* gfortran.dg/underflow.f90: Same.\n\t* gnat.dg/specs/integer_value.ads: Same.\n\t* obj-c++.dg/fsf-package-0.m: Same.\n\t* objc.dg/two-types-1.m: Same.\n\nFrom-SVN: r247389", "tree": {"sha": "4321780223d07a58de26bdb162adaad9ba361af9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4321780223d07a58de26bdb162adaad9ba361af9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a95dfa774e27a837fbdce29186511de5bb3936e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a95dfa774e27a837fbdce29186511de5bb3936e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a95dfa774e27a837fbdce29186511de5bb3936e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a95dfa774e27a837fbdce29186511de5bb3936e/comments", "author": null, "committer": null, "parents": [{"sha": "b6dc26ba9b701d2f3f5b72fe51e97f428bab3e7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6dc26ba9b701d2f3f5b72fe51e97f428bab3e7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6dc26ba9b701d2f3f5b72fe51e97f428bab3e7a"}], "stats": {"total": 1461, "additions": 836, "deletions": 625}, "files": [{"sha": "499f7808a1efed02406c2cab3594c20bb539f20d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 211, "deletions": 0, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -1,3 +1,214 @@\n+2017-04-28  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* g++.dg/abi/bitfield3.C: Remove superfluous \"\" in\n+\tdg-(error|warning|message|bogus).\n+\t* g++.dg/conversion/dr195-1.C: Same.\n+\t* g++.dg/conversion/dr195.C: Same.\n+\t* g++.dg/cpp0x/constexpr-reinterpret1.C: Same.\n+\t* g++.dg/cpp0x/gen-attrs-14.C: Same.\n+\t* g++.dg/cpp0x/inline-ns7.C: Same.\n+\t* g++.dg/cpp0x/variadic105.C: Same.\n+\t* g++.dg/cpp0x/variadic65.C: Same.\n+\t* g++.dg/expr/call2.C: Same.\n+\t* g++.dg/expr/member-of-incomplete-type-1.C: Same.\n+\t* g++.dg/expr/pmf-1.C: Same.\n+\t* g++.dg/ext/altivec-types-1.C: Same.\n+\t* g++.dg/ext/altivec-types-2.C: Same.\n+\t* g++.dg/ext/altivec-types-3.C: Same.\n+\t* g++.dg/ext/attrib14.C: Same.\n+\t* g++.dg/ext/complit1.C: Same.\n+\t* g++.dg/ext/forscope2.C: Same.\n+\t* g++.dg/ext/gnu-inline-global-reject.C: Same.\n+\t* g++.dg/ext/label13.C: Same.\n+\t* g++.dg/ext/member-attr.C: Same.\n+\t* g++.dg/ext/visibility/anon7.C: Same.\n+\t* g++.dg/ext/visibility/visibility-7.C: Same.\n+\t* g++.dg/ext/vla2.C: Same.\n+\t* g++.dg/inherit/access2.C: Same.\n+\t* g++.dg/inherit/covariant12.C: Same.\n+\t* g++.dg/inherit/covariant14.C: Same.\n+\t* g++.dg/inherit/namespace-as-base.C: Same.\n+\t* g++.dg/inherit/template-as-base.C: Same.\n+\t* g++.dg/lookup/ambig1.C: Same.\n+\t* g++.dg/lookup/ambig2.C: Same.\n+\t* g++.dg/lookup/ambig3.C: Same.\n+\t* g++.dg/lookup/class-member-1.C: Same.\n+\t* g++.dg/lookup/conv-1.C: Same.\n+\t* g++.dg/lookup/decl1.C: Same.\n+\t* g++.dg/lookup/koenig1.C: Same.\n+\t* g++.dg/lookup/scoped1.C: Same.\n+\t* g++.dg/lookup/scoped2.C: Same.\n+\t* g++.dg/lookup/two-stage4.C: Same.\n+\t* g++.dg/lookup/used-before-declaration.C: Same.\n+\t* g++.dg/lookup/using.C: Same.\n+\t* g++.dg/lookup/using17.C: Same.\n+\t* g++.dg/lookup/using2.C: Same.\n+\t* g++.dg/other/abstract2.C: Same.\n+\t* g++.dg/other/classkey1.C: Same.\n+\t* g++.dg/other/component1.C: Same.\n+\t* g++.dg/other/const1.C: Same.\n+\t* g++.dg/other/const2.C: Same.\n+\t* g++.dg/other/conversion1.C: Same.\n+\t* g++.dg/other/do1.C: Same.\n+\t* g++.dg/other/error1.C: Same.\n+\t* g++.dg/other/error10.C: Same.\n+\t* g++.dg/other/error3.C: Same.\n+\t* g++.dg/other/error4.C: Same.\n+\t* g++.dg/other/error5.C: Same.\n+\t* g++.dg/other/error8.C: Same.\n+\t* g++.dg/other/error9.C: Same.\n+\t* g++.dg/other/field1.C: Same.\n+\t* g++.dg/other/init1.C: Same.\n+\t* g++.dg/other/ptrmem2.C: Same.\n+\t* g++.dg/other/return1.C: Same.\n+\t* g++.dg/overload/builtin3.C: Same.\n+\t* g++.dg/overload/error1.C: Same.\n+\t* g++.dg/overload/error2.C: Same.\n+\t* g++.dg/overload/koenig2.C: Same.\n+\t* g++.dg/overload/pmf1.C: Same.\n+\t* g++.dg/parse/args1.C: Same.\n+\t* g++.dg/parse/attr3.C: Same.\n+\t* g++.dg/parse/constant4.C: Same.\n+\t* g++.dg/parse/crash10.C: Same.\n+\t* g++.dg/parse/crash18.C: Same.\n+\t* g++.dg/parse/crash19.C: Same.\n+\t* g++.dg/parse/crash20.C: Same.\n+\t* g++.dg/parse/crash21.C: Same.\n+\t* g++.dg/parse/crash22.C: Same.\n+\t* g++.dg/parse/crash32.C: Same.\n+\t* g++.dg/parse/decl-specifier-1.C: Same.\n+\t* g++.dg/parse/error58.C: Same.\n+\t* g++.dg/parse/local-class1.C: Same.\n+\t* g++.dg/parse/non-dependent2.C: Same.\n+\t* g++.dg/parse/parameter-declaration-1.C: Same.\n+\t* g++.dg/parse/ptrmem2.C: Same.\n+\t* g++.dg/parse/ptrmem3.C: Same.\n+\t* g++.dg/parse/saved1.C: Same.\n+\t* g++.dg/tc1/dr101.C: Same.\n+\t* g++.dg/tc1/dr142.C: Same.\n+\t* g++.dg/tc1/dr176.C: Same.\n+\t* g++.dg/template/conv4.C: Same.\n+\t* g++.dg/template/crash56.C: Same.\n+\t* g++.dg/template/dependent-expr2.C: Same.\n+\t* g++.dg/template/error1.C: Same.\n+\t* g++.dg/template/error2.C: Same.\n+\t* g++.dg/template/explicit6.C: Same.\n+\t* g++.dg/template/init-list.C: Same.\n+\t* g++.dg/template/local1.C: Same.\n+\t* g++.dg/template/lookup2.C: Same.\n+\t* g++.dg/template/meminit2.C: Same.\n+\t* g++.dg/template/nontype25.C: Same.\n+\t* g++.dg/template/ptrmem2.C: Same.\n+\t* g++.dg/template/qualttp19.C: Same.\n+\t* g++.dg/template/qualttp20.C: Same.\n+\t* g++.dg/template/ttp3.C: Same.\n+\t* g++.dg/template/unify4.C: Same.\n+\t* g++.dg/template/unify6.C: Same.\n+\t* g++.dg/template/unify7.C: Same.\n+\t* g++.dg/template/warn1.C: Same.\n+\t* g++.dg/tree-ssa/dom-invalid.C: Same.\n+\t* g++.dg/ubsan/shift-1.C: Same.\n+\t* g++.dg/warn/Wunused-2.C: Same.\n+\t* g++.dg/warn/Wunused-4.C: Same.\n+\t* g++.dg/warn/Wunused-6.C: Same.\n+\t* g++.dg/warn/deprecated-6.C: Same.\n+\t* g++.dg/warn/deprecated.C: Same.\n+\t* g++.dg/warn/effc1.C: Same.\n+\t* g++.dg/warn/effc3.C: Same.\n+\t* g++.dg/warn/incomplete1.C: Same.\n+\t* g++.dg/warn/inline1.C: Same.\n+\t* g++.dg/warn/noeffect2.C: Same.\n+\t* g++.dg/warn/noeffect4.C: Same.\n+\t* g++.dg/warn/oldcast1.C: Same.\n+\t* g++.dg/warn/sentinel.C: Same.\n+\t* g++.dg/warn/unit-1.C: Same.\n+\t* g++.old-deja/g++.pt/inherit2.C: Same.\n+\t* g++.old-deja/g++.pt/overload8.C: Same.\n+\t* gcc.dg/20000926-1.c: Same.\n+\t* gcc.dg/20040223-1.c: Same.\n+\t* gcc.dg/Warray-bounds-7.c: Same.\n+\t* gcc.dg/alias-1.c: Same.\n+\t* gcc.dg/alias-12.c: Same.\n+\t* gcc.dg/alias-13.c: Same.\n+\t* gcc.dg/alias-2.c: Same.\n+\t* gcc.dg/array-13.c: Same.\n+\t* gcc.dg/array-4.c: Same.\n+\t* gcc.dg/attr-ifunc-2.c: Same.\n+\t* gcc.dg/attr-invalid.c: Same.\n+\t* gcc.dg/attr-noinline.c: Same.\n+\t* gcc.dg/bitfld-2.c: Same.\n+\t* gcc.dg/c90-const-expr-7.c: Same.\n+\t* gcc.dg/c99-const-expr-7.c: Same.\n+\t* gcc.dg/cpp/20000625-1.c: Same.\n+\t* gcc.dg/cpp/charconst-4.c: Same.\n+\t* gcc.dg/cpp/include2.c: Same.\n+\t* gcc.dg/cpp/include2a.c: Same.\n+\t* gcc.dg/decl-4.c: Same.\n+\t* gcc.dg/deprecated-4.c: Same.\n+\t* gcc.dg/deprecated.c: Same.\n+\t* gcc.dg/dfp/altivec-types.c: Same.\n+\t* gcc.dg/float-range-1.c: Same.\n+\t* gcc.dg/pack-test-3.c: Same.\n+\t* gcc.dg/pr11492.c: Same.\n+\t* gcc.dg/pr15360-1.c: Same.\n+\t* gcc.dg/pr37908.c: Same.\n+\t* gcc.dg/pr53265.c: Same.\n+\t* gcc.dg/pr57287-2.c: Same.\n+\t* gcc.dg/pr57287.c: Same.\n+\t* gcc.dg/redecl-1.c: Same.\n+\t* gcc.dg/sync-3.c: Same.\n+\t* gcc.dg/two-types-1.c: Same.\n+\t* gcc.dg/two-types-2.c: Same.\n+\t* gcc.dg/two-types-4.c: Same.\n+\t* gcc.dg/two-types-5.c: Same.\n+\t* gcc.dg/two-types-6.c: Same.\n+\t* gcc.dg/two-types-7.c: Same.\n+\t* gcc.dg/two-types-8.c: Same.\n+\t* gcc.dg/two-types-9.c: Same.\n+\t* gcc.dg/uninit-I.c: Same.\n+\t* gcc.dg/uninit-pr19430.c: Same.\n+\t* gcc.dg/visibility-7.c: Same.\n+\t* gcc.dg/winline-10.c: Same.\n+\t* gcc.dg/winline-2.c: Same.\n+\t* gcc.dg/winline-3.c: Same.\n+\t* gcc.dg/winline-9.c: Same.\n+\t* gcc.target/i386/attr-returns_twice-1.c: Same.\n+\t* gcc.target/i386/chkp-const-check-2.c: Same.\n+\t* gcc.target/i386/chkp-label-address.c: Same.\n+\t* gcc.target/i386/chkp-remove-bndint-2.c: Same.\n+\t* gcc.target/i386/pr39162.c: Same.\n+\t* gcc.target/i386/sse-5.c: Same.\n+\t* gcc.target/powerpc/altivec-types-1.c: Same.\n+\t* gcc.target/powerpc/altivec-types-2.c: Same.\n+\t* gcc.target/powerpc/altivec-types-3.c: Same.\n+\t* gcc.target/powerpc/float128-mix.c: Same.\n+\t* gcc.target/powerpc/no-r11-3.c: Same.\n+\t* gcc.target/spu/Wmain.c: Same.\n+\t* gcc.target/spu/ea/errors2.c: Same.\n+\t* gfortran.dg/assignment_1.f90: Same.\n+\t* gfortran.dg/common_3.f90: Same.\n+\t* gfortran.dg/der_io_1.f90: Same.\n+\t* gfortran.dg/g77/20030326-1.f: Same.\n+\t* gfortran.dg/g77/9263.f: Same.\n+\t* gfortran.dg/g77/960317-1.f: Same.\n+\t* gfortran.dg/g77/970625-2.f: Same.\n+\t* gfortran.dg/g77/980615-0.f: Same.\n+\t* gfortran.dg/g77/check0.f: Same.\n+\t* gfortran.dg/g77/dnrm2.f: Same.\n+\t* gfortran.dg/g77/pr9258.f: Same.\n+\t* gfortran.dg/ichar_1.f90: Same.\n+\t* gfortran.dg/interface_1.f90: Same.\n+\t* gfortran.dg/namelist_1.f90: Same.\n+\t* gfortran.dg/namelist_2.f90: Same.\n+\t* gfortran.dg/namelist_3.f90: Same.\n+\t* gfortran.dg/namelist_print_2.f: Same.\n+\t* gfortran.dg/oldstyle_1.f90: Same.\n+\t* gfortran.dg/runtime_warning_1.f90: Same.\n+\t* gfortran.dg/underflow.f90: Same.\n+\t* gnat.dg/specs/integer_value.ads: Same.\n+\t* obj-c++.dg/fsf-package-0.m: Same.\n+\t* objc.dg/two-types-1.m: Same.\n+\n 2017-04-28  Martin Liska  <mliska@suse.cz>\n \n \tPR gcov-profile/79891"}, {"sha": "fe9528f0b32d7d7c29bc5236b28f67c51324a5ff", "filename": "gcc/testsuite/g++.dg/abi/bitfield3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield3.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -11,7 +11,7 @@\n struct A\n {\n   char a;\n-  int b : 224;\t// { dg-warning \"exceeds its type\" \"\" }\n+  int b : 224;\t// { dg-warning \"exceeds its type\" }\n   char c;\n } a, a4[4];\n \n@@ -39,7 +39,7 @@ struct D\n struct E\n {\n   char m;\n-  long long n : 160;\t// { dg-warning \"exceeds its type\" \"\" }\n+  long long n : 160;\t// { dg-warning \"exceeds its type\" }\n   char o;\n } e, e4[4];\n "}, {"sha": "8b3f2855a120de3c3b76869a0b166425071f33db", "filename": "gcc/testsuite/g++.dg/conversion/dr195-1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fdr195-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fdr195-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fdr195-1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -29,6 +29,6 @@ void foo ()\n   po = reinterpret_cast <PO>(pf);\n \n   /* These will never be ok, as they are implicit.  */\n-  pv = pf; // { dg-error \"invalid conversion\" \"\" }\n-  pf = pv; // { dg-error \"invalid conversion\" \"\" }\n+  pv = pf; // { dg-error \"invalid conversion\" }\n+  pf = pv; // { dg-error \"invalid conversion\" }\n }"}, {"sha": "f914214eb935c841732474d83d47699c8550fbde", "filename": "gcc/testsuite/g++.dg/conversion/dr195.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fdr195.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fdr195.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fdr195.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -27,6 +27,6 @@ void foo ()\n   po = reinterpret_cast <PO>(pf);\n \n   /* These will never be ok, as they are implicit.  */\n-  pv = pf; // { dg-error \"invalid conversion\" \"\" }\n-  pf = pv; // { dg-error \"invalid conversion\" \"\" }\n+  pv = pf; // { dg-error \"invalid conversion\" }\n+  pf = pv; // { dg-error \"invalid conversion\" }\n }"}, {"sha": "d2ee2bac22368e61198adc7a907e6afeabe14937", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-reinterpret1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-reinterpret1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-reinterpret1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-reinterpret1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -16,7 +16,7 @@ public:\n \n   constexpr static Inner & getInner()\n   /* I am surprised this is considered a constexpr */\n-  { return *((Inner *)4); } // { dg-error \"reinterpret_cast\" \"\" }\n+  { return *((Inner *)4); } // { dg-error \"reinterpret_cast\" }\n };\n \n B B::instance;"}, {"sha": "a512df71dd2252b6c141eaa3f7944b0fab19cc4f", "filename": "gcc/testsuite/g++.dg/cpp0x/gen-attrs-14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-14.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -3,7 +3,7 @@\n // The bogus attribute is ignored, but was in TYPE_ATTRIBUTES during\n // parsing of the class, causing some variants to have it and some not.\n \n-struct [[gnu::bogus]] A\t// { dg-warning \"ignored\" \"\" }\n+struct [[gnu::bogus]] A\t// { dg-warning \"ignored\" }\n {\n     virtual ~A();\n     void foo(const A&);"}, {"sha": "16240afc21c8db0a25d5ae65005f5e02d4bc4674", "filename": "gcc/testsuite/g++.dg/cpp0x/inline-ns7.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finline-ns7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finline-ns7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finline-ns7.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -5,12 +5,12 @@\n \n namespace foo {\n   inline namespace foo_impl {\n-    class T; // { dg-message \"T\" \"\" }\n+    class T; // { dg-message \"T\" }\n   }\n }\n namespace bar {\n   inline namespace bar_impl {\n-    class T; // { dg-message \"T\" \"\" }\n+    class T; // { dg-message \"T\" }\n   }\n   using namespace foo;\n }\n@@ -21,4 +21,4 @@ namespace baz {\n \n foo::T *t1;\n bar::T *t2;\n-baz::T *t3; // { dg-error \"(ambiguous|does not name a type)\" \"\" }\n+baz::T *t3; // { dg-error \"(ambiguous|does not name a type)\" }"}, {"sha": "1ffc0fc54be7f2e1f6042d3370c5f86a96bcf86f", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic105.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic105.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic105.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic105.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -20,6 +20,6 @@ struct call_sum {\n \n int main() {\n   // This shouldn't be an error; this is bug 35722.\n-  reverse<call_sum>(1,2);\t// { dg-bogus \"no match\" \"\" }\n+  reverse<call_sum>(1,2);\t// { dg-bogus \"no match\" }\n   // { dg-bogus \"sorry, unimplemented\" \"candidate explanation\" { target *-*-* } 6 }\n }"}, {"sha": "0eef2a5ed25dd715e2a22849beadcd8545467a62", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic65.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic65.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic65.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic65.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -5,7 +5,7 @@ template<typename T1 = unused, typename T2 = unused, typename T3 = unused,\n struct tuple {};\n \n template<typename... Args>\n-tuple<Args...> foo() { } // { dg-bogus \"cannot expand\" \"\" }\n+tuple<Args...> foo() { } // { dg-bogus \"cannot expand\" }\n \n int main()\n {"}, {"sha": "c4a2dac82ff8d3693e2c92cf6846e1ad15213923", "filename": "gcc/testsuite/g++.dg/expr/call2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcall2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcall2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcall2.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -10,5 +10,5 @@ class D;\n bool mm(D); \n  \n void g(C& f) { \n-  mm(f); // { dg-error \"parameter\" \"\" }\n+  mm(f); // { dg-error \"parameter\" }\n }"}, {"sha": "2f6a04c55bcfb6085faaa4e7fe2a174b53036bc6", "filename": "gcc/testsuite/g++.dg/expr/member-of-incomplete-type-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fmember-of-incomplete-type-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fmember-of-incomplete-type-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fmember-of-incomplete-type-1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -7,6 +7,6 @@ struct A;\n \n int main()\n {\n-    A::g();           // { dg-error \"incomplete\" \"\" }\n+    A::g();           // { dg-error \"incomplete\" }\n }\n "}, {"sha": "e6b72198281c7549fcc8e3ad75e6264db020a0cc", "filename": "gcc/testsuite/g++.dg/expr/pmf-1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fpmf-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fpmf-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fpmf-1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -7,13 +7,13 @@\n struct A \n {\n   void f();\n-  void foo(void (A::*)(int));       // { dg-message \"void A::foo|no known conversion\" \"\" }\n+  void foo(void (A::*)(int));       // { dg-message \"void A::foo|no known conversion\" }\n   template<typename T>\n     void g(T);\n   void h()\n   {\n     void (A::*p)() = &A::f;\n-    void (A::*q)() = &(A::f);       // { dg-error \"parenthesized\" \"\" }\n-    foo(&g<int>);                   // { dg-error \"no matching\" \"\" }\n+    void (A::*q)() = &(A::f);       // { dg-error \"parenthesized\" }\n+    foo(&g<int>);                   // { dg-error \"no matching\" }\n   }\n };"}, {"sha": "afcd5693d80db3f9f6872b325f953332e24289a1", "filename": "gcc/testsuite/g++.dg/ext/altivec-types-1.C", "status": "modified", "additions": 55, "deletions": 55, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-types-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-types-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-types-1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -27,62 +27,62 @@ __vector float vf;\n \n /* These should be rejected as invalid AltiVec types.  */\n \n-__vector bool vb;\t\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector long long vll;\t\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector unsigned long long vull;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector signed long long vsll;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector __bool long long vbll;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector long long int vlli;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector unsigned long long int vulli;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector signed long long int vslli;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector __bool long long int vblli;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector double vd1;\t\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector long double vld;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector _Complex float vcf;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector _Complex double vcd;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector _Complex long double vcld;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector _Complex signed char vcsc;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector _Complex unsigned char vcuc;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector _Complex short vcss;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector _Complex unsigned short vcus;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector _Complex int vcsi;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector _Complex unsigned int vcui;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector _Complex long vcsl;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector _Complex unsigned long vcul;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector _Complex long long vcsll;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector _Complex unsigned long long vcull; /* { dg-error \"AltiVec types\" \"\" } */\n-__vector __complex float v_cf;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector __complex double v_cd;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector __complex long double v_cld;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector __complex signed char v_csc;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector __complex unsigned char v_cuc;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector __complex short v_css;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector __complex unsigned short v_cus; /* { dg-error \"AltiVec types\" \"\" } */\n-__vector __complex int v_csi;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector __complex unsigned int v_cui;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector __complex long v_csl;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector __complex unsigned long v_cul;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector __complex long long v_csll;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector __complex unsigned long long v_cull; /* { dg-error \"AltiVec types\" \"\" } */\n+__vector bool vb;\t\t\t/* { dg-error \"AltiVec types\" } */\n+__vector long long vll;\t\t\t/* { dg-error \"AltiVec types\" } */\n+__vector unsigned long long vull;\t/* { dg-error \"AltiVec types\" } */\n+__vector signed long long vsll;\t\t/* { dg-error \"AltiVec types\" } */\n+__vector __bool long long vbll;\t\t/* { dg-error \"AltiVec types\" } */\n+__vector long long int vlli;\t\t/* { dg-error \"AltiVec types\" } */\n+__vector unsigned long long int vulli;\t/* { dg-error \"AltiVec types\" } */\n+__vector signed long long int vslli;\t/* { dg-error \"AltiVec types\" } */\n+__vector __bool long long int vblli;\t/* { dg-error \"AltiVec types\" } */\n+__vector double vd1;\t\t\t/* { dg-error \"AltiVec types\" } */\n+__vector long double vld;\t\t/* { dg-error \"AltiVec types\" } */\n+__vector _Complex float vcf;\t\t/* { dg-error \"AltiVec types\" } */\n+__vector _Complex double vcd;\t\t/* { dg-error \"AltiVec types\" } */\n+__vector _Complex long double vcld;\t/* { dg-error \"AltiVec types\" } */\n+__vector _Complex signed char vcsc;\t/* { dg-error \"AltiVec types\" } */\n+__vector _Complex unsigned char vcuc;\t/* { dg-error \"AltiVec types\" } */\n+__vector _Complex short vcss;\t\t/* { dg-error \"AltiVec types\" } */\n+__vector _Complex unsigned short vcus;\t/* { dg-error \"AltiVec types\" } */\n+__vector _Complex int vcsi;\t\t/* { dg-error \"AltiVec types\" } */\n+__vector _Complex unsigned int vcui;\t/* { dg-error \"AltiVec types\" } */\n+__vector _Complex long vcsl;\t\t/* { dg-error \"AltiVec types\" } */\n+__vector _Complex unsigned long vcul;\t/* { dg-error \"AltiVec types\" } */\n+__vector _Complex long long vcsll;\t/* { dg-error \"AltiVec types\" } */\n+__vector _Complex unsigned long long vcull; /* { dg-error \"AltiVec types\" } */\n+__vector __complex float v_cf;\t\t/* { dg-error \"AltiVec types\" } */\n+__vector __complex double v_cd;\t\t/* { dg-error \"AltiVec types\" } */\n+__vector __complex long double v_cld;\t/* { dg-error \"AltiVec types\" } */\n+__vector __complex signed char v_csc;\t/* { dg-error \"AltiVec types\" } */\n+__vector __complex unsigned char v_cuc;\t/* { dg-error \"AltiVec types\" } */\n+__vector __complex short v_css;\t\t/* { dg-error \"AltiVec types\" } */\n+__vector __complex unsigned short v_cus; /* { dg-error \"AltiVec types\" } */\n+__vector __complex int v_csi;\t\t/* { dg-error \"AltiVec types\" } */\n+__vector __complex unsigned int v_cui;\t/* { dg-error \"AltiVec types\" } */\n+__vector __complex long v_csl;\t\t/* { dg-error \"AltiVec types\" } */\n+__vector __complex unsigned long v_cul;\t/* { dg-error \"AltiVec types\" } */\n+__vector __complex long long v_csll;\t/* { dg-error \"AltiVec types\" } */\n+__vector __complex unsigned long long v_cull; /* { dg-error \"AltiVec types\" } */\n \n /* These should be rejected because the component types are invalid.  We\n    don't care about the actual error messages here.  */\n \n-__vector __bool unsigned char vbuc;\t/* { dg-error \"\" \"\" } */\n-__vector __bool signed char vbsc;\t/* { dg-error \"\" \"\" } */\n-__vector __bool unsigned short vbuh;\t/* { dg-error \"\" \"\" } */\n-__vector __bool signed short vbsh;\t/* { dg-error \"\" \"\" } */\n-__vector __bool unsigned int vbui;\t/* { dg-error \"\" \"\" } */\n-__vector __bool signed int vbsi;\t/* { dg-error \"\" \"\" } */\n-__vector __bool unsigned vbuj;\t\t/* { dg-error \"\" \"\" } */\n-__vector __bool signed vbsj;\t\t/* { dg-error \"\" \"\" } */\n-__vector signed float vsf;\t\t/* { dg-error \"\" \"\" } */\n-__vector unsigned float vuf;\t\t/* { dg-error \"\" \"\" } */\n-__vector short float vsf;\t\t/* { dg-error \"\" \"\" } */\n-__vector signed double vsd;\t\t/* { dg-error \"\" \"\" } */\n-__vector unsigned double vud;\t\t/* { dg-error \"\" \"\" } */\n-__vector short double vsd;\t\t/* { dg-error \"\" \"\" } */\n-__vector __bool float vbf;\t\t/* { dg-error \"\" \"\" } */\n-__vector __bool double vbd;\t\t/* { dg-error \"\" \"\" } */\n-__vector __bool short float blf;\t/* { dg-error \"\" \"\" } */\n-__vector __bool short double vlbd;\t/* { dg-error \"\" \"\" } */\n+__vector __bool unsigned char vbuc;\t/* { dg-error \"\" } */\n+__vector __bool signed char vbsc;\t/* { dg-error \"\" } */\n+__vector __bool unsigned short vbuh;\t/* { dg-error \"\" } */\n+__vector __bool signed short vbsh;\t/* { dg-error \"\" } */\n+__vector __bool unsigned int vbui;\t/* { dg-error \"\" } */\n+__vector __bool signed int vbsi;\t/* { dg-error \"\" } */\n+__vector __bool unsigned vbuj;\t\t/* { dg-error \"\" } */\n+__vector __bool signed vbsj;\t\t/* { dg-error \"\" } */\n+__vector signed float vsf;\t\t/* { dg-error \"\" } */\n+__vector unsigned float vuf;\t\t/* { dg-error \"\" } */\n+__vector short float vsf;\t\t/* { dg-error \"\" } */\n+__vector signed double vsd;\t\t/* { dg-error \"\" } */\n+__vector unsigned double vud;\t\t/* { dg-error \"\" } */\n+__vector short double vsd;\t\t/* { dg-error \"\" } */\n+__vector __bool float vbf;\t\t/* { dg-error \"\" } */\n+__vector __bool double vbd;\t\t/* { dg-error \"\" } */\n+__vector __bool short float blf;\t/* { dg-error \"\" } */\n+__vector __bool short double vlbd;\t/* { dg-error \"\" } */"}, {"sha": "4df12da0b195837ab8ac85b44d82fded5e2d480b", "filename": "gcc/testsuite/g++.dg/ext/altivec-types-2.C", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-types-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-types-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-types-2.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -5,10 +5,10 @@\n \n /* These should get warnings for 32-bit code.  */\n \n-__vector long vl;\t\t\t/* { dg-warning \"deprecated\" \"\" } */\n-__vector unsigned long vul;\t\t/* { dg-warning \"deprecated\" \"\" } */\n-__vector signed long vsl;\t\t/* { dg-warning \"deprecated\" \"\" } */\n-__vector __bool long int vbli;\t\t/* { dg-warning \"deprecated\" \"\" } */\n-__vector long int vli;\t\t\t/* { dg-warning \"deprecated\" \"\" } */\n-__vector unsigned long int vuli;\t/* { dg-warning \"deprecated\" \"\" } */\n-__vector signed long int vsli;\t\t/* { dg-warning \"deprecated\" \"\" } */\n+__vector long vl;\t\t\t/* { dg-warning \"deprecated\" } */\n+__vector unsigned long vul;\t\t/* { dg-warning \"deprecated\" } */\n+__vector signed long vsl;\t\t/* { dg-warning \"deprecated\" } */\n+__vector __bool long int vbli;\t\t/* { dg-warning \"deprecated\" } */\n+__vector long int vli;\t\t\t/* { dg-warning \"deprecated\" } */\n+__vector unsigned long int vuli;\t/* { dg-warning \"deprecated\" } */\n+__vector signed long int vsli;\t\t/* { dg-warning \"deprecated\" } */"}, {"sha": "755de736477c30078219347dfa1c7edfdbb78840", "filename": "gcc/testsuite/g++.dg/ext/altivec-types-3.C", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-types-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-types-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-types-3.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -5,10 +5,10 @@\n \n /* These should be rejected for 64-bit code.  */\n \n-__vector long vl;\t\t\t/* { dg-error \"invalid for 64\" \"\" } */\n-__vector unsigned long vul;\t\t/* { dg-error \"invalid for 64\" \"\" } */\n-__vector signed long vsl;\t\t/* { dg-error \"invalid for 64\" \"\" } */\n-__vector __bool long int vbli;\t\t/* { dg-error \"invalid for 64\" \"\" } */\n-__vector long int vli;\t\t\t/* { dg-error \"invalid for 64\" \"\" } */\n-__vector unsigned long int vuli;\t/* { dg-error \"invalid for 64\" \"\" } */\n-__vector signed long int vsli;\t\t/* { dg-error \"invalid for 64\" \"\" } */\n+__vector long vl;\t\t\t/* { dg-error \"invalid for 64\" } */\n+__vector unsigned long vul;\t\t/* { dg-error \"invalid for 64\" } */\n+__vector signed long vsl;\t\t/* { dg-error \"invalid for 64\" } */\n+__vector __bool long int vbli;\t\t/* { dg-error \"invalid for 64\" } */\n+__vector long int vli;\t\t\t/* { dg-error \"invalid for 64\" } */\n+__vector unsigned long int vuli;\t/* { dg-error \"invalid for 64\" } */\n+__vector signed long int vsli;\t\t/* { dg-error \"invalid for 64\" } */"}, {"sha": "9db1f39e6ec4b67b4187f5ab8b8e7afb9d4eab4a", "filename": "gcc/testsuite/g++.dg/ext/attrib14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib14.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -2,7 +2,7 @@\n // The bogus attribute is ignored, but was in TYPE_ATTRIBUTES during\n // parsing of the class, causing some variants to have it and some not.\n \n-struct __attribute__((bogus)) A\t// { dg-warning \"ignored\" \"\" }\n+struct __attribute__((bogus)) A\t// { dg-warning \"ignored\" }\n {\n     virtual ~A();\n     void foo(const A&);"}, {"sha": "1e4d08fd869446cad12386e858951b3a7c4573b9", "filename": "gcc/testsuite/g++.dg/ext/complit1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -11,6 +11,6 @@ public:\n };\n \n Foo::Foo(int v0, int v1)\n-  : val_((int[]) {v0, v1})  // { dg-error \"\" \"\" }\n+  : val_((int[]) {v0, v1})  // { dg-error \"\" }\n {\n }"}, {"sha": "460b2400a2729f86932ae570a4c38b8a3184df2c", "filename": "gcc/testsuite/g++.dg/ext/forscope2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fforscope2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fforscope2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fforscope2.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -16,12 +16,12 @@ struct A\n \n void Go( )\n {\n-  for (int i = 1;;)\t// { dg-warning \"using obsolete binding\" \"\" }\n+  for (int i = 1;;)\t// { dg-warning \"using obsolete binding\" }\n     {\n       switch (1) {\n       default: {}\n       }\n       A d;\n     }\n-  i;  // { dg-warning \"name lookup\" \"\" }\n+  i;  // { dg-warning \"name lookup\" }\n }"}, {"sha": "d7f8074d66a8eeaf1e1cf704c5c8a8139e803ae3", "filename": "gcc/testsuite/g++.dg/ext/gnu-inline-global-reject.C", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-global-reject.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-global-reject.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-global-reject.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -10,47 +10,47 @@\n \n #undef fn\n #define fn pfx(func_decl_inline_before)\n-decl(inline, fn) // { dg-message \"previous\" \"\" }\n-gnuindef(fn, 0) // { dg-error \"redeclared\" \"\" }\n+decl(inline, fn) // { dg-message \"previous\" }\n+gnuindef(fn, 0) // { dg-error \"redeclared\" }\n \n #undef fn\n #define fn pfx(func_decl_inline_after)\n-gnuindef(fn, 0) // { dg-message \"previous\" \"\" }\n-decl(inline, fn) // { dg-error \"redeclared\" \"\" }\n+gnuindef(fn, 0) // { dg-message \"previous\" }\n+decl(inline, fn) // { dg-error \"redeclared\" }\n \n #undef fn\n #define fn pfx(func_def_gnuin_redef)\n-gnuindef(fn, 0) // { dg-message \"previous\" \"\" }\n-gnuindef(fn, 1) // { dg-error \"redefinition\" \"\" }\n+gnuindef(fn, 0) // { dg-message \"previous\" }\n+gnuindef(fn, 1) // { dg-error \"redefinition\" }\n \n #undef fn\n #define fn pfx(func_def_inline_redef)\n-def(inline, fn, 0) // { dg-message \"previous\" \"\" }\n-def(inline, fn, 1) // { dg-error \"redefinition\" \"\" }\n+def(inline, fn, 0) // { dg-message \"previous\" }\n+def(inline, fn, 1) // { dg-error \"redefinition\" }\n \n #undef fn\n #define fn pfx(func_def_inline_after)\n-gnuindef(fn, 0) // { dg-message \"previous\" \"\" }\n-def(inline, fn, 1) // { dg-error \"redeclare\" \"\" }\n+gnuindef(fn, 0) // { dg-message \"previous\" }\n+def(inline, fn, 1) // { dg-error \"redeclare\" }\n \n #undef fn\n #define fn pfx(func_def_inline_before)\n-def(inline, fn, 0) // { dg-message \"previous\" \"\" }\n-gnuindef(fn, 1) // { dg-error \"redefinition\" \"\" }\n+def(inline, fn, 0) // { dg-message \"previous\" }\n+gnuindef(fn, 1) // { dg-error \"redefinition\" }\n \n #undef fn\n #define fn pfx(func_def_before)\n-def(, fn, 0) // { dg-message \"previous\" \"\" }\n-gnuindef(fn, 1) // { dg-error \"redefinition\" \"\" }\n+def(, fn, 0) // { dg-message \"previous\" }\n+gnuindef(fn, 1) // { dg-error \"redefinition\" }\n \n #undef fn\n #define fn pfx(func_decl_static_inline_before)\n-decl(static inline, fn) // { dg-message \"previous\" \"\" }\n-gnuindef(fn, 0) // { dg-error \"redeclared\" \"\" }\n+decl(static inline, fn) // { dg-message \"previous\" }\n+gnuindef(fn, 0) // { dg-error \"redeclared\" }\n \n #undef fn\n #define fn pfx(func_def_static_inline_after)\n decl(static, fn)\n-gnuindef(fn, 0) // { dg-message \"previous\" \"\" }\n+gnuindef(fn, 0) // { dg-message \"previous\" }\n decl(static, fn)\n-def(static inline, fn, 1) // { dg-error \"redeclare\" \"\" }\n+def(static inline, fn, 1) // { dg-error \"redeclare\" }"}, {"sha": "70f251d75f01c01ba6b34ea17c9931a7f0d81792", "filename": "gcc/testsuite/g++.dg/ext/label13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flabel13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flabel13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flabel13.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -8,7 +8,7 @@ struct C\n   C();\n };\n \n-C::C()\t// { dg-bogus \"can never be copied\" \"\" }\n+C::C()\t// { dg-bogus \"can never be copied\" }\n {\n   static void *labelref = &&label;\n   goto *labelref;"}, {"sha": "20091c87c22b915616518d009e523f1a6dd27bf4", "filename": "gcc/testsuite/g++.dg/ext/member-attr.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmember-attr.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmember-attr.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmember-attr.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -9,6 +9,6 @@\n \n class T {\n   public:\n-    __attribute__ ((garbage1)) void member1(int) {} /* { dg-warning \"'garbage1' attribute directive ignored\" \"\" } */\n-    void __attribute__ ((garbage2)) member2(int) {} /* { dg-warning \"'garbage2' attribute directive ignored\" \"\" } */\n+    __attribute__ ((garbage1)) void member1(int) {} /* { dg-warning \"'garbage1' attribute directive ignored\" } */\n+    void __attribute__ ((garbage2)) member2(int) {} /* { dg-warning \"'garbage2' attribute directive ignored\" } */\n };"}, {"sha": "b1b70e10b121bbee300e1ecb91c573f6643048d2", "filename": "gcc/testsuite/g++.dg/ext/visibility/anon7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fanon7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fanon7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fanon7.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -4,7 +4,7 @@\n namespace\n {\n   struct A {\n-    static int bar ();\t\t// { dg-error \"used but never defined\" \"\" }\n+    static int bar ();\t\t// { dg-error \"used but never defined\" }\n     static int i;\t\t// { dg-error \"used, but not defined\" \"\" { xfail *-*-* } }\n     static int j;\n     static int k;"}, {"sha": "98314b9eee31598b21a3861ae21a0da3038e5876", "filename": "gcc/testsuite/g++.dg/ext/visibility/visibility-7.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-7.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -4,8 +4,8 @@\n \n extern int \n __attribute__((visibility (\"hidden\")))\n-xyzzy; /* { dg-message \"previous declaration\" \"\" } */\n+xyzzy; /* { dg-message \"previous declaration\" } */\n \n int \n __attribute__((visibility (\"protected\")))\n-xyzzy = 5; /* { dg-warning \"visibility attribute ignored\" \"\" } */\n+xyzzy = 5; /* { dg-warning \"visibility attribute ignored\" } */"}, {"sha": "fbabeaef7a9e259cbe74989d3edaf75f7655a380", "filename": "gcc/testsuite/g++.dg/ext/vla2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla2.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -14,6 +14,6 @@ void bar(int i)\n {\n   char d[i] ;\n   \n-  begin(d);  // { dg-error \"no matching function\" \"\" }\n+  begin(d);  // { dg-error \"no matching function\" }\n   // { dg-message \"(candidate|valid template argument)\" \"candidate note\" { target *-*-* } .-1 }\n }"}, {"sha": "dc5f7d73caad0ea32969f235e1a83de192c424c3", "filename": "gcc/testsuite/g++.dg/inherit/access2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Faccess2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Faccess2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Faccess2.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -10,5 +10,5 @@ B b;\n \n void A::f ()\n {\n-  A* ap = &b;\t\t\t// { dg-error \"base|inherit\" \"\" }\n+  A* ap = &b;\t\t\t// { dg-error \"base|inherit\" }\n }"}, {"sha": "e7247f2e2f0450af5b3a80934012ad5dedc3a5e9", "filename": "gcc/testsuite/g++.dg/inherit/covariant12.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant12.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -9,10 +9,10 @@ struct S;\n \n struct B\n {\n-  virtual T *Foo (); // { dg-error \"overriding\" \"\" }\n+  virtual T *Foo (); // { dg-error \"overriding\" }\n };\n \n struct D : B\n {\n-  virtual S *Foo (); // { dg-error \"invalid covariant\" \"\" }\n+  virtual S *Foo (); // { dg-error \"invalid covariant\" }\n };"}, {"sha": "51182437b3c0de6739fafedb082a6bcde09dcea0", "filename": "gcc/testsuite/g++.dg/inherit/covariant14.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant14.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -8,13 +8,13 @@ struct A;\n \n struct B\n {\n-  virtual A* foo();  // { dg-error \"overriding\" \"\" }\n+  virtual A* foo();  // { dg-error \"overriding\" }\n };\n \n namespace N\n {\n   struct A : B\n   {\n-    virtual A* foo(); // { dg-error \"invalid covariant\" \"\" }\t\n+    virtual A* foo(); // { dg-error \"invalid covariant\" }\t\n   };\n }"}, {"sha": "aafcd0ddf7a59e399c0497c213372b85b8e6926a", "filename": "gcc/testsuite/g++.dg/inherit/namespace-as-base.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fnamespace-as-base.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fnamespace-as-base.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fnamespace-as-base.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -5,5 +5,5 @@ namespace Out {\n   }\n }\n \n-class Klasse : public Out::In {  // { dg-error \".*\" \"\" }\n+class Klasse : public Out::In {  // { dg-error \".*\" }\n };"}, {"sha": "a7e531efc00b014c8f312109d3e161c1eef74bc3", "filename": "gcc/testsuite/g++.dg/inherit/template-as-base.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Ftemplate-as-base.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Ftemplate-as-base.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Ftemplate-as-base.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -6,4 +6,4 @@ namespace N\n     template<typename> struct X { };\n }\n \n-struct A : N::X { }; // { dg-error \"expected class-name\" \"\" }\n+struct A : N::X { }; // { dg-error \"expected class-name\" }"}, {"sha": "09936cc4b7a97acd452d72495de00cf21a0fe9f9", "filename": "gcc/testsuite/g++.dg/lookup/ambig1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fambig1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fambig1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fambig1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -7,11 +7,11 @@\n // Bug 16889:Undetected ambiguity.\n \n struct B { \n-  int f(); // { dg-message \"int B::f\" \"\" }\n+  int f(); // { dg-message \"int B::f\" }\n }; \n  \n struct B1 : virtual B {}; \n struct B2 : B {}; \n struct BB : B1, B2 {}; \n  \n-int i = BB().f();  // { dg-error \"ambiguous\" \"\" }\n+int i = BB().f();  // { dg-error \"ambiguous\" }"}, {"sha": "e9a65d12ee1f459e86a259f57f533071786dbbd1", "filename": "gcc/testsuite/g++.dg/lookup/ambig2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fambig2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fambig2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fambig2.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -7,11 +7,11 @@\n // Bug 16889:Undetected ambiguity.\n \n struct B { \n-  int i; // { dg-message \"int B::i\" \"\" }\n+  int i; // { dg-message \"int B::i\" }\n }; \n  \n struct B1 : virtual B {}; \n struct B2 : B {}; \n struct BB : B1, B2 {}; \n  \n-int i = BB().i;  // { dg-error \"ambiguous\" \"\" }\n+int i = BB().i;  // { dg-error \"ambiguous\" }"}, {"sha": "dee3cf77783b1ae4b3c063573fd2f900a010c0c2", "filename": "gcc/testsuite/g++.dg/lookup/ambig3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fambig3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fambig3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fambig3.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -7,12 +7,12 @@\n // Follow on from Bug 16889:Undetected ambiguity.\n \n struct B { \n-  int f(); // { dg-message \"int B::f\" \"\" }\n+  int f(); // { dg-message \"int B::f\" }\n }; \n  \n struct B1 : virtual B {}; \n struct B2 : B {};\n struct B2_2 : B2 {};\n struct BB : B1, B2_2 {}; \n  \n-int i = BB().f();  // { dg-error \"ambiguous\" \"\" }\n+int i = BB().f();  // { dg-error \"ambiguous\" }"}, {"sha": "8fbc8e5c793e210c02ab38482871f0b5ea99df72", "filename": "gcc/testsuite/g++.dg/lookup/class-member-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fclass-member-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fclass-member-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fclass-member-1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -7,5 +7,5 @@ struct A { };\n int main()\n {\n   A a;\n-  a.i = 9;           // { dg-error \"no member\" \"\" }\n+  a.i = 9;           // { dg-error \"no member\" }\n }"}, {"sha": "aa377b4abebbdc73d4ac946b7402dcf2457de851", "filename": "gcc/testsuite/g++.dg/lookup/conv-1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fconv-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fconv-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fconv-1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -7,12 +7,12 @@\n \n struct A1 \n {\n-  operator int () const; // { dg-message \"A1::operator\" \"\" }\n+  operator int () const; // { dg-message \"A1::operator\" }\n };\n \n struct A2\n {\n-  operator int () const; // { dg-message \"A2::operator\" \"\" }\n+  operator int () const; // { dg-message \"A2::operator\" }\n };\n \n struct B : A1, A2 \n@@ -21,6 +21,6 @@ struct B : A1, A2\n \n int Foo (B const &b)\n {\n-  return b; // { dg-error \"ambiguous\" \"\" }\n+  return b; // { dg-error \"ambiguous\" }\n }\n "}, {"sha": "42a9978e597c51f75326c6d53e76ea8dfb10a019", "filename": "gcc/testsuite/g++.dg/lookup/decl1.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fdecl1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fdecl1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fdecl1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -21,12 +21,12 @@ C2<X>::operator C1<Y>()\n \n struct A\n {\n-  operator int ();\t\t\t// { dg-error \"operator\" \"\" }\n-  operator float ();\t\t\t// { dg-error \"operator\" \"\" }\n-  operator float () const;\t\t// { dg-error \"operator\" \"\" }\n-  template <typename T> operator T * (); // { dg-error \"candidates\" \"\" }\n+  operator int ();\t\t\t// { dg-error \"operator\" }\n+  operator float ();\t\t\t// { dg-error \"operator\" }\n+  operator float () const;\t\t// { dg-error \"operator\" }\n+  template <typename T> operator T * (); // { dg-error \"candidates\" }\n };\n \n-A::operator short () { // { dg-error \"prototype for\" \"\" }\n+A::operator short () { // { dg-error \"prototype for\" }\n   return 0;\n }"}, {"sha": "373bd3b0838bd02198dd2d74123ec85d27c899c8", "filename": "gcc/testsuite/g++.dg/lookup/koenig1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fkoenig1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fkoenig1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fkoenig1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -8,6 +8,6 @@\n class X;\n \n void foo() {\n-  X x(1); // { dg-error \"incomplete type\" \"\" }\n-  bar(x); // { dg-error \"3:'bar' was not declared\" \"\" }\n+  X x(1); // { dg-error \"incomplete type\" }\n+  bar(x); // { dg-error \"3:'bar' was not declared\" }\n }"}, {"sha": "663f718b734d757c354d1f7e689461bb2107daa4", "filename": "gcc/testsuite/g++.dg/lookup/scoped1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -4,7 +4,7 @@\n struct A\n {\n   static int i1;\n-  int i2; // { dg-message \"declared\" \"\" }\n+  int i2; // { dg-message \"declared\" }\n   static void f1 ();\n   void f2 ();\n };\n@@ -15,7 +15,7 @@ struct C: public B\n   void g ()\n   {\n     ::A::i1 = 1;\n-    ::A::i2 = 1;\t\t// { dg-error \"(access)|(context)\" \"\" }\n+    ::A::i2 = 1;\t\t// { dg-error \"(access)|(context)\" }\n     ::A::f1 ();\n     ::A::f2 ();\t\t\t// { dg-error \"\" }\n   }"}, {"sha": "22c159835dd34a540c3ef9396dcc362fd6e74cec", "filename": "gcc/testsuite/g++.dg/lookup/scoped2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped2.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -13,7 +13,7 @@ struct Derived : Base\n {\n   void Foo ()\n   {\n-    Base::Baz ();  // { dg-error \"is not a member\" \"\" }\n+    Base::Baz ();  // { dg-error \"is not a member\" }\n       \n   }\n };"}, {"sha": "c13c80ca0bfcfd25222cdeb3e18c9d4df73be5aa", "filename": "gcc/testsuite/g++.dg/lookup/two-stage4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ftwo-stage4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ftwo-stage4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ftwo-stage4.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -8,7 +8,7 @@ template<typename T> bool operator==(wrap<T>, wrap<T>);\n template<typename T>\n void g(T, wrap<wrap<int> > x)\n {\n-  bool b = x == x; // { dg-bogus \"\" \"\" }\n+  bool b = x == x; // { dg-bogus \"\" }\n }\n \n template<typename T> void operator==(wrap<wrap<T> >, wrap<wrap<T> >);"}, {"sha": "6feb979158735affbf831fe72abedcc90c3761d3", "filename": "gcc/testsuite/g++.dg/lookup/used-before-declaration.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fused-before-declaration.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fused-before-declaration.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fused-before-declaration.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -1,5 +1,5 @@\n // Copyroght (C) 2003 Free Software Foundation\n // Origin: PR/12832, Jonathan Wakely <redi@gcc.gnu.org>\n \n-void f() { g(); }               // { dg-error \"12:'g' was not declared\" \"\" }\n+void f() { g(); }               // { dg-error \"12:'g' was not declared\" }\n void g() { }"}, {"sha": "d2df4112212b7af014a5063479fb12e94b54a4e1", "filename": "gcc/testsuite/g++.dg/lookup/using.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -17,7 +17,7 @@ struct Derived : Base {\n int main()\n {\n   Derived d;\n-  X x = d.f();                  // { dg-bogus \"Y\" \"\" }\n+  X x = d.f();                  // { dg-bogus \"Y\" }\n }\n \n "}, {"sha": "9b008fe0c4b010004f80de3f3185afb2bfb18e02", "filename": "gcc/testsuite/g++.dg/lookup/using17.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing17.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -11,4 +11,4 @@ struct S {}; // { dg-message \"candidates are: struct S\" \"candidate 1\" }\n \n using namespace M;\n \n-struct S s; // { dg-error \"reference to 'S' is ambiguous|invalid type in declaration\" \"\" }\n+struct S s; // { dg-error \"reference to 'S' is ambiguous|invalid type in declaration\" }"}, {"sha": "c2a8ddf78ceba8e11ef02aafbcb7f7eaffca4855", "filename": "gcc/testsuite/g++.dg/lookup/using2.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing2.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -24,9 +24,9 @@ namespace N\n   template<int> void f() {}\n }\n \n-using N;             // { dg-error \"(using-declaration)|(nested-name)\" \"\" }\n-using ::N;           // { dg-error \"using-declaration\" \"\" }\n-using N::f< 0 >;     // { dg-error \"using-declaration\" \"\" }\n+using N;             // { dg-error \"(using-declaration)|(nested-name)\" }\n+using ::N;           // { dg-error \"using-declaration\" }\n+using N::f< 0 >;     // { dg-error \"using-declaration\" }\n \n struct  A {\n   template <class T> void f(T);\n@@ -39,7 +39,7 @@ struct B : A {\n };\n \n struct C : A {\n-  using A::f<double>; // { dg-error \"using-declaration\" \"\" }\n-  using A::X<int>;    // { dg-error \"using-declaration\" \"\" }\n+  using A::f<double>; // { dg-error \"using-declaration\" }\n+  using A::X<int>;    // { dg-error \"using-declaration\" }\n };\n "}, {"sha": "60a4e41b5a9f70af9d1b0f2372dfec5dc793f917", "filename": "gcc/testsuite/g++.dg/other/abstract2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fabstract2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fabstract2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fabstract2.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -42,7 +42,7 @@ namespace N2 {\n }\n \n namespace N3 {\n-  struct X { // { dg-message \"note\" \"\" }\n+  struct X { // { dg-message \"note\" }\n     virtual void xfunc(void) = 0;  // { dg-message \"note\" }\n   };\n   void g(X parm13);          // { dg-error \"abstract\" }"}, {"sha": "33792e7f2b37c0fb2b08368308c185328039bc85", "filename": "gcc/testsuite/g++.dg/other/classkey1.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fclasskey1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fclasskey1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fclasskey1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -6,12 +6,12 @@\n // PR 775. Some mismatches which were broken.\n \n template <class T> struct A {};\n-union A<int> a; // { dg-error \"'union' tag\" \"\" }\n+union A<int> a; // { dg-error \"'union' tag\" }\n \n-template <> union A<float> {}; // { dg-error \"'union' tag\" \"\" }\n+template <> union A<float> {}; // { dg-error \"'union' tag\" }\n \n struct B {};\n-union B b;\t// { dg-error \"'union' tag\" \"\" }\n+union B b;\t// { dg-error \"'union' tag\" }\n \n union C {};\n-class C c;\t// { dg-error \"'class' tag\" \"\" }\n+class C c;\t// { dg-error \"'class' tag\" }"}, {"sha": "09eef3b70bc0795ad031635b35587e3fc71722b7", "filename": "gcc/testsuite/g++.dg/other/component1.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fcomponent1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fcomponent1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fcomponent1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -19,11 +19,11 @@ void Foo () {\n   \n   (c.f<int>) (2);\n \n-  c.g;\t\t\t// { dg-error \"statement cannot resolve\" \"\" }\n-  c.f;\t\t        // { dg-error \"statement cannot resolve\" \"\" }\n-  c.f<int>;\t\t// { dg-error \"statement cannot resolve\" \"\" }\n+  c.g;\t\t\t// { dg-error \"statement cannot resolve\" }\n+  c.f;\t\t        // { dg-error \"statement cannot resolve\" }\n+  c.f<int>;\t\t// { dg-error \"statement cannot resolve\" }\n   \n-  c.g == 1;\t\t// { dg-error \"invalid\" \"\" }\n-  c.f == 1;\t\t// { dg-error \"invalid\" \"\" }\n-  c.f<int> == 1;\t// { dg-error \"invalid\" \"\" }\n+  c.g == 1;\t\t// { dg-error \"invalid\" }\n+  c.f == 1;\t\t// { dg-error \"invalid\" }\n+  c.f<int> == 1;\t// { dg-error \"invalid\" }\n }"}, {"sha": "a69744dae8221a864e3b6b2d7997db95b797b3ad", "filename": "gcc/testsuite/g++.dg/other/const1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fconst1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fconst1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fconst1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -13,5 +13,5 @@ struct Foo\n \n void Foo::Modify(unsigned j) const\n {\n-  Foo::i = j;  // { dg-error \"assignment of member\" \"\" }\n+  Foo::i = j;  // { dg-error \"assignment of member\" }\n }"}, {"sha": "d9df5c40cef50c48bfd0b971aa89a25630870780", "filename": "gcc/testsuite/g++.dg/other/const2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fconst2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fconst2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fconst2.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -12,7 +12,7 @@ struct foo\n \n   void bad ()\n   {\n-    this->*(bars[0].b) = 42; // { dg-bogus \"read-only\" \"\" }\n+    this->*(bars[0].b) = 42; // { dg-bogus \"read-only\" }\n   }\n };\n "}, {"sha": "e9ddb2b28961976225f7f2bcdb90ab2f30c15877", "filename": "gcc/testsuite/g++.dg/other/conversion1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fconversion1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fconversion1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fconversion1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -13,5 +13,5 @@ int main()\n {\n   long long m;\n   \n-  (void (QObject::*)()) m;    // { dg-error \"invalid cast\" \"\" }\n+  (void (QObject::*)()) m;    // { dg-error \"invalid cast\" }\n }"}, {"sha": "b3a9daf90560638a0e6f12f4766e3cf6f91d6c16", "filename": "gcc/testsuite/g++.dg/other/do1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdo1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdo1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdo1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -8,6 +8,6 @@\n void init ()\n {\n   do {  } while (0)\n-\t    obj = 0; // { dg-error \"expected|not declared\" \"\" }\n+\t    obj = 0; // { dg-error \"expected|not declared\" }\n      \n }"}, {"sha": "5d7940864572c660cf2379e297559b0d1854c26a", "filename": "gcc/testsuite/g++.dg/other/error1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -10,6 +10,6 @@ class foo {\n   int fudge[40];\n   int bar [40];\n   inline int access(int i) {\n-    return bar(i);  // { dg-error \"cannot be used as a function\" \"\" }\n+    return bar(i);  // { dg-error \"cannot be used as a function\" }\n   }\n };"}, {"sha": "33fbee5687effe104f00396c188546d5dbedf29a", "filename": "gcc/testsuite/g++.dg/other/error10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror10.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -10,5 +10,5 @@ void foo(const A<N> &a)\n \n void bar()\n {\n-    foo(A<0>()); // { dg-message \"required from here\" \"\" }\n+    foo(A<0>()); // { dg-message \"required from here\" }\n }"}, {"sha": "dfe9734eaffa274d273c21698da42ed0cca13ff1", "filename": "gcc/testsuite/g++.dg/other/error3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror3.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -3,4 +3,4 @@\n \n void (*g() throw())();\t\t// { dg-message \"g\\\\(\\\\) throw\" \"\" { target { ! c++1z } } }\n \t\t\t\t// { dg-message \"g\\\\(\\\\) noexcept\" \"\" { target c++1z } .-1 }\n-void (*g())();\t\t\t// { dg-error \"\" \"\" }\n+void (*g())();\t\t\t// { dg-error \"\" }"}, {"sha": "6a8cb40e01401c140035327ff74572695694061c", "filename": "gcc/testsuite/g++.dg/other/error4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror4.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -7,9 +7,9 @@\n \n struct Wrapper {};\n \n-void Foo(int const &); // { dg-message \"in passing\" \"\" }\n+void Foo(int const &); // { dg-message \"in passing\" }\n \n void Baz ()\n {\n-  Foo (Wrapper ()); // { dg-error \"Wrapper\" \"\" }\n+  Foo (Wrapper ()); // { dg-error \"Wrapper\" }\n }"}, {"sha": "e6528d44b4c938114f7429ed4b11a3abde36ffa8", "filename": "gcc/testsuite/g++.dg/other/error5.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror5.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -7,7 +7,7 @@ template <typename T> struct S {\n };\n \n template <typename T> struct S2 : S<T> {\n-    using S<T>::operator typename S<T>::I*; // { dg-error \"operator S\\\\<int\\\\>\" \"\" }\n+    using S<T>::operator typename S<T>::I*; // { dg-error \"operator S\\\\<int\\\\>\" }\n };\n \n-template struct S2<int>;  // { dg-message \"required\" \"\" }\n+template struct S2<int>;  // { dg-message \"required\" }"}, {"sha": "6bd31d8888faabd36e4bdc8cf322be45e704251d", "filename": "gcc/testsuite/g++.dg/other/error8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror8.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -18,5 +18,5 @@ void tfoo(void)\n     int alpha;  // { dg-error \"\" \"\" { xfail *-*-* } }\n     int beta; \n   }; // { dg-bogus \"\" \"misplaced position of the declaration\" { xfail *-*-* } }\n-  double alpha; // { dg-error \"\" \"\" }\n+  double alpha; // { dg-error \"\" }\n }"}, {"sha": "41e8cdd0293f516b462ef0530a8f7133e2243cf4", "filename": "gcc/testsuite/g++.dg/other/error9.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror9.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -14,7 +14,7 @@ struct B\n \n struct C : public B, public A\n {\n-  C ()  // { dg-warning \"when initialized\" \"\" }\n-    : A(), B()  // { dg-warning \"base .\\[AB\\].\" \"\" }\n+  C ()  // { dg-warning \"when initialized\" }\n+    : A(), B()  // { dg-warning \"base .\\[AB\\].\" }\n   { }\n };"}, {"sha": "1efc39653b64156ebb98823e2a77eb3817a195fb", "filename": "gcc/testsuite/g++.dg/other/field1.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffield1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffield1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffield1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -7,19 +7,19 @@\n \n struct test\n {\n-  char test;  // { dg-error \"with same name as class\" \"\" }\n+  char test;  // { dg-error \"with same name as class\" }\n   test();\n };\n \n template <typename T> struct X\n {\n-  char X;  // { dg-error \"with same name as class\" \"\" }\n+  char X;  // { dg-error \"with same name as class\" }\n   X ();\n };\n \n template <> struct X<int> {\n-  char X;  // { dg-error \"with same name as class\" \"\" }\n+  char X;  // { dg-error \"with same name as class\" }\n   X();\n };\n \n-X<float> i; // { dg-message \"required from\" \"\" }\n+X<float> i; // { dg-message \"required from\" }"}, {"sha": "a68d3e4e7f37311a1eea06cdb146c9c4df169ab4", "filename": "gcc/testsuite/g++.dg/other/init1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Finit1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Finit1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Finit1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -17,7 +17,7 @@ struct B : A\n class T\n {\n   typedef int Foo;\n-  T () : Foo () {}\t// { dg-error \"T::Foo' is not\" \"\" }\n+  T () : Foo () {}\t// { dg-error \"T::Foo' is not\" }\n };\n \n struct S : B"}, {"sha": "cb54ab3cbffd2e6643f5736b70a485fd0e98cdef", "filename": "gcc/testsuite/g++.dg/other/ptrmem2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fptrmem2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fptrmem2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fptrmem2.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -19,7 +19,7 @@ template<class T> int f2(T x);\n \n int D::Foo ()\n {\n-  f1( &D::m);   // { dg-error \"cannot create pointer to ref\" \"\" }\n+  f1( &D::m);   // { dg-error \"cannot create pointer to ref\" }\n   f1( &(D::m));\t// ok\n   f2( &D::s);   // ok\n   f2( &(D::s)); // ok\n@@ -28,7 +28,7 @@ int D::Foo ()\n \n int Foo ()\n {\n-  f1( &D::m);    // { dg-error \"cannot create pointer to ref\" \"\" }\n+  f1( &D::m);    // { dg-error \"cannot create pointer to ref\" }\n   f1( &(D::m));  // { dg-error \"non-static\" }\n   f2( &D::s);    // ok\n   f2( &(D::s));  // ok"}, {"sha": "58fb8a45d34bb77913f3fa0d03c4778081342621", "filename": "gcc/testsuite/g++.dg/other/return1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Freturn1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Freturn1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Freturn1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -7,7 +7,7 @@\n struct wxString;\n struct wxString* wxGetEmptyString();\n \n-struct wxString GetHeader() // { dg-error \"return type\" \"\" }\n+struct wxString GetHeader() // { dg-error \"return type\" }\n {\n   return *wxGetEmptyString();\n }"}, {"sha": "cd2b57867aeff8a48485b0306982758063180278", "filename": "gcc/testsuite/g++.dg/overload/builtin3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fbuiltin3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fbuiltin3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fbuiltin3.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -6,5 +6,5 @@ namespace std {\n }\n using std::fabs;\n \n-double (*p) (double) = &fabs;  // { dg-bogus \"is ambiguous\" \"\" }\n+double (*p) (double) = &fabs;  // { dg-bogus \"is ambiguous\" }\n "}, {"sha": "6c5998c720af53aa72b426037d0a0e134555f3f0", "filename": "gcc/testsuite/g++.dg/overload/error1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Ferror1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Ferror1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Ferror1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -2,6 +2,6 @@\n \n struct S\n {\n-  void f () {} // { dg-error \"with\" \"\" }\n-  int f () { return 0; } // { dg-error \"overloaded\" \"\" }\n+  void f () {} // { dg-error \"with\" }\n+  int f () { return 0; } // { dg-error \"overloaded\" }\n };"}, {"sha": "4a9d35bc49de730e5d5804ef74ae33cf45ccdec6", "filename": "gcc/testsuite/g++.dg/overload/error2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Ferror2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Ferror2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Ferror2.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -6,6 +6,6 @@\n \n struct A\n {\n-  void foo();  // { dg-error \"with\" \"\" }\n-  virtual void foo();  // { dg-error \"cannot be overloaded\" \"\" }\n+  void foo();  // { dg-error \"with\" }\n+  virtual void foo();  // { dg-error \"cannot be overloaded\" }\n };"}, {"sha": "6f26dd0e5245788bd315bef85fa7d84a8f701790", "filename": "gcc/testsuite/g++.dg/overload/koenig2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fkoenig2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fkoenig2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fkoenig2.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -11,5 +11,5 @@ void anyfunc(int x);\n \n void Foo ()\n {\n-  anyfunc (&dummy<>); // { dg-error \"cannot resolve overload\" \"\" }\n+  anyfunc (&dummy<>); // { dg-error \"cannot resolve overload\" }\n }"}, {"sha": "7cbc48fd7277c7d511f9254ae3caddbceca5fd21", "filename": "gcc/testsuite/g++.dg/overload/pmf1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fpmf1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fpmf1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fpmf1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -17,5 +17,5 @@ void f (C) {}         // even though this would be well-formed\n \n int main ()\n {\n-  f (aip);  // { dg-error \"'A' is an inaccessible base of 'B'|conversion\" \"\" }\n+  f (aip);  // { dg-error \"'A' is an inaccessible base of 'B'|conversion\" }\n }"}, {"sha": "83112fd56f49afcd09bd9c7a4aa495d0c7838b5a", "filename": "gcc/testsuite/g++.dg/parse/args1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fargs1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fargs1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fargs1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -8,5 +8,5 @@\n \n void Foo (int)\n {\n-  Foo(2 2); // { dg-error \"expected\" \"\" }\n+  Foo(2 2); // { dg-error \"expected\" }\n }"}, {"sha": "57fa60e130e9090d6f2325100b11c610be2494ce", "filename": "gcc/testsuite/g++.dg/parse/attr3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fattr3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fattr3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fattr3.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -4,10 +4,10 @@ enum __attribute__ ((deprecated)) E { e };\n struct S { enum __attribute__ ((deprecated)) F { f = e }; };\n \n int main () {\n-    E x;\t// { dg-warning \"'E' is deprecated\" \"\" }\n+    E x;\t// { dg-warning \"'E' is deprecated\" }\n     x = e;\n \n-    S::F y;\t// { dg-warning \"'F' is deprecated\" \"\" }\n+    S::F y;\t// { dg-warning \"'F' is deprecated\" }\n     y = S::f;\n \n     return x + y;"}, {"sha": "ef3f4adbc43da764bf30bf569426dc15f78ea425", "filename": "gcc/testsuite/g++.dg/parse/constant4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconstant4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconstant4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconstant4.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -18,7 +18,7 @@ void Foo ()\n   \n   static const unsigned J = X<T>::J; // { dg-message \"not initialized with a constant expression\" }\n   \n-  Y<J> j; // { dg-error \"constant|template argument\" \"\" }\n+  Y<J> j; // { dg-error \"constant|template argument\" }\n }\n \n struct A \n@@ -34,7 +34,7 @@ template <typename> struct X\n \n void Baz ()\n {\n-  Foo<int> (); // { dg-message \"required\" \"\" }\n+  Foo<int> (); // { dg-message \"required\" }\n }\n \n   "}, {"sha": "248224234881a23f77dec126e08f5a08d9a86829", "filename": "gcc/testsuite/g++.dg/parse/crash10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash10.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -10,4 +10,4 @@\n class \n {\n   typename::\n-; // { dg-error \"\" \"\" }\n+; // { dg-error \"\" }"}, {"sha": "7e326aa982746d3c966ac55daf69eb290f2f721e", "filename": "gcc/testsuite/g++.dg/parse/crash18.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash18.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -4,4 +4,4 @@\n // PR 18095: ICE\n // Origin: Volker Reichelt <reichelt@gcc.gnu.org>\n \n-struct A // { dg-error \"expected\" \"\" }\n+struct A // { dg-error \"expected\" }"}, {"sha": "482a94b6e876cce24b5bd3b61864a34b0500fd89", "filename": "gcc/testsuite/g++.dg/parse/crash19.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash19.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -4,4 +4,4 @@\n // PR 18095: ICE\n // Origin: Volker Reichelt <reichelt@gcc.gnu.org>\n \n-struct A {} // { dg-error \"expected\" \"\" }\n+struct A {} // { dg-error \"expected\" }"}, {"sha": "7868643e1db6dcf8d2db72b5e9e6e7f92c209a94", "filename": "gcc/testsuite/g++.dg/parse/crash20.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash20.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -8,7 +8,7 @@\n \n template<typename T> struct A\n {\n-  typedef typename T::X Y; // { dg-error \"not a class\" \"\" }\n+  typedef typename T::X Y; // { dg-error \"not a class\" }\n };\n \n-A<int>::Y y; // { dg-message \"required from here\" \"\" }\n+A<int>::Y y; // { dg-message \"required from here\" }"}, {"sha": "d30f23c4c7026c82fe76e25391ed1eb4c70b6b12", "filename": "gcc/testsuite/g++.dg/parse/crash21.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash21.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -1,7 +1,7 @@\n namespace N\n {\n-  struct A; // { dg-message \"previous declaration\" \"\" }\n+  struct A; // { dg-message \"previous declaration\" }\n }\n \n template<int I>\n-struct N::A {}; // { dg-error \"redeclared\" \"\" }\n+struct N::A {}; // { dg-error \"redeclared\" }"}, {"sha": "7bd89ef7344f9d1cf698a13c0647618717530161", "filename": "gcc/testsuite/g++.dg/parse/crash22.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash22.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -13,8 +13,8 @@ namespace N\n \n using namespace N;\n \n-int A::i; // { dg-message \"ambiguous|declared here\" \"\" }\n-int A::i; // { dg-message \"ambiguous|redefinition of\" \"\" }\n+int A::i; // { dg-message \"ambiguous|declared here\" }\n+int A::i; // { dg-message \"ambiguous|redefinition of\" }\n \n namespace N\n {"}, {"sha": "88ec42bece7c9c24db0221edd931402247e3d3f5", "filename": "gcc/testsuite/g++.dg/parse/crash32.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash32.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -9,5 +9,5 @@ struct Ast\n void\n Ast::accept (Visitor& v)\n {\n-  v (*this); // { dg-error \"no match for call\" \"\" }\n+  v (*this); // { dg-error \"no match for call\" }\n }"}, {"sha": "e178d29dad32e629b1e58a78328c53457f4c899b", "filename": "gcc/testsuite/g++.dg/parse/decl-specifier-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdecl-specifier-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdecl-specifier-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdecl-specifier-1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -8,7 +8,7 @@ namespace N\n     struct X { };\n }\n \n-N::X X;                           // { dg-error \"\" \"\" }\n+N::X X;                           // { dg-error \"\" }\n \n int main()\n {"}, {"sha": "4e96baf85f14bc95a9fc627f4b1e6fedc076464f", "filename": "gcc/testsuite/g++.dg/parse/error58.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror58.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror58.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror58.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -4,4 +4,4 @@\n \n struct A;\n void foo ();\n-void f() { alignas (foo (A)); } // { dg-error \"expected\" \"\" }\n+void f() { alignas (foo (A)); } // { dg-error \"expected\" }"}, {"sha": "28e295a9c86509ed4a3608b6899eb4184ba959dc", "filename": "gcc/testsuite/g++.dg/parse/local-class1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Flocal-class1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Flocal-class1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Flocal-class1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -9,6 +9,6 @@ void f ()\n {\n   class c\n     {\n-      friend void g () { } // { dg-error \"local class\" \"\" }\n+      friend void g () { } // { dg-error \"local class\" }\n     };\n }"}, {"sha": "c22497044e90ce13c6b9134b8ec2ac91de665042", "filename": "gcc/testsuite/g++.dg/parse/non-dependent2.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fnon-dependent2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fnon-dependent2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fnon-dependent2.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -8,30 +8,30 @@\n template <class T>\n struct Foo {\n   int j; // we never see this one.\n-  int k; // { dg-message \"Foo\" \"\" }\n+  int k; // { dg-message \"Foo\" }\n   \n };\n \n struct Baz \n {\n   int j;\n-  int k; // { dg-message \"candidates\" \"\" }\n+  int k; // { dg-message \"candidates\" }\n   \n };\n \n template <class T>\n struct Bar : public Foo<T>, Baz {\n   \n   int baz () { return j; } // binds to Baz::j\n-  int foo () { return this->k; } // { dg-error \"request for member\" \"\" }\n+  int foo () { return this->k; } // { dg-error \"request for member\" }\n };\n \n int main()\n {\n   Bar<int> bar;\n \n   bar.baz ();\n-  bar.foo (); // { dg-message \"required\" \"\" }\n+  bar.foo (); // { dg-message \"required\" }\n   \n   return 0;\n }"}, {"sha": "5ff3fb21929783ce1959cf02d0c933d9a56f274a", "filename": "gcc/testsuite/g++.dg/parse/parameter-declaration-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparameter-declaration-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparameter-declaration-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparameter-declaration-1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -3,4 +3,4 @@\n // { dg-do compile }\n \n struct {\n-   a(void = 0; a(0), a(0)\t// { dg-error \"\" \"\" }\n+   a(void = 0; a(0), a(0)\t// { dg-error \"\" }"}, {"sha": "d2b026035af645007900c9902ebf17af4a90f074", "filename": "gcc/testsuite/g++.dg/parse/ptrmem2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fptrmem2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fptrmem2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fptrmem2.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -8,4 +8,4 @@\n \n namespace A {}\n \n-int A::* p; // { dg-error \"is a namespace\" \"\" }\n+int A::* p; // { dg-error \"is a namespace\" }"}, {"sha": "753b45fcf89e24b754c63c16cc347b83bedf05a5", "filename": "gcc/testsuite/g++.dg/parse/ptrmem3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fptrmem3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fptrmem3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fptrmem3.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -7,5 +7,5 @@\n \n template<typename> struct A\n {\n-  int A<0>::* p; // { dg-error \"(type/value mismatch)|(expected)\" \"\" }\n+  int A<0>::* p; // { dg-error \"(type/value mismatch)|(expected)\" }\n };"}, {"sha": "0153fb2a1a606827f39085b7f048286b08b0819e", "filename": "gcc/testsuite/g++.dg/parse/saved1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fsaved1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fsaved1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fsaved1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -1,6 +1,6 @@\n // Test that the parser doesn't go into an infinite loop from ignoring the\n // PRE_PARSED_FUNCTION_DECL token.\n \n-class C { static void* operator new(size_t); }; // { dg-error \"\" \"\" }\n-void* C::operator new(size_t) { return 0; } // { dg-error \"\" \"\" }\n-class D { D(int i): integer(i){}}; // { dg-error \"\" \"\" }\n+class C { static void* operator new(size_t); }; // { dg-error \"\" }\n+void* C::operator new(size_t) { return 0; } // { dg-error \"\" }\n+class D { D(int i): integer(i){}}; // { dg-error \"\" }"}, {"sha": "e36add7b71568e66f486b70ed980d57cf384c83f", "filename": "gcc/testsuite/g++.dg/tc1/dr101.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr101.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr101.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr101.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -17,10 +17,10 @@ namespace Test1 {\n \n namespace Test2 {\n \n-  typedef unsigned int X;   // { dg-bogus \"X\" \"\" }\n+  typedef unsigned int X;   // { dg-bogus \"X\" }\n   extern \"C\" int f2();\n   namespace N {\n-    typedef unsigned int X; // { dg-bogus \"X\" \"\" }\n+    typedef unsigned int X; // { dg-bogus \"X\" }\n     extern \"C\" int f2();\n   }\n   using namespace N;"}, {"sha": "2f0370233e67b5ac581d1dba3b47d9963cfcb5f3", "filename": "gcc/testsuite/g++.dg/tc1/dr142.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr142.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr142.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr142.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -16,17 +16,17 @@ class DD: public D {\n };\n \n void DD::f() {\n-  mi = 3;          // { dg-error \"within this context\" \"\" }\n-  si = 3;          // { dg-error \"within this context\" \"\" }\n+  mi = 3;          // { dg-error \"within this context\" }\n+  si = 3;          // { dg-error \"within this context\" }\n   ::B b;\n   b.mi = 3;\n   b.si = 3;\n   ::B::si = 3;\n-  ::B* bp1 = this;        // { dg-error \"inaccessible base\" \"\" }\n+  ::B* bp1 = this;        // { dg-error \"inaccessible base\" }\n   ::B* bp2 = (::B*)this;\n   bp2->mi = 3;\n \n \n-  B b2;                   // { dg-error \"within this context\" \"\" }\n-  B::si = 3;              // { dg-error \"within this context\" \"\" }\n+  B b2;                   // { dg-error \"within this context\" }\n+  B::si = 3;              // { dg-error \"within this context\" }\n }"}, {"sha": "52ab926fb88f5746474514d6cb9525ff7d8bc136", "filename": "gcc/testsuite/g++.dg/tc1/dr176.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr176.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr176.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr176.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -6,7 +6,7 @@ namespace N1 {\n   template <class T> struct Base {\n     Base* p;\n     Base<T*>* p2;\n-    ::Base* p3;    // { dg-error \"\" \"\" }\n+    ::Base* p3;    // { dg-error \"\" }\n   };\n \n   template <class T> struct Derived: public Base<T> {\n@@ -22,7 +22,7 @@ namespace N1 {\n namespace N2 {\n   template <class T> struct Base {};\n   template <class T> struct Derived: public Base<T> {\n-    typename Derived::template Base<double>* p1;  // { dg-bogus \"\" \"\" }\n+    typename Derived::template Base<double>* p1;  // { dg-bogus \"\" }\n   };\n \n   template struct Derived<void>;"}, {"sha": "f60759ad26aceb7b59b175b6526255643bea309c", "filename": "gcc/testsuite/g++.dg/template/conv4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fconv4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fconv4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fconv4.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -21,7 +21,7 @@ struct D\n {\n   int Foo ()\n   {\n-    return operator int (); // { dg-error \"not defined\" \"\" }\n+    return operator int (); // { dg-error \"not defined\" }\n   }\n };\n "}, {"sha": "ae2d019d9648c0afb09f13982b91b0bc7a096e08", "filename": "gcc/testsuite/g++.dg/template/crash56.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash56.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash56.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash56.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -12,5 +12,5 @@ namespace N\n \n template<typename T> void g (N::A *p)\n {\n-  (void) A (p); // { dg-message \"\" \"\" }\n+  (void) A (p); // { dg-message \"\" }\n }"}, {"sha": "dcba6e18cf73447914ee5290783e62f9907479f9", "filename": "gcc/testsuite/g++.dg/template/dependent-expr2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr2.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -18,6 +18,6 @@ struct B\n {\n   bool bar(A& a)\n   {\n-    return a.foo == 0; // { dg-error \"\" \"\" }\n+    return a.foo == 0; // { dg-error \"\" }\n   }\n };"}, {"sha": "1bf522879396d2f41025602fb19dafd9d6dce6ef", "filename": "gcc/testsuite/g++.dg/template/error1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -8,6 +8,6 @@\n template <class T> void make_pair(T x);\n \n void foo(){\n-  struct fps_chan_ID fps; // { dg-error \"incomplete\" \"\" }\n-  make_pair(fps);         // { dg-bogus \"no matching function\" \"\" }\n+  struct fps_chan_ID fps; // { dg-error \"incomplete\" }\n+  make_pair(fps);         // { dg-bogus \"no matching function\" }\n }"}, {"sha": "68d883caa496ffd9aa22f7f94c075c3b41345d25", "filename": "gcc/testsuite/g++.dg/template/error2.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror2.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -13,16 +13,16 @@ template<class T> struct X\n template<class T >\n struct Derived\n {\n-  class Nested : public X<T> // { dg-message \"required\" \"\" }\n+  class Nested : public X<T> // { dg-message \"required\" }\n   {\n   };\n   \n-  Nested m; // { dg-message \"required\" \"\" }\n+  Nested m; // { dg-message \"required\" }\n   \n   void Foo ();\n };\n \n void Foo (Derived<void> &x)\n {\n-  x.Foo (); // { dg-message \"required\" \"\" }\n+  x.Foo (); // { dg-message \"required\" }\n }"}, {"sha": "a28fd9e66a39860650fdc80d867465a5cbd2f93c", "filename": "gcc/testsuite/g++.dg/template/explicit6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fexplicit6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fexplicit6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fexplicit6.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -5,4 +5,4 @@\n // Bug 19895: ICE on invalid\n \n struct A;\n-template A<>::A(); // { dg-error \"(not a template)|(explicit qualification)\" \"\" }\n+template A<>::A(); // { dg-error \"(not a template)|(explicit qualification)\" }"}, {"sha": "32e72037fec117c2b9d8ef76d54a892bb2def6a8", "filename": "gcc/testsuite/g++.dg/template/init-list.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finit-list.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finit-list.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finit-list.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -12,6 +12,6 @@ struct Derived : Base<T> {\n };\n \n template<typename T>\n-Derived<T>::Derived() : Base(4) { } // { dg-error \"have any field\" \"\" }\n+Derived<T>::Derived() : Base(4) { } // { dg-error \"have any field\" }\n \n "}, {"sha": "58f96b423b1cf8106531c4571d941d54fa0af935", "filename": "gcc/testsuite/g++.dg/template/local1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flocal1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flocal1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flocal1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -14,7 +14,7 @@ template<class T> void A::f()\n   struct B\n   {\n     void g() {}\n-    static int x;\t// { dg-error \"static.*int A::f\\\\(\\\\)::B::x\" \"\" }\n+    static int x;\t// { dg-error \"static.*int A::f\\\\(\\\\)::B::x\" }\n   };\n }\n "}, {"sha": "ac299fa6db5a69a6e00a16e48c12784609e25853", "filename": "gcc/testsuite/g++.dg/template/lookup2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flookup2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flookup2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flookup2.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -9,10 +9,10 @@ struct B {};\n \n template <typename T> void Bar ()\n {\n-  T::foo (); // { dg-error \"is not a member of\" \"\" }\n+  T::foo (); // { dg-error \"is not a member of\" }\n }\n \n void Foo ()\n {\n-  Bar<B> (); // { dg-message \"required\" \"\" }\n+  Bar<B> (); // { dg-message \"required\" }\n }"}, {"sha": "db6e0427fc74da755cc6c41aefac584f16b893ec", "filename": "gcc/testsuite/g++.dg/template/meminit2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmeminit2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmeminit2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmeminit2.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -14,7 +14,7 @@ struct A : typename O<T>::template I<int> {   // { dg-error \"keyword 'typename'\n \n template <typename T> \n struct B : O<T>::template I<int> {\n-  B() :    O<T>::I<int>()   // { dg-error \"used as template|it is a template\" \"\" }\n+  B() :    O<T>::I<int>()   // { dg-error \"used as template|it is a template\" }\n   {}\n };\n "}, {"sha": "3918bea4246b32e7e9b13a36fdf71e2626c853c0", "filename": "gcc/testsuite/g++.dg/template/nontype25.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype25.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -7,7 +7,7 @@ template<const A* a> class C {};\n template<const B* b> class D {};\n template<B* b> class E {};\n \n-template<const B* b> void f(D<b> &, C<static_cast<const A*>(b)> &) {} // { dg-error \"\" \"\" }\n+template<const B* b> void f(D<b> &, C<static_cast<const A*>(b)> &) {} // { dg-error \"\" }\n template<const B* b> void g(D<b> &, E<const_cast<B*>(b)> &) {} // { dg-error \"\" \"\" { target { ! c++11 } } }\n \n B b;"}, {"sha": "94c077c098aed13045d0a002eeb17b9c27ab06c1", "filename": "gcc/testsuite/g++.dg/template/ptrmem2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem2.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -11,5 +11,5 @@ template <typename T> T A::* Foo (); // { dg-error \"reference\" }\n \n void Baz ()\n {\n-  Foo <int &> (); // { dg-error \"no matching function\" \"\" }\n+  Foo <int &> (); // { dg-error \"no matching function\" }\n }"}, {"sha": "6e2e204e2353c56ce9b936184b7617c38a8fa73d", "filename": "gcc/testsuite/g++.dg/template/qualttp19.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp19.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -26,7 +26,7 @@ int main()\n    // Two typedefs lead to the instant. of the less spec. (\"wrong\") template\n   typedef int& r_type;\n   typedef const r_type cr_type;\n-  call_traits<cr_type>::type_less_spec var  = num; // { dg-error \"\" \"\" }\n+  call_traits<cr_type>::type_less_spec var  = num; // { dg-error \"\" }\n   \n    // The explicit type leads to the instantiation of the \"correct\" one\n   call_traits<const int&>::type_more_spec var2 = num;"}, {"sha": "52989bae538daaf0da159f33bb8fbe058729843b", "filename": "gcc/testsuite/g++.dg/template/qualttp20.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp20.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -16,7 +16,7 @@ struct AS\n \n template <typename T> struct B1 : T\n {\n-  typedef typename T::L __restrict__ r;// { dg-error \"'__restrict__' qualifiers cannot\" \"\" }\n+  typedef typename T::L __restrict__ r;// { dg-error \"'__restrict__' qualifiers cannot\" }\n   typedef typename T::myT __restrict__ p;\n \n   // The following are DR 295 dependent\n@@ -32,5 +32,5 @@ template <typename T> struct B2 : T\n   myconst b;\n };\n \n-B1<AS> b1;\t// { dg-message \"required\" \"\" }\n+B1<AS> b1;\t// { dg-message \"required\" }\n B2<AS> b2;"}, {"sha": "408e1c8bab2dcb5bca9024cf1406e68fb9d2c835", "filename": "gcc/testsuite/g++.dg/template/ttp3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp3.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -14,7 +14,7 @@ class OUTER {\n   template <class T>\n   class List { };\n   \n-  vector<class List> data; // { dg-error \"invalid|required|ISO C\" \"\" }\n+  vector<class List> data; // { dg-error \"invalid|required|ISO C\" }\n };\n \n template <class T>\n@@ -23,4 +23,4 @@ class List { };\n // This next line should just do a lookup of 'class List', and then\n // get a type/value mismatch. Instead we try and push 'class List'\n // into the global namespace and get a redeclaration error.\n-vector<class List > data;\t// { dg-error \"invalid|required|declaration\" \"\" }\n+vector<class List > data;\t// { dg-error \"invalid|required|declaration\" }"}, {"sha": "1cda4a091a163d09bfea2e551bfd975a54ca1352", "filename": "gcc/testsuite/g++.dg/template/unify4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify4.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -15,4 +15,4 @@ struct A { int i; };\n \n static void f (int A::* pmi) { }\n \n-int main () { f (null); } // { dg-error \"cannot convert\" \"\" }\n+int main () { f (null); } // { dg-error \"cannot convert\" }"}, {"sha": "95e24a255a735d536aa9b213aa328b5e73ce3707", "filename": "gcc/testsuite/g++.dg/template/unify6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify6.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -18,6 +18,6 @@ void Bar ()\n \n   Foo3 (&Baz);\n \n-  Foo3 (&Baz, &Baz); // { dg-error \"no matching function\" \"\" }\n+  Foo3 (&Baz, &Baz); // { dg-error \"no matching function\" }\n   // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } .-1 }\n }"}, {"sha": "9dac57a5c419267472321a391b93ddd971d6f160", "filename": "gcc/testsuite/g++.dg/template/unify7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify7.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -10,6 +10,6 @@ int &f ();\n int main()\n {\n   Foo (f);\n-  Baz (f); // { dg-error \"no matching function\" \"\" }\n+  Baz (f); // { dg-error \"no matching function\" }\n   // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } .-1 }\n }"}, {"sha": "53b04ec6b86865bd3e62b50f587e067a050c8af7", "filename": "gcc/testsuite/g++.dg/template/warn1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fwarn1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fwarn1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fwarn1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -9,8 +9,8 @@\n template <class T>  void Foo(T i) \n { \n   i++, i++;\n-  i, i++; // { dg-warning \"left operand\" \"\" }\n-  i++, i; // { dg-warning \"right operand\" \"\" }\n+  i, i++; // { dg-warning \"left operand\" }\n+  i++, i; // { dg-warning \"right operand\" }\n   for (;; --i, ++i)\n     ;\n } "}, {"sha": "41343ee420611801e5c8e6638d890cdaa3b17d5f", "filename": "gcc/testsuite/g++.dg/tree-ssa/dom-invalid.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fdom-invalid.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fdom-invalid.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fdom-invalid.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -49,4 +49,4 @@ main ()\n {\n  E e;\n  e.bar ();\n-} // { dg-message  \"note: file\" \"\" }\n+} // { dg-message  \"note: file\" }"}, {"sha": "e98bb084223e695163a5e613030dbfad08ae8a4c", "filename": "gcc/testsuite/g++.dg/ubsan/shift-1.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fshift-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fshift-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fshift-1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -8,10 +8,10 @@ foo (int x)\n   /* None of the following should pass.  */\n   switch (x)\n     {\n-    case 1 >> -1: /* { dg-error \"operand of shift\" \"\" } */\n-    case -1 >> -1: /* { dg-error \"operand of shift\" \"\" } */\n-    case 1 << -1: /* { dg-error \"operand of shift\" \"\" } */\n-    case -1 << -1: /* { dg-error \"operand of shift\" \"\" } */\n+    case 1 >> -1: /* { dg-error \"operand of shift\" } */\n+    case -1 >> -1: /* { dg-error \"operand of shift\" } */\n+    case 1 << -1: /* { dg-error \"operand of shift\" } */\n+    case -1 << -1: /* { dg-error \"operand of shift\" } */\n       return 1;\n     }\n   return 0;\n@@ -23,8 +23,8 @@ bar (int x)\n   /* None of the following should pass.  */\n   switch (x)\n     {\n-    case -1 >> 200: /* { dg-error \"operand of shift\" \"\" } */\n-    case 1 << 200: /* { dg-error \"operand of shift\" \"\" } */\n+    case -1 >> 200: /* { dg-error \"operand of shift\" } */\n+    case 1 << 200: /* { dg-error \"operand of shift\" } */\n       return 1;\n     }\n   return 0;"}, {"sha": "9cdd11e84a6fc166f54c7149924b6e072c65f08e", "filename": "gcc/testsuite/g++.dg/warn/Wunused-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-2.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -2,5 +2,5 @@\n // { dg-options \"-Wunused -O3\" }\n \n static const int i = 0;\n-static void f() { }\t\t/* { dg-warning \"defined but not used\" \"\" } */\n+static void f() { }\t\t/* { dg-warning \"defined but not used\" } */\n static inline void g() { }"}, {"sha": "978f335911546a75202f10f00c023e860fb19ed9", "filename": "gcc/testsuite/g++.dg/warn/Wunused-4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-4.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -10,11 +10,11 @@\n \n struct C1 {\n   // Only use in-charge ctor\n-  C1(int bi) {}  // { dg-warning \"unused parameter\" \"\" }\n+  C1(int bi) {}  // { dg-warning \"unused parameter\" }\n };\n struct C2 {\n   // Only use base ctor\n-  C2(int bi) {}  // { dg-warning \"unused parameter\" \"\" }\n+  C2(int bi) {}  // { dg-warning \"unused parameter\" }\n };\n \n struct D : C2"}, {"sha": "198fe9698749806e2f708a5d3f64582c35ace9c0", "filename": "gcc/testsuite/g++.dg/warn/Wunused-6.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-6.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -5,7 +5,7 @@\n void foo()\n {\n   if (false)\n-    if (int i=0)  // { dg-warning \"unused\" \"\" }\n-      int j=0;    // { dg-warning \"unused\" \"\" }\n+    if (int i=0)  // { dg-warning \"unused\" }\n+      int j=0;    // { dg-warning \"unused\" }\n }\n "}, {"sha": "a2c4b58033a0b8f07ca141991cd358ea460ba507", "filename": "gcc/testsuite/g++.dg/warn/deprecated-6.C", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated-6.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -5,25 +5,25 @@\n typedef int INT1 __attribute__((deprecated(\"Please avoid INT1\")));\n typedef INT1 INT2 __attribute__ ((__deprecated__(\"Please avoid INT2\")));\n \n-typedef INT1 INT1a; \t\t\t/* { dg-warning \"'INT1' is deprecated: Please avoid INT1\" \"\" } */\n+typedef INT1 INT1a; \t\t\t/* { dg-warning \"'INT1' is deprecated: Please avoid INT1\" } */\n \n-INT1 should_be_unavailable; \t\t/* { dg-warning \"'INT1' is deprecated: Please avoid INT1\" \"\" } */\n+INT1 should_be_unavailable; \t\t/* { dg-warning \"'INT1' is deprecated: Please avoid INT1\" } */\n INT1a should_not_be_deprecated;\n \n INT1 f1(void) __attribute__ ((deprecated(\"Please avoid f1\"))); \n-INT1 f2(void) { return 0; }\t\t/* { dg-warning \"'INT1' is deprecated: Please avoid INT1\" \"\" } */\n+INT1 f2(void) { return 0; }\t\t/* { dg-warning \"'INT1' is deprecated: Please avoid INT1\" } */\n \n INT2 f3(void) __attribute__ ((__deprecated__(\"Please avoid f3\"))); \n-INT2 f4(void) { return 0; }\t\t/* { dg-warning \"'INT2' is deprecated: Please avoid INT2\" \"\" } */\n-int f5(INT2 x);\t\t\t\t/* { dg-warning \"'INT2' is deprecated\" \"\" } */\n+INT2 f4(void) { return 0; }\t\t/* { dg-warning \"'INT2' is deprecated: Please avoid INT2\" } */\n+int f5(INT2 x);\t\t\t\t/* { dg-warning \"'INT2' is deprecated\" } */\n int f6(INT2 x) __attribute__ ((__deprecated__(\"Please avoid f6\")));\n \n typedef enum Color {red, green, blue} Color __attribute__((deprecated(\"Please avoid Color\")));\n \n int g1;\n int g2 __attribute__ ((deprecated(\"Please avoid g2\")));\n int g3 __attribute__ ((__deprecated__(\"Please avoid g3\")));\n-Color k;\t\t\t\t/* { dg-warning \"'Color' is deprecated: Please avoid Color\" \"\" } */\n+Color k;\t\t\t\t/* { dg-warning \"'Color' is deprecated: Please avoid Color\" } */\n \n typedef struct {\n   int field1;\n@@ -44,13 +44,13 @@ typedef struct {\n \n int func1()\n {\n-   INT1 w;\t\t\t\t/* { dg-warning \"'INT1' is deprecated: Please avoid INT1\" \"\" } */\n+   INT1 w;\t\t\t\t/* { dg-warning \"'INT1' is deprecated: Please avoid INT1\" } */\n    int x __attribute__ ((deprecated(\"Please avoid x\")));\n    int y __attribute__ ((__deprecated__(\"Please avoid y\")));\n    int z;\n-   int (*pf)() = f1;\t\t\t/* { dg-warning \"'INT1 f1\\\\(\\\\)' is deprecated: Please avoid f1\" \"\" } */\n+   int (*pf)() = f1;\t\t\t/* { dg-warning \"'INT1 f1\\\\(\\\\)' is deprecated: Please avoid f1\" } */\n \n-   z = w + x + y + g1 + g2 + g3;\t/* { dg-warning \"'x' is deprecated: Please avoid x\" \"\" } */\n+   z = w + x + y + g1 + g2 + g3;\t/* { dg-warning \"'x' is deprecated: Please avoid x\" } */\n \t\t\t\t\t/* { dg-warning \"'y' is deprecated: Please avoid y\" \"y\" { target *-*-* } .-1 } */\n \t\t\t\t\t/* { dg-warning \"'g2' is deprecated: Please avoid g2\" \"g2\" { target *-*-* } .-2 } */\n \t\t\t\t\t/* { dg-warning \"'g3' is deprecated: Please avoid g3\" \"g3\" { target *-*-* } .-3 } */\n@@ -62,34 +62,34 @@ int func2(S1 *p)\n   S1 lp;\n   \n   if (p->field1)\n-     return p->field2;\t\t\t/* { dg-warning \"'S1::field2' is deprecated: Please avoid field2\" \"\" } */\n-  else if (lp.field4)\t\t\t/* { dg-warning \"'S1::field4' is deprecated: Please avoid field4\" \"\" } */\n+     return p->field2;\t\t\t/* { dg-warning \"'S1::field2' is deprecated: Please avoid field2\" } */\n+  else if (lp.field4)\t\t\t/* { dg-warning \"'S1::field4' is deprecated: Please avoid field4\" } */\n      return p->field3;\n   \n   p->u1.field5 = g1 + p->field7;\n-  p->u2.field9;\t\t\t\t/* { dg-warning \"'S1::u2' is deprecated: Please avoid u2\" \"\" } */\n-  return p->u1.field6 + p->field8;\t/* { dg-warning \"'S1::<unnamed union>::field6' is deprecated: Please avoid field6\" \"\" } */\n+  p->u2.field9;\t\t\t\t/* { dg-warning \"'S1::u2' is deprecated: Please avoid u2\" } */\n+  return p->u1.field6 + p->field8;\t/* { dg-warning \"'S1::<unnamed union>::field6' is deprecated: Please avoid field6\" } */\n \t\t\t\t\t/* { dg-warning \"'S1::field8' is deprecated: Please avoid field8\" \"field8\" { target *-*-* } .-1 } */\n }\n \n struct SS1 {\n   int x;\n-  INT1 y; \t\t\t\t/* { dg-warning \"'INT1' is deprecated: Please avoid INT1\" \"\" } */\n+  INT1 y; \t\t\t\t/* { dg-warning \"'INT1' is deprecated: Please avoid INT1\" } */\n } __attribute__ ((deprecated(\"Please avoid SS1\")));\n \n-struct SS1 *p1;\t\t\t\t/* { dg-warning \"'SS1' is deprecated: Please avoid SS1\" \"\" } */\n+struct SS1 *p1;\t\t\t\t/* { dg-warning \"'SS1' is deprecated: Please avoid SS1\" } */\n \n struct __attribute__ ((__deprecated__(\"Please avoid SS2\"))) SS2 {\n   int x;\n-  INT1 y; \t\t\t\t/* { dg-warning \"'INT1' is deprecated: Please avoid INT1\" \"\" } */\n+  INT1 y; \t\t\t\t/* { dg-warning \"'INT1' is deprecated: Please avoid INT1\" } */\n };\n \n-struct SS2 *p2;\t\t\t\t/* { dg-warning \"'SS2' is deprecated: Please avoid SS2\" \"\" } */\n+struct SS2 *p2;\t\t\t\t/* { dg-warning \"'SS2' is deprecated: Please avoid SS2\" } */\n \n class T {\n   public:\n     void member1(int) __attribute__ ((deprecated(\"Please avoid member1\")));\n-    void member2(INT1) __attribute__ ((__deprecated__(\"Please avoid member2\"))); /* { dg-warning \"'INT1' is deprecated\" \"\" } */\n+    void member2(INT1) __attribute__ ((__deprecated__(\"Please avoid member2\"))); /* { dg-warning \"'INT1' is deprecated\" } */\n     int member3(T *);\n     int x;\n } __attribute__ ((deprecated(\"Please avoid T\")));\n@@ -100,11 +100,11 @@ inline void T::member1(int) {}\n \n int T::member3(T *p)\t\t// { dg-warning \"'T' is deprecated: Please avoid T\" }\n {\n-  p->member1(1);\t\t\t/* { dg-warning \"'void T::member1\\\\(int\\\\)' is deprecated: Please avoid member1\" \"\" } */\n-  (*p).member1(2);\t\t\t/* { dg-warning \"'void T::member1\\\\(int\\\\)' is deprecated: Please avoid member1\" \"\" } */\n-  p->member2(1);\t\t\t/* { dg-warning \"'void T::member2\\\\(INT1\\\\)' is deprecated: Please avoid member2\" \"\" } */\n-  (*p).member2(2);\t\t\t/* { dg-warning \"'void T::member2\\\\(INT1\\\\)' is deprecated: Please avoid member2\" \"\" } */\n+  p->member1(1);\t\t\t/* { dg-warning \"'void T::member1\\\\(int\\\\)' is deprecated: Please avoid member1\" } */\n+  (*p).member1(2);\t\t\t/* { dg-warning \"'void T::member1\\\\(int\\\\)' is deprecated: Please avoid member1\" } */\n+  p->member2(1);\t\t\t/* { dg-warning \"'void T::member2\\\\(INT1\\\\)' is deprecated: Please avoid member2\" } */\n+  (*p).member2(2);\t\t\t/* { dg-warning \"'void T::member2\\\\(INT1\\\\)' is deprecated: Please avoid member2\" } */\n   p->member3(p);\n   (*p).member3(p);\n-  return f1(); \t\t\t\t/* { dg-warning \"'INT1 f1\\\\(\\\\)' is deprecated: Please avoid f1\" \"\" } */\n+  return f1(); \t\t\t\t/* { dg-warning \"'INT1 f1\\\\(\\\\)' is deprecated: Please avoid f1\" } */\n }"}, {"sha": "8b89a34a2dab52469a4ef64fcfa0ba197b8b62a3", "filename": "gcc/testsuite/g++.dg/warn/deprecated.C", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -6,26 +6,26 @@\n typedef int INT1 __attribute__((deprecated));\n typedef INT1 INT2 __attribute__ ((__deprecated__));\n \n-typedef INT1 INT1a; \t\t\t/* { dg-warning \"'INT1' is deprecated\" \"\" } */\n+typedef INT1 INT1a; \t\t\t/* { dg-warning \"'INT1' is deprecated\" } */\n typedef INT1 INT1b __attribute__ ((deprecated));\n \n-INT1 should_be_unavailable; \t\t/* { dg-warning \"'INT1' is deprecated\" \"\" } */\n+INT1 should_be_unavailable; \t\t/* { dg-warning \"'INT1' is deprecated\" } */\n INT1a should_not_be_deprecated;\n \n INT1 f1(void) __attribute__ ((deprecated)); \n-INT1 f2(void) { return 0; }\t\t/* { dg-warning \"'INT1' is deprecated\" \"\" } */\n+INT1 f2(void) { return 0; }\t\t/* { dg-warning \"'INT1' is deprecated\" } */\n \n INT2 f3(void) __attribute__ ((__deprecated__)); \n-INT2 f4(void) { return 0; }\t\t/* { dg-warning \"'INT2' is deprecated\" \"\" } */\n-int f5(INT2 x);\t\t\t\t/* { dg-warning \"'INT2' is deprecated\" \"\" } */\n+INT2 f4(void) { return 0; }\t\t/* { dg-warning \"'INT2' is deprecated\" } */\n+int f5(INT2 x);\t\t\t\t/* { dg-warning \"'INT2' is deprecated\" } */\n int f6(INT2 x) __attribute__ ((__deprecated__));\n \n typedef enum Color {red, green, blue} Color __attribute__((deprecated));\n \n int g1;\n int g2 __attribute__ ((deprecated));\n int g3 __attribute__ ((__deprecated__));\n-Color k;\t\t\t\t/* { dg-warning \"'Color' is deprecated\" \"\" } */\n+Color k;\t\t\t\t/* { dg-warning \"'Color' is deprecated\" } */\n \n typedef struct {\n   int field1;\n@@ -46,13 +46,13 @@ typedef struct {\n \n int func1()\n {\n-   INT1 w;\t\t\t\t/* { dg-warning \"'INT1' is deprecated\" \"\" } */\n+   INT1 w;\t\t\t\t/* { dg-warning \"'INT1' is deprecated\" } */\n    int x __attribute__ ((deprecated));\n    int y __attribute__ ((__deprecated__));\n    int z;\n-   int (*pf)() = f1;\t\t\t/* { dg-warning \"'INT1 f1\\\\(\\\\)' is deprecated\" \"\" } */\n+   int (*pf)() = f1;\t\t\t/* { dg-warning \"'INT1 f1\\\\(\\\\)' is deprecated\" } */\n \n-   z = w + x + y + g1 + g2 + g3;\t/* { dg-warning \"'x' is deprecated\" \"\" } */\n+   z = w + x + y + g1 + g2 + g3;\t/* { dg-warning \"'x' is deprecated\" } */\n    \t\t\t\t\t/* { dg-warning \"'y' is deprecated\" \"y\" { target *-*-* } .-1 } */\n    \t\t\t\t\t/* { dg-warning \"'g2' is deprecated\" \"g2\" { target *-*-* } .-2 } */\n    \t\t\t\t\t/* { dg-warning \"'g3' is deprecated\" \"g3\" { target *-*-* } .-3 } */\n@@ -64,36 +64,36 @@ int func2(S1 *p)\n   S1 lp;\n   \n   if (p->field1)\n-     return p->field2;\t\t\t/* { dg-warning \"'S1::field2' is deprecated\" \"\" } */\n-  else if (lp.field4)\t\t\t/* { dg-warning \"'S1::field4' is deprecated\" \"\" } */\n+     return p->field2;\t\t\t/* { dg-warning \"'S1::field2' is deprecated\" } */\n+  else if (lp.field4)\t\t\t/* { dg-warning \"'S1::field4' is deprecated\" } */\n      return p->field3;\n   \n   p->u1.field5 = g1 + p->field7;\n-  p->u2.field9;\t\t\t\t/* { dg-warning \"'S1::u2' is deprecated\" \"\" } */\n-  return p->u1.field6 + p->field8;\t/* { dg-warning \"'S1::<unnamed union>::field6' is deprecated\" \"\" } */\n+  p->u2.field9;\t\t\t\t/* { dg-warning \"'S1::u2' is deprecated\" } */\n+  return p->u1.field6 + p->field8;\t/* { dg-warning \"'S1::<unnamed union>::field6' is deprecated\" } */\n   \t\t\t\t\t/* { dg-warning \"'S1::field8' is deprecated\" \"field8\" { target *-*-* } .-1 } */\n }\n \n struct SS1 {\n   int x;\n-  INT1 y; \t\t\t\t/* { dg-warning \"'INT1' is deprecated\" \"\" } */\n+  INT1 y; \t\t\t\t/* { dg-warning \"'INT1' is deprecated\" } */\n } __attribute__ ((deprecated));\n \n-struct SS1 *p1;\t\t\t\t/* { dg-warning \"'SS1' is deprecated\" \"\" } */\n+struct SS1 *p1;\t\t\t\t/* { dg-warning \"'SS1' is deprecated\" } */\n \n struct __attribute__ ((__deprecated__)) SS2 {\n   int x;\n-  INT1 y; \t\t\t\t/* { dg-warning \"'INT1' is deprecated\" \"\" } */\n+  INT1 y; \t\t\t\t/* { dg-warning \"'INT1' is deprecated\" } */\n };\n \n-struct SS2 *p2;\t\t\t\t/* { dg-warning \"'SS2' is deprecated\" \"\" } */\n+struct SS2 *p2;\t\t\t\t/* { dg-warning \"'SS2' is deprecated\" } */\n #endif\n \n #ifdef __cplusplus\n class T {\n   public:\n     void member1(int) __attribute__ ((deprecated));\n-    void member2(INT1) __attribute__ ((__deprecated__)); /* { dg-warning \"'INT1' is deprecated\" \"\" } */\n+    void member2(INT1) __attribute__ ((__deprecated__)); /* { dg-warning \"'INT1' is deprecated\" } */\n     int member3(T *);\n     int x;\n } __attribute__ ((deprecated));\n@@ -104,13 +104,13 @@ inline void T::member1(int) {}\n \n int T::member3(T *p)\t\t// { dg-warning \"'T' is deprecated\" }\n {\n-  p->member1(1);\t\t\t/* { dg-warning \"'void T::member1\\\\(int\\\\)' is deprecated\" \"\" } */\n-  (*p).member1(2);\t\t\t/* { dg-warning \"'void T::member1\\\\(int\\\\)' is deprecated\" \"\" } */\n-  p->member2(1);\t\t\t/* { dg-warning \"'void T::member2\\\\(INT1\\\\)' is deprecated\" \"\" } */\n-  (*p).member2(2);\t\t\t/* { dg-warning \"'void T::member2\\\\(INT1\\\\)' is deprecated\" \"\" } */\n+  p->member1(1);\t\t\t/* { dg-warning \"'void T::member1\\\\(int\\\\)' is deprecated\" } */\n+  (*p).member1(2);\t\t\t/* { dg-warning \"'void T::member1\\\\(int\\\\)' is deprecated\" } */\n+  p->member2(1);\t\t\t/* { dg-warning \"'void T::member2\\\\(INT1\\\\)' is deprecated\" } */\n+  (*p).member2(2);\t\t\t/* { dg-warning \"'void T::member2\\\\(INT1\\\\)' is deprecated\" } */\n   p->member3(p);\n   (*p).member3(p);\n-  return f1(); \t\t\t\t/* { dg-warning \"'INT1 f1\\\\(\\\\)' is deprecated\" \"\" } */\n+  return f1(); \t\t\t\t/* { dg-warning \"'INT1 f1\\\\(\\\\)' is deprecated\" } */\n }\n #endif\n "}, {"sha": "db36b121304c3fe6903e160c08ca35f3d60aec8d", "filename": "gcc/testsuite/g++.dg/warn/effc1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Feffc1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Feffc1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Feffc1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -10,7 +10,7 @@ class A\n {\n   public:\n   A & operator+=( int );\n-  A & operator+( int ); // { dg-warning \".* should return by value\" \"\" }\n+  A & operator+( int ); // { dg-warning \".* should return by value\" }\n   A operator+=( float );\n   A operator+( float );\n };"}, {"sha": "7480b2941d5d196da6b50ef40d239a43cefded26", "filename": "gcc/testsuite/g++.dg/warn/effc3.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Feffc3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Feffc3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Feffc3.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -28,20 +28,20 @@ struct B {\n \n \n // We should emit a warning for these\n-struct C1 {\t\t// { dg-warning \"\" \"\" }\n+struct C1 {\t\t// { dg-warning \"\" }\n   int *ptr;\n   C1();\n   ~C1();\n };\n \n-struct C2 {\t\t// { dg-warning \"\" \"\" }\n+struct C2 {\t\t// { dg-warning \"\" }\n   int *ptr;\n   C2();\n   C2(const C2&);\n   ~C2();\n };\n \n-struct C3 {\t\t// { dg-warning \"\" \"\" }\n+struct C3 {\t\t// { dg-warning \"\" }\n   int *ptr;\n   C3();\n   ~C3();"}, {"sha": "8f21f7bfa3fb539591c625136d5133083708c226", "filename": "gcc/testsuite/g++.dg/warn/incomplete1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fincomplete1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fincomplete1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fincomplete1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -9,9 +9,9 @@\n // (But the deletion does not constitute an ill-formed program. So the\n // program should nevertheless compile, but it should give a warning.)\n \n-class A;\t// { dg-message \"forward declaration of 'class A'\" \"\" }\n+class A;\t// { dg-message \"forward declaration of 'class A'\" }\n \n-A *a;\t\t// { dg-warning \"'a' has incomplete type\" \"\" }\n+A *a;\t\t// { dg-warning \"'a' has incomplete type\" }\n \n int\n main (int argc, char **argv)"}, {"sha": "05b34fe0eed05ff7422a09ed80e10604f41101f3", "filename": "gcc/testsuite/g++.dg/warn/inline1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Finline1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Finline1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Finline1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -5,9 +5,9 @@\n \n // PR 4803. Used inline functions must have a definition.\n \n-inline void Foo1 ();  // { dg-warning \"inline function\" \"\" }\n+inline void Foo1 ();  // { dg-warning \"inline function\" }\n inline void Bar1 ();\n-template <typename T> inline void Foo2(T);   // { dg-warning \"inline function\" \"\" }\n+template <typename T> inline void Foo2(T);   // { dg-warning \"inline function\" }\n template <typename T> inline void Bar2(T);\n \n void Baz ()"}, {"sha": "773a929a4f8ee1c784a4e62cfc146d8280870bda", "filename": "gcc/testsuite/g++.dg/warn/noeffect2.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoeffect2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoeffect2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoeffect2.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -10,11 +10,11 @@\n extern \"C\" void FormatDisk();\n   template <class T>\n   struct C {\n-    C(){ FormatDisk(), 0; }  // { dg-warning \"right operand of comma\" \"\" }\n+    C(){ FormatDisk(), 0; }  // { dg-warning \"right operand of comma\" }\n   };\n   template struct C<int>; // { dg-message \"required\" }\n   template <class T>\n-  void f() { FormatDisk(), 0; } // { dg-warning \"right operand of comma\" \"\" }\n+  void f() { FormatDisk(), 0; } // { dg-warning \"right operand of comma\" }\n   template void f<int> (); // { dg-message \"required\" }\n-void g() { FormatDisk(), 0; } // { dg-warning \"right operand of comma\" \"\" }\n+void g() { FormatDisk(), 0; } // { dg-warning \"right operand of comma\" }\n "}, {"sha": "1d451d97165d0b51fe050bfecd1039def0d58d40", "filename": "gcc/testsuite/g++.dg/warn/noeffect4.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoeffect4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoeffect4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoeffect4.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -79,10 +79,10 @@ template<int I> void Foo (X &x)\n   reinterpret_cast<int> (x.Foo ()); // { dg-error \"invalid cast\" }\n   const_cast<X &> (x.Foo ());       // { dg-warning \"not used\" }\n   \n-  reinterpret_cast<int *> (&x);// { dg-warning \"no effect\" \"\" }\n-  const_cast<X &> (x);         // { dg-warning \"no effect\" \"\" }\n-  sizeof (x++);                // { dg-warning \"no effect\" \"\" }\n-  __alignof__ (x++);           // { dg-warning \"no effect\" \"\" }\n+  reinterpret_cast<int *> (&x);// { dg-warning \"no effect\" }\n+  const_cast<X &> (x);         // { dg-warning \"no effect\" }\n+  sizeof (x++);                // { dg-warning \"no effect\" }\n+  __alignof__ (x++);           // { dg-warning \"no effect\" }\n }\n \n template void Foo<4> (X&);     // { dg-message \"required\" }"}, {"sha": "d0ca10cd1b430f3886916cd291e42ca0f9cfaf28", "filename": "gcc/testsuite/g++.dg/warn/oldcast1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foldcast1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foldcast1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foldcast1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -9,7 +9,7 @@\n void foo ()\n {\n   int i;\n-  float f = (float)i;  // { dg-warning \"use of old-style cast\" \"\" }\n+  float f = (float)i;  // { dg-warning \"use of old-style cast\" }\n \n   (void)i;\n }"}, {"sha": "7fe81c1c24f85112c934c36526c2105a9f03ebdd", "filename": "gcc/testsuite/g++.dg/warn/sentinel.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fsentinel.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fsentinel.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fsentinel.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -4,8 +4,8 @@ extern void ex (int i, ...) __attribute__ ((__sentinel__(0)));\n \n void f()\n {\n-  ex (1, 0);\t\t/* { dg-warning \"missing sentinel in function call\" \"\" } */\n-  ex (1, 0L);\t\t/* { dg-warning \"missing sentinel in function call\" \"\" } */\n+  ex (1, 0);\t\t/* { dg-warning \"missing sentinel in function call\" } */\n+  ex (1, 0L);\t\t/* { dg-warning \"missing sentinel in function call\" } */\n   ex (1, (void *)0);\n   ex (1, __null);\t/* { dg-bogus \"sentinel\" } */\n }"}, {"sha": "c7a71293250ea6d0dcca917f5dadd18d23f8cad7", "filename": "gcc/testsuite/g++.dg/warn/unit-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Funit-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Funit-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Funit-1.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -5,6 +5,6 @@ struct a { int mode; };\n int sys_msgctl (void)\n {\n   struct a setbuf;\n-  return setbuf.mode;  /* { dg-warning \"'setbuf.a::mode' is used\" \"\" } */\n+  return setbuf.mode;  /* { dg-warning \"'setbuf.a::mode' is used\" } */\n }\n "}, {"sha": "1df951a9661d74e96220eef7518f025cb8b1b7b0", "filename": "gcc/testsuite/g++.old-deja/g++.pt/inherit2.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Finherit2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Finherit2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Finherit2.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -24,8 +24,8 @@ template <class T> class B\n   static T value_AC;\n };\n template <typename T> T B<T>::valueA_AA;\n-template <typename T> T B<T>::valueA_AC;// { dg-message \"\" \"\" } private - \n-template <typename T> T B<T>::value_AC;\t// { dg-bogus \"\" \"\" }  - \n+template <typename T> T B<T>::valueA_AC;// { dg-message \"\" } private - \n+template <typename T> T B<T>::value_AC;\t// { dg-bogus \"\" }  - \n \n // this one is a friend\n template <class T> struct A<T>::AA\n@@ -41,7 +41,7 @@ template <class T> struct A<T>::AC\n {\n   T M ()\n   {\n-    return B<T>::valueA_AC;\t// { dg-error \"\" \"\" } within this context - \n+    return B<T>::valueA_AC;\t// { dg-error \"\" } within this context - \n   }\n };\n \n@@ -50,7 +50,7 @@ struct AC\n {\n   int M ()\n   {\n-    return B<int>::value_AC;\t// { dg-bogus \"\" \"\" }  - \n+    return B<int>::value_AC;\t// { dg-bogus \"\" }  - \n   }\n };\n "}, {"sha": "87534c1fe2cba57f70a423aa4e6545b3647993f3", "filename": "gcc/testsuite/g++.old-deja/g++.pt/overload8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Foverload8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Foverload8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Foverload8.C?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -7,6 +7,6 @@ struct baz;\n void operator*(baz&, double);\n \n template <class T> inline T operator*(double s, const T &p)\n-  ; // { dg-bogus \"\" \"\" }  - must have argument of class type - \n+  ; // { dg-bogus \"\" }  - must have argument of class type - \n \n void m(baz& a) { a * .5; }"}, {"sha": "e70596f08f3d7b4b1960c03ee7d041af8bccf3b8", "filename": "gcc/testsuite/gcc.dg/20000926-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2F20000926-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2F20000926-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20000926-1.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -22,6 +22,6 @@ struct PLAYBOOK playbook  =\n {\n   \"BookName\",\n   {\n-    { 1, \"PName0\" }, /* { dg-warning \"(excess elements)|(near initialization)\" \"\" } */\n+    { 1, \"PName0\" }, /* { dg-warning \"(excess elements)|(near initialization)\" } */\n   }\n };"}, {"sha": "ae0924ef280efc4e472294de7303534b7378fbc0", "filename": "gcc/testsuite/gcc.dg/20040223-1.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2F20040223-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2F20040223-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20040223-1.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -7,13 +7,13 @@\n \n int * f( int a)\n {\n-\treturn &a;/* { dg-warning \"address\" \"\" } */\n+\treturn &a;/* { dg-warning \"address\" } */\n }\n \n int * g()\n {\n \tint b = 0;\n-\treturn &b;/* { dg-warning \"address\" \"\" } */\n+\treturn &b;/* { dg-warning \"address\" } */\n }\n \n struct ll\n@@ -23,19 +23,19 @@ struct ll\n \n int *h(struct ll c)\n {\n-  return &c.i;/* { dg-warning \"address\" \"\" } */\n+  return &c.i;/* { dg-warning \"address\" } */\n }\n \n \n struct ll d;\n \n int *i()\n {\n-  return &d.i;/* { dg-bogus \"address\" \"\" } */\n+  return &d.i;/* { dg-bogus \"address\" } */\n }\n \n \n int *j(struct ll *c)\n {\n-  return &c->i; /* { dg-bogus \"address\" \"\" } */\n+  return &c->i; /* { dg-bogus \"address\" } */\n }"}, {"sha": "a32492ccc7aa0f5e6472e6c0f9113fb66136ca7e", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-7.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -7,7 +7,7 @@ int main()\n {\n   p = \"\";\n   if (p[0] == 0\n-      || (p[0] == '_' && p[1] == 0))  /* { dg-bogus \"array bounds\" \"\" } */\n+      || (p[0] == '_' && p[1] == 0))  /* { dg-bogus \"array bounds\" } */\n     return 0;\n   return 1;\n }"}, {"sha": "17fb1f7deddac940df29ddf6657e1f50e7ee1300", "filename": "gcc/testsuite/gcc.dg/alias-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Falias-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Falias-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Falias-1.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -19,9 +19,9 @@ YYSTYPE\n  addSibMacro(\n          YYSTYPE  list )\n  {\n-     tDefEntry** ppT   = (tDefEntry**)&list; // { dg-warning \"type-punned pointer will\" \"\" }\n+     tDefEntry** ppT   = (tDefEntry**)&list; // { dg-warning \"type-punned pointer will\" }\n  \n-     struct incomplete *p = (struct incomplete *)&list; // { dg-warning \"type-punning to incomplete\" \"\" }\n+     struct incomplete *p = (struct incomplete *)&list; // { dg-warning \"type-punning to incomplete\" }\n      \n      return list;\n  }"}, {"sha": "4d69453f48315da6bb6671707a8b24b6f2ac356a", "filename": "gcc/testsuite/gcc.dg/alias-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Falias-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Falias-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Falias-12.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-require-alias \"\" } */\n /* { dg-options \"-O2\" } */\n-static void f (void) __attribute__((alias(\"f\"))); // { dg-error \"part of alias cycle\" \"\" }\n+static void f (void) __attribute__((alias(\"f\"))); // { dg-error \"part of alias cycle\" }\n \n void g ()\n {"}, {"sha": "85e1f8744bc75175f35195b7f7acc3e51626c9bf", "filename": "gcc/testsuite/gcc.dg/alias-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Falias-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Falias-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Falias-13.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-require-alias \"\" } */\n /* { dg-options \"-O2\" } */\n-static void f (void) __attribute__((alias(\"g\"))); static void g (void) __attribute__((alias(\"f\"))); // { dg-error \"part of alias cycle\" \"\" }\n+static void f (void) __attribute__((alias(\"g\"))); static void g (void) __attribute__((alias(\"f\"))); // { dg-error \"part of alias cycle\" }\n \n void h ()\n {"}, {"sha": "ee384066d1ae4b7271e7b2c69d6f0f1e48282bee", "filename": "gcc/testsuite/gcc.dg/alias-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Falias-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Falias-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Falias-2.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -11,6 +11,6 @@ struct foo {\n int\n sub1 (long long int foobar)\n {\n-  struct foo *tmp = (struct foo *) &foobar; // { dg-warning \"type-punned pointer will\" \"\" }\n+  struct foo *tmp = (struct foo *) &foobar; // { dg-warning \"type-punned pointer will\" }\n   return tmp->i;\n }"}, {"sha": "70fd87de8ded4cbe634ac2713fc3189b87cfe6e4", "filename": "gcc/testsuite/gcc.dg/array-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Farray-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Farray-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-13.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -15,7 +15,7 @@ struct g { int w; T0 x; };\n \n static struct f f = { 4, { 0, 1, 2, 3 } };\n static int junk1[] = { -1, -1, -1, -1 };\n-static struct g g = { 4, { 0, 1, 2, 3 } }; /* { dg-warning \"(excess elements)|(near initialization)\" \"\" } */\n+static struct g g = { 4, { 0, 1, 2, 3 } }; /* { dg-warning \"(excess elements)|(near initialization)\" } */\n static int junk2[] = { -1, -1, -1, -1 };\n \n int main()"}, {"sha": "c045e7999ea0876befcfe7becdaab732cb56f701", "filename": "gcc/testsuite/gcc.dg/array-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Farray-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Farray-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-4.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -12,7 +12,7 @@ struct g { int w; int x[0]; };\n \n static struct f f = { 4, { 0, 1, 2, 3 } };\n static int junk1[] = { -1, -1, -1, -1 };\n-static struct g g = { 4, { 0, 1, 2, 3 } }; /* { dg-warning \"(excess elements)|(near initialization)\" \"\" } */\n+static struct g g = { 4, { 0, 1, 2, 3 } }; /* { dg-warning \"(excess elements)|(near initialization)\" } */\n static int junk2[] = { -1, -1, -1, -1 };\n \n int main()"}, {"sha": "8375af9988c3e7d49bd90f4461cda0eaf6454c5e", "filename": "gcc/testsuite/gcc.dg/attr-ifunc-2.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ifunc-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ifunc-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ifunc-2.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -7,22 +7,22 @@ static void *resolver ()\n \n extern int magic (void)  /* { dg-message \"previous definition\" } */\n      __attribute__ ((ifunc (\"resolver\")));\n-extern int magic (void)  /* { dg-error \"redefinition\" \"\" } */\n+extern int magic (void)  /* { dg-error \"redefinition\" } */\n      __attribute__ ((alias (\"resolver\")));\n \n extern int spell (void)  /* { dg-message \"previous definition\" } */\n {\n   return 0;\n }\n-extern int spell (void)  /* { dg-error \"redefinition\" \"\" } */\n+extern int spell (void)  /* { dg-error \"redefinition\" } */\n      __attribute__ ((ifunc (\"resolver\")));\n \n extern int mantra (void)  /* { dg-message \"previous definition\" } */\n      __attribute__ ((alias (\"resolver\")));\n-extern int mantra (void)  /* { dg-error \"redefinition\" \"\" } */\n+extern int mantra (void)  /* { dg-error \"redefinition\" } */\n      __attribute__ ((ifunc (\"resolver\")));\n \n-extern int saying (void)  /* { dg-error \"weak .* cannot be defined\" \"\" } */\n+extern int saying (void)  /* { dg-error \"weak .* cannot be defined\" } */\n      __attribute__ ((weak,ifunc (\"resolver\")));\n-extern int maxim (void) /* { dg-error \"indirect function .* cannot be declared weak\" \"\" } */\n+extern int maxim (void) /* { dg-error \"indirect function .* cannot be declared weak\" } */\n      __attribute__ ((ifunc (\"resolver\"),weak));"}, {"sha": "a3315fa131b1c46659c2364ecd4dd4f680c2e3f6", "filename": "gcc/testsuite/gcc.dg/attr-invalid.c", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-invalid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-invalid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-invalid.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -9,25 +9,25 @@\n \n #define AT noinline\n \n-typedef int ATSYM(type) ATTR; /* { dg-warning \"attribute ignored\" \"\" } */\n+typedef int ATSYM(type) ATTR; /* { dg-warning \"attribute ignored\" } */\n \n-typedef int (*ATSYM(fntype))(void) ATTR; /* { dg-warning \"attribute ignored\" \"\" } */\n+typedef int (*ATSYM(fntype))(void) ATTR; /* { dg-warning \"attribute ignored\" } */\n \n struct ATSYM(struct) {\n-  char dummy ATTR; /* { dg-warning \"attribute ignored\" \"\" } */\n-} ATTR; /* { dg-warning \"does not apply to types\" \"\" } */\n+  char dummy ATTR; /* { dg-warning \"attribute ignored\" } */\n+} ATTR; /* { dg-warning \"does not apply to types\" } */\n \n-int ATSYM(var) ATTR;  /* { dg-warning \"attribute ignored\" \"\" } */\n+int ATSYM(var) ATTR;  /* { dg-warning \"attribute ignored\" } */\n \n int ATSYM(fn_knrarg) (arg)\n-  int arg ATTR; /* { dg-warning \"attribute ignored\" \"\" } */\n+  int arg ATTR; /* { dg-warning \"attribute ignored\" } */\n { return 0; }\n \n-int ATSYM(fn_isoarg) (int arg ATTR) { return 0; } /* { dg-warning \"attribute ignored\" \"\" } */\n+int ATSYM(fn_isoarg) (int arg ATTR) { return 0; } /* { dg-warning \"attribute ignored\" } */\n \n int ATSYM(fn_vars) (void) {\n-  static int svar ATTR; /* { dg-warning \"attribute ignored\" \"\" } */\n-  auto int lvar ATTR; /* { dg-warning \"attribute ignored\" \"\" } */\n+  static int svar ATTR; /* { dg-warning \"attribute ignored\" } */\n+  auto int lvar ATTR; /* { dg-warning \"attribute ignored\" } */\n   return 0;\n }\n \n@@ -42,20 +42,20 @@ typedef int (*ATSYM(fntype))(void) ATTR; /* used attribute is no\n \t\t\t\t\t    longer ignored.  */\n \n struct ATSYM(struct) {\n-  char dummy ATTR; /* { dg-warning \"attribute ignored\" \"\" } */\n-} ATTR; /* { dg-warning \"does not apply to types\" \"\" } */\n+  char dummy ATTR; /* { dg-warning \"attribute ignored\" } */\n+} ATTR; /* { dg-warning \"does not apply to types\" } */\n \n int ATSYM(var) ATTR;\n \n int ATSYM(fn_knrarg) (arg)\n-  int arg ATTR; /* { dg-warning \"attribute ignored\" \"\" } */\n+  int arg ATTR; /* { dg-warning \"attribute ignored\" } */\n { return 0; }\n \n-int ATSYM(fn_isoarg) (int arg ATTR) { return 0; } /* { dg-warning \"attribute ignored\" \"\" } */\n+int ATSYM(fn_isoarg) (int arg ATTR) { return 0; } /* { dg-warning \"attribute ignored\" } */\n \n int ATSYM(fn_vars) (void) {\n   static int svar ATTR;\n-  auto int lvar ATTR; /* { dg-warning \"attribute ignored\" \"\" } */\n+  auto int lvar ATTR; /* { dg-warning \"attribute ignored\" } */\n   return 0;\n }\n \n@@ -66,19 +66,19 @@ int ATSYM(fn_vars) (void) {\n #undef AT\n #define AT weak\n \n-typedef int ATSYM(type) ATTR; /* { dg-warning \"attribute ignored\" \"\" } */\n+typedef int ATSYM(type) ATTR; /* { dg-warning \"attribute ignored\" } */\n \n-typedef int (*ATSYM(fntype))(void) ATTR; /* { dg-warning \"attribute ignored\" \"\" } */\n+typedef int (*ATSYM(fntype))(void) ATTR; /* { dg-warning \"attribute ignored\" } */\n \n struct ATSYM(struct) {\n-  char dummy ATTR; /* { dg-warning \"attribute ignored\" \"\" } */\n+  char dummy ATTR; /* { dg-warning \"attribute ignored\" } */\n };\n \n int ATSYM(fn_knrarg) (arg)\n-  int arg ATTR; /* { dg-warning \"attribute ignored\" \"\" } */\n+  int arg ATTR; /* { dg-warning \"attribute ignored\" } */\n { return 0; }\n \n-int ATSYM(fn_isoarg) (int arg ATTR) { return 0; } /* { dg-warning \"attribute ignored\" \"\" } */\n+int ATSYM(fn_isoarg) (int arg ATTR) { return 0; } /* { dg-warning \"attribute ignored\" } */\n \n \n /* PR target/28648  */\n@@ -87,16 +87,16 @@ int ATSYM(fn_isoarg) (int arg ATTR) { return 0; } /* { dg-warning \"attribute ign\n #undef AT\n #define AT dllimport\n \n-typedef int ATSYM(type) ATTR;  /* { dg-warning \"attribute |directive ignored\" \"\" } */\n+typedef int ATSYM(type) ATTR;  /* { dg-warning \"attribute |directive ignored\" } */\n \n-typedef int (*ATSYM(fntype))(void) ATTR;   /* { dg-warning \"attribute |directive ignored\" \"\" } */\n+typedef int (*ATSYM(fntype))(void) ATTR;   /* { dg-warning \"attribute |directive ignored\" } */\n \n struct ATSYM(struct) {\n-  char dummy ATTR;  /* { dg-warning \"attribute |directive ignored\" \"\" } */\n+  char dummy ATTR;  /* { dg-warning \"attribute |directive ignored\" } */\n };\n \n int ATSYM(fn_knrarg) (arg)\n-  int arg ATTR;  /* { dg-warning \"attribute |directive ignored\" \"\" } */\n+  int arg ATTR;  /* { dg-warning \"attribute |directive ignored\" } */\n { return 0; }\n \n-int ATSYM(fn_isoarg) (int arg ATTR) { return 0; }  /* { dg-warning \"attribute |directive ignored\" \"\" } */\n+int ATSYM(fn_isoarg) (int arg ATTR) { return 0; }  /* { dg-warning \"attribute |directive ignored\" } */"}, {"sha": "c2a5b1ddacf5939149c45a79f67f61101aca7e4b", "filename": "gcc/testsuite/gcc.dg/attr-noinline.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-noinline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-noinline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-noinline.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -3,45 +3,45 @@\n \n extern int t();\n \n-static inline void __attribute__((__noinline__)) function_definition(void) {t();} /* { dg-warning \"inline function \\[^\\n\\]* given attribute noinline\" \"\" } */\n+static inline void __attribute__((__noinline__)) function_definition(void) {t();} /* { dg-warning \"inline function \\[^\\n\\]* given attribute noinline\" } */\n \n-static inline void __attribute__((__noinline__)) function_declaration_both_before(void); /* { dg-warning \"inline function \\[^\\n\\]* given attribute noinline\" \"\" } */\n+static inline void __attribute__((__noinline__)) function_declaration_both_before(void); /* { dg-warning \"inline function \\[^\\n\\]* given attribute noinline\" } */\n \n static void function_declaration_both_before(void) {t();}\n \n static void function_declaration_both_after(void);\n \n-static inline void __attribute__((__noinline__)) function_declaration_both_after(void); /* { dg-warning \"(inline function \\[^\\n\\]* given attribute noinline|declared inline after its definition)\" \"\" } */\n+static inline void __attribute__((__noinline__)) function_declaration_both_after(void); /* { dg-warning \"(inline function \\[^\\n\\]* given attribute noinline|declared inline after its definition)\" } */\n \n static void function_declaration_both_after(void) {t();}\n \n-static void function_declaration_noinline_before(void) __attribute__((__noinline__)); /* { dg-message \"note: previous declaration\" \"\" } */\n+static void function_declaration_noinline_before(void) __attribute__((__noinline__)); /* { dg-message \"note: previous declaration\" } */\n \n-static inline void function_declaration_noinline_before(void) {t();} /* { dg-warning \"follows declaration with attribute noinline\" \"\" } */\n+static inline void function_declaration_noinline_before(void) {t();} /* { dg-warning \"follows declaration with attribute noinline\" } */\n \n-static inline void function_declaration_noinline_after(void) {t();} /* { dg-message \"note: previous definition\" \"\" } */\n+static inline void function_declaration_noinline_after(void) {t();} /* { dg-message \"note: previous definition\" } */\n \n-static void function_declaration_noinline_after(void) __attribute__((__noinline__)); /* { dg-warning \"follows inline declaration\" \"\" } */\n+static void function_declaration_noinline_after(void) __attribute__((__noinline__)); /* { dg-warning \"follows inline declaration\" } */\n \n-static inline void function_declaration_inline_before(void); /* { dg-message \"note: previous declaration\" \"\" } */\n+static inline void function_declaration_inline_before(void); /* { dg-message \"note: previous declaration\" } */\n \n-static void __attribute__((__noinline__)) function_declaration_inline_before(void) {t();} /* { dg-warning \"follows inline declaration\" \"\" } */\n+static void __attribute__((__noinline__)) function_declaration_inline_before(void) {t();} /* { dg-warning \"follows inline declaration\" } */\n \n-static inline void function_declaration_inline_noinline_before(void); /* { dg-message \"note: previous declaration\" \"\" } */\n+static inline void function_declaration_inline_noinline_before(void); /* { dg-message \"note: previous declaration\" } */\n \n-static void function_declaration_inline_noinline_before(void) __attribute__((__noinline__)); /* { dg-warning \"follows inline declaration\" \"\" } */\n+static void function_declaration_inline_noinline_before(void) __attribute__((__noinline__)); /* { dg-warning \"follows inline declaration\" } */\n \n static void function_declaration_inline_noinline_before(void) {t();}\n \n static inline void function_declaration_inline_noinline_after(void);\n \n-static void function_declaration_inline_noinline_after(void) {t();} /* { dg-message \"note: previous definition\" \"\" } */\n+static void function_declaration_inline_noinline_after(void) {t();} /* { dg-message \"note: previous definition\" } */\n \n-static void function_declaration_inline_noinline_after(void) __attribute__((__noinline__)); /* { dg-warning \"follows inline declaration\" \"\" } */\n+static void function_declaration_inline_noinline_after(void) __attribute__((__noinline__)); /* { dg-warning \"follows inline declaration\" } */\n \n-static void function_declaration_noinline_inline_before(void) __attribute__((__noinline__)); /* { dg-message \"note: previous declaration\" \"\" } */\n+static void function_declaration_noinline_inline_before(void) __attribute__((__noinline__)); /* { dg-message \"note: previous declaration\" } */\n \n-static inline void function_declaration_noinline_inline_before(void); /* { dg-warning \"follows declaration with attribute noinline\" \"\" } */\n+static inline void function_declaration_noinline_inline_before(void); /* { dg-warning \"follows declaration with attribute noinline\" } */\n \n static void function_declaration_noinline_inline_before(void) {t();}\n "}, {"sha": "e3f5f1bcc35bf222cebec8c36cd97475a08d2b39", "filename": "gcc/testsuite/gcc.dg/bitfld-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-2.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -11,13 +11,13 @@ struct bf\n   int b: 2;\n };\n \n-struct bf p = {4, 0};\t\t/* { dg-warning \"truncated\" \"\" } */\n-struct bf q = {0, 2};\t\t/* { dg-warning \"overflow\" \"\" } */\n+struct bf p = {4, 0};\t\t/* { dg-warning \"truncated\" } */\n+struct bf q = {0, 2};\t\t/* { dg-warning \"overflow\" } */\n struct bf r = {3, -2};\t\t/* { dg-bogus \"(truncated|overflow)\" } */\n \n void foo ()\n {\n-  p.a = 4, p.b = 0;\t\t/* { dg-warning \"truncated\" \"\" } */\n-  q.a = 0, q.b = 2;\t\t/* { dg-warning \"overflow\" \"\" } */\n+  p.a = 4, p.b = 0;\t\t/* { dg-warning \"truncated\" } */\n+  q.a = 0, q.b = 2;\t\t/* { dg-warning \"overflow\" } */\n   r.a = 3, r.b = -2;\t\t/* { dg-bogus \"(truncated|overflow)\" } */\n }"}, {"sha": "56a147864eb4090cb50995ee0a1aa188aefc4e64", "filename": "gcc/testsuite/gcc.dg/c90-const-expr-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-7.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -8,7 +8,7 @@\n \n int a = DBL_MAX; /* { dg-warning \"overflow in implicit constant conversion\" } */\n /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n-int b = (int) DBL_MAX; /* { dg-error \"overflow\" \"\" } */\n+int b = (int) DBL_MAX; /* { dg-error \"overflow\" } */\n unsigned int c = -1.0; /* { dg-warning \"overflow in implicit constant conversion\" } */\n /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n unsigned int d = (unsigned)-1.0; /* { dg-error \"overflow\" } */"}, {"sha": "c663723c03a501a2d91b10b41b358e4692f1ad94", "filename": "gcc/testsuite/gcc.dg/c99-const-expr-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-7.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -9,7 +9,7 @@\n \n int a = DBL_MAX; /* { dg-warning \"overflow in implicit constant conversion\" } */\n /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n-int b = (int) DBL_MAX; /* { dg-error \"overflow\" \"\" } */\n+int b = (int) DBL_MAX; /* { dg-error \"overflow\" } */\n unsigned int c = -1.0; /* { dg-warning \"overflow in implicit constant conversion\" } */\n /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n unsigned int d = (unsigned)-1.0; /* { dg-error \"overflow\" } */"}, {"sha": "a77aa8c463c8d04aceb90d7ba4bbffb19f71bc27", "filename": "gcc/testsuite/gcc.dg/cpp/20000625-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F20000625-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F20000625-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F20000625-1.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -12,6 +12,6 @@ main(void)\n {\n   goto socket;\n \n-  ENTRY(socket) /* { dg-error \"valid preprocessing token\" \"\" } */\n+  ENTRY(socket) /* { dg-error \"valid preprocessing token\" } */\n     return 0;\n }"}, {"sha": "9ea5e8ab89692489ffdb67fce16ecae22dcc5c6c", "filename": "gcc/testsuite/gcc.dg/cpp/charconst-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcharconst-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcharconst-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcharconst-4.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -38,15 +38,15 @@ extern void abort (void);\n # error Charconst incorrectly sign-extended\n #endif\n \n-#if LONG_CHARCONST != SHORT_CHARCONST /* { dg-warning \"too long\" \"\" } */\n+#if LONG_CHARCONST != SHORT_CHARCONST /* { dg-warning \"too long\" } */\n # error Overly long charconst truncates wrongly for preprocessor\n #endif\n \n int main ()\n {\n   if (POS_CHARCONST < 0)\n     abort ();\n-  if (LONG_CHARCONST != SHORT_CHARCONST)  /* { dg-warning \"too long\" \"\" } */\n+  if (LONG_CHARCONST != SHORT_CHARCONST)  /* { dg-warning \"too long\" } */\n     abort ();\n   return 0;\n }"}, {"sha": "00aad0c2103734fbceb86ac7130276825647c710", "filename": "gcc/testsuite/gcc.dg/cpp/include2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Finclude2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Finclude2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Finclude2.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -7,7 +7,7 @@\n \n /* Source: Neil Booth, 4 Nov 2000.  */\n \n-#include <silly\\>>  /* { dg-error \"extra tokens\" \"\" } */\n+#include <silly\\>>  /* { dg-error \"extra tokens\" } */\n \n /* These error is No such file or directory, just once.  However, this\n    message is locale-dependent, so don't test for it.  */"}, {"sha": "4504d95ef08c46221939b01b4f76002d74317a52", "filename": "gcc/testsuite/gcc.dg/cpp/include2a.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Finclude2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Finclude2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Finclude2a.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -7,7 +7,7 @@\n \n /* Source: Neil Booth, 4 Nov 2000.  */\n \n-#include \"silly\\\"\"  /* { dg-error \"extra tokens\" \"\" } */\n+#include \"silly\\\"\"  /* { dg-error \"extra tokens\" } */\n \n /* These error is No such file or directory, just once.  However, this\n    message is locale-dependent, so don't test for it.  */"}, {"sha": "80566f74f14e30abd1120f90d6e05bae50f5d4af", "filename": "gcc/testsuite/gcc.dg/decl-4.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-4.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -1,10 +1,10 @@\n /* Redeclaration of parameters is an error.  PR 13728.  */\n /* { dg-do compile } */\n \n-void f (int fred,\t/* { dg-message \"note: previous definition\" \"\" } */\n-\tint fred);\t/* { dg-error \"redefinition of parameter\" \"\" } */\n+void f (int fred,\t/* { dg-message \"note: previous definition\" } */\n+\tint fred);\t/* { dg-error \"redefinition of parameter\" } */\n \n-void f2 (int fred,\t/* { dg-message \"note: previous definition\" \"\" } */\n-\t int fred)\t/* { dg-error \"redefinition of parameter\" \"\" } */\n+void f2 (int fred,\t/* { dg-message \"note: previous definition\" } */\n+\t int fred)\t/* { dg-error \"redefinition of parameter\" } */\n {\n }"}, {"sha": "e8f08176fd7b4abfd9a3d14e0504304a16d64d14", "filename": "gcc/testsuite/gcc.dg/deprecated-4.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeprecated-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeprecated-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeprecated-4.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -5,26 +5,26 @@\n typedef int INT1 __attribute__((deprecated(\"Please avoid INT1\")));\n typedef INT1 INT2 __attribute__ ((__deprecated__(\"Please avoid INT2\")));\n \n-typedef INT1 INT1a; \t\t\t/* { dg-warning \"'INT1' is deprecated: Please avoid INT1\" \"\" } */\n+typedef INT1 INT1a; \t\t\t/* { dg-warning \"'INT1' is deprecated: Please avoid INT1\" } */\n typedef INT1 INT1b __attribute__ ((deprecated(\"Please avoid INT1b\")));\n \n-INT1 should_be_unavailable; \t\t/* { dg-warning \"'INT1' is deprecated: Please avoid INT1\" \"\" } */\n+INT1 should_be_unavailable; \t\t/* { dg-warning \"'INT1' is deprecated: Please avoid INT1\" } */\n INT1a should_not_be_deprecated;\n \n INT1 f1(void) __attribute__ ((deprecated(\"Please avoid f1\"))); \n-INT1 f2(void) { return 0; }\t\t/* { dg-warning \"'INT1' is deprecated: Please avoid INT1\" \"\" } */\n+INT1 f2(void) { return 0; }\t\t/* { dg-warning \"'INT1' is deprecated: Please avoid INT1\" } */\n \n INT2 f3(void) __attribute__ ((__deprecated__(\"Please avoid f3\"))); \n-INT2 f4(void) { return 0; }\t\t/* { dg-warning \"'INT2' is deprecated: Please avoid INT2\" \"\" } */\n-int f5(INT2 x);\t\t\t\t/* { dg-warning \"'INT2' is deprecated: Please avoid INT2\" \"\" } */\n-int f6(INT2 x) __attribute__ ((__deprecated__(\"Please avoid f6\"))); /* { dg-warning \"'INT2' is deprecated: Please avoid INT2\" \"\" } */\n+INT2 f4(void) { return 0; }\t\t/* { dg-warning \"'INT2' is deprecated: Please avoid INT2\" } */\n+int f5(INT2 x);\t\t\t\t/* { dg-warning \"'INT2' is deprecated: Please avoid INT2\" } */\n+int f6(INT2 x) __attribute__ ((__deprecated__(\"Please avoid f6\"))); /* { dg-warning \"'INT2' is deprecated: Please avoid INT2\" } */\n \n typedef enum {red, green, blue} Color __attribute__((deprecated(\"Please avoid Color\")));\n \n int g1;\n int g2 __attribute__ ((deprecated(\"Please avoid g2\")));\n int g3 __attribute__ ((__deprecated__(\"Please avoid g3\")));\n-Color k;\t\t\t\t/* { dg-warning \"'Color' is deprecated: Please avoid Color\" \"\" } */\n+Color k;\t\t\t\t/* { dg-warning \"'Color' is deprecated: Please avoid Color\" } */\n \n typedef struct {\n   int field1;\n@@ -45,44 +45,44 @@ typedef struct {\n \n int func1()\n {\n-   INT1 w;\t\t\t\t/* { dg-warning \"'INT1' is deprecated: Please avoid INT1\" \"\" } */\n+   INT1 w;\t\t\t\t/* { dg-warning \"'INT1' is deprecated: Please avoid INT1\" } */\n    int x __attribute__ ((deprecated(\"Avoid x\")));\n    int y __attribute__ ((__deprecated__(\"Bad y\")));\n    int z;\n-   int (*pf)() = f1;\t\t\t/* { dg-warning \"'f1' is deprecated: Please avoid f1\" \"\" } */\n+   int (*pf)() = f1;\t\t\t/* { dg-warning \"'f1' is deprecated: Please avoid f1\" } */\n \n-   z = w + x + y + g1 + g2 + g3;\t/* { dg-warning \"'x' is deprecated: Avoid x\" \"\" } */\n+   z = w + x + y + g1 + g2 + g3;\t/* { dg-warning \"'x' is deprecated: Avoid x\" } */\n \t\t\t\t\t/* { dg-warning \"'y' is deprecated: Bad y\" \"y\" { target *-*-* } .-1 } */\n \t\t\t\t\t/* { dg-warning \"'g2' is deprecated: Please avoid g2\" \"g2\" { target *-*-* } .-2 }  */\n \t\t\t\t\t/* { dg-warning \"'g3' is deprecated: Please avoid g3\" \"g3\" { target *-*-* } .-3 } */\n-   return f1(); \t\t\t/* { dg-warning \"'f1' is deprecated: Please avoid f1\" \"\" } */\n+   return f1(); \t\t\t/* { dg-warning \"'f1' is deprecated: Please avoid f1\" } */\n }\n \n int func2(S1 *p)\n {\n   S1 lp;\n   \n   if (p->field1)\n-     return p->field2;\t\t\t/* { dg-warning \"'field2' is deprecated: Please avoid field2\" \"\" } */\n-  else if (lp.field4)\t\t\t/* { dg-warning \"'field4' is deprecated: Please avoid field4\" \"\" } */\n+     return p->field2;\t\t\t/* { dg-warning \"'field2' is deprecated: Please avoid field2\" } */\n+  else if (lp.field4)\t\t\t/* { dg-warning \"'field4' is deprecated: Please avoid field4\" } */\n      return p->field3;\n   \n   p->u1.field5 = g1 + p->field7;\n-  p->u2.field9;\t\t\t\t/* { dg-warning \"'u2' is deprecated: Please avoid u2\" \"\" } */\n-  return p->u1.field6 + p->field8;\t/* { dg-warning \"'field6' is deprecated: Please avoid field6\" \"\" } */\n+  p->u2.field9;\t\t\t\t/* { dg-warning \"'u2' is deprecated: Please avoid u2\" } */\n+  return p->u1.field6 + p->field8;\t/* { dg-warning \"'field6' is deprecated: Please avoid field6\" } */\n \t\t\t\t\t/* { dg-warning \"'field8' is deprecated: Please avoid field8\" \"field8\" { target *-*-* } .-1 } */\n }\n \n struct SS1 {\n   int x;\n-  INT1 y; \t\t\t\t/* { dg-warning \"'INT1' is deprecated: Please avoid INT1\" \"\" } */\n+  INT1 y; \t\t\t\t/* { dg-warning \"'INT1' is deprecated: Please avoid INT1\" } */\n } __attribute__ ((deprecated(\"Please avoid SS1\")));\n \n-struct SS1 *p1;\t\t\t\t/* { dg-warning \"'SS1' is deprecated: Please avoid SS1\" \"\" } */\n+struct SS1 *p1;\t\t\t\t/* { dg-warning \"'SS1' is deprecated: Please avoid SS1\" } */\n \n struct __attribute__ ((__deprecated__(\"Please avoid SS2\"))) SS2 {\n   int x;\n-  INT1 y; \t\t\t\t/* { dg-warning \"'INT1' is deprecated: Please avoid INT1\" \"\" } */\n+  INT1 y; \t\t\t\t/* { dg-warning \"'INT1' is deprecated: Please avoid INT1\" } */\n };\n \n-struct SS2 *p2;\t\t\t\t/* { dg-warning \"'SS2' is deprecated: Please avoid SS2\" \"\" } */\n+struct SS2 *p2;\t\t\t\t/* { dg-warning \"'SS2' is deprecated: Please avoid SS2\" } */"}, {"sha": "757937871495c01a9bf8e5f7bbee57f18c2f4c9b", "filename": "gcc/testsuite/gcc.dg/deprecated.c", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeprecated.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeprecated.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeprecated.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -6,26 +6,26 @@\n typedef int INT1 __attribute__((deprecated));\n typedef INT1 INT2 __attribute__ ((__deprecated__));\n \n-typedef INT1 INT1a; \t\t\t/* { dg-warning \"'INT1' is deprecated\" \"\" } */\n+typedef INT1 INT1a; \t\t\t/* { dg-warning \"'INT1' is deprecated\" } */\n typedef INT1 INT1b __attribute__ ((deprecated));\n \n-INT1 should_be_unavailable; \t\t/* { dg-warning \"'INT1' is deprecated\" \"\" } */\n+INT1 should_be_unavailable; \t\t/* { dg-warning \"'INT1' is deprecated\" } */\n INT1a should_not_be_deprecated;\n \n INT1 f1(void) __attribute__ ((deprecated)); \n-INT1 f2(void) { return 0; }\t\t/* { dg-warning \"'INT1' is deprecated\" \"\" } */\n+INT1 f2(void) { return 0; }\t\t/* { dg-warning \"'INT1' is deprecated\" } */\n \n INT2 f3(void) __attribute__ ((__deprecated__)); \n-INT2 f4(void) { return 0; }\t\t/* { dg-warning \"'INT2' is deprecated\" \"\" } */\n-int f5(INT2 x);\t\t\t\t/* { dg-warning \"'INT2' is deprecated\" \"\" } */\n-int f6(INT2 x) __attribute__ ((__deprecated__)); /* { dg-warning \"'INT2' is deprecated\" \"\" } */\n+INT2 f4(void) { return 0; }\t\t/* { dg-warning \"'INT2' is deprecated\" } */\n+int f5(INT2 x);\t\t\t\t/* { dg-warning \"'INT2' is deprecated\" } */\n+int f6(INT2 x) __attribute__ ((__deprecated__)); /* { dg-warning \"'INT2' is deprecated\" } */\n \n typedef enum {red, green, blue} Color __attribute__((deprecated));\n \n int g1;\n int g2 __attribute__ ((deprecated));\n int g3 __attribute__ ((__deprecated__));\n-Color k;\t\t\t\t/* { dg-warning \"'Color' is deprecated\" \"\" } */\n+Color k;\t\t\t\t/* { dg-warning \"'Color' is deprecated\" } */\n \n typedef struct {\n   int field1;\n@@ -46,13 +46,13 @@ typedef struct {\n \n int func1()\n {\n-   INT1 w;\t\t\t\t/* { dg-warning \"'INT1' is deprecated\" \"\" } */\n+   INT1 w;\t\t\t\t/* { dg-warning \"'INT1' is deprecated\" } */\n    int x __attribute__ ((deprecated));\n    int y __attribute__ ((__deprecated__));\n    int z;\n-   int (*pf)() = f1;\t\t\t/* { dg-warning \"'f1' is deprecated\" \"\" } */\n+   int (*pf)() = f1;\t\t\t/* { dg-warning \"'f1' is deprecated\" } */\n \n-   z = w + x + y + g1 + g2 + g3;\t/* { dg-warning \"'x' is deprecated\" \"\" } */\n+   z = w + x + y + g1 + g2 + g3;\t/* { dg-warning \"'x' is deprecated\" } */\n    \t\t\t\t\t/* { dg-warning \"'y' is deprecated\" \"y\" { target *-*-* } .-1 } */\n    \t\t\t\t\t/* { dg-warning \"'g2' is deprecated\" \"g2\" { target *-*-* } .-2 } */\n    \t\t\t\t\t/* { dg-warning \"'g3' is deprecated\" \"g3\" { target *-*-* } .-3 } */\n@@ -64,29 +64,29 @@ int func2(S1 *p)\n   S1 lp;\n   \n   if (p->field1)\n-     return p->field2;\t\t\t/* { dg-warning \"'field2' is deprecated\" \"\" } */\n-  else if (lp.field4)\t\t\t/* { dg-warning \"'field4' is deprecated\" \"\" } */\n+     return p->field2;\t\t\t/* { dg-warning \"'field2' is deprecated\" } */\n+  else if (lp.field4)\t\t\t/* { dg-warning \"'field4' is deprecated\" } */\n      return p->field3;\n   \n   p->u1.field5 = g1 + p->field7;\n-  p->u2.field9;\t\t\t\t/* { dg-warning \"'u2' is deprecated\" \"\" } */\n-  return p->u1.field6 + p->field8;\t/* { dg-warning \"'field6' is deprecated\" \"\" } */\n+  p->u2.field9;\t\t\t\t/* { dg-warning \"'u2' is deprecated\" } */\n+  return p->u1.field6 + p->field8;\t/* { dg-warning \"'field6' is deprecated\" } */\n   \t\t\t\t\t/* { dg-warning \"'field8' is deprecated\" \"field8\" { target *-*-* } .-1 } */\n }\n \n struct SS1 {\n   int x;\n-  INT1 y; \t\t\t\t/* { dg-warning \"'INT1' is deprecated\" \"\" } */\n+  INT1 y; \t\t\t\t/* { dg-warning \"'INT1' is deprecated\" } */\n } __attribute__ ((deprecated));\n \n-struct SS1 *p1;\t\t\t\t/* { dg-warning \"'SS1' is deprecated\" \"\" } */\n+struct SS1 *p1;\t\t\t\t/* { dg-warning \"'SS1' is deprecated\" } */\n \n struct __attribute__ ((__deprecated__)) SS2 {\n   int x;\n-  INT1 y; \t\t\t\t/* { dg-warning \"'INT1' is deprecated\" \"\" } */\n+  INT1 y; \t\t\t\t/* { dg-warning \"'INT1' is deprecated\" } */\n };\n \n-struct SS2 *p2;\t\t\t\t/* { dg-warning \"'SS2' is deprecated\" \"\" } */\n+struct SS2 *p2;\t\t\t\t/* { dg-warning \"'SS2' is deprecated\" } */\n #endif\n \n #ifdef __cplusplus\n@@ -104,13 +104,13 @@ inline void T::member1(int) {}\n \n int T::member2(T *p)\n {\n-  p->member1(1);\t\t\t/* { xxdg-warning \"'member1' is deprecated\" \"\" } */\n-  (*p).member1(2);\t\t\t/* { xxdg-warning \"'member1' is deprecated\" \"\" } */\n-  p->member2(1);\t\t\t/* { xxdg-warning \"'member2' is deprecated\" \"\" } */\n-  (*p).member2(2);\t\t\t/* { xxdg-warning \"'member2' is deprecated\" \"\" } */\n+  p->member1(1);\t\t\t/* { xxdg-warning \"'member1' is deprecated\" } */\n+  (*p).member1(2);\t\t\t/* { xxdg-warning \"'member1' is deprecated\" } */\n+  p->member2(1);\t\t\t/* { xxdg-warning \"'member2' is deprecated\" } */\n+  (*p).member2(2);\t\t\t/* { xxdg-warning \"'member2' is deprecated\" } */\n   p->member3(p);\n   (*p).member3(p);\n-  return f1(); \t\t\t\t/* { xxdg-warning \"'f1' is deprecated\" \"\" } */\n+  return f1(); \t\t\t\t/* { xxdg-warning \"'f1' is deprecated\" } */\n }\n #endif\n "}, {"sha": "6663a8f649a3e15ecd5a3877f30315362bf6cdce", "filename": "gcc/testsuite/gcc.dg/dfp/altivec-types.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Faltivec-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Faltivec-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Faltivec-types.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -4,6 +4,6 @@\n /* GNU extension: PowerPC AltiVec Built-in Functions.\n    These should be rejected as invalid AltiVec types.  */\n \n-__vector _Decimal32 vd32;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector _Decimal64 vd64;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector _Decimal128 vd128;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector _Decimal32 vd32;\t\t/* { dg-error \"AltiVec types\" } */\n+__vector _Decimal64 vd64;\t\t/* { dg-error \"AltiVec types\" } */\n+__vector _Decimal128 vd128;\t\t/* { dg-error \"AltiVec types\" } */"}, {"sha": "9185b2217a607015bcb7b75d2814935b3e351d54", "filename": "gcc/testsuite/gcc.dg/float-range-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-1.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -9,7 +9,7 @@\n void\n f (void)\n {\n-  float a = 1e+100000000f; /* { dg-warning \"floating constant exceeds range of 'float'\" \"\" } */\n+  float a = 1e+100000000f; /* { dg-warning \"floating constant exceeds range of 'float'\" } */\n   double b = 1e+100000000; /* { dg-warning \"floating constant exceeds range of 'double'\" } */\n   long double c = 1e+100000000l; /* { dg-warning \"floating constant exceeds range of 'long double'\" } */\n }"}, {"sha": "bd78fad9b9adca7c2ce80998b092061f757fe637", "filename": "gcc/testsuite/gcc.dg/pack-test-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fpack-test-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fpack-test-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpack-test-3.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -33,12 +33,12 @@ int ary2[sizeof (struct p2) == sizeof (p2_t1) ? 1 : -1];\n int ary3[sizeof (struct p1) == sizeof (struct p2) ? 1 : -1];\n \n /* not ok */\n-typedef struct u1 __attribute__ ((packed)) u1_t1; /* { dg-warning \"attribute ignored\" \"\" }*/\n-typedef struct u1 u1_t2 __attribute__ ((packed)); /* { dg-warning \"attribute ignored\" \"\" }*/\n+typedef struct u1 __attribute__ ((packed)) u1_t1; /* { dg-warning \"attribute ignored\" }*/\n+typedef struct u1 u1_t2 __attribute__ ((packed)); /* { dg-warning \"attribute ignored\" }*/\n \n typedef struct p3 {\n    char  field1;\n    short field2;\n    int field3;\n-} p3_t1 __attribute__ ((packed)); /* { dg-warning \"attribute ignored\" \"\" }*/\n+} p3_t1 __attribute__ ((packed)); /* { dg-warning \"attribute ignored\" }*/\n "}, {"sha": "cf17712dde12ee1b8015c938fb859290df2bab47", "filename": "gcc/testsuite/gcc.dg/pr11492.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr11492.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr11492.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr11492.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -5,7 +5,7 @@ int main( void )\n {\n   unsigned int a;\n   unsigned char b;\n-  for ( a = 0, b = 2; a > b * 100; a++ ) /* { dg-bogus \"comparison between signed and unsigned integer\" \"\" } */\n+  for ( a = 0, b = 2; a > b * 100; a++ ) /* { dg-bogus \"comparison between signed and unsigned integer\" } */\n     { ; }\n \n   return 0;"}, {"sha": "f5f8ad55a65899e1b8fb2b9d46c224e61f87555f", "filename": "gcc/testsuite/gcc.dg/pr15360-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15360-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15360-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15360-1.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -15,10 +15,10 @@ extern int b = 1; /* { dg-warning \"initialized and declared\" \"extern init warnin\n static int b;\n static int b;\n \n-static int c; /* { dg-message \"note: previous declaration\" \"\" } */\n+static int c; /* { dg-message \"note: previous declaration\" } */\n int c; /* { dg-error \"non-static\" \"correct error\" } */\n \n-static int d; /* { dg-message \"note: previous declaration\" \"\" } */\n+static int d; /* { dg-message \"note: previous declaration\" } */\n int d = 1; /* { dg-error \"non-static\" \"correct error\" } */\n \n void foo (void) { extern int e = 1; } /* { dg-error \"has both\" \"extern init in function\" } */"}, {"sha": "e1457faf718878d0a3e0efbc433128fee389fd56", "filename": "gcc/testsuite/gcc.dg/pr37908.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr37908.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr37908.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr37908.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -16,7 +16,7 @@ int main (void)\n   xLoc = xIn = ~ (1 << i);\n   xExpect = ~ (xIn & 0x7F);\n \n-  xOut = __sync_nand_and_fetch (&xLoc, 0x7F); /* { dg-message \"note: '__sync_nand_and_fetch' changed semantics in GCC 4.4\" \"\" } */\n+  xOut = __sync_nand_and_fetch (&xLoc, 0x7F); /* { dg-message \"note: '__sync_nand_and_fetch' changed semantics in GCC 4.4\" } */\n \n   if (xOut != xExpect)\n     abort ();"}, {"sha": "ea39d69f8e1dc8c4fe74d7bfdfa8a6ffd9c80968", "filename": "gcc/testsuite/gcc.dg/pr53265.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53265.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53265.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53265.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -50,9 +50,9 @@ fn4 (void)\n   unsigned int *a[32], *o, i;\n \n   bar (a);\n-  for (i = 0; i <= sizeof (a) / sizeof (a[0]); i++)\t/* { dg-message \"note: within this loop\" \"\" } */\n+  for (i = 0; i <= sizeof (a) / sizeof (a[0]); i++)\t/* { dg-message \"note: within this loop\" } */\n     {\n-      o = a[i];\t/* { dg-warning \"32 invokes undefined behavior\" \"\" } */\n+      o = a[i];\t/* { dg-warning \"32 invokes undefined behavior\" } */\n       bar (o);\n     }\n }\n@@ -86,7 +86,7 @@ fn7 (void)\n {\n   int a[16], b, c;\n   bar (a);\n-  for (b = a[c = 0]; c < 16; b = a[++c])\t/* { dg-warning \"15 invokes undefined behavior\" \"\" } */\n+  for (b = a[c = 0]; c < 16; b = a[++c])\t/* { dg-warning \"15 invokes undefined behavior\" } */\n     baz (b);\n }\n "}, {"sha": "b41ae64f933259b7bb72ba4feab935d99d566790", "filename": "gcc/testsuite/gcc.dg/pr57287-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr57287-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr57287-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr57287-2.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -26,7 +26,7 @@ int baz (void)\n       if (!varseen)\n \tvarseen = 1;\n \n-      jmp_buf *buf = bar ();  /* { dg-bogus \"may be used uninitialized\" \"\" } */\n+      jmp_buf *buf = bar ();  /* { dg-bogus \"may be used uninitialized\" } */\n       setjmp (*buf);\n     }\n "}, {"sha": "47ed5b7988605633129949d612ac33ac9a89b49e", "filename": "gcc/testsuite/gcc.dg/pr57287.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr57287.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr57287.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr57287.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -18,7 +18,7 @@ void enumerate_locals (int indent)\n       if (local_indent != 8)\n \t{\n \t  setjmp (buf);\n-\t  bar (local_indent);  /* { dg-bogus \"may be used uninitialized\" \"\" } */\n+\t  bar (local_indent);  /* { dg-bogus \"may be used uninitialized\" } */\n \t}\n     }\n   foo (1);"}, {"sha": "1fb0070dd554963eb35cd159d404908e3fc7063b", "filename": "gcc/testsuite/gcc.dg/redecl-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-1.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -75,7 +75,7 @@ void test5(void)\n \n /* Extern then static, both at file scope.  */\n \n-extern int test6(int);\t\t/* { dg-message \"note: previous\" \"\" } */\n+extern int test6(int);\t\t/* { dg-message \"note: previous\" } */\n static int test6(int x)\t\t/* { dg-error \"follows non-static\" } */\n { return x; }\n \n@@ -84,7 +84,7 @@ static int test6(int x)\t\t/* { dg-error \"follows non-static\" } */\n \n void prime7(void)\n {\n-  extern int test7(int);\t/* { dg-message \"note: previous\" \"\" } */\n+  extern int test7(int);\t/* { dg-message \"note: previous\" } */\n }\n \n static int test7(int x)\t\t/* { dg-error \"follows non-static\" } */\n@@ -94,7 +94,7 @@ static int test7(int x)\t\t/* { dg-error \"follows non-static\" } */\n \n void prime8(void)\n {\n-  test8();\t\t\t/* { dg-message \"note: previous\" \"\" } */\n+  test8();\t\t\t/* { dg-message \"note: previous\" } */\n                                 /* { dg-warning \"implicit\" \"implicit\" { target *-*-* } .-1 } */\n }\n "}, {"sha": "93e79d072fe960f9166ec2310f7834071bb8e2ab", "filename": "gcc/testsuite/gcc.dg/sync-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fsync-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fsync-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsync-3.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -31,7 +31,7 @@ do_qi (void)\n     abort ();\n   if (__sync_fetch_and_xor(AI+10, 9) != 0)\n     abort ();\n-  if (__sync_fetch_and_nand(AI+11, 7) != (char)-1) /* { dg-message \"note: '__sync_fetch_and_nand' changed semantics in GCC 4.4\" \"\" } */\n+  if (__sync_fetch_and_nand(AI+11, 7) != (char)-1) /* { dg-message \"note: '__sync_fetch_and_nand' changed semantics in GCC 4.4\" } */\n     abort ();\n \n   if (__sync_add_and_fetch(AI+12, 1) != 1)\n@@ -44,7 +44,7 @@ do_qi (void)\n     abort ();\n   if (__sync_xor_and_fetch(AI+16, 9) != 9)\n     abort ();\n-  if (__sync_nand_and_fetch(AI+17, 7) != (char)~7) /* { dg-message \"note: '__sync_nand_and_fetch' changed semantics in GCC 4.4\" \"\" } */\n+  if (__sync_nand_and_fetch(AI+17, 7) != (char)~7) /* { dg-message \"note: '__sync_nand_and_fetch' changed semantics in GCC 4.4\" } */\n     abort ();\n }\n "}, {"sha": "43d236b911cc5b447d3379b0c0d567887ae1a203", "filename": "gcc/testsuite/gcc.dg/two-types-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-1.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -2,4 +2,4 @@\n /* { dg-options \"-std=gnu89\" } // suppress default -pedantic-errors */\n \n typedef int x, y;\n-x y z;\t\t\t/* { dg-error \"\" \"\" } */\n+x y z;\t\t\t/* { dg-error \"\" } */"}, {"sha": "0fffae53fd8453cbdd7cee0a9773106206b64817", "filename": "gcc/testsuite/gcc.dg/two-types-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-2.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -2,4 +2,4 @@\n /* { dg-options \"-std=gnu89\" } // suppress default -pedantic-errors */\n \n typedef int x, y;\n-x struct f z; /* { dg-error \"two or more \" \"\" } */\n+x struct f z; /* { dg-error \"two or more \" } */"}, {"sha": "5ffb153717c58d2a0180ee878ba7ff024a9ef360", "filename": "gcc/testsuite/gcc.dg/two-types-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-4.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -5,5 +5,5 @@ int f()\n {\n   struct f {\n   }\n-  int z; /* { dg-error \"expected ';', identifier or \" \"\" } */\n+  int z; /* { dg-error \"expected ';', identifier or \" } */\n }"}, {"sha": "9b5ca8f64dfc1be44325215e4f07849768c9c3d3", "filename": "gcc/testsuite/gcc.dg/two-types-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-5.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -2,5 +2,5 @@\n /* { dg-options \"-std=gnu89\" } // suppress default -pedantic-errors */\n \n struct f {}\n-struct g {} /* { dg-error \"expected ';', identifier or \" \"\" } */\n-int f(); /* { dg-error \"expected ';', identifier or \" \"\" } */\n+struct g {} /* { dg-error \"expected ';', identifier or \" } */\n+int f(); /* { dg-error \"expected ';', identifier or \" } */"}, {"sha": "ca3bfa997a7e68926f5d7941b7dc3c2bb40ea5bb", "filename": "gcc/testsuite/gcc.dg/two-types-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-6.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -2,6 +2,6 @@\n /* { dg-options \"-std=gnu89\" } // suppress default -pedantic-errors */\n \n struct s {\n-  struct f {} /* dg-warning \"does not declare anything\" \"\" } */\n-  struct g {} x; /* { dg-error \"expected ';', identifier or \" \"\" } */\n+  struct f {} /* dg-warning \"does not declare anything\" } */\n+  struct g {} x; /* { dg-error \"expected ';', identifier or \" } */\n };"}, {"sha": "f7a28d9c20d74905045946b3f3232661d14192e1", "filename": "gcc/testsuite/gcc.dg/two-types-7.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-7.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -3,6 +3,6 @@\n \n struct s {\n   struct f {}\n-  enum a { X } /* { dg-error \"expected ';', identifier or \" \"\" } */\n-  struct g {} /* { dg-error \"expected identifier \" \"\" } */\n-}; /* { dg-warning \"no semicolon\" \"\" } */\n+  enum a { X } /* { dg-error \"expected ';', identifier or \" } */\n+  struct g {} /* { dg-error \"expected identifier \" } */\n+}; /* { dg-warning \"no semicolon\" } */"}, {"sha": "666b9a9c62a297c385e377225cc26bc984d18cd9", "filename": "gcc/testsuite/gcc.dg/two-types-8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-8.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -2,9 +2,9 @@\n /* { dg-options \"-std=gnu89\" } // suppress default -pedantic-errors */\n \n enum x { XYZ }\n-struct g { enum x a; }; /* { dg-error \"expected ';', identifier or \" \"\" } */\n+struct g { enum x a; }; /* { dg-error \"expected ';', identifier or \" } */\n \n int f(struct g *x)\n {\n-  return x->a == XYZ; /* { dg-bogus \" has no member \" \"\" } */\n+  return x->a == XYZ; /* { dg-bogus \" has no member \" } */\n }"}, {"sha": "0234c55b01fb0eba63c0973dce22c8cad4f575f4", "filename": "gcc/testsuite/gcc.dg/two-types-9.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-9.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -2,9 +2,9 @@\n /* { dg-options \"-std=gnu89\" } // suppress default -pedantic-errors */\n \n struct f {}\n-static int a, b; /* { dg-error \"expected ';', identifier or \" \"\" } */\n+static int a, b; /* { dg-error \"expected ';', identifier or \" } */\n \n int f()\n {\n-\treturn a - b; /* { dg-bogus \"invalid operands \" \"\" } */\n+\treturn a - b; /* { dg-bogus \"invalid operands \" } */\n }"}, {"sha": "e59b2add74dfd9b68aae607efee65bc3b825be6c", "filename": "gcc/testsuite/gcc.dg/uninit-I.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-I.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-I.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-I.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -4,5 +4,5 @@\n int sys_msgctl (void)\n {\n   struct { int mode; } setbuf;\n-  return setbuf.mode;  /* { dg-warning \"'setbuf\\.mode' is used\" \"\" } */\n+  return setbuf.mode;  /* { dg-warning \"'setbuf\\.mode' is used\" } */\n }"}, {"sha": "e00f31380458201363e6463f9ec04b1abecb5837", "filename": "gcc/testsuite/gcc.dg/uninit-pr19430.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr19430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr19430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr19430.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -29,7 +29,7 @@ void frob(int *pi);\n int main(void)\n {\n   int i; \n-  printf(\"i = %d\\n\", i); /* { dg-warning \"'i' is used uninitialized in this function\" \"\" } */\n+  printf(\"i = %d\\n\", i); /* { dg-warning \"'i' is used uninitialized in this function\" } */\n   frob(&i);\n \n   return 0;"}, {"sha": "8bf62d6e432986f510fadf1622d0acebbe4ad71a", "filename": "gcc/testsuite/gcc.dg/visibility-7.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fvisibility-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fvisibility-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvisibility-7.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -5,8 +5,8 @@\n \n extern int \n __attribute__((visibility (\"hidden\")))\n-xyzzy; /* { dg-message \"note: previous declaration\" \"\" } */\n+xyzzy; /* { dg-message \"note: previous declaration\" } */\n \n int \n __attribute__((visibility (\"protected\")))\n-xyzzy = 5; /* { dg-warning \"different visibility\" \"\" } */\n+xyzzy = 5; /* { dg-warning \"different visibility\" } */"}, {"sha": "dfc868fa85a2b9e35709235dc5025ed403064a31", "filename": "gcc/testsuite/gcc.dg/winline-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-10.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -3,7 +3,7 @@\n \n struct s { int a; };\n \n-inline void f (x)\t/* { dg-warning \"inlining .* mismatched arg\" \"\" } */\n+inline void f (x)\t/* { dg-warning \"inlining .* mismatched arg\" } */\n      int x;\n {\n   asm (\"\");"}, {"sha": "0d9114b043fe23f283e742610e0250cd9cc5988d", "filename": "gcc/testsuite/gcc.dg/winline-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-2.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-Winline -O2 -fgnu89-inline\" } */\n \n-inline int q(void);\t\t /* { dg-warning \"body not available\" \"\" } */\n+inline int q(void);\t\t /* { dg-warning \"body not available\" } */\n inline int t(void)\n {\n \treturn q();\t\t /* { dg-message \"called from here\" } */"}, {"sha": "7b7c8c5b9eb8b2f58284cdcc8726e88d2b60f198", "filename": "gcc/testsuite/gcc.dg/winline-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-3.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -2,7 +2,7 @@\n /* { dg-options \"-Winline -O2 --param max-inline-insns-single=1 --param inline-min-speedup=100 -fgnu89-inline\" } */\n \n void big (void);\n-inline int q(void) /* { dg-warning \"max-inline-insns-single\" \"\" } */\n+inline int q(void) /* { dg-warning \"max-inline-insns-single\" } */\n {\n \tbig();\n \tbig();"}, {"sha": "6d9cba39d9afb1b12b210f54a38bf8580314ca35", "filename": "gcc/testsuite/gcc.dg/winline-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-9.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -10,7 +10,7 @@ int aa (void)\n   test(t);\n }\n static inline\n-int bb (void) /* { dg-warning \"large-stack-frame\" \"\" } */\n+int bb (void) /* { dg-warning \"large-stack-frame\" } */\n {\n   char t[100];\n   test(t);"}, {"sha": "17499adacd9604d3bdfe67771b0cc99b724ef407", "filename": "gcc/testsuite/gcc.target/i386/attr-returns_twice-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fattr-returns_twice-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fattr-returns_twice-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fattr-returns_twice-1.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -7,7 +7,7 @@ void g(int);\n int\n main (void)\n {\n-  register int reg asm (\"esi\") = 1; /* { dg-warning \"might be clobbered\" \"\" } */\n+  register int reg asm (\"esi\") = 1; /* { dg-warning \"might be clobbered\" } */\n \n   if (!newsetjmp ())\n     {"}, {"sha": "839cf788e7c68be1a59d9e6c063f5895e9aae5ae", "filename": "gcc/testsuite/gcc.target/i386/chkp-const-check-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-const-check-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-const-check-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-const-check-2.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -4,5 +4,5 @@\n int test (int *p)\n {\n   p = (int *)__builtin___bnd_set_ptr_bounds (p, sizeof (int));\n-  return *(p + 1); /* { dg-warning \"memory access check always fail\" \"\" } */\n+  return *(p + 1); /* { dg-warning \"memory access check always fail\" } */\n }"}, {"sha": "23a2f7cd052166dbe1bf4faaa63f977807f15c7d", "filename": "gcc/testsuite/gcc.target/i386/chkp-label-address.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-label-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-label-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-label-address.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -3,7 +3,7 @@\n \n #include <stdio.h>\n \n-static int f1 () /* { dg-warning \"function cannot be instrumented\" \"\" } */\n+static int f1 () /* { dg-warning \"function cannot be instrumented\" } */\n {\n   static int array = &&label_B - &&label_A;\n "}, {"sha": "eea0b0afa10433798b19d6557df94bbf0f990f5b", "filename": "gcc/testsuite/gcc.target/i386/chkp-remove-bndint-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-remove-bndint-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-remove-bndint-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-remove-bndint-2.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -12,5 +12,5 @@ struct S\n int test (struct S *ps)\n {\n   int *pi = &ps->b;\n-  return *(pi + 1); /* { dg-warning \"memory access check always fail\" \"\" } */\n+  return *(pi + 1); /* { dg-warning \"memory access check always fail\" } */\n }"}, {"sha": "8f5a0d9e7e57957a11e01601e81a312f83a9cb65", "filename": "gcc/testsuite/gcc.target/i386/pr39162.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39162.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39162.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39162.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -8,7 +8,7 @@ typedef long long __m256i __attribute__ ((__vector_size__ (32), __may_alias__));\n extern __m256i y;\n \n void\n-bar (__m256i x) /* { dg-warning \"AVX\" \"\" } */\n+bar (__m256i x) /* { dg-warning \"AVX\" } */\n {\n   y = x;\n }"}, {"sha": "e06bd51b6a1120989c17afe0847f6c0f672840ad", "filename": "gcc/testsuite/gcc.target/i386/sse-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-5.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -5,7 +5,7 @@\n \n typedef double v2df __attribute__ ((vector_size (16)));\n v2df p;\n-void q(v2df t) /* { dg-warning \"SSE\" \"\" } */\n+void q(v2df t) /* { dg-warning \"SSE\" } */\n {\n \tp=t;\n }"}, {"sha": "bcce2a3c911ea70f51e1e9ddb52ae69943b458bb", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-types-1.c", "status": "modified", "additions": 54, "deletions": 54, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-types-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-types-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-types-1.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -28,64 +28,64 @@ __vector _Bool vb;\n \n /* These should be rejected as invalid AltiVec types.  */\n \n-__vector long long vll;\t\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector unsigned long long vull;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector signed long long vsll;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector __bool long long vbll;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector long long int vlli;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector unsigned long long int vulli;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector signed long long int vslli;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector __bool long long int vblli;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector double vd1;\t\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector long double vld;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector _Complex float vcf;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector _Complex double vcd;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector _Complex long double vcld;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector _Complex signed char vcsc;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector _Complex unsigned char vcuc;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector _Complex short vcss;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector _Complex unsigned short vcus;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector _Complex int vcsi;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector _Complex unsigned int vcui;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector _Complex long vcsl;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector _Complex unsigned long vcul;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector _Complex long long vcsll;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector _Complex unsigned long long vcull; /* { dg-error \"AltiVec types\" \"\" } */\n-__vector __complex float v_cf;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector __complex double v_cd;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector __complex long double v_cld;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector __complex signed char v_csc;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector __complex unsigned char v_cuc;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector __complex short v_css;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector __complex unsigned short v_cus; /* { dg-error \"AltiVec types\" \"\" } */\n-__vector __complex int v_csi;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector __complex unsigned int v_cui;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector __complex long v_csl;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector __complex unsigned long v_cul;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector __complex long long v_csll;\t/* { dg-error \"AltiVec types\" \"\" } */\n-__vector __complex unsigned long long v_cull; /* { dg-error \"AltiVec types\" \"\" } */\n+__vector long long vll;\t\t\t/* { dg-error \"AltiVec types\" } */\n+__vector unsigned long long vull;\t/* { dg-error \"AltiVec types\" } */\n+__vector signed long long vsll;\t\t/* { dg-error \"AltiVec types\" } */\n+__vector __bool long long vbll;\t\t/* { dg-error \"AltiVec types\" } */\n+__vector long long int vlli;\t\t/* { dg-error \"AltiVec types\" } */\n+__vector unsigned long long int vulli;\t/* { dg-error \"AltiVec types\" } */\n+__vector signed long long int vslli;\t/* { dg-error \"AltiVec types\" } */\n+__vector __bool long long int vblli;\t/* { dg-error \"AltiVec types\" } */\n+__vector double vd1;\t\t\t/* { dg-error \"AltiVec types\" } */\n+__vector long double vld;\t\t/* { dg-error \"AltiVec types\" } */\n+__vector _Complex float vcf;\t\t/* { dg-error \"AltiVec types\" } */\n+__vector _Complex double vcd;\t\t/* { dg-error \"AltiVec types\" } */\n+__vector _Complex long double vcld;\t/* { dg-error \"AltiVec types\" } */\n+__vector _Complex signed char vcsc;\t/* { dg-error \"AltiVec types\" } */\n+__vector _Complex unsigned char vcuc;\t/* { dg-error \"AltiVec types\" } */\n+__vector _Complex short vcss;\t\t/* { dg-error \"AltiVec types\" } */\n+__vector _Complex unsigned short vcus;\t/* { dg-error \"AltiVec types\" } */\n+__vector _Complex int vcsi;\t\t/* { dg-error \"AltiVec types\" } */\n+__vector _Complex unsigned int vcui;\t/* { dg-error \"AltiVec types\" } */\n+__vector _Complex long vcsl;\t\t/* { dg-error \"AltiVec types\" } */\n+__vector _Complex unsigned long vcul;\t/* { dg-error \"AltiVec types\" } */\n+__vector _Complex long long vcsll;\t/* { dg-error \"AltiVec types\" } */\n+__vector _Complex unsigned long long vcull; /* { dg-error \"AltiVec types\" } */\n+__vector __complex float v_cf;\t\t/* { dg-error \"AltiVec types\" } */\n+__vector __complex double v_cd;\t\t/* { dg-error \"AltiVec types\" } */\n+__vector __complex long double v_cld;\t/* { dg-error \"AltiVec types\" } */\n+__vector __complex signed char v_csc;\t/* { dg-error \"AltiVec types\" } */\n+__vector __complex unsigned char v_cuc;\t/* { dg-error \"AltiVec types\" } */\n+__vector __complex short v_css;\t\t/* { dg-error \"AltiVec types\" } */\n+__vector __complex unsigned short v_cus; /* { dg-error \"AltiVec types\" } */\n+__vector __complex int v_csi;\t\t/* { dg-error \"AltiVec types\" } */\n+__vector __complex unsigned int v_cui;\t/* { dg-error \"AltiVec types\" } */\n+__vector __complex long v_csl;\t\t/* { dg-error \"AltiVec types\" } */\n+__vector __complex unsigned long v_cul;\t/* { dg-error \"AltiVec types\" } */\n+__vector __complex long long v_csll;\t/* { dg-error \"AltiVec types\" } */\n+__vector __complex unsigned long long v_cull; /* { dg-error \"AltiVec types\" } */\n \n /* These should be rejected because the component types are invalid.  We\n    don't care about the actual error messages here.  */\n \n-__vector __bool unsigned char vbuc;\t/* { dg-error \"\" \"\" } */\n-__vector __bool signed char vbsc;\t/* { dg-error \"\" \"\" } */\n-__vector __bool unsigned short vbuh;\t/* { dg-error \"\" \"\" } */\n-__vector __bool signed short vbsh;\t/* { dg-error \"\" \"\" } */\n-__vector __bool unsigned int vbui;\t/* { dg-error \"\" \"\" } */\n-__vector __bool signed int vbsi;\t/* { dg-error \"\" \"\" } */\n-__vector __bool unsigned vbuj;\t\t/* { dg-error \"\" \"\" } */\n-__vector __bool signed vbsj;\t\t/* { dg-error \"\" \"\" } */\n-__vector signed float vsf;\t\t/* { dg-error \"\" \"\" } */\n-__vector unsigned float vuf;\t\t/* { dg-error \"\" \"\" } */\n-__vector short float vsf;\t\t/* { dg-error \"\" \"\" } */\n-__vector signed double vsd;\t\t/* { dg-error \"\" \"\" } */\n-__vector unsigned double vud;\t\t/* { dg-error \"\" \"\" } */\n-__vector short double vsd;\t\t/* { dg-error \"\" \"\" } */\n-__vector __bool float vbf;\t\t/* { dg-error \"\" \"\" } */\n-__vector __bool double vbd;\t\t/* { dg-error \"\" \"\" } */\n-__vector __bool short float blf;\t/* { dg-error \"\" \"\" } */\n-__vector __bool short double vlbd;\t/* { dg-error \"\" \"\" } */\n+__vector __bool unsigned char vbuc;\t/* { dg-error \"\" } */\n+__vector __bool signed char vbsc;\t/* { dg-error \"\" } */\n+__vector __bool unsigned short vbuh;\t/* { dg-error \"\" } */\n+__vector __bool signed short vbsh;\t/* { dg-error \"\" } */\n+__vector __bool unsigned int vbui;\t/* { dg-error \"\" } */\n+__vector __bool signed int vbsi;\t/* { dg-error \"\" } */\n+__vector __bool unsigned vbuj;\t\t/* { dg-error \"\" } */\n+__vector __bool signed vbsj;\t\t/* { dg-error \"\" } */\n+__vector signed float vsf;\t\t/* { dg-error \"\" } */\n+__vector unsigned float vuf;\t\t/* { dg-error \"\" } */\n+__vector short float vsf;\t\t/* { dg-error \"\" } */\n+__vector signed double vsd;\t\t/* { dg-error \"\" } */\n+__vector unsigned double vud;\t\t/* { dg-error \"\" } */\n+__vector short double vsd;\t\t/* { dg-error \"\" } */\n+__vector __bool float vbf;\t\t/* { dg-error \"\" } */\n+__vector __bool double vbd;\t\t/* { dg-error \"\" } */\n+__vector __bool short float blf;\t/* { dg-error \"\" } */\n+__vector __bool short double vlbd;\t/* { dg-error \"\" } */\n \n /* { dg-message \"note: previous\" \"prev vsf\" { target *-*-* } 79 } */\n /* { dg-message \"note: previous\" \"prev vsd\" { target *-*-* } 82 } */"}, {"sha": "4df12da0b195837ab8ac85b44d82fded5e2d480b", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-types-2.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-types-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-types-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-types-2.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -5,10 +5,10 @@\n \n /* These should get warnings for 32-bit code.  */\n \n-__vector long vl;\t\t\t/* { dg-warning \"deprecated\" \"\" } */\n-__vector unsigned long vul;\t\t/* { dg-warning \"deprecated\" \"\" } */\n-__vector signed long vsl;\t\t/* { dg-warning \"deprecated\" \"\" } */\n-__vector __bool long int vbli;\t\t/* { dg-warning \"deprecated\" \"\" } */\n-__vector long int vli;\t\t\t/* { dg-warning \"deprecated\" \"\" } */\n-__vector unsigned long int vuli;\t/* { dg-warning \"deprecated\" \"\" } */\n-__vector signed long int vsli;\t\t/* { dg-warning \"deprecated\" \"\" } */\n+__vector long vl;\t\t\t/* { dg-warning \"deprecated\" } */\n+__vector unsigned long vul;\t\t/* { dg-warning \"deprecated\" } */\n+__vector signed long vsl;\t\t/* { dg-warning \"deprecated\" } */\n+__vector __bool long int vbli;\t\t/* { dg-warning \"deprecated\" } */\n+__vector long int vli;\t\t\t/* { dg-warning \"deprecated\" } */\n+__vector unsigned long int vuli;\t/* { dg-warning \"deprecated\" } */\n+__vector signed long int vsli;\t\t/* { dg-warning \"deprecated\" } */"}, {"sha": "fe28e53b4e41f2bb31f995e94381cd2dff4f861b", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-types-3.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-types-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-types-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-types-3.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -5,10 +5,10 @@\n \n /* These should be rejected for 64-bit code.  */\n \n-__vector long vl;\t\t\t/* { dg-error \"invalid for 64\" \"\" } */\n-__vector unsigned long vul;\t\t/* { dg-error \"invalid for 64\" \"\" } */\n-__vector signed long vsl;\t\t/* { dg-error \"invalid for 64\" \"\" } */\n-__vector __bool long int vbli;\t\t/* { dg-error \"invalid for 64\" \"\" } */\n-__vector long int vli;\t\t\t/* { dg-error \"invalid for 64\" \"\" } */\n-__vector unsigned long int vuli;\t/* { dg-error \"invalid for 64\" \"\" } */\n-__vector signed long int vsli;\t\t/* { dg-error \"invalid for 64\" \"\" } */\n+__vector long vl;\t\t\t/* { dg-error \"invalid for 64\" } */\n+__vector unsigned long vul;\t\t/* { dg-error \"invalid for 64\" } */\n+__vector signed long vsl;\t\t/* { dg-error \"invalid for 64\" } */\n+__vector __bool long int vbli;\t\t/* { dg-error \"invalid for 64\" } */\n+__vector long int vli;\t\t\t/* { dg-error \"invalid for 64\" } */\n+__vector unsigned long int vuli;\t/* { dg-error \"invalid for 64\" } */\n+__vector signed long int vsli;\t\t/* { dg-error \"invalid for 64\" } */"}, {"sha": "8979cdfcd4d11fda18958c3a956898522e84bfe0", "filename": "gcc/testsuite/gcc.target/powerpc/float128-mix.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-mix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-mix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-mix.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -7,10 +7,10 @@\n /* Test to make sure that __float128 and long double cannot be combined together.  */\n __float128 add (__float128 a, long double b)\n {\n-  return a+b;\t/* { dg-error \"__float128 and long double cannot be used in the same expression\" \"\" } */\n+  return a+b;\t/* { dg-error \"__float128 and long double cannot be used in the same expression\" } */\n }\n \n __ibm128 sub (long double a, __float128 b)\n {\n-  return a-b;\t/* { dg-error \"__float128 and long double cannot be used in the same expression\" \"\" } */\n+  return a-b;\t/* { dg-error \"__float128 and long double cannot be used in the same expression\" } */\n }"}, {"sha": "a4985a3ad84f6eeb0e654f6e0b4dae151f94de14", "filename": "gcc/testsuite/gcc.target/powerpc/no-r11-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fno-r11-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fno-r11-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fno-r11-3.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -6,7 +6,7 @@\n extern void ext_call (int (func) (void));\n \n int\n-outer_func (int init)\t/* { dg-error \"-mno-pointers-to-nested-functions option\" \"\" } */\n+outer_func (int init)\t/* { dg-error \"-mno-pointers-to-nested-functions option\" } */\n {\n   int value = init;\n "}, {"sha": "b6bfe4196608ef5f92308bce140d054be4f76a85", "filename": "gcc/testsuite/gcc.target/spu/Wmain.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2FWmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2FWmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2FWmain.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wmain -mstdmain\" } */\n \n-int main (void *wrong)/* { dg-warning \"first argument of 'main' should be 'int'\" \"\" } */\n+int main (void *wrong)/* { dg-warning \"first argument of 'main' should be 'int'\" } */\n { \n   /* { dg-warning \"'main' takes only zero or two arguments\" \"\" { target *-*-* } 4 } */\n }"}, {"sha": "f8269e96dfec26f9b69d306c1ce53d9ee1d1a058", "filename": "gcc/testsuite/gcc.target/spu/ea/errors2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2Fea%2Ferrors2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2Fea%2Ferrors2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2Fea%2Ferrors2.c?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -60,7 +60,7 @@ struct foo ea_struct3 = {\n \n struct foo ea_struct4 = {\n   40,\n-  (__ea char *)lm_str,\t/* { dg-error \"(initializer element is not constant)|(near initialization)\" \"\" } */\n+  (__ea char *)lm_str,\t/* { dg-error \"(initializer element is not constant)|(near initialization)\" } */\n   41,\n };\n "}, {"sha": "4022b0db989affcb103ba352e0e5a016a6023344", "filename": "gcc/testsuite/gfortran.dg/assignment_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fassignment_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fassignment_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassignment_1.f90?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -12,7 +12,7 @@\n t = 1\n p => s\n ! We didn't dereference the pointer in the following line.\n-p = f() ! { dg-warning \"POINTER-valued function\" \"\" }\n+p = f() ! { dg-warning \"POINTER-valued function\" }\n p = p+1\n if (p.ne.2) call abort()\n if (p.ne.s) call abort()"}, {"sha": "c5e40aa83b62ea29fa7d130f36e3dfc46900519f", "filename": "gcc/testsuite/gfortran.dg/common_3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_3.f90?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -1,7 +1,7 @@\n ! { dg-do compile }\n ! Check that equivalences match common block layout.\n program common_3\n-  common /block/ a, b, c, d ! { dg-error \"not match ordering\" \"\" }\n+  common /block/ a, b, c, d ! { dg-error \"not match ordering\" }\n   integer a, b, c, d, n\n   dimension n(4)\n   equivalence (a, n(1))"}, {"sha": "03a191302b604a69d85294ea32ba00f3dfab095f", "filename": "gcc/testsuite/gfortran.dg/der_io_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fder_io_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fder_io_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fder_io_1.f90?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -11,7 +11,7 @@ program der_io_1\n \n   v%p => i\n   i = 42\n-  write (unit=s, fmt='(I2)') v ! { dg-error \"POINTER components\" \"\" }\n+  write (unit=s, fmt='(I2)') v ! { dg-error \"POINTER components\" }\n   if (s .ne. '42') call abort ()\n end program\n "}, {"sha": "395b80e5c88cba192a51b6d17dcd8d74f1d0a8ad", "filename": "gcc/testsuite/gfortran.dg/g77/20030326-1.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20030326-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20030326-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20030326-1.f?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -6,5 +6,5 @@\n ! For gfortran, see PR 13490\n !\n        integer c\n-       c = -2147483648_4 / (-1) ! { dg-error \"too big for its kind\" \"\" }\n+       c = -2147483648_4 / (-1) ! { dg-error \"too big for its kind\" }\n        end"}, {"sha": "f3255e9cbbbf4d441a3b04d4e6d6973d0615b03c", "filename": "gcc/testsuite/gfortran.dg/g77/9263.f", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F9263.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F9263.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F9263.f?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -3,9 +3,9 @@\n       PARAMETER (P=10)\n       INTEGER C(10),D(10),E(10),F(10)\n C     TERMINAL NOT INTEGER\n-      DATA (C(I),I=1,P)    /10*10/ ! { dg-error \"End expression in DO loop\" \"\" }\n+      DATA (C(I),I=1,P)    /10*10/ ! { dg-error \"End expression in DO loop\" }\n C     START NOT INTEGER\n-      DATA (D(I),I=Q,10)   /10*10/ ! { dg-error \"Start expression in DO loop\" \"\" }\n+      DATA (D(I),I=Q,10)   /10*10/ ! { dg-error \"Start expression in DO loop\" }\n C     INCREMENT NOT INTEGER\n-      DATA (E(I),I=1,10,Q) /10*10/ ! { dg-error \"Step expression in DO loop\" \"\" }\n+      DATA (E(I),I=1,10,Q) /10*10/ ! { dg-error \"Step expression in DO loop\" }\n       END"}, {"sha": "c976905e5f78814b72c865c016373f81dfbbafbb", "filename": "gcc/testsuite/gfortran.dg/g77/960317-1.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F960317-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F960317-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F960317-1.f?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -14,7 +14,7 @@\n       SUBROUTINE QUICK\n       SAVE\n C\n-      ASSIGN 101 TO JUMP ! { dg-warning \"Deleted feature: ASSIGN\" \"\" }\n+      ASSIGN 101 TO JUMP ! { dg-warning \"Deleted feature: ASSIGN\" }\n   101 Continue\n C\n       RETURN"}, {"sha": "df9ed3d36db5a367a33437cb5fed689d977f4efe", "filename": "gcc/testsuite/gfortran.dg/g77/970625-2.f", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F970625-2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F970625-2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F970625-2.f?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -52,22 +52,22 @@ SUBROUTINE FUNCTION PROGRAM (REAL,INTEGER, LOGICAL)\n       LOGICAL REAL\n       REAL LOGICAL\n       INTEGER INTEGER, STOP, RETURN, GO TO\n-      ASSIGN 9 TO STOP     ! { dg-warning \"ASSIGN\" \"\" }\n+      ASSIGN 9 TO STOP     ! { dg-warning \"ASSIGN\" }\n       ASSIGN = 9 + LOGICAL\n-      ASSIGN 7 TO RETURN   ! { dg-warning \"ASSIGN\" \"\" }\n-      ASSIGN 9 TO GO TO    ! { dg-warning \"ASSIGN\" \"\" }\n+      ASSIGN 7 TO RETURN   ! { dg-warning \"ASSIGN\" }\n+      ASSIGN 9 TO GO TO    ! { dg-warning \"ASSIGN\" }\n       GO TO = 5\n       STOP = 8\n-      IF (.NOT.REAL) GOTO STOP ! { dg-warning \"Assigned GOTO\" \"\" }\n+      IF (.NOT.REAL) GOTO STOP ! { dg-warning \"Assigned GOTO\" }\n       IF (LOGICAL.GT.INTEGER) THEN\n          IF = LOGICAL +5\n-         IF (LOGICAL.EQ.5) ASSIGN 5 TO IF ! { dg-warning \"ASSIGN\" \"\" }\n+         IF (LOGICAL.EQ.5) ASSIGN 5 TO IF ! { dg-warning \"ASSIGN\" }\n          INTEGER=IF\n       ELSE\n-         IF (ASSIGN.GT.STOP) ASSIGN 9 TO GOTO ! { dg-warning \"ASSIGN\" \"\" }\n+         IF (ASSIGN.GT.STOP) ASSIGN 9 TO GOTO ! { dg-warning \"ASSIGN\" }\n          ELSE = GO TO\n          END IF = ELSE + GO TO\n-         IF (.NOT.REAL.AND.GOTO.GT.ELSE) GOTO RETURN ! { dg-warning \"Assigned GOTO\" \"\" }\n+         IF (.NOT.REAL.AND.GOTO.GT.ELSE) GOTO RETURN ! { dg-warning \"Assigned GOTO\" }\n       END IF\n     5 CONTINUE\n     7 LOGICAL=LOGICAL+STOP"}, {"sha": "f4800fe52891b0ccf5c9c2f2a1778017486c048e", "filename": "gcc/testsuite/gfortran.dg/g77/980615-0.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980615-0.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980615-0.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980615-0.f?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -8,5 +8,5 @@\n       CaLL foo(W)\n       END\n       SUBROUTINE foo(W)\n-      yy(I)=A(I)Q(X) ! { dg-error \"Unclassifiable statement\" \"\" }\n+      yy(I)=A(I)Q(X) ! { dg-error \"Unclassifiable statement\" }\n c { dg-error \"end of file\" \"end of file\" { target *-*-* } 0 }"}, {"sha": "fb22aaa10afebba16fddf61fe94a6827caec3df5", "filename": "gcc/testsuite/gfortran.dg/g77/check0.f", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcheck0.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcheck0.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcheck0.f?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -8,7 +8,7 @@\n CCC        warning, handle case where there is no such note.\n       logical l(10)\n       integer i(10)\n-      goto (10,20),l ! { dg-error \"Selection expression in computed GOTO\" \"\" }\n-      goto (10,20),i ! { dg-error \"Selection expression in computed GOTO\" \"\" }\n+      goto (10,20),l ! { dg-error \"Selection expression in computed GOTO\" }\n+      goto (10,20),i ! { dg-error \"Selection expression in computed GOTO\" }\n  10   stop\n  20   end"}, {"sha": "8c91ac55b8b5cd932cc5adf95e3378de7f44fd44", "filename": "gcc/testsuite/gfortran.dg/g77/dnrm2.f", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fdnrm2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fdnrm2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fdnrm2.f?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -33,21 +33,21 @@ double precision function dnrm2 ( n, dx, incx)\n       if(n .gt. 0 .and. incx.gt.0) go to 10\n          dnrm2  = zero\n          go to 300\n-   10 assign 30 to next ! { dg-warning \"ASSIGN\" \"\" }\n+   10 assign 30 to next ! { dg-warning \"ASSIGN\" }\n       sum = zero\n       i = 1\n       ix = 1\n-   20    go to next,(30, 50, 70, 110) ! { dg-warning \"Assigned GOTO\" \"\" }\n+   20    go to next,(30, 50, 70, 110) ! { dg-warning \"Assigned GOTO\" }\n    30 if( dabs(dx(i)) .gt. cutlo) go to 85\n-      assign 50 to next ! { dg-warning \"ASSIGN\" \"\" }\n+      assign 50 to next ! { dg-warning \"ASSIGN\" }\n       xmax = zero\n    50 if( dx(i) .eq. zero) go to 200\n       if( dabs(dx(i)) .gt. cutlo) go to 85\n-      assign 70 to next ! { dg-warning \"ASSIGN\" \"\" }\n+      assign 70 to next ! { dg-warning \"ASSIGN\" }\n       go to 105\n   100 continue\n       ix = j\n-      assign 110 to next ! { dg-warning \"ASSIGN\" \"\" }\n+      assign 110 to next ! { dg-warning \"ASSIGN\" }\n       sum = (sum / dx(i)) / dx(i)\n   105 xmax = dabs(dx(i))\n       go to 115"}, {"sha": "dee58b4dad65bae1add69eb7865ca801e02f7dca", "filename": "gcc/testsuite/gfortran.dg/g77/pr9258.f", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fpr9258.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fpr9258.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fpr9258.f?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -5,14 +5,14 @@\n       SUBROUTINE FOO (B)\n \n   10  CALL BAR (A)\n-      ASSIGN 20 TO M           !{ dg-warning \"Deleted feature: ASSIGN\" \"\" }\n+      ASSIGN 20 TO M           !{ dg-warning \"Deleted feature: ASSIGN\" }\n       IF (100.LT.A) GOTO 10\n       GOTO 40\n C\n   20  IF (B.LT.ABS(A)) GOTO 10\n-      ASSIGN 30 TO M           !{ dg-warning \"Deleted feature: ASSIGN\" \"\" }\n+      ASSIGN 30 TO M           !{ dg-warning \"Deleted feature: ASSIGN\" }\n       GOTO 40\n C\n-  30  ASSIGN 10 TO M           !{ dg-warning \"Deleted feature: ASSIGN\" \"\" }\n-  40  GOTO M,(10,20,30)        !{ dg-warning \"Deleted feature: Assigned GOTO\" \"\" }\n+  30  ASSIGN 10 TO M           !{ dg-warning \"Deleted feature: ASSIGN\" }\n+  40  GOTO M,(10,20,30)        !{ dg-warning \"Deleted feature: Assigned GOTO\" }\n       END"}, {"sha": "dea146e776fe364ede476e113aeb92ab3a58ed92", "filename": "gcc/testsuite/gfortran.dg/ichar_1.f90", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fichar_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fichar_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fichar_1.f90?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -45,23 +45,23 @@ program ichar_1\n    g2(1,1) = 'a'\n    if (ichar(g2(1,1)) /= 97) call abort\n \n-   i = ichar(c)      ! { dg-error \"must be of length one\" \"\" }\n-   i = ichar(c(:))   ! { dg-error \"must be of length one\" \"\" }\n-   i = ichar(s2)     ! { dg-error \"must be of length one\" \"\" }\n-   i = ichar(c(1:2)) ! { dg-error \"must be of length one\" \"\" }\n-   i = ichar(c(1:))  ! { dg-error \"must be of length one\" \"\" }\n-   i = ichar('abc')  ! { dg-error \"must be of length one\" \"\" }\n+   i = ichar(c)      ! { dg-error \"must be of length one\" }\n+   i = ichar(c(:))   ! { dg-error \"must be of length one\" }\n+   i = ichar(s2)     ! { dg-error \"must be of length one\" }\n+   i = ichar(c(1:2)) ! { dg-error \"must be of length one\" }\n+   i = ichar(c(1:))  ! { dg-error \"must be of length one\" }\n+   i = ichar('abc')  ! { dg-error \"must be of length one\" }\n \n    ! ichar and iachar use the same checking routines. DO a couple of tests to\n    ! make sure it's not totally broken.\n \n    if (ichar(c(3:3)) /= 97) call abort\n-   i = ichar(c)      ! { dg-error \"must be of length one\" \"\" }\n+   i = ichar(c)      ! { dg-error \"must be of length one\" }\n    \n    i = ichar(dt%addr(1:1))\n-   i = ichar(dt%addr) ! { dg-error \"must be of length one\" \"\" }\n-   i = ichar(dt%addr(1:2)) ! { dg-error \"must be of length one\" \"\" }\n-   i = ichar(dt%addr(1:)) ! { dg-error \"must be of length one\" \"\" }\n+   i = ichar(dt%addr) ! { dg-error \"must be of length one\" }\n+   i = ichar(dt%addr(1:2)) ! { dg-error \"must be of length one\" }\n+   i = ichar(dt%addr(1:)) ! { dg-error \"must be of length one\" }\n    \n    i = ichar(dt1%addr(1:1))\n    i = ichar(dt1%addr)"}, {"sha": "c6598589f8e969b5d314d73afbbc0f4300d5d6e4", "filename": "gcc/testsuite/gfortran.dg/interface_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_1.f90?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -32,7 +32,7 @@ module z\n \n   contains\n \n-    real function f(a)   ! { dg-warning \"in generic interface\" \"\" }\n+    real function f(a)   ! { dg-warning \"in generic interface\" }\n       real a\n       f = a\n     end function"}, {"sha": "8ca28dc96ab22791f0988b73db0be77968eb0c9a", "filename": "gcc/testsuite/gfortran.dg/namelist_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_1.f90?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -3,5 +3,5 @@\n module namelist_1\n   public\n   integer,private :: x\n-  namelist /n/ x ! { dg-error \"cannot be member of PUBLIC namelist\" \"\" }\n+  namelist /n/ x ! { dg-error \"cannot be member of PUBLIC namelist\" }\n end module"}, {"sha": "f6dd2b42e096820fe431c8d898184800a0927774", "filename": "gcc/testsuite/gfortran.dg/namelist_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_2.f90?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -3,5 +3,5 @@\n subroutine namelist_2(x)\n   integer,intent(in) :: x\n   namelist /n/ x\n-  read(*,n) ! { dg-error \"is INTENT\" \"\" }\n+  read(*,n) ! { dg-error \"is INTENT\" }\n end subroutine namelist_2"}, {"sha": "f37946d53c9f7d188365a6ace834335ce7cbbd6b", "filename": "gcc/testsuite/gfortran.dg/namelist_3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_3.f90?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -4,5 +4,5 @@\n program namelist_3\n   integer,pointer :: x\n   allocate (x)\n-  namelist /n/ x ! { dg-error \"NAMELIST attribute with POINTER attribute\" \"\" }\n+  namelist /n/ x ! { dg-error \"NAMELIST attribute with POINTER attribute\" }\n end program namelist_3"}, {"sha": "cc1df5b9b2a22d3bc84559e668f4f581ae4067e2", "filename": "gcc/testsuite/gfortran.dg/namelist_print_2.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_print_2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_print_2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_print_2.f?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -9,5 +9,5 @@\n       real  x\n       namelist /mynml/ x\n       x = 1\n-      print mynml  ! { dg-error \"PRINT namelist.*extension\" \"\" }\n+      print mynml  ! { dg-error \"PRINT namelist.*extension\" }\n       end"}, {"sha": "6d5d1891342e4dae3bc473f0ffef3318c9fe838a", "filename": "gcc/testsuite/gfortran.dg/oldstyle_1.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Foldstyle_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Foldstyle_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Foldstyle_1.f90?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -1,7 +1,7 @@\n ! { dg-do run }\n-      integer i, j /1/, g/2/, h ! { dg-warning \"\" \"\" }\n-      integer k, l(3) /2*2,1/   ! { dg-warning \"\" \"\" }\n-      real pi /3.1416/, e       ! { dg-warning \"\" \"\" }\n+      integer i, j /1/, g/2/, h ! { dg-warning \"\" }\n+      integer k, l(3) /2*2,1/   ! { dg-warning \"\" }\n+      real pi /3.1416/, e       ! { dg-warning \"\" }\n \n       if (j /= 1) call abort ()\n       if (g /= 2) call abort ()"}, {"sha": "6e93e3f7dd7822ee67425f438c916657c4024d5b", "filename": "gcc/testsuite/gfortran.dg/runtime_warning_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fruntime_warning_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Fruntime_warning_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fruntime_warning_1.f90?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -7,7 +7,7 @@\n !\n      character(5) c\n      open (42,status='scratch')\n-     write (42,'(A,$)') 'abc' ! { dg-warning \".*descriptor\" \"\" }\n+     write (42,'(A,$)') 'abc' ! { dg-warning \".*descriptor\" }\n      write (42,'(A)') 'de'\n      rewind (42)\n      read (42,'(A)') c"}, {"sha": "789b0a5bc684f3e20e8ff706e979ad1a7369431a", "filename": "gcc/testsuite/gfortran.dg/underflow.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Funderflow.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgfortran.dg%2Funderflow.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Funderflow.f90?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n program a\n    real x\n-   x = tiny(x) / huge(x)  ! { dg-warning \"Arithmetic underflow\" \"\" }\n+   x = tiny(x) / huge(x)  ! { dg-warning \"Arithmetic underflow\" }\n end program a"}, {"sha": "28644cd015065cf5dc5ea4ee127434a8515d17a5", "filename": "gcc/testsuite/gnat.dg/specs/integer_value.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Finteger_value.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Finteger_value.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Finteger_value.ads?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -1,5 +1,5 @@\n -- { dg-do compile }\n package Integer_Value is\n    X : constant Integer :=\n-     Integer'Integer_Value (12.8); -- { dg-error \"fixed-point type\" \"\" }\n+     Integer'Integer_Value (12.8); -- { dg-error \"fixed-point type\" }\n end Integer_Value;"}, {"sha": "7436f2ff5dcc808cdd60b48708033887b38c8d45", "filename": "gcc/testsuite/obj-c++.dg/fsf-package-0.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffsf-package-0.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffsf-package-0.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffsf-package-0.m?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -32,5 +32,5 @@ void foo (void)\n   a->v2 = 1;\n   a->v3 = [a value] - a->v2;\t/* { dg-warning \".v3. is @protected\" } */\n   a->v4 = a->v3 - 1;\t\t/* { dg-warning \".v4. is @private\" } */\n-  \t\t\t\t/* { dg-warning \".v3. is @protected\" \"\" } */\n+  \t\t\t\t/* { dg-warning \".v3. is @protected\" } */\n }"}, {"sha": "b2370b7eefdd390273b00b64393008a0cdb0489a", "filename": "gcc/testsuite/objc.dg/two-types-1.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fobjc.dg%2Ftwo-types-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a95dfa774e27a837fbdce29186511de5bb3936e/gcc%2Ftestsuite%2Fobjc.dg%2Ftwo-types-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftwo-types-1.m?ref=7a95dfa774e27a837fbdce29186511de5bb3936e", "patch": "@@ -3,13 +3,13 @@\n \n @interface foo\n struct f {}\n-struct g { int a; }; /* { dg-error \"expected ';', identifier or \" \"\" } */\n+struct g { int a; }; /* { dg-error \"expected ';', identifier or \" } */\n \n - (struct f *) a;\n - (struct g *) b;\n @end\n \n int f(struct g *x)\n {\n-  return x->a; /* { dg-bogus \" has no member \" \"\" } */\n+  return x->a; /* { dg-bogus \" has no member \" } */\n }"}]}