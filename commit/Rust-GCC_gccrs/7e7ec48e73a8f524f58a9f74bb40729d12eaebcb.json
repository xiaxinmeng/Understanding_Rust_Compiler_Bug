{"sha": "7e7ec48e73a8f524f58a9f74bb40729d12eaebcb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U3ZWM0OGU3M2E4ZjUyNGY1OGE5Zjc0YmI0MDcyOWQxMmVhZWJjYg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2004-08-04T20:55:08Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-08-04T20:55:08Z"}, "message": "Makefile.in (RTL_BASE_H, RTL_H): Correct.\n\n\t* Makefile.in (RTL_BASE_H, RTL_H): Correct.\n\t(BUILD_RTL): Remove $(BUILD_PREFIX) from ggc-none.o.\n\t(genobjs): Add errors.o, ggc-none.o, and min-insn-modes.o.\n\t(read-rtl.o, gensupport.o, genconfig.o, genflags.o, gencodes.o)\n\t(genconstants.o, genemit.o, genopinit.o, genrecog.o, genextract.o)\n\t(genpeep.o, genattr.o, genattrtab.o, genautomata.o, genoutput.o)\n\t(genconditions.o): Depend on $(RTL_BASE_H) not $(RTL_H).\n\t(ggc-none.o, errors.o): Move rule to generators section;\n\tcorrect dependencies.\n\t(min-insn-modes.o): Move rule to generators section; remove\n\tunnecessary explicit command; correct dependencies.\n\t(print-rtl.o, print-rtl1.o): Correct dependencies.\n\t($(BUILD_PREFIX_1)errors.o. $(BUILD_PREFIX_1)ggc-none.o): Delete rule.\n\t(mostlyclean): Update.\n\n\t* errors.c: Include bconfig.h not config.h.  Correct comment.\n\t* gengtype.c, genpreds.c: Don't define NO_GENRTL_H.\n\t* ggc-none.c: Include bconfig.h; not config.h or tm.h.\n\t* print-rtl.c: Don't include tm_p.h.\n\n\t* rtl.h: Move forward-decl of struct function down where it's\n\tneeded.  Include genrtl.h #ifndef GENERATOR_FILE, not\n\t#ifndef NO_GENRTL_H.  Remove unnecessary #ifdef BUFSIZ statements.\n\nFrom-SVN: r85574", "tree": {"sha": "a9f87e09e81eff73522e399c581774290e92545a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9f87e09e81eff73522e399c581774290e92545a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e7ec48e73a8f524f58a9f74bb40729d12eaebcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e7ec48e73a8f524f58a9f74bb40729d12eaebcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e7ec48e73a8f524f58a9f74bb40729d12eaebcb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e7ec48e73a8f524f58a9f74bb40729d12eaebcb/comments", "author": null, "committer": null, "parents": [{"sha": "b0382c67cb60bf717f7ed330da1c36ca379381d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0382c67cb60bf717f7ed330da1c36ca379381d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0382c67cb60bf717f7ed330da1c36ca379381d8"}], "stats": {"total": 161, "additions": 67, "deletions": 94}, "files": [{"sha": "506b4adbe6adc740a5f1c561f8a6a24034146895", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ec48e73a8f524f58a9f74bb40729d12eaebcb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ec48e73a8f524f58a9f74bb40729d12eaebcb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e7ec48e73a8f524f58a9f74bb40729d12eaebcb", "patch": "@@ -1,3 +1,29 @@\n+2004-08-04  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* Makefile.in (RTL_BASE_H, RTL_H): Correct.\n+\t(BUILD_RTL): Remove $(BUILD_PREFIX) from ggc-none.o.\n+\t(genobjs): Add errors.o, ggc-none.o, and min-insn-modes.o.\n+\t(read-rtl.o, gensupport.o, genconfig.o, genflags.o, gencodes.o)\n+\t(genconstants.o, genemit.o, genopinit.o, genrecog.o, genextract.o)\n+\t(genpeep.o, genattr.o, genattrtab.o, genautomata.o, genoutput.o)\n+\t(genconditions.o): Depend on $(RTL_BASE_H) not $(RTL_H).\n+\t(ggc-none.o, errors.o): Move rule to generators section;\n+\tcorrect dependencies.\n+\t(min-insn-modes.o): Move rule to generators section; remove\n+\tunnecessary explicit command; correct dependencies.\n+\t(print-rtl.o, print-rtl1.o): Correct dependencies.\n+\t($(BUILD_PREFIX_1)errors.o. $(BUILD_PREFIX_1)ggc-none.o): Delete rule.\n+\t(mostlyclean): Update.\n+\n+\t* errors.c: Include bconfig.h not config.h.  Correct comment.\n+\t* gengtype.c, genpreds.c: Don't define NO_GENRTL_H.\n+\t* ggc-none.c: Include bconfig.h; not config.h or tm.h.\n+\t* print-rtl.c: Don't include tm_p.h.\n+\n+\t* rtl.h: Move forward-decl of struct function down where it's\n+\tneeded.  Include genrtl.h #ifndef GENERATOR_FILE, not\n+\t#ifndef NO_GENRTL_H.  Remove unnecessary #ifdef BUFSIZ statements.\n+\n 2004-08-04  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \t    Jeff Law  <law@redhat.com>\n "}, {"sha": "4198d541528dc9ddb4e113398c8d85105c725761", "filename": "gcc/Makefile.in", "status": "modified", "additions": 30, "deletions": 47, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ec48e73a8f524f58a9f74bb40729d12eaebcb/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ec48e73a8f524f58a9f74bb40729d12eaebcb/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7e7ec48e73a8f524f58a9f74bb40729d12eaebcb", "patch": "@@ -682,8 +682,8 @@ HOOKS_H = hooks.h\n LANGHOOKS_DEF_H = langhooks-def.h $(HOOKS_H)\n TARGET_DEF_H = target-def.h $(HOOKS_H)\n MACHMODE_H = machmode.h mode-classes.def insn-modes.h\n-RTL_BASE_H = rtl.h rtl.def $(MACHMODE_H)\n-RTL_H = $(RTL_BASE_H) genrtl.h input.h statistics.h\n+RTL_BASE_H = rtl.h rtl.def $(MACHMODE_H) input.h statistics.h\n+RTL_H = $(RTL_BASE_H) genrtl.h\n PARAMS_H = params.h params.def\n TREE_H = tree.h tree.def $(MACHMODE_H) tree-check.h builtins.def \\\n           input.h statistics.h vec.h\n@@ -775,7 +775,7 @@ LDEXP_LIB = @LDEXP_LIB@\n BUILD_LIBS = $(BUILD_LIBIBERTY)\n \n BUILD_RTL = $(BUILD_PREFIX)rtl.o read-rtl.o \\\n-\t\t$(BUILD_PREFIX)ggc-none.o min-insn-modes.o\n+\t\tggc-none.o min-insn-modes.o\n BUILD_SUPPORT = gensupport.o insn-conditions.o\n BUILD_EARLY_SUPPORT = gensupport.o dummy-conditions.o\n \n@@ -1557,9 +1557,6 @@ ggc-zone.o: ggc-zone.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TR\n stringpool.o: stringpool.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t$(TREE_H) $(GGC_H) gt-stringpool.h\n \n-ggc-none.o: ggc-none.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) $(GGC_H)\n-\t$(CC) -c $(ALL_CFLAGS) -DGENERATOR_FILE $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n-\n prefix.o: prefix.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) Makefile prefix.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t-DPREFIX=\\\"$(prefix)\\\" \\\n@@ -1791,14 +1788,11 @@ rtl.o : rtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) $(RTL_H) real.h \\\n \t$(CC) -c $(ALL_CFLAGS) -DGENERATOR_FILE $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n print-rtl.o : print-rtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-    $(RTL_H) $(TREE_H) hard-reg-set.h $(BASIC_BLOCK_H) real.h $(TM_P_H)\n+    $(RTL_H) $(TREE_H) hard-reg-set.h $(BASIC_BLOCK_H) real.h\n rtlanal.o : rtlanal.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) toplev.h \\\n    $(RTL_H) hard-reg-set.h $(TM_P_H) insn-config.h $(RECOG_H) real.h $(FLAGS_H) \\\n    $(BASIC_BLOCK_H) $(REGS_H) output.h target.h function.h\n \n-errors.o : errors.c $(CONFIG_H) $(SYSTEM_H) errors.h\n-\t$(CC) -c $(ALL_CFLAGS) -DGENERATOR_FILE $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n-\n varasm.o : varasm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) \\\n    $(FLAGS_H) function.h $(EXPR_H) hard-reg-set.h $(REGS_H) \\\n    output.h $(C_PRAGMA_H) toplev.h xcoffout.h debug.h $(GGC_H) $(TM_P_H) \\\n@@ -2450,7 +2444,8 @@ genprogs=$(genprognames:%=%$(build_exeext))\n genobjs=$(genprognames:%=%.o) read-rtl.o gensupport.o genattrtab.o \\\n         genautomata.o gengenrtl.o genmodes.o genpreds.o gengtype.o \\\n \tgenconstants.o gen-protos.o scan.o fix-header.o scan-decls.o \\\n-\tgencheck.o dummy-conditions.o genconditions.o\n+\tgencheck.o dummy-conditions.o genconditions.o errors.o ggc-none.o \\\n+\tmin-insn-modes.o\n \n $(genprogs): %$(build_exeext): %.o  $(BUILD_RTL) $(BUILD_SUPPORT) \\\n \t\t\t       $(BUILD_PRINT) $(BUILD_ERRORS) \\\n@@ -2460,21 +2455,22 @@ $(genprogs): %$(build_exeext): %.o  $(BUILD_RTL) $(BUILD_SUPPORT) \\\n \t\t$(BUILD_ERRORS) $(BUILD_LIBS)\n \n $(genobjs): %.o : %.c\n-\t$(CC_FOR_BUILD) -c $(BUILD_CFLAGS) $(BUILD_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n+\t$(CC_FOR_BUILD) -c $(BUILD_CFLAGS) $(BUILD_CPPFLAGS) $(INCLUDES) \\\n+\t    $< $(OUTPUT_OPTION)\n \n-read-rtl.o: read-rtl.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) $(RTL_H) \\\n+read-rtl.o: read-rtl.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) $(RTL_BASE_H) \\\n   $(OBSTACK_H) $(HASHTAB_H)\n \n-gensupport.o: gensupport.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) $(RTL_H) \\\n+gensupport.o: gensupport.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) $(RTL_BASE_H) \\\n   $(OBSTACK_H) errors.h $(HASHTAB_H) gensupport.h\n \n-genconfig.o : genconfig.c $(RTL_H) $(BCONFIG_H) \\\n+genconfig.o : genconfig.c $(RTL_BASE_H) $(BCONFIG_H) \\\n   $(SYSTEM_H) coretypes.h $(GTM_H) errors.h gensupport.h\n \n-genflags.o : genflags.c $(RTL_H) $(OBSTACK_H) $(BCONFIG_H) \\\n+genflags.o : genflags.c $(RTL_BASE_H) $(OBSTACK_H) $(BCONFIG_H) \\\n   $(SYSTEM_H) coretypes.h $(GTM_H) errors.h gensupport.h\n \n-gencodes.o : gencodes.c $(RTL_H) $(BCONFIG_H) \\\n+gencodes.o : gencodes.c $(RTL_BASE_H) $(BCONFIG_H) \\\n   $(SYSTEM_H) coretypes.h $(GTM_H) errors.h gensupport.h\n \n genconstants$(build_exeext) : genconstants.o $(BUILD_RTL) $(BUILD_EARLY_SUPPORT) \\\n@@ -2483,25 +2479,25 @@ genconstants$(build_exeext) : genconstants.o $(BUILD_RTL) $(BUILD_EARLY_SUPPORT)\n \t genconstants.o $(BUILD_EARLY_SUPPORT) $(BUILD_RTL) \\\n \t    $(BUILD_ERRORS) $(BUILD_LIBS)\n \n-genconstants.o : genconstants.c $(RTL_H) $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) \\\n+genconstants.o : genconstants.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) \\\n   errors.h\n \n-genemit.o : genemit.c $(RTL_H) $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) \\\n+genemit.o : genemit.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) \\\n   errors.h gensupport.h\n \n-genopinit.o : genopinit.c $(RTL_H) $(BCONFIG_H) \\\n+genopinit.o : genopinit.c $(RTL_BASE_H) $(BCONFIG_H) \\\n   $(SYSTEM_H) coretypes.h $(GTM_H) errors.h gensupport.h\n \n-genrecog.o : genrecog.c $(RTL_H) $(BCONFIG_H) \\\n+genrecog.o : genrecog.c $(RTL_BASE_H) $(BCONFIG_H) \\\n   $(SYSTEM_H) coretypes.h $(GTM_H) errors.h gensupport.h\n \n-genextract.o : genextract.c $(RTL_H) $(BCONFIG_H) \\\n+genextract.o : genextract.c $(RTL_BASE_H) $(BCONFIG_H) \\\n   $(SYSTEM_H) coretypes.h $(GTM_H) insn-config.h errors.h gensupport.h\n \n-genpeep.o : genpeep.c $(RTL_H) $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) \\\n+genpeep.o : genpeep.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) \\\n   errors.h gensupport.h\n \n-genattr.o : genattr.c $(RTL_H) $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) errors.h \\\n+genattr.o : genattr.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) errors.h \\\n   gensupport.h\n \n genattrtab$(build_exeext) : genattrtab.o genautomata.o \\\n@@ -2512,13 +2508,13 @@ genattrtab$(build_exeext) : genattrtab.o genautomata.o \\\n \t $(BUILD_RTL) $(BUILD_SUPPORT) $(BUILD_PRINT) $(BUILD_ERRORS) \\\n \t $(BUILD_VARRAY) $(BUILD_LIBS) -lm\n \n-genattrtab.o : genattrtab.c $(RTL_H) $(OBSTACK_H) $(BCONFIG_H) \\\n+genattrtab.o : genattrtab.c $(RTL_BASE_H) $(OBSTACK_H) $(BCONFIG_H) \\\n   $(SYSTEM_H) coretypes.h $(GTM_H) errors.h $(GGC_H) gensupport.h genattrtab.h\n \n-genautomata.o : genautomata.c $(RTL_H) $(OBSTACK_H) $(BCONFIG_H) \\\n+genautomata.o : genautomata.c $(RTL_BASE_H) $(OBSTACK_H) $(BCONFIG_H) \\\n   $(SYSTEM_H) coretypes.h $(GTM_H) errors.h varray.h genattrtab.h $(HASHTAB_H)\n \n-genoutput.o : genoutput.c $(RTL_H) $(BCONFIG_H) \\\n+genoutput.o : genoutput.c $(RTL_BASE_H) $(BCONFIG_H) \\\n   $(SYSTEM_H) coretypes.h $(GTM_H) errors.h gensupport.h\n \n gengenrtl$(build_exeext) : gengenrtl.o $(BUILD_LIBDEPS)\n@@ -2570,8 +2566,11 @@ genconditions$(build_exeext) : genconditions.o $(BUILD_EARLY_SUPPORT) \\\n \t genconditions.o $(BUILD_EARLY_SUPPORT) $(BUILD_RTL) \\\n \t    $(BUILD_ERRORS) $(BUILD_LIBS)\n \n-genconditions.o : genconditions.c $(RTL_H) $(BCONFIG_H) $(SYSTEM_H) coretypes.h \\\n-  $(GTM_H) errors.h\n+genconditions.o : genconditions.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H) \\\n+\tcoretypes.h $(GTM_H) errors.h\n+errors.o : errors.c $(BCONFIG_H) $(SYSTEM_H) errors.h\n+ggc-none.o : ggc-none.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GGC_H)\n+min-insn-modes.o : min-insn-modes.c $(BCONFIG_H) system.h $(MACHMODE_H)\n \n #\f\n # Compile the libraries to be used by gen*.\n@@ -2585,16 +2584,11 @@ $(BUILD_PREFIX_1)rtl.o: $(srcdir)/rtl.c $(BCONFIG_H) coretypes.h $(GTM_H) $(SYST\n \t$(CC_FOR_BUILD) -c $(BUILD_CFLAGS) $(BUILD_CPPFLAGS) $(INCLUDES) $(BUILD_PREFIX)rtl.c $(OUTPUT_OPTION)\n \n print-rtl1.o: $(srcdir)/print-rtl.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h \\\n-  $(GTM_H) $(RTL_H) $(TREE_H) hard-reg-set.h $(BASIC_BLOCK_H) $(TM_P_H)\n+  $(GTM_H) $(RTL_H) $(TREE_H) hard-reg-set.h $(BASIC_BLOCK_H)\n \trm -f print-rtl1.c\n \tsed -e 's/config[.]h/bconfig.h/' $(srcdir)/print-rtl.c > print-rtl1.c\n \t$(CC_FOR_BUILD) -c $(BUILD_CFLAGS) $(BUILD_CPPFLAGS) $(INCLUDES) print-rtl1.c $(OUTPUT_OPTION)\n \n-$(BUILD_PREFIX_1)errors.o: errors.c $(BCONFIG_H) $(SYSTEM_H) errors.h\n-\trm -f $(BUILD_PREFIX)errors.c\n-\tsed -e 's/config[.]h/bconfig.h/' $(srcdir)/errors.c > $(BUILD_PREFIX)errors.c\n-\t$(CC_FOR_BUILD) -c $(BUILD_CFLAGS) $(BUILD_CPPFLAGS) $(INCLUDES) $(BUILD_PREFIX)errors.c $(OUTPUT_OPTION)\n-\n $(BUILD_PREFIX_1)varray.o: varray.c $(BCONFIG_H) coretypes.h $(GTM_H) $(SYSTEM_H) varray.h \\\n   $(RTL_H) $(GGC_H) $(TREE_H) bitmap.h errors.h\n \trm -f $(BUILD_PREFIX)varray.c\n@@ -2603,15 +2597,6 @@ $(BUILD_PREFIX_1)varray.o: varray.c $(BCONFIG_H) coretypes.h $(GTM_H) $(SYSTEM_H\n \t$(CC_FOR_BUILD) -c $(BUILD_CFLAGS) $(BUILD_CPPFLAGS) $(INCLUDES) \\\n \t\t$(BUILD_PREFIX)varray.c $(OUTPUT_OPTION)\n \n-$(BUILD_PREFIX_1)ggc-none.o: ggc-none.c $(BCONFIG_H) coretypes.h $(GTM_H) $(SYSTEM_H) $(GGC_H)\n-\trm -f $(BUILD_PREFIX)ggc-none.c\n-\tsed -e 's/config[.]h/bconfig.h/' $(srcdir)/ggc-none.c > $(BUILD_PREFIX)ggc-none.c\n-\t$(CC_FOR_BUILD) -c $(BUILD_CFLAGS) $(BUILD_CPPFLAGS) $(INCLUDES) $(BUILD_PREFIX)ggc-none.c $(OUTPUT_OPTION)\n-\n-min-insn-modes.o: min-insn-modes.c $(BCONFIG_H) $(SYSTEM_H) $(MACHMODE_H)\n-\t$(CC_FOR_BUILD) -c $(BUILD_CFLAGS) $(BUILD_CPPFLAGS) $(INCLUDES) \\\n-\t    min-insn-modes.c $(OUTPUT_OPTION)\n-\n #\f\n # Remake internationalization support.\n intl.o: intl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) intl.h Makefile\n@@ -3017,9 +3002,7 @@ mostlyclean: lang.mostlyclean\n \t-rm -f *$(coverageexts)\n \t-rm -rf libgcc\n # Delete the temporary source copies for cross compilation.\n-\t-rm -f $(BUILD_PREFIX_1)rtl.c $(BUILD_PREFIX_1)print-rtl.c\n-\t-rm -f $(BUILD_PREFIX_1)bitmap.c $(BUILD_PREFIX_1)errors.c\n-\t-rm -f $(BUILD_PREFIX_1)ggc-none.c print-rtl1.c\n+\t-rm -f $(BUILD_PREFIX_1)rtl.c $(BUILD_PREFIX_1)varray.c print-rtl1.c\n # Delete the temp files made in the course of building libgcc.a.\n \t-rm -f xlimits.h\n # Delete other built files."}, {"sha": "13288a8ced491bb1b650351fc5b2e30e56c1ea69", "filename": "gcc/errors.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ec48e73a8f524f58a9f74bb40729d12eaebcb/gcc%2Ferrors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ec48e73a8f524f58a9f74bb40729d12eaebcb/gcc%2Ferrors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ferrors.c?ref=7e7ec48e73a8f524f58a9f74bb40729d12eaebcb", "patch": "@@ -1,5 +1,5 @@\n /* Basic error reporting routines.\n-   Copyright (C) 1999, 2000, 2001, 2003\n+   Copyright (C) 1999, 2000, 2001, 2003, 2004\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -20,10 +20,10 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n 02111-1307, USA.  */\n \n /* warning, error, and fatal.  These definitions are suitable for use\n-   in the generator programs; eventually we would like to use them in\n-   cc1 too, but that's a longer term project.  */\n+   in the generator programs; the compiler has a more elaborate suite\n+   of diagnostic printers, found in diagnostic.c.  */\n \n-#include \"config.h\"\n+#include \"bconfig.h\"\n #include \"system.h\"\n #include \"errors.h\"\n "}, {"sha": "a1c23d2c9805b7812262e73f418d497d7c4d78bb", "filename": "gcc/gengtype.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ec48e73a8f524f58a9f74bb40729d12eaebcb/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ec48e73a8f524f58a9f74bb40729d12eaebcb/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=7e7ec48e73a8f524f58a9f74bb40729d12eaebcb", "patch": "@@ -24,8 +24,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tm.h\"\n #include \"gengtype.h\"\n #include \"gtyp-gen.h\"\n-\n-#define NO_GENRTL_H\n #include \"rtl.h\"\n #undef abort\n "}, {"sha": "b5601208df8b69aa7baa5bf832319e0baca8faa1", "filename": "gcc/genpreds.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ec48e73a8f524f58a9f74bb40729d12eaebcb/gcc%2Fgenpreds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ec48e73a8f524f58a9f74bb40729d12eaebcb/gcc%2Fgenpreds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpreds.c?ref=7e7ec48e73a8f524f58a9f74bb40729d12eaebcb", "patch": "@@ -25,11 +25,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n-\n-#define NO_GENRTL_H\n #include \"rtl.h\"\n \n-\n static void\n output_predicate_decls (void)\n {"}, {"sha": "2e657dbaec8f8f2b3442bba531ab1888c0225279", "filename": "gcc/ggc-none.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ec48e73a8f524f58a9f74bb40729d12eaebcb/gcc%2Fggc-none.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ec48e73a8f524f58a9f74bb40729d12eaebcb/gcc%2Fggc-none.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-none.c?ref=7e7ec48e73a8f524f58a9f74bb40729d12eaebcb", "patch": "@@ -23,11 +23,11 @@\n    need GC at all.  This prevents problems with pulling in all the\n    tree stuff.  */\n \n-#include \"config.h\"\n+#include \"bconfig.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n-#include \"tm.h\"\n #include \"ggc.h\"\n+\n struct alloc_zone *rtl_zone = NULL;\n struct alloc_zone *garbage_zone = NULL;\n "}, {"sha": "2ca57a94c199a241dd51f7222865285bd0c497cc", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ec48e73a8f524f58a9f74bb40729d12eaebcb/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ec48e73a8f524f58a9f74bb40729d12eaebcb/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=7e7ec48e73a8f524f58a9f74bb40729d12eaebcb", "patch": "@@ -34,7 +34,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"flags.h\"\n #include \"hard-reg-set.h\"\n #include \"basic-block.h\"\n-#include \"tm_p.h\"\n \n static FILE *outfile;\n "}, {"sha": "81f0fa1e5db99a9151aea0d0fe12c33b94bfab39", "filename": "gcc/rtl.h", "status": "modified", "additions": 5, "deletions": 35, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ec48e73a8f524f58a9f74bb40729d12eaebcb/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ec48e73a8f524f58a9f74bb40729d12eaebcb/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=7e7ec48e73a8f524f58a9f74bb40729d12eaebcb", "patch": "@@ -21,10 +21,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n #ifndef GCC_RTL_H\n #define GCC_RTL_H\n-#include \"statistics.h\"\n-\n-struct function;\n \n+#include \"statistics.h\"\n #include \"machmode.h\"\n #include \"input.h\"\n \n@@ -1634,6 +1632,8 @@ extern rtx immed_double_const (HOST_WIDE_INT, HOST_WIDE_INT,\n extern rtx force_const_mem (enum machine_mode, rtx);\n \n /* In varasm.c  */\n+\n+struct function;\n extern rtx get_pool_constant (rtx);\n extern rtx get_pool_constant_mark (rtx, bool *);\n extern enum machine_mode get_pool_mode (rtx);\n@@ -1983,7 +1983,7 @@ extern GTY(()) rtx return_address_pointer_rtx;\n \n /* Include the RTL generation functions.  */\n \n-#ifndef NO_GENRTL_H\n+#ifndef GENERATOR_FILE\n #include \"genrtl.h\"\n #ifndef USE_MAPPED_LOCATION\n #undef gen_rtx_ASM_OPERANDS\n@@ -2109,9 +2109,7 @@ extern int rtx_to_tree_code (enum rtx_code);\n \n /* In cse.c */\n extern int delete_trivially_dead_insns (rtx, int);\n-#ifdef BUFSIZ\n extern int cse_main (rtx, int, int, FILE *);\n-#endif\n extern void cse_condition_code_reg (void);\n \n /* In jump.c */\n@@ -2192,22 +2190,16 @@ extern rtx gen_lowpart_SUBREG (enum machine_mode, rtx);\n extern int combine_instructions (rtx, unsigned int);\n extern unsigned int extended_count (rtx, enum machine_mode, int);\n extern rtx remove_death (unsigned int, rtx);\n-#ifdef BUFSIZ\n extern void dump_combine_stats (FILE *);\n extern void dump_combine_total_stats (FILE *);\n-#endif\n /* In web.c */\n extern void web_main (void);\n \n /* In sched-rgn.c.  */\n-#ifdef BUFSIZ\n extern void schedule_insns (FILE *);\n-#endif\n \n /* In sched-ebb.c.  */\n-#ifdef BUFSIZ\n extern void schedule_ebbs (FILE *);\n-#endif\n \n /* In haifa-sched.c.  */\n extern void fix_sched_param (const char *, const char *);\n@@ -2218,19 +2210,15 @@ extern void debug_rtx (rtx);\n extern void debug_rtx_list (rtx, int);\n extern void debug_rtx_range (rtx, rtx);\n extern rtx debug_rtx_find (rtx, int);\n-#ifdef BUFSIZ\n extern void print_mem_expr (FILE *, tree);\n extern void print_rtl (FILE *, rtx);\n extern void print_simple_rtl (FILE *, rtx);\n extern int print_rtl_single (FILE *, rtx);\n extern void print_inline_rtx (FILE *, rtx, int);\n-#endif\n \n /* In loop.c */\n extern void init_loop (void);\n-#ifdef BUFSIZ\n extern void loop_optimize (rtx, FILE *, int);\n-#endif\n extern void branch_target_load_optimize (bool);\n \n /* In function.c */\n@@ -2256,10 +2244,8 @@ extern rtx move_by_pieces (rtx, rtx, unsigned HOST_WIDE_INT,\n extern void recompute_reg_usage (rtx, int);\n extern int initialize_uninitialized_subregs (void);\n extern void delete_dead_jumptables (void);\n-#ifdef BUFSIZ\n extern void print_rtl_with_bb (FILE *, rtx);\n extern void dump_flow_info (FILE *);\n-#endif\n \n /* In expmed.c */\n extern void init_expmed (void);\n@@ -2271,18 +2257,14 @@ extern rtx expand_mult_highpart (enum machine_mode, rtx,\n /* In gcse.c */\n extern bool can_copy_p (enum machine_mode);\n extern rtx fis_get_condition (rtx);\n-#ifdef BUFSIZ\n extern int gcse_main (rtx, FILE *);\n extern int bypass_jumps (FILE *);\n extern void gcse_after_reload_main (rtx, FILE *);\n-#endif\n \n /* In global.c */\n extern void mark_elimination (int, int);\n-#ifdef BUFSIZ\n extern int global_alloc (FILE *);\n extern void dump_global_regs (FILE *);\n-#endif\n #ifdef HARD_CONST\n /* Yes, this ifdef is silly, but HARD_REG_SET is not always defined.  */\n extern void retry_global_alloc (int, HARD_REG_SET);\n@@ -2311,26 +2293,18 @@ extern bool invalid_mode_change_p (unsigned int, enum reg_class,\n \t\t\t\t   enum machine_mode);\n \n /* In regmove.c */\n-#ifdef BUFSIZ\n extern void regmove_optimize (rtx, int, FILE *);\n-#endif\n extern void combine_stack_adjustments (void);\n \n /* In reorg.c */\n-#ifdef BUFSIZ\n extern void dbr_schedule (rtx, FILE *);\n-#endif\n \n /* In local-alloc.c */\n-#ifdef BUFSIZ\n extern void dump_local_alloc (FILE *);\n-#endif\n extern int local_alloc (void);\n \n /* In reg-stack.c */\n-#ifdef BUFSIZ\n extern bool reg_to_stack (FILE *);\n-#endif\n \n /* In calls.c */\n enum libcall_type\n@@ -2363,11 +2337,9 @@ extern void init_rtl (void);\n extern void traverse_md_constants (int (*) (void **, void *), void *);\n struct md_constant { char *name, *value; };\n \n-#ifdef BUFSIZ\n+/* In read-rtl.c */\n extern int read_skip_spaces (FILE *);\n extern rtx read_rtx (FILE *);\n-#endif\n-\n extern const char *read_rtx_filename;\n extern int read_rtx_lineno;\n \n@@ -2442,9 +2414,7 @@ extern void simplify_using_condition (rtx, rtx *, struct bitmap_head_def *);\n extern void reg_alloc (void);\n \n /* In modulo-sched.c.  */\n-#ifdef BUFSIZ\n extern void sms_schedule (FILE *);\n-#endif\n \f\n struct rtl_hooks\n {"}]}