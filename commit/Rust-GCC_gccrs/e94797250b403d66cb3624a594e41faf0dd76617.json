{"sha": "e94797250b403d66cb3624a594e41faf0dd76617", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk0Nzk3MjUwYjQwM2Q2NmNiMzYyNGE1OTRlNDFmYWYwZGQ3NjYxNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-09-24T09:06:11Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-09-24T09:06:11Z"}, "message": "arm: Fix canary address calculation for non-PIC\n\nFor non-PIC, the stack protector patterns did:\n\n\t  rtx mem = XEXP (force_const_mem (SImode, operands[1]), 0);\n\t  emit_move_insn (operands[2], mem);\n\nHere, operands[1] is the address of the canary (&__stack_chk_guard)\nand operands[2] is the register that we want to move that address into.\nHowever, the code above instead sets operands[2] to the address of a\nconstant pool entry that contains &__stack_chk_guard, rather than to\n&__stack_chk_guard itself.  The sequence therefore does one less\npointer indirection than it should.\n\nThe net effect was to use &__stack_chk_guard for stack-smash detection,\ninstead of using __stack_chk_guard itself.\n\ngcc/\n\t* config/arm/arm.md (*stack_protect_combined_set_insn): For non-PIC,\n\tload the address of the canary rather than the address of the\n\tconstant pool entry that points to it.\n\t(*stack_protect_combined_test_insn): Likewise.\n\ngcc/testsuite/\n\t* gcc.target/arm/stack-protector-3.c: New test.\n\t* gcc.target/arm/stack-protector-4.c: Likewise.", "tree": {"sha": "b194646ca7dd5acb0bc0333d86814438f44e5a4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b194646ca7dd5acb0bc0333d86814438f44e5a4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e94797250b403d66cb3624a594e41faf0dd76617", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e94797250b403d66cb3624a594e41faf0dd76617", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e94797250b403d66cb3624a594e41faf0dd76617", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e94797250b403d66cb3624a594e41faf0dd76617/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10843f8303509fcba880c6c05c08e4b4ccd24f36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10843f8303509fcba880c6c05c08e4b4ccd24f36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10843f8303509fcba880c6c05c08e4b4ccd24f36"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "c4fa116ab77ce0f3d54c4ac10de9c83d3836264e", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e94797250b403d66cb3624a594e41faf0dd76617/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e94797250b403d66cb3624a594e41faf0dd76617/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=e94797250b403d66cb3624a594e41faf0dd76617", "patch": "@@ -9212,7 +9212,7 @@\n \toperands[2] = operands[1];\n       else\n \t{\n-\t  rtx mem = XEXP (force_const_mem (SImode, operands[1]), 0);\n+\t  rtx mem = force_const_mem (SImode, operands[1]);\n \t  emit_move_insn (operands[2], mem);\n \t}\n     }\n@@ -9295,7 +9295,7 @@\n \toperands[3] = operands[1];\n       else\n \t{\n-\t  rtx mem = XEXP (force_const_mem (SImode, operands[1]), 0);\n+\t  rtx mem = force_const_mem (SImode, operands[1]);\n \t  emit_move_insn (operands[3], mem);\n \t}\n     }"}, {"sha": "b8f77fa2309086f1ed91563775ed358f47189952", "filename": "gcc/testsuite/gcc.target/arm/stack-protector-3.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e94797250b403d66cb3624a594e41faf0dd76617/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fstack-protector-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e94797250b403d66cb3624a594e41faf0dd76617/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fstack-protector-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fstack-protector-3.c?ref=e94797250b403d66cb3624a594e41faf0dd76617", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target fstack_protector } */\n+/* { dg-options \"-fstack-protector-all -O2\" } */\n+\n+extern volatile long *stack_chk_guard_ptr;\n+\n+void __attribute__ ((noipa))\n+f (void)\n+{\n+  volatile int x;\n+  /* Munging the contents of __stack_chk_guard should trigger a\n+     stack-smashing failure for this function.  */\n+  *stack_chk_guard_ptr += 1;\n+}\n+\n+asm (\n+\"\t.data\\n\"\n+\"\t.align\t3\\n\"\n+\"\t.globl\tstack_chk_guard_ptr\\n\"\n+\"stack_chk_guard_ptr:\\n\"\n+\"\t.word\t__stack_chk_guard\\n\"\n+\"\t.weak\t__stack_chk_guard\\n\"\n+\"__stack_chk_guard:\\n\"\n+\"\t.word\t0xdead4321\\n\"\n+\"\t.text\\n\"\n+\"\t.type\t__stack_chk_fail, %function\\n\"\n+\"__stack_chk_fail:\\n\"\n+\"\tmovs\tr0, #0\\n\"\n+\"\tb\texit\\n\"\n+\"\t.size\t__stack_chk_fail, .-__stack_chk_fail\"\n+);\n+\n+int\n+main (void)\n+{\n+  f ();\n+  __builtin_abort ();\n+}"}, {"sha": "6334dd00908d23f14cc88b2a749e256012bf9da3", "filename": "gcc/testsuite/gcc.target/arm/stack-protector-4.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e94797250b403d66cb3624a594e41faf0dd76617/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fstack-protector-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e94797250b403d66cb3624a594e41faf0dd76617/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fstack-protector-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fstack-protector-4.c?ref=e94797250b403d66cb3624a594e41faf0dd76617", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target fstack_protector } */\n+/* { dg-require-effective-target fpic } */\n+/* { dg-options \"-fstack-protector-all -O2 -fpic\" } */\n+\n+#include \"stack-protector-3.c\""}]}