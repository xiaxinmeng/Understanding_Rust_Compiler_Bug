{"sha": "1d9c9726013d006ec91f95423aa16457dfe2a2f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ5Yzk3MjYwMTNkMDA2ZWM5MWY5NTQyM2FhMTY0NTdkZmUyYTJmOQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tom@tromey.com", "date": "2021-05-04T21:26:58Z"}, "committer": {"name": "Tom Tromey", "email": "tom@tromey.com", "date": "2021-05-05T06:06:17Z"}, "message": "libcc1: unify compiler handling\n\nBoth libcc1 plugins have nearly identical copies of code to find the\nunderlying compiler.  This seemed wasteful to me, so this patch\nunifies the copies.\n\nTwo minor API changes were needed.\n\nFirst, the old code used a back-link from the compiler object to the\nplugin object to check the 'verbose' setting.  This patch adds a\n'verbose' setting directly to the compiler object instead.\n\nSecond, the 'find' method implicitly knew which compiler base name\n(\"gcc\" or \"g++\") to use.  This patch makes this a parameter that is\npassed in by the plugin.\n\nlibcc1\n\n\t* libcp1.cc (compiler, compiler_triplet_regexp)\n\t(compiler_driver_filename): Remove.\n\t(libcp1::libcp1): Update.\n\t(make_regexp, libcp1::compiler::find)\n\t(libcp1::compiler_triplet_regexp::find)\n\t(libcp1::compiler_driver_filename::find): Remove.\n\t(libcp1_set_verbose, libcp1_set_arguments)\n\t(libcp1_set_triplet_regexp, libcp1_set_driver_filename): Update.\n\t* libcc1.cc (compiler, compiler_triplet_regexp)\n\t(compiler_driver_filename): Remove.\n\t(libcc1::libcc1): Update.\n\t(make_regexp, libcc1::compiler::find)\n\t(libcc1::compiler_triplet_regexp::find)\n\t(libcc1::compiler_driver_filename::find): Remove.\n\t(libcc1_set_verbose, libcc1_set_arguments)\n\t(libcc1_set_triplet_regexp, libcc1_set_driver_filename): Update.\n\t* compiler.cc: New file.\n\t* compiler.hh: New file.\n\t* Makefile.in: Rebuild.\n\t* Makefile.am (libcc1_la_SOURCES): Add compiler.hh, compiler.cc.", "tree": {"sha": "0fd9a505ea21caf57e667c1546207fda116cabab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fd9a505ea21caf57e667c1546207fda116cabab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d9c9726013d006ec91f95423aa16457dfe2a2f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d9c9726013d006ec91f95423aa16457dfe2a2f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d9c9726013d006ec91f95423aa16457dfe2a2f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d9c9726013d006ec91f95423aa16457dfe2a2f9/comments", "author": {"login": "tromey", "id": 1557670, "node_id": "MDQ6VXNlcjE1NTc2NzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tromey", "html_url": "https://github.com/tromey", "followers_url": "https://api.github.com/users/tromey/followers", "following_url": "https://api.github.com/users/tromey/following{/other_user}", "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tromey/subscriptions", "organizations_url": "https://api.github.com/users/tromey/orgs", "repos_url": "https://api.github.com/users/tromey/repos", "events_url": "https://api.github.com/users/tromey/events{/privacy}", "received_events_url": "https://api.github.com/users/tromey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tromey", "id": 1557670, "node_id": "MDQ6VXNlcjE1NTc2NzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tromey", "html_url": "https://github.com/tromey", "followers_url": "https://api.github.com/users/tromey/followers", "following_url": "https://api.github.com/users/tromey/following{/other_user}", "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tromey/subscriptions", "organizations_url": "https://api.github.com/users/tromey/orgs", "repos_url": "https://api.github.com/users/tromey/repos", "events_url": "https://api.github.com/users/tromey/events{/privacy}", "received_events_url": "https://api.github.com/users/tromey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30c9604c2c04587094207b3dc91f472acb6f331d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30c9604c2c04587094207b3dc91f472acb6f331d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30c9604c2c04587094207b3dc91f472acb6f331d"}], "stats": {"total": 528, "additions": 230, "deletions": 298}, "files": [{"sha": "3f20513d11b75d60959728491d550a29bba1d7ce", "filename": "libcc1/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9c9726013d006ec91f95423aa16457dfe2a2f9/libcc1%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9c9726013d006ec91f95423aa16457dfe2a2f9/libcc1%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FMakefile.am?ref=1d9c9726013d006ec91f95423aa16457dfe2a2f9", "patch": "@@ -75,7 +75,7 @@ libcp1plugin_la_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \\\n LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS))\n libcc1_la_LDFLAGS = -module -export-symbols $(srcdir)/libcc1.sym\n libcc1_la_SOURCES = findcomp.cc libcc1.cc libcp1.cc \\\n-\t\tnames.cc names.hh $(shared_source) \\\n+\t\tcompiler.cc compiler.hh names.cc names.hh $(shared_source) \\\n \t\t$(marshall_c_source) $(marshall_cxx_source)\n libcc1_la_LIBADD = $(libiberty)\n libcc1_la_DEPENDENCIES = $(libiberty_dep)"}, {"sha": "d76893e3a24ee9d00a7c4898a801573aceeb4823", "filename": "libcc1/Makefile.in", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9c9726013d006ec91f95423aa16457dfe2a2f9/libcc1%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9c9726013d006ec91f95423aa16457dfe2a2f9/libcc1%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FMakefile.in?ref=1d9c9726013d006ec91f95423aa16457dfe2a2f9", "patch": "@@ -144,8 +144,8 @@ am__installdirs = \"$(DESTDIR)$(cc1libdir)\" \"$(DESTDIR)$(plugindir)\"\n LTLIBRARIES = $(cc1lib_LTLIBRARIES) $(plugin_LTLIBRARIES)\n am__objects_1 = callbacks.lo connection.lo marshall.lo\n am__objects_2 =\n-am_libcc1_la_OBJECTS = findcomp.lo libcc1.lo libcp1.lo names.lo \\\n-\t$(am__objects_1) $(am__objects_2) $(am__objects_2)\n+am_libcc1_la_OBJECTS = findcomp.lo libcc1.lo libcp1.lo compiler.lo \\\n+\tnames.lo $(am__objects_1) $(am__objects_2) $(am__objects_2)\n libcc1_la_OBJECTS = $(am_libcc1_la_OBJECTS)\n @ENABLE_PLUGIN_TRUE@am_libcc1_la_rpath = -rpath $(cc1libdir)\n am_libcc1plugin_la_OBJECTS = libcc1plugin.lo $(am__objects_1) \\\n@@ -428,7 +428,7 @@ libcp1plugin_la_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \\\n LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS))\n libcc1_la_LDFLAGS = -module -export-symbols $(srcdir)/libcc1.sym\n libcc1_la_SOURCES = findcomp.cc libcc1.cc libcp1.cc \\\n-\t\tnames.cc names.hh $(shared_source) \\\n+\t\tcompiler.cc compiler.hh names.cc names.hh $(shared_source) \\\n \t\t$(marshall_c_source) $(marshall_cxx_source)\n \n libcc1_la_LIBADD = $(libiberty)\n@@ -577,6 +577,7 @@ distclean-compile:\n \t-rm -f *.tab.c\n \n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/callbacks.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/compiler.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/connection.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/findcomp.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libcc1.Plo@am__quote@"}, {"sha": "fede8496862509d18e7dde36294ab54209d76a88", "filename": "libcc1/compiler.cc", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9c9726013d006ec91f95423aa16457dfe2a2f9/libcc1%2Fcompiler.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9c9726013d006ec91f95423aa16457dfe2a2f9/libcc1%2Fcompiler.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Fcompiler.cc?ref=1d9c9726013d006ec91f95423aa16457dfe2a2f9", "patch": "@@ -0,0 +1,118 @@\n+/* Compiler handling for plugin\n+   Copyright (C) 2014-2021 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include <cc1plugin-config.h>\n+#include <string>\n+#include <sstream>\n+#include \"libiberty.h\"\n+#include \"compiler.hh\"\n+#include \"xregex.h\"\n+#include \"findcomp.hh\"\n+#include \"intl.h\"\n+\n+// Construct an appropriate regexp to match the compiler name.\n+static std::string\n+make_regexp (const char *triplet_regexp, const char *compiler)\n+{\n+  std::stringstream buf;\n+\n+  buf << \"^\" << triplet_regexp << \"-\";\n+\n+  // Quote the compiler name in case it has something funny in it.\n+  for (const char *p = compiler; *p; ++p)\n+    {\n+      switch (*p)\n+\t{\n+\tcase '.':\n+\tcase '^':\n+\tcase '$':\n+\tcase '*':\n+\tcase '+':\n+\tcase '?':\n+\tcase '(':\n+\tcase ')':\n+\tcase '[':\n+\tcase '{':\n+\tcase '\\\\':\n+\tcase '|':\n+\t  buf << '\\\\';\n+\t  break;\n+\t}\n+      buf << *p;\n+    }\n+  buf << \"$\";\n+\n+  return buf.str ();\n+}\n+\n+char *\n+cc1_plugin::compiler::find (const char *, std::string &) const\n+{\n+  return xstrdup (_(\"Compiler has not been specified\"));\n+}\n+\n+char *\n+cc1_plugin::compiler_triplet_regexp::find (const char *base,\n+\t\t\t\t\t   std::string &compiler) const\n+{\n+  std::string rx = make_regexp (triplet_regexp_.c_str (), base);\n+  if (verbose)\n+    fprintf (stderr, _(\"searching for compiler matching regex %s\\n\"),\n+\t     rx.c_str());\n+  regex_t triplet;\n+  int code = regcomp (&triplet, rx.c_str (), REG_EXTENDED | REG_NOSUB);\n+  if (code != 0)\n+    {\n+      size_t len = regerror (code, &triplet, NULL, 0);\n+      char err[len];\n+\n+      regerror (code, &triplet, err, len);\n+\n+      return concat (\"Could not compile regexp \\\"\",\n+\t\t     rx.c_str (),\n+\t\t     \"\\\": \",\n+\t\t     err,\n+\t\t     (char *) NULL);\n+    }\n+\n+  if (!find_compiler (triplet, &compiler))\n+    {\n+      regfree (&triplet);\n+      return concat (\"Could not find a compiler matching \\\"\",\n+\t\t     rx.c_str (),\n+\t\t     \"\\\"\",\n+\t\t     (char *) NULL);\n+    }\n+  regfree (&triplet);\n+  if (verbose)\n+    fprintf (stderr, _(\"found compiler %s\\n\"), compiler.c_str());\n+  return NULL;\n+}\n+\n+char *\n+cc1_plugin::compiler_driver_filename::find (const char *,\n+\t\t\t\t\t    std::string &compiler) const\n+{\n+  // Simulate fnotice by fprintf.\n+  if (verbose)\n+    fprintf (stderr, _(\"using explicit compiler filename %s\\n\"),\n+\t     driver_filename_.c_str());\n+  compiler = driver_filename_;\n+  return NULL;\n+}"}, {"sha": "638f7c09f634f146a9ddf53fe871da9cf4117d1b", "filename": "libcc1/compiler.hh", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9c9726013d006ec91f95423aa16457dfe2a2f9/libcc1%2Fcompiler.hh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9c9726013d006ec91f95423aa16457dfe2a2f9/libcc1%2Fcompiler.hh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Fcompiler.hh?ref=1d9c9726013d006ec91f95423aa16457dfe2a2f9", "patch": "@@ -0,0 +1,83 @@\n+/* Compiler handling for plugin\n+   Copyright (C) 2014-2020 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef CC1_PLUGIN_COMPILER_HH\n+#define CC1_PLUGIN_COMPILER_HH\n+\n+namespace cc1_plugin\n+{\n+\n+  // Base class for compiler.\n+  class compiler\n+  {\n+  public:\n+    explicit compiler (bool v)\n+      : verbose (v)\n+    {\n+    }\n+\n+    virtual ~compiler () = default;\n+\n+    // Find the compiler.  BASE is the base name of the compiler, see\n+    // compiler-name.hh.  This sets COMPILER to the resulting path.\n+    // Returns nullptr on success, or a malloc'd error string on\n+    // failure.\n+    virtual char *find (const char *base, std::string &compiler) const;\n+\n+    void set_verbose (bool v)\n+    {\n+      verbose = v;\n+    }\n+\n+  protected:\n+    bool verbose;\n+  };\n+\n+  /* Compiler to set by set_triplet_regexp.  */\n+  class compiler_triplet_regexp : public compiler\n+  {\n+  private:\n+    std::string triplet_regexp_;\n+  public:\n+\n+    char *find (const char *base, std::string &compiler) const override;\n+\n+    compiler_triplet_regexp (bool v, std::string triplet_regexp)\n+      : compiler (v), triplet_regexp_ (triplet_regexp)\n+    {\n+    }\n+  };\n+\n+  /* Compiler to set by set_driver_filename.  */\n+  class compiler_driver_filename : public compiler\n+  {\n+  private:\n+    std::string driver_filename_;\n+  public:\n+    char *find (const char *base, std::string &compiler) const override;\n+\n+    compiler_driver_filename (bool v, std::string driver_filename)\n+      : compiler (v), driver_filename_ (driver_filename)\n+    {\n+    }\n+  };\n+\n+}\n+\n+#endif // CC1_PLUGIN_COMPILER_HH"}, {"sha": "ea52c26d78322f9202d970a90f1dfaa0094c245e", "filename": "libcc1/libcc1.cc", "status": "modified", "additions": 12, "deletions": 147, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9c9726013d006ec91f95423aa16457dfe2a2f9/libcc1%2Flibcc1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9c9726013d006ec91f95423aa16457dfe2a2f9/libcc1%2Flibcc1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcc1.cc?ref=1d9c9726013d006ec91f95423aa16457dfe2a2f9", "patch": "@@ -28,18 +28,15 @@ along with GCC; see the file COPYING3.  If not see\n #include <errno.h>\n #include <sys/stat.h>\n #include <stdlib.h>\n-#include <sstream>\n #include \"marshall.hh\"\n #include \"rpc.hh\"\n #include \"connection.hh\"\n #include \"names.hh\"\n #include \"callbacks.hh\"\n #include \"libiberty.h\"\n-#include \"xregex.h\"\n-#include \"findcomp.hh\"\n #include \"compiler-name.hh\"\n-#include \"intl.h\"\n #include \"gcc-c-interface.h\"\n+#include \"compiler.hh\"\n \n struct libcc1;\n \n@@ -71,54 +68,7 @@ struct libcc1 : public gcc_c_context\n   /* Non-zero as an equivalent to gcc driver option \"-v\".  */\n   bool verbose;\n \n-  /* Compiler to set by set_triplet_regexp or set_driver_filename.  */\n-  class compiler\n-  {\n-  protected:\n-    libcc1 *self_;\n-  public:\n-    compiler (libcc1 *self) : self_ (self)\n-    {\n-    }\n-    virtual char *find (std::string &compiler) const;\n-    virtual ~compiler ()\n-    {\n-    }\n-  };\n-\n-  std::unique_ptr<compiler> compilerp;\n-\n-  /* Compiler to set by set_triplet_regexp.  */\n-  class compiler_triplet_regexp : public compiler\n-  {\n-  private:\n-    std::string triplet_regexp_;\n-  public:\n-    char *find (std::string &compiler) const override;\n-    compiler_triplet_regexp (libcc1 *self, std::string triplet_regexp)\n-      : compiler (self), triplet_regexp_ (triplet_regexp)\n-    {\n-    }\n-    virtual ~compiler_triplet_regexp ()\n-    {\n-    }\n-  };\n-\n-  /* Compiler to set by set_driver_filename.  */\n-  class compiler_driver_filename : public compiler\n-  {\n-  private:\n-    std::string driver_filename_;\n-  public:\n-    char *find (std::string &compiler) const override;\n-    compiler_driver_filename (libcc1 *self, std::string driver_filename)\n-      : compiler (self), driver_filename_ (driver_filename)\n-    {\n-    }\n-    virtual ~compiler_driver_filename ()\n-    {\n-    }\n-  };\n+  std::unique_ptr<cc1_plugin::compiler> compilerp;\n };\n \n // A local subclass of connection that holds a back-pointer to the\n@@ -151,7 +101,7 @@ libcc1::libcc1 (const gcc_base_vtable *v,\n     args (),\n     source_file (),\n     verbose (false),\n-    compilerp (new libcc1::compiler (this))\n+    compilerp (new cc1_plugin::compiler (verbose))\n {\n   base.ops = v;\n   c_ops = cv;\n@@ -252,101 +202,14 @@ static const struct gcc_c_fe_vtable c_vtable =\n \n \f\n \n-// Construct an appropriate regexp to match the compiler name.\n-static std::string\n-make_regexp (const char *triplet_regexp, const char *compiler)\n-{\n-  std::stringstream buf;\n-\n-  buf << \"^\" << triplet_regexp << \"-\";\n-\n-  // Quote the compiler name in case it has something funny in it.\n-  for (const char *p = compiler; *p; ++p)\n-    {\n-      switch (*p)\n-\t{\n-\tcase '.':\n-\tcase '^':\n-\tcase '$':\n-\tcase '*':\n-\tcase '+':\n-\tcase '?':\n-\tcase '(':\n-\tcase ')':\n-\tcase '[':\n-\tcase '{':\n-\tcase '\\\\':\n-\tcase '|':\n-\t  buf << '\\\\';\n-\t  break;\n-\t}\n-      buf << *p;\n-    }\n-  buf << \"$\";\n-\n-  return buf.str ();\n-}\n-\n static void\n libcc1_set_verbose (struct gcc_base_context *s, int /* bool */ verbose)\n {\n   libcc1 *self = (libcc1 *) s;\n \n   self->verbose = verbose != 0;\n-}\n-\n-char *\n-libcc1::compiler::find (std::string &compiler ATTRIBUTE_UNUSED) const\n-{\n-  return xstrdup (_(\"Compiler has not been specified\"));\n-}\n-\n-char *\n-libcc1::compiler_triplet_regexp::find (std::string &compiler) const\n-{\n-  std::string rx = make_regexp (triplet_regexp_.c_str (), C_COMPILER_NAME);\n-  if (self_->verbose)\n-    fprintf (stderr, _(\"searching for compiler matching regex %s\\n\"),\n-\t     rx.c_str());\n-  regex_t triplet;\n-  int code = regcomp (&triplet, rx.c_str (), REG_EXTENDED | REG_NOSUB);\n-  if (code != 0)\n-    {\n-      size_t len = regerror (code, &triplet, NULL, 0);\n-      char err[len];\n-\n-      regerror (code, &triplet, err, len);\n-\n-      return concat (\"Could not compile regexp \\\"\",\n-\t\t     rx.c_str (),\n-\t\t     \"\\\": \",\n-\t\t     err,\n-\t\t     (char *) NULL);\n-    }\n-\n-  if (!find_compiler (triplet, &compiler))\n-    {\n-      regfree (&triplet);\n-      return concat (\"Could not find a compiler matching \\\"\",\n-\t\t     rx.c_str (),\n-\t\t     \"\\\"\",\n-\t\t     (char *) NULL);\n-    }\n-  regfree (&triplet);\n-  if (self_->verbose)\n-    fprintf (stderr, _(\"found compiler %s\\n\"), compiler.c_str());\n-  return NULL;\n-}\n-\n-char *\n-libcc1::compiler_driver_filename::find (std::string &compiler) const\n-{\n-  // Simulate fnotice by fprintf.\n-  if (self_->verbose)\n-    fprintf (stderr, _(\"using explicit compiler filename %s\\n\"),\n-\t     driver_filename_.c_str());\n-  compiler = driver_filename_;\n-  return NULL;\n+  if (self->compilerp != nullptr)\n+    self->compilerp->set_verbose (self->verbose);\n }\n \n static char *\n@@ -356,7 +219,7 @@ libcc1_set_arguments (struct gcc_base_context *s,\n   libcc1 *self = (libcc1 *) s;\n \n   std::string compiler;\n-  char *errmsg = self->compilerp->find (compiler);\n+  char *errmsg = self->compilerp->find (C_COMPILER_NAME, compiler);\n   if (errmsg != NULL)\n     return errmsg;\n \n@@ -374,8 +237,9 @@ libcc1_set_triplet_regexp (struct gcc_base_context *s,\n {\n   libcc1 *self = (libcc1 *) s;\n \n-  self->compilerp.reset (new libcc1::compiler_triplet_regexp (self,\n-\t\t\t\t\t\t\t      triplet_regexp));\n+  self->compilerp.reset\n+    (new cc1_plugin::compiler_triplet_regexp (self->verbose,\n+\t\t\t\t\t      triplet_regexp));\n   return NULL;\n }\n \n@@ -385,8 +249,9 @@ libcc1_set_driver_filename (struct gcc_base_context *s,\n {\n   libcc1 *self = (libcc1 *) s;\n \n-  self->compilerp.reset (new libcc1::compiler_driver_filename (self,\n-\t\t\t\t\t\t\t       driver_filename));\n+  self->compilerp.reset\n+    (new cc1_plugin::compiler_driver_filename (self->verbose,\n+\t\t\t\t\t       driver_filename));\n   return NULL;\n }\n "}, {"sha": "c57ac8c66a6b736ec1ac62f7f076179a18130c55", "filename": "libcc1/libcp1.cc", "status": "modified", "additions": 12, "deletions": 147, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9c9726013d006ec91f95423aa16457dfe2a2f9/libcc1%2Flibcp1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9c9726013d006ec91f95423aa16457dfe2a2f9/libcc1%2Flibcp1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcp1.cc?ref=1d9c9726013d006ec91f95423aa16457dfe2a2f9", "patch": "@@ -28,17 +28,14 @@ along with GCC; see the file COPYING3.  If not see\n #include <errno.h>\n #include <sys/stat.h>\n #include <stdlib.h>\n-#include <sstream>\n #include \"marshall-cp.hh\"\n #include \"rpc.hh\"\n #include \"connection.hh\"\n #include \"names.hh\"\n #include \"callbacks.hh\"\n #include \"libiberty.h\"\n-#include \"xregex.h\"\n-#include \"findcomp.hh\"\n #include \"compiler-name.hh\"\n-#include \"intl.h\"\n+#include \"compiler.hh\"\n \n struct libcp1;\n \n@@ -72,54 +69,7 @@ struct libcp1 : public gcc_cp_context\n   /* Non-zero as an equivalent to gcc driver option \"-v\".  */\n   bool verbose;\n \n-  /* Compiler to set by set_triplet_regexp or set_driver_filename.  */\n-  class compiler\n-  {\n-  protected:\n-    libcp1 *self_;\n-  public:\n-    compiler (libcp1 *self) : self_ (self)\n-    {\n-    }\n-    virtual char *find (std::string &compiler) const;\n-    virtual ~compiler ()\n-    {\n-    }\n-  };\n-\n-  std::unique_ptr<compiler> compilerp;\n-\n-  /* Compiler to set by set_triplet_regexp.  */\n-  class compiler_triplet_regexp : public compiler\n-  {\n-  private:\n-    std::string triplet_regexp_;\n-  public:\n-    char *find (std::string &compiler) const override;\n-    compiler_triplet_regexp (libcp1 *self, std::string triplet_regexp)\n-      : compiler (self), triplet_regexp_ (triplet_regexp)\n-    {\n-    }\n-    virtual ~compiler_triplet_regexp ()\n-    {\n-    }\n-  };\n-\n-  /* Compiler to set by set_driver_filename.  */\n-  class compiler_driver_filename : public compiler\n-  {\n-  private:\n-    std::string driver_filename_;\n-  public:\n-    char *find (std::string &compiler) const override;\n-    compiler_driver_filename (libcp1 *self, std::string driver_filename)\n-      : compiler (self), driver_filename_ (driver_filename)\n-    {\n-    }\n-    virtual ~compiler_driver_filename ()\n-    {\n-    }\n-  };\n+  std::unique_ptr<cc1_plugin::compiler> compilerp;\n };\n \n // A local subclass of connection that holds a back-pointer to the\n@@ -152,7 +102,7 @@ libcp1::libcp1 (const gcc_base_vtable *v,\n     args (),\n     source_file (),\n     verbose (false),\n-    compilerp (new libcp1::compiler (this))\n+    compilerp (new cc1_plugin::compiler (verbose))\n {\n   base.ops = v;\n   cp_ops = cv;\n@@ -275,101 +225,14 @@ static const struct gcc_cp_fe_vtable cp_vtable =\n \n \f\n \n-// Construct an appropriate regexp to match the compiler name.\n-static std::string\n-make_regexp (const char *triplet_regexp, const char *compiler)\n-{\n-  std::stringstream buf;\n-\n-  buf << \"^\" << triplet_regexp << \"-\";\n-\n-  // Quote the compiler name in case it has something funny in it.\n-  for (const char *p = compiler; *p; ++p)\n-    {\n-      switch (*p)\n-\t{\n-\tcase '.':\n-\tcase '^':\n-\tcase '$':\n-\tcase '*':\n-\tcase '+':\n-\tcase '?':\n-\tcase '(':\n-\tcase ')':\n-\tcase '[':\n-\tcase '{':\n-\tcase '\\\\':\n-\tcase '|':\n-\t  buf << '\\\\';\n-\t  break;\n-\t}\n-      buf << *p;\n-    }\n-  buf << \"$\";\n-\n-  return buf.str ();\n-}\n-\n static void\n libcp1_set_verbose (struct gcc_base_context *s, int /* bool */ verbose)\n {\n   libcp1 *self = (libcp1 *) s;\n \n   self->verbose = verbose != 0;\n-}\n-\n-char *\n-libcp1::compiler::find (std::string &compiler ATTRIBUTE_UNUSED) const\n-{\n-  return xstrdup (_(\"Compiler has not been specified\"));\n-}\n-\n-char *\n-libcp1::compiler_triplet_regexp::find (std::string &compiler) const\n-{\n-  std::string rx = make_regexp (triplet_regexp_.c_str (), CP_COMPILER_NAME);\n-  if (self_->verbose)\n-    fprintf (stderr, _(\"searching for compiler matching regex %s\\n\"),\n-\t     rx.c_str());\n-  regex_t triplet;\n-  int code = regcomp (&triplet, rx.c_str (), REG_EXTENDED | REG_NOSUB);\n-  if (code != 0)\n-    {\n-      size_t len = regerror (code, &triplet, NULL, 0);\n-      char err[len];\n-\n-      regerror (code, &triplet, err, len);\n-\n-      return concat (\"Could not compile regexp \\\"\",\n-\t\t     rx.c_str (),\n-\t\t     \"\\\": \",\n-\t\t     err,\n-\t\t     (char *) NULL);\n-    }\n-\n-  if (!find_compiler (triplet, &compiler))\n-    {\n-      regfree (&triplet);\n-      return concat (\"Could not find a compiler matching \\\"\",\n-\t\t     rx.c_str (),\n-\t\t     \"\\\"\",\n-\t\t     (char *) NULL);\n-    }\n-  regfree (&triplet);\n-  if (self_->verbose)\n-    fprintf (stderr, _(\"found compiler %s\\n\"), compiler.c_str());\n-  return NULL;\n-}\n-\n-char *\n-libcp1::compiler_driver_filename::find (std::string &compiler) const\n-{\n-  // Simulate fnotice by fprintf.\n-  if (self_->verbose)\n-    fprintf (stderr, _(\"using explicit compiler filename %s\\n\"),\n-\t     driver_filename_.c_str());\n-  compiler = driver_filename_;\n-  return NULL;\n+  if (self->compilerp != nullptr)\n+    self->compilerp->set_verbose (self->verbose);\n }\n \n static char *\n@@ -379,7 +242,7 @@ libcp1_set_arguments (struct gcc_base_context *s,\n   libcp1 *self = (libcp1 *) s;\n \n   std::string compiler;\n-  char *errmsg = self->compilerp->find (compiler);\n+  char *errmsg = self->compilerp->find (CP_COMPILER_NAME, compiler);\n   if (errmsg != NULL)\n     return errmsg;\n \n@@ -397,8 +260,9 @@ libcp1_set_triplet_regexp (struct gcc_base_context *s,\n {\n   libcp1 *self = (libcp1 *) s;\n \n-  self->compilerp.reset (new libcp1::compiler_triplet_regexp (self,\n-\t\t\t\t\t\t\t      triplet_regexp));\n+  self->compilerp.reset\n+    (new cc1_plugin::compiler_triplet_regexp (self->verbose,\n+\t\t\t\t\t      triplet_regexp));\n   return NULL;\n }\n \n@@ -408,8 +272,9 @@ libcp1_set_driver_filename (struct gcc_base_context *s,\n {\n   libcp1 *self = (libcp1 *) s;\n \n-  self->compilerp.reset (new libcp1::compiler_driver_filename (self,\n-\t\t\t\t\t\t\t       driver_filename));\n+  self->compilerp.reset\n+    (new cc1_plugin::compiler_driver_filename (self->verbose,\n+\t\t\t\t\t       driver_filename));\n   return NULL;\n }\n "}]}