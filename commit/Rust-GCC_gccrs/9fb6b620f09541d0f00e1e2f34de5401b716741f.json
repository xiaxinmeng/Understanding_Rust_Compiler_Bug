{"sha": "9fb6b620f09541d0f00e1e2f34de5401b716741f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZiNmI2MjBmMDk1NDFkMGYwMGUxZTJmMzRkZTU0MDFiNzE2NzQxZg==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2013-04-08T19:59:57Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2013-04-08T19:59:57Z"}, "message": "rtl.texi (sequence): Rewrite documentation to match the current use of SEQUENCE rtl objects.\n\n\n\t* doc/rtl.texi (sequence): Rewrite documentation to match the\n\tcurrent use of SEQUENCE rtl objects.\n\t* rtl.def (SEQUENCE): Likewise.\n\n\t* doc/rtl.texi (NOTE_INSN_EH_REGION_BEG, NOTE_INSN_EH_REGION_END):\n\tUpdate documentation.\n\t(NOTE_INSN_LOOP_BEG, NOTE_INSN_LOOP_END, NOTE_INSN_LOOP_CONT,\n\tNOTE_INSN_LOOP_VTOP): Remove documentation for non-existing notes.\n\n\t* reg-notes.def (REG_EH_CONTEXT): Remove unused note.\n\nFrom-SVN: r197611", "tree": {"sha": "0610536ff474f68b4b12cecefe9563258f831516", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0610536ff474f68b4b12cecefe9563258f831516"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fb6b620f09541d0f00e1e2f34de5401b716741f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fb6b620f09541d0f00e1e2f34de5401b716741f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fb6b620f09541d0f00e1e2f34de5401b716741f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fb6b620f09541d0f00e1e2f34de5401b716741f/comments", "author": null, "committer": null, "parents": [{"sha": "a2d0800a410ddd6dd321fd6b92c0e21f029fcbab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2d0800a410ddd6dd321fd6b92c0e21f029fcbab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2d0800a410ddd6dd321fd6b92c0e21f029fcbab"}], "stats": {"total": 92, "additions": 50, "deletions": 42}, "files": [{"sha": "f2d2a610478b7503359f15951c9d8a0fc17dcd89", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb6b620f09541d0f00e1e2f34de5401b716741f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb6b620f09541d0f00e1e2f34de5401b716741f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9fb6b620f09541d0f00e1e2f34de5401b716741f", "patch": "@@ -1,3 +1,16 @@\n+2013-04-08  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* doc/rtl.texi (sequence): Rewrite documentation to match the\n+\tcurrent use of SEQUENCE rtl objects.\n+\t* rtl.def (SEQUENCE): Likewise.\n+\n+\t* doc/rtl.texi (NOTE_INSN_EH_REGION_BEG, NOTE_INSN_EH_REGION_END):\n+\tUpdate documentation.\n+\t(NOTE_INSN_LOOP_BEG, NOTE_INSN_LOOP_END, NOTE_INSN_LOOP_CONT,\n+\tNOTE_INSN_LOOP_VTOP): Remove documentation for non-existing notes.\n+\n+\t* reg-notes.def (REG_EH_CONTEXT): Remove unused note.\n+\n 2013-04-08  Teresa Johnson  <tejohnson@google.com>\n \n \t* basic-block.h (GCOV_COMPUTE_SCALE): Define."}, {"sha": "8829b0e3493aa001d2100cc7ba30b39d57250174", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 19, "deletions": 33, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb6b620f09541d0f00e1e2f34de5401b716741f/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb6b620f09541d0f00e1e2f34de5401b716741f/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=9fb6b620f09541d0f00e1e2f34de5401b716741f", "patch": "@@ -3099,17 +3099,10 @@ side-effects.\n \n @findex sequence\n @item (sequence [@var{insns} @dots{}])\n-Represents a sequence of insns.  Each of the @var{insns} that appears\n-in the vector is suitable for appearing in the chain of insns, so it\n-must be an @code{insn}, @code{jump_insn}, @code{call_insn},\n-@code{code_label}, @code{barrier} or @code{note}.\n-\n-A @code{sequence} RTX is never placed in an actual insn during RTL\n-generation.  It represents the sequence of insns that result from a\n-@code{define_expand} @emph{before} those insns are passed to\n-@code{emit_insn} to insert them in the chain of insns.  When actually\n-inserted, the individual sub-insns are separated out and the\n-@code{sequence} is forgotten.\n+Represents a sequence of insns.  If a @code{sequence} appears in the\n+chain of insns, then each of the @var{insns} that appears in the sequence\n+must be suitable for appearing in the chain of insns, i.e. must satisfy\n+the @code{INSN_P} predicate.\n \n After delay-slot scheduling is completed, an insn and all the insns that\n reside in its delay slots are grouped together into a @code{sequence}.\n@@ -3123,6 +3116,19 @@ the effect of the insns in the delay slots.  In such a case,\n the branch and should be executed only if the branch is taken; otherwise\n the insn should be executed only if the branch is not taken.\n @xref{Delay Slots}.\n+\n+Some back ends also use @code{sequence} objects for purposes other than\n+delay-slot groups.  This is not supported in the common parts of the\n+compiler, which treat such sequences as delay-slot groups.\n+\n+DWARF2 Call Frame Address (CFA) adjustments are sometimes also expressed\n+using @code{sequence} objects as the value of a @code{RTX_FRAME_RELATED_P}\n+note.  This only happens if the CFA adjustments cannot be easily derived\n+from the pattern of the instruction to which the note is attached.  In\n+such cases, the value of the note is used instead of best-guesing the\n+semantics of the instruction.  The back end can attach notes containing\n+a @code{sequence} of @code{set} patterns that express the effect of the\n+parent instruction.\n @end table\n \n These expression codes appear in place of a side effect, as the body of\n@@ -3602,28 +3608,8 @@ of debugging information.\n @item NOTE_INSN_EH_REGION_BEG\n @itemx NOTE_INSN_EH_REGION_END\n These types of notes indicate the position of the beginning and end of a\n-level of scoping for exception handling.  @code{NOTE_BLOCK_NUMBER}\n-identifies which @code{CODE_LABEL} or @code{note} of type\n-@code{NOTE_INSN_DELETED_LABEL} is associated with the given region.\n-\n-@findex NOTE_INSN_LOOP_BEG\n-@findex NOTE_INSN_LOOP_END\n-@item NOTE_INSN_LOOP_BEG\n-@itemx NOTE_INSN_LOOP_END\n-These types of notes indicate the position of the beginning and end\n-of a @code{while} or @code{for} loop.  They enable the loop optimizer\n-to find loops quickly.\n-\n-@findex NOTE_INSN_LOOP_CONT\n-@item NOTE_INSN_LOOP_CONT\n-Appears at the place in a loop that @code{continue} statements jump to.\n-\n-@findex NOTE_INSN_LOOP_VTOP\n-@item NOTE_INSN_LOOP_VTOP\n-This note indicates the place in a loop where the exit test begins for\n-those loops in which the exit test has been duplicated.  This position\n-becomes another virtual start of the loop when considering loop\n-invariants.\n+level of scoping for exception handling.  @code{NOTE_EH_HANDLER}\n+identifies which region is associated with these notes.\n \n @findex NOTE_INSN_FUNCTION_BEG\n @item NOTE_INSN_FUNCTION_BEG"}, {"sha": "3b1d27ca8a7d18a51c1bc00410ba7a499fb4118d", "filename": "gcc/reg-notes.def", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb6b620f09541d0f00e1e2f34de5401b716741f/gcc%2Freg-notes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb6b620f09541d0f00e1e2f34de5401b716741f/gcc%2Freg-notes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-notes.def?ref=9fb6b620f09541d0f00e1e2f34de5401b716741f", "patch": "@@ -172,11 +172,6 @@ REG_NOTE (CFA_WINDOW_SAVE)\n    the rest of the compiler as a CALL_INSN.  */\n REG_NOTE (CFA_FLUSH_QUEUE)\n \n-/* Indicates that REG holds the exception context for the function.\n-   This context is shared by inline functions, so the code to acquire\n-   the real exception context is delayed until after inlining.  */\n-REG_NOTE (EH_CONTEXT)\n-\n /* Indicates what exception region an INSN belongs in.  This is used\n    to indicate what region to which a call may throw.  REGION 0\n    indicates that a call cannot throw at all.  REGION -1 indicates"}, {"sha": "f8aea32b397d9cb8aa08346cf2e62d025da14a9f", "filename": "gcc/rtl.def", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb6b620f09541d0f00e1e2f34de5401b716741f/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb6b620f09541d0f00e1e2f34de5401b716741f/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=9fb6b620f09541d0f00e1e2f34de5401b716741f", "patch": "@@ -102,10 +102,24 @@ DEF_RTL_EXPR(EXPR_LIST, \"expr_list\", \"ee\", RTX_EXTRA)\n    The insns are represented in print by their uids.  */\n DEF_RTL_EXPR(INSN_LIST, \"insn_list\", \"ue\", RTX_EXTRA)\n \n-/* SEQUENCE appears in the result of a `gen_...' function\n-   for a DEFINE_EXPAND that wants to make several insns.\n-   Its elements are the bodies of the insns that should be made.\n-   `emit_insn' takes the SEQUENCE apart and makes separate insns.  */\n+/* SEQUENCE is used in late passes of the compiler to group insns for\n+   one reason or another.\n+\n+   For example, after delay slot filling, branch instructions with filled\n+   delay slots are represented as a SEQUENCE of length 1 + n_delay_slots,\n+   with the branch instruction in XEXPVEC(seq, 0, 0) and the instructions\n+   occupying the delay slots in the remaining XEXPVEC slots.\n+\n+   Another place where a SEQUENCE may appear, is in REG_FRAME_RELATED_EXPR\n+   notes, to express complex operations that are not obvious from the insn\n+   to which the REG_FRAME_RELATED_EXPR note is attached.  In this usage of\n+   SEQUENCE, the sequence vector slots do not hold real instructions but\n+   only pseudo-instructions that can be translated to DWARF CFA expressions.\n+\n+   Some back ends also use SEQUENCE to group insns in bundles.\n+\n+   Much of the compiler infrastructure is not prepared to handle SEQUENCE\n+   objects.  Only passes after pass_free_cfg are expected to handle them.  */\n DEF_RTL_EXPR(SEQUENCE, \"sequence\", \"E\", RTX_EXTRA)\n \n /* Represents a non-global base address.  This is only used in alias.c.  */"}]}