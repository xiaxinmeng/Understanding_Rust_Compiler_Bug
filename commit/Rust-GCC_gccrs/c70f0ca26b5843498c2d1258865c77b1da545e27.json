{"sha": "c70f0ca26b5843498c2d1258865c77b1da545e27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzcwZjBjYTI2YjU4NDM0OThjMmQxMjU4ODY1Yzc3YjFkYTU0NWUyNw==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2015-10-11T09:03:09Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2015-10-11T09:03:09Z"}, "message": "bb-reorder: Improve the simple algorithm for -Os (PR67864)\n\nAs the PR points out, the \"simple\" reorder algorithm makes bigger code\nthan the STC algorithm did, for -Os, for x86.  I now tested it for many\ndifferent targets and it turns out to be worse everywhere.\n\nThis simple patch tunes \"simple\" a bit; this makes it better than STC\nalmost everywhere.  The only exceptions (for the targets where I have\nresults) are x86 and mn10300.  For those targets it may be best to switch\nthe default algorithm for -Os to STC.\n\n\n2015-10-11  Segher Boessenkool  <segher@kernel.crashing.org>\n\n\tPR rtl-optimization/67864\n\t* gcc/bb-reorder (reorder_basic_blocks_simple): Prefer existing\n\tfallthrough edges for conditional jumps.  Don't sort candidate\n\tedges if not optimizing for speed.\n\nFrom-SVN: r228692", "tree": {"sha": "04a5840f8567588820334a1cb08eabe841a9300d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04a5840f8567588820334a1cb08eabe841a9300d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c70f0ca26b5843498c2d1258865c77b1da545e27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c70f0ca26b5843498c2d1258865c77b1da545e27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c70f0ca26b5843498c2d1258865c77b1da545e27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c70f0ca26b5843498c2d1258865c77b1da545e27/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fac812f0bdd174e727899f2557580418ccf62c55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fac812f0bdd174e727899f2557580418ccf62c55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fac812f0bdd174e727899f2557580418ccf62c55"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "3cc9c5c0fce6dba995c1e79ca1fa21550d288f25", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70f0ca26b5843498c2d1258865c77b1da545e27/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70f0ca26b5843498c2d1258865c77b1da545e27/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c70f0ca26b5843498c2d1258865c77b1da545e27", "patch": "@@ -1,3 +1,10 @@\n+2015-10-11  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR rtl-optimization/67864\n+\t* gcc/bb-reorder (reorder_basic_blocks_simple): Prefer existing\n+\tfallthrough edges for conditional jumps.  Don't sort candidate\n+\tedges if not optimizing for speed.\n+\n 2015-10-10  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* defaults.h (REVERSE_CONDITION): New default definition."}, {"sha": "3b7098eeda73f9131e05e35757972f2fe2e437a0", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70f0ca26b5843498c2d1258865c77b1da545e27/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70f0ca26b5843498c2d1258865c77b1da545e27/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=c70f0ca26b5843498c2d1258865c77b1da545e27", "patch": "@@ -2318,16 +2318,24 @@ reorder_basic_blocks_simple (void)\n \n       if (any_condjump_p (end))\n \t{\n-\t  edges[n++] = EDGE_SUCC (bb, 0);\n-\t  edges[n++] = EDGE_SUCC (bb, 1);\n+\t  edge e0 = EDGE_SUCC (bb, 0);\n+\t  edge e1 = EDGE_SUCC (bb, 1);\n+\t  /* When optimizing for size it is best to keep the original\n+\t     fallthrough edges.  */\n+\t  if (e1->flags & EDGE_FALLTHRU)\n+\t    std::swap (e0, e1);\n+\t  edges[n++] = e0;\n+\t  edges[n++] = e1;\n \t}\n       else if (single_succ_p (bb))\n \tedges[n++] = EDGE_SUCC (bb, 0);\n     }\n \n-  /* Sort the edges, the most desirable first.  */\n+  /* Sort the edges, the most desirable first.  When optimizing for size\n+     all edges are equally desirable.  */\n \n-  std::stable_sort (edges, edges + n, edge_order);\n+  if (optimize_function_for_speed_p (cfun))\n+    std::stable_sort (edges, edges + n, edge_order);\n \n   /* Now decide which of those edges to make fallthrough edges.  We set\n      BB_VISITED if a block already has a fallthrough successor assigned"}]}