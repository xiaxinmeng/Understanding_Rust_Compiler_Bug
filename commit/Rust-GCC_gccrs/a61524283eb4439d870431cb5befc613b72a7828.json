{"sha": "a61524283eb4439d870431cb5befc613b72a7828", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTYxNTI0MjgzZWI0NDM5ZDg3MDQzMWNiNWJlZmM2MTNiNzJhNzgyOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-20T15:55:52Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-20T15:55:52Z"}, "message": "[multiple changes]\n\n2014-01-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_attr.adb (Analyze_Attribute, case 'Constrained): In an\n\tinstance the attribute is legal, and its value is determined\n\tstatically if the type has no discriminants. This choice is\n\tmore useful than rechecking the legality rule in the instance,\n\tis consistent with older usage, and is also consistent with all\n\texisting tests.\n\n2014-01-20  Arnaud Charlet  <charlet@adacore.com>\n\n\t* sem_cat.adb (Validate_Static_Object_Name): Change error into\n\twarning in Relaxed_Semantic_Mode.\n\nFrom-SVN: r206838", "tree": {"sha": "565d37ca1822b76afb520e484f16476161d93a49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/565d37ca1822b76afb520e484f16476161d93a49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a61524283eb4439d870431cb5befc613b72a7828", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a61524283eb4439d870431cb5befc613b72a7828", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a61524283eb4439d870431cb5befc613b72a7828", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a61524283eb4439d870431cb5befc613b72a7828/comments", "author": null, "committer": null, "parents": [{"sha": "e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e19fd0bde5ebf61308817cd9bf05e90a7d5a0aee"}], "stats": {"total": 56, "additions": 37, "deletions": 19}, "files": [{"sha": "4b1d4c93f4b6129d50664cc501f371699e3e1667", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61524283eb4439d870431cb5befc613b72a7828/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61524283eb4439d870431cb5befc613b72a7828/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a61524283eb4439d870431cb5befc613b72a7828", "patch": "@@ -1,3 +1,17 @@\n+2014-01-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute, case 'Constrained): In an\n+\tinstance the attribute is legal, and its value is determined\n+\tstatically if the type has no discriminants. This choice is\n+\tmore useful than rechecking the legality rule in the instance,\n+\tis consistent with older usage, and is also consistent with all\n+\texisting tests.\n+\n+2014-01-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_cat.adb (Validate_Static_Object_Name): Change error into\n+\twarning in Relaxed_Semantic_Mode.\n+\n 2014-01-20  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_attr.adb: Code and comments cleanup."}, {"sha": "8f1a1eef225e1a1d3fdc6f0b452674e00f23ac82", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61524283eb4439d870431cb5befc613b72a7828/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61524283eb4439d870431cb5befc613b72a7828/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=a61524283eb4439d870431cb5befc613b72a7828", "patch": "@@ -3018,34 +3018,37 @@ package body Sem_Attr is\n             end if;\n \n             --  Must have discriminants or be an access type designating\n-            --  a type with discriminants. If it is a classwide type is ???\n+            --  a type with discriminants. If it is a classwide type it\n             --  has unknown discriminants.\n \n             if Has_Discriminants (P_Type)\n-               or else Has_Unknown_Discriminants (P_Type)\n-               or else\n-                 (Is_Access_Type (P_Type)\n-                   and then Has_Discriminants (Designated_Type (P_Type)))\n+              or else Has_Unknown_Discriminants (P_Type)\n+              or else\n+                (Is_Access_Type (P_Type)\n+                  and then Has_Discriminants (Designated_Type (P_Type)))\n             then\n                return;\n \n+            --  The rule given in 3.7.2 is part of static semantics, but the\n+            --  intent is clearly that it be treated as a legality rule, and\n+            --  rechecked in the visible part of an instance. Nevertheless\n+            --  the intent also seems to be it should legally apply to the\n+            --  actual of a formal with unknown discriminants, regardless of\n+            --  whether the actual has discriminants, in which case the value\n+            --  of the attribute is determined using the J.4 rules. This choice\n+            --  seems the most useful, and is compatible with existing tests.\n+\n+            elsif In_Instance then\n+               return;\n+\n             --  Also allow an object of a generic type if extensions allowed\n-            --  and allow this for any type at all.\n+            --  and allow this for any type at all. (this may be obsolete ???)\n \n             elsif (Is_Generic_Type (P_Type)\n-                     or else Is_Generic_Actual_Type (P_Type))\n+                    or else Is_Generic_Actual_Type (P_Type))\n               and then Extensions_Allowed\n             then\n                return;\n-\n-            --  For compatibility with Declib code, treat all prefixes as\n-            --  legal, including non-discriminated types. This is because\n-            --  DECLIB uses the obsolescent interpretation of the attribute,\n-            --  and applies it to types as well as to objects, while the\n-            --  current definition applies to objects of a discriminated type.\n-\n-            elsif OpenVMS_On_Target then\n-               return;\n             end if;\n          end if;\n "}, {"sha": "3692e519330bbaea400b440d07aa965cc5412912", "filename": "gcc/ada/sem_cat.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61524283eb4439d870431cb5befc613b72a7828/gcc%2Fada%2Fsem_cat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61524283eb4439d870431cb5befc613b72a7828/gcc%2Fada%2Fsem_cat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.adb?ref=a61524283eb4439d870431cb5befc613b72a7828", "patch": "@@ -2172,10 +2172,11 @@ package body Sem_Cat is\n             --  This is the error case\n \n             else\n-               --  In GNAT mode, this is just a warning, to allow it to be\n-               --  judiciously turned off. Otherwise it is a real error.\n+               --  In GNAT mode or Relaxed RM Semantic mode, this is just a\n+               --  warning, to allow it to be judiciously turned off.\n+               --  Otherwise it is a real error.\n \n-               if GNAT_Mode then\n+               if GNAT_Mode or Relaxed_RM_Semantics then\n                   Error_Msg_N\n                     (\"??non-static constant in preelaborated unit\", N);\n                else"}]}