{"sha": "5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFiMDZjNmRmZWU2OTk5ZjBlYmQyZDc3ZjUzNzY2ZGUxOGU1ZGM1Zg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-01-03T20:30:28Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-01-03T20:30:28Z"}, "message": "set.h: Implement DR 130 here too.\n\n2010-01-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/debug/set.h: Implement DR 130 here too.\n\t* include/debug/multiset.h: Likewise.\n\t* include/debug/map.h: Likewise.\n\t* include/debug/multimap.h: Likewise.\n\t* include/profile/set.h: Implement DR 130 fully.\n\t* include/profile/multiset.h: Likewise.\n\t* include/profile/map.h: Likewise.\n\t* include/profile/multimap.h: Likewise.\n\t* include/debug/list: Implement DR 1133 here too.\n\t* include/ext/pb_ds/detail/debug_map_base.hpp: Comment out for\n\tnow uses of __gnu_cxx::throw_allocator.\n\t* testsuite/21_strings/basic_string/40160.cc: Don't pass\n\texplicitly -D_GLIBCXX_DEBUG, doesn't play well with profile-mode\n\ttesting.\n\nFrom-SVN: r155594", "tree": {"sha": "245c4584a0dd9666c492348854833672db104618", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/245c4584a0dd9666c492348854833672db104618"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f/comments", "author": null, "committer": null, "parents": [{"sha": "c9828e7878e2bb5491e8d4b6504f9050b1afb708", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9828e7878e2bb5491e8d4b6504f9050b1afb708", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9828e7878e2bb5491e8d4b6504f9050b1afb708"}], "stats": {"total": 275, "additions": 227, "deletions": 48}, "files": [{"sha": "91865590a4c8cde0e880a8de95883169c5aaccf4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f", "patch": "@@ -1,3 +1,20 @@\n+2010-01-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/debug/set.h: Implement DR 130 here too.\n+\t* include/debug/multiset.h: Likewise.\n+\t* include/debug/map.h: Likewise.\n+\t* include/debug/multimap.h: Likewise.\n+\t* include/profile/set.h: Implement DR 130 fully.\n+\t* include/profile/multiset.h: Likewise.\n+\t* include/profile/map.h: Likewise.\n+\t* include/profile/multimap.h: Likewise.\n+\t* include/debug/list: Implement DR 1133 here too.\n+\t* include/ext/pb_ds/detail/debug_map_base.hpp: Comment out for\n+\tnow uses of __gnu_cxx::throw_allocator.\n+\t* testsuite/21_strings/basic_string/40160.cc: Don't pass\n+\texplicitly -D_GLIBCXX_DEBUG, doesn't play well with profile-mode\n+\ttesting.\n+\n 2010-01-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/profile/bitset (bitset<>::bitset(unsigned long long)): Add"}, {"sha": "3af008c6b172169835a12af612655eda5b517ca5", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f", "patch": "@@ -1,6 +1,6 @@\n // Debugging list implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -395,6 +395,12 @@ namespace __debug\n \tthis->splice(__position, _GLIBCXX_MOVE(__x), __x.begin(), __x.end());\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      void\n+      splice(iterator __position, list& __x)\n+      { splice(__position, std::move(__x)); }\n+#endif\n+\n       void\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       splice(iterator __position, list&& __x, iterator __i)\n@@ -421,6 +427,12 @@ namespace __debug\n \t\t      __i.base());\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      void\n+      splice(iterator __position, list& __x, iterator __i)\n+      { splice(__position, std::move(__x), __i); }\n+#endif\n+\n       void\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       splice(iterator __position, list&& __x, iterator __first,\n@@ -457,6 +469,12 @@ namespace __debug\n \t\t      __first.base(), __last.base());\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      void\n+      splice(iterator __position, list& __x, iterator __first, iterator __last)\n+      { splice(__position, std::move(__x), __first, __last); }\n+#endif\n+\n       void\n       remove(const _Tp& __value)\n       {\n@@ -541,6 +559,12 @@ namespace __debug\n \t  }\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      void\n+      merge(list& __x)\n+      { merge(std::move(__x)); }\n+#endif\n+\n       template<class _Compare>\n         void\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n@@ -566,6 +590,13 @@ namespace __debug\n \t    }\n \t}\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename _Compare>\n+        void\n+        merge(list& __x, _Compare __comp)\n+        { merge(std::move(__x), __comp); }\n+#endif\n+\n       void\n       sort() { _Base::sort(); }\n "}, {"sha": "9a558b594887c075fac1ee491df14b34ef66e10c", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f", "patch": "@@ -1,6 +1,6 @@\n // Debugging map implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2009\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -228,13 +228,23 @@ namespace __debug\n \t  _Base::insert(__first, __last);\n \t}\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      iterator\n+      erase(iterator __position)\n+      {\n+\t__glibcxx_check_erase(__position);\n+\t__position._M_invalidate();\n+\treturn iterator(_Base::erase(__position.base()), this);\n+      }\n+#else\n       void\n       erase(iterator __position)\n       {\n \t__glibcxx_check_erase(__position);\n \t__position._M_invalidate();\n \t_Base::erase(__position.base());\n       }\n+#endif\n \n       size_type\n       erase(const key_type& __x)\n@@ -250,6 +260,18 @@ namespace __debug\n \t}\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      iterator\n+      erase(iterator __first, iterator __last)\n+      {\n+\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t// 151. can't currently clear() empty container\n+\t__glibcxx_check_erase_range(__first, __last);\n+\twhile (__first != __last)\n+\t  this->erase(__first++);\n+\treturn __last;\n+      }\n+#else\n       void\n       erase(iterator __first, iterator __last)\n       {\n@@ -259,6 +281,7 @@ namespace __debug\n \twhile (__first != __last)\n \t  this->erase(__first++);\n       }\n+#endif\n \n       void\n       swap(map& __x)"}, {"sha": "f69a289cf65d378138365b660c42b9abaead9550", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f", "patch": "@@ -1,6 +1,6 @@\n // Debugging multimap implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2009\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -215,13 +215,23 @@ namespace __debug\n \t  _Base::insert(__first, __last);\n \t}\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      iterator\n+      erase(iterator __position)\n+      {\n+\t__glibcxx_check_erase(__position);\n+\t__position._M_invalidate();\n+\treturn iterator(_Base::erase(__position.base()), this);\n+      }\n+#else\n       void\n       erase(iterator __position)\n       {\n \t__glibcxx_check_erase(__position);\n \t__position._M_invalidate();\n \t_Base::erase(__position.base());\n       }\n+#endif\n \n       size_type\n       erase(const key_type& __x)\n@@ -238,15 +248,28 @@ namespace __debug\n \treturn __count;\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      iterator\n+      erase(iterator __first, iterator __last)\n+      {\n+\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t// 151. can't currently clear() empty container\n+\t__glibcxx_check_erase_range(__first, __last);\n+\twhile (__first != __last)\n+\t  this->erase(__first++);\n+\treturn __last;\n+      }\n+#else\n       void\n       erase(iterator __first, iterator __last)\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 151. can't currently clear() empty container\n \t__glibcxx_check_erase_range(__first, __last);\n \twhile (__first != __last)\n-\tthis->erase(__first++);\n+\t  this->erase(__first++);\n       }\n+#endif\n \n       void\n       swap(multimap& __x)"}, {"sha": "91909826d7a798a166d175aa6cdbd5b665e939e8", "filename": "libstdc++-v3/include/debug/multiset.h", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h?ref=5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f", "patch": "@@ -1,6 +1,6 @@\n // Debugging multiset implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2009\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -212,13 +212,23 @@ namespace __debug\n       { _Base::insert(__l); }\n #endif\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      iterator\n+      erase(iterator __position)\n+      {\n+\t__glibcxx_check_erase(__position);\n+\t__position._M_invalidate();\n+\treturn iterator(_Base::erase(__position.base()), this);\n+      }\n+#else\n       void\n       erase(iterator __position)\n       {\n \t__glibcxx_check_erase(__position);\n \t__position._M_invalidate();\n \t_Base::erase(__position.base());\n       }\n+#endif\n \n       size_type\n       erase(const key_type& __x)\n@@ -235,15 +245,28 @@ namespace __debug\n \treturn __count;\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      iterator\n+      erase(iterator __first, iterator __last)\n+      {\n+\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t// 151. can't currently clear() empty container\n+\t__glibcxx_check_erase_range(__first, __last);\n+\twhile (__first != __last)\n+\t  this->erase(__first++);\n+\treturn __last;\n+      }\n+#else\n       void\n       erase(iterator __first, iterator __last)\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 151. can't currently clear() empty container\n \t__glibcxx_check_erase_range(__first, __last);\n \twhile (__first != __last)\n-\tthis->erase(__first++);\n+\t  this->erase(__first++);\n       }\n+#endif\n \n       void\n       swap(multiset& __x)"}, {"sha": "769639d721bffcc8c3254ff608cc363a5f3dd8c6", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f", "patch": "@@ -1,6 +1,6 @@\n // Debugging set implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2009\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -217,13 +217,23 @@ namespace __debug\n       { _Base::insert(__l); }\n #endif\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      iterator\n+      erase(iterator __position)\n+      {\n+\t__glibcxx_check_erase(__position);\n+\t__position._M_invalidate();\n+\treturn iterator(_Base::erase(__position.base()), this);\n+      }\n+#else\n       void\n       erase(iterator __position)\n       {\n \t__glibcxx_check_erase(__position);\n \t__position._M_invalidate();\n \t_Base::erase(__position.base());\n       }\n+#endif\n \n       size_type\n       erase(const key_type& __x)\n@@ -239,16 +249,28 @@ namespace __debug\n         }\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      iterator\n+      erase(iterator __first, iterator __last)\n+      {\n+\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t// 151. can't currently clear() empty container\n+\t__glibcxx_check_erase_range(__first, __last);\n+\twhile (__first != __last)\n+\t  this->erase(__first++);\n+\treturn __last;\n+      }\n+#else\n       void\n       erase(iterator __first, iterator __last)\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 151. can't currently clear() empty container\n \t__glibcxx_check_erase_range(__first, __last);\n-\n \twhile (__first != __last)\n-        this->erase(__first++);\n+\t  this->erase(__first++);\n       }\n+#endif\n \n       void\n       swap(set& __x)"}, {"sha": "ebe8dc8416f74c705188276a476f6589e0d8a2aa", "filename": "libstdc++-v3/include/ext/pb_ds/detail/debug_map_base.hpp", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fdebug_map_base.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fdebug_map_base.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fdebug_map_base.hpp?ref=5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f", "patch": "@@ -1,6 +1,7 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -153,9 +154,10 @@ namespace __gnu_pbds\n     insert_new(const_key_reference r_key)\n     {\n       _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-      __gnu_cxx::throw_allocator<char> alloc;\n-      const double orig_throw_prob = alloc.get_probability();\n-      alloc.set_probability(0);\n+      // XXX FIXME: Adapt for __gnu_cxx::throw_allocator_random.\n+      //__gnu_cxx::throw_allocator<char> alloc;\n+      // const double orig_throw_prob = alloc.get_probability();\n+      // alloc.set_probability(0);\n       if (find(r_key) != m_key_set.end())\n \t{\n \t  std::cerr << \"insert_new\" << r_key << std::endl;\n@@ -171,7 +173,7 @@ namespace __gnu_pbds\n \t  std::cerr << \"insert_new\" << r_key << std::endl;\n \t  std::abort();\n \t}\n-      alloc.set_probability(orig_throw_prob);\n+      // alloc.set_probability(orig_throw_prob);\n       _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n@@ -314,9 +316,10 @@ namespace __gnu_pbds\n     PB_DS_CLASS_C_DEC::\n     split(const_key_reference r_key, Cmp_Fn cmp_fn, PB_DS_CLASS_C_DEC& other)\n     {\n-      __gnu_cxx::throw_allocator<char> alloc;\n-      const double orig_throw_prob = alloc.get_probability();\n-      alloc.set_probability(0);\n+      // XXX FIXME: Adapt for __gnu_cxx::throw_allocator_random.\n+      // __gnu_cxx::throw_allocator<char> alloc;\n+      // const double orig_throw_prob = alloc.get_probability();\n+      // alloc.set_probability(0);\n       other.clear();\n       key_set_iterator it = m_key_set.begin();\n       while (it != m_key_set.end())\n@@ -327,25 +330,26 @@ namespace __gnu_pbds\n \t  }\n         else\n \t  ++it;\n-      alloc.set_probability(orig_throw_prob);\n+      // alloc.set_probability(orig_throw_prob);\n     }\n \n     PB_DS_CLASS_T_DEC\n     void\n     PB_DS_CLASS_C_DEC::\n     join(PB_DS_CLASS_C_DEC& other)\n     {\n-      __gnu_cxx::throw_allocator<char> alloc;\n-      const double orig_throw_prob = alloc.get_probability();\n-      alloc.set_probability(0);\n+      // XXX FIXME: Adapt for __gnu_cxx::throw_allocator_random.\n+      // __gnu_cxx::throw_allocator<char> alloc;\n+      // const double orig_throw_prob = alloc.get_probability();\n+      // alloc.set_probability(0);\n       key_set_iterator it = other.m_key_set.begin();\n       while (it != other.m_key_set.end())\n \t{\n \t  insert_new(*it);\n \t  it = other.m_key_set.erase(it);\n \t}\n       _GLIBCXX_DEBUG_ASSERT(other.m_key_set.empty());\n-      alloc.set_probability(orig_throw_prob);\n+      // alloc.set_probability(orig_throw_prob);\n     }\n \n #undef PB_DS_CLASS_T_DEC"}, {"sha": "baa877db5fe17515fb97a4a9e2c273a93bac6d9d", "filename": "libstdc++-v3/include/profile/map.h", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h?ref=5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f", "patch": "@@ -1,6 +1,6 @@\n // Profiling map implementation -*- C++ -*-\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -307,6 +307,17 @@ namespace __profile\n \t}\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      iterator\n+      erase(iterator __first, iterator __last)\n+      {\n+\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t// 151. can't currently clear() empty container\n+\twhile (__first != __last)\n+\t  this->erase(__first++);\n+\treturn __last;\n+      }\n+#else\n       void\n       erase(iterator __first, iterator __last)\n       {\n@@ -315,6 +326,7 @@ namespace __profile\n \twhile (__first != __last)\n \t  this->erase(__first++);\n       }\n+#endif\n \n       void\n "}, {"sha": "df4e02d93d37b4cf470afb8441470afbb93a8c0c", "filename": "libstdc++-v3/include/profile/multimap.h", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h?ref=5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f", "patch": "@@ -206,15 +206,11 @@ namespace __profile\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       iterator\n       erase(iterator __position)\n-      {\n-        return _Base::erase(__position);\n-      }\n+      { return _Base::erase(__position); }\n #else\n       void\n       erase(iterator __position)\n-      {\n-\t_Base::erase(__position);\n-      }\n+      { _Base::erase(__position); }\n #endif\n \n       size_type\n@@ -231,14 +227,26 @@ namespace __profile\n \treturn __count;\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      iterator\n+      erase(iterator __first, iterator __last)\n+      {\n+\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t// 151. can't currently clear() empty container\n+\twhile (__first != __last)\n+\t  this->erase(__first++);\n+\treturn __last;\n+      }\n+#else\n       void\n       erase(iterator __first, iterator __last)\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 151. can't currently clear() empty container\n \twhile (__first != __last)\n-\tthis->erase(__first++);\n+\t  this->erase(__first++);\n       }\n+#endif\n \n       void\n       swap(multimap& __x)"}, {"sha": "b44abc40aef814b7980b7e06b65564242e7073b4", "filename": "libstdc++-v3/include/profile/multiset.h", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h?ref=5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f", "patch": "@@ -1,6 +1,6 @@\n // Profiling multiset implementation -*- C++ -*-\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -204,15 +204,11 @@ namespace __profile\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       iterator\n       erase(iterator __position)\n-      {\n-        return _Base::erase(__position);\n-      }\n+      { return _Base::erase(__position); }\n #else\n       void\n       erase(iterator __position)\n-      {\n-\t_Base::erase(__position);\n-      }\n+      { _Base::erase(__position); }\n #endif\n \n       size_type\n@@ -229,14 +225,26 @@ namespace __profile\n \treturn __count;\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      iterator\n+      erase(iterator __first, iterator __last)\n+      {\n+\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t// 151. can't currently clear() empty container\n+\twhile (__first != __last)\n+\t  this->erase(__first++);\n+\treturn __last;\n+      }\n+#else\n       void\n       erase(iterator __first, iterator __last)\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 151. can't currently clear() empty container\n \twhile (__first != __last)\n-\tthis->erase(__first++);\n+\t  this->erase(__first++);\n       }\n+#endif\n \n       void\n       swap(multiset& __x)"}, {"sha": "6c6773c134e78cf52e7701d4b34a3977db5e8d5c", "filename": "libstdc++-v3/include/profile/set.h", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h?ref=5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f", "patch": "@@ -1,6 +1,6 @@\n // Profiling set implementation -*- C++ -*-\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -209,15 +209,11 @@ namespace __profile\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       iterator\n       erase(iterator __position)\n-      {\n-        return _Base::erase(__position);\n-      }\n+      { return _Base::erase(__position); }\n #else\n       void\n       erase(iterator __position)\n-      {\n-\t_Base::erase(__position);\n-      }\n+      { _Base::erase(__position); }\n #endif\n \n       size_type\n@@ -233,14 +229,26 @@ namespace __profile\n         }\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      iterator\n+      erase(iterator __first, iterator __last)\n+      {\n+\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t// 151. can't currently clear() empty container\n+\twhile (__first != __last)\n+\t  this->erase(__first++);\n+\treturn __last;\n+      }\n+#else\n       void\n       erase(iterator __first, iterator __last)\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 151. can't currently clear() empty container\n \twhile (__first != __last)\n-        this->erase(__first++);\n+\t  this->erase(__first++);\n       }\n+#endif\n \n       void\n       swap(set& __x)"}, {"sha": "5a746f13dbc80320de68e7d579f7f3740bd5ed6e", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/40160.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2F40160.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2F40160.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2F40160.cc?ref=5ab06c6dfee6999f0ebd2d77f53766de18e5dc5f", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-fno-rtti -D_GLIBCXX_DEBUG\" }\n+// { dg-options \"-fno-rtti\" }\n // { dg-do compile }\n \n // libstdc++/40160"}]}