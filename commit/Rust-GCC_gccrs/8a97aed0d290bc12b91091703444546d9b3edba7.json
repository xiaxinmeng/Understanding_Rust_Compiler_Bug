{"sha": "8a97aed0d290bc12b91091703444546d9b3edba7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE5N2FlZDBkMjkwYmMxMmI5MTA5MTcwMzQ0NDU0NmQ5YjNlZGJhNw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-17T14:07:30Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-17T14:12:01Z"}, "message": "langhooks: preprocessor hooks for c++ modules\n\nThis is a slightly modified version of 01-langhooks.def.  I realized I\ndidn't need the deferred macro langhook -- that can be directly\ninstalled into the preprocessor callbacks via preprocess_options lang\nhook.\n\n\tgcc/\n\t* langhooks-def.h (LANG_HOOKS_PREPROCESS_MAIN_FILE)\n\t(LANG_HOOKS_PREPROCESS_OPTIONS, LANG_HOOKS_PREPROCESS_UNDEF)\n\t(LANG_HOOKS_PREPROCESS_TOKEN): New.\n\t(LANG_HOOKS_INITIALIZER): Add them.\n\t* langhooks.h (struct lang_hooks): Add preprocess_main_file,\n\tpreprocess_options, preprocess_undef, preprocess_token hooks.  Add\n\tenum PT_flags.\n\tgcc/c-family/\n\t* c-lex.c: #include \"langhooks.h\".\n\t(cb_undef): Maybe call preprocess_undef lang hook.\n\t* c-opts.c (c_common_post_options): Maybe call preprocess_options\n\tlang hook.\n\t(push_command_line_include): Maybe call preprocess_main_file lang\n\thook.\n\t(cb_file_change): Likewise.\n\t* c-ppoutput.c: #include \"langhooks.h.\n\t(scan_translation_unit): Maybe call preprocess_token lang hook.\n\t(class do_streamer): New, derive from token_streamer.\n\t(directives_only_cb): Data pointer is do_streamer, call\n\tpreprocess_token lang hook.\n\t(scan_translation_unit_directives_only): Use do_streamer.\n\t(print_line_1): Move src_line recording to after string output.\n\t(cb_undef): Maybe call preprocess_undef lang hook.", "tree": {"sha": "eaa8646dd871f738feb30a5df76996329da161a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eaa8646dd871f738feb30a5df76996329da161a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a97aed0d290bc12b91091703444546d9b3edba7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a97aed0d290bc12b91091703444546d9b3edba7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a97aed0d290bc12b91091703444546d9b3edba7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a97aed0d290bc12b91091703444546d9b3edba7/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3b55ce50ec294f30106947bd819f12a98069c57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3b55ce50ec294f30106947bd819f12a98069c57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3b55ce50ec294f30106947bd819f12a98069c57"}], "stats": {"total": 107, "additions": 94, "deletions": 13}, "files": [{"sha": "8dd1420d10dc940721d328904657569c2b2a1e43", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a97aed0d290bc12b91091703444546d9b3edba7/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a97aed0d290bc12b91091703444546d9b3edba7/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=8a97aed0d290bc12b91091703444546d9b3edba7", "patch": "@@ -28,7 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-pragma.h\"\n #include \"debug.h\"\n #include \"file-prefix-map.h\" /* remap_macro_filename()  */\n-\n+#include \"langhooks.h\"\n #include \"attribs.h\"\n \n /* We may keep statistics about how long which files took to compile.  */\n@@ -274,9 +274,11 @@ cb_define (cpp_reader *pfile, location_t loc, cpp_hashnode *node)\n \n /* #undef callback for DWARF and DWARF2 debug info.  */\n static void\n-cb_undef (cpp_reader * ARG_UNUSED (pfile), location_t loc,\n-\t  cpp_hashnode *node)\n+cb_undef (cpp_reader *pfile, location_t loc, cpp_hashnode *node)\n {\n+  if (lang_hooks.preprocess_undef)\n+    lang_hooks.preprocess_undef (pfile, loc, node);\n+\n   const struct line_map *map = linemap_lookup (line_table, loc);\n   (*debug_hooks->undef) (SOURCE_LINE (linemap_check_ordinary (map), loc),\n \t\t\t (const char *) NODE_NAME (node));"}, {"sha": "77844d7daf19eaecb3dc1d690dcd3be4fd806d99", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a97aed0d290bc12b91091703444546d9b3edba7/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a97aed0d290bc12b91091703444546d9b3edba7/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=8a97aed0d290bc12b91091703444546d9b3edba7", "patch": "@@ -1106,6 +1106,8 @@ c_common_post_options (const char **pfilename)\n   struct cpp_callbacks *cb = cpp_get_callbacks (parse_in);\n   cb->file_change = cb_file_change;\n   cb->dir_change = cb_dir_change;\n+  if (lang_hooks.preprocess_options)\n+    lang_hooks.preprocess_options (parse_in);\n   cpp_post_options (parse_in);\n   init_global_opts_from_cpp (&global_options, cpp_get_options (parse_in));\n \n@@ -1548,7 +1550,13 @@ push_command_line_include (void)\n       cpp_opts->warn_unused_macros = cpp_warn_unused_macros;\n       /* Restore the line map back to the main file.  */\n       if (!cpp_opts->preprocessed)\n-\tcpp_change_file (parse_in, LC_RENAME, this_input_filename);\n+\t{\n+\t  cpp_change_file (parse_in, LC_RENAME, this_input_filename);\n+\t  if (lang_hooks.preprocess_main_file)\n+\t    /* We're starting the main file.  Inform the FE of that.  */\n+\t    lang_hooks.preprocess_main_file\n+\t      (parse_in, line_table, LINEMAPS_LAST_ORDINARY_MAP (line_table));\n+\t}\n \n       /* Set this here so the client can change the option if it wishes,\n \t and after stacking the main file so we don't trace the main file.  */\n@@ -1558,14 +1566,19 @@ push_command_line_include (void)\n \n /* File change callback.  Has to handle -include files.  */\n static void\n-cb_file_change (cpp_reader * ARG_UNUSED (pfile),\n-\t\tconst line_map_ordinary *new_map)\n+cb_file_change (cpp_reader *reader, const line_map_ordinary *new_map)\n {\n   if (flag_preprocess_only)\n     pp_file_change (new_map);\n   else\n     fe_file_change (new_map);\n \n+  if (new_map && cpp_opts->preprocessed\n+      && lang_hooks.preprocess_main_file && MAIN_FILE_P (new_map)\n+      && ORDINARY_MAP_STARTING_LINE_NUMBER (new_map))\n+    /* We're starting the main file.  Inform the FE of that.  */\n+    lang_hooks.preprocess_main_file (reader, line_table, new_map);\n+\n   if (new_map \n       && (new_map->reason == LC_ENTER || new_map->reason == LC_RENAME))\n     {"}, {"sha": "e3e0e59fcc74abe3989bcf973756fdd84aabf243", "filename": "gcc/c-family/c-ppoutput.c", "status": "modified", "additions": 47, "deletions": 7, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a97aed0d290bc12b91091703444546d9b3edba7/gcc%2Fc-family%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a97aed0d290bc12b91091703444546d9b3edba7/gcc%2Fc-family%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ppoutput.c?ref=8a97aed0d290bc12b91091703444546d9b3edba7", "patch": "@@ -21,6 +21,7 @@\n #include \"coretypes.h\"\n #include \"c-common.h\"\t\t/* For flags.  */\n #include \"../libcpp/internal.h\"\n+#include \"langhooks.h\"\n #include \"c-pragma.h\"\t\t/* For parse_in.  */\n #include \"file-prefix-map.h\"    /* remap_macro_filename()  */\n \n@@ -301,10 +302,15 @@ token_streamer::stream (cpp_reader *pfile, const cpp_token *token,\n \n /* Writes out the preprocessed file, handling spacing and paste\n    avoidance issues.  */\n+\n static void\n scan_translation_unit (cpp_reader *pfile)\n {\n   token_streamer streamer (pfile);\n+  uintptr_t filter = 0;\n+\n+  if (lang_hooks.preprocess_token)\n+    filter = lang_hooks.preprocess_token (pfile, NULL, filter);\n \n   print.source = NULL;\n   for (;;)\n@@ -314,18 +320,38 @@ scan_translation_unit (cpp_reader *pfile)\n \t= cpp_get_token_with_location (pfile, &spelling_loc);\n \n       streamer.stream (pfile, token, spelling_loc);\n+      if (filter)\n+\t{\n+\t  unsigned flags = lang_hooks.preprocess_token (pfile, token, filter);\n+\t  if (flags & lang_hooks::PT_begin_pragma)\n+\t    streamer.begin_pragma ();\n+\t}\n       if (token->type == CPP_EOF)\n \tbreak;\n     }\n+\n+  if (filter)\n+    lang_hooks.preprocess_token (pfile, NULL, filter);\n }\n \n+class do_streamer : public token_streamer\n+{\n+ public:\n+  uintptr_t filter;\n+\n+  do_streamer (cpp_reader *pfile, uintptr_t filter)\n+    :token_streamer (pfile), filter (filter)\n+    {\n+    }\n+};\n+\n static void\n directives_only_cb (cpp_reader *pfile, CPP_DO_task task, void *data_, ...)\n {\n   va_list args;\n   va_start (args, data_);\n \n-  token_streamer *streamer = reinterpret_cast <token_streamer *> (data_);\n+  do_streamer *streamer = reinterpret_cast <do_streamer *> (data_);\n   switch (task)\n     {\n     default:\n@@ -350,6 +376,13 @@ directives_only_cb (cpp_reader *pfile, CPP_DO_task task, void *data_, ...)\n \tconst cpp_token *token = va_arg (args, const cpp_token *);\n \tlocation_t spelling_loc = va_arg (args, location_t);\n \tstreamer->stream (pfile, token, spelling_loc);\n+\tif (streamer->filter)\n+\t  {\n+\t    unsigned flags = lang_hooks.preprocess_token\n+\t      (pfile, token, streamer->filter);\n+\t    if (flags & lang_hooks::PT_begin_pragma)\n+\t      streamer->begin_pragma ();\n+\t  }\n       }\n       break;\n     }\n@@ -362,8 +395,13 @@ directives_only_cb (cpp_reader *pfile, CPP_DO_task task, void *data_, ...)\n static void\n scan_translation_unit_directives_only (cpp_reader *pfile)\n {\n-  token_streamer streamer (pfile);\n+  uintptr_t filter = 0;\n+  if (lang_hooks.preprocess_token)\n+    filter = lang_hooks.preprocess_token (pfile, NULL, filter);\n+  do_streamer streamer (pfile, filter);\n   cpp_directive_only_process (pfile, &streamer, directives_only_cb);\n+  if (streamer.filter)\n+    lang_hooks.preprocess_token (pfile, NULL, streamer.filter);\n }\n \n /* Adjust print.src_line for newlines embedded in output.  */\n@@ -462,15 +500,16 @@ print_line_1 (location_t src_loc, const char *special_flags, FILE *stream)\n       unsigned char *to_file_quoted =\n          (unsigned char *) alloca (to_file_len * 4 + 1);\n \n-      print.src_line = LOCATION_LINE (src_loc);\n-      print.src_file = file_path;\n-\n       /* cpp_quote_string does not nul-terminate, so we have to do it\n \t ourselves.  */\n       unsigned char *p = cpp_quote_string (to_file_quoted,\n \t\t\t\t\t   (const unsigned char *) file_path,\n \t\t\t\t\t   to_file_len);\n       *p = '\\0';\n+\n+      print.src_line = LOCATION_LINE (src_loc);\n+      print.src_file = file_path;\n+\n       fprintf (stream, \"# %u \\\"%s\\\"%s\",\n \t       print.src_line, to_file_quoted, special_flags);\n \n@@ -576,9 +615,10 @@ cb_define (cpp_reader *pfile, location_t line, cpp_hashnode *node)\n }\n \n static void\n-cb_undef (cpp_reader *pfile ATTRIBUTE_UNUSED, location_t line,\n-\t  cpp_hashnode *node)\n+cb_undef (cpp_reader *pfile, location_t line, cpp_hashnode *node)\n {\n+  if (lang_hooks.preprocess_undef)\n+    lang_hooks.preprocess_undef (pfile, line, node);\n   maybe_print_line (line);\n   fprintf (print.outf, \"#undef %s\\n\", NODE_NAME (node));\n   print.src_line++;"}, {"sha": "2f66f5eb16196f630bd0740288786b90e3352c4b", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a97aed0d290bc12b91091703444546d9b3edba7/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a97aed0d290bc12b91091703444546d9b3edba7/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=8a97aed0d290bc12b91091703444546d9b3edba7", "patch": "@@ -103,6 +103,10 @@ extern void lhd_finalize_early_debug (void);\n #define LANG_HOOKS_INIT_OPTIONS_STRUCT\thook_void_gcc_optionsp\n #define LANG_HOOKS_INIT_OPTIONS\t\tlhd_init_options\n #define LANG_HOOKS_INITIALIZE_DIAGNOSTICS lhd_initialize_diagnostics\n+#define LANG_HOOKS_PREPROCESS_MAIN_FILE NULL\n+#define LANG_HOOKS_PREPROCESS_OPTIONS NULL\n+#define LANG_HOOKS_PREPROCESS_UNDEF NULL\n+#define LANG_HOOKS_PREPROCESS_TOKEN NULL\n #define LANG_HOOKS_REGISTER_DUMPS\tlhd_register_dumps\n #define LANG_HOOKS_COMPLAIN_WRONG_LANG_P lhd_complain_wrong_lang_p\n #define LANG_HOOKS_HANDLE_OPTION\tlhd_handle_option\n@@ -317,6 +321,10 @@ extern void lhd_end_section (void);\n   LANG_HOOKS_INIT_OPTIONS_STRUCT, \\\n   LANG_HOOKS_INIT_OPTIONS, \\\n   LANG_HOOKS_INITIALIZE_DIAGNOSTICS, \\\n+  LANG_HOOKS_PREPROCESS_MAIN_FILE, \\\n+  LANG_HOOKS_PREPROCESS_OPTIONS, \\\n+  LANG_HOOKS_PREPROCESS_UNDEF, \\\n+  LANG_HOOKS_PREPROCESS_TOKEN, \\\n   LANG_HOOKS_REGISTER_DUMPS, \\\n   LANG_HOOKS_COMPLAIN_WRONG_LANG_P, \\\n   LANG_HOOKS_HANDLE_OPTION, \\"}, {"sha": "f12589ee29d1a63f8a06aff26b9046c3ac4fc1d5", "filename": "gcc/langhooks.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a97aed0d290bc12b91091703444546d9b3edba7/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a97aed0d290bc12b91091703444546d9b3edba7/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=8a97aed0d290bc12b91091703444546d9b3edba7", "patch": "@@ -356,6 +356,24 @@ struct lang_hooks\n      global diagnostic context structure.  */\n   void (*initialize_diagnostics) (diagnostic_context *);\n \n+  /* Beginning the main source file.  */\n+  void (*preprocess_main_file) (cpp_reader *, line_maps *,\n+\t\t\t\tconst line_map_ordinary *);\n+\n+  /* Adjust libcpp options and callbacks.  */\n+  void (*preprocess_options) (cpp_reader *);\n+\n+  /* Undefining a macro.  */\n+  void (*preprocess_undef) (cpp_reader *, location_t, cpp_hashnode *);\n+\n+  /* Observer for preprocessing stream.  */\n+  uintptr_t (*preprocess_token) (cpp_reader *, const cpp_token *, uintptr_t);\n+  /* Various flags it can return about the token.  */\n+  enum PT_flags\n+    {\n+     PT_begin_pragma = 1 << 0\n+    };\n+\n   /* Register language-specific dumps.  */\n   void (*register_dumps) (gcc::dump_manager *);\n "}]}