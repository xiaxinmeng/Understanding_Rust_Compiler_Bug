{"sha": "14f0ea22413fe3e64306c57fbfd2ae7b5769c1a1", "node_id": "C_kwDOANBUbNoAKDE0ZjBlYTIyNDEzZmUzZTY0MzA2YzU3ZmJmZDJhZTdiNTc2OWMxYTE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-04-12T13:16:31Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-04-12T13:16:31Z"}, "message": "testsuite: Add testcase for recently fixed PR [PR109462]\n\nThis adds a runtime testcase for just fixed PR.\n\n2023-04-12  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/109462\n\t* g++.dg/opt/pr109462.C: New test.", "tree": {"sha": "83c7b0f38d5740f3a771d26925f2497e17845e71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83c7b0f38d5740f3a771d26925f2497e17845e71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14f0ea22413fe3e64306c57fbfd2ae7b5769c1a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14f0ea22413fe3e64306c57fbfd2ae7b5769c1a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14f0ea22413fe3e64306c57fbfd2ae7b5769c1a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14f0ea22413fe3e64306c57fbfd2ae7b5769c1a1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24af552876eff707f75d30d3f0f0e7a5d62dd857", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24af552876eff707f75d30d3f0f0e7a5d62dd857", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24af552876eff707f75d30d3f0f0e7a5d62dd857"}], "stats": {"total": 94, "additions": 94, "deletions": 0}, "files": [{"sha": "07ac7c5d4fb2d1834c7e06359c2ad8084874c2b9", "filename": "gcc/testsuite/g++.dg/opt/pr109462.C", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f0ea22413fe3e64306c57fbfd2ae7b5769c1a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr109462.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f0ea22413fe3e64306c57fbfd2ae7b5769c1a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr109462.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr109462.C?ref=14f0ea22413fe3e64306c57fbfd2ae7b5769c1a1", "patch": "@@ -0,0 +1,94 @@\n+// PR tree-optimization/109462\n+// { dg-do run { target c++11 } }\n+// { dg-options \"-O2\" }\n+\n+struct A {\n+  A (const char *);\n+  A (const char *, int);\n+  bool empty ();\n+  int size ();\n+  bool equals (A);\n+  A trim (char);\n+  A trim ();\n+};\n+[[gnu::noipa]] A::A (const char *) {}\n+[[gnu::noipa]] A::A (const char *, int) { __builtin_abort (); }\n+[[gnu::noipa]] bool A::empty () { __builtin_abort (); }\n+[[gnu::noipa]] int A::size () { __builtin_abort (); }\n+[[gnu::noipa]] bool A::equals (A) { return true; }\n+[[gnu::noipa]] A A::trim (char) { __builtin_abort (); }\n+[[gnu::noipa]] A A::trim () { __builtin_abort (); }\n+\n+enum B { raw_identifier = 6, l_paren = 21, r_paren = 22 };\n+[[gnu::noipa]] bool isAnyIdentifier (B) { return true; }\n+[[gnu::noipa]] bool isStringLiteral (B) { __builtin_abort (); }\n+\n+struct C {\n+  B c;\n+  B getKind () { return c; }\n+  bool is (B x) { return c == x; }\n+  unsigned getLength () { __builtin_abort (); }\n+  A getRawIdentifier () {\n+    A x (\"\");\n+    c == raw_identifier ? void () : __builtin_abort ();\n+    return x;\n+  }\n+  const char *getLiteralData ();\n+};\n+[[gnu::noipa]] const char *C::getLiteralData () { __builtin_abort (); }\n+\n+struct D {\n+  D ();\n+  bool LexFromRawLexer (C &);\n+};\n+[[gnu::noipa]] D::D () {}\n+[[gnu::noipa]] bool D::LexFromRawLexer (C &t) {\n+  static int cnt;\n+  C tok[] = { { raw_identifier }, { l_paren }, { raw_identifier }, { r_paren } };\n+  t = tok[cnt++];\n+  return false;\n+}\n+\n+bool ok = false;\n+[[gnu::noipa]] void reportEmptyContextError ()\n+{\n+  ok = true;\n+}\n+\n+[[gnu::noipa]] void\n+VisitObjCMessageExpr ()\n+{\n+  D TheLexer;\n+  C I;\n+  C Result;\n+  int p_count = 0;\n+  while (!TheLexer.LexFromRawLexer (I)) {\n+    if (I.getKind () == l_paren)\n+      ++p_count;\n+    if (I.getKind () == r_paren) {\n+      if (p_count == 1)\n+        break;\n+      --p_count;\n+    }\n+    Result = I;\n+  }\n+  if (isAnyIdentifier (Result.getKind ())) {\n+    if (Result.getRawIdentifier ().equals (\"nil\")) {\n+      reportEmptyContextError ();\n+      return;\n+    }\n+  }\n+  if (!isStringLiteral (Result.getKind ()))\n+    return;\n+  A Comment = A (Result.getLiteralData (), Result.getLength ()).trim ('\"');\n+  if ((Comment.trim ().size () == 0 && Comment.size () > 0) || Comment.empty ())\n+    reportEmptyContextError ();\n+}\n+\n+int\n+main ()\n+{\n+  VisitObjCMessageExpr ();\n+  if (!ok)\n+    __builtin_abort ();\n+}"}]}