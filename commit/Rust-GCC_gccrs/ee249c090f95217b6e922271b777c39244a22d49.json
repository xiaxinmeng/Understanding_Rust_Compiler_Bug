{"sha": "ee249c090f95217b6e922271b777c39244a22d49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUyNDljMDkwZjk1MjE3YjZlOTIyMjcxYjc3N2MzOTI0NGEyMmQ0OQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-24T01:10:41Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-24T01:10:41Z"}, "message": "(reload): Fix error in last change; compute MODE before it's used.\n\nFrom-SVN: r6862", "tree": {"sha": "f5a2804f7db7727fc0224123a4ffdac43e1193c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5a2804f7db7727fc0224123a4ffdac43e1193c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee249c090f95217b6e922271b777c39244a22d49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee249c090f95217b6e922271b777c39244a22d49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee249c090f95217b6e922271b777c39244a22d49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee249c090f95217b6e922271b777c39244a22d49/comments", "author": null, "committer": null, "parents": [{"sha": "ec7a1dd2f8bf033e0224298cab212e5ce5037d45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec7a1dd2f8bf033e0224298cab212e5ce5037d45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec7a1dd2f8bf033e0224298cab212e5ce5037d45"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "4bbd43a02aa46f2b6088927ffaa4ba2dc6275a87", "filename": "gcc/reload1.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee249c090f95217b6e922271b777c39244a22d49/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee249c090f95217b6e922271b777c39244a22d49/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=ee249c090f95217b6e922271b777c39244a22d49", "patch": "@@ -1142,11 +1142,17 @@ reload (first, global, dumpfile)\n \t\t      new_basic_block_needs = 1;\n \t\t    }\n \n+\n+\t\t  mode = reload_inmode[i];\n+\t\t  if (GET_MODE_SIZE (reload_outmode[i]) > GET_MODE_SIZE (mode))\n+\t\t    mode = reload_outmode[i];\n+\t\t  size = CLASS_MAX_NREGS (class, mode);\n+\n \t\t  /* If this class doesn't want a group determine if\n \t\t     we have a nongroup need or a regular need. */\n \n \t\t  nongroup_need = 0;\n-\t\t  if (CLASS_MAX_NREGS (class, mode) == 1)\n+\t\t  if (size == 1)\n \t\t    for (j = i + 1; j < n_reloads; j++)\n \t\t      if (reloads_conflict (i, j)\n \t\t\t  && reg_classes_intersect_p (class,\n@@ -1234,10 +1240,6 @@ reload (first, global, dumpfile)\n \t\t      break;\n \t\t    }\n \n-\t\t  mode = reload_inmode[i];\n-\t\t  if (GET_MODE_SIZE (reload_outmode[i]) > GET_MODE_SIZE (mode))\n-\t\t    mode = reload_outmode[i];\n-\t\t  size = CLASS_MAX_NREGS (class, mode);\n \t\t  if (size > 1)\n \t\t    {\n \t\t      enum machine_mode other_mode, allocate_mode;"}]}