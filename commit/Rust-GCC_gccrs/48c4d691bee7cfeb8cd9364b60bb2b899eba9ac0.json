{"sha": "48c4d691bee7cfeb8cd9364b60bb2b899eba9ac0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhjNGQ2OTFiZWU3Y2ZlYjhjZDkzNjRiNjBiYjJiODk5ZWJhOWFjMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2000-11-28T19:44:30Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2000-11-28T19:44:30Z"}, "message": "loop.c (load_mems): Avoid using next_label to find end_label.\n\n\t* loop.c (load_mems): Avoid using next_label to find end_label. If\n\tjumping outside of the loop (other than loop end), don't hoist MEMs\n\tout of loop.\n\n\t* gcc.c-torture/execute/loop-8.c: New test.\n\nFrom-SVN: r37823", "tree": {"sha": "5ccb6f13437b4af2333d36bb5cc7583052561df2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ccb6f13437b4af2333d36bb5cc7583052561df2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48c4d691bee7cfeb8cd9364b60bb2b899eba9ac0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48c4d691bee7cfeb8cd9364b60bb2b899eba9ac0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48c4d691bee7cfeb8cd9364b60bb2b899eba9ac0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48c4d691bee7cfeb8cd9364b60bb2b899eba9ac0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fb158467a90388f6abec96db67bcf2ec48688220", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb158467a90388f6abec96db67bcf2ec48688220", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb158467a90388f6abec96db67bcf2ec48688220"}], "stats": {"total": 84, "additions": 64, "deletions": 20}, "files": [{"sha": "662b84944a5cf82f0e7b2818b8fd7cac56f65052", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48c4d691bee7cfeb8cd9364b60bb2b899eba9ac0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48c4d691bee7cfeb8cd9364b60bb2b899eba9ac0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48c4d691bee7cfeb8cd9364b60bb2b899eba9ac0", "patch": "@@ -1,3 +1,9 @@\n+2000-11-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* loop.c (load_mems): Avoid using next_label to find end_label. If\n+\tjumping outside of the loop (other than loop end), don't hoist MEMs\n+\tout of loop.\n+\n 2000-11-28  Jan Hubicka  <jh@suse.cz>\n \n \t* calls.c (expand_call): Don't disable tail recursion based"}, {"sha": "75c94cd62c45ecc92bb9e2a82c5a89b53c8cb266", "filename": "gcc/loop.c", "status": "modified", "additions": 31, "deletions": 20, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48c4d691bee7cfeb8cd9364b60bb2b899eba9ac0/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48c4d691bee7cfeb8cd9364b60bb2b899eba9ac0/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=48c4d691bee7cfeb8cd9364b60bb2b899eba9ac0", "patch": "@@ -8716,29 +8716,22 @@ load_mems (loop)\n   int i;\n   rtx p;\n   rtx label = NULL_RTX;\n-  rtx end_label = NULL_RTX;\n+  rtx end_label;\n   /* Nonzero if the next instruction may never be executed.  */\n   int next_maybe_never = 0;\n   int last_max_reg = max_reg_num ();\n \n   if (loop_info->mems_idx == 0)\n     return;\n \n-  /* Find start of the extended basic block that enters the loop.  */\n-  for (p = loop->start;\n-       PREV_INSN (p) && GET_CODE (p) != CODE_LABEL;\n-       p = PREV_INSN (p))\n-    ;\n-\n-  cselib_init ();\n+  /* We cannot use next_label here because it skips over normal insns.  */\n+  end_label = next_nonnote_insn (loop->end);\n+  if (end_label && GET_CODE (end_label) != CODE_LABEL)\n+    end_label = NULL_RTX;\n \n-  /* Build table of mems that get set to constant values before the\n-     loop.  */\n-  for (; p != loop->start; p = NEXT_INSN (p))\n-    cselib_process_insn (p);\n-\n-  /* Check to see if it's possible that some instructions in the\n-     loop are never executed.  */\n+  /* Check to see if it's possible that some instructions in the loop are\n+     never executed.  Also check if there is a goto out of the loop other\n+     than right after the end of the loop.  */\n   for (p = next_insn_in_loop (loop, loop->scan_start);\n        p != NULL_RTX && ! maybe_never;\n        p = next_insn_in_loop (loop, p))\n@@ -8757,6 +8750,15 @@ load_mems (loop)\n \t\t     && NEXT_INSN (NEXT_INSN (p)) == loop->end\n \t\t     && any_uncondjump_p (p)))\n \t{\n+\t  /* If this is a jump outside of the loop but not right\n+\t     after the end of the loop, we would have to emit new fixup\n+\t     sequences for each such label.  */\n+\t  if (JUMP_LABEL (p) != end_label\n+\t      && (INSN_UID (JUMP_LABEL (p)) >= max_uid_for_loop\n+\t\t  || INSN_LUID (JUMP_LABEL (p)) < INSN_LUID (loop->start)\n+\t\t  || INSN_LUID (JUMP_LABEL (p)) > INSN_LUID (loop->end)))\n+\t    return;\n+\n \t  if (!any_condjump_p (p))\n \t    /* Something complicated.  */\n \t    maybe_never = 1;\n@@ -8769,6 +8771,19 @@ load_mems (loop)\n \tmaybe_never = 1;\n     }\n \n+  /* Find start of the extended basic block that enters the loop.  */\n+  for (p = loop->start;\n+       PREV_INSN (p) && GET_CODE (p) != CODE_LABEL;\n+       p = PREV_INSN (p))\n+    ;\n+\n+  cselib_init ();\n+\n+  /* Build table of mems that get set to constant values before the\n+     loop.  */\n+  for (; p != loop->start; p = NEXT_INSN (p))\n+    cselib_process_insn (p);\n+\n   /* Actually move the MEMs.  */\n   for (i = 0; i < loop_info->mems_idx; ++i)\n     {\n@@ -8960,10 +8975,6 @@ load_mems (loop)\n \t    {\n \t      if (label == NULL_RTX)\n \t\t{\n-\t\t  /* We must compute the former\n-\t\t     right-after-the-end label before we insert\n-\t\t     the new one.  */\n-\t\t  end_label = next_label (loop->end);\n \t\t  label = gen_label_rtx ();\n \t\t  emit_label_after (label, loop->end);\n \t\t}\n@@ -9001,7 +9012,7 @@ load_mems (loop)\n \t}\n     }\n \n-  if (label != NULL_RTX)\n+  if (label != NULL_RTX && end_label != NULL_RTX)\n     {\n       /* Now, we need to replace all references to the previous exit\n \t label with the new one.  */"}, {"sha": "f8544732f717980a55d4a396f18718f5b2801776", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48c4d691bee7cfeb8cd9364b60bb2b899eba9ac0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48c4d691bee7cfeb8cd9364b60bb2b899eba9ac0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=48c4d691bee7cfeb8cd9364b60bb2b899eba9ac0", "patch": "@@ -1,3 +1,7 @@\n+2000-11-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.c-torture/execute/loop-8.c: New test.\n+\n 2000-11-28  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.old-deja/g++.other/base1.C: New test."}, {"sha": "e8d8cb5f045d8c1f25d11efcd3cb90de7cafbdb9", "filename": "gcc/testsuite/gcc.c-torture/execute/loop-8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48c4d691bee7cfeb8cd9364b60bb2b899eba9ac0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Floop-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48c4d691bee7cfeb8cd9364b60bb2b899eba9ac0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Floop-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Floop-8.c?ref=48c4d691bee7cfeb8cd9364b60bb2b899eba9ac0", "patch": "@@ -0,0 +1,23 @@\n+double a[3] = { 0.0, 1.0, 2.0 };\n+\n+void bar (int x, double *y)\n+{\n+  if (x || *y != 1.0)\n+    abort ();\n+}\n+\n+int main ()\n+{\n+  double c;\n+  int d;\n+  for (d = 0; d < 3; d++)\n+  {\n+    c = a[d];\n+    if (c > 0.0) goto e;\n+  }\n+  bar(1, &c);\n+  exit (1);\n+e:\n+  bar(0, &c);\n+  exit (0);\n+}"}]}