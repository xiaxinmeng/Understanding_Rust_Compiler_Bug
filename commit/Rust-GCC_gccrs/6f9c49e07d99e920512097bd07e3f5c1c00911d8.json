{"sha": "6f9c49e07d99e920512097bd07e3f5c1c00911d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY5YzQ5ZTA3ZDk5ZTkyMDUxMjA5N2JkMDdlM2Y1YzFjMDA5MTFkOA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-03-11T12:45:54Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-03-11T12:45:54Z"}, "message": "* loop.c (addr_overlap_p): Delete.\n\nFrom-SVN: r3702", "tree": {"sha": "a2f7333b88824142ceffa2ad43cf5e6afeadf26b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2f7333b88824142ceffa2ad43cf5e6afeadf26b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f9c49e07d99e920512097bd07e3f5c1c00911d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f9c49e07d99e920512097bd07e3f5c1c00911d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f9c49e07d99e920512097bd07e3f5c1c00911d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f9c49e07d99e920512097bd07e3f5c1c00911d8/comments", "author": null, "committer": null, "parents": [{"sha": "db2e669b70375fb05b48be106feca96d1aaab062", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db2e669b70375fb05b48be106feca96d1aaab062", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db2e669b70375fb05b48be106feca96d1aaab062"}], "stats": {"total": 23, "additions": 0, "deletions": 23}, "files": [{"sha": "5fb4aba0eacd8042ed0255f516344da67975a79b", "filename": "gcc/loop.c", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f9c49e07d99e920512097bd07e3f5c1c00911d8/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f9c49e07d99e920512097bd07e3f5c1c00911d8/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=6f9c49e07d99e920512097bd07e3f5c1c00911d8", "patch": "@@ -2705,29 +2705,6 @@ invariant_p (x)\n   return 1 + conditional;\n }\n \n-/* Return 1 if OTHER (a mem ref) overlaps the area of memory\n-   which is SIZE bytes starting at BASE.  */\n-\n-int\n-addr_overlap_p (other, base, size)\n-     rtx other;\n-     rtx base;\n-     HOST_WIDE_INT size;\n-{\n-  HOST_WIDE_INT start = 0, end;\n-\n-  if (GET_CODE (base) == CONST)\n-    base = XEXP (base, 0);\n-  if (GET_CODE (base) == PLUS\n-      && GET_CODE (XEXP (base, 1)) == CONST_INT)\n-    {\n-      start = INTVAL (XEXP (base, 1));\n-      base = XEXP (base, 0);\n-    }\n-\n-  end = start + size;\n-  return refers_to_mem_p (other, base, start, end);\n-}\n \f\n /* Return nonzero if all the insns in the loop that set REG\n    are INSN and the immediately following insns,"}]}