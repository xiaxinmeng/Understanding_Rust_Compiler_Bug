{"sha": "78520f3ff1f922bb86bdaa6188b3168e68fbb908", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg1MjBmM2ZmMWY5MjJiYjg2YmRhYTYxODhiMzE2OGU2OGZiYjkwOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-05-20T17:44:29Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-05-20T17:44:29Z"}, "message": "i386.c (ix86_rtx_costs): Use IS_STACK_MODE when calculating cost of standard 80387 constants.\n\n\t* gcc/config/i386/i386.c (ix86_rtx_costs) <case CONST_DOUBLE>:\n\tUse IS_STACK_MODE when calculating cost of standard 80387 constants.\n\tFallthru to CONST_VECTOR case to calculate cost of standard SSE\n\tconstants.\n\t<case CONST_WIDE_INT>: Calculate cost of (MEM (SYMBOL_REF)).\n\t(ix86_legitimate_constant_p): Use CASE_CONST_SCALAR_INT\n\tand CASE_CONST_ANY.\n\nFrom-SVN: r236524", "tree": {"sha": "8f8b0fa6d1c57ec6ed834885289dd16b47f8e6c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f8b0fa6d1c57ec6ed834885289dd16b47f8e6c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78520f3ff1f922bb86bdaa6188b3168e68fbb908", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78520f3ff1f922bb86bdaa6188b3168e68fbb908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78520f3ff1f922bb86bdaa6188b3168e68fbb908", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78520f3ff1f922bb86bdaa6188b3168e68fbb908/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7dea4ab37d04bef8ba6d59154e8d9c6f6dcdc183", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dea4ab37d04bef8ba6d59154e8d9c6f6dcdc183", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dea4ab37d04bef8ba6d59154e8d9c6f6dcdc183"}], "stats": {"total": 79, "additions": 43, "deletions": 36}, "files": [{"sha": "07dceaabe928cc14151cca61ef882b17f5af86de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78520f3ff1f922bb86bdaa6188b3168e68fbb908/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78520f3ff1f922bb86bdaa6188b3168e68fbb908/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78520f3ff1f922bb86bdaa6188b3168e68fbb908", "patch": "@@ -1,3 +1,13 @@\n+2016-05-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc/config/i386/i386.c (ix86_rtx_costs) <case CONST_DOUBLE>:\n+\tUse IS_STACK_MODE when calculating cost of standard 80387 constants.\n+\tFallthru to CONST_VECTOR case to calculate cost of standard SSE\n+\tconstants.\n+\t<case CONST_WIDE_INT>: Calculate cost of (MEM (SYMBOL_REF)).\n+\t(ix86_legitimate_constant_p): Use CASE_CONST_SCALAR_INT\n+\tand CASE_CONST_ANY.\n+\n 2016-05-20  Cesar Philippidis  <cesar@codesourcery.com>\n \n \t* config/nvptx/nvptx.md (sincossf3): New pattern."}, {"sha": "54483168fed979e8297e8ccfbe2a7e8e4743f6ab", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 33, "deletions": 36, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78520f3ff1f922bb86bdaa6188b3168e68fbb908/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78520f3ff1f922bb86bdaa6188b3168e68fbb908/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=78520f3ff1f922bb86bdaa6188b3168e68fbb908", "patch": "@@ -14867,8 +14867,7 @@ ix86_legitimate_constant_p (machine_mode mode, rtx x)\n #endif\n       break;\n \n-    case CONST_INT:\n-    case CONST_WIDE_INT:\n+    CASE_CONST_SCALAR_INT:\n       switch (mode)\n \t{\n \tcase TImode:\n@@ -14903,18 +14902,16 @@ ix86_legitimate_constant_p (machine_mode mode, rtx x)\n static bool\n ix86_cannot_force_const_mem (machine_mode mode, rtx x)\n {\n-  /* We can always put integral constants and vectors in memory.  */\n+  /* We can put any immediate constant in memory.  */\n   switch (GET_CODE (x))\n     {\n-    case CONST_INT:\n-    case CONST_WIDE_INT:\n-    case CONST_DOUBLE:\n-    case CONST_VECTOR:\n+    CASE_CONST_ANY:\n       return false;\n \n     default:\n       break;\n     }\n+\n   return !ix86_legitimate_constant_p (mode, x);\n }\n \n@@ -44076,43 +44073,43 @@ ix86_rtx_costs (rtx x, machine_mode mode, int outer_code_i, int opno,\n \t*total = 0;\n       return true;\n \n-    case CONST_WIDE_INT:\n-      *total = 0;\n-      return true;\n-\n     case CONST_DOUBLE:\n-      switch (standard_80387_constant_p (x))\n+      if (TARGET_80387 && IS_STACK_MODE (mode))\n+\tswitch (standard_80387_constant_p (x))\n+\t  {\n+\t  case -1:\n+\t  case 0:\n+\t    break;\n+\t  case 1: /* 0.0 */\n+\t    *total = 1;\n+\t    return true;\n+\t  default: /* Other constants */\n+\t    *total = 2;\n+\t    return true;\n+\t  }\n+      /* FALLTHRU */\n+\n+    case CONST_VECTOR:\n+      switch (standard_sse_constant_p (x, mode))\n \t{\n-\tcase 1: /* 0.0 */\n-\t  *total = 1;\n-\t  return true;\n-\tdefault: /* Other constants */\n-\t  *total = 2;\n-\t  return true;\n \tcase 0:\n-\tcase -1:\n \t  break;\n+\tcase 1:  /* 0: xor eliminates false dependency */\n+\t  *total = 0;\n+\t  return true;\n+\tdefault: /* -1: cmp contains false dependency */\n+\t  *total = 1;\n+\t  return true;\n \t}\n-      if (SSE_FLOAT_MODE_P (mode))\n-\t{\n-\tcase CONST_VECTOR:\n-\t  switch (standard_sse_constant_p (x, mode))\n-\t    {\n-\t    case 0:\n-\t      break;\n-\t    case 1:  /* 0: xor eliminates false dependency */\n-\t      *total = 0;\n-\t      return true;\n-\t    default: /* -1: cmp contains false dependency */\n-\t      *total = 1;\n-\t      return true;\n-\t    }\n-\t}\n+      /* FALLTHRU */\n+\n+    case CONST_WIDE_INT:\n       /* Fall back to (MEM (SYMBOL_REF)), since that's where\n \t it'll probably end up.  Add a penalty for size.  */\n       *total = (COSTS_N_INSNS (1)\n-\t\t+ (flag_pic != 0 && !TARGET_64BIT)\n-\t\t+ (mode == SFmode ? 0 : mode == DFmode ? 1 : 2));\n+\t\t+ (!TARGET_64BIT && flag_pic)\n+\t\t+ (GET_MODE_SIZE (mode) <= 4\n+\t\t   ? 0 : GET_MODE_SIZE (mode) <= 8 ? 1 : 2));\n       return true;\n \n     case ZERO_EXTEND:"}]}