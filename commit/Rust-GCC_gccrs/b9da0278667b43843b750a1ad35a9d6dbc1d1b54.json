{"sha": "b9da0278667b43843b750a1ad35a9d6dbc1d1b54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjlkYTAyNzg2NjdiNDM4NDNiNzUwYTFhZDM1YTlkNmRiYzFkMWI1NA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2019-03-12T23:10:49Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-03-12T23:10:49Z"}, "message": "d/dmd: Merge upstream dmd 19b1454b5\n\nBackports fixes for many ICEs that occurred when using the vector .array\nproperty in both CTFE and code generation passes.\n\nFixes https://gcc.gnu.org/PR88957\n\nReviewed-on: https://github.com/dlang/dmd/pull/9438\n\ngcc/d/ChangeLog:\n\n2019-03-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n\n\tPR d/88957\n\t* expr.cc (ExprVisitor::visit(VectorArrayExp)): New override.\n\ngcc/testsuite/ChangeLog:\n\n2019-03-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n\n\tPR d/88957\n\t* gdc.dg/pr88957.d: New test.\n\t* gdc.dg/simd.d: Add new vector tests.\n\nFrom-SVN: r269627", "tree": {"sha": "959bad96bf54189520e6ba013b1e28b19b0285bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/959bad96bf54189520e6ba013b1e28b19b0285bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9da0278667b43843b750a1ad35a9d6dbc1d1b54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9da0278667b43843b750a1ad35a9d6dbc1d1b54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9da0278667b43843b750a1ad35a9d6dbc1d1b54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "035f5b9e0b9fd181aea5d228ddfd91a5a7161dcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/035f5b9e0b9fd181aea5d228ddfd91a5a7161dcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/035f5b9e0b9fd181aea5d228ddfd91a5a7161dcf"}], "stats": {"total": 452, "additions": 437, "deletions": 15}, "files": [{"sha": "8e45c7ffff73d4f25e829eb585fe3c8d2b3b865d", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=b9da0278667b43843b750a1ad35a9d6dbc1d1b54", "patch": "@@ -1,3 +1,8 @@\n+2019-03-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/88957\n+\t* expr.cc (ExprVisitor::visit(VectorArrayExp)): New override.\n+\n 2019-03-12  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/87866"}, {"sha": "5e4abe6f33fa093462021876f6661f3176718669", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=b9da0278667b43843b750a1ad35a9d6dbc1d1b54", "patch": "@@ -1,4 +1,4 @@\n-7423993c996ed9f73d6ba6d58f625ad3c778ca1d\n+19b1454b5ca7b1036ea5fde197d91d4a7d05c0a5\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "1b382232dabd804ce2effe3dbbfb750e2dd0114a", "filename": "gcc/d/dmd/ctfeexpr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Fd%2Fdmd%2Fctfeexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Fd%2Fdmd%2Fctfeexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fctfeexpr.c?ref=b9da0278667b43843b750a1ad35a9d6dbc1d1b54", "patch": "@@ -517,7 +517,7 @@ Expression *resolveSlice(Expression *e, UnionExp *pue)\n uinteger_t resolveArrayLength(Expression *e)\n {\n     if (e->op == TOKvector)\n-        e = ((VectorExp *)e)->e1;\n+        return ((VectorExp *)e)->dim;\n \n     if (e->op == TOKnull)\n         return 0;"}, {"sha": "777f89cf186adcf41ae7ed656cbc59b6b8986c4c", "filename": "gcc/d/dmd/dinterpret.c", "status": "modified", "additions": 120, "deletions": 7, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Fd%2Fdmd%2Fdinterpret.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Fd%2Fdmd%2Fdinterpret.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdinterpret.c?ref=b9da0278667b43843b750a1ad35a9d6dbc1d1b54", "patch": "@@ -2920,7 +2920,6 @@ class Interpreter : public Visitor\n             case TOKneg:    *pue = Neg(e->type, e1);  break;\n             case TOKtilde:  *pue = Com(e->type, e1);  break;\n             case TOKnot:    *pue = Not(e->type, e1);  break;\n-            case TOKvector: result = e;             return; // do nothing\n             default:        assert(0);\n         }\n         result = (*pue).exp();\n@@ -3839,8 +3838,6 @@ class Interpreter : public Visitor\n         Expression *aggregate;\n         dinteger_t firstIndex;\n \n-        if (e1->op == TOKvector)\n-            e1 = ((VectorExp *)e1)->e1;\n         if (e1->op == TOKslice)\n         {\n             // ------------------------------\n@@ -4893,6 +4890,87 @@ class Interpreter : public Visitor\n         result = pue->exp();\n     }\n \n+    /**\n+     * Interpret the vector expression as an array literal.\n+     * Params:\n+     *    pue = non-null pointer to temporary storage that can be used to store the return value\n+     *    e = Expression to interpret\n+     * Returns:\n+     *    resulting array literal or 'e' if unable to interpret\n+     */\n+    static Expression *interpretVectorToArray(UnionExp *pue, VectorExp *e)\n+    {\n+        if (e->e1->op == TOKarrayliteral)\n+            return (ArrayLiteralExp *)e->e1;\n+        if (e->e1->op == TOKint64 || e->e1->op == TOKfloat64)\n+        {\n+            // Convert literal __vector(int) -> __vector([array])\n+            Expressions *elements = new Expressions();\n+            elements->setDim(e->dim);\n+            for (size_t i = 0; i < elements->dim; i++)\n+                (*elements)[i] = copyLiteral(e->e1).copy();\n+            TypeSArray *type = NULL;\n+            if (e->type->ty == Tvector)\n+            {\n+                TypeVector *tv = (TypeVector *)e->type;\n+                if (tv->basetype->ty == Tsarray)\n+                    type = (TypeSArray *)tv->basetype;\n+            }\n+            else if (e->type->ty == Tsarray)\n+                type = (TypeSArray *)e->type;\n+            assert(type);\n+            new(pue) ArrayLiteralExp(e->loc, type, elements);\n+            ArrayLiteralExp *ale = (ArrayLiteralExp *)pue->exp();\n+            ale->ownedByCtfe = OWNEDctfe;\n+            return ale;\n+        }\n+        return e;\n+    }\n+\n+    void visit(VectorExp *e)\n+    {\n+        if (e->ownedByCtfe >= OWNEDctfe) // We've already interpreted all the elements\n+        {\n+            result = e;\n+            return;\n+        }\n+        Expression *e1 = interpret(pue, e->e1, istate);\n+        assert(e1);\n+        if (exceptionOrCant(e1))\n+            return;\n+        if (e1->op != TOKarrayliteral && e1->op != TOKint64 && e1->op != TOKfloat64)\n+        {\n+            e->error(\"`%s` cannot be evaluated at compile time\", e->toChars());\n+            result = CTFEExp::cantexp;\n+            return;\n+        }\n+        if (e1 == pue->exp())\n+            e1 = pue->copy();\n+        new(pue) VectorExp(e->loc, e1, e->to);\n+        VectorExp *ve = (VectorExp *)pue->exp();\n+        ve->type = e->type;\n+        ve->dim = e->dim;\n+        ve->ownedByCtfe = OWNEDctfe;\n+        result = ve;\n+    }\n+\n+    void visit(VectorArrayExp *e)\n+    {\n+        Expression *e1 = interpret(pue, e->e1, istate);\n+        assert(e1);\n+        if (exceptionOrCant(e1))\n+            return;\n+        if (e1->op == TOKvector)\n+        {\n+            VectorExp *ve = (VectorExp *)e1;\n+            result = interpretVectorToArray(pue, ve);\n+            if (result->op != TOKvector)\n+                return;\n+        }\n+        e->error(\"`%s` cannot be evaluated at compile time\", e->toChars());\n+        result = CTFEExp::cantexp;\n+    }\n+\n     void visit(DelegatePtrExp *e)\n     {\n         Expression *e1 = interpret(pue, e->e1, istate);\n@@ -4984,12 +5062,17 @@ class Interpreter : public Visitor\n             return false;\n         }\n         if (e1->op == TOKvector)\n-            e1 = ((VectorExp *)e1)->e1;\n+        {\n+            UnionExp ue;\n+            e1 = interpretVectorToArray(&ue, (VectorExp *)e1);\n+            e1 = (e1 == ue.exp()) ? ue.copy() : e1;\n+        }\n \n         // Set the $ variable, and find the array literal to modify\n         if (e1->op != TOKarrayliteral &&\n             e1->op != TOKstring &&\n-            e1->op != TOKslice)\n+            e1->op != TOKslice &&\n+            e1->op != TOKvector)\n         {\n             e->error(\"cannot determine length of %s at compile time\",\n                 e->e1->toChars());\n@@ -5239,9 +5322,15 @@ class Interpreter : public Visitor\n             return;\n         }\n \n+        if (e1->op == TOKvector)\n+        {\n+            e1 = interpretVectorToArray(pue, (VectorExp *)e1);\n+            e1 = (e1 == pue->exp()) ? pue->copy() : e1;\n+        }\n+\n         /* Set the $ variable\n          */\n-        if (e1->op != TOKarrayliteral && e1->op != TOKstring && e1->op != TOKnull && e1->op != TOKslice)\n+        if (e1->op != TOKarrayliteral && e1->op != TOKstring && e1->op != TOKnull && e1->op != TOKslice && e1->op != TOKvector)\n         {\n             e->error(\"cannot determine length of %s at compile time\", e1->toChars());\n             result = CTFEExp::cantexp;\n@@ -5715,7 +5804,7 @@ class Interpreter : public Visitor\n             if (exceptionOrCant(e1))\n                 return;\n             assert(e1->op == TOKvector);\n-            e1 = ((VectorExp *)e1)->e1;\n+            e1 = interpretVectorToArray(pue, (VectorExp *)e1);\n         }\n         if (e->to->ty == Tarray && e1->op == TOKslice)\n         {\n@@ -6165,6 +6254,18 @@ Expression *scrubReturnValue(Loc loc, Expression *e)\n             return ex;\n         aae->type = toBuiltinAAType(aae->type);\n     }\n+    else if (e->op == TOKvector)\n+    {\n+        VectorExp *ve = (VectorExp *)e;\n+        ve->ownedByCtfe = OWNEDcode;\n+        if (ve->e1->op == TOKarrayliteral)\n+        {\n+            ArrayLiteralExp *ale = (ArrayLiteralExp *)ve->e1;\n+            ale->ownedByCtfe = OWNEDcode;\n+            if (Expression *ex = scrubArray(loc, ale->elements))\n+                return ex;\n+        }\n+    }\n     return e;\n }\n \n@@ -6282,6 +6383,18 @@ Expression *scrubCacheValue(Expression *e)\n         if (Expression *ex = scrubArrayCache(aae->values))\n             return ex;\n     }\n+    else if (e->op == TOKvector)\n+    {\n+        VectorExp *ve = (VectorExp *)e;\n+        ve->ownedByCtfe = OWNEDcache;\n+        if (ve->e1->op == TOKarrayliteral)\n+        {\n+            ArrayLiteralExp *ale = (ArrayLiteralExp *)ve->e1;\n+            ale->ownedByCtfe = OWNEDcache;\n+            if (Expression *ex = scrubArrayCache(ale->elements))\n+                return ex;\n+        }\n+    }\n     return e;\n }\n "}, {"sha": "af762eb3c66f36f9eb0c65a06ffa0d293476e4b6", "filename": "gcc/d/dmd/expression.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Fd%2Fdmd%2Fexpression.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Fd%2Fdmd%2Fexpression.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpression.c?ref=b9da0278667b43843b750a1ad35a9d6dbc1d1b54", "patch": "@@ -5744,6 +5744,7 @@ VectorExp::VectorExp(Loc loc, Expression *e, Type *t)\n     assert(t->ty == Tvector);\n     to = (TypeVector *)t;\n     dim = ~0;\n+    ownedByCtfe = OWNEDcode;\n }\n \n VectorExp *VectorExp::create(Loc loc, Expression *e, Type *t)\n@@ -5758,6 +5759,24 @@ Expression *VectorExp::syntaxCopy()\n \n /************************************************************/\n \n+VectorArrayExp::VectorArrayExp(Loc loc, Expression *e1)\n+        : UnaExp(loc, TOKvectorarray, sizeof(VectorExp), e1)\n+{\n+}\n+\n+bool VectorArrayExp::isLvalue()\n+{\n+    return e1->isLvalue();\n+}\n+\n+Expression *VectorArrayExp::toLvalue(Scope *sc, Expression *e)\n+{\n+    e1 = e1->toLvalue(sc, e);\n+    return this;\n+}\n+\n+/************************************************************/\n+\n SliceExp::SliceExp(Loc loc, Expression *e1, IntervalExp *ie)\n         : UnaExp(loc, TOKslice, sizeof(SliceExp), e1)\n {"}, {"sha": "b460e8caa0103882cbf8c39e69b65eb77dc745d1", "filename": "gcc/d/dmd/expression.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Fd%2Fdmd%2Fexpression.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Fd%2Fdmd%2Fexpression.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpression.h?ref=b9da0278667b43843b750a1ad35a9d6dbc1d1b54", "patch": "@@ -959,13 +959,23 @@ class VectorExp : public UnaExp\n public:\n     TypeVector *to;             // the target vector type before semantic()\n     unsigned dim;               // number of elements in the vector\n+    OwnedBy ownedByCtfe;\n \n     VectorExp(Loc loc, Expression *e, Type *t);\n     static VectorExp *create(Loc loc, Expression *e, Type *t);\n     Expression *syntaxCopy();\n     void accept(Visitor *v) { v->visit(this); }\n };\n \n+class VectorArrayExp : public UnaExp\n+{\n+public:\n+    VectorArrayExp(Loc loc, Expression *e1);\n+    bool isLvalue();\n+    Expression *toLvalue(Scope *sc, Expression *e);\n+    void accept(Visitor *v) { v->visit(this); }\n+};\n+\n class SliceExp : public UnaExp\n {\n public:\n@@ -1515,6 +1525,7 @@ struct UnionExp\n         char addrexp   [sizeof(AddrExp)];\n         char indexexp  [sizeof(IndexExp)];\n         char sliceexp  [sizeof(SliceExp)];\n+        char vectorexp [sizeof(VectorExp)];\n     } u;\n #if defined(__DMC__)\n     #pragma pack()"}, {"sha": "a88ff8822acd25ed08dc8d2ee40ab2a52283bcd6", "filename": "gcc/d/dmd/expressionsem.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Fd%2Fdmd%2Fexpressionsem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Fd%2Fdmd%2Fexpressionsem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpressionsem.c?ref=b9da0278667b43843b750a1ad35a9d6dbc1d1b54", "patch": "@@ -4299,6 +4299,25 @@ class ExpressionSemanticVisitor : public Visitor\n         result = e;\n     }\n \n+    void visit(VectorArrayExp *e)\n+    {\n+        if (!e->type)\n+        {\n+            unaSemantic(e, sc);\n+            e->e1 = resolveProperties(sc, e->e1);\n+\n+            if (e->e1->op == TOKerror)\n+            {\n+                result = e->e1;\n+                return;\n+            }\n+            assert(e->e1->type->ty == Tvector);\n+            TypeVector *tv = (TypeVector *)e->e1->type;\n+            e->type = tv->basetype;\n+        }\n+        result = e;\n+    }\n+\n     void visit(SliceExp *exp)\n     {\n         if (exp->type)"}, {"sha": "4eaa1ae10501494ff6ca35a5ee17c01cab2ff379", "filename": "gcc/d/dmd/hdrgen.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Fd%2Fdmd%2Fhdrgen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Fd%2Fdmd%2Fhdrgen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fhdrgen.c?ref=b9da0278667b43843b750a1ad35a9d6dbc1d1b54", "patch": "@@ -2833,6 +2833,12 @@ class PrettyPrintVisitor : public Visitor\n         expToBuffer(e->e1, precedence[e->op]);\n     }\n \n+    void visit(VectorArrayExp *e)\n+    {\n+        expToBuffer(e->e1, PREC_primary);\n+        buf->writestring(\".array\");\n+    }\n+\n     void visit(SliceExp *e)\n     {\n         expToBuffer(e->e1, precedence[e->op]);"}, {"sha": "d0e73967d45f1c70bb5d6f4547df506e15ec0d86", "filename": "gcc/d/dmd/mtype.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Fd%2Fdmd%2Fmtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Fd%2Fdmd%2Fmtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fmtype.c?ref=b9da0278667b43843b750a1ad35a9d6dbc1d1b54", "patch": "@@ -3766,8 +3766,8 @@ Expression *TypeVector::dotExp(Scope *sc, Expression *e, Identifier *ident, int\n     {\n         //e = e->castTo(sc, basetype);\n         // Keep lvalue-ness\n-        e = e->copy();\n-        e->type = basetype;\n+        e = new VectorArrayExp(e->loc, e);\n+        e = ::semantic(e, sc);\n         return e;\n     }\n     if (ident == Id::_init || ident == Id::offsetof || ident == Id::stringof || ident == Id::__xalignof)"}, {"sha": "e0ee299eb6d3739742826e047228b3a28e6677e7", "filename": "gcc/d/dmd/parse.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Fd%2Fdmd%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Fd%2Fdmd%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fparse.c?ref=b9da0278667b43843b750a1ad35a9d6dbc1d1b54", "patch": "@@ -7929,6 +7929,7 @@ PrecedenceInitializer::PrecedenceInitializer()\n     precedence[TOKdefault] = PREC_primary;\n     precedence[TOKoverloadset] = PREC_primary;\n     precedence[TOKvoid] = PREC_primary;\n+    precedence[TOKvectorarray] = PREC_primary;\n \n     // post\n     precedence[TOKdotti] = PREC_primary;"}, {"sha": "c9c7ab45878ee1e77da67123eeb7ee86c27c1d4d", "filename": "gcc/d/dmd/tokens.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Fd%2Fdmd%2Ftokens.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Fd%2Fdmd%2Ftokens.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftokens.c?ref=b9da0278667b43843b750a1ad35a9d6dbc1d1b54", "patch": "@@ -472,4 +472,5 @@ TokenInitializer::TokenInitializer()\n     Token::tochars[TOKon_scope_success] = \"scope(success)\";\n     Token::tochars[TOKon_scope_failure] = \"scope(failure)\";\n     Token::tochars[TOKdelegateptr]      = \"delegateptr\";\n+    Token::tochars[TOKvectorarray]      = \"vectorarray\";\n }"}, {"sha": "567e802b611d56ba03097afa290f701e81d62f95", "filename": "gcc/d/dmd/tokens.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Fd%2Fdmd%2Ftokens.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Fd%2Fdmd%2Ftokens.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftokens.h?ref=b9da0278667b43843b750a1ad35a9d6dbc1d1b54", "patch": "@@ -179,6 +179,8 @@ enum TOK\n         TOKvoidexp,\n         TOKcantexp,\n \n+        TOKvectorarray,\n+\n         TOKMAX\n };\n "}, {"sha": "4c9267044e2f87d8cfeb12f3572750511ed7567a", "filename": "gcc/d/dmd/visitor.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Fd%2Fdmd%2Fvisitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Fd%2Fdmd%2Fvisitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fvisitor.h?ref=b9da0278667b43843b750a1ad35a9d6dbc1d1b54", "patch": "@@ -226,6 +226,7 @@ class NotExp;\n class DeleteExp;\n class CastExp;\n class VectorExp;\n+class VectorArrayExp;\n class SliceExp;\n class ArrayLengthExp;\n class IntervalExp;\n@@ -517,6 +518,7 @@ class Visitor\n     virtual void visit(DeleteExp *e) { visit((UnaExp *)e); }\n     virtual void visit(CastExp *e) { visit((UnaExp *)e); }\n     virtual void visit(VectorExp *e) { visit((UnaExp *)e); }\n+    virtual void visit(VectorArrayExp *e) { visit((UnaExp *)e); }\n     virtual void visit(SliceExp *e) { visit((UnaExp *)e); }\n     virtual void visit(ArrayLengthExp *e) { visit((UnaExp *)e); }\n     virtual void visit(IntervalExp *e) { visit((Expression *)e); }"}, {"sha": "acf81a6cca0ae10fe1bf794630755e25dfe3abba", "filename": "gcc/d/expr.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Fd%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Fd%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fexpr.cc?ref=b9da0278667b43843b750a1ad35a9d6dbc1d1b54", "patch": "@@ -2992,6 +2992,14 @@ class ExprVisitor : public Visitor\n       }\n   }\n \n+  /* Build a static array representation of a vector expression.  */\n+\n+  void visit (VectorArrayExp *e)\n+  {\n+    this->result_ = convert_expr (build_expr (e->e1, this->constp_),\n+\t\t\t\t  e->e1->type, e->type);\n+  }\n+\n   /* Build a static class literal, return its reference.  */\n \n   void visit (ClassReferenceExp *e)"}, {"sha": "94144c93a3d24e7e5f1401382b5be804b4bebec0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b9da0278667b43843b750a1ad35a9d6dbc1d1b54", "patch": "@@ -1,3 +1,9 @@\n+2019-03-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/88957\n+\t* gdc.dg/pr88957.d: New test.\n+\t* gdc.dg/simd.d: Add new vector tests.\n+\n 2019-03-12  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR d/87824"}, {"sha": "e6366d463b264564899ddf0ca3eeebc24bf02345", "filename": "gcc/testsuite/gdc.dg/pr88957.d", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Ftestsuite%2Fgdc.dg%2Fpr88957.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Ftestsuite%2Fgdc.dg%2Fpr88957.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fpr88957.d?ref=b9da0278667b43843b750a1ad35a9d6dbc1d1b54", "patch": "@@ -0,0 +1,18 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=88957\n+// { dg-do compile }\n+// { dg-additional-options \"-fsanitize=undefined\" }\n+\n+alias int4 = __vector(int[4]);\n+\n+int fn(const int[4] x)\n+{\n+    int sum = 0;\n+    foreach (i; x) sum += i;\n+    return sum;\n+}\n+\n+void pr88957()\n+{\n+    auto x = fn(int4.init.array);\n+    auto y = fn(int4(2).array);\n+}"}, {"sha": "812b36649aa033e6db99d51dcb658ed9c2e39b47", "filename": "gcc/testsuite/gdc.dg/simd.d", "status": "modified", "additions": 215, "deletions": 4, "changes": 219, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9da0278667b43843b750a1ad35a9d6dbc1d1b54/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd.d?ref=b9da0278667b43843b750a1ad35a9d6dbc1d1b54", "patch": "@@ -1108,7 +1108,6 @@ float bug8060(float x) {\n }\n \n /*****************************************/\n-/+\n // https://issues.dlang.org/show_bug.cgi?id=9200\n \n void bar9200(double[2] a)\n@@ -1130,7 +1129,6 @@ void test9200()\n \n     bar9200(a.array);\n }\n-+/\n \n /*****************************************/\n // https://issues.dlang.org/show_bug.cgi?id=9304\n@@ -1686,14 +1684,224 @@ void test17720()\n }\n \n /*****************************************/\n-\n // https://issues.dlang.org/show_bug.cgi?id=17695\n \n void test17695(__vector(ubyte[16]) a)\n {\n     auto b = -a;\n }\n \n+/*****************************************/\n+// https://issues.dlang.org/show_bug.cgi?id=19223\n+\n+int test19223a(const int[4] x)\n+{\n+    int sum = 0;\n+    foreach (i; x) sum += i;\n+    return sum;\n+}\n+\n+void test19223()\n+{\n+    int4 v1 = int4.init;\n+    assert(test19223a(v1.array) == 0);\n+    assert(test19223a(int4.init.array) == 0);\n+}\n+\n+/*****************************************/\n+// https://issues.dlang.org/show_bug.cgi?id=19224\n+\n+float test19224(const float[4] val)\n+{\n+    float sum = 0;\n+    foreach (x; val) sum += x;\n+    return sum;\n+}\n+\n+enum x19224 = test19224(float4.init.array);\n+static assert(x19224 is float.nan);\n+\n+enum y19224 = test19224(float4(1).array);\n+static assert(y19224 == 4);\n+\n+/*****************************************/\n+// https://issues.dlang.org/show_bug.cgi?id=19607\n+\n+int test19607a(const int[4] x)\n+{\n+    int sum = 0;\n+    foreach (i; x) sum += i;\n+    return sum;\n+}\n+\n+void test19607()\n+{\n+    int4 v1 = 1;\n+    assert(test19607a(v1.array) == 4);\n+    assert(test19607a(int4(2).array) == 8);\n+}\n+\n+/*****************************************/\n+// https://issues.dlang.org/show_bug.cgi?id=19627\n+\n+enum int[4] fail19627 = cast(int[4])int4(0);\n+\n+/*****************************************/\n+// https://issues.dlang.org/show_bug.cgi?id=19628\n+\n+enum ice19628a = int4.init[0];\n+enum ice19628b = int4.init.array[0];\n+enum ice19628c = (cast(int[4])int4.init.array)[0];\n+enum ice19628d = (cast(int[4])int4.init)[0];\n+\n+enum int4 v19628a = int4.init;\n+enum idx19628a = v19628a[0];\n+static assert(idx19628a == 0);\n+\n+enum int[4] v19628b = int4.init.array;\n+enum idx19628b = v19628b[0];\n+static assert(idx19628b == 0);\n+\n+enum int[4] v19628c = cast(int[4])int4.init.array;\n+enum idx19628c = v19628c[0];\n+static assert(idx19628c == 0);\n+\n+enum int[4] v19628d = cast(int[4])int4.init;\n+enum idx19628d = v19628d[0];\n+static assert(idx19628d == 0);\n+\n+immutable int4 v19628e = int4.init;\n+immutable idx19628e = v19628e[0];\n+static assert(idx19628e == 0);\n+\n+immutable int[4] v19628f = int4.init.array;\n+immutable idx19628f = v19628f[0];\n+static assert(idx19628f == 0);\n+\n+immutable int[4] v19628g = cast(int[4])int4.init.array;\n+immutable idx19628g = v19628g[0];\n+static assert(idx19628g == 0);\n+\n+immutable idx19628h = v19628h[0];\n+immutable int[4] v19628h = cast(int[4])int4.init;\n+static assert(idx19628h == 0);\n+\n+/*****************************************/\n+// https://issues.dlang.org/show_bug.cgi?id=19629\n+\n+enum fail19629a = int4(0)[0];\n+enum fail19629b = int4(0).array[0];\n+enum fail19629c = (cast(int[4])int4(0).array)[0];\n+enum fail19628d = (cast(int[4])int4(0))[0];\n+\n+enum int4 v19629a = int4(0);\n+enum idx19629a = v19629a[0];\n+static assert(idx19629a == 0);\n+\n+enum int[4] v19629b = int4(0).array;\n+enum idx19629b = v19629b[0];\n+static assert(idx19629b == 0);\n+\n+enum int[4] v19629c = cast(int[4])int4(0).array;\n+enum idx19629c = v19629c[0];\n+static assert(idx19629c == 0);\n+\n+enum int[4] v19629d = cast(int[4])int4(0);\n+enum idx19629d = v19629d[0];\n+static assert(idx19629d == 0);\n+\n+immutable int4 v19629e = int4(0);\n+immutable idx19629e = v19629e[0];\n+static assert(idx19629e == 0);\n+\n+immutable int[4] v19629f = int4(0).array;\n+immutable idx19629f = v19629f[0];\n+static assert(idx19629f == 0);\n+\n+immutable int[4] v19629g = cast(int[4])int4(0).array;\n+immutable idx19629g = v19629g[0];\n+static assert(idx19629g == 0);\n+\n+immutable int[4] v19629h = cast(int[4])int4(0);\n+immutable idx19629h = v19629h[0];\n+static assert(idx19629h == 0);\n+\n+/*****************************************/\n+// https://issues.dlang.org/show_bug.cgi?id=19630\n+\n+enum fail19630a = int4.init[1..2];\n+enum fail19630b = int4.init.array[1..2];\n+enum fail19630c = (cast(int[4])int4.init.array)[1..2];\n+enum fail19630d = (cast(int[4])int4.init)[1..2];\n+enum fail19630e = int4(0)[1..2];\n+enum fail19630f = int4(0).array[1..2];\n+enum fail19630g = (cast(int[4])int4(0).array)[1..2];\n+enum fail19630h = (cast(int[4])int4(0))[1..2];\n+\n+enum int4 v19630a = int4.init;\n+enum slice19630a = v19630a[1..2];\n+static assert(slice19630a == [0]);\n+\n+enum int[4] v19630b = int4.init.array;\n+enum slice19630b = v19630b[1..2];\n+static assert(slice19630b == [0]);\n+\n+enum int[4] v19630c = cast(int[4])int4.init.array;\n+enum slice19630c = v19630c[1..2];\n+static assert(slice19630c == [0]);\n+\n+enum int[4] v19630d = cast(int[4])int4.init;\n+enum slice19630d = v19630d[1..2];\n+static assert(slice19630d == [0]);\n+\n+enum int4 v19630e = int4(0);\n+enum slice19630e = v19630e[1..2];\n+static assert(slice19630e == [0]);\n+\n+enum int[4] v19630f = int4(0).array;\n+enum slice19630f = v19630f[1..2];\n+static assert(slice19630f == [0]);\n+\n+enum int[4] v19630g = cast(int[4])int4(0).array;\n+enum slice19630g = v19630g[1..2];\n+static assert(slice19630g == [0]);\n+\n+enum int[4] v19630h = cast(int[4])int4(0);\n+enum slice19630h = v19630h[1..2];\n+static assert(slice19630h == [0]);\n+\n+immutable int4 v19630i = int4.init;\n+immutable slice19630i = v19630i[1..2];\n+static assert(slice19630i == [0]);\n+\n+immutable int[4] v19630j = int4.init.array;\n+immutable slice19630j = v19630j[1..2];\n+static assert(slice19630j == [0]);\n+\n+immutable int[4] v19630k = cast(int[4])int4.init.array;\n+immutable slice19630k = v19630k[1..2];\n+static assert(slice19630k == [0]);\n+\n+immutable int[4] v19630l = cast(int[4])int4.init;\n+immutable slice19630l = v19630l[1..2];\n+static assert(slice19630l == [0]);\n+\n+immutable int4 v19630m = int4(0);\n+immutable slice19630m = v19630m[1..2];\n+static assert(slice19630m == [0]);\n+\n+immutable int[4] v19630n = int4(0).array;\n+immutable slice19630n = v19630n[1..2];\n+static assert(slice19630n == [0]);\n+\n+immutable int[4] v19630o = cast(int[4])int4(0).array;\n+immutable slice19630o = v19630o[1..2];\n+static assert(slice19630o == [0]);\n+\n+immutable int[4] v19630p = cast(int[4])int4(0);\n+immutable slice19630p = v19630p[1..2];\n+static assert(slice19630p == [0]);\n+\n /*****************************************/\n \n int main()\n@@ -1718,7 +1926,7 @@ int main()\n     test7414();\n     test7413();\n     test7413_2();\n-//    test9200();\n+    test9200();\n     test9304();\n     test9910();\n     test12852();\n@@ -1731,5 +1939,8 @@ int main()\n     testOPvecunsto();\n     test10447();\n \n+    test19223();\n+    test19607();\n+\n     return 0;\n }"}]}