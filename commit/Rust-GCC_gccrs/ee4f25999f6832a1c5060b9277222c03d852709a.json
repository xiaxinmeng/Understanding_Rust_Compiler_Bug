{"sha": "ee4f25999f6832a1c5060b9277222c03d852709a", "node_id": "C_kwDOANBUbNoAKGVlNGYyNTk5OWY2ODMyYTFjNTA2MGI5Mjc3MjIyYzAzZDg1MjcwOWE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-12-02T09:29:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-12-02T09:29:11Z"}, "message": "c++: Deduce range for structured bindings if expression is not type dependent [PR84469]\n\nAs shown on the decomp56.C testcase, if the range for expression\nwhen using structured bindings is not type dependent, we deduce\nthe finish the structured binding types only when not in template\n(cp_convert_range_for takes care of that), but if in templates,\ndo_range_for_auto_deduction is called instead and it doesn't handle\nstructured bindings.  During instantiation they are handled later,\nbut during the parsing keeping the structured bindings type\ndependent when they shouldn't be changes behavior.\nThe following patch calls cp_finish_decomp even from\ndo_range_for_auto_deduction.\nThe patch regresses the OpenMP g++.dg/gomp/for-21.C test (3 errors\nare gone), I'll post an incremental patch for it momentarily.\n\n2022-12-02  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/84469\n\t* parser.cc (do_range_for_auto_deduction): Add DECOMP_FIRST_NAME\n\tand DECOMP_CNT arguments.  Call cp_finish_decomp if DECL\n\tis a structured binding.\n\t(cp_parser_range_for): Adjust do_range_for_auto_deduction caller.\n\t(cp_convert_omp_range_for): Likewise.\n\n\t* g++.dg/cpp1z/decomp56.C: New test.\n\t* g++.dg/gomp/pr84469.C: New test.", "tree": {"sha": "f0933f33052f8dcf265e4da2785ecf6d3362633c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0933f33052f8dcf265e4da2785ecf6d3362633c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee4f25999f6832a1c5060b9277222c03d852709a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee4f25999f6832a1c5060b9277222c03d852709a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee4f25999f6832a1c5060b9277222c03d852709a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee4f25999f6832a1c5060b9277222c03d852709a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6508d5e5a1a8c08bebf83d258fad525eadc9f5d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6508d5e5a1a8c08bebf83d258fad525eadc9f5d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6508d5e5a1a8c08bebf83d258fad525eadc9f5d1"}], "stats": {"total": 73, "additions": 68, "deletions": 5}, "files": [{"sha": "e69097d670b093002ddd71de1172fff185518a5a", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f25999f6832a1c5060b9277222c03d852709a/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f25999f6832a1c5060b9277222c03d852709a/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=ee4f25999f6832a1c5060b9277222c03d852709a", "patch": "@@ -2342,7 +2342,7 @@ static tree cp_parser_c_for\n static tree cp_parser_range_for\n   (cp_parser *, tree, tree, tree, bool, unsigned short, bool);\n static void do_range_for_auto_deduction\n-  (tree, tree);\n+  (tree, tree, tree, unsigned int);\n static tree cp_parser_perform_range_for_lookup\n   (tree, tree *, tree *);\n static tree cp_parser_range_for_member_function\n@@ -13668,7 +13668,8 @@ cp_parser_range_for (cp_parser *parser, tree scope, tree init, tree range_decl,\n       if (!type_dependent_expression_p (range_expr)\n \t  /* do_auto_deduction doesn't mess with template init-lists.  */\n \t  && !BRACE_ENCLOSED_INITIALIZER_P (range_expr))\n-\tdo_range_for_auto_deduction (range_decl, range_expr);\n+\tdo_range_for_auto_deduction (range_decl, range_expr, decomp_first_name,\n+\t\t\t\t     decomp_cnt);\n     }\n   else\n     {\n@@ -13707,7 +13708,8 @@ build_range_temp (tree range_expr)\n    a shortcut version of cp_convert_range_for.  */\n \n static void\n-do_range_for_auto_deduction (tree decl, tree range_expr)\n+do_range_for_auto_deduction (tree decl, tree range_expr,\n+\t\t\t     tree decomp_first_name, unsigned int decomp_cnt)\n {\n   tree auto_node = type_uses_auto (TREE_TYPE (decl));\n   if (auto_node)\n@@ -13727,6 +13729,8 @@ do_range_for_auto_deduction (tree decl, tree range_expr)\n \t\t\t\t\t\titer_decl, auto_node,\n \t\t\t\t\t\ttf_warning_or_error,\n \t\t\t\t\t\tadc_variable_type);\n+\t  if (VAR_P (decl) && DECL_DECOMPOSITION_P (decl))\n+\t    cp_finish_decomp (decl, decomp_first_name, decomp_cnt);\n \t}\n     }\n }\n@@ -42994,15 +42998,21 @@ cp_convert_omp_range_for (tree &this_pre_body, vec<tree, va_gc> *for_block,\n \t  && !BRACE_ENCLOSED_INITIALIZER_P (init))\n \t{\n \t  tree d = decl;\n+\t  tree decomp_first_name = NULL_TREE;\n+\t  unsigned decomp_cnt = 0;\n \t  if (decl != error_mark_node && DECL_HAS_VALUE_EXPR_P (decl))\n \t    {\n \t      tree v = DECL_VALUE_EXPR (decl);\n \t      if (TREE_CODE (v) == ARRAY_REF\n \t\t  && VAR_P (TREE_OPERAND (v, 0))\n \t\t  && DECL_DECOMPOSITION_P (TREE_OPERAND (v, 0)))\n-\t\td = TREE_OPERAND (v, 0);\n+\t\t{\n+\t\t  d = TREE_OPERAND (v, 0);\n+\t\t  decomp_cnt = tree_to_uhwi (TREE_OPERAND (v, 1)) + 1;\n+\t\t  decomp_first_name = decl;\n+\t\t}\n \t    }\n-\t  do_range_for_auto_deduction (d, init);\n+\t  do_range_for_auto_deduction (d, init, decomp_first_name, decomp_cnt);\n \t}\n       cond = global_namespace;\n       incr = NULL_TREE;"}, {"sha": "25a4c3def6b0131d511a9c9d1e90394169351cc0", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp56.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f25999f6832a1c5060b9277222c03d852709a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp56.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f25999f6832a1c5060b9277222c03d852709a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp56.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp56.C?ref=ee4f25999f6832a1c5060b9277222c03d852709a", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/84469\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"\" }\n+\n+struct A {\n+  template <typename T>\n+  void bar () const {}\n+  template <typename T>\n+  void baz () const {}\n+};\n+struct B { A a; };\n+\n+template <typename>\n+void\n+foo ()\n+{\n+  A a[1][1];\n+  for (auto const& [b]: a)\t// { dg-warning \"structured bindings only available with\" \"\" { target c++14_down } }\n+    b.bar<int> ();\n+  B c;\n+  auto const& [d] = c;\t\t// { dg-warning \"structured bindings only available with\" \"\" { target c++14_down } }\n+  d.baz<double> ();\n+}\n+\n+int\n+main ()\n+{\n+  foo<int> ();\n+}"}, {"sha": "973debf14ddd3f04dedf717d922ab171f253cecf", "filename": "gcc/testsuite/g++.dg/gomp/pr84469.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f25999f6832a1c5060b9277222c03d852709a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr84469.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f25999f6832a1c5060b9277222c03d852709a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr84469.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr84469.C?ref=ee4f25999f6832a1c5060b9277222c03d852709a", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/84469\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"\" }\n+\n+struct A {\n+  template <typename T>\n+  void bar () const {}\n+};\n+\n+template <typename>\n+void\n+foo ()\n+{\n+  A a[1][1];\n+  #pragma omp for\n+  for (auto const& [b]: a)\t// { dg-warning \"structured bindings only available with\" \"\" { target c++14_down } }\n+    b.bar<int> ();\n+}\n+\n+int\n+main ()\n+{\n+  foo<int> ();\n+}"}]}