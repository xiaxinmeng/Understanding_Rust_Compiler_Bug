{"sha": "6f18718f3ff7a4b87bacd842f10582dc0cd87a08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmYxODcxOGYzZmY3YTRiODdiYWNkODQyZjEwNTgyZGMwY2Q4N2EwOA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-09-22T14:34:13Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-09-22T14:34:13Z"}, "message": "Replace use of __objc_xcalloc and free with objc_calloc and objc_free.\n\nFrom-SVN: r12761", "tree": {"sha": "0fee4857221f022433a9220b0bf7b93cf480ea92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fee4857221f022433a9220b0bf7b93cf480ea92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f18718f3ff7a4b87bacd842f10582dc0cd87a08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f18718f3ff7a4b87bacd842f10582dc0cd87a08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f18718f3ff7a4b87bacd842f10582dc0cd87a08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f18718f3ff7a4b87bacd842f10582dc0cd87a08/comments", "author": null, "committer": null, "parents": [{"sha": "ed40285ff6b9ba382020c24c69af8940532f6761", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed40285ff6b9ba382020c24c69af8940532f6761", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed40285ff6b9ba382020c24c69af8940532f6761"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "4a1dca989d6fbe15922e602934cda8898c39a262", "filename": "gcc/objc/hash.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18718f3ff7a4b87bacd842f10582dc0cd87a08/gcc%2Fobjc%2Fhash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18718f3ff7a4b87bacd842f10582dc0cd87a08/gcc%2Fobjc%2Fhash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fhash.c?ref=6f18718f3ff7a4b87bacd842f10582dc0cd87a08", "patch": "@@ -39,8 +39,6 @@ Boston, MA 02111-1307, USA.  */\n #define EXPANSION(cache) \\\n   ((cache)->size * 2)\n \n-void *__objc_xcalloc (size_t, size_t);\n-\n cache_ptr\n hash_new (unsigned int size, hash_func_type hash_func,\n \t  compare_func_type compare_func)\n@@ -53,13 +51,13 @@ hash_new (unsigned int size, hash_func_type hash_func,\n \n   /* Allocate the cache structure.  calloc insures\n      its initialization for default values.  */\n-  cache = (cache_ptr) __objc_xcalloc (1, sizeof (struct cache));\n+  cache = (cache_ptr) objc_calloc (1, sizeof (struct cache));\n   assert (cache);\n \n   /* Allocate the array of buckets for the cache.\n      calloc initializes all of the pointers to NULL.  */\n   cache->node_table\n-    = (node_ptr *) __objc_xcalloc (size, sizeof (node_ptr));\n+    = (node_ptr *) objc_calloc (size, sizeof (node_ptr));\n   assert (cache->node_table);\n \n   cache->size  = size;\n@@ -89,16 +87,16 @@ hash_delete (cache_ptr cache)\n     hash_remove (cache, node->key);\n \n   /* Release the array of nodes and the cache itself.  */\n-  free (cache->node_table);\n-  free (cache);\n+  objc_free(cache->node_table);\n+  objc_free(cache);\n }\n \n \n void\n hash_add (cache_ptr *cachep, const void *key, void *value)\n {\n   size_t indx = (*(*cachep)->hash_func)(*cachep, key);\n-  node_ptr node = (node_ptr) __objc_xcalloc (1, sizeof (struct cache_node));\n+  node_ptr node = (node_ptr) objc_calloc (1, sizeof (struct cache_node));\n \n \n   assert (node);\n@@ -171,7 +169,7 @@ hash_remove (cache_ptr cache, const void *key)\n   /* Special case.  First element is the key/value pair to be removed.  */\n   if ((*cache->compare_func)(node->key, key)) {\n     cache->node_table[indx] = node->next;\n-    free (node);\n+    objc_free(node);\n   } else {\n \n     /* Otherwise, find the hash entry.  */\n@@ -182,7 +180,7 @@ hash_remove (cache_ptr cache, const void *key)\n \n       if ((*cache->compare_func)(node->key, key)) {\n         prev->next = node->next, removed = YES;\n-        free (node);\n+        objc_free(node);\n       } else\n         prev = node, node = node->next;\n     } while (!removed && node);"}]}