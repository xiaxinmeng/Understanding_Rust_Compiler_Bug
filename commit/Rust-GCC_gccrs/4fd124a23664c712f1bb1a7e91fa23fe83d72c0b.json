{"sha": "4fd124a23664c712f1bb1a7e91fa23fe83d72c0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZkMTI0YTIzNjY0YzcxMmYxYmIxYTdlOTFmYTIzZmU4M2Q3MmMwYg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-07-10T00:44:05Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-07-13T15:16:26Z"}, "message": "c++: Fix tentative parsing of enum-specifier [PR96077]\n\nHere's an interesting issue: in this code a ) is missing:\n\n  enum { E = (2 } e;\n\nbut we compile the code anyway, and E is set to 0 in build_enumerator,\nwhich is sneaky.\n\nThe problem is that cp_parser_enum_specifier parses tentatively, because\nwhen we see the enum keyword, we don't know yet if we'll find an\nenum-specifier, opaque-enum-declaration, or elaborated-enum-specifier.\n\nIn this test when we call cp_parser_enumerator_list we're still parsing\ntentatively, and as a consequence, parens.require_close (parser) in\ncp_parser_primary_expression doesn't report any errors.  But we only go\non to parse the enumerator-list after we've seen a {, at which point we\nmight as well commit -- we know we're dealing with an enum-specifier.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/96077\n\t* parser.c (cp_parser_enum_specifier): Commit to tentative parse\n\tafter we've seen an opening brace.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/96077\n\t* g++.dg/parse/enum14.C: New test.", "tree": {"sha": "bf531bd00cb45a068315df2381a431e891c5eff5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf531bd00cb45a068315df2381a431e891c5eff5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fd124a23664c712f1bb1a7e91fa23fe83d72c0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fd124a23664c712f1bb1a7e91fa23fe83d72c0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fd124a23664c712f1bb1a7e91fa23fe83d72c0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fd124a23664c712f1bb1a7e91fa23fe83d72c0b/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a43125192237ce7f3aac7406fd425f9aaad7d9bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a43125192237ce7f3aac7406fd425f9aaad7d9bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a43125192237ce7f3aac7406fd425f9aaad7d9bf"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "9e32a3c7772f9491c195a39da8600d6232eda537", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd124a23664c712f1bb1a7e91fa23fe83d72c0b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd124a23664c712f1bb1a7e91fa23fe83d72c0b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=4fd124a23664c712f1bb1a7e91fa23fe83d72c0b", "patch": "@@ -19412,7 +19412,12 @@ cp_parser_enum_specifier (cp_parser* parser)\n \t\t     \"ISO C++ forbids empty unnamed enum\");\n \t}\n       else\n-\tcp_parser_enumerator_list (parser, type);\n+\t{\n+\t  /* We've seen a '{' so we know we're in an enum-specifier.\n+\t     Commit to any tentative parse to get syntax errors.  */\n+\t  cp_parser_commit_to_tentative_parse (parser);\n+\t  cp_parser_enumerator_list (parser, type);\n+\t}\n \n       /* Consume the final '}'.  */\n       braces.require_close (parser);"}, {"sha": "be09cca5211e3bfc107b03893dedcd51e92d7fc5", "filename": "gcc/testsuite/g++.dg/parse/enum14.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd124a23664c712f1bb1a7e91fa23fe83d72c0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fenum14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd124a23664c712f1bb1a7e91fa23fe83d72c0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fenum14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fenum14.C?ref=4fd124a23664c712f1bb1a7e91fa23fe83d72c0b", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/96077\n+\n+int main ()\n+{\n+  enum { E = (2 } e; // { dg-error \"expected\" }\n+  enum { F = true ? 2 : (3 /* missing \")\" here */ } f; // { dg-error \"expected\" }\n+}"}]}