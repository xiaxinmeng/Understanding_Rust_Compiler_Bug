{"sha": "62c8b21d48ab6012ddc50529a39071d902dba31a", "node_id": "C_kwDOANBUbNoAKDYyYzhiMjFkNDhhYjYwMTJkZGM1MDUyOWEzOTA3MWQ5MDJkYmEzMWE", "commit": {"author": {"name": "Chung-Lin Tang", "email": "cltang@codesourcery.com", "date": "2022-01-04T07:37:15Z"}, "committer": {"name": "Chung-Lin Tang", "email": "cltang@codesourcery.com", "date": "2022-01-04T07:37:15Z"}, "message": "openmp: Fix ICE in gimplify_omp_affinity [PR103643]\n\nAfter the PR90030 patch, which removes the universal casting of all Fortran\narray pointers to 'c_char*', a Fortran descriptor based array passed into an\naffinity() clause now looks like:\n\n-     #pragma omp task private(i) shared(b) affinity(*(c_char *) a.data)\n+     #pragma omp task private(i) shared(b) affinity(*(integer(kind=4)[0:] * restrict) a.data)\n\nThe 'integer(kind=4)[0:]' incomplete type appears to be causing ICE during\ngimplify_expr() due to 'is_gimple_val, fb_rvalue'. The ICE appears to be fixed\njust by adjusting to 'is_gimple_lvalue, fb_lvalue'. Considering the use of the\naffinity() clause, which should be specifying the location of a particular\nobject in memory, this probably makes sense.\n\ngcc/ChangeLog:\n\n\tPR middle-end/103643\n\n\t* gimplify.c (gimplify_omp_affinity): Adjust gimplify_expr of entire\n\tOMP_CLAUSE_DECL to use 'is_gimple_lvalue, fb_lvalue'\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/gomp/pr103643.f90: New test.", "tree": {"sha": "39d2fda7e555f43b34f5f04ce9c5db6fd21b2b7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39d2fda7e555f43b34f5f04ce9c5db6fd21b2b7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62c8b21d48ab6012ddc50529a39071d902dba31a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62c8b21d48ab6012ddc50529a39071d902dba31a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62c8b21d48ab6012ddc50529a39071d902dba31a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62c8b21d48ab6012ddc50529a39071d902dba31a/comments", "author": {"login": "cltang", "id": 4055966, "node_id": "MDQ6VXNlcjQwNTU5NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/4055966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cltang", "html_url": "https://github.com/cltang", "followers_url": "https://api.github.com/users/cltang/followers", "following_url": "https://api.github.com/users/cltang/following{/other_user}", "gists_url": "https://api.github.com/users/cltang/gists{/gist_id}", "starred_url": "https://api.github.com/users/cltang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cltang/subscriptions", "organizations_url": "https://api.github.com/users/cltang/orgs", "repos_url": "https://api.github.com/users/cltang/repos", "events_url": "https://api.github.com/users/cltang/events{/privacy}", "received_events_url": "https://api.github.com/users/cltang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cltang", "id": 4055966, "node_id": "MDQ6VXNlcjQwNTU5NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/4055966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cltang", "html_url": "https://github.com/cltang", "followers_url": "https://api.github.com/users/cltang/followers", "following_url": "https://api.github.com/users/cltang/following{/other_user}", "gists_url": "https://api.github.com/users/cltang/gists{/gist_id}", "starred_url": "https://api.github.com/users/cltang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cltang/subscriptions", "organizations_url": "https://api.github.com/users/cltang/orgs", "repos_url": "https://api.github.com/users/cltang/repos", "events_url": "https://api.github.com/users/cltang/events{/privacy}", "received_events_url": "https://api.github.com/users/cltang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05da96886efa3ccdcc0e4e337ecd01b2827db213", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05da96886efa3ccdcc0e4e337ecd01b2827db213", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05da96886efa3ccdcc0e4e337ecd01b2827db213"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "d1b27d7f46f4968f85bd252c2de0dd4fd4b54c75", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62c8b21d48ab6012ddc50529a39071d902dba31a/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62c8b21d48ab6012ddc50529a39071d902dba31a/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=62c8b21d48ab6012ddc50529a39071d902dba31a", "patch": "@@ -8123,7 +8123,7 @@ gimplify_omp_affinity (tree *list_p, gimple_seq *pre_p)\n \t    if (error_operand_p (OMP_CLAUSE_DECL (c)))\n \t      return;\n \t    if (gimplify_expr (&OMP_CLAUSE_DECL (c), pre_p, NULL,\n-\t\t\t       is_gimple_val, fb_rvalue) == GS_ERROR)\n+\t\t\t       is_gimple_lvalue, fb_lvalue) == GS_ERROR)\n \t      return;\n \t    gimplify_and_add (OMP_CLAUSE_DECL (c), pre_p);\n \t  }"}, {"sha": "3b409f5f858407cd2f525b561ee2f6f9a193674d", "filename": "gcc/testsuite/gfortran.dg/gomp/pr103643.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62c8b21d48ab6012ddc50529a39071d902dba31a/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr103643.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62c8b21d48ab6012ddc50529a39071d902dba31a/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr103643.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr103643.f90?ref=62c8b21d48ab6012ddc50529a39071d902dba31a", "patch": "@@ -0,0 +1,19 @@\n+! PR middle-end/103643\n+! { dg-do compile }\n+\n+program test_task_affinity\n+  implicit none\n+  integer i\n+  integer, allocatable :: A(:)\n+\n+  allocate (A(10))\n+\n+  !$omp target\n+  !$omp task affinity(A)\n+  do i = 1, 10\n+     A(i) = 0\n+  end do\n+  !$omp end task\n+  !$omp end target\n+\n+end program test_task_affinity"}]}