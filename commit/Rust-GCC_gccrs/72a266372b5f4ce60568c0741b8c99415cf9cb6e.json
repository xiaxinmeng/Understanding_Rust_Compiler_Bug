{"sha": "72a266372b5f4ce60568c0741b8c99415cf9cb6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJhMjY2MzcyYjVmNGNlNjA1NjhjMDc0MWI4Yzk5NDE1Y2Y5Y2I2ZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-08T10:11:07Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-08T10:11:07Z"}, "message": "[multiple changes]\n\n2017-09-08  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_intr.adb (Append_Entity_Name): Move to ...\n\t* sem_util.ads, sem_util.adb: ... here to share it.\n\t(Subprogram_Name): New subprogram, to compute the name of the enclosing\n\tsubprogram/entity.\n\t* errutil.adb (Error_Msg): Fill new field Node.\n\t* erroutc.ads (Subprogram_Name_Ptr): New.\n\t(Error_Msg_Object): New field Node.\n\t* erroutc.adb (dmsg, Output_Msg_Text): Take new field Node into account.\n\t* errout.adb (Error_Msg): New variant with node id parameter.\n\tFill new parameter Node when emitting messages. Revert previous\n\tchanges for Include_Subprogram_In_Messages.\n\t* sem_ch5.adb (Check_Unreachable_Code): Supply Node parameter when\n\tgenerating warning message.\n\n2017-09-08  Ed Schonberg  <schonberg@adacore.com>\n\n\t* par-ch4.adb (P_Iterated_Component_Association): Place construct\n\tunder -gnat2020 flag, given that it is a future feature of\n\tthe language.\n\t* sem_aggr.adb (Resolve_Iterated_Component_Association): Mark\n\tdefining identifier as referenced to prevent spurious warnings:\n\tcorresponding loop is expanded into one or more loops whose\n\tvariable has the same name, and the expression uses those names\n\tand not the original one.\n\nFrom-SVN: r251883", "tree": {"sha": "8e1841fc53228fa10a28187f264d68109d26a652", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e1841fc53228fa10a28187f264d68109d26a652"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72a266372b5f4ce60568c0741b8c99415cf9cb6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72a266372b5f4ce60568c0741b8c99415cf9cb6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72a266372b5f4ce60568c0741b8c99415cf9cb6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72a266372b5f4ce60568c0741b8c99415cf9cb6e/comments", "author": null, "committer": null, "parents": [{"sha": "db174c984559f8cc7f132a2aaae32b123051a38e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db174c984559f8cc7f132a2aaae32b123051a38e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db174c984559f8cc7f132a2aaae32b123051a38e"}], "stats": {"total": 615, "additions": 372, "deletions": 243}, "files": [{"sha": "7c9adb795f3e9f8d8156058973f8373260fe4588", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72a266372b5f4ce60568c0741b8c99415cf9cb6e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72a266372b5f4ce60568c0741b8c99415cf9cb6e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=72a266372b5f4ce60568c0741b8c99415cf9cb6e", "patch": "@@ -1,3 +1,30 @@\n+2017-09-08  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_intr.adb (Append_Entity_Name): Move to ...\n+\t* sem_util.ads, sem_util.adb: ... here to share it.\n+\t(Subprogram_Name): New subprogram, to compute the name of the enclosing\n+\tsubprogram/entity.\n+\t* errutil.adb (Error_Msg): Fill new field Node.\n+\t* erroutc.ads (Subprogram_Name_Ptr): New.\n+\t(Error_Msg_Object): New field Node.\n+\t* erroutc.adb (dmsg, Output_Msg_Text): Take new field Node into account.\n+\t* errout.adb (Error_Msg): New variant with node id parameter.\n+\tFill new parameter Node when emitting messages. Revert previous\n+\tchanges for Include_Subprogram_In_Messages.\n+\t* sem_ch5.adb (Check_Unreachable_Code): Supply Node parameter when\n+\tgenerating warning message.\n+\n+2017-09-08  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* par-ch4.adb (P_Iterated_Component_Association): Place construct\n+\tunder -gnat2020 flag, given that it is a future feature of\n+\tthe language.\n+\t* sem_aggr.adb (Resolve_Iterated_Component_Association): Mark\n+\tdefining identifier as referenced to prevent spurious warnings:\n+\tcorresponding loop is expanded into one or more loops whose\n+\tvariable has the same name, and the expression uses those names\n+\tand not the original one.\n+\n 2017-09-08  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_elab.adb (Check_A_Call): Do not consider"}, {"sha": "ce99fd842d040b1d778fbd7eff40ebf4db957639", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 66, "deletions": 52, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72a266372b5f4ce60568c0741b8c99415cf9cb6e/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72a266372b5f4ce60568c0741b8c99415cf9cb6e/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=72a266372b5f4ce60568c0741b8c99415cf9cb6e", "patch": "@@ -100,7 +100,8 @@ package body Errout is\n      (Msg      : String;\n       Sptr     : Source_Ptr;\n       Optr     : Source_Ptr;\n-      Msg_Cont : Boolean);\n+      Msg_Cont : Boolean;\n+      Node     : Node_Id);\n    --  This is the low level routine used to post messages after dealing with\n    --  the issue of messages placed on instantiations (which get broken up\n    --  into separate calls in Error_Msg). Sptr is the location on which the\n@@ -111,7 +112,9 @@ package body Errout is\n    --  copy. So typically we can see Optr pointing to the template location\n    --  in an instantiation copy when Sptr points to the source location of\n    --  the actual instantiation (i.e the line with the new). Msg_Cont is\n-   --  set true if this is a continuation message.\n+   --  set true if this is a continuation message. Node is the relevant\n+   --  Node_Id for this message, to be used to compute the enclosing entity if\n+   --  Opt.Include_Subprogram_In_Messages is set.\n \n    function No_Warnings (N : Node_Or_Entity_Id) return Boolean;\n    --  Determines if warnings should be suppressed for the given node\n@@ -303,15 +306,22 @@ package body Errout is\n    --  referencing the generic declaration.\n \n    procedure Error_Msg (Msg : String; Flag_Location : Source_Ptr) is\n+   begin\n+      Error_Msg (Msg, Flag_Location, Empty);\n+   end Error_Msg;\n+\n+   procedure Error_Msg\n+     (Msg           : String;\n+      Flag_Location : Source_Ptr;\n+      N             : Node_Id)\n+   is\n       Sindex : Source_File_Index;\n       --  Source index for flag location\n \n       Orig_Loc : Source_Ptr;\n       --  Original location of Flag_Location (i.e. location in original\n       --  template in instantiation case, otherwise unchanged).\n \n-      Entity : Bounded_String;\n-\n    begin\n       --  Return if all errors are to be ignored\n \n@@ -338,18 +348,6 @@ package body Errout is\n       Prescan_Message (Msg);\n       Orig_Loc := Original_Location (Flag_Location);\n \n-      if Include_Subprogram_In_Messages then\n-         declare\n-            Ent : constant Entity_Id := Current_Subprogram_Ptr.all;\n-         begin\n-            if Present (Ent) then\n-               Append_Unqualified_Decoded (Entity, Chars (Ent));\n-            else\n-               Append (Entity, \"unknown subprogram\");\n-            end if;\n-         end;\n-      end if;\n-\n       --  If the current location is in an instantiation, the issue arises of\n       --  whether to post the message on the template or the instantiation.\n \n@@ -419,14 +417,7 @@ package body Errout is\n       --  Error_Msg_Internal to place the message in the requested location.\n \n       if Instantiation (Sindex) = No_Location then\n-         if Include_Subprogram_In_Messages then\n-            Append (Entity, \": \");\n-            Append (Entity, Msg);\n-            Error_Msg_Internal (+Entity, Flag_Location, Flag_Location, False);\n-         else\n-            Error_Msg_Internal (Msg, Flag_Location, Flag_Location, False);\n-         end if;\n-\n+         Error_Msg_Internal (Msg, Flag_Location, Flag_Location, False, N);\n          return;\n       end if;\n \n@@ -521,47 +512,71 @@ package body Errout is\n                if Inlined_Body (X) then\n                   if Is_Info_Msg then\n                      Error_Msg_Internal\n-                       (\"info: in inlined body #\",\n-                        Actual_Error_Loc, Flag_Location, Msg_Cont_Status);\n+                       (Msg      => \"info: in inlined body #\",\n+                        Sptr     => Actual_Error_Loc,\n+                        Optr     => Flag_Location,\n+                        Msg_Cont => Msg_Cont_Status,\n+                        Node     => N);\n \n                   elsif Is_Warning_Msg then\n                      Error_Msg_Internal\n-                       (Warn_Insertion & \"in inlined body #\",\n-                        Actual_Error_Loc, Flag_Location, Msg_Cont_Status);\n+                       (Msg      => Warn_Insertion & \"in inlined body #\",\n+                        Sptr     => Actual_Error_Loc,\n+                        Optr     => Flag_Location,\n+                        Msg_Cont => Msg_Cont_Status,\n+                        Node     => N);\n \n                   elsif Is_Style_Msg then\n                      Error_Msg_Internal\n-                       (\"style: in inlined body #\",\n-                        Actual_Error_Loc, Flag_Location, Msg_Cont_Status);\n+                       (Msg      => \"style: in inlined body #\",\n+                        Sptr     => Actual_Error_Loc,\n+                        Optr     => Flag_Location,\n+                        Msg_Cont => Msg_Cont_Status,\n+                        Node     => N);\n \n                   else\n                      Error_Msg_Internal\n-                       (\"error in inlined body #\",\n-                        Actual_Error_Loc, Flag_Location, Msg_Cont_Status);\n+                       (Msg      => \"error in inlined body #\",\n+                        Sptr     => Actual_Error_Loc,\n+                        Optr     => Flag_Location,\n+                        Msg_Cont => Msg_Cont_Status,\n+                        Node     => N);\n                   end if;\n \n                --  Case of generic instantiation\n \n                else\n                   if Is_Info_Msg then\n                      Error_Msg_Internal\n-                       (\"info: in instantiation #\",\n-                        Actual_Error_Loc, Flag_Location, Msg_Cont_Status);\n+                       (Msg      => \"info: in instantiation #\",\n+                        Sptr     => Actual_Error_Loc,\n+                        Optr     => Flag_Location,\n+                        Msg_Cont => Msg_Cont_Status,\n+                        Node     => N);\n \n                   elsif Is_Warning_Msg then\n                      Error_Msg_Internal\n-                       (Warn_Insertion & \"in instantiation #\",\n-                        Actual_Error_Loc, Flag_Location, Msg_Cont_Status);\n+                       (Msg      => Warn_Insertion & \"in instantiation #\",\n+                        Sptr     => Actual_Error_Loc,\n+                        Optr     => Flag_Location,\n+                        Msg_Cont => Msg_Cont_Status,\n+                        Node     => N);\n \n                   elsif Is_Style_Msg then\n                      Error_Msg_Internal\n-                       (\"style: in instantiation #\",\n-                        Actual_Error_Loc, Flag_Location, Msg_Cont_Status);\n+                       (Msg      => \"style: in instantiation #\",\n+                        Sptr     => Actual_Error_Loc,\n+                        Optr     => Flag_Location,\n+                        Msg_Cont => Msg_Cont_Status,\n+                        Node     => N);\n \n                   else\n                      Error_Msg_Internal\n-                       (\"instantiation error #\",\n-                        Actual_Error_Loc, Flag_Location, Msg_Cont_Status);\n+                       (Msg      => \"instantiation error #\",\n+                        Sptr     => Actual_Error_Loc,\n+                        Optr     => Flag_Location,\n+                        Msg_Cont => Msg_Cont_Status,\n+                        Node     => N);\n                   end if;\n                end if;\n             end if;\n@@ -576,15 +591,12 @@ package body Errout is\n \n          --  Here we output the original message on the outer instantiation\n \n-         if Include_Subprogram_In_Messages then\n-            Append (Entity, \": \");\n-            Append (Entity, Msg);\n-            Error_Msg_Internal\n-              (+Entity, Actual_Error_Loc, Flag_Location, Msg_Cont_Status);\n-         else\n-            Error_Msg_Internal\n-              (Msg, Actual_Error_Loc, Flag_Location, Msg_Cont_Status);\n-         end if;\n+         Error_Msg_Internal\n+           (Msg      => Msg,\n+            Sptr     => Actual_Error_Loc,\n+            Optr     => Flag_Location,\n+            Msg_Cont => Msg_Cont_Status,\n+            Node     => N);\n       end;\n    end Error_Msg;\n \n@@ -798,7 +810,8 @@ package body Errout is\n      (Msg      : String;\n       Sptr     : Source_Ptr;\n       Optr     : Source_Ptr;\n-      Msg_Cont : Boolean)\n+      Msg_Cont : Boolean;\n+      Node     : Node_Id)\n    is\n       Next_Msg : Error_Msg_Id;\n       --  Pointer to next message at insertion point\n@@ -1080,7 +1093,8 @@ package body Errout is\n           Serious  => Is_Serious_Error,\n           Uncond   => Is_Unconditional_Msg,\n           Msg_Cont => Continuation,\n-          Deleted  => False));\n+          Deleted  => False,\n+          Node     => Node));\n       Cur_Msg := Errors.Last;\n \n       --  Test if warning to be treated as error\n@@ -1369,7 +1383,7 @@ package body Errout is\n       then\n          Debug_Output (N);\n          Error_Msg_Node_1 := E;\n-         Error_Msg (Msg, Flag_Location);\n+         Error_Msg (Msg, Flag_Location, N);\n \n       else\n          Last_Killed := True;"}, {"sha": "e9c4eb47f7f5bf401f44ee1aa3df60a75d08e8e7", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72a266372b5f4ce60568c0741b8c99415cf9cb6e/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72a266372b5f4ce60568c0741b8c99415cf9cb6e/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=72a266372b5f4ce60568c0741b8c99415cf9cb6e", "patch": "@@ -68,11 +68,6 @@ package Errout is\n    --  error message tag. The -gnatw.d switch sets this flag True, -gnatw.D\n    --  sets this flag False.\n \n-   type Current_Subprogram_Type is access function return Entity_Id;\n-   Current_Subprogram_Ptr : Current_Subprogram_Type := null;\n-   --  Indirect call to Sem_Util.Current_Subprogram to break circular\n-   --  dependency with the static elaboration model.\n-\n    -----------------------------------\n    -- Suppression of Error Messages --\n    -----------------------------------\n@@ -691,9 +686,13 @@ package Errout is\n    --  Output list of messages, including messages giving number of detected\n    --  errors and warnings.\n \n-   procedure Error_Msg (Msg : String; Flag_Location : Source_Ptr);\n+   procedure Error_Msg\n+     (Msg : String; Flag_Location : Source_Ptr);\n+   procedure Error_Msg\n+     (Msg : String; Flag_Location : Source_Ptr; N : Node_Id);\n    --  Output a message at specified location. Can be called from the parser\n-   --  or the semantic analyzer.\n+   --  or the semantic analyzer. If N is set, points to the relevant node for\n+   --  this message.\n \n    procedure Error_Msg_S (Msg : String);\n    --  Output a message at current scan pointer location. This routine can be"}, {"sha": "f81d337a0a789e42cb5499839149343d3851410a", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72a266372b5f4ce60568c0741b8c99415cf9cb6e/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72a266372b5f4ce60568c0741b8c99415cf9cb6e/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=72a266372b5f4ce60568c0741b8c99415cf9cb6e", "patch": "@@ -299,6 +299,7 @@ package body Erroutc is\n       w (\"  Uncond   = \", E.Uncond);\n       w (\"  Msg_Cont = \", E.Msg_Cont);\n       w (\"  Deleted  = \", E.Deleted);\n+      w (\"  Node     = \", Int (E.Node));\n \n       Write_Eol;\n    end dmsg;\n@@ -632,7 +633,22 @@ package body Erroutc is\n          --  Postfix warning tag to message if needed\n \n          if Tag /= \"\" and then Warning_Doc_Switch then\n-            Txt := new String'(Text.all & ' ' & Tag);\n+            if Include_Subprogram_In_Messages then\n+               Txt :=\n+                 new String'\n+                   (Subprogram_Name_Ptr (Errors.Table (E).Node) &\n+                    \": \" & Text.all & ' ' & Tag);\n+            else\n+               Txt := new String'(Text.all & ' ' & Tag);\n+            end if;\n+\n+         elsif Include_Subprogram_In_Messages\n+           and then (Errors.Table (E).Warn or else Errors.Table (E).Style)\n+         then\n+            Txt :=\n+              new String'\n+                (Subprogram_Name_Ptr (Errors.Table (E).Node) &\n+                 \": \" & Text.all);\n          else\n             Txt := Text;\n          end if;"}, {"sha": "a8fc4f99aa2a7e98050c963e0b8db8a67eddabaa", "filename": "gcc/ada/erroutc.ads", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72a266372b5f4ce60568c0741b8c99415cf9cb6e/gcc%2Fada%2Ferroutc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72a266372b5f4ce60568c0741b8c99415cf9cb6e/gcc%2Fada%2Ferroutc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.ads?ref=72a266372b5f4ce60568c0741b8c99415cf9cb6e", "patch": "@@ -132,6 +132,11 @@ package Erroutc is\n    --  output. This is used for internal processing for the case of an\n    --  illegal instantiation. See Error_Msg routine for further details.\n \n+   type Subprogram_Name_Type is access function (N : Node_Id) return String;\n+   Subprogram_Name_Ptr : Subprogram_Name_Type;\n+   --  Indirect call to Sem_Util.Subprogram_Name to break circular\n+   --  dependency with the static elaboration model.\n+\n    ----------------------------\n    -- Message ID Definitions --\n    ----------------------------\n@@ -251,6 +256,11 @@ package Erroutc is\n       Deleted : Boolean;\n       --  If this flag is set, the message is not printed. This is used\n       --  in the circuit for deleting duplicate/redundant error messages.\n+\n+      Node : Node_Id;\n+      --  If set, points to the node relevant for this message which will be\n+      --  used to compute the enclosing subprogram name if\n+      --  Opt.Include_Subprogram_In_Messages is set.\n    end record;\n \n    package Errors is new Table.Table ("}, {"sha": "ed7412a680ff8163945bb3f0839a9ffcf82c3571", "filename": "gcc/ada/errutil.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72a266372b5f4ce60568c0741b8c99415cf9cb6e/gcc%2Fada%2Ferrutil.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72a266372b5f4ce60568c0741b8c99415cf9cb6e/gcc%2Fada%2Ferrutil.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrutil.adb?ref=72a266372b5f4ce60568c0741b8c99415cf9cb6e", "patch": "@@ -220,7 +220,8 @@ package body Errutil is\n             Serious  => Is_Serious_Error,\n             Uncond   => Is_Unconditional_Msg,\n             Msg_Cont => Continuation,\n-            Deleted  => False));\n+            Deleted  => False,\n+            Node     => Empty));\n \n       Cur_Msg  := Errors.Last;\n       Prev_Msg := No_Error_Msg;"}, {"sha": "6719f2e6b6e6175582ff90d7569511ed49734edc", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72a266372b5f4ce60568c0741b8c99415cf9cb6e/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72a266372b5f4ce60568c0741b8c99415cf9cb6e/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=72a266372b5f4ce60568c0741b8c99415cf9cb6e", "patch": "@@ -1204,7 +1204,7 @@ package body Exp_Disp is\n \n    procedure Expand_Interface_Conversion (N : Node_Id) is\n       function Underlying_Record_Type (Typ : Entity_Id) return Entity_Id;\n-      --  Return the underlying record type of Typ.\n+      --  Return the underlying record type of Typ\n \n       ----------------------------\n       -- Underlying_Record_Type --"}, {"sha": "1d3a321604a2f0866e78b2683c30ae3349f768a7", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 1, "deletions": 100, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72a266372b5f4ce60568c0741b8c99415cf9cb6e/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72a266372b5f4ce60568c0741b8c99415cf9cb6e/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=72a266372b5f4ce60568c0741b8c99415cf9cb6e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -27,7 +27,6 @@ with Atree;    use Atree;\n with Checks;   use Checks;\n with Einfo;    use Einfo;\n with Elists;   use Elists;\n-with Errout;   use Errout;\n with Expander; use Expander;\n with Exp_Atag; use Exp_Atag;\n with Exp_Ch4;  use Exp_Ch4;\n@@ -111,12 +110,6 @@ package body Exp_Intr is\n    --  GNAT.Source_Info; see g-souinf.ads for documentation of these\n    --  intrinsics.\n \n-   procedure Append_Entity_Name (Buf : in out Bounded_String; E : Entity_Id);\n-   --  Recursive procedure to construct string for qualified name of enclosing\n-   --  program unit. The qualification stops at an enclosing scope has no\n-   --  source name (block or loop). If entity is a subprogram instance, skip\n-   --  enclosing wrapper package. The name is appended to Buf.\n-\n    ---------------------\n    -- Add_Source_Info --\n    ---------------------\n@@ -189,98 +182,6 @@ package body Exp_Intr is\n       end case;\n    end Add_Source_Info;\n \n-   -----------------------\n-   -- Append_Entity_Name --\n-   -----------------------\n-\n-   procedure Append_Entity_Name (Buf : in out Bounded_String; E : Entity_Id) is\n-      Temp : Bounded_String;\n-\n-      procedure Inner (E : Entity_Id);\n-      --  Inner recursive routine, keep outer routine nonrecursive to ease\n-      --  debugging when we get strange results from this routine.\n-\n-      -----------\n-      -- Inner --\n-      -----------\n-\n-      procedure Inner (E : Entity_Id) is\n-      begin\n-         --  If entity has an internal name, skip by it, and print its scope.\n-         --  Note that we strip a final R from the name before the test; this\n-         --  is needed for some cases of instantiations.\n-\n-         declare\n-            E_Name : Bounded_String;\n-\n-         begin\n-            Append (E_Name, Chars (E));\n-\n-            if E_Name.Chars (E_Name.Length) = 'R' then\n-               E_Name.Length := E_Name.Length - 1;\n-            end if;\n-\n-            if Is_Internal_Name (E_Name) then\n-               Inner (Scope (E));\n-               return;\n-            end if;\n-         end;\n-\n-         --  Just print entity name if its scope is at the outer level\n-\n-         if Scope (E) = Standard_Standard then\n-            null;\n-\n-         --  If scope comes from source, write scope and entity\n-\n-         elsif Comes_From_Source (Scope (E)) then\n-            Append_Entity_Name (Temp, Scope (E));\n-            Append (Temp, '.');\n-\n-         --  If in wrapper package skip past it\n-\n-         elsif Is_Wrapper_Package (Scope (E)) then\n-            Append_Entity_Name (Temp, Scope (Scope (E)));\n-            Append (Temp, '.');\n-\n-         --  Otherwise nothing to output (happens in unnamed block statements)\n-\n-         else\n-            null;\n-         end if;\n-\n-         --  Output the name\n-\n-         declare\n-            E_Name : Bounded_String;\n-\n-         begin\n-            Append_Unqualified_Decoded (E_Name, Chars (E));\n-\n-            --  Remove trailing upper-case letters from the name (useful for\n-            --  dealing with some cases of internal names generated in the case\n-            --  of references from within a generic).\n-\n-            while E_Name.Length > 1\n-              and then E_Name.Chars (E_Name.Length) in 'A' .. 'Z'\n-            loop\n-               E_Name.Length := E_Name.Length - 1;\n-            end loop;\n-\n-            --  Adjust casing appropriately (gets name from source if possible)\n-\n-            Adjust_Name_Case (E_Name, Sloc (E));\n-            Append (Temp, E_Name);\n-         end;\n-      end Inner;\n-\n-   --  Start of processing for Append_Entity_Name\n-\n-   begin\n-      Inner (E);\n-      Append (Buf, Temp);\n-   end Append_Entity_Name;\n-\n    ---------------------------------\n    -- Expand_Binary_Operator_Call --\n    ---------------------------------"}, {"sha": "57f60cd90ebc2ff2d214e33bdb1f6da28bfa272b", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72a266372b5f4ce60568c0741b8c99415cf9cb6e/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72a266372b5f4ce60568c0741b8c99415cf9cb6e/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=72a266372b5f4ce60568c0741b8c99415cf9cb6e", "patch": "@@ -338,17 +338,22 @@ package body Exp_Prag is\n       ------------------------------------------\n \n       procedure Replace_Discriminals_Of_Protected_Op (Expr : Node_Id) is\n-         function Find_Corresponding_Discriminal (E : Entity_Id)\n-           return Entity_Id;\n-         --  Find the local entity that renames a discriminant of the\n-         --  enclosing protected type, and has a matching name.\n+         function Find_Corresponding_Discriminal\n+           (E : Entity_Id) return Entity_Id;\n+         --  Find the local entity that renames a discriminant of the enclosing\n+         --  protected type, and has a matching name.\n+\n+         function Replace_Discr_Ref (N : Node_Id) return Traverse_Result;\n+         --  Replace a reference to a discriminant of the original protected\n+         --  type by the local renaming declaration of the discriminant of\n+         --  the target object.\n \n          ------------------------------------\n-         -- find_Corresponding_Discriminal --\n+         -- Find_Corresponding_Discriminal --\n          ------------------------------------\n \n-         function Find_Corresponding_Discriminal (E : Entity_Id)\n-           return Entity_Id\n+         function Find_Corresponding_Discriminal\n+           (E : Entity_Id) return Entity_Id\n          is\n             R : Entity_Id;\n \n@@ -369,35 +374,35 @@ package body Exp_Prag is\n             return Empty;\n          end Find_Corresponding_Discriminal;\n \n-         function  Replace_Discr_Ref (N : Node_Id) return Traverse_Result;\n-         --  Replace a reference to a discriminant of the original protected\n-         --  type by the local renaming declaration of the discriminant of\n-         --  the target object.\n-\n          -----------------------\n          -- Replace_Discr_Ref --\n          -----------------------\n \n-         function  Replace_Discr_Ref (N : Node_Id) return Traverse_Result is\n+         function Replace_Discr_Ref (N : Node_Id) return Traverse_Result is\n             R : Entity_Id;\n \n          begin\n             if Is_Entity_Name (N)\n-               and then Present (Discriminal_Link (Entity (N)))\n+              and then Present (Discriminal_Link (Entity (N)))\n             then\n                R := Find_Corresponding_Discriminal (Entity (N));\n                Rewrite (N, New_Occurrence_Of (R, Sloc (N)));\n             end if;\n+\n             return OK;\n          end Replace_Discr_Ref;\n \n          procedure Replace_Discriminant_References is\n            new Traverse_Proc (Replace_Discr_Ref);\n \n+      --  Start of processing for Replace_Discriminals_Of_Protected_Op\n+\n       begin\n          Replace_Discriminant_References (Expr);\n       end Replace_Discriminals_Of_Protected_Op;\n \n+   --  Start of processing for Expand_Pragma_Check\n+\n    begin\n       --  Nothing to do if pragma is ignored\n "}, {"sha": "fd0373e420eca5684c43227c615387ef57efec8c", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72a266372b5f4ce60568c0741b8c99415cf9cb6e/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72a266372b5f4ce60568c0741b8c99415cf9cb6e/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=72a266372b5f4ce60568c0741b8c99415cf9cb6e", "patch": "@@ -3317,6 +3317,12 @@ package body Ch4 is\n       Set_Discrete_Choices (Assoc_Node, P_Discrete_Choice_List);\n       TF_Arrow;\n       Set_Expression (Assoc_Node, P_Expression);\n+\n+      if Ada_Version < Ada_2020 then\n+         Error_Msg_SC (\"Iterated component  is an Ada 2020 extension\");\n+         Error_Msg_SC (\"\\compile with -gnatX\");\n+      end if;\n+\n       return Assoc_Node;\n    end P_Iterated_Component_Association;\n "}, {"sha": "7a37bdd02e5471e2c1959ba1678bfd4f25d8ccdd", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72a266372b5f4ce60568c0741b8c99415cf9cb6e/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72a266372b5f4ce60568c0741b8c99415cf9cb6e/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=72a266372b5f4ce60568c0741b8c99415cf9cb6e", "patch": "@@ -1694,13 +1694,16 @@ package body Sem_Aggr is\n          --  may have several choices, each one leading to a loop, so we create\n          --  this variable only once to prevent homonyms in this scope.\n          --  The expression has to be analyzed once the index variable is\n-         --  directly visible.\n+         --  directly visible. Mark the variable as referenced to prevent\n+         --  spurious warnings, given that subsequent uses of its name in the\n+         --  expression will reference the internal (synonym) loop variable.\n \n          if No (Scope (Id)) then\n             Enter_Name (Id);\n             Set_Etype (Id, Index_Typ);\n             Set_Ekind (Id, E_Variable);\n             Set_Scope (Id, Ent);\n+            Set_Referenced (Id);\n          end if;\n \n          Push_Scope (Ent);"}, {"sha": "135ecd82a6b7ba225936dd53e367dd08abcd19cf", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72a266372b5f4ce60568c0741b8c99415cf9cb6e/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72a266372b5f4ce60568c0741b8c99415cf9cb6e/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=72a266372b5f4ce60568c0741b8c99415cf9cb6e", "patch": "@@ -3745,7 +3745,8 @@ package body Sem_Ch5 is\n                      Check_SPARK_05_Restriction\n                        (\"unreachable code is not allowed\", Error_Node);\n                   else\n-                     Error_Msg (\"??unreachable code!\", Sloc (Error_Node));\n+                     Error_Msg\n+                       (\"??unreachable code!\", Sloc (Error_Node), Error_Node);\n                   end if;\n                end if;\n "}, {"sha": "3c6f36331fd2667551e56612a15d1b84f6ec35e6", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72a266372b5f4ce60568c0741b8c99415cf9cb6e/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72a266372b5f4ce60568c0741b8c99415cf9cb6e/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=72a266372b5f4ce60568c0741b8c99415cf9cb6e", "patch": "@@ -343,7 +343,6 @@ package body Sem_Ch6 is\n          ----------------------\n \n          function Freeze_Type_Refs (Node : Node_Id) return Traverse_Result is\n-\n             procedure Check_And_Freeze_Type (Typ : Entity_Id);\n             --  Check that Typ is fully declared and freeze it if so\n \n@@ -371,8 +370,7 @@ package body Sem_Ch6 is\n                   if Has_Private_Component (Typ)\n                     and then not Is_Private_Type (Typ)\n                   then\n-                     Error_Msg_NE\n-                       (\"\\type& has private component\", Node, Typ);\n+                     Error_Msg_NE (\"\\type& has private component\", Node, Typ);\n                   end if;\n \n                else"}, {"sha": "b013755a88e6f7aa2b995db7044aa565be9f8478", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 60, "deletions": 59, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72a266372b5f4ce60568c0741b8c99415cf9cb6e/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72a266372b5f4ce60568c0741b8c99415cf9cb6e/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=72a266372b5f4ce60568c0741b8c99415cf9cb6e", "patch": "@@ -29,65 +29,66 @@\n --  to complete the syntax checks. Certain pragmas are handled partially or\n --  completely by the parser (see Par.Prag for further details).\n \n-with Aspects;          use Aspects;\n-with Atree;            use Atree;\n-with Casing;           use Casing;\n-with Checks;           use Checks;\n-with Contracts;        use Contracts;\n-with Csets;            use Csets;\n-with Debug;            use Debug;\n-with Einfo;            use Einfo;\n-with Elists;           use Elists;\n-with Errout;           use Errout;\n-with Exp_Dist;         use Exp_Dist;\n-with Exp_Util;         use Exp_Util;\n-with Freeze;           use Freeze;\n-with Ghost;            use Ghost;\n-with Gnatvsn;          use Gnatvsn;\n-with Lib;              use Lib;\n-with Lib.Writ;         use Lib.Writ;\n-with Lib.Xref;         use Lib.Xref;\n-with Namet.Sp;         use Namet.Sp;\n-with Nlists;           use Nlists;\n-with Nmake;            use Nmake;\n-with Output;           use Output;\n-with Par_SCO;          use Par_SCO;\n-with Restrict;         use Restrict;\n-with Rident;           use Rident;\n-with Rtsfind;          use Rtsfind;\n-with Sem;              use Sem;\n-with Sem_Aux;          use Sem_Aux;\n-with Sem_Ch3;          use Sem_Ch3;\n-with Sem_Ch6;          use Sem_Ch6;\n-with Sem_Ch8;          use Sem_Ch8;\n-with Sem_Ch12;         use Sem_Ch12;\n-with Sem_Ch13;         use Sem_Ch13;\n-with Sem_Disp;         use Sem_Disp;\n-with Sem_Dist;         use Sem_Dist;\n-with Sem_Elim;         use Sem_Elim;\n-with Sem_Eval;         use Sem_Eval;\n-with Sem_Intr;         use Sem_Intr;\n-with Sem_Mech;         use Sem_Mech;\n-with Sem_Res;          use Sem_Res;\n-with Sem_Type;         use Sem_Type;\n-with Sem_Util;         use Sem_Util;\n-with Sem_Warn;         use Sem_Warn;\n-with Stand;            use Stand;\n-with Sinfo;            use Sinfo;\n-with Sinfo.CN;         use Sinfo.CN;\n-with Sinput;           use Sinput;\n-with Stringt;          use Stringt;\n-with Stylesw;          use Stylesw;\n-with System.Case_Util;\n+with Aspects;   use Aspects;\n+with Atree;     use Atree;\n+with Casing;    use Casing;\n+with Checks;    use Checks;\n+with Contracts; use Contracts;\n+with Csets;     use Csets;\n+with Debug;     use Debug;\n+with Einfo;     use Einfo;\n+with Elists;    use Elists;\n+with Errout;    use Errout;\n+with Exp_Dist;  use Exp_Dist;\n+with Exp_Util;  use Exp_Util;\n+with Freeze;    use Freeze;\n+with Ghost;     use Ghost;\n+with Gnatvsn;   use Gnatvsn;\n+with Lib;       use Lib;\n+with Lib.Writ;  use Lib.Writ;\n+with Lib.Xref;  use Lib.Xref;\n+with Namet.Sp;  use Namet.Sp;\n+with Nlists;    use Nlists;\n+with Nmake;     use Nmake;\n+with Output;    use Output;\n+with Par_SCO;   use Par_SCO;\n+with Restrict;  use Restrict;\n+with Rident;    use Rident;\n+with Rtsfind;   use Rtsfind;\n+with Sem;       use Sem;\n+with Sem_Aux;   use Sem_Aux;\n+with Sem_Ch3;   use Sem_Ch3;\n+with Sem_Ch6;   use Sem_Ch6;\n+with Sem_Ch8;   use Sem_Ch8;\n+with Sem_Ch12;  use Sem_Ch12;\n+with Sem_Ch13;  use Sem_Ch13;\n+with Sem_Disp;  use Sem_Disp;\n+with Sem_Dist;  use Sem_Dist;\n+with Sem_Elim;  use Sem_Elim;\n+with Sem_Eval;  use Sem_Eval;\n+with Sem_Intr;  use Sem_Intr;\n+with Sem_Mech;  use Sem_Mech;\n+with Sem_Res;   use Sem_Res;\n+with Sem_Type;  use Sem_Type;\n+with Sem_Util;  use Sem_Util;\n+with Sem_Warn;  use Sem_Warn;\n+with Stand;     use Stand;\n+with Sinfo;     use Sinfo;\n+with Sinfo.CN;  use Sinfo.CN;\n+with Sinput;    use Sinput;\n+with Stringt;   use Stringt;\n+with Stylesw;   use Stylesw;\n with Table;\n-with Targparm;         use Targparm;\n-with Tbuild;           use Tbuild;\n+with Targparm;  use Targparm;\n+with Tbuild;    use Tbuild;\n with Ttypes;\n-with Uintp;            use Uintp;\n-with Uname;            use Uname;\n-with Urealp;           use Urealp;\n-with Validsw;          use Validsw;\n-with Warnsw;           use Warnsw;\n+with Uintp;     use Uintp;\n+with Uname;     use Uname;\n+with Urealp;    use Urealp;\n+with Validsw;   use Validsw;\n+with Warnsw;    use Warnsw;\n+\n+with System.Case_Util;\n \n package body Sem_Prag is\n \n@@ -17924,8 +17925,8 @@ package body Sem_Prag is\n                                                   Name_Increases)\n                then\n                   declare\n-                     Name : String :=\n-                              Get_Name_String (Chars (Variant));\n+                     Name : String := Get_Name_String (Chars (Variant));\n+\n                   begin\n                      --  It is a common mistake to write \"Increasing\" for\n                      --  \"Increases\" or \"Decreasing\" for \"Decreases\". Recognize"}, {"sha": "5e74d20c093115f2553474afe22d285bf926ce53", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 143, "deletions": 2, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72a266372b5f4ce60568c0741b8c99415cf9cb6e/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72a266372b5f4ce60568c0741b8c99415cf9cb6e/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=72a266372b5f4ce60568c0741b8c99415cf9cb6e", "patch": "@@ -32,6 +32,7 @@ with Checks;   use Checks;\n with Debug;    use Debug;\n with Elists;   use Elists;\n with Errout;   use Errout;\n+with Erroutc;  use Erroutc;\n with Exp_Ch11; use Exp_Ch11;\n with Exp_Disp; use Exp_Disp;\n with Exp_Util; use Exp_Util;\n@@ -137,6 +138,10 @@ package body Sem_Util is\n    --  becomes Requires_Transient_Scope and Old_Requires_Transient_Scope is\n    --  eliminated.\n \n+   function Subprogram_Name (N : Node_Id) return String;\n+   --  Return the fully qualified name of the enclosing subprogram for the\n+   --  given node N.\n+\n    ------------------------------\n    --  Abstract_Interface_List --\n    ------------------------------\n@@ -572,6 +577,98 @@ package body Sem_Util is\n       end case;\n    end All_Composite_Constraints_Static;\n \n+   ------------------------\n+   -- Append_Entity_Name --\n+   ------------------------\n+\n+   procedure Append_Entity_Name (Buf : in out Bounded_String; E : Entity_Id) is\n+      Temp : Bounded_String;\n+\n+      procedure Inner (E : Entity_Id);\n+      --  Inner recursive routine, keep outer routine nonrecursive to ease\n+      --  debugging when we get strange results from this routine.\n+\n+      -----------\n+      -- Inner --\n+      -----------\n+\n+      procedure Inner (E : Entity_Id) is\n+      begin\n+         --  If entity has an internal name, skip by it, and print its scope.\n+         --  Note that we strip a final R from the name before the test; this\n+         --  is needed for some cases of instantiations.\n+\n+         declare\n+            E_Name : Bounded_String;\n+\n+         begin\n+            Append (E_Name, Chars (E));\n+\n+            if E_Name.Chars (E_Name.Length) = 'R' then\n+               E_Name.Length := E_Name.Length - 1;\n+            end if;\n+\n+            if Is_Internal_Name (E_Name) then\n+               Inner (Scope (E));\n+               return;\n+            end if;\n+         end;\n+\n+         --  Just print entity name if its scope is at the outer level\n+\n+         if Scope (E) = Standard_Standard then\n+            null;\n+\n+         --  If scope comes from source, write scope and entity\n+\n+         elsif Comes_From_Source (Scope (E)) then\n+            Append_Entity_Name (Temp, Scope (E));\n+            Append (Temp, '.');\n+\n+         --  If in wrapper package skip past it\n+\n+         elsif Is_Wrapper_Package (Scope (E)) then\n+            Append_Entity_Name (Temp, Scope (Scope (E)));\n+            Append (Temp, '.');\n+\n+         --  Otherwise nothing to output (happens in unnamed block statements)\n+\n+         else\n+            null;\n+         end if;\n+\n+         --  Output the name\n+\n+         declare\n+            E_Name : Bounded_String;\n+\n+         begin\n+            Append_Unqualified_Decoded (E_Name, Chars (E));\n+\n+            --  Remove trailing upper-case letters from the name (useful for\n+            --  dealing with some cases of internal names generated in the case\n+            --  of references from within a generic).\n+\n+            while E_Name.Length > 1\n+              and then E_Name.Chars (E_Name.Length) in 'A' .. 'Z'\n+            loop\n+               E_Name.Length := E_Name.Length - 1;\n+            end loop;\n+\n+            --  Adjust casing appropriately (gets name from source if possible)\n+\n+            Adjust_Name_Case (E_Name, Sloc (E));\n+            Append (Temp, E_Name);\n+         end;\n+      end Inner;\n+\n+   --  Start of processing for Append_Entity_Name\n+\n+   begin\n+      Inner (E);\n+      Append (Buf, Temp);\n+   end Append_Entity_Name;\n+\n    ---------------------------------\n    -- Append_Inherited_Subprogram --\n    ---------------------------------\n@@ -21663,11 +21760,12 @@ package body Sem_Util is\n    -- Set_Rep_Info --\n    ------------------\n \n-   procedure Set_Rep_Info (T1, T2 : Entity_Id) is\n+   procedure Set_Rep_Info (T1 : Entity_Id; T2 : Entity_Id) is\n    begin\n       Set_Is_Atomic               (T1, Is_Atomic (T2));\n       Set_Is_Independent          (T1, Is_Independent (T2));\n       Set_Is_Volatile_Full_Access (T1, Is_Volatile_Full_Access (T2));\n+\n       if Is_Base_Type (T1) then\n          Set_Is_Volatile          (T1, Is_Volatile (T2));\n       end if;\n@@ -21855,6 +21953,49 @@ package body Sem_Util is\n       end if;\n    end Subprogram_Access_Level;\n \n+   ---------------------\n+   -- Subprogram_Name --\n+   ---------------------\n+\n+   function Subprogram_Name (N : Node_Id) return String is\n+      Buf : Bounded_String;\n+      Ent : Node_Id := N;\n+\n+   begin\n+      while Present (Ent) loop\n+         case Nkind (Ent) is\n+            when N_Subprogram_Body =>\n+               Ent := Defining_Unit_Name (Specification (Ent));\n+               exit;\n+\n+            when N_Package_Body\n+               | N_Package_Specification\n+               | N_Subprogram_Specification\n+            =>\n+               Ent := Defining_Unit_Name (Ent);\n+               exit;\n+\n+            when N_Protected_Body\n+               | N_Protected_Type_Declaration\n+               | N_Task_Body\n+            =>\n+               exit;\n+\n+            when others =>\n+               null;\n+         end case;\n+\n+         Ent := Parent (Ent);\n+      end loop;\n+\n+      if No (Ent) then\n+         return \"unknown subprogram\";\n+      end if;\n+\n+      Append_Entity_Name (Buf, Ent);\n+      return +Buf;\n+   end Subprogram_Name;\n+\n    -------------------------------\n    -- Support_Atomic_Primitives --\n    -------------------------------\n@@ -23188,5 +23329,5 @@ package body Sem_Util is\n    end Yields_Universal_Type;\n \n begin\n-   Errout.Current_Subprogram_Ptr := Current_Subprogram'Access;\n+   Erroutc.Subprogram_Name_Ptr := Subprogram_Name'Access;\n end Sem_Util;"}, {"sha": "7279c639180601b352312affa7e6f04a764c0d0b", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72a266372b5f4ce60568c0741b8c99415cf9cb6e/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72a266372b5f4ce60568c0741b8c99415cf9cb6e/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=72a266372b5f4ce60568c0741b8c99415cf9cb6e", "patch": "@@ -105,6 +105,12 @@ package Sem_Util is\n    --  irrelevant. Also called for array aggregates, but only named notation,\n    --  because those are the only dynamic cases.\n \n+   procedure Append_Entity_Name (Buf : in out Bounded_String; E : Entity_Id);\n+   --  Recursive procedure to construct string for qualified name of enclosing\n+   --  program unit. The qualification stops at an enclosing scope has no\n+   --  source name (block or loop). If entity is a subprogram instance, skip\n+   --  enclosing wrapper package. The name is appended to Buf.\n+\n    procedure Append_Inherited_Subprogram (S : Entity_Id);\n    --  If the parent of the operation is declared in the visible part of\n    --  the current scope, the inherited operation is visible even though the\n@@ -2473,7 +2479,7 @@ package Sem_Util is\n    --  (Referenced_As_LHS if Out_Param is False, Referenced_As_Out_Parameter\n    --  if Out_Param is True) is set True, and the other flag set False.\n \n-   procedure Set_Rep_Info (T1, T2 : Entity_Id);\n+   procedure Set_Rep_Info (T1 : Entity_Id; T2 : Entity_Id);\n    pragma Inline (Set_Rep_Info);\n    --  Copies the Is_Atomic, Is_Independent and Is_Volatile_Full_Access flags\n    --  from sub(type) entity T2 to (sub)type entity T1, as well as Is_Volatile"}]}