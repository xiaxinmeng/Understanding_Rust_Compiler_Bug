{"sha": "8034da37ce34e442aa8e04f3f1618b70b00ed10e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODAzNGRhMzdjZTM0ZTQ0MmFhOGUwNGYzZjE2MThiNzBiMDBlZDEwZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@casey.cygnus.com", "date": "2000-03-23T12:14:06Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-03-23T12:14:06Z"}, "message": "rs6000.h (DWARF_FRAME_RETURN_COLUMN): Define.\n\n        * config/rs6000/rs6000.h (DWARF_FRAME_RETURN_COLUMN): Define.\n        * config/alpha/alpha.h (DWARF_FRAME_RETURN_COLUMN): Define.\n        * config/sparc/sparc.h (DWARF_FRAME_RETURN_COLUMN): Define.\n\n        * frame.h (frame_state): Revert last change.\n        * frame.c (execute_cfa_insn): Just don't record the save of a CFA reg.\n        * libgcc2.c (throw_helper): Revert last change.\n\nFrom-SVN: r32705", "tree": {"sha": "ecba39cb912485714b2d62f815fa864dbb79faf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecba39cb912485714b2d62f815fa864dbb79faf9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8034da37ce34e442aa8e04f3f1618b70b00ed10e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8034da37ce34e442aa8e04f3f1618b70b00ed10e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8034da37ce34e442aa8e04f3f1618b70b00ed10e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8034da37ce34e442aa8e04f3f1618b70b00ed10e/comments", "author": null, "committer": null, "parents": [{"sha": "e77a2b027dce64c01152a744a65f785108e53939", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e77a2b027dce64c01152a744a65f785108e53939", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e77a2b027dce64c01152a744a65f785108e53939"}], "stats": {"total": 56, "additions": 30, "deletions": 26}, "files": [{"sha": "7b35f67583bc642a271cfb6f9ebe3e5636f06c7d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8034da37ce34e442aa8e04f3f1618b70b00ed10e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8034da37ce34e442aa8e04f3f1618b70b00ed10e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8034da37ce34e442aa8e04f3f1618b70b00ed10e", "patch": "@@ -1,3 +1,13 @@\n+2000-03-22  Jason Merrill  <jason@casey.cygnus.com>\n+\n+\t* config/rs6000/rs6000.h (DWARF_FRAME_RETURN_COLUMN): Define.\n+\t* config/alpha/alpha.h (DWARF_FRAME_RETURN_COLUMN): Define.\n+\t* config/sparc/sparc.h (DWARF_FRAME_RETURN_COLUMN): Define.\n+\n+\t* frame.h (frame_state): Revert last change.\n+\t* frame.c (execute_cfa_insn): Just don't record the save of a CFA reg.\n+\t* libgcc2.c (throw_helper): Revert last change.\n+\t\n 2000-03-22  Richard Henderson  <rth@cygnus.com>\n \n \t* stmt.c (expand_asm_operands): Don't promote the temporary."}, {"sha": "4fadf8e55e5d37aa93d5b5d64daa4613ba08da08", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8034da37ce34e442aa8e04f3f1618b70b00ed10e/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8034da37ce34e442aa8e04f3f1618b70b00ed10e/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=8034da37ce34e442aa8e04f3f1618b70b00ed10e", "patch": "@@ -1328,6 +1328,7 @@ do {\t\t\t\t\t\t\\\n \n /* Before the prologue, RA lives in $26. */\n #define INCOMING_RETURN_ADDR_RTX  gen_rtx_REG (Pmode, 26)\n+#define DWARF_FRAME_RETURN_COLUMN DWARF_FRAME_REGNUM (26)\n \f\n /* Addressing modes, and classification of registers for them.  */\n "}, {"sha": "9d3babde256c297f7abe430534e874175ce0525f", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8034da37ce34e442aa8e04f3f1618b70b00ed10e/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8034da37ce34e442aa8e04f3f1618b70b00ed10e/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=8034da37ce34e442aa8e04f3f1618b70b00ed10e", "patch": "@@ -2670,6 +2670,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    mechanism.  */\n \n #define INCOMING_RETURN_ADDR_RTX   gen_rtx_REG (Pmode, LINK_REGISTER_REGNUM)\n+#define DWARF_FRAME_RETURN_COLUMN  DWARF_FRAME_REGNUM (LINK_REGISTER_REGNUM)\n \n /* Define results of standard character escape sequences.  */\n #define TARGET_BELL 007"}, {"sha": "b42f5085de51492e39abfb34d84f56e0b090974e", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8034da37ce34e442aa8e04f3f1618b70b00ed10e/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8034da37ce34e442aa8e04f3f1618b70b00ed10e/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=8034da37ce34e442aa8e04f3f1618b70b00ed10e", "patch": "@@ -2184,6 +2184,7 @@ LFLGRET\"ID\":\\n\\\n    is something you can return to.  */\n #define INCOMING_RETURN_ADDR_RTX \\\n   plus_constant (gen_rtx_REG (word_mode, 15), 8)\n+#define DWARF_FRAME_RETURN_COLUMN\tDWARF_FRAME_REGNUM (15)\n \n /* The offset from the incoming value of %sp to the top of the stack frame\n    for the current function.  On sparc64, we have to account for the stack"}, {"sha": "cfd979b70f70901a1c00e784aef50a5d007a879c", "filename": "gcc/frame.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8034da37ce34e442aa8e04f3f1618b70b00ed10e/gcc%2Fframe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8034da37ce34e442aa8e04f3f1618b70b00ed10e/gcc%2Fframe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fframe.c?ref=8034da37ce34e442aa8e04f3f1618b70b00ed10e", "patch": "@@ -694,11 +694,16 @@ execute_cfa_insn (void *p, struct frame_state_internal *state,\n     {\n       reg = (insn & 0x3f);\n       p = decode_uleb128 (p, &offset);\n-      offset *= info->data_align;\n-      state->s.saved[reg] = REG_SAVED_OFFSET;\n-      state->s.reg_or_offset[reg] = offset;\n       if (reg == state->s.cfa_reg)\n-\tstate->s.cfa_saved = 1;\n+\t/* Don't record anything about this register; it's only used to\n+\t   reload SP in the epilogue.  We don't want to copy in SP\n+\t   values for outer frames; we handle restoring SP specially.  */;\n+      else\n+\t{\n+\t  offset *= info->data_align;\n+\t  state->s.saved[reg] = REG_SAVED_OFFSET;\n+\t  state->s.reg_or_offset[reg] = offset;\n+\t}\n     }\n   else if (insn & DW_CFA_restore)\n     {\n@@ -727,11 +732,14 @@ execute_cfa_insn (void *p, struct frame_state_internal *state,\n     case DW_CFA_offset_extended:\n       p = decode_uleb128 (p, &reg);\n       p = decode_uleb128 (p, &offset);\n-      offset *= info->data_align;\n-      state->s.saved[reg] = REG_SAVED_OFFSET;\n-      state->s.reg_or_offset[reg] = offset;\n       if (reg == state->s.cfa_reg)\n-\tstate->s.cfa_saved = 1;\n+\t/* Don't record anything; see above.  */;\n+      else\n+\t{\n+\t  offset *= info->data_align;\n+\t  state->s.saved[reg] = REG_SAVED_OFFSET;\n+\t  state->s.reg_or_offset[reg] = offset;\n+\t}\n       break;\n     case DW_CFA_restore_extended:\n       p = decode_uleb128 (p, &reg);"}, {"sha": "330277c03f2390e652d234672f6a49bf62ac5f3a", "filename": "gcc/frame.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8034da37ce34e442aa8e04f3f1618b70b00ed10e/gcc%2Fframe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8034da37ce34e442aa8e04f3f1618b70b00ed10e/gcc%2Fframe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fframe.h?ref=8034da37ce34e442aa8e04f3f1618b70b00ed10e", "patch": "@@ -1,6 +1,6 @@\n /* Header file for unwinding stack frames for exception handling.  */\n /* Compile this one with gcc.  */\n-/* Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+/* Copyright (C) 1997, 1998, 1999 Free Software Foundation, Inc.\n    Contributed by Jason Merrill <jason@cygnus.com>.\n \n This file is part of GNU CC.\n@@ -34,7 +34,6 @@ typedef struct frame_state\n   long reg_or_offset[DWARF_FRAME_REGISTERS+1];\n   unsigned short cfa_reg;\n   unsigned short retaddr_column;\n-  char cfa_saved;\n   char saved[DWARF_FRAME_REGISTERS+1];\n } frame_state;\n "}, {"sha": "e2a852c185afc89c394b972fd796273a1efae91f", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8034da37ce34e442aa8e04f3f1618b70b00ed10e/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8034da37ce34e442aa8e04f3f1618b70b00ed10e/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=8034da37ce34e442aa8e04f3f1618b70b00ed10e", "patch": "@@ -3679,7 +3679,6 @@ throw_helper (struct eh_context *eh, void *pc, frame_state *my_udata,\n   void *handler;\n   void *handler_p = 0;\n   void *pc_p = 0;\n-  void *restored_cfa = 0;\n   frame_state saved_ustruct;\n   int new_eh_model;\n   int cleanup = 0;\n@@ -3789,11 +3788,6 @@ throw_helper (struct eh_context *eh, void *pc, frame_state *my_udata,\n       pc = saved_pc;\n       memcpy (udata, my_udata, sizeof (*udata));\n \n-      if (udata->cfa_saved)\n-\t/* We saved the CFA register into the stack in this frame, so we\n-\t   will restore it in the __throw epilogue.  Remember the value.  */\n-\trestored_cfa = udata->cfa;\n-\n       while (pc != handler_pc)\n \t{\n \t  frame_state *p = udata;\n@@ -3814,9 +3808,6 @@ throw_helper (struct eh_context *eh, void *pc, frame_state *my_udata,\n \t\tcopy_reg (i, udata, my_udata);\n \t      }\n \n-\t  if (udata->cfa_saved)\n-\t    restored_cfa = udata->cfa;\n-\n \t  pc = get_return_addr (udata, sub_udata) - 1;\n \t}\n \n@@ -3832,13 +3823,6 @@ throw_helper (struct eh_context *eh, void *pc, frame_state *my_udata,\n     }\n   /* udata now refers to the frame called by the handler frame.  */\n \n-  if (my_udata->cfa_saved)\n-    /* If we saved the CFA register into the stack (after it became the\n-       CFA register), we'll restore that value into SP in the epilogue,\n-       as on the ARM.  So calculate the adjustment based on the value that\n-       will be restored.  */\n-    my_udata->cfa = restored_cfa;\n-\n   /* We adjust SP by the difference between __throw's CFA and the CFA for\n      the frame called by the handler frame, because those CFAs correspond\n      to the SP values at the two call sites.  We need to further adjust by"}]}