{"sha": "27071013521b015d17a2666448f27a6ff0c55aca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcwNzEwMTM1MjFiMDE1ZDE3YTI2NjY0NDhmMjdhNmZmMGM1NWFjYQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-11-22T09:58:08Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-11-22T09:58:08Z"}, "message": "Move EXTRACT_LAST_REDUCTION costing to vectorizable_condition\n\ngcc.target/aarch64/sve/clastb_[57].c started failing after the increase\nin the cost of vec_to_scalar (r278452).  The problem is that we were\ndouble-counting the cost of the CLASTB: once in vect_model_reduction_cost\nas a vec_to_scalar and once in vectorizable_condition as a plain\nvector_stmt.\n\nBased on the TODO above vect_model_reduction_cost, I think the\npreferred long-term direction is for vectorizable_* to cost these\nthings itself, so that's what the patch does (for this one case only).\n\n2019-11-22  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vect-stmts.c (vect_model_simple_cost): Take an optional\n\tvect_cost_for_stmt.\n\t(vectorizable_condition): Calculate the cost of EXTRACT_LAST_REDUCTION\n\there rather than...\n\t* tree-vect-loop.c (vect_model_reduction_cost): ...here.\n\nFrom-SVN: r278611", "tree": {"sha": "0381a84acd6f11dbd5c16f42958d9abbe1b274ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0381a84acd6f11dbd5c16f42958d9abbe1b274ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27071013521b015d17a2666448f27a6ff0c55aca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27071013521b015d17a2666448f27a6ff0c55aca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27071013521b015d17a2666448f27a6ff0c55aca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27071013521b015d17a2666448f27a6ff0c55aca/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d9c50233e48becdf628babd0dc03d379b1dec970", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9c50233e48becdf628babd0dc03d379b1dec970", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9c50233e48becdf628babd0dc03d379b1dec970"}], "stats": {"total": 41, "additions": 28, "deletions": 13}, "files": [{"sha": "bdd0fc529b7944d9bcf334256cc61d5ff4f94372", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27071013521b015d17a2666448f27a6ff0c55aca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27071013521b015d17a2666448f27a6ff0c55aca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27071013521b015d17a2666448f27a6ff0c55aca", "patch": "@@ -1,3 +1,11 @@\n+2019-11-22  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-stmts.c (vect_model_simple_cost): Take an optional\n+\tvect_cost_for_stmt.\n+\t(vectorizable_condition): Calculate the cost of EXTRACT_LAST_REDUCTION\n+\there rather than...\n+\t* tree-vect-loop.c (vect_model_reduction_cost): ...here.\n+\n 2019-11-22  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.md (bic_f): Use cc_set_register predicate."}, {"sha": "ca8c8187f6008af7ba1987698a0a5251dca6eca8", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27071013521b015d17a2666448f27a6ff0c55aca/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27071013521b015d17a2666448f27a6ff0c55aca/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=27071013521b015d17a2666448f27a6ff0c55aca", "patch": "@@ -3924,8 +3924,11 @@ vect_model_reduction_cost (stmt_vec_info stmt_info, internal_fn reduc_fn,\n \n   code = gimple_assign_rhs_code (orig_stmt_info->stmt);\n \n-  if (reduction_type == EXTRACT_LAST_REDUCTION\n-      || reduction_type == FOLD_LEFT_REDUCTION)\n+  if (reduction_type == EXTRACT_LAST_REDUCTION)\n+    /* No extra instructions are needed in the prologue.  The loop body\n+       operations are costed in vectorizable_condition.  */\n+    inside_cost = 0;\n+  else if (reduction_type == FOLD_LEFT_REDUCTION)\n     {\n       /* No extra instructions needed in the prologue.  */\n       prologue_cost = 0;"}, {"sha": "6890837bf9f0be29009ff17177eb93f44cf4b76b", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27071013521b015d17a2666448f27a6ff0c55aca/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27071013521b015d17a2666448f27a6ff0c55aca/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=27071013521b015d17a2666448f27a6ff0c55aca", "patch": "@@ -860,7 +860,8 @@ vect_model_simple_cost (stmt_vec_info stmt_info, int ncopies,\n \t\t\tenum vect_def_type *dt,\n \t\t\tint ndts,\n \t\t\tslp_tree node,\n-\t\t\tstmt_vector_for_cost *cost_vec)\n+\t\t\tstmt_vector_for_cost *cost_vec,\n+\t\t\tvect_cost_for_stmt kind = vector_stmt)\n {\n   int inside_cost = 0, prologue_cost = 0;\n \n@@ -907,7 +908,7 @@ vect_model_simple_cost (stmt_vec_info stmt_info, int ncopies,\n     }\n \n   /* Pass the inside-of-loop statements to the target-specific cost model.  */\n-  inside_cost += record_stmt_cost (cost_vec, ncopies, vector_stmt,\n+  inside_cost += record_stmt_cost (cost_vec, ncopies, kind,\n \t\t\t\t   stmt_info, 0, vect_body);\n \n   if (dump_enabled_p ())\n@@ -10084,15 +10085,18 @@ vectorizable_condition (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t\treturn false;\n \t    }\n \t}\n-      if (expand_vec_cond_expr_p (vectype, comp_vectype,\n-\t\t\t\t     cond_code))\n-\t{\n-\t  STMT_VINFO_TYPE (stmt_info) = condition_vec_info_type;\n-\t  vect_model_simple_cost (stmt_info, ncopies, dts, ndts, slp_node,\n-\t\t\t\t  cost_vec);\n-\t  return true;\n-\t}\n-      return false;\n+\n+      vect_cost_for_stmt kind = vector_stmt;\n+      if (reduction_type == EXTRACT_LAST_REDUCTION)\n+\t/* Count one reduction-like operation per vector.  */\n+\tkind = vec_to_scalar;\n+      else if (!expand_vec_cond_expr_p (vectype, comp_vectype, cond_code))\n+\treturn false;\n+\n+      STMT_VINFO_TYPE (stmt_info) = condition_vec_info_type;\n+      vect_model_simple_cost (stmt_info, ncopies, dts, ndts, slp_node,\n+\t\t\t      cost_vec, kind);\n+      return true;\n     }\n \n   /* Transform.  */"}]}