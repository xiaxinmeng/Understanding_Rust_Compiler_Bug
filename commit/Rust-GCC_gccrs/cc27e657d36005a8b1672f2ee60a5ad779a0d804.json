{"sha": "cc27e657d36005a8b1672f2ee60a5ad779a0d804", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MyN2U2NTdkMzYwMDVhOGIxNjcyZjJlZTYwYTVhZDc3OWEwZDgwNA==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2004-05-05T07:23:00Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2004-05-05T07:23:00Z"}, "message": "re PR target/14899 (wrong code due to change in compatibility rules for vector types)\n\ngcc/ChangeLog:\n2004-05-04  Paolo Bonzini  <bonzini@gnu.org>\n            Richard Henderson  <rth@redhat.com>\n\n        PR target/14899\n\n        * c-common.c (vector_types_convertible_p): New function.\n        * c-typeck.c (comptypes): Recurse on vector types.\n        (convert_for_assignment): Use vector_types_convertible_p.\n        (digest_init): Use vector_types_convertible_p to check\n        validness of constant vector initializers; otherwise treat\n        them as scalars.\n        * tree.c (make_or_reuse_type): New.\n        (build_common_tree_nodes): Use it.\n        * cp/call.c (standard_conversion): Likewise.\n        * cp/typeck.c (comptypes): Recurse on vector types.\n        (convert_for_assignment): Use vector_types_convertible_p.\n        * config/rs6000/rs6000.c (build_opaque_vector_type):\n        New function.\n        (rs6000_init_builtins): Use it.\n\n\ngcc/testsuite/ChangeLog:\n2004-05-04  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* g++.dg/ext/spe1.C: New testcase.\n\nCo-Authored-By: Richard Henderson <rth@redhat.com>\n\nFrom-SVN: r81504", "tree": {"sha": "e6579b9ad0769f3b795f008e3c607e1affce3794", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6579b9ad0769f3b795f008e3c607e1affce3794"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc27e657d36005a8b1672f2ee60a5ad779a0d804", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc27e657d36005a8b1672f2ee60a5ad779a0d804", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc27e657d36005a8b1672f2ee60a5ad779a0d804", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc27e657d36005a8b1672f2ee60a5ad779a0d804/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d70bd7fff0dc91c22ce7e118b90dc91bfa1e935a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d70bd7fff0dc91c22ce7e118b90dc91bfa1e935a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d70bd7fff0dc91c22ce7e118b90dc91bfa1e935a"}], "stats": {"total": 119, "additions": 94, "deletions": 25}, "files": [{"sha": "d82a2de9f024bf21e8ae8cf550efac24027d50f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc27e657d36005a8b1672f2ee60a5ad779a0d804/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc27e657d36005a8b1672f2ee60a5ad779a0d804/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc27e657d36005a8b1672f2ee60a5ad779a0d804", "patch": "@@ -1,3 +1,23 @@\n+2004-05-04  Paolo Bonzini  <bonzini@gnu.org>\n+\t    Richard Henderson  <rth@redhat.com>\n+\n+\tPR target/14899\n+\n+\t* c-common.c (vector_types_convertible_p): New function.\n+\t* c-typeck.c (comptypes): Recurse on vector types.\n+\t(convert_for_assignment): Use vector_types_convertible_p.\n+\t(digest_init): Use vector_types_convertible_p to check\n+\tvalidness of constant vector initializers; otherwise treat\n+\tthem as scalars.\n+\t* tree.c (make_or_reuse_type): New.\n+\t(build_common_tree_nodes): Use it.\n+\t* cp/call.c (standard_conversion): Likewise.\n+\t* cp/typeck.c (comptypes): Recurse on vector types.\n+\t(convert_for_assignment): Use vector_types_convertible_p.\n+\t* config/rs6000/rs6000.c (build_opaque_vector_type):\n+\tNew function.\n+\t(rs6000_init_builtins): Use it.\n+\n 2004-05-04  Chris Demetriou  <cgd@broadcom.com>\n \n \t* config/mips/mips.c (override_options): Default to no"}, {"sha": "15d7e686841bb0ec678901f74264d5728d839694", "filename": "gcc/c-common.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc27e657d36005a8b1672f2ee60a5ad779a0d804/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc27e657d36005a8b1672f2ee60a5ad779a0d804/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=cc27e657d36005a8b1672f2ee60a5ad779a0d804", "patch": "@@ -1277,6 +1277,16 @@ constant_fits_type_p (tree c, tree type)\n   return !TREE_OVERFLOW (c);\n }\n \n+/* Nonzero if vector types T1 and T2 can be converted to each other\n+   without an explicit cast.  */\n+int\n+vector_types_convertible_p (tree t1, tree t2)\n+{\n+  return targetm.vector_opaque_p (t1)\n+\t || targetm.vector_opaque_p (t2)\n+\t || TYPE_MODE (t1) == TYPE_MODE (t2);\n+}\n+\n /* Convert EXPR to TYPE, warning about conversion problems with constants.\n    Invoke this function on every expression that is converted implicitly,\n    i.e. because of language rules and not because of an explicit cast.  */"}, {"sha": "7a0a6e6ad39a67a2dcdce3df2d1d264da5d8c387", "filename": "gcc/c-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc27e657d36005a8b1672f2ee60a5ad779a0d804/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc27e657d36005a8b1672f2ee60a5ad779a0d804/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=cc27e657d36005a8b1672f2ee60a5ad779a0d804", "patch": "@@ -1257,6 +1257,8 @@ extern tree finish_label_address_expr (tree);\n    different implementations.  Used in c-common.c.  */\n extern tree lookup_label (tree);\n \n+extern int vector_types_convertible_p (tree t1, tree t2);\n+\n extern rtx c_expand_expr (tree, rtx, enum machine_mode, int, rtx *);\n \n extern int c_safe_from_p (rtx, tree);"}, {"sha": "c744cd6b131b9ef027c074d6b6329de1c7792e3e", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc27e657d36005a8b1672f2ee60a5ad779a0d804/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc27e657d36005a8b1672f2ee60a5ad779a0d804/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=cc27e657d36005a8b1672f2ee60a5ad779a0d804", "patch": "@@ -592,10 +592,8 @@ comptypes (tree type1, tree type2, int flags)\n       break;\n \n     case VECTOR_TYPE:\n-      /* The target might allow certain vector types to be compatible.  */\n-      val = targetm.vector_opaque_p (t1)\n-\t|| targetm.vector_opaque_p (t2)\n-\t|| TYPE_MODE (t1) == TYPE_MODE (t2);\n+      val = TYPE_VECTOR_SUBPARTS (t1) == TYPE_VECTOR_SUBPARTS (t2)\n+\t    && comptypes (TREE_TYPE (t1), TREE_TYPE (t2), 0);\n       break;\n \n     default:\n@@ -3292,7 +3290,7 @@ convert_for_assignment (tree type, tree rhs, const char *errtype,\n     }\n   /* Some types can interconvert without explicit casts.  */\n   else if (codel == VECTOR_TYPE\n-           && comptypes (type, TREE_TYPE (rhs), COMPARE_STRICT) == 1)\n+           && vector_types_convertible_p (type, TREE_TYPE (rhs)))\n     return convert (type, rhs);\n   /* Arithmetic types all interconvert, and enum is treated like int.  */\n   else if ((codel == INTEGER_TYPE || codel == REAL_TYPE\n@@ -3937,11 +3935,11 @@ digest_init (tree type, tree init, int require_constant)\n      vector constructor is not constant (e.g. {1,2,3,foo()}) then punt\n      below and handle as a constructor.  */\n     if (code == VECTOR_TYPE\n-        && comptypes (TREE_TYPE (inside_init), type, COMPARE_STRICT)\n+        && vector_types_convertible_p (TREE_TYPE (inside_init), type)\n         && TREE_CONSTANT (inside_init))\n       {\n \tif (TREE_CODE (inside_init) == VECTOR_CST\n-\t    && comptypes (TYPE_MAIN_VARIANT (TREE_TYPE (inside_init)),\n+            && comptypes (TYPE_MAIN_VARIANT (TREE_TYPE (inside_init)),\n \t\t\t  TYPE_MAIN_VARIANT (type),\n \t\t\t  COMPARE_STRICT))\n \t  return inside_init;\n@@ -4042,7 +4040,8 @@ digest_init (tree type, tree init, int require_constant)\n   /* Handle scalar types, including conversions.  */\n \n   if (code == INTEGER_TYPE || code == REAL_TYPE || code == POINTER_TYPE\n-      || code == ENUMERAL_TYPE || code == BOOLEAN_TYPE || code == COMPLEX_TYPE)\n+      || code == ENUMERAL_TYPE || code == BOOLEAN_TYPE || code == COMPLEX_TYPE\n+      || code == VECTOR_TYPE)\n     {\n       /* Note that convert_for_assignment calls default_conversion\n \t for arrays and functions.  We must not call it in the"}, {"sha": "4f38c7ed6227fa5ba7e6862708825a11e29f03d9", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc27e657d36005a8b1672f2ee60a5ad779a0d804/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc27e657d36005a8b1672f2ee60a5ad779a0d804/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=cc27e657d36005a8b1672f2ee60a5ad779a0d804", "patch": "@@ -660,8 +660,7 @@ standard_conversion (tree to, tree from, tree expr)\n   else if (tcode == POINTER_TYPE && fcode == POINTER_TYPE\n \t   && TREE_CODE (TREE_TYPE (to)) == VECTOR_TYPE\n \t   && TREE_CODE (TREE_TYPE (from)) == VECTOR_TYPE\n-\t   && ((*targetm.vector_opaque_p) (TREE_TYPE (to))\n-\t       || (*targetm.vector_opaque_p) (TREE_TYPE (from))))\n+\t   && vector_types_convertible_p (TREE_TYPE (to), TREE_TYPE (from)))\n     conv = build_conv (ck_std, to, conv);\n   else if ((tcode == INTEGER_TYPE && fcode == POINTER_TYPE)\n \t   || (tcode == POINTER_TYPE && fcode == INTEGER_TYPE))\n@@ -820,8 +819,7 @@ standard_conversion (tree to, tree from, tree expr)\n \tconv->rank = cr_promotion;\n     }\n   else if (fcode == VECTOR_TYPE && tcode == VECTOR_TYPE\n-      && ((*targetm.vector_opaque_p) (from)\n-\t  || (*targetm.vector_opaque_p) (to)))\n+\t   && vector_types_convertible_p (from, to))\n     return build_conv (ck_std, to, conv);\n   else if (IS_AGGR_TYPE (to) && IS_AGGR_TYPE (from)\n \t   && is_properly_derived_from (from, to))"}, {"sha": "dedf4956b7e477b144d49d9403bf67e1b9326735", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc27e657d36005a8b1672f2ee60a5ad779a0d804/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc27e657d36005a8b1672f2ee60a5ad779a0d804/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=cc27e657d36005a8b1672f2ee60a5ad779a0d804", "patch": "@@ -1058,6 +1058,11 @@ comptypes (tree t1, tree t2, int strict)\n     case COMPLEX_TYPE:\n       return same_type_p (TREE_TYPE (t1), TREE_TYPE (t2));\n \n+    case VECTOR_TYPE:\n+      return TYPE_VECTOR_SUBPARTS (t1) == TYPE_VECTOR_SUBPARTS (t2)\n+\t     && same_type_p (TREE_TYPE (t1), TREE_TYPE (t2));\n+      break;\n+\n     default:\n       break;\n     }\n@@ -5600,8 +5605,7 @@ convert_for_assignment (tree type, tree rhs,\n   coder = TREE_CODE (rhstype);\n \n   if (TREE_CODE (type) == VECTOR_TYPE && coder == VECTOR_TYPE\n-      && ((*targetm.vector_opaque_p) (type)\n-\t  || (*targetm.vector_opaque_p) (rhstype)))\n+      && vector_types_convertible_p (type, rhstype))\n     return convert (type, rhs);\n \n   if (rhs == error_mark_node || rhstype == error_mark_node)"}, {"sha": "1cf06c4cb95872d688678cb8e41d2ebf8640266b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc27e657d36005a8b1672f2ee60a5ad779a0d804/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc27e657d36005a8b1672f2ee60a5ad779a0d804/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cc27e657d36005a8b1672f2ee60a5ad779a0d804", "patch": "@@ -1,3 +1,7 @@\n+2004-05-04  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* g++.dg/ext/spe1.C: New testcase.\n+\n 2004-05-04  Ziemowit Laski  <zlaski@apple.com>\n \n \t* objc.dg/image-info.m: Allow additional attributes"}, {"sha": "b9ae5e7d13538b9d26306e57d8152676f712b300", "filename": "gcc/testsuite/g++.dg/ext/spe1.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc27e657d36005a8b1672f2ee60a5ad779a0d804/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fspe1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc27e657d36005a8b1672f2ee60a5ad779a0d804/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fspe1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fspe1.C?ref=cc27e657d36005a8b1672f2ee60a5ad779a0d804", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile { target powerpc-*-eabi* } } */\n+/* { dg-options \"-mcpu=8540 -mabi=spe -O0\" } */\n+\n+typedef int v2si __attribute__ ((vector_size (8)));\n+\n+/* The two specializations must be considered different.  */\n+template <class T> class X\t\t    { };\n+template <>        class X<__ev64_opaque__> { };\n+template <>        class X<v2si>\t    { };"}, {"sha": "0e159c3ca9710cfe529fc3cd0a52735c0ca12447", "filename": "gcc/tree.c", "status": "modified", "additions": 34, "deletions": 11, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc27e657d36005a8b1672f2ee60a5ad779a0d804/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc27e657d36005a8b1672f2ee60a5ad779a0d804/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=cc27e657d36005a8b1672f2ee60a5ad779a0d804", "patch": "@@ -5195,6 +5195,27 @@ finish_vector_type (tree t)\n   }\n }\n \n+static tree\n+make_or_reuse_type (unsigned size, int unsignedp)\n+{\n+  if (size == INT_TYPE_SIZE)\n+    return unsignedp ? unsigned_type_node : integer_type_node;\n+  if (size == CHAR_TYPE_SIZE)\n+    return unsignedp ? unsigned_char_type_node : signed_char_type_node;\n+  if (size == SHORT_TYPE_SIZE)\n+    return unsignedp ? short_unsigned_type_node : short_integer_type_node;\n+  if (size == LONG_TYPE_SIZE)\n+    return unsignedp ? long_unsigned_type_node : long_integer_type_node;\n+  if (size == LONG_LONG_TYPE_SIZE)\n+    return (unsignedp ? long_long_unsigned_type_node\n+            : long_long_integer_type_node);\n+\n+  if (unsignedp)\n+    return make_unsigned_type (size);\n+  else\n+    return make_signed_type (size);\n+}\n+\n /* Create nodes for all integer types (and error_mark_node) using the sizes\n    of C datatypes.  The caller should call set_sizetype soon after calling\n    this function to select one of the types as sizetype.  */\n@@ -5237,17 +5258,19 @@ build_common_tree_nodes (int signed_char)\n   TREE_TYPE (TYPE_MAX_VALUE (boolean_type_node)) = boolean_type_node;\n   TYPE_PRECISION (boolean_type_node) = 1;\n \n-  intQI_type_node = make_signed_type (GET_MODE_BITSIZE (QImode));\n-  intHI_type_node = make_signed_type (GET_MODE_BITSIZE (HImode));\n-  intSI_type_node = make_signed_type (GET_MODE_BITSIZE (SImode));\n-  intDI_type_node = make_signed_type (GET_MODE_BITSIZE (DImode));\n-  intTI_type_node = make_signed_type (GET_MODE_BITSIZE (TImode));\n-\n-  unsigned_intQI_type_node = make_unsigned_type (GET_MODE_BITSIZE (QImode));\n-  unsigned_intHI_type_node = make_unsigned_type (GET_MODE_BITSIZE (HImode));\n-  unsigned_intSI_type_node = make_unsigned_type (GET_MODE_BITSIZE (SImode));\n-  unsigned_intDI_type_node = make_unsigned_type (GET_MODE_BITSIZE (DImode));\n-  unsigned_intTI_type_node = make_unsigned_type (GET_MODE_BITSIZE (TImode));\n+  /* Fill in the rest of the sized types.  Reuse existing type nodes\n+     when possible.  */\n+  intQI_type_node = make_or_reuse_type (GET_MODE_BITSIZE (QImode), 0);\n+  intHI_type_node = make_or_reuse_type (GET_MODE_BITSIZE (HImode), 0);\n+  intSI_type_node = make_or_reuse_type (GET_MODE_BITSIZE (SImode), 0);\n+  intDI_type_node = make_or_reuse_type (GET_MODE_BITSIZE (DImode), 0);\n+  intTI_type_node = make_or_reuse_type (GET_MODE_BITSIZE (TImode), 0);\n+\n+  unsigned_intQI_type_node = make_or_reuse_type (GET_MODE_BITSIZE (QImode), 1);\n+  unsigned_intHI_type_node = make_or_reuse_type (GET_MODE_BITSIZE (HImode), 1);\n+  unsigned_intSI_type_node = make_or_reuse_type (GET_MODE_BITSIZE (SImode), 1);\n+  unsigned_intDI_type_node = make_or_reuse_type (GET_MODE_BITSIZE (DImode), 1);\n+  unsigned_intTI_type_node = make_or_reuse_type (GET_MODE_BITSIZE (TImode), 1);\n   \n   access_public_node = get_identifier (\"public\");\n   access_protected_node = get_identifier (\"protected\");"}]}