{"sha": "2a1d4076c463ea534209b5e1b53089521321133b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmExZDQwNzZjNDYzZWE1MzQyMDliNWUxYjUzMDg5NTIxMzIxMTMzYg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2016-12-20T09:39:44Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-12-20T09:39:44Z"}, "message": "[ARM] PR target/78694: Avoid invalid RTL sharing in minipool code\n\n\tPR target/78694\n\t* config/arm/arm.c (dump_minipool): Copy mp->value before emitting it\n\tin the minipool to avoid invalid RTL sharing.\n\n\t* gcc.c-torture/compile/pr78694.c: New test.\n\nFrom-SVN: r243820", "tree": {"sha": "e93a241a140f1bdce70c906fd42167dc1085b4e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e93a241a140f1bdce70c906fd42167dc1085b4e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a1d4076c463ea534209b5e1b53089521321133b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a1d4076c463ea534209b5e1b53089521321133b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a1d4076c463ea534209b5e1b53089521321133b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a1d4076c463ea534209b5e1b53089521321133b/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "48e512b6984ab25185bd1239a042ab0e8fb3f95c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48e512b6984ab25185bd1239a042ab0e8fb3f95c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48e512b6984ab25185bd1239a042ab0e8fb3f95c"}], "stats": {"total": 141, "additions": 136, "deletions": 5}, "files": [{"sha": "0ad59ba9bc3ac82dc20e196ff0ac6704b24c63f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1d4076c463ea534209b5e1b53089521321133b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1d4076c463ea534209b5e1b53089521321133b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a1d4076c463ea534209b5e1b53089521321133b", "patch": "@@ -1,3 +1,9 @@\n+2016-12-20  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/78694\n+\t* config/arm/arm.c (dump_minipool): Copy mp->value before emitting it\n+\tin the minipool to avoid invalid RTL sharing.\n+\n 2016-12-19  Aaron Sawdey  <acsawdey@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000-protos.h (expand_strn_compare): Declare."}, {"sha": "bbf10f23987e58a1e066715e2168772da0245ff1", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1d4076c463ea534209b5e1b53089521321133b/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1d4076c463ea534209b5e1b53089521321133b/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=2a1d4076c463ea534209b5e1b53089521321133b", "patch": "@@ -16111,35 +16111,37 @@ dump_minipool (rtx_insn *scan)\n \t      fputc ('\\n', dump_file);\n \t    }\n \n+\t  rtx val = copy_rtx (mp->value);\n+\n \t  switch (GET_MODE_SIZE (mp->mode))\n \t    {\n #ifdef HAVE_consttable_1\n \t    case 1:\n-\t      scan = emit_insn_after (gen_consttable_1 (mp->value), scan);\n+\t      scan = emit_insn_after (gen_consttable_1 (val), scan);\n \t      break;\n \n #endif\n #ifdef HAVE_consttable_2\n \t    case 2:\n-\t      scan = emit_insn_after (gen_consttable_2 (mp->value), scan);\n+\t      scan = emit_insn_after (gen_consttable_2 (val), scan);\n \t      break;\n \n #endif\n #ifdef HAVE_consttable_4\n \t    case 4:\n-\t      scan = emit_insn_after (gen_consttable_4 (mp->value), scan);\n+\t      scan = emit_insn_after (gen_consttable_4 (val), scan);\n \t      break;\n \n #endif\n #ifdef HAVE_consttable_8\n \t    case 8:\n-\t      scan = emit_insn_after (gen_consttable_8 (mp->value), scan);\n+\t      scan = emit_insn_after (gen_consttable_8 (val), scan);\n \t      break;\n \n #endif\n #ifdef HAVE_consttable_16\n \t    case 16:\n-              scan = emit_insn_after (gen_consttable_16 (mp->value), scan);\n+              scan = emit_insn_after (gen_consttable_16 (val), scan);\n               break;\n \n #endif"}, {"sha": "eab8cd8c4f7311bf0c2796af92fd7698bd24ec5a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1d4076c463ea534209b5e1b53089521321133b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1d4076c463ea534209b5e1b53089521321133b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2a1d4076c463ea534209b5e1b53089521321133b", "patch": "@@ -1,3 +1,8 @@\n+2016-12-20  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/78694\n+\t* gcc.c-torture/compile/pr78694.c: New test.\n+\n 2016-12-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR testsuite/71232"}, {"sha": "bc3194426a0d91928c03dad23747993c3acabc5a", "filename": "gcc/testsuite/gcc.c-torture/compile/pr78694.c", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1d4076c463ea534209b5e1b53089521321133b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr78694.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1d4076c463ea534209b5e1b53089521321133b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr78694.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr78694.c?ref=2a1d4076c463ea534209b5e1b53089521321133b", "patch": "@@ -0,0 +1,118 @@\n+/* PR target/78694.  */\n+\n+enum\n+{\n+  MEMMODEL_RELAXED,\n+  MEMMODEL_ACQUIRE,\n+  PRIORITY_INSERT_END\n+};\n+enum\n+{\n+  PQ_CHILDREN,\n+  PQ_TASKGROUP\n+};\n+struct gomp_team_state\n+{\n+  struct gomp_team *team;\n+};\n+enum gomp_task_kind\n+{\n+  GOMP_TASK_UNDEFERRED,\n+  GOMP_TASK_WAITING\n+};\n+struct gomp_taskwait\n+{\n+  _Bool in_taskwait;\n+};\n+struct gomp_task\n+{\n+  struct gomp_task *parent;\n+  int children_queue;\n+  struct gomp_taskgroup *taskgroup;\n+  int dependers;\n+  struct gomp_taskwait taskwait;\n+  enum gomp_task_kind kind;\n+  _Bool in_tied_task;\n+} j, q, *n;\n+struct gomp_taskgroup\n+{\n+  _Bool in_taskgroup_wait;\n+  int num_children;\n+} l;\n+struct gomp_team\n+{\n+  int task_queue;\n+  int task_running_count;\n+};\n+struct gomp_thread\n+{\n+  struct gomp_team_state ts;\n+  struct gomp_task task;\n+} extern __thread a;\n+\n+int b, c, d, e, f, g, h, i, k, m, o, p, r;\n+\n+void priority_queue_next_task (struct gomp_task *, int, int);\n+int gomp_task_run_pre (struct gomp_task *, struct gomp_task, struct gomp_team);\n+void priority_queue_insert (int, struct gomp_task);\n+void priority_queue_insert2 (int, struct gomp_task, int, int, int);\n+void priority_queue_insert3 (int, struct gomp_task, int, int, int);\n+void gomp_sem_post (int);\n+void free (void *);\n+\n+_Bool s;\n+int\n+GOMP_taskgroup_end ()\n+{\n+  struct gomp_thread *t = &a;\n+  struct gomp_team u = *t->ts.team;\n+  struct gomp_task *v = &t->task, *w;\n+  if (__atomic_load_n (&l.num_children, MEMMODEL_ACQUIRE))\n+    while (1)\n+      {\n+\tif (l.num_children)\n+\t  priority_queue_next_task (v, u.task_queue, r);\n+\telse if (w)\n+\t  free (w);\n+\tif (n->kind == GOMP_TASK_WAITING)\n+\t  {\n+\t    s = gomp_task_run_pre (n, q, u);\n+\t    if (__builtin_expect (s, 0))\n+\t      {\n+\t\tif (w)\n+\t\t  free (w);\n+\t\tgoto finish_cancelled;\n+\t      }\n+\t    n = 0;\n+\t    l.in_taskgroup_wait = 1;\n+\t  }\n+\tif (w)\n+\t  {\n+\t    t->task = *n;\n+\t    if (__builtin_expect (p, 0))\n+\t      if (o)\n+\t\tt->task = *v;\n+\t  }\n+\tif (n)\n+\t  {\n+\t    struct gomp_task x = x;\n+\t    for (; i; b++)\n+\t      {\n+\t\tstruct gomp_task y = j;\n+\t\tif (g)\n+\t\t  continue;\n+\t\tpriority_queue_insert (PQ_CHILDREN, x);\n+\t\tif (x.taskwait.in_taskwait)\n+\t\t  priority_queue_insert2 (PQ_TASKGROUP, y, e, 0, d);\n+\t\tif (h)\n+\t\t  gomp_sem_post (f);\n+\t\tpriority_queue_insert3 (k, y, PRIORITY_INSERT_END, 0, d);\n+\t\t++c;\n+\t      }\n+\t  }\n+      finish_cancelled:\n+\tw = (struct gomp_task *) (n - u.task_running_count - v);\n+      }\n+  v->taskgroup = (struct gomp_taskgroup *) m;\n+  return 1;\n+}"}]}