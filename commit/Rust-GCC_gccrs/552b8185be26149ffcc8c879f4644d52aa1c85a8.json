{"sha": "552b8185be26149ffcc8c879f4644d52aa1c85a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTUyYjgxODViZTI2MTQ5ZmZjYzhjODc5ZjQ2NDRkNTJhYTFjODVhOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-03-21T05:09:41Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-03-21T05:09:41Z"}, "message": "c-common.h (enum cxx_dialect): Add cxx1y.\n\n\t* c-common.h (enum cxx_dialect): Add cxx1y.\n\t* c-common.c (c_common_nodes_and_builtins): Use >= for cxx_dialect\n\ttest.\n\t* c-cppbuiltin.c (c_cpp_builtins): Likewise.\n\t* c-opts.c (c_common_post_options): Likewise.\n\t(set_std_cxx1y): New.\n\t(c_common_handle_option): Call it.\n\t* c.opt (-std=c++1y, -std=gnu++1y): New flags.\ncp/\n\t* lex.c (init_reswords): Use >= for cxx_dialect test.\n\t* parser.c (cp_parser_exception_specification_opt): Likewise.\ntestsuite/\n\t* lib/target-supports.exp: Add { target c++1y }.\n\nFrom-SVN: r185596", "tree": {"sha": "9106f53126560094c079914853af9d31398a04a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9106f53126560094c079914853af9d31398a04a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/552b8185be26149ffcc8c879f4644d52aa1c85a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/552b8185be26149ffcc8c879f4644d52aa1c85a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/552b8185be26149ffcc8c879f4644d52aa1c85a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/552b8185be26149ffcc8c879f4644d52aa1c85a8/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c19267cbaf0188acd862e628b72fb32e68d08d48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c19267cbaf0188acd862e628b72fb32e68d08d48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c19267cbaf0188acd862e628b72fb32e68d08d48"}], "stats": {"total": 90, "additions": 80, "deletions": 10}, "files": [{"sha": "350ee14b90deff56f17e749ee9227c7078700588", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/552b8185be26149ffcc8c879f4644d52aa1c85a8/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/552b8185be26149ffcc8c879f4644d52aa1c85a8/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=552b8185be26149ffcc8c879f4644d52aa1c85a8", "patch": "@@ -1,3 +1,14 @@\n+2012-03-20  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-common.h (enum cxx_dialect): Add cxx1y.\n+\t* c-common.c (c_common_nodes_and_builtins): Use >= for cxx_dialect\n+\ttest.\n+\t* c-cppbuiltin.c (c_cpp_builtins): Likewise.\n+\t* c-opts.c (c_common_post_options): Likewise.\n+\t(set_std_cxx1y): New.\n+\t(c_common_handle_option): Call it.\n+\t* c.opt (-std=c++1y, -std=gnu++1y): New flags.\n+\n 2012-03-19  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/14710"}, {"sha": "fc83b04c8a141ccb0320fb9d90795b0b43a290ac", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/552b8185be26149ffcc8c879f4644d52aa1c85a8/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/552b8185be26149ffcc8c879f4644d52aa1c85a8/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=552b8185be26149ffcc8c879f4644d52aa1c85a8", "patch": "@@ -4940,7 +4940,7 @@ c_common_nodes_and_builtins (void)\n     {\n       char16_type_node = make_unsigned_type (char16_type_size);\n \n-      if (cxx_dialect == cxx0x)\n+      if (cxx_dialect >= cxx0x)\n \trecord_builtin_type (RID_CHAR16, \"char16_t\", char16_type_node);\n     }\n \n@@ -4956,7 +4956,7 @@ c_common_nodes_and_builtins (void)\n     {\n       char32_type_node = make_unsigned_type (char32_type_size);\n \n-      if (cxx_dialect == cxx0x)\n+      if (cxx_dialect >= cxx0x)\n \trecord_builtin_type (RID_CHAR32, \"char32_t\", char32_type_node);\n     }\n "}, {"sha": "8552f0c92e981bd391844ccf38da8b79b80ab56d", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/552b8185be26149ffcc8c879f4644d52aa1c85a8/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/552b8185be26149ffcc8c879f4644d52aa1c85a8/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=552b8185be26149ffcc8c879f4644d52aa1c85a8", "patch": "@@ -649,7 +649,9 @@ enum cxx_dialect {\n   cxx03 = cxx98,\n   /* C++11  */\n   cxx0x,\n-  cxx11 = cxx0x\n+  cxx11 = cxx0x,\n+  /* C++1y (C++17?) */\n+  cxx1y\n };\n \n /* The C++ dialect being used. C++98 is the default.  */"}, {"sha": "49804f98146075e02af4e7bdfc9515abda31fcab", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/552b8185be26149ffcc8c879f4644d52aa1c85a8/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/552b8185be26149ffcc8c879f4644d52aa1c85a8/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=552b8185be26149ffcc8c879f4644d52aa1c85a8", "patch": "@@ -714,7 +714,7 @@ c_cpp_builtins (cpp_reader *pfile)\n \tcpp_define (pfile, \"__DEPRECATED\");\n       if (flag_rtti)\n \tcpp_define (pfile, \"__GXX_RTTI\");\n-      if (cxx_dialect == cxx0x)\n+      if (cxx_dialect >= cxx0x)\n         cpp_define (pfile, \"__GXX_EXPERIMENTAL_CXX0X__\");\n     }\n   /* Note that we define this for C as well, so that we know if"}, {"sha": "0ee4390d5899d0bdeaf3032a9d3b6eeb407549df", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/552b8185be26149ffcc8c879f4644d52aa1c85a8/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/552b8185be26149ffcc8c879f4644d52aa1c85a8/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=552b8185be26149ffcc8c879f4644d52aa1c85a8", "patch": "@@ -111,6 +111,7 @@ static size_t include_cursor;\n static void handle_OPT_d (const char *);\n static void set_std_cxx98 (int);\n static void set_std_cxx11 (int);\n+static void set_std_cxx1y (int);\n static void set_std_c89 (int, int);\n static void set_std_c99 (int);\n static void set_std_c11 (int);\n@@ -774,6 +775,12 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n \tset_std_cxx11 (code == OPT_std_c__11 /* ISO */);\n       break;\n \n+    case OPT_std_c__1y:\n+    case OPT_std_gnu__1y:\n+      if (!preprocessing_asm_p)\n+\tset_std_cxx1y (code == OPT_std_c__11 /* ISO */);\n+      break;\n+\n     case OPT_std_c90:\n     case OPT_std_iso9899_199409:\n       if (!preprocessing_asm_p)\n@@ -990,7 +997,7 @@ c_common_post_options (const char **pfilename)\n   if (warn_implicit_function_declaration == -1)\n     warn_implicit_function_declaration = flag_isoc99;\n \n-  if (cxx_dialect == cxx0x)\n+  if (cxx_dialect >= cxx0x)\n     {\n       /* If we're allowing C++0x constructs, don't warn about C++98\n \t identifiers which are keywords in C++0x.  */\n@@ -1522,6 +1529,20 @@ set_std_cxx11 (int iso)\n   cxx_dialect = cxx11;\n }\n \n+/* Set the C++ 201y draft standard (without GNU extensions if ISO).  */\n+static void\n+set_std_cxx1y (int iso)\n+{\n+  cpp_set_lang (parse_in, iso ? CLK_CXX11: CLK_GNUCXX11);\n+  flag_no_gnu_keywords = iso;\n+  flag_no_nonansi_builtin = iso;\n+  flag_iso = iso;\n+  /* C++11 includes the C99 standard library.  */\n+  flag_isoc94 = 1;\n+  flag_isoc99 = 1;\n+  cxx_dialect = cxx1y;\n+}\n+\n /* Args to -d specify what to dump.  Silently ignore\n    unrecognized options; they may be aimed at toplev.c.  */\n static void"}, {"sha": "f785b6061558e65b18a9dbea3486132fa23882b4", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/552b8185be26149ffcc8c879f4644d52aa1c85a8/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/552b8185be26149ffcc8c879f4644d52aa1c85a8/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=552b8185be26149ffcc8c879f4644d52aa1c85a8", "patch": "@@ -1215,6 +1215,10 @@ std=c++0x\n C++ ObjC++ Alias(std=c++11)\n Deprecated in favor of -std=c++11\n \n+std=c++1y\n+C++ ObjC++\n+Conform to the ISO 201y(7?) C++ draft standard (experimental and incomplete support)\n+\n std=c11\n C ObjC\n Conform to the ISO 2011 C standard (experimental and incomplete support)\n@@ -1257,6 +1261,10 @@ std=gnu++0x\n C++ ObjC++ Alias(std=gnu++11)\n Deprecated in favor of -std=gnu++11\n \n+std=gnu++1y\n+C++ ObjC++\n+Conform to the ISO 201y(7?) C++ draft standard with GNU extensions (experimental and incomplete support)\n+\n std=gnu11\n C ObjC\n Conform to the ISO 2011 C standard with GNU extensions (experimental and incomplete support)"}, {"sha": "370fd7abd638abc9b6ff28d6c7735ca639055359", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/552b8185be26149ffcc8c879f4644d52aa1c85a8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/552b8185be26149ffcc8c879f4644d52aa1c85a8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=552b8185be26149ffcc8c879f4644d52aa1c85a8", "patch": "@@ -1,5 +1,8 @@\n 2012-03-20  Jason Merrill  <jason@redhat.com>\n \n+\t* lex.c (init_reswords): Use >= for cxx_dialect test.\n+\t* parser.c (cp_parser_exception_specification_opt): Likewise.\n+\n \t* mangle.c (write_type): Handle 'auto'.\n \t* init.c (build_new): Don't do auto deduction where it might\n \taffect template mangling."}, {"sha": "a79448ea549650ef1a14c2ee56cdf15ab2a8fd72", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/552b8185be26149ffcc8c879f4644d52aa1c85a8/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/552b8185be26149ffcc8c879f4644d52aa1c85a8/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=552b8185be26149ffcc8c879f4644d52aa1c85a8", "patch": "@@ -174,7 +174,7 @@ init_reswords (void)\n   tree id;\n   int mask = 0;\n \n-  if (cxx_dialect != cxx0x)\n+  if (cxx_dialect < cxx0x)\n     mask |= D_CXX0X;\n   if (flag_no_asm)\n     mask |= D_ASM | D_EXT;"}, {"sha": "75b7bdb046a34bb487aa3fdb8db134df5e6a21a3", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/552b8185be26149ffcc8c879f4644d52aa1c85a8/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/552b8185be26149ffcc8c879f4644d52aa1c85a8/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=552b8185be26149ffcc8c879f4644d52aa1c85a8", "patch": "@@ -19594,7 +19594,7 @@ cp_parser_exception_specification_opt (cp_parser* parser)\n \n #if 0\n   /* Enable this once a lot of code has transitioned to noexcept?  */\n-  if (cxx_dialect == cxx0x && !in_system_header)\n+  if (cxx_dialect >= cxx0x && !in_system_header)\n     warning (OPT_Wdeprecated, \"dynamic exception specifications are \"\n \t     \"deprecated in C++0x; use %<noexcept%> instead\");\n #endif"}, {"sha": "82f0d30ce6f5bc5b6e7be65f3e3e842dba0666e3", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/552b8185be26149ffcc8c879f4644d52aa1c85a8/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/552b8185be26149ffcc8c879f4644d52aa1c85a8/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=552b8185be26149ffcc8c879f4644d52aa1c85a8", "patch": "@@ -1597,20 +1597,36 @@ GNU dialect of ISO C11.  Support is incomplete and experimental.  The\n name @samp{gnu1x} is deprecated.\n \n @item c++98\n-The 1998 ISO C++ standard plus amendments. Same as @option{-ansi} for\n-C++ code.\n+@itemx c++03\n+The 1998 ISO C++ standard plus the 2003 technical corrigendum and some\n+additional defect reports. Same as @option{-ansi} for C++ code.\n \n @item gnu++98\n+@itemx gnu++03\n GNU dialect of @option{-std=c++98}.  This is the default for\n C++ code.\n \n @item c++11\n+@itemx c++0x\n The 2011 ISO C++ standard plus amendments.  Support for C++11 is still\n experimental, and may change in incompatible ways in future releases.\n+The name @samp{c++0x} is deprecated.\n \n @item gnu++11\n+@itemx gnu++0x\n GNU dialect of @option{-std=c++11}. Support for C++11 is still\n experimental, and may change in incompatible ways in future releases.\n+The name @samp{gnu++0x} is deprecated.\n+\n+@item c++1y\n+The next revision of the ISO C++ standard, tentatively planned for\n+2017.  Support is highly experimental, and will almost certainly\n+change in incompatible ways in future releases.\n+\n+@item gnu++1y\n+GNU dialect of @option{-std=c++1y}.  Support is highly experimental,\n+and will almost certainly change in incompatible ways in future\n+releases.\n @end table\n \n @item -fgnu89-inline"}, {"sha": "3501168e94db9436a43b20204b2d86fa4e43a64c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/552b8185be26149ffcc8c879f4644d52aa1c85a8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/552b8185be26149ffcc8c879f4644d52aa1c85a8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=552b8185be26149ffcc8c879f4644d52aa1c85a8", "patch": "@@ -1,5 +1,7 @@\n 2012-03-20  Jason Merrill  <jason@redhat.com>\n \n+\t* lib/target-supports.exp: Add { target c++1y }.\n+\n \t* g++.dg/cpp0x/auto32.C: New.\n \n 2012-03-20  Georg-Johann Lay  <avr@gjlay.de>"}, {"sha": "23b6ea9440690932de649d21ce0c8e4ed529c841", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/552b8185be26149ffcc8c879f4644d52aa1c85a8/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/552b8185be26149ffcc8c879f4644d52aa1c85a8/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=552b8185be26149ffcc8c879f4644d52aa1c85a8", "patch": "@@ -4431,11 +4431,18 @@ proc check_effective_target_c++11 { } {\n     return [check-flags { { } { } { -std=c++0x -std=gnu++0x -std=c++11 -std=gnu++11 } }]\n }\n \n+proc check_effective_target_c++1y { } {\n+    if ![check_effective_target_c++] {\n+\treturn 0\n+    }\n+    return [check-flags { { } { } { -std=c++1y -std=gnu++1y } }]\n+}\n+\n proc check_effective_target_c++98 { } {\n     if ![check_effective_target_c++] {\n \treturn 0\n     }\n-    return [check-flags { { } { } { } { -std=c++0x -std=gnu++0x -std=c++11 -std=gnu++11 } }]\n+    return [check-flags { { } { } { } { -std=c++0x -std=gnu++0x -std=c++11 -std=gnu++11 -std=c++1y -std=gnu++1y } }]\n }\n \n # Return 1 if expensive testcases should be run."}]}