{"sha": "21d01365ab8d0e16c681352cc0cc0e7ab726dc03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFkMDEzNjVhYjhkMGUxNmM2ODEzNTJjYzBjYzBlN2FiNzI2ZGMwMw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2012-06-13T20:41:41Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2012-06-13T20:41:41Z"}, "message": "common.opt (ftree-coalesce-inlined-vars): New.\n\ngcc/ChangeLog:\n* common.opt (ftree-coalesce-inlined-vars): New.\n(ftree-coalesce-vars): New.\n* doc/invoke.texi: Document them.\n* tree-ssa-copyrename.c (copy_rename_partition_coalesce):\nImplement them.\ngcc/testsuite/ChangeLog:\n* g++.dg/tree-ssa/ivopts-2.C: Adjust for coalescing.\n* gcc.dg/tree-ssa/forwprop-11.c: Likewise.\n* gcc.dg/tree-ssa/ssa-fre-1.c: Likewise.\n\nFrom-SVN: r188526", "tree": {"sha": "126009dcd8222ffd4b61e63e72cc8fdf8cef55da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/126009dcd8222ffd4b61e63e72cc8fdf8cef55da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21d01365ab8d0e16c681352cc0cc0e7ab726dc03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21d01365ab8d0e16c681352cc0cc0e7ab726dc03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21d01365ab8d0e16c681352cc0cc0e7ab726dc03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21d01365ab8d0e16c681352cc0cc0e7ab726dc03/comments", "author": null, "committer": null, "parents": [{"sha": "b78fd1642a52a841780204061dbf23827cbca334", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b78fd1642a52a841780204061dbf23827cbca334", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b78fd1642a52a841780204061dbf23827cbca334"}], "stats": {"total": 62, "additions": 52, "deletions": 10}, "files": [{"sha": "6969253b2578f5c755c8499c075ebfa7478f1b68", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d01365ab8d0e16c681352cc0cc0e7ab726dc03/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d01365ab8d0e16c681352cc0cc0e7ab726dc03/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21d01365ab8d0e16c681352cc0cc0e7ab726dc03", "patch": "@@ -1,3 +1,11 @@\n+2012-06-13  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* common.opt (ftree-coalesce-inlined-vars): New.\n+\t(ftree-coalesce-vars): New.\n+\t* doc/invoke.texi: Document them.\n+\t* tree-ssa-copyrename.c (copy_rename_partition_coalesce):\n+\tImplement them.\n+\n 2012-06-13  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* read-rtl.c (mapping): Remove index field.  Add current_value field."}, {"sha": "5b1b4d8eea3f7c7faf930d5c43a5c788de7c4af9", "filename": "gcc/common.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d01365ab8d0e16c681352cc0cc0e7ab726dc03/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d01365ab8d0e16c681352cc0cc0e7ab726dc03/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=21d01365ab8d0e16c681352cc0cc0e7ab726dc03", "patch": "@@ -1944,6 +1944,14 @@ ftree-ch\n Common Report Var(flag_tree_ch) Optimization\n Enable loop header copying on trees\n \n+ftree-coalesce-inlined-vars\n+Common Report Var(flag_ssa_coalesce_vars,1) Init(2) RejectNegative Optimization\n+Enable coalescing of copy-related user variables that are inlined\n+\n+ftree-coalesce-vars\n+Common Report Var(flag_ssa_coalesce_vars,2) Optimization\n+Enable coalescing of all copy-related user variables\n+\n ftree-copyrename\n Common Report Var(flag_tree_copyrename) Optimization\n Replace SSA temporaries with better names in copies"}, {"sha": "621ef29f8deccab928ed5b307de82d8904c5e1be", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d01365ab8d0e16c681352cc0cc0e7ab726dc03/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d01365ab8d0e16c681352cc0cc0e7ab726dc03/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=21d01365ab8d0e16c681352cc0cc0e7ab726dc03", "patch": "@@ -405,7 +405,8 @@ Objective-C and Objective-C++ Dialects}.\n -fsplit-ivs-in-unroller -fsplit-wide-types -fstack-protector @gol\n -fstack-protector-all -fstrict-aliasing -fstrict-overflow @gol\n -fthread-jumps -ftracer -ftree-bit-ccp @gol\n--ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-copy-prop @gol\n+-ftree-builtin-call-dce -ftree-ccp -ftree-ch @gol\n+-ftree-coalesce-inline-vars -ftree-coalesce-vars -ftree-copy-prop @gol\n -ftree-copyrename -ftree-dce -ftree-dominator-opts -ftree-dse @gol\n -ftree-forwprop -ftree-fre -ftree-loop-if-convert @gol\n -ftree-loop-if-convert-stores -ftree-loop-im @gol\n@@ -7490,6 +7491,24 @@ temporaries to other variables at copy locations, usually resulting in\n variable names which more closely resemble the original variables.  This flag\n is enabled by default at @option{-O} and higher.\n \n+@item -ftree-coalesce-inlined-vars\n+Tell the copyrename pass (see @option{-ftree-copyrename}) to attempt to\n+combine small user-defined variables too, but only if they were inlined\n+from other functions.  It is a more limited form of\n+@option{-ftree-coalesce-vars}.  This may harm debug information of such\n+inlined variables, but it will keep variables of the inlined-into\n+function apart from each other, such that they are more likely to\n+contain the expected values in a debugging session.  This was the\n+default in GCC versions older than 4.7.\n+\n+@item -ftree-coalesce-vars\n+Tell the copyrename pass (see @option{-ftree-copyrename}) to attempt to\n+combine small user-defined variables too, instead of just compiler\n+temporaries.  This may severely limit the ability to debug an optimized\n+program compiled with @option{-fno-var-tracking-assignments}.  In the\n+negated form, this flag prevents SSA coalescing of user variables,\n+including inlined ones.  This option is enabled by default.\n+\n @item -ftree-ter\n @opindex ftree-ter\n Perform temporary expression replacement during the SSA->normal phase.  Single"}, {"sha": "8e6000d1b2658dedb2cb875fb86da34348fbe0a1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d01365ab8d0e16c681352cc0cc0e7ab726dc03/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d01365ab8d0e16c681352cc0cc0e7ab726dc03/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=21d01365ab8d0e16c681352cc0cc0e7ab726dc03", "patch": "@@ -1,3 +1,9 @@\n+2012-06-13  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* g++.dg/tree-ssa/ivopts-2.C: Adjust for coalescing.\n+\t* gcc.dg/tree-ssa/forwprop-11.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-fre-1.c: Likewise.\n+\n 2012-06-13  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/53643"}, {"sha": "83b5728ef1a4bcaf935d1411d7aaf118ac0881e8", "filename": "gcc/testsuite/g++.dg/tree-ssa/ivopts-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d01365ab8d0e16c681352cc0cc0e7ab726dc03/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fivopts-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d01365ab8d0e16c681352cc0cc0e7ab726dc03/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fivopts-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fivopts-2.C?ref=21d01365ab8d0e16c681352cc0cc0e7ab726dc03", "patch": "@@ -7,5 +7,5 @@ void test (int *b, int *e, int stride)\n       *p = 1;\n   }\n \n-/* { dg-final { scan-tree-dump-times \"PHI <p\" 1 \"ivopts\"} } */\n+/* { dg-final { scan-tree-dump-times \"PHI <\\[pb\\]\" 1 \"ivopts\"} } */\n /* { dg-final { cleanup-tree-dump \"ivopts\" } } */"}, {"sha": "08d0864af55d200d24be5e6832b0d371d03eb339", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d01365ab8d0e16c681352cc0cc0e7ab726dc03/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d01365ab8d0e16c681352cc0cc0e7ab726dc03/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-11.c?ref=21d01365ab8d0e16c681352cc0cc0e7ab726dc03", "patch": "@@ -16,5 +16,5 @@ int g(int *p, int n)\n   return q[-1];\n }\n \n-/* { dg-final { scan-tree-dump-times \"= MEM\\\\\\[\\\\\\(int \\\\\\*\\\\\\)a_.. \\\\\\+ 4B\\\\\\];\" 2 \"forwprop1\" } } */\n+/* { dg-final { scan-tree-dump-times \"= MEM\\\\\\[\\\\\\(int \\\\\\*\\\\\\)\\[ap\\]_.. \\\\\\+ 4B\\\\\\];\" 2 \"forwprop1\" } } */\n /* { dg-final { cleanup-tree-dump \"forwprop1\" } } */"}, {"sha": "058d337378532b5e82b992adb29bb823ed4e7189", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d01365ab8d0e16c681352cc0cc0e7ab726dc03/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d01365ab8d0e16c681352cc0cc0e7ab726dc03/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-1.c?ref=21d01365ab8d0e16c681352cc0cc0e7ab726dc03", "patch": "@@ -11,5 +11,5 @@ int f(int *a)\n   return *c + t;\n }\n \n-/* { dg-final { scan-tree-dump \"Replaced \\\\\\*c_\\[^\\n\\].*with t_\" \"fre1\" } } */\n+/* { dg-final { scan-tree-dump \"Replaced \\\\\\*\\[ac\\]_\\[^\\n\\].*with t_\" \"fre1\" } } */\n /* { dg-final { cleanup-tree-dump \"fre1\" } } */"}, {"sha": "6ee8380a9a16dc4befe45b09622acff42bb3bc4f", "filename": "gcc/tree-ssa-copyrename.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d01365ab8d0e16c681352cc0cc0e7ab726dc03/gcc%2Ftree-ssa-copyrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d01365ab8d0e16c681352cc0cc0e7ab726dc03/gcc%2Ftree-ssa-copyrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copyrename.c?ref=21d01365ab8d0e16c681352cc0cc0e7ab726dc03", "patch": "@@ -194,20 +194,21 @@ copy_rename_partition_coalesce (var_map map, tree var1, tree var2, FILE *debug)\n   ign1 = TREE_CODE (root1) == VAR_DECL && DECL_IGNORED_P (root1);\n   ign2 = TREE_CODE (root2) == VAR_DECL && DECL_IGNORED_P (root2);\n \n-  /* Never attempt to coalesce 2 user variables unless one is an inline\n-     variable.  */\n+  /* Refrain from coalescing user variables, if requested.  */\n   if (!ign1 && !ign2)\n     {\n-      if (DECL_FROM_INLINE (root2))\n-        ign2 = true;\n-      else if (DECL_FROM_INLINE (root1))\n+      if (flag_ssa_coalesce_vars && DECL_FROM_INLINE (root2))\n+\tign2 = true;\n+      else if (flag_ssa_coalesce_vars && DECL_FROM_INLINE (root1))\n \tign1 = true;\n-      else\n+      else if (flag_ssa_coalesce_vars != 2)\n \t{\n \t  if (debug)\n \t    fprintf (debug, \" : 2 different USER vars. No coalesce.\\n\");\n \t  return false;\n \t}\n+      else\n+\tign2 = true;\n     }\n \n   /* If both values have default defs, we can't coalesce.  If only one has a"}]}