{"sha": "ee218a9203fc45ceb3d738a3459fb80517e0f90f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUyMThhOTIwM2ZjNDVjZWIzZDczOGEzNDU5ZmI4MDUxN2UwZjkwZg==", "commit": {"author": {"name": "David Ung", "email": "davidu@mips.com", "date": "2005-05-13T15:24:35Z"}, "committer": {"name": "David Ung", "email": "davidu@gcc.gnu.org", "date": "2005-05-13T15:24:35Z"}, "message": "mips.h (processor_type): Add new PROCESSOR_4KP name.\n\n* config/mips/mips.h (processor_type): Add new PROCESSOR_4KP\nname.\n* config/mips/mips.c: Add 4km alias.\n* config/mips/mips.md: Add 4kp to cpu attrib and include 4k.md.\n* config/mips/4k.md: New file, add 4Kc/4Kp DFA pipeline\ndescription.\n\nFrom-SVN: r99664", "tree": {"sha": "9b9bb5b8cff7a6b406376dcafee3cf74e7271548", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b9bb5b8cff7a6b406376dcafee3cf74e7271548"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee218a9203fc45ceb3d738a3459fb80517e0f90f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee218a9203fc45ceb3d738a3459fb80517e0f90f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee218a9203fc45ceb3d738a3459fb80517e0f90f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee218a9203fc45ceb3d738a3459fb80517e0f90f/comments", "author": null, "committer": null, "parents": [{"sha": "894b1dff50fc1e54c79aca6609952318737ef2c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/894b1dff50fc1e54c79aca6609952318737ef2c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/894b1dff50fc1e54c79aca6609952318737ef2c0"}], "stats": {"total": 170, "additions": 168, "deletions": 2}, "files": [{"sha": "6082e7462e10b40683573ec4dfa9b3e8cdb9604b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee218a9203fc45ceb3d738a3459fb80517e0f90f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee218a9203fc45ceb3d738a3459fb80517e0f90f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee218a9203fc45ceb3d738a3459fb80517e0f90f", "patch": "@@ -1,3 +1,12 @@\n+2005-05-13  David Ung  <davidu@mips.com>\n+\n+\t* config/mips/mips.h (processor_type): Add new PROCESSOR_4KP\n+\tname.\n+\t* config/mips/mips.c: Add 4km alias.\n+\t* config/mips/mips.md: Add 4kp to cpu attrib and include 4k.md.\n+\t* config/mips/4k.md: New file, add 4Kc/4Kp DFA pipeline\n+\tdescription.\n+\n 2005-05-13  Jan Hubicka  <jh@suse.cz>\n \n \t* c-decl.c (finish_function): Suppress \"control reaches end of"}, {"sha": "a580c9e778adac1010c008764fff4c7c6787537b", "filename": "gcc/config/mips/4k.md", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee218a9203fc45ceb3d738a3459fb80517e0f90f/gcc%2Fconfig%2Fmips%2F4k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee218a9203fc45ceb3d738a3459fb80517e0f90f/gcc%2Fconfig%2Fmips%2F4k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F4k.md?ref=ee218a9203fc45ceb3d738a3459fb80517e0f90f", "patch": "@@ -0,0 +1,154 @@\n+;; DFA-based pipeline descriptions for MIPS32 4K processor family\n+;; Contributed by Nigel Stephens (nigel@mips.com)\n+;;   and David Ung (davidu@mips.com)\n+;;\n+;; References:\n+;;   \"MIPS32 4K Processor Core Family Software User's Manual,\n+;;     Doc no: MD00016, Rev 1.18, Nov 15, 2004.\"\n+;;\n+;; 4Kc - pipelined multiplier and translation lookaside buffer (TLB)\n+;; 4km - pipelined multiplier and block address translator (BAT)\n+;; 4kp - non-pipelined multiplier and block address translator (BAT)\n+;;\n+;; Copyright (C) 2005 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 2, or (at your\n+;; option) any later version.\n+\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING.  If not, write to the\n+;; Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n+;; MA 02111-1307, USA.\n+\n+(define_automaton \"r4k_cpu, r4k_mdu\")\n+\n+;; Integer execution unit.\n+(define_cpu_unit \"r4k_ixu_arith\"       \"r4k_cpu\")\n+(define_cpu_unit \"r4k_ixu_mpydiv\"      \"r4k_mdu\")\n+\n+(define_insn_reservation \"r4k_int_load\" 2\n+  (and (eq_attr \"cpu\" \"4kc,4kp\")\n+       (eq_attr \"type\" \"load\"))\n+  \"r4k_ixu_arith\")\n+\n+(define_insn_reservation \"r4k_int_prefetch\" 1\n+  (and (eq_attr \"cpu\" \"4kc,4kp\")\n+       (eq_attr \"type\" \"prefetch\"))\n+  \"r4k_ixu_arith\")\n+\n+(define_insn_reservation \"r4k_int_store\" 1\n+  (and (eq_attr \"cpu\" \"4kc,4kp\")\n+       (eq_attr \"type\" \"store\"))\n+  \"r4k_ixu_arith\")\n+\n+;; 4Kc/4Km \n+;; unsigned divide - 8/16/24/32 bit operand have latencies  9/17/25/33\n+;;   signed divide - 8/16/24/32 bit operand have latencies 10/18/26/34\n+(define_insn_reservation \"r4k_idiv_4kc\" 34\n+  (and (eq_attr \"cpu\" \"4kc\")\n+       (and (eq_attr \"type\" \"idiv\")\n+\t    (eq_attr \"mode\" \"!DI\")))\n+  \"r4k_ixu_arith+(r4k_ixu_mpydiv*34)\")\n+\n+;; 4Kp\n+;; unsigned divide - 33\n+;;   signed divide - 33-35\n+(define_insn_reservation \"r4k_idiv_4kp\" 35\n+  (and (eq_attr \"cpu\" \"4kp\")\n+       (and (eq_attr \"type\" \"idiv\")\n+\t    (eq_attr \"mode\" \"!DI\")))\n+  \"r4k_ixu_arith+(r4k_ixu_mpydiv*35)\")\n+\n+;; 4Kc/4Km fast 32x32 multiply\n+;; 16x32 is faster, but there's no way to detect this\n+(define_insn_reservation \"r4k_mult_4kc\" 2\n+  (and (eq_attr \"cpu\" \"4kc\")\n+       (and (eq_attr \"type\" \"imul,imadd\")\n+\t    (eq_attr \"mode\" \"SI\")))\n+  \"r4k_ixu_arith+(r4k_ixu_mpydiv*2)\")\n+\n+;; 4Kc/4Km MUL has 2 cycle latency, but has the special property that it will\n+;; stall the integer unit pipeline. MUL 16x16 or 32x16 forces 1 cycle stall,\n+;; while MUL 32x32 forces 2 cycle stall.  If next insn use the result, an\n+;; additional stall is forced.\n+(define_insn_reservation \"r4k_mul_4kc\" 4\n+  (and (eq_attr \"cpu\" \"4kc\")\n+       (and (eq_attr \"type\" \"imul3\")\n+\t    (eq_attr \"mode\" \"SI\")))\n+  \"(r4k_ixu_arith+r4k_ixu_mpydiv)*3\")\n+\n+;; 4Kp slow iterative 2-op MULT\n+;; Latency of 32 if next insn is MADD/MSUB,MFHI/MFLO.\n+;; Repeat rate of 33 cycles.\n+(define_insn_reservation \"r4k_mult_4kp\" 32\n+  (and (eq_attr \"cpu\" \"4kp\")\n+       (and (eq_attr \"type\" \"imul\")\n+\t    (eq_attr \"mode\" \"SI\")))\n+  \"r4k_ixu_arith+(r4k_ixu_mpydiv*32)\")\n+\n+;; 4Kp slow iterative 3-op MUL\n+;; Latency of 32 cycles, but stalls the whole pipeline until complete.\n+(define_insn_reservation \"r4k_mul_4kp\" 32\n+  (and (eq_attr \"cpu\" \"4kp\")\n+       (and (eq_attr \"type\" \"imul3\")\n+\t    (eq_attr \"mode\" \"SI\")))\n+  \"(r4k_ixu_arith+r4k_ixu_mpydiv)*32\")\n+\n+;; 4Kp slow iterative MADD\n+;; Latency of 34 if next use insn is MADD/MSUB,MFHI/MFLO.\n+;; Repeat rate of 35 cycles.\n+(define_insn_reservation \"r4k_madd_4kp\" 34\n+  (and (eq_attr \"cpu\" \"4kp\")\n+       (and (eq_attr \"type\" \"imadd\")\n+\t    (eq_attr \"mode\" \"SI\")))\n+  \"r4k_ixu_arith+(r4k_ixu_mpydiv*34)\")\n+\n+;; Move to HI/LO -> MADD/MSUB,MFHI/MFLO has a 1 cycle latency.\n+(define_insn_reservation \"r4k_int_mthilo\" 1\n+  (and (eq_attr \"cpu\" \"4kc,4kp\")\n+       (eq_attr \"type\" \"mthilo\"))\n+  \"r4k_ixu_arith+r4k_ixu_mpydiv\")\n+\n+;; Move from HI/LO -> integer operation has a 2 cycle latency.\n+(define_insn_reservation \"r4k_int_mfhilo\" 2\n+  (and (eq_attr \"cpu\" \"4kc,4kp\")\n+       (eq_attr \"type\" \"mfhilo\"))\n+  \"r4k_ixu_arith+r4k_ixu_mpydiv\")\n+\n+;; All other integer insns.\n+(define_insn_reservation \"r4k_int_alu\" 1\n+  (and (eq_attr \"cpu\" \"4kc,4kp\")\n+       (eq_attr \"type\" \"arith,condmove,shift,const,nop,slt\"))\n+  \"r4k_ixu_arith\")\n+\n+(define_insn_reservation \"r4k_int_branch\" 1\n+  (and (eq_attr \"cpu\" \"4kc,4kp\")\n+       (eq_attr \"type\" \"branch\"))\n+  \"r4k_ixu_arith\")\n+\n+(define_insn_reservation \"r4k_int_jump_4k\" 1\n+  (and (eq_attr \"cpu\" \"4kc,4kp\")\n+       (eq_attr \"type\" \"jump,call\"))\n+  \"r4k_ixu_arith\")\n+\n+;; mfcx/mtcx - non FPU\n+;; (Disabled until we add cop0 support)\n+;; (define_insn_reservation \"r4k_int_cop\" 2\n+;;   (and (eq_attr \"cpu\" \"4kc,4kp\")\n+;;      (eq_attr \"type\" \"cop0\"))\n+;;  \"r4k_ixu_arith\")\n+\n+;; Unknown or multi - single issue\n+(define_insn_reservation \"r4k_unknown\" 1\n+  (and (eq_attr \"cpu\" \"4kc,4kp\")\n+       (eq_attr \"type\" \"unknown,multi\"))\n+  \"r4k_ixu_arith+r4k_ixu_mpydiv\")"}, {"sha": "9faddde503d800c4d16d299aeed9a6475f805629", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee218a9203fc45ceb3d738a3459fb80517e0f90f/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee218a9203fc45ceb3d738a3459fb80517e0f90f/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=ee218a9203fc45ceb3d738a3459fb80517e0f90f", "patch": "@@ -695,7 +695,8 @@ const struct mips_cpu_info mips_cpu_info_table[] = {\n \n   /* MIPS32 */\n   { \"4kc\", PROCESSOR_4KC, 32 },\n-  { \"4kp\", PROCESSOR_4KC, 32 }, /* = 4kc */\n+  { \"4km\", PROCESSOR_4KC, 32 }, /* = 4kc */\n+  { \"4kp\", PROCESSOR_4KP, 32 },\n \n   /* MIPS32 Release 2 */\n   { \"m4k\", PROCESSOR_M4K, 33 },"}, {"sha": "aeadac30fa8ba61fc7b1feb926bab922d03bfbba", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee218a9203fc45ceb3d738a3459fb80517e0f90f/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee218a9203fc45ceb3d738a3459fb80517e0f90f/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=ee218a9203fc45ceb3d738a3459fb80517e0f90f", "patch": "@@ -34,6 +34,7 @@ Boston, MA 02111-1307, USA.  */\n enum processor_type {\n   PROCESSOR_DEFAULT,\n   PROCESSOR_4KC,\n+  PROCESSOR_4KP,\n   PROCESSOR_5KC,\n   PROCESSOR_20KC,\n   PROCESSOR_24K,"}, {"sha": "5d58b735503f5024cd0bf6ffaee9ed310db48df4", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee218a9203fc45ceb3d738a3459fb80517e0f90f/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee218a9203fc45ceb3d738a3459fb80517e0f90f/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=ee218a9203fc45ceb3d738a3459fb80517e0f90f", "patch": "@@ -266,7 +266,7 @@\n ;; Attribute describing the processor.  This attribute must match exactly\n ;; with the processor_type enumeration in mips.h.\n (define_attr \"cpu\"\n-  \"default,4kc,5kc,20kc,24k,24kx,m4k,r3000,r3900,r6000,r4000,r4100,r4111,r4120,r4130,r4300,r4600,r4650,r5000,r5400,r5500,r7000,r8000,r9000,sb1,sr71000\"\n+  \"default,4kc,4kp,5kc,20kc,24k,24kx,m4k,r3000,r3900,r6000,r4000,r4100,r4111,r4120,r4130,r4300,r4600,r4650,r5000,r5400,r5500,r7000,r8000,r9000,sb1,sr71000\"\n   (const (symbol_ref \"mips_tune\")))\n \n ;; The type of hardware hazard associated with this instruction.\n@@ -500,6 +500,7 @@\n (define_cpu_unit \"alu\" \"alu\")\n (define_cpu_unit \"imuldiv\" \"imuldiv\")\n \n+(include \"4k.md\")\n (include \"24k.md\")\n (include \"3000.md\")\n (include \"4000.md\")"}]}