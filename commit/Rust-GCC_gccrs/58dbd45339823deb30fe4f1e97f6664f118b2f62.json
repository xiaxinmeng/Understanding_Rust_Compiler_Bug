{"sha": "58dbd45339823deb30fe4f1e97f6664f118b2f62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThkYmQ0NTMzOTgyM2RlYjMwZmU0ZjFlOTdmNjY2NGYxMThiMmY2Mg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-05-01T21:37:00Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-05-01T21:37:00Z"}, "message": "compiler: recognize and optimize map range clear\n    \n    Recognize\n    \n            for k := range m { delete(m, k) }\n    \n    for map m, and rewrite it to runtime.mapclear, as the gc compiler\n    does.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/169397\n\nFrom-SVN: r270780", "tree": {"sha": "dab06b2c1d84c386629710831aa34d68180c419d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dab06b2c1d84c386629710831aa34d68180c419d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58dbd45339823deb30fe4f1e97f6664f118b2f62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58dbd45339823deb30fe4f1e97f6664f118b2f62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58dbd45339823deb30fe4f1e97f6664f118b2f62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58dbd45339823deb30fe4f1e97f6664f118b2f62/comments", "author": null, "committer": null, "parents": [{"sha": "5e87c2806ff4e9057c4c46fa1d9c8ac91ce3dae9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e87c2806ff4e9057c4c46fa1d9c8ac91ce3dae9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e87c2806ff4e9057c4c46fa1d9c8ac91ce3dae9"}], "stats": {"total": 106, "additions": 105, "deletions": 1}, "files": [{"sha": "0203eee5d27cf14294140e19bab3578be4620894", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58dbd45339823deb30fe4f1e97f6664f118b2f62/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58dbd45339823deb30fe4f1e97f6664f118b2f62/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=58dbd45339823deb30fe4f1e97f6664f118b2f62", "patch": "@@ -1,4 +1,4 @@\n-b42744825e3f2d1d2981eedbb67d6ac6419b8122\n+7e590184ae1ebc02e1b2577de00cf4fe842217dc\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "a87b4d270d4e0ef6e7bc94cc133e94e96ffe81e2", "filename": "gcc/go/gofrontend/runtime.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58dbd45339823deb30fe4f1e97f6664f118b2f62/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58dbd45339823deb30fe4f1e97f6664f118b2f62/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.def?ref=58dbd45339823deb30fe4f1e97f6664f118b2f62", "patch": "@@ -137,6 +137,9 @@ DEF_GO_RUNTIME(MAPITERINIT, \"runtime.mapiterinit\", P3(TYPE, MAP, POINTER),\n // Range over a map, moving to the next map entry.\n DEF_GO_RUNTIME(MAPITERNEXT, \"runtime.mapiternext\", P1(POINTER), R0())\n \n+// Clear a map.\n+DEF_GO_RUNTIME(MAPCLEAR, \"runtime.mapclear\", P2(TYPE, MAP), R0())\n+\n \n // Make a channel.\n DEF_GO_RUNTIME(MAKECHAN, \"runtime.makechan\", P2(TYPE, INT), R1(CHAN))"}, {"sha": "6dd179a708896986b5aa30036f3f90edd3a99ee9", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58dbd45339823deb30fe4f1e97f6664f118b2f62/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58dbd45339823deb30fe4f1e97f6664f118b2f62/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=58dbd45339823deb30fe4f1e97f6664f118b2f62", "patch": "@@ -5485,6 +5485,7 @@ For_range_statement::do_lower(Gogo* gogo, Named_object*, Block* enclosing,\n   Location loc = this->location();\n   Block* temp_block = new Block(enclosing, loc);\n \n+  Expression* orig_range_expr = this->range_;\n   Named_object* range_object = NULL;\n   Temporary_statement* range_temp = NULL;\n   if (eval)\n@@ -5500,6 +5501,22 @@ For_range_statement::do_lower(Gogo* gogo, Named_object*, Block* enclosing,\n \t}\n     }\n \n+  // Try to match \"range clear\" patterns and rewrite to simple runtime\n+  // calls.\n+  if (range_type->map_type() != NULL)\n+    {\n+      Statement* clear = this->lower_map_range_clear(range_type,\n+                                                     enclosing,\n+                                                     orig_range_expr,\n+                                                     range_object,\n+                                                     range_temp, loc);\n+      if (clear != NULL)\n+        {\n+          temp_block->add_statement(clear);\n+          return Statement::make_block_statement(temp_block, loc);\n+        }\n+    }\n+\n   Temporary_statement* index_temp = Statement::make_temporary(index_type,\n \t\t\t\t\t\t\t      NULL, loc);\n   temp_block->add_statement(index_temp);\n@@ -6141,6 +6158,85 @@ For_range_statement::lower_range_channel(Gogo*,\n   *piter_init = iter_init;\n }\n \n+// Match\n+//\n+//   for k := range m { delete(m, k) }\n+//\n+// Lower it to runtime.mapclear(TYPE, m) on match, return the statement\n+// containing the call.  Return NULL otherwise.\n+\n+Statement*\n+For_range_statement::lower_map_range_clear(Type* map_type,\n+                                           Block* enclosing,\n+                                           Expression* orig_range_expr,\n+                                           Named_object* range_object,\n+                                           Temporary_statement* range_temp,\n+                                           Location loc)\n+{\n+  if (this->value_var_ != NULL)\n+    return NULL;\n+  if (this->index_var_ == NULL)\n+    return NULL;\n+\n+  // Require the loop index be a new variable.  We cannot rewrite\n+  // if it is used outside of the loop.\n+  Var_expression* index_ve = this->index_var_->var_expression();\n+  if (index_ve == NULL)\n+    return NULL;\n+  Named_object* index_no = index_ve->named_object();\n+  if (enclosing->bindings()->lookup_local(index_no->name()) != index_no)\n+    return NULL;\n+\n+  // Match the body.  When lowering the builtin delete function, we have\n+  // inserted temporaries, so we actually match for\n+  //\n+  //   tmp1 = m\n+  //   tmp2 = k\n+  //   runtime.mapdelete(TYPE, tmp1, &tmp2)\n+\n+  const std::vector<Statement*>* statements = this->statements_->statements();\n+  if (statements->size() != 3)\n+    return NULL;\n+\n+  Temporary_statement* ts1 = statements->at(0)->temporary_statement();\n+  Temporary_statement* ts2 = statements->at(1)->temporary_statement();\n+  Expression_statement* es3 = statements->at(2)->expression_statement();\n+  if (ts1 == NULL || ts2 == NULL || es3 == NULL\n+      || !Expression::is_same_variable(orig_range_expr, ts1->init())\n+      || !Expression::is_same_variable(this->index_var_, ts2->init()))\n+    return NULL;\n+  Call_expression* call = es3->expr()->call_expression();\n+  if (call == NULL)\n+    return NULL;\n+  Func_expression* fe = call->fn()->func_expression();\n+  if (fe == NULL || !fe->is_runtime_function()\n+      || fe->runtime_code() != Runtime::MAPDELETE)\n+    return NULL;\n+  Expression* a1 = call->args()->at(1);\n+  a1 = (a1->unsafe_conversion_expression() != NULL\n+        ? a1->unsafe_conversion_expression()->expr()\n+        : a1);\n+  Temporary_reference_expression* tre = a1->temporary_reference_expression();\n+  if (tre == NULL || tre->statement() != ts1)\n+    return NULL;\n+  Expression* a2 = call->args()->at(2);\n+  a2 = (a2->conversion_expression() != NULL\n+        ? a2->conversion_expression()->expr()\n+        : a2);\n+  Unary_expression* ue = a2->unary_expression();\n+  if (ue == NULL || ue->op() != OPERATOR_AND)\n+    return NULL;\n+  tre = ue->operand()->temporary_reference_expression();\n+  if (tre == NULL || tre->statement() != ts2)\n+    return NULL;\n+\n+  // Everything matches. Rewrite to mapclear(TYPE, MAP).\n+  Expression* e1 = Expression::make_type_descriptor(map_type, loc);\n+  Expression* e2 = this->make_range_ref(range_object, range_temp, loc);\n+  call = Runtime::make_call(Runtime::MAPCLEAR, loc, 2, e1, e2);\n+  return Statement::make_statement(call, true);\n+}\n+\n // Return the break LABEL_EXPR.\n \n Unnamed_label*"}, {"sha": "67c8e4343b799c485920525cec523816ad45d820", "filename": "gcc/go/gofrontend/statements.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58dbd45339823deb30fe4f1e97f6664f118b2f62/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58dbd45339823deb30fe4f1e97f6664f118b2f62/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.h?ref=58dbd45339823deb30fe4f1e97f6664f118b2f62", "patch": "@@ -1618,6 +1618,10 @@ class For_range_statement : public Statement\n \t\t      Temporary_statement*, Block**, Expression**, Block**,\n \t\t      Block**);\n \n+  Statement*\n+  lower_map_range_clear(Type*, Block*, Expression*, Named_object*,\n+                        Temporary_statement*, Location);\n+\n   // The variable which is set to the index value.\n   Expression* index_var_;\n   // The variable which is set to the element value.  This may be"}, {"sha": "b210f5a5320952f8e75293c6b82150f49b396dbd", "filename": "libgo/go/runtime/map.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58dbd45339823deb30fe4f1e97f6664f118b2f62/libgo%2Fgo%2Fruntime%2Fmap.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58dbd45339823deb30fe4f1e97f6664f118b2f62/libgo%2Fgo%2Fruntime%2Fmap.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fmap.go?ref=58dbd45339823deb30fe4f1e97f6664f118b2f62", "patch": "@@ -72,6 +72,7 @@ import (\n //go:linkname mapaccess2_fat runtime.mapaccess2_fat\n //go:linkname mapassign runtime.mapassign\n //go:linkname mapdelete runtime.mapdelete\n+//go:linkname mapclear runtime.mapclear\n //go:linkname mapiterinit runtime.mapiterinit\n //go:linkname mapiternext runtime.mapiternext\n "}]}