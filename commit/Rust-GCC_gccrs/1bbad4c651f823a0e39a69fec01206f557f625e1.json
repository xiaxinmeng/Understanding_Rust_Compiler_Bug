{"sha": "1bbad4c651f823a0e39a69fec01206f557f625e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJiYWQ0YzY1MWY4MjNhMGUzOWE2OWZlYzAxMjA2ZjU1N2Y2MjVlMQ==", "commit": {"author": {"name": "David S. Miller", "email": "davem@redhat.com", "date": "2002-04-29T05:33:00Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2002-04-29T05:33:00Z"}, "message": "re PR target/6500 (Sparc.md's prefetch is buggy)\n\n2002-04-28  David S. Miller  <davem@redhat.com>\n\n\tPR target/6500\n\t* config/sparc/sparc.md (prefetch): Emit properly for 32-bit vs.\n\t64-bit TARGET_V9.  Do not use prefetch page, use prefetch for\n\tseveral {reads,writes} instead.\n\t* config/sparc/sparc.h (PREFETCH_BLOCK, SIMULTANEOUS_PREFETCHES):\n\tDefine.\n\nFrom-SVN: r52876", "tree": {"sha": "b6c5bf7f4a88f50cd6051d97885279a5f7a23b60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6c5bf7f4a88f50cd6051d97885279a5f7a23b60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bbad4c651f823a0e39a69fec01206f557f625e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bbad4c651f823a0e39a69fec01206f557f625e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bbad4c651f823a0e39a69fec01206f557f625e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bbad4c651f823a0e39a69fec01206f557f625e1/comments", "author": null, "committer": null, "parents": [{"sha": "f736fd67c07ec07d10a88fb17738797d28576205", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f736fd67c07ec07d10a88fb17738797d28576205", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f736fd67c07ec07d10a88fb17738797d28576205"}], "stats": {"total": 77, "additions": 67, "deletions": 10}, "files": [{"sha": "130ce8ea472799c8c34b0c32211ddfbe225790d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bbad4c651f823a0e39a69fec01206f557f625e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bbad4c651f823a0e39a69fec01206f557f625e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1bbad4c651f823a0e39a69fec01206f557f625e1", "patch": "@@ -1,3 +1,12 @@\n+2002-04-28  David S. Miller  <davem@redhat.com>\n+\n+\tPR target/6500\n+\t* config/sparc/sparc.md (prefetch): Emit properly for 32-bit vs.\n+\t64-bit TARGET_V9.  Do not use prefetch page, use prefetch for\n+\tseveral {reads,writes} instead.\n+\t* config/sparc/sparc.h (PREFETCH_BLOCK, SIMULTANEOUS_PREFETCHES):\n+\tDefine.\n+\n 2002-04-27  David S. Miller  <davem@redhat.com>\n \n \tPR target/6494"}, {"sha": "d246c5a29df2b5d4b182151483dae1c0b1018fee", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bbad4c651f823a0e39a69fec01206f557f625e1/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bbad4c651f823a0e39a69fec01206f557f625e1/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=1bbad4c651f823a0e39a69fec01206f557f625e1", "patch": "@@ -2667,6 +2667,13 @@ do {                                                                    \\\n   case FLOAT:\t\t\t\t\t\t\\\n   case FIX:\t\t\t\t\t\t\\\n     return 19;\n+\n+#define PREFETCH_BLOCK \\\n+\t((sparc_cpu == PROCESSOR_ULTRASPARC) ? 64 : 32)\n+\n+/* ??? UltraSPARC-III note: Can set this to 8 for ultra3.  */\n+#define SIMULTANEOUS_PREFETCHES \\\n+\t((sparc_cpu == PROCESSOR_ULTRASPARC) ? 2 : 3)\n \f\n /* Control the assembler format that we output.  */\n "}, {"sha": "65b390eaa626220ec212929896405c87a38f087f", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 51, "deletions": 10, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bbad4c651f823a0e39a69fec01206f557f625e1/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bbad4c651f823a0e39a69fec01206f557f625e1/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=1bbad4c651f823a0e39a69fec01206f557f625e1", "patch": "@@ -9376,24 +9376,65 @@\n    && sparc_cpu != PROCESSOR_ULTRASPARC\"\n   \"call\\\\t%a0, %1\\\\n\\\\tadd\\\\t%%o7, (%l2-.-4), %%o7\")\n \n-(define_insn \"prefetch\"\n+;; ??? UltraSPARC-III note: A memory operation loading into the floating point register\n+;; ??? file, if it hits the prefetch cache, has a chance to dual-issue with other memory\n+;; ??? operations.  With DFA we might be able to model this, but it requires a lot of\n+;; ??? state.\n+(define_expand \"prefetch\"\n+  [(match_operand 0 \"address_operand\" \"\")\n+   (match_operand 1 \"const_int_operand\" \"\")\n+   (match_operand 2 \"const_int_operand\" \"\")]\n+  \"TARGET_V9\"\n+  \"\n+{\n+  if (TARGET_ARCH64)\n+    emit_insn (gen_prefetch_64 (operands[0], operands[1], operands[2]));\n+  else\n+    emit_insn (gen_prefetch_32 (operands[0], operands[1], operands[2]));\n+  DONE;\n+}\")\n+\n+(define_insn \"prefetch_64\"\n   [(prefetch (match_operand:DI 0 \"address_operand\" \"p\")\n \t     (match_operand:DI 1 \"const_int_operand\" \"n\")\n \t     (match_operand:DI 2 \"const_int_operand\" \"n\"))]\n-  \"TARGET_V9\"\n+  \"\"\n+{\n+  static const char * const prefetch_instr[2][2] = {\n+    {\n+      \"prefetch\\\\t[%a0], 1\", /* no locality: prefetch for one read */\n+      \"prefetch\\\\t[%a0], 0\", /* medium to high locality: prefetch for several reads */\n+    },\n+    {\n+      \"prefetch\\\\t[%a0], 3\", /* no locality: prefetch for one write */\n+      \"prefetch\\\\t[%a0], 2\", /* medium to high locality: prefetch for several writes */\n+    }\n+  };\n+  int read_or_write = INTVAL (operands[1]);\n+  int locality = INTVAL (operands[2]);\n+\n+  if (read_or_write != 0 && read_or_write != 1)\n+    abort ();\n+  if (locality < 0 || locality > 3)\n+    abort ();\n+  return prefetch_instr [read_or_write][locality == 0 ? 0 : 1];\n+}\n+  [(set_attr \"type\" \"load\")])\n+\n+(define_insn \"prefetch_32\"\n+  [(prefetch (match_operand:SI 0 \"address_operand\" \"p\")\n+\t     (match_operand:SI 1 \"const_int_operand\" \"n\")\n+\t     (match_operand:SI 2 \"const_int_operand\" \"n\"))]\n+  \"\"\n {\n-  static const char * const prefetch_instr[2][4] = {\n+  static const char * const prefetch_instr[2][2] = {\n     {\n       \"prefetch\\\\t[%a0], 1\", /* no locality: prefetch for one read */\n-      \"prefetch\\\\t[%a0], 0\", /* medium locality: prefetch for several reads */\n-      \"prefetch\\\\t[%a0], 0\", /* medium locality: prefetch for several reads */\n-      \"prefetch\\\\t[%a0], 4\", /* high locality: prefetch page */\n+      \"prefetch\\\\t[%a0], 0\", /* medium to high locality: prefetch for several reads */\n     },\n     {\n       \"prefetch\\\\t[%a0], 3\", /* no locality: prefetch for one write */\n-      \"prefetch\\\\t[%a0], 2\", /* medium locality: prefetch for several writes */\n-      \"prefetch\\\\t[%a0], 2\", /* medium locality: prefetch for several writes */\n-      \"prefetch\\\\t[%a0], 4\", /* high locality: prefetch page */\n+      \"prefetch\\\\t[%a0], 2\", /* medium to high locality: prefetch for several writes */\n     }\n   };\n   int read_or_write = INTVAL (operands[1]);\n@@ -9403,7 +9444,7 @@\n     abort ();\n   if (locality < 0 || locality > 3)\n     abort ();\n-  return prefetch_instr [read_or_write][locality];\n+  return prefetch_instr [read_or_write][locality == 0 ? 0 : 1];\n }\n   [(set_attr \"type\" \"load\")])\n \f"}]}