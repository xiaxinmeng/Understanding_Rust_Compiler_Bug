{"sha": "9c60338061bf3679f925be12273dc723b3913b75", "node_id": "C_kwDOANBUbNoAKDljNjAzMzgwNjFiZjM2NzlmOTI1YmUxMjI3M2RjNzIzYjM5MTNiNzU", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-07-28T21:21:29Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-07-28T21:21:29Z"}, "message": "analyzer: add CWE identifier URLs to docs\n\ngcc/analyzer/ChangeLog:\n\t* sm-malloc.cc (free_of_non_heap::emit): Add comment about CWE.\n\t* sm-taint.cc (tainted_size::emit): Likewise.\n\ngcc/ChangeLog:\n\t* doc/invoke.texi (-fdiagnostics-show-cwe): Use uref rather than\n\turl.\n\t(Static Analyzer Options): Likewise.  Add urefs for all of the\n\twarnings that have associated CWE identifiers.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "d3ad928adea5efbf335fa449d1bbe6ef37f85f3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3ad928adea5efbf335fa449d1bbe6ef37f85f3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c60338061bf3679f925be12273dc723b3913b75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c60338061bf3679f925be12273dc723b3913b75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c60338061bf3679f925be12273dc723b3913b75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c60338061bf3679f925be12273dc723b3913b75/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cac6811cf0d6c1437426aaf13ea52c16c16fc80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cac6811cf0d6c1437426aaf13ea52c16c16fc80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cac6811cf0d6c1437426aaf13ea52c16c16fc80"}], "stats": {"total": 52, "additions": 47, "deletions": 5}, "files": [{"sha": "73c549fa081695504f30e3e0576e1b5aba78cc2b", "filename": "gcc/analyzer/sm-malloc.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c60338061bf3679f925be12273dc723b3913b75/gcc%2Fanalyzer%2Fsm-malloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c60338061bf3679f925be12273dc723b3913b75/gcc%2Fanalyzer%2Fsm-malloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-malloc.cc?ref=9c60338061bf3679f925be12273dc723b3913b75", "patch": "@@ -1300,6 +1300,7 @@ class malloc_leak : public malloc_diagnostic\n \n   bool emit (rich_location *rich_loc) final override\n   {\n+    /* \"CWE-401: Missing Release of Memory after Effective Lifetime\".  */\n     diagnostic_metadata m;\n     m.add_cwe (401);\n     if (m_arg)"}, {"sha": "549373b322dd81ba4c034deb5ed589de576e3337", "filename": "gcc/analyzer/sm-taint.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c60338061bf3679f925be12273dc723b3913b75/gcc%2Fanalyzer%2Fsm-taint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c60338061bf3679f925be12273dc723b3913b75/gcc%2Fanalyzer%2Fsm-taint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-taint.cc?ref=9c60338061bf3679f925be12273dc723b3913b75", "patch": "@@ -435,6 +435,7 @@ class tainted_size : public taint_diagnostic\n \n   bool emit (rich_location *rich_loc) override\n   {\n+    /* \"CWE-129: Improper Validation of Array Index\".  */\n     diagnostic_metadata m;\n     m.add_cwe (129);\n     if (m_arg)"}, {"sha": "38ae900377e2b161c57c6d53c6d85e38464271a8", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 45, "deletions": 5, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c60338061bf3679f925be12273dc723b3913b75/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c60338061bf3679f925be12273dc723b3913b75/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9c60338061bf3679f925be12273dc723b3913b75", "patch": "@@ -5045,7 +5045,7 @@ the vertical bars and the ``char *'' and ``long int'' text).\n @opindex fno-diagnostics-show-cwe\n @opindex fdiagnostics-show-cwe\n Diagnostic messages can optionally have an associated\n-@url{https://cwe.mitre.org/index.html, CWE} identifier.\n+@uref{https://cwe.mitre.org/index.html, CWE} identifier.\n GCC itself only provides such metadata for some of the @option{-fanalyzer}\n diagnostics.  GCC plugins may also provide diagnostics with such metadata.\n By default, if this information is present, it will be printed with\n@@ -9808,7 +9808,7 @@ This diagnostic warns for paths through the code in which a pointer to\n a buffer is assigned to point at a buffer with a size that is not a\n multiple of @code{sizeof (*pointer)}.\n \n-See @url{https://cwe.mitre.org/data/definitions/131.html, CWE-131: Incorrect Calculation of Buffer Size}.\n+See @uref{https://cwe.mitre.org/data/definitions/131.html, CWE-131: Incorrect Calculation of Buffer Size}.\n \n @item -Wno-analyzer-double-fclose\n @opindex Wanalyzer-double-fclose\n@@ -9819,6 +9819,8 @@ This warning requires @option{-fanalyzer}, which enables it; use\n This diagnostic warns for paths through the code in which a @code{FILE *}\n can have @code{fclose} called on it more than once.\n \n+See @uref{https://cwe.mitre.org/data/definitions/1341.html, CWE-1341: Multiple Releases of Same Resource or Handle}.\n+\n @item -Wno-analyzer-double-free\n @opindex Wanalyzer-double-free\n @opindex Wno-analyzer-double-free\n@@ -9829,6 +9831,8 @@ This diagnostic warns for paths through the code in which a pointer\n can have a deallocator called on it more than once, either @code{free},\n or a deallocator referenced by attribute @code{malloc}.\n \n+See @uref{https://cwe.mitre.org/data/definitions/415.html, CWE-415: Double Free}.\n+\n @item -Wno-analyzer-exposure-through-output-file\n @opindex Wanalyzer-exposure-through-output-file\n @opindex Wno-analyzer-exposure-through-output-file\n@@ -9840,6 +9844,8 @@ This diagnostic warns for paths through the code in which a\n security-sensitive value is written to an output file\n (such as writing a password to a log file).\n \n+See @uref{https://cwe.mitre.org/data/definitions/532.html, CWE-532: Information Exposure Through Log Files}.\n+\n @item -Wno-analyzer-fd-access-mode-mismatch\n @opindex Wanalyzer-fd-access-mode-mismatch\n @opindex Wno-analyzer-fd-access-mode-mismatch\n@@ -9866,6 +9872,8 @@ to disable it.\n This diagnostic warns for paths through code in which a\n file descriptor can be closed more than once.\n \n+See @uref{https://cwe.mitre.org/data/definitions/1341.html, CWE-1341: Multiple Releases of Same Resource or Handle}.\n+\n @item -Wno-analyzer-fd-leak\n @opindex Wanalyzer-fd-leak\n @opindex Wno-analyzer-fd-leak\n@@ -9876,6 +9884,8 @@ to disable it.\n This diagnostic warns for paths through code in which an\n open file descriptor is leaked.\n \n+See @uref{https://cwe.mitre.org/data/definitions/775.html, CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime}.\n+\n @item -Wno-analyzer-fd-use-after-close\n @opindex Wanalyzer-fd-use-after-close\n @opindex Wno-analyzer-fd-use-after-close\n@@ -9916,6 +9926,8 @@ to disable it.\n This diagnostic warns for paths through the code in which a\n @code{<stdio.h>} @code{FILE *} stream object is leaked.\n \n+See @uref{https://cwe.mitre.org/data/definitions/775.html, CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime}.\n+\n @item -Wno-analyzer-free-of-non-heap\n @opindex Wanalyzer-free-of-non-heap\n @opindex Wno-analyzer-free-of-non-heap\n@@ -9926,6 +9938,8 @@ to disable it.\n This diagnostic warns for paths through the code in which @code{free}\n is called on a non-heap pointer (e.g. an on-stack buffer, or a global).\n \n+See @uref{https://cwe.mitre.org/data/definitions/590.html, CWE-590: Free of Memory not on the Heap}.\n+\n @item -Wno-analyzer-malloc-leak\n @opindex Wanalyzer-malloc-leak\n @opindex Wno-analyzer-malloc-leak\n@@ -9937,6 +9951,8 @@ This diagnostic warns for paths through the code in which a\n pointer allocated via an allocator is leaked: either @code{malloc},\n or a function marked with attribute @code{malloc}.\n \n+See @uref{https://cwe.mitre.org/data/definitions/401.html, CWE-401: Missing Release of Memory after Effective Lifetime}.\n+\n @item -Wno-analyzer-mismatching-deallocation\n @opindex Wanalyzer-mismatching-deallocation\n @opindex Wno-analyzer-mismatching-deallocation\n@@ -9951,6 +9967,8 @@ will warn about mismatches between @code{free}, scalar @code{delete}\n and vector @code{delete[]}, and those marked as allocator/deallocator\n pairs using attribute @code{malloc}.\n \n+See @uref{https://cwe.mitre.org/data/definitions/762.html, CWE-762: Mismatched Memory Management Routines}.\n+\n @item -Wno-analyzer-possible-null-argument\n @opindex Wanalyzer-possible-null-argument\n @opindex Wno-analyzer-possible-null-argument\n@@ -9962,6 +9980,8 @@ possibly-NULL value is passed to a function argument marked\n with @code{__attribute__((nonnull))} as requiring a non-NULL\n value.\n \n+See @uref{https://cwe.mitre.org/data/definitions/690.html, CWE-690: Unchecked Return Value to NULL Pointer Dereference}.\n+\n @item -Wno-analyzer-possible-null-dereference\n @opindex Wanalyzer-possible-null-dereference\n @opindex Wno-analyzer-possible-null-dereference\n@@ -9971,6 +9991,8 @@ This warning requires @option{-fanalyzer}, which enables it; use\n This diagnostic warns for paths through the code in which a\n possibly-NULL value is dereferenced.\n \n+See @uref{https://cwe.mitre.org/data/definitions/690.html, CWE-690: Unchecked Return Value to NULL Pointer Dereference}.\n+\n @item -Wno-analyzer-null-argument\n @opindex Wanalyzer-null-argument\n @opindex Wno-analyzer-null-argument\n@@ -9982,6 +10004,8 @@ value known to be NULL is passed to a function argument marked\n with @code{__attribute__((nonnull))} as requiring a non-NULL\n value.\n \n+See @uref{https://cwe.mitre.org/data/definitions/476.html, CWE-476: NULL Pointer Dereference}.\n+\n @item -Wno-analyzer-null-dereference\n @opindex Wanalyzer-null-dereference\n @opindex Wno-analyzer-null-dereference\n@@ -9991,6 +10015,8 @@ This warning requires @option{-fanalyzer}, which enables it; use\n This diagnostic warns for paths through the code in which a\n value known to be NULL is dereferenced.\n \n+See @uref{https://cwe.mitre.org/data/definitions/476.html, CWE-476: NULL Pointer Dereference}.\n+\n @item -Wno-analyzer-shift-count-negative\n @opindex Wanalyzer-shift-count-negative\n @opindex Wno-analyzer-shift-count-negative\n@@ -10049,7 +10075,7 @@ of an allocation without being sanitized, so that an attacker could\n inject an excessively large allocation and potentially cause a denial\n of service attack.\n \n-See @url{https://cwe.mitre.org/data/definitions/789.html, CWE-789: Memory Allocation with Excessive Size Value}.\n+See @uref{https://cwe.mitre.org/data/definitions/789.html, CWE-789: Memory Allocation with Excessive Size Value}.\n \n @item -Wno-analyzer-tainted-array-index\n @opindex Wanalyzer-tainted-array-index\n@@ -10063,7 +10089,7 @@ that could be under an attacker's control is used as the index\n of an array access without being sanitized, so that an attacker\n could inject an out-of-bounds access.\n \n-See @url{https://cwe.mitre.org/data/definitions/129.html, CWE-129: Improper Validation of Array Index}.\n+See @uref{https://cwe.mitre.org/data/definitions/129.html, CWE-129: Improper Validation of Array Index}.\n \n @item -Wno-analyzer-tainted-divisor\n @opindex Wanalyzer-tainted-divisor\n@@ -10077,6 +10103,8 @@ that could be under an attacker's control is used as the divisor\n in a division or modulus operation without being sanitized, so that\n an attacker could inject a division-by-zero.\n \n+See @uref{https://cwe.mitre.org/data/definitions/369.html, CWE-369: Divide By Zero}.\n+\n @item -Wno-analyzer-tainted-offset\n @opindex Wanalyzer-tainted-offset\n @opindex Wno-analyzer-tainted-offset\n@@ -10089,7 +10117,7 @@ that could be under an attacker's control is used as a pointer offset\n without being sanitized, so that an attacker could inject an out-of-bounds\n access.\n \n-See @url{https://cwe.mitre.org/data/definitions/823.html, CWE-823: Use of Out-of-range Pointer Offset}.\n+See @uref{https://cwe.mitre.org/data/definitions/823.html, CWE-823: Use of Out-of-range Pointer Offset}.\n \n @item -Wno-analyzer-tainted-size\n @opindex Wanalyzer-tainted-size\n@@ -10103,6 +10131,8 @@ that could be under an attacker's control is used as the size of\n an operation such as @code{memset} without being sanitized, so that an\n attacker could inject an out-of-bounds access.\n \n+See @uref{https://cwe.mitre.org/data/definitions/129.html, CWE-129: Improper Validation of Array Index}.\n+\n @item -Wno-analyzer-unsafe-call-within-signal-handler\n @opindex Wanalyzer-unsafe-call-within-signal-handler\n @opindex Wno-analyzer-unsafe-call-within-signal-handler\n@@ -10113,6 +10143,8 @@ This diagnostic warns for paths through the code in which a\n function known to be async-signal-unsafe (such as @code{fprintf}) is\n called from a signal handler.\n \n+See @uref{https://cwe.mitre.org/data/definitions/479.html, CWE-479: Signal Handler Use of a Non-reentrant Function}.\n+\n @item -Wno-analyzer-use-after-free\n @opindex Wanalyzer-use-after-free\n @opindex Wno-analyzer-use-after-free\n@@ -10123,6 +10155,8 @@ This diagnostic warns for paths through the code in which a\n pointer is used after a deallocator is called on it: either @code{free},\n or a deallocator referenced by attribute @code{malloc}.\n \n+See @uref{https://cwe.mitre.org/data/definitions/416.html, CWE-416: Use After Free}.\n+\n @item -Wno-analyzer-use-of-pointer-in-stale-stack-frame\n @opindex Wanalyzer-use-of-pointer-in-stale-stack-frame\n @opindex Wno-analyzer-use-of-pointer-in-stale-stack-frame\n@@ -10145,6 +10179,8 @@ the analyzer detects an attempt to use @code{va_arg} to extract a value\n passed to a variadic call, but uses a type that does not match that of\n the expression passed to the call.\n \n+See @uref{https://cwe.mitre.org/data/definitions/686.html, CWE-686: Function Call With Incorrect Argument Type}.\n+\n @item -Wno-analyzer-va-list-exhausted\n @opindex Wanalyzer-va-list-exhausted\n @opindex Wno-analyzer-va-list-exhausted\n@@ -10157,6 +10193,8 @@ the analyzer detects an attempt to use @code{va_arg} to access the next\n value passed to a variadic call, but all of the values in the\n @code{va_list} have already been consumed.\n \n+See @uref{https://cwe.mitre.org/data/definitions/685.html, CWE-685: Function Call With Incorrect Number of Arguments}.\n+\n @item -Wno-analyzer-va-list-leak\n @opindex Wanalyzer-va-list-leak\n @opindex Wno-analyzer-va-list-leak\n@@ -10213,6 +10251,8 @@ This warning requires @option{-fanalyzer}, which enables it; use\n This diagnostic warns for paths through the code in which an uninitialized\n value is used.\n \n+See @uref{https://cwe.mitre.org/data/definitions/457.html, CWE-457: Use of Uninitialized Variable}.\n+\n @end table\n \n Pertinent parameters for controlling the exploration are:"}]}