{"sha": "431ae0bf8f3ca0fe8820f5c0b1c8970f2c7651f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMxYWUwYmY4ZjNjYTBmZTg4MjBmNWMwYjFjODk3MGYyYzc2NTFmNQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-09-11T08:34:26Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-09-11T08:34:26Z"}, "message": "cfg.texi, [...]: Insert @: after i.e.\n\n\t* doc/cfg.texi, doc/hostconfig.texi, doc/install.texi,\n\tdoc/invoke.texi, doc/md.texi, doc/tm.texi, doc/tree-ssa.texi:\n\tInsert @: after i.e. or e.g.\n\nFrom-SVN: r87346", "tree": {"sha": "4eaaca11e724d8bba7f215e617f584af8f34389b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4eaaca11e724d8bba7f215e617f584af8f34389b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/431ae0bf8f3ca0fe8820f5c0b1c8970f2c7651f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/431ae0bf8f3ca0fe8820f5c0b1c8970f2c7651f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/431ae0bf8f3ca0fe8820f5c0b1c8970f2c7651f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/431ae0bf8f3ca0fe8820f5c0b1c8970f2c7651f5/comments", "author": null, "committer": null, "parents": [{"sha": "2495e8793f096d9911419aa2fa105e32205644bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2495e8793f096d9911419aa2fa105e32205644bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2495e8793f096d9911419aa2fa105e32205644bc"}], "stats": {"total": 54, "additions": 30, "deletions": 24}, "files": [{"sha": "48e06ce9e6099df3f1b7824d40f4b4dfb9a3ad47", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/431ae0bf8f3ca0fe8820f5c0b1c8970f2c7651f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/431ae0bf8f3ca0fe8820f5c0b1c8970f2c7651f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=431ae0bf8f3ca0fe8820f5c0b1c8970f2c7651f5", "patch": "@@ -1,3 +1,9 @@\n+2004-09-11  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* doc/cfg.texi, doc/hostconfig.texi, doc/install.texi,\n+\tdoc/invoke.texi, doc/md.texi, doc/tm.texi, doc/tree-ssa.texi:\n+\tInsert @: after i.e. or e.g.\n+\n 2004-09-10  Geoffrey Keating  <geoffk@apple.com>\n \n \t* tree-pretty-print.c (dump_decl_name): Print unnamed decls as"}, {"sha": "ddd225159a01c5ae7b2e5d2ca03a057be3772e3f", "filename": "gcc/doc/cfg.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/431ae0bf8f3ca0fe8820f5c0b1c8970f2c7651f5/gcc%2Fdoc%2Fcfg.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/431ae0bf8f3ca0fe8820f5c0b1c8970f2c7651f5/gcc%2Fdoc%2Fcfg.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcfg.texi?ref=431ae0bf8f3ca0fe8820f5c0b1c8970f2c7651f5", "patch": "@@ -364,7 +364,7 @@ accumulate into quite large errors.\n Each edge also contains a branch probability field: an integer in the\n range from 0 to @code{REG_BR_PROB_BASE}.  It represents probability of\n passing control from the end of the @code{src} basic block to the\n-@code{dest} basic block, i.e. the probability that control will flow\n+@code{dest} basic block, i.e.@: the probability that control will flow\n along this edge.   The @code{EDGE_FREQUENCY} macro is available to\n compute how frequently a given edge is taken. There is a @code{count}\n field for each edge as well, representing same information as for a\n@@ -533,7 +533,7 @@ the complete API required for manipulating and maintaining the CFG.\n It is also possible that a pass has to insert control flow instruction\n into the middle of a basic block, thus creating an entry point in the\n middle of the basic block, which is impossible by definition: The\n-block must be split to make sure it only has one entry point, i.e. the\n+block must be split to make sure it only has one entry point, i.e.@: the\n head of the basic block.  In the RTL representation, the\n @code{find_sub_basic_blocks} may be used to split existing basic block\n and add necessary edges.  The CFG hook @code{split_block} may be used\n@@ -570,7 +570,7 @@ RTL representation along with the function @code{tree} itself.\n @section Liveness information\n @cindex Liveness representation\n Liveness information is useful to determine whether some register is\n-``live'' at given point of program, i.e. that it contains a value that\n+``live'' at given point of program, i.e.@: that it contains a value that\n may be used at a later point in the program.  This information is\n used, for instance, during register allocation, as the pseudo\n registers only need to be assigned to a unique hard register or to a"}, {"sha": "4201522c7122d8515cf20acd0ad60be6ada3e92b", "filename": "gcc/doc/hostconfig.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/431ae0bf8f3ca0fe8820f5c0b1c8970f2c7651f5/gcc%2Fdoc%2Fhostconfig.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/431ae0bf8f3ca0fe8820f5c0b1c8970f2c7651f5/gcc%2Fdoc%2Fhostconfig.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fhostconfig.texi?ref=431ae0bf8f3ca0fe8820f5c0b1c8970f2c7651f5", "patch": "@@ -150,7 +150,7 @@ constructing the index part of debugging dump file names.  The resultant\n string must fit in fifteen bytes.  The full filename will be the\n concatenation of: the prefix of the assembler file name, the string\n resulting from applying this format to an index number, and a string\n-unique to each dump file kind, e.g. @samp{rtl}.\n+unique to each dump file kind, e.g.@: @samp{rtl}.\n \n If you do not define this macro, GCC will use @samp{.%02d.}.  You should\n define this macro if using the default will create an invalid file name."}, {"sha": "fcae3d0e064fb8f022ab5bb557b4cbbf1874a07a", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/431ae0bf8f3ca0fe8820f5c0b1c8970f2c7651f5/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/431ae0bf8f3ca0fe8820f5c0b1c8970f2c7651f5/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=431ae0bf8f3ca0fe8820f5c0b1c8970f2c7651f5", "patch": "@@ -1355,7 +1355,7 @@ Specifies the AWT peer library or libraries to build alongside\n @samp{libgcj}. If this option is unspecified or disabled, AWT\n will be non-functional. Current valid values are @option{gtk} and\n @option{xlib}. Multiple libraries should be separated by a\n-comma (i.e. @option{--enable-java-awt=gtk,xlib}).\n+comma (i.e.@: @option{--enable-java-awt=gtk,xlib}).\n \n @item --enable-gtk-cairo\n Build the cairo Graphics2D implementation on GTK.\n@@ -3534,7 +3534,7 @@ GCC 3.3 and GCC 3.4 trigger code generation bugs in earlier versions of\n the GNU compiler (especially GCC 3.0.x versions), which lead to the\n miscompilation of the stage1 compiler and the subsequent failure of the\n bootstrap process.  A workaround is to use GCC 3.2.3 as an intermediary\n-stage, i.e. to bootstrap that compiler with the base compiler and then\n+stage, i.e.@: to bootstrap that compiler with the base compiler and then\n use it to bootstrap the final compiler.\n \n GCC 3.4 triggers a code generation bug in versions 5.4 (Sun ONE Studio 7)"}, {"sha": "f728eb95268b81900bcf5d53356f6486d0cf02c2", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/431ae0bf8f3ca0fe8820f5c0b1c8970f2c7651f5/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/431ae0bf8f3ca0fe8820f5c0b1c8970f2c7651f5/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=431ae0bf8f3ca0fe8820f5c0b1c8970f2c7651f5", "patch": "@@ -3286,7 +3286,7 @@ test coverage analysis (@option{-ftest-coverage}). Each object file's\n @var{auxname} is generated from the name of the output file, if\n explicitly specified and it is not the final executable, otherwise it is\n the basename of the source file. In both cases any suffix is removed\n-(e.g.  @file{foo.gcda} for input file @file{dir/foo.c}, or\n+(e.g.@: @file{foo.gcda} for input file @file{dir/foo.c}, or\n @file{dir/foo.gcda} for output file specified as @option{-o dir/foo.o}).\n \n @itemize\n@@ -4239,7 +4239,7 @@ Enabled at levels @option{-O}, @option{-O2}, @option{-O3}, @option{-Os}.\n Attempt to merge identical constants and identical variables.\n \n This option implies @option{-fmerge-constants}.  In addition to\n-@option{-fmerge-constants} this considers e.g. even constant initialized\n+@option{-fmerge-constants} this considers e.g.@: even constant initialized\n arrays or initialized constant variables with integral or floating point\n types.  Languages like C or C++ require each non-automatic variable to\n have distinct location, so using this option will result in non-conforming\n@@ -5206,7 +5206,7 @@ Enabled with @option{-fprofile-use}.\n Unroll loops whose number of iterations can be determined at compile time or\n upon entry to the loop.  @option{-funroll-loops} implies\n @option{-frerun-cse-after-loop}.  It also turns on complete loop peeling\n-(i.e. complete removal of loops with small constant number of iterations).\n+(i.e.@: complete removal of loops with small constant number of iterations).\n This option makes code larger, and may or may not make it run faster.\n \n Enabled with @option{-fprofile-use}.\n@@ -5222,7 +5222,7 @@ the loop is entered.  This usually makes programs run more slowly.\n @opindex fpeel-loops\n Peels the loops for that there is enough information that they do not\n roll much (from profile feedback).  It also turns on complete loop peeling\n-(i.e. complete removal of loops with small constant number of iterations).\n+(i.e.@: complete removal of loops with small constant number of iterations).\n \n Enabled with @option{-fprofile-use}.\n \n@@ -10779,7 +10779,7 @@ the bottom (@option{-mbackchain}).\n Beside the different backchain location @option{-mkernel-backchain}\n also changes stack frame layout breaking the ABI. This option\n is intended to be used for code which internally needs a backchain but has\n-to get by with a limited stack size e.g. the linux kernel. \n+to get by with a limited stack size e.g.@: the linux kernel. \n Internal unwinding code not using DWARF-2 info has to be able to locate the\n return address of a function. That will be eased be the fact that\n the return address of a function is placed two words below the backchain \n@@ -10872,7 +10872,7 @@ Emit a warning if the current function exceeds the given frame size.  Because\n this is a compile time check it doesn't need to be a real problem when the program\n runs.  It is intended to identify functions which most probably cause \n a stack overflow.  It is useful to be used in an environment with limited stack \n-size e.g. the linux kernel.\n+size e.g.@: the linux kernel.\n \n @item -mwarn-dynamicstack\n @opindex mwarn-dynamicstack"}, {"sha": "447538ed691f1ef5b7daf6a4edf899a64ffa10e1", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/431ae0bf8f3ca0fe8820f5c0b1c8970f2c7651f5/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/431ae0bf8f3ca0fe8820f5c0b1c8970f2c7651f5/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=431ae0bf8f3ca0fe8820f5c0b1c8970f2c7651f5", "patch": "@@ -5825,7 +5825,7 @@ instructions can be executed simultaneously.  An instruction starts\n execution if its issue conditions are satisfied.  If not, the\n instruction is stalled until its conditions are satisfied.  Such\n @dfn{interlock (pipeline) delay} causes interruption of the fetching\n-of successor instructions (or demands nop instructions, e.g. for some\n+of successor instructions (or demands nop instructions, e.g.@: for some\n MIPS processors).\n \n There are two major kinds of interlock delays in modern processors.\n@@ -5840,7 +5840,7 @@ anti-dependence) delay between two instructions is given by a\n constant.  In most cases this approach is adequate.  The second kind\n of interlock delays is a reservation delay.  The reservation delay\n means that two instructions under execution will be in need of shared\n-processors resources, i.e. buses, internal registers, and/or\n+processors resources, i.e.@: buses, internal registers, and/or\n functional units, which are reserved for some time.  Taking this kind\n of delay into account is complex especially for modern @acronym{RISC}\n processors.\n@@ -5926,7 +5926,7 @@ to @code{define_cpu_unit}.  The reservation of such units can be\n queried for an automaton state.  The instruction scheduler never\n queries reservation of functional units for given automaton state.  So\n as a rule, you don't need this construction.  This construction could\n-be used for future code generation goals (e.g. to generate\n+be used for future code generation goals (e.g.@: to generate\n @acronym{VLIW} insn templates).\n \n @smallexample\n@@ -6071,7 +6071,7 @@ the string are separated by commas.\n defines an additional guard for the bypass.  The function will get the\n two insns as parameters.  If the function returns zero the bypass will\n be ignored for this case.  The additional guard is necessary to\n-recognize complicated bypasses, e.g. when the consumer is only an address\n+recognize complicated bypasses, e.g.@: when the consumer is only an address\n of insn @samp{store} (not a stored value).\n \n @findex exclusion_set\n@@ -6105,7 +6105,7 @@ The first construction (@samp{exclusion_set}) means that each\n functional unit in the first string can not be reserved simultaneously\n with a unit whose name is in the second string and vice versa.  For\n example, the construction is useful for describing processors\n-(e.g. some SPARC processors) with a fully pipelined floating point\n+(e.g.@: some SPARC processors) with a fully pipelined floating point\n functional unit which can execute simultaneously only single floating\n point insns or only double floating point insns.\n \n@@ -6248,7 +6248,7 @@ issued into the first pipeline unless it is reserved, otherwise they\n are issued into the second pipeline.  Integer division and\n multiplication insns can be executed only in the second integer\n pipeline and their results are ready correspondingly in 8 and 4\n-cycles.  The integer division is not pipelined, i.e. the subsequent\n+cycles.  The integer division is not pipelined, i.e.@: the subsequent\n integer division insn can not be issued until the current division\n insn finished.  Floating point insns are fully pipelined and their\n results are ready in 3 cycles.  Where the result of a floating point"}, {"sha": "a877f4c3311b4d7cc78d6a132afded8427b9ba9e", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/431ae0bf8f3ca0fe8820f5c0b1c8970f2c7651f5/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/431ae0bf8f3ca0fe8820f5c0b1c8970f2c7651f5/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=431ae0bf8f3ca0fe8820f5c0b1c8970f2c7651f5", "patch": "@@ -4720,7 +4720,7 @@ the following macro.\n @defmac ENABLE_EXECUTE_STACK\n Define this macro if certain operations must be performed before executing\n code located on the stack.  The macro should expand to a series of C\n-file-scope constructs (e.g. functions) and provide a unique entry point\n+file-scope constructs (e.g.@: functions) and provide a unique entry point\n named @code{__enable_execute_stack}.  The target is responsible for\n emitting calls to the entry point in the code, for example from the\n @code{INITIALIZE_TRAMPOLINE} macro.\n@@ -5659,7 +5659,7 @@ pointer, or a stdio stream to write any debug output to.  @var{verbose}\n is the verbose level provided by @option{-fsched-verbose-@var{n}}.\n @var{max_ready} is the maximum number of insns in the current scheduling\n region that can be live at the same time.  This can be used to allocate\n-scratch space if it is needed, e.g. by @samp{TARGET_SCHED_REORDER}.\n+scratch space if it is needed, e.g.@: by @samp{TARGET_SCHED_REORDER}.\n @end deftypefn\n \n @deftypefn {Target Hook} void TARGET_SCHED_FINISH (FILE *@var{file}, int @var{verbose})\n@@ -9026,7 +9026,7 @@ within a structure, in much the same way as the @samp{__aligned__} and\n the behavior to the default.\n \n A subtlety for Microsoft Visual C/C++ style bit-field packing\n-(e.g. -mms-bitfields) for targets that support it:\n+(e.g.@: -mms-bitfields) for targets that support it:\n When a bit-field is inserted into a packed record, the whole size\n of the underlying type is used by one or more same-size adjacent\n bit-fields (that is, if its long:3, 32 bits is used in the record,\n@@ -9387,7 +9387,7 @@ that are different from @option{-I}.\n This target hook returns @code{true} if it is safe to use a local alias\n for a virtual function @var{fndecl} when constructing thunks,\n @code{false} otherwise. By default, the hook returns @code{true} for all\n-functions, if a target supports aliases (i.e. defines\n+functions, if a target supports aliases (i.e.@: defines\n @code{ASM_OUTPUT_DEF}), @code{false} otherwise,\n @end deftypefn\n "}, {"sha": "6d03f504df7e7564fee91cb35e86f81f25addabe", "filename": "gcc/doc/tree-ssa.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/431ae0bf8f3ca0fe8820f5c0b1c8970f2c7651f5/gcc%2Fdoc%2Ftree-ssa.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/431ae0bf8f3ca0fe8820f5c0b1c8970f2c7651f5/gcc%2Fdoc%2Ftree-ssa.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftree-ssa.texi?ref=431ae0bf8f3ca0fe8820f5c0b1c8970f2c7651f5", "patch": "@@ -190,7 +190,7 @@ temporary.\n \n In general, expressions in GIMPLE consist of an operation and the\n appropriate number of simple operands; these operands must either be a\n-GIMPLE rvalue (@code{is_gimple_val}), i.e. a constant or a register\n+GIMPLE rvalue (@code{is_gimple_val}), i.e.@: a constant or a register\n variable.  More complex operands are factored out into temporaries, so\n that\n @smallexample\n@@ -709,7 +709,7 @@ definitions. For globals, structures, and arrays, we can determine from\n a statement whether a variable of these types has a killing definition. \n If the variable does, then the statement is marked as having a\n @dfn{must definition} of that variable. However, if a statement is only\n-defining a part of the variable (i.e. a field in a structure), or if we\n+defining a part of the variable (i.e.@: a field in a structure), or if we\n know that a statement might define the variable but we cannot say for sure,\n then we mark that statement as having a @dfn{may definition}.  For \n instance, given"}]}