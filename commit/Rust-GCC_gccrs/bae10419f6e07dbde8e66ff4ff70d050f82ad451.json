{"sha": "bae10419f6e07dbde8e66ff4ff70d050f82ad451", "node_id": "C_kwDOANBUbNoAKGJhZTEwNDE5ZjZlMDdkYmRlOGU2NmZmNGZmNzBkMDUwZjgyYWQ0NTE", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-03-10T07:41:12Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-03-10T07:42:54Z"}, "message": "PR c++/95999: Improved error recovery in enumeration lists.\n\nThis patch resolves PR c++/95999 which is an ICE-after-error regression\nin the g++ front-end.  When parsing an enumerator list, the C++ parser\nassumes that cp_parser_constant_expression always returns either an\nINTEGER_CST or error_mark_node, but in the testcase reported in the\nPR, it actually returns a VAR_DECL.\n\nThe usual (but perhaps controversial) design philosophy is that the\nroutine that reports the error normally has a duty to indicate this to\nthe rest of the compiler (via error_mark_node), but here the return\nvalue from calling require_rvalue_constant_expression (parser.cc:10666)\nis ignored.  I initially experimented with setting EXPRESSION to\nerror_mark_node here in cp_parser_constant_expression but (perhaps\nconveniently) that's insufficient to resolve the problem.  The simple\nfix in this patch is to tweak the two places that require INTEGER_CST\nto treat all other tree types as though they are error_mark_node.\n\n2022-03-10  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/cp/ChangeLog\n\tPR c++/95999\n\t* decl.cc (finish_enum_value_list): If VALUE isn't an INTEGER_CST\n\tconsider it to be zero (i.e. treat it like error_mark_node).\n\t(build_enumerator): Likewise, if PREV_VALUE isn't an INTEGER_CST,\n\tset VALUE to error_mark_node.\n\ngcc/testsuite/ChangeLog\n\tPR c++/95999\n\t* g++.dg/parse/pr95999.C: New test case.", "tree": {"sha": "00e2ce1d7ecb20398f30effbf000b06a2e9c48e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00e2ce1d7ecb20398f30effbf000b06a2e9c48e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bae10419f6e07dbde8e66ff4ff70d050f82ad451", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bae10419f6e07dbde8e66ff4ff70d050f82ad451", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bae10419f6e07dbde8e66ff4ff70d050f82ad451", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bae10419f6e07dbde8e66ff4ff70d050f82ad451/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2185c9734ad977b88c519a4579187a91b3f71edd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2185c9734ad977b88c519a4579187a91b3f71edd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2185c9734ad977b88c519a4579187a91b3f71edd"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "58210905ee989bac3c8f26869c3a2d567152bea7", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae10419f6e07dbde8e66ff4ff70d050f82ad451/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae10419f6e07dbde8e66ff4ff70d050f82ad451/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=bae10419f6e07dbde8e66ff4ff70d050f82ad451", "patch": "@@ -16263,7 +16263,7 @@ finish_enum_value_list (tree enumtype)\n \n \t  /* Update the minimum and maximum values, if appropriate.  */\n \t  value = DECL_INITIAL (decl);\n-\t  if (value == error_mark_node)\n+\t  if (TREE_CODE (value) != INTEGER_CST)\n \t    value = integer_zero_node;\n \t  /* Figure out what the minimum and maximum values of the\n \t     enumerators are.  */\n@@ -16552,7 +16552,7 @@ build_enumerator (tree name, tree value, tree enumtype, tree attributes,\n \t\t which case the type is an unspecified integral type\n \t\t sufficient to contain the incremented value.  */\n \t      prev_value = DECL_INITIAL (TREE_VALUE (TYPE_VALUES (enumtype)));\n-\t      if (error_operand_p (prev_value))\n+\t      if (TREE_CODE (prev_value) != INTEGER_CST)\n \t\tvalue = error_mark_node;\n \t      else\n \t\t{"}, {"sha": "cf8437ef2621ce4fe99ce508b1b3d64f60253595", "filename": "gcc/testsuite/g++.dg/parse/pr95999.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae10419f6e07dbde8e66ff4ff70d050f82ad451/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr95999.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae10419f6e07dbde8e66ff4ff70d050f82ad451/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr95999.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr95999.C?ref=bae10419f6e07dbde8e66ff4ff70d050f82ad451", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+int a;\n+enum struct b;\n+template <typename = enum struct b { c = a d } \n+template <> enum struct b { e };  // { dg-error \"explicit specialization\" }\n+// { dg-excess-errors \"note\" }\n+// { dg-excess-errors \"5:\" }\n+"}]}