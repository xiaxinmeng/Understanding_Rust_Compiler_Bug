{"sha": "2cf94e58cbde0c5e906720768bd738588a1a075a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNmOTRlNThjYmRlMGM1ZTkwNjcyMDc2OGJkNzM4NTg4YTFhMDc1YQ==", "commit": {"author": {"name": "Bryce McKinlay", "email": "mckinlay@redhat.com", "date": "2006-02-08T20:38:13Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2006-02-08T20:38:13Z"}, "message": "link.cc (_Jv_Linker::print_class_loaded): Declare string constants as \"const char *\".\n\n2006-02-08  Bryce McKinlay  <mckinlay@redhat.com>\n\n\t* link.cc (_Jv_Linker::print_class_loaded): Declare string constants\n\tas \"const char *\".\n\t* verify.cc (verify_fail): Likewise.\n\t* gnu/classpath/natSystemProperties.cc (file_encoding): Likewise.\n\t* interpret.cc (throw_internal_error, throw_class_format_error):\n\tLikewise.\n\t* gcj/javaprims.h (_Jv_hashUtf8String, _Jv_Utf8Const::space_needed, \n\t_Jv_Utf8Const::init, _Jv_makeUtf8Const): Likewise.\n\t* java/lang/Class.h (_Jv_InitPrimClass): Likewise.\n\t* include/jvm.h (_Jv_strLengthUtf8, _Jv_makeUtf8Const): Likewise.\n\t* defineclass.cc (throw_internal_error, throw_no_class_def_found_error,\n\tis_attribute_name): Likewise.\n\t* prims.cc (_Jv_strLengthUtf8, _Jv_hashUtf8String, _Jv_Utf8Const::init,\n\t_Jv_makeUtf8Const, _Jv_InitPrimClass): Likewise.\n\nFrom-SVN: r110767", "tree": {"sha": "cf833007c737395cb44ea9f031474173d9ab680a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf833007c737395cb44ea9f031474173d9ab680a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cf94e58cbde0c5e906720768bd738588a1a075a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cf94e58cbde0c5e906720768bd738588a1a075a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cf94e58cbde0c5e906720768bd738588a1a075a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cf94e58cbde0c5e906720768bd738588a1a075a/comments", "author": null, "committer": null, "parents": [{"sha": "8b1753e3ec0f38a18b8bcd3c13e2b6b55f799099", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b1753e3ec0f38a18b8bcd3c13e2b6b55f799099", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b1753e3ec0f38a18b8bcd3c13e2b6b55f799099"}], "stats": {"total": 79, "additions": 48, "deletions": 31}, "files": [{"sha": "91b7019bb62b0e5ee46379f6c51ebc63a7b96c36", "filename": "libjava/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf94e58cbde0c5e906720768bd738588a1a075a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf94e58cbde0c5e906720768bd738588a1a075a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=2cf94e58cbde0c5e906720768bd738588a1a075a", "patch": "@@ -1,3 +1,20 @@\n+2006-02-08  Bryce McKinlay  <mckinlay@redhat.com>\n+\n+\t* link.cc (_Jv_Linker::print_class_loaded): Declare string constants\n+\tas \"const char *\".\n+\t* verify.cc (verify_fail): Likewise.\n+\t* gnu/classpath/natSystemProperties.cc (file_encoding): Likewise.\n+\t* interpret.cc (throw_internal_error, throw_class_format_error):\n+\tLikewise.\n+\t* gcj/javaprims.h (_Jv_hashUtf8String, _Jv_Utf8Const::space_needed, \n+\t_Jv_Utf8Const::init, _Jv_makeUtf8Const): Likewise.\n+\t* java/lang/Class.h (_Jv_InitPrimClass): Likewise.\n+\t* include/jvm.h (_Jv_strLengthUtf8, _Jv_makeUtf8Const): Likewise.\n+\t* defineclass.cc (throw_internal_error, throw_no_class_def_found_error,\n+\tis_attribute_name): Likewise.\n+\t* prims.cc (_Jv_strLengthUtf8, _Jv_hashUtf8String, _Jv_Utf8Const::init,\n+\t_Jv_makeUtf8Const, _Jv_InitPrimClass): Likewise.\n+\t\n 2006-02-08  Tom Tromey  <tromey@redhat.com>\n \n \tPR libgcj/26063, PR libgcj/17978, PR libgcj/10598:"}, {"sha": "03d73a2c266cf3da9c7bd3c62735c5e527eaa3be", "filename": "libjava/defineclass.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf94e58cbde0c5e906720768bd738588a1a075a/libjava%2Fdefineclass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf94e58cbde0c5e906720768bd738588a1a075a/libjava%2Fdefineclass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fdefineclass.cc?ref=2cf94e58cbde0c5e906720768bd738588a1a075a", "patch": "@@ -47,11 +47,11 @@ using namespace gcj;\n \n // these go in some separate functions, to avoid having _Jv_InitClass\n // inserted all over the place.\n-static void throw_internal_error (char *msg)\n+static void throw_internal_error (const char *msg)\n \t__attribute__ ((__noreturn__));\n static void throw_no_class_def_found_error (jstring msg)\n \t__attribute__ ((__noreturn__));\n-static void throw_no_class_def_found_error (char *msg)\n+static void throw_no_class_def_found_error (const char *msg)\n \t__attribute__ ((__noreturn__));\n static void throw_class_format_error (jstring msg)\n \t__attribute__ ((__noreturn__));\n@@ -258,10 +258,10 @@ struct _Jv_ClassReader\n   void read_one_method_attribute (int method);\n   void read_one_code_attribute (int method);\n   void read_one_field_attribute (int field);\n-  void throw_class_format_error (char *msg);\n+  void throw_class_format_error (const char *msg);\n \n   /** check an utf8 entry, without creating a Utf8Const object */\n-  bool is_attribute_name (int index, char *name);\n+  bool is_attribute_name (int index, const char *name);\n \n   /** here goes the class-loader members defined out-of-line */\n   void handleConstantPool ();\n@@ -469,7 +469,7 @@ void _Jv_ClassReader::read_fields ()\n }\n \n bool\n-_Jv_ClassReader::is_attribute_name (int index, char *name)\n+_Jv_ClassReader::is_attribute_name (int index, const char *name)\n {\n   check_tag (index, JV_CONSTANT_Utf8);\n   int len = get2u (bytes+offsets[index]);\n@@ -1418,7 +1418,7 @@ void _Jv_ClassReader::handleMethodsEnd ()\n     }\n }\n \n-void _Jv_ClassReader::throw_class_format_error (char *msg)\n+void _Jv_ClassReader::throw_class_format_error (const char *msg)\n {\n   jstring str;\n   if (def->name != NULL)\n@@ -1460,7 +1460,7 @@ throw_no_class_def_found_error (jstring msg)\n }\n \n static void\n-throw_no_class_def_found_error (char *msg)\n+throw_no_class_def_found_error (const char *msg)\n {\n   throw_no_class_def_found_error (JvNewStringLatin1 (msg));\n }\n@@ -1474,7 +1474,7 @@ throw_class_format_error (jstring msg)\n }\n \n static void\n-throw_internal_error (char *msg)\n+throw_internal_error (const char *msg)\n {\n   throw new java::lang::InternalError (JvNewStringLatin1 (msg));\n }"}, {"sha": "a9dd8459d0249986f984111c65c47804b5395cca", "filename": "libjava/gcj/javaprims.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf94e58cbde0c5e906720768bd738588a1a075a/libjava%2Fgcj%2Fjavaprims.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf94e58cbde0c5e906720768bd738588a1a075a/libjava%2Fgcj%2Fjavaprims.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2Fjavaprims.h?ref=2cf94e58cbde0c5e906720768bd738588a1a075a", "patch": "@@ -489,7 +489,7 @@ extern \"C\" jstring _Jv_NewStringLatin1(const char*, jsize)\n   __attribute__((__malloc__));\n extern \"C\" jsize _Jv_GetStringUTFLength (jstring);\n extern \"C\" jsize _Jv_GetStringUTFRegion (jstring, jsize, jsize, char *);\n-extern \"C\" jint _Jv_hashUtf8String (char*, int);\n+extern \"C\" jint _Jv_hashUtf8String (const char*, int);\n \n struct _Jv_VMOption\n {\n@@ -561,17 +561,17 @@ class _Jv_Utf8Const\n   jstring toString() { return _Jv_NewStringUTF(data); }\n   /** Given an UTF8 string, how many bytes needed for a UTF8Const,\n       including struct header, and final NUL.  I.e. what to pas to malloc. */\n-  static int space_needed (char *, int len)\n+  static int space_needed (const char *, int len)\n   { return sizeof (_Jv_Utf8Const) + len + 1; }\n   /** Given an allocated _Jv_Utf8Const, copy / fill it in. */\n-  void init (char *s, int len);\n+  void init (const char *s, int len);\n   friend jboolean _Jv_equalUtf8Consts (const _Jv_Utf8Const*, const _Jv_Utf8Const *);\n   friend jboolean _Jv_equal (_Jv_Utf8Const*, jstring, jint);\n   friend jboolean _Jv_equaln (_Jv_Utf8Const*, jstring, jint);\n   friend jboolean _Jv_equalUtf8Classnames (const _Jv_Utf8Const*,\n                                              const _Jv_Utf8Const*);\n   friend jboolean _Jv_isPrimitiveOrDerived (const _Jv_Utf8Const*);\n-  friend _Jv_Utf8Const *_Jv_makeUtf8Const (char*, int);\n+  friend _Jv_Utf8Const *_Jv_makeUtf8Const (const char*, int);\n   friend _Jv_Utf8Const *_Jv_makeUtf8Const (jstring);\n   friend jstring _Jv_NewStringUtf8Const (_Jv_Utf8Const*);\n };"}, {"sha": "f21220f1f6deff558435c5da6d354c8d7d7ee49f", "filename": "libjava/gnu/classpath/natSystemProperties.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf94e58cbde0c5e906720768bd738588a1a075a/libjava%2Fgnu%2Fclasspath%2FnatSystemProperties.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf94e58cbde0c5e906720768bd738588a1a075a/libjava%2Fgnu%2Fclasspath%2FnatSystemProperties.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2FnatSystemProperties.cc?ref=2cf94e58cbde0c5e906720768bd738588a1a075a", "patch": "@@ -62,11 +62,11 @@ _Jv_SetDLLSearchPath (const char *)\n #if ! defined (DEFAULT_FILE_ENCODING) && defined (HAVE_ICONV) \\\n     && defined (HAVE_NL_LANGINFO)\n \n-static char *\n+static const char *\n file_encoding ()\n {\n   setlocale (LC_CTYPE, \"\");\n-  char *e = nl_langinfo (CODESET);\n+  const char *e = nl_langinfo (CODESET);\n   if (e == NULL || *e == '\\0')\n     e = \"8859_1\";\n   return e;\n@@ -80,7 +80,7 @@ file_encoding ()\n #define DEFAULT_FILE_ENCODING \"8859_1\"\n #endif\n \n-static char *default_file_encoding = DEFAULT_FILE_ENCODING;\n+static const char *default_file_encoding = DEFAULT_FILE_ENCODING;\n \n #if HAVE_GETPWUID_R\n /* Use overload resolution to find out the signature of getpwuid_r.  */"}, {"sha": "289422465853283a5e5ec2b72d6be4869f97a482", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf94e58cbde0c5e906720768bd738588a1a075a/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf94e58cbde0c5e906720768bd738588a1a075a/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=2cf94e58cbde0c5e906720768bd738588a1a075a", "patch": "@@ -132,10 +132,10 @@ union _Jv_value\n    ? (((PTR)[-3]&0x0F) << 12) + (((PTR)[-2]&0x3F) << 6) + ((PTR)[-1]&0x3F) \\\n    : ((PTR)++, -1))\n \n-extern int _Jv_strLengthUtf8(char* str, int len);\n+extern int _Jv_strLengthUtf8(const char* str, int len);\n \n typedef struct _Jv_Utf8Const Utf8Const;\n-_Jv_Utf8Const *_Jv_makeUtf8Const (char *s, int len);\n+_Jv_Utf8Const *_Jv_makeUtf8Const (const char *s, int len);\n _Jv_Utf8Const *_Jv_makeUtf8Const (jstring string);\n extern jboolean _Jv_equalUtf8Consts (const _Jv_Utf8Const *, const _Jv_Utf8Const *);\n extern jboolean _Jv_equal (_Jv_Utf8Const *, jstring, jint);"}, {"sha": "4e5e5df7028298881aebc2bf08eb47528a66dfdd", "filename": "libjava/interpret.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf94e58cbde0c5e906720768bd738588a1a075a/libjava%2Finterpret.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf94e58cbde0c5e906720768bd738588a1a075a/libjava%2Finterpret.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret.cc?ref=2cf94e58cbde0c5e906720768bd738588a1a075a", "patch": "@@ -47,7 +47,7 @@ _Jv_InterpreterEngine _Jv_soleInterpreterEngine;\n \n using namespace gcj;\n \n-static void throw_internal_error (char *msg)\n+static void throw_internal_error (const char *msg)\n   __attribute__ ((__noreturn__));\n static void throw_incompatible_class_change_error (jstring msg)\n   __attribute__ ((__noreturn__));\n@@ -58,7 +58,7 @@ static void throw_null_pointer_exception ()\n \n static void throw_class_format_error (jstring msg)\n \t__attribute__ ((__noreturn__));\n-static void throw_class_format_error (char *msg)\n+static void throw_class_format_error (const char *msg)\n \t__attribute__ ((__noreturn__));\n \n #ifdef DIRECT_THREADED\n@@ -3294,7 +3294,7 @@ _Jv_InterpMethod::run (void *retp, ffi_raw *args, _Jv_InterpMethod *meth)\n }\n \n static void\n-throw_internal_error (char *msg)\n+throw_internal_error (const char *msg)\n {\n   throw new java::lang::InternalError (JvNewStringLatin1 (msg));\n }\n@@ -3817,7 +3817,7 @@ throw_class_format_error (jstring msg)\n }\n \n static void\n-throw_class_format_error (char *msg)\n+throw_class_format_error (const char *msg)\n {\n   throw_class_format_error (JvNewStringLatin1 (msg));\n }"}, {"sha": "c94b6d3921751e892ae61cc03f20c8ed1f18425b", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf94e58cbde0c5e906720768bd738588a1a075a/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf94e58cbde0c5e906720768bd738588a1a075a/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=2cf94e58cbde0c5e906720768bd738588a1a075a", "patch": "@@ -261,7 +261,7 @@ jclass _Jv_NewClass (_Jv_Utf8Const *name, jclass superclass,\n void _Jv_InitNewClassFields (jclass klass);\n \n // Friend functions and classes in prims.cc\n-void _Jv_InitPrimClass (jclass, char *, char, int);\n+void _Jv_InitPrimClass (jclass, const char *, char, int);\n jstring _Jv_GetMethodString (jclass, _Jv_Method *, jclass = NULL);\n \n jboolean _Jv_CheckAccess (jclass self_klass, jclass other_klass,\n@@ -494,7 +494,7 @@ class java::lang::Class : public java::lang::Object\n   friend void ::_Jv_InitNewClassFields (jclass klass);\n \n   // in prims.cc\n-  friend void ::_Jv_InitPrimClass (jclass, char *, char, int);\n+  friend void ::_Jv_InitPrimClass (jclass, const char *, char, int);\n \n   friend jstring (::_Jv_GetMethodString) (jclass, _Jv_Method *, jclass);\n "}, {"sha": "395b2c731b6f1b577ba22cf478e8bfe94458b1d3", "filename": "libjava/link.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf94e58cbde0c5e906720768bd738588a1a075a/libjava%2Flink.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf94e58cbde0c5e906720768bd738588a1a075a/libjava%2Flink.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Flink.cc?ref=2cf94e58cbde0c5e906720768bd738588a1a075a", "patch": "@@ -1848,9 +1848,9 @@ _Jv_Linker::print_class_loaded (jclass klass)\n \t}\n     }\n   if (codesource == NULL)\n-    codesource = \"<no code source>\";\n+    codesource = (char *) \"<no code source>\";\n \n-  char *abi;\n+  const char *abi;\n   if (_Jv_IsInterpretedClass (klass))\n     abi = \"bytecode\";\n   else if (_Jv_IsBinaryCompatibilityABI (klass))"}, {"sha": "1ef56742398da718eef86a3c5c8cde3990d8a7c3", "filename": "libjava/prims.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf94e58cbde0c5e906720768bd738588a1a075a/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf94e58cbde0c5e906720768bd738588a1a075a/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=2cf94e58cbde0c5e906720768bd738588a1a075a", "patch": "@@ -353,7 +353,7 @@ _Jv_equalUtf8Classnames (const Utf8Const *a, const Utf8Const *b)\n \n /* Count the number of Unicode chars encoded in a given Ut8 string. */\n int\n-_Jv_strLengthUtf8(char* str, int len)\n+_Jv_strLengthUtf8(const char* str, int len)\n {\n   unsigned char* ptr;\n   unsigned char* limit;\n@@ -374,7 +374,7 @@ _Jv_strLengthUtf8(char* str, int len)\n  * This returns the same hash value as specified or java.lang.String.hashCode.\n  */\n jint\n-_Jv_hashUtf8String (char* str, int len)\n+_Jv_hashUtf8String (const char* str, int len)\n {\n   unsigned char* ptr = (unsigned char*) str;\n   unsigned char* limit = ptr + len;\n@@ -391,7 +391,7 @@ _Jv_hashUtf8String (char* str, int len)\n }\n \n void\n-_Jv_Utf8Const::init(char *s, int len)\n+_Jv_Utf8Const::init(const char *s, int len)\n {\n   ::memcpy (data, s, len);\n   data[len] = 0;\n@@ -400,7 +400,7 @@ _Jv_Utf8Const::init(char *s, int len)\n }\n \n _Jv_Utf8Const *\n-_Jv_makeUtf8Const (char* s, int len)\n+_Jv_makeUtf8Const (const char* s, int len)\n {\n   if (len < 0)\n     len = strlen (s);\n@@ -794,7 +794,7 @@ DECLARE_PRIM_TYPE(double)\n DECLARE_PRIM_TYPE(void)\n \n void\n-_Jv_InitPrimClass (jclass cl, char *cname, char sig, int len)\n+_Jv_InitPrimClass (jclass cl, const char *cname, char sig, int len)\n {    \n   using namespace java::lang::reflect;\n "}, {"sha": "90890a6257af402cb3cf013f953fe55f78191902", "filename": "libjava/verify.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf94e58cbde0c5e906720768bd738588a1a075a/libjava%2Fverify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf94e58cbde0c5e906720768bd738588a1a075a/libjava%2Fverify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fverify.cc?ref=2cf94e58cbde0c5e906720768bd738588a1a075a", "patch": "@@ -206,7 +206,7 @@ class _Jv_BytecodeVerifier\n     return r;\n   }\n \n-  __attribute__ ((__noreturn__)) void verify_fail (char *s, jint pc = -1)\n+  __attribute__ ((__noreturn__)) void verify_fail (const char *s, jint pc = -1)\n   {\n     using namespace java::lang;\n     StringBuffer *buf = new StringBuffer ();"}]}