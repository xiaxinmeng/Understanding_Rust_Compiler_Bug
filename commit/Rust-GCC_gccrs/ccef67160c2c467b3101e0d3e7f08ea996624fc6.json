{"sha": "ccef67160c2c467b3101e0d3e7f08ea996624fc6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NlZjY3MTYwYzJjNDY3YjMxMDFlMGQzZTdmMDhlYTk5NjYyNGZjNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-12-11T17:16:48Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-12-11T17:16:48Z"}, "message": "re PR tree-optimization/88444 (ICE: tree check: expected ssa_name, have integer_cst in live_on_edge, at tree-vrp.c:468; or ICE: tree check: expected ssa_name, have integer_cst in get_value_range, at vr-values.c:84)\n\n\tPR tree-optimization/88444\n\t* tree-vrp.c (register_edge_assert_for_2): Only register assertions\n\tfor conversions if rhs1 is a SSA_NAME.\n\n\t* gcc.dg/pr88444.c: New test.\n\nFrom-SVN: r267026", "tree": {"sha": "a427fc0673507bec170c6e3473d4b663b3730534", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a427fc0673507bec170c6e3473d4b663b3730534"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccef67160c2c467b3101e0d3e7f08ea996624fc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccef67160c2c467b3101e0d3e7f08ea996624fc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccef67160c2c467b3101e0d3e7f08ea996624fc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccef67160c2c467b3101e0d3e7f08ea996624fc6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5b238a4591932c5e5a28fa8f9b3a413a3ce641a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b238a4591932c5e5a28fa8f9b3a413a3ce641a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b238a4591932c5e5a28fa8f9b3a413a3ce641a6"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "94c7ca75cab5fa06f733fc47abb98681cfc7ad4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccef67160c2c467b3101e0d3e7f08ea996624fc6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccef67160c2c467b3101e0d3e7f08ea996624fc6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ccef67160c2c467b3101e0d3e7f08ea996624fc6", "patch": "@@ -1,3 +1,9 @@\n+2018-12-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/88444\n+\t* tree-vrp.c (register_edge_assert_for_2): Only register assertions\n+\tfor conversions if rhs1 is a SSA_NAME.\n+\n 2018-12-11  Dimitar Dimitrov  <dimitar@dinux.eu>\n \n \t* cfgexpand.c (asm_clobber_reg_is_valid): Also produce"}, {"sha": "e69abe6288b38386c585709ee869e8aa8919c92e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccef67160c2c467b3101e0d3e7f08ea996624fc6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccef67160c2c467b3101e0d3e7f08ea996624fc6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ccef67160c2c467b3101e0d3e7f08ea996624fc6", "patch": "@@ -1,3 +1,8 @@\n+2018-12-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/88444\n+\t* gcc.dg/pr88444.c: New test.\n+\n 2018-12-11  Dimitar Dimitrov  <dimitar@dinux.eu>\n \n \t* gcc.target/i386/pr52813.c: New test."}, {"sha": "01b0d45ed835d11fc473df7d6f8920d37e40d0aa", "filename": "gcc/testsuite/gcc.dg/pr88444.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccef67160c2c467b3101e0d3e7f08ea996624fc6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88444.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccef67160c2c467b3101e0d3e7f08ea996624fc6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88444.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88444.c?ref=ccef67160c2c467b3101e0d3e7f08ea996624fc6", "patch": "@@ -0,0 +1,30 @@\n+/* PR tree-optimization/88444 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -ftree-vrp -fno-tree-ccp -fno-tree-forwprop -fno-tree-fre\" } */\n+\n+int v;\n+\n+int\n+foo (int, int);\n+\n+static inline int\n+bar (long int x)\n+{\n+  return !!x ? x : 1;\n+}\n+\n+static inline void\n+baz (int x)\n+{\n+  v += foo (0, 0) + bar (x);\n+}\n+\n+void\n+qux (void)\n+{\n+  int a = 0;\n+  v = v || foo (0, 0);\n+  v = v || foo (0, 0);\n+  v = v || foo (0, 0);\n+  baz (a);\n+}"}, {"sha": "864de4195da9e25fbd662b62826ed00a51bf3d83", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccef67160c2c467b3101e0d3e7f08ea996624fc6/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccef67160c2c467b3101e0d3e7f08ea996624fc6/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=ccef67160c2c467b3101e0d3e7f08ea996624fc6", "patch": "@@ -2894,6 +2894,7 @@ register_edge_assert_for_2 (tree name, edge e,\n \t{\n \t  name2 = gimple_assign_rhs1 (def_stmt);\n \t  if (CONVERT_EXPR_CODE_P (rhs_code)\n+\t      && TREE_CODE (name2) == SSA_NAME\n \t      && INTEGRAL_TYPE_P (TREE_TYPE (name2))\n \t      && TYPE_UNSIGNED (TREE_TYPE (name2))\n \t      && prec == TYPE_PRECISION (TREE_TYPE (name2))\n@@ -2990,6 +2991,7 @@ register_edge_assert_for_2 (tree name, edge e,\n \t  wide_int rmin, rmax;\n \t  tree rhs1 = gimple_assign_rhs1 (def_stmt);\n \t  if (INTEGRAL_TYPE_P (TREE_TYPE (rhs1))\n+\t      && TREE_CODE (rhs1) == SSA_NAME\n \t      /* Make sure the relation preserves the upper/lower boundary of\n \t         the range conservatively.  */\n \t      && (comp_code == NE_EXPR\n@@ -3054,6 +3056,7 @@ register_edge_assert_for_2 (tree name, edge e,\n \t\t{\n \t\t  names[1] = gimple_assign_rhs1 (def_stmt2);\n \t\t  if (!CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (def_stmt2))\n+\t\t      || TREE_CODE (names[1]) != SSA_NAME\n \t\t      || !INTEGRAL_TYPE_P (TREE_TYPE (names[1]))\n \t\t      || (TYPE_PRECISION (TREE_TYPE (name2))\n \t\t\t  != TYPE_PRECISION (TREE_TYPE (names[1]))))"}]}