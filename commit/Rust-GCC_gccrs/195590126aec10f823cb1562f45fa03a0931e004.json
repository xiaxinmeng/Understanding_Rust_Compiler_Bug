{"sha": "195590126aec10f823cb1562f45fa03a0931e004", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk1NTkwMTI2YWVjMTBmODIzY2IxNTYyZjQ1ZmEwM2EwOTMxZTAwNA==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@redhat.com", "date": "2001-05-31T23:40:54Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2001-05-31T23:40:54Z"}, "message": "parse.y (lookup_field_wrapper): Test `name' code.\n\n2001-05-31  Alexandre Petit-Bianco  <apbianco@redhat.com>\n\n\t* parse.y (lookup_field_wrapper): Test `name' code.\n\t(resolve_qualified_expression_name): Test `qual_wfl' code.\n\t(qualify_ambiguous_name): Handle `CONVERT_EXPR', fixe indentation,\n\thandle `qual_wfl' by code.\n\t(maybe_build_primttype_type_ref): Test `wfl' code.\n\n(http://gcc.gnu.org/ml/gcc-patches/2001-05/msg02180.html )\n\nFrom-SVN: r42764", "tree": {"sha": "c7303948c2c127acd70476a18e59d7eb746a8a57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7303948c2c127acd70476a18e59d7eb746a8a57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/195590126aec10f823cb1562f45fa03a0931e004", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/195590126aec10f823cb1562f45fa03a0931e004", "html_url": "https://github.com/Rust-GCC/gccrs/commit/195590126aec10f823cb1562f45fa03a0931e004", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/195590126aec10f823cb1562f45fa03a0931e004/comments", "author": null, "committer": null, "parents": [{"sha": "bc440d046869987d4ea3e772e4921115cd61eb09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc440d046869987d4ea3e772e4921115cd61eb09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc440d046869987d4ea3e772e4921115cd61eb09"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "f13bfbe6f2e80ae2c3c629d1622e9fd9878da7bc", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/195590126aec10f823cb1562f45fa03a0931e004/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/195590126aec10f823cb1562f45fa03a0931e004/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=195590126aec10f823cb1562f45fa03a0931e004", "patch": "@@ -1,3 +1,11 @@\n+2001-05-31  Alexandre Petit-Bianco  <apbianco@redhat.com>\n+\n+\t* parse.y (lookup_field_wrapper): Test `name' code.\n+\t(resolve_qualified_expression_name): Test `qual_wfl' code.\n+\t(qualify_ambiguous_name): Handle `CONVERT_EXPR', fixe indentation,\n+\thandle `qual_wfl' by code.\n+\t(maybe_build_primttype_type_ref): Test `wfl' code.\n+\n 2001-05-23  Theodore Papadopoulo  <Theodore.Papadopoulo@sophia.inria.fr>\n \n \t* Make-lang.in ($(srcdir)/java/gcj.info): Added dependencies on"}, {"sha": "4ae8812e668e220a1ec421612e07c511cc0a54c5", "filename": "gcc/java/parse.y", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/195590126aec10f823cb1562f45fa03a0931e004/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/195590126aec10f823cb1562f45fa03a0931e004/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=195590126aec10f823cb1562f45fa03a0931e004", "patch": "@@ -4079,7 +4079,7 @@ lookup_field_wrapper (class, name)\n   /* Last chance: if we're within the context of an inner class, we\n      might be trying to access a local variable defined in an outer\n      context. We try to look for it now. */\n-  if (INNER_CLASS_TYPE_P (class))\n+  if (INNER_CLASS_TYPE_P (class) && TREE_CODE (name) == IDENTIFIER_NODE)\n     {\n       tree new_name;\n       MANGLE_OUTER_LOCAL_VARIABLE_NAME (new_name, name);\n@@ -9221,7 +9221,8 @@ resolve_qualified_expression_name (wfl, found_decl, where_found, type_found)\n       previous_call_static = 0;\n \n       /* It can be the keyword THIS */\n-      if (EXPR_WFL_NODE (qual_wfl) == this_identifier_node)\n+      if (TREE_CODE (qual_wfl) == EXPR_WITH_FILE_LOCATION\n+\t  && EXPR_WFL_NODE (qual_wfl) == this_identifier_node)\n \t{\n \t  if (!current_this)\n \t    {\n@@ -9272,7 +9273,8 @@ resolve_qualified_expression_name (wfl, found_decl, where_found, type_found)\n \t}\n \n       /* 15.10.2 Accessing Superclass Members using SUPER */\n-      if (EXPR_WFL_NODE (qual_wfl) == super_identifier_node)\n+      if (TREE_CODE (qual_wfl) == EXPR_WITH_FILE_LOCATION\n+\t  && EXPR_WFL_NODE (qual_wfl) == super_identifier_node)\n \t{\n \t  tree node;\n \t  /* Check on the restricted use of SUPER */\n@@ -10844,6 +10846,10 @@ qualify_ambiguous_name (id)\n     else if (code == INTEGER_CST)\n       name = qual_wfl;\n     \n+    else if (code == CONVERT_EXPR &&\n+\t     TREE_CODE (TREE_OPERAND (qual_wfl, 0)) == EXPR_WITH_FILE_LOCATION)\n+      name = TREE_OPERAND (qual_wfl, 0);\n+    \n     else if ((code == ARRAY_REF || code == CALL_EXPR || code == MODIFY_EXPR) &&\n \t     TREE_CODE (TREE_OPERAND (qual_wfl, 0)) == EXPR_WITH_FILE_LOCATION)\n       name = EXPR_WFL_NODE (TREE_OPERAND (qual_wfl, 0));\n@@ -10858,7 +10864,7 @@ qualify_ambiguous_name (id)\n \tqual_wfl = QUAL_WFL (qual);\n \tagain = 1;\n       }\n-    else \n+    else\n       {\n \tname = EXPR_WFL_NODE (qual_wfl);\n \tif (!name)\n@@ -10886,8 +10892,10 @@ qualify_ambiguous_name (id)\n \tqual_wfl = QUAL_WFL (qual);\n \tif (TREE_CODE (qual_wfl) == CALL_EXPR)\n \t  again = 1;\n-\telse\n+\telse if (TREE_CODE (qual_wfl) == EXPR_WITH_FILE_LOCATION)\n \t  name = EXPR_WFL_NODE (qual_wfl);\n+\telse if (TREE_CODE (qual_wfl) == NEW_CLASS_EXPR)\n+\t  name = TREE_OPERAND (qual_wfl, 0);\n \tthis_found = 1;\n       }\n     /* If we have a SUPER, we set the context accordingly */\n@@ -12408,6 +12416,7 @@ maybe_build_primttype_type_ref (rhs, wfl)\n       if (TREE_CODE (n) == VAR_DECL \n \t  && DECL_NAME (n) == TYPE_identifier_node\n \t  && rhs_type == class_ptr_type\n+\t  && TREE_CODE (wfl) == EXPR_WITH_FILE_LOCATION\n \t  && TREE_CODE (EXPR_WFL_NODE (wfl)) == IDENTIFIER_NODE)\n \t{\n \t  const char *self_name = IDENTIFIER_POINTER (EXPR_WFL_NODE (wfl));"}]}