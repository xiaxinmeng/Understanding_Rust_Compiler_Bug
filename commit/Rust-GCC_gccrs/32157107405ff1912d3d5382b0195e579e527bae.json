{"sha": "32157107405ff1912d3d5382b0195e579e527bae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzIxNTcxMDc0MDVmZjE5MTJkM2Q1MzgyYjAxOTVlNTc5ZTUyN2JhZQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2011-12-08T19:00:55Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-12-08T19:00:55Z"}, "message": "re PR fortran/50815 (ICE on allocation of deferred length character scalar dummy argument when -fbounds-check)\n\n2011-12-08  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/50815\n        * trans-decl.c (add_argument_checking): Skip bound checking\n        for deferred-length strings.\n\n2011-12-08  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/50815\n        * gfortran.dg/bounds_check_16.f90: New.\n\nFrom-SVN: r182134", "tree": {"sha": "531aa44971a86bc6628e1a87dfea2ea320382f9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/531aa44971a86bc6628e1a87dfea2ea320382f9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32157107405ff1912d3d5382b0195e579e527bae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32157107405ff1912d3d5382b0195e579e527bae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32157107405ff1912d3d5382b0195e579e527bae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32157107405ff1912d3d5382b0195e579e527bae/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3787b8ffe0ccf1f5cc47c2065f535f8a944156ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3787b8ffe0ccf1f5cc47c2065f535f8a944156ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3787b8ffe0ccf1f5cc47c2065f535f8a944156ea"}], "stats": {"total": 68, "additions": 66, "deletions": 2}, "files": [{"sha": "abaa344c12eda7c6a43cb82266ef6abce5818f35", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32157107405ff1912d3d5382b0195e579e527bae/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32157107405ff1912d3d5382b0195e579e527bae/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=32157107405ff1912d3d5382b0195e579e527bae", "patch": "@@ -1,3 +1,9 @@\n+2011-12-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/50815\n+\t* trans-decl.c (add_argument_checking): Skip bound checking\n+\tfor deferred-length strings.\n+\n 2011-12-08  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/51378"}, {"sha": "50b64740b99e644e7c60eaf51932b5f9bc5d821a", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32157107405ff1912d3d5382b0195e579e527bae/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32157107405ff1912d3d5382b0195e579e527bae/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=32157107405ff1912d3d5382b0195e579e527bae", "patch": "@@ -4695,8 +4695,10 @@ add_argument_checking (stmtblock_t *block, gfc_symbol *sym)\n \t   if the actual argument is (part of) an array, but only if the\n \t   dummy argument is an array. (See \"Sequence association\" in\n \t   Section 12.4.1.4 for F95 and 12.4.1.5 for F2003.)  */\n-\tif (fsym->attr.pointer || fsym->attr.allocatable\n-\t    || (fsym->as && fsym->as->type == AS_ASSUMED_SHAPE))\n+\tif (fsym->ts.deferred)\n+\t  continue;\n+\telse if (fsym->attr.pointer || fsym->attr.allocatable\n+\t\t || (fsym->as && fsym->as->type == AS_ASSUMED_SHAPE))\n \t  {\n \t    comparison = NE_EXPR;\n \t    message = _(\"Actual string length does not match the declared one\""}, {"sha": "30f1609936908ba42e31e9516d6a09288bf1c57d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32157107405ff1912d3d5382b0195e579e527bae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32157107405ff1912d3d5382b0195e579e527bae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=32157107405ff1912d3d5382b0195e579e527bae", "patch": "@@ -1,3 +1,8 @@\n+2011-12-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/50815\n+\t* gfortran.dg/bounds_check_16.f90: New.\n+\n 2011-12-08  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/51378"}, {"sha": "38a86306e93f8161b93343e2e8fd6288ac879c69", "filename": "gcc/testsuite/gfortran.dg/bounds_check_16.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32157107405ff1912d3d5382b0195e579e527bae/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_16.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32157107405ff1912d3d5382b0195e579e527bae/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_16.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_16.f90?ref=32157107405ff1912d3d5382b0195e579e527bae", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do compile }\n+! { dg-options \"-fcheck=bounds\" }\n+!\n+! PR fortran/50815\n+!\n+! Don't check the bounds of deferred-length strings.\n+! gfortran had an ICE before because it did.\n+!\n+SUBROUTINE TEST(VALUE)\n+    IMPLICIT NONE\n+    CHARACTER(LEN=:),    ALLOCATABLE    ::    VALUE\n+    CHARACTER(LEN=128)    ::    VAL\n+    VALUE = VAL\n+END SUBROUTINE TEST"}, {"sha": "f71e96f75de9f0456419bc027b83f4d981d882fd", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32157107405ff1912d3d5382b0195e579e527bae/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32157107405ff1912d3d5382b0195e579e527bae/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=32157107405ff1912d3d5382b0195e579e527bae", "patch": "@@ -1063,6 +1063,25 @@ require_type (st_parameter_dt *dtp, bt expected, bt actual, const fnode *f)\n }\n \n \n+static int\n+require_numeric_type (st_parameter_dt *dtp, bt actual, const fnode *f)\n+{\n+#define BUFLEN 100\n+  char buffer[BUFLEN];\n+\n+  if (actual == BT_INTEGER || actual == BT_REAL || actual == BT_COMPLEX)\n+    return 0;\n+\n+  /* Adjust item_count before emitting error message.  */\n+  snprintf (buffer, BUFLEN, \n+\t    \"Expected numeric type for item %d in formatted transfer, got %s\",\n+\t    dtp->u.p.item_count - 1, type_name (actual));\n+\n+  format_error (dtp, f, buffer);\n+  return 1;\n+}\n+\n+\n /* This function is in the main loop for a formatted data transfer\n    statement.  It would be natural to implement this as a coroutine\n    with the user program, but C makes that awkward.  We loop,\n@@ -1147,6 +1166,9 @@ formatted_transfer_scalar_read (st_parameter_dt *dtp, bt type, void *p, int kind\n \t  if (n == 0)\n \t    goto need_read_data;\n \t  if (!(compile_options.allow_std & GFC_STD_GNU)\n+\t      && require_numeric_type (dtp, type, f))\n+\t    return;\n+\t  if (!(compile_options.allow_std & GFC_STD_F2008)\n               && require_type (dtp, BT_INTEGER, type, f))\n \t    return;\n \t  read_radix (dtp, f, p, kind, 2);\n@@ -1156,6 +1178,9 @@ formatted_transfer_scalar_read (st_parameter_dt *dtp, bt type, void *p, int kind\n \t  if (n == 0)\n \t    goto need_read_data; \n \t  if (!(compile_options.allow_std & GFC_STD_GNU)\n+\t      && require_numeric_type (dtp, type, f))\n+\t    return;\n+\t  if (!(compile_options.allow_std & GFC_STD_F2008)\n               && require_type (dtp, BT_INTEGER, type, f))\n \t    return;\n \t  read_radix (dtp, f, p, kind, 8);\n@@ -1165,6 +1190,9 @@ formatted_transfer_scalar_read (st_parameter_dt *dtp, bt type, void *p, int kind\n \t  if (n == 0)\n \t    goto need_read_data;\n \t  if (!(compile_options.allow_std & GFC_STD_GNU)\n+\t      && require_numeric_type (dtp, type, f))\n+\t    return;\n+\t  if (!(compile_options.allow_std & GFC_STD_F2008)\n               && require_type (dtp, BT_INTEGER, type, f))\n \t    return;\n \t  read_radix (dtp, f, p, kind, 16);\n@@ -1548,6 +1576,9 @@ formatted_transfer_scalar_write (st_parameter_dt *dtp, bt type, void *p, int kin\n \t  if (n == 0)\n \t    goto need_data;\n \t  if (!(compile_options.allow_std & GFC_STD_GNU)\n+\t      && require_numeric_type (dtp, type, f))\n+\t    return;\n+\t  if (!(compile_options.allow_std & GFC_STD_F2008)\n               && require_type (dtp, BT_INTEGER, type, f))\n \t    return;\n \t  write_b (dtp, f, p, kind);\n@@ -1557,6 +1588,9 @@ formatted_transfer_scalar_write (st_parameter_dt *dtp, bt type, void *p, int kin\n \t  if (n == 0)\n \t    goto need_data; \n \t  if (!(compile_options.allow_std & GFC_STD_GNU)\n+\t      && require_numeric_type (dtp, type, f))\n+\t    return;\n+\t  if (!(compile_options.allow_std & GFC_STD_F2008)\n               && require_type (dtp, BT_INTEGER, type, f))\n \t    return;\n \t  write_o (dtp, f, p, kind);\n@@ -1566,6 +1600,9 @@ formatted_transfer_scalar_write (st_parameter_dt *dtp, bt type, void *p, int kin\n \t  if (n == 0)\n \t    goto need_data;\n \t  if (!(compile_options.allow_std & GFC_STD_GNU)\n+\t      && require_numeric_type (dtp, type, f))\n+\t    return;\n+\t  if (!(compile_options.allow_std & GFC_STD_F2008)\n               && require_type (dtp, BT_INTEGER, type, f))\n \t    return;\n \t  write_z (dtp, f, p, kind);"}]}