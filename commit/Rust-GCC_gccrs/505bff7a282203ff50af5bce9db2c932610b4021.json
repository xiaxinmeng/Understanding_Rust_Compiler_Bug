{"sha": "505bff7a282203ff50af5bce9db2c932610b4021", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA1YmZmN2EyODIyMDNmZjUwYWY1YmNlOWRiMmM5MzI2MTBiNDAyMQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-10-23T19:40:26Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-10-23T19:40:26Z"}, "message": "tests for Darwin CFStrings\n\ngcc/testsuite:\n\n\tBased on the CFString implementation in FSF apple/trunk branch.\n\n\t* gcc.dg/darwin-cfstring-1.c: New.\n\t* gcc.dg/darwin-cfstring-2.c: New.\n\t* gcc.dg/torture/darwin-cfstring-3.c: New.\n\t* g++.dg/other/darwin-cfstring1.C: New.\n\t* g++.dg/torture/darwin-cfstring-3.C: New.\n\nFrom-SVN: r165889", "tree": {"sha": "1605a08544e7158e32cd50c39ab0a6af4d646d20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1605a08544e7158e32cd50c39ab0a6af4d646d20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/505bff7a282203ff50af5bce9db2c932610b4021", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/505bff7a282203ff50af5bce9db2c932610b4021", "html_url": "https://github.com/Rust-GCC/gccrs/commit/505bff7a282203ff50af5bce9db2c932610b4021", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/505bff7a282203ff50af5bce9db2c932610b4021/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8a18805817b17b09764527a86ebc551fa5900b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8a18805817b17b09764527a86ebc551fa5900b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8a18805817b17b09764527a86ebc551fa5900b3"}], "stats": {"total": 135, "additions": 135, "deletions": 0}, "files": [{"sha": "cfebd35ba5aa701b3d199fd1d375fd99dc983f6a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/505bff7a282203ff50af5bce9db2c932610b4021/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/505bff7a282203ff50af5bce9db2c932610b4021/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=505bff7a282203ff50af5bce9db2c932610b4021", "patch": "@@ -1,3 +1,13 @@\n+2010-10-23  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\tBased on the CFString implementation in FSF apple/trunk branch.\n+\n+\t* gcc.dg/darwin-cfstring-1.c: New.\n+\t* gcc.dg/darwin-cfstring-2.c: New.\n+\t* gcc.dg/torture/darwin-cfstring-3.c: New.\n+\t* g++.dg/other/darwin-cfstring1.C: New.\n+\t* g++.dg/torture/darwin-cfstring-3.C: New.\n+\n 2010-10-23  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc.dg/demangle-1.m: New test."}, {"sha": "b30ba9bef918997cdd859d786d0d28338c3a8015", "filename": "gcc/testsuite/g++.dg/other/darwin-cfstring1.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/505bff7a282203ff50af5bce9db2c932610b4021/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdarwin-cfstring1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/505bff7a282203ff50af5bce9db2c932610b4021/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdarwin-cfstring1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdarwin-cfstring1.C?ref=505bff7a282203ff50af5bce9db2c932610b4021", "patch": "@@ -0,0 +1,25 @@\n+/* Test whether the __builtin__CFStringMakeConstantString \n+   \"function\" fails gracefully when handed a non-constant\n+   argument.  This will only work on MacOS X 10.1.2 and later.  */\n+/* Developed by Ziemowit Laski <zlaski@apple.com>.  */\n+\n+/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-options \"-mconstant-cfstrings\" } */\n+\n+#include <CoreFoundation/CFString.h>\n+\n+#ifdef __CONSTANT_CFSTRINGS__\n+#undef CFSTR\n+#define CFSTR(STR)  ((CFStringRef) __builtin___CFStringMakeConstantString (STR))\n+#endif\n+\n+extern int cond;\n+extern const char *func(void);\n+\n+int main(void) {\n+  CFStringRef s1 = CFSTR(\"Str1\");\n+  CFStringRef s2 = CFSTR(cond? \"Str2\": \"Str3\"); /* { dg-error \"CFString literal expression is not a string constant\" } */\n+  CFStringRef s3 = CFSTR(func());  /* { dg-error \"CFString literal expression is not a string constant\" } */\n+\n+  return 0;\n+}"}, {"sha": "2d755ec8dd0e4e66379236f034af3dcb00509ac5", "filename": "gcc/testsuite/g++.dg/torture/darwin-cfstring-3.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/505bff7a282203ff50af5bce9db2c932610b4021/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fdarwin-cfstring-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/505bff7a282203ff50af5bce9db2c932610b4021/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fdarwin-cfstring-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fdarwin-cfstring-3.C?ref=505bff7a282203ff50af5bce9db2c932610b4021", "patch": "@@ -0,0 +1,30 @@\n+/* Test whether the __builtin__CFStringMakeConstantString \n+   \"function\" generates compile-time objects with the correct layout. */\n+/* Developed by Ziemowit Laski <zlaski@apple.com>.  */\n+\n+/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-options \"-mconstant-cfstrings\" } */\n+\n+typedef const struct __CFString *CFStringRef;\n+\n+#ifdef __CONSTANT_CFSTRINGS__\n+#define CFSTR(STR)  ((CFStringRef) __builtin___CFStringMakeConstantString (STR))\n+#else\n+#error __CONSTANT_CFSTRINGS__ not defined\n+#endif\n+\n+extern int cond;\n+extern const char *func(void);\n+\n+CFStringRef s0 = CFSTR(\"Hello\" \"there\");\n+\n+void foo(void) {\n+  const CFStringRef s1 = CFSTR(\"Str1\");\n+\n+  s0 = s1;\n+}\n+\n+/* { dg-final { scan-assembler \"\\\\.long\\[ \\\\t\\]+___CFConstantStringClassReference\\n\\[ \\\\t\\]*\\\\.long\\[ \\\\t\\]+1992\\n\\[ \\\\t\\]*\\\\.long\\[ \\\\t\\]+LC.*\\n\\[ \\\\t\\]*\\\\.long\\[ \\\\t\\]+4\\n\" { target { *-*-darwin* && { ! lp64 } } } } } */\n+/* { dg-final { scan-assembler \"\\\\.long\\[ \\\\t\\]+___CFConstantStringClassReference\\n\\[ \\\\t\\]*\\\\.long\\[ \\\\t\\]+1992\\n\\[ \\\\t\\]*\\\\.long\\[ \\\\t\\]+LC.*\\n\\[ \\\\t\\]*\\\\.long\\[ \\\\t\\]+10\\n\" { target { *-*-darwin* && { ! lp64 } } } } } */\n+/* { dg-final { scan-assembler \".quad\\t___CFConstantStringClassReference\\n\\t.long\\t1992\\n\\t.space 4\\n\\t.quad\\t.*\\n\\t.quad\\t4\\n\" { target { *-*-darwin* && {  lp64 } } } } } */\n+/* { dg-final { scan-assembler \".quad\\t___CFConstantStringClassReference\\n\\t.long\\t1992\\n\\t.space 4\\n\\t.quad\\t.*\\n\\t.quad\\t10\\n\" { target { *-*-darwin* && {  lp64 } } } } } */"}, {"sha": "b9565e721a31ff8d743f219c517297bc1c78cc68", "filename": "gcc/testsuite/gcc.dg/darwin-cfstring-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/505bff7a282203ff50af5bce9db2c932610b4021/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-cfstring-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/505bff7a282203ff50af5bce9db2c932610b4021/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-cfstring-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-cfstring-1.c?ref=505bff7a282203ff50af5bce9db2c932610b4021", "patch": "@@ -0,0 +1,28 @@\n+/* Test whether the __builtin__CFStringMakeConstantString \n+   \"function\" fails gracefully when handed a non-constant\n+   argument.  This will only work on MacOS X 10.1.2 and later.  */\n+/* Developed by Ziemowit Laski <zlaski@apple.com>.  */\n+\n+/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-options \"-mconstant-cfstrings\" } */\n+\n+typedef const struct __CFString *CFStringRef;\n+\n+#ifdef __CONSTANT_CFSTRINGS__\n+#define CFSTR(STR)  ((CFStringRef) __builtin___CFStringMakeConstantString (STR))\n+#else\n+#error __CONSTANT_CFSTRINGS__ not defined\n+#endif\n+\n+extern int cond;\n+extern const char *func(void);\n+\n+const CFStringRef s0 = CFSTR(\"Hello\" \"there\");\n+\n+int main(void) {\n+  CFStringRef s1 = CFSTR(\"Str1\");\n+  CFStringRef s2 = CFSTR(cond? \"Str2\": \"Str3\"); /* { dg-error \"CFString literal expression is not a string constant\" } */\n+  CFStringRef s3 = CFSTR(func());  /* { dg-error \"CFString literal expression is not a string constant\" } */\n+\n+  return 0;\n+}"}, {"sha": "1c724b25cfe048525c66297fa5951232a6755ade", "filename": "gcc/testsuite/gcc.dg/darwin-cfstring-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/505bff7a282203ff50af5bce9db2c932610b4021/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-cfstring-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/505bff7a282203ff50af5bce9db2c932610b4021/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-cfstring-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-cfstring-2.c?ref=505bff7a282203ff50af5bce9db2c932610b4021", "patch": "@@ -0,0 +1,12 @@\n+/* Test whether the __builtin__CFStringMakeConstantString \n+   \"function\" fails gracefully when used without the\n+   -mconstant-cfstrings flag.  */\n+/* Developed by Ziemowit Laski <zlaski@apple.com>.  */\n+\n+/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-options \"-mno-constant-cfstrings\" } */\n+\n+typedef const struct __CFString *CFStringRef;\n+\n+const CFStringRef S = ((CFStringRef)__builtin___CFStringMakeConstantString(\"Testing\"));\n+/* { dg-error \"built-in\" \"built-in function .* requires .* flag\" { target *-*-* } 11 } */"}, {"sha": "2d755ec8dd0e4e66379236f034af3dcb00509ac5", "filename": "gcc/testsuite/gcc.dg/torture/darwin-cfstring-3.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/505bff7a282203ff50af5bce9db2c932610b4021/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fdarwin-cfstring-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/505bff7a282203ff50af5bce9db2c932610b4021/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fdarwin-cfstring-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fdarwin-cfstring-3.c?ref=505bff7a282203ff50af5bce9db2c932610b4021", "patch": "@@ -0,0 +1,30 @@\n+/* Test whether the __builtin__CFStringMakeConstantString \n+   \"function\" generates compile-time objects with the correct layout. */\n+/* Developed by Ziemowit Laski <zlaski@apple.com>.  */\n+\n+/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-options \"-mconstant-cfstrings\" } */\n+\n+typedef const struct __CFString *CFStringRef;\n+\n+#ifdef __CONSTANT_CFSTRINGS__\n+#define CFSTR(STR)  ((CFStringRef) __builtin___CFStringMakeConstantString (STR))\n+#else\n+#error __CONSTANT_CFSTRINGS__ not defined\n+#endif\n+\n+extern int cond;\n+extern const char *func(void);\n+\n+CFStringRef s0 = CFSTR(\"Hello\" \"there\");\n+\n+void foo(void) {\n+  const CFStringRef s1 = CFSTR(\"Str1\");\n+\n+  s0 = s1;\n+}\n+\n+/* { dg-final { scan-assembler \"\\\\.long\\[ \\\\t\\]+___CFConstantStringClassReference\\n\\[ \\\\t\\]*\\\\.long\\[ \\\\t\\]+1992\\n\\[ \\\\t\\]*\\\\.long\\[ \\\\t\\]+LC.*\\n\\[ \\\\t\\]*\\\\.long\\[ \\\\t\\]+4\\n\" { target { *-*-darwin* && { ! lp64 } } } } } */\n+/* { dg-final { scan-assembler \"\\\\.long\\[ \\\\t\\]+___CFConstantStringClassReference\\n\\[ \\\\t\\]*\\\\.long\\[ \\\\t\\]+1992\\n\\[ \\\\t\\]*\\\\.long\\[ \\\\t\\]+LC.*\\n\\[ \\\\t\\]*\\\\.long\\[ \\\\t\\]+10\\n\" { target { *-*-darwin* && { ! lp64 } } } } } */\n+/* { dg-final { scan-assembler \".quad\\t___CFConstantStringClassReference\\n\\t.long\\t1992\\n\\t.space 4\\n\\t.quad\\t.*\\n\\t.quad\\t4\\n\" { target { *-*-darwin* && {  lp64 } } } } } */\n+/* { dg-final { scan-assembler \".quad\\t___CFConstantStringClassReference\\n\\t.long\\t1992\\n\\t.space 4\\n\\t.quad\\t.*\\n\\t.quad\\t10\\n\" { target { *-*-darwin* && {  lp64 } } } } } */"}]}