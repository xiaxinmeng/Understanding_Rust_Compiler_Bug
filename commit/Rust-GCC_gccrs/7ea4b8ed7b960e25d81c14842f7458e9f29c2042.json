{"sha": "7ea4b8ed7b960e25d81c14842f7458e9f29c2042", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VhNGI4ZWQ3Yjk2MGUyNWQ4MWMxNDg0MmY3NDU4ZTlmMjljMjA0Mg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-10-26T07:12:02Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-10-26T07:12:02Z"}, "message": "re PR tree-optimization/87746 (ICE in vect_update_misalignment_for_peel, at tree-vect-data-refs.c:1035)\n\n2018-10-26  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/87746\n\t* tree-vect-data-refs.c (vect_update_misalignment_for_peel):\n\tSimplify and fix WRT strided store groups with size not\n\tequal to step in element count.\n\t(vect_analyze_group_access_1): Dump the whole group.\n\n\t* gcc.dg/pr87746.c: New testcase.\n\nFrom-SVN: r265517", "tree": {"sha": "2abb506de45f1329aea4e5960d30e79f3a3e2d5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2abb506de45f1329aea4e5960d30e79f3a3e2d5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ea4b8ed7b960e25d81c14842f7458e9f29c2042", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ea4b8ed7b960e25d81c14842f7458e9f29c2042", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ea4b8ed7b960e25d81c14842f7458e9f29c2042", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ea4b8ed7b960e25d81c14842f7458e9f29c2042/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "682f212a901991c4f5c575489cbc99fb84298c6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/682f212a901991c4f5c575489cbc99fb84298c6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/682f212a901991c4f5c575489cbc99fb84298c6c"}], "stats": {"total": 75, "additions": 55, "deletions": 20}, "files": [{"sha": "46524ee4d519b07684d78532cc5e649b11005df9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ea4b8ed7b960e25d81c14842f7458e9f29c2042/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ea4b8ed7b960e25d81c14842f7458e9f29c2042/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ea4b8ed7b960e25d81c14842f7458e9f29c2042", "patch": "@@ -1,3 +1,11 @@\n+2018-10-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/87746\n+\t* tree-vect-data-refs.c (vect_update_misalignment_for_peel):\n+\tSimplify and fix WRT strided store groups with size not\n+\tequal to step in element count.\n+\t(vect_analyze_group_access_1): Dump the whole group.\n+\n 2018-10-25  Carl Love  <cel@us.ibm.com>\n \n \t* config/rs6000/rs6000-c.c (P9V_BUILTIN_VEC_VSCEDPGT,"}, {"sha": "082e342f3f918e4e21325ffcab83a0d0d11c8532", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ea4b8ed7b960e25d81c14842f7458e9f29c2042/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ea4b8ed7b960e25d81c14842f7458e9f29c2042/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7ea4b8ed7b960e25d81c14842f7458e9f29c2042", "patch": "@@ -1,3 +1,8 @@\n+2018-10-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/87746\n+\t* gcc.dg/pr87746.c: New testcase.\n+\n 2018-10-26  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* gcc.dg/pr78973-2.c: Remove xfail on dg-warning."}, {"sha": "139651674e4df4dc49912b2e6f01a2cd80c23a74", "filename": "gcc/testsuite/gcc.dg/pr87746.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ea4b8ed7b960e25d81c14842f7458e9f29c2042/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87746.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ea4b8ed7b960e25d81c14842f7458e9f29c2042/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87746.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87746.c?ref=7ea4b8ed7b960e25d81c14842f7458e9f29c2042", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast\" } */\n+/* { dg-additional-options \"-mavx2\" { target x86_64-*-* i?86-*-* } } */\n+\n+typedef struct rtx_def *rtx;\n+struct replacement {\n+    rtx *where;\n+    rtx *subreg_loc;\n+    int mode;\n+};\n+static struct replacement replacements[150];\n+void move_replacements (rtx *x, rtx *y, int n_replacements)\n+{\n+  int i;\n+  for (i = 0; i < n_replacements; i++)\n+    if (replacements[i].subreg_loc == x)\n+      replacements[i].subreg_loc = y;\n+    else if (replacements[i].where == x) \n+      {\n+\treplacements[i].where = y;\n+\treplacements[i].subreg_loc = 0;\n+      }\n+}"}, {"sha": "5f08cdf42ccd39484af50c5539f8a2d2ecb5791b", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ea4b8ed7b960e25d81c14842f7458e9f29c2042/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ea4b8ed7b960e25d81c14842f7458e9f29c2042/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=7ea4b8ed7b960e25d81c14842f7458e9f29c2042", "patch": "@@ -1010,40 +1010,28 @@ vect_update_misalignment_for_peel (dr_vec_info *dr_info,\n   unsigned int i;\n   vec<dr_p> same_aligned_drs;\n   struct data_reference *current_dr;\n-  int dr_size = vect_get_scalar_dr_size (dr_info);\n-  int dr_peel_size = vect_get_scalar_dr_size (dr_peel_info);\n-  stmt_vec_info stmt_info = dr_info->stmt;\n   stmt_vec_info peel_stmt_info = dr_peel_info->stmt;\n \n- /* For interleaved data accesses the step in the loop must be multiplied by\n-     the size of the interleaving group.  */\n-  if (STMT_VINFO_GROUPED_ACCESS (stmt_info))\n-    dr_size *= DR_GROUP_SIZE (DR_GROUP_FIRST_ELEMENT (stmt_info));\n-  if (STMT_VINFO_GROUPED_ACCESS (peel_stmt_info))\n-    dr_peel_size *= DR_GROUP_SIZE (peel_stmt_info);\n-\n-  /* It can be assumed that the data refs with the same alignment as dr_peel\n-     are aligned in the vector loop.  */\n+  /* It can be assumed that if dr_info has the same alignment as dr_peel,\n+     it is aligned in the vector loop.  */\n   same_aligned_drs = STMT_VINFO_SAME_ALIGN_REFS (peel_stmt_info);\n   FOR_EACH_VEC_ELT (same_aligned_drs, i, current_dr)\n     {\n       if (current_dr != dr_info->dr)\n         continue;\n       gcc_assert (!known_alignment_for_access_p (dr_info)\n \t\t  || !known_alignment_for_access_p (dr_peel_info)\n-\t\t  || (DR_MISALIGNMENT (dr_info) / dr_size\n-\t\t      == DR_MISALIGNMENT (dr_peel_info) / dr_peel_size));\n+\t\t  || (DR_MISALIGNMENT (dr_info)\n+\t\t      == DR_MISALIGNMENT (dr_peel_info)));\n       SET_DR_MISALIGNMENT (dr_info, 0);\n       return;\n     }\n \n   if (known_alignment_for_access_p (dr_info)\n       && known_alignment_for_access_p (dr_peel_info))\n     {\n-      bool negative = tree_int_cst_compare (DR_STEP (dr_info->dr),\n-\t\t\t\t\t    size_zero_node) < 0;\n       int misal = DR_MISALIGNMENT (dr_info);\n-      misal += negative ? -npeel * dr_size : npeel * dr_size;\n+      misal += npeel * TREE_INT_CST_LOW (DR_STEP (dr_info->dr));\n       misal &= DR_TARGET_ALIGNMENT (dr_info) - 1;\n       SET_DR_MISALIGNMENT (dr_info, misal);\n       return;\n@@ -2559,11 +2547,22 @@ vect_analyze_group_access_1 (dr_vec_info *dr_info)\n \t    dump_printf (MSG_NOTE, \"strided store \");\n \t  else\n \t    dump_printf (MSG_NOTE, \"store \");\n-\t  dump_printf (MSG_NOTE, \"of size %u starting with %G\",\n-\t\t       (unsigned)groupsize, stmt_info->stmt);\n+\t  dump_printf (MSG_NOTE, \"of size %u\\n\",\n+\t\t       (unsigned)groupsize);\n+\t  dump_printf_loc (MSG_NOTE, vect_location, \"\\t%G\", stmt_info->stmt);\n+\t  next = DR_GROUP_NEXT_ELEMENT (stmt_info);\n+\t  while (next)\n+\t    {\n+\t      if (DR_GROUP_GAP (next) != 1)\n+\t\tdump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t\t \"\\t<gap of %d elements>\\n\",\n+\t\t\t\t DR_GROUP_GAP (next) - 1);\n+\t      dump_printf_loc (MSG_NOTE, vect_location, \"\\t%G\", next->stmt);\n+\t      next = DR_GROUP_NEXT_ELEMENT (next);\n+\t    }\n \t  if (DR_GROUP_GAP (stmt_info) != 0)\n \t    dump_printf_loc (MSG_NOTE, vect_location,\n-\t\t\t     \"There is a gap of %u elements after the group\\n\",\n+\t\t\t     \"\\t<gap of %d elements>\\n\",\n \t\t\t     DR_GROUP_GAP (stmt_info));\n \t}\n "}]}