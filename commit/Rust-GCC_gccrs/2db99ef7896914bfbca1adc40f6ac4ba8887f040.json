{"sha": "2db99ef7896914bfbca1adc40f6ac4ba8887f040", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRiOTllZjc4OTY5MTRiZmJjYTFhZGM0MGY2YWM0YmE4ODg3ZjA0MA==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2020-01-16T07:54:51Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2020-01-16T12:34:32Z"}, "message": "Fix value numbering dealing with reverse byte order\n\nHi,\n  While working on bit-field lowering pass, I came across this bug.\nThe IR looks like:\n  VIEW_CONVERT_EXPR<unsigned long>(var1) = _12;\n  _1 = BIT_FIELD_REF <var1, 64, 0>;\n\nWhere the BIT_FIELD_REF has REF_REVERSE_STORAGE_ORDER set on it\nand var1's type has TYPE_REVERSE_STORAGE_ORDER set on it.\nPRE/FRE would decided to prop _12 into the BFR statement\nwhich would produce wrong code.\nAnd yes _12 has the correct byte order already; bit-field lowering\nremoves the implicit byte swaps in the IR and adds the explicity\nto make it easier optimize later on.\n\nThis patch adds a check for storage_order_barrier_p on the lhs tree\nwhich returns true in the case where we had a reverse order with a VCE.\n\nChangeLog:\n* tree-ssa-sccvn.c(vn_reference_lookup_3): Check lhs for\n!storage_order_barrier_p.", "tree": {"sha": "80b5d90546ab599c47967b969c77574cba2ea581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80b5d90546ab599c47967b969c77574cba2ea581"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2db99ef7896914bfbca1adc40f6ac4ba8887f040", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2db99ef7896914bfbca1adc40f6ac4ba8887f040", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2db99ef7896914bfbca1adc40f6ac4ba8887f040", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2db99ef7896914bfbca1adc40f6ac4ba8887f040/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c6056d52ef7ea43b503b11a571b316d55f392c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c6056d52ef7ea43b503b11a571b316d55f392c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c6056d52ef7ea43b503b11a571b316d55f392c7"}], "stats": {"total": 7, "additions": 7, "deletions": 0}, "files": [{"sha": "7baf474abb824721a8278e16743f77902681ef1e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2db99ef7896914bfbca1adc40f6ac4ba8887f040/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2db99ef7896914bfbca1adc40f6ac4ba8887f040/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2db99ef7896914bfbca1adc40f6ac4ba8887f040", "patch": "@@ -1,3 +1,8 @@\n+2020-01-16  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* tree-ssa-sccvn.c(vn_reference_lookup_3): Check lhs for\n+\t!storage_order_barrier_p.\n+\n 2020-01-16  Andrew Pinski  <apinski@marvell.com>\n \n \t* sched-int.h (_dep): Add unused bit-field field for the padding."}, {"sha": "4d1301593d7edcf14689b71403453cd05402151a", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2db99ef7896914bfbca1adc40f6ac4ba8887f040/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2db99ef7896914bfbca1adc40f6ac4ba8887f040/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=2db99ef7896914bfbca1adc40f6ac4ba8887f040", "patch": "@@ -2593,6 +2593,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t\t\t\t\t &offset2, &size2, &maxsize2, &reverse);\n       if (base2\n \t  && !reverse\n+\t  && !storage_order_barrier_p (lhs)\n \t  && known_eq (maxsize2, size2)\n \t  && multiple_p (size2, BITS_PER_UNIT)\n \t  && multiple_p (offset2, BITS_PER_UNIT)\n@@ -2695,6 +2696,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t\t\t\t\t &offset2, &size2, &maxsize2, &reverse);\n       tree def_rhs = gimple_assign_rhs1 (def_stmt);\n       if (!reverse\n+\t  && !storage_order_barrier_p (lhs)\n \t  && known_size_p (maxsize2)\n \t  && known_eq (maxsize2, size2)\n \t  && adjust_offsets_for_equal_base_address (base, &offset,"}]}