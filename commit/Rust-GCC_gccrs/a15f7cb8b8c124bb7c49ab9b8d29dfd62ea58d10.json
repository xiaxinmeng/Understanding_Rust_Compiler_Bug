{"sha": "a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE1ZjdjYjhiOGMxMjRiYjdjNDlhYjliOGQyOWRmZDYyZWE1OGQxMA==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2014-10-01T11:49:23Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2014-10-01T11:49:23Z"}, "message": "Implement SD-6: SG10 Feature Test Recommendations\n\n2014-10-01  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tImplement SD-6: SG10 Feature Test Recommendations\n\t* internal.h (lexer_state, spec_nodes): Add in__has_include__.\n\t* directives.c: Support __has_include__ builtin.\n\t* expr.c (parse_has_include): New function to parse __has_include__\n\tbuiltin; (eval_token()): Use it.\n\t* files.c (_cpp_has_header()): New funtion to look for header;\n\t(open_file_failed()): Not an error to not find a header file for\n\t__has_include__.\n\t* identifiers.c (_cpp_init_hashtable()): Add entry for __has_include__.\n\t* pch.c (cpp_read_state): Lookup __has_include__.\n\t* traditional.c (enum ls, _cpp_scan_out_logical_line()): Walk through\n\t__has_include__ statements.\n\n2014-10-01  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tImplement SD-6: SG10 Feature Test Recommendations\n\t* c-cppbuiltin.c (c_cpp_builtins()): Define language feature\n\tmacros and the __has_header macro.\n\n2014-10-01  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tImplement SD-6: SG10 Feature Test Recommendations\n\t* include/bits/basic_string.h: Add __cpp_lib feature test macro.\n\t* include/bits/stl_algobase.h: Ditto.\n\t* include/bits/stl_function.h: Ditto.\n\t* include/bits/unique_ptr.h: Ditto.\n\t* include/std/chrono: Ditto.\n\t* include/std/complex: Ditto.\n\t* include/std/iomanip: Ditto.\n\t* include/std/shared_mutex: Ditto.\n\t* include/std/tuple: Ditto.\n\t* include/std/type_traits: Ditto.\n\t* include/std/utility: Ditto.\n\t* testsuite/experimental/feat-cxx14.cc: New.\n\t* testsuite/experimental/feat-lib-fund.cc: New.\n\t* testsuite/20_util/declval/requirements/1_neg.cc: Adjust.\n\t* testsuite/20_util/duration/literals/range.cc: Adjust.\n\t* testsuite/20_util/duration/requirements/typedefs_neg1.cc: Adjust.\n\t* testsuite/20_util/duration/requirements/typedefs_neg2.cc: Adjust.\n\t* testsuite/20_util/duration/requirements/typedefs_neg3.cc: Adjust.\n\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Adjust.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc: Adjust.\n\t* testsuite/23_containers/array/tuple_interface/get_neg.cc: Adjust.\n\t* testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc:\n\tAdjust.\n\n2014-10-01  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tImplement SD-6: SG10 Feature Test Recommendations\n\t* g++.dg/cpp1y/feat-cxx11-neg.C: New.\n\t* g++.dg/cpp1y/feat-cxx11.C: New.\n\t* g++.dg/cpp1y/feat-cxx14.C: New.\n\t* g++.dg/cpp1y/feat-cxx98.C: New.\n\t* g++.dg/cpp1y/feat-cxx98-neg.C: New.\n\t* g++.dg/cpp1y/phoobhar.h: New.\n\t* g++.dg/cpp1y/testinc/phoobhar.h: New.\n\nFrom-SVN: r215752", "tree": {"sha": "0305f88949de10054e322e52911e9a53306c454d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0305f88949de10054e322e52911e9a53306c454d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5fbb36f4a4e85956c241dafe603f1fc1be10472e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fbb36f4a4e85956c241dafe603f1fc1be10472e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fbb36f4a4e85956c241dafe603f1fc1be10472e"}], "stats": {"total": 836, "additions": 820, "deletions": 16}, "files": [{"sha": "fef201b799bc15d86e29c5f7b4418da8983121ba", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -1,3 +1,9 @@\n+2014-10-01  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tImplement SD-6: SG10 Feature Test Recommendations\n+\t* c-cppbuiltin.c (c_cpp_builtins()): Define language feature\n+\tmacros and the __has_header macro.\n+\n 2014-09-30  Jason Merrill  <jason@redhat.com>\n \n \t* c-common.h (enum rid): Add RID_IS_TRIVIALLY_ASSIGNABLE and"}, {"sha": "b6ac0b0341c6a90c0176484be245f565fdb2b109", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -787,18 +787,66 @@ c_cpp_builtins (cpp_reader *pfile)\n   /* For stddef.h.  They require macros defined in c-common.c.  */\n   c_stddef_cpp_builtins ();\n \n+  /* Set include test macros for all C/C++ (not for just C++11 etc.)\n+     the builtins __has_include__ and __has_include_next__ are defined\n+     in libcpp.  */\n+  cpp_define (pfile, \"__has_include(STR)=__has_include__(STR)\");\n+  cpp_define (pfile, \"__has_include_next(STR)=__has_include_next__(STR)\");\n+\n   if (c_dialect_cxx ())\n     {\n       if (flag_weak && SUPPORTS_ONE_ONLY)\n \tcpp_define (pfile, \"__GXX_WEAK__=1\");\n       else\n \tcpp_define (pfile, \"__GXX_WEAK__=0\");\n+\n       if (warn_deprecated)\n \tcpp_define (pfile, \"__DEPRECATED\");\n+\n       if (flag_rtti)\n \tcpp_define (pfile, \"__GXX_RTTI\");\n+\n       if (cxx_dialect >= cxx11)\n         cpp_define (pfile, \"__GXX_EXPERIMENTAL_CXX0X__\");\n+\n+      /* Binary literals have been allowed in g++ before C++11\n+\t and were standardized for C++14.  */\n+      if (!pedantic || cxx_dialect > cxx11)\n+\tcpp_define (pfile, \"__cpp_binary_literals=201304\");\n+      if (cxx_dialect >= cxx11)\n+\t{\n+\t  /* Set feature test macros for C++11  */\n+\t  cpp_define (pfile, \"__cpp_unicode_characters=200704\");\n+\t  cpp_define (pfile, \"__cpp_raw_strings=200710\");\n+\t  cpp_define (pfile, \"__cpp_unicode_literals=200710\");\n+\t  cpp_define (pfile, \"__cpp_user_defined_literals=200809\");\n+\t  cpp_define (pfile, \"__cpp_lambdas=200907\");\n+\t  cpp_define (pfile, \"__cpp_constexpr=200704\");\n+\t  cpp_define (pfile, \"__cpp_static_assert=200410\");\n+\t  cpp_define (pfile, \"__cpp_decltype=200707\");\n+\t  cpp_define (pfile, \"__cpp_attributes=200809\");\n+\t  cpp_define (pfile, \"__cpp_rvalue_reference=200610\");\n+\t  cpp_define (pfile, \"__cpp_variadic_templates=200704\");\n+\t  cpp_define (pfile, \"__cpp_alias_templates=200704\");\n+\t}\n+      if (cxx_dialect > cxx11)\n+\t{\n+\t  /* Set feature test macros for C++14  */\n+\t  cpp_define (pfile, \"__cpp_return_type_deduction=201304\");\n+\t  cpp_define (pfile, \"__cpp_init_captures=201304\");\n+\t  cpp_define (pfile, \"__cpp_generic_lambdas=201304\");\n+\t  //cpp_undef (pfile, \"__cpp_constexpr\");\n+\t  //cpp_define (pfile, \"__cpp_constexpr=201304\");\n+\t  cpp_define (pfile, \"__cpp_decltype_auto=201304\");\n+\t  //cpp_define (pfile, \"__cpp_aggregate_nsdmi=201304\");\n+\t  cpp_define (pfile, \"__cpp_variable_templates=201304\");\n+\t  cpp_define (pfile, \"__cpp_digit_separators=201309\");\n+\t  cpp_define (pfile, \"__cpp_attribute_deprecated=201309\");\n+\t  //cpp_define (pfile, \"__cpp_sized_deallocation=201309\");\n+\t  /* We'll have to see where runtime arrays wind up.\n+\t     Let's put it in C++14 for now.  */\n+\t  cpp_define (pfile, \"__cpp_runtime_arrays=201304\");\n+\t}\n     }\n   /* Note that we define this for C as well, so that we know if\n      __attribute__((cleanup)) will interface with EH.  */"}, {"sha": "b07bb66388df30cbe84351994a272a6a83f141e1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -1,3 +1,14 @@\n+2014-10-01  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tImplement SD-6: SG10 Feature Test Recommendations\n+\t* g++.dg/cpp1y/feat-cxx11-neg.C: New.\n+\t* g++.dg/cpp1y/feat-cxx11.C: New.\n+\t* g++.dg/cpp1y/feat-cxx14.C: New.\n+\t* g++.dg/cpp1y/feat-cxx98.C: New.\n+\t* g++.dg/cpp1y/feat-cxx98-neg.C: New.\n+\t* g++.dg/cpp1y/phoobhar.h: New.\n+\t* g++.dg/cpp1y/testinc/phoobhar.h: New.\n+\n 2014-09-30  Teresa Johnson  <tejohnson@google.com>\n \n \t* gcc.dg/tree-prof/20050826-2.c: New test."}, {"sha": "8719577c5cffc75f4ae9ab60b89e827467c67b62", "filename": "gcc/testsuite/g++.dg/cpp1y/feat-cxx11-neg.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx11-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx11-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx11-neg.C?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile { target c++11_only } }\n+// { dg-options \"-pedantic-errors\" }\n+\n+// These *are* defined in C++14 onwards.\n+\n+#ifndef __cpp_binary_literals\n+#  error \"__cpp_binary_literals\" // { dg-error \"error\" }\n+#endif\n+\n+#ifndef __cpp_init_captures\n+#  error \"__cpp_init_captures\" // { dg-error \"error\" }\n+#endif\n+\n+#ifndef __cpp_generic_lambdas\n+#  error \"__cpp_generic_lambdas\" // { dg-error \"error\" }\n+#endif\n+\n+#ifndef __cpp_decltype_auto\n+#  error \"__cpp_decltype_auto\" // { dg-error \"error\" }\n+#endif\n+\n+#ifndef __cpp_return_type_deduction\n+#  error \"__cpp_return_type_deduction\" // { dg-error \"error\" }\n+#endif\n+\n+#ifndef __cpp_variable_templates\n+#  error \"__cpp_variable_templates\" // { dg-error \"error\" }\n+#endif\n+\n+#ifndef __cpp_digit_separators\n+#  error \"__cpp_digit_separators\" // { dg-error \"error\" }\n+#endif\n+\n+#ifndef __cpp_attribute_deprecated\n+#  error \"__cpp_attribute_deprecated\" // { dg-error \"error\" }\n+#endif\n+\n+#ifndef __cpp_runtime_arrays\n+#  error \"__cpp_runtime_arrays\" // { dg-error \"error\" }\n+#endif"}, {"sha": "606a5cec6180f3170e0c35ce4433002a1a138716", "filename": "gcc/testsuite/g++.dg/cpp1y/feat-cxx11.C", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx11.C?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -0,0 +1,81 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+\n+#ifndef __cpp_unicode_characters\n+#  error \"__cpp_unicode_characters\"\n+#elif __cpp_unicode_characters != 200704\n+#  error \"__cpp_unicode_characters != 200704\"\n+#endif\n+\n+#ifndef __cpp_raw_strings\n+#  error \"__cpp_raw_strings\"\n+#elif __cpp_raw_strings != 200710\n+#  error \"__cpp_raw_strings != 200710\"\n+#endif\n+\n+#ifndef __cpp_unicode_literals\n+#  error \"__cpp_unicode_literals\"\n+#elif __cpp_unicode_literals != 200710\n+#  error \"__cpp_unicode_literals != 200710\"\n+#endif\n+\n+#ifndef __cpp_user_defined_literals\n+#  error \"__cpp_user_defined_literals\"\n+#elif __cpp_user_defined_literals != 200809\n+#  error \"__cpp_user_defined_literals != 200809\"\n+#endif\n+\n+#ifndef __cpp_lambdas\n+#  error \"__cpp_lambdas\"\n+#elif __cpp_lambdas != 200907\n+#  error \"__cpp_lambdas != 200907\"\n+#endif\n+\n+#ifndef __cpp_constexpr\n+#  error \"__cpp_constexpr\"\n+#elif __cpp_constexpr != 200704\n+#  error \"__cpp_constexpr != 200704\"\n+#endif\n+\n+#ifndef __cpp_static_assert\n+#  error \"__cpp_static_assert\"\n+#elif __cpp_static_assert != 200410\n+#  error \"__cpp_static_assert != 200410\"\n+#endif\n+\n+#ifndef __cpp_decltype\n+#  error \"__cpp_decltype\"\n+#elif __cpp_decltype != 200707\n+#  error \"__cpp_decltype != 200707\"\n+#endif\n+\n+#ifndef __cpp_attributes\n+#  error \"__cpp_attributes\"\n+#elif __cpp_attributes != 200809\n+#  error \"__cpp_attributes != 200809\"\n+#endif\n+\n+#ifndef __cpp_rvalue_reference\n+#  error \"__cpp_rvalue_reference\"\n+#elif __cpp_rvalue_reference != 200610\n+#  error \"__cpp_rvalue_reference != 200610\"\n+#endif\n+\n+#ifndef __cpp_variadic_templates\n+#  error \"__cpp_variadic_templates\"\n+#elif __cpp_variadic_templates != 200704\n+#  error \"__cpp_variadic_templates != 200704\"\n+#endif\n+\n+#ifndef __cpp_alias_templates\n+#  error \"__cpp_alias_templates\"\n+#elif __cpp_alias_templates != 200704\n+#  error \"__cpp_alias_templates != 200704\"\n+#endif\n+\n+//  These C++14 features are allowed in C++11 in non-ANSI modes.\n+#ifndef __cpp_binary_literals\n+#  error \"__cpp_binary_literals\"\n+#elif __cpp_binary_literals != 201304\n+#  error \"__cpp_binary_literals != 201304\"\n+#endif"}, {"sha": "18ff09884650fbb0d78d7b6ea07b5ab5c627670d", "filename": "gcc/testsuite/g++.dg/cpp1y/feat-cxx14.C", "status": "added", "additions": 232, "deletions": 0, "changes": 232, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx14.C?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -0,0 +1,232 @@\n+// { dg-do compile { target c++14 } }\n+// { dg-options \"-I${srcdir}/g++.dg/cpp1y -I${srcdir}/g++.dg/cpp1y/testinc\" }\n+\n+// Begin C++11 tests.\n+\n+#ifndef __cpp_unicode_characters\n+#  error \"__cpp_unicode_characters\"\n+#elif __cpp_unicode_characters != 200704\n+#  error \"__cpp_unicode_characters != 200704\"\n+#endif\n+\n+#ifndef __cpp_raw_strings\n+#  error \"__cpp_raw_strings\"\n+#elif __cpp_raw_strings != 200710\n+#  error \"__cpp_raw_strings != 200710\"\n+#endif\n+\n+#ifndef __cpp_unicode_literals\n+#  error \"__cpp_unicode_literals\"\n+#elif __cpp_unicode_literals != 200710\n+#  error \"__cpp_unicode_literals != 200710\"\n+#endif\n+\n+#ifndef __cpp_user_defined_literals\n+#  error \"__cpp_user_defined_literals\"\n+#elif __cpp_user_defined_literals != 200809\n+#  error \"__cpp_user_defined_literals != 200809\"\n+#endif\n+\n+#ifndef __cpp_lambdas\n+#  error \"__cpp_lambdas\"\n+#elif __cpp_lambdas != 200907\n+#  error \"__cpp_lambdas != 200907\"\n+#endif\n+\n+#ifndef __cpp_constexpr\n+#  error \"__cpp_constexpr\"\n+#elif __cpp_constexpr != 200704\n+#  error \"__cpp_constexpr != 200704\"\n+#endif\n+\n+#ifndef __cpp_static_assert\n+#  error \"__cpp_static_assert\"\n+#elif __cpp_static_assert != 200410\n+#  error \"__cpp_static_assert != 200410\"\n+#endif\n+\n+#ifndef __cpp_decltype\n+#  error \"__cpp_decltype\"\n+#elif __cpp_decltype != 200707\n+#  error \"__cpp_decltype != 200707\"\n+#endif\n+\n+#ifndef __cpp_attributes\n+#  error \"__cpp_attributes\"\n+#elif __cpp_attributes != 200809\n+#  error \"__cpp_attributes != 200809\"\n+#endif\n+\n+#ifndef __cpp_rvalue_reference\n+#  error \"__cpp_rvalue_reference\"\n+#elif __cpp_rvalue_reference != 200610\n+#  error \"__cpp_rvalue_reference != 200610\"\n+#endif\n+\n+#ifndef __cpp_variadic_templates\n+#  error \"__cpp_variadic_templates\"\n+#elif __cpp_variadic_templates != 200704\n+#  error \"__cpp_variadic_templates != 200704\"\n+#endif\n+\n+#ifndef __cpp_alias_templates\n+#  error \"__cpp_alias_templates\"\n+#elif __cpp_alias_templates != 200704\n+#  error \"__cpp_alias_templates != 200704\"\n+#endif\n+\n+// Begin C++14 tests.\n+\n+#ifndef __cpp_binary_literals\n+#  error \"__cpp_binary_literals\"\n+#elif __cpp_binary_literals != 201304\n+#  error \"__cpp_binary_literals != 201304\"\n+#endif\n+\n+#ifndef __cpp_init_captures\n+#  error \"__cpp_init_captures\"\n+#elif __cpp_init_captures != 201304\n+#  error \"__cpp_init_captures != 201304\"\n+#endif\n+\n+#ifndef __cpp_generic_lambdas\n+#  error \"__cpp_generic_lambdas\"\n+#elif __cpp_generic_lambdas != 201304\n+#  error \"__cpp_generic_lambdas != 201304\"\n+#endif\n+\n+//  TODO: Change 200704 to 201304 when C++14 constexpr goes in.\n+#ifndef __cpp_constexpr\n+#  error \"__cpp_constexpr\"\n+#elif __cpp_constexpr != 200704\n+#  error \"__cpp_constexpr != 200704\"\n+#endif\n+\n+#ifndef __cpp_decltype_auto\n+#  error \"__cpp_decltype_auto\"\n+#elif __cpp_decltype_auto != 201304\n+#  error \"__cpp_decltype_auto != 201304\"\n+#endif\n+\n+#ifndef __cpp_return_type_deduction\n+#  error \"__cpp_return_type_deduction\"\n+#elif __cpp_return_type_deduction != 201304\n+#  error \"__cpp_return_type_deduction != 201304\"\n+#endif\n+\n+#ifndef __cpp_runtime_arrays\n+#  error \"__cpp_runtime_arrays\"\n+#elif __cpp_runtime_arrays != 201304\n+#  error \"__cpp_runtime_arrays != 201304\"\n+#endif\n+\n+//  Aggregate initializers not in yet.\n+#ifdef __cpp_aggregate_nsdmi\n+#  error \"__cpp_aggregate_nsdmi\"\n+#endif\n+\n+#ifndef __cpp_variable_templates\n+#  error \"__cpp_variable_templates\"\n+#elif __cpp_variable_templates != 201304\n+#  error \"__cpp_variable_templates != 201304\"\n+#endif\n+\n+#ifndef __cpp_digit_separators\n+#  error \"__cpp_digit_separators\"\n+#elif __cpp_digit_separators != 201309\n+#  error \"__cpp_digit_separators != 201309\"\n+#endif\n+\n+#ifndef __cpp_attribute_deprecated\n+#  error \"__cpp_attribute_deprecated\"\n+#elif __cpp_attribute_deprecated != 201309\n+#  error \"__cpp_attribute_deprecated != 201309\"\n+#endif\n+\n+//  Sized deallocation not in yet.\n+#ifdef __cpp_sized_deallocation\n+#  error \"__cpp_sized_deallocation\"\n+#endif\n+\n+// Begin include checks.\n+\n+//  Check for __has_include macro.\n+#ifndef __has_include\n+#  error \"__has_include\"\n+#endif\n+\n+//  Quoted complex.h should find at least the bracket version (use operator).\n+#if __has_include__ \"complex.h\"\n+#else\n+#  error \"complex.h\"\n+#endif\n+\n+//  Try known bracket header (use operator).\n+#if __has_include__(<complex>)\n+#else\n+#  error \"<complex>\"\n+#endif\n+\n+//  Define and use a macro to invoke the operator.\n+#define sluggo(TXT) __has_include__(TXT)\n+\n+#if sluggo(<complex>)\n+#else\n+#  error \"<complex>\"\n+#endif\n+\n+#if ! sluggo(<complex>)\n+#  error \"<complex>\"\n+#else\n+#endif\n+\n+//  Quoted complex.h should find at least the bracket version.\n+#if __has_include(\"complex.h\")\n+#else\n+#  error \"complex.h\"\n+#endif\n+\n+//  Try known local quote header.\n+#if __has_include(\"complex_literals.h\")\n+#else\n+#  error \"\\\"complex_literals.h\\\"\"\n+#endif\n+\n+//  Try nonexistent bracket header.\n+#if __has_include(<stuff>)\n+#  error \"<stuff>\"\n+#else\n+#endif\n+\n+//  Try nonexistent quote header.\n+#if __has_include(\"phlegm\")\n+#  error \"\\\"phlegm\\\"\"\n+#else\n+#endif\n+\n+//  Test __has_include_next.\n+#if __has_include(\"phoobhar.h\")\n+#  include \"phoobhar.h\"\n+#else\n+#  error \"__has_include(\\\"phoobhar.h\\\")\"\n+#endif\n+\n+//  Try a macro.\n+#define COMPLEX_INC \"complex.h\"\n+#if __has_include(COMPLEX_INC)\n+#else\n+#  error COMPLEX_INC\n+#endif\n+\n+//  Realistic use of __has_include.\n+#if __has_include(<array>)\n+#  define STD_ARRAY 1\n+#  include <array>\n+  template<typename _Tp, size_t _Num>\n+    using array = std::array<_Tp, _Num>;\n+#elif __has_include(<tr1/array>)\n+#  define TR1_ARRAY 1\n+#  include <tr1/array>\n+  template<typename _Tp, size_t _Num>\n+    typedef std::tr1::array<_Tp, _Num> array;\n+#endif"}, {"sha": "db019f2ccd892da0f2f4b4b8c7ce727619d74081", "filename": "gcc/testsuite/g++.dg/cpp1y/feat-cxx98-neg.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx98-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx98-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx98-neg.C?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do compile { target c++98_only } }\n+// { dg-options \"-ansi\" }\n+\n+#ifdef __cpp_runtime_arrays\n+#  error \"__cpp_runtime_arrays\" // { dg-error \"error\" }\n+#endif"}, {"sha": "a0a2b75e30bc0a302a74c3aac58b7578a5916cad", "filename": "gcc/testsuite/g++.dg/cpp1y/feat-cxx98.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx98.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx98.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx98.C?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -0,0 +1,9 @@\n+// { dg-do compile { target c++98_only } }\n+// { dg-options \"\" }\n+\n+//  These C++14 features are allowed in C++98 in non-ANSI modes.\n+#ifndef __cpp_binary_literals\n+#  error \"__cpp_binary_literals\"\n+#elif  __cpp_binary_literals != 201304\n+#  error \"__cpp_binary_literals != 201304\"\n+#endif"}, {"sha": "7feec3649966ae15240d574a0b08949c43fe23b5", "filename": "gcc/testsuite/g++.dg/cpp1y/phoobhar.h", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fphoobhar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fphoobhar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fphoobhar.h?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -0,0 +1,16 @@\n+\n+int\n+phoo();\n+\n+int\n+bhar();\n+\n+#ifndef __has_include_next\n+#  error \"__has_include_next\"\n+#else\n+#  if __has_include_next(\"phoobhar.h\")\n+#    include_next \"phoobhar.h\"\n+#  else\n+#    error \"__has_include_next(\\\"phoobhar.h\\\")\"\n+#  endif\n+#endif"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "gcc/testsuite/g++.dg/cpp1y/testinc/phoobhar.h", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ftestinc%2Fphoobhar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ftestinc%2Fphoobhar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ftestinc%2Fphoobhar.h?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10"}, {"sha": "4ad851e705e94e1e86cdbecfaeadca8792f27691", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -1,3 +1,18 @@\n+2014-10-01  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tImplement SD-6: SG10 Feature Test Recommendations\n+\t* internal.h (lexer_state, spec_nodes): Add in__has_include__.\n+\t* directives.c: Support __has_include__ builtin.\n+\t* expr.c (parse_has_include): New function to parse __has_include__\n+\tbuiltin; (eval_token()): Use it.\n+\t* files.c (_cpp_has_header()): New funtion to look for header;\n+\t(open_file_failed()): Not an error to not find a header file for\n+\t__has_include__.\n+\t* identifiers.c (_cpp_init_hashtable()): Add entry for __has_include__.\n+\t* pch.c (cpp_read_state): Lookup __has_include__.\n+\t* traditional.c (enum ls, _cpp_scan_out_logical_line()): Walk through\n+\t__has_include__ statements.\n+\n 2014-09-30  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR preprocessor/58893"}, {"sha": "0a8569aeebf89a646e4cb7aeb55d653732654541", "filename": "libcpp/directives.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -566,6 +566,11 @@ lex_macro_node (cpp_reader *pfile, bool is_def_or_undef)\n       if (is_def_or_undef && node == pfile->spec_nodes.n_defined)\n \tcpp_error (pfile, CPP_DL_ERROR,\n \t\t   \"\\\"defined\\\" cannot be used as a macro name\");\n+      else if (is_def_or_undef\n+\t    && (node == pfile->spec_nodes.n__has_include__\n+\t     || node == pfile->spec_nodes.n__has_include_next__))\n+\tcpp_error (pfile, CPP_DL_ERROR,\n+\t\t   \"\\\"__has_include__\\\" cannot be used as a macro name\");\n       else if (! (node->flags & NODE_POISONED))\n \treturn node;\n     }\n@@ -2623,3 +2628,12 @@ _cpp_init_directives (cpp_reader *pfile)\n       node->directive_index = i;\n     }\n }\n+\n+/* Extract header file from a bracket include. Parsing starts after '<'.\n+   The string is malloced and must be freed by the caller.  */\n+char *\n+_cpp_bracket_include(cpp_reader *pfile)\n+{\n+  return glue_header_name (pfile);\n+}\n+"}, {"sha": "c24b640ba16a2bc416213002ee567cad688e40fe", "filename": "libcpp/expr.c", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -64,6 +64,8 @@ static unsigned int interpret_float_suffix (cpp_reader *, const uchar *, size_t)\n static unsigned int interpret_int_suffix (cpp_reader *, const uchar *, size_t);\n static void check_promotion (cpp_reader *, const struct op *);\n \n+static cpp_num parse_has_include (cpp_reader *, enum include_type);\n+\n /* Token type abuse to create unary plus and minus operators.  */\n #define CPP_UPLUS ((enum cpp_ttype) (CPP_LAST_CPP_OP + 1))\n #define CPP_UMINUS ((enum cpp_ttype) (CPP_LAST_CPP_OP + 2))\n@@ -1048,6 +1050,10 @@ eval_token (cpp_reader *pfile, const cpp_token *token,\n     case CPP_NAME:\n       if (token->val.node.node == pfile->spec_nodes.n_defined)\n \treturn parse_defined (pfile);\n+      else if (token->val.node.node == pfile->spec_nodes.n__has_include__)\n+\treturn parse_has_include (pfile, IT_INCLUDE);\n+      else if (token->val.node.node == pfile->spec_nodes.n__has_include_next__)\n+\treturn parse_has_include (pfile, IT_INCLUDE_NEXT);\n       else if (CPP_OPTION (pfile, cplusplus)\n \t       && (token->val.node.node == pfile->spec_nodes.n_true\n \t\t   || token->val.node.node == pfile->spec_nodes.n_false))\n@@ -2072,3 +2078,72 @@ num_div_op (cpp_reader *pfile, cpp_num lhs, cpp_num rhs, enum cpp_ttype op,\n \n   return lhs;\n }\n+\n+/* Handle meeting \"__has_include__\" in a preprocessor expression.  */\n+static cpp_num\n+parse_has_include (cpp_reader *pfile, enum include_type type)\n+{\n+  cpp_num result;\n+  bool paren = false;\n+  cpp_hashnode *node = 0;\n+  const cpp_token *token;\n+  bool bracket = false;\n+  char *fname = 0;\n+\n+  result.unsignedp = false;\n+  result.high = 0;\n+  result.overflow = false;\n+  result.low = 0;\n+\n+  pfile->state.in__has_include__++;\n+\n+  token = cpp_get_token (pfile);\n+  if (token->type == CPP_OPEN_PAREN)\n+    {\n+      paren = true;\n+      token = cpp_get_token (pfile);\n+    }\n+\n+  if (token->type == CPP_STRING || token->type == CPP_HEADER_NAME)\n+    {\n+      if (token->type == CPP_HEADER_NAME)\n+\tbracket = true;\n+      fname = XNEWVEC (char, token->val.str.len - 1);\n+      memcpy (fname, token->val.str.text + 1, token->val.str.len - 2);\n+      fname[token->val.str.len - 2] = '\\0';\n+      node = token->val.node.node;\n+    }\n+  else if (token->type == CPP_LESS)\n+    {\n+      bracket = true;\n+      fname = _cpp_bracket_include (pfile);\n+    }\n+  else\n+    cpp_error (pfile, CPP_DL_ERROR,\n+\t       \"operator \\\"__has_include__\\\" requires a header string\");\n+\n+  if (fname)\n+    {\n+      int angle_brackets = (bracket ? 1 : 0);\n+\n+      if (_cpp_has_header (pfile, fname, angle_brackets, type))\n+\tresult.low = 1;\n+      else\n+\tresult.low = 0;\n+\n+      XDELETEVEC (fname);\n+    }\n+\n+  if (paren && cpp_get_token (pfile)->type != CPP_CLOSE_PAREN)\n+    cpp_error (pfile, CPP_DL_ERROR,\n+\t       \"missing ')' after \\\"__has_include__\\\"\");\n+\n+  /* A possible controlling macro of the form #if !__has_include__ ().\n+     _cpp_parse_expr checks there was no other junk on the line.  */\n+  if (node)\n+    pfile->mi_ind_cmacro = node;\n+\n+  pfile->state.in__has_include__--;\n+\n+  return result;\n+}"}, {"sha": "e464259e458233009f1a6114097a3ac5e4411820", "filename": "libcpp/files.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -1041,6 +1041,9 @@ open_file_failed (cpp_reader *pfile, _cpp_file *file, int angle_brackets)\n   int sysp = pfile->line_table->highest_line > 1 && pfile->buffer ? pfile->buffer->sysp : 0;\n   bool print_dep = CPP_OPTION (pfile, deps.style) > (angle_brackets || !!sysp);\n \n+  if (pfile->state.in__has_include__)\n+    return;\n+\n   errno = file->err_no;\n   if (print_dep && CPP_OPTION (pfile, deps.missing_files) && errno == ENOENT)\n     {\n@@ -1957,3 +1960,18 @@ check_file_against_entries (cpp_reader *pfile ATTRIBUTE_UNUSED,\n   return bsearch (&d, pchf->entries, pchf->count, sizeof (struct pchf_entry),\n \t\t  pchf_compare) != NULL;\n }\n+\n+/* Return true if the file FNAME is found in the appropriate include file path\n+   as indicated by ANGLE_BRACKETS.  */\n+\n+bool\n+_cpp_has_header (cpp_reader *pfile, const char *fname, int angle_brackets,\n+\t\t enum include_type type)\n+{\n+  cpp_dir *start_dir = search_path_head (pfile, fname, angle_brackets, type);\n+  _cpp_file *file = _cpp_find_file (pfile, fname, start_dir,\n+\t\t\t\t    /*fake=*/false, angle_brackets,\n+\t\t\t\t    /*implicit_preinclude=*/false);\n+  return file->err_no != ENOENT;\n+}\n+"}, {"sha": "8fba8c004ecc2155f7d3116264aabb3d2a79b65b", "filename": "libcpp/identifiers.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libcpp%2Fidentifiers.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libcpp%2Fidentifiers.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fidentifiers.c?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -72,6 +72,8 @@ _cpp_init_hashtable (cpp_reader *pfile, cpp_hash_table *table)\n   s->n_false\t\t= cpp_lookup (pfile, DSC(\"false\"));\n   s->n__VA_ARGS__       = cpp_lookup (pfile, DSC(\"__VA_ARGS__\"));\n   s->n__VA_ARGS__->flags |= NODE_DIAGNOSTIC;\n+  s->n__has_include__   = cpp_lookup (pfile, DSC(\"__has_include__\"));\n+  s->n__has_include_next__ = cpp_lookup (pfile, DSC(\"__has_include_next__\"));\n }\n \n /* Tear down the identifier hash table.  */"}, {"sha": "602a5035a11069ee950e1d6899ba85373ffe14a9", "filename": "libcpp/internal.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -258,6 +258,9 @@ struct lexer_state\n   /* Nonzero when parsing arguments to a function-like macro.  */\n   unsigned char parsing_args;\n \n+  /* Nonzero if in a __has_include__ or __has_include_next__ statement.  */\n+  unsigned char in__has_include__;\n+\n   /* Nonzero if prevent_expansion is true only because output is\n      being discarded.  */\n   unsigned char discarding_output;\n@@ -279,6 +282,8 @@ struct spec_nodes\n   cpp_hashnode *n_true;\t\t\t/* C++ keyword true */\n   cpp_hashnode *n_false;\t\t/* C++ keyword false */\n   cpp_hashnode *n__VA_ARGS__;\t\t/* C99 vararg macros */\n+  cpp_hashnode *n__has_include__;\t/* __has_include__ operator */\n+  cpp_hashnode *n__has_include_next__;\t/* __has_include_next__ operator */\n };\n \n typedef struct _cpp_line_note _cpp_line_note;\n@@ -645,6 +650,8 @@ extern bool _cpp_save_file_entries (cpp_reader *pfile, FILE *f);\n extern bool _cpp_read_file_entries (cpp_reader *, FILE *);\n extern const char *_cpp_get_file_name (_cpp_file *);\n extern struct stat *_cpp_get_file_stat (_cpp_file *);\n+extern bool _cpp_has_header (cpp_reader *, const char *, int,\n+\t\t\t     enum include_type);\n \n /* In expr.c */\n extern bool _cpp_parse_expr (cpp_reader *, bool);\n@@ -680,6 +687,7 @@ extern void _cpp_init_internal_pragmas (cpp_reader *);\n extern void _cpp_do_file_change (cpp_reader *, enum lc_reason, const char *,\n \t\t\t\t linenum_type, unsigned int);\n extern void _cpp_pop_buffer (cpp_reader *);\n+extern char *_cpp_bracket_include (cpp_reader *);\n \n /* In directives.c */\n struct _cpp_dir_only_callbacks"}, {"sha": "3ff39d7ef0950c9a251b798db089c23f212e04cd", "filename": "libcpp/pch.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libcpp%2Fpch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libcpp%2Fpch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fpch.c?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -833,6 +833,8 @@ cpp_read_state (cpp_reader *r, const char *name, FILE *f,\n     s->n_true\t\t= cpp_lookup (r, DSC(\"true\"));\n     s->n_false\t\t= cpp_lookup (r, DSC(\"false\"));\n     s->n__VA_ARGS__     = cpp_lookup (r, DSC(\"__VA_ARGS__\"));\n+    s->n__has_include__ = cpp_lookup (r, DSC(\"__has_include__\"));\n+    s->n__has_include_next__ = cpp_lookup (r, DSC(\"__has_include_next__\"));\n   }\n \n   old_state = r->state;"}, {"sha": "dfb53787a048e5398bd78c25799eddea1ec90d11", "filename": "libcpp/traditional.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libcpp%2Ftraditional.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libcpp%2Ftraditional.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ftraditional.c?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -74,7 +74,9 @@ enum ls {ls_none = 0,\t\t/* Normal state.  */\n \t ls_defined_close,\t/* Looking for ')' of defined().  */\n \t ls_hash,\t\t/* After # in preprocessor conditional.  */\n \t ls_predicate,\t\t/* After the predicate, maybe paren?  */\n-\t ls_answer};\t\t/* In answer to predicate.  */\n+\t ls_answer,\t\t/* In answer to predicate.  */\n+\t ls_has_include,\t/* After __has_include__.  */\n+\t ls_has_include_close};\t/* Looking for ')' of __has_include__.  */\n \n /* Lexing TODO: Maybe handle space in escaped newlines.  Stop lex.c\n    from recognizing comments and directives during its lexing pass.  */\n@@ -524,6 +526,13 @@ _cpp_scan_out_logical_line (cpp_reader *pfile, cpp_macro *macro)\n \t\t  lex_state = ls_defined;\n \t\t  continue;\n \t\t}\n+\t      else if (pfile->state.in_expression\n+\t\t       && (node == pfile->spec_nodes.n__has_include__\n+\t\t\t|| node == pfile->spec_nodes.n__has_include_next__))\n+\t\t{\n+\t\t  lex_state = ls_has_include;\n+\t\t  continue;\n+\t\t}\n \t    }\n \t  break;\n \n@@ -547,6 +556,8 @@ _cpp_scan_out_logical_line (cpp_reader *pfile, cpp_macro *macro)\n \t\tlex_state = ls_answer;\n \t      else if (lex_state == ls_defined)\n \t\tlex_state = ls_defined_close;\n+\t      else if (lex_state == ls_has_include)\n+\t\tlex_state = ls_has_include_close;\n \t    }\n \t  break;\n \n@@ -584,7 +595,8 @@ _cpp_scan_out_logical_line (cpp_reader *pfile, cpp_macro *macro)\n \t\t      goto new_context;\n \t\t    }\n \t\t}\n-\t      else if (lex_state == ls_answer || lex_state == ls_defined_close)\n+\t      else if (lex_state == ls_answer || lex_state == ls_defined_close\n+\t\t\t|| lex_state == ls_has_include_close)\n \t\tlex_state = ls_none;\n \t    }\n \t  break;\n@@ -665,7 +677,8 @@ _cpp_scan_out_logical_line (cpp_reader *pfile, cpp_macro *macro)\n \tlex_state = ls_none;\n       else if (lex_state == ls_hash\n \t       || lex_state == ls_predicate\n-\t       || lex_state == ls_defined)\n+\t       || lex_state == ls_defined\n+\t       || lex_state == ls_has_include)\n \tlex_state = ls_none;\n \n       /* ls_answer and ls_defined_close keep going until ')'.  */"}, {"sha": "78609faf691520ce365ccf4faae847ffa8941a44", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -1,3 +1,30 @@\n+2014-10-01  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tImplement SD-6: SG10 Feature Test Recommendations\n+\t* include/bits/basic_string.h: Add __cpp_lib feature test macro.\n+\t* include/bits/stl_algobase.h: Ditto.\n+\t* include/bits/stl_function.h: Ditto.\n+\t* include/bits/unique_ptr.h: Ditto.\n+\t* include/std/chrono: Ditto.\n+\t* include/std/complex: Ditto.\n+\t* include/std/iomanip: Ditto.\n+\t* include/std/shared_mutex: Ditto.\n+\t* include/std/tuple: Ditto.\n+\t* include/std/type_traits: Ditto.\n+\t* include/std/utility: Ditto.\n+\t* testsuite/experimental/feat-cxx14.cc: New.\n+\t* testsuite/experimental/feat-lib-fund.cc: New.\n+\t* testsuite/20_util/declval/requirements/1_neg.cc: Adjust.\n+\t* testsuite/20_util/duration/literals/range.cc: Adjust.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg1.cc: Adjust.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg2.cc: Adjust.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg3.cc: Adjust.\n+\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Adjust.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc: Adjust.\n+\t* testsuite/23_containers/array/tuple_interface/get_neg.cc: Adjust.\n+\t* testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc:\n+\tAdjust.\n+\n 2014-09-30  Siva Chandra Reddy  <sivachandra@google.com>\n \n \t* python/hook.in: Only import libstdcxx.v6."}, {"sha": "89189656bcda55bae803e8765cc4ab1d1b983be5", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -3140,6 +3140,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus > 201103L\n \n+#define __cpp_lib_string_udls 201304\n+\n   inline namespace literals\n   {\n   inline namespace string_literals"}, {"sha": "f7c11e931d7da654163baa24a3055192e5ce75a5", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -1091,6 +1091,9 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n     }\n \n #if __cplusplus > 201103L\n+\n+#define __cpp_lib_robust_nonmodifying_seq_ops 201304\n+\n   /**\n    *  @brief Tests a range for element-wise equality.\n    *  @ingroup non_mutating_algorithms"}, {"sha": "48f9bde78c5f1dee71a6fa98904ae484efbb42d9", "filename": "libstdc++-v3/include/bits/stl_function.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -217,6 +217,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n #if __cplusplus > 201103L\n+\n+#define __cpp_lib_transparent_operators 201210\n+#define __cpp_lib_generic_associative_lookup 201304\n+\n   template<>\n     struct plus<void>\n     {"}, {"sha": "ce38c5a77332481e80df3a277379c5e45a58cdad", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -743,6 +743,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n #if __cplusplus > 201103L\n+\n+#define __cpp_lib_make_unique 201304\n+\n   template<typename _Tp>\n     struct _MakeUniq\n     { typedef unique_ptr<_Tp> __single_object; };"}, {"sha": "62844d68cf44bb21654022f9f8af137ce51f2460", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -782,6 +782,8 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n #if __cplusplus > 201103L\n \n+#define __cpp_lib_chrono_udls 201304\n+\n   inline namespace literals\n   {\n   inline namespace chrono_literals"}, {"sha": "bf302c1867290ec0a3a04cb554061987ac3b259c", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -1934,6 +1934,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n inline namespace literals {\n inline namespace complex_literals {\n \n+#define __cpp_lib_complex_udls 201309\n+\n   constexpr std::complex<float>\n   operator\"\"if(long double __num)\n   { return std::complex<float>{0.0F, static_cast<float>(__num)}; }"}, {"sha": "9625d43f00f9284719358c2d1c00a5ce51371ed6", "filename": "libstdc++-v3/include/std/iomanip", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -339,6 +339,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus > 201103L\n \n+#define __cpp_lib_quoted_string_io 201304\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n   namespace __detail {\n   _GLIBCXX_BEGIN_NAMESPACE_VERSION"}, {"sha": "6405f1025ecd0420d83f5dba9a1972302c70e22d", "filename": "libstdc++-v3/include/std/shared_mutex", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fshared_mutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fshared_mutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fshared_mutex?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -52,6 +52,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n \n #if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n+\n+#define __cpp_lib_shared_timed_mutex 201402\n+\n   /// shared_timed_mutex\n   class shared_timed_mutex\n   {"}, {"sha": "6be7f234b92c7baffd30e24fd976b636c820794a", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -746,6 +746,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n #if __cplusplus > 201103L\n+\n+#define __cpp_lib_tuples_by_type 201304\n+\n   template<typename _Head, size_t __i, typename... _Tail>\n     constexpr _Head&\n     __get_helper2(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept"}, {"sha": "86dd6f9804437bfe0eceed07bf0984569a141691", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -73,6 +73,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef integral_constant<_Tp, __v>   type;\n       constexpr operator value_type() const { return value; }\n #if __cplusplus > 201103L\n+\n+#define __cpp_lib_integral_constant_callable 201304\n+\n       constexpr value_type operator()() const { return value; }\n #endif\n     };\n@@ -480,6 +483,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct is_function<_Res(_ArgTypes......) const volatile &&>\n     : public true_type { };\n \n+#define __cpp_lib_is_null_pointer 201309\n+\n   template<typename>\n     struct __is_null_pointer_helper\n     : public false_type { };\n@@ -1451,6 +1456,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n #if __cplusplus > 201103L\n+\n+#define __cpp_lib_transformation_trait_aliases 201304\n+\n   /// Alias template for remove_const\n   template<typename _Tp>\n     using remove_const_t = typename remove_const<_Tp>::type;\n@@ -2090,6 +2098,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Sfinae-friendly result_of implementation:\n \n+#define __cpp_lib_result_of_sfinae 201210\n+\n   // [func.require] paragraph 1 bullet 1:\n   struct __result_of_memfun_ref_impl\n   {"}, {"sha": "a244ec6de0b0c7e673ca7cef95106c43b38e7613", "filename": "libstdc++-v3/include/std/utility", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -70,6 +70,7 @@\n #include <bits/stl_pair.h>\n \n #if __cplusplus >= 201103L\n+\n #include <bits/move.h>\n #include <initializer_list>\n \n@@ -157,6 +158,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return __pair_get<_Int>::__const_get(__in); }\n \n #if __cplusplus > 201103L\n+\n+#define __cpp_lib_tuples_by_type 201304\n+\n   template <typename _Tp, typename _Up>\n     constexpr _Tp&\n     get(pair<_Tp, _Up>& __p) noexcept\n@@ -187,6 +191,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     get(pair<_Up, _Tp>&& __p) noexcept\n     { return std::move(__p.second); }\n \n+#define __cpp_lib_exchange_function 201304\n+\n   /// Assign @p __new_val to @p __obj and return its previous value.\n   template <typename _Tp, typename _Up = _Tp>\n     inline _Tp\n@@ -216,6 +222,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n #if __cplusplus > 201103L\n+\n+#define __cpp_lib_integer_sequence 201304\n+\n   /// Class template integer_sequence\n   template<typename _Tp, _Tp... _Idx>\n     struct integer_sequence"}, {"sha": "3710020614de7fb59faca0417410d6e568e25057", "filename": "libstdc++-v3/testsuite/20_util/declval/requirements/1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -19,7 +19,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 2082 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 2088 }\n \n #include <utility>\n "}, {"sha": "9a897bc4ebeca9ad80f492d809cdfb83ba499790", "filename": "libstdc++-v3/testsuite/20_util/duration/literals/range.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Frange.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Frange.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Frange.cc?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -27,5 +27,5 @@ test01()\n \n   // std::numeric_limits<int64_t>::max() == 9223372036854775807;\n   auto h = 9223372036854775808h;\n-  // { dg-error \"cannot be represented\" \"\" { target *-*-* } 794 }\n+  // { dg-error \"cannot be represented\" \"\" { target *-*-* } 799 }\n }"}, {"sha": "a91eca47c7d9dcd60c02808aa8668a336cc1c3af", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -31,5 +31,5 @@ void test01()\n   test_type d;\n }\n \n-// { dg-error \"rep cannot be a duration\" \"\" { target *-*-* } 246 }\n+// { dg-error \"rep cannot be a duration\" \"\" { target *-*-* } 249 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 31 }"}, {"sha": "b712ed4a64a0e328f4644d0b29249a1fa4fdc0fe", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -32,5 +32,5 @@ void test01()\n   test_type d;\t\t\t// { dg-error \"required from here\" }\n }\n \n-// { dg-error \"must be a specialization of ratio\" \"\" { target *-*-* } 247 }\n+// { dg-error \"must be a specialization of ratio\" \"\" { target *-*-* } 250 }\n // { dg-prune-output \"not a member\" }"}, {"sha": "a25e0da5a91fe3cbd2543ab41a960983301e91f4", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -33,5 +33,5 @@ void test01()\n   test_type d;\n }\n \n-// { dg-error \"period must be positive\" \"\" { target *-*-* } 249 }\n+// { dg-error \"period must be positive\" \"\" { target *-*-* } 252 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 33 }"}, {"sha": "9a3ea8bf799a0d3f82447b68d202115d8f5a75e4", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -48,5 +48,5 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1747 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 1711 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1753 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 1717 }"}, {"sha": "8539e7a7223b72baef08719ec478e50a5f56e4f3", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -48,5 +48,5 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1650 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 1614 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1656 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 1620 }"}, {"sha": "9a3a24586474a5de5cebcc3eac992cdf21c7ff6e", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/get_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -28,6 +28,6 @@ int n1 = std::get<1>(a);\n int n2 = std::get<1>(std::move(a));\n int n3 = std::get<1>(ca);\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 274 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 283 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 291 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 277 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 286 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 294 }"}, {"sha": "6aff5024317c8054ecd2cadd9d192c07130b6f4c", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -23,4 +23,4 @@\n \n typedef std::tuple_element<1, std::array<int, 1>>::type type;\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 322 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 325 }"}, {"sha": "b97ecc58f99f0d21448db6c01340a867ab5744fa", "filename": "libstdc++-v3/testsuite/experimental/feat-cxx14.cc", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffeat-cxx14.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffeat-cxx14.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffeat-cxx14.cc?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -0,0 +1,113 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do compile }\n+\n+#include <utility>\n+#include <tuple>\n+#include <memory>\n+#include <functional>\n+#include <type_traits>\n+#include <chrono>\n+#include <string>\n+#include <complex>\n+#include <iomanip>\n+#include <shared_mutex>\n+\n+#ifndef  __cpp_lib_integer_sequence\n+#  error \"__cpp_lib_integer_sequence\"\n+#elif  __cpp_lib_integer_sequence != 201304\n+#  error \"__cpp_lib_integer_sequence != 201304\"\n+#endif\n+\n+#ifndef  __cpp_lib_exchange_function\n+#  error \"__cpp_lib_exchange_function\"\n+#elif  __cpp_lib_exchange_function != 201304\n+#  error \"__cpp_lib_exchange_function != 201304\"\n+#endif\n+\n+#ifndef  __cpp_lib_tuples_by_type\n+#  error \"__cpp_lib_tuples_by_type\"\n+#elif  __cpp_lib_tuples_by_type != 201304\n+#  error \"__cpp_lib_tuples_by_type != 201304\"\n+#endif\n+\n+#ifndef  __cpp_lib_make_unique\n+#  error \"__cpp_lib_make_unique\"\n+#elif  __cpp_lib_make_unique != 201304\n+#  error \"__cpp_lib_make_unique != 201304\"\n+#endif\n+\n+#ifndef  __cpp_lib_transparent_operators\n+#  error \"__cpp_lib_transparent_operators\"\n+#elif  __cpp_lib_transparent_operators != 201210\n+#  error \"__cpp_lib_transparent_operators != 201210\"\n+#endif\n+\n+#ifndef  __cpp_lib_result_of_sfinae\n+#  error \"__cpp_lib_result_of_sfinae\"\n+#elif  __cpp_lib_result_of_sfinae != 201210\n+#  error \"__cpp_lib_result_of_sfinae != 201210\"\n+#endif\n+\n+#ifndef  __cpp_lib_integral_constant_callable\n+#  error \"__cpp_lib_integral_constant_callable\"\n+#elif  __cpp_lib_integral_constant_callable != 201304\n+#  error \"__cpp_lib_integral_constant_callable != 201304\"\n+#endif\n+\n+#ifndef  __cpp_lib_transformation_trait_aliases\n+#  error \"__cpp_lib_transformation_trait_aliases\"\n+#elif  __cpp_lib_transformation_trait_aliases != 201304\n+#  error \"__cpp_lib_transformation_trait_aliases != 201304\"\n+#endif\n+\n+#ifndef  __cpp_lib_chrono_udls\n+#  error \"__cpp_lib_chrono_udls\"\n+#elif  __cpp_lib_chrono_udls != 201304\n+#  error \"__cpp_lib_chrono_udls != 201304\"\n+#endif\n+\n+#ifndef  __cpp_lib_string_udls\n+#  error \"__cpp_lib_string_udls\"\n+#elif  __cpp_lib_string_udls != 201304\n+#  error \"__cpp_lib_string_udls != 201304\"\n+#endif\n+\n+#ifndef __cpp_lib_complex_udls\n+#  error \"__cpp_lib_complex_udls\"\n+#elif  __cpp_lib_complex_udls != 201309\n+#  error \"__cpp_lib_complex_udls != 201309\"\n+#endif\n+\n+#ifndef  __cpp_lib_generic_associative_lookup\n+#  error \"__cpp_lib_generic_associative_lookup\"\n+#elif  __cpp_lib_generic_associative_lookup != 201304\n+#  error \"__cpp_lib_generic_associative_lookup != 201304\"\n+#endif\n+\n+//#ifndef  __cpp_lib_null_iterators\n+//#  error \"__cpp_lib_null_iterators\"\n+//#elif  __cpp_lib_null_iterators != 201304\n+//#  error \"__cpp_lib_null_iterators != 201304\"\n+//#endif\n+\n+#ifndef  __cpp_lib_robust_nonmodifying_seq_ops\n+#  error \"__cpp_lib_robust_nonmodifying_seq_ops\"\n+#elif  __cpp_lib_robust_nonmodifying_seq_ops != 201304\n+#  error \"__cpp_lib_robust_nonmodifying_seq_ops != 201304\"\n+#endif\n+\n+#ifndef  __cpp_lib_quoted_string_io\n+#  error \"__cpp_lib_quoted_string_io\"\n+#elif  __cpp_lib_quoted_string_io != 201304\n+#  error \"__cpp_lib_quoted_string_io != 201304\"\n+#endif\n+\n+#if !__has_include(<shared_mutex>)\n+#  error \"<shared_mutex>\"\n+#endif\n+\n+#ifndef  __cpp_lib_shared_timed_mutex\n+#  error \"__cpp_lib_shared_timed_mutex\"\n+#elif  __cpp_lib_shared_timed_mutex != 201402\n+#  error \"__cpp_lib_shared_timed_mutex != 201402\"\n+#endif"}, {"sha": "ac8560dfb42aa7308f41488b7f437c12cb7e2e44", "filename": "libstdc++-v3/testsuite/experimental/feat-lib-fund.cc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffeat-lib-fund.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffeat-lib-fund.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffeat-lib-fund.cc?ref=a15f7cb8b8c124bb7c49ab9b8d29dfd62ea58d10", "patch": "@@ -0,0 +1,25 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do compile }\n+\n+#include <experimental/optional>\n+#include <experimental/string_view>\n+\n+#if !__has_include(<experimental/optional>)\n+#  error \"<experimental/optional>\"\n+#endif\n+\n+//#if !__has_include(<experimental/net>)\n+//#  error \"<experimental/net>\"\n+//#endif\n+\n+//#if !__has_include(<experimental/any>)\n+//#  error \"<experimental/any>\"\n+//#endif\n+\n+//#if !__has_include(<experimental/memory_resource>)\n+//#  error \"<experimental/memory_resource>\"\n+//#endif\n+\n+#if !__has_include(<experimental/string_view>)\n+#  error \"<experimental/string_view>\"\n+#endif"}]}