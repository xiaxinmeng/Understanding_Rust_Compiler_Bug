{"sha": "7b5c5139a96b384e2372b4bcd579a4f0b83201d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I1YzUxMzlhOTZiMzg0ZTIzNzJiNGJjZDU3OWE0ZjBiODMyMDFkMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-03-12T11:12:49Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-03-12T11:12:49Z"}, "message": "re PR tree-optimization/51721 (-Warray-bounds false positives and inconsistencies)\n\n\tPR tree-optimization/51721\n\t* tree-vrp.c (register_edge_assert_for_2): Add asserts for unsvar\n\tif (int) unsvar cmp CST.\n\n\t* gcc.dg/tree-ssa/vrp64.c: New test.\n\nFrom-SVN: r185222", "tree": {"sha": "11c78b9836d0bb51eefa3cf90c77aa150a02f8bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11c78b9836d0bb51eefa3cf90c77aa150a02f8bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b5c5139a96b384e2372b4bcd579a4f0b83201d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b5c5139a96b384e2372b4bcd579a4f0b83201d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b5c5139a96b384e2372b4bcd579a4f0b83201d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b5c5139a96b384e2372b4bcd579a4f0b83201d2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3f5f659208192192b83af727ab2f0103c16c1c44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f5f659208192192b83af727ab2f0103c16c1c44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f5f659208192192b83af727ab2f0103c16c1c44"}], "stats": {"total": 219, "additions": 215, "deletions": 4}, "files": [{"sha": "a408ce7aef5f4be04b4006388f0bf49cf311e537", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5c5139a96b384e2372b4bcd579a4f0b83201d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5c5139a96b384e2372b4bcd579a4f0b83201d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b5c5139a96b384e2372b4bcd579a4f0b83201d2", "patch": "@@ -1,3 +1,9 @@\n+2012-03-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/51721\n+\t* tree-vrp.c (register_edge_assert_for_2): Add asserts for unsvar\n+\tif (int) unsvar cmp CST.\n+\n 2012-03-12  Richard Guenther  <rguenther@suse.de>\n \n         * tree-sra.c (create_access_replacement): Only rename the"}, {"sha": "29981edae1f880ad433f46785fa712e53791e415", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5c5139a96b384e2372b4bcd579a4f0b83201d2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5c5139a96b384e2372b4bcd579a4f0b83201d2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7b5c5139a96b384e2372b4bcd579a4f0b83201d2", "patch": "@@ -1,5 +1,8 @@\n 2012-03-12  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/51721\n+\t* gcc.dg/tree-ssa/vrp64.c: New test.\n+\n \tPR tree-optimization/52533\n \t* gcc.c-torture/compile/pr52533.c: New test.\n "}, {"sha": "2ab328f1d8b6cda623596644dabb0fbb88ff97c3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp64.c", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5c5139a96b384e2372b4bcd579a4f0b83201d2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5c5139a96b384e2372b4bcd579a4f0b83201d2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp64.c?ref=7b5c5139a96b384e2372b4bcd579a4f0b83201d2", "patch": "@@ -0,0 +1,152 @@\n+/* PR tree-optimization/51721 */\n+/* { dg-do link } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void link_error (void);\n+\n+#define BITSM1 (sizeof (int) * __CHAR_BIT__ - 1)\n+\n+void\n+f1 (unsigned int s)\n+{\n+  if (s >> BITSM1 != 0)\n+    {\n+      if (s == 0 || s == 5 || s == __INT_MAX__)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s == 1U + __INT_MAX__ || s == 6U + __INT_MAX__ || s == -1U)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f2 (int s)\n+{\n+  if (s >> BITSM1 == 0)\n+    {\n+      if (s == -1 || s == -5 || s == -__INT_MAX__ - 1)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s == 0 || s == 5 || s == __INT_MAX__)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f3 (unsigned int s)\n+{\n+  if ((s & (1U << BITSM1)) != 0)\n+    {\n+      if (s == 0 || s == 5 || s == __INT_MAX__)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s == 1U + __INT_MAX__ || s == 6U + __INT_MAX__ || s == -1U)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f4 (int s)\n+{\n+  if ((s & (1U << BITSM1)) == 0)\n+    {\n+      if (s == -1 || s == -5 || s == -__INT_MAX__ - 1)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s == 0 || s == 5 || s == __INT_MAX__)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f5 (unsigned int s)\n+{\n+  if ((int) s < 0)\n+    {\n+      if (s == 0 || s == 5 || s == __INT_MAX__)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s == 1U + __INT_MAX__ || s == 6U + __INT_MAX__ || s == -1U)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f6 (unsigned int s)\n+{\n+  if ((int) s < 4)\n+    {\n+      if (s == 4 || s == 6 || s == __INT_MAX__)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s == 1U + __INT_MAX__ || s == 6U + __INT_MAX__ || s == -1U\n+\t  || s == 3 || s == 0)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f7 (unsigned int s)\n+{\n+  if ((int) s <= -7)\n+    {\n+      if (s == -6U || s == -1U || s == 0 || s == 4 || s == 6 || s == __INT_MAX__)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s == 1U + __INT_MAX__ || s == 6U + __INT_MAX__ || s == -9U\n+\t  || s == -7U)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f8 (unsigned int s)\n+{\n+  if ((int) s >= 4)\n+    {\n+      if (s == 1U + __INT_MAX__ || s == 6U + __INT_MAX__ || s == -1U\n+\t  || s == 3 || s == 0)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s == 4 || s == 6 || s == __INT_MAX__)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f9 (unsigned int s)\n+{\n+  if ((int) s > -7)\n+    {\n+      if (s == 1U + __INT_MAX__ || s == 6U + __INT_MAX__ || s == -9U\n+\t  || s == -7U)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s == -6U || s == -1U || s == 0 || s == 4 || s == 6 || s == __INT_MAX__)\n+\tlink_error ();\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  return 0;\n+}"}, {"sha": "5f89da9297a5ea42d2da5983e3a641428e191d30", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 54, "deletions": 4, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5c5139a96b384e2372b4bcd579a4f0b83201d2/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5c5139a96b384e2372b4bcd579a4f0b83201d2/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=7b5c5139a96b384e2372b4bcd579a4f0b83201d2", "patch": "@@ -4462,8 +4462,6 @@ register_edge_assert_for_2 (tree name, edge e, gimple_stmt_iterator bsi,\n \t}\n     }\n \n-  /* Similarly add asserts for NAME == CST and NAME being defined as\n-     NAME = NAME2 >> CST2.  */\n   if (TREE_CODE_CLASS (comp_code) == tcc_comparison\n       && TREE_CODE (val) == INTEGER_CST)\n     {\n@@ -4473,7 +4471,60 @@ register_edge_assert_for_2 (tree name, edge e, gimple_stmt_iterator bsi,\n       double_int mask = double_int_zero;\n       unsigned int prec = TYPE_PRECISION (TREE_TYPE (val));\n \n-      /* Extract CST2 from the right shift.  */\n+      /* Add asserts for NAME cmp CST and NAME being defined\n+\t as NAME = (int) NAME2.  */\n+      if (!TYPE_UNSIGNED (TREE_TYPE (val))\n+\t  && (comp_code == LE_EXPR || comp_code == LT_EXPR\n+\t      || comp_code == GT_EXPR || comp_code == GE_EXPR)\n+\t  && gimple_assign_cast_p (def_stmt))\n+\t{\n+\t  name2 = gimple_assign_rhs1 (def_stmt);\n+\t  if (CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (def_stmt))\n+\t      && INTEGRAL_TYPE_P (TREE_TYPE (name2))\n+\t      && TYPE_UNSIGNED (TREE_TYPE (name2))\n+\t      && prec == TYPE_PRECISION (TREE_TYPE (name2))\n+\t      && (comp_code == LE_EXPR || comp_code == GT_EXPR\n+\t\t  || !tree_int_cst_equal (val,\n+\t\t\t\t\t  TYPE_MIN_VALUE (TREE_TYPE (val))))\n+\t      && live_on_edge (e, name2)\n+\t      && !has_single_use (name2))\n+\t    {\n+\t      tree tmp, cst;\n+\t      enum tree_code new_comp_code = comp_code;\n+\n+\t      cst = fold_convert (TREE_TYPE (name2),\n+\t\t\t\t  TYPE_MIN_VALUE (TREE_TYPE (val)));\n+\t      /* Build an expression for the range test.  */\n+\t      tmp = build2 (PLUS_EXPR, TREE_TYPE (name2), name2, cst);\n+\t      cst = fold_build2 (PLUS_EXPR, TREE_TYPE (name2), cst,\n+\t\t\t\t fold_convert (TREE_TYPE (name2), val));\n+\t      if (comp_code == LT_EXPR || comp_code == GE_EXPR)\n+\t\t{\n+\t\t  new_comp_code = comp_code == LT_EXPR ? LE_EXPR : GT_EXPR;\n+\t\t  cst = fold_build2 (MINUS_EXPR, TREE_TYPE (name2), cst,\n+\t\t\t\t     build_int_cst (TREE_TYPE (name2), 1));\n+\t\t}\n+\n+\t      if (dump_file)\n+\t\t{\n+\t\t  fprintf (dump_file, \"Adding assert for \");\n+\t\t  print_generic_expr (dump_file, name2, 0);\n+\t\t  fprintf (dump_file, \" from \");\n+\t\t  print_generic_expr (dump_file, tmp, 0);\n+\t\t  fprintf (dump_file, \"\\n\");\n+\t\t}\n+\n+\t      register_new_assert_for (name2, tmp, new_comp_code, cst, NULL,\n+\t\t\t\t       e, bsi);\n+\n+\t      retval = true;\n+\t    }\n+\t}\n+\n+      /* Add asserts for NAME cmp CST and NAME being defined as\n+\t NAME = NAME2 >> CST2.\n+\n+\t Extract CST2 from the right shift.  */\n       if (is_gimple_assign (def_stmt)\n \t  && gimple_assign_rhs_code (def_stmt) == RSHIFT_EXPR)\n \t{\n@@ -4491,7 +4542,6 @@ register_edge_assert_for_2 (tree name, edge e, gimple_stmt_iterator bsi,\n \t      val2 = fold_binary (LSHIFT_EXPR, TREE_TYPE (val), val, cst2);\n \t    }\n \t}\n-\n       if (val2 != NULL_TREE\n \t  && TREE_CODE (val2) == INTEGER_CST\n \t  && simple_cst_equal (fold_build2 (RSHIFT_EXPR,"}]}