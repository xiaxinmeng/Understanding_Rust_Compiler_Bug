{"sha": "87533b37c7f8d54d0dad71d1a44a541d5ff36587", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc1MzNiMzdjN2Y4ZDU0ZDBkYWQ3MWQxYTQ0YTU0MWQ1ZmYzNjU4Nw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-05-20T10:44:47Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-05-20T10:44:47Z"}, "message": "cp-tree.h (make_ptrmem_cst): New function.\n\n\t* cp-tree.h (make_ptrmem_cst): New function.\n\t* expr.c (cplus_expand_constant): Split out from ...\n\t(cplus_expand_expr): Here.  Use cplus_expand_constant.\n\t(init_cplus_expand): Set lang_expand_constant.\n\t* pt.c (convert_nontype_argument): Use make_ptrmem_cst.\n\t* tree.c (make_ptrmem_cst): Define.\n\t* typeck.c (unary_complex_lvalue): Use make_ptrmem_cst.\n\t* typeck2.c (initializer_constant_valid_p): Use make_ptrmem_cst.\n\nFrom-SVN: r27060", "tree": {"sha": "3cf5566ec06f2dc7cde61acc0794f3a26018176d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cf5566ec06f2dc7cde61acc0794f3a26018176d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87533b37c7f8d54d0dad71d1a44a541d5ff36587", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87533b37c7f8d54d0dad71d1a44a541d5ff36587", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87533b37c7f8d54d0dad71d1a44a541d5ff36587", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87533b37c7f8d54d0dad71d1a44a541d5ff36587/comments", "author": null, "committer": null, "parents": [{"sha": "e697e20a892668e5a9189980193e23412a0cc221", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e697e20a892668e5a9189980193e23412a0cc221", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e697e20a892668e5a9189980193e23412a0cc221"}], "stats": {"total": 156, "additions": 100, "deletions": 56}, "files": [{"sha": "c4bb98b95f78f5667c4190ef617d96ceb17d67ec", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87533b37c7f8d54d0dad71d1a44a541d5ff36587/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87533b37c7f8d54d0dad71d1a44a541d5ff36587/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=87533b37c7f8d54d0dad71d1a44a541d5ff36587", "patch": "@@ -1,3 +1,14 @@\n+1999-05-20  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (make_ptrmem_cst): New function.\n+\t* expr.c (cplus_expand_constant): Split out from ...\n+\t(cplus_expand_expr): Here.  Use cplus_expand_constant.\n+\t(init_cplus_expand): Set lang_expand_constant.\n+\t* pt.c (convert_nontype_argument): Use make_ptrmem_cst.\n+\t* tree.c (make_ptrmem_cst): Define.\n+\t* typeck.c (unary_complex_lvalue): Use make_ptrmem_cst.\n+\t* typeck2.c (initializer_constant_valid_p): Use make_ptrmem_cst.\n+\n 1999-05-19  Mark Mitchell  <mark@codesourcery.com>\n \n \t* pt.c (build_template_decl): Copy DECL_NONCONVERTING_P."}, {"sha": "c2becd903af01af6fbf4d417168882ebf59775f0", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87533b37c7f8d54d0dad71d1a44a541d5ff36587/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87533b37c7f8d54d0dad71d1a44a541d5ff36587/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=87533b37c7f8d54d0dad71d1a44a541d5ff36587", "patch": "@@ -3386,6 +3386,7 @@ extern tree maybe_dummy_object\t\t\tPROTO((tree, tree *));\n extern int is_dummy_object\t\t\tPROTO((tree));\n extern tree search_tree                         PROTO((tree, tree (*)(tree)));\n extern int cp_valid_lang_attribute\t\tPROTO((tree, tree, tree, tree));\n+extern tree make_ptrmem_cst                     PROTO((tree, tree));\n \n #define scratchalloc expralloc\n #define scratch_tree_cons expr_tree_cons"}, {"sha": "83bdff9eba7649cb3c37cf88308ece8baef7c6f2", "filename": "gcc/cp/expr.c", "status": "modified", "additions": 59, "deletions": 37, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87533b37c7f8d54d0dad71d1a44a541d5ff36587/gcc%2Fcp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87533b37c7f8d54d0dad71d1a44a541d5ff36587/gcc%2Fcp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.c?ref=87533b37c7f8d54d0dad71d1a44a541d5ff36587", "patch": "@@ -36,6 +36,62 @@ static tree extract_scalar_init PROTO((tree, tree));\n static rtx cplus_expand_expr PROTO((tree, rtx, enum machine_mode,\n \t\t\t\t    enum expand_modifier));\n \n+/* Hook used by output_constant to expand language-specific\n+   constants.  */\n+\n+static tree\n+cplus_expand_constant (cst)\n+     tree cst;\n+{\n+  switch (TREE_CODE (cst))\n+    {\n+    case PTRMEM_CST:\n+      {\n+\ttree type = TREE_TYPE (cst);\n+\ttree member;\n+\ttree offset;\n+      \n+\t/* Find the member.  */\n+\tmember = PTRMEM_CST_MEMBER (cst);\n+\n+\tif (TREE_CODE (member) == FIELD_DECL) \n+\t  {\n+\t    /* Find the offset for the field.  */\n+\t    offset = convert (sizetype,\n+\t\t\t      size_binop (EASY_DIV_EXPR,\n+\t\t\t\t\t  DECL_FIELD_BITPOS (member),\n+\t\t\t\t\t  size_int (BITS_PER_UNIT)));\n+\n+\t    /* We offset all pointer to data members by 1 so that we\n+\t       can distinguish between a null pointer to data member\n+\t       and the first data member of a structure.  */\n+\t    offset = size_binop (PLUS_EXPR, offset, size_int (1));\n+\t\n+\t    cst = cp_convert (type, offset);\n+\t  }\n+\telse\n+\t  {\n+\t    tree delta;\n+\t    tree idx;\n+\t    tree pfn;\n+\t    tree delta2;\n+\n+\t    expand_ptrmemfunc_cst (cst, &delta, &idx, &pfn, &delta2);\n+\n+\t    cst = build_ptrmemfunc1 (type, delta, idx,\n+\t\t\t\t     pfn, delta2);\n+\t  }\n+      }\n+      break;\n+\n+    default:\n+      /* There's nothing to do.  */\n+      break;\n+    }\n+\n+  return cst;\n+}\n+\n /* Hook used by expand_expr to expand language-specific tree codes.  */\n \n static rtx\n@@ -163,43 +219,8 @@ cplus_expand_expr (exp, target, tmode, modifier)\n       }\n \n     case PTRMEM_CST:\n-      {\n-\ttree member;\n-\ttree offset;\n-\t\n-\t/* Find the member.  */\n-\tmember = PTRMEM_CST_MEMBER (exp);\n-\n-\tif (TREE_CODE (member) == FIELD_DECL) \n-\t  {\n-\t    /* Find the offset for the field.  */\n-\t    offset = convert (sizetype,\n-\t\t\t      size_binop (EASY_DIV_EXPR,\n-\t\t\t\t\t  DECL_FIELD_BITPOS (member),\n-\t\t\t\t\t  size_int (BITS_PER_UNIT)));\n-\n-\t    /* We offset all pointer to data members by 1 so that we\n-\t       can distinguish between a null pointer to data member\n-\t       and the first data member of a structure.  */\n-\t    offset = size_binop (PLUS_EXPR, offset, size_int (1));\n-\t\n-\t    return expand_expr (cp_convert (type, offset), target, tmode,\n-\t\t\t\tmodifier);\n-\t  }\n-\telse\n-\t  {\n-\t    tree delta;\n-\t    tree idx;\n-\t    tree pfn;\n-\t    tree delta2;\n-\n-\t    expand_ptrmemfunc_cst (exp, &delta, &idx, &pfn, &delta2);\n-\n-\t    return expand_expr (build_ptrmemfunc1 (type, delta, idx,\n-\t\t\t\t\t\t   pfn, delta2),\n-\t\t\t\ttarget, tmode, modifier);\n-\t  }\n-      }\n+      return expand_expr (cplus_expand_constant (exp),\n+\t\t\t  target, tmode, modifier);\n \n     case OFFSET_REF:\n       {\n@@ -237,6 +258,7 @@ void\n init_cplus_expand ()\n {\n   lang_expand_expr = cplus_expand_expr;\n+  lang_expand_constant = cplus_expand_constant;\n }\n \n /* If DECL had its rtl moved from where callers expect it"}, {"sha": "8c5622cf53d5fb834dd33e801aa0b185b8d4f621", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87533b37c7f8d54d0dad71d1a44a541d5ff36587/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87533b37c7f8d54d0dad71d1a44a541d5ff36587/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=87533b37c7f8d54d0dad71d1a44a541d5ff36587", "patch": "@@ -2782,18 +2782,14 @@ convert_nontype_argument (type, expr)\n \t       applied.  */\n \t    e = perform_qualification_conversions (type, expr);\n \t    if (TREE_CODE (e) == NOP_EXPR)\n-\t      {\n-\t\t/* The call to perform_qualification_conversions will\n-\t\t   insert a NOP_EXPR over EXPR to do express\n-\t\t   conversion, if necessary.  But, that will confuse\n-\t\t   us if we use this (converted) template parameter to\n-\t\t   instantiate another template; then the thing will\n-\t\t   not look like a valid template argument.  So, just\n-\t\t   make a new constant, of the appropriate type.  */\n-\t\te = make_node (PTRMEM_CST);\n-\t\tTREE_TYPE (e) = type;\n-\t\tPTRMEM_CST_MEMBER (e) = PTRMEM_CST_MEMBER (expr);\n-\t      }\n+\t      /* The call to perform_qualification_conversions will\n+\t\t insert a NOP_EXPR over EXPR to do express conversion,\n+\t\t if necessary.  But, that will confuse us if we use\n+\t\t this (converted) template parameter to instantiate\n+\t\t another template; then the thing will not look like a\n+\t\t valid template argument.  So, just make a new\n+\t\t constant, of the appropriate type.  */\n+\t      e = make_ptrmem_cst (type, PTRMEM_CST_MEMBER (expr));\n \t    return e;\n \t  }\n \telse if (TREE_CODE (type_pointed_to) == FUNCTION_TYPE)"}, {"sha": "3f7e5ca213bae3c83964e615fed6fdfd2cb307a0", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87533b37c7f8d54d0dad71d1a44a541d5ff36587/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87533b37c7f8d54d0dad71d1a44a541d5ff36587/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=87533b37c7f8d54d0dad71d1a44a541d5ff36587", "patch": "@@ -2795,3 +2795,21 @@ cp_valid_lang_attribute (attr_name, attr_args, decl, type)\n \n   return 0;\n }\n+\n+/* Return a new PTRMEM_CST of the indicated TYPE.  The MEMBER is the\n+   thing pointed to by the constant.  */\n+\n+tree\n+make_ptrmem_cst (type, member)\n+     tree type;\n+     tree member;\n+{\n+  tree ptrmem_cst = make_node (PTRMEM_CST);\n+  /* If would seem a great convenience if make_node would set\n+     TREE_CONSTANT for things of class `c', but it does not.  */\n+  TREE_CONSTANT (ptrmem_cst) = 1;\n+  TREE_TYPE (ptrmem_cst) = type;\n+  PTRMEM_CST_MEMBER (ptrmem_cst) = member;\n+  return ptrmem_cst;\n+}\n+"}, {"sha": "cdc012e332de565d4d124b28940a45b31b28c978", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87533b37c7f8d54d0dad71d1a44a541d5ff36587/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87533b37c7f8d54d0dad71d1a44a541d5ff36587/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=87533b37c7f8d54d0dad71d1a44a541d5ff36587", "patch": "@@ -4912,9 +4912,7 @@ unary_complex_lvalue (code, arg)\n \t  type = build_offset_type (DECL_FIELD_CONTEXT (t), TREE_TYPE (t));\n \t  type = build_pointer_type (type);\n \n-\t  t = make_node (PTRMEM_CST);\n-\t  TREE_TYPE (t) = type;\n-\t  PTRMEM_CST_MEMBER (t) = TREE_OPERAND (arg, 1);\n+\t  t = make_ptrmem_cst (type, TREE_OPERAND (arg, 1));\n \t  return t;\n \t}\n     }\n@@ -6574,10 +6572,7 @@ build_ptrmemfunc (type, pfn, force)\n \n   fn = TREE_OPERAND (pfn, 0);\n   my_friendly_assert (TREE_CODE (fn) == FUNCTION_DECL, 0);\n-  npfn = make_node (PTRMEM_CST);\n-  TREE_TYPE (npfn) = build_ptrmemfunc_type (type);\n-  PTRMEM_CST_MEMBER (npfn) = fn;\n-  return npfn;\n+  return make_ptrmem_cst (build_ptrmemfunc_type (type), fn);\n }\n \n /* Return the DELTA, IDX, PFN, and DELTA2 values for the PTRMEM_CST"}, {"sha": "652ca3914e8af71c09c089abadf2f183f51b20b1", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87533b37c7f8d54d0dad71d1a44a541d5ff36587/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87533b37c7f8d54d0dad71d1a44a541d5ff36587/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=87533b37c7f8d54d0dad71d1a44a541d5ff36587", "patch": "@@ -400,6 +400,7 @@ initializer_constant_valid_p (value, endtype)\n     case REAL_CST:\n     case STRING_CST:\n     case COMPLEX_CST:\n+    case PTRMEM_CST:\n       return null_pointer_node;\n \n     case ADDR_EXPR:"}]}