{"sha": "25959e29ee2178e6024f02619804919c165ae0ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU5NTllMjllZTIxNzhlNjAyNGYwMjYxOTgwNDkxOWMxNjVhZTBlYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-04-27T22:59:36Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-04-27T22:59:36Z"}, "message": "DR 438, [DR].\n\n2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n\n\tDR 438, [DR].\n\t* include/bits/basic_string.h (_S_construct_aux(_InIterator,\n\t_InIterator, const _Alloc&, __true_type)): Do not cast the\n\tsecond argument.\n\t* include/ext/rc_string_base.h (_S_construct_aux(_Integer,\n\t_Integer, const _Alloc&, std::__true_type)): Likewise.\n\t* include/ext/sso_string_base.h (_M_construct_aux(_InIterator,\n\t_InIterator, std::__true_type)): Likewise.\n\t* include/bits/stl_deque.h (_M_initialize_dispatch(_Integer,\n\t_Integer, __true_type)): Cast the first argument.\n\t(_M_assign_dispatch(_Integer, _Integer, __true_type)): Do\n\tnot cast the arguments.\n\t(_M_insert_dispatch(iterator, _Integer, _Integer, __true_type)):\n\tLikewise.\n\t* include/bits/stl_list.h (_M_initialize_dispatch(_Integer,\n\t_Integer, __true_type)): Likewise.\n\t(_M_assign_dispatch(_Integer, _Integer, __true_type)): Do\n\tnot cast both arguments.\n\t* include/bits/stl_bvector.h (_M_initialize_dispatch(_Integer,\n\t_Integer, __true_type)): Cast the first argument.\n\t(_M_assign_dispatch(_Integer, _Integer, __true_type)): Do not\n\tcast the arguments.\n\t* include/bits/stl_vector.h (_M_initialize_dispatch(_Integer,\n\t_Integer, __true_type)): Cast the first argument.\n\t(_M_assign_dispatch(_Integer, _Integer, __true_type)): Do not\n\tcast the arguments.\n\t(_M_insert_dispatch(iterator, _Integer, _Integer, __true_type)):\n\tLikewise.\n\t* testsuite/21_strings/basic_string/requirements/dr438/\n\tconstructor.cc: New.\n\t* testsuite/ext/vstring/requirements/dr438/constructor.cc: Likewise.\n\t* testsuite/23_containers/requirements/sequences/dr438/deque/\n\tassign_neg.cc: Likewise.\n\t* testsuite/23_containers/requirements/sequences/dr438/deque/\n\tconstructor.cc: Likewise.\n\t* testsuite/23_containers/requirements/sequences/dr438/deque/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/requirements/sequences/dr438/deque/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/requirements/sequences/dr438/deque/\n\tinsert_neg.cc: Likewise.\n\t* testsuite/23_containers/requirements/sequences/dr438/list/\n\tassign_neg.cc: Likewise.\n\t* testsuite/23_containers/requirements/sequences/dr438/list/\n\tconstructor.cc: Likewise.\n\t* testsuite/23_containers/requirements/sequences/dr438/list/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/requirements/sequences/dr438/list/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/requirements/sequences/dr438/list/\n\tinsert_neg.cc: Likewise.\n\t* testsuite/23_containers/requirements/sequences/dr438/vector/\n\tassign_neg.cc: Likewise.\n\t* testsuite/23_containers/requirements/sequences/dr438/vector/\n\tconstructor.cc: Likewise.\n\t* testsuite/23_containers/requirements/sequences/dr438/vector/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/requirements/sequences/dr438/vector/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/requirements/sequences/dr438/vector/\n\tinsert_neg.cc: Likewise.\n\t* testsuite/23_containers/requirements/sequences/dr438/vector/\n\tbool/constructor.cc: Likewise.\n\t* docs/html/ext/howto.html: Add an entry for DR 438.\n\nFrom-SVN: r124243", "tree": {"sha": "b6ce0fbc7eb73ad90bed9d9a6e094baf5cb4c6b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6ce0fbc7eb73ad90bed9d9a6e094baf5cb4c6b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25959e29ee2178e6024f02619804919c165ae0ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25959e29ee2178e6024f02619804919c165ae0ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25959e29ee2178e6024f02619804919c165ae0ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25959e29ee2178e6024f02619804919c165ae0ec/comments", "author": null, "committer": null, "parents": [{"sha": "113ab41c059d6a3aa137c11b8e582c39a6bdc100", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/113ab41c059d6a3aa137c11b8e582c39a6bdc100", "html_url": "https://github.com/Rust-GCC/gccrs/commit/113ab41c059d6a3aa137c11b8e582c39a6bdc100"}], "stats": {"total": 756, "additions": 710, "deletions": 46}, "files": [{"sha": "8084c5c4c9867b5e572ecb245e80ee45589134e0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=25959e29ee2178e6024f02619804919c165ae0ec", "patch": "@@ -1,3 +1,70 @@\n+2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tDR 438, [DR].\n+\t* include/bits/basic_string.h (_S_construct_aux(_InIterator,\n+\t_InIterator, const _Alloc&, __true_type)): Do not cast the\n+\tsecond argument.\n+\t* include/ext/rc_string_base.h (_S_construct_aux(_Integer,\n+\t_Integer, const _Alloc&, std::__true_type)): Likewise.\n+\t* include/ext/sso_string_base.h (_M_construct_aux(_InIterator,\n+\t_InIterator, std::__true_type)): Likewise.\n+\t* include/bits/stl_deque.h (_M_initialize_dispatch(_Integer,\n+\t_Integer, __true_type)): Cast the first argument.\n+\t(_M_assign_dispatch(_Integer, _Integer, __true_type)): Do\n+\tnot cast the arguments.\n+\t(_M_insert_dispatch(iterator, _Integer, _Integer, __true_type)):\n+\tLikewise.\n+\t* include/bits/stl_list.h (_M_initialize_dispatch(_Integer,\n+\t_Integer, __true_type)): Likewise.\n+\t(_M_assign_dispatch(_Integer, _Integer, __true_type)): Do\n+\tnot cast both arguments.\n+\t* include/bits/stl_bvector.h (_M_initialize_dispatch(_Integer,\n+\t_Integer, __true_type)): Cast the first argument.\n+\t(_M_assign_dispatch(_Integer, _Integer, __true_type)): Do not\n+\tcast the arguments.\n+\t* include/bits/stl_vector.h (_M_initialize_dispatch(_Integer,\n+\t_Integer, __true_type)): Cast the first argument.\n+\t(_M_assign_dispatch(_Integer, _Integer, __true_type)): Do not\n+\tcast the arguments.\n+\t(_M_insert_dispatch(iterator, _Integer, _Integer, __true_type)):\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/requirements/dr438/\n+\tconstructor.cc: New.\n+\t* testsuite/ext/vstring/requirements/dr438/constructor.cc: Likewise.\n+\t* testsuite/23_containers/requirements/sequences/dr438/deque/\n+\tassign_neg.cc: Likewise.\n+\t* testsuite/23_containers/requirements/sequences/dr438/deque/\n+\tconstructor.cc: Likewise.\n+\t* testsuite/23_containers/requirements/sequences/dr438/deque/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/requirements/sequences/dr438/deque/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/requirements/sequences/dr438/deque/\n+\tinsert_neg.cc: Likewise.\n+\t* testsuite/23_containers/requirements/sequences/dr438/list/\n+\tassign_neg.cc: Likewise.\n+\t* testsuite/23_containers/requirements/sequences/dr438/list/\n+\tconstructor.cc: Likewise.\n+\t* testsuite/23_containers/requirements/sequences/dr438/list/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/requirements/sequences/dr438/list/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/requirements/sequences/dr438/list/\n+\tinsert_neg.cc: Likewise.\n+\t* testsuite/23_containers/requirements/sequences/dr438/vector/\n+\tassign_neg.cc: Likewise.\n+\t* testsuite/23_containers/requirements/sequences/dr438/vector/\n+\tconstructor.cc: Likewise.\n+\t* testsuite/23_containers/requirements/sequences/dr438/vector/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/requirements/sequences/dr438/vector/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/requirements/sequences/dr438/vector/\n+\tinsert_neg.cc: Likewise.\n+\t* testsuite/23_containers/requirements/sequences/dr438/vector/\n+\tbool/constructor.cc: Likewise.\n+\t* docs/html/ext/howto.html: Add an entry for DR 438.\n+\n 2007-04-25  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/locale_classes.h: Remove redundant inline specifiers."}, {"sha": "fff3410180f42de66363522fdfb90c96207cdaec", "filename": "libstdc++-v3/docs/html/ext/howto.html", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html?ref=25959e29ee2178e6024f02619804919c165ae0ec", "patch": "@@ -543,7 +543,7 @@ <h2><a name=\"5\">LWG Issues</a></h2>\n     </dd>\n \n     <dt><a href=\"lwg-defects.html#432\">432</a>:\n-        <em>432. stringbuf::overflow() makes only one write position\n+        <em>stringbuf::overflow() makes only one write position\n \t    available</em>\n     </dt>\n     <dd>Implement the resolution, beyond DR 169.\n@@ -555,6 +555,12 @@ <h2><a name=\"5\">LWG Issues</a></h2>\n     <dd>Add three overloads, taking fewer template arguments.\n     </dd>\n \n+    <dt><a href=\"lwg-defects.html#438\">438</a>:\n+        <em>Ambiguity in the \"do the right thing\" clause</em>\n+    </dt>\n+    <dd>Implement the resolution, basically cast less.\n+    </dd>\n+\n     <dt><a href=\"lwg-defects.html#453\">453</a>:\n         <em>basic_stringbuf::seekoff need not always fail for an empty stream</em>\n     </dt>"}, {"sha": "6317b17cab3dc9c58349e2bb54e98ec6e7f30dc5", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=25959e29ee2178e6024f02619804919c165ae0ec", "patch": "@@ -1467,12 +1467,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n           return _S_construct(__beg, __end, __a, _Tag());\n \t}\n \n-      template<class _InIterator>\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 438. Ambiguity in the \"do the right thing\" clause\n+      template<class _Integer>\n         static _CharT*\n-        _S_construct_aux(_InIterator __beg, _InIterator __end,\n+        _S_construct_aux(_Integer __beg, _Integer __end,\n \t\t\t const _Alloc& __a, __true_type)\n-\t{ return _S_construct(static_cast<size_type>(__beg),\n-\t\t\t      static_cast<value_type>(__end), __a); }\n+        { return _S_construct(static_cast<size_type>(__beg), __end, __a); }\n \n       template<class _InIterator>\n         static _CharT*"}, {"sha": "be0ec9075d231369355e1290cba6b7c3f751be5b", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=25959e29ee2178e6024f02619804919c165ae0ec", "patch": "@@ -793,11 +793,14 @@ template<typename _Alloc>\n     }\n \n     // Check whether it's an integral type.  If so, it's not an iterator.\n+\n+    // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+    // 438. Ambiguity in the \"do the right thing\" clause\n     template<typename _Integer>\n       void\n       _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)\n       {\n-\t_M_initialize(__n);\n+\t_M_initialize(static_cast<size_type>(__n));\n \tstd::fill(this->_M_impl._M_start._M_p, \n \t\t  this->_M_impl._M_end_of_storage, __x ? ~0 : 0);\n       }\n@@ -828,10 +831,12 @@ template<typename _Alloc>\n \tstd::copy(__first, __last, this->_M_impl._M_start);\n       }\n \n+    // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+    // 438. Ambiguity in the \"do the right thing\" clause\n     template<typename _Integer>\n       void\n       _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)\n-      { _M_fill_assign((size_t) __n, (bool) __val); }\n+      { _M_fill_assign(__n, __val); }\n \n     template<class _InputIterator>\n       void\n@@ -888,6 +893,9 @@ template<typename _Alloc>\n       }\n \n     // Check whether it's an integral type.  If so, it's not an iterator.\n+\n+    // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+    // 438. Ambiguity in the \"do the right thing\" clause\n     template<typename _Integer>\n       void\n       _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,"}, {"sha": "0c7d7582557536efa3221e7a654e6047e23a1bba", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=25959e29ee2178e6024f02619804919c165ae0ec", "patch": "@@ -1221,11 +1221,14 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n       // Internal constructor functions follow.\n \n       // called by the range constructor to implement [23.1.1]/9\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 438. Ambiguity in the \"do the right thing\" clause\n       template<typename _Integer>\n         void\n         _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)\n         {\n-\t  _M_initialize_map(__n);\n+\t  _M_initialize_map(static_cast<size_type>(__n));\n \t  _M_fill_initialize(__x);\n \t}\n \n@@ -1285,13 +1288,13 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n       // assignment work for the range versions.\n \n       // called by the range assign to implement [23.1.1]/9\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 438. Ambiguity in the \"do the right thing\" clause\n       template<typename _Integer>\n         void\n         _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)\n-        {\n-\t  _M_fill_assign(static_cast<size_type>(__n),\n-\t\t\t static_cast<value_type>(__val));\n-\t}\n+        { _M_fill_assign(__n, __val); }\n \n       // called by the range assign to implement [23.1.1]/9\n       template<typename _InputIterator>\n@@ -1364,14 +1367,14 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n       // insertion work when all shortcuts fail.\n \n       // called by the range insert to implement [23.1.1]/9\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 438. Ambiguity in the \"do the right thing\" clause\n       template<typename _Integer>\n         void\n         _M_insert_dispatch(iterator __pos,\n \t\t\t   _Integer __n, _Integer __x, __true_type)\n-        {\n-\t  _M_fill_insert(__pos, static_cast<size_type>(__n),\n-\t\t\t static_cast<value_type>(__x));\n-\t}\n+        { _M_fill_insert(__pos, __n, __x); }\n \n       // called by the range insert to implement [23.1.1]/9\n       template<typename _InputIterator>"}, {"sha": "55f3208297d123138cc46a24e21ccff72b2fc7ed", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=25959e29ee2178e6024f02619804919c165ae0ec", "patch": "@@ -1,6 +1,6 @@\n // List implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -1098,13 +1098,13 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n       // Internal constructor functions follow.\n \n       // Called by the range constructor to implement [23.1.1]/9\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 438. Ambiguity in the \"do the right thing\" clause\n       template<typename _Integer>\n         void\n         _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)\n-        {\n-\t  _M_fill_initialize(static_cast<size_type>(__n),\n-\t\t\t     static_cast<value_type>(__x));\n-\t}\n+        { _M_fill_initialize(static_cast<size_type>(__n), __x); }\n \n       // Called by the range constructor to implement [23.1.1]/9\n       template<typename _InputIterator>\n@@ -1129,13 +1129,13 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n       // Internal assign functions follow.\n \n       // Called by the range assign to implement [23.1.1]/9\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 438. Ambiguity in the \"do the right thing\" clause\n       template<typename _Integer>\n         void\n         _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)\n-        {\n-\t  _M_fill_assign(static_cast<size_type>(__n),\n-\t\t\t static_cast<value_type>(__val));\n-\t}\n+        { _M_fill_assign(__n, __val); }\n \n       // Called by the range assign to implement [23.1.1]/9\n       template<typename _InputIterator>"}, {"sha": "93843f0a77e02c77e73fb9bc3dacd08758fb24c1", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=25959e29ee2178e6024f02619804919c165ae0ec", "patch": "@@ -1,6 +1,6 @@\n // Vector implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -778,13 +778,19 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n       // Internal constructor functions follow.\n \n       // Called by the range constructor to implement [23.1.1]/9\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 438. Ambiguity in the \"do the right thing\" clause\n       template<typename _Integer>\n         void\n         _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)\n         {\n-\t  this->_M_impl._M_start = _M_allocate(__n);\n-\t  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;\n-\t  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,\n+\t  this->_M_impl._M_start = _M_allocate(static_cast<size_type>(__n));\n+\t  this->_M_impl._M_end_of_storage =\n+\t    this->_M_impl._M_start + static_cast<size_type>(__n);\n+\t  std::__uninitialized_fill_n_a(this->_M_impl._M_start,\n+\t\t\t\t\tstatic_cast<size_type>(__n),\n+\t\t\t\t\t__value,\n \t\t\t\t\t_M_get_Tp_allocator());\n \t  this->_M_impl._M_finish = this->_M_impl._M_end_of_storage;\n \t}\n@@ -830,13 +836,13 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n       // assignment work for the range versions.\n \n       // Called by the range assign to implement [23.1.1]/9\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 438. Ambiguity in the \"do the right thing\" clause\n       template<typename _Integer>\n         void\n         _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)\n-        {\n-\t  _M_fill_assign(static_cast<size_type>(__n),\n-\t\t\t static_cast<value_type>(__val));\n-\t}\n+        { _M_fill_assign(__n, __val); }\n \n       // Called by the range assign to implement [23.1.1]/9\n       template<typename _InputIterator>\n@@ -870,14 +876,14 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n       // Internal insert functions follow.\n \n       // Called by the range insert to implement [23.1.1]/9\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 438. Ambiguity in the \"do the right thing\" clause\n       template<typename _Integer>\n         void\n         _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,\n \t\t\t   __true_type)\n-        {\n-\t  _M_fill_insert(__pos, static_cast<size_type>(__n),\n-\t\t\t static_cast<value_type>(__val));\n-\t}\n+        { _M_fill_insert(__pos, __n, __val); }\n \n       // Called by the range insert to implement [23.1.1]/9\n       template<typename _InputIterator>"}, {"sha": "7c0934a3084951703ca834ccb5c08c9c29fe6a55", "filename": "libstdc++-v3/include/ext/rc_string_base.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h?ref=25959e29ee2178e6024f02619804919c165ae0ec", "patch": "@@ -231,12 +231,13 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n           return _S_construct(__beg, __end, __a, _Tag());\n \t}\n \n-      template<typename _InIterator>\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 438. Ambiguity in the \"do the right thing\" clause\n+      template<typename _Integer>\n         static _CharT*\n-        _S_construct_aux(_InIterator __beg, _InIterator __end,\n+        _S_construct_aux(_Integer __beg, _Integer __end,\n \t\t\t const _Alloc& __a, std::__true_type)\n-\t{ return _S_construct(static_cast<size_type>(__beg),\n-\t\t\t      static_cast<value_type>(__end), __a); }\n+\t{ return _S_construct(static_cast<size_type>(__beg), __end, __a); }\n \n       template<typename _InIterator>\n         static _CharT*"}, {"sha": "3b87879c4ca22a51ca931fc7cef7b43bb567ca03", "filename": "libstdc++-v3/include/ext/sso_string_base.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h?ref=25959e29ee2178e6024f02619804919c165ae0ec", "patch": "@@ -106,12 +106,12 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n           _M_construct(__beg, __end, _Tag());\n \t}\n \n-      template<typename _InIterator>\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 438. Ambiguity in the \"do the right thing\" clause\n+      template<typename _Integer>\n         void\n-        _M_construct_aux(_InIterator __beg, _InIterator __end, \n-\t\t\t std::__true_type)\n-\t{ _M_construct(static_cast<size_type>(__beg),\n-\t\t       static_cast<value_type>(__end)); }\n+        _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)\n+\t{ _M_construct(static_cast<size_type>(__beg), __end); }\n \n       template<typename _InIterator>\n         void"}, {"sha": "2f16545f4c6b2f9c77d7d90fd35eed791df04669", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/requirements/dr438/constructor.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fdr438%2Fconstructor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fdr438%2Fconstructor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fdr438%2Fconstructor.cc?ref=25959e29ee2178e6024f02619804919c165ae0ec", "patch": "@@ -0,0 +1,28 @@\n+// 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+\n+#include <string>\n+\n+void f()\n+{\n+  std::string s(10, 1);\n+}"}, {"sha": "0c47da040331d6132d13df3c835f7c0fcdeef584", "filename": "libstdc++-v3/testsuite/23_containers/requirements/sequences/dr438/deque/assign_neg.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fdeque%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fdeque%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fdeque%2Fassign_neg.cc?ref=25959e29ee2178e6024f02619804919c165ae0ec", "patch": "@@ -0,0 +1,36 @@\n+// 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1297 }\n+// { dg-excess-errors \"\" }\n+\n+#include <deque>\n+\n+struct A\n+{\n+  explicit A(int) { }\n+};\n+\n+void f()\n+{\n+  std::deque<A> d;\n+  d.assign(10, 1);\n+}"}, {"sha": "f378b0b1178b0a6b2d63fe7092ffb8b5f0076463", "filename": "libstdc++-v3/testsuite/23_containers/requirements/sequences/dr438/deque/constructor.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fdeque%2Fconstructor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fdeque%2Fconstructor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fdeque%2Fconstructor.cc?ref=25959e29ee2178e6024f02619804919c165ae0ec", "patch": "@@ -0,0 +1,28 @@\n+// 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+\n+#include <deque>\n+\n+void f()\n+{\n+  std::deque<int> v(10, 1);\n+}"}, {"sha": "fc0beffae3ee7f8aeb88bd84d40746936e948fda", "filename": "libstdc++-v3/testsuite/23_containers/requirements/sequences/dr438/deque/constructor_1_neg.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fdeque%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fdeque%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fdeque%2Fconstructor_1_neg.cc?ref=25959e29ee2178e6024f02619804919c165ae0ec", "patch": "@@ -0,0 +1,30 @@\n+// 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1232 }\n+// { dg-excess-errors \"\" }\n+\n+#include <deque>\n+\n+void f()\n+{\n+  std::deque<std::deque<int> > d(10, 1);\n+}"}, {"sha": "403f6473f6b22ec094ff46c57948f2cf491eb8fb", "filename": "libstdc++-v3/testsuite/23_containers/requirements/sequences/dr438/deque/constructor_2_neg.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fdeque%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fdeque%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fdeque%2Fconstructor_2_neg.cc?ref=25959e29ee2178e6024f02619804919c165ae0ec", "patch": "@@ -0,0 +1,31 @@\n+// 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1232 }\n+// { dg-excess-errors \"\" }\n+\n+#include <deque>\n+#include <utility>\n+\n+void f()\n+{\n+  std::deque<std::deque<std::pair<char, char> > > d('a', 'b');\n+}"}, {"sha": "2e2abc56c4b62c221c7192766a7c80420fa68bef", "filename": "libstdc++-v3/testsuite/23_containers/requirements/sequences/dr438/deque/insert_neg.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fdeque%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fdeque%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fdeque%2Finsert_neg.cc?ref=25959e29ee2178e6024f02619804919c165ae0ec", "patch": "@@ -0,0 +1,37 @@\n+// 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1377 }\n+// { dg-excess-errors \"\" }\n+\n+#include <deque>\n+\n+struct A\n+{\n+  explicit A(int) { }\n+};\n+\n+void f()\n+{\n+  std::deque<A> d;\n+  d.insert(d.begin(), 10, 1);\n+}\n+"}, {"sha": "4ad1127b9e57a66b1603856c49938ba6d9083754", "filename": "libstdc++-v3/testsuite/23_containers/requirements/sequences/dr438/list/assign_neg.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Flist%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Flist%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Flist%2Fassign_neg.cc?ref=25959e29ee2178e6024f02619804919c165ae0ec", "patch": "@@ -0,0 +1,36 @@\n+// 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1138 }\n+// { dg-excess-errors \"\" }\n+\n+#include <list>\n+\n+struct A\n+{\n+  explicit A(int) { }\n+};\n+\n+void f()\n+{\n+  std::list<A> l;\n+  l.assign(10, 1);\n+}"}, {"sha": "c20ac14e20268732c76f179d8b705d332177aeeb", "filename": "libstdc++-v3/testsuite/23_containers/requirements/sequences/dr438/list/constructor.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Flist%2Fconstructor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Flist%2Fconstructor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Flist%2Fconstructor.cc?ref=25959e29ee2178e6024f02619804919c165ae0ec", "patch": "@@ -0,0 +1,28 @@\n+// 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+\n+#include <list>\n+\n+void f()\n+{\n+  std::list<int> l(10, 1);\n+}"}, {"sha": "5df6fc8532c9a530dd0b2e16a53750811cc6eb5a", "filename": "libstdc++-v3/testsuite/23_containers/requirements/sequences/dr438/list/constructor_1_neg.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Flist%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Flist%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Flist%2Fconstructor_1_neg.cc?ref=25959e29ee2178e6024f02619804919c165ae0ec", "patch": "@@ -0,0 +1,30 @@\n+// 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1107 }\n+// { dg-excess-errors \"\" }\n+\n+#include <list>\n+\n+void f()\n+{\n+  std::list<std::list<int> > l(10, 1);\n+}"}, {"sha": "6783727be7a403ad1507721789919c343b5ff4bd", "filename": "libstdc++-v3/testsuite/23_containers/requirements/sequences/dr438/list/constructor_2_neg.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Flist%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Flist%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Flist%2Fconstructor_2_neg.cc?ref=25959e29ee2178e6024f02619804919c165ae0ec", "patch": "@@ -0,0 +1,31 @@\n+// 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1107 }\n+// { dg-excess-errors \"\" }\n+\n+#include <list>\n+#include <utility>\n+\n+void f()\n+{\n+  std::list<std::list<std::pair<char, char> > > l('a', 'b');\n+}"}, {"sha": "c8f2026052e761ba23c4d87a461bed19bfce0009", "filename": "libstdc++-v3/testsuite/23_containers/requirements/sequences/dr438/list/insert_neg.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Flist%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Flist%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Flist%2Finsert_neg.cc?ref=25959e29ee2178e6024f02619804919c165ae0ec", "patch": "@@ -0,0 +1,36 @@\n+// 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1107 }\n+// { dg-excess-errors \"\" }\n+\n+#include <list>\n+\n+struct A\n+{\n+  explicit A(int) { }\n+};\n+\n+void f()\n+{\n+  std::list<A> l;\n+  l.insert(l.begin(), 10, 1);\n+}"}, {"sha": "873c27f86ed473cfbb7ca33fb93b37c810c6ef1e", "filename": "libstdc++-v3/testsuite/23_containers/requirements/sequences/dr438/vector/assign_neg.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fvector%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fvector%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fvector%2Fassign_neg.cc?ref=25959e29ee2178e6024f02619804919c165ae0ec", "patch": "@@ -0,0 +1,36 @@\n+// 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 845 }\n+// { dg-excess-errors \"\" }\n+\n+#include <vector>\n+\n+struct A\n+{\n+  explicit A(int) { }\n+};\n+\n+void f()\n+{\n+  std::vector<A> v;\n+  v.assign(10, 1);\n+}"}, {"sha": "15b4a77a10b9b402da45579e68c466782d00407e", "filename": "libstdc++-v3/testsuite/23_containers/requirements/sequences/dr438/vector/bool/constructor.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fvector%2Fbool%2Fconstructor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fvector%2Fbool%2Fconstructor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fvector%2Fbool%2Fconstructor.cc?ref=25959e29ee2178e6024f02619804919c165ae0ec", "patch": "@@ -0,0 +1,28 @@\n+// 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+\n+#include <vector>\n+\n+void f()\n+{\n+  std::vector<bool> vb(10, 1);\n+}"}, {"sha": "74968bd4b6452af0a7c1d39250b4c481bbacc9d4", "filename": "libstdc++-v3/testsuite/23_containers/requirements/sequences/dr438/vector/constructor.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fvector%2Fconstructor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fvector%2Fconstructor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fvector%2Fconstructor.cc?ref=25959e29ee2178e6024f02619804919c165ae0ec", "patch": "@@ -0,0 +1,28 @@\n+// 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+\n+#include <vector>\n+\n+void f()\n+{\n+  std::vector<int> v(10, 1);\n+}"}, {"sha": "c66faaec941d0a6f3a65e344e5e26cdc6a28918a", "filename": "libstdc++-v3/testsuite/23_containers/requirements/sequences/dr438/vector/constructor_1_neg.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fvector%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fvector%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fvector%2Fconstructor_1_neg.cc?ref=25959e29ee2178e6024f02619804919c165ae0ec", "patch": "@@ -0,0 +1,30 @@\n+// 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+// { dg-error \"no match\" \"\" { target *-*-* } 706 }\n+// { dg-excess-errors \"\" }\n+\n+#include <vector>\n+\n+void f()\n+{\n+  std::vector<std::vector<int> > v(10, 1);\n+}"}, {"sha": "8e0130bc9cfbadb67ab76008a7e87b392a30c64c", "filename": "libstdc++-v3/testsuite/23_containers/requirements/sequences/dr438/vector/constructor_2_neg.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fvector%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fvector%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fvector%2Fconstructor_2_neg.cc?ref=25959e29ee2178e6024f02619804919c165ae0ec", "patch": "@@ -0,0 +1,31 @@\n+// 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+// { dg-error \"no match\" \"\" { target *-*-* } 706 }\n+// { dg-excess-errors \"\" }\n+\n+#include <vector>\n+#include <utility>\n+\n+void f()\n+{\n+  std::vector<std::vector<std::pair<char, char> > > v('a', 'b');\n+}"}, {"sha": "c82a5c4602d8498cfebdce91ea186de4bc6c27ae", "filename": "libstdc++-v3/testsuite/23_containers/requirements/sequences/dr438/vector/insert_neg.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fvector%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fvector%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fvector%2Finsert_neg.cc?ref=25959e29ee2178e6024f02619804919c165ae0ec", "patch": "@@ -0,0 +1,36 @@\n+// 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 886 }\n+// { dg-excess-errors \"\" }\n+\n+#include <vector>\n+\n+struct A\n+{\n+  explicit A(int) { }\n+};\n+\n+void f()\n+{\n+  std::vector<A> v;\n+  v.insert(v.begin(), 10, 1);\n+}"}, {"sha": "95d31db3a018a4116b45d7bf23ec4fd9cd2828bf", "filename": "libstdc++-v3/testsuite/ext/vstring/requirements/dr438/constructor.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Frequirements%2Fdr438%2Fconstructor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25959e29ee2178e6024f02619804919c165ae0ec/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Frequirements%2Fdr438%2Fconstructor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Frequirements%2Fdr438%2Fconstructor.cc?ref=25959e29ee2178e6024f02619804919c165ae0ec", "patch": "@@ -0,0 +1,32 @@\n+// 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+\n+#include <ext/vstring.h>\n+\n+void f()\n+{\n+  __gnu_cxx::__versa_string<char, std::char_traits<char>,\n+    std::allocator<char>, __gnu_cxx::__sso_string_base> vs(10, 1);\n+\n+  __gnu_cxx::__versa_string<char, std::char_traits<char>,\n+    std::allocator<char>, __gnu_cxx::__rc_string_base> vr(10, 1);  \n+}"}]}