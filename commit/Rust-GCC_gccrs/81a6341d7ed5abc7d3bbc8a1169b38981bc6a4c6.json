{"sha": "81a6341d7ed5abc7d3bbc8a1169b38981bc6a4c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFhNjM0MWQ3ZWQ1YWJjN2QzYmJjOGExMTY5YjM4OTgxYmM2YTRjNg==", "commit": {"author": {"name": "Danny Smith", "email": "dannysmith@users.sourceforge.net", "date": "2003-07-08T23:40:36Z"}, "committer": {"name": "Danny Smith", "email": "dannysmith@gcc.gnu.org", "date": "2003-07-08T23:40:36Z"}, "message": "re PR bootstrap/11455 (Bootstrap failure in Cygwin)\n\n\tPR bootstrap/11455\n\t* config/i386/winnt.c: Replace use of error(), warning() with\n\terror_with_decl(), warning_with_decl(),  throughout.\n\nFrom-SVN: r69107", "tree": {"sha": "b9373c78b6e6c9fe0a4ce5318b41433ce9935498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9373c78b6e6c9fe0a4ce5318b41433ce9935498"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81a6341d7ed5abc7d3bbc8a1169b38981bc6a4c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81a6341d7ed5abc7d3bbc8a1169b38981bc6a4c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81a6341d7ed5abc7d3bbc8a1169b38981bc6a4c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81a6341d7ed5abc7d3bbc8a1169b38981bc6a4c6/comments", "author": null, "committer": null, "parents": [{"sha": "2178981638d63acbadf6d4a19e3ecb97df8ee14f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2178981638d63acbadf6d4a19e3ecb97df8ee14f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2178981638d63acbadf6d4a19e3ecb97df8ee14f"}], "stats": {"total": 43, "additions": 20, "deletions": 23}, "files": [{"sha": "a589359b86a337cb0c100b1df2fd0c37cdf393ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a6341d7ed5abc7d3bbc8a1169b38981bc6a4c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a6341d7ed5abc7d3bbc8a1169b38981bc6a4c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=81a6341d7ed5abc7d3bbc8a1169b38981bc6a4c6", "patch": "@@ -1,3 +1,9 @@\n+2003-07-08  Danny Smith  <dannysmith@users.sourceforge.net>\n+\n+\tPR bootstrap/11455\n+\t* config/i386/winnt.c: Replace use of error(), warning() with\n+\terror_with_decl(), warning_with_decl(),  throughout.\n+\n 2003-07-08  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* opts.c (wrap_help): Use unsigned int, not size_t."}, {"sha": "2c1e47fdd567002e40d865baf0cb7cb8a36c7b7b", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 14, "deletions": 23, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a6341d7ed5abc7d3bbc8a1169b38981bc6a4c6/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a6341d7ed5abc7d3bbc8a1169b38981bc6a4c6/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=81a6341d7ed5abc7d3bbc8a1169b38981bc6a4c6", "patch": "@@ -106,17 +106,15 @@ ix86_handle_dll_attribute (pnode, name, args, flags, no_add_attrs)\n       if (TREE_CODE (node) == FUNCTION_DECL  && DECL_INITIAL (node)\n           && !DECL_INLINE (node))\n \t{\n-\t  error (\"%Hfunction `%D' definition is marked dllimport.\",\n-\t\t &DECL_SOURCE_LOCATION (node), node);\n+\t  error_with_decl (node, \"function `%s' definition is marked dllimport.\");\n \t  *no_add_attrs = true;\n \t}\n \n       else if (TREE_CODE (node) == VAR_DECL)\n \t{\n \t  if (DECL_INITIAL (node))\n \t    {\n-\t      error (\"%Hvariable `%D' definition is marked dllimport.\",\n-\t\t     &DECL_SOURCE_LOCATION (node), node);\n+\t      error_with_decl (node,\"variable `%s' definition is marked dllimport.\");\n \t      *no_add_attrs = true;\n \t    }\n \n@@ -135,8 +133,8 @@ ix86_handle_dll_attribute (pnode, name, args, flags, no_add_attrs)\n       && (TREE_CODE (node) == VAR_DECL\n \t  || TREE_CODE (node) == FUNCTION_DECL)) \n     {\n-      error (\"%Hexternal linkage required for symbol '%D' because of '%s' attribute.\",\n-\t       &DECL_SOURCE_LOCATION (node), node, IDENTIFIER_POINTER (name));\n+      error_with_decl (node, \"external linkage required for symbol '%s' because of '%s' attribute.\",\n+\t\t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n \n@@ -254,8 +252,7 @@ i386_pe_dllimport_p (decl)\n \t{\n \t   /* Don't warn about artificial methods.  */\n \t  if (!DECL_ARTIFICIAL (decl))\n-\t    warning (\"%H function '%D' is defined after prior declaration as dllimport: attribute ignored\",\n-\t\t     &DECL_SOURCE_LOCATION (decl), decl);\n+\t    warning_with_decl (decl,\"function '%s' is defined after prior declaration as dllimport: attribute ignored.\");\n \t  return 0;\n \t}\n \n@@ -265,8 +262,7 @@ i386_pe_dllimport_p (decl)\n       else if (TREE_CODE (decl) == FUNCTION_DECL && DECL_INLINE (decl))\n         {\n \t  if (extra_warnings)\n-\t    warning (\"%Hinline function '%D' is declared as dllimport: attribute ignored.\", \n-\t\t     &DECL_SOURCE_LOCATION (decl), decl);\n+\t    warning_with_decl (decl, \"inline function '%s' is declared as dllimport: attribute ignored.\");\n \t  return 0;\n \t}\n \n@@ -277,17 +273,16 @@ i386_pe_dllimport_p (decl)\n \t       && !DECL_EXTERNAL (decl) && context_imp)\n \t{\n \t  if (!DECL_VIRTUAL_P (decl))\n-\t      error (\"%Hdefinition of static data member '%D' of dllimport'd class.\", \n-\t\t     &DECL_SOURCE_LOCATION (decl), decl);\n+\t      error_with_decl (decl, \"definition of static data member '%s' of dllimport'd class.\");\n            return 0;\n \t}\n \n       /* Since we can't treat a pointer to a dllimport'd symbol as a\n \t constant address, we turn off the attribute on C++ virtual\n-\t methods to allow creation of vtables using thunks. */\n+\t methods to allow creation of vtables using thunks.  */\n       else if (TREE_CODE (TREE_TYPE (decl)) == METHOD_TYPE\n \t       && (DECL_VIRTUAL_P (decl)))\n-           return 0;\n+\treturn 0;\n \n       return 1;\n     }\n@@ -337,8 +332,7 @@ i386_pe_mark_dllexport (decl)\n     abort ();\n   if (i386_pe_dllimport_name_p (oldname))\n     {\n-      warning (\"%Hinconsistent dll linkage for '%D, dllexport assumed.\",\n-\t       &DECL_SOURCE_LOCATION (decl), decl);\n+      warning_with_decl (decl,\"inconsistent dll linkage for '%s': dllexport assumed.\");\n      /* Remove DLL_IMPORT_PREFIX.  */\n       oldname += strlen (DLL_IMPORT_PREFIX);\n       DECL_NON_ADDR_CONST_P (decl) = 0;\n@@ -389,8 +383,7 @@ i386_pe_mark_dllimport (decl)\n       /* Already done, but do a sanity check to prevent assembler errors. */\n       if (!DECL_EXTERNAL (decl) || !TREE_PUBLIC (decl))\n \t{\n-\t  error (\"%Hfailure in redeclaration of '%D': dllimport'd symbol lacks external linkage.\", \n-\t\t &DECL_SOURCE_LOCATION (decl), decl);\n+\t  error_with_decl (decl, \"failure in redeclaration of '%s': dllimport'd symbol lacks external linkage.\");\n \t  abort();\n \t}\n       return;\n@@ -536,11 +529,9 @@ i386_pe_encode_section_info (decl, rtl, first)\n       tree idp = get_identifier (oldname + strlen (DLL_IMPORT_PREFIX));\n       rtx newrtl = gen_rtx (SYMBOL_REF, Pmode, IDENTIFIER_POINTER (idp));\n \n-      warning (\"%H%s '%D' %s after being referenced with dllimport linkage.\",\n-\t         &DECL_SOURCE_LOCATION (decl),\n-\t         TREE_CODE (decl) == VAR_DECL ? \"variable\" : \"function\", \n-\t         decl, (DECL_INITIAL (decl) || !DECL_EXTERNAL (decl))\n-\t\t\t? \"defined locally\" : \"redeclared without dllimport attribute\");\n+      warning_with_decl (decl, \"'%s' %s after being referenced with dllimport linkage.\",\n+\t         \t (DECL_INITIAL (decl) || !DECL_EXTERNAL (decl))\n+\t\t\t ? \"defined locally\" : \"redeclared without dllimport attribute\");\n \n       XEXP (DECL_RTL (decl), 0) = newrtl;\n "}]}