{"sha": "54a8e4f651688acae9758bf1c33bc3e32be86a1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRhOGU0ZjY1MTY4OGFjYWU5NzU4YmYxYzMzYmMzZTMyYmU4NmExYg==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2015-08-13T11:30:53Z"}, "committer": {"name": "Matthew Wahab", "email": "mwahab@gcc.gnu.org", "date": "2015-08-13T11:30:53Z"}, "message": "atomic-inst-cas.c: New.\n\n\t* gcc.target/aarch64/atomic-inst-cas.c: New.\n\t* gcc.target/aarch64/atomic-inst-ops.inc: New.\n\nFrom-SVN: r226859", "tree": {"sha": "de0d727ebc912267e8b0581e58195ad417e28a30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de0d727ebc912267e8b0581e58195ad417e28a30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54a8e4f651688acae9758bf1c33bc3e32be86a1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54a8e4f651688acae9758bf1c33bc3e32be86a1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54a8e4f651688acae9758bf1c33bc3e32be86a1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54a8e4f651688acae9758bf1c33bc3e32be86a1b/comments", "author": null, "committer": null, "parents": [{"sha": "b0770c0f18133105bddbc841f435a7cb5ccf9747", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0770c0f18133105bddbc841f435a7cb5ccf9747", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0770c0f18133105bddbc841f435a7cb5ccf9747"}], "stats": {"total": 119, "additions": 119, "deletions": 0}, "files": [{"sha": "8c19d68a844994a7e125154a07fac151591e6372", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54a8e4f651688acae9758bf1c33bc3e32be86a1b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54a8e4f651688acae9758bf1c33bc3e32be86a1b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=54a8e4f651688acae9758bf1c33bc3e32be86a1b", "patch": "@@ -1,3 +1,8 @@\n+2015-08-13  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* gcc.target/aarch64/atomic-inst-cas.c: New.\n+\t* gcc.target/aarch64/atomic-inst-ops.inc: New.\n+\n 2015-08-13  Andreas Schwab  <schwab@suse.de>\n \n \t* gcc.dg/tree-ssa/vrp33.c: Add -fno-tree-fre."}, {"sha": "f6f2892231966037b58289fd06411ec8af7373fb", "filename": "gcc/testsuite/gcc.target/aarch64/atomic-inst-cas.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54a8e4f651688acae9758bf1c33bc3e32be86a1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-inst-cas.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54a8e4f651688acae9758bf1c33bc3e32be86a1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-inst-cas.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-inst-cas.c?ref=54a8e4f651688acae9758bf1c33bc3e32be86a1b", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=armv8-a+lse\" } */\n+\n+/* Test ARMv8.1-A CAS instruction.  */\n+\n+#include \"atomic-inst-ops.inc\"\n+\n+#define TEST TEST_TWO\n+\n+#define CAS_ATOMIC(FN, TY, MODEL1, MODEL2)\t\t\t\t\\\n+  int FNNAME (FN, TY) (TY* val, TY* foo, TY* bar)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    int model_s = MODEL1;\t\t\t\t\t\t\\\n+    int model_f = MODEL2;\t\t\t\t\t\t\\\n+    /* The success memory ordering must be at least as strong as\t\\\n+       the failure memory ordering.  */\t\t\t\t\t\\\n+    if (model_s < model_f)\t\t\t\t\t\t\\\n+      return 0;\t\t\t\t\t\t\t\t\\\n+    /* Ignore invalid memory orderings.  */\t\t\t\t\\\n+    if (model_f == __ATOMIC_RELEASE || model_f == __ATOMIC_ACQ_REL)\t\\\n+      return 0;\t\t\t\t\t\t\t\t\\\n+    return __atomic_compare_exchange_n (val, foo, bar, 0, model_s, model_f); \\\n+  }\n+\n+#define CAS_ATOMIC_NORETURN(FN, TY, MODEL1, MODEL2)\t\t\t\\\n+  void FNNAME (FN, TY) (TY* val, TY* foo, TY* bar)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    int model_s = MODEL1;\t\t\t\t\t\t\\\n+    int model_f = MODEL2;\t\t\t\t\t\t\\\n+    /* The success memory ordering must be at least as strong as\t\\\n+       the failure memory ordering.  */\t\t\t\t\t\\\n+    if (model_s < model_f)\t\t\t\t\t\t\\\n+      return;\t\t\t\t\t\t\t\t\\\n+    /* Ignore invalid memory orderings.  */\t\t\t\t\\\n+    if (model_f == __ATOMIC_RELEASE || model_f == __ATOMIC_ACQ_REL)\t\\\n+      return;\t\t\t\t\t\t\t\t\\\n+    __atomic_compare_exchange_n (val, foo, bar, 0, model_s, model_f);\t\\\n+  }\n+\n+TEST (cas_atomic, CAS_ATOMIC)\n+TEST (cas_atomic_noreturn, CAS_ATOMIC_NORETURN)\n+\n+\n+/* { dg-final { scan-assembler-times \"casb\\t\" 4} } */\n+/* { dg-final { scan-assembler-times \"casab\\t\" 20} } */\n+/* { dg-final { scan-assembler-times \"caslb\\t\" 4} } */\n+/* { dg-final { scan-assembler-times \"casalb\\t\" 36} } */\n+\n+/* { dg-final { scan-assembler-times \"cash\\t\" 4} } */\n+/* { dg-final { scan-assembler-times \"casah\\t\" 20} } */\n+/* { dg-final { scan-assembler-times \"caslh\\t\" 4} } */\n+/* { dg-final { scan-assembler-times \"casalh\\t\" 36} } */\n+\n+/* { dg-final { scan-assembler-times \"cas\\t\" 8} } */\n+/* { dg-final { scan-assembler-times \"casa\\t\" 40} } */\n+/* { dg-final { scan-assembler-times \"casl\\t\" 8} } */\n+/* { dg-final { scan-assembler-times \"casal\\t\" 72} } */\n+\n+/* { dg-final { scan-assembler-not \"ldaxr\\t\" } } */\n+/* { dg-final { scan-assembler-not \"stlxr\\t\" } } */\n+/* { dg-final { scan-assembler-not \"dmb\" } } */"}, {"sha": "72c7e5c3f0c5bfe03d1c28bba1371d98661abb33", "filename": "gcc/testsuite/gcc.target/aarch64/atomic-inst-ops.inc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54a8e4f651688acae9758bf1c33bc3e32be86a1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-inst-ops.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54a8e4f651688acae9758bf1c33bc3e32be86a1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-inst-ops.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-inst-ops.inc?ref=54a8e4f651688acae9758bf1c33bc3e32be86a1b", "patch": "@@ -0,0 +1,53 @@\n+/* Support code for atomic instruction tests.  */\n+\n+/* Define types names without spaces.  */\n+typedef unsigned char uchar;\n+typedef unsigned short ushort;\n+typedef unsigned int uint;\n+typedef long long longlong;\n+typedef unsigned long long ulonglong;\n+typedef __int128_t int128;\n+typedef __uint128_t uint128;\n+\n+#define FNNAME(NAME,TY) NAME\n+\n+/* Expand one-model functions.  */\n+#define TEST_M1(NAME, FN, TY, MODEL, DUMMY)\t\\\n+  FN (test_##NAME##_##TY, TY, MODEL)\n+\n+/* Expand two-model functions.  */\n+#define TEST_M2(NAME, FN, TY, MODEL1, MODEL2)\t\\\n+  FN (test_##NAME##_##TY, TY, MODEL1, MODEL2)\n+\n+/* Typest to test.  */\n+#define TEST_TY(NAME, FN, N, MODEL1, MODEL2)\t\t\\\n+  TEST_M##N (NAME, FN, char, MODEL1, MODEL2)\t\t\\\n+  TEST_M##N (NAME, FN, uchar, MODEL1, MODEL2)\t\t\\\n+  TEST_M##N (NAME, FN, short, MODEL1, MODEL2)\t\t\\\n+  TEST_M##N (NAME, FN, ushort, MODEL1, MODEL2)\t\t\\\n+  TEST_M##N (NAME, FN, int, MODEL1, MODEL2)\t\t\\\n+  TEST_M##N (NAME, FN, uint, MODEL1, MODEL2)\t\t\\\n+  TEST_M##N (NAME, FN, longlong, MODEL1, MODEL2)\t\\\n+  TEST_M##N (NAME, FN, ulonglong, MODEL1, MODEL2)\t\\\n+  TEST_M##N (NAME, FN, int128, MODEL1, MODEL2)\t\t\\\n+  TEST_M##N (NAME, FN, uint128, MODEL1, MODEL2)\n+\n+/* Cross-product of models to test.  */\n+#define TEST_MODEL_M1(NAME, FN, N, M)\t\t\t\\\n+  TEST_TY (NAME##_relaxed, FN, N, M, __ATOMIC_RELAXED)\t\\\n+  TEST_TY (NAME##_consume, FN, N, M, __ATOMIC_CONSUME)\t\\\n+  TEST_TY (NAME##_acquire, FN, N, M, __ATOMIC_ACQUIRE)\t\\\n+  TEST_TY (NAME##_release, FN, N, M, __ATOMIC_RELEASE)\t\\\n+  TEST_TY (NAME##_acq_rel, FN, N, M, __ATOMIC_ACQ_REL)\t\\\n+  TEST_TY (NAME##_seq_cst, FN, N, M, __ATOMIC_SEQ_CST)\t\\\n+\n+#define TEST_MODEL_M2(NAME, FN)\t\t\t\t\t\\\n+  TEST_MODEL_M1 (NAME##_relaxed, FN, 2, __ATOMIC_RELAXED)\t\\\n+  TEST_MODEL_M1 (NAME##_consume, FN, 2, __ATOMIC_CONSUME)\t\\\n+  TEST_MODEL_M1 (NAME##_acquire, FN, 2, __ATOMIC_ACQUIRE)\t\\\n+  TEST_MODEL_M1 (NAME##_release, FN, 2, __ATOMIC_RELEASE)\t\\\n+  TEST_MODEL_M1 (NAME##_acq_rel, FN, 2, __ATOMIC_ACQ_REL)\t\\\n+  TEST_MODEL_M1 (NAME##_seq_cst, FN, 2, __ATOMIC_SEQ_CST)\t\\\n+\n+/* Expand functions for a cross-product of memory models and types.  */\n+#define TEST_TWO(NAME, FN) TEST_MODEL_M2 (NAME, FN)"}]}