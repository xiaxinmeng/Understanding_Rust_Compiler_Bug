{"sha": "02ef53f28854628ee15784bf860e7db24427a18f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJlZjUzZjI4ODU0NjI4ZWUxNTc4NGJmODYwZTdkYjI0NDI3YTE4Zg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-01-25T09:31:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-01-25T09:31:47Z"}, "message": "re PR lto/69393 (ICE in dwarf2out_finish, at dwarf2out.c:27175 with LTO)\n\n2016-01-25  Richard Biener  <rguenther@suse.de>\n\n\tPR lto/69393\n\t* dwarf2out.c (is_naming_typedef_decl): Not when DECL_NAMELESS.\n\t* tree-streamer-out.c (pack_ts_base_value_fields): Stream\n\tDECL_NAMELESS.\n\t* tree-streamer-in.c (unpack_ts_base_value_fields): Likewise.\n\n\t* testsuite/libgomp.c++/pr69393.C: New testcase.\n\nFrom-SVN: r232787", "tree": {"sha": "7bd5de90b4460bf0891c58937ced29e702c11e94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bd5de90b4460bf0891c58937ced29e702c11e94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02ef53f28854628ee15784bf860e7db24427a18f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02ef53f28854628ee15784bf860e7db24427a18f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02ef53f28854628ee15784bf860e7db24427a18f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02ef53f28854628ee15784bf860e7db24427a18f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fa4511c2f4d3bacf5e9d5cc5907d3812204928bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa4511c2f4d3bacf5e9d5cc5907d3812204928bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa4511c2f4d3bacf5e9d5cc5907d3812204928bb"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "8a9798d5b84eccb392d041de1c8506b1ea89ff3b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ef53f28854628ee15784bf860e7db24427a18f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ef53f28854628ee15784bf860e7db24427a18f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02ef53f28854628ee15784bf860e7db24427a18f", "patch": "@@ -1,3 +1,11 @@\n+2016-01-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR lto/69393\n+\t* dwarf2out.c (is_naming_typedef_decl): Not when DECL_NAMELESS.\n+\t* tree-streamer-out.c (pack_ts_base_value_fields): Stream\n+\tDECL_NAMELESS.\n+\t* tree-streamer-in.c (unpack_ts_base_value_fields): Likewise.\n+\n 2016-01-25  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/69376"}, {"sha": "d8ca1b7e6bafb913b9fd07b0883f6cf31970863b", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ef53f28854628ee15784bf860e7db24427a18f/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ef53f28854628ee15784bf860e7db24427a18f/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=02ef53f28854628ee15784bf860e7db24427a18f", "patch": "@@ -23094,6 +23094,7 @@ is_naming_typedef_decl (const_tree decl)\n {\n   if (decl == NULL_TREE\n       || TREE_CODE (decl) != TYPE_DECL\n+      || DECL_NAMELESS (decl)\n       || !is_tagged_type (TREE_TYPE (decl))\n       || DECL_IS_BUILTIN (decl)\n       || is_redundant_typedef (decl)"}, {"sha": "3c8558e67ae03a92bf881aa8aea71db211b3bb8b", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ef53f28854628ee15784bf860e7db24427a18f/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ef53f28854628ee15784bf860e7db24427a18f/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=02ef53f28854628ee15784bf860e7db24427a18f", "patch": "@@ -116,7 +116,10 @@ unpack_ts_base_value_fields (struct bitpack_d *bp, tree expr)\n   TREE_ADDRESSABLE (expr) = (unsigned) bp_unpack_value (bp, 1);\n   TREE_THIS_VOLATILE (expr) = (unsigned) bp_unpack_value (bp, 1);\n   if (DECL_P (expr))\n-    DECL_UNSIGNED (expr) = (unsigned) bp_unpack_value (bp, 1);\n+    {\n+      DECL_UNSIGNED (expr) = (unsigned) bp_unpack_value (bp, 1);\n+      DECL_NAMELESS (expr) = (unsigned) bp_unpack_value (bp, 1);\n+    }\n   else if (TYPE_P (expr))\n     TYPE_UNSIGNED (expr) = (unsigned) bp_unpack_value (bp, 1);\n   else"}, {"sha": "42281a5844f21b7292dfb8b377d83dd6735620f2", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ef53f28854628ee15784bf860e7db24427a18f/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ef53f28854628ee15784bf860e7db24427a18f/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=02ef53f28854628ee15784bf860e7db24427a18f", "patch": "@@ -87,7 +87,10 @@ pack_ts_base_value_fields (struct bitpack_d *bp, tree expr)\n   bp_pack_value (bp, TREE_ADDRESSABLE (expr), 1);\n   bp_pack_value (bp, TREE_THIS_VOLATILE (expr), 1);\n   if (DECL_P (expr))\n-    bp_pack_value (bp, DECL_UNSIGNED (expr), 1);\n+    {\n+      bp_pack_value (bp, DECL_UNSIGNED (expr), 1);\n+      bp_pack_value (bp, DECL_NAMELESS (expr), 1);\n+    }\n   else if (TYPE_P (expr))\n     bp_pack_value (bp, TYPE_UNSIGNED (expr), 1);\n   else"}, {"sha": "818d9942e4bdee803e6b0a5065e0375f7bac9c55", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ef53f28854628ee15784bf860e7db24427a18f/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ef53f28854628ee15784bf860e7db24427a18f/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=02ef53f28854628ee15784bf860e7db24427a18f", "patch": "@@ -1,3 +1,8 @@\n+2016-01-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR lto/69393\n+\t* testsuite/libgomp.c++/pr69393.C: New testcase.\n+\n 2016-01-22  Ilya Verbin  <ilya.verbin@intel.com>\n \n \t* target.c (gomp_get_target_fn_addr): Allow host fallback if target"}, {"sha": "e3f0de19e3e7c9c18379a2ab15d478f5be835f4f", "filename": "libgomp/testsuite/libgomp.c++/pr69393.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ef53f28854628ee15784bf860e7db24427a18f/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr69393.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ef53f28854628ee15784bf860e7db24427a18f/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr69393.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr69393.C?ref=02ef53f28854628ee15784bf860e7db24427a18f", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do run }\n+// { dg-require-effective-target lto }\n+// { dg-options \"-flto -g -fopenmp\" }\n+\n+int e = 5;\n+\n+int\n+main ()\n+{\n+  int a[e];\n+  a[0] = 6;\n+#pragma omp parallel\n+  if (a[0] != 6)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}