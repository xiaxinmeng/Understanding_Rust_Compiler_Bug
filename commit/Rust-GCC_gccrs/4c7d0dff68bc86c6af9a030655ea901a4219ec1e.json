{"sha": "4c7d0dff68bc86c6af9a030655ea901a4219ec1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM3ZDBkZmY2OGJjODZjNmFmOWEwMzA2NTVlYTkwMWE0MjE5ZWMxZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-05-11T11:46:11Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-05-11T11:46:11Z"}, "message": "update documentation\n\nFrom-SVN: r19671", "tree": {"sha": "edd396559ec084940ba8fda1df53abb809c78b7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edd396559ec084940ba8fda1df53abb809c78b7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c7d0dff68bc86c6af9a030655ea901a4219ec1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c7d0dff68bc86c6af9a030655ea901a4219ec1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c7d0dff68bc86c6af9a030655ea901a4219ec1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c7d0dff68bc86c6af9a030655ea901a4219ec1e/comments", "author": null, "committer": null, "parents": [{"sha": "08362e16df6d5a2e4d54f91730acbc5aaa7e4137", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08362e16df6d5a2e4d54f91730acbc5aaa7e4137", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08362e16df6d5a2e4d54f91730acbc5aaa7e4137"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "d6764b00a15690a0eddf52f538ac709aa3effa5a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c7d0dff68bc86c6af9a030655ea901a4219ec1e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c7d0dff68bc86c6af9a030655ea901a4219ec1e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4c7d0dff68bc86c6af9a030655ea901a4219ec1e", "patch": "@@ -5708,11 +5708,10 @@ type_unification (tparms, targs, parms, args, targs_in,\n \n /* Adjust types before performing type deduction, as described in\n    [temp.deduct.call] and [temp.deduct.conv].  The rules in these two\n-   sections are symmetric.  For calls, the value passed as PARM should\n-   be a parameter to the template function, while ARG should be the\n-   actual argument used in the call.  For conversions, PARM should be\n-   the type required as the result of the conversion, while ARG should\n-   be the return type of the template conversion function.  */\n+   sections are symmetric.  PARM is the type of a function parameter\n+   or the return type of the conversion function.  ARG is the type of\n+   the argument passed to the call, or the type of the value\n+   intialized with the result of the conversion function.  */\n \n void\n maybe_adjust_types_for_deduction (strict, parm, arg)\n@@ -5727,8 +5726,9 @@ maybe_adjust_types_for_deduction (strict, parm, arg)\n \n     case DEDUCE_CONV:\n       {\n-\t/* Swap PARM and ARG; the handling is precisely symmetric since\n-\t   PARM will initialize ARG rather than vice versa.  */\n+\t/* Swap PARM and ARG throughout the remainder of this\n+\t   function; the handling is precisely symmetric since PARM\n+\t   will initialize ARG rather than vice versa.  */\n \ttree* temp = parm;\n \tparm = arg;\n \targ = temp;"}]}