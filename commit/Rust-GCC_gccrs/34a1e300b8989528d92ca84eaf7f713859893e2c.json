{"sha": "34a1e300b8989528d92ca84eaf7f713859893e2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRhMWUzMDBiODk4OTUyOGQ5MmNhODRlYWY3ZjcxMzg1OTg5M2UyYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-08-28T06:24:44Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-08-28T06:24:44Z"}, "message": "sel-sched.c: Include rtl-iter.h\n\ngcc/\n\t* sel-sched.c: Include rtl-iter.h\n\t(count_occurrences_1): Delete.\n\t(count_occurrences_equiv): Turn rtxes into const_rtxes.\n\tUse FOR_EACH_SUBRTX rather than for_each_rtx.\n\nFrom-SVN: r214659", "tree": {"sha": "954bc77c588efeaebf2c927f96aa9af0ebbda678", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/954bc77c588efeaebf2c927f96aa9af0ebbda678"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34a1e300b8989528d92ca84eaf7f713859893e2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a1e300b8989528d92ca84eaf7f713859893e2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34a1e300b8989528d92ca84eaf7f713859893e2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a1e300b8989528d92ca84eaf7f713859893e2c/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6180e3d8705e54db209efe706a778e79965be34c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6180e3d8705e54db209efe706a778e79965be34c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6180e3d8705e54db209efe706a778e79965be34c"}], "stats": {"total": 81, "additions": 33, "deletions": 48}, "files": [{"sha": "95c7fb890a5ec7a2ccd1e33af3e68e3d73c06fbf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a1e300b8989528d92ca84eaf7f713859893e2c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a1e300b8989528d92ca84eaf7f713859893e2c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34a1e300b8989528d92ca84eaf7f713859893e2c", "patch": "@@ -1,3 +1,10 @@\n+2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* sel-sched.c: Include rtl-iter.h\n+\t(count_occurrences_1): Delete.\n+\t(count_occurrences_equiv): Turn rtxes into const_rtxes.\n+\tUse FOR_EACH_SUBRTX rather than for_each_rtx.\n+\n 2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* rtl.h (tls_referenced_p): Take a const_rtx rather than an rtx."}, {"sha": "ba8d1932e5bde93aaacdd66ef8479c4beaa5d819", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 26, "deletions": 48, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a1e300b8989528d92ca84eaf7f713859893e2c/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a1e300b8989528d92ca84eaf7f713859893e2c/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=34a1e300b8989528d92ca84eaf7f713859893e2c", "patch": "@@ -42,6 +42,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"rtlhooks-def.h\"\n #include \"emit-rtl.h\"\n #include \"ira.h\"\n+#include \"rtl-iter.h\"\n \n #ifdef INSN_SCHEDULING\n #include \"sel-sched-ir.h\"\n@@ -798,58 +799,35 @@ substitute_reg_in_expr (expr_t expr, insn_t insn, bool undo)\n     return false;\n }\n \n-/* Helper function for count_occurences_equiv.  */\n-static int\n-count_occurrences_1 (rtx *cur_rtx, void *arg)\n-{\n-  rtx_search_arg_p p = (rtx_search_arg_p) arg;\n-\n-  if (REG_P (*cur_rtx) && REGNO (*cur_rtx) == REGNO (p->x))\n-    {\n-      /* Bail out if mode is different or more than one register is used.  */\n-      if (GET_MODE (*cur_rtx) != GET_MODE (p->x)\n-          || (HARD_REGISTER_P (*cur_rtx)\n-\t      && hard_regno_nregs[REGNO (*cur_rtx)][GET_MODE (*cur_rtx)] > 1))\n-        {\n-          p->n = 0;\n-          return 1;\n-        }\n-\n-      p->n++;\n-\n-      /* Do not traverse subexprs.  */\n-      return -1;\n-    }\n-\n-  if (GET_CODE (*cur_rtx) == SUBREG\n-      && (!REG_P (SUBREG_REG (*cur_rtx))\n-\t  || REGNO (SUBREG_REG (*cur_rtx)) == REGNO (p->x)))\n-    {\n-      /* ??? Do not support substituting regs inside subregs.  In that case,\n-         simplify_subreg will be called by validate_replace_rtx, and\n-         unsubstitution will fail later.  */\n-      p->n = 0;\n-      return 1;\n-    }\n-\n-  /* Continue search.  */\n-  return 0;\n-}\n-\n /* Return the number of places WHAT appears within WHERE.\n    Bail out when we found a reference occupying several hard registers.  */\n static int\n-count_occurrences_equiv (rtx what, rtx where)\n+count_occurrences_equiv (const_rtx what, const_rtx where)\n {\n-  struct rtx_search_arg arg;\n-\n-  gcc_assert (REG_P (what));\n-  arg.x = what;\n-  arg.n = 0;\n-\n-  for_each_rtx (&where, &count_occurrences_1, (void *) &arg);\n-\n-  return arg.n;\n+  int count = 0;\n+  subrtx_iterator::array_type array;\n+  FOR_EACH_SUBRTX (iter, array, where, NONCONST)\n+    {\n+      const_rtx x = *iter;\n+      if (REG_P (x) && REGNO (x) == REGNO (what))\n+\t{\n+\t  /* Bail out if mode is different or more than one register is\n+\t     used.  */\n+\t  if (GET_MODE (x) != GET_MODE (what)\n+\t      || (HARD_REGISTER_P (x)\n+\t\t  && hard_regno_nregs[REGNO (x)][GET_MODE (x)] > 1))\n+\t    return 0;\n+\t  count += 1;\n+\t}\n+      else if (GET_CODE (x) == SUBREG\n+\t       && (!REG_P (SUBREG_REG (x))\n+\t\t   || REGNO (SUBREG_REG (x)) == REGNO (what)))\n+\t/* ??? Do not support substituting regs inside subregs.  In that case,\n+\t   simplify_subreg will be called by validate_replace_rtx, and\n+\t   unsubstitution will fail later.  */\n+\treturn 0;\n+    }\n+  return count;\n }\n \n /* Returns TRUE if WHAT is found in WHERE rtx tree.  */"}]}