{"sha": "80b4a8d94f7664f35f17d4a6281872f7a10565b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBiNGE4ZDk0Zjc2NjRmMzVmMTdkNGE2MjgxODcyZjdhMTA1NjViNw==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2006-11-17T09:34:08Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2006-11-17T09:34:08Z"}, "message": "tree-vect-transform.c (vect_create_epilog_for_reduction): Fix formating.\n\n2006-11-17  Zdenek Dvorak <dvorakz@suse.cz>\n\n\t* tree-vect-transform.c (vect_create_epilog_for_reduction): Fix\n\tformating.\n\t(vect_generate_tmps_on_preheader, vect_update_ivs_after_vectorizer,\n\tvect_gen_niters_for_prolog_loop): Fold the emited expressions.\n\nFrom-SVN: r118925", "tree": {"sha": "5fbb131f762fbaafa1a2485145473b7fcb500db9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fbb131f762fbaafa1a2485145473b7fcb500db9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80b4a8d94f7664f35f17d4a6281872f7a10565b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80b4a8d94f7664f35f17d4a6281872f7a10565b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80b4a8d94f7664f35f17d4a6281872f7a10565b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80b4a8d94f7664f35f17d4a6281872f7a10565b7/comments", "author": null, "committer": null, "parents": [{"sha": "d092f0f60590cffbce8d7cf8128e5b593675be17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d092f0f60590cffbce8d7cf8128e5b593675be17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d092f0f60590cffbce8d7cf8128e5b593675be17"}], "stats": {"total": 69, "additions": 41, "deletions": 28}, "files": [{"sha": "ebdf75ff2bc57f2fcd36031a366d6bf152ac100e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80b4a8d94f7664f35f17d4a6281872f7a10565b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80b4a8d94f7664f35f17d4a6281872f7a10565b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80b4a8d94f7664f35f17d4a6281872f7a10565b7", "patch": "@@ -1,3 +1,10 @@\n+2006-11-17  Zdenek Dvorak <dvorakz@suse.cz>\n+\n+\t* tree-vect-transform.c (vect_create_epilog_for_reduction): Fix\n+\tformating.\n+\t(vect_generate_tmps_on_preheader, vect_update_ivs_after_vectorizer,\n+\tvect_gen_niters_for_prolog_loop): Fold the emited expressions.\n+\n 2006-11-17  Zdenek Dvorak <dvorakz@suse.cz>\n \n \t* tree-ssa-alias.c (new_type_alias): Do not use offset of expr to"}, {"sha": "e59c152139b8289a486b3db69115c0cd6fea0dc8", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 34, "deletions": 28, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80b4a8d94f7664f35f17d4a6281872f7a10565b7/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80b4a8d94f7664f35f17d4a6281872f7a10565b7/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=80b4a8d94f7664f35f17d4a6281872f7a10565b7", "patch": "@@ -1100,13 +1100,15 @@ vect_create_epilog_for_reduction (tree vect_def, tree stmt,\n \t      tree bitpos = size_int (bit_offset);\n \n \t      epilog_stmt = build2 (MODIFY_EXPR, vectype, vec_dest,\n-\t      build2 (shift_code, vectype, new_temp, bitpos));\n+\t\t\t\t    build2 (shift_code, vectype,\n+\t\t\t\t\t    new_temp, bitpos));\n \t      new_name = make_ssa_name (vec_dest, epilog_stmt);\n \t      TREE_OPERAND (epilog_stmt, 0) = new_name;\n \t      bsi_insert_after (&exit_bsi, epilog_stmt, BSI_NEW_STMT);\n \n \t      epilog_stmt = build2 (MODIFY_EXPR, vectype, vec_dest,\n-\t      build2 (code, vectype, new_name, new_temp));\n+\t\t\t\t    build2 (code, vectype,\n+\t\t\t\t\t    new_name, new_temp));\n \t      new_temp = make_ssa_name (vec_dest, epilog_stmt);\n \t      TREE_OPERAND (epilog_stmt, 0) = new_temp;\n \t      bsi_insert_after (&exit_bsi, epilog_stmt, BSI_NEW_STMT);\n@@ -3165,29 +3167,33 @@ vect_generate_tmps_on_preheader (loop_vec_info loop_vinfo,\n \n   /* Create: ratio = ni >> log2(vf) */\n \n-  var = create_tmp_var (TREE_TYPE (ni), \"bnd\");\n-  add_referenced_var (var);\n-  ratio_name = make_ssa_name (var, NULL_TREE);\n-  stmt = build2 (MODIFY_EXPR, void_type_node, ratio_name,\n-\t   build2 (RSHIFT_EXPR, TREE_TYPE (ni_name), ni_name, log_vf));\n-  SSA_NAME_DEF_STMT (ratio_name) = stmt;\n+  ratio_name = fold_build2 (RSHIFT_EXPR, TREE_TYPE (ni_name), ni_name, log_vf);\n+  if (!is_gimple_val (ratio_name))\n+    {\n+      var = create_tmp_var (TREE_TYPE (ni), \"bnd\");\n+      add_referenced_var (var);\n \n-  pe = loop_preheader_edge (loop);\n-  new_bb = bsi_insert_on_edge_immediate (pe, stmt);\n-  gcc_assert (!new_bb);\n+      ratio_name = force_gimple_operand (ratio_name, &stmt, true, var);\n+      pe = loop_preheader_edge (loop);\n+      new_bb = bsi_insert_on_edge_immediate (pe, stmt);\n+      gcc_assert (!new_bb);\n+    }\n        \n   /* Create: ratio_mult_vf = ratio << log2 (vf).  */\n \n-  var = create_tmp_var (TREE_TYPE (ni), \"ratio_mult_vf\");\n-  add_referenced_var (var);\n-  ratio_mult_vf_name = make_ssa_name (var, NULL_TREE);\n-  stmt = build2 (MODIFY_EXPR, void_type_node, ratio_mult_vf_name,\n-\t   build2 (LSHIFT_EXPR, TREE_TYPE (ratio_name), ratio_name, log_vf));\n-  SSA_NAME_DEF_STMT (ratio_mult_vf_name) = stmt;\n+  ratio_mult_vf_name = fold_build2 (LSHIFT_EXPR, TREE_TYPE (ratio_name),\n+\t\t\t\t    ratio_name, log_vf);\n+  if (!is_gimple_val (ratio_mult_vf_name))\n+    {\n+      var = create_tmp_var (TREE_TYPE (ni), \"ratio_mult_vf\");\n+      add_referenced_var (var);\n \n-  pe = loop_preheader_edge (loop);\n-  new_bb = bsi_insert_on_edge_immediate (pe, stmt);\n-  gcc_assert (!new_bb);\n+      ratio_mult_vf_name = force_gimple_operand (ratio_mult_vf_name, &stmt,\n+\t\t\t\t\t\t true, var);\n+      pe = loop_preheader_edge (loop);\n+      new_bb = bsi_insert_on_edge_immediate (pe, stmt);\n+      gcc_assert (!new_bb);\n+    }\n \n   *ni_name_ptr = ni_name;\n   *ratio_mult_vf_name_ptr = ratio_mult_vf_name;\n@@ -3375,9 +3381,9 @@ vect_update_ivs_after_vectorizer (loop_vec_info loop_vinfo, tree niters,\n       init_expr = unshare_expr (initial_condition_in_loop_num (access_fn, \n \t\t\t\t\t\t\t       loop->num));\n \n-      ni = build2 (PLUS_EXPR, TREE_TYPE (init_expr),\n-\t\t  build2 (MULT_EXPR, TREE_TYPE (niters),\n-\t\t       niters, step_expr), init_expr);\n+      ni = fold_build2 (PLUS_EXPR, TREE_TYPE (init_expr),\n+\t\t\tfold_build2 (MULT_EXPR, TREE_TYPE (niters),\n+\t\t\t\t     niters, step_expr), init_expr);\n \n       var = create_tmp_var (TREE_TYPE (init_expr), \"tmp\");\n       add_referenced_var (var);\n@@ -3530,15 +3536,15 @@ vect_gen_niters_for_prolog_loop (loop_vec_info loop_vinfo, tree loop_niters)\n   \n       /* Create:  byte_misalign = addr & (vectype_size - 1)  */\n       byte_misalign = \n-        build2 (BIT_AND_EXPR, type, start_addr, vectype_size_minus_1);\n+        fold_build2 (BIT_AND_EXPR, type, start_addr, vectype_size_minus_1);\n   \n       /* Create:  elem_misalign = byte_misalign / element_size  */\n       elem_misalign =\n-        build2 (RSHIFT_EXPR, type, byte_misalign, elem_size_log);\n+        fold_build2 (RSHIFT_EXPR, type, byte_misalign, elem_size_log);\n \n       /* Create:  (niters_type) (VF - elem_misalign)&(VF - 1)  */\n-      iters = build2 (MINUS_EXPR, type, vf_tree, elem_misalign);\n-      iters = build2 (BIT_AND_EXPR, type, iters, vf_minus_1);\n+      iters = fold_build2 (MINUS_EXPR, type, vf_tree, elem_misalign);\n+      iters = fold_build2 (BIT_AND_EXPR, type, iters, vf_minus_1);\n       iters = fold_convert (niters_type, iters);\n     }\n \n@@ -3547,7 +3553,7 @@ vect_gen_niters_for_prolog_loop (loop_vec_info loop_vinfo, tree loop_niters)\n      greater than vf; since the misalignment ('iters') is at most vf, there's\n      no need to generate the MIN_EXPR in this case.  */\n   if (TREE_CODE (loop_niters) != INTEGER_CST)\n-    iters = build2 (MIN_EXPR, niters_type, iters, loop_niters);\n+    iters = fold_build2 (MIN_EXPR, niters_type, iters, loop_niters);\n \n   if (vect_print_dump_info (REPORT_DETAILS))\n     {"}]}