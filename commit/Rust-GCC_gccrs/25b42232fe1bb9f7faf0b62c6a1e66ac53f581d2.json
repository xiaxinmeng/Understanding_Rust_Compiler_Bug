{"sha": "25b42232fe1bb9f7faf0b62c6a1e66ac53f581d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjViNDIyMzJmZTFiYjlmN2ZhZjBiNjJjNmExZTY2YWM1M2Y1ODFkMg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2005-04-06T06:22:51Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2005-04-06T06:22:51Z"}, "message": "Makefile.tpl (BUILD_CONFIGARGS): Include --with-build-subdir.\n\n2005-04-06  Paolo Bonzini  <bonzini@gnu.org>\n\n        * Makefile.tpl (BUILD_CONFIGARGS): Include --with-build-subdir.\n\t(TARGET_CONFIGARGS): Include --with-target-subdir.\n\t(configure, all): New macros.  Use them throughout.\n\t* Makefile.in: Regenerate.\n\nFrom-SVN: r97700", "tree": {"sha": "0466ed5894722e17893246870bbadfe753502f80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0466ed5894722e17893246870bbadfe753502f80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25b42232fe1bb9f7faf0b62c6a1e66ac53f581d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25b42232fe1bb9f7faf0b62c6a1e66ac53f581d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25b42232fe1bb9f7faf0b62c6a1e66ac53f581d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25b42232fe1bb9f7faf0b62c6a1e66ac53f581d2/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "27ffac3725a806e4b46445204bdcc9c751937b1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27ffac3725a806e4b46445204bdcc9c751937b1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27ffac3725a806e4b46445204bdcc9c751937b1f"}], "stats": {"total": 1339, "additions": 861, "deletions": 478}, "files": [{"sha": "1ae2783363da0f27ddd4d3d73bbd2450ad4a01e8", "filename": "ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b42232fe1bb9f7faf0b62c6a1e66ac53f581d2/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b42232fe1bb9f7faf0b62c6a1e66ac53f581d2/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=25b42232fe1bb9f7faf0b62c6a1e66ac53f581d2", "patch": "@@ -1,3 +1,10 @@\n+2005-04-06  Paolo Bonzini  <bonzini@gnu.org>\n+\n+        * Makefile.tpl (BUILD_CONFIGARGS): Include --with-build-subdir.\n+\t(TARGET_CONFIGARGS): Include --with-target-subdir.\n+\t(configure, all): New macros.  Use them throughout.\n+\t* Makefile.in: Regenerate.\n+\n 2005-04-04  Jon Grimm  <jgrimm2@us.ibm.com>\n \n \t* MAINTAINERS (Write After Approval): Add myself."}, {"sha": "1c3917db50eb7f2c0c81539ccbacdafe4812f413", "filename": "Makefile.in", "status": "modified", "additions": 780, "deletions": 357, "changes": 1137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b42232fe1bb9f7faf0b62c6a1e66ac53f581d2/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b42232fe1bb9f7faf0b62c6a1e66ac53f581d2/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=25b42232fe1bb9f7faf0b62c6a1e66ac53f581d2"}, {"sha": "b5415949e998823394caa6a99fb7cff597d42a98", "filename": "Makefile.tpl", "status": "modified", "additions": 74, "deletions": 121, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b42232fe1bb9f7faf0b62c6a1e66ac53f581d2/Makefile.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b42232fe1bb9f7faf0b62c6a1e66ac53f581d2/Makefile.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.tpl?ref=25b42232fe1bb9f7faf0b62c6a1e66ac53f581d2", "patch": "@@ -93,7 +93,7 @@ BUILD_CONFIGDIRS = libiberty\n BUILD_SUBDIR = @build_subdir@\n # This is set by the configure script to the arguments to use when configuring\n # directories built for the build system.\n-BUILD_CONFIGARGS = @build_configargs@\n+BUILD_CONFIGARGS = @build_configargs@ --with-build-subdir=\"$(BUILD_SUBDIR)\"\n \n # This is the list of variables to export in the environment when\n # configuring any subdirectory.  It must also be exported whenever\n@@ -178,7 +178,7 @@ TARGET_CONFIGDIRS = @target_configdirs@\n TARGET_SUBDIR = @target_subdir@\n # This is set by the configure script to the arguments to use when configuring\n # directories built for the target.\n-TARGET_CONFIGARGS = @target_configargs@\n+TARGET_CONFIGARGS = @target_configargs@ --with-target-subdir=\"$(TARGET_SUBDIR)\"\n # This is the list of variables to export in the environment when\n # configuring subdirectories for the host system.\n BASE_TARGET_EXPORTS = \\\n@@ -818,92 +818,74 @@ etags tags: TAGS\n # built are.\n TAGS: do-TAGS\n \n-# --------------------------------------\n-# Modules which run on the build machine\n-# --------------------------------------\n-[+ FOR build_modules +]\n-.PHONY: configure-build-[+module+] maybe-configure-build-[+module+]\n-maybe-configure-build-[+module+]:\n-@if build-[+module+]\n-maybe-configure-build-[+module+]: configure-build-[+module+]\n-configure-build-[+module+]:\n-\t@test ! -f $(BUILD_SUBDIR)/[+module+]/Makefile || exit 0; \\\n-\t$(SHELL) $(srcdir)/mkinstalldirs $(BUILD_SUBDIR)/[+module+] ; \\\n+# ------------------------------------\n+# Macros for configure and all targets\n+# ------------------------------------\n+\n+[+ DEFINE configure +]\n+.PHONY: configure-[+prefix+][+module+] maybe-configure-[+prefix+][+module+]\n+maybe-configure-[+prefix+][+module+]:\n+@if [+prefix+][+module+]\n+maybe-configure-[+prefix+][+module+]: configure-[+prefix+][+module+]\n+configure-[+prefix+][+module+]: [+deps+]\n+\t@[+ IF bootstrap +]test -f stage_last && exit 0; \\\n+\t[+ ENDIF bootstrap +]test ! -f [+subdir+]/[+module+]/Makefile || exit 0; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs [+subdir+]/[+module+] ; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(BUILD_EXPORTS) \\\n-\techo Configuring in $(BUILD_SUBDIR)/[+module+]; \\\n-\tcd \"$(BUILD_SUBDIR)/[+module+]\" || exit 1; \\\n+\t[+exports+] \\\n+\techo Configuring in [+subdir+]/[+module+]; \\\n+\tcd \"[+subdir+]/[+module+]\" || exit 1; \\\n \tcase $(srcdir) in \\\n \t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n-\t  *) topdir=`echo $(BUILD_SUBDIR)/[+module+]/ | \\\n+\t  *) topdir=`echo [+subdir+]/[+module+]/ | \\\n \t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n \tesac; \\\n \tsrcdiroption=\"--srcdir=$${topdir}/[+module+]\"; \\\n \tlibsrcdir=\"$$s/[+module+]\"; \\\n-\trm -f no-such-file || : ; \\\n-\tCONFIG_SITE=no-such-file $(SHELL) $${libsrcdir}/configure \\\n-\t  $(BUILD_CONFIGARGS) $${srcdiroption} \\\n-\t  --with-build-subdir=\"$(BUILD_SUBDIR)\" [+extra_configure_flags+] \\\n+\t[+ IF no-config-site +]rm -f no-such-file || : ; \\\n+\tCONFIG_SITE=no-such-file [+ ENDIF +]$(SHELL) $${libsrcdir}/configure \\\n+\t  [+args+] $${srcdiroption} [+extra_configure_flags+] \\\n \t  || exit 1\n-@endif build-[+module+]\n-\n-.PHONY: all-build-[+module+] maybe-all-build-[+module+]\n-maybe-all-build-[+module+]:\n-@if build-[+module+]\n-TARGET-build-[+module+]=[+ IF target +][+target+][+ ELSE +]all[+ ENDIF target +]\n-maybe-all-build-[+module+]: all-build-[+module+]\n-all-build-[+module+]: configure-build-[+module+]\n-\t@r=`${PWD_COMMAND}`; export r; \\\n+@endif [+prefix+][+module+]\n+[+ ENDDEF +]\n+\n+[+ DEFINE all +]\n+.PHONY: all-[+prefix+][+module+] maybe-all-[+prefix+][+module+]\n+maybe-all-[+prefix+][+module+]:\n+@if [+prefix+][+module+]\n+TARGET-[+prefix+][+module+]=[+\n+  IF target +][+target+][+ ELSE +]all[+ ENDIF target +]\n+maybe-all-[+prefix+][+module+]: all-[+prefix+][+module+]\n+all-[+prefix+][+module+]: configure-[+prefix+][+module+]\n+\t@[+ IF bootstrap +]test -f stage_last && exit 0; \\\n+\t[+ ENDIF bootstrap +]r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(BUILD_EXPORTS) \\\n-\t(cd $(BUILD_SUBDIR)/[+module+] && \\\n-\t  $(MAKE) [+extra_make_flags+] $(TARGET-build-[+module+]))\n-@endif build-[+module+]\n-[+ ENDFOR build_modules +]\n+\t[+exports+] \\\n+\t(cd [+subdir+]/[+module+] && \\\n+\t  $(MAKE) [+args+] [+extra_make_flags+] $(TARGET-[+prefix+][+module+]))\n+@endif [+prefix+][+module+]\n+[+ ENDDEF +]\n+\n+# --------------------------------------\n+# Modules which run on the build machine\n+# --------------------------------------\n+[+ FOR build_modules +]\n+[+ configure prefix=\"build-\" subdir=\"$(BUILD_SUBDIR)\" exports=\"$(BUILD_EXPORTS)\"\n+\t     args=\"$(BUILD_CONFIGARGS)\" no-config-site=true +]\n+\n+[+ all prefix=\"build-\" subdir=\"$(BUILD_SUBDIR)\" exports=\"$(BUILD_EXPORTS)\" +]\n+[+ ENDFOR build_module +]\n \n # --------------------------------------\n # Modules which run on the host machine\n # --------------------------------------\n [+ FOR host_modules +]\n-.PHONY: configure-[+module+] maybe-configure-[+module+]\n-maybe-configure-[+module+]:\n-@if [+module+]\n-maybe-configure-[+module+]: configure-[+module+]\n-configure-[+module+]:\n-\t@[+ IF bootstrap +]test -f stage_last && exit 0; \\\n-\t[+ ENDIF bootstrap +]test ! -f $(HOST_SUBDIR)/[+module+]/Makefile || exit 0; \\\n-\t$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR)/[+module+] ; \\\n-\tr=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(HOST_EXPORTS) \\\n-\techo Configuring in [+module+]; \\\n-\tcd $(HOST_SUBDIR)/[+module+] || exit 1; \\\n-\tcase $(srcdir) in \\\n-\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n-\t  *) topdir=`echo $(HOST_SUBDIR)/[+module+]/ | \\\n-\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n-\tesac; \\\n-\tsrcdiroption=\"--srcdir=$${topdir}/[+module+]\"; \\\n-\tlibsrcdir=\"$$s/[+module+]\"; \\\n-\t$(SHELL) $${libsrcdir}/configure \\\n-\t  $(HOST_CONFIGARGS) $${srcdiroption} [+extra_configure_flags+] \\\n-\t  || exit 1\n-@endif [+module+]\n+[+ configure prefix=\"\" subdir=\"$(HOST_SUBDIR)\" exports=\"$(HOST_EXPORTS)\"\n+\t     args=\"$(HOST_CONFIGARGS)\" +]\n \n-.PHONY: all-[+module+] maybe-all-[+module+]\n-maybe-all-[+module+]:\n-@if [+module+]\n-TARGET-[+module+]=[+ IF target +][+target+][+ ELSE +]all[+ ENDIF target +]\n-maybe-all-[+module+]: all-[+module+]\n-all-[+module+]: configure-[+module+]\n-\t@[+ IF bootstrap +]test -f stage_last && exit 0; \\\n-\t[+ ENDIF bootstrap +]r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(HOST_EXPORTS) \\\n-\t(cd $(HOST_SUBDIR)/[+module+] && \\\n-\t  $(MAKE) $(FLAGS_TO_PASS) [+extra_make_flags+] $(TARGET-[+module+]))\n-@endif [+module+]\n+[+ all prefix=\"\" subdir=\"$(HOST_SUBDIR)\" exports=\"$(HOST_EXPORTS)\"\n+       args=\"$(FLAGS_TO_PASS)\" +]\n \n .PHONY: check-[+module+] maybe-check-[+module+]\n maybe-check-[+module+]:\n@@ -985,63 +967,34 @@ maybe-[+make_target+]-[+module+]: [+make_target+]-[+module+]\n # Modules which run on the target machine\n # ---------------------------------------\n [+ FOR target_modules +]\n-.PHONY: configure-target-[+module+] maybe-configure-target-[+module+]\n-maybe-configure-target-[+module+]:\n-@if target-[+module+]\n-maybe-configure-target-[+module+]: configure-target-[+module+]\n \n # There's only one multilib.out.  Cleverer subdirs shouldn't need it copied.\n+@if target-[+module+]\n $(TARGET_SUBDIR)/[+module+]/multilib.out: multilib.out\n \t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/[+module+] ; \\\n \trm -f $(TARGET_SUBDIR)/[+module+]/Makefile || : ; \\\n \tcp multilib.out $(TARGET_SUBDIR)/[+module+]/multilib.out\n-\n-configure-target-[+module+]: $(TARGET_SUBDIR)/[+module+]/multilib.out\n-\t@test ! -f $(TARGET_SUBDIR)/[+module+]/Makefile || exit 0; \\\n-\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/[+module+] ; \\\n-\tr=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\[+\n-IF raw_cxx +]\n-\t$(RAW_CXX_TARGET_EXPORTS) \\[+\n-ELSE normal_cxx +]\n-\t$(NORMAL_TARGET_EXPORTS) \\[+\n-ENDIF raw_cxx +]\n-\techo Configuring in $(TARGET_SUBDIR)/[+module+]; \\\n-\tcd \"$(TARGET_SUBDIR)/[+module+]\" || exit 1; \\\n-\tcase $(srcdir) in \\\n-\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n-\t  *) topdir=`echo $(TARGET_SUBDIR)/[+module+]/ | \\\n-\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n-\tesac; \\\n-\tsrcdiroption=\"--srcdir=$${topdir}/[+module+]\"; \\\n-\tlibsrcdir=\"$$s/[+module+]\"; \\\n-\trm -f no-such-file || : ; \\\n-\tCONFIG_SITE=no-such-file $(SHELL) $${libsrcdir}/configure \\\n-\t  $(TARGET_CONFIGARGS) $${srcdiroption} \\\n-\t  --with-target-subdir=\"$(TARGET_SUBDIR)\" [+extra_configure_flags+] \\\n-\t  || exit 1\n @endif target-[+module+]\n \n-.PHONY: all-target-[+module+] maybe-all-target-[+module+]\n-maybe-all-target-[+module+]:\n-@if target-[+module+]\n-TARGET-target-[+module+]=[+ IF target +][+target+][+ ELSE +]all[+ ENDIF target +]\n-maybe-all-target-[+module+]: all-target-[+module+]\n-all-target-[+module+]: configure-target-[+module+]\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\[+\n-IF raw_cxx +]\n-\t$(RAW_CXX_TARGET_EXPORTS) \\[+\n-ELSE normal_cxx +]\n-\t$(NORMAL_TARGET_EXPORTS) \\[+\n-ENDIF raw_cxx +]\n-\t(cd $(TARGET_SUBDIR)/[+module+] && \\\n-\t  $(MAKE) $(TARGET_FLAGS_TO_PASS) [+\n-\t    IF raw_cxx \n-\t  +] 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)' [+ \n-\t    ENDIF raw_cxx \n-\t  +] [+extra_make_flags+] $(TARGET-target-[+module+]))\n-@endif target-[+module+]\n+[+ IF raw_cxx +]\n+[+ configure prefix=\"target-\" subdir=\"$(TARGET_SUBDIR)\"\n+\t     deps=(string-append \"$(TARGET_SUBDIR)/\" (get \"module\") \"/multilib.out\")\n+\t     exports=\"$(RAW_CXX_TARGET_EXPORTS)\"\n+\t     args=\"$(TARGET_CONFIGARGS)\" no-config-site=true +]\n+\n+[+ all prefix=\"target-\" subdir=\"$(TARGET_SUBDIR)\"\n+       exports=\"$(RAW_CXX_TARGET_EXPORTS)\"\n+       args=\"$(TARGET_FLAGS_TO_PASS) 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'\" +]\n+[+ ELSE +]\n+[+ configure prefix=\"target-\" subdir=\"$(TARGET_SUBDIR)\"\n+\t     deps=(string-append \"$(TARGET_SUBDIR)/\" (get \"module\") \"/multilib.out\")\n+\t     exports=\"$(NORMAL_TARGET_EXPORTS)\"\n+\t     args=\"$(TARGET_CONFIGARGS)\" no-config-site=true +]\n+\n+[+ all prefix=\"target-\" subdir=\"$(TARGET_SUBDIR)\"\n+       exports=\"$(NORMAL_TARGET_EXPORTS)\"\n+       args=\"$(TARGET_FLAGS_TO_PASS)\" +]\n+[+ ENDIF +]\n \n .PHONY: check-target-[+module+] maybe-check-target-[+module+]\n maybe-check-target-[+module+]:"}]}