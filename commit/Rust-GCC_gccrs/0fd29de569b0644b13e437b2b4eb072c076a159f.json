{"sha": "0fd29de569b0644b13e437b2b4eb072c076a159f", "node_id": "C_kwDOANBUbNoAKDBmZDI5ZGU1NjliMDY0NGIxM2U0MzdiMmI0ZWIwNzJjMDc2YTE1OWY", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-14T14:22:39Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-15T13:42:09Z"}, "message": "RISC-V: Add vnmsac vx C++ api tests\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vnmsac_vx_mu_rv32-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsac_vx_mu_rv32-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsac_vx_mu_rv32-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsac_vx_rv32-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsac_vx_rv32-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsac_vx_rv32-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsac_vx_tu_rv32-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsac_vx_tu_rv32-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsac_vx_tu_rv32-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsac_vx_tum_rv32-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsac_vx_tum_rv32-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsac_vx_tum_rv32-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsac_vx_tumu_rv32-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsac_vx_tumu_rv32-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsac_vx_tumu_rv32-3.C: New test.", "tree": {"sha": "39f29ef7fabd82f38cf919fb5ddc2cebb853dbd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39f29ef7fabd82f38cf919fb5ddc2cebb853dbd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fd29de569b0644b13e437b2b4eb072c076a159f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fd29de569b0644b13e437b2b4eb072c076a159f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fd29de569b0644b13e437b2b4eb072c076a159f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fd29de569b0644b13e437b2b4eb072c076a159f/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ce337324a8bafef59d268b647d3a03542c511bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ce337324a8bafef59d268b647d3a03542c511bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ce337324a8bafef59d268b647d3a03542c511bb"}], "stats": {"total": 5184, "additions": 5184, "deletions": 0}, "files": [{"sha": "b90dc04a0485c1656092bbdd0b589c3c1d56add0", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsac_vx_mu_rv32-1.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fd29de569b0644b13e437b2b4eb072c076a159f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_mu_rv32-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fd29de569b0644b13e437b2b4eb072c076a159f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_mu_rv32-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_mu_rv32-1.C?ref=0fd29de569b0644b13e437b2b4eb072c076a159f", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsac_mu(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac_mu(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac_mu(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac_mu(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac_mu(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac_mu(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac_mu(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac_mu(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac_mu(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac_mu(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac_mu(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac_mu(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac_mu(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac_mu(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac_mu(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac_mu(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac_mu(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac_mu(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac_mu(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac_mu(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac_mu(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac_mu(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac_mu(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac_mu(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac_mu(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac_mu(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac_mu(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac_mu(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac_mu(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac_mu(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac_mu(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac_mu(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac_mu(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac_mu(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac_mu(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac_mu(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac_mu(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac_mu(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac_mu(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac_mu(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac_mu(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac_mu(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac_mu(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac_mu(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 8 } } */"}, {"sha": "2908cdb57c50118618b97625396f68b9d2106214", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsac_vx_mu_rv32-2.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fd29de569b0644b13e437b2b4eb072c076a159f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_mu_rv32-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fd29de569b0644b13e437b2b4eb072c076a159f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_mu_rv32-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_mu_rv32-2.C?ref=0fd29de569b0644b13e437b2b4eb072c076a159f", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsac_mu(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac_mu(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac_mu(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac_mu(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac_mu(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac_mu(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac_mu(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac_mu(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac_mu(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac_mu(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac_mu(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac_mu(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac_mu(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac_mu(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac_mu(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac_mu(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac_mu(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac_mu(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac_mu(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac_mu(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac_mu(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac_mu(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac_mu(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac_mu(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac_mu(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac_mu(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac_mu(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac_mu(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac_mu(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac_mu(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac_mu(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac_mu(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac_mu(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac_mu(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac_mu(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac_mu(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac_mu(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac_mu(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac_mu(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac_mu(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac_mu(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac_mu(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac_mu(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac_mu(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 8 } } */"}, {"sha": "43c7026092e8b01fd2bb59de5d8d707828b5f85c", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsac_vx_mu_rv32-3.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fd29de569b0644b13e437b2b4eb072c076a159f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_mu_rv32-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fd29de569b0644b13e437b2b4eb072c076a159f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_mu_rv32-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_mu_rv32-3.C?ref=0fd29de569b0644b13e437b2b4eb072c076a159f", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsac_mu(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac_mu(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac_mu(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac_mu(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac_mu(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac_mu(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac_mu(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac_mu(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac_mu(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac_mu(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac_mu(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac_mu(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac_mu(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac_mu(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac_mu(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac_mu(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac_mu(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac_mu(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac_mu(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac_mu(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac_mu(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac_mu(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac_mu(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac_mu(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac_mu(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac_mu(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac_mu(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac_mu(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac_mu(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac_mu(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac_mu(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac_mu(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac_mu(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac_mu(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac_mu(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac_mu(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac_mu(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac_mu(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac_mu(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac_mu(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac_mu(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac_mu(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac_mu(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac_mu(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 8 } } */"}, {"sha": "50790587d6432aca462cd8172c04a89ef3ae6990", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsac_vx_rv32-1.C", "status": "added", "additions": 572, "deletions": 0, "changes": 572, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fd29de569b0644b13e437b2b4eb072c076a159f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_rv32-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fd29de569b0644b13e437b2b4eb072c076a159f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_rv32-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_rv32-1.C?ref=0fd29de569b0644b13e437b2b4eb072c076a159f", "patch": "@@ -0,0 +1,572 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsac(vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac(vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac(vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac(vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac(vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac(vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac(vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac(vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac(vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac(vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac(vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac(vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac(vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac(vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac(vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac(vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac(vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac(vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac(vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac(vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac(vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac(vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac(vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac(vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac(vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac(vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac(vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac(vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac(vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac(vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac(vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac(vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac(vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac(vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac(vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac(vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac(vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac(vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac(vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac(vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac(vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac(vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac(vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac(vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf8_t test___riscv_vnmsac(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 8 } } */"}, {"sha": "ee507140b916a39de5f0bfb6bc7fc76c5a64c7a6", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsac_vx_rv32-2.C", "status": "added", "additions": 572, "deletions": 0, "changes": 572, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fd29de569b0644b13e437b2b4eb072c076a159f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_rv32-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fd29de569b0644b13e437b2b4eb072c076a159f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_rv32-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_rv32-2.C?ref=0fd29de569b0644b13e437b2b4eb072c076a159f", "patch": "@@ -0,0 +1,572 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsac(vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac(vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac(vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac(vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac(vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac(vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac(vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac(vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac(vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac(vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac(vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac(vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac(vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac(vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac(vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac(vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac(vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac(vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac(vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac(vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac(vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac(vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac(vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac(vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac(vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac(vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac(vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac(vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac(vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac(vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac(vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac(vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac(vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac(vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac(vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac(vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac(vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac(vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac(vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac(vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac(vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac(vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac(vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac(vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf8_t test___riscv_vnmsac(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 8 } } */"}, {"sha": "0ef1763f64fa6f22cbeb668acbb88a05fd14dfef", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsac_vx_rv32-3.C", "status": "added", "additions": 572, "deletions": 0, "changes": 572, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fd29de569b0644b13e437b2b4eb072c076a159f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_rv32-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fd29de569b0644b13e437b2b4eb072c076a159f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_rv32-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_rv32-3.C?ref=0fd29de569b0644b13e437b2b4eb072c076a159f", "patch": "@@ -0,0 +1,572 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsac(vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac(vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac(vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac(vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac(vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac(vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac(vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac(vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac(vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac(vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac(vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac(vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac(vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac(vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac(vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac(vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac(vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac(vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac(vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac(vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac(vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac(vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac(vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac(vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac(vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac(vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac(vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac(vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac(vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac(vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac(vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac(vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac(vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac(vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac(vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac(vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac(vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac(vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac(vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac(vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac(vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac(vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac(vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac(vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf8_t test___riscv_vnmsac(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 8 } } */"}, {"sha": "faadb19b050e98cdd0d63cef2a456efd75865869", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsac_vx_tu_rv32-1.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fd29de569b0644b13e437b2b4eb072c076a159f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tu_rv32-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fd29de569b0644b13e437b2b4eb072c076a159f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tu_rv32-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tu_rv32-1.C?ref=0fd29de569b0644b13e437b2b4eb072c076a159f", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsac_tu(vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac_tu(vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac_tu(vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac_tu(vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac_tu(vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac_tu(vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac_tu(vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac_tu(vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac_tu(vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac_tu(vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac_tu(vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac_tu(vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac_tu(vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac_tu(vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac_tu(vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac_tu(vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac_tu(vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac_tu(vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac_tu(vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac_tu(vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac_tu(vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac_tu(vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac_tu(vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac_tu(vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac_tu(vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac_tu(vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac_tu(vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac_tu(vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac_tu(vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac_tu(vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac_tu(vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac_tu(vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac_tu(vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac_tu(vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac_tu(vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac_tu(vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac_tu(vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac_tu(vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac_tu(vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac_tu(vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac_tu(vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac_tu(vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac_tu(vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac_tu(vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */"}, {"sha": "01c377d57d3531a67e413053b749709a87bb2dd8", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsac_vx_tu_rv32-2.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fd29de569b0644b13e437b2b4eb072c076a159f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tu_rv32-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fd29de569b0644b13e437b2b4eb072c076a159f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tu_rv32-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tu_rv32-2.C?ref=0fd29de569b0644b13e437b2b4eb072c076a159f", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsac_tu(vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac_tu(vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac_tu(vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac_tu(vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac_tu(vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac_tu(vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac_tu(vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac_tu(vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac_tu(vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac_tu(vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac_tu(vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac_tu(vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac_tu(vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac_tu(vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac_tu(vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac_tu(vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac_tu(vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac_tu(vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac_tu(vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac_tu(vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac_tu(vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac_tu(vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac_tu(vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac_tu(vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac_tu(vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac_tu(vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac_tu(vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac_tu(vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac_tu(vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac_tu(vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac_tu(vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac_tu(vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac_tu(vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac_tu(vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac_tu(vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac_tu(vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac_tu(vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac_tu(vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac_tu(vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac_tu(vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac_tu(vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac_tu(vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac_tu(vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac_tu(vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */"}, {"sha": "c6fb0cfc5b7874db25c5e570a521e5f2d4583163", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsac_vx_tu_rv32-3.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fd29de569b0644b13e437b2b4eb072c076a159f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tu_rv32-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fd29de569b0644b13e437b2b4eb072c076a159f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tu_rv32-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tu_rv32-3.C?ref=0fd29de569b0644b13e437b2b4eb072c076a159f", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsac_tu(vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac_tu(vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac_tu(vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac_tu(vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac_tu(vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac_tu(vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac_tu(vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac_tu(vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac_tu(vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac_tu(vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac_tu(vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac_tu(vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac_tu(vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac_tu(vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac_tu(vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac_tu(vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac_tu(vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac_tu(vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac_tu(vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac_tu(vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac_tu(vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac_tu(vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac_tu(vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac_tu(vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac_tu(vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac_tu(vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac_tu(vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac_tu(vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac_tu(vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac_tu(vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac_tu(vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac_tu(vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac_tu(vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac_tu(vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac_tu(vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac_tu(vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac_tu(vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac_tu(vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac_tu(vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac_tu(vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac_tu(vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac_tu(vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac_tu(vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac_tu(vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */"}, {"sha": "06247afab03147fe9281b7005c0729cf1b182030", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsac_vx_tum_rv32-1.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fd29de569b0644b13e437b2b4eb072c076a159f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tum_rv32-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fd29de569b0644b13e437b2b4eb072c076a159f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tum_rv32-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tum_rv32-1.C?ref=0fd29de569b0644b13e437b2b4eb072c076a159f", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsac_tum(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac_tum(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac_tum(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac_tum(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac_tum(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac_tum(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac_tum(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac_tum(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac_tum(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac_tum(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac_tum(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac_tum(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac_tum(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac_tum(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac_tum(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac_tum(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac_tum(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac_tum(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac_tum(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac_tum(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac_tum(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac_tum(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac_tum(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac_tum(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac_tum(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac_tum(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac_tum(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac_tum(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac_tum(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac_tum(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac_tum(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac_tum(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac_tum(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac_tum(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac_tum(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac_tum(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac_tum(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac_tum(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac_tum(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac_tum(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac_tum(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac_tum(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac_tum(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac_tum(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 8 } } */"}, {"sha": "5aa24c53e4b731b599f1183fbd69c642cedad5b9", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsac_vx_tum_rv32-2.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fd29de569b0644b13e437b2b4eb072c076a159f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tum_rv32-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fd29de569b0644b13e437b2b4eb072c076a159f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tum_rv32-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tum_rv32-2.C?ref=0fd29de569b0644b13e437b2b4eb072c076a159f", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsac_tum(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac_tum(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac_tum(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac_tum(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac_tum(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac_tum(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac_tum(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac_tum(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac_tum(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac_tum(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac_tum(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac_tum(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac_tum(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac_tum(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac_tum(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac_tum(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac_tum(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac_tum(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac_tum(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac_tum(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac_tum(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac_tum(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac_tum(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac_tum(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac_tum(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac_tum(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac_tum(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac_tum(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac_tum(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac_tum(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac_tum(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac_tum(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac_tum(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac_tum(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac_tum(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac_tum(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac_tum(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac_tum(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac_tum(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac_tum(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac_tum(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac_tum(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac_tum(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac_tum(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 8 } } */"}, {"sha": "65c25c570d6fd7ff77785d246392b7bc5242242d", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsac_vx_tum_rv32-3.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fd29de569b0644b13e437b2b4eb072c076a159f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tum_rv32-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fd29de569b0644b13e437b2b4eb072c076a159f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tum_rv32-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tum_rv32-3.C?ref=0fd29de569b0644b13e437b2b4eb072c076a159f", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsac_tum(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac_tum(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac_tum(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac_tum(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac_tum(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac_tum(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac_tum(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac_tum(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac_tum(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac_tum(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac_tum(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac_tum(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac_tum(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac_tum(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac_tum(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac_tum(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac_tum(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac_tum(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac_tum(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac_tum(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac_tum(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac_tum(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac_tum(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac_tum(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac_tum(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac_tum(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac_tum(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac_tum(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac_tum(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac_tum(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac_tum(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac_tum(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac_tum(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac_tum(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac_tum(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac_tum(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac_tum(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac_tum(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac_tum(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac_tum(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac_tum(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac_tum(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac_tum(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac_tum(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 8 } } */"}, {"sha": "eab31098b0d89f0c8ddbc1682120b46386057882", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsac_vx_tumu_rv32-1.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fd29de569b0644b13e437b2b4eb072c076a159f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tumu_rv32-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fd29de569b0644b13e437b2b4eb072c076a159f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tumu_rv32-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tumu_rv32-1.C?ref=0fd29de569b0644b13e437b2b4eb072c076a159f", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsac_tumu(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac_tumu(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac_tumu(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac_tumu(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac_tumu(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac_tumu(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac_tumu(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac_tumu(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac_tumu(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac_tumu(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac_tumu(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac_tumu(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac_tumu(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac_tumu(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac_tumu(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac_tumu(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac_tumu(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac_tumu(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac_tumu(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac_tumu(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac_tumu(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac_tumu(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac_tumu(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac_tumu(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac_tumu(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac_tumu(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac_tumu(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac_tumu(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac_tumu(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac_tumu(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac_tumu(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac_tumu(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac_tumu(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac_tumu(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac_tumu(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac_tumu(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac_tumu(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac_tumu(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac_tumu(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac_tumu(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac_tumu(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac_tumu(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac_tumu(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac_tumu(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 8 } } */"}, {"sha": "c8b2dfaeea349a3002df0a22c0b89cf86c070b86", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsac_vx_tumu_rv32-2.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fd29de569b0644b13e437b2b4eb072c076a159f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tumu_rv32-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fd29de569b0644b13e437b2b4eb072c076a159f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tumu_rv32-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tumu_rv32-2.C?ref=0fd29de569b0644b13e437b2b4eb072c076a159f", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsac_tumu(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac_tumu(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac_tumu(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac_tumu(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac_tumu(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac_tumu(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac_tumu(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac_tumu(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac_tumu(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac_tumu(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac_tumu(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac_tumu(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac_tumu(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac_tumu(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac_tumu(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac_tumu(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac_tumu(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac_tumu(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac_tumu(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac_tumu(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac_tumu(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac_tumu(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac_tumu(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac_tumu(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac_tumu(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac_tumu(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac_tumu(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac_tumu(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac_tumu(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac_tumu(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac_tumu(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac_tumu(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac_tumu(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac_tumu(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac_tumu(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac_tumu(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac_tumu(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac_tumu(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac_tumu(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac_tumu(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac_tumu(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac_tumu(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac_tumu(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac_tumu(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 8 } } */"}, {"sha": "fc484ef2ac8929288d6b943092fde8d20fa1befb", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsac_vx_tumu_rv32-3.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fd29de569b0644b13e437b2b4eb072c076a159f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tumu_rv32-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fd29de569b0644b13e437b2b4eb072c076a159f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tumu_rv32-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsac_vx_tumu_rv32-3.C?ref=0fd29de569b0644b13e437b2b4eb072c076a159f", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsac_tumu(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsac_tumu(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsac_tumu(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsac_tumu(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsac_tumu(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsac_tumu(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsac_tumu(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsac_tumu(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsac_tumu(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsac_tumu(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsac_tumu(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsac_tumu(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsac_tumu(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsac_tumu(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsac_tumu(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsac_tumu(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsac_tumu(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsac_tumu(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsac_tumu(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsac_tumu(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsac_tumu(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsac_tumu(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsac_tumu(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsac_tumu(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsac_tumu(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsac_tumu(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsac_tumu(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsac_tumu(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsac_tumu(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsac_tumu(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsac_tumu(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsac_tumu(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsac_tumu(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsac_tumu(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsac_tumu(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsac_tumu(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsac_tumu(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsac_tumu(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsac_tumu(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsac_tumu(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsac_tumu(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsac_tumu(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsac_tumu(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsac_tumu(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsac_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 8 } } */"}]}