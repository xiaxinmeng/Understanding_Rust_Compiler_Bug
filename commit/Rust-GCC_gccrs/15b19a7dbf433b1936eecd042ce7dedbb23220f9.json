{"sha": "15b19a7dbf433b1936eecd042ce7dedbb23220f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTViMTlhN2RiZjQzM2IxOTM2ZWVjZDA0MmNlN2RlZGJiMjMyMjBmOQ==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@act-europe.fr", "date": "2003-04-16T21:30:35Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2003-04-16T21:30:35Z"}, "message": "expr.c (store_field): Force usage of bitfield instructions when the field position requires it...\n\n        * expr.c (store_field): Force usage of bitfield instructions when\n        the field position requires it, whatever SLOW_UNALIGNED_ACCESS.\n        (expand_expr, case BIT_FIELD_REF): likewise.\n\nFrom-SVN: r65701", "tree": {"sha": "3af28f6f829e935d079f27a0ee941ec6ec92edf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3af28f6f829e935d079f27a0ee941ec6ec92edf8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15b19a7dbf433b1936eecd042ce7dedbb23220f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15b19a7dbf433b1936eecd042ce7dedbb23220f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15b19a7dbf433b1936eecd042ce7dedbb23220f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15b19a7dbf433b1936eecd042ce7dedbb23220f9/comments", "author": null, "committer": null, "parents": [{"sha": "f2d80e7e8132037e56bdd430ffaf50a9dfa71593", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d80e7e8132037e56bdd430ffaf50a9dfa71593", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2d80e7e8132037e56bdd430ffaf50a9dfa71593"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "bb692cf621d6bfb04f1b3b9befd8edda9f4182b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15b19a7dbf433b1936eecd042ce7dedbb23220f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15b19a7dbf433b1936eecd042ce7dedbb23220f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=15b19a7dbf433b1936eecd042ce7dedbb23220f9", "patch": "@@ -1,3 +1,9 @@\n+2003-04-16  Olivier Hainque <hainque@act-europe.fr>\n+\n+        * expr.c (store_field): Force usage of bitfield instructions when\n+        the field position requires it, whatever SLOW_UNALIGNED_ACCESS.\n+        (expand_expr, case BIT_FIELD_REF): likewise.\n+\n 2003-04-16  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR middle-end/8866"}, {"sha": "abf0875c849a636dbd4697139dae4482186e0176", "filename": "gcc/expr.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15b19a7dbf433b1936eecd042ce7dedbb23220f9/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15b19a7dbf433b1936eecd042ce7dedbb23220f9/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=15b19a7dbf433b1936eecd042ce7dedbb23220f9", "patch": "@@ -5564,8 +5564,9 @@ store_field (target, bitsize, bitpos, mode, exp, value_mode, unsignedp, type,\n       || GET_CODE (target) == SUBREG\n       /* If the field isn't aligned enough to store as an ordinary memref,\n \t store it as a bit field.  */\n-      || (mode != BLKmode && SLOW_UNALIGNED_ACCESS (mode, MEM_ALIGN (target))\n-\t  && (MEM_ALIGN (target) < GET_MODE_ALIGNMENT (mode)\n+      || (mode != BLKmode\n+\t  && ((SLOW_UNALIGNED_ACCESS (mode, MEM_ALIGN (target))\n+\t       && (MEM_ALIGN (target) < GET_MODE_ALIGNMENT (mode)))\n \t      || bitpos % GET_MODE_ALIGNMENT (mode)))\n       /* If the RHS and field are a constant size and the size of the\n \t RHS isn't the same size as the bitfield, we must use bitfield\n@@ -7504,9 +7505,8 @@ expand_expr (exp, target, tmode, modifier)\n \t    /* If the field isn't aligned enough to fetch as a memref,\n \t       fetch it as a bit field.  */\n \t    || (mode1 != BLKmode\n-\t\t&& SLOW_UNALIGNED_ACCESS (mode1, MEM_ALIGN (op0))\n-\t\t&& ((TYPE_ALIGN (TREE_TYPE (tem))\n-\t\t     < GET_MODE_ALIGNMENT (mode))\n+\t\t&& ((TYPE_ALIGN (TREE_TYPE (tem)) < GET_MODE_ALIGNMENT (mode)\n+\t\t     && SLOW_UNALIGNED_ACCESS (mode1, MEM_ALIGN (op0)))\n \t\t    || (bitpos % GET_MODE_ALIGNMENT (mode) != 0)))\n \t    /* If the type and the field are a constant size and the\n \t       size of the type isn't the same size as the bitfield,"}]}