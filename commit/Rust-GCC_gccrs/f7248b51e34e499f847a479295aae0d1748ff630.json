{"sha": "f7248b51e34e499f847a479295aae0d1748ff630", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcyNDhiNTFlMzRlNDk5Zjg0N2E0NzkyOTVhYWUwZDE3NDhmZjYzMA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-03-12T11:46:56Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-03-12T11:46:56Z"}, "message": "/home/neil/diffs/mcore.log\n\nFrom-SVN: r64240", "tree": {"sha": "ca48f54faa42b04436602aae8b1c045322e6d603", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca48f54faa42b04436602aae8b1c045322e6d603"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7248b51e34e499f847a479295aae0d1748ff630", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7248b51e34e499f847a479295aae0d1748ff630", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7248b51e34e499f847a479295aae0d1748ff630", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7248b51e34e499f847a479295aae0d1748ff630/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8a7d6cb3d82be44da036f45e244d01cd4f9ab0e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a7d6cb3d82be44da036f45e244d01cd4f9ab0e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a7d6cb3d82be44da036f45e244d01cd4f9ab0e5"}], "stats": {"total": 62, "additions": 40, "deletions": 22}, "files": [{"sha": "ccdfe4dd014bd8cfc345c7efd20898ac9a691b04", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7248b51e34e499f847a479295aae0d1748ff630/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7248b51e34e499f847a479295aae0d1748ff630/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7248b51e34e499f847a479295aae0d1748ff630", "patch": "@@ -1,3 +1,11 @@\n+2003-03-12  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* config/mcore/mcore-elf.h (CPP_PREDEFINES): Replace with\n+\tTARGET_OS_CPP_BUILTINS.\n+\t* config/mcore/mcore-pe.h: Similarly.\n+\t* config/mcore/mcore.h: Replace CPP_PREDEFINES and part of\n+\tCPP_SPEC with TARGET_CPU_CPP_BUILTINS.\n+\n 2003-03-12  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR c/9928"}, {"sha": "b8378591706353f995406c87c540cdecfd8f59f9", "filename": "gcc/config/mcore/mcore-elf.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7248b51e34e499f847a479295aae0d1748ff630/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7248b51e34e499f847a479295aae0d1748ff630/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h?ref=f7248b51e34e499f847a479295aae0d1748ff630", "patch": "@@ -25,7 +25,12 @@ Boston, MA 02111-1307, USA.  */\n /* Run-time Target Specification.  */\n #define TARGET_VERSION fputs (\" (Motorola MCORE/elf)\", stderr)\n \n-#define SUBTARGET_CPP_PREDEFINES \" -D__ELF__\"\n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      builtin_define (\"__ELF__\");\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n \n /* Use DWARF2 debugging info.  */\n #define DWARF2_DEBUGGING_INFO 1"}, {"sha": "96381c97e7bb011454f314e5e0e3dcd233256fdb", "filename": "gcc/config/mcore/mcore-pe.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7248b51e34e499f847a479295aae0d1748ff630/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7248b51e34e499f847a479295aae0d1748ff630/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h?ref=f7248b51e34e499f847a479295aae0d1748ff630", "patch": "@@ -22,7 +22,12 @@ Boston, MA 02111-1307, USA.  */\n /* Run-time Target Specification.  */\n #define TARGET_VERSION fputs (\" (MCORE/pe)\", stderr)\n \n-#define SUBTARGET_CPP_PREDEFINES \" -D__pe__\"\n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      builtin_define (\"__pe__\");\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n \n /* The MCore ABI says that bitfields are unsigned by default.  */\n /* The EPOC C++ environment does not support exceptions.  */"}, {"sha": "d570abf4e4e9b8e3db02d25f4a6572f9152d6c61", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7248b51e34e499f847a479295aae0d1748ff630/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7248b51e34e499f847a479295aae0d1748ff630/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=f7248b51e34e499f847a479295aae0d1748ff630", "patch": "@@ -46,28 +46,28 @@ Boston, MA 02111-1307, USA.  */\n    predefined attributes later on.  This can be solved by using one attribute,\n    say __declspec__, and passing args to it.  The problem with that approach\n    is that args are not accumulated: each new appearance would clobber any\n-   existing args.  XXX- FIXME the definition below relies upon string\n-   concatenation, which is non-portable.  */\n-#define CPP_PREDEFINES \\\n-  \"-D__mcore__ -D__MCORE__=1 -D__declspec(x)=__attribute__((x))\" SUBTARGET_CPP_PREDEFINES\n-\n-/* If -m4align is ever re-enabled then uncomment this line as well:\n-   #define CPP_SPEC \"%{!m4align:-D__MCORE_ALIGN_8__} %{m4align:-D__MCORE__ALIGN_4__}\" */\n-\n-#undef  CPP_SPEC\n-#define CPP_SPEC \"\t\t\t\t\t\t\t\\\n-%{mbig-endian:\t\t\t\t\t\t\t\t\\\n-  %{mlittle-endian:%echoose either big or little endian, not both}\t\\\n-  -D__MCOREBE__}\t\t\t\t\t\t\t\\\n-%{m210:\t\t\t\t\t\t\t\t\t\\\n-  %{m340:%echoose either m340 or m210 not both}\t\t\t\t\\\n-  %{mlittle-endian:%ethe m210 does not have little endian support}\t\\\n-  -D__M210__}\t\t\t\t\t\t\t\t\\\n-%{!mbig-endian: -D__MCORELE__}\t\t\t\t\t\t\\\n-%{!m210: -D__M340__}\t\t\t\t\t\t\t\\\n-\"\n+   existing args.  */\n+#define TARGET_CPU_CPP_BUILTINS()\t\t\t\t\t  \\\n+  do\t\t\t\t\t\t\t\t\t  \\\n+    {\t\t\t\t\t\t\t\t\t  \\\n+      builtin_define (\"__mcore__\");\t\t\t\t\t  \\\n+      builtin_define (\"__MCORE__\");\t\t\t\t\t  \\\n+      builtin_define (\"__declspec(x)=__attribute__((x))\");\t\t  \\\n+      if (TARGET_LITTLE_END)\t\t\t\t\t\t  \\\n+        builtin_define (\"__MCORELE__\");\t\t\t\t\t  \\\n+      else\t\t\t\t\t\t\t\t  \\\n+        builtin_define (\"__MCOREBE__\");\t\t\t\t\t  \\\n+      if (TARGET_M340)\t\t\t\t\t\t\t  \\\n+        builtin_define (\"__M340__\");\t\t\t\t\t  \\\n+      else\t\t\t\t\t\t\t\t  \\\n+        builtin_define (\"__M210__\");\t\t\t\t\t  \\\n+    }\t\t\t\t\t\t\t\t\t  \\\n+  while (0)\n+\n /* If -m4align is ever re-enabled then add this line to the definition of CPP_SPEC\n    %{!m4align:-D__MCORE_ALIGN_8__} %{m4align:-D__MCORE__ALIGN_4__} */\n+#undef CPP_SPEC\n+#define CPP_SPEC \"%{m210:%{mlittle-endian:%ethe m210 does not have little endian support}}\";\n \n /* We don't have a -lg library, so don't put it in the list.  */\n #undef\tLIB_SPEC"}]}