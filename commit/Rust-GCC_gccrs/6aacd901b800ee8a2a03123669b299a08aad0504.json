{"sha": "6aacd901b800ee8a2a03123669b299a08aad0504", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFhY2Q5MDFiODAwZWU4YTJhMDMxMjM2NjliMjk5YTA4YWFkMDUwNA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-07-27T22:02:54Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-07-27T22:02:54Z"}, "message": "Let -Wuninitialized assume built-ins don't change const arguments [PR101584].\n\nPR tree-optimization/101584 - missing -Wuninitialized with an allocated object after a built-in call\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/101584\n\t* tree-ssa-uninit.c (builtin_call_nomodifying_p): New function.\n\t(check_defs): Call it.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/101584\n\t* gcc.dg/uninit-38.c: Remove assertions.\n\t* gcc.dg/uninit-41.c: New test.", "tree": {"sha": "92b704e894cabafe841d622922d28b8ad2dfa540", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92b704e894cabafe841d622922d28b8ad2dfa540"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6aacd901b800ee8a2a03123669b299a08aad0504", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aacd901b800ee8a2a03123669b299a08aad0504", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aacd901b800ee8a2a03123669b299a08aad0504", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aacd901b800ee8a2a03123669b299a08aad0504/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9360d6cd1706882dfffd3c7a08b5956c37207a11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9360d6cd1706882dfffd3c7a08b5956c37207a11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9360d6cd1706882dfffd3c7a08b5956c37207a11"}], "stats": {"total": 227, "additions": 190, "deletions": 37}, "files": [{"sha": "0d70bcd8e985b8af6ca998fd8a24988db82443fe", "filename": "gcc/testsuite/gcc.dg/uninit-38.c", "status": "modified", "additions": 2, "deletions": 37, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aacd901b800ee8a2a03123669b299a08aad0504/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-38.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aacd901b800ee8a2a03123669b299a08aad0504/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-38.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-38.c?ref=6aacd901b800ee8a2a03123669b299a08aad0504", "patch": "@@ -1,5 +1,5 @@\n-/* Verify that dereferencing uninitialized allocated objects and VLAs\n-   correctly reflects offsets into the objects.\n+/* Verify that dereferencing uninitialized VLAs correctly reflects\n+   offsets into the objects.\n    The test's main purpose is to exercise the formatting of MEM_REFs.\n    If -Wuninitialized gets smarter and detects uninitialized accesses\n    before they're turned into MEM_REFs the test will likely need to\n@@ -18,41 +18,6 @@ extern void* malloc (size_t);\n \n void sink (void*, ...);\n \n-#undef T\n-#define T(Type, idx, off)\t\t\t\\\n-  __attribute__ ((noipa))\t\t\t\\\n-  void UNIQ (test_)(int n)\t\t\t\\\n-  {\t\t\t\t\t\t\\\n-    void *p = malloc (n);\t\t\t\\\n-    Type *q = (Type*)((char*)p + off);\t\t\\\n-    sink (p, q[idx]);\t\t\t\t\\\n-  }\t\t\t\t\t\t\\\n-  typedef void dummy_type\n-\n-T (int, 0, 0);      // { dg-warning \"'\\\\*\\\\(int \\\\*\\\\)p' is used uninitialized\" }\n-T (int, 0, 1);      // { dg-warning \"'\\\\*\\\\(int \\\\*\\\\)\\\\(\\\\(char \\\\*\\\\)p \\\\+ 1\\\\)'\" }\n-T (int, 0, 2);      // { dg-warning \"'\\\\*\\\\(int \\\\*\\\\)\\\\(\\\\(char \\\\*\\\\)p \\\\+ 2\\\\)'\" }\n-T (int, 0, 3);      // { dg-warning \"'\\\\*\\\\(int \\\\*\\\\)\\\\(\\\\(char \\\\*\\\\)p \\\\+ 3\\\\)'\" }\n-T (int, 0, 4);      // { dg-warning \"'\\\\(\\\\(int \\\\*\\\\)p\\\\)\\\\\\[1]'\" }\n-T (int, 0, 5);      // { dg-warning \"'\\\\(\\\\(int \\\\*\\\\)\\\\(\\\\(char \\\\*\\\\)p \\\\+ 1\\\\)\\\\)\\\\\\[1]'\" }\n-T (int, 0, 6);      // { dg-warning \"'\\\\(\\\\(int \\\\*\\\\)\\\\(\\\\(char \\\\*\\\\)p \\\\+ 2\\\\)\\\\)\\\\\\[1]'\" }\n-T (int, 0, 7);      // { dg-warning \"'\\\\(\\\\(int \\\\*\\\\)\\\\(\\\\(char \\\\*\\\\)p \\\\+ 3\\\\)\\\\)\\\\\\[1]'\" }\n-T (int, 0, 8);      // { dg-warning \"'\\\\(\\\\(int \\\\*\\\\)p\\\\)\\\\\\[2]'\" }\n-T (int, 0, 9);      // { dg-warning \"'\\\\(\\\\(int \\\\*\\\\)\\\\(\\\\(char \\\\*\\\\)p \\\\+ 1\\\\)\\\\)\\\\\\[2]'\" }\n-\n-\n-T (int, 1, 0);      // { dg-warning \"'\\\\(\\\\(int \\\\*\\\\)p\\\\)\\\\\\[1]' is used uninitialized\" }\n-T (int, 1, 1);      // { dg-warning \"'\\\\(\\\\(int \\\\*\\\\)\\\\(\\\\(char \\\\*\\\\)p \\\\+ 1\\\\)\\\\)\\\\\\[1]'\" }\n-T (int, 1, 2);      // { dg-warning \"'\\\\(\\\\(int \\\\*\\\\)\\\\(\\\\(char \\\\*\\\\)p \\\\+ 2\\\\)\\\\)\\\\\\[1]'\" }\n-T (int, 1, 3);      // { dg-warning \"'\\\\(\\\\(int \\\\*\\\\)\\\\(\\\\(char \\\\*\\\\)p \\\\+ 3\\\\)\\\\)\\\\\\[1]'\" }\n-T (int, 1, 4);      // { dg-warning \"'\\\\(\\\\(int \\\\*\\\\)p\\\\)\\\\\\[2]'\" }\n-T (int, 1, 5);      // { dg-warning \"'\\\\(\\\\(int \\\\*\\\\)\\\\(\\\\(char \\\\*\\\\)p \\\\+ 1\\\\)\\\\)\\\\\\[2]'\" }\n-T (int, 1, 6);      // { dg-warning \"'\\\\(\\\\(int \\\\*\\\\)\\\\(\\\\(char \\\\*\\\\)p \\\\+ 2\\\\)\\\\)\\\\\\[2]'\" }\n-T (int, 1, 7);      // { dg-warning \"'\\\\(\\\\(int \\\\*\\\\)\\\\(\\\\(char \\\\*\\\\)p \\\\+ 3\\\\)\\\\)\\\\\\[2]'\" }\n-T (int, 1, 8);      // { dg-warning \"'\\\\(\\\\(int \\\\*\\\\)p\\\\)\\\\\\[3]'\" }\n-T (int, 1, 9);      // { dg-warning \"'\\\\(\\\\(int \\\\*\\\\)\\\\(\\\\(char \\\\*\\\\)p \\\\+ 1\\\\)\\\\)\\\\\\[3]'\" }\n-\n-#undef T\n #define T(Type, idx, off)\t\t\t\\\n   __attribute__ ((noipa))\t\t\t\\\n   void UNIQ (test_)(int n)\t\t\t\\"}, {"sha": "b485611e994dff5d79d9ff05d133d5c4871047dc", "filename": "gcc/testsuite/gcc.dg/uninit-41.c", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aacd901b800ee8a2a03123669b299a08aad0504/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-41.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aacd901b800ee8a2a03123669b299a08aad0504/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-41.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-41.c?ref=6aacd901b800ee8a2a03123669b299a08aad0504", "patch": "@@ -0,0 +1,121 @@\n+/* Verify that calls to non-modifying built-ins aren't considered\n+   potentially modifying.\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+void* alloca (size_t);\n+void* calloc (size_t, size_t);\n+void* malloc (size_t);\n+int printf (const char *, ...);\n+int scanf (const char *, ...);\n+int sprintf (char *, const char *, ...);\n+int snprintf (char *, size_t, const char *, ...);\n+int puts (const char *);\n+char* strcpy (char*, const char*);\n+size_t strlen (const char*);\n+\n+void noproto ();\n+\n+void sink (int, ...);\n+\n+extern char a[];\n+\n+void nowarn_noproto (const char *fmt)\n+{\n+  int i;\n+  noproto (&i);\n+  sink (i);\n+}\n+\n+void nowarn_scanf (const char *fmt)\n+{\n+  int i;\n+  scanf (\"%i\", &i);\n+  sink (i);\n+}\n+\n+void test_puts_sprintf_alloca (const char *fmt)\n+{\n+  char *p;\n+  {\n+    p = alloca (8);\n+    sprintf (a, fmt, p);                // fmt might contain %n\n+    puts (p);\n+  }\n+\n+  {\n+    p = alloca (8);\n+    snprintf (0, 0, fmt, p);            // same as above\n+    puts (p);\n+  }\n+}\n+\n+void test_puts_alloca (const char *s)\n+{\n+  char *p = alloca (8);\n+\n+  {\n+    char a[] = \"foo\";\n+    puts (a);\n+  }\n+\n+  puts (p);                             // { dg-warning \"-Wuninitialized\" }\n+\n+  {\n+    p = alloca (strlen (s) + 1);\n+    strcpy (p, s);\n+    puts (p);\n+  }\n+\n+  {\n+    /* Verify that the puts() calls above isn't considered to have\n+       potentially modified *P, and same for the one below.  */\n+    p = alloca (strlen (s));\n+    puts (p);                           // { dg-warning \"-Wuninitialized\" }\n+    puts (p + 1);                       // { dg-warning \"-Wuninitialized\" }\n+  }\n+}\n+\n+\n+void test_puts_malloc (const char *s, const char *t)\n+{\n+  char *p;\n+\n+  {\n+    p = malloc (strlen (s) + 1);\n+    strcpy (p, s);\n+    puts (p);\n+  }\n+\n+  {\n+    p = malloc (strlen (t));\n+    puts (p);                           // { dg-warning \"-Wuninitialized\" }\n+  }\n+}\n+\n+\n+void test_puts_vla (const char *s, const char *t)\n+{\n+  {\n+    char a[strlen (s) + 1];\n+    strcpy (a, s);\n+    puts (a);\n+  }\n+\n+  {\n+    char b[strlen (t)];\n+    puts (b);                           // { dg-warning \"-Wuninitialized\" }\n+  }\n+}\n+\n+\n+void test_printf_puts (const char *s)\n+{\n+  char *p = __builtin_malloc (1);\n+\n+  printf (\"%s\", s);\n+\n+  puts (p);                             // { dg-warning \"-Wuninitialized\" }\n+}"}, {"sha": "ab64a680568a0af20c0b0d25fe28ed3d236640f1", "filename": "gcc/tree-ssa-uninit.c", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aacd901b800ee8a2a03123669b299a08aad0504/gcc%2Ftree-ssa-uninit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aacd901b800ee8a2a03123669b299a08aad0504/gcc%2Ftree-ssa-uninit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.c?ref=6aacd901b800ee8a2a03123669b299a08aad0504", "patch": "@@ -219,6 +219,70 @@ struct check_defs_data\n   bool found_may_defs;\n };\n \n+/* Return true if STMT is a call to built-in function all of whose\n+   by-reference arguments are const-qualified (i.e., the function can\n+   be assumed not to modify them).  */\n+\n+static bool\n+builtin_call_nomodifying_p (gimple *stmt)\n+{\n+  if (!gimple_call_builtin_p (stmt, BUILT_IN_NORMAL))\n+    return false;\n+\n+  tree fndecl = gimple_call_fndecl (stmt);\n+  if (!fndecl)\n+    return false;\n+\n+  tree fntype = TREE_TYPE (fndecl);\n+  if (!fntype)\n+    return false;\n+\n+  /* Check the called function's signature for non-constc pointers.\n+     If one is found, return false.  */\n+  unsigned argno = 0;\n+  tree argtype;\n+  function_args_iterator it;\n+  FOREACH_FUNCTION_ARGS (fntype, argtype, it)\n+    {\n+      if (VOID_TYPE_P (argtype))\n+\treturn true;\n+\n+      ++argno;\n+\n+      if (!POINTER_TYPE_P (argtype))\n+\tcontinue;\n+\n+      if (TYPE_READONLY (TREE_TYPE (argtype)))\n+\tcontinue;\n+\n+      return false;\n+    }\n+\n+  /* If the number of actual arguments to the call is less than or\n+     equal to the number of parameters, return false.  */\n+  unsigned nargs = gimple_call_num_args (stmt);\n+  if (nargs <= argno)\n+    return false;\n+\n+  /* Check arguments passed through the ellipsis in calls to variadic\n+     functions for pointers.  If one is found that's a non-constant\n+     pointer, return false.  */\n+  for (; argno < nargs; ++argno)\n+    {\n+      tree arg = gimple_call_arg (stmt, argno);\n+      argtype = TREE_TYPE (arg);\n+      if (!POINTER_TYPE_P (argtype))\n+\tcontinue;\n+\n+      if (TYPE_READONLY (TREE_TYPE (argtype)))\n+\tcontinue;\n+\n+      return false;\n+    }\n+\n+  return true;\n+}\n+\n /* Callback for walk_aliased_vdefs.  */\n \n static bool\n@@ -261,6 +325,9 @@ check_defs (ao_ref *ref, tree vdef, void *data_)\n       return false;\n     }\n \n+  if (builtin_call_nomodifying_p (def_stmt))\n+    return false;\n+\n   /* Found a may-def on this path.  */\n   data->found_may_defs = true;\n   return true;"}]}