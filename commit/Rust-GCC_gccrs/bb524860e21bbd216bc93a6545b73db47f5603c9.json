{"sha": "bb524860e21bbd216bc93a6545b73db47f5603c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI1MjQ4NjBlMjFiYmQyMTZiYzkzYTY1NDViNzNkYjQ3ZjU2MDNjOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@freesoft.cz", "date": "1999-04-13T23:43:07Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-04-13T23:43:07Z"}, "message": "i386.md (xorsi3): Do not output NOT instrctions on Pentium.\n\n        * i386.md (xorsi3): Do not output NOT instrctions on Pentium.\n        (xorqi3): Likewise.\n        (xorhi3): Likewise.\n        (notsi2): Likewise.\n        (notqi2): Likewise.\n        (nothi2): Likewise; do not output prefixed opcodes when possible.\n\nFrom-SVN: r26434", "tree": {"sha": "1ec0cf86c27edba6896ebe158093905623c1e5bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ec0cf86c27edba6896ebe158093905623c1e5bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb524860e21bbd216bc93a6545b73db47f5603c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb524860e21bbd216bc93a6545b73db47f5603c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb524860e21bbd216bc93a6545b73db47f5603c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb524860e21bbd216bc93a6545b73db47f5603c9/comments", "author": null, "committer": null, "parents": [{"sha": "c0b9be67989328e0ad6141537da0fd04972a4317", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0b9be67989328e0ad6141537da0fd04972a4317", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0b9be67989328e0ad6141537da0fd04972a4317"}], "stats": {"total": 96, "additions": 89, "deletions": 7}, "files": [{"sha": "4897998955c4bcc087c584440f4c72f53a21bdd4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb524860e21bbd216bc93a6545b73db47f5603c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb524860e21bbd216bc93a6545b73db47f5603c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb524860e21bbd216bc93a6545b73db47f5603c9", "patch": "@@ -1,5 +1,12 @@\n Wed Apr 14 00:18:22 1999  Jan Hubicka <hubicka@freesoft.cz>\n \n+\t* i386.md (xorsi3): Do not output NOT instrctions on Pentium.\n+\t(xorqi3): Likewise.\n+\t(xorhi3): Likewise.\n+\t(notsi2): Likewise.\n+\t(notqi2): Likewise.\n+\t(nothi2): Likewise; do not output prefixed opcodes when possible.\n+\n \t* i386.md (neghi2): Do not output prefixed opcode when possible.\n \t(ashlhi3): Likewise.\n "}, {"sha": "5ad2c175b7b8c54848cfe377e5dd66558ffc316d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 82, "deletions": 7, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb524860e21bbd216bc93a6545b73db47f5603c9/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb524860e21bbd216bc93a6545b73db47f5603c9/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=bb524860e21bbd216bc93a6545b73db47f5603c9", "patch": "@@ -4525,7 +4525,10 @@ byte_or_operation:\n byte_xor_operation:\n \t    CC_STATUS_INIT;\n \t      \n-\t    if (intval == 0xff)\n+\t    if (intval == 0xff\n+                && (!TARGET_PENTIUM || optimize_size\n+                    || (GET_CODE (operands[0]) == MEM \n+                        && memory_address_length (XEXP (operands[0], 0)) != 0)))\n \t      return AS1 (not%B0,%b0);\n \n \t    if (intval != INTVAL (operands[2]))\n@@ -4541,7 +4544,10 @@ byte_xor_operation:\n \t  if (REG_P (operands[0]))\n \t    {\n \t      CC_STATUS_INIT;\n-\t      if (intval == 0xff)\n+\t      if (intval == 0xff \n+                  && (!TARGET_PENTIUM || optimize_size\n+                      || (GET_CODE (operands[0]) == MEM \n+                          && memory_address_length (XEXP (operands[0], 0)) != 0)))\n \t\treturn AS1 (not%B0,%h0);\n \n \t      operands[2] = GEN_INT (intval);\n@@ -4598,7 +4604,10 @@ byte_xor_operation:\n \t  if (INTVAL (operands[2]) & 0xffff0000)\n \t    operands[2] = GEN_INT (INTVAL (operands[2]) & 0xffff);\n \n-\t  if (INTVAL (operands[2]) == 0xff)\n+\t  if (INTVAL (operands[2]) == 0xff \n+              && (!TARGET_PENTIUM || optimize_size\n+                  || (GET_CODE (operands[0]) == MEM \n+                      && memory_address_length (XEXP (operands[0], 0)) != 0)))\n \t    return AS1 (not%B0,%b0);\n \n \t  return AS2 (xor%B0,%2,%b0);\n@@ -4612,7 +4621,10 @@ byte_xor_operation:\n \t  CC_STATUS_INIT;\n \t  operands[2] = GEN_INT ((INTVAL (operands[2]) >> 8) & 0xff);\n \n-\t  if (INTVAL (operands[2]) == 0xff)\n+\t  if (INTVAL (operands[2]) == 0xff\n+              && (!TARGET_PENTIUM || optimize_size\n+                  || (GET_CODE (operands[0]) == MEM \n+                      && memory_address_length (XEXP (operands[0], 0)) != 0)))\n \t    return AS1 (not%B0,%h0);\n \n \t  return AS2 (xor%B0,%2,%h0);\n@@ -4899,19 +4911,82 @@ byte_xor_operation:\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(not:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")))]\n   \"\"\n-  \"not%L0 %0\")\n+  \"*\n+/* A Pentium NOT is not pariable.  Output it only in case of complex\n+   memory address, because XOR will be inpariable anyway because\n+   of immediate/displacement rule.  */\n+\n+if (TARGET_PENTIUM && !optimize_size\n+    && (GET_CODE (operands[0]) != MEM \n+        || memory_address_length (XEXP (operands[0], 0)) == 0))\n+  {\n+    rtx xops[2];\n+    xops[0] = operands[0];\n+    xops[1] = GEN_INT (0xffffffff);\n+    output_asm_insn (AS2 (xor%L0,%1,%0), xops);\n+    RET;\n+  }\n+else\n+  return AS1 (not%L0,%0);\")\n \n (define_insn \"one_cmplhi2\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(not:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")))]\n   \"\"\n-  \"not%W0 %0\")\n+  \"*\n+/* A Pentium NOT is not pariable.  Output it only in case of complex\n+   memory address, because XOR will be inpariable anyway because\n+   of immediate/displacement rule.  */\n+\n+if (TARGET_PENTIUM && !optimize_size\n+    && (GET_CODE (operands[0]) != MEM \n+        || memory_address_length (XEXP (operands[0], 0)) == 0))\n+  {\n+    rtx xops[2];\n+    xops[0] = operands[0];\n+    xops[1] = GEN_INT (0xffff);\n+    if (REG_P (operands[0])\n+        && i386_cc_probably_useless_p (insn))\n+     {\n+        CC_STATUS_INIT;\n+        output_asm_insn (AS2 (xor%L0,%1,%k0), xops);\n+     }\n+    else\n+      output_asm_insn (AS2 (xor%W0,%1,%0), xops);\n+    RET;\n+  }\n+else\n+  {\n+    if (REG_P (operands[0])\n+        && i386_cc_probably_useless_p (insn))\n+     {\n+        CC_STATUS_INIT;\n+        return AS1 (not%L0,%k0);\n+     }\n+    return AS1 (not%W0,%0);\n+  }\")\n \n (define_insn \"one_cmplqi2\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(not:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")))]\n   \"\"\n-  \"not%B0 %0\")\n+  \"*\n+/* A Pentium NOT is not pariable.  Output it only in case of complex\n+   memory address, because XOR will be inpariable anyway because\n+   of immediate/displacement rule.  */\n+\n+if (TARGET_PENTIUM && !optimize_size\n+    && (GET_CODE (operands[0]) != MEM \n+        || memory_address_length (XEXP (operands[0], 0)) == 0))\n+  {\n+    rtx xops[2];\n+    xops[0] = operands[0];\n+    xops[1] = GEN_INT (0xff);\n+    output_asm_insn (AS2 (xor%B0,%1,%0), xops);\n+    RET;\n+  }\n+else\n+  return AS1 (not%B0,%0);\")\n \f\n ;;- arithmetic shift instructions\n "}]}