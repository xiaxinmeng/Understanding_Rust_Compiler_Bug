{"sha": "56a4b3e249e32274893ced1368c8793b265043ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZhNGIzZTI0OWUzMjI3NDg5M2NlZDEzNjhjODc5M2IyNjUwNDNhYg==", "commit": {"author": {"name": "Guilhem Lavaux", "email": "guilhem@kaffe.org", "date": "2004-09-24T07:35:40Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-09-24T07:35:40Z"}, "message": "2004-09-24  Guilhem Lavaux <guilhem@kaffe.org>\n\n\t* java/net/URL.java\n\t(set): This method now matches the behaviour of the JDK.\n\t(DEFAULT_SEARCH_PATH): Added \"gnu.inet\".\n\nFrom-SVN: r88016", "tree": {"sha": "c6b9c7bb7b3ba809190cb127aa150cd7c22286f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6b9c7bb7b3ba809190cb127aa150cd7c22286f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56a4b3e249e32274893ced1368c8793b265043ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56a4b3e249e32274893ced1368c8793b265043ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56a4b3e249e32274893ced1368c8793b265043ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56a4b3e249e32274893ced1368c8793b265043ab/comments", "author": null, "committer": null, "parents": [{"sha": "5bb3fc271351cc0e0d99f85bf0a491078352e81f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bb3fc271351cc0e0d99f85bf0a491078352e81f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bb3fc271351cc0e0d99f85bf0a491078352e81f"}], "stats": {"total": 48, "additions": 31, "deletions": 17}, "files": [{"sha": "011bae2b973f22398cd3a2580a2fb0e154969fd2", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a4b3e249e32274893ced1368c8793b265043ab/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a4b3e249e32274893ced1368c8793b265043ab/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=56a4b3e249e32274893ced1368c8793b265043ab", "patch": "@@ -1,3 +1,9 @@\n+2004-09-24  Guilhem Lavaux <guilhem@kaffe.org>\n+\n+\t* java/net/URL.java\n+\t(set): This method now matches the behaviour of the JDK.\n+\t(DEFAULT_SEARCH_PATH): Added \"gnu.inet\".\n+\n 2004-09-24  Guilhem Lavaux  <guilhem@kaffe.org>\n \n \t* java/net/URL.java (URL): Delete whitespaces in the protocol string."}, {"sha": "71e43583736ca569c46d4ae7030760a8c5c7521f", "filename": "libjava/java/net/URL.java", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a4b3e249e32274893ced1368c8793b265043ab/libjava%2Fjava%2Fnet%2FURL.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a4b3e249e32274893ced1368c8793b265043ab/libjava%2Fjava%2Fnet%2FURL.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURL.java?ref=56a4b3e249e32274893ced1368c8793b265043ab", "patch": "@@ -122,7 +122,7 @@\n public final class URL implements Serializable\n {\n   private static final String DEFAULT_SEARCH_PATH =\n-    \"gnu.java.net.protocol|sun.net.www.protocol\";\n+    \"gnu.java.net.protocol|gnu.inet\";\n \n   /**\n    * The name of the protocol for this URL.\n@@ -535,6 +535,8 @@ public String getFile()\n    */\n   public String getPath()\n   {\n+    // The spec says we need to return an empty string, but some\n+    // applications depends on receiving null when the path is empty.\n     if (file == null)\n       return null;\n     int quest = file.indexOf('?');\n@@ -694,7 +696,8 @@ public boolean sameFile(URL url)\n    * Sets the specified fields of the URL. This is not a public method so\n    * that only URLStreamHandlers can modify URL fields. This might be called\n    * by the <code>parseURL()</code> method in that class. URLs are otherwise\n-   * constant.\n+   * constant. If the given protocol does not exist, it will keep the previously\n+   * set protocol.\n    *\n    * @param protocol The protocol name for this URL\n    * @param host The hostname or IP address for this URL\n@@ -705,14 +708,16 @@ public boolean sameFile(URL url)\n   protected void set(String protocol, String host, int port, String file,\n                      String ref)\n   {\n-    // TBD: Theoretically, a poorly written StreamHandler could pass an\n-    // invalid protocol.  It will cause the handler to be set to null\n-    // thus overriding a valid handler.  Callers of this method should\n-    // be aware of this.\n-    protocol = protocol.toLowerCase ();\n-    if (! this.protocol.equals (protocol))\n+    URLStreamHandler protocolHandler = null;\n+    protocol = protocol.toLowerCase();\n+    if (! this.protocol.equals(protocol))\n+      protocolHandler = getURLStreamHandler(protocol);\n+    \n+    // It is an hidden feature of the JDK. If the protocol does not exist,\n+    // we keep the previously initialized protocol.\n+    if (protocolHandler != null)\n       {\n-\tthis.ph = getURLStreamHandler(protocol);\n+\tthis.ph = protocolHandler;\n \tthis.protocol = protocol;\n       }\n     this.authority = \"\";\n@@ -732,7 +737,8 @@ protected void set(String protocol, String host, int port, String file,\n   /**\n    * Sets the specified fields of the URL. This is not a public method so\n    * that only URLStreamHandlers can modify URL fields. URLs are otherwise\n-   * constant.\n+   * constant. If the given protocol does not exist, it will keep the previously\n+   * set protocol.\n    *\n    * @param protocol The protocol name for this URL.\n    * @param host The hostname or IP address for this URL.\n@@ -748,14 +754,16 @@ protected void set(String protocol, String host, int port, String file,\n   protected void set(String protocol, String host, int port, String authority,\n                      String userInfo, String path, String query, String ref)\n   {\n-    // TBD: Theoretically, a poorly written StreamHandler could pass an\n-    // invalid protocol.  It will cause the handler to be set to null\n-    // thus overriding a valid handler.  Callers of this method should\n-    // be aware of this.\n-    protocol = protocol.toLowerCase ();\n-    if (! this.protocol.equals (protocol))\n+    URLStreamHandler protocolHandler = null;\n+    protocol = protocol.toLowerCase();\n+    if (! this.protocol.equals(protocol))\n+      protocolHandler = getURLStreamHandler(protocol);\n+    \n+    // It is an hidden feature of the JDK. If the protocol does not exist,\n+    // we keep the previously initialized protocol.\n+    if (protocolHandler != null)\n       {\n-\tthis.ph = getURLStreamHandler(protocol);\n+\tthis.ph = protocolHandler;\n \tthis.protocol = protocol;\n       }\n     this.host = host;"}]}