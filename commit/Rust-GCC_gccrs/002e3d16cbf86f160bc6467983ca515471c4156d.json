{"sha": "002e3d16cbf86f160bc6467983ca515471c4156d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAyZTNkMTZjYmY4NmYxNjBiYzY0Njc5ODNjYTUxNTQ3MWM0MTU2ZA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2016-07-04T10:03:34Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-07-04T10:03:34Z"}, "message": "freeze.adb (Check_Inherited_Conditions): Perform two passes over the primitive operations of the type...\n\n2016-07-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* freeze.adb (Check_Inherited_Conditions): Perform two passes over\n\tthe primitive operations of the type: one over source overridings\n\tto build the primitives mapping, and one over inherited operations\n\tto check for the need to create wrappers, and to check legality\n\tof inherited condition in SPARK.\n\t* sem_prag.ads (Update_Primitive_Mapping): Make public, for use\n\tin freeze actions.\n\t* sem_prag.adb (Build_Pragma_Check_Equivalent): Refine error\n\tmessage in the case of an inherited condition in SPARK that\n\tincludes a call to some other overriding primitive.\n\nFrom-SVN: r237960", "tree": {"sha": "7e114335e52346e0606bbed08edca8aaef5be224", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e114335e52346e0606bbed08edca8aaef5be224"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/002e3d16cbf86f160bc6467983ca515471c4156d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/002e3d16cbf86f160bc6467983ca515471c4156d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/002e3d16cbf86f160bc6467983ca515471c4156d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/002e3d16cbf86f160bc6467983ca515471c4156d/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "10edebe7b49ee1903bca94e03d4cf9c8194c3905", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10edebe7b49ee1903bca94e03d4cf9c8194c3905", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10edebe7b49ee1903bca94e03d4cf9c8194c3905"}], "stats": {"total": 90, "additions": 67, "deletions": 23}, "files": [{"sha": "6784eb24502e46ee84e31de4cd7faf98db63fbff", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002e3d16cbf86f160bc6467983ca515471c4156d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002e3d16cbf86f160bc6467983ca515471c4156d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=002e3d16cbf86f160bc6467983ca515471c4156d", "patch": "@@ -1,3 +1,16 @@\n+2016-07-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* freeze.adb (Check_Inherited_Conditions): Perform two passes over\n+\tthe primitive operations of the type: one over source overridings\n+\tto build the primitives mapping, and one over inherited operations\n+\tto check for the need to create wrappers, and to check legality\n+\tof inherited condition in SPARK.\n+\t* sem_prag.ads (Update_Primitive_Mapping): Make public, for use\n+\tin freeze actions.\n+\t* sem_prag.adb (Build_Pragma_Check_Equivalent): Refine error\n+\tmessage in the case of an inherited condition in SPARK that\n+\tincludes a call to some other overriding primitive.\n+\n 2016-07-04  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_aggr.adb (Ctrl_Init_Expression): New routine."}, {"sha": "b9d70c416c9dcf1fb13a8548105da90e8a97bc9f", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002e3d16cbf86f160bc6467983ca515471c4156d/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002e3d16cbf86f160bc6467983ca515471c4156d/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=002e3d16cbf86f160bc6467983ca515471c4156d", "patch": "@@ -1403,24 +1403,39 @@ package body Freeze is\n       while Present (Op_Node) loop\n          Prim := Node (Op_Node);\n \n-         --  In SPARK mode this is where we can collect the inherited\n-         --  conditions, because we do not create the Check pragmas that\n-         --  normally convey the modified classwide conditions on overriding\n-         --  operations.\n-\n-         if SPARK_Mode = On\n-           and then Comes_From_Source (Prim)\n-           and then Present (Overridden_Operation (Prim))\n+         --  Map the overridden primitive to the overriding one. This\n+         --  takes care of all overridings and is done only once.\n+\n+         if Present (Overridden_Operation (Prim))\n+            and then Comes_From_Source (Prim)\n          then\n-            Collect_Inherited_Class_Wide_Conditions (Prim);\n+            Update_Primitives_Mapping (Overridden_Operation (Prim), Prim);\n+\n+            --  In SPARK mode this is where we can collect the inherited\n+            --  conditions, because we do not create the Check pragmas that\n+            --  normally convey the the modified classwide conditions on\n+            --  overriding operations.\n+\n+            if SPARK_Mode = On then\n+               Collect_Inherited_Class_Wide_Conditions (Prim);\n+            end if;\n          end if;\n \n-         --  In normal mode, we examine inherited operations to check whether\n-         --  they require a wrapper to handle inherited conditions that call\n-         --  other primitives.\n-         --  Wrapper construction TBD.\n+         Next_Elmt (Op_Node);\n+      end loop;\n+\n+      --  In all cases, we examine inherited operations to check whether they\n+      --  require a wrapper to handle inherited conditions that call other\n+      --  primitives, so that LSP can be verified/enforced.\n+\n+      --  Wrapper construction TBD.\n \n-         if not Comes_From_Source (Prim) and then Present (Alias (Prim)) then\n+      Op_Node := First_Elmt (Prim_Ops);\n+      while Present (Op_Node) loop\n+         Prim := Node (Op_Node);\n+         if not Comes_From_Source (Prim)\n+           and then Present (Alias (Prim))\n+         then\n             Par_Prim := Alias (Prim);\n             A_Pre    := Find_Aspect (Par_Prim, Aspect_Pre);\n "}, {"sha": "90d00fca9a1ea31156e30174966770a8a21ab872", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002e3d16cbf86f160bc6467983ca515471c4156d/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002e3d16cbf86f160bc6467983ca515471c4156d/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=002e3d16cbf86f160bc6467983ca515471c4156d", "patch": "@@ -322,13 +322,6 @@ package body Sem_Prag is\n    --  pragma. Entity name for unit and its parents is taken from item in\n    --  previous with_clause that mentions the unit.\n \n-   procedure Update_Primitives_Mapping\n-     (Inher_Id : Entity_Id;\n-      Subp_Id  : Entity_Id);\n-   --  Map primitive operations of the parent type to the corresponding\n-   --  operations of the descendant. Note that the descendant type may\n-   --  not be frozen yet, so we cannot use the dispatch table directly.\n-\n    Dummy : Integer := 0;\n    pragma Volatile (Dummy);\n    --  Dummy volatile integer used in bodies of ip/rv to prevent optimization\n@@ -26380,13 +26373,25 @@ package body Sem_Prag is\n                     (\"cannot call abstract subprogram in inherited condition \"\n                       & \"for&#\", N, Current_Scope);\n \n+               --  In SPARK mode, reject an inherited condition for an\n+               --  inherited operation if it contains a call to an overriding\n+               --  operation, because this implies that the pre/postcondition\n+               --  of the inherited operation have changed silently.\n+\n                elsif SPARK_Mode = On\n                  and then Warn_On_Suspicious_Contract\n                  and then Present (Alias (Subp))\n+                 and then Present (New_E)\n+                 and then Comes_From_Source (New_E)\n                then\n+                  Error_Msg_N\n+                    (\"cannot modify inherited condition (SPARK RM 6.1.1(1))\",\n+                      Parent (Subp));\n+                  Error_Msg_Sloc := Sloc (New_E);\n+                  Error_Msg_Node_2 := Subp;\n                   Error_Msg_NE\n-                    (\"?inherited condition is modified, build a wrapper \"\n-                     & \"for&\", Parent (Subp), Subp);\n+                    (\"\\overriding of&# forces overriding of&\",\n+                     Parent (Subp), New_E);\n                end if;\n             end if;\n "}, {"sha": "8613bba1831a64845fc99fe73bc26c528c4cd3a4", "filename": "gcc/ada/sem_prag.ads", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002e3d16cbf86f160bc6467983ca515471c4156d/gcc%2Fada%2Fsem_prag.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002e3d16cbf86f160bc6467983ca515471c4156d/gcc%2Fada%2Fsem_prag.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.ads?ref=002e3d16cbf86f160bc6467983ca515471c4156d", "patch": "@@ -528,4 +528,15 @@ package Sem_Prag is\n    --\n    --    Empty if there is no such argument\n \n+   procedure Update_Primitives_Mapping\n+     (Inher_Id : Entity_Id;\n+      Subp_Id  : Entity_Id);\n+\n+   --  map primitive operations of the parent type to the corresponding\n+   --  operations of the descendant. note that the descendant type may\n+   --  not be frozen yet, so we cannot use the dispatch table directly.\n+   --  This is called when elaborating a contract for a subprogram, and\n+   --  when freezing a type extension to verify legality rules on inherited\n+   --  conditions.\n+\n end Sem_Prag;"}]}