{"sha": "0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825", "node_id": "C_kwDOANBUbNoAKDBlY2QwZjFjYzZmOGYzYmE4MTg5NDZhNDJiMjJjMmFiNjFmNDY4MjU", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2021-12-03T17:50:56Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2022-10-11T07:31:07Z"}, "message": "Generic configury support for shared libs on VxWorks\n\nThis change adds the configury bits to activate the build of\nshared libs on VxWorks ports configured with --enable-shared,\nfor libraries variants where this is generally supported (rtp,\ncode model !large - currently not compatible with -fPIC).\n\nSet lt_cv_deplibs_check_method in libtool.m4, so the build of\nlibraries know how to establish dependencies.  This is useful in\nconfigurations such as aarch64 where proper support of LSE relies\non accurate dependency information between libstdc++ and libgcc_s\nto begin with.\n\nRegenerate configure scripts to reflect libtool.m4 change.\n\n2022-10-09  Olivier Hainque  <hainque@adacore.com>\n\n\t* libtool.m4 (*vxworks*): When enable_shared, set dynamic_linker\n\tand friends for rtp !large. Assume the linker has the required\n\tabilities and set lt_cv_deplibs_check_method.\n\ngcc/\n\t* config.gcc (*vxworks*): Add t-slibgcc fragment\n\tif enable_shared.\n\nlibgcc/\n\t* config.host (*vxworks*): When enable_shared, add\n\tlibgcc and crtstuff \"shared\" fragments for rtp except\n\tlarge code model.\n\t(aarch64*-wrs-vxworks7*): Remove t-slibgcc-libgcc from\n\tthe list of fragments.\n\n2022-10-09  Olivier Hainque  <hainque@adacore.com>\n\ngcc/\n\t* configure: Regenerate.\n\nlibatomic/\n\t* configure: Regenerate.\n\nlibbacktrace/\n\t* configure: Regenerate.\n\nlibcc1/\n\t* configure: Regenerate.\n\nlibffi/\n\t* configure: Regenerate.\n\nlibgfortran/\n\t* configure: Regenerate.\n\nlibgomp/\n\t* configure: Regenerate.\n\nlibitm/\n\t* configure: Regenerate.\n\nlibobjc/\n\t* configure: Regenerate.\n\nliboffloadmic/\n\t* configure: Regenerate.\n\nliboffloadmic/\n\t* plugin/configure: Regenerate.\n\nlibphobos/\n\t* configure: Regenerate.\n\nlibquadmath/\n\t* configure: Regenerate.\n\nlibsanitizer/\n\t* configure: Regenerate.\n\nlibssp/\n\t* configure: Regenerate.\n\nlibstdc++-v3/\n\t* configure: Regenerate.\n\nlibvtv/\n\t* configure: Regenerate.\n\nlto-plugin/\n\t* configure: Regenerate.\n\nzlib/\n\t* configure: Regenerate.", "tree": {"sha": "ad111c740ba0474c72fe2b99df1ac034a995ece0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad111c740ba0474c72fe2b99df1ac034a995ece0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46325c16324b06fa1b3ea7f8cb05f2109ed66cf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46325c16324b06fa1b3ea7f8cb05f2109ed66cf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46325c16324b06fa1b3ea7f8cb05f2109ed66cf6"}], "stats": {"total": 779, "additions": 758, "deletions": 21}, "files": [{"sha": "8d5972fecf7ad0f325ccdf09be37a5c26a681c60", "filename": "gcc/config.gcc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825", "patch": "@@ -5518,6 +5518,15 @@ case \"${target}\" in\n \t\t;;\n esac\n \n+# VxWorks support for shared libraries has to be requested explicitly,\n+# so we can factor this part here:\n+\n+case \"${target}-${enable_shared}\" in\n+  *-*-vxworks*-yes)\n+    tmake_file=\"${tmake_file} t-slibgcc\"\n+    ;;\n+esac\n+\n # Targets for which there is at least one VxWorks port should include\n # vxworks-dummy.h to allow safe references to various TARGET_VXWORKS kinds\n # of markers from other files in the port, including the vxworks*.h files to"}, {"sha": "db366817cd070ff6184fe2f2f122f5671a67a7c3", "filename": "gcc/configure", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825", "patch": "@@ -14737,6 +14737,11 @@ sysv4 | sysv4.3*)\n tpf*)\n   lt_cv_deplibs_check_method=pass_all\n   ;;\n+vxworks*)\n+  # Assume VxWorks cross toolchains are built on Linux, possibly\n+  # as canadian for Windows hosts.\n+  lt_cv_deplibs_check_method=pass_all\n+  ;;\n esac\n \n fi\n@@ -19248,6 +19253,25 @@ uts4*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n+# Shared libraries for VwWorks, >= 7 only at this stage\n+# and (fpic) still incompatible with \"large\" code models\n+# in a few configurations. Only for RTP mode in any case,\n+# and upon explicit request at configure time.\n+vxworks7*)\n+  dynamic_linker=no\n+  case ${with_multisubdir}-${enable_shared} in\n+    *large*)\n+      ;;\n+    *mrtp*-yes)\n+      version_type=linux\n+      need_lib_prefix=no\n+      need_version=no\n+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n+      soname_spec='${libname}${release}${shared_ext}$major'\n+      dynamic_linker=\"$host_os module_loader\"\n+      ;;\n+  esac\n+  ;;\n *)\n   dynamic_linker=no\n   ;;\n@@ -21354,8 +21378,9 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n         ;;\n \n       vxworks*)\n-        # FIXME: insert proper C++ library support\n-        ld_shlibs_CXX=no\n+        # For VxWorks ports, we assume the use of a GNU linker with\n+        # standard elf conventions.\n+        ld_shlibs_CXX=yes\n         ;;\n \n       *)\n@@ -22903,6 +22928,25 @@ uts4*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n+# Shared libraries for VwWorks, >= 7 only at this stage\n+# and (fpic) still incompatible with \"large\" code models\n+# in a few configurations. Only for RTP mode in any case,\n+# and upon explicit request at configure time.\n+vxworks7*)\n+  dynamic_linker=no\n+  case ${with_multisubdir}-${enable_shared} in\n+    *large*)\n+      ;;\n+    *mrtp*-yes)\n+      version_type=linux\n+      need_lib_prefix=no\n+      need_version=no\n+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n+      soname_spec='${libname}${release}${shared_ext}$major'\n+      dynamic_linker=\"$host_os module_loader\"\n+      ;;\n+  esac\n+  ;;\n *)\n   dynamic_linker=no\n   ;;"}, {"sha": "69e6b823ce58d881ca0cd52ee334dfb1bd44cc7b", "filename": "libatomic/configure", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/libatomic%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/libatomic%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Fconfigure?ref=0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825", "patch": "@@ -6161,6 +6161,11 @@ sysv4 | sysv4.3*)\n tpf*)\n   lt_cv_deplibs_check_method=pass_all\n   ;;\n+vxworks*)\n+  # Assume VxWorks cross toolchains are built on Linux, possibly\n+  # as canadian for Windows hosts.\n+  lt_cv_deplibs_check_method=pass_all\n+  ;;\n esac\n \n fi\n@@ -10941,6 +10946,25 @@ uts4*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n+# Shared libraries for VwWorks, >= 7 only at this stage\n+# and (fpic) still incompatible with \"large\" code models\n+# in a few configurations. Only for RTP mode in any case,\n+# and upon explicit request at configure time.\n+vxworks7*)\n+  dynamic_linker=no\n+  case ${with_multisubdir}-${enable_shared} in\n+    *large*)\n+      ;;\n+    *mrtp*-yes)\n+      version_type=linux\n+      need_lib_prefix=no\n+      need_version=no\n+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n+      soname_spec='${libname}${release}${shared_ext}$major'\n+      dynamic_linker=\"$host_os module_loader\"\n+      ;;\n+  esac\n+  ;;\n *)\n   dynamic_linker=no\n   ;;"}, {"sha": "4e0987258e851e6cba9b1a3d9a3f8fa85e870768", "filename": "libbacktrace/configure", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/libbacktrace%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/libbacktrace%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fconfigure?ref=0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825", "patch": "@@ -6558,6 +6558,11 @@ sysv4 | sysv4.3*)\n tpf*)\n   lt_cv_deplibs_check_method=pass_all\n   ;;\n+vxworks*)\n+  # Assume VxWorks cross toolchains are built on Linux, possibly\n+  # as canadian for Windows hosts.\n+  lt_cv_deplibs_check_method=pass_all\n+  ;;\n esac\n \n fi\n@@ -11070,6 +11075,25 @@ uts4*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n+# Shared libraries for VwWorks, >= 7 only at this stage\n+# and (fpic) still incompatible with \"large\" code models\n+# in a few configurations. Only for RTP mode in any case,\n+# and upon explicit request at configure time.\n+vxworks7*)\n+  dynamic_linker=no\n+  case ${with_multisubdir}-${enable_shared} in\n+    *large*)\n+      ;;\n+    *mrtp*-yes)\n+      version_type=linux\n+      need_lib_prefix=no\n+      need_version=no\n+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n+      soname_spec='${libname}${release}${shared_ext}$major'\n+      dynamic_linker=\"$host_os module_loader\"\n+      ;;\n+  esac\n+  ;;\n *)\n   dynamic_linker=no\n   ;;"}, {"sha": "2801e6c2ad097e14b6e1e5632a582ee82ae42ed3", "filename": "libcc1/configure", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/libcc1%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/libcc1%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Fconfigure?ref=0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825", "patch": "@@ -5825,6 +5825,11 @@ sysv4 | sysv4.3*)\n tpf*)\n   lt_cv_deplibs_check_method=pass_all\n   ;;\n+vxworks*)\n+  # Assume VxWorks cross toolchains are built on Linux, possibly\n+  # as canadian for Windows hosts.\n+  lt_cv_deplibs_check_method=pass_all\n+  ;;\n esac\n \n fi\n@@ -10336,6 +10341,25 @@ uts4*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n+# Shared libraries for VwWorks, >= 7 only at this stage\n+# and (fpic) still incompatible with \"large\" code models\n+# in a few configurations. Only for RTP mode in any case,\n+# and upon explicit request at configure time.\n+vxworks7*)\n+  dynamic_linker=no\n+  case ${with_multisubdir}-${enable_shared} in\n+    *large*)\n+      ;;\n+    *mrtp*-yes)\n+      version_type=linux\n+      need_lib_prefix=no\n+      need_version=no\n+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n+      soname_spec='${libname}${release}${shared_ext}$major'\n+      dynamic_linker=\"$host_os module_loader\"\n+      ;;\n+  esac\n+  ;;\n *)\n   dynamic_linker=no\n   ;;\n@@ -12848,8 +12872,9 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n         ;;\n \n       vxworks*)\n-        # FIXME: insert proper C++ library support\n-        ld_shlibs_CXX=no\n+        # For VxWorks ports, we assume the use of a GNU linker with\n+        # standard elf conventions.\n+        ld_shlibs_CXX=yes\n         ;;\n \n       *)\n@@ -14397,6 +14422,25 @@ uts4*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n+# Shared libraries for VwWorks, >= 7 only at this stage\n+# and (fpic) still incompatible with \"large\" code models\n+# in a few configurations. Only for RTP mode in any case,\n+# and upon explicit request at configure time.\n+vxworks7*)\n+  dynamic_linker=no\n+  case ${with_multisubdir}-${enable_shared} in\n+    *large*)\n+      ;;\n+    *mrtp*-yes)\n+      version_type=linux\n+      need_lib_prefix=no\n+      need_version=no\n+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n+      soname_spec='${libname}${release}${shared_ext}$major'\n+      dynamic_linker=\"$host_os module_loader\"\n+      ;;\n+  esac\n+  ;;\n *)\n   dynamic_linker=no\n   ;;"}, {"sha": "523fa66c83e9900d70413504f4be8d6349471056", "filename": "libffi/configure", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/libffi%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/libffi%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fconfigure?ref=0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825", "patch": "@@ -6351,6 +6351,11 @@ sysv4 | sysv4.3*)\n tpf*)\n   lt_cv_deplibs_check_method=pass_all\n   ;;\n+vxworks*)\n+  # Assume VxWorks cross toolchains are built on Linux, possibly\n+  # as canadian for Windows hosts.\n+  lt_cv_deplibs_check_method=pass_all\n+  ;;\n esac\n \n fi\n@@ -11131,6 +11136,25 @@ uts4*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n+# Shared libraries for VwWorks, >= 7 only at this stage\n+# and (fpic) still incompatible with \"large\" code models\n+# in a few configurations. Only for RTP mode in any case,\n+# and upon explicit request at configure time.\n+vxworks7*)\n+  dynamic_linker=no\n+  case ${with_multisubdir}-${enable_shared} in\n+    *large*)\n+      ;;\n+    *mrtp*-yes)\n+      version_type=linux\n+      need_lib_prefix=no\n+      need_version=no\n+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n+      soname_spec='${libname}${release}${shared_ext}$major'\n+      dynamic_linker=\"$host_os module_loader\"\n+      ;;\n+  esac\n+  ;;\n *)\n   dynamic_linker=no\n   ;;\n@@ -13237,8 +13261,9 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n         ;;\n \n       vxworks*)\n-        # FIXME: insert proper C++ library support\n-        ld_shlibs_CXX=no\n+        # For VxWorks ports, we assume the use of a GNU linker with\n+        # standard elf conventions.\n+        ld_shlibs_CXX=yes\n         ;;\n \n       *)\n@@ -14786,6 +14811,25 @@ uts4*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n+# Shared libraries for VwWorks, >= 7 only at this stage\n+# and (fpic) still incompatible with \"large\" code models\n+# in a few configurations. Only for RTP mode in any case,\n+# and upon explicit request at configure time.\n+vxworks7*)\n+  dynamic_linker=no\n+  case ${with_multisubdir}-${enable_shared} in\n+    *large*)\n+      ;;\n+    *mrtp*-yes)\n+      version_type=linux\n+      need_lib_prefix=no\n+      need_version=no\n+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n+      soname_spec='${libname}${release}${shared_ext}$major'\n+      dynamic_linker=\"$host_os module_loader\"\n+      ;;\n+  esac\n+  ;;\n *)\n   dynamic_linker=no\n   ;;"}, {"sha": "0fbf9a34f17ac1a658891431d3dfcfa9911e94ec", "filename": "libgcc/config.host", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825", "patch": "@@ -410,7 +410,7 @@ aarch64*-*-vxworks7*)\n \textra_parts=\"$extra_parts crtfastmath.o\"\n \tmd_unwind_header=aarch64/aarch64-unwind.h\n \ttmake_file=\"${tmake_file} ${cpu_type}/t-aarch64\"\n-\ttmake_file=\"${tmake_file} ${cpu_type}/t-lse t-slibgcc-libgcc\"\n+\ttmake_file=\"${tmake_file} ${cpu_type}/t-lse\"\n \ttmake_file=\"${tmake_file} ${cpu_type}/t-softfp t-softfp t-crtfm\"\n \ttmake_file=\"${tmake_file} t-dfprules\"\n \t;;\n@@ -1549,6 +1549,35 @@ aarch64*-*-*)\n \t;;\n esac\n \n+# Setup to build a shared libgcc for VxWorks when that was requested,\n+# for library variants that support it (rtp only, code model not large).\n+#\n+\n+case ${host} in\n+*vxworks*)\n+\tcase ${with_multisubdir}-${enable_shared} in\n+\t*large*)\n+\t\t;;\n+\t*mrtp*-yes)\n+\t\ttmake_file=\"${tmake_file} t-libgcc-pic\"\n+\n+\t\t# Arrange to set a soname on libgcc_s so DT_NEEDED entries\n+\t\t# for it refer to that alone. This ensures absence of path\n+\t\t# components which would be incorrect as the runtime loader\n+\t\t# on target has no visibility over the host filesystem.\n+\t\ttmake_file=\"${tmake_file} t-slibgcc-gld-nover\"\n+\t\ttmake_file=\"${tmake_file} t-slibgcc\"\n+\n+\t\t# t-slibgcc-libgcc is needed on at least aarch64 (for\n+\t\t# lse) and at most harmless on other targets.\n+\t\ttmake_file=\"${tmake_file} t-slibgcc-libgcc\"\n+\n+\t\ttmake_file=\"${tmake_file} t-crtstuff-pic t-vxcrtstuffS\"\n+\t\t;;\n+\tesac\n+\t;;\n+esac\n+\n # The vxworks threads implementation relies on a few extra sources,\n # which we arrange to add after everything else:\n "}, {"sha": "bac967fc2289f60bf22c325f4e8064f486faf02a", "filename": "libgfortran/configure", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825", "patch": "@@ -7783,6 +7783,11 @@ sysv4 | sysv4.3*)\n tpf*)\n   lt_cv_deplibs_check_method=pass_all\n   ;;\n+vxworks*)\n+  # Assume VxWorks cross toolchains are built on Linux, possibly\n+  # as canadian for Windows hosts.\n+  lt_cv_deplibs_check_method=pass_all\n+  ;;\n esac\n \n fi\n@@ -12311,6 +12316,25 @@ uts4*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n+# Shared libraries for VwWorks, >= 7 only at this stage\n+# and (fpic) still incompatible with \"large\" code models\n+# in a few configurations. Only for RTP mode in any case,\n+# and upon explicit request at configure time.\n+vxworks7*)\n+  dynamic_linker=no\n+  case ${with_multisubdir}-${enable_shared} in\n+    *large*)\n+      ;;\n+    *mrtp*-yes)\n+      version_type=linux\n+      need_lib_prefix=no\n+      need_version=no\n+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n+      soname_spec='${libname}${release}${shared_ext}$major'\n+      dynamic_linker=\"$host_os module_loader\"\n+      ;;\n+  esac\n+  ;;\n *)\n   dynamic_linker=no\n   ;;\n@@ -16075,6 +16099,25 @@ uts4*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n+# Shared libraries for VwWorks, >= 7 only at this stage\n+# and (fpic) still incompatible with \"large\" code models\n+# in a few configurations. Only for RTP mode in any case,\n+# and upon explicit request at configure time.\n+vxworks7*)\n+  dynamic_linker=no\n+  case ${with_multisubdir}-${enable_shared} in\n+    *large*)\n+      ;;\n+    *mrtp*-yes)\n+      version_type=linux\n+      need_lib_prefix=no\n+      need_version=no\n+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n+      soname_spec='${libname}${release}${shared_ext}$major'\n+      dynamic_linker=\"$host_os module_loader\"\n+      ;;\n+  esac\n+  ;;\n *)\n   dynamic_linker=no\n   ;;"}, {"sha": "c4d54f0a8340b47e126203caa06af0d380348d9f", "filename": "libgomp/configure", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/libgomp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/libgomp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure?ref=0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825", "patch": "@@ -6173,6 +6173,11 @@ sysv4 | sysv4.3*)\n tpf*)\n   lt_cv_deplibs_check_method=pass_all\n   ;;\n+vxworks*)\n+  # Assume VxWorks cross toolchains are built on Linux, possibly\n+  # as canadian for Windows hosts.\n+  lt_cv_deplibs_check_method=pass_all\n+  ;;\n esac\n \n fi\n@@ -10953,6 +10958,25 @@ uts4*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n+# Shared libraries for VwWorks, >= 7 only at this stage\n+# and (fpic) still incompatible with \"large\" code models\n+# in a few configurations. Only for RTP mode in any case,\n+# and upon explicit request at configure time.\n+vxworks7*)\n+  dynamic_linker=no\n+  case ${with_multisubdir}-${enable_shared} in\n+    *large*)\n+      ;;\n+    *mrtp*-yes)\n+      version_type=linux\n+      need_lib_prefix=no\n+      need_version=no\n+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n+      soname_spec='${libname}${release}${shared_ext}$major'\n+      dynamic_linker=\"$host_os module_loader\"\n+      ;;\n+  esac\n+  ;;\n *)\n   dynamic_linker=no\n   ;;\n@@ -14587,6 +14611,25 @@ uts4*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n+# Shared libraries for VwWorks, >= 7 only at this stage\n+# and (fpic) still incompatible with \"large\" code models\n+# in a few configurations. Only for RTP mode in any case,\n+# and upon explicit request at configure time.\n+vxworks7*)\n+  dynamic_linker=no\n+  case ${with_multisubdir}-${enable_shared} in\n+    *large*)\n+      ;;\n+    *mrtp*-yes)\n+      version_type=linux\n+      need_lib_prefix=no\n+      need_version=no\n+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n+      soname_spec='${libname}${release}${shared_ext}$major'\n+      dynamic_linker=\"$host_os module_loader\"\n+      ;;\n+  esac\n+  ;;\n *)\n   dynamic_linker=no\n   ;;"}, {"sha": "3700ae44de24dacb783a5811c4174397d33141af", "filename": "libitm/configure", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/libitm%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/libitm%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfigure?ref=0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825", "patch": "@@ -6836,6 +6836,11 @@ sysv4 | sysv4.3*)\n tpf*)\n   lt_cv_deplibs_check_method=pass_all\n   ;;\n+vxworks*)\n+  # Assume VxWorks cross toolchains are built on Linux, possibly\n+  # as canadian for Windows hosts.\n+  lt_cv_deplibs_check_method=pass_all\n+  ;;\n esac\n \n fi\n@@ -11617,6 +11622,25 @@ uts4*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n+# Shared libraries for VwWorks, >= 7 only at this stage\n+# and (fpic) still incompatible with \"large\" code models\n+# in a few configurations. Only for RTP mode in any case,\n+# and upon explicit request at configure time.\n+vxworks7*)\n+  dynamic_linker=no\n+  case ${with_multisubdir}-${enable_shared} in\n+    *large*)\n+      ;;\n+    *mrtp*-yes)\n+      version_type=linux\n+      need_lib_prefix=no\n+      need_version=no\n+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n+      soname_spec='${libname}${release}${shared_ext}$major'\n+      dynamic_linker=\"$host_os module_loader\"\n+      ;;\n+  esac\n+  ;;\n *)\n   dynamic_linker=no\n   ;;\n@@ -13723,8 +13747,9 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n         ;;\n \n       vxworks*)\n-        # FIXME: insert proper C++ library support\n-        ld_shlibs_CXX=no\n+        # For VxWorks ports, we assume the use of a GNU linker with\n+        # standard elf conventions.\n+        ld_shlibs_CXX=yes\n         ;;\n \n       *)\n@@ -15272,6 +15297,25 @@ uts4*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n+# Shared libraries for VwWorks, >= 7 only at this stage\n+# and (fpic) still incompatible with \"large\" code models\n+# in a few configurations. Only for RTP mode in any case,\n+# and upon explicit request at configure time.\n+vxworks7*)\n+  dynamic_linker=no\n+  case ${with_multisubdir}-${enable_shared} in\n+    *large*)\n+      ;;\n+    *mrtp*-yes)\n+      version_type=linux\n+      need_lib_prefix=no\n+      need_version=no\n+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n+      soname_spec='${libname}${release}${shared_ext}$major'\n+      dynamic_linker=\"$host_os module_loader\"\n+      ;;\n+  esac\n+  ;;\n *)\n   dynamic_linker=no\n   ;;"}, {"sha": "ee7e021f9493074445f891f9f7c3dab0c2d6cfd5", "filename": "libobjc/configure", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/libobjc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/libobjc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fconfigure?ref=0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825", "patch": "@@ -5478,6 +5478,11 @@ sysv4 | sysv4.3*)\n tpf*)\n   lt_cv_deplibs_check_method=pass_all\n   ;;\n+vxworks*)\n+  # Assume VxWorks cross toolchains are built on Linux, possibly\n+  # as canadian for Windows hosts.\n+  lt_cv_deplibs_check_method=pass_all\n+  ;;\n esac\n \n fi\n@@ -10315,6 +10320,25 @@ uts4*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n+# Shared libraries for VwWorks, >= 7 only at this stage\n+# and (fpic) still incompatible with \"large\" code models\n+# in a few configurations. Only for RTP mode in any case,\n+# and upon explicit request at configure time.\n+vxworks7*)\n+  dynamic_linker=no\n+  case ${with_multisubdir}-${enable_shared} in\n+    *large*)\n+      ;;\n+    *mrtp*-yes)\n+      version_type=linux\n+      need_lib_prefix=no\n+      need_version=no\n+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n+      soname_spec='${libname}${release}${shared_ext}$major'\n+      dynamic_linker=\"$host_os module_loader\"\n+      ;;\n+  esac\n+  ;;\n *)\n   dynamic_linker=no\n   ;;"}, {"sha": "24b687a05fa07de2143ecbc22a4b5811c1eec1d0", "filename": "liboffloadmic/configure", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/liboffloadmic%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/liboffloadmic%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/liboffloadmic%2Fconfigure?ref=0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825", "patch": "@@ -6470,6 +6470,11 @@ sysv4 | sysv4.3*)\n tpf*)\n   lt_cv_deplibs_check_method=pass_all\n   ;;\n+vxworks*)\n+  # Assume VxWorks cross toolchains are built on Linux, possibly\n+  # as canadian for Windows hosts.\n+  lt_cv_deplibs_check_method=pass_all\n+  ;;\n esac\n \n fi\n@@ -10981,6 +10986,25 @@ uts4*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n+# Shared libraries for VwWorks, >= 7 only at this stage\n+# and (fpic) still incompatible with \"large\" code models\n+# in a few configurations. Only for RTP mode in any case,\n+# and upon explicit request at configure time.\n+vxworks7*)\n+  dynamic_linker=no\n+  case ${with_multisubdir}-${enable_shared} in\n+    *large*)\n+      ;;\n+    *mrtp*-yes)\n+      version_type=linux\n+      need_lib_prefix=no\n+      need_version=no\n+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n+      soname_spec='${libname}${release}${shared_ext}$major'\n+      dynamic_linker=\"$host_os module_loader\"\n+      ;;\n+  esac\n+  ;;\n *)\n   dynamic_linker=no\n   ;;\n@@ -13087,8 +13111,9 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n         ;;\n \n       vxworks*)\n-        # FIXME: insert proper C++ library support\n-        ld_shlibs_CXX=no\n+        # For VxWorks ports, we assume the use of a GNU linker with\n+        # standard elf conventions.\n+        ld_shlibs_CXX=yes\n         ;;\n \n       *)\n@@ -14636,6 +14661,25 @@ uts4*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n+# Shared libraries for VwWorks, >= 7 only at this stage\n+# and (fpic) still incompatible with \"large\" code models\n+# in a few configurations. Only for RTP mode in any case,\n+# and upon explicit request at configure time.\n+vxworks7*)\n+  dynamic_linker=no\n+  case ${with_multisubdir}-${enable_shared} in\n+    *large*)\n+      ;;\n+    *mrtp*-yes)\n+      version_type=linux\n+      need_lib_prefix=no\n+      need_version=no\n+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n+      soname_spec='${libname}${release}${shared_ext}$major'\n+      dynamic_linker=\"$host_os module_loader\"\n+      ;;\n+  esac\n+  ;;\n *)\n   dynamic_linker=no\n   ;;"}, {"sha": "6e2b88c350db07a6c336783d512cb3f51757005b", "filename": "liboffloadmic/plugin/configure", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/liboffloadmic%2Fplugin%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/liboffloadmic%2Fplugin%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/liboffloadmic%2Fplugin%2Fconfigure?ref=0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825", "patch": "@@ -5849,6 +5849,11 @@ sysv4 | sysv4.3*)\n tpf*)\n   lt_cv_deplibs_check_method=pass_all\n   ;;\n+vxworks*)\n+  # Assume VxWorks cross toolchains are built on Linux, possibly\n+  # as canadian for Windows hosts.\n+  lt_cv_deplibs_check_method=pass_all\n+  ;;\n esac\n \n fi\n@@ -10628,6 +10633,25 @@ uts4*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n+# Shared libraries for VwWorks, >= 7 only at this stage\n+# and (fpic) still incompatible with \"large\" code models\n+# in a few configurations. Only for RTP mode in any case,\n+# and upon explicit request at configure time.\n+vxworks7*)\n+  dynamic_linker=no\n+  case ${with_multisubdir}-${enable_shared} in\n+    *large*)\n+      ;;\n+    *mrtp*-yes)\n+      version_type=linux\n+      need_lib_prefix=no\n+      need_version=no\n+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n+      soname_spec='${libname}${release}${shared_ext}$major'\n+      dynamic_linker=\"$host_os module_loader\"\n+      ;;\n+  esac\n+  ;;\n *)\n   dynamic_linker=no\n   ;;\n@@ -12734,8 +12758,9 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n         ;;\n \n       vxworks*)\n-        # FIXME: insert proper C++ library support\n-        ld_shlibs_CXX=no\n+        # For VxWorks ports, we assume the use of a GNU linker with\n+        # standard elf conventions.\n+        ld_shlibs_CXX=yes\n         ;;\n \n       *)\n@@ -14283,6 +14308,25 @@ uts4*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n+# Shared libraries for VwWorks, >= 7 only at this stage\n+# and (fpic) still incompatible with \"large\" code models\n+# in a few configurations. Only for RTP mode in any case,\n+# and upon explicit request at configure time.\n+vxworks7*)\n+  dynamic_linker=no\n+  case ${with_multisubdir}-${enable_shared} in\n+    *large*)\n+      ;;\n+    *mrtp*-yes)\n+      version_type=linux\n+      need_lib_prefix=no\n+      need_version=no\n+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n+      soname_spec='${libname}${release}${shared_ext}$major'\n+      dynamic_linker=\"$host_os module_loader\"\n+      ;;\n+  esac\n+  ;;\n *)\n   dynamic_linker=no\n   ;;"}, {"sha": "f1540b24f2d9feb9504e46daf175c711b5d3445a", "filename": "libphobos/configure", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/libphobos%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/libphobos%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fconfigure?ref=0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825", "patch": "@@ -6798,6 +6798,11 @@ sysv4 | sysv4.3*)\n tpf*)\n   lt_cv_deplibs_check_method=pass_all\n   ;;\n+vxworks*)\n+  # Assume VxWorks cross toolchains are built on Linux, possibly\n+  # as canadian for Windows hosts.\n+  lt_cv_deplibs_check_method=pass_all\n+  ;;\n esac\n \n fi\n@@ -11309,6 +11314,25 @@ uts4*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n+# Shared libraries for VwWorks, >= 7 only at this stage\n+# and (fpic) still incompatible with \"large\" code models\n+# in a few configurations. Only for RTP mode in any case,\n+# and upon explicit request at configure time.\n+vxworks7*)\n+  dynamic_linker=no\n+  case ${with_multisubdir}-${enable_shared} in\n+    *large*)\n+      ;;\n+    *mrtp*-yes)\n+      version_type=linux\n+      need_lib_prefix=no\n+      need_version=no\n+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n+      soname_spec='${libname}${release}${shared_ext}$major'\n+      dynamic_linker=\"$host_os module_loader\"\n+      ;;\n+  esac\n+  ;;\n *)\n   dynamic_linker=no\n   ;;"}, {"sha": "39579d14cdf5a41b4991b4c0c2a4059e7ff97cd2", "filename": "libquadmath/configure", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/libquadmath%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/libquadmath%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fconfigure?ref=0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825", "patch": "@@ -5820,6 +5820,11 @@ sysv4 | sysv4.3*)\n tpf*)\n   lt_cv_deplibs_check_method=pass_all\n   ;;\n+vxworks*)\n+  # Assume VxWorks cross toolchains are built on Linux, possibly\n+  # as canadian for Windows hosts.\n+  lt_cv_deplibs_check_method=pass_all\n+  ;;\n esac\n \n fi\n@@ -10350,6 +10355,25 @@ uts4*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n+# Shared libraries for VwWorks, >= 7 only at this stage\n+# and (fpic) still incompatible with \"large\" code models\n+# in a few configurations. Only for RTP mode in any case,\n+# and upon explicit request at configure time.\n+vxworks7*)\n+  dynamic_linker=no\n+  case ${with_multisubdir}-${enable_shared} in\n+    *large*)\n+      ;;\n+    *mrtp*-yes)\n+      version_type=linux\n+      need_lib_prefix=no\n+      need_version=no\n+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n+      soname_spec='${libname}${release}${shared_ext}$major'\n+      dynamic_linker=\"$host_os module_loader\"\n+      ;;\n+  esac\n+  ;;\n *)\n   dynamic_linker=no\n   ;;"}, {"sha": "9552cc0d06f67e1b3560a1a070387389c2401ab8", "filename": "libsanitizer/configure", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/libsanitizer%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/libsanitizer%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fconfigure?ref=0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825", "patch": "@@ -7407,6 +7407,11 @@ sysv4 | sysv4.3*)\n tpf*)\n   lt_cv_deplibs_check_method=pass_all\n   ;;\n+vxworks*)\n+  # Assume VxWorks cross toolchains are built on Linux, possibly\n+  # as canadian for Windows hosts.\n+  lt_cv_deplibs_check_method=pass_all\n+  ;;\n esac\n \n fi\n@@ -11918,6 +11923,25 @@ uts4*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n+# Shared libraries for VwWorks, >= 7 only at this stage\n+# and (fpic) still incompatible with \"large\" code models\n+# in a few configurations. Only for RTP mode in any case,\n+# and upon explicit request at configure time.\n+vxworks7*)\n+  dynamic_linker=no\n+  case ${with_multisubdir}-${enable_shared} in\n+    *large*)\n+      ;;\n+    *mrtp*-yes)\n+      version_type=linux\n+      need_lib_prefix=no\n+      need_version=no\n+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n+      soname_spec='${libname}${release}${shared_ext}$major'\n+      dynamic_linker=\"$host_os module_loader\"\n+      ;;\n+  esac\n+  ;;\n *)\n   dynamic_linker=no\n   ;;\n@@ -14024,8 +14048,9 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n         ;;\n \n       vxworks*)\n-        # FIXME: insert proper C++ library support\n-        ld_shlibs_CXX=no\n+        # For VxWorks ports, we assume the use of a GNU linker with\n+        # standard elf conventions.\n+        ld_shlibs_CXX=yes\n         ;;\n \n       *)\n@@ -15573,6 +15598,25 @@ uts4*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n+# Shared libraries for VwWorks, >= 7 only at this stage\n+# and (fpic) still incompatible with \"large\" code models\n+# in a few configurations. Only for RTP mode in any case,\n+# and upon explicit request at configure time.\n+vxworks7*)\n+  dynamic_linker=no\n+  case ${with_multisubdir}-${enable_shared} in\n+    *large*)\n+      ;;\n+    *mrtp*-yes)\n+      version_type=linux\n+      need_lib_prefix=no\n+      need_version=no\n+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n+      soname_spec='${libname}${release}${shared_ext}$major'\n+      dynamic_linker=\"$host_os module_loader\"\n+      ;;\n+  esac\n+  ;;\n *)\n   dynamic_linker=no\n   ;;"}, {"sha": "ff0d9c3b61d6f46e2cbd9d3405aba4d9952f9567", "filename": "libssp/configure", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/libssp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/libssp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libssp%2Fconfigure?ref=0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825", "patch": "@@ -6006,6 +6006,11 @@ sysv4 | sysv4.3*)\n tpf*)\n   lt_cv_deplibs_check_method=pass_all\n   ;;\n+vxworks*)\n+  # Assume VxWorks cross toolchains are built on Linux, possibly\n+  # as canadian for Windows hosts.\n+  lt_cv_deplibs_check_method=pass_all\n+  ;;\n esac\n \n fi\n@@ -10536,6 +10541,25 @@ uts4*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n+# Shared libraries for VwWorks, >= 7 only at this stage\n+# and (fpic) still incompatible with \"large\" code models\n+# in a few configurations. Only for RTP mode in any case,\n+# and upon explicit request at configure time.\n+vxworks7*)\n+  dynamic_linker=no\n+  case ${with_multisubdir}-${enable_shared} in\n+    *large*)\n+      ;;\n+    *mrtp*-yes)\n+      version_type=linux\n+      need_lib_prefix=no\n+      need_version=no\n+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n+      soname_spec='${libname}${release}${shared_ext}$major'\n+      dynamic_linker=\"$host_os module_loader\"\n+      ;;\n+  esac\n+  ;;\n *)\n   dynamic_linker=no\n   ;;"}, {"sha": "4bb1d73f0e0a038aeb73fb487823b2e8d4353e95", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825", "patch": "@@ -7089,6 +7089,11 @@ sysv4 | sysv4.3*)\n tpf*)\n   lt_cv_deplibs_check_method=pass_all\n   ;;\n+vxworks*)\n+  # Assume VxWorks cross toolchains are built on Linux, possibly\n+  # as canadian for Windows hosts.\n+  lt_cv_deplibs_check_method=pass_all\n+  ;;\n esac\n \n fi\n@@ -11747,6 +11752,25 @@ uts4*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n+# Shared libraries for VwWorks, >= 7 only at this stage\n+# and (fpic) still incompatible with \"large\" code models\n+# in a few configurations. Only for RTP mode in any case,\n+# and upon explicit request at configure time.\n+vxworks7*)\n+  dynamic_linker=no\n+  case ${with_multisubdir}-${enable_shared} in\n+    *large*)\n+      ;;\n+    *mrtp*-yes)\n+      version_type=linux\n+      need_lib_prefix=no\n+      need_version=no\n+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n+      soname_spec='${libname}${release}${shared_ext}$major'\n+      dynamic_linker=\"$host_os module_loader\"\n+      ;;\n+  esac\n+  ;;\n *)\n   dynamic_linker=no\n   ;;\n@@ -13874,8 +13898,9 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n         ;;\n \n       vxworks*)\n-        # FIXME: insert proper C++ library support\n-        ld_shlibs_CXX=no\n+        # For VxWorks ports, we assume the use of a GNU linker with\n+        # standard elf conventions.\n+        ld_shlibs_CXX=yes\n         ;;\n \n       *)\n@@ -15426,6 +15451,25 @@ uts4*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n+# Shared libraries for VwWorks, >= 7 only at this stage\n+# and (fpic) still incompatible with \"large\" code models\n+# in a few configurations. Only for RTP mode in any case,\n+# and upon explicit request at configure time.\n+vxworks7*)\n+  dynamic_linker=no\n+  case ${with_multisubdir}-${enable_shared} in\n+    *large*)\n+      ;;\n+    *mrtp*-yes)\n+      version_type=linux\n+      need_lib_prefix=no\n+      need_version=no\n+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n+      soname_spec='${libname}${release}${shared_ext}$major'\n+      dynamic_linker=\"$host_os module_loader\"\n+      ;;\n+  esac\n+  ;;\n *)\n   dynamic_linker=no\n   ;;"}, {"sha": "b92e284d9f95a9662faca5e5396cc4fa00287e86", "filename": "libtool.m4", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/libtool.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/libtool.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libtool.m4?ref=0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825", "patch": "@@ -2675,6 +2675,25 @@ uts4*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n+# Shared libraries for VwWorks, >= 7 only at this stage\n+# and (fpic) still incompatible with \"large\" code models\n+# in a few configurations. Only for RTP mode in any case,\n+# and upon explicit request at configure time.\n+vxworks7*)\n+  dynamic_linker=no\n+  case ${with_multisubdir}-${enable_shared} in\n+    *large*)\n+      ;;\n+    *mrtp*-yes)\n+      version_type=linux\n+      need_lib_prefix=no\n+      need_version=no\n+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n+      soname_spec='${libname}${release}${shared_ext}$major'\n+      dynamic_linker=\"$host_os module_loader\"\n+      ;;\n+  esac\n+  ;;\n *)\n   dynamic_linker=no\n   ;;\n@@ -3162,6 +3181,11 @@ sysv4 | sysv4.3*)\n tpf*)\n   lt_cv_deplibs_check_method=pass_all\n   ;;\n+vxworks*)\n+  # Assume VxWorks cross toolchains are built on Linux, possibly\n+  # as canadian for Windows hosts.\n+  lt_cv_deplibs_check_method=pass_all\n+  ;;\n esac\n ])\n file_magic_cmd=$lt_cv_file_magic_cmd\n@@ -6396,8 +6420,9 @@ if test \"$_lt_caught_CXX_error\" != yes; then\n         ;;\n \n       vxworks*)\n-        # FIXME: insert proper C++ library support\n-        _LT_TAGVAR(ld_shlibs, $1)=no\n+        # For VxWorks ports, we assume the use of a GNU linker with\n+        # standard elf conventions.\n+        _LT_TAGVAR(ld_shlibs, $1)=yes\n         ;;\n \n       *)"}, {"sha": "a2cfca98332fb5eedb24b0312cc720a1a96538c3", "filename": "libvtv/configure", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/libvtv%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/libvtv%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Fconfigure?ref=0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825", "patch": "@@ -7302,6 +7302,11 @@ sysv4 | sysv4.3*)\n tpf*)\n   lt_cv_deplibs_check_method=pass_all\n   ;;\n+vxworks*)\n+  # Assume VxWorks cross toolchains are built on Linux, possibly\n+  # as canadian for Windows hosts.\n+  lt_cv_deplibs_check_method=pass_all\n+  ;;\n esac\n \n fi\n@@ -11813,6 +11818,25 @@ uts4*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n+# Shared libraries for VwWorks, >= 7 only at this stage\n+# and (fpic) still incompatible with \"large\" code models\n+# in a few configurations. Only for RTP mode in any case,\n+# and upon explicit request at configure time.\n+vxworks7*)\n+  dynamic_linker=no\n+  case ${with_multisubdir}-${enable_shared} in\n+    *large*)\n+      ;;\n+    *mrtp*-yes)\n+      version_type=linux\n+      need_lib_prefix=no\n+      need_version=no\n+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n+      soname_spec='${libname}${release}${shared_ext}$major'\n+      dynamic_linker=\"$host_os module_loader\"\n+      ;;\n+  esac\n+  ;;\n *)\n   dynamic_linker=no\n   ;;\n@@ -13919,8 +13943,9 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n         ;;\n \n       vxworks*)\n-        # FIXME: insert proper C++ library support\n-        ld_shlibs_CXX=no\n+        # For VxWorks ports, we assume the use of a GNU linker with\n+        # standard elf conventions.\n+        ld_shlibs_CXX=yes\n         ;;\n \n       *)\n@@ -15468,6 +15493,25 @@ uts4*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n+# Shared libraries for VwWorks, >= 7 only at this stage\n+# and (fpic) still incompatible with \"large\" code models\n+# in a few configurations. Only for RTP mode in any case,\n+# and upon explicit request at configure time.\n+vxworks7*)\n+  dynamic_linker=no\n+  case ${with_multisubdir}-${enable_shared} in\n+    *large*)\n+      ;;\n+    *mrtp*-yes)\n+      version_type=linux\n+      need_lib_prefix=no\n+      need_version=no\n+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n+      soname_spec='${libname}${release}${shared_ext}$major'\n+      dynamic_linker=\"$host_os module_loader\"\n+      ;;\n+  esac\n+  ;;\n *)\n   dynamic_linker=no\n   ;;"}, {"sha": "33a07c819a43f1b45a2448a8a7c28c0fb9eedd8a", "filename": "lto-plugin/configure", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/lto-plugin%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/lto-plugin%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Fconfigure?ref=0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825", "patch": "@@ -7157,6 +7157,11 @@ sysv4 | sysv4.3*)\n tpf*)\n   lt_cv_deplibs_check_method=pass_all\n   ;;\n+vxworks*)\n+  # Assume VxWorks cross toolchains are built on Linux, possibly\n+  # as canadian for Windows hosts.\n+  lt_cv_deplibs_check_method=pass_all\n+  ;;\n esac\n \n fi\n@@ -11669,6 +11674,25 @@ uts4*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n+# Shared libraries for VwWorks, >= 7 only at this stage\n+# and (fpic) still incompatible with \"large\" code models\n+# in a few configurations. Only for RTP mode in any case,\n+# and upon explicit request at configure time.\n+vxworks7*)\n+  dynamic_linker=no\n+  case ${with_multisubdir}-${enable_shared} in\n+    *large*)\n+      ;;\n+    *mrtp*-yes)\n+      version_type=linux\n+      need_lib_prefix=no\n+      need_version=no\n+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n+      soname_spec='${libname}${release}${shared_ext}$major'\n+      dynamic_linker=\"$host_os module_loader\"\n+      ;;\n+  esac\n+  ;;\n *)\n   dynamic_linker=no\n   ;;"}, {"sha": "a05f1c647fdac53ec7dc24908cee47d87c3585ec", "filename": "zlib/configure", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/zlib%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825/zlib%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/zlib%2Fconfigure?ref=0ecd0f1cc6f8f3ba818946a42b22c2ab61f46825", "patch": "@@ -5482,6 +5482,11 @@ sysv4 | sysv4.3*)\n tpf*)\n   lt_cv_deplibs_check_method=pass_all\n   ;;\n+vxworks*)\n+  # Assume VxWorks cross toolchains are built on Linux, possibly\n+  # as canadian for Windows hosts.\n+  lt_cv_deplibs_check_method=pass_all\n+  ;;\n esac\n \n fi\n@@ -10279,6 +10284,25 @@ uts4*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n+# Shared libraries for VwWorks, >= 7 only at this stage\n+# and (fpic) still incompatible with \"large\" code models\n+# in a few configurations. Only for RTP mode in any case,\n+# and upon explicit request at configure time.\n+vxworks7*)\n+  dynamic_linker=no\n+  case ${with_multisubdir}-${enable_shared} in\n+    *large*)\n+      ;;\n+    *mrtp*-yes)\n+      version_type=linux\n+      need_lib_prefix=no\n+      need_version=no\n+      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n+      soname_spec='${libname}${release}${shared_ext}$major'\n+      dynamic_linker=\"$host_os module_loader\"\n+      ;;\n+  esac\n+  ;;\n *)\n   dynamic_linker=no\n   ;;"}]}