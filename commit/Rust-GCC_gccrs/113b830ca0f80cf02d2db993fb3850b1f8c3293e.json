{"sha": "113b830ca0f80cf02d2db993fb3850b1f8c3293e", "node_id": "C_kwDOANBUbNoAKDExM2I4MzBjYTBmODBjZjAyZDJkYjk5M2ZiMzg1MGIxZjhjMzI5M2U", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-11T11:54:42Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-11T11:54:42Z"}, "message": "Remove unused switch statement wrapper", "tree": {"sha": "286cd2a0784258291c80554612596d6c81a4815c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/286cd2a0784258291c80554612596d6c81a4815c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/113b830ca0f80cf02d2db993fb3850b1f8c3293e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/113b830ca0f80cf02d2db993fb3850b1f8c3293e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/113b830ca0f80cf02d2db993fb3850b1f8c3293e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/113b830ca0f80cf02d2db993fb3850b1f8c3293e/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eca2ac2c23e0c8b438fd696d4f85e35c9210d8dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eca2ac2c23e0c8b438fd696d4f85e35c9210d8dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eca2ac2c23e0c8b438fd696d4f85e35c9210d8dd"}], "stats": {"total": 77, "additions": 0, "deletions": 77}, "files": [{"sha": "126283c1a54f38e7f1763c3f35abe812fbcdd880", "filename": "gcc/rust/rust-backend.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113b830ca0f80cf02d2db993fb3850b1f8c3293e/gcc%2Frust%2Frust-backend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113b830ca0f80cf02d2db993fb3850b1f8c3293e/gcc%2Frust%2Frust-backend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-backend.h?ref=113b830ca0f80cf02d2db993fb3850b1f8c3293e", "patch": "@@ -306,18 +306,6 @@ class Backend\n   // exit expressions\n   virtual tree exit_expression (tree condition, Location) = 0;\n \n-  // Create a switch statement where the case values are constants.\n-  // CASES and STATEMENTS must have the same number of entries.  If\n-  // VALUE matches any of the list in CASES[i], which will all be\n-  // integers, then STATEMENTS[i] is executed.  STATEMENTS[i] will\n-  // either end with a goto statement or will fall through into\n-  // STATEMENTS[i + 1].  CASES[i] is empty for the default clause,\n-  // which need not be last.  FUNCTION is the current function.\n-  virtual tree switch_statement (tree function, tree value,\n-\t\t\t\t const std::vector<std::vector<tree> > &cases,\n-\t\t\t\t const std::vector<tree> &statements, Location)\n-    = 0;\n-\n   // Create a single statement from two statements.\n   virtual tree compound_statement (tree, tree) = 0;\n "}, {"sha": "f6c053465fb083065678916866c37046afee55ff", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113b830ca0f80cf02d2db993fb3850b1f8c3293e/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113b830ca0f80cf02d2db993fb3850b1f8c3293e/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=113b830ca0f80cf02d2db993fb3850b1f8c3293e", "patch": "@@ -264,10 +264,6 @@ class Gcc_backend : public Backend\n   tree if_statement (tree, tree condition, tree then_block, tree else_block,\n \t\t     Location);\n \n-  tree switch_statement (tree function, tree value,\n-\t\t\t const std::vector<std::vector<tree>> &cases,\n-\t\t\t const std::vector<tree> &statements, Location);\n-\n   tree compound_statement (tree, tree);\n \n   tree statement_list (const std::vector<tree> &);\n@@ -2054,67 +2050,6 @@ Gcc_backend::exit_expression (tree cond_tree, Location locus)\n \t\t\t  cond_tree);\n }\n \n-// Switch.\n-\n-tree\n-Gcc_backend::switch_statement (tree decl, tree value,\n-\t\t\t       const std::vector<std::vector<tree>> &cases,\n-\t\t\t       const std::vector<tree> &statements,\n-\t\t\t       Location switch_location)\n-{\n-  gcc_assert (cases.size () == statements.size ());\n-\n-  if (DECL_STRUCT_FUNCTION (decl) == NULL)\n-    push_struct_function (decl);\n-  else\n-    push_cfun (DECL_STRUCT_FUNCTION (decl));\n-\n-  tree stmt_list = NULL_TREE;\n-  std::vector<std::vector<tree>>::const_iterator pc = cases.begin ();\n-  for (std::vector<tree>::const_iterator ps = statements.begin ();\n-       ps != statements.end (); ++ps, ++pc)\n-    {\n-      if (pc->empty ())\n-\t{\n-\t  location_t loc\n-\t    = (*ps != NULL ? EXPR_LOCATION (*ps) : UNKNOWN_LOCATION);\n-\t  tree label = create_artificial_label (loc);\n-\t  tree c = build_case_label (NULL_TREE, NULL_TREE, label);\n-\t  append_to_statement_list (c, &stmt_list);\n-\t}\n-      else\n-\t{\n-\t  for (std::vector<tree>::const_iterator pcv = pc->begin ();\n-\t       pcv != pc->end (); ++pcv)\n-\t    {\n-\t      tree t = (*pcv);\n-\t      if (t == error_mark_node)\n-\t\treturn error_mark_node;\n-\t      location_t loc = EXPR_LOCATION (t);\n-\t      tree label = create_artificial_label (loc);\n-\t      tree c = build_case_label ((*pcv), NULL_TREE, label);\n-\t      append_to_statement_list (c, &stmt_list);\n-\t    }\n-\t}\n-\n-      if (*ps != NULL)\n-\t{\n-\t  tree t = (*ps);\n-\t  if (t == error_mark_node)\n-\t    return error_mark_node;\n-\t  append_to_statement_list (t, &stmt_list);\n-\t}\n-    }\n-  pop_cfun ();\n-\n-  tree tv = value;\n-  if (tv == error_mark_node)\n-    return error_mark_node;\n-  tree t = build2_loc (switch_location.gcc_location (), SWITCH_EXPR, NULL_TREE,\n-\t\t       tv, stmt_list);\n-  return t;\n-}\n-\n // Pair of statements.\n \n tree"}]}