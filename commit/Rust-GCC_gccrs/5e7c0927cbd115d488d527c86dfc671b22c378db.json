{"sha": "5e7c0927cbd115d488d527c86dfc671b22c378db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU3YzA5MjdjYmQxMTVkNDg4ZDUyN2M4NmRmYzY3MWIyMmMzNzhkYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-02-25T07:37:36Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-02-25T07:50:32Z"}, "message": "Make the PR99220 fix more robust\n\nThis avoids interleaving pattern recognition and load redistribution\noptimization since the load_map used in the latter is fragile with\nrespect to release and reuse of SLP nodes, something which can also\noccur within the pattern recognition machinery.\n\n2021-02-25  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-slp.c (optimize_load_redistribution_1): Delay\n\tload_map population.\n\t(vect_match_slp_patterns_2): Revert part of last change.\n\t(vect_analyze_slp): Do not interleave optimize_load_redistribution\n\twith pattern detection but do it afterwards.  Dump the\n\twhole SLP graph after pattern recognition and load\n\tredistribution optimization finished.", "tree": {"sha": "0b909920bb6a6f7d6afcfd465c4d2b630740ad80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b909920bb6a6f7d6afcfd465c4d2b630740ad80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e7c0927cbd115d488d527c86dfc671b22c378db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e7c0927cbd115d488d527c86dfc671b22c378db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e7c0927cbd115d488d527c86dfc671b22c378db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e7c0927cbd115d488d527c86dfc671b22c378db/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6baafcac5308be1a5d92c0b2a179495b7a24b52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6baafcac5308be1a5d92c0b2a179495b7a24b52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6baafcac5308be1a5d92c0b2a179495b7a24b52"}], "stats": {"total": 53, "additions": 30, "deletions": 23}, "files": [{"sha": "430c66c6f3cd5ecee0d56e23b43d806c15af2638", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 30, "deletions": 23, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e7c0927cbd115d488d527c86dfc671b22c378db/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e7c0927cbd115d488d527c86dfc671b22c378db/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=5e7c0927cbd115d488d527c86dfc671b22c378db", "patch": "@@ -2294,8 +2294,6 @@ optimize_load_redistribution_1 (scalar_stmts_to_slp_tree_map_t *bst_map,\n   if (slp_tree *leader = load_map->get (root))\n     return *leader;\n \n-  load_map->put (root, NULL);\n-\n   slp_tree node;\n   unsigned i;\n \n@@ -2342,6 +2340,8 @@ optimize_load_redistribution_1 (scalar_stmts_to_slp_tree_map_t *bst_map,\n     }\n \n next:\n+  load_map->put (root, NULL);\n+\n   FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (root), i , node)\n     {\n       slp_tree value\n@@ -2352,11 +2352,10 @@ optimize_load_redistribution_1 (scalar_stmts_to_slp_tree_map_t *bst_map,\n \t  SLP_TREE_REF_COUNT (value)++;\n \t  SLP_TREE_CHILDREN (root)[i] = value;\n \t  /* ???  We know the original leafs of the replaced nodes will\n-\t    be referenced by bst_map, only the permutes created by\n-\t  pattern matching are not.  */\n+\t     be referenced by bst_map, only the permutes created by\n+\t     pattern matching are not.  */\n \t  if (SLP_TREE_REF_COUNT (node) == 1)\n \t    load_map->remove (node);\n-\n \t  vect_free_slp_tree (node);\n \t}\n     }\n@@ -2394,7 +2393,6 @@ optimize_load_redistribution (scalar_stmts_to_slp_tree_map_t *bst_map,\n \t     pattern matching are not.  */\n \t  if (SLP_TREE_REF_COUNT (node) == 1)\n \t    load_map->remove (node);\n-\n \t  vect_free_slp_tree (node);\n \t}\n     }\n@@ -2417,9 +2415,7 @@ vect_match_slp_patterns_2 (slp_tree *ref_node, vec_info *vinfo,\n   slp_tree node = *ref_node;\n   bool found_p = false;\n   if (!node || visited->add (node))\n-    return node\n-\t   && SLP_TREE_REPRESENTATIVE (node)\n-\t   && STMT_VINFO_SLP_VECT_ONLY_PATTERN (SLP_TREE_REPRESENTATIVE (node));\n+    return false;\n \n   slp_tree child;\n   FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), i, child)\n@@ -2898,23 +2894,24 @@ vect_analyze_slp (vec_info *vinfo, unsigned max_tree_size)\n \n   hash_set<slp_tree> visited_patterns;\n   slp_tree_to_load_perm_map_t perm_cache;\n-  hash_map<slp_tree, slp_tree> load_map;\n \n   /* See if any patterns can be found in the SLP tree.  */\n+  bool pattern_found = false;\n   FOR_EACH_VEC_ELT (LOOP_VINFO_SLP_INSTANCES (vinfo), i, instance)\n-    if (vect_match_slp_patterns (instance, vinfo, &visited_patterns,\n-\t\t\t\t &perm_cache))\n-      {\n-\tslp_tree root = SLP_INSTANCE_TREE (instance);\n-\toptimize_load_redistribution (bst_map, vinfo, SLP_TREE_LANES (root),\n-\t\t\t\t      &load_map, root);\n-\tif (dump_enabled_p ())\n-\t  {\n-\t    dump_printf_loc (MSG_NOTE, vect_location,\n-\t\t\t     \"Pattern matched SLP tree\\n\");\n-\t    vect_print_slp_graph (MSG_NOTE, vect_location, root);\n-\t  }\n-      }\n+    pattern_found |= vect_match_slp_patterns (instance, vinfo,\n+\t\t\t\t\t      &visited_patterns, &perm_cache);\n+\n+  /* If any were found optimize permutations of loads.  */\n+  if (pattern_found)\n+    {\n+      hash_map<slp_tree, slp_tree> load_map;\n+      FOR_EACH_VEC_ELT (LOOP_VINFO_SLP_INSTANCES (vinfo), i, instance)\n+\t{\n+\t  slp_tree root = SLP_INSTANCE_TREE (instance);\n+\t  optimize_load_redistribution (bst_map, vinfo, SLP_TREE_LANES (root),\n+\t\t\t\t\t&load_map, root);\n+\t}\n+    }\n \n \n \n@@ -2925,6 +2922,16 @@ vect_analyze_slp (vec_info *vinfo, unsigned max_tree_size)\n       vect_free_slp_tree ((*it).second);\n   delete bst_map;\n \n+  if (pattern_found && dump_enabled_p ())\n+    {\n+      dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t       \"Pattern matched SLP tree\\n\");\n+      hash_set<slp_tree> visited;\n+      FOR_EACH_VEC_ELT (LOOP_VINFO_SLP_INSTANCES (vinfo), i, instance)\n+\tvect_print_slp_graph (MSG_NOTE, vect_location,\n+\t\t\t      SLP_INSTANCE_TREE (instance), visited);\n+    }\n+\n   return opt_result::success ();\n }\n "}]}