{"sha": "1d9d04f8cedd05e5c2a645995cb49849cdc996b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ5ZDA0ZjhjZWRkMDVlNWMyYTY0NTk5NWNiNDk4NDljZGM5OTZiMA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-01T07:55:51Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-01T07:55:51Z"}, "message": "(allocate_dynamic_stack_space): If STACK_DYNAMIC_OFFSET or STACK_POINTER_OFFSET...\n\n(allocate_dynamic_stack_space): If STACK_DYNAMIC_OFFSET\nor STACK_POINTER_OFFSET, always round address up to BIGGEST_ALIGNMENT.\n\nFrom-SVN: r2292", "tree": {"sha": "a08c585b06162a7adae73ce9d94730e5cb051c57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a08c585b06162a7adae73ce9d94730e5cb051c57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d9d04f8cedd05e5c2a645995cb49849cdc996b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d9d04f8cedd05e5c2a645995cb49849cdc996b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d9d04f8cedd05e5c2a645995cb49849cdc996b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d9d04f8cedd05e5c2a645995cb49849cdc996b0/comments", "author": null, "committer": null, "parents": [{"sha": "09dafdadf00eb5a4dc940788316b22558e71d29a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09dafdadf00eb5a4dc940788316b22558e71d29a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09dafdadf00eb5a4dc940788316b22558e71d29a"}], "stats": {"total": 9, "additions": 9, "deletions": 0}, "files": [{"sha": "4d7d5c530eacc098bac811f34fc003b215fb98f6", "filename": "gcc/explow.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9d04f8cedd05e5c2a645995cb49849cdc996b0/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9d04f8cedd05e5c2a645995cb49849cdc996b0/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=1d9d04f8cedd05e5c2a645995cb49849cdc996b0", "patch": "@@ -865,7 +865,11 @@ allocate_dynamic_stack_space (size, target, known_align)\n \n #ifdef MUST_ALIGN\n \n+#if !defined (STACK_DYNAMIC_OFFSET) && !defined (STACK_POINTER_OFFSET)\n+  /* If we have to round the address up regardless of known_align,\n+     make extra space regardless, also.  */\n   if (known_align % BIGGEST_ALIGNMENT != 0)\n+#endif\n     {\n       if (GET_CODE (size) == CONST_INT)\n \tsize = GEN_INT (INTVAL (size)\n@@ -875,6 +879,7 @@ allocate_dynamic_stack_space (size, target, known_align)\n \t\t\t     GEN_INT (BIGGEST_ALIGNMENT / BITS_PER_UNIT - 1),\n \t\t\t     NULL_RTX, 1, OPTAB_LIB_WIDEN);\n     }\n+\n #endif\n \n #ifdef SETJMP_VIA_SAVE_AREA\n@@ -952,7 +957,11 @@ allocate_dynamic_stack_space (size, target, known_align)\n #endif\n \n #ifdef MUST_ALIGN\n+  /* If virtual_stack_dynamic_rtx might not share the alignment of\n+     the stack pointer register, we must always realign the stack address.  */\n+#if !defined (STACK_DYNAMIC_OFFSET) && !defined (STACK_POINTER_OFFSET)\n   if (known_align % BIGGEST_ALIGNMENT != 0)\n+#endif\n     {\n       target = expand_divmod (0, CEIL_DIV_EXPR, Pmode, target,\n \t\t\t      GEN_INT (BIGGEST_ALIGNMENT / BITS_PER_UNIT),"}]}