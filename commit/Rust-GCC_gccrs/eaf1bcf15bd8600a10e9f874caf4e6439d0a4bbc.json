{"sha": "eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFmMWJjZjE1YmQ4NjAwYTEwZTlmODc0Y2FmNGU2NDM5ZDBhNGJiYw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-12-12T20:55:56Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-12-12T20:55:56Z"}, "message": "Add @plt if -fpic; Fix double->int conversions if stack > 32k; Redo t-* files; Fix trampolines on System V systems\n\nFrom-SVN: r13298", "tree": {"sha": "7b911fb9d4ca267e413e8c9dfaed96e52398a78e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b911fb9d4ca267e413e8c9dfaed96e52398a78e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc/comments", "author": null, "committer": null, "parents": [{"sha": "a0a7cb3547fe9852a5fbefc0f668e6d5417a6b45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0a7cb3547fe9852a5fbefc0f668e6d5417a6b45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0a7cb3547fe9852a5fbefc0f668e6d5417a6b45"}], "stats": {"total": 620, "additions": 279, "deletions": 341}, "files": [{"sha": "d5e1210f6733cfea8b158516cb802d3d772a45fc", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 7, "deletions": 169, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc", "patch": "@@ -4381,65 +4381,6 @@ int get_issue_rate()\n   }\n }\n \n-\f\n-/* Output insns to flush the {data|instruction} caches after building a\n-   trampoline. */\n-\n-static void\n-rs6000_sync_trampoline (addr)\n-     rtx addr;\n-{\n-  enum machine_mode pmode = Pmode;\n-  rtx reg = gen_reg_rtx (pmode);\n-  rtx mem2;\n-  rtx mem1;\n-  int size = rs6000_trampoline_size ();\n-  rtx (*sub_fcn) PROTO ((rtx, rtx, rtx));\n-  rtx (*cmp_fcn) PROTO ((rtx, rtx));\n-  rtx label;\n-\n-  if (TARGET_32BIT)\n-    {\n-      sub_fcn = gen_subsi3;\n-      cmp_fcn = gen_cmpsi;\n-    }\n-  else\n-    {\n-      sub_fcn = gen_subdi3;\n-      cmp_fcn = gen_cmpdi;\n-    }\n-\n-  addr = force_reg (pmode, addr);\n-  mem2 = gen_rtx (MEM, pmode, gen_rtx (PLUS, pmode, addr, reg));\n-  mem1 = gen_rtx (MEM, pmode, addr);\n-\n-  /* Issue a loop of dcbst's to flush the data cache */\n-  emit_move_insn (reg, GEN_INT (size-4));\n-  label = gen_label_rtx ();\n-  emit_label (label);\n-  emit_insn (gen_dcbst (mem2, addr, reg));\n-  emit_insn ((*sub_fcn) (reg, reg, GEN_INT (4)));\n-  emit_insn ((*cmp_fcn) (reg, const0_rtx));\n-  emit_jump_insn (gen_bgt (label));\n-\n-  /* Issue a sync after the dcbst's to let things settle down */\n-  emit_insn (gen_sync (mem1));\n-\n-  /* Issue a loop of icbi's to flush the instruction cache */\n-  emit_move_insn (reg, GEN_INT (size-4));\n-  label = gen_label_rtx ();\n-  emit_label (label);\n-  emit_insn (gen_icbi (mem2, addr, reg));\n-  emit_insn ((*sub_fcn) (reg, reg, GEN_INT (4)));\n-  emit_insn ((*cmp_fcn) (reg, const0_rtx));\n-  emit_jump_insn (gen_bgt (label));\n-\n-  /* Issue a sync after the icbi's to let things settle down */\n-  emit_insn (gen_sync (mem1));\n-\n-  /* Finally issue an isync to synchronize the icache */\n-  emit_insn (gen_isync (mem1));\n-}\n \n \f\n /* Output assembler code for a block containing the constant parts\n@@ -4466,7 +4407,6 @@ rs6000_trampoline_template (file)\n        the address of the function, the second word is the TOC pointer (r2),\n        and the third word is the static chain value.  */\n     case ABI_AIX:\n-      fprintf (file, \"\\t.long %s\\n\", (TARGET_32BIT) ? \"0,0,0\" : \"0,0,0,0,0,0\");\n       break;\n \n \n@@ -4475,35 +4415,6 @@ rs6000_trampoline_template (file)\n     case ABI_V4:\n     case ABI_SOLARIS:\n     case ABI_AIX_NODESC:\n-      if (STATIC_CHAIN_REGNUM == 0 || !TARGET_NEW_MNEMONICS)\n-\tabort ();\n-\n-      if (TARGET_32BIT)\n-\t{\n-\t  fprintf (file, \"\\tmflr %s\\n\", r0);\t\t/* offset  0 */\n-\t  fprintf (file, \"\\tbl .LTRAMP1\\n\");\t\t/* offset  4 */\n-\t  fprintf (file, \"\\t.long 0,0\\n\");\t\t/* offset  8 */\n-\t  fprintf (file, \".LTRAMP1:\\n\");\n-\t  fprintf (file, \"\\tmflr %s\\n\", sc);\t\t/* offset 20 */\n-\t  fprintf (file, \"\\tmtlr %s\\n\", r0);\t\t/* offset 24 */\n-\t  fprintf (file, \"\\tlwz %s,0(%s)\\n\", r0, sc);\t/* offset 28 */\n-\t  fprintf (file, \"\\tlwz %s,4(%s)\\n\", sc, sc);\t/* offset 32 */\n-\t  fprintf (file, \"\\tmtctr %s\\n\", r0);\t\t/* offset 36 */\n-\t  fprintf (file, \"\\tbctr\\n\");\t\t\t/* offset 40 */\n-\t}\n-      else\n-\t{\n-\t  fprintf (file, \"\\tmflr %s\\n\", r0);\t\t/* offset  0 */\n-\t  fprintf (file, \"\\tbl .LTRAMP1\\n\");\t\t/* offset  4 */\n-\t  fprintf (file, \"\\t.long 0,0,0,0\\n\");\t\t/* offset  8 */\n-\t  fprintf (file, \".LTRAMP1:\\n\");\n-\t  fprintf (file, \"\\tmflr %s\\n\", sc);\t\t/* offset 28 */\n-\t  fprintf (file, \"\\tmtlr %s\\n\", r0);\t\t/* offset 32 */\n-\t  fprintf (file, \"\\tld %s,0(%s)\\n\", r0, sc);\t/* offset 36 */\n-\t  fprintf (file, \"\\tld %s,8(%s)\\n\", sc, sc);\t/* offset 40 */\n-\t  fprintf (file, \"\\tmtctr %s\\n\", r0);\t\t/* offset 44 */\n-\t  fprintf (file, \"\\tbctr\\n\");\t\t\t/* offset 48 */\n-\t}\n       break;\n \n   /* NT function pointers point to a two word area (real address, TOC)\n@@ -4600,18 +4511,16 @@ rs6000_initialize_trampoline (addr, fnaddr, cxt)\n       }\n       break;\n \n-    /* Under V.4/eabi, update the two words after the bl to have the real\n-       function address and the static chain.  */\n+    /* Under V.4/eabi, call __trampoline_setup to do the real work.  */\n     case ABI_V4:\n     case ABI_SOLARIS:\n     case ABI_AIX_NODESC:\n-      {\n-\trtx reg = gen_reg_rtx (pmode);\n-\temit_move_insn (reg, fnaddr);\n-\temit_move_insn (MEM_PLUS (addr, 8), reg);\n-\temit_move_insn (MEM_PLUS (addr, 8 + regsize), ctx_reg);\n-\trs6000_sync_trampoline (addr);\n-      }\n+      emit_library_call (gen_rtx (SYMBOL_REF, SImode, \"__trampoline_setup\"),\n+\t\t\t FALSE, VOIDmode, 4,\n+\t\t\t addr, pmode,\n+\t\t\t GEN_INT (rs6000_trampoline_size ()), SImode,\n+\t\t\t fnaddr, pmode,\n+\t\t\t ctx_reg, pmode);\n       break;\n \n     /* Under NT, update the first word to point to the ..LTRAMP1..0 header,\n@@ -4944,74 +4853,3 @@ rs6000_encode_section_info (decl)\n }\n \n #endif /* USING_SVR4_H */\n-\n-\f\n-/* CYGNUS LOCAL mac */\n-\n-/* Whether we are using m68k-compatible alignment.  */\n-\n-int mac68k_aligned;\n-\n-/* Most Mac compiler pragmas are unimportant, but we must recognize\n-   the m68k alignment pragma, because that is crucial to transitions\n-   to and from the m68k emulator on PowerMacs.  */\n-\n-int\n-handle_mac_pragma (finput, t)\n-     FILE *finput;\n-     tree t;\n-{\n-  int retval = 0;\n-  register char *pname;\n-  char pbuf[200];\n-  int c, psize = 0;\n-\n-  if (TREE_CODE (t) != IDENTIFIER_NODE)\n-    return 0;\n-\n-  pname = IDENTIFIER_POINTER (t);\n-  if (strcmp (pname, \"segment\") == 0)\n-    {\n-      /* (should collect pbuf + 8 into a segment name) */\n-    }\n-  else if (strcmp (pname, \"options\") == 0)\n-    {\n-      c = getc (finput);\n-      /* Skip over initial whitespace.  */\n-      while (c == ' ' || c == '\\t')\n-\tc = getc (finput);\n-\n-      /* Return without doing anything if no content.  */\n-      if (c == '\\n' || c == EOF)\n-\t{\n-\t  ungetc (c, finput);\n-\t  return 0;\n-\t}\n-\n-      /* Collect the rest of the line.  */\n-      while (psize < sizeof (pbuf) - 1 && c != '\\n')\n-\t{\n-\t  pbuf[psize++] = c;\n-\t  c = getc (finput);\n-\t}\n-\n-      if (strncmp (pbuf, \"align=mac68k\", 12) == 0)\n-\t{\n-\t  mac68k_aligned = 1;\n-\t  retval = 1;\n-\t}\n-      else if (strncmp (pbuf, \"align=power\", 11) == 0)\n-\t{\n-\t  mac68k_aligned = 0;\n-\t  retval = 1;\n-\t}\n-      else if (strncmp (pbuf, \"align=reset\", 11) == 0)\n-\t{\n-\t  mac68k_aligned = 0;\n-\t  retval = 1;\n-\t}\n-    }\n-\n-  return retval;\n-}\n-/* END CYGNUS LOCAL mac */"}, {"sha": "691facecb1cc1fba78c1739c146626ddcf6bf32d", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc", "patch": "@@ -441,7 +441,6 @@ struct rs6000_cpu_select\n \n extern struct rs6000_cpu_select rs6000_select[];\n \n-\n /* Sometimes certain combinations of command options do not make sense\n    on a particular target machine.  You can define a macro\n    `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n@@ -1520,12 +1519,7 @@ typedef struct rs6000_args\n \n #define FUNCTION_EPILOGUE(FILE, SIZE) output_epilog (FILE, SIZE)\n \f\n-/* Output assembler code for a block containing the constant parts\n-   of a trampoline, leaving space for the variable parts.\n-\n-   The trampoline should set the static chain pointer to value placed\n-   into the trampoline and should branch to the specified routine.  */\n-#define TRAMPOLINE_TEMPLATE(FILE) rs6000_trampoline_template (FILE)\n+/* TRAMPOLINE_TEMPLATE deleted */\n \n /* Length in units of the trampoline for entering a nested function.  */\n "}, {"sha": "5752d2328c9d5ce6eb65248a9ea0d491948a7dbc", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 5, "deletions": 32, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc", "patch": "@@ -3836,7 +3836,8 @@\n   operands[2] = gen_rtx (MEM, DFmode,\n \t\t\t gen_rtx (PLUS, Pmode,\n \t\t\t\t  indx,\n-\t\t\t\t  GEN_INT (rs6000_fpmem_offset)));\n+\t\t\t\t  GEN_INT ((((rs6000_fpmem_offset & 0xffff)\n+\t\t\t\t\t     ^ 0x8000) - 0x8000))));\n \n   return \\\"stfd %0,%w2\\\";\n }\"\n@@ -7359,7 +7360,7 @@\n   else if (INTVAL (operands[2]) & CALL_V4_CLEAR_FP_ARGS)\n     output_asm_insn (\\\"creqv 6,6,6\\\", operands);\n \n-  return \\\"bl %z0\\\";\n+  return (flag_pic) ? \\\"bl %z0@plt\\\" : \\\"bl %z0\\\";\n }\"\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"4,8\")])\n@@ -7429,7 +7430,7 @@\n   else if (INTVAL (operands[3]) & CALL_V4_CLEAR_FP_ARGS)\n     output_asm_insn (\\\"creqv 6,6,6\\\", operands);\n \n-  return \\\"bl %z1\\\";\n+  return (flag_pic) ? \\\"bl %z1@plt\\\" : \\\"bl %z1\\\";\n }\"\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"4,8\")])\n@@ -7470,41 +7471,13 @@\n   \"\"\n   \"\")\n \n-;; Synchronize instructions/data caches for V.4 trampolines\n-;; The extra memory_operand is to prevent the optimizer from\n-;; deleting insns with \"no\" effect.\n-(define_insn \"icbi\"\n-  [(unspec [(match_operand 0 \"memory_operand\" \"=m\")\n-\t    (match_operand 1 \"register_operand\" \"b\")\n-\t    (match_operand 2 \"register_operand\" \"r\")] 3)]\n-  \"TARGET_POWERPC\"\n-  \"icbi %1,%2\")\n-\n-(define_insn \"dcbst\"\n-  [(unspec [(match_operand 0 \"memory_operand\" \"=m\")\n-\t    (match_operand 1 \"register_operand\" \"b\")\n-\t    (match_operand 2 \"register_operand\" \"r\")] 4)]\n-  \"TARGET_POWERPC\"\n-  \"dcbst %1,%2\")\n-\n-(define_insn \"sync\"\n-  [(unspec [(match_operand 0 \"memory_operand\" \"=m\")] 5)]\n-  \"\"\n-  \"{dcs|sync}\")\n-\n-(define_insn \"isync\"\n-  [(unspec [(match_operand 0 \"memory_operand\" \"=m\")] 6)]\n-  \"\"\n-  \"{ics|isync}\")\n-\n-\n ;; V.4 specific code to initialize the PIC register\n \n (define_insn \"init_v4_pic\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=l\")\n \t(unspec [(const_int 0)] 7))]\n   \"DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_SOLARIS\"\n-  \"bl _GLOBAL_OFFSET_TABLE_-4\"\n+  \"bl _GLOBAL_OFFSET_TABLE_@local-4\"\n   [(set_attr \"type\" \"branch\")])\n \n \f"}, {"sha": "6829d85a292e4ae2613073e6b55afc1598a770e7", "filename": "gcc/config/rs6000/sol-c0.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc/gcc%2Fconfig%2Frs6000%2Fsol-c0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc/gcc%2Fconfig%2Frs6000%2Fsol-c0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsol-c0.c?ref=eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc", "patch": "@@ -84,12 +84,13 @@ _start(int argc, char *argv[], char *envp[], void *auxp, void (*termfunc)())\n   int ret;\n   int dummy = 0;\n \n-  /* Load up r13 before we do anything else.  */\n-  __asm__ volatile (\"mr %%r13,%0;mr %%r2,%1\" : \"=r\" (dummy) : \"r\" (&_SDA_BASE_[0]), \"r\" (&_SDA2_BASE_[0]));\n-  _environ = envp;\n+  /* Load up r13/r2 before we do anything else.  */\n+  __asm__ volatile (\"mr %%r13,%0;mr %%r2,%1\" : \"=r\" (dummy) : \"r\" (&_SDA_BASE_[0]), \"r\" (&_SDA2_BASE_[0]), \"r\" (dummy));\n+  _environ = envp + dummy;\n \n-  /* Register loader termination function */\n-  if (termfunc || dummy)\n+  /* Register loader termination function (the || dummy is to make sure the above asm\n+     is not optimized away).  */\n+  if (termfunc)\n     atexit (termfunc);\n \n   /* Register exception handler if needed */"}, {"sha": "867b32868a5176c61621d2330722fc0ce82a0462", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc", "patch": "@@ -967,7 +967,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n %{memb} %{!memb: %{msdata: -memb} %{msdata=eabi: -memb}} \\\n %{mlittle} %{mlittle-endian} %{mbig} %{mbig-endian} \\\n %{!mlittle: %{!mlittle-endian: %{!mbig: %{!mbig-endian: \\\n-    %{mcall-solaris: -mlittle} %{mcall-linux: -mbig} }}}}\"\n+    %{mcall-solaris: -mlittle -msolaris} %{mcall-linux: -mbig} }}}}\"\n \n #undef CC1_SPEC\n /* Pass -G xxx to the compiler and set correct endian mode */"}, {"sha": "0b5bea99b51fba375559d8dd20e136575ce4cab3", "filename": "gcc/config/rs6000/t-ppc", "status": "modified", "additions": 4, "deletions": 60, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc/gcc%2Fconfig%2Frs6000%2Ft-ppc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc/gcc%2Fconfig%2Frs6000%2Ft-ppc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-ppc?ref=eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc", "patch": "@@ -1,68 +1,12 @@\n-# Do not build libgcc1.\n-LIBGCC1 =\n-CROSS_LIBGCC1 =\n-\n-# These are really part of libgcc1, but this will cause them to be\n-# built correctly, so... [taken from t-sparclite]\n-LIB2FUNCS_EXTRA = fp-bit.c dp-bit.c eabi.S eabi-ctors.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n-eabi.S: $(srcdir)/config/rs6000/eabi.asm\n-\tcat $(srcdir)/config/rs6000/eabi.asm > eabi.S\n-\n-eabi-ctors.c: $(srcdir)/config/rs6000/eabi-ctors.c\n-\tcat $(srcdir)/config/rs6000/eabi-ctors.c > eabi-ctors.c\n+# PowerPC support without gas\n \n # Build libgcc.a with different options.  If no gas support, don't build\n # explicit little endian or big endian libraries, since it depends on the\n # -mbig/-mlittle switches passed to gas.  The -mrelocatable support also needs\n # -mrelocatable passed to gas, so don't use it either.\n+\n MULTILIB_OPTIONS\t= msoft-float\n MULTILIB_DIRNAMES\t= nof\n-MULTILIB_MATCHES\t=\n MULTILIB_EXCEPTIONS\t=\n-\n-LIBGCC = stmp-multilib\n-INSTALL_LIBGCC = install-multilib\n-EXTRA_MULTILIB_PARTS = ecrti$(objext) ecrtn$(objext) scrt0$(objext) scrti$(objext) scrtn$(objext)\n-\n-# For eabigas we build {e,s}crti.o and {e,s}crtn.o which serve to add begin and\n-# end labels to all of the special sections used when we link using gcc.\n-\n-# Assemble startup files.\n-ecrti.S: $(srcdir)/config/rs6000/eabi-ci.asm\n-\tcat $(srcdir)/config/rs6000/eabi-ci.asm >ecrti.S\n-\n-ecrtn.S: $(srcdir)/config/rs6000/eabi-cn.asm\n-\tcat $(srcdir)/config/rs6000/eabi-cn.asm >ecrtn.S\n-\n-scrti.S: $(srcdir)/config/rs6000/sol-ci.asm\n-\tcat $(srcdir)/config/rs6000/sol-ci.asm >scrti.S\n-\n-scrtn.S: $(srcdir)/config/rs6000/sol-cn.asm\n-\tcat $(srcdir)/config/rs6000/sol-cn.asm >scrtn.S\n-\n-scrt0.c: $(srcdir)/config/rs6000/sol-c0.c\n-\tcat $(srcdir)/config/rs6000/sol-c0.c >scrt0.c\n-\n-# Build multiple copies of ?crt{i,n}.o, one for each target switch.\n-$(T)ecrti$(objext): ecrti.S\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c ecrti.S -o $(T)ecrti$(objext)\n-\t\t\t\t\t\t\t\t         \n-$(T)ecrtn$(objext): ecrtn.S\t\t\t\t\t         \n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c ecrtn.S -o $(T)ecrtn$(objext)\n-\t\t\t\t\t\t\t\t         \n-$(T)scrti$(objext): scrti.S\t\t\t\t\t         \n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c ecrti.S -o $(T)scrti$(objext)\n-\t\t\t\t\t\t\t\t         \n-$(T)scrtn$(objext): scrtn.S\t\t\t\t\t         \n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c ecrti.S -o $(T)scrtn$(objext)\n-\t\t\t\t\t\t\t\t         \n-$(T)scrt0$(objext): scrt0.c\t\t\t\t\t         \n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c ecrti.S -o $(T)scrt0$(objext)\n+MULTILIB_EXTRA_OPTS\t=\n+MULTILIB_MATCHES\t= ${MULTILIB_MATCHES_FLOAT}"}, {"sha": "145fcaede22005c307d17905bd55ca0d95335618", "filename": "gcc/config/rs6000/t-ppccomm", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc/gcc%2Fconfig%2Frs6000%2Ft-ppccomm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc/gcc%2Fconfig%2Frs6000%2Ft-ppccomm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-ppccomm?ref=eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc", "patch": "@@ -0,0 +1,69 @@\n+# Common support for PowerPC eabi, System V targets.\n+\n+# Do not build libgcc1.\n+LIBGCC1 =\n+CROSS_LIBGCC1 =\n+\n+# These are really part of libgcc1, but this will cause them to be\n+# built correctly, so... [taken from t-sparclite]\n+LIB2FUNCS_EXTRA = fp-bit.c dp-bit.c eabi.S eabi-ctors.c tramp.S\n+\n+dp-bit.c: $(srcdir)/config/fp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n+\n+fp-bit.c: $(srcdir)/config/fp-bit.c\n+\techo '#define FLOAT' > fp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n+\n+eabi.S: $(srcdir)/config/rs6000/eabi.asm\n+\tcat $(srcdir)/config/rs6000/eabi.asm > eabi.S\n+\n+eabi-ctors.c: $(srcdir)/config/rs6000/eabi-ctors.c\n+\tcat $(srcdir)/config/rs6000/eabi-ctors.c > eabi-ctors.c\n+\n+tramp.S: $(srcdir)/config/rs6000/tramp.asm\n+\tcat $(srcdir)/config/rs6000/tramp.asm > tramp.S\n+\n+# Switch synonyms\n+MULTILIB_MATCHES_FLOAT\t= msoft-float=mcpu?403 msoft-float=mcpu?821 msoft-float=mcpu?860\n+MULTILIB_MATCHES_ENDIAN\t= mlittle=mlittle-endian mbig=mbig-endian\n+MULTILIB_MATCHES_SYSV\t= mcall-sysv=mcall-sysv-eabi mcall-sysv=mcall-sysv-noeabi\n+\n+LIBGCC = stmp-multilib\n+INSTALL_LIBGCC = install-multilib\n+EXTRA_MULTILIB_PARTS = ecrti$(objext) ecrtn$(objext) scrt0$(objext) scrti$(objext) scrtn$(objext)\n+\n+# We build {e,s}crti.o, {e,s}crtn.o, and scrt0.o which serve to add begin and\n+# end labels to all of the special sections used when we link using gcc.\n+\n+# Assemble startup files.\n+ecrti.S: $(srcdir)/config/rs6000/eabi-ci.asm\n+\tcat $(srcdir)/config/rs6000/eabi-ci.asm >ecrti.S\n+\n+ecrtn.S: $(srcdir)/config/rs6000/eabi-cn.asm\n+\tcat $(srcdir)/config/rs6000/eabi-cn.asm >ecrtn.S\n+\n+scrti.S: $(srcdir)/config/rs6000/sol-ci.asm\n+\tcat $(srcdir)/config/rs6000/sol-ci.asm >scrti.S\n+\n+scrtn.S: $(srcdir)/config/rs6000/sol-cn.asm\n+\tcat $(srcdir)/config/rs6000/sol-cn.asm >scrtn.S\n+\n+scrt0.c: $(srcdir)/config/rs6000/sol-c0.c\n+\tcat $(srcdir)/config/rs6000/sol-c0.c >scrt0.c\n+\n+# Build multiple copies of ?crt{i,n}.o, one for each target switch.\n+$(T)ecrti$(objext): ecrti.S\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c ecrti.S -o $(T)ecrti$(objext)\n+\n+$(T)ecrtn$(objext): ecrtn.S\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c ecrtn.S -o $(T)ecrtn$(objext)\n+\n+$(T)scrti$(objext): scrti.S\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c scrti.S -o $(T)scrti$(objext)\n+\n+$(T)scrtn$(objext): scrtn.S\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c scrtn.S -o $(T)scrtn$(objext)\n+\n+$(T)scrt0$(objext): scrt0.c\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c scrt0.c -o $(T)scrt0$(objext)"}, {"sha": "da4e87fa4a338060171137e5794dffd16cfbff6d", "filename": "gcc/config/rs6000/t-ppcgas", "status": "modified", "additions": 4, "deletions": 67, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc/gcc%2Fconfig%2Frs6000%2Ft-ppcgas", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc/gcc%2Fconfig%2Frs6000%2Ft-ppcgas", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-ppcgas?ref=eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc", "patch": "@@ -1,24 +1,4 @@\n-# Do not build libgcc1.\n-LIBGCC1 =\n-CROSS_LIBGCC1 =\n-\n-# These are really part of libgcc1, but this will cause them to be\n-# built correctly, so... [taken from t-sparclite]\n-LIB2FUNCS_EXTRA = fp-bit.c dp-bit.c eabi.S eabi-ctors.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n-eabi.S: $(srcdir)/config/rs6000/eabi.asm\n-\tcat $(srcdir)/config/rs6000/eabi.asm > eabi.S\n-\n-eabi-ctors.c: $(srcdir)/config/rs6000/eabi-ctors.c\n-\tcat $(srcdir)/config/rs6000/eabi-ctors.c > eabi-ctors.c\n-\n+# PowerPC embedded support with gas.\n # Build libgcc.a with different options.\n \n MULTILIB_OPTIONS\t= msoft-float \\\n@@ -29,14 +9,6 @@ MULTILIB_DIRNAMES\t= nof \\\n \t\t\t  le be \\\n \t\t\t  cs ca sol lin\n \n-MULTILIB_MATCHES\t= mlittle=mlittle-endian \\\n-\t\t\t  mbig=mbig-endian \\\n-\t\t\t  msoft-float=mcpu?403 \\\n-\t\t\t  msoft-float=mcpu?821 \\\n-\t\t\t  msoft-float=mcpu?860 \\\n-\t\t\t  mcall-sysv=mcall-sysv-eabi \\\n-\t\t\t  mcall-sysv=mcall-sysv-noeabi\n-\n MULTILIB_EXTRA_OPTS\t= mrelocatable-lib mno-eabi\n MULTILIB_EXCEPTIONS\t= *mbig/*mcall-solaris* \\\n \t\t\t  *mlittle/*mcall-solaris* \\\n@@ -45,41 +17,6 @@ MULTILIB_EXCEPTIONS\t= *mbig/*mcall-solaris* \\\n \t\t\t  *mlittle/*mcall-linux* \\\n \t\t\t  *msoft-float/*mcall-linux*\n \n-LIBGCC = stmp-multilib\n-INSTALL_LIBGCC = install-multilib\n-EXTRA_MULTILIB_PARTS = ecrti$(objext) ecrtn$(objext) scrt0$(objext) scrti$(objext) scrtn$(objext)\n-\n-# For eabigas we build {e,s}crti.o and {e,s}crtn.o which serve to add begin and\n-# end labels to all of the special sections used when we link using gcc.\n-\n-# Assemble startup files.\n-ecrti.S: $(srcdir)/config/rs6000/eabi-ci.asm\n-\tcat $(srcdir)/config/rs6000/eabi-ci.asm >ecrti.S\n-\n-ecrtn.S: $(srcdir)/config/rs6000/eabi-cn.asm\n-\tcat $(srcdir)/config/rs6000/eabi-cn.asm >ecrtn.S\n-\n-scrti.S: $(srcdir)/config/rs6000/sol-ci.asm\n-\tcat $(srcdir)/config/rs6000/sol-ci.asm >scrti.S\n-\n-scrtn.S: $(srcdir)/config/rs6000/sol-cn.asm\n-\tcat $(srcdir)/config/rs6000/sol-cn.asm >scrtn.S\n-\n-scrt0.c: $(srcdir)/config/rs6000/sol-c0.c\n-\tcat $(srcdir)/config/rs6000/sol-c0.c >scrt0.c\n-\n-# Build multiple copies of ?crt{i,n}.o, one for each target switch.\n-$(T)ecrti$(objext): ecrti.S\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c ecrti.S -o $(T)ecrti$(objext)\n-\n-$(T)ecrtn$(objext): ecrtn.S\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c ecrtn.S -o $(T)ecrtn$(objext)\n-\n-$(T)scrti$(objext): scrti.S\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c ecrti.S -o $(T)scrti$(objext)\n-\n-$(T)scrtn$(objext): scrtn.S\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c ecrti.S -o $(T)scrtn$(objext)\n-\n-$(T)scrt0$(objext): scrt0.c\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c ecrti.S -o $(T)scrt0$(objext)\n+MULTILIB_MATCHES\t= ${MULTILIB_MATCHES_FLOAT} \\\n+\t\t\t  ${MULTILIB_MATCHES_ENDIAN} \\\n+\t\t\t  ${MULTILIB_MATCHES_SYSV}"}, {"sha": "fe1d6ad64c12f1ef9c9d914b712328d41367fa6d", "filename": "gcc/config/rs6000/t-ppcos", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc/gcc%2Fconfig%2Frs6000%2Ft-ppcos", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc/gcc%2Fconfig%2Frs6000%2Ft-ppcos", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-ppcos?ref=eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc", "patch": "@@ -0,0 +1,11 @@\n+# Target config file for a System V based system (Solaris, Linux, Netbsd) with gas\n+\n+# Build libgcc.a with different options.  With gas, build pic libraries\n+# as well no floating point\n+MULTILIB_OPTIONS\t= msoft-float fPIC\n+MULTILIB_DIRNAMES\t= nof pic\n+MULTILIB_EXCEPTIONS\t=\n+MULTILIB_MATCHES\t= ${MULTILIB_MATCHES_FLOAT} \\\n+\t\t\t  fPIC=mrelocatable-lib \\\n+\t\t\t  fPIC=mrelocatable \\\n+\t\t\t  fPIC=fpic"}, {"sha": "57b4701374812022e4a5203c4ca58df6325e3004", "filename": "gcc/config/rs6000/tramp.asm", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc/gcc%2Fconfig%2Frs6000%2Ftramp.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc/gcc%2Fconfig%2Frs6000%2Ftramp.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ftramp.asm?ref=eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc", "patch": "@@ -0,0 +1,122 @@\n+/* CYGNUS LOCAL -- waiting for FSF sources to be restored/meissner */\n+/*\n+ * special support for trampolines\n+ *\n+ *   Copyright (C) 1996 Free Software Foundation, Inc.\n+ *   Written By Michael Meissner\n+ * \n+ * This file is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the\n+ * Free Software Foundation; either version 2, or (at your option) any\n+ * later version.\n+ * \n+ * In addition to the permissions in the GNU General Public License, the\n+ * Free Software Foundation gives you unlimited permission to link the\n+ * compiled version of this file with other programs, and to distribute\n+ * those programs without any restriction coming from the use of this\n+ * file.  (The General Public License restrictions do apply in other\n+ * respects; for example, they cover modification of the file, and\n+ * distribution when not linked into another program.)\n+ * \n+ * This file is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * General Public License for more details.\n+ * \n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; see the file COPYING.  If not, write to\n+ * the Free Software Foundation, 59 Temple Place - Suite 330,\n+ * Boston, MA 02111-1307, USA.\n+ * \n+ *    As a special exception, if you link this library with files\n+ *    compiled with GCC to produce an executable, this does not cause\n+ *    the resulting executable to be covered by the GNU General Public License.\n+ *    This exception does not however invalidate any other reasons why\n+ *    the executable file might be covered by the GNU General Public License.\n+ */ \n+\n+/* Set up trampolines */\n+\n+\t.file\t\"tramp.asm\"\n+\t.section \".text\"\n+\t#include \"ppc-asm.h\"\n+\n+\t.globl\t__trampoline_initial\n+\t.type\t__trampoline_initial,@object\n+\t.align\t2\n+__trampoline_initial:\n+\tmflr\tr0\n+\tbl\t1f\n+.Lfunc = .-__trampoline_initial\n+\t.long\t0\t\t\t/* will be replaced with function address */\n+.Lchain = .-__trampoline_initial\n+\t.long\t0\t\t\t/* will be replaced with static chain */\n+1:\tmflr\tr11\n+\tmtlr\tr0\n+\tlwz\tr0,0(r11)\t\t/* function address */\n+\tlwz\tr11,4(r11)\t\t/* static chain */\n+\tmtctr\tr0\n+\tbctr\n+\n+__trampoline_size = .-__trampoline_initial\n+\t.size\t__trampoline_initial,__trampoline_size\n+\n+        .section \".got2\",\"aw\"\n+.LCTOC1 = .+32768\n+.Ltramp = .-.LCTOC1\n+        .long __trampoline_initial-4\n+\n+\t.section \".text\"\n+.LCL0:\n+        .long .LCTOC1-.LCF0\n+\n+/* R3 = stack address to store trampoline */\n+/* R4 = length of trampoline area */\n+/* R5 = function address */\n+/* R6 = static chain */\n+\n+FUNC_START(__trampoline_setup)\n+\tmflr\tr0\t\t\t/* save return address */\n+        bl\t.LCF0\t\t\t/* load up __trampoline_initial into r7 */\n+.LCF0:\n+        mflr\tr11\n+        lwz\tr12,(.LCL0-.LCF0)(r11)\n+        add\tr11,r12,r11\n+        lwz\tr7,.Ltramp(r11)\t\t/* trampoline addres -4 */\n+\n+\tli\tr8,__trampoline_size\t/* verify that the trampoline is big enough */\n+\tcmpw\tcr1,r8,r4\n+\tsrwi\tr4,r4,2\t\t\t/* # words to move */\n+\taddi\tr9,r3,-4\t\t/* adjust pointer for lwzu */\n+\tmtctr\tr4\n+\tblt\tcr1,.Labort\n+\n+\tmtlr\tr0\n+\n+\t/* Copy the instructions to the stack */\n+.Lmove:\n+\tlwzu\tr10,4(r7)\n+\tstwu\tr10,4(r9)\n+\tbdnz\t.Lmove\n+\n+\t/* Store correct function and static chain */\n+\tstw\tr5,.Lfunc(r3)\n+\tstw\tr6,.Lchain(r3)\n+\n+\t/* Now flush both caches */\n+\tmtctr\tr4\n+.Lcache:\n+\ticbi\t0,r3\n+\tdcbf\t0,r3\n+\taddi\tr3,r3,4\n+\tbdnz\t.Lcache\n+\n+\t/* Finally synchronize things & return */\n+\tsync\n+\tisync\n+\tblr\n+\n+.Labort:\n+\tbl\tabort\n+FUNC_END(__trampoline_setup)\n+/* END CYGNUS LOCAL -- waiting for FSF sources to be restored/meissner */"}, {"sha": "bf29f7ab5b7157dcb914a1c2f6e4b011c0cbf60d", "filename": "gcc/config/rs6000/win-nt.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc/gcc%2Fconfig%2Frs6000%2Fwin-nt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc/gcc%2Fconfig%2Frs6000%2Fwin-nt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fwin-nt.h?ref=eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc", "patch": "@@ -472,3 +472,10 @@ dtors_section ()\t\t\t\t\t\t\t\\\n \n #undef\tHAS_INIT_SECTION\n #define HAS_INIT_SECTION\n+\n+/* Output assembler code for a block containing the constant parts\n+   of a trampoline, leaving space for the variable parts.\n+\n+   The trampoline should set the static chain pointer to value placed\n+   into the trampoline and should branch to the specified routine.  */\n+#define TRAMPOLINE_TEMPLATE(FILE) rs6000_trampoline_template (FILE)"}, {"sha": "9e830dcc6ebfad4d078acc5da828c285dc811f69", "filename": "gcc/ginclude/ppc-asm.h", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc/gcc%2Fginclude%2Fppc-asm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc/gcc%2Fginclude%2Fppc-asm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fppc-asm.h?ref=eaf1bcf15bd8600a10e9f874caf4e6439d0a4bbc", "patch": "@@ -35,6 +35,48 @@\n #define r29\t29\n #define r30\t30\n #define r31\t31\n+\n+#define cr0\t0\n+#define cr1\t1\n+#define cr2\t2\n+#define cr3\t3\n+#define cr4\t4\n+#define cr5\t5\n+#define cr6\t6\n+#define cr7\t7\n+\n+#define f0\t0\n+#define f1\t1\n+#define f2\t2\n+#define f3\t3\n+#define f4\t4\n+#define f5\t5\n+#define f6\t6\n+#define f7\t7\n+#define f8\t8\n+#define f9\t9\n+#define f10\t10\n+#define f11\t11\n+#define f12\t12\n+#define f13\t13\n+#define f14\t14\n+#define f15\t15\n+#define f16\t16\n+#define f17\t17\n+#define f18\t18\n+#define f19     19\n+#define f20\t20\n+#define f21\t21\n+#define f22\t22\n+#define f23\t23\n+#define f24\t24\n+#define f25\t25\n+#define f26\t26\n+#define f27\t27\n+#define f28\t28\n+#define f29\t29\n+#define f30\t30\n+#define f31\t31\n #endif\n \n /*"}]}