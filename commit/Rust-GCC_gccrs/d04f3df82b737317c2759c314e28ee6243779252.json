{"sha": "d04f3df82b737317c2759c314e28ee6243779252", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA0ZjNkZjgyYjczNzMxN2MyNzU5YzMxNGUyOGVlNjI0Mzc3OTI1Mg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-08T17:05:32Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-08T17:11:43Z"}, "message": "c++: Named module global initializers\n\nC++ 20 modules adds some new rules about when the global initializers\nof imported modules run.  They must run no later than before any\ninitializers in the importer that appear after the import.  To provide\nthis, each named module emits an idempotent global initializer that\ncalls the global initializer functions of its imports (these of course\nmay call further import initializers).  This is the machinery in our\nglobal-init emission to accomplish that, other than the actual\nemission of calls, which is in the module file.  The naming of this\nglobal init is a new piece of the ABI.\n\nFWIW, the module's emitter does some optimization to avoid calling a\ndirect import's initializer when it can determine thatr import is also\nindirect.\n\n\tgcc/cp/\n\t* decl2.c (start_objects): Refactor and adjust for named module\n\tinitializers.\n\t(finish_objects): Likewise.\n\t(generate_ctor_or_dtor_function): Likewise.\n\t* module.cc (module_initializer_kind)\n\t(module_add_import_initializers): Stubs.", "tree": {"sha": "e9a998b1d17a9b9cdb5b73ac46ad9105045b7ee7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9a998b1d17a9b9cdb5b73ac46ad9105045b7ee7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d04f3df82b737317c2759c314e28ee6243779252", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d04f3df82b737317c2759c314e28ee6243779252", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d04f3df82b737317c2759c314e28ee6243779252", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d04f3df82b737317c2759c314e28ee6243779252/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47"}], "stats": {"total": 137, "additions": 92, "deletions": 45}, "files": [{"sha": "e713033a7f472cf88f02926ed0fbaa9622d32c1e", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 81, "deletions": 45, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04f3df82b737317c2759c314e28ee6243779252/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04f3df82b737317c2759c314e28ee6243779252/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=d04f3df82b737317c2759c314e28ee6243779252", "patch": "@@ -3636,35 +3636,45 @@ generate_tls_wrapper (tree fn)\n static tree\n start_objects (int method_type, int initp)\n {\n-  tree body;\n-  tree fndecl;\n-  char type[14];\n-\n   /* Make ctor or dtor function.  METHOD_TYPE may be 'I' or 'D'.  */\n+  int module_init = 0;\n+\n+  if (initp == DEFAULT_INIT_PRIORITY && method_type == 'I')\n+    module_init = module_initializer_kind ();\n \n-  if (initp != DEFAULT_INIT_PRIORITY)\n+  tree name = NULL_TREE;\n+  if (module_init > 0)\n+    name = mangle_module_global_init (0);\n+  else\n     {\n-      char joiner;\n+      char type[14];\n \n+      unsigned len = sprintf (type, \"sub_%c\", method_type);\n+      if (initp != DEFAULT_INIT_PRIORITY)\n+\t{\n+\t  char joiner = '_';\n #ifdef JOINER\n-      joiner = JOINER;\n-#else\n-      joiner = '_';\n+\t  joiner = JOINER;\n #endif\n+\t  type[len++] = joiner;\n+\t  sprintf (type + len, \"%.5u\", initp);\n+\t}\n+      name = get_file_function_name (type);\n+    }\n \n-      sprintf (type, \"sub_%c%c%.5u\", method_type, joiner, initp);\n+  tree fntype =\tbuild_function_type (void_type_node, void_list_node);\n+  tree fndecl = build_lang_decl (FUNCTION_DECL, name, fntype);\n+  DECL_CONTEXT (fndecl) = FROB_CONTEXT (global_namespace);\n+  if (module_init > 0)\n+    {\n+      SET_DECL_ASSEMBLER_NAME (fndecl, name);\n+      TREE_PUBLIC (fndecl) = true;\n+      determine_visibility (fndecl);\n     }\n   else\n-    sprintf (type, \"sub_%c\", method_type);\n-\n-  fndecl = build_lang_decl (FUNCTION_DECL,\n-\t\t\t    get_file_function_name (type),\n-\t\t\t    build_function_type_list (void_type_node,\n-\t\t\t\t\t\t      NULL_TREE));\n+    TREE_PUBLIC (fndecl) = 0;\n   start_preparsed_function (fndecl, /*attrs=*/NULL_TREE, SF_PRE_PARSED);\n \n-  TREE_PUBLIC (current_function_decl) = 0;\n-\n   /* Mark as artificial because it's not explicitly in the user's\n      source code.  */\n   DECL_ARTIFICIAL (current_function_decl) = 1;\n@@ -3678,7 +3688,35 @@ start_objects (int method_type, int initp)\n   else\n     DECL_GLOBAL_DTOR_P (current_function_decl) = 1;\n \n-  body = begin_compound_stmt (BCS_FN_BODY);\n+  tree body = begin_compound_stmt (BCS_FN_BODY);\n+\n+  if (module_init > 0)\n+    {\n+      // 'static bool __in_chrg = false;\n+      // if (__inchrg) return;\n+      // __inchrg = true\n+      tree var = build_lang_decl (VAR_DECL, in_charge_identifier,\n+\t\t\t\t  boolean_type_node);\n+      DECL_CONTEXT (var) = fndecl;\n+      DECL_ARTIFICIAL (var) = true;\n+      TREE_STATIC (var) = true;\n+      pushdecl (var);\n+      cp_finish_decl (var, NULL_TREE, false, NULL_TREE, 0);\n+\n+      tree if_stmt = begin_if_stmt ();\n+      finish_if_stmt_cond (var, if_stmt);\n+      finish_return_stmt (NULL_TREE);\n+      finish_then_clause (if_stmt);\n+      finish_if_stmt (if_stmt);\n+\n+      tree assign = build2 (MODIFY_EXPR, boolean_type_node,\n+\t\t\t    var, boolean_true_node);\n+      TREE_SIDE_EFFECTS (assign) = true;\n+      finish_expr_stmt (assign);\n+    }\n+\n+  if (module_init)\n+    module_add_import_initializers ();\n \n   return body;\n }\n@@ -3689,11 +3727,9 @@ start_objects (int method_type, int initp)\n static void\n finish_objects (int method_type, int initp, tree body)\n {\n-  tree fn;\n-\n   /* Finish up.  */\n   finish_compound_stmt (body);\n-  fn = finish_function (/*inline_p=*/false);\n+  tree fn = finish_function (/*inline_p=*/false);\n \n   if (method_type == 'I')\n     {\n@@ -4228,50 +4264,50 @@ static void\n generate_ctor_or_dtor_function (bool constructor_p, int priority,\n \t\t\t\tlocation_t *locus)\n {\n-  char function_key;\n-  tree fndecl;\n-  tree body;\n-  size_t i;\n-\n   input_location = *locus;\n-  /* ??? */\n-  /* Was: locus->line++; */\n \n   /* We use `I' to indicate initialization and `D' to indicate\n      destruction.  */\n-  function_key = constructor_p ? 'I' : 'D';\n+  char function_key = constructor_p ? 'I' : 'D';\n \n   /* We emit the function lazily, to avoid generating empty\n      global constructors and destructors.  */\n-  body = NULL_TREE;\n+  tree body = NULL_TREE;\n \n-  /* For Objective-C++, we may need to initialize metadata found in this module.\n-     This must be done _before_ any other static initializations.  */\n-  if (c_dialect_objc () && (priority == DEFAULT_INIT_PRIORITY)\n-      && constructor_p && objc_static_init_needed_p ())\n+  if (constructor_p && priority == DEFAULT_INIT_PRIORITY)\n     {\n-      body = start_objects (function_key, priority);\n-      objc_generate_static_init_call (NULL_TREE);\n+      bool objc = c_dialect_objc () && objc_static_init_needed_p ();\n+\n+      /* We may have module initialization to emit and/or insert\n+\t before other intializations.  */\n+      if (module_initializer_kind () || objc)\n+\tbody = start_objects (function_key, priority);\n+\n+      /* For Objective-C++, we may need to initialize metadata found\n+         in this module.  This must be done _before_ any other static\n+         initializations.  */\n+      if (objc)\n+\tobjc_generate_static_init_call (NULL_TREE);\n     }\n \n   /* Call the static storage duration function with appropriate\n      arguments.  */\n+  tree fndecl;\n+  size_t i;\n   FOR_EACH_VEC_SAFE_ELT (ssdf_decls, i, fndecl)\n     {\n       /* Calls to pure or const functions will expand to nothing.  */\n       if (! (flags_from_decl_or_type (fndecl) & (ECF_CONST | ECF_PURE)))\n \t{\n-\t  tree call;\n-\n \t  if (! body)\n \t    body = start_objects (function_key, priority);\n \n-\t  call = cp_build_function_call_nary (fndecl, tf_warning_or_error,\n-\t\t\t\t\t      build_int_cst (NULL_TREE,\n-\t\t\t\t\t\t\t     constructor_p),\n-\t\t\t\t\t      build_int_cst (NULL_TREE,\n-\t\t\t\t\t\t\t     priority),\n-\t\t\t\t\t      NULL_TREE);\n+\t  tree call = cp_build_function_call_nary (fndecl, tf_warning_or_error,\n+\t\t\t\t\t\t   build_int_cst (NULL_TREE,\n+\t\t\t\t\t\t\t\t  constructor_p),\n+\t\t\t\t\t\t   build_int_cst (NULL_TREE,\n+\t\t\t\t\t\t\t\t  priority),\n+\t\t\t\t\t\t   NULL_TREE);\n \t  finish_expr_stmt (call);\n \t}\n     }"}, {"sha": "705804a5515fb04db293cf3fa4770352faecd587", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04f3df82b737317c2759c314e28ee6243779252/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04f3df82b737317c2759c314e28ee6243779252/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=d04f3df82b737317c2759c314e28ee6243779252", "patch": "@@ -82,6 +82,17 @@ mangle_module_fini ()\n {\n }\n \n+int\n+module_initializer_kind ()\n+{\n+  return 0;\n+}\n+\n+void\n+module_add_import_initializers ()\n+{\n+}\n+\n int\n get_originating_module (tree, bool)\n {"}]}