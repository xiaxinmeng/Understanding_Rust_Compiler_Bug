{"sha": "169d8507caebe73a977bcdb9f16cbb6254e7efd8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY5ZDg1MDdjYWViZTczYTk3N2JjZGI5ZjE2Y2JiNjI1NGU3ZWZkOA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2012-11-27T13:56:31Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2012-11-27T13:56:31Z"}, "message": "Handle OPT_SPECIAL_XXX in LTO\n\n\tPR lto/54795\n\t* lto-opts.c (lto_write_options): Also handle\n\tOPT_SPECIAL_unknown, OPT_SPECIAL_ignore and\n\tOPT_SPECIAL_program_name.\n\n\tPR lto/55474\n\t* lto-wrapper.c (merge_and_complain): Handle\n\tOPT_SPECIAL_unknown, OPT_SPECIAL_ignore,\n\tOPT_SPECIAL_program_name and OPT_SPECIAL_input_file.\n\nCo-Authored-By: Markus Trippelsdorf <markus@trippelsdorf.de>\n\nFrom-SVN: r193848", "tree": {"sha": "1ba1c003e58f2e70873c2d801c76c88b4b22bb13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ba1c003e58f2e70873c2d801c76c88b4b22bb13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/169d8507caebe73a977bcdb9f16cbb6254e7efd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/169d8507caebe73a977bcdb9f16cbb6254e7efd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/169d8507caebe73a977bcdb9f16cbb6254e7efd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/169d8507caebe73a977bcdb9f16cbb6254e7efd8/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5a8608353261070997bb1bc54e16f5eba8436b5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a8608353261070997bb1bc54e16f5eba8436b5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a8608353261070997bb1bc54e16f5eba8436b5d"}], "stats": {"total": 44, "additions": 33, "deletions": 11}, "files": [{"sha": "1202386d5d8f14418278ae1ed4a341319f0ae277", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169d8507caebe73a977bcdb9f16cbb6254e7efd8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169d8507caebe73a977bcdb9f16cbb6254e7efd8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=169d8507caebe73a977bcdb9f16cbb6254e7efd8", "patch": "@@ -1,3 +1,16 @@\n+2012-11-27  H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Markus Trippelsdorf  <markus@trippelsdorf.de>\n+\n+\tPR lto/54795\n+\t* lto-opts.c (lto_write_options): Also handle\n+\tOPT_SPECIAL_unknown, OPT_SPECIAL_ignore and\n+\tOPT_SPECIAL_program_name.\n+\n+\tPR lto/55474\n+\t* lto-wrapper.c (merge_and_complain): Handle\n+\tOPT_SPECIAL_unknown, OPT_SPECIAL_ignore,\n+\tOPT_SPECIAL_program_name and OPT_SPECIAL_input_file.\n+\n 2012-11-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/52650"}, {"sha": "a61a26ff56f66b7f5ce6314583a2c3000cdfd174", "filename": "gcc/lto-opts.c", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169d8507caebe73a977bcdb9f16cbb6254e7efd8/gcc%2Flto-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169d8507caebe73a977bcdb9f16cbb6254e7efd8/gcc%2Flto-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-opts.c?ref=169d8507caebe73a977bcdb9f16cbb6254e7efd8", "patch": "@@ -93,6 +93,20 @@ lto_write_options (void)\n     {\n       struct cl_decoded_option *option = &save_decoded_options[i];\n \n+      /* Skip explicitly some common options that we do not need.  */\n+      switch (option->opt_index)\n+      {\n+\tcase OPT_dumpbase:\n+\tcase OPT_SPECIAL_unknown:\n+\tcase OPT_SPECIAL_ignore:\n+\tcase OPT_SPECIAL_program_name:\n+\tcase OPT_SPECIAL_input_file:\n+\t  continue;\n+\n+\tdefault:\n+\t  break;\n+      }\n+\n       /* Skip frontend and driver specific options here.  */\n       if (!(cl_options[option->opt_index].flags & (CL_COMMON|CL_TARGET|CL_LTO)))\n \tcontinue;\n@@ -108,17 +122,6 @@ lto_write_options (void)\n       if (cl_options[option->opt_index].flags & (CL_DRIVER|CL_WARNING))\n \tcontinue;\n \n-      /* Skip explicitly some common options that we do not need.  */\n-      switch (option->opt_index)\n-\t{\n-\tcase OPT_dumpbase:\n-\tcase OPT_SPECIAL_input_file:\n-\t  continue;\n-\n-\tdefault:\n-\t  break;\n-\t}\n-\n       for (j = 0; j < option->canonical_option_num_elements; ++j)\n \tappend_to_collect_gcc_options (&temporary_obstack, &first_p,\n \t\t\t\t       option->canonical_option[j]);"}, {"sha": "24de743306a0875d66922a9c66f7f8b55ccf23c4", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169d8507caebe73a977bcdb9f16cbb6254e7efd8/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169d8507caebe73a977bcdb9f16cbb6254e7efd8/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=169d8507caebe73a977bcdb9f16cbb6254e7efd8", "patch": "@@ -393,6 +393,12 @@ merge_and_complain (struct cl_decoded_option **decoded_options,\n       struct cl_decoded_option *foption = &fdecoded_options[i];\n       switch (foption->opt_index)\n \t{\n+\tcase OPT_SPECIAL_unknown:\n+\tcase OPT_SPECIAL_ignore:\n+\tcase OPT_SPECIAL_program_name:\n+\tcase OPT_SPECIAL_input_file:\n+\t  break;\n+\n \tdefault:\n \t  if (!(cl_options[foption->opt_index].flags & CL_TARGET))\n \t    break;"}]}