{"sha": "4b985e20549b2d093ea64b2e4cf63cada964fac1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI5ODVlMjA1NDliMmQwOTNlYTY0YjJlNGNmNjNjYWRhOTY0ZmFjMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-03-30T09:32:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-03-30T09:32:55Z"}, "message": "[multiple changes]\n\n2012-03-30  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch5.adb, sem_util.adb, exp_ch4.adb: Minor comment updates.\n\n2012-03-30  Yannick Moy  <moy@adacore.com>\n\n\t* lib-xref-alfa.adb (Add_Alfa_File): Treat possibly 2 units at the same\n\ttime, putting all scopes in the same Alfa file.\n\t(Add_Alfa_Xrefs): Correct errors in comparison function. Correct value\n\tof Def component.\n\t(Collect_Alfa): Possibly pass 2 units to Add_Alfa_File.\n\nFrom-SVN: r186006", "tree": {"sha": "83ddb01d7c12320ef6a79e3916add007a6f3a3dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83ddb01d7c12320ef6a79e3916add007a6f3a3dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b985e20549b2d093ea64b2e4cf63cada964fac1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b985e20549b2d093ea64b2e4cf63cada964fac1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b985e20549b2d093ea64b2e4cf63cada964fac1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b985e20549b2d093ea64b2e4cf63cada964fac1/comments", "author": null, "committer": null, "parents": [{"sha": "e0adfeb41a96835d79447e2d091a69749da5230c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0adfeb41a96835d79447e2d091a69749da5230c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0adfeb41a96835d79447e2d091a69749da5230c"}], "stats": {"total": 108, "additions": 86, "deletions": 22}, "files": [{"sha": "34217e12873d7e275a6f231775560f2f7cb3d46c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b985e20549b2d093ea64b2e4cf63cada964fac1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b985e20549b2d093ea64b2e4cf63cada964fac1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4b985e20549b2d093ea64b2e4cf63cada964fac1", "patch": "@@ -1,3 +1,15 @@\n+2012-03-30  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch5.adb, sem_util.adb, exp_ch4.adb: Minor comment updates.\n+\n+2012-03-30  Yannick Moy  <moy@adacore.com>\n+\n+\t* lib-xref-alfa.adb (Add_Alfa_File): Treat possibly 2 units at the same\n+\ttime, putting all scopes in the same Alfa file.\n+\t(Add_Alfa_Xrefs): Correct errors in comparison function. Correct value\n+\tof Def component.\n+\t(Collect_Alfa): Possibly pass 2 units to Add_Alfa_File.\n+\n 2012-03-30  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_util.adb (Is_Secondary_Stack_BIP_Func_Call): Handle a case where"}, {"sha": "09949a1c65088ab81193654133c2d3587b59592e", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b985e20549b2d093ea64b2e4cf63cada964fac1/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b985e20549b2d093ea64b2e4cf63cada964fac1/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=4b985e20549b2d093ea64b2e4cf63cada964fac1", "patch": "@@ -3072,7 +3072,7 @@ package body Exp_Ch4 is\n          Low_Bound := Opnd_Low_Bound (1);\n \n       --  OK, we don't know the lower bound, we have to build a horrible\n-      --  expression actions node of the form\n+      --  conditional expression node of the form\n \n       --     if Cond1'Length /= 0 then\n       --        Opnd1 low bound\n@@ -3998,9 +3998,9 @@ package body Exp_Ch4 is\n                   end if;\n                end;\n \n-               --  We set the allocator as analyzed so that when we analyze the\n-               --  expression actions node, we do not get an unwanted recursive\n-               --  expansion of the allocator expression.\n+               --  We set the allocator as analyzed so that when we analyze\n+               --  the conditional expression node, we do not get an unwanted\n+               --  recursive expansion of the allocator expression.\n \n                Set_Analyzed (N, True);\n                Nod := Relocate_Node (N);\n@@ -4279,7 +4279,7 @@ package body Exp_Ch4 is\n    -- Expand_N_Conditional_Expression --\n    -------------------------------------\n \n-   --  Deal with limited types and expression actions\n+   --  Deal with limited types and condition actions\n \n    procedure Expand_N_Conditional_Expression (N : Node_Id) is\n       Loc    : constant Source_Ptr := Sloc (N);"}, {"sha": "82fc705ecfff2b24d77e184493af4d53c1aec070", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b985e20549b2d093ea64b2e4cf63cada964fac1/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b985e20549b2d093ea64b2e4cf63cada964fac1/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=4b985e20549b2d093ea64b2e4cf63cada964fac1", "patch": "@@ -2777,7 +2777,7 @@ package body Exp_Ch5 is\n       end loop;\n \n       --  Loop through elsif parts, dealing with constant conditions and\n-      --  possible expression actions that are present.\n+      --  possible condition actions that are present.\n \n       if Present (Elsif_Parts (N)) then\n          E := First (Elsif_Parts (N));"}, {"sha": "e63863c39e6b0757d49bc687a2152714251b3536", "filename": "gcc/ada/lib-xref-alfa.adb", "status": "modified", "additions": 68, "deletions": 15, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b985e20549b2d093ea64b2e4cf63cada964fac1/gcc%2Fada%2Flib-xref-alfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b985e20549b2d093ea64b2e4cf63cada964fac1/gcc%2Fada%2Flib-xref-alfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-alfa.adb?ref=4b985e20549b2d093ea64b2e4cf63cada964fac1", "patch": "@@ -85,9 +85,12 @@ package body Alfa is\n    -- Local Subprograms --\n    -----------------------\n \n-   procedure Add_Alfa_File (U : Unit_Number_Type; D : Nat);\n-   --  Add file U and all scopes in U to the tables Alfa_File_Table and\n-   --  Alfa_Scope_Table.\n+   procedure Add_Alfa_File (Ubody, Uspec : Unit_Number_Type; Dspec : Nat);\n+   --  Add file and corresponding scopes for unit to the tables Alfa_File_Table\n+   --  and Alfa_Scope_Table. When two units are present for the same\n+   --  compilation unit, as it happens for library-level instantiations of\n+   --  generics, then Ubody /= Uspec, and all scopes are added to the same\n+   --  Alfa file. Otherwise Ubody = Uspec.\n \n    procedure Add_Alfa_Scope (N : Node_Id);\n    --  Add scope N to the table Alfa_Scope_Table\n@@ -128,8 +131,8 @@ package body Alfa is\n    -- Add_Alfa_File --\n    -------------------\n \n-   procedure Add_Alfa_File (U : Unit_Number_Type; D : Nat) is\n-      File : constant Source_File_Index := Source_Index (U);\n+   procedure Add_Alfa_File (Ubody, Uspec : Unit_Number_Type; Dspec : Nat) is\n+      File : constant Source_File_Index := Source_Index (Uspec);\n       From : Scope_Index;\n \n       File_Name      : String_Ptr;\n@@ -145,16 +148,29 @@ package body Alfa is\n \n       From := Alfa_Scope_Table.Last + 1;\n \n-      --  Unit U might not have an associated compilation unit, as seen in code\n+      --  Unit might not have an associated compilation unit, as seen in code\n       --  filling Sdep_Table in Write_ALI.\n \n-      if Present (Cunit (U)) then\n+      if Present (Cunit (Ubody)) then\n          Traverse_Compilation_Unit\n-           (CU           => Cunit (U),\n+           (CU           => Cunit (Ubody),\n             Process      => Detect_And_Add_Alfa_Scope'Access,\n             Inside_Stubs => False);\n       end if;\n \n+      --  When two units are present for the same compilation unit, as it\n+      --  happens for library-level instantiations of generics, then add all\n+      --  scopes to the same Alfa file.\n+\n+      if Ubody /= Uspec then\n+         if Present (Cunit (Uspec)) then\n+            Traverse_Compilation_Unit\n+              (CU           => Cunit (Uspec),\n+               Process      => Detect_And_Add_Alfa_Scope'Access,\n+               Inside_Stubs => False);\n+         end if;\n+      end if;\n+\n       --  Update scope numbers\n \n       declare\n@@ -166,7 +182,7 @@ package body Alfa is\n                S : Alfa_Scope_Record renames Alfa_Scope_Table.Table (Index);\n             begin\n                S.Scope_Num := Scope_Id;\n-               S.File_Num  := D;\n+               S.File_Num  := Dspec;\n                Scope_Id    := Scope_Id + 1;\n             end;\n          end loop;\n@@ -199,9 +215,9 @@ package body Alfa is\n       File_Name := new String'(Name_Buffer (1 .. Name_Len));\n \n       --  For subunits, also retrieve the file name of the unit. Only do so if\n-      --  unit U has an associated compilation unit.\n+      --  unit has an associated compilation unit.\n \n-      if Present (Cunit (U))\n+      if Present (Cunit (Uspec))\n         and then Present (Cunit (Unit (File)))\n         and then Nkind (Unit (Cunit (Unit (File)))) = N_Subunit\n       then\n@@ -212,7 +228,7 @@ package body Alfa is\n       Alfa_File_Table.Append (\n         (File_Name      => File_Name,\n          Unit_File_Name => Unit_File_Name,\n-         File_Num       => D,\n+         File_Num       => Dspec,\n          From_Scope     => From,\n          To_Scope       => Alfa_Scope_Table.Last));\n    end Add_Alfa_File;\n@@ -554,6 +570,13 @@ package body Alfa is\n          elsif T1.Def /= T2.Def then\n             return T1.Def < T2.Def;\n \n+         --  The following should be commented, it sure looks like a test,\n+         --  but it sits uncommented between the \"third test\" and the \"fourth\n+         --  test! ??? Shouldn't this in any case be an assertion ???\n+\n+         elsif T1.Key.Ent /= T2.Key.Ent then\n+            raise Program_Error;\n+\n          --  Fourth test: if reference is in same unit as entity definition,\n          --  sort first.\n \n@@ -576,7 +599,7 @@ package body Alfa is\n          then\n             return True;\n \n-         elsif T1.Ent_Scope_File = T1.Key.Lun\n+         elsif T2.Ent_Scope_File = T2.Key.Lun\n            and then T1.Key.Ref_Scope /= T2.Key.Ref_Scope\n            and then T2.Key.Ent_Scope = T2.Key.Ref_Scope\n          then\n@@ -679,6 +702,13 @@ package body Alfa is\n          Rnums (Nrefs) := Xrefs.Last;\n       end loop;\n \n+      --  Capture the definition Sloc values. As in the case of normal cross\n+      --  references, we have to wait until now to get the correct value.\n+\n+      for Index in 1 .. Nrefs loop\n+         Xrefs.Table (Index).Def := Sloc (Xrefs.Table (Index).Key.Ent);\n+      end loop;\n+\n       --  Eliminate entries not appropriate for Alfa. Done prior to sorting\n       --  cross-references, as it discards useless references which do not have\n       --  a proper format for the comparison function (like no location).\n@@ -839,6 +869,9 @@ package body Alfa is\n    ------------------\n \n    procedure Collect_Alfa (Sdep_Table : Unit_Ref_Table; Num_Sdep : Nat) is\n+      D1 : Nat;\n+      D2 : Nat;\n+\n    begin\n       --  Cross-references should have been computed first\n \n@@ -848,8 +881,28 @@ package body Alfa is\n \n       --  Generate file and scope Alfa information\n \n-      for D in 1 .. Num_Sdep loop\n-         Add_Alfa_File (U => Sdep_Table (D), D => D);\n+      D1 := 1;\n+      while D1 <= Num_Sdep loop\n+\n+         --  In rare cases, when treating the library-level instantiation of a\n+         --  generic, two consecutive units refer to the same compilation unit\n+         --  node and entity. In that case, treat them as a single unit for the\n+         --  sake of Alfa cross references by passing to Add_Alfa_File.\n+\n+         if D1 < Num_Sdep\n+           and then Cunit_Entity (Sdep_Table (D1)) =\n+                    Cunit_Entity (Sdep_Table (D1 + 1))\n+         then\n+            D2 := D1 + 1;\n+         else\n+            D2 := D1;\n+         end if;\n+\n+         Add_Alfa_File\n+           (Ubody => Sdep_Table (D1),\n+            Uspec => Sdep_Table (D2),\n+            Dspec => D2);\n+         D1 := D2 + 1;\n       end loop;\n \n       --  Fill in the spec information when relevant"}, {"sha": "50200e73145d11e534066b33cd16343057ec4431", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b985e20549b2d093ea64b2e4cf63cada964fac1/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b985e20549b2d093ea64b2e4cf63cada964fac1/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=4b985e20549b2d093ea64b2e4cf63cada964fac1", "patch": "@@ -8674,7 +8674,6 @@ package body Sem_Util is\n             --  only affects the generation of internal expanded code, since\n             --  calls to instantiations of Unchecked_Conversion are never\n             --  considered variables (since they are function calls).\n-            --  This is also true for expression actions.\n \n             when N_Unchecked_Type_Conversion =>\n                return Is_Variable (Expression (Orig_Node));"}]}