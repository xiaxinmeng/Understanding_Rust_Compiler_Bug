{"sha": "63be02dbae005d1fe195538d17abb76cc28e6e8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNiZTAyZGJhZTAwNWQxZmUxOTU1MzhkMTdhYmI3NmNjMjhlNmU4ZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-08-14T16:28:30Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-08-14T16:28:30Z"}, "message": "i386.h (MODES_TIEABLE_P): Reorganize to shut up warnings.\n\n\t* i386.h (MODES_TIEABLE_P): Reorganize to shut up warnings.\n\t* alias.c (memrefs_conflict_p): Add braces to shut up warnings.\n\t* cse.c (cse_basic_block): Add parens to shut up warnings.\n\nFrom-SVN: r21734", "tree": {"sha": "fa8eb8dc086c729e2ecfef30c355044a7e7af60c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa8eb8dc086c729e2ecfef30c355044a7e7af60c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63be02dbae005d1fe195538d17abb76cc28e6e8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63be02dbae005d1fe195538d17abb76cc28e6e8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63be02dbae005d1fe195538d17abb76cc28e6e8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63be02dbae005d1fe195538d17abb76cc28e6e8e/comments", "author": null, "committer": null, "parents": [{"sha": "f710f868cbda44939f994e843d33e85c7ea1bdb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f710f868cbda44939f994e843d33e85c7ea1bdb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f710f868cbda44939f994e843d33e85c7ea1bdb5"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "0a84cba7563c937e813d7860411f4fd7a0ee797a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63be02dbae005d1fe195538d17abb76cc28e6e8e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63be02dbae005d1fe195538d17abb76cc28e6e8e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63be02dbae005d1fe195538d17abb76cc28e6e8e", "patch": "@@ -1,3 +1,9 @@\n+Fri Aug 14 14:12:59 1998  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* i386.h (MODES_TIEABLE_P): Reorganize to shut up warnings.\n+\t* alias.c (memrefs_conflict_p): Add braces to shut up warnings.\n+\t* cse.c (cse_basic_block): Add parens to shut up warnings.\n+\n Fri Aug 14 12:58:21 1998  David S. Miller  <davem@pierdol.cobaltmicro.com>\n \n \t* config/sparc/sparc.c (sparc_emit_set_const64_quick2,\n@@ -26,8 +32,8 @@ Fri Aug 14 21:52:53 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n Fri Aug 14 16:50:10 1998  John Carr  <jfc@mit.edu>\n \n-\t* genrecog.c (add_to_sequence): Fatal error if the modes of the operands\n-\tof SET are incompatible.\n+\t* genrecog.c (add_to_sequence): Fatal error if the modes of the\n+\toperands of SET are incompatible.\n \n \t* alpha.md: Fix max and min patterns so modes of SET operands match.\n "}, {"sha": "8e0d21bef64ce88b3b275412d45710da9e57ddfd", "filename": "gcc/alias.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63be02dbae005d1fe195538d17abb76cc28e6e8e/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63be02dbae005d1fe195538d17abb76cc28e6e8e/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=63be02dbae005d1fe195538d17abb76cc28e6e8e", "patch": "@@ -726,11 +726,14 @@ memrefs_conflict_p (xsize, x, ysize, y, c)\n \t  if (rtx_equal_for_memref_p (x0, y0))\n \t    return memrefs_conflict_p (xsize, x1, ysize, y1, c);\n \t  if (GET_CODE (x1) == CONST_INT)\n-\t    if (GET_CODE (y1) == CONST_INT)\n-\t      return memrefs_conflict_p (xsize, x0, ysize, y0,\n-\t\t\t\t\t c - INTVAL (x1) + INTVAL (y1));\n-\t    else\n-\t      return memrefs_conflict_p (xsize, x0, ysize, y, c - INTVAL (x1));\n+\t    {\n+\t      if (GET_CODE (y1) == CONST_INT)\n+\t\treturn memrefs_conflict_p (xsize, x0, ysize, y0,\n+\t\t\t\t\t   c - INTVAL (x1) + INTVAL (y1));\n+\t      else\n+\t\treturn memrefs_conflict_p (xsize, x0, ysize, y,\n+\t\t\t\t\t   c - INTVAL (x1));\n+\t    }\n \t  else if (GET_CODE (y1) == CONST_INT)\n \t    return memrefs_conflict_p (xsize, x, ysize, y0, c + INTVAL (y1));\n "}, {"sha": "540cfec35f5a411a306045e4922907d33e51aa8a", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63be02dbae005d1fe195538d17abb76cc28e6e8e/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63be02dbae005d1fe195538d17abb76cc28e6e8e/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=63be02dbae005d1fe195538d17abb76cc28e6e8e", "patch": "@@ -664,8 +664,8 @@ extern int ix86_arch;\n \n #define MODES_TIEABLE_P(MODE1, MODE2)\t\t\t\t\\\n   ((MODE1) == (MODE2)\t\t\t\t\t\t\\\n-   || ((MODE1) == SImode && (MODE2) == HImode\t\t\t\\\n-       || (MODE1) == HImode && (MODE2) == SImode))\n+   || ((MODE1) == SImode && (MODE2) == HImode)\t\t\t\\\n+   || ((MODE1) == HImode && (MODE2) == SImode))\n \n /* Specify the registers used for certain standard purposes.\n    The values of these macros are register numbers.  */"}, {"sha": "94e80c3ee6d6a4be396432194eac2e823561ccb5", "filename": "gcc/cse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63be02dbae005d1fe195538d17abb76cc28e6e8e/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63be02dbae005d1fe195538d17abb76cc28e6e8e/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=63be02dbae005d1fe195538d17abb76cc28e6e8e", "patch": "@@ -8647,7 +8647,7 @@ cse_basic_block (from, to, next_branch, around_loop)\n \t     its destination is the result of the block and hence should be\n \t     recorded.  */\n \n-\t  if (p = find_reg_note (insn, REG_LIBCALL, NULL_RTX))\n+\t  if ((p = find_reg_note (insn, REG_LIBCALL, NULL_RTX)))\n \t    libcall_insn = XEXP (p, 0);\n \t  else if (find_reg_note (insn, REG_RETVAL, NULL_RTX))\n \t    libcall_insn = NULL_RTX;"}]}