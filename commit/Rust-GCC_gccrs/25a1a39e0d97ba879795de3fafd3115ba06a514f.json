{"sha": "25a1a39e0d97ba879795de3fafd3115ba06a514f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVhMWEzOWUwZDk3YmE4Nzk3OTVkZTNmYWZkMzExNWJhMDZhNTE0Zg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-06-07T02:10:55Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-06-07T02:10:55Z"}, "message": "tree.h (lvalue_or_else): Delete function prototype.\n\n\n\t* tree.h (lvalue_or_else): Delete function prototype.\n\t* c-typeck.c (lvalue_or_else): Make static.  Add static prototype.\n\t* cp/cp-tree.h (lvalue_or_else): Add function prototype.\n\nFrom-SVN: r82679", "tree": {"sha": "961f94e941344d1d60e4d74f3e9ca46289b5ae10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/961f94e941344d1d60e4d74f3e9ca46289b5ae10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25a1a39e0d97ba879795de3fafd3115ba06a514f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25a1a39e0d97ba879795de3fafd3115ba06a514f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25a1a39e0d97ba879795de3fafd3115ba06a514f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25a1a39e0d97ba879795de3fafd3115ba06a514f/comments", "author": null, "committer": null, "parents": [{"sha": "00dd8ca593fe7cb656195283796c158dcef486c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00dd8ca593fe7cb656195283796c158dcef486c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00dd8ca593fe7cb656195283796c158dcef486c6"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "36663e975e9234f0f7aae9b9cc8774082818414e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a1a39e0d97ba879795de3fafd3115ba06a514f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a1a39e0d97ba879795de3fafd3115ba06a514f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25a1a39e0d97ba879795de3fafd3115ba06a514f", "patch": "@@ -1,3 +1,8 @@\n+2004-06-06  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* tree.h (lvalue_or_else): Delete function prototype.\n+\t* c-typeck.c (lvalue_or_else): Make static.  Add static prototype.\n+\n 2004-06-06  Stephane Carrez  <stcarrez@nerim.fr>\n \n \tPR target/14542"}, {"sha": "0f77d8c33972ef9b937f14f7bf5c477238405144", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a1a39e0d97ba879795de3fafd3115ba06a514f/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a1a39e0d97ba879795de3fafd3115ba06a514f/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=25a1a39e0d97ba879795de3fafd3115ba06a514f", "patch": "@@ -80,6 +80,7 @@ static void add_pending_init (tree, tree);\n static void set_nonincremental_init (void);\n static void set_nonincremental_init_from_string (tree);\n static tree find_init_member (tree);\n+static int lvalue_or_else (tree, const char *);\n \f\n /* Do `exp = require_complete_type (exp);' to make sure exp\n    does not have an incomplete type.  (That includes void types.)  */\n@@ -2629,7 +2630,7 @@ lvalue_p (tree ref)\n /* Return nonzero if REF is an lvalue valid for this language;\n    otherwise, print an error message and return zero.  */\n \n-int\n+static int\n lvalue_or_else (tree ref, const char *msgid)\n {\n   int win = lvalue_p (ref);"}, {"sha": "5bb506e58f5b61d3fe1c3d47b91678a8516eb181", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a1a39e0d97ba879795de3fafd3115ba06a514f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a1a39e0d97ba879795de3fafd3115ba06a514f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=25a1a39e0d97ba879795de3fafd3115ba06a514f", "patch": "@@ -1,3 +1,7 @@\n+2004-06-06  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* cp/cp-tree.h (lvalue_or_else): Add function prototype.\n+\n 2004-06-06  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \n \tPR c++/15503"}, {"sha": "6f7baf3b6771af57e573ae8466d18ced6d7fe0bd", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a1a39e0d97ba879795de3fafd3115ba06a514f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a1a39e0d97ba879795de3fafd3115ba06a514f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=25a1a39e0d97ba879795de3fafd3115ba06a514f", "patch": "@@ -4114,6 +4114,7 @@ extern tree canonical_type_variant              (tree);\n extern tree copy_base_binfos\t\t\t(tree, tree, tree);\n extern int member_p\t\t\t\t(tree);\n extern cp_lvalue_kind real_lvalue_p             (tree);\n+extern int lvalue_or_else\t\t\t(tree, const char *);\n extern tree build_min\t\t\t\t(enum tree_code, tree, ...);\n extern tree build_min_nt\t\t\t(enum tree_code, ...);\n extern tree build_min_non_dep\t\t\t(enum tree_code, tree, ...);"}, {"sha": "c6a9f078eca979ef1b1a1957caf25778f2a5f990", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a1a39e0d97ba879795de3fafd3115ba06a514f/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a1a39e0d97ba879795de3fafd3115ba06a514f/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=25a1a39e0d97ba879795de3fafd3115ba06a514f", "patch": "@@ -3167,11 +3167,6 @@ extern int integer_nonzerop (tree);\n \n extern int staticp (tree);\n \n-/* Gets an error if argument X is not an lvalue.\n-   Also returns 1 if X is an lvalue, 0 if not.  */\n-\n-extern int lvalue_or_else (tree, const char *);\n-\n /* save_expr (EXP) returns an expression equivalent to EXP\n    but it can be used multiple times within context CTX\n    and only evaluate EXP once.  */"}]}