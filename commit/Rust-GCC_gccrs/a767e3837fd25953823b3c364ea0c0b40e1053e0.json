{"sha": "a767e3837fd25953823b3c364ea0c0b40e1053e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc2N2UzODM3ZmQyNTk1MzgyM2IzYzM2NGVhMGMwYjQwZTEwNTNlMA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@haight.redhat.com", "date": "2000-12-06T02:35:27Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-12-06T02:35:27Z"}, "message": "acinclude.m4 (EXTRA_CXX_FLAGS): And here.\n\n\n2000-12-05  Benjamin Kosnik  <bkoz@haight.redhat.com>\n\n\t* acinclude.m4 (EXTRA_CXX_FLAGS): And here.\n\t* include/c/bits/std_cstdlib.h (std ): Change macro to\n\t_GLIBCPP_NEED_LLDIV_T.\n\t* acconfig.h: Remove unused MBSTATE_T bits.\n\t* configure.in: Same.\n\t* aclocal.m4: Regenerate.\n\t* configure: Regenerate.\n\t* config.h.in: Regenerate.\n\nFrom-SVN: r38058", "tree": {"sha": "eef68519465ad60fd5b89a877865f901310583a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eef68519465ad60fd5b89a877865f901310583a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a767e3837fd25953823b3c364ea0c0b40e1053e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a767e3837fd25953823b3c364ea0c0b40e1053e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a767e3837fd25953823b3c364ea0c0b40e1053e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a767e3837fd25953823b3c364ea0c0b40e1053e0/comments", "author": null, "committer": null, "parents": [{"sha": "3cf3593fad06d6fb27f5e8ef3715c41fad1553b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cf3593fad06d6fb27f5e8ef3715c41fad1553b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cf3593fad06d6fb27f5e8ef3715c41fad1553b8"}], "stats": {"total": 1935, "additions": 950, "deletions": 985}, "files": [{"sha": "cf6fb6ffeab3205129b2482e4d3d8a4665a813f6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a767e3837fd25953823b3c364ea0c0b40e1053e0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a767e3837fd25953823b3c364ea0c0b40e1053e0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a767e3837fd25953823b3c364ea0c0b40e1053e0", "patch": "@@ -1,3 +1,14 @@\n+2000-12-05  Benjamin Kosnik  <bkoz@haight.redhat.com>\n+\n+\t* acinclude.m4 (EXTRA_CXX_FLAGS): And here.\n+\t* include/c/bits/std_cstdlib.h (std ): Change macro to\n+\t_GLIBCPP_NEED_LLDIV_T.\n+\t* acconfig.h: Remove unused MBSTATE_T bits.\n+\t* configure.in: Same.\n+\t* aclocal.m4: Regenerate.\n+\t* configure: Regenerate.\n+\t* config.h.in: Regenerate.\n+\t\n 2000-12-05  Benjamin Kosnik  <bkoz@fillmore.redhat.com>\n \n \t* acinclude.m4: Change up to reflect new directory organization."}, {"sha": "85b6ca7b9d958a143eeb1a83ac9e28e6c1b871e2", "filename": "libstdc++-v3/acconfig.h", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a767e3837fd25953823b3c364ea0c0b40e1053e0/libstdc%2B%2B-v3%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a767e3837fd25953823b3c364ea0c0b40e1053e0/libstdc%2B%2B-v3%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facconfig.h?ref=a767e3837fd25953823b3c364ea0c0b40e1053e0", "patch": "@@ -12,18 +12,12 @@\n // Include support for shadow headers, ie --enable-cshadow-headers.\n #undef _GLIBCPP_USE_SHADOW_HEADERS\n \n-// Define if lldiv_t exists in stdlib.h.\n-#undef _GLIBCPP_HAVE_LLDIV_T\n-\n-// Define if the host has a type mbstate_t defined in\n-// wchar.h, as required by 21.1.3.1. Some systems, namely\n-// hppa-hp-hpux10.20 do not meet this requirement, and must be worked\n-// around.\n-#undef _GLIBCPP_NEED_MBSTATE_T\n-\n // Define if code specialized for wchar_t should be used.\n #undef _GLIBCPP_USE_WCHAR_T\n \n+// Define if lldiv_t exists in stdlib.h.\n+#undef HAVE_LLDIV_T\n+\n // Define if the compiler/host combination has __builtin_abs\n #undef HAVE___BUILTIN_ABS\n "}, {"sha": "eb5aa5441d7959de003d9a587f92bae1926ff212", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a767e3837fd25953823b3c364ea0c0b40e1053e0/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a767e3837fd25953823b3c364ea0c0b40e1053e0/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=a767e3837fd25953823b3c364ea0c0b40e1053e0", "patch": "@@ -991,9 +991,6 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n       [mbstate_t teststate;], \n       use_native_mbstatet=yes, use_native_mbstatet=no)\n       AC_MSG_RESULT($use_native_mbstatet)\n-      if test x\"$use_native_mbstatet\" = xno; then\n-        AC_DEFINE(_GLIBCPP_NEED_MBSTATE_T)\n-      fi\n     \n       dnl Test wchar.h for WCHAR_MIN, WCHAR_MAX, which is needed before\n       dnl numeric_limits can instantiate type_traits<wchar_t>\n@@ -1066,7 +1063,6 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n   \n     else\n       AC_MSG_WARN([<wchar.h> not found])\n-      AC_DEFINE(_GLIBCPP_NEED_MBSTATE_T)\n     fi\n \n   else\n@@ -1478,7 +1474,7 @@ AC_DEFUN(GLIBCPP_ENABLE_LONG_LONG, [dnl\n   ])\n   AC_MSG_RESULT($glibcpp_lldiv_t_use)\n   if test x$glibcpp_lldiv_t_use = x\"yes\"; then\n-    AC_DEFINE(_GLIBCPP_HAVE_LLDIV_T)\n+    AC_DEFINE(HAVE_LLDIV_T)\n   fi\n \n   AC_MSG_CHECKING([for enabled long long])"}, {"sha": "1b7b54c99b7cf3f2a875ce205e6025ccc0870f9f", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a767e3837fd25953823b3c364ea0c0b40e1053e0/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a767e3837fd25953823b3c364ea0c0b40e1053e0/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=a767e3837fd25953823b3c364ea0c0b40e1053e0", "patch": "@@ -1003,9 +1003,6 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n       [mbstate_t teststate;], \n       use_native_mbstatet=yes, use_native_mbstatet=no)\n       AC_MSG_RESULT($use_native_mbstatet)\n-      if test x\"$use_native_mbstatet\" = xno; then\n-        AC_DEFINE(_GLIBCPP_NEED_MBSTATE_T)\n-      fi\n     \n       dnl Test wchar.h for WCHAR_MIN, WCHAR_MAX, which is needed before\n       dnl numeric_limits can instantiate type_traits<wchar_t>\n@@ -1078,7 +1075,6 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n   \n     else\n       AC_MSG_WARN([<wchar.h> not found])\n-      AC_DEFINE(_GLIBCPP_NEED_MBSTATE_T)\n     fi\n \n   else\n@@ -1490,7 +1486,7 @@ AC_DEFUN(GLIBCPP_ENABLE_LONG_LONG, [dnl\n   ])\n   AC_MSG_RESULT($glibcpp_lldiv_t_use)\n   if test x$glibcpp_lldiv_t_use = x\"yes\"; then\n-    AC_DEFINE(_GLIBCPP_HAVE_LLDIV_T)\n+    AC_DEFINE(HAVE_LLDIV_T)\n   fi\n \n   AC_MSG_CHECKING([for enabled long long])"}, {"sha": "bda8a2b241a059edfc0118a26915becbf436ba57", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a767e3837fd25953823b3c364ea0c0b40e1053e0/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a767e3837fd25953823b3c364ea0c0b40e1053e0/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=a767e3837fd25953823b3c364ea0c0b40e1053e0", "patch": "@@ -12,18 +12,12 @@\n // Include support for shadow headers, ie --enable-cshadow-headers.\n #undef _GLIBCPP_USE_SHADOW_HEADERS\n \n-// Define if lldiv_t exists in stdlib.h.\n-#undef _GLIBCPP_HAVE_LLDIV_T\n-\n-// Define if the host has a type mbstate_t defined in\n-// wchar.h, as required by 21.1.3.1. Some systems, namely\n-// hppa-hp-hpux10.20 do not meet this requirement, and must be worked\n-// around.\n-#undef _GLIBCPP_NEED_MBSTATE_T\n-\n // Define if code specialized for wchar_t should be used.\n #undef _GLIBCPP_USE_WCHAR_T\n \n+// Define if lldiv_t exists in stdlib.h.\n+#undef HAVE_LLDIV_T\n+\n // Define if the compiler/host combination has __builtin_abs\n #undef HAVE___BUILTIN_ABS\n "}, {"sha": "888576f8beaf3ca48d79681dbef551e81fab6a6c", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 931, "deletions": 952, "changes": 1883, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a767e3837fd25953823b3c364ea0c0b40e1053e0/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a767e3837fd25953823b3c364ea0c0b40e1053e0/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=a767e3837fd25953823b3c364ea0c0b40e1053e0"}, {"sha": "e7c582f06392fd26ccf0fc961db1208e5a70a23f", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a767e3837fd25953823b3c364ea0c0b40e1053e0/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a767e3837fd25953823b3c364ea0c0b40e1053e0/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=a767e3837fd25953823b3c364ea0c0b40e1053e0", "patch": "@@ -81,9 +81,6 @@ if test -n \"$with_cross_host\"; then\n \tAC_LINK_FILES($ctype_include_dir/bits/ctype_noninline.h, \\\n \tinclude/bits/ctype_noninline.h)\n \n-\n-\tAC_DEFINE(_GLIBCPP_NEED_MBSTATE_T)\n-\n \tAC_DEFINE(_GLIBCPP_BUGGY_FLOAT_COMPLEX)\n \tAC_DEFINE(_GLIBCPP_BUGGY_COMPLEX)\n \t;;\n@@ -104,8 +101,6 @@ if test -n \"$with_cross_host\"; then\n \tAC_LINK_FILES($ctype_include_dir/bits/ctype_noninline.h, \\\n \tinclude/bits/ctype_noninline.h)\n \n-\tAC_DEFINE(_GLIBCPP_NEED_MBSTATE_T)\n-\n \tAC_DEFINE(_GLIBCPP_BUGGY_FLOAT_COMPLEX)\n \tAC_DEFINE(_GLIBCPP_BUGGY_COMPLEX)\n \t# need to check for faster f versions of math functions, ie sinf?"}]}