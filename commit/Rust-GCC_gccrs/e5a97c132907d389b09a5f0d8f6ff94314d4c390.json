{"sha": "e5a97c132907d389b09a5f0d8f6ff94314d4c390", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVhOTdjMTMyOTA3ZDM4OWIwOWE1ZjBkOGY2ZmY5NDMxNGQ0YzM5MA==", "commit": {"author": {"name": "Vincent Celier", "email": "celier@adacore.com", "date": "2005-06-16T08:41:09Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-06-16T08:41:09Z"}, "message": "g-os_lib.ads, [...] (Non_Blocking_Spawn): Two new versions with output file descriptor and with output file name.\n\n2005-06-14  Vincent Celier  <celier@adacore.com>\n\t    Cyrille Comar  <comar@adacore.com>\n\n\t* g-os_lib.ads, g-os_lib.adb (Non_Blocking_Spawn): Two new versions\n\twith output file descriptor and with output file name.\n\t(Dup, Dup2): Now global procedures as they are used by two subprograms\n\t(Copy): Allocate the 200K buffer on the heap rather than on the stack.\n\nFrom-SVN: r101042", "tree": {"sha": "193e0301b2a417b9c7fc2fb80f6847496c0ebdef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/193e0301b2a417b9c7fc2fb80f6847496c0ebdef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5a97c132907d389b09a5f0d8f6ff94314d4c390", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5a97c132907d389b09a5f0d8f6ff94314d4c390", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5a97c132907d389b09a5f0d8f6ff94314d4c390", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5a97c132907d389b09a5f0d8f6ff94314d4c390/comments", "author": {"login": "vcelier", "id": 8888056, "node_id": "MDQ6VXNlcjg4ODgwNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/8888056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vcelier", "html_url": "https://github.com/vcelier", "followers_url": "https://api.github.com/users/vcelier/followers", "following_url": "https://api.github.com/users/vcelier/following{/other_user}", "gists_url": "https://api.github.com/users/vcelier/gists{/gist_id}", "starred_url": "https://api.github.com/users/vcelier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vcelier/subscriptions", "organizations_url": "https://api.github.com/users/vcelier/orgs", "repos_url": "https://api.github.com/users/vcelier/repos", "events_url": "https://api.github.com/users/vcelier/events{/privacy}", "received_events_url": "https://api.github.com/users/vcelier/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "de972f9de777f333091d7f9044232d1c36fcd7fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de972f9de777f333091d7f9044232d1c36fcd7fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de972f9de777f333091d7f9044232d1c36fcd7fd"}], "stats": {"total": 160, "additions": 148, "deletions": 12}, "files": [{"sha": "a9460bdff4e675501f1d697a58960afff54eb000", "filename": "gcc/ada/g-os_lib.adb", "status": "modified", "additions": 113, "deletions": 11, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5a97c132907d389b09a5f0d8f6ff94314d4c390/gcc%2Fada%2Fg-os_lib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5a97c132907d389b09a5f0d8f6ff94314d4c390/gcc%2Fada%2Fg-os_lib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-os_lib.adb?ref=e5a97c132907d389b09a5f0d8f6ff94314d4c390", "patch": "@@ -35,20 +35,32 @@ with System.Case_Util;\n with System.CRTL;\n with System.Soft_Links;\n with Unchecked_Conversion;\n+with Unchecked_Deallocation;\n with System; use System;\n \n package body GNAT.OS_Lib is\n \n+   --  Imported procedures Dup and Dup2 are used in procedures Spawn and\n+   --  Non_Blocking_Spawn.\n+\n+   function Dup (Fd : File_Descriptor) return File_Descriptor;\n+   pragma Import (C, Dup, \"__gnat_dup\");\n+\n+   procedure Dup2 (Old_Fd, New_Fd : File_Descriptor);\n+   pragma Import (C, Dup2, \"__gnat_dup2\");\n+\n    OpenVMS : Boolean;\n    --  Note: OpenVMS should be a constant, but it cannot be, because it\n    --        prevents bootstrapping on some platforms.\n \n-   On_Windows : constant Boolean := Directory_Separator = '\\';\n-\n    pragma Import (Ada, OpenVMS, \"system__openvms\");\n    --  Needed to avoid doing useless checks when non on a VMS platform (see\n    --  Normalize_Pathname).\n \n+   On_Windows : constant Boolean := Directory_Separator = '\\';\n+   --  An indication that we are on Windows. Used in Normalize_Pathname, to\n+   --  deal with drive letters in the beginning of absolute paths.\n+\n    package SSL renames System.Soft_Links;\n \n    --  The following are used by Create_Temp_File\n@@ -354,19 +366,28 @@ package body GNAT.OS_Lib is\n \n       procedure Copy (From, To : File_Descriptor) is\n          Buf_Size : constant := 200_000;\n-         Buffer   : array (1 .. Buf_Size) of Character;\n-         R        : Integer;\n-         W        : Integer;\n+         type Buf is array (1 .. Buf_Size) of Character;\n+         type Buf_Ptr is access Buf;\n+\n+         Buffer : Buf_Ptr;\n+         R      : Integer;\n+         W      : Integer;\n \n          Status_From : Boolean;\n          Status_To   : Boolean;\n          --  Statuses for the calls to Close\n \n+         procedure Free is new Unchecked_Deallocation (Buf, Buf_Ptr);\n+\n       begin\n          if From = Invalid_FD or else To = Invalid_FD then\n             raise Copy_Error;\n          end if;\n \n+         --  Allocate the buffer on the heap\n+\n+         Buffer := new Buf;\n+\n          loop\n             R := Read (From, Buffer (1)'Address, Buf_Size);\n \n@@ -386,13 +407,17 @@ package body GNAT.OS_Lib is\n                Close (From, Status_From);\n                Close (To, Status_To);\n \n+               Free (Buffer);\n+\n                raise Copy_Error;\n             end if;\n          end loop;\n \n          Close (From, Status_From);\n          Close (To, Status_To);\n \n+         Free (Buffer);\n+\n          if not (Status_From and Status_To) then\n             raise Copy_Error;\n          end if;\n@@ -1334,6 +1359,89 @@ package body GNAT.OS_Lib is\n       return Pid;\n    end Non_Blocking_Spawn;\n \n+   function Non_Blocking_Spawn\n+     (Program_Name           : String;\n+      Args                   : Argument_List;\n+      Output_File_Descriptor : File_Descriptor;\n+      Err_To_Out             : Boolean := True)\n+      return                   Process_Id\n+   is\n+      Saved_Output : File_Descriptor;\n+      Saved_Error  : File_Descriptor := Invalid_FD;\n+      --  We need to initialize Saved_Error to Invalid_FD to avoid\n+      --  a compiler warning that this variable may be used before\n+      --  it is initialized (which can not happen, but the compiler\n+      --  is not smart enough to figure this out).\n+      Pid           : Process_Id;\n+   begin\n+      if Output_File_Descriptor = Invalid_FD then\n+         return Invalid_Pid;\n+      end if;\n+\n+      --  Set standard output and, if specified, error to the temporary file\n+      Saved_Output := Dup (Standout);\n+      Dup2 (Output_File_Descriptor, Standout);\n+\n+      if Err_To_Out then\n+         Saved_Error  := Dup (Standerr);\n+         Dup2 (Output_File_Descriptor, Standerr);\n+      end if;\n+\n+      --  Spawn the program\n+\n+      Pid := Non_Blocking_Spawn (Program_Name, Args);\n+\n+      --  Restore the standard output and error\n+\n+      Dup2 (Saved_Output, Standout);\n+\n+      if Err_To_Out then\n+         Dup2 (Saved_Error, Standerr);\n+      end if;\n+\n+      --  And close the saved standard output and error file descriptors\n+\n+      Close (Saved_Output);\n+\n+      if Err_To_Out then\n+         Close (Saved_Error);\n+      end if;\n+\n+      return Pid;\n+   end Non_Blocking_Spawn;\n+\n+   function Non_Blocking_Spawn\n+     (Program_Name : String;\n+      Args         : Argument_List;\n+      Output_File  : String;\n+      Err_To_Out   : Boolean := True)\n+      return         Process_Id\n+   is\n+      Output_File_Descriptor : constant File_Descriptor :=\n+        Create_Output_Text_File (Output_File);\n+      Result : Process_Id;\n+\n+   begin\n+      --  Do not attempt to spawn if the output file could not be created\n+\n+      if Output_File_Descriptor = Invalid_FD then\n+         return Invalid_Pid;\n+\n+      else\n+         Result := Non_Blocking_Spawn\n+                     (Program_Name, Args, Output_File_Descriptor, Err_To_Out);\n+\n+         --  Close the file just created for the output, as the file descriptor\n+         --  cannot be used anywhere, being a local value. It is safe to do\n+         --  that, as the file descriptor has been duplicated to form\n+         --  standard output and error of the spawned process.\n+\n+         Close (Output_File_Descriptor);\n+\n+         return Result;\n+      end if;\n+   end Non_Blocking_Spawn;\n+\n    -------------------------\n    -- Normalize_Arguments --\n    -------------------------\n@@ -2167,12 +2275,6 @@ package body GNAT.OS_Lib is\n       Return_Code            : out Integer;\n       Err_To_Out             : Boolean := True)\n    is\n-      function Dup (Fd : File_Descriptor) return File_Descriptor;\n-      pragma Import (C, Dup, \"__gnat_dup\");\n-\n-      procedure Dup2 (Old_Fd, New_Fd : File_Descriptor);\n-      pragma Import (C, Dup2, \"__gnat_dup2\");\n-\n       Saved_Output : File_Descriptor;\n       Saved_Error  : File_Descriptor := Invalid_FD;\n       --  We need to initialize Saved_Error to Invalid_FD to avoid"}, {"sha": "5c67c7ad7a70f70ee554c3863b9681be23e37453", "filename": "gcc/ada/g-os_lib.ads", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5a97c132907d389b09a5f0d8f6ff94314d4c390/gcc%2Fada%2Fg-os_lib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5a97c132907d389b09a5f0d8f6ff94314d4c390/gcc%2Fada%2Fg-os_lib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-os_lib.ads?ref=e5a97c132907d389b09a5f0d8f6ff94314d4c390", "patch": "@@ -114,7 +114,6 @@ package GNAT.OS_Lib is\n    subtype Second_Type is Integer range    0 ..   59;\n    --  Declarations similar to those in Calendar, breaking down the time\n \n-\n    function GM_Year    (Date : OS_Time) return Year_Type;\n    function GM_Month   (Date : OS_Time) return Month_Type;\n    function GM_Day     (Date : OS_Time) return Day_Type;\n@@ -715,6 +714,41 @@ package GNAT.OS_Lib is\n    --  This function will always return Invalid_Id under VxWorks, since there\n    --  is no notion of executables under this OS.\n \n+   function Non_Blocking_Spawn\n+     (Program_Name           : String;\n+      Args                   : Argument_List;\n+      Output_File_Descriptor : File_Descriptor;\n+      Err_To_Out             : Boolean := True)\n+      return                   Process_Id;\n+   --  Similar to the procedure above, but redirects the output to the file\n+   --  designated by Output_File_Descriptor. If Err_To_Out is True, then the\n+   --  Standard Error output is also redirected. Invalid_Id is returned\n+   --  if the program could not be spawned successfully.\n+   --\n+   --  \"Non_Blocking_Spawn\" should not be used in tasking applications.\n+   --\n+   --  This function will always return Invalid_Id under VxWorks, since there\n+   --  is no notion of executables under this OS.\n+\n+   function Non_Blocking_Spawn\n+     (Program_Name : String;\n+      Args         : Argument_List;\n+      Output_File  : String;\n+      Err_To_Out   : Boolean := True)\n+      return         Process_Id;\n+   --  Similar to the procedure above, but saves the output of the command to\n+   --  a file with the name Output_File.\n+   --\n+   --  Success is set to True if the command is executed and its output\n+   --  successfully written to the file. Invalid_Id is returned if the output\n+   --  file could not be created or if the program could not be spawned\n+   --  successfully.\n+   --\n+   --  \"Non_Blocking_Spawn\" should not be used in tasking applications.\n+   --\n+   --  This function will always return Invalid_Id under VxWorks, since there\n+   --  is no notion of executables under this OS.\n+\n    procedure Wait_Process (Pid : out Process_Id; Success : out Boolean);\n    --  Wait for the completion of any of the processes created by previous\n    --  calls to Non_Blocking_Spawn. The caller will be suspended until one of"}]}