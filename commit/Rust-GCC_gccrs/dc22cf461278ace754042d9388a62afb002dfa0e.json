{"sha": "dc22cf461278ace754042d9388a62afb002dfa0e", "node_id": "C_kwDOANBUbNoAKGRjMjJjZjQ2MTI3OGFjZTc1NDA0MmQ5Mzg4YTYyYWZiMDAyZGZhMGU", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-01-05T20:23:26Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-01-12T11:01:09Z"}, "message": "libstdc++: Use lock-free type for __platform_wait_t\n\nFor non-futex targets the __platform_wait_t type is currently uint64_t,\nbut that requires a lock in libatomic for some 32-bit targets. We don't\nreally need a 64-bit type, so use unsigned long if that is lock-free,\nand int otherwise. This should mean it's lock-free on a wider set of\ntargets.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/atomic_wait.h (__detail::__platform_wait_t):\n\tDefine as unsigned long if always lock-free, and unsigned int\n\totherwise.", "tree": {"sha": "1e029a14a59f7b2bc3cceed2730fa15bc1088c96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e029a14a59f7b2bc3cceed2730fa15bc1088c96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc22cf461278ace754042d9388a62afb002dfa0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc22cf461278ace754042d9388a62afb002dfa0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc22cf461278ace754042d9388a62afb002dfa0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc22cf461278ace754042d9388a62afb002dfa0e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ce55247a8bf32985a96ed63a7a92d36746723dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ce55247a8bf32985a96ed63a7a92d36746723dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ce55247a8bf32985a96ed63a7a92d36746723dc"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "1d7a034a1658bf6ffaa0b7dc7585a3bec4a20d56", "filename": "libstdc++-v3/include/bits/atomic_wait.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc22cf461278ace754042d9388a62afb002dfa0e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_wait.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc22cf461278ace754042d9388a62afb002dfa0e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_wait.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_wait.h?ref=dc22cf461278ace754042d9388a62afb002dfa0e", "patch": "@@ -64,7 +64,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n // and __platform_notify() if there is a more efficient primitive supported\n // by the platform (e.g. __ulock_wait()/__ulock_wake()) which is better than\n // a mutex/condvar based wait.\n-    using __platform_wait_t = uint64_t;\n+# if ATOMIC_LONG_LOCK_FREE == 2\n+    using __platform_wait_t = unsigned long;\n+# else\n+    using __platform_wait_t = unsigned int;\n+# endif\n     inline constexpr size_t __platform_wait_alignment\n       = __alignof__(__platform_wait_t);\n #endif"}]}