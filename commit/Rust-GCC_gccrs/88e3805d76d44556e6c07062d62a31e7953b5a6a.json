{"sha": "88e3805d76d44556e6c07062d62a31e7953b5a6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhlMzgwNWQ3NmQ0NDU1NmU2YzA3MDYyZDYyYTMxZTc5NTNiNWE2YQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-05-21T01:21:23Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-05-21T01:21:23Z"}, "message": "fold-const.c (tree_expr_nonnegative_p): Detect more non-negative cases.\n\n\t* fold-const.c (tree_expr_nonnegative_p): Detect more\n\tnon-negative cases.\n\ntestsuite:\n\t* g++.old-deja/g++.warn/compare1.C: New test.\n\t* gcc.dg/compare4.c: New test.\n\nFrom-SVN: r42365", "tree": {"sha": "b05439e6d5d3e5f22860bee1bfa31706393393c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b05439e6d5d3e5f22860bee1bfa31706393393c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88e3805d76d44556e6c07062d62a31e7953b5a6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88e3805d76d44556e6c07062d62a31e7953b5a6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88e3805d76d44556e6c07062d62a31e7953b5a6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88e3805d76d44556e6c07062d62a31e7953b5a6a/comments", "author": null, "committer": null, "parents": [{"sha": "4b404517536c85a092184a540f30d8bd5a496e26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b404517536c85a092184a540f30d8bd5a496e26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b404517536c85a092184a540f30d8bd5a496e26"}], "stats": {"total": 107, "additions": 107, "deletions": 0}, "files": [{"sha": "582f100d8f32dbf0ca4bd33719d404469aad7966", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e3805d76d44556e6c07062d62a31e7953b5a6a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e3805d76d44556e6c07062d62a31e7953b5a6a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88e3805d76d44556e6c07062d62a31e7953b5a6a", "patch": "@@ -1,3 +1,8 @@\n+2001-05-20  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* fold-const.c (tree_expr_nonnegative_p): Detect more non-negative\n+\tcases.\n+\n 2001-05-21  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* extend.texi: Clarify documentation of extensions included in ISO"}, {"sha": "2cf534f865338ba0c81419e5ce8fcb4a65839f36", "filename": "gcc/fold-const.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e3805d76d44556e6c07062d62a31e7953b5a6a/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e3805d76d44556e6c07062d62a31e7953b5a6a/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=88e3805d76d44556e6c07062d62a31e7953b5a6a", "patch": "@@ -7351,11 +7351,24 @@ tree_expr_nonnegative_p (t)\n {\n   switch (TREE_CODE (t))\n     {\n+    case ABS_EXPR:\n+    case FFS_EXPR:\n+      return 1;\n     case INTEGER_CST:\n       return tree_int_cst_sgn (t) >= 0;\n     case COND_EXPR:\n       return tree_expr_nonnegative_p (TREE_OPERAND (t, 1))\n \t&& tree_expr_nonnegative_p (TREE_OPERAND (t, 2));\n+    case COMPOUND_EXPR:\n+      return tree_expr_nonnegative_p (TREE_OPERAND (t, 1));\n+    case MIN_EXPR:\n+      return tree_expr_nonnegative_p (TREE_OPERAND (t, 0))\n+        && tree_expr_nonnegative_p (TREE_OPERAND (t, 1));\n+    case MAX_EXPR:\n+      return tree_expr_nonnegative_p (TREE_OPERAND (t, 0))\n+        || tree_expr_nonnegative_p (TREE_OPERAND (t, 1));\n+    case MODIFY_EXPR:\n+      return tree_expr_nonnegative_p (TREE_OPERAND (t, 1));\n     case BIND_EXPR:\n       return tree_expr_nonnegative_p (TREE_OPERAND (t, 1));\n     case RTL_EXPR:"}, {"sha": "510cc896e8e2191e8a10a81ec85405b8e0f098e8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e3805d76d44556e6c07062d62a31e7953b5a6a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e3805d76d44556e6c07062d62a31e7953b5a6a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=88e3805d76d44556e6c07062d62a31e7953b5a6a", "patch": "@@ -1,3 +1,8 @@\n+2001-05-20  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* g++.old-deja/g++.warn/compare1.C: New test.\n+\t* gcc.dg/compare4.c: New test.\n+\n 2001-05-20  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.old-deja/g++.other/optimize1.C: New test."}, {"sha": "687d98661e441e2c922d594bbca862fa7b81340f", "filename": "gcc/testsuite/g++.old-deja/g++.warn/compare1.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e3805d76d44556e6c07062d62a31e7953b5a6a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.warn%2Fcompare1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e3805d76d44556e6c07062d62a31e7953b5a6a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.warn%2Fcompare1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.warn%2Fcompare1.C?ref=88e3805d76d44556e6c07062d62a31e7953b5a6a", "patch": "@@ -0,0 +1,36 @@\n+// Build don't link:\n+// Special g++ Options: -ansi -pedantic-errors -Wsign-compare\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Contributed by Kaveh R. Ghazi <ghazi@caip.rutgers.edu> 5/13/2001\n+\n+int foo(int x, int y, unsigned u)\n+{\n+  /* A MAX_EXPR is non-negative if EITHER argument to the MAX_EXPR is\n+     determined to be non-negative.  */\n+  if (u < (x >? -1)) // WARNING - signed and unsigned\n+    return x;\n+  if (u < (x >? 10))\n+    return x;\n+  if ((10 >? x) < u)\n+    return x;\n+  if (u < (x >? (y ? (x==y) : 10)))\n+    return x;\n+  if (((y ? 10 : (x==y)) >? x) < u)\n+    return x;\n+\n+  /* A MIN_EXPR is non-negative if BOTH arguments to the MIN_EXPR are\n+     determined to be non-negative.  */\n+  if (u < ((x?11:8) <? -1)) // WARNING - signed and unsigned\n+    return x;\n+  if (u < ((x?11:8) <? 10))\n+    return x;\n+  if ((10 <? (x?8:11)) < u)\n+    return x;\n+  if (u < ((x?11:(x==y)) <? 10))\n+    return x;\n+  if ((10 <? (x?(x==y):11)) < u)\n+    return x;\n+\n+  return 0;\n+}"}, {"sha": "5f567c5df79d54539fc4c9417b635ef188e39ea3", "filename": "gcc/testsuite/gcc.dg/compare4.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e3805d76d44556e6c07062d62a31e7953b5a6a/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e3805d76d44556e6c07062d62a31e7953b5a6a/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare4.c?ref=88e3805d76d44556e6c07062d62a31e7953b5a6a", "patch": "@@ -0,0 +1,48 @@\n+/* Test for a bogus warning on comparison between signed and unsigned.\n+   Origin: Kaveh R. Ghazi <ghazi@caip.rutgers.edu> 5/13/2001.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-Wsign-compare\" } */\n+\n+extern void bar(void);\n+\n+int foo(int x, int y, unsigned u)\n+{\n+  /* A COMPOUND_EXPR is non-negative if the last element is known to\n+     be non-negative.  */\n+  if (u < (bar(), -1)) /*{ dg-warning \"signed and unsigned\" \"COMPOUND_EXPR\" }*/\n+    return x;\n+  if (u < (bar(), 10))\n+    return x;\n+  if ((bar(), 10) < u)\n+    return x;\n+  if (u < (x ? (bar(),bar(),bar(),bar(),x==y) : 10))\n+    return x;\n+  if ((x ? 10 : (bar(),bar(),bar(),bar(),x==y)) < u)\n+    return x;\n+\n+  /* Test an ABS_EXPR, which is by definition non-negative.  */\n+  if (u < __builtin_abs(x))\n+    return x;\n+  if (__builtin_abs(x) < u)\n+    return x;\n+  if (u < (x ? __builtin_abs(x) : 10))\n+    return x;\n+  if ((x ? 10: __builtin_abs(x)) < u)\n+    return x;\n+\n+  /* A MODIFY_EXPR is non-negative if the new value is known to be\n+     non-negative.  */\n+  if (u < (x = -1)) /* { dg-warning \"signed and unsigned\" \"MODIFY_EXPR\" } */\n+    return x;\n+  if (u < (x = 10))\n+    return x;\n+  if ((x = 10) < u)\n+    return x;\n+  if (u < (x = (y ? (x==y) : 10)))\n+    return x;\n+  if ((x = (y ? 10 : (x==y))) < u)\n+    return x;\n+\n+  return 0;\n+}"}]}