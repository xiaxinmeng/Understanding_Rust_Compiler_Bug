{"sha": "c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80", "node_id": "C_kwDOANBUbNoAKGMzYTNlMTA1M2Y0MTgxOWQxZjZmZjhmYTY4YmNkNGFjYTlmYzVmODA", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-04-19T15:32:50Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-04-19T16:00:32Z"}, "message": "Support pattern bindings within function signitures\n\nThis reuses our code to handle match-arams within MatchExpressions, we\nresolve the pattern's type's and implicitly create types for that binding.\nFor code-generation we create a tmp var name for the name of the parameter\nwhich is the base type and for the destructuring we reuse the same match\narm code to generate the implicit bindings to the parts of the structure\n\n```c\n__attribute__((cdecl))\ni32 test::pattern_as_arg (const struct test::Pattern RSTPRM.0)\n{\n    i32 RUSTTMP.1;\n  return RSTPRM.0.0;\n}\n```\n\nFixes #995", "tree": {"sha": "f8cb8963830aa550b78afaa8e1f285955ae68efc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8cb8963830aa550b78afaa8e1f285955ae68efc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d17e0aa7695ddb383e0a4fc43185e2ab42c81703", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d17e0aa7695ddb383e0a4fc43185e2ab42c81703", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d17e0aa7695ddb383e0a4fc43185e2ab42c81703"}], "stats": {"total": 237, "additions": 177, "deletions": 60}, "files": [{"sha": "10326acd8ac00d3f49f3128212259b6aaf500055", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80", "patch": "@@ -110,6 +110,7 @@ GRS_OBJS = \\\n     rust/rust-hir-type-check-path.o \\\n     rust/rust-compile-intrinsic.o \\\n     rust/rust-compile-pattern.o \\\n+    rust/rust-compile-fnparam.o \\\n     rust/rust-base62.o \\\n     rust/rust-compile-item.o \\\n     rust/rust-compile-implitem.o \\"}, {"sha": "b1b552328501d6650307724d46eadebc2a9760c4", "filename": "gcc/rust/backend/rust-compile-fnparam.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.cc?ref=c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80", "patch": "@@ -0,0 +1,62 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-compile-fnparam.h\"\n+#include \"rust-compile-pattern.h\"\n+\n+#include \"gimple-expr.h\"\n+\n+namespace Rust {\n+namespace Compile {\n+\n+void\n+CompileFnParam::visit (HIR::StructPattern &pattern)\n+{\n+  // generate the anon param\n+  tree tmp_ident = create_tmp_var_name (\"RSTPRM\");\n+  std::string cpp_str_identifier = std::string (IDENTIFIER_POINTER (tmp_ident));\n+\n+  decl_type = ctx->get_backend ()->immutable_type (decl_type);\n+  compiled_param\n+    = ctx->get_backend ()->parameter_variable (fndecl, cpp_str_identifier,\n+\t\t\t\t\t       decl_type, locus);\n+\n+  // setup the pattern bindings\n+  tree anon_param = ctx->get_backend ()->var_expression (compiled_param, locus);\n+  CompilePatternBindings::Compile (&pattern, anon_param, ctx);\n+}\n+\n+void\n+CompileFnParam::visit (HIR::TupleStructPattern &pattern)\n+{\n+  // generate the anon param\n+  tree tmp_ident = create_tmp_var_name (\"RSTPRM\");\n+  std::string cpp_str_identifier = std::string (IDENTIFIER_POINTER (tmp_ident));\n+\n+  decl_type = ctx->get_backend ()->immutable_type (decl_type);\n+  compiled_param\n+    = ctx->get_backend ()->parameter_variable (fndecl, cpp_str_identifier,\n+\t\t\t\t\t       decl_type, locus);\n+\n+  // setup the pattern bindings\n+  tree anon_param = ctx->get_backend ()->var_expression (compiled_param, locus);\n+  CompilePatternBindings::Compile (&pattern, anon_param, ctx);\n+}\n+\n+} // namespace Compile\n+} // namespace Rust"}, {"sha": "7c4a43a973cc44ea469bfea2918d17920375d753", "filename": "gcc/rust/backend/rust-compile-fnparam.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h?ref=c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80", "patch": "@@ -63,6 +63,9 @@ class CompileFnParam : public HIRCompileBase, public HIR::HIRPatternVisitor\n       = ctx->get_backend ()->parameter_variable (fndecl, \"_\", decl_type, locus);\n   }\n \n+  void visit (HIR::StructPattern &) override;\n+  void visit (HIR::TupleStructPattern &) override;\n+\n   // Empty visit for unused Pattern HIR nodes.\n   void visit (HIR::GroupedPattern &) override {}\n   void visit (HIR::LiteralPattern &) override {}\n@@ -71,9 +74,7 @@ class CompileFnParam : public HIRCompileBase, public HIR::HIRPatternVisitor\n   void visit (HIR::RangePattern &) override {}\n   void visit (HIR::ReferencePattern &) override {}\n   void visit (HIR::SlicePattern &) override {}\n-  void visit (HIR::StructPattern &) override {}\n   void visit (HIR::TuplePattern &) override {}\n-  void visit (HIR::TupleStructPattern &) override {}\n \n private:\n   CompileFnParam (Context *ctx, tree fndecl, tree decl_type, Location locus)"}, {"sha": "393fbd5d517630d77737b91faf155ce8e6c52a3a", "filename": "gcc/rust/backend/rust-compile-pattern.cc", "status": "modified", "additions": 72, "deletions": 39, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc?ref=c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80", "patch": "@@ -20,6 +20,8 @@\n #include \"rust-compile-expr.h\"\n #include \"rust-constexpr.h\"\n \n+#include \"print-tree.h\"\n+\n namespace Rust {\n namespace Compile {\n \n@@ -92,18 +94,20 @@ CompilePatternBindings::visit (HIR::TupleStructPattern &pattern)\n   // this must be an enum\n   rust_assert (lookup->get_kind () == TyTy::TypeKind::ADT);\n   TyTy::ADTType *adt = static_cast<TyTy::ADTType *> (lookup);\n-  rust_assert (adt->is_enum ());\n+  rust_assert (adt->number_of_variants () > 0);\n \n-  // lookup the variant\n-  HirId variant_id;\n-  ok = ctx->get_tyctx ()->lookup_variant_definition (\n-    pattern.get_path ().get_mappings ().get_hirid (), &variant_id);\n-  rust_assert (ok);\n+  int variant_index = 0;\n+  TyTy::VariantDef *variant = adt->get_variants ().at (0);\n+  if (adt->is_enum ())\n+    {\n+      HirId variant_id = UNKNOWN_HIRID;\n+      bool ok = ctx->get_tyctx ()->lookup_variant_definition (\n+\tpattern.get_path ().get_mappings ().get_hirid (), &variant_id);\n+      rust_assert (ok);\n \n-  int variant_index = -1;\n-  TyTy::VariantDef *variant = nullptr;\n-  ok = adt->lookup_variant_by_id (variant_id, &variant, &variant_index);\n-  rust_assert (ok);\n+      ok = adt->lookup_variant_by_id (variant_id, &variant, &variant_index);\n+      rust_assert (ok);\n+    }\n \n   rust_assert (variant->get_variant_type ()\n \t       == TyTy::VariantDef::VariantType::TUPLE);\n@@ -124,20 +128,37 @@ CompilePatternBindings::visit (HIR::TupleStructPattern &pattern)\n \trust_assert (items_no_range.get_patterns ().size ()\n \t\t     == variant->num_fields ());\n \n-\t// we are offsetting by + 1 here since the first field in the record\n-\t// is always the discriminator\n-\tsize_t tuple_field_index = 1;\n-\tfor (auto &pattern : items_no_range.get_patterns ())\n+\tif (adt->is_enum ())\n+\t  {\n+\t    // we are offsetting by + 1 here since the first field in the record\n+\t    // is always the discriminator\n+\t    size_t tuple_field_index = 1;\n+\t    for (auto &pattern : items_no_range.get_patterns ())\n+\t      {\n+\t\ttree variant_accessor\n+\t\t  = ctx->get_backend ()->struct_field_expression (\n+\t\t    match_scrutinee_expr, variant_index, pattern->get_locus ());\n+\n+\t\ttree binding = ctx->get_backend ()->struct_field_expression (\n+\t\t  variant_accessor, tuple_field_index++, pattern->get_locus ());\n+\n+\t\tctx->insert_pattern_binding (\n+\t\t  pattern->get_pattern_mappings ().get_hirid (), binding);\n+\t      }\n+\t  }\n+\telse\n \t  {\n-\t    tree variant_accessor\n-\t      = ctx->get_backend ()->struct_field_expression (\n-\t\tmatch_scrutinee_expr, variant_index, pattern->get_locus ());\n+\t    size_t tuple_field_index = 0;\n+\t    for (auto &pattern : items_no_range.get_patterns ())\n+\t      {\n+\t\ttree variant_accessor = match_scrutinee_expr;\n \n-\t    tree binding = ctx->get_backend ()->struct_field_expression (\n-\t      variant_accessor, tuple_field_index++, pattern->get_locus ());\n+\t\ttree binding = ctx->get_backend ()->struct_field_expression (\n+\t\t  variant_accessor, tuple_field_index++, pattern->get_locus ());\n \n-\t    ctx->insert_pattern_binding (\n-\t      pattern->get_pattern_mappings ().get_hirid (), binding);\n+\t\tctx->insert_pattern_binding (\n+\t\t  pattern->get_pattern_mappings ().get_hirid (), binding);\n+\t      }\n \t  }\n       }\n       break;\n@@ -156,18 +177,20 @@ CompilePatternBindings::visit (HIR::StructPattern &pattern)\n   // this must be an enum\n   rust_assert (lookup->get_kind () == TyTy::TypeKind::ADT);\n   TyTy::ADTType *adt = static_cast<TyTy::ADTType *> (lookup);\n-  rust_assert (adt->is_enum ());\n+  rust_assert (adt->number_of_variants () > 0);\n \n-  // lookup the variant\n-  HirId variant_id;\n-  ok = ctx->get_tyctx ()->lookup_variant_definition (\n-    pattern.get_path ().get_mappings ().get_hirid (), &variant_id);\n-  rust_assert (ok);\n+  int variant_index = 0;\n+  TyTy::VariantDef *variant = adt->get_variants ().at (0);\n+  if (adt->is_enum ())\n+    {\n+      HirId variant_id = UNKNOWN_HIRID;\n+      bool ok = ctx->get_tyctx ()->lookup_variant_definition (\n+\tpattern.get_path ().get_mappings ().get_hirid (), &variant_id);\n+      rust_assert (ok);\n \n-  int variant_index = -1;\n-  TyTy::VariantDef *variant = nullptr;\n-  ok = adt->lookup_variant_by_id (variant_id, &variant, &variant_index);\n-  rust_assert (ok);\n+      ok = adt->lookup_variant_by_id (variant_id, &variant, &variant_index);\n+      rust_assert (ok);\n+    }\n \n   rust_assert (variant->get_variant_type ()\n \t       == TyTy::VariantDef::VariantType::STRUCT);\n@@ -193,19 +216,29 @@ CompilePatternBindings::visit (HIR::StructPattern &pattern)\n \t    HIR::StructPatternFieldIdent &ident\n \t      = static_cast<HIR::StructPatternFieldIdent &> (*field.get ());\n \n-\t    tree variant_accessor\n-\t      = ctx->get_backend ()->struct_field_expression (\n-\t\tmatch_scrutinee_expr, variant_index, ident.get_locus ());\n-\n \t    size_t offs = 0;\n \t    ok\n \t      = variant->lookup_field (ident.get_identifier (), nullptr, &offs);\n \t    rust_assert (ok);\n \n-\t    // we are offsetting by + 1 here since the first field in the record\n-\t    // is always the discriminator\n-\t    tree binding = ctx->get_backend ()->struct_field_expression (\n-\t      variant_accessor, offs + 1, ident.get_locus ());\n+\t    tree binding = error_mark_node;\n+\t    if (adt->is_enum ())\n+\t      {\n+\t\ttree variant_accessor\n+\t\t  = ctx->get_backend ()->struct_field_expression (\n+\t\t    match_scrutinee_expr, variant_index, ident.get_locus ());\n+\n+\t\t// we are offsetting by + 1 here since the first field in the\n+\t\t// record is always the discriminator\n+\t\tbinding = ctx->get_backend ()->struct_field_expression (\n+\t\t  variant_accessor, offs + 1, ident.get_locus ());\n+\t      }\n+\t    else\n+\t      {\n+\t\ttree variant_accessor = match_scrutinee_expr;\n+\t\tbinding = ctx->get_backend ()->struct_field_expression (\n+\t\t  variant_accessor, offs, ident.get_locus ());\n+\t      }\n \n \t    ctx->insert_pattern_binding (ident.get_mappings ().get_hirid (),\n \t\t\t\t\t binding);"}, {"sha": "5bff317fe98eba639999b2df60594e5ab5a6dc84", "filename": "gcc/rust/backend/rust-compile-pattern.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80/gcc%2Frust%2Fbackend%2Frust-compile-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80/gcc%2Frust%2Fbackend%2Frust-compile-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-pattern.h?ref=c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80", "patch": "@@ -83,7 +83,7 @@ class CompilePatternBindings : public HIRCompileBase,\n   void visit (HIR::TuplePattern &) override {}\n   void visit (HIR::WildcardPattern &) override {}\n \n-private:\n+protected:\n   CompilePatternBindings (Context *ctx, tree match_scrutinee_expr)\n     : HIRCompileBase (ctx), match_scrutinee_expr (match_scrutinee_expr)\n   {}"}, {"sha": "0a350458f313d980f95acdaa5b7c5cd3be3850fe", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80", "patch": "@@ -116,6 +116,9 @@ class TypeCheckTopLevelExternItem : public TypeCheckBase\n \t\t\t\t\t\t       param_tyty));\n \n \tcontext->insert_type (param.get_mappings (), param_tyty);\n+\n+\t// FIXME do we need error checking for patterns here?\n+\t// see https://github.com/Rust-GCC/gccrs/issues/995\n       }\n \n     uint8_t flags = TyTy::FnType::FNTYPE_IS_EXTERN_FLAG;\n@@ -297,6 +300,7 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n \t\t\t\t\t\t       param_tyty));\n \n \tcontext->insert_type (param.get_mappings (), param_tyty);\n+\tTypeCheckPattern::Resolve (param.get_param_name (), param_tyty);\n       }\n \n     const CanonicalPath *canonical_path = nullptr;"}, {"sha": "feedbc5b899a677bd4d10495a5f5126456e2fc9a", "filename": "gcc/rust/typecheck/rust-hir-type-check-pattern.cc", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc?ref=c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80", "patch": "@@ -37,17 +37,19 @@ TypeCheckPattern::visit (HIR::TupleStructPattern &pattern)\n \n   rust_assert (infered->get_kind () == TyTy::TypeKind::ADT);\n   TyTy::ADTType *adt = static_cast<TyTy::ADTType *> (infered);\n-  rust_assert (adt->is_enum ());\n+  rust_assert (adt->number_of_variants () > 0);\n \n-  // what variant is this?\n-  HirId variant_id;\n-  bool ok = context->lookup_variant_definition (\n-    pattern.get_path ().get_mappings ().get_hirid (), &variant_id);\n-  rust_assert (ok);\n+  TyTy::VariantDef *variant = adt->get_variants ().at (0);\n+  if (adt->is_enum ())\n+    {\n+      HirId variant_id = UNKNOWN_HIRID;\n+      bool ok = context->lookup_variant_definition (\n+\tpattern.get_path ().get_mappings ().get_hirid (), &variant_id);\n+      rust_assert (ok);\n \n-  TyTy::VariantDef *variant = nullptr;\n-  ok = adt->lookup_variant_by_id (variant_id, &variant);\n-  rust_assert (ok);\n+      ok = adt->lookup_variant_by_id (variant_id, &variant);\n+      rust_assert (ok);\n+    }\n \n   // error[E0532]: expected tuple struct or tuple variant, found struct variant\n   // `Foo::D`\n@@ -121,17 +123,19 @@ TypeCheckPattern::visit (HIR::StructPattern &pattern)\n \n   rust_assert (infered->get_kind () == TyTy::TypeKind::ADT);\n   TyTy::ADTType *adt = static_cast<TyTy::ADTType *> (infered);\n-  rust_assert (adt->is_enum ());\n+  rust_assert (adt->number_of_variants () > 0);\n \n-  // what variant is this?\n-  HirId variant_id;\n-  bool ok = context->lookup_variant_definition (\n-    pattern.get_path ().get_mappings ().get_hirid (), &variant_id);\n-  rust_assert (ok);\n+  TyTy::VariantDef *variant = adt->get_variants ().at (0);\n+  if (adt->is_enum ())\n+    {\n+      HirId variant_id = UNKNOWN_HIRID;\n+      bool ok = context->lookup_variant_definition (\n+\tpattern.get_path ().get_mappings ().get_hirid (), &variant_id);\n+      rust_assert (ok);\n \n-  TyTy::VariantDef *variant = nullptr;\n-  ok = adt->lookup_variant_by_id (variant_id, &variant);\n-  rust_assert (ok);\n+      ok = adt->lookup_variant_by_id (variant_id, &variant);\n+      rust_assert (ok);\n+    }\n \n   // error[E0532]: expected tuple struct or tuple variant, found struct variant\n   // `Foo::D`"}, {"sha": "42987716f4f0472d74f30f5ca9c2bb6a9a068f50", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80", "patch": "@@ -448,6 +448,7 @@ class TypeCheckStmt : public TypeCheckBase\n \t\t\t\t\t\t       param_tyty));\n \n \tcontext->insert_type (param.get_mappings (), param_tyty);\n+\tTypeCheckPattern::Resolve (param.get_param_name (), param_tyty);\n       }\n \n     // get the path"}, {"sha": "40aaa872d846448194f87c56e7fce80262d7d12b", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80", "patch": "@@ -416,6 +416,7 @@ class TypeCheckTopLevel : public TypeCheckBase\n \t\t\t\t\t\t       param_tyty));\n \n \tcontext->insert_type (param.get_mappings (), param_tyty);\n+\tTypeCheckPattern::Resolve (param.get_param_name (), param_tyty);\n       }\n \n     const CanonicalPath *canonical_path = nullptr;"}, {"sha": "b09ffc764811d9b64aa6b23c7f2cf7baa3092820", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80", "patch": "@@ -320,6 +320,7 @@ TraitItemReference::get_type_from_fn (/*const*/ HIR::TraitItemFunc &fn) const\n \t\t\t\t\t\t     param_tyty));\n \n       context->insert_type (param.get_mappings (), param_tyty);\n+      TypeCheckPattern::Resolve (param.get_param_name (), param_tyty);\n     }\n \n   auto mappings = Analysis::Mappings::get ();"}, {"sha": "42570e33f7492902d8c9b8f6d1ee82bbf0bacfb7", "filename": "gcc/testsuite/rust/execute/torture/issue-995.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-995.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-995.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-995.rs?ref=c3a3e1053f41819d1f6ff8fa68bcd4aca9fc5f80", "patch": "@@ -0,0 +1,9 @@\n+struct Pattern(i32);\n+\n+fn pattern_as_arg(Pattern(value): Pattern) -> i32 {\n+    value\n+}\n+\n+fn main() -> i32 {\n+    pattern_as_arg(Pattern(15)) - 15\n+}"}]}