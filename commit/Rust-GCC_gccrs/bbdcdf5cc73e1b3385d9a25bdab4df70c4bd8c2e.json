{"sha": "bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e", "node_id": "C_kwDOANBUbNoAKGJiZGNkZjVjYzczZTFiMzM4NWQ5YTI1YmRhYjRkZjcwYzRiZDhjMmU", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-30T00:17:47Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-30T00:17:47Z"}, "message": "Daily bump.", "tree": {"sha": "9583a8381cc41e40a77d1ec9ec526c106233b32a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9583a8381cc41e40a77d1ec9ec526c106233b32a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e/comments", "author": null, "committer": null, "parents": [{"sha": "3a3516bc4a0a0307cd48dce044a497e95816c8f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a3516bc4a0a0307cd48dce044a497e95816c8f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a3516bc4a0a0307cd48dce044a497e95816c8f5"}], "stats": {"total": 696, "additions": 695, "deletions": 1}, "files": [{"sha": "501fde81c1840c42b913bdd53f5d603faa9c0984", "filename": "gcc/ChangeLog", "status": "modified", "additions": 410, "deletions": 0, "changes": 410, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e", "patch": "@@ -1,3 +1,413 @@\n+2022-09-29  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* range-op.cc (plus_minus_ranges): New.\n+\t(adjust_op1_for_overflow): New.\n+\t(operator_plus::op1_range): Use new adjustment.\n+\t(operator_plus::op2_range): Ditto.\n+\t(operator_minus::op1_range): Ditto.\n+\t* value-relation.h (relation_lt_le_gt_ge_p): New.\n+\n+2022-09-29  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-gori.cc (gori_compute::refine_using_relation): New.\n+\t(gori_compute::compute_operand1_range): Invoke\n+\trefine_using_relation when applicable.\n+\t(gori_compute::compute_operand2_range): Ditto.\n+\t* gimple-range-gori.h (class gori_compute): Adjust prototypes.\n+\n+2022-09-29  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-gori.cc (ori_compute::compute_operand_range):\n+\tCreate a relation record and pass it along when possible.\n+\t(gori_compute::compute_operand1_range): Pass relation along.\n+\t(gori_compute::compute_operand2_range): Ditto.\n+\t(gori_compute::compute_operand1_and_operand2_range): Ditto.\n+\t* gimple-range-gori.h (class gori_compute): Adjust prototypes.\n+\t* gimple-range-op.cc (gimple_range_op_handler::calc_op1): Pass\n+\trelation to op1_range call.\n+\t(gimple_range_op_handler::calc_op2): Pass relation to op2_range call.\n+\t* gimple-range-op.h (class gimple_range_op_handler): Adjust\n+\tprototypes.\n+\n+2022-09-29  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* value-relation.cc (class value_relation): Move to .h file.\n+\t(value_relation::set_relation): Ditto.\n+\t(value_relation::value_relation): ditto.\n+\t* value-relation.h (class value_relation): Move from .cc file.\n+\t(value_relation::set_relation): Ditto\n+\t(value_relation::value_relation): Ditto.\n+\n+2022-09-29  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* range-op.cc (operator_minus::op2_range): Check for undefined.\n+\t(operator_mult::op1_range): Ditto.\n+\t(operator_exact_divide::op1_range): Ditto.\n+\t(operator_lshift::op1_range): Ditto.\n+\t(operator_rshift::op1_range): Ditto.\n+\t(operator_cast::op1_range): Ditto.\n+\t(operator_bitwise_and::op1_range): Ditto.\n+\t(operator_bitwise_or::op1_range): Ditto.\n+\t(operator_trunc_mod::op1_range): Ditto.\n+\t(operator_trunc_mod::op2_range): Ditto.\n+\t(operator_bitwise_not::op1_range): Ditto.\n+\t(pointer_or_operator::op1_range): Ditto.\n+\t(range_op_handler::op1_range): Ditto.\n+\t(range_op_handler::op2_range): Ditto.\n+\n+2022-09-29  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn.cc (gcn_simd_clone_compute_vecsize_and_simdlen):\n+\tRemove unused elt_bits variable.\n+\n+2022-09-29  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/vxworks.h: Add comment on our use of\n+\tHAVE_INITFINI_ARRAY_SUPPORT.\n+\n+2022-09-29  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/aarch64/t-aarch64-vxworks: Request multilib\n+\tvariants for mcmodel=large.\n+\n+2022-09-29  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/rs6000/vxworks.h (TARGET_FLOAT128_ENABLE_TYPE): Remove\n+\tresetting to 0.\n+\n+2022-09-29  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/vx-common.h (DWARF2_UNWIND_INFO): #define to 0\n+\twhen ARM_UNWIND_INFO is set.\n+\n+2022-09-29  Julian Brown  <julian@codesourcery.com>\n+\n+\tPR middle-end/107028\n+\t* gimplify.cc (omp_check_mapping_compatibility,\n+\toacc_resolve_clause_dependencies): New functions.\n+\t(omp_accumulate_sibling_list): Remove redundant duplicate clause\n+\tdetection for OpenACC.\n+\t(build_struct_sibling_lists): Skip deleted groups.  Don't build sibling\n+\tlist for struct variables that are fully mapped on the same directive\n+\tfor OpenACC.\n+\t(gimplify_scan_omp_clauses): Call oacc_resolve_clause_dependencies.\n+\n+2022-09-29  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\tPR middle-end/25521\n+\t* varasm.cc (categorize_decl_for_section): Place `const volatile'\n+\tobjects in read-only sections.\n+\t(default_select_section): Likewise.\n+\n+2022-09-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-data-ref.cc (dr_may_alias_p): Use to_poly_widest instead\n+\tof to_widest.\n+\n+2022-09-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.h (TARGET_CRYPTO, TARGET_SHA3, TARGET_SM4)\n+\t(TARGET_DOTPROD): Don't depend on TARGET_SIMD.\n+\t(TARGET_AES, TARGET_SHA2): Likewise.  Remove TARGET_CRYPTO test.\n+\t(TARGET_FP_F16INST): Don't depend on TARGET_FLOAT.\n+\t(TARGET_SVE2, TARGET_SVE_F32MM, TARGET_SVE_F64MM): Don't depend\n+\ton TARGET_SVE.\n+\t(TARGET_SVE2_AES, TARGET_SVE2_BITPERM, TARGET_SVE2_SHA3)\n+\t(TARGET_SVE2_SM4): Don't depend on TARGET_SVE2.\n+\t(TARGET_F32MM, TARGET_F64MM): Delete.\n+\t* config/aarch64/aarch64-c.cc (aarch64_update_cpp_builtins): Guard\n+\tfloat macros with just TARGET_FLOAT rather than TARGET_FLOAT\n+\t|| TARGET_SIMD.\n+\t* config/aarch64/aarch64-simd.md (copysign<mode>3): Depend\n+\tonly on TARGET_SIMD, rather than TARGET_FLOAT && TARGET_SIMD.\n+\t(aarch64_crypto_aes<aes_op>v16qi): Depend only on TARGET_AES,\n+\trather than TARGET_SIMD && TARGET_AES.\n+\t(aarch64_crypto_aes<aesmc_op>v16qi): Likewise.\n+\t(*aarch64_crypto_aese_fused): Likewise.\n+\t(*aarch64_crypto_aesd_fused): Likewise.\n+\t(aarch64_crypto_pmulldi): Likewise.\n+\t(aarch64_crypto_pmullv2di): Likewise.\n+\t(aarch64_crypto_sha1hsi): Likewise TARGET_SHA2.\n+\t(aarch64_crypto_sha1hv4si): Likewise.\n+\t(aarch64_be_crypto_sha1hv4si): Likewise.\n+\t(aarch64_crypto_sha1su1v4si): Likewise.\n+\t(aarch64_crypto_sha1<sha1_op>v4si): Likewise.\n+\t(aarch64_crypto_sha1su0v4si): Likewise.\n+\t(aarch64_crypto_sha256h<sha256_op>v4si): Likewise.\n+\t(aarch64_crypto_sha256su0v4si): Likewise.\n+\t(aarch64_crypto_sha256su1v4si): Likewise.\n+\t(aarch64_crypto_sha512h<sha512_op>qv2di): Likewise TARGET_SHA3.\n+\t(aarch64_crypto_sha512su0qv2di): Likewise.\n+\t(aarch64_crypto_sha512su1qv2di, eor3q<mode>4): Likewise.\n+\t(aarch64_rax1qv2di, aarch64_xarqv2di, bcaxq<mode>4): Likewise.\n+\t(aarch64_sm3ss1qv4si): Likewise TARGET_SM4.\n+\t(aarch64_sm3tt<sm3tt_op>qv4si): Likewise.\n+\t(aarch64_sm3partw<sm3part_op>qv4si): Likewise.\n+\t(aarch64_sm4eqv4si, aarch64_sm4ekeyqv4si): Likewise.\n+\t* config/aarch64/aarch64.md (<FLOATUORS:optab>dihf2)\n+\t(copysign<GPF:mode>3, copysign<GPF:mode>3_insn)\n+\t(xorsign<mode>3): Remove redundant TARGET_FLOAT condition.\n+\n+2022-09-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.opt (aarch64_asm_isa_flags): New variable.\n+\t* config/aarch64/aarch64.h (aarch64_asm_isa_flags)\n+\t(aarch64_isa_flags): Redefine as read-only macros.\n+\t(TARGET_SIMD, TARGET_FLOAT, TARGET_SVE): Don't depend on\n+\t!TARGET_GENERAL_REGS_ONLY.\n+\t* common/config/aarch64/aarch64-common.cc\n+\t(aarch64_set_asm_isa_flags): New function.\n+\t(aarch64_handle_option): Call it when updating -mgeneral-regs.\n+\t* config/aarch64/aarch64-protos.h (aarch64_simd_switcher): Replace\n+\tm_old_isa_flags with m_old_asm_isa_flags.\n+\t(aarch64_set_asm_isa_flags): Declare.\n+\t* config/aarch64/aarch64-builtins.cc\n+\t(aarch64_simd_switcher::aarch64_simd_switcher)\n+\t(aarch64_simd_switcher::~aarch64_simd_switcher): Save and restore\n+\taarch64_asm_isa_flags instead of aarch64_isa_flags.\n+\t* config/aarch64/aarch64-sve-builtins.cc\n+\t(check_required_extensions): Use aarch64_asm_isa_flags instead\n+\tof aarch64_isa_flags.\n+\t* config/aarch64/aarch64.cc (aarch64_set_asm_isa_flags): New function.\n+\t(aarch64_override_options, aarch64_handle_attr_arch)\n+\t(aarch64_handle_attr_cpu, aarch64_handle_attr_isa_flags): Use\n+\taarch64_set_asm_isa_flags to set the ISA flags.\n+\t(aarch64_option_print, aarch64_declare_function_name)\n+\t(aarch64_start_file): Use aarch64_asm_isa_flags instead\n+\tof aarch64_isa_flags.\n+\t(aarch64_can_inline_p): Check aarch64_asm_isa_flags as well as\n+\taarch64_isa_flags.\n+\n+2022-09-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* common/config/aarch64/aarch64-common.cc (all_extensions):\n+\tInclude the feature flag in flags_on and flags_off.\n+\t(aarch64_parse_extension): Update accordingly.\n+\t(aarch64_get_extension_string_for_isa_flags): Likewise.\n+\n+2022-09-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* common/config/aarch64/aarch64-common.cc: Use aarch64_feature_flags\n+\tfor feature flags throughout.\n+\t* config/aarch64/aarch64-protos.h: Likewise.\n+\t* config/aarch64/aarch64-sve-builtins.h: Likewise.\n+\t* config/aarch64/aarch64-sve-builtins.cc: Likewise.\n+\t* config/aarch64/aarch64.cc: Likewise.\n+\t* config/aarch64/aarch64.opt: Likewise.\n+\t* config/aarch64/driver-aarch64.cc: Likewise.\n+\n+2022-09-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* common/config/aarch64/aarch64-common.cc (aarch64_option_extension)\n+\t(processor_name_to_arch, arch_to_arch_name): Remove const from\n+\tmember variables.\n+\t(all_extensions, all_cores, all_architectures): Make a constexpr.\n+\t* config/aarch64/aarch64.cc (processor): Remove const from\n+\tmember variables.\n+\t(all_architectures): Make a constexpr.\n+\t* config/aarch64/driver-aarch64.cc (aarch64_core_data)\n+\t(aarch64_arch_driver_info): Remove const from member variables.\n+\t(aarch64_cpu_data, aarch64_arches): Make a constexpr.\n+\t(get_arch_from_id): Return a pointer to const.\n+\t(host_detect_local_cpu): Update accordingly.\n+\n+2022-09-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* common/config/aarch64/aarch64-common.cc (processor_name_to_arch)\n+\t(arch_to_arch_name): Use const char * instead of std::string.\n+\n+2022-09-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* common/config/aarch64/aarch64-common.cc\n+\t(TARGET_OPTION_INIT_STRUCT): Delete.\n+\t(aarch64_option_extension): Remove is_synthetic_flag.\n+\t(all_extensions): Update accordingly.\n+\t(all_extensions_by_on, opt_ext, opt_ext_cmp): Delete.\n+\t(aarch64_option_init_struct, aarch64_contains_opt): Delete.\n+\t(aarch64_get_extension_string_for_isa_flags): Rewrite to use\n+\tall_extensions instead of all_extensions_on.\n+\n+2022-09-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-option-extensions.def: Switch to a new format.\n+\t* config/aarch64/aarch64-cores.def: Use the same format to specify\n+\tlists of features.\n+\t* config/aarch64/aarch64-arches.def: Likewise, moving that information\n+\tfrom aarch64.h.\n+\t* config/aarch64/aarch64-opts.h (aarch64_feature_flags): New typedef.\n+\t* config/aarch64/aarch64.h (aarch64_feature): New class enum.\n+\tTurn AARCH64_FL_* macros into constexprs, getting the definitions\n+\tfrom aarch64-option-extensions.def.  Remove AARCH64_FL_FOR_* macros.\n+\t* common/config/aarch64/aarch64-common.cc: Include\n+\taarch64-feature-deps.h.\n+\t(all_extensions): Update for new .def format.\n+\t(all_extensions_by_on, all_cores, all_architectures): Likewise.\n+\t* config/aarch64/driver-aarch64.cc: Include aarch64-feature-deps.h.\n+\t(aarch64_extensions): Update for new .def format.\n+\t(aarch64_cpu_data, aarch64_arches): Likewise.\n+\t* config/aarch64/aarch64.cc: Include aarch64-feature-deps.h.\n+\t(all_architectures, all_cores): Update for new .def format.\n+\t* config/aarch64/aarch64-sve-builtins.cc\n+\t(check_required_extensions): Likewise.\n+\t* config/aarch64/aarch64-feature-deps.h: New file.\n+\n+2022-09-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-option-extensions.def: Move crypto\n+\tafter sha2.\n+\n+2022-09-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-option-extensions.def (dotprod): Depend\n+\ton fp as well as simd.\n+\t(sha3): Likewise.\n+\t(aes): Likewise.  Make +noaes disable crypto.\n+\t(sha2): Likewise +nosha2.  Also make +nosha2 disable sha3 and\n+\tsve2-sha3.\n+\t(sve2-sha3): Depend on sha2 as well as sha3.\n+\n+2022-09-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/107025\n+\t* config/aarch64/aarch64.h (oAARCH64_FL_RCPC8_4): Delete.\n+\t(AARCH64_FL_FOR_V8_4A): Update accordingly.\n+\t(AARCH64_ISA_RCPC8_4): Use AARCH64_FL_V8_4A directly.\n+\t* config/aarch64/aarch64-cores.def (thunderx3t110): Remove\n+\tAARCH64_FL_RCPC8_4.\n+\n+2022-09-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-cores.def: Remove AARCH64_FL_FOR_<ARCH>\n+\tfrom the flags field.\n+\t* common/config/aarch64/aarch64-common.cc (all_cores): Add it\n+\there instead.\n+\t* config/aarch64/aarch64.cc (all_cores): Likewise.\n+\t* config/aarch64/driver-aarch64.cc (all_cores): Likewise.\n+\n+2022-09-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config.gcc: Remove dead aarch64-option-extensions.def code.\n+\t* config/aarch64/aarch64-arches.def: Update comment.\n+\n+2022-09-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-arches.def: Add a leading \"V\" to the\n+\tARCH_IDENT fields.\n+\t* config/aarch64/aarch64-cores.def: Update accordingly.\n+\t* common/config/aarch64/aarch64-common.cc (all_cores): Likewise.\n+\t* config/aarch64/aarch64.cc (all_cores): Likewise.\n+\t* config/aarch64/driver-aarch64.cc (aarch64_arches): Skip the\n+\tleading \"V\".\n+\n+2022-09-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.h (AARCH64_FL_FOR_ARCH8): Rename to...\n+\t(AARCH64_FL_FOR_V8A): ...this.\n+\t(AARCH64_FL_FOR_ARCH8_1): Rename to...\n+\t(AARCH64_FL_FOR_V8_1A): ...this.\n+\t(AARCH64_FL_FOR_ARCH8_2): Rename to...\n+\t(AARCH64_FL_FOR_V8_2A): ...this.\n+\t(AARCH64_FL_FOR_ARCH8_3): Rename to...\n+\t(AARCH64_FL_FOR_V8_3A): ...this.\n+\t(AARCH64_FL_FOR_ARCH8_4): Rename to...\n+\t(AARCH64_FL_FOR_V8_4A): ...this.\n+\t(AARCH64_FL_FOR_ARCH8_5): Rename to...\n+\t(AARCH64_FL_FOR_V8_5A): ...this.\n+\t(AARCH64_FL_FOR_ARCH8_6): Rename to...\n+\t(AARCH64_FL_FOR_V8_6A): ...this.\n+\t(AARCH64_FL_FOR_ARCH8_7): Rename to...\n+\t(AARCH64_FL_FOR_V8_7A): ...this.\n+\t(AARCH64_FL_FOR_ARCH8_8): Rename to...\n+\t(AARCH64_FL_FOR_V8_8A): ...this.\n+\t(AARCH64_FL_FOR_ARCH8_R): Rename to...\n+\t(AARCH64_FL_FOR_V8R): ...this.\n+\t(AARCH64_FL_FOR_ARCH9): Rename to...\n+\t(AARCH64_FL_FOR_V9A): ...this.\n+\t(AARCH64_FL_FOR_ARCH9_1): Rename to...\n+\t(AARCH64_FL_FOR_V9_1A): ...this.\n+\t(AARCH64_FL_FOR_ARCH9_2): Rename to...\n+\t(AARCH64_FL_FOR_V9_2A): ...this.\n+\t(AARCH64_FL_FOR_ARCH9_3): Rename to...\n+\t(AARCH64_FL_FOR_V9_3A): ...this.\n+\t* common/config/aarch64/aarch64-common.cc (all_cores): Update\n+\taccordingly.\n+\t* config/aarch64/aarch64-arches.def: Likewise.\n+\t* config/aarch64/aarch64-cores.def: Likewise.\n+\t* config/aarch64/aarch64.cc (all_cores): Likewise.\n+\n+2022-09-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.h (AARCH64_FL_V8_1, AARCH64_FL_V8_2)\n+\t(AARCH64_FL_V8_3, AARCH64_FL_V8_4, AARCH64_FL_V8_5, AARCH64_FL_V8_6)\n+\t(AARCH64_FL_V9, AARCH64_FL_V8_7, AARCH64_FL_V8_8, AARCH64_FL_V9_1)\n+\t(AARCH64_FL_V9_2, AARCH64_FL_V9_3): Add \"A\" to the end of the name.\n+\t(AARCH64_FL_V8_R): Rename to AARCH64_FL_V8R.\n+\t(AARCH64_FL_FOR_ARCH8_1, AARCH64_FL_FOR_ARCH8_2): Update accordingly.\n+\t(AARCH64_FL_FOR_ARCH8_3, AARCH64_FL_FOR_ARCH8_4): Likewise.\n+\t(AARCH64_FL_FOR_ARCH8_5, AARCH64_FL_FOR_ARCH8_6): Likewise.\n+\t(AARCH64_FL_FOR_ARCH8_7, AARCH64_FL_FOR_ARCH8_8): Likewise.\n+\t(AARCH64_FL_FOR_ARCH8_R, AARCH64_FL_FOR_ARCH9): Likewise.\n+\t(AARCH64_FL_FOR_ARCH9_1, AARCH64_FL_FOR_ARCH9_2): Likewise.\n+\t(AARCH64_FL_FOR_ARCH9_3, AARCH64_ISA_V8_2A, AARCH64_ISA_V8_3A)\n+\t(AARCH64_ISA_V8_4A, AARCH64_ISA_V8_5A, AARCH64_ISA_V8_6A): Likewise.\n+\t(AARCH64_ISA_V8R, AARCH64_ISA_V9A, AARCH64_ISA_V9_1A): Likewise.\n+\t(AARCH64_ISA_V9_2A, AARCH64_ISA_V9_3A): Likewise.\n+\n+2022-09-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.h (AARCH64_ISA_V8_2, AARCH64_ISA_V8_3)\n+\t(AARCH64_ISA_V8_4, AARCH64_ISA_V8_5, AARCH64_ISA_V8_6)\n+\t(AARCH64_ISA_V9, AARCH64_ISA_V9_1, AARCH64_ISA_V9_2)\n+\t(AARCH64_ISA_V9_3): Add \"A\" to the end of the name.\n+\t(AARCH64_ISA_V8_R): Rename to AARCH64_ISA_V8R.\n+\t(TARGET_ARMV8_3, TARGET_JSCVT, TARGET_FRINT, TARGET_MEMTAG): Update\n+\taccordingly.\n+\t* common/config/aarch64/aarch64-common.cc\n+\t(aarch64_get_extension_string_for_isa_flags): Likewise.\n+\t* config/aarch64/aarch64-c.cc\n+\t(aarch64_define_unconditional_macros): Likewise.\n+\n+2022-09-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* Makefile.in (GTFILES): Add OPTIONS_H_EXTRA.\n+\n+2022-09-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR bootstrap/107059\n+\t* cppdefault.cc (cpp_include_defaults): If SYSROOT_HEADERS_SUFFIX_SPEC\n+\tisn't defined, add FIXED_INCLUDE_DIR entry with multilib flag 2\n+\tbefore FIXED_INCLUDE_DIR entry with multilib flag 0.\n+\t* gcc.cc (do_spec_1): If multiarch_dir, add\n+\tinclude-fixed/multiarch_dir paths before include-fixed paths.\n+\n+2022-09-29  Martin Liska  <mliska@suse.cz>\n+\n+\tPR driver/106897\n+\t* common.opt: Add -gz=zstd value.\n+\t* configure.ac: Detect --compress-debug-sections=zstd\n+\tfor both linker and assembler.\n+\t* configure: Regenerate.\n+\t* gcc.cc (LINK_COMPRESS_DEBUG_SPEC): Handle -gz=zstd.\n+\t(ASM_COMPRESS_DEBUG_SPEC): Likewise.\n+\n+2022-09-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/105646\n+\t* tree-ssa-uninit.cc (warn_uninitialized_vars): Pre-compute\n+\tthe set of fallthru reachable blocks from function entry\n+\tand use that to determine wlims.always_executed.\n+\n+2022-09-29  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR tree-optimization/107055\n+\t* tree-vect-loop-manip.cc (vect_can_advance_ivs_p): Check for\n+\tnonlinear induction variables.\n+\t* tree-vect-loop.cc (vect_can_peel_nonlinear_iv_p): New\n+\tfunctions.\n+\t(vectorizable_nonlinear_induction): Put part codes into\n+\tvect_can_peel_nonlinear_iv_p.\n+\t* tree-vectorizer.h (vect_can_peel_nonlinear_iv_p): Declare.\n+\n 2022-09-28  Eugene Rozenfeld  <erozen@microsoft.com>\n \n \t* basic-block.h: Remove discriminator from basic blocks."}, {"sha": "47b36b023d0f3cc49d2ded5aa58f97157dc77410", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e", "patch": "@@ -1 +1 @@\n-20220929\n+20220930"}, {"sha": "be8371d3383d5faabb08f83b3241c42d2149cc37", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e", "patch": "@@ -1,3 +1,24 @@\n+2022-09-29  Ronan Desplanques  <desplanques@adacore.com>\n+\n+\t* einfo.ads: remove documentation duplicate\n+\n+2022-09-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* contracts.adb (Build_Subprogram_Contract_Wrapper): Put back the\n+\textended return statement if the result type is built-in-place.\n+\t* sem_attr.adb (Analyze_Attribute_Old_Result): Also expect an\n+\textended return statement.\n+\n+2022-09-29  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch5.adb\n+\t(Expand_Assign_Array_Loop_Or_Bitfield): Make the checks for\n+\tvolatile and independent objects more precise.\n+\n+2022-09-29  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb (Collect_Visible_States): Ignore package renamings.\n+\n 2022-09-26  Ghjuvan Lacambre  <lacambre@adacore.com>\n \n \t* doc/gnat_rm/implementation_defined_attributes.rst: Rename Valid_Image."}, {"sha": "037eef862aeb48d80d52827946c3c4886cfbf231", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e", "patch": "@@ -1,3 +1,15 @@\n+2022-09-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-lex.cc (c_common_has_attribute): Handle noreturn attribute for\n+\tC.\n+\n+2022-09-29  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* c-common.cc (c_common_reswords): Add __remove_cv,\n+\t__remove_reference and __remove_cvref.\n+\t* c-common.h (enum rid): Add RID_REMOVE_CV, RID_REMOVE_REFERENCE\n+\tand RID_REMOVE_CVREF.\n+\n 2022-09-27  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/101165"}, {"sha": "f5c9a592dfa6b2274ca40c1aad1bf9006d318c50", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e", "patch": "@@ -1,3 +1,8 @@\n+2022-09-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-decl.cc (handle_std_noreturn_attribute): New function.\n+\t(std_attribute_table): Add _Noreturn and noreturn.\n+\n 2022-09-27  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-lang.h (current_omp_begin_assumes): Declare."}, {"sha": "b36fc614c3a44552aed3c80b9c3e147ca01523c9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e", "patch": "@@ -1,3 +1,107 @@\n+2022-09-29  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/102576\n+\t* pt.cc (listify): Use lookup_qualified_name instead of\n+\tget_namespace_binding.\n+\n+2022-09-29  Jason Merrill  <jason@redhat.com>\n+\n+\t* class.cc (check_methods): Call constraints_satisfied_p.\n+\n+2022-09-29  Jason Merrill  <jason@redhat.com>\n+\n+\t* constexpr.cc (potential_constant_expression_1): Look into\n+\tDECL_INITIAL.  Use location wrappers.\n+\n+2022-09-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/93046\n+\t* call.cc (build_conditional_expr): For a?:c extension, treat\n+\ta reused class prvalue as an xvalue.\n+\n+2022-09-29  Jason Merrill  <jason@redhat.com>\n+\n+\t* call.cc (build_conditional_expr): Set TARGET_EXPR_NO_ELIDE on the\n+\touter TARGET_EXPR.\n+\n+2022-09-29  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* constraint.cc (diagnose_trait_expr): Handle CPTK_REMOVE_CV,\n+\tCPTK_REMOVE_REFERENCE and CPTK_REMOVE_CVREF.\n+\t* cp-objcp-common.cc (names_builtin_p): Likewise.\n+\t* cp-tree.h (enum cp_trait_kind): Add CPTK_REMOVE_CV,\n+\tCPTK_REMOVE_REFERENCE and CPTK_REMOVE_CVREF.\n+\t* cxx-pretty-print.cc (pp_cxx_trait): Handle CPTK_REMOVE_CV,\n+\tCPTK_REMOVE_REFERENCE and CPTK_REMOVE_CVREF.\n+\t* parser.cc (cp_keyword_starts_decl_specifier_p): Return true\n+\tfor RID_REMOVE_CV, RID_REMOVE_REFERENCE and RID_REMOVE_CVREF.\n+\t(cp_parser_trait): Handle RID_REMOVE_CV, RID_REMOVE_REFERENCE\n+\tand RID_REMOVE_CVREF.\n+\t(cp_parser_simple_type_specifier): Likewise.\n+\t* semantics.cc (finish_trait_type): Likewise.\n+\n+2022-09-29  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* cp-objcp-common.cc (cp_common_init_ts): Replace\n+\tUNDERLYING_TYPE with TRAIT_TYPE.\n+\t* cp-tree.def (TRAIT_TYPE): Define.\n+\t(UNDERLYING_TYPE): Remove.\n+\t* cp-tree.h (TRAIT_TYPE_KIND_RAW): Define.\n+\t(TRAIT_TYPE_KIND): Define.\n+\t(TRAIT_TYPE_TYPE1): Define.\n+\t(TRAIT_TYPE_TYPE2): Define.\n+\t(WILDCARD_TYPE_P): Return true for TRAIT_TYPE.\n+\t(finish_trait_type): Declare.\n+\t* cxx-pretty-print.cc (cxx_pretty_printer::primary_expression):\n+\tAdjust after renaming pp_cxx_trait_expression.\n+\t(cxx_pretty_printer::simple_type_specifier) <case TRAIT_TYPE>:\n+\tNew.\n+\t(cxx_pretty_printer::type_id): Replace UNDERLYING_TYPE with\n+\tTRAIT_TYPE.\n+\t(pp_cxx_trait_expression): Rename to ...\n+\t(pp_cxx_trait): ... this.  Handle TRAIT_TYPE as well.  Correct\n+\tpretty printing of the trailing arguments.\n+\t* cxx-pretty-print.h (pp_cxx_trait_expression): Rename to ...\n+\t(pp_cxx_trait_type): ... this.\n+\t* error.cc (dump_type) <case UNDERLYING_TYPE>: Remove.\n+\t<case TRAIT_TYPE>: New.\n+\t(dump_type_prefix): Replace UNDERLYING_WITH with TRAIT_TYPE.\n+\t(dump_type_suffix): Likewise.\n+\t* mangle.cc (write_type) <case UNDERLYING_TYPE>: Remove.\n+\t<case TRAIT_TYPE>: New.\n+\t* module.cc (trees_out::type_node) <case UNDERLYING_TYPE>:\n+\tRemove.\n+\t<case TRAIT_TYPE>: New.\n+\t(trees_in::tree_node): Likewise.\n+\t* parser.cc (cp_parser_primary_expression): Adjust after\n+\trenaming cp_parser_trait_expr.\n+\t(cp_parser_trait_expr): Rename to ...\n+\t(cp_parser_trait): ... this.  Call finish_trait_type for traits\n+\tthat yield a type.\n+\t(cp_parser_simple_type_specifier): Adjust after renaming\n+\tcp_parser_trait_expr.\n+\t* pt.cc (for_each_template_parm_r) <case UNDERLYING_TYPE>:\n+\tRemove.\n+\t<case TRAIT_TYPE>: New.\n+\t(tsubst): Likewise.\n+\t(unify): Replace UNDERLYING_TYPE with TRAIT_TYPE.\n+\t(dependent_type_p_r): Likewise.\n+\t* semantics.cc (finish_underlying_type): Don't return\n+\tUNDERLYING_TYPE anymore when processing_template_decl.\n+\t(finish_trait_type): Define.\n+\t* tree.cc (strip_typedefs) <case UNDERLYING_TYPE>: Remove.\n+\t<case TRAIT_TYPE>: New.\n+\t(cp_walk_subtrees): Likewise.\n+\t* typeck.cc (structural_comptypes): Likewise.\n+\n+2022-09-29  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/100616\n+\t* module.cc (enum tree_tag): Add tt_nttp_var.\n+\t(trees_out::decl_node): Handle NTTP objects.\n+\t(trees_in::tree_node): Handle tt_nttp_var.\n+\t(depset::hash::add_binding_entry): Skip NTTP objects.\n+\n 2022-09-28  Eugene Rozenfeld  <erozen@microsoft.com>\n \n \t* module.cc (write_location): Write discriminator."}, {"sha": "44346d3d36eeefd919aec39596ed197ac68df9f2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e", "patch": "@@ -1,3 +1,122 @@\n+2022-09-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c2x-attr-noreturn-1.c, gcc.dg/c2x-attr-noreturn-2.c,\n+\tgcc.dg/c2x-attr-noreturn-3.c: New tests.\n+\t* gcc.dg/c2x-has-c-attribute-2.c: Also test __has_c_attribute for\n+\tnoreturn attribute.\n+\n+2022-09-29  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/pr79095.c: Test evrp pass rather than vrp1.\n+\n+2022-09-29  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/102892\n+\t* gcc.dg/pr102892-1.c: Remove undefined behaviour.\n+\n+2022-09-29  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/102576\n+\t* g++.dg/modules/pr102576_a.H: New test.\n+\t* g++.dg/modules/pr102576_b.C: New test.\n+\n+2022-09-29  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp2a/cond-triv3.C: New test.\n+\n+2022-09-29  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp1y/constexpr-local4.C: Expect error sooner.\n+\t* g++.dg/cpp2a/consteval24.C: Likewise.\n+\t* g++.dg/cpp2a/consteval7.C: Likewise.\n+\t* g++.dg/cpp2a/inline-asm3.C: Likewise.\n+\n+2022-09-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/93046\n+\t* g++.dg/ext/cond4.C: Add runtime test.\n+\n+2022-09-29  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/tree-ssa/cond-temp1.C: New test.\n+\n+2022-09-29  Julian Brown  <julian@codesourcery.com>\n+\n+\tPR middle-end/107028\n+\t* c-c++-common/goacc/struct-component-kind-1.c: New test.\n+\t* g++.dg/goacc/pr107028-1.C: New test.\n+\t* g++.dg/goacc/pr107028-2.C: New test.\n+\t* gfortran.dg/goacc/mapping-tests-5.f90: New test.\n+\n+2022-09-29  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* g++.dg/ext/has-builtin-1.C: Test existence of __remove_cv,\n+\t__remove_reference and __remove_cvref.\n+\t* g++.dg/ext/remove_cv.C: New test.\n+\t* g++.dg/ext/remove_reference.C: New test.\n+\t* g++.dg/ext/remove_cvref.C: New test.\n+\n+2022-09-29  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* g++.dg/cpp0x/alias-decl-59.C: Adjust expected error message.\n+\t* g++.dg/ext/underlying_type7.C: Likewise.\n+\t* g++.dg/ext/underlying_type13.C: New test.\n+\t* g++.dg/ext/underlying_type14.C: New test.\n+\n+2022-09-29  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/100616\n+\t* g++.dg/modules/100616_a.H: New.\n+\t* g++.dg/modules/100616_b.C: New.\n+\t* g++.dg/modules/100616_c.C: New.\n+\t* g++.dg/modules/100616_d.C: New.\n+\n+2022-09-29  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\tPR middle-end/25521\n+\t* lib/target-supports.exp (check_effective_target_elf): Define.\n+\t* gcc.dg/pr25521.c: New test.\n+\n+2022-09-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/cpunative/info_8: Add all dependencies of sve.\n+\t* gcc.target/aarch64/cpunative/info_9: Likewise svesm4.\n+\t* gcc.target/aarch64/cpunative/info_15: Likewise.\n+\t* gcc.target/aarch64/cpunative/info_16: Likewise sve2.\n+\t* gcc.target/aarch64/cpunative/info_17: Likewise.\n+\t* gcc.target/aarch64/cpunative/native_cpu_2.c: Expect just +nofp\n+\trather than +nofp+nosimd.\n+\t* gcc.target/aarch64/cpunative/native_cpu_10.c: Likewise.\n+\t* gcc.target/aarch64/target_attr_15.c: Likewise.\n+\n+2022-09-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/cpunative/native_cpu_0.c: Expect +crypto\n+\tto come after +crc.\n+\t* gcc.target/aarch64/cpunative/native_cpu_13.c: Likewise.\n+\t* gcc.target/aarch64/cpunative/native_cpu_16.c: Likewise.\n+\t* gcc.target/aarch64/cpunative/native_cpu_17.c: Likewise.\n+\t* gcc.target/aarch64/cpunative/native_cpu_6.c: Likewise.\n+\t* gcc.target/aarch64/cpunative/native_cpu_7.c: Likewise.\n+\t* gcc.target/aarch64/options_set_2.c: Likewise.\n+\t* gcc.target/aarch64/options_set_3.c: Likewise.\n+\t* gcc.target/aarch64/options_set_4.c: Likewise.\n+\n+2022-09-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/options_set_6.c: Expect +crypto+nosha2 to\n+\tdisable crypto but keep aes.\n+\t* gcc.target/aarch64/pragma_cpp_predefs_4.c: New test.\n+\n+2022-09-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/105646\n+\t* g++.dg/uninit-pr105646.C: New testcase.\n+\n+2022-09-29  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr107055.c: New test.\n+\n 2022-09-28  Eugene Rozenfeld  <erozen@microsoft.com>\n \n \t* c-c++-common/ubsan/pr85213.c: Pass -gno-statement-frontiers."}, {"sha": "c626df2821ed12168b752ea2861c6cf5d791bc01", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e", "patch": "@@ -1,3 +1,9 @@\n+2022-09-29  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/vxcrtstuff.c: Improve the comment attached to the use\n+\tof auto-host.h and of __dso_handle.  Remove redundant guard on\n+\tHAVE_INITFINI_ARRAY_SUPPORT within a USE_INITFINI_ARRAY section.\n+\n 2022-09-26  Thomas Neumann  <tneumann@users.sourceforge.net>\n \n \t* unwind-dw2-fde.c: Introduce a constant for in_shutdown"}, {"sha": "1fe18dcd9c554c8e972a95ac8afac868a4b9ba22", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e", "patch": "@@ -1,3 +1,20 @@\n+2022-09-29  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* python/libstdcxx/v6/printers.py (add_one_template_type_printer): Register\n+\tprinter for types in std::__debug namespace with template parameters in std::__8\n+\tnamespace.\n+\n+2022-09-29  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/unique_ptr.h (unique_ptr<_Tp[], _Dp>): Remove\n+\t__remove_cv and use __remove_cv_t instead.\n+\n+2022-09-29  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/type_traits (__is_invocable_impl): Check\n+\t__has_builtin(__reference_converts_from_temporary) before using\n+\tbuilt-in.\n+\n 2022-09-28  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/xml/manual/evolution.xml: Document std::bind API"}]}