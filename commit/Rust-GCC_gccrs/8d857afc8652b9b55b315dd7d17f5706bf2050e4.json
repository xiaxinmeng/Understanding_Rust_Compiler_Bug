{"sha": "8d857afc8652b9b55b315dd7d17f5706bf2050e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ4NTdhZmM4NjUyYjliNTViMzE1ZGQ3ZDE3ZjU3MDZiZjIwNTBlNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-05-31T19:49:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-05-31T19:49:22Z"}, "message": "* pt.c (instantiate_decl): Avoid recalculation.\n\nFrom-SVN: r236947", "tree": {"sha": "602e4b25e0427546299cdfa59707f9af0cfeb076", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/602e4b25e0427546299cdfa59707f9af0cfeb076"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d857afc8652b9b55b315dd7d17f5706bf2050e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d857afc8652b9b55b315dd7d17f5706bf2050e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d857afc8652b9b55b315dd7d17f5706bf2050e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d857afc8652b9b55b315dd7d17f5706bf2050e4/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1f032c533faf596b4627444a2a0f9f68f05f3ef0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f032c533faf596b4627444a2a0f9f68f05f3ef0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f032c533faf596b4627444a2a0f9f68f05f3ef0"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "2850334efff75b26be9b77c57069a17142715246", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d857afc8652b9b55b315dd7d17f5706bf2050e4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d857afc8652b9b55b315dd7d17f5706bf2050e4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8d857afc8652b9b55b315dd7d17f5706bf2050e4", "patch": "@@ -1,5 +1,7 @@\n 2016-05-31  Jason Merrill  <jason@redhat.com>\n \n+\t* pt.c (instantiate_decl): Avoid recalculation.\n+\n \tPR c++/60095\n \tPR c++/69515\n \tPR c++/69009"}, {"sha": "64fef68c9e389ebcd67e2ab811ff592e60b35d52", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d857afc8652b9b55b315dd7d17f5706bf2050e4/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d857afc8652b9b55b315dd7d17f5706bf2050e4/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=8d857afc8652b9b55b315dd7d17f5706bf2050e4", "patch": "@@ -21971,7 +21971,6 @@ instantiate_decl (tree d, int defer_ok,\n   else if (TREE_CODE (d) == FUNCTION_DECL)\n     {\n       hash_map<tree, tree> *saved_local_specializations;\n-      tree subst_decl;\n       tree tmpl_parm;\n       tree spec_parm;\n       tree block = NULL_TREE;\n@@ -21994,18 +21993,17 @@ instantiate_decl (tree d, int defer_ok,\n \t access checked at template instantiation time, i.e now. These\n \t types were added to the template at parsing time. Let's get those\n \t and perform the access checks then.  */\n-      perform_typedefs_access_check (DECL_TEMPLATE_RESULT (gen_tmpl),\n-\t\t\t\t     gen_args);\n+      perform_typedefs_access_check (DECL_TEMPLATE_RESULT (td),\n+\t\t\t\t     args);\n \n       /* Create substitution entries for the parameters.  */\n-      subst_decl = DECL_TEMPLATE_RESULT (template_for_substitution (d));\n-      tmpl_parm = DECL_ARGUMENTS (subst_decl);\n+      tmpl_parm = DECL_ARGUMENTS (code_pattern);\n       spec_parm = DECL_ARGUMENTS (d);\n       if (DECL_NONSTATIC_MEMBER_FUNCTION_P (d))\n \t{\n \t  register_local_specialization (spec_parm, tmpl_parm);\n \t  spec_parm = skip_artificial_parms_for (d, spec_parm);\n-\t  tmpl_parm = skip_artificial_parms_for (subst_decl, tmpl_parm);\n+\t  tmpl_parm = skip_artificial_parms_for (code_pattern, tmpl_parm);\n \t}\n       for (; tmpl_parm; tmpl_parm = DECL_CHAIN (tmpl_parm))\n \t{"}]}