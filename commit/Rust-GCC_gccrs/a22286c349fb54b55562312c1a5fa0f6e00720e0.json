{"sha": "a22286c349fb54b55562312c1a5fa0f6e00720e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIyMjg2YzM0OWZiNTRiNTU1NjIzMTJjMWE1ZmEwZjZlMDA3MjBlMA==", "commit": {"author": {"name": "Gabriel Charette", "email": "gchare@google.com", "date": "2011-10-13T15:40:29Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2011-10-13T15:40:29Z"}, "message": "streamer-hooks.h (struct streamer_hooks): Add hooks input_location and output_location.\n\n2011-10-12  Gabriel Charette  <gchare@google.com>\n\t    Diego Novillo  <dnovillo@google.com>\n\n\t* streamer-hooks.h (struct streamer_hooks): Add hooks\n\tinput_location and output_location.\n\t* lto-streamer-in.c (lto_input_location): Use\n\tstreamer_hooks.input_location, if set.\n\t* lto-streamer-out.c (lto_output_location): Use\n\tstreamer_hooks.output_location, if set.\n\nCo-Authored-By: Diego Novillo <dnovillo@google.com>\n\nFrom-SVN: r179927", "tree": {"sha": "85421770432a8e88feb71769de2ba639ea6ac0c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85421770432a8e88feb71769de2ba639ea6ac0c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a22286c349fb54b55562312c1a5fa0f6e00720e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a22286c349fb54b55562312c1a5fa0f6e00720e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a22286c349fb54b55562312c1a5fa0f6e00720e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a22286c349fb54b55562312c1a5fa0f6e00720e0/comments", "author": null, "committer": null, "parents": [{"sha": "d8228b30349a52da10b35dfaf6fae311bc29c3a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8228b30349a52da10b35dfaf6fae311bc29c3a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8228b30349a52da10b35dfaf6fae311bc29c3a5"}], "stats": {"total": 51, "additions": 43, "deletions": 8}, "files": [{"sha": "bc917aec1f9c1466248abc8248b6b58b84f59a0f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a22286c349fb54b55562312c1a5fa0f6e00720e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a22286c349fb54b55562312c1a5fa0f6e00720e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a22286c349fb54b55562312c1a5fa0f6e00720e0", "patch": "@@ -1,3 +1,13 @@\n+2011-10-13  Gabriel Charette  <gchare@google.com>\n+\t    Diego Novillo  <dnovillo@google.com>\n+\n+\t* streamer-hooks.h (struct streamer_hooks): Add hooks\n+\tinput_location and output_location.\n+\t* lto-streamer-in.c (lto_input_location): Use\n+\tstreamer_hooks.input_location, if set.\n+\t* lto-streamer-out.c (lto_output_location): Use\n+\tstreamer_hooks.output_location, if set.\n+\n 2011-10-13  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/50712"}, {"sha": "f18b944ef95f753b754b9740f0a0fe62d13d0bc4", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a22286c349fb54b55562312c1a5fa0f6e00720e0/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a22286c349fb54b55562312c1a5fa0f6e00720e0/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=a22286c349fb54b55562312c1a5fa0f6e00720e0", "patch": "@@ -50,6 +50,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"lto-streamer.h\"\n #include \"tree-streamer.h\"\n #include \"tree-pass.h\"\n+#include \"streamer-hooks.h\"\n \n /* The table to hold the file names.  */\n static htab_t file_name_hash_table;\n@@ -180,15 +181,23 @@ lto_input_location_bitpack (struct data_in *data_in, struct bitpack_d *bp)\n }\n \n \n-/* Read a location from input block IB.  */\n+/* Read a location from input block IB.\n+   If the input_location streamer hook exists, call it.\n+   Otherwise, proceed with reading the location from the\n+   expanded location bitpack.  */\n \n location_t\n lto_input_location (struct lto_input_block *ib, struct data_in *data_in)\n {\n-  struct bitpack_d bp;\n+  if (streamer_hooks.input_location)\n+    return streamer_hooks.input_location (ib, data_in);\n+  else\n+    {\n+      struct bitpack_d bp;\n \n-  bp = streamer_read_bitpack (ib);\n-  return lto_input_location_bitpack (data_in, &bp);\n+      bp = streamer_read_bitpack (ib);\n+      return lto_input_location_bitpack (data_in, &bp);\n+    }\n }\n \n "}, {"sha": "4d88f62d0913df93a1866f948d28da636cf38d4a", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a22286c349fb54b55562312c1a5fa0f6e00720e0/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a22286c349fb54b55562312c1a5fa0f6e00720e0/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=a22286c349fb54b55562312c1a5fa0f6e00720e0", "patch": "@@ -172,15 +172,21 @@ lto_output_location_bitpack (struct bitpack_d *bp,\n \n \n /* Emit location LOC to output block OB.\n-   When bitpack is handy, it is more space effecient to call\n+   If the output_location streamer hook exists, call it.\n+   Otherwise, when bitpack is handy, it is more space efficient to call\n    lto_output_location_bitpack with existing bitpack.  */\n \n void\n lto_output_location (struct output_block *ob, location_t loc)\n {\n-  struct bitpack_d bp = bitpack_create (ob->main_stream);\n-  lto_output_location_bitpack (&bp, ob, loc);\n-  streamer_write_bitpack (&bp);\n+  if (streamer_hooks.output_location)\n+    streamer_hooks.output_location (ob, loc);\n+  else\n+    {\n+      struct bitpack_d bp = bitpack_create (ob->main_stream);\n+      lto_output_location_bitpack (&bp, ob, loc);\n+      streamer_write_bitpack (&bp);\n+    }\n }\n \n "}, {"sha": "0c1d483ac6ac763b06e2050cfe5e7cb578160f1b", "filename": "gcc/streamer-hooks.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a22286c349fb54b55562312c1a5fa0f6e00720e0/gcc%2Fstreamer-hooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a22286c349fb54b55562312c1a5fa0f6e00720e0/gcc%2Fstreamer-hooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstreamer-hooks.h?ref=a22286c349fb54b55562312c1a5fa0f6e00720e0", "patch": "@@ -51,6 +51,16 @@ struct streamer_hooks {\n      and descriptors needed by the unpickling routines.  It returns the\n      tree instantiated from the stream.  */\n   tree (*read_tree) (struct lto_input_block *, struct data_in *);\n+\n+  /* [OPT] Called by lto_input_location to retrieve the source location of the\n+     tree currently being read. If this hook returns NULL, lto_input_location\n+     defaults to calling lto_input_location_bitpack.  */\n+  location_t (*input_location) (struct lto_input_block *, struct data_in *);\n+\n+  /* [OPT] Called by lto_output_location to write the source_location of the\n+     tree currently being written. If this hook returns NULL,\n+     lto_output_location defaults to calling lto_output_location_bitpack.  */\n+  void (*output_location) (struct output_block *, location_t);\n };\n \n #define stream_write_tree(OB, EXPR, REF_P) \\"}]}