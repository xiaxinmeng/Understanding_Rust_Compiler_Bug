{"sha": "cb751cbd75e9aa0d841d7c38664b0dd413150409", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I3NTFjYmQ3NWU5YWEwZDg0MWQ3YzM4NjY0YjBkZDQxMzE1MDQwOQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2010-04-27T09:34:08Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2010-04-27T09:34:08Z"}, "message": "re PR target/40657 (allocate local variables with fewer instructions)\n\n\tPR target/40657\n\t* config/arm/arm.c (thumb1_extra_regs_pushed): New function.\n\t(thumb1_expand_prologue, thumb1_output_function_prologue): Call it\n\there to determine which regs to push and how much stack to reserve.\n\n\tPR target/40657\n\t* gcc.target/arm/thumb-stackframe.c: New test.\n\nFrom-SVN: r158771", "tree": {"sha": "590b6fcd87fdd36bc035f67a23648f0756834d8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/590b6fcd87fdd36bc035f67a23648f0756834d8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb751cbd75e9aa0d841d7c38664b0dd413150409", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb751cbd75e9aa0d841d7c38664b0dd413150409", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb751cbd75e9aa0d841d7c38664b0dd413150409", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb751cbd75e9aa0d841d7c38664b0dd413150409/comments", "author": null, "committer": null, "parents": [{"sha": "a502783080621669758f49c9e603c7089a0d5edc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a502783080621669758f49c9e603c7089a0d5edc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a502783080621669758f49c9e603c7089a0d5edc"}], "stats": {"total": 77, "additions": 76, "deletions": 1}, "files": [{"sha": "95444f190380a02e66a49a298bdd36d83bfa1c8d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb751cbd75e9aa0d841d7c38664b0dd413150409/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb751cbd75e9aa0d841d7c38664b0dd413150409/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb751cbd75e9aa0d841d7c38664b0dd413150409", "patch": "@@ -1,3 +1,10 @@\n+2010-04-27  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\tPR target/40657\n+\t* config/arm/arm.c (thumb1_extra_regs_pushed): New function.\n+\t(thumb1_expand_prologue, thumb1_output_function_prologue): Call it\n+\there to determine which regs to push and how much stack to reserve.\n+\n 2010-04-27  Jie Zhang  <jie@codesourcery.com>\n \n \t* doc/gimple.texi (gimple_statement_with_ops): Remove"}, {"sha": "72d54736f05f990a540e730f6f51f73fae29e079", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb751cbd75e9aa0d841d7c38664b0dd413150409/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb751cbd75e9aa0d841d7c38664b0dd413150409/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=cb751cbd75e9aa0d841d7c38664b0dd413150409", "patch": "@@ -19402,6 +19402,51 @@ thumb_compute_initial_elimination_offset (unsigned int from, unsigned int to)\n     }\n }\n \n+/* Given the stack offsets and register mask in OFFSETS, decide\n+   how many additional registers to push instead of subtracting\n+   a constant from SP.  */\n+static int\n+thumb1_extra_regs_pushed (arm_stack_offsets *offsets)\n+{\n+  HOST_WIDE_INT amount = offsets->outgoing_args - offsets->saved_regs;\n+  unsigned long live_regs_mask = offsets->saved_regs_mask;\n+  /* Extract a mask of the ones we can give to the Thumb's push instruction.  */\n+  unsigned long l_mask = live_regs_mask & 0x40ff;\n+  /* Then count how many other high registers will need to be pushed.  */\n+  unsigned long high_regs_pushed = bit_count (live_regs_mask & 0x0f00);\n+  int n_free;\n+\n+  /* If the stack frame size is 512 exactly, we can save one load\n+     instruction, which should make this a win even when optimizing\n+     for speed.  */\n+  if (!optimize_size && amount != 512)\n+    return 0;\n+\n+  /* Can't do this if there are high registers to push, or if we\n+     are not going to do a push at all.  */\n+  if (high_regs_pushed != 0 || l_mask == 0)\n+    return 0;\n+\n+  /* Don't do this if thumb1_expand_prologue wants to emit instructions\n+     between the push and the stack frame allocation.  */\n+  if ((flag_pic && arm_pic_register != INVALID_REGNUM)\n+      || (!frame_pointer_needed && CALLER_INTERWORKING_SLOT_SIZE > 0))\n+    return 0;\n+\n+  for (n_free = 0; n_free < 8 && !(live_regs_mask & 1); live_regs_mask >>= 1)\n+    n_free++;\n+\n+  if (n_free == 0)\n+    return 0;\n+  gcc_assert (amount / 4 * 4 == amount);\n+\n+  if (amount >= 512 && (amount - n_free * 4) < 512)\n+    return (amount - 508) / 4;\n+  if (amount <= n_free * 4)\n+    return amount / 4;\n+  return 0;\n+}\n+\n /* Generate the rest of a function's prologue.  */\n void\n thumb1_expand_prologue (void)\n@@ -19438,6 +19483,7 @@ thumb1_expand_prologue (void)\n \t\t    stack_pointer_rtx);\n \n   amount = offsets->outgoing_args - offsets->saved_regs;\n+  amount -= 4 * thumb1_extra_regs_pushed (offsets);\n   if (amount)\n     {\n       if (amount < 512)\n@@ -19742,7 +19788,11 @@ thumb1_output_function_prologue (FILE *f, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n      register.  */\n   else if ((l_mask & 0xff) != 0\n \t   || (high_regs_pushed == 0 && l_mask))\n-    thumb_pushpop (f, l_mask, 1, &cfa_offset, l_mask);\n+    {\n+      unsigned long mask = l_mask;\n+      mask |= (1 << thumb1_extra_regs_pushed (offsets)) - 1;\n+      thumb_pushpop (f, mask, 1, &cfa_offset, mask);\n+    }\n \n   if (high_regs_pushed)\n     {"}, {"sha": "e3b7527bec8218ddd5d333186280e13139fcfe4f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb751cbd75e9aa0d841d7c38664b0dd413150409/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb751cbd75e9aa0d841d7c38664b0dd413150409/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cb751cbd75e9aa0d841d7c38664b0dd413150409", "patch": "@@ -1,3 +1,8 @@\n+2010-04-27  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\tPR target/40657\n+\t* gcc.target/arm/thumb-stackframe.c: New test.\n+\n 2010-04-27  Shujing Zhao  <pearly.zhao@oracle.com>\n \t\n \t* gcc.dg/pr32207.c: Fix typo in expected warning messages."}, {"sha": "f6c78804e91de38f93077329b3a744c993f82771", "filename": "gcc/testsuite/gcc.target/arm/thumb-stackframe.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb751cbd75e9aa0d841d7c38664b0dd413150409/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb-stackframe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb751cbd75e9aa0d841d7c38664b0dd413150409/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb-stackframe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb-stackframe.c?ref=cb751cbd75e9aa0d841d7c38664b0dd413150409", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mthumb -Os\" }  */\n+/* { dg-require-effective-target arm_thumb1_ok } */\n+\n+extern void bar(int*);\n+int foo()\n+{\n+  int x;\n+  bar(&x);\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-not \"sub\\[\\\\t \\]*sp,\\[\\\\t \\]*sp,\" } } */"}]}