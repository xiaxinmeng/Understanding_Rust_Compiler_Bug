{"sha": "941b08f2734f6a5cbeaeb9e82fe931fd3badc1ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQxYjA4ZjI3MzRmNmE1Y2JlYWViOWU4MmZlOTMxZmQzYmFkYzFhZQ==", "commit": {"author": {"name": "Jesse Rosenstock", "email": "jmr@ugcs.caltech.edu", "date": "2002-09-25T20:10:42Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-09-25T20:10:42Z"}, "message": "re PR libgcj/7766 (ZipInputStream.available returns 0 immediately after construction)\n\n2002-09-25  Jesse Rosenstock  <jmr@ugcs.caltech.edu>\n\n\tFix for PR libgcj/7766:\n\t* java/util/zip/ZipInputStream.java (entryAtEOF): New field.\n\t(getNextEntry): Set it.\n\t(closeEntry): Likewise.\n\t(read): Likewise.\n\t(close): Likewise.\n\t(available): Use it.\n\nFrom-SVN: r57513", "tree": {"sha": "fa6fb4d0e8106019e332a8703558eafd1598cb53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa6fb4d0e8106019e332a8703558eafd1598cb53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/941b08f2734f6a5cbeaeb9e82fe931fd3badc1ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/941b08f2734f6a5cbeaeb9e82fe931fd3badc1ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/941b08f2734f6a5cbeaeb9e82fe931fd3badc1ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/941b08f2734f6a5cbeaeb9e82fe931fd3badc1ae/comments", "author": null, "committer": null, "parents": [{"sha": "dac2c906db41b589d9c9adda05cf4db40973b47f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dac2c906db41b589d9c9adda05cf4db40973b47f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dac2c906db41b589d9c9adda05cf4db40973b47f"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "b1f7f40763c292de26cebdcf592cc06e2e5af211", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941b08f2734f6a5cbeaeb9e82fe931fd3badc1ae/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941b08f2734f6a5cbeaeb9e82fe931fd3badc1ae/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=941b08f2734f6a5cbeaeb9e82fe931fd3badc1ae", "patch": "@@ -1,3 +1,13 @@\n+2002-09-25  Jesse Rosenstock  <jmr@ugcs.caltech.edu>\n+\n+\tFix for PR libgcj/7766:\n+\t* java/util/zip/ZipInputStream.java (entryAtEOF): New field.\n+\t(getNextEntry): Set it.\n+\t(closeEntry): Likewise.\n+\t(read): Likewise.\n+\t(close): Likewise.\n+\t(available): Use it.\n+\n 2002-09-25  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/DatagramSocket.java"}, {"sha": "710ca74c201893d6de5d72dd202a6b3644b4c0eb", "filename": "libjava/java/util/zip/ZipInputStream.java", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941b08f2734f6a5cbeaeb9e82fe931fd3badc1ae/libjava%2Fjava%2Futil%2Fzip%2FZipInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941b08f2734f6a5cbeaeb9e82fe931fd3badc1ae/libjava%2Fjava%2Futil%2Fzip%2FZipInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FZipInputStream.java?ref=941b08f2734f6a5cbeaeb9e82fe931fd3badc1ae", "patch": "@@ -61,6 +61,7 @@ public class ZipInputStream extends InflaterInputStream implements ZipConstants\n   private int method;\n   private int flags;\n   private int avail;\n+  private boolean entryAtEOF;\n \n   /**\n    * Creates a new Zip input stream, reading a zip archive.\n@@ -150,7 +151,8 @@ public ZipEntry getNextEntry() throws IOException\n \treturn null;\n       }\n     if (header != LOCSIG)\n-      throw new ZipException(\"Wrong Local header signature\" + Integer.toHexString(header));\n+      throw new ZipException(\"Wrong Local header signature\"\n+\t\t\t     + Integer.toHexString(header));\n     /* skip version */\n     readLeShort();\n     flags = readLeShort();\n@@ -171,6 +173,7 @@ public ZipEntry getNextEntry() throws IOException\n     String name = new String(buffer);\n     \n     entry = createZipEntry(name);\n+    entryAtEOF = false;\n     entry.setMethod(method);\n     if ((flags & 8) == 0)\n       {\n@@ -252,11 +255,12 @@ public void closeEntry() throws IOException\n     if (method == ZipOutputStream.DEFLATED)\n       inf.reset();\n     entry = null;\n+    entryAtEOF = true;\n   }\n \n   public int available() throws IOException\n   {\n-    return entry != null ? 1 : 0;\n+    return entryAtEOF ? 0 : 1;\n   }\n \n   /**\n@@ -335,6 +339,7 @@ else if (len < 0)\n \t  throw new ZipException(\"CRC mismatch\");\n \tcrc.reset();\n \tentry = null;\n+\tentryAtEOF = true;\n       }\n     return len;\n   }\n@@ -348,6 +353,7 @@ public void close() throws IOException\n     super.close();\n     crc = null;\n     entry = null;\n+    entryAtEOF = true;\n   }\n \n   /**"}]}