{"sha": "0c7d0135663b6f0d94e0ffd931366ba2b32f8b2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM3ZDAxMzU2NjNiNmYwZDk0ZTBmZmQ5MzEzNjZiYTJiMzJmOGIyYw==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-02-10T17:51:58Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-02-10T18:10:57Z"}, "message": "Add support to break from loops with a value\n\nThis adds support to make the break value assignable such that the loop\nnow becomes akin to a BlockExpr\n\nFixes #108 #106", "tree": {"sha": "5955326e3e944c45de7a96eb989adb2cd7c4538a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5955326e3e944c45de7a96eb989adb2cd7c4538a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c7d0135663b6f0d94e0ffd931366ba2b32f8b2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c7d0135663b6f0d94e0ffd931366ba2b32f8b2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c7d0135663b6f0d94e0ffd931366ba2b32f8b2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c7d0135663b6f0d94e0ffd931366ba2b32f8b2c/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d02ab5925b612678beb975d99951b1d2052958a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d02ab5925b612678beb975d99951b1d2052958a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d02ab5925b612678beb975d99951b1d2052958a1"}], "stats": {"total": 123, "additions": 119, "deletions": 4}, "files": [{"sha": "288b91789fd7f5c0335852c24f79fec8521ea6b0", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c7d0135663b6f0d94e0ffd931366ba2b32f8b2c/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c7d0135663b6f0d94e0ffd931366ba2b32f8b2c/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=0c7d0135663b6f0d94e0ffd931366ba2b32f8b2c", "patch": "@@ -208,6 +208,17 @@ class Context\n     return false;\n   }\n \n+  void push_loop_context (Bvariable *var) { loop_value_stack.push_back (var); }\n+\n+  Bvariable *peek_loop_context () { return loop_value_stack.back (); }\n+\n+  Bvariable *pop_loop_context ()\n+  {\n+    auto back = loop_value_stack.back ();\n+    loop_value_stack.pop_back ();\n+    return back;\n+  }\n+\n private:\n   ::Backend *backend;\n   Resolver::Resolver *resolver;\n@@ -223,6 +234,7 @@ class Context\n   std::map<HirId, ::Blabel *> compiled_labels;\n   std::vector< ::std::vector<Bstatement *> > statements;\n   std::vector< ::Bblock *> scope_stack;\n+  std::vector< ::Bvariable *> loop_value_stack;\n \n   // To GCC middle-end\n   std::vector< ::Btype *> type_decls;"}, {"sha": "7b25c5e2630fee6103767741afb857c2c7e553a9", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c7d0135663b6f0d94e0ffd931366ba2b32f8b2c/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c7d0135663b6f0d94e0ffd931366ba2b32f8b2c/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=0c7d0135663b6f0d94e0ffd931366ba2b32f8b2c", "patch": "@@ -586,7 +586,31 @@ class CompileExpr : public HIRCompileBase\n \n   void visit (HIR::LoopExpr &expr)\n   {\n+    TyTy::TyBase *block_tyty = nullptr;\n+    if (!ctx->get_tyctx ()->lookup_type (expr.get_mappings ().get_hirid (),\n+\t\t\t\t\t &block_tyty))\n+      {\n+\trust_error_at (expr.get_locus (), \"failed to lookup type of BlockExpr\");\n+\treturn;\n+      }\n+\n     fncontext fnctx = ctx->peek_fn ();\n+    Bvariable *tmp = NULL;\n+    bool needs_temp = block_tyty->get_kind () != TyTy::TypeKind::UNIT;\n+    if (needs_temp)\n+      {\n+\tBblock *enclosing_scope = ctx->peek_enclosing_scope ();\n+\tBtype *block_type = TyTyResolveCompile::compile (ctx, block_tyty);\n+\n+\tbool is_address_taken = false;\n+\tBstatement *ret_var_stmt = nullptr;\n+\ttmp = ctx->get_backend ()->temporary_variable (\n+\t  fnctx.fndecl, enclosing_scope, block_type, NULL, is_address_taken,\n+\t  expr.get_locus (), &ret_var_stmt);\n+\tctx->add_statement (ret_var_stmt);\n+\tctx->push_loop_context (tmp);\n+      }\n+\n     if (expr.has_loop_label ())\n       {\n \tHIR::LoopLabel &loop_label = expr.get_loop_label ();\n@@ -608,10 +632,32 @@ class CompileExpr : public HIRCompileBase\n     Bstatement *loop_stmt\n       = ctx->get_backend ()->expression_statement (fnctx.fndecl, loop_expr);\n     ctx->add_statement (loop_stmt);\n+\n+    if (tmp != NULL)\n+      {\n+\tctx->pop_loop_context ();\n+\ttranslated\n+\t  = ctx->get_backend ()->var_expression (tmp, expr.get_locus ());\n+      }\n   }\n \n   void visit (HIR::BreakExpr &expr)\n   {\n+    if (expr.has_break_expr ())\n+      {\n+\tfncontext fnctx = ctx->peek_fn ();\n+\tBexpression *compiled_expr\n+\t  = CompileExpr::Compile (expr.get_expr ().get (), ctx);\n+\n+\tBvariable *loop_result_holder = ctx->peek_loop_context ();\n+\tBexpression *result_reference = ctx->get_backend ()->var_expression (\n+\t  loop_result_holder, expr.get_expr ()->get_locus_slow ());\n+\n+\tBstatement *assignment = ctx->get_backend ()->assignment_statement (\n+\t  fnctx.fndecl, result_reference, compiled_expr, expr.get_locus ());\n+\tctx->add_statement (assignment);\n+      }\n+\n     if (expr.has_label ())\n       {\n \tNodeId resolved_node_id = UNKNOWN_NODEID;"}, {"sha": "87aeae627584180caebc1f9a87fff9c4e29ce477", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c7d0135663b6f0d94e0ffd931366ba2b32f8b2c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c7d0135663b6f0d94e0ffd931366ba2b32f8b2c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=0c7d0135663b6f0d94e0ffd931366ba2b32f8b2c", "patch": "@@ -757,7 +757,19 @@ class TypeCheckExpr : public TypeCheckBase\n \n   void visit (HIR::LoopExpr &expr)\n   {\n-    infered = TypeCheckExpr::Resolve (expr.get_loop_block ().get (), true);\n+    context->push_new_loop_context (expr.get_mappings ().get_hirid ());\n+    TypeCheckExpr::Resolve (expr.get_loop_block ().get (), true);\n+    TyTy::TyBase *loop_context_type = context->pop_loop_context ();\n+\n+    bool loop_context_type_infered\n+      = (loop_context_type->get_kind () != TyTy::TypeKind::INFER)\n+\t|| ((loop_context_type->get_kind () == TyTy::TypeKind::INFER)\n+\t    && (((TyTy::InferType *) loop_context_type)->get_infer_kind ()\n+\t\t!= TyTy::InferType::GENERAL));\n+\n+    infered = loop_context_type_infered\n+\t\t? loop_context_type\n+\t\t: new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n   }\n \n   void visit (HIR::BreakExpr &expr)\n@@ -768,9 +780,17 @@ class TypeCheckExpr : public TypeCheckBase\n \treturn;\n       }\n \n-    infered = expr.has_break_expr ()\n-\t\t? TypeCheckExpr::Resolve (expr.get_expr ().get (), false)\n-\t\t: new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n+    if (expr.has_break_expr ())\n+      {\n+\tTyTy::TyBase *break_expr_tyty\n+\t  = TypeCheckExpr::Resolve (expr.get_expr ().get (), false);\n+\n+\tTyTy::TyBase *loop_context = context->peek_loop_context ();\n+\tTyTy::TyBase *combined = loop_context->combine (break_expr_tyty);\n+\tcontext->swap_head_loop_context (combined);\n+      }\n+\n+    infered = new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n   }\n \n private:"}, {"sha": "531d24189f3357a99ef3eb75746bb7435ce57451", "filename": "gcc/rust/typecheck/rust-hir-type-check.h", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c7d0135663b6f0d94e0ffd931366ba2b32f8b2c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c7d0135663b6f0d94e0ffd931366ba2b32f8b2c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h?ref=0c7d0135663b6f0d94e0ffd931366ba2b32f8b2c", "patch": "@@ -56,13 +56,36 @@ class TypeCheckContext\n       }\n   }\n \n+  void push_new_loop_context (HirId id)\n+  {\n+    TyTy::TyBase *infer_var\n+      = new TyTy::InferType (id, TyTy::InferType::InferTypeKind::GENERAL);\n+    loop_type_stack.push_back (infer_var);\n+  }\n+\n+  TyTy::TyBase *peek_loop_context () { return loop_type_stack.back (); }\n+\n+  TyTy::TyBase *pop_loop_context ()\n+  {\n+    auto back = peek_loop_context ();\n+    loop_type_stack.pop_back ();\n+    return back;\n+  }\n+\n+  void swap_head_loop_context (TyTy::TyBase *val)\n+  {\n+    loop_type_stack.pop_back ();\n+    loop_type_stack.push_back (val);\n+  }\n+\n private:\n   TypeCheckContext ();\n \n   std::map<NodeId, HirId> node_id_refs;\n   std::map<HirId, TyTy::TyBase *> resolved;\n   std::vector<std::unique_ptr<TyTy::TyBase> > builtins;\n   std::vector<TyTy::TyBase *> return_type_stack;\n+  std::vector<TyTy::TyBase *> loop_type_stack;\n };\n \n class TypeResolution"}, {"sha": "4004cd30b7b8ea349b145b46c3c55a1ce77b15b0", "filename": "gcc/testsuite/rust.test/compilable/loop5.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c7d0135663b6f0d94e0ffd931366ba2b32f8b2c/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Floop5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c7d0135663b6f0d94e0ffd931366ba2b32f8b2c/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Floop5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Floop5.rs?ref=0c7d0135663b6f0d94e0ffd931366ba2b32f8b2c", "patch": "@@ -0,0 +1,14 @@\n+fn main() {\n+    let mut a = 1;\n+    let mut b = 1;\n+\n+    // first number in Fibonacci sequence over 10:\n+    let _fib = loop {\n+        if b > 10 {\n+            break b;\n+        }\n+        let c = a + b;\n+        a = b;\n+        b = c;\n+    };\n+}"}]}