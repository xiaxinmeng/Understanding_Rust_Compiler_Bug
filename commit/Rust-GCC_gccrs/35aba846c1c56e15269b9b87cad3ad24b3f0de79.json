{"sha": "35aba846c1c56e15269b9b87cad3ad24b3f0de79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVhYmE4NDZjMWM1NmUxNTI2OWI5Yjg3Y2FkM2FkMjRiM2YwZGU3OQ==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2002-06-30T01:44:43Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2002-06-30T01:44:43Z"}, "message": "rs6000.md (ctrdi): Allocate pseudo for FPR constraint in define_expand, not splitter.\n\n        * config/rs6000/rs6000.md (ctrdi): Allocate pseudo for FPR\n        constraint in define_expand, not splitter.\n        Formatting.\n\nFrom-SVN: r55110", "tree": {"sha": "0b6769be9b650a698ddfc7ecdf8fb0e851348471", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b6769be9b650a698ddfc7ecdf8fb0e851348471"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35aba846c1c56e15269b9b87cad3ad24b3f0de79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35aba846c1c56e15269b9b87cad3ad24b3f0de79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35aba846c1c56e15269b9b87cad3ad24b3f0de79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35aba846c1c56e15269b9b87cad3ad24b3f0de79/comments", "author": null, "committer": null, "parents": [{"sha": "b4de2f7db73c5331446fe1af9678a874d4958bae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4de2f7db73c5331446fe1af9678a874d4958bae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4de2f7db73c5331446fe1af9678a874d4958bae"}], "stats": {"total": 112, "additions": 64, "deletions": 48}, "files": [{"sha": "60cd8b809b7d3916ae7675e7c9ff3f6ed838549b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35aba846c1c56e15269b9b87cad3ad24b3f0de79/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35aba846c1c56e15269b9b87cad3ad24b3f0de79/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35aba846c1c56e15269b9b87cad3ad24b3f0de79", "patch": "@@ -1,3 +1,9 @@\n+2002-06-29  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.md (ctrdi): Allocate pseudo for FPR\n+\tconstraint in define_expand, not splitter.\n+\tFormatting.\n+\n 2002-06-29  Aldy Hernandez  <aldyh@redhat.com>\n \n         * config/i386/i386.c (ix86_init_mmx_sse_builtins): Use"}, {"sha": "4520f5877058cc5202c954b18480eecbdbe9bbf7", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 58, "deletions": 48, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35aba846c1c56e15269b9b87cad3ad24b3f0de79/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35aba846c1c56e15269b9b87cad3ad24b3f0de79/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=35aba846c1c56e15269b9b87cad3ad24b3f0de79", "patch": "@@ -13333,9 +13333,11 @@\n \t\t   (plus:DI (match_dup 0)\n \t\t\t    (const_int -1)))\n \t      (clobber (match_scratch:CC 2 \"\"))\n-\t      (clobber (match_scratch:DI 3 \"\"))])]\n+\t      (clobber (match_scratch:DI 3 \"\"))\n+\t      (clobber (match_dup 4))])]\n   \"TARGET_POWERPC64\"\n-  \"\")\n+  \"\n+{ operands[4] = gen_reg_rtx (DImode); }\")\n \n ;; We need to be able to do this for any operand, including MEM, or we\n ;; will cause reload to blow up since we don't allow output reloads on\n@@ -13401,7 +13403,8 @@\n \t(plus:DI (match_dup 1)\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n-   (clobber (match_scratch:DI 4 \"=X,X,r,r\"))]\n+   (clobber (match_scratch:DI 4 \"=X,X,r,r\"))\n+   (clobber (match_operand:DI 5 \"nonimmediate_operand\" \"=X,X,X,o\"))]\n   \"TARGET_POWERPC64\"\n   \"*\n {\n@@ -13425,7 +13428,8 @@\n \t(plus:DI (match_dup 1)\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n-   (clobber (match_scratch:DI 4 \"=X,X,r,r\"))]\n+   (clobber (match_scratch:DI 4 \"=X,X,r,r\"))\n+   (clobber (match_operand:DI 5 \"nonimmediate_operand\" \"=X,X,X,o\"))]\n   \"TARGET_POWERPC64\"\n   \"*\n {\n@@ -13499,7 +13503,8 @@\n \t(plus:DI (match_dup 1)\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n-   (clobber (match_scratch:DI 4 \"=X,X,r,r\"))]\n+   (clobber (match_scratch:DI 4 \"=X,X,r,r\"))\n+   (clobber (match_operand:DI 5 \"nonimmediate_operand\" \"=X,X,X,o\"))]\n   \"TARGET_POWERPC64 && find_reg_note (insn, REG_NONNEG, 0)\"\n   \"*\n {\n@@ -13523,7 +13528,8 @@\n \t(plus:DI (match_dup 1)\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n-   (clobber (match_scratch:DI 4 \"=X,X,r,r\"))]\n+   (clobber (match_scratch:DI 4 \"=X,X,r,r\"))\n+   (clobber (match_operand:DI 5 \"nonimmediate_operand\" \"=X,X,X,o\"))]\n   \"TARGET_POWERPC64 && find_reg_note (insn, REG_NONNEG, 0)\"\n   \"*\n {\n@@ -13597,7 +13603,8 @@\n \t(plus:DI (match_dup 1)\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n-   (clobber (match_scratch:DI 4 \"=X,X,r,r\"))]\n+   (clobber (match_scratch:DI 4 \"=X,X,r,r\"))\n+   (clobber (match_operand:DI 5 \"nonimmediate_operand\" \"=X,X,X,o\"))]\n   \"TARGET_POWERPC64\"\n   \"*\n {\n@@ -13621,7 +13628,8 @@\n \t(plus:DI (match_dup 1)\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n-   (clobber (match_scratch:DI 4 \"=X,X,r,r\"))]\n+   (clobber (match_scratch:DI 4 \"=X,X,r,r\"))\n+   (clobber (match_operand:DI 5 \"nonimmediate_operand\" \"=X,X,X,o\"))]\n   \"TARGET_POWERPC64\"\n   \"*\n {\n@@ -13697,13 +13705,14 @@\n \t(if_then_else (match_operator 2 \"comparison_operator\"\n \t\t\t\t      [(match_operand:DI 1 \"gpc_reg_operand\" \"\")\n \t\t\t\t       (const_int 1)])\n-\t\t      (match_operand 5 \"\" \"\")\n-\t\t      (match_operand 6 \"\" \"\")))\n+\t\t      (match_operand 6 \"\" \"\")\n+\t\t      (match_operand 7 \"\" \"\")))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n \t(plus:DI (match_dup 1)\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"\"))\n-   (clobber (match_scratch:DI 4 \"\"))]\n+   (clobber (match_scratch:DI 4 \"\"))\n+   (clobber (match_operand:DI 5 \"nonimmediate_operand\" \"\"))]\n   \"TARGET_POWERPC64 && reload_completed && INT_REGNO_P (REGNO (operands[0]))\"\n   [(parallel [(set (match_dup 3)\n \t\t   (compare:CC (plus:DI (match_dup 1)\n@@ -13712,24 +13721,25 @@\n \t      (set (match_dup 0)\n \t\t   (plus:DI (match_dup 1)\n \t\t\t    (const_int -1)))])\n-   (set (pc) (if_then_else (match_dup 7)\n-\t\t\t   (match_dup 5)\n-\t\t\t   (match_dup 6)))]\n+   (set (pc) (if_then_else (match_dup 8)\n+\t\t\t   (match_dup 6)\n+\t\t\t   (match_dup 7)))]\n   \"\n-{ operands[7] = gen_rtx (GET_CODE (operands[2]), VOIDmode, operands[3],\n+{ operands[8] = gen_rtx (GET_CODE (operands[2]), VOIDmode, operands[3],\n \t\t\t const0_rtx); }\")\n \n (define_split\n   [(set (pc)\n \t(if_then_else (match_operator 2 \"comparison_operator\"\n \t\t\t\t      [(match_operand:DI 1 \"gpc_reg_operand\" \"\")\n \t\t\t\t       (const_int 1)])\n-\t\t      (match_operand 5 \"\" \"\")\n-\t\t      (match_operand 6 \"\" \"\")))\n+\t\t      (match_operand 6 \"\" \"\")\n+\t\t      (match_operand 7 \"\" \"\")))\n    (set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n \t(plus:DI (match_dup 1) (const_int -1)))\n    (clobber (match_scratch:CC 3 \"\"))\n-   (clobber (match_scratch:DI 4 \"\"))]\n+   (clobber (match_scratch:DI 4 \"\"))\n+   (clobber (match_operand:DI 5 \"nonimmediate_operand\" \"\"))]\n   \"TARGET_POWERPC64 && reload_completed\n    && ! gpc_reg_operand (operands[0], DImode)\"\n   [(parallel [(set (match_dup 3)\n@@ -13741,49 +13751,49 @@\n \t\t\t    (const_int -1)))])\n    (set (match_dup 0)\n \t(match_dup 4))\n-   (set (pc) (if_then_else (match_dup 7)\n-\t\t\t   (match_dup 5)\n-\t\t\t   (match_dup 6)))]\n+   (set (pc) (if_then_else (match_dup 8)\n+\t\t\t   (match_dup 6)\n+\t\t\t   (match_dup 7)))]\n   \"\n-{ operands[7] = gen_rtx (GET_CODE (operands[2]), VOIDmode, operands[3],\n+{ operands[8] = gen_rtx (GET_CODE (operands[2]), VOIDmode, operands[3],\n \t\t\t const0_rtx); }\")\n \n (define_split\n   [(set (pc)\n        (if_then_else (match_operator 2 \"comparison_operator\"\n \t\t\t\t     [(match_operand:DI 1 \"gpc_reg_operand\" \"\")\n \t\t\t\t      (const_int 1)])\n-\t\t     (match_operand 5 \"\" \"\")\n-\t\t     (match_operand 6 \"\" \"\")))\n+\t\t     (match_operand 6 \"\" \"\")\n+\t\t     (match_operand 7 \"\" \"\")))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n        (plus:DI (match_dup 1)\n \t\t(const_int -1)))\n    (clobber (match_scratch:CC 3 \"\"))\n-   (clobber (match_scratch:DI 4 \"\"))]\n+   (clobber (match_scratch:DI 4 \"\"))\n+   (clobber (match_operand:DI 5 \"nonimmediate_operand\" \"\"))]\n   \"TARGET_POWERPC64 && reload_completed && FP_REGNO_P (REGNO (operands[0]))\"\n-  [(set (match_dup 8)\n+  [(set (match_dup 5)\n \t(match_dup 1))\n    (set (match_dup 4)\n-\t(match_dup 8))\n+\t(match_dup 5))\n    (parallel [(set (match_dup 3)\n \t\t   (compare:CC (plus:DI (match_dup 4)\n \t\t\t\t\t(const_int -1))\n \t\t\t       (const_int 0)))\n \t      (set (match_dup 4)\n \t\t   (plus:DI (match_dup 4)\n \t\t\t    (const_int -1)))])\n-   (set (match_dup 8)\n+   (set (match_dup 5)\n \t(match_dup 4))\n    (set (match_dup 0)\n-\t(match_dup 8))\n-   (set (pc) (if_then_else (match_dup 7)\n-\t\t\t   (match_dup 5)\n-\t\t\t   (match_dup 6)))]\n+\t(match_dup 5))\n+   (set (pc) (if_then_else (match_dup 8)\n+\t\t\t   (match_dup 6)\n+\t\t\t   (match_dup 7)))]\n   \"\n {\n-  operands[7] = gen_rtx (GET_CODE (operands[2]), VOIDmode, operands[3],\n+  operands[8] = gen_rtx (GET_CODE (operands[2]), VOIDmode, operands[3],\n \t\t\t const0_rtx);\n-  operands[8] = assign_stack_temp (DImode, GET_MODE_SIZE (DImode), 0);\n }\")\n \n \f\n@@ -13885,17 +13895,17 @@\n ; faster; for instance, on the 601 and 750.\n \n (define_expand \"movsi_to_cr_one\"\n- [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n-       (unspec:CC [(match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t   (match_dup 2)] 20))]\n- \"\"\n- \"operands[2] = GEN_INT (1 << (75 - REGNO (operands[0])));\")\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n+        (unspec:CC [(match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t    (match_dup 2)] 20))]\n+  \"\"\n+  \"operands[2] = GEN_INT (1 << (75 - REGNO (operands[0])));\")\n \n (define_insn \"*movsi_to_cr\"\n- [(match_parallel 0 \"mtcrf_operation\"\n-                  [(set (match_operand:CC 1 \"cc_reg_operand\" \"=y\")\n-       \t\t\t(unspec:CC [(match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t   \t\t    (match_operand 3 \"immediate_operand\" \"n\")]\n+  [(match_parallel 0 \"mtcrf_operation\"\n+\t\t   [(set (match_operand:CC 1 \"cc_reg_operand\" \"=y\")\n+\t\t\t (unspec:CC [(match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t\t\t     (match_operand 3 \"immediate_operand\" \"n\")]\n \t\t\t 20))])]\n  \"\"\n  \"*\n@@ -13925,11 +13935,11 @@\n ; code that actually corresponds to the powerpc load-string.\n \n (define_insn \"*lmw\"\n- [(match_parallel 0 \"lmw_operation\"\n-\t\t  [(set (match_operand:SI 1 \"gpc_reg_operand\" \"=r\")\n-       \t\t\t(match_operand:SI 2 \"memory_operand\" \"m\"))])]\n- \"TARGET_MULTIPLE\"\n- \"{lm|lmw} %1,%2\")\n+  [(match_parallel 0 \"lmw_operation\"\n+\t\t   [(set (match_operand:SI 1 \"gpc_reg_operand\" \"=r\")\n+       \t\t\t (match_operand:SI 2 \"memory_operand\" \"m\"))])]\n+  \"TARGET_MULTIPLE\"\n+  \"{lm|lmw} %1,%2\")\n  \n (define_insn \"*return_internal_si\"\n   [(return)"}]}