{"sha": "650c70a9fe7198394d3bbe4c0b1a7a73dc0bdd4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUwYzcwYTlmZTcxOTgzOTRkM2JiZTRjMGIxYTdhNzNkYzBiZGQ0YQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-07-16T11:26:20Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-07-16T12:29:06Z"}, "message": "Remove more gimple_expr_type uses\n\nThis removes a few more uses.\n\n2021-07-16  Richard Biener   <rguenther@suse.de>\n\n\t* gimple-ssa-store-merging.c (verify_symbolic_number_p): Use\n\tthe type of the LHS.\n\t(find_bswap_or_nop_1): Likewise.\n\t(find_bswap_or_nop): Likewise.\n\t* tree-vectorizer.h (vect_get_smallest_scalar_type): Adjust\n\tprototype.\n\t* tree-vect-data-refs.c (vect_get_smallest_scalar_type):\n\tRemove unused parameters, pass in the scalar type.  Fix\n\tinternal store function handling.\n\t* tree-vect-stmts.c (vect_analyze_stmt): Remove assert.\n\t(vect_get_vector_types_for_stmt): Move down check for\n\texisting vector stmt after we've determined a scalar type.\n\tPass down the used scalar type to vect_get_smallest_scalar_type.\n\t* tree-vect-generic.c (expand_vector_condition): Use\n\tthe type of the LHS.\n\t(expand_vector_scalar_condition): Likewise.\n\t(expand_vector_operations_1): Likewise.\n\t* tree-vect-patterns.c (vect_widened_op_tree): Likewise.\n\t(vect_recog_dot_prod_pattern): Likewise.\n\t(vect_recog_sad_pattern): Likewise.\n\t(vect_recog_widen_op_pattern): Likewise.\n\t(vect_recog_widen_sum_pattern): Likewise.\n\t(vect_recog_mixed_size_cond_pattern): Likewise.", "tree": {"sha": "2309cf7bc3c35d8aed0853a76bfa6fa506edaf3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2309cf7bc3c35d8aed0853a76bfa6fa506edaf3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/650c70a9fe7198394d3bbe4c0b1a7a73dc0bdd4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/650c70a9fe7198394d3bbe4c0b1a7a73dc0bdd4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/650c70a9fe7198394d3bbe4c0b1a7a73dc0bdd4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/650c70a9fe7198394d3bbe4c0b1a7a73dc0bdd4a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8da8ed435e9f01b37bf4ee57fa62509d44121c7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8da8ed435e9f01b37bf4ee57fa62509d44121c7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8da8ed435e9f01b37bf4ee57fa62509d44121c7d"}], "stats": {"total": 84, "additions": 43, "deletions": 41}, "files": [{"sha": "ce54c78bddaa7f9637396a998b794a10fa8af72a", "filename": "gcc/gimple-ssa-store-merging.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650c70a9fe7198394d3bbe4c0b1a7a73dc0bdd4a/gcc%2Fgimple-ssa-store-merging.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650c70a9fe7198394d3bbe4c0b1a7a73dc0bdd4a/gcc%2Fgimple-ssa-store-merging.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-store-merging.c?ref=650c70a9fe7198394d3bbe4c0b1a7a73dc0bdd4a", "patch": "@@ -313,7 +313,7 @@ verify_symbolic_number_p (struct symbolic_number *n, gimple *stmt)\n {\n   tree lhs_type;\n \n-  lhs_type = gimple_expr_type (stmt);\n+  lhs_type = TREE_TYPE (gimple_get_lhs (stmt));\n \n   if (TREE_CODE (lhs_type) != INTEGER_TYPE\n       && TREE_CODE (lhs_type) != ENUMERAL_TYPE)\n@@ -702,7 +702,7 @@ find_bswap_or_nop_1 (gimple *stmt, struct symbolic_number *n, int limit)\n \t    int i, type_size, old_type_size;\n \t    tree type;\n \n-\t    type = gimple_expr_type (stmt);\n+\t    type = TREE_TYPE (gimple_assign_lhs (stmt));\n \t    type_size = TYPE_PRECISION (type);\n \t    if (type_size % BITS_PER_UNIT != 0)\n \t      return NULL;\n@@ -851,7 +851,7 @@ find_bswap_or_nop_finalize (struct symbolic_number *n, uint64_t *cmpxchg,\n gimple *\n find_bswap_or_nop (gimple *stmt, struct symbolic_number *n, bool *bswap)\n {\n-  tree type_size = TYPE_SIZE_UNIT (gimple_expr_type (stmt));\n+  tree type_size = TYPE_SIZE_UNIT (TREE_TYPE (gimple_get_lhs (stmt)));\n   if (!tree_fits_uhwi_p (type_size))\n     return NULL;\n "}, {"sha": "6995efba899d59a587bfedb74de466d3722c214c", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650c70a9fe7198394d3bbe4c0b1a7a73dc0bdd4a/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650c70a9fe7198394d3bbe4c0b1a7a73dc0bdd4a/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=650c70a9fe7198394d3bbe4c0b1a7a73dc0bdd4a", "patch": "@@ -116,11 +116,8 @@ vect_lanes_optab_supported_p (const char *name, convert_optab optab,\n    types.  */\n \n tree\n-vect_get_smallest_scalar_type (stmt_vec_info stmt_info,\n-\t\t\t       HOST_WIDE_INT *lhs_size_unit,\n-\t\t\t       HOST_WIDE_INT *rhs_size_unit)\n+vect_get_smallest_scalar_type (stmt_vec_info stmt_info, tree scalar_type)\n {\n-  tree scalar_type = gimple_expr_type (stmt_info->stmt);\n   HOST_WIDE_INT lhs, rhs;\n \n   /* During the analysis phase, this function is called on arbitrary\n@@ -131,32 +128,41 @@ vect_get_smallest_scalar_type (stmt_vec_info stmt_info,\n   lhs = rhs = TREE_INT_CST_LOW (TYPE_SIZE_UNIT (scalar_type));\n \n   gassign *assign = dyn_cast <gassign *> (stmt_info->stmt);\n-  if (assign\n-      && (gimple_assign_cast_p (assign)\n+  if (assign)\n+    {\n+      scalar_type = TREE_TYPE (gimple_assign_lhs (assign));\n+      if (gimple_assign_cast_p (assign)\n \t  || gimple_assign_rhs_code (assign) == DOT_PROD_EXPR\n \t  || gimple_assign_rhs_code (assign) == WIDEN_SUM_EXPR\n \t  || gimple_assign_rhs_code (assign) == WIDEN_MULT_EXPR\n \t  || gimple_assign_rhs_code (assign) == WIDEN_LSHIFT_EXPR\n \t  || gimple_assign_rhs_code (assign) == WIDEN_PLUS_EXPR\n \t  || gimple_assign_rhs_code (assign) == WIDEN_MINUS_EXPR\n-\t  || gimple_assign_rhs_code (assign) == FLOAT_EXPR))\n-    {\n-      tree rhs_type = TREE_TYPE (gimple_assign_rhs1 (assign));\n+\t  || gimple_assign_rhs_code (assign) == FLOAT_EXPR)\n+\t{\n+\t  tree rhs_type = TREE_TYPE (gimple_assign_rhs1 (assign));\n \n-      rhs = TREE_INT_CST_LOW (TYPE_SIZE_UNIT (rhs_type));\n-      if (rhs < lhs)\n-        scalar_type = rhs_type;\n+\t  rhs = TREE_INT_CST_LOW (TYPE_SIZE_UNIT (rhs_type));\n+\t  if (rhs < lhs)\n+\t    scalar_type = rhs_type;\n+\t}\n     }\n   else if (gcall *call = dyn_cast <gcall *> (stmt_info->stmt))\n     {\n       unsigned int i = 0;\n       if (gimple_call_internal_p (call))\n \t{\n \t  internal_fn ifn = gimple_call_internal_fn (call);\n-\t  if (internal_load_fn_p (ifn) || internal_store_fn_p (ifn))\n-\t    /* gimple_expr_type already picked the type of the loaded\n-\t       or stored data.  */\n+\t  if (internal_load_fn_p (ifn))\n+\t    /* For loads the LHS type does the trick.  */\n \t    i = ~0U;\n+\t  else if (internal_store_fn_p (ifn))\n+\t    {\n+\t      /* For stores use the tyep of the stored value.  */\n+\t      i = internal_fn_stored_value_index (ifn);\n+\t      scalar_type = TREE_TYPE (gimple_call_arg (call, i));\n+\t      i = ~0U;\n+\t    }\n \t  else if (internal_fn_mask_index (ifn) == 0)\n \t    i = 1;\n \t}\n@@ -172,8 +178,6 @@ vect_get_smallest_scalar_type (stmt_vec_info stmt_info,\n \t}\n     }\n \n-  *lhs_size_unit = lhs;\n-  *rhs_size_unit = rhs;\n   return scalar_type;\n }\n "}, {"sha": "a1257db82a600b945ed1483a78b75a667f9c9768", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650c70a9fe7198394d3bbe4c0b1a7a73dc0bdd4a/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650c70a9fe7198394d3bbe4c0b1a7a73dc0bdd4a/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=650c70a9fe7198394d3bbe4c0b1a7a73dc0bdd4a", "patch": "@@ -1017,7 +1017,7 @@ static bool\n expand_vector_condition (gimple_stmt_iterator *gsi, bitmap dce_ssa_names)\n {\n   gassign *stmt = as_a <gassign *> (gsi_stmt (*gsi));\n-  tree type = gimple_expr_type (stmt);\n+  tree type = TREE_TYPE (gimple_assign_lhs (stmt));\n   tree a = gimple_assign_rhs1 (stmt);\n   tree a1 = a;\n   tree a2 = NULL_TREE;\n@@ -1745,11 +1745,11 @@ static void\n expand_vector_scalar_condition (gimple_stmt_iterator *gsi)\n {\n   gassign *stmt = as_a <gassign *> (gsi_stmt (*gsi));\n-  tree type = gimple_expr_type (stmt);\n+  tree lhs = gimple_assign_lhs (stmt);\n+  tree type = TREE_TYPE (lhs);\n   tree compute_type = get_compute_type (COND_EXPR, mov_optab, type);\n   machine_mode compute_mode = TYPE_MODE (compute_type);\n   gcc_assert (compute_mode != BLKmode);\n-  tree lhs = gimple_assign_lhs (stmt);\n   tree rhs2 = gimple_assign_rhs2 (stmt);\n   tree rhs3 = gimple_assign_rhs3 (stmt);\n   tree new_rhs;\n@@ -2129,10 +2129,10 @@ expand_vector_operations_1 (gimple_stmt_iterator *gsi,\n     return;\n \n   rhs1 = gimple_assign_rhs1 (stmt);\n-  type = gimple_expr_type (stmt);\n   if (rhs_class == GIMPLE_BINARY_RHS)\n     rhs2 = gimple_assign_rhs2 (stmt);\n \n+  type = TREE_TYPE (lhs);\n   if (!VECTOR_TYPE_P (type)\n       || !VECTOR_TYPE_P (TREE_TYPE (rhs1)))\n     return;"}, {"sha": "c2494446183052e6e1984aee170f398218ae0364", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650c70a9fe7198394d3bbe4c0b1a7a73dc0bdd4a/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650c70a9fe7198394d3bbe4c0b1a7a73dc0bdd4a/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=650c70a9fe7198394d3bbe4c0b1a7a73dc0bdd4a", "patch": "@@ -564,7 +564,7 @@ vect_widened_op_tree (vec_info *vinfo, stmt_vec_info stmt_info, tree_code code,\n   if (rhs_code != code && rhs_code != widened_code)\n     return 0;\n \n-  tree type = gimple_expr_type (assign);\n+  tree type = TREE_TYPE (gimple_assign_lhs (assign));\n   if (!INTEGRAL_TYPE_P (type))\n     return 0;\n \n@@ -1006,7 +1006,7 @@ vect_recog_dot_prod_pattern (vec_info *vinfo,\n \t\t\t\t       &oprnd0, &oprnd1))\n     return NULL;\n \n-  type = gimple_expr_type (last_stmt);\n+  type = TREE_TYPE (gimple_get_lhs (last_stmt));\n \n   vect_unpromoted_value unprom_mult;\n   oprnd0 = vect_look_through_possible_promotion (vinfo, oprnd0, &unprom_mult);\n@@ -1135,7 +1135,7 @@ vect_recog_sad_pattern (vec_info *vinfo,\n \t\t\t\t       &plus_oprnd0, &plus_oprnd1))\n     return NULL;\n \n-  tree sum_type = gimple_expr_type (last_stmt);\n+  tree sum_type = TREE_TYPE (gimple_get_lhs (last_stmt));\n \n   /* Any non-truncating sequence of conversions is OK here, since\n      with a successful match, the result of the ABS(U) is known to fit\n@@ -1258,7 +1258,7 @@ vect_recog_widen_op_pattern (vec_info *vinfo,\n   /* Pattern detected.  */\n   vect_pattern_detected (name, last_stmt);\n \n-  tree type = gimple_expr_type (last_stmt);\n+  tree type = TREE_TYPE (gimple_get_lhs (last_stmt));\n   tree itype = type;\n   if (TYPE_PRECISION (type) != TYPE_PRECISION (half_type) * 2\n       || TYPE_UNSIGNED (type) != TYPE_UNSIGNED (half_type))\n@@ -1653,7 +1653,7 @@ vect_recog_widen_sum_pattern (vec_info *vinfo,\n \t\t\t\t       &oprnd0, &oprnd1))\n     return NULL;\n \n-  type = gimple_expr_type (last_stmt);\n+  type = TREE_TYPE (gimple_get_lhs (last_stmt));\n \n   /* So far so good.  Since last_stmt was detected as a (summation) reduction,\n      we know that oprnd1 is the reduction variable (defined by a loop-header\n@@ -3716,7 +3716,7 @@ vect_recog_mixed_size_cond_pattern (vec_info *vinfo,\n   if (comp_vectype == NULL_TREE)\n     return NULL;\n \n-  type = gimple_expr_type (last_stmt);\n+  type = TREE_TYPE (gimple_assign_lhs (last_stmt));\n   if (types_compatible_p (type, comp_scalar_type)\n       || ((TREE_CODE (then_clause) != INTEGER_CST\n \t   || TREE_CODE (else_clause) != INTEGER_CST)"}, {"sha": "d71552296bbf6df2c196a9eae1dba7444f652772", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650c70a9fe7198394d3bbe4c0b1a7a73dc0bdd4a/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650c70a9fe7198394d3bbe4c0b1a7a73dc0bdd4a/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=650c70a9fe7198394d3bbe4c0b1a7a73dc0bdd4a", "patch": "@@ -10802,8 +10802,6 @@ vect_analyze_stmt (vec_info *vinfo,\n \n   if (STMT_VINFO_RELEVANT_P (stmt_info))\n     {\n-      tree type = gimple_expr_type (stmt_info->stmt);\n-      gcc_assert (!VECTOR_MODE_P (TYPE_MODE (type)));\n       gcall *call = dyn_cast <gcall *> (stmt_info->stmt);\n       gcc_assert (STMT_VINFO_VECTYPE (stmt_info)\n \t\t  || (call && gimple_call_lhs (call) == NULL_TREE));\n@@ -12076,11 +12074,6 @@ vect_get_vector_types_for_stmt (vec_info *vinfo, stmt_vec_info stmt_info,\n \t\t\t\t     \"not vectorized: irregular stmt.%G\", stmt);\n     }\n \n-  if (VECTOR_MODE_P (TYPE_MODE (gimple_expr_type (stmt))))\n-    return opt_result::failure_at (stmt,\n-\t\t\t\t   \"not vectorized: vector stmt in loop:%G\",\n-\t\t\t\t   stmt);\n-\n   tree vectype;\n   tree scalar_type = NULL_TREE;\n   if (group_size == 0 && STMT_VINFO_VECTYPE (stmt_info))\n@@ -12130,6 +12123,12 @@ vect_get_vector_types_for_stmt (vec_info *vinfo, stmt_vec_info stmt_info,\n       if (dump_enabled_p ())\n \tdump_printf_loc (MSG_NOTE, vect_location, \"vectype: %T\\n\", vectype);\n     }\n+\n+  if (scalar_type && VECTOR_MODE_P (TYPE_MODE (scalar_type)))\n+    return opt_result::failure_at (stmt,\n+\t\t\t\t   \"not vectorized: vector stmt in loop:%G\",\n+\t\t\t\t   stmt);\n+\n   *stmt_vectype_out = vectype;\n \n   /* Don't try to compute scalar types if the stmt produces a boolean\n@@ -12140,8 +12139,8 @@ vect_get_vector_types_for_stmt (vec_info *vinfo, stmt_vec_info stmt_info,\n       /* The number of units is set according to the smallest scalar\n \t type (or the largest vector size, but we only support one\n \t vector size per vectorization).  */\n-      HOST_WIDE_INT dummy;\n-      scalar_type = vect_get_smallest_scalar_type (stmt_info, &dummy, &dummy);\n+      scalar_type = vect_get_smallest_scalar_type (stmt_info,\n+\t\t\t\t\t\t   TREE_TYPE (vectype));\n       if (scalar_type != TREE_TYPE (vectype))\n \t{\n \t  if (dump_enabled_p ())"}, {"sha": "d9f0195e4bfc50ca094a2c96ae1483a747a2dcb1", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650c70a9fe7198394d3bbe4c0b1a7a73dc0bdd4a/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650c70a9fe7198394d3bbe4c0b1a7a73dc0bdd4a/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=650c70a9fe7198394d3bbe4c0b1a7a73dc0bdd4a", "patch": "@@ -1960,8 +1960,7 @@ extern opt_tree vect_get_mask_type_for_stmt (stmt_vec_info, unsigned int = 0);\n extern bool vect_can_force_dr_alignment_p (const_tree, poly_uint64);\n extern enum dr_alignment_support vect_supportable_dr_alignment\n                                            (vec_info *, dr_vec_info *, bool);\n-extern tree vect_get_smallest_scalar_type (stmt_vec_info, HOST_WIDE_INT *,\n-                                           HOST_WIDE_INT *);\n+extern tree vect_get_smallest_scalar_type (stmt_vec_info, tree);\n extern opt_result vect_analyze_data_ref_dependences (loop_vec_info, unsigned int *);\n extern bool vect_slp_analyze_instance_dependence (vec_info *, slp_instance);\n extern opt_result vect_enhance_data_refs_alignment (loop_vec_info);"}]}