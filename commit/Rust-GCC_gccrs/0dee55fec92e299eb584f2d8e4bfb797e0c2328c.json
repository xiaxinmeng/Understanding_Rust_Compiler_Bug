{"sha": "0dee55fec92e299eb584f2d8e4bfb797e0c2328c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRlZTU1ZmVjOTJlMjk5ZWI1ODRmMmQ4ZTRiZmI3OTdlMGMyMzI4Yw==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2017-03-28T08:56:44Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2017-03-28T08:56:44Z"}, "message": "[ARC] Define _REENTRANT when -pthread is passed.\n\nThe compiler is supposed to have the builtin defined _REENTRANT defined\nwhen -pthread is passed, which wasn't done on the ARC architecture.\n\nWhen _REENTRANT is not passed, the C library will not use reentrant\nfunctions, and the latest version of ax_pthread.m4 from the\nautoconf-archive will no longer detect that thread support is\navailable (see https://savannah.gnu.org/patch/?8186).\n\ngcc/\n2017-03-28  Claudiu Zissulescu  <claziss@synopsys.com>\n\t    Thomas Petazzoni <thomas.petazzoni@free-electrons.com>\n\n\t* config/arc/arc.h (CPP_SPEC): Add subtarget_cpp_spec.\n\t(EXTRA_SPECS): Define.\n\t(SUBTARGET_EXTRA_SPECS): Likewise.\n\t(SUBTARGET_CPP_SPEC): Likewise.\n\t* config/arc/elf.h (EXTRA_SPECS): Renamed to\n\tSUBTARGET_EXTRA_SPECS.\n\t* config/arc/linux.h (SUBTARGET_CPP_SPEC): Define.\n\nCo-Authored-By: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>\n\nFrom-SVN: r246524", "tree": {"sha": "338a990483999f993f6b1d918dc249eae9fc9a0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/338a990483999f993f6b1d918dc249eae9fc9a0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0dee55fec92e299eb584f2d8e4bfb797e0c2328c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dee55fec92e299eb584f2d8e4bfb797e0c2328c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dee55fec92e299eb584f2d8e4bfb797e0c2328c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dee55fec92e299eb584f2d8e4bfb797e0c2328c/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d1ab0a32adf366f2254e05235efbf88b20a0e3a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1ab0a32adf366f2254e05235efbf88b20a0e3a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1ab0a32adf366f2254e05235efbf88b20a0e3a1"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "4864d75bb6672a3d880278e785ae885a219c9b5c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dee55fec92e299eb584f2d8e4bfb797e0c2328c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dee55fec92e299eb584f2d8e4bfb797e0c2328c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0dee55fec92e299eb584f2d8e4bfb797e0c2328c", "patch": "@@ -1,3 +1,14 @@\n+2017-03-28  Claudiu Zissulescu  <claziss@synopsys.com>\n+\t    Thomas Petazzoni  <thomas.petazzoni@free-electrons.com>\n+\n+\t* config/arc/arc.h (CPP_SPEC): Add subtarget_cpp_spec.\n+\t(EXTRA_SPECS): Define.\n+\t(SUBTARGET_EXTRA_SPECS): Likewise.\n+\t(SUBTARGET_CPP_SPEC): Likewise.\n+\t* config/arc/elf.h (EXTRA_SPECS): Renamed to\n+\tSUBTARGET_EXTRA_SPECS.\n+\t* config/arc/linux.h (SUBTARGET_CPP_SPEC): Define.\n+\n 2017-03-28  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/simdext.md (vst64_insn): Update pattern."}, {"sha": "08644eb7cdd05eb3890cbb057cc54690140631e4", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dee55fec92e299eb584f2d8e4bfb797e0c2328c/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dee55fec92e299eb584f2d8e4bfb797e0c2328c/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=0dee55fec92e299eb584f2d8e4bfb797e0c2328c", "patch": "@@ -61,7 +61,8 @@ along with GCC; see the file COPYING3.  If not see\n %{mmac-d16:-D__Xxmac_d16} %{mmac-24:-D__Xxmac_24} \\\n %{mdsp-packa:-D__Xdsp_packa} %{mcrc:-D__Xcrc} %{mdvbf:-D__Xdvbf} \\\n %{mtelephony:-D__Xtelephony} %{mxy:-D__Xxy} %{mmul64: -D__Xmult32} \\\n-%{mlock:-D__Xlock} %{mswape:-D__Xswape} %{mrtsc:-D__Xrtsc}\"\n+%{mlock:-D__Xlock} %{mswape:-D__Xswape} %{mrtsc:-D__Xrtsc} \\\n+%(subtarget_cpp_spec)\"\n \n #undef CC1_SPEC\n #define CC1_SPEC \"\\\n@@ -73,6 +74,27 @@ extern const char *arc_cpu_to_as (int argc, const char **argv);\n #define EXTRA_SPEC_FUNCTIONS\t\t\t\\\n   { \"cpu_to_as\", arc_cpu_to_as },\n \n+/* This macro defines names of additional specifications to put in the specs\n+   that can be used in various specifications like CC1_SPEC.  Its definition\n+   is an initializer with a subgrouping for each command option.\n+\n+   Each subgrouping contains a string constant, that defines the\n+   specification name, and a string constant that used by the GCC driver\n+   program.\n+\n+   Do not define this macro if it does not need to do anything.  */\n+#define EXTRA_SPECS\t\t\t\t      \\\n+  { \"subtarget_cpp_spec\",\tSUBTARGET_CPP_SPEC }, \\\n+  SUBTARGET_EXTRA_SPECS\n+\n+#ifndef SUBTARGET_EXTRA_SPECS\n+#define SUBTARGET_EXTRA_SPECS\n+#endif\n+\n+#ifndef SUBTARGET_CPP_SPEC\n+#define SUBTARGET_CPP_SPEC \"\"\n+#endif\n+\n #undef ASM_SPEC\n #define ASM_SPEC  \"%{mbig-endian|EB:-EB} %{EL} \"\t\t\t\\\n   \"%:cpu_to_as(%{mcpu=*:%*}) %{mspfp*} %{mdpfp*} %{mfpu=fpuda*:-mfpuda}\""}, {"sha": "c5794f8f785b7e57285f18c4bc17e21fb0d7f370", "filename": "gcc/config/arc/elf.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dee55fec92e299eb584f2d8e4bfb797e0c2328c/gcc%2Fconfig%2Farc%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dee55fec92e299eb584f2d8e4bfb797e0c2328c/gcc%2Fconfig%2Farc%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Felf.h?ref=0dee55fec92e299eb584f2d8e4bfb797e0c2328c", "patch": "@@ -26,7 +26,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #define ARC_TLS_EXTRA_START_SPEC \"crttls.o%s\"\n \n-#define EXTRA_SPECS \\\n+#undef SUBTARGET_EXTRA_SPECS\n+#define SUBTARGET_EXTRA_SPECS \\\n   { \"arc_tls_extra_start_spec\", ARC_TLS_EXTRA_START_SPEC }, \\\n \n #undef STARTFILE_SPEC"}, {"sha": "83e5a1d61f25d5e3a45bfe6290c2629a44c4a344", "filename": "gcc/config/arc/linux.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dee55fec92e299eb584f2d8e4bfb797e0c2328c/gcc%2Fconfig%2Farc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dee55fec92e299eb584f2d8e4bfb797e0c2328c/gcc%2Fconfig%2Farc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Flinux.h?ref=0dee55fec92e299eb584f2d8e4bfb797e0c2328c", "patch": "@@ -78,3 +78,8 @@ along with GCC; see the file COPYING3.  If not see\n /* Linux toolchains use r25 as the thread pointer register.  */\n #undef TARGET_ARC_TP_REGNO_DEFAULT\n #define TARGET_ARC_TP_REGNO_DEFAULT 25\n+\n+#undef SUBTARGET_CPP_SPEC\n+#define SUBTARGET_CPP_SPEC \"\\\n+   %{pthread:-D_REENTRANT} \\\n+\""}]}