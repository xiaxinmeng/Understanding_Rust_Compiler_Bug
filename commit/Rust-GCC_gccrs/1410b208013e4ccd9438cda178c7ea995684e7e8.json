{"sha": "1410b208013e4ccd9438cda178c7ea995684e7e8", "node_id": "C_kwDOANBUbNoAKDE0MTBiMjA4MDEzZTRjY2Q5NDM4Y2RhMTc4YzdlYTk5NTY4NGU3ZTg", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-11-01T20:20:23Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-11-03T14:13:32Z"}, "message": "Testcase adjustments for pass vrp1.\n\nUnify testcases for the vrp1 pass so they will work with the output from either\nVRP or ranger.\n\n\tgcc/testsuite/\n\t* gcc.dg/tree-ssa/pr23744.c: Tweak output checks.\n\t* gcc.dg/tree-ssa/vrp07.c: Ditto.\n\t* gcc.dg/tree-ssa/vrp08.c: Ditto.\n\t* gcc.dg/tree-ssa/vrp09.c: Ditto.\n\t* gcc.dg/tree-ssa/vrp20.c: Ditto.\n\t* gcc.dg/tree-ssa/vrp92.c: Ditto.\n\t* jit.dg/test-sum-of-squares.c: Ditto.", "tree": {"sha": "603f93985b17ffec84e3f90f91319c102d821f08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/603f93985b17ffec84e3f90f91319c102d821f08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1410b208013e4ccd9438cda178c7ea995684e7e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1410b208013e4ccd9438cda178c7ea995684e7e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1410b208013e4ccd9438cda178c7ea995684e7e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1410b208013e4ccd9438cda178c7ea995684e7e8/comments", "author": null, "committer": null, "parents": [{"sha": "6d936684fcf9bbb55837e3a87ae2221d5ec9b5b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d936684fcf9bbb55837e3a87ae2221d5ec9b5b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d936684fcf9bbb55837e3a87ae2221d5ec9b5b7"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "f70f2546bf1b3e06eb0911b12e46dda8deb721cd", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr23744.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1410b208013e4ccd9438cda178c7ea995684e7e8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23744.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1410b208013e4ccd9438cda178c7ea995684e7e8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23744.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23744.c?ref=1410b208013e4ccd9438cda178c7ea995684e7e8", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-ccp -fdisable-tree-evrp -fdump-tree-vrp1-details\" } */\n+/* { dg-options \"-O2 -fno-tree-ccp -fdisable-tree-evrp -fdump-tree-vrp1\" } */\n \n void h (void);\n \n@@ -17,4 +17,5 @@ int g (int i, int j)\n     return 1;\n }\n \n-/* { dg-final { scan-tree-dump-times \"gimple_simplified\" 1 \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"return 0\" 1 \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-not \"return 1\" \"vrp1\" } } */"}, {"sha": "ec5f6cce46fe995719a2670cf97b3527cc8b1fc1", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp07.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1410b208013e4ccd9438cda178c7ea995684e7e8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp07.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1410b208013e4ccd9438cda178c7ea995684e7e8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp07.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp07.c?ref=1410b208013e4ccd9438cda178c7ea995684e7e8", "patch": "@@ -34,6 +34,3 @@ foo (int i, int *p)\n /* { dg-final { scan-tree-dump-times \"Folding predicate p_.*to 1\" 1 \"vrp1\" } } */\n /* { dg-final { scan-tree-dump-times \"Folding predicate p_.*to 0\" 1 \"vrp1\" { target { ! keeps_null_pointer_checks } } } } */\n /* { dg-final { scan-tree-dump-times \"Folding predicate p_.*to 0\" 0 \"vrp1\" { target {   keeps_null_pointer_checks } } } } */\n-\n-/* { dg-final { scan-tree-dump-times \"PREDICATE: p_\\[0-9\\]\" 2 \"vrp1\" { target { ! keeps_null_pointer_checks } } } } */\n-/* { dg-final { scan-tree-dump-times \"PREDICATE: p_\\[0-9\\]\" 1 \"vrp1\" { target {   keeps_null_pointer_checks } } } } */"}, {"sha": "c9d9023671559d00cf1d54591a4d3545cee65af8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp08.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1410b208013e4ccd9438cda178c7ea995684e7e8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp08.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1410b208013e4ccd9438cda178c7ea995684e7e8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp08.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp08.c?ref=1410b208013e4ccd9438cda178c7ea995684e7e8", "patch": "@@ -20,5 +20,4 @@ foo (int a, int *p)\n }\n /* Target disabling -fdelete-null-pointer-checks should not fold checks */\n /* { dg-final { scan-tree-dump-times \"Folding predicate p_.*to 1\" 1 \"vrp1\" { target { ! keeps_null_pointer_checks } } } } */\n-/* { dg-final { scan-tree-dump-times \"PREDICATE: p_.* ne_expr 0\" 1 \"vrp1\" { target { ! keeps_null_pointer_checks } } } } */\n /* { dg-final { scan-tree-dump-times \"Folding predicate p_.*to 1\" 0 \"vrp1\" { target {   keeps_null_pointer_checks } } } } */"}, {"sha": "354169692d66be185a02e37e578d9c18deb017d0", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp09.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1410b208013e4ccd9438cda178c7ea995684e7e8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp09.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1410b208013e4ccd9438cda178c7ea995684e7e8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp09.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp09.c?ref=1410b208013e4ccd9438cda178c7ea995684e7e8", "patch": "@@ -27,4 +27,5 @@ foo (int *p)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"Folding predicate p_.. != 0B to 1\" 2 \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Folding predicate p_\" 2 \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"!= 0B to 1\" 2 \"vrp1\" } } */"}, {"sha": "e5822992fe485a55b0196a8c5616f65d6e86f6df", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp20.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1410b208013e4ccd9438cda178c7ea995684e7e8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1410b208013e4ccd9438cda178c7ea995684e7e8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp20.c?ref=1410b208013e4ccd9438cda178c7ea995684e7e8", "patch": "@@ -23,5 +23,5 @@ int g (int b) {\n \treturn 1;\n }\n \n-/* { dg-final { scan-tree-dump \"Folding predicate a_. == 0 to 0\" \"vrp1\" } } */\n-/* { dg-final { scan-tree-dump \"Folding predicate b_. != 0 to 1\" \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump \"Folding predicate a_\\.\\* == 0 to 0\" \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump \"Folding predicate b_\\.\\* != 0 to 1\" \"vrp1\" } } */"}, {"sha": "9e53547dadc3c62d527601221d46138caf381b07", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp92.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1410b208013e4ccd9438cda178c7ea995684e7e8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp92.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1410b208013e4ccd9438cda178c7ea995684e7e8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp92.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp92.c?ref=1410b208013e4ccd9438cda178c7ea995684e7e8", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdisable-tree-evrp -fno-tree-fre -fdump-tree-vrp1-details -fdisable-tree-ethread\" } */\n+/* { dg-options \"-O2 -fdisable-tree-evrp -fno-tree-fre -fdump-tree-vrp1 -fdisable-tree-ethread\" } */\n \n void bar (void);\n int foo (int i, int j)\n@@ -18,5 +18,6 @@ int foo (int i, int j)\n   return j;\n }\n \n-/* { dg-final { scan-tree-dump \"res_.: int \\\\\\[1, 1\\\\\\]\" \"vrp1\" } } */\n-/* { dg-final { scan-tree-dump-not \"Threaded\" \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-not \"PHI\" \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-not \"goto\" \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-not \"if\" \"vrp1\" } } */"}, {"sha": "cfcf5b2aac2c53a82865929128edfcd1c89898fd", "filename": "gcc/testsuite/jit.dg/test-sum-of-squares.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1410b208013e4ccd9438cda178c7ea995684e7e8/gcc%2Ftestsuite%2Fjit.dg%2Ftest-sum-of-squares.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1410b208013e4ccd9438cda178c7ea995684e7e8/gcc%2Ftestsuite%2Fjit.dg%2Ftest-sum-of-squares.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-sum-of-squares.c?ref=1410b208013e4ccd9438cda178c7ea995684e7e8", "patch": "@@ -133,10 +133,10 @@ verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n      An example of using gcc_jit_context_enable_dump to verify a property\n      of the compile.\n \n-     In this case, verify that vrp is able to deduce the\n-     bounds of the iteration variable. Specifically, verify that some\n-     variable is known to be in the range negative infinity to some\n-     expression based on param \"n\" (actually n-1).  */\n-  CHECK_STRING_CONTAINS (dump_vrp1, \"[-INF, n_\");\n+     In particular, this example verifies that we can read the dump from a\n+     pass with multiple instances.  Given that the format of the VRP dump\n+     is subject to change, merely verify that it contains the function\n+     name.  */\n+  CHECK_STRING_CONTAINS (dump_vrp1, \";; Function loop_test\");\n   free (dump_vrp1);\n }"}]}