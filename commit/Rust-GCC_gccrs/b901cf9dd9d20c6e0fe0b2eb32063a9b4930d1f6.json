{"sha": "b901cf9dd9d20c6e0fe0b2eb32063a9b4930d1f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkwMWNmOWRkOWQyMGM2ZTBmZTBiMmViMzIwNjNhOWI0OTMwZDFmNg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-14T23:42:53Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-14T23:42:53Z"}, "message": "compiler: avoid crash on erroneous type\n    \n    If there is an error constructing the backend type, the GCC backend\n    will report that the size is 1.  That will then cause construction of\n    the ptrmask to crash.  Avoid that case by just generating an empty\n    ptrmask.\n    \n    Noticed while compiling a broken package.  The policy I've been\n    following is to not commit a test case for a compiler crash on invalid\n    code, so no test case.\n    \n    Reviewed-on: https://go-review.googlesource.com/45775\n\nFrom-SVN: r249208", "tree": {"sha": "b5046d7e4b60ff1ae9c5a213b054d41dc1cd4f70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5046d7e4b60ff1ae9c5a213b054d41dc1cd4f70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b901cf9dd9d20c6e0fe0b2eb32063a9b4930d1f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b901cf9dd9d20c6e0fe0b2eb32063a9b4930d1f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b901cf9dd9d20c6e0fe0b2eb32063a9b4930d1f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b901cf9dd9d20c6e0fe0b2eb32063a9b4930d1f6/comments", "author": null, "committer": null, "parents": [{"sha": "3466430f382b6adc2363721056b9abde3acd790a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3466430f382b6adc2363721056b9abde3acd790a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3466430f382b6adc2363721056b9abde3acd790a"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "0eeac9b25d43ab0d9685c6a74f7089150832a9cf", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b901cf9dd9d20c6e0fe0b2eb32063a9b4930d1f6/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b901cf9dd9d20c6e0fe0b2eb32063a9b4930d1f6/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=b901cf9dd9d20c6e0fe0b2eb32063a9b4930d1f6", "patch": "@@ -1,4 +1,4 @@\n-372e75503c1dc9a38d9978aa6b67631283d5d6dd\n+6449e2832eef94eacf89c88fa16bede637f729ba\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "912a23e191857eb6d540abf698d81f6c73915bfa", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b901cf9dd9d20c6e0fe0b2eb32063a9b4930d1f6/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b901cf9dd9d20c6e0fe0b2eb32063a9b4930d1f6/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=b901cf9dd9d20c6e0fe0b2eb32063a9b4930d1f6", "patch": "@@ -2570,16 +2570,16 @@ Type::make_gc_symbol_var(Gogo* gogo)\n bool\n Type::needs_gcprog(Gogo* gogo, int64_t* ptrsize, int64_t* ptrdata)\n {\n+  Type* voidptr = Type::make_pointer_type(Type::make_void_type());\n+  if (!voidptr->backend_type_size(gogo, ptrsize))\n+    go_unreachable();\n+\n   if (!this->backend_type_ptrdata(gogo, ptrdata))\n     {\n       go_assert(saw_errors());\n       return false;\n     }\n \n-  Type* voidptr = Type::make_pointer_type(Type::make_void_type());\n-  if (!voidptr->backend_type_size(gogo, ptrsize))\n-    go_unreachable();\n-\n   return *ptrdata / *ptrsize > max_ptrmask_bytes;\n }\n \n@@ -2795,7 +2795,13 @@ Bvariable*\n Type::gc_ptrmask_var(Gogo* gogo, int64_t ptrsize, int64_t ptrdata)\n {\n   Ptrmask ptrmask(ptrdata / ptrsize);\n-  ptrmask.set_from(gogo, this, ptrsize, 0);\n+  if (ptrdata >= ptrsize)\n+    ptrmask.set_from(gogo, this, ptrsize, 0);\n+  else\n+    {\n+      // This can happen in error cases.  Just build an empty gcbits.\n+      go_assert(saw_errors());\n+    }\n   std::string sym_name = \"runtime.gcbits.\" + ptrmask.symname();\n   Bvariable* bvnull = NULL;\n   std::pair<GC_gcbits_vars::iterator, bool> ins ="}]}