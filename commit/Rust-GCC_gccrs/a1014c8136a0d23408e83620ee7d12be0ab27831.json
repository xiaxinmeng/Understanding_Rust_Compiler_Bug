{"sha": "a1014c8136a0d23408e83620ee7d12be0ab27831", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTEwMTRjODEzNmEwZDIzNDA4ZTgzNjIwZWU3ZDEyYmUwYWIyNzgzMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-05-21T23:37:00Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-08T14:55:54Z"}, "message": "[Ada] Fix internal error on string type comparision with predicate\n\ngcc/ada/\n\n\t* freeze.adb (Has_Decl_In_List): New predicate to check that an\n\tentity is declared in a list of nodes.\n\t(Freeze_Expression): Use it to deal with Expression_With_Actions,\n\tshort-circuit expression, if- and case-expression and ensure that\n\tthe freeze node is put onto their Actions list if the entity is\n\tdeclared locally.", "tree": {"sha": "03aeddfe37e0e5cf377a1f68327953a2f96b4292", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03aeddfe37e0e5cf377a1f68327953a2f96b4292"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1014c8136a0d23408e83620ee7d12be0ab27831", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1014c8136a0d23408e83620ee7d12be0ab27831", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1014c8136a0d23408e83620ee7d12be0ab27831", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1014c8136a0d23408e83620ee7d12be0ab27831/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1567ebf93abda477cf1d7e1f88d89cd0b875a1b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1567ebf93abda477cf1d7e1f88d89cd0b875a1b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1567ebf93abda477cf1d7e1f88d89cd0b875a1b6"}], "stats": {"total": 87, "additions": 71, "deletions": 16}, "files": [{"sha": "4b58b756b1caff8c96e70725de3d07668c203682", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 71, "deletions": 16, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1014c8136a0d23408e83620ee7d12be0ab27831/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1014c8136a0d23408e83620ee7d12be0ab27831/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=a1014c8136a0d23408e83620ee7d12be0ab27831", "patch": "@@ -7060,6 +7060,13 @@ package body Freeze is\n       --  proc, a stream subprogram, or a renaming as body. If so, this is not\n       --  a freezing context and the entity will be frozen at a later point.\n \n+      function Has_Decl_In_List\n+        (E : Entity_Id;\n+         N : Node_Id;\n+         L : List_Id) return Boolean;\n+      --  Determines whether an entity E referenced in node N is declared in\n+      --  the list L.\n+\n       -----------------------------------------\n       -- Find_Aggregate_Component_Desig_Type --\n       -----------------------------------------\n@@ -7141,6 +7148,30 @@ package body Freeze is\n          end if;\n       end In_Expanded_Body;\n \n+      ----------------------\n+      -- Has_Decl_In_List --\n+      ----------------------\n+\n+      function Has_Decl_In_List\n+        (E : Entity_Id;\n+         N : Node_Id;\n+         L : List_Id) return Boolean\n+      is\n+         Decl_Node : Node_Id;\n+\n+      begin\n+         --  If E is an itype, pretend that it is declared in N\n+\n+         if Is_Itype (E) then\n+            Decl_Node := N;\n+         else\n+            Decl_Node := Declaration_Node (E);\n+         end if;\n+\n+         return Is_List_Member (Decl_Node)\n+           and then List_Containing (Decl_Node) = L;\n+      end Has_Decl_In_List;\n+\n       --  Local variables\n \n       In_Spec_Exp : constant Boolean := In_Spec_Expression;\n@@ -7592,7 +7623,6 @@ package body Freeze is\n \n                when N_Abortable_Part\n                   | N_Accept_Alternative\n-                  | N_And_Then\n                   | N_Case_Statement_Alternative\n                   | N_Compilation_Unit_Aux\n                   | N_Conditional_Entry_Call\n@@ -7603,35 +7633,60 @@ package body Freeze is\n                   | N_Extended_Return_Statement\n                   | N_Freeze_Entity\n                   | N_If_Statement\n-                  | N_Or_Else\n                   | N_Selective_Accept\n                   | N_Triggering_Alternative\n                =>\n                   exit when Is_List_Member (P);\n \n-               --  Freeze nodes produced by an expression coming from the\n-               --  Actions list of a N_Expression_With_Actions node must remain\n-               --  within the Actions list. Inserting the freeze nodes further\n-               --  up the tree may lead to use before declaration issues in the\n-               --  case of array types.\n+               --  The freeze nodes produced by an expression coming from the\n+               --  Actions list of an N_Expression_With_Actions, short-circuit\n+               --  expression or N_Case_Expression_Alternative node must remain\n+               --  within the Actions list if they freeze an entity declared in\n+               --  this list, as inserting the freeze nodes further up the tree\n+               --  may lead to use before declaration issues for the entity.\n+\n+               when N_Case_Expression_Alternative\n+                  | N_Expression_With_Actions\n+                  | N_Short_Circuit\n+               =>\n+                  exit when (Present (Nam)\n+                              and then\n+                             Has_Decl_In_List (Nam, P, Actions (Parent_P)))\n+                    or else (Present (Typ)\n+                              and then\n+                             Has_Decl_In_List (Typ, P, Actions (Parent_P)));\n \n-               when N_Expression_With_Actions =>\n-                  exit when Is_List_Member (P)\n-                    and then List_Containing (P) = Actions (Parent_P);\n+               --  Likewise for an N_If_Expression and its two Actions list\n+\n+               when N_If_Expression =>\n+                  declare\n+                     L1 : constant List_Id := Then_Actions (Parent_P);\n+                     L2 : constant List_Id := Else_Actions (Parent_P);\n+\n+                  begin\n+                     exit when (Present (Nam)\n+                                 and then\n+                                Has_Decl_In_List (Nam, P, L1))\n+                       or else (Present (Typ)\n+                                 and then\n+                                Has_Decl_In_List (Typ, P, L1))\n+                       or else (Present (Nam)\n+                                 and then\n+                                Has_Decl_In_List (Nam, P, L2))\n+                       or else (Present (Typ)\n+                                 and then\n+                                Has_Decl_In_List (Typ, P, L2));\n+                  end;\n \n                --  N_Loop_Statement is a special case: a type that appears in\n                --  the source can never be frozen in a loop (this occurs only\n                --  because of a loop expanded by the expander), so we keep on\n                --  going. Otherwise we terminate the search. Same is true of\n                --  any entity which comes from source (if it has a predefined\n                --  type, this type does not appear to come from source, but the\n-               --  entity should not be frozen here). The reasoning can also be\n-               --  applied to if-expressions and case-expressions.\n+               --  entity should not be frozen here).\n \n-               when N_Loop_Statement\n-                  | N_If_Expression\n-                  | N_Case_Expression\n-               =>\n+               when N_Loop_Statement =>\n                   exit when not Comes_From_Source (Etype (N))\n                     and then (No (Nam) or else not Comes_From_Source (Nam));\n "}]}