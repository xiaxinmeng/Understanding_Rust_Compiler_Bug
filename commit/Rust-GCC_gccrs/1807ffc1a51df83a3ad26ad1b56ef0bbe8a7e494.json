{"sha": "1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTgwN2ZmYzFhNTFkZjgzYTNhZDI2YWQxYjU2ZWYwYmJlOGE3ZTQ5NA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2015-09-03T16:23:11Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2015-09-03T16:23:11Z"}, "message": "re PR c/66516 (missing diagnostic on taking the address of a builtin function)\n\ngcc/ChangeLog\n2015-09-03  Martin Sebor  <msebor@redhat.com>\n\n\tPR c/66516\n\t* doc/extend.texi (Other Builtins): Document when the address\n\tof a built-in function can be taken.\n\ngcc/c-family/ChangeLog\n2015-09-03  Martin Sebor  <msebor@redhat.com>\n\n\tPR c/66516\n\t* c-common.h (c_decl_implicit, reject_gcc_builtin): Declare new\n\tfunctions.\n\t* c-common.c (reject_gcc_builtin): Define.\n\ngcc/c/ChangeLog\n2015-09-03  Martin Sebor  <msebor@redhat.com>\n\n\tPR c/66516\n\t* c/c-typeck.c (convert_arguments, parser_build_unary_op)\n\t(build_conditional_expr, c_cast_expr, convert_for_assignment)\n\t(build_binary_op, _objc_common_truthvalue_conversion): Call\n\treject_gcc_builtin.\n\t(c_decl_implicit): Define.\n\ngcc/cp/ChangeLog\n2015-09-03  Martin Sebor  <msebor@redhat.com>\n\n\tPR c/66516\n\t* cp/cp-tree.h (mark_rvalue_use, decay_conversion): Add new\n\targument(s).\n\t* cp/expr.c (mark_rvalue_use): Use new argument.\n\t* cp/call.c (build_addr_func): Call decay_conversion with new\n\targument.\n\t* cp/pt.c (convert_template_argument): Call reject_gcc_builtin.\n\t* cp/typeck.c (decay_conversion): Use new argument.\n\t(c_decl_implicit): Define.\n\ngcc/testsuite/ChangeLog\n2015-09-03  Martin Sebor  <msebor@redhat.com>\n\n\tPR c/66516\n\t* g++.dg/addr_builtin-1.C: New test.\n\t* gcc.dg/addr_builtin-1.c: New test.\n\nFrom-SVN: r227458", "tree": {"sha": "b48648309af44524f8927ac7e65ea6eb947a7d9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b48648309af44524f8927ac7e65ea6eb947a7d9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "97875f4a942078f65739718c129b0b6289c4b43b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97875f4a942078f65739718c129b0b6289c4b43b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97875f4a942078f65739718c129b0b6289c4b43b"}], "stats": {"total": 205, "additions": 187, "deletions": 18}, "files": [{"sha": "42010ed418ef1ba51a637cffd617b33373dba386", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494", "patch": "@@ -1,3 +1,9 @@\n+2015-09-03  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/66516\n+\t* doc/extend.texi (Other Builtins): Document when the address\n+\tof a built-in function can be taken.\n+\n 2015-09-03  Richard Biener  <rguenther@suse.de>\n \n \t* dwarf2out.c (flush_limbo_die_list): Split out from ..."}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "gcc/builtins.c.orig", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494/gcc%2Fbuiltins.c.orig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494/gcc%2Fbuiltins.c.orig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c.orig?ref=1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494"}, {"sha": "964f6dda7623e0b991bf7c9ce415afd5cb0f4da0", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494", "patch": "@@ -1,3 +1,10 @@\n+2015-09-03  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/66516\n+\t* c-common.h (c_decl_implicit, reject_gcc_builtin): Declare new\n+\tfunctions.\n+\t* c-common.c (reject_gcc_builtin): Define.\n+\n 2015-09-02  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n \n \tPR middle-end/60586"}, {"sha": "9758b9e07e819588675a935e99ca45dd5b9827f7", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494", "patch": "@@ -12882,4 +12882,41 @@ pointer_to_zero_sized_aggr_p (tree t)\n   return (TYPE_SIZE (t) && integer_zerop (TYPE_SIZE (t)));\n }\n \n+/* For an EXPR of a FUNCTION_TYPE that references a GCC built-in function\n+   with no library fallback or for an ADDR_EXPR whose operand is such type\n+   issues an error pointing to the location LOC.\n+   Returns true when the expression has been diagnosed and false\n+   otherwise.  */\n+bool\n+reject_gcc_builtin (const_tree expr, location_t loc /* = UNKNOWN_LOCATION */)\n+{\n+  if (TREE_CODE (expr) == ADDR_EXPR)\n+    expr = TREE_OPERAND (expr, 0);\n+\n+  if (TREE_TYPE (expr)\n+      && TREE_CODE (TREE_TYPE (expr)) == FUNCTION_TYPE\n+      && DECL_P (expr)\n+      /* The intersection of DECL_BUILT_IN and DECL_IS_BUILTIN avoids\n+\t false positives for user-declared built-ins such as abs or\n+\t strlen, and for C++ operators new and delete.\n+\t The c_decl_implicit() test avoids false positives for implicitly\n+\t declared built-ins with library fallbacks (such as abs).  */\n+      && DECL_BUILT_IN (expr)\n+      && DECL_IS_BUILTIN (expr)\n+      && !c_decl_implicit (expr)\n+      && !DECL_ASSEMBLER_NAME_SET_P (expr))\n+    {\n+      if (loc == UNKNOWN_LOCATION)\n+\tloc = EXPR_LOC_OR_LOC (expr, input_location);\n+\n+      /* Reject arguments that are built-in functions with\n+\t no library fallback.  */\n+      error_at (loc, \"built-in function %qE must be directly called\", expr);\n+\n+      return true;\n+    }\n+\n+  return false;\n+}\n+\n #include \"gt-c-family-c-common.h\""}, {"sha": "74d1bc149e3b2cfc7b0b34ec1ea0e4da7b78417e", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494", "patch": "@@ -572,6 +572,7 @@ extern int field_decl_cmp (const void *, const void *);\n extern void resort_sorted_fields (void *, void *, gt_pointer_operator,\n \t\t\t\t  void *);\n extern bool has_c_linkage (const_tree decl);\n+extern bool c_decl_implicit (const_tree);\n \f\n /* Switches common to the C front ends.  */\n \n@@ -1439,5 +1440,6 @@ extern bool contains_cilk_spawn_stmt (tree);\n extern tree cilk_for_number_of_iterations (tree);\n extern bool check_no_cilk (tree, const char *, const char *,\n \t\t           location_t loc = UNKNOWN_LOCATION);\n+extern bool reject_gcc_builtin (const_tree, location_t = UNKNOWN_LOCATION);\n \n #endif /* ! GCC_C_COMMON_H */"}, {"sha": "658b62bbbe3f0f5f2f62945c6755c73d2a1cf0ec", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494", "patch": "@@ -1,3 +1,12 @@\n+2015-09-03  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/66516\n+\t* c/c-typeck.c (convert_arguments, parser_build_unary_op)\n+\t(build_conditional_expr, c_cast_expr, convert_for_assignment)\n+\t(build_binary_op, _objc_common_truthvalue_conversion): Call\n+\treject_gcc_builtin.\n+\t(c_decl_implicit): Define.\n+\n 2015-09-02  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/67432"}, {"sha": "c622a9027e6f9bb0b38162f5aac0864cd5e459ff", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494", "patch": "@@ -3339,6 +3339,10 @@ convert_arguments (location_t loc, vec<location_t> arg_loc, tree typelist,\n \t  error (invalid_func_diag);\n \t  return -1;\n \t}\n+      else if (TREE_CODE (val) == ADDR_EXPR && reject_gcc_builtin (val))\n+\t{\n+\t  return -1;\n+\t}\n       else\n \t/* Convert `short' and `char' to full-size `int'.  */\n \tparmval = default_conversion (val);\n@@ -3376,12 +3380,20 @@ parser_build_unary_op (location_t loc, enum tree_code code, struct c_expr arg)\n {\n   struct c_expr result;\n \n-  result.value = build_unary_op (loc, code, arg.value, 0);\n   result.original_code = code;\n   result.original_type = NULL;\n \n+  if (reject_gcc_builtin (arg.value))\n+    {\n+      result.value = error_mark_node;\n+    }\n+  else\n+    {\n+      result.value = build_unary_op (loc, code, arg.value, 0);\n+\n   if (TREE_OVERFLOW_P (result.value) && !TREE_OVERFLOW_P (arg.value))\n     overflow_warning (loc, result.value);\n+    }\n \n   return result;\n }\n@@ -4484,6 +4496,12 @@ build_conditional_expr (location_t colon_loc, tree ifexp, bool ifexp_bcp,\n   type2 = TREE_TYPE (op2);\n   code2 = TREE_CODE (type2);\n \n+  if (code1 == POINTER_TYPE && reject_gcc_builtin (op1))\n+    return error_mark_node;\n+\n+  if (code2 == POINTER_TYPE && reject_gcc_builtin (op2))\n+    return error_mark_node;\n+\n   /* C90 does not permit non-lvalue arrays in conditional expressions.\n      In C99 they will be pointers by now.  */\n   if (code1 == ARRAY_TYPE || code2 == ARRAY_TYPE)\n@@ -5222,6 +5240,10 @@ c_cast_expr (location_t loc, struct c_type_name *type_name, tree expr)\n   type = groktypename (type_name, &type_expr, &type_expr_const);\n   warn_strict_prototypes = saved_wsp;\n \n+  if (TREE_CODE (expr) == ADDR_EXPR && !VOID_TYPE_P (type)\n+      && reject_gcc_builtin (expr))\n+    return error_mark_node;\n+\n   ret = build_c_cast (loc, type, expr);\n   if (type_expr)\n     {\n@@ -5861,6 +5883,10 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n   rhs = require_complete_type (rhs);\n   if (rhs == error_mark_node)\n     return error_mark_node;\n+\n+  if (coder == POINTER_TYPE && reject_gcc_builtin (rhs))\n+    return error_mark_node;\n+\n   /* A non-reference type can convert to a reference.  This handles\n      va_start, va_copy and possibly port built-ins.  */\n   if (codel == REFERENCE_TYPE && coder != REFERENCE_TYPE)\n@@ -10350,6 +10376,14 @@ build_binary_op (location_t location, enum tree_code code,\n   if (code0 == ERROR_MARK || code1 == ERROR_MARK)\n     return error_mark_node;\n \n+  if (code0 == POINTER_TYPE\n+      && reject_gcc_builtin (op0, EXPR_LOCATION (orig_op0)))\n+    return error_mark_node;\n+\n+  if (code1 == POINTER_TYPE\n+      && reject_gcc_builtin (op1, EXPR_LOCATION (orig_op1)))\n+    return error_mark_node;\n+\n   if ((invalid_op_diag\n        = targetm.invalid_binary_op (code, type0, type1)))\n     {\n@@ -11330,6 +11364,11 @@ c_objc_common_truthvalue_conversion (location_t location, tree expr)\n       error_at (location, \"void value not ignored as it ought to be\");\n       return error_mark_node;\n \n+    case POINTER_TYPE:\n+      if (reject_gcc_builtin (expr))\n+\treturn error_mark_node;\n+      break;\n+\n     case FUNCTION_TYPE:\n       gcc_unreachable ();\n \n@@ -12882,3 +12921,13 @@ cilk_install_body_with_frame_cleanup (tree fndecl, tree body, void *w)\n   append_to_statement_list (build_stmt (EXPR_LOCATION (body), TRY_FINALLY_EXPR,\n \t\t\t\t       \tbody_list, dtor), &list);\n }\n+\n+/* Returns true when the function declaration FNDECL is implicit,\n+   introduced as a result of a call to an otherwise undeclared\n+   function, and false otherwise.  */\n+\n+bool\n+c_decl_implicit (const_tree fndecl)\n+{\n+  return C_DECL_IMPLICIT (fndecl);\n+}"}, {"sha": "41c56583004baff4200dc702c6c6d78aebd52a4c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494", "patch": "@@ -1,3 +1,15 @@\n+2015-09-03  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/66516\n+\t* cp/cp-tree.h (mark_rvalue_use, decay_conversion): Add new\n+\targument(s).\n+\t* cp/expr.c (mark_rvalue_use): Use new argument.\n+\t* cp/call.c (build_addr_func): Call decay_conversion with new\n+\targument.\n+\t* cp/pt.c (convert_template_argument): Call reject_gcc_builtin.\n+\t* cp/typeck.c (decay_conversion): Use new argument.\n+\t(c_decl_implicit): Define.\n+\n 2015-09-02  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n \n \tPR middle-end/60586"}, {"sha": "367d42b217c83f5c37c605b55ae64c399c596a5d", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494", "patch": "@@ -288,7 +288,7 @@ build_addr_func (tree function, tsubst_flags_t complain)\n       function = build_address (function);\n     }\n   else\n-    function = decay_conversion (function, complain);\n+    function = decay_conversion (function, complain, /*reject_builtin=*/false);\n \n   return function;\n }"}, {"sha": "784a61664ebc51fb7d1f8923565d39f2ec4b2977", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494", "patch": "@@ -5787,7 +5787,9 @@ extern tree create_try_catch_expr               (tree, tree);\n \n /* in expr.c */\n extern tree cplus_expand_constant\t\t(tree);\n-extern tree mark_rvalue_use\t\t\t(tree);\n+extern tree mark_rvalue_use\t\t\t(tree,\n+                                                 location_t = UNKNOWN_LOCATION,\n+                                                 bool = true);\n extern tree mark_lvalue_use\t\t\t(tree);\n extern tree mark_type_use\t\t\t(tree);\n extern void mark_exp_read\t\t\t(tree);\n@@ -6461,7 +6463,9 @@ extern tree cxx_alignas_expr                    (tree);\n extern tree cxx_sizeof_nowarn                   (tree);\n extern tree is_bitfield_expr_with_lowered_type  (const_tree);\n extern tree unlowered_expr_type                 (const_tree);\n-extern tree decay_conversion\t\t\t(tree, tsubst_flags_t);\n+extern tree decay_conversion\t\t\t(tree,\n+                                                 tsubst_flags_t,\n+                                                 bool = true);\n extern tree build_class_member_access_expr      (tree, tree, tree, bool,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree finish_class_member_access_expr     (tree, tree, bool, "}, {"sha": "71dec3da0335df86bc28034d6b0f820dc43658c4", "filename": "gcc/cp/expr.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494/gcc%2Fcp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494/gcc%2Fcp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.c?ref=1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494", "patch": "@@ -91,18 +91,24 @@ cplus_expand_constant (tree cst)\n   return cst;\n }\n \n-/* Called whenever an expression is used\n-   in a rvalue context.  */\n-\n+/* Called whenever the expression EXPR is used in an rvalue context.\n+   When REJECT_BUILTIN is true the expression is checked to make sure\n+   it doesn't make it possible to obtain the address of a GCC built-in\n+   function with no library fallback (or any of its bits, such as in\n+   a conversion to bool).  */\n tree\n-mark_rvalue_use (tree expr)\n+mark_rvalue_use (tree expr,\n+\t\t location_t loc /* = UNKNOWN_LOCATION */,\n+\t\t bool reject_builtin /* = true */)\n {\n+  if (reject_builtin && reject_gcc_builtin (expr, loc))\n+    return error_mark_node;\n+\n   mark_exp_read (expr);\n   return expr;\n }\n \n-/* Called whenever an expression is used\n-   in a lvalue context.  */\n+/* Called whenever an expression is used in an lvalue context.  */\n \n tree\n mark_lvalue_use (tree expr)"}, {"sha": "ec32c5a05426d0a6f7f5c3d15566990883268b31", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494", "patch": "@@ -7199,6 +7199,18 @@ convert_template_argument (tree parm,\n       else if (val == error_mark_node && (complain & tf_error))\n \terror (\"could not convert template argument %qE to %qT\",  orig_arg, t);\n \n+      if (INDIRECT_REF_P (val))\n+        {\n+          /* Reject template arguments that are references to built-in\n+             functions with no library fallbacks.  */\n+          const_tree inner = TREE_OPERAND (val, 0);\n+          if (TREE_CODE (TREE_TYPE (inner)) == REFERENCE_TYPE\n+              && TREE_CODE (TREE_TYPE (TREE_TYPE (inner))) == FUNCTION_TYPE\n+              && TREE_CODE (TREE_TYPE (inner)) == REFERENCE_TYPE\n+              && reject_gcc_builtin (TREE_OPERAND (inner, 0)))\n+              return error_mark_node;\n+        }\n+\n       if (TREE_CODE (val) == SCOPE_REF)\n \t{\n \t  /* Strip typedefs from the SCOPE_REF.  */"}, {"sha": "388558c347dd2b3bba00ae0634935655684c80ee", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494", "patch": "@@ -1911,7 +1911,9 @@ unlowered_expr_type (const_tree exp)\n    that the return value is no longer an lvalue.  */\n \n tree\n-decay_conversion (tree exp, tsubst_flags_t complain)\n+decay_conversion (tree exp,\n+\t\t  tsubst_flags_t complain,\n+\t\t  bool reject_builtin /* = true */)\n {\n   tree type;\n   enum tree_code code;\n@@ -1921,7 +1923,7 @@ decay_conversion (tree exp, tsubst_flags_t complain)\n   if (type == error_mark_node)\n     return error_mark_node;\n \n-  exp = mark_rvalue_use (exp);\n+  exp = mark_rvalue_use (exp, loc, reject_builtin);\n \n   exp = resolve_nondeduced_context (exp);\n   if (type_unknown_p (exp))\n@@ -9397,3 +9399,12 @@ check_literal_operator_args (const_tree decl,\n       return true;\n     }\n }\n+\n+/* Always returns false since unlike C90, C++ has no concept of implicit\n+   function declarations.  */\n+\n+bool\n+c_decl_implicit (const_tree)\n+{\n+  return false;\n+}"}, {"sha": "23e6a76b8a8da6332af19be346095e880f814577", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494", "patch": "@@ -10316,14 +10316,22 @@ recommend general use of these functions.\n \n The remaining functions are provided for optimization purposes.\n \n+With the exception of built-ins that have library equivalents such as\n+the standard C library functions discussed below, or that expand to\n+library calls, GCC built-in functions are always expanded inline and\n+thus do not have corresponding entry points and their address cannot\n+be obtained.  Attempting to use them in an expression other than\n+a function call results in a compile-time error.\n+\n @opindex fno-builtin\n GCC includes built-in versions of many of the functions in the standard\n-C library.  The versions prefixed with @code{__builtin_} are always\n-treated as having the same meaning as the C library function even if you\n-specify the @option{-fno-builtin} option.  (@pxref{C Dialect Options})\n-Many of these functions are only optimized in certain cases; if they are\n-not optimized in a particular case, a call to the library function is\n-emitted.\n+C library.  These functions come in two forms: one whose names start with\n+the @code{__builtin_} prefix, and the other without.  Both forms have the\n+same type (including prototype), the same address (when their address is\n+taken), and the same meaning as the C library functions even if you specify\n+the @option{-fno-builtin} option @pxref{C Dialect Options}).  Many of these\n+functions are only optimized in certain cases; if they are not optimized in\n+a particular case, a call to the library function is emitted.\n \n @opindex ansi\n @opindex std"}, {"sha": "22a0bc56e8986a83269fe673b071ff1640a882d5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1807ffc1a51df83a3ad26ad1b56ef0bbe8a7e494", "patch": "@@ -1,3 +1,9 @@\n+2015-09-03  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/66516\n+\t* g++.dg/addr_builtin-1.C: New test.\n+\t* gcc.dg/addr_builtin-1.c: New test.\n+\n 2015-09-03  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/vec-shift.c: New test."}]}