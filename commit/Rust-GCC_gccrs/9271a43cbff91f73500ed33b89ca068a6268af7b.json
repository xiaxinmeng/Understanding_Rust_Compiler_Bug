{"sha": "9271a43cbff91f73500ed33b89ca068a6268af7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI3MWE0M2NiZmY5MWY3MzUwMGVkMzNiODljYTA2OGE2MjY4YWY3Yg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2010-09-22T08:48:17Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2010-09-22T08:48:17Z"}, "message": "tree-sra.c (struct access): New field grp_no_warning.\n\n2010-09-22  Martin Jambor  <mjambor@suse.cz>\n\n\t* tree-sra.c (struct access): New field grp_no_warning.\n\t(create_access_replacement): Set TREE_NO_WARNING according to\n\t grp_no_warning.\n\t(create_artificial_child_access): Use build_ref_for_model and set\n\tgrp_no_warning if build_user_friendly_ref_for_offset fails.\n\t(propagate_subaccesses_across_link): Likewise.\n\nFrom-SVN: r164515", "tree": {"sha": "f17511091276bf526ef6e36424ed3b5c8cf4399a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f17511091276bf526ef6e36424ed3b5c8cf4399a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9271a43cbff91f73500ed33b89ca068a6268af7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9271a43cbff91f73500ed33b89ca068a6268af7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9271a43cbff91f73500ed33b89ca068a6268af7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9271a43cbff91f73500ed33b89ca068a6268af7b/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "77167b6f44e2f2156a396af44701329c168c3ab1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77167b6f44e2f2156a396af44701329c168c3ab1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77167b6f44e2f2156a396af44701329c168c3ab1"}], "stats": {"total": 37, "additions": 31, "deletions": 6}, "files": [{"sha": "50f27a3ad18f7158d4e7496504e116dc4a3d81fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9271a43cbff91f73500ed33b89ca068a6268af7b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9271a43cbff91f73500ed33b89ca068a6268af7b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9271a43cbff91f73500ed33b89ca068a6268af7b", "patch": "@@ -1,3 +1,12 @@\n+2010-09-22  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* tree-sra.c (struct access): New field grp_no_warning.\n+\t(create_access_replacement): Set TREE_NO_WARNING according to\n+\t grp_no_warning.\n+\t(create_artificial_child_access): Use build_ref_for_model and set\n+\tgrp_no_warning if build_user_friendly_ref_for_offset fails.\n+\t(propagate_subaccesses_across_link): Likewise.\n+\n 2010-09-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR target/35664"}, {"sha": "4364713ca5716fa55955b545e1e4abe77d92c48e", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9271a43cbff91f73500ed33b89ca068a6268af7b/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9271a43cbff91f73500ed33b89ca068a6268af7b/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=9271a43cbff91f73500ed33b89ca068a6268af7b", "patch": "@@ -216,6 +216,9 @@ struct access\n      cannot be called from within FOR_EACH_REFERENCED_VAR. */\n   unsigned grp_to_be_replaced : 1;\n \n+  /* Should TREE_NO_WARNING of a replacement be set?  */\n+  unsigned grp_no_warning : 1;\n+\n   /* Is it possible that the group refers to data which might be (directly or\n      otherwise) modified?  */\n   unsigned grp_maybe_modified : 1;\n@@ -1714,7 +1717,10 @@ create_access_replacement (struct access *access, bool rename)\n \t  }\n       SET_DECL_DEBUG_EXPR (repl, debug_expr);\n       DECL_DEBUG_EXPR_IS_FROM (repl) = 1;\n-      TREE_NO_WARNING (repl) = TREE_NO_WARNING (access->base);\n+      if (access->grp_no_warning)\n+\tTREE_NO_WARNING (repl) = 1;\n+      else\n+\tTREE_NO_WARNING (repl) = TREE_NO_WARNING (access->base);\n     }\n   else\n     TREE_NO_WARNING (repl) = 1;\n@@ -1970,12 +1976,17 @@ create_artificial_child_access (struct access *parent, struct access *model,\n   tree expr = parent->base;\n \n   gcc_assert (!model->grp_unscalarizable_region);\n-  if (!build_user_friendly_ref_for_offset (&expr, TREE_TYPE (expr), new_offset,\n-\t\t\t\t\t   model->type))\n-    return NULL;\n \n   access = (struct access *) pool_alloc (access_pool);\n   memset (access, 0, sizeof (struct access));\n+  if (!build_user_friendly_ref_for_offset (&expr, TREE_TYPE (expr), new_offset,\n+\t\t\t\t\t   model->type))\n+    {\n+      access->grp_no_warning = true;\n+      expr = build_ref_for_model (EXPR_LOCATION (parent->base), parent->base,\n+\t\t\t\t  new_offset, model, NULL, false);\n+    }\n+\n   access->base = parent->base;\n   access->expr = expr;\n   access->offset = new_offset;\n@@ -2016,11 +2027,16 @@ propagate_subaccesses_across_link (struct access *lacc, struct access *racc)\n     {\n       tree t = lacc->base;\n \n+      lacc->type = racc->type;\n       if (build_user_friendly_ref_for_offset (&t, TREE_TYPE (t), lacc->offset,\n \t\t\t\t\t      racc->type))\n+\tlacc->expr = t;\n+      else\n \t{\n-\t  lacc->expr = t;\n-\t  lacc->type = racc->type;\n+\t  lacc->expr = build_ref_for_model (EXPR_LOCATION (lacc->base),\n+\t\t\t\t\t    lacc->base, lacc->offset,\n+\t\t\t\t\t    racc, NULL, false);\n+\t  lacc->grp_no_warning = true;\n \t}\n       return false;\n     }"}]}