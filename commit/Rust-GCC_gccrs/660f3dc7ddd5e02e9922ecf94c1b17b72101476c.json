{"sha": "660f3dc7ddd5e02e9922ecf94c1b17b72101476c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYwZjNkYzdkZGQ1ZTAyZTk5MjJlY2Y5NGMxYjE3YjcyMTAxNDc2Yw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2015-11-24T18:16:26Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2015-11-24T18:16:26Z"}, "message": "re PR c++/68388 (incomplete type bug when using decltype)\n\n2015-11-24  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/68388\n\t* g++.dg/cpp1y/pr68388.C: New.\n\nFrom-SVN: r230827", "tree": {"sha": "34c5b3324b498b20db0c9d9c39f02f9c065cedea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34c5b3324b498b20db0c9d9c39f02f9c065cedea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/660f3dc7ddd5e02e9922ecf94c1b17b72101476c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/660f3dc7ddd5e02e9922ecf94c1b17b72101476c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/660f3dc7ddd5e02e9922ecf94c1b17b72101476c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/660f3dc7ddd5e02e9922ecf94c1b17b72101476c/comments", "author": null, "committer": null, "parents": [{"sha": "ff17c26257cb5c20c0b9be65161d9e9e6e5902d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff17c26257cb5c20c0b9be65161d9e9e6e5902d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff17c26257cb5c20c0b9be65161d9e9e6e5902d0"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "ab038201b2b1106d60549ba48b432139a9b6f54d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/660f3dc7ddd5e02e9922ecf94c1b17b72101476c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/660f3dc7ddd5e02e9922ecf94c1b17b72101476c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=660f3dc7ddd5e02e9922ecf94c1b17b72101476c", "patch": "@@ -1,3 +1,8 @@\n+2015-11-24  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/68388\n+\t* g++.dg/cpp1y/pr68388.C: New.\n+\n 2015-11-24  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n "}, {"sha": "f1a342a43bdebd209f19344fa9f8164b26d25c86", "filename": "gcc/testsuite/g++.dg/cpp1y/pr68388.C", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/660f3dc7ddd5e02e9922ecf94c1b17b72101476c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr68388.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/660f3dc7ddd5e02e9922ecf94c1b17b72101476c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr68388.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr68388.C?ref=660f3dc7ddd5e02e9922ecf94c1b17b72101476c", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do compile { target c++14 } }\n+\n+namespace std {\n+typedef int size_t;\n+template <std::size_t... Indexes>\n+struct index_sequence {};\n+}\n+\n+template <class...> class Tuple {};\n+\n+template <std::size_t I, class TFirst>\n+auto get(Tuple<TFirst>) {\n+  return TFirst();\n+}\n+\n+template <std::size_t I, class Functor, class T1, class T2>\n+auto apply_impl(Functor f, T1 t1, T2 t2) {\n+  return f(get<I>(t1), get<I>(t2));\n+}\n+\n+template <std::size_t... Indexes, class Functor, class T1, class T2>        \n+auto map_impl(std::index_sequence<Indexes...>, Functor f, T1 t1, T2 t2) {\n+  Tuple<decltype(apply_impl<Indexes>(f, t1, t2))...>();\n+}\n+\n+template <class Functor, class T1, class T2>\n+auto map_impl(Functor f, T1 t1, T2 t2) {\n+  map_impl(std::index_sequence<0>(), f, t1, t2);\n+}\n+                                 \n+struct Less {                                                \n+  template <class Lhs, class Rhs>                     \n+  auto operator()(Lhs lhs, Rhs rhs) -> decltype(lhs < rhs) {\n+    return lhs < rhs;\n+  }\n+};\n+                                                                     \n+int main() {\n+  auto t1 = Tuple<int>();\n+  auto t2 = Tuple<int>();\n+  map_impl(Less(), t1, t2);\n+}"}]}