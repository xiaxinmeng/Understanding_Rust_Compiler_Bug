{"sha": "232c49252634e798efd4e9e84c2c9e4013e10f1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMyYzQ5MjUyNjM0ZTc5OGVmZDRlOWU4NGMyYzllNDAxM2UxMGYxZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-03-31T19:48:41Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-03-31T19:48:41Z"}, "message": "stl_bvector.h (_M_fill_insert(iterator, size_type, bool), [...]): Move out of line...\n\n2007-03-31  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_bvector.h (_M_fill_insert(iterator, size_type,\n\tbool), _M_insert_range(iterator, _ForwardIterator, _ForwardIterator,\n\tstd::forward_iterator_tag), _M_insert_aux(iterator, bool)): Move\n\tout of line...\n\t* include/bits/vector.tcc: ... here.\n\nFrom-SVN: r123389", "tree": {"sha": "a2309621c4cef9d90f3dc324e097a39c0333e20f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2309621c4cef9d90f3dc324e097a39c0333e20f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/232c49252634e798efd4e9e84c2c9e4013e10f1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/232c49252634e798efd4e9e84c2c9e4013e10f1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/232c49252634e798efd4e9e84c2c9e4013e10f1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/232c49252634e798efd4e9e84c2c9e4013e10f1e/comments", "author": null, "committer": null, "parents": [{"sha": "29e86cb09c6ffe497456341864551b504c9a6f4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29e86cb09c6ffe497456341864551b504c9a6f4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29e86cb09c6ffe497456341864551b504c9a6f4f"}], "stats": {"total": 250, "additions": 140, "deletions": 110}, "files": [{"sha": "d05f5b5bc1b53533eb767ec7a915e04a40069aa3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/232c49252634e798efd4e9e84c2c9e4013e10f1e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/232c49252634e798efd4e9e84c2c9e4013e10f1e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=232c49252634e798efd4e9e84c2c9e4013e10f1e", "patch": "@@ -1,3 +1,11 @@\n+2007-03-31  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_bvector.h (_M_fill_insert(iterator, size_type,\n+\tbool), _M_insert_range(iterator, _ForwardIterator, _ForwardIterator,\n+\tstd::forward_iterator_tag), _M_insert_aux(iterator, bool)): Move\n+\tout of line...\n+\t* include/bits/vector.tcc: ... here.\n+\n 2007-03-30  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR c++/26099"}, {"sha": "6f24154d2f97535a388d15c66b6d7c44cb4ff8d9", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 18, "deletions": 97, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/232c49252634e798efd4e9e84c2c9e4013e10f1e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/232c49252634e798efd4e9e84c2c9e4013e10f1e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=232c49252634e798efd4e9e84c2c9e4013e10f1e", "patch": "@@ -373,7 +373,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n       __fill_bvector(__first, __last, __x);\n   }\n \n-  template<class _Alloc>\n+  template<typename _Alloc>\n     struct _Bvector_base\n     {\n       typedef typename _Alloc::template rebind<_Bit_type>::other\n@@ -501,7 +501,7 @@ template<typename _Alloc>\n       _M_copy_aligned(__x.begin(), __x.end(), this->_M_impl._M_start);\n     }\n \n-    template<class _InputIterator>\n+    template<typename _InputIterator>\n       vector(_InputIterator __first, _InputIterator __last,\n \t     const allocator_type& __a = allocator_type())\n       : _Base(__a)\n@@ -535,7 +535,7 @@ template<typename _Alloc>\n     assign(size_type __n, const bool& __x)\n     { _M_fill_assign(__n, __x); }\n \n-    template<class _InputIterator>\n+    template<typename _InputIterator>\n       void\n       assign(_InputIterator __first, _InputIterator __last)\n       {\n@@ -712,7 +712,7 @@ template<typename _Alloc>\n       return begin() + __n;\n     }\n \n-    template<class _InputIterator>\n+    template<typename _InputIterator>\n       void\n       insert(iterator __position,\n \t     _InputIterator __first, _InputIterator __last)\n@@ -790,7 +790,7 @@ template<typename _Alloc>\n     }\n \n     // Check whether it's an integral type.  If so, it's not an iterator.\n-    template<class _Integer>\n+    template<typename _Integer>\n       void\n       _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)\n       {\n@@ -799,14 +799,14 @@ template<typename _Alloc>\n \t\t  this->_M_impl._M_end_of_storage, __x ? ~0 : 0);\n       }\n \n-    template<class _InputIterator>\n+    template<typename _InputIterator>\n       void \n       _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,\n \t\t\t     __false_type)\n       { _M_initialize_range(__first, __last, \n \t\t\t    std::__iterator_category(__first)); }\n \n-    template<class _InputIterator>\n+    template<typename _InputIterator>\n       void\n       _M_initialize_range(_InputIterator __first, _InputIterator __last,\n \t\t\t  std::input_iterator_tag)\n@@ -815,7 +815,7 @@ template<typename _Alloc>\n \t  push_back(*__first);\n       }\n \n-    template<class _ForwardIterator>\n+    template<typename _ForwardIterator>\n       void\n       _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,\n \t\t\t  std::forward_iterator_tag)\n@@ -825,7 +825,7 @@ template<typename _Alloc>\n \tstd::copy(__first, __last, this->_M_impl._M_start);\n       }\n \n-    template<class _Integer>\n+    template<typename _Integer>\n       void\n       _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)\n       { _M_fill_assign((size_t) __n, (bool) __val); }\n@@ -853,7 +853,7 @@ template<typename _Alloc>\n \t}\n     }\n \n-    template<class _InputIterator>\n+    template<typename _InputIterator>\n       void\n       _M_assign_aux(_InputIterator __first, _InputIterator __last,\n \t\t    std::input_iterator_tag)\n@@ -867,7 +867,7 @@ template<typename _Alloc>\n \t  insert(end(), __first, __last);\n       }\n     \n-    template<class _ForwardIterator>\n+    template<typename _ForwardIterator>\n       void\n       _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,\n \t\t    std::forward_iterator_tag)\n@@ -885,13 +885,13 @@ template<typename _Alloc>\n       }\n \n     // Check whether it's an integral type.  If so, it's not an iterator.\n-    template<class _Integer>\n+    template<typename _Integer>\n       void\n       _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,\n \t\t\t __true_type)\n       { _M_fill_insert(__pos, __n, __x); }\n \n-    template<class _InputIterator>\n+    template<typename _InputIterator>\n       void\n       _M_insert_dispatch(iterator __pos,\n \t\t\t _InputIterator __first, _InputIterator __last,\n@@ -900,35 +900,9 @@ template<typename _Alloc>\n \t\t\tstd::__iterator_category(__first)); }\n \n     void\n-    _M_fill_insert(iterator __position, size_type __n, bool __x)\n-    {\n-      if (__n == 0)\n-\treturn;\n-      if (capacity() - size() >= __n)\n-\t{\n-\t  std::copy_backward(__position, end(),\n-\t\t\t     this->_M_impl._M_finish + difference_type(__n));\n-\t  std::fill(__position, __position + difference_type(__n), __x);\n-\t  this->_M_impl._M_finish += difference_type(__n);\n-\t}\n-      else\n-\t{\n-\t  const size_type __len = size() + std::max(size(), __n);\n-\t  _Bit_type * __q = this->_M_allocate(__len);\n-\t  iterator __i = _M_copy_aligned(begin(), __position,\n-\t\t\t\t\t iterator(__q, 0));\n-\t  std::fill(__i, __i + difference_type(__n), __x);\n-\t  this->_M_impl._M_finish = std::copy(__position, end(),\n-\t\t\t\t\t      __i + difference_type(__n));\n-\t  this->_M_deallocate();\n-\t  this->_M_impl._M_end_of_storage = (__q + ((__len\n-\t\t\t\t\t\t     + int(_S_word_bit) - 1)\n-\t\t\t\t\t\t    / int(_S_word_bit)));\n-\t  this->_M_impl._M_start = iterator(__q, 0);\n-\t}\n-    }\n+    _M_fill_insert(iterator __position, size_type __n, bool __x);\n \n-    template<class _InputIterator>\n+    template<typename _InputIterator>\n       void\n       _M_insert_range(iterator __pos, _InputIterator __first, \n \t\t      _InputIterator __last, std::input_iterator_tag)\n@@ -940,66 +914,13 @@ template<typename _Alloc>\n \t  }\n       }\n \n-    template<class _ForwardIterator>\n+    template<typename _ForwardIterator>\n       void\n       _M_insert_range(iterator __position, _ForwardIterator __first, \n-\t\t      _ForwardIterator __last, std::forward_iterator_tag)\n-      {\n-\tif (__first != __last)\n-\t  {\n-\t    size_type __n = std::distance(__first, __last);\n-\t    if (capacity() - size() >= __n)\n-\t      {\n-\t\tstd::copy_backward(__position, end(),\n-\t\t\t\t   this->_M_impl._M_finish\n-\t\t\t\t   + difference_type(__n));\n-\t\tstd::copy(__first, __last, __position);\n-\t\tthis->_M_impl._M_finish += difference_type(__n);\n-\t      }\n-\t    else\n-\t      {\n-\t\tconst size_type __len = size() + std::max(size(), __n);\n-\t\t_Bit_type * __q = this->_M_allocate(__len);\n-\t\titerator __i = _M_copy_aligned(begin(), __position,\n-\t\t\t\t\t       iterator(__q, 0));\n-\t\t__i = std::copy(__first, __last, __i);\n-\t\tthis->_M_impl._M_finish = std::copy(__position, end(), __i);\n-\t\tthis->_M_deallocate();\n-\t\tthis->_M_impl._M_end_of_storage = (__q\n-\t\t\t\t\t\t   + ((__len\n-\t\t\t\t\t\t       + int(_S_word_bit) - 1)\n-\t\t\t\t\t\t      / int(_S_word_bit)));\n-\t\tthis->_M_impl._M_start = iterator(__q, 0);\n-\t      }\n-\t  }\n-      }\n+\t\t      _ForwardIterator __last, std::forward_iterator_tag);\n \n     void\n-    _M_insert_aux(iterator __position, bool __x)\n-    {\n-      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage)\n-\t{\n-\t  std::copy_backward(__position, this->_M_impl._M_finish, \n-\t\t\t     this->_M_impl._M_finish + 1);\n-\t  *__position = __x;\n-\t  ++this->_M_impl._M_finish;\n-\t}\n-      else\n-\t{\n-\t  const size_type __len = size() ? 2 * size()\n-\t                                 : static_cast<size_type>(_S_word_bit);\n-\t  _Bit_type * __q = this->_M_allocate(__len);\n-\t  iterator __i = _M_copy_aligned(begin(), __position,\n-\t\t\t\t\t iterator(__q, 0));\n-\t  *__i++ = __x;\n-\t  this->_M_impl._M_finish = std::copy(__position, end(), __i);\n-\t  this->_M_deallocate();\n-\t  this->_M_impl._M_end_of_storage = (__q + ((__len\n-\t\t\t\t\t\t     + int(_S_word_bit) - 1)\n-\t\t\t\t\t\t    / int(_S_word_bit)));\n-\t  this->_M_impl._M_start = iterator(__q, 0);\n-\t}\n-    }\n+    _M_insert_aux(iterator __position, bool __x);\n \n     void\n     _M_erase_at_end(iterator __pos)"}, {"sha": "9b416be158d502309e034d437ed053b65bb7b492", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 114, "deletions": 13, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/232c49252634e798efd4e9e84c2c9e4013e10f1e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/232c49252634e798efd4e9e84c2c9e4013e10f1e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=232c49252634e798efd4e9e84c2c9e4013e10f1e", "patch": "@@ -1,6 +1,7 @@\n // Vector implementation (out of line) -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -388,18 +389,19 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n \t}\n     }\n \n-  template<typename _Tp, typename _Alloc> template<typename _InputIterator>\n-    void\n-    vector<_Tp, _Alloc>::\n-    _M_range_insert(iterator __pos, _InputIterator __first,\n-\t\t    _InputIterator __last, std::input_iterator_tag)\n-    {\n-      for (; __first != __last; ++__first)\n-\t{\n-\t  __pos = insert(__pos, *__first);\n-\t  ++__pos;\n-\t}\n-    }\n+  template<typename _Tp, typename _Alloc>\n+    template<typename _InputIterator>\n+      void\n+      vector<_Tp, _Alloc>::\n+      _M_range_insert(iterator __pos, _InputIterator __first,\n+\t\t      _InputIterator __last, std::input_iterator_tag)\n+      {\n+\tfor (; __first != __last; ++__first)\n+\t  {\n+\t    __pos = insert(__pos, *__first);\n+\t    ++__pos;\n+\t  }\n+      }\n \n   template<typename _Tp, typename _Alloc>\n     template<typename _ForwardIterator>\n@@ -491,6 +493,105 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n \t  }\n       }\n \n+\n+  // vector<bool>\n+\n+  template<typename _Alloc>\n+    void\n+    vector<bool, _Alloc>::\n+    _M_fill_insert(iterator __position, size_type __n, bool __x)\n+    {\n+      if (__n == 0)\n+\treturn;\n+      if (capacity() - size() >= __n)\n+\t{\n+\t  std::copy_backward(__position, end(),\n+\t\t\t     this->_M_impl._M_finish + difference_type(__n));\n+\t  std::fill(__position, __position + difference_type(__n), __x);\n+\t  this->_M_impl._M_finish += difference_type(__n);\n+\t}\n+      else\n+\t{\n+\t  const size_type __len = size() + std::max(size(), __n);\n+\t  _Bit_type * __q = this->_M_allocate(__len);\n+\t  iterator __i = _M_copy_aligned(begin(), __position,\n+\t\t\t\t\t iterator(__q, 0));\n+\t  std::fill(__i, __i + difference_type(__n), __x);\n+\t  this->_M_impl._M_finish = std::copy(__position, end(),\n+\t\t\t\t\t      __i + difference_type(__n));\n+\t  this->_M_deallocate();\n+\t  this->_M_impl._M_end_of_storage = (__q + ((__len\n+\t\t\t\t\t\t     + int(_S_word_bit) - 1)\n+\t\t\t\t\t\t    / int(_S_word_bit)));\n+\t  this->_M_impl._M_start = iterator(__q, 0);\n+\t}\n+    }\n+\n+  template<typename _Alloc>\n+    template<typename _ForwardIterator>\n+      void\n+      vector<bool, _Alloc>::\n+      _M_insert_range(iterator __position, _ForwardIterator __first, \n+\t\t      _ForwardIterator __last, std::forward_iterator_tag)\n+      {\n+\tif (__first != __last)\n+\t  {\n+\t    size_type __n = std::distance(__first, __last);\n+\t    if (capacity() - size() >= __n)\n+\t      {\n+\t\tstd::copy_backward(__position, end(),\n+\t\t\t\t   this->_M_impl._M_finish\n+\t\t\t\t   + difference_type(__n));\n+\t\tstd::copy(__first, __last, __position);\n+\t\tthis->_M_impl._M_finish += difference_type(__n);\n+\t      }\n+\t    else\n+\t      {\n+\t\tconst size_type __len = size() + std::max(size(), __n);\n+\t\t_Bit_type * __q = this->_M_allocate(__len);\n+\t\titerator __i = _M_copy_aligned(begin(), __position,\n+\t\t\t\t\t       iterator(__q, 0));\n+\t\t__i = std::copy(__first, __last, __i);\n+\t\tthis->_M_impl._M_finish = std::copy(__position, end(), __i);\n+\t\tthis->_M_deallocate();\n+\t\tthis->_M_impl._M_end_of_storage = (__q\n+\t\t\t\t\t\t   + ((__len\n+\t\t\t\t\t\t       + int(_S_word_bit) - 1)\n+\t\t\t\t\t\t      / int(_S_word_bit)));\n+\t\tthis->_M_impl._M_start = iterator(__q, 0);\n+\t      }\n+\t  }\n+      }\n+\n+  template<typename _Alloc>\n+    void\n+    vector<bool, _Alloc>::\n+    _M_insert_aux(iterator __position, bool __x)\n+    {\n+      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage)\n+\t{\n+\t  std::copy_backward(__position, this->_M_impl._M_finish, \n+\t\t\t     this->_M_impl._M_finish + 1);\n+\t  *__position = __x;\n+\t  ++this->_M_impl._M_finish;\n+\t}\n+      else\n+\t{\n+\t  const size_type __len = size() ? 2 * size()\n+\t                                 : static_cast<size_type>(_S_word_bit);\n+\t  _Bit_type * __q = this->_M_allocate(__len);\n+\t  iterator __i = _M_copy_aligned(begin(), __position,\n+\t\t\t\t\t iterator(__q, 0));\n+\t  *__i++ = __x;\n+\t  this->_M_impl._M_finish = std::copy(__position, end(), __i);\n+\t  this->_M_deallocate();\n+\t  this->_M_impl._M_end_of_storage = (__q + ((__len\n+\t\t\t\t\t\t     + int(_S_word_bit) - 1)\n+\t\t\t\t\t\t    / int(_S_word_bit)));\n+\t  this->_M_impl._M_start = iterator(__q, 0);\n+\t}\n+    }\n+\n _GLIBCXX_END_NESTED_NAMESPACE\n \n #endif /* _VECTOR_TCC */"}]}