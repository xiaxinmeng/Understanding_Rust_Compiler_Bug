{"sha": "caf55296b96659b2e2635680df283af32f8fa5d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FmNTUyOTZiOTY2NTliMmUyNjM1NjgwZGYyODNhZjMyZjhmYTVkNw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-07-14T15:38:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-07-14T15:38:49Z"}, "message": "tree-ssa-sccvn.c (pre_info): Remove.\n\n2008-07-14  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.c (pre_info): Remove.\n\t(switch_to_PRE_table): Likewise.\n\t(free_scc_vn): Do not clear SSA_NAME_VALUE.\n\tDo not free pre_info.\n\t(set_hashtable_value_ids): Do not create value-ids for the\n\toptimistic tables.\n\t(run_scc_vn): Remove double test.  Remove bogus special-case\n\tin value-number printing.\n\t* tree-ssa-sccvn.h (switch_to_PRE_table): Remove.\n\t* tree-ssa-ccp.c (get_symbol_constant_value): Do not look at\n\tSSA_NAME_VALUE.\n\t* tree-flow-inline.h (get_value_handle): Remove.\n\t* tree-flow.h (get_value_handle): Remove.\n\nFrom-SVN: r137787", "tree": {"sha": "f75e8afb6ceee98eeb6903a3791525145691294c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f75e8afb6ceee98eeb6903a3791525145691294c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/caf55296b96659b2e2635680df283af32f8fa5d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caf55296b96659b2e2635680df283af32f8fa5d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caf55296b96659b2e2635680df283af32f8fa5d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caf55296b96659b2e2635680df283af32f8fa5d7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d27cc24c97bbd7f27e7bde76a04af56e773b82fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d27cc24c97bbd7f27e7bde76a04af56e773b82fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d27cc24c97bbd7f27e7bde76a04af56e773b82fe"}], "stats": {"total": 132, "additions": 24, "deletions": 108}, "files": [{"sha": "c619f7ec1665a2acea8b5fdff3eba6794875f911", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caf55296b96659b2e2635680df283af32f8fa5d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caf55296b96659b2e2635680df283af32f8fa5d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=caf55296b96659b2e2635680df283af32f8fa5d7", "patch": "@@ -1,3 +1,19 @@\n+2008-07-14  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (pre_info): Remove.\n+\t(switch_to_PRE_table): Likewise.\n+\t(free_scc_vn): Do not clear SSA_NAME_VALUE.\n+\tDo not free pre_info.\n+\t(set_hashtable_value_ids): Do not create value-ids for the\n+\toptimistic tables.\n+\t(run_scc_vn): Remove double test.  Remove bogus special-case\n+\tin value-number printing.\n+\t* tree-ssa-sccvn.h (switch_to_PRE_table): Remove.\n+\t* tree-ssa-ccp.c (get_symbol_constant_value): Do not look at\n+\tSSA_NAME_VALUE.\n+\t* tree-flow-inline.h (get_value_handle): Remove.\n+\t* tree-flow.h (get_value_handle): Remove.\n+\n 2008-07-14  Martin Jambor  <mjambor@suse.cz>\n \n \t* tree-switch-conversion.c (gen_inbound_check): Make sure the type"}, {"sha": "1eb284047e3e83b1ef97456ff0d4eeba02a8b829", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caf55296b96659b2e2635680df283af32f8fa5d7/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caf55296b96659b2e2635680df283af32f8fa5d7/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=caf55296b96659b2e2635680df283af32f8fa5d7", "patch": "@@ -1659,34 +1659,6 @@ set_symbol_mem_tag (tree sym, tree tag)\n   get_var_ann (sym)->symbol_mem_tag = tag;\n }\n \n-/* Get the value handle of EXPR.  This is the only correct way to get\n-   the value handle for a \"thing\".  If EXPR does not have a value\n-   handle associated, it returns NULL_TREE.  \n-   NB: If EXPR is min_invariant, this function is *required* to return\n-   EXPR.  */\n-\n-static inline tree\n-get_value_handle (tree expr)\n-{\n-  if (TREE_CODE (expr) == SSA_NAME)\n-    return SSA_NAME_VALUE (expr);\n-  else if (DECL_P (expr) || TREE_CODE (expr) == TREE_LIST\n-\t   || TREE_CODE (expr) == CONSTRUCTOR)\n-    {\n-      tree_ann_common_t ann = tree_common_ann (expr);\n-      return ((ann) ? ann->value_handle : NULL_TREE);\n-    }\n-  else if (is_gimple_min_invariant (expr))\n-    return expr;\n-  else if (EXPR_P (expr))\n-    {\n-      tree_ann_common_t ann = tree_common_ann (expr);\n-      return ((ann) ? ann->value_handle : NULL_TREE);\n-    }\n-  else\n-    gcc_unreachable ();\n-}\n-\n /* Accessor to tree-ssa-operands.c caches.  */\n static inline struct ssa_operands *\n gimple_ssa_operands (const struct function *fun)"}, {"sha": "a441893e00412fa93782df1631524972cd83ede0", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caf55296b96659b2e2635680df283af32f8fa5d7/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caf55296b96659b2e2635680df283af32f8fa5d7/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=caf55296b96659b2e2635680df283af32f8fa5d7", "patch": "@@ -1134,7 +1134,6 @@ void print_value_expressions (FILE *, unsigned int);\n tree make_value_handle (tree);\n void set_value_handle (tree, tree);\n bool expressions_equal_p (tree, tree);\n-static inline tree get_value_handle (tree);\n void sort_vuses (VEC (tree, gc) *);\n void sort_vuses_heap (VEC (tree, heap) *);\n tree vn_lookup_or_add (tree);"}, {"sha": "4b6fe6a1b6946ee3dfa9ee7305342f5f47eae5ef", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caf55296b96659b2e2635680df283af32f8fa5d7/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caf55296b96659b2e2635680df283af32f8fa5d7/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=caf55296b96659b2e2635680df283af32f8fa5d7", "patch": "@@ -310,13 +310,10 @@ get_symbol_constant_value (tree sym)\n       change the constant value of the PHI node, which allows for more\n       constants to be propagated.\n \n-   3- If SSA_NAME_VALUE is set and it is a constant, its value is\n-      used.\n-\n-   4- Variables defined by statements other than assignments and PHI\n+   3- Variables defined by statements other than assignments and PHI\n       nodes are considered VARYING.\n \n-   5- Initial values of variables that are not GIMPLE registers are\n+   4- Initial values of variables that are not GIMPLE registers are\n       considered VARYING.  */\n \n static prop_value_t\n@@ -332,12 +329,6 @@ get_default_value (tree var)\n \t non-register when DO_STORE_CCP is false.  */\n       val.lattice_val = VARYING;\n     }\n-  else if (SSA_NAME_VALUE (var)\n-\t   && is_gimple_min_invariant (SSA_NAME_VALUE (var)))\n-    {\n-      val.lattice_val = CONSTANT;\n-      val.value = SSA_NAME_VALUE (var);\n-    }\n   else if ((cst_val = get_symbol_constant_value (sym)) != NULL_TREE)\n     {\n       /* Globals and static variables declared 'const' take their"}, {"sha": "f1318656b9b839bdff78b77df6c8bf3d323f830c", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 6, "deletions": 67, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caf55296b96659b2e2635680df283af32f8fa5d7/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caf55296b96659b2e2635680df283af32f8fa5d7/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=caf55296b96659b2e2635680df283af32f8fa5d7", "patch": "@@ -129,11 +129,6 @@ static vn_tables_t valid_info;\n \n static vn_tables_t optimistic_info;\n \n-/* PRE hashtables storing information about mapping from expressions to\n-   value handles.  */\n-\n-static vn_tables_t pre_info;\n-\n /* Pointer to the set of hashtables that is currently being used.\n    Should always point to either the optimistic_info, or the\n    valid_info.  */\n@@ -2376,15 +2371,6 @@ init_scc_vn (void)\n   allocate_vn_table (valid_info);\n   optimistic_info = XCNEW (struct vn_tables_s);\n   allocate_vn_table (optimistic_info);\n-  pre_info = NULL;\n-}\n-\n-void\n-switch_to_PRE_table (void)\n-{\n-  pre_info = XCNEW (struct vn_tables_s);\n-  allocate_vn_table (pre_info);\n-  current_info = pre_info;\n }\n \n void\n@@ -2402,9 +2388,6 @@ free_scc_vn (void)\n   for (i = 0; i < num_ssa_names; i++)\n     {\n       tree name = ssa_name (i);\n-      if (name\n-\t  && SSA_NAME_VALUE (name))\n-\tSSA_NAME_VALUE (name) = NULL;\n       if (name\n \t  && VN_INFO (name)->needs_insertion)\n \trelease_ssa_name (name);\n@@ -2417,14 +2400,9 @@ free_scc_vn (void)\n   XDELETE (valid_info);\n   free_vn_table (optimistic_info);\n   XDELETE (optimistic_info);\n-  if (pre_info)\n-    {\n-      free_vn_table (pre_info);\n-      XDELETE (pre_info);\n-    }\n }\n \n-/* Set the value ids in the valid/optimistic hash tables.  */\n+/* Set the value ids in the valid hash tables.  */\n \n static void\n set_hashtable_value_ids (void)\n@@ -2433,7 +2411,7 @@ set_hashtable_value_ids (void)\n   vn_nary_op_t vno;\n   vn_reference_t vr;\n   vn_phi_t vp;\n-  \n+\n   /* Now set the value ids of the things we had put in the hash\n      table.  */\n \n@@ -2449,18 +2427,6 @@ set_hashtable_value_ids (void)\n \t}\n     }\n \n-  FOR_EACH_HTAB_ELEMENT (optimistic_info->nary,\n-\t\t\t vno, vn_nary_op_t, hi) \n-    {\n-      if (vno->result)\n-\t{\n-\t  if (TREE_CODE (vno->result) == SSA_NAME)\n-\t    vno->value_id = VN_INFO (vno->result)->value_id;\n-\t  else if (is_gimple_min_invariant (vno->result))\n-\t    vno->value_id = get_or_alloc_constant_value_id (vno->result);\n-\t}\n-    }\n-\n   FOR_EACH_HTAB_ELEMENT (valid_info->phis,\n \t\t\t vp, vn_phi_t, hi) \n     {\n@@ -2472,18 +2438,6 @@ set_hashtable_value_ids (void)\n \t    vp->value_id = get_or_alloc_constant_value_id (vp->result);\n \t}\n     }\n-  FOR_EACH_HTAB_ELEMENT (optimistic_info->phis,\n-\t\t\t vp, vn_phi_t, hi) \n-    {\n-      if (vp->result)\n-\t{\n-\t  if (TREE_CODE (vp->result) == SSA_NAME)\n-\t    vp->value_id = VN_INFO (vp->result)->value_id;\n-\t  else if (is_gimple_min_invariant (vp->result))\n-\t    vp->value_id = get_or_alloc_constant_value_id (vp->result);\n-\t}\n-    }\n-\n \n   FOR_EACH_HTAB_ELEMENT (valid_info->references,\n \t\t\t vr, vn_reference_t, hi) \n@@ -2496,17 +2450,6 @@ set_hashtable_value_ids (void)\n \t    vr->value_id = get_or_alloc_constant_value_id (vr->result);\n \t}\n     }\n-  FOR_EACH_HTAB_ELEMENT (optimistic_info->references,\n-\t\t\t vr, vn_reference_t, hi) \n-    {\n-      if (vr->result)\n-\t{\n-\t  if (TREE_CODE (vr->result) == SSA_NAME)\n-\t    vr->value_id = VN_INFO (vr->result)->value_id;\n-\t  else if (is_gimple_min_invariant (vr->result))\n-\t    vr->value_id = get_or_alloc_constant_value_id (vr->result);\n-\t}\n-    }\n }\n \n /* Do SCCVN.  Returns true if it finished, false if we bailed out\n@@ -2577,7 +2520,6 @@ run_scc_vn (bool may_insert_arg)\n \t  info = VN_INFO (name);\n \t  if (TREE_CODE (info->valnum) == SSA_NAME\n \t      && info->valnum != name\n-\t      && TREE_CODE (info->valnum) == SSA_NAME\n \t      && info->value_id != VN_INFO (info->valnum)->value_id)\n \t    {\n \t      changed = true;\n@@ -2594,16 +2536,13 @@ run_scc_vn (bool may_insert_arg)\n       for (i = 0; i < num_ssa_names; i++)\n \t{\n \t  tree name = ssa_name (i);\n-\t  if (name && VN_INFO (name)->visited\n-\t      && (SSA_VAL (name) != name\n-\t\t  || is_gimple_min_invariant (VN_INFO (name)->expr)))\n+\t  if (name\n+\t      && VN_INFO (name)->visited\n+\t      && SSA_VAL (name) != name)\n \t    {\n \t      print_generic_expr (dump_file, name, 0);\n \t      fprintf (dump_file, \" = \");\n-\t      if (is_gimple_min_invariant (VN_INFO (name)->expr))\n-\t\tprint_generic_expr (dump_file, VN_INFO (name)->expr, 0);\n-\t      else\n-\t\tprint_generic_expr (dump_file, SSA_VAL (name), 0);\n+\t      print_generic_expr (dump_file, SSA_VAL (name), 0);\n \t      fprintf (dump_file, \"\\n\");\n \t    }\n \t}"}, {"sha": "9f391af43aa5c79f20aa24572a832f8715231576", "filename": "gcc/tree-ssa-sccvn.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caf55296b96659b2e2635680df283af32f8fa5d7/gcc%2Ftree-ssa-sccvn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caf55296b96659b2e2635680df283af32f8fa5d7/gcc%2Ftree-ssa-sccvn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.h?ref=caf55296b96659b2e2635680df283af32f8fa5d7", "patch": "@@ -140,7 +140,6 @@ extern vn_ssa_aux_t VN_INFO (tree);\n extern vn_ssa_aux_t VN_INFO_GET (tree);\n bool run_scc_vn (bool);\n void free_scc_vn (void);\n-void switch_to_PRE_table (void);\n tree vn_nary_op_lookup (tree, vn_nary_op_t *);\n tree vn_nary_op_lookup_pieces (unsigned int, enum tree_code,\n \t\t\t       tree, tree, tree, tree, tree,"}]}