{"sha": "e7841bacf5a86bd2523a39abb8e6f6385297b6fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc4NDFiYWNmNWE4NmJkMjUyM2EzOWFiYjhlNmY2Mzg1Mjk3YjZmZA==", "commit": {"author": {"name": "Tristan Gingold", "email": "gingold@adacore.com", "date": "2008-05-20T12:44:43Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-05-20T12:44:43Z"}, "message": "decl.c: Do not emit a variable for a object that has an address representation clause...\n\n2008-05-20  Tristan Gingold  <gingold@adacore.com>\n\n\t* decl.c: Do not emit a variable for a object that has an address\n\trepresentation clause whose value is known at compile time.\n\tWhen a variable has an address clause whose value is known at compile\n\ttime, refer to this variable by using directly the address instead of\n\tdereferencing a pointer.\n\nFrom-SVN: r135618", "tree": {"sha": "8e2cbf2aa50782a9ae8bbcfee5b13e1a490c22ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e2cbf2aa50782a9ae8bbcfee5b13e1a490c22ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7841bacf5a86bd2523a39abb8e6f6385297b6fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7841bacf5a86bd2523a39abb8e6f6385297b6fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7841bacf5a86bd2523a39abb8e6f6385297b6fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7841bacf5a86bd2523a39abb8e6f6385297b6fd/comments", "author": {"login": "gingold-adacore", "id": 16334725, "node_id": "MDQ6VXNlcjE2MzM0NzI1", "avatar_url": "https://avatars.githubusercontent.com/u/16334725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gingold-adacore", "html_url": "https://github.com/gingold-adacore", "followers_url": "https://api.github.com/users/gingold-adacore/followers", "following_url": "https://api.github.com/users/gingold-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/gingold-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/gingold-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gingold-adacore/subscriptions", "organizations_url": "https://api.github.com/users/gingold-adacore/orgs", "repos_url": "https://api.github.com/users/gingold-adacore/repos", "events_url": "https://api.github.com/users/gingold-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/gingold-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5b6a0e43da82d4c4a82fadf2af3b2fa8d39bec63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b6a0e43da82d4c4a82fadf2af3b2fa8d39bec63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b6a0e43da82d4c4a82fadf2af3b2fa8d39bec63"}], "stats": {"total": 39, "additions": 36, "deletions": 3}, "files": [{"sha": "8f29ca77dfc37b558631daadc3b214541baaddf8", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7841bacf5a86bd2523a39abb8e6f6385297b6fd/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7841bacf5a86bd2523a39abb8e6f6385297b6fd/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=e7841bacf5a86bd2523a39abb8e6f6385297b6fd", "patch": "@@ -122,6 +122,17 @@ static void check_ok_for_atomic (tree, Entity_Id, bool);\n static int compatible_signatures_p (tree ftype1, tree ftype2);\n static void rest_of_type_decl_compilation_no_defer (tree);\n \n+/* Return true if GNAT_ADDRESS is a compile time known value.\n+   In particular catch System'To_Address.  */\n+\n+static bool\n+compile_time_known_address_p (Node_Id gnat_address)\n+{\n+  return ((Nkind (gnat_address) == N_Unchecked_Type_Conversion\n+\t   && Compile_Time_Known_Value (Expression (gnat_address)))\n+\t  || Compile_Time_Known_Value (gnat_address));\n+}\n+\n /* Given GNAT_ENTITY, an entity in the incoming GNAT tree, return a\n    GCC type corresponding to that entity.  GNAT_ENTITY is assumed to\n    refer to an Ada type.  */\n@@ -1026,7 +1037,9 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t      = build_reference_type_for_mode (gnu_type, ptr_mode, true);\n \t    gnu_address = convert (gnu_type, gnu_address);\n \t    used_by_ref = true;\n-\t    const_flag = !Is_Public (gnat_entity);\n+\t    const_flag = !Is_Public (gnat_entity)\n+\t      || compile_time_known_address_p (Expression (Address_Clause\n+\t\t\t\t\t\t\t   (gnat_entity)));\n \n \t    /* If we don't have an initializing expression for the underlying\n \t       variable, the initializing expression for the pointer is the\n@@ -1058,9 +1071,24 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t      = build_reference_type_for_mode (gnu_type, ptr_mode, true);\n \t    gnu_size = NULL_TREE;\n \n-\t    gnu_expr = NULL_TREE;\n \t    /* No point in taking the address of an initializing expression\n \t       that isn't going to be used.  */\n+\t    gnu_expr = NULL_TREE;\n+\n+\t    /* If it has an address clause whose value is known at compile\n+\t       time, make the object a CONST_DECL.  This will avoid a\n+\t       useless dereference.  */\n+\t    if (Present (Address_Clause (gnat_entity)))\n+\t      {\n+\t\tNode_Id gnat_address\n+\t\t  = Expression (Address_Clause (gnat_entity));\n+\n+\t\tif (compile_time_known_address_p (gnat_address))\n+\t\t  {\n+\t\t    gnu_expr = gnat_to_gnu (gnat_address);\n+\t\t    const_flag = true;\n+\t\t  }\n+\t      }\n \n \t    used_by_ref = true;\n \t  }\n@@ -1258,7 +1286,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t   for these.  */\n \tif (TREE_CODE (gnu_decl) == CONST_DECL\n \t    && (definition || Sloc (gnat_entity) > Standard_Location)\n-\t    && (Is_Public (gnat_entity)\n+\t    && ((Is_Public (gnat_entity)\n+\t\t && !Present (Address_Clause (gnat_entity)))\n \t\t|| optimize == 0\n \t\t|| Address_Taken (gnat_entity)\n \t\t|| Is_Aliased (gnat_entity)\n@@ -1271,6 +1300,10 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t\t\t      gnat_entity);\n \n \t    SET_DECL_CONST_CORRESPONDING_VAR (gnu_decl, gnu_corr_var);\n+\n+\t    /* As debugging information will be generated for the variable,\n+\t       do not generate information for the constant.  */\n+\t    DECL_IGNORED_P (gnu_decl) = true;\n \t  }\n \n \t/* If this is declared in a block that contains a block with an"}]}