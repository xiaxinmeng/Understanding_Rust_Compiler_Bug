{"sha": "40f8ee2d8dbc9c04da257eb36314eebd9b9fe0e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBmOGVlMmQ4ZGJjOWMwNGRhMjU3ZWIzNjMxNGVlYmQ5YjlmZTBlNA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-01-07T18:46:18Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-01-07T18:46:18Z"}, "message": "Array.java: Merged documentation with classpath.\n\n2004-01-07  Michael Koch  <konqueror@gmx.de>\n\n\t* java/lang/reflect/Array.java: Merged documentation with classpath.\n\nFrom-SVN: r75512", "tree": {"sha": "fca1e7e9c55baa8fdb1895ac8b064df19d08d85b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fca1e7e9c55baa8fdb1895ac8b064df19d08d85b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40f8ee2d8dbc9c04da257eb36314eebd9b9fe0e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f8ee2d8dbc9c04da257eb36314eebd9b9fe0e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40f8ee2d8dbc9c04da257eb36314eebd9b9fe0e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f8ee2d8dbc9c04da257eb36314eebd9b9fe0e4/comments", "author": null, "committer": null, "parents": [{"sha": "6838645e85ed6f8550381f9788f58e42d4f93071", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6838645e85ed6f8550381f9788f58e42d4f93071", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6838645e85ed6f8550381f9788f58e42d4f93071"}], "stats": {"total": 452, "additions": 418, "deletions": 34}, "files": [{"sha": "c9bf7d163095ab675c32f729057fc048b2e5676b", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f8ee2d8dbc9c04da257eb36314eebd9b9fe0e4/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f8ee2d8dbc9c04da257eb36314eebd9b9fe0e4/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=40f8ee2d8dbc9c04da257eb36314eebd9b9fe0e4", "patch": "@@ -1,3 +1,7 @@\n+2004-01-07  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/lang/reflect/Array.java: Merged documentation with classpath.\n+\n 2004-01-07  Michael Koch  <konqueror@gmx.de>\n \n \t* java/text/CollationElementIterator.java"}, {"sha": "11b0d97e9da6269152213de92b71a7cfa86dbf31", "filename": "libjava/java/lang/reflect/Array.java", "status": "modified", "additions": 414, "deletions": 34, "changes": 448, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f8ee2d8dbc9c04da257eb36314eebd9b9fe0e4/libjava%2Fjava%2Flang%2Freflect%2FArray.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f8ee2d8dbc9c04da257eb36314eebd9b9fe0e4/libjava%2Fjava%2Flang%2Freflect%2FArray.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FArray.java?ref=40f8ee2d8dbc9c04da257eb36314eebd9b9fe0e4", "patch": "@@ -1,56 +1,325 @@\n-// FileDescriptor.java - Open file or device\n+/* java.lang.reflect.Array - manipulate arrays by reflection\n+   Copyright (C) 1998, 1999, 2001, 2003 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.lang.reflect;\n \n+import gnu.classpath.Configuration;\n+\n /**\n+ * Array holds static helper functions that allow you to create and\n+ * manipulate arrays by reflection. Operations know how to perform widening\n+ * conversions, but throw {@link IllegalArgumentException} if you attempt\n+ * a narrowing conversion. Also, when accessing primitive arrays, this\n+ * class performs object wrapping and unwrapping as necessary.<p>\n+ *\n+ * <B>Note:</B> This class returns and accepts types as Classes, even\n+ * primitive types; there are Class types defined that represent each\n+ * different primitive type.  They are <code>java.lang.Boolean.TYPE,\n+ * java.lang.Byte.TYPE,</code>, also available as <code>boolean.class,\n+ * byte.class</code>, etc.  These are not to be confused with the\n+ * classes <code>java.lang.Boolean, java.lang.Byte</code>, etc., which are\n+ * real classes. Note also that the shorthand <code>Object[].class</code>\n+ * is a convenient way to get array Classes.<p>\n+ *\n+ * <B>Performance note:</B> This class performs best when it does not have\n+ * to convert primitive types.  The further along the chain it has to convert,\n+ * the worse performance will be.  You're best off using the array as whatever\n+ * type it already is, and then converting the result.  You will do even\n+ * worse if you do this and use the generic set() function.\n+ *\n+ * @author John Keiser\n+ * @author Eric Blake <ebb9@email.byu.edu>\n  * @author Per Bothner <bothner@cygnus.com>\n- * @date january 12, 1999\n- */\n-\n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3.\n- * Status:  Believe complete and correct.\n+ * @see java.lang.Boolean#TYPE\n+ * @see java.lang.Byte#TYPE\n+ * @see java.lang.Short#TYPE\n+ * @see java.lang.Character#TYPE\n+ * @see java.lang.Integer#TYPE\n+ * @see java.lang.Long#TYPE\n+ * @see java.lang.Float#TYPE\n+ * @see java.lang.Double#TYPE\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n-\n public final class Array\n {\n-  Array () { }\n+  static\n+  {\n+    if (Configuration.INIT_LOAD_LIBRARY)\n+      {\n+        System.loadLibrary(\"javalangreflect\");\n+      }\n+  }\n \n+  /**\n+   * This class is uninstantiable.\n+   */\n+  private Array()\n+  {\n+  }\n+\n+  /**\n+   * Creates a new single-dimensioned array.\n+   * @param componentType the type of the array to create\n+   * @param length the length of the array to create\n+   * @return the created array, cast to an Object\n+   * @throws NullPointerException if <code>componentType</code> is null\n+   * @throws IllegalArgumentException if <code>componentType</code> is\n+   *         <code>Void.TYPE</code>\n+   * @throws NegativeArraySizeException when length is less than 0\n+   * @throws OutOfMemoryError if memory allocation fails\n+   */\n   public static native Object newInstance(Class componentType, int length);\n+\n+  /**\n+   * Creates a new multi-dimensioned array.  The new array has the same\n+   * component type as the argument class, and the number of dimensions\n+   * in the new array is the sum of the dimensions of the argument class\n+   * and the length of the argument dimensions. Virtual Machine limitations\n+   * forbid too many dimensions (usually 255 is the maximum); but even\n+   * 50 dimensions of 2 elements in each dimension would exceed your memory\n+   * long beforehand!\n+   *\n+   * @param componentType the type of the array to create.\n+   * @param dimensions the dimensions of the array to create.  Each element\n+   *        in <code>dimensions</code> makes another dimension of the new\n+   *        array.  Thus, <code>Array.newInstance(java.lang.Boolean,\n+   *        new int[]{1,2,3})</code> is the same as\n+   *        <code>new java.lang.Boolean[1][2][3]</code>\n+   * @return the created array, cast to an Object\n+   * @throws NullPointerException if componentType or dimension is null\n+   * @throws IllegalArgumentException if the the size of\n+   *         <code>dimensions</code> is 0 or exceeds the maximum number of\n+   *         array dimensions in the VM; or if componentType is Void.TYPE\n+   * @throws NegativeArraySizeException when any of the dimensions is less\n+   *         than 0\n+   * @throws OutOfMemoryError if memory allocation fails\n+   */\n   public static native Object newInstance(Class elementType, int[] dimensions);\n-  public static native int getLength (Object array);\n \n-  public static native Object  get (Object array, int index);\n-  public static native char    getChar (Object array, int index);\n-  public static native byte    getByte (Object array, int index);\n-  public static native short   getShort (Object array, int index);\n-  public static native int     getInt (Object array, int index);\n-  public static native long    getLong (Object array, int index);\n-  public static native float   getFloat (Object array, int index);\n-  public static native double  getDouble (Object array, int index);\n-  public static native boolean getBoolean (Object array, int index);\n+  /**\n+   * Gets the array length.\n+   * @param array the array\n+   * @return the length of the array\n+   * @throws IllegalArgumentException if <code>array</code> is not an array\n+   * @throws NullPointerException if <code>array</code> is null\n+   */\n+  public static native int getLength(Object array);\n+\n+  /**\n+   * Gets an element of an array.  Primitive elements will be wrapped in\n+   * the corresponding class type.\n+   *\n+   * @param array the array to access\n+   * @param index the array index to access\n+   * @return the element at <code>array[index]</code>\n+   * @throws IllegalArgumentException if <code>array</code> is not an array\n+   * @throws NullPointerException if <code>array</code> is null\n+   * @throws ArrayIndexOutOfBoundsException if <code>index</code> is out of\n+   *         bounds\n+   * @see #getBoolean(Object, int)\n+   * @see #getByte(Object, int)\n+   * @see #getChar(Object, int)\n+   * @see #getShort(Object, int)\n+   * @see #getInt(Object, int)\n+   * @see #getLong(Object, int)\n+   * @see #getFloat(Object, int)\n+   * @see #getDouble(Object, int)\n+   */\n+  public static native Object get(Object array, int index);\n \n-  private static native Class getElementType (Object array, int index);\n+  /**\n+   * Gets an element of a boolean array.\n+   *\n+   * @param array the array to access\n+   * @param index the array index to access\n+   * @return the boolean element at <code>array[index]</code>\n+   * @throws IllegalArgumentException  if <code>array</code> is not a boolean\n+   *         array\n+   * @throws NullPointerException if <code>array</code> is null\n+   * @throws ArrayIndexOutOfBoundsException if <code>index</code> is out of\n+   *         bounds\n+   * @see #get(Object, int)\n+   */\n+  public static native boolean getBoolean(Object array, int index);\n+  \n+  /**\n+   * Gets an element of a byte array.\n+   *\n+   * @param array the array to access\n+   * @param index the array index to access\n+   * @return the byte element at <code>array[index]</code>\n+   * @throws IllegalArgumentException  if <code>array</code> is not a byte\n+   *         array\n+   * @throws NullPointerException if <code>array</code> is null\n+   * @throws ArrayIndexOutOfBoundsException if <code>index</code> is out of\n+   *         bounds\n+   * @see #get(Object, int)\n+   */\n+  public static native byte getByte(Object array, int index);\n \n-  private static native void set (Object array, int index,\n+  /**\n+   * Gets an element of a char array.\n+   *\n+   * @param array the array to access\n+   * @param index the array index to access\n+   * @return the char element at <code>array[index]</code>\n+   * @throws IllegalArgumentException  if <code>array</code> is not a char\n+   *         array\n+   * @throws NullPointerException if <code>array</code> is null\n+   * @throws ArrayIndexOutOfBoundsException if <code>index</code> is out of\n+   *         bounds\n+   * @see #get(Object, int)\n+   */\n+  public static native char getChar(Object array, int index);\n+\n+  /**\n+   * Gets an element of a short array.\n+   *\n+   * @param array the array to access\n+   * @param index the array index to access\n+   * @return the short element at <code>array[index]</code>\n+   * @throws IllegalArgumentException  if <code>array</code> is not a byte\n+   *         or char array\n+   * @throws NullPointerException if <code>array</code> is null\n+   * @throws ArrayIndexOutOfBoundsException if <code>index</code> is out of\n+   *         bounds\n+   * @see #get(Object, int)\n+   */\n+  public static native short getShort(Object array, int index);\n+\n+  /**\n+   * Gets an element of an int array.\n+   *\n+   * @param array the array to access\n+   * @param index the array index to access\n+   * @return the int element at <code>array[index]</code>\n+   * @throws IllegalArgumentException  if <code>array</code> is not a byte,\n+   *         char, short, or int array\n+   * @throws NullPointerException if <code>array</code> is null\n+   * @throws ArrayIndexOutOfBoundsException if <code>index</code> is out of\n+   *         bounds\n+   * @see #get(Object, int)\n+   */\n+  public static native int getInt(Object array, int index);\n+\n+  /**\n+   * Gets an element of a long array.\n+   *\n+   * @param array the array to access\n+   * @param index the array index to access\n+   * @return the long element at <code>array[index]</code>\n+   * @throws IllegalArgumentException  if <code>array</code> is not a byte,\n+   *         char, short, int, or long array\n+   * @throws NullPointerException if <code>array</code> is null\n+   * @throws ArrayIndexOutOfBoundsException if <code>index</code> is out of\n+   *         bounds\n+   * @see #get(Object, int)\n+   */\n+  public static native long getLong(Object array, int index);\n+\n+  /**\n+   * Gets an element of a float array.\n+   *\n+   * @param array the array to access\n+   * @param index the array index to access\n+   * @return the float element at <code>array[index]</code>\n+   * @throws IllegalArgumentException  if <code>array</code> is not a byte,\n+   *         char, short, int, long, or float array\n+   * @throws NullPointerException if <code>array</code> is null\n+   * @throws ArrayIndexOutOfBoundsException if <code>index</code> is out of\n+   *         bounds\n+   * @see #get(Object, int)\n+   */\n+  public static native float getFloat(Object array, int index);\n+\n+  /**\n+   * Gets an element of a double array.\n+   *\n+   * @param array the array to access\n+   * @param index the array index to access\n+   * @return the double element at <code>array[index]</code>\n+   * @throws IllegalArgumentException  if <code>array</code> is not a byte,\n+   *         char, short, int, long, float, or double array\n+   * @throws NullPointerException if <code>array</code> is null\n+   * @throws ArrayIndexOutOfBoundsException if <code>index</code> is out of\n+   *         bounds\n+   * @see #get(Object, int)\n+   */\n+  public static native double getDouble(Object array, int index);\n+\n+  private static native Class getElementType(Object array, int index);\n+\n+  private static native void set(Object array, int index,\n \t\t\t\t  Object value, Class elType);\n \n-  public static void set (Object array, int index, Object value)\n+  /**\n+   * Sets an element of an array. If the array is primitive, then the new\n+   * value is unwrapped and widened.\n+   *\n+   * @param array the array to set a value of\n+   * @param index the array index to set the value to\n+   * @param value the value to set\n+   * @throws IllegalArgumentException if <code>array</code> is not an array,\n+   *         or the array is primitive and unwrapping value fails, or the\n+   *         value is not assignable to the array component type\n+   * @throws NullPointerException if array is null, or if array is primitive\n+   *         and value is null\n+   * @throws ArrayIndexOutOfBoundsException if <code>index</code> is out of\n+   *         bounds\n+   * @see #setBoolean(Object, int, boolean)\n+   * @see #setByte(Object, int, byte)\n+   * @see #setChar(Object, int, char)\n+   * @see #setShort(Object, int, short)\n+   * @see #setInt(Object, int, int)\n+   * @see #setLong(Object, int, long)\n+   * @see #setFloat(Object, int, float)\n+   * @see #setDouble(Object, int, double)\n+   */\n+  public static void set(Object array, int index, Object value)\n   {\n     Class elType = getElementType(array, index);\n     if (! elType.isPrimitive())\n       set(array, index, value, elType);\n     else if (value instanceof Byte)\n       setByte(array, index, ((Byte) value).byteValue());\n     else if (value instanceof Short)\n-      setShort (array, index, ((Short) value).shortValue());\n+      setShort(array, index, ((Short) value).shortValue());\n     else if (value instanceof Integer)\n       setInt(array, index, ((Integer) value).intValue());\n     else if (value instanceof Long)\n@@ -67,12 +336,123 @@ else if (value instanceof Boolean)\n       throw new IllegalArgumentException();\n   }\n \n-  public static native void setByte   (Object array, int index, byte value);\n-  public static native void setShort  (Object array, int index, short value);\n-  public static native void setInt    (Object array, int index, int value);\n-  public static native void setLong   (Object array, int index, long value);\n-  public static native void setFloat  (Object array, int index, float value);\n-  public static native void setDouble (Object array, int index, double value);\n-  public static native void setChar   (Object array, int index, char value);\n+  /**\n+   * Sets an element of a boolean array.\n+   *\n+   * @param array the array to set a value of\n+   * @param index the array index to set the value to\n+   * @param value the value to set\n+   * @throws IllegalArgumentException if <code>array</code> is not a boolean\n+   *         array\n+   * @throws NullPointerException if <code>array</code> is null\n+   * @throws ArrayIndexOutOfBoundsException if <code>index</code> is out of\n+   *         bounds\n+   * @see #set(Object, int, Object)\n+   */\n   public static native void setBoolean(Object array, int index, boolean value);\n+\n+  /**\n+   * Sets an element of a byte array.\n+   *\n+   * @param array the array to set a value of\n+   * @param index the array index to set the value to\n+   * @param value the value to set\n+   * @throws IllegalArgumentException if <code>array</code> is not a byte,\n+   *         short, int, long, float, or double array\n+   * @throws NullPointerException if <code>array</code> is null\n+   * @throws ArrayIndexOutOfBoundsException if <code>index</code> is out of\n+   *         bounds\n+   * @see #set(Object, int, Object)\n+   */\n+  public static native void setByte(Object array, int index, byte value);\n+\n+  /**\n+   * Sets an element of a char array.\n+   *\n+   * @param array the array to set a value of\n+   * @param index the array index to set the value to\n+   * @param value the value to set\n+   * @throws IllegalArgumentException if <code>array</code> is not a char,\n+   *         int, long, float, or double array\n+   * @throws NullPointerException if <code>array</code> is null\n+   * @throws ArrayIndexOutOfBoundsException if <code>index</code> is out of\n+   *         bounds\n+   * @see #set(Object, int, Object)\n+   */\n+  public static native void setChar(Object array, int index, char value);\n+\n+  /**\n+   * Sets an element of a short array.\n+   *\n+   * @param array the array to set a value of\n+   * @param index the array index to set the value to\n+   * @param value the value to set\n+   * @throws IllegalArgumentException if <code>array</code> is not a short,\n+   *         int, long, float, or double array\n+   * @throws NullPointerException if <code>array</code> is null\n+   * @throws ArrayIndexOutOfBoundsException if <code>index</code> is out of\n+   *         bounds\n+   * @see #set(Object, int, Object)\n+   */\n+  public static native void setShort(Object array, int index, short value);\n+\n+  /**\n+   * Sets an element of an int array.\n+   *\n+   * @param array the array to set a value of\n+   * @param index the array index to set the value to\n+   * @param value the value to set\n+   * @throws IllegalArgumentException if <code>array</code> is not an int,\n+   *         long, float, or double array\n+   * @throws NullPointerException if <code>array</code> is null\n+   * @throws ArrayIndexOutOfBoundsException if <code>index</code> is out of\n+   *         bounds\n+   * @see #set(Object, int, Object)\n+   */\n+  public static native void setInt(Object array, int index, int value);\n+\n+  /**\n+   * Sets an element of a long array.\n+   *\n+   * @param array the array to set a value of\n+   * @param index the array index to set the value to\n+   * @param value the value to set\n+   * @throws IllegalArgumentException if <code>array</code> is not a long,\n+   *         float, or double array\n+   * @throws NullPointerException if <code>array</code> is null\n+   * @throws ArrayIndexOutOfBoundsException if <code>index</code> is out of\n+   *         bounds\n+   * @see #set(Object, int, Object)\n+   */\n+  public static native void setLong(Object array, int index, long value);\n+\n+  /**\n+   * Sets an element of a float array.\n+   *\n+   * @param array the array to set a value of\n+   * @param index the array index to set the value to\n+   * @param value the value to set\n+   * @throws IllegalArgumentException if <code>array</code> is not a float\n+   *         or double array\n+   * @throws NullPointerException if <code>array</code> is null\n+   * @throws ArrayIndexOutOfBoundsException if <code>index</code> is out of\n+   *         bounds\n+   * @see #set(Object, int, Object)\n+   */\n+  public static native void setFloat(Object array, int index, float value);\n+\n+  /**\n+   * Sets an element of a double array.\n+   *\n+   * @param array the array to set a value of\n+   * @param index the array index to set the value to\n+   * @param value the value to set\n+   * @throws IllegalArgumentException if <code>array</code> is not a double\n+   *         array\n+   * @throws NullPointerException if <code>array</code> is null\n+   * @throws ArrayIndexOutOfBoundsException if <code>index</code> is out of\n+   *         bounds\n+   * @see #set(Object, int, Object)\n+   */\n+  public static native void setDouble(Object array, int index, double value);\n }"}]}