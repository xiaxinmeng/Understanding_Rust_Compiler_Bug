{"sha": "4cabb7984ddfaece71d1a0a2c92d19e479bf6b20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNhYmI3OTg0ZGRmYWVjZTcxZDFhMGEyYzkyZDE5ZTQ3OWJmNmIyMA==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1994-10-11T18:43:39Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1994-10-11T18:43:39Z"}, "message": "(type_unification): If not passing to a reference, strip cv-quals.\n\n (type_unification): If not passing to a reference, strip\n        cv-quals.  Also handle array->pointer conversion.\n\nFrom-SVN: r8255", "tree": {"sha": "ce0027d0b814e4c65f8869661ccaebfe5bb9588c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce0027d0b814e4c65f8869661ccaebfe5bb9588c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cabb7984ddfaece71d1a0a2c92d19e479bf6b20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cabb7984ddfaece71d1a0a2c92d19e479bf6b20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cabb7984ddfaece71d1a0a2c92d19e479bf6b20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cabb7984ddfaece71d1a0a2c92d19e479bf6b20/comments", "author": null, "committer": null, "parents": [{"sha": "a827d14969e17fb10508f6c7dfcc2c87e99ecc0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a827d14969e17fb10508f6c7dfcc2c87e99ecc0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a827d14969e17fb10508f6c7dfcc2c87e99ecc0d"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "0e6836d596d45dd27ba12b9215804a5b945870d4", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cabb7984ddfaece71d1a0a2c92d19e479bf6b20/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cabb7984ddfaece71d1a0a2c92d19e479bf6b20/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=4cabb7984ddfaece71d1a0a2c92d19e479bf6b20", "patch": "@@ -1251,6 +1251,8 @@ expr_or_declarator:\n \t\t{ $$ = build_parse_node (INDIRECT_REF, $2); }\n \t| '&' expr_or_declarator %prec UNARY\n \t\t{ $$ = build_parse_node (ADDR_EXPR, $2); }\n+\t| '(' expr_or_declarator ')'\n+\t\t{ $$ = $2; }\n \t;\n \n direct_notype_declarator:\n@@ -1259,6 +1261,8 @@ direct_notype_declarator:\n \t| notype_qualified_id\n \t\t{ push_nested_class (TREE_TYPE (OP0 ($$)), 3);\n \t\t  TREE_COMPLEXITY ($$) = current_class_depth; }\n+\t| '(' expr_or_declarator ')'\n+\t\t{ $$ = finish_decl_parsing ($2); }\n \t;\n \n primary:\n@@ -2831,8 +2835,6 @@ complex_direct_notype_declarator:\n \t\t{ $$ = build_parse_node (CALL_EXPR, $$, empty_parms (), $3); }\n \t| direct_notype_declarator '(' error ')' type_quals  %prec '.'\n \t\t{ $$ = build_parse_node (CALL_EXPR, $$, NULL_TREE, NULL_TREE); }\n-\t| '(' expr_or_declarator ')'\n-\t\t{ $$ = finish_decl_parsing ($2); }\n \t| '(' complex_notype_declarator ')'\n \t\t{ $$ = $2; }\n \t| direct_notype_declarator '[' nonmomentary_expr ']'"}, {"sha": "830a6b963ae39027b08a43854fbdfda006888a1d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cabb7984ddfaece71d1a0a2c92d19e479bf6b20/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cabb7984ddfaece71d1a0a2c92d19e479bf6b20/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4cabb7984ddfaece71d1a0a2c92d19e479bf6b20", "patch": "@@ -2008,9 +2008,16 @@ type_unification (tparms, targs, parms, args, nsubsts, subr)\n \t  arg = TREE_TYPE (arg);\n \t}\n #endif\n-      if (TREE_CODE (arg) == FUNCTION_TYPE\n-\t  || TREE_CODE (arg) == METHOD_TYPE)\n-\targ = build_pointer_type (arg);\n+      if (TREE_CODE (parm) != REFERENCE_TYPE)\n+\t{\n+\t  if (TREE_CODE (arg) == FUNCTION_TYPE\n+\t      || TREE_CODE (arg) == METHOD_TYPE)\n+\t    arg = build_pointer_type (arg);\n+\t  else if (TREE_CODE (arg) == ARRAY_TYPE)\n+\t    arg = build_pointer_type (TREE_TYPE (arg));\n+\t  else\n+\t    arg = TYPE_MAIN_VARIANT (arg);\n+\t}\n \n       switch (unify (tparms, targs, ntparms, parm, arg, nsubsts))\n \t{\n@@ -2428,6 +2435,7 @@ do_function_instantiation (declspecs, declarator, storage)\n       TREE_PUBLIC (result) = 1;\n       DECL_EXTERNAL (result) = (DECL_INLINE (result)\n \t\t\t\t&& ! flag_implement_inlines);\n+      TREE_STATIC (result) = ! DECL_EXTERNAL (result);\n     }\n   else if (storage == ridpointers[(int) RID_EXTERN])\n     ;\n@@ -2506,6 +2514,7 @@ do_type_instantiation (name, storage)\n \t    TREE_PUBLIC (tmp) = 1;\n \t    DECL_EXTERNAL (tmp) = (DECL_INLINE (tmp)\n \t\t\t\t   && ! flag_implement_inlines);\n+\t    TREE_STATIC (tmp) = ! DECL_EXTERNAL (tmp);\n \t  }\n       }\n "}]}