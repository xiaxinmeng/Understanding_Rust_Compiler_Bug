{"sha": "1a27722fa1d681f3e2267478db7829fbce70fc56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWEyNzcyMmZhMWQ2ODFmM2UyMjY3NDc4ZGI3ODI5ZmJjZTcwZmM1Ng==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2006-04-10T18:16:07Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2006-04-10T18:16:07Z"}, "message": "dwarf2out.c (struct dw_attr_struct): Remove dw_attr_next.\n\n\t* dwarf2out.c (struct dw_attr_struct): Remove dw_attr_next.\n\tDeclare VECs of this type.\n\t(struct die_struct): Make field die_attr a VEC of dw_attr_struct.\n\t(remove_children): Delete.\n\t(add_dwarf_attr): Use VEC routines.\n\t(add_AT_flag): Update for changes to add_dwarf_attr.\n\t(add_AT_int): Likewise.\n\t(add_AT_unsigned): Likewise.\n\t(add_AT_long_long): Likewise.\n\t(add_AT_vec): Likewise.\n\t(add_AT_string): Likewise.\n\t(add_AT_die_ref): Likewise.\n\t(add_AT_fde_ref): Likewise.\n\t(add_AT_loc): Likewise.\n\t(add_AT_loc_list): Likewise.\n\t(add_AT_addr): Likewise.\n\t(add_AT_lbl_id): Likewise.\n\t(add_AT_lineptr): Likewise.\n\t(add_AT_macptr): Likewise.\n\t(add_AT_offset): Likewise.\n\t(add_AT_range_list): Likewise.\n\t(get_AT): Use VEC_iterate.\n\t(remove_AT): Use VEC_ordered_remove.\n\t(free_die): Fold remove_children into here; have it use VEC_iterate.\n\t(print_die): Use VEC_iterate on attrs.\n\t(reverse_die_lists): Don't reverse attr lists.\n\t(die_checksum): Use VEC_iterate on attrs.\n\t(same_die_p): Likewise.\n\t(output_location_lists): Likewise.\n\t(build_abbrev_table): Likewise.\n\t(size_of_die): Likewise.\n\t(unmark_all_dies): Likewise.\n\t(output_abbrev_section): Likewise.\n\t(output_die): Likewise.\n\t(prune_unused_types_walk_attribs): Likewise.\n\nFrom-SVN: r112829", "tree": {"sha": "8eb3fd7e8ec8466e24bddd345a50f519b027d16c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8eb3fd7e8ec8466e24bddd345a50f519b027d16c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a27722fa1d681f3e2267478db7829fbce70fc56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a27722fa1d681f3e2267478db7829fbce70fc56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a27722fa1d681f3e2267478db7829fbce70fc56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a27722fa1d681f3e2267478db7829fbce70fc56/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e92857a103ce0e0aa100d8509deffba228f4fe17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e92857a103ce0e0aa100d8509deffba228f4fe17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e92857a103ce0e0aa100d8509deffba228f4fe17"}], "stats": {"total": 428, "additions": 223, "deletions": 205}, "files": [{"sha": "0acc7c980337d27234a9f68e35f7cb15f3b83783", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a27722fa1d681f3e2267478db7829fbce70fc56/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a27722fa1d681f3e2267478db7829fbce70fc56/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a27722fa1d681f3e2267478db7829fbce70fc56", "patch": "@@ -1,3 +1,41 @@\n+2006-04-10  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* dwarf2out.c (struct dw_attr_struct): Remove dw_attr_next.\n+\tDeclare VECs of this type.\n+\t(struct die_struct): Make field die_attr a VEC of dw_attr_struct.\n+\t(remove_children): Delete.\n+\t(add_dwarf_attr): Use VEC routines.\n+\t(add_AT_flag): Update for changes to add_dwarf_attr.\n+\t(add_AT_int): Likewise.\n+\t(add_AT_unsigned): Likewise.\n+\t(add_AT_long_long): Likewise.\n+\t(add_AT_vec): Likewise.\n+\t(add_AT_string): Likewise.\n+\t(add_AT_die_ref): Likewise.\n+\t(add_AT_fde_ref): Likewise.\n+\t(add_AT_loc): Likewise.\n+\t(add_AT_loc_list): Likewise.\n+\t(add_AT_addr): Likewise.\n+\t(add_AT_lbl_id): Likewise.\n+\t(add_AT_lineptr): Likewise.\n+\t(add_AT_macptr): Likewise.\n+\t(add_AT_offset): Likewise.\n+\t(add_AT_range_list): Likewise.\n+\t(get_AT): Use VEC_iterate.\n+\t(remove_AT): Use VEC_ordered_remove.\n+\t(free_die): Fold remove_children into here; have it use VEC_iterate.\n+\t(print_die): Use VEC_iterate on attrs.\n+\t(reverse_die_lists): Don't reverse attr lists.\n+\t(die_checksum): Use VEC_iterate on attrs.\n+\t(same_die_p): Likewise.\n+\t(output_location_lists): Likewise.\n+\t(build_abbrev_table): Likewise.\n+\t(size_of_die): Likewise.\n+\t(unmark_all_dies): Likewise.\n+\t(output_abbrev_section): Likewise.\n+\t(output_die): Likewise.\n+\t(prune_unused_types_walk_attribs): Likewise.\n+\n 2006-04-10  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* doc/install.texi (*-*-solaris2*): Point to the configure page."}, {"sha": "3a02acf725e95c1660eeca6a25373855fe14bf74", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 185, "deletions": 205, "changes": 390, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a27722fa1d681f3e2267478db7829fbce70fc56/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a27722fa1d681f3e2267478db7829fbce70fc56/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=1a27722fa1d681f3e2267478db7829fbce70fc56", "patch": "@@ -3676,18 +3676,20 @@ dw_separate_line_info_entry;\n typedef struct dw_attr_struct GTY(())\n {\n   enum dwarf_attribute dw_attr;\n-  dw_attr_ref dw_attr_next;\n   dw_val_node dw_attr_val;\n }\n dw_attr_node;\n \n+DEF_VEC_O(dw_attr_node);\n+DEF_VEC_ALLOC_O(dw_attr_node,gc);\n+\n /* The Debugging Information Entry (DIE) structure */\n \n typedef struct die_struct GTY(())\n {\n   enum dwarf_tag die_tag;\n   char *die_symbol;\n-  dw_attr_ref die_attr;\n+  VEC(dw_attr_node,gc) * die_attr;\n   dw_die_ref die_parent;\n   dw_die_ref die_child;\n   dw_die_ref die_sib;\n@@ -4019,7 +4021,6 @@ static bool is_ada (void);\n static void remove_AT (dw_die_ref, enum dwarf_attribute);\n static void remove_child_TAG (dw_die_ref, enum dwarf_tag);\n static inline void free_die (dw_die_ref);\n-static void remove_children (dw_die_ref);\n static void add_child_die (dw_die_ref, dw_die_ref);\n static dw_die_ref new_die (enum dwarf_tag, dw_die_ref, tree);\n static dw_die_ref lookup_type_die (tree);\n@@ -4837,11 +4838,13 @@ decl_class_context (tree decl)\n static inline void\n add_dwarf_attr (dw_die_ref die, dw_attr_ref attr)\n {\n-  if (die != NULL && attr != NULL)\n-    {\n-      attr->dw_attr_next = die->die_attr;\n-      die->die_attr = attr;\n-    }\n+  /* Maybe this should be an assert?  */\n+  if (die == NULL)\n+    return;\n+  \n+  if (die->die_attr == NULL)\n+    die->die_attr = VEC_alloc (dw_attr_node, gc, 1);\n+  VEC_safe_push (dw_attr_node, gc, die->die_attr, attr);\n }\n \n static inline enum dw_val_class\n@@ -4855,13 +4858,12 @@ AT_class (dw_attr_ref a)\n static inline void\n add_AT_flag (dw_die_ref die, enum dwarf_attribute attr_kind, unsigned int flag)\n {\n-  dw_attr_ref attr = ggc_alloc (sizeof (dw_attr_node));\n+  dw_attr_node attr;\n \n-  attr->dw_attr_next = NULL;\n-  attr->dw_attr = attr_kind;\n-  attr->dw_attr_val.val_class = dw_val_class_flag;\n-  attr->dw_attr_val.v.val_flag = flag;\n-  add_dwarf_attr (die, attr);\n+  attr.dw_attr = attr_kind;\n+  attr.dw_attr_val.val_class = dw_val_class_flag;\n+  attr.dw_attr_val.v.val_flag = flag;\n+  add_dwarf_attr (die, &attr);\n }\n \n static inline unsigned\n@@ -4876,13 +4878,12 @@ AT_flag (dw_attr_ref a)\n static inline void\n add_AT_int (dw_die_ref die, enum dwarf_attribute attr_kind, HOST_WIDE_INT int_val)\n {\n-  dw_attr_ref attr = ggc_alloc (sizeof (dw_attr_node));\n+  dw_attr_node attr;\n \n-  attr->dw_attr_next = NULL;\n-  attr->dw_attr = attr_kind;\n-  attr->dw_attr_val.val_class = dw_val_class_const;\n-  attr->dw_attr_val.v.val_int = int_val;\n-  add_dwarf_attr (die, attr);\n+  attr.dw_attr = attr_kind;\n+  attr.dw_attr_val.val_class = dw_val_class_const;\n+  attr.dw_attr_val.v.val_int = int_val;\n+  add_dwarf_attr (die, &attr);\n }\n \n static inline HOST_WIDE_INT\n@@ -4898,13 +4899,12 @@ static inline void\n add_AT_unsigned (dw_die_ref die, enum dwarf_attribute attr_kind,\n \t\t unsigned HOST_WIDE_INT unsigned_val)\n {\n-  dw_attr_ref attr = ggc_alloc (sizeof (dw_attr_node));\n+  dw_attr_node attr;\n \n-  attr->dw_attr_next = NULL;\n-  attr->dw_attr = attr_kind;\n-  attr->dw_attr_val.val_class = dw_val_class_unsigned_const;\n-  attr->dw_attr_val.v.val_unsigned = unsigned_val;\n-  add_dwarf_attr (die, attr);\n+  attr.dw_attr = attr_kind;\n+  attr.dw_attr_val.val_class = dw_val_class_unsigned_const;\n+  attr.dw_attr_val.v.val_unsigned = unsigned_val;\n+  add_dwarf_attr (die, &attr);\n }\n \n static inline unsigned HOST_WIDE_INT\n@@ -4920,14 +4920,13 @@ static inline void\n add_AT_long_long (dw_die_ref die, enum dwarf_attribute attr_kind,\n \t\t  long unsigned int val_hi, long unsigned int val_low)\n {\n-  dw_attr_ref attr = ggc_alloc (sizeof (dw_attr_node));\n+  dw_attr_node attr;\n \n-  attr->dw_attr_next = NULL;\n-  attr->dw_attr = attr_kind;\n-  attr->dw_attr_val.val_class = dw_val_class_long_long;\n-  attr->dw_attr_val.v.val_long_long.hi = val_hi;\n-  attr->dw_attr_val.v.val_long_long.low = val_low;\n-  add_dwarf_attr (die, attr);\n+  attr.dw_attr = attr_kind;\n+  attr.dw_attr_val.val_class = dw_val_class_long_long;\n+  attr.dw_attr_val.v.val_long_long.hi = val_hi;\n+  attr.dw_attr_val.v.val_long_long.low = val_low;\n+  add_dwarf_attr (die, &attr);\n }\n \n /* Add a floating point attribute value to a DIE and return it.  */\n@@ -4936,15 +4935,14 @@ static inline void\n add_AT_vec (dw_die_ref die, enum dwarf_attribute attr_kind,\n \t    unsigned int length, unsigned int elt_size, unsigned char *array)\n {\n-  dw_attr_ref attr = ggc_alloc (sizeof (dw_attr_node));\n+  dw_attr_node attr;\n \n-  attr->dw_attr_next = NULL;\n-  attr->dw_attr = attr_kind;\n-  attr->dw_attr_val.val_class = dw_val_class_vec;\n-  attr->dw_attr_val.v.val_vec.length = length;\n-  attr->dw_attr_val.v.val_vec.elt_size = elt_size;\n-  attr->dw_attr_val.v.val_vec.array = array;\n-  add_dwarf_attr (die, attr);\n+  attr.dw_attr = attr_kind;\n+  attr.dw_attr_val.val_class = dw_val_class_vec;\n+  attr.dw_attr_val.v.val_vec.length = length;\n+  attr.dw_attr_val.v.val_vec.elt_size = elt_size;\n+  attr.dw_attr_val.v.val_vec.array = array;\n+  add_dwarf_attr (die, &attr);\n }\n \n /* Hash and equality functions for debug_str_hash.  */\n@@ -4967,7 +4965,7 @@ debug_str_eq (const void *x1, const void *x2)\n static inline void\n add_AT_string (dw_die_ref die, enum dwarf_attribute attr_kind, const char *str)\n {\n-  dw_attr_ref attr = ggc_alloc (sizeof (dw_attr_node));\n+  dw_attr_node attr;\n   struct indirect_string_node *node;\n   void **slot;\n \n@@ -4983,11 +4981,10 @@ add_AT_string (dw_die_ref die, enum dwarf_attribute attr_kind, const char *str)\n   node->str = ggc_strdup (str);\n   node->refcount++;\n \n-  attr->dw_attr_next = NULL;\n-  attr->dw_attr = attr_kind;\n-  attr->dw_attr_val.val_class = dw_val_class_str;\n-  attr->dw_attr_val.v.val_str = node;\n-  add_dwarf_attr (die, attr);\n+  attr.dw_attr = attr_kind;\n+  attr.dw_attr_val.val_class = dw_val_class_str;\n+  attr.dw_attr_val.v.val_str = node;\n+  add_dwarf_attr (die, &attr);\n }\n \n static inline const char *\n@@ -5039,14 +5036,13 @@ AT_string_form (dw_attr_ref a)\n static inline void\n add_AT_die_ref (dw_die_ref die, enum dwarf_attribute attr_kind, dw_die_ref targ_die)\n {\n-  dw_attr_ref attr = ggc_alloc (sizeof (dw_attr_node));\n+  dw_attr_node attr;\n \n-  attr->dw_attr_next = NULL;\n-  attr->dw_attr = attr_kind;\n-  attr->dw_attr_val.val_class = dw_val_class_die_ref;\n-  attr->dw_attr_val.v.val_die_ref.die = targ_die;\n-  attr->dw_attr_val.v.val_die_ref.external = 0;\n-  add_dwarf_attr (die, attr);\n+  attr.dw_attr = attr_kind;\n+  attr.dw_attr_val.val_class = dw_val_class_die_ref;\n+  attr.dw_attr_val.v.val_die_ref.die = targ_die;\n+  attr.dw_attr_val.v.val_die_ref.external = 0;\n+  add_dwarf_attr (die, &attr);\n }\n \n /* Add an AT_specification attribute to a DIE, and also make the back\n@@ -5088,27 +5084,25 @@ set_AT_ref_external (dw_attr_ref a, int i)\n static inline void\n add_AT_fde_ref (dw_die_ref die, enum dwarf_attribute attr_kind, unsigned int targ_fde)\n {\n-  dw_attr_ref attr = ggc_alloc (sizeof (dw_attr_node));\n+  dw_attr_node attr;\n \n-  attr->dw_attr_next = NULL;\n-  attr->dw_attr = attr_kind;\n-  attr->dw_attr_val.val_class = dw_val_class_fde_ref;\n-  attr->dw_attr_val.v.val_fde_index = targ_fde;\n-  add_dwarf_attr (die, attr);\n+  attr.dw_attr = attr_kind;\n+  attr.dw_attr_val.val_class = dw_val_class_fde_ref;\n+  attr.dw_attr_val.v.val_fde_index = targ_fde;\n+  add_dwarf_attr (die, &attr);\n }\n \n /* Add a location description attribute value to a DIE.  */\n \n static inline void\n add_AT_loc (dw_die_ref die, enum dwarf_attribute attr_kind, dw_loc_descr_ref loc)\n {\n-  dw_attr_ref attr = ggc_alloc (sizeof (dw_attr_node));\n+  dw_attr_node attr;\n \n-  attr->dw_attr_next = NULL;\n-  attr->dw_attr = attr_kind;\n-  attr->dw_attr_val.val_class = dw_val_class_loc;\n-  attr->dw_attr_val.v.val_loc = loc;\n-  add_dwarf_attr (die, attr);\n+  attr.dw_attr = attr_kind;\n+  attr.dw_attr_val.val_class = dw_val_class_loc;\n+  attr.dw_attr_val.v.val_loc = loc;\n+  add_dwarf_attr (die, &attr);\n }\n \n static inline dw_loc_descr_ref\n@@ -5121,13 +5115,12 @@ AT_loc (dw_attr_ref a)\n static inline void\n add_AT_loc_list (dw_die_ref die, enum dwarf_attribute attr_kind, dw_loc_list_ref loc_list)\n {\n-  dw_attr_ref attr = ggc_alloc (sizeof (dw_attr_node));\n+  dw_attr_node attr;\n \n-  attr->dw_attr_next = NULL;\n-  attr->dw_attr = attr_kind;\n-  attr->dw_attr_val.val_class = dw_val_class_loc_list;\n-  attr->dw_attr_val.v.val_loc_list = loc_list;\n-  add_dwarf_attr (die, attr);\n+  attr.dw_attr = attr_kind;\n+  attr.dw_attr_val.val_class = dw_val_class_loc_list;\n+  attr.dw_attr_val.v.val_loc_list = loc_list;\n+  add_dwarf_attr (die, &attr);\n   have_location_lists = true;\n }\n \n@@ -5143,13 +5136,12 @@ AT_loc_list (dw_attr_ref a)\n static inline void\n add_AT_addr (dw_die_ref die, enum dwarf_attribute attr_kind, rtx addr)\n {\n-  dw_attr_ref attr = ggc_alloc (sizeof (dw_attr_node));\n+  dw_attr_node attr;\n \n-  attr->dw_attr_next = NULL;\n-  attr->dw_attr = attr_kind;\n-  attr->dw_attr_val.val_class = dw_val_class_addr;\n-  attr->dw_attr_val.v.val_addr = addr;\n-  add_dwarf_attr (die, attr);\n+  attr.dw_attr = attr_kind;\n+  attr.dw_attr_val.val_class = dw_val_class_addr;\n+  attr.dw_attr_val.v.val_addr = addr;\n+  add_dwarf_attr (die, &attr);\n }\n \n static inline rtx\n@@ -5164,13 +5156,12 @@ AT_addr (dw_attr_ref a)\n static inline void\n add_AT_lbl_id (dw_die_ref die, enum dwarf_attribute attr_kind, const char *lbl_id)\n {\n-  dw_attr_ref attr = ggc_alloc (sizeof (dw_attr_node));\n+  dw_attr_node attr;\n \n-  attr->dw_attr_next = NULL;\n-  attr->dw_attr = attr_kind;\n-  attr->dw_attr_val.val_class = dw_val_class_lbl_id;\n-  attr->dw_attr_val.v.val_lbl_id = xstrdup (lbl_id);\n-  add_dwarf_attr (die, attr);\n+  attr.dw_attr = attr_kind;\n+  attr.dw_attr_val.val_class = dw_val_class_lbl_id;\n+  attr.dw_attr_val.v.val_lbl_id = xstrdup (lbl_id);\n+  add_dwarf_attr (die, &attr);\n }\n \n /* Add a section offset attribute value to a DIE, an offset into the\n@@ -5180,13 +5171,12 @@ static inline void\n add_AT_lineptr (dw_die_ref die, enum dwarf_attribute attr_kind,\n \t\tconst char *label)\n {\n-  dw_attr_ref attr = ggc_alloc (sizeof (dw_attr_node));\n+  dw_attr_node attr;\n \n-  attr->dw_attr_next = NULL;\n-  attr->dw_attr = attr_kind;\n-  attr->dw_attr_val.val_class = dw_val_class_lineptr;\n-  attr->dw_attr_val.v.val_lbl_id = xstrdup (label);\n-  add_dwarf_attr (die, attr);\n+  attr.dw_attr = attr_kind;\n+  attr.dw_attr_val.val_class = dw_val_class_lineptr;\n+  attr.dw_attr_val.v.val_lbl_id = xstrdup (label);\n+  add_dwarf_attr (die, &attr);\n }\n \n /* Add a section offset attribute value to a DIE, an offset into the\n@@ -5196,13 +5186,12 @@ static inline void\n add_AT_macptr (dw_die_ref die, enum dwarf_attribute attr_kind,\n \t       const char *label)\n {\n-  dw_attr_ref attr = ggc_alloc (sizeof (dw_attr_node));\n+  dw_attr_node attr;\n \n-  attr->dw_attr_next = NULL;\n-  attr->dw_attr = attr_kind;\n-  attr->dw_attr_val.val_class = dw_val_class_macptr;\n-  attr->dw_attr_val.v.val_lbl_id = xstrdup (label);\n-  add_dwarf_attr (die, attr);\n+  attr.dw_attr = attr_kind;\n+  attr.dw_attr_val.val_class = dw_val_class_macptr;\n+  attr.dw_attr_val.v.val_lbl_id = xstrdup (label);\n+  add_dwarf_attr (die, &attr);\n }\n \n /* Add an offset attribute value to a DIE.  */\n@@ -5211,13 +5200,12 @@ static inline void\n add_AT_offset (dw_die_ref die, enum dwarf_attribute attr_kind,\n \t       unsigned HOST_WIDE_INT offset)\n {\n-  dw_attr_ref attr = ggc_alloc (sizeof (dw_attr_node));\n+  dw_attr_node attr;\n \n-  attr->dw_attr_next = NULL;\n-  attr->dw_attr = attr_kind;\n-  attr->dw_attr_val.val_class = dw_val_class_offset;\n-  attr->dw_attr_val.v.val_offset = offset;\n-  add_dwarf_attr (die, attr);\n+  attr.dw_attr = attr_kind;\n+  attr.dw_attr_val.val_class = dw_val_class_offset;\n+  attr.dw_attr_val.v.val_offset = offset;\n+  add_dwarf_attr (die, &attr);\n }\n \n /* Add an range_list attribute value to a DIE.  */\n@@ -5226,13 +5214,12 @@ static void\n add_AT_range_list (dw_die_ref die, enum dwarf_attribute attr_kind,\n \t\t   long unsigned int offset)\n {\n-  dw_attr_ref attr = ggc_alloc (sizeof (dw_attr_node));\n+  dw_attr_node attr;\n \n-  attr->dw_attr_next = NULL;\n-  attr->dw_attr = attr_kind;\n-  attr->dw_attr_val.val_class = dw_val_class_range_list;\n-  attr->dw_attr_val.v.val_offset = offset;\n-  add_dwarf_attr (die, attr);\n+  attr.dw_attr = attr_kind;\n+  attr.dw_attr_val.val_class = dw_val_class_range_list;\n+  attr.dw_attr_val.v.val_offset = offset;\n+  add_dwarf_attr (die, &attr);\n }\n \n static inline const char *\n@@ -5250,20 +5237,21 @@ static dw_attr_ref\n get_AT (dw_die_ref die, enum dwarf_attribute attr_kind)\n {\n   dw_attr_ref a;\n+  unsigned ix;\n   dw_die_ref spec = NULL;\n \n-  if (die != NULL)\n-    {\n-      for (a = die->die_attr; a != NULL; a = a->dw_attr_next)\n-\tif (a->dw_attr == attr_kind)\n-\t  return a;\n-\telse if (a->dw_attr == DW_AT_specification\n-\t\t || a->dw_attr == DW_AT_abstract_origin)\n-\t  spec = AT_ref (a);\n+  if (! die)\n+    return NULL;\n \n-      if (spec)\n-\treturn get_AT (spec, attr_kind);\n-    }\n+  for (ix = 0; VEC_iterate (dw_attr_node, die->die_attr, ix, a); ix++)\n+    if (a->dw_attr == attr_kind)\n+      return a;\n+    else if (a->dw_attr == DW_AT_specification\n+\t     || a->dw_attr == DW_AT_abstract_origin)\n+      spec = AT_ref (a);\n+  \n+  if (spec)\n+    return get_AT (spec, attr_kind);\n \n   return NULL;\n }\n@@ -5403,22 +5391,21 @@ free_AT (dw_attr_ref a)\n static void\n remove_AT (dw_die_ref die, enum dwarf_attribute attr_kind)\n {\n-  dw_attr_ref *p;\n-  dw_attr_ref removed = NULL;\n+  dw_attr_ref a;\n+  unsigned ix;\n \n-  if (die != NULL)\n-    {\n-      for (p = &(die->die_attr); *p; p = &((*p)->dw_attr_next))\n-\tif ((*p)->dw_attr == attr_kind)\n-\t  {\n-\t    removed = *p;\n-\t    *p = (*p)->dw_attr_next;\n-\t    break;\n-\t  }\n+  if (! die)\n+    return;\n \n-      if (removed != 0)\n-\tfree_AT (removed);\n-    }\n+  for (ix = 0; VEC_iterate (dw_attr_node, die->die_attr, ix, a); ix++)\n+    if (a->dw_attr == attr_kind)\n+      {\n+\tfree_AT (a);\n+\t/* VEC_ordered_remove should help reduce the number of abbrevs\n+\t   that are needed.  */\n+\tVEC_ordered_remove (dw_attr_node, die->die_attr, ix);\n+\treturn;\n+      }\n }\n \n /* Remove child die whose die_tag is specified tag.  */\n@@ -5449,18 +5436,13 @@ remove_child_TAG (dw_die_ref die, enum dwarf_tag tag)\n     }\n }\n \n-/* Free up the memory used by DIE.  */\n-\n-static inline void\n-free_die (dw_die_ref die)\n-{\n-  remove_children (die);\n-}\n-\n-/* Discard the children of this DIE.  */\n+/* Free up the memory used by DIE, by removing its children and\n+   anything associated with its attributes.  DIEs are garbage\n+   collected, so there is no actual freeing to do; the only real work is\n+   to decrease string reference counts.  */\n \n static void\n-remove_children (dw_die_ref die)\n+free_die (dw_die_ref die)\n {\n   dw_die_ref child_die = die->die_child;\n \n@@ -5470,16 +5452,12 @@ remove_children (dw_die_ref die)\n     {\n       dw_die_ref tmp_die = child_die;\n       dw_attr_ref a;\n+      unsigned ix;\n \n       child_die = child_die->die_sib;\n \n-      for (a = tmp_die->die_attr; a != NULL;)\n-\t{\n-\t  dw_attr_ref tmp_a = a;\n-\n-\t  a = a->dw_attr_next;\n-\t  free_AT (tmp_a);\n-\t}\n+      for (ix = 0; VEC_iterate (dw_attr_node, tmp_die->die_attr, ix, a); ix++)\n+\tfree_AT (a);\n \n       free_die (tmp_die);\n     }\n@@ -5698,6 +5676,7 @@ print_die (dw_die_ref die, FILE *outfile)\n {\n   dw_attr_ref a;\n   dw_die_ref c;\n+  unsigned ix;\n \n   print_spaces (outfile);\n   fprintf (outfile, \"DIE %4lu: %s\\n\",\n@@ -5706,7 +5685,7 @@ print_die (dw_die_ref die, FILE *outfile)\n   fprintf (outfile, \"  abbrev id: %lu\", die->die_abbrev);\n   fprintf (outfile, \" offset: %lu\\n\", die->die_offset);\n \n-  for (a = die->die_attr; a != NULL; a = a->dw_attr_next)\n+  for (ix = 0; VEC_iterate (dw_attr_node, die->die_attr, ix, a); ix++)\n     {\n       print_spaces (outfile);\n       fprintf (outfile, \"  %s: \", dwarf_attr_name (a->dw_attr));\n@@ -5838,16 +5817,6 @@ static void\n reverse_die_lists (dw_die_ref die)\n {\n   dw_die_ref c, cp, cn;\n-  dw_attr_ref a, ap, an;\n-\n-  for (a = die->die_attr, ap = 0; a; a = an)\n-    {\n-      an = a->dw_attr_next;\n-      a->dw_attr_next = ap;\n-      ap = a;\n-    }\n-\n-  die->die_attr = ap;\n \n   for (c = die->die_child, cp = 0; c; c = cn)\n     {\n@@ -5989,6 +5958,7 @@ die_checksum (dw_die_ref die, struct md5_ctx *ctx, int *mark)\n {\n   dw_die_ref c;\n   dw_attr_ref a;\n+  unsigned ix;\n \n   /* To avoid infinite recursion.  */\n   if (die->die_mark)\n@@ -6000,7 +5970,7 @@ die_checksum (dw_die_ref die, struct md5_ctx *ctx, int *mark)\n \n   CHECKSUM (die->die_tag);\n \n-  for (a = die->die_attr; a; a = a->dw_attr_next)\n+  for (ix = 0; VEC_iterate (dw_attr_node, die->die_attr, ix, a); ix++)\n     attr_checksum (a, ctx, mark);\n \n   for (c = die->die_child; c; c = c->die_sib)\n@@ -6108,7 +6078,8 @@ static int\n same_die_p (dw_die_ref die1, dw_die_ref die2, int *mark)\n {\n   dw_die_ref c1, c2;\n-  dw_attr_ref a1, a2;\n+  dw_attr_ref a1;\n+  unsigned ix;\n \n   /* To avoid infinite recursion.  */\n   if (die1->die_mark)\n@@ -6118,13 +6089,13 @@ same_die_p (dw_die_ref die1, dw_die_ref die2, int *mark)\n   if (die1->die_tag != die2->die_tag)\n     return 0;\n \n-  for (a1 = die1->die_attr, a2 = die2->die_attr;\n-       a1 && a2;\n-       a1 = a1->dw_attr_next, a2 = a2->dw_attr_next)\n-    if (!same_attr_p (a1, a2, mark))\n-      return 0;\n-  if (a1 || a2)\n+  if (VEC_length (dw_attr_node, die1->die_attr)\n+      != VEC_length (dw_attr_node, die2->die_attr))\n     return 0;\n+  \n+  for (ix = 0; VEC_iterate (dw_attr_node, die1->die_attr, ix, a1); ix++)\n+    if (!same_attr_p (a1, VEC_index (dw_attr_node, die2->die_attr, ix), mark))\n+      return 0;\n \n   for (c1 = die1->die_child, c2 = die2->die_child;\n        c1 && c2;\n@@ -6486,11 +6457,12 @@ static void\n output_location_lists (dw_die_ref die)\n {\n   dw_die_ref c;\n-  dw_attr_ref d_attr;\n+  dw_attr_ref a;\n+  unsigned ix;\n \n-  for (d_attr = die->die_attr; d_attr; d_attr = d_attr->dw_attr_next)\n-    if (AT_class (d_attr) == dw_val_class_loc_list)\n-      output_loc_list (AT_loc_list (d_attr));\n+  for (ix = 0; VEC_iterate (dw_attr_node, die->die_attr, ix, a); ix++)\n+    if (AT_class (a) == dw_val_class_loc_list)\n+      output_loc_list (AT_loc_list (a));\n \n   for (c = die->die_child; c != NULL; c = c->die_sib)\n     output_location_lists (c);\n@@ -6508,44 +6480,48 @@ build_abbrev_table (dw_die_ref die)\n   unsigned long abbrev_id;\n   unsigned int n_alloc;\n   dw_die_ref c;\n-  dw_attr_ref d_attr, a_attr;\n+  dw_attr_ref a;\n+  unsigned ix;\n \n   /* Scan the DIE references, and mark as external any that refer to\n      DIEs from other CUs (i.e. those which are not marked).  */\n-  for (d_attr = die->die_attr; d_attr; d_attr = d_attr->dw_attr_next)\n-    if (AT_class (d_attr) == dw_val_class_die_ref\n-\t&& AT_ref (d_attr)->die_mark == 0)\n+  for (ix = 0; VEC_iterate (dw_attr_node, die->die_attr, ix, a); ix++)\n+    if (AT_class (a) == dw_val_class_die_ref\n+\t&& AT_ref (a)->die_mark == 0)\n       {\n-\tgcc_assert (AT_ref (d_attr)->die_symbol);\n+\tgcc_assert (AT_ref (a)->die_symbol);\n \n-\tset_AT_ref_external (d_attr, 1);\n+\tset_AT_ref_external (a, 1);\n       }\n \n   for (abbrev_id = 1; abbrev_id < abbrev_die_table_in_use; ++abbrev_id)\n     {\n       dw_die_ref abbrev = abbrev_die_table[abbrev_id];\n-\n-      if (abbrev->die_tag == die->die_tag)\n+      dw_attr_ref die_a, abbrev_a;\n+      unsigned ix;\n+      bool ok = true;\n+      \n+      if (abbrev->die_tag != die->die_tag)\n+\tcontinue;\n+      if ((abbrev->die_child != NULL) != (die->die_child != NULL))\n+\tcontinue;\n+      \n+      if (VEC_length (dw_attr_node, abbrev->die_attr)\n+\t  != VEC_length (dw_attr_node, die->die_attr))\n+\tcontinue;\n+  \n+      for (ix = 0; VEC_iterate (dw_attr_node, die->die_attr, ix, die_a); ix++)\n \t{\n-\t  if ((abbrev->die_child != NULL) == (die->die_child != NULL))\n+\t  abbrev_a = VEC_index (dw_attr_node, abbrev->die_attr, ix);\n+\t  if ((abbrev_a->dw_attr != die_a->dw_attr)\n+\t      || (value_format (abbrev_a) != value_format (die_a)))\n \t    {\n-\t      a_attr = abbrev->die_attr;\n-\t      d_attr = die->die_attr;\n-\n-\t      while (a_attr != NULL && d_attr != NULL)\n-\t\t{\n-\t\t  if ((a_attr->dw_attr != d_attr->dw_attr)\n-\t\t      || (value_format (a_attr) != value_format (d_attr)))\n-\t\t    break;\n-\n-\t\t  a_attr = a_attr->dw_attr_next;\n-\t\t  d_attr = d_attr->dw_attr_next;\n-\t\t}\n-\n-\t      if (a_attr == NULL && d_attr == NULL)\n-\t\tbreak;\n+\t      ok = false;\n+\t      break;\n \t    }\n \t}\n+      if (ok)\n+\tbreak;\n     }\n \n   if (abbrev_id >= abbrev_die_table_in_use)\n@@ -6596,9 +6572,10 @@ size_of_die (dw_die_ref die)\n {\n   unsigned long size = 0;\n   dw_attr_ref a;\n+  unsigned ix;\n \n   size += size_of_uleb128 (die->die_abbrev);\n-  for (a = die->die_attr; a != NULL; a = a->dw_attr_next)\n+  for (ix = 0; VEC_iterate (dw_attr_node, die->die_attr, ix, a); ix++)\n     {\n       switch (AT_class (a))\n \t{\n@@ -6728,6 +6705,7 @@ unmark_all_dies (dw_die_ref die)\n {\n   dw_die_ref c;\n   dw_attr_ref a;\n+  unsigned ix;\n \n   if (!die->die_mark)\n     return;\n@@ -6736,7 +6714,7 @@ unmark_all_dies (dw_die_ref die)\n   for (c = die->die_child; c; c = c->die_sib)\n     unmark_all_dies (c);\n \n-  for (a = die->die_attr; a; a = a->dw_attr_next)\n+  for (ix = 0; VEC_iterate (dw_attr_node, die->die_attr, ix, a); ix++)\n     if (AT_class (a) == dw_val_class_die_ref)\n       unmark_all_dies (AT_ref (a));\n }\n@@ -6870,11 +6848,11 @@ output_abbrev_section (void)\n {\n   unsigned long abbrev_id;\n \n-  dw_attr_ref a_attr;\n-\n   for (abbrev_id = 1; abbrev_id < abbrev_die_table_in_use; ++abbrev_id)\n     {\n       dw_die_ref abbrev = abbrev_die_table[abbrev_id];\n+      unsigned ix;\n+      dw_attr_ref a_attr;\n \n       dw2_asm_output_data_uleb128 (abbrev_id, \"(abbrev code)\");\n       dw2_asm_output_data_uleb128 (abbrev->die_tag, \"(TAG: %s)\",\n@@ -6885,8 +6863,8 @@ output_abbrev_section (void)\n       else\n \tdw2_asm_output_data (1, DW_children_no, \"DW_children_no\");\n \n-      for (a_attr = abbrev->die_attr; a_attr != NULL;\n-\t   a_attr = a_attr->dw_attr_next)\n+      for (ix = 0; VEC_iterate (dw_attr_node, abbrev->die_attr, ix, a_attr);\n+\t   ix++)\n \t{\n \t  dw2_asm_output_data_uleb128 (a_attr->dw_attr, \"(%s)\",\n \t\t\t\t       dwarf_attr_name (a_attr->dw_attr));\n@@ -7030,6 +7008,7 @@ output_die (dw_die_ref die)\n   dw_attr_ref a;\n   dw_die_ref c;\n   unsigned long size;\n+  unsigned ix;\n \n   /* If someone in another CU might refer to us, set up a symbol for\n      them to point to.  */\n@@ -7039,7 +7018,7 @@ output_die (dw_die_ref die)\n   dw2_asm_output_data_uleb128 (die->die_abbrev, \"(DIE (0x%lx) %s)\",\n \t\t\t       die->die_offset, dwarf_tag_name (die->die_tag));\n \n-  for (a = die->die_attr; a != NULL; a = a->dw_attr_next)\n+  for (ix = 0; VEC_iterate (dw_attr_node, die->die_attr, ix, a); ix++)\n     {\n       const char *name = dwarf_attr_name (a->dw_attr);\n \n@@ -13888,8 +13867,9 @@ static void\n prune_unused_types_walk_attribs (dw_die_ref die)\n {\n   dw_attr_ref a;\n+  unsigned ix;\n \n-  for (a = die->die_attr; a != NULL; a = a->dw_attr_next)\n+  for (ix = 0; VEC_iterate (dw_attr_node, die->die_attr, ix, a); ix++)\n     {\n       if (a->dw_attr_val.val_class == dw_val_class_die_ref)\n \t{"}]}