{"sha": "7e1813b56d8e4bc0f2c0cf3174ed1b07c34c0bee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UxODEzYjU2ZDhlNGJjMGYyYzBjZjMxNzRlZDFiMDdjMzRjMGJlZQ==", "commit": {"author": {"name": "Marc Poulhi\u00e8s", "email": "dkm@kataplop.net", "date": "2021-08-06T11:13:46Z"}, "committer": {"name": "Marc", "email": "dkm@kataplop.net", "date": "2021-08-10T20:12:29Z"}, "message": "Rename CanonicalPath::is_error to is_empty\n\n`is_error` connotes that an error has been found or that the object is faulty.\nIt is possible to `create_empty` paths and pass them around. Having to use\n`is_error` to test for valid emptiness can be misleading.", "tree": {"sha": "f93778aa2162e759079be2a398fae8cfac91b367", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f93778aa2162e759079be2a398fae8cfac91b367"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e1813b56d8e4bc0f2c0cf3174ed1b07c34c0bee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e1813b56d8e4bc0f2c0cf3174ed1b07c34c0bee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e1813b56d8e4bc0f2c0cf3174ed1b07c34c0bee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e1813b56d8e4bc0f2c0cf3174ed1b07c34c0bee/comments", "author": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e10f3d65566101c774a308f8286e2827455941ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e10f3d65566101c774a308f8286e2827455941ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e10f3d65566101c774a308f8286e2827455941ed"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "47cf5be673f58ed26a72eaf76812c2a7b00b8130", "filename": "gcc/rust/resolve/rust-ast-resolve-implitem.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1813b56d8e4bc0f2c0cf3174ed1b07c34c0bee/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1813b56d8e4bc0f2c0cf3174ed1b07c34c0bee/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h?ref=7e1813b56d8e4bc0f2c0cf3174ed1b07c34c0bee", "patch": "@@ -111,7 +111,7 @@ class ResolveToplevelImplItem : public ResolverBase\n   ResolveToplevelImplItem (const CanonicalPath &prefix)\n     : ResolverBase (UNKNOWN_NODEID), prefix (prefix)\n   {\n-    rust_assert (!prefix.is_error ());\n+    rust_assert (!prefix.is_empty ());\n   }\n \n   const CanonicalPath &prefix;"}, {"sha": "49f1332b097e37109a68afa9f339f95d29148fa5", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1813b56d8e4bc0f2c0cf3174ed1b07c34c0bee/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1813b56d8e4bc0f2c0cf3174ed1b07c34c0bee/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=7e1813b56d8e4bc0f2c0cf3174ed1b07c34c0bee", "patch": "@@ -193,15 +193,15 @@ class ResolveRelativeTypePath\n       = ResolveTypeToCanonicalPath::resolve (path,\n \t\t\t\t\t     canonicalize_type_with_generics,\n \t\t\t\t\t     true);\n-    if (canonical_path.is_error ())\n+    if (canonical_path.is_empty ())\n       {\n \trust_error_at (path.get_locus (),\n \t\t       \"Failed to resolve canonical path for TypePath\");\n \treturn UNKNOWN_NODEID;\n       }\n \n     CanonicalPath lookup = canonical_path;\n-    if (!prefix.is_error ())\n+    if (!prefix.is_empty ())\n       lookup = prefix.append (canonical_path);\n \n     auto resolver = Resolver::get ();"}, {"sha": "5f01b94e504da71460fe0f977120eff9ff2b3c18", "filename": "gcc/rust/resolve/rust-name-resolver.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1813b56d8e4bc0f2c0cf3174ed1b07c34c0bee/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1813b56d8e4bc0f2c0cf3174ed1b07c34c0bee/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.h?ref=7e1813b56d8e4bc0f2c0cf3174ed1b07c34c0bee", "patch": "@@ -80,12 +80,12 @@ class CanonicalPath\n \n   static CanonicalPath create_empty () { return CanonicalPath ({}); }\n \n-  bool is_error () const { return segs.size () == 0; }\n+  bool is_empty () const { return segs.size () == 0; }\n \n   CanonicalPath append (const CanonicalPath &other) const\n   {\n-    rust_assert (!other.is_error ());\n-    if (is_error ())\n+    rust_assert (!other.is_empty ());\n+    if (is_empty ())\n       return CanonicalPath (other.segs);\n \n     std::vector<std::pair<NodeId, std::string>> copy (segs);"}]}