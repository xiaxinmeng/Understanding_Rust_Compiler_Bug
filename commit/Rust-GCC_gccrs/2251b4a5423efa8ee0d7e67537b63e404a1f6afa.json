{"sha": "2251b4a5423efa8ee0d7e67537b63e404a1f6afa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI1MWI0YTU0MjNlZmE4ZWUwZDdlNjc1MzdiNjNlNDA0YTFmNmFmYQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-07-27T14:51:16Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-07-27T14:51:24Z"}, "message": "libstdc++: Make std::from_chars always round to nearest\n\nAlso fix the tests that fail on targets without uselocale.\n\nlibstdc++-v3/ChangeLog:\n\n\t* src/c++17/floating_from_chars.cc (from_chars_impl): Ensure\n\tthat FE_NEAREST is used.\n\t* testsuite/20_util/from_chars/4.cc: Do not use if constexpr in\n\ta { target c++14 } test.\n\t[!_GLIBCXX_HAVE_USELOCALE]: Disable all tests.\n\t* testsuite/20_util/from_chars/5.cc [!_GLIBCXX_HAVE_USELOCALE]:\n\tLikewise.\n\t* testsuite/20_util/from_chars/6.cc: New test.", "tree": {"sha": "c0b930292fc1a0859bd483df8c9895297557f615", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0b930292fc1a0859bd483df8c9895297557f615"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2251b4a5423efa8ee0d7e67537b63e404a1f6afa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2251b4a5423efa8ee0d7e67537b63e404a1f6afa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2251b4a5423efa8ee0d7e67537b63e404a1f6afa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2251b4a5423efa8ee0d7e67537b63e404a1f6afa/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7355a9408b990cdd20db91e2e1ba0b03e801d6a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7355a9408b990cdd20db91e2e1ba0b03e801d6a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7355a9408b990cdd20db91e2e1ba0b03e801d6a6"}], "stats": {"total": 76, "additions": 74, "deletions": 2}, "files": [{"sha": "f1519e5c7b6abc4390b541fd14a746d3e6078a45", "filename": "libstdc++-v3/src/c++17/floating_from_chars.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2251b4a5423efa8ee0d7e67537b63e404a1f6afa/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_from_chars.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2251b4a5423efa8ee0d7e67537b63e404a1f6afa/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_from_chars.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_from_chars.cc?ref=2251b4a5423efa8ee0d7e67537b63e404a1f6afa", "patch": "@@ -30,6 +30,7 @@\n #include <charconv>\n #include <string>\n #include <memory_resource>\n+#include <cfenv>\n #include <cmath>\n #include <cstdlib>\n #include <cstring>\n@@ -289,6 +290,12 @@ namespace\n       {\n \tlocale_t orig = ::uselocale(loc);\n \n+#if _GLIBCXX_USE_C99_FENV_TR1\n+\tconst int rounding = std::fegetround();\n+\tif (rounding != FE_TONEAREST)\n+\t  std::fesetround(FE_TONEAREST);\n+#endif\n+\n \tconst int save_errno = errno;\n \terrno = 0;\n \tchar* endptr;\n@@ -301,6 +308,11 @@ namespace\n \t  tmpval = std::strtold(str, &endptr);\n \tconst int conv_errno = std::__exchange(errno, save_errno);\n \n+#if _GLIBCXX_USE_C99_FENV_TR1\n+\tif (rounding != FE_TONEAREST)\n+\t  std::fesetround(rounding);\n+#endif\n+\n \t::uselocale(orig);\n \t::freelocale(loc);\n "}, {"sha": "e7127ed0c48b08d23f4a120be5e8c8fc93d1d89e", "filename": "libstdc++-v3/testsuite/20_util/from_chars/4.cc", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2251b4a5423efa8ee0d7e67537b63e404a1f6afa/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2251b4a5423efa8ee0d7e67537b63e404a1f6afa/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F4.cc?ref=2251b4a5423efa8ee0d7e67537b63e404a1f6afa", "patch": "@@ -27,6 +27,9 @@\n \n // Test std::from_chars floating-point conversions.\n \n+// As of July 2020 __cpp_lib_to_chars is not defined, but std::from_chars\n+// works for floating-point types when _GLIBCXX_HAVE_USELOCALE is defined.\n+#if __cpp_lib_to_chars >= 201611L || _GLIBCXX_HAVE_USELOCALE\n void\n test01()\n {\n@@ -296,8 +299,7 @@ test_max_mantissa()\n   using Float_limits = std::numeric_limits<FloatT>;\n   using UInt_limits = std::numeric_limits<UIntT>;\n \n-  if constexpr (Float_limits::is_iec559\n-\t\t&& Float_limits::digits < UInt_limits::digits)\n+  if (Float_limits::is_iec559 && Float_limits::digits < UInt_limits::digits)\n   {\n     std::printf(\"Testing %d-bit float, using %zu-bit integer\\n\",\n \tFloat_limits::digits + (int)std::log2(Float_limits::max_exponent) + 1,\n@@ -355,14 +357,17 @@ test06()\n   test_max_mantissa<long double, unsigned __GLIBCXX_TYPE_INT_N_0>();\n #endif\n }\n+#endif\n \n int\n main()\n {\n+#if __cpp_lib_to_chars >= 201611L || _GLIBCXX_HAVE_USELOCALE\n   test01();\n   test02();\n   test03();\n   test04();\n   test05();\n   test06();\n+#endif\n }"}, {"sha": "9525da8aebe333dab36387d6f71459e6c3d0c846", "filename": "libstdc++-v3/testsuite/20_util/from_chars/5.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2251b4a5423efa8ee0d7e67537b63e404a1f6afa/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2251b4a5423efa8ee0d7e67537b63e404a1f6afa/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F5.cc?ref=2251b4a5423efa8ee0d7e67537b63e404a1f6afa", "patch": "@@ -25,6 +25,9 @@\n \n // Test std::from_chars error handling.\n \n+// As of July 2020 __cpp_lib_to_chars is not defined, but std::from_chars\n+// works for floating-point types when _GLIBCXX_HAVE_USELOCALE is defined.\n+#if __cpp_lib_to_chars >= 201611L || _GLIBCXX_HAVE_USELOCALE\n void\n test01()\n {\n@@ -152,12 +155,15 @@ test04()\n     }\n   }\n }\n+#endif\n \n int\n main()\n {\n+#if __cpp_lib_to_chars >= 201611L || _GLIBCXX_HAVE_USELOCALE\n   test01();\n   test02();\n   test03();\n   test04();\n+#endif\n }"}, {"sha": "e592b2eb80639e573af10556716c9765928a75a1", "filename": "libstdc++-v3/testsuite/20_util/from_chars/6.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2251b4a5423efa8ee0d7e67537b63e404a1f6afa/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2251b4a5423efa8ee0d7e67537b63e404a1f6afa/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F6.cc?ref=2251b4a5423efa8ee0d7e67537b63e404a1f6afa", "patch": "@@ -0,0 +1,49 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// <charconv> is supported in C++14 as a GNU extension\n+// { dg-do run { target c++14 } }\n+// { dg-add-options ieee }\n+\n+#include <charconv>\n+#include <string>\n+#include <cfenv>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+#if __cpp_lib_to_chars >= 201611L || _GLIBCXX_HAVE_USELOCALE\n+#if _GLIBCXX_USE_C99_FENV_TR1\n+  double d;\n+  std::fesetround(FE_DOWNWARD);\n+  const std::string s = \"0.099999999999999999999999999\";\n+  auto res = std::from_chars(s.data(), s.data() + s.length(), d);\n+  VERIFY( res.ec == std::errc{} );\n+  VERIFY( res.ptr == s.data() + s.length() );\n+  // std::from_chars should ignore the current rounding mode\n+  // and always round to nearest.\n+  VERIFY( d == 0.1 );\n+#endif\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}