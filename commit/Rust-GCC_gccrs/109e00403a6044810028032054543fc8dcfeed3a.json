{"sha": "109e00403a6044810028032054543fc8dcfeed3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA5ZTAwNDAzYTYwNDQ4MTAwMjgwMzIwNTQ1NDNmYzhkY2ZlZWQzYQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-06-10T14:26:23Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-06-10T14:26:23Z"}, "message": "re PR c++/15227 (Trouble with invalid function definition)\n\n\tPR c++/15227\n\t* parser.c (cp_parser_direct_declarator): Robustify.\n\n\tPR c++/15877\n\t* pt.c (tsubst_copy): Use decl_constant_value on enumeration\n\tconstants in non-dependent contexts.\n\n\tPR c++/14211\n\tPR c++/15076\n\t* typeck.c (build_static_cast): Wrap casts in NON_LVALUE_EXPR when\n\tnecessary.\n\n\tPR c++/14211\n\t* g++.dg/conversion/const1.C: New test.\n\n\tPR c++/15076\n\t* g++.dg/conversion/reinterpret1.C: New test.\n\n\tPR c++/15877\n\t* g++.dg/template/enum2.C: New test.\n\n\tPR c++/15227\n\t* g++.dg/template/error13.C: New test.\n\nFrom-SVN: r82917", "tree": {"sha": "b0a15b965ae2b596d373e44dc59125e68f178fe4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0a15b965ae2b596d373e44dc59125e68f178fe4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/109e00403a6044810028032054543fc8dcfeed3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/109e00403a6044810028032054543fc8dcfeed3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/109e00403a6044810028032054543fc8dcfeed3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/109e00403a6044810028032054543fc8dcfeed3a/comments", "author": null, "committer": null, "parents": [{"sha": "9655d83b750bc6de0074b0501044d4bcb28679d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9655d83b750bc6de0074b0501044d4bcb28679d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9655d83b750bc6de0074b0501044d4bcb28679d9"}], "stats": {"total": 54, "additions": 50, "deletions": 4}, "files": [{"sha": "5f49e4ba24fc21fb0f141482cffeb35424649b8c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/109e00403a6044810028032054543fc8dcfeed3a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/109e00403a6044810028032054543fc8dcfeed3a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=109e00403a6044810028032054543fc8dcfeed3a", "patch": "@@ -1,3 +1,17 @@\n+2004-06-10  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/15227\n+\t* parser.c (cp_parser_direct_declarator): Robustify.\n+\n+\tPR c++/15877\n+\t* pt.c (tsubst_copy): Use decl_constant_value on enumeration\n+\tconstants in non-dependent contexts.\n+\n+\tPR c++/14211\n+\tPR c++/15076\n+\t* typeck.c (build_static_cast): Wrap casts in NON_LVALUE_EXPR when\n+\tnecessary.\n+\n 2004-06-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/14791"}, {"sha": "17242ba3457107eae5538b4b1b451bd20ba3b4bb", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/109e00403a6044810028032054543fc8dcfeed3a/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/109e00403a6044810028032054543fc8dcfeed3a/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=109e00403a6044810028032054543fc8dcfeed3a", "patch": "@@ -10726,8 +10726,10 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t\t  type = resolve_typename_type (scope,\n \t\t\t\t\t\t /*only_current_p=*/false);\n \t\t  /* If that failed, the declarator is invalid.  */\n-\t\t  if (type != error_mark_node)\n-\t\t    scope = type;\n+\t\t  if (type == error_mark_node)\n+\t\t    error (\"`%T::%D' is not a type\",\n+\t\t\t   TYPE_CONTEXT (scope),\n+\t\t\t   TYPE_IDENTIFIER (scope));\n \t\t  /* Build a new DECLARATOR.  */\n \t\t  declarator = build_nt (SCOPE_REF,\n \t\t\t\t\t scope,"}, {"sha": "fd75f78cd9a5c681cf48d6aa869445b23d553059", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/109e00403a6044810028032054543fc8dcfeed3a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/109e00403a6044810028032054543fc8dcfeed3a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=109e00403a6044810028032054543fc8dcfeed3a", "patch": "@@ -7421,7 +7421,7 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t  return t;\n \t/* If ARGS is NULL, then T is known to be non-dependent.  */\n \tif (args == NULL_TREE)\n-\t  return t;\n+\t  return decl_constant_value (t);\n \n \t/* Unfortunately, we cannot just call lookup_name here.\n \t   Consider:"}, {"sha": "bcdd316131ba4ae3231f1879eb788e8e4ae7dbef", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/109e00403a6044810028032054543fc8dcfeed3a/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/109e00403a6044810028032054543fc8dcfeed3a/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=109e00403a6044810028032054543fc8dcfeed3a", "patch": "@@ -4535,7 +4535,17 @@ build_static_cast (tree type, tree expr)\n      t.  */\n   result = perform_direct_initialization_if_possible (type, expr);\n   if (result)\n-    return convert_from_reference (result);\n+    {\n+      result = convert_from_reference (result);\n+      /* [expr.static.cast]\n+\n+         If T is a reference type, the result is an lvalue; otherwise,\n+\t the result is an rvalue.  */\n+      if (TREE_CODE (type) != REFERENCE_TYPE\n+\t  && real_lvalue_p (result))\n+\tresult = build1 (NON_LVALUE_EXPR, TREE_TYPE (result), result);\n+      return result;\n+    }\n   \n   /* [expr.static.cast]\n "}, {"sha": "5e43bc0639730b4ffec30010a01022b003d62792", "filename": "gcc/testsuite/g++.dg/conversion/const1.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/109e00403a6044810028032054543fc8dcfeed3a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fconst1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/109e00403a6044810028032054543fc8dcfeed3a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fconst1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fconst1.C?ref=109e00403a6044810028032054543fc8dcfeed3a", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/14211\n+\n+void f(char *str) {\n+  char *& m = const_cast<char *>(str); // { dg-error \"\" }\n+}"}, {"sha": "72ec7501219c8dcec3996c2eb4f0d65577305116", "filename": "gcc/testsuite/g++.dg/conversion/reinterpret1.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/109e00403a6044810028032054543fc8dcfeed3a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Freinterpret1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/109e00403a6044810028032054543fc8dcfeed3a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Freinterpret1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Freinterpret1.C?ref=109e00403a6044810028032054543fc8dcfeed3a", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/15076\n+\n+struct Y { Y(int &); }; // { dg-error \"\" }\n+\n+int v;\n+Y y1(reinterpret_cast<int>(v));  // { dg-error \"\" }"}, {"sha": "7a6c2072a757174f90709ff33e4d2be9003bd9e0", "filename": "gcc/testsuite/g++.dg/template/enum2.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/109e00403a6044810028032054543fc8dcfeed3a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fenum2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/109e00403a6044810028032054543fc8dcfeed3a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fenum2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fenum2.C?ref=109e00403a6044810028032054543fc8dcfeed3a", "patch": "@@ -0,0 +1,4 @@\n+// PR c++/15877\n+\n+template <int n> struct T1 { enum { N = 3 }; };\n+template <int n> struct T2 { enum { N = n, N1 = T1<N>::N }; }; "}, {"sha": "13d8794d785651b84e1f68f402e78fa87e21227b", "filename": "gcc/testsuite/g++.dg/template/error13.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/109e00403a6044810028032054543fc8dcfeed3a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/109e00403a6044810028032054543fc8dcfeed3a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror13.C?ref=109e00403a6044810028032054543fc8dcfeed3a", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/15227\n+\n+template<typename> struct A {};\n+\n+template<typename T> void A<T>::B::foo() {} // { dg-error \"\" }"}]}