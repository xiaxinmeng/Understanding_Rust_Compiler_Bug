{"sha": "e1cf192b12c2b025dc675a05e88e9eb38ae82731", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFjZjE5MmIxMmMyYjAyNWRjNjc1YTA1ZTg4ZTllYjM4YWU4MjczMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-01-22T09:25:58Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-01-22T09:25:58Z"}, "message": "extend.texi (scalar_storage_order type attribute): Document restriction on type punning and aliasing, and remove future tense.\n\n\t* doc/extend.texi (scalar_storage_order type attribute): Document\n\trestriction on type punning and aliasing, and remove future tense.\n\nFrom-SVN: r232718", "tree": {"sha": "7e549ed9c63deeffbd3904e8a4ada1054c668e4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e549ed9c63deeffbd3904e8a4ada1054c668e4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1cf192b12c2b025dc675a05e88e9eb38ae82731", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1cf192b12c2b025dc675a05e88e9eb38ae82731", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1cf192b12c2b025dc675a05e88e9eb38ae82731", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1cf192b12c2b025dc675a05e88e9eb38ae82731/comments", "author": null, "committer": null, "parents": [{"sha": "b57d3a5c29d369b510c30159ec148a6980c8d261", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b57d3a5c29d369b510c30159ec148a6980c8d261", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b57d3a5c29d369b510c30159ec148a6980c8d261"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "ac617a9a0445c81581955da12c5fccd692fac9d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1cf192b12c2b025dc675a05e88e9eb38ae82731/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1cf192b12c2b025dc675a05e88e9eb38ae82731/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1cf192b12c2b025dc675a05e88e9eb38ae82731", "patch": "@@ -1,3 +1,8 @@\n+2016-01-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/extend.texi (scalar_storage_order type attribute): Document\n+\trestriction on type punning and aliasing, and remove future tense.\n+\n 2016-01-21  Roman Zhuykov  <zhroma@ispras.ru>\n \n \tPR target/69252"}, {"sha": "7e079ff7285b8e23e314b2b1f251a819eacca6b0", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1cf192b12c2b025dc675a05e88e9eb38ae82731/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1cf192b12c2b025dc675a05e88e9eb38ae82731/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=e1cf192b12c2b025dc675a05e88e9eb38ae82731", "patch": "@@ -6496,22 +6496,26 @@ storage order with regard to the scalar storage order of the target:\n \n @itemize\n @item Taking the address of a scalar field of a @code{union} or a\n-@code{struct} with reverse scalar storage order is not permitted and will\n-yield an error.\n+@code{struct} with reverse scalar storage order is not permitted and yields\n+an error.\n @item Taking the address of an array field, whose component is scalar, of\n a @code{union} or a @code{struct} with reverse scalar storage order is\n-permitted but will yield a warning, unless @option{-Wno-scalar-storage-order}\n+permitted but yields a warning, unless @option{-Wno-scalar-storage-order}\n is specified.\n @item Taking the address of a @code{union} or a @code{struct} with reverse\n scalar storage order is permitted.\n @end itemize\n \n These restrictions exist because the storage order attribute is lost when\n-the address of a scalar or the address of an array with scalar component\n-is taken, so storing indirectly through this address will generally not work.\n+the address of a scalar or the address of an array with scalar component is\n+taken, so storing indirectly through this address generally does not work.\n The second case is nevertheless allowed to be able to perform a block copy\n from or to the array.\n \n+Moreover, the use of type punning or aliasing to toggle the storage order\n+is not supported; that is to say, a given scalar object cannot be accessed\n+through distinct types that assign a different storage order to it.\n+\n @item transparent_union\n @cindex @code{transparent_union} type attribute\n "}]}