{"sha": "30235ede1a1a99f5a99c257c878a1aab6a41de5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAyMzVlZGUxYTFhOTlmNWE5OWMyNTdjODc4YTFhYWI2YTQxZGU1YQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2012-04-11T17:58:01Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2012-04-11T17:58:01Z"}, "message": "c99-const-expr-9.c (old_offsetof): Insert a cast to __UINTPTR_TYPE__.\n\n\t* gcc.dg/c99-const-expr-9.c (old_offsetof): Insert a cast to\n\t__UINTPTR_TYPE__.\n\t* gcc.c-torture/execute/pr15296.c (intptr_t): Likewise, with\n\t__INTPTR_TYPE__.\n\t* gcc.dg/pr14092-1.c (intptr_t): Likewise.\n\t* gcc.dg/tree-ssa/foldcast-1.c (ssize_t): Likewise.\n\t* gcc.dg/c90-const-expr-6.c (intptr_t): New typedef to replace ...\n\t(ptrdiff_t): ... this.  All uses changed.\n\t* gcc.dg/c99-const-expr-6.c (intptr_t, ptrdiff_t): Likewise.\n\t* gcc.dg/torture/pta-escape-1.c (foo): Change arg type to\n\t__INTPTR_TYPE__.\n\t(main): Cast argument to __INTPTR_TYPE__.\n\t* gcc.dg/20041106-1.c (main): Cast to __UINTPTR_TYPE__ rather than\n\tsize_t.\n\t* gcc.dg/mallign.c (main): Likewise.\n\t* gcc.dg/pr38700.c (foo): Likewise.\n\t* gcc.dg/long-long-cst1.c (t): Likewise.\n\t* gcc.dg/c99-const-expr-10.c (p, q, f, h, h2): Likewise.\n\t* gcc.dg/array-10.c (c0, c1, c2, c3, c4, c5): Likewise.\n\t* gcc.dg/pointer-arith-10.c (foo): Likewise.\n\t* gcc.dg/pr25682.c (d, foo): Likewise.\n\t* gcc.dg/format/cast-1.c (f): Likewise.\n\t* gcc.dg/c90-const-expr-10.c\n\t* gcc.dg/pr41551.c (uintptr_t): New typedef, replacing...\n\t(size_t): ...this.  All uses changed.\n\t* gcc.c-torture/execute/pr22098-1.c (uintptr_t): Likewise.\n\t* gcc.c-torture/execute/pr22098-2.c (uintptr_t): Likewise.\n\t* gcc.c-torture/execute/pr22098-3.c (uintptr_t): Likewise.\n\t* gcc.dg/pr34856.c (uintptr_t): Likewise.\n\t* gcc.dg/sequence-pt-1.c: Likewise.\n\t* gcc.dg/c90-const-expr-9.c (uintptr_t): Likewise.\n\t* gcc.dg/max-1.c (intptr_t): Likewise, replacing ssize_t.\n\t* gcc.dg/pr39074.c (intptr_t): Define using __INTPTR_TYPE__.\n\t* gcc.dg/pr30744-1.c (my_intptr_t): New typedef.  Replace all uses\n\tof ptrdiff_t with it.\n\t* gcc.dg/inline-23.c (my_intptr_t): Likewise.\n\t* gcc.dg/pr37561.c (p): Use __INTPTR_TYPE__.\n\t* gcc.dg/vla-11.c (foo11b): Use __UINTPTR_TYPE__.\n\nFrom-SVN: r186347", "tree": {"sha": "6e68adac3d56c4fd820fbc974be1f37b8ff7eb5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e68adac3d56c4fd820fbc974be1f37b8ff7eb5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30235ede1a1a99f5a99c257c878a1aab6a41de5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30235ede1a1a99f5a99c257c878a1aab6a41de5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30235ede1a1a99f5a99c257c878a1aab6a41de5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30235ede1a1a99f5a99c257c878a1aab6a41de5a/comments", "author": null, "committer": null, "parents": [{"sha": "6a091e8bd882c308cd7ad0a7feb1b14443b26fb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a091e8bd882c308cd7ad0a7feb1b14443b26fb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a091e8bd882c308cd7ad0a7feb1b14443b26fb8"}], "stats": {"total": 168, "additions": 106, "deletions": 62}, "files": [{"sha": "7a764f4caa39b6372111b26080e8e63b1e4b6fdf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=30235ede1a1a99f5a99c257c878a1aab6a41de5a", "patch": "@@ -1,3 +1,44 @@\n+2012-04-11  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* gcc.dg/c99-const-expr-9.c (old_offsetof): Insert a cast to\n+\t__UINTPTR_TYPE__.\n+\t* gcc.c-torture/execute/pr15296.c (intptr_t): Likewise, with\n+\t__INTPTR_TYPE__.\n+\t* gcc.dg/pr14092-1.c (intptr_t): Likewise.\n+\t* gcc.dg/tree-ssa/foldcast-1.c (ssize_t): Likewise.\n+\t* gcc.dg/c90-const-expr-6.c (intptr_t): New typedef to replace ...\n+\t(ptrdiff_t): ... this.  All uses changed.\n+\t* gcc.dg/c99-const-expr-6.c (intptr_t, ptrdiff_t): Likewise.\n+\t* gcc.dg/torture/pta-escape-1.c (foo): Change arg type to\n+\t__INTPTR_TYPE__.\n+\t(main): Cast argument to __INTPTR_TYPE__.\n+\t* gcc.dg/20041106-1.c (main): Cast to __UINTPTR_TYPE__ rather than\n+\tsize_t.\n+\t* gcc.dg/mallign.c (main): Likewise.\n+\t* gcc.dg/pr38700.c (foo): Likewise.\n+\t* gcc.dg/long-long-cst1.c (t): Likewise.\n+\t* gcc.dg/c99-const-expr-10.c (p, q, f, h, h2): Likewise.\n+\t* gcc.dg/array-10.c (c0, c1, c2, c3, c4, c5): Likewise.\n+\t* gcc.dg/pointer-arith-10.c (foo): Likewise.\n+\t* gcc.dg/pr25682.c (d, foo): Likewise.\n+\t* gcc.dg/format/cast-1.c (f): Likewise.\n+\t* gcc.dg/c90-const-expr-10.c\n+\t* gcc.dg/pr41551.c (uintptr_t): New typedef, replacing...\n+\t(size_t): ...this.  All uses changed.\n+\t* gcc.c-torture/execute/pr22098-1.c (uintptr_t): Likewise.\n+\t* gcc.c-torture/execute/pr22098-2.c (uintptr_t): Likewise.\n+\t* gcc.c-torture/execute/pr22098-3.c (uintptr_t): Likewise.\n+\t* gcc.dg/pr34856.c (uintptr_t): Likewise.\n+\t* gcc.dg/sequence-pt-1.c: Likewise.\n+\t* gcc.dg/c90-const-expr-9.c (uintptr_t): Likewise.\n+\t* gcc.dg/max-1.c (intptr_t): Likewise, replacing ssize_t.\n+\t* gcc.dg/pr39074.c (intptr_t): Define using __INTPTR_TYPE__.\n+\t* gcc.dg/pr30744-1.c (my_intptr_t): New typedef.  Replace all uses\n+\tof ptrdiff_t with it.\n+\t* gcc.dg/inline-23.c (my_intptr_t): Likewise.\n+\t* gcc.dg/pr37561.c (p): Use __INTPTR_TYPE__.\n+\t* gcc.dg/vla-11.c (foo11b): Use __UINTPTR_TYPE__.\n+\n 2012-04-11  Jason Merrill  <jason@redhat.com>\n \n \tPR debug/45088"}, {"sha": "a3b53cb976e34a320ebb5846199d0fab81805318", "filename": "gcc/testsuite/gcc.c-torture/execute/pr15296.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr15296.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr15296.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr15296.c?ref=30235ede1a1a99f5a99c257c878a1aab6a41de5a", "patch": "@@ -3,7 +3,7 @@\n    fall-through code, while that register held a pointer used in code at\n    the branch target.  */\n \n-typedef int __attribute__ ((mode (__pointer__))) intptr_t;\n+typedef __INTPTR_TYPE__ intptr_t;\n typedef intptr_t W;\n union u0\n {"}, {"sha": "7e876fa8cd16cf25f5b88cfb56b594a423da088a", "filename": "gcc/testsuite/gcc.c-torture/execute/pr22098-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr22098-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr22098-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr22098-1.c?ref=30235ede1a1a99f5a99c257c878a1aab6a41de5a", "patch": "@@ -1,13 +1,13 @@\n extern void abort (void);\n extern void exit (int);\n-typedef __SIZE_TYPE__ size_t;\n+typedef __UINTPTR_TYPE__ uintptr_t;\n int\n main (void)\n {\n   int a = 0;\n   int *p;\n-  size_t b;\n-  b = (size_t)(p = &(int []){0, 1, 2}[++a]);\n+  uintptr_t b;\n+  b = (uintptr_t)(p = &(int []){0, 1, 2}[++a]);\n   if (a != 1 || *p != 1 || *(int *)b != 1)\n     abort ();\n   exit (0);"}, {"sha": "035a755a5222bcbc69387df04ca599a46392c058", "filename": "gcc/testsuite/gcc.c-torture/execute/pr22098-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr22098-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr22098-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr22098-2.c?ref=30235ede1a1a99f5a99c257c878a1aab6a41de5a", "patch": "@@ -1,13 +1,13 @@\n extern void abort (void);\n extern void exit (int);\n-typedef __SIZE_TYPE__ size_t;\n+typedef __UINTPTR_TYPE__ uintptr_t;\n int\n main (void)\n {\n   int a = 0;\n   int *p;\n-  size_t b;\n-  b = (size_t)(p = &(int []){0, 1, 2}[1]);\n+  uintptr_t b;\n+  b = (uintptr_t)(p = &(int []){0, 1, 2}[1]);\n   if (*p != 1 || *(int *)b != 1)\n     abort ();\n   exit (0);"}, {"sha": "4f37be86c8c966fd4489f1b02521c67839c37038", "filename": "gcc/testsuite/gcc.c-torture/execute/pr22098-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr22098-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr22098-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr22098-3.c?ref=30235ede1a1a99f5a99c257c878a1aab6a41de5a", "patch": "@@ -1,15 +1,15 @@\n extern void abort (void);\n extern void exit (int);\n-typedef __SIZE_TYPE__ size_t;\n+typedef __UINTPTR_TYPE__ uintptr_t;\n int n = 0;\n int f (void) { return ++n; }\n int\n main (void)\n {\n   int a = 0;\n   int *p;\n-  size_t b;\n-  b = (size_t)(p = &(int []){0, f(), 2}[1]);\n+  uintptr_t b;\n+  b = (uintptr_t)(p = &(int []){0, f(), 2}[1]);\n   if (*p != 1 || *(int *)b != 1 || n != 1)\n     abort ();\n   exit (0);"}, {"sha": "f33ba01c8cd2db464c90bfc4867046e212b608a2", "filename": "gcc/testsuite/gcc.dg/20041106-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2F20041106-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2F20041106-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20041106-1.c?ref=30235ede1a1a99f5a99c257c878a1aab6a41de5a", "patch": "@@ -21,7 +21,7 @@ int main ()\n   struct S *s;\n \n   ptr = malloc (3*ps);\n-  page = (char *)(((size_t)ptr + (ps - 1)) & -ps);\n+  page = (char *)(((__UINTPTR_TYPE__)ptr + (ps - 1)) & -ps);\n   munmap (page + ps, ps);\n \n   s = (struct S *)(page + ps - sizeof(struct S));"}, {"sha": "44457d12c0695960967080ef239f746c2e5a5734", "filename": "gcc/testsuite/gcc.dg/array-10.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Farray-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Farray-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-10.c?ref=30235ede1a1a99f5a99c257c878a1aab6a41de5a", "patch": "@@ -13,12 +13,12 @@ struct b3 { int x[a]; }; /* { dg-error \"17:at file scope\" } */\n struct b4 { int (*x)[a]; }; /* { dg-error \"19:at file scope\" } */\n typeof (int [a]) b5; /* { dg-error \"at file scope|outside of any function\" } */\n \n-int c0[(__SIZE_TYPE__)&a]; /* { dg-error \"5:at file scope\" } */\n-int (*c1)[(__SIZE_TYPE__)&a]; /* { dg-error \"7:at file scope\" } */\n-int (*c2())[(__SIZE_TYPE__)&a]; /* { dg-error \"7:at file scope\" } */\n-struct c3 { int x[(__SIZE_TYPE__)&a]; }; /* { dg-error \"17:at file scope\" } */\n-struct c4 { int (*x)[(__SIZE_TYPE__)&a]; }; /* { dg-error \"19:at file scope\" } */\n-typeof (int [(__SIZE_TYPE__)&a]) c5; /* { dg-error \"34:at file scope\" } */\n+int c0[(__UINTPTR_TYPE__)&a]; /* { dg-error \"5:at file scope\" } */\n+int (*c1)[(__UINTPTR_TYPE__)&a]; /* { dg-error \"7:at file scope\" } */\n+int (*c2())[(__UINTPTR_TYPE__)&a]; /* { dg-error \"7:at file scope\" } */\n+struct c3 { int x[(__UINTPTR_TYPE__)&a]; }; /* { dg-error \"17:at file scope\" } */\n+struct c4 { int (*x)[(__UINTPTR_TYPE__)&a]; }; /* { dg-error \"19:at file scope\" } */\n+typeof (int [(__UINTPTR_TYPE__)&a]) c5; /* { dg-error \"37:at file scope\" } */\n \n int d0[1/0]; /* { dg-error \"5:at file scope\" } */\n /* { dg-warning \"9:division by zero\" \"\" { target *-*-* } 23 } */"}, {"sha": "50239ce2eba246be27c6bcca948712242ba6e3a1", "filename": "gcc/testsuite/gcc.dg/c90-const-expr-6.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-6.c?ref=30235ede1a1a99f5a99c257c878a1aab6a41de5a", "patch": "@@ -4,13 +4,13 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n \n-__extension__ typedef __PTRDIFF_TYPE__ ptrdiff_t;\n+__extension__ typedef __INTPTR_TYPE__ intptr_t;\n \n /* PR 29116.  */\n int n = 0, p[n * 0 + 1]; /* { dg-error \"variabl|can't be evaluated\" } */\n \n /* PR 31871.  */\n-extern int c[1 + ((ptrdiff_t) (void *) 0)]; /* { dg-error \"variab|can't be evaluated\" } */\n+extern int c[1 + ((intptr_t) (void *) 0)]; /* { dg-error \"variab|can't be evaluated\" } */\n \n /* Implicit conversions from floating-point constants are not OK,\n    although explicit ones are.  */\n@@ -34,7 +34,7 @@ struct s {\n };\n \n enum e {\n-  E = (1 + ((ptrdiff_t) (void *) 0)), /* { dg-error \"constant\" } */\n+  E = (1 + ((intptr_t) (void *) 0)), /* { dg-error \"constant\" } */\n   E2 = 0\n };\n \n@@ -46,7 +46,7 @@ enum f {\n void\n f (int a)\n {\n-  int v[1 + ((ptrdiff_t) (void *) 0)]; /* { dg-error \"variab|can't be evaluated\" } */\n+  int v[1 + ((intptr_t) (void *) 0)]; /* { dg-error \"variab|can't be evaluated\" } */\n   switch (a)\n     {\n     case (n * 0 + 1): /* { dg-error \"constant\" } */"}, {"sha": "0d5d8c1ae003fe4e10f1c16ab93c23f1aeb5b5b1", "filename": "gcc/testsuite/gcc.dg/c90-const-expr-9.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-9.c?ref=30235ede1a1a99f5a99c257c878a1aab6a41de5a", "patch": "@@ -15,8 +15,9 @@ struct t {\n };\n \n __extension__ typedef __SIZE_TYPE__ size_t;\n+__extension__ typedef __UINTPTR_TYPE__ uintptr_t;\n \n-#define old_offsetof(TYPE, MEMBER) ((size_t) &((TYPE *)0)->MEMBER)\n+#define old_offsetof(TYPE, MEMBER) ((size_t) (uintptr_t) &((TYPE *)0)->MEMBER)\n \n enum e {\n   E1 = old_offsetof (struct s, a), /* { dg-error \"constant\" } */"}, {"sha": "ca602438d35c6f8c9435c7bfb574ad1b77ddace3", "filename": "gcc/testsuite/gcc.dg/c99-const-expr-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-6.c?ref=30235ede1a1a99f5a99c257c878a1aab6a41de5a", "patch": "@@ -8,7 +8,7 @@\n int n = 0, p[n * 0 + 1]; /* { dg-error \"variabl\" } */\n \n /* PR 31871.  */\n-extern int c[1 + ((__PTRDIFF_TYPE__) (void *) 0)]; /* { dg-error \"variab\" } */\n+extern int c[1 + ((__INTPTR_TYPE__) (void *) 0)]; /* { dg-error \"variab\" } */\n \n /* Implicit conversions from floating-point constants are not OK,\n    although explicit ones are.  */\n@@ -32,7 +32,7 @@ struct s {\n };\n \n enum e {\n-  E = (1 + ((__PTRDIFF_TYPE__) (void *) 0)), /* { dg-error \"constant\" } */\n+  E = (1 + ((__INTPTR_TYPE__) (void *) 0)), /* { dg-error \"constant\" } */\n   E2 = 0\n };\n "}, {"sha": "a0a6a9635c3a43bd45ff8a06079c94bc730ce9f3", "filename": "gcc/testsuite/gcc.dg/c99-const-expr-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-9.c?ref=30235ede1a1a99f5a99c257c878a1aab6a41de5a", "patch": "@@ -14,7 +14,7 @@ struct t {\n   int b[2];\n };\n \n-#define old_offsetof(TYPE, MEMBER) ((__SIZE_TYPE__) &((TYPE *)0)->MEMBER)\n+#define old_offsetof(TYPE, MEMBER) ((__SIZE_TYPE__)(__UINTPTR_TYPE__) &((TYPE *)0)->MEMBER)\n \n enum e {\n   E1 = old_offsetof (struct s, a), /* { dg-error \"constant\" } */"}, {"sha": "5d1d47709b73e5322e07c730706b09020f2d3eb1", "filename": "gcc/testsuite/gcc.dg/format/cast-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fcast-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fcast-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fcast-1.c?ref=30235ede1a1a99f5a99c257c878a1aab6a41de5a", "patch": "@@ -11,6 +11,6 @@ void\n f (int x)\n {\n   printf(\"%s\", x); /* { dg-warning \"format\" } */\n-  printf((char *)(size_t)\"%s\", x); /* { dg-warning \"format\" } */\n+  printf((char *)(__UINTPTR_TYPE__)\"%s\", x); /* { dg-warning \"format\" } */\n   printf((char *)(char)\"%s\", x); /* { dg-warning \"cast from pointer to integer of different size\" } */\n }"}, {"sha": "2829ecbf7e1a2e7ac8dd6593f83110cb1887d4cf", "filename": "gcc/testsuite/gcc.dg/inline-23.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Finline-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Finline-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-23.c?ref=30235ede1a1a99f5a99c257c878a1aab6a41de5a", "patch": "@@ -3,16 +3,19 @@\n /* Make sure we can inline a varargs function whose variable arguments\n    are not used.  See PR32493.  */\n #include <stddef.h>\n+\n+typedef __INTPTR_TYPE__ my_intptr_t;\n+\n static inline __attribute__((always_inline)) void __check_printsym_format(const\n char *fmt, ...)\n {\n }\n static inline __attribute__((always_inline)) void print_symbol(const char *fmt,\n-ptrdiff_t addr)\n+my_intptr_t addr)\n {\n  __check_printsym_format(fmt, \"\");\n }\n void do_initcalls(void **call)\n {\n-   print_symbol(\": %s()\", (ptrdiff_t) *call);\n+   print_symbol(\": %s()\", (my_intptr_t) *call);\n }"}, {"sha": "800d6d64b9f25d041f32544e2595bee1fa0a4bae", "filename": "gcc/testsuite/gcc.dg/long-long-cst1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Flong-long-cst1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Flong-long-cst1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flong-long-cst1.c?ref=30235ede1a1a99f5a99c257c878a1aab6a41de5a", "patch": "@@ -7,7 +7,7 @@ extern void abort();\n struct st{\n   int _mark;\n };\n-unsigned long long t = ((int)(__SIZE_TYPE__)&(((struct st*)16)->_mark) - 32);\n+unsigned long long t = ((int)(__UINTPTR_TYPE__)&(((struct st*)16)->_mark) - 32);\n \n int main()\n {"}, {"sha": "349cdaa343f11420bf394b2e901b63d35c643859", "filename": "gcc/testsuite/gcc.dg/mallign.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fmallign.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fmallign.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmallign.c?ref=30235ede1a1a99f5a99c257c878a1aab6a41de5a", "patch": "@@ -9,7 +9,7 @@ typedef int word __attribute__((mode(word)));\n \n int main()\n {\n-    if ((size_t)malloc (1) & (sizeof(word)-1))\n+    if ((__UINTPTR_TYPE__)malloc (1) & (sizeof(word)-1))\n \tabort ();\n     return 0;\n }                                                                              "}, {"sha": "9823dca597e11b39db4dd27dfa4fc4bfd4868b7d", "filename": "gcc/testsuite/gcc.dg/max-1.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fmax-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fmax-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmax-1.c?ref=30235ede1a1a99f5a99c257c878a1aab6a41de5a", "patch": "@@ -7,19 +7,16 @@\n /* m32c has varying sized pointers */\n /* { dg-skip-if \"\" { \"m32c-*-*\" } { \"*\" } { \"-mcpu=m32c\" \"-mcpu=m32cm\" } } */\n \n-/* Kludge to make it signed. */\n-#define unsigned signed\n-__extension__ typedef __SIZE_TYPE__ ssize_t;\n-#undef unsigned\n+__extension__ typedef __INTPTR_TYPE__ intptr_t;\n \n extern void abort (void);\n \n-ssize_t fff[10];\n+intptr_t fff[10];\n \n-void f(ssize_t a, ssize_t b)\n+void f(intptr_t a, intptr_t b)\n {\n-  ssize_t crcc = b;\n-  ssize_t d = *((ssize_t*)(a+1));\n+  intptr_t crcc = b;\n+  intptr_t d = *((intptr_t*)(a+1));\n   int i;\n \n   a = d >= b? d:b;\n@@ -32,11 +29,11 @@ void f(ssize_t a, ssize_t b)\n /* The variable a cannot be a local variable as we get better aliasing\n    now and decide that the store to a is dead.  The better aliasing comes\n    from better representation of pointer arithmetic. */\n-ssize_t a = 10;\n+intptr_t a = 10;\n int main(void)\n {\n   int i;\n-  f((ssize_t)(&a)-1,0);\n+  f((intptr_t)(&a)-1,0);\n   for(i = 0;i<10;i++)\n    if (fff[i]!=10)\n     abort ();"}, {"sha": "52b1989ef932006125ac455e4907a2126cc7bf05", "filename": "gcc/testsuite/gcc.dg/pointer-arith-10.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-10.c?ref=30235ede1a1a99f5a99c257c878a1aab6a41de5a", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-fdump-tree-original\" } */\n \n-char *foo(char *p, __SIZE_TYPE__ i)\n+char *foo(char *p, __UINTPTR_TYPE__ i)\n {\n-  return (char *)i + (__SIZE_TYPE__)p;\n+  return (char *)i + (__UINTPTR_TYPE__)p;\n }\n \n /* { dg-final { scan-tree-dump \"p +\" \"original\" } } */"}, {"sha": "1c103ccb312ac3f38aea1e1222f2c9c0845f8f00", "filename": "gcc/testsuite/gcc.dg/pr14092-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14092-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14092-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14092-1.c?ref=30235ede1a1a99f5a99c257c878a1aab6a41de5a", "patch": "@@ -6,7 +6,7 @@\n \n /* Define this so that we are more portable.  The testcase in the\n    PR failed on 64-bit hosts.  */\n-typedef int __attribute__ ((mode (__pointer__))) intptr_t;\n+typedef __INTPTR_TYPE__ intptr_t;\n \n typedef struct _PLCI {\n   unsigned char x;"}, {"sha": "e8cab1d05e508c9afa1db3d60655d63edf6116e0", "filename": "gcc/testsuite/gcc.dg/pr25682.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr25682.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr25682.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr25682.c?ref=30235ede1a1a99f5a99c257c878a1aab6a41de5a", "patch": "@@ -11,7 +11,7 @@ struct S\n };\n \n char c[(char *) &((struct S *) 0)->b - (char *) 0]; /* { dg-warning \"variably modified\" } */\n-char d[(__SIZE_TYPE__) &((struct S *) 8)->b]; /* { dg-warning \"variably modified\" } */\n+char d[(__UINTPTR_TYPE__) &((struct S *) 8)->b]; /* { dg-warning \"variably modified\" } */\n char e[sizeof (c) == __builtin_offsetof (struct S, b) ? 1 : -1];\n char f[sizeof (d) == __builtin_offsetof (struct S, b) + 8 ? 1 : -1];\n \n@@ -21,7 +21,7 @@ void\n foo (void)\n {\n   char g[(char *) &((struct S *) 0)->b - (char *) 0];\n-  char h[(__SIZE_TYPE__) &((struct S *) 8)->b];\n+  char h[(__UINTPTR_TYPE__) &((struct S *) 8)->b];\n   char i[sizeof (g) == __builtin_offsetof (struct S, b) ? 1 : -1];\n   char j[sizeof (h) == __builtin_offsetof (struct S, b) + 8 ? 1 : -1];\n   bar (g, h);"}, {"sha": "f08f3be172ac4daa1be7bfd3841af3a1aaf23e91", "filename": "gcc/testsuite/gcc.dg/pr30744-1.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30744-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30744-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30744-1.c?ref=30235ede1a1a99f5a99c257c878a1aab6a41de5a", "patch": "@@ -2,15 +2,17 @@\n /* { dg-options \"-O2\" } */\n #include <stddef.h>\n \n+typedef __INTPTR_TYPE__ my_intptr_t;\n+\n typedef struct {\n-  ptrdiff_t unique;\n+  my_intptr_t unique;\n } G;\n \n void r(G* n)\n {\n-  ptrdiff_t p;\n-  if (((G *) ((void *)((~(ptrdiff_t)(p))))) != ((void *)0)) {\n-    ((G *) ((void *)((~(ptrdiff_t)(p)))))->unique = n->unique;\n+  my_intptr_t p;\n+  if (((G *) ((void *)((~(my_intptr_t)(p))))) != ((void *)0)) {\n+    ((G *) ((void *)((~(my_intptr_t)(p)))))->unique = n->unique;\n   }\n }\n "}, {"sha": "62041e248ba2239f2f3c52d62d8780f55f9c5f93", "filename": "gcc/testsuite/gcc.dg/pr34856.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr34856.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr34856.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr34856.c?ref=30235ede1a1a99f5a99c257c878a1aab6a41de5a", "patch": "@@ -3,7 +3,7 @@\n /* { dg-options \"-O2 -msse2\" { target { i?86-*-* x86_64-*-* } } } */\n /* { dg-options \"-O2 -maltivec\" { target { powerpc*-*-linux* && powerpc_altivec_ok } } } */\n \n-typedef unsigned __attribute__ ((__mode__ (__pointer__))) uintptr_t;\n+typedef __UINTPTR_TYPE__ uintptr_t;\n \n #undef __vector\n #define __vector __attribute__ ((__vector_size__ (16)))"}, {"sha": "3ad826329f9aa64dfee4bcbb2f0668c88641d973", "filename": "gcc/testsuite/gcc.dg/pr37561.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr37561.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr37561.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr37561.c?ref=30235ede1a1a99f5a99c257c878a1aab6a41de5a", "patch": "@@ -1,7 +1,7 @@\n /* PR c++/37561 */\n /* { dg-do compile } */\n \n-__extension__ __PTRDIFF_TYPE__ p;\n+__extension__ __INTPTR_TYPE__ p;\n char q;\n \n void"}, {"sha": "ebece7f0ff49fc71b906e030276d21dbf8b8ec7b", "filename": "gcc/testsuite/gcc.dg/pr38700.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr38700.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr38700.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr38700.c?ref=30235ede1a1a99f5a99c257c878a1aab6a41de5a", "patch": "@@ -5,7 +5,7 @@\n int\n foo ()\n {\n-  __SIZE_TYPE__ s = __builtin_expect ((__SIZE_TYPE__)&&L, 0);\n+  __UINTPTR_TYPE__ s = __builtin_expect ((__UINTPTR_TYPE__)&&L, 0);\n L:\n   return 0;\n }"}, {"sha": "2f2ad2be97e19f0089080b760c04e9f19e1edb47", "filename": "gcc/testsuite/gcc.dg/pr41551.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr41551.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr41551.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr41551.c?ref=30235ede1a1a99f5a99c257c878a1aab6a41de5a", "patch": "@@ -3,10 +3,10 @@\n \n /* Make sure we do not ICE.  */\n \n-__extension__ typedef __SIZE_TYPE__ size_t;\n+__extension__ typedef __UINTPTR_TYPE__ uintptr_t;\n \n int main(void)\n {\n  int var, *p = &var;\n- return (double)(size_t)(p);\n+ return (double)(uintptr_t)(p);\n }"}, {"sha": "2e22b662a4676387574b3364b6e11678f55c0a9c", "filename": "gcc/testsuite/gcc.dg/sequence-pt-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fsequence-pt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fsequence-pt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsequence-pt-1.c?ref=30235ede1a1a99f5a99c257c878a1aab6a41de5a", "patch": "@@ -15,7 +15,7 @@ extern int fnb (int, int);\n extern int fnc (int *);\n extern int sprintf (char *, const char *, ...);\n \n-typedef __SIZE_TYPE__ size_t;\n+typedef __UINTPTR_TYPE__ uintptr_t;\n \n void\n foo (int a, int b, int n, int p, int *ptr, struct s *sptr,\n@@ -32,9 +32,9 @@ foo (int a, int b, int n, int p, int *ptr, struct s *sptr,\n   ap[++n] = bp[--n]; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n   cp[n][n] = cp[n][n]++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n   cp[n][p] = cp[n][n++]; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n-  *ptr++ = (size_t)ptr++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  *ptr++ = (uintptr_t)ptr++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n   sptr->a = sptr->a++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n-  sptr->a = (size_t)(sptr++); /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  sptr->a = (uintptr_t)(sptr++); /* { dg-warning \"undefined\" \"sequence point warning\" } */\n   *ptr++ = fn (*ptr); /* { dg-warning \"undefined\" \"sequence point warning\" } */\n   a = b = a++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n   b = a = --b; /* { dg-warning \"undefined\" \"sequence point warning\" } */"}, {"sha": "89c4ac6ca9fe6195fe9d8ac9c6977c9d4f0bf482", "filename": "gcc/testsuite/gcc.dg/torture/pr39074.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr39074.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr39074.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr39074.c?ref=30235ede1a1a99f5a99c257c878a1aab6a41de5a", "patch": "@@ -2,7 +2,7 @@\n /* { dg-options \"-fdump-tree-alias\" } */\n /* { dg-skip-if \"\" { *-*-* } { \"-O0\" \"-fno-fat-lto-objects\" } { \"\" } } */\n \n-typedef __PTRDIFF_TYPE__ intptr_t;\n+typedef __INTPTR_TYPE__ intptr_t;\n \n int i;\n void __attribute__((noinline))"}, {"sha": "d3cb25437ccd347064be75d5a93621e43212458b", "filename": "gcc/testsuite/gcc.dg/torture/pta-escape-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpta-escape-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpta-escape-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpta-escape-1.c?ref=30235ede1a1a99f5a99c257c878a1aab6a41de5a", "patch": "@@ -9,7 +9,7 @@ bar (void)\n   *p = 1;\n }\n int __attribute__((noinline,noclone))\n-foo (__SIZE_TYPE__ addr)\n+foo (__INTPTR_TYPE__ addr)\n {\n   int i;\n   /* q points to ANYTHING */\n@@ -25,7 +25,7 @@ extern void abort (void);\n int\n main()\n {\n-  if (foo ((__SIZE_TYPE__)&p) != 1)\n+  if (foo ((__INTPTR_TYPE__)&p) != 1)\n     abort ();\n   return 0;\n }"}, {"sha": "9444f0be204a79b55a01cb7a17968ae547720166", "filename": "gcc/testsuite/gcc.dg/tree-ssa/foldcast-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffoldcast-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffoldcast-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffoldcast-1.c?ref=30235ede1a1a99f5a99c257c878a1aab6a41de5a", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-fdump-tree-original\" } */\n \n-typedef int ssize_t __attribute__((mode(pointer)));\n+typedef __INTPTR_TYPE__ ssize_t;\n ssize_t foo (ssize_t x)\n {\n   return (ssize_t)(char *)x;"}, {"sha": "9c23e860a531722e4a3c6253033af30b69fac178", "filename": "gcc/testsuite/gcc.dg/vla-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30235ede1a1a99f5a99c257c878a1aab6a41de5a/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-11.c?ref=30235ede1a1a99f5a99c257c878a1aab6a41de5a", "patch": "@@ -7,7 +7,7 @@\n /* { dg-options \"-std=c99 -pedantic-errors\" } */\n \n void foo11a(int x[sizeof(int *(*)[*])]);\t/* { dg-warning \"not in a declaration\" } */\n-void foo11b(__SIZE_TYPE__ x, int y[(__SIZE_TYPE__)(int (*)[*])x]);\t/* { dg-warning \"not in a declaration\" } */\n+void foo11b(__SIZE_TYPE__ x, int y[(__UINTPTR_TYPE__)(int (*)[*])x]);\t/* { dg-warning \"not in a declaration\" } */\n void foo11c(struct s { int (*x)[*]; } *y);\t/* { dg-error \"a member of a structure or union cannot have a variably modified type\" \"variably modified\" } */\n /* { dg-warning \"'struct s' declared inside parameter list\" \"struct decl\" { target *-*-* } 11 } */\n /* { dg-warning \"its scope is only this definition or declaration\" \"struct scope\" { target *-*-* } 11 } */"}]}