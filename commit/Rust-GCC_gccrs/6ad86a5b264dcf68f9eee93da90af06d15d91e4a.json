{"sha": "6ad86a5b264dcf68f9eee93da90af06d15d91e4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFkODZhNWIyNjRkY2Y2OGY5ZWVlOTNkYTkwYWYwNmQxNWQ5MWU0YQ==", "commit": {"author": {"name": "Fabien Ch\u00eane", "email": "fabien.chene@gmail.com", "date": "2010-04-27T18:56:13Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-04-27T18:56:13Z"}, "message": "re PR c++/42844 (const variable requires initializer / no explicitly declared default constructor)\n\n\tPR c++/42844\n\t* decl.c (check_for_uninitialized_const_var): Handle classes that need\n\tconstructing, too.\n\t(check_initializer): Call it for classes that need constructing, too.\n\t* class.c (in_class_defaulted_default_constructor): New.\n\t* cp-tree.h: Declare it.\n\nCo-Authored-By: Jason Merrill <jason@redhat.com>\n\nFrom-SVN: r158797", "tree": {"sha": "c95fa21322f4c7608254fa16bb33ea36db219406", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c95fa21322f4c7608254fa16bb33ea36db219406"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ad86a5b264dcf68f9eee93da90af06d15d91e4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ad86a5b264dcf68f9eee93da90af06d15d91e4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ad86a5b264dcf68f9eee93da90af06d15d91e4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ad86a5b264dcf68f9eee93da90af06d15d91e4a/comments", "author": null, "committer": null, "parents": [{"sha": "78b41ae280b857079da43d91e81356c7afad8512", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78b41ae280b857079da43d91e81356c7afad8512", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78b41ae280b857079da43d91e81356c7afad8512"}], "stats": {"total": 210, "additions": 198, "deletions": 12}, "files": [{"sha": "a996461cca0ca90e2c95ad016187bcf92ca42696", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad86a5b264dcf68f9eee93da90af06d15d91e4a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad86a5b264dcf68f9eee93da90af06d15d91e4a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6ad86a5b264dcf68f9eee93da90af06d15d91e4a", "patch": "@@ -1,3 +1,13 @@\n+2010-04-27  Fabien Ch\u00eane  <fabien.chene@gmail.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/42844\n+\t* decl.c (check_for_uninitialized_const_var): Handle classes that need\n+\tconstructing, too.\n+\t(check_initializer): Call it for classes that need constructing, too.\n+\t* class.c (in_class_defaulted_default_constructor): New.\n+\t* cp-tree.h: Declare it.\n+\n 2010-04-20  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/9335"}, {"sha": "26da21b8c82526e22ad2835af13099dfcbc60914", "filename": "gcc/cp/class.c", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad86a5b264dcf68f9eee93da90af06d15d91e4a/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad86a5b264dcf68f9eee93da90af06d15d91e4a/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=6ad86a5b264dcf68f9eee93da90af06d15d91e4a", "patch": "@@ -1,6 +1,6 @@\n /* Functions related to building classes and their related objects.\n    Copyright (C) 1987, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com)\n \n@@ -4177,6 +4177,34 @@ type_has_user_nondefault_constructor (tree t)\n   return false;\n }\n \n+/* Returns the defaulted constructor if T has one. Otherwise, returns\n+   NULL_TREE.  */\n+\n+tree\n+in_class_defaulted_default_constructor (tree t)\n+{\n+  tree fns, args;\n+\n+  if (!TYPE_HAS_USER_CONSTRUCTOR (t))\n+    return NULL_TREE;\n+\n+  for (fns = CLASSTYPE_CONSTRUCTORS (t); fns; fns = OVL_NEXT (fns))\n+    {\n+      tree fn = OVL_CURRENT (fns);\n+\n+      if (DECL_DEFAULTED_IN_CLASS_P (fn))\n+\t{\n+\t  args = FUNCTION_FIRST_USER_PARMTYPE (fn);\n+\t  while (args && TREE_PURPOSE (args))\n+\t    args = TREE_CHAIN (args);\n+\t  if (!args || args == void_list_node)\n+\t    return fn;\n+\t}\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Returns true iff FN is a user-provided function, i.e. user-declared\n    and not defaulted at its first declaration; or explicit, private,\n    protected, or non-const.  */"}, {"sha": "a7ed134a52d449b9313e0e02662da612beb85523", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad86a5b264dcf68f9eee93da90af06d15d91e4a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad86a5b264dcf68f9eee93da90af06d15d91e4a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=6ad86a5b264dcf68f9eee93da90af06d15d91e4a", "patch": "@@ -4611,6 +4611,7 @@ extern void check_for_override\t\t\t(tree, tree);\n extern void push_class_stack\t\t\t(void);\n extern void pop_class_stack\t\t\t(void);\n extern bool type_has_user_nondefault_constructor (tree);\n+extern tree in_class_defaulted_default_constructor (tree);\n extern bool user_provided_p\t\t\t(tree);\n extern bool type_has_user_provided_constructor  (tree);\n extern bool type_has_user_provided_default_constructor (tree);"}, {"sha": "346b7b43646abc890b433eb2ff0741646ae9d00a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad86a5b264dcf68f9eee93da90af06d15d91e4a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad86a5b264dcf68f9eee93da90af06d15d91e4a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=6ad86a5b264dcf68f9eee93da90af06d15d91e4a", "patch": "@@ -1,6 +1,6 @@\n /* Process declarations and variables for C++ compiler.\n    Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com)\n \n@@ -4692,7 +4692,7 @@ maybe_commonize_var (tree decl)\n static void\n check_for_uninitialized_const_var (tree decl)\n {\n-  tree type = TREE_TYPE (decl);\n+  tree type = strip_array_types (TREE_TYPE (decl));\n \n   if (TREE_CODE (decl) == VAR_DECL && DECL_DECLARED_CONSTEXPR_P (decl)\n       && DECL_INITIAL (decl) == NULL)\n@@ -4704,11 +4704,28 @@ check_for_uninitialized_const_var (tree decl)\n   else if (TREE_CODE (decl) == VAR_DECL\n       && TREE_CODE (type) != REFERENCE_TYPE\n       && CP_TYPE_CONST_P (type)\n-      && !TYPE_NEEDS_CONSTRUCTING (type)\n+      && (!TYPE_NEEDS_CONSTRUCTING (type)\n+\t  || !type_has_user_provided_default_constructor (type))\n       && !DECL_INITIAL (decl))\n-    error (\"uninitialized const %qD\", decl);\n-}\n+    {\n+      permerror (DECL_SOURCE_LOCATION (decl),\n+\t\t \"uninitialized const %qD\", decl);\n \n+      if (CLASS_TYPE_P (type)\n+\t  && !type_has_user_provided_default_constructor (type))\n+\t{\n+\t  tree defaulted_ctor;\n+\n+\t  inform (DECL_SOURCE_LOCATION (TYPE_MAIN_DECL (type)),\n+\t\t  \"%q#T has no user-provided default constructor\", type);\n+\t  defaulted_ctor = in_class_defaulted_default_constructor (type);\n+\t  if (defaulted_ctor)\n+\t    inform (DECL_SOURCE_LOCATION (defaulted_ctor),\n+\t\t    \"constructor is not user-provided because it is \"\n+\t\t    \"explicitly defaulted in the class body\");\n+\t}\n+    }\n+}\n \f\n /* Structure holding the current initializer being processed by reshape_init.\n    CUR is a pointer to the current element being processed, END is a pointer\n@@ -5261,7 +5278,10 @@ check_initializer (tree decl, tree init, int flags, tree *cleanup)\n   else if (DECL_EXTERNAL (decl))\n     ;\n   else if (TYPE_P (type) && TYPE_NEEDS_CONSTRUCTING (type))\n-    return build_aggr_init_full_exprs (decl, init, flags);\n+    {\n+      check_for_uninitialized_const_var (decl);\n+      return build_aggr_init_full_exprs (decl, init, flags);\n+    }\n   else if (MAYBE_CLASS_TYPE_P (type))\n     {\n       tree core_type = strip_array_types (type);"}, {"sha": "21d9e0d17565e300d47da8e6995dba180e545e94", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad86a5b264dcf68f9eee93da90af06d15d91e4a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad86a5b264dcf68f9eee93da90af06d15d91e4a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6ad86a5b264dcf68f9eee93da90af06d15d91e4a", "patch": "@@ -1,3 +1,11 @@\n+2010-04-27  Fabien Ch\u00eane  <fabien.chene@gmail.com>\n+\n+\t* g++.dg/init/pr42844.C: New.\n+\t* g++.dg/cpp0x/pr42844-2.C: New.\n+\t* g++.dg/cpp0x/defaulted2.C: Adjust.\n+\t* g++.dg/tree-ssa/pr27549.C: Likewise.\n+\t* g++.old-deja/g++.mike/dyncast8.C: Likewise.\n+\n 2010-04-27  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/18918"}, {"sha": "ad3274a2ea926e9a83a50fabf048812a1d7fa3a2", "filename": "gcc/testsuite/g++.dg/cpp0x/defaulted2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad86a5b264dcf68f9eee93da90af06d15d91e4a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad86a5b264dcf68f9eee93da90af06d15d91e4a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted2.C?ref=6ad86a5b264dcf68f9eee93da90af06d15d91e4a", "patch": "@@ -15,9 +15,9 @@ A::A() = default;\t\t// { dg-error \"redefinition\" }\n void g() {}\t\t\t// { dg-error \"previous\" }\n void g() = delete;\t\t// { dg-error \"redefinition\" }\n \n-struct B\n+struct B // { dg-message \"user-provided default constructor\" }\n {\n-  B() = default;\n+    B() = default;\t\t// { dg-message \"not user-provided\" }\n };\n \n const B b;\t\t\t// { dg-error \"uninitialized const\" }"}, {"sha": "5af4ff217f3787c10b4998b93803166d1b6b1eb3", "filename": "gcc/testsuite/g++.dg/cpp0x/pr42844-2.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad86a5b264dcf68f9eee93da90af06d15d91e4a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr42844-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad86a5b264dcf68f9eee93da90af06d15d91e4a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr42844-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr42844-2.C?ref=6ad86a5b264dcf68f9eee93da90af06d15d91e4a", "patch": "@@ -0,0 +1,38 @@\n+// PR c++/42844\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+struct A // { dg-message \"user-provided default constructor\" }\n+{\n+    A() = default; // { dg-message \"not user-provided\" }\n+};\n+\n+struct Base\n+{\n+    Base() {}\n+};\n+\n+struct Derived : Base // { dg-message \"user-provided default constructor\" }\n+{\n+    Derived() = default; // { dg-message \"not user-provided\" }\n+};\n+\n+struct Derived2 : Base // { dg-message \"user-provided default constructor\" }\n+{\n+    Derived2() = default; // { dg-message \"not user-provided\" }\n+    Derived2( Derived2 const& ) = default;\n+};\n+\n+struct Derived3 : Base // { dg-message \"user-provided default constructor\" }\n+{\n+    Derived3( Derived3 const& ) = default;\n+    Derived3() = default; // { dg-message \"not user-provided\" }\n+};\n+\n+void f()\n+{\n+    const A a; // { dg-error \"uninitialized const\" }\n+    const Derived d; // { dg-error \"uninitialized const\" }\n+    const Derived2 d2; // { dg-error \"uninitialized const\" }\n+    const Derived3 d3; // { dg-error \"uninitialized const\" }\n+}"}, {"sha": "7b423ccb64bfb6fd4faab32c584526557f6b671b", "filename": "gcc/testsuite/g++.dg/init/pr42844.C", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad86a5b264dcf68f9eee93da90af06d15d91e4a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr42844.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad86a5b264dcf68f9eee93da90af06d15d91e4a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr42844.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr42844.C?ref=6ad86a5b264dcf68f9eee93da90af06d15d91e4a", "patch": "@@ -0,0 +1,56 @@\n+// PR c++/42844\n+// { dg-do compile }\n+\n+struct A\n+{\n+  A(){}\n+};\n+\n+struct B : A {}; // { dg-message \"user-provided default constructor\" }\n+\n+struct C : A {}; // { dg-message \"user-provided default constructor\" }\n+\n+struct D : B { D() {} };\n+\n+struct E {}; // { dg-message \"user-provided default constructor\" }\n+\n+template <class T>\n+struct F : A {}; // { dg-message \"user-provided default constructor\" }\n+\n+template <class T>\n+struct G {}; // { dg-message \"user-provided default constructor\" }\n+\n+void f ()\n+{\n+  B const b;    // { dg-error \"uninitialized const\" }\n+  extern B const bext;\n+\n+  C const c[ 1 ]; // { dg-error \"uninitialized const\" }\n+  extern C const cext[ 1 ];\n+\n+  D const d;\n+  extern D const dext;\n+\n+  E const e;\t// { dg-error \"uninitialized const\" }\n+  extern E const eext;\n+\n+  F<int> const f; // { dg-error \"uninitialized const\" }\n+  extern F<int> const fext;\n+\n+  G<int> const g; // { dg-error \"uninitialized const\" }\n+  extern G<int> const gext;\n+}\n+\n+struct H {}; // { dg-message \"user-provided default constructor\" }\n+\n+struct I : A {}; // { dg-message \"user-provided default constructor\" }\n+\n+template <class T>\n+void g ()\n+{\n+  T const t; // { dg-error \"uninitialized const\" }\n+  extern T const text;\n+}\n+\n+template void g<H> ();\n+template void g<I> ();"}, {"sha": "cd5944d2439984502b57c8d7b4c29e983e8bea63", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr27549.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad86a5b264dcf68f9eee93da90af06d15d91e4a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr27549.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad86a5b264dcf68f9eee93da90af06d15d91e4a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr27549.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr27549.C?ref=6ad86a5b264dcf68f9eee93da90af06d15d91e4a", "patch": "@@ -13,6 +13,7 @@ struct E\n \n struct F : public E\n {\n+  F () {}\n   virtual ~F () {}\n   virtual size_t e () const { return 0; }\n   virtual void f (char *x) const { *x = '\\0'; }"}, {"sha": "e2c5a2df9a60de75abd8cd5568c24297d23dccf6", "filename": "gcc/testsuite/g++.old-deja/g++.mike/dyncast8.C", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad86a5b264dcf68f9eee93da90af06d15d91e4a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fdyncast8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad86a5b264dcf68f9eee93da90af06d15d91e4a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fdyncast8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fdyncast8.C?ref=6ad86a5b264dcf68f9eee93da90af06d15d91e4a", "patch": "@@ -7,7 +7,11 @@ public:\n   virtual ~Base() { }\n };\n \n-class Derived : public Base { };\n+class Derived : public Base\n+{\n+public:\n+    Derived() {}\n+};\n \n int main()\n {"}, {"sha": "5ff9d83f1c8e0cb98044b6eacd649ce710703601", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad86a5b264dcf68f9eee93da90af06d15d91e4a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad86a5b264dcf68f9eee93da90af06d15d91e4a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6ad86a5b264dcf68f9eee93da90af06d15d91e4a", "patch": "@@ -1,3 +1,13 @@\n+2010-04-27  Fabien Ch\u00eane  <fabien.chene@gmail.com>\n+\n+\t* testsuite/util/testsuite_error.h: Add empty default constructor\n+\tto __gnu_test::test_category and\n+\t__gnu_test::test_derived_category.\n+\t* src/future.cc: Add empty default constructor to\n+\tfuture_error_category.\n+\t* src/system_error.cc: Add default ctor to generic_error_category\n+\tand system_error_category.\n+\n 2010-04-27  Alexander Monakov  <amonakov@ispras.ru>\n \n \t* testsuite/22_locale/codecvt/unshift/char/1.c (test01): Clarify size"}, {"sha": "d9289487bab6f9aed4a93a3748f4a1e9e8ac9e29", "filename": "libstdc++-v3/src/future.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad86a5b264dcf68f9eee93da90af06d15d91e4a/libstdc%2B%2B-v3%2Fsrc%2Ffuture.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad86a5b264dcf68f9eee93da90af06d15d91e4a/libstdc%2B%2B-v3%2Fsrc%2Ffuture.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffuture.cc?ref=6ad86a5b264dcf68f9eee93da90af06d15d91e4a", "patch": "@@ -1,6 +1,6 @@\n // future -*- C++ -*-\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,6 +28,8 @@ namespace\n {\n   struct future_error_category : public std::error_category\n   {\n+    future_error_category() {}\n+\n     virtual const char*\n     name() const \n     { return \"future\"; }"}, {"sha": "be6af3bced89028d932719bdbda4d0bda660a4d3", "filename": "libstdc++-v3/src/system_error.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad86a5b264dcf68f9eee93da90af06d15d91e4a/libstdc%2B%2B-v3%2Fsrc%2Fsystem_error.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad86a5b264dcf68f9eee93da90af06d15d91e4a/libstdc%2B%2B-v3%2Fsrc%2Fsystem_error.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fsystem_error.cc?ref=6ad86a5b264dcf68f9eee93da90af06d15d91e4a", "patch": "@@ -34,6 +34,8 @@ namespace\n   \n   struct generic_error_category : public std::error_category\n   {\n+    generic_error_category() {}\n+\n     virtual const char*\n     name() const \n     { return \"generic\"; }\n@@ -49,6 +51,8 @@ namespace\n \n   struct system_error_category : public std::error_category\n   {\n+    system_error_category() {}\n+\n     virtual const char*\n     name() const\n     { return \"system\"; }"}, {"sha": "c2bfed737dacb05afef401bc2da6d27edfeabf8d", "filename": "libstdc++-v3/testsuite/util/testsuite_error.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad86a5b264dcf68f9eee93da90af06d15d91e4a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_error.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad86a5b264dcf68f9eee93da90af06d15d91e4a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_error.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_error.h?ref=6ad86a5b264dcf68f9eee93da90af06d15d91e4a", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*-\n // Error handling utils for the C++ library testsuite. \n //\n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,6 +29,8 @@ namespace __gnu_test\n {\n   struct test_category : public std::error_category\n   { \n+    test_category() {}\n+\n     virtual const char*\n     name() const \n     { \n@@ -43,6 +45,8 @@ namespace __gnu_test\n \n   struct test_derived_category : public test_category\n   { \n+    test_derived_category() {}\n+\n     virtual const char*\n     name() const \n     { "}]}