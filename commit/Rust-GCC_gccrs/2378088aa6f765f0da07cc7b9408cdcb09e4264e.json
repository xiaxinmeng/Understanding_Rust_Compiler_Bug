{"sha": "2378088aa6f765f0da07cc7b9408cdcb09e4264e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM3ODA4OGFhNmY3NjVmMGRhMDdjYzdiOTQwOGNkY2IwOWU0MjY0ZQ==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1992-03-31T22:12:10Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1992-03-31T22:12:10Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r649", "tree": {"sha": "3ea4752a98e7e910ed799d320005b5c7cb72240f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ea4752a98e7e910ed799d320005b5c7cb72240f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2378088aa6f765f0da07cc7b9408cdcb09e4264e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2378088aa6f765f0da07cc7b9408cdcb09e4264e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2378088aa6f765f0da07cc7b9408cdcb09e4264e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2378088aa6f765f0da07cc7b9408cdcb09e4264e/comments", "author": null, "committer": null, "parents": [{"sha": "c733e0743670fb3041fc15395baa38e9f44908e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c733e0743670fb3041fc15395baa38e9f44908e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c733e0743670fb3041fc15395baa38e9f44908e7"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "979ad89f5ee7f827fc3c85c049db86e790260090", "filename": "gcc/cccp.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2378088aa6f765f0da07cc7b9408cdcb09e4264e/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2378088aa6f765f0da07cc7b9408cdcb09e4264e/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=2378088aa6f765f0da07cc7b9408cdcb09e4264e", "patch": "@@ -65,7 +65,6 @@ typedef unsigned char U_CHAR;\n #include <signal.h>\n \n #ifndef VMS\n-#include <sys/file.h>\n #ifndef USG\n #include <sys/time.h>\t\t/* for __DATE__ and __TIME__ */\n #include <sys/resource.h>\n@@ -886,6 +885,7 @@ main (argc, argv)\n   char **pend_assertion_options = (char **) xmalloc (argc * sizeof (char *));\n   int inhibit_predefs = 0;\n   int no_standard_includes = 0;\n+  int no_standard_cplusplus_includes = 0;\n   int missing_newline = 0;\n \n   /* Non-0 means don't output the preprocessed program.  */\n@@ -1266,6 +1266,9 @@ main (argc, argv)\n \t  /* -nostdinc causes no default include directories.\n \t     You must specify all include-file directories with -I.  */\n \t  no_standard_includes = 1;\n+\telse if (!strcmp (argv[i], \"-nostdinc++\"))\n+\t  /* -nostdinc++ causes no default C++-specific include directories. */\n+\t  no_standard_cplusplus_includes = 1;\n \telse if (!strcmp (argv[i], \"-noprecomp\"))\n \t  no_precomp = 1;\n \tbreak;\n@@ -1501,7 +1504,7 @@ main (argc, argv)\n     if (specd_prefix != 0 && default_len != 0)\n       for (p = include_defaults; p->fname; p++) {\n \t/* Some standard dirs are only for C++.  */\n-\tif (!p->cplusplus || cplusplus) {\n+\tif (!p->cplusplus || (cplusplus && !no_standard_cplusplus_includes)) {\n \t  /* Does this dir start with the prefix?  */\n \t  if (!strncmp (p->fname, default_prefix, default_len)) {\n \t    /* Yes; change prefix and add to search list.  */\n@@ -1533,7 +1536,7 @@ main (argc, argv)\n     /* Search ordinary names for GNU include directories.  */\n     for (p = include_defaults; p->fname; p++) {\n       /* Some standard dirs are only for C++.  */\n-      if (!p->cplusplus || cplusplus) {\n+      if (!p->cplusplus || (cplusplus && !no_standard_cplusplus_includes)) {\n \tstruct file_name_list *new\n \t  = (struct file_name_list *) xmalloc (sizeof (struct file_name_list));\n \tnew->control_macro = 0;"}, {"sha": "c67fcb463a5fba41911f98ab74bfe6ce197c311f", "filename": "gcc/gcc.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2378088aa6f765f0da07cc7b9408cdcb09e4264e/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2378088aa6f765f0da07cc7b9408cdcb09e4264e/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=2378088aa6f765f0da07cc7b9408cdcb09e4264e", "patch": "@@ -34,20 +34,19 @@ compilation is specified by a string called a \"spec\".  */\n #include <sys/types.h>\n #include <ctype.h>\n #include <signal.h>\n-#include <sys/file.h>\n #include <sys/stat.h>\n \n #include \"config.h\"\n #include \"obstack.h\"\n #include \"gvarargs.h\"\n \n-#ifdef USG\n #ifndef R_OK\n #define R_OK 4\n #define W_OK 2\n #define X_OK 1\n #endif\n \n+#ifdef USG\n #define vfork fork\n #endif /* USG */\n \n@@ -395,7 +394,7 @@ static struct compiler default_compilers[] =\n {\n   {\".c\", \"@c\"},\n   {\"@c\",\n-   \"cpp -lang-c %{nostdinc} %{C} %{v} %{A*} %{D*} %{U*} %{I*} %{i*} %{P}\\\n+   \"cpp -lang-c %{nostdinc*} %{C} %{v} %{A*} %{D*} %{U*} %{I*} %{i*} %{P}\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d}\\\n         -undef -D__GNUC__=2 %{ansi:-trigraphs -$ -D__STRICT_ANSI__}\\\n@@ -415,7 +414,7 @@ static struct compiler default_compilers[] =\n \t\t      %{c:%W{o*}%{!o*:-o %w%b.o}}%{!c:-o %d%w%b.o}\\\n                       %{!pipe:%g.s} %A\\n }}}}\"},\n   {\"-\",\n-   \"%{E:cpp -lang-c %{nostdinc} %{C} %{v} %{A*} %{D*} %{U*} %{I*} %{i*} %{P}\\\n+   \"%{E:cpp -lang-c %{nostdinc*} %{C} %{v} %{A*} %{D*} %{U*} %{I*} %{i*} %{P}\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d}\\\n         -undef -D__GNUC__=2 %{ansi:-trigraphs -$ -D__STRICT_ANSI__}\\\n@@ -427,7 +426,7 @@ static struct compiler default_compilers[] =\n     %{!E:%e-E required when input is from standard input}\"},\n   {\".m\", \"@objective-c\"},\n   {\"@objective-c\",\n-   \"cpp -lang-objc %{nostdinc} %{C} %{v} %{A*} %{D*} %{U*} %{I*} %{i*} %{P}\\\n+   \"cpp -lang-objc %{nostdinc*} %{C} %{v} %{A*} %{D*} %{U*} %{I*} %{i*} %{P}\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d}\\\n         -undef -D__OBJC__ -D__GNUC__=2 %{ansi:-trigraphs -$ -D__STRICT_ANSI__}\\\n@@ -450,7 +449,7 @@ static struct compiler default_compilers[] =\n   {\".h\", \"@c-header\"},\n   {\"@c-header\",\n    \"%{!E:%eCompilation of header file requested} \\\n-    cpp %{nostdinc} %{C} %{v} %{A*} %{D*} %{U*} %{I*} %{i*} %{P}\\\n+    cpp %{nostdinc*} %{C} %{v} %{A*} %{D*} %{U*} %{I*} %{i*} %{P}\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t %{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} \\\n         -undef -D__GNUC__=2 %{ansi:-trigraphs -$ -D__STRICT_ANSI__}\\\n@@ -463,7 +462,7 @@ static struct compiler default_compilers[] =\n   {\".cxx\", \"@c++\"},\n   {\".C\", \"@c++\"},\n   {\"@c++\",\n-   \"cpp -lang-c++ %{nostdinc} %{C} %{v} %{A*} %{D*} %{U*} %{I*} %{i*} %{P}\\\n+   \"cpp -lang-c++ %{nostdinc*} %{C} %{v} %{A*} %{D*} %{U*} %{I*} %{i*} %{P}\\\n \t%{C:%{!E:%eGNU C++ does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} \\\n \t-undef -D__GNUC__=2 -D__GNUG__=2 -D__cplusplus \\\n@@ -509,7 +508,7 @@ static struct compiler default_compilers[] =\n             %{c:%W{o*}%{!o*:-o %w%b.o}}%{!c:-o %d%w%b.o} %i %A\\n }\"},\n   {\".S\", \"@assembler-with-cpp\"},\n   {\"@assembler-with-cpp\",\n-   \"cpp -lang-asm %{nostdinc} %{C} %{v} %{A*} %{D*} %{U*} %{I*} %{i*} %{P}\\\n+   \"cpp -lang-asm %{nostdinc*} %{C} %{v} %{A*} %{D*} %{U*} %{I*} %{i*} %{P}\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{trigraphs} \\\n         -undef -$ %{!undef:%p %P} -D__ASSEMBLER__ \\\n@@ -533,16 +532,17 @@ static int n_default_compilers\n \n #ifdef LINK_LIBGCC_SPECIAL\n /* Have gcc do the search.  */\n+/* -u* was put back because both BSD and SysV seem to support it.  */\n static char *link_command_spec = \"\\\n %{!c:%{!M:%{!MM:%{!E:%{!S:ld %X %l %{o*} %{A} %{d} %{e*} %{m} %{N} %{n} \\\n-\t\t\t%{r} %{s} %{T*} %{t} %{x} %{z}\\\n+\t\t\t%{r} %{s} %{T*} %{t} %{u*} %{x} %{z}\\\n \t\t\t%{!A:%{!nostdlib:%S}} \\\n \t\t\t%{L*} %D %o %{!nostdlib:libgcc.a%s %L libgcc.a%s %{!A:%E}}\\n }}}}}\";\n #else\n /* Use -l and have the linker do the search.  */\n static char *link_command_spec = \"\\\n %{!c:%{!M:%{!MM:%{!E:%{!S:ld %X %l %{o*} %{A} %{d} %{e*} %{m} %{N} %{n} \\\n-\t\t\t%{r} %{s} %{T*} %{t} %{x} %{z}\\\n+\t\t\t%{r} %{s} %{T*} %{t} %{u*} %{x} %{z}\\\n \t\t\t%{!A:%{!nostdlib:%S}} \\\n \t\t\t%{L*} %D %o %{!nostdlib:-lgcc %L -lgcc %{!A:%E}}\\n }}}}}\";\n #endif"}]}