{"sha": "f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVkYTdhOTdmNTlhZDkzNGRmNmZkNmFiMWFjYTBhNDg1NzFhZTM5OQ==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2014-01-20T13:44:07Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-20T13:44:07Z"}, "message": "2014-01-20  Yannick Moy  <moy@adacore.com>\n\n\t* adabkend.adb, ali-util.adb, errout.adb, exp_ch7.adb,\n\t* exp_dbug.adb, freeze.adb, lib-xref.adb, restrict.adb,\n\t* sem_attr.adb, sem_ch4.adb, sem_ch5.adb, sem_ch6.adb, sem_ch8.adb,\n\t* sem_prag.adb, sem_res.adb, sem_util.adb Rename SPARK_Mode into\n\tGNATprove_Mode.\n\t* sem_ch13.adb: Remove blank.\n\t* exp_spark.adb, exp_spark.ads (Expand_SPARK_Call): Only replace\n\tsubprograms by alias for renamings, not for inherited primitive\n\toperations.\n\t* exp_util.adb (Expand_Subtype_From_Expr): Apply the expansion\n\tin GNATprove mode.\n\t(Remove_Side_Effects): Apply the removal in\n\tGNATprove mode, for the full analysis of expressions.\n\t* expander.adb (Expand): Call the light SPARK expansion in GNATprove\n\tmode.\n\t(Expander_Mode_Restore, Expander_Mode_Save_And_Set): Ignore\n\tsave/restore actions for Expander_Active flag in GNATprove mode,\n\tsimilar to what is done in ASIS mode.\n\t* frontend.adb (Frontend): Generic bodies are instantiated in\n\tGNATprove mode.\n\t* gnat1drv.adb (Adjust_Global_Switches): Set operating\n\tmode to Check_Semantics in GNATprove mode, although a light\n\texpansion is still performed.\n\t(Gnat1drv): Set Back_End_Mode to\n\tDeclarations_Only in GNATprove mode, and later on special case\n\tthe GNATprove mode to continue analysis anyway.\n\t* lib-writ.adb (Write_ALI): Always generate ALI files in\n\tGNATprove mode.\n\t* opt.adb, opt.ads (Full_Expander_Active): Make it equivalent to\n\tExpander_Active.\n\t(SPARK_Mode): Renamed as GNATprove_Mode.\n\t* sem_aggr.adb (Aggregate_Constraint_Checks): Add checks in the\n\ttree in GNATprove_Mode.\n\t* sem_ch12.adb (Analyze_Package_Instantiation): Always instantiate\n\tbody in GNATprove mode.\n\t(Need_Subprogram_Instance_Body): Always instantiate body in GNATprove\n\tmode.\n\t* sem_ch3.adb (Constrain_Index, Process_Range_Expr_In_Decl):\n\tMake sure side effects are removed in GNATprove mode.\n\nFrom-SVN: r206805", "tree": {"sha": "28136a11943ad5ecf1f77f1683891380d08d62e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28136a11943ad5ecf1f77f1683891380d08d62e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "69675d50f68e63d603b33d0d225686d136546a09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69675d50f68e63d603b33d0d225686d136546a09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69675d50f68e63d603b33d0d225686d136546a09"}], "stats": {"total": 377, "additions": 208, "deletions": 169}, "files": [{"sha": "06ed0b9e6b62acaa97353e429a0ae28078fba4c8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "patch": "@@ -1,3 +1,45 @@\n+2014-01-20  Yannick Moy  <moy@adacore.com>\n+\n+\t* adabkend.adb, ali-util.adb, errout.adb, exp_ch7.adb,\n+\t* exp_dbug.adb, freeze.adb, lib-xref.adb, restrict.adb,\n+\t* sem_attr.adb, sem_ch4.adb, sem_ch5.adb, sem_ch6.adb, sem_ch8.adb,\n+\t* sem_prag.adb, sem_res.adb, sem_util.adb Rename SPARK_Mode into\n+\tGNATprove_Mode.\n+\t* sem_ch13.adb: Remove blank.\n+\t* exp_spark.adb, exp_spark.ads (Expand_SPARK_Call): Only replace\n+\tsubprograms by alias for renamings, not for inherited primitive\n+\toperations.\n+\t* exp_util.adb (Expand_Subtype_From_Expr): Apply the expansion\n+\tin GNATprove mode.\n+\t(Remove_Side_Effects): Apply the removal in\n+\tGNATprove mode, for the full analysis of expressions.\n+\t* expander.adb (Expand): Call the light SPARK expansion in GNATprove\n+\tmode.\n+\t(Expander_Mode_Restore, Expander_Mode_Save_And_Set): Ignore\n+\tsave/restore actions for Expander_Active flag in GNATprove mode,\n+\tsimilar to what is done in ASIS mode.\n+\t* frontend.adb (Frontend): Generic bodies are instantiated in\n+\tGNATprove mode.\n+\t* gnat1drv.adb (Adjust_Global_Switches): Set operating\n+\tmode to Check_Semantics in GNATprove mode, although a light\n+\texpansion is still performed.\n+\t(Gnat1drv): Set Back_End_Mode to\n+\tDeclarations_Only in GNATprove mode, and later on special case\n+\tthe GNATprove mode to continue analysis anyway.\n+\t* lib-writ.adb (Write_ALI): Always generate ALI files in\n+\tGNATprove mode.\n+\t* opt.adb, opt.ads (Full_Expander_Active): Make it equivalent to\n+\tExpander_Active.\n+\t(SPARK_Mode): Renamed as GNATprove_Mode.\n+\t* sem_aggr.adb (Aggregate_Constraint_Checks): Add checks in the\n+\ttree in GNATprove_Mode.\n+\t* sem_ch12.adb (Analyze_Package_Instantiation): Always instantiate\n+\tbody in GNATprove mode.\n+\t(Need_Subprogram_Instance_Body): Always instantiate body in GNATprove\n+\tmode.\n+\t* sem_ch3.adb (Constrain_Index, Process_Range_Expr_In_Decl):\n+\tMake sure side effects are removed in GNATprove mode.\n+\n 2014-01-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <object>: Robustify tests"}, {"sha": "4c70a560d8f0c492cf115b67a789d6a21c47bf5f", "filename": "gcc/ada/adabkend.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fadabkend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fadabkend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadabkend.adb?ref=f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "patch": "@@ -235,12 +235,12 @@ package body Adabkend is\n                if Is_Switch (Argv) then\n                   Fail (\"Object file name missing after -gnatO\");\n \n-               --  In SPARK_Mode, such an object file is never written, and the\n-               --  call to Set_Output_Object_File_Name may fail (e.g. when the\n-               --  object file name does not have the expected suffix). So we\n-               --  skip that call when SPARK_Mode is set.\n+               --  In GNATprove_Mode, such an object file is never written, and\n+               --  the call to Set_Output_Object_File_Name may fail (e.g. when\n+               --  the object file name does not have the expected suffix). So\n+               --  we skip that call when GNATprove_Mode is set.\n \n-               elsif SPARK_Mode then\n+               elsif GNATprove_Mode then\n                   Output_File_Name_Seen := True;\n \n                else"}, {"sha": "98f79bafaeb7c0bf694e7f405875c5771c9957ca", "filename": "gcc/ada/ali-util.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fali-util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fali-util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali-util.adb?ref=f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "patch": "@@ -274,11 +274,11 @@ package body ALI.Util is\n                      Error_Msg (\"{ had errors, must be fixed, and recompiled\");\n                      Set_Name_Table_Info (Afile, Int (No_Unit_Id));\n \n-                  --  In formal verification mode, object files are never\n-                  --  generated, so No_Object=True is not considered an error.\n+                  --  In GNATprove mode, object files are never generated, so\n+                  --  No_Object=True is not considered an error.\n \n                   elsif ALIs.Table (Idread).No_Object\n-                    and then not SPARK_Mode\n+                    and then not GNATprove_Mode\n                     and then not Ignore_Errors\n                   then\n                      Error_Msg_File_1 := Withs.Table (W).Sfile;"}, {"sha": "ab4dcfe6fa964c3933e0b2890930a5be608accad", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "patch": "@@ -239,7 +239,7 @@ package body Errout is\n       --  an error status. These errors are handled in the driver of the\n       --  verification process instead.\n \n-      elsif SPARK_Mode and not Frame_Condition_Mode then\n+      elsif GNATprove_Mode and not Frame_Condition_Mode then\n          return False;\n \n       else\n@@ -2970,7 +2970,7 @@ package body Errout is\n          --  Suppress \"size too small\" errors in CodePeer mode and SPARK mode,\n          --  since pragma Pack is also ignored in these configurations.\n \n-         if CodePeer_Mode or SPARK_Mode then\n+         if CodePeer_Mode or GNATprove_Mode then\n             return True;\n \n          --  When a size is wrong for a frozen type there is no explicit size"}, {"sha": "a5238585b6c10556926aeaf46375dadfea71807c", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "patch": "@@ -937,7 +937,7 @@ package body Exp_Ch7 is\n       --  Do not create finalization masters in SPARK mode because they result\n       --  in unwanted expansion.\n \n-      elsif SPARK_Mode then\n+      elsif GNATprove_Mode then\n          return;\n       end if;\n \n@@ -2813,7 +2813,7 @@ package body Exp_Ch7 is\n       --  Do not perform this expansion in SPARK mode because it is not\n       --  necessary.\n \n-      if SPARK_Mode then\n+      if GNATprove_Mode then\n          return;\n       end if;\n \n@@ -2975,7 +2975,7 @@ package body Exp_Ch7 is\n       --  Do not perform this expansion in SPARK mode because we do not create\n       --  finalizers in the first place.\n \n-      if SPARK_Mode then\n+      if GNATprove_Mode then\n          return;\n       end if;\n \n@@ -3658,7 +3658,7 @@ package body Exp_Ch7 is\n       --  this node and enclosed expression are not expanded, so do not apply\n       --  any transformations here.\n \n-      elsif SPARK_Mode\n+      elsif GNATprove_Mode\n         and then Nkind (Wrap_Node) = N_Pragma\n         and then Get_Pragma_Id (Wrap_Node) = Pragma_Check\n       then"}, {"sha": "7d74ed13fa43dda7179537a161ba68833ef31f89", "filename": "gcc/ada/exp_dbug.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fexp_dbug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fexp_dbug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.adb?ref=f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "patch": "@@ -1314,7 +1314,7 @@ package body Exp_Dbug is\n       --  name as being qualified, as Qualify_Entity_Name may be called more\n       --  than once on the same entity.\n \n-      elsif SPARK_Mode then\n+      elsif GNATprove_Mode then\n          if Has_Homonym (Ent) then\n             Get_Name_String (Chars (Ent));\n             Append_Homonym_Number (Ent);"}, {"sha": "fb7aad2339765030e199b17ba8d9eb5c23295d2b", "filename": "gcc/ada/exp_spark.adb", "status": "modified", "additions": 20, "deletions": 44, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fexp_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fexp_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_spark.adb?ref=f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "patch": "@@ -31,7 +31,6 @@ with Sem_Aux;  use Sem_Aux;\n with Sem_Res;  use Sem_Res;\n with Sem_Util; use Sem_Util;\n with Sinfo;    use Sinfo;\n-with Stand;    use Stand;\n \n package body Exp_SPARK is\n \n@@ -94,51 +93,28 @@ package body Exp_SPARK is\n    -----------------------\n \n    procedure Expand_SPARK_Call (N : Node_Id) is\n-      Call_Node   : constant Node_Id := N;\n-      Parent_Subp : Entity_Id;\n-\n    begin\n-      --  Ignore if previous error\n-\n-      if Nkind (Call_Node) in N_Has_Etype\n-        and then Etype (Call_Node) = Any_Type\n-      then\n-         return;\n-      end if;\n-\n-      --  Call using access to subprogram with explicit dereference\n-\n-      if Nkind (Name (Call_Node)) = N_Explicit_Dereference then\n-         Parent_Subp := Empty;\n-\n-      --  Case of call to simple entry, where the Name is a selected component\n-      --  whose prefix is the task, and whose selector name is the entry name\n-\n-      elsif Nkind (Name (Call_Node)) = N_Selected_Component then\n-         Parent_Subp := Empty;\n-\n-      --  Case of call to member of entry family, where Name is an indexed\n-      --  component, with the prefix being a selected component giving the\n-      --  task and entry family name, and the index being the entry index.\n-\n-      elsif Nkind (Name (Call_Node)) = N_Indexed_Component then\n-         Parent_Subp := Empty;\n-\n-      --  Normal case\n-\n-      else\n-         Parent_Subp := Alias (Entity (Name (Call_Node)));\n-      end if;\n-\n       --  If the subprogram is a renaming, replace it in the call with the name\n-      --  of the actual subprogram being called.\n-\n-      if Present (Parent_Subp) then\n-         Parent_Subp := Ultimate_Alias (Parent_Subp);\n-\n-         --  The below setting of Entity is suspect, see F109-018 discussion???\n-\n-         Set_Entity (Name (Call_Node), Parent_Subp);\n+      --  of the actual subprogram being called. We distinguish renamings from\n+      --  inherited primitive operations, which both have an Alias component,\n+      --  by looking at the parent node of the entity. The entity for a\n+      --  renaming has the function or procedure specification node as\n+      --  parent, while an inherited primitive operation has the derived\n+      --  type declaration as parent.\n+\n+      if Nkind (Name (N)) in N_Has_Entity\n+        and then Present (Entity (Name (N)))\n+      then\n+         declare\n+            E : constant Entity_Id := Entity (Name (N));\n+         begin\n+            if Nkind_In (Parent (E), N_Function_Specification,\n+                                     N_Procedure_Specification)\n+              and then Present (Alias (E))\n+            then\n+               Set_Entity (Name (N), Ultimate_Alias (E));\n+            end if;\n+         end;\n       end if;\n    end Expand_SPARK_Call;\n "}, {"sha": "750d66b8722fc7a079f7c10acb19075e6ab5ce97", "filename": "gcc/ada/exp_spark.ads", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fexp_spark.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fexp_spark.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_spark.ads?ref=f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "patch": "@@ -23,10 +23,9 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This package implements a light expansion which is used in formal\n---  verification mode (SPARK_Mode = True). Instead of a complete expansion\n---  of nodes for code generation, this SPARK expansion targets generation\n---  of intermediate code for formal verification.\n+--  This package implements a light expansion which is used in GNATprove mode.\n+--  Instead of a complete expansion of nodes for code generation, this light\n+--  expansion targets generation of intermediate code for formal verification.\n \n --  Expand_SPARK is called directly by Expander.Expand.\n "}, {"sha": "5bac112681ed0c33539f1a5b48bb8c68ea676637", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "patch": "@@ -2034,12 +2034,22 @@ package body Exp_Util is\n       --  may be constants that depend on the bounds of a string literal, both\n       --  standard string types and more generally arrays of characters.\n \n-      if not Expander_Active\n+      --  In GNATprove mode, we also need the more precise subtype to be set.\n+\n+      if not (Expander_Active or GNATprove_Mode)\n         and then (No (Etype (Exp)) or else not Is_String_Type (Etype (Exp)))\n       then\n          return;\n       end if;\n \n+      --  In GNATprove mode, Unc_Type might not be complete when analyzing\n+      --  a generic unit. As generic units are not analyzed directly in\n+      --  GNATprove, return here rather than failing later.\n+\n+      if GNATprove_Mode and then No (Underlying_Type (Unc_Type)) then\n+         return;\n+      end if;\n+\n       if Nkind (Exp) = N_Slice then\n          declare\n             Slice_Type : constant Entity_Id := Etype (First_Index (Exp_Typ));\n@@ -6862,9 +6872,11 @@ package body Exp_Util is\n    --  Start of processing for Remove_Side_Effects\n \n    begin\n-      --  Handle cases in which there is nothing to do\n+      --  Handle cases in which there is nothing to do. In GNATprove mode,\n+      --  removal of side effects is useful for the light expansion of\n+      --  renamings.\n \n-      if not Expander_Active then\n+      if not (Expander_Active or (Full_Analysis and GNATprove_Mode)) then\n          return;\n       end if;\n \n@@ -7074,7 +7086,7 @@ package body Exp_Util is\n          --  free if the resulting value is captured by a variable or a\n          --  constant.\n \n-         if SPARK_Mode\n+         if GNATprove_Mode\n            and then Nkind (Parent (Exp)) = N_Object_Declaration\n          then\n             goto Leave;\n@@ -7119,7 +7131,7 @@ package body Exp_Util is\n          --  types, use a different approach which ignores the secondary stack\n          --  and \"copies\" the returned object.\n \n-         if SPARK_Mode then\n+         if GNATprove_Mode then\n             Res := New_Reference_To (Def_Id, Loc);\n             Ref_Type := Exp_Type;\n \n@@ -7156,7 +7168,7 @@ package body Exp_Util is\n             --  Do not generate a 'reference in SPARK mode since the access\n             --  type is not created in the first place.\n \n-            if SPARK_Mode then\n+            if GNATprove_Mode then\n                New_Exp := E;\n \n             --  Otherwise generate reference, marking the value as non-null"}, {"sha": "1fd1bc8a9edfd026667f8301d7f8160e4709679c", "filename": "gcc/ada/expander.adb", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fexpander.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fexpander.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexpander.adb?ref=f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "patch": "@@ -88,8 +88,9 @@ package body Expander is\n       --  The first is when are not generating code. In this mode the\n       --  Full_Analysis flag indicates whether we are performing a complete\n       --  analysis, in which case Full_Analysis = True or a pre-analysis in\n-      --  which case Full_Analysis = False. See the spec of Sem for more\n-      --  info on this.\n+      --  which case Full_Analysis = False. See the spec of Sem for more info\n+      --  on this. Additionally, the GNATprove_Mode flag indicates that a light\n+      --  expansion for formal verification should be used.\n       --\n       --  The second reason for the Expander_Active flag to be False is that\n       --  we are performing a pre-analysis. During pre-analysis all expansion\n@@ -107,7 +108,7 @@ package body Expander is\n       --  given that the expansion actions that would normally process it will\n       --  not take place. This prevents cascaded errors due to stack mismatch.\n \n-      if not Expander_Active then\n+      if not (Expander_Active or (Full_Analysis and GNATprove_Mode)) then\n          Set_Analyzed (N, Full_Analysis);\n \n          if Serious_Errors_Detected > 0\n@@ -127,10 +128,11 @@ package body Expander is\n          Debug_A_Entry (\"expanding  \", N);\n \n          begin\n-            --  In SPARK mode we only need a very limited subset of the usual\n-            --  expansions. This limited subset is implemented in Expand_SPARK.\n+            --  In GNATprove mode we only need a very limited subset of\n+            --  the usual expansions. This limited subset is implemented\n+            --  in Expand_SPARK.\n \n-            if SPARK_Mode then\n+            if GNATprove_Mode then\n                Expand_SPARK (N);\n \n             --  Here for normal non-SPARK mode\n@@ -503,10 +505,10 @@ package body Expander is\n \n    procedure Expander_Mode_Restore is\n    begin\n-      --  Not active (has no effect) in ASIS mode (see comments in spec of\n-      --  Expander_Mode_Save_And_Set).\n+      --  Not active (has no effect) in ASIS and GNATprove modes (see comments\n+      --  in spec of Expander_Mode_Save_And_Set).\n \n-      if ASIS_Mode then\n+      if ASIS_Mode or GNATprove_Mode then\n          return;\n       end if;\n \n@@ -530,10 +532,10 @@ package body Expander is\n \n    procedure Expander_Mode_Save_And_Set (Status : Boolean) is\n    begin\n-      --  Not active (has no effect) in ASIS mode (see comments in spec of\n-      --  Expander_Mode_Save_And_Set).\n+      --  Not active (has no effect) in ASIS and GNATprove modes (see comments\n+      --  in spec of Expander_Mode_Save_And_Set).\n \n-      if ASIS_Mode then\n+      if ASIS_Mode or GNATprove_Mode then\n          return;\n       end if;\n "}, {"sha": "6c8c649ac0d2316546c18f81ce1e916e7db3a75b", "filename": "gcc/ada/expander.ads", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fexpander.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fexpander.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexpander.ads?ref=f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -150,18 +150,20 @@ package Expander is\n    --  Saves the current setting of the Expander_Active flag on an internal\n    --  stack and then sets the flag to the given value.\n    --\n-   --  Note: this routine has no effect in ASIS_Mode. In ASIS_Mode, all\n-   --  expansion activity is always off, since we want the original semantic\n-   --  tree for ASIS purposes without any expansion. This is achieved by\n-   --  setting Expander_Active False in ASIS_Mode. In situations such as\n-   --  the call to Instantiate_Bodies in Frontend, Expander_Mode_Save_And_Set\n-   --  may be called to temporarily turn the expander on, but this will have\n-   --  no effect in ASIS mode.\n+   --  Note: this routine has no effect in ASIS and GNATprove modes. In ASIS\n+   --  mode, all expansion activity is always off, since we want the original\n+   --  semantic tree for ASIS purposes without any expansion. In GNATprove\n+   --  mode, a very light expansion is performed on specific nodes. Both are\n+   --  achieved by setting Expander_Active False in ASIS and GNATprove modes.\n+   --  In situations such as the call to Instantiate_Bodies in Frontend,\n+   --  Expander_Mode_Save_And_Set may be called to temporarily turn the\n+   --  expander on, but this will have no effect in ASIS and GNATprove modes.\n \n    procedure Expander_Mode_Restore;\n    --  Restores the setting of the Expander_Active flag using the top entry\n    --  pushed onto the stack by Expander_Mode_Save_And_Reset, popping the\n-   --  stack, except that if any errors have been detected, then the state\n-   --  of the flag is left set to False. Disabled for ASIS_Mode (see above).\n+   --  stack, except that if any errors have been detected, then the state of\n+   --  the flag is left set to False. Disabled for ASIS and GNATprove modes\n+   --  (see above).\n \n end Expander;"}, {"sha": "122d6b23cf647188d12d3278c9916b439fa42627", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "patch": "@@ -3280,7 +3280,7 @@ package body Freeze is\n            --  general, neither CodePeer not GNATprove care about the\n            --  internal representation of objects.\n \n-           and then not (CodePeer_Mode or SPARK_Mode)\n+           and then not (CodePeer_Mode or GNATprove_Mode)\n          then\n             --  If implicit packing enabled, do it\n \n@@ -4230,7 +4230,7 @@ package body Freeze is\n                     and then not Is_Limited_Composite (E)\n                     and then not Is_Packed (Root_Type (E))\n                     and then not Has_Component_Size_Clause (Root_Type (E))\n-                    and then not (CodePeer_Mode or SPARK_Mode)\n+                    and then not (CodePeer_Mode or GNATprove_Mode)\n                   then\n                      --  Compute number of elements in array\n "}, {"sha": "2d5c36f01196fb510d3f8f65e76dc6ad7894805c", "filename": "gcc/ada/frontend.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Ffrontend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Ffrontend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffrontend.adb?ref=f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "patch": "@@ -362,7 +362,7 @@ begin\n \n          if Operating_Mode = Generate_Code\n            or else (Operating_Mode = Check_Semantics\n-                     and then ASIS_Mode)\n+                     and then (ASIS_Mode or GNATprove_Mode))\n          then\n             Instantiate_Bodies;\n          end if;"}, {"sha": "f1bc2f802d6f9e1d34f7f9f2c8448a9d8f73835c", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "patch": "@@ -299,15 +299,16 @@ procedure Gnat1drv is\n          Formal_Extensions := True;\n       end if;\n \n-      --  Enable SPARK_Mode when using -gnatd.F switch\n+      --  Enable GNATprove_Mode when using -gnatd.F switch\n \n       if Debug_Flag_Dot_FF then\n-         SPARK_Mode := True;\n+         GNATprove_Mode := True;\n       end if;\n \n-      --  SPARK_Mode is also activated by default in the gnat2why executable\n+      --  GNATprove_Mode is also activated by default in the gnat2why\n+      --  executable.\n \n-      if SPARK_Mode then\n+      if GNATprove_Mode then\n \n          --  Set strict standard interpretation of compiler permissions\n \n@@ -384,11 +385,10 @@ procedure Gnat1drv is\n \n          Polling_Required := False;\n \n-         --  Set operating mode to Generate_Code, but full front-end expansion\n-         --  is not desirable in SPARK mode, so a light expansion is performed\n-         --  instead.\n+         --  Set operating mode to Check_Semantics, but a light front-end\n+         --  expansion is still performed.\n \n-         Operating_Mode := Generate_Code;\n+         Operating_Mode := Check_Semantics;\n \n          --  Skip call to gigi\n \n@@ -1054,17 +1054,13 @@ begin\n       elsif CodePeer_Mode then\n          Back_End_Mode := Generate_Object;\n \n-      --  It is not an error to analyze in SPARK mode a spec which requires a\n-      --  body, when the body is not available. During frame condition\n+      --  It is not an error to analyze in GNATprove mode a spec which requires\n+      --  a body, when the body is not available. During frame condition\n       --  generation, the corresponding ALI file is generated. During\n       --  translation to Why, Why code is generated for the spec.\n \n-      elsif SPARK_Mode then\n-         if Frame_Condition_Mode then\n-            Back_End_Mode := Declarations_Only;\n-         else\n-            Back_End_Mode := Generate_Object;\n-         end if;\n+      elsif GNATprove_Mode then\n+         Back_End_Mode := Declarations_Only;\n \n       --  In all other cases (specs which have bodies, generics, and bodies\n       --  where subunits are missing), we cannot generate code and we generate\n@@ -1168,10 +1164,11 @@ begin\n       --  since representations are largely symbolic there.\n \n       if Back_End_Mode = Declarations_Only\n-        and then (not (Back_Annotate_Rep_Info or Generate_SCIL)\n-                   or else Main_Kind = N_Subunit\n-                   or else Targparm.Frontend_Layout_On_Target\n-                   or else Targparm.VM_Target /= No_VM)\n+           and then\n+         (not (Back_Annotate_Rep_Info or Generate_SCIL or GNATprove_Mode)\n+           or else Main_Kind = N_Subunit\n+           or else Targparm.Frontend_Layout_On_Target\n+           or else Targparm.VM_Target /= No_VM)\n       then\n          Sem_Ch13.Validate_Unchecked_Conversions;\n          Sem_Ch13.Validate_Address_Clauses;"}, {"sha": "015c628b87bf60db48f969de1a7aadc6e0b55316", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "patch": "@@ -841,7 +841,7 @@ package body Lib.Writ is\n               --  files, which are required to compute frame conditions\n               --  of subprograms.\n \n-              or else SPARK_Mode\n+              or else GNATprove_Mode\n             then\n                Write_Info_Tab (25);\n \n@@ -973,9 +973,10 @@ package body Lib.Writ is\n \n       --  If we are not generating code, and there is an up to date ALI file\n       --  file accessible, read it, and acquire the compilation arguments from\n-      --  this file.\n+      --  this file. In GNATprove mode, always generate the ALI file, which\n+      --  contains a special section for formal verification.\n \n-      if Operating_Mode /= Generate_Code then\n+      if Operating_Mode /= Generate_Code and then not GNATprove_Mode then\n          if Up_To_Date_ALI_File_Exists then\n             Update_Tables_From_ALI_File;\n             return;\n@@ -1488,7 +1489,7 @@ package body Lib.Writ is\n \n       --  Output SPARK cross-reference information if needed\n \n-      if Opt.Xref_Active and then SPARK_Mode then\n+      if Opt.Xref_Active and then GNATprove_Mode then\n          SPARK_Specific.Collect_SPARK_Xrefs (Sdep_Table => Sdep_Table,\n                                              Num_Sdep   => Num_Sdep);\n          SPARK_Specific.Output_SPARK_Xrefs;"}, {"sha": "4cf52c9bd2b75306a56b5881bd5becd89759ddfd", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "patch": "@@ -644,7 +644,7 @@ package body Lib.Xref is\n             --  in SPARK mode when the related context comes from an instance.\n \n            or else\n-             (SPARK_Mode\n+             (GNATprove_Mode\n                 and then In_Extended_Main_Code_Unit (N)\n                 and then (Typ = 'm' or else Typ = 'r' or else Typ = 's'))\n          then\n@@ -899,7 +899,7 @@ package body Lib.Xref is\n          and then\n            (Instantiation_Location (Sloc (N)) = No_Location\n              or else Typ = 'i'\n-             or else SPARK_Mode)\n+             or else GNATprove_Mode)\n \n         --  Ignore dummy references\n \n@@ -986,7 +986,7 @@ package body Lib.Xref is\n          --  the renaming, which is needed to compute a valid set of effects\n          --  (reads, writes) for the enclosing subprogram.\n \n-         if SPARK_Mode then\n+         if GNATprove_Mode then\n             Ent := Get_Through_Renamings (Ent);\n \n             --  If no enclosing object, then it could be a reference to any\n@@ -1015,7 +1015,7 @@ package body Lib.Xref is\n             Actual_Typ := 'P';\n          end if;\n \n-         if SPARK_Mode then\n+         if GNATprove_Mode then\n             Ref := Sloc (Nod);\n             Def := Sloc (Ent);\n "}, {"sha": "298b7e3413f0e12628e6ece82b5179e0d9197d32", "filename": "gcc/ada/opt.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fopt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fopt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.adb?ref=f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "patch": "@@ -44,7 +44,7 @@ package body Opt is\n \n    function Full_Expander_Active return Boolean is\n    begin\n-      return Expander_Active and not SPARK_Mode;\n+      return Expander_Active;\n    end Full_Expander_Active;\n \n    ----------------------------------"}, {"sha": "ea5f1796eb5b4b2788f86dc89ae656df65be5fb3", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "patch": "@@ -1996,7 +1996,7 @@ package Opt is\n    -----------------------------------\n \n    Frame_Condition_Mode : Boolean := False;\n-   --  Specific mode to be used in combination with SPARK_Mode. If set to\n+   --  Specific mode to be used in combination with GNATprove_Mode. If set to\n    --  true, ALI files containing the frame conditions (global effects) are\n    --  generated, and Why files are *not* generated. If not true, Why files\n    --  are generated. Set by debug flag -gnatd.G.\n@@ -2010,7 +2010,7 @@ package Opt is\n    --  The mode applicable to the whole compilation. The global mode can be set\n    --  in a configuration file such as gnat.adc.\n \n-   SPARK_Mode : Boolean := False;\n+   GNATprove_Mode : Boolean := False;\n    --  Specific compiling mode targeting formal verification through the\n    --  generation of Why code for those parts of the input code that belong to\n    --  the SPARK 2014 subset of Ada. Set True by the gnat2why executable or by"}, {"sha": "ff2d7eb93a6d55acb41d673f7b129844bb3c9974", "filename": "gcc/ada/restrict.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Frestrict.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Frestrict.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.adb?ref=f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "patch": "@@ -538,7 +538,7 @@ package body Restrict is\n       --  set in gnat1drv.adb so that we have consistency between each\n       --  compilation.\n \n-      if CodePeer_Mode or SPARK_Mode then\n+      if CodePeer_Mode or GNATprove_Mode then\n          return;\n       end if;\n "}, {"sha": "672459307f640a0267894833e8fc455a1e2c1785", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "patch": "@@ -454,10 +454,14 @@ package body Sem_Aggr is\n          Check_Unset_Reference (Exp);\n       end if;\n \n-      --  This is really expansion activity, so make sure that expansion\n-      --  is on and is allowed.\n+      --  This is really expansion activity, so make sure that expansion is\n+      --  on and is allowed. In GNATprove mode, we also want check flags to be\n+      --  added in the tree, so that the formal verification can rely on those\n+      --  to be present.\n \n-      if not Expander_Active or else In_Spec_Expression then\n+      if not (Expander_Active or GNATprove_Mode)\n+        or In_Spec_Expression\n+      then\n          return;\n       end if;\n \n@@ -996,10 +1000,10 @@ package body Sem_Aggr is\n       --  frozen so that initialization procedures can properly be called\n       --  in the resolution that follows.  The replacement of boxes with\n       --  initialization calls is properly an expansion activity but it must\n-      --  be done during revolution.\n+      --  be done during resolution.\n \n       if Expander_Active\n-        and then  Present (Component_Associations (N))\n+        and then Present (Component_Associations (N))\n       then\n          declare\n             Comp : Node_Id;"}, {"sha": "d6ca5972734adaa37847a8d657bf00fe4677b1c6", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "patch": "@@ -4499,7 +4499,7 @@ package body Sem_Attr is\n          --  not suffer from the out-of-order issue described above. Thus, this\n          --  expansion is skipped in SPARK mode.\n \n-         if not Is_Entity_Name (P) and then not SPARK_Mode then\n+         if not Is_Entity_Name (P) and then not GNATprove_Mode then\n             P_Type := Base_Type (P_Type);\n             Set_Etype (N, P_Type);\n             Set_Etype (P, P_Type);"}, {"sha": "f509ba460ca5b4f466594718ed5dece4d8243af9", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "patch": "@@ -3616,7 +3616,7 @@ package body Sem_Ch12 is\n \n          --  We instantiate the body if we are generating code, if we are\n          --  generating cross-reference information, or if we are building\n-         --  trees for ASIS use.\n+         --  trees for ASIS use or GNATprove use.\n \n          declare\n             Enclosing_Body_Present : Boolean := False;\n@@ -3724,7 +3724,7 @@ package body Sem_Ch12 is\n                 and then not Inline_Now\n                 and then (Operating_Mode = Generate_Code\n                            or else (Operating_Mode = Check_Semantics\n-                                     and then ASIS_Mode));\n+                                     and then (ASIS_Mode or GNATprove_Mode)));\n \n             --  If front_end_inlining is enabled, do not instantiate body if\n             --  within a generic context.\n@@ -4390,17 +4390,18 @@ package body Sem_Ch12 is\n            or else Is_Inlined (Subp)\n            or else Is_Inlined (Alias (Subp)))\n \n-        --  Must be generating code or analyzing code in ASIS mode\n+        --  Must be generating code or analyzing code in ASIS mode or GNATprove\n+        --  mode.\n \n         and then (Operating_Mode = Generate_Code\n                    or else (Operating_Mode = Check_Semantics\n-                             and then ASIS_Mode))\n+                             and then (ASIS_Mode or GNATprove_Mode)))\n \n         --  The body is needed when generating code (full expansion), in ASIS\n-        --  mode for other tools, and in SPARK mode (special expansion) for\n+        --  mode for other tools, and in GNATprove mode (special expansion) for\n         --  formal verification of the body itself.\n \n-        and then (Expander_Active or ASIS_Mode)\n+        and then (Expander_Active or ASIS_Mode or GNATprove_Mode)\n \n         --  No point in inlining if ABE is inevitable\n "}, {"sha": "fa5ed8d22904699e254b082f40cc23d494c5e6ad", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "patch": "@@ -2718,7 +2718,7 @@ package body Sem_Ch13 is\n                      Prepend (Aitem,\n                        Visible_Declarations (Specification (N)));\n \n-                  elsif Nkind (N) =  N_Package_Instantiation then\n+                  elsif Nkind (N) = N_Package_Instantiation then\n                      declare\n                         Spec : constant Node_Id :=\n                                  Specification (Instance_Spec (N));"}, {"sha": "86e233bbe528c91c4da7a5d7942a6788444ef88b", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "patch": "@@ -10084,7 +10084,7 @@ package body Sem_Ch3 is\n                --  SPARK mode. Since this is legal code with respect to theorem\n                --  proving, do not emit the error.\n \n-               if SPARK_Mode\n+               if GNATprove_Mode\n                  and then Nkind (Exp) = N_Function_Call\n                  and then Nkind (Parent (Exp)) = N_Object_Declaration\n                  and then not Comes_From_Source\n@@ -12223,12 +12223,12 @@ package body Sem_Ch3 is\n          --  needed, since checks may cause duplication of the expressions\n          --  which must not be reevaluated.\n \n-         --  The forced evaluation removes side effects from expressions,\n-         --  which should occur also in SPARK mode. Otherwise, we end up with\n+         --  The forced evaluation removes side effects from expressions, which\n+         --  should occur also in GNATprove mode. Otherwise, we end up with\n          --  unexpected insertions of actions at places where this is not\n          --  supposed to occur, e.g. on default parameters of a call.\n \n-         if Expander_Active then\n+         if Expander_Active or GNATprove_Mode then\n             Force_Evaluation (Low_Bound (R));\n             Force_Evaluation (High_Bound (R));\n          end if;\n@@ -18865,11 +18865,11 @@ package body Sem_Ch3 is\n             --  duplication of the expression without forcing evaluation.\n \n             --  The forced evaluation removes side effects from expressions,\n-            --  which should occur also in SPARK mode. Otherwise, we end up\n+            --  which should occur also in GNATprove mode. Otherwise, we end up\n             --  with unexpected insertions of actions at places where this is\n             --  not supposed to occur, e.g. on default parameters of a call.\n \n-            if Expander_Active then\n+            if Expander_Active or GNATprove_Mode then\n                Force_Evaluation (Lo);\n                Force_Evaluation (Hi);\n             end if;\n@@ -18980,11 +18980,11 @@ package body Sem_Ch3 is\n       --  Case of other than an explicit N_Range node\n \n       --  The forced evaluation removes side effects from expressions, which\n-      --  should occur also in SPARK mode. Otherwise, we end up with unexpected\n-      --  insertions of actions at places where this is not supposed to occur,\n-      --  e.g. on default parameters of a call.\n+      --  should occur also in GNATprove mode. Otherwise, we end up with\n+      --  unexpected insertions of actions at places where this is not\n+      --  supposed to occur, e.g. on default parameters of a call.\n \n-      elsif Expander_Active then\n+      elsif Expander_Active or GNATprove_Mode then\n          Get_Index_Bounds (R, Lo, Hi);\n          Force_Evaluation (Lo);\n          Force_Evaluation (Hi);"}, {"sha": "d458192c63be268e7374e153cf1237e49bc8b1ab", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "patch": "@@ -1823,7 +1823,7 @@ package body Sem_Ch4 is\n       --  In formal verification mode, keep track of all reads and writes\n       --  through explicit dereferences.\n \n-      if SPARK_Mode then\n+      if GNATprove_Mode then\n          SPARK_Specific.Generate_Dereference (N);\n       end if;\n \n@@ -4613,7 +4613,7 @@ package body Sem_Ch4 is\n                      --  In SPARK mode, this is made into an error to simplify\n                      --  the processing of the formal verification backend.\n \n-                     if SPARK_Mode then\n+                     if GNATprove_Mode then\n                         Apply_Compile_Time_Constraint_Error\n                           (N, \"component not present in }\",\n                            CE_Discriminant_Check_Failed,"}, {"sha": "ec7c12e8df606ba990b578bf712438c95fe504bd", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "patch": "@@ -1712,7 +1712,7 @@ package body Sem_Ch5 is\n         --  Do not perform this expansion in SPARK mode, since the formal\n         --  verification directly deals with the source form of the iterator.\n \n-        and then not SPARK_Mode\n+        and then not GNATprove_Mode\n       then\n          declare\n             Id   : constant Entity_Id := Make_Temporary (Loc, 'R', Iter_Name);"}, {"sha": "3f335360573fe778899871172bfa5a0ea5e54d1c", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "patch": "@@ -1151,7 +1151,7 @@ package body Sem_Ch6 is\n          --  prepares the contract assertions for generic subprograms or for\n          --  ASIS. Do not generate contract checks in SPARK mode.\n \n-         if not SPARK_Mode then\n+         if not GNATprove_Mode then\n             Expand_Subprogram_Contract (N, Gen_Id, Body_Id);\n          end if;\n \n@@ -3188,7 +3188,7 @@ package body Sem_Ch6 is\n       --  prepares the contract assertions for generic subprograms or for ASIS.\n       --  Do not generate contract checks in SPARK mode.\n \n-      if not SPARK_Mode then\n+      if not GNATprove_Mode then\n          Expand_Subprogram_Contract (N, Spec_Id, Body_Id);\n       end if;\n "}, {"sha": "7f60859a79b52c5f3964ca8b5fe2b57f74912c33", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "patch": "@@ -5079,7 +5079,7 @@ package body Sem_Ch8 is\n \n             if Is_Object (E)\n               and then Present (Renamed_Object (E))\n-              and then not SPARK_Mode\n+              and then not GNATprove_Mode\n             then\n                Generate_Reference (E, N);\n "}, {"sha": "d08f13319b310a010f1818c2ee206101c054b10f", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "patch": "@@ -4556,7 +4556,7 @@ package body Sem_Prag is\n             --  N_Contract node.\n \n             if Acts_As_Spec (PO)\n-              and then (SPARK_Mode or Formal_Extensions)\n+              and then (GNATprove_Mode or Formal_Extensions)\n             then\n                declare\n                   Prag : constant Node_Id := New_Copy_Tree (N);\n@@ -4596,7 +4596,7 @@ package body Sem_Prag is\n             --  where there is no later point at which the aspect will be\n             --  analyzed.\n \n-            if SPARK_Mode or else ASIS_Mode then\n+            if GNATprove_Mode or else ASIS_Mode then\n                Analyze_Pre_Post_Condition_In_Decl_Part\n                  (N, Defining_Entity (Unit (Parent (PO))));\n             end if;\n@@ -8345,7 +8345,9 @@ package body Sem_Prag is\n          --  user code: we want to generate checks for analysis purposes, as\n          --  set respectively by -gnatC and -gnatd.F\n \n-         if (CodePeer_Mode or SPARK_Mode) and then Comes_From_Source (N) then\n+         if (CodePeer_Mode or GNATprove_Mode)\n+           and then Comes_From_Source (N)\n+         then\n             return;\n          end if;\n \n@@ -13700,7 +13702,7 @@ package body Sem_Prag is\n             --  in these modes.\n \n             if not Restriction_Active (No_Initialize_Scalars)\n-              and then not (CodePeer_Mode or SPARK_Mode)\n+              and then not (CodePeer_Mode or GNATprove_Mode)\n             then\n                Init_Or_Norm_Scalars := True;\n                Initialize_Scalars := True;\n@@ -13819,7 +13821,7 @@ package body Sem_Prag is\n             --  Pragma always active unless in CodePeer or SPARK mode, since\n             --  this causes walk order issues.\n \n-            if not (CodePeer_Mode or SPARK_Mode) then\n+            if not (CodePeer_Mode or GNATprove_Mode) then\n                Process_Inline (Enabled);\n             end if;\n \n@@ -15460,7 +15462,7 @@ package body Sem_Prag is\n             --  incorrect negative results in SPARK mode, so ignore this pragma\n             --  in these modes.\n \n-            if not (CodePeer_Mode or SPARK_Mode) then\n+            if not (CodePeer_Mode or GNATprove_Mode) then\n                Normalize_Scalars := True;\n                Init_Or_Norm_Scalars := True;\n             end if;\n@@ -15921,7 +15923,7 @@ package body Sem_Prag is\n                   --  complex front-end expansions related to pragma Pack,\n                   --  so disable handling of pragma Pack in these cases.\n \n-                  if CodePeer_Mode or SPARK_Mode then\n+                  if CodePeer_Mode or GNATprove_Mode then\n                      null;\n \n                   --  Don't attempt any packing for VM targets. We possibly"}, {"sha": "12d9d3168119c64f766b1e1efe96860b3878bbc6", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "patch": "@@ -1693,7 +1693,7 @@ package body Sem_Res is\n       --  case of Ada 2012 constructs such as quantified expressions, which are\n       --  expanded in two separate steps.\n \n-      if SPARK_Mode then\n+      if GNATprove_Mode then\n          Analyze_And_Resolve (N, T);\n       else\n          Analyze_And_Resolve (N, T, Suppress => All_Checks);\n@@ -4206,7 +4206,7 @@ package body Sem_Res is\n               --  in scope at the point of reference, so the reference should\n               --  be ignored for computing effects of subprograms.\n \n-              and then not SPARK_Mode\n+              and then not GNATprove_Mode\n             then\n                Set_Entity (Selector_Name (Parent (A)), F);\n                Generate_Reference (F, Selector_Name (Parent (A)));"}, {"sha": "7a1920c6c0a0cd59c835f0aafc99b639a461e2c3", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5da7a97f59ad934df6fd6ab1aca0a48571ae399/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "patch": "@@ -12802,7 +12802,7 @@ package body Sem_Util is\n                --  In formal verification mode, keep track of all reads and\n                --  writes through explicit dereferences.\n \n-               if SPARK_Mode then\n+               if GNATprove_Mode then\n                   SPARK_Specific.Generate_Dereference (N, 'm');\n                end if;\n \n@@ -12897,11 +12897,12 @@ package body Sem_Util is\n \n                --  Generate a reference only if the assignment comes from\n                --  source. This excludes, for example, calls to a dispatching\n-               --  assignment operation when the left-hand side is tagged.\n+               --  assignment operation when the left-hand side is tagged. In\n+               --  GNATprove mode, we need those references also on generated\n+               --  code, as these are used to compute the local effects of\n+               --  subprograms.\n \n-               --  Why is SPARK mode different here ???\n-\n-               if Modification_Comes_From_Source or SPARK_Mode then\n+               if Modification_Comes_From_Source or GNATprove_Mode then\n                   Generate_Reference (Ent, Exp, 'm');\n \n                   --  If the target of the assignment is the bound variable"}]}