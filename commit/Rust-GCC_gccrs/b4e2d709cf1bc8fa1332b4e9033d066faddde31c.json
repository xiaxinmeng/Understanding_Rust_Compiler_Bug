{"sha": "b4e2d709cf1bc8fa1332b4e9033d066faddde31c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRlMmQ3MDljZjFiYzhmYTEzMzJiNGU5MDMzZDA2NmZhZGRkZTMxYw==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2003-10-24T02:28:37Z"}, "committer": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2003-10-24T02:28:37Z"}, "message": "adadecode.h, [...]: Convert to ISO C90 declarations and definitions.\n\n\t* adadecode.h, atree.h, elists.h, namet.h, nlists.h, raise.h,\n\tstringt.h: Convert to ISO C90 declarations and definitions.\n\nFrom-SVN: r72877", "tree": {"sha": "88b1021b4a595fc67a1bc99941b3db47b9dc7dcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88b1021b4a595fc67a1bc99941b3db47b9dc7dcb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4e2d709cf1bc8fa1332b4e9033d066faddde31c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e2d709cf1bc8fa1332b4e9033d066faddde31c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4e2d709cf1bc8fa1332b4e9033d066faddde31c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e2d709cf1bc8fa1332b4e9033d066faddde31c/comments", "author": null, "committer": null, "parents": [{"sha": "1b24cd79cbe08c9391202b83b39ec0d8a6e92800", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b24cd79cbe08c9391202b83b39ec0d8a6e92800", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b24cd79cbe08c9391202b83b39ec0d8a6e92800"}], "stats": {"total": 161, "additions": 73, "deletions": 88}, "files": [{"sha": "b7dccce0520228d481c8ccf22ebfa6c22cd051db", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e2d709cf1bc8fa1332b4e9033d066faddde31c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e2d709cf1bc8fa1332b4e9033d066faddde31c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b4e2d709cf1bc8fa1332b4e9033d066faddde31c", "patch": "@@ -1,3 +1,8 @@\n+2003-10-23  Nathanael Nerode  <neroden@gcc.gnu.org>\n+\n+\t* adadecode.h, atree.h, elists.h, namet.h, nlists.h, raise.h,\n+\tstringt.h: Convert to ISO C90 declarations and definitions.\n+\n 2003-10-23  Thomas Quinot  <quinot@act-europe.fr>\n \n \tPR ada/11978:"}, {"sha": "73d8f3e8137572edd4df487ef5f9dd4e65caf440", "filename": "gcc/ada/adadecode.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e2d709cf1bc8fa1332b4e9033d066faddde31c/gcc%2Fada%2Fadadecode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e2d709cf1bc8fa1332b4e9033d066faddde31c/gcc%2Fada%2Fadadecode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadadecode.h?ref=b4e2d709cf1bc8fa1332b4e9033d066faddde31c", "patch": "@@ -42,9 +42,9 @@\n    verbose information).\n    VERBOSE is nonzero if more information about the entity is to be\n    added at the end of the Ada name and surrounded by ( and ).  */\n-extern void __gnat_decode PARAMS ((const char *, char *, int));\n+extern void __gnat_decode (const char *, char *, int);\n \n /* ada_demangle is added for COMPATIBILITY ONLY. It has the name of the\n    function used in the binutils and GDB. Always consider using __gnat_decode\n    instead of ada_demangle. Caller must free the pointer returned.  */\n-extern char *ada_demangle PARAMS ((const char *));\n+extern char *ada_demangle (const char *);"}, {"sha": "7397f4e816f041ecd158f85cba1ab7c2f92fe357", "filename": "gcc/ada/atree.h", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e2d709cf1bc8fa1332b4e9033d066faddde31c/gcc%2Fada%2Fatree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e2d709cf1bc8fa1332b4e9033d066faddde31c/gcc%2Fada%2Fatree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.h?ref=b4e2d709cf1bc8fa1332b4e9033d066faddde31c", "patch": "@@ -274,7 +274,7 @@ extern struct Node *Nodes_Ptr;\n \n \n #define Parent atree__parent\n-extern Node_Id Parent PARAMS((Node_Id));\n+extern Node_Id Parent (Node_Id);\n \n /* Overloaded Functions:\n \n@@ -287,24 +287,22 @@ typedef Int Tree_Id;\n /* These two functions can only be used for Node_Id and List_Id values and\n    they work in the C version because Empty = No_List = 0.  */\n \n-static Boolean No\tPARAMS ((Tree_Id));\n-static Boolean Present\tPARAMS ((Tree_Id));\n+static Boolean No\t(Tree_Id);\n+static Boolean Present\t(Tree_Id);\n \n INLINE Boolean\n-No (N)\n-     Tree_Id N;\n+No (Tree_Id N)\n {\n   return N == Empty;\n }\n \n INLINE Boolean\n-Present (N)\n-     Tree_Id N;\n+Present (Tree_Id N)\n {\n   return N != Empty;\n }\n \n-extern Node_Id Parent\t\tPARAMS((Tree_Id));\n+extern Node_Id Parent\t\t(Tree_Id);\n \n #define Current_Error_Node atree__current_error_node\n extern Node_Id Current_Error_Node;"}, {"sha": "9869f553f4f16cb9c79745c192d8708f3129df86", "filename": "gcc/ada/elists.h", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e2d709cf1bc8fa1332b4e9033d066faddde31c/gcc%2Fada%2Felists.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e2d709cf1bc8fa1332b4e9033d066faddde31c/gcc%2Fada%2Felists.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Felists.h?ref=b4e2d709cf1bc8fa1332b4e9033d066faddde31c", "patch": "@@ -56,36 +56,32 @@ extern struct Elmt_Item *Elmts_Ptr;\n \n /* Element List Access Functions:  */\n \n-static Node_Id Node\t\tPARAMS ((Elmt_Id));\n-static Elmt_Id First_Elmt\tPARAMS ((Elist_Id));\n-static Elmt_Id Last_Elmt\tPARAMS ((Elist_Id));\n-static Elmt_Id Next_Elmt\tPARAMS ((Elmt_Id));\n-static Boolean Is_Empty_Elmt_List PARAMS ((Elist_Id));\n+static Node_Id Node\t\t(Elmt_Id);\n+static Elmt_Id First_Elmt\t(Elist_Id);\n+static Elmt_Id Last_Elmt\t(Elist_Id);\n+static Elmt_Id Next_Elmt\t(Elmt_Id);\n+static Boolean Is_Empty_Elmt_List (Elist_Id);\n \n INLINE Node_Id\n-Node (Elmt)\n-     Elmt_Id Elmt;\n+Node (Elmt_Id Elmt)\n {\n   return Elmts_Ptr[Elmt - First_Elmt_Id].node;\n }\n \n INLINE Elmt_Id\n-First_Elmt (List)\n-     Elist_Id List;\n+First_Elmt (Elist_Id List)\n {\n   return Elists_Ptr[List - First_Elist_Id].first;\n }\n \n INLINE Elmt_Id\n-Last_Elmt (List)\n-     Elist_Id List;\n+Last_Elmt (Elist_Id List)\n {\n   return Elists_Ptr[List - First_Elist_Id].last;\n }\n \n INLINE Elmt_Id\n-Next_Elmt (Node)\n-     Elmt_Id Node;\n+Next_Elmt (Elmt_Id Node)\n {\n   Int N = Elmts_Ptr[Node - First_Elmt_Id].next;\n \n@@ -96,8 +92,7 @@ Next_Elmt (Node)\n }\n \n INLINE Boolean\n-Is_Empty_Elmt_List (Id)\n-     Elist_Id Id;\n+Is_Empty_Elmt_List (Elist_Id Id)\n {\n   return Elists_Ptr[Id - First_Elist_Id].first == No_Elmt;\n }"}, {"sha": "7fd1a1141b90e81851f4897931df85f3098db4cf", "filename": "gcc/ada/namet.h", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e2d709cf1bc8fa1332b4e9033d066faddde31c/gcc%2Fada%2Fnamet.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e2d709cf1bc8fa1332b4e9033d066faddde31c/gcc%2Fada%2Fnamet.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.h?ref=b4e2d709cf1bc8fa1332b4e9033d066faddde31c", "patch": "@@ -59,11 +59,10 @@ extern Int namet__name_len;\n    strings we want are sitting in the name strings table in exactly the form\n    we need them (null terminated), we just point to the name directly. */\n \n-static char *Get_Name_String PARAMS ((Name_Id));\n+static char *Get_Name_String (Name_Id);\n \n INLINE char *\n-Get_Name_String (Id)\n-     Name_Id Id;\n+Get_Name_String (Name_Id Id)\n {\n   return Name_Chars_Ptr + Names_Ptr[Id - First_Name_Id].Name_Chars_Index + 1;\n }\n@@ -73,13 +72,12 @@ Get_Name_String (Id)\n    wide characters are put back in their external form, and character literals\n    are also returned in their external form (with surrounding apostrophes) */\n \n-extern void namet__get_decoded_name_string PARAMS ((Name_Id));\n+extern void namet__get_decoded_name_string (Name_Id);\n \n-static char *Get_Decoded_Name_String PARAMS ((Name_Id));\n+static char *Get_Decoded_Name_String (Name_Id);\n \n INLINE char *\n-Get_Decoded_Name_String (Id)\n-     Name_Id Id;\n+Get_Decoded_Name_String (Name_Id Id)\n {\n   namet__get_decoded_name_string (Id);\n   Name_Buffer[Name_Len] = 0;\n@@ -90,15 +88,15 @@ Get_Decoded_Name_String (Id)\n    package body entity suffixes stripped, and also all letters are upper\n    cased.  This is used fo rbuilding the enumeration literal table. */\n \n-extern void casing__set_all_upper_case PARAMS ((void));\n+extern void casing__set_all_upper_case (void);\n \n /* The following routines and variables are not part of Namet, but we\n    include the header here since it seems the best place for it.  */\n \n #define Get_Encoded_Type_Name exp_dbug__get_encoded_type_name\n-extern Boolean Get_Encoded_Type_Name PARAMS ((Entity_Id));\n+extern Boolean Get_Encoded_Type_Name (Entity_Id);\n #define Get_Variant_Encoding exp_dbug__get_variant_encoding\n-extern void Get_Variant_Encoding PARAMS ((Entity_Id));\n+extern void Get_Variant_Encoding (Entity_Id);\n \n #define Spec_Context_List exp_dbug__spec_context_list\n #define Body_Context_List exp_dbug__body_context_list\n@@ -108,7 +106,7 @@ extern char *Spec_Context_List, *Body_Context_List;\n extern char *Spec_Filename, *Body_Filename;\n \n #define Is_Non_Ada_Error exp_ch11__is_non_ada_error\n-extern Boolean Is_Non_Ada_Error PARAMS ((Entity_Id));\n+extern Boolean Is_Non_Ada_Error (Entity_Id);\n \n /* Here are some functions in sinput.adb we call from a-trans.c.  */\n typedef Nat Source_File_Index;\n@@ -120,8 +118,8 @@ typedef Int Logical_Line_Number;\n #define Get_Source_File_Index sinput__get_source_file_index\n #define Get_Logical_Line_Number sinput__get_logical_line_number\n \n-extern File_Name_Type Debug_Source_Name\tPARAMS ((Source_File_Index));\n-extern File_Name_Type Full_Debug_Name\tPARAMS ((Source_File_Index));\n-extern File_Name_Type Reference_Name\tPARAMS ((Source_File_Index));\n-extern Source_File_Index Get_Source_File_Index PARAMS ((Source_Ptr));\n-extern Logical_Line_Number Get_Logical_Line_Number PARAMS ((Source_Ptr));\n+extern File_Name_Type Debug_Source_Name\t(Source_File_Index);\n+extern File_Name_Type Full_Debug_Name\t(Source_File_Index);\n+extern File_Name_Type Reference_Name\t(Source_File_Index);\n+extern Source_File_Index Get_Source_File_Index (Source_Ptr);\n+extern Logical_Line_Number Get_Logical_Line_Number (Source_Ptr);"}, {"sha": "72f462fae8dc7d449b1a4ebfdcd0c1f12e086543", "filename": "gcc/ada/nlists.h", "status": "modified", "additions": 20, "deletions": 28, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e2d709cf1bc8fa1332b4e9033d066faddde31c/gcc%2Fada%2Fnlists.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e2d709cf1bc8fa1332b4e9033d066faddde31c/gcc%2Fada%2Fnlists.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnlists.h?ref=b4e2d709cf1bc8fa1332b4e9033d066faddde31c", "patch": "@@ -56,84 +56,76 @@ extern Node_Id *Prev_Node_Ptr;\n \n /* Node List Access Functions */\n \n-static Node_Id First PARAMS ((List_Id));\n+static Node_Id First (List_Id);\n \n INLINE Node_Id\n-First (List)\n-     List_Id List;\n+First (List_Id List)\n {\n   return List_Headers_Ptr[List - First_List_Id].first;\n }\n \n #define First_Non_Pragma nlists__first_non_pragma\n-extern Node_Id First_Non_Pragma PARAMS ((Node_Id));\n+extern Node_Id First_Non_Pragma (Node_Id);\n \n-static Node_Id Last PARAMS ((List_Id));\n+static Node_Id Last (List_Id);\n \n INLINE Node_Id\n-Last (List)\n-     List_Id List;\n+Last (List_Id List)\n {\n   return List_Headers_Ptr[List - First_List_Id].last;\n }\n \n #define First_Non_Pragma nlists__first_non_pragma\n-extern Node_Id First_Non_Pragma PARAMS ((List_Id));\n+extern Node_Id First_Non_Pragma (List_Id);\n \n-static Node_Id Next PARAMS ((Node_Id));\n+static Node_Id Next (Node_Id);\n \n INLINE Node_Id\n-Next (Node)\n-     Node_Id Node;\n+Next (Node_Id Node)\n {\n   return Next_Node_Ptr[Node - First_Node_Id];\n }\n \n #define Next_Non_Pragma nlists__next_non_pragma\n-extern Node_Id Next_Non_Pragma PARAMS ((List_Id));\n+extern Node_Id Next_Non_Pragma (List_Id);\n \n-static Node_Id Prev PARAMS ((Node_Id));\n+static Node_Id Prev (Node_Id);\n \n INLINE Node_Id\n-Prev (Node)\n-     Node_Id Node;\n+Prev (Node_Id Node)\n {\n   return Prev_Node_Ptr[Node - First_Node_Id];\n }\n \n \n #define Prev_Non_Pragma nlists__prev_non_pragma\n-extern Node_Id Prev_Non_Pragma\t\tPARAMS ((Node_Id));\n+extern Node_Id Prev_Non_Pragma\t\t(Node_Id);\n \n-static Boolean Is_Empty_List\t\tPARAMS ((List_Id));\n-static Boolean Is_Non_Empty_List\tPARAMS ((List_Id));\n-static Boolean Is_List_Member\t\tPARAMS ((Node_Id));\n-static List_Id List_Containing\t\tPARAMS ((Node_Id));\n+static Boolean Is_Empty_List\t\t(List_Id);\n+static Boolean Is_Non_Empty_List\t(List_Id);\n+static Boolean Is_List_Member\t\t(Node_Id);\n+static List_Id List_Containing\t\t(Node_Id);\n \n INLINE Boolean\n-Is_Empty_List (Id)\n-     List_Id Id;\n+Is_Empty_List (List_Id Id)\n {\n   return (First (Id) == Empty);\n }\n \n INLINE Boolean\n-Is_Non_Empty_List (Id)\n-     List_Id Id;\n+Is_Non_Empty_List (List_Id Id)\n {\n   return (Present (Id) && First (Id) != Empty);\n }\n \n INLINE Boolean\n-Is_List_Member (Node)\n-     Node_Id Node;\n+Is_List_Member (Node_Id Node)\n {\n   return Nodes_Ptr[Node - First_Node_Id].U.K.in_list;\n }\n \n INLINE List_Id\n-List_Containing (Node)\n-     Node_Id Node;\n+List_Containing (Node_Id Node)\n {\n   return Nodes_Ptr[Node - First_Node_Id].V.NX.link;\n }"}, {"sha": "97df69aeac7c9aab76ff0ca42e81de5c376475ee", "filename": "gcc/ada/raise.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e2d709cf1bc8fa1332b4e9033d066faddde31c/gcc%2Fada%2Fraise.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e2d709cf1bc8fa1332b4e9033d066faddde31c/gcc%2Fada%2Fraise.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise.h?ref=b4e2d709cf1bc8fa1332b4e9033d066faddde31c", "patch": "@@ -51,19 +51,19 @@ struct Exception_Occurrence\n \n typedef struct Exception_Occurrence *Exception_Occurrence_Access;\n \n-extern void _gnat_builtin_longjmp\tPARAMS ((void *, int));\n-extern void __gnat_unhandled_terminate\tPARAMS ((void));\n-extern void *__gnat_malloc\t\tPARAMS ((__SIZE_TYPE__));\n-extern void __gnat_free\t\t\tPARAMS ((void *));\n-extern void *__gnat_realloc\t\tPARAMS ((void *, __SIZE_TYPE__));\n-extern void __gnat_finalize\t\tPARAMS ((void));\n-extern void set_gnat_exit_status\tPARAMS ((int));\n-extern void __gnat_set_globals\t\tPARAMS ((int, int,\n+extern void _gnat_builtin_longjmp\t(void *, int);\n+extern void __gnat_unhandled_terminate\t(void);\n+extern void *__gnat_malloc\t\t(__SIZE_TYPE__);\n+extern void __gnat_free\t\t\t(void *);\n+extern void *__gnat_realloc\t\t(void *, __SIZE_TYPE__);\n+extern void __gnat_finalize\t\t(void);\n+extern void set_gnat_exit_status\t(int);\n+extern void __gnat_set_globals\t\t(int, int,\n \t\t\t\t\t\t char, char, char, char,\n \t\t\t\t\t\t char *, char *,\n-\t\t\t\t\t\t int, int, int, int));\n-extern void __gnat_initialize\t\tPARAMS ((void));\n-extern void __gnat_init_float\t\tPARAMS ((void));\n-extern void __gnat_install_handler\tPARAMS ((void));\n+\t\t\t\t\t\t int, int, int, int);\n+extern void __gnat_initialize\t\t(void);\n+extern void __gnat_init_float\t\t(void);\n+extern void __gnat_install_handler\t(void);\n \n extern int gnat_exit_status;"}, {"sha": "1260909ac30db394acf92bb6271c21affa2307e6", "filename": "gcc/ada/stringt.h", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e2d709cf1bc8fa1332b4e9033d066faddde31c/gcc%2Fada%2Fstringt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e2d709cf1bc8fa1332b4e9033d066faddde31c/gcc%2Fada%2Fstringt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstringt.h?ref=b4e2d709cf1bc8fa1332b4e9033d066faddde31c", "patch": "@@ -64,11 +64,10 @@ extern Char_Code *String_Chars_Ptr;\n \n \n /* String_Length returns the length of the specified string.  */\n-INLINE Int String_Length PARAMS ((String_Id));\n+INLINE Int String_Length (String_Id);\n \n INLINE Int\n-String_Length (Id)\n-     String_Id Id;\n+String_Length (String_Id Id)\n {\n   return Strings_Ptr[Id - First_String_Id].Length;\n }\n@@ -77,12 +76,10 @@ String_Length (Id)\n /* Get_String_Char obtains the specified character from a stored string.  The\n    lower bound of stored strings is always 1, so the range of values is 1 to\n    String_Length (Id).  */\n-INLINE Char_Code Get_String_Char PARAMS ((String_Id, Int));\n+INLINE Char_Code Get_String_Char (String_Id, Int);\n \n INLINE Char_Code\n-Get_String_Char (Id, Index)\n-     String_Id Id;\n-     Int Index;\n+Get_String_Char (String_Id Id, Int Index)\n {\n   return\n     String_Chars_Ptr"}]}