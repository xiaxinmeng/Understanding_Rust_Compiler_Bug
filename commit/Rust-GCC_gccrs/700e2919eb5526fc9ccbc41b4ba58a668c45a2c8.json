{"sha": "700e2919eb5526fc9ccbc41b4ba58a668c45a2c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAwZTI5MTllYjU1MjZmYzljY2JjNDFiNGJhNThhNjY4YzQ1YTJjOA==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2014-10-15T11:04:03Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-10-15T11:04:03Z"}, "message": "AVX-512. 56/n. Add plus/minus/abs/neg/andnot insn.\n\ngcc/\n\t* config/i386/sse.md (define_mode_iterator VI_AVX2): Extend\n\tto support AVX-512BW.\n\t(define_mode_iterator VI124_AVX2_48_AVX512F): Remove.\n\t(define_expand \"<plusminus_insn><mode>3\"): Remove masking support.\n\t(define_insn \"*<plusminus_insn><mode>3\"): Ditto.\n\t(define_expand \"<plusminus_insn><VI48_AVX512VL:mode>3_mask\"): New.\n\t(define_expand \"<plusminus_insn><VI12_AVX512VL:mode>3_mask\"): Ditto.\n\t(define_insn \"*<plusminus_insn><VI48_AVX512VL:mode>3_mask\"): Ditto.\n\t(define_insn \"*<plusminus_insn><VI12_AVX512VL:mode>3_mask\"): Ditto.\n\t(define_expand \"<sse2_avx2>_andnot<mode>3\"): Remove masking support.\n\t(define_insn \"*andnot<mode>3\"): Ditto.\n\t(define_expand \"<sse2_avx2>_andnot<VI48_AVX512VL:mode>3_mask\"): New.\n\t(define_expand \"<sse2_avx2>_andnot<VI12_AVX512VL:mode>3_mask\"): Ditto.\n\t(define_insn \"*andnot<VI48_AVX512VL:mode>3<mask_name>\"): Ditto.\n\t(define_insn \"*andnot<VI12_AVX512VL:mode>3<mask_name>\"): Ditto.\n\t(define_insn \"*abs<mode>2\"): Remove masking support.\n\t(define_insn \"abs<VI48_AVX512VL:mode>2_mask\"): New.\n\t(define_insn \"abs<VI12_AVX512VL:mode>2_mask\"): Ditto.\n\t(define_expand \"abs<mode>2\"): Use VI_AVX2 mode iterator.\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\nFrom-SVN: r216255", "tree": {"sha": "8346c7f7be9d294ad381cd71472ece12e7d5c79a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8346c7f7be9d294ad381cd71472ece12e7d5c79a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/700e2919eb5526fc9ccbc41b4ba58a668c45a2c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/700e2919eb5526fc9ccbc41b4ba58a668c45a2c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/700e2919eb5526fc9ccbc41b4ba58a668c45a2c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/700e2919eb5526fc9ccbc41b4ba58a668c45a2c8/comments", "author": null, "committer": null, "parents": [{"sha": "2be4091a007b94ec9b80a4f5b0cb6d4dc70360a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2be4091a007b94ec9b80a4f5b0cb6d4dc70360a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2be4091a007b94ec9b80a4f5b0cb6d4dc70360a1"}], "stats": {"total": 205, "additions": 179, "deletions": 26}, "files": [{"sha": "efbbe411fd75742adb1ebe69344d216bb277b3f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700e2919eb5526fc9ccbc41b4ba58a668c45a2c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700e2919eb5526fc9ccbc41b4ba58a668c45a2c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=700e2919eb5526fc9ccbc41b4ba58a668c45a2c8", "patch": "@@ -1,3 +1,32 @@\n+2014-10-15  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/sse.md (define_mode_iterator VI_AVX2): Extend\n+\tto support AVX-512BW.\n+\t(define_mode_iterator VI124_AVX2_48_AVX512F): Remove.\n+\t(define_expand \"<plusminus_insn><mode>3\"): Remove masking support.\n+\t(define_insn \"*<plusminus_insn><mode>3\"): Ditto.\n+\t(define_expand \"<plusminus_insn><VI48_AVX512VL:mode>3_mask\"): New.\n+\t(define_expand \"<plusminus_insn><VI12_AVX512VL:mode>3_mask\"): Ditto.\n+\t(define_insn \"*<plusminus_insn><VI48_AVX512VL:mode>3_mask\"): Ditto.\n+\t(define_insn \"*<plusminus_insn><VI12_AVX512VL:mode>3_mask\"): Ditto.\n+\t(define_expand \"<sse2_avx2>_andnot<mode>3\"): Remove masking support.\n+\t(define_insn \"*andnot<mode>3\"): Ditto.\n+\t(define_expand \"<sse2_avx2>_andnot<VI48_AVX512VL:mode>3_mask\"): New.\n+\t(define_expand \"<sse2_avx2>_andnot<VI12_AVX512VL:mode>3_mask\"): Ditto.\n+\t(define_insn \"*andnot<VI48_AVX512VL:mode>3<mask_name>\"): Ditto.\n+\t(define_insn \"*andnot<VI12_AVX512VL:mode>3<mask_name>\"): Ditto.\n+\t(define_insn \"*abs<mode>2\"): Remove masking support.\n+\t(define_insn \"abs<VI48_AVX512VL:mode>2_mask\"): New.\n+\t(define_insn \"abs<VI12_AVX512VL:mode>2_mask\"): Ditto.\n+\t(define_expand \"abs<mode>2\"): Use VI_AVX2 mode iterator.\n+\n 2014-10-15  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Anna Tikhonova  <anna.tikhonova@intel.com>"}, {"sha": "a6cf363957657b121f2594661df5e02711059c57", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 150, "deletions": 26, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700e2919eb5526fc9ccbc41b4ba58a668c45a2c8/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700e2919eb5526fc9ccbc41b4ba58a668c45a2c8/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=700e2919eb5526fc9ccbc41b4ba58a668c45a2c8", "patch": "@@ -271,8 +271,8 @@\n    (V4DI \"TARGET_AVX\") V2DI])\n \n (define_mode_iterator VI_AVX2\n-  [(V32QI \"TARGET_AVX2\") V16QI\n-   (V16HI \"TARGET_AVX2\") V8HI\n+  [(V64QI \"TARGET_AVX512BW\") (V32QI \"TARGET_AVX2\") V16QI\n+   (V32HI \"TARGET_AVX512BW\") (V16HI \"TARGET_AVX2\") V8HI\n    (V16SI \"TARGET_AVX512F\") (V8SI \"TARGET_AVX2\") V4SI\n    (V8DI \"TARGET_AVX512F\") (V4DI \"TARGET_AVX2\") V2DI])\n \n@@ -362,12 +362,6 @@\n   [(V16HI \"TARGET_AVX2\") V8HI\n    (V8SI \"TARGET_AVX2\") V4SI])\n \n-(define_mode_iterator VI124_AVX2_48_AVX512F\n-  [(V32QI \"TARGET_AVX2\") V16QI\n-   (V16HI \"TARGET_AVX2\") V8HI\n-   (V16SI \"TARGET_AVX512F\") (V8SI \"TARGET_AVX2\") V4SI\n-   (V8DI \"TARGET_AVX512F\")])\n-\n (define_mode_iterator VI124_AVX512F\n   [(V32QI \"TARGET_AVX2\") V16QI\n    (V32HI \"TARGET_AVX512F\") (V16HI \"TARGET_AVX2\") V8HI\n@@ -9143,20 +9137,43 @@\n   \"TARGET_SSE2\"\n   \"operands[2] = force_reg (<MODE>mode, CONST0_RTX (<MODE>mode));\")\n \n-(define_expand \"<plusminus_insn><mode>3<mask_name>\"\n+(define_expand \"<plusminus_insn><mode>3\"\n   [(set (match_operand:VI_AVX2 0 \"register_operand\")\n \t(plusminus:VI_AVX2\n \t  (match_operand:VI_AVX2 1 \"nonimmediate_operand\")\n \t  (match_operand:VI_AVX2 2 \"nonimmediate_operand\")))]\n-  \"TARGET_SSE2 && <mask_mode512bit_condition>\"\n+  \"TARGET_SSE2\"\n+  \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n+\n+(define_expand \"<plusminus_insn><mode>3_mask\"\n+  [(set (match_operand:VI48_AVX512VL 0 \"register_operand\")\n+\t(vec_merge:VI48_AVX512VL\n+\t  (plusminus:VI48_AVX512VL\n+\t    (match_operand:VI48_AVX512VL 1 \"nonimmediate_operand\")\n+\t    (match_operand:VI48_AVX512VL 2 \"nonimmediate_operand\"))\n+\t  (match_operand:VI48_AVX512VL 3 \"vector_move_operand\")\n+\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\")))]\n+  \"TARGET_AVX512F\"\n+  \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n+\n+(define_expand \"<plusminus_insn><mode>3_mask\"\n+  [(set (match_operand:VI12_AVX512VL 0 \"register_operand\")\n+\t(vec_merge:VI12_AVX512VL\n+\t  (plusminus:VI12_AVX512VL\n+\t    (match_operand:VI12_AVX512VL 1 \"nonimmediate_operand\")\n+\t    (match_operand:VI12_AVX512VL 2 \"nonimmediate_operand\"))\n+\t  (match_operand:VI12_AVX512VL 3 \"vector_move_operand\")\n+\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\")))]\n+  \"TARGET_AVX512BW\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n-(define_insn \"*<plusminus_insn><mode>3<mask_name>\"\n+(define_insn \"*<plusminus_insn><mode>3\"\n   [(set (match_operand:VI_AVX2 0 \"register_operand\" \"=x,v\")\n \t(plusminus:VI_AVX2\n \t  (match_operand:VI_AVX2 1 \"nonimmediate_operand\" \"<comm>0,v\")\n \t  (match_operand:VI_AVX2 2 \"nonimmediate_operand\" \"xm,vm\")))]\n-  \"TARGET_SSE2 && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands) && <mask_mode512bit_condition>\"\n+  \"TARGET_SSE2\n+   && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n   \"@\n    p<plusminus_mnemonic><ssemodesuffix>\\t{%2, %0|%0, %2}\n    vp<plusminus_mnemonic><ssemodesuffix>\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n@@ -9166,6 +9183,35 @@\n    (set_attr \"prefix\" \"<mask_prefix3>\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"*<plusminus_insn><mode>3_mask\"\n+  [(set (match_operand:VI48_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VI48_AVX512VL\n+\t  (plusminus:VI48_AVX512VL\n+\t    (match_operand:VI48_AVX512VL 1 \"nonimmediate_operand\" \"<comm>v\")\n+\t    (match_operand:VI48_AVX512VL 2 \"nonimmediate_operand\" \"vm\"))\n+\t  (match_operand:VI48_AVX512VL 3 \"vector_move_operand\" \"0C\")\n+\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n+  \"TARGET_AVX512F\n+   && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+  \"vp<plusminus_mnemonic><ssemodesuffix>\\t{%2, %1, %0%{%4%}%N3|%0%{%4%}%N3, %1, %2}\"\n+  [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"*<plusminus_insn><mode>3_mask\"\n+  [(set (match_operand:VI12_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VI12_AVX512VL\n+\t  (plusminus:VI12_AVX512VL\n+\t    (match_operand:VI12_AVX512VL 1 \"nonimmediate_operand\" \"<comm>v\")\n+\t    (match_operand:VI12_AVX512VL 2 \"nonimmediate_operand\" \"vm\"))\n+\t  (match_operand:VI12_AVX512VL 3 \"vector_move_operand\" \"0C\")\n+\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n+  \"TARGET_AVX512BW && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+  \"vp<plusminus_mnemonic><ssemodesuffix>\\t{%2, %1, %0%{%4%}%N3|%0%{%4%}%N3, %1, %2}\"\n+  [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_expand \"<sse2_avx2>_<plusminus_insn><mode>3<mask_name>\"\n   [(set (match_operand:VI12_AVX2 0 \"register_operand\")\n \t(sat_plusminus:VI12_AVX2\n@@ -10654,19 +10700,41 @@\n   operands[2] = force_reg (<MODE>mode, gen_rtx_CONST_VECTOR (<MODE>mode, v));\n })\n \n-(define_expand \"<sse2_avx2>_andnot<mode>3<mask_name>\"\n+(define_expand \"<sse2_avx2>_andnot<mode>3\"\n   [(set (match_operand:VI_AVX2 0 \"register_operand\")\n \t(and:VI_AVX2\n \t  (not:VI_AVX2 (match_operand:VI_AVX2 1 \"register_operand\"))\n \t  (match_operand:VI_AVX2 2 \"nonimmediate_operand\")))]\n-  \"TARGET_SSE2 && <mask_mode512bit_condition>\")\n+  \"TARGET_SSE2\")\n \n-(define_insn \"*andnot<mode>3<mask_name>\"\n+(define_expand \"<sse2_avx2>_andnot<mode>3_mask\"\n+  [(set (match_operand:VI48_AVX512VL 0 \"register_operand\")\n+\t(vec_merge:VI48_AVX512VL\n+\t  (and:VI48_AVX512VL\n+\t    (not:VI48_AVX512VL\n+\t      (match_operand:VI48_AVX512VL 1 \"register_operand\"))\n+\t    (match_operand:VI48_AVX512VL 2 \"nonimmediate_operand\"))\n+\t  (match_operand:VI48_AVX512VL 3 \"vector_move_operand\")\n+\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\")))]\n+  \"TARGET_AVX512F\")\n+\n+(define_expand \"<sse2_avx2>_andnot<mode>3_mask\"\n+  [(set (match_operand:VI12_AVX512VL 0 \"register_operand\")\n+\t(vec_merge:VI12_AVX512VL\n+\t  (and:VI12_AVX512VL\n+\t    (not:VI12_AVX512VL\n+\t      (match_operand:VI12_AVX512VL 1 \"register_operand\"))\n+\t    (match_operand:VI12_AVX512VL 2 \"nonimmediate_operand\"))\n+\t  (match_operand:VI12_AVX512VL 3 \"vector_move_operand\")\n+\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\")))]\n+  \"TARGET_AVX512BW\")\n+\n+(define_insn \"*andnot<mode>3\"\n   [(set (match_operand:VI 0 \"register_operand\" \"=x,v\")\n \t(and:VI\n \t  (not:VI (match_operand:VI 1 \"register_operand\" \"0,v\"))\n \t  (match_operand:VI 2 \"nonimmediate_operand\" \"xm,vm\")))]\n-  \"TARGET_SSE && <mask_mode512bit_condition>\"\n+  \"TARGET_SSE\"\n {\n   static char buf[64];\n   const char *ops;\n@@ -10740,7 +10808,7 @@\n \t    (eq_attr \"mode\" \"TI\"))\n        (const_string \"1\")\n        (const_string \"*\")))\n-   (set_attr \"prefix\" \"<mask_prefix3>\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set (attr \"mode\")\n \t(cond [(and (match_test \"<MODE_SIZE> == 16\")\n \t\t    (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\"))\n@@ -10758,6 +10826,36 @@\n \t      ]\n \t      (const_string \"<sseinsnmode>\")))])\n \n+(define_insn \"*andnot<mode>3_mask\"\n+  [(set (match_operand:VI48_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VI48_AVX512VL\n+\t  (and:VI48_AVX512VL\n+\t    (not:VI48_AVX512VL\n+\t      (match_operand:VI48_AVX512VL 1 \"register_operand\" \"v\"))\n+\t    (match_operand:VI48_AVX512VL 2 \"nonimmediate_operand\" \"vm\"))\n+\t  (match_operand:VI48_AVX512VL 3 \"vector_move_operand\" \"0C\")\n+\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n+  \"TARGET_AVX512F\"\n+  \"vpandn<ssemodesuffix>\\t{%2, %1, %0%{%4%}%N3|%0%{%4%}%N3, %1, %2}\";\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"*andnot<mode>3_mask\"\n+  [(set (match_operand:VI12_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VI12_AVX512VL\n+\t  (and:VI12_AVX512VL\n+\t    (not:VI12_AVX512VL\n+\t      (match_operand:VI12_AVX512VL 1 \"register_operand\" \"v\"))\n+\t    (match_operand:VI12_AVX512VL 2 \"nonimmediate_operand\" \"vm\"))\n+\t  (match_operand:VI12_AVX512VL 3 \"vector_move_operand\" \"0C\")\n+\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n+  \"TARGET_AVX512BW\"\n+  \"vpandn<ssemodesuffix>\\t{%2, %1, %0%{%4%}%N3|%0%{%4%}%N3, %1, %2}\";\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_expand \"<code><mode>3\"\n   [(set (match_operand:VI 0 \"register_operand\")\n \t(any_logic:VI\n@@ -13673,22 +13771,48 @@\n    (set (attr \"prefix_rex\") (symbol_ref \"x86_extended_reg_mentioned_p (insn)\"))\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"<mask_codefor>abs<mode>2<mask_name>\"\n-  [(set (match_operand:VI124_AVX2_48_AVX512F 0 \"register_operand\" \"=v\")\n-\t(abs:VI124_AVX2_48_AVX512F\n-\t  (match_operand:VI124_AVX2_48_AVX512F 1 \"nonimmediate_operand\" \"vm\")))]\n-  \"TARGET_SSSE3 && <mask_mode512bit_condition>\"\n-  \"%vpabs<ssemodesuffix>\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+(define_insn \"*abs<mode>2\"\n+  [(set (match_operand:VI_AVX2 0 \"register_operand\" \"=v\")\n+\t(abs:VI_AVX2\n+\t  (match_operand:VI_AVX2 1 \"nonimmediate_operand\" \"vm\")))]\n+  \"TARGET_SSSE3\"\n+  \"%vpabs<ssemodesuffix>\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"abs<mode>2_mask\"\n+  [(set (match_operand:VI48_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VI48_AVX512VL\n+\t  (abs:VI48_AVX512VL\n+\t    (match_operand:VI48_AVX512VL 1 \"nonimmediate_operand\" \"vm\"))\n+\t  (match_operand:VI48_AVX512VL 2 \"vector_move_operand\" \"0C\")\n+\t  (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk\")))]\n+  \"TARGET_AVX512F\"\n+  \"vpabs<ssemodesuffix>\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\"\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"abs<mode>2_mask\"\n+  [(set (match_operand:VI12_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VI12_AVX512VL\n+\t  (abs:VI12_AVX512VL\n+\t    (match_operand:VI12_AVX512VL 1 \"nonimmediate_operand\" \"vm\"))\n+\t  (match_operand:VI12_AVX512VL 2 \"vector_move_operand\" \"0C\")\n+\t  (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk\")))]\n+  \"TARGET_AVX512BW\"\n+  \"vpabs<ssemodesuffix>\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\"\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_expand \"abs<mode>2\"\n-  [(set (match_operand:VI124_AVX2_48_AVX512F 0 \"register_operand\")\n-\t(abs:VI124_AVX2_48_AVX512F\n-\t  (match_operand:VI124_AVX2_48_AVX512F 1 \"nonimmediate_operand\")))]\n+  [(set (match_operand:VI_AVX2 0 \"register_operand\")\n+\t(abs:VI_AVX2\n+\t  (match_operand:VI_AVX2 1 \"nonimmediate_operand\")))]\n   \"TARGET_SSE2\"\n {\n   if (!TARGET_SSSE3)"}]}