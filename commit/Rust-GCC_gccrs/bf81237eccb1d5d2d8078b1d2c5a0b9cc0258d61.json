{"sha": "bf81237eccb1d5d2d8078b1d2c5a0b9cc0258d61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY4MTIzN2VjY2IxZDVkMmQ4MDc4YjFkMmM1YTBiOWNjMDI1OGQ2MQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-02-19T00:16:21Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-02-19T00:16:21Z"}, "message": "Daily bump.", "tree": {"sha": "927b329f3a46b74aab3bd85935e7c904647c4098", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/927b329f3a46b74aab3bd85935e7c904647c4098"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf81237eccb1d5d2d8078b1d2c5a0b9cc0258d61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf81237eccb1d5d2d8078b1d2c5a0b9cc0258d61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf81237eccb1d5d2d8078b1d2c5a0b9cc0258d61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf81237eccb1d5d2d8078b1d2c5a0b9cc0258d61/comments", "author": null, "committer": null, "parents": [{"sha": "d1efec57e279f5b0cd62073696cd351fce369bb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1efec57e279f5b0cd62073696cd351fce369bb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1efec57e279f5b0cd62073696cd351fce369bb7"}], "stats": {"total": 227, "additions": 226, "deletions": 1}, "files": [{"sha": "748a4e5e513e6ebb4cf88303c676e365f416d874", "filename": "gcc/ChangeLog", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf81237eccb1d5d2d8078b1d2c5a0b9cc0258d61/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf81237eccb1d5d2d8078b1d2c5a0b9cc0258d61/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf81237eccb1d5d2d8078b1d2c5a0b9cc0258d61", "patch": "@@ -1,3 +1,103 @@\n+2021-02-18  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/96264\n+\t* lra-remat.c (reg_overlap_for_remat_p): Check also output insn\n+\thard regs.\n+\n+2021-02-18  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/99113\n+\t* varasm.c (get_section): Replace SUPPORTS_SHF_GNU_RETAIN with\n+\tlooking up the retain attribute.\n+\t(resolve_unique_section): Likewise.\n+\t(get_variable_section): Likewise.\n+\t(switch_to_section): Likewise.  Warn when a symbol without the\n+\tretain attribute and a symbol with the retain attribute are\n+\tplaced in the section with the same name, instead of the used\n+\tattribute.\n+\t* doc/extend.texi: Document the \"retain\" attribute.\n+\n+2021-02-18  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99023\n+\t* doc/invoke.texi (flang-info-include-translate): Document header\n+\tlookup behaviour.\n+\n+2021-02-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/99122\n+\t* ipa-fnsummary.c (analyze_function_body): Set\n+\tCIF_FUNCTION_NOT_INLINABLE for VLA parameter calls.\n+\t* tree-inline.c (insert_init_debug_bind): Pass NULL for\n+\terror_mark_node values.\n+\t(force_value_to_type): Do not build V_C_Es for WITH_SIZE_EXPR\n+\tvalues.\n+\t(setup_one_parameter): Delay force_value_to_type until when\n+\tit's needed.\n+\n+2021-02-18  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\tPR tree-optimization/99142\n+\t* match.pd (clz cmp 0): Gate replacement on single_use of clz result.\n+\n+2021-02-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* wide-int-bitmask.h (wide_int_bitmask::wide_int_bitmask (),\n+\twide_int_bitmask::wide_int_bitmask (uint64_t),\n+\twide_int_bitmask::wide_int_bitmask (uint64_t, uint64_t),\n+\twide_int_bitmask::operator ~ () const,\n+\twide_int_bitmask::operator | (wide_int_bitmask) const,\n+\twide_int_bitmask::operator & (wide_int_bitmask) const): Use constexpr\n+\tinstead of inline.\n+\t* config/i386/i386.h (PTA_3DNOW, PTA_3DNOW_A, PTA_64BIT, PTA_ABM,\n+\tPTA_AES, PTA_AVX, PTA_BMI, PTA_CX16, PTA_F16C, PTA_FMA, PTA_FMA4,\n+\tPTA_FSGSBASE, PTA_LWP, PTA_LZCNT, PTA_MMX, PTA_MOVBE, PTA_NO_SAHF,\n+\tPTA_PCLMUL, PTA_POPCNT, PTA_PREFETCH_SSE, PTA_RDRND, PTA_SSE, PTA_SSE2,\n+\tPTA_SSE3, PTA_SSE4_1, PTA_SSE4_2, PTA_SSE4A, PTA_SSSE3, PTA_TBM,\n+\tPTA_XOP, PTA_AVX2, PTA_BMI2, PTA_RTM, PTA_HLE, PTA_PRFCHW, PTA_RDSEED,\n+\tPTA_ADX, PTA_FXSR, PTA_XSAVE, PTA_XSAVEOPT, PTA_AVX512F, PTA_AVX512ER,\n+\tPTA_AVX512PF, PTA_AVX512CD, PTA_NO_TUNE, PTA_SHA, PTA_PREFETCHWT1,\n+\tPTA_CLFLUSHOPT, PTA_XSAVEC, PTA_XSAVES, PTA_AVX512DQ, PTA_AVX512BW,\n+\tPTA_AVX512VL, PTA_AVX512IFMA, PTA_AVX512VBMI, PTA_CLWB, PTA_MWAITX,\n+\tPTA_CLZERO, PTA_NO_80387, PTA_PKU, PTA_AVX5124VNNIW, PTA_AVX5124FMAPS,\n+\tPTA_AVX512VPOPCNTDQ, PTA_SGX, PTA_AVX512VNNI, PTA_GFNI, PTA_VAES,\n+\tPTA_AVX512VBMI2, PTA_VPCLMULQDQ, PTA_AVX512BITALG, PTA_RDPID,\n+\tPTA_PCONFIG, PTA_WBNOINVD, PTA_AVX512VP2INTERSECT, PTA_PTWRITE,\n+\tPTA_AVX512BF16, PTA_WAITPKG, PTA_MOVDIRI, PTA_MOVDIR64B, PTA_ENQCMD,\n+\tPTA_CLDEMOTE, PTA_SERIALIZE, PTA_TSXLDTRK, PTA_AMX_TILE, PTA_AMX_INT8,\n+\tPTA_AMX_BF16, PTA_UINTR, PTA_HRESET, PTA_KL, PTA_WIDEKL, PTA_AVXVNNI,\n+\tPTA_X86_64_BASELINE, PTA_X86_64_V2, PTA_X86_64_V3, PTA_X86_64_V4,\n+\tPTA_CORE2, PTA_NEHALEM, PTA_WESTMERE, PTA_SANDYBRIDGE, PTA_IVYBRIDGE,\n+\tPTA_HASWELL, PTA_BROADWELL, PTA_SKYLAKE, PTA_SKYLAKE_AVX512,\n+\tPTA_CASCADELAKE, PTA_COOPERLAKE, PTA_CANNONLAKE, PTA_ICELAKE_CLIENT,\n+\tPTA_ICELAKE_SERVER, PTA_TIGERLAKE, PTA_SAPPHIRERAPIDS, PTA_ALDERLAKE,\n+\tPTA_KNL, PTA_BONNELL, PTA_SILVERMONT, PTA_GOLDMONT, PTA_GOLDMONT_PLUS,\n+\tPTA_TREMONT, PTA_KNM): Use constexpr instead of const.\n+\n+2021-02-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/99109\n+\t* gimple-array-bounds.cc (build_zero_elt_array_type): Rename to ...\n+\t(build_printable_array_type): ... this.  Add nelts argument.  For\n+\toveraligned eltype, use TYPE_MAIN_VARIANT (eltype) instead.  If\n+\tnelts, call build_array_type_nelts.\n+\t(array_bounds_checker::check_mem_ref): Use build_printable_array_type\n+\tinstead of build_zero_elt_array_type and build_array_type_nelts.\n+\n+2021-02-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/99104\n+\t* config/i386/i386.c (distance_non_agu_define): Don't call\n+\textract_insn_cached here.\n+\t(ix86_lea_outperforms): Save and restore recog_data around call\n+\tto distance_non_agu_define and distance_agu_use.\n+\t(ix86_ok_to_clobber_flags): Remove.\n+\t(ix86_avoid_lea_for_add): Don't call ix86_ok_to_clobber_flags.\n+\t(ix86_avoid_lea_for_addr): Likewise.  Adjust function comment.\n+\t* config/i386/i386.md (*lea<mode>): Change from define_insn_and_split\n+\tinto define_insn.  Move the splitting to define_peephole2 and\n+\tcheck there using peep2_regno_dead_p if FLAGS_REG is dead.\n+\n 2021-02-17  Julian Brown  <julian@codesourcery.com>\n \n \t* gimplify.c (gimplify_scan_omp_clauses): Handle ATTACH_DETACH"}, {"sha": "7d1b78783423513281b568eb463ee66ebdcb49c6", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf81237eccb1d5d2d8078b1d2c5a0b9cc0258d61/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf81237eccb1d5d2d8078b1d2c5a0b9cc0258d61/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=bf81237eccb1d5d2d8078b1d2c5a0b9cc0258d61", "patch": "@@ -1 +1 @@\n-20210218\n+20210219"}, {"sha": "c6080480bd4eab15b7e1ea6b6ff94d20a4768e88", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf81237eccb1d5d2d8078b1d2c5a0b9cc0258d61/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf81237eccb1d5d2d8078b1d2c5a0b9cc0258d61/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=bf81237eccb1d5d2d8078b1d2c5a0b9cc0258d61", "patch": "@@ -1,3 +1,10 @@\n+2021-02-18  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/99113\n+\t* c-attribs.c (c_common_attribute_table): Add the \"retain\"\n+\tattribute.\n+\t(handle_retain_attribute): New function.\n+\n 2021-02-16  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/99062"}, {"sha": "c979741f3ae3d5eae7f57867f734137339784f39", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf81237eccb1d5d2d8078b1d2c5a0b9cc0258d61/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf81237eccb1d5d2d8078b1d2c5a0b9cc0258d61/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=bf81237eccb1d5d2d8078b1d2c5a0b9cc0258d61", "patch": "@@ -1,3 +1,9 @@\n+2021-02-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/99136\n+\t* c-typeck.c (c_finish_return): Don't wrap retval into\n+\tEXCESS_PRECISION_EXPR in functions that return void.\n+\n 2021-02-11  Marek Polacek  <polacek@redhat.com>\n \n \t* c-parser.c (c_parser_if_statement): Use vec_free."}, {"sha": "afad9079074637b2ede0e07fc3bc44e052c6965c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf81237eccb1d5d2d8078b1d2c5a0b9cc0258d61/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf81237eccb1d5d2d8078b1d2c5a0b9cc0258d61/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bf81237eccb1d5d2d8078b1d2c5a0b9cc0258d61", "patch": "@@ -1,3 +1,18 @@\n+2021-02-18  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99023\n+\t* module.cc (canonicalize_header_name): Use\n+\tcpp_probe_header_unit.\n+\t(maybe_translate_include): Fix note_includes comparison.\n+\t(init_modules): Fix note_includes string termination.\n+\n+2021-02-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/99132\n+\t* cp-gimplify.c (cp_genericize_r) <case CALL_EXPR>: Use\n+\tcp_get_callee_fndecl_nofold instead of cp_get_callee_fndecl to check\n+\tfor immediate function calls.\n+\n 2021-02-17  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/99023"}, {"sha": "3b3f178d019364bb6cdf847d850e1fd52afeb857", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf81237eccb1d5d2d8078b1d2c5a0b9cc0258d61/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf81237eccb1d5d2d8078b1d2c5a0b9cc0258d61/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf81237eccb1d5d2d8078b1d2c5a0b9cc0258d61", "patch": "@@ -1,3 +1,88 @@\n+2021-02-18  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/96264\n+\t* gcc.target/powerpc/pr96264.c: New.\n+\n+2021-02-18  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/99113\n+\t* c-c++-common/attr-retain-1.c: New test.\n+\t* c-c++-common/attr-retain-2.c: Likewise.\n+\t* c-c++-common/attr-retain-3.c: Likewise.\n+\t* c-c++-common/attr-retain-4.c: Likewise.\n+\t* c-c++-common/attr-retain-5.c: Likewise.\n+\t* c-c++-common/attr-retain-6.c: Likewise.\n+\t* c-c++-common/attr-retain-7.c: Likewise.\n+\t* c-c++-common/attr-retain-8.c: Likewise.\n+\t* c-c++-common/attr-retain-9.c: Likewise.\n+\t* c-c++-common/pr99113.c: Likewise.\n+\t* gcc.c-torture/compile/attr-retain-1.c: Likewise.\n+\t* gcc.c-torture/compile/attr-retain-2.c: Likewise.\n+\t* c-c++-common/attr-used.c: Don't expect SHF_GNU_RETAIN section.\n+\t* c-c++-common/attr-used-2.c: Likewise.\n+\t* c-c++-common/attr-used-3.c: Likewise.\n+\t* c-c++-common/attr-used-4.c: Likewise.\n+\t* c-c++-common/attr-used-9.c: Likewise.\n+\t* gcc.c-torture/compile/attr-used-retain-1.c: Likewise.\n+\t* gcc.c-torture/compile/attr-used-retain-2.c: Likewise.\n+\t* c-c++-common/attr-used-5.c: Don't expect warning for the used\n+\tattribute nor SHF_GNU_RETAIN section.\n+\t* c-c++-common/attr-used-6.c: Likewise.\n+\t* c-c++-common/attr-used-7.c: Likewise.\n+\t* c-c++-common/attr-used-8.c: Likewise.\n+\n+2021-02-18  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99023\n+\t* g++.dg/modules/modules.exp: Bail on cross-testing.  Add support\n+\tfor .X files.\n+\t* g++.dg/modules/pr99023_a.X: New.\n+\t* g++.dg/modules/pr99023_b.X: New.\n+\n+2021-02-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/99136\n+\t* gcc.dg/pr99136.c: New test.\n+\n+2021-02-18  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99023\n+\t* g++.dg/modules/modules.exp: Remove dg-module-headers support\n+\t* g++.dg/modules/alias-2_a.H: Delete.\n+\t* g++.dg/modules/sys/alias-2_a.H: Delete.\n+\n+2021-02-18  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99150\n+\t* g++.dg/modules/pr99023_a.H: Delete.\n+\t* g++.dg/modules/pr99023_b.H: Delete.\n+\n+2021-02-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/99132\n+\t* g++.dg/cpp2a/constexpr-virtual18.C: New test.\n+\n+2021-02-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/99122\n+\t* gcc.dg/pr99122-1.c: New testcase.\n+\t* gcc.dg/pr99122-2.c: Likewise.\n+\n+2021-02-18  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\tPR tree-optimization/99142\n+\t* gcc.dg/tree-ssa/pr99142.c: New test.\n+\n+2021-02-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/99109\n+\t* g++.dg/warn/Warray-bounds-17.C: New test.\n+\n+2021-02-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/99104\n+\t* gcc.dg/pr99104.c: New test.\n+\n 2021-02-17  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/94596"}, {"sha": "c59b0a6a1f1db4ffd0a6f409d220bf45b4077cd1", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf81237eccb1d5d2d8078b1d2c5a0b9cc0258d61/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf81237eccb1d5d2d8078b1d2c5a0b9cc0258d61/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=bf81237eccb1d5d2d8078b1d2c5a0b9cc0258d61", "patch": "@@ -1,3 +1,15 @@\n+2021-02-18  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99023\n+\t* include/cpplib.h (cpp_find_header_unit): Rename to ...\n+\t(cpp_probe_header_unit): ... this.\n+\t* internal.h (_cp_find_header_unit): Declare.\n+\t* files.c (cpp_find_header_unit): Break apart to ..\n+\t(test_header_unit): ... this, and ...\n+\t(_cpp_find_header_unit): ... and, or and ...\n+\t(cpp_probe_header_unit): ... this.\n+\t* macro.c (cpp_get_token_1): Call _cpp_find_header_unit.\n+\n 2021-02-16  Nathan Sidwell  <nathan@acm.org>\n \n \t* files.c (_cpp_stack_file): Make buffers end in unread \\n."}]}