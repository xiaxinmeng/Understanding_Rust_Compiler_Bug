{"sha": "43031fbdda7d4edbd607365a4f3bbec069fe3983", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMwMzFmYmRkYTdkNGVkYmQ2MDczNjVhNGYzYmJlYzA2OWZlMzk4Mw==", "commit": {"author": {"name": "Delia Burduv", "email": "delia.burduv@arm.com", "date": "2020-03-05T11:18:04Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-05T11:19:43Z"}, "message": "[AArch32] ACLE intrinsics bfloat16 vmmla and vfma<b/t> for AArch32 AdvSIMD\n\nThis patch adds the ARMv8.6 ACLE intrinsics for vmmla, vfmab and vfmat\nas part of the BFloat16 extension.\n(https://developer.arm.com/docs/101028/latest.)\nThe intrinsics are declared in arm_neon.h and the RTL patterns are\ndefined in neon.md.\nTwo new tests are added to check assembler output and lane indices.\n\n2020-03-05  Delia Burduv  <delia.burduv@arm.com>\n\n\t* config/arm/arm_neon.h (vbfmmlaq_f32): New.\n\t(vbfmlalbq_f32): New.\n\t(vbfmlaltq_f32): New.\n\t(vbfmlalbq_lane_f32): New.\n\t(vbfmlaltq_lane_f32): New.\n\t(vbfmlalbq_laneq_f32): New.\n\t(vbfmlaltq_laneq_f32): New.\n\t* config/arm/arm_neon_builtins.def (vmmla): New.\n\t(vfmab): New.\n\t(vfmat): New.\n\t(vfmab_lane): New.\n\t(vfmat_lane): New.\n\t(vfmab_laneq): New.\n\t(vfmat_laneq): New.\n\t* config/arm/iterators.md (BF_MA): New int iterator.\n\t(bt): New int attribute.\n\t(VQXBF): Copy of VQX with V8BF.\n\t* config/arm/neon.md (neon_vmmlav8bf): New insn.\n\t(neon_vfma<bt>v8bf): New insn.\n\t(neon_vfma<bt>_lanev8bf): New insn.\n\t(neon_vfma<bt>_laneqv8bf): New expand.\n\t(neon_vget_high<mode>): Changed iterator to VQXBF.\n\t* config/arm/unspecs.md (UNSPEC_BFMMLA): New UNSPEC.\n\t(UNSPEC_BFMAB): New UNSPEC.\n\t(UNSPEC_BFMAT): New UNSPEC.\n\n2020-03-05  Delia Burduv  <delia.burduv@arm.com>\n\n\t* gcc.target/arm/simd/bf16_ma_1.c: New test.\n\t* gcc.target/arm/simd/bf16_ma_2.c: New test.\n\t* gcc.target/arm/simd/bf16_mmla_1.c: New test.", "tree": {"sha": "8386e7f7dcba7b17dafa82d913c46b49e2b570a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8386e7f7dcba7b17dafa82d913c46b49e2b570a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43031fbdda7d4edbd607365a4f3bbec069fe3983", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43031fbdda7d4edbd607365a4f3bbec069fe3983", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43031fbdda7d4edbd607365a4f3bbec069fe3983", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43031fbdda7d4edbd607365a4f3bbec069fe3983/comments", "author": null, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d6b3a788f75faee6e885ea0db5a3bf7d1798c91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d6b3a788f75faee6e885ea0db5a3bf7d1798c91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d6b3a788f75faee6e885ea0db5a3bf7d1798c91"}], "stats": {"total": 139, "additions": 139, "deletions": 0}, "files": [{"sha": "7dcc80d08510070679e47318da4eeed21733e8a1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43031fbdda7d4edbd607365a4f3bbec069fe3983/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43031fbdda7d4edbd607365a4f3bbec069fe3983/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=43031fbdda7d4edbd607365a4f3bbec069fe3983", "patch": "@@ -1,3 +1,9 @@\n+2020-03-05  Delia Burduv  <delia.burduv@arm.com>\n+\n+\t* gcc.target/arm/simd/bf16_ma_1.c: New test.\n+\t* gcc.target/arm/simd/bf16_ma_2.c: New test.\n+\t* gcc.target/arm/simd/bf16_mmla_1.c: New test.\n+\n 2020-03-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/93399"}, {"sha": "6729af76fbe72f28afd89ee4b4a9b5a732d7b28c", "filename": "gcc/testsuite/gcc.target/arm/simd/bf16_ma_1.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43031fbdda7d4edbd607365a4f3bbec069fe3983/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fbf16_ma_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43031fbdda7d4edbd607365a4f3bbec069fe3983/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fbf16_ma_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fbf16_ma_1.c?ref=43031fbdda7d4edbd607365a4f3bbec069fe3983", "patch": "@@ -0,0 +1,79 @@\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon } */\n+/* { dg-additional-options \"-save-temps -O2\" }  */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+#include \"arm_neon.h\"\n+\n+/*\n+**test_vfmabq_f32:\n+**      ...\n+**      vfmab.bf16\tq0, q1, q2\n+**      bx\tlr\n+*/\n+float32x4_t\n+test_vfmabq_f32 (float32x4_t r, bfloat16x8_t a, bfloat16x8_t b)\n+{\n+  return vbfmlalbq_f32 (r, a, b);\n+}\n+\n+/*\n+**test_vfmatq_f32:\n+**      ...\n+**      vfmat.bf16\tq0, q1, q2\n+**      bx\tlr\n+*/\n+float32x4_t\n+test_vfmatq_f32 (float32x4_t r, bfloat16x8_t a, bfloat16x8_t b)\n+{\n+  return vbfmlaltq_f32 (r, a, b);\n+}\n+\n+/*\n+**test_vfmabq_lane_f32:\n+**      ...\n+**      vfmab.bf16\tq0, q1, d4\\[0\\]\n+**      bx\tlr\n+*/\n+float32x4_t\n+test_vfmabq_lane_f32 (float32x4_t r, bfloat16x8_t a, bfloat16x4_t b)\n+{\n+  return vbfmlalbq_lane_f32 (r, a, b, 0);\n+}\n+\n+/*\n+**test_vfmatq_lane_f32:\n+**      ...\n+**      vfmat.bf16\tq0, q1, d4\\[2\\]\n+**      bx\tlr\n+*/\n+float32x4_t\n+test_vfmatq_lane_f32 (float32x4_t r, bfloat16x8_t a, bfloat16x4_t b)\n+{\n+  return vbfmlaltq_lane_f32 (r, a, b, 2);\n+}\n+\n+/*\n+**test_vfmabq_laneq_f32:\n+**      ...\n+**      vfmab.bf16\tq0, q1, d5\\[1\\]\n+**      bx\tlr\n+*/\n+float32x4_t\n+test_vfmabq_laneq_f32 (float32x4_t r, bfloat16x8_t a, bfloat16x8_t b)\n+{\n+  return vbfmlalbq_laneq_f32 (r, a, b, 5);\n+}\n+\n+/*\n+**test_vfmatq_laneq_f32:\n+**      ...\n+**      vfmat.bf16\tq0, q1, d5\\[3\\]\n+**      bx\tlr\n+*/\n+float32x4_t\n+test_vfmatq_laneq_f32 (float32x4_t r, bfloat16x8_t a, bfloat16x8_t b)\n+{\n+  return vbfmlaltq_laneq_f32 (r, a, b, 7);\n+}"}, {"sha": "5a7a2a71791968045b413fc6c1d7daade5cf30f0", "filename": "gcc/testsuite/gcc.target/arm/simd/bf16_ma_2.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43031fbdda7d4edbd607365a4f3bbec069fe3983/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fbf16_ma_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43031fbdda7d4edbd607365a4f3bbec069fe3983/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fbf16_ma_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fbf16_ma_2.c?ref=43031fbdda7d4edbd607365a4f3bbec069fe3983", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile { target { arm*-*-* } } } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+/* Test lane index limits for vfmabq_lane_f32  */\n+float32x4_t\n+test_vfmabq_lane_f32_low (float32x4_t r, bfloat16x8_t a, bfloat16x4_t b)\n+{\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { target *-*-* } 0 } */\n+  return vbfmlalbq_lane_f32 (r, a, b, -1);\n+}\n+\n+float32x4_t\n+test_vfmabq_lane_f32_high (float32x4_t r, bfloat16x8_t a, bfloat16x4_t b)\n+{\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { target *-*-* } 0 } */\n+  return vbfmlalbq_lane_f32 (r, a, b, 4);\n+}\n+\n+/* Test lane index limits for vfmatq_lane_f32  */\n+float32x4_t\n+test_vfmatq_lane_f32_low (float32x4_t r, bfloat16x8_t a, bfloat16x4_t b)\n+{\n+  /* { dg-error \"lane -2 out of range 0 - 3\" \"\" { target *-*-* } 0 } */\n+  return vbfmlaltq_lane_f32 (r, a, b, -2);\n+}\n+\n+float32x4_t\n+test_vfmatq_lane_f32_high (float32x4_t r, bfloat16x8_t a, bfloat16x4_t b)\n+{\n+  /* { dg-error \"lane 5 out of range 0 - 3\" \"\" { target *-*-* } 0 } */\n+  return vbfmlaltq_lane_f32 (r, a, b, 5);\n+}"}, {"sha": "5f9c85b41a396be64872a36a00b664df834534c1", "filename": "gcc/testsuite/gcc.target/arm/simd/bf16_mmla_1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43031fbdda7d4edbd607365a4f3bbec069fe3983/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fbf16_mmla_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43031fbdda7d4edbd607365a4f3bbec069fe3983/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fbf16_mmla_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fbf16_mmla_1.c?ref=43031fbdda7d4edbd607365a4f3bbec069fe3983", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon } */\n+/* { dg-additional-options \"-save-temps -O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+#include <arm_neon.h>\n+\n+/*\n+**test_vmmlaq_f32:\n+**        ...\n+**        vmmla.bf16\tq0, q1, q2\n+**        bx\tlr\n+*/\n+float32x4_t\n+test_vmmlaq_f32 (float32x4_t r, bfloat16x8_t x, bfloat16x8_t y)\n+{\n+  return vbfmmlaq_f32 (r, x, y);\n+}"}]}