{"sha": "f3d4f6f9a8fbf2fb729fa8896b714a7b99766c66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNkNGY2ZjlhOGZiZjJmYjcyOWZhODg5NmI3MTRhN2I5OTc2NmM2Ng==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "1999-07-06T15:38:09Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "1999-07-06T15:38:09Z"}, "message": "Final.xfail: New file.\n\n\t* libjava.lang/Final.xfail: New file.\n\t* libjava.compile/Case.xfail: New file.\n\t* libjava.compile/Where.xfail: New file.\n\t* libjava.compile/test.exp: Look for `.xfail' files.\n\t* libjava.lang/test.exp: Don't look for `.arg' files.\n\tDo look for `.xfail' files.\n\t* lib/libjava.exp (test_libjava_from_source): Changed meaning of\n\t`exec_args' argument.  Handle `xfail-*' arguments.\n\t(test_libjava_from_javac): Likewise.\n\t(test_libjava): Likewise.\n\t(libjava_read_xfail): New proc.\n\nFrom-SVN: r27957", "tree": {"sha": "b8d27368683decc90eb2b1f1f0a66c6fd1eb4b20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8d27368683decc90eb2b1f1f0a66c6fd1eb4b20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3d4f6f9a8fbf2fb729fa8896b714a7b99766c66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3d4f6f9a8fbf2fb729fa8896b714a7b99766c66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3d4f6f9a8fbf2fb729fa8896b714a7b99766c66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3d4f6f9a8fbf2fb729fa8896b714a7b99766c66/comments", "author": null, "committer": null, "parents": [{"sha": "693a61283b6ac0e39bd611a46867752baa29d0d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/693a61283b6ac0e39bd611a46867752baa29d0d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/693a61283b6ac0e39bd611a46867752baa29d0d4"}], "stats": {"total": 143, "additions": 120, "deletions": 23}, "files": [{"sha": "3e9bbc591a0c2d5d7a05a1c95f2208e6e4fcefe9", "filename": "libjava/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d4f6f9a8fbf2fb729fa8896b714a7b99766c66/libjava%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d4f6f9a8fbf2fb729fa8896b714a7b99766c66/libjava%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2FChangeLog?ref=f3d4f6f9a8fbf2fb729fa8896b714a7b99766c66", "patch": "@@ -1,3 +1,17 @@\n+1999-07-06  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* libjava.lang/Final.xfail: New file.\n+\t* libjava.compile/Case.xfail: New file.\n+\t* libjava.compile/Where.xfail: New file.\n+\t* libjava.compile/test.exp: Look for `.xfail' files.\n+\t* libjava.lang/test.exp: Don't look for `.arg' files.\n+\tDo look for `.xfail' files.\n+\t* lib/libjava.exp (test_libjava_from_source): Changed meaning of\n+\t`exec_args' argument.  Handle `xfail-*' arguments.\n+\t(test_libjava_from_javac): Likewise.\n+\t(test_libjava): Likewise.\n+\t(libjava_read_xfail): New proc.\n+\n 1999-07-05  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \t* libjava.lang/Final.java: Added."}, {"sha": "fd5ceb481ed47635dca6c7b0207ae65eed67fc95", "filename": "libjava/testsuite/lib/libjava.exp", "status": "modified", "additions": 86, "deletions": 15, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d4f6f9a8fbf2fb729fa8896b714a7b99766c66/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d4f6f9a8fbf2fb729fa8896b714a7b99766c66/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flib%2Flibjava.exp?ref=f3d4f6f9a8fbf2fb729fa8896b714a7b99766c66", "patch": "@@ -10,6 +10,17 @@ if ![info exists tmpdir] {\n     set tmpdir \"/tmp\"\n }\n \n+# Read an `xfail' file if it exists.  Returns a list of xfail tokens.\n+proc libjava_read_xfail {file} {\n+    if {! [file exists $file]} {\n+\treturn \"\"\n+    }\n+    set fd [open $file r]\n+    set tokens [string trim [read $fd]]\n+    close $fd\n+    return $tokens\n+}\n+\n # Find `jv-scan'.  FIXME: this relies on DejaGnu internals.  These\n # should probably be exposed in a better way.\n proc find_jvscan {} {\n@@ -221,8 +232,15 @@ proc libjava_arguments {{mode compile}} {\n \n #\n # Run the test specified by srcfile and resultfile. compile_args and\n-# exec_args are additional arguments to be passed in when compiling and\n-# running the testcase, respectively.\n+# exec_args are options telling this proc how to work.\n+#   `no-exec'     don't try to run the test\n+#   `xfail-gcj'   compilation from source will fail\n+#   `xfail-javac' compilation with javac will fail\n+#   `xfail-gcjC'  compilation with gcj -C will fail\n+#   `xfail-byte'  compilation from bytecode will fail\n+#   `xfail-exec'  exec will fail\n+#   `xfail-output' output will be wrong\n+#   \n #\n proc test_libjava_from_source { options srcfile compile_args inpfile resultfile exec_args } {\n     global base_dir\n@@ -234,6 +252,13 @@ proc test_libjava_from_source { options srcfile compile_args inpfile resultfile\n     global tmpdir\n     global runtests\n \n+    # Make opts into an array.\n+    set opts(_) x\n+    unset opts(_)\n+    foreach item $exec_args {\n+\tset opts($item) x\n+    }\n+\n     set errname [file rootname [file tail $srcfile]]\n     if {! [runtest_file_p $runtests $errname]} {\n         return\n@@ -253,10 +278,13 @@ proc test_libjava_from_source { options srcfile compile_args inpfile resultfile\n     }\n \n     set x [target_compile $srcfile \"$executable\" executable $args]\n+    if {[info exists opts(xfail-gcj)]} {\n+\tsetup_xfail *-*-*\n+    }\n     if { $x != \"\" } {\n \tverbose \"target_compile failed: $x\" 2\n \tfail \"$errname compilation from source\"\n-\tif {$exec_args != \"no-exec\"} {\n+\tif {[info exists opts(xfail-gcj)] || ! [info exists opts(no-exec)]} {\n \t    setup_xfail \"*-*-*\"\n \t    fail \"$errname execution from source compiled test\"\n \t    setup_xfail \"*-*-*\"\n@@ -266,17 +294,20 @@ proc test_libjava_from_source { options srcfile compile_args inpfile resultfile\n     }\n     pass \"$errname compilation from source\"\n \n-    if { $exec_args == \"no-exec\" } {\n+    if {[info exists opts(no-exec)]} {\n \treturn\n     }\n \n-    set result [libjava_load $executable \"$exec_args\" \"$inpfile\"];\n+    set result [libjava_load $executable \"\" \"$inpfile\"];\n     set status [lindex $result 0];\n     set output [lindex $result 1];\n+    if {[info exists opts(xfail-exec)]} then {\n+\tsetup_xfail *-*-*\n+    }\n     $status \"$errname execution from source compiled test\"\n     if { $status != \"pass\" } {\n \tsetup_xfail \"*-*-*\"\n-\tfail \"$errname output from source compiled test\"\n+\tfail \"$errname execution from source compiled test\"\n \treturn;\n     }\n \n@@ -305,6 +336,9 @@ proc test_libjava_from_source { options srcfile compile_args inpfile resultfile\n \t    set passed 1;\n \t}\n     }\n+    if {[info exists opts(xfail-output)]} {\n+\tsetup_xfail *-*-*\n+    }\n     if { $passed == 1 } {\n \tpass \"$errname output from source compiled test\"\n     } else {\n@@ -317,8 +351,14 @@ proc test_libjava_from_source { options srcfile compile_args inpfile resultfile\n \n #\n # Run the test specified by srcfile and resultfile. compile_args and\n-# exec_args are additional arguments to be passed in when compiling and\n-# running the testcase, respectively.\n+# exec_args are options telling this proc how to work.\n+#   `no-exec' don't try to run the test\n+#   `xfail-gcj'   compilation from source will fail\n+#   `xfail-javac' compilation with javac will fail\n+#   `xfail-gcjC'  compilation with gcj -C will fail\n+#   `xfail-byte'  compilation from bytecode will fail\n+#   `xfail-exec'  exec will fail\n+#   `xfail-output' output will be wrong\n #\n proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile exec_args } {\n     global base_dir\n@@ -330,18 +370,30 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n     global tmpdir\n     global runtests\n \n+    # Make opts into an array.\n+    set opts(_) x\n+    unset opts(_)\n+    foreach item $exec_args {\n+\tset opts($item) x\n+    }\n+\n     set errname [file rootname [file tail $srcfile]]\n     if {! [runtest_file_p $runtests $errname]} {\n         return\n     }\n \n     # bytecompile files with Sun's compiler for now.\n     set bc_ok [bytecompile_file $srcfile $objdir]\n+    # FIXME: assumes we are using javac to compile to bytecode.\n+    # This is not always the case.\n+    if {[info exists opts(xfail-javac)]} {\n+\tsetup_xfail *-*-*\n+    }\n     if {! $bc_ok} then {\n \tfail \"$errname byte compilation\"\n \tsetup_xfail \"*-*-*\"\n \tfail \"$errname compilation from bytecode\"\n-\tif {$exec_args != \"no-exec\"} {\n+\tif {! [info exists opts(no-exec)]} {\n \t    setup_xfail \"*-*-*\"\n \t    fail \"$errname execution from bytecode->native test\"\n \t    setup_xfail \"*-*-*\"\n@@ -380,7 +432,7 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n     # method.  However, for no-exec tests it is ok.\n     set largs {}\n     if {$main_name == \"\"} {\n-\tif {$exec_args != \"no-exec\"} {\n+\tif {! [info exists opts(no-exec)]} {\n \t    perror \"No `main' given in program $errname\"\n \t    return\n \t} else {\n@@ -409,11 +461,14 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n \n     verbose \"compilation command = $args\" 2\n     set x [target_compile $class_files \"$executable\" $type $args]\n+    if {[info exists opts(xfail-byte)]} {\n+\tsetup_xfail *-*-*\n+    }\n     if { $x != \"\" } {\n \tverbose \"target_compile failed: $x\" 2\n \tfail \"$errname compilation from bytecode\"\n \tsetup_xfail \"*-*-*\"\n-\tif {$exec_args != \"no-exec\"} {\n+\tif {! [info exists opts(no-exec)]} {\n \t    fail \"$errname execution from bytecode->native test\"\n \t    setup_xfail \"*-*-*\"\n \t    fail \"$errname output from bytecode->native test\"\n@@ -422,13 +477,16 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n     }\n     pass \"$errname compilation from bytecode\"\n \n-    if { $exec_args == \"no-exec\" } {\n+    if {[info exists opts(no-exec)]} {\n \treturn\n     }\n \n-    set result [libjava_load $executable \"$exec_args\" \"$inpfile\"];\n+    set result [libjava_load $executable \"\" \"$inpfile\"];\n     set status [lindex $result 0];\n     set output [lindex $result 1];\n+    if {[info exists opts(xfail-exec)]} {\n+\tsetup_xfail *-*-*\n+    }\n     $status \"$errname execution from bytecode->native test\"\n     if { $status != \"pass\" } {\n \tsetup_xfail \"*-*-*\"\n@@ -452,6 +510,9 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n     verbose \"expected is $expected\"\n     verbose \"actual is $output\"\n     set passed 0;\n+    if {[info exists opts(xfail-output)]} {\n+\tsetup_xfail *-*-*\n+    }\n     if {$options == \"regexp_match\"} {\n \tif [regexp $expected $output] {\n \t    set passed 1;\n@@ -473,8 +534,14 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n \n #\n # Run the test specified by srcfile and resultfile. compile_args and\n-# exec_args are additional arguments to be passed in when compiling and\n-# running the testcase, respectively.\n+# exec_args are options telling this proc how to work.\n+#   `no-exec' don't try to run the test\n+#   `xfail-gcj'   compilation from source will fail\n+#   `xfail-javac' compilation with javac will fail\n+#   `xfail-gcjC'  compilation with gcj -C will fail\n+#   `xfail-byte'  compilation from bytecode will fail\n+#   `xfail-exec'  exec will fail\n+#   `xfail-output' output will be wrong\n #\n proc test_libjava { options srcfile compile_args inpfile resultfile exec_args } {\n     test_libjava_from_source $options $srcfile $compile_args $inpfile $resultfile $exec_args\n@@ -489,3 +556,7 @@ proc default_libjava_version {} {\n \n proc default_libjava_start { } {\n }\n+\n+# Local Variables:\n+# tcl-indent-level:4\n+# End:"}, {"sha": "755ab8794dfab1519adff4b16fcad2d5a9a4070e", "filename": "libjava/testsuite/libjava.compile/Case.xfail", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d4f6f9a8fbf2fb729fa8896b714a7b99766c66/libjava%2Ftestsuite%2Flibjava.compile%2FCase.xfail", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d4f6f9a8fbf2fb729fa8896b714a7b99766c66/libjava%2Ftestsuite%2Flibjava.compile%2FCase.xfail", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.compile%2FCase.xfail?ref=f3d4f6f9a8fbf2fb729fa8896b714a7b99766c66", "patch": "@@ -0,0 +1 @@\n+xfail-gcj"}, {"sha": "755ab8794dfab1519adff4b16fcad2d5a9a4070e", "filename": "libjava/testsuite/libjava.compile/Where.xfail", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d4f6f9a8fbf2fb729fa8896b714a7b99766c66/libjava%2Ftestsuite%2Flibjava.compile%2FWhere.xfail", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d4f6f9a8fbf2fb729fa8896b714a7b99766c66/libjava%2Ftestsuite%2Flibjava.compile%2FWhere.xfail", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.compile%2FWhere.xfail?ref=f3d4f6f9a8fbf2fb729fa8896b714a7b99766c66", "patch": "@@ -0,0 +1 @@\n+xfail-gcj"}, {"sha": "c76a58c5b0e22f04ee40727d0c36f9bba954f0eb", "filename": "libjava/testsuite/libjava.compile/test.exp", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d4f6f9a8fbf2fb729fa8896b714a7b99766c66/libjava%2Ftestsuite%2Flibjava.compile%2Ftest.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d4f6f9a8fbf2fb729fa8896b714a7b99766c66/libjava%2Ftestsuite%2Flibjava.compile%2Ftest.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.compile%2Ftest.exp?ref=f3d4f6f9a8fbf2fb729fa8896b714a7b99766c66", "patch": "@@ -5,6 +5,13 @@ verbose \"srcfiles are $srcfiles\"\n \n set prefix \"\"\n foreach x $srcfiles {\n-    test_libjava $options \"$x\" \"\" \"\" \"\" \"no-exec\"\n-    test_libjava $options \"$x\" \"-O\" \"\" \"\" \"no-exec\"\n+    set args [libjava_read_xfail [file rootname $x].xfail]\n+    lappend args no-exec\n+\n+    test_libjava $options \"$x\" \"\" \"\" \"\" $args\n+    test_libjava $options \"$x\" \"-O\" \"\" \"\" $args\n }\n+\n+# Local Variables:\n+# tcl-indent-level:4\n+# End:"}, {"sha": "8e7b31e450f0267bce6c8b074a145f44353c6722", "filename": "libjava/testsuite/libjava.lang/Array_1.xfail", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d4f6f9a8fbf2fb729fa8896b714a7b99766c66/libjava%2Ftestsuite%2Flibjava.lang%2FArray_1.xfail", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d4f6f9a8fbf2fb729fa8896b714a7b99766c66/libjava%2Ftestsuite%2Flibjava.lang%2FArray_1.xfail", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FArray_1.xfail?ref=f3d4f6f9a8fbf2fb729fa8896b714a7b99766c66", "patch": "@@ -0,0 +1 @@\n+xfail-gcj xfail-exec"}, {"sha": "eece6415f8176e75ef76bf4527fac05c1c57275a", "filename": "libjava/testsuite/libjava.lang/Final.xfail", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d4f6f9a8fbf2fb729fa8896b714a7b99766c66/libjava%2Ftestsuite%2Flibjava.lang%2FFinal.xfail", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d4f6f9a8fbf2fb729fa8896b714a7b99766c66/libjava%2Ftestsuite%2Flibjava.lang%2FFinal.xfail", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FFinal.xfail?ref=f3d4f6f9a8fbf2fb729fa8896b714a7b99766c66", "patch": "@@ -0,0 +1 @@\n+xfail-exec"}, {"sha": "c0b8570403f02225f8d89e08ff158afedb21eec1", "filename": "libjava/testsuite/libjava.lang/test.exp", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d4f6f9a8fbf2fb729fa8896b714a7b99766c66/libjava%2Ftestsuite%2Flibjava.lang%2Ftest.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d4f6f9a8fbf2fb729fa8896b714a7b99766c66/libjava%2Ftestsuite%2Flibjava.lang%2Ftest.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2Ftest.exp?ref=f3d4f6f9a8fbf2fb729fa8896b714a7b99766c66", "patch": "@@ -7,12 +7,7 @@ set prefix \"\"\n foreach x $srcfiles {\n     regsub \"\\\\.out$\" $x \"\" prefix\n     set bname [file tail $prefix]\n-    set args \"\"\n-    if [file exists $srcdir/$subdir/${bname}.arg] {\n-\tset id [open \"$srcdir/$subdir/${bname}.arg\" r];\n-\tset args [read -nonewline $id];\n-\tclose $id;\n-    }\n+\n     if [file exists $srcdir/$subdir/${bname}.xpo] {\n \tset resfile \"$srcdir/$subdir/${bname}.xpo\"\n \tset options \"regexp_match\"\n@@ -27,8 +22,14 @@ foreach x $srcfiles {\n \tset inpfile \"\"\n     }\n \n+    set args [libjava_read_xfail $srcdir/$subdir/$bname.xfail]\n+\n     verbose \"inpfile is $inpfile\"\n \n     test_libjava $options \"${prefix}.java\" \"\" $inpfile $resfile $args\n     test_libjava $options \"${prefix}.java\" \"-O\" $inpfile $resfile $args\n }\n+\n+# Local Variables:\n+# tcl-indent-level:4\n+# End:"}]}