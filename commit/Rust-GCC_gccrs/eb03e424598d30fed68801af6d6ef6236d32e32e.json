{"sha": "eb03e424598d30fed68801af6d6ef6236d32e32e", "node_id": "C_kwDOANBUbNoAKGViMDNlNDI0NTk4ZDMwZmVkNjg4MDFhZjZkNmVmNjIzNmQzMmUzMmU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-19T16:27:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-19T16:27:41Z"}, "message": "c++: Fix up CONSTRUCTOR_PLACEHOLDER_BOUNDARY handling [PR105256]\n\nThe CONSTRUCTOR_PLACEHOLDER_BOUNDARY bit is supposed to separate\nPLACEHOLDER_EXPRs that should be replaced by one object or subobjects of it\n(variable, TARGET_EXPR slot, ...) from other PLACEHOLDER_EXPRs that should\nbe replaced by different objects or subobjects.\nThe bit is set when finding PLACEHOLDER_EXPRs inside of a CONSTRUCTOR, not\nlooking into nested CONSTRUCTOR_PLACEHOLDER_BOUNDARY ctors, and we prevent\nelision of TARGET_EXPRs (through TARGET_EXPR_NO_ELIDE) whose initializer\nis a CONSTRUCTOR_PLACEHOLDER_BOUNDARY ctor.  The following testcase ICEs\nthough, we don't replace the placeholders in there at all, because\nCONSTRUCTOR_PLACEHOLDER_BOUNDARY isn't set on the TARGET_EXPR_INITIAL\nctor, but on a ctor nested in such a ctor.  replace_placeholders should be\nrun on the whole TARGET_EXPR slot.\n\nSo, the following patch fixes it by moving the CONSTRUCTOR_PLACEHOLDER_BOUNDARY\nbit from nested CONSTRUCTORs to the CONSTRUCTOR containing those (but only\nif it is closely nested, if there is some other tree sandwiched in between,\nit doesn't do it).\n\n2022-04-19  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/105256\n\t* typeck2.cc (process_init_constructor_array,\n\tprocess_init_constructor_record, process_init_constructor_union): Move\n\tCONSTRUCTOR_PLACEHOLDER_BOUNDARY flag from CONSTRUCTOR elements to the\n\tcontaining CONSTRUCTOR.\n\n\t* g++.dg/cpp0x/pr105256.C: New test.", "tree": {"sha": "01b2c5700a02f5bf8599bb4216da618bc00f2281", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01b2c5700a02f5bf8599bb4216da618bc00f2281"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb03e424598d30fed68801af6d6ef6236d32e32e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb03e424598d30fed68801af6d6ef6236d32e32e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb03e424598d30fed68801af6d6ef6236d32e32e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb03e424598d30fed68801af6d6ef6236d32e32e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "353434b65ef7972172597d232ae17022d9a57244", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/353434b65ef7972172597d232ae17022d9a57244", "html_url": "https://github.com/Rust-GCC/gccrs/commit/353434b65ef7972172597d232ae17022d9a57244"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "63d95c1529a0594b9cc1a8470b7aad4542ba129e", "filename": "gcc/cp/typeck2.cc", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb03e424598d30fed68801af6d6ef6236d32e32e/gcc%2Fcp%2Ftypeck2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb03e424598d30fed68801af6d6ef6236d32e32e/gcc%2Fcp%2Ftypeck2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.cc?ref=eb03e424598d30fed68801af6d6ef6236d32e32e", "patch": "@@ -1515,6 +1515,14 @@ process_init_constructor_array (tree type, tree init, int nested, int flags,\n \t      strip_array_types (TREE_TYPE (ce->value)))));\n \n       picflags |= picflag_from_initializer (ce->value);\n+      /* Propagate CONSTRUCTOR_PLACEHOLDER_BOUNDARY to outer\n+\t CONSTRUCTOR.  */\n+      if (TREE_CODE (ce->value) == CONSTRUCTOR\n+\t  && CONSTRUCTOR_PLACEHOLDER_BOUNDARY (ce->value))\n+\t{\n+\t  CONSTRUCTOR_PLACEHOLDER_BOUNDARY (init) = 1;\n+\t  CONSTRUCTOR_PLACEHOLDER_BOUNDARY (ce->value) = 0;\n+\t}\n     }\n \n   /* No more initializers. If the array is unbounded, we are done. Otherwise,\n@@ -1560,6 +1568,14 @@ process_init_constructor_array (tree type, tree init, int nested, int flags,\n \t      }\n \n \t    picflags |= picflag_from_initializer (next);\n+\t    /* Propagate CONSTRUCTOR_PLACEHOLDER_BOUNDARY to outer\n+\t       CONSTRUCTOR.  */\n+\t    if (TREE_CODE (next) == CONSTRUCTOR\n+\t\t&& CONSTRUCTOR_PLACEHOLDER_BOUNDARY (next))\n+\t      {\n+\t\tCONSTRUCTOR_PLACEHOLDER_BOUNDARY (init) = 1;\n+\t\tCONSTRUCTOR_PLACEHOLDER_BOUNDARY (next) = 0;\n+\t      }\n \t    if (len > i+1)\n \t      {\n \t\ttree range = build2 (RANGE_EXPR, size_type_node,\n@@ -1754,6 +1770,13 @@ process_init_constructor_record (tree type, tree init, int nested, int flags,\n       if (fldtype != TREE_TYPE (field))\n \tnext = cp_convert_and_check (TREE_TYPE (field), next, complain);\n       picflags |= picflag_from_initializer (next);\n+      /* Propagate CONSTRUCTOR_PLACEHOLDER_BOUNDARY to outer CONSTRUCTOR.  */\n+      if (TREE_CODE (next) == CONSTRUCTOR\n+\t  && CONSTRUCTOR_PLACEHOLDER_BOUNDARY (next))\n+\t{\n+\t  CONSTRUCTOR_PLACEHOLDER_BOUNDARY (init) = 1;\n+\t  CONSTRUCTOR_PLACEHOLDER_BOUNDARY (next) = 0;\n+\t}\n       CONSTRUCTOR_APPEND_ELT (v, field, next);\n     }\n \n@@ -1894,6 +1917,14 @@ process_init_constructor_union (tree type, tree init, int nested, int flags,\n     ce->value = massage_init_elt (TREE_TYPE (ce->index), ce->value, nested,\n \t\t\t\t  flags, complain);\n \n+  /* Propagate CONSTRUCTOR_PLACEHOLDER_BOUNDARY to outer CONSTRUCTOR.  */\n+  if (ce->value\n+      && TREE_CODE (ce->value) == CONSTRUCTOR\n+      && CONSTRUCTOR_PLACEHOLDER_BOUNDARY (ce->value))\n+    {\n+      CONSTRUCTOR_PLACEHOLDER_BOUNDARY (init) = 1;\n+      CONSTRUCTOR_PLACEHOLDER_BOUNDARY (ce->value) = 0;\n+    }\n   return picflag_from_initializer (ce->value);\n }\n "}, {"sha": "98ce5e8b7bfa4199832d0f826153c87d06a889a0", "filename": "gcc/testsuite/g++.dg/cpp0x/pr105256.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb03e424598d30fed68801af6d6ef6236d32e32e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr105256.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb03e424598d30fed68801af6d6ef6236d32e32e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr105256.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr105256.C?ref=eb03e424598d30fed68801af6d6ef6236d32e32e", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/105256\n+// { dg-do compile { target c++11 } }\n+\n+int bar (int &);\n+\n+struct S {\n+  struct T {\n+    struct U {\n+      int i = bar (i);\n+    } u;\n+  };\n+};\n+\n+void\n+foo (S::T *p)\n+{\n+  *p = {};\n+};"}]}