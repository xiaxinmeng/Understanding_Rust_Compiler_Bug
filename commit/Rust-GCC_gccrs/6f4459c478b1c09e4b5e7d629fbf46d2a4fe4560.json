{"sha": "6f4459c478b1c09e4b5e7d629fbf46d2a4fe4560", "node_id": "C_kwDOANBUbNoAKDZmNDQ1OWM0NzhiMWMwOWU0YjVlN2Q2MjlmYmY0NmQyYTRmZTQ1NjA", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-09-30T17:33:49Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-09-30T17:35:13Z"}, "message": "i386: Eliminate sign extension after logic operation [PR89954]\n\nConvert (sign_extend:WIDE (any_logic:NARROW (memory, immediate)))\nto (any_logic:WIDE (sign_extend (memory)), (sign_extend (immediate))).\nThis eliminates sign extension after logic operation.\n\n2021-09-30  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\tPR target/89954\n\t* config/i386/i386.md\n\t(sign_extend:WIDE (any_logic:NARROW (memory, immediate)) splitters):\n\tNew splitters.\n\ngcc/testsuite/\n\tPR target/89954\n\t* gcc.target/i386/pr89954.c: New test.", "tree": {"sha": "2e6c870cf2ff525719423c95eeee41361f91fa10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e6c870cf2ff525719423c95eeee41361f91fa10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f4459c478b1c09e4b5e7d629fbf46d2a4fe4560", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f4459c478b1c09e4b5e7d629fbf46d2a4fe4560", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f4459c478b1c09e4b5e7d629fbf46d2a4fe4560", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f4459c478b1c09e4b5e7d629fbf46d2a4fe4560/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "643e8f4ee3a2a59a9b96fbcd1ffa8bacbda5b383", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/643e8f4ee3a2a59a9b96fbcd1ffa8bacbda5b383", "html_url": "https://github.com/Rust-GCC/gccrs/commit/643e8f4ee3a2a59a9b96fbcd1ffa8bacbda5b383"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "04cb3bf6a33675b1e03a1a65614b983ea7606cc1", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4459c478b1c09e4b5e7d629fbf46d2a4fe4560/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4459c478b1c09e4b5e7d629fbf46d2a4fe4560/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=6f4459c478b1c09e4b5e7d629fbf46d2a4fe4560", "patch": "@@ -10210,6 +10210,40 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+;; convert (sign_extend:WIDE (any_logic:NARROW (memory, immediate)))\n+;; to (any_logic:WIDE (sign_extend (memory)), (sign_extend (immediate))).\n+;; This eliminates sign extension after logic operation.\n+\n+(define_split\n+  [(set (match_operand:SWI248 0 \"register_operand\")\n+\t(sign_extend:SWI248\n+\t  (any_logic:QI (match_operand:QI 1 \"memory_operand\")\n+\t\t\t(match_operand:QI 2 \"const_int_operand\"))))]\n+  \"\"\n+  [(set (match_dup 3) (sign_extend:SWI248 (match_dup 1)))\n+   (set (match_dup 0) (any_logic:SWI248 (match_dup 3) (match_dup 2)))]\n+  \"operands[3] = gen_reg_rtx (<MODE>mode);\")\n+\n+(define_split\n+  [(set (match_operand:SWI48 0 \"register_operand\")\n+\t(sign_extend:SWI48\n+\t  (any_logic:HI (match_operand:HI 1 \"memory_operand\")\n+\t\t\t(match_operand:HI 2 \"const_int_operand\"))))]\n+  \"\"\n+  [(set (match_dup 3) (sign_extend:SWI48 (match_dup 1)))\n+   (set (match_dup 0) (any_logic:SWI48 (match_dup 3) (match_dup 2)))]\n+  \"operands[3] = gen_reg_rtx (<MODE>mode);\")\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(sign_extend:DI\n+\t  (any_logic:SI (match_operand:SI 1 \"memory_operand\")\n+\t\t\t(match_operand:SI 2 \"const_int_operand\"))))]\n+  \"TARGET_64BIT\"\n+  [(set (match_dup 3) (sign_extend:DI (match_dup 1)))\n+   (set (match_dup 0) (any_logic:DI (match_dup 3) (match_dup 2)))]\n+  \"operands[3] = gen_reg_rtx (DImode);\")\n+\n (define_insn \"*<code><mode>_2\"\n   [(set (reg FLAGS_REG)\n \t(compare (any_or:SWI"}, {"sha": "c1e9f3a9562559153ef573124b7f89e4471498c5", "filename": "gcc/testsuite/gcc.target/i386/pr89954.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4459c478b1c09e4b5e7d629fbf46d2a4fe4560/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89954.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4459c478b1c09e4b5e7d629fbf46d2a4fe4560/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89954.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89954.c?ref=6f4459c478b1c09e4b5e7d629fbf46d2a4fe4560", "patch": "@@ -0,0 +1,45 @@\n+/* PR target/89954 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+signed char ab;\n+\n+short aw;\n+\n+int al;\n+\n+short sext_andbw (void) { return ab & -2; }\n+short sext_orbw (void) { return ab | -3; }\n+short sext_xorbw (void) { return ab ^ -4; }\n+\n+int sext_andbl (void) { return ab & -2; }\n+int sext_orbl (void) { return ab | -3; }\n+int sext_xorbl (void) { return ab ^ -4; }\n+\n+int sext_andwl (void) { return aw & -2; }\n+int sext_orwl (void) { return aw | -3; }\n+int sext_xorwl (void) { return aw ^ -4; }\n+\n+#ifdef __x86_64__\n+\n+long long sext_andbq (void) { return ab & -2; }\n+long long sext_orbq (void) { return ab | -3; }\n+long long sext_xorbq (void) { return ab ^ -4; }\n+\n+long long sext_andwq (void) { return aw & -2; }\n+long long sext_orwq (void) { return aw | -3; }\n+long long sext_xorwq (void) { return aw ^ -4; }\n+\n+long long sext_andlq (void) { return al & -2; }\n+long long sext_orlq (void) { return al | -3; }\n+long long sext_xorlq (void) { return al ^ -4; }\n+\n+#endif\n+\n+/* { dg-final { scan-assembler-times \"movsbw\" 3 } } */\n+/* { dg-final { scan-assembler-times \"movsbl\" 3 } } */\n+/* { dg-final { scan-assembler-times \"movswl\" 3 } } */\n+\n+/* { dg-final { scan-assembler-times \"movsbq\" 3 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"movswq\" 3 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"movslq\" 3 { target { ! ia32 } } } } */"}]}