{"sha": "05a76b51fb58e10f74e5f4fe613dc5b40fae44d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVhNzZiNTFmYjU4ZTEwZjc0ZTVmNGZlNjEzZGM1YjQwZmFlNDRkOA==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2008-08-04T10:23:16Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-04T10:23:16Z"}, "message": "exp_aggr.adb (Build_Record_Aggr_Code): Perform a conversion of the target to the type of the aggregate in the case...\n\n2008-08-04  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_aggr.adb (Build_Record_Aggr_Code): Perform a conversion of the\n\ttarget to the type of the aggregate in the case where the target object\n\tis class-wide.\n\n\t* exp_ch5.adb (Expand_Simple_Function_Return): When the function's\n\tresult type is class-wide and inherently limited, and the expression\n\thas a specific type, create a return object of the specific type, for\n\tmore efficient handling of returns of build-in-place aggregates (avoids\n\tconversions of the class-wide return object to the specific type on\n\tcomponent assignments).\n\n\t* sem_ch6.adb (Check_Return_Subtype_Indication): Suppress the error\n\tabout a type mismatch for a class-wide function with a return object\n\thaving a specific type when the object declaration doesn't come from\n\tsource. Such an object can result from the expansion of a simple return.\n\nFrom-SVN: r138603", "tree": {"sha": "b867711d776c6a9ac4e1f0d76a72c7198b7e180c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b867711d776c6a9ac4e1f0d76a72c7198b7e180c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05a76b51fb58e10f74e5f4fe613dc5b40fae44d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05a76b51fb58e10f74e5f4fe613dc5b40fae44d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05a76b51fb58e10f74e5f4fe613dc5b40fae44d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05a76b51fb58e10f74e5f4fe613dc5b40fae44d8/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "53aa444419c83c029c5502db0a3b01971d46d793", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53aa444419c83c029c5502db0a3b01971d46d793", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53aa444419c83c029c5502db0a3b01971d46d793"}], "stats": {"total": 68, "additions": 47, "deletions": 21}, "files": [{"sha": "bc3b954fb6c3b6a9a227ab9664b59680ddffea2c", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05a76b51fb58e10f74e5f4fe613dc5b40fae44d8/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05a76b51fb58e10f74e5f4fe613dc5b40fae44d8/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=05a76b51fb58e10f74e5f4fe613dc5b40fae44d8", "patch": "@@ -2436,8 +2436,12 @@ package body Exp_Aggr is\n       --  to the actual type of the aggregate, so that the proper components\n       --  are visible. We know already that the types are compatible.\n \n+      --  There should also be a comment here explaining why the conversion\n+      --  is needed in the case of interfaces.???\n+\n       if Present (Etype (Lhs))\n-        and then Is_Interface (Etype (Lhs))\n+        and then (Is_Interface (Etype (Lhs))\n+                   or else Is_Class_Wide_Type (Etype (Lhs)))\n       then\n          Target := Unchecked_Convert_To (Typ, Lhs);\n       else"}, {"sha": "729c126f4d61a574a604dc727ea766f436b3bd4f", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05a76b51fb58e10f74e5f4fe613dc5b40fae44d8/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05a76b51fb58e10f74e5f4fe613dc5b40fae44d8/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=05a76b51fb58e10f74e5f4fe613dc5b40fae44d8", "patch": "@@ -3695,22 +3695,39 @@ package body Exp_Ch5 is\n             Return_Object_Entity : constant Entity_Id :=\n                                      Make_Defining_Identifier (Loc,\n                                        New_Internal_Name ('R'));\n+            Subtype_Ind : Node_Id;\n \n-            Subtype_Ind : constant Node_Id := New_Occurrence_Of (R_Type, Loc);\n+         begin\n+            --  If the result type of the function is class-wide and the\n+            --  expression has a specific type, then we use the expression's\n+            --  type as the type of the return object. In cases where the\n+            --  expression is an aggregate that is built in place, this avoids\n+            --  the need for an expensive conversion of the return object to\n+            --  the specific type on assignments to the individual components.\n+\n+            if Is_Class_Wide_Type (R_Type)\n+              and then not Is_Class_Wide_Type (Etype (Exp))\n+            then\n+               Subtype_Ind := New_Occurrence_Of (Etype (Exp), Loc);\n+            else\n+               Subtype_Ind := New_Occurrence_Of (R_Type, Loc);\n+            end if;\n \n-            Obj_Decl : constant Node_Id :=\n-                         Make_Object_Declaration (Loc,\n-                           Defining_Identifier => Return_Object_Entity,\n-                           Object_Definition   => Subtype_Ind,\n-                           Expression          => Exp);\n+            declare\n+               Obj_Decl : constant Node_Id :=\n+                            Make_Object_Declaration (Loc,\n+                              Defining_Identifier => Return_Object_Entity,\n+                              Object_Definition   => Subtype_Ind,\n+                              Expression          => Exp);\n \n-            Ext : constant Node_Id := Make_Extended_Return_Statement (Loc,\n-                    Return_Object_Declarations => New_List (Obj_Decl));\n+               Ext : constant Node_Id := Make_Extended_Return_Statement (Loc,\n+                       Return_Object_Declarations => New_List (Obj_Decl));\n \n-         begin\n-            Rewrite (N, Ext);\n-            Analyze (N);\n-            return;\n+            begin\n+               Rewrite (N, Ext);\n+               Analyze (N);\n+               return;\n+            end;\n          end;\n       end if;\n "}, {"sha": "384bd5790074cec8b8f133caf00007ff58123276", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05a76b51fb58e10f74e5f4fe613dc5b40fae44d8/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05a76b51fb58e10f74e5f4fe613dc5b40fae44d8/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=05a76b51fb58e10f74e5f4fe613dc5b40fae44d8", "patch": "@@ -606,17 +606,22 @@ package body Sem_Ch6 is\n          --  definition matches the class-wide type. This prevents rejection\n          --  in the case where the object declaration is initialized by a call\n          --  to a build-in-place function with a specific result type and the\n-         --  object entity had its type changed to that specific type. (Note\n-         --  that the ARG believes that return objects should be allowed to\n-         --  have a type covered by a class-wide result type in any case, so\n-         --  once that relaxation is made (see AI05-32), the above check for\n-         --  type compatibility should be changed to test Covers rather than\n-         --  equality, and then the following special test will no longer be\n-         --  needed. ???)\n+         --  object entity had its type changed to that specific type. This is\n+         --  also allowed in the case where Obj_Decl does not come from source,\n+         --  which can occur for an expansion of a simple return statement of\n+         --  a build-in-place class-wide function when the result expression\n+         --  has a specific type, because a return object with a specific type\n+         --  is created. (Note that the ARG believes that return objects should\n+         --  be allowed to have a type covered by a class-wide result type in\n+         --  any case, so once that relaxation is made (see AI05-32), the above\n+         --  check for type compatibility should be changed to test Covers\n+         --  rather than equality, and the following special test will no\n+         --  longer be needed. ???)\n \n          elsif Is_Class_Wide_Type (R_Type)\n            and then\n-             R_Type = Etype (Object_Definition (Original_Node (Obj_Decl)))\n+             (R_Type = Etype (Object_Definition (Original_Node (Obj_Decl)))\n+               or else not Comes_From_Source (Obj_Decl))\n          then\n             null;\n "}]}