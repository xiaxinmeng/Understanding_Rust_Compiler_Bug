{"sha": "a61f6afbee370785cf091fe46e2e022748528307", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTYxZjZhZmJlZTM3MDc4NWNmMDkxZmU0NmUyZTAyMjc0ODUyODMwNw==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-07-21T16:30:00Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-07-21T21:58:11Z"}, "message": "OpenACC 'nohost' clause\n\nDo not \"compile a version of this procedure for the host\".\n\n\tgcc/\n\t* tree-core.h (omp_clause_code): Add 'OMP_CLAUSE_NOHOST'.\n\t* tree.c (omp_clause_num_ops, omp_clause_code_name, walk_tree_1):\n\tHandle it.\n\t* tree-pretty-print.c (dump_omp_clause): Likewise.\n\t* omp-general.c (oacc_verify_routine_clauses): Likewise.\n\t* gimplify.c (gimplify_scan_omp_clauses)\n\t(gimplify_adjust_omp_clauses): Likewise.\n\t* tree-nested.c (convert_nonlocal_omp_clauses)\n\t(convert_local_omp_clauses): Likewise.\n\t* omp-low.c (scan_sharing_clauses): Likewise.\n\t* omp-offload.c (execute_oacc_device_lower): Update.\n\tgcc/c-family/\n\t* c-pragma.h (pragma_omp_clause): Add 'PRAGMA_OACC_CLAUSE_NOHOST'.\n\tgcc/c/\n\t* c-parser.c (c_parser_omp_clause_name): Handle 'nohost'.\n\t(c_parser_oacc_all_clauses): Handle 'PRAGMA_OACC_CLAUSE_NOHOST'.\n\t(OACC_ROUTINE_CLAUSE_MASK): Add 'PRAGMA_OACC_CLAUSE_NOHOST'.\n\t* c-typeck.c (c_finish_omp_clauses): Handle 'OMP_CLAUSE_NOHOST'.\n\tgcc/cp/\n\t* parser.c (cp_parser_omp_clause_name): Handle 'nohost'.\n\t(cp_parser_oacc_all_clauses): Handle 'PRAGMA_OACC_CLAUSE_NOHOST'.\n\t(OACC_ROUTINE_CLAUSE_MASK): Add 'PRAGMA_OACC_CLAUSE_NOHOST'.\n\t* pt.c (tsubst_omp_clauses): Handle 'OMP_CLAUSE_NOHOST'.\n\t* semantics.c (finish_omp_clauses): Likewise.\n\tgcc/fortran/\n\t* dump-parse-tree.c (show_attr): Update.\n\t* gfortran.h (symbol_attribute): Add 'oacc_routine_nohost' member.\n\t(gfc_omp_clauses): Add 'nohost' member.\n\t* module.c (ab_attribute): Add 'AB_OACC_ROUTINE_NOHOST'.\n\t(attr_bits, mio_symbol_attribute): Update.\n\t* openmp.c (omp_mask2): Add 'OMP_CLAUSE_NOHOST'.\n\t(gfc_match_omp_clauses): Handle 'OMP_CLAUSE_NOHOST'.\n\t(OACC_ROUTINE_CLAUSES): Add 'OMP_CLAUSE_NOHOST'.\n\t(gfc_match_oacc_routine): Update.\n\t* trans-decl.c (add_attributes_to_decl): Update.\n\t* trans-openmp.c (gfc_trans_omp_clauses): Likewise.\n\tgcc/testsuite/\n\t* c-c++-common/goacc/classify-routine-nohost.c: New file.\n\t* c-c++-common/goacc/classify-routine.c: Update.\n\t* c-c++-common/goacc/routine-2.c: Likewise.\n\t* c-c++-common/goacc/routine-nohost-1.c: New file.\n\t* c-c++-common/goacc/routine-nohost-2.c: Likewise.\n\t* g++.dg/goacc/template.C: Update.\n\t* gfortran.dg/goacc/classify-routine-nohost.f95: New file.\n\t* gfortran.dg/goacc/classify-routine.f95: Update.\n\t* gfortran.dg/goacc/pure-elemental-procedures-2.f90: Likewise.\n\t* gfortran.dg/goacc/routine-6.f90: Likewise.\n\t* gfortran.dg/goacc/routine-intrinsic-2.f: Likewise.\n\t* gfortran.dg/goacc/routine-module-1.f90: Likewise.\n\t* gfortran.dg/goacc/routine-module-2.f90: Likewise.\n\t* gfortran.dg/goacc/routine-module-3.f90: Likewise.\n\t* gfortran.dg/goacc/routine-module-mod-1.f90: Likewise.\n\t* gfortran.dg/goacc/routine-multiple-directives-1.f90: Likewise.\n\t* gfortran.dg/goacc/routine-multiple-directives-2.f90: Likewise.\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/routine-nohost-1.c: New\n\tfile.\n\t* testsuite/libgomp.oacc-c-c++-common/routine-nohost-2.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/routine-nohost-2_2.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/routine-nohost-1.f90: Likewise.\n\nCo-Authored-By: Joseph Myers <joseph@codesourcery.com>\nCo-Authored-By: Cesar Philippidis <cesar@codesourcery.com>", "tree": {"sha": "9b20a95f5c33271d12895827a11b55638032e593", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b20a95f5c33271d12895827a11b55638032e593"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a61f6afbee370785cf091fe46e2e022748528307", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a61f6afbee370785cf091fe46e2e022748528307", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a61f6afbee370785cf091fe46e2e022748528307", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a61f6afbee370785cf091fe46e2e022748528307/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6099b9cc8ce70d2ec7f2fc9f71da95fbb66d335f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6099b9cc8ce70d2ec7f2fc9f71da95fbb66d335f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6099b9cc8ce70d2ec7f2fc9f71da95fbb66d335f"}], "stats": {"total": 973, "additions": 962, "deletions": 11}, "files": [{"sha": "c5d11ce0a5248bd423538717cbd216ada17c9c2b", "filename": "gcc/c-family/c-pragma.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Fc-family%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Fc-family%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.h?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -160,6 +160,7 @@ enum pragma_omp_clause {\n   PRAGMA_OACC_CLAUSE_HOST,\n   PRAGMA_OACC_CLAUSE_INDEPENDENT,\n   PRAGMA_OACC_CLAUSE_NO_CREATE,\n+  PRAGMA_OACC_CLAUSE_NOHOST,\n   PRAGMA_OACC_CLAUSE_NUM_GANGS,\n   PRAGMA_OACC_CLAUSE_NUM_WORKERS,\n   PRAGMA_OACC_CLAUSE_PRESENT,"}, {"sha": "92d22d1af4d46b63e014350c0886d737c6d4eec6", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -12744,6 +12744,8 @@ c_parser_omp_clause_name (c_parser *parser)\n \t    result = PRAGMA_OACC_CLAUSE_NO_CREATE;\n \t  else if (!strcmp (\"nogroup\", p))\n \t    result = PRAGMA_OMP_CLAUSE_NOGROUP;\n+\t  else if (!strcmp (\"nohost\", p))\n+\t    result = PRAGMA_OACC_CLAUSE_NOHOST;\n \t  else if (!strcmp (\"nontemporal\", p))\n \t    result = PRAGMA_OMP_CLAUSE_NONTEMPORAL;\n \t  else if (!strcmp (\"notinbranch\", p))\n@@ -16248,6 +16250,11 @@ c_parser_oacc_all_clauses (c_parser *parser, omp_clause_mask mask,\n \t  clauses = c_parser_oacc_data_clause (parser, c_kind, clauses);\n \t  c_name = \"no_create\";\n \t  break;\n+\tcase PRAGMA_OACC_CLAUSE_NOHOST:\n+\t  clauses = c_parser_oacc_simple_clause (here, OMP_CLAUSE_NOHOST,\n+\t\t\t\t\t\t clauses);\n+\t  c_name = \"nohost\";\n+\t  break;\n \tcase PRAGMA_OACC_CLAUSE_NUM_GANGS:\n \t  clauses = c_parser_oacc_single_int_clause (parser,\n \t\t\t\t\t\t     OMP_CLAUSE_NUM_GANGS,\n@@ -17179,7 +17186,8 @@ c_parser_oacc_compute (location_t loc, c_parser *parser,\n \t( (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_GANG)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_WORKER)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_VECTOR)\t\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_SEQ) )\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_SEQ)\t\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_NOHOST) )\n \n /* Parse an OpenACC routine directive.  For named directives, we apply\n    immediately to the named function.  For unnamed ones we then parse"}, {"sha": "5d6565bdaa936b365730f6c7a99e2b30cc40266a", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -15168,6 +15168,7 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \tcase OMP_CLAUSE_TILE:\n \tcase OMP_CLAUSE_IF_PRESENT:\n \tcase OMP_CLAUSE_FINALIZE:\n+\tcase OMP_CLAUSE_NOHOST:\n \t  pc = &OMP_CLAUSE_CHAIN (c);\n \t  continue;\n "}, {"sha": "45216f0a2222979ece0c5685d36ecb1da31ab7a9", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -35656,6 +35656,8 @@ cp_parser_omp_clause_name (cp_parser *parser)\n \t    result = PRAGMA_OACC_CLAUSE_NO_CREATE;\n \t  else if (!strcmp (\"nogroup\", p))\n \t    result = PRAGMA_OMP_CLAUSE_NOGROUP;\n+\t  else if (!strcmp (\"nohost\", p))\n+\t    result = PRAGMA_OACC_CLAUSE_NOHOST;\n \t  else if (!strcmp (\"nontemporal\", p))\n \t    result = PRAGMA_OMP_CLAUSE_NONTEMPORAL;\n \t  else if (!strcmp (\"notinbranch\", p))\n@@ -38879,6 +38881,11 @@ cp_parser_oacc_all_clauses (cp_parser *parser, omp_clause_mask mask,\n \t  clauses = cp_parser_oacc_data_clause (parser, c_kind, clauses);\n \t  c_name = \"no_create\";\n \t  break;\n+\tcase PRAGMA_OACC_CLAUSE_NOHOST:\n+\t  clauses = cp_parser_oacc_simple_clause (here, OMP_CLAUSE_NOHOST,\n+\t\t\t\t\t\t  clauses);\n+\t  c_name = \"nohost\";\n+\t  break;\n \tcase PRAGMA_OACC_CLAUSE_NUM_GANGS:\n \t  code = OMP_CLAUSE_NUM_GANGS;\n \t  c_name = \"num_gangs\";\n@@ -44866,8 +44873,8 @@ cp_parser_omp_taskloop (cp_parser *parser, cp_token *pragma_tok,\n \t( (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_GANG)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_WORKER)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_VECTOR)\t\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_SEQ))\n-\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_SEQ)\t\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_NOHOST) )\n \n /* Parse the OpenACC routine pragma.  This has an optional '( name )'\n    component, which must resolve to a declared namespace-scope"}, {"sha": "b396ddd0089cee12d61b36a52ece18e8f554fa9b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -17479,6 +17479,7 @@ tsubst_omp_clauses (tree clauses, enum c_omp_region_type ort,\n \tcase OMP_CLAUSE_SEQ:\n \tcase OMP_CLAUSE_IF_PRESENT:\n \tcase OMP_CLAUSE_FINALIZE:\n+\tcase OMP_CLAUSE_NOHOST:\n \t  break;\n \tdefault:\n \t  gcc_unreachable ();"}, {"sha": "f64b084963cfbf9a279475598899e7f281d8c1f9", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -8267,6 +8267,7 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \tcase OMP_CLAUSE_SEQ:\n \tcase OMP_CLAUSE_IF_PRESENT:\n \tcase OMP_CLAUSE_FINALIZE:\n+\tcase OMP_CLAUSE_NOHOST:\n \t  break;\n \n \tcase OMP_CLAUSE_MERGEABLE:"}, {"sha": "8e4a101b2ae608646494d23bb4f179cd52862a8e", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -926,6 +926,8 @@ show_attr (symbol_attribute *attr, const char * module)\n     fputs (\" ALWAYS-EXPLICIT\", dumpfile);\n   if (attr->is_main_program)\n     fputs (\" IS-MAIN-PROGRAM\", dumpfile);\n+  if (attr->oacc_routine_nohost)\n+    fputs (\" OACC-ROUTINE-NOHOST\", dumpfile);\n \n   /* FIXME: Still missing are oacc_routine_lop and ext_attr.  */\n   fputc (')', dumpfile);"}, {"sha": "921aed93dc3ac2bc3dc62e45c954e16ffb8fe66c", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -947,6 +947,7 @@ typedef struct\n \n   /* OpenACC 'routine' directive's level of parallelism.  */\n   ENUM_BITFIELD (oacc_routine_lop) oacc_routine_lop:3;\n+  unsigned oacc_routine_nohost:1;\n \n   /* Attributes set by compiler extensions (!GCC$ ATTRIBUTES).  */\n   unsigned ext_attr:EXT_ATTR_NUM;\n@@ -1488,6 +1489,7 @@ typedef struct gfc_omp_clauses\n   unsigned async:1, gang:1, worker:1, vector:1, seq:1, independent:1;\n   unsigned par_auto:1, gang_static:1;\n   unsigned if_present:1, finalize:1;\n+  unsigned nohost:1;\n   locus loc;\n }\n gfc_omp_clauses;"}, {"sha": "1804066bc8c7da131010c21868a01e7b06a0f682", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -2088,6 +2088,7 @@ enum ab_attribute\n   AB_PDT_TEMPLATE, AB_PDT_ARRAY, AB_PDT_STRING,\n   AB_OACC_ROUTINE_LOP_GANG, AB_OACC_ROUTINE_LOP_WORKER,\n   AB_OACC_ROUTINE_LOP_VECTOR, AB_OACC_ROUTINE_LOP_SEQ,\n+  AB_OACC_ROUTINE_NOHOST,\n   AB_OMP_REQ_REVERSE_OFFLOAD, AB_OMP_REQ_UNIFIED_ADDRESS,\n   AB_OMP_REQ_UNIFIED_SHARED_MEMORY, AB_OMP_REQ_DYNAMIC_ALLOCATORS,\n   AB_OMP_REQ_MEM_ORDER_SEQ_CST, AB_OMP_REQ_MEM_ORDER_ACQ_REL,\n@@ -2166,6 +2167,7 @@ static const mstring attr_bits[] =\n     minit (\"OACC_ROUTINE_LOP_WORKER\", AB_OACC_ROUTINE_LOP_WORKER),\n     minit (\"OACC_ROUTINE_LOP_VECTOR\", AB_OACC_ROUTINE_LOP_VECTOR),\n     minit (\"OACC_ROUTINE_LOP_SEQ\", AB_OACC_ROUTINE_LOP_SEQ),\n+    minit (\"OACC_ROUTINE_NOHOST\", AB_OACC_ROUTINE_NOHOST),\n     minit (\"OMP_REQ_REVERSE_OFFLOAD\", AB_OMP_REQ_REVERSE_OFFLOAD),\n     minit (\"OMP_REQ_UNIFIED_ADDRESS\", AB_OMP_REQ_UNIFIED_ADDRESS),\n     minit (\"OMP_REQ_UNIFIED_SHARED_MEMORY\", AB_OMP_REQ_UNIFIED_SHARED_MEMORY),\n@@ -2420,6 +2422,8 @@ mio_symbol_attribute (symbol_attribute *attr)\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n+      if (attr->oacc_routine_nohost)\n+\tMIO_NAME (ab_attribute) (AB_OACC_ROUTINE_NOHOST, attr_bits);\n \n       if (attr->flavor == FL_MODULE && gfc_current_ns->omp_requires)\n \t{\n@@ -2682,6 +2686,9 @@ mio_symbol_attribute (symbol_attribute *attr)\n \t      verify_OACC_ROUTINE_LOP_NONE (attr->oacc_routine_lop);\n \t      attr->oacc_routine_lop = OACC_ROUTINE_LOP_SEQ;\n \t      break;\n+\t    case AB_OACC_ROUTINE_NOHOST:\n+\t      attr->oacc_routine_nohost = 1;\n+\t      break;\n \t    case AB_OMP_REQ_REVERSE_OFFLOAD:\n \t      gfc_omp_requires_add_clause (OMP_REQ_REVERSE_OFFLOAD,\n \t\t\t\t\t   \"reverse_offload\","}, {"sha": "520a435e181282700393153b679f1e6897131c5a", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -880,6 +880,7 @@ enum omp_mask2\n   OMP_CLAUSE_IF_PRESENT,\n   OMP_CLAUSE_FINALIZE,\n   OMP_CLAUSE_ATTACH,\n+  OMP_CLAUSE_NOHOST,\n   /* This must come last.  */\n   OMP_MASK2_LAST\n };\n@@ -2083,6 +2084,13 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t      c->nogroup = needs_space = true;\n \t      continue;\n \t    }\n+\t  if ((mask & OMP_CLAUSE_NOHOST)\n+\t      && !c->nohost\n+\t      && gfc_match (\"nohost\") == MATCH_YES)\n+\t    {\n+\t      c->nohost = needs_space = true;\n+\t      continue;\n+\t    }\n \t  if ((mask & OMP_CLAUSE_NOTEMPORAL)\n \t      && gfc_match_omp_variable_list (\"nontemporal (\",\n \t\t\t\t\t      &c->lists[OMP_LIST_NONTEMPORAL],\n@@ -2607,7 +2615,8 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n   omp_mask (OMP_CLAUSE_ASYNC)\n #define OACC_ROUTINE_CLAUSES \\\n   (omp_mask (OMP_CLAUSE_GANG) | OMP_CLAUSE_WORKER | OMP_CLAUSE_VECTOR\t      \\\n-   | OMP_CLAUSE_SEQ)\n+   | OMP_CLAUSE_SEQ\t\t\t\t\t\t\t      \\\n+   | OMP_CLAUSE_NOHOST)\n \n \n static match\n@@ -2936,6 +2945,7 @@ gfc_match_oacc_routine (void)\n   gfc_omp_clauses *c = NULL;\n   gfc_oacc_routine_name *n = NULL;\n   oacc_routine_lop lop = OACC_ROUTINE_LOP_NONE;\n+  bool nohost;\n \n   old_loc = gfc_current_locus;\n \n@@ -3012,6 +3022,7 @@ gfc_match_oacc_routine (void)\n       gfc_error (\"Multiple loop axes specified for routine at %C\");\n       goto cleanup;\n     }\n+  nohost = c ? c->nohost : false;\n \n   if (isym != NULL)\n     {\n@@ -3024,6 +3035,13 @@ gfc_match_oacc_routine (void)\n \t\t     \" clause\");\n \t  goto cleanup;\n \t}\n+      /* ..., and no 'nohost' clause.  */\n+      if (nohost)\n+\t{\n+\t  gfc_error (\"Intrinsic symbol specified in !$ACC ROUTINE ( NAME )\"\n+\t\t     \" at %C marked with incompatible NOHOST clause\");\n+\t  goto cleanup;\n+\t}\n     }\n   else if (sym != NULL)\n     {\n@@ -3037,7 +3055,9 @@ gfc_match_oacc_routine (void)\n \tif (n_p->sym == sym)\n \t  {\n \t    add = false;\n-\t    if (lop != gfc_oacc_routine_lop (n_p->clauses))\n+\t    bool nohost_p = n_p->clauses ? n_p->clauses->nohost : false;\n+\t    if (lop != gfc_oacc_routine_lop (n_p->clauses)\n+\t\t|| nohost != nohost_p)\n \t      {\n \t\tgfc_error (\"!$ACC ROUTINE already applied at %C\");\n \t\tgoto cleanup;\n@@ -3047,6 +3067,7 @@ gfc_match_oacc_routine (void)\n       if (add)\n \t{\n \t  sym->attr.oacc_routine_lop = lop;\n+\t  sym->attr.oacc_routine_nohost = nohost;\n \n \t  n = gfc_get_oacc_routine_name ();\n \t  n->sym = sym;\n@@ -3061,8 +3082,10 @@ gfc_match_oacc_routine (void)\n       /* For a repeated OpenACC 'routine' directive, diagnose if it doesn't\n \t match the first one.  */\n       oacc_routine_lop lop_p = gfc_current_ns->proc_name->attr.oacc_routine_lop;\n+      bool nohost_p = gfc_current_ns->proc_name->attr.oacc_routine_nohost;\n       if (lop_p != OACC_ROUTINE_LOP_NONE\n-\t  && lop != lop_p)\n+\t  && (lop != lop_p\n+\t      || nohost != nohost_p))\n \t{\n \t  gfc_error (\"!$ACC ROUTINE already applied at %C\");\n \t  goto cleanup;\n@@ -3073,6 +3096,7 @@ gfc_match_oacc_routine (void)\n \t\t\t\t       &old_loc))\n \tgoto cleanup;\n       gfc_current_ns->proc_name->attr.oacc_routine_lop = lop;\n+      gfc_current_ns->proc_name->attr.oacc_routine_nohost = nohost;\n     }\n   else\n     /* Something has gone wrong, possibly a syntax error.  */"}, {"sha": "bf8783a35f80edeee418936127fb28e355259ba9", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -1473,6 +1473,14 @@ add_attributes_to_decl (symbol_attribute sym_attr, tree list)\n       tree dims = oacc_build_routine_dims (clauses);\n       list = oacc_replace_fn_attrib_attr (list, dims);\n     }\n+\n+  if (sym_attr.oacc_routine_nohost)\n+    {\n+      tree c = build_omp_clause (UNKNOWN_LOCATION, OMP_CLAUSE_NOHOST);\n+      OMP_CLAUSE_CHAIN (c) = clauses;\n+      clauses = c;\n+    }\n+\n   if (sym_attr.omp_device_type != OMP_DEVICE_TYPE_UNSET)\n     {\n       tree c = build_omp_clause (UNKNOWN_LOCATION, OMP_CLAUSE_DEVICE_TYPE);"}, {"sha": "ac3f5f35bc115ec8bccbe439021b8b07ee4da8ae", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -4297,6 +4297,8 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t  gcc_unreachable ();\n \t}\n     }\n+  /* OpenACC 'nohost' clauses cannot appear here.  */\n+  gcc_checking_assert (!clauses->nohost);\n \n   return nreverse (omp_clauses);\n }"}, {"sha": "21ff32ee4aa3f8297348147ceae215aecf25c396", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -10310,6 +10310,7 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t  }\n \t  break;\n \n+\tcase OMP_CLAUSE_NOHOST:\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n@@ -11247,6 +11248,7 @@ gimplify_adjust_omp_clauses (gimple_seq *pre_p, gimple_seq body, tree *list_p,\n \tcase OMP_CLAUSE_EXCLUSIVE:\n \t  break;\n \n+\tcase OMP_CLAUSE_NOHOST:\n \tdefault:\n \t  gcc_unreachable ();\n \t}"}, {"sha": "b46a537e281e2f0ed9d5125ecb8b9dffb19c1175", "filename": "gcc/omp-general.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Fomp-general.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Fomp-general.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-general.c?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -2576,6 +2576,7 @@ oacc_verify_routine_clauses (tree fndecl, tree *clauses, location_t loc,\n \t\t\t     const char *routine_str)\n {\n   tree c_level = NULL_TREE;\n+  tree c_nohost = NULL_TREE;\n   tree c_p = NULL_TREE;\n   for (tree c = *clauses; c; c_p = c, c = OMP_CLAUSE_CHAIN (c))\n     switch (OMP_CLAUSE_CODE (c))\n@@ -2608,6 +2609,10 @@ oacc_verify_routine_clauses (tree fndecl, tree *clauses, location_t loc,\n \t    c = c_p;\n \t  }\n \tbreak;\n+      case OMP_CLAUSE_NOHOST:\n+\t/* Don't worry about duplicate clauses here.  */\n+\tc_nohost = c;\n+\tbreak;\n       default:\n \tgcc_unreachable ();\n       }\n@@ -2642,6 +2647,7 @@ oacc_verify_routine_clauses (tree fndecl, tree *clauses, location_t loc,\n \t this one for compatibility.  */\n       /* Collect previous directive's clauses.  */\n       tree c_level_p = NULL_TREE;\n+      tree c_nohost_p = NULL_TREE;\n       for (tree c = TREE_VALUE (attr); c; c = OMP_CLAUSE_CHAIN (c))\n \tswitch (OMP_CLAUSE_CODE (c))\n \t  {\n@@ -2652,6 +2658,10 @@ oacc_verify_routine_clauses (tree fndecl, tree *clauses, location_t loc,\n \t    gcc_checking_assert (c_level_p == NULL_TREE);\n \t    c_level_p = c;\n \t    break;\n+\t  case OMP_CLAUSE_NOHOST:\n+\t    gcc_checking_assert (c_nohost_p == NULL_TREE);\n+\t    c_nohost_p = c;\n+\t    break;\n \t  default:\n \t    gcc_unreachable ();\n \t  }\n@@ -2667,6 +2677,13 @@ oacc_verify_routine_clauses (tree fndecl, tree *clauses, location_t loc,\n \t  c_diag_p = c_level_p;\n \t  goto incompatible;\n \t}\n+      /* Matching 'nohost' clauses?  */\n+      if ((c_nohost == NULL_TREE) != (c_nohost_p == NULL_TREE))\n+\t{\n+\t  c_diag = c_nohost;\n+\t  c_diag_p = c_nohost_p;\n+\t  goto incompatible;\n+\t}\n       /* Compatible.  */\n       return 1;\n "}, {"sha": "2f735bcde9cb76ed26f6d5e50dbdf559f5f0fe90", "filename": "gcc/omp-low.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -1683,6 +1683,7 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \t  break;\n \n \tcase OMP_CLAUSE__CACHE_:\n+\tcase OMP_CLAUSE_NOHOST:\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n@@ -1869,6 +1870,7 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \t  break;\n \n \tcase OMP_CLAUSE__CACHE_:\n+\tcase OMP_CLAUSE_NOHOST:\n \tdefault:\n \t  gcc_unreachable ();\n \t}"}, {"sha": "bfbb0112e24529852e402c318977163ffb6ec06f", "filename": "gcc/omp-offload.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Fomp-offload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Fomp-offload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-offload.c?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -1981,6 +1981,42 @@ execute_oacc_device_lower ()\n \tgcc_unreachable ();\n     }\n \n+  if (is_oacc_routine)\n+    {\n+      tree attr = lookup_attribute (\"omp declare target\",\n+\t\t\t\t    DECL_ATTRIBUTES (current_function_decl));\n+      gcc_checking_assert (attr);\n+      tree clauses = TREE_VALUE (attr);\n+      gcc_checking_assert (clauses);\n+\n+      /* Should this OpenACC routine be discarded?  */\n+      bool discard = false;\n+\n+      tree clause_nohost = omp_find_clause (clauses, OMP_CLAUSE_NOHOST);\n+      if (dump_file)\n+\tfprintf (dump_file,\n+\t\t \"OpenACC routine '%s' %s '%s' clause.\\n\",\n+\t\t lang_hooks.decl_printable_name (current_function_decl, 2),\n+\t\t clause_nohost ? \"has\" : \"doesn't have\",\n+\t\t omp_clause_code_name[OMP_CLAUSE_NOHOST]);\n+      /* Host compiler, 'nohost' clause?  */\n+#ifndef ACCEL_COMPILER\n+      if (clause_nohost)\n+\tdiscard = true;\n+#endif\n+\n+      if (dump_file)\n+\tfprintf (dump_file,\n+\t\t \"OpenACC routine '%s' %sdiscarded.\\n\",\n+\t\t lang_hooks.decl_printable_name (current_function_decl, 2),\n+\t\t discard ? \"\" : \"not \");\n+      if (discard)\n+\t{\n+\t  TREE_ASM_WRITTEN (current_function_decl) = 1;\n+\t  return TODO_discard_function;\n+\t}\n+    }\n+\n   /* Unparallelized OpenACC kernels constructs must get launched as 1 x 1 x 1\n      kernels, so remove the parallelism dimensions function attributes\n      potentially set earlier on.  */"}, {"sha": "a58482f7f92c4249d69bc50cb7a66accf56b23f3", "filename": "gcc/testsuite/c-c++-common/goacc/classify-routine-nohost.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-routine-nohost.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-routine-nohost.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-routine-nohost.c?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -0,0 +1,41 @@\n+/* Check offloaded function's attributes and classification for OpenACC\n+   routine with 'nohost' clause.  */\n+\n+/* { dg-additional-options \"-O2\" }\n+   { dg-additional-options \"-fopt-info-optimized-omp\" }\n+   { dg-additional-options \"-fdump-tree-ompexp\" }\n+   { dg-additional-options \"-fdump-tree-oaccdevlow\" } */\n+\n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n+\n+#define N 1024\n+\n+extern unsigned int *__restrict a;\n+extern unsigned int *__restrict b;\n+extern unsigned int *__restrict c;\n+#pragma acc declare copyin (a, b) create (c)\n+\n+#pragma acc routine nohost worker\n+void ROUTINE ()\n+{\n+#pragma acc loop /* { dg-bogus \"assigned OpenACC .* loop parallelism\" } */\n+  for (unsigned int i = 0; i < N; i++)\n+    c[i] = a[i] + b[i];\n+}\n+\n+/* Check the offloaded function's attributes.\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(omp declare target \\\\(nohost worker\\\\), oacc function \\\\(0 1, 1 0, 1 0\\\\)\\\\)\\\\)\" 1 \"ompexp\" } } */\n+\n+/* Check the offloaded function's classification.\n+   { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC routine level 1\" 1 \"oaccdevlow\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'ROUTINE' has 'nohost' clause\" 1 \"oaccdevlow\" { target c } } }\n+   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'void ROUTINE\\\\(\\\\)' has 'nohost' clause\" 1 \"oaccdevlow\" { target { c++ && { ! offloading_enabled } } } } }\n+   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'ROUTINE\\\\(\\\\)' has 'nohost' clause\" 1 \"oaccdevlow\" { target { c++ && offloading_enabled } } } }\n+   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'ROUTINE' discarded\" 1 \"oaccdevlow\" { target c } } }\n+   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'void ROUTINE\\\\(\\\\)' discarded\" 1 \"oaccdevlow\" { target { c++ && { ! offloading_enabled } } } } }\n+   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'ROUTINE\\\\(\\\\)' discarded\" 1 \"oaccdevlow\" { target { c++ && offloading_enabled } } } }\n+   TODO See PR101551 for 'offloading_enabled' differences.\n+   { dg-final { scan-tree-dump-not \"(?n)Compute dimensions\" \"oaccdevlow\" } }\n+   { dg-final { scan-tree-dump-not \"(?n)__attribute__\\\\(.*omp declare target \\\\(nohost\" \"oaccdevlow\" } }\n+   { dg-final { scan-tree-dump-not \"(?n)void ROUTINE \\\\(\\\\)\" \"oaccdevlow\" } } */"}, {"sha": "cc0ba2b9a7dd47f06bd31910715b8e9855b33cda", "filename": "gcc/testsuite/c-c++-common/goacc/classify-routine.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-routine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-routine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-routine.c?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -30,5 +30,13 @@ void ROUTINE ()\n /* Check the offloaded function's classification and compute dimensions (will\n    always be 1 x 1 x 1 for non-offloading compilation).\n    { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC routine level 1\" 1 \"oaccdevlow\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'ROUTINE' doesn't have 'nohost' clause\" 1 \"oaccdevlow\" { target c } } }\n+   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'void ROUTINE\\\\(\\\\)' doesn't have 'nohost' clause\" 1 \"oaccdevlow\" { target { c++ && { ! offloading_enabled } } } } }\n+   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'ROUTINE\\\\(\\\\)' doesn't have 'nohost' clause\" 1 \"oaccdevlow\" { target { c++ && offloading_enabled } } } }\n+   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'ROUTINE' not discarded\" 1 \"oaccdevlow\" { target c } } }\n+   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'void ROUTINE\\\\(\\\\)' not discarded\" 1 \"oaccdevlow\" { target { c++ && { ! offloading_enabled } } } } }\n+   { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'ROUTINE\\\\(\\\\)' not discarded\" 1 \"oaccdevlow\" { target { c++ && offloading_enabled } } } }\n+   TODO See PR101551 for 'offloading_enabled' differences.\n    { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n-   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(0 1, 1 1, 1 1\\\\), omp declare target \\\\(worker\\\\), oacc function \\\\(0 1, 1 0, 1 0\\\\)\\\\)\\\\)\" 1 \"oaccdevlow\" } } */\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(0 1, 1 1, 1 1\\\\), omp declare target \\\\(worker\\\\), oacc function \\\\(0 1, 1 0, 1 0\\\\)\\\\)\\\\)\" 1 \"oaccdevlow\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)void ROUTINE \\\\(\\\\)\" 1 \"oaccdevlow\" } } */"}, {"sha": "3bf33e83d561a5f83bae11af16702be64509b3f8", "filename": "gcc/testsuite/c-c++-common/goacc/routine-2.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-2.c?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -1,3 +1,7 @@\n /* Test invalid use of the OpenACC 'routine' directive.  */\n \n #pragma acc routine (nothing) gang /* { dg-error \"not been declared\" } */\n+\n+\n+#pragma acc routine nohost nohost /* { dg-error \"too many 'nohost' clauses\" } */\n+extern void nohost (void);"}, {"sha": "c8927416efa76e362c7a1594bfb5cb10258d94c8", "filename": "gcc/testsuite/c-c++-common/goacc/routine-nohost-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-nohost-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-nohost-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-nohost-1.c?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -0,0 +1,50 @@\n+/* Test OpenACC 'routine' with 'nohost' clause, valid use.  */\n+\n+/* { dg-additional-options \"-fdump-tree-oaccdevlow\" } */\n+\n+#pragma acc routine nohost\n+int THREE(void)\n+{\n+  return 3;\n+}\n+\n+#pragma acc routine (THREE) nohost\n+\n+#pragma acc routine nohost\n+extern int THREE(void);\n+\n+/* { dg-final { scan-tree-dump-times {(?n)^OpenACC routine '[^']*THREE[^']*' has 'nohost' clause\\.$} 1 oaccdevlow } } */\n+\n+\n+#pragma acc routine nohost\n+extern void NOTHING(void);\n+\n+#pragma acc routine (NOTHING) nohost\n+\n+void NOTHING(void)\n+{\n+}\n+\n+#pragma acc routine nohost\n+extern void NOTHING(void);\n+\n+#pragma acc routine (NOTHING) nohost\n+\n+/* { dg-final { scan-tree-dump-times {(?n)^OpenACC routine '[^']*NOTHING[^']*' has 'nohost' clause\\.$} 1 oaccdevlow } } */\n+\n+\n+extern float ADD(float, float);\n+\n+#pragma acc routine (ADD) nohost\n+\n+float ADD(float x, float y)\n+{\n+  return x + y;\n+}\n+\n+#pragma acc routine nohost\n+extern float ADD(float, float);\n+\n+#pragma acc routine (ADD) nohost\n+\n+/* { dg-final { scan-tree-dump-times {(?n)^OpenACC routine '[^']*ADD[^']*' has 'nohost' clause\\.$} 1 oaccdevlow } } */"}, {"sha": "d9acb805d2da716015096a8d0d0fc0a34e17ca11", "filename": "gcc/testsuite/c-c++-common/goacc/routine-nohost-2.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-nohost-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-nohost-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-nohost-2.c?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -0,0 +1,96 @@\n+/* Test OpenACC 'routine' with 'nohost' clause, invalid use.  */\n+\n+#pragma acc routine /* { dg-note {\\.\\.\\. without 'nohost' clause near to here} } */\n+int THREE_1(void)\n+{\n+  return 3;\n+}\n+\n+#pragma acc routine (THREE_1) \\\n+  nohost /* { dg-error {incompatible 'nohost' clause when applying '#pragma acc routine' to '[^']*THREE_1[^']*', which has already been marked with an OpenACC 'routine' directive} } */\n+\n+#pragma acc routine \\\n+  nohost /* { dg-error {incompatible 'nohost' clause when applying '#pragma acc routine' to '[^']*THREE_1[^']*', which has already been marked with an OpenACC 'routine' directive} } */\n+extern int THREE_1(void);\n+\n+\n+#pragma acc routine /* { dg-note {\\.\\.\\. without 'nohost' clause near to here} } */\n+extern void NOTHING_1(void);\n+\n+#pragma acc routine (NOTHING_1) \\\n+  nohost /* { dg-error {incompatible 'nohost' clause when applying '#pragma acc routine' to '[^']*NOTHING_1[^']*', which has already been marked with an OpenACC 'routine' directive} } */\n+\n+void NOTHING_1(void)\n+{\n+}\n+\n+#pragma acc routine \\\n+  nohost /* { dg-error {incompatible 'nohost' clause when applying '#pragma acc routine' to '[^']*NOTHING_1[^']*', which has already been marked with an OpenACC 'routine' directive} } */\n+extern void NOTHING_1(void);\n+\n+#pragma acc routine (NOTHING_1) \\\n+  nohost /* { dg-error {incompatible 'nohost' clause when applying '#pragma acc routine' to '[^']*NOTHING_1[^']*', which has already been marked with an OpenACC 'routine' directive} } */\n+\n+\n+extern float ADD_1(float, float);\n+\n+#pragma acc routine (ADD_1) /* { dg-note {\\.\\.\\. without 'nohost' clause near to here} } */\n+\n+float ADD_1(float x, float y)\n+{\n+  return x + y;\n+}\n+\n+#pragma acc routine \\\n+  nohost /* { dg-error {incompatible 'nohost' clause when applying '#pragma acc routine' to '[^']*ADD_1[^']*', which has already been marked with an OpenACC 'routine' directive} } */\n+extern float ADD_1(float, float);\n+\n+#pragma acc routine (ADD_1) \\\n+  nohost /* { dg-error {incompatible 'nohost' clause when applying '#pragma acc routine' to '[^']*ADD_1[^']*', which has already been marked with an OpenACC 'routine' directive} } */\n+\n+\n+/* The same again, but with/without nohost reversed.  */\n+\n+#pragma acc routine \\\n+  nohost /* { dg-note {\\.\\.\\. with 'nohost' clause here} } */\n+int THREE_2(void)\n+{\n+  return 3;\n+}\n+\n+#pragma acc routine (THREE_2) /* { dg-error {missing 'nohost' clause when applying '#pragma acc routine' to '[^']*THREE_2[^']*', which has already been marked with an OpenACC 'routine' directive} } */\n+\n+#pragma acc routine /* { dg-error {missing 'nohost' clause when applying '#pragma acc routine' to '[^']*THREE_2[^']*', which has already been marked with an OpenACC 'routine' directive} } */\n+extern int THREE_2(void);\n+\n+\n+#pragma acc routine \\\n+  nohost /* { dg-note {\\.\\.\\. with 'nohost' clause here} } */\n+extern void NOTHING_2(void);\n+\n+#pragma acc routine (NOTHING_2) /* { dg-error {missing 'nohost' clause when applying '#pragma acc routine' to '[^']*NOTHING_2[^']*', which has already been marked with an OpenACC 'routine' directive} } */\n+\n+void NOTHING_2(void)\n+{\n+}\n+\n+#pragma acc routine /* { dg-error {missing 'nohost' clause when applying '#pragma acc routine' to '[^']*NOTHING_2[^']*', which has already been marked with an OpenACC 'routine' directive} } */\n+extern void NOTHING_2(void);\n+\n+#pragma acc routine (NOTHING_2) /* { dg-error {missing 'nohost' clause when applying '#pragma acc routine' to '[^']*NOTHING_2[^']*', which has already been marked with an OpenACC 'routine' directive} } */\n+\n+\n+extern float ADD_2(float, float);\n+\n+#pragma acc routine (ADD_2) \\\n+  nohost /* { dg-note {\\.\\.\\. with 'nohost' clause here} } */\n+\n+float ADD_2(float x, float y)\n+{\n+  return x + y;\n+}\n+\n+#pragma acc routine /* { dg-error {missing 'nohost' clause when applying '#pragma acc routine' to '[^']*ADD_2[^']*', which has already been marked with an OpenACC 'routine' directive} } */\n+extern float ADD_2(float, float);\n+\n+#pragma acc routine (ADD_2) /* { dg-error {missing 'nohost' clause when applying '#pragma acc routine' to '[^']*ADD_2[^']*', which has already been marked with an OpenACC 'routine' directive} } */"}, {"sha": "f34fcfea52df1fbcfa879c4ebd2c6e760ec78b83", "filename": "gcc/testsuite/g++.dg/goacc/template.C", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Ftemplate.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Ftemplate.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Ftemplate.C?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -1,4 +1,6 @@\n-#pragma acc routine\n+/* { dg-additional-options \"-fdump-tree-oaccdevlow\" } */\n+\n+#pragma acc routine nohost\n template <typename T> T\n accDouble(int val)\n {\n@@ -153,3 +155,14 @@ main ()\n \n   return b + c;\n }\n+\n+/* { dg-final { scan-tree-dump-times {(?n)^OpenACC routine '[^']+' has 'nohost' clause\\.$} 4 oaccdevlow } }\n+   { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'T accDouble\\(int\\) \\[with T = char\\]' has 'nohost' clause\\.$} 1 oaccdevlow { target { ! offloading_enabled } } } }\n+   { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'accDouble<char>\\(int\\)char' has 'nohost' clause\\.$} 1 oaccdevlow { target offloading_enabled } } }\n+   { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'T accDouble\\(int\\) \\[with T = int\\]' has 'nohost' clause\\.$} 1 oaccdevlow { target { ! offloading_enabled } } } }\n+   { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'accDouble<int>\\(int\\)int' has 'nohost' clause\\.$} 1 oaccdevlow { target offloading_enabled } } }\n+   { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'T accDouble\\(int\\) \\[with T = float\\]' has 'nohost' clause\\.$} 1 oaccdevlow { target { ! offloading_enabled } } } }\n+   { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'accDouble<float>\\(int\\)float' has 'nohost' clause\\.$} 1 oaccdevlow { target offloading_enabled } } }\n+   { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'T accDouble\\(int\\) \\[with T = double\\]' has 'nohost' clause\\.$} 1 oaccdevlow { target { ! offloading_enabled } } } }\n+   { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'accDouble<double>\\(int\\)double' has 'nohost' clause\\.$} 1 oaccdevlow { target offloading_enabled } } }\n+   TODO See PR101551 for 'offloading_enabled' differences.  */"}, {"sha": "0e06fb9f0baa9b8970b0486a97a460a59bfdbc77", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-routine-nohost.f95", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine-nohost.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine-nohost.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine-nohost.f95?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -0,0 +1,39 @@\n+! Check offloaded function's attributes and classification for OpenACC\n+! routine with 'nohost' clause.\n+\n+! { dg-additional-options \"-O2\" }\n+! { dg-additional-options \"-fopt-info-optimized-omp\" }\n+! { dg-additional-options \"-fdump-tree-ompexp\" }\n+! { dg-additional-options \"-fdump-tree-oaccdevlow\" }\n+\n+! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+! aspects of that functionality.\n+\n+subroutine ROUTINE\n+  !$acc routine nohost worker\n+  integer, parameter :: n = 1024\n+  integer, dimension (0:n-1) :: a, b, c\n+  integer :: i\n+\n+  call setup(a, b)\n+\n+  !$acc loop ! { dg-bogus \"assigned OpenACC .* loop parallelism\" }\n+  do i = 0, n - 1\n+     c(i) = a(i) + b(i)\n+  end do\n+end subroutine ROUTINE\n+\n+! Check the offloaded function's attributes.\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(0 1, 1 0, 1 0\\\\), omp declare target \\\\(nohost worker\\\\)\\\\)\\\\)\" 1 \"ompexp\" } }\n+\n+! Check the offloaded function's classification.\n+! { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC routine level 1\" 1 \"oaccdevlow\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'routine' has 'nohost' clause\" 1 \"oaccdevlow\" { target { ! offloading_enabled } } } }\n+! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'routine_' has 'nohost' clause\" 1 \"oaccdevlow\" { target offloading_enabled } } }\n+! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'routine' discarded\" 1 \"oaccdevlow\" { target { ! offloading_enabled } } } }\n+! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'routine_' discarded\" 1 \"oaccdevlow\" { target offloading_enabled } } }\n+! { dg-final { scan-tree-dump-not \"(?n)Compute dimensions\" \"oaccdevlow\" } }\n+! { dg-final { scan-tree-dump-not \"(?n)__attribute__\\\\(.*omp declare target \\\\(nohost\" \"oaccdevlow\" } }\n+! { dg-final { scan-tree-dump-not \"(?n)void routine \\\\(\\\\)\" \"oaccdevlow\" { target { ! offloading_enabled } } } }\n+! { dg-final { scan-tree-dump-not \"(?n)void routine_ \\\\(\\\\)\" \"oaccdevlow\" { target offloading_enabled } } }\n+!TODO See PR101551 for 'offloading_enabled' differences."}, {"sha": "92d3243cdcf54066cc1f694caa9605813877dde2", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-routine.f95", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine.f95?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -29,5 +29,12 @@ end subroutine ROUTINE\n ! Check the offloaded function's classification and compute dimensions (will\n ! always be 1 x 1 x 1 for non-offloading compilation).\n ! { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC routine level 1\" 1 \"oaccdevlow\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'routine' doesn't have 'nohost' clause\" 1 \"oaccdevlow\" { target { ! offloading_enabled } } } }\n+! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'routine_' doesn't have 'nohost' clause\" 1 \"oaccdevlow\" { target offloading_enabled } } }\n+! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'routine' not discarded\" 1 \"oaccdevlow\" { target { ! offloading_enabled } } } }\n+! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'routine_' not discarded\" 1 \"oaccdevlow\" { target offloading_enabled } } }\n ! { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n ! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(0 1, 1 1, 1 1\\\\), omp declare target \\\\(worker\\\\)\\\\)\\\\)\" 1 \"oaccdevlow\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)void routine \\\\(\\\\)\" 1 \"oaccdevlow\" { target { ! offloading_enabled } } } }\n+! { dg-final { scan-tree-dump-times \"(?n)void routine_ \\\\(\\\\)\" 1 \"oaccdevlow\" { target offloading_enabled } } }\n+!TODO See PR101551 for 'offloading_enabled' differences."}, {"sha": "31233b35fa70f9f2b258b67db46fa01a918c2ed1", "filename": "gcc/testsuite/gfortran.dg/goacc/pure-elemental-procedures-2.f90", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fpure-elemental-procedures-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fpure-elemental-procedures-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fpure-elemental-procedures-2.f90?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -2,6 +2,10 @@ pure elemental subroutine foo()\n !$acc routine vector  ! { dg-error \"ROUTINE with GANG, WORKER, or VECTOR clause is not permitted in PURE procedure\" }\n end\n \n+pure elemental subroutine foo_nh()\n+!$acc routine nohost vector  ! { dg-error \"ROUTINE with GANG, WORKER, or VECTOR clause is not permitted in PURE procedure\" }\n+end\n+\n elemental subroutine foo2()\n !$acc routine (myfoo2) gang  ! { dg-error \"Invalid NAME 'myfoo2' in\" }\n end\n@@ -10,18 +14,38 @@ elemental subroutine foo2a()\n !$acc routine gang  ! { dg-error \"ROUTINE with GANG, WORKER, or VECTOR clause is not permitted in PURE procedure\" }\n end\n \n+elemental subroutine foo2a_nh()\n+!$acc routine nohost gang  ! { dg-error \"ROUTINE with GANG, WORKER, or VECTOR clause is not permitted in PURE procedure\" }\n+end\n+\n pure subroutine foo3()\n !$acc routine vector ! { dg-error \"ROUTINE with GANG, WORKER, or VECTOR clause is not permitted in PURE procedure\" }\n end\n \n+pure subroutine foo3_nh()\n+!$acc routine nohost vector ! { dg-error \"ROUTINE with GANG, WORKER, or VECTOR clause is not permitted in PURE procedure\" }\n+end\n+\n elemental impure subroutine foo4()\n !$acc routine vector ! OK: impure\n end\n \n+elemental impure subroutine foo4_nh()\n+!$acc routine nohost vector ! OK: impure\n+end\n+\n pure subroutine foo5()\n !$acc routine seq ! OK: seq\n end\n \n+pure subroutine foo5_nh()\n+!$acc routine nohost seq ! OK: seq\n+end\n+\n pure subroutine foo6()\n !$acc routine ! OK (implied 'seq')\n end\n+\n+pure subroutine foo6_nh()\n+!$acc routine nohost ! OK (implied 'seq')\n+end"}, {"sha": "3cd543e5aada16cab648335be48e7004023ec829", "filename": "gcc/testsuite/gfortran.dg/goacc/routine-6.f90", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-6.f90?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -116,3 +116,13 @@ subroutine subr10 (x)\n      x = x * x - 1\n   end if\n end subroutine subr10\n+\n+subroutine subr20 (x)\n+  !$acc routine (subr20) nohost nohost ! { dg-error \"Failed to match clause\" }\n+  integer, intent(inout) :: x\n+  if (x < 1) then\n+     x = 1\n+  else\n+     x = x * x - 1\n+  end if\n+end subroutine subr20"}, {"sha": "0372e7839e6e8d11db45f0924dcc48eb4f3c0b91", "filename": "gcc/testsuite/gfortran.dg/goacc/routine-intrinsic-2.f", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-intrinsic-2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-intrinsic-2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-intrinsic-2.f?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -7,6 +7,11 @@ SUBROUTINE sub_1\n !$ACC ROUTINE (ABORT) GANG ! { dg-error \"Intrinsic symbol specified in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\) at \\\\(1\\\\) marked with incompatible GANG, WORKER, or VECTOR clause\" }\n !$ACC ROUTINE (ABORT) VECTOR ! { dg-error \"Intrinsic symbol specified in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\) at \\\\(1\\\\) marked with incompatible GANG, WORKER, or VECTOR clause\" }\n \n+!$ACC ROUTINE (ABORT) NOHOST ! { dg-error \"Intrinsic symbol specified in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\) at \\\\(1\\\\) marked with incompatible NOHOST clause\" }\n+\n+!$ACC ROUTINE (ABORT) WORKER NOHOST ! { dg-error \"Intrinsic symbol specified in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\) at \\\\(1\\\\) marked with incompatible GANG, WORKER, or VECTOR clause\" }\n+!$ACC ROUTINE (ABORT) NOHOST GANG ! { dg-error \"Intrinsic symbol specified in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\) at \\\\(1\\\\) marked with incompatible GANG, WORKER, or VECTOR clause\" }\n+\n       CALL ABORT\n       END SUBROUTINE sub_1\n \n@@ -16,6 +21,11 @@ MODULE m_w_1\n !$ACC ROUTINE (ABORT) WORKER ! { dg-error \"Intrinsic symbol specified in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\) at \\\\(1\\\\) marked with incompatible GANG, WORKER, or VECTOR clause\" }\n !$ACC ROUTINE (ABORT) GANG ! { dg-error \"Intrinsic symbol specified in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\) at \\\\(1\\\\) marked with incompatible GANG, WORKER, or VECTOR clause\" }\n \n+!$ACC ROUTINE (ABORT) NOHOST ! { dg-error \"Intrinsic symbol specified in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\) at \\\\(1\\\\) marked with incompatible NOHOST clause\" }\n+\n+!$ACC ROUTINE (ABORT) VECTOR NOHOST ! { dg-error \"Intrinsic symbol specified in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\) at \\\\(1\\\\) marked with incompatible GANG, WORKER, or VECTOR clause\" }\n+!$ACC ROUTINE (ABORT) NOHOST WORKER ! { dg-error \"Intrinsic symbol specified in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\) at \\\\(1\\\\) marked with incompatible GANG, WORKER, or VECTOR clause\" }\n+\n       CONTAINS\n       SUBROUTINE sub_2\n       CALL ABORT"}, {"sha": "46eec3d748864b42f16ea9ea22c5ab7625f7fba4", "filename": "gcc/testsuite/gfortran.dg/goacc/routine-module-1.f90", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-module-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-module-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-module-1.f90?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -14,34 +14,48 @@ program main\n   !$acc parallel loop seq ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n   do i = 1, 10\n      call s_1 ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+     call s_1_nh ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n      call s_2 ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+     call s_2_nh ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n      call g_1 ! { dg-message \"optimized: assigned OpenACC gang worker vector loop parallelism\" }\n+     call g_1_nh ! { dg-message \"optimized: assigned OpenACC gang worker vector loop parallelism\" }\n      call w_1 ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n+     call w_1_nh ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n      call v_1 ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+     call v_1_nh ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n   end do\n   !$acc end parallel loop\n \n   !$acc parallel loop gang ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n   do i = 1, 10\n      call s_1 ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+     call s_1_nh ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n      call s_2 ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+     call s_2_nh ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n      call w_1 ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n+     call w_1_nh ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n      call v_1 ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+     call v_1_nh ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n   end do\n   !$acc end parallel loop\n \n   !$acc parallel loop worker ! { dg-message \"optimized: assigned OpenACC worker loop parallelism\" }\n   do i = 1, 10\n      call s_1 ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+     call s_1_nh ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n      call s_2 ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+     call s_2_nh ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n      call v_1 ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+     call v_1_nh ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n   end do\n   !$acc end parallel loop\n \n   !$acc parallel loop vector ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n   do i = 1, 10\n      call s_1 ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+     call s_1_nh ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n      call s_2 ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+     call s_2_nh ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n   end do\n   !$acc end parallel loop\n end program main"}, {"sha": "e796c1da300499833f38c0bf9b2872d11eb5b921", "filename": "gcc/testsuite/gfortran.dg/goacc/routine-module-2.f90", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-module-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-module-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-module-2.f90?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -11,21 +11,27 @@ program main\n   !$acc parallel loop gang\n   do i = 1, 10\n      call g_1 ! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" }\n+     call g_1_nh ! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" }\n   end do\n   !$acc end parallel loop\n \n   !$acc parallel loop worker\n   do i = 1, 10\n      call g_1 ! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" }\n+     call g_1_nh ! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" }\n      call w_1 ! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" }\n+     call w_1_nh ! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" }\n   end do\n   !$acc end parallel loop\n \n   !$acc parallel loop vector\n   do i = 1, 10\n      call g_1 ! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" }\n+     call g_1_nh ! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" }\n      call w_1 ! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" }\n+     call w_1_nh ! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" }\n      call v_1 ! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" }\n+     call v_1_nh ! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" }\n   end do\n   !$acc end parallel loop\n end program main"}, {"sha": "80fe07a3a91f6caa4e1a0416f3a946aa0b258c6b", "filename": "gcc/testsuite/gfortran.dg/goacc/routine-module-3.f90", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-module-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-module-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-module-3.f90?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -2,15 +2,54 @@\n \n ! { dg-compile-aux-modules \"routine-module-mod-1.f90\" }\n \n-program main\n+subroutine sr_1\n   use routine_module_mod_1\n   implicit none\n+\n   !$acc routine (s_1) seq ! { dg-error \"Cannot change attributes of USE-associated symbol s_1\" }\n    ! { dg-error \"NAME 's_1' invalid in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\)\" \"\" { target *-*-* } .-1 }\n+  !$acc routine (s_1_nh) seq nohost ! { dg-error \"Cannot change attributes of USE-associated symbol s_1_nh\" }\n+   ! { dg-error \"NAME 's_1_nh' invalid in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\)\" \"\" { target *-*-* } .-1 }\n   !$acc routine (s_2) seq ! { dg-error \"Cannot change attributes of USE-associated symbol s_2\" }\n    ! { dg-error \"NAME 's_2' invalid in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\)\" \"\" { target *-*-* } .-1 }\n+  !$acc routine (s_2_nh) seq nohost ! { dg-error \"Cannot change attributes of USE-associated symbol s_2_nh\" }\n+   ! { dg-error \"NAME 's_2_nh' invalid in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\)\" \"\" { target *-*-* } .-1 }\n   !$acc routine (v_1) seq ! { dg-error \"Cannot change attributes of USE-associated symbol v_1\" }\n    ! { dg-error \"NAME 'v_1' invalid in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\)\" \"\" { target *-*-* } .-1 }\n+  !$acc routine (v_1_nh) seq nohost ! { dg-error \"Cannot change attributes of USE-associated symbol v_1_nh\" }\n+   ! { dg-error \"NAME 'v_1_nh' invalid in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\)\" \"\" { target *-*-* } .-1 }\n   !$acc routine (w_1) gang ! { dg-error \"Cannot change attributes of USE-associated symbol w_1\" }\n    ! { dg-error \"NAME 'w_1' invalid in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\)\" \"\" { target *-*-* } .-1 }\n-end program main\n+  !$acc routine (w_1_nh) gang nohost ! { dg-error \"Cannot change attributes of USE-associated symbol w_1_nh\" }\n+   ! { dg-error \"NAME 'w_1_nh' invalid in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\)\" \"\" { target *-*-* } .-1 }\n+  !$acc routine (g_1) gang ! { dg-error \"Cannot change attributes of USE-associated symbol g_1\" }\n+   ! { dg-error \"NAME 'g_1' invalid in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\)\" \"\" { target *-*-* } .-1 }\n+  !$acc routine (g_1_nh) gang nohost ! { dg-error \"Cannot change attributes of USE-associated symbol g_1_nh\" }\n+   ! { dg-error \"NAME 'g_1_nh' invalid in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\)\" \"\" { target *-*-* } .-1 }\n+end subroutine sr_1\n+\n+subroutine sr_2\n+  use routine_module_mod_1\n+  implicit none\n+\n+  !$acc routine (s_1) seq nohost ! { dg-error \"Cannot change attributes of USE-associated symbol s_1\" }\n+   ! { dg-error \"NAME 's_1' invalid in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\)\" \"\" { target *-*-* } .-1 }\n+  !$acc routine (s_1_nh) seq ! { dg-error \"Cannot change attributes of USE-associated symbol s_1_nh\" }\n+   ! { dg-error \"NAME 's_1_nh' invalid in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\)\" \"\" { target *-*-* } .-1 }\n+  !$acc routine (s_2) seq nohost ! { dg-error \"Cannot change attributes of USE-associated symbol s_2\" }\n+   ! { dg-error \"NAME 's_2' invalid in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\)\" \"\" { target *-*-* } .-1 }\n+  !$acc routine (s_2_nh) seq ! { dg-error \"Cannot change attributes of USE-associated symbol s_2_nh\" }\n+   ! { dg-error \"NAME 's_2_nh' invalid in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\)\" \"\" { target *-*-* } .-1 }\n+  !$acc routine (v_1) vector nohost ! { dg-error \"Cannot change attributes of USE-associated symbol v_1\" }\n+   ! { dg-error \"NAME 'v_1' invalid in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\)\" \"\" { target *-*-* } .-1 }\n+  !$acc routine (v_1_nh) vector ! { dg-error \"Cannot change attributes of USE-associated symbol v_1_nh\" }\n+   ! { dg-error \"NAME 'v_1_nh' invalid in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\)\" \"\" { target *-*-* } .-1 }\n+  !$acc routine (w_1) worker nohost ! { dg-error \"Cannot change attributes of USE-associated symbol w_1\" }\n+   ! { dg-error \"NAME 'w_1' invalid in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\)\" \"\" { target *-*-* } .-1 }\n+  !$acc routine (w_1_nh) worker ! { dg-error \"Cannot change attributes of USE-associated symbol w_1_nh\" }\n+   ! { dg-error \"NAME 'w_1_nh' invalid in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\)\" \"\" { target *-*-* } .-1 }\n+  !$acc routine (g_1) worker nohost ! { dg-error \"Cannot change attributes of USE-associated symbol g_1\" }\n+   ! { dg-error \"NAME 'g_1' invalid in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\)\" \"\" { target *-*-* } .-1 }\n+  !$acc routine (g_1_nh) worker ! { dg-error \"Cannot change attributes of USE-associated symbol g_1_nh\" }\n+   ! { dg-error \"NAME 'g_1_nh' invalid in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\)\" \"\" { target *-*-* } .-1 }\n+end subroutine sr_2"}, {"sha": "10e109675dcc399e86c3baa06c1c89722b8332d3", "filename": "gcc/testsuite/gfortran.dg/goacc/routine-module-mod-1.f90", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-module-mod-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-module-mod-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-module-mod-1.f90?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -19,6 +19,17 @@ subroutine s_1\n     end do\n   end subroutine s_1\n \n+  subroutine s_1_nh\n+    implicit none\n+    !$acc routine nohost\n+\n+    integer :: i\n+\n+    !$acc loop ! { dg-bogus \"assigned OpenACC .* loop parallelism\" }\n+    do i = 1, 3\n+    end do\n+  end subroutine s_1_nh\n+\n   subroutine s_2\n     implicit none\n     !$acc routine (s_2) seq\n@@ -31,6 +42,17 @@ subroutine s_2\n     end do\n   end subroutine s_2\n \n+  subroutine s_2_nh\n+    implicit none\n+    !$acc routine (s_2_nh) seq nohost\n+\n+    integer :: i\n+\n+    !$acc loop ! { dg-bogus \"assigned OpenACC .* loop parallelism\" }\n+    do i = 1, 3\n+    end do\n+  end subroutine s_2_nh\n+\n   subroutine v_1\n     implicit none\n     !$acc routine vector\n@@ -42,6 +64,17 @@ subroutine v_1\n     end do\n   end subroutine v_1\n \n+  subroutine v_1_nh\n+    implicit none\n+    !$acc routine vector nohost\n+\n+    integer :: i\n+\n+    !$acc loop ! { dg-bogus \"assigned OpenACC .* loop parallelism\" }\n+    do i = 1, 3\n+    end do\n+  end subroutine v_1_nh\n+\n   subroutine w_1\n     implicit none\n     !$acc routine (w_1) worker\n@@ -53,6 +86,17 @@ subroutine w_1\n     end do\n   end subroutine w_1\n \n+  subroutine w_1_nh\n+    implicit none\n+    !$acc routine (w_1_nh) worker nohost\n+\n+    integer :: i\n+\n+    !$acc loop ! { dg-bogus \"assigned OpenACC .* loop parallelism\" }\n+    do i = 1, 3\n+    end do\n+  end subroutine w_1_nh\n+\n   subroutine g_1\n     implicit none\n     !$acc routine gang\n@@ -65,6 +109,17 @@ subroutine g_1\n     end do\n   end subroutine g_1\n \n+  subroutine g_1_nh\n+    implicit none\n+    !$acc routine gang nohost\n+\n+    integer :: i\n+\n+    !$acc loop ! { dg-bogus \"assigned OpenACC .* loop parallelism\" }\n+    do i = 1, 3\n+    end do\n+  end subroutine g_1_nh\n+\n   subroutine pl_1\n     implicit none\n \n@@ -74,10 +129,15 @@ subroutine pl_1\n     ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n     do i = 1, 3\n        call s_1 ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+       call s_1_nh ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n        call s_2 ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+       call s_2_nh ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n        call v_1 ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+       call v_1_nh ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n        call w_1 ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n+       call w_1_nh ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n        call g_1 ! { dg-message \"optimized: assigned OpenACC gang worker vector loop parallelism\" }\n+       call g_1_nh ! { dg-message \"optimized: assigned OpenACC gang worker vector loop parallelism\" }\n     end do\n   end subroutine pl_1\n end module routine_module_mod_1"}, {"sha": "44ef4533f04e7caa22b533acb3f62437b2bd6cb0", "filename": "gcc/testsuite/gfortran.dg/goacc/routine-multiple-directives-1.f90", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-multiple-directives-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-multiple-directives-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-multiple-directives-1.f90?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -1,5 +1,8 @@\n ! Check for valid cases of multiple OpenACC 'routine' directives.\n \n+! { dg-additional-options \"-fdump-tree-oaccdevlow\" }\n+!TODO See PR101551 for 'offloading_enabled' differences.\n+\n ! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n ! aspects of that functionality.\n \n@@ -8,12 +11,32 @@ SUBROUTINE s_1\n !$ACC ROUTINE(s_1) SEQ\n !$ACC ROUTINE SEQ\n       END SUBROUTINE s_1\n+      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 's_1' doesn't have 'nohost' clause\" 1 \"oaccdevlow\" { target { ! offloading_enabled } } } }\n+      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 's_1_' doesn't have 'nohost' clause\" 1 \"oaccdevlow\" { target offloading_enabled } } }\n+\n+      SUBROUTINE s_1_nh\n+!$ACC ROUTINE(s_1_nh) NOHOST\n+!$ACC ROUTINE(s_1_nh) SEQ NOHOST\n+!$ACC ROUTINE NOHOST SEQ\n+      END SUBROUTINE s_1_nh\n+      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 's_1_nh' has 'nohost' clause\" 1 \"oaccdevlow\" { target { ! offloading_enabled } } } }\n+      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 's_1_nh_' has 'nohost' clause\" 1 \"oaccdevlow\" { target offloading_enabled } } }\n \n       SUBROUTINE s_2\n !$ACC ROUTINE\n !$ACC ROUTINE SEQ\n !$ACC ROUTINE(s_2)\n       END SUBROUTINE s_2\n+      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 's_2' doesn't have 'nohost' clause\" 1 \"oaccdevlow\" { target { ! offloading_enabled } } } }\n+      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 's_2_' doesn't have 'nohost' clause\" 1 \"oaccdevlow\" { target offloading_enabled } } }\n+\n+      SUBROUTINE s_2_nh\n+!$ACC ROUTINE NOHOST\n+!$ACC ROUTINE NOHOST SEQ\n+!$ACC ROUTINE(s_2_nh) NOHOST\n+      END SUBROUTINE s_2_nh\n+      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 's_2_nh' has 'nohost' clause\" 1 \"oaccdevlow\" { target { ! offloading_enabled } } } }\n+      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 's_2_nh_' has 'nohost' clause\" 1 \"oaccdevlow\" { target offloading_enabled } } }\n \n       SUBROUTINE v_1\n !$ACC ROUTINE VECTOR\n@@ -22,26 +45,59 @@ SUBROUTINE v_1\n !$ACC ROUTINE VECTOR\n ! { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-5 }\n       END SUBROUTINE v_1\n+      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'v_1' doesn't have 'nohost' clause\" 1 \"oaccdevlow\" { target { ! offloading_enabled } } } }\n+      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'v_1_' doesn't have 'nohost' clause\" 1 \"oaccdevlow\" { target offloading_enabled } } }\n+\n+      SUBROUTINE v_1_nh\n+!$ACC ROUTINE NOHOST VECTOR\n+!$ACC ROUTINE VECTOR NOHOST\n+!$ACC ROUTINE(v_1_nh) NOHOST VECTOR\n+!$ACC ROUTINE VECTOR NOHOST\n+! { dg-bogus \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-5 }\n+      END SUBROUTINE v_1_nh\n+      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'v_1_nh' has 'nohost' clause\" 1 \"oaccdevlow\" { target { ! offloading_enabled } } } }\n+      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'v_1_nh_' has 'nohost' clause\" 1 \"oaccdevlow\" { target offloading_enabled } } }\n \n       SUBROUTINE v_2\n !$ACC ROUTINE(v_2) VECTOR\n !$ACC ROUTINE VECTOR\n !$ACC ROUTINE(v_2) VECTOR\n ! { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-4 }\n       END SUBROUTINE v_2\n+      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'v_2' doesn't have 'nohost' clause\" 1 \"oaccdevlow\" { target { ! offloading_enabled } } } }\n+      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'v_2_' doesn't have 'nohost' clause\" 1 \"oaccdevlow\" { target offloading_enabled } } }\n+\n+      SUBROUTINE v_2_nh\n+!$ACC ROUTINE(v_2_nh) VECTOR NOHOST\n+!$ACC ROUTINE VECTOR NOHOST\n+!$ACC ROUTINE(v_2_nh) NOHOST VECTOR\n+! { dg-bogus \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-4 }\n+      END SUBROUTINE v_2_nh\n+      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'v_2_nh' has 'nohost' clause\" 1 \"oaccdevlow\" { target { ! offloading_enabled } } } }\n+      ! { dg-final { scan-tree-dump-times \"(?n)OpenACC routine 'v_2_nh_' has 'nohost' clause\" 1 \"oaccdevlow\" { target offloading_enabled } } }\n \n       SUBROUTINE sub_1\n       IMPLICIT NONE\n       EXTERNAL :: g_1\n !$ACC ROUTINE (g_1) GANG\n !$ACC ROUTINE (g_1) GANG\n !$ACC ROUTINE (g_1) GANG\n+      EXTERNAL :: g_1_nh\n+!$ACC ROUTINE (g_1_nh) GANG NOHOST\n+!$ACC ROUTINE (g_1_nh) NOHOST GANG\n+!$ACC ROUTINE (g_1_nh) NOHOST GANG\n+!$ACC ROUTINE (g_1_nh) GANG NOHOST\n \n       CALL s_1\n+      CALL s_1_nh\n       CALL s_2\n+      CALL s_2_nh\n       CALL v_1\n+      CALL v_1_nh\n       CALL v_2\n+      CALL v_2_nh\n       CALL g_1\n+      CALL g_1_nh\n       CALL ABORT\n       END SUBROUTINE sub_1\n \n@@ -50,14 +106,22 @@ MODULE m_w_1\n       EXTERNAL :: w_1\n !$ACC ROUTINE (w_1) WORKER\n !$ACC ROUTINE (w_1) WORKER\n+      EXTERNAL :: w_1_nh\n+!$ACC ROUTINE (w_1_nh) NOHOST WORKER\n+!$ACC ROUTINE (w_1_nh) WORKER NOHOST\n \n       CONTAINS\n       SUBROUTINE sub_2\n       CALL s_1\n+      CALL s_1_nh\n       CALL s_2\n+      CALL s_2_nh\n       CALL v_1\n+      CALL v_1_nh\n       CALL v_2\n+      CALL v_2_nh\n       CALL w_1\n+      CALL w_1_nh\n       CALL ABORT\n       END SUBROUTINE sub_2\n       END MODULE m_w_1"}, {"sha": "f332ed5bad3ecf0ac662c268e36665a55bbdabed", "filename": "gcc/testsuite/gfortran.dg/goacc/routine-multiple-directives-2.f90", "status": "modified", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-multiple-directives-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-multiple-directives-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-multiple-directives-2.f90?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -9,8 +9,32 @@ SUBROUTINE s_1\n !$ACC ROUTINE\n !$ACC ROUTINE(s_1) WORKER ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n !$ACC ROUTINE GANG VECTOR ! { dg-error \"Multiple loop axes specified for routine\" }\n+!$ACC ROUTINE VECTOR NOHOST WORKER ! { dg-error \"Multiple loop axes specified for routine\" }\n+!$ACC ROUTINE(s_1) NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE NOHOST GANG ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE(s_1) SEQ NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE(s_1) NOHOST WORKER ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE GANG NOHOST VECTOR ! { dg-error \"Multiple loop axes specified for routine\" }\n       END SUBROUTINE s_1\n \n+      SUBROUTINE s_1_nh\n+!$ACC ROUTINE NOHOST VECTOR WORKER ! { dg-error \"Multiple loop axes specified for routine\" }\n+!$ACC ROUTINE(s_1_nh) NOHOST\n+!$ACC ROUTINE NOHOST GANG ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE(s_1_nh) NOHOST SEQ\n+!$ACC ROUTINE NOHOST\n+!$ACC ROUTINE(s_1_nh) WORKER NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE GANG NOHOST VECTOR ! { dg-error \"Multiple loop axes specified for routine\" }\n+!$ACC ROUTINE VECTOR WORKER ! { dg-error \"Multiple loop axes specified for routine\" }\n+!$ACC ROUTINE(s_1_nh) ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE GANG ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE(s_1_nh) SEQ ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE(s_1_nh) WORKER ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE GANG VECTOR ! { dg-error \"Multiple loop axes specified for routine\" }\n+      END SUBROUTINE s_1_nh\n+\n       SUBROUTINE s_2\n !$ACC ROUTINE(s_2) VECTOR WORKER ! { dg-error \"Multiple loop axes specified for routine\" }\n !$ACC ROUTINE\n@@ -19,8 +43,32 @@ SUBROUTINE s_2\n !$ACC ROUTINE(s_2)\n !$ACC ROUTINE WORKER ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n !$ACC ROUTINE(s_2) GANG VECTOR ! { dg-error \"Multiple loop axes specified for routine\" }\n+!$ACC ROUTINE(s_2) VECTOR NOHOST WORKER ! { dg-error \"Multiple loop axes specified for routine\" }\n+!$ACC ROUTINE NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE(s_2) GANG NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE SEQ NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE(s_2) NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE NOHOST WORKER ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE(s_2) NOHOST GANG VECTOR ! { dg-error \"Multiple loop axes specified for routine\" }\n       END SUBROUTINE s_2\n \n+      SUBROUTINE s_2_nh\n+!$ACC ROUTINE(s_2_nh) NOHOST VECTOR WORKER ! { dg-error \"Multiple loop axes specified for routine\" }\n+!$ACC ROUTINE NOHOST\n+!$ACC ROUTINE(s_2_nh) GANG NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE SEQ NOHOST\n+!$ACC ROUTINE(s_2_nh) NOHOST\n+!$ACC ROUTINE NOHOST WORKER ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE(s_2_nh) NOHOST GANG VECTOR ! { dg-error \"Multiple loop axes specified for routine\" }\n+!$ACC ROUTINE(s_2_nh) VECTOR WORKER ! { dg-error \"Multiple loop axes specified for routine\" }\n+!$ACC ROUTINE ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE(s_2_nh) GANG ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE SEQ ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE(s_2_nh) ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE WORKER ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE(s_2_nh) GANG VECTOR ! { dg-error \"Multiple loop axes specified for routine\" }\n+      END SUBROUTINE s_2_nh\n+\n       SUBROUTINE v_1\n !$ACC ROUTINE VECTOR WORKER ! { dg-error \"Multiple loop axes specified for routine\" }\n !$ACC ROUTINE VECTOR\n@@ -30,16 +78,61 @@ SUBROUTINE v_1\n !$ACC ROUTINE(v_1) VECTOR\n !$ACC ROUTINE WORKER ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n !$ACC ROUTINE GANG VECTOR ! { dg-error \"Multiple loop axes specified for routine\" }\n+!$ACC ROUTINE NOHOST VECTOR WORKER ! { dg-error \"Multiple loop axes specified for routine\" }\n+!$ACC ROUTINE NOHOST VECTOR ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE GANG NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE NOHOST SEQ ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE(v_1) VECTOR NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE WORKER NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE GANG VECTOR NOHOST ! { dg-error \"Multiple loop axes specified for routine\" }\n       END SUBROUTINE v_1\n \n+      SUBROUTINE v_1_nh\n+!$ACC ROUTINE VECTOR WORKER NOHOST ! { dg-error \"Multiple loop axes specified for routine\" }\n+!$ACC ROUTINE VECTOR NOHOST\n+!$ACC ROUTINE GANG NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE NOHOST SEQ ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE(v_1_nh) VECTOR NOHOST\n+!$ACC ROUTINE WORKER NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE GANG NOHOST VECTOR ! { dg-error \"Multiple loop axes specified for routine\" }\n+!$ACC ROUTINE VECTOR WORKER ! { dg-error \"Multiple loop axes specified for routine\" }\n+!$ACC ROUTINE VECTOR ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE GANG ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE SEQ ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE(v_1_nh) VECTOR ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE WORKER ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE GANG VECTOR ! { dg-error \"Multiple loop axes specified for routine\" }\n+      END SUBROUTINE v_1_nh\n+\n       SUBROUTINE v_2\n !$ACC ROUTINE(v_2) VECTOR\n !$ACC ROUTINE(v_2) VECTOR WORKER ! { dg-error \"Multiple loop axes specified for routine\" }\n !$ACC ROUTINE(v_2) ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n !$ACC ROUTINE VECTOR\n !$ACC ROUTINE(v_2) GANG VECTOR ! { dg-error \"Multiple loop axes specified for routine\" }\n+!$ACC ROUTINE(v_2) VECTOR NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE(v_2) VECTOR NOHOST WORKER ! { dg-error \"Multiple loop axes specified for routine\" }\n+!$ACC ROUTINE(v_2) NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE VECTOR NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE(v_2) NOHOST GANG VECTOR ! { dg-error \"Multiple loop axes specified for routine\" }\n       END SUBROUTINE v_2\n \n+      SUBROUTINE v_2_nh\n+!$ACC ROUTINE(v_2_nh) VECTOR NOHOST\n+!$ACC ROUTINE(v_2_nh) VECTOR WORKER NOHOST ! { dg-error \"Multiple loop axes specified for routine\" }\n+!$ACC ROUTINE(v_2_nh) NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE VECTOR NOHOST\n+!$ACC ROUTINE(v_2_nh) GANG NOHOST VECTOR ! { dg-error \"Multiple loop axes specified for routine\" }\n+!$ACC ROUTINE(v_2_nh) VECTOR ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE(v_2_nh) VECTOR WORKER ! { dg-error \"Multiple loop axes specified for routine\" }\n+!$ACC ROUTINE(v_2_nh) ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE VECTOR ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE(v_2_nh) GANG VECTOR ! { dg-error \"Multiple loop axes specified for routine\" }\n+      END SUBROUTINE v_2_nh\n+\n       SUBROUTINE sub_1\n       IMPLICIT NONE\n       EXTERNAL :: g_1\n@@ -50,12 +143,39 @@ SUBROUTINE sub_1\n !$ACC ROUTINE (g_1) ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n !$ACC ROUTINE (g_1) GANG\n !$ACC ROUTINE (g_1) ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE (g_1) NOHOST GANG ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE (g_1) GANG WORKER NOHOST ! { dg-error \"Multiple loop axes specified for routine\" }\n+!$ACC ROUTINE (g_1) NOHOST VECTOR ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE (g_1) NOHOST SEQ ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE (g_1) NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE (g_1) GANG NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE (g_1) NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+      EXTERNAL :: g_1_nh\n+!$ACC ROUTINE (g_1_nh) NOHOST GANG\n+!$ACC ROUTINE (g_1_nh) GANG NOHOST WORKER ! { dg-error \"Multiple loop axes specified for routine\" }\n+!$ACC ROUTINE (g_1_nh) NOHOST VECTOR ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE (g_1_nh) SEQ NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE (g_1_nh) NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE (g_1_nh) GANG NOHOST\n+!$ACC ROUTINE (g_1_nh) NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE (g_1_nh) GANG ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE (g_1_nh) GANG WORKER ! { dg-error \"Multiple loop axes specified for routine\" }\n+!$ACC ROUTINE (g_1_nh) VECTOR ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE (g_1_nh) SEQ ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE (g_1_nh) ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE (g_1_nh) GANG ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE (g_1_nh) ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n \n       CALL s_1\n+      CALL s_1_nh\n       CALL s_2\n+      CALL s_2_nh\n       CALL v_1\n+      CALL v_1_nh\n       CALL v_2\n+      CALL v_2_nh\n       CALL g_1\n+      CALL g_1_nh\n       CALL ABORT\n       END SUBROUTINE sub_1\n \n@@ -69,14 +189,41 @@ MODULE m_w_1\n !$ACC ROUTINE (w_1) SEQ ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n !$ACC ROUTINE (w_1) ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n !$ACC ROUTINE (w_1) VECTOR ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE (w_1) WORKER NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE (w_1) WORKER NOHOST SEQ ! { dg-error \"Multiple loop axes specified for routine\" }\n+!$ACC ROUTINE (w_1) NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE (w_1) NOHOST WORKER ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE (w_1) SEQ NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE (w_1) NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE (w_1) VECTOR NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+      EXTERNAL :: w_1_nh\n+!$ACC ROUTINE (w_1_nh) WORKER NOHOST\n+!$ACC ROUTINE (w_1_nh) WORKER NOHOST SEQ ! { dg-error \"Multiple loop axes specified for routine\" }\n+!$ACC ROUTINE (w_1_nh) NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE (w_1_nh) NOHOST WORKER\n+!$ACC ROUTINE (w_1_nh) NOHOST SEQ ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE (w_1_nh) NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE (w_1_nh) VECTOR NOHOST ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE (w_1_nh) WORKER ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE (w_1_nh) WORKER SEQ ! { dg-error \"Multiple loop axes specified for routine\" }\n+!$ACC ROUTINE (w_1_nh) ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE (w_1_nh) WORKER ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE (w_1_nh) SEQ ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE (w_1_nh) ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n+!$ACC ROUTINE (w_1_nh) VECTOR ! { dg-error \"\\\\!\\\\\\$ACC ROUTINE already applied\" }\n \n       CONTAINS\n       SUBROUTINE sub_2\n       CALL s_1\n+      CALL s_1_nh\n       CALL s_2\n+      CALL s_2_nh\n       CALL v_1\n+      CALL v_1_nh\n       CALL v_2\n+      CALL v_2_nh\n       CALL w_1\n+      CALL w_1_nh\n       CALL ABORT\n       END SUBROUTINE sub_2\n       END MODULE m_w_1"}, {"sha": "bfab988ecddf33134776cbad5f147462a9851566", "filename": "gcc/tree-core.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -508,7 +508,10 @@ enum omp_clause_code {\n   OMP_CLAUSE_IF_PRESENT,\n \n   /* OpenACC clause: finalize.  */\n-  OMP_CLAUSE_FINALIZE\n+  OMP_CLAUSE_FINALIZE,\n+\n+  /* OpenACC clause: nohost.  */\n+  OMP_CLAUSE_NOHOST,\n };\n \n #undef DEFTREESTRUCT"}, {"sha": "0c3fb029054704059b494f5c4335bde2fc9fb874", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -1510,6 +1510,9 @@ convert_nonlocal_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n \tcase OMP_CLAUSE__REDUCTEMP_:\n \tcase OMP_CLAUSE__SIMDUID_:\n \tcase OMP_CLAUSE__SIMT_:\n+\t  /* The following clauses are only allowed on OpenACC 'routine'\n+\t     directives, not seen here.  */\n+\tcase OMP_CLAUSE_NOHOST:\n \t  /* Anything else.  */\n \tdefault:\n \t  gcc_unreachable ();\n@@ -2291,6 +2294,9 @@ convert_local_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n \tcase OMP_CLAUSE__REDUCTEMP_:\n \tcase OMP_CLAUSE__SIMDUID_:\n \tcase OMP_CLAUSE__SIMT_:\n+\t  /* The following clauses are only allowed on OpenACC 'routine'\n+\t     directives, not seen here.  */\n+\tcase OMP_CLAUSE_NOHOST:\n \t  /* Anything else.  */\n \tdefault:\n \t  gcc_unreachable ();"}, {"sha": "7201bd7d9f694ff22016dd53f2c6e3769adedd5d", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -1303,6 +1303,9 @@ dump_omp_clause (pretty_printer *pp, tree clause, int spc, dump_flags_t flags)\n     case OMP_CLAUSE_FINALIZE:\n       pp_string (pp, \"finalize\");\n       break;\n+    case OMP_CLAUSE_NOHOST:\n+      pp_string (pp, \"nohost\");\n+      break;\n     case OMP_CLAUSE_DETACH:\n       pp_string (pp, \"detach(\");\n       dump_generic_node (pp, OMP_CLAUSE_DECL (clause), spc, flags,"}, {"sha": "c621f870880cb19748b1f04bab016a1f097e5987", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -361,6 +361,7 @@ unsigned const char omp_clause_num_ops[] =\n   3, /* OMP_CLAUSE_TILE  */\n   0, /* OMP_CLAUSE_IF_PRESENT */\n   0, /* OMP_CLAUSE_FINALIZE */\n+  0, /* OMP_CLAUSE_NOHOST */\n };\n \n const char * const omp_clause_code_name[] =\n@@ -448,6 +449,7 @@ const char * const omp_clause_code_name[] =\n   \"tile\",\n   \"if_present\",\n   \"finalize\",\n+  \"nohost\",\n };\n \n \n@@ -11165,6 +11167,7 @@ walk_tree_1 (tree *tp, walk_tree_fn func, void *data,\n \tcase OMP_CLAUSE__SIMT_:\n \tcase OMP_CLAUSE_IF_PRESENT:\n \tcase OMP_CLAUSE_FINALIZE:\n+\tcase OMP_CLAUSE_NOHOST:\n \t  WALK_SUBTREE_TAIL (OMP_CLAUSE_CHAIN (*tp));\n \n \tcase OMP_CLAUSE_LASTPRIVATE:"}, {"sha": "dc92727d5be277efee32dfcf88b3ec2ca882965c", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/routine-nohost-1.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-nohost-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-nohost-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-nohost-1.c?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -0,0 +1,63 @@\n+/* Test 'nohost' clause via 'acc_on_device'.\n+\n+   With optimizations disabled, we currently don't expect that 'acc_on_device' \"evaluates at compile time to a constant\".\n+   { dg-skip-if \"TODO PR82391\" { *-*-* } { \"-O0\" } }\n+*/\n+\n+/* { dg-additional-options \"-fdump-tree-oaccdevlow\" } */\n+\n+/* { dg-additional-options \"-fno-inline\" } for stable results regarding OpenACC 'routine'.  */\n+\n+#include <assert.h>\n+#include <openacc.h>\n+\n+#pragma acc routine\n+static int fact(int n)\n+{\n+  if (n == 0 || n == 1)\n+    return 1;\n+  else\n+    return n * fact(n - 1);\n+}\n+\n+#pragma acc routine nohost\n+static int fact_nohost(int n)\n+{\n+  /* Make sure this fails host compilation.  */\n+#if defined ACC_DEVICE_TYPE_host\n+  asm (\"IT'S A TRAP\");\n+#elif defined ACC_DEVICE_TYPE_nvidia\n+  asm (\"{\\n\\t  .reg .u32 %tid_x;\\n\\t  mov.u32 %tid_x, %tid.x;\\n\\t}\");\n+#elif defined ACC_DEVICE_TYPE_radeon\n+  asm (\"s_nop 0\");\n+#else\n+# error Not ported to this ACC_DEVICE_TYPE\n+#endif\n+\n+  return fact(n);\n+}\n+/* { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'fact_nohost' has 'nohost' clause\\.$} 1 oaccdevlow { target c } } }\n+   { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'int fact_nohost\\(int\\)' has 'nohost' clause\\.$} 1 oaccdevlow { target { c++ && { ! offloading_enabled } } } } }\n+   { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'fact_nohost\\(int\\)' has 'nohost' clause\\.$} 1 oaccdevlow { target { c++ && offloading_enabled } } } }\n+   TODO See PR101551 for 'offloading_enabled' differences.  */\n+\n+int main()\n+{\n+#define N 10\n+  int x[N];\n+\n+#pragma acc parallel loop copyout(x)\n+  for (int i = 0; i < N; ++i)\n+    /*TODO PR82391: '(int) acc_device_*' cast to avoid the C++ 'acc_on_device' wrapper.  */\n+    x[i] = acc_on_device((int) acc_device_not_host) ? fact_nohost(i) : 0;\n+\n+  for (int i = 0; i < N; ++i)\n+    {\n+      if (acc_get_device_type() == acc_device_host)\n+\tassert(x[i] == 0);\n+      else\n+\tassert(x[i] == fact(i));\n+    }\n+\n+  return 0;\n+}"}, {"sha": "4d081f269eb4e45bdc4a2d322cfa6403fe19200a", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/routine-nohost-2.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-nohost-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-nohost-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-nohost-2.c?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -0,0 +1,39 @@\n+/* Test 'nohost' clause via 'weak'.\n+\n+   { dg-require-effective-target weak_undefined }\n+\n+   When the OpenACC 'routine' with 'nohost' clauses gets discarded, the weak symbol then resolves to 'NULL'.\n+*/\n+\n+/* { dg-additional-sources routine-nohost-2_2.c } */\n+\n+/* { dg-additional-options \"-fno-inline\" } for stable results regarding OpenACC 'routine'.  */\n+\n+#include <assert.h>\n+#include <openacc.h>\n+\n+#pragma acc routine //nohost\n+__attribute__((weak))\n+extern int f1(int);\n+\n+int main()\n+{\n+  int x = -10;\n+\n+#pragma acc serial copy(x)\n+  /* { dg-warning {using vector_length \\(32\\), ignoring 1} \"\" { target openacc_nvidia_accel_selected } .-1 } */\n+  {\n+    if (f1)\n+      x = f1(x);\n+    else\n+      x = 0;\n+\n+  }\n+\n+  if (acc_get_device_type() == acc_device_host)\n+    assert(x == 0);\n+  else\n+    assert(x == -20);\n+\n+  return 0;\n+}"}, {"sha": "602954597927230d13d4bae1d1324f57ae9b98c5", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/routine-nohost-2_2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-nohost-2_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-nohost-2_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-nohost-2_2.c?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-skip-if \"\" { *-*-* } } */\n+\n+#pragma acc routine nohost\n+int f1(int x)\n+{\n+  /* Make sure this fails host compilation.  */\n+#if defined ACC_DEVICE_TYPE_host\n+  asm (\"IT'S A TRAP\");\n+#elif defined ACC_DEVICE_TYPE_nvidia\n+  asm (\"{\\n\\t  .reg .u32 %tid_x;\\n\\t  mov.u32 %tid_x, %tid.x;\\n\\t}\");\n+#elif defined ACC_DEVICE_TYPE_radeon\n+  asm (\"s_nop 0\");\n+#else\n+# error Not ported to this ACC_DEVICE_TYPE\n+#endif\n+\n+  return 2 * x;\n+}"}, {"sha": "cd5bddc8685bc57ed0c9655ab4802e525129092f", "filename": "libgomp/testsuite/libgomp.oacc-fortran/routine-nohost-1.f90", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61f6afbee370785cf091fe46e2e022748528307/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-nohost-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61f6afbee370785cf091fe46e2e022748528307/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-nohost-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-nohost-1.f90?ref=a61f6afbee370785cf091fe46e2e022748528307", "patch": "@@ -0,0 +1,63 @@\n+! Test 'nohost' clause via 'acc_on_device'.\n+\n+! { dg-do run }\n+\n+! With optimizations disabled, we currently don't expect that 'acc_on_device' \"evaluates at compile time to a constant\".\n+! { dg-skip-if \"TODO PR82391\" { *-*-* } { \"-O0\" } }\n+\n+! { dg-additional-options \"-fdump-tree-oaccdevlow\" }\n+\n+program main\n+  use openacc\n+  implicit none\n+  integer, parameter :: n = 10\n+  integer :: a(n), i\n+  integer, external :: fact_nohost\n+  !$acc routine (fact_nohost)\n+  integer, external :: fact\n+\n+  !$acc parallel loop\n+  do i = 1, n\n+     if (acc_on_device(acc_device_not_host)) then\n+        a(i) = fact_nohost(i)\n+     else\n+        a(i) = 0\n+     end if\n+  end do\n+  !$acc end parallel loop\n+\n+  do i = 1, n\n+     if (acc_get_device_type() .eq. acc_device_host) then\n+        if (a(i) .ne. 0) stop 10 + i\n+     else\n+        if (a(i) .ne. fact(i)) stop 20 + i\n+     end if\n+  end do\n+end program main\n+\n+recursive function fact(x) result(res)\n+  implicit none\n+  !$acc routine (fact)\n+  integer, intent(in) :: x\n+  integer :: res\n+\n+  if (x < 1) then\n+     res = 1\n+  else\n+     res = x * fact(x - 1)\n+  end if\n+end function fact\n+\n+function fact_nohost(x) result(res)\n+  use openacc\n+  implicit none\n+  !$acc routine (fact_nohost) nohost\n+  integer, intent(in) :: x\n+  integer :: res\n+  integer, external :: fact\n+\n+  res = fact(x)\n+end function fact_nohost\n+! { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'fact_nohost' has 'nohost' clause\\.$} 1 oaccdevlow { target { ! offloading_enabled } } } }\n+! { dg-final { scan-tree-dump-times {(?n)^OpenACC routine 'fact_nohost_' has 'nohost' clause\\.$} 1 oaccdevlow { target offloading_enabled } } }\n+!TODO See PR101551 for 'offloading_enabled' differences."}]}