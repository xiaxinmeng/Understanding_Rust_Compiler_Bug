{"sha": "fe2194dfff5f72512520193c39566b875f0a3ae7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUyMTk0ZGZmZjVmNzI1MTI1MjAxOTNjMzk1NjZiODc1ZjBhM2FlNw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-02-25T15:19:43Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-25T15:19:43Z"}, "message": "binde.adb: Change messages to mention -gnatel instead of -gnatwl.\n\n2014-02-25  Robert Dewar  <dewar@adacore.com>\n\n\t* binde.adb: Change messages to mention -gnatel instead of -gnatwl.\n\t* gnat_ugn.texi: Update documentation of -gnatwl Add documentation\n\tof -gnatel/-gnateL.\n\t* opt.ads (Warn_Info_Messages): New flag.\n\t* sem_elab.adb: Use Elab_Warnings, Elab_Info_Messages to control\n\tmessages.\n\t* sem_prag.adb: Use Elab_Warnings, Elab_Info_Messages to control\n\tmessages.\n\t* switch-m.ad, switch-c.adb: Recognize new -gnatel/EL switches.\n\t* usage.adb: Add documentation of -gnatel/-gnateL Update\n\tdocumentation of -gnatwl/-gnatwL.\n\t* warnsw.adb: New handling of Elab_Warnings, Elab_Info_Messages\n\t* warnsw.ads (Elab_Info_Messages): New field in Warning_Record\n\nFrom-SVN: r208139", "tree": {"sha": "055a263ad3f757c2ee4d86b30567de7621eb59f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/055a263ad3f757c2ee4d86b30567de7621eb59f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe2194dfff5f72512520193c39566b875f0a3ae7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe2194dfff5f72512520193c39566b875f0a3ae7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe2194dfff5f72512520193c39566b875f0a3ae7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe2194dfff5f72512520193c39566b875f0a3ae7/comments", "author": null, "committer": null, "parents": [{"sha": "4c51ff88f2748e7f59d69d2b99c6749f4ec308c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7"}], "stats": {"total": 236, "additions": 164, "deletions": 72}, "files": [{"sha": "27060c7aebdc7ef04abcc1c6ba6f3ee94d6189b3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2194dfff5f72512520193c39566b875f0a3ae7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2194dfff5f72512520193c39566b875f0a3ae7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fe2194dfff5f72512520193c39566b875f0a3ae7", "patch": "@@ -1,3 +1,19 @@\n+2014-02-25  Robert Dewar  <dewar@adacore.com>\n+\n+\t* binde.adb: Change messages to mention -gnatel instead of -gnatwl.\n+\t* gnat_ugn.texi: Update documentation of -gnatwl Add documentation\n+\tof -gnatel/-gnateL.\n+\t* opt.ads (Warn_Info_Messages): New flag.\n+\t* sem_elab.adb: Use Elab_Warnings, Elab_Info_Messages to control\n+\tmessages.\n+\t* sem_prag.adb: Use Elab_Warnings, Elab_Info_Messages to control\n+\tmessages.\n+\t* switch-m.ad, switch-c.adb: Recognize new -gnatel/EL switches.\n+\t* usage.adb: Add documentation of -gnatel/-gnateL Update\n+\tdocumentation of -gnatwl/-gnatwL.\n+\t* warnsw.adb: New handling of Elab_Warnings, Elab_Info_Messages\n+\t* warnsw.ads (Elab_Info_Messages): New field in Warning_Record\n+\n 2014-02-25  Robert Dewar  <dewar@adacore.com>\n \n \t* einfo.ads, einfo.adb (Has_Shift_Operator): New flag."}, {"sha": "935e09e9d73f96494263b053af402f8d36e2ecf3", "filename": "gcc/ada/binde.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2194dfff5f72512520193c39566b875f0a3ae7/gcc%2Fada%2Fbinde.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2194dfff5f72512520193c39566b875f0a3ae7/gcc%2Fada%2Fbinde.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbinde.adb?ref=fe2194dfff5f72512520193c39566b875f0a3ae7", "patch": "@@ -1023,7 +1023,7 @@ package body Binde is\n                Info => True);\n \n             Error_Msg_Output\n-              (\"     recompile $ with -gnatwl for full details\",\n+              (\"     recompile $ with -gnatel for full details\",\n                Info => True);\n \n          when Elab_Desirable =>\n@@ -1032,7 +1032,7 @@ package body Binde is\n                Info => True);\n \n             Error_Msg_Output\n-              (\"     recompile $ with -gnatwl for full details\",\n+              (\"     recompile $ with -gnatel for full details\",\n                Info => True);\n \n          when Spec_First =>"}, {"sha": "dddd827017bf44669e6b32f1405e5eecb2138398", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 54, "deletions": 43, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2194dfff5f72512520193c39566b875f0a3ae7/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2194dfff5f72512520193c39566b875f0a3ae7/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=fe2194dfff5f72512520193c39566b875f0a3ae7", "patch": "@@ -3822,6 +3822,21 @@ Indicates that the source is a multi-unit source and that the index of the\n unit to compile is @var{nnn}. @var{nnn} needs to be a positive number and need\n to be a valid index in the multi-unit source.\n \n+@item -gnatel\n+@cindex @option{-gnatel} (@command{gcc})\n+This switch can be used with the static elaboration model to issue info\n+messages showing\n+where implicit @code{pragma Elaborate} and @code{pragma Elaborate_All}\n+are generated. This is useful in diagnosing elaboration circularities\n+caused by these implicit pragmas when using the static elaboration\n+model. See See the section in this guide on elaboration checking for\n+further details. These messages are not generated by default, and are\n+intended only for temporary use when debugging circularity problems.\n+\n+@item -gnateL\n+@cindex @option{-gnatel} (@command{gcc})\n+This switch turns off the info messages about implicit elaboration pragmas.\n+\n @item -gnatem=@var{path}\n @cindex @option{-gnatem} (@command{gcc})\n Specify a mapping file\n@@ -4922,7 +4937,7 @@ gnat_rm, GNAT Reference manual}.\n This switch activates most optional warning messages.  See the remaining list\n in this section for details on optional warning messages that can be\n individually controlled.  The warnings that are not turned on by this\n-switch are\n+switch are:\n @option{-gnatwd} (implicit dereferencing),\n @option{-gnatwh} (hiding),\n @option{-gnatw.d} (tag warnings with -gnatw switch)\n@@ -5280,32 +5295,19 @@ is defined in package Standard.\n @cindex @option{-gnatwl} (@command{gcc})\n @cindex Elaboration, warnings\n This switch activates warnings on missing\n-@code{Elaborate_All} and @code{Elaborate} pragmas.\n-See the section in this guide on elaboration checking for details on\n-when such pragmas should be used. In dynamic elaboration mode, this switch\n-generations warnings about the need to add elaboration pragmas. Note however,\n-that if you blindly follow these warnings, and add @code{Elaborate_All}\n-warnings wherever they are recommended, you basically end up with the\n-equivalent of the static elaboration model, which may not be what you want for\n-legacy code for which the static model does not work.\n-\n-For the static model, the messages generated are labeled \"info:\" (for\n-information messages). They are not warnings to add elaboration pragmas,\n-merely informational messages showing what implicit elaboration pragmas\n-have been added, for use in analyzing elaboration circularity problems.\n-\n-Warnings are also generated if you\n-are using the static mode of elaboration, and a @code{pragma Elaborate}\n-is encountered. The default is that such warnings\n+for possible elaboration problems, including suspicious use\n+of @code{Elaborate} pragmas, when using the static elaboration model, and\n+possible situations that may raise @code{Program_Error} when using the\n+dynamic elaboration model.\n+See the section in this guide on elaboration checking for further details.\n+The default is that such warnings\n are not generated.\n This warning is not automatically turned on by the use of @option{-gnatwa}.\n \n @item -gnatwL\n @emph{Suppress warnings for elaboration pragmas.}\n @cindex @option{-gnatwL} (@command{gcc})\n-This switch suppresses warnings on missing Elaborate and Elaborate_All pragmas.\n-See the section in this guide on elaboration checking for details on\n-when such pragmas should be used.\n+This switch suppresses warnings for possible elaboration problems.\n \n @item -gnatw.l\n @emph{List inherited aspects.}\n@@ -25046,7 +25048,7 @@ elaboration code in your own application).\n * Elaboration Issues for Library Tasks::\n * Mixing Elaboration Models::\n * What to Do If the Default Elaboration Behavior Fails::\n-* Elaboration for Dispatching Calls::\n+* Elaboration for Indirect Calls::\n * Summary of Procedures for Elaboration Control::\n * Other Elaboration Order Considerations::\n * Determining the Chosen Elaboration Order::\n@@ -25913,8 +25915,8 @@ guaranteed.\n \n If it is important to guarantee portability, then the compilations should\n use the\n-@option{-gnatwl}\n-(warn on elaboration problems) switch. This will cause warning messages\n+@option{-gnatel}\n+(info messages for elaboration prag mas) switch. This will cause info messages\n to be generated indicating the missing @code{Elaborate} and\n @code{Elaborate_All} pragmas.\n Consider the following source program:\n@@ -25938,8 +25940,8 @@ likely that the binder will be able to honor it. However, if you want\n to port this program to some other Ada compiler than GNAT.\n it is safer to include the pragma explicitly in the source. If this\n unit is compiled with the\n-@option{-gnatwl}\n-switch, then the compiler outputs a warning:\n+@option{-gnatel}\n+switch, then the compiler outputs an information message:\n \n @smallexample\n @group\n@@ -25948,19 +25950,19 @@ switch, then the compiler outputs a warning:\n 2. package j is\n 3.   m : integer := k.r;\n                      |\n-   >>> warning: call to \"r\" may raise Program_Error\n-   >>> warning: missing pragma Elaborate_All for \"k\"\n+   >>> info: call to \"r\" may raise Program_Error\n+   >>> info: missing pragma Elaborate_All for \"k\"\n \n 4. end;\n @end cartouche\n @end group\n @end smallexample\n \n @noindent\n-and these warnings can be used as a guide for supplying manually\n-the missing pragmas. It is usually a bad idea to use this warning\n-option during development. That's because it will warn you when\n-you need to put in a pragma, but cannot warn you when it is time\n+and these messages can be used as a guide for supplying manually\n+the missing pragmas. It is usually a bad idea to use this\n+option during development. That's because it will tell you when\n+you need to put in a pragma, but cannot tell you when it is time\n to take it out. So the use of pragma @code{Elaborate_All} may lead to\n unnecessary dependencies and even false circularities.\n \n@@ -26471,7 +26473,7 @@ diagnostics. For example:\n error: elaboration circularity detected\n info:   \"proc (body)\" must be elaborated before \"pack (body)\"\n info:     reason: Elaborate_All probably needed in unit \"pack (body)\"\n-info:     recompile \"pack (body)\" with -gnatwl\n+info:     recompile \"pack (body)\" with -gnatel\n info:                             for full details\n info:       \"proc (body)\"\n info:         is needed by its spec:\n@@ -26631,7 +26633,7 @@ the following diagnostics:\n error: elaboration circularity detected\n info:    \"pack1 (body)\" must be elaborated before \"pack1 (body)\"\n info:       reason: Elaborate_All probably needed in unit \"pack1 (body)\"\n-info:       recompile \"pack1 (body)\" with -gnatwl for full details\n+info:       recompile \"pack1 (body)\" with -gnatel for full details\n info:          \"pack1 (body)\"\n info:             must be elaborated along with its spec:\n info:          \"pack1 (spec)\"\n@@ -26672,9 +26674,9 @@ It is certainly simple enough to use\n but the danger in this case is that, even if the GNAT binder\n finds a correct elaboration order, it may not always do so,\n and certainly a binder from another Ada compiler might not. A\n-combination of testing and analysis (for which the warnings generated\n-with the\n-@option{-gnatwl}\n+combination of testing and analysis (for which the\n+information messages generated with the\n+@option{-gnatel}\n switch can be useful) must be used to ensure that the program is free\n of errors. One switch that is useful in this testing is the\n @option{^-p (pessimistic elaboration order)^/PESSIMISTIC_ELABORATION_ORDER^}\n@@ -26704,9 +26706,10 @@ elaboration switch if your code is correct, and we assume that the\n C-tests are indeed correct (it is less efficient, but efficiency is\n not a factor in running the ACVC tests.)\n \n-@node Elaboration for Dispatching Calls\n-@section Elaboration for Dispatching Calls\n+@node Elaboration for Indirect Calls\n+@section Elaboration for Indirect Calls\n @cindex Dispatching calls\n+@cindex Indirect calls\n \n @noindent\n In rare cases, the static elaboration model fails to prevent\n@@ -26719,7 +26722,15 @@ Access-to-subprogram types, however, are handled conservatively, and\n do not require run-time checks. This was not true in earlier versions\n of the compiler; you can use the @option{-gnatd.U} debug switch to\n revert to the old behavior if the new conservative behavior causes\n-elaboration cycles.\n+elaboration cycles. Here, ``conservative'' means that if you do\n+@code{P'Access} during elaboration, the compiler will assume that you\n+might call @code{P} indirectly during elaboration, so it adds an\n+implicit @code{pragma Elaborate_All} on the library unit containing\n+@code{P}. The @option{-gnatd.U} switch is safe if you know there are\n+no such calls. If the program worked before, it will continue to work\n+with @option{-gnatd.U}. But beware that code modifications such as\n+adding an indirect call can cause erroneous behavior in the presence\n+of @option{-gnatd.U}.\n \n @node Summary of Procedures for Elaboration Control\n @section Summary of Procedures for Elaboration Control\n@@ -26731,9 +26742,9 @@ the special elaboration control switches. If the binder successfully\n binds your program, then you can be confident that, apart from issues\n raised by the use of access-to-subprogram types and dynamic dispatching,\n the program is free of elaboration errors. If it is important that the\n-program be portable, then use the\n-@option{-gnatwl}\n-switch to generate warnings about missing @code{Elaborate} or\n+program be portable to other compilers than GNAT, then use the\n+@option{-gnatel}\n+switch to generate messages about missing @code{Elaborate} or\n @code{Elaborate_All} pragmas, and supply the missing pragmas.\n \n If the program fails to bind using the default static elaboration"}, {"sha": "4031121bde95631629af56e66fd58ea9e27e3977", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2194dfff5f72512520193c39566b875f0a3ae7/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2194dfff5f72512520193c39566b875f0a3ae7/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=fe2194dfff5f72512520193c39566b875f0a3ae7", "patch": "@@ -509,9 +509,13 @@ package Opt is\n    --  GNATBIND\n    --  Set to True to output chosen elaboration order\n \n+   Elab_Info_Messages : Boolean := False;\n+   --  GNAT\n+   --  Set to True to output info messages for static elabmodel (-gnatel)\n+\n    Elab_Warnings : Boolean := False;\n    --  GNAT\n-   --  Set to True to generate full elaboration warnings (-gnatwl)\n+   --  Set to True to generate elaboration warnings (-gnatwl)\n \n    Error_Msg_Line_Length : Nat := 0;\n    --  GNAT"}, {"sha": "6fb1c856696ac76d2cc640196ca4c1af181b29c3", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2194dfff5f72512520193c39566b875f0a3ae7/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2194dfff5f72512520193c39566b875f0a3ae7/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=fe2194dfff5f72512520193c39566b875f0a3ae7", "patch": "@@ -867,7 +867,7 @@ package body Sem_Elab is\n            and then not Elaboration_Checks_Suppressed (Ent)\n            and then not Suppress_Elaboration_Warnings (E_Scope)\n            and then not Elaboration_Checks_Suppressed (E_Scope)\n-           and then Elab_Warnings\n+           and then (Elab_Warnings or Elab_Info_Messages)\n            and then Generate_Warnings\n          then\n             Generate_Elab_Warnings : declare\n@@ -877,8 +877,9 @@ package body Sem_Elab is\n                   Ent   : Node_Or_Entity_Id);\n                --  Generate a call to Error_Msg_NE with parameters Msg_D or\n                --  Msg_S (for dynamic or static elaboration model), N and Ent.\n-               --  Msg_D is suppressed for the attribute reference case, since\n-               --  we never raise Program_Error for an attribute reference.\n+               --  Msg_D is a real warning (output if Msg_D is non-null and\n+               --  Elab_Warnings is set), Msg_S is an info message (output if\n+               --  Elab_Info_Messages is set.\n \n                ------------------\n                -- Elab_Warning --\n@@ -890,12 +891,21 @@ package body Sem_Elab is\n                   Ent   : Node_Or_Entity_Id)\n                is\n                begin\n+                  --  Dynamic elaboration checks, real warning\n+\n                   if Dynamic_Elaboration_Checks then\n                      if not Access_Case then\n-                        Error_Msg_NE (Msg_D, N, Ent);\n+                        if Msg_D /= \"\" and then Elab_Warnings then\n+                           Error_Msg_NE (Msg_D, N, Ent);\n+                        end if;\n                      end if;\n+\n+                  --  Static elaboration checks, info message\n+\n                   else\n-                     Error_Msg_NE (Msg_S, N, Ent);\n+                     if Elab_Info_Messages then\n+                        Error_Msg_NE (Msg_S, N, Ent);\n+                     end if;\n                   end if;\n                end Elab_Warning;\n \n@@ -907,15 +917,15 @@ package body Sem_Elab is\n                if Inst_Case then\n                   Elab_Warning\n                     (\"instantiation of& may raise Program_Error?l?\",\n-                     \"info: instantiation of& during elaboration?l?\", Ent);\n+                     \"info: instantiation of& during elaboration?\", Ent);\n \n-               --  Indirect call case, warning only in static elaboration\n+               --  Indirect call case, info message only in static elaboration\n                --  case, because the attribute reference itself cannot raise\n                --  an exception.\n \n                elsif Access_Case then\n                   Elab_Warning\n-                    (\"\", \"info: access to& during elaboration?l?\", Ent);\n+                    (\"\", \"info: access to& during elaboration?\", Ent);\n \n                --  Subprogram call case\n \n@@ -926,13 +936,13 @@ package body Sem_Elab is\n                   then\n                      Elab_Warning\n                        (\"implicit call to & may raise Program_Error?l?\",\n-                        \"info: implicit call to & during elaboration?l?\",\n+                        \"info: implicit call to & during elaboration?\",\n                         Ent);\n \n                   else\n                      Elab_Warning\n                        (\"call to & may raise Program_Error?l?\",\n-                        \"info: call to & during elaboration?l?\",\n+                        \"info: call to & during elaboration?\",\n                         Ent);\n                   end if;\n                end if;\n@@ -942,13 +952,13 @@ package body Sem_Elab is\n                if Nkind (N) in N_Subprogram_Instantiation then\n                   Elab_Warning\n                     (\"\\missing pragma Elaborate for&?l?\",\n-                     \"\\info: implicit pragma Elaborate for& generated?l?\",\n+                     \"\\info: implicit pragma Elaborate for& generated?\",\n                      W_Scope);\n \n                else\n                   Elab_Warning\n                     (\"\\missing pragma Elaborate_All for&?l?\",\n-                     \"\\info: implicit pragma Elaborate_All for & generated?l?\",\n+                     \"\\info: implicit pragma Elaborate_All for & generated?\",\n                      W_Scope);\n                end if;\n             end Generate_Elab_Warnings;\n@@ -1018,17 +1028,17 @@ package body Sem_Elab is\n             --  Here we need to generate an implicit elaborate all\n \n             else\n-               --  Generate elaborate_all warning unless suppressed\n+               --  Generate Elaborate_all warning unless suppressed\n \n-               if (Elab_Warnings and Generate_Warnings and not Inst_Case)\n+               if (Elab_Info_Messages and Generate_Warnings and not Inst_Case)\n                  and then not Suppress_Elaboration_Warnings (Ent)\n                  and then not Suppress_Elaboration_Warnings (E_Scope)\n                  and then not Suppress_Elaboration_Warnings (W_Scope)\n                then\n                   Error_Msg_Node_2 := W_Scope;\n                   Error_Msg_NE\n-                    (\"call to& in elaboration code \" &\n-                     \"requires pragma Elaborate_All on&?l?\", N, E);\n+                    (\"info: call to& in elaboration code \" &\n+                     \"requires pragma Elaborate_All on&?\", N, E);\n                end if;\n \n                --  Set indication for binder to generate Elaborate_All\n@@ -2540,13 +2550,13 @@ package body Sem_Elab is\n \n             if not Suppress_Elaboration_Warnings (Ent)\n               and then not Elaboration_Checks_Suppressed (Ent)\n-              and then Elab_Warnings\n+              and then Elab_Info_Messages\n               and then not Suppress_Elaboration_Warnings (Task_Scope)\n               and then not Elaboration_Checks_Suppressed (Task_Scope)\n             then\n                Error_Msg_Node_2 := Task_Scope;\n                Error_Msg_NE\n-                 (\"activation of an instance of task type&\" &\n+                 (\"info: activation of an instance of task type&\" &\n                   \" requires pragma Elaborate_All on &?l?\", N, Ent);\n             end if;\n "}, {"sha": "96bd85b3e2737508c1ed0080fb10add5770c92a3", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2194dfff5f72512520193c39566b875f0a3ae7/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2194dfff5f72512520193c39566b875f0a3ae7/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=fe2194dfff5f72512520193c39566b875f0a3ae7", "patch": "@@ -13333,8 +13333,8 @@ package body Sem_Prag is\n                Next (Arg);\n             end loop Outer;\n \n-            --  Give a warning if operating in static mode with -gnatwl\n-            --  (elaboration warnings enabled) switch set.\n+            --  Give a warning if operating in static mode with one of the\n+            --  gnatwl/-gnatwE (elaboration warnings enabled) switches set.\n \n             if Elab_Warnings and not Dynamic_Elaboration_Checks then\n                Error_Msg_N"}, {"sha": "6848d61652ffcb085960d8463a8f9bf9aa05f81a", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2194dfff5f72512520193c39566b875f0a3ae7/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2194dfff5f72512520193c39566b875f0a3ae7/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=fe2194dfff5f72512520193c39566b875f0a3ae7", "patch": "@@ -588,6 +588,18 @@ package body Switch.C is\n                      Ptr := Ptr + 1;\n                      Scan_Pos (Switch_Chars, Max, Ptr, Multiple_Unit_Index, C);\n \n+                  --  -gnatel\n+\n+                  when 'l' =>\n+                     Ptr := Ptr + 1;\n+                     Elab_Info_Messages := True;\n+\n+                  --  -gnateL\n+\n+                  when 'L' =>\n+                     Ptr := Ptr + 1;\n+                     Elab_Info_Messages := False;\n+\n                   --  -gnatem (mapping file)\n \n                   when 'm' =>"}, {"sha": "575b1aad634a4cbe1260c767695f79afb879988f", "filename": "gcc/ada/switch-m.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2194dfff5f72512520193c39566b875f0a3ae7/gcc%2Fada%2Fswitch-m.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2194dfff5f72512520193c39566b875f0a3ae7/gcc%2Fada%2Fswitch-m.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-m.adb?ref=fe2194dfff5f72512520193c39566b875f0a3ae7", "patch": "@@ -331,6 +331,7 @@ package body Switch.M is\n                            when 'i' | 'I' =>\n                               declare\n                                  First : constant Positive := Ptr;\n+\n                               begin\n                                  Ptr := Ptr + 1;\n \n@@ -354,6 +355,14 @@ package body Switch.M is\n                                       First_Stored + Ptr - First));\n                               end;\n \n+                           when 'l' =>\n+                              Ptr := Ptr + 1;\n+                              Add_Switch_Component (\"-gnatel\");\n+\n+                           when 'L' =>\n+                              Ptr := Ptr + 1;\n+                              Add_Switch_Component (\"-gnateL\");\n+\n                            when 'p' =>\n                               Ptr := Ptr + 1;\n "}, {"sha": "d8d7f45342e7eb3ab5ddb94ea3c1df791df22acc", "filename": "gcc/ada/ug_words", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2194dfff5f72512520193c39566b875f0a3ae7/gcc%2Fada%2Fug_words", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2194dfff5f72512520193c39566b875f0a3ae7/gcc%2Fada%2Fug_words", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fug_words?ref=fe2194dfff5f72512520193c39566b875f0a3ae7", "patch": "@@ -68,6 +68,8 @@ gcc -c          ^ GNAT COMPILE\n -gnateG         ^ /GENERATE_PROCESSED_SOURCE\n -gnatei         ^ /MAX_INSTANTIATIONS=\n -gnateI         ^ /MULTI_UNIT_INDEX=\n+-gnatel         ^ /ELABORATION_INFO_MESSAGES\n+-gnateL         ^ /NOELABORATION_INFO_MESSAGES\n -gnatem         ^ /MAPPING_FILE\n -gnatep         ^ /DATA_PREPROCESSING\n -gnateP         ^ /CATEGORIZATION_WARNINGS"}, {"sha": "79aa648c636bb179ad326ea9da18b537091bfa13", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2194dfff5f72512520193c39566b875f0a3ae7/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2194dfff5f72512520193c39566b875f0a3ae7/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=fe2194dfff5f72512520193c39566b875f0a3ae7", "patch": "@@ -218,6 +218,16 @@ begin\n    Write_Switch_Char (\"eInn\");\n    Write_Line (\"Index in multi-unit source, e.g. -gnateI2\");\n \n+   --  Line for -gnatel switch\n+\n+   Write_Switch_Char (\"el\");\n+   Write_Line (\"Turn on info messages on generated Elaborate[_All] pragmas\");\n+\n+   --  Line for -gnateL switch\n+\n+   Write_Switch_Char (\"eL\");\n+   Write_Line (\"Turn off info messages on generated Elaborate[_All] pragmas\");\n+\n    --  Line for -gnatem switch\n \n    Write_Switch_Char (\"em=?\");\n@@ -512,10 +522,8 @@ begin\n    Write_Line (\"        K*   turn off warnings on constant variable\");\n    Write_Line (\"        .k   turn on warnings for standard redefinition\");\n    Write_Line (\"        .K*  turn off warnings for standard redefinition\");\n-   Write_Line (\"        l    turn on warnings for missing \" &\n-                                                  \"elaboration pragma\");\n-   Write_Line (\"        L*   turn off warnings for missing \" &\n-                                                  \"elaboration pragma\");\n+   Write_Line (\"        l    turn on warnings for elaboration problems\");\n+   Write_Line (\"        L*   turn off warnings for elaboration problems\");\n    Write_Line (\"        .l   turn on info messages for inherited aspects\");\n    Write_Line (\"        .L*  turn off info messages for inherited aspects\");\n    Write_Line (\"        m+   turn on warnings for variable assigned \" &"}, {"sha": "f28b9bf07323045b0bf9354d016119f1939c0a08", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2194dfff5f72512520193c39566b875f0a3ae7/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2194dfff5f72512520193c39566b875f0a3ae7/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=fe2194dfff5f72512520193c39566b875f0a3ae7", "patch": "@@ -1,7 +1,7 @@\n ------------------------------------------------------------------------------\n --                                                                          --\n --                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n+--                                                                         --\n --                             V M S _ D A T A                              --\n --                                                                          --\n --                                 S p e c                                  --\n@@ -1570,7 +1570,20 @@ package VMS_Data is\n \n    S_GCC_DistX   : aliased constant S := \"/NODISTRIBUTION_STUBS \"          &\n                                             \"!-gnatzr,!-gnatzc\";\n-   --  NODOC (see /DISTRIBUTION_STUBS)\n+   --  NODISTRIBUTION_STUBS (see /DISTRIBUTION_STUBS)\n+\n+   S_GCC_ElabI   : aliased constant S := \"/ELABORATION_INFO_MESSAGES \"     &\n+                                            \"-gnatel\";\n+   --  ELABORATION_INFO_MESSAGES\n+   --\n+   --  Causes the compiler to output INFO messages that show where implicit\n+   --  Elaborate and Elaborate_All pragmas are added when using the static\n+   --  elaboration model. Used to diagnose binder circularities when this\n+   --  elaboration model is used.\n+\n+   S_GCC_NoElabI : aliased constant S := \"/NOELABORATION_INFO_MESSAGES \"     &\n+                                            \"-gnateL\";\n+   --  Turns off elaboration info messages (see ELABORATION_INFO_MESSAGES)\n \n    S_GCC_Error   : aliased constant S := \"/ERROR_LIMIT=#\"                  &\n                                             \"-gnatm#\";\n@@ -3822,6 +3835,7 @@ package VMS_Data is\n                      S_GCC_DisAtom 'Access,\n                      S_GCC_Dist    'Access,\n                      S_GCC_DistX   'Access,\n+                     S_GCC_ElabI   'Access,\n                      S_GCC_Error   'Access,\n                      S_GCC_ErrorX  'Access,\n                      S_GCC_Expand  'Access,\n@@ -3857,6 +3871,7 @@ package VMS_Data is\n                      S_GCC_Mess    'Access,\n                      S_GCC_Nesting 'Access,\n                      S_GCC_Noadc   'Access,\n+                     S_GCC_NoElabI 'Access,\n                      S_GCC_Noload  'Access,\n                      S_GCC_Nostinc 'Access,\n                      S_GCC_Nostlib 'Access,"}, {"sha": "5cb12ad860c795c51c695ba0118a26348ac4d2ba", "filename": "gcc/ada/warnsw.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2194dfff5f72512520193c39566b875f0a3ae7/gcc%2Fada%2Fwarnsw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2194dfff5f72512520193c39566b875f0a3ae7/gcc%2Fada%2Fwarnsw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.adb?ref=fe2194dfff5f72512520193c39566b875f0a3ae7", "patch": "@@ -47,6 +47,8 @@ package body Warnsw is\n         W.Constant_Condition_Warnings;\n       Elab_Warnings                       :=\n         W.Elab_Warnings;\n+      Elab_Info_Messages                  :=\n+        W.Elab_Info_Messages;\n       Implementation_Unit_Warnings        :=\n         W.Implementation_Unit_Warnings;\n       Ineffective_Inline_Warnings         :=\n@@ -141,6 +143,8 @@ package body Warnsw is\n         Check_Withs;\n       W.Constant_Condition_Warnings         :=\n         Constant_Condition_Warnings;\n+      W.Elab_Info_Messages                  :=\n+        Elab_Info_Messages;\n       W.Elab_Warnings                       :=\n         Elab_Warnings;\n       W.Implementation_Unit_Warnings        :="}, {"sha": "fd6027b6e9ec5744dfc791f3b38a5538a8f85cbb", "filename": "gcc/ada/warnsw.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2194dfff5f72512520193c39566b875f0a3ae7/gcc%2Fada%2Fwarnsw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2194dfff5f72512520193c39566b875f0a3ae7/gcc%2Fada%2Fwarnsw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.ads?ref=fe2194dfff5f72512520193c39566b875f0a3ae7", "patch": "@@ -65,6 +65,7 @@ package Warnsw is\n       Check_Unreferenced_Formals          : Boolean;\n       Check_Withs                         : Boolean;\n       Constant_Condition_Warnings         : Boolean;\n+      Elab_Info_Messages                  : Boolean;\n       Elab_Warnings                       : Boolean;\n       Implementation_Unit_Warnings        : Boolean;\n       Ineffective_Inline_Warnings         : Boolean;"}]}