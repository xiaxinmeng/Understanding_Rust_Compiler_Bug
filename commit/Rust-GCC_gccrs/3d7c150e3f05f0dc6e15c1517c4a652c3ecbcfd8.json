{"sha": "3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q3YzE1MGUzZjA1ZjBkYzZlMTVjMTUxN2M0YTY1MmMzZWNiY2ZkOA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-07-05T04:05:45Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-07-05T04:05:45Z"}, "message": "Move from CPP to CXX.\n\n\n2003-07-04  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tMove from CPP to CXX.\n\t* include/bits/c++config: Move to GLIBCXX from GLIBCPP.\n\t* testsuite/Makefile.am: Same.\n\t* testsuite/Makefile.in: Regenerate.\n\t* po/Makefile.am: Same.\n\t* po/Makefile.in: Regenerate.\n\t* libsupc++/Makefile.am: Same.\n\t* libsupc++/Makefile.in: Regenerate.\n\t* libmath/Makefile.am: Same.\n\t* libmath/Makefile.in: Regenerate.\n\t* include/Makefile.am: Same.\n\t* include/Makefile.in: Regenerate.\n\t* src/Makefile.am: Same.\n\t* src/Makefile.in: Regenerate.\n\t* acconfig.h: Same.\n\t* configure.host: Same.\n\t* configure.in: Same.\n\t* configure: Regenerate.\n\t* acinclude.m4: Same.\n\t* aclocal.m4: Same.\n\t* src: Change all files in this directory.\n\t* testsuite: Same.\n\t* include: Same, standardize include guards.\n\t* config: Same.\n\t* libsupc++: Same.\n\nFrom-SVN: r68958", "tree": {"sha": "01daea8defdbdbfae1385af0f177ec7506e8ca8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01daea8defdbdbfae1385af0f177ec7506e8ca8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/comments", "author": null, "committer": null, "parents": [{"sha": "34cd5ae762a4ee023dafb062b1fd35d9e9d67cbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34cd5ae762a4ee023dafb062b1fd35d9e9d67cbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34cd5ae762a4ee023dafb062b1fd35d9e9d67cbe"}], "stats": {"total": 7426, "additions": 3741, "deletions": 3685}, "files": [{"sha": "d48c01486b2cdf6c11496bd942186bd11a8a7875", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -1,3 +1,31 @@\n+2003-07-04  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tMove from CPP to CXX.\n+\t* include/bits/c++config: Move to GLIBCXX from GLIBCPP.\n+\t* testsuite/Makefile.am: Same.\n+\t* testsuite/Makefile.in: Regenerate.\n+\t* po/Makefile.am: Same.\n+\t* po/Makefile.in: Regenerate.\t\n+\t* libsupc++/Makefile.am: Same.\n+\t* libsupc++/Makefile.in: Regenerate.\t\n+\t* libmath/Makefile.am: Same.\n+\t* libmath/Makefile.in: Regenerate.\t\n+\t* include/Makefile.am: Same.\n+\t* include/Makefile.in: Regenerate.\t\n+\t* src/Makefile.am: Same.\n+\t* src/Makefile.in: Regenerate.\t\n+\t* acconfig.h: Same.\n+\t* configure.host: Same.\n+\t* configure.in: Same.\n+\t* configure: Regenerate.\n+\t* acinclude.m4: Same.\n+\t* aclocal.m4: Same.\n+\t* src: Change all files in this directory.\n+\t* testsuite: Same.\n+\t* include: Same, standardize include guards.\n+\t* config: Same.\n+\t* libsupc++: Same.\n+\t\n 2003-07-04  Zack Weinberg  <zack@codesourcery.com>\n \n \t* testsuite/22_locale/collate/compare/wchar_t/2.cc"}, {"sha": "420322d051338af794162471b115b49e4978e8ee", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -96,8 +96,8 @@ FPOS_H = @FPOS_H@\n FPOS_INC_SRCDIR = @FPOS_INC_SRCDIR@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n-GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n-GLIBCPP_IS_CROSS_COMPILING = @GLIBCPP_IS_CROSS_COMPILING@\n+GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n+GLIBCXX_IS_CROSS_COMPILING = @GLIBCXX_IS_CROSS_COMPILING@\n LIBMATHOBJS = @LIBMATHOBJS@\n LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n@@ -127,18 +127,18 @@ baseline_dir = @baseline_dir@\n check_msgfmt = @check_msgfmt@\n enable_shared = @enable_shared@\n enable_static = @enable_static@\n-glibcpp_CXX = @glibcpp_CXX@\n-glibcpp_MOFILES = @glibcpp_MOFILES@\n-glibcpp_PCHFLAGS = @glibcpp_PCHFLAGS@\n-glibcpp_POFILES = @glibcpp_POFILES@\n-glibcpp_basedir = @glibcpp_basedir@\n-glibcpp_builddir = @glibcpp_builddir@\n-glibcpp_localedir = @glibcpp_localedir@\n-glibcpp_prefixdir = @glibcpp_prefixdir@\n-glibcpp_srcdir = @glibcpp_srcdir@\n-glibcpp_thread_h = @glibcpp_thread_h@\n-glibcpp_toolexecdir = @glibcpp_toolexecdir@\n-glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n+glibcxx_CXX = @glibcxx_CXX@\n+glibcxx_MOFILES = @glibcxx_MOFILES@\n+glibcxx_PCHFLAGS = @glibcxx_PCHFLAGS@\n+glibcxx_POFILES = @glibcxx_POFILES@\n+glibcxx_basedir = @glibcxx_basedir@\n+glibcxx_builddir = @glibcxx_builddir@\n+glibcxx_localedir = @glibcxx_localedir@\n+glibcxx_prefixdir = @glibcxx_prefixdir@\n+glibcxx_srcdir = @glibcxx_srcdir@\n+glibcxx_thread_h = @glibcxx_thread_h@\n+glibcxx_toolexecdir = @glibcxx_toolexecdir@\n+glibcxx_toolexeclibdir = @glibcxx_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n ifGNUmake = @ifGNUmake@\n libtool_VERSION = @libtool_VERSION@\n@@ -278,7 +278,7 @@ maintainer-clean-hdr:\n all-recursive install-data-recursive install-exec-recursive \\\n installdirs-recursive install-recursive uninstall-recursive install-info-recursive \\\n check-recursive installcheck-recursive info-recursive dvi-recursive:\n-\t@set fnord $$MAKEFLAGS; amf=$$2; \\\n+\t@set fnord $(MAKEFLAGS); amf=$$2; \\\n \tdot_seen=no; \\\n \ttarget=`echo $@ | sed s/-recursive//`; \\\n \tlist='$(SUBDIRS)'; for subdir in $$list; do \\\n@@ -298,7 +298,7 @@ check-recursive installcheck-recursive info-recursive dvi-recursive:\n \n mostlyclean-recursive clean-recursive distclean-recursive \\\n maintainer-clean-recursive:\n-\t@set fnord $$MAKEFLAGS; amf=$$2; \\\n+\t@set fnord $(MAKEFLAGS); amf=$$2; \\\n \tdot_seen=no; \\\n \trev=''; list='$(SUBDIRS)'; for subdir in $$list; do \\\n \t  rev=\"$$subdir $$rev\"; \\"}, {"sha": "b856b6ba8d3cfab6d2850a151287fbb1c5a6a753", "filename": "libstdc++-v3/acconfig.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facconfig.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -11,50 +11,50 @@\n #undef HAVE_STPCPY\n \n // Define if GCC supports weak symbols.\n-#undef _GLIBCPP_SUPPORTS_WEAK\n+#undef _GLIBCXX_SUPPORTS_WEAK\n \n // Include I/O support for 'long long' and 'unsigned long long'.\n-#undef _GLIBCPP_USE_LONG_LONG\n+#undef _GLIBCXX_USE_LONG_LONG\n \n // Define if C99 features such as lldiv_t, llabs, lldiv should be exposed.\n-#undef _GLIBCPP_USE_C99\n+#undef _GLIBCXX_USE_C99\n \n // Include support for 'long double'.\n-#undef _GLIBCPP_USE_LONG_DOUBLE\n+#undef _GLIBCXX_USE_LONG_DOUBLE\n \n // Include support for shadow headers, ie --enable-cshadow-headers.\n-#undef _GLIBCPP_USE_SHADOW_HEADERS\n+#undef _GLIBCXX_USE_SHADOW_HEADERS\n \n // Define if code specialized for wchar_t should be used.\n-#undef _GLIBCPP_USE_WCHAR_T\n+#undef _GLIBCXX_USE_WCHAR_T\n \n // Define if using setrlimit to limit memory usage during 'make check'.\n-#undef _GLIBCPP_MEM_LIMITS\n+#undef _GLIBCXX_MEM_LIMITS\n \n // Define to use concept checking code from the boost libraries.\n-#undef _GLIBCPP_CONCEPT_CHECKS\n+#undef _GLIBCXX_CONCEPT_CHECKS\n \n // Define if the atan2f function exists.\n-#undef _GLIBCPP_HAVE_ATAN2F \n+#undef _GLIBCXX_HAVE_ATAN2F \n \n // Define if the atan2l function exists.\n-#undef _GLIBCPP_HAVE_ATAN2L\n+#undef _GLIBCXX_HAVE_ATAN2L\n \n // Define if the copysignf function exists.\n-#undef _GLIBCPP_HAVE_COPYSIGNF\n+#undef _GLIBCXX_HAVE_COPYSIGNF\n \n // Define to use symbol versioning in the shared library.\n-#undef _GLIBCPP_SYMVER\n+#undef _GLIBCXX_SYMVER\n \n // Define symbol versioning in assember directives. If symbol\n // versioning is beigng used, and the assembler supports this kind of\n // thing, then use it.\n-// NB: _GLIBCPP_AT_AT is a hack to work around quoting issues in m4.\n-#if _GLIBCPP_SYMVER\n-  #define _GLIBCPP_ASM_SYMVER(cur, old, version) \\\n-   asm (\".symver \" #cur \",\" #old _GLIBCPP_AT_AT #version);\n+// NB: _GLIBCXX_AT_AT is a hack to work around quoting issues in m4.\n+#if _GLIBCXX_SYMVER\n+  #define _GLIBCXX_ASM_SYMVER(cur, old, version) \\\n+   asm (\".symver \" #cur \",\" #old _GLIBCXX_AT_AT #version);\n #else\n-  #define _GLIBCPP_ASM_SYMVER(cur, old, version)\n+  #define _GLIBCXX_ASM_SYMVER(cur, old, version)\n #endif\n \n // Define if gthr-default.h exists (meaning that threading support is enabled).\n@@ -154,7 +154,7 @@\n #undef HAVE_MODF\n \n // Define if NLS translations are to be used.\n-#undef _GLIBCPP_USE_NLS\n+#undef _GLIBCXX_USE_NLS\n \n // @BOTTOM@\n //"}, {"sha": "64c4d81387510c7ddb5c9773c9ac05dec812dfc0", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 355, "deletions": 355, "changes": 710, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -1,8 +1,8 @@\n dnl\n dnl Initialize basic configure bits, set toplevel_srcdir for Makefiles.\n dnl\n-dnl GLIBCPP_TOPREL_CONFIGURE\n-AC_DEFUN(GLIBCPP_TOPREL_CONFIGURE, [\n+dnl GLIBCXX_TOPREL_CONFIGURE\n+AC_DEFUN(GLIBCXX_TOPREL_CONFIGURE, [\n   dnl Default to --enable-multilib (this is also passed by default\n   dnl from the ubercommon-top-level configure)\n   AC_ARG_ENABLE(multilib,\n@@ -39,19 +39,19 @@ AC_DEFUN(GLIBCPP_TOPREL_CONFIGURE, [\n dnl\n dnl Initialize the rest of the library configury.\n dnl\n-dnl GLIBCPP_CONFIGURE\n-AC_DEFUN(GLIBCPP_CONFIGURE, [\n+dnl GLIBCXX_CONFIGURE\n+AC_DEFUN(GLIBCXX_CONFIGURE, [\n   # Export build and source directories.\n   # These need to be absolute paths, yet at the same time need to\n   # canonicalize only relative paths, because then amd will not unmount\n   # drives. Thus the use of PWDCMD: set it to 'pawd' or 'amq -w' if using amd.\n-  glibcpp_builddir=`${PWDCMD-pwd}`\n+  glibcxx_builddir=`${PWDCMD-pwd}`\n   case $srcdir in\n-  [\\\\/$]* | ?:[\\\\/]*) glibcpp_srcdir=${srcdir} ;;\n-  *) glibcpp_srcdir=`cd \"$srcdir\" && ${PWDCMD-pwd} || echo \"$srcdir\"` ;;\n+  [\\\\/$]* | ?:[\\\\/]*) glibcxx_srcdir=${srcdir} ;;\n+  *) glibcxx_srcdir=`cd \"$srcdir\" && ${PWDCMD-pwd} || echo \"$srcdir\"` ;;\n   esac\n-  AC_SUBST(glibcpp_builddir)\n-  AC_SUBST(glibcpp_srcdir)\n+  AC_SUBST(glibcxx_builddir)\n+  AC_SUBST(glibcxx_srcdir)\n \n   dnl This is here just to satisfy automake.\n   ifelse(not,equal,[AC_CONFIG_AUX_DIR(..)])\n@@ -73,8 +73,8 @@ AC_DEFUN(GLIBCPP_CONFIGURE, [\n   AC_ARG_WITH(newlib,\n   [  --with-newlib                    Configuring with newlib])\n \n-  glibcpp_basedir=$srcdir/$toprel/$1/libstdc++-v3\n-  AC_SUBST(glibcpp_basedir)\n+  glibcxx_basedir=$srcdir/$toprel/$1/libstdc++-v3\n+  AC_SUBST(glibcxx_basedir)\n \n   # Never versions of autoconf add an underscore to these functions.\n   # Prevent future problems ...\n@@ -131,15 +131,15 @@ AC_DEFUN(GLIBCPP_CONFIGURE, [\n   [AC_BEFORE([$0], [AC_PROG_CXXCPP])dnl\n   dnl Fool anybody using AC_PROG_CXX.\n   AC_PROVIDE([AC_PROG_CXX])\n-  # Use glibcpp_CXX so that we do not cause CXX to be cached with the\n+  # Use glibcxx_CXX so that we do not cause CXX to be cached with the\n   # flags that come in CXX while configuring libstdc++.  They're different\n   # from those used for all other target libraries.  If CXX is set in\n   # the environment, respect that here.\n-  glibcpp_CXX=$CXX\n-  AC_CHECK_PROGS(glibcpp_CXX, $CCC c++ g++ gcc CC cxx cc++, gcc)\n-  AC_SUBST(glibcpp_CXX)\n-  CXX=$glibcpp_CXX\n-  test -z \"$glibcpp_CXX\" && AC_MSG_ERROR([no acceptable c++ found in \\$PATH])\n+  glibcxx_CXX=$CXX\n+  AC_CHECK_PROGS(glibcxx_CXX, $CCC c++ g++ gcc CC cxx cc++, gcc)\n+  AC_SUBST(glibcxx_CXX)\n+  CXX=$glibcxx_CXX\n+  test -z \"$glibcxx_CXX\" && AC_MSG_ERROR([no acceptable c++ found in \\$PATH])\n \n   AC_PROG_CXX_GNU\n \n@@ -169,7 +169,7 @@ AC_DEFUN(GLIBCPP_CONFIGURE, [\n \n   # For directory versioning (e.g., headers) and other variables.\n   AC_MSG_CHECKING([for GCC version number])\n-  gcc_version=`$glibcpp_CXX -dumpversion`\n+  gcc_version=`$glibcxx_CXX -dumpversion`\n   AC_MSG_RESULT($gcc_version)\n \n   # For some reason, gettext needs this.\n@@ -197,33 +197,33 @@ AC_DEFUN(GLIBCPP_CONFIGURE, [\n     AC_EXEEXT\n   fi\n \n-  case [$]{glibcpp_basedir} in\n-    /* | [A-Za-z]:[\\\\/]*) libgcj_flagbasedir=[$]{glibcpp_basedir} ;;\n-    *) glibcpp_flagbasedir='[$](top_builddir)/'[$]{glibcpp_basedir} ;;\n+  case [$]{glibcxx_basedir} in\n+    /* | [A-Za-z]:[\\\\/]*) libgcj_flagbasedir=[$]{glibcxx_basedir} ;;\n+    *) glibcxx_flagbasedir='[$](top_builddir)/'[$]{glibcxx_basedir} ;;\n   esac\n \n   # Set up safe default values for all subsequent AM_CONDITIONAL tests.\n   need_libmath=no\n   enable_wchar_t=no\n   #enable_debug=no\n-  #glibcpp_pch_comp=no\n+  #glibcxx_pch_comp=no\n   #enable_cheaders=c\n   #c_compatibility=no\n   #enable_abi_check=no\n   #enable_symvers=no\n \n   # Find platform-specific directories containing configuration info.  In\n   # addition to possibly modifying the same flags, it also sets up symlinks.\n-  GLIBCPP_CHECK_HOST\n+  GLIBCXX_CHECK_HOST\n ])\n \n \n dnl\n dnl Check to see if g++ can compile this library, and if so, if any version-\n dnl specific precautions need to be taken.\n dnl\n-dnl GLIBCPP_CHECK_COMPILER_VERSION\n-AC_DEFUN(GLIBCPP_CHECK_COMPILER_VERSION, [\n+dnl GLIBCXX_CHECK_COMPILER_VERSION\n+AC_DEFUN(GLIBCXX_CHECK_COMPILER_VERSION, [\n if test ! -f stamp-sanity-compiler; then\n   AC_MSG_CHECKING([for g++ that will successfully compile libstdc++-v3])\n   AC_LANG_SAVE\n@@ -252,11 +252,11 @@ dnl\n dnl Define SECTION_FLAGS='-ffunction-sections -fdata-sections' if\n dnl compiler supports it and the user has not requested debug mode.\n dnl\n-dnl GLIBCPP_CHECK_COMPILER_FEATURES\n-AC_DEFUN(GLIBCPP_CHECK_COMPILER_FEATURES, [\n+dnl GLIBCXX_CHECK_COMPILER_FEATURES\n+AC_DEFUN(GLIBCXX_CHECK_COMPILER_FEATURES, [\n   # All these tests are for C++; save the language and the compiler flags.\n   # The CXXFLAGS thing is suspicious, but based on similar bits previously\n-  # found in GLIBCPP_CONFIGURE.\n+  # found in GLIBCXX_CONFIGURE.\n   AC_LANG_SAVE\n   AC_LANG_CPLUSPLUS\n   ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n@@ -298,11 +298,11 @@ dnl safe (like an empty string).\n dnl\n dnl Define SECTION_LDFLAGS='-Wl,--gc-sections' if possible.\n dnl Define OPT_LDFLAGS='-Wl,-O1' if possible.\n-dnl Define LD, with_gnu_ld, and (possibly) glibcpp_gnu_ld_version as\n+dnl Define LD, with_gnu_ld, and (possibly) glibcxx_gnu_ld_version as\n dnl side-effects of testing.\n dnl\n-dnl GLIBCPP_CHECK_LINKER_FEATURES\n-AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n+dnl GLIBCXX_CHECK_LINKER_FEATURES\n+AC_DEFUN(GLIBCXX_CHECK_LINKER_FEATURES, [\n   # If we're not using GNU ld, then there's no point in even trying these\n   # tests.  Check for that first.  We should have already tested for gld\n   # by now (in libtool), but require it now just to be safe...\n@@ -331,7 +331,7 @@ AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n   ldver=`$LD --version 2>/dev/null | head -1 | \\\n          sed -e 's/GNU ld version \\([0-9.][0-9.]*\\).*/\\1/'`\n   changequote([,])\n-  glibcpp_gnu_ld_version=`echo $ldver | \\\n+  glibcxx_gnu_ld_version=`echo $ldver | \\\n          $AWK -F. '{ if (NF<3) [$]3=0; print ([$]1*100+[$]2)*100+[$]3 }'`\n \n   # Set --gc-sections.\n@@ -387,11 +387,11 @@ dnl Check to see if the (math function) argument passed is\n dnl declared when using the c++ compiler\n dnl ASSUMES argument is a math function with ONE parameter\n dnl\n-dnl GLIBCPP_CHECK_MATH_DECL_1\n-AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_1, [\n+dnl GLIBCXX_CHECK_MATH_DECL_1\n+AC_DEFUN(GLIBCXX_CHECK_MATH_DECL_1, [\n   AC_MSG_CHECKING([for $1 declaration])\n-  if test x${glibcpp_cv_func_$1_use+set} != xset; then\n-    AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+  if test x${glibcxx_cv_func_$1_use+set} != xset; then\n+    AC_CACHE_VAL(glibcxx_cv_func_$1_use, [\n       AC_LANG_SAVE\n       AC_LANG_CPLUSPLUS\n       AC_TRY_COMPILE([#include <math.h>\n@@ -400,11 +400,11 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_1, [\n \t\t      #endif\n \t\t     ],\n                      [ $1(0);],\n-                     [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+                     [glibcxx_cv_func_$1_use=yes], [glibcxx_cv_func_$1_use=no])\n       AC_LANG_RESTORE\n     ])\n   fi\n-  AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n+  AC_MSG_RESULT($glibcxx_cv_func_$1_use)\n ])\n \n dnl\n@@ -419,37 +419,37 @@ dnl argument 1 is name of function to check\n dnl\n dnl ASSUMES argument is a math function with ONE parameter\n dnl\n-dnl GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1\n-AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1, [\n-  GLIBCPP_CHECK_MATH_DECL_1($1)\n-  if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n+dnl GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1\n+AC_DEFUN(GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1, [\n+  GLIBCXX_CHECK_MATH_DECL_1($1)\n+  if test x$glibcxx_cv_func_$1_use = x\"yes\"; then\n     AC_CHECK_FUNCS($1)\n   else\n-    GLIBCPP_CHECK_MATH_DECL_1(_$1)\n-    if test x$glibcpp_cv_func__$1_use = x\"yes\"; then\n+    GLIBCXX_CHECK_MATH_DECL_1(_$1)\n+    if test x$glibcxx_cv_func__$1_use = x\"yes\"; then\n       AC_CHECK_FUNCS(_$1)\n     fi\n   fi\n ])\n \n \n dnl\n-dnl Like GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1, but does a bunch of\n+dnl Like GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1, but does a bunch of\n dnl of functions at once.  It's an all-or-nothing check -- either\n dnl HAVE_XYZ is defined for each of the functions, or for none of them.\n dnl Doing it this way saves significant configure time.\n-AC_DEFUN(GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1, [\n+AC_DEFUN(GLIBCXX_CHECK_MATH_DECLS_AND_LINKAGES_1, [\n   AC_MSG_CHECKING([for $1 functions])\n-  AC_CACHE_VAL(glibcpp_cv_func_$2_use, [\n+  AC_CACHE_VAL(glibcxx_cv_func_$2_use, [\n     AC_LANG_SAVE\n     AC_LANG_CPLUSPLUS\n     AC_TRY_COMPILE([#include <math.h>],\n                    [ `for x in $3; do echo \"$x (0);\"; done` ],\n-                   [glibcpp_cv_func_$2_use=yes],\n-                   [glibcpp_cv_func_$2_use=no])\n+                   [glibcxx_cv_func_$2_use=yes],\n+                   [glibcxx_cv_func_$2_use=no])\n     AC_LANG_RESTORE])\n-  AC_MSG_RESULT($glibcpp_cv_func_$2_use)\n-  if test x$glibcpp_cv_func_$2_use = x\"yes\"; then\n+  AC_MSG_RESULT($glibcxx_cv_func_$2_use)\n+  if test x$glibcxx_cv_func_$2_use = x\"yes\"; then\n     AC_CHECK_FUNCS($3)\n   fi\n ])\n@@ -459,20 +459,20 @@ dnl Check to see if the (math function) argument passed is\n dnl declared when using the c++ compiler\n dnl ASSUMES argument is a math function with TWO parameters\n dnl\n-dnl GLIBCPP_CHECK_MATH_DECL_2\n-AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_2, [\n+dnl GLIBCXX_CHECK_MATH_DECL_2\n+AC_DEFUN(GLIBCXX_CHECK_MATH_DECL_2, [\n   AC_MSG_CHECKING([for $1 declaration])\n-  if test x${glibcpp_cv_func_$1_use+set} != xset; then\n-    AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+  if test x${glibcxx_cv_func_$1_use+set} != xset; then\n+    AC_CACHE_VAL(glibcxx_cv_func_$1_use, [\n       AC_LANG_SAVE\n       AC_LANG_CPLUSPLUS\n       AC_TRY_COMPILE([#include <math.h>],\n                      [ $1(0, 0);],\n-                     [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+                     [glibcxx_cv_func_$1_use=yes], [glibcxx_cv_func_$1_use=no])\n       AC_LANG_RESTORE\n     ])\n   fi\n-  AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n+  AC_MSG_RESULT($glibcxx_cv_func_$1_use)\n ])\n \n dnl\n@@ -486,14 +486,14 @@ dnl argument 1 is name of function to check\n dnl\n dnl ASSUMES argument is a math function with TWO parameters\n dnl\n-dnl GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2\n-AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2, [\n-  GLIBCPP_CHECK_MATH_DECL_2($1)\n-  if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n+dnl GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2\n+AC_DEFUN(GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2, [\n+  GLIBCXX_CHECK_MATH_DECL_2($1)\n+  if test x$glibcxx_cv_func_$1_use = x\"yes\"; then\n     AC_CHECK_FUNCS($1)\n   else\n-    GLIBCPP_CHECK_MATH_DECL_2(_$1)\n-    if test x$glibcpp_cv_func__$1_use = x\"yes\"; then\n+    GLIBCXX_CHECK_MATH_DECL_2(_$1)\n+    if test x$glibcxx_cv_func__$1_use = x\"yes\"; then\n       AC_CHECK_FUNCS(_$1)\n     fi\n   fi\n@@ -505,20 +505,20 @@ dnl Check to see if the (math function) argument passed is\n dnl declared when using the c++ compiler\n dnl ASSUMES argument is a math function with THREE parameters\n dnl\n-dnl GLIBCPP_CHECK_MATH_DECL_3\n-AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_3, [\n+dnl GLIBCXX_CHECK_MATH_DECL_3\n+AC_DEFUN(GLIBCXX_CHECK_MATH_DECL_3, [\n   AC_MSG_CHECKING([for $1 declaration])\n-  if test x${glibcpp_cv_func_$1_use+set} != xset; then\n-    AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+  if test x${glibcxx_cv_func_$1_use+set} != xset; then\n+    AC_CACHE_VAL(glibcxx_cv_func_$1_use, [\n       AC_LANG_SAVE\n       AC_LANG_CPLUSPLUS\n       AC_TRY_COMPILE([#include <math.h>],\n                      [ $1(0, 0, 0);],\n-                     [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+                     [glibcxx_cv_func_$1_use=yes], [glibcxx_cv_func_$1_use=no])\n       AC_LANG_RESTORE\n     ])\n   fi\n-  AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n+  AC_MSG_RESULT($glibcxx_cv_func_$1_use)\n ])\n \n dnl\n@@ -532,14 +532,14 @@ dnl argument 1 is name of function to check\n dnl\n dnl ASSUMES argument is a math function with THREE parameters\n dnl\n-dnl GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3\n-AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3, [\n-  GLIBCPP_CHECK_MATH_DECL_3($1)\n-  if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n+dnl GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_3\n+AC_DEFUN(GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_3, [\n+  GLIBCXX_CHECK_MATH_DECL_3($1)\n+  if test x$glibcxx_cv_func_$1_use = x\"yes\"; then\n     AC_CHECK_FUNCS($1)\n   else\n-    GLIBCPP_CHECK_MATH_DECL_3(_$1)\n-    if test x$glibcpp_cv_func__$1_use = x\"yes\"; then\n+    GLIBCXX_CHECK_MATH_DECL_3(_$1)\n+    if test x$glibcxx_cv_func__$1_use = x\"yes\"; then\n       AC_CHECK_FUNCS(_$1)\n     fi\n   fi\n@@ -555,21 +555,21 @@ dnl argument 1 is name of function to check\n dnl\n dnl ASSUMES argument is a math function with TWO parameters\n dnl\n-dnl GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_2\n-AC_DEFUN(GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_2, [\n+dnl GLIBCXX_CHECK_STDLIB_DECL_AND_LINKAGE_2\n+AC_DEFUN(GLIBCXX_CHECK_STDLIB_DECL_AND_LINKAGE_2, [\n   AC_MSG_CHECKING([for $1 declaration])\n-  if test x${glibcpp_cv_func_$1_use+set} != xset; then\n-    AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+  if test x${glibcxx_cv_func_$1_use+set} != xset; then\n+    AC_CACHE_VAL(glibcxx_cv_func_$1_use, [\n       AC_LANG_SAVE\n       AC_LANG_CPLUSPLUS\n       AC_TRY_COMPILE([#include <stdlib.h>],\n                      [ $1(0, 0);],\n-                     [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+                     [glibcxx_cv_func_$1_use=yes], [glibcxx_cv_func_$1_use=no])\n       AC_LANG_RESTORE\n     ])\n   fi\n-  AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n-  if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n+  AC_MSG_RESULT($glibcxx_cv_func_$1_use)\n+  if test x$glibcxx_cv_func_$1_use = x\"yes\"; then\n     AC_CHECK_FUNCS($1)\n   fi\n ])\n@@ -584,21 +584,21 @@ dnl argument 1 is name of function to check\n dnl\n dnl ASSUMES argument is a function with THREE parameters\n dnl\n-dnl GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_3\n-AC_DEFUN(GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_3, [\n+dnl GLIBCXX_CHECK_STDLIB_DECL_AND_LINKAGE_3\n+AC_DEFUN(GLIBCXX_CHECK_STDLIB_DECL_AND_LINKAGE_3, [\n   AC_MSG_CHECKING([for $1 declaration])\n-  if test x${glibcpp_cv_func_$1_use+set} != xset; then\n-    AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+  if test x${glibcxx_cv_func_$1_use+set} != xset; then\n+    AC_CACHE_VAL(glibcxx_cv_func_$1_use, [\n       AC_LANG_SAVE\n       AC_LANG_CPLUSPLUS\n       AC_TRY_COMPILE([#include <stdlib.h>],\n                      [ $1(0, 0, 0);],\n-                     [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+                     [glibcxx_cv_func_$1_use=yes], [glibcxx_cv_func_$1_use=no])\n       AC_LANG_RESTORE\n     ])\n   fi\n-  AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n-  if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n+  AC_MSG_RESULT($glibcxx_cv_func_$1_use)\n+  if test x$glibcxx_cv_func_$1_use = x\"yes\"; then\n     AC_CHECK_FUNCS($1)\n   fi\n ])\n@@ -616,31 +616,31 @@ dnl argument 1 is name of function to check\n dnl\n dnl ASSUMES argument is a math function with ONE parameter\n dnl\n-dnl GLIBCPP_CHECK_BUILTIN_MATH_DECL_LINKAGE_1\n-AC_DEFUN(GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1, [\n+dnl GLIBCXX_CHECK_BUILTIN_MATH_DECL_LINKAGE_1\n+AC_DEFUN(GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1, [\n   AC_MSG_CHECKING([for $1 declaration])\n-  if test x${glibcpp_cv_func_$1_use+set} != xset; then\n-    AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+  if test x${glibcxx_cv_func_$1_use+set} != xset; then\n+    AC_CACHE_VAL(glibcxx_cv_func_$1_use, [\n       AC_LANG_SAVE\n       AC_LANG_CPLUSPLUS\n       AC_TRY_COMPILE([#include <math.h>],\n                      [ $1(0);],\n-                     [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+                     [glibcxx_cv_func_$1_use=yes], [glibcxx_cv_func_$1_use=no])\n       AC_LANG_RESTORE\n     ])\n   fi\n-  AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n-  if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n+  AC_MSG_RESULT($glibcxx_cv_func_$1_use)\n+  if test x$glibcxx_cv_func_$1_use = x\"yes\"; then\n     AC_MSG_CHECKING([for $1 linkage])\n-    if test x${glibcpp_cv_func_$1_link+set} != xset; then\n-      AC_CACHE_VAL(glibcpp_cv_func_$1_link, [\n+    if test x${glibcxx_cv_func_$1_link+set} != xset; then\n+      AC_CACHE_VAL(glibcxx_cv_func_$1_link, [\n         AC_TRY_LINK([#include <math.h>],\n                     [ $1(0);],\n-                    [glibcpp_cv_func_$1_link=yes], [glibcpp_cv_func_$1_link=no])\n+                    [glibcxx_cv_func_$1_link=yes], [glibcxx_cv_func_$1_link=no])\n       ])\n     fi\n-    AC_MSG_RESULT($glibcpp_cv_func_$1_link)\n-    if test x$glibcpp_cv_func_$1_link = x\"yes\"; then\n+    AC_MSG_RESULT($glibcxx_cv_func_$1_link)\n+    if test x$glibcxx_cv_func_$1_link = x\"yes\"; then\n       ac_tr_func=HAVE_`echo $1 | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`\n       AC_DEFINE_UNQUOTED(${ac_tr_func})\n     fi\n@@ -666,27 +666,27 @@ dnl check for __builtin_cosf\n dnl check for __builtin_cos\n dnl check for __builtin_cosl\n dnl\n-dnl GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT\n-AC_DEFUN(GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT, [\n+dnl GLIBCXX_CHECK_BUILTIN_MATH_SUPPORT\n+AC_DEFUN(GLIBCXX_CHECK_BUILTIN_MATH_SUPPORT, [\n   dnl Test for builtin math functions.\n   dnl These are made in gcc/c-common.c\n-  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_abs)\n-  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_fabsf)\n-  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_fabs)\n-  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_fabsl)\n-  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_labs)\n+  GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_abs)\n+  GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_fabsf)\n+  GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_fabs)\n+  GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_fabsl)\n+  GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_labs)\n \n-  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sqrtf)\n-  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sqrt)\n-  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sqrtl)\n+  GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sqrtf)\n+  GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sqrt)\n+  GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sqrtl)\n \n-  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sinf)\n-  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sin)\n-  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sinl)\n+  GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sinf)\n+  GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sin)\n+  GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sinl)\n \n-  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_cosf)\n-  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_cos)\n-  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_cosl)\n+  GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_cosf)\n+  GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_cos)\n+  GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_cosl)\n \n   dnl There is, without a doubt, a more elegant way to have these\n   dnl names exported so that they won't be stripped out of acconfig.h by\n@@ -724,14 +724,14 @@ dnl Define HAVE_STRTOLD if \"strtold\" is declared and links\n dnl Define HAVE_STRTOF if \"strtof\" is declared and links\n dnl Define HAVE_DRAND48 if \"drand48\" is declared and links\n dnl\n-dnl GLIBCPP_CHECK_STDLIB_SUPPORT\n-AC_DEFUN(GLIBCPP_CHECK_STDLIB_SUPPORT, [\n+dnl GLIBCXX_CHECK_STDLIB_SUPPORT\n+AC_DEFUN(GLIBCXX_CHECK_STDLIB_SUPPORT, [\n   ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n   ac_save_CXXFLAGS=\"$CXXFLAGS\"\n   CXXFLAGS='-fno-builtin -D_GNU_SOURCE'\n \n-  GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_2(strtold)\n-  GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_2(strtof)\n+  GLIBCXX_CHECK_STDLIB_DECL_AND_LINKAGE_2(strtold)\n+  GLIBCXX_CHECK_STDLIB_DECL_AND_LINKAGE_2(strtof)\n   AC_CHECK_FUNCS(drand48)\n \n   CXXFLAGS=\"$ac_save_CXXFLAGS\"\n@@ -746,8 +746,8 @@ dnl This might seem like overkill but experience has shown that it's not...\n dnl\n dnl Define HAVE_CARGF etc if \"cargf\" is found.\n dnl\n-dnl GLIBCPP_CHECK_MATH_SUPPORT\n-AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n+dnl GLIBCXX_CHECK_MATH_SUPPORT\n+AC_DEFUN(GLIBCXX_CHECK_MATH_SUPPORT, [\n   ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n   ac_save_CXXFLAGS=\"$CXXFLAGS\"\n   CXXFLAGS='-fno-builtin -D_GNU_SOURCE'\n@@ -758,90 +758,90 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n   LIBS=\"$LIBS $libm\"\n \n   dnl Check to see if certain C math functions exist.\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isinf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isnan)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(finite)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(copysign)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3(sincos)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(fpclass)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(qfpclass)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(hypot)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(isinf)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(isnan)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(finite)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(copysign)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_3(sincos)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(fpclass)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(qfpclass)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(hypot)\n \n   dnl Check to see if basic C math functions have float versions.\n-  GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(float trig,\n+  GLIBCXX_CHECK_MATH_DECLS_AND_LINKAGES_1(float trig,\n                                           float_trig,\n                                           acosf asinf atanf \\\n                                           cosf sinf tanf \\\n                                           coshf sinhf tanhf)\n-  GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(float round,\n+  GLIBCXX_CHECK_MATH_DECLS_AND_LINKAGES_1(float round,\n                                           float_round,\n                                           ceilf floorf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(expf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isnanf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isinff)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(atan2f)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(fabsf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(fmodf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(frexpf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(hypotf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(ldexpf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(logf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(log10f)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(modff)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(powf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(sqrtf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3(sincosf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(finitef)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(expf)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(isnanf)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(isinff)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(atan2f)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(fabsf)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(fmodf)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(frexpf)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(hypotf)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(ldexpf)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(logf)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(log10f)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(modff)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(powf)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(sqrtf)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_3(sincosf)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(finitef)\n \n   dnl Check to see if basic C math functions have long double versions.\n-  GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(long double trig,\n+  GLIBCXX_CHECK_MATH_DECLS_AND_LINKAGES_1(long double trig,\n                                           long_double_trig,\n                                           acosl asinl atanl \\\n                                           cosl sinl tanl \\\n                                           coshl sinhl tanhl)\n-  GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(long double round,\n+  GLIBCXX_CHECK_MATH_DECLS_AND_LINKAGES_1(long double round,\n                                           long_double_round,\n                                           ceill floorl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isnanl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isinfl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(copysignl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(atan2l)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(expl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(fabsl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(fmodl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(frexpl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(hypotl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(ldexpl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(logl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(log10l)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(modfl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(powl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(sqrtl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3(sincosl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(finitel)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(isnanl)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(isinfl)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(copysignl)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(atan2l)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(expl)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(fabsl)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(fmodl)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(frexpl)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(hypotl)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(ldexpl)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(logl)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(log10l)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(modfl)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(powl)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(sqrtl)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_3(sincosl)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(finitel)\n \n   dnl Some runtimes have these functions with a preceding underscore. Please\n   dnl keep this sync'd with the one above. And if you add any new symbol,\n   dnl please add the corresponding block in the @BOTTOM@ section of acconfig.h.\n   dnl Check to see if certain C math functions exist.\n \n   dnl Check to see if basic C math functions have float versions.\n-  GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(_float trig,\n+  GLIBCXX_CHECK_MATH_DECLS_AND_LINKAGES_1(_float trig,\n                                           _float_trig,\n                                           _acosf _asinf _atanf \\\n                                           _cosf _sinf _tanf \\\n                                           _coshf _sinhf _tanhf)\n-  GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(_float round,\n+  GLIBCXX_CHECK_MATH_DECLS_AND_LINKAGES_1(_float round,\n                                           _float_round,\n                                           _ceilf _floorf)\n \n   dnl Check to see if basic C math functions have long double versions.\n-  GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(_long double trig,\n+  GLIBCXX_CHECK_MATH_DECLS_AND_LINKAGES_1(_long double trig,\n                                           _long_double_trig,\n                                           _acosl _asinl _atanl \\\n                                           _cosl _sinl _tanl \\\n                                           _coshl _sinhl _tanhl)\n-  GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(_long double round,\n+  GLIBCXX_CHECK_MATH_DECLS_AND_LINKAGES_1(_long double round,\n                                           _long_double_round,\n                                           _ceill _floorl)\n \n@@ -857,8 +857,8 @@ dnl Don't compile bits in math/* if native support exits.\n dnl\n dnl Define USE_COMPLEX_LONG_DOUBLE etc if \"copysignl\" is found.\n dnl\n-dnl GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT\n-AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n+dnl GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n+AC_DEFUN(GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT, [\n   dnl Check for complex versions of math functions of platform.  This will\n   dnl always pass if libm is available, and fail if it isn't.  If it is\n   dnl available, we assume we'll need it later, so add it to LIBS.\n@@ -872,7 +872,7 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n   dnl Compile the long double complex functions only if the function\n   dnl provides the non-complex long double functions that are needed.\n   dnl Currently this includes copysignl, which should be\n-  dnl cached from the GLIBCPP_CHECK_MATH_SUPPORT macro, above.\n+  dnl cached from the GLIBCXX_CHECK_MATH_SUPPORT macro, above.\n   if test x$ac_cv_func_copysignl = x\"yes\"; then\n     AC_CHECK_FUNCS([__signbitl], , [LIBMATHOBJS=\"$LIBMATHOBJS signbitl.lo\"])\n   fi\n@@ -888,9 +888,9 @@ dnl Check to see what architecture and operating system we are compiling\n dnl for.  Also, if architecture- or OS-specific flags are required for\n dnl compilation, pick them up here.\n dnl\n-dnl GLIBCPP_CHECK_HOST\n-AC_DEFUN(GLIBCPP_CHECK_HOST, [\n-  . [$]{glibcpp_basedir}/configure.host\n+dnl GLIBCXX_CHECK_HOST\n+AC_DEFUN(GLIBCXX_CHECK_HOST, [\n+  . [$]{glibcxx_basedir}/configure.host\n   AC_MSG_RESULT(CPU config directory is $cpu_include_dir)\n   AC_MSG_RESULT(OS config directory is $os_include_dir)\n ])\n@@ -901,11 +901,11 @@ dnl Check to see if this target can enable the wchar_t parts of libstdc++.\n dnl If --disable-c-mbchar was given, no wchar_t stuff is enabled.  (This\n dnl must have been previously checked.)\n dnl\n-dnl Define _GLIBCPP_USE_WCHAR_T if all the bits are found\n+dnl Define _GLIBCXX_USE_WCHAR_T if all the bits are found\n dnl Define HAVE_MBSTATE_T if mbstate_t is not in wchar.h\n dnl\n-dnl GLIBCPP_CHECK_WCHAR_T_SUPPORT\n-AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n+dnl GLIBCXX_CHECK_WCHAR_T_SUPPORT\n+AC_DEFUN(GLIBCXX_CHECK_WCHAR_T_SUPPORT, [\n   dnl Wide characters disabled by default.\n \n   dnl Test wchar.h for mbstate_t, which is needed for char_traits and\n@@ -999,7 +999,7 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n     dnl above support is present.\n     if test x\"$ac_isoC99_wchar_t\" = xyes && \n \ttest x\"$ac_XPG2_wchar_t\" = xyes; then\n-      AC_DEFINE(_GLIBCPP_USE_WCHAR_T)\n+      AC_DEFINE(_GLIBCXX_USE_WCHAR_T)\n       enable_wchar_t=yes\n     fi\n   fi\n@@ -1011,7 +1011,7 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n dnl\n dnl Check to see if debugging libraries are to be built.\n dnl\n-dnl GLIBCPP_ENABLE_DEBUG\n+dnl GLIBCXX_ENABLE_DEBUG\n dnl\n dnl --enable-libstdcxx-debug\n dnl builds a separate set of debugging libraries in addition to the\n@@ -1023,53 +1023,53 @@ dnl\n dnl --enable-libstdcxx-debug-flags=FLAGS\n dnl iff --enable-debug == yes, then use FLAGS to build the debug library.\n dnl\n-dnl  +  Usage:  GLIBCPP_ENABLE_DEBUG[(DEFAULT)]\n+dnl  +  Usage:  GLIBCXX_ENABLE_DEBUG[(DEFAULT)]\n dnl       Where DEFAULT is either `yes' or `no'.  If ommitted, it\n dnl       defaults to `no'.\n-AC_DEFUN(GLIBCPP_ENABLE_DEBUG, [dnl\n-define([GLIBCPP_ENABLE_DEBUG_DEFAULT], ifelse($1, yes, yes, no))dnl\n+AC_DEFUN(GLIBCXX_ENABLE_DEBUG, [dnl\n+define([GLIBCXX_ENABLE_DEBUG_DEFAULT], ifelse($1, yes, yes, no))dnl\n AC_ARG_ENABLE(libstdcxx_debug,\n changequote(<<, >>)dnl\n-<<  --enable-libstdcxx-debug          build extra debug library [default=>>GLIBCPP_ENABLE_DEBUG_DEFAULT],\n+<<  --enable-libstdcxx-debug          build extra debug library [default=>>GLIBCXX_ENABLE_DEBUG_DEFAULT],\n changequote([, ])dnl\n [case \"${enableval}\" in\n  yes) enable_libstdcxx_debug=yes ;;\n  no)  enable_libstdcxx_debug=no ;;\n  *)   AC_MSG_ERROR([Unknown argument to enable/disable extra debugging]) ;;\n  esac],\n-enable_libstdcxx_debug=GLIBCPP_ENABLE_DEBUG_DEFAULT)dnl\n+enable_libstdcxx_debug=GLIBCXX_ENABLE_DEBUG_DEFAULT)dnl\n AC_MSG_CHECKING([for additional debug build])\n AC_MSG_RESULT($enable_libstdcxx_debug)\n-AM_CONDITIONAL(GLIBCPP_BUILD_DEBUG, test \"$enable_libstdcxx_debug\" = yes)\n+AM_CONDITIONAL(GLIBCXX_BUILD_DEBUG, test \"$enable_libstdcxx_debug\" = yes)\n ])\n \n \n dnl Check for explicit debug flags.\n dnl\n-dnl GLIBCPP_ENABLE_DEBUG_FLAGS\n+dnl GLIBCXX_ENABLE_DEBUG_FLAGS\n dnl\n dnl --enable-libstdcxx-debug-flags='-O1'\n dnl is a general method for passing flags to be used when\n dnl building debug libraries with --enable-debug.\n dnl\n dnl --disable-libstdcxx-debug-flags does nothing.\n-dnl  +  Usage:  GLIBCPP_ENABLE_DEBUG_FLAGS(default flags)\n+dnl  +  Usage:  GLIBCXX_ENABLE_DEBUG_FLAGS(default flags)\n dnl       If \"default flags\" is an empty string (or \"none\"), the effect is\n dnl       the same as --disable or --enable=no.\n-AC_DEFUN(GLIBCPP_ENABLE_DEBUG_FLAGS, [dnl\n-define([GLIBCPP_ENABLE_DEBUG_FLAGS_DEFAULT], ifelse($1,,, $1))dnl\n+AC_DEFUN(GLIBCXX_ENABLE_DEBUG_FLAGS, [dnl\n+define([GLIBCXX_ENABLE_DEBUG_FLAGS_DEFAULT], ifelse($1,,, $1))dnl\n AC_ARG_ENABLE(libstdcxx_debug_flags,\n changequote(<<, >>)dnl\n <<  --enable-libstdcxx-debug-flags=FLAGS    pass compiler FLAGS when building \n                                             debug library;\n-                                [default=>>GLIBCPP_ENABLE_DEBUG_FLAGS_DEFAULT],\n+                                [default=>>GLIBCXX_ENABLE_DEBUG_FLAGS_DEFAULT],\n changequote([, ])dnl\n [case \"${enableval}\" in\n  none)  ;;\n  -*) enable_libstdcxx_debug_flags=\"${enableval}\" ;;\n  *)   AC_MSG_ERROR([Unknown argument to extra debugging flags]) ;;\n  esac],\n-enable_libstdcxx_debug_flags=GLIBCPP_ENABLE_DEBUG_FLAGS_DEFAULT)dnl\n+enable_libstdcxx_debug_flags=GLIBCXX_ENABLE_DEBUG_FLAGS_DEFAULT)dnl\n \n dnl Option parsed, now set things appropriately\n case x\"$enable_libstdcxx_debug\" in\n@@ -1095,7 +1095,7 @@ AC_MSG_RESULT($DEBUG_FLAGS)\n dnl\n dnl Check for \"unusual\" flags to pass to the compiler while building.\n dnl\n-dnl GLIBCPP_ENABLE_CXX_FLAGS\n+dnl GLIBCXX_ENABLE_CXX_FLAGS\n dnl --enable-cxx-flags='-foo -bar -baz' is a general method for passing\n dnl     experimental flags such as -fhonor-std, -fsquangle, -Dfloat=char, etc.\n dnl     Somehow this same set of flags must be passed when [re]building\n@@ -1104,16 +1104,16 @@ dnl --disable-cxx-flags passes nothing.\n dnl  +  See http://gcc.gnu.org/ml/libstdc++/2000-q2/msg00131.html\n dnl         http://gcc.gnu.org/ml/libstdc++/2000-q2/msg00284.html\n dnl         http://gcc.gnu.org/ml/libstdc++/2000-q1/msg00035.html\n-dnl  +  Usage:  GLIBCPP_ENABLE_CXX_FLAGS(default flags)\n+dnl  +  Usage:  GLIBCXX_ENABLE_CXX_FLAGS(default flags)\n dnl       If \"default flags\" is an empty string (or \"none\"), the effect is\n dnl       the same as --disable or --enable=no.\n-AC_DEFUN(GLIBCPP_ENABLE_CXX_FLAGS, [dnl\n-define([GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT], ifelse($1,,, $1))dnl\n+AC_DEFUN(GLIBCXX_ENABLE_CXX_FLAGS, [dnl\n+define([GLIBCXX_ENABLE_CXX_FLAGS_DEFAULT], ifelse($1,,, $1))dnl\n AC_MSG_CHECKING([for extra compiler flags for building])\n AC_ARG_ENABLE(cxx_flags,\n changequote(<<, >>)dnl\n <<  --enable-cxx-flags=FLAGS     pass compiler FLAGS when building library;\n-                                  [default=>>GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT],\n+                                  [default=>>GLIBCXX_ENABLE_CXX_FLAGS_DEFAULT],\n changequote([, ])dnl\n [case \"x$enable_cxx_flags\" in\n   xyes)\n@@ -1123,7 +1123,7 @@ changequote([, ])dnl\n   *)\n     enable_cxx_flags=\"$enableval\" ;;\n esac],\n-enable_cxx_flags=GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT)\n+enable_cxx_flags=GLIBCXX_ENABLE_CXX_FLAGS_DEFAULT)\n \n dnl Run through flags (either default or command-line) and set anything\n dnl extra (e.g., #defines) that must accompany particular g++ options.\n@@ -1146,13 +1146,13 @@ AC_SUBST(EXTRA_CXX_FLAGS)\n dnl\n dnl Check for which locale library to use:  gnu or generic.\n dnl\n-dnl GLIBCPP_ENABLE_CLOCALE\n+dnl GLIBCXX_ENABLE_CLOCALE\n dnl --enable-clocale=gnu sets config/locale/c_locale_gnu.cc and friends\n dnl --enable-clocale=generic sets config/locale/c_locale_generic.cc and friends\n dnl\n dnl default is generic\n dnl\n-AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n+AC_DEFUN(GLIBCXX_ENABLE_CLOCALE, [\n   AC_MSG_CHECKING([for clocale to use])\n   AC_ARG_ENABLE(clocale,\n   [  --enable-clocale        enable model for target locale package.\n@@ -1170,10 +1170,10 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n   if test x$enable_clocale_flag = xno; then\n     case x${target_os} in\n       xlinux* | xgnu*)\n-\tAC_EGREP_CPP([_GLIBCPP_ok], [\n+\tAC_EGREP_CPP([_GLIBCXX_ok], [\n         #include <features.h>\n         #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 2)\n-          _GLIBCPP_ok\n+          _GLIBCXX_ok\n         #endif\n         ], enable_clocale_flag=gnu, enable_clocale_flag=generic)\n \n@@ -1255,11 +1255,11 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       fi\n       # Export the build objects.\n       for ling in $ALL_LINGUAS; do \\\n-        glibcpp_MOFILES=\"$glibcpp_MOFILES $ling.mo\"; \\\n-        glibcpp_POFILES=\"$glibcpp_POFILES $ling.po\"; \\\n+        glibcxx_MOFILES=\"$glibcxx_MOFILES $ling.mo\"; \\\n+        glibcxx_POFILES=\"$glibcxx_POFILES $ling.po\"; \\\n       done\n-      AC_SUBST(glibcpp_MOFILES)\n-      AC_SUBST(glibcpp_POFILES)\n+      AC_SUBST(glibcxx_MOFILES)\n+      AC_SUBST(glibcxx_POFILES)\n \n       CLOCALE_H=config/locale/gnu/c_locale.h\n       CLOCALE_CC=config/locale/gnu/c_locale.cc\n@@ -1300,16 +1300,16 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n \n   # This is where the testsuite looks for locale catalogs, using the\n   # -DLOCALEDIR define during testsuite compilation.\n-  glibcpp_localedir=${glibcpp_builddir}/po/share/locale\n-  AC_SUBST(glibcpp_localedir)\n+  glibcxx_localedir=${glibcxx_builddir}/po/share/locale\n+  AC_SUBST(glibcxx_localedir)\n \n   # A standalone libintl (e.g., GNU libintl) may be in use.\n   if test $USE_NLS = yes; then\n     AC_CHECK_HEADERS([libintl.h], [], USE_NLS=no)\n     AC_SEARCH_LIBS(gettext, intl, [], USE_NLS=no)\n   fi\n   if test $USE_NLS = yes; then\n-    AC_DEFINE(_GLIBCPP_USE_NLS)\n+    AC_DEFINE(_GLIBCXX_USE_NLS)\n   fi\n \n   AC_SUBST(USE_NLS)\n@@ -1332,11 +1332,11 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n dnl\n dnl Check for which I/O library to use:  stdio, or something specific.\n dnl\n-dnl GLIBCPP_ENABLE_CSTDIO\n+dnl GLIBCXX_ENABLE_CSTDIO\n dnl\n dnl default is stdio\n dnl\n-AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n+AC_DEFUN(GLIBCXX_ENABLE_CSTDIO, [\n   AC_MSG_CHECKING([for cstdio to use])\n   AC_ARG_ENABLE(cstdio,\n   [  --enable-cstdio         enable stdio for target io package.\n@@ -1377,7 +1377,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n dnl\n dnl Check to see if building and using a C++ precompiled header can be done.\n dnl\n-dnl GLIBCPP_ENABLE_PCH\n+dnl GLIBCXX_ENABLE_PCH\n dnl\n dnl --enable-libstdcxx-pch=yes\n dnl default, this shows intent to use stdc++.h.gch If it looks like it\n@@ -1387,18 +1387,18 @@ dnl\n dnl --disable-libstdcxx-pch\n dnl turns off attempts to use or build stdc++.h.gch.\n dnl\n-AC_DEFUN(GLIBCPP_ENABLE_PCH, [dnl\n-define([GLIBCPP_ENABLE_PCH_DEFAULT], ifelse($1,,, $1))dnl\n+AC_DEFUN(GLIBCXX_ENABLE_PCH, [dnl\n+define([GLIBCXX_ENABLE_PCH_DEFAULT], ifelse($1,,, $1))dnl\n AC_ARG_ENABLE(libstdcxx_pch,\n changequote(<<, >>)dnl\n-<<  --enable-libstdcxx-pch     build pre-compiled libstdc++ includes [default=>>GLIBCPP_ENABLE_PCH_DEFAULT],\n+<<  --enable-libstdcxx-pch     build pre-compiled libstdc++ includes [default=>>GLIBCXX_ENABLE_PCH_DEFAULT],\n changequote([, ])dnl\n [case \"${enableval}\" in\n  yes) enable_libstdcxx_pch=yes ;;\n  no)  enable_libstdcxx_pch=no ;;\n  *)   AC_MSG_ERROR([Unknown argument to enable/disable PCH]) ;;\n  esac],\n-enable_libstdcxx_pch=GLIBCPP_ENABLE_PCH_DEFAULT)dnl\n+enable_libstdcxx_pch=GLIBCXX_ENABLE_PCH_DEFAULT)dnl\n \n   if test x$enable_libstdcxx_pch = xyes; then\n     ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n@@ -1427,13 +1427,13 @@ enable_libstdcxx_pch=GLIBCPP_ENABLE_PCH_DEFAULT)dnl\n   AC_MSG_CHECKING([for enabled PCH])\n   AC_MSG_RESULT([$enable_libstdcxx_pch])\n \n-  AM_CONDITIONAL(GLIBCPP_BUILD_PCH, test \"$enable_libstdcxx_pch\" = yes)\n+  AM_CONDITIONAL(GLIBCXX_BUILD_PCH, test \"$enable_libstdcxx_pch\" = yes)\n   if test \"$enable_libstdcxx_pch\" = yes; then\n-\tglibcpp_PCHFLAGS=\"-include bits/stdc++.h\"\n+\tglibcxx_PCHFLAGS=\"-include bits/stdc++.h\"\n   else\n-\tglibcpp_PCHFLAGS=\"\"\n+\tglibcxx_PCHFLAGS=\"\"\n   fi\n-  AC_SUBST(glibcpp_PCHFLAGS)\n+  AC_SUBST(glibcxx_PCHFLAGS)\n ])\n \n dnl\n@@ -1448,18 +1448,18 @@ dnl having to write complex code (the sed commands to clean the macro\n dnl namespace are complex and fragile enough as it is).  We must also\n dnl add a relative path so that -I- is supported properly.\n dnl\n-AC_DEFUN(GLIBCPP_ENABLE_THREADS, [\n+AC_DEFUN(GLIBCXX_ENABLE_THREADS, [\n   AC_MSG_CHECKING([for thread model used by GCC])\n   target_thread_file=`$CC -v 2>&1 | sed -n 's/^Thread model: //p'`\n   AC_MSG_RESULT([$target_thread_file])\n \n   if test $target_thread_file != single; then\n     AC_DEFINE(HAVE_GTHR_DEFAULT)\n-    AC_DEFINE(_GLIBCPP_SUPPORTS_WEAK, __GXX_WEAK__)\n+    AC_DEFINE(_GLIBCXX_SUPPORTS_WEAK, __GXX_WEAK__)\n   fi\n \n-  glibcpp_thread_h=gthr-$target_thread_file.h\n-  AC_SUBST(glibcpp_thread_h)\n+  glibcxx_thread_h=gthr-$target_thread_file.h\n+  AC_SUBST(glibcxx_thread_h)\n ])\n \n \n@@ -1468,13 +1468,13 @@ dnl Check for exception handling support.  If an explicit enable/disable\n dnl sjlj exceptions is given, we don't have to detect.  Otherwise the\n dnl target may or may not support call frame exceptions.\n dnl\n-dnl GLIBCPP_ENABLE_SJLJ_EXCEPTIONS\n+dnl GLIBCXX_ENABLE_SJLJ_EXCEPTIONS\n dnl --enable-sjlj-exceptions forces the use of builtin setjmp.\n dnl --disable-sjlj-exceptions forces the use of call frame unwinding.\n dnl\n-dnl Define _GLIBCPP_SJLJ_EXCEPTIONS if the compiler is configured for it.\n+dnl Define _GLIBCXX_SJLJ_EXCEPTIONS if the compiler is configured for it.\n dnl\n-AC_DEFUN(GLIBCPP_ENABLE_SJLJ_EXCEPTIONS, [\n+AC_DEFUN(GLIBCXX_ENABLE_SJLJ_EXCEPTIONS, [\n   AC_MSG_CHECKING([for exception model to use])\n   AC_LANG_SAVE\n   AC_LANG_CPLUSPLUS\n@@ -1510,7 +1510,7 @@ EOF\n    CXXFLAGS=\"$old_CXXFLAGS\"\n    rm -f conftest*])\n    if test x$enable_sjlj_exceptions = xyes; then\n-     AC_DEFINE(_GLIBCPP_SJLJ_EXCEPTIONS, 1,\n+     AC_DEFINE(_GLIBCXX_SJLJ_EXCEPTIONS, 1,\n         [Define if the compiler is configured for setjmp/longjmp exceptions.])\n      ac_exception_model_name=sjlj\n    elif test x$enable_sjlj_exceptions = xno; then\n@@ -1530,13 +1530,13 @@ dnl (_Unwind_RaiseException, _Unwind_Resume, etc.) are defined by\n dnl libunwind instead of libgcc and that libstdc++ has a dependency\n dnl on libunwind as well as libgcc.\n dnl\n-dnl GLIBCPP_ENABLE_LIBUNWIND_EXCEPTIONS\n+dnl GLIBCXX_ENABLE_LIBUNWIND_EXCEPTIONS\n dnl --enable-libunwind-exceptions forces the use of libunwind.\n dnl --disable-libunwind-exceptions assumes there is no libunwind.\n dnl\n-dnl Define _GLIBCPP_LIBUNWIND_EXCEPTIONS if requested.\n+dnl Define _GLIBCXX_LIBUNWIND_EXCEPTIONS if requested.\n dnl\n-AC_DEFUN(GLIBCPP_ENABLE_LIBUNWIND_EXCEPTIONS, [\n+AC_DEFUN(GLIBCXX_ENABLE_LIBUNWIND_EXCEPTIONS, [\n   AC_MSG_CHECKING([for use of libunwind])\n   AC_ARG_ENABLE(libunwind-exceptions,\n   [  --enable-libunwind-exceptions  force use of libunwind for exceptions],\n@@ -1555,28 +1555,28 @@ AC_DEFUN(GLIBCPP_ENABLE_LIBUNWIND_EXCEPTIONS, [\n dnl\n dnl Check for ISO/IEC 9899:1999 \"C99\" support.\n dnl\n-dnl GLIBCPP_ENABLE_C99\n-dnl --enable-c99 defines _GLIBCPP_USE_C99\n-dnl --disable-c99 leaves _GLIBCPP_USE_C99 undefined\n-dnl  +  Usage:  GLIBCPP_ENABLE_C99[(DEFAULT)]\n+dnl GLIBCXX_ENABLE_C99\n+dnl --enable-c99 defines _GLIBCXX_USE_C99\n+dnl --disable-c99 leaves _GLIBCXX_USE_C99 undefined\n+dnl  +  Usage:  GLIBCXX_ENABLE_C99[(DEFAULT)]\n dnl       Where DEFAULT is either `yes' or `no'.  If omitted, it\n dnl       defaults to `no'.\n dnl  +  If 'C99' stuff is not available, ignores DEFAULT and sets `no'.\n dnl\n-dnl GLIBCPP_ENABLE_C99\n-AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n-  define([GLIBCPP_ENABLE_C99_DEFAULT], ifelse($1, yes, yes, no))dnl\n+dnl GLIBCXX_ENABLE_C99\n+AC_DEFUN(GLIBCXX_ENABLE_C99, [dnl\n+  define([GLIBCXX_ENABLE_C99_DEFAULT], ifelse($1, yes, yes, no))dnl\n \n   AC_ARG_ENABLE(c99,\n   changequote(<<, >>)dnl\n-  <<--enable-c99            turns on 'ISO/IEC 9899:1999 support' [default=>>GLIBCPP_ENABLE_C99_DEFAULT],\n+  <<--enable-c99            turns on 'ISO/IEC 9899:1999 support' [default=>>GLIBCXX_ENABLE_C99_DEFAULT],\n   changequote([, ])dnl\n   [case \"$enableval\" in\n    yes) enable_c99=yes ;;\n    no)  enable_c99=no ;;\n    *)   AC_MSG_ERROR([Unknown argument to enable/disable C99]) ;;\n    esac],\n-  enable_c99=GLIBCPP_ENABLE_C99_DEFAULT)dnl\n+  enable_c99=GLIBCXX_ENABLE_C99_DEFAULT)dnl\n \n   AC_LANG_SAVE\n   AC_LANG_CPLUSPLUS\n@@ -1679,7 +1679,7 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n \n   # Option parsed, now set things appropriately\n   if test x\"$enable_c99\" = x\"yes\"; then\n-    AC_DEFINE(_GLIBCPP_USE_C99)\n+    AC_DEFINE(_GLIBCXX_USE_C99)\n   fi\n \n   AC_LANG_RESTORE\n@@ -1691,28 +1691,28 @@ dnl Check for template specializations for the 'long long' type extension.\n dnl The result determines only whether 'long long' I/O is enabled; things\n dnl like numeric_limits<> specializations are always available.\n dnl\n-dnl GLIBCPP_ENABLE_LONG_LONG\n-dnl --enable-long-long defines _GLIBCPP_USE_LONG_LONG\n-dnl --disable-long-long leaves _GLIBCPP_USE_LONG_LONG undefined\n-dnl  +  Usage:  GLIBCPP_ENABLE_LONG_LONG[(DEFAULT)]\n+dnl GLIBCXX_ENABLE_LONG_LONG\n+dnl --enable-long-long defines _GLIBCXX_USE_LONG_LONG\n+dnl --disable-long-long leaves _GLIBCXX_USE_LONG_LONG undefined\n+dnl  +  Usage:  GLIBCXX_ENABLE_LONG_LONG[(DEFAULT)]\n dnl       Where DEFAULT is either `yes' or `no'.  If omitted, it\n dnl       defaults to `no'.\n dnl  +  If 'long long' stuff is not available, ignores DEFAULT and sets `no'.\n dnl\n-dnl GLIBCPP_ENABLE_LONG_LONG\n-AC_DEFUN(GLIBCPP_ENABLE_LONG_LONG, [dnl\n-  define([GLIBCPP_ENABLE_LONG_LONG_DEFAULT], ifelse($1, yes, yes, no))dnl\n+dnl GLIBCXX_ENABLE_LONG_LONG\n+AC_DEFUN(GLIBCXX_ENABLE_LONG_LONG, [dnl\n+  define([GLIBCXX_ENABLE_LONG_LONG_DEFAULT], ifelse($1, yes, yes, no))dnl\n \n   AC_ARG_ENABLE(long-long,\n   changequote(<<, >>)dnl\n-  <<--enable-long-long      turns on 'long long' [default=>>GLIBCPP_ENABLE_LONG_LONG_DEFAULT],\n+  <<--enable-long-long      turns on 'long long' [default=>>GLIBCXX_ENABLE_LONG_LONG_DEFAULT],\n   changequote([, ])dnl\n   [case \"$enableval\" in\n    yes) enable_long_long=yes ;;\n    no)  enable_long_long=no ;;\n    *)   AC_MSG_ERROR([Unknown argument to enable/disable long long]) ;;\n    esac],\n-  enable_long_long=GLIBCPP_ENABLE_LONG_LONG_DEFAULT)dnl\n+  enable_long_long=GLIBCXX_ENABLE_LONG_LONG_DEFAULT)dnl\n \n   AC_LANG_SAVE\n   AC_LANG_CPLUSPLUS\n@@ -1726,7 +1726,7 @@ AC_DEFUN(GLIBCPP_ENABLE_LONG_LONG, [dnl\n \n   # Option parsed, now set things appropriately\n   if test x\"$enable_long_long\" = xyes; then\n-    AC_DEFINE(_GLIBCPP_USE_LONG_LONG)\n+    AC_DEFINE(_GLIBCXX_USE_LONG_LONG)\n   fi\n   AC_MSG_RESULT($enable_long_long)\n \n@@ -1737,18 +1737,18 @@ AC_DEFUN(GLIBCPP_ENABLE_LONG_LONG, [dnl\n dnl\n dnl Check for what type of C headers to use.\n dnl\n-dnl GLIBCPP_ENABLE_CHEADERS\n+dnl GLIBCXX_ENABLE_CHEADERS\n dnl --enable-cheaders= [does stuff].\n dnl --disable-cheaders [does not do anything, really].\n-dnl  +  Usage:  GLIBCPP_ENABLE_CHEADERS[(DEFAULT)]\n+dnl  +  Usage:  GLIBCXX_ENABLE_CHEADERS[(DEFAULT)]\n dnl       Where DEFAULT is either `c' or `c_std'.\n dnl       If ommitted, it defaults to `c_std'.\n-AC_DEFUN(GLIBCPP_ENABLE_CHEADERS, [dnl\n-define([GLIBCPP_ENABLE_CHEADERS_DEFAULT], ifelse($1, c_std, c_std, c_std))dnl\n+AC_DEFUN(GLIBCXX_ENABLE_CHEADERS, [dnl\n+define([GLIBCXX_ENABLE_CHEADERS_DEFAULT], ifelse($1, c_std, c_std, c_std))dnl\n AC_MSG_CHECKING([for c header strategy to use])\n AC_ARG_ENABLE(cheaders,\n changequote(<<, >>)dnl\n-<<  --enable-cheaders=MODEL       construct \"C\" header files for g++ [default=>>GLIBCPP_ENABLE_CHEADERS_DEFAULT],\n+<<  --enable-cheaders=MODEL       construct \"C\" header files for g++ [default=>>GLIBCXX_ENABLE_CHEADERS_DEFAULT],\n changequote([, ])\n   [case \"$enableval\" in\n    c)\n@@ -1760,48 +1760,48 @@ changequote([, ])\n    *)   AC_MSG_ERROR([Unknown argument to enable/disable \"C\" headers])\n         ;;\n   esac],\n-  enable_cheaders=GLIBCPP_ENABLE_CHEADERS_DEFAULT)\n+  enable_cheaders=GLIBCXX_ENABLE_CHEADERS_DEFAULT)\n   AC_MSG_RESULT($enable_cheaders)\n \n   dnl Option parsed, now set things appropriately\n   case \"$enable_cheaders\" in\n     c_std)\n-        C_INCLUDE_DIR='${glibcpp_srcdir}/include/c_std'\n+        C_INCLUDE_DIR='${glibcxx_srcdir}/include/c_std'\n         ;;\n     c)\n-        C_INCLUDE_DIR='${glibcpp_srcdir}/include/c'\n+        C_INCLUDE_DIR='${glibcxx_srcdir}/include/c'\n         ;;\n   esac\n \n   AC_SUBST(C_INCLUDE_DIR)\n-  AM_CONDITIONAL(GLIBCPP_C_HEADERS_C, test \"$enable_cheaders\" = c)\n-  AM_CONDITIONAL(GLIBCPP_C_HEADERS_C_STD, test \"$enable_cheaders\" = c_std)\n-  AM_CONDITIONAL(GLIBCPP_C_HEADERS_COMPATIBILITY, test \"$c_compatibility\" = yes)\n+  AM_CONDITIONAL(GLIBCXX_C_HEADERS_C, test \"$enable_cheaders\" = c)\n+  AM_CONDITIONAL(GLIBCXX_C_HEADERS_C_STD, test \"$enable_cheaders\" = c_std)\n+  AM_CONDITIONAL(GLIBCXX_C_HEADERS_COMPATIBILITY, test \"$c_compatibility\" = yes)\n ])\n \n \n dnl\n dnl Check for wide character support.  Has the same effect as the option\n dnl in gcc's configure, but in a form that autoconf can mess with.\n dnl\n-dnl GLIBCPP_ENABLE_C_MBCHAR\n+dnl GLIBCXX_ENABLE_C_MBCHAR\n dnl --enable-c-mbchar requests all the wchar_t stuff.\n dnl --disable-c-mbchar doesn't.\n-dnl  +  Usage:  GLIBCPP_ENABLE_C_MBCHAR[(DEFAULT)]\n+dnl  +  Usage:  GLIBCXX_ENABLE_C_MBCHAR[(DEFAULT)]\n dnl       Where DEFAULT is either `yes' or `no'.  If ommitted, it\n dnl       defaults to `no'.\n-AC_DEFUN(GLIBCPP_ENABLE_C_MBCHAR, [dnl\n-define([GLIBCPP_ENABLE_C_MBCHAR_DEFAULT], ifelse($1, yes, yes, no))dnl\n+AC_DEFUN(GLIBCXX_ENABLE_C_MBCHAR, [dnl\n+define([GLIBCXX_ENABLE_C_MBCHAR_DEFAULT], ifelse($1, yes, yes, no))dnl\n AC_ARG_ENABLE(c-mbchar,\n changequote(<<, >>)dnl\n-<<  --enable-c-mbchar       enable multibyte (wide) characters [default=>>GLIBCPP_ENABLE_C_MBCHAR_DEFAULT],\n+<<  --enable-c-mbchar       enable multibyte (wide) characters [default=>>GLIBCXX_ENABLE_C_MBCHAR_DEFAULT],\n changequote([, ])dnl\n [case \"$enableval\" in\n  yes) enable_c_mbchar=yes ;;\n  no)  enable_c_mbchar=no ;;\n  *)   AC_MSG_ERROR([Unknown argument to enable/disable c-mbchar]) ;;\n  esac],\n-enable_c_mbchar=GLIBCPP_ENABLE_C_MBCHAR_DEFAULT)dnl\n+enable_c_mbchar=GLIBCXX_ENABLE_C_MBCHAR_DEFAULT)dnl\n dnl Option parsed, now other scripts can test enable_c_mbchar for yes/no.\n ])\n \n@@ -1813,10 +1813,10 @@ dnl TOPLEVEL_INCLUDES\n dnl LIBMATH_INCLUDES\n dnl LIBSUPCXX_INCLUDES\n dnl\n-dnl GLIBCPP_EXPORT_INCLUDES\n-AC_DEFUN(GLIBCPP_EXPORT_INCLUDES, [\n+dnl GLIBCXX_EXPORT_INCLUDES\n+AC_DEFUN(GLIBCXX_EXPORT_INCLUDES, [\n   # Root level of the build directory include sources.\n-  GLIBCPP_INCLUDES=\"-I${glibcpp_builddir}/include/${target_alias} -I${glibcpp_builddir}/include\"\n+  GLIBCXX_INCLUDES=\"-I${glibcxx_builddir}/include/${target_alias} -I${glibcxx_builddir}/include\"\n \n   # Passed down for canadian crosses.\n   if test x\"$CANADIAN\" = xyes; then\n@@ -1828,7 +1828,7 @@ AC_DEFUN(GLIBCPP_EXPORT_INCLUDES, [\n   LIBSUPCXX_INCLUDES='-I$(top_srcdir)/libsupc++'\n \n   # Now, export this to all the little Makefiles....\n-  AC_SUBST(GLIBCPP_INCLUDES)\n+  AC_SUBST(GLIBCXX_INCLUDES)\n   AC_SUBST(TOPLEVEL_INCLUDES)\n   AC_SUBST(LIBMATH_INCLUDES)\n   AC_SUBST(LIBSUPCXX_INCLUDES)\n@@ -1838,7 +1838,7 @@ AC_DEFUN(GLIBCPP_EXPORT_INCLUDES, [\n dnl\n dnl Set up *_FLAGS and *FLAGS variables for all sundry Makefile.am's.\n dnl\n-AC_DEFUN(GLIBCPP_EXPORT_FLAGS, [\n+AC_DEFUN(GLIBCXX_EXPORT_FLAGS, [\n   # Optimization flags that are probably a good idea for thrill-seekers. Just\n   # uncomment the lines below and make, everything else is ready to go...\n   # OPTIMIZE_CXXFLAGS = -O3 -fstrict-aliasing -fvtable-gc\n@@ -1850,22 +1850,22 @@ AC_DEFUN(GLIBCPP_EXPORT_FLAGS, [\n ])\n \n dnl\n-dnl  GLIBCPP_EXPORT_INSTALL_INFO\n+dnl  GLIBCXX_EXPORT_INSTALL_INFO\n dnl  calculates gxx_install_dir\n-dnl  exports glibcpp_toolexecdir\n-dnl  exports glibcpp_toolexeclibdir\n-dnl  exports glibcpp_prefixdir\n+dnl  exports glibcxx_toolexecdir\n+dnl  exports glibcxx_toolexeclibdir\n+dnl  exports glibcxx_prefixdir\n dnl\n dnl Assumes cross_compiling bits already done, and with_cross_host in\n dnl particular\n dnl\n-dnl GLIBCPP_EXPORT_INSTALL_INFO\n-AC_DEFUN(GLIBCPP_EXPORT_INSTALL_INFO, [\n-# Assumes glibcpp_builddir, glibcpp_srcdir are alreay set up and\n-# exported correctly in GLIBCPP_CONFIGURE.\n-glibcpp_toolexecdir=no\n-glibcpp_toolexeclibdir=no\n-glibcpp_prefixdir=${prefix}\n+dnl GLIBCXX_EXPORT_INSTALL_INFO\n+AC_DEFUN(GLIBCXX_EXPORT_INSTALL_INFO, [\n+# Assumes glibcxx_builddir, glibcxx_srcdir are alreay set up and\n+# exported correctly in GLIBCXX_CONFIGURE.\n+glibcxx_toolexecdir=no\n+glibcxx_toolexeclibdir=no\n+glibcxx_prefixdir=${prefix}\n \n # Process the option --with-gxx-include-dir=<path to include-files directory>\n AC_MSG_CHECKING([for --with-gxx-include-dir])\n@@ -1911,35 +1911,35 @@ if test $version_specific_libs = yes; then\n   if test x\"$gxx_include_dir\" = x\"no\"; then\n     gxx_include_dir='$(libdir)/gcc-lib/$(target_alias)/'${gcc_version}/include/c++\n   fi\n-  glibcpp_toolexecdir='$(libdir)/gcc-lib/$(target_alias)'\n-  glibcpp_toolexeclibdir='$(toolexecdir)/'${gcc_version}'$(MULTISUBDIR)'\n+  glibcxx_toolexecdir='$(libdir)/gcc-lib/$(target_alias)'\n+  glibcxx_toolexeclibdir='$(toolexecdir)/'${gcc_version}'$(MULTISUBDIR)'\n fi\n \n-# Calculate glibcpp_toolexecdir, glibcpp_toolexeclibdir\n+# Calculate glibcxx_toolexecdir, glibcxx_toolexeclibdir\n # Install a library built with a cross compiler in tooldir, not libdir.\n-if test x\"$glibcpp_toolexecdir\" = x\"no\"; then\n+if test x\"$glibcxx_toolexecdir\" = x\"no\"; then\n   if test -n \"$with_cross_host\" &&\n      test x\"$with_cross_host\" != x\"no\"; then\n-    glibcpp_toolexecdir='$(exec_prefix)/$(target_alias)'\n-    glibcpp_toolexeclibdir='$(toolexecdir)/lib'\n+    glibcxx_toolexecdir='$(exec_prefix)/$(target_alias)'\n+    glibcxx_toolexeclibdir='$(toolexecdir)/lib'\n   else\n-    glibcpp_toolexecdir='$(libdir)/gcc-lib/$(target_alias)'\n-    glibcpp_toolexeclibdir='$(libdir)'\n+    glibcxx_toolexecdir='$(libdir)/gcc-lib/$(target_alias)'\n+    glibcxx_toolexeclibdir='$(libdir)'\n   fi\n   multi_os_directory=`$CC -print-multi-os-directory`\n   case $multi_os_directory in\n   .) ;; # Avoid trailing /.\n-  *) glibcpp_toolexeclibdir=$glibcpp_toolexeclibdir/$multi_os_directory ;;\n+  *) glibcxx_toolexeclibdir=$glibcxx_toolexeclibdir/$multi_os_directory ;;\n   esac\n fi\n \n AC_MSG_CHECKING([for install location])\n AC_MSG_RESULT($gxx_include_dir)\n \n-AC_SUBST(glibcpp_prefixdir)\n+AC_SUBST(glibcxx_prefixdir)\n AC_SUBST(gxx_include_dir)\n-AC_SUBST(glibcpp_toolexecdir)\n-AC_SUBST(glibcpp_toolexeclibdir)\n+AC_SUBST(glibcxx_toolexecdir)\n+AC_SUBST(glibcxx_toolexeclibdir)\n ])\n \n \n@@ -1998,15 +1998,15 @@ dnl @author John Darrington <j.darrington@elvis.murdoch.edu.au>\n dnl @version 1.1 #### replaced Id string now that Id is for lib-v3; pme\n dnl\n dnl #### Changes for libstdc++-v3:  reformatting and linewrapping; prepending\n-dnl #### GLIBCPP_ to the macro name; adding the :-make fallback in the\n+dnl #### GLIBCXX_ to the macro name; adding the :-make fallback in the\n dnl #### conditional's subshell (\" --version\" is not a command), using a\n dnl #### different option to grep(1).\n dnl #### -pme\n dnl #### Fixed Bourne shell portability bug (use ${MAKE-make}, not\n dnl #### ${MAKE:-make}).\n dnl #### -msokolov\n AC_DEFUN(\n-  GLIBCPP_CHECK_GNU_MAKE, [AC_CACHE_CHECK( for GNU make,_cv_gnu_make_command,\n+  GLIBCXX_CHECK_GNU_MAKE, [AC_CACHE_CHECK( for GNU make,_cv_gnu_make_command,\n           _cv_gnu_make_command='' ;\n dnl Search all the common names for GNU make\n           for a in \"${MAKE-make}\" make gmake gnumake ; do\n@@ -2030,16 +2030,16 @@ dnl string, '#' otherwise\n \n dnl Check for headers for, and arguments to, the setrlimit() function.\n dnl Used only in testsuite_hooks.h.\n-AC_DEFUN(GLIBCPP_CHECK_SETRLIMIT_ancilliary, [\n+AC_DEFUN(GLIBCXX_CHECK_SETRLIMIT_ancilliary, [\n   AC_TRY_COMPILE([#include <unistd.h>\n                   #include <sys/time.h>\n                   #include <sys/resource.h>\n                  ], [ int f = RLIMIT_$1 ; ],\n-                 [glibcpp_mresult=1], [glibcpp_mresult=0])\n-  AC_DEFINE_UNQUOTED(HAVE_MEMLIMIT_$1, $glibcpp_mresult,\n+                 [glibcxx_mresult=1], [glibcxx_mresult=0])\n+  AC_DEFINE_UNQUOTED(HAVE_MEMLIMIT_$1, $glibcxx_mresult,\n                      [Only used in build directory testsuite_hooks.h.])\n ])\n-AC_DEFUN(GLIBCPP_CHECK_SETRLIMIT, [\n+AC_DEFUN(GLIBCXX_CHECK_SETRLIMIT, [\n   setrlimit_have_headers=yes\n   AC_CHECK_HEADERS(unistd.h sys/time.h sys/resource.h,\n                    [],\n@@ -2048,10 +2048,10 @@ AC_DEFUN(GLIBCPP_CHECK_SETRLIMIT, [\n   # won't be seeing any of these during testsuite compilation.\n   if test $setrlimit_have_headers = yes; then\n     # Can't do these in a loop, else the resulting syntax is wrong.\n-    GLIBCPP_CHECK_SETRLIMIT_ancilliary(DATA)\n-    GLIBCPP_CHECK_SETRLIMIT_ancilliary(RSS)\n-    GLIBCPP_CHECK_SETRLIMIT_ancilliary(VMEM)\n-    GLIBCPP_CHECK_SETRLIMIT_ancilliary(AS)\n+    GLIBCXX_CHECK_SETRLIMIT_ancilliary(DATA)\n+    GLIBCXX_CHECK_SETRLIMIT_ancilliary(RSS)\n+    GLIBCXX_CHECK_SETRLIMIT_ancilliary(VMEM)\n+    GLIBCXX_CHECK_SETRLIMIT_ancilliary(AS)\n \n     # Check for rlimit, setrlimit.\n     AC_CACHE_VAL(ac_setrlimit, [\n@@ -2067,7 +2067,7 @@ AC_DEFUN(GLIBCPP_CHECK_SETRLIMIT, [\n   AC_MSG_CHECKING([for testsuite memory limit support])\n   if test $setrlimit_have_headers = yes && test $ac_setrlimit = yes; then\n     ac_mem_limits=yes\n-    AC_DEFINE(_GLIBCPP_MEM_LIMITS)\n+    AC_DEFINE(_GLIBCXX_MEM_LIMITS)\n   else\n     ac_mem_limits=no\n   fi\n@@ -2079,19 +2079,19 @@ dnl\n dnl Does any necessary configuration of the testsuite directory.  Generates\n dnl the testsuite_hooks.h header.\n dnl\n-dnl GLIBCPP_CONFIGURE_TESTSUITE  [no args]\n-AC_DEFUN(GLIBCPP_CONFIGURE_TESTSUITE, [\n+dnl GLIBCXX_CONFIGURE_TESTSUITE  [no args]\n+AC_DEFUN(GLIBCXX_CONFIGURE_TESTSUITE, [\n \n-  if test  x\"$GLIBCPP_IS_CROSS_COMPILING\" = xfalse; then\n+  if test  x\"$GLIBCXX_IS_CROSS_COMPILING\" = xfalse; then\n     # Do checks for memory limit functions.\n-    GLIBCPP_CHECK_SETRLIMIT\n+    GLIBCXX_CHECK_SETRLIMIT\n \n     # Look for setenv, so that extended locale tests can be performed.\n-    GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_3(setenv)\n+    GLIBCXX_CHECK_STDLIB_DECL_AND_LINKAGE_3(setenv)\n   fi\n \n   # Export file names for ABI checking.\n-  baseline_dir=\"${glibcpp_srcdir}/config/abi/${abi_baseline_pair}\\$(MULTISUBDIR)\"\n+  baseline_dir=\"${glibcxx_srcdir}/config/abi/${abi_baseline_pair}\\$(MULTISUBDIR)\"\n   AC_SUBST(baseline_dir)\n \n   # Determine if checking the ABI is desirable.\n@@ -2106,8 +2106,8 @@ AC_DEFUN(GLIBCPP_CONFIGURE_TESTSUITE, [\n     esac\n   fi\n \n-  AM_CONDITIONAL(GLIBCPP_TEST_WCHAR_T, test \"$enable_wchar_t\" = yes)\t\n-  AM_CONDITIONAL(GLIBCPP_TEST_ABI, test \"$enable_abi_check\" = yes)\n+  AM_CONDITIONAL(GLIBCXX_TEST_WCHAR_T, test \"$enable_wchar_t\" = yes)\t\n+  AM_CONDITIONAL(GLIBCXX_TEST_ABI, test \"$enable_abi_check\" = yes)\n ])\n \n \n@@ -2125,22 +2125,22 @@ dnl\n dnl Check whether S_ISREG (Posix) or S_IFREG is available in <sys/stat.h>.\n dnl\n \n-AC_DEFUN(GLIBCPP_CHECK_S_ISREG_OR_S_IFREG, [\n-  AC_CACHE_VAL(glibcpp_cv_S_ISREG, [\n+AC_DEFUN(GLIBCXX_CHECK_S_ISREG_OR_S_IFREG, [\n+  AC_CACHE_VAL(glibcxx_cv_S_ISREG, [\n     AC_TRY_LINK([#include <sys/stat.h>],\n                 [struct stat buffer; fstat(0, &buffer); S_ISREG(buffer.st_mode); ],\n-                [glibcpp_cv_S_ISREG=yes],\n-                [glibcpp_cv_S_ISREG=no])\n+                [glibcxx_cv_S_ISREG=yes],\n+                [glibcxx_cv_S_ISREG=no])\n   ])\n-  AC_CACHE_VAL(glibcpp_cv_S_IFREG, [\n+  AC_CACHE_VAL(glibcxx_cv_S_IFREG, [\n     AC_TRY_LINK([#include <sys/stat.h>],\n                 [struct stat buffer; fstat(0, &buffer); S_IFREG & buffer.st_mode; ],\n-                [glibcpp_cv_S_IFREG=yes],\n-                [glibcpp_cv_S_IFREG=no])\n+                [glibcxx_cv_S_IFREG=yes],\n+                [glibcxx_cv_S_IFREG=no])\n   ])\n-  if test x$glibcpp_cv_S_ISREG = xyes; then\n+  if test x$glibcxx_cv_S_ISREG = xyes; then\n     AC_DEFINE(HAVE_S_ISREG)\n-  elif test x$glibcpp_cv_S_IFREG = xyes; then\n+  elif test x$glibcxx_cv_S_IFREG = xyes; then\n     AC_DEFINE(HAVE_S_IFREG)\n   fi\n ])\n@@ -2149,14 +2149,14 @@ dnl\n dnl Check whether poll is available in <poll.h>.\n dnl\n \n-AC_DEFUN(GLIBCPP_CHECK_POLL, [\n-  AC_CACHE_VAL(glibcpp_cv_POLL, [\n+AC_DEFUN(GLIBCXX_CHECK_POLL, [\n+  AC_CACHE_VAL(glibcxx_cv_POLL, [\n     AC_TRY_COMPILE([#include <poll.h>],\n                 [struct pollfd pfd[1]; pfd[0].events = POLLIN; poll(pfd, 1, 0); ],\n-                [glibcpp_cv_POLL=yes],\n-                [glibcpp_cv_POLL=no])\n+                [glibcxx_cv_POLL=yes],\n+                [glibcxx_cv_POLL=no])\n   ])\n-  if test x$glibcpp_cv_POLL = xyes; then\n+  if test x$glibcxx_cv_POLL = xyes; then\n     AC_DEFINE(HAVE_POLL)\n   fi\n ])\n@@ -2186,27 +2186,27 @@ AC_DEFUN(AC_LC_MESSAGES, [\n dnl\n dnl Check for whether the Boost-derived checks should be turned on.\n dnl\n-dnl GLIBCPP_ENABLE_CONCEPT_CHECKS\n+dnl GLIBCXX_ENABLE_CONCEPT_CHECKS\n dnl --enable-concept-checks turns them on.\n dnl --disable-concept-checks leaves them off.\n-dnl  +  Usage:  GLIBCPP_ENABLE_CONCEPT_CHECKS[(DEFAULT)]\n+dnl  +  Usage:  GLIBCXX_ENABLE_CONCEPT_CHECKS[(DEFAULT)]\n dnl       Where DEFAULT is either `yes' or `no'.  If ommitted, it\n dnl       defaults to `no'.\n-AC_DEFUN(GLIBCPP_ENABLE_CONCEPT_CHECKS, [dnl\n-define([GLIBCPP_ENABLE_CONCEPT_CHECKS_DEFAULT], ifelse($1, yes, yes, no))dnl\n+AC_DEFUN(GLIBCXX_ENABLE_CONCEPT_CHECKS, [dnl\n+define([GLIBCXX_ENABLE_CONCEPT_CHECKS_DEFAULT], ifelse($1, yes, yes, no))dnl\n AC_ARG_ENABLE(concept-checks,\n changequote(<<, >>)dnl\n-<<  --enable-concept-checks use Boost-derived template checks [default=>>GLIBCPP_ENABLE_CONCEPT_CHECKS_DEFAULT],\n+<<  --enable-concept-checks use Boost-derived template checks [default=>>GLIBCXX_ENABLE_CONCEPT_CHECKS_DEFAULT],\n changequote([, ])dnl\n [case \"$enableval\" in\n  yes) enable_concept_checks=yes ;;\n  no)  enable_concept_checks=no ;;\n  *)   AC_MSG_ERROR([Unknown argument to enable/disable concept checks]) ;;\n  esac],\n-enable_concept_checks=GLIBCPP_ENABLE_CONCEPT_CHECKS_DEFAULT)dnl\n+enable_concept_checks=GLIBCXX_ENABLE_CONCEPT_CHECKS_DEFAULT)dnl\n dnl Option parsed, now set things appropriately\n if test x\"$enable_concept_checks\" = xyes; then\n-  AC_DEFINE(_GLIBCPP_CONCEPT_CHECKS)\n+  AC_DEFINE(_GLIBCXX_CONCEPT_CHECKS)\n fi\n ])\n \n@@ -2215,20 +2215,20 @@ dnl\n dnl Add version tags to symbols in shared library (or not), additionally\n dnl marking other symbols as private/local (or not).\n dnl\n-dnl GLIBCPP_ENABLE_SYMVERS\n+dnl GLIBCXX_ENABLE_SYMVERS\n dnl --enable-symvers=style adds a version script to the linker call when\n dnl       creating the shared library.  The choice of version script is\n dnl       controlled by 'style'.\n dnl --disable-symvers does not.\n-dnl  +  Usage:  GLIBCPP_ENABLE_SYMVERS[(DEFAULT)]\n+dnl  +  Usage:  GLIBCXX_ENABLE_SYMVERS[(DEFAULT)]\n dnl       Where DEFAULT is either `yes' or `no'.  If ommitted, it\n dnl       defaults to `no'.  Passing `yes' tries to choose a default style\n dnl       based on linker characteristics.  Passing 'no' disables versioning.\n-AC_DEFUN(GLIBCPP_ENABLE_SYMVERS, [dnl\n-define([GLIBCPP_ENABLE_SYMVERS_DEFAULT], ifelse($1, yes, yes, no))dnl\n+AC_DEFUN(GLIBCXX_ENABLE_SYMVERS, [dnl\n+define([GLIBCXX_ENABLE_SYMVERS_DEFAULT], ifelse($1, yes, yes, no))dnl\n AC_ARG_ENABLE(symvers,\n changequote(<<, >>)dnl\n-<<  --enable-symvers=style  enables symbol versioning of the shared library [default=>>GLIBCPP_ENABLE_SYMVERS_DEFAULT],\n+<<  --enable-symvers=style  enables symbol versioning of the shared library [default=>>GLIBCXX_ENABLE_SYMVERS_DEFAULT],\n changequote([, ])dnl\n [case \"$enableval\" in\n  yes) enable_symvers=yes ;;\n@@ -2238,13 +2238,13 @@ changequote([, ])dnl\n  gnu) enable_symvers=$enableval ;;\n  *)   AC_MSG_ERROR([Unknown argument to enable/disable symvers]) ;;\n  esac],\n-enable_symvers=GLIBCPP_ENABLE_SYMVERS_DEFAULT)dnl\n+enable_symvers=GLIBCXX_ENABLE_SYMVERS_DEFAULT)dnl\n \n-# If we never went through the GLIBCPP_CHECK_LINKER_FEATURES macro, then we\n+# If we never went through the GLIBCXX_CHECK_LINKER_FEATURES macro, then we\n # don't know enough about $LD to do tricks...\n if test x$enable_shared = xno ||\n \ttest \"x$LD\" = x ||\n-\ttest x$glibcpp_gnu_ld_version = x; then\n+\ttest x$glibcxx_gnu_ld_version = x; then\n   enable_symvers=no\n fi\n \n@@ -2253,22 +2253,22 @@ if test $enable_symvers != no; then\n   AC_MSG_CHECKING([for shared libgcc])\n   ac_save_CFLAGS=\"$CFLAGS\"\n   CFLAGS=' -lgcc_s'\n-  AC_TRY_LINK(, [return 0], glibcpp_shared_libgcc=yes, glibcpp_shared_libgcc=no)\n+  AC_TRY_LINK(, [return 0], glibcxx_shared_libgcc=yes, glibcxx_shared_libgcc=no)\n   CFLAGS=\"$ac_save_CFLAGS\"\n-  AC_MSG_RESULT($glibcpp_shared_libgcc)\n+  AC_MSG_RESULT($glibcxx_shared_libgcc)\n fi\n \n # For GNU ld, we need at least this version.  It's 2.12 in the same format\n-# as the tested-for version.  See GLIBCPP_CHECK_LINKER_FEATURES for more.\n-glibcpp_min_gnu_ld_version=21200\n+# as the tested-for version.  See GLIBCXX_CHECK_LINKER_FEATURES for more.\n+glibcxx_min_gnu_ld_version=21200\n \n # Check to see if unspecified \"yes\" value can win, given results\n # above.\n if test $enable_symvers = yes ; then\n   if test $with_gnu_ld = yes &&\n-    test $glibcpp_shared_libgcc = yes ;\n+    test $glibcxx_shared_libgcc = yes ;\n   then\n-    if test $glibcpp_gnu_ld_version -ge $glibcpp_min_gnu_ld_version ; then\n+    if test $glibcxx_gnu_ld_version -ge $glibcxx_min_gnu_ld_version ; then\n         enable_symvers=gnu\n     else\n       ac_test_CFLAGS=\"${CFLAGS+set}\"\n@@ -2300,12 +2300,12 @@ case $enable_symvers in\n       ;;\n   gnu)\n       SYMVER_MAP=config/linker-map.gnu\n-      AC_DEFINE(_GLIBCPP_SYMVER)\n+      AC_DEFINE(_GLIBCXX_SYMVER)\n       ;;\n esac\n \n AC_SUBST(SYMVER_MAP)\n-AM_CONDITIONAL(GLIBCPP_BUILD_VERSIONED_SHLIB, test $enable_symvers != no)\n+AM_CONDITIONAL(GLIBCXX_BUILD_VERSIONED_SHLIB, test $enable_symvers != no)\n AC_MSG_CHECKING([versioning on shared library symbols])\n AC_MSG_RESULT($enable_symvers)\n ])"}, {"sha": "1a5563ce0bc0eaae75ddb8a9c3c9ee6a3be99a0d", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 355, "deletions": 355, "changes": 710, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -13,8 +13,8 @@ dnl PARTICULAR PURPOSE.\n dnl\n dnl Initialize basic configure bits, set toplevel_srcdir for Makefiles.\n dnl\n-dnl GLIBCPP_TOPREL_CONFIGURE\n-AC_DEFUN(GLIBCPP_TOPREL_CONFIGURE, [\n+dnl GLIBCXX_TOPREL_CONFIGURE\n+AC_DEFUN(GLIBCXX_TOPREL_CONFIGURE, [\n   dnl Default to --enable-multilib (this is also passed by default\n   dnl from the ubercommon-top-level configure)\n   AC_ARG_ENABLE(multilib,\n@@ -51,19 +51,19 @@ AC_DEFUN(GLIBCPP_TOPREL_CONFIGURE, [\n dnl\n dnl Initialize the rest of the library configury.\n dnl\n-dnl GLIBCPP_CONFIGURE\n-AC_DEFUN(GLIBCPP_CONFIGURE, [\n+dnl GLIBCXX_CONFIGURE\n+AC_DEFUN(GLIBCXX_CONFIGURE, [\n   # Export build and source directories.\n   # These need to be absolute paths, yet at the same time need to\n   # canonicalize only relative paths, because then amd will not unmount\n   # drives. Thus the use of PWDCMD: set it to 'pawd' or 'amq -w' if using amd.\n-  glibcpp_builddir=`${PWDCMD-pwd}`\n+  glibcxx_builddir=`${PWDCMD-pwd}`\n   case $srcdir in\n-  [\\\\/$]* | ?:[\\\\/]*) glibcpp_srcdir=${srcdir} ;;\n-  *) glibcpp_srcdir=`cd \"$srcdir\" && ${PWDCMD-pwd} || echo \"$srcdir\"` ;;\n+  [\\\\/$]* | ?:[\\\\/]*) glibcxx_srcdir=${srcdir} ;;\n+  *) glibcxx_srcdir=`cd \"$srcdir\" && ${PWDCMD-pwd} || echo \"$srcdir\"` ;;\n   esac\n-  AC_SUBST(glibcpp_builddir)\n-  AC_SUBST(glibcpp_srcdir)\n+  AC_SUBST(glibcxx_builddir)\n+  AC_SUBST(glibcxx_srcdir)\n \n   dnl This is here just to satisfy automake.\n   ifelse(not,equal,[AC_CONFIG_AUX_DIR(..)])\n@@ -85,8 +85,8 @@ AC_DEFUN(GLIBCPP_CONFIGURE, [\n   AC_ARG_WITH(newlib,\n   [  --with-newlib                    Configuring with newlib])\n \n-  glibcpp_basedir=$srcdir/$toprel/$1/libstdc++-v3\n-  AC_SUBST(glibcpp_basedir)\n+  glibcxx_basedir=$srcdir/$toprel/$1/libstdc++-v3\n+  AC_SUBST(glibcxx_basedir)\n \n   # Never versions of autoconf add an underscore to these functions.\n   # Prevent future problems ...\n@@ -143,15 +143,15 @@ AC_DEFUN(GLIBCPP_CONFIGURE, [\n   [AC_BEFORE([$0], [AC_PROG_CXXCPP])dnl\n   dnl Fool anybody using AC_PROG_CXX.\n   AC_PROVIDE([AC_PROG_CXX])\n-  # Use glibcpp_CXX so that we do not cause CXX to be cached with the\n+  # Use glibcxx_CXX so that we do not cause CXX to be cached with the\n   # flags that come in CXX while configuring libstdc++.  They're different\n   # from those used for all other target libraries.  If CXX is set in\n   # the environment, respect that here.\n-  glibcpp_CXX=$CXX\n-  AC_CHECK_PROGS(glibcpp_CXX, $CCC c++ g++ gcc CC cxx cc++, gcc)\n-  AC_SUBST(glibcpp_CXX)\n-  CXX=$glibcpp_CXX\n-  test -z \"$glibcpp_CXX\" && AC_MSG_ERROR([no acceptable c++ found in \\$PATH])\n+  glibcxx_CXX=$CXX\n+  AC_CHECK_PROGS(glibcxx_CXX, $CCC c++ g++ gcc CC cxx cc++, gcc)\n+  AC_SUBST(glibcxx_CXX)\n+  CXX=$glibcxx_CXX\n+  test -z \"$glibcxx_CXX\" && AC_MSG_ERROR([no acceptable c++ found in \\$PATH])\n \n   AC_PROG_CXX_GNU\n \n@@ -181,7 +181,7 @@ AC_DEFUN(GLIBCPP_CONFIGURE, [\n \n   # For directory versioning (e.g., headers) and other variables.\n   AC_MSG_CHECKING([for GCC version number])\n-  gcc_version=`$glibcpp_CXX -dumpversion`\n+  gcc_version=`$glibcxx_CXX -dumpversion`\n   AC_MSG_RESULT($gcc_version)\n \n   # For some reason, gettext needs this.\n@@ -209,33 +209,33 @@ AC_DEFUN(GLIBCPP_CONFIGURE, [\n     AC_EXEEXT\n   fi\n \n-  case [$]{glibcpp_basedir} in\n-    /* | [A-Za-z]:[\\\\/]*) libgcj_flagbasedir=[$]{glibcpp_basedir} ;;\n-    *) glibcpp_flagbasedir='[$](top_builddir)/'[$]{glibcpp_basedir} ;;\n+  case [$]{glibcxx_basedir} in\n+    /* | [A-Za-z]:[\\\\/]*) libgcj_flagbasedir=[$]{glibcxx_basedir} ;;\n+    *) glibcxx_flagbasedir='[$](top_builddir)/'[$]{glibcxx_basedir} ;;\n   esac\n \n   # Set up safe default values for all subsequent AM_CONDITIONAL tests.\n   need_libmath=no\n   enable_wchar_t=no\n   #enable_debug=no\n-  #glibcpp_pch_comp=no\n+  #glibcxx_pch_comp=no\n   #enable_cheaders=c\n   #c_compatibility=no\n   #enable_abi_check=no\n   #enable_symvers=no\n \n   # Find platform-specific directories containing configuration info.  In\n   # addition to possibly modifying the same flags, it also sets up symlinks.\n-  GLIBCPP_CHECK_HOST\n+  GLIBCXX_CHECK_HOST\n ])\n \n \n dnl\n dnl Check to see if g++ can compile this library, and if so, if any version-\n dnl specific precautions need to be taken.\n dnl\n-dnl GLIBCPP_CHECK_COMPILER_VERSION\n-AC_DEFUN(GLIBCPP_CHECK_COMPILER_VERSION, [\n+dnl GLIBCXX_CHECK_COMPILER_VERSION\n+AC_DEFUN(GLIBCXX_CHECK_COMPILER_VERSION, [\n if test ! -f stamp-sanity-compiler; then\n   AC_MSG_CHECKING([for g++ that will successfully compile libstdc++-v3])\n   AC_LANG_SAVE\n@@ -264,11 +264,11 @@ dnl\n dnl Define SECTION_FLAGS='-ffunction-sections -fdata-sections' if\n dnl compiler supports it and the user has not requested debug mode.\n dnl\n-dnl GLIBCPP_CHECK_COMPILER_FEATURES\n-AC_DEFUN(GLIBCPP_CHECK_COMPILER_FEATURES, [\n+dnl GLIBCXX_CHECK_COMPILER_FEATURES\n+AC_DEFUN(GLIBCXX_CHECK_COMPILER_FEATURES, [\n   # All these tests are for C++; save the language and the compiler flags.\n   # The CXXFLAGS thing is suspicious, but based on similar bits previously\n-  # found in GLIBCPP_CONFIGURE.\n+  # found in GLIBCXX_CONFIGURE.\n   AC_LANG_SAVE\n   AC_LANG_CPLUSPLUS\n   ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n@@ -310,11 +310,11 @@ dnl safe (like an empty string).\n dnl\n dnl Define SECTION_LDFLAGS='-Wl,--gc-sections' if possible.\n dnl Define OPT_LDFLAGS='-Wl,-O1' if possible.\n-dnl Define LD, with_gnu_ld, and (possibly) glibcpp_gnu_ld_version as\n+dnl Define LD, with_gnu_ld, and (possibly) glibcxx_gnu_ld_version as\n dnl side-effects of testing.\n dnl\n-dnl GLIBCPP_CHECK_LINKER_FEATURES\n-AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n+dnl GLIBCXX_CHECK_LINKER_FEATURES\n+AC_DEFUN(GLIBCXX_CHECK_LINKER_FEATURES, [\n   # If we're not using GNU ld, then there's no point in even trying these\n   # tests.  Check for that first.  We should have already tested for gld\n   # by now (in libtool), but require it now just to be safe...\n@@ -343,7 +343,7 @@ AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n   ldver=`$LD --version 2>/dev/null | head -1 | \\\n          sed -e 's/GNU ld version \\([0-9.][0-9.]*\\).*/\\1/'`\n   changequote([,])\n-  glibcpp_gnu_ld_version=`echo $ldver | \\\n+  glibcxx_gnu_ld_version=`echo $ldver | \\\n          $AWK -F. '{ if (NF<3) [$]3=0; print ([$]1*100+[$]2)*100+[$]3 }'`\n \n   # Set --gc-sections.\n@@ -399,11 +399,11 @@ dnl Check to see if the (math function) argument passed is\n dnl declared when using the c++ compiler\n dnl ASSUMES argument is a math function with ONE parameter\n dnl\n-dnl GLIBCPP_CHECK_MATH_DECL_1\n-AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_1, [\n+dnl GLIBCXX_CHECK_MATH_DECL_1\n+AC_DEFUN(GLIBCXX_CHECK_MATH_DECL_1, [\n   AC_MSG_CHECKING([for $1 declaration])\n-  if test x${glibcpp_cv_func_$1_use+set} != xset; then\n-    AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+  if test x${glibcxx_cv_func_$1_use+set} != xset; then\n+    AC_CACHE_VAL(glibcxx_cv_func_$1_use, [\n       AC_LANG_SAVE\n       AC_LANG_CPLUSPLUS\n       AC_TRY_COMPILE([#include <math.h>\n@@ -412,11 +412,11 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_1, [\n \t\t      #endif\n \t\t     ],\n                      [ $1(0);],\n-                     [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+                     [glibcxx_cv_func_$1_use=yes], [glibcxx_cv_func_$1_use=no])\n       AC_LANG_RESTORE\n     ])\n   fi\n-  AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n+  AC_MSG_RESULT($glibcxx_cv_func_$1_use)\n ])\n \n dnl\n@@ -431,37 +431,37 @@ dnl argument 1 is name of function to check\n dnl\n dnl ASSUMES argument is a math function with ONE parameter\n dnl\n-dnl GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1\n-AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1, [\n-  GLIBCPP_CHECK_MATH_DECL_1($1)\n-  if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n+dnl GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1\n+AC_DEFUN(GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1, [\n+  GLIBCXX_CHECK_MATH_DECL_1($1)\n+  if test x$glibcxx_cv_func_$1_use = x\"yes\"; then\n     AC_CHECK_FUNCS($1)\n   else\n-    GLIBCPP_CHECK_MATH_DECL_1(_$1)\n-    if test x$glibcpp_cv_func__$1_use = x\"yes\"; then\n+    GLIBCXX_CHECK_MATH_DECL_1(_$1)\n+    if test x$glibcxx_cv_func__$1_use = x\"yes\"; then\n       AC_CHECK_FUNCS(_$1)\n     fi\n   fi\n ])\n \n \n dnl\n-dnl Like GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1, but does a bunch of\n+dnl Like GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1, but does a bunch of\n dnl of functions at once.  It's an all-or-nothing check -- either\n dnl HAVE_XYZ is defined for each of the functions, or for none of them.\n dnl Doing it this way saves significant configure time.\n-AC_DEFUN(GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1, [\n+AC_DEFUN(GLIBCXX_CHECK_MATH_DECLS_AND_LINKAGES_1, [\n   AC_MSG_CHECKING([for $1 functions])\n-  AC_CACHE_VAL(glibcpp_cv_func_$2_use, [\n+  AC_CACHE_VAL(glibcxx_cv_func_$2_use, [\n     AC_LANG_SAVE\n     AC_LANG_CPLUSPLUS\n     AC_TRY_COMPILE([#include <math.h>],\n                    [ `for x in $3; do echo \"$x (0);\"; done` ],\n-                   [glibcpp_cv_func_$2_use=yes],\n-                   [glibcpp_cv_func_$2_use=no])\n+                   [glibcxx_cv_func_$2_use=yes],\n+                   [glibcxx_cv_func_$2_use=no])\n     AC_LANG_RESTORE])\n-  AC_MSG_RESULT($glibcpp_cv_func_$2_use)\n-  if test x$glibcpp_cv_func_$2_use = x\"yes\"; then\n+  AC_MSG_RESULT($glibcxx_cv_func_$2_use)\n+  if test x$glibcxx_cv_func_$2_use = x\"yes\"; then\n     AC_CHECK_FUNCS($3)\n   fi\n ])\n@@ -471,20 +471,20 @@ dnl Check to see if the (math function) argument passed is\n dnl declared when using the c++ compiler\n dnl ASSUMES argument is a math function with TWO parameters\n dnl\n-dnl GLIBCPP_CHECK_MATH_DECL_2\n-AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_2, [\n+dnl GLIBCXX_CHECK_MATH_DECL_2\n+AC_DEFUN(GLIBCXX_CHECK_MATH_DECL_2, [\n   AC_MSG_CHECKING([for $1 declaration])\n-  if test x${glibcpp_cv_func_$1_use+set} != xset; then\n-    AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+  if test x${glibcxx_cv_func_$1_use+set} != xset; then\n+    AC_CACHE_VAL(glibcxx_cv_func_$1_use, [\n       AC_LANG_SAVE\n       AC_LANG_CPLUSPLUS\n       AC_TRY_COMPILE([#include <math.h>],\n                      [ $1(0, 0);],\n-                     [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+                     [glibcxx_cv_func_$1_use=yes], [glibcxx_cv_func_$1_use=no])\n       AC_LANG_RESTORE\n     ])\n   fi\n-  AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n+  AC_MSG_RESULT($glibcxx_cv_func_$1_use)\n ])\n \n dnl\n@@ -498,14 +498,14 @@ dnl argument 1 is name of function to check\n dnl\n dnl ASSUMES argument is a math function with TWO parameters\n dnl\n-dnl GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2\n-AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2, [\n-  GLIBCPP_CHECK_MATH_DECL_2($1)\n-  if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n+dnl GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2\n+AC_DEFUN(GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2, [\n+  GLIBCXX_CHECK_MATH_DECL_2($1)\n+  if test x$glibcxx_cv_func_$1_use = x\"yes\"; then\n     AC_CHECK_FUNCS($1)\n   else\n-    GLIBCPP_CHECK_MATH_DECL_2(_$1)\n-    if test x$glibcpp_cv_func__$1_use = x\"yes\"; then\n+    GLIBCXX_CHECK_MATH_DECL_2(_$1)\n+    if test x$glibcxx_cv_func__$1_use = x\"yes\"; then\n       AC_CHECK_FUNCS(_$1)\n     fi\n   fi\n@@ -517,20 +517,20 @@ dnl Check to see if the (math function) argument passed is\n dnl declared when using the c++ compiler\n dnl ASSUMES argument is a math function with THREE parameters\n dnl\n-dnl GLIBCPP_CHECK_MATH_DECL_3\n-AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_3, [\n+dnl GLIBCXX_CHECK_MATH_DECL_3\n+AC_DEFUN(GLIBCXX_CHECK_MATH_DECL_3, [\n   AC_MSG_CHECKING([for $1 declaration])\n-  if test x${glibcpp_cv_func_$1_use+set} != xset; then\n-    AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+  if test x${glibcxx_cv_func_$1_use+set} != xset; then\n+    AC_CACHE_VAL(glibcxx_cv_func_$1_use, [\n       AC_LANG_SAVE\n       AC_LANG_CPLUSPLUS\n       AC_TRY_COMPILE([#include <math.h>],\n                      [ $1(0, 0, 0);],\n-                     [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+                     [glibcxx_cv_func_$1_use=yes], [glibcxx_cv_func_$1_use=no])\n       AC_LANG_RESTORE\n     ])\n   fi\n-  AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n+  AC_MSG_RESULT($glibcxx_cv_func_$1_use)\n ])\n \n dnl\n@@ -544,14 +544,14 @@ dnl argument 1 is name of function to check\n dnl\n dnl ASSUMES argument is a math function with THREE parameters\n dnl\n-dnl GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3\n-AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3, [\n-  GLIBCPP_CHECK_MATH_DECL_3($1)\n-  if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n+dnl GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_3\n+AC_DEFUN(GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_3, [\n+  GLIBCXX_CHECK_MATH_DECL_3($1)\n+  if test x$glibcxx_cv_func_$1_use = x\"yes\"; then\n     AC_CHECK_FUNCS($1)\n   else\n-    GLIBCPP_CHECK_MATH_DECL_3(_$1)\n-    if test x$glibcpp_cv_func__$1_use = x\"yes\"; then\n+    GLIBCXX_CHECK_MATH_DECL_3(_$1)\n+    if test x$glibcxx_cv_func__$1_use = x\"yes\"; then\n       AC_CHECK_FUNCS(_$1)\n     fi\n   fi\n@@ -567,21 +567,21 @@ dnl argument 1 is name of function to check\n dnl\n dnl ASSUMES argument is a math function with TWO parameters\n dnl\n-dnl GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_2\n-AC_DEFUN(GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_2, [\n+dnl GLIBCXX_CHECK_STDLIB_DECL_AND_LINKAGE_2\n+AC_DEFUN(GLIBCXX_CHECK_STDLIB_DECL_AND_LINKAGE_2, [\n   AC_MSG_CHECKING([for $1 declaration])\n-  if test x${glibcpp_cv_func_$1_use+set} != xset; then\n-    AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+  if test x${glibcxx_cv_func_$1_use+set} != xset; then\n+    AC_CACHE_VAL(glibcxx_cv_func_$1_use, [\n       AC_LANG_SAVE\n       AC_LANG_CPLUSPLUS\n       AC_TRY_COMPILE([#include <stdlib.h>],\n                      [ $1(0, 0);],\n-                     [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+                     [glibcxx_cv_func_$1_use=yes], [glibcxx_cv_func_$1_use=no])\n       AC_LANG_RESTORE\n     ])\n   fi\n-  AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n-  if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n+  AC_MSG_RESULT($glibcxx_cv_func_$1_use)\n+  if test x$glibcxx_cv_func_$1_use = x\"yes\"; then\n     AC_CHECK_FUNCS($1)\n   fi\n ])\n@@ -596,21 +596,21 @@ dnl argument 1 is name of function to check\n dnl\n dnl ASSUMES argument is a function with THREE parameters\n dnl\n-dnl GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_3\n-AC_DEFUN(GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_3, [\n+dnl GLIBCXX_CHECK_STDLIB_DECL_AND_LINKAGE_3\n+AC_DEFUN(GLIBCXX_CHECK_STDLIB_DECL_AND_LINKAGE_3, [\n   AC_MSG_CHECKING([for $1 declaration])\n-  if test x${glibcpp_cv_func_$1_use+set} != xset; then\n-    AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+  if test x${glibcxx_cv_func_$1_use+set} != xset; then\n+    AC_CACHE_VAL(glibcxx_cv_func_$1_use, [\n       AC_LANG_SAVE\n       AC_LANG_CPLUSPLUS\n       AC_TRY_COMPILE([#include <stdlib.h>],\n                      [ $1(0, 0, 0);],\n-                     [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+                     [glibcxx_cv_func_$1_use=yes], [glibcxx_cv_func_$1_use=no])\n       AC_LANG_RESTORE\n     ])\n   fi\n-  AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n-  if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n+  AC_MSG_RESULT($glibcxx_cv_func_$1_use)\n+  if test x$glibcxx_cv_func_$1_use = x\"yes\"; then\n     AC_CHECK_FUNCS($1)\n   fi\n ])\n@@ -628,31 +628,31 @@ dnl argument 1 is name of function to check\n dnl\n dnl ASSUMES argument is a math function with ONE parameter\n dnl\n-dnl GLIBCPP_CHECK_BUILTIN_MATH_DECL_LINKAGE_1\n-AC_DEFUN(GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1, [\n+dnl GLIBCXX_CHECK_BUILTIN_MATH_DECL_LINKAGE_1\n+AC_DEFUN(GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1, [\n   AC_MSG_CHECKING([for $1 declaration])\n-  if test x${glibcpp_cv_func_$1_use+set} != xset; then\n-    AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+  if test x${glibcxx_cv_func_$1_use+set} != xset; then\n+    AC_CACHE_VAL(glibcxx_cv_func_$1_use, [\n       AC_LANG_SAVE\n       AC_LANG_CPLUSPLUS\n       AC_TRY_COMPILE([#include <math.h>],\n                      [ $1(0);],\n-                     [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+                     [glibcxx_cv_func_$1_use=yes], [glibcxx_cv_func_$1_use=no])\n       AC_LANG_RESTORE\n     ])\n   fi\n-  AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n-  if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n+  AC_MSG_RESULT($glibcxx_cv_func_$1_use)\n+  if test x$glibcxx_cv_func_$1_use = x\"yes\"; then\n     AC_MSG_CHECKING([for $1 linkage])\n-    if test x${glibcpp_cv_func_$1_link+set} != xset; then\n-      AC_CACHE_VAL(glibcpp_cv_func_$1_link, [\n+    if test x${glibcxx_cv_func_$1_link+set} != xset; then\n+      AC_CACHE_VAL(glibcxx_cv_func_$1_link, [\n         AC_TRY_LINK([#include <math.h>],\n                     [ $1(0);],\n-                    [glibcpp_cv_func_$1_link=yes], [glibcpp_cv_func_$1_link=no])\n+                    [glibcxx_cv_func_$1_link=yes], [glibcxx_cv_func_$1_link=no])\n       ])\n     fi\n-    AC_MSG_RESULT($glibcpp_cv_func_$1_link)\n-    if test x$glibcpp_cv_func_$1_link = x\"yes\"; then\n+    AC_MSG_RESULT($glibcxx_cv_func_$1_link)\n+    if test x$glibcxx_cv_func_$1_link = x\"yes\"; then\n       ac_tr_func=HAVE_`echo $1 | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`\n       AC_DEFINE_UNQUOTED(${ac_tr_func})\n     fi\n@@ -678,27 +678,27 @@ dnl check for __builtin_cosf\n dnl check for __builtin_cos\n dnl check for __builtin_cosl\n dnl\n-dnl GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT\n-AC_DEFUN(GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT, [\n+dnl GLIBCXX_CHECK_BUILTIN_MATH_SUPPORT\n+AC_DEFUN(GLIBCXX_CHECK_BUILTIN_MATH_SUPPORT, [\n   dnl Test for builtin math functions.\n   dnl These are made in gcc/c-common.c\n-  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_abs)\n-  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_fabsf)\n-  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_fabs)\n-  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_fabsl)\n-  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_labs)\n+  GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_abs)\n+  GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_fabsf)\n+  GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_fabs)\n+  GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_fabsl)\n+  GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_labs)\n \n-  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sqrtf)\n-  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sqrt)\n-  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sqrtl)\n+  GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sqrtf)\n+  GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sqrt)\n+  GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sqrtl)\n \n-  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sinf)\n-  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sin)\n-  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sinl)\n+  GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sinf)\n+  GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sin)\n+  GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_sinl)\n \n-  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_cosf)\n-  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_cos)\n-  GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_cosl)\n+  GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_cosf)\n+  GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_cos)\n+  GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_cosl)\n \n   dnl There is, without a doubt, a more elegant way to have these\n   dnl names exported so that they won't be stripped out of acconfig.h by\n@@ -736,14 +736,14 @@ dnl Define HAVE_STRTOLD if \"strtold\" is declared and links\n dnl Define HAVE_STRTOF if \"strtof\" is declared and links\n dnl Define HAVE_DRAND48 if \"drand48\" is declared and links\n dnl\n-dnl GLIBCPP_CHECK_STDLIB_SUPPORT\n-AC_DEFUN(GLIBCPP_CHECK_STDLIB_SUPPORT, [\n+dnl GLIBCXX_CHECK_STDLIB_SUPPORT\n+AC_DEFUN(GLIBCXX_CHECK_STDLIB_SUPPORT, [\n   ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n   ac_save_CXXFLAGS=\"$CXXFLAGS\"\n   CXXFLAGS='-fno-builtin -D_GNU_SOURCE'\n \n-  GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_2(strtold)\n-  GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_2(strtof)\n+  GLIBCXX_CHECK_STDLIB_DECL_AND_LINKAGE_2(strtold)\n+  GLIBCXX_CHECK_STDLIB_DECL_AND_LINKAGE_2(strtof)\n   AC_CHECK_FUNCS(drand48)\n \n   CXXFLAGS=\"$ac_save_CXXFLAGS\"\n@@ -758,8 +758,8 @@ dnl This might seem like overkill but experience has shown that it's not...\n dnl\n dnl Define HAVE_CARGF etc if \"cargf\" is found.\n dnl\n-dnl GLIBCPP_CHECK_MATH_SUPPORT\n-AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n+dnl GLIBCXX_CHECK_MATH_SUPPORT\n+AC_DEFUN(GLIBCXX_CHECK_MATH_SUPPORT, [\n   ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n   ac_save_CXXFLAGS=\"$CXXFLAGS\"\n   CXXFLAGS='-fno-builtin -D_GNU_SOURCE'\n@@ -770,90 +770,90 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n   LIBS=\"$LIBS $libm\"\n \n   dnl Check to see if certain C math functions exist.\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isinf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isnan)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(finite)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(copysign)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3(sincos)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(fpclass)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(qfpclass)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(hypot)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(isinf)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(isnan)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(finite)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(copysign)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_3(sincos)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(fpclass)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(qfpclass)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(hypot)\n \n   dnl Check to see if basic C math functions have float versions.\n-  GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(float trig,\n+  GLIBCXX_CHECK_MATH_DECLS_AND_LINKAGES_1(float trig,\n                                           float_trig,\n                                           acosf asinf atanf \\\n                                           cosf sinf tanf \\\n                                           coshf sinhf tanhf)\n-  GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(float round,\n+  GLIBCXX_CHECK_MATH_DECLS_AND_LINKAGES_1(float round,\n                                           float_round,\n                                           ceilf floorf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(expf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isnanf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isinff)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(atan2f)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(fabsf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(fmodf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(frexpf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(hypotf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(ldexpf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(logf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(log10f)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(modff)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(powf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(sqrtf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3(sincosf)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(finitef)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(expf)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(isnanf)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(isinff)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(atan2f)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(fabsf)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(fmodf)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(frexpf)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(hypotf)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(ldexpf)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(logf)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(log10f)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(modff)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(powf)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(sqrtf)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_3(sincosf)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(finitef)\n \n   dnl Check to see if basic C math functions have long double versions.\n-  GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(long double trig,\n+  GLIBCXX_CHECK_MATH_DECLS_AND_LINKAGES_1(long double trig,\n                                           long_double_trig,\n                                           acosl asinl atanl \\\n                                           cosl sinl tanl \\\n                                           coshl sinhl tanhl)\n-  GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(long double round,\n+  GLIBCXX_CHECK_MATH_DECLS_AND_LINKAGES_1(long double round,\n                                           long_double_round,\n                                           ceill floorl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isnanl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isinfl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(copysignl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(atan2l)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(expl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(fabsl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(fmodl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(frexpl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(hypotl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(ldexpl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(logl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(log10l)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(modfl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(powl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(sqrtl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3(sincosl)\n-  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(finitel)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(isnanl)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(isinfl)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(copysignl)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(atan2l)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(expl)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(fabsl)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(fmodl)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(frexpl)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(hypotl)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(ldexpl)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(logl)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(log10l)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(modfl)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2(powl)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(sqrtl)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_3(sincosl)\n+  GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(finitel)\n \n   dnl Some runtimes have these functions with a preceding underscore. Please\n   dnl keep this sync'd with the one above. And if you add any new symbol,\n   dnl please add the corresponding block in the @BOTTOM@ section of acconfig.h.\n   dnl Check to see if certain C math functions exist.\n \n   dnl Check to see if basic C math functions have float versions.\n-  GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(_float trig,\n+  GLIBCXX_CHECK_MATH_DECLS_AND_LINKAGES_1(_float trig,\n                                           _float_trig,\n                                           _acosf _asinf _atanf \\\n                                           _cosf _sinf _tanf \\\n                                           _coshf _sinhf _tanhf)\n-  GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(_float round,\n+  GLIBCXX_CHECK_MATH_DECLS_AND_LINKAGES_1(_float round,\n                                           _float_round,\n                                           _ceilf _floorf)\n \n   dnl Check to see if basic C math functions have long double versions.\n-  GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(_long double trig,\n+  GLIBCXX_CHECK_MATH_DECLS_AND_LINKAGES_1(_long double trig,\n                                           _long_double_trig,\n                                           _acosl _asinl _atanl \\\n                                           _cosl _sinl _tanl \\\n                                           _coshl _sinhl _tanhl)\n-  GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(_long double round,\n+  GLIBCXX_CHECK_MATH_DECLS_AND_LINKAGES_1(_long double round,\n                                           _long_double_round,\n                                           _ceill _floorl)\n \n@@ -869,8 +869,8 @@ dnl Don't compile bits in math/* if native support exits.\n dnl\n dnl Define USE_COMPLEX_LONG_DOUBLE etc if \"copysignl\" is found.\n dnl\n-dnl GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT\n-AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n+dnl GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n+AC_DEFUN(GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT, [\n   dnl Check for complex versions of math functions of platform.  This will\n   dnl always pass if libm is available, and fail if it isn't.  If it is\n   dnl available, we assume we'll need it later, so add it to LIBS.\n@@ -884,7 +884,7 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n   dnl Compile the long double complex functions only if the function\n   dnl provides the non-complex long double functions that are needed.\n   dnl Currently this includes copysignl, which should be\n-  dnl cached from the GLIBCPP_CHECK_MATH_SUPPORT macro, above.\n+  dnl cached from the GLIBCXX_CHECK_MATH_SUPPORT macro, above.\n   if test x$ac_cv_func_copysignl = x\"yes\"; then\n     AC_CHECK_FUNCS([__signbitl], , [LIBMATHOBJS=\"$LIBMATHOBJS signbitl.lo\"])\n   fi\n@@ -900,9 +900,9 @@ dnl Check to see what architecture and operating system we are compiling\n dnl for.  Also, if architecture- or OS-specific flags are required for\n dnl compilation, pick them up here.\n dnl\n-dnl GLIBCPP_CHECK_HOST\n-AC_DEFUN(GLIBCPP_CHECK_HOST, [\n-  . [$]{glibcpp_basedir}/configure.host\n+dnl GLIBCXX_CHECK_HOST\n+AC_DEFUN(GLIBCXX_CHECK_HOST, [\n+  . [$]{glibcxx_basedir}/configure.host\n   AC_MSG_RESULT(CPU config directory is $cpu_include_dir)\n   AC_MSG_RESULT(OS config directory is $os_include_dir)\n ])\n@@ -913,11 +913,11 @@ dnl Check to see if this target can enable the wchar_t parts of libstdc++.\n dnl If --disable-c-mbchar was given, no wchar_t stuff is enabled.  (This\n dnl must have been previously checked.)\n dnl\n-dnl Define _GLIBCPP_USE_WCHAR_T if all the bits are found\n+dnl Define _GLIBCXX_USE_WCHAR_T if all the bits are found\n dnl Define HAVE_MBSTATE_T if mbstate_t is not in wchar.h\n dnl\n-dnl GLIBCPP_CHECK_WCHAR_T_SUPPORT\n-AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n+dnl GLIBCXX_CHECK_WCHAR_T_SUPPORT\n+AC_DEFUN(GLIBCXX_CHECK_WCHAR_T_SUPPORT, [\n   dnl Wide characters disabled by default.\n \n   dnl Test wchar.h for mbstate_t, which is needed for char_traits and\n@@ -1011,7 +1011,7 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n     dnl above support is present.\n     if test x\"$ac_isoC99_wchar_t\" = xyes && \n \ttest x\"$ac_XPG2_wchar_t\" = xyes; then\n-      AC_DEFINE(_GLIBCPP_USE_WCHAR_T)\n+      AC_DEFINE(_GLIBCXX_USE_WCHAR_T)\n       enable_wchar_t=yes\n     fi\n   fi\n@@ -1023,7 +1023,7 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n dnl\n dnl Check to see if debugging libraries are to be built.\n dnl\n-dnl GLIBCPP_ENABLE_DEBUG\n+dnl GLIBCXX_ENABLE_DEBUG\n dnl\n dnl --enable-libstdcxx-debug\n dnl builds a separate set of debugging libraries in addition to the\n@@ -1035,53 +1035,53 @@ dnl\n dnl --enable-libstdcxx-debug-flags=FLAGS\n dnl iff --enable-debug == yes, then use FLAGS to build the debug library.\n dnl\n-dnl  +  Usage:  GLIBCPP_ENABLE_DEBUG[(DEFAULT)]\n+dnl  +  Usage:  GLIBCXX_ENABLE_DEBUG[(DEFAULT)]\n dnl       Where DEFAULT is either `yes' or `no'.  If ommitted, it\n dnl       defaults to `no'.\n-AC_DEFUN(GLIBCPP_ENABLE_DEBUG, [dnl\n-define([GLIBCPP_ENABLE_DEBUG_DEFAULT], ifelse($1, yes, yes, no))dnl\n+AC_DEFUN(GLIBCXX_ENABLE_DEBUG, [dnl\n+define([GLIBCXX_ENABLE_DEBUG_DEFAULT], ifelse($1, yes, yes, no))dnl\n AC_ARG_ENABLE(libstdcxx_debug,\n changequote(<<, >>)dnl\n-<<  --enable-libstdcxx-debug          build extra debug library [default=>>GLIBCPP_ENABLE_DEBUG_DEFAULT],\n+<<  --enable-libstdcxx-debug          build extra debug library [default=>>GLIBCXX_ENABLE_DEBUG_DEFAULT],\n changequote([, ])dnl\n [case \"${enableval}\" in\n  yes) enable_libstdcxx_debug=yes ;;\n  no)  enable_libstdcxx_debug=no ;;\n  *)   AC_MSG_ERROR([Unknown argument to enable/disable extra debugging]) ;;\n  esac],\n-enable_libstdcxx_debug=GLIBCPP_ENABLE_DEBUG_DEFAULT)dnl\n+enable_libstdcxx_debug=GLIBCXX_ENABLE_DEBUG_DEFAULT)dnl\n AC_MSG_CHECKING([for additional debug build])\n AC_MSG_RESULT($enable_libstdcxx_debug)\n-AM_CONDITIONAL(GLIBCPP_BUILD_DEBUG, test \"$enable_libstdcxx_debug\" = yes)\n+AM_CONDITIONAL(GLIBCXX_BUILD_DEBUG, test \"$enable_libstdcxx_debug\" = yes)\n ])\n \n \n dnl Check for explicit debug flags.\n dnl\n-dnl GLIBCPP_ENABLE_DEBUG_FLAGS\n+dnl GLIBCXX_ENABLE_DEBUG_FLAGS\n dnl\n dnl --enable-libstdcxx-debug-flags='-O1'\n dnl is a general method for passing flags to be used when\n dnl building debug libraries with --enable-debug.\n dnl\n dnl --disable-libstdcxx-debug-flags does nothing.\n-dnl  +  Usage:  GLIBCPP_ENABLE_DEBUG_FLAGS(default flags)\n+dnl  +  Usage:  GLIBCXX_ENABLE_DEBUG_FLAGS(default flags)\n dnl       If \"default flags\" is an empty string (or \"none\"), the effect is\n dnl       the same as --disable or --enable=no.\n-AC_DEFUN(GLIBCPP_ENABLE_DEBUG_FLAGS, [dnl\n-define([GLIBCPP_ENABLE_DEBUG_FLAGS_DEFAULT], ifelse($1,,, $1))dnl\n+AC_DEFUN(GLIBCXX_ENABLE_DEBUG_FLAGS, [dnl\n+define([GLIBCXX_ENABLE_DEBUG_FLAGS_DEFAULT], ifelse($1,,, $1))dnl\n AC_ARG_ENABLE(libstdcxx_debug_flags,\n changequote(<<, >>)dnl\n <<  --enable-libstdcxx-debug-flags=FLAGS    pass compiler FLAGS when building \n                                             debug library;\n-                                [default=>>GLIBCPP_ENABLE_DEBUG_FLAGS_DEFAULT],\n+                                [default=>>GLIBCXX_ENABLE_DEBUG_FLAGS_DEFAULT],\n changequote([, ])dnl\n [case \"${enableval}\" in\n  none)  ;;\n  -*) enable_libstdcxx_debug_flags=\"${enableval}\" ;;\n  *)   AC_MSG_ERROR([Unknown argument to extra debugging flags]) ;;\n  esac],\n-enable_libstdcxx_debug_flags=GLIBCPP_ENABLE_DEBUG_FLAGS_DEFAULT)dnl\n+enable_libstdcxx_debug_flags=GLIBCXX_ENABLE_DEBUG_FLAGS_DEFAULT)dnl\n \n dnl Option parsed, now set things appropriately\n case x\"$enable_libstdcxx_debug\" in\n@@ -1107,7 +1107,7 @@ AC_MSG_RESULT($DEBUG_FLAGS)\n dnl\n dnl Check for \"unusual\" flags to pass to the compiler while building.\n dnl\n-dnl GLIBCPP_ENABLE_CXX_FLAGS\n+dnl GLIBCXX_ENABLE_CXX_FLAGS\n dnl --enable-cxx-flags='-foo -bar -baz' is a general method for passing\n dnl     experimental flags such as -fhonor-std, -fsquangle, -Dfloat=char, etc.\n dnl     Somehow this same set of flags must be passed when [re]building\n@@ -1116,16 +1116,16 @@ dnl --disable-cxx-flags passes nothing.\n dnl  +  See http://gcc.gnu.org/ml/libstdc++/2000-q2/msg00131.html\n dnl         http://gcc.gnu.org/ml/libstdc++/2000-q2/msg00284.html\n dnl         http://gcc.gnu.org/ml/libstdc++/2000-q1/msg00035.html\n-dnl  +  Usage:  GLIBCPP_ENABLE_CXX_FLAGS(default flags)\n+dnl  +  Usage:  GLIBCXX_ENABLE_CXX_FLAGS(default flags)\n dnl       If \"default flags\" is an empty string (or \"none\"), the effect is\n dnl       the same as --disable or --enable=no.\n-AC_DEFUN(GLIBCPP_ENABLE_CXX_FLAGS, [dnl\n-define([GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT], ifelse($1,,, $1))dnl\n+AC_DEFUN(GLIBCXX_ENABLE_CXX_FLAGS, [dnl\n+define([GLIBCXX_ENABLE_CXX_FLAGS_DEFAULT], ifelse($1,,, $1))dnl\n AC_MSG_CHECKING([for extra compiler flags for building])\n AC_ARG_ENABLE(cxx_flags,\n changequote(<<, >>)dnl\n <<  --enable-cxx-flags=FLAGS     pass compiler FLAGS when building library;\n-                                  [default=>>GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT],\n+                                  [default=>>GLIBCXX_ENABLE_CXX_FLAGS_DEFAULT],\n changequote([, ])dnl\n [case \"x$enable_cxx_flags\" in\n   xyes)\n@@ -1135,7 +1135,7 @@ changequote([, ])dnl\n   *)\n     enable_cxx_flags=\"$enableval\" ;;\n esac],\n-enable_cxx_flags=GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT)\n+enable_cxx_flags=GLIBCXX_ENABLE_CXX_FLAGS_DEFAULT)\n \n dnl Run through flags (either default or command-line) and set anything\n dnl extra (e.g., #defines) that must accompany particular g++ options.\n@@ -1158,13 +1158,13 @@ AC_SUBST(EXTRA_CXX_FLAGS)\n dnl\n dnl Check for which locale library to use:  gnu or generic.\n dnl\n-dnl GLIBCPP_ENABLE_CLOCALE\n+dnl GLIBCXX_ENABLE_CLOCALE\n dnl --enable-clocale=gnu sets config/locale/c_locale_gnu.cc and friends\n dnl --enable-clocale=generic sets config/locale/c_locale_generic.cc and friends\n dnl\n dnl default is generic\n dnl\n-AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n+AC_DEFUN(GLIBCXX_ENABLE_CLOCALE, [\n   AC_MSG_CHECKING([for clocale to use])\n   AC_ARG_ENABLE(clocale,\n   [  --enable-clocale        enable model for target locale package.\n@@ -1182,10 +1182,10 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n   if test x$enable_clocale_flag = xno; then\n     case x${target_os} in\n       xlinux* | xgnu*)\n-\tAC_EGREP_CPP([_GLIBCPP_ok], [\n+\tAC_EGREP_CPP([_GLIBCXX_ok], [\n         #include <features.h>\n         #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 2)\n-          _GLIBCPP_ok\n+          _GLIBCXX_ok\n         #endif\n         ], enable_clocale_flag=gnu, enable_clocale_flag=generic)\n \n@@ -1267,11 +1267,11 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       fi\n       # Export the build objects.\n       for ling in $ALL_LINGUAS; do \\\n-        glibcpp_MOFILES=\"$glibcpp_MOFILES $ling.mo\"; \\\n-        glibcpp_POFILES=\"$glibcpp_POFILES $ling.po\"; \\\n+        glibcxx_MOFILES=\"$glibcxx_MOFILES $ling.mo\"; \\\n+        glibcxx_POFILES=\"$glibcxx_POFILES $ling.po\"; \\\n       done\n-      AC_SUBST(glibcpp_MOFILES)\n-      AC_SUBST(glibcpp_POFILES)\n+      AC_SUBST(glibcxx_MOFILES)\n+      AC_SUBST(glibcxx_POFILES)\n \n       CLOCALE_H=config/locale/gnu/c_locale.h\n       CLOCALE_CC=config/locale/gnu/c_locale.cc\n@@ -1312,16 +1312,16 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n \n   # This is where the testsuite looks for locale catalogs, using the\n   # -DLOCALEDIR define during testsuite compilation.\n-  glibcpp_localedir=${glibcpp_builddir}/po/share/locale\n-  AC_SUBST(glibcpp_localedir)\n+  glibcxx_localedir=${glibcxx_builddir}/po/share/locale\n+  AC_SUBST(glibcxx_localedir)\n \n   # A standalone libintl (e.g., GNU libintl) may be in use.\n   if test $USE_NLS = yes; then\n     AC_CHECK_HEADERS([libintl.h], [], USE_NLS=no)\n     AC_SEARCH_LIBS(gettext, intl, [], USE_NLS=no)\n   fi\n   if test $USE_NLS = yes; then\n-    AC_DEFINE(_GLIBCPP_USE_NLS)\n+    AC_DEFINE(_GLIBCXX_USE_NLS)\n   fi\n \n   AC_SUBST(USE_NLS)\n@@ -1344,11 +1344,11 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n dnl\n dnl Check for which I/O library to use:  stdio, or something specific.\n dnl\n-dnl GLIBCPP_ENABLE_CSTDIO\n+dnl GLIBCXX_ENABLE_CSTDIO\n dnl\n dnl default is stdio\n dnl\n-AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n+AC_DEFUN(GLIBCXX_ENABLE_CSTDIO, [\n   AC_MSG_CHECKING([for cstdio to use])\n   AC_ARG_ENABLE(cstdio,\n   [  --enable-cstdio         enable stdio for target io package.\n@@ -1389,7 +1389,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n dnl\n dnl Check to see if building and using a C++ precompiled header can be done.\n dnl\n-dnl GLIBCPP_ENABLE_PCH\n+dnl GLIBCXX_ENABLE_PCH\n dnl\n dnl --enable-libstdcxx-pch=yes\n dnl default, this shows intent to use stdc++.h.gch If it looks like it\n@@ -1399,18 +1399,18 @@ dnl\n dnl --disable-libstdcxx-pch\n dnl turns off attempts to use or build stdc++.h.gch.\n dnl\n-AC_DEFUN(GLIBCPP_ENABLE_PCH, [dnl\n-define([GLIBCPP_ENABLE_PCH_DEFAULT], ifelse($1,,, $1))dnl\n+AC_DEFUN(GLIBCXX_ENABLE_PCH, [dnl\n+define([GLIBCXX_ENABLE_PCH_DEFAULT], ifelse($1,,, $1))dnl\n AC_ARG_ENABLE(libstdcxx_pch,\n changequote(<<, >>)dnl\n-<<  --enable-libstdcxx-pch     build pre-compiled libstdc++ includes [default=>>GLIBCPP_ENABLE_PCH_DEFAULT],\n+<<  --enable-libstdcxx-pch     build pre-compiled libstdc++ includes [default=>>GLIBCXX_ENABLE_PCH_DEFAULT],\n changequote([, ])dnl\n [case \"${enableval}\" in\n  yes) enable_libstdcxx_pch=yes ;;\n  no)  enable_libstdcxx_pch=no ;;\n  *)   AC_MSG_ERROR([Unknown argument to enable/disable PCH]) ;;\n  esac],\n-enable_libstdcxx_pch=GLIBCPP_ENABLE_PCH_DEFAULT)dnl\n+enable_libstdcxx_pch=GLIBCXX_ENABLE_PCH_DEFAULT)dnl\n \n   if test x$enable_libstdcxx_pch = xyes; then\n     ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n@@ -1439,13 +1439,13 @@ enable_libstdcxx_pch=GLIBCPP_ENABLE_PCH_DEFAULT)dnl\n   AC_MSG_CHECKING([for enabled PCH])\n   AC_MSG_RESULT([$enable_libstdcxx_pch])\n \n-  AM_CONDITIONAL(GLIBCPP_BUILD_PCH, test \"$enable_libstdcxx_pch\" = yes)\n+  AM_CONDITIONAL(GLIBCXX_BUILD_PCH, test \"$enable_libstdcxx_pch\" = yes)\n   if test \"$enable_libstdcxx_pch\" = yes; then\n-\tglibcpp_PCHFLAGS=\"-include bits/stdc++.h\"\n+\tglibcxx_PCHFLAGS=\"-include bits/stdc++.h\"\n   else\n-\tglibcpp_PCHFLAGS=\"\"\n+\tglibcxx_PCHFLAGS=\"\"\n   fi\n-  AC_SUBST(glibcpp_PCHFLAGS)\n+  AC_SUBST(glibcxx_PCHFLAGS)\n ])\n \n dnl\n@@ -1460,18 +1460,18 @@ dnl having to write complex code (the sed commands to clean the macro\n dnl namespace are complex and fragile enough as it is).  We must also\n dnl add a relative path so that -I- is supported properly.\n dnl\n-AC_DEFUN(GLIBCPP_ENABLE_THREADS, [\n+AC_DEFUN(GLIBCXX_ENABLE_THREADS, [\n   AC_MSG_CHECKING([for thread model used by GCC])\n   target_thread_file=`$CC -v 2>&1 | sed -n 's/^Thread model: //p'`\n   AC_MSG_RESULT([$target_thread_file])\n \n   if test $target_thread_file != single; then\n     AC_DEFINE(HAVE_GTHR_DEFAULT)\n-    AC_DEFINE(_GLIBCPP_SUPPORTS_WEAK, __GXX_WEAK__)\n+    AC_DEFINE(_GLIBCXX_SUPPORTS_WEAK, __GXX_WEAK__)\n   fi\n \n-  glibcpp_thread_h=gthr-$target_thread_file.h\n-  AC_SUBST(glibcpp_thread_h)\n+  glibcxx_thread_h=gthr-$target_thread_file.h\n+  AC_SUBST(glibcxx_thread_h)\n ])\n \n \n@@ -1480,13 +1480,13 @@ dnl Check for exception handling support.  If an explicit enable/disable\n dnl sjlj exceptions is given, we don't have to detect.  Otherwise the\n dnl target may or may not support call frame exceptions.\n dnl\n-dnl GLIBCPP_ENABLE_SJLJ_EXCEPTIONS\n+dnl GLIBCXX_ENABLE_SJLJ_EXCEPTIONS\n dnl --enable-sjlj-exceptions forces the use of builtin setjmp.\n dnl --disable-sjlj-exceptions forces the use of call frame unwinding.\n dnl\n-dnl Define _GLIBCPP_SJLJ_EXCEPTIONS if the compiler is configured for it.\n+dnl Define _GLIBCXX_SJLJ_EXCEPTIONS if the compiler is configured for it.\n dnl\n-AC_DEFUN(GLIBCPP_ENABLE_SJLJ_EXCEPTIONS, [\n+AC_DEFUN(GLIBCXX_ENABLE_SJLJ_EXCEPTIONS, [\n   AC_MSG_CHECKING([for exception model to use])\n   AC_LANG_SAVE\n   AC_LANG_CPLUSPLUS\n@@ -1522,7 +1522,7 @@ EOF\n    CXXFLAGS=\"$old_CXXFLAGS\"\n    rm -f conftest*])\n    if test x$enable_sjlj_exceptions = xyes; then\n-     AC_DEFINE(_GLIBCPP_SJLJ_EXCEPTIONS, 1,\n+     AC_DEFINE(_GLIBCXX_SJLJ_EXCEPTIONS, 1,\n         [Define if the compiler is configured for setjmp/longjmp exceptions.])\n      ac_exception_model_name=sjlj\n    elif test x$enable_sjlj_exceptions = xno; then\n@@ -1542,13 +1542,13 @@ dnl (_Unwind_RaiseException, _Unwind_Resume, etc.) are defined by\n dnl libunwind instead of libgcc and that libstdc++ has a dependency\n dnl on libunwind as well as libgcc.\n dnl\n-dnl GLIBCPP_ENABLE_LIBUNWIND_EXCEPTIONS\n+dnl GLIBCXX_ENABLE_LIBUNWIND_EXCEPTIONS\n dnl --enable-libunwind-exceptions forces the use of libunwind.\n dnl --disable-libunwind-exceptions assumes there is no libunwind.\n dnl\n-dnl Define _GLIBCPP_LIBUNWIND_EXCEPTIONS if requested.\n+dnl Define _GLIBCXX_LIBUNWIND_EXCEPTIONS if requested.\n dnl\n-AC_DEFUN(GLIBCPP_ENABLE_LIBUNWIND_EXCEPTIONS, [\n+AC_DEFUN(GLIBCXX_ENABLE_LIBUNWIND_EXCEPTIONS, [\n   AC_MSG_CHECKING([for use of libunwind])\n   AC_ARG_ENABLE(libunwind-exceptions,\n   [  --enable-libunwind-exceptions  force use of libunwind for exceptions],\n@@ -1567,28 +1567,28 @@ AC_DEFUN(GLIBCPP_ENABLE_LIBUNWIND_EXCEPTIONS, [\n dnl\n dnl Check for ISO/IEC 9899:1999 \"C99\" support.\n dnl\n-dnl GLIBCPP_ENABLE_C99\n-dnl --enable-c99 defines _GLIBCPP_USE_C99\n-dnl --disable-c99 leaves _GLIBCPP_USE_C99 undefined\n-dnl  +  Usage:  GLIBCPP_ENABLE_C99[(DEFAULT)]\n+dnl GLIBCXX_ENABLE_C99\n+dnl --enable-c99 defines _GLIBCXX_USE_C99\n+dnl --disable-c99 leaves _GLIBCXX_USE_C99 undefined\n+dnl  +  Usage:  GLIBCXX_ENABLE_C99[(DEFAULT)]\n dnl       Where DEFAULT is either `yes' or `no'.  If omitted, it\n dnl       defaults to `no'.\n dnl  +  If 'C99' stuff is not available, ignores DEFAULT and sets `no'.\n dnl\n-dnl GLIBCPP_ENABLE_C99\n-AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n-  define([GLIBCPP_ENABLE_C99_DEFAULT], ifelse($1, yes, yes, no))dnl\n+dnl GLIBCXX_ENABLE_C99\n+AC_DEFUN(GLIBCXX_ENABLE_C99, [dnl\n+  define([GLIBCXX_ENABLE_C99_DEFAULT], ifelse($1, yes, yes, no))dnl\n \n   AC_ARG_ENABLE(c99,\n   changequote(<<, >>)dnl\n-  <<--enable-c99            turns on 'ISO/IEC 9899:1999 support' [default=>>GLIBCPP_ENABLE_C99_DEFAULT],\n+  <<--enable-c99            turns on 'ISO/IEC 9899:1999 support' [default=>>GLIBCXX_ENABLE_C99_DEFAULT],\n   changequote([, ])dnl\n   [case \"$enableval\" in\n    yes) enable_c99=yes ;;\n    no)  enable_c99=no ;;\n    *)   AC_MSG_ERROR([Unknown argument to enable/disable C99]) ;;\n    esac],\n-  enable_c99=GLIBCPP_ENABLE_C99_DEFAULT)dnl\n+  enable_c99=GLIBCXX_ENABLE_C99_DEFAULT)dnl\n \n   AC_LANG_SAVE\n   AC_LANG_CPLUSPLUS\n@@ -1691,7 +1691,7 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n \n   # Option parsed, now set things appropriately\n   if test x\"$enable_c99\" = x\"yes\"; then\n-    AC_DEFINE(_GLIBCPP_USE_C99)\n+    AC_DEFINE(_GLIBCXX_USE_C99)\n   fi\n \n   AC_LANG_RESTORE\n@@ -1703,28 +1703,28 @@ dnl Check for template specializations for the 'long long' type extension.\n dnl The result determines only whether 'long long' I/O is enabled; things\n dnl like numeric_limits<> specializations are always available.\n dnl\n-dnl GLIBCPP_ENABLE_LONG_LONG\n-dnl --enable-long-long defines _GLIBCPP_USE_LONG_LONG\n-dnl --disable-long-long leaves _GLIBCPP_USE_LONG_LONG undefined\n-dnl  +  Usage:  GLIBCPP_ENABLE_LONG_LONG[(DEFAULT)]\n+dnl GLIBCXX_ENABLE_LONG_LONG\n+dnl --enable-long-long defines _GLIBCXX_USE_LONG_LONG\n+dnl --disable-long-long leaves _GLIBCXX_USE_LONG_LONG undefined\n+dnl  +  Usage:  GLIBCXX_ENABLE_LONG_LONG[(DEFAULT)]\n dnl       Where DEFAULT is either `yes' or `no'.  If omitted, it\n dnl       defaults to `no'.\n dnl  +  If 'long long' stuff is not available, ignores DEFAULT and sets `no'.\n dnl\n-dnl GLIBCPP_ENABLE_LONG_LONG\n-AC_DEFUN(GLIBCPP_ENABLE_LONG_LONG, [dnl\n-  define([GLIBCPP_ENABLE_LONG_LONG_DEFAULT], ifelse($1, yes, yes, no))dnl\n+dnl GLIBCXX_ENABLE_LONG_LONG\n+AC_DEFUN(GLIBCXX_ENABLE_LONG_LONG, [dnl\n+  define([GLIBCXX_ENABLE_LONG_LONG_DEFAULT], ifelse($1, yes, yes, no))dnl\n \n   AC_ARG_ENABLE(long-long,\n   changequote(<<, >>)dnl\n-  <<--enable-long-long      turns on 'long long' [default=>>GLIBCPP_ENABLE_LONG_LONG_DEFAULT],\n+  <<--enable-long-long      turns on 'long long' [default=>>GLIBCXX_ENABLE_LONG_LONG_DEFAULT],\n   changequote([, ])dnl\n   [case \"$enableval\" in\n    yes) enable_long_long=yes ;;\n    no)  enable_long_long=no ;;\n    *)   AC_MSG_ERROR([Unknown argument to enable/disable long long]) ;;\n    esac],\n-  enable_long_long=GLIBCPP_ENABLE_LONG_LONG_DEFAULT)dnl\n+  enable_long_long=GLIBCXX_ENABLE_LONG_LONG_DEFAULT)dnl\n \n   AC_LANG_SAVE\n   AC_LANG_CPLUSPLUS\n@@ -1738,7 +1738,7 @@ AC_DEFUN(GLIBCPP_ENABLE_LONG_LONG, [dnl\n \n   # Option parsed, now set things appropriately\n   if test x\"$enable_long_long\" = xyes; then\n-    AC_DEFINE(_GLIBCPP_USE_LONG_LONG)\n+    AC_DEFINE(_GLIBCXX_USE_LONG_LONG)\n   fi\n   AC_MSG_RESULT($enable_long_long)\n \n@@ -1749,18 +1749,18 @@ AC_DEFUN(GLIBCPP_ENABLE_LONG_LONG, [dnl\n dnl\n dnl Check for what type of C headers to use.\n dnl\n-dnl GLIBCPP_ENABLE_CHEADERS\n+dnl GLIBCXX_ENABLE_CHEADERS\n dnl --enable-cheaders= [does stuff].\n dnl --disable-cheaders [does not do anything, really].\n-dnl  +  Usage:  GLIBCPP_ENABLE_CHEADERS[(DEFAULT)]\n+dnl  +  Usage:  GLIBCXX_ENABLE_CHEADERS[(DEFAULT)]\n dnl       Where DEFAULT is either `c' or `c_std'.\n dnl       If ommitted, it defaults to `c_std'.\n-AC_DEFUN(GLIBCPP_ENABLE_CHEADERS, [dnl\n-define([GLIBCPP_ENABLE_CHEADERS_DEFAULT], ifelse($1, c_std, c_std, c_std))dnl\n+AC_DEFUN(GLIBCXX_ENABLE_CHEADERS, [dnl\n+define([GLIBCXX_ENABLE_CHEADERS_DEFAULT], ifelse($1, c_std, c_std, c_std))dnl\n AC_MSG_CHECKING([for c header strategy to use])\n AC_ARG_ENABLE(cheaders,\n changequote(<<, >>)dnl\n-<<  --enable-cheaders=MODEL       construct \"C\" header files for g++ [default=>>GLIBCPP_ENABLE_CHEADERS_DEFAULT],\n+<<  --enable-cheaders=MODEL       construct \"C\" header files for g++ [default=>>GLIBCXX_ENABLE_CHEADERS_DEFAULT],\n changequote([, ])\n   [case \"$enableval\" in\n    c)\n@@ -1772,48 +1772,48 @@ changequote([, ])\n    *)   AC_MSG_ERROR([Unknown argument to enable/disable \"C\" headers])\n         ;;\n   esac],\n-  enable_cheaders=GLIBCPP_ENABLE_CHEADERS_DEFAULT)\n+  enable_cheaders=GLIBCXX_ENABLE_CHEADERS_DEFAULT)\n   AC_MSG_RESULT($enable_cheaders)\n \n   dnl Option parsed, now set things appropriately\n   case \"$enable_cheaders\" in\n     c_std)\n-        C_INCLUDE_DIR='${glibcpp_srcdir}/include/c_std'\n+        C_INCLUDE_DIR='${glibcxx_srcdir}/include/c_std'\n         ;;\n     c)\n-        C_INCLUDE_DIR='${glibcpp_srcdir}/include/c'\n+        C_INCLUDE_DIR='${glibcxx_srcdir}/include/c'\n         ;;\n   esac\n \n   AC_SUBST(C_INCLUDE_DIR)\n-  AM_CONDITIONAL(GLIBCPP_C_HEADERS_C, test \"$enable_cheaders\" = c)\n-  AM_CONDITIONAL(GLIBCPP_C_HEADERS_C_STD, test \"$enable_cheaders\" = c_std)\n-  AM_CONDITIONAL(GLIBCPP_C_HEADERS_COMPATIBILITY, test \"$c_compatibility\" = yes)\n+  AM_CONDITIONAL(GLIBCXX_C_HEADERS_C, test \"$enable_cheaders\" = c)\n+  AM_CONDITIONAL(GLIBCXX_C_HEADERS_C_STD, test \"$enable_cheaders\" = c_std)\n+  AM_CONDITIONAL(GLIBCXX_C_HEADERS_COMPATIBILITY, test \"$c_compatibility\" = yes)\n ])\n \n \n dnl\n dnl Check for wide character support.  Has the same effect as the option\n dnl in gcc's configure, but in a form that autoconf can mess with.\n dnl\n-dnl GLIBCPP_ENABLE_C_MBCHAR\n+dnl GLIBCXX_ENABLE_C_MBCHAR\n dnl --enable-c-mbchar requests all the wchar_t stuff.\n dnl --disable-c-mbchar doesn't.\n-dnl  +  Usage:  GLIBCPP_ENABLE_C_MBCHAR[(DEFAULT)]\n+dnl  +  Usage:  GLIBCXX_ENABLE_C_MBCHAR[(DEFAULT)]\n dnl       Where DEFAULT is either `yes' or `no'.  If ommitted, it\n dnl       defaults to `no'.\n-AC_DEFUN(GLIBCPP_ENABLE_C_MBCHAR, [dnl\n-define([GLIBCPP_ENABLE_C_MBCHAR_DEFAULT], ifelse($1, yes, yes, no))dnl\n+AC_DEFUN(GLIBCXX_ENABLE_C_MBCHAR, [dnl\n+define([GLIBCXX_ENABLE_C_MBCHAR_DEFAULT], ifelse($1, yes, yes, no))dnl\n AC_ARG_ENABLE(c-mbchar,\n changequote(<<, >>)dnl\n-<<  --enable-c-mbchar       enable multibyte (wide) characters [default=>>GLIBCPP_ENABLE_C_MBCHAR_DEFAULT],\n+<<  --enable-c-mbchar       enable multibyte (wide) characters [default=>>GLIBCXX_ENABLE_C_MBCHAR_DEFAULT],\n changequote([, ])dnl\n [case \"$enableval\" in\n  yes) enable_c_mbchar=yes ;;\n  no)  enable_c_mbchar=no ;;\n  *)   AC_MSG_ERROR([Unknown argument to enable/disable c-mbchar]) ;;\n  esac],\n-enable_c_mbchar=GLIBCPP_ENABLE_C_MBCHAR_DEFAULT)dnl\n+enable_c_mbchar=GLIBCXX_ENABLE_C_MBCHAR_DEFAULT)dnl\n dnl Option parsed, now other scripts can test enable_c_mbchar for yes/no.\n ])\n \n@@ -1825,10 +1825,10 @@ dnl TOPLEVEL_INCLUDES\n dnl LIBMATH_INCLUDES\n dnl LIBSUPCXX_INCLUDES\n dnl\n-dnl GLIBCPP_EXPORT_INCLUDES\n-AC_DEFUN(GLIBCPP_EXPORT_INCLUDES, [\n+dnl GLIBCXX_EXPORT_INCLUDES\n+AC_DEFUN(GLIBCXX_EXPORT_INCLUDES, [\n   # Root level of the build directory include sources.\n-  GLIBCPP_INCLUDES=\"-I${glibcpp_builddir}/include/${target_alias} -I${glibcpp_builddir}/include\"\n+  GLIBCXX_INCLUDES=\"-I${glibcxx_builddir}/include/${target_alias} -I${glibcxx_builddir}/include\"\n \n   # Passed down for canadian crosses.\n   if test x\"$CANADIAN\" = xyes; then\n@@ -1840,7 +1840,7 @@ AC_DEFUN(GLIBCPP_EXPORT_INCLUDES, [\n   LIBSUPCXX_INCLUDES='-I$(top_srcdir)/libsupc++'\n \n   # Now, export this to all the little Makefiles....\n-  AC_SUBST(GLIBCPP_INCLUDES)\n+  AC_SUBST(GLIBCXX_INCLUDES)\n   AC_SUBST(TOPLEVEL_INCLUDES)\n   AC_SUBST(LIBMATH_INCLUDES)\n   AC_SUBST(LIBSUPCXX_INCLUDES)\n@@ -1850,7 +1850,7 @@ AC_DEFUN(GLIBCPP_EXPORT_INCLUDES, [\n dnl\n dnl Set up *_FLAGS and *FLAGS variables for all sundry Makefile.am's.\n dnl\n-AC_DEFUN(GLIBCPP_EXPORT_FLAGS, [\n+AC_DEFUN(GLIBCXX_EXPORT_FLAGS, [\n   # Optimization flags that are probably a good idea for thrill-seekers. Just\n   # uncomment the lines below and make, everything else is ready to go...\n   # OPTIMIZE_CXXFLAGS = -O3 -fstrict-aliasing -fvtable-gc\n@@ -1862,22 +1862,22 @@ AC_DEFUN(GLIBCPP_EXPORT_FLAGS, [\n ])\n \n dnl\n-dnl  GLIBCPP_EXPORT_INSTALL_INFO\n+dnl  GLIBCXX_EXPORT_INSTALL_INFO\n dnl  calculates gxx_install_dir\n-dnl  exports glibcpp_toolexecdir\n-dnl  exports glibcpp_toolexeclibdir\n-dnl  exports glibcpp_prefixdir\n+dnl  exports glibcxx_toolexecdir\n+dnl  exports glibcxx_toolexeclibdir\n+dnl  exports glibcxx_prefixdir\n dnl\n dnl Assumes cross_compiling bits already done, and with_cross_host in\n dnl particular\n dnl\n-dnl GLIBCPP_EXPORT_INSTALL_INFO\n-AC_DEFUN(GLIBCPP_EXPORT_INSTALL_INFO, [\n-# Assumes glibcpp_builddir, glibcpp_srcdir are alreay set up and\n-# exported correctly in GLIBCPP_CONFIGURE.\n-glibcpp_toolexecdir=no\n-glibcpp_toolexeclibdir=no\n-glibcpp_prefixdir=${prefix}\n+dnl GLIBCXX_EXPORT_INSTALL_INFO\n+AC_DEFUN(GLIBCXX_EXPORT_INSTALL_INFO, [\n+# Assumes glibcxx_builddir, glibcxx_srcdir are alreay set up and\n+# exported correctly in GLIBCXX_CONFIGURE.\n+glibcxx_toolexecdir=no\n+glibcxx_toolexeclibdir=no\n+glibcxx_prefixdir=${prefix}\n \n # Process the option --with-gxx-include-dir=<path to include-files directory>\n AC_MSG_CHECKING([for --with-gxx-include-dir])\n@@ -1923,35 +1923,35 @@ if test $version_specific_libs = yes; then\n   if test x\"$gxx_include_dir\" = x\"no\"; then\n     gxx_include_dir='$(libdir)/gcc-lib/$(target_alias)/'${gcc_version}/include/c++\n   fi\n-  glibcpp_toolexecdir='$(libdir)/gcc-lib/$(target_alias)'\n-  glibcpp_toolexeclibdir='$(toolexecdir)/'${gcc_version}'$(MULTISUBDIR)'\n+  glibcxx_toolexecdir='$(libdir)/gcc-lib/$(target_alias)'\n+  glibcxx_toolexeclibdir='$(toolexecdir)/'${gcc_version}'$(MULTISUBDIR)'\n fi\n \n-# Calculate glibcpp_toolexecdir, glibcpp_toolexeclibdir\n+# Calculate glibcxx_toolexecdir, glibcxx_toolexeclibdir\n # Install a library built with a cross compiler in tooldir, not libdir.\n-if test x\"$glibcpp_toolexecdir\" = x\"no\"; then\n+if test x\"$glibcxx_toolexecdir\" = x\"no\"; then\n   if test -n \"$with_cross_host\" &&\n      test x\"$with_cross_host\" != x\"no\"; then\n-    glibcpp_toolexecdir='$(exec_prefix)/$(target_alias)'\n-    glibcpp_toolexeclibdir='$(toolexecdir)/lib'\n+    glibcxx_toolexecdir='$(exec_prefix)/$(target_alias)'\n+    glibcxx_toolexeclibdir='$(toolexecdir)/lib'\n   else\n-    glibcpp_toolexecdir='$(libdir)/gcc-lib/$(target_alias)'\n-    glibcpp_toolexeclibdir='$(libdir)'\n+    glibcxx_toolexecdir='$(libdir)/gcc-lib/$(target_alias)'\n+    glibcxx_toolexeclibdir='$(libdir)'\n   fi\n   multi_os_directory=`$CC -print-multi-os-directory`\n   case $multi_os_directory in\n   .) ;; # Avoid trailing /.\n-  *) glibcpp_toolexeclibdir=$glibcpp_toolexeclibdir/$multi_os_directory ;;\n+  *) glibcxx_toolexeclibdir=$glibcxx_toolexeclibdir/$multi_os_directory ;;\n   esac\n fi\n \n AC_MSG_CHECKING([for install location])\n AC_MSG_RESULT($gxx_include_dir)\n \n-AC_SUBST(glibcpp_prefixdir)\n+AC_SUBST(glibcxx_prefixdir)\n AC_SUBST(gxx_include_dir)\n-AC_SUBST(glibcpp_toolexecdir)\n-AC_SUBST(glibcpp_toolexeclibdir)\n+AC_SUBST(glibcxx_toolexecdir)\n+AC_SUBST(glibcxx_toolexeclibdir)\n ])\n \n \n@@ -2010,15 +2010,15 @@ dnl @author John Darrington <j.darrington@elvis.murdoch.edu.au>\n dnl @version 1.1 #### replaced Id string now that Id is for lib-v3; pme\n dnl\n dnl #### Changes for libstdc++-v3:  reformatting and linewrapping; prepending\n-dnl #### GLIBCPP_ to the macro name; adding the :-make fallback in the\n+dnl #### GLIBCXX_ to the macro name; adding the :-make fallback in the\n dnl #### conditional's subshell (\" --version\" is not a command), using a\n dnl #### different option to grep(1).\n dnl #### -pme\n dnl #### Fixed Bourne shell portability bug (use ${MAKE-make}, not\n dnl #### ${MAKE:-make}).\n dnl #### -msokolov\n AC_DEFUN(\n-  GLIBCPP_CHECK_GNU_MAKE, [AC_CACHE_CHECK( for GNU make,_cv_gnu_make_command,\n+  GLIBCXX_CHECK_GNU_MAKE, [AC_CACHE_CHECK( for GNU make,_cv_gnu_make_command,\n           _cv_gnu_make_command='' ;\n dnl Search all the common names for GNU make\n           for a in \"${MAKE-make}\" make gmake gnumake ; do\n@@ -2042,16 +2042,16 @@ dnl string, '#' otherwise\n \n dnl Check for headers for, and arguments to, the setrlimit() function.\n dnl Used only in testsuite_hooks.h.\n-AC_DEFUN(GLIBCPP_CHECK_SETRLIMIT_ancilliary, [\n+AC_DEFUN(GLIBCXX_CHECK_SETRLIMIT_ancilliary, [\n   AC_TRY_COMPILE([#include <unistd.h>\n                   #include <sys/time.h>\n                   #include <sys/resource.h>\n                  ], [ int f = RLIMIT_$1 ; ],\n-                 [glibcpp_mresult=1], [glibcpp_mresult=0])\n-  AC_DEFINE_UNQUOTED(HAVE_MEMLIMIT_$1, $glibcpp_mresult,\n+                 [glibcxx_mresult=1], [glibcxx_mresult=0])\n+  AC_DEFINE_UNQUOTED(HAVE_MEMLIMIT_$1, $glibcxx_mresult,\n                      [Only used in build directory testsuite_hooks.h.])\n ])\n-AC_DEFUN(GLIBCPP_CHECK_SETRLIMIT, [\n+AC_DEFUN(GLIBCXX_CHECK_SETRLIMIT, [\n   setrlimit_have_headers=yes\n   AC_CHECK_HEADERS(unistd.h sys/time.h sys/resource.h,\n                    [],\n@@ -2060,10 +2060,10 @@ AC_DEFUN(GLIBCPP_CHECK_SETRLIMIT, [\n   # won't be seeing any of these during testsuite compilation.\n   if test $setrlimit_have_headers = yes; then\n     # Can't do these in a loop, else the resulting syntax is wrong.\n-    GLIBCPP_CHECK_SETRLIMIT_ancilliary(DATA)\n-    GLIBCPP_CHECK_SETRLIMIT_ancilliary(RSS)\n-    GLIBCPP_CHECK_SETRLIMIT_ancilliary(VMEM)\n-    GLIBCPP_CHECK_SETRLIMIT_ancilliary(AS)\n+    GLIBCXX_CHECK_SETRLIMIT_ancilliary(DATA)\n+    GLIBCXX_CHECK_SETRLIMIT_ancilliary(RSS)\n+    GLIBCXX_CHECK_SETRLIMIT_ancilliary(VMEM)\n+    GLIBCXX_CHECK_SETRLIMIT_ancilliary(AS)\n \n     # Check for rlimit, setrlimit.\n     AC_CACHE_VAL(ac_setrlimit, [\n@@ -2079,7 +2079,7 @@ AC_DEFUN(GLIBCPP_CHECK_SETRLIMIT, [\n   AC_MSG_CHECKING([for testsuite memory limit support])\n   if test $setrlimit_have_headers = yes && test $ac_setrlimit = yes; then\n     ac_mem_limits=yes\n-    AC_DEFINE(_GLIBCPP_MEM_LIMITS)\n+    AC_DEFINE(_GLIBCXX_MEM_LIMITS)\n   else\n     ac_mem_limits=no\n   fi\n@@ -2091,19 +2091,19 @@ dnl\n dnl Does any necessary configuration of the testsuite directory.  Generates\n dnl the testsuite_hooks.h header.\n dnl\n-dnl GLIBCPP_CONFIGURE_TESTSUITE  [no args]\n-AC_DEFUN(GLIBCPP_CONFIGURE_TESTSUITE, [\n+dnl GLIBCXX_CONFIGURE_TESTSUITE  [no args]\n+AC_DEFUN(GLIBCXX_CONFIGURE_TESTSUITE, [\n \n-  if test  x\"$GLIBCPP_IS_CROSS_COMPILING\" = xfalse; then\n+  if test  x\"$GLIBCXX_IS_CROSS_COMPILING\" = xfalse; then\n     # Do checks for memory limit functions.\n-    GLIBCPP_CHECK_SETRLIMIT\n+    GLIBCXX_CHECK_SETRLIMIT\n \n     # Look for setenv, so that extended locale tests can be performed.\n-    GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_3(setenv)\n+    GLIBCXX_CHECK_STDLIB_DECL_AND_LINKAGE_3(setenv)\n   fi\n \n   # Export file names for ABI checking.\n-  baseline_dir=\"${glibcpp_srcdir}/config/abi/${abi_baseline_pair}\\$(MULTISUBDIR)\"\n+  baseline_dir=\"${glibcxx_srcdir}/config/abi/${abi_baseline_pair}\\$(MULTISUBDIR)\"\n   AC_SUBST(baseline_dir)\n \n   # Determine if checking the ABI is desirable.\n@@ -2118,8 +2118,8 @@ AC_DEFUN(GLIBCPP_CONFIGURE_TESTSUITE, [\n     esac\n   fi\n \n-  AM_CONDITIONAL(GLIBCPP_TEST_WCHAR_T, test \"$enable_wchar_t\" = yes)\t\n-  AM_CONDITIONAL(GLIBCPP_TEST_ABI, test \"$enable_abi_check\" = yes)\n+  AM_CONDITIONAL(GLIBCXX_TEST_WCHAR_T, test \"$enable_wchar_t\" = yes)\t\n+  AM_CONDITIONAL(GLIBCXX_TEST_ABI, test \"$enable_abi_check\" = yes)\n ])\n \n \n@@ -2137,22 +2137,22 @@ dnl\n dnl Check whether S_ISREG (Posix) or S_IFREG is available in <sys/stat.h>.\n dnl\n \n-AC_DEFUN(GLIBCPP_CHECK_S_ISREG_OR_S_IFREG, [\n-  AC_CACHE_VAL(glibcpp_cv_S_ISREG, [\n+AC_DEFUN(GLIBCXX_CHECK_S_ISREG_OR_S_IFREG, [\n+  AC_CACHE_VAL(glibcxx_cv_S_ISREG, [\n     AC_TRY_LINK([#include <sys/stat.h>],\n                 [struct stat buffer; fstat(0, &buffer); S_ISREG(buffer.st_mode); ],\n-                [glibcpp_cv_S_ISREG=yes],\n-                [glibcpp_cv_S_ISREG=no])\n+                [glibcxx_cv_S_ISREG=yes],\n+                [glibcxx_cv_S_ISREG=no])\n   ])\n-  AC_CACHE_VAL(glibcpp_cv_S_IFREG, [\n+  AC_CACHE_VAL(glibcxx_cv_S_IFREG, [\n     AC_TRY_LINK([#include <sys/stat.h>],\n                 [struct stat buffer; fstat(0, &buffer); S_IFREG & buffer.st_mode; ],\n-                [glibcpp_cv_S_IFREG=yes],\n-                [glibcpp_cv_S_IFREG=no])\n+                [glibcxx_cv_S_IFREG=yes],\n+                [glibcxx_cv_S_IFREG=no])\n   ])\n-  if test x$glibcpp_cv_S_ISREG = xyes; then\n+  if test x$glibcxx_cv_S_ISREG = xyes; then\n     AC_DEFINE(HAVE_S_ISREG)\n-  elif test x$glibcpp_cv_S_IFREG = xyes; then\n+  elif test x$glibcxx_cv_S_IFREG = xyes; then\n     AC_DEFINE(HAVE_S_IFREG)\n   fi\n ])\n@@ -2161,14 +2161,14 @@ dnl\n dnl Check whether poll is available in <poll.h>.\n dnl\n \n-AC_DEFUN(GLIBCPP_CHECK_POLL, [\n-  AC_CACHE_VAL(glibcpp_cv_POLL, [\n+AC_DEFUN(GLIBCXX_CHECK_POLL, [\n+  AC_CACHE_VAL(glibcxx_cv_POLL, [\n     AC_TRY_COMPILE([#include <poll.h>],\n                 [struct pollfd pfd[1]; pfd[0].events = POLLIN; poll(pfd, 1, 0); ],\n-                [glibcpp_cv_POLL=yes],\n-                [glibcpp_cv_POLL=no])\n+                [glibcxx_cv_POLL=yes],\n+                [glibcxx_cv_POLL=no])\n   ])\n-  if test x$glibcpp_cv_POLL = xyes; then\n+  if test x$glibcxx_cv_POLL = xyes; then\n     AC_DEFINE(HAVE_POLL)\n   fi\n ])\n@@ -2198,27 +2198,27 @@ AC_DEFUN(AC_LC_MESSAGES, [\n dnl\n dnl Check for whether the Boost-derived checks should be turned on.\n dnl\n-dnl GLIBCPP_ENABLE_CONCEPT_CHECKS\n+dnl GLIBCXX_ENABLE_CONCEPT_CHECKS\n dnl --enable-concept-checks turns them on.\n dnl --disable-concept-checks leaves them off.\n-dnl  +  Usage:  GLIBCPP_ENABLE_CONCEPT_CHECKS[(DEFAULT)]\n+dnl  +  Usage:  GLIBCXX_ENABLE_CONCEPT_CHECKS[(DEFAULT)]\n dnl       Where DEFAULT is either `yes' or `no'.  If ommitted, it\n dnl       defaults to `no'.\n-AC_DEFUN(GLIBCPP_ENABLE_CONCEPT_CHECKS, [dnl\n-define([GLIBCPP_ENABLE_CONCEPT_CHECKS_DEFAULT], ifelse($1, yes, yes, no))dnl\n+AC_DEFUN(GLIBCXX_ENABLE_CONCEPT_CHECKS, [dnl\n+define([GLIBCXX_ENABLE_CONCEPT_CHECKS_DEFAULT], ifelse($1, yes, yes, no))dnl\n AC_ARG_ENABLE(concept-checks,\n changequote(<<, >>)dnl\n-<<  --enable-concept-checks use Boost-derived template checks [default=>>GLIBCPP_ENABLE_CONCEPT_CHECKS_DEFAULT],\n+<<  --enable-concept-checks use Boost-derived template checks [default=>>GLIBCXX_ENABLE_CONCEPT_CHECKS_DEFAULT],\n changequote([, ])dnl\n [case \"$enableval\" in\n  yes) enable_concept_checks=yes ;;\n  no)  enable_concept_checks=no ;;\n  *)   AC_MSG_ERROR([Unknown argument to enable/disable concept checks]) ;;\n  esac],\n-enable_concept_checks=GLIBCPP_ENABLE_CONCEPT_CHECKS_DEFAULT)dnl\n+enable_concept_checks=GLIBCXX_ENABLE_CONCEPT_CHECKS_DEFAULT)dnl\n dnl Option parsed, now set things appropriately\n if test x\"$enable_concept_checks\" = xyes; then\n-  AC_DEFINE(_GLIBCPP_CONCEPT_CHECKS)\n+  AC_DEFINE(_GLIBCXX_CONCEPT_CHECKS)\n fi\n ])\n \n@@ -2227,20 +2227,20 @@ dnl\n dnl Add version tags to symbols in shared library (or not), additionally\n dnl marking other symbols as private/local (or not).\n dnl\n-dnl GLIBCPP_ENABLE_SYMVERS\n+dnl GLIBCXX_ENABLE_SYMVERS\n dnl --enable-symvers=style adds a version script to the linker call when\n dnl       creating the shared library.  The choice of version script is\n dnl       controlled by 'style'.\n dnl --disable-symvers does not.\n-dnl  +  Usage:  GLIBCPP_ENABLE_SYMVERS[(DEFAULT)]\n+dnl  +  Usage:  GLIBCXX_ENABLE_SYMVERS[(DEFAULT)]\n dnl       Where DEFAULT is either `yes' or `no'.  If ommitted, it\n dnl       defaults to `no'.  Passing `yes' tries to choose a default style\n dnl       based on linker characteristics.  Passing 'no' disables versioning.\n-AC_DEFUN(GLIBCPP_ENABLE_SYMVERS, [dnl\n-define([GLIBCPP_ENABLE_SYMVERS_DEFAULT], ifelse($1, yes, yes, no))dnl\n+AC_DEFUN(GLIBCXX_ENABLE_SYMVERS, [dnl\n+define([GLIBCXX_ENABLE_SYMVERS_DEFAULT], ifelse($1, yes, yes, no))dnl\n AC_ARG_ENABLE(symvers,\n changequote(<<, >>)dnl\n-<<  --enable-symvers=style  enables symbol versioning of the shared library [default=>>GLIBCPP_ENABLE_SYMVERS_DEFAULT],\n+<<  --enable-symvers=style  enables symbol versioning of the shared library [default=>>GLIBCXX_ENABLE_SYMVERS_DEFAULT],\n changequote([, ])dnl\n [case \"$enableval\" in\n  yes) enable_symvers=yes ;;\n@@ -2250,13 +2250,13 @@ changequote([, ])dnl\n  gnu) enable_symvers=$enableval ;;\n  *)   AC_MSG_ERROR([Unknown argument to enable/disable symvers]) ;;\n  esac],\n-enable_symvers=GLIBCPP_ENABLE_SYMVERS_DEFAULT)dnl\n+enable_symvers=GLIBCXX_ENABLE_SYMVERS_DEFAULT)dnl\n \n-# If we never went through the GLIBCPP_CHECK_LINKER_FEATURES macro, then we\n+# If we never went through the GLIBCXX_CHECK_LINKER_FEATURES macro, then we\n # don't know enough about $LD to do tricks...\n if test x$enable_shared = xno ||\n \ttest \"x$LD\" = x ||\n-\ttest x$glibcpp_gnu_ld_version = x; then\n+\ttest x$glibcxx_gnu_ld_version = x; then\n   enable_symvers=no\n fi\n \n@@ -2265,22 +2265,22 @@ if test $enable_symvers != no; then\n   AC_MSG_CHECKING([for shared libgcc])\n   ac_save_CFLAGS=\"$CFLAGS\"\n   CFLAGS=' -lgcc_s'\n-  AC_TRY_LINK(, [return 0], glibcpp_shared_libgcc=yes, glibcpp_shared_libgcc=no)\n+  AC_TRY_LINK(, [return 0], glibcxx_shared_libgcc=yes, glibcxx_shared_libgcc=no)\n   CFLAGS=\"$ac_save_CFLAGS\"\n-  AC_MSG_RESULT($glibcpp_shared_libgcc)\n+  AC_MSG_RESULT($glibcxx_shared_libgcc)\n fi\n \n # For GNU ld, we need at least this version.  It's 2.12 in the same format\n-# as the tested-for version.  See GLIBCPP_CHECK_LINKER_FEATURES for more.\n-glibcpp_min_gnu_ld_version=21200\n+# as the tested-for version.  See GLIBCXX_CHECK_LINKER_FEATURES for more.\n+glibcxx_min_gnu_ld_version=21200\n \n # Check to see if unspecified \"yes\" value can win, given results\n # above.\n if test $enable_symvers = yes ; then\n   if test $with_gnu_ld = yes &&\n-    test $glibcpp_shared_libgcc = yes ;\n+    test $glibcxx_shared_libgcc = yes ;\n   then\n-    if test $glibcpp_gnu_ld_version -ge $glibcpp_min_gnu_ld_version ; then\n+    if test $glibcxx_gnu_ld_version -ge $glibcxx_min_gnu_ld_version ; then\n         enable_symvers=gnu\n     else\n       ac_test_CFLAGS=\"${CFLAGS+set}\"\n@@ -2312,12 +2312,12 @@ case $enable_symvers in\n       ;;\n   gnu)\n       SYMVER_MAP=config/linker-map.gnu\n-      AC_DEFINE(_GLIBCPP_SYMVER)\n+      AC_DEFINE(_GLIBCXX_SYMVER)\n       ;;\n esac\n \n AC_SUBST(SYMVER_MAP)\n-AM_CONDITIONAL(GLIBCPP_BUILD_VERSIONED_SHLIB, test $enable_symvers != no)\n+AM_CONDITIONAL(GLIBCXX_BUILD_VERSIONED_SHLIB, test $enable_symvers != no)\n AC_MSG_CHECKING([versioning on shared library symbols])\n AC_MSG_RESULT($enable_symvers)\n ])"}, {"sha": "81e994dd597389db45fb924d3efc2ca82a40602b", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -4,35 +4,35 @@\n #undef HAVE_MMAP\n \n // Define if GCC supports weak symbols.\n-#undef _GLIBCPP_SUPPORTS_WEAK\n+#undef _GLIBCXX_SUPPORTS_WEAK\n \n // Include I/O support for 'long long' and 'unsigned long long'.\n-#undef _GLIBCPP_USE_LONG_LONG\n+#undef _GLIBCXX_USE_LONG_LONG\n \n // Define if C99 features such as lldiv_t, llabs, lldiv should be exposed.\n-#undef _GLIBCPP_USE_C99\n+#undef _GLIBCXX_USE_C99\n \n // Define if code specialized for wchar_t should be used.\n-#undef _GLIBCPP_USE_WCHAR_T\n+#undef _GLIBCXX_USE_WCHAR_T\n \n // Define if using setrlimit to limit memory usage during 'make check'.\n-#undef _GLIBCPP_MEM_LIMITS\n+#undef _GLIBCXX_MEM_LIMITS\n \n // Define to use concept checking code from the boost libraries.\n-#undef _GLIBCPP_CONCEPT_CHECKS\n+#undef _GLIBCXX_CONCEPT_CHECKS\n \n // Define to use symbol versioning in the shared library.\n-#undef _GLIBCPP_SYMVER\n+#undef _GLIBCXX_SYMVER\n \n // Define symbol versioning in assember directives. If symbol\n // versioning is beigng used, and the assembler supports this kind of\n // thing, then use it.\n-// NB: _GLIBCPP_AT_AT is a hack to work around quoting issues in m4.\n-#if _GLIBCPP_SYMVER\n-  #define _GLIBCPP_ASM_SYMVER(cur, old, version) \\\n-   asm (\".symver \" #cur \",\" #old _GLIBCPP_AT_AT #version);\n+// NB: _GLIBCXX_AT_AT is a hack to work around quoting issues in m4.\n+#if _GLIBCXX_SYMVER\n+  #define _GLIBCXX_ASM_SYMVER(cur, old, version) \\\n+   asm (\".symver \" #cur \",\" #old _GLIBCXX_AT_AT #version);\n #else\n-  #define _GLIBCPP_ASM_SYMVER(cur, old, version)\n+  #define _GLIBCXX_ASM_SYMVER(cur, old, version)\n #endif\n \n // Define if gthr-default.h exists (meaning that threading support is enabled).\n@@ -126,7 +126,7 @@\n #undef HAVE_LC_MESSAGES\n \n // Define if NLS translations are to be used.\n-#undef _GLIBCPP_USE_NLS\n+#undef _GLIBCXX_USE_NLS\n \n /* Define if you have the __signbit function.  */\n #undef HAVE___SIGNBIT\n@@ -795,7 +795,7 @@\n #undef VERSION\n \n /* Define if the compiler is configured for setjmp/longjmp exceptions. */\n-#undef _GLIBCPP_SJLJ_EXCEPTIONS\n+#undef _GLIBCXX_SJLJ_EXCEPTIONS\n \n /* Define if sigsetjmp is available.   */\n #undef HAVE_SIGSETJMP"}, {"sha": "8969a328e9ab9ba2ba0f60627473edf012cb82d5", "filename": "libstdc++-v3/config/cpu/alpha/atomicity.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Falpha%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Falpha%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Falpha%2Fatomicity.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _BITS_ATOMICITY_H\n-#define _BITS_ATOMICITY_H\t1\n+#ifndef _GLIBCXX_ATOMICITY_H\n+#define _GLIBCXX_ATOMICITY_H\t1\n \n /* @@@ With gas we can play nice .subsection games to get the\n    non-predicted branch pointing forward.  But Digital assemblers"}, {"sha": "ed93b5d64d437a6588ebaf28235db54a0261900f", "filename": "libstdc++-v3/config/cpu/cris/atomicity.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fcris%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fcris%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fcris%2Fatomicity.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _BITS_ATOMICITY_H\n-#define _BITS_ATOMICITY_H\t1\n+#ifndef _GLIBCXX_ATOMICITY_H\n+#define _GLIBCXX_ATOMICITY_H\t1\n \n // This entity must not cross a page boundary.\n typedef int _Atomic_word __attribute__ ((__aligned__ (4)));"}, {"sha": "f2340d62512f3f46a0e3b638ae4127f9c497696d", "filename": "libstdc++-v3/config/cpu/generic/atomicity.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,12 +27,12 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _BITS_ATOMICITY_H\n-#define _BITS_ATOMICITY_H\t1\n+#ifndef _GLIBCXX_ATOMICITY_H\n+#define _GLIBCXX_ATOMICITY_H\t1\n \n #include <bits/gthr.h>\n \n-#define _GLIBCPP_NEED_GENERIC_MUTEX\n+#define _GLIBCXX_NEED_GENERIC_MUTEX\n \n typedef int _Atomic_word;\n "}, {"sha": "7e527ef6c5f346cb8dc555b7a9fa2ef296452922", "filename": "libstdc++-v3/config/cpu/hppa/atomicity.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fhppa%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fhppa%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fhppa%2Fatomicity.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -17,8 +17,8 @@\n    write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n    Boston, MA 02111-1307, USA.  */\n \n-#ifndef _BITS_ATOMICITY_H\n-#define _BITS_ATOMICITY_H\t1\n+#ifndef _GLIBCXX_ATOMICITY_H\n+#define _GLIBCXX_ATOMICITY_H\t1\n \n typedef int _Atomic_word;\n \n@@ -34,9 +34,9 @@ __Atomicity_lock<__inst>::_S_atomicity_lock __attribute__ ((aligned (16))) = 1;\n \n /* Because of the lack of weak support when using the hpux\n    som linker, we explicitly instantiate the atomicity lock\n-   in src/misc-inst.cc when _GLIBCPP_INST_ATOMICITY_LOCK\n+   in src/misc-inst.cc when _GLIBCXX_INST_GLIBCXX_ATOMICITY_LOCK\n    is defined.  */\n-#ifndef _GLIBCPP_INST_ATOMICITY_LOCK\n+#ifndef _GLIBCXX_INST_GLIBCXX_ATOMICITY_LOCK\n template volatile int __Atomicity_lock<0>::_S_atomicity_lock;\n #endif\n "}, {"sha": "a370e752caf4e6f48761020f534ae5af8756b175", "filename": "libstdc++-v3/config/cpu/i386/atomicity.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi386%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi386%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi386%2Fatomicity.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _BITS_ATOMICITY_H\n-#define _BITS_ATOMICITY_H\t1\n+#ifndef _GLIBCXX_ATOMICITY_H\n+#define _GLIBCXX_ATOMICITY_H\t1\n \n typedef int _Atomic_word;\n "}, {"sha": "51ba5410c859625eff066b63482cac75fdb0db2c", "filename": "libstdc++-v3/config/cpu/i486/atomicity.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi486%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi486%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi486%2Fatomicity.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _BITS_ATOMICITY_H\n-#define _BITS_ATOMICITY_H\t1\n+#ifndef _GLIBCXX_ATOMICITY_H\n+#define _GLIBCXX_ATOMICITY_H\t1\n \n typedef int _Atomic_word;\n "}, {"sha": "40fbc55d0663817f56fdc2b521e1ef8f7f9cd608", "filename": "libstdc++-v3/config/cpu/ia64/atomicity.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fia64%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fia64%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fia64%2Fatomicity.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _BITS_ATOMICITY_H\n-#define _BITS_ATOMICITY_H       1\n+#ifndef _GLIBCXX_ATOMICITY_H\n+#define _GLIBCXX_ATOMICITY_H       1\n \n #include <ia64intrin.h>\n "}, {"sha": "01c64dadc1c8b8af6a94c90c53dd7ddf813b8be2", "filename": "libstdc++-v3/config/cpu/m68k/atomicity.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fatomicity.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _BITS_ATOMICITY_H\n-#define _BITS_ATOMICITY_H\t1\n+#ifndef _GLIBCXX_ATOMICITY_H\n+#define _GLIBCXX_ATOMICITY_H\t1\n \n typedef int _Atomic_word;\n "}, {"sha": "51f3e864462576d8c369a9fd225234e71797301e", "filename": "libstdc++-v3/config/cpu/mips/atomicity.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fmips%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fmips%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fmips%2Fatomicity.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _BITS_ATOMICITY_H\n-#define _BITS_ATOMICITY_H 1\n+#ifndef _GLIBCXX_ATOMICITY_H\n+#define _GLIBCXX_ATOMICITY_H 1\n \n typedef int _Atomic_word;\n "}, {"sha": "d32add0d95a1ff31285b0354fc91aacac09c5e49", "filename": "libstdc++-v3/config/cpu/powerpc/atomicity.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fpowerpc%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fpowerpc%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fpowerpc%2Fatomicity.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _BITS_ATOMICITY_H\n-#define _BITS_ATOMICITY_H\t1\n+#ifndef _GLIBCXX_ATOMICITY_H\n+#define _GLIBCXX_ATOMICITY_H\t1\n \n #ifdef __PPC405__\n #define _STWCX \"sync \\n\\tstwcx. \""}, {"sha": "2bb6f523cf158a96a022c070aaabac29d945a869", "filename": "libstdc++-v3/config/cpu/s390/atomicity.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fs390%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fs390%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fs390%2Fatomicity.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _BITS_ATOMICITY_H\n-#define _BITS_ATOMICITY_H\t1\n+#ifndef _GLIBCXX_ATOMICITY_H\n+#define _GLIBCXX_ATOMICITY_H\t1\n \n typedef int _Atomic_word;\n "}, {"sha": "4c9dbf6345dd96d6c14f38ed2df5f1038faef332", "filename": "libstdc++-v3/config/cpu/sparc/atomicity.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fatomicity.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _BITS_ATOMICITY_H\n-#define _BITS_ATOMICITY_H\t1\n+#ifndef _GLIBCXX_ATOMICITY_H\n+#define _GLIBCXX_ATOMICITY_H\t1\n \n #ifdef __arch64__\n "}, {"sha": "2c099d3a279a45f3935ee2ed5f1ee4f31312cacb", "filename": "libstdc++-v3/config/io/basic_file_stdio.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -36,26 +36,26 @@\n #include <unistd.h>\n #include <errno.h>\n \n-#ifdef _GLIBCPP_HAVE_SYS_IOCTL_H\n+#ifdef _GLIBCXX_HAVE_SYS_IOCTL_H\n #define BSD_COMP /* Get FIONREAD on Solaris2. */\n #include <sys/ioctl.h>\n #endif\n \n // Pick up FIONREAD on Solaris 2.5.\n-#ifdef _GLIBCPP_HAVE_SYS_FILIO_H\n+#ifdef _GLIBCXX_HAVE_SYS_FILIO_H\n #include <sys/filio.h>\n #endif\n \n-#ifdef _GLIBCPP_HAVE_POLL\n+#ifdef _GLIBCXX_HAVE_POLL\n #include <poll.h>\n #endif\n \n-#if defined(_GLIBCPP_HAVE_S_ISREG) || defined(_GLIBCPP_HAVE_S_IFREG)\n+#if defined(_GLIBCXX_HAVE_S_ISREG) || defined(_GLIBCXX_HAVE_S_IFREG)\n # include <sys/stat.h>\n-# ifdef _GLIBCPP_HAVE_S_ISREG\n-#  define _GLIBCPP_ISREG(x) S_ISREG(x)\n+# ifdef _GLIBCXX_HAVE_S_ISREG\n+#  define _GLIBCXX_ISREG(x) S_ISREG(x)\n # else\n-#  define _GLIBCPP_ISREG(x) (((x) & S_IFMT) == S_IFREG)\n+#  define _GLIBCXX_ISREG(x) (((x) & S_IFMT) == S_IFREG)\n # endif\n #endif\n \n@@ -249,7 +249,7 @@ namespace std\n       return __num; \n #endif    \n \n-#ifdef _GLIBCPP_HAVE_POLL\n+#ifdef _GLIBCXX_HAVE_POLL\n     // Cheap test.\n     struct pollfd __pfd[1];\n     __pfd[0].fd = this->fd();\n@@ -258,11 +258,11 @@ namespace std\n       return 0;\n #endif   \n \n-#if defined(_GLIBCPP_HAVE_S_ISREG) || defined(_GLIBCPP_HAVE_S_IFREG)\n+#if defined(_GLIBCXX_HAVE_S_ISREG) || defined(_GLIBCXX_HAVE_S_IFREG)\n     // Regular files.\n     struct stat __buffer;\n     int __ret = fstat(this->fd(), &__buffer);\n-    if (!__ret && _GLIBCPP_ISREG(__buffer.st_mode))\n+    if (!__ret && _GLIBCXX_ISREG(__buffer.st_mode))\n \treturn __buffer.st_size - lseek(this->fd(), 0, ios_base::cur);\n #endif\n     return 0;"}, {"sha": "7c0ffbf48372b14178d547bb4b253afb7b836c6b", "filename": "libstdc++-v3/config/io/basic_file_stdio.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -36,8 +36,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef _CPP_BASIC_FILE\n-#define _CPP_BASIC_FILE 1\n+#ifndef _BASIC_FILE_STDIO_H\n+#define _BASIC_FILE_STDIO_H 1\n \n #pragma GCC system_header\n "}, {"sha": "592abb6052b785533f347a7bfb4f4ae08a75c0fc", "filename": "libstdc++-v3/config/io/c_io_stdio.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -29,8 +29,8 @@\n \n // c_io_stdio.h - Defines for using \"C\" stdio.h\n \n-#ifndef _CPP_IO_STDIO_H\n-#define _CPP_IO_STDIO_H 1\n+#ifndef _C_IO_STDIO_H\n+#define _C_IO_STDIO_H 1\n \n #include <cstdio>\n #include <cstddef>\n@@ -41,7 +41,7 @@ namespace std\n   // for fpos.h\n   typedef long  \tstreamoff;\n   typedef ptrdiff_t\tstreamsize; // Signed integral type\n-#if _GLIBCPP_USE_WCHAR_T\n+#if _GLIBCXX_USE_WCHAR_T\n   typedef ptrdiff_t\twstreamsize;\n #endif\n "}, {"sha": "34470c4233b6a0b39f8e0be6e5e25c4d4328b40d", "filename": "libstdc++-v3/config/linker-map.gnu", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -20,7 +20,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-GLIBCPP_3.4 {\n+GLIBCXX_3.4 {\n \n   global:\n "}, {"sha": "5a211a187df2f2d7f5383852608ce493b709f2a6", "filename": "libstdc++-v3/config/locale/generic/c_locale.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -35,7 +35,7 @@\n \n #include <locale>\n \n-#ifdef _GLIBCPP_HAVE_IEEEFP_H\n+#ifdef _GLIBCXX_HAVE_IEEEFP_H\n #include <ieeefp.h>\n #endif\n \n@@ -76,7 +76,7 @@ namespace std\n \t}\n     }\n \n-#ifdef _GLIBCPP_USE_LONG_LONG\n+#ifdef _GLIBCXX_USE_LONG_LONG\n   template<>\n     void\n     __convert_to_v(const char* __s, long long& __v, ios_base::iostate& __err, \n@@ -124,18 +124,18 @@ namespace std\n \t  setlocale(LC_ALL, \"C\");\n \t  char* __sanity;\n \t  errno = 0;\n-#if defined(_GLIBCPP_USE_C99)\n+#if defined(_GLIBCXX_USE_C99)\n \t  float __f = strtof(__s, &__sanity);\n #else\n \t  double __d = strtod(__s, &__sanity);\n \t  float __f = static_cast<float>(__d);\n-#ifdef _GLIBCPP_HAVE_FINITEF\n+#ifdef _GLIBCXX_HAVE_FINITEF\n \t  if (!finitef (__f))\n \t    errno = ERANGE;\n-#elif defined (_GLIBCPP_HAVE_FINITE)\n+#elif defined (_GLIBCXX_HAVE_FINITE)\n \t  if (!finite (static_cast<double> (__f)))\n \t    errno = ERANGE;\n-#elif defined (_GLIBCPP_HAVE_ISINF)\n+#elif defined (_GLIBCXX_HAVE_ISINF)\n \t  if (isinf (static_cast<double> (__f)))\n \t    errno = ERANGE;\n #else\n@@ -184,7 +184,7 @@ namespace std\n \t  // Assumes __s formatted for \"C\" locale.\n \t  char* __old = strdup(setlocale(LC_ALL, NULL));\n \t  setlocale(LC_ALL, \"C\");\n-#if defined(_GLIBCPP_USE_C99)\n+#if defined(_GLIBCXX_USE_C99)\n \t  char* __sanity;\n \t  errno = 0;\n \t  long double __ld = strtold(__s, &__sanity);\n@@ -197,7 +197,7 @@ namespace std\n \t  int __p = sscanf(__s, \"%Lf\", &__ld);\n \t  if (errno == ERANGE)\n \t    __p = 0;\n-#ifdef _GLIBCPP_HAVE_FINITEL\n+#ifdef _GLIBCXX_HAVE_FINITEL\n \t  if ((__p == 1) && !finitel (__ld))\n \t    __p = 0;\n #endif\n@@ -234,7 +234,7 @@ namespace std\n \n namespace __gnu_cxx\n {\n-  const char* category_names[6 + _GLIBCPP_NUM_CATEGORIES] =\n+  const char* category_names[6 + _GLIBCXX_NUM_CATEGORIES] =\n     {\n       \"LC_CTYPE\", \n       \"LC_NUMERIC\","}, {"sha": "0819a5cbe9c7535a31f7c91d042f17a9974e2ff5", "filename": "libstdc++-v3/config/locale/generic/c_locale.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -33,14 +33,14 @@\n \n // Written by Benjamin Kosnik <bkoz@redhat.com>\n \n-#ifndef _CPP_BITS_C_LOCALE_H\n-#define _CPP_BITS_C_LOCALE_H 1\n+#ifndef _C_LOCALE_H\n+#define _C_LOCALE_H 1\n \n #pragma GCC system_header\n \n #include <clocale>\n \n-#define _GLIBCPP_NUM_CATEGORIES 0\n+#define _GLIBCXX_NUM_CATEGORIES 0\n \n namespace std\n {\n@@ -64,7 +64,7 @@ namespace std\n       setlocale(LC_ALL, \"C\");\n \n       int __ret;\n-#ifdef _GLIBCPP_USE_C99\n+#ifdef _GLIBCXX_USE_C99\n       if (__prec >= 0)\n         __ret = snprintf(__out, __size, __fmt, __prec, __v);\n       else"}, {"sha": "183439de4f32dd013c2473a5c9b69f4ac615f1e2", "filename": "libstdc++-v3/config/locale/generic/codecvt_members.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcodecvt_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcodecvt_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcodecvt_members.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -38,7 +38,7 @@\n namespace std\n {\n   // Specializations.\n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   codecvt_base::result\n   codecvt<wchar_t, char, mbstate_t>::\n   do_out(state_type& __state, const intern_type* __from, "}, {"sha": "9547f71cf77a69ecabaf53e45b28955489b7dea8", "filename": "libstdc++-v3/config/locale/generic/collate_members.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcollate_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcollate_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcollate_members.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -53,7 +53,7 @@ namespace std\n \t\t\t\tsize_t __n) const\n     { return strxfrm(__to, __from, __n); }\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n     int \n     collate<wchar_t>::_M_compare(const wchar_t* __one, "}, {"sha": "2035cd8c4f4bbfff908de0a8634785d71651cce1", "filename": "libstdc++-v3/config/locale/generic/ctype_members.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -47,7 +47,7 @@ namespace std\n       _S_create_c_locale(_M_c_locale_ctype, __s); \n     }\n \n-#ifdef _GLIBCPP_USE_WCHAR_T  \n+#ifdef _GLIBCXX_USE_WCHAR_T  \n   ctype<wchar_t>::__wmask_type\n   ctype<wchar_t>::_M_convert_to_wmask(const mask __m) const\n   {\n@@ -195,5 +195,5 @@ namespace std\n       }\n     return __hi;\n   }\n-#endif //  _GLIBCPP_USE_WCHAR_T\n+#endif //  _GLIBCXX_USE_WCHAR_T\n }"}, {"sha": "6edca38e753c581bfa1f64eeabe41d52af408050", "filename": "libstdc++-v3/config/locale/generic/messages_members.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -43,7 +43,7 @@ namespace std\n     messages<char>::do_get(catalog, int, int, const string& __dfault) const\n     { return __dfault; }\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n     wstring\n     messages<wchar_t>::do_get(catalog, int, int, const wstring& __dfault) const"}, {"sha": "1ee08444f5a2e1ccc9598a1326be41c418965661", "filename": "libstdc++-v3/config/locale/generic/monetary_members.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmonetary_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmonetary_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmonetary_members.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -83,7 +83,7 @@ namespace std\n     moneypunct<char, false>::~moneypunct()\n     { }\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template<> \n     void\n     moneypunct<wchar_t, true>::_M_initialize_moneypunct(__c_locale, "}, {"sha": "4ab80c22b87a0386873afd5b38440637b663f20b", "filename": "libstdc++-v3/config/locale/generic/numeric_members.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fnumeric_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fnumeric_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fnumeric_members.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -67,7 +67,7 @@ namespace std\n     numpunct<char>::~numpunct()\n     { delete _M_data; }\n       \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template<> \n     void\n     numpunct<wchar_t>::_M_initialize_numpunct(__c_locale)"}, {"sha": "f6913fe32947aa61ab0395515e4b8c17125f5879", "filename": "libstdc++-v3/config/locale/generic/time_members.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -113,7 +113,7 @@ namespace std\n       _M_month_a12 = \"Dec\";\n     }\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n     void\n     __timepunct<wchar_t>::"}, {"sha": "1309c0308eb576f462db279b92c6acf872ec2eb8", "filename": "libstdc++-v3/config/locale/gnu/c_locale.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -75,7 +75,7 @@ namespace std\n \t}\n     }\n \n-#ifdef _GLIBCPP_USE_LONG_LONG\n+#ifdef _GLIBCXX_USE_LONG_LONG\n   template<>\n     void\n     __convert_to_v(const char* __s, long long& __v, ios_base::iostate& __err, \n@@ -191,7 +191,7 @@ namespace std\n \n namespace __gnu_cxx\n {\n-  const char* category_names[6 + _GLIBCPP_NUM_CATEGORIES] =\n+  const char* category_names[6 + _GLIBCXX_NUM_CATEGORIES] =\n     {\n       \"LC_CTYPE\", \n       \"LC_NUMERIC\","}, {"sha": "6bc4c39577e35613ae47d2e9741f8ea0eaeef6cf", "filename": "libstdc++-v3/config/locale/gnu/c_locale.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -33,8 +33,8 @@\n \n // Written by Benjamin Kosnik <bkoz@redhat.com>\n \n-#ifndef _CPP_BITS_C_LOCALE_H\n-#define _CPP_BITS_C_LOCALE_H 1\n+#ifndef _C_LOCALE_H\n+#define _C_LOCALE_H 1\n \n #pragma GCC system_header\n \n@@ -43,9 +43,9 @@\n #include <iconv.h>\t\t// For codecvt using iconv, iconv_t\n #include <libintl.h> \t\t// For messages\n \n-#define _GLIBCPP_C_LOCALE_GNU 1\n+#define _GLIBCXX_C_LOCALE_GNU 1\n \n-#define _GLIBCPP_NUM_CATEGORIES 6\n+#define _GLIBCXX_NUM_CATEGORIES 6\n \n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n namespace __gnu_cxx\n@@ -80,7 +80,7 @@ namespace std\n #endif\n \n       int __ret;\n-#ifdef _GLIBCPP_USE_C99\n+#ifdef _GLIBCXX_USE_C99\n       if (__prec >= 0)\n         __ret = snprintf(__out, __size, __fmt, __prec, __v);\n       else"}, {"sha": "7d800765359d9020e87171d5eeee511aea447a42", "filename": "libstdc++-v3/config/locale/gnu/codecvt_members.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcodecvt_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcodecvt_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcodecvt_members.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -39,7 +39,7 @@\n namespace std\n {\n   // Specializations.\n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   codecvt_base::result\n   codecvt<wchar_t, char, mbstate_t>::\n   do_out(state_type& __state, const intern_type* __from, "}, {"sha": "573aa651f79097f1933e6733d828f7617aa07110", "filename": "libstdc++-v3/config/locale/gnu/collate_members.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcollate_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcollate_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcollate_members.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -54,7 +54,7 @@ namespace std\n \t\t\t\tsize_t __n) const \n     { return __strxfrm_l(__to, __from, __n, _M_c_locale_collate); }\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n     int \n     collate<wchar_t>::_M_compare(const wchar_t* __one, "}, {"sha": "142040c9d12c4db3beeb7c634dfc9b9a13a3f77c", "filename": "libstdc++-v3/config/locale/gnu/ctype_members.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -51,7 +51,7 @@ namespace std\n       _M_table = _M_c_locale_ctype->__ctype_b;\n     }\n \n-#ifdef _GLIBCPP_USE_WCHAR_T  \n+#ifdef _GLIBCXX_USE_WCHAR_T  \n   ctype<wchar_t>::__wmask_type\n   ctype<wchar_t>::_M_convert_to_wmask(const mask __m) const\n   {\n@@ -229,5 +229,5 @@ namespace std\n #endif\n     return __hi;\n   }\n-#endif //  _GLIBCPP_USE_WCHAR_T\n+#endif //  _GLIBCXX_USE_WCHAR_T\n }"}, {"sha": "1aa9c068e7f7c98d3b0d31f82adf9a417edc86fb", "filename": "libstdc++-v3/config/locale/gnu/messages_members.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,7 +58,7 @@ namespace std\n #endif\n     }\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n     wstring\n     messages<wchar_t>::do_get(catalog, int, int, const wstring& __dfault) const"}, {"sha": "3ad7d34c17cb0b8716c30dfa3842b3cab082df27", "filename": "libstdc++-v3/config/locale/gnu/monetary_members.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -313,7 +313,7 @@ namespace std\n     moneypunct<char, false>::~moneypunct()\n     { }\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template<> \n     void\n     moneypunct<wchar_t, true>::_M_initialize_moneypunct(__c_locale __cloc, "}, {"sha": "337fa14fa90ccb58b5f9cd2fc2dd4bb68dc63777", "filename": "libstdc++-v3/config/locale/gnu/numeric_members.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -85,7 +85,7 @@ namespace std\n     numpunct<char>::~numpunct()\n     { delete _M_data; }\n    \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template<> \n     void\n     numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc)"}, {"sha": "1dcdfd5c43e8e2bf72ced23180c4f051d04e3601", "filename": "libstdc++-v3/config/locale/gnu/time_members.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -183,7 +183,7 @@ namespace std\n \t}\n     }\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n     void\n     __timepunct<wchar_t>::"}, {"sha": "3419355f605f665597f80d8a12d4d6e30416d2f2", "filename": "libstdc++-v3/config/locale/ieee_1003.1-2001/c_locale.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fc_locale.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -61,7 +61,7 @@ namespace std\n       _M_falsename = \"false\";\n     }\n       \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template<> \n     void\n     numpunct<wchar_t>::_M_initialize_numpunct(__c_locale)\n@@ -91,7 +91,7 @@ namespace std\n       _M_neg_format = money_base::_S_default_pattern;\n     }\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template<> \n     void\n     moneypunct<wchar_t>::_M_initialize_moneypunct(__c_locale)"}, {"sha": "5b0a90884c42cb52acc06d2df3359043d8af99de", "filename": "libstdc++-v3/config/locale/ieee_1003.1-2001/codecvt_specializations.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fcodecvt_specializations.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fcodecvt_specializations.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fcodecvt_specializations.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -37,7 +37,7 @@\n \n   // XXX\n   // Define this here so codecvt.cc can have _S_max_size definition.\n-#define _GLIBCPP_USE___ENC_TRAITS 1\n+#define _GLIBCXX_USE___ENC_TRAITS 1\n \n   // Extension to use icov for dealing with character encodings,\n   // including conversions and comparisons between various character\n@@ -453,7 +453,7 @@\n \t      const extern_type* __end, size_t __max) const\n     { return std::min(__max, static_cast<size_t>(__end - __from)); }\n \n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n // 74.  Garbled text for codecvt::do_max_length\n   template<typename _InternT, typename _ExternT>\n     int "}, {"sha": "b37209f89dc0d60ba150a3e550558ee5df8db7ad", "filename": "libstdc++-v3/config/locale/ieee_1003.1-2001/messages_members.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fmessages_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fmessages_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fmessages_members.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -47,7 +47,7 @@ namespace std\n       return string(catgets(__nlc, __setid, __msgid, __dfault.c_str())); \n     }\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n     wstring\n     messages<wchar_t>::do_get(catalog, int, int, const wstring& __dfault) const"}, {"sha": "7888fa7c7c2ce8d2ac4938af9c95dd33576aa337", "filename": "libstdc++-v3/config/os/aix/os_defines.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fos_defines.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCPP_OS_DEFINES\n-#define _GLIBCPP_OS_DEFINES\n+#ifndef _GLIBCXX_OS_DEFINES\n+#define _GLIBCXX_OS_DEFINES\n \n // System-specific #define, typedefs, corrections, etc, go here.  This\n // file will come before all others."}, {"sha": "1e46712902564dd444ad209b407582412a88b67d", "filename": "libstdc++-v3/config/os/bsd/freebsd/os_defines.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fos_defines.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -28,17 +28,17 @@\n // the GNU General Public License.\n \n \n-#ifndef _GLIBCPP_OS_DEFINES\n-#define _GLIBCPP_OS_DEFINES 1\n+#ifndef _GLIBCXX_OS_DEFINES\n+#define _GLIBCXX_OS_DEFINES 1\n \n // System-specific #define, typedefs, corrections, etc, go here.  This\n // file will come before all others.\n \n-#define _GLIBCPP_USE_C99_CHECK 1\n-#define _GLIBCPP_USE_C99_DYNAMIC (!(__ISO_C_VISIBLE >= 1999))\n-#define _GLIBCPP_USE_C99_LONG_LONG_CHECK 1\n-#define _GLIBCPP_USE_C99_LONG_LONG_DYNAMIC (_GLIBCPP_USE_C99_DYNAMIC || !defined __LONG_LONG_SUPPORTED)\n-#define _GLIBCPP_USE_C99_FLOAT_TRANSCENDENTALS_CHECK 1\n-#define _GLIBCPP_USE_C99_FLOAT_TRANSCENDENTALS_DYNAMIC defined _XOPEN_SOURCE\n+#define _GLIBCXX_USE_C99_CHECK 1\n+#define _GLIBCXX_USE_C99_DYNAMIC (!(__ISO_C_VISIBLE >= 1999))\n+#define _GLIBCXX_USE_C99_LONG_LONG_CHECK 1\n+#define _GLIBCXX_USE_C99_LONG_LONG_DYNAMIC (_GLIBCXX_USE_C99_DYNAMIC || !defined __LONG_LONG_SUPPORTED)\n+#define _GLIBCXX_USE_C99_FLOAT_TRANSCENDENTALS_CHECK 1\n+#define _GLIBCXX_USE_C99_FLOAT_TRANSCENDENTALS_DYNAMIC defined _XOPEN_SOURCE\n \n #endif"}, {"sha": "a7f25303be28f384532bee524e1390353b10f611", "filename": "libstdc++-v3/config/os/bsd/netbsd/os_defines.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fos_defines.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCPP_OS_DEFINES\n-#define _GLIBCPP_OS_DEFINES 1\n+#ifndef _GLIBCXX_OS_DEFINES\n+#define _GLIBCXX_OS_DEFINES 1\n \n // System-specific #define, typedefs, corrections, etc, go here.  This\n // file will come before all others."}, {"sha": "5a43c061239cbc63ebc89fe413dce2ef9e59a368", "filename": "libstdc++-v3/config/os/djgpp/os_defines.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fos_defines.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -28,8 +28,8 @@\n // the GNU General Public License.\n \n \n-#ifndef _GLIBCPP_OS_DEFINES\n-#define _GLIBCPP_OS_DEFINES 1\n+#ifndef _GLIBCXX_OS_DEFINES\n+#define _GLIBCXX_OS_DEFINES 1\n \n // System-specific #define, typedefs, corrections, etc, go here.  This\n // file will come before all others."}, {"sha": "869749088f5ac865b245c5e5384b82d7231864f6", "filename": "libstdc++-v3/config/os/generic/fpos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Ffpos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Ffpos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Ffpos.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -109,7 +109,7 @@ namespace std\n \n   /// 27.2, paragraph 10 about fpos/char_traits circularity\n   typedef fpos<mbstate_t> \t\tstreampos;\n-#  ifdef _GLIBCPP_USE_WCHAR_T\n+#  ifdef _GLIBCXX_USE_WCHAR_T\n   /// 27.2, paragraph 10 about fpos/char_traits circularity\n   typedef fpos<mbstate_t> \t\twstreampos;\n #  endif"}, {"sha": "303049bfab249a47b9b4901832dc6eb909e6656e", "filename": "libstdc++-v3/config/os/generic/os_defines.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fos_defines.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -28,8 +28,8 @@\n // the GNU General Public License.\n \n \n-#ifndef _GLIBCPP_OS_DEFINES\n-#define _GLIBCPP_OS_DEFINES 1\n+#ifndef _GLIBCXX_OS_DEFINES\n+#define _GLIBCXX_OS_DEFINES 1\n \n // System-specific #define, typedefs, corrections, etc, go here.  This\n // file will come before all others."}, {"sha": "01ef01f4065baa48b2798425f76c739708bf90f1", "filename": "libstdc++-v3/config/os/gnu-linux/ctype_noninline.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_noninline.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -34,7 +34,7 @@\n   \n // Information as gleaned from /usr/include/ctype.h\n \n-#if _GLIBCPP_C_LOCALE_GNU\n+#if _GLIBCXX_C_LOCALE_GNU\n   const ctype_base::mask*\n   ctype<char>::classic_table() throw()\n   {\n@@ -59,7 +59,7 @@\n   }\n #endif\n \n-#if _GLIBCPP_C_LOCALE_GNU\n+#if _GLIBCXX_C_LOCALE_GNU\n   ctype<char>::ctype(__c_locale __cloc, const mask* __table, bool __del, \n \t\t     size_t __refs) \n   : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del)\n@@ -91,7 +91,7 @@\n   }\n #endif\n \n-#if _GLIBCPP_C_LOCALE_GNU\n+#if _GLIBCXX_C_LOCALE_GNU\n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) : \n   __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del)\n   {"}, {"sha": "3f7900686dce1ebf47bb70fc87e2c1c27ab99715", "filename": "libstdc++-v3/config/os/gnu-linux/fpos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Ffpos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Ffpos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Ffpos.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -135,7 +135,7 @@ namespace std\n \n   /// 27.2, paragraph 10 about fpos/char_traits circularity\n   typedef fpos<mbstate_t> \t\tstreampos;\n-#  ifdef _GLIBCPP_USE_WCHAR_T\n+#  ifdef _GLIBCXX_USE_WCHAR_T\n   /// 27.2, paragraph 10 about fpos/char_traits circularity\n   typedef fpos<mbstate_t> \t\twstreampos;\n #  endif"}, {"sha": "0e0194aea75ccbdebfc5dffb3c425bb7ca662214", "filename": "libstdc++-v3/config/os/gnu-linux/os_defines.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fos_defines.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCPP_OS_DEFINES\n-#define _GLIBCPP_OS_DEFINES 1\n+#ifndef _GLIBCXX_OS_DEFINES\n+#define _GLIBCXX_OS_DEFINES 1\n \n // System-specific #define, typedefs, corrections, etc, go here.  This\n // file will come before all others."}, {"sha": "ba0445a4cb6a66996ec4ab0e387711249f67df5f", "filename": "libstdc++-v3/config/os/hpux/os_defines.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fos_defines.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCPP_OS_DEFINES\n-#define _GLIBCPP_OS_DEFINES 1\n+#ifndef _GLIBCXX_OS_DEFINES\n+#define _GLIBCXX_OS_DEFINES 1\n \n // System-specific #define, typedefs, corrections, etc, go here.  This\n // file will come before all others.\n@@ -58,7 +58,7 @@\n    unconditionally, which makes intmax_t and uintmax_t long long\n    types.\n \n-   We also force _GLIBCPP_USE_LONG_LONG here so that we don't have\n+   We also force _GLIBCXX_USE_LONG_LONG here so that we don't have\n    to bastardize configure to deal with this sillyness.  */\n namespace std \n {\n@@ -75,12 +75,12 @@ namespace std\n #endif\n }\n \n-#define _GLIBCPP_USE_LONG_LONG 1\n+#define _GLIBCXX_USE_LONG_LONG 1\n \n // HPUX on IA64 requires vtable to be 64 bit aligned even at 32 bit\n // mode.  We need to pad the vtable structure to achieve this.  \n #if !defined(_LP64) && defined (__ia64__)\n-#define _GLIBCPP_VTABLE_PADDING 8\n+#define _GLIBCXX_VTABLE_PADDING 8\n typedef long int __padding_type;\n #endif\n \n@@ -93,12 +93,12 @@ typedef long int __padding_type;\n \n /* We need explicit instantiation of the atomicity lock on HPPA if\n    there is no weak support.  */\n-#if !defined(_GLIBCPP_SUPPORTS_WEAK) && defined (__hppa__)\n-#define _GLIBCPP_INST_ATOMICITY_LOCK 1\n+#if !defined(_GLIBCXX_SUPPORTS_WEAK) && defined (__hppa__)\n+#define _GLIBCXX_INST_ATOMICITY_LOCK 1\n #endif\n \n /* Don't use pragma weak in gthread headers.  */\n #ifdef __hppa__\n-#define _GLIBCPP_GTHREAD_USE_WEAK 0\n+#define _GLIBCXX_GTHREAD_USE_WEAK 0\n #endif\n #endif"}, {"sha": "87556f8b7427ab45f4a8c7e8e616799af62d1155", "filename": "libstdc++-v3/config/os/irix/irix5.2/os_defines.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fos_defines.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCPP_OS_DEFINES\n-#define _GLIBCPP_OS_DEFINES 1\n+#ifndef _GLIBCXX_OS_DEFINES\n+#define _GLIBCXX_OS_DEFINES 1\n \n // System-specific #define, typedefs, corrections, etc, go here.  This\n // file will come before all others."}, {"sha": "41ce7edbc5d7619171bf2892e4f555f45efa37a5", "filename": "libstdc++-v3/config/os/irix/irix6.5/os_defines.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fos_defines.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCPP_OS_DEFINES\n-#define _GLIBCPP_OS_DEFINES 1\n+#ifndef _GLIBCXX_OS_DEFINES\n+#define _GLIBCXX_OS_DEFINES 1\n \n // System-specific #define, typedefs, corrections, etc, go here.  This\n // file will come before all others."}, {"sha": "38fd3c711ac0ad7530c80fe481af20678bc6e582", "filename": "libstdc++-v3/config/os/mingw32/os_defines.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fos_defines.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -28,8 +28,8 @@\n // the GNU General Public License.\n \n \n-#ifndef _GLIBCPP_OS_DEFINES\n-#  define _GLIBCPP_OS_DEFINES\n+#ifndef _GLIBCXX_OS_DEFINES\n+#  define _GLIBCXX_OS_DEFINES\n \n // System-specific #define, typedefs, corrections, etc, go here.  This\n // file will come before all others."}, {"sha": "3b19787929f84aa080c6b9bcf70da0a0ec9cf760", "filename": "libstdc++-v3/config/os/newlib/os_defines.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fos_defines.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCPP_OS_DEFINES\n-#define _GLIBCPP_OS_DEFINES 1\n+#ifndef _GLIBCXX_OS_DEFINES\n+#define _GLIBCXX_OS_DEFINES 1\n \n // System-specific #define, typedefs, corrections, etc, go here.  This\n // file will come before all others."}, {"sha": "929331cbdfc845f4644d26217d900aed11e1f255", "filename": "libstdc++-v3/config/os/qnx/qnx6.1/os_defines.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fos_defines.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCPP_OS_DEFINES\n-#define _GLIBCPP_OS_DEFINES 1\n+#ifndef _GLIBCXX_OS_DEFINES\n+#define _GLIBCXX_OS_DEFINES 1\n \n // System-specific #define, typedefs, corrections, etc, go here.  This\n // file will come before all others."}, {"sha": "7e5a14ea41d1155092a1181c00d5afcad67d3a0e", "filename": "libstdc++-v3/config/os/solaris/solaris2.5/os_defines.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fos_defines.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCPP_OS_DEFINES\n-#define _GLIBCPP_OS_DEFINES 1\n+#ifndef _GLIBCXX_OS_DEFINES\n+#define _GLIBCXX_OS_DEFINES 1\n \n // System-specific #define, typedefs, corrections, etc, go here.  This\n // file will come before all others."}, {"sha": "29d6cf5fd87d036044ac91add24a696cf6705ef8", "filename": "libstdc++-v3/config/os/solaris/solaris2.6/os_defines.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fos_defines.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCPP_OS_DEFINES\n-#define _GLIBCPP_OS_DEFINES 1\n+#ifndef _GLIBCXX_OS_DEFINES\n+#define _GLIBCXX_OS_DEFINES 1\n \n // System-specific #define, typedefs, corrections, etc, go here.  This\n // file will come before all others."}, {"sha": "9131aa67e754a70fb600d5217a4e7b6c30cbbb7e", "filename": "libstdc++-v3/config/os/solaris/solaris2.7/os_defines.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fos_defines.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCPP_OS_DEFINES\n-#define _GLIBCPP_OS_DEFINES 1\n+#ifndef _GLIBCXX_OS_DEFINES\n+#define _GLIBCXX_OS_DEFINES 1\n \n // System-specific #define, typedefs, corrections, etc, go here.  This\n // file will come before all others."}, {"sha": "b7aa2a1ff4d56474857b99c36d23f3b6b51c9770", "filename": "libstdc++-v3/config/os/windiss/os_defines.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fwindiss%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fwindiss%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fwindiss%2Fos_defines.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -28,8 +28,8 @@\n // the GNU General Public License.\n \n \n-#ifndef _GLIBCPP_OS_DEFINES\n-#define _GLIBCPP_OS_DEFINES 1\n+#ifndef _GLIBCXX_OS_DEFINES\n+#define _GLIBCXX_OS_DEFINES 1\n \n // System-specific #define, typedefs, corrections, etc, go here.  This\n // file will come before all others."}, {"sha": "9e9d38f087cffa7d09c18a3a052437249c2390bf", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 906, "deletions": 906, "changes": 1812, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8"}, {"sha": "a9619ea4d892a8af951bea4677ab111c57a007b4", "filename": "libstdc++-v3/configure.host", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.host?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -92,7 +92,7 @@ case \"${host_cpu}\" in\n     try_cpu=sparc\n     ;;\n   *)\n-    if test -d ${glibcpp_srcdir}/config/cpu/${host_cpu}; then\n+    if test -d ${glibcxx_srcdir}/config/cpu/${host_cpu}; then\n       try_cpu=${host_cpu}\n     else\n       try_cpu=generic"}, {"sha": "4d02007caade7bb648388c3d957ff8da07da0329", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 68, "deletions": 68, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -16,7 +16,7 @@ AC_SUBST(PACKAGE)\n libtool_VERSION=6:0:0\n AC_SUBST(libtool_VERSION)\n \n-GLIBCPP_TOPREL_CONFIGURE\n+GLIBCXX_TOPREL_CONFIGURE\n \n # Gets build, host, target, *_vendor, *_cpu, *_os, etc.\n #\n@@ -34,8 +34,8 @@ GLIBCPP_TOPREL_CONFIGURE\n AC_CANONICAL_SYSTEM\n \n # Runs configure.host, finds CC, CXX and assorted other critical bits.\n-# Must run this before the GLIBCPP_ENABLE_* macros below.\n-GLIBCPP_CONFIGURE(.)\n+# Must run this before the GLIBCXX_ENABLE_* macros below.\n+GLIBCXX_CONFIGURE(.)\n \n AM_INIT_AUTOMAKE($PACKAGE, $gcc_version)\n AM_CONFIG_HEADER(config.h)\n@@ -46,25 +46,25 @@ AC_SUBST(enable_shared)\n AC_SUBST(enable_static)\n \n # Check for support bits and g++ features that don't require linking.\n-GLIBCPP_CHECK_GNU_MAKE\n-#GLIBCPP_CHECK_COMPILER_VERSION\n-GLIBCPP_ENABLE_SJLJ_EXCEPTIONS\n-GLIBCPP_ENABLE_LIBUNWIND_EXCEPTIONS\n-GLIBCPP_ENABLE_PCH([yes])\n+GLIBCXX_CHECK_GNU_MAKE\n+#GLIBCXX_CHECK_COMPILER_VERSION\n+GLIBCXX_ENABLE_SJLJ_EXCEPTIONS\n+GLIBCXX_ENABLE_LIBUNWIND_EXCEPTIONS\n+GLIBCXX_ENABLE_PCH([yes])\n \n # Enable all the variable C++ runtime options.  \n # NB: C_MBCHAR must come early.\n-GLIBCPP_ENABLE_CSTDIO\n-GLIBCPP_ENABLE_CLOCALE\n-GLIBCPP_ENABLE_CHEADERS([$c_model])\n-GLIBCPP_ENABLE_C_MBCHAR([yes])\n-GLIBCPP_ENABLE_C99([yes])\n-GLIBCPP_ENABLE_LONG_LONG([yes])\n-GLIBCPP_ENABLE_THREADS\n-GLIBCPP_ENABLE_CONCEPT_CHECKS\n-GLIBCPP_ENABLE_CXX_FLAGS\n-GLIBCPP_ENABLE_DEBUG([no])\n-GLIBCPP_ENABLE_DEBUG_FLAGS([none])\n+GLIBCXX_ENABLE_CSTDIO\n+GLIBCXX_ENABLE_CLOCALE\n+GLIBCXX_ENABLE_CHEADERS([$c_model])\n+GLIBCXX_ENABLE_C_MBCHAR([yes])\n+GLIBCXX_ENABLE_C99([yes])\n+GLIBCXX_ENABLE_LONG_LONG([yes])\n+GLIBCXX_ENABLE_THREADS\n+GLIBCXX_ENABLE_CONCEPT_CHECKS\n+GLIBCXX_ENABLE_CXX_FLAGS\n+GLIBCXX_ENABLE_DEBUG([no])\n+GLIBCXX_ENABLE_DEBUG_FLAGS([none])\n \n # No surprises, no surprises...\n if test $ATOMICITYH = cpu/generic ; then\n@@ -82,13 +82,13 @@ fi\n if test x\"$build\" != x\"$host\"; then\n \n   # We are being configured with some form of cross compiler.\n-  GLIBCPP_IS_CROSS_COMPILING=true\n+  GLIBCXX_IS_CROSS_COMPILING=true\n \n   # This lets us hard-code the functionality we know we'll have in the cross\n   # target environment.  \"Let\" is a sugar-coated word placed on an especially\n   # dull and tedious hack, actually.\n   #\n-  # Here's why GLIBCPP_CHECK_MATH_SUPPORT, and other autoconf macros\n+  # Here's why GLIBCXX_CHECK_MATH_SUPPORT, and other autoconf macros\n   # that involve linking, can't be used:\n   #    \"cannot open sim-crt0.o\"\n   #    \"cannot open crt0.o\"\n@@ -99,7 +99,7 @@ if test x\"$build\" != x\"$host\"; then\n   # crosses can be removed.\n \n   # If Canadian cross, then don't pick up tools from the build directory.\n-  # Used in GLIBCPP_EXPORT_INCLUDES (and nowhere else?).\n+  # Used in GLIBCXX_EXPORT_INCLUDES (and nowhere else?).\n   if test -n \"$with_cross_host\" && test x\"$build\" != x\"$with_cross_host\" \\\n     && test x\"$build\" != x\"$target\"; then\n     CANADIAN=yes\n@@ -108,9 +108,9 @@ if test x\"$build\" != x\"$host\"; then\n   fi\n \n   # Construct crosses by hand, eliminating bits that need ld...\n-  # GLIBCPP_CHECK_COMPILER_FEATURES\n-  # GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT\n-  # GLIBCPP_CHECK_MATH_SUPPORT\n+  # GLIBCXX_CHECK_COMPILER_FEATURES\n+  # GLIBCXX_CHECK_BUILTIN_MATH_SUPPORT\n+  # GLIBCXX_CHECK_MATH_SUPPORT\n \n   case \"${host}\" in\n     *-freebsd*)\n@@ -121,9 +121,9 @@ if test x\"$build\" != x\"$host\"; then\n         sys/time.h unistd.h])\n       SECTION_FLAGS='-ffunction-sections -fdata-sections'\n       AC_SUBST(SECTION_FLAGS) \n-      GLIBCPP_CHECK_LINKER_FEATURES\n-      GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT\n-      GLIBCPP_CHECK_WCHAR_T_SUPPORT\n+      GLIBCXX_CHECK_LINKER_FEATURES\n+      GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n+      GLIBCXX_CHECK_WCHAR_T_SUPPORT\n       AC_DEFINE(HAVE_LC_MESSAGES)\n       AC_DEFINE(HAVE_DRAND48)\n       AC_DEFINE(HAVE_GETPAGESIZE)\n@@ -178,9 +178,9 @@ if test x\"$build\" != x\"$host\"; then\n         fp.h locale.h float.h inttypes.h])\n       SECTION_FLAGS='-ffunction-sections -fdata-sections'\n       AC_SUBST(SECTION_FLAGS)\n-      GLIBCPP_CHECK_LINKER_FEATURES\n-      GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT\n-      GLIBCPP_CHECK_WCHAR_T_SUPPORT\n+      GLIBCXX_CHECK_LINKER_FEATURES\n+      GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n+      GLIBCXX_CHECK_WCHAR_T_SUPPORT\n       AC_DEFINE(HAVE_COPYSIGN)\n       AC_DEFINE(HAVE_COPYSIGNF)\n       AC_DEFINE(HAVE_FREXPF)\n@@ -203,9 +203,9 @@ if test x\"$build\" != x\"$host\"; then\n         fp.h locale.h float.h inttypes.h])\n       SECTION_FLAGS='-ffunction-sections -fdata-sections'\n       AC_SUBST(SECTION_FLAGS)\n-      GLIBCPP_CHECK_LINKER_FEATURES\n-      GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT\n-      GLIBCPP_CHECK_WCHAR_T_SUPPORT\n+      GLIBCXX_CHECK_LINKER_FEATURES\n+      GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n+      GLIBCXX_CHECK_WCHAR_T_SUPPORT\n       AC_DEFINE(HAVE_COPYSIGN)\n       AC_DEFINE(HAVE_COPYSIGNF)\n       AC_DEFINE(HAVE_FINITE)\n@@ -228,9 +228,9 @@ if test x\"$build\" != x\"$host\"; then\n     *-mingw32*)\n       os_include_dir=\"os/mingw32\"\n       AC_CHECK_HEADERS([sys/types.h locale.h float.h])\n-      GLIBCPP_CHECK_LINKER_FEATURES\n-      GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT\n-      GLIBCPP_CHECK_WCHAR_T_SUPPORT\n+      GLIBCXX_CHECK_LINKER_FEATURES\n+      GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n+      GLIBCXX_CHECK_WCHAR_T_SUPPORT\n       ;;\n     *-netbsd*)\n       os_include_dir=\"os/bsd/netbsd\"\n@@ -239,9 +239,9 @@ if test x\"$build\" != x\"$host\"; then\n         fp.h locale.h float.h inttypes.h])\n       SECTION_FLAGS='-ffunction-sections -fdata-sections'\n       AC_SUBST(SECTION_FLAGS) \n-      GLIBCPP_CHECK_LINKER_FEATURES\n-      GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT\n-      GLIBCPP_CHECK_WCHAR_T_SUPPORT\n+      GLIBCXX_CHECK_LINKER_FEATURES\n+      GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n+      GLIBCXX_CHECK_WCHAR_T_SUPPORT\n       AC_DEFINE(HAVE_COPYSIGN)\n       AC_DEFINE(HAVE_COPYSIGNF)\n       AC_DEFINE(HAVE_FINITEF)\n@@ -262,9 +262,9 @@ if test x\"$build\" != x\"$host\"; then\n       os_include_dir=\"os/qnx/qnx6.1\"\n       SECTION_FLAGS='-ffunction-sections -fdata-sections'\n       AC_SUBST(SECTION_FLAGS) \n-      GLIBCPP_CHECK_LINKER_FEATURES\n-      GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT\n-      GLIBCPP_CHECK_WCHAR_T_SUPPORT\n+      GLIBCXX_CHECK_LINKER_FEATURES\n+      GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n+      GLIBCXX_CHECK_WCHAR_T_SUPPORT\n       AC_DEFINE(HAVE_COSF)\n       AC_DEFINE(HAVE_COSL)\n       AC_DEFINE(HAVE_COSHF)\n@@ -331,7 +331,7 @@ if test x\"$build\" != x\"$host\"; then\n         os_include_dir=\"os/newlib\"\n         AC_DEFINE(HAVE_HYPOT)\n \n-        # GLIBCPP_CHECK_STDLIB_SUPPORT\n+        # GLIBCXX_CHECK_STDLIB_SUPPORT\n         AC_DEFINE(HAVE_STRTOF)        \n         AC_DEFINE(HAVE_STRTOLD)        \n         # AC_FUNC_MMAP\n@@ -402,26 +402,26 @@ else\n   # We are being configured natively. We can do more elaborate tests\n   # that include AC_TRY_COMPILE now, as the linker is assumed to be\n   # working.\n-  GLIBCPP_IS_CROSS_COMPILING=false\n+  GLIBCXX_IS_CROSS_COMPILING=false\n   CANADIAN=no\n \n   # Check for available headers.\n   AC_CHECK_HEADERS([nan.h ieeefp.h endian.h sys/isa_defs.h machine/endian.h \\\n   machine/param.h sys/machine.h fp.h locale.h float.h inttypes.h gconv.h \\\n   sys/types.h])\n \n-  GLIBCPP_CHECK_COMPILER_FEATURES\n-  GLIBCPP_CHECK_LINKER_FEATURES\n-  GLIBCPP_CHECK_MATH_SUPPORT\n-  GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT\n-  GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT\n-  GLIBCPP_CHECK_WCHAR_T_SUPPORT\n-  GLIBCPP_CHECK_STDLIB_SUPPORT\n+  GLIBCXX_CHECK_COMPILER_FEATURES\n+  GLIBCXX_CHECK_LINKER_FEATURES\n+  GLIBCXX_CHECK_MATH_SUPPORT\n+  GLIBCXX_CHECK_BUILTIN_MATH_SUPPORT\n+  GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n+  GLIBCXX_CHECK_WCHAR_T_SUPPORT\n+  GLIBCXX_CHECK_STDLIB_SUPPORT\n \n   # For showmanyc_helper().\n   AC_CHECK_HEADERS(sys/ioctl.h sys/filio.h)\n-  GLIBCPP_CHECK_POLL\n-  GLIBCPP_CHECK_S_ISREG_OR_S_IFREG\n+  GLIBCXX_CHECK_POLL\n+  GLIBCXX_CHECK_S_ISREG_OR_S_IFREG\n \n   AC_LC_MESSAGES\n \n@@ -434,11 +434,11 @@ else\n   AC_FUNC_MMAP\n fi\n \n-# This depends on GLIBCPP_CHECK_LINKER_FEATURES, but without it assumes no.\n-GLIBCPP_ENABLE_SYMVERS([yes])\n+# This depends on GLIBCXX_CHECK_LINKER_FEATURES, but without it assumes no.\n+GLIBCXX_ENABLE_SYMVERS([yes])\n \n-# This depends on GLIBCPP_ENABLE_SYMVERS and GLIBCPP_IS_CROSS_COMPILING.\n-GLIBCPP_CONFIGURE_TESTSUITE\n+# This depends on GLIBCXX_ENABLE_SYMVERS and GLIBCXX_IS_CROSS_COMPILING.\n+GLIBCXX_CONFIGURE_TESTSUITE\n \n # Propagate the target-specific source directories through the build chain.\n # (Nothing currently uses cpu_include_dir directly; only ATOMICITYH \n@@ -452,10 +452,10 @@ AC_SUBST(OS_INC_SRCDIR)\n \n \n # Determine cross-compile flags and all AM_CONDITIONALs.\n-AC_SUBST(GLIBCPP_IS_CROSS_COMPILING)\n+AC_SUBST(GLIBCXX_IS_CROSS_COMPILING)\n AM_CONDITIONAL(CANADIAN, test \"$CANADIAN\" = yes)\n-dnl from GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT:\n-AM_CONDITIONAL(GLIBCPP_BUILD_LIBMATH,  test \"$need_libmath\" = yes)\n+dnl from GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT:\n+AM_CONDITIONAL(GLIBCXX_BUILD_LIBMATH,  test \"$need_libmath\" = yes)\n  \n AC_CACHE_SAVE\n \n@@ -466,11 +466,11 @@ else\n fi\n \n # Export all the install information\n-GLIBCPP_EXPORT_INSTALL_INFO\n+GLIBCXX_EXPORT_INSTALL_INFO\n \n # Export all the include and flag information to Makefiles.\n-GLIBCPP_EXPORT_INCLUDES\n-GLIBCPP_EXPORT_FLAGS\n+GLIBCXX_EXPORT_INCLUDES\n+GLIBCXX_EXPORT_FLAGS\n \n if ${CONFIG_SHELL-/bin/sh} ./libtool --tag CXX --features |\n    grep \"enable shared\" > /dev/null; then\n@@ -497,7 +497,7 @@ po/Makefile testsuite/Makefile scripts/check_survey scripts/testsuite_flags,\n      # Ony modify Makefiles that are just being created.\n      case \" $CONFIG_FILES\" in\n        *\" Makefile\"*)\n-\t ac_file=Makefile . ${glibcpp_basedir}/../config-ml.in\n+\t ac_file=Makefile . ${glibcxx_basedir}/../config-ml.in\n \t ;;\n      esac\n      case $CONFIG_FILES in\n@@ -527,7 +527,7 @@ with_build_subdir=${with_build_subdir}\n with_multisubdir=${with_multisubdir}\n ac_configure_args=\"${multilib_arg} ${ac_configure_args}\"\n CONFIG_SHELL=${CONFIG_SHELL-/bin/sh}\n-glibcpp_basedir=${glibcpp_basedir}\n+glibcxx_basedir=${glibcxx_basedir}\n CC=\"${CC}\"\n CXX=\"${CXX}\"\n ORIGINAL_LD_FOR_MULTILIBS=\"${ORIGINAL_LD_FOR_MULTILIBS}\"\n@@ -543,7 +543,7 @@ dnl  [if test -n \"$CONFIG_FILES\"; then\n dnl    # Ony modify Makefiles that are just being created.\n dnl    case \" $CONFIG_FILES\" in\n dnl      *\" Makefile\"*)\n-dnl        ac_file=Makefile . ${glibcpp_basedir}/../config-ml.in\n+dnl        ac_file=Makefile . ${glibcxx_basedir}/../config-ml.in\n dnl        ;;\n dnl    esac\n dnl    case $CONFIG_FILES in\n@@ -571,7 +571,7 @@ dnl  target=${target}\n dnl  with_multisubdir=${with_multisubdir}\n dnl  ac_configure_args=\"${multilib_arg} ${ac_configure_args}\"\n dnl  CONFIG_SHELL=${CONFIG_SHELL-/bin/sh}\n-dnl  glibcpp_basedir=${glibcpp_basedir}\n+dnl  glibcxx_basedir=${glibcxx_basedir}\n dnl  CC=\"${CC}\"\n dnl  CXX=\"${CXX}\"\n dnl  )"}, {"sha": "20b7025a05037f08bbf8f60d45dad1dc1b627f59", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,16 +27,16 @@ MAINT_CHARSET = latin1\n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n # Cross compiler and multilib support.\n-CXX = @glibcpp_CXX@\n-glibcpp_srcdir=@glibcpp_srcdir@\n-glibcpp_builddir=@glibcpp_builddir@\n+CXX = @glibcxx_CXX@\n+glibcxx_srcdir=@glibcxx_srcdir@\n+glibcxx_builddir=@glibcxx_builddir@\n \n-GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n+GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n-INCLUDES = -nostdinc++ $(GLIBCPP_INCLUDES) $(LIBSUPCXX_INCLUDES)\n+INCLUDES = -nostdinc++ $(GLIBCXX_INCLUDES) $(LIBSUPCXX_INCLUDES)\n \n # Standard C++ includes.\n-std_srcdir = ${glibcpp_srcdir}/include/std\n+std_srcdir = ${glibcxx_srcdir}/include/std\n std_builddir = .\n std_headers = \\\n \t${std_srcdir}/std_algorithm.h \\\n@@ -100,7 +100,7 @@ std_headers_rename = \\\n \tvalarray \\\n \tvector\n \n-bits_srcdir = ${glibcpp_srcdir}/include/bits\n+bits_srcdir = ${glibcxx_srcdir}/include/bits\n bits_builddir = ./bits\n bits_headers = \\\n \t${bits_srcdir}/allocator.h \\\n@@ -169,7 +169,7 @@ bits_headers = \\\n \t${bits_srcdir}/valarray_after.h \\\n \t${bits_srcdir}/vector.tcc\n \n-backward_srcdir = ${glibcpp_srcdir}/include/backward\n+backward_srcdir = ${glibcxx_srcdir}/include/backward\n backward_builddir = ./backward\n backward_headers = \\\n \t${backward_srcdir}/complex.h \\\n@@ -209,7 +209,7 @@ backward_headers = \\\n \t${backward_srcdir}/strstream \\\n \t${backward_srcdir}/backward_warning.h\n \n-ext_srcdir = ${glibcpp_srcdir}/include/ext\n+ext_srcdir = ${glibcxx_srcdir}/include/ext\n ext_builddir = ./ext\n ext_headers = \\\n \t${ext_srcdir}/algorithm \\\n@@ -278,7 +278,7 @@ c_base_headers_rename = \\\n \tcwctype \n \n # \"C\" compatibility headers.\n-c_compatibility_srcdir = ${glibcpp_srcdir}/include/c_compatibility\n+c_compatibility_srcdir = ${glibcxx_srcdir}/include/c_compatibility\n c_compatibility_builddir = .\n c_compatibility_headers = \\\n \t${c_compatibility_srcdir}/assert.h \\\n@@ -303,31 +303,31 @@ c_compatibility_headers = \\\n # Some of the different \"C\" header models need extra files.\n # Some \"C\" header schemes require the \"C\" compatibility headers.\n # For --enable-cheaders=c_std\n-if GLIBCPP_C_HEADERS_C_STD\n+if GLIBCXX_C_HEADERS_C_STD\n c_base_headers_extra = ${c_base_srcdir}/cmath.tcc \n else\n c_base_headers_extra = \n endif\n \n-if GLIBCPP_C_HEADERS_COMPATIBILITY\n+if GLIBCXX_C_HEADERS_COMPATIBILITY\n c_compatibility_headers_extra = ${c_compatibility_headers}\n else\n c_compatibility_headers_extra = \n endif\n \n-host_srcdir = ${glibcpp_srcdir}/@OS_INC_SRCDIR@\n+host_srcdir = ${glibcxx_srcdir}/@OS_INC_SRCDIR@\n host_builddir = ./${host_alias}/bits\n host_headers = \\\n \t${host_srcdir}/ctype_base.h \\\n \t${host_srcdir}/ctype_inline.h \\\n \t${host_srcdir}/ctype_noninline.h \\\n \t${host_srcdir}/os_defines.h \\\n-\t${glibcpp_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h \\\n-\t${glibcpp_srcdir}/@FPOS_INC_SRCDIR@/fpos.h \n+\t${glibcxx_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h \\\n+\t${glibcxx_srcdir}/@FPOS_INC_SRCDIR@/fpos.h \n \n # Non-installed host_header files.\n host_headers_noinst = \\\n-\t${glibcpp_srcdir}/@CLOCALE_INTERNAL_H@\n+\t${glibcxx_srcdir}/@CLOCALE_INTERNAL_H@\n \n # These host_headers_extra files are all built with ad hoc naming rules.\n host_headers_extra = \\\n@@ -347,9 +347,9 @@ thread_host_headers = \\\n \n pch_input = ${host_builddir}/stdc++.h\n pch_output_builddir = ${host_builddir}/stdc++.h.gch\n-pch_source = ${glibcpp_srcdir}/include/stdc++.h\n+pch_source = ${glibcxx_srcdir}/include/stdc++.h\n PCHFLAGS=-Winvalid-pch -Wno-deprecated -x c++-header $(CXXFLAGS)\n-if GLIBCPP_BUILD_PCH\n+if GLIBCXX_BUILD_PCH\n pch_build = ${pch_input}\n pch_install = install-pch\n else\n@@ -452,57 +452,57 @@ stamp-host: ${host_headers} ${host_headers_noinst} stamp-${host_alias}\n \t@if [ ! -f stamp-host ]; then \\\n \t  (cd ${host_builddir} ;\\\n \t  @LN_S@ ${host_headers} . || true ;\\\n-\t  @LN_S@ ${glibcpp_srcdir}/@BASIC_FILE_H@ basic_file.h || true ;\\\n-\t  @LN_S@ ${glibcpp_srcdir}/@CSTDIO_H@ c++io.h || true ;\\\n-\t  @LN_S@ ${glibcpp_srcdir}/@CLOCALE_H@ c++locale.h || true ;\\\n-\t  @LN_S@ ${glibcpp_srcdir}/@CLOCALE_INTERNAL_H@ . || true ;\\\n-\t  @LN_S@ ${glibcpp_srcdir}/@CMESSAGES_H@ messages_members.h || true ;\\\n-\t  @LN_S@ ${glibcpp_srcdir}/@CTIME_H@ time_members.h || true ;\\\n-\t  @LN_S@ ${glibcpp_srcdir}/@CCODECVT_H@ codecvt_specializations.h || true);\\\n+\t  @LN_S@ ${glibcxx_srcdir}/@BASIC_FILE_H@ basic_file.h || true ;\\\n+\t  @LN_S@ ${glibcxx_srcdir}/@CSTDIO_H@ c++io.h || true ;\\\n+\t  @LN_S@ ${glibcxx_srcdir}/@CLOCALE_H@ c++locale.h || true ;\\\n+\t  @LN_S@ ${glibcxx_srcdir}/@CLOCALE_INTERNAL_H@ . || true ;\\\n+\t  @LN_S@ ${glibcxx_srcdir}/@CMESSAGES_H@ messages_members.h || true ;\\\n+\t  @LN_S@ ${glibcxx_srcdir}/@CTIME_H@ time_members.h || true ;\\\n+\t  @LN_S@ ${glibcxx_srcdir}/@CCODECVT_H@ codecvt_specializations.h || true);\\\n \t  echo `date` > stamp-host ; \\\n \tfi\n \n # Host includes dynamic.\n ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n-\t\t\t\t${glibcpp_srcdir}/include/bits/c++config \\\n+\t\t\t\t${glibcxx_srcdir}/include/bits/c++config \\\n \t\t\t\tstamp-${host_alias}\n-\t@cat ${glibcpp_srcdir}/include/bits/c++config > $@ ;\\\n-\tsed -e 's/HAVE_/_GLIBCPP_HAVE_/g' \\\n-\t    -e 's/PACKAGE/_GLIBCPP_PACKAGE/g' \\\n-\t    -e 's/VERSION/_GLIBCPP_VERSION/g' \\\n-\t    -e 's/WORDS_/_GLIBCPP_WORDS_/g' \\\n+\t@cat ${glibcxx_srcdir}/include/bits/c++config > $@ ;\\\n+\tsed -e 's/HAVE_/_GLIBCXX_HAVE_/g' \\\n+\t    -e 's/PACKAGE/_GLIBCXX_PACKAGE/g' \\\n+\t    -e 's/VERSION/_GLIBCXX_VERSION/g' \\\n+\t    -e 's/WORDS_/_GLIBCXX_WORDS_/g' \\\n \t    < ${CONFIG_HEADER} >> $@ ;\\\n-\techo \"#endif // _CPP_CPPCONFIG_\" >>$@\n+\techo \"#endif // _CXXCONFIG_\" >>$@\n \n # Host includes for threads\n-glibcpp_thread_h = @glibcpp_thread_h@\n+glibcxx_thread_h = @glibcxx_thread_h@\n uppercase = [ABCDEFGHIJKLMNOPQRSTUVWXYZ_]\n \n ${host_builddir}/gthr.h: ${toplevel_srcdir}/gcc/gthr.h stamp-${host_alias}\n-\tsed -e '/^#/s/\\(${uppercase}${uppercase}*\\)/_GLIBCPP_\\1/g' \\\n+\tsed -e '/^#/s/\\(${uppercase}${uppercase}*\\)/_GLIBCXX_\\1/g' \\\n \t    -e 's,^#include \"\\(.*\\)\",#include <bits/\\1>,g' \\\n \t    < ${toplevel_srcdir}/gcc/gthr.h > $@\n \n ${host_builddir}/gthr-single.h: ${toplevel_srcdir}/gcc/gthr-single.h \\\n \t\t\t\t  stamp-${host_alias}\n-\tsed -e 's/\\(UNUSED\\)/_GLIBCPP_\\1/g' \\\n-\t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCPP_\\1/g' \\\n+\tsed -e 's/\\(UNUSED\\)/_GLIBCXX_\\1/g' \\\n+\t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCXX_\\1/g' \\\n \t    < ${toplevel_srcdir}/gcc/gthr-single.h > $@\n \n ${host_builddir}/gthr-posix.h: ${toplevel_srcdir}/gcc/gthr-posix.h \\\n \t\t\t\t   stamp-${host_alias}\n-\tsed -e 's/\\(UNUSED\\)/_GLIBCPP_\\1/g' \\\n-\t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCPP_\\1/g' \\\n-\t    -e 's/\\(${uppercase}*WEAK\\)/_GLIBCPP_\\1/g' \\\n+\tsed -e 's/\\(UNUSED\\)/_GLIBCXX_\\1/g' \\\n+\t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCXX_\\1/g' \\\n+\t    -e 's/\\(${uppercase}*WEAK\\)/_GLIBCXX_\\1/g' \\\n \t    < ${toplevel_srcdir}/gcc/gthr-posix.h > $@\n \n-${host_builddir}/gthr-default.h: ${toplevel_srcdir}/gcc/${glibcpp_thread_h} \\\n+${host_builddir}/gthr-default.h: ${toplevel_srcdir}/gcc/${glibcxx_thread_h} \\\n \t\t\t\t   stamp-${host_alias}\n-\tsed -e 's/\\(UNUSED\\)/_GLIBCPP_\\1/g' \\\n-\t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCPP_\\1/g' \\\n-\t    -e 's/\\(${uppercase}*WEAK\\)/_GLIBCPP_\\1/g' \\\n+\tsed -e 's/\\(UNUSED\\)/_GLIBCXX_\\1/g' \\\n+\t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCXX_\\1/g' \\\n+\t    -e 's/\\(${uppercase}*WEAK\\)/_GLIBCXX_\\1/g' \\\n \t    -e 's,^#include \"\\(.*\\)\",#include <bits/\\1>,g' \\\n-\t    < ${toplevel_srcdir}/gcc/${glibcpp_thread_h} > $@\n+\t    < ${toplevel_srcdir}/gcc/${glibcxx_thread_h} > $@\n \n # Build a precompiled C++ include, stdc++.h.gch.\n ${pch_input}: ${allstamped} ${host_builddir}/c++config.h ${pch_source}"}, {"sha": "b29b37c199060431fe9ced5a7f6e965a4c651d6c", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 59, "deletions": 59, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -95,7 +95,7 @@ FPOS_H = @FPOS_H@\n FPOS_INC_SRCDIR = @FPOS_INC_SRCDIR@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n-GLIBCPP_IS_CROSS_COMPILING = @GLIBCPP_IS_CROSS_COMPILING@\n+GLIBCXX_IS_CROSS_COMPILING = @GLIBCXX_IS_CROSS_COMPILING@\n LIBMATHOBJS = @LIBMATHOBJS@\n LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n@@ -124,15 +124,15 @@ baseline_dir = @baseline_dir@\n check_msgfmt = @check_msgfmt@\n enable_shared = @enable_shared@\n enable_static = @enable_static@\n-glibcpp_CXX = @glibcpp_CXX@\n-glibcpp_MOFILES = @glibcpp_MOFILES@\n-glibcpp_PCHFLAGS = @glibcpp_PCHFLAGS@\n-glibcpp_POFILES = @glibcpp_POFILES@\n-glibcpp_basedir = @glibcpp_basedir@\n-glibcpp_localedir = @glibcpp_localedir@\n-glibcpp_prefixdir = @glibcpp_prefixdir@\n-glibcpp_toolexecdir = @glibcpp_toolexecdir@\n-glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n+glibcxx_CXX = @glibcxx_CXX@\n+glibcxx_MOFILES = @glibcxx_MOFILES@\n+glibcxx_PCHFLAGS = @glibcxx_PCHFLAGS@\n+glibcxx_POFILES = @glibcxx_POFILES@\n+glibcxx_basedir = @glibcxx_basedir@\n+glibcxx_localedir = @glibcxx_localedir@\n+glibcxx_prefixdir = @glibcxx_prefixdir@\n+glibcxx_toolexecdir = @glibcxx_toolexecdir@\n+glibcxx_toolexeclibdir = @glibcxx_toolexeclibdir@\n ifGNUmake = @ifGNUmake@\n libtool_VERSION = @libtool_VERSION@\n toplevel_srcdir = @toplevel_srcdir@\n@@ -143,16 +143,16 @@ MAINT_CHARSET = latin1\n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n # Cross compiler and multilib support.\n-CXX = @glibcpp_CXX@\n-glibcpp_srcdir = @glibcpp_srcdir@\n-glibcpp_builddir = @glibcpp_builddir@\n+CXX = @glibcxx_CXX@\n+glibcxx_srcdir = @glibcxx_srcdir@\n+glibcxx_builddir = @glibcxx_builddir@\n \n-GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n+GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n-INCLUDES = -nostdinc++ $(GLIBCPP_INCLUDES) $(LIBSUPCXX_INCLUDES)\n+INCLUDES = -nostdinc++ $(GLIBCXX_INCLUDES) $(LIBSUPCXX_INCLUDES)\n \n # Standard C++ includes.\n-std_srcdir = ${glibcpp_srcdir}/include/std\n+std_srcdir = ${glibcxx_srcdir}/include/std\n std_builddir = .\n std_headers = \\\n \t${std_srcdir}/std_algorithm.h \\\n@@ -218,7 +218,7 @@ std_headers_rename = \\\n \tvector\n \n \n-bits_srcdir = ${glibcpp_srcdir}/include/bits\n+bits_srcdir = ${glibcxx_srcdir}/include/bits\n bits_builddir = ./bits\n bits_headers = \\\n \t${bits_srcdir}/allocator.h \\\n@@ -288,7 +288,7 @@ bits_headers = \\\n \t${bits_srcdir}/vector.tcc\n \n \n-backward_srcdir = ${glibcpp_srcdir}/include/backward\n+backward_srcdir = ${glibcxx_srcdir}/include/backward\n backward_builddir = ./backward\n backward_headers = \\\n \t${backward_srcdir}/complex.h \\\n@@ -329,7 +329,7 @@ backward_headers = \\\n \t${backward_srcdir}/backward_warning.h\n \n \n-ext_srcdir = ${glibcpp_srcdir}/include/ext\n+ext_srcdir = ${glibcxx_srcdir}/include/ext\n ext_builddir = ./ext\n ext_headers = \\\n \t${ext_srcdir}/algorithm \\\n@@ -400,7 +400,7 @@ c_base_headers_rename = \\\n \n \n # \"C\" compatibility headers.\n-c_compatibility_srcdir = ${glibcpp_srcdir}/include/c_compatibility\n+c_compatibility_srcdir = ${glibcxx_srcdir}/include/c_compatibility\n c_compatibility_builddir = .\n c_compatibility_headers = \\\n \t${c_compatibility_srcdir}/assert.h \\\n@@ -422,25 +422,25 @@ c_compatibility_headers = \\\n \t${c_compatibility_srcdir}/wchar.h \\\n \t${c_compatibility_srcdir}/wctype.h \n \n-@GLIBCPP_C_HEADERS_C_STD_TRUE@c_base_headers_extra = @GLIBCPP_C_HEADERS_C_STD_TRUE@${c_base_srcdir}/cmath.tcc \n-@GLIBCPP_C_HEADERS_C_STD_FALSE@c_base_headers_extra = \n-@GLIBCPP_C_HEADERS_COMPATIBILITY_TRUE@c_compatibility_headers_extra = @GLIBCPP_C_HEADERS_COMPATIBILITY_TRUE@${c_compatibility_headers}\n-@GLIBCPP_C_HEADERS_COMPATIBILITY_FALSE@c_compatibility_headers_extra = \n+@GLIBCXX_C_HEADERS_C_STD_TRUE@c_base_headers_extra = @GLIBCXX_C_HEADERS_C_STD_TRUE@${c_base_srcdir}/cmath.tcc \n+@GLIBCXX_C_HEADERS_C_STD_FALSE@c_base_headers_extra = \n+@GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE@c_compatibility_headers_extra = @GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE@${c_compatibility_headers}\n+@GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE@c_compatibility_headers_extra = \n \n-host_srcdir = ${glibcpp_srcdir}/@OS_INC_SRCDIR@\n+host_srcdir = ${glibcxx_srcdir}/@OS_INC_SRCDIR@\n host_builddir = ./${host_alias}/bits\n host_headers = \\\n \t${host_srcdir}/ctype_base.h \\\n \t${host_srcdir}/ctype_inline.h \\\n \t${host_srcdir}/ctype_noninline.h \\\n \t${host_srcdir}/os_defines.h \\\n-\t${glibcpp_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h \\\n-\t${glibcpp_srcdir}/@FPOS_INC_SRCDIR@/fpos.h \n+\t${glibcxx_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h \\\n+\t${glibcxx_srcdir}/@FPOS_INC_SRCDIR@/fpos.h \n \n \n # Non-installed host_header files.\n host_headers_noinst = \\\n-\t${glibcpp_srcdir}/@CLOCALE_INTERNAL_H@\n+\t${glibcxx_srcdir}/@CLOCALE_INTERNAL_H@\n \n \n # These host_headers_extra files are all built with ad hoc naming rules.\n@@ -463,12 +463,12 @@ thread_host_headers = \\\n \n pch_input = ${host_builddir}/stdc++.h\n pch_output_builddir = ${host_builddir}/stdc++.h.gch\n-pch_source = ${glibcpp_srcdir}/include/stdc++.h\n+pch_source = ${glibcxx_srcdir}/include/stdc++.h\n PCHFLAGS = -Winvalid-pch -Wno-deprecated -x c++-header $(CXXFLAGS)\n-@GLIBCPP_BUILD_PCH_TRUE@pch_build = @GLIBCPP_BUILD_PCH_TRUE@${pch_input}\n-@GLIBCPP_BUILD_PCH_FALSE@pch_build = \n-@GLIBCPP_BUILD_PCH_TRUE@pch_install = @GLIBCPP_BUILD_PCH_TRUE@install-pch\n-@GLIBCPP_BUILD_PCH_FALSE@pch_install = \n+@GLIBCXX_BUILD_PCH_TRUE@pch_build = @GLIBCXX_BUILD_PCH_TRUE@${pch_input}\n+@GLIBCXX_BUILD_PCH_FALSE@pch_build = \n+@GLIBCXX_BUILD_PCH_TRUE@pch_install = @GLIBCXX_BUILD_PCH_TRUE@install-pch\n+@GLIBCXX_BUILD_PCH_FALSE@pch_install = \n \n # List of all timestamp files.  By keeping only one copy of this list, both\n # CLEANFILES and all-local are kept up-to-date.\n@@ -486,7 +486,7 @@ allcreated = \\\n \n \n # Host includes for threads\n-glibcpp_thread_h = @glibcpp_thread_h@\n+glibcxx_thread_h = @glibcxx_thread_h@\n uppercase = [ABCDEFGHIJKLMNOPQRSTUVWXYZ_]\n \n # For robustness sake (in light of junk files or in-source\n@@ -686,53 +686,53 @@ stamp-host: ${host_headers} ${host_headers_noinst} stamp-${host_alias}\n \t@if [ ! -f stamp-host ]; then \\\n \t  (cd ${host_builddir} ;\\\n \t  @LN_S@ ${host_headers} . || true ;\\\n-\t  @LN_S@ ${glibcpp_srcdir}/@BASIC_FILE_H@ basic_file.h || true ;\\\n-\t  @LN_S@ ${glibcpp_srcdir}/@CSTDIO_H@ c++io.h || true ;\\\n-\t  @LN_S@ ${glibcpp_srcdir}/@CLOCALE_H@ c++locale.h || true ;\\\n-\t  @LN_S@ ${glibcpp_srcdir}/@CLOCALE_INTERNAL_H@ . || true ;\\\n-\t  @LN_S@ ${glibcpp_srcdir}/@CMESSAGES_H@ messages_members.h || true ;\\\n-\t  @LN_S@ ${glibcpp_srcdir}/@CTIME_H@ time_members.h || true ;\\\n-\t  @LN_S@ ${glibcpp_srcdir}/@CCODECVT_H@ codecvt_specializations.h || true);\\\n+\t  @LN_S@ ${glibcxx_srcdir}/@BASIC_FILE_H@ basic_file.h || true ;\\\n+\t  @LN_S@ ${glibcxx_srcdir}/@CSTDIO_H@ c++io.h || true ;\\\n+\t  @LN_S@ ${glibcxx_srcdir}/@CLOCALE_H@ c++locale.h || true ;\\\n+\t  @LN_S@ ${glibcxx_srcdir}/@CLOCALE_INTERNAL_H@ . || true ;\\\n+\t  @LN_S@ ${glibcxx_srcdir}/@CMESSAGES_H@ messages_members.h || true ;\\\n+\t  @LN_S@ ${glibcxx_srcdir}/@CTIME_H@ time_members.h || true ;\\\n+\t  @LN_S@ ${glibcxx_srcdir}/@CCODECVT_H@ codecvt_specializations.h || true);\\\n \t  echo `date` > stamp-host ; \\\n \tfi\n \n # Host includes dynamic.\n ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n-\t\t\t\t${glibcpp_srcdir}/include/bits/c++config \\\n+\t\t\t\t${glibcxx_srcdir}/include/bits/c++config \\\n \t\t\t\tstamp-${host_alias}\n-\t@cat ${glibcpp_srcdir}/include/bits/c++config > $@ ;\\\n-\tsed -e 's/HAVE_/_GLIBCPP_HAVE_/g' \\\n-\t    -e 's/PACKAGE/_GLIBCPP_PACKAGE/g' \\\n-\t    -e 's/VERSION/_GLIBCPP_VERSION/g' \\\n-\t    -e 's/WORDS_/_GLIBCPP_WORDS_/g' \\\n+\t@cat ${glibcxx_srcdir}/include/bits/c++config > $@ ;\\\n+\tsed -e 's/HAVE_/_GLIBCXX_HAVE_/g' \\\n+\t    -e 's/PACKAGE/_GLIBCXX_PACKAGE/g' \\\n+\t    -e 's/VERSION/_GLIBCXX_VERSION/g' \\\n+\t    -e 's/WORDS_/_GLIBCXX_WORDS_/g' \\\n \t    < ${CONFIG_HEADER} >> $@ ;\\\n-\techo \"#endif // _CPP_CPPCONFIG_\" >>$@\n+\techo \"#endif // _CXXCONFIG_\" >>$@\n \n ${host_builddir}/gthr.h: ${toplevel_srcdir}/gcc/gthr.h stamp-${host_alias}\n-\tsed -e '/^#/s/\\(${uppercase}${uppercase}*\\)/_GLIBCPP_\\1/g' \\\n+\tsed -e '/^#/s/\\(${uppercase}${uppercase}*\\)/_GLIBCXX_\\1/g' \\\n \t    -e 's,^#include \"\\(.*\\)\",#include <bits/\\1>,g' \\\n \t    < ${toplevel_srcdir}/gcc/gthr.h > $@\n \n ${host_builddir}/gthr-single.h: ${toplevel_srcdir}/gcc/gthr-single.h \\\n \t\t\t\t  stamp-${host_alias}\n-\tsed -e 's/\\(UNUSED\\)/_GLIBCPP_\\1/g' \\\n-\t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCPP_\\1/g' \\\n+\tsed -e 's/\\(UNUSED\\)/_GLIBCXX_\\1/g' \\\n+\t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCXX_\\1/g' \\\n \t    < ${toplevel_srcdir}/gcc/gthr-single.h > $@\n \n ${host_builddir}/gthr-posix.h: ${toplevel_srcdir}/gcc/gthr-posix.h \\\n \t\t\t\t   stamp-${host_alias}\n-\tsed -e 's/\\(UNUSED\\)/_GLIBCPP_\\1/g' \\\n-\t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCPP_\\1/g' \\\n-\t    -e 's/\\(${uppercase}*WEAK\\)/_GLIBCPP_\\1/g' \\\n+\tsed -e 's/\\(UNUSED\\)/_GLIBCXX_\\1/g' \\\n+\t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCXX_\\1/g' \\\n+\t    -e 's/\\(${uppercase}*WEAK\\)/_GLIBCXX_\\1/g' \\\n \t    < ${toplevel_srcdir}/gcc/gthr-posix.h > $@\n \n-${host_builddir}/gthr-default.h: ${toplevel_srcdir}/gcc/${glibcpp_thread_h} \\\n+${host_builddir}/gthr-default.h: ${toplevel_srcdir}/gcc/${glibcxx_thread_h} \\\n \t\t\t\t   stamp-${host_alias}\n-\tsed -e 's/\\(UNUSED\\)/_GLIBCPP_\\1/g' \\\n-\t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCPP_\\1/g' \\\n-\t    -e 's/\\(${uppercase}*WEAK\\)/_GLIBCPP_\\1/g' \\\n+\tsed -e 's/\\(UNUSED\\)/_GLIBCXX_\\1/g' \\\n+\t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCXX_\\1/g' \\\n+\t    -e 's/\\(${uppercase}*WEAK\\)/_GLIBCXX_\\1/g' \\\n \t    -e 's,^#include \"\\(.*\\)\",#include <bits/\\1>,g' \\\n-\t    < ${toplevel_srcdir}/gcc/${glibcpp_thread_h} > $@\n+\t    < ${toplevel_srcdir}/gcc/${glibcxx_thread_h} > $@\n \n # Build a precompiled C++ include, stdc++.h.gch.\n ${pch_input}: ${allstamped} ${host_builddir}/c++config.h ${pch_source}"}, {"sha": "a56a1b384918c3cecdeb3243c4b38261a56d10a1", "filename": "libstdc++-v3/include/backward/algo.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falgo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falgo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falgo.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -53,8 +53,8 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-#ifndef _CPP_BACKWARD_ALGO_H\n-#define _CPP_BACKWARD_ALGO_H 1\n+#ifndef _BACKWARD_ALGO_H\n+#define _BACKWARD_ALGO_H 1\n \n #include \"backward_warning.h\"\n #include \"algobase.h\"\n@@ -142,7 +142,7 @@ using __gnu_cxx::count_if;   // Extension returning void\n using __gnu_cxx::power; \n using __gnu_cxx::iota; \n \n-#endif /* _CPP_BACKWARD_ALGO_H */\n+#endif /* _BACKWARD_ALGO_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "4cf82520d647224dde58ba2c0dc901d798b8631a", "filename": "libstdc++-v3/include/backward/algobase.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falgobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falgobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falgobase.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -52,8 +52,8 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-#ifndef _CPP_BACKWARD_ALGOBASE_H\n-#define _CPP_BACKWARD_ALGOBASE_H 1\n+#ifndef _BACKWARD_ALGOBASE_H\n+#define _BACKWARD_ALGOBASE_H 1\n \n #include \"backward_warning.h\"\n #include \"pair.h\"\n@@ -88,7 +88,7 @@ using __gnu_cxx::lexicographical_compare_3way;\n // Names from ext/memory\n using __gnu_cxx::uninitialized_copy_n;\n \n-#endif /* _CPP_BACKWARD_ALGOBASE_H */\n+#endif /* _BACKWARD_ALGOBASE_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "5781192bb332b88d4ab901c53edbb517b9206ebb", "filename": "libstdc++-v3/include/backward/alloc.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falloc.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -40,8 +40,8 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-#ifndef _CPP_BACKWARD_ALLOC_H\n-#define _CPP_BACKWARD_ALLOC_H 1\n+#ifndef _BACKWARD_ALLOC_H\n+#define _BACKWARD_ALLOC_H 1\n \n #include \"backward_warning.h\"\n #include <bits/c++config.h>"}, {"sha": "9e1377793ea7ce0d3da7860d1d26d3f5cb45c0be", "filename": "libstdc++-v3/include/backward/backward_warning.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbackward_warning.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbackward_warning.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbackward_warning.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -25,15 +25,15 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _CPP_BACKWARD_BACKWARD_WARNING_H\n-#define _CPP_BACKWARD_BACKWARD_WARNING_H 1\n+#ifndef _BACKWARD_BACKWARD_WARNING_H\n+#define _BACKWARD_BACKWARD_WARNING_H 1\n \n #ifdef __DEPRECATED\n #warning This file includes at least one deprecated or antiquated header. \\\n Please consider using one of the 32 headers found in section 17.4.1.2 of the \\\n C++ standard. Examples include substituting the <X> header for the <X.h> \\\n-header for C++ includes, or <sstream> instead of the deprecated header \\\n-<strstream.h>. To disable this warning use -Wno-deprecated.\n+header for C++ includes, or <iostream> instead of the deprecated header \\\n+<iostream.h>. To disable this warning use -Wno-deprecated.\n #endif\n \n #endif"}, {"sha": "5d12914525e268ed736c13771488ebd97dd71515", "filename": "libstdc++-v3/include/backward/bvector.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbvector.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -53,16 +53,15 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-#ifndef __SGI_STL_BVECTOR_H\n-#define __SGI_STL_BVECTOR_H\n-\n+#ifndef _BACKWARD_BVECTOR_H\n+#define _BACKWARD_BVECTOR_H 1\n \n #include \"backward_warning.h\"\n #include <vector>\n \n using std::bit_vector;\n \n-#endif /* __SGI_STL_BVECTOR_H */\n+#endif /* _BACKWARD_BVECTOR_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "589fac73fce33c507b26180d660624f333406eb7", "filename": "libstdc++-v3/include/backward/complex.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fcomplex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fcomplex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fcomplex.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -25,8 +25,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _CPP_BACKWARD_COMPLEX_H\n-#define _CPP_BACKWARD_COMPLEX_H 1\n+#ifndef _BACKWARD_COMPLEX_H\n+#define _BACKWARD_COMPLEX_H 1\n \n #include \"backward_warning.h\"\n #include <complex>"}, {"sha": "98987fd0c0f6a3ce055d89b58e4fd172cd616993", "filename": "libstdc++-v3/include/backward/defalloc.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fdefalloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fdefalloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fdefalloc.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -52,8 +52,8 @@\n // Standard-conforming allocators have a very different interface.  The\n // standard default allocator is declared in the header <memory>.\n \n-#ifndef _CPP_BACKWARD_DEFALLOC_H\n-#define _CPP_BACKWARD_DEFALLOC_H 1\n+#ifndef _BACKWARD_DEFALLOC_H\n+#define _BACKWARD_DEFALLOC_H 1\n \n #include \"backward_warning.h\"\n #include \"new.h\"\n@@ -114,4 +114,4 @@ class allocator<void> {\n \n \n \n-#endif /* _CPP_BACKWARD_DEFALLOC_H */\n+#endif /* _BACKWARD_DEFALLOC_H */"}, {"sha": "36c7479ef0913854e8621ad1a5a8640c7ef9cf4d", "filename": "libstdc++-v3/include/backward/deque.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fdeque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fdeque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fdeque.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -53,8 +53,8 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-#ifndef _CPP_BACKWARD_DEQUE_H\n-#define _CPP_BACKWARD_DEQUE_H 1\n+#ifndef _BACKWARD_DEQUE_H\n+#define _BACKWARD_DEQUE_H 1\n \n #include \"backward_warning.h\"\n #include \"algobase.h\"\n@@ -63,7 +63,7 @@\n \n using std::deque;\n \n-#endif /* _CPP_BACKWARD_DEQUE_H */\n+#endif /* _BACKWARD_DEQUE_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "6dfd514c2f3b3e917aa917a21ba4bd641fdb8773", "filename": "libstdc++-v3/include/backward/fstream.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ffstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ffstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ffstream.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -25,8 +25,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _CPP_BACKWARD_FSTREAM_H\n-#define _CPP_BACKWARD_FSTREAM_H 1\n+#ifndef _BACKWARD_FSTREAM_H\n+#define _BACKWARD_FSTREAM_H 1\n \n #include \"backward_warning.h\"\n #include <fstream>\n@@ -37,7 +37,7 @@ using std::ofstream;\n using std::fstream;\n using std::streampos;\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n using std::wfilebuf;\n using std::wifstream;\n using std::wofstream;"}, {"sha": "19f29c81326eab6a016f2bffa8dff92a270103bd", "filename": "libstdc++-v3/include/backward/function.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ffunction.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -53,8 +53,8 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-#ifndef _CPP_BACKWARD_FUNCTION_H\n-#define _CPP_BACKWARD_FUNCTION_H 1\n+#ifndef _BACKWARD_FUNCTION_H\n+#define _BACKWARD_FUNCTION_H 1\n \n #include \"backward_warning.h\"\n #include <bits/c++config.h>\n@@ -123,7 +123,7 @@ using __gnu_cxx::subtractive_rng;\n using __gnu_cxx::mem_fun1; \n using __gnu_cxx::mem_fun1_ref; \n \n-#endif /* _CPP_BACKWARD_FUNCTION_H */\n+#endif /* _BACKWARD_FUNCTION_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "bc9c1482c8a4b8b6db517dc25ab72af322c8163f", "filename": "libstdc++-v3/include/backward/hash_map.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_map.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -53,8 +53,8 @@\n  *\n  */\n \n-#ifndef _CPP_BACKWARD_HASH_MAP_H\n-#define _CPP_BACKWARD_HASH_MAP_H 1\n+#ifndef _BACKWARD_HASH_MAP_H\n+#define _BACKWARD_HASH_MAP_H 1\n \n #include \"backward_warning.h\"\n #include \"algobase.h\"\n@@ -65,7 +65,7 @@ using __gnu_cxx::hashtable;\n using __gnu_cxx::hash_map;\n using __gnu_cxx::hash_multimap;\n \n-#endif /* _CPP_BACKWARD_HASH_MAP_H */\n+#endif /* _BACKWARD_HASH_MAP_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "89307de040207f447e7979f07b39bb24c62f57ef", "filename": "libstdc++-v3/include/backward/hash_set.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_set.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -53,8 +53,8 @@\n  *\n  */\n \n-#ifndef _CPP_BACKWARD_HASH_SET_H\n-#define _CPP_BACKWARD_HASH_SET_H 1\n+#ifndef _BACKWARD_HASH_SET_H\n+#define _BACKWARD_HASH_SET_H 1\n \n #include \"backward_warning.h\"\n #include \"algobase.h\"\n@@ -65,5 +65,5 @@ using __gnu_cxx::hashtable;\n using __gnu_cxx::hash_set;\n using __gnu_cxx::hash_multiset;\n \n-#endif /* _CPP_BACKWARD_HASH_SET_H */\n+#endif /* _BACKWARD_HASH_SET_H */\n "}, {"sha": "abedd55b001009df45362f47e708aba6ddaea3b6", "filename": "libstdc++-v3/include/backward/hashtable.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhashtable.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -57,8 +57,8 @@\n  *   You should not attempt to use it directly.\n  */\n \n-#ifndef _CPP_BACKWARD_HASHTABLE_H\n-#define _CPP_BACKWARD_HASHTABLE_H 1\n+#ifndef _BACKWARD_HASHTABLE_H\n+#define _BACKWARD_HASHTABLE_H 1\n \n #include \"backward_warning.h\"\n #include <ext/hashtable.h>\n@@ -69,7 +69,7 @@\n using __gnu_cxx::hash;\n using __gnu_cxx::hashtable;\n \n-#endif /* _CPP_BACKWARD_HASHTABLE_H */\n+#endif /* _BACKWARD_HASHTABLE_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "2f19545d0d709f69b26d0237e62cee47f30c1004", "filename": "libstdc++-v3/include/backward/heap.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fheap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fheap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fheap.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -52,8 +52,8 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-#ifndef _CPP_BACKWARD_HEAP_H\n-#define _CPP_BACKWARD_HEAP_H 1\n+#ifndef _BACKWARD_HEAP_H\n+#define _BACKWARD_HEAP_H 1\n \n #include \"backward_warning.h\"\n #include <bits/c++config.h>\n@@ -64,7 +64,7 @@ using std::pop_heap;\n using std::make_heap;\n using std::sort_heap;\n \n-#endif /* _CPP_BACKWARD_HEAP_H */\n+#endif /* _BACKWARD_HEAP_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "160dbebcdbf45d89c5b8d5046ead788fb798ad35", "filename": "libstdc++-v3/include/backward/iomanip.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiomanip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiomanip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiomanip.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -25,8 +25,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _CPP_BACKWARD_IOMANIP_H\n-#define _CPP_BACKWARD_IOMANIP_H 1\n+#ifndef _BACKWARD_IOMANIP_H\n+#define _BACKWARD_IOMANIP_H 1\n \n #include \"backward_warning.h\"\n #include \"iostream.h\""}, {"sha": "5a5ccea62b7720eb7640a4e760d5aa23ad9fc006", "filename": "libstdc++-v3/include/backward/iostream.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiostream.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -25,8 +25,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _CPP_BACKWARD_IOSTREAM_H\n-#define _CPP_BACKWARD_IOSTREAM_H 1\n+#ifndef _BACKWARD_IOSTREAM_H\n+#define _BACKWARD_IOSTREAM_H 1\n \n #include \"backward_warning.h\"\n #include <iostream>\n@@ -41,7 +41,7 @@ using std::cout;\n using std::cin;\n using std::cerr;\n using std::clog;\n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n using std::wcout;\n using std::wcin;\n using std::wcerr;"}, {"sha": "707b575a5bd46a70d4f6052e3579db3042d5a8c2", "filename": "libstdc++-v3/include/backward/istream.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fistream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fistream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fistream.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -25,8 +25,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _CPP_BACKWARD_ISTREAM_H\n-#define _CPP_BACKWARD_ISTREAM_H 1\n+#ifndef _BACKWARD_ISTREAM_H\n+#define _BACKWARD_ISTREAM_H 1\n \n #include \"backward_warning.h\"\n #include \"iostream.h\""}, {"sha": "4100049ee242c4f8189770506b2a584b41f30ed8", "filename": "libstdc++-v3/include/backward/iterator.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiterator.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -24,8 +24,8 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-#ifndef _CPP_BACKWARD_ITERATOR_H\n-#define _CPP_BACKWARD_ITERATOR_H 1\n+#ifndef _BACKWARD_ITERATOR_H\n+#define _BACKWARD_ITERATOR_H 1\n \n #include \"backward_warning.h\"\n #include \"function.h\"\n@@ -155,7 +155,7 @@ template <class _ForwardIterator>\n // Names from stl_raw_storage_iter.h\n using std::raw_storage_iterator;\n \n-#endif /* _CPP_BACKWARD_ITERATOR_H */\n+#endif /* _BACKWARD_ITERATOR_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "00c11a6987d235454c3578b328d19460984ca21e", "filename": "libstdc++-v3/include/backward/list.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Flist.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Flist.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Flist.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -53,8 +53,8 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-#ifndef _CPP_BACKWARD_LIST_H\n-#define _CPP_BACKWARD_LIST_H 1\n+#ifndef _BACKWARD_LIST_H\n+#define _BACKWARD_LIST_H 1\n \n #include \"backward_warning.h\"\n #include \"algobase.h\"\n@@ -63,7 +63,7 @@\n \n using std::list;\n \n-#endif /* _CPP_BACKWARD_LIST_H */\n+#endif /* _BACKWARD_LIST_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "56d5c69973b3ae5b3db31be68e1f09fa270ca5d5", "filename": "libstdc++-v3/include/backward/map.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmap.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -53,16 +53,16 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-#ifndef _CPP_BACKWARD_MAP_H\n-#define _CPP_BACKWARD_MAP_H 1\n+#ifndef _BACKWARD_MAP_H\n+#define _BACKWARD_MAP_H 1\n \n #include \"backward_warning.h\"\n #include \"tree.h\"\n #include <map>\n \n using std::map;\n \n-#endif /* _CPP_BACKWARD_MAP_H */\n+#endif /* _BACKWARD_MAP_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "aba42f7217fd5487a5d30a9f6f86fa4c6759a50f", "filename": "libstdc++-v3/include/backward/multimap.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmultimap.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -53,16 +53,16 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-#ifndef _CPP_BACKWARD_MULTIMAP_H\n-#define _CPP_BACKWARD_MULTIMAP_H 1\n+#ifndef _BACKWARD_MULTIMAP_H\n+#define _BACKWARD_MULTIMAP_H 1\n \n #include \"backward_warning.h\"\n #include \"tree.h\"\n #include <map>\n \n using std::multimap;\n \n-#endif /* _CPP_BACKWARD_MULTIMAP_H */\n+#endif /* _BACKWARD_MULTIMAP_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "7ec0c9476c90f2de3b14a412179b58ee6d53b021", "filename": "libstdc++-v3/include/backward/multiset.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmultiset.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -53,16 +53,16 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-#ifndef _CPP_BACKWARD_MULTISET_H\n-#define _CPP_BACKWARD_MULTISET_H 1\n+#ifndef _BACKWARD_MULTISET_H\n+#define _BACKWARD_MULTISET_H 1\n \n #include \"backward_warning.h\"\n #include \"tree.h\"\n #include <set>\n \n using std::multiset;\n \n-#endif /* _CPP_BACKWARD_MULTISET_H */\n+#endif /* _BACKWARD_MULTISET_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "e39f97ae6b2698de64307ef6e4dc13ba9b3998a6", "filename": "libstdc++-v3/include/backward/new.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fnew.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fnew.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fnew.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _CPP_BACKWARD_NEW_H\n-#define _CPP_BACKWARD_NEW_H 1\n+#ifndef _BACKWARD_NEW_H\n+#define _BACKWARD_NEW_H 1\n \n #include \"backward_warning.h\"\n #include <new>"}, {"sha": "2a65929f97a27d0fcc6bd21ad0b6df0e7c0b6b3a", "filename": "libstdc++-v3/include/backward/ostream.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fostream.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -25,8 +25,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _CPP_BACKWARD_OSTREAM_H\n-#define _CPP_BACKWARD_OSTREAM_H 1\n+#ifndef _BACKWARD_OSTREAM_H\n+#define _BACKWARD_OSTREAM_H 1\n \n #include \"backward_warning.h\"\n #include \"iostream.h\""}, {"sha": "cbb3bc7ed6d53bd1d945030eb6c2e3007d67f640", "filename": "libstdc++-v3/include/backward/pair.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fpair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fpair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fpair.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -53,8 +53,8 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-#ifndef _CPP_BACKWARD_PAIR_H\n-#define _CPP_BACKWARD_PAIR_H 1\n+#ifndef _BACKWARD_PAIR_H\n+#define _BACKWARD_PAIR_H 1\n \n #include \"backward_warning.h\"\n #include <bits/c++config.h>\n@@ -63,7 +63,7 @@\n using std::pair;\n using std::make_pair;\n \n-#endif /* _CPP_BACKWARD_PAIR_H */\n+#endif /* _BACKWARD_PAIR_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "e092ac27263f351d3a2ac91db817a0defd0b14de", "filename": "libstdc++-v3/include/backward/queue.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fqueue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fqueue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fqueue.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -25,8 +25,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _CPP_BACKWARD_QUEUE_H\n-#define _CPP_BACKWARD_QUEUE_H 1\n+#ifndef _BACKWARD_QUEUE_H\n+#define _BACKWARD_QUEUE_H 1\n \n #include \"backward_warning.h\"\n #include <queue>"}, {"sha": "b6b18c2ab2bc24cd77c51fed0febc51f21d68c3d", "filename": "libstdc++-v3/include/backward/rope.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Frope.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Frope.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Frope.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -40,8 +40,8 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-#ifndef _CPP_BACKWARD_ROPE_H\n-#define _CPP_BACKWARD_ROPE_H 1\n+#ifndef _BACKWARD_ROPE_H\n+#define _BACKWARD_ROPE_H 1\n \n #include \"backward_warning.h\"\n #include \"hashtable.h\"   \n@@ -53,7 +53,7 @@ using __gnu_cxx::rope;\n using __gnu_cxx::crope; \n using __gnu_cxx::wrope; \n \n-#endif /* _CPP_BACKWARD_ROPE_H */\n+#endif /* _BACKWARD_ROPE_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "6a8320ba42ff629575798a482a3e792859f8b960", "filename": "libstdc++-v3/include/backward/set.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fset.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -53,16 +53,16 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-#ifndef _CPP_BACKWARD_SET_H\n-#define _CPP_BACKWARD_SET_H 1\n+#ifndef _BACKWARD_SET_H\n+#define _BACKWARD_SET_H 1\n \n #include \"backward_warning.h\"\n #include \"tree.h\"\n #include <set>\n \n using std::set;\n \n-#endif /* _CPP_BACKWARD_SET_H */\n+#endif /* _BACKWARD_SET_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "63db065fe35424a4482be468fecb9c016a943612", "filename": "libstdc++-v3/include/backward/slist.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fslist.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fslist.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fslist.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -41,15 +41,15 @@\n  *\n  */\n \n-#ifndef _CPP_BACKWARD_SLIST_H\n-#define _CPP_BACKWARD_SLIST_H 1\n+#ifndef _BACKWARD_SLIST_H\n+#define _BACKWARD_SLIST_H 1\n \n #include \"backward_warning.h\"\n #include <ext/slist>\n \n using __gnu_cxx::slist;\n \n-#endif /* _CPP_BACKWARD_SLIST_H */\n+#endif /* _BACKWARD_SLIST_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "0ff53a4357208ba2382c74f0f37fadcb20916a2f", "filename": "libstdc++-v3/include/backward/stack.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstack.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -53,8 +53,8 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-#ifndef _CPP_BACKWARD_STACK_H\n-#define _CPP_BACKWARD_STACK_H 1\n+#ifndef _BACKWARD_STACK_H\n+#define _BACKWARD_STACK_H 1\n \n #include \"backward_warning.h\"\n #include \"vector.h\"\n@@ -65,7 +65,7 @@\n \n using std::stack;\n \n-#endif /* _CPP_BACKWARD_STACK_H */\n+#endif /* _BACKWARD_STACK_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "8371b056a133caa0e13bb89d9fdb655c09b661cb", "filename": "libstdc++-v3/include/backward/stream.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstream.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -25,8 +25,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _CPP_BACKWARD_STREAM_H\n-#define _CPP_BACKWARD_STREAM_H 1\n+#ifndef _BACKWARD_STREAM_H\n+#define _BACKWARD_STREAM_H 1\n \n #include \"backward_warning.h\"\n #include \"iostream.h\""}, {"sha": "35a3c672dd22a8d1864b59a362da25449c69629d", "filename": "libstdc++-v3/include/backward/streambuf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstreambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstreambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstreambuf.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -25,8 +25,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _CPP_BACKWARD_STREAMBUF_H\n-#define _CPP_BACKWARD_STREAMBUF_H 1\n+#ifndef _BACKWARD_STREAMBUF_H\n+#define _BACKWARD_STREAMBUF_H 1\n \n #include \"backward_warning.h\"\n #include <streambuf>"}, {"sha": "75b9b8bbe45f058c61aff3464b82729aa13bcb06", "filename": "libstdc++-v3/include/backward/tempbuf.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftempbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftempbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftempbuf.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -53,8 +53,8 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-#ifndef _CPP_BACKWARD_TEMPBUF_H\n-#define _CPP_BACKWARD_TEMPBUF_H 1\n+#ifndef _BACKWARD_TEMPBUF_H\n+#define _BACKWARD_TEMPBUF_H 1\n \n #include \"backward_warning.h\"\n #include \"pair.h\"\n@@ -71,7 +71,7 @@ using std::get_temporary_buffer;\n using std::return_temporary_buffer;\n using __gnu_cxx::temporary_buffer;\n \n-#endif /* _CPP_BACKWARD_TEMPBUF_H */\n+#endif /* _BACKWARD_TEMPBUF_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "ca3ff89759446b0cf3425a0e7bc6c5179d1e160d", "filename": "libstdc++-v3/include/backward/tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftree.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -41,8 +41,8 @@\n  *\n  */\n \n-#ifndef _CPP_EXT_TREE\n-#define _CPP_EXT_TREE 1\n+#ifndef _BACKWARD_TREE\n+#define _BACKWARD_TREE 1\n \n #include \"backward_warning.h\"\n #include <ext/rb_tree>"}, {"sha": "961f41a7840bfdec33ed72cfcf0bea8a7c0fb114", "filename": "libstdc++-v3/include/backward/vector.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fvector.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -53,8 +53,8 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-#ifndef _CPP_BACKWARD_VECTOR_H\n-#define _CPP_BACKWARD_VECTOR_H 1\n+#ifndef _BACKWARD_VECTOR_H\n+#define _BACKWARD_VECTOR_H 1\n \n #include \"backward_warning.h\"\n #include \"algobase.h\"\n@@ -63,7 +63,7 @@\n \n using std::vector;\n \n-#endif /* _CPP_BACKWARD_VECTOR_H */\n+#endif /* _BACKWARD_VECTOR_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "a5bcaf5c512f84d16ff7d4935d7aff1a5860d5ee", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -206,7 +206,7 @@ namespace std\n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.\n   // NB: This syntax is a GNU extension.\n-#if _GLIBCPP_EXTERN_TEMPLATE\n+#if _GLIBCXX_EXTERN_TEMPLATE\n   extern template class allocator<char>;\n   extern template class allocator<wchar_t>;\n #endif"}, {"sha": "f2e468e6abf0419d76c0f3e8d6fabbea28cc930c", "filename": "libstdc++-v3/include/bits/basic_ios.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -33,8 +33,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef _CPP_BITS_BASICIOS_H\n-#define _CPP_BITS_BASICIOS_H 1\n+#ifndef _BASIC_IOS_H\n+#define _BASIC_IOS_H 1\n \n #pragma GCC system_header\n \n@@ -441,9 +441,9 @@ namespace std\n     };\n } // namespace std\n \n-#ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n+#ifdef _GLIBCXX_NO_TEMPLATE_EXPORT\n # define export\n #include <bits/basic_ios.tcc>\n #endif\n \n-#endif /* _CPP_BITS_BASICIOS_H */\n+#endif /* _BASIC_IOS_H */"}, {"sha": "d0a8ff3cc433115165f8ba1d33c7bee1212b21e0", "filename": "libstdc++-v3/include/bits/basic_ios.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _CPP_BITS_BASICIOS_TCC\n-#define _CPP_BITS_BASICIOS_TCC 1\n+#ifndef _BASIC_IOS_TCC\n+#define _BASIC_IOS_TCC 1\n \n #pragma GCC system_header\n \n@@ -176,10 +176,10 @@ namespace std\n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.  \n   // NB:  This syntax is a GNU extension.\n-#if _GLIBCPP_EXTERN_TEMPLATE\n+#if _GLIBCXX_EXTERN_TEMPLATE\n   extern template class basic_ios<char>;\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   extern template class basic_ios<wchar_t>;\n #endif\n #endif"}, {"sha": "8a9d5625030de34da045013665e2c19fb3b774bc", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -37,8 +37,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef _CPP_BITS_STRING_H\n-#define _CPP_BITS_STRING_H        1\n+#ifndef _BASIC_STRING_H\n+#define _BASIC_STRING_H 1\n \n #pragma GCC system_header\n \n@@ -875,7 +875,7 @@ namespace std\n       int\n       compare(const _CharT* __s) const;\n \n-      // _GLIBCPP_RESOLVE_LIB_DEFECTS\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 5 String::compare specification questionable\n       int\n       compare(size_type __pos, size_type __n1, const _CharT* __s) const;\n@@ -1074,4 +1074,4 @@ namespace std\n \t    basic_string<_CharT, _Traits, _Alloc>& __str);\n } // namespace std\n \n-#endif /* _CPP_BITS_STRING_H */\n+#endif /* _BASIC_STRING_H */"}, {"sha": "fb46c4ca346938b0039c99b25ecbf5914af27b0d", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -38,8 +38,8 @@\n // Written by Jason Merrill based upon the specification by Takanori Adachi\n // in ANSI X3J16/94-0013R2.  Rewritten by Nathan Myers to ISO-14882.\n \n-#ifndef _CPP_BITS_STRING_TCC\n-#define _CPP_BITS_STRING_TCC 1\n+#ifndef _BASIC_STRING_TCC\n+#define _BASIC_STRING_TCC 1\n \n #pragma GCC system_header\n \n@@ -502,7 +502,7 @@ namespace std\n     _S_create(size_t __capacity, const _Alloc& __alloc)\n     {\n       typedef basic_string<_CharT, _Traits, _Alloc> __string_type;\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 83.  String::npos vs. string::max_size()\n       if (__capacity > _S_max_size)\n #else\n@@ -1057,7 +1057,7 @@ namespace std\n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.  \n   // NB: This syntax is a GNU extension.\n-#if _GLIBCPP_EXTERN_TEMPLATE\n+#if _GLIBCXX_EXTERN_TEMPLATE\n   extern template class basic_string<char>;\n   extern template \n     basic_istream<char>& \n@@ -1072,7 +1072,7 @@ namespace std\n     basic_istream<char>& \n     getline(basic_istream<char>&, string&);\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   extern template class basic_string<wchar_t>;\n   extern template \n     basic_istream<wchar_t>& "}, {"sha": "b3ef7afe8f9aaa970e3ee2f3fb98874cbdda270b", "filename": "libstdc++-v3/include/bits/boost_concept_check.h", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -13,15 +13,15 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef _GLIBCPP_BOOST_CONCEPT_CHECK\n-#define _GLIBCPP_BOOST_CONCEPT_CHECK 1\n+#ifndef _BOOST_CONCEPT_CHECK_H\n+#define _BOOST_CONCEPT_CHECK_H 1\n \n #pragma GCC system_header\n+\n #include <cstddef>                // for ptrdiff_t, used next\n #include <bits/stl_iterator_base_types.h>    // for traits and tags\n #include <utility>                           // for pair<>\n \n-\n namespace __gnu_cxx\n {\n \n@@ -38,31 +38,31 @@ inline void __function_requires()\n \n \n // ??? Should the \"concept_checking*\" structs begin with more than _ ?\n-#define _GLIBCPP_CLASS_REQUIRES(_type_var, _ns, _concept) \\\n+#define _GLIBCXX_CLASS_REQUIRES(_type_var, _ns, _concept) \\\n   typedef void (_ns::_concept <_type_var>::* _func##_type_var##_concept)(); \\\n   template <_func##_type_var##_concept _Tp1> \\\n   struct _concept_checking##_type_var##_concept { }; \\\n   typedef _concept_checking##_type_var##_concept< \\\n     &_ns::_concept <_type_var>::__constraints> \\\n     _concept_checking_typedef##_type_var##_concept\n \n-#define _GLIBCPP_CLASS_REQUIRES2(_type_var1, _type_var2, _ns, _concept) \\\n+#define _GLIBCXX_CLASS_REQUIRES2(_type_var1, _type_var2, _ns, _concept) \\\n   typedef void (_ns::_concept <_type_var1,_type_var2>::* _func##_type_var1##_type_var2##_concept)(); \\\n   template <_func##_type_var1##_type_var2##_concept _Tp1> \\\n   struct _concept_checking##_type_var1##_type_var2##_concept { }; \\\n   typedef _concept_checking##_type_var1##_type_var2##_concept< \\\n     &_ns::_concept <_type_var1,_type_var2>::__constraints> \\\n     _concept_checking_typedef##_type_var1##_type_var2##_concept\n \n-#define _GLIBCPP_CLASS_REQUIRES3(_type_var1, _type_var2, _type_var3, _ns, _concept) \\\n+#define _GLIBCXX_CLASS_REQUIRES3(_type_var1, _type_var2, _type_var3, _ns, _concept) \\\n   typedef void (_ns::_concept <_type_var1,_type_var2,_type_var3>::* _func##_type_var1##_type_var2##_type_var3##_concept)(); \\\n   template <_func##_type_var1##_type_var2##_type_var3##_concept _Tp1> \\\n   struct _concept_checking##_type_var1##_type_var2##_type_var3##_concept { }; \\\n   typedef _concept_checking##_type_var1##_type_var2##_type_var3##_concept< \\\n     &_ns::_concept <_type_var1,_type_var2,_type_var3>::__constraints>  \\\n   _concept_checking_typedef##_type_var1##_type_var2##_type_var3##_concept\n \n-#define _GLIBCPP_CLASS_REQUIRES4(_type_var1, _type_var2, _type_var3, _type_var4, _ns, _concept) \\\n+#define _GLIBCXX_CLASS_REQUIRES4(_type_var1, _type_var2, _type_var3, _type_var4, _ns, _concept) \\\n   typedef void (_ns::_concept <_type_var1,_type_var2,_type_var3,_type_var4>::* _func##_type_var1##_type_var2##_type_var3##_type_var4##_concept)(); \\\n   template <_func##_type_var1##_type_var2##_type_var3##_type_var4##_concept _Tp1> \\\n   struct _concept_checking##_type_var1##_type_var2##_type_var3##_type_var4##_concept { }; \\\n@@ -240,7 +240,7 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n     _Tp __a, __b;\n   };\n \n-#define _GLIBCPP_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT(_OP,_NAME) \\\n+#define _GLIBCXX_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT(_OP,_NAME) \\\n   template <class _First, class _Second> \\\n   struct _NAME { \\\n     void __constraints() { (void)__constraints_(); } \\\n@@ -251,7 +251,7 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n     _Second __b; \\\n   }\n \n-#define _GLIBCPP_DEFINE_BINARY_OPERATOR_CONSTRAINT(_OP,_NAME) \\\n+#define _GLIBCXX_DEFINE_BINARY_OPERATOR_CONSTRAINT(_OP,_NAME) \\\n   template <class _Ret, class _First, class _Second> \\\n   struct _NAME { \\\n     void __constraints() { (void)__constraints_(); } \\\n@@ -262,21 +262,21 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n     _Second __b; \\\n   }\n \n-  _GLIBCPP_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT(==, _EqualOpConcept);\n-  _GLIBCPP_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT(!=, _NotEqualOpConcept);\n-  _GLIBCPP_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT(<, _LessThanOpConcept);\n-  _GLIBCPP_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT(<=, _LessEqualOpConcept);\n-  _GLIBCPP_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT(>, _GreaterThanOpConcept);\n-  _GLIBCPP_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT(>=, _GreaterEqualOpConcept);\n+  _GLIBCXX_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT(==, _EqualOpConcept);\n+  _GLIBCXX_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT(!=, _NotEqualOpConcept);\n+  _GLIBCXX_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT(<, _LessThanOpConcept);\n+  _GLIBCXX_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT(<=, _LessEqualOpConcept);\n+  _GLIBCXX_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT(>, _GreaterThanOpConcept);\n+  _GLIBCXX_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT(>=, _GreaterEqualOpConcept);\n \n-  _GLIBCPP_DEFINE_BINARY_OPERATOR_CONSTRAINT(+, _PlusOpConcept);\n-  _GLIBCPP_DEFINE_BINARY_OPERATOR_CONSTRAINT(*, _TimesOpConcept);\n-  _GLIBCPP_DEFINE_BINARY_OPERATOR_CONSTRAINT(/, _DivideOpConcept);\n-  _GLIBCPP_DEFINE_BINARY_OPERATOR_CONSTRAINT(-, _SubtractOpConcept);\n-  _GLIBCPP_DEFINE_BINARY_OPERATOR_CONSTRAINT(%, _ModOpConcept);\n+  _GLIBCXX_DEFINE_BINARY_OPERATOR_CONSTRAINT(+, _PlusOpConcept);\n+  _GLIBCXX_DEFINE_BINARY_OPERATOR_CONSTRAINT(*, _TimesOpConcept);\n+  _GLIBCXX_DEFINE_BINARY_OPERATOR_CONSTRAINT(/, _DivideOpConcept);\n+  _GLIBCXX_DEFINE_BINARY_OPERATOR_CONSTRAINT(-, _SubtractOpConcept);\n+  _GLIBCXX_DEFINE_BINARY_OPERATOR_CONSTRAINT(%, _ModOpConcept);\n \n-#undef _GLIBCPP_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT\n-#undef _GLIBCPP_DEFINE_BINARY_OPERATOR_CONSTRAINT\n+#undef _GLIBCXX_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT\n+#undef _GLIBCXX_DEFINE_BINARY_OPERATOR_CONSTRAINT\n \n   //===========================================================================\n   // Function Object Concepts\n@@ -896,6 +896,6 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n \n #undef _IsUnused\n \n-#endif // _GLIBCPP_BOOST_CONCEPT_CHECK\n+#endif // _GLIBCXX_BOOST_CONCEPT_CHECK\n \n "}, {"sha": "169394a923fde65f0644ca5787f29c7647ef5739", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -28,17 +28,17 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _CPP_CPPCONFIG\n-#define _CPP_CPPCONFIG 1\n+#ifndef _CXXCONFIG\n+#define _CXXCONFIG 1\n \n // Pick up any OS-specific definitions.\n #include <bits/os_defines.h>\n \n // The current version of the C++ library in compressed ISO date format.\n-#define __GLIBCPP__ 20030705\n+#define __GLIBCXX__ 20030704\n \n // This is necessary until GCC supports separate template compilation.\n-#define _GLIBCPP_NO_TEMPLATE_EXPORT 1\n+#define _GLIBCXX_NO_TEMPLATE_EXPORT 1\n \n // This is a hack around not having either pre-compiled headers or\n // export compilation. If defined, the io, string, and valarray\n@@ -47,26 +47,26 @@\n // types. For the io library, this means that larger, out-of-line\n // member functions are only declared, and definitions are not parsed\n // by the compiler, but instead instantiated into the library binary.\n-#define _GLIBCPP_FULLY_COMPLIANT_HEADERS 1\n+#define _GLIBCXX_FULLY_COMPLIANT_HEADERS 1\n \n // Allow use of the GNU syntax extension, \"extern template.\" This\n // extension is fully documented in the g++ manual, but in a nutshell,\n // it inhibits all implicit instantiations and is used throughout the\n // library to avoid multiple weak definitions for required types that\n // are already explicitly instantiated in the library binary. This\n // substantially reduces the binary size of resulting executables.\n-#ifndef _GLIBCPP_EXTERN_TEMPLATE\n-# define _GLIBCPP_EXTERN_TEMPLATE 1\n+#ifndef _GLIBCXX_EXTERN_TEMPLATE\n+# define _GLIBCXX_EXTERN_TEMPLATE 1\n #endif\n \n // To enable older, ARM-style iostreams and other anachronisms use this.\n-//#define _GLIBCPP_DEPRECATED 1\n+//#define _GLIBCXX_DEPRECATED 1\n \n // Use corrected code from the committee library group's issues list.\n-#define _GLIBCPP_RESOLVE_LIB_DEFECTS 1\n+#define _GLIBCXX_RESOLVE_LIB_DEFECTS 1\n \n // Hopefully temporary workaround to autoconf/m4 issue with quoting '@'.\n-#define _GLIBCPP_AT_AT \"@@\"\n+#define _GLIBCXX_AT_AT \"@@\"\n \n // In those parts of the standard C++ library that use a mutex instead\n // of a spin-lock, we now unconditionally use GCC's gthr.h mutex\n@@ -92,9 +92,9 @@\n \n // Create a boolean flag to be used to determine if --fast-math is set.\n #ifdef __FAST_MATH__\n-# define _GLIBCPP_FAST_MATH 1\n+# define _GLIBCXX_FAST_MATH 1\n #else\n-# define _GLIBCPP_FAST_MATH 0\n+# define _GLIBCXX_FAST_MATH 0\n #endif\n \n // This marks string literals in header files to be extracted for eventual"}, {"sha": "a6d1d8c3b3770dd4fb6f549868de77eece57301a", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -37,8 +37,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef _CPP_BITS_CHAR_TRAITS_H\n-#define _CPP_BITS_CHAR_TRAITS_H 1\n+#ifndef _CHAR_TRAITS_H\n+#define _CHAR_TRAITS_H 1\n \n #pragma GCC system_header\n \n@@ -181,7 +181,7 @@ namespace std\n   };\n \n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   /// 21.1.3.2  char_traits specializations\n   template<>\n     struct char_traits<wchar_t>\n@@ -245,7 +245,7 @@ namespace std\n       not_eof(const int_type& __c)\n       { return eq_int_type(__c, eof()) ? 0 : __c; }\n   };\n-#endif //_GLIBCPP_USE_WCHAR_T\n+#endif //_GLIBCXX_USE_WCHAR_T\n \n   template<typename _CharT, typename _Traits>\n     struct _Char_traits_match"}, {"sha": "f013142ffea7d38725b2b6bf673d4d7c529dcd7a", "filename": "libstdc++-v3/include/bits/codecvt.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -38,8 +38,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef _CPP_BITS_CODECVT_H\n-#define _CPP_BITS_CODECVT_H\t1\n+#ifndef _CODECVT_H\n+#define _CODECVT_H 1\n \n #pragma GCC system_header\n \n@@ -271,7 +271,7 @@\n       do_max_length() const throw();\n   };\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   // codecvt<wchar_t, char, mbstate_t> required specialization\n   template<>\n     class codecvt<wchar_t, char, mbstate_t> \n@@ -330,7 +330,7 @@\n       virtual int \n       do_max_length() const throw();\n     };\n-#endif //_GLIBCPP_USE_WCHAR_T\n+#endif //_GLIBCXX_USE_WCHAR_T\n \n   // 22.2.1.6  Template class codecvt_byname\n   template<typename _InternT, typename _ExternT, typename _StateT>\n@@ -353,8 +353,8 @@\n \n   // Include host and configuration specific partial specializations\n   // with additional functionality, if possible.\n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   #include <bits/codecvt_specializations.h>\n #endif\n \n-#endif // _CPP_BITS_CODECVT_H\n+#endif // _CODECVT_H"}, {"sha": "80c1439342d7444f25a7ddcba24af2c0120e6d1b", "filename": "libstdc++-v3/include/bits/concept_check.h", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fconcept_check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fconcept_check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fconcept_check.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -32,8 +32,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef _GLIBCPP_CONCEPT_CHECK\n-#define _GLIBCPP_CONCEPT_CHECK 1\n+#ifndef _CONCEPT_CHECK_H\n+#define _CONCEPT_CHECK_H 1\n \n #pragma GCC system_header\n \n@@ -47,39 +47,39 @@\n // Concept-checking code is off by default unless users turn it on via\n // configure options or editing c++config.h.\n \n-#ifndef _GLIBCPP_CONCEPT_CHECKS\n+#ifndef _GLIBCXX_CONCEPT_CHECKS\n \n-#define __glibcpp_function_requires(...)\n-#define __glibcpp_class_requires(_a,_b)\n-#define __glibcpp_class_requires2(_a,_b,_c)\n-#define __glibcpp_class_requires3(_a,_b,_c,_d)\n-#define __glibcpp_class_requires4(_a,_b,_c,_d,_e)\n+#define __glibcxx_function_requires(...)\n+#define __glibcxx_class_requires(_a,_b)\n+#define __glibcxx_class_requires2(_a,_b,_c)\n+#define __glibcxx_class_requires3(_a,_b,_c,_d)\n+#define __glibcxx_class_requires4(_a,_b,_c,_d,_e)\n \n #else // the checks are on\n \n #include <bits/boost_concept_check.h>\n \n // Note that the obvious and elegant approach of\n //\n-//#define glibcpp_function_requires(C) boost::function_requires< boost::C >()\n+//#define glibcxx_function_requires(C) boost::function_requires< boost::C >()\n //\n // won't work due to concept templates with more than one parameter, e.g.,\n // BinaryPredicateConcept.  The preprocessor tries to split things up on\n // the commas in the template argument list.  We can't use an inner pair of\n // parenthesis to hide the commas, because \"boost::(Temp<Foo,Bar>)\" isn't\n // a valid instantiation pattern.  Thus, we steal a feature from C99.\n \n-#define __glibcpp_function_requires(...)                                 \\\n+#define __glibcxx_function_requires(...)                                 \\\n             __gnu_cxx::__function_requires< __gnu_cxx::__VA_ARGS__ >();\n-#define __glibcpp_class_requires(_a,_C)                                  \\\n-            _GLIBCPP_CLASS_REQUIRES(_a, __gnu_cxx, _C);\n-#define __glibcpp_class_requires2(_a,_b,_C)                              \\\n-            _GLIBCPP_CLASS_REQUIRES2(_a, _b, __gnu_cxx, _C);\n-#define __glibcpp_class_requires3(_a,_b,_c,_C)                           \\\n-            _GLIBCPP_CLASS_REQUIRES3(_a, _b, _c, __gnu_cxx, _C);\n-#define __glibcpp_class_requires4(_a,_b,_c,_d,_C)                        \\\n-            _GLIBCPP_CLASS_REQUIRES4(_a, _b, _c, _d, __gnu_cxx, _C);\n+#define __glibcxx_class_requires(_a,_C)                                  \\\n+            _GLIBCXX_CLASS_REQUIRES(_a, __gnu_cxx, _C);\n+#define __glibcxx_class_requires2(_a,_b,_C)                              \\\n+            _GLIBCXX_CLASS_REQUIRES2(_a, _b, __gnu_cxx, _C);\n+#define __glibcxx_class_requires3(_a,_b,_c,_C)                           \\\n+            _GLIBCXX_CLASS_REQUIRES3(_a, _b, _c, __gnu_cxx, _C);\n+#define __glibcxx_class_requires4(_a,_b,_c,_d,_C)                        \\\n+            _GLIBCXX_CLASS_REQUIRES4(_a, _b, _c, _d, __gnu_cxx, _C);\n \n #endif // enable/disable\n \n-#endif // _GLIBCPP_CONCEPT_CHECK\n+#endif // _GLIBCXX_CONCEPT_CHECK"}, {"sha": "00fe5606b895ed126973de565a3bddbf7b666e94", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -34,8 +34,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef _CPP_BITS_CPP_TYPE_TRAITS_H\n-#define _CPP_BITS_CPP_TYPE_TRAITS_H 1\n+#ifndef _CPP_TYPE_TRAITS_H\n+#define _CPP_TYPE_TRAITS_H 1\n \n #pragma GCC system_header\n \n@@ -167,7 +167,7 @@ namespace std\n     };\n   };\n \n-# ifdef _GLIBCPP_USE_WCHAR_T\n+# ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n   struct __is_integer<wchar_t>\n   {\n@@ -329,4 +329,4 @@ namespace std\n } // namespace std\n \n \n-#endif //_CPP_BITS_CPP_TYPE_TRAITS_H\n+#endif //_CPP_TYPE_TRAITS_H"}, {"sha": "d6fdcd58c3ea8bf09f8f1473737c9d966887d52a", "filename": "libstdc++-v3/include/bits/demangle.h", "status": "modified", "additions": 160, "deletions": 160, "changes": 320, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdemangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdemangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdemangle.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -28,44 +28,44 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef __DEMANGLER_H\n-#define __DEMANGLER_H 1\n+#ifndef _DEMANGLER_H\n+#define _DEMANGLER_H 1\n \n #include <limits>\n #include <vector>\n #include <string>\n #include <cctype>\n \n-#ifndef _GLIBCPP_DEMANGLER_DEBUG\n-#define _GLIBCPP_DEMANGLER_CWDEBUG 0\n-#define _GLIBCPP_DEMANGLER_DEBUG(x)\n-#define _GLIBCPP_DEMANGLER_DOUT(cntrl, data)\n-#define _GLIBCPP_DEMANGLER_DOUT_ENTERING(x)\n-#define _GLIBCPP_DEMANGLER_DOUT_ENTERING2(x)\n-#define _GLIBCPP_DEMANGLER_RETURN \\\n+#ifndef _GLIBCXX_DEMANGLER_DEBUG\n+#define _GLIBCXX_DEMANGLER_CWDEBUG 0\n+#define _GLIBCXX_DEMANGLER_DEBUG(x)\n+#define _GLIBCXX_DEMANGLER_DOUT(cntrl, data)\n+#define _GLIBCXX_DEMANGLER_DOUT_ENTERING(x)\n+#define _GLIBCXX_DEMANGLER_DOUT_ENTERING2(x)\n+#define _GLIBCXX_DEMANGLER_RETURN \\\n     return M_result\n-#define _GLIBCPP_DEMANGLER_RETURN2 \\\n+#define _GLIBCXX_DEMANGLER_RETURN2 \\\n     return M_result\n-#define _GLIBCPP_DEMANGLER_FAILURE \\\n+#define _GLIBCXX_DEMANGLER_FAILURE \\\n     do { M_result = false; return false; } while(0)\n #else\n-#define _GLIBCPP_DEMANGLER_CWDEBUG 1\n+#define _GLIBCXX_DEMANGLER_CWDEBUG 1\n #endif\n \n // The following defines change the behaviour of the demangler.  The\n // default behaviour is that none of these macros is defined.\n \n-// _GLIBCPP_DEMANGLER_STYLE_VOID\n+// _GLIBCXX_DEMANGLER_STYLE_VOID\n // Default behaviour:\t\t\t\t\tint f()\n // Uses (void) instead of ():\t\t\t\tint f(void)\n \n-// _GLIBCPP_DEMANGLER_STYLE_LITERAL\n+// _GLIBCXX_DEMANGLER_STYLE_LITERAL\n // Default behaviour:\t\t\t\t\t(long)13, \n //\t\t\t\t\t\t\t(unsigned long long)19\n // Use extensions 'u', 'l' and 'll' for integral\n // literals (as in template arguments):\t\t\t13l, 19ull\n \n-// _GLIBCPP_DEMANGLER_STYLE_LITERAL_INT\n+// _GLIBCXX_DEMANGLER_STYLE_LITERAL_INT\n // Default behaviour:\t\t\t\t\t4\n // Use also an explicit cast for int in literals:\t(int)4\n \n@@ -282,7 +282,7 @@ namespace __gnu_cxx\n \tstd::vector<int, Allocator> M_template_arg_pos;\n \tint M_template_arg_pos_offset;\n \tstd::vector<substitution_st, Allocator> M_substitutions_pos;\n-#if _GLIBCPP_DEMANGLER_CWDEBUG\n+#if _GLIBCXX_DEMANGLER_CWDEBUG\n \tbool M_inside_add_substitution;\n #endif\n \n@@ -294,7 +294,7 @@ namespace __gnu_cxx\n \t  M_name_is_cdtor(false), M_name_is_template(false),\n \t  M_name_is_conversion_operator(false),\n \t  M_template_args_need_space(false), M_template_arg_pos_offset(0)\n-#if _GLIBCPP_DEMANGLER_CWDEBUG\n+#if _GLIBCXX_DEMANGLER_CWDEBUG\n \t  , M_inside_add_substitution(false)\n #endif\n \t{ }\n@@ -373,7 +373,7 @@ namespace __gnu_cxx\n       };\n \n     template<typename Allocator>\n-#if !_GLIBCPP_DEMANGLER_CWDEBUG\n+#if !_GLIBCXX_DEMANGLER_CWDEBUG\n       inline\n #endif\n       void\n@@ -383,14 +383,14 @@ namespace __gnu_cxx\n       {\n \tif (!M_inside_substitution)\n \t{\n-#if _GLIBCPP_DEMANGLER_CWDEBUG\n+#if _GLIBCXX_DEMANGLER_CWDEBUG\n \t  if (M_inside_add_substitution)\n \t    return;\n #endif\n \t  M_substitutions_pos.\n \t      push_back(substitution_st(start_pos,\n \t\t  sub_type, number_of_prefixes));\n-#if _GLIBCPP_DEMANGLER_CWDEBUG\n+#if _GLIBCXX_DEMANGLER_CWDEBUG\n \t  if (!DEBUGCHANNELS::dc::demangler.is_on())\n \t    return;\n \t  string_type substitution_name(\"S\");\n@@ -403,7 +403,7 @@ namespace __gnu_cxx\n \t  int saved_pos = M_pos;\n \t  M_pos = start_pos;\n \t  M_inside_add_substitution = true;\n-\t  _GLIBCPP_DEMANGLER_DEBUG( dc::demangler.off() );\n+\t  _GLIBCXX_DEMANGLER_DEBUG( dc::demangler.off() );\n \t  switch(sub_type)\n \t  {\n \t    case type:\n@@ -437,8 +437,8 @@ namespace __gnu_cxx\n \t      break;\n \t  }\n \t  M_pos = saved_pos;\n-\t  _GLIBCPP_DEMANGLER_DEBUG( dc::demangler.on() );\n-\t  _GLIBCPP_DEMANGLER_DOUT(dc::demangler,\n+\t  _GLIBCXX_DEMANGLER_DEBUG( dc::demangler.on() );\n+\t  _GLIBCXX_DEMANGLER_DOUT(dc::demangler,\n \t      \"Adding substitution \" << substitution_name\n \t      << \" : \" << subst\n \t      << \" (from \" << location_ct((char*)__builtin_return_address(0)\n@@ -487,7 +487,7 @@ namespace __gnu_cxx\n       bool\n       session<Allocator>::decode_number(string_type& output)\n       {\n-\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_number\");\n+\t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_number\");\n \tif (current() != 'n')\n \t  decode_decimal_integer(output);\n \telse\n@@ -496,7 +496,7 @@ namespace __gnu_cxx\n \t  eat_current();\n \t  decode_decimal_integer(output);\n \t}\n-\t_GLIBCPP_DEMANGLER_RETURN;\n+\t_GLIBCXX_DEMANGLER_RETURN;\n       }\n \n     // <builtin-type> ::= v  # void\n@@ -557,13 +557,13 @@ namespace __gnu_cxx\n       bool\n       session<Allocator>::decode_builtin_type(string_type& output)\n       {\n-\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_builtin_type\");\n+\t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_builtin_type\");\n \tchar const* bt;\n \tif (!islower(current()) || !(bt = builtin_type_c[current() - 'a']))\n-\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\t  _GLIBCXX_DEMANGLER_FAILURE;\n \toutput += bt;\n \teat_current();\n-\t_GLIBCPP_DEMANGLER_RETURN;\n+\t_GLIBCXX_DEMANGLER_RETURN;\n       }\n \n     // <class-enum-type> ::= <name>\n@@ -572,12 +572,12 @@ namespace __gnu_cxx\n       bool\n       session<Allocator>::decode_class_enum_type(string_type& output)\n       {\n-\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_class_enum_type\");\n+\t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_class_enum_type\");\n \tstring_type nested_name_qualifiers;\n \tif (!decode_name(output, nested_name_qualifiers))\n-\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\t  _GLIBCXX_DEMANGLER_FAILURE;\n \toutput += nested_name_qualifiers;\n-\t_GLIBCPP_DEMANGLER_RETURN;\n+\t_GLIBCXX_DEMANGLER_RETURN;\n       }\n \n     // <substitution> ::=\n@@ -601,7 +601,7 @@ namespace __gnu_cxx\n       session<Allocator>::decode_substitution(string_type& output,\n \t  qualifier_list<Allocator>* qualifiers)\n       {\n-\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_substitution\");\n+\t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_substitution\");\n \tunsigned int value = 0;\n \tchar c = next();\n \tif (c != '_')\n@@ -621,7 +621,7 @@ namespace __gnu_cxx\n \t      eat_current();\n \t      if (qualifiers)\n \t\tqualifiers->printing_suppressed();\n-\t      _GLIBCPP_DEMANGLER_RETURN;\n+\t      _GLIBCXX_DEMANGLER_RETURN;\n \t    }\n \t    case 'b':\n \t    {\n@@ -636,7 +636,7 @@ namespace __gnu_cxx\n \t      eat_current();\n \t      if (qualifiers)\n \t\tqualifiers->printing_suppressed();\n-\t      _GLIBCPP_DEMANGLER_RETURN;\n+\t      _GLIBCXX_DEMANGLER_RETURN;\n \t    }\n \t    case 'd':\n \t      output += \"std::iostream\";\n@@ -650,7 +650,7 @@ namespace __gnu_cxx\n \t      eat_current();\n \t      if (qualifiers)\n \t\tqualifiers->printing_suppressed();\n-\t      _GLIBCPP_DEMANGLER_RETURN;\n+\t      _GLIBCXX_DEMANGLER_RETURN;\n \t    case 'i':\n \t      output += \"std::istream\";\n \t      if (!M_inside_template_args)\n@@ -663,7 +663,7 @@ namespace __gnu_cxx\n \t      eat_current();\n \t      if (qualifiers)\n \t\tqualifiers->printing_suppressed();\n-\t      _GLIBCPP_DEMANGLER_RETURN;\n+\t      _GLIBCXX_DEMANGLER_RETURN;\n \t    case 'o':\n \t      output += \"std::ostream\";\n \t      if (!M_inside_template_args)\n@@ -676,7 +676,7 @@ namespace __gnu_cxx\n \t      eat_current();\n \t      if (qualifiers)\n \t\tqualifiers->printing_suppressed();\n-\t      _GLIBCPP_DEMANGLER_RETURN;\n+\t      _GLIBCXX_DEMANGLER_RETURN;\n \t    case 's':\n \t      output += \"std::string\";\n \t      if (!M_inside_template_args)\n@@ -689,13 +689,13 @@ namespace __gnu_cxx\n \t      eat_current();\n \t      if (qualifiers)\n \t\tqualifiers->printing_suppressed();\n-\t      _GLIBCPP_DEMANGLER_RETURN;\n+\t      _GLIBCXX_DEMANGLER_RETURN;\n \t    case 't':\n \t      output += \"std\";\n \t      eat_current();\n \t      if (qualifiers)\n \t\tqualifiers->printing_suppressed();\n-\t      _GLIBCPP_DEMANGLER_RETURN;\n+\t      _GLIBCXX_DEMANGLER_RETURN;\n \t    default:\n \t      for(;; c = next())\n \t      {\n@@ -706,7 +706,7 @@ namespace __gnu_cxx\n \t\telse if (c == '_')\n \t\t  break;\n \t\telse\n-\t\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\t\t  _GLIBCXX_DEMANGLER_FAILURE;\n \t      }\n \t      ++value;\n \t      break;\n@@ -715,7 +715,7 @@ namespace __gnu_cxx\n \teat_current();\n \tif (value >= M_substitutions_pos.size() ||\n \t    M_inside_type > 20)\t\t\t// Rather than core dump.\n-\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\t  _GLIBCXX_DEMANGLER_FAILURE;\n \t++M_inside_substitution;\n \tint saved_pos = M_pos;\n \tsubstitution_st& substitution(M_substitutions_pos[value]);\n@@ -738,7 +738,7 @@ namespace __gnu_cxx\n \t\t  output += ' ';\n \t\tM_template_args_need_space = false;\n \t\tif (!decode_template_args(output))\n-\t\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\t\t  _GLIBCXX_DEMANGLER_FAILURE;\n \t      }\n \t      else\n \t      {\n@@ -747,10 +747,10 @@ namespace __gnu_cxx\n \t\tif (current() == 'S')\n \t\t{\n \t\t  if (!decode_substitution(output))\n-\t\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t\t    _GLIBCXX_DEMANGLER_FAILURE;\n \t\t}\n \t\telse if (!decode_unqualified_name(output))\n-\t\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\t\t  _GLIBCXX_DEMANGLER_FAILURE;\n \t      }\n \t    }\n \t    if (qualifiers)\n@@ -764,7 +764,7 @@ namespace __gnu_cxx\n \t}\n \tM_pos = saved_pos;\n \t--M_inside_substitution;\n-\t_GLIBCPP_DEMANGLER_RETURN;\n+\t_GLIBCXX_DEMANGLER_RETURN;\n       }\n \n     // <template-param> ::= T_\t\t\t# first template parameter\n@@ -775,9 +775,9 @@ namespace __gnu_cxx\n       session<Allocator>::decode_template_param(string_type& output,\n \t  qualifier_list<Allocator>* qualifiers)\n       {\n-\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_template_parameter\");\n+\t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_template_parameter\");\n \tif (current() != 'T')\n-\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\t  _GLIBCXX_DEMANGLER_FAILURE;\n \tunsigned int value = 0;\n \tchar c;\n \tif ((c = next()) != '_')\n@@ -790,14 +790,14 @@ namespace __gnu_cxx\n \t  ++value;\n \t}\n \tif (eat_current() != '_')\n-\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\t  _GLIBCXX_DEMANGLER_FAILURE;\n \tvalue += M_template_arg_pos_offset;\n \tif (value >= M_template_arg_pos.size())\n-\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\t  _GLIBCXX_DEMANGLER_FAILURE;\n \tint saved_pos = M_pos;\n \tM_pos = M_template_arg_pos[value];\n \tif (M_inside_type > 20)\t\t// Rather than core dump.\n-\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\t  _GLIBCXX_DEMANGLER_FAILURE;\n \t++M_inside_substitution;\n \tif (current() == 'X')\n \t{\n@@ -810,23 +810,23 @@ namespace __gnu_cxx\n \t  decode_type(output, qualifiers);\n \t--M_inside_substitution;\n \tM_pos = saved_pos;\n-\t_GLIBCPP_DEMANGLER_RETURN;\n+\t_GLIBCXX_DEMANGLER_RETURN;\n       }\n \n     template<typename Allocator>\n       bool\n       session<Allocator>::decode_literal(string_type& output)\n       {\n-\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_literal\");\n+\t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_literal\");\n \teat_current();\t// Eat the 'L'.\n \tif (current() == '_')\n \t{\n \t  if (next() != 'Z')\n-\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t    _GLIBCXX_DEMANGLER_FAILURE;\n \t  eat_current();\n \t  if ((M_pos += decode_encoding(output, M_str + M_pos,\n \t\t  M_maxpos - M_pos + 1)) < 0)\n-\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t    _GLIBCXX_DEMANGLER_FAILURE;\n \t}\n \telse\n \t{\n@@ -838,16 +838,16 @@ namespace __gnu_cxx\n \t    else\n \t      output += \"true\";\n \t    eat_current();\n-\t    _GLIBCPP_DEMANGLER_RETURN;\n+\t    _GLIBCXX_DEMANGLER_RETURN;\n \t  }\n \t  char c = current();\n-#ifdef _GLIBCPP_DEMANGLER_STYLE_LITERAL\n+#ifdef _GLIBCXX_DEMANGLER_STYLE_LITERAL\n \t  if (c == 'i' || c == 'j' || c == 'l' ||\n \t      c == 'm' || c == 'x' || c == 'y')\n \t    eat_current();\n \t  else\n #else\n-#ifndef _GLIBCPP_DEMANGLER_STYLE_LITERAL_INT\n+#ifndef _GLIBCXX_DEMANGLER_STYLE_LITERAL_INT\n \t  if (c == 'i')\n \t    eat_current();\n \t  else\n@@ -856,12 +856,12 @@ namespace __gnu_cxx\n \t  {\n \t    output += '(';\n \t    if (!decode_type(output))\n-\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t      _GLIBCXX_DEMANGLER_FAILURE;\n \t    output += ')';\n \t  }\n \t  if (!decode_number(output))\n-\t    _GLIBCPP_DEMANGLER_FAILURE;\n-#ifdef _GLIBCPP_DEMANGLER_STYLE_LITERAL\n+\t    _GLIBCXX_DEMANGLER_FAILURE;\n+#ifdef _GLIBCXX_DEMANGLER_STYLE_LITERAL\n \t  if (c == 'j' || c == 'm' || c == 'y')\n \t    output += 'u';\n \t  if (c == 'l' || c == 'm')\n@@ -870,7 +870,7 @@ namespace __gnu_cxx\n \t    output += \"ll\";\n #endif\n \t}\n-\t_GLIBCPP_DEMANGLER_RETURN;\n+\t_GLIBCXX_DEMANGLER_RETURN;\n       }\n \n     // <operator-name> ::=\n@@ -1040,7 +1040,7 @@ namespace __gnu_cxx\n       bool\n       session<Allocator>::decode_operator_name(string_type& output)\n       {\n-\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_operator_name\");\n+\t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_operator_name\");\n \n \tchar opcode0 = current();\n \tchar opcode1 = tolower(next());\n@@ -1066,7 +1066,7 @@ namespace __gnu_cxx\n \t      eat_current();\n \t      if (hash == 27 || hash == 28)\n \t\tM_template_args_need_space = true;\n-\t      _GLIBCPP_DEMANGLER_RETURN;\n+\t      _GLIBCXX_DEMANGLER_RETURN;\n \t    }\n \t    else if (opcode0 == 'c' && opcode1 == 'v')\n \t    {\n@@ -1082,14 +1082,14 @@ namespace __gnu_cxx\n \t\tM_template_arg_pos.push_back(M_pos + 3);\n \t      }\n \t      if (!decode_type(output))\n-\t\t_GLIBCPP_DEMANGLER_FAILURE;\n+\t\t_GLIBCXX_DEMANGLER_FAILURE;\n \t      if (!M_inside_template_args)\n \t\tM_name_is_conversion_operator = true;\n-\t      _GLIBCPP_DEMANGLER_RETURN;\n+\t      _GLIBCXX_DEMANGLER_RETURN;\n \t    }\n \t  }\n \t}\n-\t_GLIBCPP_DEMANGLER_FAILURE;\n+\t_GLIBCXX_DEMANGLER_FAILURE;\n       }\n \n     //\n@@ -1105,21 +1105,21 @@ namespace __gnu_cxx\n       bool\n       session<Allocator>::decode_expression(string_type& output)\n       {\n-\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_expression\");\n+\t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_expression\");\n \tif (current() == 'T')\n \t{\n \t  if (!decode_template_param(output))\n-\t    _GLIBCPP_DEMANGLER_FAILURE;\n-\t  _GLIBCPP_DEMANGLER_RETURN;\n+\t    _GLIBCXX_DEMANGLER_FAILURE;\n+\t  _GLIBCXX_DEMANGLER_RETURN;\n \t}\n \telse if (current() == 'L')\n \t{\n \t  if (!decode_literal(output))\n-\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t    _GLIBCXX_DEMANGLER_FAILURE;\n \t  if (current() != 'E')\n-\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t    _GLIBCXX_DEMANGLER_FAILURE;\n \t  eat_current();\n-\t  _GLIBCPP_DEMANGLER_RETURN;\n+\t  _GLIBCXX_DEMANGLER_RETURN;\n \t}\n \telse\n \t{\n@@ -1152,7 +1152,7 @@ namespace __gnu_cxx\n \t\teat_current();\n \t\toutput += '(';\n \t\tif (!decode_expression(output))\n-\t\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\t\t  _GLIBCXX_DEMANGLER_FAILURE;\n \t\toutput += ')';\n \t\tif (!entry.unary)\n \t\t{\n@@ -1163,15 +1163,15 @@ namespace __gnu_cxx\n \t\t  output += ' ';\n \t\t  output += '(';\n \t\t  if (!decode_expression(output))\n-\t\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t\t    _GLIBCXX_DEMANGLER_FAILURE;\n \t\t  output += ')';\n \t\t}\n-\t\t_GLIBCPP_DEMANGLER_RETURN;\n+\t\t_GLIBCXX_DEMANGLER_RETURN;\n \t      }\n \t    }\n \t  }\n \t}\n-\t_GLIBCPP_DEMANGLER_FAILURE;\n+\t_GLIBCXX_DEMANGLER_FAILURE;\n       }\n \n     //\n@@ -1184,9 +1184,9 @@ namespace __gnu_cxx\n       bool\n       session<Allocator>::decode_template_args(string_type& output)\n       {\n-\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_template_args\");\n+\t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_template_args\");\n \tif (eat_current() != 'I')\n-\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\t  _GLIBCXX_DEMANGLER_FAILURE;\n \tint prev_size = M_template_arg_pos.size();\n \t++M_inside_template_args;\n \tif (M_template_args_need_space)\n@@ -1203,21 +1203,21 @@ namespace __gnu_cxx\n \t  {\n \t    eat_current();\n \t    if (!decode_expression(output))\n-\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t      _GLIBCXX_DEMANGLER_FAILURE;\n \t    if (current() != 'E')\n-\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t      _GLIBCXX_DEMANGLER_FAILURE;\n \t    eat_current();\n \t  }\n \t  else if (current() == 'L')\n \t  {\n \t    if (!decode_literal(output))\n-\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t      _GLIBCXX_DEMANGLER_FAILURE;\n \t    if (current() != 'E')\n-\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t      _GLIBCXX_DEMANGLER_FAILURE;\n \t    eat_current();\n \t  }\n \t  else if (!decode_type(output))\n-\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t    _GLIBCXX_DEMANGLER_FAILURE;\n \t  if (current() == 'E')\n \t    break;\n \t  output += \", \";\n@@ -1232,7 +1232,7 @@ namespace __gnu_cxx\n \t  M_name_is_template = true;\n \t  M_template_arg_pos_offset = prev_size;\n \t}\n-\t_GLIBCPP_DEMANGLER_RETURN;\n+\t_GLIBCXX_DEMANGLER_RETURN;\n       }\n \n     // <bare-function-type> ::=\n@@ -1242,38 +1242,38 @@ namespace __gnu_cxx\n       bool\n       session<Allocator>::decode_bare_function_type(string_type& output)\n       {\n-\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_bare_function_type\");\n+\t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_bare_function_type\");\n \tif (M_saw_destructor)\n \t{\n \t  if (eat_current() != 'v' || (current() != 'E' && current() != 0))\n-\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t    _GLIBCXX_DEMANGLER_FAILURE;\n \t  output += \"()\";\n \t  M_saw_destructor = false;\n-\t  _GLIBCPP_DEMANGLER_RETURN;\n+\t  _GLIBCXX_DEMANGLER_RETURN;\n \t}\n-#ifndef _GLIBCPP_DEMANGLER_STYLE_VOID\n+#ifndef _GLIBCXX_DEMANGLER_STYLE_VOID\n \tif (current() == 'v')\n \t{\n \t  eat_current();\n \t  if (current() != 'E' && current() != 0)\n-\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t    _GLIBCXX_DEMANGLER_FAILURE;\n \t  output += \"()\";\n \t  M_saw_destructor = false;\n-\t  _GLIBCPP_DEMANGLER_RETURN;\n+\t  _GLIBCXX_DEMANGLER_RETURN;\n \t}\n #endif\n \toutput += '(';\n \tM_template_args_need_space = false;\n \tif (!decode_type(output))\t// Must have at least one parameter.\n-\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\t  _GLIBCXX_DEMANGLER_FAILURE;\n \twhile (current() != 'E' && current() != 0)\n \t{\n \t  output += \", \";\n \t  if (!decode_type(output))\n-\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t    _GLIBCXX_DEMANGLER_FAILURE;\n \t}\n \toutput += ')';\n-\t_GLIBCPP_DEMANGLER_RETURN;\n+\t_GLIBCXX_DEMANGLER_RETURN;\n       }\n \n     // <type> ::=\n@@ -1445,7 +1445,7 @@ namespace __gnu_cxx\n \t  string_type& prefix, string_type& postfix,\n \t  qualifier_list<Allocator>* qualifiers)\n       {\n-\t_GLIBCPP_DEMANGLER_DOUT_ENTERING2\n+\t_GLIBCXX_DEMANGLER_DOUT_ENTERING2\n \t    (qualifiers ? \"decode_type\" : \"decode_type[with qualifiers]\");\n \t++M_inside_type;\n \tbool recursive_template_param_or_substitution_call;\n@@ -1768,8 +1768,8 @@ namespace __gnu_cxx\n \tif (!recursive_template_param_or_substitution_call)\n \t  delete qualifiers;\n \tif (failure)\n-\t  _GLIBCPP_DEMANGLER_FAILURE;\n-\t_GLIBCPP_DEMANGLER_RETURN2;\n+\t  _GLIBCXX_DEMANGLER_FAILURE;\n+\t_GLIBCXX_DEMANGLER_RETURN2;\n       }\n \n     // <nested-name> ::= N [<CV-qualifiers>] <prefix> <unqualified-name> E\n@@ -1788,10 +1788,10 @@ namespace __gnu_cxx\n       session<Allocator>::decode_nested_name(string_type& output,\n \t\t\t\t\t     string_type& qualifiers)\n       {\n-\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_nested_name\");\n+\t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_nested_name\");\n \n \tif (current() != 'N' || M_pos >= M_maxpos)\n-\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\t  _GLIBCXX_DEMANGLER_FAILURE;\n \n \t// <CV-qualifiers> ::= [r] [V] [K]  # restrict (C99), volatile, const\n \tchar const* qualifiers_start = &M_str[M_pos + 1];\n@@ -1819,12 +1819,12 @@ namespace __gnu_cxx\n \t  if (current() == 'S')\n \t  {\n \t    if (!decode_substitution(output))\n-\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t      _GLIBCXX_DEMANGLER_FAILURE;\n \t  }\n \t  else if (current() == 'I')\n \t  {\n \t    if (!decode_template_args(output))\n-\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t      _GLIBCXX_DEMANGLER_FAILURE;\n \t    if (current() != 'E')\n \t    {\n \t      // substitution: \"<template-prefix> <template-args>\".\n@@ -1835,7 +1835,7 @@ namespace __gnu_cxx\n \t  else\n \t  {\n \t    if (!decode_unqualified_name(output))\n-\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t      _GLIBCXX_DEMANGLER_FAILURE;\n \t    if (current() != 'E')\n \t    {\n \t      // substitution: \"<prefix> <unqualified-name>\" or\n@@ -1849,15 +1849,15 @@ namespace __gnu_cxx\n \t  if (current() == 'E')\n \t  {\n \t    eat_current();\n-\t    _GLIBCPP_DEMANGLER_RETURN;\n+\t    _GLIBCXX_DEMANGLER_RETURN;\n \t  }\n \t  if (current() != 'I')\n \t    output += \"::\";\n \t  else if (M_template_args_need_space)\n \t    output += ' ';\n \t  M_template_args_need_space = false;\n \t}\n-\t_GLIBCPP_DEMANGLER_FAILURE;\n+\t_GLIBCXX_DEMANGLER_FAILURE;\n       }\n \n     // <local-name> := Z <function encoding> E <entity name> [<discriminator>]\n@@ -1868,12 +1868,12 @@ namespace __gnu_cxx\n       bool\n       session<Allocator>::decode_local_name(string_type& output)\n       {\n-\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_local_name\");\n+\t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_local_name\");\n \tif (current() != 'Z' || M_pos >= M_maxpos)\n-\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\t  _GLIBCXX_DEMANGLER_FAILURE;\n \tif ((M_pos += decode_encoding(output, M_str + M_pos + 1,\n \t\tM_maxpos - M_pos) + 1) < 0 || eat_current() != 'E')\n-\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\t  _GLIBCXX_DEMANGLER_FAILURE;\n \toutput += \"::\";\n \tif (current() == 's')\n \t{\n@@ -1884,13 +1884,13 @@ namespace __gnu_cxx\n \t{\n \t  string_type nested_name_qualifiers;\n \t  if (!decode_name(output, nested_name_qualifiers))\n-\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t    _GLIBCXX_DEMANGLER_FAILURE;\n \t  output += nested_name_qualifiers;\n \t}\n \tstring_type discriminator;\n \tif (current() == '_' && next() != 'n' && !decode_number(discriminator))\n-\t  _GLIBCPP_DEMANGLER_FAILURE;\n-\t_GLIBCPP_DEMANGLER_RETURN;\n+\t  _GLIBCXX_DEMANGLER_FAILURE;\n+\t_GLIBCXX_DEMANGLER_RETURN;\n       }\n \n     // <source-name> ::= <positive length number> <identifier>\n@@ -1899,10 +1899,10 @@ namespace __gnu_cxx\n       bool\n       session<Allocator>::decode_source_name(string_type& output)\n       {\n-\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_source_name\");\n+\t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_source_name\");\n \tint length = current() - '0';\n \tif (length < 1 || length > 9)\n-\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\t  _GLIBCXX_DEMANGLER_FAILURE;\n \twhile(std::isdigit(next()))\n \t  length = 10 * length + current() - '0';\n \tchar const* ptr = &M_str[M_pos];\n@@ -1911,16 +1911,16 @@ namespace __gnu_cxx\n \t{\n \t  output += \"(anonymous namespace)\";\n \t  if ((M_pos += length) > M_maxpos + 1)\n-\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t    _GLIBCXX_DEMANGLER_FAILURE;\n \t}\n \telse\n \t  while(length--)\n \t  {\n \t    if (current() == 0)\n-\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t      _GLIBCXX_DEMANGLER_FAILURE;\n \t    output += eat_current();\n \t  }\n-\t_GLIBCPP_DEMANGLER_RETURN;\n+\t_GLIBCXX_DEMANGLER_RETURN;\n       }\n \n     // <unqualified-name> ::= <operator-name>\t# Starts with lower case.\n@@ -1931,7 +1931,7 @@ namespace __gnu_cxx\n       bool\n       session<Allocator>::decode_unqualified_name(string_type& output)\n       {\n-\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_unqualified_name\");\n+\t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_unqualified_name\");\n \tif (std::isdigit(current()))\n \t{\n \t  if (!M_inside_template_args)\n@@ -1948,13 +1948,13 @@ namespace __gnu_cxx\n \t    M_name_is_cdtor = false;\n \t    M_name_is_conversion_operator = false;\n \t    if (!decode_source_name(M_function_name))\n-\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t      _GLIBCXX_DEMANGLER_FAILURE;\n \t    if (!recursive_unqualified_name)\n \t      output += M_function_name;\n \t  }\n \t  else if (!decode_source_name(output))\n-\t    _GLIBCPP_DEMANGLER_FAILURE;\n-\t  _GLIBCPP_DEMANGLER_RETURN;\n+\t    _GLIBCXX_DEMANGLER_FAILURE;\n+\t  _GLIBCXX_DEMANGLER_RETURN;\n \t}\n \tif (islower(current()))\n \t{\n@@ -1965,15 +1965,15 @@ namespace __gnu_cxx\n \t    M_name_is_cdtor = false;\n \t    M_name_is_conversion_operator = false;\n \t    if (!decode_operator_name(M_function_name))\n-\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t      _GLIBCXX_DEMANGLER_FAILURE;\n \t    output += M_function_name;\n \t  }\n-\t  _GLIBCPP_DEMANGLER_RETURN;\n+\t  _GLIBCXX_DEMANGLER_RETURN;\n \t}\n \tif (current() == 'C' || current() == 'D')\n \t{\n \t  if (M_inside_template_args)\n-\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t    _GLIBCXX_DEMANGLER_FAILURE;\n \t  // <ctor-dtor-name> ::=\n \t  //   C1\t# complete object (in-charge) constructor\n \t  //   C2\t# base object (not-in-charge) constructor\n@@ -1986,22 +1986,22 @@ namespace __gnu_cxx\n \t  {\n \t    char c = next();\n \t    if (c < '1' || c > '3')\n-\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t      _GLIBCXX_DEMANGLER_FAILURE;\n \t  }\n \t  else\n \t  {\n \t    char c = next();\n \t    if (c < '0' || c > '2')\n-\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t      _GLIBCXX_DEMANGLER_FAILURE;\n \t    output += '~';\n \t    M_saw_destructor = true;\n \t  }\n \t  M_name_is_cdtor = true;\n \t  eat_current();\n \t  output += M_function_name;\n-\t  _GLIBCPP_DEMANGLER_RETURN;\n+\t  _GLIBCXX_DEMANGLER_RETURN;\n \t}\n-\t_GLIBCPP_DEMANGLER_FAILURE;\n+\t_GLIBCXX_DEMANGLER_FAILURE;\n       }\n \n     // <unscoped-name> ::=\n@@ -2012,16 +2012,16 @@ namespace __gnu_cxx\n       bool\n       session<Allocator>::decode_unscoped_name(string_type& output)\n       {\n-\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_unscoped_name\");\n+\t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_unscoped_name\");\n \tif (current() == 'S')\n \t{\n \t  if (next() != 't')\n-\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t    _GLIBCXX_DEMANGLER_FAILURE;\n \t  eat_current();\n \t  output += \"std::\";\n \t}\n \tdecode_unqualified_name(output);\n-\t_GLIBCPP_DEMANGLER_RETURN;\n+\t_GLIBCXX_DEMANGLER_RETURN;\n       }\n \n     // <name> ::=\n@@ -2039,34 +2039,34 @@ namespace __gnu_cxx\n       session<Allocator>::decode_name(string_type& output,\n \t\t\t\t      string_type& nested_name_qualifiers)\n       {\n-\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_name\");\n+\t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_name\");\n \tint substitution_start = M_pos;\n \tif (current() == 'S' && (M_pos >= M_maxpos || M_str[M_pos + 1] != 't'))\n \t{\n \t  if (!decode_substitution(output))\n-\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t    _GLIBCXX_DEMANGLER_FAILURE;\n \t}\n \telse if (current() == 'N')\n \t{\n \t  decode_nested_name(output, nested_name_qualifiers);\n-\t  _GLIBCPP_DEMANGLER_RETURN;\n+\t  _GLIBCXX_DEMANGLER_RETURN;\n \t}\n \telse if (current() == 'Z')\n \t{\n \t  decode_local_name(output);\n-\t  _GLIBCPP_DEMANGLER_RETURN;\n+\t  _GLIBCXX_DEMANGLER_RETURN;\n \t}\n \telse if (!decode_unscoped_name(output))\n-\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\t  _GLIBCXX_DEMANGLER_FAILURE;\n \tif (current() == 'I')\n \t{\n \t  // Must have been an <unscoped-template-name>.\n \t  add_substitution(substitution_start, unscoped_template_name);\n \t  if (!decode_template_args(output))\n-\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t    _GLIBCXX_DEMANGLER_FAILURE;\n \t}\n \tM_template_args_need_space = false;\n-\t_GLIBCPP_DEMANGLER_RETURN;\n+\t_GLIBCXX_DEMANGLER_RETURN;\n       }\n \n     // <call-offset> ::= h <nv-offset> _\n@@ -2079,20 +2079,20 @@ namespace __gnu_cxx\n     template<typename Allocator>\n       bool\n       session<Allocator>::decode_call_offset(string_type&\n-#if _GLIBCPP_DEMANGLER_CWDEBUG\n+#if _GLIBCXX_DEMANGLER_CWDEBUG\n \t  output\n #endif\n \t  )\n       {\n-\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_call_offset\");\n+\t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_call_offset\");\n \tif (current() == 'h')\n \t{\n \t  string_type dummy;\n \t  eat_current();\n \t  if (decode_number(dummy) && current() == '_')\n \t  {\n \t    eat_current();\n-\t    _GLIBCPP_DEMANGLER_RETURN;\n+\t    _GLIBCXX_DEMANGLER_RETURN;\n \t  }\n \t}\n \telse if (current() == 'v')\n@@ -2105,11 +2105,11 @@ namespace __gnu_cxx\n \t    if (decode_number(dummy) && current() == '_')\n \t    {\n \t      eat_current();\n-\t      _GLIBCPP_DEMANGLER_RETURN;\n+\t      _GLIBCXX_DEMANGLER_RETURN;\n \t    }\n \t  }\n \t}\n-\t_GLIBCPP_DEMANGLER_FAILURE;\n+\t_GLIBCXX_DEMANGLER_FAILURE;\n       }\n \n     //\n@@ -2135,67 +2135,67 @@ namespace __gnu_cxx\n       bool\n       session<Allocator>::decode_special_name(string_type& output)\n       {\n-\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_special_name\");\n+\t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_special_name\");\n \tif (current() == 'G')\n \t{\n \t  if (next() != 'V')\n-\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t    _GLIBCXX_DEMANGLER_FAILURE;\n \t  output += \"guard variable for \";\n \t  string_type nested_name_qualifiers;\n \t  eat_current();\n \t  if (!decode_name(output, nested_name_qualifiers))\n-\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t    _GLIBCXX_DEMANGLER_FAILURE;\n \t  output += nested_name_qualifiers;\n-\t  _GLIBCPP_DEMANGLER_RETURN;\n+\t  _GLIBCXX_DEMANGLER_RETURN;\n \t}\n \telse if (current() != 'T')\n-\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\t  _GLIBCXX_DEMANGLER_FAILURE;\n \tswitch(next())\n \t{\n \t  case 'V':\n \t    output += \"vtable for \";\n \t    eat_current();\n \t    decode_type(output);\n-\t    _GLIBCPP_DEMANGLER_RETURN;\n+\t    _GLIBCXX_DEMANGLER_RETURN;\n \t  case 'T':\n \t    output += \"VTT for \";\n \t    eat_current();\n \t    decode_type(output);\n-\t    _GLIBCPP_DEMANGLER_RETURN;\n+\t    _GLIBCXX_DEMANGLER_RETURN;\n \t  case 'I':\n \t    output += \"typeinfo for \";\n \t    eat_current();\n \t    decode_type(output);\n-\t    _GLIBCPP_DEMANGLER_RETURN;\n+\t    _GLIBCXX_DEMANGLER_RETURN;\n \t  case 'S':\n \t    output += \"typeinfo name for \";\n \t    eat_current();\n \t    decode_type(output);\n-\t    _GLIBCPP_DEMANGLER_RETURN;\n+\t    _GLIBCXX_DEMANGLER_RETURN;\n \t  case 'c':\n \t    output += \"covariant return thunk to \";\n \t    if (!decode_call_offset(output)\n \t\t|| !decode_call_offset(output)\n \t\t|| (M_pos += decode_encoding(output, M_str + M_pos,\n \t\t    M_maxpos - M_pos + 1)) < 0)\n-\t      _GLIBCPP_DEMANGLER_FAILURE;\n-\t    _GLIBCPP_DEMANGLER_RETURN;\n+\t      _GLIBCXX_DEMANGLER_FAILURE;\n+\t    _GLIBCXX_DEMANGLER_RETURN;\n \t  case 'C':\t\t// GNU extension?\n \t  {\n \t    string_type first;\n \t    output += \"construction vtable for \";\n \t    eat_current();\n \t    if (!decode_type(first))\n-\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t      _GLIBCXX_DEMANGLER_FAILURE;\n \t    while(std::isdigit(current()))\n \t      eat_current();\n \t    if (eat_current() != '_')\n-\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t      _GLIBCXX_DEMANGLER_FAILURE;\n \t    if (!decode_type(output))\n-\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t      _GLIBCXX_DEMANGLER_FAILURE;\n \t    output += \"-in-\";\n \t    output += first;\n-\t    _GLIBCPP_DEMANGLER_RETURN;\n+\t    _GLIBCXX_DEMANGLER_RETURN;\n \t  }\n \t  default:\n \t    if (current() == 'v')\n@@ -2205,8 +2205,8 @@ namespace __gnu_cxx\n \t    if (!decode_call_offset(output)\n \t\t|| (M_pos += decode_encoding(output, M_str + M_pos,\n \t\t    M_maxpos - M_pos + 1)) < 0)\n-\t      _GLIBCPP_DEMANGLER_FAILURE;\n-\t    _GLIBCPP_DEMANGLER_RETURN;\n+\t      _GLIBCXX_DEMANGLER_FAILURE;\n+\t    _GLIBCXX_DEMANGLER_RETURN;\n \t}\n       }\n \n@@ -2222,11 +2222,11 @@ namespace __gnu_cxx\n \t\t\t\t\t  char const* in,\n \t\t\t\t\t  int len)\n       {\n-#if _GLIBCPP_DEMANGLER_CWDEBUG\n-\t_GLIBCPP_DEMANGLER_DOUT(dc::demangler,\n+#if _GLIBCXX_DEMANGLER_CWDEBUG\n+\t_GLIBCXX_DEMANGLER_DOUT(dc::demangler,\n \t    \"Output thus far: \\\"\" << output << '\"');\n \tstring_type input(in, len > 0x40000000 ? strlen(in) : len);\n-\t_GLIBCPP_DEMANGLER_DOUT(\n+\t_GLIBCXX_DEMANGLER_DOUT(\n \t    dc::demangler, \"Entering decode_encoding(\\\"\" << input << \"\\\")\");\n #endif\n \tif (len <= 0)"}, {"sha": "8164df5f769def2dae1e7fa3fe8519ced45ccb89", "filename": "libstdc++-v3/include/bits/deque.tcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __GLIBCPP_INTERNAL_DEQUE_TCC\n-#define __GLIBCPP_INTERNAL_DEQUE_TCC\n+#ifndef _DEQUE_TCC\n+#define _DEQUE_TCC 1\n \n namespace std\n { \n@@ -709,4 +709,4 @@ namespace std\n     }\n } // namespace std \n   \n-#endif /* __GLIBCPP_INTERNAL_DEQUE_TCC */\n+#endif"}, {"sha": "c25d50142f42d84663b6c751c9bea0b9e0ecdb42", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -32,8 +32,8 @@\n // ISO C++ 14882: 27.8  File-based streams\n //\n \n-#ifndef _CPP_BITS_FSTREAM_TCC\n-#define _CPP_BITS_FSTREAM_TCC 1\n+#ifndef _FSTREAM_TCC\n+#define _FSTREAM_TCC 1\n \n #pragma GCC system_header\n \n@@ -519,7 +519,7 @@ namespace std\n     basic_filebuf<_CharT, _Traits>::\n     seekpos(pos_type __pos, ios_base::openmode __mode)\n     {\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n // 171. Strange seekpos() semantics due to joint position\n       pos_type __ret =  pos_type(off_type(-1)); \n \n@@ -567,13 +567,13 @@ namespace std\n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.  \n   // NB:  This syntax is a GNU extension.\n-#if _GLIBCPP_EXTERN_TEMPLATE\n+#if _GLIBCXX_EXTERN_TEMPLATE\n   extern template class basic_filebuf<char>;\n   extern template class basic_ifstream<char>;\n   extern template class basic_ofstream<char>;\n   extern template class basic_fstream<char>;\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   extern template class basic_filebuf<wchar_t>;\n   extern template class basic_ifstream<wchar_t>;\n   extern template class basic_ofstream<wchar_t>;"}, {"sha": "c546028703a914a9eb42c12ee7375341e0624435", "filename": "libstdc++-v3/include/bits/gslice.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -34,8 +34,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef _CPP_BITS_GSLICE_H\n-#define _CPP_BITS_GSLICE_H 1\n+#ifndef _GSLICE_H\n+#define _GSLICE_H 1\n \n #pragma GCC system_header\n \n@@ -117,7 +117,7 @@ namespace std {\n } // std::\n \n \n-#endif /* _CPP_BITS_GSLICE_H */\n+#endif /* _GSLICE_H */\n \n // Local Variables:\n // mode:c++"}, {"sha": "508eb7c9ab76f787183eaa12aaea7253b625e3b8", "filename": "libstdc++-v3/include/bits/gslice_array.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -34,8 +34,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef _CPP_BITS_GSLICE_ARRAY\n-#define _CPP_BITS_GSLICE_ARRAY 1\n+#ifndef _GSLICE_ARRAY_H\n+#define _GSLICE_ARRAY_H 1\n \n #pragma GCC system_header\n \n@@ -171,7 +171,7 @@ _DEFINE_VALARRAY_OPERATOR(>>, __shift_right)\n \n } // std::\n \n-#endif /* _CPP_BITS_GSLICE_ARRAY */\n+#endif /* _GSLICE_ARRAY_H */\n \n // Local Variables:\n // mode:c++"}, {"sha": "cb81aabf77fcbaed36956acfa9e1bcc40440f1ec", "filename": "libstdc++-v3/include/bits/indirect_array.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -35,8 +35,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef _CPP_BITS_INDIRECT_ARRAY_H\n-#define _CPP_BITS_INDIRECT_ARRAY_H 1\n+#ifndef _INDIRECT_ARRAY_H\n+#define _INDIRECT_ARRAY_H 1\n \n #pragma GCC system_header\n \n@@ -171,7 +171,7 @@ _DEFINE_VALARRAY_OPERATOR(>>, __shift_right)\n \n } // std::\n \n-#endif /* _CPP_BITS_INDIRECT_ARRAY_H */\n+#endif /* _INDIRECT_ARRAY_H */\n \n // Local Variables:\n // mode:c++"}, {"sha": "34600cc3de7050e86b0659ae056c5fbc50c862b7", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -37,8 +37,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef _CPP_BITS_IOSBASE_H\n-#define _CPP_BITS_IOSBASE_H 1\n+#ifndef _IOS_BASE_H\n+#define _IOS_BASE_H 1\n \n #pragma GCC system_header\n \n@@ -164,7 +164,7 @@ namespace std\n     class failure : public exception\n     {\n     public:\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n       //48.  Use of non-existent exception constructor\n       explicit \n       failure(const string& __str) throw();\n@@ -359,7 +359,7 @@ namespace std\n     /// Request a seek relative to the current end of the sequence.\n     static const seekdir end = \t\tseekdir(SEEK_END);\n \n-#ifdef _GLIBCPP_DEPRECATED\n+#ifdef _GLIBCXX_DEPRECATED\n     // Annex D.6\n     typedef int io_state;\n     typedef int open_mode;\n@@ -687,7 +687,7 @@ namespace std\n   protected:\n     ios_base();\n \n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n   //50.  Copy constructor and assignment operator of ios_base\n   private:\n     ios_base(const ios_base&);\n@@ -879,5 +879,5 @@ namespace std\n \n } // namespace std\n \n-#endif /* _CPP_BITS_IOSBASE_H */\n+#endif /* _IOS_BASE_H */\n "}, {"sha": "7f26f645ef5578c3bd35a5d96390d90763f29566", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -32,6 +32,9 @@\n // ISO C++ 14882: 27.6.2  Output streams\n //\n \n+#ifndef _ISTREAM_TCC\n+#define _ISTREAM_TCC 1\n+\n #pragma GCC system_header\n \n #include <locale>\n@@ -59,7 +62,7 @@ namespace std\n \t\t\t\t\t  traits_type::to_char_type(__c)))\n \t\t  __c = __sb->snextc();\n \n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n //195.  Should basic_istream::sentry's constructor ever set eofbit? \n \t      if (traits_type::eq_int_type(__c, __eof))\n \t\t__in.setstate(ios_base::eofbit);\n@@ -142,7 +145,7 @@ namespace std\n \t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t      long __l;\n \t      __check_facet(this->_M_num_get).get(*this, 0, *this, __err, __l);\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t      // 118. basic_istream uses nonexistent num_get member functions.\n \t      if (!(__err & ios_base::failbit)\n \t\t  && (numeric_limits<short>::min() <= __l \n@@ -204,7 +207,7 @@ namespace std\n \t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t      long __l;\n \t      __check_facet(this->_M_num_get).get(*this, 0, *this, __err, __l);\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t      // 118. basic_istream uses nonexistent num_get member functions.\n \t      if (!(__err & ios_base::failbit)\n \t\t  && (numeric_limits<int>::min() <= __l \n@@ -305,7 +308,7 @@ namespace std\n       return *this;\n     }\n \n-#ifdef _GLIBCPP_USE_LONG_LONG\n+#ifdef _GLIBCXX_USE_LONG_LONG\n   template<typename _CharT, typename _Traits>\n     basic_istream<_CharT, _Traits>& \n     basic_istream<_CharT, _Traits>::\n@@ -828,7 +831,7 @@ namespace std\n     basic_istream<_CharT, _Traits>::\n     putback(char_type __c)\n     {\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n // 60. What is a formatted input function?\n       _M_gcount = 0;\n #endif\n@@ -862,7 +865,7 @@ namespace std\n     basic_istream<_CharT, _Traits>::\n     unget(void)\n     {\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n // 60. What is a formatted input function?\n       _M_gcount = 0;\n #endif\n@@ -945,7 +948,7 @@ namespace std\n       // DR60.  Do not change _M_gcount.\n       if (!this->fail())\n \t{\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n // 136.  seekp, seekg setting wrong streams?\n \t  pos_type __err = this->rdbuf()->pubseekpos(__pos, ios_base::in);\n \n@@ -965,7 +968,7 @@ namespace std\n       // DR60.  Do not change _M_gcount.\n       if (!this->fail())\n \t{\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n // 136.  seekp, seekg setting wrong streams?\n \t  pos_type __err = this->rdbuf()->pubseekoff(__off, __dir, \n \t\t\t\t\t\t     ios_base::in);\n@@ -1040,7 +1043,7 @@ namespace std\n \t      if (_Traits::eq_int_type(__c, __eof))\n \t\t__in.setstate(ios_base::eofbit);\n \n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n //68.  Extractors for char* should store null at end\n \t      *__s = char_type();\n #endif\n@@ -1124,7 +1127,7 @@ namespace std\n \t    __in.setstate(ios_base::eofbit);\n \t  __in.width(0);\n \t}\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n //211.  operator>>(istream&, string&) doesn't set failbit\n       if (!__extracted)\n \t__in.setstate (ios_base::failbit);\n@@ -1184,7 +1187,7 @@ namespace std\n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.  \n   // NB:  This syntax is a GNU extension.\n-#if _GLIBCPP_EXTERN_TEMPLATE\n+#if _GLIBCXX_EXTERN_TEMPLATE\n   extern template class basic_istream<char>;\n   extern template istream& ws(istream&);\n   extern template istream& operator>>(istream&, char&);\n@@ -1194,11 +1197,13 @@ namespace std\n   extern template istream& operator>>(istream&, unsigned char*);\n   extern template istream& operator>>(istream&, signed char*);\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   extern template class basic_istream<wchar_t>;\n   extern template wistream& ws(wistream&);\n   extern template wistream& operator>>(wistream&, wchar_t&);\n   extern template wistream& operator>>(wistream&, wchar_t*);\n #endif\n #endif\n } // namespace std\n+\n+#endif"}, {"sha": "428dc90e2e18730febc767b104674f13ec021e19", "filename": "libstdc++-v3/include/bits/list.tcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __GLIBCPP_INTERNAL_LIST_TCC\n-#define __GLIBCPP_INTERNAL_LIST_TCC\n+#ifndef _LIST_TCC\n+#define _LIST_TCC 1\n \n namespace std\n {\n@@ -367,4 +367,4 @@ namespace std\n     }\n } // namespace std\n \n-#endif /* __GLIBCPP_INTERNAL_LIST_TCC */\n+#endif /* _LIST_TCC */"}, {"sha": "7949aa41532b808b505673eaf57cc5f71709590e", "filename": "libstdc++-v3/include/bits/locale_classes.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -37,8 +37,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef _CPP_BITS_LOCALE_CLASSES_H\n-#define _CPP_BITS_LOCALE_CLASSES_H\t1\n+#ifndef _LOCALE_CLASSES_H\n+#define _LOCALE_CLASSES_H 1\n \n #pragma GCC system_header\n \n@@ -161,7 +161,7 @@ namespace std\n     // macros. For GNU systems, the following are also valid:\n     // LC_PAPER, LC_NAME, LC_ADDRESS, LC_TELEPHONE, LC_MEASUREMENT,\n     // and LC_IDENTIFICATION.\n-    static const size_t _S_categories_size = 6 + _GLIBCPP_NUM_CATEGORIES;\n+    static const size_t _S_categories_size = 6 + _GLIBCXX_NUM_CATEGORIES;\n \n     explicit \n     locale(_Impl*) throw();"}, {"sha": "312d1d4f50d57c255bb87d68275dfe02ff187cb7", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -37,8 +37,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef _CPP_BITS_LOCFACETS_H\n-#define _CPP_BITS_LOCFACETS_H\t1\n+#ifndef _LOCALE_FACETS_H\n+#define _LOCALE_FACETS_H 1\n \n #pragma GCC system_header\n \n@@ -51,10 +51,10 @@\n namespace std\n {\n   // NB: Don't instantiate required wchar_t facets if no wchar_t support.\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-# define  _GLIBCPP_NUM_FACETS 28\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+# define  _GLIBCXX_NUM_FACETS 28\n #else\n-# define  _GLIBCPP_NUM_FACETS 14\n+# define  _GLIBCXX_NUM_FACETS 14\n #endif\n \n   // Convert string to numeric value of type _Tv and store results.  \n@@ -76,7 +76,7 @@ namespace std\n     __convert_to_v(const char*, unsigned long&, ios_base::iostate&, \n \t\t   const __c_locale&, int);\n \n-#ifdef _GLIBCPP_USE_LONG_LONG\n+#ifdef _GLIBCXX_USE_LONG_LONG\n   template<>\n     void\n     __convert_to_v(const char*, long long&, ios_base::iostate&, \n@@ -425,7 +425,7 @@ namespace std\n     const ctype<char>&\n     use_facet<ctype<char> >(const locale& __loc);\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   // 22.2.1.3  ctype<wchar_t> specialization\n   template<>\n     class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>\n@@ -498,7 +498,7 @@ namespace std\n   template<>\n     const ctype<wchar_t>&\n     use_facet<ctype<wchar_t> >(const locale& __loc);\n-#endif //_GLIBCPP_USE_WCHAR_T\n+#endif //_GLIBCXX_USE_WCHAR_T\n \n   // Include host and configuration specific ctype inlines.\n   #include <bits/ctype_inline.h>\n@@ -753,7 +753,7 @@ namespace std\n     void\n     numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template<> \n     numpunct<wchar_t>::~numpunct();\n \n@@ -824,7 +824,7 @@ namespace std\n \t  ios_base::iostate& __err, unsigned long& __v)  const\n       { return this->do_get(__in, __end, __io, __err, __v); }\n \n-#ifdef _GLIBCPP_USE_LONG_LONG\n+#ifdef _GLIBCXX_USE_LONG_LONG\n       iter_type \n       get(iter_type __in, iter_type __end, ios_base& __io,\n \t  ios_base::iostate& __err, long long& __v) const\n@@ -886,7 +886,7 @@ namespace std\n       do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n \t     unsigned long&) const;\n \n-#ifdef _GLIBCPP_USE_LONG_LONG \n+#ifdef _GLIBCXX_USE_LONG_LONG \n       virtual iter_type \n       do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n \t     long long&) const;\n@@ -958,7 +958,7 @@ namespace std\n \t  unsigned long __v) const\n       { return this->do_put(__s, __f, __fill, __v); }\n \n-#ifdef _GLIBCPP_USE_LONG_LONG \n+#ifdef _GLIBCXX_USE_LONG_LONG \n       iter_type \n       put(iter_type __s, ios_base& __f, char_type __fill, long long __v) const\n       { return this->do_put(__s, __f, __fill, __v); }\n@@ -1020,7 +1020,7 @@ namespace std\n       virtual iter_type \n       do_put(iter_type, ios_base&, char_type __fill, unsigned long) const;\n \n-#ifdef _GLIBCPP_USE_LONG_LONG \n+#ifdef _GLIBCXX_USE_LONG_LONG \n       virtual iter_type \n       do_put(iter_type, ios_base&, char_type __fill, long long __v) const;\n \n@@ -1116,7 +1116,7 @@ namespace std\n     size_t\n     collate<char>::_M_transform(char*, const char*, size_t) const;\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n     int \n     collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const;\n@@ -1350,7 +1350,7 @@ namespace std\n     void\n     __timepunct<char>::_M_put(char*, size_t, const char*, const tm*) const;\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template<> \n     const wchar_t*\n     __timepunct<wchar_t>::_S_timezones[14];\n@@ -1687,7 +1687,7 @@ namespace std\n     void\n     moneypunct<char, false>::_M_initialize_moneypunct(__c_locale, const char*);\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n     moneypunct<wchar_t, true>::~moneypunct();\n \n@@ -1928,7 +1928,7 @@ namespace std\n     string\n     messages<char>::do_get(catalog, int, int, const string&) const;\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n     wstring\n     messages<wchar_t>::do_get(catalog, int, int, const wstring&) const;"}, {"sha": "518f41ad0566983898b03fe568abcee4ee8fdc24", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -30,8 +30,8 @@\n \n // Warning: this file is not meant for user inclusion. Use <locale>.\n \n-#ifndef _CPP_BITS_LOCFACETS_TCC\n-#define _CPP_BITS_LOCFACETS_TCC 1\n+#ifndef _LOCALE_FACETS_TCC\n+#define _LOCALE_FACETS_TCC 1\n \n #pragma GCC system_header\n \n@@ -96,7 +96,7 @@ namespace std\n     const __numpunct_cache<char>&\n     __use_cache(const locale& __loc);\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n     const __numpunct_cache<wchar_t>&\n     __use_cache(const locale& __loc);\n@@ -391,7 +391,7 @@ namespace std\n       return __beg;\n     }\n \n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n   //17.  Bad bool parsing\n   template<typename _CharT, typename _InIter>\n     _InIter\n@@ -525,7 +525,7 @@ namespace std\n       return __beg;\n     }\n \n-#ifdef _GLIBCPP_USE_LONG_LONG\n+#ifdef _GLIBCXX_USE_LONG_LONG\n   template<typename _CharT, typename _InIter>\n     _InIter\n     num_get<_CharT, _InIter>::\n@@ -658,7 +658,7 @@ namespace std\n \t\t       const _CharT* __lit, ios_base::fmtflags __flags)\n     { return __int_to_char(__out, __size, __v, __lit, __flags, false); }\n \n-#ifdef _GLIBCPP_USE_LONG_LONG\n+#ifdef _GLIBCXX_USE_LONG_LONG\n   template<typename _CharT>\n     inline int\n     __int_to_char(_CharT* __out, const int __size, long long __v,\n@@ -835,7 +835,7 @@ namespace std\n     _M_group_float(const string& __grouping, _CharT __sep, const _CharT* __p, \n \t\t   _CharT* __new, _CharT* __cs, int& __len) const\n     {\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n       //282. What types does numpunct grouping refer to?\n       // Add grouping, if necessary. \n       _CharT* __p2;\n@@ -857,7 +857,7 @@ namespace std\n     }\n \n   // The following code uses snprintf (or sprintf(), when\n-  // _GLIBCPP_USE_C99 is not defined) to convert floating point values\n+  // _GLIBCXX_USE_C99 is not defined) to convert floating point values\n   // for insertion into a stream.  An optimization would be to replace\n   // them with code that works directly on a wide buffer and then use\n   // __pad to do the padding.  It would be good to replace them anyway\n@@ -898,7 +898,7 @@ namespace std\n \t// Long enough for the max format spec.\n \tchar __fbuf[16];\n \n-#ifdef _GLIBCPP_USE_C99\n+#ifdef _GLIBCXX_USE_C99\n \t// First try a buffer perhaps big enough (for sure sufficient\n \t// for non-ios_base::fixed outputs)\n \tint __cs_size = __max_digits * 3;\n@@ -1032,7 +1032,7 @@ namespace std\n            unsigned long __v) const\n     { return _M_convert_int(__s, __io, __fill, __v); }\n \n-#ifdef _GLIBCPP_USE_LONG_LONG\n+#ifdef _GLIBCXX_USE_LONG_LONG\n   template<typename _CharT, typename _OutIter>\n     _OutIter\n     num_put<_CharT, _OutIter>::\n@@ -1320,7 +1320,7 @@ namespace std\n     { \n       const locale __loc = __io.getloc();\n       const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);\n-#ifdef _GLIBCPP_USE_C99\n+#ifdef _GLIBCXX_USE_C99\n       // First try a buffer perhaps big enough.\n       int __cs_size = 64;\n       char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n@@ -2295,7 +2295,7 @@ namespace std\n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.  \n   // NB: This syntax is a GNU extension.\n-#if _GLIBCPP_EXTERN_TEMPLATE\n+#if _GLIBCXX_EXTERN_TEMPLATE\n   extern template class moneypunct<char, false>;\n   extern template class moneypunct<char, true>;\n   extern template class moneypunct_byname<char, false>;\n@@ -2422,7 +2422,7 @@ namespace std\n     bool\n     has_facet<messages<char> >(const locale&);\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   extern template class moneypunct<wchar_t, false>;\n   extern template class moneypunct<wchar_t, true>;\n   extern template class moneypunct_byname<wchar_t, false>;"}, {"sha": "a4507c3e28f7e36ca4216453e506cf0e04d4acbb", "filename": "libstdc++-v3/include/bits/localefwd.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -37,8 +37,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef _CPP_BITS_LOCALE_FWD_H\n-#define _CPP_BITS_LOCALE_FWD_H\t1\n+#ifndef _LOCALE_FWD_H\n+#define _LOCALE_FWD_H 1\n \n #pragma GCC system_header\n \n@@ -110,7 +110,7 @@ namespace std\n   template<typename _CharT> \n     class ctype;\n   template<> class ctype<char>;\n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template<> class ctype<wchar_t>;\n #endif\n   template<typename _CharT> \n@@ -122,7 +122,7 @@ namespace std\n   template<typename _InternT, typename _ExternT, typename _StateT>\n     class codecvt;\n   template<> class codecvt<char, char, mbstate_t>;\n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template<> class codecvt<wchar_t, char, mbstate_t>;\n #endif\n   template<typename _InternT, typename _ExternT, typename _StateT>"}, {"sha": "ba67db70e9bf3cfdede0d4bbf04b8e325592a311", "filename": "libstdc++-v3/include/bits/mask_array.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -35,8 +35,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef _CPP_BITS_MASK_ARRAY_H\n-#define _CPP_BITS_MASK_ARRAY_H 1\n+#ifndef _MASK_ARRAY_H\n+#define _MASK_ARRAY_H 1\n \n #pragma GCC system_header\n \n@@ -160,7 +160,7 @@ _DEFINE_VALARRAY_OPERATOR(>>, __shift_right)\n     \n } // std::\n \n-#endif /* _CPP_BITS_MASK_ARRAY_H */\n+#endif /* _MASK_ARRAY_H */\n \n // Local Variables:\n // mode:c++"}, {"sha": "942a305825c380c1bb0744b1bd59d290ebb58571", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -32,6 +32,9 @@\n // ISO C++ 14882: 27.6.2  Output streams\n //\n \n+#ifndef _OSTREAM_TCC\n+#define _OSTREAM_TCC 1\n+\n #pragma GCC system_header\n \n #include <locale>\n@@ -235,7 +238,7 @@ namespace std\n       return *this;\n     }\n \n-#ifdef _GLIBCPP_USE_LONG_LONG\n+#ifdef _GLIBCXX_USE_LONG_LONG\n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>& \n     basic_ostream<_CharT, _Traits>::operator<<(long long __n)\n@@ -431,7 +434,7 @@ namespace std\n     {\n       if (!this->fail())\n \t{\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n // 136.  seekp, seekg setting wrong streams?\n \t  pos_type __err = this->rdbuf()->pubseekpos(__pos, ios_base::out);\n \n@@ -450,7 +453,7 @@ namespace std\n     {\n       if (!this->fail())\n \t{\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n // 136.  seekp, seekg setting wrong streams?\n \t  pos_type __err = this->rdbuf()->pubseekoff(__off, __d, \n \t\t\t\t\t\t     ios_base::out);\n@@ -577,7 +580,7 @@ namespace std\n     operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)\n     {\n       typedef basic_ostream<_CharT, _Traits> __ostream_type;\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n // 167.  Improper use of traits_type::length()\n // Note that this is only in 'Review' status.\n       typedef char_traits<char>\t\t     __traits_type;\n@@ -674,7 +677,7 @@ namespace std\n \t  const streamsize __w = __out.width() > 0 ? __out.width() : 0;\n \t  _CharT* __pads = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * __w));\n \t  streamsize __len = static_cast<streamsize>(__str.size());\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t  // 25. String operator<< uses width() value wrong\n #endif\n \t  if (__w > __len)\n@@ -693,7 +696,7 @@ namespace std\n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.  \n   // NB:  This syntax is a GNU extension.\n-#if _GLIBCPP_EXTERN_TEMPLATE\n+#if _GLIBCXX_EXTERN_TEMPLATE\n   extern template class basic_ostream<char>;\n   extern template ostream& endl(ostream&);\n   extern template ostream& ends(ostream&);\n@@ -705,7 +708,7 @@ namespace std\n   extern template ostream& operator<<(ostream&, const unsigned char*);\n   extern template ostream& operator<<(ostream&, const signed char*);\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   extern template class basic_ostream<wchar_t>;\n   extern template wostream& endl(wostream&);\n   extern template wostream& ends(wostream&);\n@@ -717,3 +720,5 @@ namespace std\n #endif\n #endif\n } // namespace std\n+\n+#endif"}, {"sha": "ad33a474672dbe84fe1cfe041d47416722180bf8", "filename": "libstdc++-v3/include/bits/slice_array.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -34,8 +34,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef _CPP_BITS_SLICE_ARRAY_H\n-#define _CPP_BITS_SLICE_ARRAY_H 1\n+#ifndef _SLICE_ARRAY_H\n+#define _SLICE_ARRAY_H 1\n \n #pragma GCC system_header\n \n@@ -211,7 +211,7 @@ _DEFINE_VALARRAY_OPERATOR(>>, __shift_right)\n \n } // std::\n \n-#endif /* _CPP_BITS_SLICE_ARRAY_H */\n+#endif /* _SLICE_ARRAY_H */\n \n // Local Variables:\n // mode:c++"}, {"sha": "0430a260d7598ed6169e8902387d8a9abb7abd44", "filename": "libstdc++-v3/include/bits/sstream.tcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -32,8 +32,8 @@\n // ISO C++ 14882: 27.7  String-based streams\n //\n \n-#ifndef _CPP_BITS_SSTREAM_TCC\n-#define _CPP_BITS_SSTREAM_TCC\t1\n+#ifndef _SSTREAM_TCC\n+#define _SSTREAM_TCC 1\n \n #pragma GCC system_header\n \n@@ -214,7 +214,7 @@ namespace std\n   extern template class basic_ostringstream<char>;\n   extern template class basic_stringstream<char>;\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   extern template class basic_stringbuf<wchar_t>;\n   extern template class basic_istringstream<wchar_t>;\n   extern template class basic_ostringstream<wchar_t>;"}, {"sha": "f4ba55346e3d3565d1bbfbad1404c4a47d0c5653", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 233, "deletions": 233, "changes": 466, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,13 +58,13 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __GLIBCPP_INTERNAL_ALGO_H\n-#define __GLIBCPP_INTERNAL_ALGO_H\n+#ifndef _ALGO_H\n+#define _ALGO_H 1\n \n #include <bits/stl_heap.h>\n #include <bits/stl_tempbuf.h>     // for _Temporary_buffer\n \n-// See concept_check.h for the __glibcpp_*_requires macros.\n+// See concept_check.h for the __glibcxx_*_requires macros.\n \n namespace std\n {\n@@ -86,7 +86,7 @@ namespace std\n     __median(const _Tp& __a, const _Tp& __b, const _Tp& __c)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_LessThanComparableConcept<_Tp>)\n+      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)\n       if (__a < __b)\n \tif (__b < __c)\n \t  return __b;\n@@ -120,7 +120,7 @@ namespace std\n     __median(const _Tp& __a, const _Tp& __b, const _Tp& __c, _Compare __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_BinaryFunctionConcept<_Compare,bool,_Tp,_Tp>)\n+      __glibcxx_function_requires(_BinaryFunctionConcept<_Compare,bool,_Tp,_Tp>)\n       if (__comp(__a, __b))\n \tif (__comp(__b, __c))\n \t  return __b;\n@@ -152,7 +152,7 @@ namespace std\n     for_each(_InputIterator __first, _InputIterator __last, _Function __f)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n       for ( ; __first != __last; ++__first)\n \t__f(*__first);\n       return __f;\n@@ -292,8 +292,8 @@ namespace std\n \t const _Tp& __val)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n-      __glibcpp_function_requires(_EqualOpConcept<\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_EqualOpConcept<\n \t\ttypename iterator_traits<_InputIterator>::value_type, _Tp>)\n       return std::find(__first, __last, __val, std::__iterator_category(__first));\n     }\n@@ -312,8 +312,8 @@ namespace std\n \t    _Predicate __pred)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n-      __glibcpp_function_requires(_UnaryPredicateConcept<_Predicate,\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,\n \t      typename iterator_traits<_InputIterator>::value_type>)\n       return std::find_if(__first, __last, __pred, std::__iterator_category(__first));\n     }\n@@ -331,8 +331,8 @@ namespace std\n     adjacent_find(_ForwardIterator __first, _ForwardIterator __last)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcpp_function_requires(_EqualityComparableConcept<\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_EqualityComparableConcept<\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n       if (__first == __last)\n \treturn __last;\n@@ -361,8 +361,8 @@ namespace std\n \t\t  _BinaryPredicate __binary_pred)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_BinaryPredicate,\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,\n \t    typename iterator_traits<_ForwardIterator>::value_type,\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n       if (__first == __last)\n@@ -389,10 +389,10 @@ namespace std\n     count(_InputIterator __first, _InputIterator __last, const _Tp& __value)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n-      __glibcpp_function_requires(_EqualityComparableConcept<\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_EqualityComparableConcept<\n \t    typename iterator_traits<_InputIterator>::value_type >)\n-      __glibcpp_function_requires(_EqualityComparableConcept<_Tp>)\n+      __glibcxx_function_requires(_EqualityComparableConcept<_Tp>)\n       typename iterator_traits<_InputIterator>::difference_type __n = 0;\n       for ( ; __first != __last; ++__first)\n \tif (*__first == __value)\n@@ -413,8 +413,8 @@ namespace std\n     count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n-      __glibcpp_function_requires(_UnaryPredicateConcept<_Predicate,\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,\n \t    typename iterator_traits<_InputIterator>::value_type>)\n       typename iterator_traits<_InputIterator>::difference_type __n = 0;\n       for ( ; __first != __last; ++__first)\n@@ -453,9 +453,9 @@ namespace std\n \t   _ForwardIterator2 __first2, _ForwardIterator2 __last2)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator1>)\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator2>)\n-      __glibcpp_function_requires(_EqualOpConcept<\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator1>)\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator2>)\n+      __glibcxx_function_requires(_EqualOpConcept<\n \t    typename iterator_traits<_ForwardIterator1>::value_type,\n \t    typename iterator_traits<_ForwardIterator2>::value_type>)\n \n@@ -526,9 +526,9 @@ namespace std\n \t   _BinaryPredicate  __predicate)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator1>)\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator2>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_BinaryPredicate,\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator1>)\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator2>)\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,\n \t    typename iterator_traits<_ForwardIterator1>::value_type,\n \t    typename iterator_traits<_ForwardIterator2>::value_type>)\n \n@@ -599,10 +599,10 @@ namespace std\n \t     _Integer __count, const _Tp& __val)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcpp_function_requires(_EqualityComparableConcept<\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_EqualityComparableConcept<\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n-      __glibcpp_function_requires(_EqualityComparableConcept<_Tp>)\n+      __glibcxx_function_requires(_EqualityComparableConcept<_Tp>)\n \n       if (__count <= 0)\n \treturn __first;\n@@ -648,8 +648,8 @@ namespace std\n \t     _BinaryPredicate __binary_pred)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_BinaryPredicate,\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,\n \t    typename iterator_traits<_ForwardIterator>::value_type, _Tp>)\n \n       if (__count <= 0)\n@@ -700,12 +700,12 @@ namespace std\n \t\t_ForwardIterator2 __first2)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator1>)\n-      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator2>)\n-      __glibcpp_function_requires(_ConvertibleConcept<\n+      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator1>)\n+      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator2>)\n+      __glibcxx_function_requires(_ConvertibleConcept<\n \t    typename iterator_traits<_ForwardIterator1>::value_type,\n \t    typename iterator_traits<_ForwardIterator2>::value_type>)\n-      __glibcpp_function_requires(_ConvertibleConcept<\n+      __glibcxx_function_requires(_ConvertibleConcept<\n \t    typename iterator_traits<_ForwardIterator2>::value_type,\n \t    typename iterator_traits<_ForwardIterator1>::value_type>)\n \n@@ -735,8 +735,8 @@ namespace std\n \t      _OutputIterator __result, _UnaryOperation __unary_op)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator,\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n             // \"the type returned by a _UnaryOperation\"\n             __typeof__(__unary_op(*__first))>)\n \n@@ -770,9 +770,9 @@ namespace std\n \t      _BinaryOperation __binary_op)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>)\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator,\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n             // \"the type returned by a _BinaryOperation\"\n             __typeof__(__binary_op(*__first1,*__first2))>)\n \n@@ -799,10 +799,10 @@ namespace std\n \t    const _Tp& __old_value, const _Tp& __new_value)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcpp_function_requires(_EqualOpConcept<\n+      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_EqualOpConcept<\n \t    typename iterator_traits<_ForwardIterator>::value_type, _Tp>)\n-      __glibcpp_function_requires(_ConvertibleConcept<_Tp,\n+      __glibcxx_function_requires(_ConvertibleConcept<_Tp,\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n \n       for ( ; __first != __last; ++__first)\n@@ -828,10 +828,10 @@ namespace std\n \t       _Predicate __pred, const _Tp& __new_value)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcpp_function_requires(_ConvertibleConcept<_Tp,\n+      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_ConvertibleConcept<_Tp,\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n-      __glibcpp_function_requires(_UnaryPredicateConcept<_Predicate,\n+      __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n \n       for ( ; __first != __last; ++__first)\n@@ -860,10 +860,10 @@ namespace std\n \t\t const _Tp& __old_value, const _Tp& __new_value)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator,\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n \t    typename iterator_traits<_InputIterator>::value_type>)\n-      __glibcpp_function_requires(_EqualOpConcept<\n+      __glibcxx_function_requires(_EqualOpConcept<\n \t    typename iterator_traits<_InputIterator>::value_type, _Tp>)\n \n       for ( ; __first != __last; ++__first, ++__result)\n@@ -893,10 +893,10 @@ namespace std\n \t\t    _Predicate __pred, const _Tp& __new_value)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator,\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n \t    typename iterator_traits<_InputIterator>::value_type>)\n-      __glibcpp_function_requires(_UnaryPredicateConcept<_Predicate,\n+      __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,\n \t    typename iterator_traits<_InputIterator>::value_type>)\n \n       for ( ; __first != __last; ++__first, ++__result)\n@@ -920,8 +920,8 @@ namespace std\n     generate(_ForwardIterator __first, _ForwardIterator __last, _Generator __gen)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcpp_function_requires(_GeneratorConcept<_Generator,\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_GeneratorConcept<_Generator,\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n \n       for ( ; __first != __last; ++__first)\n@@ -944,7 +944,7 @@ namespace std\n     generate_n(_OutputIterator __first, _Size __n, _Generator __gen)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator,\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n             // \"the type returned by a _Generator\"\n             __typeof__(gen())>)\n \n@@ -972,10 +972,10 @@ namespace std\n \t\t_OutputIterator __result, const _Tp& __value)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator,\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n \t    typename iterator_traits<_InputIterator>::value_type>)\n-      __glibcpp_function_requires(_EqualOpConcept<\n+      __glibcxx_function_requires(_EqualOpConcept<\n \t    typename iterator_traits<_InputIterator>::value_type, _Tp>)\n \n       for ( ; __first != __last; ++__first)\n@@ -1006,10 +1006,10 @@ namespace std\n \t\t   _OutputIterator __result, _Predicate __pred)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator,\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n \t    typename iterator_traits<_InputIterator>::value_type>)\n-      __glibcpp_function_requires(_UnaryPredicateConcept<_Predicate,\n+      __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,\n \t    typename iterator_traits<_InputIterator>::value_type>)\n \n       for ( ; __first != __last; ++__first)\n@@ -1042,10 +1042,10 @@ namespace std\n \t   const _Tp& __value)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcpp_function_requires(_ConvertibleConcept<_Tp,\n+      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_ConvertibleConcept<_Tp,\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n-      __glibcpp_function_requires(_EqualOpConcept<\n+      __glibcxx_function_requires(_EqualOpConcept<\n \t    typename iterator_traits<_ForwardIterator>::value_type, _Tp>)\n \n       __first = std::find(__first, __last, __value);\n@@ -1076,8 +1076,8 @@ namespace std\n \t      _Predicate __pred)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcpp_function_requires(_UnaryPredicateConcept<_Predicate,\n+      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n \n       __first = std::find_if(__first, __last, __pred);\n@@ -1144,7 +1144,7 @@ namespace std\n \t\t  output_iterator_tag)\n     {\n       // concept requirements -- iterators already checked\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_BinaryPredicate,\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,\n \t  typename iterator_traits<_InputIterator>::value_type,\n \t  typename iterator_traits<_InputIterator>::value_type>)\n \n@@ -1173,7 +1173,7 @@ namespace std\n \t\t  forward_iterator_tag)\n     {\n       // concept requirements -- iterators already checked\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_BinaryPredicate,\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,\n \t    typename iterator_traits<_ForwardIterator>::value_type,\n \t    typename iterator_traits<_InputIterator>::value_type>)\n \n@@ -1202,10 +1202,10 @@ namespace std\n \t\t_OutputIterator __result)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator,\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n \t    typename iterator_traits<_InputIterator>::value_type>)\n-      __glibcpp_function_requires(_EqualityComparableConcept<\n+      __glibcxx_function_requires(_EqualityComparableConcept<\n \t    typename iterator_traits<_InputIterator>::value_type>)\n \n       typedef typename iterator_traits<_OutputIterator>::iterator_category _IterType;\n@@ -1236,8 +1236,8 @@ namespace std\n \t\t_BinaryPredicate __binary_pred)\n     {\n       // concept requirements -- predicates checked later\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator,\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n \t    typename iterator_traits<_InputIterator>::value_type>)\n \n       typedef typename iterator_traits<_OutputIterator>::iterator_category _IterType;\n@@ -1264,8 +1264,8 @@ namespace std\n     unique(_ForwardIterator __first, _ForwardIterator __last)\n     {\n \t  // concept requirements\n-\t  __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator>)\n-\t  __glibcpp_function_requires(_EqualityComparableConcept<\n+\t  __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator>)\n+\t  __glibcxx_function_requires(_EqualityComparableConcept<\n \t\t    typename iterator_traits<_ForwardIterator>::value_type>)\n \n \t  __first = std::adjacent_find(__first, __last);\n@@ -1292,8 +1292,8 @@ namespace std\n            _BinaryPredicate __binary_pred)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_BinaryPredicate,\n+      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,\n \t\ttypename iterator_traits<_ForwardIterator>::value_type,\n \t\ttypename iterator_traits<_ForwardIterator>::value_type>)\n \n@@ -1350,7 +1350,7 @@ namespace std\n     reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)\n     {\n \t  // concept requirements\n-\t  __glibcpp_function_requires(_Mutable_BidirectionalIteratorConcept<\n+\t  __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<\n \t\t    _BidirectionalIterator>)\n \t  std::__reverse(__first, __last, std::__iterator_category(__first));\n     }\n@@ -1376,8 +1376,8 @@ namespace std\n \t\t\t     _OutputIterator __result)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BidirectionalIterator>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator,\n+      __glibcxx_function_requires(_BidirectionalIteratorConcept<_BidirectionalIterator>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n \t\ttypename iterator_traits<_BidirectionalIterator>::value_type>)\n \n       while (__first != __last) {\n@@ -1453,7 +1453,7 @@ namespace std\n \t      bidirectional_iterator_tag)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_BidirectionalIteratorConcept<\n+      __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<\n \t    _BidirectionalIterator>)\n \n       if ((__first == __middle) || (__last  == __middle))\n@@ -1486,7 +1486,7 @@ namespace std\n \t     random_access_iterator_tag)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n+      __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n \n       if ((__first == __middle) || (__last  == __middle))\n@@ -1562,7 +1562,7 @@ namespace std\n     rotate(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator>)\n \n       typedef typename iterator_traits<_ForwardIterator>::iterator_category _IterType;\n       std::__rotate(__first, __middle, __last, _IterType());\n@@ -1591,8 +1591,8 @@ namespace std\n                 _ForwardIterator __last, _OutputIterator __result)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator,\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n \t\ttypename iterator_traits<_ForwardIterator>::value_type>)\n \n       return std::copy(__first, __middle, copy(__middle, __last, __result));\n@@ -1612,7 +1612,7 @@ namespace std\n     inline _Distance\n     __random_number(_Distance __n)\n     {\n-  #ifdef _GLIBCPP_HAVE_DRAND48\n+  #ifdef _GLIBCXX_HAVE_DRAND48\n       return lrand48() % __n;\n   #else\n       return rand() % __n;\n@@ -1635,7 +1635,7 @@ namespace std\n     random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n+      __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n \n       if (__first == __last) return;\n@@ -1662,7 +1662,7 @@ namespace std\n \t\t   _RandomNumberGenerator& __rand)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n+      __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n \n       if (__first == __last) return;\n@@ -1750,8 +1750,8 @@ namespace std\n \t      _Predicate   __pred)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcpp_function_requires(_UnaryPredicateConcept<_Predicate,\n+      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n \n       return std::__partition(__first, __last, __pred, std::__iterator_category(__first));\n@@ -1850,8 +1850,8 @@ namespace std\n \t\t     _Predicate __pred)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcpp_function_requires(_UnaryPredicateConcept<_Predicate,\n+      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n \n       if (__first == __last)\n@@ -2116,9 +2116,9 @@ namespace std\n       typedef typename iterator_traits<_RandomAccessIterator>::value_type _ValueType;\n \n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n+      __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<_ValueType>)\n+      __glibcxx_function_requires(_LessThanComparableConcept<_ValueType>)\n \n       std::make_heap(__first, __middle);\n       for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)\n@@ -2155,9 +2155,9 @@ namespace std\n       typedef typename iterator_traits<_RandomAccessIterator>::value_type _ValueType;\n \n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n+      __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare,\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n \t\t\t\t\t\t\t  _ValueType, _ValueType>)\n \n       std::make_heap(__first, __middle, __comp);\n@@ -2195,10 +2195,10 @@ namespace std\n       typedef typename iterator_traits<_RandomAccessIterator>::difference_type _DistanceType;\n \n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n-      __glibcpp_function_requires(_ConvertibleConcept<_InputValueType, _OutputValueType>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<_OutputValueType>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<_InputValueType>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_ConvertibleConcept<_InputValueType, _OutputValueType>)\n+      __glibcxx_function_requires(_LessThanComparableConcept<_OutputValueType>)\n+      __glibcxx_function_requires(_LessThanComparableConcept<_InputValueType>)\n \n       if (__result_first == __result_last) return __result_last;\n       _RandomAccessIterator __result_real_last = __result_first;\n@@ -2250,10 +2250,10 @@ namespace std\n       typedef typename iterator_traits<_RandomAccessIterator>::difference_type _DistanceType;\n \n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n-      __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<_RandomAccessIterator>)\n-      __glibcpp_function_requires(_ConvertibleConcept<_InputValueType, _OutputValueType>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare,\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<_RandomAccessIterator>)\n+      __glibcxx_function_requires(_ConvertibleConcept<_InputValueType, _OutputValueType>)\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n \t\t\t\t  _OutputValueType, _OutputValueType>)\n \n       if (__result_first == __result_last) return __result_last;\n@@ -2352,9 +2352,9 @@ namespace std\n       typedef typename iterator_traits<_RandomAccessIterator>::value_type _ValueType;\n \n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n+      __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<_ValueType>)\n+      __glibcxx_function_requires(_LessThanComparableConcept<_ValueType>)\n \n       if (__first != __last) {\n \tstd::__introsort_loop(__first, __last, __lg(__last - __first) * 2);\n@@ -2383,9 +2383,9 @@ namespace std\n       typedef typename iterator_traits<_RandomAccessIterator>::value_type _ValueType;\n \n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n+      __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare, _ValueType, _ValueType>)\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare, _ValueType, _ValueType>)\n \n       if (__first != __last) {\n \tstd::__introsort_loop(__first, __last, __lg(__last - __first) * 2, __comp);\n@@ -2415,9 +2415,9 @@ namespace std\n       // version, defined next.  The difference is in the strictness of the\n       // comparison operations... so for looser checking, define your own\n       // comparison function, as was intended.\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcpp_function_requires(_SameTypeConcept<_Tp, _ValueType>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<_Tp>)\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_SameTypeConcept<_Tp, _ValueType>)\n+      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)\n \n       _DistanceType __len = std::distance(__first, __last);\n       _DistanceType __half;\n@@ -2461,8 +2461,8 @@ namespace std\n       typedef typename iterator_traits<_ForwardIterator>::difference_type _DistanceType;\n \n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare, _ValueType, _Tp>)\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare, _ValueType, _Tp>)\n \n       _DistanceType __len = std::distance(__first, __last);\n       _DistanceType __half;\n@@ -2502,9 +2502,9 @@ namespace std\n \n       // concept requirements\n       // See comments on lower_bound.\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcpp_function_requires(_SameTypeConcept<_Tp, _ValueType>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<_Tp>)\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_SameTypeConcept<_Tp, _ValueType>)\n+      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)\n \n       _DistanceType __len = std::distance(__first, __last);\n       _DistanceType __half;\n@@ -2548,8 +2548,8 @@ namespace std\n       typedef typename iterator_traits<_ForwardIterator>::difference_type _DistanceType;\n \n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare, _Tp, _ValueType>)\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare, _Tp, _ValueType>)\n \n       _DistanceType __len = std::distance(__first, __last);\n       _DistanceType __half;\n@@ -2726,14 +2726,14 @@ namespace std\n \t  _OutputIterator __result)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>)\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator,\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n-      __glibcpp_function_requires(_SameTypeConcept<\n+      __glibcxx_function_requires(_SameTypeConcept<\n \t    typename iterator_traits<_InputIterator1>::value_type,\n \t    typename iterator_traits<_InputIterator2>::value_type>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<\n+      __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n \n       while (__first1 != __last1 && __first2 != __last2) {\n@@ -2778,14 +2778,14 @@ namespace std\n \t  _OutputIterator __result, _Compare __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>)\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>)\n-      __glibcpp_function_requires(_SameTypeConcept<\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n+      __glibcxx_function_requires(_SameTypeConcept<\n \t    typename iterator_traits<_InputIterator1>::value_type,\n \t    typename iterator_traits<_InputIterator2>::value_type>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator,\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare,\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n \t    typename iterator_traits<_InputIterator1>::value_type,\n \t    typename iterator_traits<_InputIterator2>::value_type>)\n \n@@ -3147,9 +3147,9 @@ namespace std\n           _DistanceType;\n \n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_BidirectionalIteratorConcept<\n+      __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<\n \t    _BidirectionalIterator>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<_ValueType>)\n+      __glibcxx_function_requires(_LessThanComparableConcept<_ValueType>)\n \n       if (__first == __middle || __middle == __last)\n \treturn;\n@@ -3199,9 +3199,9 @@ namespace std\n           _DistanceType;\n \n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_BidirectionalIteratorConcept<\n+      __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<\n \t    _BidirectionalIterator>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare,\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n \t    _ValueType, _ValueType>)\n \n       if (__first == __middle || __middle == __last)\n@@ -3286,9 +3286,9 @@ namespace std\n       typedef typename iterator_traits<_RandomAccessIterator>::difference_type _DistanceType;\n \n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n+      __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<_ValueType>)\n+      __glibcxx_function_requires(_LessThanComparableConcept<_ValueType>)\n \n       _Temporary_buffer<_RandomAccessIterator, _ValueType> buf(__first, __last);\n       if (buf.begin() == 0)\n@@ -3322,9 +3322,9 @@ namespace std\n       typedef typename iterator_traits<_RandomAccessIterator>::difference_type _DistanceType;\n \n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n+      __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare,\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n \t\t\t\t\t\t\t  _ValueType, _ValueType>)\n \n       _Temporary_buffer<_RandomAccessIterator, _ValueType> buf(__first, __last);\n@@ -3359,8 +3359,8 @@ namespace std\n       typedef typename iterator_traits<_RandomAccessIterator>::value_type _ValueType;\n \n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<_RandomAccessIterator>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<_ValueType>)\n+      __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<_RandomAccessIterator>)\n+      __glibcxx_function_requires(_LessThanComparableConcept<_ValueType>)\n \n       while (__last - __first > 3) {\n \t_RandomAccessIterator __cut =\n@@ -3402,8 +3402,8 @@ namespace std\n       typedef typename iterator_traits<_RandomAccessIterator>::value_type _ValueType;\n \n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<_RandomAccessIterator>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare,\n+      __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<_RandomAccessIterator>)\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n \t\t\t\t  _ValueType, _ValueType>)\n \n       while (__last - __first > 3) {\n@@ -3446,9 +3446,9 @@ namespace std\n \n       // concept requirements\n       // See comments on lower_bound.\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcpp_function_requires(_SameTypeConcept<_Tp, _ValueType>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<_Tp>)\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_SameTypeConcept<_Tp, _ValueType>)\n+      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)\n \n       _DistanceType __len = std::distance(__first, __last);\n       _DistanceType __half;\n@@ -3501,9 +3501,9 @@ namespace std\n       typedef typename iterator_traits<_ForwardIterator>::difference_type _DistanceType;\n \n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare, _ValueType, _Tp>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare, _Tp, _ValueType>)\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare, _ValueType, _Tp>)\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare, _Tp, _ValueType>)\n \n       _DistanceType __len = std::distance(__first, __last);\n       _DistanceType __half;\n@@ -3548,10 +3548,10 @@ namespace std\n     {\n       // concept requirements\n       // See comments on lower_bound.\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcpp_function_requires(_SameTypeConcept<_Tp,\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_SameTypeConcept<_Tp,\n \t\ttypename iterator_traits<_ForwardIterator>::value_type>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<_Tp>)\n+      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)\n \n       _ForwardIterator __i = std::lower_bound(__first, __last, __val);\n       return __i != __last && !(__val < *__i);\n@@ -3578,10 +3578,10 @@ namespace std\n                   const _Tp& __val, _Compare __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare,\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n \t\ttypename iterator_traits<_ForwardIterator>::value_type, _Tp>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare, _Tp,\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare, _Tp,\n \t\ttypename iterator_traits<_ForwardIterator>::value_type>)\n \n       _ForwardIterator __i = std::lower_bound(__first, __last, __val, __comp);\n@@ -3599,12 +3599,12 @@ namespace std\n \t     _InputIterator2 __first2, _InputIterator2 __last2)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>)\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>)\n-      __glibcpp_function_requires(_SameTypeConcept<\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n+      __glibcxx_function_requires(_SameTypeConcept<\n \t    typename iterator_traits<_InputIterator1>::value_type,\n \t    typename iterator_traits<_InputIterator2>::value_type>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<\n+      __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n \n       while (__first1 != __last1 && __first2 != __last2)\n@@ -3624,12 +3624,12 @@ namespace std\n \t     _InputIterator2 __first2, _InputIterator2 __last2, _Compare __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>)\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>)\n-      __glibcpp_function_requires(_SameTypeConcept<\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n+      __glibcxx_function_requires(_SameTypeConcept<\n \t    typename iterator_traits<_InputIterator1>::value_type,\n \t    typename iterator_traits<_InputIterator2>::value_type>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare,\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n \t    typename iterator_traits<_InputIterator1>::value_type,\n \t    typename iterator_traits<_InputIterator2>::value_type>)\n \n@@ -3651,14 +3651,14 @@ namespace std\n \t      _OutputIterator __result)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>)\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator,\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n-      __glibcpp_function_requires(_SameTypeConcept<\n+      __glibcxx_function_requires(_SameTypeConcept<\n \t    typename iterator_traits<_InputIterator1>::value_type,\n \t    typename iterator_traits<_InputIterator2>::value_type>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<\n+      __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n \n       while (__first1 != __last1 && __first2 != __last2) {\n@@ -3688,14 +3688,14 @@ namespace std\n \t      _OutputIterator __result, _Compare __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>)\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>)\n-      __glibcpp_function_requires(_SameTypeConcept<\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n+      __glibcxx_function_requires(_SameTypeConcept<\n \t    typename iterator_traits<_InputIterator1>::value_type,\n \t    typename iterator_traits<_InputIterator2>::value_type>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator,\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare,\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n \t    typename iterator_traits<_InputIterator1>::value_type,\n \t    typename iterator_traits<_InputIterator2>::value_type>)\n \n@@ -3725,14 +3725,14 @@ namespace std\n \t\t     _OutputIterator __result)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>)\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator,\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n-      __glibcpp_function_requires(_SameTypeConcept<\n+      __glibcxx_function_requires(_SameTypeConcept<\n \t    typename iterator_traits<_InputIterator1>::value_type,\n \t    typename iterator_traits<_InputIterator2>::value_type>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<\n+      __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n \n       while (__first1 != __last1 && __first2 != __last2)\n@@ -3757,14 +3757,14 @@ namespace std\n \t\t     _OutputIterator __result, _Compare __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>)\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>)\n-      __glibcpp_function_requires(_SameTypeConcept<\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n+      __glibcxx_function_requires(_SameTypeConcept<\n \t    typename iterator_traits<_InputIterator1>::value_type,\n \t    typename iterator_traits<_InputIterator2>::value_type>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator,\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare,\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n \t    typename iterator_traits<_InputIterator1>::value_type,\n \t    typename iterator_traits<_InputIterator2>::value_type>)\n \n@@ -3789,14 +3789,14 @@ namespace std\n \t\t   _OutputIterator __result)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>)\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator,\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n-      __glibcpp_function_requires(_SameTypeConcept<\n+      __glibcxx_function_requires(_SameTypeConcept<\n \t    typename iterator_traits<_InputIterator1>::value_type,\n \t    typename iterator_traits<_InputIterator2>::value_type>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<\n+      __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n \n       while (__first1 != __last1 && __first2 != __last2)\n@@ -3822,14 +3822,14 @@ namespace std\n \t\t   _OutputIterator __result, _Compare __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>)\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>)\n-      __glibcpp_function_requires(_SameTypeConcept<\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n+      __glibcxx_function_requires(_SameTypeConcept<\n \t    typename iterator_traits<_InputIterator1>::value_type,\n \t    typename iterator_traits<_InputIterator2>::value_type>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator,\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare,\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n \t    typename iterator_traits<_InputIterator1>::value_type,\n \t    typename iterator_traits<_InputIterator2>::value_type>)\n \n@@ -3855,14 +3855,14 @@ namespace std\n \t\t\t     _OutputIterator __result)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>)\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator,\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n-      __glibcpp_function_requires(_SameTypeConcept<\n+      __glibcxx_function_requires(_SameTypeConcept<\n \t    typename iterator_traits<_InputIterator1>::value_type,\n \t    typename iterator_traits<_InputIterator2>::value_type>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<\n+      __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n \n       while (__first1 != __last1 && __first2 != __last2)\n@@ -3892,14 +3892,14 @@ namespace std\n \t\t\t     _Compare __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>)\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>)\n-      __glibcpp_function_requires(_SameTypeConcept<\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n+      __glibcxx_function_requires(_SameTypeConcept<\n \t    typename iterator_traits<_InputIterator1>::value_type,\n \t    typename iterator_traits<_InputIterator2>::value_type>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator,\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare,\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n \t    typename iterator_traits<_InputIterator1>::value_type,\n \t    typename iterator_traits<_InputIterator2>::value_type>)\n \n@@ -3929,8 +3929,8 @@ namespace std\n     max_element(_ForwardIterator __first, _ForwardIterator __last)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n \n       if (__first == __last) return __first;\n@@ -3947,8 +3947,8 @@ namespace std\n \t\t_Compare __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare,\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n \t    typename iterator_traits<_ForwardIterator>::value_type,\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n \n@@ -3964,8 +3964,8 @@ namespace std\n     min_element(_ForwardIterator __first, _ForwardIterator __last)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n \n       if (__first == __last) return __first;\n@@ -3982,8 +3982,8 @@ namespace std\n \t\t_Compare __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare,\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n \t    typename iterator_traits<_ForwardIterator>::value_type,\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n \n@@ -4003,8 +4003,8 @@ namespace std\n     next_permutation(_BidirectionalIterator __first, _BidirectionalIterator __last)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BidirectionalIterator>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<\n+      __glibcxx_function_requires(_BidirectionalIteratorConcept<_BidirectionalIterator>)\n+      __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_BidirectionalIterator>::value_type>)\n \n       if (__first == __last)\n@@ -4040,8 +4040,8 @@ namespace std\n \t\t     _Compare __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BidirectionalIterator>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare,\n+      __glibcxx_function_requires(_BidirectionalIteratorConcept<_BidirectionalIterator>)\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n \t    typename iterator_traits<_BidirectionalIterator>::value_type,\n \t    typename iterator_traits<_BidirectionalIterator>::value_type>)\n \n@@ -4077,8 +4077,8 @@ namespace std\n     prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator __last)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BidirectionalIterator>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<\n+      __glibcxx_function_requires(_BidirectionalIteratorConcept<_BidirectionalIterator>)\n+      __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_BidirectionalIterator>::value_type>)\n \n       if (__first == __last)\n@@ -4114,8 +4114,8 @@ namespace std\n \t\t     _Compare __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BidirectionalIterator>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare,\n+      __glibcxx_function_requires(_BidirectionalIteratorConcept<_BidirectionalIterator>)\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n \t    typename iterator_traits<_BidirectionalIterator>::value_type,\n \t    typename iterator_traits<_BidirectionalIterator>::value_type>)\n \n@@ -4154,9 +4154,9 @@ namespace std\n \t\t  _ForwardIterator __first2, _ForwardIterator __last2)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcpp_function_requires(_EqualOpConcept<\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_EqualOpConcept<\n \t    typename iterator_traits<_InputIterator>::value_type,\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n \n@@ -4174,12 +4174,12 @@ namespace std\n \t\t  _BinaryPredicate __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcpp_function_requires(_EqualOpConcept<\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_EqualOpConcept<\n \t    typename iterator_traits<_InputIterator>::value_type,\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_BinaryPredicate,\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,\n \t    typename iterator_traits<_InputIterator>::value_type,\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n \n@@ -4255,8 +4255,8 @@ namespace std\n \t       bidirectional_iterator_tag, bidirectional_iterator_tag)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BidirectionalIterator1>)\n-      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BidirectionalIterator2>)\n+      __glibcxx_function_requires(_BidirectionalIteratorConcept<_BidirectionalIterator1>)\n+      __glibcxx_function_requires(_BidirectionalIteratorConcept<_BidirectionalIterator2>)\n \n       typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;\n       typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;\n@@ -4284,8 +4284,8 @@ namespace std\n \t       _BinaryPredicate __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BidirectionalIterator1>)\n-      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BidirectionalIterator2>)\n+      __glibcxx_function_requires(_BidirectionalIteratorConcept<_BidirectionalIterator1>)\n+      __glibcxx_function_requires(_BidirectionalIteratorConcept<_BidirectionalIterator2>)\n \n       typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;\n       typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;\n@@ -4313,9 +4313,9 @@ namespace std\n \t     _ForwardIterator2 __first2, _ForwardIterator2 __last2)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator1>)\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator2>)\n-      __glibcpp_function_requires(_EqualOpConcept<\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator1>)\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator2>)\n+      __glibcxx_function_requires(_EqualOpConcept<\n \t    typename iterator_traits<_ForwardIterator1>::value_type,\n \t    typename iterator_traits<_ForwardIterator2>::value_type>)\n \n@@ -4332,9 +4332,9 @@ namespace std\n \t     _BinaryPredicate __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator1>)\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator2>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_BinaryPredicate,\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator1>)\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator2>)\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,\n \t    typename iterator_traits<_ForwardIterator1>::value_type,\n \t    typename iterator_traits<_ForwardIterator2>::value_type>)\n \n@@ -4346,5 +4346,5 @@ namespace std\n \n } // namespace std\n \n-#endif /* __GLIBCPP_INTERNAL_ALGO_H */\n+#endif /* _ALGO_H */\n "}, {"sha": "57faf234fd18c3c2d32afb2eb471bcff42480331", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __GLIBCPP_INTERNAL_ALGOBASE_H\n-#define __GLIBCPP_INTERNAL_ALGOBASE_H\n+#ifndef _ALGOBASE_H\n+#define _ALGOBASE_H 1\n \n #include <bits/c++config.h>\n #include <cstring>\n@@ -94,10 +94,10 @@ namespace std\n       typedef typename iterator_traits<_ForwardIterator2>::value_type _ValueType2;\n \n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator1>)\n-      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator2>)\n-      __glibcpp_function_requires(_ConvertibleConcept<_ValueType1, _ValueType2>)\n-      __glibcpp_function_requires(_ConvertibleConcept<_ValueType2, _ValueType1>)\n+      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator1>)\n+      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator2>)\n+      __glibcxx_function_requires(_ConvertibleConcept<_ValueType1, _ValueType2>)\n+      __glibcxx_function_requires(_ConvertibleConcept<_ValueType2, _ValueType1>)\n \n       _ValueType1 __tmp = *__a;\n       *__a = *__b;\n@@ -118,7 +118,7 @@ namespace std\n     swap(_Tp& __a, _Tp& __b)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_SGIAssignableConcept<_Tp>)\n+      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)\n       \n       _Tp __tmp = __a;\n       __a = __b;\n@@ -143,7 +143,7 @@ namespace std\n     min(const _Tp& __a, const _Tp& __b)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_LessThanComparableConcept<_Tp>)\n+      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)\n       //return __b < __a ? __b : __a;\n       if (__b < __a) return __b; return __a;\n     }\n@@ -163,7 +163,7 @@ namespace std\n     max(const _Tp& __a, const _Tp& __b) \n     {\n       // concept requirements\n-      __glibcpp_function_requires(_LessThanComparableConcept<_Tp>)\n+      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)\n       //return  __a < __b ? __b : __a;\n       if (__a < __b) return __b; return __a;\n     }\n@@ -327,8 +327,8 @@ namespace std\n     copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator,\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n \t    typename iterator_traits<_InputIterator>::value_type>)\n \n        typedef typename _Is_normal_iterator<_InputIterator>::_Normal __Normal;\n@@ -460,9 +460,9 @@ namespace std\n     copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BI1>)\n-      __glibcpp_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)\n-      __glibcpp_function_requires(_ConvertibleConcept<\n+      __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)\n+      __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)\n+      __glibcxx_function_requires(_ConvertibleConcept<\n \t    typename iterator_traits<_BI1>::value_type,\n \t    typename iterator_traits<_BI2>::value_type>)\n \n@@ -488,7 +488,7 @@ namespace std\n     fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator>)\n \n       for ( ; __first != __last; ++__first)\n \t*__first = __value;\n@@ -510,7 +510,7 @@ namespace std\n     fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator,_Tp>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,_Tp>)\n \n       for ( ; __n > 0; --__n, ++__first)\n \t*__first = __value;\n@@ -582,11 +582,11 @@ namespace std\n \t     _InputIterator2 __first2)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>)\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>)\n-      __glibcpp_function_requires(_EqualityComparableConcept<\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n+      __glibcxx_function_requires(_EqualityComparableConcept<\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n-      __glibcpp_function_requires(_EqualityComparableConcept<\n+      __glibcxx_function_requires(_EqualityComparableConcept<\n \t    typename iterator_traits<_InputIterator2>::value_type>)\n \n       while (__first1 != __last1 && *__first1 == *__first2)\n@@ -617,8 +617,8 @@ namespace std\n \t     _InputIterator2 __first2, _BinaryPredicate __binary_pred)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>)\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n \n       while (__first1 != __last1 && __binary_pred(*__first1, *__first2))\n         {\n@@ -644,9 +644,9 @@ namespace std\n     equal(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>)\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>)\n-      __glibcpp_function_requires(_EqualOpConcept<\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n+      __glibcxx_function_requires(_EqualOpConcept<\n \t    typename iterator_traits<_InputIterator1>::value_type,\n \t    typename iterator_traits<_InputIterator2>::value_type>)\n \n@@ -676,8 +676,8 @@ namespace std\n \t  _BinaryPredicate __binary_pred)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>)\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n \n       for ( ; __first1 != __last1; ++__first1, ++__first2)\n \tif (!__binary_pred(*__first1, *__first2))\n@@ -705,11 +705,11 @@ namespace std\n \t\t\t    _InputIterator2 __first2, _InputIterator2 __last2)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>)\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n+      __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<\n+      __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_InputIterator2>::value_type>)\n \n       for (;__first1 != __last1 && __first2 != __last2; ++__first1, ++__first2) \n@@ -741,8 +741,8 @@ namespace std\n \t\t\t    _Compare __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>)\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n \n       for ( ; __first1 != __last1 && __first2 != __last2\n \t    ; ++__first1, ++__first2) "}, {"sha": "755e581a005becd05a197ef3cde64d3816cd26dd", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __GLIBCPP_INTERNAL_BVECTOR_H\n-#define __GLIBCPP_INTERNAL_BVECTOR_H\n+#ifndef _BVECTOR_H\n+#define _BVECTOR_H 1\n \n namespace std\n { \n@@ -728,7 +728,7 @@ typedef vector<bool, __alloc> bit_vector;\n \n } // namespace std \n \n-#endif /* __GLIBCPP_INTERNAL_BVECTOR_H */\n+#endif /* _BVECTOR_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "08841174f07c290df2eb5943ad5fffea413cec56", "filename": "libstdc++-v3/include/bits/stl_construct.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef _CPP_BITS_STL_CONSTRUCT_H\n-#define _CPP_BITS_STL_CONSTRUCT_H 1\n+#ifndef _STL_CONSTRUCT_H\n+#define _STL_CONSTRUCT_H 1\n \n #include <bits/type_traits.h>\n #include <new>\n@@ -144,5 +144,5 @@ namespace std\n     }\n } // namespace std\n \n-#endif /* _CPP_BITS_STL_CONSTRUCT_H */\n+#endif /* _STL_CONSTRUCT_H */\n "}, {"sha": "e474ede80c0192b25deb28108def1d0f0a334aa2", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __GLIBCPP_INTERNAL_DEQUE_H\n-#define __GLIBCPP_INTERNAL_DEQUE_H\n+#ifndef _DEQUE_H\n+#define _DEQUE_H 1\n \n #include <bits/concept_check.h>\n #include <bits/stl_iterator_base_types.h>\n@@ -309,7 +309,7 @@ namespace std\n     return !(__x < __y);\n   }\n   \n-  // _GLIBCPP_RESOLVE_LIB_DEFECTS\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // According to the resolution of DR179 not only the various comparison\n   // operators but also operator- must accept mixed iterator/const_iterator\n   // parameters.\n@@ -638,7 +638,7 @@ namespace std\n     class deque : protected _Deque_base<_Tp, _Alloc>\n   {\n     // concept requirements\n-    __glibcpp_class_requires(_Tp, _SGIAssignableConcept)\n+    __glibcxx_class_requires(_Tp, _SGIAssignableConcept)\n   \n     typedef _Deque_base<_Tp, _Alloc>           _Base;\n   \n@@ -1527,4 +1527,4 @@ namespace std\n   }\n } // namespace std \n   \n-#endif /* __GLIBCPP_INTERNAL_DEQUE_H */\n+#endif /* _DEQUE_H */"}, {"sha": "90513144726ecba6fc7bc06247d554f565e4a9a9", "filename": "libstdc++-v3/include/bits/stl_function.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __GLIBCPP_INTERNAL_FUNCTION_H\n-#define __GLIBCPP_INTERNAL_FUNCTION_H\n+#ifndef _FUNCTION_H\n+#define _FUNCTION_H 1\n \n namespace std\n {\n@@ -361,7 +361,7 @@ class binder1st\n   operator()(const typename _Operation::second_argument_type& __x) const {\n     return op(value, __x); \n   }\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n   //109.  Missing binders for non-const sequence elements\n   typename _Operation::result_type\n   operator()(typename _Operation::second_argument_type& __x) const {\n@@ -395,7 +395,7 @@ class binder2nd\n   operator()(const typename _Operation::first_argument_type& __x) const {\n     return op(__x, value); \n   }\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n   //109.  Missing binders for non-const sequence elements\n   typename _Operation::result_type\n   operator()(typename _Operation::first_argument_type& __x) const {\n@@ -729,7 +729,7 @@ mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)\n \n } // namespace std\n \n-#endif /* __GLIBCPP_INTERNAL_FUNCTION_H */\n+#endif /* _FUNCTION_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "ff829a06f258bfe772aa9526e2a710da2351847a", "filename": "libstdc++-v3/include/bits/stl_heap.h", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -57,8 +57,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef _CPP_BITS_STL_HEAP_H\n-#define _CPP_BITS_STL_HEAP_H 1\n+#ifndef _STL_HEAP_H\n+#define _STL_HEAP_H 1\n \n namespace std\n {\n@@ -89,9 +89,9 @@ namespace std\n \t  _DistanceType;\n \n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n+      __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<_ValueType>)\n+      __glibcxx_function_requires(_LessThanComparableConcept<_ValueType>)\n \n       std::__push_heap(__first, _DistanceType((__last - __first) - 1), _DistanceType(0), \n \t\t       _ValueType(*(__last - 1)));\n@@ -123,7 +123,7 @@ namespace std\n \t  _DistanceType;\n \n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n+      __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n \n       std::__push_heap(__first, _DistanceType((__last - __first) - 1), _DistanceType(0), \n@@ -168,9 +168,9 @@ namespace std\n       typedef typename iterator_traits<_RandomAccessIterator>::value_type _ValueType;\n \n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n+      __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<_ValueType>)\n+      __glibcxx_function_requires(_LessThanComparableConcept<_ValueType>)\n \n       std::__pop_heap(__first, __last - 1, __last - 1, _ValueType(*(__last - 1)));\n     }\n@@ -214,7 +214,7 @@ namespace std\n \t     _RandomAccessIterator __last, _Compare __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n+      __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n \n       typedef typename iterator_traits<_RandomAccessIterator>::value_type _ValueType;\n@@ -231,9 +231,9 @@ namespace std\n \t  _DistanceType;\n \n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n+      __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<_ValueType>)\n+      __glibcxx_function_requires(_LessThanComparableConcept<_ValueType>)\n \n       if (__last - __first < 2) return;\n       _DistanceType __len = __last - __first;\n@@ -257,7 +257,7 @@ namespace std\n \t  _DistanceType;\n \n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n+      __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n \n       if (__last - __first < 2) return;\n@@ -277,9 +277,9 @@ namespace std\n     sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n+      __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<\n+      __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n \n       while (__last - __first > 1)\n@@ -292,7 +292,7 @@ namespace std\n \t      _Compare __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n+      __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n \n       while (__last - __first > 1)\n@@ -301,7 +301,7 @@ namespace std\n \n } // namespace std\n \n-#endif /* _CPP_BITS_STL_HEAP_H */\n+#endif /* _STL_HEAP_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "4aa92ffdd20858826e720c9de67312c9cdb7db8e", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -62,8 +62,8 @@\n  *  supporting functions and overloaded operators.\n  */\n \n-#ifndef __GLIBCPP_INTERNAL_ITERATOR_H\n-#define __GLIBCPP_INTERNAL_ITERATOR_H\n+#ifndef _ITERATOR_H\n+#define _ITERATOR_H 1\n \n namespace std\n {\n@@ -109,7 +109,7 @@ namespace std\n        *  The default constructor default-initializes member @p current.\n        *  If it is a pointer, that means it is zero-initialized.\n       */\n-      // _GLIBCPP_RESOLVE_LIB_DEFECTS\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 235 No specification of default ctor for reverse_iterator\n       reverse_iterator() : current() { }\n \n@@ -722,7 +722,7 @@ namespace __gnu_cxx\n \t     const __normal_iterator<_Iterator, _Container>& __rhs)\n   { return __lhs.base() >= __rhs.base(); }\n \n-  // _GLIBCPP_RESOLVE_LIB_DEFECTS\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // According to the resolution of DR179 not only the various comparison\n   // operators but also operator- must accept mixed iterator/const_iterator\n   // parameters."}, {"sha": "a1404e139e47b316a5b9109d4a9328637a39a082", "filename": "libstdc++-v3/include/bits/stl_iterator_base_funcs.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -61,8 +61,8 @@\n  *  functions, such as distance() and advance().\n  */\n \n-#ifndef __GLIBCPP_INTERNAL_ITERATOR_BASE_FUNCS_H\n-#define __GLIBCPP_INTERNAL_ITERATOR_BASE_FUNCS_H\n+#ifndef _ITERATOR_BASE_FUNCS_H\n+#define _ITERATOR_BASE_FUNCS_H 1\n \n #pragma GCC system_header\n #include <bits/concept_check.h>\n@@ -75,7 +75,7 @@ namespace std\n                input_iterator_tag)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n   \n       typename iterator_traits<_InputIterator>::difference_type __n = 0;\n       while (__first != __last) {\n@@ -90,7 +90,7 @@ namespace std\n                random_access_iterator_tag)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_RandomAccessIteratorConcept<_RandomAccessIterator>)\n+      __glibcxx_function_requires(_RandomAccessIteratorConcept<_RandomAccessIterator>)\n       return __last - __first;\n     }\n   \n@@ -119,7 +119,7 @@ namespace std\n     __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n       while (__n--) ++__i;\n     }\n   \n@@ -129,7 +129,7 @@ namespace std\n               bidirectional_iterator_tag)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BidirectionalIterator>)\n+      __glibcxx_function_requires(_BidirectionalIteratorConcept<_BidirectionalIterator>)\n   \n       if (__n > 0)\n         while (__n--) ++__i;\n@@ -143,7 +143,7 @@ namespace std\n               random_access_iterator_tag)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_RandomAccessIteratorConcept<_RandomAccessIterator>)\n+      __glibcxx_function_requires(_RandomAccessIteratorConcept<_RandomAccessIterator>)\n       __i += __n;\n     }\n   \n@@ -168,4 +168,4 @@ namespace std\n     }\n } // namespace std\n \n-#endif /* __GLIBCPP_INTERNAL_ITERATOR_BASE_FUNCS_H */\n+#endif /* _ITERATOR_BASE_FUNCS_H */"}, {"sha": "373caba2ca384be1fabdcfbb3cb369f5ea629447", "filename": "libstdc++-v3/include/bits/stl_iterator_base_types.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -61,8 +61,8 @@\n  *  such as iterator_traits and struct iterator.\n  */\n \n-#ifndef __GLIBCPP_INTERNAL_ITERATOR_BASE_TYPES_H\n-#define __GLIBCPP_INTERNAL_ITERATOR_BASE_TYPES_H\n+#ifndef _ITERATOR_BASE_TYPES_H\n+#define _ITERATOR_BASE_TYPES_H 1\n \n #pragma GCC system_header\n \n@@ -161,5 +161,5 @@ namespace std\n \n } // namespace std\n \n-#endif /* __GLIBCPP_INTERNAL_ITERATOR_BASE_TYPES_H */\n+#endif /* _ITERATOR_BASE_TYPES_H */\n "}, {"sha": "95fd78e07ea1c63cbbf8dff26a09fb8bcaf51a5a", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __GLIBCPP_INTERNAL_LIST_H\n-#define __GLIBCPP_INTERNAL_LIST_H\n+#ifndef _LIST_H\n+#define _LIST_H 1\n \n #include <bits/concept_check.h>\n \n@@ -366,7 +366,7 @@ namespace std\n     class list : protected _List_base<_Tp, _Alloc>\n   {\n     // concept requirements\n-    __glibcpp_class_requires(_Tp, _SGIAssignableConcept)\n+    __glibcxx_class_requires(_Tp, _SGIAssignableConcept)\n   \n     typedef _List_base<_Tp, _Alloc>                       _Base;\n   \n@@ -1108,4 +1108,4 @@ namespace std\n     { __x.swap(__y); }\n } // namespace std\n \n-#endif /* __GLIBCPP_INTERNAL_LIST_H */\n+#endif /* _LIST_H */"}, {"sha": "7b15dccae1d40e0aaf14e131a35969a4f86b3b39", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __GLIBCPP_INTERNAL_MAP_H\n-#define __GLIBCPP_INTERNAL_MAP_H\n+#ifndef _MAP_H\n+#define _MAP_H 1\n \n #include <bits/concept_check.h>\n \n@@ -91,8 +91,8 @@ namespace std\n     class map\n   {\n     // concept requirements\n-    __glibcpp_class_requires(_Tp, _SGIAssignableConcept)\n-    __glibcpp_class_requires4(_Compare, bool, _Key, _Key, _BinaryFunctionConcept)\n+    __glibcxx_class_requires(_Tp, _SGIAssignableConcept)\n+    __glibcxx_class_requires4(_Compare, bool, _Key, _Key, _BinaryFunctionConcept)\n   \n   public:\n     typedef _Key                                          key_type;\n@@ -311,7 +311,7 @@ namespace std\n     operator[](const key_type& __k)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_DefaultConstructibleConcept<mapped_type>)\n+      __glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)\n   \n       iterator __i = lower_bound(__k);\n       // __i->first is greater than or equivalent to __k.\n@@ -655,4 +655,4 @@ namespace std\n     { __x.swap(__y); }\n } // namespace std\n \n-#endif /* __GLIBCPP_INTERNAL_MAP_H */\n+#endif /* _MAP_H */"}, {"sha": "ebc7ff9137be3466df1e2de1ecb9d2fd64f6ef0c", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __GLIBCPP_INTERNAL_MULTIMAP_H\n-#define __GLIBCPP_INTERNAL_MULTIMAP_H\n+#ifndef _MULTIMAP_H\n+#define _MULTIMAP_H 1\n \n #include <bits/concept_check.h>\n \n@@ -105,8 +105,8 @@ namespace std\n     class multimap\n   {\n     // concept requirements\n-    __glibcpp_class_requires(_Tp, _SGIAssignableConcept)\n-    __glibcpp_class_requires4(_Compare, bool, _Key, _Key, _BinaryFunctionConcept)\n+    __glibcxx_class_requires(_Tp, _SGIAssignableConcept)\n+    __glibcxx_class_requires4(_Compare, bool, _Key, _Key, _BinaryFunctionConcept)\n   \n   public:\n     typedef _Key                                          key_type;\n@@ -634,4 +634,4 @@ namespace std\n     { __x.swap(__y); }\n } // namespace std\n \n-#endif /* __GLIBCPP_INTERNAL_MULTIMAP_H */\n+#endif /* _MULTIMAP_H */"}, {"sha": "7c908e1b77e8d330ff4c11639d734f26d3a0ac39", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __GLIBCPP_INTERNAL_MULTISET_H\n-#define __GLIBCPP_INTERNAL_MULTISET_H\n+#ifndef _MULTISET_H\n+#define _MULTISET_H 1\n \n #include <bits/concept_check.h>\n \n@@ -84,8 +84,8 @@ template <class _Key, class _Compare, class _Alloc>\n class multiset\n {\n   // concept requirements\n-  __glibcpp_class_requires(_Key, _SGIAssignableConcept)\n-  __glibcpp_class_requires4(_Compare, bool, _Key, _Key, _BinaryFunctionConcept)\n+  __glibcxx_class_requires(_Key, _SGIAssignableConcept)\n+  __glibcxx_class_requires4(_Compare, bool, _Key, _Key, _BinaryFunctionConcept)\n \n public:\n \n@@ -183,7 +183,7 @@ class multiset\n \n   size_type count(const key_type& __x) const { return _M_t.count(__x); }\n \n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n //214.  set::find() missing const overload\n   iterator find(const key_type& __x) { return _M_t.find(__x); }\n   const_iterator find(const key_type& __x) const { return _M_t.find(__x); }\n@@ -270,4 +270,4 @@ inline void swap(multiset<_Key,_Compare,_Alloc>& __x,\n \n } // namespace std\n \n-#endif /* __GLIBCPP_INTERNAL_MULTISET_H */\n+#endif /* _MULTISET_H */"}, {"sha": "4aa92edf91db3f6dddb2bca2fb457bf81688e972", "filename": "libstdc++-v3/include/bits/stl_numeric.h", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef _CPP_BITS_STL_NUMERIC_H\n-#define _CPP_BITS_STL_NUMERIC_H 1\n+#ifndef _STL_NUMERIC_H\n+#define _STL_NUMERIC_H 1\n \n namespace std\n {\n@@ -69,7 +69,7 @@ namespace std\n     accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n \n       for ( ; __first != __last; ++__first)\n \t__init = __init + *__first;\n@@ -82,7 +82,7 @@ namespace std\n \t       _BinaryOperation __binary_op)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n \n       for ( ; __first != __last; ++__first)\n \t__init = __binary_op(__init, *__first);\n@@ -95,8 +95,8 @@ namespace std\n \t\t  _InputIterator2 __first2, _Tp __init)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>)\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n \n       for ( ; __first1 != __last1; ++__first1, ++__first2)\n \t__init = __init + (*__first1 * *__first2);\n@@ -112,8 +112,8 @@ namespace std\n \t\t  _BinaryOperation2 __binary_op2)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>)\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n \n       for ( ; __first1 != __last1; ++__first1, ++__first2)\n \t__init = __binary_op1(__init, __binary_op2(*__first1, *__first2));\n@@ -128,8 +128,8 @@ namespace std\n       typedef typename iterator_traits<_InputIterator>::value_type _ValueType;\n \n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator, _ValueType>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator, _ValueType>)\n \n       if (__first == __last) return __result;\n       *__result = *__first;\n@@ -149,8 +149,8 @@ namespace std\n       typedef typename iterator_traits<_InputIterator>::value_type _ValueType;\n \n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator, _ValueType>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator, _ValueType>)\n \n       if (__first == __last) return __result;\n       *__result = *__first;\n@@ -170,8 +170,8 @@ namespace std\n       typedef typename iterator_traits<_InputIterator>::value_type _ValueType;\n \n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator, _ValueType>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator, _ValueType>)\n \n       if (__first == __last) return __result;\n       *__result = *__first;\n@@ -192,8 +192,8 @@ namespace std\n       typedef typename iterator_traits<_InputIterator>::value_type _ValueType;\n \n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator, _ValueType>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator, _ValueType>)\n \n       if (__first == __last) return __result;\n       *__result = *__first;\n@@ -208,4 +208,4 @@ namespace std\n \n } // namespace std\n \n-#endif /* _CPP_BITS_STL_NUMERIC_H */\n+#endif /* _STL_NUMERIC_H */"}, {"sha": "0d0047fac48e39da858ab9e95765e6597454cd64", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __GLIBCPP_INTERNAL_PAIR_H\n-#define __GLIBCPP_INTERNAL_PAIR_H\n+#ifndef _PAIR_H\n+#define _PAIR_H 1\n \n namespace std\n {\n@@ -72,7 +72,7 @@ struct pair {\n \n   _T1 first;                 ///< @c first is a copy of the first object\n   _T2 second;                ///< @c second is a copy of the second object\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n //265.  std::pair::pair() effects overly restrictive\n   /** The default constructor creates @c first and @c second using their\n    *  respective default constructors.  */\n@@ -138,7 +138,7 @@ inline bool operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y) {\n  *  the LWG by default.\n */\n template <class _T1, class _T2>\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n //181.  make_pair() unintended behavior\n inline pair<_T1, _T2> make_pair(_T1 __x, _T2 __y)\n #else\n@@ -150,7 +150,7 @@ inline pair<_T1, _T2> make_pair(const _T1& __x, const _T2& __y)\n \n } // namespace std\n \n-#endif /* __GLIBCPP_INTERNAL_PAIR_H */\n+#endif /* _PAIR_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "0bb41acaf9f3172d1eb913b3ea5b3a0241010e9d", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __GLIBCPP_INTERNAL_QUEUE_H\n-#define __GLIBCPP_INTERNAL_QUEUE_H\n+#ifndef _QUEUE_H\n+#define _QUEUE_H 1\n \n #include <bits/concept_check.h>\n \n@@ -106,10 +106,10 @@ namespace std\n   {\n     // concept requirements\n     typedef typename _Sequence::value_type _Sequence_value_type;\n-    __glibcpp_class_requires(_Tp, _SGIAssignableConcept)\n-    __glibcpp_class_requires(_Sequence, _FrontInsertionSequenceConcept)\n-    __glibcpp_class_requires(_Sequence, _BackInsertionSequenceConcept)\n-    __glibcpp_class_requires2(_Tp, _Sequence_value_type, _SameTypeConcept)\n+    __glibcxx_class_requires(_Tp, _SGIAssignableConcept)\n+    __glibcxx_class_requires(_Sequence, _FrontInsertionSequenceConcept)\n+    __glibcxx_class_requires(_Sequence, _BackInsertionSequenceConcept)\n+    __glibcxx_class_requires2(_Tp, _Sequence_value_type, _SameTypeConcept)\n   \n     template <typename _Tp1, typename _Seq1>\n     friend bool operator== (const queue<_Tp1, _Seq1>&,\n@@ -306,11 +306,11 @@ namespace std\n   {\n     // concept requirements\n     typedef typename _Sequence::value_type _Sequence_value_type;\n-    __glibcpp_class_requires(_Tp, _SGIAssignableConcept)\n-    __glibcpp_class_requires(_Sequence, _SequenceConcept)\n-    __glibcpp_class_requires(_Sequence, _RandomAccessContainerConcept)\n-    __glibcpp_class_requires2(_Tp, _Sequence_value_type, _SameTypeConcept)\n-    __glibcpp_class_requires4(_Compare, bool, _Tp, _Tp, _BinaryFunctionConcept)\n+    __glibcxx_class_requires(_Tp, _SGIAssignableConcept)\n+    __glibcxx_class_requires(_Sequence, _SequenceConcept)\n+    __glibcxx_class_requires(_Sequence, _RandomAccessContainerConcept)\n+    __glibcxx_class_requires2(_Tp, _Sequence_value_type, _SameTypeConcept)\n+    __glibcxx_class_requires4(_Compare, bool, _Tp, _Tp, _BinaryFunctionConcept)\n   \n   public:\n     typedef typename _Sequence::value_type                value_type;\n@@ -427,4 +427,4 @@ namespace std\n   // No equality/comparison operators are provided for priority_queue.\n } // namespace std\n \n-#endif /* __GLIBCPP_INTERNAL_QUEUE_H */\n+#endif /* _QUEUE_H */"}, {"sha": "3460205e7a8fd682c6dbe36c14e4f0c87ef54f5e", "filename": "libstdc++-v3/include/bits/stl_raw_storage_iter.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_raw_storage_iter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_raw_storage_iter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_raw_storage_iter.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef _CPP_BITS_STL_RAW_STORAGE_ITERATOR_H\n-#define _CPP_BITS_STL_RAW_STORAGE_ITERATOR_H 1\n+#ifndef _STL_RAW_STORAGE_ITERATOR_H\n+#define _STL_RAW_STORAGE_ITERATOR_H 1\n \n namespace std\n {"}, {"sha": "18561ec2dc17edc85fe0593cfacdf94a1ba142f8", "filename": "libstdc++-v3/include/bits/stl_relops.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_relops.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_relops.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_relops.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -68,8 +68,8 @@\n  *  @endif\n  */\n \n-#ifndef _CPP_BITS_STL_RELOPS_H\n-#define _CPP_BITS_STL_RELOPS_H 1\n+#ifndef _STL_RELOPS_H\n+#define _STL_RELOPS_H 1\n \n namespace std\n {\n@@ -134,4 +134,4 @@ inline bool operator>=(const _Tp& __x, const _Tp& __y) {\n   } // namespace rel_ops\n } // namespace std\n \n-#endif /* _CPP_BITS_STL_RELOPS_H */\n+#endif /* _STL_RELOPS_H */"}, {"sha": "3c477608e9b76de8012806ba76b8281c34ba4c2e", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __GLIBCPP_INTERNAL_SET_H\n-#define __GLIBCPP_INTERNAL_SET_H\n+#ifndef _SET_H\n+#define _SET_H 1\n \n #include <bits/concept_check.h>\n \n@@ -85,8 +85,8 @@ template <class _Key, class _Compare, class _Alloc>\n class set\n {\n   // concept requirements\n-  __glibcpp_class_requires(_Key, _SGIAssignableConcept)\n-  __glibcpp_class_requires4(_Compare, bool, _Key, _Key, _BinaryFunctionConcept)\n+  __glibcxx_class_requires(_Key, _SGIAssignableConcept)\n+  __glibcxx_class_requires4(_Compare, bool, _Key, _Key, _BinaryFunctionConcept)\n \n public:\n   // typedefs:\n@@ -182,7 +182,7 @@ class set\n     return _M_t.find(__x) == _M_t.end() ? 0 : 1;\n   }\n \n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n //214.  set::find() missing const overload\n   iterator find(const key_type& __x) { return _M_t.find(__x); }\n   const_iterator find(const key_type& __x) const { return _M_t.find(__x); }\n@@ -267,4 +267,4 @@ inline void swap(set<_Key,_Compare,_Alloc>& __x,\n \n } // namespace std\n \n-#endif /* __GLIBCPP_INTERNAL_SET_H */\n+#endif /* _SET_H */"}, {"sha": "b9847ceb6ad90ea29971a74283dc638e4ffdca9f", "filename": "libstdc++-v3/include/bits/stl_stack.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __GLIBCPP_INTERNAL_STACK_H\n-#define __GLIBCPP_INTERNAL_STACK_H\n+#ifndef _STACK_H\n+#define _STACK_H 1\n \n #include <bits/concept_check.h>\n \n@@ -107,9 +107,9 @@ namespace std\n   {\n     // concept requirements\n     typedef typename _Sequence::value_type _Sequence_value_type;\n-    __glibcpp_class_requires(_Tp, _SGIAssignableConcept)\n-    __glibcpp_class_requires(_Sequence, _BackInsertionSequenceConcept)\n-    __glibcpp_class_requires2(_Tp, _Sequence_value_type, _SameTypeConcept)\n+    __glibcxx_class_requires(_Tp, _SGIAssignableConcept)\n+    __glibcxx_class_requires(_Sequence, _BackInsertionSequenceConcept)\n+    __glibcxx_class_requires2(_Tp, _Sequence_value_type, _SameTypeConcept)\n   \n     template <typename _Tp1, typename _Seq1>\n     friend bool operator== (const stack<_Tp1, _Seq1>&,\n@@ -247,4 +247,4 @@ namespace std\n     { return !(__x < __y); }\n } // namespace std\n \n-#endif /* __GLIBCPP_INTERNAL_STACK_H */\n+#endif /* _STACK_H */"}, {"sha": "1fa5afcda17f99a1d4bd3bf86071cc19f988df1c", "filename": "libstdc++-v3/include/bits/stl_tempbuf.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __GLIBCPP_INTERNAL_TEMPBUF_H\n-#define __GLIBCPP_INTERNAL_TEMPBUF_H\n+#ifndef _TEMPBUF_H\n+#define _TEMPBUF_H 1\n \n namespace std\n {\n@@ -75,7 +75,7 @@ template <class _ForwardIterator, class _Tp>\n   class _Temporary_buffer\n {\n   // concept requirements\n-  __glibcpp_class_requires(_ForwardIterator, _ForwardIteratorConcept)\n+  __glibcxx_class_requires(_ForwardIterator, _ForwardIteratorConcept)\n \n   ptrdiff_t  _M_original_len;\n   ptrdiff_t  _M_len;\n@@ -145,5 +145,5 @@ template <class _ForwardIterator, class _Tp>\n     \n } // namespace std\n \n-#endif /* __GLIBCPP_INTERNAL_TEMPBUF_H */\n+#endif /* _TEMPBUF_H */\n "}, {"sha": "65407ce4aea96462f2561f2806777e81bb67b03a", "filename": "libstdc++-v3/include/bits/stl_threads.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_threads.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_threads.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_threads.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -45,8 +45,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __SGI_STL_INTERNAL_THREADS_H\n-#define __SGI_STL_INTERNAL_THREADS_H\n+#ifndef _STL_THREADS_H\n+#define _STL_THREADS_H 1\n \n #include <cstddef>\n \n@@ -117,11 +117,11 @@ namespace std\n #if !defined(__GTHREAD_MUTEX_INIT) && defined(__GTHREAD_MUTEX_INIT_FUNCTION)\n namespace __gnu_cxx\n {\n-  extern __gthread_mutex_t _GLIBCPP_mutex;\n-  extern __gthread_mutex_t *_GLIBCPP_mutex_address;\n-  extern __gthread_once_t _GLIBCPP_once;\n-  extern void _GLIBCPP_mutex_init (void);\n-  extern void _GLIBCPP_mutex_address_init (void);\n+  extern __gthread_mutex_t _GLIBCXX_mutex;\n+  extern __gthread_mutex_t *_GLIBCXX_mutex_address;\n+  extern __gthread_once_t _GLIBCXX_once;\n+  extern void _GLIBCXX_mutex_init (void);\n+  extern void _GLIBCXX_mutex_address_init (void);\n }\n #endif\n \n@@ -143,24 +143,24 @@ namespace std\n       // There should be no code in this path given the usage rules above.\n #elif defined(__GTHREAD_MUTEX_INIT_FUNCTION)\n       if (_M_init_flag) return;\n-      if (__gthread_once (&__gnu_cxx::_GLIBCPP_once,\n-\t\t\t  __gnu_cxx::_GLIBCPP_mutex_init) != 0\n+      if (__gthread_once (&__gnu_cxx::_GLIBCXX_once,\n+\t\t\t  __gnu_cxx::_GLIBCXX_mutex_init) != 0\n \t  && __gthread_active_p ())\n \tabort ();\n-      __gthread_mutex_lock (&__gnu_cxx::_GLIBCPP_mutex);\n+      __gthread_mutex_lock (&__gnu_cxx::_GLIBCXX_mutex);\n       if (!_M_init_flag) \n \t{\n \t  // Even though we have a global lock, we use __gthread_once to be\n \t  // absolutely certain the _M_lock mutex is only initialized once on\n \t  // multiprocessor systems.\n-\t  __gnu_cxx::_GLIBCPP_mutex_address = &_M_lock;\n+\t  __gnu_cxx::_GLIBCXX_mutex_address = &_M_lock;\n \t  if (__gthread_once (&_M_once,\n-\t\t\t      __gnu_cxx::_GLIBCPP_mutex_address_init) != 0\n+\t\t\t      __gnu_cxx::_GLIBCXX_mutex_address_init) != 0\n \t    && __gthread_active_p ())\n \t    abort ();\n \t  _M_init_flag = 1;\n \t}\n-      __gthread_mutex_unlock (&__gnu_cxx::_GLIBCPP_mutex);\n+      __gthread_mutex_unlock (&__gnu_cxx::_GLIBCXX_mutex);\n #endif\n     }\n "}, {"sha": "2172c98f6a4281351867c600282befddd5730869", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -60,8 +60,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __GLIBCPP_INTERNAL_TREE_H\n-#define __GLIBCPP_INTERNAL_TREE_H\n+#ifndef _TREE_H\n+#define _TREE_H 1\n \n /*\n "}, {"sha": "e60e24a1c01310e4e1af59f982e195e3f2d016ea", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef _CPP_BITS_STL_UNINITIALIZED_H\n-#define _CPP_BITS_STL_UNINITIALIZED_H 1\n+#ifndef _STL_UNINITIALIZED_H\n+#define _STL_UNINITIALIZED_H 1\n \n #include <cstring>\n \n@@ -283,4 +283,4 @@ namespace std\n \n } // namespace std\n \n-#endif /* _CPP_BITS_STL_UNINITIALIZED_H */\n+#endif /* _STL_UNINITIALIZED_H */"}, {"sha": "43d28210a09554d94a46b7716e0d42061e34fddf", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __GLIBCPP_INTERNAL_VECTOR_H\n-#define __GLIBCPP_INTERNAL_VECTOR_H\n+#ifndef _VECTOR_H\n+#define _VECTOR_H 1\n \n #include <bits/stl_iterator_base_funcs.h>\n #include <bits/functexcept.h>\n@@ -186,7 +186,7 @@ namespace std\n     class vector : protected _Vector_base<_Tp, _Alloc>\n     {\n       // Concept requirements.\n-      __glibcpp_class_requires(_Tp, _SGIAssignableConcept)\n+      __glibcxx_class_requires(_Tp, _SGIAssignableConcept)\n   \n       typedef _Vector_base<_Tp, _Alloc>                     _Base;\n       typedef vector<_Tp, _Alloc>                           vector_type;\n@@ -968,4 +968,4 @@ namespace std\n     { __x.swap(__y); }\n } // namespace std\n \n-#endif /* __GLIBCPP_INTERNAL_VECTOR_H */\n+#endif /* _VECTOR_H */"}, {"sha": "dcbf9f01d91dd3a105c877f7e431ced9cc5a2a58", "filename": "libstdc++-v3/include/bits/stream_iterator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -32,8 +32,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef _CPP_BITS_STREAM_ITERATOR_H\n-#define _CPP_BITS_STREAM_ITERATOR_H 1\n+#ifndef _STREAM_ITERATOR_H\n+#define _STREAM_ITERATOR_H 1\n \n #pragma GCC system_header\n "}, {"sha": "2fac3508e33d83803285b4381999c18caaa6718c", "filename": "libstdc++-v3/include/bits/streambuf.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -32,8 +32,8 @@\n // ISO C++ 14882: 27.5  Stream buffers\n //\n \n-#ifndef _CPP_BITS_STREAMBUF_TCC\n-#define _CPP_BITS_STREAMBUF_TCC 1\n+#ifndef _STREAMBUF_TCC\n+#define _STREAMBUF_TCC 1\n \n #pragma GCC system_header\n \n@@ -156,14 +156,14 @@ namespace std\n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.  \n   // NB:  This syntax is a GNU extension.\n-#if _GLIBCPP_EXTERN_TEMPLATE\n+#if _GLIBCXX_EXTERN_TEMPLATE\n   extern template class basic_streambuf<char>;\n   extern template\n     streamsize\n     __copy_streambufs(basic_ios<char>&, basic_streambuf<char>*,\n \t\t      basic_streambuf<char>*); \n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   extern template class basic_streambuf<wchar_t>;\n   extern template\n     streamsize"}, {"sha": "f25cd4f35ed474cb6a3bd53739a0bfbd78a006fd", "filename": "libstdc++-v3/include/bits/streambuf_iterator.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -33,8 +33,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef _CPP_BITS_STREAMBUF_ITERATOR_H\n-#define _CPP_BITS_STREAMBUF_ITERATOR_H 1\n+#ifndef _STREAMBUF_ITERATOR_H\n+#define _STREAMBUF_ITERATOR_H 1\n \n #pragma GCC system_header\n \n@@ -109,7 +109,7 @@ namespace std\n \treturn __old; \n       }\n \n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 110 istreambuf_iterator::equal not const\n       // NB: there is also number 111 (NAD, Future) pending on this function.\n       bool "}, {"sha": "75775804a1b262f4ec6d15e75685702364fdced1", "filename": "libstdc++-v3/include/bits/stringfwd.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -36,8 +36,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef _CPP_BITS_STRINGFWD_H\n-#define _CPP_BITS_STRINGFWD_H\t1\n+#ifndef _STRINGFWD_H\n+#define _STRINGFWD_H 1\n \n #pragma GCC system_header\n \n@@ -59,11 +59,11 @@ namespace std\n \n   typedef basic_string<char>    string;\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template<> struct char_traits<wchar_t>;\n \n   typedef basic_string<wchar_t> wstring;\n #endif\n } // namespace std\n \n-#endif\t// _CPP_BITS_STRINGFWD_H\n+#endif\t// _STRINGFWD_H"}, {"sha": "80f7e39575e3be54fb20ad7a9d0f3fab742f5c13", "filename": "libstdc++-v3/include/bits/type_traits.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ftype_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ftype_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ftype_traits.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -46,8 +46,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef _CPP_BITS_TYPE_TRAITS_H\n-#define _CPP_BITS_TYPE_TRAITS_H 1\n+#ifndef _TYPE_TRAITS_H\n+#define _TYPE_TRAITS_H 1\n \n #pragma GCC system_header\n \n@@ -332,7 +332,7 @@ struct _Is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator, _Container>\n    typedef __true_type _Normal;\n };\n \n-#endif /* _CPP_BITS_TYPE_TRAITS_H */\n+#endif /* _TYPE_TRAITS_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "2506a4bdde4c877a7829538fd255b4d411ca0f77", "filename": "libstdc++-v3/include/bits/valarray_after.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_after.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_after.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_after.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -34,8 +34,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef _CPP_VALARRAY_AFTER_H\n-#define _CPP_VALARRAY_AFTER_H 1\n+#ifndef _VALARRAY_AFTER_H\n+#define _VALARRAY_AFTER_H 1\n \n #pragma GCC system_header\n "}, {"sha": "3b14f1d3c1f97e2d2799dd69f4cebf97afc6c38e", "filename": "libstdc++-v3/include/bits/valarray_array.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -34,8 +34,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef _CPP_BITS_ARRAY_H\n-#define _CPP_BITS_ARRAY_H 1\n+#ifndef _VALARRAY_ARRAY_H\n+#define _VALARRAY_ARRAY_H 1\n \n #pragma GCC system_header\n \n@@ -618,12 +618,12 @@ _Array_augmented_##_Name (_Array<_Tp> __a, _Array<bool> __m,\t\t\\\n \n } // std::\n \n-#ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n+#ifdef _GLIBCXX_NO_TEMPLATE_EXPORT\n # define export \n # include <bits/valarray_array.tcc>    \n #endif\n            \n-#endif /* _CPP_BITS_ARRAY_H */\n+#endif /* _ARRAY_H */\n \n // Local Variables:\n // mode:c++"}, {"sha": "acf21a0fcd282136765de5cd25f6ede8e02f2108", "filename": "libstdc++-v3/include/bits/valarray_array.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.tcc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -29,8 +29,8 @@\n \n // Written by Gabriel Dos Reis <Gabriel.Dos-Reis@DPTMaths.ENS-Cachan.Fr>\n \n-#ifndef _CPP_BITS_VALARRAY_ARRAY_TCC \n-#define _CPP_BITS_VALARRAY_ARRAY_TCC 1\n+#ifndef _VALARRAY_ARRAY_TCC \n+#define _VALARRAY_ARRAY_TCC 1\n \n namespace std\n {\n@@ -52,7 +52,7 @@ __valarray_fill (_Array<_Tp> __a, size_t __n, _Array<bool> __m, const _Tp& __t)\n \n export template<typename _Tp>\n void\n-__valarray_copy (_Array<_Tp> __a, _Array<bool> __m, _Array<_Tp> __b, size_t __n)\n+__valarray_copy(_Array<_Tp> __a, _Array<bool> __m, _Array<_Tp> __b, size_t __n)\n {\n     _Tp* __p (__a._M_data);\n     bool* __ok (__m._M_data);\n@@ -154,7 +154,7 @@ __valarray_copy_construct (_Array<_Tp> __a, _Array<bool> __m,\n \n } // std::\n \n-#endif /* _CPP_BITS_VALARRAY_ARRAY_TCC */\n+#endif /* _VALARRAY_ARRAY_TCC */\n \n // Local Variables:\n // mode:c++"}, {"sha": "775d150eff1ad0cdc3b7355f32170f9d0618806c", "filename": "libstdc++-v3/include/bits/valarray_before.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_before.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_before.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_before.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -34,8 +34,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef _CPP_VALARRAY_BEFORE_H\n-#define _CPP_VALARRAY_BEFORE_H 1\n+#ifndef _VALARRAY_BEFORE_H\n+#define _VALARRAY_BEFORE_H 1\n \n #pragma GCC system_header\n "}, {"sha": "7e65c4d9c8dba8e8504633e58aa95796db5e641e", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __GLIBCPP_INTERNAL_VECTOR_TCC\n-#define __GLIBCPP_INTERNAL_VECTOR_TCC\n+#ifndef _VECTOR_TCC\n+#define _VECTOR_TCC 1\n \n namespace std\n {\n@@ -269,7 +269,7 @@ namespace std\n       }\n     }\n   \n-  #ifdef _GLIBCPP_DEPRECATED\n+  #ifdef _GLIBCXX_DEPRECATED\n   template<typename _Tp, typename _Alloc>\n     void\n     vector<_Tp,_Alloc>::\n@@ -454,4 +454,4 @@ namespace std\n     }\n } // namespace std\n \n-#endif /* __GLIBCPP_INTERNAL_VECTOR_TCC */\n+#endif /* _VECTOR_TCC */"}, {"sha": "1271e072a694e75d68bd6021564b5a4917cac319", "filename": "libstdc++-v3/include/c/std_cctype.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cctype.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -31,8 +31,8 @@\n // ISO C++ 14882: <ccytpe>\n //\n \n-#ifndef _CPP_CCTYPE\n-#define _CPP_CCTYPE 1\n+#ifndef _CCTYPE\n+#define _CCTYPE 1\n \n #pragma GCC system_header\n "}, {"sha": "21c2701fa18cf5b9f4cf86a6ed35e7cb6a31bd89", "filename": "libstdc++-v3/include/c/std_cerrno.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cerrno.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cerrno.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cerrno.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -40,8 +40,8 @@\n  *  contained in the namespace @c std.\n  */\n \n-#ifndef _CPP_CERRNO\n-#define _CPP_CERRNO 1\n+#ifndef _CERRNO\n+#define _CERRNO 1\n \n #pragma GCC system_header\n "}, {"sha": "bcdb5f7bc298cc62f4d7b3b8a2f8ec8bee8e5524", "filename": "libstdc++-v3/include/c/std_cfloat.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cfloat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cfloat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cfloat.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -31,8 +31,8 @@\n // ISO C++ 14882: 18.2.2  Implementation properties: C library\n //\n \n-#ifndef _CPP_CFLOAT\n-#define _CPP_CFLOAT 1\n+#ifndef _CFLOAT\n+#define _CFLOAT 1\n \n #pragma GCC system_header\n "}, {"sha": "659bed9caed0df4fa2bdf837dbf7c4c0feb094b3", "filename": "libstdc++-v3/include/c/std_climits.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_climits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_climits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_climits.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -31,8 +31,8 @@\n // ISO C++ 14882: 18.2.2  Implementation properties: C library\n //\n \n-#ifndef _CPP_CLIMITS\n-#define _CPP_CLIMITS\t1\n+#ifndef _CLIMITS\n+#define _CLIMITS 1\n \n #pragma GCC system_header\n "}, {"sha": "6ac30a77fd7545f9ab7459ffaa2e968c7916ae0d", "filename": "libstdc++-v3/include/c/std_clocale.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_clocale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_clocale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_clocale.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -31,8 +31,8 @@\n // ISO C++ 14882: 18.2.2  Implementation properties: C library\n //\n \n-#ifndef _CPP_CLOCALE\n-#define _CPP_CLOCALE 1\n+#ifndef _CLOCALE\n+#define _CLOCALE 1\n \n #pragma GCC system_header\n "}, {"sha": "9d5d7c916f65a925884f880d6629156dc88fa9f3", "filename": "libstdc++-v3/include/c/std_cmath.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cmath.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -31,8 +31,8 @@\n // ISO C++ 14882: 26.5  C library\n //\n \n-#ifndef _CPP_CMATH\n-#define _CPP_CMATH 1\n+#ifndef _CMATH\n+#define _CMATH 1\n  \n #pragma GCC system_header\n \n@@ -93,7 +93,7 @@ namespace std\n   abs(long double __x)\n   { return __builtin_fabsl(__x); }\n \n-#if _GLIBCPP_HAVE_MODFF\n+#if _GLIBCXX_HAVE_MODFF\n   inline float \n   modf(float __x, float* __iptr) { return modff(__x, __iptr); }\n #else\n@@ -107,7 +107,7 @@ namespace std\n   }\n #endif\n \n-#if _GLIBCPP_HAVE_MODFL\n+#if _GLIBCXX_HAVE_MODFL\n   inline long double \n   modf(long double __x, long double* __iptr) { return modfl(__x, __iptr); }\n #else"}, {"sha": "ad80a28ccb7503b927115e9860b7d5edc5a3c919", "filename": "libstdc++-v3/include/c/std_csetjmp.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_csetjmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_csetjmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_csetjmp.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -31,8 +31,8 @@\n // ISO C++ 14882: 20.4.6  C library\n //\n \n-#ifndef _CPP_CSETJMP\n-#define _CPP_CSETJMP 1\n+#ifndef _CSETJMP\n+#define _CSETJMP 1\n \n #pragma GCC system_header\n "}, {"sha": "6f2790c5b315dfc9db172c2a69aee4bf24151302", "filename": "libstdc++-v3/include/c/std_csignal.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_csignal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_csignal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_csignal.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -31,8 +31,8 @@\n // ISO C++ 14882: 20.4.6  C library\n //\n \n-#ifndef _CPP_CSIGNAL\n-#define _CPP_CSIGNAL 1\n+#ifndef _CSIGNAL\n+#define _CSIGNAL 1\n \n #pragma GCC system_header\n "}, {"sha": "5f66f906a72c17c7661fbd797f0834c461928ca8", "filename": "libstdc++-v3/include/c/std_cstdarg.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cstdarg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cstdarg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cstdarg.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -31,8 +31,8 @@\n // ISO C++ 14882: 20.4.6  C library\n //\n \n-#ifndef _CPP_CSTDARG\n-#define _CPP_CSTDARG 1\n+#ifndef _CSTDARG\n+#define _CSTDARG 1\n \n #pragma GCC system_header\n "}, {"sha": "b88944e61b73d77f756c97d8d880bed10c524900", "filename": "libstdc++-v3/include/c/std_cstddef.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cstddef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cstddef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cstddef.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -31,8 +31,8 @@\n // ISO C++ 14882: 18.1  Types\n //\n \n-#ifndef _CPP_CSTDDEF\n-#define _CPP_CSTDDEF 1\n+#ifndef _CSTDDEF\n+#define _CSTDDEF 1\n \n #pragma GCC system_header\n "}, {"sha": "0ef5787a7f54a0cd99dd6661f31493a39542ca3b", "filename": "libstdc++-v3/include/c/std_cstdio.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cstdio.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -31,8 +31,8 @@\n // ISO C++ 14882: 27.8.2  C Library files\n //\n \n-#ifndef _CPP_CSTDIO\n-#define _CPP_CSTDIO 1\n+#ifndef _CSTDIO\n+#define _CSTDIO 1\n \n #pragma GCC system_header\n "}, {"sha": "1c34b36b6019bb7e67793bcc2944e7cc2a0b268c", "filename": "libstdc++-v3/include/c/std_cstdlib.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cstdlib.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -31,8 +31,8 @@\n // ISO C++ 14882: 20.4.6  C library\n //\n \n-#ifndef _CPP_CSTDLIB\n-#define _CPP_CSTDLIB 1\n+#ifndef _CSTDLIB\n+#define _CSTDLIB 1\n \n #pragma GCC system_header\n "}, {"sha": "e5c786d29734ad8c3c8c1cc3f0f93efeb169569f", "filename": "libstdc++-v3/include/c/std_cstring.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cstring.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -31,8 +31,8 @@\n // ISO C++ 14882: 20.4.6  C library\n //\n \n-#ifndef _CPP_CSTRING\n-#define _CPP_CSTRING 1\n+#ifndef _CSTRING\n+#define _CSTRING 1\n \n #pragma GCC system_header\n "}, {"sha": "17d965afa905b8cec0056b01c381e6306ef3520d", "filename": "libstdc++-v3/include/c/std_ctime.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_ctime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_ctime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_ctime.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -31,8 +31,8 @@\n // ISO C++ 14882: 20.5  Date and time\n //\n \n-#ifndef _CPP_CTIME\n-#define _CPP_CTIME 1\n+#ifndef _CTIME\n+#define _CTIME 1\n \n #pragma GCC system_header\n "}, {"sha": "61126d963920bba1033cb3d7eab80527d98d644a", "filename": "libstdc++-v3/include/c/std_cwchar.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cwchar.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -31,22 +31,22 @@\n // ISO C++ 14882: 21.4\n //\n \n-#ifndef _CPP_CWCHAR\n-#define _CPP_CWCHAR 1\n+#ifndef _CWCHAR\n+#define _CWCHAR 1\n \n #pragma GCC system_header\n \n #include <bits/c++config.h>\n #include <cstddef>\n #include <ctime>\n \n-#if _GLIBCPP_HAVE_WCHAR_H\n+#if _GLIBCXX_HAVE_WCHAR_H\n #include_next <wchar.h>\n #endif\n \n // Need to do a bit of trickery here with mbstate_t as char_traits\n // assumes it is in wchar.h, regardless of wchar_t specializations.\n-#ifndef _GLIBCPP_HAVE_MBSTATE_T\n+#ifndef _GLIBCXX_HAVE_MBSTATE_T\n namespace std\n {\n   extern \"C\" "}, {"sha": "b94497bbe83b5d904500c0a6161369af6618ea2e", "filename": "libstdc++-v3/include/c/std_cwctype.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cwctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cwctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cwctype.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -31,14 +31,14 @@\n // ISO C++ 14882: <cwctype>\n //\n \n-#ifndef _CPP_CWCTYPE\n-#define _CPP_CWCTYPE 1\n+#ifndef _CWCTYPE\n+#define _CWCTYPE 1\n \n #pragma GCC system_header\n \n #include <bits/c++config.h>\n \n-#if _GLIBCPP_HAVE_WCTYPE_H\n+#if _GLIBCXX_HAVE_WCTYPE_H\n #include_next <wctype.h>\n #endif\n "}, {"sha": "3a610d1777b17878054c30d215c8c0c2824251d2", "filename": "libstdc++-v3/include/c_compatibility/ctype.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fctype.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _CPP_CTYPE_H_\n-#define _CPP_CTYPE_H_ 1\n+#ifndef _GLIBCXX_CTYPE_H\n+#define _GLIBCXX_CTYPE_H 1\n \n #include <cctype>\n "}, {"sha": "f6b2b768680166ac37b44ac2cc21bcd2934debff", "filename": "libstdc++-v3/include/c_compatibility/errno.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ferrno.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ferrno.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ferrno.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _CPP_ERRNO_H_\n-#define _CPP_ERRNO_H_ 1\n+#ifndef _GLIBCXX_ERRNO_H\n+#define _GLIBCXX_ERRNO_H 1\n \n #include <cerrno>\n "}, {"sha": "5eaaba6e593f8d1d2f035e3d38ec82421451f3e9", "filename": "libstdc++-v3/include/c_compatibility/float.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ffloat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ffloat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ffloat.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _CPP_FLOAT_H_\n-#define _CPP_FLOAT_H_ 1\n+#ifndef _GLIBCXX_FLOAT_H\n+#define _GLIBCXX_FLOAT_H 1\n \n #include <cfloat>\n "}, {"sha": "c7a5fbba25143b184e040827a0d565a587170fe5", "filename": "libstdc++-v3/include/c_compatibility/iso646.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fiso646.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fiso646.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fiso646.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _CPP_ISO646_H_\n-#define _CPP_ISO646_H_ 1\n+#ifndef _GLIBCXX_ISO646_H\n+#define _GLIBCXX_ISO646_H 1\n \n #include <ciso646>\n "}, {"sha": "75fb82b58c0b82d97aa257e086ae893b32530b42", "filename": "libstdc++-v3/include/c_compatibility/limits.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Flimits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Flimits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Flimits.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _CPP_LIMITS_H_\n-#define _CPP_LIMITS_H_ 1\n+#ifndef _GLIBCXX_LIMITS_H\n+#define _GLIBCXX_LIMITS_H 1\n \n #include <climits>\n "}, {"sha": "d93e0ec7017288d994ebd69ca02ce2bdc0969633", "filename": "libstdc++-v3/include/c_compatibility/locale.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Flocale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Flocale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Flocale.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _CPP_LOCALE_H_\n-#define _CPP_LOCALE_H_ 1\n+#ifndef _GLIBCXX_LOCALE_H\n+#define _GLIBCXX_LOCALE_H 1\n \n #include <clocale>\n "}, {"sha": "1cd48cf45db6e8eaf3772002f59bd1027e74c3f5", "filename": "libstdc++-v3/include/c_compatibility/math.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fmath.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _CPP_MATH_H_\n-#define _CPP_MATH_H_ 1\n+#ifndef _GLIBCXX_MATH_H\n+#define _GLIBCXX_MATH_H 1\n \n #include <cmath>\n \n@@ -56,7 +56,7 @@ using std::fabs;\n using std::floor;\n using std::fmod;\n \n-#if _GLIBCPP_USE_C99\n+#if _GLIBCXX_USE_C99\n using std::fpclassify;\n using std::isfinite;\n using std::isinf;"}, {"sha": "0bcad031867e3e52100578975f85755aae542f60", "filename": "libstdc++-v3/include/c_compatibility/setjmp.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fsetjmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fsetjmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fsetjmp.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _CPP_SETJMP_H_\n-#define _CPP_SETJMP_H_ 1\n+#ifndef _GLIBCXX_SETJMP_H\n+#define _GLIBCXX_SETJMP_H 1\n \n #include <csetjmp>\n "}, {"sha": "b43deb5968a1513db56d50d0ab9c94e809bc14ea", "filename": "libstdc++-v3/include/c_compatibility/signal.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fsignal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fsignal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fsignal.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _CPP_SIGNAL_H_\n-#define _CPP_SIGNAL_H_ 1\n+#ifndef _GLIBCXX_SIGNAL_H\n+#define _GLIBCXX_SIGNAL_H 1\n \n #include <csignal>\n "}, {"sha": "76d6c74b2a2e9c6f5d69eacf1216321e5990aaa7", "filename": "libstdc++-v3/include/c_compatibility/stdarg.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdarg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdarg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdarg.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _CPP_STDARG_H_\n-#define _CPP_STDARG_H_ 1\n+#ifndef _GLIBCXX_STDARG_H\n+#define _GLIBCXX_STDARG_H 1\n \n #include <cstdarg>\n "}, {"sha": "4dac7db2989b34c10054a118eac2a22e31aa175f", "filename": "libstdc++-v3/include/c_compatibility/stddef.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstddef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstddef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstddef.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _CPP_STDDEF_H_\n-#define _CPP_STDDEF_H_ 1\n+#ifndef _GLIBCXX_STDDEF_H\n+#define _GLIBCXX_STDDEF_H 1\n \n #include <cstddef>\n "}, {"sha": "97171407e34a1325de6dafbf5720990b18ed4feb", "filename": "libstdc++-v3/include/c_compatibility/stdio.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdio.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _CPP_STDIO_H_\n-#define _CPP_STDIO_H_ 1\n+#ifndef _GLIBCXX_STDIO_H\n+#define _GLIBCXX_STDIO_H 1\n \n #include <cstdio>\n "}, {"sha": "2b05c1a3b442a74912f98f0c4554e357c60a91e4", "filename": "libstdc++-v3/include/c_compatibility/stdlib.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdlib.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _CPP_STDLIB_H_\n-#define _CPP_STDLIB_H_ 1\n+#ifndef _GLIBCXX_STDLIB_H\n+#define _GLIBCXX_STDLIB_H 1\n \n #include <cstdlib>\n "}, {"sha": "ebbf6f5c298431847ee89216e9e3a2f13d9d5459", "filename": "libstdc++-v3/include/c_compatibility/string.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstring.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _CPP_STRING_H_\n-#define _CPP_STRING_H_ 1\n+#ifndef _GLIBCXX_STRING_H\n+#define _GLIBCXX_STRING_H 1\n \n #include <cstring>\n "}, {"sha": "5d330c7ab3fbe00a69e429411a7f2ab227e498b2", "filename": "libstdc++-v3/include/c_compatibility/time.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ftime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ftime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ftime.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _CPP_TIME_H_\n-#define _CPP_TIME_H_ 1\n+#ifndef _GLIBCXX_TIME_H\n+#define _GLIBCXX_TIME_H 1\n \n #include <ctime>\n  "}, {"sha": "9130b5f4441af5644eaefaaca0978802a6752412", "filename": "libstdc++-v3/include/c_compatibility/wchar.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fwchar.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,14 +27,14 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _CPP_WCHAR_H_\n-#define _CPP_WCHAR_H_ 1\n+#ifndef _GLIBCXX_WCHAR_H\n+#define _GLIBCXX_WCHAR_H 1\n \n #include <cwchar>\n \n using std::mbstate_t;\n \n-#if _GLIBCPP_USE_WCHAR_T\n+#if _GLIBCXX_USE_WCHAR_T\n using std::wint_t;\n \n using std::btowc;\n@@ -95,12 +95,12 @@ using std::wmemmove;\n using std::wmemset;\n using std::wcsftime;\n \n-#if _GLIBCPP_USE_C99\n+#if _GLIBCXX_USE_C99\n using std::wcstold;\n using std::wcstoll;\n using std::wcstoull;\n #endif\n \n-#endif  //_GLIBCPP_USE_WCHAR_T\n+#endif  //_GLIBCXX_USE_WCHAR_T\n \n #endif"}, {"sha": "16b7c750d398480b72fd1556d44816696709bcf8", "filename": "libstdc++-v3/include/c_compatibility/wctype.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fwctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fwctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fwctype.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _CPP_CWCTYPE_H_\n-#define _CPP_CWCTYPE_H_ 1\n+#ifndef _GLIBCXX_CWCTYPE_H\n+#define _GLIBCXX_CWCTYPE_H 1\n \n #include <cwctype>\n "}, {"sha": "be7502d3c463df89d1a2cd38711f10099ced4ed7", "filename": "libstdc++-v3/include/c_std/cmath.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcmath.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcmath.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcmath.tcc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -29,8 +29,8 @@\n \n // This file was written by Gabriel Dos Reis <gdr@codesourcery.com>\n \n-#ifndef _CPP_BITS_CMATH_TCC\n-#define _CPP_BITS_CMATH_TCC 1\n+#ifndef _CMATH_TCC\n+#define _CMATH_TCC 1\n \n namespace std \n {"}, {"sha": "8b903eaf76ac4762f0b5763bcdbd4aa6dbec5fa4", "filename": "libstdc++-v3/include/c_std/std_cctype.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cctype.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -40,8 +40,8 @@\n  *  contained in the namespace @c std.\n  */\n \n-#ifndef _CPP_CCTYPE\n-#define _CPP_CCTYPE 1\n+#ifndef _CCTYPE\n+#define _CCTYPE 1\n \n #pragma GCC system_header\n "}, {"sha": "b9a0743e79a29487d2bf81530168aa508f912cca", "filename": "libstdc++-v3/include/c_std/std_cerrno.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cerrno.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cerrno.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cerrno.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -40,8 +40,8 @@\n  *  contained in the namespace @c std.\n  */\n \n-#ifndef _CPP_CERRNO\n-#define _CPP_CERRNO 1\n+#ifndef _CERRNO\n+#define _CERRNO 1\n \n #pragma GCC system_header\n "}, {"sha": "ab7283e7802af78529384b36f53db6ec66f6d08b", "filename": "libstdc++-v3/include/c_std/std_cfloat.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cfloat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cfloat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cfloat.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -40,8 +40,8 @@\n  *  contained in the namespace @c std.\n  */\n \n-#ifndef _CPP_CFLOAT\n-#define _CPP_CFLOAT 1\n+#ifndef _CFLOAT\n+#define _CFLOAT 1\n \n #pragma GCC system_header\n "}, {"sha": "7f2b0125f23686e3e40c25892aea8b35d61e3a84", "filename": "libstdc++-v3/include/c_std/std_climits.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_climits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_climits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_climits.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -41,8 +41,8 @@\n  *  contained in the namespace @c std.\n  */\n \n-#ifndef _CPP_CLIMITS\n-#define _CPP_CLIMITS\t1\n+#ifndef _CLIMITS\n+#define _CLIMITS 1\n \n #pragma GCC system_header\n "}, {"sha": "c6a882b6fe104640acfb83e80e0d728d51f26aab", "filename": "libstdc++-v3/include/c_std/std_clocale.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_clocale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_clocale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_clocale.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -41,8 +41,8 @@\n  *  contained in the namespace @c std.\n  */\n \n-#ifndef _CPP_CLOCALE\n-#define _CPP_CLOCALE 1\n+#ifndef _CLOCALE\n+#define _CLOCALE 1\n \n #pragma GCC system_header\n "}, {"sha": "b34e172167cc135c5369c04d1888d13f2aca6aa3", "filename": "libstdc++-v3/include/c_std/std_cmath.h", "status": "modified", "additions": 67, "deletions": 67, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cmath.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -41,8 +41,8 @@\n  *  contained in the namespace @c std.\n  */\n \n-#ifndef _CPP_CMATH\n-#define _CPP_CMATH 1\n+#ifndef _CMATH\n+#define _CMATH 1\n \n #pragma GCC system_header\n \n@@ -82,8 +82,8 @@ namespace __gnu_cxx\n {\n   namespace  __c99_binding\n   {\n-#if _GLIBCPP_USE_C99_FLOAT_TRANSCENDENTALS_CHECK || \\\n-    _GLIBCPP_USE_C99_FLOAT_TRANSCENDENTALS_DYNAMIC\n+#if _GLIBCXX_USE_C99_FLOAT_TRANSCENDENTALS_CHECK || \\\n+    _GLIBCXX_USE_C99_FLOAT_TRANSCENDENTALS_DYNAMIC\n     extern \"C\" float (acosf)(float);\n     extern \"C\" float (asinf)(float);\n     extern \"C\" float (atanf)(float);\n@@ -103,62 +103,62 @@ namespace __gnu_cxx\n     extern \"C\" float (tanf)(float);\n     extern \"C\" float (tanhf)(float);\n #endif\n-#if !_GLIBCPP_USE_C99_FLOAT_TRANSCENDENTALS_DYNAMIC\n-#if _GLIBCPP_HAVE_ACOSF\n+#if !_GLIBCXX_USE_C99_FLOAT_TRANSCENDENTALS_DYNAMIC\n+#if _GLIBCXX_HAVE_ACOSF\n     using ::acosf;\n #endif\n-#if _GLIBCPP_HAVE_ASINF\n+#if _GLIBCXX_HAVE_ASINF\n     using ::asinf;\n #endif\n-#if _GLIBCPP_HAVE_ATANF\n+#if _GLIBCXX_HAVE_ATANF\n     using ::atanf;\n #endif\n-#if _GLIBCPP_HAVE_ATAN2F\n+#if _GLIBCXX_HAVE_ATAN2F\n     using ::atan2f;\n #endif\n-#if _GLIBCPP_HAVE_CEILF\n+#if _GLIBCXX_HAVE_CEILF\n     using ::ceilf;\n #endif\n-#if _GLIBCPP_HAVE_COSHF\n+#if _GLIBCXX_HAVE_COSHF\n     using ::coshf;\n #endif\n-#if _GLIBCPP_HAVE_EXPF\n+#if _GLIBCXX_HAVE_EXPF\n     using ::expf;\n #endif\n-#if _GLIBCPP_HAVE_FLOORF\n+#if _GLIBCXX_HAVE_FLOORF\n     using ::floorf;\n #endif\n-#if _GLIBCPP_HAVE_FMODF\n+#if _GLIBCXX_HAVE_FMODF\n     using ::fmodf;\n #endif\n-#if _GLIBCPP_HAVE_FREXPF\n+#if _GLIBCXX_HAVE_FREXPF\n     using ::frexpf;\n #endif\n-#if _GLIBCPP_HAVE_LDEXPF\n+#if _GLIBCXX_HAVE_LDEXPF\n     using ::ldexpf;\n #endif\n-#if _GLIBCPP_HAVE_LOGF\n+#if _GLIBCXX_HAVE_LOGF\n     using ::logf;\n #endif\n-#if _GLIBCPP_HAVE_LOG10F\n+#if _GLIBCXX_HAVE_LOG10F\n     using ::log10f;\n #endif\n-#if _GLIBCPP_HAVE_MODFF\n+#if _GLIBCXX_HAVE_MODFF\n     using ::modff;\n #endif\n-#if _GLIBCPP_HAVE_POWF\n+#if _GLIBCXX_HAVE_POWF\n     using ::powf;\n #endif\n-#if _GLIBCPP_HAVE_SINHF\n+#if _GLIBCXX_HAVE_SINHF\n     using ::sinhf;\n #endif\n-#if _GLIBCPP_HAVE_TANF\n+#if _GLIBCXX_HAVE_TANF\n     using ::tanf;\n #endif\n-#if _GLIBCPP_HAVE_TANHF\n+#if _GLIBCXX_HAVE_TANHF\n     using ::tanhf;\n #endif\n-#endif /* _GLIBCPP_USE_C99_FLOAT_TRANSCENDENTALS_DYNAMIC */\n+#endif /* _GLIBCXX_USE_C99_FLOAT_TRANSCENDENTALS_DYNAMIC */\n   }\n }\n \n@@ -180,7 +180,7 @@ namespace std\n   abs(long double __x)\n   { return __builtin_fabsl(__x); }\n \n-#if _GLIBCPP_HAVE_ACOSF\n+#if _GLIBCXX_HAVE_ACOSF\n   inline float \n   acos(float __x) { return __gnu_cxx::__c99_binding::acosf(__x); }\n #else\n@@ -190,7 +190,7 @@ namespace std\n \n   using ::acos;\n   \n-#if _GLIBCPP_HAVE_ACOSL\n+#if _GLIBCXX_HAVE_ACOSL\n   inline long double \n   acos(long double __x) { return ::acosl(__x); }\n #else\n@@ -207,15 +207,15 @@ namespace std\n   \n   using ::asin;\n \n-#if _GLIBCPP_HAVE_ASINF\n+#if _GLIBCXX_HAVE_ASINF\n   inline float \n   asin(float __x) { return __gnu_cxx::__c99_binding::asinf(__x); }\n #else\n   inline float \n   asin(float __x) { return ::asin(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_ASINL\n+#if _GLIBCXX_HAVE_ASINL\n   inline long double \n   asin(long double __x) { return ::asinl(__x); }\n #else\n@@ -230,15 +230,15 @@ namespace std\n \n   using ::atan;\n \n-#if _GLIBCPP_HAVE_ATANF\n+#if _GLIBCXX_HAVE_ATANF\n   inline float \n   atan(float __x) { return __gnu_cxx::__c99_binding::atanf(__x); }\n #else\n   inline float \n   atan(float __x) { return ::atan(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_ATANL\n+#if _GLIBCXX_HAVE_ATANL\n   inline long double \n   atan(long double __x) { return ::atanl(__x); }\n #else\n@@ -253,7 +253,7 @@ namespace std\n   \n   using ::atan2;\n \n-#if _GLIBCPP_HAVE_ATAN2F\n+#if _GLIBCXX_HAVE_ATAN2F\n   inline float \n   atan2(float __y, float __x) { return __gnu_cxx::__c99_binding::atan2f(__y, __x); }\n #else\n@@ -262,7 +262,7 @@ namespace std\n   { return ::atan2(static_cast<double>(__y), static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_ATAN2L\n+#if _GLIBCXX_HAVE_ATAN2L\n   inline long double \n   atan2(long double __y, long double __x) { return ::atan2l(__y, __x); }\n #else\n@@ -279,15 +279,15 @@ namespace std\n \n   using ::ceil;\n \n-#if _GLIBCPP_HAVE_CEILF\n+#if _GLIBCXX_HAVE_CEILF\n   inline float \n   ceil(float __x) { return __gnu_cxx::__c99_binding::ceilf(__x); }\n #else\n   inline float \n   ceil(float __x) { return ::ceil(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_CEILL\n+#if _GLIBCXX_HAVE_CEILL\n   inline long double \n   ceil(long double __x) { return ::ceill(__x); }\n #else\n@@ -317,15 +317,15 @@ namespace std\n \n   using ::cosh;\n \n-#if _GLIBCPP_HAVE_COSHF\n+#if _GLIBCXX_HAVE_COSHF\n   inline float \n   cosh(float __x) { return __gnu_cxx::__c99_binding::coshf(__x); }\n #else\n   inline float \n   cosh(float __x) { return ::cosh(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_COSHL\n+#if _GLIBCXX_HAVE_COSHL\n   inline long double \n   cosh(long double __x) { return ::coshl(__x); }\n #else\n@@ -340,15 +340,15 @@ namespace std\n \n   using ::exp;\n \n-#if _GLIBCPP_HAVE_EXPF\n+#if _GLIBCXX_HAVE_EXPF\n   inline float \n   exp(float __x) { return __gnu_cxx::__c99_binding::expf(__x); }\n #else\n   inline float \n   exp(float __x) { return ::exp(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_EXPL\n+#if _GLIBCXX_HAVE_EXPL\n   inline long double \n   exp(long double __x) { return ::expl(__x); }\n #else\n@@ -378,15 +378,15 @@ namespace std\n \n   using ::floor;\n \n-#if _GLIBCPP_HAVE_FLOORF\n+#if _GLIBCXX_HAVE_FLOORF\n   inline float \n   floor(float __x) { return __gnu_cxx::__c99_binding::floorf(__x); }\n #else\n   inline float \n   floor(float __x) { return ::floor(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_FLOORL\n+#if _GLIBCXX_HAVE_FLOORL\n   inline long double \n   floor(long double __x) { return ::floorl(__x); }\n #else\n@@ -401,7 +401,7 @@ namespace std\n   \n   using ::fmod;\n \n-#if _GLIBCPP_HAVE_FMODF\n+#if _GLIBCXX_HAVE_FMODF\n   inline float \n   fmod(float __x, float __y) { return __gnu_cxx::__c99_binding::fmodf(__x, __y); }\n #else\n@@ -410,7 +410,7 @@ namespace std\n   { return ::fmod(static_cast<double>(__x), static_cast<double>(__y)); }\n #endif\n \n-#if _GLIBCPP_HAVE_FMODL\n+#if _GLIBCXX_HAVE_FMODL\n   inline long double \n   fmod(long double __x, long double __y) { return ::fmodl(__x, __y); }\n #else\n@@ -421,15 +421,15 @@ namespace std\n \n   using ::frexp;\n \n-#if _GLIBCPP_HAVE_FREXPF\n+#if _GLIBCXX_HAVE_FREXPF\n   inline float \n   frexp(float __x, int* __exp) { return __gnu_cxx::__c99_binding::frexpf(__x, __exp); }\n #else\n   inline float \n   frexp(float __x, int* __exp) { return ::frexp(__x, __exp); }\n #endif\n \n-#if _GLIBCPP_HAVE_FREXPL\n+#if _GLIBCXX_HAVE_FREXPL\n   inline long double \n   frexp(long double __x, int* __exp) { return ::frexpl(__x, __exp); }\n #else\n@@ -445,7 +445,7 @@ namespace std\n   \n   using ::ldexp;\n \n-#if _GLIBCPP_HAVE_LDEXPF\n+#if _GLIBCXX_HAVE_LDEXPF\n   inline float \n   ldexp(float __x, int __exp) { return __gnu_cxx::__c99_binding::ldexpf(__x, __exp); }\n #else\n@@ -454,7 +454,7 @@ namespace std\n   { return ::ldexp(static_cast<double>(__x), __exp); }\n #endif\n \n-#if _GLIBCPP_HAVE_LDEXPL\n+#if _GLIBCXX_HAVE_LDEXPL\n   inline long double \n   ldexp(long double __x, int __exp) { return ::ldexpl(__x, __exp); }\n #else\n@@ -470,15 +470,15 @@ namespace std\n \n   using ::log;\n \n-#if _GLIBCPP_HAVE_LOGF\n+#if _GLIBCXX_HAVE_LOGF\n   inline float \n   log(float __x) { return __gnu_cxx::__c99_binding::logf(__x); }\n #else\n   inline float log(float __x)\n   { return ::log(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_LOGL\n+#if _GLIBCXX_HAVE_LOGL\n   inline long double \n   log(long double __x) { return ::logl(__x); }\n #else\n@@ -493,15 +493,15 @@ namespace std\n   \n   using ::log10;\n \n-#if _GLIBCPP_HAVE_LOG10F\n+#if _GLIBCXX_HAVE_LOG10F\n   inline float \n   log10(float __x) { return __gnu_cxx::__c99_binding::log10f(__x); }\n #else\n   inline float \n   log10(float __x) { return ::log10(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_LOG10L\n+#if _GLIBCXX_HAVE_LOG10L\n   inline long double \n   log10(long double __x) { return ::log10l(__x); }\n #else\n@@ -516,7 +516,7 @@ namespace std\n   \n   using ::modf;\n \n-#if _GLIBCPP_HAVE_MODFF\n+#if _GLIBCXX_HAVE_MODFF\n   inline float \n   modf(float __x, float* __iptr) { return __gnu_cxx::__c99_binding::modff(__x, __iptr); }\n #else\n@@ -530,7 +530,7 @@ namespace std\n   }\n #endif\n \n-#if _GLIBCPP_HAVE_MODFL\n+#if _GLIBCXX_HAVE_MODFL\n   inline long double \n   modf(long double __x, long double* __iptr) { return ::modfl(__x, __iptr); }\n #else\n@@ -555,7 +555,7 @@ namespace std\n \n   using ::pow;\n \n-#if _GLIBCPP_HAVE_POWF\n+#if _GLIBCXX_HAVE_POWF\n   inline float \n   pow(float __x, float __y) { return __gnu_cxx::__c99_binding::powf(__x, __y); }\n #else\n@@ -564,7 +564,7 @@ namespace std\n   { return ::pow(static_cast<double>(__x), static_cast<double>(__y)); }\n #endif\n \n-#if _GLIBCPP_HAVE_POWL\n+#if _GLIBCXX_HAVE_POWL\n   inline long double \n   pow(long double __x, long double __y) { return ::powl(__x, __y); }\n #else\n@@ -602,15 +602,15 @@ namespace std\n \n   using ::sinh;\n \n-#if _GLIBCPP_HAVE_SINHF\n+#if _GLIBCXX_HAVE_SINHF\n   inline float \n   sinh(float __x) { return __gnu_cxx::__c99_binding::sinhf(__x); }\n #else\n   inline float \n   sinh(float __x) { return ::sinh(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_SINHL\n+#if _GLIBCXX_HAVE_SINHL\n   inline long double \n   sinh(long double __x) { return ::sinhl(__x); }\n #else\n@@ -640,15 +640,15 @@ namespace std\n   \n   using ::tan;\n \n-#if _GLIBCPP_HAVE_TANF\n+#if _GLIBCXX_HAVE_TANF\n   inline float \n   tan(float __x) { return __gnu_cxx::__c99_binding::tanf(__x); }\n #else\n   inline float \n   tan(float __x) { return ::tan(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_TANL\n+#if _GLIBCXX_HAVE_TANL\n   inline long double \n   tan(long double __x) { return ::tanl(__x); }\n #else\n@@ -663,15 +663,15 @@ namespace std\n   \n   using ::tanh;\n \n-#if _GLIBCPP_HAVE_TANHF\n+#if _GLIBCXX_HAVE_TANHF\n   inline float \n   tanh(float __x) { return __gnu_cxx::__c99_binding::tanhf(__x); }\n #else\n   inline float \n   tanh(float __x) { return ::tanh(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE_TANHL\n+#if _GLIBCXX_HAVE_TANHL\n   inline long double \n   tanh(long double __x) { return ::tanhl(__x); }\n #else\n@@ -686,8 +686,8 @@ namespace std\n } \n \n \n-#if _GLIBCPP_USE_C99\n-#if !_GLIBCPP_USE_C99_FP_MACROS_DYNAMIC\n+#if _GLIBCXX_USE_C99\n+#if !_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC\n // These are possible macros imported from C99-land. For strict\n // conformance, remove possible C99-injected names from the global\n // namespace, and sequester them in the __gnu_cxx extension namespace. \n@@ -760,11 +760,11 @@ namespace __gnu_cxx\n #undef islessequal\n #undef islessgreater\n #undef isunordered\n-#endif /* _GLIBCPP_USE_C99_FP_MACROS_DYNAMIC */\n+#endif /* _GLIBCXX_USE_C99_FP_MACROS_DYNAMIC */\n #endif\n \n-#if _GLIBCPP_USE_C99\n-#if !_GLIBCPP_USE_C99_FP_MACROS_DYNAMIC\n+#if _GLIBCXX_USE_C99\n+#if !_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC\n namespace __gnu_cxx\n {\n   template<typename _Tp>\n@@ -835,10 +835,10 @@ namespace std\n   using __gnu_cxx::islessgreater;\n   using __gnu_cxx::isunordered;\n }\n-#endif /* _GLIBCPP_USE_C99_FP_MACROS_DYNAMIC */\n+#endif /* _GLIBCXX_USE_C99_FP_MACROS_DYNAMIC */\n #endif\n   \n-#ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n+#ifdef _GLIBCXX_NO_TEMPLATE_EXPORT\n #  define export\n #  include <bits/cmath.tcc>\n #endif"}, {"sha": "c5b9119e0b85ad076d89c4f2f14c6b9c8b785cd4", "filename": "libstdc++-v3/include/c_std/std_csetjmp.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_csetjmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_csetjmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_csetjmp.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -41,8 +41,8 @@\n  *  contained in the namespace @c std.\n  */\n \n-#ifndef _CPP_CSETJMP\n-#define _CPP_CSETJMP 1\n+#ifndef _CSETJMP\n+#define _CSETJMP 1\n \n #pragma GCC system_header\n "}, {"sha": "8be03f05f4cd22191f034538cb9a8723d4187ccd", "filename": "libstdc++-v3/include/c_std/std_csignal.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_csignal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_csignal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_csignal.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -41,8 +41,8 @@\n  *  contained in the namespace @c std.\n  */\n \n-#ifndef _CPP_CSIGNAL\n-#define _CPP_CSIGNAL 1\n+#ifndef _CSIGNAL\n+#define _CSIGNAL 1\n \n #pragma GCC system_header\n "}, {"sha": "52979dffa6ccd3a867a4fd3bb594c5432f18fdea", "filename": "libstdc++-v3/include/c_std/std_cstdarg.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstdarg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstdarg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstdarg.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -40,8 +40,8 @@\n  *  contained in the namespace @c std.\n  */\n \n-#ifndef _CPP_CSTDARG\n-#define _CPP_CSTDARG 1\n+#ifndef _CSTDARG\n+#define _CSTDARG 1\n \n #pragma GCC system_header\n "}, {"sha": "b7e56100196bc447cfef9cfe5ce1112d9ef41f27", "filename": "libstdc++-v3/include/c_std/std_cstddef.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstddef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstddef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstddef.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -40,8 +40,8 @@\n  *  contained in the namespace @c std.\n  */\n \n-#ifndef _CPP_CSTDDEF\n-#define _CPP_CSTDDEF 1\n+#ifndef _CSTDDEF\n+#define _CSTDDEF 1\n \n #pragma GCC system_header\n "}, {"sha": "732da5f9461b78fec6b14f32d5c2263939d2eb95", "filename": "libstdc++-v3/include/c_std/std_cstdio.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstdio.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -41,8 +41,8 @@\n  *  contained in the namespace @c std.\n  */\n \n-#ifndef _CPP_CSTDIO\n-#define _CPP_CSTDIO 1\n+#ifndef _CSTDIO\n+#define _CSTDIO 1\n \n #pragma GCC system_header\n \n@@ -142,7 +142,7 @@ namespace std\n   using ::vsprintf;\n }\n \n-#if _GLIBCPP_USE_C99\n+#if _GLIBCXX_USE_C99\n \n #undef snprintf\n #undef vfscanf\n@@ -152,7 +152,7 @@ namespace std\n \n namespace __gnu_cxx\n {\n-#if _GLIBCPP_USE_C99_CHECK || _GLIBCPP_USE_C99_DYNAMIC\n+#if _GLIBCXX_USE_C99_CHECK || _GLIBCXX_USE_C99_DYNAMIC\n   extern \"C\" int\n     (snprintf)(char * restrict, size_t, const char * restrict, ...);\n   extern \"C\" int\n@@ -163,7 +163,7 @@ namespace __gnu_cxx\n   extern \"C\" int\n     (vsscanf)(const char * restrict, const char * restrict, __gnuc_va_list);\n #endif\n-#if !_GLIBCPP_USE_C99_DYNAMIC\n+#if !_GLIBCXX_USE_C99_DYNAMIC\n   using ::snprintf;\n   using ::vfscanf;\n   using ::vscanf;"}, {"sha": "5cac120edfd5df6dee31aa60bf8946e3c3729d2f", "filename": "libstdc++-v3/include/c_std/std_cstdlib.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstdlib.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -41,8 +41,8 @@\n  *  contained in the namespace @c std.\n  */\n \n-#ifndef _CPP_CSTDLIB\n-#define _CPP_CSTDLIB 1\n+#ifndef _CSTDLIB\n+#define _CSTDLIB 1\n \n #pragma GCC system_header\n \n@@ -122,7 +122,7 @@ namespace std\n   div(long __i, long __j) { return ldiv(__i, __j); }\n } \n \n-#if _GLIBCPP_USE_C99\n+#if _GLIBCXX_USE_C99\n \n #undef _Exit\n #undef llabs\n@@ -135,13 +135,13 @@ namespace std\n \n namespace __gnu_cxx\n {\n-#if !_GLIBCPP_USE_C99_LONG_LONG_DYNAMIC\n+#if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n   using ::lldiv_t;\n #endif\n-#if _GLIBCPP_USE_C99_CHECK || _GLIBCPP_USE_C99_DYNAMIC\n+#if _GLIBCXX_USE_C99_CHECK || _GLIBCXX_USE_C99_DYNAMIC\n   extern \"C\" void (_Exit)(int);\n #endif\n-#if !_GLIBCPP_USE_C99_DYNAMIC\n+#if !_GLIBCXX_USE_C99_DYNAMIC\n   using ::_Exit;\n #endif\n \n@@ -151,7 +151,7 @@ namespace __gnu_cxx\n   inline long long \n   llabs(long long __x) { return __x >= 0 ? __x : -__x; }\n \n-#if !_GLIBCPP_USE_C99_LONG_LONG_DYNAMIC\n+#if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n   inline lldiv_t \n   div(long long __n, long long __d)\n   { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n@@ -161,14 +161,14 @@ namespace __gnu_cxx\n   { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n #endif\n \n-#if _GLIBCPP_USE_C99_LONG_LONG_CHECK || _GLIBCPP_USE_C99_LONG_LONG_DYNAMIC\n+#if _GLIBCXX_USE_C99_LONG_LONG_CHECK || _GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n   extern \"C\" long long int (atoll)(const char *);\n   extern \"C\" long long int\n     (strtoll)(const char * restrict, char ** restrict, int);\n   extern \"C\" unsigned long long int\n     (strtoull)(const char * restrict, char ** restrict, int);\n #endif\n-#if !_GLIBCPP_USE_C99_LONG_LONG_DYNAMIC\n+#if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n   using ::atoll;\n   using ::strtoll;\n   using ::strtoull;\n@@ -179,13 +179,13 @@ namespace __gnu_cxx\n \n namespace std\n {\n-#if !_GLIBCPP_USE_C99_LONG_LONG_DYNAMIC \n+#if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC \n   using __gnu_cxx::lldiv_t;\n #endif\n   using __gnu_cxx::_Exit;\n   using __gnu_cxx::abs;\n   using __gnu_cxx::llabs; \n-#if !_GLIBCPP_USE_C99_LONG_LONG_DYNAMIC \n+#if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC \n   using __gnu_cxx::div;\n   using __gnu_cxx::lldiv;\n #endif"}, {"sha": "934e491def64cf7e5469434f1e16681124b17d71", "filename": "libstdc++-v3/include/c_std/std_cstring.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstring.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -41,8 +41,8 @@\n  *  contained in the namespace @c std.\n  */\n \n-#ifndef _CPP_CSTRING\n-#define _CPP_CSTRING 1\n+#ifndef _CSTRING\n+#define _CSTRING 1\n \n #pragma GCC system_header\n "}, {"sha": "b7ed90698a23e46f7c46b5f3d7c698108d1810bc", "filename": "libstdc++-v3/include/c_std/std_ctime.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_ctime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_ctime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_ctime.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -41,8 +41,8 @@\n  *  contained in the namespace @c std.\n  */\n \n-#ifndef _CPP_CTIME\n-#define _CPP_CTIME 1\n+#ifndef _CTIME\n+#define _CTIME 1\n \n #pragma GCC system_header\n "}, {"sha": "b9e0965ce8e022efe6dac624d4d0a65f3dcc5b51", "filename": "libstdc++-v3/include/c_std/std_cwchar.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cwchar.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -41,22 +41,22 @@\n  *  contained in the namespace @c std.\n  */\n \n-#ifndef _CPP_CWCHAR\n-#define _CPP_CWCHAR 1\n+#ifndef _CWCHAR\n+#define _CWCHAR 1\n \n #pragma GCC system_header\n \n #include <bits/c++config.h>\n #include <cstddef>\n #include <ctime>\n \n-#if _GLIBCPP_HAVE_WCHAR_H\n+#if _GLIBCXX_HAVE_WCHAR_H\n #include <wchar.h>\n #endif\n \n // Need to do a bit of trickery here with mbstate_t as char_traits\n // assumes it is in wchar.h, regardless of wchar_t specializations.\n-#ifndef _GLIBCPP_HAVE_MBSTATE_T\n+#ifndef _GLIBCXX_HAVE_MBSTATE_T\n extern \"C\" \n {\n   typedef struct \n@@ -129,7 +129,7 @@ namespace std\n #undef wprintf\n #undef wscanf\n \n-#if _GLIBCPP_USE_WCHAR_T\n+#if _GLIBCXX_USE_WCHAR_T\n namespace std\n {\n   using ::wint_t;\n@@ -217,28 +217,28 @@ namespace std\n   { return wmemchr(const_cast<const wchar_t*>(__p), __c, __n); }\n }\n \n-#if _GLIBCPP_USE_C99\n+#if _GLIBCXX_USE_C99\n \n #undef wcstold\n #undef wcstoll\n #undef wcstoull\n \n namespace __gnu_cxx\n {\n-#if _GLIBCPP_USE_C99_CHECK || _GLIBCPP_USE_C99_DYNAMIC\n+#if _GLIBCXX_USE_C99_CHECK || _GLIBCXX_USE_C99_DYNAMIC\n   extern \"C\" long double\n     (wcstold)(const wchar_t * restrict, wchar_t ** restrict);\n #endif\n-#if !_GLIBCPP_USE_C99_DYNAMIC\n+#if !_GLIBCXX_USE_C99_DYNAMIC\n   using ::wcstold;\n #endif\n-#if _GLIBCPP_USE_C99_LONG_LONG_CHECK || _GLIBCPP_USE_C99_LONG_LONG_DYNAMIC\n+#if _GLIBCXX_USE_C99_LONG_LONG_CHECK || _GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n   extern \"C\" long long int\n     (wcstoll)(const wchar_t * restrict, wchar_t ** restrict, int);\n   extern \"C\" unsigned long long int\n     (wcstoull)(const wchar_t * restrict, wchar_t ** restrict, int);\n #endif\n-#if !_GLIBCPP_USE_C99_LONG_LONG_DYNAMIC\n+#if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n   using ::wcstoll;\n   using ::wcstoull;\n #endif\n@@ -252,6 +252,6 @@ namespace std\n }\n #endif\n \n-#endif //_GLIBCPP_USE_WCHAR_T\n+#endif //_GLIBCXX_USE_WCHAR_T\n \n #endif "}, {"sha": "f7639ed38430272f55352a886da6dfd3ef70b8bd", "filename": "libstdc++-v3/include/c_std/std_cwctype.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cwctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cwctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cwctype.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -41,14 +41,14 @@\n  *  contained in the namespace @c std.\n  */\n \n-#ifndef _CPP_CWCTYPE\n-#define _CPP_CWCTYPE 1\n+#ifndef _CWCTYPE\n+#define _CWCTYPE 1\n \n #pragma GCC system_header\n \n #include <bits/c++config.h>\n \n-#if _GLIBCPP_HAVE_WCTYPE_H\n+#if _GLIBCXX_HAVE_WCTYPE_H\n #include <wctype.h>\n #endif\n \n@@ -73,7 +73,7 @@\n #undef wctrans\n #undef wctype\n \n-#if _GLIBCPP_USE_WCHAR_T\n+#if _GLIBCXX_USE_WCHAR_T\n namespace std\n {\n   using ::wint_t; \t  // cwchar\n@@ -101,6 +101,6 @@ namespace std\n   using ::wctrans;\n   using ::wctype;\n }\n-#endif //_GLIBCPP_USE_WCHAR_T\n+#endif //_GLIBCXX_USE_WCHAR_T\n \n #endif "}, {"sha": "9cccec871ba527c7f8521eee774f65efbf106009", "filename": "libstdc++-v3/include/ext/algorithm", "status": "modified", "additions": 31, "deletions": 30, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -60,9 +60,10 @@\n  */\n \n #ifndef _EXT_ALGORITHM\n-#define _EXT_ALGORITHM\n+#define _EXT_ALGORITHM 1\n \n #pragma GCC system_header\n+\n #include <algorithm>\n \n namespace __gnu_cxx\n@@ -121,8 +122,8 @@ namespace __gnu_cxx\n     copy_n(_InputIterator __first, _Size __count, _OutputIterator __result)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator,\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n \t    typename iterator_traits<_InputIterator>::value_type>)\n \n       return __copy_n(__first, __count, __result,\n@@ -201,11 +202,11 @@ namespace __gnu_cxx\n \t\t\t\t _InputIterator2 __first2, _InputIterator2 __last2)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>)\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n+      __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<\n+      __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_InputIterator2>::value_type>)\n \n       return __lexicographical_compare_3way(__first1, __last1, __first2, __last2);\n@@ -221,10 +222,10 @@ namespace __gnu_cxx\n \t  _Size& __n)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n-      __glibcpp_function_requires(_EqualityComparableConcept<\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_EqualityComparableConcept<\n \t    typename iterator_traits<_InputIterator>::value_type >)\n-      __glibcpp_function_requires(_EqualityComparableConcept<_Tp>)\n+      __glibcxx_function_requires(_EqualityComparableConcept<_Tp>)\n       for ( ; __first != __last; ++__first)\n \tif (*__first == __value)\n \t  ++__n;\n@@ -237,8 +238,8 @@ namespace __gnu_cxx\n \t     _Size& __n)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n-      __glibcpp_function_requires(_UnaryPredicateConcept<_Predicate,\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,\n \t    typename iterator_traits<_InputIterator>::value_type>)\n       for ( ; __first != __last; ++__first)\n \tif (__pred(*__first))\n@@ -258,8 +259,8 @@ namespace __gnu_cxx\n                     _OutputIterator __out, const _Distance __n)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator,\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n \t\ttypename iterator_traits<_ForwardIterator>::value_type>)\n \n       _Distance __remaining = std::distance(__first, __last);\n@@ -291,10 +292,10 @@ namespace __gnu_cxx\n \t\t   _RandomNumberGenerator& __rand)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator,\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n \t\ttypename iterator_traits<_ForwardIterator>::value_type>)\n-      __glibcpp_function_requires(_UnaryFunctionConcept<\n+      __glibcxx_function_requires(_UnaryFunctionConcept<\n \t\t_RandomNumberGenerator, _Distance, _Distance>)\n \n       _Distance __remaining = std::distance(__first, __last);\n@@ -344,7 +345,7 @@ namespace __gnu_cxx\n \t\t    const _Distance __n)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_UnaryFunctionConcept<\n+      __glibcxx_function_requires(_UnaryFunctionConcept<\n \t    _RandomNumberGenerator, _Distance, _Distance>)\n \n       _Distance __m = 0;\n@@ -374,8 +375,8 @@ namespace __gnu_cxx\n \t\t  _RandomAccessIterator __out_first, _RandomAccessIterator __out_last) \n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n-      __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n \n       return __random_sample(__first, __last,\n@@ -395,8 +396,8 @@ namespace __gnu_cxx\n \t\t  _RandomNumberGenerator& __rand) \n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n-      __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n \n       return __random_sample(__first, __last,\n@@ -448,8 +449,8 @@ namespace __gnu_cxx\n     is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_RandomAccessIteratorConcept<_RandomAccessIterator>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<\n+      __glibcxx_function_requires(_RandomAccessIteratorConcept<_RandomAccessIterator>)\n+      __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n \n       return __is_heap(__first, __last - __first);\n@@ -466,8 +467,8 @@ namespace __gnu_cxx\n \t    _StrictWeakOrdering __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_RandomAccessIteratorConcept<_RandomAccessIterator>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_StrictWeakOrdering,\n+      __glibcxx_function_requires(_RandomAccessIteratorConcept<_RandomAccessIterator>)\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_StrictWeakOrdering,\n \t    typename iterator_traits<_RandomAccessIterator>::value_type, \n \t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n \n@@ -488,8 +489,8 @@ namespace __gnu_cxx\n     is_sorted(_ForwardIterator __first, _ForwardIterator __last)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcpp_function_requires(_LessThanComparableConcept<\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n \n       if (__first == __last)\n@@ -514,8 +515,8 @@ namespace __gnu_cxx\n     is_sorted(_ForwardIterator __first, _ForwardIterator __last, _StrictWeakOrdering __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_StrictWeakOrdering,\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_StrictWeakOrdering,\n \t    typename iterator_traits<_ForwardIterator>::value_type, \n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n "}, {"sha": "a2b3d6705703881f25270299a6990d4fdbb0bcb8", "filename": "libstdc++-v3/include/ext/enc_filebuf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fenc_filebuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fenc_filebuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fenc_filebuf.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -53,7 +53,7 @@ namespace __gnu_cxx\n \t// Set state type to something useful.\n \t// Something more than copyconstructible is needed here, so\n \t// require copyconstructible + assignment operator.\n-\t__glibcpp_class_requires(state_type, _SGIAssignableConcept);\n+\t__glibcxx_class_requires(state_type, _SGIAssignableConcept);\n \t_M_state_cur = __state;\n \t_M_state_cur._M_init();\n       };"}, {"sha": "0de6b8d61c2724faa7e38ed4adfadecc5b8361d0", "filename": "libstdc++-v3/include/ext/hash_map", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_map?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -246,10 +246,10 @@ template <class _Key, class _Tp, class _HashFcn, class _EqualKey, class _Alloc>\n class hash_multimap\n {\n   // concept requirements\n-  __glibcpp_class_requires(_Key, _SGIAssignableConcept)\n-  __glibcpp_class_requires(_Tp, _SGIAssignableConcept)\n-  __glibcpp_class_requires3(_HashFcn, size_t, _Key, _UnaryFunctionConcept);\n-  __glibcpp_class_requires3(_EqualKey, _Key, _Key, _BinaryPredicateConcept);\n+  __glibcxx_class_requires(_Key, _SGIAssignableConcept)\n+  __glibcxx_class_requires(_Tp, _SGIAssignableConcept)\n+  __glibcxx_class_requires3(_HashFcn, size_t, _Key, _UnaryFunctionConcept);\n+  __glibcxx_class_requires3(_EqualKey, _Key, _Key, _BinaryPredicateConcept);\n \n private:\n   typedef hashtable<pair<const _Key, _Tp>, _Key, _HashFcn,"}, {"sha": "caf773fb9fc1937ee65d3db5b8a78460f7da4c49", "filename": "libstdc++-v3/include/ext/hash_set", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_set?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -93,9 +93,9 @@ template <class _Value, class _HashFcn, class _EqualKey, class _Alloc>\n class hash_set\n {\n   // concept requirements\n-  __glibcpp_class_requires(_Value, _SGIAssignableConcept)\n-  __glibcpp_class_requires3(_HashFcn, size_t, _Value, _UnaryFunctionConcept);\n-  __glibcpp_class_requires3(_EqualKey, _Value, _Value, _BinaryPredicateConcept);\n+  __glibcxx_class_requires(_Value, _SGIAssignableConcept)\n+  __glibcxx_class_requires3(_HashFcn, size_t, _Value, _UnaryFunctionConcept);\n+  __glibcxx_class_requires3(_EqualKey, _Value, _Value, _BinaryPredicateConcept);\n \n private:\n   typedef hashtable<_Value, _Value, _HashFcn, _Identity<_Value>, \n@@ -249,9 +249,9 @@ template <class _Value, class _HashFcn, class _EqualKey, class _Alloc>\n class hash_multiset\n {\n   // concept requirements\n-  __glibcpp_class_requires(_Value, _SGIAssignableConcept)\n-  __glibcpp_class_requires3(_HashFcn, size_t, _Value, _UnaryFunctionConcept);\n-  __glibcpp_class_requires3(_EqualKey, _Value, _Value, _BinaryPredicateConcept);\n+  __glibcxx_class_requires(_Value, _SGIAssignableConcept)\n+  __glibcxx_class_requires3(_HashFcn, size_t, _Value, _UnaryFunctionConcept);\n+  __glibcxx_class_requires3(_EqualKey, _Value, _Value, _BinaryPredicateConcept);\n \n private:\n   typedef hashtable<_Value, _Value, _HashFcn, _Identity<_Value>, "}, {"sha": "e492e680f17bc67dd4cce8d9a04794e382f4a6cb", "filename": "libstdc++-v3/include/ext/iterator", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fiterator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fiterator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fiterator?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -80,7 +80,7 @@ namespace __gnu_cxx\n \t       _Distance& __n, std::input_iterator_tag)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n       while (__first != __last) { ++__first; ++__n; }\n     }\n \n@@ -90,7 +90,7 @@ namespace __gnu_cxx\n \t       _Distance& __n, std::random_access_iterator_tag)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_RandomAccessIteratorConcept<_RandomAccessIterator>)\n+      __glibcxx_function_requires(_RandomAccessIteratorConcept<_RandomAccessIterator>)\n       __n += __last - __first;\n     }\n "}, {"sha": "a596d99901548935a96c8c5b44946a042d4509aa", "filename": "libstdc++-v3/include/ext/numeric", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -135,8 +135,8 @@ namespace __gnu_cxx\n     iota(_ForwardIter __first, _ForwardIter __last, _Tp __value)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter>)\n-      __glibcpp_function_requires(_ConvertibleConcept<_Tp,\n+      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter>)\n+      __glibcxx_function_requires(_ConvertibleConcept<_Tp,\n \t    typename std::iterator_traits<_ForwardIter>::value_type>)\n \n       while (__first != __last)"}, {"sha": "9d1fc9b719f7c7ca3fb2419d79b51b0555713ac0", "filename": "libstdc++-v3/include/ext/pool_allocator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -284,7 +284,7 @@ namespace __gnu_cxx\n       // to efficiently support threading found in basic_string.h.\n       if (_S_force_new == 0)\n \t{\n-\t  if (getenv(\"GLIBCPP_FORCE_NEW\"))\n+\t  if (getenv(\"GLIBCXX_FORCE_NEW\"))\n \t    __atomic_add(&_S_force_new, 1);\n \t  else\n \t    __atomic_add(&_S_force_new, -1);\n@@ -356,7 +356,7 @@ namespace __gnu_cxx\n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.\n   // NB: This syntax is a GNU extension.\n-#if _GLIBCPP_EXTERN_TEMPLATE\n+#if _GLIBCXX_EXTERN_TEMPLATE\n   extern template class __pool_alloc<true, 0>;\n #endif\n } // namespace __gnu_cxx"}, {"sha": "9bcfb716772b3e12c8270dd12063a36e69e0300c", "filename": "libstdc++-v3/include/ext/slist", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -304,7 +304,7 @@ template <class _Tp, class _Alloc = allocator<_Tp> >\n class slist : private _Slist_base<_Tp,_Alloc>\n {\n   // concept requirements\n-  __glibcpp_class_requires(_Tp, _SGIAssignableConcept)\n+  __glibcxx_class_requires(_Tp, _SGIAssignableConcept)\n \n private:\n   typedef _Slist_base<_Tp,_Alloc> _Base;"}, {"sha": "64ec2d973401feab2303d0bb58359196a98e4ce1", "filename": "libstdc++-v3/include/ext/stdio_sync_filebuf.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_sync_filebuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_sync_filebuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_sync_filebuf.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -39,16 +39,16 @@\n #include <fstream>\n #include <unistd.h>\n \n-#if defined(_GLIBCPP_HAVE_S_ISREG) || defined(_GLIBCPP_HAVE_S_IFREG)\n+#if defined(_GLIBCXX_HAVE_S_ISREG) || defined(_GLIBCXX_HAVE_S_IFREG)\n # include <sys/stat.h>\n-# ifdef _GLIBCPP_HAVE_S_ISREG\n-#  define _GLIBCPP_ISREG(x) S_ISREG(x)\n+# ifdef _GLIBCXX_HAVE_S_ISREG\n+#  define _GLIBCXX_ISREG(x) S_ISREG(x)\n # else\n-#  define _GLIBCPP_ISREG(x) (((x) & S_IFMT) == S_IFREG)\n+#  define _GLIBCXX_ISREG(x) (((x) & S_IFMT) == S_IFREG)\n # endif\n #endif\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n #include <cwchar>\n #endif\n \n@@ -103,11 +103,11 @@ namespace __gnu_cxx\n       virtual std::streamsize\n       showmanyc()\n       { \n-#if defined(_GLIBCPP_HAVE_S_ISREG) || defined(_GLIBCPP_HAVE_S_IFREG)\n+#if defined(_GLIBCXX_HAVE_S_ISREG) || defined(_GLIBCXX_HAVE_S_IFREG)\n \t// Regular files.\n \tstruct stat __buffer;\n \tint __ret = fstat(fileno(_M_file), &__buffer);\n-\tif (!__ret && _GLIBCPP_ISREG(__buffer.st_mode))\n+\tif (!__ret && _GLIBCXX_ISREG(__buffer.st_mode))\n \t  return __buffer.st_size - ftell(_M_file);\n #endif\n \treturn 0; \n@@ -186,7 +186,7 @@ namespace __gnu_cxx\n     stdio_sync_filebuf<char>::xsputn(const char* __s, std::streamsize __n)\n     { return std::fwrite(__s, 1, __n, _M_file); }\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n     inline stdio_sync_filebuf<wchar_t>::int_type\n     stdio_sync_filebuf<wchar_t>::syncgetc()\n@@ -236,9 +236,9 @@ namespace __gnu_cxx\n     }\n #endif\n \n-#if _GLIBCPP_EXTERN_TEMPLATE\n+#if _GLIBCXX_EXTERN_TEMPLATE\n   extern template class stdio_sync_filebuf<char>;\n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   extern template class stdio_sync_filebuf<wchar_t>;\n #endif\n #endif"}, {"sha": "c7837b4fdb5316a9a3365ef3e8a31e2132092e03", "filename": "libstdc++-v3/include/std/std_algorithm.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_algorithm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_algorithm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_algorithm.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,8 +58,8 @@\n  *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n  */\n \n-#ifndef _CPP_ALGORITHM\n-#define _CPP_ALGORITHM 1\n+#ifndef _ALGORITHM\n+#define _ALGORITHM 1\n \n #pragma GCC system_header\n \n@@ -68,7 +68,7 @@\n #include <bits/stl_uninitialized.h>\n #include <bits/stl_algo.h>\n \n-#endif /* _CPP_ALGORITHM */\n+#endif /* _ALGORITHM */\n \n // Local Variables:\n // mode:C++"}, {"sha": "f3abc8e3ad82887d5cfdaed68ccf59860d873189", "filename": "libstdc++-v3/include/std/std_bitset.h", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -45,8 +45,8 @@\n  *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n  */\n \n-#ifndef _GLIBCPP_BITSET_H\n-#define _GLIBCPP_BITSET_H\n+#ifndef _BITSET\n+#define _BITSET 1\n \n #pragma GCC system_header\n \n@@ -60,9 +60,9 @@\n #include <istream>     // for istream (operator>>)\n \n \n-#define _GLIBCPP_BITSET_BITS_PER_WORD  numeric_limits<unsigned long>::digits\n-#define _GLIBCPP_BITSET_WORDS(__n) \\\n- ((__n) < 1 ? 0 : ((__n) + _GLIBCPP_BITSET_BITS_PER_WORD - 1)/_GLIBCPP_BITSET_BITS_PER_WORD)\n+#define _GLIBCXX_BITSET_BITS_PER_WORD  numeric_limits<unsigned long>::digits\n+#define _GLIBCXX_BITSET_WORDS(__n) \\\n+ ((__n) < 1 ? 0 : ((__n) + _GLIBCXX_BITSET_BITS_PER_WORD - 1)/_GLIBCXX_BITSET_BITS_PER_WORD)\n \n namespace std\n {\n@@ -91,15 +91,15 @@ namespace std\n \n       static size_t\n       _S_whichword(size_t __pos )\n-      { return __pos / _GLIBCPP_BITSET_BITS_PER_WORD; }\n+      { return __pos / _GLIBCXX_BITSET_BITS_PER_WORD; }\n \n       static size_t\n       _S_whichbyte(size_t __pos )\n-      { return (__pos % _GLIBCPP_BITSET_BITS_PER_WORD) / __CHAR_BIT__; }\n+      { return (__pos % _GLIBCXX_BITSET_BITS_PER_WORD) / __CHAR_BIT__; }\n \n       static size_t\n       _S_whichbit(size_t __pos )\n-      { return __pos % _GLIBCPP_BITSET_BITS_PER_WORD; }\n+      { return __pos % _GLIBCXX_BITSET_BITS_PER_WORD; }\n \n       static _WordT\n       _S_maskbit(size_t __pos )\n@@ -213,15 +213,15 @@ namespace std\n     {\n       if (__builtin_expect(__shift != 0, 1))\n \t{\n-\t  const size_t __wshift = __shift / _GLIBCPP_BITSET_BITS_PER_WORD;\n-\t  const size_t __offset = __shift % _GLIBCPP_BITSET_BITS_PER_WORD;\n+\t  const size_t __wshift = __shift / _GLIBCXX_BITSET_BITS_PER_WORD;\n+\t  const size_t __offset = __shift % _GLIBCXX_BITSET_BITS_PER_WORD;\n \n \t  if (__offset == 0)\n \t    for (size_t __n = _Nw - 1; __n >= __wshift; --__n)\n \t      _M_w[__n] = _M_w[__n - __wshift];\n \t  else\n \t    {\n-\t      const size_t __sub_offset = _GLIBCPP_BITSET_BITS_PER_WORD - __offset;\n+\t      const size_t __sub_offset = _GLIBCXX_BITSET_BITS_PER_WORD - __offset;\n \t      for (size_t __n = _Nw - 1; __n > __wshift; --__n)\n \t\t_M_w[__n] = (_M_w[__n - __wshift] << __offset) |\n \t\t  (_M_w[__n - __wshift - 1] >> __sub_offset);\n@@ -238,16 +238,16 @@ namespace std\n     {\n       if (__builtin_expect(__shift != 0, 1))\n \t{\n-\t  const size_t __wshift = __shift / _GLIBCPP_BITSET_BITS_PER_WORD;\n-\t  const size_t __offset = __shift % _GLIBCPP_BITSET_BITS_PER_WORD;\n+\t  const size_t __wshift = __shift / _GLIBCXX_BITSET_BITS_PER_WORD;\n+\t  const size_t __offset = __shift % _GLIBCXX_BITSET_BITS_PER_WORD;\n \t  const size_t __limit = _Nw - __wshift - 1;\n \n \t  if (__offset == 0)\n \t    for (size_t __n = 0; __n <= __limit; ++__n)\n \t      _M_w[__n] = _M_w[__n + __wshift];\n \t  else\n \t    {\n-\t      const size_t __sub_offset = _GLIBCPP_BITSET_BITS_PER_WORD - __offset;\n+\t      const size_t __sub_offset = _GLIBCXX_BITSET_BITS_PER_WORD - __offset;\n \t      for (size_t __n = 0; __n < __limit; ++__n)\n \t\t_M_w[__n] = (_M_w[__n + __wshift] >> __offset) |\n \t\t  (_M_w[__n + __wshift + 1] << __sub_offset);\n@@ -276,7 +276,7 @@ namespace std\n \t{\n \t  _WordT __thisword = _M_w[__i];\n \t  if (__thisword != static_cast<_WordT>(0))\n-\t    return __i * _GLIBCPP_BITSET_BITS_PER_WORD\n+\t    return __i * _GLIBCXX_BITSET_BITS_PER_WORD\n \t      + __builtin_ctzl(__thisword);\n \t}\n       // not found, so return an indication of failure.\n@@ -291,7 +291,7 @@ namespace std\n       ++__prev;\n \n       // check out of bounds\n-      if ( __prev >= _Nw * _GLIBCPP_BITSET_BITS_PER_WORD )\n+      if ( __prev >= _Nw * _GLIBCXX_BITSET_BITS_PER_WORD )\n \treturn __not_found;\n \n       // search first word\n@@ -302,7 +302,7 @@ namespace std\n       __thisword >>= __prev + 1;\n \n       if (__thisword != static_cast<_WordT>(0))\n-\treturn __i * _GLIBCPP_BITSET_BITS_PER_WORD\n+\treturn __i * _GLIBCXX_BITSET_BITS_PER_WORD\n \t  + __builtin_ctzl(__thisword);\n \n       // check subsequent words\n@@ -311,7 +311,7 @@ namespace std\n \t{\n \t  __thisword = _M_w[__i];\n \t  if (__thisword != static_cast<_WordT>(0))\n-\t    return __i * _GLIBCPP_BITSET_BITS_PER_WORD\n+\t    return __i * _GLIBCXX_BITSET_BITS_PER_WORD\n \t      + __builtin_ctzl(__thisword);\n \t}\n       // not found, so return an indication of failure.\n@@ -337,15 +337,15 @@ namespace std\n \n       static size_t\n       _S_whichword(size_t __pos )\n-      { return __pos / _GLIBCPP_BITSET_BITS_PER_WORD; }\n+      { return __pos / _GLIBCXX_BITSET_BITS_PER_WORD; }\n \n       static size_t\n       _S_whichbyte(size_t __pos )\n-      { return (__pos % _GLIBCPP_BITSET_BITS_PER_WORD) / __CHAR_BIT__; }\n+      { return (__pos % _GLIBCXX_BITSET_BITS_PER_WORD) / __CHAR_BIT__; }\n \n       static size_t\n       _S_whichbit(size_t __pos )\n-      {  return __pos % _GLIBCPP_BITSET_BITS_PER_WORD; }\n+      {  return __pos % _GLIBCXX_BITSET_BITS_PER_WORD; }\n \n       static _WordT\n       _S_maskbit(size_t __pos )\n@@ -414,7 +414,7 @@ namespace std\n       _M_do_find_next(size_t __prev, size_t __not_found) const\n       {\n \t++__prev;\n-\tif (__prev >= ((size_t) _GLIBCPP_BITSET_BITS_PER_WORD))\n+\tif (__prev >= ((size_t) _GLIBCXX_BITSET_BITS_PER_WORD))\n \t  return __not_found;\n \n \t_WordT __x = _M_w >> __prev;\n@@ -443,15 +443,15 @@ namespace std\n \n       static size_t\n       _S_whichword(size_t __pos )\n-      { return __pos / _GLIBCPP_BITSET_BITS_PER_WORD; }\n+      { return __pos / _GLIBCXX_BITSET_BITS_PER_WORD; }\n \n       static size_t\n       _S_whichbyte(size_t __pos )\n-      { return (__pos % _GLIBCPP_BITSET_BITS_PER_WORD) / __CHAR_BIT__; }\n+      { return (__pos % _GLIBCXX_BITSET_BITS_PER_WORD) / __CHAR_BIT__; }\n \n       static size_t\n       _S_whichbit(size_t __pos )\n-      {  return __pos % _GLIBCPP_BITSET_BITS_PER_WORD; }\n+      {  return __pos % _GLIBCXX_BITSET_BITS_PER_WORD; }\n \n       static _WordT\n       _S_maskbit(size_t __pos )\n@@ -601,16 +601,16 @@ namespace std\n    *  @endif\n   */\n   template<size_t _Nb>\n-    class bitset : private _Base_bitset<_GLIBCPP_BITSET_WORDS(_Nb)>\n+    class bitset : private _Base_bitset<_GLIBCXX_BITSET_WORDS(_Nb)>\n   {\n   private:\n-    typedef _Base_bitset<_GLIBCPP_BITSET_WORDS(_Nb)> _Base;\n+    typedef _Base_bitset<_GLIBCXX_BITSET_WORDS(_Nb)> _Base;\n     typedef unsigned long _WordT;\n \n     void\n     _M_do_sanitize()\n     {\n-      _Sanitize<_Nb%_GLIBCPP_BITSET_BITS_PER_WORD>::\n+      _Sanitize<_Nb%_GLIBCXX_BITSET_BITS_PER_WORD>::\n           _S_do_sanitize(this->_M_hiword());\n     }\n \n@@ -930,7 +930,7 @@ namespace std\n      *         as required by DR 11 to the standard.\n      *\n      *  @if maint\n-     *  _GLIBCPP_RESOLVE_LIB_DEFECTS Note that this implementation already\n+     *  _GLIBCXX_RESOLVE_LIB_DEFECTS Note that this implementation already\n      *  resolves DR 11 (items 1 and 2), but does not do the range-checking\n      *  required by that DR's resolution.  -pme\n      *  The DR has since been changed:  range-checking is a precondition\n@@ -1209,7 +1209,7 @@ namespace std\n   //@}\n } // namespace std\n \n-#undef _GLIBCPP_BITSET_WORDS\n-#undef _GLIBCPP_BITSET_BITS_PER_WORD\n+#undef _GLIBCXX_BITSET_WORDS\n+#undef _GLIBCXX_BITSET_BITS_PER_WORD\n \n-#endif /* _GLIBCPP_BITSET_H */\n+#endif /* _BITSET */"}, {"sha": "97d764df96bc2cd69428f9cacc3f60dbdfb4bc83", "filename": "libstdc++-v3/include/std/std_complex.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_complex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_complex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_complex.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -40,8 +40,8 @@\n  *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n  */\n \n-#ifndef _CPP_COMPLEX\n-#define _CPP_COMPLEX\t1\n+#ifndef _COMPLEX\n+#define _COMPLEX 1\n \n #pragma GCC system_header\n \n@@ -456,7 +456,7 @@ namespace std\n     inline _Tp\n     norm(const complex<_Tp>& __z)\n     {\n-      return _Norm_helper<__is_floating<_Tp>::_M_type && !_GLIBCPP_FAST_MATH>::_S_do_it(__z);\n+      return _Norm_helper<__is_floating<_Tp>::_M_type && !_GLIBCXX_FAST_MATH>::_S_do_it(__z);\n     }\n \n   template<typename _Tp>\n@@ -599,7 +599,7 @@ namespace std\n     typedef float value_type;\n     \n     complex(float = 0.0f, float = 0.0f);\n-#ifdef _GLIBCPP_BUGGY_COMPLEX\n+#ifdef _GLIBCXX_BUGGY_COMPLEX\n     complex(const complex& __z) : _M_value(__z._M_value) { }\n #endif\n     explicit complex(const complex<double>&);\n@@ -746,7 +746,7 @@ namespace std\n     typedef double value_type;\n \n     complex(double  =0.0, double =0.0);\n-#ifdef _GLIBCPP_BUGGY_COMPLEX\n+#ifdef _GLIBCXX_BUGGY_COMPLEX\n     complex(const complex& __z) : _M_value(__z._M_value) { }\n #endif\n     complex(const complex<float>&);\n@@ -892,7 +892,7 @@ namespace std\n     typedef long double value_type;\n \n     complex(long double = 0.0L, long double = 0.0L);\n-#ifdef _GLIBCPP_BUGGY_COMPLEX\n+#ifdef _GLIBCXX_BUGGY_COMPLEX\n     complex(const complex& __z) : _M_value(__z._M_value) { }\n #endif\n     complex(const complex<float>&);\n@@ -1062,4 +1062,4 @@ namespace std\n   : _M_value(_ComplexT(__z._M_value)) { }\n } // namespace std\n \n-#endif\t/* _CPP_COMPLEX */\n+#endif\t/* _COMPLEX */"}, {"sha": "588c7c5576fd31d63d01e0a7e13dccabd712e573", "filename": "libstdc++-v3/include/std/std_deque.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_deque.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,8 +58,8 @@\n  *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n  */\n \n-#ifndef _CPP_DEQUE\n-#define _CPP_DEQUE 1\n+#ifndef _DEQUE\n+#define _DEQUE 1\n \n #pragma GCC system_header\n \n@@ -70,9 +70,9 @@\n #include <bits/stl_uninitialized.h>\n #include <bits/stl_deque.h>\n \n-#ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n+#ifdef _GLIBCXX_NO_TEMPLATE_EXPORT\n #  include <bits/deque.tcc>\n #endif\n \n-#endif /* _CPP_DEQUE */\n+#endif /* _DEQUE */\n "}, {"sha": "2b2a88deebaadc81541cf607f750a109b51a9a73", "filename": "libstdc++-v3/include/std/std_fstream.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -37,8 +37,8 @@\n  *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n  */\n \n-#ifndef _CPP_FSTREAM\n-#define _CPP_FSTREAM\t1\n+#ifndef _FSTREAM\n+#define _FSTREAM 1\n \n #pragma GCC system_header\n \n@@ -808,10 +808,10 @@ namespace std\n     };\n } // namespace std\n \n-#ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n+#ifdef _GLIBCXX_NO_TEMPLATE_EXPORT\n # define export\n #endif\n-#ifdef  _GLIBCPP_FULLY_COMPLIANT_HEADERS\n+#ifdef  _GLIBCXX_FULLY_COMPLIANT_HEADERS\n # include <bits/fstream.tcc>\n #endif\n "}, {"sha": "0d438589922f2c3027a4ca194e90342b3a622f78", "filename": "libstdc++-v3/include/std/std_functional.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_functional.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_functional.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_functional.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -46,15 +46,15 @@\n  *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n  */\n \n-#ifndef _CPP_FUNCTIONAL\n-#define _CPP_FUNCTIONAL 1\n+#ifndef _FUNCTIONAL\n+#define _FUNCTIONAL 1\n \n #pragma GCC system_header\n #include <bits/c++config.h>\n #include <cstddef>\n #include <bits/stl_function.h>\n \n-#endif /* _CPP_FUNCTIONAL */\n+#endif /* _FUNCTIONAL */\n \n // Local Variables:\n // mode:C++"}, {"sha": "3adb0dd2bf281a56dbdcb10356befbc211c64020", "filename": "libstdc++-v3/include/std/std_iomanip.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iomanip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iomanip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iomanip.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -37,8 +37,8 @@\n  *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n  */\n \n-#ifndef _CPP_IOMANIP\n-#define _CPP_IOMANIP 1\n+#ifndef _IOMANIP\n+#define _IOMANIP 1\n \n #pragma GCC system_header\n \n@@ -266,7 +266,7 @@ namespace std\n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.  \n   // NB:  This syntax is a GNU extension.\n-#if _GLIBCPP_EXTERN_TEMPLATE\n+#if _GLIBCXX_EXTERN_TEMPLATE\n   extern template ostream& operator<<(ostream&, _Setfill<char>);\n   extern template ostream& operator<<(ostream&, _Setiosflags);\n   extern template ostream& operator<<(ostream&, _Resetiosflags);\n@@ -280,7 +280,7 @@ namespace std\n   extern template istream& operator>>(istream&, _Setprecision);\n   extern template istream& operator>>(istream&, _Setw);\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   extern template wostream& operator<<(wostream&, _Setfill<wchar_t>);\n   extern template wostream& operator<<(wostream&, _Setiosflags);\n   extern template wostream& operator<<(wostream&, _Resetiosflags);"}, {"sha": "76d10d759ae540beeab8287fffdf7ba4ecf1b827", "filename": "libstdc++-v3/include/std/std_ios.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ios.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -36,8 +36,8 @@\n  *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n  */\n \n-#ifndef _CPP_IOS\n-#define _CPP_IOS\t1\n+#ifndef _IOS\n+#define _IOS 1\n \n #pragma GCC system_header\n \n@@ -50,5 +50,5 @@\n #include <streambuf> \n #include <bits/basic_ios.h>\n \n-#endif\t/* _CPP_IOS */\n+#endif\t/* _IOS */\n "}, {"sha": "a4877ef1677e8f68d5d032d9e12d7c02eb2ad5ba", "filename": "libstdc++-v3/include/std/std_iosfwd.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iosfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iosfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iosfwd.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -37,8 +37,8 @@\n  *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n  */\n \n-#ifndef _CPP_IOSFWD\n-#define _CPP_IOSFWD 1\n+#ifndef _IOSFWD\n+#define _IOSFWD 1\n \n #pragma GCC system_header\n \n@@ -100,7 +100,7 @@ namespace std\n   template<typename _CharT, typename _Traits = char_traits<_CharT> >\n     class ostreambuf_iterator;\n \n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // Not included.   (??? Apparently no LWG number?)\n   class ios_base; \n #endif\n@@ -147,7 +147,7 @@ namespace std\n   typedef basic_ofstream<char> \t\tofstream;\t///< @isiosfwd\n   typedef basic_fstream<char> \t\tfstream;\t///< @isiosfwd\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   typedef basic_ios<wchar_t> \t\twios;\t\t///< @isiosfwd\n   typedef basic_streambuf<wchar_t> \twstreambuf;\t///< @isiosfwd\n   typedef basic_istream<wchar_t> \twistream;\t///< @isiosfwd"}, {"sha": "4b025f7287c13a10e6b77a4df79e9ba8e1d3287d", "filename": "libstdc++-v3/include/std/std_iostream.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iostream.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -36,8 +36,8 @@\n  *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n  */\n \n-#ifndef _CPP_IOSTREAM\n-#define _CPP_IOSTREAM\t1\n+#ifndef _IOSTREAM\n+#define _IOSTREAM 1\n \n #pragma GCC system_header\n \n@@ -65,7 +65,7 @@ namespace std\n   extern ostream cerr;\t\t///< Linked to standard error (unbuffered)\n   extern ostream clog;\t\t///< Linked to standard error (buffered)\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   extern wistream wcin;\t\t///< Linked to standard input\n   extern wostream wcout;\t///< Linked to standard output\n   extern wostream wcerr;\t///< Linked to standard error (unbuffered)"}, {"sha": "a8621f6c15fa6521e735200d1e0b7ff753c09732", "filename": "libstdc++-v3/include/std/std_istream.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_istream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_istream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_istream.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -37,8 +37,8 @@\n  *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n  */\n \n-#ifndef _CPP_ISTREAM\n-#define _CPP_ISTREAM\t1\n+#ifndef _ISTREAM\n+#define _ISTREAM 1\n \n #pragma GCC system_header\n \n@@ -187,7 +187,7 @@ namespace std\n       __istream_type& \n       operator>>(unsigned long& __n);\n \n-#ifdef _GLIBCPP_USE_LONG_LONG\n+#ifdef _GLIBCXX_USE_LONG_LONG\n       __istream_type& \n       operator>>(long long& __n);\n \n@@ -705,7 +705,7 @@ namespace std\n       public basic_ostream<_CharT, _Traits>\n     {\n     public:\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n // 271. basic_iostream missing typedefs\n       // Types (inherited):\n       typedef _CharT                     \t\tchar_type;\n@@ -768,11 +768,11 @@ namespace std\n     ws(basic_istream<_CharT, _Traits>& __is);\n } // namespace std\n \n-#ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n+#ifdef _GLIBCXX_NO_TEMPLATE_EXPORT\n # define export\n #endif\n-#ifdef  _GLIBCPP_FULLY_COMPLIANT_HEADERS\n+#ifdef  _GLIBCXX_FULLY_COMPLIANT_HEADERS\n # include <bits/istream.tcc>\n #endif\n \n-#endif\t/* _CPP_ISTREAM */\n+#endif\t/* _ISTREAM */"}, {"sha": "2936cda86acc1dfa82449a6d012cce3e21a09ae1", "filename": "libstdc++-v3/include/std/std_iterator.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iterator.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,8 +58,8 @@\n  *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n  */\n \n-#ifndef _CPP_ITERATOR\n-#define _CPP_ITERATOR 1\n+#ifndef _ITERATOR\n+#define _ITERATOR 1\n \n #pragma GCC system_header\n #include <bits/c++config.h>\n@@ -72,7 +72,7 @@\n #include <bits/stream_iterator.h>\n #include <bits/streambuf_iterator.h>\n \n-#endif /* _CPP_ITERATOR */\n+#endif /* _ITERATOR */\n \n // Local Variables:\n // mode:C++"}, {"sha": "dd3bf9de3a66d992225d35bcbb8010bea820c2ef", "filename": "libstdc++-v3/include/std/std_limits.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -40,8 +40,8 @@\n  *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n  */\n \n-#ifndef _CPP_NUMERIC_LIMITS\n-#define _CPP_NUMERIC_LIMITS 1\n+#ifndef _NUMERIC_LIMITS\n+#define _NUMERIC_LIMITS 1\n \n #pragma GCC system_header\n \n@@ -278,7 +278,7 @@ namespace std\n    *  members will all be @c false.\n    *\n    *  @if maint\n-   *  _GLIBCPP_RESOLVE_LIB_DEFECTS:  DRs 201 and 184 (hi Gaby!) are\n+   *  _GLIBCXX_RESOLVE_LIB_DEFECTS:  DRs 201 and 184 (hi Gaby!) are\n    *  noted, but not incorporated in this documented (yet).\n    *  @endif\n   */\n@@ -1140,4 +1140,4 @@ namespace std\n #undef __glibcpp_digits\n #undef __glibcpp_digits10\n \n-#endif // _CPP_NUMERIC_LIMITS\n+#endif // _NUMERIC_LIMITS"}, {"sha": "9a8e8a9a162bc52fce51abec3b827550104c409b", "filename": "libstdc++-v3/include/std/std_list.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_list.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,8 +58,8 @@\n  *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n  */\n \n-#ifndef _CPP_LIST\n-#define _CPP_LIST 1\n+#ifndef _LIST\n+#define _LIST 1\n \n #pragma GCC system_header\n \n@@ -70,9 +70,9 @@\n #include <bits/stl_uninitialized.h>\n #include <bits/stl_list.h>\n \n-#ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n+#ifdef _GLIBCXX_NO_TEMPLATE_EXPORT\n #  include <bits/list.tcc>\n #endif\n \n-#endif /* _CPP_LIST */\n+#endif /* _LIST */\n "}, {"sha": "9c3a101159ede525396771d1eae623ea5df228df", "filename": "libstdc++-v3/include/std/std_locale.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_locale.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -36,8 +36,8 @@\n  *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n  */\n \n-#ifndef _CPP_LOCALE\n-#define _CPP_LOCALE\t1\n+#ifndef _LOCALE\n+#define _LOCALE\t1\n \n #pragma GCC system_header\n "}, {"sha": "7965394dc51f23b6c089d26e557ba1b4b2f009e6", "filename": "libstdc++-v3/include/std/std_map.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_map.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,16 +58,16 @@\n  *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n  */\n \n-#ifndef _CPP_MAP\n-#define _CPP_MAP 1\n+#ifndef _MAP\n+#define _MAP 1\n \n #pragma GCC system_header\n \n #include <bits/stl_tree.h>\n #include <bits/stl_map.h>\n #include <bits/stl_multimap.h>\n \n-#endif /* _CPP_MAP */\n+#endif /* _MAP */\n \n // Local Variables:\n // mode:C++"}, {"sha": "49cf008cf88a3bccb22ba00e13983df433d6712f", "filename": "libstdc++-v3/include/std/std_memory.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_memory.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_memory.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_memory.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -46,8 +46,8 @@\n  *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n  */\n \n-#ifndef _CPP_MEMORY\n-#define _CPP_MEMORY 1\n+#ifndef _MEMORY\n+#define _MEMORY 1\n \n #pragma GCC system_header\n \n@@ -158,7 +158,7 @@ namespace std\n    *  in the libstdc++ testsuite.\n    *\n    *  @if maint\n-   *  _GLIBCPP_RESOLVE_LIB_DEFECTS\n+   *  _GLIBCXX_RESOLVE_LIB_DEFECTS\n    *  127.  auto_ptr<> conversion issues\n    *  These resolutions have all been incorporated.\n    *  @endif"}, {"sha": "c287f925a16f25838f6c052bb71b69798fa1b9bc", "filename": "libstdc++-v3/include/std/std_numeric.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_numeric.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_numeric.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_numeric.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,8 +58,8 @@\n  *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n  */\n \n-#ifndef _CPP_NUMERIC\n-#define _CPP_NUMERIC 1\n+#ifndef _NUMERIC\n+#define _NUMERIC 1\n \n #pragma GCC system_header\n #include <bits/c++config.h>\n@@ -68,7 +68,7 @@\n #include <bits/stl_function.h>\n #include <bits/stl_numeric.h>\n \n-#endif /* _CPP_NUMERIC */\n+#endif /* _NUMERIC */\n \n // Local Variables:\n // mode:C++"}, {"sha": "b20354dc520e22db30eb3ed7c1fb5c1bb77e4d5f", "filename": "libstdc++-v3/include/std/std_ostream.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ostream.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -37,8 +37,8 @@\n  *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n  */\n \n-#ifndef _CPP_OSTREAM\n-#define _CPP_OSTREAM\t1\n+#ifndef _OSTREAM\n+#define _OSTREAM 1\n \n #pragma GCC system_header\n \n@@ -203,7 +203,7 @@ namespace std\n       operator<<(unsigned int __n)\n       { return this->operator<<(static_cast<unsigned long>(__n)); }\n \n-#ifdef _GLIBCPP_USE_LONG_LONG\n+#ifdef _GLIBCXX_USE_LONG_LONG\n       __ostream_type& \n       operator<<(long long __n);\n \n@@ -541,11 +541,11 @@ namespace std\n \n } // namespace std\n \n-#ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n+#ifdef _GLIBCXX_NO_TEMPLATE_EXPORT\n # define export\n #endif\n-#ifdef  _GLIBCPP_FULLY_COMPLIANT_HEADERS\n+#ifdef  _GLIBCXX_FULLY_COMPLIANT_HEADERS\n # include <bits/ostream.tcc>\n #endif\n \n-#endif\t/* _CPP_OSTREAM */\n+#endif\t/* _OSTREAM */"}, {"sha": "cd6e5ec6dfe19014497fdbb65e9939849876d960", "filename": "libstdc++-v3/include/std/std_queue.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_queue.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,8 +58,8 @@\n  *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n  */\n \n-#ifndef _CPP_QUEUE\n-#define _CPP_QUEUE 1\n+#ifndef _QUEUE\n+#define _QUEUE 1\n \n #pragma GCC system_header\n #include <bits/c++config.h>\n@@ -74,9 +74,9 @@\n #include <bits/stl_function.h>\n #include <bits/stl_queue.h>\n \n-#ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n+#ifdef _GLIBCXX_NO_TEMPLATE_EXPORT\n #  include <bits/deque.tcc>\n #  include <bits/vector.tcc>\n #endif\n \n-#endif /* _CPP_QUEUE */\n+#endif /* _QUEUE */"}, {"sha": "d59af35b8c505c49c12c2268eb3adaddb4c67f11", "filename": "libstdc++-v3/include/std/std_set.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_set.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,16 +58,16 @@\n  *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n  */\n \n-#ifndef _CPP_SET\n-#define _CPP_SET 1\n+#ifndef _SET\n+#define _SET 1\n \n #pragma GCC system_header\n \n #include <bits/stl_tree.h>\n #include <bits/stl_set.h>\n #include <bits/stl_multiset.h>\n \n-#endif /* _CPP_SET */\n+#endif /* _SET */\n \n // Local Variables:\n // mode:C++"}, {"sha": "dcdb7a713bf355ed41f6cbef74aaadd10d00fdfb", "filename": "libstdc++-v3/include/std/std_sstream.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -36,8 +36,8 @@\n  *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n  */\n \n-#ifndef _CPP_SSTREAM\n-#define _CPP_SSTREAM\t1\n+#ifndef _SSTREAM\n+#define _SSTREAM 1\n \n #pragma GCC system_header\n \n@@ -65,7 +65,7 @@ namespace std\n       // Types:\n       typedef _CharT \t\t\t\t\tchar_type;\n       typedef _Traits \t\t\t\t\ttraits_type;\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n // 251. basic_stringbuf missing allocator_type\n       typedef _Alloc\t\t\t\t       \tallocator_type;\n #endif\n@@ -304,7 +304,7 @@ namespace std\n       // Types:\n       typedef _CharT \t\t\t\t\tchar_type;\n       typedef _Traits \t\t\t\t\ttraits_type;\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n // 251. basic_stringbuf missing allocator_type\n       typedef _Alloc\t\t\t\t       \tallocator_type;\n #endif\n@@ -423,7 +423,7 @@ namespace std\n       // Types:\n       typedef _CharT \t\t\t\t\tchar_type;\n       typedef _Traits \t\t\t\t\ttraits_type;\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n // 251. basic_stringbuf missing allocator_type\n       typedef _Alloc\t\t\t\t       \tallocator_type;\n #endif\n@@ -542,7 +542,7 @@ namespace std\n       // Types:\n       typedef _CharT \t\t\t\t\tchar_type;\n       typedef _Traits \t\t\t\t\ttraits_type;\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n // 251. basic_stringbuf missing allocator_type\n       typedef _Alloc\t\t\t\t       \tallocator_type;\n #endif\n@@ -641,10 +641,10 @@ namespace std\n     };\n } // namespace std\n \n-#ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n+#ifdef _GLIBCXX_NO_TEMPLATE_EXPORT\n # define export\n #endif\n-#ifdef  _GLIBCPP_FULLY_COMPLIANT_HEADERS\n+#ifdef  _GLIBCXX_FULLY_COMPLIANT_HEADERS\n # include <bits/sstream.tcc>\n #endif\n "}, {"sha": "1da582ee95700b762e5eeece364e654790db2e89", "filename": "libstdc++-v3/include/std/std_stack.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_stack.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,8 +58,8 @@\n  *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n  */\n \n-#ifndef _CPP_STACK\n-#define _CPP_STACK 1\n+#ifndef _STACK\n+#define _STACK 1\n \n #pragma GCC system_header\n \n@@ -70,8 +70,8 @@\n #include <bits/stl_deque.h>\n #include <bits/stl_stack.h>\n \n-#ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n+#ifdef _GLIBCXX_NO_TEMPLATE_EXPORT\n #  include <bits/deque.tcc>\n #endif\n \n-#endif /* _CPP_STACK */\n+#endif /* _STACK */"}, {"sha": "38ff1ad219d2670ecd1cbbd6129699551dad3329", "filename": "libstdc++-v3/include/std/std_stdexcept.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_stdexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_stdexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_stdexcept.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -36,8 +36,8 @@\n  *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n  */\n \n-#ifndef _CPP_STDEXCEPT\n-#define _CPP_STDEXCEPT \t  1\n+#ifndef _STDEXCEPT\n+#define _STDEXCEPT 1\n \n #pragma GCC system_header\n \n@@ -145,4 +145,4 @@ namespace std\n   };\n } // namespace std\n \n-#endif // _CPP_STDEXCEPT\n+#endif // _STDEXCEPT"}, {"sha": "1946d50cd12bff98bb43b6953f1a39cc2496a4a3", "filename": "libstdc++-v3/include/std/std_streambuf.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -37,8 +37,8 @@\n  *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n  */\n \n-#ifndef _CPP_STREAMBUF\n-#define _CPP_STREAMBUF\t1\n+#ifndef _STREAMBUF\n+#define _STREAMBUF 1\n \n #pragma GCC system_header\n \n@@ -741,7 +741,7 @@ namespace std\n       overflow(int_type /* __c */ = traits_type::eof())\n       { return traits_type::eof(); }\n \n-#ifdef _GLIBCPP_DEPRECATED\n+#ifdef _GLIBCXX_DEPRECATED\n     // Annex D.6\n     public:\n       /**\n@@ -753,7 +753,7 @@ namespace std\n        *  See http://gcc.gnu.org/ml/libstdc++/2002-05/msg00168.html\n        *\n        *  @note  This function has been deprecated by the standard.  You\n-       *         must define @c _GLIBCPP_DEPRECATED to make this visible; see\n+       *         must define @c _GLIBCXX_DEPRECATED to make this visible; see\n        *         c++config.h.\n       */\n       void \n@@ -766,7 +766,7 @@ namespace std\n       }\n #endif\n \n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n     // Side effect of DR 50. \n     private:\n       basic_streambuf(const __streambuf_type&) { }; \n@@ -777,10 +777,10 @@ namespace std\n     };\n } // namespace std\n \n-#ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n+#ifdef _GLIBCXX_NO_TEMPLATE_EXPORT\n # define export\n #endif\n-#ifdef  _GLIBCPP_FULLY_COMPLIANT_HEADERS\n+#ifdef  _GLIBCXX_FULLY_COMPLIANT_HEADERS\n #include <bits/streambuf.tcc>\n #endif\n "}, {"sha": "f365a32dc9361ab848ca6162b7530b84182cdfd9", "filename": "libstdc++-v3/include/std/std_string.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_string.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -37,8 +37,8 @@\n  *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n  */\n \n-#ifndef _CPP_STRING\n-#define _CPP_STRING\t1\n+#ifndef _STRING\n+#define _STRING\t1\n \n #pragma GCC system_header\n \n@@ -52,10 +52,10 @@\n #include <bits/stl_function.h>  // For less\n #include <bits/basic_string.h>\n \n-#ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n+#ifdef _GLIBCXX_NO_TEMPLATE_EXPORT\n # include <algorithm> // for find_if\n # include <bits/basic_string.tcc> \n #endif\n \n-#endif /* _CPP_STRING */\n+#endif /* _STRING */\n "}, {"sha": "a0d7bbe8d57faeb0ae53f8655d9aefd94d2c8674", "filename": "libstdc++-v3/include/std/std_utility.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_utility.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_utility.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_utility.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,15 +58,15 @@\n  *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n  */\n \n-#ifndef _CPP_UTILITY\n-#define _CPP_UTILITY 1\n+#ifndef _UTILITY\n+#define _UTILITY 1\n \n #pragma GCC system_header\n #include <bits/c++config.h>\n #include <bits/stl_relops.h>\n #include <bits/stl_pair.h>\n \n-#endif /* _CPP_UTILITY */\n+#endif /* _UTILITY */\n \n // Local Variables:\n // mode:C++"}, {"sha": "d5bdd55748399f13fa1e7c663d33d378c5a5c7a9", "filename": "libstdc++-v3/include/std/std_valarray.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_valarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_valarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_valarray.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -35,8 +35,8 @@\n  *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n  */\n \n-#ifndef _CPP_VALARRAY\n-#define _CPP_VALARRAY 1\n+#ifndef _VALARRAY\n+#define _VALARRAY 1\n \n #pragma GCC system_header\n \n@@ -689,7 +689,7 @@ _DEFINE_BINARY_OPERATOR(>=, __greater_equal)\n \n } // namespace std\n \n-#endif // _CPP_VALARRAY\n+#endif // _VALARRAY\n \n // Local Variables:\n // mode:c++"}, {"sha": "336f7bf2ddb919ffe2ee1a0257adcbc9f820b581", "filename": "libstdc++-v3/include/std/std_vector.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_vector.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -58,8 +58,8 @@\n  *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n  */\n \n-#ifndef _CPP_VECTOR\n-#define _CPP_VECTOR 1\n+#ifndef _VECTOR\n+#define _VECTOR 1\n \n #pragma GCC system_header\n \n@@ -71,9 +71,9 @@\n #include <bits/stl_vector.h>\n #include <bits/stl_bvector.h> \n \n-#ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n+#ifdef _GLIBCXX_NO_TEMPLATE_EXPORT\n #  include <bits/vector.tcc>\n #endif\n \n-#endif /* _CPP_VECTOR */\n+#endif /* _VECTOR */\n "}, {"sha": "7a254011899d5d57f0abb9e803008799df7f9c83", "filename": "libstdc++-v3/libmath/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -34,7 +34,7 @@ libmath_la_DEPENDENCIES = $(libmath_la_LIBADD)\n \n libmath_la_SOURCES = stubs.c\n \n-# Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n+# Use common includes from acinclude.m4/GLIBCXX_EXPORT_INCLUDES\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n INCLUDES = \\"}, {"sha": "b2f688d990c36950c0727931050b29e1a953f593", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -92,10 +92,12 @@ DEBUG_FLAGS = @DEBUG_FLAGS@\n DLLTOOL = @DLLTOOL@\n EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n+FPOS_H = @FPOS_H@\n+FPOS_INC_SRCDIR = @FPOS_INC_SRCDIR@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n-GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n-GLIBCPP_IS_CROSS_COMPILING = @GLIBCPP_IS_CROSS_COMPILING@\n+GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n+GLIBCXX_IS_CROSS_COMPILING = @GLIBCXX_IS_CROSS_COMPILING@\n LIBMATHOBJS = @LIBMATHOBJS@\n LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n@@ -123,18 +125,18 @@ baseline_dir = @baseline_dir@\n check_msgfmt = @check_msgfmt@\n enable_shared = @enable_shared@\n enable_static = @enable_static@\n-glibcpp_CXX = @glibcpp_CXX@\n-glibcpp_MOFILES = @glibcpp_MOFILES@\n-glibcpp_PCHFLAGS = @glibcpp_PCHFLAGS@\n-glibcpp_POFILES = @glibcpp_POFILES@\n-glibcpp_basedir = @glibcpp_basedir@\n-glibcpp_builddir = @glibcpp_builddir@\n-glibcpp_localedir = @glibcpp_localedir@\n-glibcpp_prefixdir = @glibcpp_prefixdir@\n-glibcpp_srcdir = @glibcpp_srcdir@\n-glibcpp_thread_h = @glibcpp_thread_h@\n-glibcpp_toolexecdir = @glibcpp_toolexecdir@\n-glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n+glibcxx_CXX = @glibcxx_CXX@\n+glibcxx_MOFILES = @glibcxx_MOFILES@\n+glibcxx_PCHFLAGS = @glibcxx_PCHFLAGS@\n+glibcxx_POFILES = @glibcxx_POFILES@\n+glibcxx_basedir = @glibcxx_basedir@\n+glibcxx_builddir = @glibcxx_builddir@\n+glibcxx_localedir = @glibcxx_localedir@\n+glibcxx_prefixdir = @glibcxx_prefixdir@\n+glibcxx_srcdir = @glibcxx_srcdir@\n+glibcxx_thread_h = @glibcxx_thread_h@\n+glibcxx_toolexecdir = @glibcxx_toolexecdir@\n+glibcxx_toolexeclibdir = @glibcxx_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n ifGNUmake = @ifGNUmake@\n libtool_VERSION = @libtool_VERSION@\n@@ -152,7 +154,7 @@ libmath_la_DEPENDENCIES = $(libmath_la_LIBADD)\n \n libmath_la_SOURCES = stubs.c\n \n-# Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n+# Use common includes from acinclude.m4/GLIBCXX_EXPORT_INCLUDES\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n INCLUDES = \\"}, {"sha": "344c50c8480657ef5ae4d6c40409aa4ee5c44c16", "filename": "libstdc++-v3/libsupc++/Makefile.am", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -28,9 +28,9 @@ mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n # Cross compiler and multilib support.\n CC = @CC@\n-CXX = @glibcpp_CXX@\n-toolexecdir = @glibcpp_toolexecdir@\n-toolexeclibdir = @glibcpp_toolexeclibdir@\n+CXX = @glibcxx_CXX@\n+toolexecdir = @glibcxx_toolexecdir@\n+toolexeclibdir = @glibcxx_toolexeclibdir@\n \n \n # Need this library to both be part of libstdc++.a, and installed\n@@ -46,7 +46,7 @@ noinst_LTLIBRARIES = libsupc++convenience.la\n OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n \n # These bits are all figured out from configure. Look in acinclude.m4\n-# or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n+# or configure.in to see how they are set. See GLIBCXX_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n CONFIG_CXXFLAGS = \\\n \t@SECTION_FLAGS@ @EXTRA_CXX_FLAGS@\n@@ -57,13 +57,13 @@ WARN_CXXFLAGS = \\\n \n LIBSUPCXX_CXXFLAGS = @LIBSUPCXX_PICFLAGS@\n \n-# Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n-GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n+# Use common includes from acinclude.m4/GLIBCXX_EXPORT_INCLUDES\n+GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n GCC_INCLUDES = -I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include\n \n INCLUDES = \\\n-\t$(GCC_INCLUDES) $(GLIBCPP_INCLUDES) $(LIBSUPCXX_INCLUDES)\n+\t$(GCC_INCLUDES) $(GLIBCXX_INCLUDES) $(LIBSUPCXX_INCLUDES)\n \n headers = \\\n \texception new typeinfo cxxabi.h exception_defines.h \n@@ -99,8 +99,8 @@ sources = \\\n libsupc___la_SOURCES = $(sources) \n libsupc__convenience_la_SOURCES = $(sources) \n \n-glibcppinstalldir = $(gxx_include_dir)\n-glibcppinstall_HEADERS = $(headers)\n+glibcxxinstalldir = $(gxx_include_dir)\n+glibcxxinstall_HEADERS = $(headers)\n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually\n@@ -153,20 +153,20 @@ CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared \\\n           @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n # We have to have rules modified from the default to counteract SUN make\n-# prepending each of $(glibcppinstall_HEADERS) with VPATH below.\n-install-glibcppinstallHEADERS: $(glibcppinstall_HEADERS)\n+# prepending each of $(glibcxxinstall_HEADERS) with VPATH below.\n+install-glibcxxinstallHEADERS: $(glibcxxinstall_HEADERS)\n \t@$(NORMAL_INSTALL)\n-\t$(mkinstalldirs) $(DESTDIR)$(glibcppinstalldir)\n-\t@list='$(glibcppinstall_HEADERS)'; for p in $$list; do \\\n+\t$(mkinstalldirs) $(DESTDIR)$(glibcxxinstalldir)\n+\t@list='$(glibcxxinstall_HEADERS)'; for p in $$list; do \\\n \t  q=`echo $$p | sed -e 's,.*/,,'`; \\\n \t  if test -f \"$$p\"; then d= ; else d=\"$(srcdir)/\"; fi; \\\n-\t  echo \" $(INSTALL_DATA) $$d$$p $(DESTDIR)$(glibcppinstalldir)/$$q\"; \\\n-\t  $(INSTALL_DATA) $$d$$p $(DESTDIR)$(glibcppinstalldir)/$$q; \\\n+\t  echo \" $(INSTALL_DATA) $$d$$p $(DESTDIR)$(glibcxxinstalldir)/$$q\"; \\\n+\t  $(INSTALL_DATA) $$d$$p $(DESTDIR)$(glibcxxinstalldir)/$$q; \\\n \tdone\n \n-uninstall-glibcppinstallHEADERS:\n+uninstall-glibcxxinstallHEADERS:\n \t@$(NORMAL_UNINSTALL)\n-\tlist='$(glibcppinstall_HEADERS)'; for p in $$list; do \\\n+\tlist='$(glibcxxinstall_HEADERS)'; for p in $$list; do \\\n \t  q=`echo $$p | sed -e 's,.*/,,'`; \\\n-\t  rm -f $(DESTDIR)$(glibcppinstalldir)/$$q; \\\n+\t  rm -f $(DESTDIR)$(glibcxxinstalldir)/$$q; \\\n \tdone"}, {"sha": "0d7bcb1bd2baae390aa1e4c408c47d5050fe543a", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 39, "deletions": 37, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -90,9 +90,11 @@ DEBUG_FLAGS = @DEBUG_FLAGS@\n DLLTOOL = @DLLTOOL@\n EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n+FPOS_H = @FPOS_H@\n+FPOS_INC_SRCDIR = @FPOS_INC_SRCDIR@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n-GLIBCPP_IS_CROSS_COMPILING = @GLIBCPP_IS_CROSS_COMPILING@\n+GLIBCXX_IS_CROSS_COMPILING = @GLIBCXX_IS_CROSS_COMPILING@\n LIBMATHOBJS = @LIBMATHOBJS@\n LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n@@ -120,18 +122,18 @@ baseline_dir = @baseline_dir@\n check_msgfmt = @check_msgfmt@\n enable_shared = @enable_shared@\n enable_static = @enable_static@\n-glibcpp_CXX = @glibcpp_CXX@\n-glibcpp_MOFILES = @glibcpp_MOFILES@\n-glibcpp_PCHFLAGS = @glibcpp_PCHFLAGS@\n-glibcpp_POFILES = @glibcpp_POFILES@\n-glibcpp_basedir = @glibcpp_basedir@\n-glibcpp_builddir = @glibcpp_builddir@\n-glibcpp_localedir = @glibcpp_localedir@\n-glibcpp_prefixdir = @glibcpp_prefixdir@\n-glibcpp_srcdir = @glibcpp_srcdir@\n-glibcpp_thread_h = @glibcpp_thread_h@\n-glibcpp_toolexecdir = @glibcpp_toolexecdir@\n-glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n+glibcxx_CXX = @glibcxx_CXX@\n+glibcxx_MOFILES = @glibcxx_MOFILES@\n+glibcxx_PCHFLAGS = @glibcxx_PCHFLAGS@\n+glibcxx_POFILES = @glibcxx_POFILES@\n+glibcxx_basedir = @glibcxx_basedir@\n+glibcxx_builddir = @glibcxx_builddir@\n+glibcxx_localedir = @glibcxx_localedir@\n+glibcxx_prefixdir = @glibcxx_prefixdir@\n+glibcxx_srcdir = @glibcxx_srcdir@\n+glibcxx_thread_h = @glibcxx_thread_h@\n+glibcxx_toolexecdir = @glibcxx_toolexecdir@\n+glibcxx_toolexeclibdir = @glibcxx_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n ifGNUmake = @ifGNUmake@\n libtool_VERSION = @libtool_VERSION@\n@@ -144,9 +146,9 @@ mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n # Cross compiler and multilib support.\n CC = @CC@\n-CXX = @glibcpp_CXX@\n-toolexecdir = @glibcpp_toolexecdir@\n-toolexeclibdir = @glibcpp_toolexeclibdir@\n+CXX = @glibcxx_CXX@\n+toolexecdir = @glibcxx_toolexecdir@\n+toolexeclibdir = @glibcxx_toolexeclibdir@\n \n # Need this library to both be part of libstdc++.a, and installed\n # separately too.\n@@ -160,7 +162,7 @@ noinst_LTLIBRARIES = libsupc++convenience.la\n OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n \n # These bits are all figured out from configure. Look in acinclude.m4\n-# or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n+# or configure.in to see how they are set. See GLIBCXX_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n CONFIG_CXXFLAGS = \\\n \t@SECTION_FLAGS@ @EXTRA_CXX_FLAGS@\n@@ -173,13 +175,13 @@ WARN_CXXFLAGS = \\\n \n LIBSUPCXX_CXXFLAGS = @LIBSUPCXX_PICFLAGS@\n \n-# Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n-GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n+# Use common includes from acinclude.m4/GLIBCXX_EXPORT_INCLUDES\n+GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n GCC_INCLUDES = -I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include\n \n INCLUDES = \\\n-\t$(GCC_INCLUDES) $(GLIBCPP_INCLUDES) $(LIBSUPCXX_INCLUDES)\n+\t$(GCC_INCLUDES) $(GLIBCXX_INCLUDES) $(LIBSUPCXX_INCLUDES)\n \n \n headers = \\\n@@ -218,8 +220,8 @@ sources = \\\n libsupc___la_SOURCES = $(sources) \n libsupc__convenience_la_SOURCES = $(sources) \n \n-glibcppinstalldir = $(gxx_include_dir)\n-glibcppinstall_HEADERS = $(headers)\n+glibcxxinstalldir = $(gxx_include_dir)\n+glibcxxinstall_HEADERS = $(headers)\n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually\n@@ -302,7 +304,7 @@ vterminate.lo\n CXXFLAGS = @CXXFLAGS@\n CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n CXXLD = $(CXX)\n-HEADERS =  $(glibcppinstall_HEADERS)\n+HEADERS =  $(glibcxxinstall_HEADERS)\n \n DIST_COMMON =  Makefile.am Makefile.in\n \n@@ -472,22 +474,22 @@ install-info: install-info-am\n install-exec-am: install-toolexeclibLTLIBRARIES\n install-exec: install-exec-am\n \n-install-data-am: install-glibcppinstallHEADERS\n+install-data-am: install-glibcxxinstallHEADERS\n install-data: install-data-am\n \n install-am: all-am\n \t@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am\n install: install-am\n uninstall-am: uninstall-toolexeclibLTLIBRARIES \\\n-\t\tuninstall-glibcppinstallHEADERS\n+\t\tuninstall-glibcxxinstallHEADERS\n uninstall: uninstall-am\n all-am: Makefile $(LTLIBRARIES) $(HEADERS)\n all-redirect: all-am\n install-strip:\n \t$(MAKE) $(AM_MAKEFLAGS) AM_INSTALL_PROGRAM_FLAGS=-s install\n installdirs:\n \t$(mkinstalldirs)  $(DESTDIR)$(toolexeclibdir) \\\n-\t\t$(DESTDIR)$(glibcppinstalldir)\n+\t\t$(DESTDIR)$(glibcxxinstalldir)\n \n \n mostlyclean-generic:\n@@ -537,8 +539,8 @@ clean-toolexeclibLTLIBRARIES maintainer-clean-toolexeclibLTLIBRARIES \\\n uninstall-toolexeclibLTLIBRARIES install-toolexeclibLTLIBRARIES \\\n mostlyclean-compile distclean-compile clean-compile \\\n maintainer-clean-compile mostlyclean-libtool distclean-libtool \\\n-clean-libtool maintainer-clean-libtool uninstall-glibcppinstallHEADERS \\\n-install-glibcppinstallHEADERS tags mostlyclean-tags distclean-tags \\\n+clean-libtool maintainer-clean-libtool uninstall-glibcxxinstallHEADERS \\\n+install-glibcxxinstallHEADERS tags mostlyclean-tags distclean-tags \\\n clean-tags maintainer-clean-tags distdir info-am info dvi-am dvi check \\\n check-am installcheck-am installcheck install-info-am install-info \\\n install-exec-am install-exec install-data-am install-data install-am \\\n@@ -548,22 +550,22 @@ maintainer-clean-generic clean mostlyclean distclean maintainer-clean\n \n \n # We have to have rules modified from the default to counteract SUN make\n-# prepending each of $(glibcppinstall_HEADERS) with VPATH below.\n-install-glibcppinstallHEADERS: $(glibcppinstall_HEADERS)\n+# prepending each of $(glibcxxinstall_HEADERS) with VPATH below.\n+install-glibcxxinstallHEADERS: $(glibcxxinstall_HEADERS)\n \t@$(NORMAL_INSTALL)\n-\t$(mkinstalldirs) $(DESTDIR)$(glibcppinstalldir)\n-\t@list='$(glibcppinstall_HEADERS)'; for p in $$list; do \\\n+\t$(mkinstalldirs) $(DESTDIR)$(glibcxxinstalldir)\n+\t@list='$(glibcxxinstall_HEADERS)'; for p in $$list; do \\\n \t  q=`echo $$p | sed -e 's,.*/,,'`; \\\n \t  if test -f \"$$p\"; then d= ; else d=\"$(srcdir)/\"; fi; \\\n-\t  echo \" $(INSTALL_DATA) $$d$$p $(DESTDIR)$(glibcppinstalldir)/$$q\"; \\\n-\t  $(INSTALL_DATA) $$d$$p $(DESTDIR)$(glibcppinstalldir)/$$q; \\\n+\t  echo \" $(INSTALL_DATA) $$d$$p $(DESTDIR)$(glibcxxinstalldir)/$$q\"; \\\n+\t  $(INSTALL_DATA) $$d$$p $(DESTDIR)$(glibcxxinstalldir)/$$q; \\\n \tdone\n \n-uninstall-glibcppinstallHEADERS:\n+uninstall-glibcxxinstallHEADERS:\n \t@$(NORMAL_UNINSTALL)\n-\tlist='$(glibcppinstall_HEADERS)'; for p in $$list; do \\\n+\tlist='$(glibcxxinstall_HEADERS)'; for p in $$list; do \\\n \t  q=`echo $$p | sed -e 's,.*/,,'`; \\\n-\t  rm -f $(DESTDIR)$(glibcppinstalldir)/$$q; \\\n+\t  rm -f $(DESTDIR)$(glibcxxinstalldir)/$$q; \\\n \tdone\n \n # Tell versions [3.59,3.63) of GNU make to not export all variables."}, {"sha": "1cad20580591967a7ee1f7197a03ff02ea63be73", "filename": "libstdc++-v3/libsupc++/cxxabi.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -39,8 +39,8 @@\n    is includable from both C and C++. Though the C++ specific parts are not\n    available in C, naturally enough.  */\n \n-#ifndef __CXXABI_H\n-#define __CXXABI_H 1\n+#ifndef _CXXABI_H\n+#define _CXXABI_H 1\n \n #ifdef __cplusplus\n "}, {"sha": "9cf96f4b37d69e52e3f271f1849ac8307723c7ee", "filename": "libstdc++-v3/libsupc++/eh_personality.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -170,7 +170,7 @@ empty_exception_spec (lsda_header_info *info, _Unwind_Sword filter_value)\n \n // Using a different personality function name causes link failures\n // when trying to mix code using different exception handling models.\n-#ifdef _GLIBCPP_SJLJ_EXCEPTIONS\n+#ifdef _GLIBCXX_SJLJ_EXCEPTIONS\n #define PERSONALITY_FUNCTION\t__gxx_personality_sj0\n #define __builtin_eh_return_data_regno(x) x\n #else\n@@ -232,7 +232,7 @@ PERSONALITY_FUNCTION (int version,\n   action_record = 0;\n   handler_switch_value = 0;\n \n-#ifdef _GLIBCPP_SJLJ_EXCEPTIONS\n+#ifdef _GLIBCXX_SJLJ_EXCEPTIONS\n   // The given \"IP\" is an index into the call-site table, with two\n   // exceptions -- -1 means no-action, and 0 means terminate.  But\n   // since we're using uleb128 values, we've not got random access\n@@ -285,7 +285,7 @@ PERSONALITY_FUNCTION (int version,\n \t  goto found_something;\n \t}\n     }\n-#endif // _GLIBCPP_SJLJ_EXCEPTIONS\n+#endif // _GLIBCXX_SJLJ_EXCEPTIONS\n \n   // If ip is not present in the table, call terminate.  This is for\n   // a destructor inside a cleanup, or a library routine the compiler"}, {"sha": "55af4eedfa71139e7e4951fb9755a1310c1ef8fb", "filename": "libstdc++-v3/libsupc++/eh_throw.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -69,7 +69,7 @@ __cxa_throw (void *obj, std::type_info *tinfo, void (*dest) (void *))\n   __cxa_eh_globals *globals = __cxa_get_globals ();\n   globals->uncaughtExceptions += 1;\n \n-#ifdef _GLIBCPP_SJLJ_EXCEPTIONS\n+#ifdef _GLIBCXX_SJLJ_EXCEPTIONS\n   _Unwind_SjLj_RaiseException (&header->unwindHeader);\n #else\n   _Unwind_RaiseException (&header->unwindHeader);\n@@ -95,7 +95,7 @@ __cxa_rethrow ()\n       else\n \theader->handlerCount = -header->handlerCount;\n \n-#ifdef _GLIBCPP_SJLJ_EXCEPTIONS\n+#ifdef _GLIBCXX_SJLJ_EXCEPTIONS\n       _Unwind_SjLj_Resume_or_Rethrow (&header->unwindHeader);\n #else\n #ifdef _LIBUNWIND_STD_ABI"}, {"sha": "1466486dc6be18469ac1827cd3712c93c5bb3b1d", "filename": "libstdc++-v3/libsupc++/exception_defines.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_defines.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -31,8 +31,8 @@\n // ISO C++ 14882: 19.1  Exception classes\n //\n \n-#ifndef __EXCEPTION_DEFINES_H\n-#define __EXCEPTION_DEFINES_H 1\n+#ifndef _EXCEPTION_DEFINES_H\n+#define _EXCEPTION_DEFINES_H 1\n \n #ifndef __EXCEPTIONS\n // Iff -fno-exceptions, transform error handling code to work without it."}, {"sha": "00e99464b908c355542efcb3af0a3a6cf13b6cd8", "filename": "libstdc++-v3/libsupc++/new", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -35,8 +35,8 @@\n  *  http://gcc.gnu.org/onlinedocs/libstdc++/18_support/howto.html#4 for more.\n  */\n \n-#ifndef __NEW__\n-#define __NEW__\n+#ifndef _NEW\n+#define _NEW\n \n #include <cstddef>\n #include <exception>"}, {"sha": "66ccb7d12dd852fad039d16731e6ad9b705e95e7", "filename": "libstdc++-v3/libsupc++/pure.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpure.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -30,7 +30,7 @@\n #include <bits/c++config.h>\n #include \"unwind-cxx.h\"\n \n-#ifdef _GLIBCPP_HAVE_UNISTD_H\n+#ifdef _GLIBCXX_HAVE_UNISTD_H\n # include <unistd.h>\n # define writestr(str)\twrite(2, str, sizeof(str) - 1)\n # ifdef __GNU_LIBRARY__"}, {"sha": "c28217659461c704539f36f37fea380ac3372131", "filename": "libstdc++-v3/libsupc++/tinfo.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -100,15 +100,15 @@ struct vtable_prefix\n   ptrdiff_t whole_object;\n \n   // Additional padding if necessary.\n-#ifdef _GLIBCPP_VTABLE_PADDING\n+#ifdef _GLIBCXX_VTABLE_PADDING\n   ptrdiff_t padding1;               \n #endif\n \n   // Pointer to most derived type_info.\n   const __class_type_info *whole_type;  \n \n   // Additional padding if necessary.\n-#ifdef _GLIBCPP_VTABLE_PADDING\n+#ifdef _GLIBCXX_VTABLE_PADDING\n   ptrdiff_t padding2;               \n #endif\n "}, {"sha": "1396baa6fc2a4c1f8070fa2deef3d8061c3e43a9", "filename": "libstdc++-v3/libsupc++/typeinfo", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -32,8 +32,8 @@\n  *  This header provides RTTI support.\n  */\n \n-#ifndef __TYPEINFO__\n-#define __TYPEINFO__\n+#ifndef _TYPEINFO\n+#define _TYPEINFO\n \n #include <exception>\n "}, {"sha": "1e17972ba50e9e86df1605ba7649fb2de60ffef4", "filename": "libstdc++-v3/libsupc++/unwind-cxx.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -30,8 +30,8 @@\n // This is derived from the C++ ABI for IA-64.  Where we diverge\n // for cross-architecture compatibility are noted with \"@@@\".\n \n-#ifndef __UNWIND_CXX_H\n-#define __UNWIND_CXX_H 1\n+#ifndef _UNWIND_CXX_H\n+#define _UNWIND_CXX_H 1\n \n // Level 2: C++ ABI\n \n@@ -168,4 +168,4 @@ __get_exception_header_from_ue (_Unwind_Exception *exc)\n \n } /* namespace __cxxabiv1 */\n \n-#endif // __UNWIND_CXX_H\n+#endif // _UNWIND_CXX_H"}, {"sha": "38f6f617868ae3450c0bf9708cbd3313bbc5ba95", "filename": "libstdc++-v3/libsupc++/vterminate.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvterminate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvterminate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvterminate.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -33,7 +33,7 @@\n #include <exception_defines.h>\n #include <cxxabi.h>\n \n-#ifdef _GLIBCPP_HAVE_UNISTD_H\n+#ifdef _GLIBCXX_HAVE_UNISTD_H\n # include <unistd.h>\n # define writestr(str)  write(2, str, __builtin_strlen(str))\n #else"}, {"sha": "a0a73b43bddc723f6f8b6002a565d106d8560b1f", "filename": "libstdc++-v3/po/Makefile.am", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fpo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fpo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.am?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -22,18 +22,18 @@\n ## USA.\n \n PACKAGE = @PACKAGE@\n-glibcpp_srcdir = @glibcpp_srcdir@\n+glibcxx_srcdir = @glibcxx_srcdir@\n \n # Location of installation directories.\n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n locale_installdir = $(DESTDIR)$(datadir)/locale\n-locale_builddir = @glibcpp_localedir@\n+locale_builddir = @glibcxx_localedir@\n \n # Tell automake that foo.po makes foo.mo\n SUFFIXES = .po .mo\n \n-LOCALE_IN = @glibcpp_POFILES@\n-LOCALE_OUT = @glibcpp_MOFILES@\n+LOCALE_IN = @glibcxx_POFILES@\n+LOCALE_OUT = @glibcxx_MOFILES@\n \n MSGFMT = msgfmt\n \n@@ -81,7 +81,7 @@ install-data-local-yes: all-local-yes\n # Maintainence of the .po template file.  This rule is never run automatically,\n # and updates the source directory.\n pot:\n-\tcd $(glibcpp_srcdir); \\\n+\tcd $(glibcxx_srcdir); \\\n \txgettext --default-domain=$(PACKAGE) --add-comments --c++ --debug \\\n \t  --join-existing -o po/$(PACKAGE).pot --keyword=__N \\\n \t  `grep -r -l '__N(\".*\")' .`"}, {"sha": "447a5ca59f772ba99582f907d96dba9542790459", "filename": "libstdc++-v3/po/Makefile.in", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.in?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -92,10 +92,12 @@ DEBUG_FLAGS = @DEBUG_FLAGS@\n DLLTOOL = @DLLTOOL@\n EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n+FPOS_H = @FPOS_H@\n+FPOS_INC_SRCDIR = @FPOS_INC_SRCDIR@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n-GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n-GLIBCPP_IS_CROSS_COMPILING = @GLIBCPP_IS_CROSS_COMPILING@\n+GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n+GLIBCXX_IS_CROSS_COMPILING = @GLIBCXX_IS_CROSS_COMPILING@\n LIBMATHOBJS = @LIBMATHOBJS@\n LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n@@ -124,35 +126,35 @@ baseline_dir = @baseline_dir@\n check_msgfmt = @check_msgfmt@\n enable_shared = @enable_shared@\n enable_static = @enable_static@\n-glibcpp_CXX = @glibcpp_CXX@\n-glibcpp_MOFILES = @glibcpp_MOFILES@\n-glibcpp_PCHFLAGS = @glibcpp_PCHFLAGS@\n-glibcpp_POFILES = @glibcpp_POFILES@\n-glibcpp_basedir = @glibcpp_basedir@\n-glibcpp_builddir = @glibcpp_builddir@\n-glibcpp_localedir = @glibcpp_localedir@\n-glibcpp_prefixdir = @glibcpp_prefixdir@\n-glibcpp_thread_h = @glibcpp_thread_h@\n-glibcpp_toolexecdir = @glibcpp_toolexecdir@\n-glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n+glibcxx_CXX = @glibcxx_CXX@\n+glibcxx_MOFILES = @glibcxx_MOFILES@\n+glibcxx_PCHFLAGS = @glibcxx_PCHFLAGS@\n+glibcxx_POFILES = @glibcxx_POFILES@\n+glibcxx_basedir = @glibcxx_basedir@\n+glibcxx_builddir = @glibcxx_builddir@\n+glibcxx_localedir = @glibcxx_localedir@\n+glibcxx_prefixdir = @glibcxx_prefixdir@\n+glibcxx_thread_h = @glibcxx_thread_h@\n+glibcxx_toolexecdir = @glibcxx_toolexecdir@\n+glibcxx_toolexeclibdir = @glibcxx_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n ifGNUmake = @ifGNUmake@\n libtool_VERSION = @libtool_VERSION@\n toplevel_srcdir = @toplevel_srcdir@\n \n PACKAGE = @PACKAGE@\n-glibcpp_srcdir = @glibcpp_srcdir@\n+glibcxx_srcdir = @glibcxx_srcdir@\n \n # Location of installation directories.\n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n locale_installdir = $(DESTDIR)$(datadir)/locale\n-locale_builddir = @glibcpp_localedir@\n+locale_builddir = @glibcxx_localedir@\n \n # Tell automake that foo.po makes foo.mo\n SUFFIXES = .po .mo\n \n-LOCALE_IN = @glibcpp_POFILES@\n-LOCALE_OUT = @glibcpp_MOFILES@\n+LOCALE_IN = @glibcxx_POFILES@\n+LOCALE_OUT = @glibcxx_MOFILES@\n \n MSGFMT = msgfmt\n \n@@ -310,7 +312,7 @@ install-data-local-yes: all-local-yes\n # Maintainence of the .po template file.  This rule is never run automatically,\n # and updates the source directory.\n pot:\n-\tcd $(glibcpp_srcdir); \\\n+\tcd $(glibcxx_srcdir); \\\n \txgettext --default-domain=$(PACKAGE) --add-comments --c++ --debug \\\n \t  --join-existing -o po/$(PACKAGE).pot --keyword=__N \\\n \t  `grep -r -l '__N(\".*\")' .`"}, {"sha": "8e8f93970ee7a1850b48c68a611c65190bf0b75e", "filename": "libstdc++-v3/scripts/testsuite_flags.in", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fscripts%2Ftestsuite_flags.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fscripts%2Ftestsuite_flags.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fscripts%2Ftestsuite_flags.in?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -21,9 +21,9 @@ EOF\n }\n \n # Establish configure-generated directory structure.\n-BUILD_DIR=@glibcpp_builddir@\n-SRC_DIR=@glibcpp_srcdir@\n-PREFIX_DIR=@glibcpp_prefixdir@\n+BUILD_DIR=@glibcxx_builddir@\n+SRC_DIR=@glibcxx_srcdir@\n+PREFIX_DIR=@glibcxx_prefixdir@\n query=$1\n \n case ${query} in\n@@ -32,7 +32,7 @@ case ${query} in\n       echo ${INCLUDES}\n       ;;\n     --build-includes)\n-      INCLUDES=\"-nostdinc++ @GLIBCPP_INCLUDES@\n+      INCLUDES=\"-nostdinc++ @GLIBCXX_INCLUDES@\n \t        -I${SRC_DIR}/libsupc++ -I${SRC_DIR}/libio \n \t\t-I${SRC_DIR}/include/backward \n \t\t-I${SRC_DIR}/testsuite\"\n@@ -43,15 +43,15 @@ case ${query} in\n       echo ${CXX}\n       ;;\n     --build-cxx)\n-      PCHFLAGS=\"@glibcpp_PCHFLAGS@\"\n-      CXX_build=\"@glibcpp_CXX@ ${PCHFLAGS}\"\n+      PCHFLAGS=\"@glibcxx_PCHFLAGS@\"\n+      CXX_build=\"@glibcxx_CXX@ ${PCHFLAGS}\"\n       CXX=`echo \"$CXX_build\" | sed 's,gcc/xgcc ,gcc/g++ ,'`\n       echo ${CXX}\n       ;;\n     --cxxflags)\n       CXXFLAGS_save=\"-g -O2\"\n       CXXFLAGS_config='@SECTION_FLAGS@ @SECTION_LDFLAGS@ -fmessage-length=0 \n- \t\t      @EXTRA_CXX_FLAGS@ -DLOCALEDIR=\"@glibcpp_localedir@\" '\n+ \t\t      @EXTRA_CXX_FLAGS@ -DLOCALEDIR=\"@glibcxx_localedir@\" '\n       echo ${CXXFLAGS_save} ${CXXFLAGS_config}\n       ;;\n     *)"}, {"sha": "2322a6737f42d2d9f9bb336f4a52e2390a3dc2f3", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -28,18 +28,18 @@ MAINT_CHARSET = latin1\n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n # Cross compiler support.\n-CXX = @glibcpp_CXX@\n-glibcpp_srcdir=@glibcpp_srcdir@\n-glibcpp_builddir=@glibcpp_builddir@\n-toolexecdir = @glibcpp_toolexecdir@\n-toolexeclibdir = @glibcpp_toolexeclibdir@\n+CXX = @glibcxx_CXX@\n+glibcxx_srcdir=@glibcxx_srcdir@\n+glibcxx_builddir=@glibcxx_builddir@\n+toolexecdir = @glibcxx_toolexecdir@\n+toolexeclibdir = @glibcxx_toolexeclibdir@\n toolexeclib_LTLIBRARIES = libstdc++.la\n \n # Symbol versioning for shared libraries.\n-if GLIBCPP_BUILD_VERSIONED_SHLIB\n+if GLIBCXX_BUILD_VERSIONED_SHLIB\n version_arg = -Wl,--version-script=libstdc++-symbol.ver\n-libstdc++-symbol.ver:  ${glibcpp_srcdir}/@SYMVER_MAP@\n-\t@LN_S@  ${glibcpp_srcdir}/@SYMVER_MAP@ ./libstdc++-symbol.ver || true\n+libstdc++-symbol.ver:  ${glibcxx_srcdir}/@SYMVER_MAP@\n+\t@LN_S@  ${glibcxx_srcdir}/@SYMVER_MAP@ ./libstdc++-symbol.ver || true\n else\n version_arg =\n libstdc++-symbol.ver:\n@@ -50,23 +50,23 @@ endif\n OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n \n # These bits are all figured out from configure. Look in acinclude.m4\n-# or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n+# or configure.in to see how they are set. See GLIBCXX_EXPORT_FLAGS\n CONFIG_CXXFLAGS = \\\n \t@SECTION_FLAGS@ @EXTRA_CXX_FLAGS@\n \n # Warning flags to use.\n WARN_CXXFLAGS = \\\n \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n-# Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n-GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n+# Use common includes from acinclude.m4/GLIBCXX_EXPORT_INCLUDES\n+GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n INCLUDES = \\\n \t-nostdinc++ \\\n-\t$(GLIBCPP_INCLUDES) \\\n+\t$(GLIBCXX_INCLUDES) \\\n \t$(LIBSUPCXX_INCLUDES) $(LIBMATH_INCLUDES) \\\n \t$(TOPLEVEL_INCLUDES)\n \n@@ -81,38 +81,38 @@ host_sources = \\\n \tnumeric_members.cc \\\n \ttime_members.cc\n \n-codecvt_members.cc: ${glibcpp_srcdir}/@CCODECVT_CC@\n-\t@LN_S@ ${glibcpp_srcdir}/@CCODECVT_CC@ . || true\n+codecvt_members.cc: ${glibcxx_srcdir}/@CCODECVT_CC@\n+\t@LN_S@ ${glibcxx_srcdir}/@CCODECVT_CC@ . || true\n \n-collate_members.cc: ${glibcpp_srcdir}/@CCOLLATE_CC@\n-\t@LN_S@ ${glibcpp_srcdir}/@CCOLLATE_CC@ . || true\n+collate_members.cc: ${glibcxx_srcdir}/@CCOLLATE_CC@\n+\t@LN_S@ ${glibcxx_srcdir}/@CCOLLATE_CC@ . || true\n \n-ctype_members.cc: ${glibcpp_srcdir}/@CCTYPE_CC@\n-\t@LN_S@ ${glibcpp_srcdir}/@CCTYPE_CC@ . || true\n+ctype_members.cc: ${glibcxx_srcdir}/@CCTYPE_CC@\n+\t@LN_S@ ${glibcxx_srcdir}/@CCTYPE_CC@ . || true\n \n-messages_members.cc: ${glibcpp_srcdir}/@CMESSAGES_CC@\n-\t@LN_S@ ${glibcpp_srcdir}/@CMESSAGES_CC@ . || true\n+messages_members.cc: ${glibcxx_srcdir}/@CMESSAGES_CC@\n+\t@LN_S@ ${glibcxx_srcdir}/@CMESSAGES_CC@ . || true\n \n-monetary_members.cc: ${glibcpp_srcdir}/@CMONEY_CC@\n-\t@LN_S@ ${glibcpp_srcdir}/@CMONEY_CC@ . || true\n+monetary_members.cc: ${glibcxx_srcdir}/@CMONEY_CC@\n+\t@LN_S@ ${glibcxx_srcdir}/@CMONEY_CC@ . || true\n \n-numeric_members.cc: ${glibcpp_srcdir}/@CNUMERIC_CC@\n-\t@LN_S@ ${glibcpp_srcdir}/@CNUMERIC_CC@ . || true\n+numeric_members.cc: ${glibcxx_srcdir}/@CNUMERIC_CC@\n+\t@LN_S@ ${glibcxx_srcdir}/@CNUMERIC_CC@ . || true\n \n-time_members.cc: ${glibcpp_srcdir}/@CTIME_CC@\n-\t@LN_S@ ${glibcpp_srcdir}/@CTIME_CC@ . || true\n+time_members.cc: ${glibcxx_srcdir}/@CTIME_CC@\n+\t@LN_S@ ${glibcxx_srcdir}/@CTIME_CC@ . || true\n \n # Source files linked in via configuration/make substitution for a\n # particular host, but with ad hoc naming rules.\n host_sources_extra = \\\n \tbasic_file.cc \\\n \tc++locale.cc \n \n-c++locale.cc: ${glibcpp_srcdir}/@CLOCALE_CC@\n-\t@LN_S@ ${glibcpp_srcdir}/@CLOCALE_CC@ ./$@ || true\n+c++locale.cc: ${glibcxx_srcdir}/@CLOCALE_CC@\n+\t@LN_S@ ${glibcxx_srcdir}/@CLOCALE_CC@ ./$@ || true\n \n-basic_file.cc: ${glibcpp_srcdir}/@BASIC_FILE_CC@\n-\t@LN_S@ ${glibcpp_srcdir}/@BASIC_FILE_CC@ ./$@ || true\n+basic_file.cc: ${glibcxx_srcdir}/@BASIC_FILE_CC@\n+\t@LN_S@ ${glibcxx_srcdir}/@BASIC_FILE_CC@ ./$@ || true\n \n # Sources present in the src directory.\n sources = \\\n@@ -162,19 +162,19 @@ libstdc___la_LDFLAGS = \\\n \n # Use special rules for the deprecated source files so that they find\n # deprecated include files.\n-GLIBCPP_INCLUDE_DIR=@glibcpp_builddir@/include\n+GLIBCXX_INCLUDE_DIR=@glibcxx_builddir@/include\n strstream.lo: strstream.cc\n-\t$(LTCXXCOMPILE) -I$(GLIBCPP_INCLUDE_DIR)/backward -Wno-deprecated -c $<\n+\t$(LTCXXCOMPILE) -I$(GLIBCXX_INCLUDE_DIR)/backward -Wno-deprecated -c $<\n strstream.o: strstream.cc\n-\t$(CXXCOMPILE) -I$(GLIBCPP_INCLUDE_DIR)/backward -Wno-deprecated -c $<\n+\t$(CXXCOMPILE) -I$(GLIBCXX_INCLUDE_DIR)/backward -Wno-deprecated -c $<\n \n # Use special rules for the concept-checking instantiations so that all\n # the generated template functions are also instantiated.  Force the checks\n # to be on so that the instantiations are actually seen.\n concept-inst.lo: concept-inst.cc\n-\t$(LTCXXCOMPILE) -D_GLIBCPP_CONCEPT_CHECKS -fimplicit-templates -c $<\n+\t$(LTCXXCOMPILE) -D_GLIBCXX_CONCEPT_CHECKS -fimplicit-templates -c $<\n concept-inst.o: concept-inst.cc\n-\t$(CXXCOMPILE) -D_GLIBCPP_CONCEPT_CHECKS -fimplicit-templates -c $<\n+\t$(CXXCOMPILE) -D_GLIBCXX_CONCEPT_CHECKS -fimplicit-templates -c $<\n \n # Use special rules for the demangler, so that an additional implicit\n # instantiation file is not necessary.\n@@ -229,7 +229,7 @@ CXXLINK = $(LIBTOOL) --tag CXX --mode=link $(CXX) \\\n \n \n # Added bits to build debug library.\n-if GLIBCPP_BUILD_DEBUG\n+if GLIBCXX_BUILD_DEBUG\n all-local: build_debug\n install-data-local: install_debug\n else\n@@ -246,7 +246,7 @@ stamp-debug:\n \t  (cd ${debugdir}; \\\n \t  sed -e 's/top_builddir = \\.\\./top_builddir = ..\\/../' \\\n \t      -e 's/srcdir = \\.\\./srcdir = ..\\/../' \\\n-\t      -e 's/glibcpp_basedir = \\.\\./glibcpp_basedir = ..\\/../' \\\n+\t      -e 's/glibcxx_basedir = \\.\\./glibcxx_basedir = ..\\/../' \\\n \t      -e 's/all-local: build_debug/all-local:/' \\\n \t      -e 's/install-data-local: install_debug/install-data-local:/' \\\n \t  < ../Makefile > Makefile) ; \\\n@@ -259,4 +259,4 @@ build_debug: stamp-debug\n # Install debug library here.\n install_debug: \n \t(cd ${debugdir} && $(MAKE) \\\n-\ttoolexeclibdir=@glibcpp_toolexeclibdir@/debug install)\n+\ttoolexeclibdir=@glibcxx_toolexeclibdir@/debug install)"}, {"sha": "d86cc4b57a844a99c6dfdb93e18604e7851df883", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 54, "deletions": 54, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -94,7 +94,7 @@ FPOS_H = @FPOS_H@\n FPOS_INC_SRCDIR = @FPOS_INC_SRCDIR@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n-GLIBCPP_IS_CROSS_COMPILING = @GLIBCPP_IS_CROSS_COMPILING@\n+GLIBCXX_IS_CROSS_COMPILING = @GLIBCXX_IS_CROSS_COMPILING@\n LIBMATHOBJS = @LIBMATHOBJS@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n@@ -120,16 +120,16 @@ baseline_dir = @baseline_dir@\n check_msgfmt = @check_msgfmt@\n enable_shared = @enable_shared@\n enable_static = @enable_static@\n-glibcpp_CXX = @glibcpp_CXX@\n-glibcpp_MOFILES = @glibcpp_MOFILES@\n-glibcpp_PCHFLAGS = @glibcpp_PCHFLAGS@\n-glibcpp_POFILES = @glibcpp_POFILES@\n-glibcpp_basedir = @glibcpp_basedir@\n-glibcpp_localedir = @glibcpp_localedir@\n-glibcpp_prefixdir = @glibcpp_prefixdir@\n-glibcpp_thread_h = @glibcpp_thread_h@\n-glibcpp_toolexecdir = @glibcpp_toolexecdir@\n-glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n+glibcxx_CXX = @glibcxx_CXX@\n+glibcxx_MOFILES = @glibcxx_MOFILES@\n+glibcxx_PCHFLAGS = @glibcxx_PCHFLAGS@\n+glibcxx_POFILES = @glibcxx_POFILES@\n+glibcxx_basedir = @glibcxx_basedir@\n+glibcxx_localedir = @glibcxx_localedir@\n+glibcxx_prefixdir = @glibcxx_prefixdir@\n+glibcxx_thread_h = @glibcxx_thread_h@\n+glibcxx_toolexecdir = @glibcxx_toolexecdir@\n+glibcxx_toolexeclibdir = @glibcxx_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n ifGNUmake = @ifGNUmake@\n libtool_VERSION = @libtool_VERSION@\n@@ -141,21 +141,21 @@ MAINT_CHARSET = latin1\n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n # Cross compiler support.\n-CXX = @glibcpp_CXX@\n-glibcpp_srcdir = @glibcpp_srcdir@\n-glibcpp_builddir = @glibcpp_builddir@\n-toolexecdir = @glibcpp_toolexecdir@\n-toolexeclibdir = @glibcpp_toolexeclibdir@\n+CXX = @glibcxx_CXX@\n+glibcxx_srcdir = @glibcxx_srcdir@\n+glibcxx_builddir = @glibcxx_builddir@\n+toolexecdir = @glibcxx_toolexecdir@\n+toolexeclibdir = @glibcxx_toolexeclibdir@\n toolexeclib_LTLIBRARIES = libstdc++.la\n-@GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE@version_arg = @GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE@-Wl,--version-script=libstdc++-symbol.ver\n-@GLIBCPP_BUILD_VERSIONED_SHLIB_FALSE@version_arg = \n+@GLIBCXX_BUILD_VERSIONED_SHLIB_TRUE@version_arg = @GLIBCXX_BUILD_VERSIONED_SHLIB_TRUE@-Wl,--version-script=libstdc++-symbol.ver\n+@GLIBCXX_BUILD_VERSIONED_SHLIB_FALSE@version_arg = \n \n # Compile flags that should be constant throughout the build, both for\n # SUBDIRS and for libstdc++-v3 in general.\n OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n \n # These bits are all figured out from configure. Look in acinclude.m4\n-# or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n+# or configure.in to see how they are set. See GLIBCXX_EXPORT_FLAGS\n CONFIG_CXXFLAGS = \\\n \t@SECTION_FLAGS@ @EXTRA_CXX_FLAGS@\n \n@@ -165,15 +165,15 @@ WARN_CXXFLAGS = \\\n \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n \n-# Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n-GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n+# Use common includes from acinclude.m4/GLIBCXX_EXPORT_INCLUDES\n+GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n INCLUDES = \\\n \t-nostdinc++ \\\n-\t$(GLIBCPP_INCLUDES) \\\n+\t$(GLIBCXX_INCLUDES) \\\n \t$(LIBSUPCXX_INCLUDES) $(LIBMATH_INCLUDES) \\\n \t$(TOPLEVEL_INCLUDES)\n \n@@ -247,7 +247,7 @@ libstdc___la_LDFLAGS = \\\n \n # Use special rules for the deprecated source files so that they find\n # deprecated include files.\n-GLIBCPP_INCLUDE_DIR = @glibcpp_builddir@/include\n+GLIBCXX_INCLUDE_DIR = @glibcxx_builddir@/include\n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually\n@@ -539,48 +539,48 @@ all-local all-redirect all-am all installdirs mostlyclean-generic \\\n distclean-generic clean-generic maintainer-clean-generic clean \\\n mostlyclean distclean maintainer-clean\n \n-@GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE@libstdc++-symbol.ver:  ${glibcpp_srcdir}/@SYMVER_MAP@\n-@GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE@\t@LN_S@  ${glibcpp_srcdir}/@SYMVER_MAP@ ./libstdc++-symbol.ver || true\n-@GLIBCPP_BUILD_VERSIONED_SHLIB_FALSE@libstdc++-symbol.ver:\n+@GLIBCXX_BUILD_VERSIONED_SHLIB_TRUE@libstdc++-symbol.ver:  ${glibcxx_srcdir}/@SYMVER_MAP@\n+@GLIBCXX_BUILD_VERSIONED_SHLIB_TRUE@\t@LN_S@  ${glibcxx_srcdir}/@SYMVER_MAP@ ./libstdc++-symbol.ver || true\n+@GLIBCXX_BUILD_VERSIONED_SHLIB_FALSE@libstdc++-symbol.ver:\n \n-codecvt_members.cc: ${glibcpp_srcdir}/@CCODECVT_CC@\n-\t@LN_S@ ${glibcpp_srcdir}/@CCODECVT_CC@ . || true\n+codecvt_members.cc: ${glibcxx_srcdir}/@CCODECVT_CC@\n+\t@LN_S@ ${glibcxx_srcdir}/@CCODECVT_CC@ . || true\n \n-collate_members.cc: ${glibcpp_srcdir}/@CCOLLATE_CC@\n-\t@LN_S@ ${glibcpp_srcdir}/@CCOLLATE_CC@ . || true\n+collate_members.cc: ${glibcxx_srcdir}/@CCOLLATE_CC@\n+\t@LN_S@ ${glibcxx_srcdir}/@CCOLLATE_CC@ . || true\n \n-ctype_members.cc: ${glibcpp_srcdir}/@CCTYPE_CC@\n-\t@LN_S@ ${glibcpp_srcdir}/@CCTYPE_CC@ . || true\n+ctype_members.cc: ${glibcxx_srcdir}/@CCTYPE_CC@\n+\t@LN_S@ ${glibcxx_srcdir}/@CCTYPE_CC@ . || true\n \n-messages_members.cc: ${glibcpp_srcdir}/@CMESSAGES_CC@\n-\t@LN_S@ ${glibcpp_srcdir}/@CMESSAGES_CC@ . || true\n+messages_members.cc: ${glibcxx_srcdir}/@CMESSAGES_CC@\n+\t@LN_S@ ${glibcxx_srcdir}/@CMESSAGES_CC@ . || true\n \n-monetary_members.cc: ${glibcpp_srcdir}/@CMONEY_CC@\n-\t@LN_S@ ${glibcpp_srcdir}/@CMONEY_CC@ . || true\n+monetary_members.cc: ${glibcxx_srcdir}/@CMONEY_CC@\n+\t@LN_S@ ${glibcxx_srcdir}/@CMONEY_CC@ . || true\n \n-numeric_members.cc: ${glibcpp_srcdir}/@CNUMERIC_CC@\n-\t@LN_S@ ${glibcpp_srcdir}/@CNUMERIC_CC@ . || true\n+numeric_members.cc: ${glibcxx_srcdir}/@CNUMERIC_CC@\n+\t@LN_S@ ${glibcxx_srcdir}/@CNUMERIC_CC@ . || true\n \n-time_members.cc: ${glibcpp_srcdir}/@CTIME_CC@\n-\t@LN_S@ ${glibcpp_srcdir}/@CTIME_CC@ . || true\n+time_members.cc: ${glibcxx_srcdir}/@CTIME_CC@\n+\t@LN_S@ ${glibcxx_srcdir}/@CTIME_CC@ . || true\n \n-c++locale.cc: ${glibcpp_srcdir}/@CLOCALE_CC@\n-\t@LN_S@ ${glibcpp_srcdir}/@CLOCALE_CC@ ./$@ || true\n+c++locale.cc: ${glibcxx_srcdir}/@CLOCALE_CC@\n+\t@LN_S@ ${glibcxx_srcdir}/@CLOCALE_CC@ ./$@ || true\n \n-basic_file.cc: ${glibcpp_srcdir}/@BASIC_FILE_CC@\n-\t@LN_S@ ${glibcpp_srcdir}/@BASIC_FILE_CC@ ./$@ || true\n+basic_file.cc: ${glibcxx_srcdir}/@BASIC_FILE_CC@\n+\t@LN_S@ ${glibcxx_srcdir}/@BASIC_FILE_CC@ ./$@ || true\n strstream.lo: strstream.cc\n-\t$(LTCXXCOMPILE) -I$(GLIBCPP_INCLUDE_DIR)/backward -Wno-deprecated -c $<\n+\t$(LTCXXCOMPILE) -I$(GLIBCXX_INCLUDE_DIR)/backward -Wno-deprecated -c $<\n strstream.o: strstream.cc\n-\t$(CXXCOMPILE) -I$(GLIBCPP_INCLUDE_DIR)/backward -Wno-deprecated -c $<\n+\t$(CXXCOMPILE) -I$(GLIBCXX_INCLUDE_DIR)/backward -Wno-deprecated -c $<\n \n # Use special rules for the concept-checking instantiations so that all\n # the generated template functions are also instantiated.  Force the checks\n # to be on so that the instantiations are actually seen.\n concept-inst.lo: concept-inst.cc\n-\t$(LTCXXCOMPILE) -D_GLIBCPP_CONCEPT_CHECKS -fimplicit-templates -c $<\n+\t$(LTCXXCOMPILE) -D_GLIBCXX_CONCEPT_CHECKS -fimplicit-templates -c $<\n concept-inst.o: concept-inst.cc\n-\t$(CXXCOMPILE) -D_GLIBCPP_CONCEPT_CHECKS -fimplicit-templates -c $<\n+\t$(CXXCOMPILE) -D_GLIBCXX_CONCEPT_CHECKS -fimplicit-templates -c $<\n \n # Use special rules for the demangler, so that an additional implicit\n # instantiation file is not necessary.\n@@ -590,10 +590,10 @@ demangle.o: demangle.cc\n \t$(CXXCOMPILE) -fimplicit-templates -c $<\n \n # Added bits to build debug library.\n-@GLIBCPP_BUILD_DEBUG_TRUE@all-local: build_debug\n-@GLIBCPP_BUILD_DEBUG_TRUE@install-data-local: install_debug\n-@GLIBCPP_BUILD_DEBUG_FALSE@all-local:\n-@GLIBCPP_BUILD_DEBUG_FALSE@install-data-local: \n+@GLIBCXX_BUILD_DEBUG_TRUE@all-local: build_debug\n+@GLIBCXX_BUILD_DEBUG_TRUE@install-data-local: install_debug\n+@GLIBCXX_BUILD_DEBUG_FALSE@all-local:\n+@GLIBCXX_BUILD_DEBUG_FALSE@install-data-local: \n \n # Build parallel set of debug objects here.\n stamp-debug: \n@@ -602,7 +602,7 @@ stamp-debug:\n \t  (cd ${debugdir}; \\\n \t  sed -e 's/top_builddir = \\.\\./top_builddir = ..\\/../' \\\n \t      -e 's/srcdir = \\.\\./srcdir = ..\\/../' \\\n-\t      -e 's/glibcpp_basedir = \\.\\./glibcpp_basedir = ..\\/../' \\\n+\t      -e 's/glibcxx_basedir = \\.\\./glibcxx_basedir = ..\\/../' \\\n \t      -e 's/all-local: build_debug/all-local:/' \\\n \t      -e 's/install-data-local: install_debug/install-data-local:/' \\\n \t  < ../Makefile > Makefile) ; \\\n@@ -615,7 +615,7 @@ build_debug: stamp-debug\n # Install debug library here.\n install_debug: \n \t(cd ${debugdir} && $(MAKE) \\\n-\ttoolexeclibdir=@glibcpp_toolexeclibdir@/debug install)\n+\ttoolexeclibdir=@glibcxx_toolexeclibdir@/debug install)\n \n # Tell versions [3.59,3.63) of GNU make to not export all variables.\n # Otherwise a system limit (for SysV at least) may be exceeded."}, {"sha": "08aa8b48032918bb7ecc5eda7b1114ca3f832721", "filename": "libstdc++-v3/src/codecvt.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -34,11 +34,11 @@ namespace std\n   // Definitions for locale::id of standard facets that are specialized.\n  locale::id codecvt<char, char, mbstate_t>::id;\n \n-#ifdef _GLIBCPP_USE_WCHAR_T  \n+#ifdef _GLIBCXX_USE_WCHAR_T  \n   locale::id codecvt<wchar_t, char, mbstate_t>::id;\n #endif\n \n-#ifdef _GLIBCPP_USE___ENC_TRAITS\n+#ifdef _GLIBCXX_USE___ENC_TRAITS\n   // Definitions for static const data members of __enc_traits.\n   const int __enc_traits::_S_max_size;\n #endif \n@@ -64,7 +64,7 @@ namespace std\n \t extern_type* __to, extern_type*, \n \t extern_type*& __to_next) const\n   { \n-    // _GLIBCPP_RESOLVE_LIB_DEFECTS\n+    // _GLIBCXX_RESOLVE_LIB_DEFECTS\n     // According to the resolution of DR19, \"If returns noconv [...]\n     // there are no changes to the values in [to, to_limit).\"\n     __from_next = __from; \n@@ -88,7 +88,7 @@ namespace std\n \tintern_type* __to, intern_type*, \n \tintern_type*& __to_next) const\n   {\n-    // _GLIBCPP_RESOLVE_LIB_DEFECTS\n+    // _GLIBCXX_RESOLVE_LIB_DEFECTS\n     // According to the resolution of DR19, \"If returns noconv [...]\n     // there are no changes to the values in [to, to_limit).\"\n     __from_next = __from; \n@@ -117,7 +117,7 @@ namespace std\n   do_max_length() const throw() \n   { return 1; }\n   \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   // codecvt<wchar_t, char, mbstate_t> required specialization\n   codecvt<wchar_t, char, mbstate_t>::\n   codecvt(size_t __refs)\n@@ -147,5 +147,5 @@ namespace std\n   codecvt<wchar_t, char, mbstate_t>::\n   do_always_noconv() const throw()\n   { return false; }\n-#endif //  _GLIBCPP_USE_WCHAR_T\n+#endif //  _GLIBCXX_USE_WCHAR_T\n } // namespace std"}, {"sha": "6d2ca56fad96c4f05e7e25d713e5d7b251d3fff2", "filename": "libstdc++-v3/src/complex_io.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Fcomplex_io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Fcomplex_io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcomplex_io.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -59,7 +59,7 @@ namespace std\n     operator<<(basic_ostream<char, char_traits<char> >&,\n                const complex<long double>&);\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template\n     basic_istream<wchar_t, char_traits<wchar_t> >&\n     operator>>(basic_istream<wchar_t, char_traits<wchar_t> >&,\n@@ -89,5 +89,5 @@ namespace std\n     basic_ostream<wchar_t, char_traits<wchar_t> >&\n     operator<<(basic_ostream<wchar_t, char_traits<wchar_t> >&,\n                const complex<long double>&);\n-#endif //_GLIBCPP_USE_WCHAR_T\n+#endif //_GLIBCXX_USE_WCHAR_T\n } // namespace std"}, {"sha": "c8a3dd41b2760efda877a243fd66df50c7024f44", "filename": "libstdc++-v3/src/concept-inst.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Fconcept-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Fconcept-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fconcept-inst.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -36,7 +36,7 @@\n \n #include <bits/concept_check.h>\n \n-#ifdef _GLIBCPP_CONCEPT_CHECKS\n+#ifdef _GLIBCXX_CONCEPT_CHECKS\n \n #include <memory>\n #include <iterator>\n@@ -54,7 +54,7 @@ namespace __gnu_cxx\n \n   _Instantiate(_InputIteratorConcept<char const*> );\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   _Instantiate(_InputIteratorConcept<wchar_t*> );\n \n   _Instantiate(_InputIteratorConcept<wchar_t const*> );\n@@ -75,7 +75,7 @@ namespace __gnu_cxx\n   _Instantiate(_OutputIteratorConcept<std::ostreambuf_iterator<\n     char, std::char_traits<char> >, char> );\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   _Instantiate(_OutputIteratorConcept<std::ostreambuf_iterator<\n     wchar_t, std::char_traits<wchar_t> >, wchar_t> );\n #endif\n@@ -90,7 +90,7 @@ namespace __gnu_cxx\n   _Instantiate(_RandomAccessIteratorConcept<\n     __normal_iterator<char*, std::string> > );\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   _Instantiate(_RandomAccessIteratorConcept<\n     __normal_iterator<wchar_t const*,\n     std::basic_string<wchar_t, std::char_traits<wchar_t>,"}, {"sha": "5ddbd4137a88ebb13dd049ddc3c624672838f15d", "filename": "libstdc++-v3/src/ctype.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -38,7 +38,7 @@ namespace std\n   // Definitions for locale::id of standard facets that are specialized.\n   locale::id ctype<char>::id;\n \n-#ifdef _GLIBCPP_USE_WCHAR_T  \n+#ifdef _GLIBCXX_USE_WCHAR_T  \n   locale::id ctype<wchar_t>::id;\n #endif\n \n@@ -51,7 +51,7 @@ namespace std\n       return static_cast<const ctype<char>&>(*(__tmp->_M_facets[__i]));\n     }\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n     const ctype<wchar_t>&\n     use_facet<ctype<wchar_t> >(const locale& __loc)\n@@ -124,7 +124,7 @@ namespace std\n     return __hi;\n   }\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   ctype<wchar_t>::ctype(size_t __refs) \n   : __ctype_abstract_base<wchar_t>(__refs)\n   { _M_c_locale_ctype = _S_c_locale; }"}, {"sha": "f28d9124d565aaa5359dba871293c298be9c1d40", "filename": "libstdc++-v3/src/ext-inst.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Fext-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Fext-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fext-inst.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -47,7 +47,7 @@ namespace __gnu_cxx\n \n   template class stdio_filebuf<char>;\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template\n     const unsigned long\n     rope<wchar_t, std::allocator<wchar_t> >::_S_min_len;"}, {"sha": "4d9eae5460b13cf6d05a40bade56e9c4b0a3b605", "filename": "libstdc++-v3/src/fstream-inst.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Ffstream-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Ffstream-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffstream-inst.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -38,25 +38,25 @@ namespace std\n {\n   // filebuf\n   template class basic_filebuf<char, char_traits<char> >;\n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template class basic_filebuf<wchar_t, char_traits<wchar_t> >;\n #endif\n \n   // ifstream\n   template class basic_ifstream<char>;\n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template class basic_ifstream<wchar_t>;\n #endif\n \n   // ofstream\n   template class basic_ofstream<char>;\n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template class basic_ofstream<wchar_t>;\n #endif\n \n   // fstream\n   template class basic_fstream<char>;\n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template class basic_fstream<wchar_t>;\n #endif\n } // namespace std"}, {"sha": "fb158a61242bbf7a16fc1d281be309af39c6f534", "filename": "libstdc++-v3/src/functexcept.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -32,7 +32,7 @@\n #include <new>\n #include <typeinfo>\n #include <ios>\n-#ifdef _GLIBCPP_USE_NLS\n+#ifdef _GLIBCXX_USE_NLS\n # include <libintl.h>\n # define _(msgid)   gettext (msgid)\n #else"}, {"sha": "5cfa621086ede80fe29ac3500feb305238827104", "filename": "libstdc++-v3/src/globals.cc", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -46,9 +46,9 @@\n // __gnu_cxx symbols into exported, namespace std symbols with the\n // appropriate symbol version name.\n // The rename syntax is \n-//   asm (\".symver currentname,oldname@@GLIBCPP_3.2\")\n+//   asm (\".symver currentname,oldname@@GLIBCXX_3.2\")\n // In macro form:\n-// _GLIBCPP_ASM_SYMVER(currentname, oldname, GLIBCPP_3.2)\n+// _GLIBCXX_ASM_SYMVER(currentname, oldname, GLIBCXX_3.2)\n \n namespace std\n {\n@@ -63,7 +63,7 @@ namespace std\n   fake_ostream cerr;\n   fake_ostream clog;\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   typedef char fake_wistream[sizeof(wistream)] \n   __attribute__ ((aligned(__alignof__(wistream))));\n   typedef char fake_wostream[sizeof(wostream)] \n@@ -93,7 +93,7 @@ namespace __gnu_cxx\n   fake_filebuf buf_cin;\n   fake_filebuf buf_cerr;\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   typedef char fake_wstdiobuf[sizeof(stdio_sync_filebuf<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(stdio_sync_filebuf<wchar_t>))));\n   fake_wstdiobuf buf_wcout_sync;\n@@ -117,19 +117,19 @@ namespace __gnu_cxx\n \n   typedef char fake_name_vec[sizeof(char*)]\n   __attribute__ ((aligned(__alignof__(char*))));\n-  fake_name_vec name_vec[6 + _GLIBCPP_NUM_CATEGORIES];\n+  fake_name_vec name_vec[6 + _GLIBCXX_NUM_CATEGORIES];\n \n   typedef char fake_names[sizeof(char[2])]\n   __attribute__ ((aligned(__alignof__(char[2]))));\n-  fake_names name_c[6 + _GLIBCPP_NUM_CATEGORIES];\n+  fake_names name_c[6 + _GLIBCXX_NUM_CATEGORIES];\n \n   typedef char fake_facet_vec[sizeof(locale::facet*)]\n   __attribute__ ((aligned(__alignof__(locale::facet*))));\n-  fake_facet_vec facet_vec[_GLIBCPP_NUM_FACETS];\n+  fake_facet_vec facet_vec[_GLIBCXX_NUM_FACETS];\n \n   typedef char fake_cache_vec[sizeof(locale::facet*)]\n   __attribute__ ((aligned(__alignof__(locale::facet*))));\n-  fake_cache_vec cache_vec[_GLIBCPP_NUM_FACETS];\n+  fake_cache_vec cache_vec[_GLIBCXX_NUM_FACETS];\n \n   typedef char fake_ctype_c[sizeof(std::ctype<char>)]\n   __attribute__ ((aligned(__alignof__(std::ctype<char>))));\n@@ -184,7 +184,7 @@ namespace __gnu_cxx\n   __attribute__ ((aligned(__alignof__(messages<char>))));\n   fake_messages_c messages_c;\n \n-#ifdef  _GLIBCPP_USE_WCHAR_T\n+#ifdef  _GLIBCXX_USE_WCHAR_T\n   typedef char fake_wtype_w[sizeof(std::ctype<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(std::ctype<wchar_t>))));\n   fake_wtype_w ctype_w;\n@@ -244,7 +244,7 @@ namespace __gnu_cxx\n   __attribute__ ((aligned(__alignof__(std::__numpunct_cache<char>))));\n   fake_locale_cache_c numpunct_cache_c;\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   typedef char fake_locale_cache_w[sizeof(std::__numpunct_cache<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(std::__numpunct_cache<wchar_t>))));\n   fake_locale_cache_w numpunct_cache_w;\n@@ -255,18 +255,18 @@ namespace __gnu_cxx\n   // function call to initialize a mutex.  For example, see stl_threads.h.\n #ifdef __GTHREAD_MUTEX_INIT\n #elif defined(__GTHREAD_MUTEX_INIT_FUNCTION)\n-  __gthread_once_t _GLIBCPP_once = __GTHREAD_ONCE_INIT;\n-  __gthread_mutex_t _GLIBCPP_mutex;\n-  __gthread_mutex_t *_GLIBCPP_mutex_address;\n+  __gthread_once_t _GLIBCXX_once = __GTHREAD_ONCE_INIT;\n+  __gthread_mutex_t _GLIBCXX_mutex;\n+  __gthread_mutex_t *_GLIBCXX_mutex_address;\n   \n-  // Once-only initializer function for _GLIBCPP_mutex.  \n+  // Once-only initializer function for _GLIBCXX_mutex.  \n   void\n-  _GLIBCPP_mutex_init ()\n-  { __GTHREAD_MUTEX_INIT_FUNCTION (&_GLIBCPP_mutex); }\n+  _GLIBCXX_mutex_init ()\n+  { __GTHREAD_MUTEX_INIT_FUNCTION (&_GLIBCXX_mutex); }\n \n-  // Once-only initializer function for _GLIBCPP_mutex_address.  \n+  // Once-only initializer function for _GLIBCXX_mutex_address.  \n   void\n-  _GLIBCPP_mutex_address_init ()\n-  { __GTHREAD_MUTEX_INIT_FUNCTION (_GLIBCPP_mutex_address); }\n+  _GLIBCXX_mutex_address_init ()\n+  { __GTHREAD_MUTEX_INIT_FUNCTION (_GLIBCXX_mutex_address); }\n #endif\n } // namespace __gnu_cxx"}, {"sha": "2b0e29c3e2f5ad7b1f27d2fe2f57b6c9eee46c2f", "filename": "libstdc++-v3/src/io-inst.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Fio-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Fio-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fio-inst.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -40,21 +40,21 @@ namespace std\n {\n   // basic_ios\n   template class basic_ios<char>;\n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template class basic_ios<wchar_t>;\n #endif\n \n   // iomanip\n   template class _Setfill<char>;\n   template _Setfill<char> setfill(char);\n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template class _Setfill<wchar_t>;\n   template _Setfill<wchar_t> setfill(wchar_t);\n #endif\n \n   // iostream\n   template class basic_iostream<char>;\n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template class basic_iostream<wchar_t>; \n #endif\n } // namespace std"}, {"sha": "daecdd482365fdf2adea2df76d9cca53b72774ee", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -51,7 +51,7 @@ namespace __gnu_cxx\n   extern stdio_filebuf<char> buf_cin;\n   extern stdio_filebuf<char> buf_cerr;\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   extern stdio_sync_filebuf<wchar_t> buf_wcout_sync;\n   extern stdio_sync_filebuf<wchar_t> buf_wcin_sync;\n   extern stdio_sync_filebuf<wchar_t> buf_wcerr_sync;\n@@ -71,7 +71,7 @@ namespace std\n   extern ostream cerr;\n   extern ostream clog;\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   extern wistream wcin;\n   extern wostream wcout;\n   extern wostream wcerr;\n@@ -182,7 +182,7 @@ namespace std\n \tcin.tie(&cout);\n \tcerr.flags(ios_base::unitbuf);\n \t\n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n \tnew (&buf_wcout_sync) stdio_sync_filebuf<wchar_t>(stdout);\n \tnew (&buf_wcin_sync) stdio_sync_filebuf<wchar_t>(stdin);\n \tnew (&buf_wcerr_sync) stdio_sync_filebuf<wchar_t>(stderr);\n@@ -212,7 +212,7 @@ namespace std\n \t    cerr.flush();\n \t    clog.flush();\n     \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n \t    wcout.flush();\n \t    wcerr.flush();\n \t    wclog.flush();    \n@@ -351,7 +351,7 @@ namespace std\n   bool \n   ios_base::sync_with_stdio(bool __sync)\n   { \n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n     // 49.  Underspecification of ios_base::sync_with_stdio\n     bool __ret = ios_base::Init::_S_synced_with_stdio;\n #endif\n@@ -369,7 +369,7 @@ namespace std\n \tbuf_cin_sync.~stdio_sync_filebuf<char>();\n \tbuf_cerr_sync.~stdio_sync_filebuf<char>();\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n \tbuf_wcout_sync.~stdio_sync_filebuf<wchar_t>();\n \tbuf_wcin_sync.~stdio_sync_filebuf<wchar_t>();\n \tbuf_wcerr_sync.~stdio_sync_filebuf<wchar_t>();\n@@ -386,7 +386,7 @@ namespace std\n \tcerr.rdbuf(&buf_cerr);\n \tclog.rdbuf(&buf_cerr);\n     \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n \tnew (&buf_wcout) stdio_filebuf<wchar_t>(stdout, ios_base::out);\n \tnew (&buf_wcin) stdio_filebuf<wchar_t>(stdin, ios_base::in);\n \tnew (&buf_wcerr) stdio_filebuf<wchar_t>(stderr, ios_base::out);"}, {"sha": "6b454eed83b86e18ea89b49885988387f731c923", "filename": "libstdc++-v3/src/istream-inst.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Fistream-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Fistream-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fistream-inst.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -54,7 +54,7 @@ namespace std\n   template istream& operator>>(istream&, _Setprecision);\n   template istream& operator>>(istream&, _Setw);\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template class basic_istream<wchar_t>;\n   template wistream& ws(wistream&);\n   template wistream& operator>>(wistream&, wchar_t&);"}, {"sha": "700009cb4631d717168beef1b8331180bdbcda67", "filename": "libstdc++-v3/src/limits.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -159,7 +159,7 @@ namespace std\n \n   // wchar_t\n   // This used to be problematic...\n-#ifdef _GLIBCPP_USE_WCHAR_T  \n+#ifdef _GLIBCXX_USE_WCHAR_T  \n   const bool numeric_limits<wchar_t>::is_specialized;\n   const int  numeric_limits<wchar_t>::digits;\n   const int  numeric_limits<wchar_t>::digits10;\n@@ -182,7 +182,7 @@ namespace std\n   const bool numeric_limits<wchar_t>::traps;\n   const bool numeric_limits<wchar_t>::tinyness_before;\n   const float_round_style numeric_limits<wchar_t>::round_style;\n-#endif // _GLIBCPP_USE_WCHAR_T\n+#endif // _GLIBCXX_USE_WCHAR_T\n \n   // short\n   const bool numeric_limits<short>::is_specialized;"}, {"sha": "deeb35eeb985448f2ccc83715e67dddb6f080d0d", "filename": "libstdc++-v3/src/locale-inst.cc", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -46,7 +46,7 @@ namespace std\n   template class money_get<char, istreambuf_iterator<char> >;\n   template class money_put<char, ostreambuf_iterator<char> >;\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template class moneypunct<wchar_t, false>;\n   template class moneypunct<wchar_t, true>;\n   template class moneypunct_byname<wchar_t, false>;\n@@ -73,7 +73,7 @@ namespace std\n     _M_convert_int(ostreambuf_iterator<char>, ios_base&, char, \n \t\t   unsigned long) const;\n \n-#ifdef _GLIBCPP_USE_LONG_LONG\n+#ifdef _GLIBCXX_USE_LONG_LONG\n   template\n     ostreambuf_iterator<char>\n     num_put<char, ostreambuf_iterator<char> >::\n@@ -99,7 +99,7 @@ namespace std\n     _M_convert_float(ostreambuf_iterator<char>, ios_base&, char, char, \n \t\t     long double) const;\n   \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template class numpunct<wchar_t>;\n   template struct __numpunct_cache<wchar_t>;\n   template class numpunct_byname<wchar_t>;\n@@ -118,7 +118,7 @@ namespace std\n     _M_convert_int(ostreambuf_iterator<wchar_t>, ios_base&, wchar_t, \n \t\t   unsigned long) const;\n \n-#ifdef _GLIBCPP_USE_LONG_LONG\n+#ifdef _GLIBCXX_USE_LONG_LONG\n   template\n     ostreambuf_iterator<wchar_t>\n     num_put<wchar_t, ostreambuf_iterator<wchar_t> >::\n@@ -152,7 +152,7 @@ namespace std\n   template class time_get<char, istreambuf_iterator<char> >;\n   template class time_get_byname<char, istreambuf_iterator<char> >;\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template class __timepunct<wchar_t>;\n   template class time_put<wchar_t, ostreambuf_iterator<wchar_t> >;\n   template class time_put_byname<wchar_t, ostreambuf_iterator<wchar_t> >;\n@@ -163,31 +163,31 @@ namespace std\n   // messages\n   template class messages<char>;\n   template class messages_byname<char>;\n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template class messages<wchar_t>;\n   template class messages_byname<wchar_t>;\n #endif\n   \n   // ctype\n   inline template class __ctype_abstract_base<char>;\n   template class ctype_byname<char>;\n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   inline template class __ctype_abstract_base<wchar_t>;\n   template class ctype_byname<wchar_t>;\n #endif\n   \n   // codecvt\n   inline template class __codecvt_abstract_base<char, char, mbstate_t>;\n   template class codecvt_byname<char, char, mbstate_t>;\n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   inline template class __codecvt_abstract_base<wchar_t, char, mbstate_t>;\n   template class codecvt_byname<wchar_t, char, mbstate_t>;\n #endif\n \n   // collate\n   template class collate<char>;\n   template class collate_byname<char>;\n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template class collate<wchar_t>;\n   template class collate_byname<wchar_t>;\n #endif\n@@ -246,7 +246,7 @@ namespace std\n     const messages<char>& \n     use_facet<messages<char> >(const locale&);\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template\n     const codecvt<wchar_t, char, mbstate_t>& \n     use_facet<codecvt<wchar_t, char, mbstate_t> >(locale const&);\n@@ -353,7 +353,7 @@ namespace std\n     bool\n     has_facet<messages<char> >(const locale&);\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n  template \n     bool\n     has_facet<ctype<wchar_t> >(const locale&);\n@@ -419,7 +419,7 @@ namespace std\n \n   template class __pad<char, char_traits<char> >;\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template\n     wchar_t*\n     __add_grouping<wchar_t>(wchar_t*, wchar_t, char const*, char const*, \n@@ -452,7 +452,7 @@ namespace std\n     __convert_from_v(char*, const int, const char*, unsigned long, \n \t\t     const __c_locale&, int);\n \n-#ifdef _GLIBCPP_USE_LONG_LONG\n+#ifdef _GLIBCXX_USE_LONG_LONG\n   template\n     int\n     __convert_from_v(char*, const int, const char*, long long, \n@@ -469,20 +469,20 @@ namespace std\n     __int_to_char(char*, const int, unsigned long, const char*, \n \t\t  ios_base::fmtflags, bool);\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template\n     int\n     __int_to_char(wchar_t*, const int, unsigned long, const wchar_t*, \n \t\t  ios_base::fmtflags, bool);\n #endif\n \n-#ifdef _GLIBCPP_USE_LONG_LONG\n+#ifdef _GLIBCXX_USE_LONG_LONG\n   template\n     int\n     __int_to_char(char*, const int, unsigned long long, const char*, \n \t\t  ios_base::fmtflags, bool);\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template\n     int\n     __int_to_char(wchar_t*, const int, unsigned long long, const wchar_t*,"}, {"sha": "e10abee991c012ecfb5041073ab31243578112d1", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -55,7 +55,7 @@ namespace std\n   const locale::category \tlocale::all;\n \n   // In the future, GLIBCXX_ABI > 5 should remove all uses of\n-  // _GLIBCPP_ASM_SYMVER in this file, and remove exports of any\n+  // _GLIBCXX_ASM_SYMVER in this file, and remove exports of any\n   // static data members of locale.\n \n   // These are no longer exported.\n@@ -72,7 +72,7 @@ namespace std\n   {\n     &std::ctype<char>::id, \n     &codecvt<char, char, mbstate_t>::id,\n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n     &std::ctype<wchar_t>::id,\n     &codecvt<wchar_t, char, mbstate_t>::id,\n #endif\n@@ -85,7 +85,7 @@ namespace std\n     &num_get<char>::id,  \n     &num_put<char>::id,  \n     &numpunct<char>::id, \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n     &num_get<wchar_t>::id,\n     &num_put<wchar_t>::id,\n     &numpunct<wchar_t>::id,\n@@ -97,7 +97,7 @@ namespace std\n   locale::_Impl::_S_id_collate[] =\n   {\n     &std::collate<char>::id,\n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n     &std::collate<wchar_t>::id,\n #endif\n     0\n@@ -109,7 +109,7 @@ namespace std\n     &__timepunct<char>::id, \n     &time_get<char>::id, \n     &time_put<char>::id, \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n     &__timepunct<wchar_t>::id, \n     &time_get<wchar_t>::id,\n     &time_put<wchar_t>::id,\n@@ -124,7 +124,7 @@ namespace std\n     &money_put<char>::id,        \n     &moneypunct<char, false>::id, \n     &moneypunct<char, true >::id, \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n     &money_get<wchar_t>::id,\n     &money_put<wchar_t>::id,\n     &moneypunct<wchar_t, false>::id,\n@@ -137,7 +137,7 @@ namespace std\n   locale::_Impl::_S_id_messages[] =\n   {\n     &std::messages<char>::id, \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n     &std::messages<wchar_t>::id,\n #endif\n     0\n@@ -425,7 +425,7 @@ namespace std\n \t  case LC_TIME:     \n \t    __ret = time; \n \t    break;\n-#ifdef _GLIBCPP_HAVE_LC_MESSAGES\n+#ifdef _GLIBCXX_HAVE_LC_MESSAGES\n \t  case LC_MESSAGES: \n \t    __ret = messages;\n \t    break;\n@@ -464,7 +464,7 @@ namespace std\n       return static_cast<const __numpunct_cache<char>&>(*__caches[__i]);\n     }\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n     const __numpunct_cache<wchar_t>&\n     __use_cache(const locale& __loc)\n@@ -490,7 +490,7 @@ namespace std\n       \"IST\", \"EET\", \"CST\", \"JST\"  \n     };\n  \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template<> \n     const wchar_t*\n     __timepunct<wchar_t>::_S_timezones[14] =\n@@ -507,7 +507,7 @@ namespace std\n   const char* __num_base::_S_atoms_in = \"0123456789eEabcdfABCDF\";\n   const char* __num_base::_S_atoms_out =\"-+xX0123456789abcdef0123456789ABCDEF\";\n \n-  // _GLIBCPP_RESOLVE_LIB_DEFECTS\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // According to the resolution of DR 231, about 22.2.2.2.2, p11,\n   // \"str.precision() is specified in the conversion specification\".\n   void"}, {"sha": "3f4d18d1af99ecc100dda261c13675fee33e8a59", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -35,9 +35,9 @@ namespace __gnu_cxx\n   using namespace std;\n \n   // Defined in globals.cc.\n-  extern locale::facet* facet_vec[_GLIBCPP_NUM_FACETS];\n-  extern char* name_vec[6 + _GLIBCPP_NUM_CATEGORIES];\n-  extern char name_c[6 + _GLIBCPP_NUM_CATEGORIES][2];\n+  extern locale::facet* facet_vec[_GLIBCXX_NUM_FACETS];\n+  extern char* name_vec[6 + _GLIBCXX_NUM_CATEGORIES];\n+  extern char name_c[6 + _GLIBCXX_NUM_CATEGORIES][2];\n \n   extern std::ctype<char>\t\t\tctype_c;\n   extern std::collate<char> \t\t\tcollate_c;\n@@ -53,7 +53,7 @@ namespace __gnu_cxx\n   extern time_get<char> \t\t\ttime_get_c;\n   extern time_put<char> \t\t\ttime_put_c;\n   extern std::messages<char> \t\t\tmessages_c;\n-#ifdef  _GLIBCPP_USE_WCHAR_T\n+#ifdef  _GLIBCXX_USE_WCHAR_T\n   extern std::ctype<wchar_t>\t\t\tctype_w;\n   extern std::collate<wchar_t> \t\t\tcollate_w;\n   extern numpunct<wchar_t> \t\t\tnumpunct_w;\n@@ -70,9 +70,9 @@ namespace __gnu_cxx\n   extern std::messages<wchar_t> \t\tmessages_w;\n #endif\n \n-  extern locale::facet* cache_vec[_GLIBCPP_NUM_FACETS];\n+  extern locale::facet* cache_vec[_GLIBCXX_NUM_FACETS];\n   extern std::__numpunct_cache<char>\t\tnumpunct_cache_c;\n-#ifdef  _GLIBCPP_USE_WCHAR_T\n+#ifdef  _GLIBCXX_USE_WCHAR_T\n   extern std::__numpunct_cache<wchar_t>\t\tnumpunct_cache_w;\n #endif\n } // namespace __gnu_cxx\n@@ -158,7 +158,7 @@ namespace std\n   // Construct named _Impl.\n   locale::_Impl::\n   _Impl(const char* __s, size_t __refs) \n-  : _M_references(__refs), _M_facets_size(_GLIBCPP_NUM_FACETS)\n+  : _M_references(__refs), _M_facets_size(_GLIBCXX_NUM_FACETS)\n   {\n     // Initialize the underlying locale model, which also checks to\n     // see if the given name is valid.\n@@ -240,7 +240,7 @@ namespace std\n     _M_init_facet(new time_put<char>);\n     _M_init_facet(new std::messages<char>(__cloc, __s));\n \t\n-#ifdef  _GLIBCPP_USE_WCHAR_T\n+#ifdef  _GLIBCXX_USE_WCHAR_T\n     _M_init_facet(new std::ctype<wchar_t>(__cloc));\n     _M_init_facet(new codecvt<wchar_t, char, mbstate_t>(__cloc));\n     _M_init_facet(new numpunct<wchar_t>(__cloc));\n@@ -262,7 +262,7 @@ namespace std\n   // Construct \"C\" _Impl.\n   locale::_Impl::\n   _Impl(facet**, size_t __refs, bool) \n-  : _M_references(__refs), _M_facets_size(_GLIBCPP_NUM_FACETS)\n+  : _M_references(__refs), _M_facets_size(_GLIBCXX_NUM_FACETS)\n   {\n     // Initialize the underlying locale model.\n     locale::facet::_S_c_name[0] = 'C';\n@@ -313,7 +313,7 @@ namespace std\n     _M_init_facet(new (&time_put_c) time_put<char>(1));\n     _M_init_facet(new (&messages_c) std::messages<char>(1));\t\n \n-#ifdef  _GLIBCPP_USE_WCHAR_T\n+#ifdef  _GLIBCXX_USE_WCHAR_T\n     _M_init_facet(new (&ctype_w) std::ctype<wchar_t>(1));\n     _M_init_facet(new (&codecvt_w) codecvt<wchar_t, char, mbstate_t>(1));\n \n@@ -337,7 +337,7 @@ namespace std\n     // This locale is safe to pre-cache, after all the facets have\n     // been installed.\n     _M_caches[numpunct<char>::id._M_id()] = __npc;\n-#ifdef  _GLIBCPP_USE_WCHAR_T\n+#ifdef  _GLIBCXX_USE_WCHAR_T\n     _M_caches[numpunct<wchar_t>::id._M_id()] = __npw;\n #endif\n   }"}, {"sha": "e08ad9f88db050be3deedc9c50d6b2ca16cd951f", "filename": "libstdc++-v3/src/misc-inst.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -55,7 +55,7 @@ namespace std\n   template \n     basic_istream<char>& \n     getline(basic_istream<char>&, string&);\n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template \n     basic_istream<wchar_t>& \n     operator>>(basic_istream<wchar_t>&, wstring&);\n@@ -69,15 +69,15 @@ namespace std\n     basic_istream<wchar_t>& \n     getline(basic_istream<wchar_t>&, wstring&);\n #endif\n-#ifdef _GLIBCPP_INST_ATOMICITY_LOCK\n+#ifdef _GLIBCXX_INST_ATOMICITY_LOCK\n   template volatile int __Atomicity_lock<0>::_S_atomicity_lock;\n #endif\n } // namespace std\n \n \n namespace __gnu_cxx\n {\n-#ifdef _GLIBCPP_NEED_GENERIC_MUTEX\n+#ifdef _GLIBCXX_NEED_GENERIC_MUTEX\n #ifdef __GTHREAD_MUTEX_INIT\n   __gthread_mutex_t _Atomic_add_mutex = __GTHREAD_MUTEX_INIT;\n #else\n@@ -89,10 +89,10 @@ namespace __gnu_cxx\n     __GTHREAD_MUTEX_INIT_FUNCTION (&_Atomic_add_mutex);\n   }\n #endif\n-#endif // _GLIBCPP_NEED_GLOBAL_MUTEX\n+#endif // _GLIBCXX_NEED_GLOBAL_MUTEX\n \n   template class stdio_sync_filebuf<char>;\n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template class stdio_sync_filebuf<wchar_t>;\n #endif\n } // namespace __gnu_cxx"}, {"sha": "c4e2394f7864a7b239b77a757c12776378ae7864", "filename": "libstdc++-v3/src/ostream-inst.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Fostream-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Fostream-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fostream-inst.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -56,7 +56,7 @@ namespace std\n   template ostream& operator<<(ostream&, _Setprecision);\n   template ostream& operator<<(ostream&, _Setw);\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template class basic_ostream<wchar_t>;\n   template wostream& endl(wostream&);\n   template wostream& ends(wostream&);"}, {"sha": "3295c2f0f12c11eaca1b14a7bd1a9a44c88df884", "filename": "libstdc++-v3/src/sstream-inst.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Fsstream-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Fsstream-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fsstream-inst.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -38,25 +38,25 @@ namespace std\n {\n   // stringbuf\n   template class basic_stringbuf<char>;\n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template class basic_stringbuf<wchar_t>;\n #endif\n \n   // istringstream\n   template class basic_istringstream<char>;\n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template class basic_istringstream<wchar_t>; \n #endif\n \n   // ostringstream\n   template class basic_ostringstream<char>;\n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template class basic_ostringstream<wchar_t>; \n #endif\n \n   // stringstream\n   template class basic_stringstream<char>;\n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template class basic_stringstream<wchar_t>; \n #endif\n } // namespace std"}, {"sha": "49cb6052560bffc44fd81ad2abf0a602bd16b5a2", "filename": "libstdc++-v3/src/streambuf-inst.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Fstreambuf-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Fstreambuf-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstreambuf-inst.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -39,15 +39,15 @@ namespace std\n {\n   // streambuf\n   template class basic_streambuf<char>;\n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template class basic_streambuf<wchar_t>;\n #endif\n \n   template\n     streamsize\n     __copy_streambufs(basic_ios<char>&, basic_streambuf<char>*,\n \t\t      basic_streambuf<char>*); \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template\n     streamsize\n     __copy_streambufs(basic_ios<wchar_t>&, basic_streambuf<wchar_t>*,"}, {"sha": "bbfbe337eef367c58bae089ebf754cf23d2e66af", "filename": "libstdc++-v3/src/wstring-inst.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Fwstring-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Fsrc%2Fwstring-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fwstring-inst.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -1,6 +1,6 @@\n #include <bits/c++config.h>\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_WCHAR_T\n #define C wchar_t\n #include \"string-inst.cc\"\n #endif"}, {"sha": "6fdea9faf1789cf0624dde7ad8c69bcf421fb678", "filename": "libstdc++-v3/testsuite/17_intro/header_cwctype.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cwctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cwctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cwctype.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -20,7 +20,7 @@\n \n // 17.4.1.2 Headers, cwctype\n \n-#if _GLIBCPP_USE_WCHAR_T\n+#if _GLIBCXX_USE_WCHAR_T\n #include <cwctype>\n // Make sure wint_t is in namespace std\n std::wint_t i = 5;"}, {"sha": "9f0303e675be564eaeb8c317624641bb0ce9050b", "filename": "libstdc++-v3/testsuite/17_intro/headers.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -78,7 +78,7 @@\n \n // \"C\" headers that might not work if wchar_t support is disabled.\n #include <bits/c++config.h>\n-#if _GLIBCPP_USE_WCHAR_T\n+#if _GLIBCXX_USE_WCHAR_T\n   #include <cwchar>\n   #include <cwctype>\n #endif"}, {"sha": "eb5d9c53ac5cb82f85316516fbfddad95c3abe62", "filename": "libstdc++-v3/testsuite/17_intro/headers_c++.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders_c%2B%2B.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders_c%2B%2B.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders_c%2B%2B.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -60,7 +60,7 @@\n \n // \"C++\" headers that might not work if wchar_t support is disabled.\n #include <bits/c++config.h>\n-#if _GLIBCPP_USE_WCHAR_T\n+#if _GLIBCXX_USE_WCHAR_T\n   #include <cwchar>\n   #include <cwctype>\n   #include <wchar.h>"}, {"sha": "17aa083c538ea455ce066039ac8137fd421ee1e0", "filename": "libstdc++-v3/testsuite/17_intro/headers_c.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders_c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders_c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders_c.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -60,7 +60,7 @@\n \n // \"C\" headers that might not work if wchar_t support is disabled.\n #include <bits/c++config.h>\n-#if _GLIBCPP_USE_WCHAR_T\n+#if _GLIBCXX_USE_WCHAR_T\n   #include <wchar.h>\n   #include <wctype.h>\n   #include <cwchar>"}, {"sha": "1643625cb3ee9ba3bb0d59be663e44ef8bf813fe", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -49,9 +49,9 @@ DEFINE_EXTREMA(unsigned, 0U, UINT_MAX);\n DEFINE_EXTREMA(long, LONG_MIN, LONG_MAX);\n DEFINE_EXTREMA(unsigned long, 0UL, ULONG_MAX);\n \n-#if _GLIBCPP_USE_WCHAR_T\n+#if _GLIBCXX_USE_WCHAR_T\n DEFINE_EXTREMA(wchar_t, WCHAR_MIN, WCHAR_MAX);\n-#endif //_GLIBCPP_USE_WCHAR_T\n+#endif //_GLIBCXX_USE_WCHAR_T\n \n DEFINE_EXTREMA(float, FLT_MIN, FLT_MAX);\n DEFINE_EXTREMA(double, DBL_MIN, DBL_MAX);"}, {"sha": "b1dc652d6d4ee0afdd79bce62f1a4987c0e3f0b5", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/unicode/1.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funicode%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funicode%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funicode%2F1.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -25,7 +25,7 @@\n \n \n \n-#ifdef _GLIBCPP_USE___ENC_TRAITS\n+#ifdef _GLIBCXX_USE___ENC_TRAITS\n \n // Need some char_traits specializations for this to work.\n typedef unsigned short\t\t\tunicode_t;\n@@ -135,11 +135,11 @@ void test01()\n   cvt.length(state04, e_lit, e_lit + size, 5);\n   VERIFY( length_called );\n }\n-#endif // _GLIBCPP_USE___ENC_TRAITS\n+#endif // _GLIBCXX_USE___ENC_TRAITS\n \n int main ()\n {\n-#if _GLIBCPP_USE___ENC_TRAITS\n+#if _GLIBCXX_USE___ENC_TRAITS\n   test01();\n #endif \n "}, {"sha": "1fa9648f5e86faae5812c9e49439b757adb999b4", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/unicode/char.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funicode%2Fchar.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funicode%2Fchar.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funicode%2Fchar.cc?ref=3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "patch": "@@ -22,7 +22,7 @@\n #include <locale>\n #include <testsuite_hooks.h>\n \n-#ifdef _GLIBCPP_USE___ENC_TRAITS\n+#ifdef _GLIBCXX_USE___ENC_TRAITS\n \n // Need some char_traits specializations for this to work.\n typedef unsigned short\t\t\tunicode_t;\n@@ -288,11 +288,11 @@ void test02()\n   delete [] i_arr;\n }\n \n-#endif // _GLIBCPP_USE___ENC_TRAITS\n+#endif // _GLIBCXX_USE___ENC_TRAITS\n \n int main ()\n {\n-#if _GLIBCPP_USE___ENC_TRAITS\n+#if _GLIBCXX_USE___ENC_TRAITS\n   test01();\n   test02();\n #endif "}]}