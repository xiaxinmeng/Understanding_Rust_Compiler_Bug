{"sha": "8b679c9b242fe694269439e3e8be166a5e2d7dc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI2NzljOWIyNDJmZTY5NDI2OTQzOWUzZThiZTE2NmE1ZTJkN2RjOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2012-12-18T13:12:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-12-18T13:12:34Z"}, "message": "re PR middle-end/55555 (miscompilation at -O2 (number_of_iterations))\n\n2012-12-18  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/55555\n\t* tree-ssa-loop-niter.c (idx_infer_loop_bounds): Properly\n\tanalyze evolution of the index for the loop it is used in.\n\t* tree-scalar-evolution.c (instantiate_scev_name): Take\n\tinner loop we will be creating a chrec for.  Generalize\n\tfix for PR40281 and prune invalid SCEVs.\n\t(instantiate_scev_poly): Likewise - pass down inner loop\n\twe will be creating a chrec for.\n\t(instantiate_scev_binary): Take and pass through inner loop.\n\t(instantiate_array_ref): Likewise.\n\t(instantiate_scev_convert): Likewise.\n\t(instantiate_scev_not): Likewise.\n\t(instantiate_scev_3): Likewise.\n\t(instantiate_scev_2): Likewise.\n\t(instantiate_scev_1): Likewise.\n\t(instantiate_scev_r): Likewise.\n\t(resolve_mixers): Adjust.\n\t(instantiate_scev): Likewise.\n\n\t* gcc.dg/torture/pr55555.c: New testcase.\n\t* gcc.dg/vect/vect-iv-11.c: Adjust.\n\nFrom-SVN: r194578", "tree": {"sha": "4097eac3f8bd34e5c316b801522cc85d298958a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4097eac3f8bd34e5c316b801522cc85d298958a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b679c9b242fe694269439e3e8be166a5e2d7dc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b679c9b242fe694269439e3e8be166a5e2d7dc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b679c9b242fe694269439e3e8be166a5e2d7dc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b679c9b242fe694269439e3e8be166a5e2d7dc9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "898be2f38dd5832034f726feab95661f589ec007", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/898be2f38dd5832034f726feab95661f589ec007", "html_url": "https://github.com/Rust-GCC/gccrs/commit/898be2f38dd5832034f726feab95661f589ec007"}], "stats": {"total": 195, "additions": 142, "deletions": 53}, "files": [{"sha": "b032c96abe9822968b8747a888abcfe1f6a049b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b679c9b242fe694269439e3e8be166a5e2d7dc9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b679c9b242fe694269439e3e8be166a5e2d7dc9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b679c9b242fe694269439e3e8be166a5e2d7dc9", "patch": "@@ -1,3 +1,24 @@\n+2012-12-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/55555\n+\t* tree-ssa-loop-niter.c (idx_infer_loop_bounds): Properly\n+\tanalyze evolution of the index for the loop it is used in.\n+\t* tree-scalar-evolution.c (instantiate_scev_name): Take\n+\tinner loop we will be creating a chrec for.  Generalize\n+\tfix for PR40281 and prune invalid SCEVs.\n+\t(instantiate_scev_poly): Likewise - pass down inner loop\n+\twe will be creating a chrec for.\n+\t(instantiate_scev_binary): Take and pass through inner loop.\n+\t(instantiate_array_ref): Likewise.\n+\t(instantiate_scev_convert): Likewise.\n+\t(instantiate_scev_not): Likewise.\n+\t(instantiate_scev_3): Likewise.\n+\t(instantiate_scev_2): Likewise.\n+\t(instantiate_scev_1): Likewise.\n+\t(instantiate_scev_r): Likewise.\n+\t(resolve_mixers): Adjust.\n+\t(instantiate_scev): Likewise.\n+\n 2012-12-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/55717"}, {"sha": "551236c95c5d3283e3c9f7fda9a0f3a4020e12d4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b679c9b242fe694269439e3e8be166a5e2d7dc9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b679c9b242fe694269439e3e8be166a5e2d7dc9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8b679c9b242fe694269439e3e8be166a5e2d7dc9", "patch": "@@ -1,3 +1,9 @@\n+2012-12-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/55555\n+\t* gcc.dg/torture/pr55555.c: New testcase.\n+\t* gcc.dg/vect/vect-iv-11.c: Adjust.\n+\n 2012-12-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/55717"}, {"sha": "9e4226659d568983faabe362fc2ce7bf77124530", "filename": "gcc/testsuite/gcc.dg/torture/pr55555.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b679c9b242fe694269439e3e8be166a5e2d7dc9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55555.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b679c9b242fe694269439e3e8be166a5e2d7dc9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55555.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55555.c?ref=8b679c9b242fe694269439e3e8be166a5e2d7dc9", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+\n+double s[4] = { 1.0, 2.0, 3.0, 4.0 }, pol_x[2] = { 5.0, 6.0 };\n+\n+__attribute__((noinline)) int\n+foo (void)\n+{\n+  double coef_x[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };\n+  int lxp = 0;\n+  if (lxp <= 1)\n+    do\n+      {\n+\tdouble t = pol_x[lxp];\n+\tlong S;\n+\tlong l = lxp * 4L - 1;\n+\tfor (S = 1; S <= 4; S++)\n+\t  coef_x[S + l] = coef_x[S + l] + s[S - 1] * t;\n+      }\n+    while (lxp++ != 1);\n+  asm volatile (\"\" : : \"r\" (coef_x) : \"memory\");\n+  for (lxp = 0; lxp < 8; lxp++)\n+    if (coef_x[lxp] != ((lxp & 3) + 1) * (5.0 + (lxp >= 4)))\n+      __builtin_abort ();\n+  return 1;\n+}\n+\n+int\n+main ()\n+{\n+  asm volatile (\"\" : : : \"memory\");\n+  if (!foo ())\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "632b97c29501f053292b6826cfba0a175cc08bc5", "filename": "gcc/testsuite/gcc.dg/vect/vect-iv-11.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b679c9b242fe694269439e3e8be166a5e2d7dc9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b679c9b242fe694269439e3e8be166a5e2d7dc9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-11.c?ref=8b679c9b242fe694269439e3e8be166a5e2d7dc9", "patch": "@@ -3,7 +3,8 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-int main1 (int len)\n+int __attribute__((noinline,noclone))\n+main1 (int len)\n {  \n   int s = 0;\n   int i = len;"}, {"sha": "9fc2f79ab89f358b15f50269cac196b7e66eae5c", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 73, "deletions": 51, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b679c9b242fe694269439e3e8be166a5e2d7dc9/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b679c9b242fe694269439e3e8be166a5e2d7dc9/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=8b679c9b242fe694269439e3e8be166a5e2d7dc9", "patch": "@@ -2147,8 +2147,8 @@ loop_closed_phi_def (tree var)\n   return NULL_TREE;\n }\n \n-static tree instantiate_scev_r (basic_block, struct loop *, tree, bool,\n-\t\t\t\thtab_t, int);\n+static tree instantiate_scev_r (basic_block, struct loop *, struct loop *,\n+\t\t\t\ttree, bool, htab_t, int);\n \n /* Analyze all the parameters of the chrec, between INSTANTIATE_BELOW\n    and EVOLUTION_LOOP, that were left under a symbolic form.\n@@ -2166,7 +2166,8 @@ static tree instantiate_scev_r (basic_block, struct loop *, tree, bool,\n \n static tree\n instantiate_scev_name (basic_block instantiate_below,\n-\t\t       struct loop *evolution_loop, tree chrec,\n+\t\t       struct loop *evolution_loop, struct loop *inner_loop,\n+\t\t       tree chrec,\n \t\t       bool fold_conversions, htab_t cache, int size_expr)\n {\n   tree res;\n@@ -2225,7 +2226,8 @@ instantiate_scev_name (basic_block instantiate_below,\n \t  loop_p loop = loop_containing_stmt (SSA_NAME_DEF_STMT (chrec));\n \t  res = analyze_scalar_evolution (loop, chrec);\n \t  res = compute_overall_effect_of_inner_loop (loop, res);\n-\t  res = instantiate_scev_r (instantiate_below, evolution_loop, res,\n+\t  res = instantiate_scev_r (instantiate_below, evolution_loop,\n+\t\t\t\t    inner_loop, res,\n \t\t\t\t    fold_conversions, cache, size_expr);\n \t}\n       else if (!dominated_by_p (CDI_DOMINATORS, instantiate_below,\n@@ -2234,8 +2236,16 @@ instantiate_scev_name (basic_block instantiate_below,\n     }\n \n   else if (res != chrec_dont_know)\n-    res = instantiate_scev_r (instantiate_below, evolution_loop, res,\n-\t\t\t      fold_conversions, cache, size_expr);\n+    {\n+      if (inner_loop\n+\t  && !flow_loop_nested_p (def_bb->loop_father, inner_loop))\n+\t/* ???  We could try to compute the overall effect of the loop here.  */\n+\tres = chrec_dont_know;\n+      else\n+\tres = instantiate_scev_r (instantiate_below, evolution_loop,\n+\t\t\t\t  inner_loop, res,\n+\t\t\t\t  fold_conversions, cache, size_expr);\n+    }\n \n   /* Store the correct value to the cache.  */\n   set_instantiated_value (cache, instantiate_below, chrec, res);\n@@ -2258,17 +2268,20 @@ instantiate_scev_name (basic_block instantiate_below,\n \n static tree\n instantiate_scev_poly (basic_block instantiate_below,\n-\t\t       struct loop *evolution_loop, tree chrec,\n+\t\t       struct loop *evolution_loop, struct loop *,\n+\t\t       tree chrec,\n \t\t       bool fold_conversions, htab_t cache, int size_expr)\n {\n   tree op1;\n   tree op0 = instantiate_scev_r (instantiate_below, evolution_loop,\n+\t\t\t\t get_chrec_loop (chrec),\n \t\t\t\t CHREC_LEFT (chrec), fold_conversions, cache,\n \t\t\t\t size_expr);\n   if (op0 == chrec_dont_know)\n     return chrec_dont_know;\n \n   op1 = instantiate_scev_r (instantiate_below, evolution_loop,\n+\t\t\t    get_chrec_loop (chrec),\n \t\t\t    CHREC_RIGHT (chrec), fold_conversions, cache,\n \t\t\t    size_expr);\n   if (op1 == chrec_dont_know)\n@@ -2277,19 +2290,8 @@ instantiate_scev_poly (basic_block instantiate_below,\n   if (CHREC_LEFT (chrec) != op0\n       || CHREC_RIGHT (chrec) != op1)\n     {\n-      unsigned var = CHREC_VARIABLE (chrec);\n-\n-      /* When the instantiated stride or base has an evolution in an\n-\t innermost loop, return chrec_dont_know, as this is not a\n-\t valid SCEV representation.  In the reduced testcase for\n-\t PR40281 we would have {0, +, {1, +, 1}_2}_1 that has no\n-\t meaning.  */\n-      if ((tree_is_chrec (op0) && CHREC_VARIABLE (op0) > var)\n-\t  || (tree_is_chrec (op1) && CHREC_VARIABLE (op1) > var))\n-\treturn chrec_dont_know;\n-\n       op1 = chrec_convert_rhs (chrec_type (op0), op1, NULL);\n-      chrec = build_polynomial_chrec (var, op0, op1);\n+      chrec = build_polynomial_chrec (CHREC_VARIABLE (chrec), op0, op1);\n     }\n \n   return chrec;\n@@ -2311,18 +2313,19 @@ instantiate_scev_poly (basic_block instantiate_below,\n \n static tree\n instantiate_scev_binary (basic_block instantiate_below,\n-\t\t\t struct loop *evolution_loop, tree chrec, enum tree_code code,\n+\t\t\t struct loop *evolution_loop, struct loop *inner_loop,\n+\t\t\t tree chrec, enum tree_code code,\n \t\t\t tree type, tree c0, tree c1,\n \t\t\t bool fold_conversions, htab_t cache, int size_expr)\n {\n   tree op1;\n-  tree op0 = instantiate_scev_r (instantiate_below, evolution_loop,\n+  tree op0 = instantiate_scev_r (instantiate_below, evolution_loop, inner_loop,\n \t\t\t\t c0, fold_conversions, cache,\n \t\t\t\t size_expr);\n   if (op0 == chrec_dont_know)\n     return chrec_dont_know;\n \n-  op1 = instantiate_scev_r (instantiate_below, evolution_loop,\n+  op1 = instantiate_scev_r (instantiate_below, evolution_loop, inner_loop,\n \t\t\t    c1, fold_conversions, cache,\n \t\t\t    size_expr);\n   if (op1 == chrec_dont_know)\n@@ -2370,12 +2373,14 @@ instantiate_scev_binary (basic_block instantiate_below,\n \n static tree\n instantiate_array_ref (basic_block instantiate_below,\n-\t\t       struct loop *evolution_loop, tree chrec,\n+\t\t       struct loop *evolution_loop, struct loop *inner_loop,\n+\t\t       tree chrec,\n \t\t       bool fold_conversions, htab_t cache, int size_expr)\n {\n   tree res;\n   tree index = TREE_OPERAND (chrec, 1);\n-  tree op1 = instantiate_scev_r (instantiate_below, evolution_loop, index,\n+  tree op1 = instantiate_scev_r (instantiate_below, evolution_loop,\n+\t\t\t\t inner_loop, index,\n \t\t\t\t fold_conversions, cache, size_expr);\n \n   if (op1 == chrec_dont_know)\n@@ -2406,11 +2411,13 @@ instantiate_array_ref (basic_block instantiate_below,\n \n static tree\n instantiate_scev_convert (basic_block instantiate_below,\n-\t\t\t  struct loop *evolution_loop, tree chrec,\n+\t\t\t  struct loop *evolution_loop, struct loop *inner_loop,\n+\t\t\t  tree chrec,\n \t\t\t  tree type, tree op,\n \t\t\t  bool fold_conversions, htab_t cache, int size_expr)\n {\n-  tree op0 = instantiate_scev_r (instantiate_below, evolution_loop, op,\n+  tree op0 = instantiate_scev_r (instantiate_below, evolution_loop,\n+\t\t\t\t inner_loop, op,\n \t\t\t\t fold_conversions, cache, size_expr);\n \n   if (op0 == chrec_dont_know)\n@@ -2453,11 +2460,13 @@ instantiate_scev_convert (basic_block instantiate_below,\n \n static tree\n instantiate_scev_not (basic_block instantiate_below,\n-\t\t      struct loop *evolution_loop, tree chrec,\n+\t\t      struct loop *evolution_loop, struct loop *inner_loop,\n+\t\t      tree chrec,\n \t\t      enum tree_code code, tree type, tree op,\n \t\t      bool fold_conversions, htab_t cache, int size_expr)\n {\n-  tree op0 = instantiate_scev_r (instantiate_below, evolution_loop, op,\n+  tree op0 = instantiate_scev_r (instantiate_below, evolution_loop,\n+\t\t\t\t inner_loop, op,\n \t\t\t\t fold_conversions, cache, size_expr);\n \n   if (op0 == chrec_dont_know)\n@@ -2501,24 +2510,25 @@ instantiate_scev_not (basic_block instantiate_below,\n \n static tree\n instantiate_scev_3 (basic_block instantiate_below,\n-\t\t    struct loop *evolution_loop, tree chrec,\n+\t\t    struct loop *evolution_loop, struct loop *inner_loop,\n+\t\t    tree chrec,\n \t\t    bool fold_conversions, htab_t cache, int size_expr)\n {\n   tree op1, op2;\n   tree op0 = instantiate_scev_r (instantiate_below, evolution_loop,\n-\t\t\t\t TREE_OPERAND (chrec, 0),\n+\t\t\t\t inner_loop, TREE_OPERAND (chrec, 0),\n \t\t\t\t fold_conversions, cache, size_expr);\n   if (op0 == chrec_dont_know)\n     return chrec_dont_know;\n \n   op1 = instantiate_scev_r (instantiate_below, evolution_loop,\n-\t\t\t    TREE_OPERAND (chrec, 1),\n+\t\t\t    inner_loop, TREE_OPERAND (chrec, 1),\n \t\t\t    fold_conversions, cache, size_expr);\n   if (op1 == chrec_dont_know)\n     return chrec_dont_know;\n \n   op2 = instantiate_scev_r (instantiate_below, evolution_loop,\n-\t\t\t    TREE_OPERAND (chrec, 2),\n+\t\t\t    inner_loop, TREE_OPERAND (chrec, 2),\n \t\t\t    fold_conversions, cache, size_expr);\n   if (op2 == chrec_dont_know)\n     return chrec_dont_know;\n@@ -2548,18 +2558,19 @@ instantiate_scev_3 (basic_block instantiate_below,\n \n static tree\n instantiate_scev_2 (basic_block instantiate_below,\n-\t\t    struct loop *evolution_loop, tree chrec,\n+\t\t    struct loop *evolution_loop, struct loop *inner_loop,\n+\t\t    tree chrec,\n \t\t    bool fold_conversions, htab_t cache, int size_expr)\n {\n   tree op1;\n   tree op0 = instantiate_scev_r (instantiate_below, evolution_loop,\n-\t\t\t\t TREE_OPERAND (chrec, 0),\n+\t\t\t\t inner_loop, TREE_OPERAND (chrec, 0),\n \t\t\t\t fold_conversions, cache, size_expr);\n   if (op0 == chrec_dont_know)\n     return chrec_dont_know;\n \n   op1 = instantiate_scev_r (instantiate_below, evolution_loop,\n-\t\t\t    TREE_OPERAND (chrec, 1),\n+\t\t\t    inner_loop, TREE_OPERAND (chrec, 1),\n \t\t\t    fold_conversions, cache, size_expr);\n   if (op1 == chrec_dont_know)\n     return chrec_dont_know;\n@@ -2587,11 +2598,12 @@ instantiate_scev_2 (basic_block instantiate_below,\n \n static tree\n instantiate_scev_1 (basic_block instantiate_below,\n-\t\t    struct loop *evolution_loop, tree chrec,\n+\t\t    struct loop *evolution_loop, struct loop *inner_loop,\n+\t\t    tree chrec,\n \t\t    bool fold_conversions, htab_t cache, int size_expr)\n {\n   tree op0 = instantiate_scev_r (instantiate_below, evolution_loop,\n-\t\t\t\t TREE_OPERAND (chrec, 0),\n+\t\t\t\t inner_loop, TREE_OPERAND (chrec, 0),\n \t\t\t\t fold_conversions, cache, size_expr);\n \n   if (op0 == chrec_dont_know)\n@@ -2619,7 +2631,8 @@ instantiate_scev_1 (basic_block instantiate_below,\n \n static tree\n instantiate_scev_r (basic_block instantiate_below,\n-\t\t    struct loop *evolution_loop, tree chrec,\n+\t\t    struct loop *evolution_loop, struct loop *inner_loop,\n+\t\t    tree chrec,\n \t\t    bool fold_conversions, htab_t cache, int size_expr)\n {\n   /* Give up if the expression is larger than the MAX that we allow.  */\n@@ -2634,31 +2647,36 @@ instantiate_scev_r (basic_block instantiate_below,\n   switch (TREE_CODE (chrec))\n     {\n     case SSA_NAME:\n-      return instantiate_scev_name (instantiate_below, evolution_loop, chrec,\n+      return instantiate_scev_name (instantiate_below, evolution_loop,\n+\t\t\t\t    inner_loop, chrec,\n \t\t\t\t    fold_conversions, cache, size_expr);\n \n     case POLYNOMIAL_CHREC:\n-      return instantiate_scev_poly (instantiate_below, evolution_loop, chrec,\n+      return instantiate_scev_poly (instantiate_below, evolution_loop,\n+\t\t\t\t    inner_loop, chrec,\n \t\t\t\t    fold_conversions, cache, size_expr);\n \n     case POINTER_PLUS_EXPR:\n     case PLUS_EXPR:\n     case MINUS_EXPR:\n     case MULT_EXPR:\n-      return instantiate_scev_binary (instantiate_below, evolution_loop, chrec,\n+      return instantiate_scev_binary (instantiate_below, evolution_loop,\n+\t\t\t\t      inner_loop, chrec,\n \t\t\t\t      TREE_CODE (chrec), chrec_type (chrec),\n \t\t\t\t      TREE_OPERAND (chrec, 0),\n \t\t\t\t      TREE_OPERAND (chrec, 1),\n \t\t\t\t      fold_conversions, cache, size_expr);\n \n     CASE_CONVERT:\n-      return instantiate_scev_convert (instantiate_below, evolution_loop, chrec,\n+      return instantiate_scev_convert (instantiate_below, evolution_loop,\n+\t\t\t\t       inner_loop, chrec,\n \t\t\t\t       TREE_TYPE (chrec), TREE_OPERAND (chrec, 0),\n \t\t\t\t       fold_conversions, cache, size_expr);\n \n     case NEGATE_EXPR:\n     case BIT_NOT_EXPR:\n-      return instantiate_scev_not (instantiate_below, evolution_loop, chrec,\n+      return instantiate_scev_not (instantiate_below, evolution_loop,\n+\t\t\t\t   inner_loop, chrec,\n \t\t\t\t   TREE_CODE (chrec), TREE_TYPE (chrec),\n \t\t\t\t   TREE_OPERAND (chrec, 0),\n \t\t\t\t   fold_conversions, cache, size_expr);\n@@ -2671,7 +2689,8 @@ instantiate_scev_r (basic_block instantiate_below,\n       return chrec_known;\n \n     case ARRAY_REF:\n-      return instantiate_array_ref (instantiate_below, evolution_loop, chrec,\n+      return instantiate_array_ref (instantiate_below, evolution_loop,\n+\t\t\t\t    inner_loop, chrec,\n \t\t\t\t    fold_conversions, cache, size_expr);\n \n     default:\n@@ -2684,15 +2703,18 @@ instantiate_scev_r (basic_block instantiate_below,\n   switch (TREE_CODE_LENGTH (TREE_CODE (chrec)))\n     {\n     case 3:\n-      return instantiate_scev_3 (instantiate_below, evolution_loop, chrec,\n+      return instantiate_scev_3 (instantiate_below, evolution_loop,\n+\t\t\t\t inner_loop, chrec,\n \t\t\t\t fold_conversions, cache, size_expr);\n \n     case 2:\n-      return instantiate_scev_2 (instantiate_below, evolution_loop, chrec,\n+      return instantiate_scev_2 (instantiate_below, evolution_loop,\n+\t\t\t\t inner_loop, chrec,\n \t\t\t\t fold_conversions, cache, size_expr);\n \n     case 1:\n-      return instantiate_scev_1 (instantiate_below, evolution_loop, chrec,\n+      return instantiate_scev_1 (instantiate_below, evolution_loop,\n+\t\t\t\t inner_loop, chrec,\n \t\t\t\t fold_conversions, cache, size_expr);\n \n     case 0:\n@@ -2729,8 +2751,8 @@ instantiate_scev (basic_block instantiate_below, struct loop *evolution_loop,\n       fprintf (dump_file, \")\\n\");\n     }\n \n-  res = instantiate_scev_r (instantiate_below, evolution_loop, chrec, false,\n-\t\t\t    cache, 0);\n+  res = instantiate_scev_r (instantiate_below, evolution_loop,\n+\t\t\t    NULL, chrec, false, cache, 0);\n \n   if (dump_file && (dump_flags & TDF_SCEV))\n     {\n@@ -2753,8 +2775,8 @@ tree\n resolve_mixers (struct loop *loop, tree chrec)\n {\n   htab_t cache = htab_create (10, hash_scev_info, eq_scev_info, del_scev_info);\n-  tree ret = instantiate_scev_r (block_before_loop (loop), loop, chrec, true,\n-\t\t\t\t cache, 0);\n+  tree ret = instantiate_scev_r (block_before_loop (loop), loop, NULL,\n+\t\t\t\t chrec, true, cache, 0);\n   htab_delete (cache);\n   return ret;\n }"}, {"sha": "4a09999f434b3ea0bab52960130cc8f0f270d5cd", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b679c9b242fe694269439e3e8be166a5e2d7dc9/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b679c9b242fe694269439e3e8be166a5e2d7dc9/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=8b679c9b242fe694269439e3e8be166a5e2d7dc9", "patch": "@@ -2671,7 +2671,12 @@ idx_infer_loop_bounds (tree base, tree *idx, void *dta)\n       upper = false;\n     }\n \n-  ev = instantiate_parameters (loop, analyze_scalar_evolution (loop, *idx));\n+  struct loop *dloop = loop_containing_stmt (data->stmt);\n+  if (!dloop)\n+    return true;\n+\n+  ev = analyze_scalar_evolution (dloop, *idx);\n+  ev = instantiate_parameters (loop, ev);\n   init = initial_condition (ev);\n   step = evolution_part_in_loop_num (ev, loop->num);\n "}]}