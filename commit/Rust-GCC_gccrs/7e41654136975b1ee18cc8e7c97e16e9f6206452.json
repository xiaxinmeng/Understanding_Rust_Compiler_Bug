{"sha": "7e41654136975b1ee18cc8e7c97e16e9f6206452", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U0MTY1NDEzNjk3NWIxZWUxOGNjOGU3Yzk3ZTE2ZTlmNjIwNjQ1Mg==", "commit": {"author": {"name": "Bruce Korb", "email": "bkorb@gnu.org", "date": "2012-10-29T16:44:34Z"}, "committer": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "2012-10-29T16:44:34Z"}, "message": "Omit testing wrap and replacement fixes during testing.\n\nThis exposes a missing result and tests a test that got hidden before.\n\nFrom-SVN: r192952", "tree": {"sha": "041ab47b1a5538f005ec95ec88d8276481253110", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/041ab47b1a5538f005ec95ec88d8276481253110"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e41654136975b1ee18cc8e7c97e16e9f6206452", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e41654136975b1ee18cc8e7c97e16e9f6206452", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e41654136975b1ee18cc8e7c97e16e9f6206452", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e41654136975b1ee18cc8e7c97e16e9f6206452/comments", "author": {"login": "brkorb", "id": 1242936, "node_id": "MDQ6VXNlcjEyNDI5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1242936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brkorb", "html_url": "https://github.com/brkorb", "followers_url": "https://api.github.com/users/brkorb/followers", "following_url": "https://api.github.com/users/brkorb/following{/other_user}", "gists_url": "https://api.github.com/users/brkorb/gists{/gist_id}", "starred_url": "https://api.github.com/users/brkorb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brkorb/subscriptions", "organizations_url": "https://api.github.com/users/brkorb/orgs", "repos_url": "https://api.github.com/users/brkorb/repos", "events_url": "https://api.github.com/users/brkorb/events{/privacy}", "received_events_url": "https://api.github.com/users/brkorb/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "99a0106fa74a2d33ebb62ee5407e154508f59d83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99a0106fa74a2d33ebb62ee5407e154508f59d83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99a0106fa74a2d33ebb62ee5407e154508f59d83"}], "stats": {"total": 775, "additions": 592, "deletions": 183}, "files": [{"sha": "ffd62de300b80ecf4127cf80ceccccdbb0ae4695", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e41654136975b1ee18cc8e7c97e16e9f6206452/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e41654136975b1ee18cc8e7c97e16e9f6206452/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=7e41654136975b1ee18cc8e7c97e16e9f6206452", "patch": "@@ -1,3 +1,18 @@\n+2012-09-29  Bruce Korb  <bkorb@gnu.org>\n+\n+\t* README: testing wrap and replacement fixes is pointless.\n+\t* fixincl.c: export verbosity enumerations to fixlib.h\n+\t(run_compiles): mark replacement fixes to be skipped when\n+\tin testing mode\n+\t* fixlib.h: add a test mode and enumerations from fixincl.c\n+\t* check.tpl: set TEST_MODE in environment\n+\t* fixopts.c (initialize_opts): check for TEST_MODE in environment\n+\t* inclhack.def: move AAB_darwin7_9_long_double_funcs to\n+\tdarwin_9_long_double_funcs_2.  It is not a replacement fix.\n+\t* fixincl.x: regenerate\n+\t* tests/base/ioLib.h: the need for this is now exposed, so add it.\n+\t* tests/base/architecture/ppc/math.h: the correct result is now needed.\n+\n 2012-09-29  Robert Mason  <rbmj@verizon.net>\n \n \t* fixinc.in: Omit machine name checks for vxworks"}, {"sha": "9b482102b285248d2b8b1ae14c5ef3dff6199519", "filename": "fixincludes/README", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e41654136975b1ee18cc8e7c97e16e9f6206452/fixincludes%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e41654136975b1ee18cc8e7c97e16e9f6206452/fixincludes%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FREADME?ref=7e41654136975b1ee18cc8e7c97e16e9f6206452", "patch": "@@ -44,6 +44,9 @@ To make your fix, you will need to do several things:\n     Make sure it is now properly handled.  Add tests to the\n     \"test_text\" entry(ies) that validate your fix.  This will\n     help ensure that future fixes won't negate your work.\n+    Do *NOT* specify test text for \"wrap\" or \"replacement\" fixes.\n+    There is no real possibility that these fixes will fail.\n+    If they do, you will surely know straight away.\n \n 5.  Go into the fixincludes build directory and type, \"make check\".\n     You are guaranteed to have issues printed out as a result."}, {"sha": "0d1f44431fc55cc1bb265d25f4d6de22b717b4e3", "filename": "fixincludes/check.tpl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e41654136975b1ee18cc8e7c97e16e9f6206452/fixincludes%2Fcheck.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e41654136975b1ee18cc8e7c97e16e9f6206452/fixincludes%2Fcheck.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Fcheck.tpl?ref=7e41654136975b1ee18cc8e7c97e16e9f6206452", "patch": "@@ -99,6 +99,7 @@ ENDFOR  fix\n \n =]\n \n+export TEST_MODE=true\n find . -type f | sed 's;^\\./;;' | sort | ../../fixincl\n cd ${DESTDIR}\n "}, {"sha": "fecfb19e1b1aa119787ea6aee3f5a87f513486b8", "filename": "fixincludes/fixincl.c", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e41654136975b1ee18cc8e7c97e16e9f6206452/fixincludes%2Ffixincl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e41654136975b1ee18cc8e7c97e16e9f6206452/fixincludes%2Ffixincl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.c?ref=7e41654136975b1ee18cc8e7c97e16e9f6206452", "patch": "@@ -53,22 +53,8 @@ static const char z_std_preamble[] =\n     original, manufacturer supplied header file.  */\\n\\n\";\n \n int find_base_len = 0;\n-\n-typedef enum {\n-  VERB_SILENT = 0,\n-  VERB_FIXES,\n-  VERB_APPLIES,\n-  VERB_PROGRESS,\n-  VERB_TESTS,\n-  VERB_EVERYTHING\n-} te_verbose;\n-\n-te_verbose  verbose_level = VERB_PROGRESS;\n int have_tty = 0;\n \n-#define VLEVEL(l)  ((unsigned int) verbose_level >= (unsigned int) l)\n-#define NOT_SILENT VLEVEL(VERB_FIXES)\n-\n pid_t process_chain_head = (pid_t) -1;\n \n char*  pz_curr_file;  /*  name of the current file under test/fix  */\n@@ -412,8 +398,17 @@ run_compiles (void)\n   /* FOR every fixup, ...  */\n   do\n     {\n-      tTestDesc *p_test = p_fixd->p_test_desc;\n-      int test_ct = p_fixd->test_ct;\n+      tTestDesc *p_test;\n+      int test_ct;\n+\n+      if (fixinc_mode && (p_fixd->fd_flags & FD_REPLACEMENT))\n+        {\n+          p_fixd->fd_flags |= FD_SKIP_TEST;\n+          continue;\n+        }\n+\n+      p_test = p_fixd->p_test_desc;\n+      test_ct = p_fixd->test_ct;\n \n       /*  IF the machine type pointer is not NULL (we are not in test mode)\n              AND this test is for or not done on particular machines"}, {"sha": "4115772acab5ceb7b312d92108c3cd2c66af9b3b", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 461, "deletions": 50, "changes": 511, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e41654136975b1ee18cc8e7c97e16e9f6206452/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e41654136975b1ee18cc8e7c97e16e9f6206452/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=7e41654136975b1ee18cc8e7c97e16e9f6206452", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Saturday September 29, 2012 at 01:58:03 PM PDT\n+ * It has been AutoGen-ed  October 28, 2012 at 02:53:25 PM by AutoGen 5.17.0pre5\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Sat Sep 29 13:58:03 PDT 2012\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Sun Oct 28 14:53:25 PDT 2012\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 216 fixup descriptions.\n+ * This file contains 224 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -267,44 +267,6 @@ static const char* apzAab_Darwin7_9_Long_Double_FuncsPatch[] = {\n #endif /* __MATH__ */\",\n     (char*)NULL };\n \n-/* * * * * * * * * * * * * * * * * * * * * * * * * *\n- *\n- *  Description of Aab_Darwin7_9_Long_Double_Funcs_2 fix\n- */\n-tSCC zAab_Darwin7_9_Long_Double_Funcs_2Name[] =\n-     \"AAB_darwin7_9_long_double_funcs_2\";\n-\n-/*\n- *  File name selection pattern\n- */\n-tSCC zAab_Darwin7_9_Long_Double_Funcs_2List[] =\n-  \"math.h\\0\";\n-/*\n- *  Machine/OS name selection pattern\n- */\n-tSCC* apzAab_Darwin7_9_Long_Double_Funcs_2Machs[] = {\n-        \"*-*-darwin7.9*\",\n-        (const char*)NULL };\n-\n-/*\n- *  content selection pattern - do fix if pattern found\n- */\n-tSCC zAab_Darwin7_9_Long_Double_Funcs_2Select0[] =\n-       \"#include[ \\\\t]+\\\\\\\"\";\n-\n-#define    AAB_DARWIN7_9_LONG_DOUBLE_FUNCS_2_TEST_CT  1\n-static tTestDesc aAab_Darwin7_9_Long_Double_Funcs_2Tests[] = {\n-  { TT_EGREP,    zAab_Darwin7_9_Long_Double_Funcs_2Select0, (regex_t*)NULL }, };\n-\n-/*\n- *  Fix Command Arguments for Aab_Darwin7_9_Long_Double_Funcs_2\n- */\n-static const char* apzAab_Darwin7_9_Long_Double_Funcs_2Patch[] = {\n-    \"format\",\n-    \"%1<%2.h>\",\n-    \"([ \\\\t]*#[ \\\\t]*include[ \\\\t]+)\\\"([a-z0-9/]+)\\\\.h\\\"\",\n-    (char*)NULL };\n-\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Aab_Fd_Zero_Asm_Posix_Types_H fix\n@@ -537,6 +499,241 @@ static const char* apzAab_Sun_MemcpyPatch[] = {\n #endif /* __memory_h__ */\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Aab_Vxworks_Assert fix\n+ */\n+tSCC zAab_Vxworks_AssertName[] =\n+     \"AAB_vxworks_assert\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zAab_Vxworks_AssertList[] =\n+  \"assert.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzAab_Vxworks_AssertMachs[] = {\n+        \"*-*-vxworks*\",\n+        (const char*)NULL };\n+#define AAB_VXWORKS_ASSERT_TEST_CT  0\n+#define aAab_Vxworks_AssertTests   (tTestDesc*)NULL\n+\n+/*\n+ *  Fix Command Arguments for Aab_Vxworks_Assert\n+ */\n+static const char* apzAab_Vxworks_AssertPatch[] = {\n+\"#ifndef _ASSERT_H\\n\\\n+#define _ASSERT_H\\n\\n\\\n+#ifdef assert\\n\\\n+#undef assert\\n\\\n+#endif\\n\\n\\\n+#if defined(__STDC__) || defined(__cplusplus)\\n\\\n+extern void __assert (const char*);\\n\\\n+#else\\n\\\n+extern void __assert ();\\n\\\n+#endif\\n\\n\\\n+#ifdef NDEBUG\\n\\\n+#define assert(ign) ((void)0)\\n\\\n+#else\\n\\n\\\n+#define ASSERT_STRINGIFY(str) ASSERT_STRINGIFY_HELPER(str)\\n\\\n+#define ASSERT_STRINGIFY_HELPER(str) #str\\n\\n\\\n+#define assert(test) ((void) \\\\\\n\\\n+        ((test) ? ((void)0) : \\\\\\n\\\n+        __assert(\\\"Assertion failed: \\\" ASSERT_STRINGIFY(test) \\\", file \\\" \\\\\\n\\\n+        __FILE__ \\\", line \\\" ASSERT_STRINGIFY(__LINE__) \\\"\\\\n\\\")))\\n\\n\\\n+#endif\\n\\n\\\n+#endif\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Aab_Vxworks_Regs_Vxtypes fix\n+ */\n+tSCC zAab_Vxworks_Regs_VxtypesName[] =\n+     \"AAB_vxworks_regs_vxtypes\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zAab_Vxworks_Regs_VxtypesList[] =\n+  \"regs.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzAab_Vxworks_Regs_VxtypesMachs[] = {\n+        \"*-*-vxworks*\",\n+        (const char*)NULL };\n+#define AAB_VXWORKS_REGS_VXTYPES_TEST_CT  0\n+#define aAab_Vxworks_Regs_VxtypesTests   (tTestDesc*)NULL\n+\n+/*\n+ *  Fix Command Arguments for Aab_Vxworks_Regs_Vxtypes\n+ */\n+static const char* apzAab_Vxworks_Regs_VxtypesPatch[] = {\n+\"#ifndef _REGS_H\\n\\\n+#define _REGS_H\\n\\\n+#include <types/vxTypesOld.h>\\n\\\n+#include_next <arch/../regs.h>\\n\\\n+#endif\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Aab_Vxworks_Stdint fix\n+ */\n+tSCC zAab_Vxworks_StdintName[] =\n+     \"AAB_vxworks_stdint\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zAab_Vxworks_StdintList[] =\n+  \"stdint.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzAab_Vxworks_StdintMachs[] = {\n+        \"*-*-vxworks*\",\n+        (const char*)NULL };\n+#define AAB_VXWORKS_STDINT_TEST_CT  0\n+#define aAab_Vxworks_StdintTests   (tTestDesc*)NULL\n+\n+/*\n+ *  Fix Command Arguments for Aab_Vxworks_Stdint\n+ */\n+static const char* apzAab_Vxworks_StdintPatch[] = {\n+\"#ifndef _STDINT_H\\n\\\n+#define _STDINT_H\\n\\\n+/* get int*_t, uint*_t */\\n\\\n+#include <types/vxTypes.h>\\n\\n\\\n+/* get legacy vxworks types for compatibility */\\n\\\n+#include <types/vxTypesOld.h>\\n\\n\\\n+typedef long intptr_t;\\n\\\n+typedef unsigned long uintptr_t;\\n\\n\\\n+typedef int64_t intmax_t;\\n\\\n+typedef uint64_t uintmax_t;\\n\\n\\\n+typedef int8_t int_least8_t;\\n\\\n+typedef int16_t int_least16_t;\\n\\\n+typedef int32_t int_least32_t;\\n\\\n+typedef int64_t int_least64_t;\\n\\n\\\n+typedef uint8_t uint_least8_t;\\n\\\n+typedef uint16_t uint_least16_t;\\n\\\n+typedef uint32_t uint_least32_t;\\n\\\n+typedef uint64_t uint_least64_t;\\n\\n\\\n+typedef int8_t int_fast8_t;\\n\\\n+typedef int int_fast16_t;\\n\\\n+typedef int32_t int_fast32_t;\\n\\\n+typedef int64_t int_fast64_t;\\n\\n\\\n+typedef uint8_t uint_fast8_t;\\n\\\n+typedef unsigned int uint_fast16_t;\\n\\\n+typedef uint32_t uint_fast32_t;\\n\\\n+typedef uint64_t uint_fast64_t;\\n\\n\\\n+/* Ranges */\\n\\\n+#define UINT8_MAX (~(uint8_t)0)\\n\\\n+#define UINT8_MIN 0\\n\\\n+#define UINT16_MAX (~(uint16_t)0)\\n\\\n+#define UINT16_MIN 0\\n\\\n+#define UINT32_MAX (~(uint32_t)0)\\n\\\n+#define UINT32_MIN 0\\n\\\n+#define UINT64_MAX (~(uint64_t)0)\\n\\\n+#define UINT64_MIN 0\\n\\n\\\n+#define UINTPTR_MAX (~(uintptr_t)0)\\n\\\n+#define UINTPTR_MIN 0\\n\\n\\\n+/* Need to do int_fast16_t as well, as type\\n\\\n+   size may be architecture dependent */\\n\\\n+#define UINT_FAST16_MAX (~(uint_fast16_t)0)\\n\\\n+#define UINT_FAST16_MAX 0\\n\\n\\\n+#define INT8_MAX (UINT8_MAX>>1)\\n\\\n+#define INT8_MIN (INT8_MAX+1)\\n\\\n+#define INT16_MAX (UINT16_MAX>>1)\\n\\\n+#define INT16_MIN (INT16_MAX+1)\\n\\\n+#define INT32_MAX (UINT32_MAX>>1)\\n\\\n+#define INT32_MIN (INT32_MAX+1)\\n\\\n+#define INT64_MAX (UINT64_MAX>>1)\\n\\\n+#define INT64_MIN (INT64_MAX+1)\\n\\n\\\n+#define INTPTR_MAX (UINTPTR_MAX>>1)\\n\\\n+#define INTPTR_MIN (INTPTR_MAX+1)\\t\\n\\n\\\n+#define INT_FAST16_MAX (UINT_FAST16_MAX>>1)\\n\\\n+#define INT_FAST16_MIN (INT_FAST16_MAX+1)\\n\\n\\\n+/* now define equiv. constants */\\n\\\n+#define UINT_FAST8_MAX UINT8_MAX\\n\\\n+#define UINT_FAST8_MIN UINT_FAST8_MIN\\n\\\n+#define INT_FAST8_MAX INT8_MAX\\n\\\n+#define INT_FAST8_MIN INT8_MIN\\n\\\n+#define UINT_FAST32_MAX UINT32_MAX\\n\\\n+#define UINT_FAST32_MIN UINT32_MIN\\n\\\n+#define INT_FAST32_MAX INT32_MAX\\n\\\n+#define INT_FAST32_MIN INT32_MIN\\n\\\n+#define UINT_FAST64_MAX UINT64_MAX\\n\\\n+#define UINT_FAST64_MIN UINT64_MIN\\n\\\n+#define INT_FAST64_MAX INT64_MAX\\n\\\n+#define INT_FAST64_MIN INT64_MIN\\n\\n\\\n+#define UINT_LEAST8_MAX UINT8_MAX\\n\\\n+#define UINT_LEAST8_MIN UINT8_MIN\\n\\\n+#define INT_LEAST8_MAX INT8_MAX\\n\\\n+#define INT_LEAST8_MIN INT8_MIN\\n\\\n+#define UINT_LEAST16_MAX UINT16_MAX\\n\\\n+#define UINT_LEAST16_MIN UINT16_MIN\\n\\\n+#define INT_LEAST16_MAX INT16_MAX\\n\\\n+#define INT_LEAST16_MIN INT16_MIN\\n\\\n+#define UINT_LEAST32_MAX UINT32_MAX\\n\\\n+#define UINT_LEAST32_MIN UINT32_MIN\\n\\\n+#define INT_LEAST32_MAX INT32_MAX\\n\\\n+#define INT_LEAST32_MIN INT32_MIN\\n\\\n+#define UINT_LEAST64_MAX UINT64_MAX\\n\\\n+#define UINT_LEAST64_MIN UINT64_MIN\\n\\\n+#define INT_LEAST64_MAX INT64_MAX\\n\\\n+#define INT_LEAST64_MIN INT64_MIN\\n\\n\\\n+#define UINTMAX_MAX UINT64_MAX\\n\\\n+#define UINTMAX_MIN UINT64_MIN\\n\\\n+#define INTMAX_MAX INT64_MAX\\n\\\n+#define INTMAX_MIN INT64_MIN\\n\\n\\\n+#endif\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Aab_Vxworks_Unistd fix\n+ */\n+tSCC zAab_Vxworks_UnistdName[] =\n+     \"AAB_vxworks_unistd\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zAab_Vxworks_UnistdList[] =\n+  \"unistd.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzAab_Vxworks_UnistdMachs[] = {\n+        \"*-*-vxworks*\",\n+        (const char*)NULL };\n+#define AAB_VXWORKS_UNISTD_TEST_CT  0\n+#define aAab_Vxworks_UnistdTests   (tTestDesc*)NULL\n+\n+/*\n+ *  Fix Command Arguments for Aab_Vxworks_Unistd\n+ */\n+static const char* apzAab_Vxworks_UnistdPatch[] = {\n+\"#ifndef _UNISTD_H\\n\\\n+#define _UNISTD_H\\n\\\n+#include_next <unistd.h>\\n\\\n+#include <ioLib.h>\\n\\\n+#ifndef STDIN_FILENO\\n\\\n+#define STDIN_FILENO 0\\n\\\n+#endif\\n\\\n+#ifndef STDOUT_FILENO\\n\\\n+#define STDOUT_FILENO 1\\n\\\n+#endif\\n\\\n+#ifndef STDERR_FILENO\\n\\\n+#define STDERR_FILENO 2\\n\\\n+#endif\\n\\\n+#endif /* _UNISTD_H */\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Aix_Complex fix\n@@ -1758,7 +1955,7 @@ tSCC zBroken_NanList[] =\n  *  content selection pattern - do fix if pattern found\n  */\n tSCC zBroken_NanSelect0[] =\n-       \"#if defined(__APPLE_CC__) && (__APPLE_CC__ >= 1345)\";\n+       \"#if defined\\\\(__APPLE_CC__\\\\) && \\\\(__APPLE_CC__ >= 1345\\\\)\";\n \n /*\n  *  content bypass pattern - skip fix if pattern found\n@@ -1969,6 +2166,44 @@ extern \\\"C\\\" {\\n\\\n #endif\\n\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Darwin_9_Long_Double_Funcs_2 fix\n+ */\n+tSCC zDarwin_9_Long_Double_Funcs_2Name[] =\n+     \"darwin_9_long_double_funcs_2\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zDarwin_9_Long_Double_Funcs_2List[] =\n+  \"math.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzDarwin_9_Long_Double_Funcs_2Machs[] = {\n+        \"*-*-darwin7.9*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zDarwin_9_Long_Double_Funcs_2Select0[] =\n+       \"#include[ \\\\t]+\\\\\\\"\";\n+\n+#define    DARWIN_9_LONG_DOUBLE_FUNCS_2_TEST_CT  1\n+static tTestDesc aDarwin_9_Long_Double_Funcs_2Tests[] = {\n+  { TT_EGREP,    zDarwin_9_Long_Double_Funcs_2Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Darwin_9_Long_Double_Funcs_2\n+ */\n+static const char* apzDarwin_9_Long_Double_Funcs_2Patch[] = {\n+    \"format\",\n+    \"%1<%2.h>\",\n+    \"([ \\\\t]*#[ \\\\t]*include[ \\\\t]+)\\\"([a-z0-9/]+)\\\\.h\\\"\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Darwin_Externc fix\n@@ -8497,6 +8732,68 @@ static const char* apzVxworks_Gcc_ProblemPatch[] = { sed_cmd_z,\n #endif\\n\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Vxworks_Ioctl_Macro fix\n+ */\n+tSCC zVxworks_Ioctl_MacroName[] =\n+     \"vxworks_ioctl_macro\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zVxworks_Ioctl_MacroList[] =\n+  \"ioLib.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzVxworks_Ioctl_MacroMachs[] = {\n+        \"*-*-vxworks*\",\n+        (const char*)NULL };\n+#define VXWORKS_IOCTL_MACRO_TEST_CT  0\n+#define aVxworks_Ioctl_MacroTests   (tTestDesc*)NULL\n+\n+/*\n+ *  Fix Command Arguments for Vxworks_Ioctl_Macro\n+ */\n+static const char* apzVxworks_Ioctl_MacroPatch[] = {\n+    \"format\",\n+    \"%0\\n\\\n+#define ioctl(fd, func, arg) (ioctl)(fd, func, (int)(arg))\\n\",\n+    \"extern[\\t ]+int[\\t ]+ioctl[\\t ]*\\\\([\\t ,[:alnum:]]*\\\\);\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Vxworks_Mkdir_Macro fix\n+ */\n+tSCC zVxworks_Mkdir_MacroName[] =\n+     \"vxworks_mkdir_macro\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zVxworks_Mkdir_MacroList[] =\n+  \"sys/stat.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzVxworks_Mkdir_MacroMachs[] = {\n+        \"*-*-vxworks*\",\n+        (const char*)NULL };\n+#define VXWORKS_MKDIR_MACRO_TEST_CT  0\n+#define aVxworks_Mkdir_MacroTests   (tTestDesc*)NULL\n+\n+/*\n+ *  Fix Command Arguments for Vxworks_Mkdir_Macro\n+ */\n+static const char* apzVxworks_Mkdir_MacroPatch[] = {\n+    \"format\",\n+    \"%0\\n\\\n+#define mkdir(dir, ...) ((void)0, ##__VA_ARGS__, (mkdir)(dir))\\n\",\n+    \"extern[\\t ]+STATUS[\\t ]+mkdir[\\t ]*\\\\([\\t ]*const[\\t ]+char[\\t ]*\\\\*[\\t ]*(|[_[:alpha:]][_[:alnum:]]*)\\\\)[\\t ]*;\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Vxworks_Needs_Vxtypes fix\n@@ -8580,6 +8877,42 @@ static const char* apzVxworks_Needs_VxworksPatch[] = { sed_cmd_z,\n #include <types/vxTypesOld.h>\\n\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Vxworks_Regs fix\n+ */\n+tSCC zVxworks_RegsName[] =\n+     \"vxworks_regs\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+#define zVxworks_RegsList (char*)NULL\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzVxworks_RegsMachs[] = {\n+        \"*-*-vxworks*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zVxworks_RegsSelect0[] =\n+       \"#[\\t ]*include[\\t ]+[<\\\"]regs.h[>\\\"]\";\n+\n+#define    VXWORKS_REGS_TEST_CT  1\n+static tTestDesc aVxworks_RegsTests[] = {\n+  { TT_EGREP,    zVxworks_RegsSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Vxworks_Regs\n+ */\n+static const char* apzVxworks_RegsPatch[] = {\n+    \"format\",\n+    \"#include <arch/../regs.h>\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Vxworks_Time fix\n@@ -8630,6 +8963,36 @@ typedef void (*__gcc_VOIDFUNCPTR) ();\\n\\\n #define VOIDFUNCPTR __gcc_VOIDFUNCPTR\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Vxworks_Write_Const fix\n+ */\n+tSCC zVxworks_Write_ConstName[] =\n+     \"vxworks_write_const\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zVxworks_Write_ConstList[] =\n+  \"ioLib.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzVxworks_Write_ConstMachs[] = {\n+        \"*-*-vxworks*\",\n+        (const char*)NULL };\n+#define VXWORKS_WRITE_CONST_TEST_CT  0\n+#define aVxworks_Write_ConstTests   (tTestDesc*)NULL\n+\n+/*\n+ *  Fix Command Arguments for Vxworks_Write_Const\n+ */\n+static const char* apzVxworks_Write_ConstPatch[] = {\n+    \"format\",\n+    \"extern int  write (int, const char*, size_t);\",\n+    \"extern[\\t ]+int[\\t ]+write[\\t ]*\\\\([\\t ]*int[\\t ]*,[\\t ]*char[\\t ]*\\\\*[\\t ]*,[\\t ]*size_t[\\t ]*\\\\)[\\t ]*;\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of X11_Class fix\n@@ -8800,9 +9163,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          259\n+#define REGEX_COUNT          260\n #define MACH_LIST_SIZE_LIMIT 181\n-#define FIX_COUNT            216\n+#define FIX_COUNT            224\n \n /*\n  *  Enumerate the fixes\n@@ -8811,12 +9174,15 @@ typedef enum {\n     AAB_AIX_STDIO_FIXIDX,\n     AAB_AIX_FCNTL_FIXIDX,\n     AAB_DARWIN7_9_LONG_DOUBLE_FUNCS_FIXIDX,\n-    AAB_DARWIN7_9_LONG_DOUBLE_FUNCS_2_FIXIDX,\n     AAB_FD_ZERO_ASM_POSIX_TYPES_H_FIXIDX,\n     AAB_FD_ZERO_GNU_TYPES_H_FIXIDX,\n     AAB_FD_ZERO_SELECTBITS_H_FIXIDX,\n     AAB_SOLARIS_SYS_VARARGS_H_FIXIDX,\n     AAB_SUN_MEMCPY_FIXIDX,\n+    AAB_VXWORKS_ASSERT_FIXIDX,\n+    AAB_VXWORKS_REGS_VXTYPES_FIXIDX,\n+    AAB_VXWORKS_STDINT_FIXIDX,\n+    AAB_VXWORKS_UNISTD_FIXIDX,\n     AIX_COMPLEX_FIXIDX,\n     AIX_MALLOC_FIXIDX,\n     AIX_NET_IF_ARP_FIXIDX,\n@@ -8854,6 +9220,7 @@ typedef enum {\n     CTRL_QUOTES_DEF_FIXIDX,\n     CTRL_QUOTES_USE_FIXIDX,\n     CXX_UNREADY_FIXIDX,\n+    DARWIN_9_LONG_DOUBLE_FUNCS_2_FIXIDX,\n     DARWIN_EXTERNC_FIXIDX,\n     DARWIN_GCC4_BREAKAGE_FIXIDX,\n     DARWIN_PRIVATE_EXTERN_FIXIDX,\n@@ -9017,9 +9384,13 @@ typedef enum {\n     VMS_USE_FAST_SETJMP_FIXIDX,\n     VOID_NULL_FIXIDX,\n     VXWORKS_GCC_PROBLEM_FIXIDX,\n+    VXWORKS_IOCTL_MACRO_FIXIDX,\n+    VXWORKS_MKDIR_MACRO_FIXIDX,\n     VXWORKS_NEEDS_VXTYPES_FIXIDX,\n     VXWORKS_NEEDS_VXWORKS_FIXIDX,\n+    VXWORKS_REGS_FIXIDX,\n     VXWORKS_TIME_FIXIDX,\n+    VXWORKS_WRITE_CONST_FIXIDX,\n     X11_CLASS_FIXIDX,\n     X11_CLASS_USAGE_FIXIDX,\n     X11_NEW_FIXIDX,\n@@ -9042,11 +9413,6 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      AAB_DARWIN7_9_LONG_DOUBLE_FUNCS_TEST_CT, FD_MACH_ONLY | FD_REPLACEMENT,\n      aAab_Darwin7_9_Long_Double_FuncsTests,   apzAab_Darwin7_9_Long_Double_FuncsPatch, 0 },\n \n-  {  zAab_Darwin7_9_Long_Double_Funcs_2Name,    zAab_Darwin7_9_Long_Double_Funcs_2List,\n-     apzAab_Darwin7_9_Long_Double_Funcs_2Machs,\n-     AAB_DARWIN7_9_LONG_DOUBLE_FUNCS_2_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n-     aAab_Darwin7_9_Long_Double_Funcs_2Tests,   apzAab_Darwin7_9_Long_Double_Funcs_2Patch, 0 },\n-\n   {  zAab_Fd_Zero_Asm_Posix_Types_HName,    zAab_Fd_Zero_Asm_Posix_Types_HList,\n      apzAab_Fd_Zero_Asm_Posix_Types_HMachs,\n      AAB_FD_ZERO_ASM_POSIX_TYPES_H_TEST_CT, FD_MACH_ONLY | FD_REPLACEMENT,\n@@ -9072,6 +9438,26 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      AAB_SUN_MEMCPY_TEST_CT, FD_MACH_ONLY | FD_REPLACEMENT,\n      aAab_Sun_MemcpyTests,   apzAab_Sun_MemcpyPatch, 0 },\n \n+  {  zAab_Vxworks_AssertName,    zAab_Vxworks_AssertList,\n+     apzAab_Vxworks_AssertMachs,\n+     AAB_VXWORKS_ASSERT_TEST_CT, FD_MACH_ONLY | FD_REPLACEMENT,\n+     aAab_Vxworks_AssertTests,   apzAab_Vxworks_AssertPatch, 0 },\n+\n+  {  zAab_Vxworks_Regs_VxtypesName,    zAab_Vxworks_Regs_VxtypesList,\n+     apzAab_Vxworks_Regs_VxtypesMachs,\n+     AAB_VXWORKS_REGS_VXTYPES_TEST_CT, FD_MACH_ONLY | FD_REPLACEMENT,\n+     aAab_Vxworks_Regs_VxtypesTests,   apzAab_Vxworks_Regs_VxtypesPatch, 0 },\n+\n+  {  zAab_Vxworks_StdintName,    zAab_Vxworks_StdintList,\n+     apzAab_Vxworks_StdintMachs,\n+     AAB_VXWORKS_STDINT_TEST_CT, FD_MACH_ONLY | FD_REPLACEMENT,\n+     aAab_Vxworks_StdintTests,   apzAab_Vxworks_StdintPatch, 0 },\n+\n+  {  zAab_Vxworks_UnistdName,    zAab_Vxworks_UnistdList,\n+     apzAab_Vxworks_UnistdMachs,\n+     AAB_VXWORKS_UNISTD_TEST_CT, FD_MACH_ONLY | FD_REPLACEMENT,\n+     aAab_Vxworks_UnistdTests,   apzAab_Vxworks_UnistdPatch, 0 },\n+\n   {  zAix_ComplexName,    zAix_ComplexList,\n      apzAix_ComplexMachs,\n      AIX_COMPLEX_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n@@ -9257,6 +9643,11 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      CXX_UNREADY_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aCxx_UnreadyTests,   apzCxx_UnreadyPatch, 0 },\n \n+  {  zDarwin_9_Long_Double_Funcs_2Name,    zDarwin_9_Long_Double_Funcs_2List,\n+     apzDarwin_9_Long_Double_Funcs_2Machs,\n+     DARWIN_9_LONG_DOUBLE_FUNCS_2_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aDarwin_9_Long_Double_Funcs_2Tests,   apzDarwin_9_Long_Double_Funcs_2Patch, 0 },\n+\n   {  zDarwin_ExterncName,    zDarwin_ExterncList,\n      apzDarwin_ExterncMachs,\n      DARWIN_EXTERNC_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n@@ -10072,6 +10463,16 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      VXWORKS_GCC_PROBLEM_TEST_CT, FD_MACH_ONLY,\n      aVxworks_Gcc_ProblemTests,   apzVxworks_Gcc_ProblemPatch, 0 },\n \n+  {  zVxworks_Ioctl_MacroName,    zVxworks_Ioctl_MacroList,\n+     apzVxworks_Ioctl_MacroMachs,\n+     VXWORKS_IOCTL_MACRO_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aVxworks_Ioctl_MacroTests,   apzVxworks_Ioctl_MacroPatch, 0 },\n+\n+  {  zVxworks_Mkdir_MacroName,    zVxworks_Mkdir_MacroList,\n+     apzVxworks_Mkdir_MacroMachs,\n+     VXWORKS_MKDIR_MACRO_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aVxworks_Mkdir_MacroTests,   apzVxworks_Mkdir_MacroPatch, 0 },\n+\n   {  zVxworks_Needs_VxtypesName,    zVxworks_Needs_VxtypesList,\n      apzVxworks_Needs_VxtypesMachs,\n      VXWORKS_NEEDS_VXTYPES_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n@@ -10082,11 +10483,21 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      VXWORKS_NEEDS_VXWORKS_TEST_CT, FD_MACH_ONLY,\n      aVxworks_Needs_VxworksTests,   apzVxworks_Needs_VxworksPatch, 0 },\n \n+  {  zVxworks_RegsName,    zVxworks_RegsList,\n+     apzVxworks_RegsMachs,\n+     VXWORKS_REGS_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aVxworks_RegsTests,   apzVxworks_RegsPatch, 0 },\n+\n   {  zVxworks_TimeName,    zVxworks_TimeList,\n      apzVxworks_TimeMachs,\n      VXWORKS_TIME_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aVxworks_TimeTests,   apzVxworks_TimePatch, 0 },\n \n+  {  zVxworks_Write_ConstName,    zVxworks_Write_ConstList,\n+     apzVxworks_Write_ConstMachs,\n+     VXWORKS_WRITE_CONST_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aVxworks_Write_ConstTests,   apzVxworks_Write_ConstPatch, 0 },\n+\n   {  zX11_ClassName,    zX11_ClassList,\n      apzX11_ClassMachs,\n      X11_CLASS_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "19df48a8b0f069945c9944e32722d8d22db08950", "filename": "fixincludes/fixlib.h", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e41654136975b1ee18cc8e7c97e16e9f6206452/fixincludes%2Ffixlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e41654136975b1ee18cc8e7c97e16e9f6206452/fixincludes%2Ffixlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixlib.h?ref=7e41654136975b1ee18cc8e7c97e16e9f6206452", "patch": "@@ -140,7 +140,10 @@ typedef int apply_fix_p_t;  /* Apply Fix Predicate Type */\n          \"amount of user entertainment\" )            \\\n                                                      \\\n   _ENV_( pz_find_base, BOOL_TRUE, \"FIND_BASE\",       \\\n-         \"leader to trim from file names\" )\n+         \"leader to trim from file names\" )          \\\n+                                                     \\\n+  _ENV_( pz_test_mode, BOOL_FALSE, \"TEST_MODE\",      \\\n+         \"run fixincludes in test mode\" )\n \n #define _ENV_(v,m,n,t)   extern tCC* v;\n ENV_TABLE\n@@ -211,6 +214,27 @@ typedef struct {\n \n extern int gnu_type_map_ct;\n \n+typedef enum {\n+  VERB_SILENT = 0,\n+  VERB_FIXES,\n+  VERB_APPLIES,\n+  VERB_PROGRESS,\n+  VERB_TESTS,\n+  VERB_EVERYTHING\n+} te_verbose;\n+\n+te_verbose  verbose_level;\n+\n+#define VLEVEL(l)  ((unsigned int) verbose_level >= (unsigned int) l)\n+#define NOT_SILENT VLEVEL(VERB_FIXES)\n+\n+typedef enum {\n+  TESTING_OFF = 0,\n+  TESTING_ON  = 1\n+} fixinc_mode_t;\n+\n+fixinc_mode_t fixinc_mode;\n+\n #ifdef HAVE_MMAP_FILE\n #define UNLOAD_DATA() do { if (curr_data_mapped) { \\\n   munmap ((void*)pz_curr_data, data_map_size); close (data_map_fd); } \\"}, {"sha": "4be36933c8fee88225f2f06486e8ff56c80e1a4e", "filename": "fixincludes/fixopts.c", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e41654136975b1ee18cc8e7c97e16e9f6206452/fixincludes%2Ffixopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e41654136975b1ee18cc8e7c97e16e9f6206452/fixincludes%2Ffixopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixopts.c?ref=7e41654136975b1ee18cc8e7c97e16e9f6206452", "patch": "@@ -20,31 +20,43 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"fixlib.h\"\n \n-#define _ENV_(v,m,n,t)   tCC* v = NULL;\n+te_verbose  verbose_level = VERB_PROGRESS;\n+\n+fixinc_mode_t fixinc_mode = TESTING_OFF;\n+\n+#define _ENV_(v,m,n,t) char const * v = NULL;\n ENV_TABLE\n #undef _ENV_\n \n-void\n-initialize_opts (void)\n+static void\n+show_not_def (char const * vname)\n {\n   static const char var_not_found[] =\n-#ifndef __STDC__\n-    \"fixincl ERROR:  %s environment variable not defined\\n\"\n-#else\n     \"fixincl ERROR:  %s environment variable not defined\\n\"\n-    \"each of these must be defined:\\n\"\n-# define _ENV_(vv,mm,nn,tt) \"\\t\" nn \"  - \" tt \"\\n\"\n+    \"each of these must be defined:\\n\";\n+  static char const not_found_var[] = \"\\t%s\\n\";\n+\n+  fprintf (stderr, var_not_found, vname);\n+# define _ENV_(vv,mm,nn,tt) \\\n+  if (mm) fprintf (stderr, not_found_var, nn);\n   ENV_TABLE\n # undef _ENV_\n-#endif\n-    ;\n \n-#define _ENV_(v,m,n,t)   { tSCC var[] = n;  \\\n-  v = getenv (var); if (m && (v == NULL)) { \\\n-  fprintf (stderr, var_not_found, var);     \\\n-  exit (EXIT_FAILURE); } }\n+  exit (EXIT_FAILURE);\n+}\n \n-ENV_TABLE\n+void\n+initialize_opts (void)\n+{\n+#define _ENV_(v,m,n,t)   {                      \\\n+    static char const var[] = n;                \\\n+    v = getenv (var);                           \\\n+    if (m && (v == NULL)) show_not_def (var);   \\\n+  }\n \n+  ENV_TABLE;\n #undef _ENV_\n+\n+  if ((pz_test_mode != NULL) && (strcmp (pz_test_mode, \"true\") == 0))\n+    fixinc_mode = TESTING_ON;\n }"}, {"sha": "f95dd73bc165841538f4a6ab796037adc1829b73", "filename": "fixincludes/fixtests.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e41654136975b1ee18cc8e7c97e16e9f6206452/fixincludes%2Ffixtests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e41654136975b1ee18cc8e7c97e16e9f6206452/fixincludes%2Ffixtests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixtests.c?ref=7e41654136975b1ee18cc8e7c97e16e9f6206452", "patch": "@@ -46,7 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"fixlib.h\"\n \n-#define _ENV_(v,m,n,t)   extern tCC* v;\n+#define _ENV_(v,m,n,t)   extern char const * v;\n ENV_TABLE\n #undef _ENV_\n "}, {"sha": "09eac7c6254bb9856ab9d130a3df5b88fd71b702", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e41654136975b1ee18cc8e7c97e16e9f6206452/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e41654136975b1ee18cc8e7c97e16e9f6206452/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=7e41654136975b1ee18cc8e7c97e16e9f6206452", "patch": "@@ -196,25 +196,6 @@ fix = {\n \t_EndOfHeader_;\n };\n \n-\n-/*\n- *  ... and for the previous fix to be useful, you have to not use \"\"\n- *  includes.\n- */\n-fix = {\n-  hackname  = AAB_darwin7_9_long_double_funcs_2;\n-  mach      = \"*-*-darwin7.9*\";\n-  files     = math.h;\n-  select    = '#include[ \\t]+\\\"';\n-  c_fix     = format;\n-  c_fix_arg = \"%1<%2.h>\";\n-  \n-  c_fix_arg = '([ \\t]*#[ \\t]*include[ \\t]+)\"([a-z0-9/]+)\\.h\"';\n-  \n-  test_text = '#include \"architecture/ppc/math.h\"';\n-};\n-\n-\n /*\n  *  This fixes __FD_ZERO bug for linux 2.x.y (x <= 2 && y <= some n)\n  */\n@@ -1069,7 +1050,6 @@ fix = {\n     test_text = \"extern void exit ( int );\";\n };\n \n-\n /*\n  *  Remove `extern double cabs' declarations from math.h.\n  *  This conflicts with C99.  Discovered on AIX.\n@@ -1105,7 +1085,7 @@ fix = {\n      */\n     files     = \"architecture/ppc/math.h\";\n     files     = \"architecture/*/math.h\";\n-    select    = \"#if defined(__APPLE_CC__) && (__APPLE_CC__ >= 1345)\";\n+    select    = '#if defined\\(__APPLE_CC__\\) && \\(__APPLE_CC__ >= 1345\\)';\n     bypass    = \"powl\";\n     c_fix     = format; \n     c_fix_arg = \"#if 1\";\n@@ -1179,6 +1159,9 @@ fix = {\n     test_text = \"#define _CTRL(c) ('c'&037)\";\n };\n \n+/*\n+ *  Fix various macros used to define ioctl numbers.\n+ */\n fix = {\n     hackname  = ctrl_quotes_use;\n     select    = \"define[ \\t]+[A-Z0-9_]+[ \\t]+[A-Z0-9_]+CTRL[ \\t]*\\\\( *[^,']\";\n@@ -1215,6 +1198,23 @@ fix = {\n     test_text = \"extern void* malloc( size_t );\";\n };\n \n+/*\n+ *  For the AAB_darwin7_9_long_double_funcs fix to be useful,\n+ *  you have to not use \"\" includes.\n+ */\n+fix = {\n+    hackname  = darwin_9_long_double_funcs_2;\n+    mach      = \"*-*-darwin7.9*\";\n+    files     = math.h;\n+    select    = '#include[ \\t]+\\\"';\n+    c_fix     = format;\n+    c_fix_arg = \"%1<%2.h>\";\n+  \n+    c_fix_arg = '([ \\t]*#[ \\t]*include[ \\t]+)\"([a-z0-9/]+)\\.h\"';\n+  \n+    test_text = '#include \"architecture/ppc/math.h\"';\n+};\n+\n \n /*\n  *  On darwin8 and earlier, mach-o/swap.h isn't properly guarded\n@@ -2498,6 +2498,9 @@ fix = {\n     \"#define XX_IO(x)        ('x'<<8|256)\";\n };\n \n+/*\n+ *  Fix the usage of the ioctl macro numbers.\n+ */\n fix = {\n     hackname  = io_quotes_use;\n     select    = \"define[ \\t]+[A-Z0-9_]+[ \\t]+[A-Z0-9_]+IO[A-Z]*[ \\t]*\""}, {"sha": "4af7808fcc22cc64bb0fa8fa482206d5b11b05ed", "filename": "fixincludes/tests/base/architecture/ppc/math.h", "status": "modified", "additions": 5, "deletions": 79, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e41654136975b1ee18cc8e7c97e16e9f6206452/fixincludes%2Ftests%2Fbase%2Farchitecture%2Fppc%2Fmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e41654136975b1ee18cc8e7c97e16e9f6206452/fixincludes%2Ftests%2Fbase%2Farchitecture%2Fppc%2Fmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Farchitecture%2Fppc%2Fmath.h?ref=7e41654136975b1ee18cc8e7c97e16e9f6206452", "patch": "@@ -7,82 +7,8 @@\n     This had to be done to correct non-standard usages in the\n     original, manufacturer supplied header file.  */\n \n-/* This file prototypes the long double functions available on Mac OS\n-   10.3.9.  */\n-#ifndef __MATH__\n-# undef __APPLE_CC__\n-# define __APPLE_CC__  1345\n-# include_next <architecture/ppc/math.h>\n-# undef __APPLE_CC__\n-# define __APPLE_CC__ 1\n-# ifndef __LIBMLDBL_COMPAT\n-#  ifdef __LONG_DOUBLE_128__\n-#   define __LIBMLDBL_COMPAT(sym) __asm(\"_\" #sym \"$LDBL128\")\n-#  else\n-#   define __LIBMLDBL_COMPAT(sym)\n-#  endif /* __LONG_DOUBLE_128__ */\n-# endif /* __LIBMLDBL_COMPAT */\n-# ifdef __cplusplus\n-   extern \"C\" {\n-# endif\n-  extern long double acosl( long double ) __LIBMLDBL_COMPAT(acosl);\n-  extern long double asinl( long double ) __LIBMLDBL_COMPAT(asinl);\n-  extern long double atanl( long double ) __LIBMLDBL_COMPAT(atanl);\n-  extern long double atan2l( long double, long double ) __LIBMLDBL_COMPAT(atan2l);\n-  extern long double cosl( long double ) __LIBMLDBL_COMPAT(cosl);\n-  extern long double sinl( long double ) __LIBMLDBL_COMPAT(sinl);\n-  extern long double tanl( long double ) __LIBMLDBL_COMPAT(tanl);\n-  extern long double acoshl( long double ) __LIBMLDBL_COMPAT(acoshl);\n-  extern long double asinhl( long double ) __LIBMLDBL_COMPAT(asinhl);\n-  extern long double atanhl( long double ) __LIBMLDBL_COMPAT(atanhl);\n-  extern long double coshl( long double ) __LIBMLDBL_COMPAT(coshl);\n-  extern long double sinhl( long double ) __LIBMLDBL_COMPAT(sinhl);\n-  extern long double tanhl( long double ) __LIBMLDBL_COMPAT(tanhl);\n-  extern long double expl( long double ) __LIBMLDBL_COMPAT(expl);\n-  extern long double exp2l( long double ) __LIBMLDBL_COMPAT(exp2l);\n-  extern long double expm1l( long double ) __LIBMLDBL_COMPAT(expm1l);\n-  extern long double logl( long double ) __LIBMLDBL_COMPAT(logl);\n-  extern long double log10l( long double ) __LIBMLDBL_COMPAT(log10l);\n-  extern long double log2l( long double ) __LIBMLDBL_COMPAT(log2l);\n-  extern long double log1pl( long double ) __LIBMLDBL_COMPAT(log1pl);\n-  extern long double logbl( long double ) __LIBMLDBL_COMPAT(logbl);\n-  extern long double modfl( long double, long double * ) __LIBMLDBL_COMPAT(modfl);\n-  extern long double ldexpl( long double, int ) __LIBMLDBL_COMPAT(ldexpl);\n-  extern long double frexpl( long double, int * ) __LIBMLDBL_COMPAT(frexpl);\n-  extern int ilogbl( long double ) __LIBMLDBL_COMPAT(ilogbl);\n-  extern long double scalbnl( long double, int ) __LIBMLDBL_COMPAT(scalbnl);\n-  extern long double scalblnl( long double, long int ) __LIBMLDBL_COMPAT(scalblnl);\n-  extern long double fabsl( long double ) __LIBMLDBL_COMPAT(fabsl);\n-  extern long double cbrtl( long double ) __LIBMLDBL_COMPAT(cbrtl);\n-  extern long double hypotl( long double, long double ) __LIBMLDBL_COMPAT(hypotl);\n-  extern long double powl( long double, long double ) __LIBMLDBL_COMPAT(powl);\n-  extern long double sqrtl( long double ) __LIBMLDBL_COMPAT(sqrtl);\n-  extern long double erfl( long double ) __LIBMLDBL_COMPAT(erfl);\n-  extern long double erfcl( long double ) __LIBMLDBL_COMPAT(erfcl);\n-  extern long double lgammal( long double ) __LIBMLDBL_COMPAT(lgammal);\n-  extern long double tgammal( long double ) __LIBMLDBL_COMPAT(tgammal);\n-  extern long double ceill( long double ) __LIBMLDBL_COMPAT(ceill);\n-  extern long double floorl( long double ) __LIBMLDBL_COMPAT(floorl);\n-  extern long double nearbyintl( long double ) __LIBMLDBL_COMPAT(nearbyintl);\n-  extern long double rintl( long double ) __LIBMLDBL_COMPAT(rintl);\n-  extern long int lrintl( long double ) __LIBMLDBL_COMPAT(lrintl);\n-  extern long long int llrintl( long double ) __LIBMLDBL_COMPAT(llrintl);\n-  extern long double roundl( long double ) __LIBMLDBL_COMPAT(roundl);\n-  extern long int lroundl( long double ) __LIBMLDBL_COMPAT(lroundl);\n-  extern long long int llroundl( long double ) __LIBMLDBL_COMPAT(llroundl);\n-  extern long double truncl( long double ) __LIBMLDBL_COMPAT(truncl);\n-  extern long double fmodl( long double, long double) __LIBMLDBL_COMPAT(fmodl);\n-  extern long double remainderl( long double, long double ) __LIBMLDBL_COMPAT(remainderl);\n-  extern long double remquol( long double, long double, int * ) __LIBMLDBL_COMPAT(remquol);\n-  extern long double copysignl( long double, long double ) __LIBMLDBL_COMPAT(copysignl);\n-  extern long double nanl( const char * ) __LIBMLDBL_COMPAT(nanl);\n-  extern long double nextafterl( long double, long double ) __LIBMLDBL_COMPAT(nextafterl);\n-  extern long double nexttowardl( long double, long double ) __LIBMLDBL_COMPAT(nexttowardl);\n-  extern long double fdiml( long double, long double ) __LIBMLDBL_COMPAT(fdiml);\n-  extern long double fmaxl( long double, long double ) __LIBMLDBL_COMPAT(fmaxl);\n-  extern long double fminl( long double, long double ) __LIBMLDBL_COMPAT(fminl);\n-  extern long double fmal( long double, long double, long double ) __LIBMLDBL_COMPAT(fmal);\n-# ifdef __cplusplus\n-   }\n-# endif\n-#endif /* __MATH__ */\n+\n+\n+#if defined( BROKEN_NAN_CHECK )\n+#if 1\n+#endif  /* BROKEN_NAN_CHECK */"}, {"sha": "d570c895d571e2e95135171e0d978573d9a06177", "filename": "fixincludes/tests/base/ioLib.h", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e41654136975b1ee18cc8e7c97e16e9f6206452/fixincludes%2Ftests%2Fbase%2FioLib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e41654136975b1ee18cc8e7c97e16e9f6206452/fixincludes%2Ftests%2Fbase%2FioLib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2FioLib.h?ref=7e41654136975b1ee18cc8e7c97e16e9f6206452", "patch": "@@ -0,0 +1,19 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/ioLib.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( VXWORKS_IOCTL_MACRO_CHECK )\n+extern int ioctl ( int asdf1234, int jkl , int qwerty ) ;\n+#endif  /* VXWORKS_IOCTL_MACRO_CHECK */\n+\n+\n+#if defined( VXWORKS_WRITE_CONST_CHECK )\n+extern int  write (int, const char*, size_t);\n+#endif  /* VXWORKS_WRITE_CONST_CHECK */"}]}