{"sha": "0b7463235f0e23c624d1911c9b15f531108cc5a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI3NDYzMjM1ZjBlMjNjNjI0ZDE5MTFjOWIxNWY1MzExMDhjYzVhNg==", "commit": {"author": {"name": "Terry Guo", "email": "terry.guo@arm.com", "date": "2012-10-23T03:49:17Z"}, "committer": {"name": "Xuepeng Guo", "email": "xguo@gcc.gnu.org", "date": "2012-10-23T03:49:17Z"}, "message": "re PR target/55019 (Incorrectly use live argument register to save high register in thumb1 prologue)\n\n\tgcc/\n\tPR target/55019\n\t* config/arm/arm.c (thumb1_expand_prologue): Don't push high regs with\n\tlive argument regs.\n\n\tgcc/testsuite/\n\tPR target/55019\n\t* gcc.dg/pr55019.c: New.\n\nFrom-SVN: r192703", "tree": {"sha": "b0acc3e8794fa85b6aa393551fe0bc4203fd523c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0acc3e8794fa85b6aa393551fe0bc4203fd523c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b7463235f0e23c624d1911c9b15f531108cc5a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b7463235f0e23c624d1911c9b15f531108cc5a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b7463235f0e23c624d1911c9b15f531108cc5a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b7463235f0e23c624d1911c9b15f531108cc5a6/comments", "author": null, "committer": null, "parents": [{"sha": "e4878d25f33bcfd0c7224af55f0c364b3b518ad0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4878d25f33bcfd0c7224af55f0c364b3b518ad0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4878d25f33bcfd0c7224af55f0c364b3b518ad0"}], "stats": {"total": 60, "additions": 59, "deletions": 1}, "files": [{"sha": "236464f4dc1dc438c66e88bb377811b26934288d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7463235f0e23c624d1911c9b15f531108cc5a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7463235f0e23c624d1911c9b15f531108cc5a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b7463235f0e23c624d1911c9b15f531108cc5a6", "patch": "@@ -1,3 +1,9 @@\n+2012-10-23  Terry Guo  <terry.guo@arm.com>\n+\n+\tPR target/55019\n+\t* config/arm/arm.c (thumb1_expand_prologue): Don't push high regs with\n+\tlive argument regs.\n+\n 2012-10-23  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \tPR middle-end/55030"}, {"sha": "e9b94631cf93f0fda2a246bfbe77b6cd51b5e98f", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7463235f0e23c624d1911c9b15f531108cc5a6/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7463235f0e23c624d1911c9b15f531108cc5a6/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=0b7463235f0e23c624d1911c9b15f531108cc5a6", "patch": "@@ -22753,12 +22753,18 @@ thumb1_expand_prologue (void)\n     {\n       unsigned pushable_regs;\n       unsigned next_hi_reg;\n+      unsigned arg_regs_num = TARGET_AAPCS_BASED ? crtl->args.info.aapcs_ncrn\n+\t\t\t\t\t\t : crtl->args.info.nregs;\n+      unsigned arg_regs_mask = (1 << arg_regs_num) - 1;\n \n       for (next_hi_reg = 12; next_hi_reg > LAST_LO_REGNUM; next_hi_reg--)\n \tif (live_regs_mask & (1 << next_hi_reg))\n \t  break;\n \n-      pushable_regs = l_mask & 0xff;\n+      /* Here we need to mask out registers used for passing arguments\n+\t even if they can be pushed.  This is to avoid using them to stash the high\n+\t registers.  Such kind of stash may clobber the use of arguments.  */\n+      pushable_regs = l_mask & (~arg_regs_mask) & 0xff;\n \n       if (pushable_regs == 0)\n \tpushable_regs = 1 << thumb_find_work_register (live_regs_mask);"}, {"sha": "16e6dd6b4277ad72986229a53e9aa32a68cb52cc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7463235f0e23c624d1911c9b15f531108cc5a6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7463235f0e23c624d1911c9b15f531108cc5a6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0b7463235f0e23c624d1911c9b15f531108cc5a6", "patch": "@@ -1,3 +1,8 @@\n+2012-10-23  Terry Guo  <terry.guo@arm.com>\n+\n+\tPR target/55019\n+\t* gcc.dg/pr55019.c: New.\n+\n 2012-10-22  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR tree-optimization/55008"}, {"sha": "1548fb258c0677802d86ce014c44e2cf3bcbd4ad", "filename": "gcc/testsuite/gcc.dg/pr55019.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7463235f0e23c624d1911c9b15f531108cc5a6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr55019.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7463235f0e23c624d1911c9b15f531108cc5a6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr55019.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr55019.c?ref=0b7463235f0e23c624d1911c9b15f531108cc5a6", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O1 -funroll-loops\" } */\n+/* { dg-add-options ieee } */\n+\n+extern void exit (int);\n+extern void abort (void);\n+\n+void\n+compare (double a, double b)\n+{\n+  do\n+    {\n+      double s1 = __builtin_copysign ((double) 1.0, a);\n+      double s2 = __builtin_copysign ((double) 1.0, b);\n+\n+      if (s1 != s2)\n+        abort ();\n+\n+      if ((__builtin_isnan (a) != 0) != (__builtin_isnan (b) != 0))\n+        abort ();\n+\n+      if ((a != b) != (__builtin_isnan (a) != 0))\n+        abort ();\n+    } while (0);\n+}\n+\n+int\n+main ()\n+{\n+  double a = 0.0;\n+  double b = 0.0;\n+  _Complex double cr = __builtin_complex (a, b);\n+  static _Complex double cs = __builtin_complex (0.0, 0.0);\n+\n+  compare (__real__ cr, 0.0);\n+  compare (__imag__ cr, 0.0);\n+  compare (__real__ cs, 0.0);\n+  compare (__imag__ cs, 0.0);\n+\n+  exit (0);\n+}"}]}