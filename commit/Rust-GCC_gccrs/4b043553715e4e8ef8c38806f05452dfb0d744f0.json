{"sha": "4b043553715e4e8ef8c38806f05452dfb0d744f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGIwNDM1NTM3MTVlNGU4ZWY4YzM4ODA2ZjA1NDUyZGZiMGQ3NDRmMA==", "commit": {"author": {"name": "Cary Coutant", "email": "ccoutant@google.com", "date": "2013-07-02T22:18:39Z"}, "committer": {"name": "Cary Coutant", "email": "ccoutant@gcc.gnu.org", "date": "2013-07-02T22:18:39Z"}, "message": "dwarf2out.c (loc_checksum): Call hash_loc_operands for a deterministic hash.\n\ngcc/\n\t* dwarf2out.c (loc_checksum): Call hash_loc_operands for a\n\tdeterministic hash.\n\t(loc_checksum_ordered): Likewise.\n\t(hash_loc_operands): Remove inline keyword.\n\nFrom-SVN: r200626", "tree": {"sha": "28af569f8b005878fb3cb93240dcca815ccd1fa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28af569f8b005878fb3cb93240dcca815ccd1fa3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b043553715e4e8ef8c38806f05452dfb0d744f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b043553715e4e8ef8c38806f05452dfb0d744f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b043553715e4e8ef8c38806f05452dfb0d744f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b043553715e4e8ef8c38806f05452dfb0d744f0/comments", "author": null, "committer": null, "parents": [{"sha": "45165729bbd9e4d75e3782b99ef887d03feaa2f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45165729bbd9e4d75e3782b99ef887d03feaa2f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45165729bbd9e4d75e3782b99ef887d03feaa2f5"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "82ca731e2294decf22e7e65254ab68c829741fd9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b043553715e4e8ef8c38806f05452dfb0d744f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b043553715e4e8ef8c38806f05452dfb0d744f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b043553715e4e8ef8c38806f05452dfb0d744f0", "patch": "@@ -1,3 +1,10 @@\n+2013-07-02  Cary Coutant  <ccoutant@google.com>\n+\n+\t* dwarf2out.c (loc_checksum): Call hash_loc_operands for a\n+\tdeterministic hash.\n+\t(loc_checksum_ordered): Likewise.\n+\t(hash_loc_operands): Remove inline keyword.\n+\n 2013-07-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/57741"}, {"sha": "c3ae926ee7a5b8f223357e87461860443edaf968", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b043553715e4e8ef8c38806f05452dfb0d744f0/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b043553715e4e8ef8c38806f05452dfb0d744f0/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=4b043553715e4e8ef8c38806f05452dfb0d744f0", "patch": "@@ -3214,6 +3214,8 @@ static void gen_scheduled_generic_parms_dies (void);\n \n static const char *comp_dir_string (void);\n \n+static hashval_t hash_loc_operands (dw_loc_descr_ref, hashval_t);\n+\n /* enum for tracking thread-local variables whose address is really an offset\n    relative to the TLS pointer, which will need link-time relocation, but will\n    not need relocation by the DWARF consumer.  */\n@@ -5437,11 +5439,12 @@ static inline void\n loc_checksum (dw_loc_descr_ref loc, struct md5_ctx *ctx)\n {\n   int tem;\n+  hashval_t hash = 0;\n \n   tem = (loc->dtprel << 8) | ((unsigned int) loc->dw_loc_opc);\n   CHECKSUM (tem);\n-  CHECKSUM (loc->dw_loc_oprnd1);\n-  CHECKSUM (loc->dw_loc_oprnd2);\n+  hash = hash_loc_operands (loc, hash);\n+  CHECKSUM (hash);\n }\n \n /* Calculate the checksum of an attribute.  */\n@@ -5643,9 +5646,12 @@ loc_checksum_ordered (dw_loc_descr_ref loc, struct md5_ctx *ctx)\n   /* Otherwise, just checksum the raw location expression.  */\n   while (loc != NULL)\n     {\n+      hashval_t hash = 0;\n+\n+      CHECKSUM_ULEB128 (loc->dtprel);\n       CHECKSUM_ULEB128 (loc->dw_loc_opc);\n-      CHECKSUM (loc->dw_loc_oprnd1);\n-      CHECKSUM (loc->dw_loc_oprnd2);\n+      hash = hash_loc_operands (loc, hash);\n+      CHECKSUM (hash);\n       loc = loc->dw_loc_next;\n     }\n }\n@@ -23107,7 +23113,7 @@ resolve_addr (dw_die_ref die)\n \n /* Iteratively hash operands of LOC opcode.  */\n \n-static inline hashval_t\n+static hashval_t\n hash_loc_operands (dw_loc_descr_ref loc, hashval_t hash)\n {\n   dw_val_ref val1 = &loc->dw_loc_oprnd1;"}]}