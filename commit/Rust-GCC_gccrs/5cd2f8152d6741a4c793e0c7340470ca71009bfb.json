{"sha": "5cd2f8152d6741a4c793e0c7340470ca71009bfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNkMmY4MTUyZDY3NDFhNGM3OTNlMGM3MzQwNDcwY2E3MTAwOWJmYg==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-06-22T17:07:06Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-06-22T17:07:06Z"}, "message": "re PR fortran/44616 ([OOP] ICE if CLASS(foo) is used before its definition)\n\n2010-06-22  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/44616\n\t* resolve.c (resolve_fl_derived): Avoid checking for abstract on class\n\tcontainers.\n\n2010-06-22  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/44616\n\t* gfortran.dg/abstract_type_8.f03: New.\n\nFrom-SVN: r161208", "tree": {"sha": "d5318ee0e3c06f0a8b81e0d2c1bea008dd4bf521", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5318ee0e3c06f0a8b81e0d2c1bea008dd4bf521"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cd2f8152d6741a4c793e0c7340470ca71009bfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cd2f8152d6741a4c793e0c7340470ca71009bfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cd2f8152d6741a4c793e0c7340470ca71009bfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cd2f8152d6741a4c793e0c7340470ca71009bfb/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b074e7833ba9c3ff29f71892c5a0b254972eef31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b074e7833ba9c3ff29f71892c5a0b254972eef31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b074e7833ba9c3ff29f71892c5a0b254972eef31"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "07a5825123b40092751d9ca06d31d17bb960b146", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd2f8152d6741a4c793e0c7340470ca71009bfb/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd2f8152d6741a4c793e0c7340470ca71009bfb/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5cd2f8152d6741a4c793e0c7340470ca71009bfb", "patch": "@@ -1,3 +1,9 @@\n+2010-06-22  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/44616\n+\t* resolve.c (resolve_fl_derived): Avoid checking for abstract on class\n+\tcontainers.\n+\n 2010-06-21  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/40632"}, {"sha": "96b3e8daab153266a6ffd4a24869e6ad71db871e", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd2f8152d6741a4c793e0c7340470ca71009bfb/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd2f8152d6741a4c793e0c7340470ca71009bfb/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=5cd2f8152d6741a4c793e0c7340470ca71009bfb", "patch": "@@ -11144,6 +11144,7 @@ resolve_fl_derived (gfc_symbol *sym)\n   /* If this is a non-ABSTRACT type extending an ABSTRACT one, ensure that\n      all DEFERRED bindings are overridden.  */\n   if (super_type && super_type->attr.abstract && !sym->attr.abstract\n+      && !sym->attr.is_class\n       && ensure_not_abstract (sym, super_type) == FAILURE)\n     return FAILURE;\n "}, {"sha": "326f2bcc4ee54b29afb6cc05172632d8f8e020b3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd2f8152d6741a4c793e0c7340470ca71009bfb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd2f8152d6741a4c793e0c7340470ca71009bfb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5cd2f8152d6741a4c793e0c7340470ca71009bfb", "patch": "@@ -1,3 +1,8 @@\n+2010-06-22  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/44616\n+\t* gfortran.dg/abstract_type_8.f03: New.\n+\n 2010-06-21  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/noexcept08.C: New."}, {"sha": "c924abac9af46fbdef50d2fb654863e3001c1b07", "filename": "gcc/testsuite/gfortran.dg/abstract_type_8.f03", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd2f8152d6741a4c793e0c7340470ca71009bfb/gcc%2Ftestsuite%2Fgfortran.dg%2Fabstract_type_8.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd2f8152d6741a4c793e0c7340470ca71009bfb/gcc%2Ftestsuite%2Fgfortran.dg%2Fabstract_type_8.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fabstract_type_8.f03?ref=5cd2f8152d6741a4c793e0c7340470ca71009bfb", "patch": "@@ -0,0 +1,29 @@\n+! { dg-do compile }\n+!\n+! PR 44616: [OOP] ICE if CLASS(foo) is used before its definition\n+!\n+! Contributed by bd satish <bdsatish@gmail.com>\n+\n+module factory_pattern\n+implicit none\n+\n+type First_Factory\n+    character(len=20) :: factory_type\n+    class(Connection), pointer :: connection_type\n+    contains\n+end type First_Factory\n+\n+type, abstract :: Connection\n+    contains\n+    procedure(generic_desc), deferred :: description\n+end type Connection\n+\n+abstract interface\n+    subroutine generic_desc(self)\n+        import  ! Required, cf. PR 44614\n+        class(Connection) :: self\n+    end subroutine generic_desc\n+end interface\n+end module factory_pattern\n+\n+! { dg-final { cleanup-modules \"factory_pattern\" } }"}]}