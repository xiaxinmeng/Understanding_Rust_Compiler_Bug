{"sha": "d3ec3e15d30ac294e3cfbcedda6b639c98cd90fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNlYzNlMTVkMzBhYzI5NGUzY2ZiY2VkZGE2YjYzOWM5OGNkOTBmYw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2010-10-08T01:06:27Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2010-10-08T01:06:27Z"}, "message": "future: Enable allocator support.\n\n\t* include/std/future: Enable allocator support.\n\t* testsuite/30_threads/packaged_task/cons/alloc.cc: Expect PASS.\n\t* testsuite/30_threads/promise/cons/alloc.cc: Expect PASS.\n\nFrom-SVN: r165147", "tree": {"sha": "6304a4d424ee75b046af4801b1577d04e968d415", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6304a4d424ee75b046af4801b1577d04e968d415"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3ec3e15d30ac294e3cfbcedda6b639c98cd90fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3ec3e15d30ac294e3cfbcedda6b639c98cd90fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3ec3e15d30ac294e3cfbcedda6b639c98cd90fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3ec3e15d30ac294e3cfbcedda6b639c98cd90fc/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43ea30dc94eb08b3b4ea8a4bbbd538a93c198d5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43ea30dc94eb08b3b4ea8a4bbbd538a93c198d5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43ea30dc94eb08b3b4ea8a4bbbd538a93c198d5c"}], "stats": {"total": 35, "additions": 10, "deletions": 25}, "files": [{"sha": "ef37ef57fbfca1857c7a8c03a749321a313619fa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ec3e15d30ac294e3cfbcedda6b639c98cd90fc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ec3e15d30ac294e3cfbcedda6b639c98cd90fc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d3ec3e15d30ac294e3cfbcedda6b639c98cd90fc", "patch": "@@ -1,3 +1,9 @@\n+2010-10-08  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/std/future: Enable allocator support.\n+\t* testsuite/30_threads/packaged_task/cons/alloc.cc: Expect PASS.\n+\t* testsuite/30_threads/promise/cons/alloc.cc: Expect PASS.\n+\n 2010-10-08  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR libstdc++/45893"}, {"sha": "0678093fe47af290a1fe323f0efd6e346bf7e870", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ec3e15d30ac294e3cfbcedda6b639c98cd90fc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ec3e15d30ac294e3cfbcedda6b639c98cd90fc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=d3ec3e15d30ac294e3cfbcedda6b639c98cd90fc", "patch": "@@ -213,8 +213,6 @@ namespace std\n \ttypedef unique_ptr<_Res, _Result_base::_Deleter> type;\n       };\n \n-    // TODO: use when allocator_arg_t available\n-    /*\n     /// Result_alloc.\n     template<typename _Res, typename _Alloc>\n       struct _Result_alloc : _Result<_Res>\n@@ -255,7 +253,6 @@ namespace std\n         }\n         return typename _Ptr<__result_type>::type(__p);\n       }\n-    */\n \n \n     /// Shared state between a promise and one or more associated futures.\n@@ -843,14 +840,11 @@ namespace std\n \t_M_storage(std::move(__rhs._M_storage))\n       { }\n \n-      // TODO: needs allocator_arg_t\n-      /*\n       template<typename _Allocator>\n         promise(allocator_arg_t, const _Allocator& __a)\n         : _M_future(std::allocate_shared<_State>(__a)),\n         _M_storage(__future_base::_S_allocate_result<_Res>(__a))\n         { }\n-      */\n \n       promise(const promise&) = delete;\n \n@@ -933,14 +927,11 @@ namespace std\n \t_M_storage(std::move(__rhs._M_storage))\n       { }\n \n-      // TODO: needs allocator_arg_t\n-      /*\n       template<typename _Allocator>\n         promise(allocator_arg_t, const _Allocator& __a)\n         : _M_future(std::allocate_shared<_State>(__a)),\n         _M_storage(__future_base::_S_allocate_result<_Res&>(__a))\n         { }\n-      */\n \n       promise(const promise&) = delete;\n \n@@ -1012,14 +1003,11 @@ namespace std\n       { }\n \n \n-      // TODO: needs allocator_arg_t\n-      /*\n       template<typename _Allocator>\n         promise(allocator_arg_t, const _Allocator& __a)\n         : _M_future(std::allocate_shared<_State>(__a)),\n         _M_storage(__future_base::_S_allocate_result<void>(__a))\n         { }\n-      */\n \n       promise(const promise&) = delete;\n \n@@ -1088,11 +1076,8 @@ namespace std\n     _M_future->_M_set_result(std::move(__setter));\n   }\n \n-  // TODO: needs allocators\n-  /*\n   template<typename _Res, class Alloc>\n     struct uses_allocator<promise<_Res>, Alloc> : true_type  { };\n-  */\n \n \n   template<typename _StateT, typename _Res>\n@@ -1142,14 +1127,11 @@ namespace std\n       : _M_result(new _Result<_Res>()), _M_task(std::move(__task))\n       { }\n \n-      // TODO: needs allocator_arg_t\n-      /*\n       template<typename _Func, typename _Alloc>\n         _Task_state(_Func&& __task, const _Alloc& __a)\n         : _M_result(_S_allocate_result<_Res>(__a))\n         , _M_task(allocator_arg, __a, std::move(__task))\n         { }\n-      */\n \n       void\n       _M_run(_Args... __args)\n@@ -1208,14 +1190,11 @@ namespace std\n       : _M_state(std::make_shared<_State_type>(__fn))\n       { }\n \n-      // TODO: needs allocator_arg_t\n-      /*\n       template<typename _Fn, typename _Allocator>\n         explicit\n         packaged_task(allocator_arg_t __tag, const _Allocator& __a, _Fn __fn)\n         : _M_state(std::allocate_shared<_State_type>(__a, std::move(__fn)))\n         { }\n-      */\n \n       ~packaged_task()\n       {"}, {"sha": "99253cde7d3d382e19f48897244475b5ac01087e", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/cons/alloc.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ec3e15d30ac294e3cfbcedda6b639c98cd90fc/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Falloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ec3e15d30ac294e3cfbcedda6b639c98cd90fc/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Falloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Falloc.cc?ref=d3ec3e15d30ac294e3cfbcedda6b639c98cd90fc", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n // { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n@@ -39,7 +39,7 @@ void test01()\n \n   uneq_allocator<char> alloc(99);\n \n-  packaged_task<int ()> p1(allocator_arg, alloc, f); // { dg-excess-errors \"\" }\n+  packaged_task<int ()> p1(allocator_arg, alloc, f);\n   VERIFY( static_cast<bool>(p1) );\n   p1();\n   VERIFY( p1.get_future().get() == 5 );"}, {"sha": "0ac560df4752278b0a86732a8dac0f0d023883bd", "filename": "libstdc++-v3/testsuite/30_threads/promise/cons/alloc.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ec3e15d30ac294e3cfbcedda6b639c98cd90fc/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Falloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ec3e15d30ac294e3cfbcedda6b639c98cd90fc/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Falloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Falloc.cc?ref=d3ec3e15d30ac294e3cfbcedda6b639c98cd90fc", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n // { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n@@ -35,7 +35,7 @@ void test01()\n \n   uneq_allocator<char> alloc(99);\n \n-  promise<int> p1(allocator_arg, alloc); // { dg-excess-errors \"\" }\n+  promise<int> p1(allocator_arg, alloc);\n   p1.set_value(5);\n   VERIFY( p1.get_future().get() == 5 );\n }"}]}