{"sha": "3d54b29d70cca0ae952f3fed9423c3acb28778a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q1NGIyOWQ3MGNjYTBhZTk1MmYzZmVkOTQyM2MzYWNiMjg3NzhhNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-01-29T09:27:43Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-01-29T09:27:43Z"}, "message": "re PR tree-optimization/59594 (wrong code (by tree vectorizer) at -O3 on x86_64-linux-gnu)\n\n\tPR tree-optimization/59594\n\t* tree-vect-data-refs.c (vect_analyze_data_ref_accesses): Sort\n\ta copy of the datarefs vector rather than the vector itself.\n\n\t* gcc.dg/vect/no-vfa-vect-depend-2.c: New test.\n\t* gcc.dg/vect/no-vfa-vect-depend-3.c: New test.\n\t* gcc.dg/vect/pr59594.c: New test.\n\nFrom-SVN: r207225", "tree": {"sha": "b0698b0296f9eb4ef904fa94a9c111824180346b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0698b0296f9eb4ef904fa94a9c111824180346b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d54b29d70cca0ae952f3fed9423c3acb28778a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d54b29d70cca0ae952f3fed9423c3acb28778a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d54b29d70cca0ae952f3fed9423c3acb28778a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d54b29d70cca0ae952f3fed9423c3acb28778a5/comments", "author": null, "committer": null, "parents": [{"sha": "15b31f8c7e139e3799cba19e61c636eb4b3fccc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15b31f8c7e139e3799cba19e61c636eb4b3fccc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15b31f8c7e139e3799cba19e61c636eb4b3fccc1"}], "stats": {"total": 310, "additions": 301, "deletions": 9}, "files": [{"sha": "ddf35958c4ffdada49b3ef1cc205aa06b200164f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d54b29d70cca0ae952f3fed9423c3acb28778a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d54b29d70cca0ae952f3fed9423c3acb28778a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d54b29d70cca0ae952f3fed9423c3acb28778a5", "patch": "@@ -1,3 +1,9 @@\n+2014-01-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/59594\n+\t* tree-vect-data-refs.c (vect_analyze_data_ref_accesses): Sort\n+\ta copy of the datarefs vector rather than the vector itself.\n+\n 2014-01-28  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/53756"}, {"sha": "191845a3b35daf200f4efee3d56634374a92956d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d54b29d70cca0ae952f3fed9423c3acb28778a5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d54b29d70cca0ae952f3fed9423c3acb28778a5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3d54b29d70cca0ae952f3fed9423c3acb28778a5", "patch": "@@ -1,7 +1,14 @@\n+2014-01-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/59594\n+\t* gcc.dg/vect/no-vfa-vect-depend-2.c: New test.\n+\t* gcc.dg/vect/no-vfa-vect-depend-3.c: New test.\n+\t* gcc.dg/vect/pr59594.c: New test.\n+\n 2014-01-28  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/59414\n-\t* gfortran.dg/allocate_class_3.f90 : New test\n+\t* gfortran.dg/allocate_class_3.f90: New test.\n \n 2014-01-28  Dodji Seketeli  <dodji@redhat.com>\n "}, {"sha": "3a94c030f077358ebd0d877df42b89aec927bc76", "filename": "gcc/testsuite/gcc.dg/vect/no-vfa-vect-depend-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d54b29d70cca0ae952f3fed9423c3acb28778a5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-depend-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d54b29d70cca0ae952f3fed9423c3acb28778a5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-depend-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-depend-2.c?ref=3d54b29d70cca0ae952f3fed9423c3acb28778a5", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 17\n+\n+int ia[N] = {48,45,42,39,36,33,30,27,24,21,18,15,12,9,6,3,0};\n+int ib[N] = {48,45,42,39,36,33,30,27,24,21,18,15,12,9,6,3,0};\n+int res[N] = {48,192,180,168,156,144,132,120,108,96,84,72,60,48,36,24,12};\n+\n+__attribute__ ((noinline))\n+int main1 ()\n+{\n+  int i;\n+\n+  /* Not vectorizable due to data dependence: dependence distance 1.  */ \n+  for (i = N - 1; i >= 0; i--)\n+    {\n+      ia[i] = ia[i+1] * 4;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (ia[i] != 0)\n+\tabort ();\n+    } \n+\n+  /* Vectorizable. Dependence distance -1.  */\n+  for (i = N - 1; i >= 0; i--)\n+    {\n+      ib[i+1] = ib[i] * 4;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (ib[i] != res[i])\n+\tabort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" {xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"dependence distance negative\" 1 \"vect\"  } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "8f937a0f3dfbb390efe00239e702757210eadf16", "filename": "gcc/testsuite/gcc.dg/vect/no-vfa-vect-depend-3.c", "status": "added", "additions": 187, "deletions": 0, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d54b29d70cca0ae952f3fed9423c3acb28778a5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-depend-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d54b29d70cca0ae952f3fed9423c3acb28778a5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-depend-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-depend-3.c?ref=3d54b29d70cca0ae952f3fed9423c3acb28778a5", "patch": "@@ -0,0 +1,187 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 64\n+\n+int ia[N + 1];\n+int ib[N + 1];\n+\n+/* Vectorizable. Dependence distance -1.  */\n+__attribute__((noinline)) void\n+f1 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i + 1] = 1;\n+      ib[i] = ia[i];\n+    }\n+}\n+\n+/* Not vectorizable due to data dependence: dependence distance 1.  */\n+__attribute__((noinline)) void\n+f2 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i] = 1;\n+      ib[i] = ia[i + 1];\n+    }\n+}\n+\n+/* Not vectorizable due to data dependence: dependence distance 1.  */\n+__attribute__((noinline)) void\n+f3 (void)\n+{\n+  int i;\n+  for (i = N - 1; i >= 0; i--)\n+    {\n+      ia[i + 1] = 1;\n+      ib[i] = ia[i];\n+    }\n+}\n+\n+/* Vectorizable. Dependence distance -1.  */\n+__attribute__((noinline)) void\n+f4 (void)\n+{\n+  int i;\n+  for (i = N - 1; i >= 0; i--)\n+    {\n+      ia[i] = 1;\n+      ib[i] = ia[i + 1];\n+    }\n+}\n+\n+/* Vectorizable. Dependence distance -1.  */\n+__attribute__((noinline)) void\n+f5 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i + 1] = 1;\n+      ia[i] = 2;\n+    }\n+}\n+\n+/* Not vectorizable due to data dependence: dependence distance 1.  */\n+__attribute__((noinline)) void\n+f6 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i] = 1;\n+      ia[i + 1] = 2;\n+    }\n+}\n+\n+/* Not vectorizable due to data dependence: dependence distance 1.  */\n+__attribute__((noinline)) void\n+f7 (void)\n+{\n+  int i;\n+  for (i = N - 1; i >= 0; i--)\n+    {\n+      ia[i + 1] = 1;\n+      ia[i] = 2;\n+    }\n+}\n+\n+/* Vectorizable. Dependence distance -1.  */\n+__attribute__((noinline)) void\n+f8 (void)\n+{\n+  int i;\n+  for (i = N - 1; i >= 0; i--)\n+    {\n+      ia[i] = 1;\n+      ia[i + 1] = 2;\n+    }\n+}\n+\n+__attribute__ ((noinline)) int\n+main1 (void)\n+{\n+  int i, j;\n+\n+  for (j = 0; j < 8; j++)\n+    {\n+      for (i = 0; i <= N; i++)\n+\t{\n+\t  ia[i] = i + 3;\n+\t  ib[i] = i + N + 3;\n+\t  asm (\"\");\n+\t}\n+\n+      switch (j)\n+\t{\n+\tcase 0: f1 (); break;\n+\tcase 1: f2 (); break;\n+\tcase 2: f3 (); break;\n+\tcase 3: f4 (); break;\n+\tcase 4: f5 (); break;\n+\tcase 5: f6 (); break;\n+\tcase 6: f7 (); break;\n+\tcase 7: f8 (); break;\n+\t}\n+\n+      for (i = 0; i <= N; i++)\n+\t{\n+\t  int ea = i + 3;\n+\t  int eb = i + N + 3;\n+\t  switch (j)\n+\t    {\n+\t    case 0:\n+\t      if (i) ea = 1;\n+\t      if (i == 0) eb = 3;\n+\t      else if (i != N) eb = 1;\n+\t      break;\n+\t    case 1:\n+\t      if (i != N) ea = 1;\n+\t      if (i != N) eb = i + 4;\n+\t      break;\n+\t    case 2:\n+\t      if (i) ea = 1;\n+\t      if (i != N) eb = i + 3;\n+\t      break;\n+\t    case 3:\n+\t      if (i != N) ea = 1;\n+\t      if (i < N - 1) eb = 1;\n+\t      else if (i == N - 1) eb = 67;\n+\t      break;\n+\t    case 4:\n+\t      ea = 1 + (i != N);\n+\t      break;\n+\t    case 5:\n+\t      ea = 2 - (i != N);\n+\t      break;\n+\t    case 6:\n+\t      ea = 1 + (i == 0);\n+\t      break;\n+\t    case 7:\n+\t      ea = 2 - (i == 0);\n+\t      break;\n+\t    }\n+\t  if (ia[i] != ea || ib[i] != eb)\n+\t    abort ();\n+\t}\n+    }\n+\n+  return 0;\n+}\n+\n+int main ()\n+{\n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 4 \"vect\" {xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"dependence distance negative\" 4 \"vect\"  } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "6c0b5880ea14a70536a764291c6a30cb3f1389f4", "filename": "gcc/testsuite/gcc.dg/vect/pr59594.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d54b29d70cca0ae952f3fed9423c3acb28778a5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr59594.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d54b29d70cca0ae952f3fed9423c3acb28778a5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr59594.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr59594.c?ref=3d54b29d70cca0ae952f3fed9423c3acb28778a5", "patch": "@@ -0,0 +1,31 @@\n+/* PR tree-optimization/59594 */\n+\n+#include \"tree-vect.h\"\n+\n+#define N 1024\n+int b[N + 1];\n+\n+int\n+main ()\n+{\n+  int i;\n+  check_vect ();\n+  for (i = 0; i < N + 1; i++)\n+    {\n+      b[i] = i;\n+      asm (\"\");\n+    }\n+  for (i = N; i >= 0; i--)\n+    {\n+      b[i + 1] = b[i];\n+      b[i] = 1;\n+    }\n+  if (b[0] != 1)\n+    __builtin_abort ();\n+  for (i = 0; i < N; i++)\n+    if (b[i + 1] != i)\n+      __builtin_abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "c3e8f372b839921de480db109da7daffd37de612", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d54b29d70cca0ae952f3fed9423c3acb28778a5/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d54b29d70cca0ae952f3fed9423c3acb28778a5/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=3d54b29d70cca0ae952f3fed9423c3acb28778a5", "patch": "@@ -2484,19 +2484,21 @@ vect_analyze_data_ref_accesses (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo)\n     return true;\n \n   /* Sort the array of datarefs to make building the interleaving chains\n-     linear.  */\n-  qsort (datarefs.address (), datarefs.length (),\n+     linear.  Don't modify the original vector's order, it is needed for\n+     determining what dependencies are reversed.  */\n+  vec<data_reference_p> datarefs_copy = datarefs.copy ();\n+  qsort (datarefs_copy.address (), datarefs_copy.length (),\n \t sizeof (data_reference_p), dr_group_sort_cmp);\n \n   /* Build the interleaving chains.  */\n-  for (i = 0; i < datarefs.length () - 1;)\n+  for (i = 0; i < datarefs_copy.length () - 1;)\n     {\n-      data_reference_p dra = datarefs[i];\n+      data_reference_p dra = datarefs_copy[i];\n       stmt_vec_info stmtinfo_a = vinfo_for_stmt (DR_STMT (dra));\n       stmt_vec_info lastinfo = NULL;\n-      for (i = i + 1; i < datarefs.length (); ++i)\n+      for (i = i + 1; i < datarefs_copy.length (); ++i)\n \t{\n-\t  data_reference_p drb = datarefs[i];\n+\t  data_reference_p drb = datarefs_copy[i];\n \t  stmt_vec_info stmtinfo_b = vinfo_for_stmt (DR_STMT (drb));\n \n \t  /* ???  Imperfect sorting (non-compatible types, non-modulo\n@@ -2573,7 +2575,7 @@ vect_analyze_data_ref_accesses (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo)\n \t}\n     }\n \n-  FOR_EACH_VEC_ELT (datarefs, i, dr)\n+  FOR_EACH_VEC_ELT (datarefs_copy, i, dr)\n     if (STMT_VINFO_VECTORIZABLE (vinfo_for_stmt (DR_STMT (dr))) \n         && !vect_analyze_data_ref_access (dr))\n       {\n@@ -2588,9 +2590,13 @@ vect_analyze_data_ref_accesses (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo)\n             continue;\n           }\n         else\n-          return false;\n+\t  {\n+\t    datarefs_copy.release ();\n+\t    return false;\n+\t  }\n       }\n \n+  datarefs_copy.release ();\n   return true;\n }\n "}]}