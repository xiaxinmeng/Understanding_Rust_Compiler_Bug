{"sha": "404c2aeaae41097fd9f37c1ea74fb87cd1de6d27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA0YzJhZWFhZTQxMDk3ZmQ5ZjM3YzFlYTc0ZmI4N2NkMWRlNmQyNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-01-30T14:21:31Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-01-30T14:21:31Z"}, "message": "re PR c++/59633 (ICE with __attribute((vector_size(...))) for enum)\n\n\tPR c++/59633\ngcc/\n\t* tree.c (walk_type_fields): Handle VECTOR_TYPE.\ngcc/cp/\n\t* decl2.c (attributes_naming_typedef_ok): New.\n\t* cp-tree.h: Declare it.\n\t* decl.c (grokdeclarator): Check it.\n\t* tree.c (no_linkage_check): Handle VECTOR_TYPE.\n\nFrom-SVN: r207302", "tree": {"sha": "5a15d54643362248efd6d68a1ba93600967dfa32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a15d54643362248efd6d68a1ba93600967dfa32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/404c2aeaae41097fd9f37c1ea74fb87cd1de6d27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/404c2aeaae41097fd9f37c1ea74fb87cd1de6d27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/404c2aeaae41097fd9f37c1ea74fb87cd1de6d27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/404c2aeaae41097fd9f37c1ea74fb87cd1de6d27/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fc044323f492ebb6913398604104f293df99dbe3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc044323f492ebb6913398604104f293df99dbe3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc044323f492ebb6913398604104f293df99dbe3"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "d571a8faf440ec64a72d81a81c370bb4b03484a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/404c2aeaae41097fd9f37c1ea74fb87cd1de6d27/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/404c2aeaae41097fd9f37c1ea74fb87cd1de6d27/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=404c2aeaae41097fd9f37c1ea74fb87cd1de6d27", "patch": "@@ -1,5 +1,8 @@\n 2014-01-30  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/59633\n+\t* tree.c (walk_type_fields): Handle VECTOR_TYPE.\n+\n \tPR c++/59645\n \t* cgraphunit.c (expand_thunk): Copy volatile arg to a temporary.\n "}, {"sha": "037b4bd8c409f4f27b1c62f0eefa6f7fd102ae11", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/404c2aeaae41097fd9f37c1ea74fb87cd1de6d27/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/404c2aeaae41097fd9f37c1ea74fb87cd1de6d27/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=404c2aeaae41097fd9f37c1ea74fb87cd1de6d27", "patch": "@@ -1,3 +1,11 @@\n+2014-01-30  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/59633\n+\t* decl2.c (attributes_naming_typedef_ok): New.\n+\t* cp-tree.h: Declare it.\n+\t* decl.c (grokdeclarator): Check it.\n+\t* tree.c (no_linkage_check): Handle VECTOR_TYPE.\n+\n 2014-01-29  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/59707"}, {"sha": "7f4649903fb7ef369f4c683bd9896fc2ff2e2895", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/404c2aeaae41097fd9f37c1ea74fb87cd1de6d27/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/404c2aeaae41097fd9f37c1ea74fb87cd1de6d27/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=404c2aeaae41097fd9f37c1ea74fb87cd1de6d27", "patch": "@@ -5296,6 +5296,7 @@ extern tree grokfield (const cp_declarator *, cp_decl_specifier_seq *,\n extern tree grokbitfield (const cp_declarator *, cp_decl_specifier_seq *,\n \t\t\t  tree, tree);\n extern tree cp_reconstruct_complex_type\t\t(tree, tree);\n+extern bool attributes_naming_typedef_ok\t(tree);\n extern void cplus_decl_attributes\t\t(tree *, tree, int);\n extern void finish_anon_union\t\t\t(tree);\n extern void cp_write_global_declarations\t(void);"}, {"sha": "3652e8dd11ab16ce7ae1ddcdaa10d4c91a2c7d2f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/404c2aeaae41097fd9f37c1ea74fb87cd1de6d27/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/404c2aeaae41097fd9f37c1ea74fb87cd1de6d27/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=404c2aeaae41097fd9f37c1ea74fb87cd1de6d27", "patch": "@@ -10216,6 +10216,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t  && TREE_CODE (TYPE_NAME (type)) == TYPE_DECL\n \t  && TYPE_ANONYMOUS_P (type)\n \t  && declspecs->type_definition_p\n+\t  && attributes_naming_typedef_ok (*attrlist)\n \t  && cp_type_quals (type) == TYPE_UNQUALIFIED)\n \t{\n \t  tree t;"}, {"sha": "b2103c802df73eaafe4e672fb9da3bf798f57bfa", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/404c2aeaae41097fd9f37c1ea74fb87cd1de6d27/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/404c2aeaae41097fd9f37c1ea74fb87cd1de6d27/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=404c2aeaae41097fd9f37c1ea74fb87cd1de6d27", "patch": "@@ -1243,6 +1243,22 @@ save_template_attributes (tree *attr_p, tree *decl_p)\n     }\n }\n \n+/* Return true iff ATTRS are acceptable attributes to be applied in-place\n+   to a typedef which gives a previously anonymous class or enum a name for\n+   linkage purposes.  */\n+\n+bool\n+attributes_naming_typedef_ok (tree attrs)\n+{\n+  for (; attrs; attrs = TREE_CHAIN (attrs))\n+    {\n+      tree name = get_attribute_name (attrs);\n+      if (is_attribute_p (\"vector_size\", name))\n+\treturn false;\n+    }\n+  return true;\n+}\n+\n /* Like reconstruct_complex_type, but handle also template trees.  */\n \n tree"}, {"sha": "fe2ddabae1deb3f5ef74203ba51146b9d1deb1f3", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/404c2aeaae41097fd9f37c1ea74fb87cd1de6d27/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/404c2aeaae41097fd9f37c1ea74fb87cd1de6d27/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=404c2aeaae41097fd9f37c1ea74fb87cd1de6d27", "patch": "@@ -2170,6 +2170,7 @@ no_linkage_check (tree t, bool relaxed_p)\n     case ARRAY_TYPE:\n     case POINTER_TYPE:\n     case REFERENCE_TYPE:\n+    case VECTOR_TYPE:\n       return no_linkage_check (TREE_TYPE (t), relaxed_p);\n \n     case OFFSET_TYPE:"}, {"sha": "6d55158d4a2fdf0c136f04ac8a420cec799c4910", "filename": "gcc/testsuite/g++.dg/ext/vector26.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/404c2aeaae41097fd9f37c1ea74fb87cd1de6d27/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/404c2aeaae41097fd9f37c1ea74fb87cd1de6d27/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector26.C?ref=404c2aeaae41097fd9f37c1ea74fb87cd1de6d27", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/59633\n+// In C++98, the definition of bar is an error.  In C++11, bar implicitly\n+// gets internal linkage.\n+\n+typedef enum { e } T __attribute__((vector_size(8)));\n+static void foo(T t) {}\n+void bar (T t) {}\t\t// { dg-error \"no linkage\" \"\" { target c++98 } }\n+// { dg-final { scan-assembler-not \"globl\\[ \\t]*_Z3bar\" } }"}, {"sha": "1d06ba7f47f52a5af73925c1a1981e983bec7d10", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/404c2aeaae41097fd9f37c1ea74fb87cd1de6d27/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/404c2aeaae41097fd9f37c1ea74fb87cd1de6d27/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=404c2aeaae41097fd9f37c1ea74fb87cd1de6d27", "patch": "@@ -10817,6 +10817,7 @@ walk_type_fields (tree type, walk_tree_fn func, void *data,\n     {\n     case POINTER_TYPE:\n     case REFERENCE_TYPE:\n+    case VECTOR_TYPE:\n       /* We have to worry about mutually recursive pointers.  These can't\n \t be written in C.  They can in Ada.  It's pathological, but\n \t there's an ACATS test (c38102a) that checks it.  Deal with this"}]}