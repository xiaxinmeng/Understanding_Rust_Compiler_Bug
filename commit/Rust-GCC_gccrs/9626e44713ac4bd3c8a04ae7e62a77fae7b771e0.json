{"sha": "9626e44713ac4bd3c8a04ae7e62a77fae7b771e0", "node_id": "C_kwDOANBUbNoAKDk2MjZlNDQ3MTNhYzRiZDNjOGEwNGFlN2U2MmE3N2ZhZTdiNzcxZTA", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-10-21T15:55:16Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-10-21T15:55:16Z"}, "message": "libstdc++: Implement P1739R4 changes to views::take/drop/counted\n\nThis implements P1739R4 along with the resolution for LWG 3407 which\ncorrects the paper's wording.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/ranges_util.h (views::_Drop): Forward declare.\n\t(subrange): Befriend views::_Drop.\n\t(subrange::_S_store_size): Declare constexpr instead of just\n\tconst, remove obsolete comment.\n\t* include/std/ranges (views::__detail::__is_empty_view): Define.\n\t(views::__detail::__is_basic_string_view): Likewise.\n\t(views::__detail::__is_subrange): Likewise.\n\t(views::__detail::__is_iota_view): Likewise.\n\t(views::__detail::__can_take_view): Rename template parm _Tp to _Dp.\n\t(views::_Take): Rename template parm _Tp to _Dp, make it non-deducible\n\tand fix it to range_difference_t<_Range>.  Implement P1739R4 and\n\tLWG 3407 changes.\n\t(views::__detail::__can_drop_view): Rename template parm _Tp to _Dp.\n\t(views::_Drop): As with views::_Take.\n\t(views::_Counted): Implement P1739R4 changes.\n\t* include/std/span (__detail::__is_std_span): Rename to ...\n\t(__detail::__is_span): ... this and turn it into a variable\n\ttemplate.\n\t(__detail::__is_std_array): Turn it into a variable template.\n\t(span::span): Adjust uses of __is_std_span and __is_std_array\n\taccordingly.\n\t* testsuite/std/ranges/adaptors/p1739.cc: New test.", "tree": {"sha": "984fa4eaa04c555919d77d24eb8e9378386c4e45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/984fa4eaa04c555919d77d24eb8e9378386c4e45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9626e44713ac4bd3c8a04ae7e62a77fae7b771e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9626e44713ac4bd3c8a04ae7e62a77fae7b771e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9626e44713ac4bd3c8a04ae7e62a77fae7b771e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9626e44713ac4bd3c8a04ae7e62a77fae7b771e0/comments", "author": null, "committer": null, "parents": [{"sha": "bdc42283bc7147bc01557dfab6a8c96bf31cf25a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdc42283bc7147bc01557dfab6a8c96bf31cf25a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdc42283bc7147bc01557dfab6a8c96bf31cf25a"}], "stats": {"total": 214, "additions": 193, "deletions": 21}, "files": [{"sha": "060e665d8dbeb2a2615fb5999d19c45b7c4ae6b9", "filename": "libstdc++-v3/include/bits/ranges_util.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9626e44713ac4bd3c8a04ae7e62a77fae7b771e0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9626e44713ac4bd3c8a04ae7e62a77fae7b771e0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h?ref=9626e44713ac4bd3c8a04ae7e62a77fae7b771e0", "patch": "@@ -216,6 +216,8 @@ namespace ranges\n \n   } // namespace __detail\n \n+  namespace views { struct _Drop; } // defined in <ranges>\n+\n   enum class subrange_kind : bool { unsized, sized };\n \n   /// The ranges::subrange class template\n@@ -226,10 +228,11 @@ namespace ranges\n     class subrange : public view_interface<subrange<_It, _Sent, _Kind>>\n     {\n     private:\n-      // XXX: gcc complains when using constexpr here\n-      static const bool _S_store_size\n+      static constexpr bool _S_store_size\n \t= _Kind == subrange_kind::sized && !sized_sentinel_for<_Sent, _It>;\n \n+      friend struct views::_Drop; // Needs to inspect _S_store_size.\n+\n       _It _M_begin = _It();\n       [[no_unique_address]] _Sent _M_end = _Sent();\n "}, {"sha": "d6bb78c09f91e4bdd816203f7b7e27a2f1e6ea22", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 94, "deletions": 13, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9626e44713ac4bd3c8a04ae7e62a77fae7b771e0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9626e44713ac4bd3c8a04ae7e62a77fae7b771e0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=9626e44713ac4bd3c8a04ae7e62a77fae7b771e0", "patch": "@@ -42,6 +42,7 @@\n #include <initializer_list>\n #include <iterator>\n #include <optional>\n+#include <span>\n #include <tuple>\n #include <bits/ranges_util.h>\n #include <bits/refwrap.h>\n@@ -2125,19 +2126,67 @@ namespace views::__adaptor\n   {\n     namespace __detail\n     {\n-      template<typename _Range, typename _Tp>\n+      template<typename _Range>\n+\tinline constexpr bool __is_empty_view = false;\n+\n+      template<typename _Tp>\n+\tinline constexpr bool __is_empty_view<empty_view<_Tp>> = true;\n+\n+      template<typename _Range>\n+\tinline constexpr bool __is_basic_string_view = false;\n+\n+      template<typename _CharT, typename _Traits>\n+\tinline constexpr bool __is_basic_string_view<basic_string_view<_CharT, _Traits>>\n+\t  = true;\n+\n+      template<typename _Range>\n+\tinline constexpr bool __is_subrange = false;\n+\n+      template<typename _Iter, typename _Sent, subrange_kind _Kind>\n+\tinline constexpr bool __is_subrange<subrange<_Iter, _Sent, _Kind>> = true;\n+\n+      template<typename _Range>\n+\tinline constexpr bool __is_iota_view = false;\n+\n+      template<typename _Winc, typename _Bound>\n+\tinline constexpr bool __is_iota_view<iota_view<_Winc, _Bound>> = true;\n+\n+      template<typename _Range, typename _Dp>\n \tconcept __can_take_view\n-\t  = requires { take_view(std::declval<_Range>(), std::declval<_Tp>()); };\n+\t  = requires { take_view(std::declval<_Range>(), std::declval<_Dp>()); };\n     } // namespace __detail\n \n     struct _Take : __adaptor::_RangeAdaptor<_Take>\n     {\n-      template<viewable_range _Range, typename _Tp>\n-\trequires __detail::__can_take_view<_Range, _Tp>\n+      template<viewable_range _Range, typename _Dp = range_difference_t<_Range>>\n+\trequires __detail::__can_take_view<_Range, _Dp>\n \tconstexpr auto\n-\toperator() [[nodiscard]] (_Range&& __r, _Tp&& __n) const\n+\toperator() [[nodiscard]] (_Range&& __r, type_identity_t<_Dp> __n) const\n \t{\n-\t  return take_view(std::forward<_Range>(__r), std::forward<_Tp>(__n));\n+\t  using _Tp = remove_cvref_t<_Range>;\n+\t  if constexpr (__detail::__is_empty_view<_Tp>)\n+\t    return _Tp();\n+\t  else if constexpr (random_access_range<_Tp>\n+\t\t\t     && sized_range<_Tp>\n+\t\t\t     && (std::__detail::__is_span<_Tp>\n+\t\t\t\t || __detail::__is_basic_string_view<_Tp>\n+\t\t\t\t || __detail::__is_subrange<_Tp>\n+\t\t\t\t || __detail::__is_iota_view<_Tp>))\n+\t    {\n+\t      __n = std::min<_Dp>(ranges::distance(__r), __n);\n+\t      auto __begin = ranges::begin(__r);\n+\t      auto __end = __begin + __n;\n+\t      if constexpr (std::__detail::__is_span<_Tp>)\n+\t\treturn span<typename _Tp::element_type>(__begin, __end);\n+\t      else if constexpr (__detail::__is_basic_string_view<_Tp>)\n+\t\treturn _Tp(__begin, __end);\n+\t      else if constexpr (__detail::__is_subrange<_Tp>)\n+\t\treturn subrange<iterator_t<_Tp>>(__begin, __end);\n+\t      else\n+\t\treturn iota_view(*__begin, *__end);\n+\t    }\n+\t  else\n+\t    return take_view(std::forward<_Range>(__r), __n);\n \t}\n \n       using _RangeAdaptor<_Take>::operator();\n@@ -2372,19 +2421,49 @@ namespace views::__adaptor\n   {\n     namespace __detail\n     {\n-      template<typename _Range, typename _Tp>\n+      template<typename _Range, typename _Dp>\n \tconcept __can_drop_view\n-\t  = requires { drop_view(std::declval<_Range>(), std::declval<_Tp>()); };\n+\t  = requires { drop_view(std::declval<_Range>(), std::declval<_Dp>()); };\n     } // namespace __detail\n \n     struct _Drop : __adaptor::_RangeAdaptor<_Drop>\n     {\n-      template<viewable_range _Range, typename _Tp>\n-\trequires __detail::__can_drop_view<_Range, _Tp>\n+      template<viewable_range _Range, typename _Dp = range_difference_t<_Range>>\n+\trequires __detail::__can_drop_view<_Range, _Dp>\n \tconstexpr auto\n-\toperator() [[nodiscard]] (_Range&& __r, _Tp&& __n) const\n+\toperator() [[nodiscard]] (_Range&& __r, type_identity_t<_Dp> __n) const\n \t{\n-\t  return drop_view(std::forward<_Range>(__r), std::forward<_Tp>(__n));\n+\t  using _Tp = remove_cvref_t<_Range>;\n+\t  if constexpr (__detail::__is_empty_view<_Tp>)\n+\t    return _Tp();\n+\t  else if constexpr (random_access_range<_Tp>\n+\t\t\t     && sized_range<_Tp>\n+\t\t\t     && (std::__detail::__is_span<_Tp>\n+\t\t\t\t || __detail::__is_basic_string_view<_Tp>\n+\t\t\t\t || __detail::__is_iota_view<_Tp>\n+\t\t\t\t || __detail::__is_subrange<_Tp>))\n+\t    {\n+\t      __n = std::min<_Dp>(ranges::distance(__r), __n);\n+\t      auto __begin = ranges::begin(__r) + __n;\n+\t      auto __end = ranges::end(__r);\n+\t      if constexpr (std::__detail::__is_span<_Tp>)\n+\t\treturn span<typename _Tp::element_type>(__begin, __end);\n+\t      else if constexpr (__detail::__is_subrange<_Tp>)\n+\t\t{\n+\t\t  if constexpr (_Tp::_S_store_size)\n+\t\t    {\n+\t\t      using ranges::__detail::__to_unsigned_like;\n+\t\t      auto __m = ranges::distance(__r) - __n;\n+\t\t      return _Tp(__begin, __end, __to_unsigned_like(__m));\n+\t\t    }\n+\t\t  else\n+\t\t    return _Tp(__begin, __end);\n+\t\t}\n+\t      else\n+\t\treturn _Tp(__begin, __end);\n+\t    }\n+\t  else\n+\t    return drop_view(std::forward<_Range>(__r), __n);\n \t}\n \n       using _RangeAdaptor<_Drop>::operator();\n@@ -3519,7 +3598,9 @@ namespace views::__adaptor\n       constexpr auto\n       operator() [[nodiscard]] (_Iter __i, iter_difference_t<_Iter> __n) const\n       {\n-\tif constexpr (random_access_iterator<_Iter>)\n+\tif constexpr (contiguous_iterator<_Iter>)\n+\t  return span(std::__to_address(__i), __n);\n+\telse if constexpr (random_access_iterator<_Iter>)\n \t  return subrange(__i, __i + __n);\n \telse\n \t  return subrange(counted_iterator(std::move(__i), __n),"}, {"sha": "61824dee845941ba6e5953298b9ec297ff4ded06", "filename": "libstdc++-v3/include/std/span", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9626e44713ac4bd3c8a04ae7e62a77fae7b771e0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9626e44713ac4bd3c8a04ae7e62a77fae7b771e0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan?ref=9626e44713ac4bd3c8a04ae7e62a77fae7b771e0", "patch": "@@ -58,16 +58,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   namespace __detail\n   {\n     template<typename _Tp>\n-      struct __is_std_span : false_type { };\n+      inline constexpr bool __is_span = false;\n \n     template<typename _Tp, size_t _Num>\n-      struct __is_std_span<span<_Tp, _Num>> : true_type { };\n+      inline constexpr bool __is_span<span<_Tp, _Num>> = true;\n \n     template<typename _Tp>\n-      struct __is_std_array : false_type { };\n+      inline constexpr bool __is_std_array = false;\n \n     template<typename _Tp, size_t _Num>\n-      struct __is_std_array<std::array<_Tp, _Num>> : true_type { };\n+      inline constexpr bool __is_std_array<std::array<_Tp, _Num>> = true;\n \n     template<size_t _Extent>\n       class __extent_storage\n@@ -203,8 +203,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Range>\n \trequires ranges::contiguous_range<_Range> && ranges::sized_range<_Range>\n \t  && (ranges::borrowed_range<_Range> || is_const_v<element_type>)\n-\t  && (!__detail::__is_std_span<remove_cvref_t<_Range>>::value)\n-\t  && (!__detail::__is_std_array<remove_cvref_t<_Range>>::value)\n+\t  && (!__detail::__is_span<remove_cvref_t<_Range>>)\n+\t  && (!__detail::__is_std_array<remove_cvref_t<_Range>>)\n \t  && (!is_array_v<remove_cvref_t<_Range>>)\n \t  && __is_compatible_ref<ranges::range_reference_t<_Range>>::value\n \tconstexpr explicit(extent != dynamic_extent)"}, {"sha": "3e51aa0179623681a1089070d404c244ebf605fd", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/p1739.cc", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9626e44713ac4bd3c8a04ae7e62a77fae7b771e0/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fp1739.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9626e44713ac4bd3c8a04ae7e62a77fae7b771e0/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fp1739.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fp1739.cc?ref=9626e44713ac4bd3c8a04ae7e62a77fae7b771e0", "patch": "@@ -0,0 +1,88 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do run { target c++20 } }\n+\n+#include <algorithm>\n+#include <ranges>\n+#include <testsuite_hooks.h>\n+\n+// Verify P1739R4 (and LWG 3407) changes to views::take/drop/counted.\n+\n+namespace ranges = std::ranges;\n+namespace views = ranges::views;\n+\n+void\n+test01()\n+{\n+  ranges::empty_view<int> v;\n+  using ty = decltype(v);\n+  using ty = decltype(views::take(v, 42));\n+  using ty = decltype(views::drop(v, 42));\n+}\n+\n+void\n+test02()\n+{\n+  int x[] = {1,2,3,4,5};\n+  std::span r(x, x+5);\n+  using ty = decltype(r);\n+\n+  std::same_as<ty> auto v1 = views::take(r, 2);\n+  VERIFY( ranges::equal(v1, (int[]){1,2}) );\n+\n+  std::same_as<ty> auto v2 = views::drop(r, 3);\n+  VERIFY( ranges::equal(v2, (int[]){4,5}) );\n+\n+  std::same_as<ty> auto v3 = views::counted(r.begin(), 4);\n+  VERIFY( ranges::equal(v3, (int[]){1,2,3,4}) );\n+}\n+\n+void\n+test03()\n+{\n+  using namespace std::literals;\n+  std::string_view r = \"hello world\"sv;\n+  using ty = decltype(r);\n+\n+  std::same_as<ty> auto v1 = views::take(r, 5);\n+  VERIFY( ranges::equal(v1, \"hello\"sv) );\n+\n+  std::same_as<ty> auto v2 = views::drop(r, 6);\n+  VERIFY( ranges::equal(v2, \"world\"sv) );\n+}\n+\n+void\n+test04()\n+{\n+  int x[] = {1,2,3,4,5};\n+  ranges::subrange r(x, x+5);\n+  using ty = decltype(r);\n+\n+  std::same_as<ty> auto v1 = views::take(r, 2);\n+  VERIFY( ranges::equal(v1, (int[]){1,2}) );\n+\n+  std::same_as<ty> auto v2 = views::drop(r, 1);\n+  VERIFY( ranges::equal(v2, (int[]){2,3,4,5}) );\n+}\n+\n+void\n+test05()\n+{\n+  auto r1 = views::iota(1, 6);\n+  using ty1 = decltype(r1);\n+\n+  std::same_as<ty1> auto v1 = views::take(r1, 2);\n+  VERIFY( ranges::equal(v1, (int[]){1,2}) );\n+\n+  std::same_as<ty1> auto v2 = views::drop(r1, 3);\n+  VERIFY( ranges::equal(v2, (int[]){4,5}) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+  test05();\n+}"}]}