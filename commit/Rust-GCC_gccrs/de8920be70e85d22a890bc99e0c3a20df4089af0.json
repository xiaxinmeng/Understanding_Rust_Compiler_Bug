{"sha": "de8920be70e85d22a890bc99e0c3a20df4089af0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU4OTIwYmU3MGU4NWQyMmE4OTBiYzk5ZTBjM2EyMGRmNDA4OWFmMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2002-08-03T20:20:35Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-08-03T20:20:35Z"}, "message": "explow.c (int_expr_size): New fn.\n\n        * explow.c (int_expr_size): New fn.\n        * expr.c (expand_expr) [CONSTRUCTOR]: Use it.\n        * expr.h: Declare it.\n\nFrom-SVN: r56009", "tree": {"sha": "0f3eddb683599b1fa6da741865277a804942c1f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f3eddb683599b1fa6da741865277a804942c1f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de8920be70e85d22a890bc99e0c3a20df4089af0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de8920be70e85d22a890bc99e0c3a20df4089af0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de8920be70e85d22a890bc99e0c3a20df4089af0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de8920be70e85d22a890bc99e0c3a20df4089af0/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7a9ffd82b6227ee0ebe3f7a4f767e470b847d77a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a9ffd82b6227ee0ebe3f7a4f767e470b847d77a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a9ffd82b6227ee0ebe3f7a4f767e470b847d77a"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "96046ec70c4568fe15486e70689f28f4456e34bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8920be70e85d22a890bc99e0c3a20df4089af0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8920be70e85d22a890bc99e0c3a20df4089af0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de8920be70e85d22a890bc99e0c3a20df4089af0", "patch": "@@ -1,3 +1,9 @@\n+2002-08-03  Jason Merrill  <jason@redhat.com>\n+\n+\t* explow.c (int_expr_size): New fn.\n+\t* expr.c (expand_expr) [CONSTRUCTOR]: Use it.\n+\t* expr.h: Declare it.\n+\n 2002-08-02  Krister Walfridsson  <cato@df.lth.se>\n \n \t* Makefile.in (gengtype-lex.o, gengtype-yacc.o): Add path to"}, {"sha": "1d2764064e1ee33641b4f4eaa92c95a4dae3242b", "filename": "gcc/explow.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8920be70e85d22a890bc99e0c3a20df4089af0/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8920be70e85d22a890bc99e0c3a20df4089af0/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=de8920be70e85d22a890bc99e0c3a20df4089af0", "patch": "@@ -294,6 +294,26 @@ expr_size (exp)\n \n   return expand_expr (size, NULL_RTX, TYPE_MODE (sizetype), 0);\n }\n+\n+/* Return a wide integer for the size in bytes of the value of EXP, or -1\n+   if the size can vary or is larger than an integer.  */\n+\n+HOST_WIDE_INT\n+int_expr_size (exp)\n+     tree exp;\n+{\n+  tree t = (*lang_hooks.expr_size) (exp);\n+\n+  if (t == 0\n+      || TREE_CODE (t) != INTEGER_CST\n+      || TREE_OVERFLOW (t)\n+      || TREE_INT_CST_HIGH (t) != 0\n+      /* If the result would appear negative, it's too big to represent.  */\n+      || (HOST_WIDE_INT) TREE_INT_CST_LOW (t) < 0)\n+    return -1;\n+\n+  return TREE_INT_CST_LOW (t);\n+}\n \f\n /* Return a copy of X in which all memory references\n    and all constants that involve symbol refs"}, {"sha": "4591af434e63b2fed947885298bf3fbd77dbf2b7", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8920be70e85d22a890bc99e0c3a20df4089af0/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8920be70e85d22a890bc99e0c3a20df4089af0/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=de8920be70e85d22a890bc99e0c3a20df4089af0", "patch": "@@ -6812,7 +6812,7 @@ expand_expr (exp, target, tmode, modifier)\n \t\t\t\t\t\t       * TYPE_QUAL_CONST))),\n \t\t\t     0, TREE_ADDRESSABLE (exp), 1);\n \n-\t  store_constructor (exp, target, 0, INTVAL (expr_size (exp)));\n+\t  store_constructor (exp, target, 0, int_expr_size (exp));\n \t  return target;\n \t}\n "}, {"sha": "76b5c809e8e93499f726506c52f596a5e3ba4983", "filename": "gcc/expr.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8920be70e85d22a890bc99e0c3a20df4089af0/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8920be70e85d22a890bc99e0c3a20df4089af0/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=de8920be70e85d22a890bc99e0c3a20df4089af0", "patch": "@@ -544,6 +544,10 @@ extern unsigned int case_values_threshold PARAMS ((void));\n /* Return an rtx for the size in bytes of the value of an expr.  */\n extern rtx expr_size PARAMS ((tree));\n \n+/* Return a wide integer for the size in bytes of the value of EXP, or -1\n+   if the size can vary or is larger than an integer.  */\n+extern HOST_WIDE_INT int_expr_size PARAMS ((tree));\n+\n extern rtx lookup_static_chain PARAMS ((tree));\n \n /* Convert a stack slot address ADDR valid in function FNDECL"}]}