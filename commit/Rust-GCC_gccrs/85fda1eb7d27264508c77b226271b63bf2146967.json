{"sha": "85fda1eb7d27264508c77b226271b63bf2146967", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVmZGExZWI3ZDI3MjY0NTA4Yzc3YjIyNjI3MWI2M2JmMjE0Njk2Nw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-12-19T07:04:42Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-12-19T07:04:42Z"}, "message": "genattr.c (fatal): Qualify a char* with the `const' keyword.\n\n        * genattr.c (fatal): Qualify a char* with the `const' keyword.\n        * genattrtab.c (fatal, attr_printf, attr_string, write_attr_set,\n        write_unit_name, write_eligible_delay, expand_units,\n        make_length_attrs, write_attr_case, find_attr,\n        make_internal_attr): Likewise.\n        * gencheck.c (tree_codes): Likewise.\n        * gencodes.c (fatal): Likewise.\n        * genconfig.c (fatal): Likewise.\n        * genemit.c (fatal): Likewise.\n        * genextract.c (fatal, walk_rtx, copystr): Likewise.\n        * genflags.c (fatal): Likewise.\n        * genopinit.c (fatal, optabs, gen_insn): Likewise.\n        * genoutput.c (fatal, error, predicates): Likewise.\n        * genpeep.c (fatal): Likewise.\n        * genrecog.c (fatal, decision, pred_table, add_to_sequence,\n        write_tree_1, write_tree, change_state, copystr, indents): Likewise.\n\nFrom-SVN: r24377", "tree": {"sha": "0c9ae63b2016c0b36f1c1af0310177677a194b1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c9ae63b2016c0b36f1c1af0310177677a194b1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85fda1eb7d27264508c77b226271b63bf2146967", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85fda1eb7d27264508c77b226271b63bf2146967", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85fda1eb7d27264508c77b226271b63bf2146967", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85fda1eb7d27264508c77b226271b63bf2146967/comments", "author": null, "committer": null, "parents": [{"sha": "2069dfd8d957651c9e01b461c645e81a14899c28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2069dfd8d957651c9e01b461c645e81a14899c28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2069dfd8d957651c9e01b461c645e81a14899c28"}], "stats": {"total": 224, "additions": 123, "deletions": 101}, "files": [{"sha": "9ae5f62aa9f844eab0fc5a5518988a45115e7306", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85fda1eb7d27264508c77b226271b63bf2146967/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85fda1eb7d27264508c77b226271b63bf2146967/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85fda1eb7d27264508c77b226271b63bf2146967", "patch": "@@ -1,3 +1,23 @@\n+Sat Dec 19 09:52:27 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* genattr.c (fatal): Qualify a char* with the `const' keyword.\n+\t\n+\t* genattrtab.c (fatal, attr_printf, attr_string, write_attr_set,\n+ \twrite_unit_name, write_eligible_delay, expand_units,\n+ \tmake_length_attrs, write_attr_case, find_attr,\n+\tmake_internal_attr): Likewise.\n+\t* gencheck.c (tree_codes): Likewise.\n+\t* gencodes.c (fatal): Likewise.\n+\t* genconfig.c (fatal): Likewise.\n+\t* genemit.c (fatal): Likewise.\n+\t* genextract.c (fatal, walk_rtx, copystr): Likewise.\n+\t* genflags.c (fatal): Likewise.\n+\t* genopinit.c (fatal, optabs, gen_insn): Likewise.\n+\t* genoutput.c (fatal, error, predicates): Likewise.\n+\t* genpeep.c (fatal): Likewise.\n+\t* genrecog.c (fatal, decision, pred_table, add_to_sequence,\n+\twrite_tree_1, write_tree, change_state, copystr, indents): Likewise.\n+\n Thu Dec 17 18:21:49 1998  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* configure.in (with-fast-fixincludes): Fix whitespace."}, {"sha": "b676be5140fc4601dd654b919e9ba1cf65458c29", "filename": "gcc/genattr.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85fda1eb7d27264508c77b226271b63bf2146967/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85fda1eb7d27264508c77b226271b63bf2146967/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=85fda1eb7d27264508c77b226271b63bf2146967", "patch": "@@ -31,7 +31,7 @@ struct obstack *rtl_obstack = &obstack;\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-static void fatal PVPROTO ((char *, ...))\n+static void fatal PVPROTO ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n \n@@ -221,17 +221,17 @@ xrealloc (ptr, size)\n }\n \n static void\n-fatal VPROTO ((char *format, ...))\n+fatal VPROTO ((const char *format, ...))\n {\n #ifndef ANSI_PROTOTYPES\n-  char *format;\n+  const char *format;\n #endif\n   va_list ap;\n \n   VA_START (ap, format);\n \n #ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, char *);\n+  format = va_arg (ap, const char *);\n #endif\n \n   fprintf (stderr, \"genattr: \");"}, {"sha": "fc2f8840b1e53a95f47fa806fd7240578bd7b03b", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 35, "deletions": 33, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85fda1eb7d27264508c77b226271b63bf2146967/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85fda1eb7d27264508c77b226271b63bf2146967/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=85fda1eb7d27264508c77b226271b63bf2146967", "patch": "@@ -119,7 +119,7 @@ struct obstack *temp_obstack = &obstack2;\n /* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n char **insn_name_ptr = 0;\n \n-static void fatal PVPROTO ((char *, ...))\n+static void fatal PVPROTO ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n \n@@ -365,8 +365,9 @@ rtx pic_offset_table_rtx;\n static void attr_hash_add_rtx\tPROTO((int, rtx));\n static void attr_hash_add_string PROTO((int, char *));\n static rtx attr_rtx\t\tPVPROTO((enum rtx_code, ...));\n-static char *attr_printf\tPVPROTO((int, char *, ...));\n-static char *attr_string        PROTO((char *, int));\n+static char *attr_printf\tPVPROTO((int, const char *, ...))\n+  ATTRIBUTE_PRINTF_2;\n+static char *attr_string        PROTO((const char *, int));\n static rtx check_attr_test\tPROTO((rtx, int));\n static rtx check_attr_value\tPROTO((rtx, struct attr_desc *));\n static rtx convert_set_attr_alternative PROTO((rtx, int, int));\n@@ -430,25 +431,26 @@ static int or_attr_value\tPROTO((rtx));\n static void walk_attr_value\tPROTO((rtx));\n static void write_attr_get\tPROTO((struct attr_desc *));\n static rtx eliminate_known_true PROTO((rtx, rtx, int, int));\n-static void write_attr_set\tPROTO((struct attr_desc *, int, rtx, char *,\n-\t\t\t\t       char *, rtx, int, int));\n+static void write_attr_set\tPROTO((struct attr_desc *, int, rtx,\n+\t\t\t\t       const char *, const char *, rtx,\n+\t\t\t\t       int, int));\n static void write_attr_case\tPROTO((struct attr_desc *, struct attr_value *,\n-\t\t\t\t       int, char *, char *, int, rtx));\n-static void write_unit_name\tPROTO((char *, int, char *));\n+\t\t\t\t       int, const char *, const char *, int, rtx));\n+static void write_unit_name\tPROTO((const char *, int, const char *));\n static void write_attr_valueq\tPROTO((struct attr_desc *, char *));\n static void write_attr_value\tPROTO((struct attr_desc *, rtx));\n static void write_upcase\tPROTO((char *));\n static void write_indent\tPROTO((int));\n-static void write_eligible_delay PROTO((char *));\n+static void write_eligible_delay PROTO((const char *));\n static void write_function_unit_info PROTO((void));\n-static void write_complex_function PROTO((struct function_unit *, char *,\n-\t\t\t\t\t  char *));\n+static void write_complex_function PROTO((struct function_unit *, const char *,\n+\t\t\t\t\t  const char *));\n static int write_expr_attr_cache PROTO((rtx, struct attr_desc *));\n static void write_toplevel_expr\tPROTO((rtx));\n static int n_comma_elts\t\tPROTO((char *));\n static char *next_comma_elt\tPROTO((char **));\n-static struct attr_desc *find_attr PROTO((char *, int));\n-static void make_internal_attr\tPROTO((char *, rtx, int));\n+static struct attr_desc *find_attr PROTO((const char *, int));\n+static void make_internal_attr\tPROTO((const char *, rtx, int));\n static struct attr_value *find_most_used  PROTO((struct attr_desc *));\n static rtx find_single_value\tPROTO((struct attr_desc *));\n static rtx make_numeric_value\tPROTO((int));\n@@ -731,11 +733,11 @@ attr_rtx VPROTO((enum rtx_code code, ...))\n \n /*VARARGS2*/\n static char *\n-attr_printf VPROTO((register int len, char *fmt, ...))\n+attr_printf VPROTO((register int len, const char *fmt, ...))\n {\n #ifndef ANSI_PROTOTYPES\n   register int len;\n-  char *fmt;\n+  const char *fmt;\n #endif\n   va_list p;\n   register char *str;\n@@ -744,7 +746,7 @@ attr_printf VPROTO((register int len, char *fmt, ...))\n \n #ifndef ANSI_PROTOTYPES\n   len = va_arg (p, int);\n-  fmt = va_arg (p, char *);\n+  fmt = va_arg (p, const char *);\n #endif\n \n   /* Print the string into a temporary location.  */\n@@ -775,7 +777,7 @@ attr_numeral (n)\n \n static char *\n attr_string (str, len)\n-     char *str;\n+     const char *str;\n      int len;\n {\n   register struct attr_hash *h;\n@@ -1815,7 +1817,7 @@ expand_units ()\n   rtx unitsmask;\n   rtx readycost;\n   rtx newexp;\n-  char *str;\n+  const char *str;\n   int i, j, u, num, nvalues;\n \n   /* Rebuild the condition for the unit to share the RTL expressions.\n@@ -2384,9 +2386,9 @@ substitute_address (exp, no_address_fn, address_fn)\n static void\n make_length_attrs ()\n {\n-  static char *new_names[] = {\"*insn_default_length\",\n-\t\t\t      \"*insn_variable_length_p\",\n-\t\t\t      \"*insn_current_length\"};\n+  static const char *new_names[] = {\"*insn_default_length\",\n+\t\t\t\t      \"*insn_variable_length_p\",\n+\t\t\t\t      \"*insn_current_length\"};\n   static rtx (*no_address_fn[]) PROTO((rtx)) = {identity_fn, zero_fn, zero_fn};\n   static rtx (*address_fn[]) PROTO((rtx)) = {max_fn, one_fn, identity_fn};\n   size_t i;\n@@ -4921,8 +4923,8 @@ write_attr_set (attr, indent, value, prefix, suffix, known_true,\n      struct attr_desc *attr;\n      int indent;\n      rtx value;\n-     char *prefix;\n-     char *suffix;\n+     const char *prefix;\n+     const char *suffix;\n      rtx known_true;\n      int insn_code, insn_index;\n {\n@@ -5018,7 +5020,7 @@ write_attr_case (attr, av, write_case_lines, prefix, suffix, indent,\n      struct attr_desc *attr;\n      struct attr_value *av;\n      int write_case_lines;\n-     char *prefix, *suffix;\n+     const char *prefix, *suffix;\n      int indent;\n      rtx known_true;\n {\n@@ -5174,9 +5176,9 @@ write_toplevel_expr (p)\n \n static void\n write_unit_name (prefix, num, suffix)\n-     char *prefix;\n+     const char *prefix;\n      int num;\n-     char *suffix;\n+     const char *suffix;\n {\n   struct function_unit *unit;\n \n@@ -5212,7 +5214,7 @@ write_attr_valueq (attr, s)\n \t  else\n \t    {\n \t      int i;\n-\t      char *sep = \" /* units: \";\n+\t      const char *sep = \" /* units: \";\n \t      for (i = 0, num = ~num; num; i++, num >>= 1)\n \t\tif (num & 1)\n \t\t  {\n@@ -5284,7 +5286,7 @@ write_indent (indent)\n \n static void\n write_eligible_delay (kind)\n-     char *kind;\n+  const char *kind;\n {\n   struct delay_desc *delay;\n   int max_slots;\n@@ -5473,7 +5475,7 @@ write_function_unit_info ()\n static void\n write_complex_function (unit, name, connection)\n      struct function_unit *unit;\n-     char *name, *connection;\n+     const char *name, *connection;\n {\n   struct attr_desc *case_attr, *attr;\n   struct attr_value *av, *common_av;\n@@ -5614,7 +5616,7 @@ next_comma_elt (pstr)\n \n static struct attr_desc *\n find_attr (name, create)\n-     char *name;\n+     const char *name;\n      int create;\n {\n   struct attr_desc *attr;\n@@ -5652,7 +5654,7 @@ find_attr (name, create)\n \n static void\n make_internal_attr (name, value, special)\n-     char *name;\n+     const char *name;\n      rtx value;\n      int special;\n {\n@@ -5812,17 +5814,17 @@ copy_rtx_unchanging (orig)\n }\n \n static void\n-fatal VPROTO ((char *format, ...))\n+fatal VPROTO ((const char *format, ...))\n {\n #ifndef ANSI_PROTOTYPES\n-  char *format;\n+  const char *format;\n #endif\n   va_list ap;\n \n   VA_START (ap, format);\n \n #ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, char *);\n+  format = va_arg (ap, const char *);\n #endif\n \n   fprintf (stderr, \"genattrtab: \");"}, {"sha": "80d7c4f5f2efa2bb68865e9f6335998f8336c499", "filename": "gcc/gencheck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85fda1eb7d27264508c77b226271b63bf2146967/gcc%2Fgencheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85fda1eb7d27264508c77b226271b63bf2146967/gcc%2Fgencheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencheck.c?ref=85fda1eb7d27264508c77b226271b63bf2146967", "patch": "@@ -23,7 +23,7 @@ Boston, MA 02111-1307, USA.  */\n \n #define DEFTREECODE(SYM, NAME, TYPE, LEN)   STRINGIFY(SYM),\n \n-char *tree_codes[] = {\n+const char *tree_codes[] = {\n #include \"tree.def\"\n #include \"gencheck.h\"\n (char*)0"}, {"sha": "11dde78c6a7f7e321235ae2f8b7ab48422b0be4a", "filename": "gcc/gencodes.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85fda1eb7d27264508c77b226271b63bf2146967/gcc%2Fgencodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85fda1eb7d27264508c77b226271b63bf2146967/gcc%2Fgencodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencodes.c?ref=85fda1eb7d27264508c77b226271b63bf2146967", "patch": "@@ -33,7 +33,7 @@ struct obstack *rtl_obstack = &obstack;\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-static void fatal PVPROTO ((char *, ...))\n+static void fatal PVPROTO ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n \n@@ -79,17 +79,17 @@ xrealloc (ptr, size)\n }\n \n static void\n-fatal VPROTO ((char *format, ...))\n+fatal VPROTO ((const char *format, ...))\n {\n #ifndef ANSI_PROTOTYPES\n-  char *format;\n+  const char *format;\n #endif\n   va_list ap;\n \n   VA_START (ap, format);\n \n #ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, char *);\n+  format = va_arg (ap, const char *);\n #endif\n \n   fprintf (stderr, \"gencodes: \");"}, {"sha": "6a72e263da0d0ed84e61dd1725c9eca5e1373b82", "filename": "gcc/genconfig.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85fda1eb7d27264508c77b226271b63bf2146967/gcc%2Fgenconfig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85fda1eb7d27264508c77b226271b63bf2146967/gcc%2Fgenconfig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconfig.c?ref=85fda1eb7d27264508c77b226271b63bf2146967", "patch": "@@ -49,7 +49,7 @@ static int max_insns_per_split = 1;\n static int clobbers_seen_this_insn;\n static int dup_operands_seen_this_insn;\n \n-static void fatal PVPROTO ((char *, ...))\n+static void fatal PVPROTO ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n \n@@ -268,17 +268,17 @@ xrealloc (ptr, size)\n }\n \n static void\n-fatal VPROTO ((char *format, ...))\n+fatal VPROTO ((const char *format, ...))\n {\n #ifndef ANSI_PROTOTYPES\n-  char *format;\n+  const char *format;\n #endif\n   va_list ap;\n \n   VA_START (ap, format);\n \n #ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, char *);\n+  format = va_arg (ap, const char *);\n #endif\n \n   fprintf (stderr, \"genconfig: \");"}, {"sha": "81eefa96cbcd135cfb261651f9ce4675fab3c4c9", "filename": "gcc/genemit.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85fda1eb7d27264508c77b226271b63bf2146967/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85fda1eb7d27264508c77b226271b63bf2146967/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=85fda1eb7d27264508c77b226271b63bf2146967", "patch": "@@ -30,7 +30,7 @@ struct obstack *rtl_obstack = &obstack;\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-static void fatal PVPROTO ((char *, ...))\n+static void fatal PVPROTO ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n \n@@ -702,17 +702,17 @@ xrealloc (ptr, size)\n }\n \n static void\n-fatal VPROTO ((char *format, ...))\n+fatal VPROTO ((const char *format, ...))\n {\n #ifndef ANSI_PROTOTYPES\n-  char *format;\n+  const char *format;\n #endif\n   va_list ap;\n \n   VA_START (ap, format);\n \n #ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, char *);\n+  format = va_arg (ap, const char *);\n #endif\n \n   fprintf (stderr, \"genemit: \");"}, {"sha": "e8efcd2cfe344fa80028f95118f5e902776aa9f1", "filename": "gcc/genextract.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85fda1eb7d27264508c77b226271b63bf2146967/gcc%2Fgenextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85fda1eb7d27264508c77b226271b63bf2146967/gcc%2Fgenextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenextract.c?ref=85fda1eb7d27264508c77b226271b63bf2146967", "patch": "@@ -96,11 +96,11 @@ static int dupnums[MAX_DUP_OPERANDS];\n static struct code_ptr *peepholes;\n \n static void gen_insn PROTO ((rtx));\n-static void walk_rtx PROTO ((rtx, char *));\n+static void walk_rtx PROTO ((rtx, const char *));\n static void print_path PROTO ((char *));\n-static void fatal PVPROTO ((char *, ...))\n+static void fatal PVPROTO ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n-static char *copystr PROTO ((char *));\n+static char *copystr PROTO ((const char *));\n static void mybzero ();\n void fancy_abort PROTO ((void)) ATTRIBUTE_NORETURN;\n \f\n@@ -187,7 +187,7 @@ gen_insn (insn)\n static void\n walk_rtx (x, path)\n      rtx x;\n-     char *path;\n+     const char *path;\n {\n   register RTX_CODE code;\n   register int i;\n@@ -369,17 +369,17 @@ xrealloc (ptr, size)\n }\n \n static void\n-fatal VPROTO ((char *format, ...))\n+fatal VPROTO ((const char *format, ...))\n {\n #ifndef ANSI_PROTOTYPES\n-  char *format;\n+  const char *format;\n #endif\n   va_list ap;\n \n   VA_START (ap, format);\n \n #ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, char *);\n+  format = va_arg (ap, const char *);\n #endif\n \n   fprintf (stderr, \"genextract: \");\n@@ -400,7 +400,7 @@ fancy_abort ()\n \n static char *\n copystr (s1)\n-     char *s1;\n+  const char *s1;\n {\n   register char *tem;\n "}, {"sha": "043cd30f8e9882843b0eebb96b8b0304a322dbcd", "filename": "gcc/genflags.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85fda1eb7d27264508c77b226271b63bf2146967/gcc%2Fgenflags.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85fda1eb7d27264508c77b226271b63bf2146967/gcc%2Fgenflags.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenflags.c?ref=85fda1eb7d27264508c77b226271b63bf2146967", "patch": "@@ -33,7 +33,7 @@ struct obstack *rtl_obstack = &obstack;\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-static void fatal PVPROTO ((char *, ...))\n+static void fatal PVPROTO ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n \n@@ -199,17 +199,17 @@ xrealloc (ptr, size)\n }\n \n static void\n-fatal VPROTO ((char *format, ...))\n+fatal VPROTO ((const char *format, ...))\n {\n #ifndef ANSI_PROTOTYPES\n-  char *format;\n+  const char *format;\n #endif\n   va_list ap;\n \n   VA_START (ap, format);\n \n #ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, char *);\n+  format = va_arg (ap, const char *);\n #endif\n \n   fprintf (stderr, \"genflags: \");"}, {"sha": "2b11c72549f2cce144007141e5c25dfcb0f8f6a6", "filename": "gcc/genopinit.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85fda1eb7d27264508c77b226271b63bf2146967/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85fda1eb7d27264508c77b226271b63bf2146967/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=85fda1eb7d27264508c77b226271b63bf2146967", "patch": "@@ -30,7 +30,7 @@ struct obstack *rtl_obstack = &obstack;\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-static void fatal PVPROTO ((char *, ...))\n+static void fatal PVPROTO ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n \n@@ -63,7 +63,7 @@ void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n /* The reason we use \\% is to avoid sequences of the form %-capletter-%\n    which SCCS treats as magic.  This gets warnings which you should ignore.  */\n \n-char *optabs[] =\n+const char *optabs[] =\n { \"extendtab[(int) %B][(int) %A][0] = CODE_FOR_%(extend%a\\%b2%)\",\n   \"extendtab[(int) %B][(int) %A][1] = CODE_FOR_%(zero_extend%a\\%b2%)\",\n   \"fixtab[(int) %A][(int) %B][0] = CODE_FOR_%(fix%F\\%a%I\\%b2%)\",\n@@ -134,7 +134,7 @@ gen_insn (insn)\n   int m1, m2, op;\n   size_t pindex;\n   int i;\n-  char *np, *pp, *p, *q;\n+  const char *np, *pp, *p, *q;\n \n   /* Don't mention instructions whose names are the null string.\n      They are in the machine description just to be recognized.  */\n@@ -304,17 +304,17 @@ xrealloc (ptr, size)\n }\n \n static void\n-fatal VPROTO ((char *format, ...))\n+fatal VPROTO ((const char *format, ...))\n {\n #ifndef ANSI_PROTOTYPES\n-  char *format;\n+  const char *format;\n #endif\n   va_list ap;\n \n   VA_START (ap, format);\n \n #ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, char *);\n+  format = va_arg (ap, const char *);\n #endif\n \n   fprintf (stderr, \"genopinit: \");"}, {"sha": "7aa97697ef1502f3ddee5aba5610588ac0fd4456", "filename": "gcc/genoutput.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85fda1eb7d27264508c77b226271b63bf2146967/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85fda1eb7d27264508c77b226271b63bf2146967/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=85fda1eb7d27264508c77b226271b63bf2146967", "patch": "@@ -107,10 +107,10 @@ struct obstack *rtl_obstack = &obstack;\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-static void fatal PVPROTO ((char *, ...))\n+static void fatal PVPROTO ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n-static void error PVPROTO ((char *, ...)) ATTRIBUTE_PRINTF_1;\n+static void error PVPROTO ((const char *, ...)) ATTRIBUTE_PRINTF_1;\n static void mybcopy ();\n static void mybzero ();\n static int n_occurrences PROTO((int, char *));\n@@ -415,7 +415,7 @@ static int max_opno;\n static int num_dups;\n static char *constraints[MAX_MAX_OPERANDS];\n static int op_n_alternatives[MAX_MAX_OPERANDS];\n-static char *predicates[MAX_MAX_OPERANDS];\n+static const char *predicates[MAX_MAX_OPERANDS];\n static char address_p[MAX_MAX_OPERANDS];\n static enum machine_mode modes[MAX_MAX_OPERANDS];\n static char strict_low[MAX_MAX_OPERANDS];\n@@ -922,17 +922,17 @@ mybcopy (b1, b2, length)\n }\n \n static void\n-fatal VPROTO ((char *format, ...))\n+fatal VPROTO ((const char *format, ...))\n {\n #ifndef ANSI_PROTOTYPES\n-  char *format;\n+  const char *format;\n #endif\n   va_list ap;\n \n   VA_START (ap, format);\n \n #ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, char *);\n+  format = va_arg (ap, const char *);\n #endif\n \n   fprintf (stderr, \"genoutput: \");\n@@ -952,17 +952,17 @@ fancy_abort ()\n }\n \n static void\n-error VPROTO ((char *format, ...))\n+error VPROTO ((const char *format, ...))\n {\n #ifndef ANSI_PROTOTYPES\n-  char *format;\n+  const char *format;\n #endif\n   va_list ap;\n \n   VA_START (ap, format);\n \n #ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, char *);\n+  format = va_arg (ap, const char *);\n #endif\n \n   fprintf (stderr, \"genoutput: \");"}, {"sha": "4330b48dd8d5c1ef3295338015b565989a697b7a", "filename": "gcc/genpeep.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85fda1eb7d27264508c77b226271b63bf2146967/gcc%2Fgenpeep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85fda1eb7d27264508c77b226271b63bf2146967/gcc%2Fgenpeep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpeep.c?ref=85fda1eb7d27264508c77b226271b63bf2146967", "patch": "@@ -46,7 +46,7 @@ struct link\n   int vecelt;\n };\n \n-static void fatal PVPROTO ((char *, ...))\n+static void fatal PVPROTO ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n \n@@ -407,17 +407,17 @@ xrealloc (ptr, size)\n }\n \n static void\n-fatal VPROTO ((char *format, ...))\n+fatal VPROTO ((const char *format, ...))\n {\n #ifndef ANSI_PROTOTYPES\n-  char *format;\n+  const char *format;\n #endif\n   va_list ap;\n \n   VA_START (ap, format);\n \n #ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, char *);\n+  format = va_arg (ap, const char *);\n #endif\n \n   fprintf (stderr, \"genpeep: \");"}, {"sha": "9fca92fba90aa15e3849874909eebaf21dc7aedf", "filename": "gcc/genrecog.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85fda1eb7d27264508c77b226271b63bf2146967/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85fda1eb7d27264508c77b226271b63bf2146967/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=85fda1eb7d27264508c77b226271b63bf2146967", "patch": "@@ -86,7 +86,7 @@ struct decision\n   int elt_one_int;\t\t/* Required value for XINT (rtl, 1) */\n   int test_elt_zero_wide;\t/* Nonzero if should test XWINT (rtl, 0) */\n   HOST_WIDE_INT elt_zero_wide;\t/* Required value for XWINT (rtl, 0) */\n-  char *tests;\t\t\t/* If nonzero predicate to call */\n+  const char *tests;\t\t/* If nonzero predicate to call */\n   int pred;\t\t\t/* `preds' index of predicate or -1 */\n   char *c_test;\t\t\t/* Additional test to perform */\n   struct decision_head success;\t/* Nodes to test on success */\n@@ -137,7 +137,7 @@ static int max_depth;\n \n static struct pred_table\n {\n-  char *name;\n+  const char *name;\n   RTX_CODE codes[NUM_RTX_CODE];\n } preds[]\n   = {{\"general_operand\", {CONST_INT, CONST_DOUBLE, CONST, SYMBOL_REF,\n@@ -167,7 +167,7 @@ static struct pred_table\n \n static struct decision_head make_insn_sequence PROTO((rtx, enum routine_type));\n static struct decision *add_to_sequence PROTO((rtx, struct decision_head *,\n-\t\t\t\t\t       char *));\n+\t\t\t\t\t       const char *));\n static int not_both_true\tPROTO((struct decision *, struct decision *,\n \t\t\t\t       int));\n static int position_merit\tPROTO((struct decision *, enum machine_mode,\n@@ -177,21 +177,21 @@ static struct decision_head merge_trees PROTO((struct decision_head,\n static int break_out_subroutines PROTO((struct decision_head,\n \t\t\t\t\tenum routine_type, int));\n static void write_subroutine\tPROTO((struct decision *, enum routine_type));\n-static void write_tree_1\tPROTO((struct decision *, char *,\n+static void write_tree_1\tPROTO((struct decision *, const char *,\n \t\t\t\t       struct decision *, enum routine_type));\n static void print_code\t\tPROTO((enum rtx_code));\n static int same_codes\t\tPROTO((struct decision *, enum rtx_code));\n static void clear_codes\t\tPROTO((struct decision *));\n static int same_modes\t\tPROTO((struct decision *, enum machine_mode));\n static void clear_modes\t\tPROTO((struct decision *));\n-static void write_tree\t\tPROTO((struct decision *, char *,\n+static void write_tree\t\tPROTO((struct decision *, const char *,\n \t\t\t\t       struct decision *, int,\n \t\t\t\t       enum routine_type));\n-static void change_state\tPROTO((char *, char *, int));\n-static char *copystr\t\tPROTO((char *));\n+static void change_state\tPROTO((const char *, const char *, int));\n+static char *copystr\t\tPROTO((const char *));\n static void mybzero\t\tPROTO((char *, unsigned));\n static void mybcopy\t\tPROTO((char *, char *, unsigned));\n-static void fatal\t\tPVPROTO((char *, ...))\n+static void fatal\t\tPVPROTO((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void fancy_abort\t\tPROTO((void)) ATTRIBUTE_NORETURN;\n \f\n@@ -291,7 +291,7 @@ static struct decision *\n add_to_sequence (pattern, last, position)\n      rtx pattern;\n      struct decision_head *last;\n-     char *position;\n+     const char *position;\n {\n   register RTX_CODE code;\n   register struct decision *new\n@@ -1031,7 +1031,7 @@ write_subroutine (tree, type)\n    conditions or switch statements.  We only support small indentations\n    and always indent at least two spaces.  */\n \n-static char *indents[]\n+static const char *indents[]\n   = {\"  \", \"  \", \"  \", \"   \", \"    \", \"     \", \"      \", \"       \",\n      \"\\t\", \"\\t \", \"\\t  \", \"\\t   \", \"\\t    \", \"\\t     \", \"\\t      \",\n      \"\\t\\t\", \"\\t\\t \", \"\\t\\t  \", \"\\t\\t   \", \"\\t\\t    \", \"\\t\\t     \"};\n@@ -1060,7 +1060,7 @@ static char *indents[]\n static void\n write_tree_1 (tree, prevpos, afterward, type)\n      struct decision *tree;\n-     char *prevpos;\n+     const char *prevpos;\n      struct decision *afterward;\n      enum routine_type type;\n {\n@@ -1552,14 +1552,14 @@ clear_modes (p)\n static void\n write_tree (tree, prevpos, afterward, initial, type)\n      struct decision *tree;\n-     char *prevpos;\n+     const char *prevpos;\n      struct decision *afterward;\n      int initial;\n      enum routine_type type;\n {\n   register struct decision *p;\n-  char *name_prefix = (type == SPLIT ? \"split\" : \"recog\");\n-  char *call_suffix = (type == SPLIT ? \"\" : \", pnum_clobbers\");\n+  const char *name_prefix = (type == SPLIT ? \"split\" : \"recog\");\n+  const char *call_suffix = (type == SPLIT ? \"\" : \", pnum_clobbers\");\n \n   if (! initial && tree->subroutine_number > 0)\n     {\n@@ -1598,8 +1598,8 @@ write_tree (tree, prevpos, afterward, initial, type)\n \n static void\n change_state (oldpos, newpos, indent)\n-     char *oldpos;\n-     char *newpos;\n+     const char *oldpos;\n+     const char *newpos;\n      int indent;\n {\n   int odepth = strlen (oldpos);\n@@ -1627,7 +1627,7 @@ change_state (oldpos, newpos, indent)\n \f\n static char *\n copystr (s1)\n-     char *s1;\n+  const char *s1;\n {\n   register char *tem;\n \n@@ -1681,17 +1681,17 @@ xmalloc (size)\n }\n \n static void\n-fatal VPROTO ((char *format, ...))\n+fatal VPROTO ((const char *format, ...))\n {\n #ifndef ANSI_PROTOTYPES\n-  char *format;\n+  const char *format;\n #endif\n   va_list ap;\n \n   VA_START (ap, format);\n \n #ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, char *);\n+  format = va_arg (ap, const char *);\n #endif\n \n   fprintf (stderr, \"genrecog: \");"}]}