{"sha": "398e3feb8a47aa00994903f0209c8f45c0b653c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk4ZTNmZWI4YTQ3YWEwMDk5NDkwM2YwMjA5YzhmNDVjMGI2NTNjMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-08-07T07:27:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-08-07T07:27:10Z"}, "message": "tree-core.h (enum omp_clause_code): Adjust OMP_CLAUSE_USE_DEVICE_PTR OpenMP description.\n\n\t* tree-core.h (enum omp_clause_code): Adjust OMP_CLAUSE_USE_DEVICE_PTR\n\tOpenMP description.  Add OMP_CLAUSE_USE_DEVICE_ADDR clause.\n\t* tree.c (omp_clause_num_ops, omp_clause_code_name): Add entries\n\tfor OMP_CLAUSE_USE_DEVICE_ADDR clause.\n\t(walk_tree_1): Handle OMP_CLAUSE_USE_DEVICE_ADDR.\n\t* tree-pretty-print.c (dump_omp_clause): Likewise.\n\t* tree-nested.c (convert_nonlocal_omp_clauses,\n\tconvert_local_omp_clauses): Likewise.\n\t* gimplify.c (gimplify_scan_omp_clauses, gimplify_adjust_omp_clauses):\n\tLikewise.\n\t* omp-low.c (scan_sharing_clauses, lower_omp_target): Likewise.\n\tTreat OMP_CLAUSE_USE_DEVICE_ADDR like OMP_CLAUSE_USE_DEVICE_PTR\n\tclause with array or reference to array types, no matter what type\n\texcept for reference it has.\ngcc/c-family/\n\t* c-pragma.h (enum pragma_omp_clause): Add\n\tPRAGMA_OMP_CLAUSE_USE_DEVICE_ADDR.  Set PRAGMA_OACC_CLAUSE_USE_DEVICE\n\tequal to PRAGMA_OMP_CLAUSE_USE_DEVICE_PTR instead of being a separate\n\tenumeration value.\ngcc/c/\n\t* c-parser.c (c_parser_omp_clause_name): Parse use_device_addr clause.\n\t(c_parser_omp_clause_use_device_addr): New function.\n\t(c_parser_omp_all_clauses): Handle PRAGMA_OMP_CLAUSE_USE_DEVICE_ADDR.\n\t(OMP_TARGET_DATA_CLAUSE_MASK): Add PRAGMA_OMP_CLAUSE_USE_DEVICE_ADDR.\n\t(c_parser_omp_target_data): Handle PRAGMA_OMP_CLAUSE_USE_DEVICE_ADDR\n\tlike PRAGMA_OMP_CLAUSE_USE_DEVICE_PTR, adjust diagnostics about no\n\tmap or use_device_* clauses.\n\t* c-typeck.c (c_finish_omp_clauses): For OMP_CLAUSE_USE_DEVICE_PTR\n\tin OpenMP, require pointer type rather than pointer or array type.\n\tHandle OMP_CLAUSE_USE_DEVICE_ADDR.\ngcc/cp/\n\t* parser.c (cp_parser_omp_clause_name): Parse use_device_addr clause.\n\t(cp_parser_omp_all_clauses): Handle PRAGMA_OMP_CLAUSE_USE_DEVICE_ADDR.\n\t(OMP_TARGET_DATA_CLAUSE_MASK): Add PRAGMA_OMP_CLAUSE_USE_DEVICE_ADDR.\n\t(cp_parser_omp_target_data): Handle PRAGMA_OMP_CLAUSE_USE_DEVICE_ADDR\n\tlike PRAGMA_OMP_CLAUSE_USE_DEVICE_PTR, adjust diagnostics about no\n\tmap or use_device_* clauses.\n\t* semantics.c (finish_omp_clauses): For OMP_CLAUSE_USE_DEVICE_PTR\n\tin OpenMP, require pointer or reference to pointer type rather than\n\tpointer or array or reference to pointer or array type. Handle\n\tOMP_CLAUSE_USE_DEVICE_ADDR.\n\t* pt.c (tsubst_omp_clauses): Handle OMP_CLAUSE_USE_DEVICE_ADDR.\ngcc/testsuite/\n\t* c-c++-common/gomp/target-data-1.c (foo): Use use_device_addr clause\n\tinstead of use_device_ptr clause where required by OpenMP 5.0, add\n\tfurther tests for both use_device_ptr and use_device_addr clauses.\nlibgomp/\n\t* testsuite/libgomp.c/target-18.c (struct S): New type.\n\t(foo): Use use_device_addr clause instead of use_device_ptr clause\n\twhere required by OpenMP 5.0, add further tests for both use_device_ptr\n\tand use_device_addr clauses.\n\t* testsuite/libgomp.c++/target-9.C (struct S): New type.\n\t(foo): Use use_device_addr clause instead of use_device_ptr clause\n\twhere required by OpenMP 5.0, add further tests for both use_device_ptr\n\tand use_device_addr clauses.  Add t and u arguments.\n\t(main): Adjust caller.\n\nFrom-SVN: r274159", "tree": {"sha": "7cdce7d00f3a64b05ee5331abee7a8a129530ce8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cdce7d00f3a64b05ee5331abee7a8a129530ce8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/398e3feb8a47aa00994903f0209c8f45c0b653c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/398e3feb8a47aa00994903f0209c8f45c0b653c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/398e3feb8a47aa00994903f0209c8f45c0b653c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/398e3feb8a47aa00994903f0209c8f45c0b653c3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4e708f5ebd82ce7e63d7f6ba43fde3b921c0fe53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e708f5ebd82ce7e63d7f6ba43fde3b921c0fe53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e708f5ebd82ce7e63d7f6ba43fde3b921c0fe53"}], "stats": {"total": 335, "additions": 290, "deletions": 45}, "files": [{"sha": "23837ab3a9a097e92ff10bc68cd6473cb2f2b4d7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=398e3feb8a47aa00994903f0209c8f45c0b653c3", "patch": "@@ -1,3 +1,20 @@\n+2019-08-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree-core.h (enum omp_clause_code): Adjust OMP_CLAUSE_USE_DEVICE_PTR\n+\tOpenMP description.  Add OMP_CLAUSE_USE_DEVICE_ADDR clause.\n+\t* tree.c (omp_clause_num_ops, omp_clause_code_name): Add entries\n+\tfor OMP_CLAUSE_USE_DEVICE_ADDR clause.\n+\t(walk_tree_1): Handle OMP_CLAUSE_USE_DEVICE_ADDR.\n+\t* tree-pretty-print.c (dump_omp_clause): Likewise.\n+\t* tree-nested.c (convert_nonlocal_omp_clauses,\n+\tconvert_local_omp_clauses): Likewise.\n+\t* gimplify.c (gimplify_scan_omp_clauses, gimplify_adjust_omp_clauses):\n+\tLikewise.\n+\t* omp-low.c (scan_sharing_clauses, lower_omp_target): Likewise.\n+\tTreat OMP_CLAUSE_USE_DEVICE_ADDR like OMP_CLAUSE_USE_DEVICE_PTR\n+\tclause with array or reference to array types, no matter what type\n+\texcept for reference it has.\n+\n 2019-08-07  Kewen Lin  <linkw@gcc.gnu.org>\n \n \t* config/rs6000/vector.md (vrotr<mode>3): New define_expand."}, {"sha": "873b9ad5b7a3a96926a375cac9b9f6c5b2add11e", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=398e3feb8a47aa00994903f0209c8f45c0b653c3", "patch": "@@ -1,3 +1,10 @@\n+2019-08-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-pragma.h (enum pragma_omp_clause): Add\n+\tPRAGMA_OMP_CLAUSE_USE_DEVICE_ADDR.  Set PRAGMA_OACC_CLAUSE_USE_DEVICE\n+\tequal to PRAGMA_OMP_CLAUSE_USE_DEVICE_PTR instead of being a separate\n+\tenumeration value.\n+\n 2019-08-05  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/91338 - Implement P1161R3: Deprecate a[b,c]."}, {"sha": "803dc1b2ac63040840a538bb8a69686cdb7665ea", "filename": "gcc/c-family/c-pragma.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Fc-family%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Fc-family%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.h?ref=398e3feb8a47aa00994903f0209c8f45c0b653c3", "patch": "@@ -137,6 +137,7 @@ enum pragma_omp_clause {\n   PRAGMA_OMP_CLAUSE_UNIFORM,\n   PRAGMA_OMP_CLAUSE_UNTIED,\n   PRAGMA_OMP_CLAUSE_USE_DEVICE_PTR,\n+  PRAGMA_OMP_CLAUSE_USE_DEVICE_ADDR,\n \n   /* Clauses for OpenACC.  */\n   PRAGMA_OACC_CLAUSE_ASYNC,\n@@ -157,7 +158,6 @@ enum pragma_omp_clause {\n   PRAGMA_OACC_CLAUSE_SELF,\n   PRAGMA_OACC_CLAUSE_SEQ,\n   PRAGMA_OACC_CLAUSE_TILE,\n-  PRAGMA_OACC_CLAUSE_USE_DEVICE,\n   PRAGMA_OACC_CLAUSE_VECTOR,\n   PRAGMA_OACC_CLAUSE_VECTOR_LENGTH,\n   PRAGMA_OACC_CLAUSE_WAIT,\n@@ -171,7 +171,8 @@ enum pragma_omp_clause {\n   PRAGMA_OACC_CLAUSE_IF = PRAGMA_OMP_CLAUSE_IF,\n   PRAGMA_OACC_CLAUSE_PRIVATE = PRAGMA_OMP_CLAUSE_PRIVATE,\n   PRAGMA_OACC_CLAUSE_REDUCTION = PRAGMA_OMP_CLAUSE_REDUCTION,\n-  PRAGMA_OACC_CLAUSE_LINK = PRAGMA_OMP_CLAUSE_LINK\n+  PRAGMA_OACC_CLAUSE_LINK = PRAGMA_OMP_CLAUSE_LINK,\n+  PRAGMA_OACC_CLAUSE_USE_DEVICE = PRAGMA_OMP_CLAUSE_USE_DEVICE_PTR\n };\n \n extern struct cpp_reader* parse_in;"}, {"sha": "18c1ce0b6df7d2b0e679461eb2619dea9b5d9475", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=398e3feb8a47aa00994903f0209c8f45c0b653c3", "patch": "@@ -1,3 +1,16 @@\n+2019-08-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.c (c_parser_omp_clause_name): Parse use_device_addr clause.\n+\t(c_parser_omp_clause_use_device_addr): New function.\n+\t(c_parser_omp_all_clauses): Handle PRAGMA_OMP_CLAUSE_USE_DEVICE_ADDR.\n+\t(OMP_TARGET_DATA_CLAUSE_MASK): Add PRAGMA_OMP_CLAUSE_USE_DEVICE_ADDR.\n+\t(c_parser_omp_target_data): Handle PRAGMA_OMP_CLAUSE_USE_DEVICE_ADDR\n+\tlike PRAGMA_OMP_CLAUSE_USE_DEVICE_PTR, adjust diagnostics about no\n+\tmap or use_device_* clauses.\n+\t* c-typeck.c (c_finish_omp_clauses): For OMP_CLAUSE_USE_DEVICE_PTR\n+\tin OpenMP, require pointer type rather than pointer or array type.\n+\tHandle OMP_CLAUSE_USE_DEVICE_ADDR.\n+\n 2019-07-31  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/91192"}, {"sha": "9b5cfcf50d949d1ecfb62db4076a43053ddb82e8", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=398e3feb8a47aa00994903f0209c8f45c0b653c3", "patch": "@@ -11866,6 +11866,8 @@ c_parser_omp_clause_name (c_parser *parser)\n \t    result = PRAGMA_OMP_CLAUSE_UNTIED;\n \t  else if (!strcmp (\"use_device\", p))\n \t    result = PRAGMA_OACC_CLAUSE_USE_DEVICE;\n+\t  else if (!strcmp (\"use_device_addr\", p))\n+\t    result = PRAGMA_OMP_CLAUSE_USE_DEVICE_ADDR;\n \t  else if (!strcmp (\"use_device_ptr\", p))\n \t    result = PRAGMA_OMP_CLAUSE_USE_DEVICE_PTR;\n \t  break;\n@@ -13121,6 +13123,16 @@ c_parser_omp_clause_use_device_ptr (c_parser *parser, tree list)\n \t\t\t\t       list);\n }\n \n+/* OpenMP 5.0:\n+   use_device_addr ( variable-list ) */\n+\n+static tree\n+c_parser_omp_clause_use_device_addr (c_parser *parser, tree list)\n+{\n+  return c_parser_omp_var_list_parens (parser, OMP_CLAUSE_USE_DEVICE_ADDR,\n+\t\t\t\t       list);\n+}\n+\n /* OpenMP 4.5:\n    is_device_ptr ( variable-list ) */\n \n@@ -15321,6 +15333,10 @@ c_parser_omp_all_clauses (c_parser *parser, omp_clause_mask mask,\n \t  clauses = c_parser_omp_clause_use_device_ptr (parser, clauses);\n \t  c_name = \"use_device_ptr\";\n \t  break;\n+\tcase PRAGMA_OMP_CLAUSE_USE_DEVICE_ADDR:\n+\t  clauses = c_parser_omp_clause_use_device_addr (parser, clauses);\n+\t  c_name = \"use_device_addr\";\n+\t  break;\n \tcase PRAGMA_OMP_CLAUSE_IS_DEVICE_PTR:\n \t  clauses = c_parser_omp_clause_is_device_ptr (parser, clauses);\n \t  c_name = \"is_device_ptr\";\n@@ -18288,7 +18304,8 @@ c_parser_omp_teams (location_t loc, c_parser *parser,\n \t( (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_DEVICE)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_MAP)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_IF)\t\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_USE_DEVICE_PTR))\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_USE_DEVICE_PTR) \\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_USE_DEVICE_ADDR))\n \n static tree\n c_parser_omp_target_data (location_t loc, c_parser *parser, bool *if_p)\n@@ -18323,7 +18340,8 @@ c_parser_omp_target_data (location_t loc, c_parser *parser, bool *if_p)\n \t    *pc = OMP_CLAUSE_CHAIN (*pc);\n \t    continue;\n \t  }\n-      else if (OMP_CLAUSE_CODE (*pc) == OMP_CLAUSE_USE_DEVICE_PTR)\n+      else if (OMP_CLAUSE_CODE (*pc) == OMP_CLAUSE_USE_DEVICE_PTR\n+\t       || OMP_CLAUSE_CODE (*pc) == OMP_CLAUSE_USE_DEVICE_ADDR)\n \tmap_seen = 3;\n       pc = &OMP_CLAUSE_CHAIN (*pc);\n     }\n@@ -18333,7 +18351,8 @@ c_parser_omp_target_data (location_t loc, c_parser *parser, bool *if_p)\n       if (map_seen == 0)\n \terror_at (loc,\n \t\t  \"%<#pragma omp target data%> must contain at least \"\n-\t\t  \"one %<map%> or %<use_device_ptr%> clause\");\n+\t\t  \"one %<map%>, %<use_device_ptr%> or %<use_device_addr%> \"\n+\t\t  \"clause\");\n       return NULL_TREE;\n     }\n "}, {"sha": "bda90fdd27350555ef9df6df3ee5a2d1110c82ea", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=398e3feb8a47aa00994903f0209c8f45c0b653c3", "patch": "@@ -14609,16 +14609,32 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \tcase OMP_CLAUSE_IS_DEVICE_PTR:\n \tcase OMP_CLAUSE_USE_DEVICE_PTR:\n \t  t = OMP_CLAUSE_DECL (c);\n-\t  if (TREE_CODE (TREE_TYPE (t)) != POINTER_TYPE\n-\t      && TREE_CODE (TREE_TYPE (t)) != ARRAY_TYPE)\n+\t  if (TREE_CODE (TREE_TYPE (t)) != POINTER_TYPE)\n \t    {\n-\t      error_at (OMP_CLAUSE_LOCATION (c),\n-\t\t\t\"%qs variable is neither a pointer nor an array\",\n-\t\t\tomp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n-\t      remove = true;\n+\t      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_USE_DEVICE_PTR\n+\t\t  && ort == C_ORT_OMP)\n+\t\t{\n+\t\t  error_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\t    \"%qs variable is not a pointer\",\n+\t\t\t    omp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n+\t\t  remove = true;\n+\t\t}\n+\t      else if (TREE_CODE (TREE_TYPE (t)) != ARRAY_TYPE)\n+\t\t{\n+\t\t  error_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\t    \"%qs variable is neither a pointer nor an array\",\n+\t\t\t    omp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n+\t\t  remove = true;\n+\t\t}\n \t    }\n \t  goto check_dup_generic;\n \n+\tcase OMP_CLAUSE_USE_DEVICE_ADDR:\n+\t  t = OMP_CLAUSE_DECL (c);\n+\t  if (VAR_P (t) || TREE_CODE (t) == PARM_DECL)\n+\t    c_mark_addressable (t);\n+\t  goto check_dup_generic;\n+\n \tcase OMP_CLAUSE_NOWAIT:\n \t  if (copyprivate_seen)\n \t    {"}, {"sha": "c1e977b6926318928582495faafbc12c25d1dafc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=398e3feb8a47aa00994903f0209c8f45c0b653c3", "patch": "@@ -1,3 +1,17 @@\n+2019-08-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.c (cp_parser_omp_clause_name): Parse use_device_addr clause.\n+\t(cp_parser_omp_all_clauses): Handle PRAGMA_OMP_CLAUSE_USE_DEVICE_ADDR.\n+\t(OMP_TARGET_DATA_CLAUSE_MASK): Add PRAGMA_OMP_CLAUSE_USE_DEVICE_ADDR.\n+\t(cp_parser_omp_target_data): Handle PRAGMA_OMP_CLAUSE_USE_DEVICE_ADDR\n+\tlike PRAGMA_OMP_CLAUSE_USE_DEVICE_PTR, adjust diagnostics about no\n+\tmap or use_device_* clauses.\n+\t* semantics.c (finish_omp_clauses): For OMP_CLAUSE_USE_DEVICE_PTR\n+\tin OpenMP, require pointer or reference to pointer type rather than\n+\tpointer or array or reference to pointer or array type. Handle\n+\tOMP_CLAUSE_USE_DEVICE_ADDR.\n+\t* pt.c (tsubst_omp_clauses): Handle OMP_CLAUSE_USE_DEVICE_ADDR.\n+\n 2019-08-06  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/91378 - ICE with noexcept and auto return type."}, {"sha": "4d07a6a301126426c4b0eb9ee32bd1b89055100a", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=398e3feb8a47aa00994903f0209c8f45c0b653c3", "patch": "@@ -32648,6 +32648,8 @@ cp_parser_omp_clause_name (cp_parser *parser)\n \t    result = PRAGMA_OMP_CLAUSE_UNTIED;\n \t  else if (!strcmp (\"use_device\", p))\n \t    result = PRAGMA_OACC_CLAUSE_USE_DEVICE;\n+\t  else if (!strcmp (\"use_device_addr\", p))\n+\t    result = PRAGMA_OMP_CLAUSE_USE_DEVICE_ADDR;\n \t  else if (!strcmp (\"use_device_ptr\", p))\n \t    result = PRAGMA_OMP_CLAUSE_USE_DEVICE_PTR;\n \t  break;\n@@ -35637,6 +35639,11 @@ cp_parser_omp_all_clauses (cp_parser *parser, omp_clause_mask mask,\n \t\t\t\t\t    clauses);\n \t  c_name = \"use_device_ptr\";\n \t  break;\n+\tcase PRAGMA_OMP_CLAUSE_USE_DEVICE_ADDR:\n+\t  clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE_USE_DEVICE_ADDR,\n+\t\t\t\t\t    clauses);\n+\t  c_name = \"use_device_addr\";\n+\t  break;\n \tcase PRAGMA_OMP_CLAUSE_IS_DEVICE_PTR:\n \t  clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE_IS_DEVICE_PTR,\n \t\t\t\t\t    clauses);\n@@ -38715,7 +38722,8 @@ cp_parser_omp_teams (cp_parser *parser, cp_token *pragma_tok,\n \t( (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_DEVICE)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_MAP)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_IF)\t\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_USE_DEVICE_PTR))\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_USE_DEVICE_PTR) \\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_USE_DEVICE_ADDR))\n \n static tree\n cp_parser_omp_target_data (cp_parser *parser, cp_token *pragma_tok, bool *if_p)\n@@ -38751,7 +38759,8 @@ cp_parser_omp_target_data (cp_parser *parser, cp_token *pragma_tok, bool *if_p)\n \t    *pc = OMP_CLAUSE_CHAIN (*pc);\n \t    continue;\n \t  }\n-      else if (OMP_CLAUSE_CODE (*pc) == OMP_CLAUSE_USE_DEVICE_PTR)\n+      else if (OMP_CLAUSE_CODE (*pc) == OMP_CLAUSE_USE_DEVICE_PTR\n+\t       || OMP_CLAUSE_CODE (*pc) == OMP_CLAUSE_USE_DEVICE_ADDR)\n \tmap_seen = 3;\n       pc = &OMP_CLAUSE_CHAIN (*pc);\n     }\n@@ -38761,7 +38770,8 @@ cp_parser_omp_target_data (cp_parser *parser, cp_token *pragma_tok, bool *if_p)\n       if (map_seen == 0)\n \terror_at (pragma_tok->location,\n \t\t  \"%<#pragma omp target data%> must contain at least \"\n-\t\t  \"one %<map%> or %<use_device_ptr%> clause\");\n+\t\t  \"one %<map%>, %<use_device_ptr%> or %<use_device_addr%> \"\n+\t\t  \"clause\");\n       return NULL_TREE;\n     }\n "}, {"sha": "b1ad99d148199670056a1ebe76da31b38b6d90dc", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=398e3feb8a47aa00994903f0209c8f45c0b653c3", "patch": "@@ -16303,6 +16303,7 @@ tsubst_omp_clauses (tree clauses, enum c_omp_region_type ort,\n \tcase OMP_CLAUSE_MAP:\n \tcase OMP_CLAUSE_NONTEMPORAL:\n \tcase OMP_CLAUSE_USE_DEVICE_PTR:\n+\tcase OMP_CLAUSE_USE_DEVICE_ADDR:\n \tcase OMP_CLAUSE_IS_DEVICE_PTR:\n \tcase OMP_CLAUSE_INCLUSIVE:\n \tcase OMP_CLAUSE_EXCLUSIVE:\n@@ -16427,6 +16428,7 @@ tsubst_omp_clauses (tree clauses, enum c_omp_region_type ort,\n \t  case OMP_CLAUSE_IN_REDUCTION:\n \t  case OMP_CLAUSE_TASK_REDUCTION:\n \t  case OMP_CLAUSE_USE_DEVICE_PTR:\n+\t  case OMP_CLAUSE_USE_DEVICE_ADDR:\n \t  case OMP_CLAUSE_IS_DEVICE_PTR:\n \t  case OMP_CLAUSE_INCLUSIVE:\n \t  case OMP_CLAUSE_EXCLUSIVE:"}, {"sha": "77e7a6dced2d0484f1438d23e7bf24f000ac71c8", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=398e3feb8a47aa00994903f0209c8f45c0b653c3", "patch": "@@ -7524,20 +7524,41 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t    {\n \t      tree type = TREE_TYPE (t);\n \t      if (!TYPE_PTR_P (type)\n-\t\t  && TREE_CODE (type) != ARRAY_TYPE\n-\t\t  && (!TYPE_REF_P (type)\n-\t\t      || (!TYPE_PTR_P (TREE_TYPE (type))\n-\t\t\t  && TREE_CODE (TREE_TYPE (type)) != ARRAY_TYPE)))\n+\t\t  && (!TYPE_REF_P (type) || !TYPE_PTR_P (TREE_TYPE (type))))\n \t\t{\n-\t\t  error_at (OMP_CLAUSE_LOCATION (c),\n-\t\t\t    \"%qs variable is neither a pointer, nor an array \"\n-\t\t\t    \"nor reference to pointer or array\",\n-\t\t\t    omp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n-\t\t  remove = true;\n+\t\t  if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_USE_DEVICE_PTR\n+\t\t      && ort == C_ORT_OMP)\n+\t\t    {\n+\t\t      error_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\t\t\"%qs variable is neither a pointer \"\n+\t\t\t\t\"nor reference to pointer\",\n+\t\t\t\tomp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n+\t\t      remove = true;\n+\t\t    }\n+\t\t  else if (TREE_CODE (type) != ARRAY_TYPE\n+\t\t\t   && (!TYPE_REF_P (type)\n+\t\t\t       || TREE_CODE (TREE_TYPE (type)) != ARRAY_TYPE))\n+\t\t    {\n+\t\t      error_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\t\t\"%qs variable is neither a pointer, nor an \"\n+\t\t\t\t\"array nor reference to pointer or array\",\n+\t\t\t\tomp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n+\t\t      remove = true;\n+\t\t    }\n \t\t}\n \t    }\n \t  goto check_dup_generic;\n \n+\tcase OMP_CLAUSE_USE_DEVICE_ADDR:\n+\t  field_ok = true;\n+\t  t = OMP_CLAUSE_DECL (c);\n+\t  if (!processing_template_decl\n+\t      && (VAR_P (t) || TREE_CODE (t) == PARM_DECL)\n+\t      && !TYPE_REF_P (TREE_TYPE (t))\n+\t      && !cxx_mark_addressable (t))\n+\t    remove = true;\n+\t  goto check_dup_generic;\n+\n \tcase OMP_CLAUSE_NOWAIT:\n \tcase OMP_CLAUSE_DEFAULT:\n \tcase OMP_CLAUSE_UNTIED:"}, {"sha": "978df86f72a608b6f3d8f32b4cb7092c08238018", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=398e3feb8a47aa00994903f0209c8f45c0b653c3", "patch": "@@ -9015,8 +9015,7 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t  goto do_notice;\n \n \tcase OMP_CLAUSE_USE_DEVICE_PTR:\n-\t  flags = GOVD_FIRSTPRIVATE | GOVD_EXPLICIT;\n-\t  goto do_add;\n+\tcase OMP_CLAUSE_USE_DEVICE_ADDR:\n \tcase OMP_CLAUSE_IS_DEVICE_PTR:\n \t  flags = GOVD_FIRSTPRIVATE | GOVD_EXPLICIT;\n \t  goto do_add;\n@@ -10264,6 +10263,7 @@ gimplify_adjust_omp_clauses (gimple_seq *pre_p, gimple_seq body, tree *list_p,\n \tcase OMP_CLAUSE_ORDER:\n \tcase OMP_CLAUSE_BIND:\n \tcase OMP_CLAUSE_USE_DEVICE_PTR:\n+\tcase OMP_CLAUSE_USE_DEVICE_ADDR:\n \tcase OMP_CLAUSE_IS_DEVICE_PTR:\n \tcase OMP_CLAUSE_ASYNC:\n \tcase OMP_CLAUSE_WAIT:"}, {"sha": "ca8edde6cdbc4a4a96600aeae2ac67bb3b5521bd", "filename": "gcc/omp-low.c", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=398e3feb8a47aa00994903f0209c8f45c0b653c3", "patch": "@@ -1238,8 +1238,11 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \t  break;\n \n \tcase OMP_CLAUSE_USE_DEVICE_PTR:\n+\tcase OMP_CLAUSE_USE_DEVICE_ADDR:\n \t  decl = OMP_CLAUSE_DECL (c);\n-\t  if (TREE_CODE (TREE_TYPE (decl)) == ARRAY_TYPE)\n+\t  if ((OMP_CLAUSE_CODE (c) == OMP_CLAUSE_USE_DEVICE_ADDR\n+\t       && !omp_is_reference (decl))\n+\t      || TREE_CODE (TREE_TYPE (decl)) == ARRAY_TYPE)\n \t    install_var_field (decl, true, 3, ctx);\n \t  else\n \t    install_var_field (decl, false, 3, ctx);\n@@ -1635,6 +1638,7 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \tcase OMP_CLAUSE_ORDER:\n \tcase OMP_CLAUSE_BIND:\n \tcase OMP_CLAUSE_USE_DEVICE_PTR:\n+\tcase OMP_CLAUSE_USE_DEVICE_ADDR:\n \tcase OMP_CLAUSE_NONTEMPORAL:\n \tcase OMP_CLAUSE_ASYNC:\n \tcase OMP_CLAUSE_WAIT:\n@@ -11465,6 +11469,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \tbreak;\n \n       case OMP_CLAUSE_USE_DEVICE_PTR:\n+      case OMP_CLAUSE_USE_DEVICE_ADDR:\n       case OMP_CLAUSE_IS_DEVICE_PTR:\n \tvar = OMP_CLAUSE_DECL (c);\n \tmap_cnt++;\n@@ -11481,7 +11486,9 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t    SET_DECL_VALUE_EXPR (new_var, x);\n \t    DECL_HAS_VALUE_EXPR_P (new_var) = 1;\n \t  }\n-\telse if (TREE_CODE (TREE_TYPE (var)) == ARRAY_TYPE)\n+\telse if ((OMP_CLAUSE_CODE (c) == OMP_CLAUSE_USE_DEVICE_ADDR\n+\t\t  && !omp_is_reference (var))\n+\t\t || TREE_CODE (TREE_TYPE (var)) == ARRAY_TYPE)\n \t  {\n \t    tree new_var = lookup_decl (var, ctx);\n \t    tree type = build_pointer_type (TREE_TYPE (var));\n@@ -11846,23 +11853,27 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t    break;\n \n \t  case OMP_CLAUSE_USE_DEVICE_PTR:\n+\t  case OMP_CLAUSE_USE_DEVICE_ADDR:\n \t  case OMP_CLAUSE_IS_DEVICE_PTR:\n \t    ovar = OMP_CLAUSE_DECL (c);\n \t    var = lookup_decl_in_outer_ctx (ovar, ctx);\n \t    x = build_sender_ref (ovar, ctx);\n-\t    if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_USE_DEVICE_PTR)\n+\t    if (OMP_CLAUSE_CODE (c) != OMP_CLAUSE_IS_DEVICE_PTR)\n \t      tkind = GOMP_MAP_USE_DEVICE_PTR;\n \t    else\n \t      tkind = GOMP_MAP_FIRSTPRIVATE_INT;\n \t    type = TREE_TYPE (ovar);\n-\t    if (TREE_CODE (type) == ARRAY_TYPE)\n+\t    if ((OMP_CLAUSE_CODE (c) == OMP_CLAUSE_USE_DEVICE_ADDR\n+\t\t && !omp_is_reference (ovar))\n+\t\t|| TREE_CODE (type) == ARRAY_TYPE)\n \t      var = build_fold_addr_expr (var);\n \t    else\n \t      {\n \t\tif (omp_is_reference (ovar))\n \t\t  {\n \t\t    type = TREE_TYPE (type);\n-\t\t    if (TREE_CODE (type) != ARRAY_TYPE)\n+\t\t    if (TREE_CODE (type) != ARRAY_TYPE\n+\t\t\t&& OMP_CLAUSE_CODE (c) != OMP_CLAUSE_USE_DEVICE_ADDR)\n \t\t      var = build_simple_mem_ref (var);\n \t\t    var = fold_convert (TREE_TYPE (x), var);\n \t\t  }\n@@ -12017,9 +12028,10 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t      }\n \t    break;\n \t  case OMP_CLAUSE_USE_DEVICE_PTR:\n+\t  case OMP_CLAUSE_USE_DEVICE_ADDR:\n \t  case OMP_CLAUSE_IS_DEVICE_PTR:\n \t    var = OMP_CLAUSE_DECL (c);\n-\t    if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_USE_DEVICE_PTR)\n+\t    if (OMP_CLAUSE_CODE (c) != OMP_CLAUSE_IS_DEVICE_PTR)\n \t      x = build_sender_ref (var, ctx);\n \t    else\n \t      x = build_receiver_ref (var, false, ctx);\n@@ -12034,7 +12046,9 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t\tgimple_seq_add_stmt (&new_body,\n \t\t\t\t     gimple_build_assign (new_var, x));\n \t      }\n-\t    else if (TREE_CODE (TREE_TYPE (var)) == ARRAY_TYPE)\n+\t    else if ((OMP_CLAUSE_CODE (c) == OMP_CLAUSE_USE_DEVICE_ADDR\n+\t\t      && !omp_is_reference (var))\n+\t\t     || TREE_CODE (TREE_TYPE (var)) == ARRAY_TYPE)\n \t      {\n \t\ttree new_var = lookup_decl (var, ctx);\n \t\tnew_var = DECL_VALUE_EXPR (new_var);\n@@ -12052,7 +12066,8 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t\tif (omp_is_reference (var))\n \t\t  {\n \t\t    type = TREE_TYPE (type);\n-\t\t    if (TREE_CODE (type) != ARRAY_TYPE)\n+\t\t    if (TREE_CODE (type) != ARRAY_TYPE\n+\t\t\t&& OMP_CLAUSE_CODE (c) != OMP_CLAUSE_USE_DEVICE_ADDR)\n \t\t      {\n \t\t\ttree v = create_tmp_var_raw (type, get_name (var));\n \t\t\tgimple_add_tmp_var (v);"}, {"sha": "d524f72b4d299e0ec57d35f80df6a29dcb297f31", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=398e3feb8a47aa00994903f0209c8f45c0b653c3", "patch": "@@ -1,3 +1,9 @@\n+2019-08-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/target-data-1.c (foo): Use use_device_addr clause\n+\tinstead of use_device_ptr clause where required by OpenMP 5.0, add\n+\tfurther tests for both use_device_ptr and use_device_addr clauses.\n+\n 2019-08-07  Kewen Lin  <linkw@gcc.gnu.org>\n \n \t* gcc.target/powerpc/vec_rotate-1.c: New test."}, {"sha": "7aa111a92a46c9046942906ecdfd83a5e3fc460b", "filename": "gcc/testsuite/c-c++-common/gomp/target-data-1.c", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Ftarget-data-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Ftarget-data-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Ftarget-data-1.c?ref=398e3feb8a47aa00994903f0209c8f45c0b653c3", "patch": "@@ -4,15 +4,39 @@ void\n foo (void)\n {\n   int a[4] = { 1, 2, 3, 4 };\n+  int *p = &a[0];\n+  int x = 5;\n+  #pragma omp target data map(to:p[:4])\n+  #pragma omp target data use_device_ptr(p)\n+  #pragma omp target is_device_ptr(p)\n+  {\n+    p[0]++;\n+  }\n   #pragma omp target data map(to:a)\n-  #pragma omp target data use_device_ptr(a)\n+  #pragma omp target data use_device_addr(a)\n   #pragma omp target is_device_ptr(a)\n   {\n-    a[0]++;\n+    p[0]++;\n+  }\n+  #pragma omp target data map(to:x)\n+  #pragma omp target data use_device_addr(x)\n+  {\n+    int *q = &x;\n+    #pragma omp target is_device_ptr(q)\n+    {\n+      q[0]++;\n+    }\n   }\n   #pragma omp target data\t\t/* { dg-error \"must contain at least one\" } */\n   a[0]++;\n+  #pragma omp target data map(to:p)\n+  #pragma omp target data use_device_ptr(p) use_device_ptr(p) /* { dg-error \"appears more than once in data clauses\" } */\n+  a[0]++;\n   #pragma omp target data map(to:a)\n-  #pragma omp target data use_device_ptr(a) use_device_ptr(a) /* { dg-error \"appears more than once in data clauses\" } */\n+  #pragma omp target data use_device_addr(a) use_device_addr(a) /* { dg-error \"appears more than once in data clauses\" } */\n   a[0]++;\n+  #pragma omp target data map(to:a)\n+  #pragma omp target data use_device_ptr(a)\t/* { dg-error \"'use_device_ptr' variable is not a pointer\" \"\" { target c } } */\n+\t\t\t\t\t\t/* { dg-error \"'use_device_ptr' variable is neither a pointer nor reference to pointer\" \"\" { target c++ } .-1 } */\n+  a[0]++;\t\t\t\t\t/* { dg-error \"must contain at least one\" \"\" { target *-*-* } .-2 } */\n }"}, {"sha": "8216a60671803207a8ab2a663251afe419103922", "filename": "gcc/tree-core.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=398e3feb8a47aa00994903f0209c8f45c0b653c3", "patch": "@@ -307,9 +307,12 @@ enum omp_clause_code {\n   OMP_CLAUSE_MAP,\n \n   /* OpenACC clause: use_device (variable-list).\n-     OpenMP clause: use_device_ptr (variable-list).  */\n+     OpenMP clause: use_device_ptr (ptr-list).  */\n   OMP_CLAUSE_USE_DEVICE_PTR,\n \n+  /* OpenMP clause: use_device_addr (variable-list).  */\n+  OMP_CLAUSE_USE_DEVICE_ADDR,\n+\n   /* OpenMP clause: is_device_ptr (variable-list).  */\n   OMP_CLAUSE_IS_DEVICE_PTR,\n "}, {"sha": "4df07edcf0a8bb31c33d71f7442aa1e343a14727", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=398e3feb8a47aa00994903f0209c8f45c0b653c3", "patch": "@@ -1227,6 +1227,7 @@ convert_nonlocal_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n \tcase OMP_CLAUSE_TO_DECLARE:\n \tcase OMP_CLAUSE_LINK:\n \tcase OMP_CLAUSE_USE_DEVICE_PTR:\n+\tcase OMP_CLAUSE_USE_DEVICE_ADDR:\n \tcase OMP_CLAUSE_IS_DEVICE_PTR:\n \tdo_decl_clause:\n \t  decl = OMP_CLAUSE_DECL (clause);\n@@ -1947,6 +1948,7 @@ convert_local_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n \tcase OMP_CLAUSE_TO_DECLARE:\n \tcase OMP_CLAUSE_LINK:\n \tcase OMP_CLAUSE_USE_DEVICE_PTR:\n+\tcase OMP_CLAUSE_USE_DEVICE_ADDR:\n \tcase OMP_CLAUSE_IS_DEVICE_PTR:\n \tdo_decl_clause:\n \t  decl = OMP_CLAUSE_DECL (clause);"}, {"sha": "8091a0af7f34baa678b96f8c3a6197e2278ad42d", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=398e3feb8a47aa00994903f0209c8f45c0b653c3", "patch": "@@ -465,6 +465,9 @@ dump_omp_clause (pretty_printer *pp, tree clause, int spc, dump_flags_t flags)\n     case OMP_CLAUSE_USE_DEVICE_PTR:\n       name = \"use_device_ptr\";\n       goto print_remap;\n+    case OMP_CLAUSE_USE_DEVICE_ADDR:\n+      name = \"use_device_addr\";\n+      goto print_remap;\n     case OMP_CLAUSE_IS_DEVICE_PTR:\n       name = \"is_device_ptr\";\n       goto print_remap;"}, {"sha": "1f2aac4ffa554ac9c1d3f42bc02e4b928360e654", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398e3feb8a47aa00994903f0209c8f45c0b653c3/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=398e3feb8a47aa00994903f0209c8f45c0b653c3", "patch": "@@ -299,6 +299,7 @@ unsigned const char omp_clause_num_ops[] =\n   2, /* OMP_CLAUSE_TO  */\n   2, /* OMP_CLAUSE_MAP  */\n   1, /* OMP_CLAUSE_USE_DEVICE_PTR  */\n+  1, /* OMP_CLAUSE_USE_DEVICE_ADDR  */\n   1, /* OMP_CLAUSE_IS_DEVICE_PTR  */\n   1, /* OMP_CLAUSE_INCLUSIVE  */\n   1, /* OMP_CLAUSE_EXCLUSIVE  */\n@@ -382,6 +383,7 @@ const char * const omp_clause_code_name[] =\n   \"to\",\n   \"map\",\n   \"use_device_ptr\",\n+  \"use_device_addr\",\n   \"is_device_ptr\",\n   \"inclusive\",\n   \"exclusive\",\n@@ -12384,6 +12386,7 @@ walk_tree_1 (tree *tp, walk_tree_fn func, void *data,\n \tcase OMP_CLAUSE_TO_DECLARE:\n \tcase OMP_CLAUSE_LINK:\n \tcase OMP_CLAUSE_USE_DEVICE_PTR:\n+\tcase OMP_CLAUSE_USE_DEVICE_ADDR:\n \tcase OMP_CLAUSE_IS_DEVICE_PTR:\n \tcase OMP_CLAUSE_INCLUSIVE:\n \tcase OMP_CLAUSE_EXCLUSIVE:"}, {"sha": "01440f7a2521543cbe8b3e6ed7e68e189eb31963", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398e3feb8a47aa00994903f0209c8f45c0b653c3/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398e3feb8a47aa00994903f0209c8f45c0b653c3/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=398e3feb8a47aa00994903f0209c8f45c0b653c3", "patch": "@@ -1,3 +1,15 @@\n+2019-08-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/libgomp.c/target-18.c (struct S): New type.\n+\t(foo): Use use_device_addr clause instead of use_device_ptr clause\n+\twhere required by OpenMP 5.0, add further tests for both use_device_ptr\n+\tand use_device_addr clauses.\n+\t* testsuite/libgomp.c++/target-9.C (struct S): New type.\n+\t(foo): Use use_device_addr clause instead of use_device_ptr clause\n+\twhere required by OpenMP 5.0, add further tests for both use_device_ptr\n+\tand use_device_addr clauses.  Add t and u arguments.\n+\t(main): Adjust caller.\n+\n 2019-08-06  Jakub Jelinek  <jakub@redhat.com>\n \n \t* testsuite/libgomp.c++/loop-13.C: New test."}, {"sha": "83a61cf599b45933ffb95062223fe08136ab98c3", "filename": "libgomp/testsuite/libgomp.c++/target-9.C", "status": "modified", "additions": 38, "deletions": 5, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398e3feb8a47aa00994903f0209c8f45c0b653c3/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ftarget-9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398e3feb8a47aa00994903f0209c8f45c0b653c3/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ftarget-9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ftarget-9.C?ref=398e3feb8a47aa00994903f0209c8f45c0b653c3", "patch": "@@ -1,10 +1,13 @@\n extern \"C\" void abort (void);\n+struct S { int e, f; };\n \n void\n-foo (int *&p, int (&s)[5], int n)\n+foo (int *&p, int (&s)[5], int &t, S &u, int n)\n {\n   int a[4] = { 7, 8, 9, 10 }, b[n], c[3] = { 20, 21, 22 };\n   int *r = a + 1, *q = p - 1, i, err;\n+  int v = 27;\n+  S w = { 28, 29 };\n   for (i = 0; i < n; i++)\n     b[i] = 9 + i;\n   #pragma omp target data map(to:a)\n@@ -30,7 +33,7 @@ foo (int *&p, int (&s)[5], int n)\n   if (err)\n     abort ();\n   #pragma omp target data map(to:b)\n-  #pragma omp target data use_device_ptr(b) map(from:err)\n+  #pragma omp target data use_device_addr(b) map(from:err)\n   #pragma omp target is_device_ptr(b) private(i) map(from:err)\n   {\n     err = 0;\n@@ -41,7 +44,7 @@ foo (int *&p, int (&s)[5], int n)\n   if (err)\n     abort ();\n   #pragma omp target data map(to:c)\n-  #pragma omp target data use_device_ptr(c) map(from:err)\n+  #pragma omp target data use_device_addr(c) map(from:err)\n   #pragma omp target is_device_ptr(c) private(i) map(from:err)\n   {\n     err = 0;\n@@ -52,7 +55,7 @@ foo (int *&p, int (&s)[5], int n)\n   if (err)\n     abort ();\n   #pragma omp target data map(to:s[:5])\n-  #pragma omp target data use_device_ptr(s) map(from:err)\n+  #pragma omp target data use_device_addr(s) map(from:err)\n   #pragma omp target is_device_ptr(s) private(i) map(from:err)\n   {\n     err = 0;\n@@ -62,12 +65,42 @@ foo (int *&p, int (&s)[5], int n)\n   }\n   if (err)\n     abort ();\n+  #pragma omp target data map(to: v) map(to:u)\n+  #pragma omp target data use_device_addr (v) use_device_addr (u) map(from:err)\n+  {\n+    int *z = &v;\n+    S *x = &u;\n+    #pragma omp target is_device_ptr (z, x) map(from:err)\n+    {\n+      err = 0;\n+      if (*z != 27 || x->e != 25 || x->f != 26)\n+\terr = 1;\n+    }\n+  }\n+  if (err)\n+    abort ();\n+  #pragma omp target data map(to: t, w)\n+  #pragma omp target data use_device_addr (t, w) map(from:err)\n+  {\n+    int *z = &t;\n+    S *x = &w;\n+    #pragma omp target is_device_ptr (z) is_device_ptr (x) map(from:err)\n+    {\n+      err = 0;\n+      if (*z != 24 || x->e != 28 || x->f != 29)\n+\terr = 1;\n+    }\n+  }\n+  if (err)\n+    abort ();\n }\n \n int\n main ()\n {\n   int a[4] = { 0, 1, 2, 3 }, b[5] = { 17, 18, 19, 20, 21 };\n   int *p = a + 1;\n-  foo (p, b, 9);\n+  int t = 24;\n+  S u = { 25, 26 };\n+  foo (p, b, t, u, 9);\n }"}, {"sha": "dd511fb98cb8fee00e77351797aed57e9bd8354a", "filename": "libgomp/testsuite/libgomp.c/target-18.c", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398e3feb8a47aa00994903f0209c8f45c0b653c3/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398e3feb8a47aa00994903f0209c8f45c0b653c3/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-18.c?ref=398e3feb8a47aa00994903f0209c8f45c0b653c3", "patch": "@@ -1,9 +1,11 @@\n extern void abort (void);\n+struct S { int e, f; };\n \n void\n foo (int n)\n {\n-  int a[4] = { 0, 1, 2, 3 }, b[n];\n+  int a[4] = { 0, 1, 2, 3 }, b[n], c = 4;\n+  struct S d = { 5, 6 };\n   int *p = a + 1, i, err;\n   for (i = 0; i < n; i++)\n     b[i] = 9 + i;\n@@ -21,7 +23,7 @@ foo (int n)\n   for (i = 0; i < 4; i++)\n     a[i] = 23 + i;\n   #pragma omp target data map(to:a)\n-  #pragma omp target data use_device_ptr(a) map(from:err)\n+  #pragma omp target data use_device_addr(a) map(from:err)\n   #pragma omp target is_device_ptr(a) private(i) map(from:err)\n   {\n     err = 0;\n@@ -32,7 +34,7 @@ foo (int n)\n   if (err)\n     abort ();\n   #pragma omp target data map(to:b)\n-  #pragma omp target data use_device_ptr(b) map(from:err)\n+  #pragma omp target data use_device_addr(b) map(from:err)\n   #pragma omp target is_device_ptr(b) private(i) map(from:err)\n   {\n     err = 0;\n@@ -42,6 +44,28 @@ foo (int n)\n   }\n   if (err)\n     abort ();\n+  #pragma omp target data map(to:c)\n+  #pragma omp target data use_device_addr(c) map(from:err)\n+  {\n+    int *q = &c;\n+    #pragma omp target is_device_ptr(q) map(from:err)\n+    {\n+      err = *q != 4;\n+    }\n+  }\n+  if (err)\n+    abort ();\n+  #pragma omp target data map(to:d)\n+  #pragma omp target data use_device_addr(d) map(from:err)\n+  {\n+    struct S *r = &d;\n+    #pragma omp target is_device_ptr(r) map(from:err)\n+    {\n+      err = r->e != 5 || r->f != 6;\n+    }\n+  }\n+  if (err)\n+    abort ();\n }\n \n int"}]}