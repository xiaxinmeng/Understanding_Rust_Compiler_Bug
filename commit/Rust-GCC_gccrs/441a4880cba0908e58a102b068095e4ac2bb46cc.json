{"sha": "441a4880cba0908e58a102b068095e4ac2bb46cc", "node_id": "C_kwDOANBUbNoAKDQ0MWE0ODgwY2JhMDkwOGU1OGExMDJiMDY4MDk1ZTRhYzJiYjQ2Y2M", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-09-13T13:48:04Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-09-13T13:48:04Z"}, "message": "c++: some missing-SFINAE fixes\n\nIt looks like we aren't respecting SFINAE for:\n\n  * an invalid/non-constant conditional explicit-specifier\n  * a non-constant conditional noexcept-specifier\n  * a non-constant argument to __integer_pack\n\nThis patch fixes these in the usual way, by passing complain and\npropagating error_mark_node appropriately.\n\ngcc/cp/ChangeLog:\n\n\t* decl.cc (build_explicit_specifier): Pass complain to\n\tcxx_constant_value.\n\t* except.cc (build_noexcept_spec): Likewise.\n\t* pt.cc (expand_integer_pack): Likewise.\n\t(tsubst_function_decl): Propagate error_mark_node returned\n\tfrom build_explicit_specifier.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1z/noexcept-type26.C: New test.\n\t* g++.dg/cpp2a/explicit19.C: New test.\n\t* g++.dg/ext/integer-pack6.C: New test.", "tree": {"sha": "fc379ce94a32967f51eb7b99bec5ffb709c443f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc379ce94a32967f51eb7b99bec5ffb709c443f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/441a4880cba0908e58a102b068095e4ac2bb46cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/441a4880cba0908e58a102b068095e4ac2bb46cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/441a4880cba0908e58a102b068095e4ac2bb46cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/441a4880cba0908e58a102b068095e4ac2bb46cc/comments", "author": null, "committer": null, "parents": [{"sha": "48e40d0b658c0b7989dfbe67468430b532bcbbe9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48e40d0b658c0b7989dfbe67468430b532bcbbe9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48e40d0b658c0b7989dfbe67468430b532bcbbe9"}], "stats": {"total": 45, "additions": 42, "deletions": 3}, "files": [{"sha": "5404d7e084cc3f83dbdb1a1b13246d503a7cac70", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/441a4880cba0908e58a102b068095e4ac2bb46cc/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/441a4880cba0908e58a102b068095e4ac2bb46cc/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=441a4880cba0908e58a102b068095e4ac2bb46cc", "patch": "@@ -18557,7 +18557,7 @@ build_explicit_specifier (tree expr, tsubst_flags_t complain)\n \n   expr = build_converted_constant_bool_expr (expr, complain);\n   expr = instantiate_non_dependent_expr (expr, complain);\n-  expr = cxx_constant_value (expr);\n+  expr = cxx_constant_value (expr, NULL_TREE, complain);\n   return expr;\n }\n "}, {"sha": "4d7f0ce102da03603be88c5afd638fb346297022", "filename": "gcc/cp/except.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/441a4880cba0908e58a102b068095e4ac2bb46cc/gcc%2Fcp%2Fexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/441a4880cba0908e58a102b068095e4ac2bb46cc/gcc%2Fcp%2Fexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.cc?ref=441a4880cba0908e58a102b068095e4ac2bb46cc", "patch": "@@ -1257,7 +1257,7 @@ build_noexcept_spec (tree expr, tsubst_flags_t complain)\n     {\n       expr = build_converted_constant_bool_expr (expr, complain);\n       expr = instantiate_non_dependent_expr (expr, complain);\n-      expr = cxx_constant_value (expr);\n+      expr = cxx_constant_value (expr, NULL_TREE, complain);\n     }\n   if (TREE_CODE (expr) == INTEGER_CST)\n     {"}, {"sha": "074179288b6079c1bd3eae20b47e108cb1e5da6a", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/441a4880cba0908e58a102b068095e4ac2bb46cc/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/441a4880cba0908e58a102b068095e4ac2bb46cc/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=441a4880cba0908e58a102b068095e4ac2bb46cc", "patch": "@@ -3869,7 +3869,7 @@ expand_integer_pack (tree call, tree args, tsubst_flags_t complain,\n   else\n     {\n       hi = instantiate_non_dependent_expr (hi, complain);\n-      hi = cxx_constant_value (hi);\n+      hi = cxx_constant_value (hi, NULL_TREE, complain);\n       int len = valid_constant_size_p (hi) ? tree_to_shwi (hi) : -1;\n \n       /* Calculate the largest value of len that won't make the size of the vec\n@@ -14312,6 +14312,8 @@ tsubst_function_decl (tree t, tree args, tsubst_flags_t complain,\n \t\t\t\t    /*function_p=*/false,\n \t\t\t\t    /*i_c_e_p=*/true);\n       spec = build_explicit_specifier (spec, complain);\n+      if (spec == error_mark_node)\n+\treturn error_mark_node;\n       if (instantiation_dependent_expression_p (spec))\n \tstore_explicit_specifier (r, spec);\n       else"}, {"sha": "491df4d58b771173b6357dd031d2be81269c28bb", "filename": "gcc/testsuite/g++.dg/cpp1z/noexcept-type26.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/441a4880cba0908e58a102b068095e4ac2bb46cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnoexcept-type26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/441a4880cba0908e58a102b068095e4ac2bb46cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnoexcept-type26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnoexcept-type26.C?ref=441a4880cba0908e58a102b068095e4ac2bb46cc", "patch": "@@ -0,0 +1,12 @@\n+// Verify a non-constant conditional noexcept-specifier in a function type\n+// respects SFINAE.\n+// { dg-do compile { target c++17 } }\n+\n+template<class T> void f(void() noexcept(T::value)) = delete;\n+template<class T> void f(...);\n+\n+struct B { static bool value; };\n+\n+int main() {\n+  f<B>(nullptr);\n+}"}, {"sha": "47903813680afd2f836e7b1bf9384a157b0f585d", "filename": "gcc/testsuite/g++.dg/cpp2a/explicit19.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/441a4880cba0908e58a102b068095e4ac2bb46cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fexplicit19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/441a4880cba0908e58a102b068095e4ac2bb46cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fexplicit19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fexplicit19.C?ref=441a4880cba0908e58a102b068095e4ac2bb46cc", "patch": "@@ -0,0 +1,12 @@\n+// Verify a conditional explicit-specifier is a SFINAE context.\n+// { dg-do compile { target c++20 } }\n+\n+struct A {\n+  template<class T> explicit(T::value) A(T) = delete;\n+  A(...);\n+};\n+\n+struct B { static bool value; };\n+\n+A x(0);\n+A y(B{});"}, {"sha": "dc43116128bae24afca499955b77b110cb41629a", "filename": "gcc/testsuite/g++.dg/ext/integer-pack6.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/441a4880cba0908e58a102b068095e4ac2bb46cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finteger-pack6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/441a4880cba0908e58a102b068095e4ac2bb46cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finteger-pack6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finteger-pack6.C?ref=441a4880cba0908e58a102b068095e4ac2bb46cc", "patch": "@@ -0,0 +1,13 @@\n+// Verify a non-constant argument to __integer_pack respects SFINAE.\n+// { dg-do compile { target c++11 } }\n+\n+template<int...> struct A { };\n+\n+template<class T> auto f(int) -> A<__integer_pack(T::value)...> = delete;\n+template<class T> void f(...);\n+\n+struct B { static int value; };\n+\n+int main() {\n+  f<B>(0);\n+}"}]}