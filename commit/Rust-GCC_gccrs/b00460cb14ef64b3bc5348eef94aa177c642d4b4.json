{"sha": "b00460cb14ef64b3bc5348eef94aa177c642d4b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAwNDYwY2IxNGVmNjRiM2JjNTM0OGVlZjk0YWExNzdjNjQyZDRiNA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2019-11-05T16:37:28Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2019-11-05T16:37:28Z"}, "message": "Fix indentation inconsistencies introduced by previous patch.\n\nFrom-SVN: r277852", "tree": {"sha": "9d7ebcff3a765be1e4b8f987ce4d77ed3fb596a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d7ebcff3a765be1e4b8f987ce4d77ed3fb596a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b00460cb14ef64b3bc5348eef94aa177c642d4b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b00460cb14ef64b3bc5348eef94aa177c642d4b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b00460cb14ef64b3bc5348eef94aa177c642d4b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b00460cb14ef64b3bc5348eef94aa177c642d4b4/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "361d4a9eb6b397f3401b7693ee9fbc032e95a0f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/361d4a9eb6b397f3401b7693ee9fbc032e95a0f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/361d4a9eb6b397f3401b7693ee9fbc032e95a0f0"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "436939fd990098d7a5ba81a5138013dcc4048579", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b00460cb14ef64b3bc5348eef94aa177c642d4b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b00460cb14ef64b3bc5348eef94aa177c642d4b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b00460cb14ef64b3bc5348eef94aa177c642d4b4", "patch": "@@ -1,3 +1,12 @@\n+2019-11-05  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-vrp.c (value_range::value_range): Fix whitespace.\n+\t(defined_ranges_p): Same.\n+\t(range_fold_binary_symbolics_p): Same.\n+\t(value_range::intersect_helper): Same.\n+\t(value_range::union_helper): Same.\n+\t* tree-vrp.h (range_fold_binary_expr): Same.\n+\n 2019-11-04  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/92341"}, {"sha": "64fb76bda6284bbd94151e1a1b351cf434215f48", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b00460cb14ef64b3bc5348eef94aa177c642d4b4/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b00460cb14ef64b3bc5348eef94aa177c642d4b4/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=b00460cb14ef64b3bc5348eef94aa177c642d4b4", "patch": "@@ -135,10 +135,8 @@ value_range::value_range (tree type)\n   set_varying (type);\n }\n \n-value_range::value_range (enum value_range_kind kind,\n-\t\t\t\t    tree type,\n-\t\t\t\t    const wide_int &wmin,\n-\t\t\t\t    const wide_int &wmax)\n+value_range::value_range (enum value_range_kind kind, tree type,\n+\t\t\t  const wide_int &wmin, const wide_int &wmax)\n {\n   tree min = wide_int_to_tree (type, wmin);\n   tree max = wide_int_to_tree (type, wmax);\n@@ -147,8 +145,7 @@ value_range::value_range (enum value_range_kind kind,\n }\n \n value_range::value_range (tree type,\n-\t\t\t\t    const wide_int &wmin,\n-\t\t\t\t    const wide_int &wmax)\n+\t\t\t  const wide_int &wmin, const wide_int &wmax)\n {\n   tree min = wide_int_to_tree (type, wmin);\n   tree max = wide_int_to_tree (type, wmax);\n@@ -1743,8 +1740,7 @@ supported_types_p (value_range *vr,\n \n static bool\n defined_ranges_p (value_range *vr,\n-\t\t  const value_range *vr0,\n-\t\t  const value_range *vr1 = NULL)\n+\t\t  const value_range *vr0, const value_range *vr1 = NULL)\n {\n   if (vr0->undefined_p () && (!vr1 || vr1->undefined_p ()))\n     {\n@@ -1770,8 +1766,7 @@ static bool\n range_fold_binary_symbolics_p (value_range *vr,\n \t\t\t       tree_code code,\n \t\t\t       tree expr_type,\n-\t\t\t       const value_range *vr0,\n-\t\t\t       const value_range *vr1)\n+\t\t\t       const value_range *vr0, const value_range *vr1)\n {\n   if (vr0->symbolic_p () || vr1->symbolic_p ())\n     {\n@@ -5830,8 +5825,7 @@ intersect_ranges (enum value_range_kind *vr0type,\n    ranges.  This may not be the smallest possible such range.  */\n \n value_range\n-value_range::intersect_helper (const value_range *vr0,\n-\t\t\t\t    const value_range *vr1)\n+value_range::intersect_helper (const value_range *vr0, const value_range *vr1)\n {\n   /* If either range is VR_VARYING the other one wins.  */\n   if (vr1->varying_p ())\n@@ -5944,8 +5938,7 @@ value_range_equiv::intersect (const value_range_equiv *other)\n    smallest possible such range.  */\n \n value_range\n-value_range::union_helper (const value_range *vr0,\n-\t\t\t\tconst value_range *vr1)\n+value_range::union_helper (const value_range *vr0, const value_range *vr1)\n {\n   /* VR0 has the resulting range if VR1 is undefined or VR0 is varying.  */\n   if (vr1->undefined_p ()"}, {"sha": "766fb635ab865852464c4bd7569d4baf97ba88ad", "filename": "gcc/tree-vrp.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b00460cb14ef64b3bc5348eef94aa177c642d4b4/gcc%2Ftree-vrp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b00460cb14ef64b3bc5348eef94aa177c642d4b4/gcc%2Ftree-vrp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.h?ref=b00460cb14ef64b3bc5348eef94aa177c642d4b4", "patch": "@@ -293,8 +293,7 @@ extern tree vrp_val_max (const_tree);\n void range_fold_unary_expr (value_range *, enum tree_code, tree type,\n \t\t\t    const value_range *, tree op0_type);\n void range_fold_binary_expr (value_range *, enum tree_code, tree type,\n-\t\t\t     const value_range *,\n-\t\t\t     const value_range *);\n+\t\t\t     const value_range *, const value_range *);\n \n extern bool vrp_operand_equal_p (const_tree, const_tree);\n extern enum value_range_kind intersect_range_with_nonzero_bits"}]}