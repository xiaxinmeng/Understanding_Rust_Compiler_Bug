{"sha": "58df5350753c00f140c86e60ba5ce0cac686ec4b", "node_id": "C_kwDOANBUbNoAKDU4ZGY1MzUwNzUzYzAwZjE0MGM4NmU2MGJhNWNlMGNhYzY4NmVjNGI", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-03-30T03:27:38Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-03-30T22:25:58Z"}, "message": "c++: anonymous union member reference [PR105452]\n\nWhile parsing the anonymous union, we don't yet know that it's an anonymous\nunion, so we build the reference to 'v' in the static_assert relative to the\nunion type.  But at instantiation time we know it's an anonymous union, so\nwe need to avoid trying to check access for 'v' in the union again; the\nsimplest approach seemed to be to make accessible_p step out to the\ncontaining class.\n\nWhile looking at this I also noticed that we were having trouble with DMI in\nan anonymous union referring to members of the containing class; there\nwe just need to give current_class_ptr the right type.\n\n\tPR c++/105452\n\ngcc/cp/ChangeLog:\n\n\t* search.cc (type_context_for_name_lookup): New.\n\t(accessible_p): Handle anonymous union.\n\t* init.cc (maybe_instantiate_nsdmi_init): Use\n\ttype_context_for_name_lookup.\n\t* parser.cc (cp_parser_class_specifier): Likewise.\n\t* cp-tree.h (type_context_for_name_lookup): Declare.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/lookup/anon8.C: New test.", "tree": {"sha": "b8daec4b5229dd4df17937a52382b8eab4abd06e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8daec4b5229dd4df17937a52382b8eab4abd06e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58df5350753c00f140c86e60ba5ce0cac686ec4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58df5350753c00f140c86e60ba5ce0cac686ec4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58df5350753c00f140c86e60ba5ce0cac686ec4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58df5350753c00f140c86e60ba5ce0cac686ec4b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85131af0603c0af2aa6b40de6cc929905f22bd50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85131af0603c0af2aa6b40de6cc929905f22bd50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85131af0603c0af2aa6b40de6cc929905f22bd50"}], "stats": {"total": 47, "additions": 44, "deletions": 3}, "files": [{"sha": "d450b3d5b78adc9e208fbdacc196b1201247fc7d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58df5350753c00f140c86e60ba5ce0cac686ec4b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58df5350753c00f140c86e60ba5ce0cac686ec4b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=58df5350753c00f140c86e60ba5ce0cac686ec4b", "patch": "@@ -7534,6 +7534,7 @@ extern int at_function_scope_p\t\t\t(void);\n extern bool at_class_scope_p\t\t\t(void);\n extern bool at_namespace_scope_p\t\t(void);\n extern tree context_for_name_lookup\t\t(tree);\n+extern tree type_context_for_name_lookup\t(tree);\n extern tree lookup_conversions\t\t\t(tree);\n extern tree binfo_from_vbase\t\t\t(tree);\n extern tree binfo_for_vbase\t\t\t(tree, tree);"}, {"sha": "9571d18170ea8070c7fd7a1e3de12c1fd30bd81e", "filename": "gcc/cp/init.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58df5350753c00f140c86e60ba5ce0cac686ec4b/gcc%2Fcp%2Finit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58df5350753c00f140c86e60ba5ce0cac686ec4b/gcc%2Fcp%2Finit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.cc?ref=58df5350753c00f140c86e60ba5ce0cac686ec4b", "patch": "@@ -597,7 +597,7 @@ maybe_instantiate_nsdmi_init (tree member, tsubst_flags_t complain)\n \t  DECL_INSTANTIATING_NSDMI_P (member) = 1;\n \n \t  bool pushed = false;\n-\t  tree ctx = DECL_CONTEXT (member);\n+\t  tree ctx = type_context_for_name_lookup (member);\n \n \t  processing_template_decl_sentinel ptds (/*reset*/false);\n \t  if (!currently_open_class (ctx))"}, {"sha": "a6341b98af21aabc047e3faf59fe22559b7aed6f", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58df5350753c00f140c86e60ba5ce0cac686ec4b/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58df5350753c00f140c86e60ba5ce0cac686ec4b/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=58df5350753c00f140c86e60ba5ce0cac686ec4b", "patch": "@@ -26439,11 +26439,12 @@ cp_parser_class_specifier (cp_parser* parser)\n       /* Now parse any NSDMIs.  */\n       FOR_EACH_VEC_SAFE_ELT (unparsed_nsdmis, ix, decl)\n \t{\n-\t  if (class_type != DECL_CONTEXT (decl))\n+\t  tree ctx = type_context_for_name_lookup (decl);\n+\t  if (class_type != ctx)\n \t    {\n \t      if (pushed_scope)\n \t\tpop_scope (pushed_scope);\n-\t      class_type = DECL_CONTEXT (decl);\n+\t      class_type = ctx;\n \t      pushed_scope = push_scope (class_type);\n \t    }\n \t  inject_this_parameter (class_type, TYPE_UNQUALIFIED);"}, {"sha": "3f521b3bd72fc5eb83cc1c1a15ef2863f5a8c323", "filename": "gcc/cp/search.cc", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58df5350753c00f140c86e60ba5ce0cac686ec4b/gcc%2Fcp%2Fsearch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58df5350753c00f140c86e60ba5ce0cac686ec4b/gcc%2Fcp%2Fsearch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.cc?ref=58df5350753c00f140c86e60ba5ce0cac686ec4b", "patch": "@@ -485,6 +485,25 @@ context_for_name_lookup (tree decl)\n   return context;\n }\n \n+/* Like the above, but always return a type, because it's simpler for member\n+   handling to refer to the anonymous aggr rather than a function.  */\n+\n+tree\n+type_context_for_name_lookup (tree decl)\n+{\n+  tree context = DECL_P (decl) ? DECL_CONTEXT (decl) : decl;\n+  gcc_checking_assert (CLASS_TYPE_P (context));\n+\n+  while (context && TYPE_P (context) && ANON_AGGR_TYPE_P (context))\n+    {\n+      tree next = TYPE_CONTEXT (context);\n+      if (!TYPE_P (next))\n+\tbreak;\n+      context = next;\n+    }\n+  return context;\n+}\n+\n /* Returns true iff DECL is declared in TYPE.  */\n \n static bool\n@@ -881,6 +900,10 @@ accessible_p (tree type, tree decl, bool consider_local_p)\n   else\n     otype = type;\n \n+  /* Anonymous unions don't have their own access.  */\n+  if (ANON_AGGR_TYPE_P (type))\n+    type = type_context_for_name_lookup (type);\n+\n   /* [class.access.base]\n \n      A member m is accessible when named in class N if"}, {"sha": "80124caba63f89a0227653592dc36721fad313fa", "filename": "gcc/testsuite/g++.dg/lookup/anon8.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58df5350753c00f140c86e60ba5ce0cac686ec4b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fanon8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58df5350753c00f140c86e60ba5ce0cac686ec4b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fanon8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fanon8.C?ref=58df5350753c00f140c86e60ba5ce0cac686ec4b", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/105452\n+// { dg-do compile { target c++11 } }\n+\n+template <typename T>\n+struct C {\n+  int i = 42;\n+  union {\n+    T v = i;\n+    static_assert(sizeof(v) == sizeof(char), \"\");\n+  };\n+};\n+\n+int main() {\n+  C<char> x;\n+  return x.v;\n+}"}]}