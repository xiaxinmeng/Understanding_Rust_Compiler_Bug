{"sha": "68a51b68bd6c04b937bd1283279cd1203d0e4a16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhhNTFiNjhiZDZjMDRiOTM3YmQxMjgzMjc5Y2QxMjAzZDBlNGExNg==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2016-08-11T14:45:23Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2016-08-11T14:45:23Z"}, "message": "Implement LWG 2758.\n\n\t* include/bits/basic_string.h\n\t(append(__sv_type, size_type, size_type)): Turn into a template,\n\tchange parameter type, constrain, add a conversion to __sv_type\n\tfrom the dependent parameter type.\n\t(assign(__sv_type, size_type, size_type)): Likewise.\n\t(insert(size_type, __sv_type, size_type, size_type)): Likewise.\n\t(replace(size_type, size_type, __sv_type, size_type, size_type)):\n\tLikewise.\n\t(compare(size_type, size_type,__sv_type, size_type, size_type)):\n\tLikewise.\n\t* testsuite/21_strings/basic_string/lwg2758.cc: New.\n\nFrom-SVN: r239370", "tree": {"sha": "25fbfc32a1ac472c3780e5c66a6ef0e9c4ad66b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25fbfc32a1ac472c3780e5c66a6ef0e9c4ad66b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68a51b68bd6c04b937bd1283279cd1203d0e4a16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68a51b68bd6c04b937bd1283279cd1203d0e4a16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68a51b68bd6c04b937bd1283279cd1203d0e4a16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68a51b68bd6c04b937bd1283279cd1203d0e4a16/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f1b33737d6392133cdc0f86100d1d0df977a984", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f1b33737d6392133cdc0f86100d1d0df977a984", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f1b33737d6392133cdc0f86100d1d0df977a984"}], "stats": {"total": 91, "additions": 86, "deletions": 5}, "files": [{"sha": "def5c2960e50c7398a0cf5037a684856df56298a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a51b68bd6c04b937bd1283279cd1203d0e4a16/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a51b68bd6c04b937bd1283279cd1203d0e4a16/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=68a51b68bd6c04b937bd1283279cd1203d0e4a16", "patch": "@@ -1,3 +1,18 @@\n+2016-08-11  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tImplement LWG 2758.\n+\t* include/bits/basic_string.h\n+\t(append(__sv_type, size_type, size_type)): Turn into a template,\n+\tchange parameter type, constrain, add a conversion to __sv_type\n+\tfrom the dependent parameter type.\n+\t(assign(__sv_type, size_type, size_type)): Likewise.\n+\t(insert(size_type, __sv_type, size_type, size_type)): Likewise.\n+\t(replace(size_type, size_type, __sv_type, size_type, size_type)):\n+\tLikewise.\n+\t(compare(size_type, size_type,__sv_type, size_type, size_type)):\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/lwg2758.cc: New.\n+\n 2016-08-06  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/xml/manual/status_cxx2017.xml: Update status table."}, {"sha": "89e210062f609fc8bfb47a359efe4561674b2b8a", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a51b68bd6c04b937bd1283279cd1203d0e4a16/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a51b68bd6c04b937bd1283279cd1203d0e4a16/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=68a51b68bd6c04b937bd1283279cd1203d0e4a16", "patch": "@@ -1227,9 +1227,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param __n   The number of characters to append from the string_view.\n        *  @return  Reference to this string.\n        */\n-      basic_string& append(__sv_type __sv,\n+      template <typename _Tp,\n+\t\tenable_if_t<is_convertible_v<const _Tp&, __sv_type>,\n+\t\t\t    bool> = true>\n+      basic_string& append(const _Tp& __svt,\n \t\t\t   size_type __pos, size_type __n = npos)\n       {\n+\t__sv_type __sv = __svt;\n \treturn _M_append(__sv.data()\n \t\t\t + __sv._M_check(__pos, \"basic_string::append\"),\n \t\t\t __sv._M_limit(__pos, __n));\n@@ -1392,10 +1396,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param __n  The number of characters to assign.\n        *  @return  Reference to this string.\n        */\n+      template <typename _Tp,\n+\t\tenable_if_t<is_convertible_v<const _Tp&, __sv_type>,\n+\t\t\t    bool> = true>\n       basic_string&\n-      assign(__sv_type __sv,\n+      assign(const _Tp& __svt,\n \t     size_type __pos, size_type __n = npos)\n       {\n+\t__sv_type __sv = __svt;\n \treturn _M_replace(size_type(0), this->size(), __sv.data()\n \t\t\t  + __sv._M_check(__pos, \"basic_string::assign\"),\n \t\t\t  __sv._M_limit(__pos, __n));\n@@ -1652,9 +1660,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param __n    The number of characters to insert.\n        *  @return  Reference to this string.\n       */\n-      basic_string& insert(size_type __pos1, __sv_type __sv,\n+      template <typename _Tp,\n+\t\tenable_if_t<is_convertible_v<const _Tp&, __sv_type>,\n+\t\t\t    bool> = true>\n+      basic_string& insert(size_type __pos1, const _Tp& __svt,\n \t\t\t   size_type __pos2, size_type __n = npos)\n       {\n+\t__sv_type __sv = __svt;\n \treturn this->replace(__pos1, size_type(0), __sv.data()\n \t\t\t     + __sv._M_check(__pos2, \"basic_string::insert\"),\n \t\t\t     __sv._M_limit(__pos2, __n));\n@@ -2071,10 +2083,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param __n2    The number of characters to insert.\n        *  @return  Reference to this string.\n       */\n+      template <typename _Tp,\n+\t\tenable_if_t<is_convertible_v<const _Tp&, __sv_type>,\n+\t\t\t    bool> = true>\n       basic_string& replace(size_type __pos1, size_type __n1,\n-\t\t\t    __sv_type __sv,\n+\t\t\t    const _Tp& __svt,\n \t\t\t    size_type __pos2, size_type __n2 = npos)\n       {\n+\t__sv_type __sv = __svt;\n \treturn this->replace(__pos1, __n1, __sv.data()\n \t\t\t     + __sv._M_check(__pos2, \"basic_string::replace\"),\n \t\t\t     __sv._M_limit(__pos2, __n2));\n@@ -2720,10 +2736,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param __n2  The number of characters to compare.\n        *  @return  Integer < 0, 0, or > 0.\n        */\n+      template <typename _Tp,\n+\t\tenable_if_t<is_convertible_v<const _Tp&, __sv_type>,\n+\t\t\t    bool> = true>\n       int compare(size_type __pos1, size_type __n1,\n-\t\t  __sv_type __sv,\n+\t\t  const _Tp& __svt,\n \t\t  size_type __pos2, size_type __n2 = npos) const\n       {\n+\t__sv_type __sv = __svt;\n \treturn __sv_type(*this)\n \t  .substr(__pos1, __n1).compare(__sv.substr(__pos2, __n2));\n       }"}, {"sha": "1d292482014a280c8f2781d8d280bf694e10cd4c", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/lwg2758.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a51b68bd6c04b937bd1283279cd1203d0e4a16/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Flwg2758.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a51b68bd6c04b937bd1283279cd1203d0e4a16/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Flwg2758.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Flwg2758.cc?ref=68a51b68bd6c04b937bd1283279cd1203d0e4a16", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string>\n+\n+struct CustomString\n+{\n+  std::string data = \"foo\";\n+  std::string_view data_view = data;\n+  operator std::string_view() const {return data_view;}\n+};\n+\n+int main()\n+{\n+    std::string x;\n+    CustomString cs;\n+    x.append(\"foo\", 0, 3);\n+    x.append(cs, 0, 3);\n+    x.assign(\"foo\", 0, 3);\n+    x.assign(cs, 0, 3);\n+    x.insert(0, \"foo\", 0, 3);\n+    x.insert(0, cs, 0, 3);\n+    x = \"bar\";\n+    x.replace(0, 3, \"foo\", 0, 3);\n+    x.replace(0, 3, cs, 0, 3);\n+    x = \"bar\";\n+    x.compare(0, 3, \"foo\", 0, 3);\n+    x.compare(0, 3, cs, 0, 3);\n+}"}]}