{"sha": "2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmYxYzNlNDkzNGNhYzA1ODJkYzUwYTIwYjZlYTZlZTZmYmRmNGU0Mw==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2003-06-11T20:29:21Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2003-06-11T20:29:21Z"}, "message": "struct-by-value-11_main.c: New file.\n\n\t* gcc.dg/compat/struct-by-value-11_main.c: New file.\n\t* gcc.dg/compat/struct-by-value-11_x.c: New file.\n\t* gcc.dg/compat/struct-by-value-11_y.c: New file.\n\t* gcc.dg/compat/struct-by-value-12_main.c: New file.\n\t* gcc.dg/compat/struct-by-value-12_x.c: New file.\n\t* gcc.dg/compat/struct-by-value-12_y.c: New file.\n\t* gcc.dg/compat/struct-by-value-13_main.c: New file.\n\t* gcc.dg/compat/struct-by-value-13_x.c: New file.\n\t* gcc.dg/compat/struct-by-value-13_y.c: New file.\n\t* gcc.dg/compat/struct-by-value-14_main.c: New file.\n\t* gcc.dg/compat/struct-by-value-14_x.c: New file.\n\t* gcc.dg/compat/struct-by-value-14_y.c: New file.\n\t* gcc.dg/compat/struct-by-value-15_main.c: New file.\n\t* gcc.dg/compat/struct-by-value-15_x.c: New file.\n\t* gcc.dg/compat/struct-by-value-15_y.c: New file.\n\t* gcc.dg/compat/struct-by-value-16_main.c: New file.\n\t* gcc.dg/compat/struct-by-value-16_x.c: New file.\n\t* gcc.dg/compat/struct-by-value-16_y.c: New file.\n\t* gcc.dg/compat/struct-by-value-17_main.c: New file.\n\t* gcc.dg/compat/struct-by-value-17_x.c: New file.\n\t* gcc.dg/compat/struct-by-value-17_y.c: New file.\n\t* gcc.dg/compat/struct-by-value-18_main.c: New file.\n\t* gcc.dg/compat/struct-by-value-18_x.c: New file.\n\t* gcc.dg/compat/struct-by-value-18_y.c: New file.\n\nFrom-SVN: r67796", "tree": {"sha": "def8d0c30f7f82a6ca6e11d4f14736d190575ee2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/def8d0c30f7f82a6ca6e11d4f14736d190575ee2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/comments", "author": null, "committer": null, "parents": [{"sha": "3c900cb55bca213ed80b4f58d598332fcdecc533", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c900cb55bca213ed80b4f58d598332fcdecc533", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c900cb55bca213ed80b4f58d598332fcdecc533"}], "stats": {"total": 849, "additions": 849, "deletions": 0}, "files": [{"sha": "f5ca84ba9144bd745e1bfbcaab6cb74c19946615", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43", "patch": "@@ -1,5 +1,30 @@\n 2003-06-11  Janis Johnson  <janis187@us.ibm.com>\n \n+\t* gcc.dg/compat/struct-by-value-11_main.c: New file.\n+\t* gcc.dg/compat/struct-by-value-11_x.c: New file.\n+\t* gcc.dg/compat/struct-by-value-11_y.c: New file.\n+\t* gcc.dg/compat/struct-by-value-12_main.c: New file.\n+\t* gcc.dg/compat/struct-by-value-12_x.c: New file.\n+\t* gcc.dg/compat/struct-by-value-12_y.c: New file.\n+\t* gcc.dg/compat/struct-by-value-13_main.c: New file.\n+\t* gcc.dg/compat/struct-by-value-13_x.c: New file.\n+\t* gcc.dg/compat/struct-by-value-13_y.c: New file.\n+\t* gcc.dg/compat/struct-by-value-14_main.c: New file.\n+\t* gcc.dg/compat/struct-by-value-14_x.c: New file.\n+\t* gcc.dg/compat/struct-by-value-14_y.c: New file.\n+\t* gcc.dg/compat/struct-by-value-15_main.c: New file.\n+\t* gcc.dg/compat/struct-by-value-15_x.c: New file.\n+\t* gcc.dg/compat/struct-by-value-15_y.c: New file.\n+\t* gcc.dg/compat/struct-by-value-16_main.c: New file.\n+\t* gcc.dg/compat/struct-by-value-16_x.c: New file.\n+\t* gcc.dg/compat/struct-by-value-16_y.c: New file.\n+\t* gcc.dg/compat/struct-by-value-17_main.c: New file.\n+\t* gcc.dg/compat/struct-by-value-17_x.c: New file.\n+\t* gcc.dg/compat/struct-by-value-17_y.c: New file.\n+\t* gcc.dg/compat/struct-by-value-18_main.c: New file.\n+\t* gcc.dg/compat/struct-by-value-18_x.c: New file.\n+\t* gcc.dg/compat/struct-by-value-18_y.c: New file.\n+\n \t* gcc.dg/compat/scalar-by-value-3_main.c: New file.\n \t* gcc.dg/compat/scalar-by-value-3_x.c: New file.\n \t* gcc.dg/compat/scalar-by-value-3_y.c: New file."}, {"sha": "400e94c2cad444a632074a94d0230f8461e1a553", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-11_main.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-11_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-11_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-11_main.c?ref=2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43", "patch": "@@ -0,0 +1,14 @@\n+/* Test structures passed by value, including to a function with a\n+   variable-length argument lists.  All struct members are of type\n+   _Complex char.  */\n+\n+extern void struct_by_value_11_x (void);\n+extern void exit (int);\n+int fails;\n+\n+int\n+main ()\n+{\n+  struct_by_value_11_x ();\n+  exit (0);\n+}"}, {"sha": "237f67164034c4de8167aa0801ce080f89f409ca", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-11_x.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-11_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-11_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-11_x.c?ref=2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43", "patch": "@@ -0,0 +1,55 @@\n+#include \"compat-common.h\"\n+\n+#include \"fp-struct-defs.h\"\n+#include \"fp-struct-check.h\"\n+#include \"fp-struct-test-by-value-x.h\"\n+\n+DEFS(cc, _Complex char)\n+CHECKS(cc, _Complex char)\n+\n+TEST(Scc1, _Complex char)\n+TEST(Scc2, _Complex char)\n+TEST(Scc3, _Complex char)\n+TEST(Scc4, _Complex char)\n+TEST(Scc5, _Complex char)\n+TEST(Scc6, _Complex char)\n+TEST(Scc7, _Complex char)\n+TEST(Scc8, _Complex char)\n+TEST(Scc9, _Complex char)\n+TEST(Scc10, _Complex char)\n+TEST(Scc11, _Complex char)\n+TEST(Scc12, _Complex char)\n+TEST(Scc13, _Complex char)\n+TEST(Scc14, _Complex char)\n+TEST(Scc15, _Complex char)\n+TEST(Scc16, _Complex char)\n+\n+#undef T\n+\n+void\n+struct_by_value_11_x ()\n+{\n+#define T(TYPE, MTYPE) testit##TYPE ();\n+\n+T(Scc1, _Complex char)\n+T(Scc2, _Complex char)\n+T(Scc3, _Complex char)\n+T(Scc4, _Complex char)\n+T(Scc5, _Complex char)\n+T(Scc6, _Complex char)\n+T(Scc7, _Complex char)\n+T(Scc8, _Complex char)\n+T(Scc9, _Complex char)\n+T(Scc10, _Complex char)\n+T(Scc11, _Complex char)\n+T(Scc12, _Complex char)\n+T(Scc13, _Complex char)\n+T(Scc14, _Complex char)\n+T(Scc15, _Complex char)\n+T(Scc16, _Complex char)\n+\n+if (fails != 0)\n+  abort ();\n+\n+#undef T\n+}"}, {"sha": "c0f0ad528af8c6ecb2248feb046ad5917f42bfd2", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-11_y.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-11_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-11_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-11_y.c?ref=2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43", "patch": "@@ -0,0 +1,34 @@\n+#include <stdarg.h>\n+\n+#include \"compat-common.h\"\n+\n+/* Turn off checking for variable arguments with -DSKIPVA.  */\n+#ifdef SKIPVA\n+const int test_va = 0;\n+#else\n+const int test_va = 1;\n+#endif\n+\n+#include \"fp-struct-defs.h\"\n+#include \"fp-struct-init.h\"\n+#include \"fp-struct-test-by-value-y.h\"\n+\n+DEFS(cc,_Complex char)\n+INITS(cc, _Complex char)\n+\n+TEST(Scc1, _Complex char)\n+TEST(Scc2, _Complex char)\n+TEST(Scc3, _Complex char)\n+TEST(Scc4, _Complex char)\n+TEST(Scc5, _Complex char)\n+TEST(Scc6, _Complex char)\n+TEST(Scc7, _Complex char)\n+TEST(Scc8, _Complex char)\n+TEST(Scc9, _Complex char)\n+TEST(Scc10, _Complex char)\n+TEST(Scc11, _Complex char)\n+TEST(Scc12, _Complex char)\n+TEST(Scc13, _Complex char)\n+TEST(Scc14, _Complex char)\n+TEST(Scc15, _Complex char)\n+TEST(Scc16, _Complex char)"}, {"sha": "ab4faac09f336e1cb5a01927e209bebce8a208a5", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-12_main.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-12_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-12_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-12_main.c?ref=2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43", "patch": "@@ -0,0 +1,14 @@\n+/* Test structures passed by value, including to a function with a\n+   variable-length argument lists.  All struct members are of type\n+   _Complex short.  */\n+\n+extern void struct_by_value_12_x (void);\n+extern void exit (int);\n+int fails;\n+\n+int\n+main ()\n+{\n+  struct_by_value_12_x ();\n+  exit (0);\n+}"}, {"sha": "2ba6fc6c0b6ed2d9e7657bbe097969920e6111c9", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-12_x.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-12_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-12_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-12_x.c?ref=2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43", "patch": "@@ -0,0 +1,55 @@\n+#include \"compat-common.h\"\n+\n+#include \"fp-struct-defs.h\"\n+#include \"fp-struct-check.h\"\n+#include \"fp-struct-test-by-value-x.h\"\n+\n+DEFS(cs, _Complex short)\n+CHECKS(cs, _Complex short)\n+\n+TEST(Scs1, _Complex short)\n+TEST(Scs2, _Complex short)\n+TEST(Scs3, _Complex short)\n+TEST(Scs4, _Complex short)\n+TEST(Scs5, _Complex short)\n+TEST(Scs6, _Complex short)\n+TEST(Scs7, _Complex short)\n+TEST(Scs8, _Complex short)\n+TEST(Scs9, _Complex short)\n+TEST(Scs10, _Complex short)\n+TEST(Scs11, _Complex short)\n+TEST(Scs12, _Complex short)\n+TEST(Scs13, _Complex short)\n+TEST(Scs14, _Complex short)\n+TEST(Scs15, _Complex short)\n+TEST(Scs16, _Complex short)\n+\n+#undef T\n+\n+void\n+struct_by_value_12_x ()\n+{\n+#define T(TYPE, MTYPE) testit##TYPE ();\n+\n+T(Scs1, _Complex short)\n+T(Scs2, _Complex short)\n+T(Scs3, _Complex short)\n+T(Scs4, _Complex short)\n+T(Scs5, _Complex short)\n+T(Scs6, _Complex short)\n+T(Scs7, _Complex short)\n+T(Scs8, _Complex short)\n+T(Scs9, _Complex short)\n+T(Scs10, _Complex short)\n+T(Scs11, _Complex short)\n+T(Scs12, _Complex short)\n+T(Scs13, _Complex short)\n+T(Scs14, _Complex short)\n+T(Scs15, _Complex short)\n+T(Scs16, _Complex short)\n+\n+if (fails != 0)\n+  abort ();\n+\n+#undef T\n+}"}, {"sha": "50a08b467af09ea5fd1bf4591fe0be999686e203", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-12_y.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-12_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-12_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-12_y.c?ref=2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43", "patch": "@@ -0,0 +1,34 @@\n+#include <stdarg.h>\n+\n+#include \"compat-common.h\"\n+\n+/* Turn off checking for variable arguments with -DSKIPVA.  */\n+#ifdef SKIPVA\n+const int test_va = 0;\n+#else\n+const int test_va = 1;\n+#endif\n+\n+#include \"fp-struct-defs.h\"\n+#include \"fp-struct-init.h\"\n+#include \"fp-struct-test-by-value-y.h\"\n+\n+DEFS(cs,_Complex short)\n+INITS(cs, _Complex short)\n+\n+TEST(Scs1, _Complex short)\n+TEST(Scs2, _Complex short)\n+TEST(Scs3, _Complex short)\n+TEST(Scs4, _Complex short)\n+TEST(Scs5, _Complex short)\n+TEST(Scs6, _Complex short)\n+TEST(Scs7, _Complex short)\n+TEST(Scs8, _Complex short)\n+TEST(Scs9, _Complex short)\n+TEST(Scs10, _Complex short)\n+TEST(Scs11, _Complex short)\n+TEST(Scs12, _Complex short)\n+TEST(Scs13, _Complex short)\n+TEST(Scs14, _Complex short)\n+TEST(Scs15, _Complex short)\n+TEST(Scs16, _Complex short)"}, {"sha": "b853bb88eee1e5e3798a33ed498e13b0e64629fe", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-13_main.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-13_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-13_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-13_main.c?ref=2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43", "patch": "@@ -0,0 +1,14 @@\n+/* Test structures passed by value, including to a function with a\n+   variable-length argument lists.  All struct members are type\n+   _Complex int.  */\n+\n+extern void struct_by_value_l3_x (void);\n+extern void exit (int);\n+int fails;\n+\n+int\n+main ()\n+{\n+  struct_by_value_13_x ();\n+  exit (0);\n+}"}, {"sha": "bf7af3a3603c0063eb5369a561a7dddab33d1b54", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-13_x.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-13_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-13_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-13_x.c?ref=2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43", "patch": "@@ -0,0 +1,55 @@\n+#include \"compat-common.h\"\n+\n+#include \"fp-struct-defs.h\"\n+#include \"fp-struct-check.h\"\n+#include \"fp-struct-test-by-value-x.h\"\n+\n+DEFS(ci, _Complex int)\n+CHECKS(ci, _Complex int)\n+\n+TEST(Sci1, _Complex int)\n+TEST(Sci2, _Complex int)\n+TEST(Sci3, _Complex int)\n+TEST(Sci4, _Complex int)\n+TEST(Sci5, _Complex int)\n+TEST(Sci6, _Complex int)\n+TEST(Sci7, _Complex int)\n+TEST(Sci8, _Complex int)\n+TEST(Sci9, _Complex int)\n+TEST(Sci10, _Complex int)\n+TEST(Sci11, _Complex int)\n+TEST(Sci12, _Complex int)\n+TEST(Sci13, _Complex int)\n+TEST(Sci14, _Complex int)\n+TEST(Sci15, _Complex int)\n+TEST(Sci16, _Complex int)\n+\n+#undef T\n+\n+void\n+struct_by_value_13_x ()\n+{\n+#define T(TYPE, MTYPE) testit##TYPE ();\n+\n+T(Sci1, _Complex int)\n+T(Sci2, _Complex int)\n+T(Sci3, _Complex int)\n+T(Sci4, _Complex int)\n+T(Sci5, _Complex int)\n+T(Sci6, _Complex int)\n+T(Sci7, _Complex int)\n+T(Sci8, _Complex int)\n+T(Sci9, _Complex int)\n+T(Sci10, _Complex int)\n+T(Sci11, _Complex int)\n+T(Sci12, _Complex int)\n+T(Sci13, _Complex int)\n+T(Sci14, _Complex int)\n+T(Sci15, _Complex int)\n+T(Sci16, _Complex int)\n+\n+if (fails != 0)\n+  abort ();\n+\n+#undef T\n+}"}, {"sha": "e53ee59fc4309b555cfffadb1d4c42729d447300", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-13_y.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-13_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-13_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-13_y.c?ref=2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43", "patch": "@@ -0,0 +1,34 @@\n+#include <stdarg.h>\n+\n+#include \"compat-common.h\"\n+\n+/* Turn off checking for variable arguments with -DSKIPVA.  */\n+#ifdef SKIPVA\n+const int test_va = 0;\n+#else\n+const int test_va = 1;\n+#endif\n+\n+#include \"fp-struct-defs.h\"\n+#include \"fp-struct-init.h\"\n+#include \"fp-struct-test-by-value-y.h\"\n+\n+DEFS(ci,_Complex int)\n+INITS(ci, _Complex int)\n+\n+TEST(Sci1, _Complex int)\n+TEST(Sci2, _Complex int)\n+TEST(Sci3, _Complex int)\n+TEST(Sci4, _Complex int)\n+TEST(Sci5, _Complex int)\n+TEST(Sci6, _Complex int)\n+TEST(Sci7, _Complex int)\n+TEST(Sci8, _Complex int)\n+TEST(Sci9, _Complex int)\n+TEST(Sci10, _Complex int)\n+TEST(Sci11, _Complex int)\n+TEST(Sci12, _Complex int)\n+TEST(Sci13, _Complex int)\n+TEST(Sci14, _Complex int)\n+TEST(Sci15, _Complex int)\n+TEST(Sci16, _Complex int)"}, {"sha": "a332e93b12216a1817d19e8bc69b1479c57d8941", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-14_main.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-14_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-14_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-14_main.c?ref=2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43", "patch": "@@ -0,0 +1,14 @@\n+/* Test structures passed by value, including to a function with a\n+   variable-length argument lists.  All struct members are of type\n+   _Complex long.  */\n+\n+extern void struct_by_value_14_x (void);\n+extern void exit (int);\n+int fails;\n+\n+int\n+main ()\n+{\n+  struct_by_value_14_x ();\n+  exit (0);\n+}"}, {"sha": "765144c5376a924dd7e2fbb3878bc5f14c439c5b", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-14_x.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-14_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-14_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-14_x.c?ref=2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43", "patch": "@@ -0,0 +1,55 @@\n+#include \"compat-common.h\"\n+\n+#include \"fp-struct-defs.h\"\n+#include \"fp-struct-check.h\"\n+#include \"fp-struct-test-by-value-x.h\"\n+\n+DEFS(cl, _Complex long)\n+CHECKS(cl, _Complex long)\n+\n+TEST(Scl1, _Complex long)\n+TEST(Scl2, _Complex long)\n+TEST(Scl3, _Complex long)\n+TEST(Scl4, _Complex long)\n+TEST(Scl5, _Complex long)\n+TEST(Scl6, _Complex long)\n+TEST(Scl7, _Complex long)\n+TEST(Scl8, _Complex long)\n+TEST(Scl9, _Complex long)\n+TEST(Scl10, _Complex long)\n+TEST(Scl11, _Complex long)\n+TEST(Scl12, _Complex long)\n+TEST(Scl13, _Complex long)\n+TEST(Scl14, _Complex long)\n+TEST(Scl15, _Complex long)\n+TEST(Scl16, _Complex long)\n+\n+#undef T\n+\n+void\n+struct_by_value_14_x ()\n+{\n+#define T(TYPE, MTYPE) testit##TYPE ();\n+\n+T(Scl1, _Complex long)\n+T(Scl2, _Complex long)\n+T(Scl3, _Complex long)\n+T(Scl4, _Complex long)\n+T(Scl5, _Complex long)\n+T(Scl6, _Complex long)\n+T(Scl7, _Complex long)\n+T(Scl8, _Complex long)\n+T(Scl9, _Complex long)\n+T(Scl10, _Complex long)\n+T(Scl11, _Complex long)\n+T(Scl12, _Complex long)\n+T(Scl13, _Complex long)\n+T(Scl14, _Complex long)\n+T(Scl15, _Complex long)\n+T(Scl16, _Complex long)\n+\n+if (fails != 0)\n+  abort ();\n+\n+#undef T\n+}"}, {"sha": "640b11bb06d607b8f9257d6e7051f16a8c8d94f7", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-14_y.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-14_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-14_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-14_y.c?ref=2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43", "patch": "@@ -0,0 +1,34 @@\n+#include <stdarg.h>\n+\n+#include \"compat-common.h\"\n+\n+/* Turn off checking for variable arguments with -DSKIPVA.  */\n+#ifdef SKIPVA\n+const int test_va = 0;\n+#else\n+const int test_va = 1;\n+#endif\n+\n+#include \"fp-struct-defs.h\"\n+#include \"fp-struct-init.h\"\n+#include \"fp-struct-test-by-value-y.h\"\n+\n+DEFS(cl,_Complex long)\n+INITS(cl, _Complex long)\n+\n+TEST(Scl1, _Complex long)\n+TEST(Scl2, _Complex long)\n+TEST(Scl3, _Complex long)\n+TEST(Scl4, _Complex long)\n+TEST(Scl5, _Complex long)\n+TEST(Scl6, _Complex long)\n+TEST(Scl7, _Complex long)\n+TEST(Scl8, _Complex long)\n+TEST(Scl9, _Complex long)\n+TEST(Scl10, _Complex long)\n+TEST(Scl11, _Complex long)\n+TEST(Scl12, _Complex long)\n+TEST(Scl13, _Complex long)\n+TEST(Scl14, _Complex long)\n+TEST(Scl15, _Complex long)\n+TEST(Scl16, _Complex long)"}, {"sha": "6e5d8e0f48ac9e4d5f1d962a742e8ab21f78827d", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-15_main.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-15_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-15_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-15_main.c?ref=2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43", "patch": "@@ -0,0 +1,14 @@\n+/* Test structures passed by value, including to a function with a\n+   variable-length argument lists.  All struct members are of type\n+   _Complex long long.  */\n+\n+extern void struct_by_value_15_x (void);\n+extern void exit (int);\n+int fails;\n+\n+int\n+main ()\n+{\n+  struct_by_value_15_x ();\n+  exit (0);\n+}"}, {"sha": "732582e76b59acc89d7dcc92c4721da5622c49f3", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-15_x.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-15_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-15_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-15_x.c?ref=2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43", "patch": "@@ -0,0 +1,55 @@\n+#include \"compat-common.h\"\n+\n+#include \"fp-struct-defs.h\"\n+#include \"fp-struct-check.h\"\n+#include \"fp-struct-test-by-value-x.h\"\n+\n+DEFS(cll, _Complex long long)\n+CHECKS(cll, _Complex long long)\n+\n+TEST(Scll1, _Complex long long)\n+TEST(Scll2, _Complex long long)\n+TEST(Scll3, _Complex long long)\n+TEST(Scll4, _Complex long long)\n+TEST(Scll5, _Complex long long)\n+TEST(Scll6, _Complex long long)\n+TEST(Scll7, _Complex long long)\n+TEST(Scll8, _Complex long long)\n+TEST(Scll9, _Complex long long)\n+TEST(Scll10, _Complex long long)\n+TEST(Scll11, _Complex long long)\n+TEST(Scll12, _Complex long long)\n+TEST(Scll13, _Complex long long)\n+TEST(Scll14, _Complex long long)\n+TEST(Scll15, _Complex long long)\n+TEST(Scll16, _Complex long long)\n+\n+#undef T\n+\n+void\n+struct_by_value_15_x ()\n+{\n+#define T(TYPE, MTYPE) testit##TYPE ();\n+\n+T(Scll1, _Complex long long)\n+T(Scll2, _Complex long long)\n+T(Scll3, _Complex long long)\n+T(Scll4, _Complex long long)\n+T(Scll5, _Complex long long)\n+T(Scll6, _Complex long long)\n+T(Scll7, _Complex long long)\n+T(Scll8, _Complex long long)\n+T(Scll9, _Complex long long)\n+T(Scll10, _Complex long long)\n+T(Scll11, _Complex long long)\n+T(Scll12, _Complex long long)\n+T(Scll13, _Complex long long)\n+T(Scll14, _Complex long long)\n+T(Scll15, _Complex long long)\n+T(Scll16, _Complex long long)\n+\n+if (fails != 0)\n+  abort ();\n+\n+#undef T\n+}"}, {"sha": "e7cf60a2d455a4cda0c0ba487d8c8d831925af26", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-15_y.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-15_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-15_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-15_y.c?ref=2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43", "patch": "@@ -0,0 +1,34 @@\n+#include <stdarg.h>\n+\n+#include \"compat-common.h\"\n+\n+/* Turn off checking for variable arguments with -DSKIPVA.  */\n+#ifdef SKIPVA\n+const int test_va = 0;\n+#else\n+const int test_va = 1;\n+#endif\n+\n+#include \"fp-struct-defs.h\"\n+#include \"fp-struct-init.h\"\n+#include \"fp-struct-test-by-value-y.h\"\n+\n+DEFS(cll,_Complex long long)\n+INITS(cll, _Complex long long)\n+\n+TEST(Scll1, _Complex long long)\n+TEST(Scll2, _Complex long long)\n+TEST(Scll3, _Complex long long)\n+TEST(Scll4, _Complex long long)\n+TEST(Scll5, _Complex long long)\n+TEST(Scll6, _Complex long long)\n+TEST(Scll7, _Complex long long)\n+TEST(Scll8, _Complex long long)\n+TEST(Scll9, _Complex long long)\n+TEST(Scll10, _Complex long long)\n+TEST(Scll11, _Complex long long)\n+TEST(Scll12, _Complex long long)\n+TEST(Scll13, _Complex long long)\n+TEST(Scll14, _Complex long long)\n+TEST(Scll15, _Complex long long)\n+TEST(Scll16, _Complex long long)"}, {"sha": "31447bee69e3050ee9e1071e9059f7e513aa4157", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-16_main.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-16_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-16_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-16_main.c?ref=2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43", "patch": "@@ -0,0 +1,14 @@\n+/* Test structures passed by value, including to a function with a\n+   variable-length argument lists.  All struct members are of type\n+   _Complex float.  */\n+\n+extern void struct_by_value_16_x (void);\n+extern void exit (int);\n+int fails;\n+\n+int\n+main ()\n+{\n+  struct_by_value_16_x ();\n+  exit (0);\n+}"}, {"sha": "ef701767eb87a69a291f86096eab06dacc83842b", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-16_x.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-16_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-16_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-16_x.c?ref=2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43", "patch": "@@ -0,0 +1,55 @@\n+#include \"compat-common.h\"\n+\n+#include \"fp-struct-defs.h\"\n+#include \"fp-struct-check.h\"\n+#include \"fp-struct-test-by-value-x.h\"\n+\n+DEFS(cf, _Complex float)\n+CHECKS(cf, _Complex float)\n+\n+TEST(Scf1, _Complex float)\n+TEST(Scf2, _Complex float)\n+TEST(Scf3, _Complex float)\n+TEST(Scf4, _Complex float)\n+TEST(Scf5, _Complex float)\n+TEST(Scf6, _Complex float)\n+TEST(Scf7, _Complex float)\n+TEST(Scf8, _Complex float)\n+TEST(Scf9, _Complex float)\n+TEST(Scf10, _Complex float)\n+TEST(Scf11, _Complex float)\n+TEST(Scf12, _Complex float)\n+TEST(Scf13, _Complex float)\n+TEST(Scf14, _Complex float)\n+TEST(Scf15, _Complex float)\n+TEST(Scf16, _Complex float)\n+\n+#undef T\n+\n+void\n+struct_by_value_16_x ()\n+{\n+#define T(TYPE, MTYPE) testit##TYPE ();\n+\n+T(Scf1, _Complex float)\n+T(Scf2, _Complex float)\n+T(Scf3, _Complex float)\n+T(Scf4, _Complex float)\n+T(Scf5, _Complex float)\n+T(Scf6, _Complex float)\n+T(Scf7, _Complex float)\n+T(Scf8, _Complex float)\n+T(Scf9, _Complex float)\n+T(Scf10, _Complex float)\n+T(Scf11, _Complex float)\n+T(Scf12, _Complex float)\n+T(Scf13, _Complex float)\n+T(Scf14, _Complex float)\n+T(Scf15, _Complex float)\n+T(Scf16, _Complex float)\n+\n+if (fails != 0)\n+  abort ();\n+\n+#undef T\n+}"}, {"sha": "9aa8c3f33a08e1bcaf821940883aa7d70aa6c13c", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-16_y.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-16_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-16_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-16_y.c?ref=2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43", "patch": "@@ -0,0 +1,34 @@\n+#include <stdarg.h>\n+\n+#include \"compat-common.h\"\n+\n+/* Turn off checking for variable arguments with -DSKIPVA.  */\n+#ifdef SKIPVA\n+const int test_va = 0;\n+#else\n+const int test_va = 1;\n+#endif\n+\n+#include \"fp-struct-defs.h\"\n+#include \"fp-struct-init.h\"\n+#include \"fp-struct-test-by-value-y.h\"\n+\n+DEFS(cf,_Complex float)\n+INITS(cf, _Complex float)\n+\n+TEST(Scf1, _Complex float)\n+TEST(Scf2, _Complex float)\n+TEST(Scf3, _Complex float)\n+TEST(Scf4, _Complex float)\n+TEST(Scf5, _Complex float)\n+TEST(Scf6, _Complex float)\n+TEST(Scf7, _Complex float)\n+TEST(Scf8, _Complex float)\n+TEST(Scf9, _Complex float)\n+TEST(Scf10, _Complex float)\n+TEST(Scf11, _Complex float)\n+TEST(Scf12, _Complex float)\n+TEST(Scf13, _Complex float)\n+TEST(Scf14, _Complex float)\n+TEST(Scf15, _Complex float)\n+TEST(Scf16, _Complex float)"}, {"sha": "3d97146b309bf6d70f1d70ac59e64cf1e5d421e7", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-17_main.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-17_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-17_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-17_main.c?ref=2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43", "patch": "@@ -0,0 +1,14 @@\n+/* Test structures passed by value, including to a function with a\n+   variable-length argument lists.  All struct members are of type\n+   _Complex double.  */\n+\n+extern void struct_by_value_17_x (void);\n+extern void exit (int);\n+int fails;\n+\n+int\n+main ()\n+{\n+  struct_by_value_17_x ();\n+  exit (0);\n+}"}, {"sha": "624cc34df60c2a4322c148f0e495097b684300b0", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-17_x.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-17_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-17_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-17_x.c?ref=2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43", "patch": "@@ -0,0 +1,55 @@\n+#include \"compat-common.h\"\n+\n+#include \"fp-struct-defs.h\"\n+#include \"fp-struct-check.h\"\n+#include \"fp-struct-test-by-value-x.h\"\n+\n+DEFS(cd, _Complex double)\n+CHECKS(cd, _Complex double)\n+\n+TEST(Scd1, _Complex double)\n+TEST(Scd2, _Complex double)\n+TEST(Scd3, _Complex double)\n+TEST(Scd4, _Complex double)\n+TEST(Scd5, _Complex double)\n+TEST(Scd6, _Complex double)\n+TEST(Scd7, _Complex double)\n+TEST(Scd8, _Complex double)\n+TEST(Scd9, _Complex double)\n+TEST(Scd10, _Complex double)\n+TEST(Scd11, _Complex double)\n+TEST(Scd12, _Complex double)\n+TEST(Scd13, _Complex double)\n+TEST(Scd14, _Complex double)\n+TEST(Scd15, _Complex double)\n+TEST(Scd16, _Complex double)\n+\n+#undef T\n+\n+void\n+struct_by_value_17_x ()\n+{\n+#define T(TYPE, MTYPE) testit##TYPE ();\n+\n+T(Scd1, _Complex double)\n+T(Scd2, _Complex double)\n+T(Scd3, _Complex double)\n+T(Scd4, _Complex double)\n+T(Scd5, _Complex double)\n+T(Scd6, _Complex double)\n+T(Scd7, _Complex double)\n+T(Scd8, _Complex double)\n+T(Scd9, _Complex double)\n+T(Scd10, _Complex double)\n+T(Scd11, _Complex double)\n+T(Scd12, _Complex double)\n+T(Scd13, _Complex double)\n+T(Scd14, _Complex double)\n+T(Scd15, _Complex double)\n+T(Scd16, _Complex double)\n+\n+if (fails != 0)\n+  abort ();\n+\n+#undef T\n+}"}, {"sha": "f8e1a6aca064876338c84dc136b0e3564b885b47", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-17_y.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-17_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-17_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-17_y.c?ref=2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43", "patch": "@@ -0,0 +1,34 @@\n+#include <stdarg.h>\n+\n+#include \"compat-common.h\"\n+\n+/* Turn off checking for variable arguments with -DSKIPVA.  */\n+#ifdef SKIPVA\n+const int test_va = 0;\n+#else\n+const int test_va = 1;\n+#endif\n+\n+#include \"fp-struct-defs.h\"\n+#include \"fp-struct-init.h\"\n+#include \"fp-struct-test-by-value-y.h\"\n+\n+DEFS(cd,_Complex double)\n+INITS(cd, _Complex double)\n+\n+TEST(Scd1, _Complex double)\n+TEST(Scd2, _Complex double)\n+TEST(Scd3, _Complex double)\n+TEST(Scd4, _Complex double)\n+TEST(Scd5, _Complex double)\n+TEST(Scd6, _Complex double)\n+TEST(Scd7, _Complex double)\n+TEST(Scd8, _Complex double)\n+TEST(Scd9, _Complex double)\n+TEST(Scd10, _Complex double)\n+TEST(Scd11, _Complex double)\n+TEST(Scd12, _Complex double)\n+TEST(Scd13, _Complex double)\n+TEST(Scd14, _Complex double)\n+TEST(Scd15, _Complex double)\n+TEST(Scd16, _Complex double)"}, {"sha": "8a4889cc0978cda427d8dca8b878f14903d20bac", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-18_main.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-18_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-18_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-18_main.c?ref=2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43", "patch": "@@ -0,0 +1,14 @@\n+/* Test structures passed by value, including to a function with a\n+   variable-length argument lists.  All struct members are of type\n+   _Complex long double.  */\n+\n+extern void struct_by_value_18_x (void);\n+extern void exit (int);\n+int fails;\n+\n+int\n+main ()\n+{\n+  struct_by_value_18_x ();\n+  exit (0);\n+}"}, {"sha": "ec02c568de91f312c7a6ad95429b6a1e15f32e7a", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-18_x.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-18_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-18_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-18_x.c?ref=2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43", "patch": "@@ -0,0 +1,55 @@\n+#include \"compat-common.h\"\n+\n+#include \"fp-struct-defs.h\"\n+#include \"fp-struct-check.h\"\n+#include \"fp-struct-test-by-value-x.h\"\n+\n+DEFS(cld, _Complex long double)\n+CHECKS(cld, _Complex long double)\n+\n+TEST(Scld1, _Complex long double)\n+TEST(Scld2, _Complex long double)\n+TEST(Scld3, _Complex long double)\n+TEST(Scld4, _Complex long double)\n+TEST(Scld5, _Complex long double)\n+TEST(Scld6, _Complex long double)\n+TEST(Scld7, _Complex long double)\n+TEST(Scld8, _Complex long double)\n+TEST(Scld9, _Complex long double)\n+TEST(Scld10, _Complex long double)\n+TEST(Scld11, _Complex long double)\n+TEST(Scld12, _Complex long double)\n+TEST(Scld13, _Complex long double)\n+TEST(Scld14, _Complex long double)\n+TEST(Scld15, _Complex long double)\n+TEST(Scld16, _Complex long double)\n+\n+#undef T\n+\n+void\n+struct_by_value_18_x ()\n+{\n+#define T(TYPE, MTYPE) testit##TYPE ();\n+\n+T(Scld1, _Complex long double)\n+T(Scld2, _Complex long double)\n+T(Scld3, _Complex long double)\n+T(Scld4, _Complex long double)\n+T(Scld5, _Complex long double)\n+T(Scld6, _Complex long double)\n+T(Scld7, _Complex long double)\n+T(Scld8, _Complex long double)\n+T(Scld9, _Complex long double)\n+T(Scld10, _Complex long double)\n+T(Scld11, _Complex long double)\n+T(Scld12, _Complex long double)\n+T(Scld13, _Complex long double)\n+T(Scld14, _Complex long double)\n+T(Scld15, _Complex long double)\n+T(Scld16, _Complex long double)\n+\n+if (fails != 0)\n+  abort ();\n+\n+#undef T\n+}"}, {"sha": "662419326b91fe8b0a2c448c092c7e90c7e24041", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-18_y.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-18_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-18_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-18_y.c?ref=2f1c3e4934cac0582dc50a20b6ea6ee6fbdf4e43", "patch": "@@ -0,0 +1,34 @@\n+#include <stdarg.h>\n+\n+#include \"compat-common.h\"\n+\n+/* Turn off checking for variable arguments with -DSKIPVA.  */\n+#ifdef SKIPVA\n+const int test_va = 0;\n+#else\n+const int test_va = 1;\n+#endif\n+\n+#include \"fp-struct-defs.h\"\n+#include \"fp-struct-init.h\"\n+#include \"fp-struct-test-by-value-y.h\"\n+\n+DEFS(cld,_Complex long double)\n+INITS(cld, _Complex long double)\n+\n+TEST(Scld1, _Complex long double)\n+TEST(Scld2, _Complex long double)\n+TEST(Scld3, _Complex long double)\n+TEST(Scld4, _Complex long double)\n+TEST(Scld5, _Complex long double)\n+TEST(Scld6, _Complex long double)\n+TEST(Scld7, _Complex long double)\n+TEST(Scld8, _Complex long double)\n+TEST(Scld9, _Complex long double)\n+TEST(Scld10, _Complex long double)\n+TEST(Scld11, _Complex long double)\n+TEST(Scld12, _Complex long double)\n+TEST(Scld13, _Complex long double)\n+TEST(Scld14, _Complex long double)\n+TEST(Scld15, _Complex long double)\n+TEST(Scld16, _Complex long double)"}]}