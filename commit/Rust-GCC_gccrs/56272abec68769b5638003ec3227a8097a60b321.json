{"sha": "56272abec68769b5638003ec3227a8097a60b321", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYyNzJhYmVjNjg3NjliNTYzODAwM2VjMzIyN2E4MDk3YTYwYjMyMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-21T11:40:32Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-21T11:40:32Z"}, "message": "[multiple changes]\n\n2011-11-21  Pascal Obry  <obry@adacore.com>\n\n\t* s-taprop-linux.adb (Initialize_Lock): Do not allocate a cond\n\tattribute as not needed.\n\n2011-11-21  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_prag.adb: Minor reformatting.\n\n2011-11-21  Pascal Obry  <obry@adacore.com>\n\n\t* gnat_rm.texi: Document restriction for stdcall convention on\n\tdispatching calls.\n\nFrom-SVN: r181565", "tree": {"sha": "472c0a6c566ce139de8f0a3714aec19afce4a8bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/472c0a6c566ce139de8f0a3714aec19afce4a8bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56272abec68769b5638003ec3227a8097a60b321", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56272abec68769b5638003ec3227a8097a60b321", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56272abec68769b5638003ec3227a8097a60b321", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56272abec68769b5638003ec3227a8097a60b321/comments", "author": null, "committer": null, "parents": [{"sha": "a5dd23a728109134f3eea1272cb7edaba389f5c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5dd23a728109134f3eea1272cb7edaba389f5c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5dd23a728109134f3eea1272cb7edaba389f5c6"}], "stats": {"total": 39, "additions": 31, "deletions": 8}, "files": [{"sha": "4ba28bdbdefe22d018e488bf187d634d4b7a5e24", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56272abec68769b5638003ec3227a8097a60b321/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56272abec68769b5638003ec3227a8097a60b321/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=56272abec68769b5638003ec3227a8097a60b321", "patch": "@@ -1,3 +1,17 @@\n+2011-11-21  Pascal Obry  <obry@adacore.com>\n+\n+\t* s-taprop-linux.adb (Initialize_Lock): Do not allocate a cond\n+\tattribute as not needed.\n+\n+2011-11-21  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_prag.adb: Minor reformatting.\n+\n+2011-11-21  Pascal Obry  <obry@adacore.com>\n+\n+\t* gnat_rm.texi: Document restriction for stdcall convention on\n+\tdispatching calls.\n+\n 2011-11-21  Pascal Obry  <obry@adacore.com>\n \n \t* sem_prag.adb (Process_Convention): A dispatching call cannot"}, {"sha": "00e0543e3d8de9e447abdc1e16a0b6158da51c1c", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56272abec68769b5638003ec3227a8097a60b321/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56272abec68769b5638003ec3227a8097a60b321/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=56272abec68769b5638003ec3227a8097a60b321", "patch": "@@ -9633,7 +9633,8 @@ separate section on Intrinsic Subprograms.\n @item Stdcall\n Stdcall (used for Windows implementations only).  This convention correspond\n to the WINAPI (previously called Pascal convention) C/C++ convention under\n-Windows.  A function with this convention cleans the stack before exit.\n+Windows.  A routine with this convention cleans the stack before\n+exit. This pragma cannot be applied to a dispatching call.\n @item DLL\n Synonym for Stdcall\n @item Win32"}, {"sha": "6773aaa1a5464befca7767a278f24994eff5fc2d", "filename": "gcc/ada/s-taprop-linux.adb", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56272abec68769b5638003ec3227a8097a60b321/gcc%2Fada%2Fs-taprop-linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56272abec68769b5638003ec3227a8097a60b321/gcc%2Fada%2Fs-taprop-linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-linux.adb?ref=56272abec68769b5638003ec3227a8097a60b321", "patch": "@@ -1069,8 +1069,7 @@ package body System.Task_Primitives.Operations is\n    ----------------\n \n    procedure Initialize (S : in out Suspension_Object) is\n-      Cond_Attr : aliased pthread_condattr_t;\n-      Result    : Interfaces.C.int;\n+      Result : Interfaces.C.int;\n \n    begin\n       --  Initialize internal state (always to False (RM D.10(6)))\n@@ -1090,10 +1089,7 @@ package body System.Task_Primitives.Operations is\n \n       --  Initialize internal condition variable\n \n-      Result := pthread_condattr_init (Cond_Attr'Access);\n-      pragma Assert (Result = 0);\n-\n-      Result := pthread_cond_init (S.CV'Access, Cond_Attr'Access);\n+      Result := pthread_cond_init (S.CV'Access, null);\n \n       pragma Assert (Result = 0 or else Result = ENOMEM);\n "}, {"sha": "5211d88815d6c4dfd239fcce1e06c59de501523f", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56272abec68769b5638003ec3227a8097a60b321/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56272abec68769b5638003ec3227a8097a60b321/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=56272abec68769b5638003ec3227a8097a60b321", "patch": "@@ -3524,13 +3524,25 @@ package body Sem_Prag is\n               (\"second argument of pragma% must be a subprogram\", Arg2);\n          end if;\n \n-         --  For Stdcall, a subprogram, variable or subprogram type is required\n+         --  Stdcall case\n \n          if C = Convention_Stdcall\n+\n+            --  Subprogram is allowed, but not a generic subprogram, and not a\n+            --  dispatching operation. A dispatching subprogram cannot be used\n+            --  to interface to the Win32 API, so in fact this check does not\n+            --  impose any effective restriction.\n+\n            and then\n              ((not Is_Subprogram (E) and then not Is_Generic_Subprogram (E))\n                 or else Is_Dispatching_Operation (E))\n+\n+            --  A variable is OK\n+\n            and then Ekind (E) /= E_Variable\n+\n+           --  An access to subprogram is also allowed\n+\n            and then not\n              (Is_Access_Type (E)\n                and then Ekind (Designated_Type (E)) = E_Subprogram_Type)"}]}