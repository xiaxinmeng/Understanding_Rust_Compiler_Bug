{"sha": "5391688acc997e26375e42340cea885fa6ad0d7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM5MTY4OGFjYzk5N2UyNjM3NWU0MjM0MGNlYTg4NWZhNmFkMGQ3ZA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2021-08-04T16:40:09Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2021-08-04T16:40:09Z"}, "message": "IBM Z: Get rid of vec merge unspec\n\nThis patch gets rid of the unspecs we were using for the vector merge\ninstruction and replaces it with generic rtx.\n\ngcc/ChangeLog:\n\n\t* config/s390/s390-modes.def: Add more vector modes to support\n\tconcatenation of two vectors.\n\t* config/s390/s390-protos.h (s390_expand_merge_perm_const): Add\n\tprototype.\n\t(s390_expand_merge): Likewise.\n\t* config/s390/s390.c (s390_expand_merge_perm_const): New function.\n\t(s390_expand_merge): New function.\n\t* config/s390/s390.md (UNSPEC_VEC_MERGEH, UNSPEC_VEC_MERGEL):\n\tRemove constant definitions.\n\t* config/s390/vector.md (V_HW_2): Add mode iterators.\n\t(VI_HW_4, V_HW_4): Rename VI_HW_4 to V_HW_4.\n\t(vec_2x_nelts, vec_2x_wide): New mode attributes.\n\t(*vmrhb, *vmrlb, *vmrhh, *vmrlh, *vmrhf, *vmrlf, *vmrhg, *vmrlg):\n\tNew pattern definitions.\n\t(vec_widen_umult_lo_<mode>, vec_widen_umult_hi_<mode>)\n\t(vec_widen_smult_lo_<mode>, vec_widen_smult_hi_<mode>)\n\t(vec_unpacks_lo_v4sf, vec_unpacks_hi_v4sf, vec_unpacks_lo_v2df)\n\t(vec_unpacks_hi_v2df): Adjust expanders to emit non-unspec RTX for\n\tvec merge.\n\t* config/s390/vx-builtins.md (V_HW_4): Remove mode iterator. Now\n\tin vector.md.\n\t(vec_mergeh<mode>, vec_mergel<mode>): Use s390_expand_merge to\n\temit vec merge pattern.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/s390/vector/long-double-asm-in-out-hard-fp-reg.c:\n\tInstead of vpdi with 0 and 5 vmrlg and vmrhg are used now.\n\t* gcc.target/s390/vector/long-double-asm-inout-hard-fp-reg.c: Likewise.\n\t* gcc.target/s390/zvector/vec-types.h: New test.\n\t* gcc.target/s390/zvector/vec_merge.c: New test.", "tree": {"sha": "b86cf1cbbf6dea1e4b43baef59da730cb2878c7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b86cf1cbbf6dea1e4b43baef59da730cb2878c7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5391688acc997e26375e42340cea885fa6ad0d7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5391688acc997e26375e42340cea885fa6ad0d7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5391688acc997e26375e42340cea885fa6ad0d7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5391688acc997e26375e42340cea885fa6ad0d7d/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63834c84d43fc2eeeaa054c5e24d1e468e9eddab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63834c84d43fc2eeeaa054c5e24d1e468e9eddab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63834c84d43fc2eeeaa054c5e24d1e468e9eddab"}], "stats": {"total": 433, "additions": 369, "deletions": 64}, "files": [{"sha": "245c2b811d49c0a30b8ec355294bc094babd46ae", "filename": "gcc/config/s390/s390-modes.def", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5391688acc997e26375e42340cea885fa6ad0d7d/gcc%2Fconfig%2Fs390%2Fs390-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5391688acc997e26375e42340cea885fa6ad0d7d/gcc%2Fconfig%2Fs390%2Fs390-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-modes.def?ref=5391688acc997e26375e42340cea885fa6ad0d7d", "patch": "@@ -259,14 +259,17 @@ CC_MODE (CCVFANY);\n \n /* Vector modes.  */\n \n-VECTOR_MODES (INT, 2);        /*                 V2QI */\n-VECTOR_MODES (INT, 4);        /*            V4QI V2HI */\n-VECTOR_MODES (INT, 8);        /*       V8QI V4HI V2SI */\n-VECTOR_MODES (INT, 16);       /* V16QI V8HI V4SI V2DI */\n+VECTOR_MODES (INT, 2);        /*                       V2QI */\n+VECTOR_MODES (INT, 4);        /*                  V4QI V2HI */\n+VECTOR_MODES (INT, 8);        /*             V8QI V4HI V2SI */\n+VECTOR_MODES (INT, 16);       /*       V16QI V8HI V4SI V2DI */\n+VECTOR_MODES (INT, 32);       /* V32QI V16HI V8SI V4DI V2TI */\n \n VECTOR_MODE (FLOAT, SF, 2);   /* V2SF */\n VECTOR_MODE (FLOAT, SF, 4);   /* V4SF */\n+VECTOR_MODE (FLOAT, SF, 8);   /* V8SF */\n VECTOR_MODE (FLOAT, DF, 2);   /* V2DF */\n+VECTOR_MODE (FLOAT, DF, 4);   /* V4DF */\n \n VECTOR_MODE (INT, QI, 1);     /* V1QI */\n VECTOR_MODE (INT, HI, 1);     /* V1HI */"}, {"sha": "4b03c6e99f5e5b3558849f9d444a6daf328562ce", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5391688acc997e26375e42340cea885fa6ad0d7d/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5391688acc997e26375e42340cea885fa6ad0d7d/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=5391688acc997e26375e42340cea885fa6ad0d7d", "patch": "@@ -122,6 +122,8 @@ extern void s390_expand_vec_compare_cc (rtx, enum rtx_code, rtx, rtx, bool);\n extern enum rtx_code s390_reverse_condition (machine_mode, enum rtx_code);\n extern void s390_expand_vcond (rtx, rtx, rtx, enum rtx_code, rtx, rtx);\n extern void s390_expand_vec_init (rtx, rtx);\n+extern rtx s390_expand_merge_perm_const (machine_mode, bool);\n+extern void s390_expand_merge (rtx, rtx, rtx, bool);\n extern rtx s390_build_signbit_mask (machine_mode);\n extern rtx s390_return_addr_rtx (int, rtx);\n extern rtx s390_back_chain_rtx (void);"}, {"sha": "3f4521ebf8e12a6b20532680a01b02723f3b9b33", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5391688acc997e26375e42340cea885fa6ad0d7d/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5391688acc997e26375e42340cea885fa6ad0d7d/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=5391688acc997e26375e42340cea885fa6ad0d7d", "patch": "@@ -7014,6 +7014,42 @@ s390_expand_vec_init (rtx target, rtx vals)\n     }\n }\n \n+/* Return a parallel of constant integers to be used as permutation\n+   vector for a vector merge operation in MODE.  If HIGH_P is true the\n+   left-most elements of the source vectors are merged otherwise the\n+   right-most elements.  */\n+rtx\n+s390_expand_merge_perm_const (machine_mode mode, bool high_p)\n+{\n+  int nelts = GET_MODE_NUNITS (mode);\n+  rtx perm[16];\n+  int addend = high_p ? 0 : nelts;\n+\n+  for (int i = 0; i < nelts; i++)\n+    perm[i] = GEN_INT ((i + addend) / 2 + (i % 2) * nelts);\n+\n+  return gen_rtx_PARALLEL (VOIDmode, gen_rtvec_v (nelts, perm));\n+}\n+\n+/* Emit RTL to implement a vector merge operation of SRC1 and SRC2\n+   which creates the result in TARGET. HIGH_P determines whether a\n+   merge hi or lo will be generated.  */\n+void\n+s390_expand_merge (rtx target, rtx src1, rtx src2, bool high_p)\n+{\n+  machine_mode mode = GET_MODE (target);\n+  opt_machine_mode opt_mode_2x = mode_for_vector (GET_MODE_INNER (mode),\n+\t\t\t\t\t\t  2 * GET_MODE_NUNITS (mode));\n+  gcc_assert (opt_mode_2x.exists ());\n+  machine_mode mode_double_nelts = opt_mode_2x.require ();\n+  rtx constv = s390_expand_merge_perm_const (mode, high_p);\n+  src1 = force_reg (GET_MODE (src1), src1);\n+  src2 = force_reg (GET_MODE (src2), src2);\n+  rtx x = gen_rtx_VEC_CONCAT (mode_double_nelts, src1, src2);\n+  x = gen_rtx_VEC_SELECT (mode, x, constv);\n+  emit_insn (gen_rtx_SET (target, x));\n+}\n+\n /* Emit a vector constant that contains 1s in each element's sign bit position\n    and 0s in other positions.  MODE is the desired constant's mode.  */\n extern rtx"}, {"sha": "d896faee0fb3cfd3d8b19547e24c9eddbaf89380", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5391688acc997e26375e42340cea885fa6ad0d7d/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5391688acc997e26375e42340cea885fa6ad0d7d/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=5391688acc997e26375e42340cea885fa6ad0d7d", "patch": "@@ -158,8 +158,6 @@\n    UNSPEC_VEC_LOAD_BNDRY\n    UNSPEC_VEC_LOAD_LEN\n    UNSPEC_VEC_LOAD_LEN_R\n-   UNSPEC_VEC_MERGEH\n-   UNSPEC_VEC_MERGEL\n    UNSPEC_VEC_PACK\n    UNSPEC_VEC_PACK_SATURATE\n    UNSPEC_VEC_PACK_SATURATE_CC"}, {"sha": "51c63328896779c197be99c8a3fd2d7803f233d6", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 175, "deletions": 33, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5391688acc997e26375e42340cea885fa6ad0d7d/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5391688acc997e26375e42340cea885fa6ad0d7d/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=5391688acc997e26375e42340cea885fa6ad0d7d", "patch": "@@ -50,7 +50,10 @@\n (define_mode_iterator VI_HW_HSD [V8HI  V4SI V2DI])\n (define_mode_iterator VI_HW_HS  [V8HI  V4SI])\n (define_mode_iterator VI_HW_QH  [V16QI V8HI])\n-(define_mode_iterator VI_HW_4   [V4SI V4SF])\n+\n+; Directly supported vector modes with a certain number of elements\n+(define_mode_iterator V_HW_2   [V2DI V2DF])\n+(define_mode_iterator V_HW_4   [V4SI V4SF])\n \n ; All integer vector modes supported in a vector register + TImode\n (define_mode_iterator VIT [V1QI V2QI V4QI V8QI V16QI V1HI V2HI V4HI V8HI V1SI V2SI V4SI V1DI V2DI V1TI TI])\n@@ -163,21 +166,37 @@\n \t\t       (DF \"d\") (V1DF \"d\") (V2DF \"d\")\n \t\t       (TF \"x\") (V1TF \"x\")])\n \n-; Vector with doubled element size.\n+; Vector with widened element size but half the number of elements.\n (define_mode_attr vec_double [(V1QI \"V1HI\") (V2QI \"V1HI\") (V4QI \"V2HI\") (V8QI \"V4HI\") (V16QI \"V8HI\")\n \t\t\t      (V1HI \"V1SI\") (V2HI \"V1SI\") (V4HI \"V2SI\") (V8HI \"V4SI\")\n \t\t\t      (V1SI \"V1DI\") (V2SI \"V1DI\") (V4SI \"V2DI\")\n \t\t\t      (V1DI \"V1TI\") (V2DI \"V1TI\")\n \t\t\t      (V1SF \"V1DF\") (V2SF \"V1DF\") (V4SF \"V2DF\")])\n \n-; Vector with half the element size.\n+; Vector with shrinked element size but twice the number of elements.\n (define_mode_attr vec_half [(V1HI \"V2QI\") (V2HI \"V4QI\") (V4HI \"V8QI\") (V8HI \"V16QI\")\n \t\t\t    (V1SI \"V2HI\") (V2SI \"V4HI\") (V4SI \"V8HI\")\n \t\t\t    (V1DI \"V2SI\") (V2DI \"V4SI\")\n \t\t\t    (V1TI \"V2DI\")\n \t\t\t    (V1DF \"V2SF\") (V2DF \"V4SF\")\n \t\t\t    (V1TF \"V1DF\")])\n \n+; Vector with twice the number of elements but same element size.\n+(define_mode_attr vec_2x_nelts [(V1QI \"V2QI\") (V2QI \"V4QI\") (V4QI \"V8QI\") (V8QI \"V16QI\") (V16QI \"V32QI\")\n+\t\t\t\t(V1HI \"V2HI\") (V2HI \"V4HI\") (V4HI \"V8HI\") (V8HI \"V16HI\")\n+\t\t\t\t(V1SI \"V2SI\") (V2SI \"V4SI\") (V4SI \"V8SI\")\n+\t\t\t\t(V1DI \"V2DI\") (V2DI \"V4DI\")\n+\t\t\t\t(V1SF \"V2SF\") (V2SF \"V4SF\") (V4SF \"V8SF\")\n+\t\t\t\t(V1DF \"V2DF\") (V2DF \"V4DF\")])\n+\n+; Vector with widened element size and the same number of elements.\n+(define_mode_attr vec_2x_wide [(V1QI \"V1HI\") (V2QI \"V2HI\") (V4QI \"V4HI\") (V8QI \"V8HI\") (V16QI \"V16HI\")\n+\t\t\t       (V1HI \"V1SI\") (V2HI \"V2SI\") (V4HI \"V4SI\") (V8HI \"V8SI\")\n+\t\t\t       (V1SI \"V1DI\") (V2SI \"V2DI\") (V4SI \"V4DI\")\n+\t\t\t       (V1DI \"V1TI\") (V2DI \"V2TI\")\n+\t\t\t       (V1SF \"V1DF\") (V2SF \"V2DF\") (V4SF \"V4DF\")\n+\t\t\t       (V1DF \"V1TF\") (V2DF \"V2TF\")])\n+\n ; Vector with half the element size AND half the number of elements.\n (define_mode_attr vec_halfhalf\n   [(V2HI \"V2QI\") (V4HI \"V4QI\") (V8HI \"V8QI\")\n@@ -532,8 +551,8 @@\n })\n \n (define_insn \"*vec_vllezlf<mode>\"\n-  [(set (match_operand:VI_HW_4              0 \"register_operand\" \"=v\")\n-\t(vec_concat:VI_HW_4\n+  [(set (match_operand:V_HW_4              0 \"register_operand\" \"=v\")\n+\t(vec_concat:V_HW_4\n \t (vec_concat:<vec_halfnumelts>\n \t  (match_operand:<non_vec> 1 \"memory_operand\"    \"R\")\n \t  (const_int 0))\n@@ -748,6 +767,109 @@\n   \"vperm\\t%v0,%v1,%v2,%v3\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n+(define_insn \"*vmrhb\"\n+  [(set (match_operand:V16QI                     0 \"register_operand\" \"=v\")\n+        (vec_select:V16QI\n+\t  (vec_concat:V32QI (match_operand:V16QI 1 \"register_operand\"  \"v\")\n+\t\t\t    (match_operand:V16QI 2 \"register_operand\"  \"v\"))\n+\t  (parallel [(const_int 0) (const_int 16)\n+\t\t     (const_int 1) (const_int 17)\n+\t\t     (const_int 2) (const_int 18)\n+\t\t     (const_int 3) (const_int 19)\n+\t\t     (const_int 4) (const_int 20)\n+\t\t     (const_int 5) (const_int 21)\n+\t\t     (const_int 6) (const_int 22)\n+\t\t     (const_int 7) (const_int 23)])))]\n+  \"TARGET_VX\"\n+  \"vmrhb\\t%0,%1,%2\";\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+(define_insn \"*vmrlb\"\n+  [(set (match_operand:V16QI                     0 \"register_operand\" \"=v\")\n+        (vec_select:V16QI\n+\t  (vec_concat:V32QI (match_operand:V16QI 1 \"register_operand\"  \"v\")\n+\t\t\t    (match_operand:V16QI 2 \"register_operand\"  \"v\"))\n+\t  (parallel [(const_int  8) (const_int 24)\n+\t\t     (const_int  9) (const_int 25)\n+\t\t     (const_int 10) (const_int 26)\n+\t\t     (const_int 11) (const_int 27)\n+\t\t     (const_int 12) (const_int 28)\n+\t\t     (const_int 13) (const_int 29)\n+\t\t     (const_int 14) (const_int 30)\n+\t\t     (const_int 15) (const_int 31)])))]\n+  \"TARGET_VX\"\n+  \"vmrlb\\t%0,%1,%2\";\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+(define_insn \"*vmrhh\"\n+  [(set (match_operand:V8HI                     0 \"register_operand\" \"=v\")\n+        (vec_select:V8HI\n+\t  (vec_concat:V16HI (match_operand:V8HI 1 \"register_operand\"  \"v\")\n+\t\t\t    (match_operand:V8HI 2 \"register_operand\"  \"v\"))\n+\t  (parallel [(const_int 0) (const_int 8)\n+\t\t     (const_int 1) (const_int 9)\n+\t\t     (const_int 2) (const_int 10)\n+\t\t     (const_int 3) (const_int 11)])))]\n+  \"TARGET_VX\"\n+  \"vmrhh\\t%0,%1,%2\";\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+(define_insn \"*vmrlh\"\n+  [(set (match_operand:V8HI                     0 \"register_operand\" \"=v\")\n+        (vec_select:V8HI\n+\t  (vec_concat:V16HI (match_operand:V8HI 1 \"register_operand\"  \"v\")\n+\t\t\t    (match_operand:V8HI 2 \"register_operand\"  \"v\"))\n+\t  (parallel [(const_int 4) (const_int 12)\n+\t\t     (const_int 5) (const_int 13)\n+\t\t     (const_int 6) (const_int 14)\n+\t\t     (const_int 7) (const_int 15)])))]\n+  \"TARGET_VX\"\n+  \"vmrlh\\t%0,%1,%2\";\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+(define_insn \"*vmrhf\"\n+  [(set (match_operand:V_HW_4                              0 \"register_operand\" \"=v\")\n+        (vec_select:V_HW_4\n+\t  (vec_concat:<vec_2x_nelts> (match_operand:V_HW_4 1 \"register_operand\"  \"v\")\n+\t\t\t\t     (match_operand:V_HW_4 2 \"register_operand\"  \"v\"))\n+\t  (parallel [(const_int 0) (const_int 4)\n+\t\t     (const_int 1) (const_int 5)])))]\n+  \"TARGET_VX\"\n+  \"vmrhf\\t%0,%1,%2\";\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+(define_insn \"*vmrlf\"\n+  [(set (match_operand:V_HW_4                              0 \"register_operand\" \"=v\")\n+        (vec_select:V_HW_4\n+\t  (vec_concat:<vec_2x_nelts> (match_operand:V_HW_4 1 \"register_operand\"  \"v\")\n+\t\t\t\t     (match_operand:V_HW_4 2 \"register_operand\"  \"v\"))\n+\t  (parallel [(const_int 2) (const_int 6)\n+\t\t     (const_int 3) (const_int 7)])))]\n+  \"TARGET_VX\"\n+  \"vmrlf\\t%0,%1,%2\";\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+(define_insn \"*vmrhg\"\n+  [(set (match_operand:V_HW_2                              0 \"register_operand\" \"=v\")\n+        (vec_select:V_HW_2\n+\t  (vec_concat:<vec_2x_nelts> (match_operand:V_HW_2 1 \"register_operand\"  \"v\")\n+\t\t\t\t     (match_operand:V_HW_2 2 \"register_operand\"  \"v\"))\n+\t  (parallel [(const_int 0) (const_int 2)])))]\n+  \"TARGET_VX\"\n+  \"vmrhg\\t%0,%1,%2\";\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+(define_insn \"*vmrlg\"\n+  [(set (match_operand:V_HW_2                              0 \"register_operand\" \"=v\")\n+        (vec_select:V_HW_2\n+\t  (vec_concat:<vec_2x_nelts> (match_operand:V_HW_2 1 \"register_operand\"  \"v\")\n+\t\t\t\t     (match_operand:V_HW_2 2 \"register_operand\"  \"v\"))\n+\t  (parallel [(const_int 1) (const_int 3)])))]\n+  \"TARGET_VX\"\n+  \"vmrlg\\t%0,%1,%2\";\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+\n (define_insn \"*tf_to_fprx2_0\"\n   [(set (subreg:DF (match_operand:FPRX2 0 \"nonimmediate_operand\" \"+f\") 0)\n \t(subreg:DF (match_operand:TF    1 \"general_operand\"       \"v\") 0))]\n@@ -1271,12 +1393,14 @@\n \t(unspec:<vec_double> [(match_dup 1) (match_dup 2)]\n \t\t\t     UNSPEC_VEC_UMULT_ODD))\n    (set (match_operand:<vec_double>                 0 \"register_operand\" \"\")\n-\t(unspec:<vec_double> [(match_dup 3) (match_dup 4)]\n-\t\t\t     UNSPEC_VEC_MERGEL))]\n+        (vec_select:<vec_double>\n+\t (vec_concat:<vec_2x_wide> (match_dup 3) (match_dup 4))\n+\t (match_dup 5)))]\n   \"TARGET_VX\"\n  {\n    operands[3] = gen_reg_rtx (<vec_double>mode);\n    operands[4] = gen_reg_rtx (<vec_double>mode);\n+   operands[5] = s390_expand_merge_perm_const (<vec_double>mode, false);\n  })\n \n (define_expand \"vec_widen_umult_hi_<mode>\"\n@@ -1288,12 +1412,14 @@\n \t(unspec:<vec_double> [(match_dup 1) (match_dup 2)]\n \t\t\t     UNSPEC_VEC_UMULT_ODD))\n    (set (match_operand:<vec_double>                 0 \"register_operand\" \"\")\n-\t(unspec:<vec_double> [(match_dup 3) (match_dup 4)]\n-\t\t\t     UNSPEC_VEC_MERGEH))]\n+        (vec_select:<vec_double>\n+\t (vec_concat:<vec_2x_wide> (match_dup 3) (match_dup 4))\n+\t (match_dup 5)))]\n   \"TARGET_VX\"\n  {\n    operands[3] = gen_reg_rtx (<vec_double>mode);\n    operands[4] = gen_reg_rtx (<vec_double>mode);\n+   operands[5] = s390_expand_merge_perm_const (<vec_double>mode, true);\n  })\n \n (define_expand \"vec_widen_smult_lo_<mode>\"\n@@ -1305,12 +1431,14 @@\n \t(unspec:<vec_double> [(match_dup 1) (match_dup 2)]\n \t\t\t     UNSPEC_VEC_SMULT_ODD))\n    (set (match_operand:<vec_double>                 0 \"register_operand\" \"\")\n-\t(unspec:<vec_double> [(match_dup 3) (match_dup 4)]\n-\t\t\t     UNSPEC_VEC_MERGEL))]\n+        (vec_select:<vec_double>\n+\t (vec_concat:<vec_2x_wide> (match_dup 3) (match_dup 4))\n+\t (match_dup 5)))]\n   \"TARGET_VX\"\n  {\n    operands[3] = gen_reg_rtx (<vec_double>mode);\n    operands[4] = gen_reg_rtx (<vec_double>mode);\n+   operands[5] = s390_expand_merge_perm_const (<vec_double>mode, false);\n  })\n \n (define_expand \"vec_widen_smult_hi_<mode>\"\n@@ -1322,12 +1450,14 @@\n \t(unspec:<vec_double> [(match_dup 1) (match_dup 2)]\n \t\t\t     UNSPEC_VEC_SMULT_ODD))\n    (set (match_operand:<vec_double>                 0 \"register_operand\" \"\")\n-\t(unspec:<vec_double> [(match_dup 3) (match_dup 4)]\n-\t\t\t     UNSPEC_VEC_MERGEH))]\n+        (vec_select:<vec_double>\n+\t (vec_concat:<vec_2x_wide> (match_dup 3) (match_dup 4))\n+\t (match_dup 5)))]\n   \"TARGET_VX\"\n  {\n    operands[3] = gen_reg_rtx (<vec_double>mode);\n    operands[4] = gen_reg_rtx (<vec_double>mode);\n+   operands[5] = s390_expand_merge_perm_const (<vec_double>mode, true);\n  })\n \n ; vec_widen_ushiftl_hi\n@@ -2166,29 +2296,35 @@\n \n (define_expand \"vec_unpacks_lo_v4sf\"\n   [(set (match_dup 2)\n-\t(unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"v\")\n-\t\t      (match_dup 1)]\n-\t\t     UNSPEC_VEC_MERGEL))\n-   (set (match_operand:V2DF               0 \"register_operand\" \"=v\")\n+        (vec_select:V4SF\n+\t (vec_concat:V8SF (match_operand:V4SF 1 \"register_operand\" \"\") (match_dup 1))\n+\t (match_dup 3)))\n+   (set (match_operand:V2DF                   0 \"register_operand\" \"\")\n \t(float_extend:V2DF\n \t (vec_select:V2SF\n \t  (match_dup 2)\n \t  (parallel [(const_int 0) (const_int 2)]))))]\n   \"TARGET_VX\"\n-{ operands[2] = gen_reg_rtx(V4SFmode); })\n+{\n+  operands[2] = gen_reg_rtx(V4SFmode);\n+  operands[3] = s390_expand_merge_perm_const (V4SFmode, false);\n+})\n \n (define_expand \"vec_unpacks_hi_v4sf\"\n   [(set (match_dup 2)\n-\t(unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"v\")\n-\t\t      (match_dup 1)]\n-\t\t     UNSPEC_VEC_MERGEH))\n-   (set (match_operand:V2DF               0 \"register_operand\" \"=v\")\n+        (vec_select:V4SF\n+\t (vec_concat:V8SF (match_operand:V4SF 1 \"register_operand\" \"\") (match_dup 1))\n+\t (match_dup 3)))\n+   (set (match_operand:V2DF                   0 \"register_operand\" \"\")\n \t(float_extend:V2DF\n \t (vec_select:V2SF\n \t  (match_dup 2)\n \t  (parallel [(const_int 0) (const_int 2)]))))]\n   \"TARGET_VX\"\n-{ operands[2] = gen_reg_rtx(V4SFmode); })\n+{\n+  operands[2] = gen_reg_rtx(V4SFmode);\n+  operands[3] = s390_expand_merge_perm_const (V4SFmode, true);\n+})\n \n \n ; double -> long double\n@@ -2204,29 +2340,35 @@\n \n (define_expand \"vec_unpacks_lo_v2df\"\n   [(set (match_dup 2)\n-\t(unspec:V2DF [(match_operand:V2DF 1 \"register_operand\" \"v\")\n-\t\t      (match_dup 1)]\n-\t\t     UNSPEC_VEC_MERGEL))\n-   (set (match_operand:V1TF               0 \"register_operand\" \"=v\")\n+        (vec_select:V2DF\n+\t (vec_concat:V4DF (match_operand:V2DF 1 \"register_operand\" \"\") (match_dup 1))\n+\t (match_dup 3)))\n+   (set (match_operand:V1TF                   0 \"register_operand\" \"\")\n \t(float_extend:V1TF\n \t (vec_select:V1DF\n \t  (match_dup 2)\n \t  (parallel [(const_int 0)]))))]\n   \"TARGET_VXE\"\n-{ operands[2] = gen_reg_rtx (V2DFmode); })\n+{\n+  operands[2] = gen_reg_rtx (V2DFmode);\n+  operands[3] = s390_expand_merge_perm_const (V2DFmode, false);\n+})\n \n (define_expand \"vec_unpacks_hi_v2df\"\n   [(set (match_dup 2)\n-\t(unspec:V2DF [(match_operand:V2DF 1 \"register_operand\" \"v\")\n-\t\t      (match_dup 1)]\n-\t\t     UNSPEC_VEC_MERGEH))\n-   (set (match_operand:V1TF               0 \"register_operand\" \"=v\")\n+        (vec_select:V2DF\n+\t (vec_concat:V4DF (match_operand:V2DF 1 \"register_operand\" \"\") (match_dup 1))\n+\t (match_dup 3)))\n+   (set (match_operand:V1TF                   0 \"register_operand\" \"\")\n \t(float_extend:V1TF\n \t (vec_select:V1DF\n \t  (match_dup 2)\n \t  (parallel [(const_int 0)]))))]\n   \"TARGET_VXE\"\n-{ operands[2] = gen_reg_rtx (V2DFmode); })\n+{\n+  operands[2] = gen_reg_rtx (V2DFmode);\n+  operands[3] = s390_expand_merge_perm_const (V2DFmode, true);\n+})\n \n \n ; 2 x v2df -> 1 x v4sf"}, {"sha": "5abe43b9e536a20fccf7a1bcf0dcfe15a10b7b8a", "filename": "gcc/config/s390/vx-builtins.md", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5391688acc997e26375e42340cea885fa6ad0d7d/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5391688acc997e26375e42340cea885fa6ad0d7d/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvx-builtins.md?ref=5391688acc997e26375e42340cea885fa6ad0d7d", "patch": "@@ -22,7 +22,7 @@\n \n (define_mode_iterator V_HW_32_64 [V4SI V2DI V2DF (V4SF \"TARGET_VXE\")])\n (define_mode_iterator VI_HW_SD [V4SI V2DI])\n-(define_mode_iterator V_HW_4 [V4SI V4SF])\n+\n ; Full size vector modes with more than one element which are directly supported in vector registers by the hardware.\n (define_mode_iterator VEC_HW  [V16QI V8HI V4SI V2DI V2DF (V4SF \"TARGET_VXE\")])\n (define_mode_iterator VECF_HW [(V4SF \"TARGET_VXE\") V2DF])\n@@ -232,28 +232,27 @@\n   [(set_attr \"op_type\" \"VRS,VRX,VSI\")])\n \n \n-; FIXME: The following two patterns might using vec_merge. But what is\n-; the canonical form: (vec_select (vec_merge op0 op1)) or (vec_merge\n-; (vec_select op0) (vec_select op1)\n ; vmrhb, vmrhh, vmrhf, vmrhg\n-(define_insn \"vec_mergeh<mode>\"\n-  [(set (match_operand:V_128_NOSINGLE                         0 \"register_operand\" \"=v\")\n-\t(unspec:V_128_NOSINGLE [(match_operand:V_128_NOSINGLE 1 \"register_operand\"  \"v\")\n-\t\t\t(match_operand:V_128_NOSINGLE         2 \"register_operand\"  \"v\")]\n-\t\t       UNSPEC_VEC_MERGEH))]\n+(define_expand \"vec_mergeh<mode>\"\n+  [(match_operand:V_128_NOSINGLE 0 \"register_operand\" \"\")\n+   (match_operand:V_128_NOSINGLE 1 \"register_operand\" \"\")\n+   (match_operand:V_128_NOSINGLE 2 \"register_operand\" \"\")]\n   \"TARGET_VX\"\n-  \"vmrh<bhfgq>\\t%v0,%1,%2\"\n-  [(set_attr \"op_type\" \"VRR\")])\n+{\n+  s390_expand_merge (operands[0], operands[1], operands[2], true);\n+  DONE;\n+})\n \n ; vmrlb, vmrlh, vmrlf, vmrlg\n-(define_insn \"vec_mergel<mode>\"\n-  [(set (match_operand:V_128_NOSINGLE                         0 \"register_operand\" \"=v\")\n-\t(unspec:V_128_NOSINGLE [(match_operand:V_128_NOSINGLE 1 \"register_operand\"  \"v\")\n-\t\t\t(match_operand:V_128_NOSINGLE         2 \"register_operand\"  \"v\")]\n-\t\t     UNSPEC_VEC_MERGEL))]\n+(define_expand \"vec_mergel<mode>\"\n+  [(match_operand:V_128_NOSINGLE 0 \"register_operand\" \"\")\n+   (match_operand:V_128_NOSINGLE 1 \"register_operand\" \"\")\n+   (match_operand:V_128_NOSINGLE 2 \"register_operand\" \"\")]\n   \"TARGET_VX\"\n-  \"vmrl<bhfgq>\\t%v0,%1,%2\"\n-  [(set_attr \"op_type\" \"VRR\")])\n+{\n+  s390_expand_merge (operands[0], operands[1], operands[2], false);\n+  DONE;\n+})\n \n \n ; Vector pack"}, {"sha": "a89dd460c699a72f00dd4c0ecc59c7f3b8ffdf2c", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-asm-in-out-hard-fp-reg.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5391688acc997e26375e42340cea885fa6ad0d7d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-asm-in-out-hard-fp-reg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5391688acc997e26375e42340cea885fa6ad0d7d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-asm-in-out-hard-fp-reg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-asm-in-out-hard-fp-reg.c?ref=5391688acc997e26375e42340cea885fa6ad0d7d", "patch": "@@ -16,13 +16,13 @@ sqxbr (long double x)\n   return out;\n }\n \n-/* Ideally `vpdi %v3,%v1,%v3,5` should be optimized away, but the compiler\n+/* Ideally `vmrlg %v3,%v1,%v3` should be optimized away, but the compiler\n  * can't do it, because the UNSPEC pattern operates on the whole register.\n  * Using the SUBREG pattern solves this problem, but it's fragile.\n  */\n-/* { dg-final { scan-assembler-times {\\n\\tvpdi\\t%v2,%v0,%v2,5\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\n\\tvpdi\\t%v1,%v1,%v3,0\\n} 2 } } */\n-/* { dg-final { scan-assembler-times {\\n\\tvpdi\\t%v3,%v1,%v3,5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\n\\tvmrlg\\t%v2,%v0,%v2\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\n\\tvmrhg\\t%v1,%v1,%v3\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\n\\tvmrlg\\t%v3,%v1,%v3\\n} 1 } } */\n \n int\n main (void)"}, {"sha": "dd894c8136bb9afeda0059dc29d07d8752b6dac2", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-asm-inout-hard-fp-reg.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5391688acc997e26375e42340cea885fa6ad0d7d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-asm-inout-hard-fp-reg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5391688acc997e26375e42340cea885fa6ad0d7d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-asm-inout-hard-fp-reg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-asm-inout-hard-fp-reg.c?ref=5391688acc997e26375e42340cea885fa6ad0d7d", "patch": "@@ -15,12 +15,12 @@ sqxbr (long double x)\n   return inout;\n }\n \n-/* Ideally there should be just one `vpdi %v6,%v4,%v6,5`, but the compiler\n+/* Ideally there should be just one `vmrlg %v6,%v4,%v6`, but the compiler\n  * can't optimize it away, because the UNSPEC pattern operates on the whole\n  * register.  Using the SUBREG pattern solves this problem, but it's fragile.\n  */\n-/* { dg-final { scan-assembler-times {\\n\\tvpdi\\t%v6,%v4,%v6,5\\n} 2 } } */\n-/* { dg-final { scan-assembler-times {\\n\\tvpdi\\t%v4,%v4,%v6,0\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\n\\tvmrlg\\t%v6,%v4,%v6\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\n\\tvmrhg\\t%v4,%v4,%v6\\n} 2 } } */\n \n int\n main (void)"}, {"sha": "35bd2a5b7b197f9016faf12eb5b8951bd8e25977", "filename": "gcc/testsuite/gcc.target/s390/zvector/vec-types.h", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5391688acc997e26375e42340cea885fa6ad0d7d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5391688acc997e26375e42340cea885fa6ad0d7d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-types.h?ref=5391688acc997e26375e42340cea885fa6ad0d7d", "patch": "@@ -0,0 +1,37 @@\n+#ifndef VEC_TYPES_H\n+#define VEC_TYPES_H 1\n+\n+#include <vecintrin.h>\n+\n+typedef __vector signed char v16qi;\n+typedef __vector unsigned char uv16qi;\n+\n+typedef __vector signed short v8hi;\n+typedef __vector unsigned short uv8hi;\n+\n+typedef __vector signed int v4si;\n+typedef __vector unsigned int uv4si;\n+\n+typedef __vector signed long long v2di;\n+typedef __vector unsigned long long uv2di;\n+\n+#if __SIZEOF_INT128__ == 16\n+typedef __vector __int128_t v1ti;\n+#endif\n+\n+typedef __vector double v2df;\n+typedef __vector long double v1tf;\n+\n+#if __ARCH__ >= 12\n+typedef __vector float v4sf;\n+#endif\n+\n+#define GEN_SEQ_VEC(VEC_TYPE, ADDEND)\t\t\t\t\t\\\n+  ({ VEC_TYPE dummy;\t\t\t\t\t\t\t\\\n+    const int elts = sizeof(VEC_TYPE) / sizeof(dummy[0]);\t\t\\\n+    typeof(dummy[0]) __attribute__((aligned(8))) ar[elts];\t\t\\\n+    for (int i = 0; i < elts; i++)\t\t\t\t\t\\\n+      ar[i] = (typeof(dummy[0]))(i + (ADDEND));\t\t\t\t\\\n+    *(VEC_TYPE*)ar;})\n+\n+#endif"}, {"sha": "348d1f68f804c3f4dc367b5164bbfc00f6aa91bc", "filename": "gcc/testsuite/gcc.target/s390/zvector/vec_merge.c", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5391688acc997e26375e42340cea885fa6ad0d7d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec_merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5391688acc997e26375e42340cea885fa6ad0d7d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec_merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec_merge.c?ref=5391688acc997e26375e42340cea885fa6ad0d7d", "patch": "@@ -0,0 +1,88 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -march=z14 -mzvector --save-temps\" } */\n+/* { dg-do run { target { s390_z14_hw } } } */\n+\n+/* { dg-final { scan-assembler-times \"\\tvmrhb\\t\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\tvmrlb\\t\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\tvmrhh\\t\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\tvmrlh\\t\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\tvmrhf\\t\" 3 } } */\n+/* { dg-final { scan-assembler-times \"\\tvmrlf\\t\" 3 } } */\n+/* { dg-final { scan-assembler-times \"\\tvmrhg\\t\" 3 } } */\n+/* { dg-final { scan-assembler-times \"\\tvmrlg\\t\" 3 } } */\n+\n+#include \"vec-types.h\"\n+#include <vecintrin.h>\n+\n+#define GEN_MERGE(VEC_TYPE, HILO)\t\t\t\t\t\\\n+  VEC_TYPE __attribute__((noinline))\t\t\t\t\t\\\n+  merge_##HILO##_##VEC_TYPE(VEC_TYPE a, VEC_TYPE b) {\t\t\t\\\n+    return vec_merge##HILO (a, b); }\n+\n+GEN_MERGE(v16qi, l)\n+GEN_MERGE(v16qi, h)\n+GEN_MERGE(uv16qi, l)\n+GEN_MERGE(uv16qi, h)\n+\n+GEN_MERGE(v8hi, l)\n+GEN_MERGE(v8hi, h)\n+GEN_MERGE(uv8hi, l)\n+GEN_MERGE(uv8hi, h)\n+\n+GEN_MERGE(v4si, l)\n+GEN_MERGE(v4si, h)\n+GEN_MERGE(uv4si, l)\n+GEN_MERGE(uv4si, h)\n+\n+GEN_MERGE(v4sf, l)\n+GEN_MERGE(v4sf, h)\n+\n+GEN_MERGE(v2di, l)\n+GEN_MERGE(v2di, h)\n+GEN_MERGE(uv2di, l)\n+GEN_MERGE(uv2di, h)\n+\n+GEN_MERGE(v2df, l)\n+GEN_MERGE(v2df, h)\n+\n+\n+#define CHECK_MERGE_LO(VEC_TYPE, SRC1, SRC2)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    VEC_TYPE v = merge_l_##VEC_TYPE ((SRC1), (SRC2));\t\t\t\\\n+    int elts = sizeof(v) / sizeof(v[0]);\t\t\t\t\\\n+    for (int i = 0; i < elts; i++)\t\t\t\t\t\\\n+      if (v[i] != (i + elts) / 2 + (i % 2) * elts)\t\t\t\\\n+\t__builtin_abort();\t\t\t\t\t\t\\\n+  }\n+\n+#define CHECK_MERGE_HI(VEC_TYPE, SRC1, SRC2)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    VEC_TYPE v = merge_h_##VEC_TYPE ((SRC1), (SRC2));\t\t\t\\\n+    int elts = sizeof(v) / sizeof(v[0]);\t\t\t\t\\\n+    for (int i = 0; i < elts; i++)\t\t\t\t\t\\\n+      if (v[i] != i / 2 + (i % 2) * elts)\t\t\t\t\\\n+\t__builtin_abort();\t\t\t\t\t\t\\\n+  }\n+\n+#define CHECK_MERGE(VEC_TYPE)\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    VEC_TYPE a = GEN_SEQ_VEC (VEC_TYPE, 0);\t\t\t\t\\\n+    VEC_TYPE b = GEN_SEQ_VEC (VEC_TYPE, sizeof(VEC_TYPE) / sizeof(a[0])); \\\n+    CHECK_MERGE_LO (VEC_TYPE, a, b);\t\t\t\t\t\\\n+    CHECK_MERGE_HI (VEC_TYPE, a, b);\t\t\t\t\t\\\n+  }\n+\n+int\n+main ()\n+{\n+  CHECK_MERGE(v16qi);\n+  CHECK_MERGE(uv16qi);\n+  CHECK_MERGE(v8hi);\n+  CHECK_MERGE(uv8hi);\n+  CHECK_MERGE(v4si);\n+  CHECK_MERGE(uv4si);\n+  CHECK_MERGE(v4sf);\n+  CHECK_MERGE(v2di);\n+  CHECK_MERGE(uv2di);\n+  CHECK_MERGE(v2df);\n+}"}]}