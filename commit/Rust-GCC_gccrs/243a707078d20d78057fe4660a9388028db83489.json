{"sha": "243a707078d20d78057fe4660a9388028db83489", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQzYTcwNzA3OGQyMGQ3ODA1N2ZlNDY2MGE5Mzg4MDI4ZGI4MzQ4OQ==", "commit": {"author": {"name": "David O'Brien", "email": "obrien@FreeBSD.org", "date": "2001-11-10T01:07:17Z"}, "committer": {"name": "David O'Brien", "email": "obrien@gcc.gnu.org", "date": "2001-11-10T01:07:17Z"}, "message": "config.gcc: Add FreeBSD/IA-64 target.\n\n2001-11-07  David O'Brien  <obrien@FreeBSD.org>\n\t* config.gcc: Add FreeBSD/IA-64 target. Expand config/i64/elf.h headers.\n\t* config/i64/ia64.h (TARGET_VERSION,ASM_SPEC,LINK_SPEC): Remove,\n\tthey are OS specific.  Use CPP_CPU_SPEC rather than CPP_PREDEFINES,\n\tso OS specific files and use CPP_PREDEFINES for their needs.\n\t* config/i64/elf.h (TARGET_VERSION): Add.  Also, move inclusion of\n\ttarget headers to tm_file.\n\t* config/ia64/aix.h (TARGET_VERSION): Likewise.\n\t* config/ia64/hpux.h (TARGET_VERSION): Likewise.\n\t* config/ia64/linux.h (TARGET_VERSION): Likewise.\n\t(FUNCTION_PROFILER): Remove.\n\t* config/ia64/ia64.h (FUNCTION_PROFILER): Update defintion using the\n\tversion in config/ia64/linux.h.\n\t* config/ia64/freebsd.h: New file.\n\t* config/freebsd.h: Tidy up.\n\t(_USING_CONFIG_FREEBSD): Define.\n\t(FBSD_CPP_PREDEFINES): Add __KPRINTF_ATTRIBUTE__.\n\t(FBSD_CPP_SPEC): Define generic FreeBSD spec.\n\t(FBSD_STARTFILE_SPEC): Likewise.\n\t(FBSD_ENDFILE_SPEC): Likewise.\n\t(FBSD_LIB_SPEC): Likewise.\n\t(WCHAR_UNSIGNED): Undefine, FreeBSD's wchars are signed.\n\t(USER_LABEL_PREFIX): Define to ELF compatible value as some CPU headers\n\tset an ELF-improper one.\n\nApproved by:  Richard Henderson <rth@redhat.com>\n              Message-ID: <20011109100352.A6186@redhat.com>\n\nFrom-SVN: r46909", "tree": {"sha": "577a7f314d943cdee4114f2e22033a938b8b2ced", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/577a7f314d943cdee4114f2e22033a938b8b2ced"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/243a707078d20d78057fe4660a9388028db83489", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/243a707078d20d78057fe4660a9388028db83489", "html_url": "https://github.com/Rust-GCC/gccrs/commit/243a707078d20d78057fe4660a9388028db83489", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/243a707078d20d78057fe4660a9388028db83489/comments", "author": null, "committer": null, "parents": [{"sha": "b8e42321fb18771c9b259b8c21d683cd9acafa21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8e42321fb18771c9b259b8c21d683cd9acafa21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8e42321fb18771c9b259b8c21d683cd9acafa21"}], "stats": {"total": 386, "additions": 272, "deletions": 114}, "files": [{"sha": "4d6eceac279a60eef45510096f33042c9355a75a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243a707078d20d78057fe4660a9388028db83489/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243a707078d20d78057fe4660a9388028db83489/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=243a707078d20d78057fe4660a9388028db83489", "patch": "@@ -1,3 +1,29 @@\n+2001-11-07  David O'Brien  <obrien@FreeBSD.org>\n+\n+\t* config.gcc: Add FreeBSD/IA-64 target. Expand config/i64/elf.h headers.\n+\t* config/i64/ia64.h (TARGET_VERSION,ASM_SPEC,LINK_SPEC): Remove,\n+\tthey are OS specific.  Use CPP_CPU_SPEC rather than CPP_PREDEFINES,\n+\tso OS specific files and use CPP_PREDEFINES for their needs.\n+\t* config/i64/elf.h (TARGET_VERSION): Add.  Also, move inclusion of\n+\ttarget headers to tm_file.\n+\t* config/ia64/aix.h (TARGET_VERSION): Likewise.\n+\t* config/ia64/hpux.h (TARGET_VERSION): Likewise.\n+\t* config/ia64/linux.h (TARGET_VERSION): Likewise.\n+\t(FUNCTION_PROFILER): Remove.\n+\t* config/ia64/ia64.h (FUNCTION_PROFILER): Update defintion using the\n+\tversion in config/ia64/linux.h.\n+\t* config/ia64/freebsd.h: New file.\n+\t* config/freebsd.h: Tidy up.\n+\t(_USING_CONFIG_FREEBSD): Define.\n+\t(FBSD_CPP_PREDEFINES): Add __KPRINTF_ATTRIBUTE__.\n+\t(FBSD_CPP_SPEC): Define generic FreeBSD spec.\n+\t(FBSD_STARTFILE_SPEC): Likewise.\n+\t(FBSD_ENDFILE_SPEC): Likewise.\n+\t(FBSD_LIB_SPEC): Likewise.\n+\t(WCHAR_UNSIGNED): Undefine, FreeBSD's wchars are signed.\n+\t(USER_LABEL_PREFIX): Define to ELF compatible value as some CPU headers\n+\tset an ELF-improper one.\n+\n 2001-11-09  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* pa.c (emit_move_sequence): Use cint_ok_for_move to check whether a"}, {"sha": "97304e21f5b510a94a6855f2dac2878d508bd96c", "filename": "gcc/config.gcc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243a707078d20d78057fe4660a9388028db83489/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243a707078d20d78057fe4660a9388028db83489/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=243a707078d20d78057fe4660a9388028db83489", "patch": "@@ -337,6 +337,7 @@ case $machine in\n \t*) echo 'Please update *-*-freebsd* in gcc/config.gcc'; exit 1;;\n \tesac\n \ttmake_file=t-freebsd\n+\txmake_file=none\n \txm_defines=POSIX\n \tcase x${enable_threads} in\n \txno) fbsd_tm_file=\"${fbsd_tm_file} freebsd-nthr.h\";;\n@@ -1531,7 +1532,7 @@ ia64*-*-aix*)\n \ttarget_cpu_default=\"MASK_GNU_AS|MASK_GNU_LD\"\n \t;;\n ia64*-*-elf*)\n-\ttm_file=ia64/elf.h\n+\ttm_file=\"${tm_file} elfos.h ia64/sysv4.h ia64/elf.h\"\n \ttmake_file=\"ia64/t-ia64\"\n \ttarget_cpu_default=\"0\"\n \tif test x$gas = xyes\n@@ -1544,6 +1545,12 @@ ia64*-*-elf*)\n \tfi\n \tfloat_format=i386\n \t;;\n+ia64*-*-freebsd*)\n+\ttm_file=\"${tm_file} ${fbsd_tm_file} elfos.h ia64/sysv4.h ia64/freebsd.h\"\n+\ttarget_cpu_default=\"MASK_GNU_AS|MASK_GNU_LD\"\n+\ttmake_file=\"${tmake_file} ia64/t-ia64\"\n+\tfloat_format=i386\n+\t;;\n ia64*-*-linux*)\n \ttm_file=\"${tm_file} elfos.h svr4.h linux.h ia64/sysv4.h ia64/linux.h\"\n \ttmake_file=\"t-slibgcc-elf-ver t-linux ia64/t-ia64 ia64/t-glibc\""}, {"sha": "949be895c80bee6ca59e999fc8b10e38659572f0", "filename": "gcc/config/freebsd.h", "status": "modified", "additions": 99, "deletions": 35, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243a707078d20d78057fe4660a9388028db83489/gcc%2Fconfig%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243a707078d20d78057fe4660a9388028db83489/gcc%2Fconfig%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffreebsd.h?ref=243a707078d20d78057fe4660a9388028db83489", "patch": "@@ -27,6 +27,9 @@ Boston, MA 02111-1307, USA.  */\n    Loren J. Rittle <ljrittle@acm.org>.  */\n \n \n+/* To help with rs6000/sysv4.h carnal knowledge problem.  */\n+#define _USING_CONFIG_FREEBSD 1\n+\n /* This defines which switch letters take arguments.  On FreeBSD, most of\n    the normal cases (defined in gcc.c) apply, and we also have -h* and\n    -z* options (for the linker) (coming from SVR4).\n@@ -38,41 +41,43 @@ Boston, MA 02111-1307, USA.  */\n     || (CHAR) == 'z' /* ignored by ld */\t\t\t\t\\\n     || (CHAR) == 'R')\n \n-#undef SWITCH_TAKES_ARG\n+#undef  SWITCH_TAKES_ARG\n #define SWITCH_TAKES_ARG(CHAR) (FBSD_SWITCH_TAKES_ARG(CHAR))\n \n+/* This defines which multi-letter switches take arguments.  */\n+\n #define FBSD_WORD_SWITCH_TAKES_ARG(STR)\t\t\t\t\t\\\n   (DEFAULT_WORD_SWITCH_TAKES_ARG (STR)\t\t\t\t\t\\\n    || !strcmp ((STR), \"rpath\") || !strcmp ((STR), \"rpath-link\")\t\t\\\n    || !strcmp ((STR), \"soname\") || !strcmp ((STR), \"defsym\") \t\t\\\n    || !strcmp ((STR), \"assert\") || !strcmp ((STR), \"dynamic-linker\"))\n \n-#undef WORD_SWITCH_TAKES_ARG\n+#undef  WORD_SWITCH_TAKES_ARG\n #define WORD_SWITCH_TAKES_ARG(STR) (FBSD_WORD_SWITCH_TAKES_ARG(STR))\n \n #if FBSD_MAJOR == 6\n #define FBSD_CPP_PREDEFINES \\\n-  \"-D__FreeBSD__=6 -Dunix -D__ELF__ -Asystem=unix -Asystem=bsd -Asystem=FreeBSD\"\n+  \"-D__FreeBSD__=6 -Dunix -D__ELF__ -D__KPRINTF_ATTRIBUTE__ -Asystem=unix -Asystem=bsd -Asystem=FreeBSD\"\n #endif\n \n #if FBSD_MAJOR == 5\n #define FBSD_CPP_PREDEFINES \\\n-  \"-D__FreeBSD__=5 -Dunix -D__ELF__ -Asystem=unix -Asystem=bsd -Asystem=FreeBSD\"\n+  \"-D__FreeBSD__=5 -Dunix -D__ELF__ -D__KPRINTF_ATTRIBUTE__ -Asystem=unix -Asystem=bsd -Asystem=FreeBSD\"\n #endif\n \n #if FBSD_MAJOR == 4\n #define FBSD_CPP_PREDEFINES \\\n-  \"-D__FreeBSD__=4 -Dunix -D__ELF__ -Asystem=unix -Asystem=bsd -Asystem=FreeBSD\"\n+  \"-D__FreeBSD__=4 -Dunix -D__ELF__ -D__KPRINTF_ATTRIBUTE__ -Asystem=unix -Asystem=bsd -Asystem=FreeBSD\"\n #endif\n \n #if FBSD_MAJOR == 3\n #define FBSD_CPP_PREDEFINES \\\n-  \"-D__FreeBSD__=3 -Dunix -D__ELF__ -Asystem=unix -Asystem=bsd -Asystem=FreeBSD\"\n+  \"-D__FreeBSD__=3 -Dunix -D__ELF__ -D__KPRINTF_ATTRIBUTE__ -Asystem=unix -Asystem=bsd -Asystem=FreeBSD\"\n #endif\n \n #ifndef FBSD_CPP_PREDEFINES\n #define FBSD_CPP_PREDEFINES \\\n-  \"-D__FreeBSD__   -Dunix -D__ELF__ -Asystem=unix -Asystem=bsd -Asystem=FreeBSD\"\n+  \"-D__FreeBSD__   -Dunix -D__ELF__ -D__KPRINTF_ATTRIBUTE__ -Asystem=unix -Asystem=bsd -Asystem=FreeBSD\"\n #endif\n \n #undef  CPP_PREDEFINES\n@@ -81,11 +86,35 @@ Boston, MA 02111-1307, USA.  */\n /* Provide a CPP_SPEC appropriate for FreeBSD.  We just deal with the GCC \n    option `-posix', and PIC issues.  */\n \n-#undef CPP_SPEC\n-#define CPP_SPEC \"%(cpp_cpu)\t\t\t\t\t\t\\\n+#define FBSD_CPP_SPEC \"\t\t\t\t\t\t\t\\\n+  %(cpp_cpu)\t\t\t\t\t\t\t\t\\\n   %{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__}\t\t\\\n   %{posix:-D_POSIX_SOURCE}\"\n \n+#undef  CPP_SPEC\n+#define CPP_SPEC FBSD_CPP_SPEC\n+\n+/* Provide a STARTFILE_SPEC appropriate for FreeBSD.  Here we add\n+   the magical crtbegin.o file (see crtstuff.c) which provides part \n+\tof the support for getting C++ file-scope static object constructed \n+\tbefore entering `main'. */\n+   \n+#define FBSD_STARTFILE_SPEC \\\n+  \"%{!shared: \\\n+     %{pg:gcrt1.o%s} %{!pg:%{p:gcrt1.o%s} \\\n+\t\t       %{!p:%{profile:gcrt1.o%s} \\\n+\t\t\t %{!profile:crt1.o%s}}}} \\\n+   crti.o%s %{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}\"\n+\n+/* Provide a ENDFILE_SPEC appropriate for FreeBSD.  Here we tack on\n+   the magical crtend.o file (see crtstuff.c) which provides part of \n+\tthe support for getting C++ file-scope static object constructed \n+\tbefore entering `main', followed by a normal \"finalizer\" file, \n+\t`crtn.o'.  */\n+\n+#define FBSD_ENDFILE_SPEC \\\n+  \"%{!shared:crtend.o%s} %{shared:crtendS.o%s} crtn.o%s\"\n+\n /* Provide a LIB_SPEC appropriate for FreeBSD as configured and as\n    required by the user-land thread model.  Before __FreeBSD_version\n    500016, select the appropriate libc, depending on whether we're\n@@ -100,9 +129,12 @@ Boston, MA 02111-1307, USA.  */\n    misconfigured the gcc bootstrap but are later consulting FreeBSD\n    manual pages that refer to the mythical -pthread option).  */\n \n-#undef  LIB_SPEC\n+/* Provide a LIB_SPEC appropriate for FreeBSD.  Just select the appropriate\n+   libc, depending on whether we're doing profiling or need threads support.\n+   (simular to the default, except no -lg, and no -p).  */\n+\n #ifdef FBSD_NO_THREADS\n-#define LIB_SPEC \"\t\t\t\t\t\t\t\\\n+#define FBSD_LIB_SPEC \"\t\t\t\t\t\t\t\\\n   %{pthread: %eThe -pthread option is only supported on FreeBSD when gcc \\\n is built with the --enable-threads configure-time option.}\t\t\\\n   %{!shared:\t\t\t\t\t\t\t\t\\\n@@ -111,13 +143,13 @@ is built with the --enable-threads configure-time option.}\t\t\\\n   }\"\n #else\n #if FBSD_MAJOR >= 5\n-#define LIB_SPEC \"\t\t\t\t\t\t\t\\\n+#define FBSD_LIB_SPEC \"\t\t\t\t\t\t\t\\\n   %{!shared:\t\t\t\t\t\t\t\t\\\n     %{!pg: %{pthread:-lc_r} -lc}\t\t\t\t\t\\\n     %{pg:  %{pthread:-lc_r_p} -lc_p}\t\t\t\t\t\\\n   }\"\n #else\n-#define LIB_SPEC \"\t\t\t\t\t\t\t\\\n+#define FBSD_LIB_SPEC \"\t\t\t\t\t\t\t\\\n   %{!shared:\t\t\t\t\t\t\t\t\\\n     %{!pg:\t\t\t\t\t\t\t\t\\\n       %{!pthread:-lc}\t\t\t\t\t\t\t\\\n@@ -129,49 +161,81 @@ is built with the --enable-threads configure-time option.}\t\t\\\n #endif\n #endif\n \n-/* Code generation parameters.  */\n+#undef  LIB_SPEC\n+#define LIB_SPEC FBSD_LIB_SPEC\n+\n \n-/* Make gcc agree with <machine/ansi.h>.  */\n+/************************[  Target stuff  ]***********************************/\n \n-#undef WCHAR_TYPE\n+/* Don't assume anything about the header files.  */\n+#undef  NO_IMPLICIT_EXTERN_C\n+#define NO_IMPLICIT_EXTERN_C\n+\n+/* Allow #sccs in preprocessor.  */\n+#undef  SCCS_DIRECTIVE\n+#define SCCS_DIRECTIVE\n+\n+/* Make gcc agree with FreeBSD's standard headers (<machine/ansi.h>, etc...)  */\n+\n+#undef  WCHAR_TYPE\n #define WCHAR_TYPE \"int\"\n \n-#undef WCHAR_UNSIGNED\n+#undef  WCHAR_UNSIGNED\n #define WCHAR_UNSIGNED 0\n \n+/* Code generation parameters.  */\n+\n /* Don't default to pcc-struct-return, because gcc is the only compiler, and\n    we want to retain compatibility with older gcc versions\n    (even though the SVR4 ABI for the i386 says that records and unions are\n    returned in memory).  */\n-#undef DEFAULT_PCC_STRUCT_RETURN\n+#undef  DEFAULT_PCC_STRUCT_RETURN\n #define DEFAULT_PCC_STRUCT_RETURN 0\n \n-/* Ensure we the configuration knows our system correctly so we can link with\n-   libraries compiled with the native cc.  */\n+/* Use periods rather than dollar signs in special g++ assembler names.\n+   This ensures the configuration knows our system correctly so we can link\n+   with libraries compiled with the native cc.  */\n #undef NO_DOLLAR_IN_LABEL\n \n-/* The GNU tools operate better with dwarf2 than stabs.  Since we\n-   don't have any native tools to be compatible with, default to\n-   dwarf2.  */\n-#undef PREFERRED_DEBUGGING_TYPE\n-#define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n+/* The prefix to add to user-visible assembler symbols.\n+   For System V Release 4 & ELF the convention is *not* to prepend a leading\n+   underscore onto user-level symbol names. Some CPU files such as\n+   config/sparc/sparc.h set this wrong for ELF.  */\n+\n+#undef  USER_LABEL_PREFIX\n+#define USER_LABEL_PREFIX \"\"\n+\n+/* Handle #pragma weak and #pragma pack.  */\n+#undef  HANDLE_SYSV_PRAGMA\n+#define HANDLE_SYSV_PRAGMA\n+\n+/* Use more efficient ``thunks'' to implement C++ vtables.  */\n+#undef DEFAULT_VTABLE_THUNKS\n+#define DEFAULT_VTABLE_THUNKS 1\n+\n+/************************[  Assembler stuff  ]********************************/\n \n-#undef IDENT_ASM_OP\n+#undef  IDENT_ASM_OP\n #define IDENT_ASM_OP \"\\t.ident\\t\"\n \n /* Output #ident as a .ident.  */\n-#undef ASM_OUTPUT_IDENT\n+\n+#undef  ASM_OUTPUT_IDENT\n #define ASM_OUTPUT_IDENT(FILE, NAME)\t\t\t\t\t\\\n   fprintf ((FILE), \"%s\\\"%s\\\"\\n\", IDENT_ASM_OP, (NAME));\n \n-/* Miscellaneous parameters.  */\n+/************************[  Debugger stuff  ]*********************************/\n \n-/* Don't assume anything about the header files.  */\n-#undef NO_IMPLICIT_EXTERN_C\n-#define NO_IMPLICIT_EXTERN_C\n+/* All ELF targets can support DWARF-2.  */\n+#undef  DWARF2_DEBUGGING_INFO\n+#define DWARF2_DEBUGGING_INFO\n \n-/* Allow #sccs in preprocessor.  */\n-#define SCCS_DIRECTIVE\n+/* This is BSD, so we want the DBX format.  */\n+#undef  DBX_DEBUGGING_INFO\n+#define DBX_DEBUGGING_INFO\n \n-/* Handle #pragma weak and #pragma pack.  */\n-#define HANDLE_SYSV_PRAGMA\n+/* Even though this is BSD, ELF and the GNU tools operates better with dwarf2\n+   than stabs.  Since we don't have any native tools to be compatible with,\n+   defaulting to dwarf2 is OK.  */\n+#undef  PREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG"}, {"sha": "7b9368316278ca3f60f0908109e85c579d7cdd3e", "filename": "gcc/config/ia64/aix.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243a707078d20d78057fe4660a9388028db83489/gcc%2Fconfig%2Fia64%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243a707078d20d78057fe4660a9388028db83489/gcc%2Fconfig%2Fia64%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Faix.h?ref=243a707078d20d78057fe4660a9388028db83489", "patch": "@@ -22,6 +22,11 @@ Boston, MA 02111-1307, USA.  */\n /* AIX5 (aka Monterey): a mix of AIX and UnixWare.  \n    This file is loosely based on ia64/linux.h. */\n \n+/* This macro is a C statement to print on `stderr' a string describing the\n+   particular machine description choice.  */\n+\n+#define TARGET_VERSION fprintf (stderr, \" (IA-64) AIX\");\n+\n #undef ASM_APP_ON\n #define ASM_APP_ON \"#APP\\n\"\n "}, {"sha": "af8c7a6b4e8e164d10540c0540d15d6424c6449c", "filename": "gcc/config/ia64/elf.h", "status": "modified", "additions": 39, "deletions": 4, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243a707078d20d78057fe4660a9388028db83489/gcc%2Fconfig%2Fia64%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243a707078d20d78057fe4660a9388028db83489/gcc%2Fconfig%2Fia64%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Felf.h?ref=243a707078d20d78057fe4660a9388028db83489", "patch": "@@ -1,9 +1,44 @@\n /* Definitions for embedded ia64-elf target.  */\n \n-/* TODO: convert includes to ${tm_file} list in config.gcc.  */\n-#include \"ia64/ia64.h\"\n-#include \"elfos.h\"\n-#include \"sysv4.h\"\n+/* This macro is a C statement to print on `stderr' a string describing the\n+   particular machine description choice.  */\n+\n+#define TARGET_VERSION fprintf (stderr, \" (IA-64) ELF\");\n+\n+/* Define this to be a string constant containing `-D' options to define the\n+   predefined macros that identify this machine and system.  These macros will\n+   be predefined unless the `-ansi' option is specified.  */\n+/* ??? This is undefed in svr4.h.  */\n+#define CPP_PREDEFINES \"-Dia64 -Amachine=ia64\"\n+\n+/* A C string constant that tells the GNU CC driver program options to pass to\n+   the assembler.  It can also specify how to translate options you give to GNU\n+   CC into options for GNU CC to pass to the assembler.  */\n+\n+#if ((TARGET_CPU_DEFAULT | TARGET_DEFAULT) & MASK_GNU_AS) != 0\n+/* GNU AS.  */\n+#define ASM_SPEC \\\n+  \"%{mno-gnu-as:-N so} %{!mno-gnu-as:-x} %{mconstant-gp} %{mauto-pic}\"\n+#else\n+/* Intel ias.  */\n+#define ASM_SPEC \\\n+  \"%{!mgnu-as:-N so} %{mgnu-as:-x} %{mconstant-gp:-M const_gp}\\\n+   %{mauto-pic:-M no_plabel}\"\n+#endif\n+\n+/* A C string constant that tells the GNU CC driver program options to pass to\n+   the linker.  It can also specify how to translate options you give to GNU CC\n+   into options for GNU CC to pass to the linker.  */\n+\n+/* The Intel linker does not support dynamic linking, so we need -dn.\n+   The Intel linker gives annoying messages unless -N so is used.  */\n+#if ((TARGET_CPU_DEFAULT | TARGET_DEFAULT) & MASK_GNU_LD) != 0\n+/* GNU LD.  */\n+#define LINK_SPEC \"%{mno-gnu-ld:-dn -N so}\"\n+#else\n+/* Intel ild.  */\n+#define LINK_SPEC \"%{!mgnu-ld:-dn -N so}\"\n+#endif\n \n /* svr4.h links with crti.o/crtn.o, but elfos.h does not.  We override elfos.h\n    so that we can use the standard ELF Unix method.  */"}, {"sha": "75cfc04f901ddcf72d33f7e6e759bf7f5b560ee6", "filename": "gcc/config/ia64/freebsd.h", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243a707078d20d78057fe4660a9388028db83489/gcc%2Fconfig%2Fia64%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243a707078d20d78057fe4660a9388028db83489/gcc%2Fconfig%2Fia64%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Ffreebsd.h?ref=243a707078d20d78057fe4660a9388028db83489", "patch": "@@ -0,0 +1,66 @@\n+/* Definitions for Intel IA-64 running FreeBSD using the ELF format\n+   Copyright (C) 2001 Free Software Foundation, Inc.\n+   Contributed by David E. O'Brien <obrien@FreeBSD.org> and BSDi.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+\n+#undef  LINK_SPEC\n+#define LINK_SPEC\t\t\t\t\t\t\t\\\n+ \"%{p:%e`-p' not supported; use `-pg' and gprof(1)}\t\t\t\\\n+  %{Wl,*:%*}\t\t\t\t\t\t\t\t\\\n+  %{assert*} %{R*} %{rpath*} %{defsym*}\t\t\t\t\t\\\n+  %{shared:-Bshareable %{h*} %{soname*}}\t\t\t\t\\\n+  %{symbolic:-Bsymbolic}\t\t\t\t\t\t\\\n+  %{!shared:\t\t\t\t\t\t\t\t\\\n+    %{!static:\t\t\t\t\t\t\t\t\\\n+      %{rdynamic:-export-dynamic}\t\t\t\t\t\\\n+      %{!dynamic-linker:-dynamic-linker /usr/libexec/ld-elf.so.1}}\t\\\n+    %{static:-Bstatic}}\"\n+\n+#undef  ASM_SPEC\n+#define ASM_SPEC \"-x %{mconstant-gp} %{mauto-pic}\"\n+\n+\n+/************************[  Target stuff  ]***********************************/\n+\n+/* Define the actual types of some ANSI-mandated types.  \n+   Needs to agree with <machine/ansi.h>.  GCC defaults come from c-decl.c,\n+   c-common.c, and config/<arch>/<arch>.h.  */\n+\n+/* Earilier headers may get this wrong for FreeBSD.\n+   We use the GCC defaults instead.  */\n+#undef WCHAR_TYPE\n+\n+#undef  WCHAR_UNSIGNED\n+#define WCHAR_UNSIGNED 0\n+\n+#undef  WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE 32\n+\n+#undef  TARGET_VERSION\n+#define TARGET_VERSION fprintf (stderr, \" (FreeBSD/IA-64 ELF)\");\n+\n+#define TARGET_ELF\t\t1\n+\n+#define DONT_USE_BUILTIN_SETJMP\n+#define JMP_BUF_SIZE  76\n+\n+/* Output any profiling code before the prologue.  */\n+\n+#undef  PROFILE_BEFORE_PROLOGUE\n+#define PROFILE_BEFORE_PROLOGUE 1"}, {"sha": "6fb8f87f33eb965e5a7005b0932c86adc6549124", "filename": "gcc/config/ia64/hpux.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243a707078d20d78057fe4660a9388028db83489/gcc%2Fconfig%2Fia64%2Fhpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243a707078d20d78057fe4660a9388028db83489/gcc%2Fconfig%2Fia64%2Fhpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fhpux.h?ref=243a707078d20d78057fe4660a9388028db83489", "patch": "@@ -20,6 +20,11 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n+/* This macro is a C statement to print on `stderr' a string describing the\n+   particular machine description choice.  */\n+\n+#define TARGET_VERSION fprintf (stderr, \" (IA-64) HP-UX\");\n+\n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \"\\\n   -D__IA64__ -D__ia64 -D__ia64__ -D__hpux -D__hpux__ -Dhpux -Dunix \\"}, {"sha": "baca9324755ccb0dcab1ea805d025bb4b6876f8e", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 19, "deletions": 51, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243a707078d20d78057fe4660a9388028db83489/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243a707078d20d78057fe4660a9388028db83489/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=243a707078d20d78057fe4660a9388028db83489", "patch": "@@ -31,11 +31,11 @@ Boston, MA 02111-1307, USA.  */\n \f\n /* Run-time target specifications */\n \n-/* Define this to be a string constant containing `-D' options to define the\n-   predefined macros that identify this machine and system.  These macros will\n-   be predefined unless the `-ansi' option is specified.  */\n-/* ??? This is undefed in svr4.h.  */\n-#define CPP_PREDEFINES \"-Dia64 -Amachine=ia64\"\n+#define CPP_CPU_SPEC \"\\\n+  -Acpu=ia64 -Amachine=ia64 \\\n+  %{!ansi:%{!std=c*:%{!std=i*:-Dia64}}} -D__ia64 -D__ia64__\"\n+\n+#define CC1_SPEC \"%(cc1_cpu) \"\n \n /* This declaration should be present.  */\n extern int target_flags;\n@@ -176,11 +176,6 @@ extern const char *ia64_fixed_range_string;\n       N_(\"Specify range of registers to make fixed.\")},\t\t\t\\\n }\n \n-/* This macro is a C statement to print on `stderr' a string describing the\n-   particular machine description choice.  */\n-\n-#define TARGET_VERSION fprintf (stderr, \" (IA-64)\");\n-\n /* Sometimes certain combinations of command options do not make sense on a\n    particular target machine.  You can define a macro `OVERRIDE_OPTIONS' to\n    take account of this.  This macro, if defined, is executed once just after\n@@ -242,36 +237,6 @@ extern const char *ia64_fixed_range_string;\n    into options for GNU CC to pass to the `cc1plus'.  */\n \n /* #define CC1PLUS_SPEC \"\" */\n-\n-/* A C string constant that tells the GNU CC driver program options to pass to\n-   the assembler.  It can also specify how to translate options you give to GNU\n-   CC into options for GNU CC to pass to the assembler.  */\n-\n-#if ((TARGET_CPU_DEFAULT | TARGET_DEFAULT) & MASK_GNU_AS) != 0\n-/* GNU AS.  */\n-#define ASM_SPEC \\\n-  \"%{mno-gnu-as:-N so} %{!mno-gnu-as:-x} %{mconstant-gp} %{mauto-pic}\"\n-#else\n-/* Intel ias.  */\n-#define ASM_SPEC \\\n-  \"%{!mgnu-as:-N so} %{mgnu-as:-x} %{mconstant-gp:-M const_gp}\\\n-   %{mauto-pic:-M no_plabel}\"\n-#endif\n-\n-/* A C string constant that tells the GNU CC driver program options to pass to\n-   the linker.  It can also specify how to translate options you give to GNU CC\n-   into options for GNU CC to pass to the linker.  */\n-\n-/* The Intel linker does not support dynamic linking, so we need -dn.\n-   The Intel linker gives annoying messages unless -N so is used.  */\n-#if ((TARGET_CPU_DEFAULT | TARGET_DEFAULT) & MASK_GNU_LD) != 0\n-/* GNU LD.  */\n-#define LINK_SPEC \"%{mno-gnu-ld:-dn -N so}\"\n-#else\n-/* Intel ild.  */\n-#define LINK_SPEC \"%{!mgnu-ld:-dn -N so}\"\n-#endif\n-\n \f\n /* Storage Layout */\n \n@@ -1570,21 +1535,24 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* A C statement or compound statement to output to FILE some assembler code to\n    call the profiling subroutine `mcount'.  */\n \n-/* ??? Unclear if this will actually work.  No way to test this currently.  */\n-\n-#define FUNCTION_PROFILER(FILE, LABELNO) \\\n+#undef FUNCTION_PROFILER\n+#define FUNCTION_PROFILER(FILE, LABELNO)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   char buf[20];\t\t\t\t\t\t\t\t\\\n   ASM_GENERATE_INTERNAL_LABEL (buf, \"LP\", LABELNO);\t\t\t\\\n-  fputs (\"\\taddl r16 = @ltoff(\", FILE);\t\t\t\t\t\\\n+  fputs (\"\\talloc out0 = ar.pfs, 8, 0, 4, 0\\n\", FILE);\t\t\t\\\n+  if (TARGET_AUTO_PIC)\t\t\t\t\t\t\t\\\n+    fputs (\"\\tmovl out3 = @gprel(\", FILE);\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\t\\\n+    fputs (\"\\taddl out3 = @ltoff(\", FILE);\t\t\t\t\\\n   assemble_name (FILE, buf);\t\t\t\t\t\t\\\n-  fputs (\"), gp\\n\", FILE);\t\t\t\t\t\t\\\n-  fputs (\"\\tmov r17 = r1;;\\n\", FILE);\t\t\t\t\t\\\n-  fputs (\"\\tld8 out0 = [r16]\\n\", FILE);\t\t\t\t\t\\\n-  fputs (\"\\tmov r18 = b0\\n\", FILE);\t\t\t\t\t\\\n-  fputs (\"\\tbr.call.sptk.many rp = mcount;;\\n\", FILE);\t\t\t\\\n-  fputs (\"\\tmov b0 = r18\\n\", FILE);\t\t\t\t\t\\\n-  fputs (\"\\tmov r1 = r17;;\\n\", FILE);\t\t\t\t\t\\\n+  if (TARGET_AUTO_PIC)\t\t\t\t\t\t\t\\\n+    fputs (\");;\\n\", FILE);\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\t\\\n+    fputs (\"), r1;;\\n\", FILE);\t\t\t\t\t\t\\\n+  fputs (\"\\tmov out1 = r1\\n\", FILE);\t\t\t\t\t\\\n+  fputs (\"\\tmov out2 = b0\\n\", FILE);\t\t\t\t\t\\\n+  fputs (\"\\tbr.call.sptk.many b0 = _mcount;;\\n\", FILE);\t\t\t\\\n } while (0)\n \n /* A C statement or compound statement to output to FILE some assembler code to"}, {"sha": "a25844fb6d8ae662ba462ac1201fb08b37b5055e", "filename": "gcc/config/ia64/linux.h", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243a707078d20d78057fe4660a9388028db83489/gcc%2Fconfig%2Fia64%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243a707078d20d78057fe4660a9388028db83489/gcc%2Fconfig%2Fia64%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Flinux.h?ref=243a707078d20d78057fe4660a9388028db83489", "patch": "@@ -1,5 +1,10 @@\n /* Definitions for ia64-linux target.  */\n \n+/* This macro is a C statement to print on `stderr' a string describing the\n+   particular machine description choice.  */\n+\n+#define TARGET_VERSION fprintf (stderr, \" (IA-64) Linux\");\n+\n /* This is for -profile to use -lc_p instead of -lc. */\n #undef CC1_SPEC\n #define CC1_SPEC \"%{profile:-p} %{G*}\"\n@@ -40,27 +45,4 @@\n #undef PROFILE_BEFORE_PROLOGUE\n #define PROFILE_BEFORE_PROLOGUE 1\n \n-/* A C statement or compound statement to output to FILE some assembler code to\n-   call the profiling subroutine `mcount'.  */\n-\n-#undef FUNCTION_PROFILER\n-#define FUNCTION_PROFILER(FILE, LABELNO)\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  char buf[20];\t\t\t\t\t\t\\\n-  ASM_GENERATE_INTERNAL_LABEL (buf, \"LP\", LABELNO);\t\\\n-  fputs (\"\\talloc out0 = ar.pfs, 8, 0, 4, 0\\n\", FILE);\t\\\n-  if (TARGET_AUTO_PIC)\t\t\t\t\t\\\n-    fputs (\"\\tmovl out3 = @gprel(\", FILE);\t\t\\\n-  else\t\t\t\t\t\t\t\\\n-    fputs (\"\\taddl out3 = @ltoff(\", FILE);\t\t\\\n-  assemble_name (FILE, buf);\t\t\t\t\\\n-  if (TARGET_AUTO_PIC)\t\t\t\t\t\\\n-    fputs (\");;\\n\", FILE);\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\\\n-    fputs (\"), r1;;\\n\", FILE);\t\t\t\t\\\n-  fputs (\"\\tmov out1 = r1\\n\", FILE);\t\t\t\\\n-  fputs (\"\\tmov out2 = b0\\n\", FILE);\t\t\t\\\n-  fputs (\"\\tbr.call.sptk.many b0 = _mcount;;\\n\", FILE);\t\\\n-} while (0)\n-\n /* End of linux.h */"}]}