{"sha": "0847049dc7a630e4bfa079767ed42c742ff6276b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg0NzA0OWRjN2E2MzBlNGJmYTA3OTc2N2VkNDJjNzQyZmY2Mjc2Yg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2018-07-31T14:21:11Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-07-31T14:21:11Z"}, "message": "[01/46] Move special cases out of get_initial_def_for_reduction\n\nThis minor clean-up avoids repeating the test for double reductions\nand also moves the vect_get_vec_def_for_operand call to the same\nfunction as the corresponding vect_get_vec_def_for_stmt_copy.\n\n2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vect-loop.c (get_initial_def_for_reduction): Move special\n\tcases for nested loops from here to ...\n\t(vect_create_epilog_for_reduction): ...here.  Only call\n\tvect_is_simple_use for inner-loop reductions.\n\nFrom-SVN: r263116", "tree": {"sha": "f0f5c51a06ed7cf34ab3931f6a4dbe03b657045a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0f5c51a06ed7cf34ab3931f6a4dbe03b657045a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0847049dc7a630e4bfa079767ed42c742ff6276b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0847049dc7a630e4bfa079767ed42c742ff6276b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0847049dc7a630e4bfa079767ed42c742ff6276b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0847049dc7a630e4bfa079767ed42c742ff6276b/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "686dca7612a8ab5ebebad2fc13bd9ea7793a7e40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/686dca7612a8ab5ebebad2fc13bd9ea7793a7e40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/686dca7612a8ab5ebebad2fc13bd9ea7793a7e40"}], "stats": {"total": 59, "additions": 25, "deletions": 34}, "files": [{"sha": "391cc6548f00d7960b1d2524838a11d762f9a52b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0847049dc7a630e4bfa079767ed42c742ff6276b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0847049dc7a630e4bfa079767ed42c742ff6276b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0847049dc7a630e4bfa079767ed42c742ff6276b", "patch": "@@ -1,3 +1,10 @@\n+2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-loop.c (get_initial_def_for_reduction): Move special\n+\tcases for nested loops from here to ...\n+\t(vect_create_epilog_for_reduction): ...here.  Only call\n+\tvect_is_simple_use for inner-loop reductions.\n+\n 2018-07-31  Martin Liska  <mliska@suse.cz>\n \n         PR gcov-profile/85338"}, {"sha": "18fa30ba16d0b182d14ecf07b24693855f1e684c", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 18, "deletions": 34, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0847049dc7a630e4bfa079767ed42c742ff6276b/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0847049dc7a630e4bfa079767ed42c742ff6276b/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=0847049dc7a630e4bfa079767ed42c742ff6276b", "patch": "@@ -4113,50 +4113,21 @@ get_initial_def_for_reduction (gimple *stmt, tree init_val,\n   enum tree_code code = gimple_assign_rhs_code (stmt);\n   tree def_for_init;\n   tree init_def;\n-  bool nested_in_vect_loop = false;\n   REAL_VALUE_TYPE real_init_val = dconst0;\n   int int_init_val = 0;\n-  gimple *def_stmt = NULL;\n   gimple_seq stmts = NULL;\n \n   gcc_assert (vectype);\n \n   gcc_assert (POINTER_TYPE_P (scalar_type) || INTEGRAL_TYPE_P (scalar_type)\n \t      || SCALAR_FLOAT_TYPE_P (scalar_type));\n \n-  if (nested_in_vect_loop_p (loop, stmt))\n-    nested_in_vect_loop = true;\n-  else\n-    gcc_assert (loop == (gimple_bb (stmt))->loop_father);\n-\n-  /* In case of double reduction we only create a vector variable to be put\n-     in the reduction phi node.  The actual statement creation is done in\n-     vect_create_epilog_for_reduction.  */\n-  if (adjustment_def && nested_in_vect_loop\n-      && TREE_CODE (init_val) == SSA_NAME\n-      && (def_stmt = SSA_NAME_DEF_STMT (init_val))\n-      && gimple_code (def_stmt) == GIMPLE_PHI\n-      && flow_bb_inside_loop_p (loop, gimple_bb (def_stmt))\n-      && vinfo_for_stmt (def_stmt)\n-      && STMT_VINFO_DEF_TYPE (vinfo_for_stmt (def_stmt))\n-          == vect_double_reduction_def)\n-    {\n-      *adjustment_def = NULL;\n-      return vect_create_destination_var (init_val, vectype);\n-    }\n+  gcc_assert (nested_in_vect_loop_p (loop, stmt)\n+\t      || loop == (gimple_bb (stmt))->loop_father);\n \n   vect_reduction_type reduction_type\n     = STMT_VINFO_VEC_REDUCTION_TYPE (stmt_vinfo);\n \n-  /* In case of a nested reduction do not use an adjustment def as\n-     that case is not supported by the epilogue generation correctly\n-     if ncopies is not one.  */\n-  if (adjustment_def && nested_in_vect_loop)\n-    {\n-      *adjustment_def = NULL;\n-      return vect_get_vec_def_for_operand (init_val, stmt);\n-    }\n-\n   switch (code)\n     {\n     case WIDEN_SUM_EXPR:\n@@ -4586,9 +4557,22 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple *stmt,\n \t      || (induc_code == MIN_EXPR\n \t\t  && tree_int_cst_lt (induc_val, initial_def))))\n \tinduc_val = initial_def;\n-      vect_is_simple_use (initial_def, loop_vinfo, &initial_def_dt);\n-      vec_initial_def = get_initial_def_for_reduction (stmt, initial_def,\n-\t\t\t\t\t\t       &adjustment_def);\n+\n+      if (double_reduc)\n+\t/* In case of double reduction we only create a vector variable\n+\t   to be put in the reduction phi node.  The actual statement\n+\t   creation is done later in this function.  */\n+\tvec_initial_def = vect_create_destination_var (initial_def, vectype);\n+      else if (nested_in_vect_loop)\n+\t{\n+\t  /* Do not use an adjustment def as that case is not supported\n+\t     correctly if ncopies is not one.  */\n+\t  vect_is_simple_use (initial_def, loop_vinfo, &initial_def_dt);\n+\t  vec_initial_def = vect_get_vec_def_for_operand (initial_def, stmt);\n+\t}\n+      else\n+\tvec_initial_def = get_initial_def_for_reduction (stmt, initial_def,\n+\t\t\t\t\t\t\t &adjustment_def);\n       vec_initial_defs.create (1);\n       vec_initial_defs.quick_push (vec_initial_def);\n     }"}]}