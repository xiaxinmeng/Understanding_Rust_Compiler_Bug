{"sha": "704b8582e91b7553b43a17794b76949e61048deb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA0Yjg1ODJlOTFiNzU1M2I0M2ExNzc5NGI3Njk0OWU2MTA0OGRlYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-03-05T20:18:56Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-03-05T20:18:56Z"}, "message": "pt.c (local_specializations): Change from htab_t into struct pointer_map_t *.\n\n\t* pt.c (local_specializations): Change from htab_t into\n\tstruct pointer_map_t *.\n\t(retrieve_local_specializations, register_local_specialization,\n\ttsubst_pack_expansion, instantiate_decl): Adjust users.\n\t(eq_local_specializations, hash_local_specialization): Remove.\n\nFrom-SVN: r184959", "tree": {"sha": "05510248dec6eb8976282b5fc1934a435c65890b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05510248dec6eb8976282b5fc1934a435c65890b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/704b8582e91b7553b43a17794b76949e61048deb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/704b8582e91b7553b43a17794b76949e61048deb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/704b8582e91b7553b43a17794b76949e61048deb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/704b8582e91b7553b43a17794b76949e61048deb/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1e3c1d950e3723c46ef467306bcaea3a4f1a85f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e3c1d950e3723c46ef467306bcaea3a4f1a85f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e3c1d950e3723c46ef467306bcaea3a4f1a85f2"}], "stats": {"total": 61, "additions": 21, "deletions": 40}, "files": [{"sha": "bfd17d203f61c93f90cde2ca6ef2264d950b0e57", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/704b8582e91b7553b43a17794b76949e61048deb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/704b8582e91b7553b43a17794b76949e61048deb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=704b8582e91b7553b43a17794b76949e61048deb", "patch": "@@ -1,3 +1,11 @@\n+2012-03-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* pt.c (local_specializations): Change from htab_t into\n+\tstruct pointer_map_t *.\n+\t(retrieve_local_specializations, register_local_specialization,\n+\ttsubst_pack_expansion, instantiate_decl): Adjust users.\n+\t(eq_local_specializations, hash_local_specialization): Remove.\n+\n 2012-03-05  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/51930"}, {"sha": "4980c19ae06993fe5868b4cbc6cf95c951a055ac", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 13, "deletions": 40, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/704b8582e91b7553b43a17794b76949e61048deb/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/704b8582e91b7553b43a17794b76949e61048deb/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=704b8582e91b7553b43a17794b76949e61048deb", "patch": "@@ -79,7 +79,7 @@ static tree cur_stmt_expr;\n /* A map from local variable declarations in the body of the template\n    presently being instantiated to the corresponding instantiated\n    local variables.  */\n-static htab_t local_specializations;\n+static struct pointer_map_t *local_specializations;\n \n typedef struct GTY(()) spec_entry\n {\n@@ -189,7 +189,6 @@ static tree for_each_template_parm_r (tree *, int *, void *);\n static tree copy_default_args_to_explicit_spec_1 (tree, tree);\n static void copy_default_args_to_explicit_spec (tree);\n static int invalid_nontype_parm_type_p (tree, tsubst_flags_t);\n-static int eq_local_specializations (const void *, const void *);\n static bool dependent_template_arg_p (tree);\n static bool any_template_arguments_need_structural_equality_p (tree);\n static bool dependent_type_p_r (tree);\n@@ -1078,14 +1077,13 @@ retrieve_specialization (tree tmpl, tree args, hashval_t hash)\n static tree\n retrieve_local_specialization (tree tmpl)\n {\n-  tree spec;\n+  void **slot;\n \n   if (local_specializations == NULL)\n     return NULL_TREE;\n \n-  spec = (tree) htab_find_with_hash (local_specializations, tmpl,\n-\t\t\t\t     htab_hash_pointer (tmpl));\n-  return spec ? TREE_PURPOSE (spec) : NULL_TREE;\n+  slot = pointer_map_contains (local_specializations, tmpl);\n+  return slot ? (tree) *slot : NULL_TREE;\n }\n \n /* Returns nonzero iff DECL is a specialization of TMPL.  */\n@@ -1677,24 +1675,6 @@ reregister_specialization (tree spec, tree tinfo, tree new_spec)\n   return 0;\n }\n \n-/* Compare an entry in the local specializations hash table P1 (which\n-   is really a pointer to a TREE_LIST) with P2 (which is really a\n-   DECL).  */\n-\n-static int\n-eq_local_specializations (const void *p1, const void *p2)\n-{\n-  return TREE_VALUE ((const_tree) p1) == (const_tree) p2;\n-}\n-\n-/* Hash P1, an entry in the local specializations table.  */\n-\n-static hashval_t\n-hash_local_specialization (const void* p1)\n-{\n-  return htab_hash_pointer (TREE_VALUE ((const_tree) p1));\n-}\n-\n /* Like register_specialization, but for local declarations.  We are\n    registering SPEC, an instantiation of TMPL.  */\n \n@@ -1703,9 +1683,8 @@ register_local_specialization (tree spec, tree tmpl)\n {\n   void **slot;\n \n-  slot = htab_find_slot_with_hash (local_specializations, tmpl,\n-\t\t\t\t   htab_hash_pointer (tmpl), INSERT);\n-  *slot = build_tree_list (spec, tmpl);\n+  slot = pointer_map_insert (local_specializations, tmpl);\n+  *slot = spec;\n }\n \n /* TYPE is a class type.  Returns true if TYPE is an explicitly\n@@ -9307,7 +9286,7 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n   int missing_level = 0;\n   int i, len = -1;\n   tree result;\n-  htab_t saved_local_specializations = NULL;\n+  struct pointer_map_t *saved_local_specializations = NULL;\n   bool need_local_specializations = false;\n   int levels;\n \n@@ -9492,14 +9471,11 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n   if (need_local_specializations)\n     {\n       /* We're in a late-specified return type, so create our own local\n-\t specializations table; the current table is either NULL or (in the\n+\t specializations map; the current map is either NULL or (in the\n \t case of recursive unification) might have bindings that we don't\n \t want to use or alter.  */\n       saved_local_specializations = local_specializations;\n-      local_specializations = htab_create (37,\n-\t\t\t\t\t   hash_local_specialization,\n-\t\t\t\t\t   eq_local_specializations,\n-\t\t\t\t\t   NULL);\n+      local_specializations = pointer_map_create ();\n     }\n \n   /* For each argument in each argument pack, substitute into the\n@@ -9586,7 +9562,7 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n \n   if (need_local_specializations)\n     {\n-      htab_delete (local_specializations);\n+      pointer_map_destroy (local_specializations);\n       local_specializations = saved_local_specializations;\n     }\n   \n@@ -18704,7 +18680,7 @@ instantiate_decl (tree d, int defer_ok,\n     synthesize_method (d);\n   else if (TREE_CODE (d) == FUNCTION_DECL)\n     {\n-      htab_t saved_local_specializations;\n+      struct pointer_map_t *saved_local_specializations;\n       tree subst_decl;\n       tree tmpl_parm;\n       tree spec_parm;\n@@ -18714,10 +18690,7 @@ instantiate_decl (tree d, int defer_ok,\n       saved_local_specializations = local_specializations;\n \n       /* Set up the list of local specializations.  */\n-      local_specializations = htab_create (37,\n-\t\t\t\t\t   hash_local_specialization,\n-\t\t\t\t\t   eq_local_specializations,\n-\t\t\t\t\t   NULL);\n+      local_specializations = pointer_map_create ();\n \n       /* Set up context.  */\n       start_preparsed_function (d, NULL_TREE, SF_PRE_PARSED);\n@@ -18759,7 +18732,7 @@ instantiate_decl (tree d, int defer_ok,\n       input_location = DECL_STRUCT_FUNCTION (code_pattern)->function_end_locus;\n \n       /* We don't need the local specializations any more.  */\n-      htab_delete (local_specializations);\n+      pointer_map_destroy (local_specializations);\n       local_specializations = saved_local_specializations;\n \n       /* Finish the function.  */"}]}