{"sha": "d7d528c8c811a4d3f12a95905fe56ff6bf2d433f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdkNTI4YzhjODExYTRkM2YxMmE5NTkwNWZlNTZmZjZiZjJkNDMzZg==", "commit": {"author": {"name": "Erik Schnetter", "email": "schnetter@aei.mpg.de", "date": "2004-10-04T15:47:16Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-10-04T15:47:16Z"}, "message": "scanner.c (preprocessor_line): Accept preprocessor lines without file names.\n\n2004-10-04  Erik Schnetter  <schnetter@aei.mpg.de>\n\n\t* scanner.c (preprocessor_line): Accept preprocessor lines without\n\tfile names.  Check file names for closing quotes.  Handle escaped\n\tquotes in file names.\n\nFrom-SVN: r88514", "tree": {"sha": "1b9f00596752c29180d2621c391e9761cf68c13a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b9f00596752c29180d2621c391e9761cf68c13a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7d528c8c811a4d3f12a95905fe56ff6bf2d433f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7d528c8c811a4d3f12a95905fe56ff6bf2d433f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7d528c8c811a4d3f12a95905fe56ff6bf2d433f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7d528c8c811a4d3f12a95905fe56ff6bf2d433f/comments", "author": null, "committer": null, "parents": [{"sha": "06e4f02a16465f976c9f1a179fd2c60fb76e9659", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06e4f02a16465f976c9f1a179fd2c60fb76e9659", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06e4f02a16465f976c9f1a179fd2c60fb76e9659"}], "stats": {"total": 46, "additions": 39, "deletions": 7}, "files": [{"sha": "d1bc71d73c01cc1a2173772b944393ae850d6abc", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7d528c8c811a4d3f12a95905fe56ff6bf2d433f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7d528c8c811a4d3f12a95905fe56ff6bf2d433f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d7d528c8c811a4d3f12a95905fe56ff6bf2d433f", "patch": "@@ -1,3 +1,9 @@\n+2004-10-04  Erik Schnetter  <schnetter@aei.mpg.de>\n+\n+\t* scanner.c (preprocessor_line): Accept preprocessor lines without\n+\tfile names.  Check file names for closing quotes.  Handle escaped\n+\tquotes in file names.\n+\n 2004-10-04  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n \tPaul Brook  <paul@codesourcery.com>\n "}, {"sha": "734afa04d9f6d36a9dcae21f97f4dfa4cf1c0c92", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7d528c8c811a4d3f12a95905fe56ff6bf2d433f/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7d528c8c811a4d3f12a95905fe56ff6bf2d433f/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=d7d528c8c811a4d3f12a95905fe56ff6bf2d433f", "patch": "@@ -834,6 +834,7 @@ preprocessor_line (char *c)\n   int i, line;\n   char *filename;\n   gfc_file *f;\n+  int escaped;\n \n   c++;\n   while (*c == ' ' || *c == '\\t')\n@@ -844,19 +845,46 @@ preprocessor_line (char *c)\n \n   line = atoi (c);\n \n+  /* Set new line number.  */\n+  current_file->line = line;\n+\n   c = strchr (c, ' '); \n   if (c == NULL)\n-    /* Something we don't understand has happened.  */\n+    /* No file name given.  */\n+    return;\n+\n+\n+\n+  /* Skip spaces.  */\n+  while (*c == ' ' || *c == '\\t')\n+    c++;\n+\n+  /* Skip quote.  */\n+  if (*c != '\"')\n     goto bad_cpp_line;\n-  c += 2;     /* Skip space and quote.  */\n+  ++c;\n+\n   filename = c;\n \n-  c = strchr (c, '\"'); /* Make filename end at quote.  */\n-  if (c == NULL)\n+  /* Make filename end at quote.  */\n+  escaped = false;\n+  while (*c && ! (! escaped && *c == '\"'))\n+    {\n+      if (escaped)\n+        escaped = false;\n+      else\n+        escaped = *c == '\\\\';\n+      ++c;\n+    }\n+\n+  if (! *c)\n     /* Preprocessor line has no closing quote.  */\n     goto bad_cpp_line;\n+\n   *c++ = '\\0';\n \n+\n+\n   /* Get flags.  */\n   \n   flag[1] = flag[2] = flag[3] = flag[4] = flag[5] = false;\n@@ -888,8 +916,6 @@ preprocessor_line (char *c)\n       current_file = current_file->up;\n     }\n   \n-  current_file->line = line;\n-  \n   /* The name of the file can be a temporary file produced by\n      cpp. Replace the name if it is different.  */\n   \n@@ -903,7 +929,7 @@ preprocessor_line (char *c)\n   return;\n \n  bad_cpp_line:\n-  gfc_warning_now (\"%s:%d: Unknown preprocessor directive\", \n+  gfc_warning_now (\"%s:%d: Illegal preprocessor directive\", \n \t\t   current_file->filename, current_file->line);\n   current_file->line++;\n }"}]}