{"sha": "9845c52db38f15740861435f38f7e5ad8a8de2ec", "node_id": "C_kwDOANBUbNoAKDk4NDVjNTJkYjM4ZjE1NzQwODYxNDM1ZjM4ZjdlNWFkOGE4ZGUyZWM", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-09-30T21:34:23Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-09-30T21:34:23Z"}, "message": "c++: __is_trivially_xible and multi-arg aggr paren init [PR102535]\n\nis_xible_helper assumes only 0- and 1-argument ctors can be trivial, but\nC++20 aggregate paren init means multi-arg ctors can now be trivial too.\nThis patch relaxes the relevant early exit check accordingly.\n\n\tPR c++/102535\n\ngcc/cp/ChangeLog:\n\n\t* method.c (is_xible_helper): Don't exit early for multi-arg\n\tctors in C++20.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/ext/is_trivially_constructible7.C: New test.", "tree": {"sha": "7845891b80d9b122a5f01a8e5fb89073cf6acaae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7845891b80d9b122a5f01a8e5fb89073cf6acaae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9845c52db38f15740861435f38f7e5ad8a8de2ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9845c52db38f15740861435f38f7e5ad8a8de2ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9845c52db38f15740861435f38f7e5ad8a8de2ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9845c52db38f15740861435f38f7e5ad8a8de2ec/comments", "author": null, "committer": null, "parents": [{"sha": "fdf8d5bc5b52bd733037dbeeff442c59f8aa765b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdf8d5bc5b52bd733037dbeeff442c59f8aa765b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdf8d5bc5b52bd733037dbeeff442c59f8aa765b"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "c38912a7ce96def49beec778f20448f31b7b2062", "filename": "gcc/cp/method.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9845c52db38f15740861435f38f7e5ad8a8de2ec/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9845c52db38f15740861435f38f7e5ad8a8de2ec/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=9845c52db38f15740861435f38f7e5ad8a8de2ec", "patch": "@@ -2094,8 +2094,10 @@ is_xible_helper (enum tree_code code, tree to, tree from, bool trivial)\n   tree expr;\n   if (code == MODIFY_EXPR)\n     expr = assignable_expr (to, from);\n-  else if (trivial && from && TREE_CHAIN (from))\n+  else if (trivial && from && TREE_CHAIN (from)\n+\t   && cxx_dialect < cxx20)\n     return error_mark_node; // only 0- and 1-argument ctors can be trivial\n+\t\t\t    // before C++20 aggregate paren init\n   else if (TREE_CODE (to) == ARRAY_TYPE && !TYPE_DOMAIN (to))\n     return error_mark_node; // can't construct an array of unknown bound\n   else"}, {"sha": "f6fbf8f2d9e128d14aef5725d1dd0e1a2ade8902", "filename": "gcc/testsuite/g++.dg/ext/is_trivially_constructible7.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9845c52db38f15740861435f38f7e5ad8a8de2ec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_trivially_constructible7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9845c52db38f15740861435f38f7e5ad8a8de2ec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_trivially_constructible7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_trivially_constructible7.C?ref=9845c52db38f15740861435f38f7e5ad8a8de2ec", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/102535\n+// Verify __is_trivially_constructible works with multi-arg paren init of\n+// aggrs.\n+\n+struct A { int x; };\n+struct B { float y; };\n+struct C { char z; };\n+struct D { A a; B b; C c; };\n+\n+extern int n[1 + __is_trivially_constructible(D, A)];\n+extern int n[1 + __is_trivially_constructible(D, A, B)];\n+extern int n[1 + __is_trivially_constructible(D, A, B, C)];\n+#if __cpp_aggregate_paren_init\n+extern int n[1 + true];\n+#else\n+extern int n[1 + false];\n+#endif"}]}