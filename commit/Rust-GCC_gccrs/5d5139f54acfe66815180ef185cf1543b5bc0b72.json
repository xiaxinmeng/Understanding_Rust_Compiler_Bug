{"sha": "5d5139f54acfe66815180ef185cf1543b5bc0b72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ1MTM5ZjU0YWNmZTY2ODE1MTgwZWYxODVjZjE1NDNiNWJjMGI3Mg==", "commit": {"author": {"name": "Craig Burley", "email": "burley@gcc.gnu.org", "date": "1999-05-30T18:09:07Z"}, "committer": {"name": "Craig Burley", "email": "burley@gcc.gnu.org", "date": "1999-05-30T18:09:07Z"}, "message": "code, docs\n\n[[Split portion of a mixed commit.]]\n\nFrom-SVN: r27257.2", "tree": {"sha": "02ff63e4fcc67a3bcda1021281e225b0e0b0d9bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02ff63e4fcc67a3bcda1021281e225b0e0b0d9bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d5139f54acfe66815180ef185cf1543b5bc0b72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d5139f54acfe66815180ef185cf1543b5bc0b72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d5139f54acfe66815180ef185cf1543b5bc0b72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d5139f54acfe66815180ef185cf1543b5bc0b72/comments", "author": null, "committer": null, "parents": [{"sha": "515cdc66c0f57b6b438c35694c7c37e821cf3fa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/515cdc66c0f57b6b438c35694c7c37e821cf3fa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/515cdc66c0f57b6b438c35694c7c37e821cf3fa3"}], "stats": {"total": 112, "additions": 110, "deletions": 2}, "files": [{"sha": "8cd0eb00bb09533a6c681c0e7a8adcae26da9e31", "filename": "gcc/f/ffe.texi", "status": "modified", "additions": 110, "deletions": 2, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5139f54acfe66815180ef185cf1543b5bc0b72/gcc%2Ff%2Fffe.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5139f54acfe66815180ef185cf1543b5bc0b72/gcc%2Ff%2Fffe.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fffe.texi?ref=5d5139f54acfe66815180ef185cf1543b5bc0b72", "patch": "@@ -31,6 +31,7 @@ need to take first.\n * Challenges Posed::\n * Transforming Statements::\n * Transforming Expressions::\n+* Internal Naming Conventions::\n @end menu\n \n @node Overview of Translation Process\n@@ -626,7 +627,7 @@ Hollerith constants (such as @samp{2HAB}) can appear after:\n \n @itemize @bullet\n @item\n-@samp{FORMAT(}\n+@samp{(}\n \n @item\n @samp{,}\n@@ -1280,7 +1281,7 @@ Further, after the @code{SYSTEM_CLOCK} library routine returns,\n the compiler must ensure that the temporary variable it wrote\n is copied into the appropriate element of the @samp{CLOCKS} array.\n (This assumes the compiler doesn't just reject the code,\n-which it should if it is compiling under some kind of a \"strict\" option.)\n+which it should if it is compiling under some kind of a ``strict'' option.)\n \n @item\n To determine the correct index into the @samp{CLOCKS} array,\n@@ -1687,3 +1688,110 @@ to hold the value of the expression.\n @item\n Other stuff???\n @end itemize\n+\n+@node Internal Naming Conventions\n+@section Internal Naming Conventions\n+\n+Names exported by FFE modules have the following (regular-expression) forms.\n+Note that all names beginning @code{ffe@var{mod}} or @code{FFE@var{mod}},\n+where @var{mod} is lowercase or uppercase alphanumerics, respectively,\n+are exported by the module @code{ffe@var{mod}},\n+with the source code doing the exporting in @file{@var{mod}.h}.\n+(Usually, the source code for the implementation is in @file{@var{mod}.c}.)\n+\n+Identifiers that don't fit the following forms\n+are not considered exported,\n+even if they are according to the C language.\n+(For example, they might be made available to other modules\n+solely for use within expansions of exported macros,\n+not for use within any source code in those other modules.)\n+\n+@table @code\n+@item ffe@var{mod}\n+The single typedef exported by the module.\n+\n+@item FFE@var{umod}_[A-Z][A-Z0-9_]*\n+(Where @var{umod} is the uppercase for of @var{mod}.)\n+\n+A @code{#define} or @code{enum} constant of the type @code{ffe@var{mod}}.\n+\n+@item ffe@var{mod}[A-Z][A-Z][a-z0-9]*\n+A typedef exported by the module.\n+\n+The portion of the identifier after @code{ffe@var{mod}} is\n+referred to as @code{ctype}, a capitalized (mixed-case) form\n+of @code{type}.\n+\n+@item FFE@var{umod}_@var{type}[A-Z][A-Z0-9_]*[A-Z0-9]?\n+(Where @var{umod} is the uppercase for of @var{mod}.)\n+\n+A @code{#define} or @code{enum} constant of the type\n+@code{ffe@var{mod}@var{type}},\n+where @var{type} is the lowercase form of @var{ctype}\n+in an exported typedef.\n+\n+@item ffe@var{mod}_@var{value}\n+A function that does or returns something,\n+as described by @var{value} (see below).\n+\n+@item ffe@var{mod}_@var{value}_@var{input}\n+A function that does or returns something based\n+primarily on the thing described by @var{input} (see below).\n+@end table\n+\n+Below are names used for @var{value} and @var{input},\n+along with their definitions.\n+\n+@table @code\n+@item col\n+A column number within a line (first column is number 1).\n+\n+@item file\n+An encapsulation of a file's name.\n+\n+@item find\n+Looks up an instance of some type that matches specified criteria,\n+and returns that, even if it has to create a new instance or\n+crash trying to find it (as appropriate).\n+\n+@item initialize\n+Initializes, usually a module.  No type.\n+\n+@item int\n+A generic integer of type @code{int}.\n+\n+@item is\n+A generic integer that contains a true (non-zero) or false (zero) value.\n+\n+@item len\n+A generic integer that contains the length of something.\n+\n+@item line\n+A line number within a source file,\n+or a global line number.\n+\n+@item lookup\n+Looks up an instance of some type that matches specified criteria,\n+and returns that, or returns nil.\n+\n+@item name\n+A @code{text} that points to a name of something.\n+\n+@item new\n+Makes a new instance of the indicated type.\n+Might return an existing one if appropriate---if so,\n+similar to @code{find} without crashing.\n+\n+@item pt\n+Pointer to a particular character (line, column pairs)\n+in the input file (source code being compiled).\n+\n+@item run\n+Performs some herculean task.  No type.\n+\n+@item terminate\n+Terminates, usually a module.  No type.\n+\n+@item text\n+A @code{char *} that points to generic text.\n+@end table"}]}