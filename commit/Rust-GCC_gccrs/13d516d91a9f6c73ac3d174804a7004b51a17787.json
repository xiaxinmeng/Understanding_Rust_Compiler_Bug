{"sha": "13d516d91a9f6c73ac3d174804a7004b51a17787", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNkNTE2ZDkxYTlmNmM3M2FjM2QxNzQ4MDRhNzAwNGI1MWExNzc4Nw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-01-18T22:59:40Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-01-18T22:59:40Z"}, "message": "romp-protos.h: New file.\n\n        * romp-protos.h: New file.\n\n        * romp.c: Fix compile time warnings.\n\n        * romp.h: Move prototypes to romp-protos.h.  Fix compile time\n        warnings.\n\n        * romp.md: Likewise.\n\nFrom-SVN: r31492", "tree": {"sha": "e171bfb6a8be99b68313034a45f9f7175e4813ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e171bfb6a8be99b68313034a45f9f7175e4813ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13d516d91a9f6c73ac3d174804a7004b51a17787", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13d516d91a9f6c73ac3d174804a7004b51a17787", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13d516d91a9f6c73ac3d174804a7004b51a17787", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13d516d91a9f6c73ac3d174804a7004b51a17787/comments", "author": null, "committer": null, "parents": [{"sha": "253f1045a1eeb94e750df4ec0f5904a3ccf7db09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/253f1045a1eeb94e750df4ec0f5904a3ccf7db09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/253f1045a1eeb94e750df4ec0f5904a3ccf7db09"}], "stats": {"total": 142, "additions": 109, "deletions": 33}, "files": [{"sha": "1055cb1686cec4d288bfcdb3c6da14c39e7f6cf0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13d516d91a9f6c73ac3d174804a7004b51a17787/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13d516d91a9f6c73ac3d174804a7004b51a17787/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13d516d91a9f6c73ac3d174804a7004b51a17787", "patch": "@@ -1,3 +1,14 @@\n+2000-01-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* romp-protos.h: New file.\n+\n+\t* romp.c: Fix compile time warnings.\n+\t\n+\t* romp.h: Move prototypes to romp-protos.h.  Fix compile time\n+\twarnings.\n+\n+\t* romp.md: Likewise.\n+\n 2000-01-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* we32k-protos.h: New file."}, {"sha": "b9f1069720d294ddae817a6fd97a05ac345528b9", "filename": "gcc/config/romp/romp-protos.h", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13d516d91a9f6c73ac3d174804a7004b51a17787/gcc%2Fconfig%2Fromp%2Fromp-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13d516d91a9f6c73ac3d174804a7004b51a17787/gcc%2Fconfig%2Fromp%2Fromp-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp-protos.h?ref=13d516d91a9f6c73ac3d174804a7004b51a17787", "patch": "@@ -0,0 +1,63 @@\n+/* Definitions of target machine for GNU compiler, for ROMP chip.\n+   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Contributed by Richard Kenner (kenner@nyu.edu)\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#ifdef RTX_CODE\n+extern int next_insn_tests_no_unsigned PARAMS ((rtx));\n+extern void update_cc PARAMS ((rtx, rtx));\n+extern int restore_compare_p PARAMS ((rtx));\n+extern void print_operand PARAMS ((FILE *, rtx, int));\n+extern rtx get_symref PARAMS ((const char *));\n+extern int check_precision PARAMS ((enum machine_mode, rtx, rtx));\n+extern const char *output_fpop PARAMS ((enum rtx_code, rtx, rtx, rtx, rtx));\n+extern int constant_pool_address_operand PARAMS ((rtx, enum machine_mode));\n+extern int romp_symbolic_operand PARAMS ((rtx, enum machine_mode));\n+extern int zero_memory_operand PARAMS ((rtx, enum machine_mode));\n+extern int short_memory_operand PARAMS ((rtx, enum machine_mode));\n+extern int symbolic_memory_operand PARAMS ((rtx, enum machine_mode));\n+extern int current_function_operand PARAMS ((rtx, enum machine_mode));\n+extern int constant_operand PARAMS ((rtx, enum machine_mode));\n+extern int reg_or_cint_operand PARAMS ((rtx, enum machine_mode));\n+extern int reg_or_any_cint_operand PARAMS ((rtx, enum machine_mode));\n+extern int reg_or_D_operand PARAMS ((rtx, enum machine_mode));\n+extern int reg_or_add_operand PARAMS ((rtx, enum machine_mode));\n+extern int reg_or_and_operand PARAMS ((rtx, enum machine_mode));\n+extern int reg_or_mem_operand PARAMS ((rtx, enum machine_mode));\n+extern int reg_or_nonsymb_mem_operand PARAMS ((rtx, enum machine_mode));\n+extern int romp_operand PARAMS ((rtx, enum machine_mode));\n+extern int reg_0_operand PARAMS ((rtx, enum machine_mode));\n+extern int reg_15_operand PARAMS ((rtx, enum machine_mode));\n+extern int float_binary PARAMS ((rtx, enum machine_mode));\n+extern int float_unary PARAMS ((rtx, enum machine_mode));\n+extern int float_conversion PARAMS ((rtx, enum machine_mode));\n+#endif /* RTX_CODE */\n+\n+extern int first_reg_to_save PARAMS ((void));\n+extern int romp_pushes_stack PARAMS ((void));\n+extern int romp_using_r14 PARAMS ((void));\n+extern int null_epilogue PARAMS ((void));\n+extern int romp_sa_size PARAMS ((void));\n+extern int romp_makes_calls PARAMS ((void));\n+extern void output_prolog PARAMS ((FILE *, int));\n+extern void output_encoded_offset PARAMS ((FILE *, unsigned));\n+extern void output_epilog PARAMS ((FILE *, int));\n+extern int romp_debugger_auto_correction PARAMS ((int));\n+extern int romp_debugger_arg_correction PARAMS ((int));\n+extern const char *output_in_line_mul PARAMS ((void));"}, {"sha": "79d9177b93d5d9da3ea78a281ac598a7b7ca4687", "filename": "gcc/config/romp/romp.c", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13d516d91a9f6c73ac3d174804a7004b51a17787/gcc%2Fconfig%2Fromp%2Fromp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13d516d91a9f6c73ac3d174804a7004b51a17787/gcc%2Fconfig%2Fromp%2Fromp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.c?ref=13d516d91a9f6c73ac3d174804a7004b51a17787", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines used for code generation on ROMP.\n-   Copyright (C) 1990, 91, 92, 93, 97, 98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1990, 91, 92, 93, 97-99, 2000 Free Software Foundation, Inc.\n    Contributed by Richard Kenner (kenner@nyu.edu)\n \n This file is part of GNU CC.\n@@ -37,14 +37,17 @@ Boston, MA 02111-1307, USA.  */\n #include \"obstack.h\"\n #include \"tree.h\"\n #include \"function.h\"\n+#include \"tm_p.h\"\n \n #define min(A,B)\t((A) < (B) ? (A) : (B))\n #define max(A,B)\t((A) > (B) ? (A) : (B))\n \n-static int unsigned_comparisons_p ();\n-static void output_loadsave_fpregs ();\n-static void output_fpops ();\n-static void init_fpops ();\n+static int unsigned_comparisons_p PARAMS ((rtx));\n+static void output_loadsave_fpregs PARAMS ((FILE *, enum rtx_code, rtx));\n+static void output_fpops PARAMS ((FILE *));\n+static void init_fpops PARAMS ((void));\n+static int memory_offset_in_range_p PARAMS ((rtx, enum machine_mode, int, int));\n+static unsigned int hash_rtx PARAMS ((rtx));\n \f\n /* Return 1 if the insn using CC0 set by INSN does not contain\n    any unsigned tests applied to the condition codes.\n@@ -96,6 +99,8 @@ unsigned_comparisons_p (x)\n     case LEU:\n     case GEU:\n       return (XEXP (x, 0) == cc0_rtx || XEXP (x, 1) == cc0_rtx);\n+    default:\n+      break;\n     }\n \n   len = GET_RTX_LENGTH (code);\n@@ -126,8 +131,9 @@ unsigned_comparisons_p (x)\n    cc_state.value[12] refer to two possible values that might correspond\n    to the CC.  We only store register values.  */\n \n+void\n update_cc (body, insn)\n-    rtx body;\n+    rtx body ATTRIBUTE_UNUSED;\n     rtx insn;\n {\n   switch (get_attr_cc (insn))\n@@ -231,7 +237,7 @@ restore_compare_p (op)\n /*  Generate the (long) string corresponding to an inline multiply insn.\n     Note that `r10' does not refer to the register r10, but rather to the\n     SCR used as the MQ.  */\n-char *\n+const char *\n output_in_line_mul ()\n {\n   static char insns[200];\n@@ -356,7 +362,7 @@ symbolic_memory_operand (op, mode)\n int\n current_function_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (op) != MEM || GET_CODE (XEXP (op, 0)) != SYMBOL_REF\n       ||  ! CONSTANT_POOL_ADDRESS_P (XEXP (op, 0)))\n@@ -382,7 +388,7 @@ null_epilogue ()\n int\n constant_pool_address_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return ((GET_CODE (op) == SYMBOL_REF && CONSTANT_POOL_ADDRESS_P (op))\n \t  || (GET_CODE (op) == CONST && GET_CODE (XEXP (op, 0)) == PLUS\n@@ -397,7 +403,7 @@ constant_pool_address_operand (op, mode)\n int\n romp_symbolic_operand (op, mode)\n      register rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   switch (GET_CODE (op))\n     {\n@@ -656,7 +662,7 @@ void\n print_operand (file, x, code)\n     FILE *file;\n     rtx x;\n-    char code;\n+    int code;\n {\n   int i;\n \n@@ -1322,10 +1328,10 @@ static struct symref_hashent *symref_hash_table[SYMHASHSIZE];\n    the name string is allocated from the permanent obstack.  */\n rtx\n get_symref (name)\n-     register char *name;\n+     register const char *name;\n {\n   extern struct obstack permanent_obstack;\n-  register char *sp = name;\n+  register const char *sp = name;\n   unsigned int hash = 0;\n   struct symref_hashent *p, **last_p;\n \n@@ -1459,11 +1465,11 @@ hash_rtx (x)\n    A new floating-point operation block is created if this operation has not\n    been seen before.  */\n \n-char *\n+const char *\n output_fpop (code, op0, op1, op2, insn)\n      enum rtx_code code;\n      rtx op0, op1, op2;\n-     rtx insn;\n+     rtx insn ATTRIBUTE_UNUSED;\n {\n   static char outbuf[40];\n   unsigned int hash, hash0, hash1, hash2;\n@@ -1832,7 +1838,7 @@ output_fpops (file)\n \t{\n \t  register int type;\n \t  register int opbyte;\n-\t  register char *desc0;\n+\t  register const char *desc0;\n \t  char desc1[50];\n \n \t  immed[i] = 0;"}, {"sha": "25a6474730ea8d79dc261906fcb3a58c8ccb57c1", "filename": "gcc/config/romp/romp.h", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13d516d91a9f6c73ac3d174804a7004b51a17787/gcc%2Fconfig%2Fromp%2Fromp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13d516d91a9f6c73ac3d174804a7004b51a17787/gcc%2Fconfig%2Fromp%2Fromp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.h?ref=13d516d91a9f6c73ac3d174804a7004b51a17787", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for ROMP chip.\n-   Copyright (C) 1989, 91, 93, 95, 96, 98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 91, 93, 95, 96, 98, 99, 2000 Free Software Foundation, Inc.\n    Contributed by Richard Kenner (kenner@nyu.edu)\n \n This file is part of GNU CC.\n@@ -325,8 +325,8 @@ enum reg_class { NO_REGS, R0_REGS, R15_REGS, BASE_REGS, GENERAL_REGS,\n    This is an initializer for a vector of HARD_REG_SET\n    of length N_REG_CLASSES.  */\n \n-#define REG_CLASS_CONTENTS {0, 0x00001, 0x08000, 0x1fffe, 0x1ffff,  \\\n-\t\t\t    0x1fe0000, 0x1ffffff }\n+#define REG_CLASS_CONTENTS {{0}, {0x00001}, {0x08000}, {0x1fffe}, {0x1ffff},  \\\n+\t\t\t    {0x1fe0000}, {0x1ffffff} }\n \n /* The same information, inverted:\n    Return the class number of the smallest class containing\n@@ -520,7 +520,7 @@ enum reg_class { NO_REGS, R0_REGS, R15_REGS, BASE_REGS, GENERAL_REGS,\n \n #define FUNCTION_VALUE(VALTYPE, FUNC)\t\t\t\t\t\\\n   gen_rtx_REG (TYPE_MODE (VALTYPE),\t\t\t\t\t\\\n-\t       (TARGET_FP_REG\t\t\t\t\t\t\\\n+\t       (TARGET_FP_REGS\t\t\t\t\t\t\\\n \t\t&& GET_MODE_CLASS (TYPE_MODE (VALTYPE)) == MODE_FLOAT)\t\\\n \t       ? 18 : 2)\n \n@@ -627,7 +627,7 @@ struct rt_cargs {int gregs, fregs; };\n #define FUNCTION_ARG(CUM, MODE, TYPE, NAMED)\t\t\t\t\\\n   (! (NAMED) ? 0\t\t\t\t\t\t\t\\\n    : ((TYPE) != 0 && TREE_CODE (TYPE_SIZE (TYPE)) != INTEGER_CST) ? 0\t\\\n-   : USE_FP_REG(MODE,CUM) ? gen_rtx_REG ((MODE), (CUM.fregs) + 17)\t\\\n+   : USE_FP_REG(MODE,CUM) ? gen_rtx_REG ((MODE), (CUM).fregs + 17)\t\\\n    : (CUM).gregs < 4 ? gen_rtx_REG ((MODE), 2 + (CUM).gregs) : 0)\n \n /* For an arg passed partly in registers and partly in memory,\n@@ -1075,7 +1075,7 @@ struct rt_cargs {int gregs, fregs; };\n \thigh_int += 1, low_int |= 0xffff0000;\t\t\t\\\n       (X) = gen_rtx_PLUS (SImode,\t\t\t\t\\\n \t\t\t  force_operand (plus_constant (XEXP (X, 0),  \\\n-\t\t\t\t\t\t\thigh_int << 16)),  \\\n+\t\t\t\t\t\t\thigh_int << 16), 0), \\\n \t\t\t  GEN_INT (low_int));\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n }\n@@ -1200,15 +1200,13 @@ struct rt_cargs {int gregs, fregs; };\n /* A C expression for the integer offset value of an automatic variable\n    (N_LSYM) having address X (an RTX). This gets used in .stabs entries\n    for the local variables. Compare with the default definition.  */\n-extern int romp_debugger_auto_correction();\n #define DEBUGGER_AUTO_OFFSET(X)                        \\\n   (GET_CODE (X) == PLUS                                \\\n    ? romp_debugger_auto_correction (INTVAL (XEXP (X, 1)) ) \\\n    : 0 )\n \n /* A C expression for the integer offset value of an argument (N_PSYM)\n    having address X (an RTX).  The nominal offset is OFFSET.  */\n-extern int romp_debugger_arg_correction();\n #define DEBUGGER_ARG_OFFSET(OFFSET, X)             \\\n   romp_debugger_arg_correction (OFFSET);\n \n@@ -1261,8 +1259,8 @@ extern int romp_debugger_arg_correction();\n \n #define CONST_COSTS(RTX,CODE,OUTER_CODE) \\\n   case CONST_INT:\t\t\t\t\t\t\\\n-    if ((OUTER_CODE) == IOR && exact_log2 (INTVAL (RTX)) >= 0\t\\\n-\t|| (OUTER_CODE) == AND && exact_log2 (~INTVAL (RTX)) >= 0 \\\n+    if (((OUTER_CODE) == IOR && exact_log2 (INTVAL (RTX)) >= 0)\t\\\n+\t|| ((OUTER_CODE) == AND && exact_log2 (~INTVAL (RTX)) >= 0) \\\n \t|| (((OUTER_CODE) == PLUS || (OUTER_CODE) == MINUS)\t\\\n \t    && (unsigned int) (INTVAL (RTX) + 15) < 31)\t\t\\\n \t|| ((OUTER_CODE) == SET && (unsigned int) INTVAL (RTX) < 16))\\\n@@ -1363,7 +1361,7 @@ extern int romp_debugger_arg_correction();\n \n #define ASM_FILE_START(FILE)\t\t\t\t\\\n { extern char *version_string;\t\t\t\t\\\n-  char *p;\t\t\t\t\t\t\\\n+  const char *p;\t\t\t\t\t\\\n \t\t\t\t\t\t\t\\\n   fprintf (FILE, \"\\t.globl .oVncs\\n\\t.set .oVncs,0\\n\") ; \\\n   fprintf (FILE, \"\\t.globl .oVgcc\");\t\t\t\\\n@@ -1628,7 +1626,3 @@ extern int romp_debugger_arg_correction();\n   {\"float_unary\", {NEG, ABS}},\t\t\t\t\t\\\n   {\"float_conversion\", {FLOAT_TRUNCATE, FLOAT_EXTEND, FLOAT, FIX}},\n \n-/* Define functions defined in aux-output.c and used in templates.  */\n-\n-extern char *output_in_line_mul ();\n-extern char *output_fpop ();"}, {"sha": "dc4892e57872824662fe00e661b2fd8f08b241d4", "filename": "gcc/config/romp/romp.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13d516d91a9f6c73ac3d174804a7004b51a17787/gcc%2Fconfig%2Fromp%2Fromp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13d516d91a9f6c73ac3d174804a7004b51a17787/gcc%2Fconfig%2Fromp%2Fromp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.md?ref=13d516d91a9f6c73ac3d174804a7004b51a17787", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for ROMP chip for GNU C compiler\n-;;   Copyright (C) 1988, 91, 93, 94, 95, 98, 1999 Free Software Foundation, Inc.\n+;;   Copyright (C) 1988, 91, 93-95, 98, 99, 2000 Free Software Foundation, Inc.\n ;;   Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n \n ;; This file is part of GNU CC.\n@@ -438,6 +438,8 @@\n       return \\\"get %O0,$%1\\;ls %0,0(%O0)\\;ls %O0,4(%O0)\\\";\n     case 3:\n       return \\\"st%M0 %1,%0\\;st%M0 %O1,%O0\\\";\n+    default:\n+      abort();\n     }\n }\"\n   [(set_attr \"type\" \"multi\")\n@@ -1541,7 +1543,7 @@\n       if (top != 0 && bottom != 0)\n \t{\n \t  emit_insn (gen_iorsi3 (operands[0], operands[1],\n-\t\t\t\t GEN_INT (top << 16))));\n+\t\t\t\t GEN_INT (top << 16)));\n \t  operands[1] = operands[0];\n \t  operands[2] = GEN_INT (bottom);\n \t}"}]}