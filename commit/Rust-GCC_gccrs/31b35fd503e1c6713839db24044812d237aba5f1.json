{"sha": "31b35fd503e1c6713839db24044812d237aba5f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFiMzVmZDUwM2UxYzY3MTM4MzlkYjI0MDQ0ODEyZDIzN2FiYTVmMQ==", "commit": {"author": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2019-10-17T12:07:04Z"}, "committer": {"name": "Andre Vieira", "email": "avieira@gcc.gnu.org", "date": "2019-10-17T12:07:04Z"}, "message": "[vect] Outline code into new function: determine_peel_for_niter\n\ngcc/ChangeLog:\n2019-10-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* tree-vect-loop.c (determine_peel_for_niter): New function contained\n\toutlined code from ...\n\t(vect_analyze_loop_2): ... here.\n\nFrom-SVN: r277103", "tree": {"sha": "0897c76acc70917e753dcf1c14db3cf8a98e360d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0897c76acc70917e753dcf1c14db3cf8a98e360d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31b35fd503e1c6713839db24044812d237aba5f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31b35fd503e1c6713839db24044812d237aba5f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31b35fd503e1c6713839db24044812d237aba5f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31b35fd503e1c6713839db24044812d237aba5f1/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e400b49192683f2f57e1e977b5d4d302c63ab8aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e400b49192683f2f57e1e977b5d4d302c63ab8aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e400b49192683f2f57e1e977b5d4d302c63ab8aa"}], "stats": {"total": 98, "additions": 58, "deletions": 40}, "files": [{"sha": "9b17a6d5bbd7b4fb8ded5cebb038da6079cf5c2c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b35fd503e1c6713839db24044812d237aba5f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b35fd503e1c6713839db24044812d237aba5f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31b35fd503e1c6713839db24044812d237aba5f1", "patch": "@@ -1,3 +1,9 @@\n+2019-10-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* tree-vect-loop.c (determine_peel_for_niter): New function contained\n+\toutlined code from ...\n+\t(vect_analyze_loop_2): ... here.\n+\n 2019-10-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* tree-vect-loop.c (vect_transform_loop): Move code from here..."}, {"sha": "df9f159e7744426c1f6bbe91b0aabe1b921bcdeb", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 52, "deletions": 40, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b35fd503e1c6713839db24044812d237aba5f1/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b35fd503e1c6713839db24044812d237aba5f1/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=31b35fd503e1c6713839db24044812d237aba5f1", "patch": "@@ -1808,6 +1808,57 @@ vect_dissolve_slp_only_groups (loop_vec_info loop_vinfo)\n     }\n }\n \n+\n+/* Decides whether we need to create an epilogue loop to handle\n+   remaining scalar iterations and sets PEELING_FOR_NITERS accordingly.  */\n+\n+void\n+determine_peel_for_niter (loop_vec_info loop_vinfo)\n+{\n+  LOOP_VINFO_PEELING_FOR_NITER (loop_vinfo) = false;\n+\n+  unsigned HOST_WIDE_INT const_vf;\n+  HOST_WIDE_INT max_niter\n+    = likely_max_stmt_executions_int (LOOP_VINFO_LOOP (loop_vinfo));\n+\n+  unsigned th = LOOP_VINFO_COST_MODEL_THRESHOLD (loop_vinfo);\n+  if (!th && LOOP_VINFO_ORIG_LOOP_INFO (loop_vinfo))\n+    th = LOOP_VINFO_COST_MODEL_THRESHOLD (LOOP_VINFO_ORIG_LOOP_INFO\n+\t\t\t\t\t  (loop_vinfo));\n+\n+  if (LOOP_VINFO_FULLY_MASKED_P (loop_vinfo))\n+    /* The main loop handles all iterations.  */\n+    LOOP_VINFO_PEELING_FOR_NITER (loop_vinfo) = false;\n+  else if (LOOP_VINFO_NITERS_KNOWN_P (loop_vinfo)\n+\t   && LOOP_VINFO_PEELING_FOR_ALIGNMENT (loop_vinfo) >= 0)\n+    {\n+      /* Work out the (constant) number of iterations that need to be\n+\t peeled for reasons other than niters.  */\n+      unsigned int peel_niter = LOOP_VINFO_PEELING_FOR_ALIGNMENT (loop_vinfo);\n+      if (LOOP_VINFO_PEELING_FOR_GAPS (loop_vinfo))\n+\tpeel_niter += 1;\n+      if (!multiple_p (LOOP_VINFO_INT_NITERS (loop_vinfo) - peel_niter,\n+\t\t       LOOP_VINFO_VECT_FACTOR (loop_vinfo)))\n+\tLOOP_VINFO_PEELING_FOR_NITER (loop_vinfo) = true;\n+    }\n+  else if (LOOP_VINFO_PEELING_FOR_ALIGNMENT (loop_vinfo)\n+\t   /* ??? When peeling for gaps but not alignment, we could\n+\t      try to check whether the (variable) niters is known to be\n+\t      VF * N + 1.  That's something of a niche case though.  */\n+\t   || LOOP_VINFO_PEELING_FOR_GAPS (loop_vinfo)\n+\t   || !LOOP_VINFO_VECT_FACTOR (loop_vinfo).is_constant (&const_vf)\n+\t   || ((tree_ctz (LOOP_VINFO_NITERS (loop_vinfo))\n+\t\t< (unsigned) exact_log2 (const_vf))\n+\t       /* In case of versioning, check if the maximum number of\n+\t\t  iterations is greater than th.  If they are identical,\n+\t\t  the epilogue is unnecessary.  */\n+\t       && (!LOOP_REQUIRES_VERSIONING (loop_vinfo)\n+\t\t   || ((unsigned HOST_WIDE_INT) max_niter\n+\t\t       > (th / const_vf) * const_vf))))\n+    LOOP_VINFO_PEELING_FOR_NITER (loop_vinfo) = true;\n+}\n+\n+\n /* Function vect_analyze_loop_2.\n \n    Apply a set of analyses on LOOP, and create a loop_vec_info struct\n@@ -1935,7 +1986,6 @@ vect_analyze_loop_2 (loop_vec_info loop_vinfo, bool &fatal, unsigned *n_stmts)\n   vect_compute_single_scalar_iteration_cost (loop_vinfo);\n \n   poly_uint64 saved_vectorization_factor = LOOP_VINFO_VECT_FACTOR (loop_vinfo);\n-  unsigned th;\n \n   /* Check the SLP opportunities in the loop, analyze and build SLP trees.  */\n   ok = vect_analyze_slp (loop_vinfo, *n_stmts);\n@@ -1975,9 +2025,6 @@ vect_analyze_loop_2 (loop_vec_info loop_vinfo, bool &fatal, unsigned *n_stmts)\n \t\t   LOOP_VINFO_INT_NITERS (loop_vinfo));\n     }\n \n-  HOST_WIDE_INT max_niter\n-    = likely_max_stmt_executions_int (LOOP_VINFO_LOOP (loop_vinfo));\n-\n   /* Analyze the alignment of the data-refs in the loop.\n      Fail if a data reference is found that cannot be vectorized.  */\n \n@@ -2081,42 +2128,7 @@ vect_analyze_loop_2 (loop_vec_info loop_vinfo, bool &fatal, unsigned *n_stmts)\n     return opt_result::failure_at (vect_location,\n \t\t\t\t   \"Loop costings not worthwhile.\\n\");\n \n-  /* Decide whether we need to create an epilogue loop to handle\n-     remaining scalar iterations.  */\n-  th = LOOP_VINFO_COST_MODEL_THRESHOLD (loop_vinfo);\n-\n-  unsigned HOST_WIDE_INT const_vf;\n-  if (LOOP_VINFO_FULLY_MASKED_P (loop_vinfo))\n-    /* The main loop handles all iterations.  */\n-    LOOP_VINFO_PEELING_FOR_NITER (loop_vinfo) = false;\n-  else if (LOOP_VINFO_NITERS_KNOWN_P (loop_vinfo)\n-\t   && LOOP_VINFO_PEELING_FOR_ALIGNMENT (loop_vinfo) >= 0)\n-    {\n-      /* Work out the (constant) number of iterations that need to be\n-\t peeled for reasons other than niters.  */\n-      unsigned int peel_niter = LOOP_VINFO_PEELING_FOR_ALIGNMENT (loop_vinfo);\n-      if (LOOP_VINFO_PEELING_FOR_GAPS (loop_vinfo))\n-\tpeel_niter += 1;\n-      if (!multiple_p (LOOP_VINFO_INT_NITERS (loop_vinfo) - peel_niter,\n-\t\t       LOOP_VINFO_VECT_FACTOR (loop_vinfo)))\n-\tLOOP_VINFO_PEELING_FOR_NITER (loop_vinfo) = true;\n-    }\n-  else if (LOOP_VINFO_PEELING_FOR_ALIGNMENT (loop_vinfo)\n-\t   /* ??? When peeling for gaps but not alignment, we could\n-\t      try to check whether the (variable) niters is known to be\n-\t      VF * N + 1.  That's something of a niche case though.  */\n-\t   || LOOP_VINFO_PEELING_FOR_GAPS (loop_vinfo)\n-\t   || !LOOP_VINFO_VECT_FACTOR (loop_vinfo).is_constant (&const_vf)\n-\t   || ((tree_ctz (LOOP_VINFO_NITERS (loop_vinfo))\n-\t\t< (unsigned) exact_log2 (const_vf))\n-\t       /* In case of versioning, check if the maximum number of\n-\t\t  iterations is greater than th.  If they are identical,\n-\t\t  the epilogue is unnecessary.  */\n-\t       && (!LOOP_REQUIRES_VERSIONING (loop_vinfo)\n-\t\t   || ((unsigned HOST_WIDE_INT) max_niter\n-\t\t       > (th / const_vf) * const_vf))))\n-    LOOP_VINFO_PEELING_FOR_NITER (loop_vinfo) = true;\n-\n+  determine_peel_for_niter (loop_vinfo);\n   /* If an epilogue loop is required make sure we can create one.  */\n   if (LOOP_VINFO_PEELING_FOR_GAPS (loop_vinfo)\n       || LOOP_VINFO_PEELING_FOR_NITER (loop_vinfo))"}]}