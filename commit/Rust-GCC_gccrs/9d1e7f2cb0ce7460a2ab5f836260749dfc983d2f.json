{"sha": "9d1e7f2cb0ce7460a2ab5f836260749dfc983d2f", "node_id": "C_kwDOANBUbNoAKDlkMWU3ZjJjYjBjZTc0NjBhMmFiNWY4MzYyNjA3NDlkZmM5ODNkMmY", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-04-18T14:22:22Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-05-05T11:56:07Z"}, "message": "enr: Accumulate nested escaped macros properly.\n\ngcc/rust/ChangeLog:\n\t* resolve/rust-early-name-resolver.cc (is_macro_use_module): New function.\n\t(EarlyNameResolver::accumulate_escaped_macros): New function.\n\t(EarlyNameResolver::go): Use `accumulate_escaped_macros`.\n\t(EarlyNameResolver::visit): Likewise.\n\t* resolve/rust-early-name-resolver.h: Declare `accumulate_escaped_macros`.\n\ngcc/testsuite/ChangeLog:\n\t* rust/compile/macro_use1.rs: New test.\n\t* rust/execute/torture/macro_use1.rs: New test.\n\t* rust/compile/nested_macro_use1.rs: New test.\n\t* rust/compile/nested_macro_use2.rs: New test.", "tree": {"sha": "3bad584bfb04c4bde66dbc835288f60d0b4a80a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bad584bfb04c4bde66dbc835288f60d0b4a80a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d1e7f2cb0ce7460a2ab5f836260749dfc983d2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d1e7f2cb0ce7460a2ab5f836260749dfc983d2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d1e7f2cb0ce7460a2ab5f836260749dfc983d2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d1e7f2cb0ce7460a2ab5f836260749dfc983d2f/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f9a757b73c328d9e29a8d872c0a3ed699efbfb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f9a757b73c328d9e29a8d872c0a3ed699efbfb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f9a757b73c328d9e29a8d872c0a3ed699efbfb5"}], "stats": {"total": 177, "additions": 174, "deletions": 3}, "files": [{"sha": "bd1792097b398cf4aedfb0e74e13b759d03fe06a", "filename": "gcc/rust/resolve/rust-early-name-resolver.cc", "status": "modified", "additions": 98, "deletions": 3, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d1e7f2cb0ce7460a2ab5f836260749dfc983d2f/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d1e7f2cb0ce7460a2ab5f836260749dfc983d2f/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.cc?ref=9d1e7f2cb0ce7460a2ab5f836260749dfc983d2f", "patch": "@@ -24,6 +24,55 @@\n namespace Rust {\n namespace Resolver {\n \n+// Check if a module contains the `#[macro_use]` attribute\n+static bool\n+is_macro_use_module (const AST::Module &mod)\n+{\n+  for (const auto &attr : mod.get_outer_attrs ())\n+    if (attr.get_path ().as_string () == \"macro_use\")\n+      return true;\n+\n+  return false;\n+}\n+\n+std::vector<std::unique_ptr<AST::Item>>\n+EarlyNameResolver::accumulate_escaped_macros (AST::Module &module)\n+{\n+  if (!is_macro_use_module (module))\n+    return {};\n+\n+  // Parse the module's items if they haven't been expanded and the file\n+  // should be parsed (i.e isn't hidden behind an untrue or impossible cfg\n+  // directive)\n+  if (module.get_kind () == AST::Module::UNLOADED)\n+    module.load_items ();\n+\n+  std::vector<std::unique_ptr<AST::Item>> escaped_macros;\n+\n+  scoped (module.get_node_id (), [&module, &escaped_macros, this] {\n+    for (auto &item : module.get_items ())\n+      {\n+\tif (item->get_ast_kind () == AST::Kind::MODULE)\n+\t  {\n+\t    auto &module = *static_cast<AST::Module *> (item.get ());\n+\t    auto new_macros = accumulate_escaped_macros (module);\n+\n+\t    std::move (new_macros.begin (), new_macros.end (),\n+\t\t       std::back_inserter (escaped_macros));\n+\n+\t    continue;\n+\t  }\n+\n+\titem->accept_vis (*this);\n+\n+\tif (item->get_ast_kind () == AST::Kind::MACRO_RULES_DEFINITION)\n+\t  escaped_macros.emplace_back (item->clone_item ());\n+      }\n+  });\n+\n+  return escaped_macros;\n+}\n+\n EarlyNameResolver::EarlyNameResolver ()\n   : current_scope (UNKNOWN_NODEID), resolver (*Resolver::get ()),\n     mappings (*Analysis::Mappings::get ())\n@@ -32,6 +81,29 @@ EarlyNameResolver::EarlyNameResolver ()\n void\n EarlyNameResolver::go (AST::Crate &crate)\n {\n+  std::vector<std::unique_ptr<AST::Item>> new_items;\n+  auto items = crate.take_items ();\n+\n+  scoped (crate.get_node_id (), [&items, &new_items, this] {\n+    for (auto &&item : items)\n+      {\n+\tif (item->get_ast_kind () == AST::Kind::MODULE)\n+\t  {\n+\t    auto macros = accumulate_escaped_macros (\n+\t      *static_cast<AST::Module *> (item.get ()));\n+\t    new_items.emplace_back (std::move (item));\n+\t    std::move (macros.begin (), macros.end (),\n+\t\t       std::back_inserter (new_items));\n+\t  }\n+\telse\n+\t  {\n+\t    new_items.emplace_back (std::move (item));\n+\t  }\n+      }\n+  });\n+\n+  crate.set_items (std::move (new_items));\n+\n   scoped (crate.get_node_id (), [&crate, this] () {\n     for (auto &item : crate.items)\n       item->accept_vis (*this);\n@@ -550,12 +622,35 @@ EarlyNameResolver::visit (AST::Method &method)\n void\n EarlyNameResolver::visit (AST::Module &module)\n {\n-  // Parse the module's items if they haven't been expanded and the file\n-  // should be parsed (i.e isn't hidden behind an untrue or impossible cfg\n-  // directive)\n   if (module.get_kind () == AST::Module::UNLOADED)\n     module.load_items ();\n \n+  // so we need to only go \"one scope down\" for fetching macros. Macros within\n+  // functions are still scoped only within that function. But we have to be\n+  // careful because nested modules with #[macro_use] actually works!\n+  std::vector<std::unique_ptr<AST::Item>> new_items;\n+  auto items = module.take_items ();\n+\n+  scoped (module.get_node_id (), [&items, &new_items, this] {\n+    for (auto &&item : items)\n+      {\n+\tif (item->get_ast_kind () == AST::Kind::MODULE)\n+\t  {\n+\t    auto macros = accumulate_escaped_macros (\n+\t      *static_cast<AST::Module *> (item.get ()));\n+\t    new_items.emplace_back (std::move (item));\n+\t    std::move (macros.begin (), macros.end (),\n+\t\t       std::back_inserter (new_items));\n+\t  }\n+\telse\n+\t  {\n+\t    new_items.emplace_back (std::move (item));\n+\t  }\n+      }\n+  });\n+\n+  module.set_items (std::move (new_items));\n+\n   scoped (module.get_node_id (), [&module, this] () {\n     for (auto &item : module.get_items ())\n       item->accept_vis (*this);"}, {"sha": "a396b7d6c2879efed66dcbb1530d56400e6d85e5", "filename": "gcc/rust/resolve/rust-early-name-resolver.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d1e7f2cb0ce7460a2ab5f836260749dfc983d2f/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d1e7f2cb0ce7460a2ab5f836260749dfc983d2f/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.h?ref=9d1e7f2cb0ce7460a2ab5f836260749dfc983d2f", "patch": "@@ -53,6 +53,18 @@ class EarlyNameResolver : public AST::ASTVisitor\n     current_scope = old_scope;\n   }\n \n+  /**\n+   * Accumulate all of the nested macros which escape their module through the\n+   * use of the #[macro_use] attribute.\n+   *\n+   * This function recursively accumulates macros in all of the nested modules\n+   * of an item container (an AST::Crate or an AST::Module) and returns this new\n+   * list of items. You can then use the `take_items` and `set_items` functions\n+   * on these containers to replace their list of items.\n+   */\n+  std::vector<std::unique_ptr<AST::Item>>\n+  accumulate_escaped_macros (AST::Module &module);\n+\n   /**\n    * The \"scope\" we are currently in.\n    *"}, {"sha": "e98eadff0ae2b38cd8d733795ab4c70ef5990846", "filename": "gcc/testsuite/rust/compile/macro_use1.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d1e7f2cb0ce7460a2ab5f836260749dfc983d2f/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro_use1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d1e7f2cb0ce7460a2ab5f836260749dfc983d2f/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro_use1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro_use1.rs?ref=9d1e7f2cb0ce7460a2ab5f836260749dfc983d2f", "patch": "@@ -0,0 +1,15 @@\n+#[macro_use]\n+mod foo {\n+    macro_rules! a {\n+        () => {};\n+    }\n+\n+    macro_rules! b {\n+        () => {};\n+    }\n+}\n+\n+fn main() {\n+    a!();\n+    b!();\n+}"}, {"sha": "8a2fd2ac82dbb90154a754aaef7a723e78200103", "filename": "gcc/testsuite/rust/compile/nested_macro_use1.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d1e7f2cb0ce7460a2ab5f836260749dfc983d2f/gcc%2Ftestsuite%2Frust%2Fcompile%2Fnested_macro_use1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d1e7f2cb0ce7460a2ab5f836260749dfc983d2f/gcc%2Ftestsuite%2Frust%2Fcompile%2Fnested_macro_use1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fnested_macro_use1.rs?ref=9d1e7f2cb0ce7460a2ab5f836260749dfc983d2f", "patch": "@@ -0,0 +1,19 @@\n+#[macro_use]\n+mod foo {\n+    #[macro_use]\n+    mod zim {\n+        #[macro_use]\n+        mod zoom {\n+            #[macro_use]\n+            mod zum {\n+                macro_rules! qux {\n+                    () => {};\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn main() {\n+    qux!(); // OK\n+}"}, {"sha": "4659500871098c565f589d8100b25cd543db0a8e", "filename": "gcc/testsuite/rust/compile/nested_macro_use2.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d1e7f2cb0ce7460a2ab5f836260749dfc983d2f/gcc%2Ftestsuite%2Frust%2Fcompile%2Fnested_macro_use2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d1e7f2cb0ce7460a2ab5f836260749dfc983d2f/gcc%2Ftestsuite%2Frust%2Fcompile%2Fnested_macro_use2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fnested_macro_use2.rs?ref=9d1e7f2cb0ce7460a2ab5f836260749dfc983d2f", "patch": "@@ -0,0 +1,12 @@\n+#[macro_use]\n+mod foo {\n+    fn bar() {\n+        macro_rules! baz {\n+            () => {{}};\n+        }\n+    }\n+}\n+\n+fn main() {\n+    baz!(); // { dg-error \"unknown macro: .baz.\" }\n+}"}, {"sha": "fdf553012ebfce61af1ffd117de8fbe254cba782", "filename": "gcc/testsuite/rust/execute/torture/macro_use1.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d1e7f2cb0ce7460a2ab5f836260749dfc983d2f/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacro_use1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d1e7f2cb0ce7460a2ab5f836260749dfc983d2f/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacro_use1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacro_use1.rs?ref=9d1e7f2cb0ce7460a2ab5f836260749dfc983d2f", "patch": "@@ -0,0 +1,18 @@\n+#[macro_use]\n+mod foo {\n+    macro_rules! a {\n+        () => {\n+            15\n+        };\n+    }\n+\n+    macro_rules! b {\n+        () => {\n+            14\n+        };\n+    }\n+}\n+\n+fn main() -> i32 {\n+    a!() + b!() - 29\n+}"}]}