{"sha": "1121e495b70105deeb82295f8210e30f2080bc37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTEyMWU0OTViNzAxMDVkZWViODIyOTVmODIxMGUzMGYyMDgwYmMzNw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-07-28T22:25:40Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-07-28T22:25:40Z"}, "message": "Correct uninitialized object offset and size computation [PR101494].\n\nResolves:\nPR middle-end/101494 - -Wuninitialized false alarm with memrchr of size 0\n\ngcc/ChangeLog:\n\n\tPR middle-end/101494\n\t* tree-ssa-uninit.c (maybe_warn_operand): Correct object offset\n\tand size computation.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/101494\n\t* gcc.dg/uninit-pr101494.c: New test.", "tree": {"sha": "2848e49b3eef7021e3e034f6a7f31f68a946350d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2848e49b3eef7021e3e034f6a7f31f68a946350d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1121e495b70105deeb82295f8210e30f2080bc37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1121e495b70105deeb82295f8210e30f2080bc37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1121e495b70105deeb82295f8210e30f2080bc37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1121e495b70105deeb82295f8210e30f2080bc37/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9cbf8c9e0bc72f59b643165247fae646560aadd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9cbf8c9e0bc72f59b643165247fae646560aadd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9cbf8c9e0bc72f59b643165247fae646560aadd"}], "stats": {"total": 80, "additions": 72, "deletions": 8}, "files": [{"sha": "d3267b6e43a4fe4c7a9c7b42c4958b6989ccebed", "filename": "gcc/testsuite/gcc.dg/uninit-pr101494.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1121e495b70105deeb82295f8210e30f2080bc37/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr101494.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1121e495b70105deeb82295f8210e30f2080bc37/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr101494.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr101494.c?ref=1121e495b70105deeb82295f8210e30f2080bc37", "patch": "@@ -0,0 +1,60 @@\n+/* PR middle-end/101494 - bogus -Wmaybe-uninitialized on memrchr of size 0\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+void* alloca (size_t);\n+\n+__attribute__ ((malloc, alloc_size (1))) void* alloc (size_t);\n+\n+__attribute__ ((access (read_only, 1, 2))) void* sink (void*, size_t);\n+\n+void test_alloca_zero (size_t i)\n+{\n+  char *p = alloca (0);\n+  sink (p, 0);      // { dg-bogus \"\\\\\\[-Wuninitialized\" }\n+}\n+\n+void test_alloca_zero_pi (size_t i)\n+{\n+  char *p = alloca (0);\n+  sink (p + i, 0);\n+}\n+\n+void test_alloca_cst (void)\n+{\n+  char *p = alloca (7);\n+  sink (p, 0);      // { dg-bogus \"\\\\\\[-Wuninitialized\" }\n+}\n+\n+void test_alloca_cst_p1 (void)\n+{\n+  char *p = alloca (7);\n+  sink (p + 1, 0);  // { dg-bogus \"\\\\\\[-Wuninitialized\" }\n+}\n+\n+void test_alloca_cst_p7 (void)\n+{\n+  char *p = alloca (7);\n+  sink (p + 7, 0);  // { dg-bogus \"\\\\\\[-Wuninitialized\" }\n+}\n+\n+void test_alloca_var (size_t n)\n+{\n+  char *p = alloca (n);\n+  sink (p, 0);      // { dg-bogus \"\\\\\\[-Wuninitialized\" }\n+}\n+\n+void test_alloca_var_p1 (size_t n)\n+{\n+  char *p = alloca (n);\n+  sink (p + 1, 0);  // { dg-bogus \"\\\\\\[-Wuninitialized\" }\n+}\n+\n+void test_alloca_var_pn (size_t n)\n+{\n+  char *p = alloca (n);\n+  sink (p + n, 0);  // { dg-bogus \"\\\\\\[-Wuninitialized\" }\n+}\n+"}, {"sha": "5d7bc8004196b72156f0744674493a2f4164725a", "filename": "gcc/tree-ssa-uninit.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1121e495b70105deeb82295f8210e30f2080bc37/gcc%2Ftree-ssa-uninit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1121e495b70105deeb82295f8210e30f2080bc37/gcc%2Ftree-ssa-uninit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.c?ref=1121e495b70105deeb82295f8210e30f2080bc37", "patch": "@@ -371,16 +371,20 @@ maybe_warn_operand (ao_ref &ref, gimple *stmt, tree lhs, tree rhs,\n       || get_no_uninit_warning (base))\n     return NULL_TREE;\n \n-  /* Do not warn if the access is fully outside of the variable.  */\n+  /* Do not warn if the access is zero size or if it's fully outside\n+     the object.  */\n   poly_int64 decl_size;\n+  if (known_size_p (ref.size)\n+      && known_eq (ref.max_size, ref.size)\n+      && (known_eq (ref.size, 0)\n+\t  || known_le (ref.offset + ref.size, 0)))\n+    return NULL_TREE;\n+\n   if (DECL_P (base)\n-      && ((known_size_p (ref.size)\n-\t   && known_eq (ref.max_size, ref.size)\n-\t   && known_le (ref.offset + ref.size, 0))\n-\t  || (known_ge (ref.offset, 0)\n-\t      && DECL_SIZE (base)\n-\t      && poly_int_tree_p (DECL_SIZE (base), &decl_size)\n-\t      && known_le (decl_size, ref.offset))))\n+      && known_ge (ref.offset, 0)\n+      && DECL_SIZE (base)\n+      && poly_int_tree_p (DECL_SIZE (base), &decl_size)\n+      && known_le (decl_size, ref.offset))\n     return NULL_TREE;\n \n   /* Do not warn if the result of the access is then used for"}]}