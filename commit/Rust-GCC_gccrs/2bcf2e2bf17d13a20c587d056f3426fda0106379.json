{"sha": "2bcf2e2bf17d13a20c587d056f3426fda0106379", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJjZjJlMmJmMTdkMTNhMjBjNTg3ZDA1NmYzNDI2ZmRhMDEwNjM3OQ==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2005-06-27T06:42:32Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2005-06-27T06:42:32Z"}, "message": "test_struct_returning.c: Adjust as return slot is not merged if address escapes.\n\n        * gcc.target/x86_64/abi/test_struct_returning.c: Adjust as return\n        slot is not merged if address escapes.\n\nFrom-SVN: r101347", "tree": {"sha": "410a81c4c855a0b5a521307d6cd4acb20e8c510d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/410a81c4c855a0b5a521307d6cd4acb20e8c510d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bcf2e2bf17d13a20c587d056f3426fda0106379", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bcf2e2bf17d13a20c587d056f3426fda0106379", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bcf2e2bf17d13a20c587d056f3426fda0106379", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bcf2e2bf17d13a20c587d056f3426fda0106379/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dc9207b34e4911724605ac71fbe60e645921f16a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc9207b34e4911724605ac71fbe60e645921f16a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc9207b34e4911724605ac71fbe60e645921f16a"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "c587b1357ed7df697fff6941975eedf98dcdc88b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bcf2e2bf17d13a20c587d056f3426fda0106379/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bcf2e2bf17d13a20c587d056f3426fda0106379/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2bcf2e2bf17d13a20c587d056f3426fda0106379", "patch": "@@ -1,3 +1,8 @@\n+2005-06-27  Michael Matz  <matz@suse.de>\n+\n+\t* gcc.target/x86_64/abi/test_struct_returning.c: Adjust as return\n+\tslot is not merged if address escapes.\n+\n 2005-06-26  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \tPR c/21911"}, {"sha": "ef8d32904837a4639a35c11a2df7291679ceec1d", "filename": "gcc/testsuite/gcc.target/x86_64/abi/test_struct_returning.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bcf2e2bf17d13a20c587d056f3426fda0106379/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Ftest_struct_returning.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bcf2e2bf17d13a20c587d056f3426fda0106379/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Ftest_struct_returning.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Ftest_struct_returning.c?ref=2bcf2e2bf17d13a20c587d056f3426fda0106379", "patch": "@@ -137,7 +137,7 @@ void check_400 (void)\n /* Structures which should be returned in MEM.  */\n void *struct_addr;\n #define D(I,MEMBERS) struct S_ ## I { MEMBERS ; }; Type class_ ## I = MEM; \\\n-struct S_ ## I f_ ## I (void) { struct S_ ## I s; memset (&s, 0, sizeof(s)); s.m1[0] = 42; return s; }\n+struct S_ ## I f_ ## I (void) { union {unsigned char c; struct S_ ## I s;} u; memset (&u.s, 0, sizeof(u.s)); u.c = 42; return u.s; }\n \n /* Too large.  */\n D(500,char m1[17])\n@@ -184,7 +184,16 @@ void check_all (Type class, unsigned long size)\n     case X87: assert (x87_regs[0]._ldouble == 42); break;\n     case INT_SSE: check_300(); break;\n     case SSE_INT: check_400(); break;\n-    case MEM: assert (rax == (unsigned long)struct_addr && rdi == rax); break;\n+    /* Ideally we would like to check that rax == struct_addr.\n+       Unfortunately the address of the target struct escapes (for setting\n+       struct_addr), so the return struct is a temporary one whose address\n+       is given to the f_* functions, otherwise a conforming program\n+       could notice the struct changing already before the function returns.\n+       This temporary struct could be anywhere.  For GCC it will be on\n+       stack, but noone is forbidding that it could be a static variable\n+       if there's no threading or proper locking.  Nobody in his right mind\n+       will not use the stack for that.  */\n+    case MEM: assert (*(unsigned char*)struct_addr == 42 && rdi == rax); break;\n   }\n }\n "}]}