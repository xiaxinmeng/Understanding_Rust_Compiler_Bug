{"sha": "a6733c7124eff1ef3516614e2342ff9549531b8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY3MzNjNzEyNGVmZjFlZjM1MTY2MTRlMjM0MmZmOTU0OTUzMWI4Yg==", "commit": {"author": {"name": "Andreas Simbuerger", "email": "simbuerg@fim.uni-passau.de", "date": "2010-05-06T21:53:47Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-05-06T21:53:47Z"}, "message": "Add ChangeLog entries.\n\nFrom-SVN: r159135", "tree": {"sha": "f81e7c766b22a07b9f8e1165a276b968bc132c7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f81e7c766b22a07b9f8e1165a276b968bc132c7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6733c7124eff1ef3516614e2342ff9549531b8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6733c7124eff1ef3516614e2342ff9549531b8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6733c7124eff1ef3516614e2342ff9549531b8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6733c7124eff1ef3516614e2342ff9549531b8b/comments", "author": {"login": "simbuerg", "id": 598281, "node_id": "MDQ6VXNlcjU5ODI4MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/598281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simbuerg", "html_url": "https://github.com/simbuerg", "followers_url": "https://api.github.com/users/simbuerg/followers", "following_url": "https://api.github.com/users/simbuerg/following{/other_user}", "gists_url": "https://api.github.com/users/simbuerg/gists{/gist_id}", "starred_url": "https://api.github.com/users/simbuerg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simbuerg/subscriptions", "organizations_url": "https://api.github.com/users/simbuerg/orgs", "repos_url": "https://api.github.com/users/simbuerg/repos", "events_url": "https://api.github.com/users/simbuerg/events{/privacy}", "received_events_url": "https://api.github.com/users/simbuerg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1af9e5f460e7e04222953d9d958b6d5eb2c56ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1af9e5f460e7e04222953d9d958b6d5eb2c56ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1af9e5f460e7e04222953d9d958b6d5eb2c56ea"}], "stats": {"total": 93, "additions": 93, "deletions": 0}, "files": [{"sha": "5839779cb8ed45cf9de020a6d600d33c12869e3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6733c7124eff1ef3516614e2342ff9549531b8b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6733c7124eff1ef3516614e2342ff9549531b8b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6733c7124eff1ef3516614e2342ff9549531b8b", "patch": "@@ -1,3 +1,96 @@\n+2010-05-05  Andreas Simbuerger  <simbuerg@fim.uni-passau.de>\n+\n+\t* graphite-blocking.c\n+\t(pbb_strip_mine_profitable_p): Replace Value with mpz_t.\n+\t* graphite-clast-to-gimple.c\n+\t(clast_to_gcc_expression): Same.\n+\t(precision_for_value): Same.\n+\t(precision_for_interval): Same.\n+\t(gcc_type_for_interval): Same.\n+\t(graphite_create_new_guard): Same.\n+\t(compute_bounds_for_level): Same.\n+\t(graphite_create_new_loop_guard): Same.\n+\t* graphite-interchange.c\n+\t(build_linearized_memory_access): Same.\n+\t(pdr_stride_in_loop): Same.\n+\t(memory_strides_in_loop_1): Same.\n+\t(memory_strides_in_loop): Same.\n+\t(extend_scattering): Same.\n+\t(psct_scattering_dim_for_loop_depth): Same.\n+\t(pbb_number_of_iterations): Same.\n+\t* graphite-poly.h\n+\t(debug_iteration_domains): Same.\n+\t* graphite-ppl.c\n+\t(new_Cloog_Domain_from_ppl_Pointset_Powerset): Same.\n+\t(ppl_set_inhomogeneous_gmp): Same.\n+\t(ppl_strip_loop): Same.\n+\t(ppl_lexico_compare_linear_expressions): Same.\n+\t(ppl_read_polyhedron_matrix): Same.\n+\t(ppl_max_for_le_pointset): Same.\n+\t* graphite-ppl.h\n+\t(ppl_read_polyhedron_matrix): Same.\n+\t(tree_int_to_gmp): Same.\n+\t(gmp_cst_to_tree): Same.\n+\t(ppl_set_inhomogeneous): Same.\n+\t(ppl_set_inhomogeneous_tree): Same.\n+\t(ppl_set_coef): Same.\n+\t(ppl_set_coef_tree): Same.\n+\t* graphite-sese-to-poly.c\n+\t(build_pbb_scattering_polyhedrons): Same.\n+\t(build_scop_scattering): Same.\n+\t(scan_tree_for_params_right_scev): Same.\n+\t(scan_tree_for_params): Same.\n+\t(find_params_in_bb): Same.\n+\t(find_scop_parameters): Same.\n+\t(add_upper_bounds_from_estimated_nit): Same.\n+\t(build_loop_iteration_domains): Same.\n+\t(add_condition_to_domain): Same.\n+\t(pdr_add_memory_accesses): Same.\n+\n+2010-05-05  Andreas Simbuerger  <simbuerg@fim.uni-passau.de>\n+\n+\t* graphite-blocking.c (pbb_strip_mine_profitable_p): Resolve\n+\tCLooG's value_* macros to their respective mpz_* counterparts.\n+\t* graphite-clast-to-gimple.c (clast_to_gcc_expression): Same.\n+\t(graphite_create_new_loop_guard): Same.\n+\t* graphite-interchange.c (build_linearized_memory_access): Same.\n+\t(pdr_stride_in_loop): Same.\n+\t(memory_strides_in_loop_1): Same.\n+\t(1st_interchange_profitable_p): Same.\n+\t* graphite-poly.c (extend_scattering): Same.\n+\t(psct_scattering_dim_for_loop_depth): Same.\n+\t(pbb_number_of_iterations): Same.\n+\t(pbb_number_of_iterations_at_time): Same.\n+\t* graphite-poly.h (new_1st_loop): Same.\n+\t* graphite-ppl.c (cloog_matrix_to_ppl_constraint): Same.\n+\t(oppose_constraint): Same.\n+\t(insert_constraint_into_matrix): Same.\n+\t(ppl_set_inhomogeneous_gmp): Same.\n+\t(ppl_set_coef_gmp): Same.\n+\t(ppl_strip_loop): Same.\n+\t(ppl_lexico_compare_linear_expressions): Same.\n+\t(ppl_max_for_le_pointset): Same.\n+\t(ppl_min_for_le_pointset): Same.\n+\t(ppl_build_realtion): Same.\n+\t* graphite-ppl.h (gmp_cst_to_tree): Same.\n+\t(ppl_set_inhomogeneous): Same.\n+\t(ppl_set_inhomogeneous_tree): Same.\n+\t(ppl_set_coef): Same.\n+\t(ppl_set_coef_tree): Same.\n+\t* graphite-sese-to-poly.c (build_pbb_scattering_polyhedrons): Same.\n+\t(build_scop_scattering): Same.\n+\t(add_value_to_dim): Same.\n+\t(scan_tree_for_params_right_scev): Same.\n+\t(scan_tree_for_params_int): Same.\n+\t(scan_tree_for_params): Same.\n+\t(find_params_in_bb): Same.\n+\t(find_scop_parameters): Same.\n+\t(add_upper_bounds_from_estimated_nit): Same.\n+\t(build_loop_iteration_domains): Same.\n+\t(create_linear_expr_from_tree): Same.\n+\t(add_condition_to_domain): Same.\n+\t(pdr_add_memory_accesses): Same.\n+\n 2010-05-06  Magnus Fromreide  <magfr@lysator.liu.se>\n \t    Jason Merrill  <jason@redhat.com>\n "}]}