{"sha": "c2465daec4df2d1a03be26a1fa9147382964a16e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI0NjVkYWVjNGRmMmQxYTAzYmUyNmExZmE5MTQ3MzgyOTY0YTE2ZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-05-24T14:38:44Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-05-24T14:38:44Z"}, "message": "Revert \"* gimplify.c (gimplify_cond_expr): Don't check TREE_ADDRESSABLE.\"\n\nThis reverts commit ac0f04360cc04e5b80a7d74f7edc47e395d2e744.\n\nFrom-SVN: r271604", "tree": {"sha": "e2e0677f8362e015c96351d1ff88f63abcf7c77f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2e0677f8362e015c96351d1ff88f63abcf7c77f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2465daec4df2d1a03be26a1fa9147382964a16e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2465daec4df2d1a03be26a1fa9147382964a16e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2465daec4df2d1a03be26a1fa9147382964a16e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2465daec4df2d1a03be26a1fa9147382964a16e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2fb1b29d371f1536d730852681f90ab6757acd8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fb1b29d371f1536d730852681f90ab6757acd8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fb1b29d371f1536d730852681f90ab6757acd8a"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "6bc4d1a39963df1ff7f4e0666937eb5cfe383b7d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2465daec4df2d1a03be26a1fa9147382964a16e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2465daec4df2d1a03be26a1fa9147382964a16e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2465daec4df2d1a03be26a1fa9147382964a16e", "patch": "@@ -1,3 +1,8 @@\n+2019-05-24  Jason Merrill  <jason@redhat.com>\n+\n+\tRevert:\n+\t* gimplify.c (gimplify_cond_expr): Don't check TREE_ADDRESSABLE.\n+\n 2019-05-24  Richard Biener  <rguenther@suse.de>\n \n \tPR testsuite/90607"}, {"sha": "e5713dd4e8c146db7a222a41c6bdb0bd0d70aef3", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2465daec4df2d1a03be26a1fa9147382964a16e/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2465daec4df2d1a03be26a1fa9147382964a16e/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=c2465daec4df2d1a03be26a1fa9147382964a16e", "patch": "@@ -3990,12 +3990,10 @@ gimplify_cond_expr (tree *expr_p, gimple_seq *pre_p, fallback_t fallback)\n       tree result;\n \n       /* If either an rvalue is ok or we do not require an lvalue, create the\n-\t temporary.  We cannot do that if the type is addressable, but\n-\t that should have been avoided before we got here.  */\n+\t temporary.  But we cannot do that if the type is addressable.  */\n       if (((fallback & fb_rvalue) || !(fallback & fb_lvalue))\n-\t  && (flag_checking || !TREE_ADDRESSABLE (type)))\n+\t  && !TREE_ADDRESSABLE (type))\n \t{\n-\t  gcc_assert (!TREE_ADDRESSABLE (type));\n \t  if (gimplify_ctxp->allow_rhs_cond_expr\n \t      /* If either branch has side effects or could trap, it can't be\n \t\t evaluated unconditionally.  */"}]}