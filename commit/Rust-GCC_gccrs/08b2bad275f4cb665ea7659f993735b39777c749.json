{"sha": "08b2bad275f4cb665ea7659f993735b39777c749", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhiMmJhZDI3NWY0Y2I2NjVlYTc2NTlmOTkzNzM1YjM5Nzc3Yzc0OQ==", "commit": {"author": {"name": "Simon Baldwin", "email": "simonb@google.com", "date": "2011-10-17T23:31:25Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-10-17T23:31:25Z"}, "message": "configure.ac: Add --with-native-system-header-dir.\n\n\t* configure.ac: Add --with-native-system-header-dir.  Set and\n\tsubstitute NATIVE_SYSTEM_HEADER_DIR.  Use native_system_header\n\twhen setting target_header_dir.\n\t* config.gcc: Always set native_system_header_dir.\n\t(*-*-gnu*): Set native_system_header_dir.  Don't use t-gnu.\n\t(i[34567]86-pc-msdosdjgpp*): Set native_system_header_dir.  Don't\n\tuse i386/t-djgpp.\n\t(i[34567]86-*-mingw* | x86_64-*-mingw*): Set\n\tnative_system_header_dir.\n\t(spu-*-elf*): Set native_system_header_dir.\n\t* Makefile.in (NATIVE_SYSTEM_HEADER_DIR): Set to\n\t@NATIVE_SYSTEM_HEADER_DIR@.\n\t(PREPROCESSOR_DEFINES): Define NATIVE_SYSTEM_HEADER_DIR.\n\t* cppdefault.c (STANDARD_INCLUDE_DIR): Don't define.\n\t(NATIVE_SYSTEM_HEADER_COMPONENT): Rename from\n\tSTANDARD_INCLUDE_COMPONENT.\n\t(cpp_include_defaults): Don't use SYSTEM_INCLUDE_DIR.  Rename\n\tSTANDARD_INCLUDE_DIR to NATIVE_SYSTEM_HEADER_DIR.\n\t* system.h: Poison SYSTEM_INCLUDE_DIR, STANDARD_INCLUDE_DIR, and\n\tSTANDARD_INCLUDE_COMPONENT.\n\t* config/i386/t-mingw32 (NATIVE_SYSTEM_HEADER_DIR): Remove.\n\t* config/i386/t-mingw-w32: Likewise.\n\t* config/i386/t-mingw-w64: Likewise.\n\t* config/spu/t-spu-elf: Likewise.\n\t* config/i386/t-djgpp: Remove.\n\t* config/t-gnu: Remove.\n\t* config/i386/mingw32.h (STANDARD_INCLUDE_DIR): Don't define.\n\t(NATIVE_SYSTEM_HEADER_COMPONENT): Rename from\n\tSTANDARD_INCLUDE_COMPONENT.\n\t* config/i386/djgpp.h (STANDARD_INCLUDE_DIR): Don't define.\n\t* config/spu/spu-elf.h: Likewise.\n\t* config/vms/xm-vms.h: Likewise.\n\t* config/gnu.h: Likewise.\n\t* config/openbsd.h (INCLUDE_DEFAULTS): Change STANDARD_INCLUDE_DIR\n\tand STANDARD_INCLUDE_COMPONENT to NATIVE_SYSTEM_HEADER_DIR and\n\tNATIVE_SYSTME_HEADER_COMPONENT.\n\t* doc/install.texi (Configuration): Document\n\t--with-native-system-header-dir.  Mention it in the documentation\n\tfor --with-sysroot and --with-build-sysroot.\n\t* doc/tm.texi.in (Driver): Don't document SYSTEM_INCLUDE_DIR or\n\tSTANDARD_INCLUDE_DIR.  Rename STANDARD_INCLUDE_COMPONENT to\n\tNATIVE_SYSTEM_HEADER_COMPONENT.  Rename uses of\n\tSTANDARD_INCLUDE_DIR to NATIVE_SYSTEM_HEADER_DIR.\n\t* doc/fragments.texi (Target Fragment): Don't document\n\tNATIVE_SYSTEM_HEADER_DIR.\n\t* configure, doc/tm.texi: Rebuild.\n\nCo-Authored-By: Ian Lance Taylor <iant@google.com>\n\nFrom-SVN: r180114", "tree": {"sha": "2942945008e4ebb8a8f44fa3c239831820413a51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2942945008e4ebb8a8f44fa3c239831820413a51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08b2bad275f4cb665ea7659f993735b39777c749", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08b2bad275f4cb665ea7659f993735b39777c749", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08b2bad275f4cb665ea7659f993735b39777c749", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08b2bad275f4cb665ea7659f993735b39777c749/comments", "author": null, "committer": null, "parents": [{"sha": "d1947945f50156a3d7304fedba9b90c6edfb1ff0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1947945f50156a3d7304fedba9b90c6edfb1ff0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1947945f50156a3d7304fedba9b90c6edfb1ff0"}], "stats": {"total": 290, "additions": 163, "deletions": 127}, "files": [{"sha": "79a0f905abc176098390ccfc2b3dbb899e2d6164", "filename": "gcc/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08b2bad275f4cb665ea7659f993735b39777c749", "patch": "@@ -1,3 +1,53 @@\n+2011-10-17  Simon Baldwin  <simonb@google.com>\n+\t    Ian Lance Taylor  <iant@google.com>\n+\n+\t* configure.ac: Add --with-native-system-header-dir.  Set and\n+\tsubstitute NATIVE_SYSTEM_HEADER_DIR.  Use native_system_header\n+\twhen setting target_header_dir.\n+\t* config.gcc: Always set native_system_header_dir.\n+\t(*-*-gnu*): Set native_system_header_dir.  Don't use t-gnu.\n+\t(i[34567]86-pc-msdosdjgpp*): Set native_system_header_dir.  Don't\n+\tuse i386/t-djgpp.\n+\t(i[34567]86-*-mingw* | x86_64-*-mingw*): Set\n+\tnative_system_header_dir.\n+\t(spu-*-elf*): Set native_system_header_dir.\n+\t* Makefile.in (NATIVE_SYSTEM_HEADER_DIR): Set to\n+\t@NATIVE_SYSTEM_HEADER_DIR@.\n+\t(PREPROCESSOR_DEFINES): Define NATIVE_SYSTEM_HEADER_DIR.\n+\t* cppdefault.c (STANDARD_INCLUDE_DIR): Don't define.\n+\t(NATIVE_SYSTEM_HEADER_COMPONENT): Rename from\n+\tSTANDARD_INCLUDE_COMPONENT.\n+\t(cpp_include_defaults): Don't use SYSTEM_INCLUDE_DIR.  Rename\n+\tSTANDARD_INCLUDE_DIR to NATIVE_SYSTEM_HEADER_DIR.\n+\t* system.h: Poison SYSTEM_INCLUDE_DIR, STANDARD_INCLUDE_DIR, and\n+\tSTANDARD_INCLUDE_COMPONENT.\n+\t* config/i386/t-mingw32 (NATIVE_SYSTEM_HEADER_DIR): Remove.\n+\t* config/i386/t-mingw-w32: Likewise.\n+\t* config/i386/t-mingw-w64: Likewise.\n+\t* config/spu/t-spu-elf: Likewise.\n+\t* config/i386/t-djgpp: Remove.\n+\t* config/t-gnu: Remove.\n+\t* config/i386/mingw32.h (STANDARD_INCLUDE_DIR): Don't define.\n+\t(NATIVE_SYSTEM_HEADER_COMPONENT): Rename from\n+\tSTANDARD_INCLUDE_COMPONENT.\n+\t* config/i386/djgpp.h (STANDARD_INCLUDE_DIR): Don't define.\n+\t* config/spu/spu-elf.h: Likewise.\n+\t* config/vms/xm-vms.h: Likewise.\n+\t* config/gnu.h: Likewise.\n+\t* config/openbsd.h (INCLUDE_DEFAULTS): Change STANDARD_INCLUDE_DIR\n+\tand STANDARD_INCLUDE_COMPONENT to NATIVE_SYSTEM_HEADER_DIR and\n+\tNATIVE_SYSTME_HEADER_COMPONENT.\n+\t* doc/install.texi (Configuration): Document\n+\t--with-native-system-header-dir.  Mention it in the documentation\n+\tfor --with-sysroot and --with-build-sysroot.\n+\t* doc/tm.texi.in (Driver): Don't document SYSTEM_INCLUDE_DIR or\n+\tSTANDARD_INCLUDE_DIR.  Rename STANDARD_INCLUDE_COMPONENT to\n+\tNATIVE_SYSTEM_HEADER_COMPONENT.  Rename uses of\n+\tSTANDARD_INCLUDE_DIR to NATIVE_SYSTEM_HEADER_DIR.\n+\t* doc/fragments.texi (Target Fragment): Don't document\n+\tNATIVE_SYSTEM_HEADER_DIR.\n+\t* configure, doc/tm.texi: Rebuild.\n+\n 2011-10-17  Richard Henderson  <rth@redhat.com>\n \n \t* config/sparc/sparc.md: Use register_or_zero_operand where rJ"}, {"sha": "a26b63bf263e98204b6218191182060db8a43278", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=08b2bad275f4cb665ea7659f993735b39777c749", "patch": "@@ -455,7 +455,7 @@ LINKER_PLUGIN_API_H = $(srcdir)/../include/plugin-api.h\n LTO_SYMTAB_H = $(srcdir)/../include/lto-symtab.h\n \n # Default native SYSTEM_HEADER_DIR, to be overridden by targets.\n-NATIVE_SYSTEM_HEADER_DIR = /usr/include\n+NATIVE_SYSTEM_HEADER_DIR = @NATIVE_SYSTEM_HEADER_DIR@\n # Default cross SYSTEM_HEADER_DIR, to be overridden by targets.\n CROSS_SYSTEM_HEADER_DIR = @CROSS_SYSTEM_HEADER_DIR@\n \n@@ -4075,6 +4075,7 @@ PREPROCESSOR_DEFINES = \\\n   -DLOCAL_INCLUDE_DIR=\\\"$(local_includedir)\\\" \\\n   -DCROSS_INCLUDE_DIR=\\\"$(CROSS_SYSTEM_HEADER_DIR)\\\" \\\n   -DTOOL_INCLUDE_DIR=\\\"$(gcc_tooldir)/include\\\" \\\n+  -DNATIVE_SYSTEM_HEADER_DIR=\\\"$(NATIVE_SYSTEM_HEADER_DIR)\\\" \\\n   -DPREFIX=\\\"$(prefix)/\\\" \\\n   -DSTANDARD_EXEC_PREFIX=\\\"$(libdir)/gcc/\\\" \\\n   @TARGET_SYSTEM_ROOT_DEFINE@"}, {"sha": "018e42184713a44a03240f5bea339cc195ef7249", "filename": "gcc/config.gcc", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=08b2bad275f4cb665ea7659f993735b39777c749", "patch": "@@ -186,6 +186,13 @@\n #  configure_default_options\n #\t\t\tSet to an initializer for configure_default_options\n #\t\t\tin configargs.h, based on --with-cpu et cetera.\n+#\n+#  native_system_header_dir\n+#\t\t\tWhere system header files are found for this\n+#\t\t\ttarget.  This defaults to /usr/include.  If\n+#\t\t\tthe --with-sysroot configure option or the\n+#\t\t\t--sysroot command line option is used this\n+#\t\t\twill be relative to the sysroot.\n \n # The following variables are used in each case-construct to build up the\n # outgoing variables:\n@@ -238,6 +245,7 @@ default_gnu_indirect_function=no\n target_gtfiles=\n need_64bit_hwint=\n need_64bit_isa=\n+native_system_header_dir=/usr/include\n \n # Don't carry these over build->host->target.  Please.\n xm_file=\n@@ -596,7 +604,8 @@ case ${target} in\n     *-*-linux* | frv-*-*linux* | *-*-kfreebsd*-gnu | *-*-knetbsd*-gnu | *-*-kopensolaris*-gnu)\n       :;;\n     *-*-gnu*)\n-      tmake_file=\"$tmake_file t-gnu\";;\n+      native_system_header_dir=/include\n+      ;;\n   esac\n   # glibc / uclibc / bionic switch.\n   # uclibc and bionic aren't usable for GNU/Hurd and neither for GNU/k*BSD.\n@@ -1370,7 +1379,7 @@ x86_64-*-linux* | x86_64-*-kfreebsd*-gnu | x86_64-*-knetbsd*-gnu)\n i[34567]86-pc-msdosdjgpp*)\n \txm_file=i386/xm-djgpp.h\n \ttm_file=\"dbxcoff.h ${tm_file} i386/unix.h i386/bsd.h i386/gas.h i386/djgpp.h i386/djgpp-stdint.h\"\n-\ttmake_file=\"${tmake_file} i386/t-djgpp\"\n+\tnative_system_header_dir=/dev/env/DJDIR/include\n \textra_options=\"${extra_options} i386/djgpp.opt\"\n \tgnu_ld=yes\n \tgas=yes\n@@ -1540,6 +1549,7 @@ i[34567]86-*-mingw* | x86_64-*-mingw*)\n                \t\ttmake_file=\"${tmake_file} i386/t-mingw32\"\n                      \t;;\n \tesac\n+        native_system_header_dir=/mingw/include\n \ttarget_gtfiles=\"\\$(srcdir)/config/i386/winnt.c\"\n \textra_options=\"${extra_options} i386/cygming.opt i386/mingw.opt\"\n \tcase ${target} in\n@@ -2563,6 +2573,7 @@ sparc64-*-openbsd*)\n spu-*-elf*)\n \ttm_file=\"dbxelf.h elfos.h spu/spu-elf.h spu/spu.h newlib-stdint.h\"\n \ttmake_file=\"spu/t-spu-elf\"\n+        native_system_header_dir=/include\n \textra_headers=\"spu_intrinsics.h spu_internals.h vmx2spu.h spu_mfcio.h vec_types.h spu_cache.h\"\n \textra_modes=spu/spu-modes.def\n \tc_target_objs=\"${c_target_objs} spu-c.o\""}, {"sha": "dddbcbf5a49c7ef4a9d6c9b259fcfe20e9f7c03b", "filename": "gcc/config/gnu.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fconfig%2Fgnu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fconfig%2Fgnu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgnu.h?ref=08b2bad275f4cb665ea7659f993735b39777c749", "patch": "@@ -28,10 +28,6 @@ along with GCC.  If not, see <http://www.gnu.org/licenses/>.\n #undef LIB_SPEC\n #define LIB_SPEC \"%{pthread:-lpthread} %{pg|p|profile:-lc_p;:-lc}\"\n \n-/* Standard include directory.  In GNU, \"/usr\" is a four-letter word.  */\n-#undef STANDARD_INCLUDE_DIR\n-#define STANDARD_INCLUDE_DIR \"/include\"\n-\n #undef GNU_USER_TARGET_OS_CPP_BUILTINS\n #define GNU_USER_TARGET_OS_CPP_BUILTINS()\t\t\\\n     do {\t\t\t\t\t\\"}, {"sha": "c770219657c91e96639579463f8ebb07ed58e039", "filename": "gcc/config/i386/djgpp.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.h?ref=08b2bad275f4cb665ea7659f993735b39777c749", "patch": "@@ -48,10 +48,6 @@ along with GCC; see the file COPYING3.  If not see\n /* We override default /usr or /usr/local part with /dev/env/DJDIR which */\n /* points to actual DJGPP installation directory.  */\n \n-/* Standard include directory */\n-#undef STANDARD_INCLUDE_DIR\n-#define STANDARD_INCLUDE_DIR \"/dev/env/DJDIR/include/\"\n-\n /* Search for as.exe and ld.exe in DJGPP's binary directory.  */ \n #undef MD_EXEC_PREFIX\n #define MD_EXEC_PREFIX \"/dev/env/DJDIR/bin/\""}, {"sha": "d9f10c834af7b9964a4d6ba5322d0b4781cbdc45", "filename": "gcc/config/i386/mingw32.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fconfig%2Fi386%2Fmingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fconfig%2Fi386%2Fmingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmingw32.h?ref=08b2bad275f4cb665ea7659f993735b39777c749", "patch": "@@ -78,12 +78,8 @@ along with GCC; see the file COPYING3.  If not see\n #define SUB_LINK_ENTRY SUB_LINK_ENTRY32\n #endif\n \n-/* Override the standard choice of /usr/include as the default prefix\n-   to try when searching for header files.  */\n-#undef STANDARD_INCLUDE_DIR\n-#define STANDARD_INCLUDE_DIR \"/mingw/include\"\n-#undef STANDARD_INCLUDE_COMPONENT\n-#define STANDARD_INCLUDE_COMPONENT \"MINGW\"\n+#undef NATIVE_SYSTEM_HEADER_COMPONENT\n+#define NATIVE_SYSTEM_HEADER_COMPONENT \"MINGW\"\n \n #undef CPP_SPEC\n #define CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{mthreads:-D_MT} \" \\\n@@ -235,4 +231,3 @@ do {\t\t\t\t\t\t         \\\n \n /* We should find a way to not have to update this manually.  */\n #define LIBGCJ_SONAME \"libgcj\" /*LIBGCC_EH_EXTN*/ \"-12.dll\"\n-"}, {"sha": "7b54b7ba7aac5d1f92956e3681ccd642f499cd21", "filename": "gcc/config/i386/t-djgpp", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1947945f50156a3d7304fedba9b90c6edfb1ff0/gcc%2Fconfig%2Fi386%2Ft-djgpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1947945f50156a3d7304fedba9b90c6edfb1ff0/gcc%2Fconfig%2Fi386%2Ft-djgpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-djgpp?ref=d1947945f50156a3d7304fedba9b90c6edfb1ff0", "patch": "@@ -1,2 +0,0 @@\n-# Location of DJGPP's header directory.\n-NATIVE_SYSTEM_HEADER_DIR=$(DJDIR)/include"}, {"sha": "83cee71f1c12ef2b7946cc4d58a17da8061c3f4a", "filename": "gcc/config/i386/t-mingw-w32", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fconfig%2Fi386%2Ft-mingw-w32", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fconfig%2Fi386%2Ft-mingw-w32", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-mingw-w32?ref=08b2bad275f4cb665ea7659f993735b39777c749", "patch": "@@ -1,6 +1,3 @@\n-# Match SYSTEM_INCLUDE_DIR\n-NATIVE_SYSTEM_HEADER_DIR = /mingw/include\n-\n MULTILIB_OPTIONS = m64/m32\n MULTILIB_DIRNAMES = 64 32\n MULTILIB_OSDIRNAMES = ../lib64 ../lib"}, {"sha": "041a02f1018d21bd9ef3a5c64725eaa8b6ab9fc7", "filename": "gcc/config/i386/t-mingw-w64", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fconfig%2Fi386%2Ft-mingw-w64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fconfig%2Fi386%2Ft-mingw-w64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-mingw-w64?ref=08b2bad275f4cb665ea7659f993735b39777c749", "patch": "@@ -1,6 +1,3 @@\n-# Match SYSTEM_INCLUDE_DIR\n-NATIVE_SYSTEM_HEADER_DIR = /mingw/include\n-\n MULTILIB_OPTIONS = m64/m32\n MULTILIB_DIRNAMES = 64 32\n MULTILIB_OSDIRNAMES = ../lib ../lib32"}, {"sha": "bfdef6723ce1e279fc7178a34d21e9fdf3f8931f", "filename": "gcc/config/i386/t-mingw32", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fconfig%2Fi386%2Ft-mingw32", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fconfig%2Fi386%2Ft-mingw32", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-mingw32?ref=08b2bad275f4cb665ea7659f993735b39777c749", "patch": "@@ -1,5 +1,2 @@\n-# Match SYSTEM_INCLUDE_DIR\n-NATIVE_SYSTEM_HEADER_DIR = /mingw/include\n-\n # MinGW-specific parts of LIB_SPEC\n SHLIB_LC = -lmingwthrd -lmingw32 -lmingwex -lmoldname -lmsvcrt -ladvapi32 -lshell32 -luser32 -lkernel32"}, {"sha": "fad29154cef0f0ac1d674698a6d3e6c29970bf62", "filename": "gcc/config/openbsd.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fconfig%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fconfig%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fopenbsd.h?ref=08b2bad275f4cb665ea7659f993735b39777c749", "patch": "@@ -1,5 +1,5 @@\n /* Base configuration file for all OpenBSD targets.\n-   Copyright (C) 1999, 2000, 2004, 2005, 2007, 2009, 2010\n+   Copyright (C) 1999, 2000, 2004, 2005, 2007, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -59,7 +59,7 @@ along with GCC; see the file COPYING3.  If not see\n     { GPLUSPLUS_INCLUDE_DIR, \"G++\", 1, 1 },\t\\\n     { GPLUSPLUS_TOOL_INCLUDE_DIR, \"G++\", 1, 1 }, \\\n     { GPLUSPLUS_BACKWARD_INCLUDE_DIR, \"G++\", 1, 1 }, \\\n-    { STANDARD_INCLUDE_DIR, STANDARD_INCLUDE_COMPONENT, 0, 0 }, \\\n+    { NATIVE_SYSTEM_HEADER_DIR, NATIVE_SYSTEM_HEADER_COMPONENT, 0, 0 }, \\\n     { 0, 0, 0, 0 }\t\t\t\t\\\n   }\n "}, {"sha": "146bcb21052b82897096a4a461be11639f50c9bc", "filename": "gcc/config/spu/spu-elf.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fconfig%2Fspu%2Fspu-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fconfig%2Fspu%2Fspu-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu-elf.h?ref=08b2bad275f4cb665ea7659f993735b39777c749", "patch": "@@ -35,10 +35,6 @@\n #undef STANDARD_STARTFILE_PREFIX_2\n #define STANDARD_STARTFILE_PREFIX_2 \"\"\n \n-/* Use \"/include\" instead of \"/usr/include\".  */\n-#undef STANDARD_INCLUDE_DIR\n-#define STANDARD_INCLUDE_DIR \"/include\"\n-\n /* We do not provide any \"/usr/local/include\" directory on SPU.  */\n #undef LOCAL_INCLUDE_DIR\n \n@@ -77,4 +73,3 @@\n       mcache-size=16 :-lgcc_cache16k; \\\n       mcache-size=8  :-lgcc_cache8k; \\\n                      :-lgcc_cache64k}\"\n-"}, {"sha": "b48106efed295dade5ac2d4728fd7a02724d7761", "filename": "gcc/config/spu/t-spu-elf", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fconfig%2Fspu%2Ft-spu-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fconfig%2Fspu%2Ft-spu-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Ft-spu-elf?ref=08b2bad275f4cb665ea7659f993735b39777c749", "patch": "@@ -15,10 +15,6 @@\n #  along with GCC; see the file COPYING3.  If not see\n #  <http://www.gnu.org/licenses/>.\n \n-# Define system directory to match STANDARD_INCLUDE_DIR in spu-elf.h,\n-# allowing combined SPU/PPU sysroot builds.\n-NATIVE_SYSTEM_HEADER_DIR = /include\n-\n # Suppress building libgcc1.a\n LIBGCC1 =\n CROSS_LIBGCC1 ="}, {"sha": "7be5d00a718ba8b8a7bb2888a95a586f9f685876", "filename": "gcc/config/t-gnu", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1947945f50156a3d7304fedba9b90c6edfb1ff0/gcc%2Fconfig%2Ft-gnu", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1947945f50156a3d7304fedba9b90c6edfb1ff0/gcc%2Fconfig%2Ft-gnu", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-gnu?ref=d1947945f50156a3d7304fedba9b90c6edfb1ff0", "patch": "@@ -1,2 +0,0 @@\n-# In GNU, \"/usr\" is a four-letter word.\n-NATIVE_SYSTEM_HEADER_DIR = /include"}, {"sha": "816935b5062a59693da8b3c31a2123c9aea32474", "filename": "gcc/config/vms/xm-vms.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fconfig%2Fvms%2Fxm-vms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fconfig%2Fvms%2Fxm-vms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fxm-vms.h?ref=08b2bad275f4cb665ea7659f993735b39777c749", "patch": "@@ -1,6 +1,6 @@\n /* Configuration for GCC for hosting on VMS\n    using a Unix style C library.\n-   Copyright (C) 1996, 1997, 2001, 2004, 2007, 2009\n+   Copyright (C) 1996, 1997, 2001, 2004, 2007, 2009, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -55,4 +55,3 @@ do                                                         \\\n \n #define STANDARD_EXEC_PREFIX \"/gnu/libexec/gcc/\"\n #define STANDARD_STARTFILE_PREFIX \"/gnu/lib/\"\n-#define STANDARD_INCLUDE_DIR \"/gnu/include\""}, {"sha": "32542dd455d55adc8b7356f7bb89dff7d17a1ce3", "filename": "gcc/configure", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=08b2bad275f4cb665ea7659f993735b39777c749", "patch": "@@ -729,6 +729,7 @@ USE_NLS\n extra_opt_files\n extra_modes_file\n gthread_flags\n+NATIVE_SYSTEM_HEADER_DIR\n objext\n manext\n LIBICONV_DEP\n@@ -886,6 +887,7 @@ enable_tls\n enable_objc_gc\n with_dwarf2\n enable_shared\n+with_native_system_header_dir\n with_build_sysroot\n with_sysroot\n with_specs\n@@ -1651,6 +1653,9 @@ Optional Packages:\n   --with-as               arrange to use the specified as (full pathname)\n   --with-stabs            arrange to use stabs instead of host debug format\n   --with-dwarf2           force the default debug format to be DWARF 2\n+  --with-native-system-header-dir=dir\n+                          use dir as the directory to look for standard\n+                          system header files in.  Defaults to /usr/include.\n   --with-build-sysroot=sysroot\n                           use sysroot as the system root during the build\n   --with-sysroot[=DIR]    search for usr/lib, usr/include, et al, within DIR\n@@ -7152,6 +7157,22 @@ fi\n \n \n \n+# Check whether --with-native-system-header-dir was given.\n+if test \"${with_native_system_header_dir+set}\" = set; then :\n+  withval=$with_native_system_header_dir;\n+ case ${with_native_system_header_dir} in\n+ yes|no) as_fn_error \"bad value ${withval} given for --with-native-system-header-dir\" \"$LINENO\" 5 ;;\n+ /* | [A-Za-z]:[\\\\/]*) ;;\n+ *) as_fn_error \"--with-native-system-header-dir argument ${withval} must be an absolute directory\" \"$LINENO\" 5 ;;\n+ esac\n+ configured_native_system_header_dir=\"${withval}\"\n+\n+else\n+  configured_native_system_header_dir=\n+fi\n+\n+\n+\n # Check whether --with-build-sysroot was given.\n if test \"${with_build_sysroot+set}\" = set; then :\n   withval=$with_build_sysroot; if test x\"$withval\" != x ; then\n@@ -11145,6 +11166,12 @@ if test \"$host_xm_file\" != \"$build_xm_file\"; then\n \tfi\n fi\n \n+if test -n \"$configured_native_system_header_dir\"; then\n+  native_system_header_dir=$configured_native_system_header_dir\n+fi\n+NATIVE_SYSTEM_HEADER_DIR=\"$native_system_header_dir\"\n+\n+\n case ${host} in\n   powerpc*-*-darwin*)\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether mcontext_t fields have underscores\" >&5\n@@ -17921,7 +17948,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17924 \"configure\"\n+#line 17951 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -18027,7 +18054,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18030 \"configure\"\n+#line 18057 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -26409,14 +26436,14 @@ if test x$host != x$target || test \"x$TARGET_SYSTEM_ROOT\" != x; then\n   elif test \"x$with_sysroot\" = x; then\n     target_header_dir=\"${exec_prefix}/${target_noncanonical}/sys-include\"\n   elif test \"x$with_build_sysroot\" != \"x\"; then\n-    target_header_dir=\"${with_build_sysroot}/usr/include\"\n+    target_header_dir=\"${with_build_sysroot}${native_system_header_dir}\"\n   elif test \"x$with_sysroot\" = xyes; then\n-    target_header_dir=\"${exec_prefix}/${target_noncanonical}/sys-root/usr/include\"\n+    target_header_dir=\"${exec_prefix}/${target_noncanonical}/sys-root${native_system_header_dir}\"\n   else\n-    target_header_dir=\"${with_sysroot}/usr/include\"\n+    target_header_dir=\"${with_sysroot}${native_system_header_dir}\"\n   fi\n else\n-  target_header_dir=/usr/include\n+  target_header_dir=${native_system_header_dir}\n fi\n \n # Test for stack protector support in target C library."}, {"sha": "d19ca077b2e113f86aabf85ca543e526a99e731c", "filename": "gcc/configure.ac", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=08b2bad275f4cb665ea7659f993735b39777c749", "patch": "@@ -725,6 +725,19 @@ AC_ARG_ENABLE(shared,\n ], [enable_shared=yes])\n AC_SUBST(enable_shared)\n \n+AC_ARG_WITH([native-system-header-dir],\n+  [  --with-native-system-header-dir=dir\n+                          use dir as the directory to look for standard\n+                          system header files in.  Defaults to /usr/include.],\n+[\n+ case ${with_native_system_header_dir} in\n+ yes|no) AC_MSG_ERROR([bad value ${withval} given for --with-native-system-header-dir]) ;;\n+ /* | [[A-Za-z]]:[[\\\\/]]*) ;;\n+ *) AC_MSG_ERROR([--with-native-system-header-dir argument ${withval} must be an absolute directory]) ;;\n+ esac\n+ configured_native_system_header_dir=\"${withval}\"\n+], [configured_native_system_header_dir=])\n+\n AC_ARG_WITH(build-sysroot, \n   [AS_HELP_STRING([--with-build-sysroot=sysroot],\n                   [use sysroot as the system root during the build])],\n@@ -1331,6 +1344,12 @@ if test \"$host_xm_file\" != \"$build_xm_file\"; then\n \tfi\n fi\n \n+if test -n \"$configured_native_system_header_dir\"; then\n+  native_system_header_dir=$configured_native_system_header_dir\n+fi\n+NATIVE_SYSTEM_HEADER_DIR=\"$native_system_header_dir\"\n+AC_SUBST(NATIVE_SYSTEM_HEADER_DIR)\n+\n case ${host} in\n   powerpc*-*-darwin*)\n     AC_CACHE_CHECK([whether mcontext_t fields have underscores],\n@@ -4517,14 +4536,14 @@ if test x$host != x$target || test \"x$TARGET_SYSTEM_ROOT\" != x; then\n   elif test \"x$with_sysroot\" = x; then\n     target_header_dir=\"${exec_prefix}/${target_noncanonical}/sys-include\"\n   elif test \"x$with_build_sysroot\" != \"x\"; then\n-    target_header_dir=\"${with_build_sysroot}/usr/include\"\n+    target_header_dir=\"${with_build_sysroot}${native_system_header_dir}\"\n   elif test \"x$with_sysroot\" = xyes; then\n-    target_header_dir=\"${exec_prefix}/${target_noncanonical}/sys-root/usr/include\"\n+    target_header_dir=\"${exec_prefix}/${target_noncanonical}/sys-root${native_system_header_dir}\"\n   else\n-    target_header_dir=\"${with_sysroot}/usr/include\"\n+    target_header_dir=\"${with_sysroot}${native_system_header_dir}\"\n   fi\n else\n-  target_header_dir=/usr/include\n+  target_header_dir=${native_system_header_dir}\n fi\n \n # Test for stack protector support in target C library."}, {"sha": "fabf314a0248207a4e564ce29a8b1ca59a973a68", "filename": "gcc/cppdefault.c", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fcppdefault.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fcppdefault.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppdefault.c?ref=08b2bad275f4cb665ea7659f993735b39777c749", "patch": "@@ -1,6 +1,7 @@\n /* CPP Library.\n    Copyright (C) 1986, 1987, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2003, 2004, 2006, 2007, 2010 Free Software Foundation, Inc.\n+   1999, 2000, 2003, 2004, 2006, 2007, 2010, 2011\n+   Free Software Foundation, Inc.\n    Contributed by Per Bothner, 1994-95.\n    Based on CCCP program by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n@@ -25,18 +26,12 @@\n #include \"tm.h\"\n #include \"cppdefault.h\"\n \n-#ifndef STANDARD_INCLUDE_DIR\n-#define STANDARD_INCLUDE_DIR \"/usr/include\"\n-#endif\n-\n-#ifndef STANDARD_INCLUDE_COMPONENT\n-#define STANDARD_INCLUDE_COMPONENT 0\n+#ifndef NATIVE_SYSTEM_HEADER_COMPONENT\n+#define NATIVE_SYSTEM_HEADER_COMPONENT 0\n #endif\n \n #if defined (CROSS_DIRECTORY_STRUCTURE) && !defined (TARGET_SYSTEM_ROOT)\n # undef LOCAL_INCLUDE_DIR\n-# undef SYSTEM_INCLUDE_DIR\n-# undef STANDARD_INCLUDE_DIR\n #else\n # undef CROSS_INCLUDE_DIR\n #endif\n@@ -89,14 +84,8 @@ const struct default_include cpp_include_defaults[]\n     /* Another place the target system's headers might be.  */\n     { TOOL_INCLUDE_DIR, \"BINUTILS\", 0, 1, 0, 0 },\n #endif\n-#ifdef SYSTEM_INCLUDE_DIR\n-    /* Some systems have an extra dir of include files.  */\n-    { SYSTEM_INCLUDE_DIR, 0, 0, 0, 1, 0 },\n-#endif\n-#ifdef STANDARD_INCLUDE_DIR\n     /* /usr/include comes dead last.  */\n-    { STANDARD_INCLUDE_DIR, STANDARD_INCLUDE_COMPONENT, 0, 0, 1, 0 },\n-#endif\n+    { NATIVE_SYSTEM_HEADER_DIR, NATIVE_SYSTEM_HEADER_COMPONENT, 0, 0, 1, 0 },\n     { 0, 0, 0, 0, 0, 0 }\n   };\n #endif /* no INCLUDE_DEFAULTS */\n@@ -136,4 +125,3 @@ cpp_relocated (void)\n \n   return relocated;\n }\n-"}, {"sha": "31674f9a5d0e9072e82416744525a2173bbb03e9", "filename": "gcc/doc/fragments.texi", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fdoc%2Ffragments.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fdoc%2Ffragments.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ffragments.texi?ref=08b2bad275f4cb665ea7659f993735b39777c749", "patch": "@@ -1,5 +1,6 @@\n @c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-@c 1999, 2000, 2001, 2003, 2004, 2005, 2008 Free Software Foundation, Inc.\n+@c 1999, 2000, 2001, 2003, 2004, 2005, 2008, 2011\n+@c Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n@@ -128,12 +129,6 @@ compiler.  In that case, set @code{MULTILIB_EXTRA_OPTS} to be the list\n of options to be used for all builds.  If you set this, you should\n probably set @code{CRTSTUFF_T_CFLAGS} to a dash followed by it.\n \n-@findex NATIVE_SYSTEM_HEADER_DIR\n-@item NATIVE_SYSTEM_HEADER_DIR\n-If the default location for system headers is not @file{/usr/include},\n-you must set this to the directory containing the headers.  This value\n-should match the value of the @code{SYSTEM_INCLUDE_DIR} macro.\n-\n @findex SPECS\n @item SPECS\n Unfortunately, setting @code{MULTILIB_EXTRA_OPTS} is not enough, since"}, {"sha": "730f82baff88ce4a4b68eb8490cad19ef705cf76", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=08b2bad275f4cb665ea7659f993735b39777c749", "patch": "@@ -903,6 +903,14 @@ ideas of what it is for.  People use it as if it specified where to\n install part of GCC@.  Perhaps they make this assumption because\n installing GCC creates the directory.\n \n+@item --with-native-system-header-dir=@var{dirname}\n+Specifies that @var{dirname} is the directory that contains native system\n+header files, rather than @file{/usr/include}.  This option is most useful\n+if you are creating a compiler that should be isolated from the system\n+as much as possible.  It is most commonly used with the\n+@option{--with-sysroot} option and will cause GCC to search\n+@var{dirname} inside the system root specified by that option.\n+\n @item --enable-shared[=@var{package}[,@dots{}]]\n Build shared versions of libraries, if shared libraries are supported on\n the target platform.  Unlike GCC 2.95.x and earlier, shared libraries\n@@ -1736,6 +1744,10 @@ target libraries (which runs on the build system) and the compiler newly\n installed with @code{make install}; it does not affect the compiler which is\n used to build GCC itself.\n \n+If you specify the @option{--with-native-system-header-dir=@var{dirname}}\n+option then the compiler will search that directory within @var{dirname} for\n+native system headers rather than the default @file{/usr/include}.\n+\n @item --with-build-sysroot\n @itemx --with-build-sysroot=@var{dir}\n Tells GCC to consider @var{dir} as the system root (see\n@@ -1750,6 +1762,10 @@ This option affects the system root for the compiler used to build\n target libraries (which runs on the build system); it does not affect\n the compiler which is used to build GCC itself.\n \n+If you specify the @option{--with-native-system-header-dir=@var{dirname}}\n+option then the compiler will search that directory within @var{dirname} for\n+native system headers rather than the default @file{/usr/include}.\n+\n @item --with-headers\n @itemx --with-headers=@var{dir}\n Deprecated in favor of @option{--with-sysroot}."}, {"sha": "f9e4260b238755c732d07dac8e3870e03f6af111", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=08b2bad275f4cb665ea7659f993735b39777c749", "patch": "@@ -470,33 +470,15 @@ initialize the necessary environment variables.\n Define this macro as a C string constant if you wish to override the\n standard choice of @file{/usr/local/include} as the default prefix to\n try when searching for local header files.  @code{LOCAL_INCLUDE_DIR}\n-comes before @code{SYSTEM_INCLUDE_DIR} in the search order.\n+comes before @code{NATIVE_SYSTEM_HEADER_DIR} (set in\n+@file{config.gcc}, normally @file{/usr/include}) in the search order.\n \n Cross compilers do not search either @file{/usr/local/include} or its\n replacement.\n @end defmac\n \n-@defmac SYSTEM_INCLUDE_DIR\n-Define this macro as a C string constant if you wish to specify a\n-system-specific directory to search for header files before the standard\n-directory.  @code{SYSTEM_INCLUDE_DIR} comes before\n-@code{STANDARD_INCLUDE_DIR} in the search order.\n-\n-Cross compilers do not use this macro and do not search the directory\n-specified.\n-@end defmac\n-\n-@defmac STANDARD_INCLUDE_DIR\n-Define this macro as a C string constant if you wish to override the\n-standard choice of @file{/usr/include} as the default prefix to\n-try when searching for header files.\n-\n-Cross compilers ignore this macro and do not search either\n-@file{/usr/include} or its replacement.\n-@end defmac\n-\n-@defmac STANDARD_INCLUDE_COMPONENT\n-The ``component'' corresponding to @code{STANDARD_INCLUDE_DIR}.\n+@defmac NATIVE_SYSTEM_HEADER_COMPONENT\n+The ``component'' corresponding to @code{NATIVE_SYSTEM_HEADER_DIR}.\n See @code{INCLUDE_DEFAULTS}, below, for the description of components.\n If you do not define this macro, no component is used.\n @end defmac\n@@ -505,8 +487,8 @@ If you do not define this macro, no component is used.\n Define this macro if you wish to override the entire default search path\n for include files.  For a native compiler, the default search path\n usually consists of @code{GCC_INCLUDE_DIR}, @code{LOCAL_INCLUDE_DIR},\n-@code{SYSTEM_INCLUDE_DIR}, @code{GPLUSPLUS_INCLUDE_DIR}, and\n-@code{STANDARD_INCLUDE_DIR}.  In addition, @code{GPLUSPLUS_INCLUDE_DIR}\n+@code{GPLUSPLUS_INCLUDE_DIR}, and\n+@code{NATIVE_SYSTEM_HEADER_DIR}.  In addition, @code{GPLUSPLUS_INCLUDE_DIR}\n and @code{GCC_INCLUDE_DIR} are defined automatically by @file{Makefile},\n and specify private search areas for GCC@.  The directory\n @code{GPLUSPLUS_INCLUDE_DIR} is used only for C++ programs."}, {"sha": "e7e25888e37aa39c6ad6194d1d17573c311187b0", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=08b2bad275f4cb665ea7659f993735b39777c749", "patch": "@@ -468,33 +468,15 @@ initialize the necessary environment variables.\n Define this macro as a C string constant if you wish to override the\n standard choice of @file{/usr/local/include} as the default prefix to\n try when searching for local header files.  @code{LOCAL_INCLUDE_DIR}\n-comes before @code{SYSTEM_INCLUDE_DIR} in the search order.\n+comes before @code{NATIVE_SYSTEM_HEADER_DIR} (set in\n+@file{config.gcc}, normally @file{/usr/include}) in the search order.\n \n Cross compilers do not search either @file{/usr/local/include} or its\n replacement.\n @end defmac\n \n-@defmac SYSTEM_INCLUDE_DIR\n-Define this macro as a C string constant if you wish to specify a\n-system-specific directory to search for header files before the standard\n-directory.  @code{SYSTEM_INCLUDE_DIR} comes before\n-@code{STANDARD_INCLUDE_DIR} in the search order.\n-\n-Cross compilers do not use this macro and do not search the directory\n-specified.\n-@end defmac\n-\n-@defmac STANDARD_INCLUDE_DIR\n-Define this macro as a C string constant if you wish to override the\n-standard choice of @file{/usr/include} as the default prefix to\n-try when searching for header files.\n-\n-Cross compilers ignore this macro and do not search either\n-@file{/usr/include} or its replacement.\n-@end defmac\n-\n-@defmac STANDARD_INCLUDE_COMPONENT\n-The ``component'' corresponding to @code{STANDARD_INCLUDE_DIR}.\n+@defmac NATIVE_SYSTEM_HEADER_COMPONENT\n+The ``component'' corresponding to @code{NATIVE_SYSTEM_HEADER_DIR}.\n See @code{INCLUDE_DEFAULTS}, below, for the description of components.\n If you do not define this macro, no component is used.\n @end defmac\n@@ -503,8 +485,8 @@ If you do not define this macro, no component is used.\n Define this macro if you wish to override the entire default search path\n for include files.  For a native compiler, the default search path\n usually consists of @code{GCC_INCLUDE_DIR}, @code{LOCAL_INCLUDE_DIR},\n-@code{SYSTEM_INCLUDE_DIR}, @code{GPLUSPLUS_INCLUDE_DIR}, and\n-@code{STANDARD_INCLUDE_DIR}.  In addition, @code{GPLUSPLUS_INCLUDE_DIR}\n+@code{GPLUSPLUS_INCLUDE_DIR}, and\n+@code{NATIVE_SYSTEM_HEADER_DIR}.  In addition, @code{GPLUSPLUS_INCLUDE_DIR}\n and @code{GCC_INCLUDE_DIR} are defined automatically by @file{Makefile},\n and specify private search areas for GCC@.  The directory\n @code{GPLUSPLUS_INCLUDE_DIR} is used only for C++ programs."}, {"sha": "7c7d07ea3eef6fc07c835d3e818e6f06dedcbeee", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b2bad275f4cb665ea7659f993735b39777c749/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=08b2bad275f4cb665ea7659f993735b39777c749", "patch": "@@ -868,7 +868,8 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tFUNCTION_INCOMING_ARG IRA_COVER_CLASSES TARGET_VERSION\t\t   \\\n \tMACHINE_TYPE TARGET_HAS_TARGETCM ASM_OUTPUT_BSS\t\t\t   \\\n \tSETJMP_VIA_SAVE_AREA FORBIDDEN_INC_DEC_CLASSES\t\t\t   \\\n-\tPREFERRED_OUTPUT_RELOAD_CLASS\n+\tPREFERRED_OUTPUT_RELOAD_CLASS SYSTEM_INCLUDE_DIR\t\t   \\\n+\tSTANDARD_INCLUDE_DIR STANDARD_INCLUDE_COMPONENT\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}]}