{"sha": "c8530c410972f09b88bb143e5e5a4910bd72b2ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg1MzBjNDEwOTcyZjA5Yjg4YmIxNDNlNWU1YTQ5MTBiZDcyYjJlZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-02-15T00:36:50Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-02-15T00:36:50Z"}, "message": "re PR go/89168 (FAIL: cmd/go/internal/load)\n\n\tPR go/89168\n    libgo: change gotest to run examples with output\n    \n    Change the gotest script to act like \"go test\" and run examples that\n    have \"output\" comments.  This is not done with full generality, but\n    just enough to run the libgo tests.  Other packages should be tested\n    with \"go test\" as usual.\n    \n    While we're here clean up some old bits of gotest, and only run\n    TestXXX functions that are actually in *_test.go files.  The latter\n    change should fix https://gcc.gnu.org/PR89168.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/162139\n\nFrom-SVN: r268922", "tree": {"sha": "93d9f78cf295af4117b6d17f89039e06a631b118", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93d9f78cf295af4117b6d17f89039e06a631b118"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8530c410972f09b88bb143e5e5a4910bd72b2ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8530c410972f09b88bb143e5e5a4910bd72b2ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8530c410972f09b88bb143e5e5a4910bd72b2ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8530c410972f09b88bb143e5e5a4910bd72b2ee/comments", "author": null, "committer": null, "parents": [{"sha": "b90fff0cc04c63d7cf23d689dbf1bc91f799de2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b90fff0cc04c63d7cf23d689dbf1bc91f799de2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b90fff0cc04c63d7cf23d689dbf1bc91f799de2c"}], "stats": {"total": 120, "additions": 75, "deletions": 45}, "files": [{"sha": "e8d4f99a57f840d18a667ec1e8d2d177269f6ff3", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8530c410972f09b88bb143e5e5a4910bd72b2ee/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8530c410972f09b88bb143e5e5a4910bd72b2ee/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=c8530c410972f09b88bb143e5e5a4910bd72b2ee", "patch": "@@ -1,4 +1,4 @@\n-c2fc3b83d832725accd4fa5874a5b5ca02dd90dc\n+4a6f2bb2c8d3f00966f001a5b03c57cb4a278265\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "8dac9297509d5f08340428a7104edb310de0c3d6", "filename": "libgo/go/runtime/example_test.go", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8530c410972f09b88bb143e5e5a4910bd72b2ee/libgo%2Fgo%2Fruntime%2Fexample_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8530c410972f09b88bb143e5e5a4910bd72b2ee/libgo%2Fgo%2Fruntime%2Fexample_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fexample_test.go?ref=c8530c410972f09b88bb143e5e5a4910bd72b2ee", "patch": "@@ -31,7 +31,7 @@ func ExampleFrames() {\n \t\t\t// To keep this example's output stable\n \t\t\t// even if there are changes in the testing package,\n \t\t\t// stop unwinding when we leave package runtime.\n-\t\t\tif !strings.Contains(frame.File, \"runtime/\") {\n+\t\t\tif !strings.Contains(frame.File, \"runtime/\") && !strings.Contains(frame.File, \"/test/\") {\n \t\t\t\tbreak\n \t\t\t}\n \t\t\tfmt.Printf(\"- more:%v | %s\\n\", more, frame.Function)\n@@ -47,8 +47,8 @@ func ExampleFrames() {\n \ta()\n \t// Output:\n \t// - more:true | runtime.Callers\n-\t// - more:true | runtime_test.ExampleFrames.func1\n-\t// - more:true | runtime_test.ExampleFrames.func2\n-\t// - more:true | runtime_test.ExampleFrames.func3\n+\t// - more:true | runtime_test.ExampleFrames..func1\n+\t// - more:true | runtime_test.ExampleFrames..func2\n+\t// - more:true | runtime_test.ExampleFrames..func3\n \t// - more:true | runtime_test.ExampleFrames\n }"}, {"sha": "06000eae60eac8c8f4ab46c23997762482b6c1e5", "filename": "libgo/testsuite/gotest", "status": "modified", "additions": 70, "deletions": 40, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8530c410972f09b88bb143e5e5a4910bd72b2ee/libgo%2Ftestsuite%2Fgotest", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8530c410972f09b88bb143e5e5a4910bd72b2ee/libgo%2Ftestsuite%2Fgotest", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Ftestsuite%2Fgotest?ref=c8530c410972f09b88bb143e5e5a4910bd72b2ee", "patch": "@@ -289,12 +289,6 @@ x)\n \t;;\n esac\n \n-# Some tests expect the _obj directory created by the gc Makefiles.\n-mkdir _obj\n-\n-# Some tests expect the _test directory created by the gc Makefiles.\n-mkdir _test\n-\n case \"x$gofiles\" in\n x)\n \tfor f in `ls *_test.go`; do\n@@ -404,14 +398,6 @@ x)\n \t;;\n esac\n \n-# Run any commands given in sources, like\n-#   // gotest: $GC foo.go\n-# to build any test-only dependencies.\n-holdGC=\"$GC\"\n-GC=\"$GC -g -c -I .\"\n-sed -n 's/^\\/\\/ gotest: //p' $gofiles | sh\n-GC=\"$holdGC\"\n-\n case \"x$pkgfiles\" in\n x)\n \tpkgbasefiles=`ls *.go | grep -v _test.go 2>/dev/null`\n@@ -514,26 +500,29 @@ localname() {\n #\n symtogo() {\n   result=\"\"\n-  for tp in $*\n-  do\n+  for tp in $*; do\n     s=$(echo \"$tp\" | sed -e 's/\\.\\.z2f/%/g' | sed -e 's/.*%//')\n-    # screen out methods (X.Y.Z)\n+    # Screen out methods (X.Y.Z).\n     if ! expr \"$s\" : '^[^.]*\\.[^.]*$' >/dev/null 2>&1; then\n       continue\n     fi\n-    echo \"$s\"\n+    tname=$(testname $s)\n+    # Skip TestMain.\n+    if test x$tname = xTestMain; then\n+      continue\n+    fi\n+    # Check that the function is defined in a test file,\n+    # not an ordinary non-test file.\n+    if grep \"^func $tname(\" $gofiles $xgofiles >/dev/null 2>&1; then\n+      echo \"$s\"\n+    fi\n   done\n }\n \n {\n-\ttext=\"T\"\n-\n \t# On systems using PPC64 ELF ABI v1 function symbols show up\n-\t# as descriptors in the data section.  We assume that $goarch\n-\t# distinguishes v1 (ppc64) from v2 (ppc64le).\n-\tif test \"$goos\" != \"aix\" && test \"$goarch\" = \"ppc64\"; then\n-\t    text=\"[TD]\"\n-\tfi\n+\t# as descriptors in the data section.\n+\ttext=\"[TD]\"\n \n \t# test functions are named TestFoo\n \t# the grep -v eliminates methods and other special names\n@@ -575,22 +564,18 @@ symtogo() {\n \t# test array\n \techo\n \techo 'var tests = []testing.InternalTest {'\n-\tfor i in $tests\n-\tdo\n+\tfor i in $tests; do\n \t\tn=$(testname $i)\n-\t\tif test \"$n\" != \"TestMain\"; then\n-\t\t\tj=$(localname $i)\n-\t\t\techo '\t{\"'$n'\", '$j'},'\n-\t\tfi\n+\t\tj=$(localname $i)\n+\t\techo '\t{\"'$n'\", '$j'},'\n \tdone\n \techo '}'\n \n \t# benchmark array\n \t# The comment makes the multiline declaration\n \t# gofmt-safe even when there are no benchmarks.\n \techo 'var benchmarks = []testing.InternalBenchmark{ //'\n-\tfor i in $benchmarks\n-\tdo\n+\tfor i in $benchmarks; do\n \t\tn=$(testname $i)\n \t\tj=$(localname $i)\n \t\techo '\t{\"'$n'\", '$j'},'\n@@ -599,13 +584,58 @@ symtogo() {\n \n \t# examples array\n \techo 'var examples = []testing.InternalExample{ //'\n-\t# This doesn't work because we don't pick up the output.\n-\t#for i in $examples\n-\t#do\n-\t#\tn=$(testname $i)\n-\t#\tj=$(localname $i)\n-\t#\techo '\t{\"'$n'\", '$j', \"\"},'\n-\t#done\n+\tfor i in $examples; do\n+\t\tn=$(testname $i)\n+\t\tj=$(localname $i)\n+\t\t# Look for a //output comment.\n+\t\thasoutput=false\n+\t\tunordered=false\n+\t\toutput=\n+\t\tfor f in $gofiles $xgofiles; do\n+\t\t    if ! grep \"^func $n(\" $f >/dev/null 2>&1; then\n+\t\t\tcontinue\n+\t\t    fi\n+\t\t    # Copy the output comment, if any, into example.txt.\n+\t\t    # Remove the comment markers.\n+\t\t    sed -n \"/^func $n(/,/^}$/ p\" $f |\n+\t\t\tsed -n '\\|// \\([Uu]nordered \\)\\?[Oo]utput:|,$ p' |\n+\t\t\tsed -n '\\|//| s|[ \t]*// \\?||p' > example.txt\n+\t\t    # Check whether we found an output comment.\n+\t\t    if ! sed -n '1p' < example.txt | grep '[Oo]utput:' >/dev/null 2>&1; then\n+\t\t\t# An example with no output is only compiled, not run,\n+\t\t\t# so don't add it to the examples slice.\n+\t\t\trm -f example.txt\n+\t\t\tbreak\n+\t\t    fi\n+\t\t    # Check whether the output can be unordered.\n+\t\t    unordered=false\n+\t\t    if sed -n '1p' < example.txt | grep -i unordered; then\n+\t\t\tunordered=true\n+\t\t    fi\n+\t\t    # Remove the output header.\n+\t\t    # Quote backslashes.\n+\t\t    # Quote quotation characters.\n+\t\t    # Turn tab into \\t.\n+\t\t    # Turn pairs of spaces into \" \\x20\", because $() will\n+\t\t    # drop duplicate spaces.\n+\t\t    # Drop trailing spaces, and turn newlines into \\n.\n+\t\t    output=\"$(sed '1 s/\\([Uu]nordered \\)\\?[Oo]utput:[ \t]*//' < example.txt |\n+\t\t\t\t sed -e 's/\\\\/\\\\\\\\/g' \\\n+\t\t\t\t     -e 's/\"/\\\\\"/g' \\\n+\t\t\t\t     -e 's/\t/\\\\t/g' \\\n+\t\t\t\t     -e 's/  / \\\\x20/g' \\\n+\t\t\t\t     -e 's/[ \t]*$/\\\\n/g' |\n+\t\t\t\t tr -d '\\n')\"\n+\t\t    # Remove leading and trailing \\n.\n+\t\t    output=\"$(echo \"$output\" | sed -e 's/^\\(\\\\n\\)*//' -e 's/\\(\\\\n\\)*$//')\"\n+\t\t    hasoutput=true\n+\t\t    rm -f example.txt\n+\t\t    break\n+\t\tdone\n+\t\tif test x$hasoutput = xtrue; then\n+\t\t    echo '\t{\"'$n'\", '$j', \"'\"$output\"'\", '$unordered'},'\n+\t\tfi\n+\tdone\n \techo '}'\n \n \t# body"}]}