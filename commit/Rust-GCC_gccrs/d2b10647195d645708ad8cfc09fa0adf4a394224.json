{"sha": "d2b10647195d645708ad8cfc09fa0adf4a394224", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJiMTA2NDcxOTVkNjQ1NzA4YWQ4Y2ZjMDlmYTBhZGY0YTM5NDIyNA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2011-08-02T15:04:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T15:04:46Z"}, "message": "sem_ch6 (Analyze_Expression_Function): treat the function as Inline_Always...\n\n2011-08-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6 (Analyze_Expression_Function): treat the function as\n\tInline_Always, and introduce a subprogram declaration for it when it is\n\tnot a completion.\n\t* inline.adb (Add_Inlined_Body): recognize bodies that come from\n\texpression functions, so that the back-end can determine whether they\n\tcan in fact be inlined.\n\t* sem_util.adb (Is_Expression_Function): predicate to determine whether\n\ta function body comes from an expression function.\n\nFrom-SVN: r177173", "tree": {"sha": "f56b7bc0e4d5ca310780b045799c0f003bb066b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f56b7bc0e4d5ca310780b045799c0f003bb066b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2b10647195d645708ad8cfc09fa0adf4a394224", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2b10647195d645708ad8cfc09fa0adf4a394224", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2b10647195d645708ad8cfc09fa0adf4a394224", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2b10647195d645708ad8cfc09fa0adf4a394224/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c7b9d548d3533d6b48dcdfb882e5ce424f3d53c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7b9d548d3533d6b48dcdfb882e5ce424f3d53c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7b9d548d3533d6b48dcdfb882e5ce424f3d53c4"}], "stats": {"total": 82, "additions": 76, "deletions": 6}, "files": [{"sha": "e8407baba03b3454b4d887f49310e7333839d2de", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2b10647195d645708ad8cfc09fa0adf4a394224/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2b10647195d645708ad8cfc09fa0adf4a394224/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d2b10647195d645708ad8cfc09fa0adf4a394224", "patch": "@@ -1,3 +1,14 @@\n+2011-08-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6 (Analyze_Expression_Function): treat the function as\n+\tInline_Always, and introduce a subprogram declaration for it when it is\n+\tnot a completion.\n+\t* inline.adb (Add_Inlined_Body): recognize bodies that come from\n+\texpression functions, so that the back-end can determine whether they\n+\tcan in fact be inlined.\n+\t* sem_util.adb (Is_Expression_Function): predicate to determine whether\n+\ta function body comes from an expression function.\n+\n 2011-08-02  Gary Dismukes  <dismukes@adacore.com>\n \n \t* sem_ch6.adb (Check_Conformance): Revise the check for nonconforming"}, {"sha": "68e53a5de6d1e5cfe484d05de0cdbd3248fb216e", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2b10647195d645708ad8cfc09fa0adf4a394224/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2b10647195d645708ad8cfc09fa0adf4a394224/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=d2b10647195d645708ad8cfc09fa0adf4a394224", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -342,7 +342,9 @@ package body Inline is\n                   null;\n \n                elsif not Is_Inlined (Pack)\n-                 and then not Has_Completion (E)\n+                 and then\n+                   (not Has_Completion (E)\n+                      or else Is_Expression_Function (E))\n                then\n                   Set_Is_Inlined (Pack);\n                   Inlined_Bodies.Increment_Last;"}, {"sha": "1ca71fc288e139cd694fbbcded7adb1aaa1cdd92", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2b10647195d645708ad8cfc09fa0adf4a394224/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2b10647195d645708ad8cfc09fa0adf4a394224/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=d2b10647195d645708ad8cfc09fa0adf4a394224", "patch": "@@ -271,15 +271,21 @@ package body Sem_Ch6 is\n       LocX     : constant Source_Ptr := Sloc (Expression (N));\n       Def_Id   : constant Entity_Id  := Defining_Entity (Specification (N));\n       New_Body : Node_Id;\n+      New_Decl : Node_Id;\n \n       Prev : constant Entity_Id := Current_Entity_In_Scope (Def_Id);\n       --  If the expression is a completion, Prev is the entity whose\n       --  declaration is completed.\n \n    begin\n       --  This is one of the occasions on which we transform the tree during\n-      --  semantic analysis. Transform the expression function into an\n-      --  equivalent subprogram body, and then analyze that.\n+      --  semantic analysis. If this is a completion,  transform the expression\n+      --  function into an equivalent subprogram body, and analyze it.\n+\n+      --  Expression functions are inlined unconditionally. The back-end will\n+      --  determine whether this is possible.\n+\n+      Inline_Processing_Required := True;\n \n       New_Body :=\n         Make_Subprogram_Body (Loc,\n@@ -304,10 +310,37 @@ package body Sem_Ch6 is\n          Rewrite (N, Make_Null_Statement (Loc));\n          Analyze (N);\n          Analyze (New_Body);\n+         Set_Is_Inlined (Prev);\n \n-      else\n+      elsif Present (Prev) then\n          Rewrite (N, New_Body);\n+         Set_Is_Inlined (Prev);\n          Analyze (N);\n+\n+      --  If this is not a completion, create both a declaration and a body,\n+      --  so that the expression can be inlined whenever possible.\n+\n+      else\n+         New_Decl :=\n+           Make_Subprogram_Declaration (Loc,\n+             Specification => Specification (N));\n+         Rewrite (N, New_Decl);\n+         Analyze (N);\n+         Set_Is_Inlined (Defining_Entity (New_Decl));\n+\n+         --  Create new set of formals for specification in body.\n+\n+         Set_Specification (New_Body,\n+           Make_Function_Specification (Loc,\n+             Defining_Unit_Name =>\n+               Make_Defining_Identifier (Loc, Chars (Defining_Entity (N))),\n+             Parameter_Specifications =>\n+               Copy_Parameter_List (Defining_Entity (New_Decl)),\n+             Result_Definition =>\n+               New_Copy_Tree (Result_Definition (Specification (New_Decl)))));\n+\n+         Insert_After (N, New_Body);\n+         Analyze (New_Body);\n       end if;\n    end Analyze_Expression_Function;\n "}, {"sha": "ef650401d7a65dc2d561c358d6f7c40829ca8ef6", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2b10647195d645708ad8cfc09fa0adf4a394224/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2b10647195d645708ad8cfc09fa0adf4a394224/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=d2b10647195d645708ad8cfc09fa0adf4a394224", "patch": "@@ -6541,6 +6541,26 @@ package body Sem_Util is\n       end if;\n    end Is_Descendent_Of;\n \n+   ----------------------------\n+   -- Is_Expression_Function --\n+   ----------------------------\n+\n+   function Is_Expression_Function (Subp : Entity_Id) return Boolean is\n+      Decl : constant Node_Id := Unit_Declaration_Node (Subp);\n+\n+   begin\n+      return Ekind (Subp) = E_Function\n+        and then Nkind (Decl) = N_Subprogram_Declaration\n+        and then\n+          (Nkind (Original_Node (Decl)) = N_Expression_Function\n+            or else\n+              (Present (Corresponding_Body (Decl))\n+                and then\n+                  Nkind (Original_Node\n+                     (Unit_Declaration_Node (Corresponding_Body (Decl))))\n+                 = N_Expression_Function));\n+   end Is_Expression_Function;\n+\n    --------------\n    -- Is_False --\n    --------------"}, {"sha": "163e6470431298a66f57dd37e40ff8e992e07129", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2b10647195d645708ad8cfc09fa0adf4a394224/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2b10647195d645708ad8cfc09fa0adf4a394224/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=d2b10647195d645708ad8cfc09fa0adf4a394224", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -741,6 +741,10 @@ package Sem_Util is\n    --  First determine whether type T is an interface and then check whether\n    --  it is of protected, synchronized or task kind.\n \n+   function Is_Expression_Function (Subp : Entity_Id) return Boolean;\n+   --  Predicate to determine whether a function entity comes from a rewritten\n+   --  expression function, and should be inlined unconditionally.\n+\n    function Is_False (U : Uint) return Boolean;\n    pragma Inline (Is_False);\n    --  The argument is a Uint value which is the Boolean'Pos value of a Boolean"}]}