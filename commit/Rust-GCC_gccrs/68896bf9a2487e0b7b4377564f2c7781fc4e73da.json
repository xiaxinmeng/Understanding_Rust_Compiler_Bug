{"sha": "68896bf9a2487e0b7b4377564f2c7781fc4e73da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg4OTZiZjlhMjQ4N2UwYjdiNDM3NzU2NGYyYzc3ODFmYzRlNzNkYQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-04-11T15:53:46Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-04-11T15:53:46Z"}, "message": "output.h (assemble_real): Declare if REAL_VALUE_TYPE is defined.\n\n\t* output.h (assemble_real): Declare if REAL_VALUE_TYPE is defined.\n\n\t* real.h (ereal_atof, real_value_truncate, target_isnan,\n\ttarget_isinf, target_negative, assemble_real, debug_real): Delete\n\tredundant prototypes.\n\nFrom-SVN: r41257", "tree": {"sha": "150c74791c49f894957185655856458fe0b5efbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/150c74791c49f894957185655856458fe0b5efbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68896bf9a2487e0b7b4377564f2c7781fc4e73da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68896bf9a2487e0b7b4377564f2c7781fc4e73da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68896bf9a2487e0b7b4377564f2c7781fc4e73da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68896bf9a2487e0b7b4377564f2c7781fc4e73da/comments", "author": null, "committer": null, "parents": [{"sha": "d6684bc856c24bcd0a8d391579875a456146f585", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6684bc856c24bcd0a8d391579875a456146f585", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6684bc856c24bcd0a8d391579875a456146f585"}], "stats": {"total": 25, "additions": 8, "deletions": 17}, "files": [{"sha": "9271319a21f884237644218fd05206d17b3ed74e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68896bf9a2487e0b7b4377564f2c7781fc4e73da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68896bf9a2487e0b7b4377564f2c7781fc4e73da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68896bf9a2487e0b7b4377564f2c7781fc4e73da", "patch": "@@ -1,5 +1,11 @@\n 2001-04-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n+\t* output.h (assemble_real): Declare if REAL_VALUE_TYPE is defined.\n+\n+\t* real.h (ereal_atof, real_value_truncate, target_isnan,\n+\ttarget_isinf, target_negative, assemble_real, debug_real): Delete\n+\tredundant prototypes.\n+\n \t* Makefile.in (ifcvt.o): Depend on toplev.h.\n \n \t* c-semantics.c: Include expr.h."}, {"sha": "93badde43fab3d6588f9c6f29cbb2cbe4048a6a8", "filename": "gcc/output.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68896bf9a2487e0b7b4377564f2c7781fc4e73da/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68896bf9a2487e0b7b4377564f2c7781fc4e73da/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=68896bf9a2487e0b7b4377564f2c7781fc4e73da", "patch": "@@ -311,7 +311,7 @@ extern void assemble_name\t\tPARAMS ((FILE *, const char *));\n extern int assemble_integer\t\tPARAMS ((rtx, int, int));\n extern int assemble_eh_integer\t\tPARAMS ((rtx, int, int));\n \n-#ifdef EMUSHORT\n+#ifdef REAL_VALUE_TYPE\n /* Assemble the floating-point constant D into an object of size MODE.  */\n extern void assemble_real\t\tPARAMS ((REAL_VALUE_TYPE,\n \t\t\t\t\t       enum machine_mode));"}, {"sha": "58cae6ffed4a48ae79f8eb9f955f69cc06c07b34", "filename": "gcc/real.h", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68896bf9a2487e0b7b4377564f2c7781fc4e73da/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68896bf9a2487e0b7b4377564f2c7781fc4e73da/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=68896bf9a2487e0b7b4377564f2c7781fc4e73da", "patch": "@@ -141,7 +141,6 @@ extern void earith\t\tPARAMS ((REAL_VALUE_TYPE *, int,\n \t\t\t\t       REAL_VALUE_TYPE *, REAL_VALUE_TYPE *));\n extern REAL_VALUE_TYPE etrunci\tPARAMS ((REAL_VALUE_TYPE));\n extern REAL_VALUE_TYPE etruncui\tPARAMS ((REAL_VALUE_TYPE));\n-extern REAL_VALUE_TYPE ereal_atof PARAMS ((const char *, enum machine_mode));\n extern REAL_VALUE_TYPE ereal_negate PARAMS ((REAL_VALUE_TYPE));\n extern HOST_WIDE_INT efixi\tPARAMS ((REAL_VALUE_TYPE));\n extern unsigned HOST_WIDE_INT efixui PARAMS ((REAL_VALUE_TYPE));\n@@ -176,8 +175,6 @@ extern REAL_VALUE_TYPE ereal_from_double PARAMS ((HOST_WIDE_INT *));\n /* These return REAL_VALUE_TYPE: */\n #define REAL_VALUE_RNDZINT(x) (etrunci (x))\n #define REAL_VALUE_UNSIGNED_RNDZINT(x) (etruncui (x))\n-extern REAL_VALUE_TYPE real_value_truncate\tPARAMS ((enum machine_mode,\n-\t\t\t\t\t\t\tREAL_VALUE_TYPE));\n #define REAL_VALUE_TRUNCATE(mode, x)  real_value_truncate (mode, x)\n \n /* These return HOST_WIDE_INT: */\n@@ -370,7 +367,6 @@ extern double ldexp PARAMS ((double, int));\n #ifndef REAL_VALUE_ATOF\n #if 1\n /* Use real.c to convert decimal numbers to binary, ... */\n-extern REAL_VALUE_TYPE ereal_atof PARAMS ((const char *, enum machine_mode));\n #define REAL_VALUE_ATOF(x, s) ereal_atof (x, s)\n /* Could use ereal_atof here for hexadecimal floats too, but real_hex_to_f\n    is OK and it uses faster native fp arithmetic.  */\n@@ -430,10 +426,6 @@ extern REAL_VALUE_TYPE real_value_truncate PARAMS ((enum machine_mode,\n #define REAL_VALUE_NEGATIVE(x) (target_negative (x))\n #endif\n \n-extern int target_isnan\t\t\tPARAMS ((REAL_VALUE_TYPE));\n-extern int target_isinf\t\t\tPARAMS ((REAL_VALUE_TYPE));\n-extern int target_negative\t\tPARAMS ((REAL_VALUE_TYPE));\n-\n /* Determine whether a floating-point value X is minus 0. */\n #ifndef REAL_VALUE_MINUS_ZERO\n #define REAL_VALUE_MINUS_ZERO(x) ((x) == 0 && REAL_VALUE_NEGATIVE (x))\n@@ -487,13 +479,6 @@ extern int target_isnan\t\tPARAMS ((REAL_VALUE_TYPE));\n extern int target_isinf\t\tPARAMS ((REAL_VALUE_TYPE));\n extern int target_negative\tPARAMS ((REAL_VALUE_TYPE));\n extern void debug_real\t\tPARAMS ((REAL_VALUE_TYPE));\n+extern REAL_VALUE_TYPE ereal_atof PARAMS ((const char *, enum machine_mode));\n \n-/* In varasm.c */\n-extern void assemble_real\t\tPARAMS ((REAL_VALUE_TYPE,\n-\t\t\t\t\t       enum machine_mode));\n-extern void debug_real\t\t\tPARAMS ((REAL_VALUE_TYPE));\n-\n-/* In varasm.c */\n-extern void assemble_real\t\tPARAMS ((REAL_VALUE_TYPE,\n-\t\t\t\t\t       enum machine_mode));\n #endif /* Not REAL_H_INCLUDED */"}]}