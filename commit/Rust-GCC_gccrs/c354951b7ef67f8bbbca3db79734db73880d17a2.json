{"sha": "c354951b7ef67f8bbbca3db79734db73880d17a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM1NDk1MWI3ZWY2N2Y4YmJiY2EzZGI3OTczNGRiNzM4ODBkMTdhMg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2012-12-19T12:39:17Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2012-12-19T12:39:17Z"}, "message": "target.def: Define canonicalize_comparison hook.\n\n2012-12-19  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* target.def: Define canonicalize_comparison hook.\n\t* targhooks.h (default_canonicalize_comparison): New prototype.\n\t* targhooks.c (default_canonicalize_comparison): New function.\n\t* doc/tm.texi: Add documentation for the new target hook.\n\t* doc/tm.texi.in: Likewise.\n\t* combine.c (try_combine): Adjust to use the target hook.\n\t* config/alpha/alpha.h (CANONICALIZE_COMPARISON): Remove macro\n\tdefinition.\n\t* config/alpha/alpha.c (alpha_canonicalize_comparison): New\n\tfunction.\n\t(TARGET_CANONICALIZE_COMPARISON): New macro definition.\n\t* config/arm/arm-protos.h (arm_canonicalize_comparison): Remove\n\tprototype.\n\t* config/arm/arm.c (arm_canonicalize_comparison): Add new\n\tparameter.\n\t(TARGET_CANONICALIZE_COMPARISON): New macro definition.\n\t* config/arm/arm.h (CANONICALIZE_COMPARISON): Remove macro\n\tdefinition.\n\t* config/s390/s390-protos.h (s390_canonicalize_comparison): Remove\n\tprototype.\n\t* config/s390/s390.c (s390_canonicalize_comparison): Add new\n\tparameter.\n\t(TARGET_CANONICALIZE_COMPARISON): New macro definition.\n\t* config/s390/s390.h (CANONICALIZE_COMPARISON): Remove macro\n\tdefinition.\n\t* config/sh/sh-protos.h (sh_canonicalize_comparison): Remove\n\tprototype.\n\t* config/sh/sh.c (sh_canonicalize_comparison): Add new prototype.  New\n\tfunction overloading the old one.\n\t(TARGET_CANONICALIZE_COMPARISON): New macro definition.\n\t* config/sh/sh.h (CANONICALIZE_COMPARISON): Remove macro\n\tdefinition.\n\t* config/spu/spu.c (spu_canonicalize_comparison): New function.\n\t(TARGET_CANONICALIZE_COMPARISON): New macro definition.\n\t* config/spu/spu.h (CANONICALIZE_COMPARISON): Remove macro\n\tdefinition.\n\nFrom-SVN: r194608", "tree": {"sha": "b7f4e93614d364fb2bd6d9376c85d35b25544854", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7f4e93614d364fb2bd6d9376c85d35b25544854"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c354951b7ef67f8bbbca3db79734db73880d17a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c354951b7ef67f8bbbca3db79734db73880d17a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c354951b7ef67f8bbbca3db79734db73880d17a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c354951b7ef67f8bbbca3db79734db73880d17a2/comments", "author": null, "committer": null, "parents": [{"sha": "e90c56c6b2a90e0a0d1a97a0238da0b4cd5b563d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e90c56c6b2a90e0a0d1a97a0238da0b4cd5b563d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e90c56c6b2a90e0a0d1a97a0238da0b4cd5b563d"}], "stats": {"total": 314, "additions": 207, "deletions": 107}, "files": [{"sha": "fe52e01a93cb57d6c7d48df799005397a09f08e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c354951b7ef67f8bbbca3db79734db73880d17a2", "patch": "@@ -1,3 +1,42 @@\n+2012-12-19  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* target.def: Define canonicalize_comparison hook.\n+\t* targhooks.h (default_canonicalize_comparison): New prototype.\n+\t* targhooks.c (default_canonicalize_comparison): New function.\n+\t* doc/tm.texi: Add documentation for the new target hook.\n+\t* doc/tm.texi.in: Likewise.\n+\t* combine.c (try_combine): Adjust to use the target hook.\n+\t* config/alpha/alpha.h (CANONICALIZE_COMPARISON): Remove macro\n+\tdefinition.\n+\t* config/alpha/alpha.c (alpha_canonicalize_comparison): New\n+\tfunction.\n+\t(TARGET_CANONICALIZE_COMPARISON): New macro definition.\n+\t* config/arm/arm-protos.h (arm_canonicalize_comparison): Remove\n+\tprototype.\n+\t* config/arm/arm.c (arm_canonicalize_comparison): Add new\n+\tparameter.\n+\t(TARGET_CANONICALIZE_COMPARISON): New macro definition.\n+\t* config/arm/arm.h (CANONICALIZE_COMPARISON): Remove macro\n+\tdefinition.\n+\t* config/s390/s390-protos.h (s390_canonicalize_comparison): Remove\n+\tprototype.\n+\t* config/s390/s390.c (s390_canonicalize_comparison): Add new\n+\tparameter.\n+\t(TARGET_CANONICALIZE_COMPARISON): New macro definition.\n+\t* config/s390/s390.h (CANONICALIZE_COMPARISON): Remove macro\n+\tdefinition.\n+\t* config/sh/sh-protos.h (sh_canonicalize_comparison): Remove\n+\tprototype.\n+\t* config/sh/sh.c (sh_canonicalize_comparison): Add new prototype.  New\n+\tfunction overloading the old one.\n+\t(TARGET_CANONICALIZE_COMPARISON): New macro definition.\n+\t* config/sh/sh.h (CANONICALIZE_COMPARISON): Remove macro\n+\tdefinition.\n+\t* config/spu/spu.c (spu_canonicalize_comparison): New function.\n+\t(TARGET_CANONICALIZE_COMPARISON): New macro definition.\n+\t* config/spu/spu.h (CANONICALIZE_COMPARISON): Remove macro\n+\tdefinition.\n+\n 2012-12-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/55730"}, {"sha": "001025cc36f9a8e5446c9f4402bcb4cd8ebc015d", "filename": "gcc/combine.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=c354951b7ef67f8bbbca3db79734db73880d17a2", "patch": "@@ -494,6 +494,17 @@ static rtx gen_lowpart_or_truncate (enum machine_mode, rtx);\n static const struct rtl_hooks combine_rtl_hooks = RTL_HOOKS_INITIALIZER;\n \n \f\n+/* Convenience wrapper for the canonicalize_comparison target hook.\n+   Target hooks cannot use enum rtx_code.  */\n+static inline void\n+target_canonicalize_comparison (enum rtx_code *code, rtx *op0, rtx *op1,\n+\t\t\t\tbool op0_preserve_value)\n+{\n+  int code_int = (int)*code;\n+  targetm.canonicalize_comparison (&code_int, op0, op1, op0_preserve_value);\n+  *code = (enum rtx_code)code_int;\n+}\n+\n /* Try to split PATTERN found in INSN.  This returns NULL_RTX if\n    PATTERN can not be split.  Otherwise, it returns an insn sequence.\n    This is a wrapper around split_insns which ensures that the\n@@ -2944,9 +2955,7 @@ try_combine (rtx i3, rtx i2, rtx i1, rtx i0, int *new_direct_jump_p,\n \t  compare_code = orig_compare_code = GET_CODE (*cc_use_loc);\n \t  compare_code = simplify_compare_const (compare_code,\n \t\t\t\t\t\t op0, &op1);\n-#ifdef CANONICALIZE_COMPARISON\n-\t  CANONICALIZE_COMPARISON (compare_code, op0, op1);\n-#endif\n+\t  target_canonicalize_comparison (&compare_code, &op0, &op1, 1);\n \t}\n \n       /* Do the rest only if op1 is const0_rtx, which may be the\n@@ -11959,11 +11968,9 @@ simplify_comparison (enum rtx_code code, rtx *pop0, rtx *pop1)\n \t    }\n \t}\n \n-#ifdef CANONICALIZE_COMPARISON\n   /* If this machine only supports a subset of valid comparisons, see if we\n      can convert an unsupported one into a supported one.  */\n-  CANONICALIZE_COMPARISON (code, op0, op1);\n-#endif\n+  target_canonicalize_comparison (&code, &op0, &op1, 0);\n \n   *pop0 = op0;\n   *pop1 = op1;"}, {"sha": "fa2f7335881c790e59528c19ce85475bfe24a99f", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=c354951b7ef67f8bbbca3db79734db73880d17a2", "patch": "@@ -9686,6 +9686,30 @@ alpha_conditional_register_usage (void)\n     for (i = 32; i < 63; i++)\n       fixed_regs[i] = call_used_regs[i] = 1;\n }\n+\n+/* Canonicalize a comparison from one we don't have to one we do have.  */\n+\n+static void\n+alpha_canonicalize_comparison (int *code, rtx *op0, rtx *op1,\n+\t\t\t       bool op0_preserve_value)\n+{\n+  if (!op0_preserve_value\n+      && (*code == GE || *code == GT || *code == GEU || *code == GTU)\n+      && (REG_P (*op1) || *op1 == const0_rtx))\n+    {\n+      rtx tem = *op0;\n+      *op0 = *op1;\n+      *op1 = tem;\n+      *code = (int)swap_condition ((enum rtx_code)*code);\n+    }\n+\n+  if ((*code == LT || *code == LTU)\n+      && CONST_INT_P (*op1) && INTVAL (*op1) == 256)\n+    {\n+      *code = *code == LT ? LE : LEU;\n+      *op1 = GEN_INT (255);\n+    }\n+}\n \f\n /* Initialize the GCC target structure.  */\n #if TARGET_ABI_OPEN_VMS\n@@ -9853,6 +9877,9 @@ alpha_conditional_register_usage (void)\n #undef TARGET_CONDITIONAL_REGISTER_USAGE\n #define TARGET_CONDITIONAL_REGISTER_USAGE alpha_conditional_register_usage\n \n+#undef TARGET_CANONICALIZE_COMPARISON\n+#define TARGET_CANONICALIZE_COMPARISON alpha_canonicalize_comparison\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n \f"}, {"sha": "a70c7f89f47d6a882df48ce31b627f2e5231b705", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=c354951b7ef67f8bbbca3db79734db73880d17a2", "patch": "@@ -922,26 +922,6 @@ do {\t\t\t\t\t\t\t\t\t     \\\n #define FLOAT_STORE_FLAG_VALUE(MODE) \\\n   REAL_VALUE_ATOF ((TARGET_FLOAT_VAX ? \"0.5\" : \"2.0\"), (MODE))\n \n-/* Canonicalize a comparison from one we don't have to one we do have.  */\n-\n-#define CANONICALIZE_COMPARISON(CODE,OP0,OP1) \\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    if (((CODE) == GE || (CODE) == GT || (CODE) == GEU || (CODE) == GTU) \\\n-\t&& (REG_P (OP1) || (OP1) == const0_rtx))\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\trtx tem = (OP0);\t\t\t\t\t\t\\\n-\t(OP0) = (OP1);\t\t\t\t\t\t\t\\\n-\t(OP1) = tem;\t\t\t\t\t\t\t\\\n-\t(CODE) = swap_condition (CODE);\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    if (((CODE) == LT || (CODE) == LTU)\t\t\t\t\t\\\n-\t&& CONST_INT_P (OP1) && INTVAL (OP1) == 256)\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\t(CODE) = (CODE) == LT ? LE : LEU;\t\t\t\t\\\n-\t(OP1) = GEN_INT (255);\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-  } while (0)\n-\n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction\n    between pointers and any other objects of this machine mode.  */"}, {"sha": "4c61e35ea280bc9123ce1575679b9277b8cad9dd", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=c354951b7ef67f8bbbca3db79734db73880d17a2", "patch": "@@ -53,7 +53,6 @@ extern int const_ok_for_op (HOST_WIDE_INT, enum rtx_code);\n extern int const_ok_for_dimode_op (HOST_WIDE_INT, enum rtx_code);\n extern int arm_split_constant (RTX_CODE, enum machine_mode, rtx,\n \t\t\t       HOST_WIDE_INT, rtx, rtx, int);\n-extern RTX_CODE arm_canonicalize_comparison (RTX_CODE, rtx *, rtx *);\n extern int legitimate_pic_operand_p (rtx);\n extern rtx legitimize_pic_address (rtx, enum machine_mode, rtx);\n extern rtx legitimize_tls_address (rtx, rtx);"}, {"sha": "be4428b920689310fec20ebaf8014e6784243ce1", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 41, "deletions": 27, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c354951b7ef67f8bbbca3db79734db73880d17a2", "patch": "@@ -269,7 +269,8 @@ static int arm_cortex_a5_branch_cost (bool, bool);\n \n static bool arm_vectorize_vec_perm_const_ok (enum machine_mode vmode,\n \t\t\t\t\t     const unsigned char *sel);\n-\n+static void arm_canonicalize_comparison (int *code, rtx *op0, rtx *op1,\n+\t\t\t\t\t bool op0_preserve_value);\n \f\n /* Table of machine attributes.  */\n static const struct attribute_spec arm_attribute_table[] =\n@@ -626,6 +627,10 @@ static const struct attribute_spec arm_attribute_table[] =\n #define TARGET_VECTORIZE_VEC_PERM_CONST_OK \\\n   arm_vectorize_vec_perm_const_ok\n \n+#undef TARGET_CANONICALIZE_COMPARISON\n+#define TARGET_CANONICALIZE_COMPARISON \\\n+  arm_canonicalize_comparison\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Obstack for minipool constant handling.  */\n@@ -3543,8 +3548,9 @@ arm_gen_constant (enum rtx_code code, enum machine_mode mode, rtx cond,\n    This can be done for a few constant compares, where we can make the\n    immediate value easier to load.  */\n \n-enum rtx_code\n-arm_canonicalize_comparison (enum rtx_code code, rtx *op0, rtx *op1)\n+static void\n+arm_canonicalize_comparison (int *code, rtx *op0, rtx *op1,\n+\t\t\t     bool op0_preserve_value)\n {\n   enum machine_mode mode;\n   unsigned HOST_WIDE_INT i, maxval;\n@@ -3563,23 +3569,24 @@ arm_canonicalize_comparison (enum rtx_code code, rtx *op0, rtx *op1)\n     {\n       rtx tem;\n \n-      if (code == GT || code == LE\n-\t  || (!TARGET_ARM && (code == GTU || code == LEU)))\n+      if (*code == GT || *code == LE\n+\t  || (!TARGET_ARM && (*code == GTU || *code == LEU)))\n \t{\n \t  /* Missing comparison.  First try to use an available\n \t     comparison.  */\n \t  if (CONST_INT_P (*op1))\n \t    {\n \t      i = INTVAL (*op1);\n-\t      switch (code)\n+\t      switch (*code)\n \t\t{\n \t\tcase GT:\n \t\tcase LE:\n \t\t  if (i != maxval\n \t\t      && arm_const_double_by_immediates (GEN_INT (i + 1)))\n \t\t    {\n \t\t      *op1 = GEN_INT (i + 1);\n-\t\t      return code == GT ? GE : LT;\n+\t\t      *code = *code == GT ? GE : LT;\n+\t\t      return;\n \t\t    }\n \t\t  break;\n \t\tcase GTU:\n@@ -3588,7 +3595,8 @@ arm_canonicalize_comparison (enum rtx_code code, rtx *op0, rtx *op1)\n \t\t      && arm_const_double_by_immediates (GEN_INT (i + 1)))\n \t\t    {\n \t\t      *op1 = GEN_INT (i + 1);\n-\t\t      return code == GTU ? GEU : LTU;\n+\t\t      *code = *code == GTU ? GEU : LTU;\n+\t\t      return;\n \t\t    }\n \t\t  break;\n \t\tdefault:\n@@ -3597,19 +3605,22 @@ arm_canonicalize_comparison (enum rtx_code code, rtx *op0, rtx *op1)\n \t    }\n \n \t  /* If that did not work, reverse the condition.  */\n-\t  tem = *op0;\n-\t  *op0 = *op1;\n-\t  *op1 = tem;\n-\t  return swap_condition (code);\n+\t  if (!op0_preserve_value)\n+\t    {\n+\t      tem = *op0;\n+\t      *op0 = *op1;\n+\t      *op1 = tem;\n+\t      *code = (int)swap_condition ((enum rtx_code)*code);\n+\t    }\n \t}\n-\n-      return code;\n+      return;\n     }\n \n   /* If *op0 is (zero_extend:SI (subreg:QI (reg:SI) 0)) and comparing\n      with const0_rtx, change it to (and:SI (reg:SI) (const_int 255)),\n      to facilitate possible combining with a cmp into 'ands'.  */\n-  if (mode == SImode\n+  if (!op0_preserve_value\n+      && mode == SImode\n       && GET_CODE (*op0) == ZERO_EXTEND\n       && GET_CODE (XEXP (*op0, 0)) == SUBREG\n       && GET_MODE (XEXP (*op0, 0)) == QImode\n@@ -3624,23 +3635,24 @@ arm_canonicalize_comparison (enum rtx_code code, rtx *op0, rtx *op1)\n   if (!CONST_INT_P (*op1)\n       || const_ok_for_arm (INTVAL (*op1))\n       || const_ok_for_arm (- INTVAL (*op1)))\n-    return code;\n+    return;\n \n   i = INTVAL (*op1);\n \n-  switch (code)\n+  switch (*code)\n     {\n     case EQ:\n     case NE:\n-      return code;\n+      return;\n \n     case GT:\n     case LE:\n       if (i != maxval\n \t  && (const_ok_for_arm (i + 1) || const_ok_for_arm (-(i + 1))))\n \t{\n \t  *op1 = GEN_INT (i + 1);\n-\t  return code == GT ? GE : LT;\n+\t  *code = *code == GT ? GE : LT;\n+\t  return;\n \t}\n       break;\n \n@@ -3650,7 +3662,8 @@ arm_canonicalize_comparison (enum rtx_code code, rtx *op0, rtx *op1)\n \t  && (const_ok_for_arm (i - 1) || const_ok_for_arm (-(i - 1))))\n \t{\n \t  *op1 = GEN_INT (i - 1);\n-\t  return code == GE ? GT : LE;\n+\t  *code = *code == GE ? GT : LE;\n+\t  return;\n \t}\n       break;\n \n@@ -3660,7 +3673,8 @@ arm_canonicalize_comparison (enum rtx_code code, rtx *op0, rtx *op1)\n \t  && (const_ok_for_arm (i + 1) || const_ok_for_arm (-(i + 1))))\n \t{\n \t  *op1 = GEN_INT (i + 1);\n-\t  return code == GTU ? GEU : LTU;\n+\t  *code = *code == GTU ? GEU : LTU;\n+\t  return;\n \t}\n       break;\n \n@@ -3670,15 +3684,14 @@ arm_canonicalize_comparison (enum rtx_code code, rtx *op0, rtx *op1)\n \t  && (const_ok_for_arm (i - 1) || const_ok_for_arm (-(i - 1))))\n \t{\n \t  *op1 = GEN_INT (i - 1);\n-\t  return code == GEU ? GTU : LEU;\n+\t  *code = *code == GEU ? GTU : LEU;\n+\t  return;\n \t}\n       break;\n \n     default:\n       gcc_unreachable ();\n     }\n-\n-  return code;\n }\n \n \n@@ -26981,7 +26994,7 @@ bool\n arm_validize_comparison (rtx *comparison, rtx * op1, rtx * op2)\n {\n   enum rtx_code code = GET_CODE (*comparison);\n-  enum rtx_code canonical_code;\n+  int code_int;\n   enum machine_mode mode = (GET_MODE (*op1) == VOIDmode) \n     ? GET_MODE (*op2) : GET_MODE (*op1);\n \n@@ -26990,8 +27003,9 @@ arm_validize_comparison (rtx *comparison, rtx * op1, rtx * op2)\n   if (code == UNEQ || code == LTGT)\n     return false;\n \n-  canonical_code = arm_canonicalize_comparison (code, op1, op2);\n-  PUT_CODE (*comparison, canonical_code);\n+  code_int = (int)code;\n+  arm_canonicalize_comparison (&code_int, op1, op2, 0);\n+  PUT_CODE (*comparison, (enum rtx_code)code_int);\n \n   switch (mode)\n     {"}, {"sha": "2fa945c0c047ae3705f448ddd1a157ab9fdbf25a", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=c354951b7ef67f8bbbca3db79734db73880d17a2", "patch": "@@ -2078,9 +2078,6 @@ extern int making_const_table;\n    ? reverse_condition_maybe_unordered (code) \\\n    : reverse_condition (code))\n \n-#define CANONICALIZE_COMPARISON(CODE, OP0, OP1)\t\t\t\t\\\n-  (CODE) = arm_canonicalize_comparison (CODE, &(OP0), &(OP1))\n-\n /* The arm5 clz instruction returns 32.  */\n #define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE)  ((VALUE) = 32, 1)\n #define CTZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE)  ((VALUE) = 32, 1)"}, {"sha": "9b87914e4710b525364932031caf9cd2d1802d53", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=c354951b7ef67f8bbbca3db79734db73880d17a2", "patch": "@@ -58,7 +58,6 @@ extern int tls_symbolic_operand (rtx);\n extern bool s390_match_ccmode (rtx, enum machine_mode);\n extern enum machine_mode s390_tm_ccmode (rtx, rtx, bool);\n extern enum machine_mode s390_select_ccmode (enum rtx_code, rtx, rtx);\n-extern void s390_canonicalize_comparison (enum rtx_code *, rtx *, rtx *);\n extern rtx s390_emit_compare (enum rtx_code, rtx, rtx);\n extern void s390_emit_jump (rtx, rtx);\n extern bool symbolic_reference_mentioned_p (rtx);"}, {"sha": "441d9c1fe5c10d7ba25eff527654534ec3662caf", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=c354951b7ef67f8bbbca3db79734db73880d17a2", "patch": "@@ -745,9 +745,13 @@ s390_select_ccmode (enum rtx_code code, rtx op0, rtx op1)\n /* Replace the comparison OP0 CODE OP1 by a semantically equivalent one\n    that we can implement more efficiently.  */\n \n-void\n-s390_canonicalize_comparison (enum rtx_code *code, rtx *op0, rtx *op1)\n+static void\n+s390_canonicalize_comparison (int *code, rtx *op0, rtx *op1,\n+\t\t\t      bool op0_preserve_value)\n {\n+  if (op0_preserve_value)\n+    return;\n+\n   /* Convert ZERO_EXTRACT back to AND to enable TM patterns.  */\n   if ((*code == EQ || *code == NE)\n       && *op1 == const0_rtx\n@@ -894,7 +898,7 @@ s390_canonicalize_comparison (enum rtx_code *code, rtx *op0, rtx *op1)\n   if (MEM_P (*op0) && REG_P (*op1))\n     {\n       rtx tem = *op0; *op0 = *op1; *op1 = tem;\n-      *code = swap_condition (*code);\n+      *code = (int)swap_condition ((enum rtx_code)*code);\n     }\n }\n \n@@ -11071,6 +11075,9 @@ s390_loop_unroll_adjust (unsigned nunroll, struct loop *loop)\n #undef TARGET_UNWIND_WORD_MODE\n #define TARGET_UNWIND_WORD_MODE s390_unwind_word_mode\n \n+#undef TARGET_CANONICALIZE_COMPARISON\n+#define TARGET_CANONICALIZE_COMPARISON s390_canonicalize_comparison\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-s390.h\""}, {"sha": "286046abdff8a41d46589835a596b8e174fa5950", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=c354951b7ef67f8bbbca3db79734db73880d17a2", "patch": "@@ -720,10 +720,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n    return the mode to be used for the comparison.  */\n #define SELECT_CC_MODE(OP, X, Y) s390_select_ccmode ((OP), (X), (Y))\n \n-/* Canonicalize a comparison from one we don't have to one we do have.  */\n-#define CANONICALIZE_COMPARISON(CODE, OP0, OP1) \\\n-  s390_canonicalize_comparison (&(CODE), &(OP0), &(OP1))\n-\n /* Relative costs of operations.  */\n \n /* A C expression for the cost of a branch instruction.  A value of 1"}, {"sha": "793aadace959b1b04a579855b11a7eb10f2d6bd7", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=c354951b7ef67f8bbbca3db79734db73880d17a2", "patch": "@@ -159,8 +159,6 @@ extern bool sh_expand_t_scc (rtx *);\n extern rtx sh_gen_truncate (enum machine_mode, rtx, int);\n extern bool sh_vector_mode_supported_p (enum machine_mode);\n extern bool sh_cfun_trap_exit_p (void);\n-extern void sh_canonicalize_comparison (enum rtx_code&, rtx&, rtx&,\n-\t\t\t\t\tenum machine_mode mode = VOIDmode);\n extern rtx sh_find_equiv_gbr_addr (rtx cur_insn, rtx mem);\n extern int sh_eval_treg_value (rtx op);\n "}, {"sha": "4a42d7eeb5c5be3c3522de8ce28d982dd6c55608", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=c354951b7ef67f8bbbca3db79734db73880d17a2", "patch": "@@ -314,6 +314,9 @@ static int max_mov_insn_displacement (enum machine_mode, bool);\n static int mov_insn_alignment_mask (enum machine_mode, bool);\n static HOST_WIDE_INT disp_addr_displacement (rtx);\n static bool sequence_insn_p (rtx);\n+static void sh_canonicalize_comparison (int *, rtx *, rtx *, bool);\n+static void sh_canonicalize_comparison (enum rtx_code&, rtx&, rtx&,\n+\t\t\t\t\tenum machine_mode, bool);\n \n static void sh_init_sync_libfuncs (void) ATTRIBUTE_UNUSED;\n \f\n@@ -586,6 +589,9 @@ static const struct attribute_spec sh_attribute_table[] =\n #undef TARGET_LEGITIMATE_CONSTANT_P\n #define TARGET_LEGITIMATE_CONSTANT_P\tsh_legitimate_constant_p\n \n+#undef TARGET_CANONICALIZE_COMPARISON\n+#define TARGET_CANONICALIZE_COMPARISON\tsh_canonicalize_comparison\n+\n /* Machine-specific symbol_ref flags.  */\n #define SYMBOL_FLAG_FUNCVEC_FUNCTION    (SYMBOL_FLAG_MACH_DEP << 0)\n \n@@ -1909,12 +1915,14 @@ prepare_move_operands (rtx operands[], enum machine_mode mode)\n     }\n }\n \n-/* Implement the CANONICALIZE_COMPARISON macro for the combine pass.\n-   This function is also re-used to canonicalize comparisons in cbranch\n-   pattern expanders.  */\n-void\n+/* Implement the canonicalize_comparison target hook for the combine\n+   pass.  For the target hook this function is invoked via\n+   sh_canonicalize_comparison.  This function is also re-used to\n+   canonicalize comparisons in cbranch pattern expanders.  */\n+static void\n sh_canonicalize_comparison (enum rtx_code& cmp, rtx& op0, rtx& op1,\n-\t\t\t    enum machine_mode mode)\n+\t\t\t    enum machine_mode mode,\n+\t\t\t    bool op0_preserve_value ATTRIBUTE_UNUSED)\n {\n   /* When invoked from within the combine pass the mode is not specified,\n      so try to get it from one of the operands.  */\n@@ -2008,6 +2016,19 @@ sh_canonicalize_comparison (enum rtx_code& cmp, rtx& op0, rtx& op1,\n     }\n }\n \n+/* This function implements the canonicalize_comparison target hook.\n+   This wrapper around the internally used sh_canonicalize_comparison\n+   function is needed to do the enum rtx_code <-> int conversion.\n+   Target hooks cannot use enum rtx_code in its definition.  */\n+static void\n+sh_canonicalize_comparison (int *code, rtx *op0, rtx *op1,\n+\t\t\t    bool op0_preserve_value)\n+{\n+  enum rtx_code tmp_code = (enum rtx_code)*code;\n+  sh_canonicalize_comparison (tmp_code, *op0, *op1,\n+\t\t\t      VOIDmode, op0_preserve_value);\n+  *code = (int)tmp_code;\n+}\n enum rtx_code\n prepare_cbranch_operands (rtx *operands, enum machine_mode mode,\n \t\t\t  enum rtx_code comparison)\n@@ -2021,7 +2042,8 @@ prepare_cbranch_operands (rtx *operands, enum machine_mode mode,\n   else\n     scratch = operands[4];\n \n-  sh_canonicalize_comparison (comparison, operands[1], operands[2], mode);\n+  sh_canonicalize_comparison (comparison, operands[1], operands[2],\n+\t\t\t      mode, false);\n \n   /* Notice that this function is also invoked after reload by\n      the cbranchdi4_i pattern, through expand_cbranchdi4.  */"}, {"sha": "76a5cb1edda69be1c4e5a8e274c1287ea3927e4c", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=c354951b7ef67f8bbbca3db79734db73880d17a2", "patch": "@@ -1873,10 +1873,6 @@ struct sh_args {\n    more compact code.  */\n #define SHIFT_COUNT_TRUNCATED (0)\n \n-/* CANONICALIZE_COMPARISON macro for the combine pass.  */\n-#define CANONICALIZE_COMPARISON(CODE, OP0, OP1) \\\n-  sh_canonicalize_comparison ((CODE), (OP0), (OP1))\n-\n /* All integers have the same format so truncation is easy.  */\n /* But SHmedia must sign-extend DImode when truncating to SImode.  */\n #define TRULY_NOOP_TRUNCATION(OUTPREC,INPREC) \\"}, {"sha": "15e7c2e2bbaae238f0154f2904db55e76e495abe", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=c354951b7ef67f8bbbca3db79734db73880d17a2", "patch": "@@ -7095,6 +7095,20 @@ spu_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n   final_end_function ();\n }\n \n+/* Canonicalize a comparison from one we don't have to one we do have.  */\n+static void\n+spu_canonicalize_comparison (int *code, rtx *op0, rtx *op1,\n+\t\t\t     bool op0_preserve_value)\n+{\n+  if (!op0_preserve_value\n+      && (*code == LE || *code == LT || *code == LEU || *code == LTU))\n+    {\n+      rtx tem = *op0;\n+      *op0 = *op1;\n+      *op1 = tem;\n+      *code = (int)swap_condition ((enum rtx_code)*code);\n+    }\n+}\n \f\n /*  Table of machine attributes.  */\n static const struct attribute_spec spu_attribute_table[] =\n@@ -7308,6 +7322,9 @@ static const struct attribute_spec spu_attribute_table[] =\n #undef TARGET_DELAY_VARTRACK\n #define TARGET_DELAY_VARTRACK true\n \n+#undef TARGET_CANONICALIZE_COMPARISON\n+#define TARGET_CANONICALIZE_COMPARISON spu_canonicalize_comparison\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-spu.h\""}, {"sha": "031b80e1602ad970d23f1218930003a0ca009f8b", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=c354951b7ef67f8bbbca3db79734db73880d17a2", "patch": "@@ -520,18 +520,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define NO_IMPLICIT_EXTERN_C 1\n \n-/* Canonicalize a comparison from one we don't have to one we do have.  */\n-#define CANONICALIZE_COMPARISON(CODE,OP0,OP1) \\\n-  do {                                                                    \\\n-    if (((CODE) == LE || (CODE) == LT || (CODE) == LEU || (CODE) == LTU)) \\\n-      {                                                                   \\\n-        rtx tem = (OP0);                                                  \\\n-        (OP0) = (OP1);                                                    \\\n-        (OP1) = tem;                                                      \\\n-        (CODE) = swap_condition (CODE);                                   \\\n-      }                                                                   \\\n-  } while (0)\n-\n \n /* Address spaces.  */\n #define ADDR_SPACE_EA\t1"}, {"sha": "75aa86727581c843a52d3b375171273d55c2bc9f", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=c354951b7ef67f8bbbca3db79734db73880d17a2", "patch": "@@ -6024,25 +6024,27 @@ You should define this macro if and only if you define extra CC modes\n in @file{@var{machine}-modes.def}.\n @end defmac\n \n-@defmac CANONICALIZE_COMPARISON (@var{code}, @var{op0}, @var{op1})\n+@deftypefn {Target Hook} void TARGET_CANONICALIZE_COMPARISON (int *@var{code}, rtx *@var{op0}, rtx *@var{op1}, bool @var{op0_preserve_value}) (@var{code}, @var{op0}, @var{op1}, @var{op0_preserve_value})\n On some machines not all possible comparisons are defined, but you can\n convert an invalid comparison into a valid one.  For example, the Alpha\n does not have a @code{GT} comparison, but you can use an @code{LT}\n comparison instead and swap the order of the operands.\n \n-On such machines, define this macro to be a C statement to do any\n-required conversions.  @var{code} is the initial comparison code\n-and @var{op0} and @var{op1} are the left and right operands of the\n-comparison, respectively.  You should modify @var{code}, @var{op0}, and\n-@var{op1} as required.\n+On such machines, implement this hook to do any required conversions.\n+@var{code} is the initial comparison code and @var{op0} and @var{op1}\n+are the left and right operands of the comparison, respectively.  If\n+@var{op0_preserve_value} is @code{true} the implementation is not\n+allowed to change the value of @var{op0} since the value might be used\n+in RTXs which aren't comparisons.  E.g. the implementation is not\n+allowed to swap operands in that case.\n \n GCC will not assume that the comparison resulting from this macro is\n valid but will see if the resulting insn matches a pattern in the\n @file{md} file.\n \n-You need not define this macro if it would never change the comparison\n-code or operands.\n-@end defmac\n+You need not to implement this hook if it would never change the\n+comparison code or operands.\n+@end deftypefn\n \n @defmac REVERSIBLE_CC_MODE (@var{mode})\n A C expression whose value is one if it is always safe to reverse a"}, {"sha": "95fab189c708924ed25b6b28a2e55692f7d709f0", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=c354951b7ef67f8bbbca3db79734db73880d17a2", "patch": "@@ -5928,25 +5928,27 @@ You should define this macro if and only if you define extra CC modes\n in @file{@var{machine}-modes.def}.\n @end defmac\n \n-@defmac CANONICALIZE_COMPARISON (@var{code}, @var{op0}, @var{op1})\n+@hook TARGET_CANONICALIZE_COMPARISON (@var{code}, @var{op0}, @var{op1}, @var{op0_preserve_value})\n On some machines not all possible comparisons are defined, but you can\n convert an invalid comparison into a valid one.  For example, the Alpha\n does not have a @code{GT} comparison, but you can use an @code{LT}\n comparison instead and swap the order of the operands.\n \n-On such machines, define this macro to be a C statement to do any\n-required conversions.  @var{code} is the initial comparison code\n-and @var{op0} and @var{op1} are the left and right operands of the\n-comparison, respectively.  You should modify @var{code}, @var{op0}, and\n-@var{op1} as required.\n+On such machines, implement this hook to do any required conversions.\n+@var{code} is the initial comparison code and @var{op0} and @var{op1}\n+are the left and right operands of the comparison, respectively.  If\n+@var{op0_preserve_value} is @code{true} the implementation is not\n+allowed to change the value of @var{op0} since the value might be used\n+in RTXs which aren't comparisons.  E.g. the implementation is not\n+allowed to swap operands in that case.\n \n GCC will not assume that the comparison resulting from this macro is\n valid but will see if the resulting insn matches a pattern in the\n @file{md} file.\n \n-You need not define this macro if it would never change the comparison\n-code or operands.\n-@end defmac\n+You need not to implement this hook if it would never change the\n+comparison code or operands.\n+@end deftypefn\n \n @defmac REVERSIBLE_CC_MODE (@var{mode})\n A C expression whose value is one if it is always safe to reverse a"}, {"sha": "bbda6c25d2624b7d028714ac8ae8d4d93c4caf93", "filename": "gcc/target.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=c354951b7ef67f8bbbca3db79734db73880d17a2", "patch": "@@ -2877,6 +2877,14 @@ DEFHOOK\n  enum unwind_info_type, (void),\n  default_debug_unwind_info)\n \n+/* The code parameter should be of type enum rtx_code but this is not\n+   defined at this time.  */\n+DEFHOOK\n+(canonicalize_comparison,\n+ \"\",\n+ void, (int *code, rtx *op0, rtx *op1, bool op0_preserve_value),\n+ default_canonicalize_comparison)\n+\n DEFHOOKPOD\n (atomic_test_and_set_trueval,\n  \"This value should be set if the result written by\\"}, {"sha": "fc13a26546bea7ef192f1f863f0132d0b24e3ce5", "filename": "gcc/targhooks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c354951b7ef67f8bbbca3db79734db73880d17a2/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=c354951b7ef67f8bbbca3db79734db73880d17a2", "patch": "@@ -179,6 +179,8 @@ extern unsigned char default_class_max_nregs (reg_class_t, enum machine_mode);\n \n extern enum unwind_info_type default_debug_unwind_info (void);\n \n+extern bool default_canonicalize_comparison (int *, rtx *, rtx *, bool);\n+\n extern int default_label_align_after_barrier_max_skip (rtx);\n extern int default_loop_align_max_skip (rtx);\n extern int default_label_align_max_skip (rtx);"}]}