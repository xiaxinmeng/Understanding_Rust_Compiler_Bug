{"sha": "f3b43865acd32bed18eb7316eb8f9916bf8bfc9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNiNDM4NjVhY2QzMmJlZDE4ZWI3MzE2ZWI4Zjk5MTZiZjhiZmM5ZQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-02-13T18:55:13Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-02-13T18:55:13Z"}, "message": "PipedReader.java (ready): Throw IOException if pipe closed.\n\n\t* java/io/PipedReader.java (ready): Throw IOException if pipe\n\tclosed.\n\t* java/io/FilterReader.java (close): Don't clear `in'.\n\t* java/io/CharArrayReader.java (mark): Throw IOException if stream\n\tclosed.\n\t(read, ready, reset, skip): Added exception message.\n\t* java/io/BufferedReader.java (mark, reset, ready, read, skip):\n\tPerform checkStatus check inside synchronized block.\n\nFrom-SVN: r39641", "tree": {"sha": "c25167f3e73e64441f8cd01df631a5cab6684b6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c25167f3e73e64441f8cd01df631a5cab6684b6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3b43865acd32bed18eb7316eb8f9916bf8bfc9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3b43865acd32bed18eb7316eb8f9916bf8bfc9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3b43865acd32bed18eb7316eb8f9916bf8bfc9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3b43865acd32bed18eb7316eb8f9916bf8bfc9e/comments", "author": null, "committer": null, "parents": [{"sha": "967eb03e12d367a679c5a33a0fc13297dfadf327", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/967eb03e12d367a679c5a33a0fc13297dfadf327", "html_url": "https://github.com/Rust-GCC/gccrs/commit/967eb03e12d367a679c5a33a0fc13297dfadf327"}], "stats": {"total": 59, "additions": 40, "deletions": 19}, "files": [{"sha": "70ccbd2fce2e051794ce4e7c13a864859eab9cce", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b43865acd32bed18eb7316eb8f9916bf8bfc9e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b43865acd32bed18eb7316eb8f9916bf8bfc9e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f3b43865acd32bed18eb7316eb8f9916bf8bfc9e", "patch": "@@ -1,3 +1,14 @@\n+2001-02-13  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/io/PipedReader.java (ready): Throw IOException if pipe\n+\tclosed.\n+\t* java/io/FilterReader.java (close): Don't clear `in'.\n+\t* java/io/CharArrayReader.java (mark): Throw IOException if stream\n+\tclosed.\n+\t(read, ready, reset, skip): Added exception message.\n+\t* java/io/BufferedReader.java (mark, reset, ready, read, skip):\n+\tPerform checkStatus check inside synchronized block.\n+\n 2001-02-13  Tom Tromey  <tromey@redhat.com>\n \n \t* gnu/awt/j2d/AbstractGraphicsState.java (clone): Made public."}, {"sha": "6c54f0303490221b9ccf770d0ba1dff62ce5f9e0", "filename": "libjava/java/io/BufferedReader.java", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b43865acd32bed18eb7316eb8f9916bf8bfc9e/libjava%2Fjava%2Fio%2FBufferedReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b43865acd32bed18eb7316eb8f9916bf8bfc9e/libjava%2Fjava%2Fio%2FBufferedReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FBufferedReader.java?ref=f3b43865acd32bed18eb7316eb8f9916bf8bfc9e", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -128,9 +128,9 @@ public boolean markSupported()\n     */\n   public void mark(int readLimit) throws IOException\n   {\n-    checkStatus();\n     synchronized (lock)\n       {\n+\tcheckStatus();\n \t// In this method we need to be aware of the special case where\n \t// pos + 1 == limit.  This indicates that a '\\r' was the last char\n \t// in the buffer during a readLine.  We'll want to maintain that\n@@ -185,9 +185,9 @@ public void mark(int readLimit) throws IOException\n     */\n   public void reset() throws IOException\n   {\n-    checkStatus();\n     synchronized (lock)\n       {\n+\tcheckStatus();\n \tif (markPos < 0)\n \t  throw new IOException(\"mark never set or invalidated\");\n \n@@ -215,9 +215,9 @@ public void reset() throws IOException\n     */\n   public boolean ready() throws IOException\n   {\n-    checkStatus();\n     synchronized (lock)\n       {\n+\tcheckStatus();\n \treturn pos < limit || in.ready();\n       }\n   }\n@@ -242,9 +242,9 @@ public boolean ready() throws IOException\n     */\n   public int read(char[] buf, int offset, int count) throws IOException\n   {\n-    checkStatus();\n     synchronized (lock)\n       {\n+\tcheckStatus();\n \t// Once again, we need to handle the special case of a readLine\n \t// that has a '\\r' at the end of the buffer.  In this case, we'll\n \t// need to skip a '\\n' if it is the next char to be read.\n@@ -329,9 +329,9 @@ private int fill() throws IOException\n   \n   public int read() throws IOException\n   {\n-    checkStatus();\n     synchronized (lock)\n       {\n+\tcheckStatus();\n \tif (pos >= limit && fill () <= 0)\n \t  return -1;\n \treturn buffer[pos++];\n@@ -444,11 +444,11 @@ public String readLine() throws IOException\n     */\n   public long skip(long count) throws IOException\n   {\n-    checkStatus();\n-    if (count <= 0)\n-      return 0;\n     synchronized (lock)\n       {\n+\tcheckStatus();\n+\tif (count <= 0)\n+\t  return 0;\n \t// Yet again, we need to handle the special case of a readLine\n \t// that has a '\\r' at the end of the buffer.  In this case, we need\n \t// to ignore a '\\n' if it is the next char to be read."}, {"sha": "0a77998445f8d11f6ecd380ba6c52745d1ca040f", "filename": "libjava/java/io/CharArrayReader.java", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b43865acd32bed18eb7316eb8f9916bf8bfc9e/libjava%2Fjava%2Fio%2FCharArrayReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b43865acd32bed18eb7316eb8f9916bf8bfc9e/libjava%2Fjava%2Fio%2FCharArrayReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FCharArrayReader.java?ref=f3b43865acd32bed18eb7316eb8f9916bf8bfc9e", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -63,10 +63,12 @@ public void close()\n     }\n   }\n \n-  public void mark(int readAheadLimit)\n+  public void mark(int readAheadLimit) throws IOException\n   {\n     synchronized (lock)\n     {\n+      if (buf == null)\n+\tthrow new IOException(\"Stream closed\");\n       // readAheadLimit is ignored per Java Class Lib. book, p. 318.\n       markedPos = pos;\n     }\n@@ -82,7 +84,7 @@ public int read() throws IOException\n     synchronized (lock)\n     {\n       if (buf == null)\n-        throw new IOException();\n+\tthrow new IOException(\"Stream closed\");\n \n       if (pos < 0)\n         throw new ArrayIndexOutOfBoundsException(pos);\n@@ -98,7 +100,7 @@ public int read(char[] b, int off, int len) throws IOException\n     synchronized (lock)\n     {\n       if (buf == null)\n-        throw new IOException();\n+\tthrow new IOException(\"Stream closed\");\n \n       /* Don't need to check pos value, arraycopy will check it. */\n       if (off < 0 || len < 0 || off + len > b.length)\n@@ -117,7 +119,7 @@ public int read(char[] b, int off, int len) throws IOException\n   public boolean ready() throws IOException\n   {\n     if (buf == null)\n-      throw new IOException();\n+      throw new IOException(\"Stream closed\");\n \n     return true;\n   }\n@@ -127,7 +129,7 @@ public void reset() throws IOException\n     synchronized (lock)\n     {\n       if (buf == null)\n-        throw new IOException();\n+\tthrow new IOException(\"Stream closed\");\n \n       pos = markedPos;\n     }\n@@ -138,7 +140,7 @@ public long skip(long n) throws IOException\n     synchronized (lock)\n     {\n       if (buf == null)\n-        throw new IOException();\n+\tthrow new IOException(\"Stream closed\");\n \n       // Even though the var numChars is a long, in reality it can never\n       // be larger than an int since the result of subtracting 2 positive"}, {"sha": "608f910ccbd3f1cf139692c5e7a91817d63d9577", "filename": "libjava/java/io/FilterReader.java", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b43865acd32bed18eb7316eb8f9916bf8bfc9e/libjava%2Fjava%2Fio%2FFilterReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b43865acd32bed18eb7316eb8f9916bf8bfc9e/libjava%2Fjava%2Fio%2FFilterReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFilterReader.java?ref=f3b43865acd32bed18eb7316eb8f9916bf8bfc9e", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -31,8 +31,11 @@ protected FilterReader(Reader in)\n \n   public void close() throws IOException\n   {\n+    // We used to set `in = null' here.  We don't, though, because\n+    // that is the simplest way to ensure that read-after-close will\n+    // throw the appropriate exception -- we rely on the filtered\n+    // stream to do it.\n     in.close();\n-    in = null;\n   }\n \n   public synchronized void mark(int readlimit) throws IOException"}, {"sha": "07569eb1dc11fdf561de69743825c2c3cd0a1d19", "filename": "libjava/java/io/PipedReader.java", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b43865acd32bed18eb7316eb8f9916bf8bfc9e/libjava%2Fjava%2Fio%2FPipedReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b43865acd32bed18eb7316eb8f9916bf8bfc9e/libjava%2Fjava%2Fio%2FPipedReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPipedReader.java?ref=f3b43865acd32bed18eb7316eb8f9916bf8bfc9e", "patch": "@@ -312,10 +312,15 @@ public int read(char[] buf, int offset, int len)\n   public boolean ready() throws IOException\n   {\n     // The JDK 1.3 implementation does not appear to check for the closed or \n-    // unconnected stream conditions here.\n+    // unconnected stream conditions here.  However, checking for a\n+    // closed stream is explicitly required by the JDK 1.2 and 1.3\n+    // documentation (for Reader.close()), so we do it.\n     \n     synchronized (lock)\n     {\n+      if (closed)\n+\tthrow new IOException(\"Pipe closed\");\n+\n       if (in < 0)\n \treturn false;\n "}]}