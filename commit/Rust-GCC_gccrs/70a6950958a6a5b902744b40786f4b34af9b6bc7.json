{"sha": "70a6950958a6a5b902744b40786f4b34af9b6bc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBhNjk1MDk1OGE2YTViOTAyNzQ0YjQwNzg2ZjRiMzRhZjliNmJjNw==", "commit": {"author": {"name": "Enkovich Ilya", "email": "ilya.enkovich@intel.com", "date": "2012-04-13T17:21:06Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2012-04-13T17:21:06Z"}, "message": "Add and use config/i386/gnu-user-common.h\n\n\t* config.gcc: Add i386/gnu-user-common.h before all\n\ti386/gnu-user.h and i386/gnu-user64.h usages.\n\n\t* config/i386/gnu-user-common.h: New.\n\n\t* config/i386/gnu-user.h (CPP_SPEC): Moved to gnu-user-common.h.\n\t(CC1_SPEC): Likewise.\n\t(ENDFILE_SPEC): Likewise.\n\t(DEFAULT_PCC_STRUCT_RETURN): Likewise.\n\t(TARGET_TLS_DIRECT_SEG_REFS_DEFAULT): Likewise.\n\t(TARGET_OS_CPP_BUILTINS): Likewise.\n\t(LIBGCC2_HAS_TF_MODE): Likewise.\n\t(LIBGCC2_TF_CEXT): Likewise.\n\t(TF_SIZE): Likewise.\n\t(TARGET_ASM_FILE_END): Likewise.\n\t(STACK_CHECK_MOVING_SP): Likewise.\n\t(STACK_CHECK_STATIC_BUILTIN): Likewise.\n\t* config/i386/gnu-user64.h: Likewise.\n\nFrom-SVN: r186427", "tree": {"sha": "23b97d5524b560ac4f26cd6d3aaf714e06de73eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23b97d5524b560ac4f26cd6d3aaf714e06de73eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70a6950958a6a5b902744b40786f4b34af9b6bc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70a6950958a6a5b902744b40786f4b34af9b6bc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70a6950958a6a5b902744b40786f4b34af9b6bc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70a6950958a6a5b902744b40786f4b34af9b6bc7/comments", "author": {"login": "ienkovich", "id": 18308708, "node_id": "MDQ6VXNlcjE4MzA4NzA4", "avatar_url": "https://avatars.githubusercontent.com/u/18308708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ienkovich", "html_url": "https://github.com/ienkovich", "followers_url": "https://api.github.com/users/ienkovich/followers", "following_url": "https://api.github.com/users/ienkovich/following{/other_user}", "gists_url": "https://api.github.com/users/ienkovich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ienkovich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ienkovich/subscriptions", "organizations_url": "https://api.github.com/users/ienkovich/orgs", "repos_url": "https://api.github.com/users/ienkovich/repos", "events_url": "https://api.github.com/users/ienkovich/events{/privacy}", "received_events_url": "https://api.github.com/users/ienkovich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "65dc645a1506b95c45817f6b5281d975fecb9295", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65dc645a1506b95c45817f6b5281d975fecb9295", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65dc645a1506b95c45817f6b5281d975fecb9295"}], "stats": {"total": 195, "additions": 95, "deletions": 100}, "files": [{"sha": "e3a691e6dc55c285e8101f08a385420c27abffac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70a6950958a6a5b902744b40786f4b34af9b6bc7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70a6950958a6a5b902744b40786f4b34af9b6bc7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70a6950958a6a5b902744b40786f4b34af9b6bc7", "patch": "@@ -1,3 +1,24 @@\n+2012-04-13  Enkovich Ilya  <ilya.enkovich@intel.com>\n+\n+\t* config.gcc: Add i386/gnu-user-common.h before all\n+\ti386/gnu-user.h and i386/gnu-user64.h usages.\n+\n+\t* config/i386/gnu-user-common.h: New.\n+\n+\t* config/i386/gnu-user.h (CPP_SPEC): Moved to gnu-user-common.h.\n+\t(CC1_SPEC): Likewise.\n+\t(ENDFILE_SPEC): Likewise.\n+\t(DEFAULT_PCC_STRUCT_RETURN): Likewise.\n+\t(TARGET_TLS_DIRECT_SEG_REFS_DEFAULT): Likewise.\n+\t(TARGET_OS_CPP_BUILTINS): Likewise.\n+\t(LIBGCC2_HAS_TF_MODE): Likewise.\n+\t(LIBGCC2_TF_CEXT): Likewise.\n+\t(TF_SIZE): Likewise.\n+\t(TARGET_ASM_FILE_END): Likewise.\n+\t(STACK_CHECK_MOVING_SP): Likewise.\n+\t(STACK_CHECK_STATIC_BUILTIN): Likewise.\n+\t* config/i386/gnu-user64.h: Likewise.\n+\n 2012-04-13  Martin Jambor  <mjambor@suse.cz>\n \n \t* expr.c (expand_expr_real_1): Pass type, not the expression, to"}, {"sha": "bf3b2c3c0e363241e760778c05f239dadcd10bc2", "filename": "gcc/config.gcc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70a6950958a6a5b902744b40786f4b34af9b6bc7/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70a6950958a6a5b902744b40786f4b34af9b6bc7/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=70a6950958a6a5b902744b40786f4b34af9b6bc7", "patch": "@@ -1228,7 +1228,7 @@ i[34567]86-*-linux* | i[34567]86-*-kfreebsd*-gnu | i[34567]86-*-knetbsd*-gnu | i\n \t\t# Assume modern glibc\n \t\tdefault_gnu_indirect_function=yes\n \t\tif test x$enable_targets = xall; then\n-\t\t\ttm_file=\"${tm_file} i386/x86-64.h i386/gnu-user64.h i386/linux64.h\"\n+\t\t\ttm_file=\"${tm_file} i386/x86-64.h i386/gnu-user-common.h i386/gnu-user64.h i386/linux64.h\"\n \t\t\ttm_defines=\"${tm_defines} TARGET_BI_ARCH=1\"\n \t\t\ttmake_file=\"${tmake_file} i386/t-linux64\"\n \t\t\tx86_multilibs=\"${with_multilib_list}\"\n@@ -1263,26 +1263,26 @@ i[34567]86-*-linux* | i[34567]86-*-kfreebsd*-gnu | i[34567]86-*-knetbsd*-gnu | i\n \t\t\t\t;;\n \t\t\tesac\n \t\telse\n-\t\t\ttm_file=\"${tm_file} i386/gnu-user.h i386/linux.h\"\n+\t\t\ttm_file=\"${tm_file} i386/gnu-user-common.h i386/gnu-user.h i386/linux.h\"\n \t\tfi\n \t\t;;\n \ti[34567]86-*-knetbsd*-gnu)\n-\t\ttm_file=\"${tm_file} i386/gnu-user.h knetbsd-gnu.h i386/knetbsd-gnu.h\"\n+\t\ttm_file=\"${tm_file} i386/gnu-user-common.h i386/gnu-user.h knetbsd-gnu.h i386/knetbsd-gnu.h\"\n \t\t;;\n \ti[34567]86-*-kfreebsd*-gnu)\n-\t\ttm_file=\"${tm_file} i386/gnu-user.h kfreebsd-gnu.h i386/kfreebsd-gnu.h\"\n+\t\ttm_file=\"${tm_file} i386/gnu-user-common.h i386/gnu-user.h kfreebsd-gnu.h i386/kfreebsd-gnu.h\"\n \t\t;;\n \ti[34567]86-*-kopensolaris*-gnu)\n-\t\ttm_file=\"${tm_file} i386/gnu-user.h kopensolaris-gnu.h i386/kopensolaris-gnu.h\"\n+\t\ttm_file=\"${tm_file} i386/gnu-user-common.h i386/gnu-user.h kopensolaris-gnu.h i386/kopensolaris-gnu.h\"\n \t\t;;\n \ti[34567]86-*-gnu*)\n-\t\ttm_file=\"$tm_file i386/gnu-user.h gnu.h i386/gnu.h\"\n+\t\ttm_file=\"$tm_file i386/gnu-user-common.h i386/gnu-user.h gnu.h i386/gnu.h\"\n \t\t;;\n \tesac\n \t;;\n x86_64-*-linux* | x86_64-*-kfreebsd*-gnu | x86_64-*-knetbsd*-gnu)\n \ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h gnu-user.h glibc-stdint.h \\\n-\t\t i386/x86-64.h i386/gnu-user64.h\"\n+\t\t i386/x86-64.h i386/gnu-user-common.h i386/gnu-user64.h\"\n \tcase ${target} in\n \tx86_64-*-linux*)\n \t\ttm_file=\"${tm_file} linux.h i386/linux64.h\""}, {"sha": "6ca954d55cc4d257a94bd2e0b9a147e7b2a5fbb3", "filename": "gcc/config/i386/gnu-user-common.h", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70a6950958a6a5b902744b40786f4b34af9b6bc7/gcc%2Fconfig%2Fi386%2Fgnu-user-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70a6950958a6a5b902744b40786f4b34af9b6bc7/gcc%2Fconfig%2Fi386%2Fgnu-user-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgnu-user-common.h?ref=70a6950958a6a5b902744b40786f4b34af9b6bc7", "patch": "@@ -0,0 +1,66 @@\n+/* Common definitions for Intel 386 and AMD x86-64 systems using\n+   GNU userspace.  Copyright (C) 2012 Free Software Foundation, Inc.\n+   Contributed by Ilya Enkovich.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* The svr4 ABI for the i386 says that records and unions are returned\n+   in memory.  In the 64bit compilation we will turn this flag off in\n+   ix86_option_override_internal, as we never do pcc_struct_return\n+   scheme on this target.  */\n+#undef DEFAULT_PCC_STRUCT_RETURN\n+#define DEFAULT_PCC_STRUCT_RETURN 1\n+\n+/* We arrange for the whole %fs segment to map the tls area.  */\n+#undef TARGET_TLS_DIRECT_SEG_REFS_DEFAULT\n+#define TARGET_TLS_DIRECT_SEG_REFS_DEFAULT MASK_TLS_DIRECT_SEG_REFS\n+\n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+\tGNU_USER_TARGET_OS_CPP_BUILTINS();\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n+\n+#undef CC1_SPEC\n+#define CC1_SPEC \"%(cc1_cpu) %{profile:-p}\"\n+\n+/* Similar to standard GNU userspace, but adding -ffast-math support.  */\n+#undef  ENDFILE_SPEC\n+#define ENDFILE_SPEC \\\n+  \"%{Ofast|ffast-math|funsafe-math-optimizations:crtfastmath.o%s} \\\n+   %{mpc32:crtprec32.o%s} \\\n+   %{mpc64:crtprec64.o%s} \\\n+   %{mpc80:crtprec80.o%s} \\\n+   %{shared|pie:crtendS.o%s;:crtend.o%s} crtn.o%s\"\n+\n+/* Put all *tf routines in libgcc.  */\n+#undef LIBGCC2_HAS_TF_MODE\n+#define LIBGCC2_HAS_TF_MODE 1\n+#define LIBGCC2_TF_CEXT q\n+#define TF_SIZE 113\n+\n+#define TARGET_ASM_FILE_END file_end_indicate_exec_stack\n+\n+/* The stack pointer needs to be moved while checking the stack.  */\n+#define STACK_CHECK_MOVING_SP 1\n+\n+/* Static stack checking is supported by means of probes.  */\n+#define STACK_CHECK_STATIC_BUILTIN 1"}, {"sha": "3b48b0002cab4ac784918204fbb5074599b67cce", "filename": "gcc/config/i386/gnu-user.h", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70a6950958a6a5b902744b40786f4b34af9b6bc7/gcc%2Fconfig%2Fi386%2Fgnu-user.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70a6950958a6a5b902744b40786f4b34af9b6bc7/gcc%2Fconfig%2Fi386%2Fgnu-user.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgnu-user.h?ref=70a6950958a6a5b902744b40786f4b34af9b6bc7", "patch": "@@ -24,15 +24,6 @@ along with GCC; see the file COPYING3.  If not see\n /* The .file command should always begin the output.  */\n #define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n \n-/* The svr4 ABI for the i386 says that records and unions are returned\n-   in memory.  */\n-#undef DEFAULT_PCC_STRUCT_RETURN\n-#define DEFAULT_PCC_STRUCT_RETURN 1\n-\n-/* We arrange for the whole %gs segment to map the tls area.  */\n-#undef TARGET_TLS_DIRECT_SEG_REFS_DEFAULT\n-#define TARGET_TLS_DIRECT_SEG_REFS_DEFAULT MASK_TLS_DIRECT_SEG_REFS\n-\n #undef ASM_COMMENT_START\n #define ASM_COMMENT_START \"#\"\n \n@@ -67,19 +58,6 @@ along with GCC; see the file COPYING3.  If not see\n #undef WCHAR_TYPE_SIZE\n #define WCHAR_TYPE_SIZE BITS_PER_WORD\n     \n-#define TARGET_OS_CPP_BUILTINS()\t\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-\tGNU_USER_TARGET_OS_CPP_BUILTINS();\t\\\n-    }\t\t\t\t\t\t\\\n-  while (0)\n-\n-#undef CPP_SPEC\n-#define CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n-\n-#undef CC1_SPEC\n-#define CC1_SPEC \"%(cc1_cpu) %{profile:-p}\"\n-\n /* Provide a LINK_SPEC appropriate for GNU userspace.  Here we provide support\n    for the special GCC options -static and -shared, which allow us to\n    link things in one of these three modes by applying the appropriate\n@@ -105,15 +83,6 @@ along with GCC; see the file COPYING3.  If not see\n       -dynamic-linker %(dynamic_linker)} \\\n       %{static:-static}}\"\n \n-/* Similar to standard GNU userspace, but adding -ffast-math support.  */\n-#undef  ENDFILE_SPEC\n-#define ENDFILE_SPEC \\\n-  \"%{Ofast|ffast-math|funsafe-math-optimizations:crtfastmath.o%s} \\\n-   %{mpc32:crtprec32.o%s} \\\n-   %{mpc64:crtprec64.o%s} \\\n-   %{mpc80:crtprec80.o%s} \\\n-   %{shared|pie:crtendS.o%s;:crtend.o%s} crtn.o%s\"\n-\n /* A C statement (sans semicolon) to output to the stdio stream\n    FILE the assembler definition of uninitialized global DECL named\n    NAME whose size is SIZE bytes and alignment is ALIGN bytes.\n@@ -180,20 +149,6 @@ along with GCC; see the file COPYING3.  If not see\n \t   : \"=d\"(BASE))\n #endif\n \n-/* Put all *tf routines in libgcc.  */\n-#undef LIBGCC2_HAS_TF_MODE\n-#define LIBGCC2_HAS_TF_MODE 1\n-#define LIBGCC2_TF_CEXT q\n-#define TF_SIZE 113\n-\n-#define TARGET_ASM_FILE_END file_end_indicate_exec_stack\n-\n-/* The stack pointer needs to be moved while checking the stack.  */\n-#define STACK_CHECK_MOVING_SP 1\n-\n-/* Static stack checking is supported by means of probes.  */\n-#define STACK_CHECK_STATIC_BUILTIN 1\n-\n #ifdef TARGET_LIBC_PROVIDES_SSP\n /* i386 glibc provides __stack_chk_guard in %gs:0x14.  */\n #define TARGET_THREAD_SSP_OFFSET\t0x14"}, {"sha": "1ec5e20c4a58e766bdea5f9d614af77208783ae0", "filename": "gcc/config/i386/gnu-user64.h", "status": "modified", "additions": 1, "deletions": 48, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70a6950958a6a5b902744b40786f4b34af9b6bc7/gcc%2Fconfig%2Fi386%2Fgnu-user64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70a6950958a6a5b902744b40786f4b34af9b6bc7/gcc%2Fconfig%2Fi386%2Fgnu-user64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgnu-user64.h?ref=70a6950958a6a5b902744b40786f4b34af9b6bc7", "patch": "@@ -24,30 +24,6 @@ a copy of the GCC Runtime Library Exception along with this program;\n see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n-#define TARGET_OS_CPP_BUILTINS()\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-\tGNU_USER_TARGET_OS_CPP_BUILTINS();\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-#undef CPP_SPEC\n-#define CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n-\n-#undef CC1_SPEC\n-#define CC1_SPEC \"%(cc1_cpu) %{profile:-p}\"\n-\n-/* The svr4 ABI for the i386 says that records and unions are returned\n-   in memory.  In the 64bit compilation we will turn this flag off in\n-   ix86_option_override_internal, as we never do pcc_struct_return\n-   scheme on this target.  */\n-#undef DEFAULT_PCC_STRUCT_RETURN\n-#define DEFAULT_PCC_STRUCT_RETURN 1\n-\n-/* We arrange for the whole %fs segment to map the tls area.  */\n-#undef TARGET_TLS_DIRECT_SEG_REFS_DEFAULT\n-#define TARGET_TLS_DIRECT_SEG_REFS_DEFAULT MASK_TLS_DIRECT_SEG_REFS\n-\n /* Provide a LINK_SPEC.  Here we provide support for the special GCC\n    options -static and -shared, which allow us to link things in one\n    of these three modes by applying the appropriate combinations of\n@@ -90,15 +66,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n       %{\" SPEC_X32 \":-dynamic-linker \" GNU_USER_DYNAMIC_LINKERX32 \"}} \\\n     %{static:-static}}\"\n \n-/* Similar to standard GNU userspace, but adding -ffast-math support.  */\n-#undef  ENDFILE_SPEC\n-#define ENDFILE_SPEC \\\n-  \"%{Ofast|ffast-math|funsafe-math-optimizations:crtfastmath.o%s} \\\n-   %{mpc32:crtprec32.o%s} \\\n-   %{mpc64:crtprec64.o%s} \\\n-   %{mpc80:crtprec80.o%s} \\\n-   %{shared|pie:crtendS.o%s;:crtend.o%s} crtn.o%s\"\n-\n #if TARGET_64BIT_DEFAULT\n #if TARGET_BI_ARCH == 2\n #define MULTILIB_DEFAULTS { \"mx32\" }\n@@ -109,23 +76,9 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define MULTILIB_DEFAULTS { \"m32\" }\n #endif\n \n-/* Put all *tf routines in libgcc.  */\n-#undef LIBGCC2_HAS_TF_MODE\n-#define LIBGCC2_HAS_TF_MODE 1\n-#define LIBGCC2_TF_CEXT q\n-#define TF_SIZE 113\n-\n-#define TARGET_ASM_FILE_END file_end_indicate_exec_stack\n-\n-/* The stack pointer needs to be moved while checking the stack.  */\n-#define STACK_CHECK_MOVING_SP 1\n-\n-/* Static stack checking is supported by means of probes.  */\n-#define STACK_CHECK_STATIC_BUILTIN 1\n-\n #ifdef TARGET_LIBC_PROVIDES_SSP\n /* i386 glibc provides __stack_chk_guard in %gs:0x14,\n-   x32 glibc provides it in %fs:0x18. \n+   x32 glibc provides it in %fs:0x18.\n    x86_64 glibc provides it in %fs:0x28.  */\n #define TARGET_THREAD_SSP_OFFSET \\\n   (TARGET_64BIT ? (TARGET_X32 ? 0x18 : 0x28) : 0x14)"}]}