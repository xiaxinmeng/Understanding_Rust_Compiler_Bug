{"sha": "908bd465fc73c8eedd89c36174ebd61a28d508de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA4YmQ0NjVmYzczYzhlZWRkODljMzYxNzRlYmQ2MWEyOGQ1MDhkZQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2007-07-02T04:55:48Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2007-07-02T04:55:48Z"}, "message": "Add missing test from last commit\nFixup two existing C++ tests for SCCVN changes\n\nFrom-SVN: r126187", "tree": {"sha": "3092963bb6b73b0e5c0c0ac4b10ca45fcfb4a77d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3092963bb6b73b0e5c0c0ac4b10ca45fcfb4a77d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/908bd465fc73c8eedd89c36174ebd61a28d508de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/908bd465fc73c8eedd89c36174ebd61a28d508de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/908bd465fc73c8eedd89c36174ebd61a28d508de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/908bd465fc73c8eedd89c36174ebd61a28d508de/comments", "author": null, "committer": null, "parents": [{"sha": "8b0a512570d45a1d42195c588ccf4c669d0e57d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b0a512570d45a1d42195c588ccf4c669d0e57d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b0a512570d45a1d42195c588ccf4c669d0e57d8"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "a25be7da7e57bcab711636c197af4b4c176add63", "filename": "gcc/testsuite/g++.dg/init/new19.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/908bd465fc73c8eedd89c36174ebd61a28d508de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/908bd465fc73c8eedd89c36174ebd61a28d508de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew19.C?ref=908bd465fc73c8eedd89c36174ebd61a28d508de", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile }\n-// { dg-options \"-O2 -fstrict-aliasing -fdump-tree-lim-details\" }\n+// { dg-options \"-O2 -fstrict-aliasing -fdump-tree-pre-details\" }\n \n // Make sure we hoist invariants out of the loop even in the presence\n // of placement new.  This is similar to code in tramp3d.\n@@ -69,5 +69,5 @@ int c::foo(int f1, int f2, int f3)\n   return sum;\n }\n \n-// { dg-final { scan-tree-dump \"Moving statement\\\\n.*->ai\\\\\\[0\\\\\\];\\\\n.*out of loop\" \"lim\" } }\n-// { dg-final { cleanup-tree-dump \"lim\" } }\n+// { dg-final { scan-tree-dump \"Replaced.*->ai\\\\\\[0\\\\\\]\" \"pre\" } }\n+// { dg-final { cleanup-tree-dump \"pre\" } }"}, {"sha": "70ef1e09d57a3a89fab30e83bdd13ee661063e51", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr27090.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/908bd465fc73c8eedd89c36174ebd61a28d508de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr27090.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/908bd465fc73c8eedd89c36174ebd61a28d508de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr27090.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr27090.C?ref=908bd465fc73c8eedd89c36174ebd61a28d508de", "patch": "@@ -17,5 +17,5 @@ int foo(Foo& f)\n         return f.get();\n }\n \n-/* { dg-final { scan-tree-dump \"return f->x;\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"return f->x;\" \"optimized\" { xfail *-*-* } } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "9592e3f36805bb072823dd9d3eed0d268d9af98f", "filename": "gcc/testsuite/gcc.c-torture/compile/pr32571.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/908bd465fc73c8eedd89c36174ebd61a28d508de/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr32571.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/908bd465fc73c8eedd89c36174ebd61a28d508de/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr32571.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr32571.c?ref=908bd465fc73c8eedd89c36174ebd61a28d508de", "patch": "@@ -0,0 +1,38 @@\n+\n+struct list_head {\n+ struct list_head *next, *prev;\n+};\n+struct ib_fmr {\n+ int *device;\n+ struct list_head list;\n+};\n+static inline\n+struct mthca_fmr *to_mfmr(struct ib_fmr *ibmr)\n+{\n+ const struct ib_fmr *__mptr = (ibmr);\n+ return (struct mthca_fmr *)( (char *)__mptr );\n+}\n+void mthca_unmap_fmr(struct list_head *fmr_list)\n+{\n+ struct ib_fmr *fmr;\n+ if (mthca_is_memfree())\n+ {\n+ for (fmr =\n+ ({ const struct list_head *__mptr = ((fmr_list)->next); (struct ib_fmr *)(\n+(char *)__mptr - 8 );});\n+ &fmr->list != (fmr_list);\n+ fmr = ({ const struct list_head *__mptr = (fmr->list.next); (struct ib_fmr\n+*)( (char *)__mptr - 8);})\n+ )\n+  mthca_arbel_fmr_unmap(to_mfmr(fmr));\n+ }\n+ else\n+ for (fmr =\n+ ({ const struct list_head *__mptr = ((fmr_list)->next); (struct ib_fmr *)(\n+(char *)__mptr - 8);});\n+  &fmr->list != (fmr_list);\n+  fmr = ({ const struct list_head *__mptr = (fmr->list.next); (struct ib_fmr\n+*)( (char *)__mptr - 8);})\n+  )\n+  mthca_tavor_fmr_unmap(to_mfmr(fmr));\n+}"}]}