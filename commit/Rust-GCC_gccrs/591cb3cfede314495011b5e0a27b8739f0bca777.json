{"sha": "591cb3cfede314495011b5e0a27b8739f0bca777", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkxY2IzY2ZlZGUzMTQ0OTUwMTFiNWUwYTI3Yjg3MzlmMGJjYTc3Nw==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2013-03-27T03:22:31Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2013-03-27T03:22:31Z"}, "message": "call.c (build_new_method_call_1): Use INDIRECT_REF_P.\n\n\t* call.c (build_new_method_call_1): Use INDIRECT_REF_P.\n\t* cvt.c (convert_to_void): Likewise.\n\t* error.c (dump_expr): Likewise.\n\t* mangle.c (write_expression): Likewise.\n\t* parser.c (cp_parser_template_argument): Likewise.\n\t* pt.c (convert_nontype_argument): Likewise.\n\t(tsubst_copy_and_build): Likewise.\n\t* rtti.c (build_typeid): Likewise.\n\t* semantics.c (finish_call_expr): Likewise.\n\t(finish_decltype_type): Likewise.\n\t(build_data_member_initialization): Likewise.\n\t* tree.c (is_dummy_object): Likewise.\n\t* typeck.c (decay_conversion): Likewise.\n\t(build_class_member_access_expr): Likewise.\n\t(cp_build_addr_expr_1): Likewise.\n\t(unary_complex_lvalue): Likewise.\n\t(check_return_expr): Likewise.\n\t* typeck2.c (cxx_readonly_error): Likewise.\n\nFrom-SVN: r197132", "tree": {"sha": "e1ab8eefdf089a9455047e232a0c46eecb19242d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1ab8eefdf089a9455047e232a0c46eecb19242d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/591cb3cfede314495011b5e0a27b8739f0bca777", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/591cb3cfede314495011b5e0a27b8739f0bca777", "html_url": "https://github.com/Rust-GCC/gccrs/commit/591cb3cfede314495011b5e0a27b8739f0bca777", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/591cb3cfede314495011b5e0a27b8739f0bca777/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6c74ff23008028116fa0ee942d2905e56a55fbab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c74ff23008028116fa0ee942d2905e56a55fbab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c74ff23008028116fa0ee942d2905e56a55fbab"}], "stats": {"total": 61, "additions": 41, "deletions": 20}, "files": [{"sha": "5a1cac41124434024dbb2ffc33309f2f4b3af7e1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591cb3cfede314495011b5e0a27b8739f0bca777/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591cb3cfede314495011b5e0a27b8739f0bca777/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=591cb3cfede314495011b5e0a27b8739f0bca777", "patch": "@@ -1,3 +1,24 @@\n+2013-03-26  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* call.c (build_new_method_call_1): Use INDIRECT_REF_P.\n+\t* cvt.c (convert_to_void): Likewise.\n+\t* error.c (dump_expr): Likewise.\n+\t* mangle.c (write_expression): Likewise.\n+\t* parser.c (cp_parser_template_argument): Likewise.\n+\t* pt.c (convert_nontype_argument): Likewise.\n+\t(tsubst_copy_and_build): Likewise.\n+\t* rtti.c (build_typeid): Likewise.\n+\t* semantics.c (finish_call_expr): Likewise.\n+\t(finish_decltype_type): Likewise.\n+\t(build_data_member_initialization): Likewise.\n+\t* tree.c (is_dummy_object): Likewise.\n+\t* typeck.c (decay_conversion): Likewise.\n+\t(build_class_member_access_expr): Likewise.\n+\t(cp_build_addr_expr_1): Likewise.\n+\t(unary_complex_lvalue): Likewise.\n+\t(check_return_expr): Likewise.\n+\t* typeck2.c (cxx_readonly_error): Likewise.\n+\n 2013-03-26  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/52597"}, {"sha": "67d8b816ead992374e589a59f449522a9f68677a", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591cb3cfede314495011b5e0a27b8739f0bca777/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591cb3cfede314495011b5e0a27b8739f0bca777/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=591cb3cfede314495011b5e0a27b8739f0bca777", "patch": "@@ -7730,7 +7730,7 @@ build_new_method_call_1 (tree instance, tree fns, vec<tree, va_gc> **args,\n \t  cast_to_void = true;\n \t  call = TREE_OPERAND (call, 0);\n \t}\n-      if (TREE_CODE (call) == INDIRECT_REF)\n+      if (INDIRECT_REF_P (call))\n \tcall = TREE_OPERAND (call, 0);\n       call = (build_min_non_dep_call_vec\n \t      (call,"}, {"sha": "2cb858b91e0724fd26d09b23d26b5888a55ce34b", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591cb3cfede314495011b5e0a27b8739f0bca777/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591cb3cfede314495011b5e0a27b8739f0bca777/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=591cb3cfede314495011b5e0a27b8739f0bca777", "patch": "@@ -916,7 +916,7 @@ convert_to_void (tree expr, impl_conv_void implicit, tsubst_flags_t complain)\n \texprv = TREE_OPERAND (exprv, 1);\n       if (DECL_P (exprv)\n \t  || handled_component_p (exprv)\n-\t  || TREE_CODE (exprv) == INDIRECT_REF)\n+\t  || INDIRECT_REF_P (exprv))\n \t/* Expr is not being 'used' here, otherwise we whould have\n \t   called mark_{rl}value_use use here, which would have in turn\n \t   called mark_exp_read.  Rather, we call mark_exp_read directly"}, {"sha": "15746504b4d3f8722d614843019f55769f9891a7", "filename": "gcc/cp/error.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591cb3cfede314495011b5e0a27b8739f0bca777/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591cb3cfede314495011b5e0a27b8739f0bca777/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=591cb3cfede314495011b5e0a27b8739f0bca777", "patch": "@@ -1988,7 +1988,7 @@ dump_expr (tree t, int flags)\n     case COMPONENT_REF:\n       {\n \ttree ob = TREE_OPERAND (t, 0);\n-\tif (TREE_CODE (ob) == INDIRECT_REF)\n+\tif (INDIRECT_REF_P (ob))\n \t  {\n \t    ob = TREE_OPERAND (ob, 0);\n \t    if (TREE_CODE (ob) != PARM_DECL\n@@ -2243,7 +2243,7 @@ dump_expr (tree t, int flags)\n \t  }\n \telse\n \t  {\n-\t    if (TREE_CODE (ob) == INDIRECT_REF)\n+\t    if (INDIRECT_REF_P (ob))\n \t      {\n \t\tdump_expr (TREE_OPERAND (ob, 0), flags | TFF_EXPR_IN_PARENS);\n \t\tpp_cxx_arrow (cxx_pp);"}, {"sha": "a672d4e3c233fa77e4f6e1d37987b5e9488f1e9d", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591cb3cfede314495011b5e0a27b8739f0bca777/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591cb3cfede314495011b5e0a27b8739f0bca777/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=591cb3cfede314495011b5e0a27b8739f0bca777", "patch": "@@ -2691,7 +2691,7 @@ write_expression (tree expr)\n \t  write_member_name (member);\n \t}\n     }\n-  else if (TREE_CODE (expr) == INDIRECT_REF\n+  else if (INDIRECT_REF_P (expr)\n \t   && TREE_TYPE (TREE_OPERAND (expr, 0))\n \t   && TREE_CODE (TREE_TYPE (TREE_OPERAND (expr, 0))) == REFERENCE_TYPE)\n     {"}, {"sha": "9ba0998f221f259cd480f24afe3483e183a0e525", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591cb3cfede314495011b5e0a27b8739f0bca777/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591cb3cfede314495011b5e0a27b8739f0bca777/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=591cb3cfede314495011b5e0a27b8739f0bca777", "patch": "@@ -13274,7 +13274,7 @@ cp_parser_template_argument (cp_parser* parser)\n \t{\n \t  tree probe;\n \n-\t  if (TREE_CODE (argument) == INDIRECT_REF)\n+\t  if (INDIRECT_REF_P (argument))\n \t    {\n \t      gcc_assert (REFERENCE_REF_P (argument));\n \t      argument = TREE_OPERAND (argument, 0);"}, {"sha": "393dbc9412bf7c372643cd6fd719f0aba91a9a27", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591cb3cfede314495011b5e0a27b8739f0bca777/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591cb3cfede314495011b5e0a27b8739f0bca777/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=591cb3cfede314495011b5e0a27b8739f0bca777", "patch": "@@ -5735,7 +5735,7 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n \t shall be one of: [...]\n \n \t -- the address of an object or function with external linkage.  */\n-      if (TREE_CODE (expr) == INDIRECT_REF\n+      if (INDIRECT_REF_P (expr)\n \t  && TYPE_REF_OBJ_P (TREE_TYPE (TREE_OPERAND (expr, 0))))\n \t{\n \t  expr = TREE_OPERAND (expr, 0);\n@@ -14013,7 +14013,7 @@ tsubst_copy_and_build (tree t,\n \t\tif (unq != function)\n \t\t  {\n \t\t    tree fn = unq;\n-\t\t    if (TREE_CODE (fn) == INDIRECT_REF)\n+\t\t    if (INDIRECT_REF_P (fn))\n \t\t      fn = TREE_OPERAND (fn, 0);\n \t\t    if (TREE_CODE (fn) == COMPONENT_REF)\n \t\t      fn = TREE_OPERAND (fn, 1);"}, {"sha": "dd22e34197bb0c2b7c9f5a97c2b6cd1b3f5674d4", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591cb3cfede314495011b5e0a27b8739f0bca777/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591cb3cfede314495011b5e0a27b8739f0bca777/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=591cb3cfede314495011b5e0a27b8739f0bca777", "patch": "@@ -326,7 +326,7 @@ build_typeid (tree exp, tsubst_flags_t complain)\n \n   /* FIXME when integrating with c_fully_fold, mark\n      resolves_to_fixed_type_p case as a non-constant expression.  */\n-  if (TREE_CODE (exp) == INDIRECT_REF\n+  if (INDIRECT_REF_P (exp)\n       && TREE_CODE (TREE_TYPE (TREE_OPERAND (exp, 0))) == POINTER_TYPE\n       && TYPE_POLYMORPHIC_P (TREE_TYPE (exp))\n       && ! resolves_to_fixed_type_p (exp, &nonnull)"}, {"sha": "fd77725c254e262f2f1a48d12f772b9fa9d23ba4", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591cb3cfede314495011b5e0a27b8739f0bca777/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591cb3cfede314495011b5e0a27b8739f0bca777/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=591cb3cfede314495011b5e0a27b8739f0bca777", "patch": "@@ -2236,7 +2236,7 @@ finish_call_expr (tree fn, vec<tree, va_gc> **args, bool disallow_virtual,\n \n   if (processing_template_decl && result != error_mark_node)\n     {\n-      if (TREE_CODE (result) == INDIRECT_REF)\n+      if (INDIRECT_REF_P (result))\n \tresult = TREE_OPERAND (result, 0);\n       result = build_call_vec (TREE_TYPE (result), orig_fn, orig_args);\n       SET_EXPR_LOCATION (result, input_location);\n@@ -5301,7 +5301,7 @@ finish_decltype_type (tree expr, bool id_expression_or_member_access_p,\n       if (identifier_p (expr))\n         expr = lookup_name (expr);\n \n-      if (TREE_CODE (expr) == INDIRECT_REF)\n+      if (INDIRECT_REF_P (expr))\n         /* This can happen when the expression is, e.g., \"a.b\". Just\n            look at the underlying operand.  */\n         expr = TREE_OPERAND (expr, 0);\n@@ -5948,7 +5948,7 @@ build_data_member_initialization (tree t, vec<constructor_elt, va_gc> **vec)\n     return true;\n   else\n     gcc_unreachable ();\n-  if (TREE_CODE (member) == INDIRECT_REF)\n+  if (INDIRECT_REF_P (member))\n     member = TREE_OPERAND (member, 0);\n   if (TREE_CODE (member) == NOP_EXPR)\n     {"}, {"sha": "4159321814aace3dc5800fdd85bcb3b10eacc568", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591cb3cfede314495011b5e0a27b8739f0bca777/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591cb3cfede314495011b5e0a27b8739f0bca777/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=591cb3cfede314495011b5e0a27b8739f0bca777", "patch": "@@ -2879,7 +2879,7 @@ maybe_dummy_object (tree type, tree* binfop)\n int\n is_dummy_object (const_tree ob)\n {\n-  if (TREE_CODE (ob) == INDIRECT_REF)\n+  if (INDIRECT_REF_P (ob))\n     ob = TREE_OPERAND (ob, 0);\n   return (TREE_CODE (ob) == NOP_EXPR\n \t  && TREE_OPERAND (ob, 0) == void_zero_node);"}, {"sha": "a0caa300cac63b9cae9deb80bf0ff986844f9985", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591cb3cfede314495011b5e0a27b8739f0bca777/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591cb3cfede314495011b5e0a27b8739f0bca777/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=591cb3cfede314495011b5e0a27b8739f0bca777", "patch": "@@ -1918,7 +1918,7 @@ decay_conversion (tree exp, tsubst_flags_t complain)\n       tree adr;\n       tree ptrtype;\n \n-      if (TREE_CODE (exp) == INDIRECT_REF)\n+      if (INDIRECT_REF_P (exp))\n \treturn build_nop (build_pointer_type (TREE_TYPE (type)),\n \t\t\t  TREE_OPERAND (exp, 0));\n \n@@ -2296,7 +2296,7 @@ build_class_member_access_expr (tree object, tree member,\n       int type_quals;\n       tree member_type;\n \n-      null_object_p = (TREE_CODE (object) == INDIRECT_REF\n+      null_object_p = (INDIRECT_REF_P (object)\n \t\t       && integer_zerop (TREE_OPERAND (object, 0)));\n \n       /* Convert OBJECT to the type of MEMBER.  */\n@@ -5171,7 +5171,7 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n     }\n \n   /* Let &* cancel out to simplify resulting code.  */\n-  if (TREE_CODE (arg) == INDIRECT_REF)\n+  if (INDIRECT_REF_P (arg))\n     {\n       /* We don't need to have `current_class_ptr' wrapped in a\n \t NON_LVALUE_EXPR node.  */\n@@ -5196,7 +5196,7 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n       && argtype != unknown_type_node\n       && (val = get_base_address (arg))\n       && COMPLETE_TYPE_P (TREE_TYPE (val))\n-      && TREE_CODE (val) == INDIRECT_REF\n+      && INDIRECT_REF_P (val)\n       && TREE_CONSTANT (TREE_OPERAND (val, 0)))\n     {\n       tree type = build_pointer_type (argtype);\n@@ -5715,7 +5715,7 @@ unary_complex_lvalue (enum tree_code code, tree arg)\n \treturn build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (arg)), targ);\n       }\n \n-    if (TREE_CODE (arg) == SAVE_EXPR && TREE_CODE (targ) == INDIRECT_REF)\n+    if (TREE_CODE (arg) == SAVE_EXPR && INDIRECT_REF_P (targ))\n       return build3 (SAVE_EXPR, build_pointer_type (TREE_TYPE (arg)),\n \t\t     TREE_OPERAND (targ, 0), current_function_decl, NULL);\n   }\n@@ -8254,7 +8254,7 @@ check_return_expr (tree retval, bool *no_warning)\n \t    warn = false;\n \t  /* If we are calling a function whose return type is the same of\n \t     the current class reference, it is ok.  */\n-\t  else if (TREE_CODE (retval) == INDIRECT_REF\n+\t  else if (INDIRECT_REF_P (retval)\n \t\t   && TREE_CODE (TREE_OPERAND (retval, 0)) == CALL_EXPR)\n \t    warn = false;\n \t}"}, {"sha": "52bc4ec3b7f01417c411cce048764946baee15c4", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591cb3cfede314495011b5e0a27b8739f0bca777/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591cb3cfede314495011b5e0a27b8739f0bca777/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=591cb3cfede314495011b5e0a27b8739f0bca777", "patch": "@@ -111,7 +111,7 @@ cxx_readonly_error (tree arg, enum lvalue_use errstring)\n \t\t\t  G_(\"decrement of \"\n \t\t\t     \"constant field %qD\"),\n \t\t\t  arg);\n-  else if (TREE_CODE (arg) == INDIRECT_REF\n+  else if (INDIRECT_REF_P (arg)\n \t   && TREE_CODE (TREE_TYPE (TREE_OPERAND (arg, 0))) == REFERENCE_TYPE\n \t   && (TREE_CODE (TREE_OPERAND (arg, 0)) == VAR_DECL\n \t       || TREE_CODE (TREE_OPERAND (arg, 0)) == PARM_DECL))"}]}