{"sha": "649e3e074bf8306bf0eb042f10483dbd61cd040b", "node_id": "C_kwDOANBUbNoAKDY0OWUzZTA3NGJmODMwNmJmMGViMDQyZjEwNDgzZGJkNjFjZDA0MGI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-18T09:24:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-18T09:24:56Z"}, "message": "Merge #747\n\n747: Base v0 mangling grammar r=philberty a=CohenArthur\n\nThis PR adds base functions to deal with the v0 mangling grammar, [found here](https://rust-lang.github.io/rfcs/2603-rust-symbol-name-mangling-v0.html#syntax-of-mangled-names).\r\n\r\nI have a few questions regarding this implementation:\r\n1/ Is there any existing implementation for the base62 algorithm used here? This is directly adapted from [rustc's base_n module](https://github.com/rust-lang/rust/blob/6f53ddfa74ac3c10ceb63ad4a7a9c95e55853c87/compiler/rustc_data_structures/src/base_n.rs#L16) which I'm assuming is relatively standard and might already exist in the compiler. I haven't been able to find it however.\r\n2/ gccrs cannot yet deal with unicode identifiers, as pointed out by `@bjorn3` in #418. This means that a big chunk of the `v0_add_identifier` implementation is missing. Should it be added in this PR too?\r\n3/ As mentionned in zulip, it would be great to be able to create unit tests for this piece of code. It would be quite easy to generate a bunch of base62 strings and ensure that the algorithm here matches with them.\n\nCo-authored-by: CohenArthur <arthur.cohen@epita.fr>", "tree": {"sha": "ae3b4402a9e8fdf23dfe27df0823219bd2064cae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae3b4402a9e8fdf23dfe27df0823219bd2064cae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/649e3e074bf8306bf0eb042f10483dbd61cd040b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhbT1oCRBK7hj4Ov3rIwAAzMMIAEoi/4iCwlIGBma4z1eeJpGe\nCcYiBqfodywIqEEsPsvnSrGIrd67bg/aJ6v6rrPb2P3c8WPda6xPGKSYSfFBRdZZ\nLzlHfTH2IKNslYucydCfCRqvFekIzfVdJfG7rMo2xTuraFMLX2mkuVfpfx90bXHc\nCMHcsR9iVHEFkq3VGYnlpG3OQ0aaso0ONhAEyncuqhAW9n1+M1egE196J/oBtfGJ\nM9TUU7otn7eYKXSFLTYDWGc9BDnBwZ8hDxb3qGiCjOziFHODeD+NASZgd3rkuNYi\nAer9HRg92FDup/P3d+bAc0Sq6QKAK0Ove/bMVL+ZBriQbp/5OWXYdkZwk5idJwE=\n=XdHJ\n-----END PGP SIGNATURE-----\n", "payload": "tree ae3b4402a9e8fdf23dfe27df0823219bd2064cae\nparent a1a450641004c45b78b76034161f7b2efb0eeb1f\nparent fd9d37c68ca363503ef5a515c7e409a3b15b43e1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1634549096 +0000\ncommitter GitHub <noreply@github.com> 1634549096 +0000\n\nMerge #747\n\n747: Base v0 mangling grammar r=philberty a=CohenArthur\n\nThis PR adds base functions to deal with the v0 mangling grammar, [found here](https://rust-lang.github.io/rfcs/2603-rust-symbol-name-mangling-v0.html#syntax-of-mangled-names).\r\n\r\nI have a few questions regarding this implementation:\r\n1/ Is there any existing implementation for the base62 algorithm used here? This is directly adapted from [rustc's base_n module](https://github.com/rust-lang/rust/blob/6f53ddfa74ac3c10ceb63ad4a7a9c95e55853c87/compiler/rustc_data_structures/src/base_n.rs#L16) which I'm assuming is relatively standard and might already exist in the compiler. I haven't been able to find it however.\r\n2/ gccrs cannot yet deal with unicode identifiers, as pointed out by `@bjorn3` in #418. This means that a big chunk of the `v0_add_identifier` implementation is missing. Should it be added in this PR too?\r\n3/ As mentionned in zulip, it would be great to be able to create unit tests for this piece of code. It would be quite easy to generate a bunch of base62 strings and ensure that the algorithm here matches with them.\n\nCo-authored-by: CohenArthur <arthur.cohen@epita.fr>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/649e3e074bf8306bf0eb042f10483dbd61cd040b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/649e3e074bf8306bf0eb042f10483dbd61cd040b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/649e3e074bf8306bf0eb042f10483dbd61cd040b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1a450641004c45b78b76034161f7b2efb0eeb1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1a450641004c45b78b76034161f7b2efb0eeb1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1a450641004c45b78b76034161f7b2efb0eeb1f"}, {"sha": "fd9d37c68ca363503ef5a515c7e409a3b15b43e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd9d37c68ca363503ef5a515c7e409a3b15b43e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd9d37c68ca363503ef5a515c7e409a3b15b43e1"}], "stats": {"total": 148, "additions": 148, "deletions": 0}, "files": [{"sha": "57e82995d9badc3be34338a327a3303ed2341b20", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/649e3e074bf8306bf0eb042f10483dbd61cd040b/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/649e3e074bf8306bf0eb042f10483dbd61cd040b/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=649e3e074bf8306bf0eb042f10483dbd61cd040b", "patch": "@@ -88,6 +88,7 @@ GRS_OBJS = \\\n     rust/rust-lint-marklive.o \\\n     rust/rust-hir-type-check-path.o \\\n     rust/rust-compile-intrinsic.o \\\n+    rust/rust-base62.o \\\n     $(END)\n # removed object files from here\n "}, {"sha": "15ac3b1db5fd836add4fd30d2c332f688a5c5ef0", "filename": "gcc/rust/backend/rust-mangle.cc", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/649e3e074bf8306bf0eb042f10483dbd61cd040b/gcc%2Frust%2Fbackend%2Frust-mangle.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/649e3e074bf8306bf0eb042f10483dbd61cd040b/gcc%2Frust%2Fbackend%2Frust-mangle.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-mangle.cc?ref=649e3e074bf8306bf0eb042f10483dbd61cd040b", "patch": "@@ -1,5 +1,7 @@\n #include \"rust-mangle.h\"\n #include \"fnv-hash.h\"\n+#include \"rust-base62.h\"\n+#include <algorithm>\n \n // FIXME: Rename those to legacy_*\n static const std::string kMangledSymbolPrefix = \"_ZN\";\n@@ -154,6 +156,63 @@ v0_simple_type_prefix (const TyTy::BaseType *ty)\n   gcc_unreachable ();\n }\n \n+// Add an underscore-terminated base62 integer to the mangling string.\n+// This corresponds to the `<base-62-number>` grammar in the v0 mangling RFC:\n+//  - 0 is encoded as \"_\"\n+//  - any other value is encoded as itself minus one in base 62, followed by \"_\"\n+static void\n+v0_add_integer_62 (std::string &mangled, uint64_t x)\n+{\n+  if (x > 0)\n+    mangled.append (base62_integer (x - 1));\n+\n+  mangled.append (\"_\");\n+}\n+\n+// Add a tag-prefixed base62 integer to the mangling string when the\n+// integer is greater than 0:\n+//  - 0 is encoded as \"\" (nothing)\n+//  - any other value is encoded as <tag> + v0_add_integer_62(itself), that is\n+//  <tag> + base62(itself - 1) + '_'\n+static void\n+v0_add_opt_integer_62 (std::string &mangled, std::string tag, uint64_t x)\n+{\n+  if (x > 0)\n+    {\n+      mangled.append (tag);\n+      v0_add_integer_62 (mangled, x);\n+    }\n+}\n+\n+static void\n+v0_add_disambiguator (std::string &mangled, uint64_t dis)\n+{\n+  v0_add_opt_integer_62 (mangled, \"s\", dis);\n+}\n+\n+// Add an identifier to the mangled string. This corresponds to the\n+// `<identifier>` grammar in the v0 mangling RFC.\n+static void\n+v0_add_identifier (std::string &mangled, const std::string &identifier)\n+{\n+  // FIXME: gccrs cannot handle unicode identifiers yet, so we never have to\n+  // create mangling for unicode values for now. However, this is handled\n+  // by the v0 mangling scheme. The grammar for unicode identifier is contained\n+  // in <undisambiguated-identifier>, right under the <identifier> one. If the\n+  // identifier contains unicode values, then an extra \"u\" needs to be added\n+  // to the mangling string and `punycode` must be used to encode the\n+  // characters.\n+\n+  mangled += std::to_string (identifier.size ());\n+\n+  // If the first character of the identifier is a digit or an underscore, we\n+  // add an extra underscore\n+  if (identifier[0] == '_')\n+    mangled.append (\"_\");\n+\n+  mangled.append (identifier);\n+}\n+\n static std::string\n v0_type_prefix (const TyTy::BaseType *ty)\n {\n@@ -194,7 +253,13 @@ static std::string\n v0_mangle_item (const TyTy::BaseType *ty, const Resolver::CanonicalPath &path,\n \t\tconst std::string &crate_name)\n {\n+  std::string mangled;\n+\n+  // FIXME: Add real algorithm once all pieces are implemented\n   auto ty_prefix = v0_type_prefix (ty);\n+  v0_add_identifier (mangled, crate_name);\n+  v0_add_disambiguator (mangled, 62);\n+\n   gcc_unreachable ();\n }\n "}, {"sha": "f1e3202182a4590b50e86d33078a2507d0532f06", "filename": "gcc/rust/util/rust-base62.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/649e3e074bf8306bf0eb042f10483dbd61cd040b/gcc%2Frust%2Futil%2Frust-base62.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/649e3e074bf8306bf0eb042f10483dbd61cd040b/gcc%2Frust%2Futil%2Frust-base62.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-base62.cc?ref=649e3e074bf8306bf0eb042f10483dbd61cd040b", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-base62.h\"\n+\n+#include <algorithm>\n+\n+namespace Rust {\n+\n+std::string\n+base62_integer (uint64_t value)\n+{\n+  const static std::string base_64\n+    = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@$\";\n+  std::string buffer (128, '\\0');\n+  size_t idx = 0;\n+  size_t base = 62;\n+\n+  do\n+    {\n+      buffer[idx] = base_64[(value % base)];\n+      idx++;\n+      value = value / base;\n+    }\n+  while (value != 0);\n+\n+  std::reverse (buffer.begin (), buffer.begin () + idx);\n+  return buffer.substr (0, idx);\n+}\n+\n+} // namespace Rust\n+\n+// FIXME: Add unit testing using the selftest framework"}, {"sha": "7a6e3cf2c92623c906282d9be6d671ecaafefbe8", "filename": "gcc/rust/util/rust-base62.h", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/649e3e074bf8306bf0eb042f10483dbd61cd040b/gcc%2Frust%2Futil%2Frust-base62.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/649e3e074bf8306bf0eb042f10483dbd61cd040b/gcc%2Frust%2Futil%2Frust-base62.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-base62.h?ref=649e3e074bf8306bf0eb042f10483dbd61cd040b", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_BASE62_H\n+#define RUST_BASE62_H\n+\n+#include <string>\n+\n+namespace Rust {\n+\n+/**\n+ * Get the Base62 representation of an integer\n+ */\n+std::string\n+base62_integer (uint64_t value);\n+\n+} // namespace Rust\n+\n+#endif /* !RUST_BASE62_H */"}]}