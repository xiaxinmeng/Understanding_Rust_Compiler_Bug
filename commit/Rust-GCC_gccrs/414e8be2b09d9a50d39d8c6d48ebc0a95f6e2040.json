{"sha": "414e8be2b09d9a50d39d8c6d48ebc0a95f6e2040", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE0ZThiZTJiMDlkOWE1MGQzOWQ4YzZkNDhlYmMwYTk1ZjZlMjA0MA==", "commit": {"author": {"name": "Daniel Kraft", "email": "d@domob.eu", "date": "2010-09-26T19:25:52Z"}, "committer": {"name": "Daniel Kraft", "email": "domob@gcc.gnu.org", "date": "2010-09-26T19:25:52Z"}, "message": "re PR fortran/45783 (ICE in gfc_add_component_ref, at fortran/class.c:77)\n\n2010-09-26  Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/45783\n\tPR fortran/45795\n\t* resolve.c (resolve_select_type): Clarify code.\n\t(resolve_assoc_var): Only set typespec if it is currently unknown.\n\n2010-09-26  Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/45783\n\tPR fortran/45795\n\t* gfortran.dg/select_type_18.f03: New test.\n\nFrom-SVN: r164638", "tree": {"sha": "1d9f1efb46f0580469c88e194c71c68ffeef9886", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d9f1efb46f0580469c88e194c71c68ffeef9886"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/414e8be2b09d9a50d39d8c6d48ebc0a95f6e2040", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/414e8be2b09d9a50d39d8c6d48ebc0a95f6e2040", "html_url": "https://github.com/Rust-GCC/gccrs/commit/414e8be2b09d9a50d39d8c6d48ebc0a95f6e2040", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/414e8be2b09d9a50d39d8c6d48ebc0a95f6e2040/comments", "author": {"login": "domob1812", "id": 4943644, "node_id": "MDQ6VXNlcjQ5NDM2NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domob1812", "html_url": "https://github.com/domob1812", "followers_url": "https://api.github.com/users/domob1812/followers", "following_url": "https://api.github.com/users/domob1812/following{/other_user}", "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}", "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions", "organizations_url": "https://api.github.com/users/domob1812/orgs", "repos_url": "https://api.github.com/users/domob1812/repos", "events_url": "https://api.github.com/users/domob1812/events{/privacy}", "received_events_url": "https://api.github.com/users/domob1812/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1caeb1af0c71ad5639a4af71acf9fe06756e2e0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1caeb1af0c71ad5639a4af71acf9fe06756e2e0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1caeb1af0c71ad5639a4af71acf9fe06756e2e0e"}], "stats": {"total": 113, "additions": 110, "deletions": 3}, "files": [{"sha": "f6655005cab8fae19662313ce96a329fafe64527", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414e8be2b09d9a50d39d8c6d48ebc0a95f6e2040/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414e8be2b09d9a50d39d8c6d48ebc0a95f6e2040/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=414e8be2b09d9a50d39d8c6d48ebc0a95f6e2040", "patch": "@@ -1,3 +1,10 @@\n+2010-09-26  Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/45783\n+\tPR fortran/45795\n+\t* resolve.c (resolve_select_type): Clarify code.\n+\t(resolve_assoc_var): Only set typespec if it is currently unknown.\n+\n 2010-09-26  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/45793"}, {"sha": "6b5bbfa742a6fc2c963ab1e8af972b69690b651f", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414e8be2b09d9a50d39d8c6d48ebc0a95f6e2040/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414e8be2b09d9a50d39d8c6d48ebc0a95f6e2040/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=414e8be2b09d9a50d39d8c6d48ebc0a95f6e2040", "patch": "@@ -7570,7 +7570,11 @@ resolve_assoc_var (gfc_symbol* sym, bool resolve_target)\n       sym->attr.target = (tsym->attr.target || tsym->attr.pointer);\n     }\n \n-  sym->ts = target->ts;\n+  /* Get type if this was not already set.  Note that it can be\n+     some other type than the target in case this is a SELECT TYPE\n+     selector!  So we must not update when the type is already there.  */\n+  if (sym->ts.type == BT_UNKNOWN)\n+    sym->ts = target->ts;\n   gcc_assert (sym->ts.type != BT_UNKNOWN);\n \n   /* See if this is a valid association-to-variable.  */\n@@ -7673,8 +7677,8 @@ resolve_select_type (gfc_code *code, gfc_namespace *old_ns)\n \t      error++;\n \t      continue;\n \t    }\n-\t  else\n-\t    default_case = body;\n+\n+\t  default_case = body;\n \t}\n     }\n     "}, {"sha": "536003f3718f40d86a998ac7ce24db066161fb86", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414e8be2b09d9a50d39d8c6d48ebc0a95f6e2040/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414e8be2b09d9a50d39d8c6d48ebc0a95f6e2040/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=414e8be2b09d9a50d39d8c6d48ebc0a95f6e2040", "patch": "@@ -1,3 +1,9 @@\n+2010-09-26  Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/45783\n+\tPR fortran/45795\n+\t* gfortran.dg/select_type_18.f03: New test.\n+\n 2010-09-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/return2.ad[sb]: New test."}, {"sha": "e4bacd377e754627792168e00d9476d17a1c4dcd", "filename": "gcc/testsuite/gfortran.dg/select_type_18.f03", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414e8be2b09d9a50d39d8c6d48ebc0a95f6e2040/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_18.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414e8be2b09d9a50d39d8c6d48ebc0a95f6e2040/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_18.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_18.f03?ref=414e8be2b09d9a50d39d8c6d48ebc0a95f6e2040", "patch": "@@ -0,0 +1,90 @@\n+! { dg-do compile }\n+\n+! PR fortran/45783\n+! PR fortran/45795\n+! This used to fail because of incorrect compile-time typespec on the\n+! SELECT TYPE selector.\n+\n+! This is the test-case from PR 45795.\n+! Contributed by Salvatore Filippone, sfilippone@uniroma2.it.\n+\n+module base_mod\n+  \n+  type  :: base\n+    integer     :: m, n\n+  end type base\n+\n+end module base_mod\n+\n+module s_base_mod\n+  \n+  use base_mod\n+\n+  type, extends(base) :: s_base\n+  contains\n+    procedure, pass(a) :: cp_to_foo   => s_base_cp_to_foo   \n+    \n+  end type s_base\n+  \n+  \n+  type, extends(s_base) :: s_foo\n+    \n+    integer              :: nnz\n+    integer, allocatable :: ia(:), ja(:)\n+    real, allocatable :: val(:)\n+    \n+  contains\n+    \n+    procedure, pass(a) :: cp_to_foo    => s_cp_foo_to_foo\n+    \n+  end type s_foo\n+  \n+  \n+  interface \n+    subroutine s_base_cp_to_foo(a,b,info) \n+      import :: s_base, s_foo\n+      class(s_base), intent(in) :: a\n+      class(s_foo), intent(inout) :: b\n+      integer, intent(out)            :: info\n+    end subroutine s_base_cp_to_foo\n+  end interface\n+  \n+  interface \n+    subroutine s_cp_foo_to_foo(a,b,info) \n+      import :: s_foo\n+      class(s_foo), intent(in) :: a\n+      class(s_foo), intent(inout) :: b\n+      integer, intent(out)            :: info\n+    end subroutine s_cp_foo_to_foo\n+  end interface\n+\n+end module s_base_mod\n+\n+\n+subroutine trans2(a,b)\n+  use s_base_mod\n+  implicit none \n+\n+  class(s_base), intent(out) :: a\n+  class(base), intent(in)   :: b\n+\n+  type(s_foo) :: tmp\n+  integer err_act, info\n+\n+\n+  info = 0\n+  select type(b)\n+  class is (s_base)\n+    call b%cp_to_foo(tmp,info)\n+  class default\n+    info = -1\n+    write(*,*) 'Invalid dynamic type'\n+  end select\n+  \n+  if (info /= 0) write(*,*) 'Error code ',info\n+\n+  return\n+\n+end subroutine trans2\n+\n+! { dg-final { cleanup-modules \"base_mod s_base_mod\" } }"}]}