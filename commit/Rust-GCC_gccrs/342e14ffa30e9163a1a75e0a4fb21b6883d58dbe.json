{"sha": "342e14ffa30e9163a1a75e0a4fb21b6883d58dbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQyZTE0ZmZhMzBlOTE2M2ExYTc1ZTBhNGZiMjFiNjg4M2Q1OGRiZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-23T17:19:20Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-27T15:10:48Z"}, "message": "analyzer: fix setjmp-detection and support sigsetjmp\n\nThis patch removes the hack in is_setjmp_call_p of looking for\n\"setjmp\" and \"_setjmp\", replacing it with some logic adapted from\nspecial_function_p in calls.c, ignoring up to 2 leading underscores from\nthe fndecl's name when checking for a function by name.\n\nIt also requires that such functions are \"extern\" and at file scope\nfor them to be matched.\n\nThe patch also generalizes the setjmp/longjmp handling in the analyzer\nto also work with sigsetjmp/siglongjmp.  Doing so requires generalizing\nsome hardcoded functions in diagnostics (which were hardcoded to avoid\nuser-facing messages referring to \"_setjmp\", which is an implementation\ndetail) - the patch adds a new function, get_user_facing_name for this,\nfor use on calls that matched is_named_call_p and\nis_specical_named_call_p.\n\ngcc/analyzer/ChangeLog:\n\t* analyzer.cc  (is_named_call_p): Check that fndecl is \"extern\"\n\tand at file scope.  Potentially disregard prefix _ or __ in\n\tfndecl's name.  Bail if the identifier is NULL.\n\t(is_setjmp_call_p): Expect a gcall rather than plain gimple.\n\tRemove special-case check for leading prefix, and also check for\n\tsigsetjmp.\n\t(is_longjmp_call_p): Also check for siglongjmp.\n\t(get_user_facing_name): New function.\n\t* analyzer.h (is_setjmp_call_p): Expect a gcall rather than plain\n\tgimple.\n\t(get_user_facing_name): New decl.\n\t* checker-path.cc (setjmp_event::get_desc): Use\n\tget_user_facing_name to avoid hardcoding the function name.\n\t(rewind_event::rewind_event): Add rewind_info param, using it to\n\tinitialize new m_rewind_info field, and strengthen the assertion.\n\t(rewind_from_longjmp_event::get_desc): Use get_user_facing_name to\n\tavoid hardcoding the function name.\n\t(rewind_to_setjmp_event::get_desc): Likewise.\n\t* checker-path.h (setjmp_event::setjmp_event): Add setjmp_call\n\tparam and use it to initialize...\n\t(setjmp_event::m_setjmp_call): New field.\n\t(rewind_event::rewind_event): Add rewind_info param.\n\t(rewind_event::m_rewind_info): New protected field.\n\t(rewind_from_longjmp_event::rewind_from_longjmp_event): Add\n\trewind_info param.\n\t(class rewind_to_setjmp_event): Move rewind_info field to parent\n\tclass.\n\t* diagnostic-manager.cc (diagnostic_manager::add_events_for_eedge):\n\tUpdate setjmp-handling for is_setjmp_call_p requiring a gcall;\n\tpass the call to the new setjmp_event.\n\t* engine.cc (exploded_node::on_stmt): Update for is_setjmp_call_p\n\trequiring a gcall.\n\t(stale_jmp_buf::emit): Use get_user_facing_name to avoid\n\thardcoding the function names.\n\t(exploded_node::on_longjmp): Pass the longjmp_call when\n\tconstructing rewind_info.\n\t(rewind_info_t::add_events_to_path): Pass the rewind_info_t to the\n\trewind_from_longjmp_event's ctor.\n\t* exploded-graph.h (rewind_info_t::rewind_info_t): Add\n\tlongjmp_call param.\n\t(rewind_info_t::get_longjmp_call): New.\n\t(rewind_info_t::m_longjmp_call): New.\n\t* region-model.cc (region_model::on_setjmp): Update comment to\n\tindicate this is also for sigsetjmp.\n\t* region-model.h (struct setjmp_record): Likewise.\n\t(class setjmp_svalue): Likewise.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/analyzer/sigsetjmp-5.c: New test.\n\t* gcc.dg/analyzer/sigsetjmp-6.c: New test.", "tree": {"sha": "5db63fd77e1d2cf9af6ed4898839f0fe0df9dcc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5db63fd77e1d2cf9af6ed4898839f0fe0df9dcc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/342e14ffa30e9163a1a75e0a4fb21b6883d58dbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/342e14ffa30e9163a1a75e0a4fb21b6883d58dbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/342e14ffa30e9163a1a75e0a4fb21b6883d58dbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/342e14ffa30e9163a1a75e0a4fb21b6883d58dbe/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "317346b271638d405970fbcc3d043a1f8dc098cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/317346b271638d405970fbcc3d043a1f8dc098cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/317346b271638d405970fbcc3d043a1f8dc098cb"}], "stats": {"total": 297, "additions": 242, "deletions": 55}, "files": [{"sha": "345d40f3faf83fec7bd55148f371ec79dd0233c4", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342e14ffa30e9163a1a75e0a4fb21b6883d58dbe/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342e14ffa30e9163a1a75e0a4fb21b6883d58dbe/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=342e14ffa30e9163a1a75e0a4fb21b6883d58dbe", "patch": "@@ -1,3 +1,52 @@\n+2020-01-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analyzer.cc  (is_named_call_p): Check that fndecl is \"extern\"\n+\tand at file scope.  Potentially disregard prefix _ or __ in\n+\tfndecl's name.  Bail if the identifier is NULL.\n+\t(is_setjmp_call_p): Expect a gcall rather than plain gimple.\n+\tRemove special-case check for leading prefix, and also check for\n+\tsigsetjmp.\n+\t(is_longjmp_call_p): Also check for siglongjmp.\n+\t(get_user_facing_name): New function.\n+\t* analyzer.h (is_setjmp_call_p): Expect a gcall rather than plain\n+\tgimple.\n+\t(get_user_facing_name): New decl.\n+\t* checker-path.cc (setjmp_event::get_desc): Use\n+\tget_user_facing_name to avoid hardcoding the function name.\n+\t(rewind_event::rewind_event): Add rewind_info param, using it to\n+\tinitialize new m_rewind_info field, and strengthen the assertion.\n+\t(rewind_from_longjmp_event::get_desc): Use get_user_facing_name to\n+\tavoid hardcoding the function name.\n+\t(rewind_to_setjmp_event::get_desc): Likewise.\n+\t* checker-path.h (setjmp_event::setjmp_event): Add setjmp_call\n+\tparam and use it to initialize...\n+\t(setjmp_event::m_setjmp_call): New field.\n+\t(rewind_event::rewind_event): Add rewind_info param.\n+\t(rewind_event::m_rewind_info): New protected field.\n+\t(rewind_from_longjmp_event::rewind_from_longjmp_event): Add\n+\trewind_info param.\n+\t(class rewind_to_setjmp_event): Move rewind_info field to parent\n+\tclass.\n+\t* diagnostic-manager.cc (diagnostic_manager::add_events_for_eedge):\n+\tUpdate setjmp-handling for is_setjmp_call_p requiring a gcall;\n+\tpass the call to the new setjmp_event.\n+\t* engine.cc (exploded_node::on_stmt): Update for is_setjmp_call_p\n+\trequiring a gcall.\n+\t(stale_jmp_buf::emit): Use get_user_facing_name to avoid\n+\thardcoding the function names.\n+\t(exploded_node::on_longjmp): Pass the longjmp_call when\n+\tconstructing rewind_info.\n+\t(rewind_info_t::add_events_to_path): Pass the rewind_info_t to the\n+\trewind_from_longjmp_event's ctor.\n+\t* exploded-graph.h (rewind_info_t::rewind_info_t): Add\n+\tlongjmp_call param.\n+\t(rewind_info_t::get_longjmp_call): New.\n+\t(rewind_info_t::m_longjmp_call): New.\n+\t* region-model.cc (region_model::on_setjmp): Update comment to\n+\tindicate this is also for sigsetjmp.\n+\t* region-model.h (struct setjmp_record): Likewise.\n+\t(class setjmp_svalue): Likewise.\n+\n 2020-01-27  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93276"}, {"sha": "1b5e4c9ecf89ebbdc5f4a896602a60ec816de023", "filename": "gcc/analyzer/analyzer.cc", "status": "modified", "additions": 69, "deletions": 14, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342e14ffa30e9163a1a75e0a4fb21b6883d58dbe/gcc%2Fanalyzer%2Fanalyzer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342e14ffa30e9163a1a75e0a4fb21b6883d58dbe/gcc%2Fanalyzer%2Fanalyzer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.cc?ref=342e14ffa30e9163a1a75e0a4fb21b6883d58dbe", "patch": "@@ -54,19 +54,49 @@ is_special_named_call_p (const gcall *call, const char *funcname,\n   return is_named_call_p (fndecl, funcname, call, num_args);\n }\n \n-/* Helper function for checkers.  Does FNDECL have the given FUNCNAME?  */\n+/* Helper function for checkers.  Is FNDECL an extern fndecl at file scope\n+   that has the given FUNCNAME?\n+\n+   Compare with special_function_p in calls.c.  */\n \n bool\n is_named_call_p (tree fndecl, const char *funcname)\n {\n   gcc_assert (fndecl);\n   gcc_assert (funcname);\n \n-  return 0 == strcmp (IDENTIFIER_POINTER (DECL_NAME (fndecl)), funcname);\n+  /* Exclude functions not at the file scope, or not `extern',\n+     since they are not the magic functions we would otherwise\n+     think they are.  */\n+  if (!((DECL_CONTEXT (fndecl) == NULL_TREE\n+\t || TREE_CODE (DECL_CONTEXT (fndecl)) == TRANSLATION_UNIT_DECL)\n+\t&& TREE_PUBLIC (fndecl)))\n+    return false;\n+\n+  tree identifier = DECL_NAME (fndecl);\n+  if (identifier == NULL)\n+    return false;\n+\n+  const char *name = IDENTIFIER_POINTER (identifier);\n+  const char *tname = name;\n+\n+  /* Potentially disregard prefix _ or __ in FNDECL's name, but not if\n+     FUNCNAME itself has leading underscores (e.g. when looking for\n+     \"__analyzer_eval\").  */\n+  if (funcname[0] != '_' && name[0] == '_')\n+    {\n+      if (name[1] == '_')\n+\ttname += 2;\n+      else\n+\ttname += 1;\n+    }\n+\n+  return 0 == strcmp (tname, funcname);\n }\n \n-/* Helper function for checkers.  Does FNDECL have the given FUNCNAME, and\n-   does CALL have the given number of arguments?  */\n+/* Helper function for checkers.  Is FNDECL an extern fndecl at file scope\n+   that has the given FUNCNAME, and does CALL have the given number of\n+   arguments?  */\n \n bool\n is_named_call_p (tree fndecl, const char *funcname,\n@@ -84,32 +114,57 @@ is_named_call_p (tree fndecl, const char *funcname,\n   return true;\n }\n \n-/* Return true if stmt is a setjmp call.  */\n+/* Return true if stmt is a setjmp or sigsetjmp call.  */\n \n bool\n-is_setjmp_call_p (const gimple *stmt)\n+is_setjmp_call_p (const gcall *call)\n {\n-  /* TODO: is there a less hacky way to check for \"setjmp\"?  */\n-  if (const gcall *call = dyn_cast <const gcall *> (stmt))\n-    if (is_special_named_call_p (call, \"setjmp\", 1)\n-\t|| is_special_named_call_p (call, \"_setjmp\", 1))\n-      return true;\n+  if (is_special_named_call_p (call, \"setjmp\", 1)\n+      || is_special_named_call_p (call, \"sigsetjmp\", 2))\n+    return true;\n \n   return false;\n }\n \n-/* Return true if stmt is a longjmp call.  */\n+/* Return true if stmt is a longjmp or siglongjmp call.  */\n \n bool\n is_longjmp_call_p (const gcall *call)\n {\n-  /* TODO: is there a less hacky way to check for \"longjmp\"?  */\n-  if (is_special_named_call_p (call, \"longjmp\", 2))\n+  if (is_special_named_call_p (call, \"longjmp\", 2)\n+      || is_special_named_call_p (call, \"siglongjmp\", 2))\n     return true;\n \n   return false;\n }\n \n+/* For a CALL that matched is_special_named_call_p or is_named_call_p for\n+   some name, return a name for the called function suitable for use in\n+   diagnostics (stripping the leading underscores).  */\n+\n+const char *\n+get_user_facing_name (const gcall *call)\n+{\n+  tree fndecl = gimple_call_fndecl (call);\n+  gcc_assert (fndecl);\n+\n+  tree identifier = DECL_NAME (fndecl);\n+  gcc_assert (identifier);\n+\n+  const char *name = IDENTIFIER_POINTER (identifier);\n+\n+  /* Strip prefix _ or __ in FNDECL's name.  */\n+  if (name[0] == '_')\n+    {\n+      if (name[1] == '_')\n+\treturn name + 2;\n+      else\n+\treturn name + 1;\n+    }\n+\n+  return name;\n+}\n+\n /* Generate a label_text instance by formatting FMT, using a\n    temporary clone of the global_dc's printer (thus using its\n    formatting callbacks)."}, {"sha": "f1602e38b36743a5ddcb698c49017860920a7e95", "filename": "gcc/analyzer/analyzer.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342e14ffa30e9163a1a75e0a4fb21b6883d58dbe/gcc%2Fanalyzer%2Fanalyzer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342e14ffa30e9163a1a75e0a4fb21b6883d58dbe/gcc%2Fanalyzer%2Fanalyzer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.h?ref=342e14ffa30e9163a1a75e0a4fb21b6883d58dbe", "patch": "@@ -78,9 +78,11 @@ extern bool is_special_named_call_p (const gcall *call, const char *funcname,\n extern bool is_named_call_p (tree fndecl, const char *funcname);\n extern bool is_named_call_p (tree fndecl, const char *funcname,\n \t\t\t     const gcall *call, unsigned int num_args);\n-extern bool is_setjmp_call_p (const gimple *stmt);\n+extern bool is_setjmp_call_p (const gcall *call);\n extern bool is_longjmp_call_p (const gcall *call);\n \n+extern const char *get_user_facing_name (const gcall *call);\n+\n extern void register_analyzer_pass ();\n \n extern label_text make_label_text (bool can_colorize, const char *fmt, ...);"}, {"sha": "7f6cdf599cf85a5379f24b3ee2992b36409dae83", "filename": "gcc/analyzer/checker-path.cc", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342e14ffa30e9163a1a75e0a4fb21b6883d58dbe/gcc%2Fanalyzer%2Fchecker-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342e14ffa30e9163a1a75e0a4fb21b6883d58dbe/gcc%2Fanalyzer%2Fchecker-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fchecker-path.cc?ref=342e14ffa30e9163a1a75e0a4fb21b6883d58dbe", "patch": "@@ -709,7 +709,7 @@ setjmp_event::get_desc (bool can_colorize) const\n {\n   return make_label_text (can_colorize,\n \t\t\t  \"%qs called here\",\n-\t\t\t  \"setjmp\");\n+\t\t\t  get_user_facing_name (m_setjmp_call));\n }\n \n /* Implementation of checker_event::prepare_for_emission vfunc for setjmp_event.\n@@ -748,11 +748,13 @@ rewind_event::get_setjmp_caller () const\n \n rewind_event::rewind_event (const exploded_edge *eedge,\n \t\t\t    enum event_kind kind,\n-\t\t\t    location_t loc, tree fndecl, int depth)\n+\t\t\t    location_t loc, tree fndecl, int depth,\n+\t\t\t    const rewind_info_t *rewind_info)\n : checker_event (kind, loc, fndecl, depth),\n+  m_rewind_info (rewind_info),\n   m_eedge (eedge)\n {\n-  gcc_assert (m_eedge->m_custom_info); // a rewind_info_t\n+  gcc_assert (m_eedge->m_custom_info == m_rewind_info);\n }\n \n /* class rewind_from_longjmp_event : public rewind_event.  */\n@@ -763,7 +765,8 @@ rewind_event::rewind_event (const exploded_edge *eedge,\n label_text\n rewind_from_longjmp_event::get_desc (bool can_colorize) const\n {\n-  const char *src_name = \"longjmp\";\n+  const char *src_name\n+    = get_user_facing_name (m_rewind_info->get_longjmp_call ());\n \n   if (get_longjmp_caller () == get_setjmp_caller ())\n     /* Special-case: purely intraprocedural rewind.  */\n@@ -786,7 +789,8 @@ rewind_from_longjmp_event::get_desc (bool can_colorize) const\n label_text\n rewind_to_setjmp_event::get_desc (bool can_colorize) const\n {\n-  const char *dst_name = \"setjmp\";\n+  const char *dst_name\n+    = get_user_facing_name (m_rewind_info->get_setjmp_call ());\n \n   /* If we can, identify the ID of the setjmp_event.  */\n   if (m_original_setjmp_event_id.known_p ())"}, {"sha": "30cb43c13ba1f0859e1204417a77dd8571b2522a", "filename": "gcc/analyzer/checker-path.h", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342e14ffa30e9163a1a75e0a4fb21b6883d58dbe/gcc%2Fanalyzer%2Fchecker-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342e14ffa30e9163a1a75e0a4fb21b6883d58dbe/gcc%2Fanalyzer%2Fchecker-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fchecker-path.h?ref=342e14ffa30e9163a1a75e0a4fb21b6883d58dbe", "patch": "@@ -329,15 +329,15 @@ class return_event : public superedge_event\n   bool is_return_p () const FINAL OVERRIDE;\n };\n \n-/* A concrete event subclass for a setjmp call.  */\n+/* A concrete event subclass for a setjmp or sigsetjmp call.  */\n \n class setjmp_event : public checker_event\n {\n public:\n   setjmp_event (location_t loc, const exploded_node *enode,\n-\t\ttree fndecl, int depth)\n+\t\ttree fndecl, int depth, const gcall *setjmp_call)\n   : checker_event (EK_SETJMP, loc, fndecl, depth),\n-    m_enode (enode)\n+    m_enode (enode), m_setjmp_call (setjmp_call)\n   {\n   }\n \n@@ -349,9 +349,12 @@ class setjmp_event : public checker_event\n \n private:\n   const exploded_node *m_enode;\n+  const gcall *m_setjmp_call;\n };\n \n-/* An abstract event subclass for rewinding from a longjmp to a setjmp.\n+/* An abstract event subclass for rewinding from a longjmp to a setjmp\n+   (or siglongjmp to sigsetjmp).\n+\n    Base class for two from/to subclasses, showing the two halves of the\n    rewind.  */\n \n@@ -365,38 +368,42 @@ class rewind_event : public checker_event\n  protected:\n   rewind_event (const exploded_edge *eedge,\n \t\tenum event_kind kind,\n-\t\tlocation_t loc, tree fndecl, int depth);\n+\t\tlocation_t loc, tree fndecl, int depth,\n+\t\tconst rewind_info_t *rewind_info);\n+  const rewind_info_t *m_rewind_info;\n \n  private:\n   const exploded_edge *m_eedge;\n };\n \n /* A concrete event subclass for rewinding from a longjmp to a setjmp,\n-   showing the longjmp.  */\n+   showing the longjmp (or siglongjmp).  */\n \n class rewind_from_longjmp_event : public rewind_event\n {\n public:\n   rewind_from_longjmp_event (const exploded_edge *eedge,\n-\t\t\t     location_t loc, tree fndecl, int depth)\n-  : rewind_event (eedge, EK_REWIND_FROM_LONGJMP, loc, fndecl, depth)\n+\t\t\t     location_t loc, tree fndecl, int depth,\n+\t\t\t     const rewind_info_t *rewind_info)\n+  : rewind_event (eedge, EK_REWIND_FROM_LONGJMP, loc, fndecl, depth,\n+\t\t  rewind_info)\n   {\n   }\n \n   label_text get_desc (bool can_colorize) const FINAL OVERRIDE;\n };\n \n /* A concrete event subclass for rewinding from a longjmp to a setjmp,\n-   showing the setjmp.  */\n+   showing the setjmp (or sigsetjmp).  */\n \n class rewind_to_setjmp_event : public rewind_event\n {\n public:\n   rewind_to_setjmp_event (const exploded_edge *eedge,\n \t\t\t  location_t loc, tree fndecl, int depth,\n \t\t\t  const rewind_info_t *rewind_info)\n-  : rewind_event (eedge, EK_REWIND_TO_SETJMP, loc, fndecl, depth),\n-    m_rewind_info (rewind_info)\n+  : rewind_event (eedge, EK_REWIND_TO_SETJMP, loc, fndecl, depth,\n+\t\t  rewind_info)\n   {\n   }\n \n@@ -408,7 +415,6 @@ class rewind_to_setjmp_event : public rewind_event\n \n private:\n   diagnostic_event_id_t m_original_setjmp_event_id;\n-  const rewind_info_t *m_rewind_info;\n };\n \n /* Concrete subclass of checker_event for use at the end of a path:"}, {"sha": "eb1fa05533ebe8fb559e2a1333d07726d1b87fc8", "filename": "gcc/analyzer/diagnostic-manager.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342e14ffa30e9163a1a75e0a4fb21b6883d58dbe/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342e14ffa30e9163a1a75e0a4fb21b6883d58dbe/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fdiagnostic-manager.cc?ref=342e14ffa30e9163a1a75e0a4fb21b6883d58dbe", "patch": "@@ -818,12 +818,14 @@ diagnostic_manager::add_events_for_eedge (const exploded_edge &eedge,\n     case PK_BEFORE_STMT:\n       {\n \tconst gimple *stmt = dst_point.get_stmt ();\n-\tif (is_setjmp_call_p (stmt))\n+\tconst gcall *call = dyn_cast <const gcall *> (stmt);\n+\tif (call && is_setjmp_call_p (call))\n \t  emission_path->add_event\n \t    (new setjmp_event (stmt->location,\n \t\t\t       dst_node,\n \t\t\t       dst_point.get_fndecl (),\n-\t\t\t       dst_stack_depth));\n+\t\t\t       dst_stack_depth,\n+\t\t\t       call));\n \telse\n \t  emission_path->add_event\n \t    (new statement_event (stmt,"}, {"sha": "b39058f9c10311a19e7421144f2c0214b69c8e47", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342e14ffa30e9163a1a75e0a4fb21b6883d58dbe/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342e14ffa30e9163a1a75e0a4fb21b6883d58dbe/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=342e14ffa30e9163a1a75e0a4fb21b6883d58dbe", "patch": "@@ -1001,7 +1001,7 @@ exploded_node::on_stmt (exploded_graph &eg,\n \t{\n \t  /* This is handled elsewhere.  */\n \t}\n-      else if (is_setjmp_call_p (stmt))\n+      else if (is_setjmp_call_p (call))\n \tstate->m_region_model->on_setjmp (call, this, &ctxt);\n       else if (is_longjmp_call_p (call))\n \t{\n@@ -1126,7 +1126,8 @@ class stale_jmp_buf : public pending_diagnostic_subclass<dump_path_diagnostic>\n     return warning_at\n       (richloc, OPT_Wanalyzer_stale_setjmp_buffer,\n        \"%qs called after enclosing function of %qs has returned\",\n-       \"longjmp\", \"setjmp\");\n+       get_user_facing_name (m_longjmp_call),\n+       get_user_facing_name (m_setjmp_call));\n   }\n \n   const char *get_kind () const FINAL OVERRIDE\n@@ -1143,10 +1144,10 @@ class stale_jmp_buf : public pending_diagnostic_subclass<dump_path_diagnostic>\n   const gcall *m_longjmp_call;\n };\n \n-/* Handle LONGJMP_CALL, a call to \"longjmp\".\n+/* Handle LONGJMP_CALL, a call to longjmp or siglongjmp.\n \n-   Attempt to locate where \"setjmp\" was called on the jmp_buf and build an\n-   exploded_node and exploded_edge to it representing a rewind to that frame,\n+   Attempt to locate where setjmp/sigsetjmp was called on the jmp_buf and build\n+   an exploded_node and exploded_edge to it representing a rewind to that frame,\n    handling the various kinds of failure that can occur.  */\n \n void\n@@ -1174,9 +1175,9 @@ exploded_node::on_longjmp (exploded_graph &eg,\n \n   const setjmp_record tmp_setjmp_record = setjmp_sval->get_setjmp_record ();\n \n-  /* Build a custom enode and eedge for rewinding from the longjmp\n-     call back to the setjmp.  */\n-  rewind_info_t rewind_info (tmp_setjmp_record);\n+  /* Build a custom enode and eedge for rewinding from the longjmp/siglongjmp\n+     call back to the setjmp/sigsetjmp.  */\n+  rewind_info_t rewind_info (tmp_setjmp_record, longjmp_call);\n \n   const gcall *setjmp_call = rewind_info.get_setjmp_call ();\n   const program_point &setjmp_point = rewind_info.get_setjmp_point ();\n@@ -1217,7 +1218,7 @@ exploded_node::on_longjmp (exploded_graph &eg,\n       exploded_edge *eedge\n \t= eg.add_edge (const_cast<exploded_node *> (this), next, NULL,\n \t\t       change,\n-\t\t       new rewind_info_t (tmp_setjmp_record));\n+\t\t       new rewind_info_t (tmp_setjmp_record, longjmp_call));\n \n       /* For any diagnostics that were queued here (such as leaks) we want\n \t the checker_path to show the rewinding events after the \"final event\"\n@@ -1369,7 +1370,7 @@ rewind_info_t::add_events_to_path (checker_path *emission_path,\n     (new rewind_from_longjmp_event\n      (&eedge, src_point.get_supernode ()->get_end_location (),\n       src_point.get_fndecl (),\n-      src_stack_depth));\n+      src_stack_depth, this));\n   emission_path->add_event\n     (new rewind_to_setjmp_event\n      (&eedge, get_setjmp_call ()->location,"}, {"sha": "a3e758ed7513817a6fd937aaf676695981efb98b", "filename": "gcc/analyzer/exploded-graph.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342e14ffa30e9163a1a75e0a4fb21b6883d58dbe/gcc%2Fanalyzer%2Fexploded-graph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342e14ffa30e9163a1a75e0a4fb21b6883d58dbe/gcc%2Fanalyzer%2Fexploded-graph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fexploded-graph.h?ref=342e14ffa30e9163a1a75e0a4fb21b6883d58dbe", "patch": "@@ -302,13 +302,15 @@ class exploded_edge : public dedge<eg_traits>\n };\n \n /* Extra data for an exploded_edge that represents a rewind from a\n-   longjmp to a setjmp.  */\n+   longjmp to a setjmp (or from a siglongjmp to a sigsetjmp).  */\n \n class rewind_info_t : public exploded_edge::custom_info_t\n {\n public:\n-  rewind_info_t (const setjmp_record &setjmp_record)\n-  : m_setjmp_record (setjmp_record)\n+  rewind_info_t (const setjmp_record &setjmp_record,\n+\t\t const gcall *longjmp_call)\n+  : m_setjmp_record (setjmp_record),\n+    m_longjmp_call (longjmp_call)\n   {}\n \n   void print (pretty_printer *pp) FINAL OVERRIDE\n@@ -339,13 +341,19 @@ class rewind_info_t : public exploded_edge::custom_info_t\n     return m_setjmp_record.m_setjmp_call;\n   }\n \n+  const gcall *get_longjmp_call () const\n+  {\n+    return m_longjmp_call;\n+  }\n+\n   const exploded_node *get_enode_origin () const\n   {\n     return m_setjmp_record.m_enode;\n   }\n \n private:\n   setjmp_record m_setjmp_record;\n+  const gcall *m_longjmp_call;\n };\n \n /* Statistics about aspects of an exploded_graph.  */"}, {"sha": "985f1bd56ac55045f6b19b9d5cf5bea1403222a5", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342e14ffa30e9163a1a75e0a4fb21b6883d58dbe/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342e14ffa30e9163a1a75e0a4fb21b6883d58dbe/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=342e14ffa30e9163a1a75e0a4fb21b6883d58dbe", "patch": "@@ -4480,11 +4480,11 @@ region_model::on_return (const greturn *return_stmt, region_model_context *ctxt)\n     set_value (get_lvalue (lhs, ctxt), get_rvalue (rhs, ctxt), ctxt);\n }\n \n-/* Update this model for a call and return of \"setjmp\" at CALL within ENODE,\n-   using CTXT to report any diagnostics.\n+/* Update this model for a call and return of setjmp/sigsetjmp at CALL within\n+   ENODE, using CTXT to report any diagnostics.\n \n-   This is for the initial direct invocation of setjmp (which returns 0),\n-   as opposed to any second return due to longjmp.  */\n+   This is for the initial direct invocation of setjmp/sigsetjmp (which returns\n+   0), as opposed to any second return due to longjmp/sigsetjmp.  */\n \n void\n region_model::on_setjmp (const gcall *call, const exploded_node *enode,"}, {"sha": "70e3eb4c716fe3383d9c60a2d4fc40a592d2a72b", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342e14ffa30e9163a1a75e0a4fb21b6883d58dbe/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342e14ffa30e9163a1a75e0a4fb21b6883d58dbe/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=342e14ffa30e9163a1a75e0a4fb21b6883d58dbe", "patch": "@@ -718,8 +718,8 @@ is_a_helper <poisoned_svalue *>::test (svalue *sval)\n \n namespace ana {\n \n-/* A bundle of information recording a setjmp call, corresponding roughly\n-   to a jmp_buf.  */\n+/* A bundle of information recording a setjmp/sigsetjmp call, corresponding\n+   roughly to a jmp_buf.  */\n \n struct setjmp_record\n {\n@@ -739,8 +739,9 @@ struct setjmp_record\n   const gcall *m_setjmp_call;\n };\n \n-/* Concrete subclass of svalue representing setjmp buffers, so that\n-   longjmp can potentially \"return\" to an entirely different function.  */\n+/* Concrete subclass of svalue representing buffers for setjmp/sigsetjmp,\n+   so that longjmp/siglongjmp can potentially \"return\" to an entirely\n+   different function.  */\n \n class setjmp_svalue : public svalue\n {"}, {"sha": "e8928777fd9ec1f5eeba8a8564568a479467a633", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342e14ffa30e9163a1a75e0a4fb21b6883d58dbe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342e14ffa30e9163a1a75e0a4fb21b6883d58dbe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=342e14ffa30e9163a1a75e0a4fb21b6883d58dbe", "patch": "@@ -1,3 +1,8 @@\n+2020-01-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/sigsetjmp-5.c: New test.\n+\t* gcc.dg/analyzer/sigsetjmp-6.c: New test.\n+\n 2020-01-27  Richard Biener  <rguenther@suse.de>\n \n \tPR testsuite/91171"}, {"sha": "68afe9d1c9761bd833a3e2cc44553335fdf77e27", "filename": "gcc/testsuite/gcc.dg/analyzer/sigsetjmp-5.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342e14ffa30e9163a1a75e0a4fb21b6883d58dbe/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsigsetjmp-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342e14ffa30e9163a1a75e0a4fb21b6883d58dbe/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsigsetjmp-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsigsetjmp-5.c?ref=342e14ffa30e9163a1a75e0a4fb21b6883d58dbe", "patch": "@@ -0,0 +1,19 @@\n+#include <setjmp.h>\n+#include <stddef.h>\n+#include \"analyzer-decls.h\"\n+\n+static jmp_buf env;\n+\n+static void inner (void)\n+{\n+  sigsetjmp (env, 0); /* { dg-message \"'sigsetjmp' called here\" } */\n+}\n+\n+void outer (void)\n+{\n+  int i;\n+\n+  inner ();\n+\n+  siglongjmp (env, 42); /* { dg-warning \"'siglongjmp' called after enclosing function of 'sigsetjmp' has returned\" } */\n+}"}, {"sha": "fcd9d0bbb47f41720a3cdec4abc4ae6c1a332fc1", "filename": "gcc/testsuite/gcc.dg/analyzer/sigsetjmp-6.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342e14ffa30e9163a1a75e0a4fb21b6883d58dbe/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsigsetjmp-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342e14ffa30e9163a1a75e0a4fb21b6883d58dbe/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsigsetjmp-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsigsetjmp-6.c?ref=342e14ffa30e9163a1a75e0a4fb21b6883d58dbe", "patch": "@@ -0,0 +1,35 @@\n+#include <setjmp.h>\n+#include <stddef.h>\n+#include <stdlib.h>\n+\n+extern int foo (int) __attribute__ ((__pure__));\n+\n+static jmp_buf env;\n+\n+static void inner (void)\n+{\n+  void *ptr = malloc (1024); /* { dg-message \"allocated here\" }  */\n+\n+  siglongjmp (env, 1); /* { dg-warning \"leak of 'ptr'\" \"warning\" } */\n+  /* { dg-message \"rewinding from 'siglongjmp' in 'inner'\" \" event: rewind from\" { target *-*-* } .-1 } */\n+\n+  free (ptr);\n+}\n+\n+void outer (void)\n+{\n+  int i;\n+\n+  foo (0);\n+\n+  i = sigsetjmp(env, 0); /* { dg-message \"'sigsetjmp' called here\" \"event: sigsetjmp call\" } */\n+  /* { dg-message \"to 'sigsetjmp' in 'outer'\" \"event: rewind to\"  { target *-*-* } .-1 } */\n+\n+  if (i == 0)\n+    {\n+      foo (1);\n+      inner ();\n+    }\n+\n+  foo (3);\n+}"}]}