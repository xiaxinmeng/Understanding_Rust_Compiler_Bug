{"sha": "3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NkMjExYWY5OTg5Y2EzM2YwOGM5ZDlkN2MyOWJhN2NiMjA4YjY0NQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2017-05-24T22:07:21Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2017-05-24T22:07:21Z"}, "message": "PR c/80731 - poor -Woverflow warnings\n\ngcc/c-family/ChangeLog:\n\n\tPR c/80731\n\t* c-common.h (unsafe_conversion_p): Add a function argument.\n\t* c-common.c (unsafe_conversion_p): Same.\n\tAdd type names and values to diagnostics.\n\t(scalar_to_vector): Adjust.\n\t* c-warn.c (constant_expression_error): Add a function argument.\n\tAdd type names and values to diagnostics.\n\t(conversion_warning): Add a function argument.\n\tAdd type names and values to diagnostics.\n\t(warnings_for_convert_and_check): Same.\n\ngcc/c/ChangeLog:\n\n\tPR c/80731\n\t* c-fold.c (c_fully_fold_internal): Adjust.\n\t* c-typeck.c (parser_build_unary_op): Adjust.\n\ngcc/cp/ChangeLog:\n\n\tPR c/80731\n\t* call.c (fully_fold_internal): Adjust.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c/80731\n\t* c-c++-common/Wfloat-conversion.c: Adjust.\n\t* c-c++-common/dfp/convert-int-saturate.c: Same.\n\t* c-c++-common/pr68657-1.c: Same.\n\t* g++.dg/ext/utf-cvt.C: Same.\n\t* g++.dg/ext/utf16-4.C: Same.\n\t* g++.dg/warn/Wconversion-real-integer-3.C: Same.\n\t* g++.dg/warn/Wconversion-real-integer2.C: Same.\n\t* g++.dg/warn/Wconversion3.C: Same.\n\t* g++.dg/warn/Wconversion4.C: Same.\n\t* g++.dg/warn/Wsign-conversion.C: Same.\n\t* g++.dg/warn/overflow-warn-1.C: Same.\n\t* g++.dg/warn/overflow-warn-3.C: Same.\n\t* g++.dg/warn/overflow-warn-4.C: Same.\n\t* g++.dg/warn/pr35635.C: Same.\n\t* g++.old-deja/g++.mike/enum1.C: Same.\n\t* gcc.dg/Wconversion-3.c: Same.\n\t* gcc.dg/Wconversion-5.c: Same.\n\t* gcc.dg/Wconversion-complex-c99.c: Same.\n\t* gcc.dg/Wconversion-complex-gnu.c: Same.\n\t* gcc.dg/Wconversion-integer.c: Same.\n\t* gcc.dg/Wsign-conversion.c: Same.\n\t* gcc.dg/bitfld-2.c: Same.\n\t* gcc.dg/c90-const-expr-11.c: Same.\n\t* gcc.dg/c90-const-expr-7.c: Same.\n\t* gcc.dg/c99-const-expr-7.c: Same.\n\t* gcc.dg/overflow-warn-1.c: Same.\n\t* gcc.dg/overflow-warn-2.c: Same.\n\t* gcc.dg/overflow-warn-3.c: Same.\n\t* gcc.dg/overflow-warn-4.c: Same.\n\t* gcc.dg/overflow-warn-5.c: Same.\n\t* gcc.dg/overflow-warn-8.c: Same.\n\t* gcc.dg/overflow-warn-9.c: New test.\n\t* gcc.dg/pr35635.c: Adjust.\n\t* gcc.dg/pr59940.c: Same.\n\t* gcc.dg/pr59963-2.c: Same.\n\t* gcc.dg/pr60114.c: Same.\n\t* gcc.dg/switch-warn-2.c: Same.\n\t* gcc.dg/utf-cvt.c: Same.\n\t* gcc.dg/utf16-4.c: Same.\n\nFrom-SVN: r248431", "tree": {"sha": "65c34bbc585e40c4958be3f1fc9ddbc5624dd312", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65c34bbc585e40c4958be3f1fc9ddbc5624dd312"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ab4db9379e5096a04c4c68b9edfef9c938cf3b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ab4db9379e5096a04c4c68b9edfef9c938cf3b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ab4db9379e5096a04c4c68b9edfef9c938cf3b5"}], "stats": {"total": 889, "additions": 568, "deletions": 321}, "files": [{"sha": "83c000baabd6db9d98ab5ede005173ca96beb5d4", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -1,3 +1,16 @@\n+2017-05-24  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/80731\n+\t* c-common.h (unsafe_conversion_p): Add a function argument.\n+\t* c-common.c (unsafe_conversion_p): Same.\n+\tAdd type names and values to diagnostics.\n+\t(scalar_to_vector): Adjust.\n+\t* c-warn.c (constant_expression_error): Add a function argument.\n+\tAdd type names and values to diagnostics.\n+\t(conversion_warning): Add a function argument.\n+\tAdd type names and values to diagnostics.\n+\t(warnings_for_convert_and_check): Same.\n+\n 2017-05-19  Jason Merrill  <jason@redhat.com>\n \n \t* c-warn.c (match_case_to_enum_1): Don't warn about enums with no"}, {"sha": "708fbe519196b57b80bfe311ff7a431bafcf6c9d", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 42, "deletions": 13, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -1227,16 +1227,24 @@ int_safely_convertible_to_real_p (const_tree from_type, const_tree to_type)\n    can return SAFE_CONVERSION (zero) in that case.  Function can produce\n    signedness warnings if PRODUCE_WARNS is true.\n \n+   RESULT, when non-null is the result of the conversion.  When constant\n+   it is included in the text of diagnostics.\n+\n    Function allows conversions from complex constants to non-complex types,\n    provided that imaginary part is zero and real part can be safely converted\n    to TYPE.  */\n \n enum conversion_safety\n-unsafe_conversion_p (location_t loc, tree type, tree expr, bool produce_warns)\n+unsafe_conversion_p (location_t loc, tree type, tree expr, tree result,\n+\t\t     bool produce_warns)\n {\n   enum conversion_safety give_warning = SAFE_CONVERSION; /* is 0 or false */\n   tree expr_type = TREE_TYPE (expr);\n-  loc = expansion_point_location_if_in_system_header (loc);\n+\n+  bool cstresult = (result\n+\t\t    && TREE_CODE_CLASS (TREE_CODE (result)) == tcc_constant);\n+\n+    loc = expansion_point_location_if_in_system_header (loc);\n \n   if (TREE_CODE (expr) == REAL_CST || TREE_CODE (expr) == INTEGER_CST)\n     {\n@@ -1262,14 +1270,31 @@ unsafe_conversion_p (location_t loc, tree type, tree expr, bool produce_warns)\n \t      && tree_int_cst_sgn (expr) < 0)\n \t    {\n \t      if (produce_warns)\n-\t\twarning_at (loc, OPT_Wsign_conversion, \"negative integer\"\n-\t\t\t    \" implicitly converted to unsigned type\");\n+\t\t{\n+\t\t  if (cstresult)\n+\t\t    warning_at (loc, OPT_Wsign_conversion,\n+\t\t\t\t\"unsigned conversion from %qT to %qT \"\n+\t\t\t\t\"changes value from %qE to %qE\",\n+\t\t\t\texpr_type, type, expr, result);\n+\t\t  else\n+\t\t    warning_at (loc, OPT_Wsign_conversion,\n+\t\t\t\t\"unsigned conversion from %qT to %qT \"\n+\t\t\t\t\"changes the value of %qE\",\n+\t\t\t\texpr_type, type, expr);\n+\t\t}\n \t    }\n \t  else if (!TYPE_UNSIGNED (type) && TYPE_UNSIGNED (expr_type))\n \t    {\n-\t      if (produce_warns)\n-\t\twarning_at (loc, OPT_Wsign_conversion, \"conversion of unsigned\"\n-\t\t\t    \" constant value to negative integer\");\n+\t      if (cstresult)\n+\t\twarning_at (loc, OPT_Wsign_conversion,\n+\t\t\t    \"signed conversion from %qT to %qT changes \"\n+\t\t\t    \"value from %qE to %qE\",\n+\t\t\t    expr_type, type, expr, result);\n+\t      else\n+\t\twarning_at (loc, OPT_Wsign_conversion,\n+\t\t\t    \"signed conversion from %qT to %qT changes \"\n+\t\t\t    \"the value of %qE\",\n+\t\t\t    expr_type, type, expr);\n \t    }\n \t  else\n \t    give_warning = UNSAFE_OTHER;\n@@ -1308,7 +1333,7 @@ unsafe_conversion_p (location_t loc, tree type, tree expr, bool produce_warns)\n \t   with different type of EXPR, but it is still safe, because when EXPR\n \t   is a constant, it's type is not used in text of generated warnings\n \t   (otherwise they could sound misleading).  */\n-\treturn unsafe_conversion_p (loc, type, TREE_REALPART (expr),\n+\treturn unsafe_conversion_p (loc, type, TREE_REALPART (expr), result,\n \t\t\t\t    produce_warns);\n       /* Conversion from complex constant with non-zero imaginary part.  */\n       else\n@@ -1328,9 +1353,10 @@ unsafe_conversion_p (location_t loc, tree type, tree expr, bool produce_warns)\n \t\t Possible solution: add a separate function for checking\n \t\t constants and combine result of two calls appropriately.  */\n \t      enum conversion_safety re_safety =\n-\t\t  unsafe_conversion_p (loc, type, TREE_REALPART (expr), false);\n+\t\t  unsafe_conversion_p (loc, type, TREE_REALPART (expr),\n+\t\t\t\t       result, false);\n \t      enum conversion_safety im_safety =\n-\t\t  unsafe_conversion_p (loc, type, imag_part, false);\n+\t\tunsafe_conversion_p (loc, type, imag_part, result, false);\n \n \t      /* Merge the results into appropriate single warning.  */\n \n@@ -7654,7 +7680,8 @@ scalar_to_vector (location_t loc, enum tree_code code, tree op0, tree op1,\n \tif (TREE_CODE (type0) == INTEGER_TYPE\n \t    && TREE_CODE (TREE_TYPE (type1)) == INTEGER_TYPE)\n \t  {\n-\t    if (unsafe_conversion_p (loc, TREE_TYPE (type1), op0, false))\n+\t    if (unsafe_conversion_p (loc, TREE_TYPE (type1), op0,\n+\t\t\t\t     NULL_TREE, false))\n \t      {\n \t\tif (complain)\n \t\t  error_at (loc, \"conversion of scalar %qT to vector %qT \"\n@@ -7702,7 +7729,8 @@ scalar_to_vector (location_t loc, enum tree_code code, tree op0, tree op1,\n \tif (TREE_CODE (type0) == INTEGER_TYPE\n \t    && TREE_CODE (TREE_TYPE (type1)) == INTEGER_TYPE)\n \t  {\n-\t    if (unsafe_conversion_p (loc, TREE_TYPE (type1), op0, false))\n+\t    if (unsafe_conversion_p (loc, TREE_TYPE (type1), op0,\n+\t\t\t\t     NULL_TREE, false))\n \t      {\n \t\tif (complain)\n \t\t  error_at (loc, \"conversion of scalar %qT to vector %qT \"\n@@ -7717,7 +7745,8 @@ scalar_to_vector (location_t loc, enum tree_code code, tree op0, tree op1,\n \t\t     || TREE_CODE (type0) == INTEGER_TYPE)\n \t\t && SCALAR_FLOAT_TYPE_P (TREE_TYPE (type1)))\n \t  {\n-\t    if (unsafe_conversion_p (loc, TREE_TYPE (type1), op0, false))\n+\t    if (unsafe_conversion_p (loc, TREE_TYPE (type1), op0,\n+\t\t\t\t     NULL_TREE, false))\n \t      {\n \t\tif (complain)\n \t\t  error_at (loc, \"conversion of scalar %qT to vector %qT \""}, {"sha": "79072e6a8b74be883f9794a27996e9210cafc605", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -832,7 +832,7 @@ extern tree c_common_signed_type (tree);\n extern tree c_common_signed_or_unsigned_type (int, tree);\n extern void c_common_init_ts (void);\n extern tree c_build_bitfield_integer_type (unsigned HOST_WIDE_INT, int);\n-extern enum conversion_safety unsafe_conversion_p (location_t, tree, tree,\n+extern enum conversion_safety unsafe_conversion_p (location_t, tree, tree, tree,\n \t\t\t\t\t\t   bool);\n extern bool decl_with_nonnull_addr_p (const_tree);\n extern tree c_fully_fold (tree, bool, bool *);\n@@ -1483,7 +1483,7 @@ extern bool cilk_recognize_spawn (tree, tree *);\n /* In c-warn.c.  */\n extern void constant_expression_warning (tree);\n extern void constant_expression_error (tree);\n-extern void overflow_warning (location_t, tree);\n+extern void overflow_warning (location_t, tree, tree = NULL_TREE);\n extern void warn_logical_operator (location_t, enum tree_code, tree,\n \t\t\t\t   enum tree_code, tree, enum tree_code, tree);\n extern void warn_tautological_cmp (location_t, enum tree_code, tree, tree);"}, {"sha": "012675bf6e9ae88d1d6797f7400e79d2b8b885ef", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 141, "deletions": 53, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -63,8 +63,9 @@ constant_expression_error (tree value)\n     error (\"overflow in constant expression\");\n }\n \n-/* Print a warning if an expression had overflow in folding and its\n-   operands hadn't.\n+/* Print a warning if an expression result VALUE had an overflow\n+   in folding and its operands hadn't.  EXPR, which may be null, is\n+   the operand of the expression.\n \n    Invoke this function on every expression that\n    (1) appears in the source code, and\n@@ -75,42 +76,74 @@ constant_expression_error (tree value)\n    already overflowed.  */\n \n void\n-overflow_warning (location_t loc, tree value)\n+overflow_warning (location_t loc, tree value, tree expr)\n {\n   if (c_inhibit_evaluation_warnings != 0)\n     return;\n \n+  const char *warnfmt = NULL;\n+\n   switch (TREE_CODE (value))\n     {\n     case INTEGER_CST:\n-      warning_at (loc, OPT_Woverflow, \"integer overflow in expression\");\n+      warnfmt = (expr\n+\t\t ? G_(\"integer overflow in expression %qE of type %qT \"\n+\t\t      \"results in %qE\")\n+\t\t : G_(\"integer overflow in expression of type %qT \"\n+\t\t      \"results in %qE\"));\n       break;\n \n     case REAL_CST:\n-      warning_at (loc, OPT_Woverflow,\n-\t\t  \"floating point overflow in expression\");\n+      warnfmt = (expr\n+\t\t ? G_ (\"floating point overflow in expression %qE \"\n+\t\t       \"of type %qT results in %qE\")\n+\t\t : G_ (\"floating point overflow in expression of type %qT \"\n+\t\t       \"results in %qE\"));\n       break;\n \n     case FIXED_CST:\n-      warning_at (loc, OPT_Woverflow, \"fixed-point overflow in expression\");\n+      warnfmt = (expr\n+\t\t ? G_(\"fixed-point overflow in expression %qE of type %qT \"\n+\t\t      \"results in %qE\")\n+\t\t : G_(\"fixed-point overflow in expression of type %qT \"\n+\t\t      \"results in %qE\"));\n       break;\n \n     case VECTOR_CST:\n-      warning_at (loc, OPT_Woverflow, \"vector overflow in expression\");\n+      warnfmt = (expr\n+\t\t ? G_(\"vector overflow in expression %qE of type %qT \"\n+\t\t      \"results in %qE\")\n+\t\t : G_(\"vector overflow in expression of type %qT \"\n+\t\t      \"results in %qE\"));\n       break;\n \n     case COMPLEX_CST:\n       if (TREE_CODE (TREE_REALPART (value)) == INTEGER_CST)\n-\twarning_at (loc, OPT_Woverflow,\n-\t\t    \"complex integer overflow in expression\");\n+\twarnfmt = (expr\n+\t\t   ? G_(\"complex integer overflow in expression %qE \"\n+\t\t\t\"of type %qT results in %qE\")\n+\t\t   : G_(\"complex integer overflow in expression of type %qT \"\n+\t\t\t\"results in %qE\"));\n       else if (TREE_CODE (TREE_REALPART (value)) == REAL_CST)\n-\twarning_at (loc, OPT_Woverflow,\n-\t\t    \"complex floating point overflow in expression\");\n+\twarnfmt = (expr\n+\t\t   ? G_(\"complex floating point overflow in expression %qE \"\n+\t\t\t\"of type %qT results in %qE\")\n+\t\t   : G_(\"complex floating point overflow in expression \"\n+\t\t\t\"of type %qT results in %qE\"));\n+      else\n+\treturn;\n       break;\n \n     default:\n-      break;\n+      return;\n     }\n+\n+  if (expr)\n+    warning_at (loc, OPT_Woverflow, warnfmt, expr, TREE_TYPE (expr), value);\n+  else\n+    warning_at (loc, OPT_Woverflow, warnfmt, TREE_TYPE (value), value);\n+\n+  TREE_NO_WARNING (value) = 1;\n }\n \n /* Helper function for walk_tree.  Unwrap C_MAYBE_CONST_EXPRs in an expression\n@@ -930,7 +963,7 @@ check_main_parameter_types (tree decl)\n    This is a helper function for warnings_for_convert_and_check.  */\n \n static void\n-conversion_warning (location_t loc, tree type, tree expr)\n+conversion_warning (location_t loc, tree type, tree expr, tree result)\n {\n   tree expr_type = TREE_TYPE (expr);\n   enum conversion_safety conversion_kind;\n@@ -971,43 +1004,49 @@ conversion_warning (location_t loc, tree type, tree expr)\n     case REAL_CST:\n     case INTEGER_CST:\n     case COMPLEX_CST:\n-      conversion_kind = unsafe_conversion_p (loc, type, expr, true);\n-      if (conversion_kind == UNSAFE_REAL)\n-\twarning_at (loc, OPT_Wfloat_conversion,\n-\t\t    \"conversion to %qT alters %qT constant value\",\n-\t\t    type, expr_type);\n-      else if (conversion_kind)\n-\twarning_at (loc, OPT_Wconversion,\n-\t\t    \"conversion to %qT alters %qT constant value\",\n-\t\t    type, expr_type);\n-      return;\n+      {\n+\tconversion_kind = unsafe_conversion_p (loc, type, expr, result, true);\n+\tint warnopt;\n+\tif (conversion_kind == UNSAFE_REAL)\n+\t  warnopt = OPT_Wfloat_conversion;\n+\telse if (conversion_kind)\n+\t  warnopt = OPT_Wconversion;\n+\telse\n+\t  break;\n \n+\tif (TREE_CODE_CLASS (TREE_CODE (result)) == tcc_constant)\n+\t  warning_at (loc, warnopt,\n+\t\t      \"conversion from %qT to %qT changes value from %qE to %qE\",\n+\t\t      expr_type, type, expr, result);\n+\telse\n+\t  warning_at (loc, warnopt,\n+\t\t      \"conversion from %qT to %qT changes the value of %qE\",\n+\t\t      expr_type, type, expr);\n+\tbreak;\n+      }\n     case COND_EXPR:\n-      {\n+\t  {\n \t/* In case of COND_EXPR, we do not care about the type of\n \t   COND_EXPR, only about the conversion of each operand.  */\n \ttree op1 = TREE_OPERAND (expr, 1);\n \ttree op2 = TREE_OPERAND (expr, 2);\n \n-\tconversion_warning (loc, type, op1);\n-\tconversion_warning (loc, type, op2);\n+\tconversion_warning (loc, type, op1, result);\n+\tconversion_warning (loc, type, op2, result);\n \treturn;\n       }\n \n     default: /* 'expr' is not a constant.  */\n-      conversion_kind = unsafe_conversion_p (loc, type, expr, true);\n-      if (conversion_kind == UNSAFE_REAL)\n-\twarning_at (loc, OPT_Wfloat_conversion,\n-\t\t    \"conversion to %qT from %qT may alter its value\",\n-\t\t    type, expr_type);\n-      else if (conversion_kind == UNSAFE_IMAGINARY)\n-\twarning_at (loc, OPT_Wconversion,\n-\t\t    \"conversion to %qT from %qT discards imaginary component\",\n-\t\t    type, expr_type);\n-      else if (conversion_kind)\n+      conversion_kind = unsafe_conversion_p (loc, type, expr, result, true);\n+      if (conversion_kind == UNSAFE_IMAGINARY)\n \twarning_at (loc, OPT_Wconversion,\n-\t\t    \"conversion to %qT from %qT may alter its value\",\n-\t\t    type, expr_type);\n+\t\t    \"conversion from %qT to to %qT discards imaginary \"\n+\t\t    \"component\",\n+\t\t    expr_type, type);\n+      else if (conversion_kind == UNSAFE_REAL || conversion_kind)\n+\twarning_at (loc, OPT_Wfloat_conversion,\n+\t\t    \"conversion from %qT to %qT may change value\",\n+\t\t    expr_type, type);\n     }\n }\n \n@@ -1021,6 +1060,10 @@ warnings_for_convert_and_check (location_t loc, tree type, tree expr,\n {\n   loc = expansion_point_location_if_in_system_header (loc);\n \n+  bool cst = TREE_CODE_CLASS (TREE_CODE (result)) == tcc_constant;\n+\n+  tree exprtype = TREE_TYPE (expr);\n+\n   if (TREE_CODE (expr) == INTEGER_CST\n       && (TREE_CODE (type) == INTEGER_TYPE\n \t  || TREE_CODE (type) == ENUMERAL_TYPE)\n@@ -1036,31 +1079,76 @@ warnings_for_convert_and_check (location_t loc, tree type, tree expr,\n \t  /* This detects cases like converting -129 or 256 to\n \t     unsigned char.  */\n \t  if (!int_fits_type_p (expr, c_common_signed_type (type)))\n-\t    warning_at (loc, OPT_Woverflow,\n-\t\t\t\"large integer implicitly truncated to unsigned type\");\n+\t    {\n+\t      if (cst)\n+\t\twarning_at (loc, OPT_Woverflow,\n+\t\t\t    (TYPE_UNSIGNED (exprtype)\n+\t\t\t     ? G_(\"conversion from %qT to %qT \"\n+\t\t\t\t  \"changes value from %qE to %qE\")\n+\t\t\t     : G_(\"unsigned conversion from %qT to %qT \"\n+\t\t\t\t  \"changes value from %qE to %qE\")),\n+\t\t\t    exprtype, type, expr, result);\n+\t      else\n+\t\twarning_at (loc, OPT_Woverflow,\n+\t\t\t    (TYPE_UNSIGNED (exprtype)\n+\t\t\t     ? G_(\"conversion from %qT to %qT \"\n+\t\t\t\t  \"changes the value of %qE\")\n+\t\t\t     : G_(\"unsigned conversion from %qT to %qT \"\n+\t\t\t\t  \"changes the value of %qE\")),\n+\t\t\t    exprtype, type, expr);\n+\t    }\n \t  else\n-\t    conversion_warning (loc, type, expr);\n+\t    conversion_warning (loc, type, expr, result);\n \t}\n       else if (!int_fits_type_p (expr, c_common_unsigned_type (type)))\n-\twarning_at (loc, OPT_Woverflow,\n-\t\t \"overflow in implicit constant conversion\");\n+\t{\n+\t  if (cst)\n+\t    warning_at (loc, OPT_Woverflow,\n+\t\t\t\"overflow in conversion from %qT to %qT \"\n+\t\t\t\"changes value from %qE to %qE\",\n+\t\t\texprtype, type, expr, result);\n+\t  else\n+\t    warning_at (loc, OPT_Woverflow,\n+\t\t\t\"overflow in conversion from %qT to %qT \"\n+\t\t\t\"changes the value of %qE\",\n+\t\t\texprtype, type, expr);\n+\t}\n       /* No warning for converting 0x80000000 to int.  */\n       else if (pedantic\n-\t       && (TREE_CODE (TREE_TYPE (expr)) != INTEGER_TYPE\n-\t\t   || TYPE_PRECISION (TREE_TYPE (expr))\n+\t       && (TREE_CODE (exprtype) != INTEGER_TYPE\n+\t\t   || TYPE_PRECISION (exprtype)\n \t\t   != TYPE_PRECISION (type)))\n-\twarning_at (loc, OPT_Woverflow,\n-\t\t    \"overflow in implicit constant conversion\");\n-\n+\t{\n+\t  if (cst)\n+\t    warning_at (loc, OPT_Woverflow,\n+\t\t\t\"overflow in conversion from %qT to %qT \"\n+\t\t\t\"changes value from %qE to %qE\",\n+\t\t\texprtype, type, expr, result);\n+\t  else\n+\t    warning_at (loc, OPT_Woverflow,\n+\t\t\t\"overflow in conversion from %qT to %qT \"\n+\t\t\t\"changes the value of %qE\",\n+\t\t\texprtype, type, expr);\n+\t}\n       else\n-\tconversion_warning (loc, type, expr);\n+\tconversion_warning (loc, type, expr, result);\n     }\n   else if ((TREE_CODE (result) == INTEGER_CST\n \t    || TREE_CODE (result) == FIXED_CST) && TREE_OVERFLOW (result))\n-    warning_at (loc, OPT_Woverflow,\n-\t\t\"overflow in implicit constant conversion\");\n+    {\n+      if (cst)\n+\twarning_at (loc, OPT_Woverflow,\n+\t\t    \"overflow in conversion from %qT to %qT \"\n+\t\t    \"chages value from %qE to %qE\",\n+\t\t    exprtype, type, expr, result);\n+      else\n+\twarning_at (loc, OPT_Woverflow,\n+\t\t    \"overflow in conversion from %qT to %qT \"\n+\t\t    \"chages the value of %qE\",\n+\t\t    exprtype, type, expr);\n+    }\n   else\n-    conversion_warning (loc, type, expr);\n+    conversion_warning (loc, type, expr, result);\n }\n \n /* Subroutines of c_do_switch_warnings, called via splay_tree_foreach."}, {"sha": "d240298d4d8fd42f0efb5d4470a2d7919a412505", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -1,3 +1,9 @@\n+2017-05-24  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/80731\n+\t* c-fold.c (c_fully_fold_internal): Adjust.\n+\t* c-typeck.c (parser_build_unary_op): Adjust.\n+\n 2017-05-23  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* c-parser.c (OACC_KERNELS_CLAUSE_MASK): Add"}, {"sha": "0abc4acc37fb665ec4e839eed8cb70eaeb50e2d0", "filename": "gcc/c/c-fold.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Fc%2Fc-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Fc%2Fc-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-fold.c?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -307,7 +307,7 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n       if (TREE_OVERFLOW_P (ret)\n \t  && !TREE_OVERFLOW_P (op0)\n \t  && !TREE_OVERFLOW_P (op1))\n-\toverflow_warning (EXPR_LOC_OR_LOC (expr, input_location), ret);\n+\toverflow_warning (EXPR_LOC_OR_LOC (expr, input_location), ret, expr);\n       if (code == LSHIFT_EXPR\n \t  && TREE_CODE (orig_op0) != INTEGER_CST\n \t  && TREE_CODE (TREE_TYPE (orig_op0)) == INTEGER_TYPE\n@@ -428,7 +428,7 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n \n \tdefault:\n \t  if (TREE_OVERFLOW_P (ret) && !TREE_OVERFLOW_P (op0))\n-\t    overflow_warning (EXPR_LOCATION (expr), ret);\n+\t    overflow_warning (EXPR_LOCATION (expr), ret, op0);\n \t  break;\n \t}\n       goto out;"}, {"sha": "95a607a1e76fa813e090123d763c7fe24d1ba28e", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -3588,7 +3588,7 @@ parser_build_unary_op (location_t loc, enum tree_code code, struct c_expr arg)\n       result.value = build_unary_op (loc, code, arg.value, false);\n \n       if (TREE_OVERFLOW_P (result.value) && !TREE_OVERFLOW_P (arg.value))\n-\toverflow_warning (loc, result.value);\n+\toverflow_warning (loc, result.value, arg.value);\n     }\n \n   /* We are typically called when parsing a prefix token at LOC acting on"}, {"sha": "f2828f8d7eb6181a3d1d2a492dafd94b3ba55107", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -1,3 +1,8 @@\n+2017-05-24  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/80731\n+\t* call.c (fully_fold_internal): Adjust.\n+\n 2017-05-24  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-tree.h (ovl_skip_hidden): Declare."}, {"sha": "6b13d6e4cd8a9d407bd9e8adbf733bfa12681552", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -4814,14 +4814,14 @@ build_conditional_expr_1 (location_t loc, tree arg1, tree arg2, tree arg3,\n \t     but the warnings (like Wsign-conversion) have already been\n \t     given by the scalar build_conditional_expr_1. We still check\n \t     unsafe_conversion_p to forbid truncating long long -> float.  */\n-\t  if (unsafe_conversion_p (loc, stype, arg2, false))\n+\t  if (unsafe_conversion_p (loc, stype, arg2, NULL_TREE, false))\n \t    {\n \t      if (complain & tf_error)\n \t\terror_at (loc, \"conversion of scalar %qT to vector %qT \"\n \t\t\t       \"involves truncation\", arg2_type, vtype);\n \t      return error_mark_node;\n \t    }\n-\t  if (unsafe_conversion_p (loc, stype, arg3, false))\n+\t  if (unsafe_conversion_p (loc, stype, arg3, NULL_TREE, false))\n \t    {\n \t      if (complain & tf_error)\n \t\terror_at (loc, \"conversion of scalar %qT to vector %qT \""}, {"sha": "003dfa1b2d7bad337723668f7eed57205a33cb78", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -1,3 +1,46 @@\n+2017-05-24  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/80731\n+\t* c-c++-common/Wfloat-conversion.c: Adjust.\n+\t* c-c++-common/dfp/convert-int-saturate.c: Same.\n+\t* c-c++-common/pr68657-1.c: Same.\n+\t* g++.dg/ext/utf-cvt.C: Same.\n+\t* g++.dg/ext/utf16-4.C: Same.\n+\t* g++.dg/warn/Wconversion-real-integer-3.C: Same.\n+\t* g++.dg/warn/Wconversion-real-integer2.C: Same.\n+\t* g++.dg/warn/Wconversion3.C: Same.\n+\t* g++.dg/warn/Wconversion4.C: Same.\n+\t* g++.dg/warn/Wsign-conversion.C: Same.\n+\t* g++.dg/warn/overflow-warn-1.C: Same.\n+\t* g++.dg/warn/overflow-warn-3.C: Same.\n+\t* g++.dg/warn/overflow-warn-4.C: Same.\n+\t* g++.dg/warn/pr35635.C: Same.\n+\t* g++.old-deja/g++.mike/enum1.C: Same.\n+\t* gcc.dg/Wconversion-3.c: Same.\n+\t* gcc.dg/Wconversion-5.c: Same.\n+\t* gcc.dg/Wconversion-complex-c99.c: Same.\n+\t* gcc.dg/Wconversion-complex-gnu.c: Same.\n+\t* gcc.dg/Wconversion-integer.c: Same.\n+\t* gcc.dg/Wsign-conversion.c: Same.\n+\t* gcc.dg/bitfld-2.c: Same.\n+\t* gcc.dg/c90-const-expr-11.c: Same.\n+\t* gcc.dg/c90-const-expr-7.c: Same.\n+\t* gcc.dg/c99-const-expr-7.c: Same.\n+\t* gcc.dg/overflow-warn-1.c: Same.\n+\t* gcc.dg/overflow-warn-2.c: Same.\n+\t* gcc.dg/overflow-warn-3.c: Same.\n+\t* gcc.dg/overflow-warn-4.c: Same.\n+\t* gcc.dg/overflow-warn-5.c: Same.\n+\t* gcc.dg/overflow-warn-8.c: Same.\n+\t* gcc.dg/overflow-warn-9.c: New test.\n+\t* gcc.dg/pr35635.c: Adjust.\n+\t* gcc.dg/pr59940.c: Same.\n+\t* gcc.dg/pr59963-2.c: Same.\n+\t* gcc.dg/pr60114.c: Same.\n+\t* gcc.dg/switch-warn-2.c: Same.\n+\t* gcc.dg/utf-cvt.c: Same.\n+\t* gcc.dg/utf16-4.c: Same.\n+\n 2017-05-24  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.dg/ext/integer-pack2.C: Require int32 effective target."}, {"sha": "e9899bce12b19340aaf364681932c3bfc6deeeef", "filename": "gcc/testsuite/c-c++-common/Wfloat-conversion.c", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWfloat-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWfloat-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWfloat-conversion.c?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -29,30 +29,30 @@ void h (void)\n   double d = 0;\n   long double ld = 0;\n \n-  ffloat (3.1); /* { dg-warning \"conversion to 'float' alters 'double' constant value\" } */\n-  vfloat = 3.1; /* { dg-warning \"conversion to 'float' alters 'double' constant value\" } */\n-  ffloat (3.1L); /* { dg-warning \"conversion to 'float' alters 'long double' constant value\" } */\n-  vfloat = 3.1L;  /* { dg-warning \"conversion to 'float' alters 'long double' constant value\" } */\n-  fdouble (3.1L); /* { dg-warning \"conversion to 'double' alters 'long double' constant value\" \"\" { target large_long_double } } */\n-  vdouble = 3.1L; /* { dg-warning \"conversion to 'double' alters 'long double' constant value\" \"\" { target large_long_double } } */\n-  ffloat (vdouble); /* { dg-warning \"conversion to 'float' from 'double' may alter its value\" } */\n-  vfloat = vdouble; /* { dg-warning \"conversion to 'float' from 'double' may alter its value\" } */\n-  ffloat (vlongdouble); /* { dg-warning \"conversion to 'float' from 'long double' may alter its value\" } */\n-  vfloat = vlongdouble; /* { dg-warning \"conversion to 'float' from 'long double' may alter its value\" } */\n-  fdouble (vlongdouble); /* { dg-warning \"conversion to 'double' from 'long double' may alter its value\" \"\" { target large_long_double } } */\n-  vdouble = vlongdouble; /* { dg-warning \"conversion to 'double' from 'long double' may alter its value\" \"\" { target large_long_double } } */\n+  ffloat (3.1); /* { dg-warning \"conversion from .double. to .float. changes value\" } */\n+  vfloat = 3.1; /* { dg-warning \"conversion from .double. to .float. changes value\" } */\n+  ffloat (3.1L); /* { dg-warning \"conversion from .long double. to .float. changes value\" } */\n+  vfloat = 3.1L;  /* { dg-warning \"conversion from .long double. to .float. changes value\" } */\n+  fdouble (3.1L); /* { dg-warning \"conversion from .long double. to .double. changes value\" \"\" { target large_long_double } } */\n+  vdouble = 3.1L; /* { dg-warning \"conversion from .long double. to .double. changes value\" \"\" { target large_long_double } } */\n+  ffloat (vdouble); /* { dg-warning \"conversion from .double. to .float. may change value\" } */\n+  vfloat = vdouble; /* { dg-warning \"conversion from .double. to .float. may change value\" } */\n+  ffloat (vlongdouble); /* { dg-warning \"conversion from .long double. to .float. may change value\" } */\n+  vfloat = vlongdouble; /* { dg-warning \"conversion from .long double. to .float. may change value\" } */\n+  fdouble (vlongdouble); /* { dg-warning \"conversion from .long double. to .double. may change value\" } */\n+  vdouble = vlongdouble; /* { dg-warning \"conversion from .long double. to .double. may change value\" } */\n \n-  fsi (3.1f); /* { dg-warning \"conversion to 'int' alters 'float' constant value\" } */\n-  si = 3.1f; /* { dg-warning \"conversion to 'int' alters 'float' constant value\" } */\n-  fsi (3.1);  /* { dg-warning \"conversion to 'int' alters 'double' constant value\" } */\n-  si = 3.1;  /* { dg-warning \"conversion to 'int' alters 'double' constant value\" } */\n-  fsi (d);    /* { dg-warning \"conversion to 'int' from 'double' may alter its value\" } */\n-  si = d;    /* { dg-warning \"conversion to 'int' from 'double' may alter its value\" } */\n-  ffloat (INT_MAX);  /* { dg-warning \"conversion to 'float' alters 'int' constant value\" } */\n-  vfloat = INT_MAX;  /* { dg-warning \"conversion to 'float' alters 'int' constant value\" } */\n-  ffloat (16777217); /* { dg-warning \"conversion to 'float' alters 'int' constant value\" } */\n-  vfloat = 16777217; /* { dg-warning \"conversion to 'float' alters 'int' constant value\" } */\n+  fsi (3.1f); /* { dg-warning \"conversion from .float. to .int. changes value\" } */\n+  si = 3.1f; /* { dg-warning \"conversion from .float. to .int. changes value\" } */\n+  fsi (3.1);  /* { dg-warning \"conversion from .double. to .int. changes value\" } */\n+  si = 3.1;  /* { dg-warning \"conversion from .double. to .int. changes value\" } */\n+  fsi (d);    /* { dg-warning \"conversion from .double. to .int. may change value\" } */\n+  si = d;    /* { dg-warning \"conversion from .double. to .int. may change value\" } */\n+  ffloat (INT_MAX);  /* { dg-warning \"conversion from .int. to .float. changes value\" } */\n+  vfloat = INT_MAX;  /* { dg-warning \"conversion from .int. to .float. changes value\" } */\n+  ffloat (16777217); /* { dg-warning \"conversion from .int. to .float. changes value from .16777217.\" } */\n+  vfloat = 16777217; /* { dg-warning \"conversion from .int. to .float. changes value from .16777217.\" } */\n \n-  sc = bar != 0 ? 2.1 : 10; /* { dg-warning \"conversion to 'signed char' alters 'double' constant value\" } */\n-  uc = bar != 0 ? 2.1 : 10; /* { dg-warning \"conversion to 'unsigned char' alters 'double' constant value\" } */\n+  sc = bar != 0 ? 2.1 : 10; /* { dg-warning \"conversion from .double. to .signed char. changes the value of .2\\.1\" } */\n+  uc = bar != 0 ? 2.1 : 10; /* { dg-warning \"conversion from .double. to .unsigned char. changes the value of .2\\.1\" } */\n }"}, {"sha": "2d01f99468bfb47f4e36dc4fd2bfe59d32f3e28e", "filename": "gcc/testsuite/c-c++-common/dfp/convert-int-saturate.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdfp%2Fconvert-int-saturate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdfp%2Fconvert-int-saturate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdfp%2Fconvert-int-saturate.c?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -23,40 +23,40 @@ main ()\n {\n \n   /* Unsigned.  */\n-  usi = DEC32_MAX;  /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  usi = DEC32_MAX;  /* { dg-warning \"overflow in conversion\" } */\n   if (usi != UINT_MAX)\n     FAILURE\n \n-  usi = DEC64_MAX;  /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  usi = DEC64_MAX;  /* { dg-warning \"overflow in conversion\" } */\n   if (usi != UINT_MAX)\n     FAILURE\n \n-  usi = DEC128_MAX; /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  usi = DEC128_MAX; /* { dg-warning \"overflow in conversion\" } */\n   if (usi != UINT_MAX)\n     FAILURE\n \n   /* Signed.  */\n-  si = DEC32_MAX;\t/* { dg-warning \"overflow in implicit constant conversion\" } */\n+  si = DEC32_MAX;\t/* { dg-warning \"overflow in conversion\" } */\n   if (si != INT_MAX)\n     FAILURE\n \n-  si = DEC64_MAX;   /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  si = DEC64_MAX;   /* { dg-warning \"overflow in conversion\" } */\n   if (si != INT_MAX)\n     FAILURE\n \n-  si = DEC128_MAX;  /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  si = DEC128_MAX;  /* { dg-warning \"overflow in conversion\" } */\n   if (si != INT_MAX)\n     FAILURE\n \n-  si = - DEC32_MAX; /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  si = - DEC32_MAX; /* { dg-warning \"overflow in conversion\" } */\n   if (si != INT_MIN)\n     FAILURE\n \n-  si = - DEC64_MAX; /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  si = - DEC64_MAX; /* { dg-warning \"overflow in conversion\" } */\n   if (si != INT_MIN)\n     FAILURE\n \n-  si = - DEC128_MAX; /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  si = - DEC128_MAX; /* { dg-warning \"overflow in conversion\" } */\n   if (si != INT_MIN)\n     FAILURE\n "}, {"sha": "7b62b72e42d924e75136a6934cb2a665d1ba14c2", "filename": "gcc/testsuite/c-c++-common/pr68657-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr68657-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr68657-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr68657-1.c?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -5,14 +5,14 @@\n void\n f1 (void)\n {\n-  unsigned int a = -5;\t/* { dg-error \"negative integer implicitly converted to unsigned type\" } */\n+  unsigned int a = -5;\t/* { dg-error \"unsigned conversion from .int. to .unsigned int. changes value from .-5. to .\\[0-9\\]+.\" } */\n   (void) a;\n }\n \n int\n f2 (void)\n {\n-  return 3.1f;\t/* { dg-error \"conversion to 'int' alters 'float' constant value\" } */\n+  return 3.1f;\t/* { dg-error \"conversion from .float. to .int. changes value\" } */\n }\n \n int f3 (char *);"}, {"sha": "929b7c713039b9ff9830afe012c9eb3277a91417", "filename": "gcc/testsuite/g++.dg/ext/utf-cvt.C", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-cvt.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-cvt.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-cvt.C?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -21,9 +21,9 @@ extern void full (unsigned long long);\n \n void m(char16_t c0, char32_t c1)\n {\n-    f_c (c0);\t/* { dg-warning \"alter its value\" } */\n-    fsc (c0);\t/* { dg-warning \"alter its value\" } */\n-    fuc (c0);\t/* { dg-warning \"alter its value\" } */\n+    f_c (c0);\t/* { dg-warning \"conversion from .char16_t. to .char. may change value\" } */\n+    fsc (c0);\t/* { dg-warning \"change value\" } */\n+    fuc (c0);\t/* { dg-warning \"change value\" } */\n     f_s (c0);\t/* { dg-warning \"change the sign\" } */\n     fss (c0);\t/* { dg-warning \"change the sign\" } */\n     fus (c0);\n@@ -37,12 +37,12 @@ void m(char16_t c0, char32_t c1)\n     fsll (c0);\n     full (c0);\n \n-    f_c (c1);\t/* { dg-warning \"alter its value\" } */\n-    fsc (c1);\t/* { dg-warning \"alter its value\" } */\n-    fuc (c1);\t/* { dg-warning \"alter its value\" } */\n-    f_s (c1);\t/* { dg-warning \"alter its value\" } */\n-    fss (c1);\t/* { dg-warning \"alter its value\" } */\n-    fus (c1);\t/* { dg-warning \"alter its value\" } */\n+    f_c (c1);\t/* { dg-warning \"change value\" } */\n+    fsc (c1);\t/* { dg-warning \"change value\" } */\n+    fuc (c1);\t/* { dg-warning \"change value\" } */\n+    f_s (c1);\t/* { dg-warning \"change value\" } */\n+    fss (c1);\t/* { dg-warning \"change value\" } */\n+    fus (c1);\t/* { dg-warning \"change value\" } */\n     f_i (c1);\t/* { dg-warning \"change the sign\" } */\n     fsi (c1);\t/* { dg-warning \"change the sign\" } */\n     fui (c1);"}, {"sha": "2c4377cea5d08d57e9c9cbbfb2f4af89149da684", "filename": "gcc/testsuite/g++.dg/ext/utf16-4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf16-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf16-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf16-4.C?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -10,9 +10,9 @@ const static char16_t\tc2 = u'\\U00064321';\t/* { dg-warning \"constant too long\" }\n const static char16_t\tc3 = 'a';\n const static char16_t\tc4 = U'a';\n const static char16_t\tc5 = U'\\u2029';\n-const static char16_t\tc6 = U'\\U00064321';\t/* { dg-warning \"implicitly truncated\" } */\n+const static char16_t\tc6 = U'\\U00064321';\t/* { dg-warning \"conversion from .char32_t. to .char16_t. changes value from .410401. to .17185.\" } */\n const static char16_t\tc7 = L'a';\n const static char16_t\tc8 = L'\\u2029';\n-const static char16_t\tc9 = L'\\U00064321';\t/* { dg-warning \"implicitly truncated\" \"\" { target { 4byte_wchar_t } } } */\n+const static char16_t\tc9 = L'\\U00064321';\t/* { dg-warning \"unsigned conversion from .wchar_t. to .char16_t. changes value from .410401. to .17185.\" \"\" { target { 4byte_wchar_t } } } */\n \t\t\t\t\t\t/* { dg-warning \"constant too long\" \"\" { target { ! 4byte_wchar_t } } .-1 } */\n int main () {}"}, {"sha": "8b7574dbbc8c8a9e538c7a1713af074f7d67dd47", "filename": "gcc/testsuite/g++.dg/warn/Wconversion-real-integer-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-real-integer-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-real-integer-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-real-integer-3.C?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -16,5 +16,5 @@ void h (void)\n     // the locus that inside the source code here, at the relevant\n     // line below, even with -ftrack-macro-expansion.  We don't want\n     // it to point to the any locus that is inside the system header.\n-    vfloat = INT_MAX; // { dg-warning \"conversion to .float. alters .int. constant value\" }\n+    vfloat = INT_MAX; // { dg-warning \"conversion from .int. to .float. changes value from .2147483647. to \" }\n }"}, {"sha": "7386525ae84e2e76272d9db247c4f0a0d6c16e3c", "filename": "gcc/testsuite/g++.dg/warn/Wconversion-real-integer2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-real-integer2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-real-integer2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-real-integer2.C?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -23,7 +23,7 @@\n //\n // That is more useful.\n \n-#define INT_MAX __INT_MAX__ // { dg-warning \"17: conversion to .float. alters .int. constant value\" }\n+#define INT_MAX __INT_MAX__ // { dg-warning \"17: conversion from 'int' to 'float' changes value from .2147483647. to \" }\n \n float  vfloat;\n "}, {"sha": "71604f9a8e65de0c13ba8685d9483e4847278d0e", "filename": "gcc/testsuite/g++.dg/warn/Wconversion3.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion3.C?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -19,9 +19,9 @@ void test1 (void)\n   unsigned char f = (int) uc;\n   signed char g = (int) sc;\n   unsigned char h = (unsigned int) (short int) uc;\n-  signed char i = (int) (unsigned short int) sc;\t// { dg-warning \"may alter its value\" }\n-  unsigned char j = (unsigned int) (short int) us;\t// { dg-warning \"may alter its value\" }\n-  signed char k = (int) (unsigned short int) ss;\t// { dg-warning \"may alter its value\" }\n+  signed char i = (int) (unsigned short int) sc;\t// { dg-warning \"may change value\" }\n+  unsigned char j = (unsigned int) (short int) us;\t// { dg-warning \"may change value\" }\n+  signed char k = (int) (unsigned short int) ss;\t// { dg-warning \"may change value\" }\n }\n \n void test2 (void)"}, {"sha": "d1e0f4ad4edff173129545e96758217a49be5eb5", "filename": "gcc/testsuite/g++.dg/warn/Wconversion4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion4.C?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -7,7 +7,7 @@ class Test\n {\n   void eval()\n   {\n-    foo(bar());  // { dg-warning \"may alter its value\" }\n+    foo(bar());  // { dg-warning \"may change value\" }\n   }\n \n   unsigned int bar() const"}, {"sha": "3fa71226b4892d156ddaf5e5cccd6d04149bba62", "filename": "gcc/testsuite/g++.dg/warn/Wsign-conversion.C", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsign-conversion.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsign-conversion.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsign-conversion.C?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -40,26 +40,26 @@ void h (int x)\n   fuc ('A');\n   uc = 'A';\n \n-  uc = x ? 1U : -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  uc = x ? SCHAR_MIN : 1U;  /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  uc = x ? 1 : -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  uc = x ? SCHAR_MIN : 1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = x ? 1U : -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = x ? INT_MIN : 1U; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = ui ? SCHAR_MIN : 1U; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = 1U * -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = ui + INT_MIN; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = x ? 1 : -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = ui ? SCHAR_MIN : 1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  uc = x ? 1U : -1; /* { dg-warning \"unsigned conversion\" } */\n+  uc = x ? SCHAR_MIN : 1U;  /* { dg-warning \"unsigned conversion\" } */\n+  uc = x ? 1 : -1; /* { dg-warning \"unsigned conversion\" } */\n+  uc = x ? SCHAR_MIN : 1; /* { dg-warning \"unsigned conversion\" } */\n+  ui = x ? 1U : -1; /* { dg-warning \"unsigned conversion\" } */\n+  ui = x ? INT_MIN : 1U; /* { dg-warning \"unsigned conversion\" } */\n+  ui = ui ? SCHAR_MIN : 1U; /* { dg-warning \"unsigned conversion\" } */\n+  ui = 1U * -1; /* { dg-warning \"unsigned conversion\" } */\n+  ui = ui + INT_MIN; /* { dg-warning \"unsigned conversion\" } */\n+  ui = x ? 1 : -1; /* { dg-warning \"unsigned conversion\" } */\n+  ui = ui ? SCHAR_MIN : 1; /* { dg-warning \"unsigned conversion\" } */\n \n-  fuc (-1); /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  uc = -1;  /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  fui (-1); /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  fuc ('\\xa0'); /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  uc = '\\xa0'; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  fui ('\\xa0');/* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = '\\xa0'; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  fuc (-1); /* { dg-warning \"unsigned conversion\" } */\n+  uc = -1;  /* { dg-warning \"unsigned conversion\" } */\n+  fui (-1); /* { dg-warning \"unsigned conversion\" } */\n+  ui = -1; /* { dg-warning \"unsigned conversion\" } */\n+  fuc ('\\xa0'); /* { dg-warning \"unsigned conversion\" } */\n+  uc = '\\xa0'; /* { dg-warning \"unsigned conversion\" } */\n+  fui ('\\xa0');/* { dg-warning \"unsigned conversion\" } */\n+  ui = '\\xa0'; /* { dg-warning \"unsigned conversion\" } */\n   fsi (0x80000000); /* { dg-warning \"conversion\" } */\n   si = 0x80000000;  /* { dg-warning \"conversion\" } */\n \n@@ -91,5 +91,5 @@ void h (int x)\n   ui = sc;  /* { dg-warning \"conversion\" } */\n }\n \n-unsigned fui (unsigned a) { return a + -1; } /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+unsigned fui (unsigned a) { return a + -1; } /* { dg-warning \"unsigned conversion\" } */\n "}, {"sha": "9177373a9391f0cae45d6f42b0bee6627184bc44", "filename": "gcc/testsuite/g++.dg/warn/overflow-warn-1.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-1.C?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -102,14 +102,14 @@ void\n h2 (void)\n {\n   fsc (SCHAR_MAX + 1);\n-  fsc (SCHAR_MIN - 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  fsc (SCHAR_MIN - 1); /* { dg-warning \"overflow in conversion from .int. to .signed char. changes value\" } */\n   fsc (UCHAR_MAX);\n-  fsc (UCHAR_MAX + 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  fsc (UCHAR_MAX + 1); /* { dg-warning \"overflow in conversion from .int. to .signed char. changes value\" } */\n   fuc (-1);\n-  fuc (UCHAR_MAX + 1); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n+  fuc (UCHAR_MAX + 1); /* { dg-warning \"unsigned conversion from .int. to .unsigned char. changes value\" } */\n   fuc (SCHAR_MIN);\n-  fuc (SCHAR_MIN - 1); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n-  fuc (-UCHAR_MAX); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n+  fuc (SCHAR_MIN - 1); /* { dg-warning \"unsigned conversion from .int. to .unsigned char. changes value\" } */\n+  fuc (-UCHAR_MAX); /* { dg-warning \"unsigned conversion from .int. to .unsigned char. changes value\" } */\n }\n \n void fui (unsigned int);"}, {"sha": "91afd01e09b6d3b5aab1eb1f296410d925de1e60", "filename": "gcc/testsuite/g++.dg/warn/overflow-warn-3.C", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-3.C?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -100,15 +100,15 @@ void fsc (signed char);\n void\n h2 (void)\n {\n-  fsc (SCHAR_MAX + 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n-  fsc (SCHAR_MIN - 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n-  fsc (UCHAR_MAX); /* { dg-warning \"overflow in implicit constant conversion\" } */\n-  fsc (UCHAR_MAX + 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  fsc (SCHAR_MAX + 1); /* { dg-warning \"overflow in conversion from .int. to .signed char. changes value\" } */\n+  fsc (SCHAR_MIN - 1); /* { dg-warning \"overflow in conversion from .int. to .signed char. changes value\" } */\n+  fsc (UCHAR_MAX); /* { dg-warning \"overflow in conversion from .int. to .signed char. changes value\" } */\n+  fsc (UCHAR_MAX + 1); /* { dg-warning \"overflow in conversion from .int. to .signed char. changes value\" } */\n   fuc (-1);\n-  fuc (UCHAR_MAX + 1); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n+  fuc (UCHAR_MAX + 1); /* { dg-warning \"unsigned conversion from .int. to .unsigned char. changes value\" } */\n   fuc (SCHAR_MIN);\n-  fuc (SCHAR_MIN - 1); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n-  fuc (-UCHAR_MAX); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n+  fuc (SCHAR_MIN - 1); /* { dg-warning \"unsigned conversion from .int. to .unsigned char. changes value\" } */\n+  fuc (-UCHAR_MAX); /* { dg-warning \"unsigned conversion from .int. to .unsigned char. changes value\" } */\n }\n \n void fui (unsigned int);"}, {"sha": "3f0bf1f72403ecd6b514d7b1af918014bd3d801b", "filename": "gcc/testsuite/g++.dg/warn/overflow-warn-4.C", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-4.C?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -103,15 +103,15 @@ void fsc (signed char);\n void\n h2 (void)\n {\n-  fsc (SCHAR_MAX + 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n-  fsc (SCHAR_MIN - 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n-  fsc (UCHAR_MAX); /* { dg-warning \"overflow in implicit constant conversion\" } */\n-  fsc (UCHAR_MAX + 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  fsc (SCHAR_MAX + 1); /* { dg-warning \"overflow in conversion\" } */\n+  fsc (SCHAR_MIN - 1); /* { dg-warning \"overflow in conversion\" } */\n+  fsc (UCHAR_MAX); /* { dg-warning \"overflow in conversion\" } */\n+  fsc (UCHAR_MAX + 1); /* { dg-warning \"overflow in conversion\" } */\n   fuc (-1);\n-  fuc (UCHAR_MAX + 1); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n+  fuc (UCHAR_MAX + 1); /* { dg-warning \"unsigned conversion from .int. to .unsigned char. changes value\" } */\n   fuc (SCHAR_MIN);\n-  fuc (SCHAR_MIN - 1); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n-  fuc (-UCHAR_MAX); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n+  fuc (SCHAR_MIN - 1); /* { dg-warning \"unsigned conversion\" } */\n+  fuc (-UCHAR_MAX); /* { dg-warning \"unsigned conversion\" } */\n }\n \n void fui (unsigned int);"}, {"sha": "628c0502a9c43ba346ab2e2d1a5ba36ca4a20caa", "filename": "gcc/testsuite/g++.dg/warn/pr35635.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr35635.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr35635.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr35635.C?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -63,7 +63,7 @@ void func3()\n      warn.  */\n   uchar_x = bar != 0 ? 2.1 : 10; /* { dg-warning \"conversion\" } */\n   uchar_x = bar != 0\n-    ? (unsigned char) 1024 /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+    ? (unsigned char) 1024 /* { dg-warning \"unsigned conversion from .int. to .unsigned char. changes the value of .-1.\" } */\n     : -1;\n }\n "}, {"sha": "2f7a6dd438abf2cc5c2c15e5dd14093c35c72bed", "filename": "gcc/testsuite/g++.old-deja/g++.mike/enum1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fenum1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fenum1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fenum1.C?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -8,4 +8,4 @@ struct Type {\n   void setBTK();\n };\n \n-void Type::setBTK() { kind = DTK; } // { dg-warning \"truncate\" }\n+void Type::setBTK() { kind = DTK; } // { dg-warning \"conversion from '\\[^\\n\\r]+' to .unsigned char:1. changes value from\" }"}, {"sha": "d102d169d02987126f8d12b45c4c79d238427a79", "filename": "gcc/testsuite/gcc.dg/Wconversion-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-3.c?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -Wconversion\" } */\n \n-unsigned f(unsigned a) { return a + -1; }  /* { dg-warning \"negative\" } */\n+unsigned f(unsigned a) { return a + -1; }  /* { dg-warning \"conversion\" } */\n "}, {"sha": "e54fe1a8ace49d0c24523b7049f22812f72fb1be", "filename": "gcc/testsuite/gcc.dg/Wconversion-5.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-5.c?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -19,9 +19,9 @@ void test1 (void)\n   unsigned char f = (int) uc;\n   signed char g = (int) sc;\n   unsigned char h = (unsigned int) (short int) uc;\n-  signed char i = (int) (unsigned short int) sc;\t/* { dg-warning \"may alter its value\" \"\" { target { int32plus } } } */\n-  unsigned char j = (unsigned int) (short int) us;\t/* { dg-warning \"may alter its value\" } */\n-  signed char k = (int) (unsigned short int) ss;\t/* { dg-warning \"may alter its value\" } */\n+  signed char i = (int) (unsigned short int) sc;\t/* { dg-warning \"conversion from .int. to .signed char. may change value\" \"\" { target { int32plus } } } */\n+  unsigned char j = (unsigned int) (short int) us;\t/* { dg-warning \"may change value\" } */\n+  signed char k = (int) (unsigned short int) ss;\t/* { dg-warning \"may change value\" } */\n }\n \n void test2 (void)"}, {"sha": "bc7439de85b1214815fda0c55d686905d1b14d93", "filename": "gcc/testsuite/gcc.dg/Wconversion-complex-c99.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-complex-c99.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-complex-c99.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-complex-c99.c?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -63,10 +63,10 @@ var_complex_narrowing (void)\n   double _Complex doublec = 0.;\n \n   vdoublec = floatc;\n-  vfloatc = doublec; /* { dg-warning \"float-conversion\" } */\n+  vfloatc = doublec; /* { dg-warning \"conversion from .complex double. to .complex float. may change value\" } */\n \n   fdoublec (floatc);\n-  ffloatc (doublec); /* { dg-warning \"float-conversion\" } */\n+  ffloatc (doublec); /* { dg-warning \"conversion from .complex double. to .complex float. may change value\" } */\n }\n \n /* Check implicit conversions of complex values to integers.  */"}, {"sha": "80990cb66045c1bdf9818de650cdd607a51695ad", "filename": "gcc/testsuite/gcc.dg/Wconversion-complex-gnu.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-complex-gnu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-complex-gnu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-complex-gnu.c?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -32,11 +32,11 @@ var_float_to_int (void)\n {\n   double _Complex doublec = 0.;\n \n-  fsic (doublec); /* { dg-warning \"float-conversion\" } */\n-  fuic (doublec); /* { dg-warning \"float-conversion\" } */\n+  fsic (doublec); /* { dg-warning \"conversion\" } */\n+  fuic (doublec); /* { dg-warning \"conversion\" } */\n \n-  vsic = doublec; /* { dg-warning \"float-conversion\" } */\n-  vuic = doublec; /* { dg-warning \"float-conversion\" } */\n+  vsic = doublec; /* { dg-warning \"conversion\" } */\n+  vuic = doublec; /* { dg-warning \"conversion\" } */\n }\n \n /* Check implicit conversions of integer complex-domain values to integer\n@@ -75,9 +75,9 @@ const_float_to_int (void)\n   vsic = 1. - 1.i;\n   vuic = 1. + 1.i;\n \n-  fsic (0.5 + 0.i); /* { dg-warning \"float-conversion\" } */\n-  vsic = 0.5 + 0.i; /* { dg-warning \"float-conversion\" } */\n-  fuic (0.5 + 0.i); /* { dg-warning \"float-conversion\" } */\n+  fsic (0.5 + 0.i); /* { dg-warning \"conversion\" } */\n+  vsic = 0.5 + 0.i; /* { dg-warning \"conversion\" } */\n+  fuic (0.5 + 0.i); /* { dg-warning \"conversion\" } */\n }\n \n /* Check implicit conversions of integer complex-domain constants to integer\n@@ -96,8 +96,8 @@ const_complex_int_to_real_int (void)\n   fui (UINT_MAX + 1ull + 0i); /* { dg-warning \"conversion\" } */\n   vui = UINT_MAX + 1ull + 0i; /* { dg-warning \"conversion\" } */\n \n-  ffloat (UINT_MAX + 0i); /* { dg-warning \"float-conversion\" } */\n-  vfloat = UINT_MAX + 0i; /* { dg-warning \"float-conversion\" } */\n+  ffloat (UINT_MAX + 0i); /* { dg-warning \"conversion\" } */\n+  vfloat = UINT_MAX + 0i; /* { dg-warning \"conversion\" } */\n }\n \n void\n@@ -116,12 +116,12 @@ const_complex_int_narrowing (void)\n   vuic = (UINT_MAX + 1ull) + 1i; /* { dg-warning \"conversion\" } */\n   vuic = (UINT_MAX + 1ull) + (UINT_MAX + 1ull) * 1i; /* { dg-warning \"conversion\" } */\n \n-  ffloatc (UINT_MAX * 1i); /* { dg-warning \"float-conversion\" } */\n-  ffloatc (UINT_MAX + 1i); /* { dg-warning \"float-conversion\" } */\n-  ffloatc (UINT_MAX + UINT_MAX * 1i); /* { dg-warning \"float-conversion\" } */\n+  ffloatc (UINT_MAX * 1i); /* { dg-warning \"conversion\" } */\n+  ffloatc (UINT_MAX + 1i); /* { dg-warning \"conversion\" } */\n+  ffloatc (UINT_MAX + UINT_MAX * 1i); /* { dg-warning \"conversion\" } */\n \n-  vfloatc = UINT_MAX * 1i; /* { dg-warning \"float-conversion\" } */\n-  vfloatc = UINT_MAX + 1i; /* { dg-warning \"float-conversion\" } */\n-  vfloatc = UINT_MAX + UINT_MAX * 1i; /* { dg-warning \"float-conversion\" } */\n+  vfloatc = UINT_MAX * 1i; /* { dg-warning \"conversion\" } */\n+  vfloatc = UINT_MAX + 1i; /* { dg-warning \"conversion\" } */\n+  vfloatc = UINT_MAX + UINT_MAX * 1i; /* { dg-warning \"conversion\" } */\n }\n "}, {"sha": "cf7745cf83752dbe48dcf19a100f349c769f5231", "filename": "gcc/testsuite/gcc.dg/Wconversion-integer.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-integer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-integer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-integer.c?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -40,28 +40,28 @@ void h (int x)\n   fuc ('A');\n   uc = 'A';\n \n-  uc = x ? 1U : -1; /* { dg-warning \" conversion\" \"conversion\" } */\n-  /* { dg-warning \"negative integer implicitly converted to unsigned type\" \"implicit\" { target *-*-* } .-1 } */\n-  uc = x ? SCHAR_MIN : 1U; /* { dg-warning \" conversion\" \"conversion\" } */\n-  /* { dg-warning \"negative integer implicitly converted to unsigned type\" \"implicit\" { target *-*-* } .-1 } */\n-  uc = x ? 1 : -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  uc = x ? SCHAR_MIN : 1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = x ? 1U : -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = x ? INT_MIN : 1U; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = ui ? SCHAR_MIN : 1U; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = 1U * -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = ui + INT_MIN; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = x ? 1 : -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = ui ? SCHAR_MIN : 1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  uc = x ? 1U : -1; /* { dg-warning \"conversion from .unsigned int. to .unsigned char.\" } */\n+  /* { dg-warning \"unsigned conversion\" \"implicit\" { target *-*-* } .-1 } */\n+  uc = x ? SCHAR_MIN : 1U; /* { dg-warning \"unsigned conversion\" } */\n+  /* { dg-warning \"conversion from .unsigned int. to .unsigned char.\" \"implicit\" { target *-*-* } .-1 } */\n+  uc = x ? 1 : -1; /* { dg-warning \"signed conversion\" } */\n+  uc = x ? SCHAR_MIN : 1; /* { dg-warning \"signed conversion\" } */\n+  ui = x ? 1U : -1; /* { dg-warning \"signed conversion\" } */\n+  ui = x ? INT_MIN : 1U; /* { dg-warning \"signed conversion\" } */\n+  ui = ui ? SCHAR_MIN : 1U; /* { dg-warning \"signed conversion\" } */\n+  ui = 1U * -1; /* { dg-warning \"signed conversion\" } */\n+  ui = ui + INT_MIN; /* { dg-warning \"signed conversion\" } */\n+  ui = x ? 1 : -1; /* { dg-warning \"signed conversion\" } */\n+  ui = ui ? SCHAR_MIN : 1; /* { dg-warning \"signed conversion\" } */\n \n-  fuc (-1); /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  uc = -1;  /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  fui (-1); /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  fuc ('\\xa0'); /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  uc = '\\xa0'; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  fui ('\\xa0');/* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = '\\xa0'; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  fuc (-1); /* { dg-warning \"signed conversion\" } */\n+  uc = -1;  /* { dg-warning \"signed conversion\" } */\n+  fui (-1); /* { dg-warning \"signed conversion\" } */\n+  ui = -1; /* { dg-warning \"signed conversion\" } */\n+  fuc ('\\xa0'); /* { dg-warning \"signed conversion\" } */\n+  uc = '\\xa0'; /* { dg-warning \"signed conversion\" } */\n+  fui ('\\xa0');/* { dg-warning \"signed conversion\" } */\n+  ui = '\\xa0'; /* { dg-warning \"signed conversion\" } */\n   fsi (0x80000000); /* { dg-warning \"conversion\" } */\n   si = 0x80000000;  /* { dg-warning \"conversion\" } */\n \n@@ -93,6 +93,6 @@ void h (int x)\n   ui = sc;  /* { dg-warning \"conversion\" } */\n }\n \n-unsigned fui (unsigned a) { return a + -1; } /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+unsigned fui (unsigned a) { return a + -1; } /* { dg-warning \"signed conversion\" } */\n \n "}, {"sha": "bda61eb8bbf8d97973a549c5d81e201bc6fdff5b", "filename": "gcc/testsuite/gcc.dg/Wsign-conversion.c", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2FWsign-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2FWsign-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWsign-conversion.c?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -40,28 +40,28 @@ void h (int x)\n   fuc ('A');\n   uc = 'A';\n \n-  uc = x ? 1U : -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  uc = x ? SCHAR_MIN : 1U;  /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  uc = x ? 1 : -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  uc = x ? SCHAR_MIN : 1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = x ? 1U : -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = x ? INT_MIN : 1U; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = ui ? SCHAR_MIN : 1U; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = 1U * -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = ui + INT_MIN; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = x ? 1 : -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = ui ? SCHAR_MIN : 1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  uc = x ? 1U : -1; /* { dg-warning \"unsigned conversion from .int. to .unsigned int. changes value from .-1. to .\\[0-9\\]+.\" } */\n+  uc = x ? SCHAR_MIN : 1U;  /* { dg-warning \"unsigned conversion from .int. to .unsigned int. changes value from .-\\[0-9\\]+. to .\\[0-9\\]+.\" } */\n+  uc = x ? 1 : -1; /* { dg-warning \"unsigned conversion from .int. to .unsigned char. changes the value of .-1.\" } */\n+  uc = x ? SCHAR_MIN : 1; /* { dg-warning \"unsigned conversion from .int. to .unsigned char. changes the value of .-\\[0-9\\]+.\" } */\n+  ui = x ? 1U : -1; /* { dg-warning \"unsigned conversion from .int. to .unsigned int. changes value from .-1. to .\\[0-9\\]+.\" } */\n+  ui = x ? INT_MIN : 1U; /* { dg-warning \"unsigned conversion from .int. to .unsigned int. changes value from .-\\[0-9\\]+. to .\\[0-9\\]+.\" } */\n+  ui = ui ? SCHAR_MIN : 1U; /* { dg-warning \"unsigned conversion from .int. to .unsigned int. changes value \" } */\n+  ui = 1U * -1; /* { dg-warning \"unsigned conversion from .int. to .unsigned int. changes value \" } */\n+  ui = ui + INT_MIN; /* { dg-warning \"unsigned conversion from .int. to .unsigned int. changes value \" } */\n+  ui = x ? 1 : -1; /* { dg-warning \"unsigned conversion from .int. to .unsigned int. changes the value of .-1.\" } */\n+  ui = ui ? SCHAR_MIN : 1; /* { dg-warning \"unsigned conversion from .int. to .unsigned int. changes the value of \" } */\n \n-  fuc (-1); /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  uc = -1;  /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  fui (-1); /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  fuc ('\\xa0'); /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  uc = '\\xa0'; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  fui ('\\xa0');/* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = '\\xa0'; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  fsi (0x80000000); /* { dg-warning \"conversion\" } */\n-  si = 0x80000000;  /* { dg-warning \"conversion\" } */\n+  fuc (-1); /* { dg-warning \"unsigned conversion\" } */\n+  uc = -1;  /* { dg-warning \"unsigned conversion\" } */\n+  fui (-1); /* { dg-warning \"unsigned conversion\" } */\n+  ui = -1; /* { dg-warning \"unsigned conversion\" } */\n+  fuc ('\\xa0'); /* { dg-warning \"unsigned conversion\" } */\n+  uc = '\\xa0'; /* { dg-warning \"unsigned conversion\" } */\n+  fui ('\\xa0');/* { dg-warning \"unsigned conversion\" } */\n+  ui = '\\xa0'; /* { dg-warning \"unsigned conversion\" } */\n+  fsi (0x80000000); /* { dg-warning \"signed conversion\" } */\n+  si = 0x80000000;  /* { dg-warning \"signed conversion\" } */\n \n \n   fsi (UINT_MAX - 1);  /* { dg-warning \"conversion\" } */\n@@ -85,12 +85,12 @@ void h (int x)\n   uc = sc;  /* { dg-warning \"conversion\" } */\n   fsi (ui); /* { dg-warning \"conversion\" } */\n   si = ui;  /* { dg-warning \"conversion\" } */\n-  fui (si); /* { dg-warning \"conversion\" } */ \n-  ui = si;  /* { dg-warning \"conversion\" } */ \n+  fui (si); /* { dg-warning \"conversion\" } */\n+  ui = si;  /* { dg-warning \"conversion\" } */\n   fui (sc); /* { dg-warning \"conversion\" } */\n   ui = sc;  /* { dg-warning \"conversion\" } */\n }\n \n-unsigned fui (unsigned a) { return a + -1; } /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+unsigned fui (unsigned a) { return a + -1; } /* { dg-warning \"unsigned conversion from .int. to .unsigned int. changes value\" } */\n \n "}, {"sha": "92cf2f6cc24394a6942965e8db4aaf92382ca846", "filename": "gcc/testsuite/gcc.dg/bitfld-2.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-2.c?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -11,13 +11,13 @@ struct bf\n   int b: 2;\n };\n \n-struct bf p = {4, 0};\t\t/* { dg-warning \"truncated\" } */\n-struct bf q = {0, 2};\t\t/* { dg-warning \"overflow\" } */\n-struct bf r = {3, -2};\t\t/* { dg-bogus \"(truncated|overflow)\" } */\n+struct bf p = {4, 0};\t\t/* { dg-warning \"unsigned conversion from .int. to 'unsigned char:2' changes value from .4. to .0.\" } */\n+struct bf q = {0, 2};\t\t/* { dg-warning \"overflow in conversion from .int. to .signed char:2. changes value from .2. to .-2.\" } */\n+struct bf r = {3, -2};\t\t/* { dg-bogus \"(trunc|overflow)\" } */\n \n void foo ()\n {\n-  p.a = 4, p.b = 0;\t\t/* { dg-warning \"truncated\" } */\n-  q.a = 0, q.b = 2;\t\t/* { dg-warning \"overflow\" } */\n-  r.a = 3, r.b = -2;\t\t/* { dg-bogus \"(truncated|overflow)\" } */\n+  p.a = 4, p.b = 0;\t\t/* { dg-warning \"unsigned conversion from .int. to .unsigned char:2. changes value from .4. to .0.\" } */\n+  q.a = 0, q.b = 2;\t\t/* { dg-warning \"overflow in conversion from .int. to .signed char:2. changes value from .2. to .-2.\" } */\n+  r.a = 3, r.b = -2;\t\t/* { dg-bogus \"(trunc|overflow)\" } */\n }"}, {"sha": "e4f2aff78743864d914e9e0b3fa826c794c9b0c2", "filename": "gcc/testsuite/gcc.dg/c90-const-expr-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-11.c?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -20,7 +20,7 @@ f (void)\n   /* Overflow.  */\n   struct t b = { INT_MAX + 1 }; /* { dg-warning \"integer overflow in expression\" } */\n   /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n-  struct t c = { DBL_MAX }; /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  struct t c = { DBL_MAX }; /* { dg-warning \"overflow in conversion from .double. to .int. chages value \" } */\n   /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n   /* Bad operator outside sizeof.  */\n   struct s d = { 1 ? 1.0 : atan (a.d) }; /* { dg-error \"is not a constant expression|near initialization\" } */"}, {"sha": "f423b005e20a84c5389b07fddb5d463e7ce3366c", "filename": "gcc/testsuite/gcc.dg/c90-const-expr-7.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-7.c?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -6,10 +6,10 @@\n \n #include <float.h>\n \n-int a = DBL_MAX; /* { dg-warning \"overflow in implicit constant conversion\" } */\n+int a = DBL_MAX; /* { dg-warning \"overflow in conversion\" } */\n /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n int b = (int) DBL_MAX; /* { dg-error \"overflow\" } */\n-unsigned int c = -1.0; /* { dg-warning \"overflow in implicit constant conversion\" } */\n+unsigned int c = -1.0; /* { dg-warning \"overflow in conversion\" } */\n /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n unsigned int d = (unsigned)-1.0; /* { dg-error \"overflow\" } */\n \n@@ -31,5 +31,5 @@ int h1 = (0 ? 0 >> -1: 0);\n \n int i = -1 << 0;\n \n-int j[1] = { DBL_MAX }; /* { dg-warning \"overflow in implicit constant conversion\" } */\n+int j[1] = { DBL_MAX }; /* { dg-warning \"overflow in conversion\" } */\n /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */"}, {"sha": "bf23a4a4173b103646603059466d1a7f83c10229", "filename": "gcc/testsuite/gcc.dg/c99-const-expr-7.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-7.c?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -7,10 +7,10 @@\n #include <float.h>\n #include <limits.h>\n \n-int a = DBL_MAX; /* { dg-warning \"overflow in implicit constant conversion\" } */\n+int a = DBL_MAX; /* { dg-warning \"overflow in conversion\" } */\n /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n int b = (int) DBL_MAX; /* { dg-error \"overflow\" } */\n-unsigned int c = -1.0; /* { dg-warning \"overflow in implicit constant conversion\" } */\n+unsigned int c = -1.0; /* { dg-warning \"overflow in conversion\" } */\n /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n unsigned int d = (unsigned)-1.0; /* { dg-error \"overflow\" } */\n \n@@ -33,7 +33,7 @@ int h1 = (0 ? 0 >> -1: 0);\n int i = -1 << 0;\n /* { dg-error \"constant\" \"constant\" { target *-*-* } .-1 } */\n \n-int j[1] = { DBL_MAX }; /* { dg-warning \"overflow in implicit constant conversion\" } */\n+int j[1] = { DBL_MAX }; /* { dg-warning \"overflow in conversion\" } */\n /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n \n int array[2] = { [0 * (INT_MAX + 1)] = 0 }; /* { dg-warning \"integer overflow in expression\" } */"}, {"sha": "8eb322579cfbdd8559f20a8159f94052a01a0ed1", "filename": "gcc/testsuite/gcc.dg/overflow-warn-1.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-1.c?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -85,14 +85,14 @@ void\n h2 (void)\n {\n   fsc (SCHAR_MAX + 1);\n-  fsc (SCHAR_MIN - 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  fsc (SCHAR_MIN - 1); /* { dg-warning \"overflow in conversion from .int. to .signed char. changes value \" } */\n   fsc (UCHAR_MAX);\n-  fsc (UCHAR_MAX + 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  fsc (UCHAR_MAX + 1); /* { dg-warning \"overflow in conversion from .int. to .signed char. changes value from \" } */\n   fuc (-1);\n-  fuc (UCHAR_MAX + 1); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n+  fuc (UCHAR_MAX + 1); /* { dg-warning \"unsigned conversion from .int. to .unsigned char. changes value \" } */\n   fuc (SCHAR_MIN);\n-  fuc (SCHAR_MIN - 1); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n-  fuc (-UCHAR_MAX); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n+  fuc (SCHAR_MIN - 1); /* { dg-warning \"unsigned conversion from .int. to .unsigned char. changes value \" } */\n+  fuc (-UCHAR_MAX); /* { dg-warning \"unsigned conversion from .int. to .unsigned char. changes value \" } */\n }\n \n void fui (unsigned int);"}, {"sha": "f048d6dae2a45e51b7fae8dc4ae1d1d999cfe4e9", "filename": "gcc/testsuite/gcc.dg/overflow-warn-2.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-2.c?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -86,21 +86,21 @@ h2 (void)\n {\n   fsc (SCHAR_MAX + 1);\n   /* { dg-warning \"passing argument 1 of 'fsc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } .-1 } */\n-  fsc (SCHAR_MIN - 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  fsc (SCHAR_MIN - 1); /* { dg-warning \"overflow in conversion from .int. to .signed char. changes value\" } */\n   /* { dg-warning \"passing argument 1 of 'fsc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } .-1 } */\n   fsc (UCHAR_MAX);\n   /* { dg-warning \"passing argument 1 of 'fsc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } .-1 } */\n-  fsc (UCHAR_MAX + 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  fsc (UCHAR_MAX + 1); /* { dg-warning \"overflow in conversion from 'int' to 'signed char' changes value \" } */\n   /* { dg-warning \"passing argument 1 of 'fsc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } .-1 } */\n   fuc (-1);\n   /* { dg-warning \"passing argument 1 of 'fuc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } .-1 } */\n-  fuc (UCHAR_MAX + 1); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n+  fuc (UCHAR_MAX + 1); /* { dg-warning \"unsigned conversion from .int. to .unsigned char. changes value \" } */\n   /* { dg-warning \"passing argument 1 of 'fuc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } .-1 } */\n   fuc (SCHAR_MIN);\n   /* { dg-warning \"passing argument 1 of 'fuc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } .-1 } */\n-  fuc (SCHAR_MIN - 1); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n+  fuc (SCHAR_MIN - 1); /* { dg-warning \"unsigned conversion from .int. to .unsigned char. changes value \" } */\n   /* { dg-warning \"passing argument 1 of 'fuc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } .-1 } */\n-  fuc (-UCHAR_MAX); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n+  fuc (-UCHAR_MAX); /* { dg-warning \"unsigned conversion from .int. to .unsigned char. changes value\" } */\n   /* { dg-warning \"passing argument 1 of 'fuc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } .-1 } */\n }\n "}, {"sha": "664011e401df68316a6f952469438718d2eeda68", "filename": "gcc/testsuite/gcc.dg/overflow-warn-3.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-3.c?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -91,15 +91,15 @@ void fsc (signed char);\n void\n h2 (void)\n {\n-  fsc (SCHAR_MAX + 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n-  fsc (SCHAR_MIN - 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n-  fsc (UCHAR_MAX); /* { dg-warning \"overflow in implicit constant conversion\" } */\n-  fsc (UCHAR_MAX + 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  fsc (SCHAR_MAX + 1); /* { dg-warning \"overflow in conversion from .int. to .signed char. changes value\" } */\n+  fsc (SCHAR_MIN - 1); /* { dg-warning \"overflow in conversion from .int. to .signed char. changes value\" } */\n+  fsc (UCHAR_MAX); /* { dg-warning \"overflow in conversion from .int. to .signed char. changes value\" } */\n+  fsc (UCHAR_MAX + 1); /* { dg-warning \"overflow in conversion from .int. to .signed char. changes value \" } */\n   fuc (-1);\n-  fuc (UCHAR_MAX + 1); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n+  fuc (UCHAR_MAX + 1); /* { dg-warning \"unsigned conversion from .int. to .unsigned char. changes value\" } */\n   fuc (SCHAR_MIN);\n-  fuc (SCHAR_MIN - 1); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n-  fuc (-UCHAR_MAX); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n+  fuc (SCHAR_MIN - 1); /* { dg-warning \"unsigned conversion from .int. to .unsigned char. changes value\" } */\n+  fuc (-UCHAR_MAX); /* { dg-warning \"unsigned conversion from .int. to .unsigned char. changes value\" } */\n }\n \n void fui (unsigned int);"}, {"sha": "52677ce897a6f1db506191d8058b44c128f9a69c", "filename": "gcc/testsuite/gcc.dg/overflow-warn-4.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-4.c?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -21,7 +21,7 @@ enum e {\n   E5 = INT_MAX + 1, /* { dg-warning \"integer overflow in expression\" } */\n   /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n   /* Again, overflow in evaluated subexpression.  */\n-  E6 = 0 * (INT_MAX + 1), /* { dg-warning \"integer overflow in expression\" } */\n+  E6 = 0 * (INT_MAX + 1), /* { dg-warning \"integer overflow in expression of type .int. results in .-\\[0-9\\]+.\" } */\n   /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n   /* A cast does not constitute overflow in conversion.  */\n   E7 = (char) INT_MAX\n@@ -91,15 +91,15 @@ void fsc (signed char);\n void\n h2 (void)\n {\n-  fsc (SCHAR_MAX + 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n-  fsc (SCHAR_MIN - 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n-  fsc (UCHAR_MAX); /* { dg-warning \"overflow in implicit constant conversion\" } */\n-  fsc (UCHAR_MAX + 1); /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  fsc (SCHAR_MAX + 1); /* { dg-warning \"overflow in conversion from .int. to .signed char. changes value\" } */\n+  fsc (SCHAR_MIN - 1); /* { dg-warning \"overflow in conversion\" } */\n+  fsc (UCHAR_MAX); /* { dg-warning \"overflow in conversion\" } */\n+  fsc (UCHAR_MAX + 1); /* { dg-warning \"overflow in conversion\" } */\n   fuc (-1);\n-  fuc (UCHAR_MAX + 1); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n+  fuc (UCHAR_MAX + 1); /* { dg-warning \"unsigned conversion from .int. to .unsigned char. changes value\" } */\n   fuc (SCHAR_MIN);\n-  fuc (SCHAR_MIN - 1); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n-  fuc (-UCHAR_MAX); /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n+  fuc (SCHAR_MIN - 1); /* { dg-warning \"unsigned conversion\" } */\n+  fuc (-UCHAR_MAX); /* { dg-warning \"unsigned conversion\" } */\n }\n \n void fui (unsigned int);"}, {"sha": "b2c8dc31d9571ab017b00c167696d217634c8347", "filename": "gcc/testsuite/gcc.dg/overflow-warn-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-5.c?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -3,5 +3,5 @@\n /* { dg-options \"-Woverflow\" } */\n \n unsigned char rx_async(unsigned char p) {\n-    return p & 512; /* { dg-warning \"overflow in implicit constant conversion\" } */\n+    return p & 512; /* { dg-warning \"overflow in conversion from .int. to .unsigned char. chages value\" } */\n }"}, {"sha": "ace605517dc2cb919c90f76b408126c09ded3440", "filename": "gcc/testsuite/gcc.dg/overflow-warn-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-8.c?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -7,7 +7,7 @@ void foo (int j)\n   int i3 = 1 + INT_MAX; /* { dg-warning \"integer overflow\" } */\n   int i4 = +1 + INT_MAX; /* { dg-warning \"integer overflow\" } */\n   int i5 = (int)((double)1.0 + INT_MAX);\n-  int i6 = (double)1.0 + INT_MAX; /* { dg-warning \"overflow in implicit constant\" } */\n+  int i6 = (double)1.0 + INT_MAX; /* { dg-warning \"overflow in conversion from .double. to .int. chages value\" } */\n   int i7 = 0 ? (int)(double)1.0 + INT_MAX : 1;\n   int i8 = 1 ? 1 : (int)(double)1.0 + INT_MAX;\n   int i9 = j ? (int)(double)1.0 + INT_MAX : 1; /* { dg-warning \"integer overflow\" } */"}, {"sha": "88d6afb5955fa2811bda6cd8ebea33dfd9ea4aee", "filename": "gcc/testsuite/gcc.dg/overflow-warn-9.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-9.c?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -0,0 +1,64 @@\n+/* PR c/80731 - poor -Woverflow warnings, missing detail\n+   { dg-do compile }\n+   { dg-options \"-Wconversion -Woverflow -Wno-override-init -std=c99\" }\n+   { dg-require-effective-target int32plus } */\n+\n+#include <limits.h>\n+\n+struct Types\n+{\n+  signed char sc;\n+  unsigned char uc;\n+  signed short ss;\n+  unsigned short us;\n+  signed int si;\n+  unsigned int ui;\n+  signed long sl;\n+  unsigned long ul;\n+  signed long long sll;\n+  unsigned long long ull;\n+};\n+\n+const struct Types t1 = {\n+  /* According to 6.3.1.3 of C11:\n+     -2-  Otherwise, if the new type is unsigned, the value is converted\n+\t  by repeatedly adding or subtracting one more than the maximum\n+\t  value that can be represented in the new type until the value\n+\t  is in the range of the new type.\n+\n+     These conversions are diagnosed by -Wsign-conversion and -Wconversion,\n+     respectively, by mentioning \"unsigned conversion\" if the conversion\n+     results in sign change, and just \"conversion\" otherwise, as follows:  */\n+\n+  .uc = SCHAR_MIN,          /* { dg-warning \"unsigned conversion from .int. to .unsigned char. changes value from .-128. to .128.\" } */\n+  .uc = -1,                 /* { dg-warning \"unsigned conversion from .int. to .unsigned char. changes value from .-1. to .255.\" } */\n+\n+  .uc = UCHAR_MAX + 1,      /* { dg-warning \"conversion from 'int' to 'unsigned char' changes value from .256. to .0.\" } */\n+  .uc = UCHAR_MAX * 2,      /* { dg-warning \"conversion from 'int' to 'unsigned char' changes value from .510. to .254.\" } */\n+\n+  /* According to 6.3.1.3 of C11:\n+     -3-  Otherwise, the new type is signed and the value cannot be\n+\t  represented in it; either the result is implementation-defined\n+\t  or an implementation-defined signal is raised.\n+\n+     In GCC such conversions wrap and are diagnosed by mentioning \"overflow\"\n+     if the absolute value of the operand is in excess of the maximum of\n+     the destination of type, and \"conversion\" otherwise, as follows:  */\n+\n+  .sc = SCHAR_MAX + 1,      /* { dg-warning \"conversion from .int. to .signed char. changes value from .128. to .-128.\" } */\n+  .sc = SCHAR_MAX + 2,      /* { dg-warning \"conversion from .int. to .signed char. changes value from .129. to .-127.\" } */\n+  .sc = SCHAR_MAX * 2,      /* { dg-warning \"conversion from .int. to .signed char. changes value from .254. to .-2.\" } */\n+  .sc = SCHAR_MAX * 2 + 3,  /* { dg-warning \"conversion from .int. to .signed char. changes value from .257. to .1.\" } */\n+  .sc = SCHAR_MAX * 3 + 3,  /* { dg-warning \"conversion from .int. to .signed char. changes value from .384. to .-128.\" } */\n+\n+\n+  .ss = SHRT_MAX + 1,       /* { dg-warning \"conversion from 'int' to 'short int' changes value from .32768. to .-32768.\" } */\n+  .us = USHRT_MAX + 1,      /* { dg-warning \"unsigned conversion from .int. to .short unsigned int. changes value from .65536. to .0.\" } */\n+\n+  .si = INT_MAX + 1LU,      /* { dg-warning \"signed conversion from 'long unsigned int. to 'int' changes value from .2147483648. to .-2147483648.\" } */\n+  .ui = UINT_MAX + 1L,      /* { dg-warning \"signed conversion from .long int. to .unsigned int. changes value from .4294967296. to .0.\" } */\n+  .ui = UINT_MAX + 1LU,     /* { dg-warning \"conversion from .long unsigned int. to .unsigned int. changes value from .4294967296. to .0.\" } */\n+\n+  .sl = LONG_MAX + 1LU,     /* { dg-warning \"signed conversion from .long unsigned int. to .long int. changes value from .9223372036854775808. to .-9223372036854775808.\" } */\n+  .ul = ULONG_MAX + 1LU     /* there should be some warning here */\n+};"}, {"sha": "b52354f80a6cad9cfea24a8c849a408547ed7c5e", "filename": "gcc/testsuite/gcc.dg/pr35635.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35635.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35635.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35635.c?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -32,7 +32,7 @@ void func1()\n   /* At least one branch of ? does not fit in the destination, thus\n      warn.  */\n   unsigned_bit.x = bar != 0 ? 2 : 0; /* { dg-warning \"conversion\" } */\n-  unsigned_bit.x = bar != 0 ? 0 : -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  unsigned_bit.x = bar != 0 ? 0 : -1; /* { dg-warning \"-Wsign-conversion\" } */\n }\n \n void func2()\n@@ -62,7 +62,7 @@ void func3()\n   /* At least one branch of ? does not fit in the destination, thus\n      warn.  */\n   uchar_x = bar != 0 ? 2.1 : 10; /* { dg-warning \"conversion\" } */\n-  uchar_x = bar != 0  /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  uchar_x = bar != 0  /* { dg-warning \"-Wsign-conversion\" } */\n     ? (unsigned char) 1024 \n     : -1;\n }"}, {"sha": "cec8d07edd5a8590c99a5dcee319ad47f93965e2", "filename": "gcc/testsuite/gcc.dg/pr59940.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59940.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59940.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59940.c?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -9,13 +9,13 @@ int\n g (void)\n {\n   sitype si = 12;\n-  unsigned int ui = -1; /* { dg-warning \"21:negative integer implicitly converted to unsigned type\" } */\n+  unsigned int ui = -1; /* { dg-warning \"21:-Wsign-conversion\" } */\n   unsigned char uc;\n   ui = si; /* { dg-warning \"8:conversion\" } */\n-  si = 0x80000000; /* { dg-warning \"8:conversion of unsigned constant value to negative integer\" } */\n+  si = 0x80000000; /* { dg-warning \"8:-Wsign-conversion\" } */\n   si = 3.2f; /* { dg-warning \"8:conversion\" } */\n-  uc = 256; /* { dg-warning \"8:large integer implicitly truncated to unsigned type\" } */\n-  si = 0x800000000; /* { dg-warning \"8:overflow in implicit constant conversion\" } */\n+  uc = 256; /* { dg-warning \"8:-Woverflow\" } */\n+  si = 0x800000000; /* { dg-warning \"8:-Woverflow\" } */\n   return f (si) /* { dg-warning \"13:conversion\" } */\n          + f (si); /* { dg-warning \"15:conversion\" } */\n }"}, {"sha": "1c79397317e0812d53ca187a56d9c5642e0e6fbf", "filename": "gcc/testsuite/gcc.dg/pr59963-2.c", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59963-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59963-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59963-2.c?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -1,7 +1,6 @@\n /* PR c/59963 */\n /* { dg-do compile } */\n /* { dg-options \"-Woverflow -Wconversion\" } */\n-/* { dg-require-effective-target int32plus } */\n \n extern void bar (unsigned char);\n extern void bar8 (unsigned char, unsigned char, unsigned char, unsigned char,\n@@ -13,25 +12,25 @@ extern int f (short a, short b);\n int\n g (void)\n {\n-  return f (0xffffffffL, /* { dg-warning \"13:overflow in implicit constant conversion\" } */\n-            0xffffffffL) /* { dg-warning \"13:overflow in implicit constant conversion\" } */\n-\t && f (0xffffffffL, /* { dg-warning \"9:overflow in implicit constant conversion\" } */\n-\t       0xffffffffL); /* { dg-warning \"9:overflow in implicit constant conversion\" } */\n+  return f (0xffffffffL, /* { dg-warning \"13:-Woverflow\" } */\n+\t    0xffffffffL) /* { dg-warning \"13:-Woverflow\" } */\n+\t && f (0xffffffffL, /* { dg-warning \"9:-Woverflow\" } */\n+\t       0xffffffffL); /* { dg-warning \"9:-Woverflow\" } */\n }\n \n void\n foo (int i)\n {\n-  bar (256); /* { dg-warning \"8:large integer implicitly truncated to unsigned type\" } */\n+  bar (256); /* { dg-warning \"8:-Woverflow\" } */\n   bar (6.66f); /* { dg-warning \"8:conversion\" } */\n-  bar8 (-1, /* { dg-warning \"9:negative integer implicitly converted to unsigned type\" } */\n-\t -2, /* { dg-warning \"3:negative integer implicitly converted to unsigned type\" } */\n-\t  -3, /* { dg-warning \"4:negative integer implicitly converted to unsigned type\" } */\n-\t   -4, /* { dg-warning \"5:negative integer implicitly converted to unsigned type\" } */\n-\t    -5, /* { dg-warning \"6:negative integer implicitly converted to unsigned type\" } */\n-\t     -6, /* { dg-warning \"7:negative integer implicitly converted to unsigned type\" } */\n-\t      -7, /* { dg-warning \"8:negative integer implicitly converted to unsigned type\" } */\n-\t       -8); /* { dg-warning \"9:negative integer implicitly converted to unsigned type\" } */\n+  bar8 (-1, /* { dg-warning \"9:-Wsign-conversion\" } */\n+\t -2, /* { dg-warning \"3:-Wsign-conversion\" } */\n+\t  -3, /* { dg-warning \"4:-Wsign-conversion\" } */\n+\t   -4, /* { dg-warning \"5:-Wsign-conversion\" } */\n+\t    -5, /* { dg-warning \"6:-Wsign-conversion\" } */\n+\t     -6, /* { dg-warning \"7:-Wsign-conversion\" } */\n+\t      -7, /* { dg-warning \"8:-Wsign-conversion\" } */\n+\t       -8); /* { dg-warning \"9:-Wsign-conversion\" } */\n   bazu (i, i); /* { dg-warning \"9:conversion\" } */\n-  bazi (0x8, 0x80000000); /* { dg-warning \"14:conversion of unsigned constant value to negative integer\" \"\" { xfail int16 } } */\n+  bazi (0x8, 0x80000000); /* { dg-warning \"14:-Wsign-conversion\" \"\" { xfail int16 } } */\n }"}, {"sha": "0ddbe58a277f3f1a73ca3cca6d57ad7d19a596b5", "filename": "gcc/testsuite/gcc.dg/pr60114.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Fpr60114.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Fpr60114.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr60114.c?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -5,28 +5,28 @@\n \n struct S { int n, u[2]; };\n const signed char z[] = {\n-  [0] = 0x100, /* { dg-warning \"9:overflow in implicit constant conversion\" } */\n-  [2] = 0x101, /* { dg-warning \"9:overflow in implicit constant conversion\" } */\n+  [0] = 0x100, /* { dg-warning \"9:-Woverflow\" } */\n+  [2] = 0x101, /* { dg-warning \"9:-Woverflow\" } */\n };\n int A[] = {\n-            0, 0x80000000, /* { dg-warning \"16:conversion of unsigned constant value to negative integer\" } */\n-            0xA, 0x80000000, /* { dg-warning \"18:conversion of unsigned constant value to negative integer\" } */\n-            0xA, 0xA, 0x80000000 /* { dg-warning \"23:conversion of unsigned constant value to negative integer\" } */\n+\t    0, 0x80000000, /* { dg-warning \"16:-Wsign-conversion\" } */\n+\t    0xA, 0x80000000, /* { dg-warning \"18:-Wsign-conversion\" } */\n+\t    0xA, 0xA, 0x80000000 /* { dg-warning \"23:-Wsign-conversion\" } */\n           };\n-int *p = (int []) { 0x80000000 }; /* { dg-warning \"21:conversion of unsigned constant value to negative integer\" } */\n-union { int k; } u = { .k = 0x80000000 }; /* { dg-warning \"29:conversion of unsigned constant value to negative integer\" } */\n+int *p = (int []) { 0x80000000 }; /* { dg-warning \"21:-Wsign-conversion\" } */\n+union { int k; } u = { .k = 0x80000000 }; /* { dg-warning \"29:-Wsign-conversion\" } */\n typedef int H[];\n void\n foo (void)\n {\n-  signed char a[][3] = { { 0x100, /* { dg-warning \"28:overflow in implicit constant conversion\" } */\n-                    1, 0x100 }, /* { dg-warning \"24:overflow in implicit constant conversion\" } */\n-                  { '\\0', 0x100, '\\0' } /* { dg-warning \"27:overflow in implicit constant conversion\" } */\n+  signed char a[][3] = { { 0x100, /* { dg-warning \"28:-Woverflow\" } */\n+\t            1, 0x100 }, /* { dg-warning \"24:-Woverflow\" } */\n+\t          { '\\0', 0x100, '\\0' } /* { dg-warning \"27:-Woverflow\" } */\n                 };\n-  (const signed char []) { 0x100 }; /* { dg-warning \"28:overflow in implicit constant conversion\" } */\n+  (const signed char []) { 0x100 }; /* { dg-warning \"28:-Woverflow\" } */\n   (const float []) { 1e0, 1e1, 1e100 }; /* { dg-warning \"32:conversion\" } */\n-  struct S s1 = { 0x80000000 }; /* { dg-warning \"19:conversion of unsigned constant value to negative integer\" } */\n-  struct S s2 = { .n = 0x80000000 }; /* { dg-warning \"24:conversion of unsigned constant value to negative integer\" } */\n-  struct S s3 = { .u[1] = 0x80000000 }; /* { dg-warning \"27:conversion of unsigned constant value to negative integer\" } */\n-  H h = { 1, 2, 0x80000000 }; /* { dg-warning \"17:conversion of unsigned constant value to negative integer\" } */\n+  struct S s1 = { 0x80000000 }; /* { dg-warning \"19:-Wsign-conversion\" } */\n+  struct S s2 = { .n = 0x80000000 }; /* { dg-warning \"24:-Wsign-conversion\" } */\n+  struct S s3 = { .u[1] = 0x80000000 }; /* { dg-warning \"27:-Wsign-conversion\" } */\n+  H h = { 1, 2, 0x80000000 }; /* { dg-warning \"17:-Wsign-conversion\" } */\n }"}, {"sha": "76fd982b5757641ec0623c8901a33aaed7721294", "filename": "gcc/testsuite/gcc.dg/switch-warn-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Fswitch-warn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Fswitch-warn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fswitch-warn-2.c?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -10,7 +10,7 @@ foo (unsigned int i)\n {\n   switch (i)\n   {\n-    case 123456123456ULL: /* { dg-warning \"large integer implicitly truncated to unsigned type\" } */\n+    case 123456123456ULL: /* { dg-warning \"conversion from .long long unsigned int. to .unsigned int. changes value\" } */\n       return 0;\n     default:\n       return 3;"}, {"sha": "d9927824e3c753086a0db080f9d7a392f98877e9", "filename": "gcc/testsuite/gcc.dg/utf-cvt.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Futf-cvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Futf-cvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Futf-cvt.c?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -25,9 +25,9 @@ extern void full (unsigned long long);\n \n void m (char16_t c0, char32_t c1)\n {\n-    f_c (c0);\t/* { dg-warning \"alter its value\" } */\n-    fsc (c0);\t/* { dg-warning \"alter its value\" } */\n-    fuc (c0);\t/* { dg-warning \"alter its value\" } */\n+    f_c (c0);\t/* { dg-warning \"conversion from .char16_t\\[^\\n\\r\\]*. to .char. may change value\" } */\n+    fsc (c0);\t/* { dg-warning \"may change value\" } */\n+    fuc (c0);\t/* { dg-warning \"may change value\" } */\n     f_s (c0);\t/* { dg-warning \"change the sign\" } */\n     fss (c0);\t/* { dg-warning \"change the sign\" } */\n     fus (c0);\n@@ -41,12 +41,12 @@ void m (char16_t c0, char32_t c1)\n     fsll (c0);\n     full (c0);\n \n-    f_c (c1);\t/* { dg-warning \"alter its value\" } */\n-    fsc (c1);\t/* { dg-warning \"alter its value\" } */\n-    fuc (c1);\t/* { dg-warning \"alter its value\" } */\n-    f_s (c1);\t/* { dg-warning \"alter its value\" } */\n-    fss (c1);\t/* { dg-warning \"alter its value\" } */\n-    fus (c1);\t/* { dg-warning \"alter its value\" } */\n+    f_c (c1);\t/* { dg-warning \"may change value\" } */\n+    fsc (c1);\t/* { dg-warning \"may change value\" } */\n+    fuc (c1);\t/* { dg-warning \"may change value\" } */\n+    f_s (c1);\t/* { dg-warning \"may change value\" } */\n+    fss (c1);\t/* { dg-warning \"may change value\" } */\n+    fus (c1);\t/* { dg-warning \"may change value\" } */\n     f_i (c1);\t/* { dg-warning \"change the sign\" \"\" { target { ! int16 } } } */\n     fsi (c1);\t/* { dg-warning \"change the sign\" \"\" { target { ! int16 } } } */\n     fui (c1);"}, {"sha": "f9ebd61845a15fc657a2f906d3f684768993df44", "filename": "gcc/testsuite/gcc.dg/utf16-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Futf16-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd211af9989ca33f08c9d9d7c29ba7cb208b645/gcc%2Ftestsuite%2Fgcc.dg%2Futf16-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Futf16-4.c?ref=3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "patch": "@@ -12,10 +12,10 @@ char16_t\tc2 = u'\\U00064321';\t/* { dg-warning \"constant too long\" } */\n char16_t\tc3 = 'a';\n char16_t\tc4 = U'a';\n char16_t\tc5 = U'\\u2029';\n-char16_t\tc6 = U'\\U00064321';\t/* { dg-warning \"implicitly truncated\" } */\n+char16_t\tc6 = U'\\U00064321';\t/* { dg-warning \"conversion from .unsigned int. to .char16_t {aka short unsigned int}. changes value from .410401. to .17185.\" } */\n char16_t\tc7 = L'a';\n char16_t\tc8 = L'\\u2029';\n-char16_t \tc9 = L'\\U00064321';\t/* { dg-warning \"implicitly truncated\" \"\" { target { 4byte_wchar_t } } } */\n+char16_t \tc9 = L'\\U00064321';\t/* { dg-warning \"conversion\" \"\" { target { 4byte_wchar_t } } } */\n \t\t\t\t\t/* { dg-warning \"constant too long\" \"\" { target { ! 4byte_wchar_t } } .-1 } */\n \n int main () {}"}]}