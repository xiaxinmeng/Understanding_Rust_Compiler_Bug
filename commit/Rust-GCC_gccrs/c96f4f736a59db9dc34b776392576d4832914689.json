{"sha": "c96f4f736a59db9dc34b776392576d4832914689", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk2ZjRmNzM2YTU5ZGI5ZGMzNGI3NzYzOTI1NzZkNDgzMjkxNDY4OQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2003-12-20T07:12:39Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2003-12-20T07:12:39Z"}, "message": "re PR c/12085 (Internal compiler error in convert_move, at expr.c:504 with -O3 flag)\n\n\tPR c/12085\n\t* c-typeck.c (build_function_call): Issue a warning if a\n\tfunction is called through an incompatible prototype and\n\treplace the call by a trap in this case.\n\nFrom-SVN: r74874", "tree": {"sha": "58cb78943c2eb8f3ef4c073d23518b703972ec8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58cb78943c2eb8f3ef4c073d23518b703972ec8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c96f4f736a59db9dc34b776392576d4832914689", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c96f4f736a59db9dc34b776392576d4832914689", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c96f4f736a59db9dc34b776392576d4832914689", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c96f4f736a59db9dc34b776392576d4832914689/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bcd11e5e45f59f88d76cd56024e1d7c14a7c4665", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcd11e5e45f59f88d76cd56024e1d7c14a7c4665", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcd11e5e45f59f88d76cd56024e1d7c14a7c4665"}], "stats": {"total": 102, "additions": 102, "deletions": 0}, "files": [{"sha": "a61b4935d39ff57ac404469bd1b3eb44b472351f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c96f4f736a59db9dc34b776392576d4832914689/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c96f4f736a59db9dc34b776392576d4832914689/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c96f4f736a59db9dc34b776392576d4832914689", "patch": "@@ -1,3 +1,10 @@\n+2003-12-20  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR c/12085\n+\t* c-typeck.c (build_function_call): Issue a warning if a\n+\tfunction is called through an incompatible prototype and\n+\treplace the call by a trap in this case.\n+\n 2003-12-19  James E Wilson  <wilson@specifixinc.com>\n \n \t* install.texi (ia64-*-linux): Document minimum libunwind version"}, {"sha": "eee6d5517835fa33d702c0721696b324acb3aa4b", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c96f4f736a59db9dc34b776392576d4832914689/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c96f4f736a59db9dc34b776392576d4832914689/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=c96f4f736a59db9dc34b776392576d4832914689", "patch": "@@ -1645,6 +1645,7 @@ build_function_call (tree function, tree params)\n   tree fntype, fundecl = 0;\n   tree coerced_params;\n   tree name = NULL_TREE, result;\n+  tree tem;\n \n   /* Strip NON_LVALUE_EXPRs, etc., since we aren't using as an lvalue.  */\n   STRIP_TYPE_NOPS (function);\n@@ -1684,6 +1685,47 @@ build_function_call (tree function, tree params)\n   /* fntype now gets the type of function pointed to.  */\n   fntype = TREE_TYPE (fntype);\n \n+  /* Check that the function is called through a compatible prototype.\n+     If it is not, replace the call by a trap, wrapped up in a compound\n+     expression if necessary.  This has the nice side-effect to prevent\n+     the tree-inliner from generating invalid assignment trees which may\n+     blow up in the RTL expander later.\n+\n+     ??? This doesn't work for Objective-C because objc_comptypes\n+     refuses to compare function prototypes, yet the compiler appears\n+     to build calls that are flagged as invalid by C's comptypes.  */\n+  if (! c_dialect_objc ()\n+      && TREE_CODE (function) == NOP_EXPR\n+      && TREE_CODE (tem = TREE_OPERAND (function, 0)) == ADDR_EXPR\n+      && TREE_CODE (tem = TREE_OPERAND (tem, 0)) == FUNCTION_DECL\n+      && ! comptypes (fntype, TREE_TYPE (tem), COMPARE_STRICT))\n+    {\n+      tree return_type = TREE_TYPE (fntype);\n+      tree trap = build_function_call (built_in_decls[BUILT_IN_TRAP],\n+\t\t\t\t       NULL_TREE);\n+\n+      /* This situation leads to run-time undefined behavior.  We can't,\n+\t therefore, simply error unless we can prove that all possible\n+\t executions of the program must execute the code.  */\n+      warning (\"function called through a non-compatible type\");\n+\n+      if (VOID_TYPE_P (return_type))\n+\treturn trap;\n+      else\n+\t{\n+\t  tree rhs;\n+\n+\t  if (AGGREGATE_TYPE_P (return_type))\n+\t    rhs = build_compound_literal (return_type,\n+\t\t\t\t\t  build_constructor (return_type,\n+\t\t\t\t\t\t\t     NULL_TREE));\n+\t  else\n+\t    rhs = fold (build1 (NOP_EXPR, return_type, integer_zero_node));\n+\n+\t  return build (COMPOUND_EXPR, return_type, trap, rhs);\n+\t}\n+    }\n+\n   /* Convert the parameters to the types declared in the\n      function prototype, or apply default promotions.  */\n "}, {"sha": "c62be7e4ba27cde8b80c6921a9c728ea07e4830c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c96f4f736a59db9dc34b776392576d4832914689/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c96f4f736a59db9dc34b776392576d4832914689/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c96f4f736a59db9dc34b776392576d4832914689", "patch": "@@ -1,3 +1,7 @@\n+2003-12-20  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* gcc.dg/cast-function-1.c: New test.\n+\n 2003-12-19  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* gcc.dg/format/ext-1.c: Allow 'I' flag on floating point decimal"}, {"sha": "44cb18396236b95d222e986779c01e90db30a4d2", "filename": "gcc/testsuite/gcc.dg/cast-function-1.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c96f4f736a59db9dc34b776392576d4832914689/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-function-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c96f4f736a59db9dc34b776392576d4832914689/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-function-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-function-1.c?ref=c96f4f736a59db9dc34b776392576d4832914689", "patch": "@@ -0,0 +1,49 @@\n+/* PR c/12085 */\n+/* Origin: David Hollenberg <dhollen@mosis.org> */\n+\n+/* Verify that the compiler doesn't inline a function at\n+   a calling point where it is viewed with a different\n+   prototype than the actual one.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+int foo1(int);\n+int foo2();\n+\n+typedef struct {\n+  double d;\n+  int a;\n+} str_t;\n+\n+void bar(void)\n+{\n+  double d;\n+  int i;\n+  str_t s;\n+\n+  d = ((double (*) (int)) foo1) (i);  /* { dg-warning \"non-compatible\" } */\n+  i = ((int (*) (double)) foo1) (d);  /* { dg-warning \"non-compatible\" } */\n+  s = ((str_t (*) (int)) foo1) (i);   /* { dg-warning \"non-compatible\" } */\n+  ((void (*) (int)) foo1) (d);        /* { dg-warning \"non-compatible\" } */\n+  i = ((int (*) (int)) foo1) (i);     /* { dg-bogus \"non-compatible\" } */\n+  (void) foo1 (i);                    /* { dg-bogus \"non-compatible\" } */\n+\n+  d = ((double (*) (int)) foo2) (i);  /* { dg-warning \"non-compatible\" } */\n+  i = ((int (*) (double)) foo2) (d);  /* { dg-bogus \"non-compatible\" } */\n+  s = ((str_t (*) (int)) foo2) (i);   /* { dg-warning \"non-compatible\" } */\n+  ((void (*) (int)) foo2) (d);        /* { dg-warning \"non-compatible\" } */\n+  i = ((int (*) (int)) foo2) (i);     /* { dg-bogus \"non-compatible\" } */\n+  (void) foo2 (i);                    /* { dg-bogus \"non-compatible\" } */\n+}\n+\n+int foo1(int arg)\n+{\n+  return arg;\n+}\n+\n+int foo2(arg)\n+  int arg;\n+{\n+  return arg;\n+}"}]}