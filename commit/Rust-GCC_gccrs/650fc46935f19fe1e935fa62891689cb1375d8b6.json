{"sha": "650fc46935f19fe1e935fa62891689cb1375d8b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUwZmM0NjkzNWYxOWZlMWU5MzVmYTYyODkxNjg5Y2IxMzc1ZDhiNg==", "commit": {"author": {"name": "Chung-Ju Wu", "email": "jasonwucj@gmail.com", "date": "2014-09-03T10:15:06Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2014-09-03T10:15:06Z"}, "message": "[NDS32] Provide TARGET_ARG_PARTIAL_BYTES so that we can have structure argument\n        partially in registers and stack.\n\n  -- This is needed if we would like to pass variadic arguments via registers\n     that are pused on the stack by callee.  So that va_arg() can access\n     arguments continously in memory.\n\n\t* config/nds32/nds32.c (nds32_arg_partial_bytes): New implementation\n\tfor TARGET_ARG_PARTIAL_BYTES.\n\nFrom-SVN: r214868", "tree": {"sha": "0d9eba6ef94bde334e2d3f8007124ef563144955", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d9eba6ef94bde334e2d3f8007124ef563144955"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/650fc46935f19fe1e935fa62891689cb1375d8b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/650fc46935f19fe1e935fa62891689cb1375d8b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/650fc46935f19fe1e935fa62891689cb1375d8b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/650fc46935f19fe1e935fa62891689cb1375d8b6/comments", "author": {"login": "jasonwucj", "id": 5520732, "node_id": "MDQ6VXNlcjU1MjA3MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5520732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasonwucj", "html_url": "https://github.com/jasonwucj", "followers_url": "https://api.github.com/users/jasonwucj/followers", "following_url": "https://api.github.com/users/jasonwucj/following{/other_user}", "gists_url": "https://api.github.com/users/jasonwucj/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasonwucj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasonwucj/subscriptions", "organizations_url": "https://api.github.com/users/jasonwucj/orgs", "repos_url": "https://api.github.com/users/jasonwucj/repos", "events_url": "https://api.github.com/users/jasonwucj/events{/privacy}", "received_events_url": "https://api.github.com/users/jasonwucj/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "557430f1699f0ad881815957f35fdc9b11a09608", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/557430f1699f0ad881815957f35fdc9b11a09608", "html_url": "https://github.com/Rust-GCC/gccrs/commit/557430f1699f0ad881815957f35fdc9b11a09608"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "2ea7792588a5301c5b11e614c77e79524fc47fb6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650fc46935f19fe1e935fa62891689cb1375d8b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650fc46935f19fe1e935fa62891689cb1375d8b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=650fc46935f19fe1e935fa62891689cb1375d8b6", "patch": "@@ -1,3 +1,8 @@\n+2014-09-03  Chung-Ju Wu  <jasonwucj@gmail.com>\n+\n+\t* config/nds32/nds32.c (nds32_arg_partial_bytes): New implementation\n+\tfor TARGET_ARG_PARTIAL_BYTES.\n+\n 2014-09-03  Chung-Ju Wu  <jasonwucj@gmail.com>\n \n \t* config/nds32/nds32.c (nds32_expand_prologue): Emit stack push"}, {"sha": "fdd4fd4151ba64db3a73cec6511116f5ab784ab9", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650fc46935f19fe1e935fa62891689cb1375d8b6/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650fc46935f19fe1e935fa62891689cb1375d8b6/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=650fc46935f19fe1e935fa62891689cb1375d8b6", "patch": "@@ -1352,6 +1352,50 @@ nds32_function_arg (cumulative_args_t ca, enum machine_mode mode,\n   return NULL_RTX;\n }\n \n+static int\n+nds32_arg_partial_bytes (cumulative_args_t ca, enum machine_mode mode,\n+\t\t\t tree type, bool named ATTRIBUTE_UNUSED)\n+{\n+  /* Returns the number of bytes at the beginning of an argument that\n+     must be put in registers.  The value must be zero for arguments that are\n+     passed entirely in registers or that are entirely pushed on the stack.\n+     Besides, TARGET_FUNCTION_ARG for these arguments should return the\n+     first register to be used by the caller for this argument.  */\n+  unsigned int needed_reg_count;\n+  unsigned int remaining_reg_count;\n+  CUMULATIVE_ARGS *cum;\n+\n+  cum = get_cumulative_args (ca);\n+\n+  /* Under hard float abi, we better have argument entirely passed in\n+     registers or pushed on the stack so that we can reduce the complexity\n+     of dealing with cum->gpr_offset and cum->fpr_offset.  */\n+  if (TARGET_HARD_FLOAT)\n+    return 0;\n+\n+  /* If we have already runned out of argument registers, return zero\n+     so that the argument will be entirely pushed on the stack.  */\n+  if (NDS32_AVAILABLE_REGNUM_FOR_GPR_ARG (cum->gpr_offset, mode, type)\n+      >= NDS32_GPR_ARG_FIRST_REGNUM + NDS32_MAX_GPR_REGS_FOR_ARGS)\n+    return 0;\n+\n+  /* Calculate how many registers do we need for this argument.  */\n+  needed_reg_count = NDS32_NEED_N_REGS_FOR_ARG (mode, type);\n+\n+  /* Calculate how many argument registers have left for passing argument.\n+     Note that we should count it from next available register number.  */\n+  remaining_reg_count\n+    = NDS32_MAX_GPR_REGS_FOR_ARGS\n+      - (NDS32_AVAILABLE_REGNUM_FOR_GPR_ARG (cum->gpr_offset, mode, type)\n+         - NDS32_GPR_ARG_FIRST_REGNUM);\n+\n+  /* Note that we have to return the nubmer of bytes, not registers count.  */\n+  if (needed_reg_count > remaining_reg_count)\n+    return remaining_reg_count * UNITS_PER_WORD;\n+\n+  return 0;\n+}\n+\n static void\n nds32_function_arg_advance (cumulative_args_t ca, enum machine_mode mode,\n \t\t\t    const_tree type, bool named)\n@@ -3454,6 +3498,9 @@ nds32_target_alignment (rtx label)\n #undef TARGET_FUNCTION_ARG\n #define TARGET_FUNCTION_ARG nds32_function_arg\n \n+#undef TARGET_ARG_PARTIAL_BYTES\n+#define TARGET_ARG_PARTIAL_BYTES nds32_arg_partial_bytes\n+\n #undef TARGET_FUNCTION_ARG_ADVANCE\n #define TARGET_FUNCTION_ARG_ADVANCE nds32_function_arg_advance\n "}]}