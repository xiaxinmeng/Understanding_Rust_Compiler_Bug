{"sha": "1fd9f058f37ba4c17cd34e961fe4879e7dd7e3bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZkOWYwNThmMzdiYTRjMTdjZDM0ZTk2MWZlNDg3OWU3ZGQ3ZTNiYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-08-23T07:23:19Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-08-23T07:23:19Z"}, "message": "re PR middle-end/27336 (delete null checks in callers to nonnull functions)\n\n2016-08-23  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/27336\n\t* tree-vrp.c (infer_value_range): Handle stmts that can throw\n\tby looking for a non-EH edge.\n\t(process_assert_insertions_for): Likewise.\n\n\t* c-c++-common/pr27336.c: New testcase.\n\nFrom-SVN: r239684", "tree": {"sha": "78232f581677e4708f81fc0025d91b370e95ffea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78232f581677e4708f81fc0025d91b370e95ffea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fd9f058f37ba4c17cd34e961fe4879e7dd7e3bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fd9f058f37ba4c17cd34e961fe4879e7dd7e3bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fd9f058f37ba4c17cd34e961fe4879e7dd7e3bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fd9f058f37ba4c17cd34e961fe4879e7dd7e3bc/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e83421c08ff730d683c4921c07cf7f327a6bab89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e83421c08ff730d683c4921c07cf7f327a6bab89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e83421c08ff730d683c4921c07cf7f327a6bab89"}], "stats": {"total": 35, "additions": 27, "deletions": 8}, "files": [{"sha": "13b4ad581c20f66a106d585fb457882fca4375e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd9f058f37ba4c17cd34e961fe4879e7dd7e3bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd9f058f37ba4c17cd34e961fe4879e7dd7e3bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1fd9f058f37ba4c17cd34e961fe4879e7dd7e3bc", "patch": "@@ -1,3 +1,10 @@\n+2016-08-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/27336\n+\t* tree-vrp.c (infer_value_range): Handle stmts that can throw\n+\tby looking for a non-EH edge.\n+\t(process_assert_insertions_for): Likewise.\n+\n 2016-08-23  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/77305"}, {"sha": "812c0c52ce7cb0c59a658b385f895ab596e7e94b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd9f058f37ba4c17cd34e961fe4879e7dd7e3bc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd9f058f37ba4c17cd34e961fe4879e7dd7e3bc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1fd9f058f37ba4c17cd34e961fe4879e7dd7e3bc", "patch": "@@ -1,3 +1,8 @@\n+2016-08-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/27336\n+\t* c-c++-common/pr27336.c: New testcase.\n+\n 2016-08-22  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/77321"}, {"sha": "2978c6d709922d56e8ca1ba32ba3741d404cefbc", "filename": "gcc/testsuite/c-c++-common/pr27336.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd9f058f37ba4c17cd34e961fe4879e7dd7e3bc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr27336.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd9f058f37ba4c17cd34e961fe4879e7dd7e3bc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr27336.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr27336.c?ref=1fd9f058f37ba4c17cd34e961fe4879e7dd7e3bc", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+\n+struct B { int x; };\n+extern void g3(struct B *that)  __attribute__((nonnull));\n+int f3(struct B *a)\n+{\n+  g3(a);\n+  return a != (void *)0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"return 1;\" \"vrp1\" } } */"}, {"sha": "45882c438ba81094b2ac1552296a52845dfe1ad5", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd9f058f37ba4c17cd34e961fe4879e7dd7e3bc/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd9f058f37ba4c17cd34e961fe4879e7dd7e3bc/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=1fd9f058f37ba4c17cd34e961fe4879e7dd7e3bc", "patch": "@@ -4782,11 +4782,6 @@ infer_value_range (gimple *stmt, tree op, tree_code *comp_code_p, tree *val_p)\n   if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (op))\n     return false;\n \n-  /* Similarly, don't infer anything from statements that may throw\n-     exceptions. ??? Relax this requirement?  */\n-  if (stmt_could_throw_p (stmt))\n-    return false;\n-\n   /* If STMT is the last statement of a basic block with no normal\n      successors, there is no point inferring anything about any of its\n      operands.  We would not be able to find a proper insertion point\n@@ -4797,7 +4792,7 @@ infer_value_range (gimple *stmt, tree op, tree_code *comp_code_p, tree *val_p)\n       edge e;\n \n       FOR_EACH_EDGE (e, ei, gimple_bb (stmt)->succs)\n-\tif (!(e->flags & EDGE_ABNORMAL))\n+\tif (!(e->flags & (EDGE_ABNORMAL|EDGE_EH)))\n \t  break;\n       if (e == NULL)\n \treturn false;\n@@ -6370,10 +6365,10 @@ process_assert_insertions_for (tree name, assert_locus *loc)\n \n   /* If STMT must be the last statement in BB, we can only insert new\n      assertions on the non-abnormal edge out of BB.  Note that since\n-     STMT is not control flow, there may only be one non-abnormal edge\n+     STMT is not control flow, there may only be one non-abnormal/eh edge\n      out of BB.  */\n   FOR_EACH_EDGE (e, ei, loc->bb->succs)\n-    if (!(e->flags & EDGE_ABNORMAL))\n+    if (!(e->flags & (EDGE_ABNORMAL|EDGE_EH)))\n       {\n \tgsi_insert_on_edge (e, assert_stmt);\n \treturn true;"}]}