{"sha": "13bbad84b1148a52cc2c130ddce42958aad23483", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNiYmFkODRiMTE0OGE1MmNjMmMxMzBkZGNlNDI5NThhYWQyMzQ4Mw==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2007-04-06T09:26:50Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-04-06T09:26:50Z"}, "message": "sem_ch7.ads, [...] (Inspect_Deferred_Constant_Completion): Move out of Analyze_Package_Declaration...\n\n2007-04-06  Ed Schonberg  <schonberg@adacore.com>\n\t    Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_ch7.ads, sem_ch7.adb (Inspect_Deferred_Constant_Completion): Move\n\tout of Analyze_Package_Declaration, because processing must be applied\n\tto package bodies as well, for deferred constants completed by pragmas.\n\t(Analyze_Package_Declaration): When the package declaration being\n\tanalyzed does not require an explicit body, call Check_Completion.\n\t(May_Need_Implicit_Body): An implicit body is required when a package\n\tspec contains the declaration of a remote access-to-classwide type.\n\t(Analyze_Package_Body): If the package contains RACWs, append the\n\tpending subprogram bodies generated by exp_dist at the end of the body.\n\t(New_Private_Type,Unit_Requires_Body): Split Is_Abstract flag into\n\tIs_Abstract_Subprogram and Is_Abstract_Type.\n\t(Preserve_Full_Attributes): The full entity list is not an attribute\n\tthat must be preserved from full to partial view.\n\n        * sem_dist.adb (Add_RAS_Dereference_TSS):\n        Change primitive name to _Call so it cannot clash with any legal\n        identifier, and be special-cased in Check_Completion.\n        Mark the full view of the designated type for the RACW associated with\n        a RAS as Comes_From_Source to get proper view switching when installing\n        private declarations.\n        Provite a placeholder nested package body along with the nested spec\n        to have a place for Append_RACW_Bodies to generate the calling stubs\n        and stream attributes.\n\nFrom-SVN: r123596", "tree": {"sha": "e450280fd87f186a8350a152eeab4955fcb17efa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e450280fd87f186a8350a152eeab4955fcb17efa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13bbad84b1148a52cc2c130ddce42958aad23483", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13bbad84b1148a52cc2c130ddce42958aad23483", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13bbad84b1148a52cc2c130ddce42958aad23483", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13bbad84b1148a52cc2c130ddce42958aad23483/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b6a1a16fbda2a0dbcf8095ff57b692f01449fceb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6a1a16fbda2a0dbcf8095ff57b692f01449fceb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6a1a16fbda2a0dbcf8095ff57b692f01449fceb"}], "stats": {"total": 319, "additions": 202, "deletions": 117}, "files": [{"sha": "9d62cbe80608c05f77ffe3243ffb4b17c63d1669", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 143, "deletions": 75, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13bbad84b1148a52cc2c130ddce42958aad23483/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13bbad84b1148a52cc2c130ddce42958aad23483/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=13bbad84b1148a52cc2c130ddce42958aad23483", "patch": "@@ -35,6 +35,7 @@ with Einfo;    use Einfo;\n with Elists;   use Elists;\n with Errout;   use Errout;\n with Exp_Disp; use Exp_Disp;\n+with Exp_Dist; use Exp_Dist;\n with Exp_Dbug; use Exp_Dbug;\n with Lib;      use Lib;\n with Lib.Xref; use Lib.Xref;\n@@ -89,19 +90,25 @@ package body Sem_Ch7 is\n \n    procedure Check_Anonymous_Access_Types\n      (Spec_Id : Entity_Id;\n-      P_Body  :  Node_Id);\n+      P_Body  : Node_Id);\n    --  If the spec of a package has a limited_with_clause, it may declare\n-   --  anonymous access types whose designated type is a limited view, such\n-   --  an anonymous access return type for a function. This access type\n-   --  cannot be elaborated in the spec itself, but it may need an itype\n-   --  reference if it is used within a nested scope. In that case the itype\n-   --  reference is created at the beginning of the corresponding package body\n-   --  and inserted before other body declarations.\n+   --  anonymous access types whose designated type is a limited view, such an\n+   --  anonymous access return type for a function. This access type cannot be\n+   --  elaborated in the spec itself, but it may need an itype reference if it\n+   --  is used within a nested scope. In that case the itype reference is\n+   --  created at the beginning of the corresponding package body and inserted\n+   --  before other body declarations.\n+\n+   procedure Inspect_Deferred_Constant_Completion (Decls : List_Id);\n+   --  Examines the deferred constants in the private part of the package\n+   --  specification, or in a package body. Emits the error message\n+   --  \"constant declaration requires initialization expression\" if not\n+   --  completed by an Import pragma.\n \n    procedure Install_Package_Entity (Id : Entity_Id);\n-   --  Basic procedure for the previous two. Places one entity on its\n-   --  visibility chain, and recurses on the visible part if the entity\n-   --  is an inner package.\n+   --  Supporting procedure for Install_{Visible,Private}_Declarations.\n+   --  Places one entity on its visibility chain, and recurses on the visible\n+   --  part if the entity is an inner package.\n \n    function Is_Private_Base_Type (E : Entity_Id) return Boolean;\n    --  True for a private type that is not a subtype\n@@ -322,9 +329,9 @@ package body Sem_Ch7 is\n       Set_Use (Visible_Declarations (Specification (Pack_Decl)));\n       Set_Use (Private_Declarations (Specification (Pack_Decl)));\n \n-      --  This is a nested package, so it may be necessary to declare\n-      --  certain inherited subprograms that are not yet visible because\n-      --  the parent type's subprograms are now visible.\n+      --  This is a nested package, so it may be necessary to declare certain\n+      --  inherited subprograms that are not yet visible because the parent\n+      --  type's subprograms are now visible.\n \n       if Ekind (Scope (Spec_Id)) = E_Package\n         and then Scope (Spec_Id) /= Standard_Standard\n@@ -334,6 +341,18 @@ package body Sem_Ch7 is\n \n       if Present (Declarations (N)) then\n          Analyze_Declarations (Declarations (N));\n+         Inspect_Deferred_Constant_Completion (Declarations (N));\n+      end if;\n+\n+      --  Analyze_Declarations has caused freezing of all types; now generate\n+      --  bodies for RACW primitives and stream attributes, if any.\n+\n+      if Ekind (Spec_Id) = E_Package and then Has_RACW (Spec_Id) then\n+\n+         --  Attach subprogram bodies to support RACWs declared in spec\n+\n+         Append_RACW_Bodies (Declarations (N), Spec_Id);\n+         Analyze_List (Declarations (N));\n       end if;\n \n       HSS := Handled_Statement_Sequence (N);\n@@ -630,7 +649,15 @@ package body Sem_Ch7 is\n \n    procedure Analyze_Package_Declaration (N : Node_Id) is\n       Id : constant Node_Id := Defining_Entity (N);\n+\n       PF : Boolean;\n+      --  True when in the context of a declared pure library unit\n+\n+      Body_Required : Boolean;\n+      --  True when this package declaration requires a corresponding body\n+\n+      Comp_Unit : Boolean;\n+      --  True when this package declaration is not a nested declaration\n \n    begin\n       --  Ada 2005 (AI-217): Check if the package has been erroneously named\n@@ -666,18 +693,43 @@ package body Sem_Ch7 is\n \n       Analyze (Specification (N));\n       Validate_Categorization_Dependency (N, Id);\n-      End_Package_Scope (Id);\n \n-      --  For a compilation unit, indicate whether it needs a body, and\n-      --  whether elaboration warnings may be meaningful on it.\n+      Body_Required := Unit_Requires_Body (Id);\n+\n+      --  When this spec does not require an explicit body, we know that\n+      --  there are no entities requiring completion in the language sense;\n+      --  we call Check_Completion here only to ensure that any nested package\n+      --  declaration that requires an implicit body gets one. (In the case\n+      --  where a body is required, Check_Completion is called at the end of\n+      --  the body's declarative part.)\n+\n+      if not Body_Required then\n+         Check_Completion;\n+      end if;\n+\n+      Comp_Unit := Nkind (Parent (N)) = N_Compilation_Unit;\n+      if Comp_Unit then\n+\n+         --  Set Body_Required indication on the compilation unit node, and\n+         --  determine whether elaboration warnings may be meaningful on it.\n \n-      if Nkind (Parent (N)) = N_Compilation_Unit then\n-         Set_Body_Required (Parent (N), Unit_Requires_Body (Id));\n+         Set_Body_Required (Parent (N), Body_Required);\n \n-         if not Body_Required (Parent (N)) then\n+         if not Body_Required then\n             Set_Suppress_Elaboration_Warnings (Id);\n          end if;\n \n+      end if;\n+\n+      End_Package_Scope (Id);\n+\n+      --  For the declaration of a library unit that is a remote types package,\n+      --  check legality rules regarding availability of stream attributes for\n+      --  types that contain non-remote access values. This subprogram performs\n+      --  visibility tests that rely on the fact that we have exited the scope\n+      --  of Id.\n+\n+      if Comp_Unit then\n          Validate_RT_RAT_Component (N);\n       end if;\n    end Analyze_Package_Declaration;\n@@ -719,11 +771,6 @@ package body Sem_Ch7 is\n       --  Child and Unit are entities of compilation units. True if Child\n       --  is a public child of Parent as defined in 10.1.1\n \n-      procedure Inspect_Deferred_Constant_Completion;\n-      --  Examines the deferred constants in the private part of the package\n-      --  specification. Emits the error message \"constant declaration requires\n-      --  initialization expression \" if not completed by an Import pragma.\n-\n       procedure Inspect_Unchecked_Union_Completion (Decls : List_Id);\n       --  Detects all incomplete or private type declarations having a known\n       --  discriminant part that are completed by an Unchecked_Union. Emits\n@@ -847,41 +894,6 @@ package body Sem_Ch7 is\n          end if;\n       end Is_Public_Child;\n \n-      ------------------------------------------\n-      -- Inspect_Deferred_Constant_Completion --\n-      ------------------------------------------\n-\n-      procedure Inspect_Deferred_Constant_Completion is\n-         Decl   : Node_Id;\n-\n-      begin\n-         Decl := First (Priv_Decls);\n-         while Present (Decl) loop\n-\n-            --  Deferred constant signature\n-\n-            if Nkind (Decl) = N_Object_Declaration\n-              and then Constant_Present (Decl)\n-              and then No (Expression (Decl))\n-\n-               --  No need to check internally generated constants\n-\n-              and then Comes_From_Source (Decl)\n-\n-               --  The constant is not completed. A full object declaration\n-               --  or a pragma Import complete a deferred constant.\n-\n-              and then not Has_Completion (Defining_Identifier (Decl))\n-            then\n-               Error_Msg_N\n-                 (\"constant declaration requires initialization expression\",\n-                 Defining_Identifier (Decl));\n-            end if;\n-\n-            Decl := Next (Decl);\n-         end loop;\n-      end Inspect_Deferred_Constant_Completion;\n-\n       ----------------------------------------\n       -- Inspect_Unchecked_Union_Completion --\n       ----------------------------------------\n@@ -1130,7 +1142,7 @@ package body Sem_Ch7 is\n \n          --  Check the private declarations for incomplete deferred constants\n \n-         Inspect_Deferred_Constant_Completion;\n+         Inspect_Deferred_Constant_Completion (Priv_Decls);\n \n          --  The first private entity is the immediate follower of the last\n          --  visible entity, if there was one.\n@@ -1514,6 +1526,41 @@ package body Sem_Ch7 is\n       Set_Homonym     (Full_Id, H2);\n    end Exchange_Declarations;\n \n+   ------------------------------------------\n+   -- Inspect_Deferred_Constant_Completion --\n+   ------------------------------------------\n+\n+   procedure Inspect_Deferred_Constant_Completion (Decls : List_Id) is\n+      Decl   : Node_Id;\n+\n+   begin\n+      Decl := First (Decls);\n+      while Present (Decl) loop\n+\n+         --  Deferred constant signature\n+\n+         if Nkind (Decl) = N_Object_Declaration\n+           and then Constant_Present (Decl)\n+           and then No (Expression (Decl))\n+\n+            --  No need to check internally generated constants\n+\n+           and then Comes_From_Source (Decl)\n+\n+            --  The constant is not completed. A full object declaration\n+            --  or a pragma Import complete a deferred constant.\n+\n+           and then not Has_Completion (Defining_Identifier (Decl))\n+         then\n+            Error_Msg_N\n+              (\"constant declaration requires initialization expression\",\n+              Defining_Identifier (Decl));\n+         end if;\n+\n+         Decl := Next (Decl);\n+      end loop;\n+   end Inspect_Deferred_Constant_Completion;\n+\n    ----------------------------\n    -- Install_Package_Entity --\n    ----------------------------\n@@ -1723,7 +1770,7 @@ package body Sem_Ch7 is\n    begin\n       if not Has_Completion (E)\n         and then Nkind (P) = N_Package_Declaration\n-        and then Present (Activation_Chain_Entity (P))\n+        and then (Present (Activation_Chain_Entity (P)) or else Has_RACW (E))\n       then\n          B :=\n            Make_Package_Body (Sloc (E),\n@@ -1792,7 +1839,7 @@ package body Sem_Ch7 is\n          Set_Ekind                (Id, E_Record_Type_With_Private);\n          Make_Class_Wide_Type     (Id);\n          Set_Primitive_Operations (Id, New_Elmt_List);\n-         Set_Is_Abstract          (Id, Abstract_Present (Def));\n+         Set_Is_Abstract_Type     (Id, Abstract_Present (Def));\n          Set_Is_Limited_Record    (Id, Limited_Present (Def));\n          Set_Has_Delayed_Freeze   (Id, True);\n \n@@ -1828,13 +1875,16 @@ package body Sem_Ch7 is\n \n       begin\n          Set_Size_Info (Priv, (Full));\n-         Set_RM_Size (Priv, RM_Size (Full));\n-         Set_Size_Known_At_Compile_Time (Priv, Size_Known_At_Compile_Time\n-                                                                      (Full));\n-         Set_Is_Volatile        (Priv, Is_Volatile        (Full));\n-         Set_Treat_As_Volatile  (Priv, Treat_As_Volatile  (Full));\n-         Set_Is_Ada_2005_Only   (Priv, Is_Ada_2005_Only   (Full));\n-\n+         Set_RM_Size                 (Priv, RM_Size (Full));\n+         Set_Size_Known_At_Compile_Time\n+                                     (Priv, Size_Known_At_Compile_Time (Full));\n+         Set_Is_Volatile             (Priv, Is_Volatile                (Full));\n+         Set_Treat_As_Volatile       (Priv, Treat_As_Volatile          (Full));\n+         Set_Is_Ada_2005_Only        (Priv, Is_Ada_2005_Only           (Full));\n+         Set_Has_Pragma_Unreferenced (Priv, Has_Pragma_Unreferenced    (Full));\n+         Set_Has_Pragma_Unreferenced_Objects\n+                                     (Priv, Has_Pragma_Unreferenced_Objects\n+                                                                       (Full));\n          if Is_Unchecked_Union (Full) then\n             Set_Is_Unchecked_Union (Base_Type (Priv));\n          end if;\n@@ -1892,8 +1942,22 @@ package body Sem_Ch7 is\n                end if;\n             end if;\n \n-            Set_First_Entity (Priv, First_Entity (Full));\n-            Set_Last_Entity  (Priv, Last_Entity (Full));\n+            if Is_Tagged_Type (Priv) then\n+\n+               --  If the type is tagged, the tag itself must be available\n+               --  on the partial view, for expansion purposes.\n+\n+               Set_First_Entity (Priv, First_Entity (Full));\n+\n+               --  If there are discriminants in the partial view, these remain\n+               --  visible. Otherwise only the tag itself is visible, and there\n+               --  are no nameable components in the partial view.\n+\n+               if No (Last_Entity (Priv)) then\n+                  Set_Last_Entity (Priv, First_Entity (Priv));\n+               end if;\n+            end if;\n+\n             Set_Has_Discriminants (Priv, Has_Discriminants (Full));\n          end if;\n       end Preserve_Full_Attributes;\n@@ -1905,7 +1969,7 @@ package body Sem_Ch7 is\n       function Type_In_Use (T : Entity_Id) return Boolean is\n       begin\n          return Scope (Base_Type (T)) = P\n-           and then  (In_Use (T) or else In_Use (Base_Type (T)));\n+           and then (In_Use (T) or else In_Use (Base_Type (T)));\n       end Type_In_Use;\n \n    --  Start of processing for Uninstall_Declarations\n@@ -2206,13 +2270,17 @@ package body Sem_Ch7 is\n          then\n             null;\n \n-         --  Otherwise test to see if entity requires a completion\n+         --  Otherwise test to see if entity requires a completion.\n+         --  Note that subprogram entities whose declaration does not come\n+         --  from source are ignored here on the basis that we assume the\n+         --  expander will provide an implicit completion at some point.\n \n          elsif (Is_Overloadable (E)\n                and then Ekind (E) /= E_Enumeration_Literal\n                and then Ekind (E) /= E_Operator\n-               and then not Is_Abstract (E)\n-               and then not Has_Completion (E))\n+               and then not Is_Abstract_Subprogram (E)\n+               and then not Has_Completion (E)\n+               and then Comes_From_Source (Parent (E)))\n \n            or else\n              (Ekind (E) = E_Package"}, {"sha": "7615fb89b819c17640bfab5a96b346d58dc287c7", "filename": "gcc/ada/sem_ch7.ads", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13bbad84b1148a52cc2c130ddce42958aad23483/gcc%2Fada%2Fsem_ch7.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13bbad84b1148a52cc2c130ddce42958aad23483/gcc%2Fada%2Fsem_ch7.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.ads?ref=13bbad84b1148a52cc2c130ddce42958aad23483", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -58,9 +58,10 @@ package Sem_Ch7 is\n    --  if it contains declarations that require completion in a body.\n \n    procedure May_Need_Implicit_Body (E : Entity_Id);\n-   --  If a package declaration contains tasks and does not require a\n-   --  body, create an implicit body at the end of the current declarative\n-   --  part to activate those tasks.\n+   --  If a package declaration contains tasks or RACWs and does not require\n+   --  a body, create an implicit body at the end of the current declarative\n+   --  part to activate those tasks or contain the bodies for the RACW\n+   --  calling stubs.\n \n    procedure New_Private_Type (N : Node_Id; Id : Entity_Id; Def : Node_Id);\n    --  Common processing for private type declarations and for formal"}, {"sha": "9b161a96cfd2652487faa6a777e11ad8f9d3c33f", "filename": "gcc/ada/sem_dist.adb", "status": "modified", "additions": 54, "deletions": 38, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13bbad84b1148a52cc2c130ddce42958aad23483/gcc%2Fada%2Fsem_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13bbad84b1148a52cc2c130ddce42958aad23483/gcc%2Fada%2Fsem_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dist.adb?ref=13bbad84b1148a52cc2c130ddce42958aad23483", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -116,7 +116,7 @@ package body Sem_Dist is\n       Primitive_Spec : constant Node_Id :=\n                          Copy_Specification (Loc,\n                            Spec     => Subp_Spec,\n-                           New_Name => Name_Call);\n+                           New_Name => Name_uCall);\n \n       Subtype_Mark_For_Self : Node_Id;\n \n@@ -142,9 +142,8 @@ package body Sem_Dist is\n               Subtype_Mark =>\n                 Subtype_Mark_For_Self)));\n \n-      --  Trick later semantic analysis into considering this\n-      --  operation as a primitive (dispatching) operation of\n-      --  tagged type Obj_Type.\n+      --  Trick later semantic analysis into considering this operation as a\n+      --  primitive (dispatching) operation of tagged type Obj_Type.\n \n       Set_Comes_From_Source (\n         Defining_Unit_Name (Primitive_Spec), True);\n@@ -398,45 +397,43 @@ package body Sem_Dist is\n    ------------------------------------\n \n    procedure Process_Remote_AST_Declaration (N : Node_Id) is\n-      Loc            : constant Source_Ptr := Sloc (N);\n-      User_Type      : constant Node_Id := Defining_Identifier (N);\n-      Scop           : constant Entity_Id := Scope (User_Type);\n-      Is_RCI         : constant Boolean :=\n-        Is_Remote_Call_Interface (Scop);\n-      Is_RT          : constant Boolean :=\n-        Is_Remote_Types (Scop);\n-      Type_Def       : constant Node_Id := Type_Definition (N);\n-\n-      Parameter      : Node_Id;\n-      Is_Degenerate  : Boolean;\n+      Loc       : constant Source_Ptr := Sloc (N);\n+      User_Type : constant Node_Id    := Defining_Identifier (N);\n+      Scop      : constant Entity_Id  := Scope (User_Type);\n+      Is_RCI    : constant Boolean    := Is_Remote_Call_Interface (Scop);\n+      Is_RT     : constant Boolean    := Is_Remote_Types (Scop);\n+      Type_Def  : constant Node_Id    := Type_Definition (N);\n+      Parameter : Node_Id;\n+\n+      Is_Degenerate : Boolean;\n       --  True iff this RAS has an access formal parameter (see\n       --  Exp_Dist.Add_RAS_Dereference_TSS for details).\n \n-      Subpkg         : constant Entity_Id :=\n-                         Make_Defining_Identifier\n-                           (Loc, New_Internal_Name ('S'));\n-      Subpkg_Decl    : Node_Id;\n-      Vis_Decls      : constant List_Id := New_List;\n-      Priv_Decls     : constant List_Id := New_List;\n+      Subpkg      : constant Entity_Id :=\n+                      Make_Defining_Identifier (Loc,\n+                        New_Internal_Name ('S'));\n+      Subpkg_Decl : Node_Id;\n+      Subpkg_Body : Node_Id;\n+      Vis_Decls   : constant List_Id := New_List;\n+      Priv_Decls  : constant List_Id := New_List;\n+\n+      Obj_Type : constant Entity_Id :=\n+                    Make_Defining_Identifier (Loc,\n+                      New_External_Name (Chars (User_Type), 'R'));\n \n-      Obj_Type       : constant Entity_Id :=\n-                         Make_Defining_Identifier\n-                           (Loc, New_External_Name (\n-                                   Chars (User_Type), 'R'));\n+      Full_Obj_Type : constant Entity_Id :=\n+                        Make_Defining_Identifier (Loc,\n+                          Chars (Obj_Type));\n \n-      Full_Obj_Type  : constant Entity_Id :=\n-                         Make_Defining_Identifier\n-                           (Loc, Chars (Obj_Type));\n+      RACW_Type : constant Entity_Id :=\n+                    Make_Defining_Identifier (Loc,\n+                      New_External_Name (Chars (User_Type), 'P'));\n \n-      RACW_Type      : constant Entity_Id :=\n-                         Make_Defining_Identifier\n-                           (Loc, New_External_Name (\n-                                   Chars (User_Type), 'P'));\n+      Fat_Type : constant Entity_Id :=\n+                   Make_Defining_Identifier (Loc,\n+                     Chars (User_Type));\n \n-      Fat_Type       : constant Entity_Id :=\n-                        Make_Defining_Identifier\n-                          (Loc, Chars (User_Type));\n-      Fat_Type_Decl  : Node_Id;\n+      Fat_Type_Decl : Node_Id;\n \n    begin\n       Is_Degenerate := False;\n@@ -461,6 +458,7 @@ package body Sem_Dist is\n          --  anonymous access type is null, because it cannot be subtype-\n          --  conformant with any legal remote subprogram declaration. In this\n          --  case, we cannot generate a corresponding primitive operation.\n+\n       end if;\n \n       if Get_PCS_Name = Name_No_DSA then\n@@ -493,6 +491,11 @@ package body Sem_Dist is\n               Null_Present     => True,\n               Component_List   => Empty)));\n \n+      --  Trick semantic analysis into swapping the public and full view when\n+      --  freezing the public view.\n+\n+      Set_Comes_From_Source (Full_Obj_Type, True);\n+\n       if not Is_Degenerate then\n          Append_To (Vis_Decls,\n            Make_Abstract_Subprogram_Declaration (Loc,\n@@ -531,6 +534,19 @@ package body Sem_Dist is\n       Set_Is_Remote_Types (Subpkg, Is_RT);\n       Insert_After_And_Analyze (N, Subpkg_Decl);\n \n+      --  Generate package body to receive RACW calling stubs\n+      --  Note: Analyze_Declarations has an absolute requirement that\n+      --  the declaration list be non-empty, so we provide a dummy null\n+      --  statement here.\n+\n+      Subpkg_Body :=\n+        Make_Package_Body (Loc,\n+          Defining_Unit_Name =>\n+            Make_Defining_Identifier (Loc, Chars (Subpkg)),\n+          Declarations => New_List (\n+            Make_Null_Statement (Loc)));\n+      Insert_After_And_Analyze (Subpkg_Decl, Subpkg_Body);\n+\n       --  Many parts of the analyzer and expander expect\n       --  that the fat pointer type used to implement remote\n       --  access to subprogram types be a record.\n@@ -556,7 +572,7 @@ package body Sem_Dist is\n                           New_Occurrence_Of (RACW_Type, Loc)))))));\n       Set_Equivalent_Type (User_Type, Fat_Type);\n       Set_Corresponding_Remote_Type (Fat_Type, User_Type);\n-      Insert_After_And_Analyze (Subpkg_Decl, Fat_Type_Decl);\n+      Insert_After_And_Analyze (Subpkg_Body, Fat_Type_Decl);\n \n       --  The reason we suppress the initialization procedure is that we know\n       --  that no initialization is required (even if Initialize_Scalars mode"}]}