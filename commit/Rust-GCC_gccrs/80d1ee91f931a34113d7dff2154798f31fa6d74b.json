{"sha": "80d1ee91f931a34113d7dff2154798f31fa6d74b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBkMWVlOTFmOTMxYTM0MTEzZDdkZmYyMTU0Nzk4ZjMxZmE2ZDc0Yg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-01-18T17:23:23Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-01-18T17:23:23Z"}, "message": "natPlainSocketImpl.cc: Include IllegalArgumentException.h.\n\n\t* java/net/natPlainSocketImpl.cc: Include\n\tIllegalArgumentException.h.\n\t(_Jv_recv): New template function.\n\t(BooleanClass): Removed.\n\t(read): Use _Jv_recv.\n\t(setOption): Use Boolean::class$.  Throw exception if object is\n\tnot Boolean or Integer.\n\nFrom-SVN: r48992", "tree": {"sha": "ff69a21f6d83fedc7ec7c083f312376984477290", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff69a21f6d83fedc7ec7c083f312376984477290"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80d1ee91f931a34113d7dff2154798f31fa6d74b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80d1ee91f931a34113d7dff2154798f31fa6d74b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80d1ee91f931a34113d7dff2154798f31fa6d74b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80d1ee91f931a34113d7dff2154798f31fa6d74b/comments", "author": null, "committer": null, "parents": [{"sha": "072f20ef713af09c2c2f2cb82e41f98a963a3269", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/072f20ef713af09c2c2f2cb82e41f98a963a3269", "html_url": "https://github.com/Rust-GCC/gccrs/commit/072f20ef713af09c2c2f2cb82e41f98a963a3269"}], "stats": {"total": 34, "additions": 28, "deletions": 6}, "files": [{"sha": "459d3cd2c881fc9f5a499cd2826943dcfa63d8ae", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80d1ee91f931a34113d7dff2154798f31fa6d74b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80d1ee91f931a34113d7dff2154798f31fa6d74b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=80d1ee91f931a34113d7dff2154798f31fa6d74b", "patch": "@@ -1,3 +1,13 @@\n+2002-01-18  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/net/natPlainSocketImpl.cc: Include\n+\tIllegalArgumentException.h.\n+\t(_Jv_recv): New template function.\n+\t(BooleanClass): Removed.\n+\t(read): Use _Jv_recv.\n+\t(setOption): Use Boolean::class$.  Throw exception if object is\n+\tnot Boolean or Integer.\n+\n 2002-01-17  Tom Tromey  <tromey@redhat.com>\n \n \t* java/awt/MenuComponent.java: Merged with Classpath."}, {"sha": "ca294d23f1a89f6389636e9a30473a0d89d5282a", "filename": "libjava/java/net/natPlainSocketImpl.cc", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80d1ee91f931a34113d7dff2154798f31fa6d74b/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80d1ee91f931a34113d7dff2154798f31fa6d74b/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc?ref=80d1ee91f931a34113d7dff2154798f31fa6d74b", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1998, 1999, 2000 , 2002 Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2002 Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -70,6 +70,15 @@ _Jv_accept (int fd, struct sockaddr *addr, socklen_t *addrlen)\n #undef accept\n #endif\n \n+// A wrapper for recv so we don't have to do configure tests.\n+template <typename T_fd, typename T_buf, typename T_len, typename T_flags>\n+static inline int\n+_Jv_recv (int (*recv_func) (T_fd s, T_buf buf, T_len len, T_flags flags),\n+\t  int s, void *buf, size_t len, int flags)\n+{\n+  return recv_func ((T_fd) s, (T_buf) buf, (T_len) len, (T_flags) flags);\n+}\n+\n #include <gcj/cni.h>\n #include <gcj/javaprims.h>\n #include <java/io/IOException.h>\n@@ -88,8 +97,7 @@ _Jv_accept (int fd, struct sockaddr *addr, socklen_t *addrlen)\n #include <java/lang/Thread.h>\n #include <java/lang/NullPointerException.h>\n #include <java/lang/ArrayIndexOutOfBoundsException.h>\n-\n-#define BooleanClass java::lang::Boolean::class$\n+#include <java/lang/IllegalArgumentException.h>\n \n #ifdef DISABLE_JAVA_NET\n \n@@ -497,7 +505,7 @@ java::net::PlainSocketImpl::read(jbyteArray buffer, jint offset, jint count)\n       }\n   }\n   // Read the socket.\n-  int r = ::recv (fnum, bytes, count, 0);\n+  int r = _Jv_recv (::recv, fnum, (void *) bytes, count, 0);\n   if (r == 0)\n     return -1;\n   if (java::lang::Thread::interrupted())\n@@ -584,7 +592,7 @@ java::net::PlainSocketImpl::setOption (jint optID, java::lang::Object *value)\n   int val;\n   socklen_t val_len = sizeof (val);\n \n-  if (_Jv_IsInstanceOf (value, &BooleanClass))\n+  if (_Jv_IsInstanceOf (value, &java::lang::Boolean::class$))\n     {\n       java::lang::Boolean *boolobj = \n         static_cast<java::lang::Boolean *> (value);\n@@ -598,12 +606,16 @@ java::net::PlainSocketImpl::setOption (jint optID, java::lang::Object *value)\n \t    val = 0;\n         }\n     }\n-  else  // assume value is an Integer\n+  else if (_Jv_IsInstanceOf (value, &java::lang::Integer::class$))\n     {\n       java::lang::Integer *intobj = \n         static_cast<java::lang::Integer *> (value);          \n       val = (int) intobj->intValue();\n     }\n+  else\n+    {\n+      throw new java::lang::IllegalArgumentException (JvNewStringLatin1 (\"`value' must be Boolean or Integer\"));\n+    }\n \n   switch (optID) \n     {"}]}