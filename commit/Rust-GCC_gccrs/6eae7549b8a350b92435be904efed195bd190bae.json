{"sha": "6eae7549b8a350b92435be904efed195bd190bae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVhZTc1NDliOGEzNTBiOTI0MzViZTkwNGVmZWQxOTViZDE5MGJhZQ==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-04-19T12:48:32Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-04-19T17:27:27Z"}, "message": "libphobos: Add Thread/Fiber support code for Darwin (PR98058)\n\nlibphobos/ChangeLog:\n\n\tPR d/98058\n\t* configure: Regenerate.\n\t* libdruntime/Makefile.am (DRUNTIME_DSOURCES_DARWIN): Add\n\tcore/sys/darwin/config.d\n\t* libdruntime/Makefile.in: Regenerate.\n\t* libdruntime/config/powerpc/switchcontext.S: Implement\n\tfiber_switchContext for __MACH__.\n\t* libdruntime/config/x86/switchcontext.S: Likewise.\n\t* libdruntime/core/sys/darwin/config.d: New file.\n\t* libdruntime/core/thread/fiber.d (Fiber.getThis): Mark noinline.\n\t(UnsafeFiberMigration): Define for OSX/X86 and OSX/X86_64.\n\t* libdruntime/core/thread/osthread.d (callWithStackShell): Add inline\n\tassembler implementation for X86, X86_64, PPC, and PPC64.\n\t* libdruntime/core/thread/threadbase.d (ThreadBase.getThis): Mark\n\tnoinline.\n\t* libdruntime/gcc/deh.d (FuncTable): Remove definition.\n\t* m4/druntime/os.m4 (DRUNTIME_OS_MINFO_BRACKETING): Check for right\n\tbracket symbol on darwin* targets.\n\t* testsuite/libphobos.thread/fiber_guard_page.d: Update test to\n\tsupport ucontext-based Fibers.", "tree": {"sha": "cc4144e57ee31c6ef94edfe90b881cda17b25c13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc4144e57ee31c6ef94edfe90b881cda17b25c13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6eae7549b8a350b92435be904efed195bd190bae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eae7549b8a350b92435be904efed195bd190bae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eae7549b8a350b92435be904efed195bd190bae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eae7549b8a350b92435be904efed195bd190bae/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b66e72b43e1e8f402dc958ce3cca35f7c273340d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b66e72b43e1e8f402dc958ce3cca35f7c273340d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b66e72b43e1e8f402dc958ce3cca35f7c273340d"}], "stats": {"total": 709, "additions": 656, "deletions": 53}, "files": [{"sha": "b1c8ecb56733cf34473566a4eeeccba81a005c39", "filename": "libphobos/configure", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eae7549b8a350b92435be904efed195bd190bae/libphobos%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eae7549b8a350b92435be904efed195bd190bae/libphobos%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fconfigure?ref=6eae7549b8a350b92435be904efed195bd190bae", "patch": "@@ -14422,6 +14422,8 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n \n \n+\n+\n   ac_ext=c\n ac_cpp='$CPP $CPPFLAGS'\n ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n@@ -14430,17 +14432,29 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for minfo section bracketing\" >&5\n $as_echo_n \"checking for minfo section bracketing... \" >&6; }\n+  case \"$druntime_cv_target_os\" in\n+      darwin*)\n+\tsection=\"__DATA,__minfodata\"\n+\tstart=\"section\\$start\\$__DATA\\$__minfodata\"\n+\tstop=\"section\\$end\\$__DATA\\$__minfodata\"\n+\t;;\n+      *)\n+\tsection=\"minfo\"\n+\tstart=\"__start_minfo\"\n+\tstop=\"__stop_minfo\"\n+\t;;\n+  esac\n   cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n \n-    void* module_info_ptr __attribute__((section (\"minfo\")));\n-    extern void* __start_minfo __attribute__((visibility (\"hidden\")));\n-    extern void* __stop_minfo __attribute__((visibility (\"hidden\")));\n+    void* module_info_ptr __attribute__((section (\"$section\")));\n+    extern void* start_minfo __asm__(\"$start\") __attribute__((visibility (\"hidden\")));\n+    extern void* stop_minfo __asm__(\"$stop\") __attribute__((visibility (\"hidden\")));\n \n     int main()\n     {\n         // Never run, just to prevent compiler from optimizing access\n-        return &__start_minfo == &__stop_minfo;\n+        return (int)(&stop_minfo - &start_minfo);\n     }\n \n _ACEOF"}, {"sha": "a2e2bff9e44699a44b60351a836e5d7c28e07fc3", "filename": "libphobos/libdruntime/Makefile.am", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eae7549b8a350b92435be904efed195bd190bae/libphobos%2Flibdruntime%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eae7549b8a350b92435be904efed195bd190bae/libphobos%2Flibdruntime%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMakefile.am?ref=6eae7549b8a350b92435be904efed195bd190bae", "patch": "@@ -206,19 +206,19 @@ DRUNTIME_DSOURCES_BIONIC = core/sys/bionic/err.d \\\n \tcore/sys/bionic/fcntl.d core/sys/bionic/stdlib.d \\\n \tcore/sys/bionic/string.d core/sys/bionic/unistd.d\n \n-DRUNTIME_DSOURCES_DARWIN = core/sys/darwin/crt_externs.d \\\n-\tcore/sys/darwin/dlfcn.d core/sys/darwin/err.d \\\n-\tcore/sys/darwin/execinfo.d core/sys/darwin/fcntl.d \\\n-\tcore/sys/darwin/ifaddrs.d core/sys/darwin/mach/dyld.d \\\n-\tcore/sys/darwin/mach/getsect.d core/sys/darwin/mach/kern_return.d \\\n-\tcore/sys/darwin/mach/loader.d core/sys/darwin/mach/nlist.d \\\n-\tcore/sys/darwin/mach/port.d core/sys/darwin/mach/semaphore.d \\\n-\tcore/sys/darwin/mach/stab.d core/sys/darwin/mach/thread_act.d \\\n-\tcore/sys/darwin/netinet/in_.d core/sys/darwin/pthread.d \\\n-\tcore/sys/darwin/stdlib.d core/sys/darwin/string.d \\\n-\tcore/sys/darwin/sys/attr.d core/sys/darwin/sys/cdefs.d \\\n-\tcore/sys/darwin/sys/event.d core/sys/darwin/sys/mman.d \\\n-\tcore/sys/darwin/sys/sysctl.d\n+DRUNTIME_DSOURCES_DARWIN = core/sys/darwin/config.d \\\n+\tcore/sys/darwin/crt_externs.d core/sys/darwin/dlfcn.d \\\n+\tcore/sys/darwin/err.d core/sys/darwin/execinfo.d \\\n+\tcore/sys/darwin/fcntl.d core/sys/darwin/ifaddrs.d \\\n+\tcore/sys/darwin/mach/dyld.d core/sys/darwin/mach/getsect.d \\\n+\tcore/sys/darwin/mach/kern_return.d core/sys/darwin/mach/loader.d \\\n+\tcore/sys/darwin/mach/nlist.d core/sys/darwin/mach/port.d \\\n+\tcore/sys/darwin/mach/semaphore.d core/sys/darwin/mach/stab.d \\\n+\tcore/sys/darwin/mach/thread_act.d core/sys/darwin/netinet/in_.d \\\n+\tcore/sys/darwin/pthread.d core/sys/darwin/stdlib.d \\\n+\tcore/sys/darwin/string.d core/sys/darwin/sys/attr.d \\\n+\tcore/sys/darwin/sys/cdefs.d core/sys/darwin/sys/event.d \\\n+\tcore/sys/darwin/sys/mman.d core/sys/darwin/sys/sysctl.d\n \n DRUNTIME_DSOURCES_DRAGONFLYBSD = core/sys/dragonflybsd/dlfcn.d \\\n \tcore/sys/dragonflybsd/err.d core/sys/dragonflybsd/execinfo.d \\"}, {"sha": "cb2e372bca0bbe646ccb930796c4f5a9fe58dcf7", "filename": "libphobos/libdruntime/Makefile.in", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eae7549b8a350b92435be904efed195bd190bae/libphobos%2Flibdruntime%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eae7549b8a350b92435be904efed195bd190bae/libphobos%2Flibdruntime%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMakefile.in?ref=6eae7549b8a350b92435be904efed195bd190bae", "patch": "@@ -256,11 +256,11 @@ am__objects_3 = core/sys/posix/aio.lo core/sys/posix/arpa/inet.lo \\\n \tcore/sys/posix/time.lo core/sys/posix/ucontext.lo \\\n \tcore/sys/posix/unistd.lo core/sys/posix/utime.lo\n @DRUNTIME_OS_POSIX_TRUE@am__objects_4 = $(am__objects_3)\n-am__objects_5 = core/sys/darwin/crt_externs.lo \\\n-\tcore/sys/darwin/dlfcn.lo core/sys/darwin/err.lo \\\n-\tcore/sys/darwin/execinfo.lo core/sys/darwin/fcntl.lo \\\n-\tcore/sys/darwin/ifaddrs.lo core/sys/darwin/mach/dyld.lo \\\n-\tcore/sys/darwin/mach/getsect.lo \\\n+am__objects_5 = core/sys/darwin/config.lo \\\n+\tcore/sys/darwin/crt_externs.lo core/sys/darwin/dlfcn.lo \\\n+\tcore/sys/darwin/err.lo core/sys/darwin/execinfo.lo \\\n+\tcore/sys/darwin/fcntl.lo core/sys/darwin/ifaddrs.lo \\\n+\tcore/sys/darwin/mach/dyld.lo core/sys/darwin/mach/getsect.lo \\\n \tcore/sys/darwin/mach/kern_return.lo \\\n \tcore/sys/darwin/mach/loader.lo core/sys/darwin/mach/nlist.lo \\\n \tcore/sys/darwin/mach/port.lo core/sys/darwin/mach/semaphore.lo \\\n@@ -843,19 +843,19 @@ DRUNTIME_DSOURCES_BIONIC = core/sys/bionic/err.d \\\n \tcore/sys/bionic/fcntl.d core/sys/bionic/stdlib.d \\\n \tcore/sys/bionic/string.d core/sys/bionic/unistd.d\n \n-DRUNTIME_DSOURCES_DARWIN = core/sys/darwin/crt_externs.d \\\n-\tcore/sys/darwin/dlfcn.d core/sys/darwin/err.d \\\n-\tcore/sys/darwin/execinfo.d core/sys/darwin/fcntl.d \\\n-\tcore/sys/darwin/ifaddrs.d core/sys/darwin/mach/dyld.d \\\n-\tcore/sys/darwin/mach/getsect.d core/sys/darwin/mach/kern_return.d \\\n-\tcore/sys/darwin/mach/loader.d core/sys/darwin/mach/nlist.d \\\n-\tcore/sys/darwin/mach/port.d core/sys/darwin/mach/semaphore.d \\\n-\tcore/sys/darwin/mach/stab.d core/sys/darwin/mach/thread_act.d \\\n-\tcore/sys/darwin/netinet/in_.d core/sys/darwin/pthread.d \\\n-\tcore/sys/darwin/stdlib.d core/sys/darwin/string.d \\\n-\tcore/sys/darwin/sys/attr.d core/sys/darwin/sys/cdefs.d \\\n-\tcore/sys/darwin/sys/event.d core/sys/darwin/sys/mman.d \\\n-\tcore/sys/darwin/sys/sysctl.d\n+DRUNTIME_DSOURCES_DARWIN = core/sys/darwin/config.d \\\n+\tcore/sys/darwin/crt_externs.d core/sys/darwin/dlfcn.d \\\n+\tcore/sys/darwin/err.d core/sys/darwin/execinfo.d \\\n+\tcore/sys/darwin/fcntl.d core/sys/darwin/ifaddrs.d \\\n+\tcore/sys/darwin/mach/dyld.d core/sys/darwin/mach/getsect.d \\\n+\tcore/sys/darwin/mach/kern_return.d core/sys/darwin/mach/loader.d \\\n+\tcore/sys/darwin/mach/nlist.d core/sys/darwin/mach/port.d \\\n+\tcore/sys/darwin/mach/semaphore.d core/sys/darwin/mach/stab.d \\\n+\tcore/sys/darwin/mach/thread_act.d core/sys/darwin/netinet/in_.d \\\n+\tcore/sys/darwin/pthread.d core/sys/darwin/stdlib.d \\\n+\tcore/sys/darwin/string.d core/sys/darwin/sys/attr.d \\\n+\tcore/sys/darwin/sys/cdefs.d core/sys/darwin/sys/event.d \\\n+\tcore/sys/darwin/sys/mman.d core/sys/darwin/sys/sysctl.d\n \n DRUNTIME_DSOURCES_DRAGONFLYBSD = core/sys/dragonflybsd/dlfcn.d \\\n \tcore/sys/dragonflybsd/err.d core/sys/dragonflybsd/execinfo.d \\\n@@ -1352,6 +1352,7 @@ core/sys/posix/utime.lo: core/sys/posix/$(am__dirstamp)\n core/sys/darwin/$(am__dirstamp):\n \t@$(MKDIR_P) core/sys/darwin\n \t@: > core/sys/darwin/$(am__dirstamp)\n+core/sys/darwin/config.lo: core/sys/darwin/$(am__dirstamp)\n core/sys/darwin/crt_externs.lo: core/sys/darwin/$(am__dirstamp)\n core/sys/darwin/dlfcn.lo: core/sys/darwin/$(am__dirstamp)\n core/sys/darwin/err.lo: core/sys/darwin/$(am__dirstamp)"}, {"sha": "74395b04014d0b9d266c0239538035e223af6c20", "filename": "libphobos/libdruntime/config/powerpc/switchcontext.S", "status": "modified", "additions": 276, "deletions": 2, "changes": 278, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eae7549b8a350b92435be904efed195bd190bae/libphobos%2Flibdruntime%2Fconfig%2Fpowerpc%2Fswitchcontext.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eae7549b8a350b92435be904efed195bd190bae/libphobos%2Flibdruntime%2Fconfig%2Fpowerpc%2Fswitchcontext.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fconfig%2Fpowerpc%2Fswitchcontext.S?ref=6eae7549b8a350b92435be904efed195bd190bae", "patch": "@@ -24,7 +24,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #include \"../common/threadasm.S\"\n \n-#if !defined(__PPC64__)\n+#if !defined(__PPC64__) && !defined(__MACH__)\n \n /**\n  * Performs a context switch.\n@@ -151,4 +151,278 @@ CSYM(fiber_switchContext):\n     .cfi_endproc\n     .size CSYM(fiber_switchContext),.-CSYM(fiber_switchContext)\n \n-#endif /* !defined(__PPC64__) */\n+#elif defined(__MACH__)\n+\n+/* Implementation for Darwin/macOS preserving callee-saved regs.\n+\n+   FIXME : There is no unwind frame.\n+   FIXME : not sure if we should save the vsave reg (perhaps using the slot we have\n+           r11 in at present).  */\n+\n+/* Darwin has a red zone (220 bytes for PPC 288 for PPC64) which we can write\n+   to before the stack is updated without worrying about it being clobbered by\n+   signals or hardware interrupts.\n+\n+   The stack will be 16byte aligned on entry with:\n+\t\t\t\t\t\t  PPC\tPPC64\n+   SP-> +---------------------------------------+\n+\t| back chain to caller\t\t\t| 0\t  0\n+\t+---------------------------------------+\n+\t| slot to save CR\t\t\t| 4       8\n+\t+---------------------------------------+\n+\t| slot to save LR\t\t\t| 8       16\n+\t+---------------------------------------+\n+\t| etc.. etc.. as per C calling conv.    |  */\n+\n+# if __PPC64__\n+#  define LD ld\n+#  define ST std\n+#  define STU stdu\n+#  define SZ 8\n+#  define MACHINE ppc64\n+#  define RED_ZONE 288\n+# else\n+#  define LD lwz\n+#  define ST stw\n+#  define STU stwu\n+#  define SZ 4\n+#  define MACHINE ppc7400\n+#  define RED_ZONE 220\n+# endif\n+\n+# define SAVE_VECTORS 0\n+/**\n+ * Performs a context switch.\n+ *\n+ * r3 - old context pointer\n+ * r4 - new context pointer\n+ *\n+ */\n+    .machine MACHINE\n+    .text\n+    .globl CSYM(fiber_switchContext)\n+    .align 2\n+CSYM(fiber_switchContext):\n+LFB0:\n+    /* Get the link reg. */\n+    mflr  r0\n+    /* Get the callee-saved crs (well all of them, actually). */\n+    mfcr  r12\n+\n+    /* Save GPRs, we save the static chain here too although it is not clear if we need to.  */\n+    ST    r31, ( -1 * SZ)(r1)\n+    ST    r30, ( -2 * SZ)(r1)\n+    ST    r29, ( -3 * SZ)(r1)\n+    ST    r28, ( -4 * SZ)(r1)\n+    ST    r27, ( -5 * SZ)(r1)\n+    ST    r26, ( -6 * SZ)(r1)\n+    ST    r25, ( -7 * SZ)(r1)\n+    ST    r24, ( -8 * SZ)(r1)\n+    ST    r23, ( -9 * SZ)(r1)\n+    ST    r22, (-10 * SZ)(r1)\n+    ST    r21, (-11 * SZ)(r1)\n+    ST    r20, (-12 * SZ)(r1)\n+    ST    r19, (-13 * SZ)(r1)\n+    ST    r18, (-14 * SZ)(r1)\n+    ST    r17, (-15 * SZ)(r1)\n+    ST    r16, (-16 * SZ)(r1)\n+    ST    r15, (-17 * SZ)(r1)\n+    ST    r14, (-18 * SZ)(r1)\n+    ST    r13, (-19 * SZ)(r1)\n+\n+    /* Save the lr and cr into the normal function linkage area.  */\n+    ST    r0, 2*SZ(r1)\n+    ST    r12, SZ(r1)\n+\n+    /* We update the stack pointer here, since we do not want the GC to\n+       scan the floating point registers. We are still 16-byte aligned. */\n+    STU   r11, (-20 * SZ)(r1)\n+\n+    /* Update the stack pointer in the old context as per comment above. */\n+    ST    r1, 0(r3)\n+\n+    /* Save FPRs - same for PPC and PPC64 */\n+    stfd  f14, (-18 * 8)(r1)\n+    stfd  f15, (-17 * 8)(r1)\n+    stfd  f16, (-16 * 8)(r1)\n+    stfd  f17, (-15 * 8)(r1)\n+    stfd  f18, (-14 * 8)(r1)\n+    stfd  f19, (-13 * 8)(r1)\n+    stfd  f20, (-12 * 8)(r1)\n+    stfd  f21, (-11 * 8)(r1)\n+    stfd  f22, (-10 * 8)(r1)\n+    stfd  f23, ( -9 * 8)(r1)\n+    stfd  f24, ( -8 * 8)(r1)\n+    stfd  f25, ( -7 * 8)(r1)\n+    stfd  f26, ( -6 * 8)(r1)\n+    stfd  f27, ( -5 * 8)(r1)\n+    stfd  f28, ( -4 * 8)(r1)\n+    stfd  f29, ( -3 * 8)(r1)\n+    stfd  f30, ( -2 * 8)(r1)\n+    stfd  f31, ( -1 * 8)(r1)\n+\n+#if SAVE_VECTORS\n+    /* We are still 16byte aligned - so we are ok for vector saves.\n+       but the combined size of the vectors (12 x 16) + the FPRs (144) exceeds the\n+       red zone size so we need to adjust the stack again - note this means careful\n+       ordering is needed on the restore.  */\n+\n+    addi  r1, r1, -(12*16+18*8)\n+    li    r11, 0\n+    stvx  v20,r11,r1\n+    addi  r11, r11, 16\n+    stvx  v21,r11,r1\n+    addi  r11, r11, 16\n+    stvx  v22,r11,r1\n+    addi  r11, r11, 16\n+    stvx  v23,r11,r1\n+    addi  r11, r11, 16\n+    stvx  v24,r11,r1\n+    addi  r11, r11, 16\n+    stvx  v25,r11,r1\n+    addi  r11, r11, 16\n+    stvx  v26,r11,r1\n+    addi  r11, r11, 16\n+    stvx  v27,r11,r1\n+    addi  r11, r11, 16\n+    stvx  v28,r11,r1\n+    addi  r11, r11, 16\n+    stvx  v29,r11,r1\n+    addi  r11, r11, 16\n+    stvx  v30,r11,r1\n+    addi  r11, r11, 16\n+    stvx  v31,r11,r1\n+\n+    /* Now do the same thing in reverse - starting with r4 pointing to\n+       the block of GPRs - stage 1 point to the saved vectors and fprs. */\n+\n+    addi  r1, r4, -(12*16+18*8)\n+    li    r11, 0\n+    lvx   v20,r11,r1\n+    addi  r11, r11, 16\n+    lvx   v21,r11,r1\n+    addi  r11, r11, 16\n+    lvx   v22,r11,r1\n+    addi  r11, r11, 16\n+    lvx   v23,r11,r1\n+    addi  r11, r11, 16\n+    lvx   v24,r11,r1\n+    addi  r11, r11, 16\n+    lvx   v25,r11,r1\n+    addi  r11, r11, 16\n+    lvx   v26,r11,r1\n+    addi  r11, r11, 16\n+    lvx   v27,r11,r1\n+    addi  r11, r11, 16\n+    lvx   v28,r11,r1\n+    addi  r11, r11, 16\n+    lvx   v29,r11,r1\n+    addi  r11, r11, 16\n+    lvx   v30,r11,r1\n+    addi  r11, r11, 16\n+    lvx   v31,r11,r1\n+#endif\n+\n+    /* Now it is safe to update the stack pointer since the combined\n+       size of the GPRs and FPRs will not exceed the red zone.  */\n+\n+    addi  r1, r4, 20 * SZ\n+\n+    /* Restore FPRs */\n+    lfd  f14, (-18 * 8)(r4)\n+    lfd  f15, (-17 * 8)(r4)\n+    lfd  f16, (-16 * 8)(r4)\n+    lfd  f17, (-15 * 8)(r4)\n+    lfd  f18, (-14 * 8)(r4)\n+    lfd  f19, (-13 * 8)(r4)\n+    lfd  f20, (-12 * 8)(r4)\n+    lfd  f21, (-11 * 8)(r4)\n+    lfd  f22, (-10 * 8)(r4)\n+    lfd  f23, ( -9 * 8)(r4)\n+    lfd  f24, ( -8 * 8)(r4)\n+    lfd  f25, ( -7 * 8)(r4)\n+    lfd  f26, ( -6 * 8)(r4)\n+    lfd  f27, ( -5 * 8)(r4)\n+    lfd  f28, ( -4 * 8)(r4)\n+    lfd  f29, ( -3 * 8)(r4)\n+    lfd  f30, ( -2 * 8)(r4)\n+    lfd  f31, ( -1 * 8)(r4)\n+\n+    /* Pick up lr and cr */\n+    LD    r0, 2*SZ(r1)\n+    LD    r12, SZ(r1)\n+\n+    /* Restore GPRs */\n+    LD     r11, (-20 * SZ)(r1)\n+    LD     r13, (-19 * SZ)(r1)\n+    LD     r14, (-18 * SZ)(r1)\n+    LD     r15, (-17 * SZ)(r1)\n+    LD     r16, (-16 * SZ)(r1)\n+    LD     r17, (-15 * SZ)(r1)\n+    LD     r18, (-14 * SZ)(r1)\n+    LD     r19, (-13 * SZ)(r1)\n+    LD     r20, (-12 * SZ)(r1)\n+    LD     r21, (-11 * SZ)(r1)\n+    LD     r22, (-10 * SZ)(r1)\n+    LD     r23, ( -9 * SZ)(r1)\n+    LD     r24, ( -8 * SZ)(r1)\n+    LD     r25, ( -7 * SZ)(r1)\n+    LD     r26, ( -6 * SZ)(r1)\n+    LD     r27, ( -5 * SZ)(r1)\n+    LD     r28, ( -4 * SZ)(r1)\n+    LD     r29, ( -3 * SZ)(r1)\n+    LD     r30, ( -2 * SZ)(r1)\n+    LD     r31, ( -1 * SZ)(r1)\n+\n+    /* Set cr and lr */\n+    mtcr  r12\n+    mtlr  r0\n+\n+    /* Return and switch context */\n+    blr\n+LFE0:\n+\n+/* Minimal CFI / FDE which does not describe the stacking of the GPRs - but only that\n+   the routine has been entered/exited.  */\n+\n+# if __PPC64__\n+#  define DATA_ALIGN 0x78\n+#  define ALIGN_SIZE 3\n+#  define ADDRD .quad\n+# else\n+#  define DATA_ALIGN 0x7c\n+#  define ALIGN_SIZE 3\n+#  define ADDRD .long\n+# endif\n+\n+\t.section __TEXT,__eh_frame,coalesced,no_toc+strip_static_syms+live_support\n+EH_frame1:\n+\t.set L$set$0,LECIE1-LSCIE1\n+\t.long L$set$0\t; Length of Common Information Entry\n+LSCIE1:\n+\t.long\t0\t; CIE Identifier Tag\n+\t.byte\t0x3\t; CIE Version\n+\t.ascii \"zR\\0\"\t; CIE Augmentation\n+\t.byte\t0x1\t; uleb128 0x1; CIE Code Alignment Factor\n+\t.byte\tDATA_ALIGN\t; sleb128 -4/-8; CIE Data Alignment Factor\n+\t.byte\t0x41\t; uleb128 0x41; CIE RA Column\n+\t.byte\t0x1\t; uleb128 0x1; Augmentation size\n+\t.byte\t0x10\t; FDE Encoding (pcrel)\n+\t.byte\t0xc\t; DW_CFA_def_cfa\n+\t.byte\t0x1\t; uleb128 0x1\n+\t.byte\t0\t; uleb128 0\n+\t.p2align ALIGN_SIZE,0\n+LECIE1:\n+LSFDE1:\n+\t.set L$set$1,LEFDE1-LASFDE1\n+\t.long L$set$1\t; FDE Length\n+LASFDE1:\n+\t.long\tLASFDE1-EH_frame1\t; FDE CIE offset\n+\tADDRD\tLFB0-.\t; FDE initial location\n+\t.set L$set$2,LFE0-LFB0\n+\tADDRD L$set$2\t; FDE address range\n+\t.byte\t0\t; uleb128 0; Augmentation size\n+\t.p2align ALIGN_SIZE,0\n+LEFDE1:\n+\n+#endif /* defined(__MACH__) */"}, {"sha": "9f4befdb49c58f1b035491fe02dcd77964e73cd2", "filename": "libphobos/libdruntime/config/x86/switchcontext.S", "status": "modified", "additions": 156, "deletions": 3, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eae7549b8a350b92435be904efed195bd190bae/libphobos%2Flibdruntime%2Fconfig%2Fx86%2Fswitchcontext.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eae7549b8a350b92435be904efed195bd190bae/libphobos%2Flibdruntime%2Fconfig%2Fx86%2Fswitchcontext.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fconfig%2Fx86%2Fswitchcontext.S?ref=6eae7549b8a350b92435be904efed195bd190bae", "patch": "@@ -29,7 +29,11 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n # include <cet.h>\n #endif\n \n-#if defined(__i386__) && !defined(__CET__)\n+#if !defined(__CET__)\n+\n+# if defined(__ELF__)\n+\n+#  if defined(__i386__)\n \n     .text\n     .globl CSYM(fiber_switchContext)\n@@ -63,7 +67,9 @@ CSYM(fiber_switchContext):\n     .cfi_endproc\n     .size CSYM(fiber_switchContext),.-CSYM(fiber_switchContext)\n \n-#elif defined(__x86_64__) && !defined(__ILP32__) && !defined(__CET__)\n+#  endif /* defined(__ELF__) && defined(__i386__) */\n+\n+#  if defined(__x86_64__) && !defined(__ILP32__)\n \n     .text\n     .globl CSYM(fiber_switchContext)\n@@ -98,4 +104,151 @@ CSYM(fiber_switchContext):\n     .cfi_endproc\n    .size CSYM(fiber_switchContext),.-CSYM(fiber_switchContext)\n \n-#endif\n+#  endif /* defined(__ELF__) && defined(__x86_64__) && !defined(__ILP32__) */\n+\n+# endif /* defined(__ELF__) */\n+\n+# if defined(__MACH__)\n+\n+#  if defined(__i386__)\n+\n+    .text\n+    .globl CSYM(fiber_switchContext)\n+    .p2align 4\n+CSYM(fiber_switchContext):\n+LFB0:\n+    // save current stack state\n+    push %ebp\n+    mov  %esp, %ebp\n+    push %edi\n+    push %esi\n+    push %ebx\n+    push %eax\n+\n+    // store oldp again with more accurate address\n+    mov 8(%ebp), %eax\n+    mov %esp, (%eax)\n+    // load newp to begin context switch\n+    mov 12(%ebp), %esp\n+\n+    // load saved state from new stack\n+    pop %eax\n+    pop %ebx\n+    pop %esi\n+    pop %edi\n+    pop %ebp\n+\n+    // 'return' to complete switch\n+    ret\n+LFE0:\n+\n+/* CFI */\n+        .section __TEXT,__eh_frame,coalesced,no_toc+strip_static_syms+live_support\n+EH_frame1:\n+        .set L$set$0,LECIE1-LSCIE1\n+        .long L$set$0   # Length of Common Information Entry\n+LSCIE1:\n+        .long   0       # CIE Identifier Tag\n+        .byte   0x1     # CIE Version\n+        .ascii \"zR\\0\"   # CIE Augmentation\n+        .byte   0x1     # uleb128 0x1; CIE Code Alignment Factor\n+        .byte   0x7c    # sleb128 -4; CIE Data Alignment Factor\n+        .byte   0x8     # CIE RA Column\n+        .byte   0x1     # uleb128 0x1; Augmentation size\n+        .byte   0x10    # FDE Encoding (pcrel)\n+        .byte   0xc     # DW_CFA_def_cfa\n+        .byte   0x5     # uleb128 0x5\n+        .byte   0x4     # uleb128 0x4\n+        .byte   0x88    # DW_CFA_offset, column 0x8\n+        .byte   0x1     # uleb128 0x1\n+        .p2align 2,0\n+LECIE1:\n+\n+/* minimal FDE - does not record the stack frame changes. */\n+LSFDE1:\n+        .set L$set$1,LEFDE1-LASFDE1\n+        .long L$set$1   # FDE Length\n+LASFDE1:\n+        .long   LASFDE1-EH_frame1       # FDE CIE offset\n+        .long   LFB0-.  # FDE initial location\n+        .set L$set$2,LFE0-LFB0\n+        .long L$set$2   # FDE address range\n+        .byte   0       # uleb128 0; Augmentation size\n+        .p2align 2,0\n+LEFDE1:\n+\n+#  endif /* defined(__MACH__) && defined(__i386__) */\n+\n+#  if defined(__x86_64__) && !defined(__ILP32__)\n+\n+    .text\n+    .globl CSYM(fiber_switchContext)\n+    .p2align 4\n+CSYM(fiber_switchContext):\n+LFB0:\n+    // Save current stack state.save current stack state\n+    push %rbp\n+    mov  %rsp, %rbp\n+    push %r15\n+    push %r14\n+    push %r13\n+    push %r12\n+    push %rbx\n+\n+    // store oldp again with more accurate address\n+    mov %rsp, (%rdi)\n+    // load newp to begin context switch\n+    mov %rsi, %rsp\n+\n+    // load saved state from new stack\n+    pop %rbx\n+    pop %r12\n+    pop %r13\n+    pop %r14\n+    pop %r15\n+    pop %rbp\n+\n+    // 'return' to complete switch\n+    ret\n+LFE0:\n+\n+/* CFI */\n+        .section __TEXT,__eh_frame,coalesced,no_toc+strip_static_syms+live_support\n+EH_frame1:\n+        .set L$set$0,LECIE1-LSCIE1\n+        .long L$set$0   # Length of Common Information Entry\n+LSCIE1:\n+        .long   0       # CIE Identifier Tag\n+        .byte   0x1     # CIE Version\n+        .ascii \"zR\\0\"   # CIE Augmentation\n+        .byte   0x1     # uleb128 0x1; CIE Code Alignment Factor\n+        .byte   0x78    # sleb128 -8; CIE Data Alignment Factor\n+        .byte   0x10    # CIE RA Column\n+        .byte   0x1     # uleb128 0x1; Augmentation size\n+        .byte   0x10    # FDE Encoding (pcrel)\n+        .byte   0xc     # DW_CFA_def_cfa\n+        .byte   0x7     # uleb128 0x7\n+        .byte   0x8     # uleb128 0x8\n+        .byte   0x90    # DW_CFA_offset, column 0x10\n+        .byte   0x1     # uleb128 0x1\n+        .p2align 3,0\n+LECIE1:\n+\n+/* minimal FDE - does not record the stack frame changes. */\n+LSFDE1:\n+        .set L$set$1,LEFDE1-LASFDE1\n+        .long L$set$1   # FDE Length\n+LASFDE1:\n+        .long   LASFDE1-EH_frame1       # FDE CIE offset\n+        .quad   LFB0-.  # FDE initial location\n+        .set L$set$2,LFE0-LFB0\n+        .quad L$set$2   # FDE address range\n+        .byte   0       # uleb128 0; Augmentation size\n+        .p2align 3,0\n+LEFDE1:\n+\n+#  endif /* defined(__MACH__) && defined(__x86_64__) && !defined(__ILP32__) */\n+\n+# endif /* defined (__MACH__) */\n+\n+#endif /* !defined(__CET__) */"}, {"sha": "87f3fd4dae64c4deb1d9fcf26877d21a96698b78", "filename": "libphobos/libdruntime/core/sys/darwin/config.d", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eae7549b8a350b92435be904efed195bd190bae/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fconfig.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eae7549b8a350b92435be904efed195bd190bae/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fconfig.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fconfig.d?ref=6eae7549b8a350b92435be904efed195bd190bae", "patch": "@@ -0,0 +1,53 @@\n+/**\n+ * D header file for Darwin.\n+ *\n+ * Copyright: Copyright (c) 2021 D Language Foundation\n+ * Authors: Iain Buclaw\n+ */\n+module core.sys.darwin.config;\n+\n+version (OSX)\n+    version = Darwin;\n+else version (iOS)\n+    version = Darwin;\n+else version (TVOS)\n+    version = Darwin;\n+else version (WatchOS)\n+    version = Darwin;\n+\n+version (Darwin):\n+\n+public import core.sys.posix.config;\n+\n+enum __MAC_10_0    = 100000;\n+enum __MAC_10_1    = 100100;\n+enum __MAC_10_2    = 100200;\n+enum __MAC_10_3    = 100300;\n+enum __MAC_10_4    = 100400;\n+enum __MAC_10_5    = 100500;\n+enum __MAC_10_6    = 100600;\n+enum __MAC_10_7    = 100700;\n+enum __MAC_10_8    = 100800;\n+enum __MAC_10_9    = 100900;\n+enum __MAC_10_10   = 101000;\n+enum __MAC_10_10_2 = 101002;\n+enum __MAC_10_10_3 = 101003;\n+enum __MAC_10_11   = 101100;\n+enum __MAC_10_11_2 = 101102;\n+enum __MAC_10_11_3 = 101103;\n+enum __MAC_10_11_4 = 101104;\n+enum __MAC_10_12   = 101200;\n+enum __MAC_10_12_1 = 101201;\n+enum __MAC_10_12_2 = 101202;\n+enum __MAC_10_12_4 = 101204;\n+enum __MAC_10_13   = 101300;\n+enum __MAC_10_13_1 = 101301;\n+enum __MAC_10_13_2 = 101302;\n+enum __MAC_10_13_4 = 101304;\n+enum __MAC_10_14   = 101400;\n+enum __MAC_10_14_1 = 101401;\n+enum __MAC_10_14_4 = 101404;\n+enum __MAC_10_15   = 101500;\n+enum __MAC_10_15_1 = 101501;\n+enum __MAC_10_16   = 101501;\n+enum __MAC_11_0    = 110000;"}, {"sha": "67d9937e31ad4a49eab4b251c1948ecaba1b7f08", "filename": "libphobos/libdruntime/core/thread/fiber.d", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eae7549b8a350b92435be904efed195bd190bae/libphobos%2Flibdruntime%2Fcore%2Fthread%2Ffiber.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eae7549b8a350b92435be904efed195bd190bae/libphobos%2Flibdruntime%2Fcore%2Fthread%2Ffiber.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fthread%2Ffiber.d?ref=6eae7549b8a350b92435be904efed195bd190bae", "patch": "@@ -883,6 +883,7 @@ class Fiber\n      */\n     static Fiber getThis() @safe nothrow @nogc\n     {\n+        version (GNU) pragma(inline, false);\n         return sm_this;\n     }\n \n@@ -1731,6 +1732,11 @@ unittest\n // Multiple threads running shared fibers\n version (PPC)   version = UnsafeFiberMigration;\n version (PPC64) version = UnsafeFiberMigration;\n+version (OSX)\n+{\n+    version (X86)    version = UnsafeFiberMigration;\n+    version (X86_64) version = UnsafeFiberMigration;\n+}\n \n version (UnsafeFiberMigration)\n {"}, {"sha": "0fffc7ed3f7d15bf020d297fd8cd397ca94ba393", "filename": "libphobos/libdruntime/core/thread/osthread.d", "status": "modified", "additions": 92, "deletions": 2, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eae7549b8a350b92435be904efed195bd190bae/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fosthread.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eae7549b8a350b92435be904efed195bd190bae/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fosthread.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fosthread.d?ref=6eae7549b8a350b92435be904efed195bd190bae", "patch": "@@ -1396,8 +1396,98 @@ in (fn)\n     void *sp = void;\n     version (GNU)\n     {\n-        __builtin_unwind_init();\n-        sp = &sp;\n+        // The generic solution below using a call to __builtin_unwind_init ()\n+        // followed by an assignment to sp has two issues:\n+        // 1) On some archs it stores a huge amount of FP and Vector state which\n+        //    is not the subject of the scan - and, indeed might produce false\n+        //    hits.\n+        // 2) Even on archs like X86, where there are no callee-saved FPRs/VRs there\n+        //    tend to be 'holes' in the frame allocations (to deal with alignment) which\n+        //    also will  contain random data which could produce false positives.\n+        // This solution stores only the integer callee-saved registers.\n+        version (X86)\n+        {\n+            void*[3] regs = void;\n+            asm pure nothrow @nogc\n+            {\n+                \"movl   %%ebx, %0\" : \"=m\" (regs[0]);\n+                \"movl   %%esi, %0\" : \"=m\" (regs[1]);\n+                \"movl   %%edi, %0\" : \"=m\" (regs[2]);\n+            }\n+            sp = cast(void*)&regs[0];\n+        }\n+        else version (X86_64)\n+        {\n+            void*[5] regs = void;\n+            asm pure nothrow @nogc\n+            {\n+                \"movq   %%rbx, %0\" : \"=m\" (regs[0]);\n+                \"movq   %%r12, %0\" : \"=m\" (regs[1]);\n+                \"movq   %%r13, %0\" : \"=m\" (regs[2]);\n+                \"movq   %%r14, %0\" : \"=m\" (regs[3]);\n+                \"movq   %%r15, %0\" : \"=m\" (regs[4]);\n+            }\n+            sp = cast(void*)&regs[0];\n+        }\n+        else version (PPC)\n+        {\n+            void*[19] regs = void;\n+            asm pure nothrow @nogc\n+            {\n+                \"stw r13, %0\" : \"=m\" (regs[ 0]);\n+                \"stw r14, %0\" : \"=m\" (regs[ 1]);\n+                \"stw r15, %0\" : \"=m\" (regs[ 2]);\n+                \"stw r16, %0\" : \"=m\" (regs[ 3]);\n+                \"stw r17, %0\" : \"=m\" (regs[ 4]);\n+                \"stw r18, %0\" : \"=m\" (regs[ 5]);\n+                \"stw r19, %0\" : \"=m\" (regs[ 6]);\n+                \"stw r20, %0\" : \"=m\" (regs[ 7]);\n+                \"stw r21, %0\" : \"=m\" (regs[ 9]);\n+                \"stw r22, %0\" : \"=m\" (regs[ 9]);\n+                \"stw r23, %0\" : \"=m\" (regs[10]);\n+                \"stw r24, %0\" : \"=m\" (regs[11]);\n+                \"stw r25, %0\" : \"=m\" (regs[12]);\n+                \"stw r26, %0\" : \"=m\" (regs[13]);\n+                \"stw r27, %0\" : \"=m\" (regs[14]);\n+                \"stw r28, %0\" : \"=m\" (regs[15]);\n+                \"stw r29, %0\" : \"=m\" (regs[16]);\n+                \"stw r30, %0\" : \"=m\" (regs[17]);\n+                \"stw r31, %0\" : \"=m\" (regs[18]);\n+            }\n+            sp = cast(void*)&regs[0];\n+        }\n+        else version (PPC64)\n+        {\n+            void*[19] regs = void;\n+            asm pure nothrow @nogc\n+            {\n+                \"std r13, %0\" : \"=m\" (regs[ 0]);\n+                \"std r14, %0\" : \"=m\" (regs[ 1]);\n+                \"std r15, %0\" : \"=m\" (regs[ 2]);\n+                \"std r16, %0\" : \"=m\" (regs[ 3]);\n+                \"std r17, %0\" : \"=m\" (regs[ 4]);\n+                \"std r18, %0\" : \"=m\" (regs[ 5]);\n+                \"std r19, %0\" : \"=m\" (regs[ 6]);\n+                \"std r20, %0\" : \"=m\" (regs[ 7]);\n+                \"std r21, %0\" : \"=m\" (regs[ 8]);\n+                \"std r22, %0\" : \"=m\" (regs[ 9]);\n+                \"std r23, %0\" : \"=m\" (regs[10]);\n+                \"std r24, %0\" : \"=m\" (regs[11]);\n+                \"std r25, %0\" : \"=m\" (regs[12]);\n+                \"std r26, %0\" : \"=m\" (regs[13]);\n+                \"std r27, %0\" : \"=m\" (regs[14]);\n+                \"std r28, %0\" : \"=m\" (regs[15]);\n+                \"std r29, %0\" : \"=m\" (regs[16]);\n+                \"std r30, %0\" : \"=m\" (regs[17]);\n+                \"std r31, %0\" : \"=m\" (regs[18]);\n+            }\n+            sp = cast(void*)&regs[0];\n+        }\n+        else\n+        {\n+            __builtin_unwind_init();\n+            sp = &sp;\n+        }\n     }\n     else version (AsmX86_Posix)\n     {"}, {"sha": "50795e444bed484c63570cce85eb5f5e14f2a082", "filename": "libphobos/libdruntime/core/thread/threadbase.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eae7549b8a350b92435be904efed195bd190bae/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fthreadbase.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eae7549b8a350b92435be904efed195bd190bae/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fthreadbase.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fthreadbase.d?ref=6eae7549b8a350b92435be904efed195bd190bae", "patch": "@@ -313,6 +313,7 @@ class ThreadBase\n         // NOTE: This function may not be called until thread_init has\n         //       completed.  See thread_suspendAll for more information\n         //       on why this might occur.\n+        version (GNU) pragma(inline, false);\n         return sm_this;\n     }\n "}, {"sha": "712f5d7bc9d16f41aa0220f22abaaeaf26c8f871", "filename": "libphobos/libdruntime/gcc/deh.d", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eae7549b8a350b92435be904efed195bd190bae/libphobos%2Flibdruntime%2Fgcc%2Fdeh.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eae7549b8a350b92435be904efed195bd190bae/libphobos%2Flibdruntime%2Fgcc%2Fdeh.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fgcc%2Fdeh.d?ref=6eae7549b8a350b92435be904efed195bd190bae", "patch": "@@ -34,11 +34,6 @@ extern(C)\n {\n     int _d_isbaseof(ClassInfo, ClassInfo);\n     void _d_createTrace(Object, void*);\n-\n-    // Not used in GDC but declaration required by rt/sections.d\n-    struct FuncTable\n-    {\n-    }\n }\n \n /**"}, {"sha": "351558dbcdabd41fa5827d6ea0403f5645d289b4", "filename": "libphobos/m4/druntime/os.m4", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eae7549b8a350b92435be904efed195bd190bae/libphobos%2Fm4%2Fdruntime%2Fos.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eae7549b8a350b92435be904efed195bd190bae/libphobos%2Fm4%2Fdruntime%2Fos.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fm4%2Fdruntime%2Fos.m4?ref=6eae7549b8a350b92435be904efed195bd190bae", "patch": "@@ -149,17 +149,31 @@ AC_DEFUN([DRUNTIME_OS_ARM_EABI_UNWINDER],\n # substitute DCFG_MINFO_BRACKETING.\n AC_DEFUN([DRUNTIME_OS_MINFO_BRACKETING],\n [\n+  AC_REQUIRE([DRUNTIME_OS_DETECT])\n+\n   AC_LANG_PUSH([C])\n   AC_MSG_CHECKING([for minfo section bracketing])\n+  case \"$druntime_cv_target_os\" in\n+      darwin*)\n+\tsection=\"__DATA,__minfodata\"\n+\tstart=\"section\\$start\\$__DATA\\$__minfodata\"\n+\tstop=\"section\\$end\\$__DATA\\$__minfodata\"\n+\t;;\n+      *)\n+\tsection=\"minfo\"\n+\tstart=\"__start_minfo\"\n+\tstop=\"__stop_minfo\"\n+\t;;\n+  esac\n   AC_LINK_IFELSE([AC_LANG_SOURCE([\n-    void* module_info_ptr __attribute__((section (\"minfo\")));\n-    extern void* __start_minfo __attribute__((visibility (\"hidden\")));\n-    extern void* __stop_minfo __attribute__((visibility (\"hidden\")));\n+    void* module_info_ptr __attribute__((section (\"$section\")));\n+    extern void* start_minfo __asm__(\"$start\") __attribute__((visibility (\"hidden\")));\n+    extern void* stop_minfo __asm__(\"$stop\") __attribute__((visibility (\"hidden\")));\n \n     int main()\n     {\n         // Never run, just to prevent compiler from optimizing access\n-        return &__start_minfo == &__stop_minfo;\n+        return (int)(&stop_minfo - &start_minfo);\n     }\n   ])],\n     [AC_MSG_RESULT([yes])"}, {"sha": "ca54a19857f185ac3011e65cf9eaf8d94c393ca4", "filename": "libphobos/testsuite/libphobos.thread/fiber_guard_page.d", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eae7549b8a350b92435be904efed195bd190bae/libphobos%2Ftestsuite%2Flibphobos.thread%2Ffiber_guard_page.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eae7549b8a350b92435be904efed195bd190bae/libphobos%2Ftestsuite%2Flibphobos.thread%2Ffiber_guard_page.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Ftestsuite%2Flibphobos.thread%2Ffiber_guard_page.d?ref=6eae7549b8a350b92435be904efed195bd190bae", "patch": "@@ -1,13 +1,15 @@\n // { dg-options \"-O0\" }\n // { dg-shouldfail \"segv or bus error\" }\n import core.thread;\n+import core.sys.posix.signal;\n import core.sys.posix.sys.mman;\n \n // this should be true for most architectures\n // (taken from core.thread)\n-version = StackGrowsDown;\n+version (GNU_StackGrowsDown)\n+    version = StackGrowsDown;\n \n-enum stackSize = 4096;\n+enum stackSize = MINSIGSTKSZ;\n \n // Simple method that causes a stack overflow\n void stackMethod()"}]}