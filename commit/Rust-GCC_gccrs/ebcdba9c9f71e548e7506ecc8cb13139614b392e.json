{"sha": "ebcdba9c9f71e548e7506ecc8cb13139614b392e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJjZGJhOWM5ZjcxZTU0OGU3NTA2ZWNjOGNiMTMxMzk2MTRiMzkyZQ==", "commit": {"author": {"name": "Pat Bernardi", "email": "bernardi@adacore.com", "date": "2019-11-14T15:45:50Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2019-11-14T15:45:50Z"}, "message": "Common ground work for vxworks7 ports updates\n\n2019-11-06  Pat Bernardi  <bernardi@adacore.com>\n            Jerome Lambourg  <lambourg@adacore.com>\n            Olivier Hainque  <hainque@adacore.com>\n\n\tgcc/\n\t* config.gcc: Add comment to introduce the TARGET_VXWORKS\n\tcommong macro definitions, conveying VXWORKS7 or 64bit general\n\tvariations.  Add a block to set gcc_cv_initfini_array\n\tunconditionally to \"yes\" for VxWorks7.\n\tconfig/vx-common.h (VXWORKS_CC1_SPEC): New macro, empty string\n\tby default.  Update some comments.\n\tconfig/vxworks.h (VXWORKS_EXTRA_LIBS_RTP): New macro, empty by\n\tdefault, to be added the end of VXWORKS_LIBS_RTP.\n\t(VXWORKS_LIBS_RTP): Replace hardcoded part by VXWORKS_BASE_LIBS_RTP\n\tand append VXWORKS_EXTRA_LIBS_RTP, both of which specific ports may\n\tredefine.\n\t(VXWORKS_NET_LIBS_RTP): Account for VxWorks7 specificities.\n\t(VXWORKS_CC1_SPEC): Common base definition, with VxWorks7 variation\n\tto account for the now available TLS abilities.\n\t(TARGET_LIBC_HAS_FUNCTION): Account for VxWorks7 abilities.\n\t(VXWORKS_HAVE_TLS): Likewise.\n\nCo-Authored-By: Jerome Lambourg <lambourg@adacore.com>\nCo-Authored-By: Olivier Hainque <hainque@adacore.com>\n\nFrom-SVN: r278247", "tree": {"sha": "fbcc4ee4ddc05d881eea07e45b4be0eb24f675ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbcc4ee4ddc05d881eea07e45b4be0eb24f675ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebcdba9c9f71e548e7506ecc8cb13139614b392e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebcdba9c9f71e548e7506ecc8cb13139614b392e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebcdba9c9f71e548e7506ecc8cb13139614b392e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebcdba9c9f71e548e7506ecc8cb13139614b392e/comments", "author": {"login": "burratoo", "id": 23646118, "node_id": "MDQ6VXNlcjIzNjQ2MTE4", "avatar_url": "https://avatars.githubusercontent.com/u/23646118?v=4", "gravatar_id": "", "url": "https://api.github.com/users/burratoo", "html_url": "https://github.com/burratoo", "followers_url": "https://api.github.com/users/burratoo/followers", "following_url": "https://api.github.com/users/burratoo/following{/other_user}", "gists_url": "https://api.github.com/users/burratoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/burratoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/burratoo/subscriptions", "organizations_url": "https://api.github.com/users/burratoo/orgs", "repos_url": "https://api.github.com/users/burratoo/repos", "events_url": "https://api.github.com/users/burratoo/events{/privacy}", "received_events_url": "https://api.github.com/users/burratoo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "60838d634634a70d65a126166c944b159ac7649c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60838d634634a70d65a126166c944b159ac7649c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60838d634634a70d65a126166c944b159ac7649c"}], "stats": {"total": 72, "additions": 66, "deletions": 6}, "files": [{"sha": "0deaff18f214bad96afae23b0186e4348376fc6b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebcdba9c9f71e548e7506ecc8cb13139614b392e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebcdba9c9f71e548e7506ecc8cb13139614b392e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ebcdba9c9f71e548e7506ecc8cb13139614b392e", "patch": "@@ -1,3 +1,24 @@\n+2019-11-06  Pat Bernardi  <bernardi@adacore.com>\n+            Jerome Lambourg  <lambourg@adacore.com>\n+            Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config.gcc: Add comment to introduce the TARGET_VXWORKS\n+\tcommon macro definitions, conveying VXWORKS7 or 64bit general\n+\tvariations.  Add a block to set gcc_cv_initfini_array\n+\tunconditionally to \"yes\" for VxWorks7.\n+\tconfig/vx-common.h (VXWORKS_CC1_SPEC): New macro, empty string\n+\tby default.  Update some comments.\n+\tconfig/vxworks.h (VXWORKS_EXTRA_LIBS_RTP): New macro, empty by\n+\tdefault, to be added the end of VXWORKS_LIBS_RTP.\n+\t(VXWORKS_LIBS_RTP): Replace hardcoded part by VXWORKS_BASE_LIBS_RTP\n+\tand append VXWORKS_EXTRA_LIBS_RTP, both of which specific ports may\n+\tredefine.\n+\t(VXWORKS_NET_LIBS_RTP): Account for VxWorks7 specificities.\n+\t(VXWORKS_CC1_SPEC): Common base definition, with VxWorks7 variation\n+\tto account for the now available TLS abilities.\n+\t(TARGET_LIBC_HAS_FUNCTION): Account for VxWorks7 abilities.\n+\t(VXWORKS_HAVE_TLS): Likewise.\n+\n 2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vect-slp.c (vect_contains_pattern_stmt_p): New function."}, {"sha": "aa9a79c08ded353e8b888bb409e20e3b8e529325", "filename": "gcc/config.gcc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebcdba9c9f71e548e7506ecc8cb13139614b392e/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebcdba9c9f71e548e7506ecc8cb13139614b392e/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=ebcdba9c9f71e548e7506ecc8cb13139614b392e", "patch": "@@ -962,6 +962,11 @@ case ${target} in\n     \"\" | yes | vxworks) thread_file='vxworks' ;;\n     *) echo 'Unknown thread configuration for VxWorks'; exit 1 ;;\n   esac\n+\n+  # A few common macro definitions conveying general characteristics\n+  # of the configuration at hand. Note that by VxWorks 7, we mean the\n+  # the SR6xx major update or beyond in vendor parlance:\n+\n   case $target in\n     *-*-vxworks7*)\n       tm_defines=\"$tm_defines TARGET_VXWORKS7=1\"\n@@ -972,6 +977,18 @@ case ${target} in\n       tm_defines=\"$tm_defines TARGET_VXWORKS64=1\"\n       ;;\n   esac\n+\n+  # Then a few build configuration controls for VxWorks 7, which\n+  # has specificities on top of which we aim to provide more complete\n+  # C++ support:\n+\n+  case $target in\n+    *-*-vxworks7*)\n+      # VxWorks 7 always has init/fini_array support and it is simpler to\n+      # just leverage this, sticking to what the system toolchain does:\n+      gcc_cv_initfini_array=yes\n+      ;;\n+  esac\n   ;;\n *-*-elf|arc*-*-elf*)\n   # Assume that newlib is being used and so __cxa_atexit is provided."}, {"sha": "2cbec744ca4cd18e2a5a0dddfadcbb447003c476", "filename": "gcc/config/vx-common.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebcdba9c9f71e548e7506ecc8cb13139614b392e/gcc%2Fconfig%2Fvx-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebcdba9c9f71e548e7506ecc8cb13139614b392e/gcc%2Fconfig%2Fvx-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvx-common.h?ref=ebcdba9c9f71e548e7506ecc8cb13139614b392e", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #define VXWORKS_LIBGCC_SPEC \"\"\n #define\tVXWORKS_STARTFILE_SPEC \"\"\n #define VXWORKS_ENDFILE_SPEC \"\"\n+#define VXWORKS_CC1_SPEC \"\"\n \n /* VxWorks cannot have dots in constructor labels, because it uses a\n    mutant variation of collect2 that generates C code instead of\n@@ -61,7 +62,7 @@ along with GCC; see the file COPYING3.  If not see\n #undef DWARF2_UNWIND_INFO\n #define DWARF2_UNWIND_INFO 1\n \n-/* VxWorks uses DWARF2.  */\n+/* VxWorks uses DWARF2 debugging info.  */\n #define DWARF2_DEBUGGING_INFO 1\n #define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n "}, {"sha": "8c93a3067762da72c3a74187d0a54caa671addbb", "filename": "gcc/config/vxworks.h", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebcdba9c9f71e548e7506ecc8cb13139614b392e/gcc%2Fconfig%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebcdba9c9f71e548e7506ecc8cb13139614b392e/gcc%2Fconfig%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks.h?ref=ebcdba9c9f71e548e7506ecc8cb13139614b392e", "patch": "@@ -78,10 +78,23 @@ along with GCC; see the file COPYING3.  If not see\n \n #define VXWORKS_SYSCALL_LIBS_RTP\n \n+#if TARGET_VXWORKS7\n+#define VXWORKS_NET_LIBS_RTP \"-lnet\"\n+#else\n #define VXWORKS_NET_LIBS_RTP \"-lnet -ldsi\"\n+#endif\n+\n+#define VXWORKS_BASE_LIBS_RTP \"-lc -lgcc -lc_internal\"\n+\n+#define VXWORKS_EXTRA_LIBS_RTP\n \n #define VXWORKS_LIBS_RTP \\\n-  VXWORKS_SYSCALL_LIBS_RTP \" \" VXWORKS_NET_LIBS_RTP \" -lc -lgcc -lc_internal\"\n+  VXWORKS_SYSCALL_LIBS_RTP \" \" VXWORKS_NET_LIBS_RTP \" \" \\\n+  VXWORKS_BASE_LIBS_RTP \" \" VXWORKS_EXTRA_LIBS_RTP\n+\n+/* TLS configuration.  VxWorks 7 now always has proper TLS support.\n+   Earlier versions did not, not even for RTPS.  */\n+#define VXWORKS_HAVE_TLS TARGET_VXWORKS7\n \n /* On Vx6 and previous, the libraries to pick up depends on the architecture,\n    so cannot be defined for all archs at once.  On Vx7, a VSB is always needed\n@@ -134,10 +147,15 @@ along with GCC; see the file COPYING3.  If not see\n #define\tVXWORKS_STARTFILE_SPEC \"%{mrtp:%{!shared:-l:crt0.o}}\"\n #define VXWORKS_ENDFILE_SPEC \"\"\n \n-/* Do VxWorks-specific parts of TARGET_OPTION_OVERRIDE.  */\n-\n-#define VXWORKS_HAVE_TLS (TARGET_VXWORKS7 && TARGET_VXWORKS_RTP)\n+#undef  VXWORKS_CC1_SPEC\n+#if TARGET_VXWORKS7\n+#define VXWORKS_CC1_SPEC \\\n+  \"%(cc1_cpu) %{!mrtp:%{!ftls-model=*:-ftls-model=local-exec}}\"\n+#else\n+#define VXWORKS_CC1_SPEC \"\"\n+#endif\n \n+/* Do VxWorks-specific parts of TARGET_OPTION_OVERRIDE.  */\n #undef VXWORKS_OVERRIDE_OPTIONS\n #define VXWORKS_OVERRIDE_OPTIONS vxworks_override_options ()\n extern void vxworks_override_options (void);\n@@ -179,8 +197,11 @@ extern void vxworks_asm_out_destructor (rtx symbol, int priority);\n #undef SIZE_TYPE\n #define SIZE_TYPE (TARGET_VXWORKS64 ? \"long unsigned int\" : \"unsigned int\")\n \n+/* Assumptions on the target libc.  VxWorks 7, post SR600, provides a C11\n+   runtime without sincos support.  */\n #undef TARGET_LIBC_HAS_FUNCTION\n-#define TARGET_LIBC_HAS_FUNCTION no_c99_libc_has_function\n+#define TARGET_LIBC_HAS_FUNCTION \\\n+  (TARGET_VXWORKS7 ? default_libc_has_function : no_c99_libc_has_function)\n \n /* Both kernels and RTPs have the facilities required by this macro.  */\n #define TARGET_POSIX_IO"}]}