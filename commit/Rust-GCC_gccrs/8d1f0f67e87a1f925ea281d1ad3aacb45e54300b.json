{"sha": "8d1f0f67e87a1f925ea281d1ad3aacb45e54300b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQxZjBmNjdlODdhMWY5MjVlYTI4MWQxYWQzYWFjYjQ1ZTU0MzAwYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2002-04-25T18:04:50Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-04-25T18:04:50Z"}, "message": "re PR c++/5607 (No pointer adjustment in covariant return types)\n\n        PR c++/5607\n        * search.c (check_final_overrider): No longer static.\n        * class.c (update_vtable_entry_for_fn): Call it.\n        * cp-tree.h: Adjust.\n\nFrom-SVN: r52760", "tree": {"sha": "0bcf3c2e7d95b12bacfe444e9c10ae2893061952", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bcf3c2e7d95b12bacfe444e9c10ae2893061952"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d1f0f67e87a1f925ea281d1ad3aacb45e54300b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d1f0f67e87a1f925ea281d1ad3aacb45e54300b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d1f0f67e87a1f925ea281d1ad3aacb45e54300b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d1f0f67e87a1f925ea281d1ad3aacb45e54300b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ab5973b7534d7c97b4ff162ced63b23606da2e98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab5973b7534d7c97b4ff162ced63b23606da2e98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab5973b7534d7c97b4ff162ced63b23606da2e98"}], "stats": {"total": 54, "additions": 52, "deletions": 2}, "files": [{"sha": "22d45277ea31bc5d4bcfe970bf486fd2211c552c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1f0f67e87a1f925ea281d1ad3aacb45e54300b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1f0f67e87a1f925ea281d1ad3aacb45e54300b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8d1f0f67e87a1f925ea281d1ad3aacb45e54300b", "patch": "@@ -1,3 +1,10 @@\n+2002-04-25  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/5607\n+\t* search.c (check_final_overrider): No longer static.\n+\t* class.c (update_vtable_entry_for_fn): Call it.\n+\t* cp-tree.h: Adjust.\n+\n 2002-04-25  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cp-lang.c (LANG_HOOKS_SET_YYDEBUG): Remove."}, {"sha": "92f43298bdb1a8d6749631b28661ca516f806fb7", "filename": "gcc/cp/class.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1f0f67e87a1f925ea281d1ad3aacb45e54300b/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1f0f67e87a1f925ea281d1ad3aacb45e54300b/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=8d1f0f67e87a1f925ea281d1ad3aacb45e54300b", "patch": "@@ -2555,6 +2555,10 @@ update_vtable_entry_for_fn (t, binfo, fn, virtuals)\n   if (overrider == error_mark_node)\n     return;\n \n+  /* Check for unsupported covariant returns again now that we've\n+     calculated the base offsets.  */\n+  check_final_overrider (TREE_PURPOSE (overrider), fn);\n+\n   /* Assume that we will produce a thunk that convert all the way to\n      the final overrider, and not to an intermediate virtual base.  */\n   virtual_base = NULL_TREE;"}, {"sha": "8be1e6f4e0570aee2b81f4c18dc1e442d21e60ad", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1f0f67e87a1f925ea281d1ad3aacb45e54300b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1f0f67e87a1f925ea281d1ad3aacb45e54300b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=8d1f0f67e87a1f925ea281d1ad3aacb45e54300b", "patch": "@@ -4098,6 +4098,7 @@ extern tree lookup_conversions\t\t\tPARAMS ((tree));\n extern tree binfo_for_vtable\t\t\tPARAMS ((tree));\n extern tree binfo_from_vbase\t\t\tPARAMS ((tree));\n extern tree look_for_overrides_here\t\tPARAMS ((tree, tree));\n+extern int check_final_overrider\t\tPARAMS ((tree, tree));\n extern tree dfs_walk                            PARAMS ((tree,\n \t\t\t\t\t\t       tree (*) (tree, void *),\n \t\t\t\t\t\t       tree (*) (tree, void *),"}, {"sha": "38841589dfd257bc503fa05e7b7c9fe164b0eb01", "filename": "gcc/cp/search.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1f0f67e87a1f925ea281d1ad3aacb45e54300b/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1f0f67e87a1f925ea281d1ad3aacb45e54300b/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=8d1f0f67e87a1f925ea281d1ad3aacb45e54300b", "patch": "@@ -100,7 +100,6 @@ static tree dfs_push_decls PARAMS ((tree, void *));\n static tree dfs_unuse_fields PARAMS ((tree, void *));\n static tree add_conversions PARAMS ((tree, void *));\n static int covariant_return_p PARAMS ((tree, tree));\n-static int check_final_overrider PARAMS ((tree, tree));\n static int look_for_overrides_r PARAMS ((tree, tree));\n static struct search_level *push_search_level\n \tPARAMS ((struct stack_level *, struct obstack *));\n@@ -1798,7 +1797,7 @@ covariant_return_p (brettype, drettype)\n /* Check that virtual overrider OVERRIDER is acceptable for base function\n    BASEFN. Issue diagnostic, and return zero, if unacceptable.  */\n \n-static int\n+int\n check_final_overrider (overrider, basefn)\n      tree overrider, basefn;\n {"}, {"sha": "516047e95e3312f125c001ea1675d3aa83f45c51", "filename": "gcc/testsuite/g++.dg/inherit/covariant1.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1f0f67e87a1f925ea281d1ad3aacb45e54300b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1f0f67e87a1f925ea281d1ad3aacb45e54300b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant1.C?ref=8d1f0f67e87a1f925ea281d1ad3aacb45e54300b", "patch": "@@ -0,0 +1,39 @@\n+// PR c++/5607\n+\n+// Currently we don't support covariant returns that would actually require\n+// a pointer adjustment.  We were failing to recognize this as such a case,\n+// so were silently generating bad code.  When we do support covariant\n+// returns properly, the expected error should go away, and the testcase\n+// should pass execution.\n+\n+// { NOT YET dg-do run }\n+\n+class A {\n+public:\n+  virtual A* getThis() { return this; }\n+};\n+\n+class B {\n+int a;\n+public:\n+  virtual B* getThis() { return this; }\n+};\n+\n+class AB : public A, public B {\t// { dg-error \"covariant\" }\n+public:\n+  virtual AB* getThis() { return this; }\n+};\n+\n+int main ()\n+{\n+  AB* ab = new AB();\n+  \n+  A* a = ab;\n+  B* b = ab;\n+\n+  if (a->getThis() != a\n+      || b->getThis() != b)\n+    return 1;\n+\n+  return 0;\n+}"}]}