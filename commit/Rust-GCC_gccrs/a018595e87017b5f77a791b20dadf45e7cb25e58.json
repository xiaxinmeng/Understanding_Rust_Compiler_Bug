{"sha": "a018595e87017b5f77a791b20dadf45e7cb25e58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAxODU5NWU4NzAxN2I1Zjc3YTc5MWIyMGRhZGY0NWU3Y2IyNWU1OA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-10-13T14:57:28Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-10-13T14:57:28Z"}, "message": "for_each_selectors.h: Minor uglification and stylistic fixes.\n\n2009-10-13  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/parallel/for_each_selectors.h: Minor uglification and\n\tstylistic fixes.\n\nFrom-SVN: r152708", "tree": {"sha": "8ec2d62fc9a6ec65615d506bea9cf757743243a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ec2d62fc9a6ec65615d506bea9cf757743243a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a018595e87017b5f77a791b20dadf45e7cb25e58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a018595e87017b5f77a791b20dadf45e7cb25e58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a018595e87017b5f77a791b20dadf45e7cb25e58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a018595e87017b5f77a791b20dadf45e7cb25e58/comments", "author": null, "committer": null, "parents": [{"sha": "e4fb38bd17c0df57ba0dde795cf31279e51e186c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4fb38bd17c0df57ba0dde795cf31279e51e186c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4fb38bd17c0df57ba0dde795cf31279e51e186c"}], "stats": {"total": 58, "additions": 26, "deletions": 32}, "files": [{"sha": "424967d35605a199351276b668d7421d8aceba26", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a018595e87017b5f77a791b20dadf45e7cb25e58/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a018595e87017b5f77a791b20dadf45e7cb25e58/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a018595e87017b5f77a791b20dadf45e7cb25e58", "patch": "@@ -1,6 +1,12 @@\n+2009-10-13  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/parallel/for_each_selectors.h: Minor uglification and\n+\tstylistic fixes.\n+\n 2009-10-13  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n-\t* include/precompiled/stdc++.h: Include <initializer_list> for completeness.\n+\t* include/precompiled/stdc++.h: Include <initializer_list>\n+\tfor completeness.\n \n 2009-10-12  Paolo Carlini  <paolo.carlini@oracle.com>\n "}, {"sha": "3a37e5ca63749dcb65a1eea233eb4904301a59c2", "filename": "libstdc++-v3/include/parallel/for_each_selectors.h", "status": "modified", "additions": 19, "deletions": 31, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a018595e87017b5f77a791b20dadf45e7cb25e58/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ffor_each_selectors.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a018595e87017b5f77a791b20dadf45e7cb25e58/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ffor_each_selectors.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ffor_each_selectors.h?ref=a018595e87017b5f77a791b20dadf45e7cb25e58", "patch": "@@ -37,17 +37,15 @@\n \n namespace __gnu_parallel\n {\n-\n   /** @brief Generic __selector for embarrassingly parallel functions. */\n   template<typename _It>\n-  struct __generic_for_each_selector\n-  {\n-    /** @brief _Iterator on last element processed; needed for some\n-     *  algorithms (e. g. std::transform()).\n-     */\n-    _It _M_finish_iterator;\n-  };\n-\n+    struct __generic_for_each_selector\n+    {\n+      /** @brief _Iterator on last element processed; needed for some\n+       *  algorithms (e. g. std::transform()).\n+       */\n+      _It _M_finish_iterator;\n+    };\n \n   /** @brief std::for_each() selector. */\n   template<typename _It>\n@@ -220,21 +218,21 @@ namespace __gnu_parallel\n     };\n \n   /** @brief std::inner_product() selector. */\n-  template<typename _It, typename It2, typename _Tp>\n+  template<typename _It, typename _It2, typename _Tp>\n     struct __inner_product_selector : public __generic_for_each_selector<_It>\n     {\n       /** @brief Begin iterator of first sequence. */\n-      _It __begin1_iterator;\n+      _It  __begin1_iterator;\n \n       /** @brief Begin iterator of second sequence. */\n-      It2 begin2_iterator;\n+      _It2 __begin2_iterator;\n \n       /** @brief Constructor.\n        *  @param b1 Begin iterator of first sequence.\n        *  @param b2 Begin iterator of second sequence. */\n       explicit\n-      __inner_product_selector(_It b1, It2 b2)\n-      : __begin1_iterator(b1), begin2_iterator(b2) { }\n+      __inner_product_selector(_It __b1, _It2 __b2)\n+      : __begin1_iterator(__b1), __begin2_iterator(__b2) { }\n \n       /** @brief Functor execution.\n        *  @param __mult Multiplication functor.\n@@ -246,7 +244,7 @@ namespace __gnu_parallel\n         {\n           typename std::iterator_traits<_It>::difference_type __position\n             = __current - __begin1_iterator;\n-          return __mult(*__current, *(begin2_iterator + __position));\n+          return __mult(*__current, *(__begin2_iterator + __position));\n         }\n     };\n \n@@ -268,8 +266,8 @@ namespace __gnu_parallel\n    *  __elements.\n    */\n   template<typename _It>\n-    struct __adjacent_difference_selector :\n-           public __generic_for_each_selector<_It>\n+    struct __adjacent_difference_selector\n+    : public __generic_for_each_selector<_It>\n     {\n       template<typename _Op>\n         bool\n@@ -293,14 +291,14 @@ namespace __gnu_parallel\n      *  @param __i iterator referencing object. */\n     template<typename _It>\n       void\n-      operator()(_It __i) { }\n+      operator()(_It) { }\n   };\n \n   /** @brief Reduction function doing nothing. */\n   struct _DummyReduct\n   {\n     bool\n-    operator()(bool /*__x*/, bool /*__y*/) const\n+    operator()(bool, bool) const\n     { return true; }\n   };\n \n@@ -315,12 +313,7 @@ namespace __gnu_parallel\n \n       _It\n       operator()(_It __x, _It __y)\n-      {\n-        if (__comp(*__x, *__y))\n-          return __x;\n-        else\n-          return __y;\n-      }\n+      { return (__comp(*__x, *__y)) ? __x : __y; }\n     };\n \n   /** @brief Reduction for finding the maximum element, using a comparator. */\n@@ -334,12 +327,7 @@ namespace __gnu_parallel\n \n       _It\n       operator()(_It __x, _It __y)\n-      {\n-        if (__comp(*__x, *__y))\n-          return __y;\n-        else\n-          return __x;\n-      }\n+      { return (__comp(*__x, *__y)) ? __y : __x; }\n     };\n \n   /** @brief General reduction, using a binary operator. */"}]}