{"sha": "6ad8f94953f01ad3463872b57343093a13d29b4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFkOGY5NDk1M2YwMWFkMzQ2Mzg3MmI1NzM0MzA5M2ExM2QyOWI0Yg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-09-23T11:24:57Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-09-23T11:24:57Z"}, "message": "std_limits.h (__glibcpp_plain_char_is_signed, [...]): Remove.\n\n\t* include/std/std_limits.h (__glibcpp_plain_char_is_signed,\n\t__glibcpp_wchar_t_is_signed, __glibcpp_s8_max, __glibcpp_s8_min,\n\t__glibcpp_s8_digits, __glibcpp_s8_digits10, __glibcpp_u8_min,\n\t__glibcpp_u8_max, __glibcpp_u8_digits, __glibcpp_u8_digits10,\n\t__glibcpp_s16_max, __glibcpp_s16_min, __glibcpp_s16_digits,\n\t__glibcpp_s16_digits10, __glibcpp_u16_min, __glibcpp_u16_max,\n\t__glibcpp_u16_digits, __glibcpp_u16_digits10, __glibcpp_s32_max,\n\t__glibcpp_s32_min, __glibcpp_s32_digits, __glibcpp_s32_digits10,\n\t__glibcpp_u32_min, __glibcpp_u32_max, __glibcpp_u32_digits,\n\t__glibcpp_u32_digits10, __glibcpp_s64_max, __glibcpp_s64_min,\n\t__glibcpp_s64_digits, __glibcpp_s64_digits10, __glibcpp_u64_min,\n\t__glibcpp_u64_max, __glibcpp_u64_digits, __glibcpp_u64_digits10,\n\t__glibcpp_bool_digits, __glibcpp_signed_char_min,\n\t__glibcpp_signed_char_max, __glibcpp_signed_char_digits,\n\t__glibcpp_signed_char_digits10, __glibcpp_unsigned_char_min,\n\t__glibcpp_unsigned_char_max, __glibcpp_unsigned_char_digits,\n\t__glibcpp_unsigned_char_digits10, __glibcpp_char_min,\n\t__glibcpp_char_max, __glibcpp_char_digits, __glibcpp_char_digits10,\n\t__glibcpp_signed_short_min, __glibcpp_signed_short_max,\n\t__glibcpp_signed_short_digits, __glibcpp_signed_short_digits10,\n\t__glibcpp_unsigned_short_min, __glibcpp_unsigned_short_max,\n\t__glibcpp_unsigned_short_digits, __glibcpp_unsigned_short_digits10,\n\t__glibcpp_signed_int_min, __glibcpp_signed_int_max,\n\t__glibcpp_signed_int_digits, __glibcpp_signed_int_digits10,\n\t__glibcpp_unsigned_int_min, __glibcpp_unsigned_int_max,\n\t__glibcpp_unsigned_int_digits, __glibcpp_unsigned_int_digits10,\n\t__glibcpp_signed_long_min, __glibcpp_signed_long_max,\n\t__glibcpp_unsigned_long_digits, __glibcpp_unsigned_long_digits10,\n\t__glibcpp_signed_long_long_min, __glibcpp_signed_long_long_max,\n\t__glibcpp_signed_long_long_digits, __glibcpp_signed_long_long_digits10,\n\t__glibcpp_wchar_t_min, __glibcpp_wchar_t_max, __glibcpp_wchar_t_digits,\n\t__glibcpp_wchar_t_digits10): Remove.\n\t(__glibcpp_byte, __glibcpp_word_bits, __glibcpp_word): Remove.\n\t(__float_storage, __double_storage, __long_double_storage): Remove.\n\t(__glibcpp_signed, __glibcpp_min, __glibcpp_max): New.\n\t(__glibcpp_digits, __glibcpp_digits10): New.\n\t(numeric_limits<T>::min): Use __glibcpp_min or limits.h builtins.\n\t(numeric_limits<T>::max): Use __glibcpp_max or limits.h builtins.\n\t(numeric_limits<T>::is_signed, T=char,wchar_t): Use __glibcpp_signed.\n\t(numeric_limits<T>::digits): Use __glibcpp_digits.\n\t(numeric_limits<T>::digits10): Use __glibcpp_digits10.\n\t* testsuite/18_support/numeric_limits.cc (test03): Don't use\n\t__glibcpp_s8_digits10 et al; check vs the installed versions\n\tof digits10 for particular sizes.\n\n        * include/std/std_limits.h (__glibcpp_float_is_modulo,\n        __glibcpp_double_is_modulo, __glibcpp_long_double_is_modulo): Kill.\n        (numeric_limits<T>::is_modulo, T floating): Use false.\n\nFrom-SVN: r57434", "tree": {"sha": "d8dbaae43e7b3df0e3ddac9c240c416e9546ae5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8dbaae43e7b3df0e3ddac9c240c416e9546ae5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ad8f94953f01ad3463872b57343093a13d29b4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ad8f94953f01ad3463872b57343093a13d29b4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ad8f94953f01ad3463872b57343093a13d29b4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ad8f94953f01ad3463872b57343093a13d29b4b/comments", "author": null, "committer": null, "parents": [{"sha": "68e7a7c94fe84ebe36de67d029c71df1034e5431", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e7a7c94fe84ebe36de67d029c71df1034e5431", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68e7a7c94fe84ebe36de67d029c71df1034e5431"}], "stats": {"total": 694, "additions": 161, "deletions": 533}, "files": [{"sha": "f396b233546d2512df1e4350e4cbc081f65c4038", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad8f94953f01ad3463872b57343093a13d29b4b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad8f94953f01ad3463872b57343093a13d29b4b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6ad8f94953f01ad3463872b57343093a13d29b4b", "patch": "@@ -1,3 +1,54 @@\n+2002-09-23  Richard Henderson  <rth@redhat.com>\n+\n+\t* include/std/std_limits.h (__glibcpp_plain_char_is_signed,\n+\t__glibcpp_wchar_t_is_signed, __glibcpp_s8_max, __glibcpp_s8_min,\n+\t__glibcpp_s8_digits, __glibcpp_s8_digits10, __glibcpp_u8_min,\n+\t__glibcpp_u8_max, __glibcpp_u8_digits, __glibcpp_u8_digits10,\n+\t__glibcpp_s16_max, __glibcpp_s16_min, __glibcpp_s16_digits,\n+\t__glibcpp_s16_digits10, __glibcpp_u16_min, __glibcpp_u16_max,\n+\t__glibcpp_u16_digits, __glibcpp_u16_digits10, __glibcpp_s32_max,\n+\t__glibcpp_s32_min, __glibcpp_s32_digits, __glibcpp_s32_digits10,\n+\t__glibcpp_u32_min, __glibcpp_u32_max, __glibcpp_u32_digits,\n+\t__glibcpp_u32_digits10, __glibcpp_s64_max, __glibcpp_s64_min,\n+\t__glibcpp_s64_digits, __glibcpp_s64_digits10, __glibcpp_u64_min,\n+\t__glibcpp_u64_max, __glibcpp_u64_digits, __glibcpp_u64_digits10,\n+\t__glibcpp_bool_digits, __glibcpp_signed_char_min,\n+\t__glibcpp_signed_char_max, __glibcpp_signed_char_digits,\n+\t__glibcpp_signed_char_digits10, __glibcpp_unsigned_char_min,\n+\t__glibcpp_unsigned_char_max, __glibcpp_unsigned_char_digits,\n+\t__glibcpp_unsigned_char_digits10, __glibcpp_char_min,\n+\t__glibcpp_char_max, __glibcpp_char_digits, __glibcpp_char_digits10,\n+\t__glibcpp_signed_short_min, __glibcpp_signed_short_max,\n+\t__glibcpp_signed_short_digits, __glibcpp_signed_short_digits10,\n+\t__glibcpp_unsigned_short_min, __glibcpp_unsigned_short_max,\n+\t__glibcpp_unsigned_short_digits, __glibcpp_unsigned_short_digits10,\n+\t__glibcpp_signed_int_min, __glibcpp_signed_int_max,\n+\t__glibcpp_signed_int_digits, __glibcpp_signed_int_digits10,\n+\t__glibcpp_unsigned_int_min, __glibcpp_unsigned_int_max,\n+\t__glibcpp_unsigned_int_digits, __glibcpp_unsigned_int_digits10,\n+\t__glibcpp_signed_long_min, __glibcpp_signed_long_max,\n+\t__glibcpp_unsigned_long_digits, __glibcpp_unsigned_long_digits10,\n+\t__glibcpp_signed_long_long_min, __glibcpp_signed_long_long_max,\n+\t__glibcpp_signed_long_long_digits, __glibcpp_signed_long_long_digits10,\n+\t__glibcpp_wchar_t_min, __glibcpp_wchar_t_max, __glibcpp_wchar_t_digits,\n+\t__glibcpp_wchar_t_digits10): Remove.\n+\t(__glibcpp_byte, __glibcpp_word_bits, __glibcpp_word): Remove.\n+\t(__float_storage, __double_storage, __long_double_storage): Remove.\n+\t(__glibcpp_signed, __glibcpp_min, __glibcpp_max): New.\n+\t(__glibcpp_digits, __glibcpp_digits10): New.\n+\t(numeric_limits<T>::min): Use __glibcpp_min or limits.h builtins.\n+\t(numeric_limits<T>::max): Use __glibcpp_max or limits.h builtins.\n+\t(numeric_limits<T>::is_signed, T=char,wchar_t): Use __glibcpp_signed.\n+\t(numeric_limits<T>::digits): Use __glibcpp_digits.\n+\t(numeric_limits<T>::digits10): Use __glibcpp_digits10.\n+\t* testsuite/18_support/numeric_limits.cc (test03): Don't use\n+\t__glibcpp_s8_digits10 et al; check vs the installed versions\n+\tof digits10 for particular sizes.\n+\n+        * include/std/std_limits.h (__glibcpp_float_is_modulo,\n+        __glibcpp_double_is_modulo, __glibcpp_long_double_is_modulo): Kill.\n+        (numeric_limits<T>::is_modulo, T floating): Use false.\n+\n 2002-09-22  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* Makefile.am (all-multi): Fix multilib parallel build."}, {"sha": "275ce62a1a4bb0b0b62dbde177cad1f7b068bddb", "filename": "libstdc++-v3/include/std/std_limits.h", "status": "modified", "additions": 90, "deletions": 525, "changes": 615, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad8f94953f01ad3463872b57343093a13d29b4b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad8f94953f01ad3463872b57343093a13d29b4b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h?ref=6ad8f94953f01ad3463872b57343093a13d29b4b", "patch": "@@ -64,31 +64,19 @@\n //         double\t\t\t\t\t\t(1)\n //         long double\t\t\t\t\t\t(1)\n //\n-// GNU C++ undertstands (where supported by the host C-library) \n+// GNU C++ undertstands (where supported by the host C-library)\n //   * integer\n //         long long, unsigned long long\t\t\t(2)\n //\n // which brings us to 15 fundamental arithmetic data types in GNU C++.\n //\n-// \n+//\n // Since a numeric_limits<> is a bit tricky to get right, we rely on\n // an interface composed of macros which should be defined in config/os\n // or config/cpu when they differ from the generic (read arbitrary)\n // definitions given here.\n //\n \n-#ifdef __CHAR_UNSIGNED__\n-#  define __glibcpp_plain_char_is_signed false\n-#else\n-#  define __glibcpp_plain_char_is_signed true\n-#endif\n-\n-#ifndef __WCHAR_UNSIGNED__\n-#  define __glibcpp_wchar_t_is_signed false\n-#else\n-#  define __glibcpp_wchar_t_is_signed true\n-#endif\n-\n // These values can be overridden in the target configuration file.\n // The default values are appropriate for many 32-bit targets.\n \n@@ -99,326 +87,6 @@\n # define __glibcpp_integral_traps true\n #endif\n \n-// You should not need to define any macros below this point, unless\n-// you have a machine with non-standard bit-widths.\n-\n-// These values are the minimums and maximums for standard data types\n-// of common widths.\n-\n-#define __glibcpp_s8_max 127\n-#define __glibcpp_s8_min (-__glibcpp_s8_max - 1)\n-#define __glibcpp_s8_digits 7\n-#define __glibcpp_s8_digits10 2\n-#define __glibcpp_u8_min 0U\n-#define __glibcpp_u8_max (__glibcpp_s8_max * 2 + 1)\n-#define __glibcpp_u8_digits 8\n-#define __glibcpp_u8_digits10 2\n-#define __glibcpp_s16_max 32767\n-#define __glibcpp_s16_min (-__glibcpp_s16_max - 1)\n-#define __glibcpp_s16_digits 15\n-#define __glibcpp_s16_digits10 4\n-#define __glibcpp_u16_min 0U\n-#define __glibcpp_u16_max (__glibcpp_s16_max * 2 + 1)\n-#define __glibcpp_u16_digits 16\n-#define __glibcpp_u16_digits10 4\n-#define __glibcpp_s32_max 2147483647L\n-#define __glibcpp_s32_min (-__glibcpp_s32_max - 1)\n-#define __glibcpp_s32_digits 31\n-#define __glibcpp_s32_digits10 9\n-#define __glibcpp_u32_min 0UL\n-#define __glibcpp_u32_max (__glibcpp_s32_max * 2U + 1)\n-#define __glibcpp_u32_digits 32\n-#define __glibcpp_u32_digits10 9\n-#define __glibcpp_s64_max 9223372036854775807LL\n-#define __glibcpp_s64_min (-__glibcpp_s64_max - 1)\n-#define __glibcpp_s64_digits 63\n-#define __glibcpp_s64_digits10 18\n-#define __glibcpp_u64_min 0ULL\n-#define __glibcpp_u64_max (__glibcpp_s64_max * 2ULL + 1)\n-#define __glibcpp_u64_digits 64\n-#define __glibcpp_u64_digits10 19\n-\n-// bool-specific hooks:\n-//     __glibcpp_bool_digits\n-\n-#ifndef __glibcpp_bool_digits\n-#  define __glibcpp_bool_digits 1\n-#endif\n-\n-// char.\n-\n-#if __CHAR_BIT__ == 8\n-#  define __glibcpp_signed_char_min __glibcpp_s8_min\n-#  define __glibcpp_signed_char_max __glibcpp_s8_max\n-#  define __glibcpp_signed_char_digits __glibcpp_s8_digits\n-#  define __glibcpp_signed_char_digits10 __glibcpp_s8_digits10\n-#  define __glibcpp_unsigned_char_min __glibcpp_u8_min\n-#  define __glibcpp_unsigned_char_max __glibcpp_u8_max\n-#  define __glibcpp_unsigned_char_digits __glibcpp_u8_digits\n-#  define __glibcpp_unsigned_char_digits10 __glibcpp_u8_digits10\n-#elif __CHAR_BIT__ == 16\n-#  define __glibcpp_signed_char_min __glibcpp_s16_min\n-#  define __glibcpp_signed_char_max __glibcpp_s16_max\n-#  define __glibcpp_signed_char_digits __glibcpp_s16_digits\n-#  define __glibcpp_signed_char_digits10 __glibcpp_s16_digits10\n-#  define __glibcpp_unsigned_char_min __glibcpp_u16_min\n-#  define __glibcpp_unsigned_char_max __glibcpp_u16_max\n-#  define __glibcpp_unsigned_char_digits __glibcpp_u16_digits\n-#  define __glibcpp_unsigned_char_digits10 __glibcpp_u16_digits10\n-#elif __CHAR_BIT__ == 32\n-#  define __glibcpp_signed_char_min (signed char)__glibcpp_s32_min\n-#  define __glibcpp_signed_char_max (signed char)__glibcpp_s32_max\n-#  define __glibcpp_signed_char_digits __glibcpp_s32_digits\n-#  define __glibcpp_signed_char_digits10 __glibcpp_s32_digits10\n-#  define __glibcpp_unsigned_char_min (unsigned char)__glibcpp_u32_min\n-#  define __glibcpp_unsigned_char_max (unsigned char)__glibcpp_u32_max\n-#  define __glibcpp_unsigned_char_digits __glibcpp_u32_digits\n-#  define __glibcpp_unsigned_char_digits10 __glibcpp_u32_digits10\n-#elif __CHAR_BIT__ == 64\n-#  define __glibcpp_signed_char_min (signed char)__glibcpp_s64_min\n-#  define __glibcpp_signed_char_max (signed char)__glibcpp_s64_max\n-#  define __glibcpp_signed_char_digits __glibcpp_s64_digits\n-#  define __glibcpp_signed_char_digits10 __glibcpp_s64_digits10\n-#  define __glibcpp_unsigned_char_min (unsigned char)__glibcpp_u64_min\n-#  define __glibcpp_unsigned_char_max (unsigned char)__glibcpp_u64_max\n-#  define __glibcpp_unsigned_char_digits __glibcpp_u64_digits\n-#  define __glibcpp_unsigned_char_digits10 __glibcpp_u64_digits10\n-#else\n-// You must define these macros in the configuration file.\n-#endif\n-\n-#if __glibcpp_plain_char_is_signed\n-#  define __glibcpp_char_min (char)__glibcpp_signed_char_min\n-#  define __glibcpp_char_max (char)__glibcpp_signed_char_max\n-#  define __glibcpp_char_digits __glibcpp_signed_char_digits\n-#  define __glibcpp_char_digits10 __glibcpp_signed_char_digits\n-#else\n-#  define __glibcpp_char_min (char)__glibcpp_unsigned_char_min\n-#  define __glibcpp_char_max (char)__glibcpp_unsigned_char_max\n-#  define __glibcpp_char_digits __glibcpp_unsigned_char_digits\n-#  define __glibcpp_char_digits10 __glibcpp_unsigned_char_digits\n-#endif\n-\n-// short\n-\n-#if __SHRT_BIT__ == 8\n-#  define __glibcpp_signed_short_min __glibcpp_s8_min\n-#  define __glibcpp_signed_short_max __glibcpp_s8_max\n-#  define __glibcpp_signed_short_digits __glibcpp_s8_digits\n-#  define __glibcpp_signed_short_digits10 __glibcpp_s8_digits10\n-#  define __glibcpp_unsigned_short_min __glibcpp_u8_min\n-#  define __glibcpp_unsigned_short_max __glibcpp_u8_max\n-#  define __glibcpp_unsigned_short_digits __glibcpp_u8_digits\n-#  define __glibcpp_unsigned_short_digits10 __glibcpp_u8_digits10\n-#elif __SHRT_BIT__ == 16\n-#  define __glibcpp_signed_short_min __glibcpp_s16_min\n-#  define __glibcpp_signed_short_max __glibcpp_s16_max\n-#  define __glibcpp_signed_short_digits __glibcpp_s16_digits\n-#  define __glibcpp_signed_short_digits10 __glibcpp_s16_digits10\n-#  define __glibcpp_unsigned_short_min __glibcpp_u16_min\n-#  define __glibcpp_unsigned_short_max __glibcpp_u16_max\n-#  define __glibcpp_unsigned_short_digits __glibcpp_u16_digits\n-#  define __glibcpp_unsigned_short_digits10 __glibcpp_u16_digits10\n-#elif __SHRT_BIT__ == 32\n-#  define __glibcpp_signed_short_min (short)__glibcpp_s32_min\n-#  define __glibcpp_signed_short_max (short)__glibcpp_s32_max\n-#  define __glibcpp_signed_short_digits __glibcpp_s32_digits\n-#  define __glibcpp_signed_short_digits10 __glibcpp_s32_digits10\n-#  define __glibcpp_unsigned_short_min (unsigned short)__glibcpp_u32_min\n-#  define __glibcpp_unsigned_short_max (unsigned short)__glibcpp_u32_max\n-#  define __glibcpp_unsigned_short_digits __glibcpp_u32_digits\n-#  define __glibcpp_unsigned_short_digits10 __glibcpp_u32_digits10\n-#elif __SHRT_BIT__ == 64\n-#  define __glibcpp_signed_short_min (short)__glibcpp_s64_min\n-#  define __glibcpp_signed_short_max (short)__glibcpp_s64_max\n-#  define __glibcpp_signed_short_digits __glibcpp_s64_digits\n-#  define __glibcpp_signed_short_digits10 __glibcpp_s64_digits10\n-#  define __glibcpp_unsigned_short_min (unsigned short)__glibcpp_u64_min\n-#  define __glibcpp_unsigned_short_max (unsigned short)__glibcpp_u64_max\n-#  define __glibcpp_unsigned_short_digits __glibcpp_u64_digits\n-#  define __glibcpp_unsigned_short_digits10 __glibcpp_u64_digits10\n-#else\n-// You must define these macros in the configuration file.\n-#endif\n-\n-// int\n-\n-#if __INT_BIT__ == 8\n-#  define __glibcpp_signed_int_min __glibcpp_s8_min\n-#  define __glibcpp_signed_int_max __glibcpp_s8_max\n-#  define __glibcpp_signed_int_digits __glibcpp_s8_digits\n-#  define __glibcpp_signed_int_digits10 __glibcpp_s8_digits10\n-#  define __glibcpp_unsigned_int_min __glibcpp_u8_min\n-#  define __glibcpp_unsigned_int_max __glibcpp_u8_max\n-#  define __glibcpp_unsigned_int_digits __glibcpp_u8_digits\n-#  define __glibcpp_unsigned_int_digits10 __glibcpp_u8_digits10\n-#elif __INT_BIT__ == 16\n-#  define __glibcpp_signed_int_min __glibcpp_s16_min\n-#  define __glibcpp_signed_int_max __glibcpp_s16_max\n-#  define __glibcpp_signed_int_digits __glibcpp_s16_digits\n-#  define __glibcpp_signed_int_digits10 __glibcpp_s16_digits10\n-#  define __glibcpp_unsigned_int_min __glibcpp_u16_min\n-#  define __glibcpp_unsigned_int_max __glibcpp_u16_max\n-#  define __glibcpp_unsigned_int_digits __glibcpp_u16_digits\n-#  define __glibcpp_unsigned_int_digits10 __glibcpp_u16_digits10\n-#elif __INT_BIT__ == 32\n-#  define __glibcpp_signed_int_min (int)__glibcpp_s32_min\n-#  define __glibcpp_signed_int_max (int)__glibcpp_s32_max\n-#  define __glibcpp_signed_int_digits __glibcpp_s32_digits\n-#  define __glibcpp_signed_int_digits10 __glibcpp_s32_digits10\n-#  define __glibcpp_unsigned_int_min (unsigned)__glibcpp_u32_min\n-#  define __glibcpp_unsigned_int_max (unsigned)__glibcpp_u32_max\n-#  define __glibcpp_unsigned_int_digits __glibcpp_u32_digits\n-#  define __glibcpp_unsigned_int_digits10 __glibcpp_u32_digits10\n-#elif __INT_BIT__ == 64\n-#  define __glibcpp_signed_int_min (int)__glibcpp_s64_min\n-#  define __glibcpp_signed_int_max (int)__glibcpp_s64_max\n-#  define __glibcpp_signed_int_digits __glibcpp_s64_digits\n-#  define __glibcpp_signed_int_digits10 __glibcpp_s64_digits10\n-#  define __glibcpp_unsigned_int_min (unsigned)__glibcpp_u64_min\n-#  define __glibcpp_unsigned_int_max (unsigned)__glibcpp_u64_max\n-#  define __glibcpp_unsigned_int_digits __glibcpp_u64_digits\n-#  define __glibcpp_unsigned_int_digits10 __glibcpp_u64_digits10\n-#else\n-// You must define these macros in the configuration file.\n-#endif\n-\n-// long\n-\n-#if __LONG_BIT__ == 8\n-#  define __glibcpp_signed_long_min __glibcpp_s8_min\n-#  define __glibcpp_signed_long_max __glibcpp_s8_max\n-#  define __glibcpp_signed_long_digits __glibcpp_s8_digits\n-#  define __glibcpp_signed_long_digits10 __glibcpp_s8_digits10\n-#  define __glibcpp_unsigned_long_min __glibcpp_u8_min\n-#  define __glibcpp_unsigned_long_max __glibcpp_u8_max\n-#  define __glibcpp_unsigned_long_digits __glibcpp_u8_digits\n-#  define __glibcpp_unsigned_long_digits10 __glibcpp_u8_digits10\n-#elif __LONG_BIT__ == 16\n-#  define __glibcpp_signed_long_min __glibcpp_s16_min\n-#  define __glibcpp_signed_long_max __glibcpp_s16_max\n-#  define __glibcpp_signed_long_digits __glibcpp_s16_digits\n-#  define __glibcpp_signed_long_digits10 __glibcpp_s16_digits10\n-#  define __glibcpp_unsigned_long_min __glibcpp_u16_min\n-#  define __glibcpp_unsigned_long_max __glibcpp_u16_max\n-#  define __glibcpp_unsigned_long_digits __glibcpp_u16_digits\n-#  define __glibcpp_unsigned_long_digits10 __glibcpp_u16_digits10\n-#elif __LONG_BIT__ == 32\n-#  define __glibcpp_signed_long_min __glibcpp_s32_min\n-#  define __glibcpp_signed_long_max __glibcpp_s32_max\n-#  define __glibcpp_signed_long_digits __glibcpp_s32_digits\n-#  define __glibcpp_signed_long_digits10 __glibcpp_s32_digits10\n-#  define __glibcpp_unsigned_long_min __glibcpp_u32_min\n-#  define __glibcpp_unsigned_long_max __glibcpp_u32_max\n-#  define __glibcpp_unsigned_long_digits __glibcpp_u32_digits\n-#  define __glibcpp_unsigned_long_digits10 __glibcpp_u32_digits10\n-#elif __LONG_BIT__ == 64\n-#  define __glibcpp_signed_long_min (long)__glibcpp_s64_min\n-#  define __glibcpp_signed_long_max (long)__glibcpp_s64_max\n-#  define __glibcpp_signed_long_digits __glibcpp_s64_digits\n-#  define __glibcpp_signed_long_digits10 __glibcpp_s64_digits10\n-#  define __glibcpp_unsigned_long_min (unsigned long)__glibcpp_u64_min\n-#  define __glibcpp_unsigned_long_max (unsigned long)__glibcpp_u64_max\n-#  define __glibcpp_unsigned_long_digits __glibcpp_u64_digits\n-#  define __glibcpp_unsigned_long_digits10 __glibcpp_u64_digits10\n-#else\n-// You must define these macros in the configuration file.\n-#endif\n-\n-// long long\n-\n-#if __LONG_LONG_BIT__ == 8\n-#  define __glibcpp_signed_long_long_min __glibcpp_s8_min\n-#  define __glibcpp_signed_long_long_max __glibcpp_s8_max\n-#  define __glibcpp_signed_long_long_digits __glibcpp_s8_digits\n-#  define __glibcpp_signed_long_long_digits10 __glibcpp_s8_digits10\n-#  define __glibcpp_unsigned_long_long_min __glibcpp_u8_min\n-#  define __glibcpp_unsigned_long_long_max __glibcpp_u8_max\n-#  define __glibcpp_unsigned_long_long_digits __glibcpp_u8_digits\n-#  define __glibcpp_unsigned_long_long_digits10 __glibcpp_u8_digits10\n-#elif __LONG_LONG_BIT__ == 16\n-#  define __glibcpp_signed_long_long_min __glibcpp_s16_min\n-#  define __glibcpp_signed_long_long_max __glibcpp_s16_max\n-#  define __glibcpp_signed_long_long_digits __glibcpp_s16_digits\n-#  define __glibcpp_signed_long_long_digits10 __glibcpp_s16_digits10\n-#  define __glibcpp_unsigned_long_long_min __glibcpp_u16_min\n-#  define __glibcpp_unsigned_long_long_max __glibcpp_u16_max\n-#  define __glibcpp_unsigned_long_long_digits __glibcpp_u16_digits\n-#  define __glibcpp_unsigned_long_long_digits10 __glibcpp_u16_digits10\n-#elif __LONG_LONG_BIT__ == 32\n-#  define __glibcpp_signed_long_long_min __glibcpp_s32_min\n-#  define __glibcpp_signed_long_long_max __glibcpp_s32_max\n-#  define __glibcpp_signed_long_long_digits __glibcpp_s32_digits\n-#  define __glibcpp_signed_long_long_digits10 __glibcpp_s32_digits10\n-#  define __glibcpp_unsigned_long_long_min __glibcpp_u32_min\n-#  define __glibcpp_unsigned_long_long_max __glibcpp_u32_max\n-#  define __glibcpp_unsigned_long_long_digits __glibcpp_u32_digits\n-#  define __glibcpp_unsigned_long_long_digits10 __glibcpp_u32_digits10\n-#elif __LONG_LONG_BIT__ == 64\n-#  define __glibcpp_signed_long_long_min __glibcpp_s64_min\n-#  define __glibcpp_signed_long_long_max __glibcpp_s64_max\n-#  define __glibcpp_signed_long_long_digits __glibcpp_s64_digits\n-#  define __glibcpp_signed_long_long_digits10 __glibcpp_s64_digits10\n-#  define __glibcpp_unsigned_long_long_min __glibcpp_u64_min\n-#  define __glibcpp_unsigned_long_long_max __glibcpp_u64_max\n-#  define __glibcpp_unsigned_long_long_digits __glibcpp_u64_digits\n-#  define __glibcpp_unsigned_long_long_digits10 __glibcpp_u64_digits10\n-#else\n-// You must define these macros in the configuration file.\n-#endif\n-\n-// wchar_t\n-\n-#if __glibcpp_wchar_t_is_signed\n-#  if __WCHAR_BIT__ == 8\n-#    define __glibcpp_wchar_t_min __glibcpp_s8_min\n-#    define __glibcpp_wchar_t_max __glibcpp_s8_max\n-#    define __glibcpp_wchar_t_digits __glibcpp_s8_digits\n-#    define __glibcpp_wchar_t_digits10 __glibcpp_s8_digits10\n-#  elif __WCHAR_BIT__ == 16\n-#    define __glibcpp_wchar_t_min __glibcpp_s16_min\n-#    define __glibcpp_wchar_t_max __glibcpp_s16_max\n-#    define __glibcpp_wchar_t_digits __glibcpp_s16_digits\n-#    define __glibcpp_wchar_t_digits10 __glibcpp_s16_digits10\n-#  elif __WCHAR_BIT__ == 32\n-#    define __glibcpp_wchar_t_min (wchar_t)__glibcpp_s32_min\n-#    define __glibcpp_wchar_t_max (wchar_t)__glibcpp_s32_max\n-#    define __glibcpp_wchar_t_digits __glibcpp_s32_digits\n-#    define __glibcpp_wchar_t_digits10 __glibcpp_s32_digits10\n-#  elif __WCHAR_BIT__ == 64\n-#    define __glibcpp_wchar_t_min (wchar_t)__glibcpp_s64_min\n-#    define __glibcpp_wchar_t_max (wchar_t)__glibcpp_s64_max\n-#    define __glibcpp_wchar_t_digits __glibcpp_s64_digits\n-#    define __glibcpp_wchar_t_digits10 __glibcpp_s64_digits10\n-#  else\n-// You must define these macros in the configuration file.\n-#  endif\n-#else\n-#  if __WCHAR_BIT__ == 8\n-#    define __glibcpp_wchar_t_min __glibcpp_u8_min\n-#    define __glibcpp_wchar_t_max __glibcpp_u8_max\n-#    define __glibcpp_wchar_t_digits __glibcpp_u8_digits\n-#    define __glibcpp_wchar_t_digits10 __glibcpp_u8_digits10\n-#  elif __WCHAR_BIT__ == 16\n-#    define __glibcpp_wchar_t_min __glibcpp_u16_min\n-#    define __glibcpp_wchar_t_max __glibcpp_u16_max\n-#    define __glibcpp_wchar_t_digits __glibcpp_u16_digits\n-#    define __glibcpp_wchar_t_digits10 __glibcpp_u16_digits10\n-#  elif __WCHAR_BIT__ == 32\n-#    define __glibcpp_wchar_t_min (wchar_t)__glibcpp_u32_min\n-#    define __glibcpp_wchar_t_max (wchar_t)__glibcpp_u32_max\n-#    define __glibcpp_wchar_t_digits __glibcpp_u32_digits\n-#    define __glibcpp_wchar_t_digits10 __glibcpp_u32_digits10\n-#  elif __WCHAR_BIT__ == 64\n-#    define __glibcpp_wchar_t_min (wchar_t)__glibcpp_u64_min\n-#    define __glibcpp_wchar_t_max (wchar_t)__glibcpp_u64_max\n-#    define __glibcpp_wchar_t_digits __glibcpp_u64_digits\n-#    define __glibcpp_wchar_t_digits10 __glibcpp_u64_digits10\n-#  else\n-// You must define these macros in the configuration file.\n-#  endif\n-#endif\n-\n // float\n //\n \n@@ -427,15 +95,9 @@\n #ifndef __glibcpp_float_has_denorm_loss\n #  define __glibcpp_float_has_denorm_loss false\n #endif\n-\n-#ifndef __glibcpp_float_is_modulo\n-#  define __glibcpp_float_is_modulo false\n-#endif\n-\n #ifndef __glibcpp_float_traps\n #  define __glibcpp_float_traps false\n #endif\n-\n #ifndef __glibcpp_float_tinyness_before\n #  define __glibcpp_float_tinyness_before false\n #endif\n@@ -447,15 +109,9 @@\n #ifndef __glibcpp_double_has_denorm_loss\n #  define __glibcpp_double_has_denorm_loss false\n #endif\n-\n-#ifndef __glibcpp_double_is_modulo\n-#  define __glibcpp_double_is_modulo false\n-#endif\n-\n #ifndef __glibcpp_double_traps\n #  define __glibcpp_double_traps false\n #endif\n-\n #ifndef __glibcpp_double_tinyness_before\n #  define __glibcpp_double_tinyness_before false\n #endif\n@@ -467,65 +123,34 @@\n #ifndef __glibcpp_long_double_has_denorm_loss\n #  define __glibcpp_long_double_has_denorm_loss false\n #endif\n-\n-#ifndef __glibcpp_long_double_is_modulo\n-#  define __glibcpp_long_double_is_modulo false\n-#endif\n-\n #ifndef __glibcpp_long_double_traps\n #  define __glibcpp_long_double_traps false\n #endif\n-\n #ifndef __glibcpp_long_double_tinyness_before\n #  define __glibcpp_long_double_tinyness_before false\n #endif\n \n+// You should not need to define any macros below this point.\n+\n+#define __glibcpp_signed(T)\t((T)(-1) < 0)\n+\n+#define __glibcpp_min(T) \\\n+  (__glibcpp_signed (T) ? (T)1 << __glibcpp_digits (T) : (T)0)\n+\n+#define __glibcpp_max(T) \\\n+  (__glibcpp_signed (T) ? ((T)1 << __glibcpp_digits (T)) - 1 : ~(T)0)\n+\n+#define __glibcpp_digits(T) \\\n+  (sizeof(T) * __CHAR_BIT__ - __glibcpp_signed (T))\n+\n+// The fraction 643/2136 approximates log10(2) to 7 significant digits.\n+#define __glibcpp_digits10(T) \\\n+  (__glibcpp_digits (T) * 643 / 2136)\n+\n \n namespace std\n {\n-  // This is better handled by the compiler, but we do it here for the\n-  // time being.  (We're just second-guessing something the compiler\n-  // knows about better than we do.) -- Gaby\n-  typedef unsigned char __glibcpp_byte;\n-#define __glibcpp_word_bits 32\n-#if __CHAR_BIT__ == __glibcpp_word_bits\n-#  define __glibcpp_word unsigned char\n-#elif __SHRT_BIT__ == __glibcpp_word_bits\n-#  define __glibcpp_word unsigned short  \n-#elif __INT_BIT__ == __glibcpp_word_bits\n-#  define __glibcpp_word unsigned int\n-#elif __LONG_BIT__ == __glibcpp_word_bits\n-#  define __glibcpp_word unsigned long\n-#endif  \n-\n-  // Define storage types for the single, double and extended floating\n-  // point data types.  Maybe we could avoid the conditional #defines by\n-  // using the aligned_storage<> extension.  -- Gaby\n-  typedef const\n-#if __FLOAT_BIT__ % __glibcpp_word_bits == 0\n-    __glibcpp_word __float_storage[sizeof (float) / sizeof (__glibcpp_word)]\n-#else\n-    __glibcpp_byte __float_storage[sizeof (float)]\n-#endif  \n-    __attribute__((__aligned__(__alignof__(float))));\n-\n-  typedef const\n-#if __DOUBLE_BIT__ % __glibcpp_word_bits == 0\n-    __glibcpp_word __double_storage[sizeof (double) / sizeof (__glibcpp_word)]\n-#else\n-    __glibcpp_byte __double_storage[sizeof (double)]\n-#endif  \n-    __attribute__((__aligned__(__alignof__(double))));\n-\n-  typedef const\n-#if __LONG_DOUBLE_BIT__ % __glibcpp_word_bits == 0\n-    __glibcpp_word __long_double_storage[sizeof (long double) / sizeof (__glibcpp_word)]\n-#else\n-    __glibcpp_byte __long_double_storage[sizeof (long double)]\n-#endif  \n-    __attribute__((__aligned__(__alignof__(long double))));\n-\n-  enum float_round_style \n+  enum float_round_style\n   {\n     round_indeterminate       = -1,\n     round_toward_zero         = 0,\n@@ -534,7 +159,7 @@ namespace std\n     round_toward_neg_infinity = 3\n   };\n \n-  enum float_denorm_style \n+  enum float_denorm_style\n   {\n     denorm_indeterminate = -1,\n     denorm_absent        = 0,\n@@ -559,7 +184,7 @@ namespace std\n     static const int min_exponent10 = 0;\n     static const int max_exponent = 0;\n     static const int max_exponent10 = 0;\n-    \n+\n     static const bool has_infinity = false;\n     static const bool has_quiet_NaN = false;\n     static const bool has_signaling_NaN = false;\n@@ -575,8 +200,8 @@ namespace std\n     static const float_round_style round_style = round_toward_zero;\n   };\n \n-  template<typename _Tp> \n-    struct numeric_limits : public __numeric_limits_base \n+  template<typename _Tp>\n+    struct numeric_limits : public __numeric_limits_base\n     {\n       static _Tp min() throw() { return static_cast<_Tp>(0); }\n       static _Tp max() throw() { return static_cast<_Tp>(0); }\n@@ -589,19 +214,18 @@ namespace std\n     };\n \n   // Now there follow 15 explicit specializations.  Yes, 15.  Make sure\n-  // you get the count right.  \n+  // you get the count right.\n   template<>\n     struct numeric_limits<bool>\n     {\n       static const bool is_specialized = true;\n \n       static bool min() throw()\n       { return false; }\n-\n       static bool max() throw()\n       { return true; }\n \n-      static const int digits = __glibcpp_bool_digits;\n+      static const int digits = 1;\n       static const int digits10 = 0;\n       static const bool is_signed = false;\n       static const bool is_integer = true;\n@@ -644,21 +268,19 @@ namespace std\n       static const float_round_style round_style = round_toward_zero;\n     };\n \n-#undef __glibcpp_bool_digits  \n-  \n   template<>\n     struct numeric_limits<char>\n     {\n       static const bool is_specialized = true;\n \n       static char min() throw()\n-      { return __glibcpp_char_min; }\n+      { return __glibcpp_min(char); }\n       static char max() throw()\n-      { return __glibcpp_char_max; }\n+      { return __glibcpp_max(char); }\n \n-      static const int digits = __glibcpp_char_digits;\n-      static const int digits10 = __glibcpp_char_digits10;\n-      static const bool is_signed = __glibcpp_plain_char_is_signed;\n+      static const int digits = __glibcpp_digits (char);\n+      static const int digits10 = __glibcpp_digits10 (char);\n+      static const bool is_signed = __glibcpp_signed (char);\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n       static const int radix = 2;\n@@ -696,26 +318,18 @@ namespace std\n       static const float_round_style round_style = round_toward_zero;\n     };\n \n-#undef __glibcpp_char_min\n-#undef __glibcpp_char_max  \n-#undef __glibcpp_char_digits\n-#undef __glibcpp_char_digits10\n-#undef __glibcpp_char_is_signed\n-\n-\n-\n   template<>\n     struct numeric_limits<signed char>\n     {\n       static const bool is_specialized = true;\n \n       static signed char min() throw()\n-      { return __glibcpp_signed_char_min; }\n+      { return -__SCHAR_MAX__ - 1; }\n       static signed char max() throw()\n-      { return __glibcpp_signed_char_max; }\n+      { return __SCHAR_MAX__; }\n \n-      static const int digits = __glibcpp_signed_char_digits;\n-      static const int digits10 = __glibcpp_signed_char_digits10;\n+      static const int digits = __glibcpp_digits (signed char);\n+      static const int digits10 = __glibcpp_digits10 (signed char);\n       static const bool is_signed = true;\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -754,11 +368,6 @@ namespace std\n       static const float_round_style round_style = round_toward_zero;\n     };\n \n-#undef __glibcpp_signed_char_min\n-#undef __glibcpp_signed_char_max\n-#undef __glibcpp_signed_char_digits\n-#undef __glibcpp_signed_char_digits10\n-\n   template<>\n     struct numeric_limits<unsigned char>\n     {\n@@ -767,10 +376,10 @@ namespace std\n       static unsigned char min() throw()\n       { return 0; }\n       static unsigned char max() throw()\n-      { return __glibcpp_unsigned_char_max; }\n+      { return __SCHAR_MAX__ * 2U + 1; }\n \n-      static const int digits = __glibcpp_unsigned_char_digits;\n-      static const int digits10 = __glibcpp_unsigned_char_digits10;\n+      static const int digits = __glibcpp_digits10 (unsigned char);\n+      static const int digits10 = __glibcpp_digits10 (unsigned char);\n       static const bool is_signed = false;\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -809,23 +418,19 @@ namespace std\n       static const float_round_style round_style = round_toward_zero;\n     };\n \n-#undef __glibcpp_unsigned_char_max\n-#undef __glibcpp_unsigned_char_digits\n-#undef __glibcpp_unsigned_char_digits10\n-\n   template<>\n     struct numeric_limits<wchar_t>\n     {\n       static const bool is_specialized = true;\n \n       static wchar_t min() throw()\n-      { return __glibcpp_wchar_t_min; }\n+      { return __glibcpp_min (wchar_t); }\n       static wchar_t max() throw()\n-      { return __glibcpp_wchar_t_max; }\n+      { return __glibcpp_max (wchar_t); }\n \n-      static const int digits = __glibcpp_wchar_t_digits;\n-      static const int digits10 = __glibcpp_wchar_t_digits10;\n-      static const bool is_signed = __glibcpp_wchar_t_is_signed;\n+      static const int digits = __glibcpp_digits (wchar_t);\n+      static const int digits10 = __glibcpp_digits10 (wchar_t);\n+      static const bool is_signed = __glibcpp_signed (wchar_t);\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n       static const int radix = 2;\n@@ -863,24 +468,18 @@ namespace std\n       static const float_round_style round_style = round_toward_zero;\n     };\n \n-#undef __glibcpp_wchar_t_min\n-#undef __glibcpp_wchar_t_max\n-#undef __glibcpp_wchar_t_digits\n-#undef __glibcpp_wchar_t_digits10  \n-#undef __glibcpp_wchar_t_is_signed\n-  \n   template<>\n     struct numeric_limits<short>\n     {\n       static const bool is_specialized = true;\n \n       static short min() throw()\n-      { return __glibcpp_signed_short_min; }\n+      { return -__SHRT_MAX__ - 1; }\n       static short max() throw()\n-      { return __glibcpp_signed_short_max; }\n+      { return __SHRT_MAX__; }\n \n-      static const int digits = __glibcpp_signed_short_digits;\n-      static const int digits10 = __glibcpp_signed_short_digits10;\n+      static const int digits = __glibcpp_digits (short);\n+      static const int digits10 = __glibcpp_digits10 (short);\n       static const bool is_signed = true;\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -919,11 +518,6 @@ namespace std\n       static const float_round_style round_style = round_toward_zero;\n     };\n \n-#undef __glibcpp_signed_short_min\n-#undef __glibcpp_signed_short_max\n-#undef __glibcpp_signed_short_digits\n-#undef __glibcpp_signed_short_digits10\n-  \n   template<>\n     struct numeric_limits<unsigned short>\n     {\n@@ -932,10 +526,10 @@ namespace std\n       static unsigned short min() throw()\n       { return 0; }\n       static unsigned short max() throw()\n-      { return __glibcpp_unsigned_short_max; }\n+      { return __SHRT_MAX__ * 2U + 1; }\n \n-      static const int digits = __glibcpp_unsigned_short_digits;\n-      static const int digits10 = __glibcpp_unsigned_short_digits10;\n+      static const int digits = __glibcpp_digits (unsigned short);\n+      static const int digits10 = __glibcpp_digits10 (unsigned short);\n       static const bool is_signed = false;\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -974,22 +568,18 @@ namespace std\n       static const float_round_style round_style = round_toward_zero;\n     };\n \n-#undef __glibcpp_unsigned_short_max\n-#undef __glibcpp_unsigned_short_digits\n-#undef __glibcpp_unsigned_short_digits10\n-  \n   template<>\n     struct numeric_limits<int>\n     {\n       static const bool is_specialized = true;\n \n       static int min() throw()\n-      { return __glibcpp_signed_int_min; }\n+      { return -__INT_MAX__ - 1; }\n       static int max() throw()\n-      { return __glibcpp_signed_int_max; }\n+      { return __INT_MAX__; }\n \n-      static const int digits = __glibcpp_signed_int_digits;\n-      static const int digits10 = __glibcpp_signed_int_digits10;\n+      static const int digits = __glibcpp_digits (int);\n+      static const int digits10 = __glibcpp_digits10 (int);\n       static const bool is_signed = true;\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -1028,23 +618,18 @@ namespace std\n       static const float_round_style round_style = round_toward_zero;\n     };\n \n-#undef __glibcpp_signed_int_min\n-#undef __glibcpp_signed_int_max\n-#undef __glibcpp_signed_int_digits\n-#undef __glibcpp_signed_int_digits10\n-  \n   template<>\n     struct numeric_limits<unsigned int>\n     {\n       static const bool is_specialized = true;\n \n       static unsigned int min() throw()\n       { return 0; }\n-          static unsigned int max() throw()\n-      { return __glibcpp_unsigned_int_max; }\n+      static unsigned int max() throw()\n+      { return __INT_MAX__ * 2U + 1; }\n \n-      static const int digits = __glibcpp_unsigned_int_digits;\n-      static const int digits10 = __glibcpp_unsigned_int_digits10;\n+      static const int digits = __glibcpp_digits (unsigned int);\n+      static const int digits10 = __glibcpp_digits10 (unsigned int);\n       static const bool is_signed = false;\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -1083,22 +668,18 @@ namespace std\n       static const float_round_style round_style = round_toward_zero;\n     };\n \n-#undef __glibcpp_unsigned_int_max\n-#undef __glibcpp_unsigned_int_digits\n-#undef __glibcpp_unsigned_int_digits10\n-\n   template<>\n     struct numeric_limits<long>\n     {\n       static const bool is_specialized = true;\n \n       static long min() throw()\n-      { return __glibcpp_signed_long_min; }\n+      { return -__LONG_MAX__ - 1; }\n       static long max() throw()\n-      { return __glibcpp_signed_long_max; }\n+      { return __LONG_MAX__; }\n \n-      static const int digits = __glibcpp_signed_long_digits;\n-      static const int digits10 = __glibcpp_signed_long_digits10;\n+      static const int digits = __glibcpp_digits (long);\n+      static const int digits10 = __glibcpp_digits10 (long);\n       static const bool is_signed = true;\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -1137,11 +718,6 @@ namespace std\n       static const float_round_style round_style = round_toward_zero;\n     };\n \n-#undef __glibcpp_signed_long_min\n-#undef __glibcpp_signed_long_max\n-#undef __glibcpp_signed_long_digits\n-#undef __glibcpp_signed_long_digits10\n-  \n   template<>\n     struct numeric_limits<unsigned long>\n     {\n@@ -1150,10 +726,10 @@ namespace std\n       static unsigned long min() throw()\n       { return 0; }\n       static unsigned long max() throw()\n-      { return __glibcpp_unsigned_long_max; }\n+      { return __LONG_MAX__ * 2UL + 1; }\n \n-      static const int digits = __glibcpp_unsigned_long_digits;\n-      static const int digits10 = __glibcpp_unsigned_long_digits10;\n+      static const int digits = __glibcpp_digits (unsigned long);\n+      static const int digits10 = __glibcpp_digits10 (unsigned long);\n       static const bool is_signed = false;\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -1192,22 +768,18 @@ namespace std\n       static const float_round_style round_style = round_toward_zero;\n     };\n \n-#undef __glibcpp_unsigned_long_max\n-#undef __glibcpp_unsigned_long_digits\n-#undef __glibcpp_unsigned_long_digits10\n-\n   template<>\n     struct numeric_limits<long long>\n     {\n       static const bool is_specialized = true;\n-      \n+\n       static long long min() throw()\n-      { return __glibcpp_signed_long_long_min; }\n+      { return -__LONG_LONG_MAX__ - 1; }\n       static long long max() throw()\n-      { return __glibcpp_signed_long_long_max; }\n-      \n-      static const int digits = __glibcpp_signed_long_long_digits;\n-      static const int digits10 = __glibcpp_signed_long_long_digits10;\n+      { return __LONG_LONG_MAX__; }\n+\n+      static const int digits = __glibcpp_digits (long long);\n+      static const int digits10 = __glibcpp_digits10 (long long);\n       static const bool is_signed = true;\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -1216,18 +788,18 @@ namespace std\n       { return 0; }\n       static long long round_error() throw()\n       { return 0; }\n-      \n+\n       static const int min_exponent = 0;\n       static const int min_exponent10 = 0;\n       static const int max_exponent = 0;\n       static const int max_exponent10 = 0;\n-      \n+\n       static const bool has_infinity = false;\n       static const bool has_quiet_NaN = false;\n       static const bool has_signaling_NaN = false;\n       static const float_denorm_style has_denorm = denorm_absent;\n       static const bool has_denorm_loss = false;\n-      \n+\n       static long long infinity() throw()\n       { return static_cast<long long>(0); }\n       static long long quiet_NaN() throw()\n@@ -1236,7 +808,7 @@ namespace std\n       { return static_cast<long long>(0); }\n       static long long denorm_min() throw()\n       { return static_cast<long long>(0); }\n-      \n+\n       static const bool is_iec559 = true;\n       static const bool is_bounded = true;\n       static const bool is_modulo = true;\n@@ -1246,11 +818,6 @@ namespace std\n       static const float_round_style round_style = round_toward_zero;\n     };\n \n-#undef __glibcpp_signed_long_long_min\n-#undef __glibcpp_signed_long_long_max\n-#undef __glibcpp_signed_long_long_digits\n-#undef __glibcpp_signed_long_long_digits10\n-  \n   template<>\n     struct numeric_limits<unsigned long long>\n     {\n@@ -1259,10 +826,10 @@ namespace std\n       static unsigned long long min() throw()\n       { return 0; }\n       static unsigned long long max() throw()\n-      { return __glibcpp_unsigned_long_long_max; }\n+      { return __LONG_LONG_MAX__ * 2ULL + 1; }\n \n-      static const int digits = __glibcpp_unsigned_long_long_digits;\n-      static const int digits10 = __glibcpp_unsigned_long_long_digits10;\n+      static const int digits = __glibcpp_digits (unsigned long long);\n+      static const int digits10 = __glibcpp_digits10 (unsigned long long);\n       static const bool is_signed = false;\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -1301,10 +868,6 @@ namespace std\n       static const float_round_style round_style = round_toward_zero;\n     };\n \n-#undef __glibcpp_unsigned_long_long_max\n-#undef __glibcpp_unsigned_long_long_digits\n-#undef __glibcpp_unsigned_long_long_digits10\n-\n   template<>\n     struct numeric_limits<float>\n     {\n@@ -1351,15 +914,14 @@ namespace std\n \n       static const bool is_iec559 = has_infinity && has_quiet_NaN;\n       static const bool is_bounded = true;\n-      static const bool is_modulo = __glibcpp_float_is_modulo;\n+      static const bool is_modulo = false;\n \n       static const bool traps = __glibcpp_float_traps;\n       static const bool tinyness_before = __glibcpp_float_tinyness_before;\n       static const float_round_style round_style = round_to_nearest;\n     };\n \n #undef __glibcpp_float_has_denorm_loss\n-#undef __glibcpp_float_is_modulo\n #undef __glibcpp_float_traps\n #undef __glibcpp_float_tinyness_before\n \n@@ -1409,19 +971,17 @@ namespace std\n \n       static const bool is_iec559 = has_infinity && has_quiet_NaN;\n       static const bool is_bounded = true;\n-      static const bool is_modulo = __glibcpp_double_is_modulo;\n+      static const bool is_modulo = false;\n \n       static const bool traps = __glibcpp_double_traps;\n       static const bool tinyness_before = __glibcpp_double_tinyness_before;\n       static const float_round_style round_style = round_to_nearest;\n     };\n \n #undef __glibcpp_double_has_denorm_loss\n-#undef __glibcpp_double_is_modulo\n #undef __glibcpp_double_traps\n #undef __glibcpp_double_tinyness_before\n-  \n-  \n+\n   template<>\n     struct numeric_limits<long double>\n     {\n@@ -1459,7 +1019,7 @@ namespace std\n \t= __glibcpp_long_double_has_denorm_loss;\n \n       static long double infinity() throw()\n-      { return __builtin_huge_vall (); } \n+      { return __builtin_huge_vall (); }\n       static long double quiet_NaN() throw()\n       { return __builtin_nanl (\"\"); }\n       static long double signaling_NaN() throw()\n@@ -1469,18 +1029,23 @@ namespace std\n \n       static const bool is_iec559 = has_infinity && has_quiet_NaN;\n       static const bool is_bounded = true;\n-      static const bool is_modulo = __glibcpp_long_double_is_modulo;\n+      static const bool is_modulo = false;\n \n-      static const bool traps = __glibcpp_long_double_traps; \n+      static const bool traps = __glibcpp_long_double_traps;\n       static const bool tinyness_before = __glibcpp_long_double_tinyness_before;\n       static const float_round_style round_style = round_to_nearest;\n     };\n \n #undef __glibcpp_long_double_has_denorm_loss\n-#undef __glibcpp_long_double_is_modulo\n #undef __glibcpp_long_double_traps\n #undef __glibcpp_long_double_tinyness_before\n \n } // namespace std\n \n+#undef __glibcpp_signed\n+#undef __glibcpp_min\n+#undef __glibcpp_max\n+#undef __glibcpp_digits\n+#undef __glibcpp_digits10\n+\n #endif // _CPP_NUMERIC_LIMITS"}, {"sha": "6eb0134976665c808519efd2b54e35f22c96beb7", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits.cc", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad8f94953f01ad3463872b57343093a13d29b4b/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad8f94953f01ad3463872b57343093a13d29b4b/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc?ref=6ad8f94953f01ad3463872b57343093a13d29b4b", "patch": "@@ -284,14 +284,26 @@ bool test03()\n   bool test = true;\n \n   VERIFY( std::numeric_limits<bool>::digits10 == 0 );\n-  VERIFY( __glibcpp_s8_digits10 == 2 );\n-  VERIFY( __glibcpp_u8_digits10 == 2 );\n-  VERIFY( __glibcpp_s16_digits10 == 4 );\n-  VERIFY( __glibcpp_u16_digits10 == 4 );\n-  VERIFY( __glibcpp_s32_digits10 == 9 );\n-  VERIFY( __glibcpp_u32_digits10 == 9 );\n-  VERIFY( __glibcpp_s64_digits10 == 18 );\n-  VERIFY( __glibcpp_u64_digits10 == 19 );\n+  if (__CHAR_BIT__ == 8)\n+    {\n+      VERIFY( std::numeric_limits<signed char>::digits10 == 2 );\n+      VERIFY( std::numeric_limits<unsigned char>::digits10 == 2 );\n+    }\n+  if (__CHAR_BIT__ * sizeof(short) == 16)\n+    {\n+      VERIFY( std::numeric_limits<signed short>::digits10 == 4 );\n+      VERIFY( std::numeric_limits<unsigned short>::digits10 == 4 );\n+    }\n+  if (__CHAR_BIT__ * sizeof(int) == 32)\n+    {\n+      VERIFY( std::numeric_limits<signed int>::digits10 == 9 );\n+      VERIFY( std::numeric_limits<unsigned int>::digits10 == 9 );\n+    }\n+  if (__CHAR_BIT__ * sizeof(long long) == 64)\n+    {\n+      VERIFY( std::numeric_limits<signed long long>::digits10 == 18 );\n+      VERIFY( std::numeric_limits<unsigned long long>::digits10 == 19 );\n+    }\n \n #ifdef DEBUG_ASSERT\n   assert(test);"}]}