{"sha": "007443a0c1bb11ae55a43d562f070aba88a607c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA3NDQzYTBjMWJiMTFhZTU1YTQzZDU2MmYwNzBhYmE4OGE2MDdjNg==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-07-31T09:55:59Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-07-31T09:55:59Z"}, "message": "[Ada] Spurious error on the placement of aspect Global\n\nThis patch modifies the expansion of stand-alone subprogram bodies that appear\nin the body of a protected type to properly associate aspects and pragmas to\nthe newly created spec for the subprogram body. As a result, the annotations\nare properly associated with the initial declaration of the subprogram.\n\n2018-07-31  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch9.adb (Analyze_Pragmas): New routine.\n\t(Build_Private_Protected_Declaration): Code clean up. Relocate\n\trelevant aspects and pragmas from the stand-alone body to the\n\tnewly created spec.  Explicitly analyze any pragmas that have\n\tbeen either relocated or produced by the analysis of the\n\taspects.\n\t(Move_Pragmas): New routine.\n\t* sem_prag.adb (Find_Related_Declaration_Or_Body): Recognize the\n\tcase where a pragma applies to the internally created spec for a\n\tstand-along subprogram body declared in a protected body.\n\ngcc/testsuite/\n\n\t* gnat.dg/global.adb, gnat.dg/global.ads: New testcase.\n\nFrom-SVN: r263097", "tree": {"sha": "26e10abace19553f3fd5d6ff39ece5add8a893f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26e10abace19553f3fd5d6ff39ece5add8a893f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/007443a0c1bb11ae55a43d562f070aba88a607c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/007443a0c1bb11ae55a43d562f070aba88a607c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/007443a0c1bb11ae55a43d562f070aba88a607c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/007443a0c1bb11ae55a43d562f070aba88a607c6/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "76ed5f08f4462d7d22bc6cda3624e131e65bdd52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76ed5f08f4462d7d22bc6cda3624e131e65bdd52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76ed5f08f4462d7d22bc6cda3624e131e65bdd52"}], "stats": {"total": 284, "additions": 259, "deletions": 25}, "files": [{"sha": "08fdfcebfcadbdae9dd3d62f0850add0bdef28c0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/007443a0c1bb11ae55a43d562f070aba88a607c6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/007443a0c1bb11ae55a43d562f070aba88a607c6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=007443a0c1bb11ae55a43d562f070aba88a607c6", "patch": "@@ -1,3 +1,16 @@\n+2018-07-31  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch9.adb (Analyze_Pragmas): New routine.\n+\t(Build_Private_Protected_Declaration): Code clean up. Relocate\n+\trelevant aspects and pragmas from the stand-alone body to the\n+\tnewly created spec.  Explicitly analyze any pragmas that have\n+\tbeen either relocated or produced by the analysis of the\n+\taspects.\n+\t(Move_Pragmas): New routine.\n+\t* sem_prag.adb (Find_Related_Declaration_Or_Body): Recognize the\n+\tcase where a pragma applies to the internally created spec for a\n+\tstand-along subprogram body declared in a protected body.\n+\n 2018-07-31  Gary Dismukes  <dismukes@adacore.com>\n \n \t* exp_ch6.adb (Expand_N_Extended_Return_Statement): Replace"}, {"sha": "e7561df0fd2c9a910f3d9cd51d0c2ace1ff62d56", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 126, "deletions": 25, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/007443a0c1bb11ae55a43d562f070aba88a607c6/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/007443a0c1bb11ae55a43d562f070aba88a607c6/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=007443a0c1bb11ae55a43d562f070aba88a607c6", "patch": "@@ -23,6 +23,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+with Aspects;  use Aspects;\n with Atree;    use Atree;\n with Einfo;    use Einfo;\n with Elists;   use Elists;\n@@ -53,6 +54,7 @@ with Sem_Ch9;  use Sem_Ch9;\n with Sem_Ch11; use Sem_Ch11;\n with Sem_Elab; use Sem_Elab;\n with Sem_Eval; use Sem_Eval;\n+with Sem_Prag; use Sem_Prag;\n with Sem_Res;  use Sem_Res;\n with Sem_Util; use Sem_Util;\n with Sinfo;    use Sinfo;\n@@ -290,7 +292,7 @@ package body Exp_Ch9 is\n      (N   : Node_Id;\n       Pid : Node_Id) return Node_Id;\n    --  This routine constructs the unprotected version of a protected\n-   --  subprogram body, which is contains all of the code in the original,\n+   --  subprogram body, which contains all of the code in the original,\n    --  unexpanded body. This is the version of the protected subprogram that is\n    --  called from all protected operations on the same object, including the\n    --  protected version of the same subprogram.\n@@ -3483,14 +3485,95 @@ package body Exp_Ch9 is\n    function Build_Private_Protected_Declaration\n      (N : Node_Id) return Entity_Id\n    is\n+      procedure Analyze_Pragmas (From : Node_Id);\n+      --  Analyze all pragmas which follow arbitrary node From\n+\n+      procedure Move_Pragmas (From : Node_Id; To : Node_Id);\n+      --  Find all suitable source pragmas at the top of subprogram body From's\n+      --  declarations and insert them after arbitrary node To.\n+\n+      ---------------------\n+      -- Analyze_Pragmas --\n+      ---------------------\n+\n+      procedure Analyze_Pragmas (From : Node_Id) is\n+         Decl : Node_Id;\n+\n+      begin\n+         Decl := Next (From);\n+         while Present (Decl) loop\n+            if Nkind (Decl) = N_Pragma then\n+               Analyze_Pragma (Decl);\n+\n+            --  No candidate pragmas are available for analysis\n+\n+            else\n+               exit;\n+            end if;\n+\n+            Next (Decl);\n+         end loop;\n+      end Analyze_Pragmas;\n+\n+      ------------------\n+      -- Move_Pragmas --\n+      ------------------\n+\n+      procedure Move_Pragmas (From : Node_Id; To : Node_Id) is\n+         Decl       : Node_Id;\n+         Insert_Nod : Node_Id;\n+         Next_Decl  : Node_Id;\n+\n+      begin\n+         pragma Assert (Nkind (From) = N_Subprogram_Body);\n+\n+         --  The pragmas are moved in an order-preserving fashion\n+\n+         Insert_Nod := To;\n+\n+         --  Inspect the declarations of the subprogram body and relocate all\n+         --  candidate pragmas.\n+\n+         Decl := First (Declarations (From));\n+         while Present (Decl) loop\n+\n+            --  Preserve the following declaration for iteration purposes, due\n+            --  to possible relocation of a pragma.\n+\n+            Next_Decl := Next (Decl);\n+\n+            if Nkind (Decl) = N_Pragma then\n+               Remove (Decl);\n+               Insert_After (Insert_Nod, Decl);\n+               Insert_Nod := Decl;\n+\n+            --  Skip internally generated code\n+\n+            elsif not Comes_From_Source (Decl) then\n+               null;\n+\n+            --  No candidate pragmas are available for relocation\n+\n+            else\n+               exit;\n+            end if;\n+\n+            Decl := Next_Decl;\n+         end loop;\n+      end Move_Pragmas;\n+\n+      --  Local variables\n+\n+      Body_Id  : constant Entity_Id  := Defining_Entity (N);\n       Loc      : constant Source_Ptr := Sloc (N);\n-      Body_Id  : constant Entity_Id := Defining_Entity (N);\n       Decl     : Node_Id;\n-      Plist    : List_Id;\n       Formal   : Entity_Id;\n-      New_Spec : Node_Id;\n+      Formals  : List_Id;\n+      Spec     : Node_Id;\n       Spec_Id  : Entity_Id;\n \n+   --  Start of processing for Build_Private_Protected_Declaration\n+\n    begin\n       Formal := First_Formal (Body_Id);\n \n@@ -3499,43 +3582,61 @@ package body Exp_Ch9 is\n       --  expansion is enabled.\n \n       if Present (Formal) or else Expander_Active then\n-         Plist := Copy_Parameter_List (Body_Id);\n+         Formals := Copy_Parameter_List (Body_Id);\n       else\n-         Plist := No_List;\n+         Formals := No_List;\n       end if;\n \n+      Spec_Id :=\n+        Make_Defining_Identifier (Sloc (Body_Id),\n+          Chars => Chars (Body_Id));\n+\n+      --  Indicate that the entity comes from source, to ensure that cross-\n+      --  reference information is properly generated. The body itself is\n+      --  rewritten during expansion, and the body entity will not appear in\n+      --  calls to the operation.\n+\n+      Set_Comes_From_Source (Spec_Id, True);\n+\n       if Nkind (Specification (N)) = N_Procedure_Specification then\n-         New_Spec :=\n+         Spec :=\n            Make_Procedure_Specification (Loc,\n-              Defining_Unit_Name       =>\n-                Make_Defining_Identifier (Sloc (Body_Id),\n-                  Chars => Chars (Body_Id)),\n-              Parameter_Specifications =>\n-                Plist);\n+              Defining_Unit_Name       => Spec_Id,\n+              Parameter_Specifications => Formals);\n       else\n-         New_Spec :=\n+         Spec :=\n            Make_Function_Specification (Loc,\n-             Defining_Unit_Name       =>\n-               Make_Defining_Identifier (Sloc (Body_Id),\n-                 Chars => Chars (Body_Id)),\n-             Parameter_Specifications => Plist,\n+             Defining_Unit_Name       => Spec_Id,\n+             Parameter_Specifications => Formals,\n              Result_Definition        =>\n                New_Occurrence_Of (Etype (Body_Id), Loc));\n       end if;\n \n-      Decl := Make_Subprogram_Declaration (Loc, Specification => New_Spec);\n+      Decl := Make_Subprogram_Declaration (Loc, Specification => Spec);\n+      Set_Corresponding_Body (Decl, Body_Id);\n+      Set_Corresponding_Spec (N,    Spec_Id);\n+\n       Insert_Before (N, Decl);\n-      Spec_Id := Defining_Unit_Name (New_Spec);\n \n-      --  Indicate that the entity comes from source, to ensure that cross-\n-      --  reference information is properly generated. The body itself is\n-      --  rewritten during expansion, and the body entity will not appear in\n-      --  calls to the operation.\n+      --  Associate all aspects and pragmas of the body with the spec. This\n+      --  ensures that these annotations apply to the initial declaration of\n+      --  the subprogram body.\n+\n+      Move_Aspects (From => N, To => Decl);\n+      Move_Pragmas (From => N, To => Decl);\n \n-      Set_Comes_From_Source (Spec_Id, True);\n       Analyze (Decl);\n+\n+      --  The analysis of the spec may generate pragmas which require manual\n+      --  analysis. Since the generation of the spec and the relocation of the\n+      --  annotations is driven by the expansion of the stand-alone body, the\n+      --  pragmas will not be analyzed in a timely manner. Do this now.\n+\n+      Analyze_Pragmas (Decl);\n+\n+      Set_Convention     (Spec_Id, Convention_Protected);\n       Set_Has_Completion (Spec_Id);\n-      Set_Convention (Spec_Id, Convention_Protected);\n+\n       return Spec_Id;\n    end Build_Private_Protected_Declaration;\n "}, {"sha": "f1f463c23da1992e2cdb14f6469ee7fcf7987eb4", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/007443a0c1bb11ae55a43d562f070aba88a607c6/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/007443a0c1bb11ae55a43d562f070aba88a607c6/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=007443a0c1bb11ae55a43d562f070aba88a607c6", "patch": "@@ -29643,6 +29643,16 @@ package body Sem_Prag is\n                if Nkind (Original_Node (Stmt)) = N_Expression_Function then\n                   return Stmt;\n \n+               --  The subprogram declaration is an internally generated spec\n+               --  for a stand-alone subrogram body declared inside a protected\n+               --  body.\n+\n+               elsif Present (Corresponding_Body (Stmt))\n+                 and then Comes_From_Source (Corresponding_Body (Stmt))\n+                 and then Is_Protected_Type (Current_Scope)\n+               then\n+                  return Stmt;\n+\n                --  The subprogram is actually an instance housed within an\n                --  anonymous wrapper package.\n "}, {"sha": "00cf622343e8ec9d5ce9f5cd1c0217a612a8e500", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/007443a0c1bb11ae55a43d562f070aba88a607c6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/007443a0c1bb11ae55a43d562f070aba88a607c6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=007443a0c1bb11ae55a43d562f070aba88a607c6", "patch": "@@ -1,3 +1,7 @@\n+2018-07-31  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* gnat.dg/global.adb, gnat.dg/global.ads: New testcase.\n+\n 2018-07-31  Gary Dismukes  <dismukes@adacore.com>\n \n \t* gnat.dg/block_ext_return_assert_failure.adb: New testcase."}, {"sha": "521a6293d7593c7e84e92772fe31169fd1b9aa10", "filename": "gcc/testsuite/gnat.dg/global.adb", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/007443a0c1bb11ae55a43d562f070aba88a607c6/gcc%2Ftestsuite%2Fgnat.dg%2Fglobal.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/007443a0c1bb11ae55a43d562f070aba88a607c6/gcc%2Ftestsuite%2Fgnat.dg%2Fglobal.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fglobal.adb?ref=007443a0c1bb11ae55a43d562f070aba88a607c6", "patch": "@@ -0,0 +1,87 @@\n+--  { dg-do compile }\n+\n+package body Global\n+  with Refined_State => (State => Constit)\n+is\n+   Constit : Integer := 123;\n+\n+   protected body Prot_Typ is\n+      procedure Force_Body is null;\n+\n+      procedure Aspect_On_Spec\n+        with Global => (Input => Constit);\n+      procedure Aspect_On_Spec is null;\n+\n+      procedure Aspect_On_Body\n+        with Global => (Input => Constit)\n+      is begin null; end Aspect_On_Body;\n+\n+      procedure Pragma_On_Spec;\n+      pragma Global ((Input => Constit));\n+      procedure Pragma_On_Spec is null;\n+\n+      procedure Pragma_On_Body is\n+         pragma Global ((Input => Constit));\n+      begin null; end Pragma_On_Body;\n+   end Prot_Typ;\n+\n+   protected body Prot_Obj is\n+      procedure Force_Body is null;\n+\n+      procedure Aspect_On_Spec\n+        with Global => (Input => Constit);\n+      procedure Aspect_On_Spec is null;\n+\n+      procedure Aspect_On_Body\n+        with Global => (Input => Constit)\n+      is begin null; end Aspect_On_Body;\n+\n+      procedure Pragma_On_Spec;\n+      pragma Global ((Input => Constit));\n+      procedure Pragma_On_Spec is null;\n+\n+      procedure Pragma_On_Body is\n+         pragma Global ((Input => Constit));\n+      begin null; end Pragma_On_Body;\n+   end Prot_Obj;\n+\n+   task body Task_Typ is\n+      procedure Aspect_On_Spec\n+        with Global => (Input => Constit);\n+      procedure Aspect_On_Spec is null;\n+\n+      procedure Aspect_On_Body\n+        with Global => (Input => Constit)\n+      is begin null; end Aspect_On_Body;\n+\n+      procedure Pragma_On_Spec;\n+      pragma Global ((Input => Constit));\n+      procedure Pragma_On_Spec is null;\n+\n+      procedure Pragma_On_Body is\n+         pragma Global ((Input => Constit));\n+      begin null; end Pragma_On_Body;\n+   begin\n+      accept Force_Body;\n+   end Task_Typ;\n+\n+   task body Task_Obj is\n+      procedure Aspect_On_Spec\n+        with Global => (Input => Constit);\n+      procedure Aspect_On_Spec is null;\n+\n+      procedure Aspect_On_Body\n+        with Global => (Input => Constit)\n+      is begin null; end Aspect_On_Body;\n+\n+      procedure Pragma_On_Spec;\n+      pragma Global ((Input => Constit));\n+      procedure Pragma_On_Spec is null;\n+\n+      procedure Pragma_On_Body is\n+         pragma Global ((Input => Constit));\n+      begin null; end Pragma_On_Body;\n+   begin\n+      accept Force_Body;\n+   end Task_Obj;\n+end Global;"}, {"sha": "0ff9b96b0915daa959df1885bd05b910d27a9e8d", "filename": "gcc/testsuite/gnat.dg/global.ads", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/007443a0c1bb11ae55a43d562f070aba88a607c6/gcc%2Ftestsuite%2Fgnat.dg%2Fglobal.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/007443a0c1bb11ae55a43d562f070aba88a607c6/gcc%2Ftestsuite%2Fgnat.dg%2Fglobal.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fglobal.ads?ref=007443a0c1bb11ae55a43d562f070aba88a607c6", "patch": "@@ -0,0 +1,19 @@\n+package Global\n+  with Abstract_State => (State with External)\n+is\n+   protected type Prot_Typ is\n+      procedure Force_Body;\n+   end Prot_Typ;\n+\n+   protected Prot_Obj is\n+      procedure Force_Body;\n+   end Prot_Obj;\n+\n+   task type Task_Typ is\n+      entry Force_Body;\n+   end Task_Typ;\n+\n+   task Task_Obj is\n+      entry Force_Body;\n+   end Task_Obj;\n+end Global;"}]}