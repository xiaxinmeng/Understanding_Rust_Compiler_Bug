{"sha": "a92dd2358c7bf4872b29431b5faea16e42bf4135", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkyZGQyMzU4YzdiZjQ4NzJiMjk0MzFiNWZhZWExNmU0MmJmNDEzNQ==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2005-10-10T15:02:52Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@gcc.gnu.org", "date": "2005-10-10T15:02:52Z"}, "message": "gcc.c (do_spec_1): Accept numeric characters in file name suffixes.\n\n* gcc.c (do_spec_1): Accept numeric characters in file name\nsuffixes.\n\nFrom-SVN: r105178", "tree": {"sha": "487bc1580a7a4e076baa843320344c97435367cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/487bc1580a7a4e076baa843320344c97435367cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a92dd2358c7bf4872b29431b5faea16e42bf4135", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a92dd2358c7bf4872b29431b5faea16e42bf4135", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a92dd2358c7bf4872b29431b5faea16e42bf4135", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a92dd2358c7bf4872b29431b5faea16e42bf4135/comments", "author": null, "committer": null, "parents": [{"sha": "27a725e2935ad18edd9a92a2555f543d72af391d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27a725e2935ad18edd9a92a2555f543d72af391d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27a725e2935ad18edd9a92a2555f543d72af391d"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "f75b7a314cbe3f7b10b1f0c31bcab84993b942ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92dd2358c7bf4872b29431b5faea16e42bf4135/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92dd2358c7bf4872b29431b5faea16e42bf4135/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a92dd2358c7bf4872b29431b5faea16e42bf4135", "patch": "@@ -1,3 +1,8 @@\n+2005-10-10  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* gcc.c (do_spec_1): Accept numeric characters in file name\n+\tsuffixes.\n+\n 2005-10-10  Nick Clifton  <nickc@redhat.com>\n \n \t* config/arm/arm.c: Remove extraneous whitespace.  Remove comment"}, {"sha": "bb6d5a1d6d1c572bc4a14be9fadd14a8a6b8be68", "filename": "gcc/gcc.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92dd2358c7bf4872b29431b5faea16e42bf4135/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92dd2358c7bf4872b29431b5faea16e42bf4135/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=a92dd2358c7bf4872b29431b5faea16e42bf4135", "patch": "@@ -380,7 +380,7 @@ or with constant text in a single argument.\n \tchosen in a way that is hard to predict even when previously\n \tchosen file names are known.  For example, `%g.s ... %g.o ... %g.s'\n \tmight turn into `ccUVUUAU.s ccXYAXZ12.o ccUVUUAU.s'.  SUFFIX matches\n-\tthe regexp \"[.A-Za-z]*%O\"; \"%O\" is treated exactly as if it\n+\tthe regexp \"[.0-9A-Za-z]*%O\"; \"%O\" is treated exactly as if it\n \thad been pre-processed.  Previously, %g was simply substituted\n \twith a file name chosen once per compilation, without regard\n \tto any appended suffix (which was therefore treated just like\n@@ -4705,7 +4705,7 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t\targ_going = 1;\n \n \t\t/* consume suffix */\n-\t\twhile (*p == '.' || ISALPHA ((unsigned char) *p))\n+\t\twhile (*p == '.' || ISALNUM ((unsigned char) *p))\n \t\t  p++;\n \t\tif (p[0] == '%' && p[1] == 'O')\n \t\t  p += 2;\n@@ -4717,7 +4717,7 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t    if (use_pipes)\n \t      {\n \t\t/* consume suffix */\n-\t\twhile (*p == '.' || ISALPHA ((unsigned char) *p))\n+\t\twhile (*p == '.' || ISALNUM ((unsigned char) *p))\n \t\t  p++;\n \t\tif (p[0] == '%' && p[1] == 'O')\n \t\t  p += 2;\n@@ -4735,14 +4735,14 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t\tconst char *suffix = p;\n \t\tchar *saved_suffix = NULL;\n \n-\t\twhile (*p == '.' || ISALPHA ((unsigned char) *p))\n+\t\twhile (*p == '.' || ISALNUM ((unsigned char) *p))\n \t\t  p++;\n \t\tsuffix_length = p - suffix;\n \t\tif (p[0] == '%' && p[1] == 'O')\n \t\t  {\n \t\t    p += 2;\n \t\t    /* We don't support extra suffix characters after %O.  */\n-\t\t    if (*p == '.' || ISALPHA ((unsigned char) *p))\n+\t\t    if (*p == '.' || ISALNUM ((unsigned char) *p))\n \t\t      fatal (\"spec '%s' has invalid '%%0%c'\", spec, *p);\n \t\t    if (suffix_length == 0)\n \t\t      suffix = TARGET_OBJECT_SUFFIX;"}]}