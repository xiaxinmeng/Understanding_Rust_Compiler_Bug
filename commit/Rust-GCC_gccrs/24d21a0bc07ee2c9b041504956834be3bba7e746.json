{"sha": "24d21a0bc07ee2c9b041504956834be3bba7e746", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRkMjFhMGJjMDdlZTJjOWIwNDE1MDQ5NTY4MzRiZTNiYmE3ZTc0Ng==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2018-04-04T03:40:29Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2018-04-04T03:40:29Z"}, "message": "[PR c++/84943] mark function as used when taking its address\n\nfn[0]() ICEd because we would fold the INDIRECT_REF used for the\narray indexing while building the address for the call, after not\nfinding the decl hiding there at first.  But the decl would be exposed\nby the folding, and then lower layers would complain we had the decl,\nafter all, but it wasn't one of the artificial or special functions\nthat could be called without being marked as used.\n\nThis patch arranges for a FUNCTION_DECL to be marked as used when\ntaking its address, just like we already did when taking the address\nof a static function to call it as a member function (i.e. using the\nobj.fn() notation).  However, we shouldn't mark functions as used when\njust performing overload resolution, lest we might instantiate\ntemplates we shouldn't, as in g++.dg/overload/template1.C, so we\nadjust mark_used to return early when testing conversions.\n\n\nfor  gcc/cp/ChangeLog\n\n\tPR c++/84943\n\t* typeck.c (cp_build_addr_expr_1): Mark FUNCTION_DECL as\n\tused.\n\t* decl2.c (mark_used): Return without effects if tf_conv.\n\nfor  gcc/testsuite/ChangeLog\n\n\tPR c++/84943\n\t* g++.dg/pr84943.C: New.\n\t* g++.dg/pr84943-2.C: New.\n\nFrom-SVN: r259067", "tree": {"sha": "f4ccbb78b6d042b7a3a6aaf99f9c3ad3a86e65d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4ccbb78b6d042b7a3a6aaf99f9c3ad3a86e65d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24d21a0bc07ee2c9b041504956834be3bba7e746", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24d21a0bc07ee2c9b041504956834be3bba7e746", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24d21a0bc07ee2c9b041504956834be3bba7e746", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24d21a0bc07ee2c9b041504956834be3bba7e746/comments", "author": null, "committer": null, "parents": [{"sha": "30feb954d0fb8f6e3797f997de3a5daef6c19247", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30feb954d0fb8f6e3797f997de3a5daef6c19247", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30feb954d0fb8f6e3797f997de3a5daef6c19247"}], "stats": {"total": 94, "additions": 94, "deletions": 0}, "files": [{"sha": "46f05c8661e28df589e1f00d632a2a5269b3b86d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d21a0bc07ee2c9b041504956834be3bba7e746/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d21a0bc07ee2c9b041504956834be3bba7e746/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=24d21a0bc07ee2c9b041504956834be3bba7e746", "patch": "@@ -1,3 +1,10 @@\n+2018-04-04  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR c++/84943\n+\t* typeck.c (cp_build_addr_expr_1): Mark FUNCTION_DECL as\n+\tused.\n+\t* decl2.c (mark_used): Return without effects if tf_conv.\n+\n 2018-04-03  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/85092 - C++17 ICE with unused list constructor."}, {"sha": "6ae6cef78dda0de2b536173285d3e8d3fa8ef514", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d21a0bc07ee2c9b041504956834be3bba7e746/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d21a0bc07ee2c9b041504956834be3bba7e746/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=24d21a0bc07ee2c9b041504956834be3bba7e746", "patch": "@@ -5201,6 +5201,12 @@ maybe_instantiate_decl (tree decl)\n bool\n mark_used (tree decl, tsubst_flags_t complain)\n {\n+  /* If we're just testing conversions or resolving overloads, we\n+     don't want any permanent effects like forcing functions to be\n+     output or instantiating templates.  */\n+  if ((complain & tf_conv))\n+    return true;\n+\n   /* If DECL is a BASELINK for a single function, then treat it just\n      like the DECL for the function.  Otherwise, if the BASELINK is\n      for an overloaded function, we don't know which function was"}, {"sha": "2b7a771bbeb300178617097dc004f7c607ca98c7", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d21a0bc07ee2c9b041504956834be3bba7e746/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d21a0bc07ee2c9b041504956834be3bba7e746/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=24d21a0bc07ee2c9b041504956834be3bba7e746", "patch": "@@ -5971,6 +5971,9 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n      so we can just form an ADDR_EXPR with the correct type.  */\n   if (processing_template_decl || TREE_CODE (arg) != COMPONENT_REF)\n     {\n+      if (TREE_CODE (arg) == FUNCTION_DECL\n+\t  && !mark_used (arg, complain) && !(complain & tf_error))\n+\treturn error_mark_node;\n       val = build_address (arg);\n       if (TREE_CODE (arg) == OFFSET_REF)\n \tPTRMEM_OK_P (val) = PTRMEM_OK_P (arg);"}, {"sha": "95cd7c8392d979316502a0f3abe8b83ce2147c66", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d21a0bc07ee2c9b041504956834be3bba7e746/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d21a0bc07ee2c9b041504956834be3bba7e746/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=24d21a0bc07ee2c9b041504956834be3bba7e746", "patch": "@@ -1,3 +1,9 @@\n+2018-04-04  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR c++/84943\n+\t* g++.dg/pr84943.C: New.\n+\t* g++.dg/pr84943-2.C: New.\n+\n 2018-04-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/85167"}, {"sha": "d1ef012b91559086abc7712efd41e6660fc5aa64", "filename": "gcc/testsuite/g++.dg/pr84943-2.C", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d21a0bc07ee2c9b041504956834be3bba7e746/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr84943-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d21a0bc07ee2c9b041504956834be3bba7e746/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr84943-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr84943-2.C?ref=24d21a0bc07ee2c9b041504956834be3bba7e746", "patch": "@@ -0,0 +1,64 @@\n+// { dg-do run }\n+\n+// Avoid -pedantic-error default\n+// { dg-options \"\" }\n+\n+// Make sure the functions referenced by various forms of\n+// address-taking are marked as used and compiled in.\n+\n+static void ac() {}\n+void a() {\n+  ac[0](); // { dg-warning \"arithmetic\" }\n+}\n+\n+static void bc() {}\n+void b() {\n+  (&*&*&*&bc)();\n+}\n+\n+template <typename U> U cc() {}\n+void (*c())() {\n+  return cc;\n+}\n+\n+template <typename T>\n+struct x {\n+  void a(int);\n+  template <typename U> static U a(x*) {}\n+  static void a(long) {}\n+  static void a(void *) {}\n+  static void a() {\n+    void (*p0)(void*) = x().a;\n+    p0(0);\n+    void (*p1)(long) = a;\n+    p1(0);\n+    void (*p2)() = a;\n+    p2();\n+    void (*p3)(x*) = a;\n+    p3(0);\n+  }\n+};\n+\n+struct z {\n+  void a(int);\n+  template <typename U> static U a(z*) {}\n+  static void a(long) {}\n+  static void a(void *) {}\n+  static void a() {\n+    void (*p0)(void*) = z().a;\n+    p0(0);\n+    void (*p1)(long) = a;\n+    p1(0);\n+    void (*p2)() = a;\n+    p2();\n+    void (*p3)(z*) = a;\n+    p3(0);\n+  }\n+};\n+\n+int main(int argc, char *argv[]) {\n+  if (argc > 1) {\n+    x<void>().a();\n+    z().a();\n+  }\n+}"}, {"sha": "36f75a164119a8da560893ffb11b8d76fa2cf7ca", "filename": "gcc/testsuite/g++.dg/pr84943.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d21a0bc07ee2c9b041504956834be3bba7e746/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr84943.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d21a0bc07ee2c9b041504956834be3bba7e746/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr84943.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr84943.C?ref=24d21a0bc07ee2c9b041504956834be3bba7e746", "patch": "@@ -0,0 +1,8 @@\n+// { dg-do compile }\n+\n+// Avoid -pedantic-error default\n+// { dg-options \"\" }\n+\n+void a() {\n+  a[0](); // { dg-warning \"arithmetic\" }\n+}"}]}