{"sha": "3991912e260d68f0da8d3711b5258c3a3009dc4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk5MTkxMmUyNjBkNjhmMGRhOGQzNzExYjUyNThjM2EzMDA5ZGM0Yw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-09-26T16:40:50Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-09-26T16:41:21Z"}, "message": "Fix handling of clobbers in ipa-modref.c\n\n\t* ipa-modref.c (analyze_stmt): Do not skip clobbers in early pass.\n\t* ipa-pure-const.c (analyze_stmt): Update comment.", "tree": {"sha": "5de78e6319bce9ec7a26f94f8bc58367c18d89dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5de78e6319bce9ec7a26f94f8bc58367c18d89dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3991912e260d68f0da8d3711b5258c3a3009dc4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3991912e260d68f0da8d3711b5258c3a3009dc4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3991912e260d68f0da8d3711b5258c3a3009dc4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3991912e260d68f0da8d3711b5258c3a3009dc4c/comments", "author": null, "committer": null, "parents": [{"sha": "081b3517b4df826ac917147eb906bbb8fc6528b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/081b3517b4df826ac917147eb906bbb8fc6528b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/081b3517b4df826ac917147eb906bbb8fc6528b1"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "728c6c1523dbc03e0049e7addea7041165165c2e", "filename": "gcc/ipa-modref.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3991912e260d68f0da8d3711b5258c3a3009dc4c/gcc%2Fipa-modref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3991912e260d68f0da8d3711b5258c3a3009dc4c/gcc%2Fipa-modref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref.c?ref=3991912e260d68f0da8d3711b5258c3a3009dc4c", "patch": "@@ -676,13 +676,16 @@ static bool\n analyze_stmt (modref_summary *summary, gimple *stmt, bool ipa,\n \t      vec <gimple *> *recursive_calls)\n {\n-  /* There is no need to record clobbers.  */\n-  if (gimple_clobber_p (stmt))\n+  /* In general we can not ignore clobbers because they are barries for code\n+     motion, however after inlining it is safe to do becuase local optimization\n+     passes do not consider clobbers from other functions.\n+     Similar logic is in ipa-pure-consts.  */\n+  if ((ipa || cfun->after_inlining) && gimple_clobber_p (stmt))\n     return true;\n+\n   /* Analyze all loads and stores in STMT.  */\n   walk_stmt_load_store_ops (stmt, summary,\n \t\t\t    analyze_load, analyze_store);\n-  /* or call analyze_load_ipa, analyze_store_ipa */\n \n   switch (gimple_code (stmt))\n    {\n@@ -705,7 +708,7 @@ analyze_stmt (modref_summary *summary, gimple *stmt, bool ipa,\n    }\n }\n \n-/* Analyze function F.  IPA indicates whether we're running in tree mode (false)\n+/* Analyze function F.  IPA indicates whether we're running in local mode (false)\n    or the IPA mode (true).  */\n \n static void"}, {"sha": "1af3206056e493b9a35ce793e6944c1f40fd1689", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3991912e260d68f0da8d3711b5258c3a3009dc4c/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3991912e260d68f0da8d3711b5258c3a3009dc4c/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=3991912e260d68f0da8d3711b5258c3a3009dc4c", "patch": "@@ -742,6 +742,8 @@ check_stmt (gimple_stmt_iterator *gsip, funct_state local, bool ipa)\n   /* Do consider clobber as side effects before IPA, so we rather inline\n      C++ destructors and keep clobber semantics than eliminate them.\n \n+     Similar logic is in ipa-modref.\n+\n      TODO: We may get smarter during early optimizations on these and let\n      functions containing only clobbers to be optimized more.  This is a common\n      case of C++ destructors.  */"}]}