{"sha": "766f36c7cf7003b953eccfd91ec09c26a27cc49a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY2ZjM2YzdjZjcwMDNiOTUzZWNjZmQ5MWVjMDljMjZhMjdjYzQ5YQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-26T21:09:05Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-26T21:09:05Z"}, "message": "(store_expr): In promoted TARGET case, if EXP is a volatile MEM and WANT_VALUE is nonzero, only reference the MEM once.\n\n(store_expr): In promoted TARGET case, if EXP is a volatile MEM and\nWANT_VALUE is nonzero, only reference the MEM once.\nReturn TARGET if it is a hard register; clean up return code.\n\nFrom-SVN: r6630", "tree": {"sha": "19322ac33ac90a4e6c0a7ec68619e05f508c9190", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19322ac33ac90a4e6c0a7ec68619e05f508c9190"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/766f36c7cf7003b953eccfd91ec09c26a27cc49a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/766f36c7cf7003b953eccfd91ec09c26a27cc49a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/766f36c7cf7003b953eccfd91ec09c26a27cc49a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/766f36c7cf7003b953eccfd91ec09c26a27cc49a/comments", "author": null, "committer": null, "parents": [{"sha": "ca790d0f1df13731995232c9f9ad6da116f1eedc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca790d0f1df13731995232c9f9ad6da116f1eedc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca790d0f1df13731995232c9f9ad6da116f1eedc"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "16f5aaf4dcfcb74313cc23f642944ac56478df5e", "filename": "gcc/expr.c", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766f36c7cf7003b953eccfd91ec09c26a27cc49a/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766f36c7cf7003b953eccfd91ec09c26a27cc49a/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=766f36c7cf7003b953eccfd91ec09c26a27cc49a", "patch": "@@ -2606,6 +2606,11 @@ store_expr (exp, target, want_value)\n     {\n       temp = expand_expr (exp, NULL_RTX, VOIDmode, 0);\n \n+      /* If TEMP is a volatile MEM and we want a result value, make\n+\t the access now so it gets done only once.  */\n+      if (GET_CODE (temp) == MEM && MEM_VOLATILE_P (temp))\n+\ttemp = copy_to_reg (temp);\n+\n       /* If TEMP is a VOIDmode constant, use convert_modes to make\n \t sure that we properly convert it.  */\n       if (CONSTANT_P (temp) && GET_MODE (temp) == VOIDmode)\n@@ -2620,8 +2625,7 @@ store_expr (exp, target, want_value)\n   else\n     {\n       temp = expand_expr (exp, target, GET_MODE (target), 0);\n-      /* DO return TARGET if it's a specified hardware register.\n-\t expand_return relies on this.\n+      /* Return TARGET if it's a specified hardware register.\n \t If TARGET is a volatile mem ref, either return TARGET\n \t or return a reg copied *from* TARGET; ANSI requires this.\n \n@@ -2746,13 +2750,23 @@ store_expr (exp, target, want_value)\n \temit_move_insn (target, temp);\n     }\n \n-  if (dont_return_target && GET_CODE (temp) != MEM)\n+  /* If we don't want a value, return NULL_RTX.  */\n+  if (! want_value)\n+    return NULL_RTX;\n+\n+  /* If we are supposed to return TEMP, do so as long as it isn't a MEM.\n+     ??? The latter test doesn't seem to make sense.  */\n+  else if (dont_return_target && GET_CODE (temp) != MEM)\n     return temp;\n-  if (want_value && GET_MODE (target) != BLKmode)\n+\n+  /* Return TARGET itself if it is a hard register.  */\n+  else if (want_value && GET_MODE (target) != BLKmode\n+\t   && ! (GET_CODE (target) == REG\n+\t\t && REGNO (target) < FIRST_PSEUDO_REGISTER))\n     return copy_to_reg (target);\n-  if (want_value)\n+  \n+  else\n     return target;\n-  return NULL_RTX;\n }\n \f\n /* Store the value of constructor EXP into the rtx TARGET."}]}