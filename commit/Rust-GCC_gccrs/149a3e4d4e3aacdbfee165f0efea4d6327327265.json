{"sha": "149a3e4d4e3aacdbfee165f0efea4d6327327265", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ5YTNlNGQ0ZTNhYWNkYmZlZTE2NWYwZWZlYTRkNjMyNzMyNzI2NQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-10-23T11:34:48Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-10-23T11:34:48Z"}, "message": "re PR tree-optimization/92131 (incorrect assumption that (ao >= 0) is always false)\n\n\tPR tree-optimization/92131\n\t* tree-vrp.c (extract_range_from_plus_minus_expr): If the resulting\n\trange would be symbolic, drop to varying for any explicit overflow\n\tin the constant part or if neither range is a singleton.\n\nFrom-SVN: r277314", "tree": {"sha": "a5e9a1583b05e48192d0ae53cbf87ffd5acdb8a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5e9a1583b05e48192d0ae53cbf87ffd5acdb8a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/149a3e4d4e3aacdbfee165f0efea4d6327327265", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/149a3e4d4e3aacdbfee165f0efea4d6327327265", "html_url": "https://github.com/Rust-GCC/gccrs/commit/149a3e4d4e3aacdbfee165f0efea4d6327327265", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/149a3e4d4e3aacdbfee165f0efea4d6327327265/comments", "author": null, "committer": null, "parents": [{"sha": "8d509fb6686cf55c8a7ff8297ad9d75a719d8fa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d509fb6686cf55c8a7ff8297ad9d75a719d8fa6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d509fb6686cf55c8a7ff8297ad9d75a719d8fa6"}], "stats": {"total": 99, "additions": 92, "deletions": 7}, "files": [{"sha": "3ff5227cbecfcbedb60eacf17e1c749cc0f67b60", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/149a3e4d4e3aacdbfee165f0efea4d6327327265/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/149a3e4d4e3aacdbfee165f0efea4d6327327265/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=149a3e4d4e3aacdbfee165f0efea4d6327327265", "patch": "@@ -1,3 +1,10 @@\n+2019-10-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR tree-optimization/92131\n+\t* tree-vrp.c (extract_range_from_plus_minus_expr): If the resulting\n+\trange would be symbolic, drop to varying for any explicit overflow\n+\tin the constant part or if neither range is a singleton.\n+\n 2019-10-23  Martin Liska  <mliska@suse.cz>\n \n \tPR middle-end/81669"}, {"sha": "c578af30ce825b8229a188fecba2aa909fe9cd8d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/149a3e4d4e3aacdbfee165f0efea4d6327327265/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/149a3e4d4e3aacdbfee165f0efea4d6327327265/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=149a3e4d4e3aacdbfee165f0efea4d6327327265", "patch": "@@ -1,3 +1,7 @@\n+2019-10-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.c-torture/execute/20191023-1.c: New test.\n+\n 2019-10-23  Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/91969"}, {"sha": "3811ebca151aa66ec5734a03be0f74a63830dce8", "filename": "gcc/testsuite/gcc.c-torture/execute/20191023-1.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/149a3e4d4e3aacdbfee165f0efea4d6327327265/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20191023-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/149a3e4d4e3aacdbfee165f0efea4d6327327265/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20191023-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20191023-1.c?ref=149a3e4d4e3aacdbfee165f0efea4d6327327265", "patch": "@@ -0,0 +1,73 @@\n+/* PR tree-optimization/92131 */\n+/* Testcase by Armin Rigo <arigo@tunes.org> */\n+\n+long b, c, d, e, f, i;\n+char g, h, j, k;\n+int *aa;\n+\n+static void error (void) __attribute__((noipa));\n+static void error (void) { __builtin_abort(); }\n+\n+static void see_me_here (void) __attribute__((noipa));\n+static void see_me_here (void) {}\n+\n+static void aaa (void) __attribute__((noipa));\n+static void aaa (void) {}\n+\n+static void a (void) __attribute__((noipa));\n+static void a (void) {\n+  long am, ao;\n+  if (aa == 0) {\n+    aaa();\n+    if (j)\n+      goto ay;\n+  }\n+  return;\n+ay:\n+  aaa();\n+  if (k) {\n+    aaa();\n+    goto az;\n+  }\n+  return;\n+az:\n+  if (i)\n+    if (g)\n+      if (h)\n+        if (e)\n+          goto bd;\n+  return;\n+bd:\n+  am = 0;\n+  while (am < e) {\n+    switch (c) {\n+    case 8:\n+      goto bh;\n+    case 4:\n+      return;\n+    }\n+  bh:\n+    if (am >= 0)\n+      b = -am;\n+    ao = am + b;\n+    f = ao & 7;\n+    if (f == 0)\n+      see_me_here();\n+    if (ao >= 0)\n+      am++;\n+    else\n+      error();\n+  }\n+}\n+\n+int main (void)\n+{\n+    j++;\n+    k++;\n+    i++;\n+    g++;\n+    h++;\n+    e = 1;\n+    a();\n+    return 0;\n+}"}, {"sha": "ad9be74daf0a1918159d5eb8caf5f97fc1aa9b33", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/149a3e4d4e3aacdbfee165f0efea4d6327327265/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/149a3e4d4e3aacdbfee165f0efea4d6327327265/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=149a3e4d4e3aacdbfee165f0efea4d6327327265", "patch": "@@ -1652,7 +1652,7 @@ extract_range_from_plus_minus_expr (value_range_base *vr,\n   value_range_kind vr0_kind = vr0.kind (), vr1_kind = vr1.kind ();\n   tree vr0_min = vr0.min (), vr0_max = vr0.max ();\n   tree vr1_min = vr1.min (), vr1_max = vr1.max ();\n-  tree min = NULL, max = NULL;\n+  tree min = NULL_TREE, max = NULL_TREE;\n \n   /* This will normalize things such that calculating\n      [0,0] - VR_VARYING is not dropped to varying, but is\n@@ -1715,18 +1715,19 @@ extract_range_from_plus_minus_expr (value_range_base *vr,\n       combine_bound (code, wmin, min_ovf, expr_type, min_op0, min_op1);\n       combine_bound (code, wmax, max_ovf, expr_type, max_op0, max_op1);\n \n-      /* If we have overflow for the constant part and the resulting\n-\t range will be symbolic, drop to VR_VARYING.  */\n-      if (((bool)min_ovf && sym_min_op0 != sym_min_op1)\n-\t  || ((bool)max_ovf && sym_max_op0 != sym_max_op1))\n+      /* If the resulting range will be symbolic, we need to eliminate any\n+\t explicit or implicit overflow introduced in the above computation\n+\t because compare_values could make an incorrect use of it.  That's\n+\t why we require one of the ranges to be a singleton.  */\n+      if ((sym_min_op0 != sym_min_op1 || sym_max_op0 != sym_max_op1)\n+\t  && ((bool)min_ovf || (bool)max_ovf\n+\t      || (min_op0 != max_op0 && min_op1 != max_op1)))\n \t{\n \t  vr->set_varying (expr_type);\n \t  return;\n \t}\n \n       /* Adjust the range for possible overflow.  */\n-      min = NULL_TREE;\n-      max = NULL_TREE;\n       set_value_range_with_overflow (kind, min, max, expr_type,\n \t\t\t\t     wmin, wmax, min_ovf, max_ovf);\n       if (kind == VR_VARYING)"}]}