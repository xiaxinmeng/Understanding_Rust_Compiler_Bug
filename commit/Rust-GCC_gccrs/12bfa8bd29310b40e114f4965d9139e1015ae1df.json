{"sha": "12bfa8bd29310b40e114f4965d9139e1015ae1df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJiZmE4YmQyOTMxMGI0MGUxMTRmNDk2NWQ5MTM5ZTEwMTVhZTFkZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-09-19T11:52:49Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-09-19T11:52:49Z"}, "message": "re PR libstdc++/40856 (numeric_limits not specialized for __int128_t or __uint128_t)\n\n2011-09-19  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/40856\n\t* include/std/limits (numeric_limits<__int128_t>,\n\tnumeric_limits<__uint128_t>): Add.\n\t* src/limits.cc:Define.\n\t* config/abi/pre/gnu.ver: Export.\n\t* include/ext/typelist.h (_GLIBCXX_TYPELIST_CHAIN16, 20): Add.\n\t* testsuite/util/testsuite_common_types.h (integral_types_gnu): Add\n\t(limits_tl): Use it.\n\t* testsuite/18_support/numeric_limits/requirements/\n\tconstexpr_functions.cc: Likewise.\n\t* testsuite/18_support/numeric_limits/40856.cc: New.\n\t* testsuite/18_support/numeric_limits/dr559.cc: Extend.\n\t* testsuite/18_support/numeric_limits/lowest.cc: Likewise.\n\t* testsuite/18_support/numeric_limits/max_digits10.cc: Likewise.\n\t* testsuite/29_atomics/atomic/cons/assign_neg.cc: Adjust dg-error\n\tline numbers.\n\t* testsuite/29_atomics/atomic/cons/copy_neg.cc: Likewise.\n\t* testsuite/29_atomics/atomic_integral/cons/assign_neg.cc: Likewise.\n\t* testsuite/29_atomics/atomic_integral/cons/copy_neg.cc: Likewise.\n\t* testsuite/29_atomics/atomic_integral/operators/bitwise_neg.cc:\n\tLikewise.\n\t* testsuite/29_atomics/atomic_integral/operators/decrement_neg.cc:\n\tLikewise.\n\t* testsuite/29_atomics/atomic_integral/operators/increment_neg.cc:\n\tLikewise.\n\nFrom-SVN: r178969", "tree": {"sha": "9edaaa5972438ced6926287d2953ef5efb0c0a91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9edaaa5972438ced6926287d2953ef5efb0c0a91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12bfa8bd29310b40e114f4965d9139e1015ae1df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12bfa8bd29310b40e114f4965d9139e1015ae1df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12bfa8bd29310b40e114f4965d9139e1015ae1df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12bfa8bd29310b40e114f4965d9139e1015ae1df/comments", "author": null, "committer": null, "parents": [{"sha": "7deb61cd7fdf23c235cd540ad200fb6bb5e77527", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7deb61cd7fdf23c235cd540ad200fb6bb5e77527", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7deb61cd7fdf23c235cd540ad200fb6bb5e77527"}], "stats": {"total": 387, "additions": 359, "deletions": 28}, "files": [{"sha": "98f8b81a482cec85217be2021ab30d4718a9c350", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=12bfa8bd29310b40e114f4965d9139e1015ae1df", "patch": "@@ -1,3 +1,31 @@\n+2011-09-19  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/40856\n+\t* include/std/limits (numeric_limits<__int128_t>,\n+\tnumeric_limits<__uint128_t>): Add.\n+\t* src/limits.cc:Define.\n+\t* config/abi/pre/gnu.ver: Export.\n+\t* include/ext/typelist.h (_GLIBCXX_TYPELIST_CHAIN16, 20): Add.\n+\t* testsuite/util/testsuite_common_types.h (integral_types_gnu): Add\n+\t(limits_tl): Use it.\n+\t* testsuite/18_support/numeric_limits/requirements/\n+\tconstexpr_functions.cc: Likewise.\n+\t* testsuite/18_support/numeric_limits/40856.cc: New.\n+\t* testsuite/18_support/numeric_limits/dr559.cc: Extend.\n+\t* testsuite/18_support/numeric_limits/lowest.cc: Likewise.\n+\t* testsuite/18_support/numeric_limits/max_digits10.cc: Likewise.\n+\t* testsuite/29_atomics/atomic/cons/assign_neg.cc: Adjust dg-error\n+\tline numbers.\n+\t* testsuite/29_atomics/atomic/cons/copy_neg.cc: Likewise.\n+\t* testsuite/29_atomics/atomic_integral/cons/assign_neg.cc: Likewise.\n+\t* testsuite/29_atomics/atomic_integral/cons/copy_neg.cc: Likewise.\n+\t* testsuite/29_atomics/atomic_integral/operators/bitwise_neg.cc:\n+\tLikewise.\n+\t* testsuite/29_atomics/atomic_integral/operators/decrement_neg.cc:\n+\tLikewise.\n+\t* testsuite/29_atomics/atomic_integral/operators/increment_neg.cc:\n+\tLikewise.\n+\n 2011-09-17  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/50441"}, {"sha": "7409e64f9d5c4fda153709ebad4fc36d95905cb6", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=12bfa8bd29310b40e114f4965d9139e1015ae1df", "patch": "@@ -500,10 +500,14 @@ GLIBCXX_3.4 {\n     _ZNSt21__numeric_limits_base1[0-7]mi*;\n     _ZNSt21__numeric_limits_base1[0-7]max_e*;\n \n-    _ZNSt14numeric_limitsI[^g]E[5-9]*;\n-    _ZNSt14numeric_limitsI[^g]E1[0-7][hirt]*;\n-    _ZNSt14numeric_limitsI[^g]E1[0-7]mi*;\n-    _ZNSt14numeric_limitsI[^g]E1[0-7]max_e*;\n+    _ZNSt14numeric_limitsI[a-m]E[5-9]*;\n+    _ZNSt14numeric_limitsI[p-z]E[5-9]*;\n+    _ZNSt14numeric_limitsI[a-m]E1[0-7][hirt]*;\n+    _ZNSt14numeric_limitsI[p-z]E1[0-7][hirt]*;\n+    _ZNSt14numeric_limitsI[a-m]E1[0-7]mi*;\n+    _ZNSt14numeric_limitsI[p-z]E1[0-7]mi*;\n+    _ZNSt14numeric_limitsI[a-m]E1[0-7]max_e*;\n+    _ZNSt14numeric_limitsI[p-z]E1[0-7]max_e*;\n \n     # std::_Rb_tree\n     _ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base;\n@@ -1185,7 +1189,8 @@ GLIBCXX_3.4.14 {\n \n     # std::numeric_limits::max_digits10\n     _ZNSt21__numeric_limits_base12max_digits10E;\n-    _ZNSt14numeric_limitsI[^g]E12max_digits10E;\n+    _ZNSt14numeric_limitsI[a-m]E12max_digits10E;\n+    _ZNSt14numeric_limitsI[p-z]E12max_digits10E;\n     _ZNSt14numeric_limitsID[is]E12max_digits10E;\n \n } GLIBCXX_3.4.13;\n@@ -1292,6 +1297,11 @@ GLIBCXX_3.4.17 {\n \n     # std::chrono::steady_clock::now()\n     _ZNSt6chrono12steady_clock3nowEv;\n+\n+    # std::numeric_limits<__int128_t> and <__uint128_t>\n+    _ZNSt14numeric_limitsInE*;\n+    _ZNSt14numeric_limitsIoE*;\n+\n } GLIBCXX_3.4.16;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "de9b69048b1f8184fdfd6318c019e540642bdb40", "filename": "libstdc++-v3/include/ext/typelist.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftypelist.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftypelist.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftypelist.h?ref=12bfa8bd29310b40e114f4965d9139e1015ae1df", "patch": "@@ -1,6 +1,7 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2008, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2008, 2009, 2010, 2011\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -386,6 +387,11 @@ _GLIBCXX_END_NAMESPACE_VERSION\n #define _GLIBCXX_TYPELIST_CHAIN13(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN12(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12) >\n #define _GLIBCXX_TYPELIST_CHAIN14(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN13(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13) >\n #define _GLIBCXX_TYPELIST_CHAIN15(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN14(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14) >\n+#define _GLIBCXX_TYPELIST_CHAIN16(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN15(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15) >\n+#define _GLIBCXX_TYPELIST_CHAIN17(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN16(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16) >\n+#define _GLIBCXX_TYPELIST_CHAIN18(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN17(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17) >\n+#define _GLIBCXX_TYPELIST_CHAIN19(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN18(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18) >\n+#define _GLIBCXX_TYPELIST_CHAIN20(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN19(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19) >\n \n namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {"}, {"sha": "fe6ee3da6eef6da51d2129d9e01a2819e68fbef1", "filename": "libstdc++-v3/include/std/limits", "status": "modified", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits?ref=12bfa8bd29310b40e114f4965d9139e1015ae1df", "patch": "@@ -1399,6 +1399,155 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        = round_toward_zero;\n     };\n \n+#if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_INT128)\n+  /// numeric_limits<__int128_t> specialization.\n+  template<>\n+    struct numeric_limits<__int128_t>\n+    {\n+      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n+\n+      static _GLIBCXX_CONSTEXPR __int128_t\n+      min() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_min (__int128_t); }\n+\n+      static _GLIBCXX_CONSTEXPR __int128_t\n+      max() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_max (__int128_t); }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static constexpr __int128_t\n+      lowest() noexcept { return min(); }\n+#endif\n+\n+      static _GLIBCXX_USE_CONSTEXPR int digits\n+       = __glibcxx_digits (__int128_t);\n+      static _GLIBCXX_USE_CONSTEXPR int digits10\n+       = __glibcxx_digits10 (__int128_t);\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static constexpr int max_digits10 = 0;\n+#endif\n+      static _GLIBCXX_USE_CONSTEXPR bool is_signed = true;\n+      static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;\n+      static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;\n+      static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n+\n+      static _GLIBCXX_CONSTEXPR __int128_t\n+      epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }\n+\n+      static _GLIBCXX_CONSTEXPR __int128_t\n+      round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }\n+\n+      static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n+      static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;\n+      static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;\n+      static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;\n+\n+      static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;\n+      static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;\n+      static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;\n+      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm\n+       = denorm_absent;\n+      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n+\n+      static _GLIBCXX_CONSTEXPR __int128_t\n+      infinity() _GLIBCXX_USE_NOEXCEPT\n+      { return static_cast<__int128_t>(0); }\n+\n+      static _GLIBCXX_CONSTEXPR __int128_t\n+      quiet_NaN() _GLIBCXX_USE_NOEXCEPT\n+      { return static_cast<__int128_t>(0); }\n+      \n+      static _GLIBCXX_CONSTEXPR __int128_t\n+      signaling_NaN() _GLIBCXX_USE_NOEXCEPT\n+      { return static_cast<__int128_t>(0); }\n+      \n+      static _GLIBCXX_CONSTEXPR __int128_t\n+      denorm_min() _GLIBCXX_USE_NOEXCEPT\n+      { return static_cast<__int128_t>(0); }\n+\n+      static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;\n+      static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;\n+      static _GLIBCXX_USE_CONSTEXPR bool is_modulo = true;\n+\n+      static _GLIBCXX_USE_CONSTEXPR bool traps\n+       = __glibcxx_integral_traps;\n+      static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;\n+      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style\n+       = round_toward_zero;\n+    };\n+\n+  /// numeric_limits<__uint128_t> specialization.\n+  template<>\n+    struct numeric_limits<__uint128_t>\n+    {\n+      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n+\n+      static _GLIBCXX_CONSTEXPR __uint128_t\n+      min() _GLIBCXX_USE_NOEXCEPT { return 0; }\n+\n+      static _GLIBCXX_CONSTEXPR __uint128_t\n+      max() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_max (__uint128_t); }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static constexpr __uint128_t\n+      lowest() noexcept { return min(); }\n+#endif\n+\n+      static _GLIBCXX_USE_CONSTEXPR int digits\n+       = __glibcxx_digits (__uint128_t);\n+      static _GLIBCXX_USE_CONSTEXPR int digits10\n+       = __glibcxx_digits10 (__uint128_t);\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static constexpr int max_digits10 = 0;\n+#endif\n+      static _GLIBCXX_USE_CONSTEXPR bool is_signed = false;\n+      static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;\n+      static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;\n+      static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n+\n+      static _GLIBCXX_CONSTEXPR __uint128_t\n+      epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }\n+\n+      static _GLIBCXX_CONSTEXPR __uint128_t\n+      round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }\n+\n+      static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n+      static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;\n+      static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;\n+      static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;\n+\n+      static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;\n+      static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;\n+      static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;\n+      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm\n+       = denorm_absent;\n+      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n+\n+      static _GLIBCXX_CONSTEXPR __uint128_t\n+      infinity() _GLIBCXX_USE_NOEXCEPT\n+      { return static_cast<__uint128_t>(0); }\n+\n+      static _GLIBCXX_CONSTEXPR __uint128_t\n+      quiet_NaN() _GLIBCXX_USE_NOEXCEPT\n+      { return static_cast<__uint128_t>(0); }\n+\n+      static _GLIBCXX_CONSTEXPR __uint128_t\n+      signaling_NaN() _GLIBCXX_USE_NOEXCEPT\n+      { return static_cast<__uint128_t>(0); }\n+\n+      static _GLIBCXX_CONSTEXPR __uint128_t\n+      denorm_min() _GLIBCXX_USE_NOEXCEPT\n+      { return static_cast<__uint128_t>(0); }\n+\n+      static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;\n+      static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;\n+      static _GLIBCXX_USE_CONSTEXPR bool is_modulo = true;\n+\n+      static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;\n+      static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;\n+      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style\n+       = round_toward_zero;\n+    };\n+#endif\n+\n   /// numeric_limits<float> specialization.\n   template<>\n     struct numeric_limits<float>"}, {"sha": "a2fe468eca9b22e3313ed0db55e0d4cfd8b2f67d", "filename": "libstdc++-v3/src/limits.cc", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc?ref=12bfa8bd29310b40e114f4965d9139e1015ae1df", "patch": "@@ -1,6 +1,6 @@\n // Static data members of -*- C++ -*- numeric_limits classes\n \n-// Copyright (C) 1999, 2001, 2002, 2005, 2006, 2009, 2010\n+// Copyright (C) 1999, 2001, 2002, 2005, 2006, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -389,6 +389,56 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   const bool numeric_limits<unsigned long long>::tinyness_before;\n   const float_round_style numeric_limits<unsigned long long>::round_style;\n \n+#if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_INT128)\n+  const bool numeric_limits<__int128_t>::is_specialized;\n+  const int  numeric_limits<__int128_t>::digits;\n+  const int  numeric_limits<__int128_t>::digits10;\n+  const int  numeric_limits<__int128_t>::max_digits10;\n+  const bool numeric_limits<__int128_t>::is_signed;\n+  const bool numeric_limits<__int128_t>::is_integer;\n+  const bool numeric_limits<__int128_t>::is_exact;\n+  const int  numeric_limits<__int128_t>::radix;\n+  const int  numeric_limits<__int128_t>::min_exponent;\n+  const int  numeric_limits<__int128_t>::min_exponent10;\n+  const int  numeric_limits<__int128_t>::max_exponent;\n+  const int  numeric_limits<__int128_t>::max_exponent10;\n+  const bool numeric_limits<__int128_t>::has_infinity;\n+  const bool numeric_limits<__int128_t>::has_quiet_NaN;\n+  const bool numeric_limits<__int128_t>::has_signaling_NaN;\n+  const float_denorm_style numeric_limits<__int128_t>::has_denorm;\n+  const bool numeric_limits<__int128_t>::has_denorm_loss;\n+  const bool numeric_limits<__int128_t>::is_iec559;\n+  const bool numeric_limits<__int128_t>::is_bounded;\n+  const bool numeric_limits<__int128_t>::is_modulo;\n+  const bool numeric_limits<__int128_t>::traps;\n+  const bool numeric_limits<__int128_t>::tinyness_before;\n+  const float_round_style numeric_limits<__int128_t>::round_style;\n+\n+  const bool numeric_limits<__uint128_t>::is_specialized;\n+  const int  numeric_limits<__uint128_t>::digits;\n+  const int  numeric_limits<__uint128_t>::digits10;\n+  const int  numeric_limits<__uint128_t>::max_digits10;\n+  const bool numeric_limits<__uint128_t>::is_signed;\n+  const bool numeric_limits<__uint128_t>::is_integer;\n+  const bool numeric_limits<__uint128_t>::is_exact;\n+  const int  numeric_limits<__uint128_t>::radix;\n+  const int  numeric_limits<__uint128_t>::min_exponent;\n+  const int  numeric_limits<__uint128_t>::min_exponent10;\n+  const int  numeric_limits<__uint128_t>::max_exponent;\n+  const int  numeric_limits<__uint128_t>::max_exponent10;\n+  const bool numeric_limits<__uint128_t>::has_infinity;\n+  const bool numeric_limits<__uint128_t>::has_quiet_NaN;\n+  const bool numeric_limits<__uint128_t>::has_signaling_NaN;\n+  const float_denorm_style numeric_limits<__uint128_t>::has_denorm;\n+  const bool numeric_limits<__uint128_t>::has_denorm_loss;\n+  const bool numeric_limits<__uint128_t>::is_iec559;\n+  const bool numeric_limits<__uint128_t>::is_bounded;\n+  const bool numeric_limits<__uint128_t>::is_modulo;\n+  const bool numeric_limits<__uint128_t>::traps;\n+  const bool numeric_limits<__uint128_t>::tinyness_before;\n+  const float_round_style numeric_limits<__uint128_t>::round_style;\n+#endif\n+\n   // float\n   const bool numeric_limits<float>::is_specialized;\n   const int  numeric_limits<float>::digits;"}, {"sha": "b39456bc9e4a0ee1149eb7638de390b9379f724b", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/40856.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2F40856.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2F40856.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2F40856.cc?ref=12bfa8bd29310b40e114f4965d9139e1015ae1df", "patch": "@@ -0,0 +1,27 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2011 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <limits>\n+\n+// libstdc++/40856 \n+#ifdef _GLIBCXX_USE_INT128\n+static_assert(std::numeric_limits<__int128_t>::is_specialized == true, \"\");\n+static_assert(std::numeric_limits<__uint128_t>::is_specialized == true, \"\");\n+#endif"}, {"sha": "d6b78d52c90a680205f48710ca8480984c36a27a", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/dr559.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fdr559.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fdr559.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fdr559.cc?ref=12bfa8bd29310b40e114f4965d9139e1015ae1df", "patch": "@@ -2,7 +2,7 @@\n \n // 2010-02-17  Paolo Carlini  <paolo.carlini@oracle.com>\n //\n-// Copyright (C) 2010 Free Software Foundation\n+// Copyright (C) 2010, 2011 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -95,6 +95,11 @@ int main()\n   do_test<unsigned long>();\n   do_test<long long>();\n   do_test<unsigned long long>();\n+  // GNU Extensions.\n+#ifdef _GLIBCXX_USE_INT128\n+  do_test<__int128_t>();\n+  do_test<__uint128_t>();\n+#endif\n   do_test<float>();\n   do_test<double>();\n   do_test<long double>();"}, {"sha": "ab964ef98b99a7b9e2c931b6c3ff64e1318c038d", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/lowest.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Flowest.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Flowest.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Flowest.cc?ref=12bfa8bd29310b40e114f4965d9139e1015ae1df", "patch": "@@ -72,6 +72,12 @@ void test01()\n   do_test<long long>();\n   do_test<unsigned long long>();\n \n+  // GNU Extensions.\n+#ifdef _GLIBCXX_USE_INT128\n+  do_test<__int128_t>();\n+  do_test<__uint128_t>();\n+#endif\n+\n   do_test<float>();\n   do_test<double>();\n   do_test<long double>();"}, {"sha": "571b4032b005920a5ea077a58a773e3ba9e12c81", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/max_digits10.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fmax_digits10.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fmax_digits10.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fmax_digits10.cc?ref=12bfa8bd29310b40e114f4965d9139e1015ae1df", "patch": "@@ -3,7 +3,7 @@\n \n // 2010-02-25  Ed Smith-Rowland\n \n-// Copyright (C) 2010 Free Software Foundation\n+// Copyright (C) 2010, 2011 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -47,6 +47,12 @@ test01()\n   VERIFY( std::numeric_limits<char16_t>::max_digits10 == 0 );\n   VERIFY( std::numeric_limits<char32_t>::max_digits10 == 0 );\n \n+  // GNU Extensions.\n+#ifdef _GLIBCXX_USE_INT128\n+  VERIFY( std::numeric_limits<__int128_t>::max_digits10 == 0 );\n+  VERIFY( std::numeric_limits<__uint128_t>::max_digits10 == 0 );\n+#endif\n+\n   const int f_max_digits10 = (2 + std::numeric_limits<float>::digits\n \t\t\t      * 643 / 2136);\n   VERIFY( std::numeric_limits<float>::max_digits10 == f_max_digits10 );"}, {"sha": "f7ed2216e75dd56f940339b3d2bc7c415927adc5", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/requirements/constexpr_functions.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Frequirements%2Fconstexpr_functions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Frequirements%2Fconstexpr_functions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Frequirements%2Fconstexpr_functions.cc?ref=12bfa8bd29310b40e114f4965d9139e1015ae1df", "patch": "@@ -1,7 +1,7 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -65,6 +65,6 @@ int main()\n   __gnu_test::constexpr_member_functions test;\n   __gnu_cxx::typelist::apply_generator(test,\n \t\t\t\t       __gnu_test::limits_tl(),\n-\t\t\t\t       __gnu_test::integral_types::type());\n+\t\t\t\t       __gnu_test::integral_types_gnu::type());\n   return 0;\n }"}, {"sha": "b2f3f3418bf14da93097af8ce537c05e748c5560", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fassign_neg.cc?ref=12bfa8bd29310b40e114f4965d9139e1015ae1df", "patch": "@@ -28,5 +28,5 @@ int main()\n   return 0;\n }\n \n-// { dg-error \"deleted\" \"\" { target *-*-* } 572 }\n+// { dg-error \"deleted\" \"\" { target *-*-* } 616 }\n // { dg-prune-output \"include\" }"}, {"sha": "fd506e1b3dc280059098b8662eda40387dc341ec", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fcopy_neg.cc?ref=12bfa8bd29310b40e114f4965d9139e1015ae1df", "patch": "@@ -28,5 +28,5 @@ int main()\n   return 0;\n }\n \n-// { dg-error \"deleted\" \"\" { target *-*-* } 611 }\n+// { dg-error \"deleted\" \"\" { target *-*-* } 655 }\n // { dg-prune-output \"include\" }"}, {"sha": "aa94cef59e4015d08114562f867192764d73c3b3", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fassign_neg.cc?ref=12bfa8bd29310b40e114f4965d9139e1015ae1df", "patch": "@@ -29,5 +29,5 @@ int main()\n   return 0;\n }\n \n-// { dg-error \"deleted\" \"\" { target *-*-* } 572 }\n+// { dg-error \"deleted\" \"\" { target *-*-* } 616 }\n // { dg-prune-output \"include\" }"}, {"sha": "df705d29b41e8fce361ffdc4a9736bbc57dd3317", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fcopy_neg.cc?ref=12bfa8bd29310b40e114f4965d9139e1015ae1df", "patch": "@@ -29,5 +29,5 @@ int main()\n   return 0;\n }\n \n-// { dg-error \"deleted\" \"\" { target *-*-* } 611 }\n+// { dg-error \"deleted\" \"\" { target *-*-* } 655 }\n // { dg-prune-output \"include\" }"}, {"sha": "f4b4f8fd0cc14219dade3dcecfad9bacff3528a8", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/operators/bitwise_neg.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fbitwise_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fbitwise_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fbitwise_neg.cc?ref=12bfa8bd29310b40e114f4965d9139e1015ae1df", "patch": "@@ -27,10 +27,10 @@ int main()\n   return 0;\n }\n \n-// { dg-error \"deleted\" \"\" { target *-*-* } 426 }\n-// { dg-error \"deleted\" \"\" { target *-*-* } 427 }\n-// { dg-error \"operator\" \"\" { target *-*-* } 428 }\n-// { dg-error \"operator\" \"\" { target *-*-* } 429 }\n-// { dg-error \"operator\" \"\" { target *-*-* } 430 }\n+// { dg-error \"deleted\" \"\" { target *-*-* } 470 }\n+// { dg-error \"deleted\" \"\" { target *-*-* } 471 }\n+// { dg-error \"operator\" \"\" { target *-*-* } 472 }\n+// { dg-error \"operator\" \"\" { target *-*-* } 473 }\n+// { dg-error \"operator\" \"\" { target *-*-* } 474 }\n \n // { dg-prune-output \"declared here\" }"}, {"sha": "5b31fc0fe7a00242cb5b6f8a5d2821455eb06c20", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/operators/decrement_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fdecrement_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fdecrement_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fdecrement_neg.cc?ref=12bfa8bd29310b40e114f4965d9139e1015ae1df", "patch": "@@ -28,6 +28,6 @@ int main()\n   return 0;\n }\n \n-// { dg-error \"operator\" \"\" { target *-*-* } 385 }\n-// { dg-error \"operator\" \"\" { target *-*-* } 386 }\n-// { dg-error \"operator\" \"\" { target *-*-* } 387 }\n+// { dg-error \"operator\" \"\" { target *-*-* } 429 }\n+// { dg-error \"operator\" \"\" { target *-*-* } 430 }\n+// { dg-error \"operator\" \"\" { target *-*-* } 431 }"}, {"sha": "9624eefe09224adbc253f186a8daf7dffb37511e", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/operators/increment_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fincrement_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fincrement_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fincrement_neg.cc?ref=12bfa8bd29310b40e114f4965d9139e1015ae1df", "patch": "@@ -28,6 +28,6 @@ int main()\n   return 0;\n }\n \n-// { dg-error \"operator\" \"\" { target *-*-* } 363 }\n-// { dg-error \"operator\" \"\" { target *-*-* } 364 }\n-// { dg-error \"operator\" \"\" { target *-*-* } 365 }\n+// { dg-error \"operator\" \"\" { target *-*-* } 407 }\n+// { dg-error \"operator\" \"\" { target *-*-* } 408 }\n+// { dg-error \"operator\" \"\" { target *-*-* } 409 }"}, {"sha": "68c3252472b5d15e7e9fbd1235dbaba2337e6f46", "filename": "libstdc++-v3/testsuite/util/testsuite_common_types.h", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bfa8bd29310b40e114f4965d9139e1015ae1df/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h?ref=12bfa8bd29310b40e114f4965d9139e1015ae1df", "patch": "@@ -257,7 +257,7 @@ namespace __gnu_test\n       typedef typename append<a1, a2>::type type;\n     };\n \n-  // A typelist of all integral types.\n+  // A typelist of all standard integral types.\n   struct integral_types\n   {\n     typedef bool \t\ta1;\n@@ -285,6 +285,50 @@ namespace __gnu_test\n #endif\n   };\n \n+  // A typelist of all standard integral types + the GNU 128-bit types.\n+  struct integral_types_gnu\n+  {\n+    typedef bool \t\ta1;\n+    typedef char \t\ta2;\n+    typedef signed char \ta3;\n+    typedef unsigned char \ta4;\n+    typedef short \t\ta5;\n+    typedef unsigned short \ta6;\n+    typedef int \t\ta7;\n+    typedef unsigned int \ta8;\n+    typedef long \t\ta9;\n+    typedef unsigned long \ta10;\n+    typedef long long \t\ta11;\n+    typedef unsigned long long \ta12;\n+    typedef wchar_t \t\ta13;\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    typedef char16_t \t\ta14;\n+    typedef char32_t \t\ta15;\n+# if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_INT128)\n+    typedef __int128_t          a16;\n+    typedef __uint128_t         a17;\n+\n+    typedef node<_GLIBCXX_TYPELIST_CHAIN17(a1, a2, a3, a4, a5, a6, a7, a8, a9, \n+\t\t\t\t\t   a10, a11, a12, a13, a14, a15,\n+\t\t\t\t\t   a16, a17)> type;\n+# else\n+    typedef node<_GLIBCXX_TYPELIST_CHAIN15(a1, a2, a3, a4, a5, a6, a7, a8, a9, \n+\t\t\t\t\t   a10, a11, a12, a13, a14, a15)> type;\n+# endif\n+#else\n+# if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_INT128)\n+    typedef __int128_t          a14;\n+    typedef __uint128_t         a15;\n+\n+    typedef node<_GLIBCXX_TYPELIST_CHAIN15(a1, a2, a3, a4, a5, a6, a7, a8, a9, \n+\t\t\t\t\t   a10, a11, a12, a13, a14, a15)> type;\n+# else\n+   typedef node<_GLIBCXX_TYPELIST_CHAIN13(a1, a2, a3, a4, a5, a6, a7, a8, a9, \n+\t\t\t\t\t  a10, a11, a12, a13)> type;\n+# endif\n+#endif\n+  };\n+\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n   struct atomic_integrals_no_bool\n   {\n@@ -347,7 +391,7 @@ namespace __gnu_test\n       typedef std::numeric_limits<value_type>\ttype;\n     };\n \n-  typedef transform<integral_types::type, numeric_limits>::type limits_tl;\n+  typedef transform<integral_types_gnu::type, numeric_limits>::type limits_tl;\n \n   struct has_increment_operators\n   {"}]}