{"sha": "2097b5b029851d531a1424a0092992d4c9f650e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA5N2I1YjAyOTg1MWQ1MzFhMTQyNGEwMDkyOTkyZDRjOWY2NTBlNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-05-27T11:18:37Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-05-27T11:18:37Z"}, "message": "re PR libstdc++/66017 (Undefined behaviour in std::set<long long>)\n\n\tPR libstdc++/66017\n\t* include/bits/stl_tree.h (_Rb_tree_node): Use __aligned_membuf.\n\t(_Rb_tree_iterator, _Rb_tree_const_iterator): Support construction\n\tfrom _Base_ptr.\n\t(_Rb_tree_const_iterator::_M_const_cast): Remove static_cast.\n\t(_Rb_tree::begin, _Rb_tree::end): Remove static_cast.\n\t* include/ext/aligned_buffer.h (__aligned_membuf): New type using\n\talignment of _Tp as a member subobject, not as a complete object.\n\t* python/libstdcxx/v6/printers.py (StdRbtreeIteratorPrinter): Lookup\n\t_Link_type manually as it might not be in the debug info.\n\nFrom-SVN: r223745", "tree": {"sha": "96e7e2ca94b197e4d0a70f538b776fe1cbb86b64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96e7e2ca94b197e4d0a70f538b776fe1cbb86b64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2097b5b029851d531a1424a0092992d4c9f650e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2097b5b029851d531a1424a0092992d4c9f650e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2097b5b029851d531a1424a0092992d4c9f650e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2097b5b029851d531a1424a0092992d4c9f650e4/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1af7da61278d2c4ae7b7f56fad37723461031cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1af7da61278d2c4ae7b7f56fad37723461031cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1af7da61278d2c4ae7b7f56fad37723461031cb"}], "stats": {"total": 87, "additions": 66, "deletions": 21}, "files": [{"sha": "1e5b30c8aacc795aada716347206784ecc6ec167", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2097b5b029851d531a1424a0092992d4c9f650e4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2097b5b029851d531a1424a0092992d4c9f650e4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2097b5b029851d531a1424a0092992d4c9f650e4", "patch": "@@ -1,3 +1,16 @@\n+2015-05-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/66017\n+\t* include/bits/stl_tree.h (_Rb_tree_node): Use __aligned_membuf.\n+\t(_Rb_tree_iterator, _Rb_tree_const_iterator): Support construction\n+\tfrom _Base_ptr.\n+\t(_Rb_tree_const_iterator::_M_const_cast): Remove static_cast.\n+\t(_Rb_tree::begin, _Rb_tree::end): Remove static_cast.\n+\t* include/ext/aligned_buffer.h (__aligned_membuf): New type using\n+\talignment of _Tp as a member subobject, not as a complete object.\n+\t* python/libstdcxx/v6/printers.py (StdRbtreeIteratorPrinter): Lookup\n+\t_Link_type manually as it might not be in the debug info.\n+\n 2015-05-26  Doug Evans  <dje@google.com>\n \n \t* python/libstdcxx/v6/xmethods.py (UniquePtrMethodsMatcher): Add"}, {"sha": "d39042f1aaf53dd9d5370388df97cca4297d7e5f", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2097b5b029851d531a1424a0092992d4c9f650e4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2097b5b029851d531a1424a0092992d4c9f650e4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=2097b5b029851d531a1424a0092992d4c9f650e4", "patch": "@@ -146,7 +146,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_valptr() const\n       { return std::__addressof(_M_value_field); }\n #else\n-      __gnu_cxx::__aligned_buffer<_Val> _M_storage;\n+      __gnu_cxx::__aligned_membuf<_Val> _M_storage;\n \n       _Val*\n       _M_valptr()\n@@ -188,7 +188,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _M_node() { }\n \n       explicit\n-      _Rb_tree_iterator(_Link_type __x) _GLIBCXX_NOEXCEPT\n+      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT\n       : _M_node(__x) { }\n \n       reference\n@@ -260,16 +260,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _M_node() { }\n \n       explicit\n-      _Rb_tree_const_iterator(_Link_type __x) _GLIBCXX_NOEXCEPT\n+      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT\n       : _M_node(__x) { }\n \n       _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT\n       : _M_node(__it._M_node) { }\n \n       iterator\n       _M_const_cast() const _GLIBCXX_NOEXCEPT\n-      { return iterator(static_cast<typename iterator::_Link_type>\n-\t\t\t(const_cast<typename iterator::_Base_ptr>(_M_node))); }\n+      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }\n \n       reference\n       operator*() const _GLIBCXX_NOEXCEPT\n@@ -868,28 +867,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       iterator\n       begin() _GLIBCXX_NOEXCEPT\n-      { \n-\treturn iterator(static_cast<_Link_type>\n-\t\t\t(this->_M_impl._M_header._M_left));\n-      }\n+      { return iterator(this->_M_impl._M_header._M_left); }\n \n       const_iterator\n       begin() const _GLIBCXX_NOEXCEPT\n-      { \n-\treturn const_iterator(static_cast<_Const_Link_type>\n-\t\t\t      (this->_M_impl._M_header._M_left));\n-      }\n+      { return const_iterator(this->_M_impl._M_header._M_left); }\n \n       iterator\n       end() _GLIBCXX_NOEXCEPT\n-      { return iterator(static_cast<_Link_type>(&this->_M_impl._M_header)); }\n+      { return iterator(&this->_M_impl._M_header); }\n \n       const_iterator\n       end() const _GLIBCXX_NOEXCEPT\n-      { \n-\treturn const_iterator(static_cast<_Const_Link_type>\n-\t\t\t      (&this->_M_impl._M_header));\n-      }\n+      { return const_iterator(&this->_M_impl._M_header); }\n \n       reverse_iterator\n       rbegin() _GLIBCXX_NOEXCEPT"}, {"sha": "d023bc189e2cc8dfb8b3fc70bdb33dfbd096f99f", "filename": "libstdc++-v3/include/ext/aligned_buffer.h", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2097b5b029851d531a1424a0092992d4c9f650e4/libstdc%2B%2B-v3%2Finclude%2Fext%2Faligned_buffer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2097b5b029851d531a1424a0092992d4c9f650e4/libstdc%2B%2B-v3%2Finclude%2Fext%2Faligned_buffer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Faligned_buffer.h?ref=2097b5b029851d531a1424a0092992d4c9f650e4", "patch": "@@ -39,6 +39,47 @@\n \n namespace __gnu_cxx\n {\n+  // A utility type containing a POD object that can hold an object of type\n+  // _Tp initialized via placement new or allocator_traits::construct.\n+  // Intended for use as a data member subobject, use __aligned_buffer for\n+  // complete objects.\n+  template<typename _Tp>\n+    struct __aligned_membuf\n+    {\n+      // Target macro ADJUST_FIELD_ALIGN can produce different alignment for\n+      // types when used as class members. __aligned_membuf is intended\n+      // for use as a class member, so align the buffer as for a class member.\n+      struct _Tp2 { _Tp _M_t; };\n+\n+      alignas(__alignof__(_Tp2::_M_t)) unsigned char _M_storage[sizeof(_Tp)];\n+\n+      __aligned_membuf() = default;\n+\n+      // Can be used to avoid value-initialization zeroing _M_storage.\n+      __aligned_membuf(std::nullptr_t) { }\n+\n+      void*\n+      _M_addr() noexcept\n+      { return static_cast<void*>(&_M_storage); }\n+\n+      const void*\n+      _M_addr() const noexcept\n+      { return static_cast<const void*>(&_M_storage); }\n+\n+      _Tp*\n+      _M_ptr() noexcept\n+      { return static_cast<_Tp*>(_M_addr()); }\n+\n+      const _Tp*\n+      _M_ptr() const noexcept\n+      { return static_cast<const _Tp*>(_M_addr()); }\n+    };\n+\n+  // Similar to __aligned_membuf but aligned for complete objects, not members.\n+  // This type is used in <forward_list>, <future>, <bits/shared_ptr_base.h>\n+  // and <bits/hashtable_policy.h>, but ideally they would use __aligned_membuf\n+  // instead, as it has smaller size for some types on some targets.\n+  // This type is still used to avoid an ABI change.\n   template<typename _Tp>\n     struct __aligned_buffer\n     : std::aligned_storage<sizeof(_Tp), std::alignment_of<_Tp>::value>"}, {"sha": "2b6e4096ae4001e4c7c72b03a8bd74f2b71ed649", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2097b5b029851d531a1424a0092992d4c9f650e4/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2097b5b029851d531a1424a0092992d4c9f650e4/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=2097b5b029851d531a1424a0092992d4c9f650e4", "patch": "@@ -456,11 +456,12 @@ class StdRbtreeIteratorPrinter:\n \n     def __init__ (self, typename, val):\n         self.val = val\n+        valtype = self.val.type.template_argument(0).strip_typedefs()\n+        nodetype = gdb.lookup_type('std::_Rb_tree_node<' + str(valtype) + '>')\n+        self.link_type = nodetype.strip_typedefs().pointer()\n \n     def to_string (self):\n-        typename = str(self.val.type.strip_typedefs()) + '::_Link_type'\n-        nodetype = gdb.lookup_type(typename).strip_typedefs()\n-        node = self.val.cast(nodetype).dereference()\n+        node = self.val['_M_node'].cast(self.link_type).dereference()\n         return get_value_from_Rb_tree_node(node)\n \n class StdDebugIteratorPrinter:"}]}