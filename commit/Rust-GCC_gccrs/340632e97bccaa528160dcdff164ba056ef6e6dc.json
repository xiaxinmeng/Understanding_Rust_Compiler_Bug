{"sha": "340632e97bccaa528160dcdff164ba056ef6e6dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQwNjMyZTk3YmNjYWE1MjgxNjBkY2RmZjE2NGJhMDU2ZWY2ZTZkYw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-11-27T21:37:42Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-11-27T21:37:42Z"}, "message": "compiler: add types used by inline functions to export data\n    \n    Reviewed-on: https://go-review.googlesource.com/c/150069\n\nFrom-SVN: r266531", "tree": {"sha": "73cc419534f6893624dfe95b3f17d7ff6aabf0b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73cc419534f6893624dfe95b3f17d7ff6aabf0b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/340632e97bccaa528160dcdff164ba056ef6e6dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/340632e97bccaa528160dcdff164ba056ef6e6dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/340632e97bccaa528160dcdff164ba056ef6e6dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/340632e97bccaa528160dcdff164ba056ef6e6dc/comments", "author": null, "committer": null, "parents": [{"sha": "34ea95978d0f2af4adff2de7fd9bd32e4526b0d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34ea95978d0f2af4adff2de7fd9bd32e4526b0d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34ea95978d0f2af4adff2de7fd9bd32e4526b0d1"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "9ad1464fe57b482c3c7a79de1048c7ec43ab1888", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/340632e97bccaa528160dcdff164ba056ef6e6dc/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/340632e97bccaa528160dcdff164ba056ef6e6dc/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=340632e97bccaa528160dcdff164ba056ef6e6dc", "patch": "@@ -1,4 +1,4 @@\n-c11d9528a0846293e4d615c86fc773c97252fdce\n+21cf8069ceb078de54cc43ac25c9c89bd15cba56\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "d021ac4c6b151e98ab69e69ecdc3679adb26d307", "filename": "gcc/go/gofrontend/export.cc", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/340632e97bccaa528160dcdff164ba056ef6e6dc/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/340632e97bccaa528160dcdff164ba056ef6e6dc/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexport.cc?ref=340632e97bccaa528160dcdff164ba056ef6e6dc", "patch": "@@ -290,6 +290,11 @@ Find_types_to_prepare::type(Type* type)\n   if (type->is_void_type())\n     return TRAVERSE_SKIP_COMPONENTS;\n \n+  // Skip abstract types.  We should never see these in real code,\n+  // only in things like const declarations.\n+  if (type->is_abstract())\n+    return TRAVERSE_SKIP_COMPONENTS;\n+\n   if (!this->exp_->set_type_index(type))\n     {\n       // We've already seen this type.\n@@ -367,7 +372,12 @@ Find_types_to_prepare::traverse_named_type(Named_type* nt)\n \t     methods->begin_definitions();\n \t   pm != methods->end_definitions();\n \t   ++pm)\n-\tthis->traverse_function((*pm)->func_value()->type());\n+\t{\n+\t  Function* fn = (*pm)->func_value();\n+\t  this->traverse_function(fn->type());\n+\t  if (fn->export_for_inlining())\n+\t    fn->block()->traverse(this);\n+\t}\n \n       for (Bindings::const_declarations_iterator pm =\n \t     methods->begin_declarations();\n@@ -434,7 +444,12 @@ Export::prepare_types(const std::vector<Named_object*>* exports,\n \t  break;\n \n \tcase Named_object::NAMED_OBJECT_FUNC:\n-\t  find.traverse_function(no->func_value()->type());\n+\t  {\n+\t    Function* fn = no->func_value();\n+\t    find.traverse_function(fn->type());\n+\t    if (fn->export_for_inlining())\n+\t      fn->block()->traverse(&find);\n+\t  }\n \t  break;\n \n \tcase Named_object::NAMED_OBJECT_FUNC_DECLARATION:"}]}