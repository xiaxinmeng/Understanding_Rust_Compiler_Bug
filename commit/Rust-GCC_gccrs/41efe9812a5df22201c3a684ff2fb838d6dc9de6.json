{"sha": "41efe9812a5df22201c3a684ff2fb838d6dc9de6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFlZmU5ODEyYTVkZjIyMjAxYzNhNjg0ZmYyZmI4MzhkNmRjOWRlNg==", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2020-07-21T03:14:19Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2020-07-21T03:14:19Z"}, "message": "rs6000/test: Add vector with length test cases\n\nThis patch is to add the test coverage for vector with\nlength feature on rs6000.  Tested on P9 LE, P7 BE and\nP9 BE (aix), the results looked fine.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/p9-vec-length-1.h: New test.\n\t* gcc.target/powerpc/p9-vec-length-2.h: New test.\n\t* gcc.target/powerpc/p9-vec-length-3.h: New test.\n\t* gcc.target/powerpc/p9-vec-length-4.h: New test.\n\t* gcc.target/powerpc/p9-vec-length-5.h: New test.\n\t* gcc.target/powerpc/p9-vec-length-6.h: New test.\n\t* gcc.target/powerpc/p9-vec-length-7.h: New test.\n\t* gcc.target/powerpc/p9-vec-length-8.h: New test.\n\t* gcc.target/powerpc/p9-vec-length-epil-1.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-epil-2.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-epil-3.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-epil-4.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-epil-5.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-epil-6.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-epil-7.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-epil-8.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-epil-run-1.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-epil-run-2.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-epil-run-3.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-epil-run-4.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-epil-run-5.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-epil-run-6.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-epil-run-7.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-epil-run-8.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-full-1.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-full-2.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-full-3.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-full-4.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-full-5.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-full-6.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-full-7.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-full-8.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-full-run-1.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-full-run-2.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-full-run-3.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-full-run-4.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-full-run-5.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-full-run-6.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-full-run-7.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-full-run-8.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-run-1.h: New test.\n\t* gcc.target/powerpc/p9-vec-length-run-2.h: New test.\n\t* gcc.target/powerpc/p9-vec-length-run-3.h: New test.\n\t* gcc.target/powerpc/p9-vec-length-run-4.h: New test.\n\t* gcc.target/powerpc/p9-vec-length-run-5.h: New test.\n\t* gcc.target/powerpc/p9-vec-length-run-6.h: New test.\n\t* gcc.target/powerpc/p9-vec-length-run-7.h: New test.\n\t* gcc.target/powerpc/p9-vec-length-run-8.h: New test.\n\t* gcc.target/powerpc/p9-vec-length.h: New test.", "tree": {"sha": "297bd377b250c364958ce94d7543e4ee65ba7841", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/297bd377b250c364958ce94d7543e4ee65ba7841"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41efe9812a5df22201c3a684ff2fb838d6dc9de6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41efe9812a5df22201c3a684ff2fb838d6dc9de6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41efe9812a5df22201c3a684ff2fb838d6dc9de6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41efe9812a5df22201c3a684ff2fb838d6dc9de6/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77077c8812c25e9a0ddb6ecbb4460d34294da0c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77077c8812c25e9a0ddb6ecbb4460d34294da0c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77077c8812c25e9a0ddb6ecbb4460d34294da0c2"}], "stats": {"total": 904, "additions": 904, "deletions": 0}, "files": [{"sha": "50da5817013ea8dfb32afea2a3ebbe1e822726e4", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-1.h", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-1.h?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,18 @@\n+#include \"p9-vec-length.h\"\n+\n+/* Test the case loop iteration is known.  */\n+\n+#define N 127\n+\n+#define test(TYPE)                                                             \\\n+  extern TYPE a_##TYPE[N];                                                     \\\n+  extern TYPE b_##TYPE[N];                                                     \\\n+  extern TYPE c_##TYPE[N];                                                     \\\n+  void __attribute__ ((noinline, noclone)) test##TYPE ()                       \\\n+  {                                                                            \\\n+    unsigned int i = 0;                                                        \\\n+    for (i = 0; i < N; i++)                                                    \\\n+      c_##TYPE[i] = a_##TYPE[i] + b_##TYPE[i];                                 \\\n+  }\n+\n+TEST_ALL (test)"}, {"sha": "b275dba0fde080fc929ade63994d3647b174e401", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-2.h", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-2.h?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,17 @@\n+#include \"p9-vec-length.h\"\n+\n+/* Test the case loop iteration is unknown.  */\n+#define N 255\n+\n+#define test(TYPE)                                                             \\\n+  extern TYPE a_##TYPE[N];                                                     \\\n+  extern TYPE b_##TYPE[N];                                                     \\\n+  extern TYPE c_##TYPE[N];                                                     \\\n+  void __attribute__ ((noinline, noclone)) test##TYPE (unsigned int n)         \\\n+  {                                                                            \\\n+    unsigned int i = 0;                                                        \\\n+    for (i = 0; i < n; i++)                                                    \\\n+      c_##TYPE[i] = a_##TYPE[i] + b_##TYPE[i];                                 \\\n+  }\n+\n+TEST_ALL (test)"}, {"sha": "c79b9b30910685f2948ce57144c37dd3e3f567ac", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-3.h", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-3.h?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,31 @@\n+#include \"p9-vec-length.h\"\n+\n+/* Test the case loop iteration less than VF.  */\n+\n+/* For char.  */\n+#define N_uint8_t 15\n+#define N_int8_t 15\n+/* For short.  */\n+#define N_uint16_t 6\n+#define N_int16_t 6\n+/* For int/float.  */\n+#define N_uint32_t 3\n+#define N_int32_t 3\n+#define N_float 3\n+/* For long/double.  */\n+#define N_uint64_t 1\n+#define N_int64_t 1\n+#define N_double 1\n+\n+#define test(TYPE)                                                             \\\n+  extern TYPE a_##TYPE[N_##TYPE];                                              \\\n+  extern TYPE b_##TYPE[N_##TYPE];                                              \\\n+  extern TYPE c_##TYPE[N_##TYPE];                                              \\\n+  void __attribute__ ((noinline, noclone)) test##TYPE ()                       \\\n+  {                                                                            \\\n+    unsigned int i = 0;                                                        \\\n+    for (i = 0; i < N_##TYPE; i++)                                             \\\n+      c_##TYPE[i] = a_##TYPE[i] + b_##TYPE[i];                                 \\\n+  }\n+\n+TEST_ALL (test)"}, {"sha": "0ee7fc84502cae5e6723e479a312446bf164969b", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-4.h", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-4.h?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,24 @@\n+#include \"p9-vec-length.h\"\n+\n+/* Test the case that the loop which has multiple vectors (concatenated vectors)\n+   but with same vector type.  */\n+\n+#define test(TYPE)                                                             \\\n+  void __attribute__ ((noinline, noclone))                                     \\\n+    test_mv_##TYPE (TYPE *restrict a, TYPE *restrict b, TYPE *restrict c,      \\\n+\t\t    int n)                                                     \\\n+  {                                                                            \\\n+    for (int i = 0; i < n; ++i)                                                \\\n+      {                                                                        \\\n+\ta[i] += 1;                                                             \\\n+\tb[i * 2] += 2;                                                         \\\n+\tb[i * 2 + 1] += 3;                                                     \\\n+\tc[i * 4] += 4;                                                         \\\n+\tc[i * 4 + 1] += 5;                                                     \\\n+\tc[i * 4 + 2] += 6;                                                     \\\n+\tc[i * 4 + 3] += 7;                                                     \\\n+      }                                                                        \\\n+  }\n+\n+TEST_ALL (test)\n+"}, {"sha": "406daaa3d3e003908ea0f69a07c729a52c5300dd", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-5.h", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-5.h?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,29 @@\n+#include \"p9-vec-length.h\"\n+\n+/* Test the case that the loop which has multiple vectors (concatenated vectors)\n+   with different types.  */\n+\n+#define test(TYPE1, TYPE2)                                                     \\\n+  void __attribute__ ((noinline, noclone))                                     \\\n+    test_mv_##TYPE1##TYPE2 (TYPE1 *restrict a, TYPE2 *restrict b, int n)       \\\n+  {                                                                            \\\n+    for (int i = 0; i < n; ++i)                                                \\\n+      {                                                                        \\\n+\ta[i * 2] += 1;                                                         \\\n+\ta[i * 2 + 1] += 2;                                                     \\\n+\tb[i * 2] += 3;                                                         \\\n+\tb[i * 2 + 1] += 4;                                                     \\\n+      }                                                                        \\\n+  }\n+\n+#define TEST_ALL2(T)                                                           \\\n+  T (int8_t, uint16_t)                                                         \\\n+  T (uint8_t, int16_t)                                                         \\\n+  T (int16_t, uint32_t)                                                        \\\n+  T (uint16_t, int32_t)                                                        \\\n+  T (int32_t, double)                                                          \\\n+  T (uint32_t, int64_t)                                                        \\\n+  T (float, uint64_t)\n+\n+TEST_ALL2 (test)\n+"}, {"sha": "58b151e18f8b0583bafd6dcbe41e9551345d62e3", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-6.h", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-6.h?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,32 @@\n+#include \"p9-vec-length.h\"\n+\n+/* Test the case that the loop which has the same concatenated vectors (same\n+   size per iteration) but from different types.  */\n+\n+#define test(TYPE1, TYPE2)                                                     \\\n+  void __attribute__ ((noinline, noclone))                                     \\\n+    test_mv_##TYPE1##TYPE2 (TYPE1 *restrict a, TYPE2 *restrict b, int n)       \\\n+  {                                                                            \\\n+    for (int i = 0; i < n; i++)                                                \\\n+      {                                                                        \\\n+\ta[i * 2] += 1;                                                         \\\n+\ta[i * 2 + 1] += 2;                                                     \\\n+\tb[i * 4] += 3;                                                         \\\n+\tb[i * 4 + 1] += 4;                                                     \\\n+\tb[i * 4 + 2] += 5;                                                     \\\n+\tb[i * 4 + 3] += 6;                                                     \\\n+      }                                                                        \\\n+  }\n+\n+#define TEST_ALL2(T)                                                           \\\n+  T (int16_t, uint8_t)                                                         \\\n+  T (uint16_t, int8_t)                                                         \\\n+  T (int32_t, uint16_t)                                                        \\\n+  T (uint32_t, int16_t)                                                        \\\n+  T (float, uint16_t)                                                          \\\n+  T (int64_t, float)                                                           \\\n+  T (uint64_t, int32_t)                                                        \\\n+  T (double, uint32_t)\n+\n+TEST_ALL2 (test)\n+"}, {"sha": "4ef8f974a040a83eff051a0cdc9d4ff30388d427", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-7.h", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-7.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-7.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-7.h?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,20 @@\n+#include \"p9-vec-length.h\"\n+\n+/* Test the case that the loop requires to have peeled prologues for\n+   alignment.  */\n+\n+#define N 64\n+#define START 1\n+#define END 59\n+\n+#define test(TYPE)                                                             \\\n+  TYPE x_##TYPE[N] __attribute__((aligned(16)));                                \\\n+  void __attribute__((noinline, noclone)) test_npeel_##TYPE() {                \\\n+    TYPE v = 0;                                                                \\\n+    for (unsigned int i = START; i < END; i++) {                               \\\n+      x_##TYPE[i] = v;                                                         \\\n+      v += 1;                                                                  \\\n+    }                                                                          \\\n+  }\n+\n+TEST_ALL (test)"}, {"sha": "09d0e369f1119bd0db34de110a894669585d9f03", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-8.h", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-8.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-8.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-8.h?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,14 @@\n+#include \"p9-vec-length.h\"\n+\n+/* Test the case that the loop requires to peel for gaps.  */\n+\n+#define N 200\n+\n+#define test(TYPE)                                                             \\\n+  void __attribute__((noinline, noclone))                                      \\\n+      test_##TYPE(TYPE *restrict dest, TYPE *restrict src) {                   \\\n+    for (unsigned int i = 0; i < N; ++i)                                       \\\n+      dest[i] += src[i * 2];                                                   \\\n+  }\n+\n+TEST_ALL(test)"}, {"sha": "ebb2f45c9179fef096e84250b5806789ad87c5a6", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-epil-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-1.c?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { lp64 && powerpc_p9vector_ok } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=1\" } */\n+\n+/* Test for that only vectorize the epilogue with vector access with length,\n+   the main body still use normal vector load/store.  */\n+\n+#include \"p9-vec-length-1.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mlxvx?\\M} 20 } } */\n+/* { dg-final { scan-assembler-times {\\mstxvx?\\M} 10 } } */\n+/* { dg-final { scan-assembler-times {\\mlxvl\\M} 20 } } */\n+/* { dg-final { scan-assembler-times {\\mstxvl\\M} 10 } } */\n+"}, {"sha": "9f78a447ec7ae50b2a98409c4e7e874db34f4cb1", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-epil-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-2.c?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { lp64 && powerpc_p9vector_ok } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=1\" } */\n+\n+/* Test for that only vectorize the epilogue with vector access with length,\n+   the main body still use normal vector load/store.  */\n+\n+#include \"p9-vec-length-2.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mlxvx?\\M} 20 } } */\n+/* { dg-final { scan-assembler-times {\\mstxvx?\\M} 10 } } */\n+/* { dg-final { scan-assembler-times {\\mlxvl\\M} 20 } } */\n+/* { dg-final { scan-assembler-times {\\mstxvl\\M} 10 } } */\n+"}, {"sha": "a08797fcbca48c934bc74a959e9a7b1453eb25b8", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-epil-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-3.c?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { lp64 && powerpc_p9vector_ok } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=1\" } */\n+\n+/* Test for that only vectorize the epilogue with vector access with length,\n+   the main body still use normal vector load/store.  */\n+\n+#include \"p9-vec-length-3.h\"\n+\n+/* { dg-final { scan-assembler-not   {\\mlxv\\M} } } */\n+/* { dg-final { scan-assembler-not   {\\mstxv\\M} } } */\n+/* { dg-final { scan-assembler-not   {\\mlxvx\\M} } } */\n+/* { dg-final { scan-assembler-not   {\\mstxvx\\M} } } */\n+/* 64bit types get completely unrolled, so only check the others.  */\n+/* { dg-final { scan-assembler-times {\\mlxvl\\M} 14 } } */\n+/* { dg-final { scan-assembler-times {\\mstxvl\\M} 7 } } */\n+"}, {"sha": "ad051fb1cef92d5d9f1c38f53f35680edeeb17f9", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-epil-4.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-4.c?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { lp64 && powerpc_p9vector_ok } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=1\" } */\n+\n+/* Test for that only vectorize the epilogue with vector access with length,\n+   the main body still use normal vector load/store.  */\n+\n+#include \"p9-vec-length-4.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mlxvx?\\M} 120 } } */\n+/* { dg-final { scan-assembler-times {\\mstxvx?\\M} 70 } } */\n+/* { dg-final { scan-assembler-times {\\mlxvl\\M} 70 } } */\n+/* { dg-final { scan-assembler-times {\\mstxvl\\M} 70 } } */\n+"}, {"sha": "a24c30feeba199a81c172878b9a600140cb80f8d", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-epil-5.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-5.c?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { lp64 && powerpc_p9vector_ok } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=1\" } */\n+\n+/* Test for that only vectorize the epilogue with vector access with length,\n+   the main body still use normal vector load/store.  */\n+\n+#include \"p9-vec-length-5.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mlxvx?\\M} 49 } } */\n+/* { dg-final { scan-assembler-times {\\mstxvx?\\M} 21 } } */\n+/* { dg-final { scan-assembler-times {\\mlxvl\\M} 21 } } */\n+/* { dg-final { scan-assembler-times {\\mstxvl\\M} 21 } } */\n+"}, {"sha": "4eaeb3b005f1d9b6378710f97855ff7b59914592", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-epil-6.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-6.c?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { lp64 && powerpc_p9vector_ok } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=1\" } */\n+\n+/* Test for that only vectorize the epilogue with vector access with length,\n+   the main body still use normal vector load/store.  */\n+\n+#include \"p9-vec-length-6.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mlxvx?\\M} 42 } } */\n+/* { dg-final { scan-assembler-times {\\mstxvx?\\M} 16 } } */\n+/* 64bit/32bit pairs don't have the epilogues.  */\n+/* { dg-final { scan-assembler-times {\\mlxvl\\M} 10 } } */\n+/* { dg-final { scan-assembler-times {\\mstxvl\\M} 10 } } */\n+"}, {"sha": "9d4032879231ef9a15189a0fd029dc7ab4262a1a", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-epil-7.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-7.c?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { lp64 && powerpc_p9vector_ok } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops -ffast-math\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=1\" } */\n+\n+/* Test for that only vectorize the epilogue with vector access with length,\n+   the main body still use normal vector load/store.  */\n+\n+#include \"p9-vec-length-7.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mstxvl\\M} 10 } } */"}, {"sha": "6b54a29efaaf55362f6aec78345f1c4b18ab1497", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-epil-8.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-8.c?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { lp64 && powerpc_p9vector_ok } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=1\" } */\n+\n+/* Test for that only vectorize the epilogue with vector access with length,\n+   the main body still use normal vector load/store.  */\n+\n+#include \"p9-vec-length-8.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mlxvl\\M} 30 } } */\n+/* { dg-final { scan-assembler-times {\\mstxvl\\M} 10 } } */"}, {"sha": "d1cd67f0c4d9613b2619e57cd1247548adc03901", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-epil-run-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-run-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-run-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-run-1.c?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do run { target { lp64 && p9vector_hw } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=1\" } */\n+\n+/* Check whether it runs successfully if we only vectorize the epilogue\n+   with vector access with length.  */\n+\n+#include \"p9-vec-length-run-1.h\"\n+"}, {"sha": "815867b51d05d37bc75b2e0acc44f7c8bb21776d", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-epil-run-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-run-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-run-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-run-2.c?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do run { target { lp64 && p9vector_hw } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=1\" } */\n+\n+/* Check whether it runs successfully if we only vectorize the epilogue\n+   with vector access with length.  */\n+\n+#include \"p9-vec-length-run-2.h\"\n+"}, {"sha": "5378d02c269754585a2ba5b0373f76e1e13d1074", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-epil-run-3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-run-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-run-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-run-3.c?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do run { target { lp64 && p9vector_hw } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=1\" } */\n+\n+/* Check whether it runs successfully if we only vectorize the epilogue\n+   with vector access with length.  */\n+\n+#include \"p9-vec-length-run-3.h\"\n+"}, {"sha": "daed9a7774ee052d303524231cb51a7dbfd80441", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-epil-run-4.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-run-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-run-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-run-4.c?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do run { target { lp64 && p9vector_hw } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=1\" } */\n+\n+/* Check whether it runs successfully if we only vectorize the epilogue\n+   with vector access with length.  */\n+\n+#include \"p9-vec-length-run-4.h\"\n+"}, {"sha": "b5f24e68d8461c1e3443310ff25c7536ce27ca08", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-epil-run-5.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-run-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-run-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-run-5.c?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do run { target { lp64 && p9vector_hw } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=1\" } */\n+\n+/* Check whether it runs successfully if we only vectorize the epilogue\n+   with vector access with length.  */\n+\n+#include \"p9-vec-length-run-5.h\"\n+"}, {"sha": "a3e6367384711f52f6a798a5cbb0f1226de95089", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-epil-run-6.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-run-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-run-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-run-6.c?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do run { target { lp64 && p9vector_hw } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=1\" } */\n+\n+/* Check whether it runs successfully if we only vectorize the epilogue\n+   with vector access with length.  */\n+\n+#include \"p9-vec-length-run-6.h\"\n+"}, {"sha": "f0b69d462a19f137a15f0fcf5ad47c91d52afcec", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-epil-run-7.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-run-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-run-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-run-7.c?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do run { target { lp64 && p9vector_hw } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model -ffast-math\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=1\" } */\n+\n+/* Check whether it runs successfully if we only vectorize the epilogue\n+   with vector access with length.  */\n+\n+#include \"p9-vec-length-run-7.h\"\n+"}, {"sha": "84abecf3f692a0272c792e8ed8ea5a78d36d3e0d", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-epil-run-8.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-run-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-run-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-run-8.c?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do run { target { lp64 && p9vector_hw } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=1\" } */\n+\n+/* Check whether it runs successfully if we only vectorize the epilogue\n+   with vector access with length.  */\n+\n+#include \"p9-vec-length-run-8.h\"\n+"}, {"sha": "3336752edbbf9d70386b4500814121bb0acf3722", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-full-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-1.c?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { lp64 && powerpc_p9vector_ok } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=2\" } */\n+\n+/* Test for fully with length, the loop body uses vector access with length,\n+   there should not be any epilogues.  */\n+\n+#include \"p9-vec-length-1.h\"\n+\n+/* { dg-final { scan-assembler-not   {\\mlxv\\M} } } */\n+/* { dg-final { scan-assembler-not   {\\mstxv\\M} } } */\n+/* { dg-final { scan-assembler-not   {\\mlxvx\\M} } } */\n+/* { dg-final { scan-assembler-not   {\\mstxvx\\M} } } */\n+/* { dg-final { scan-assembler-times {\\mlxvl\\M} 20 } } */\n+/* { dg-final { scan-assembler-times {\\mstxvl\\M} 10 } } */"}, {"sha": "98abf8b33b1cf914ac24bf2b0cad5aa6fdcde3ee", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-full-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-2.c?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { lp64 && powerpc_p9vector_ok } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=2\" } */\n+\n+/* Test for fully with length, the loop body uses vector access with length,\n+   there should not be any epilogues.  */\n+\n+#include \"p9-vec-length-2.h\"\n+\n+/* { dg-final { scan-assembler-not   {\\mlxv\\M} } } */\n+/* { dg-final { scan-assembler-not   {\\mstxv\\M} } } */\n+/* { dg-final { scan-assembler-not   {\\mlxvx\\M} } } */\n+/* { dg-final { scan-assembler-not   {\\mstxvx\\M} } } */\n+/* { dg-final { scan-assembler-times {\\mlxvl\\M} 20 } } */\n+/* { dg-final { scan-assembler-times {\\mstxvl\\M} 10 } } */"}, {"sha": "0881d1a960aaf18bfc83cdb048afcdf3df15ebf4", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-full-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-3.c?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { lp64 && powerpc_p9vector_ok } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=2\" } */\n+\n+/* Test for fully with length, the loop body uses vector access with length,\n+   there should not be any epilogues.  */\n+\n+#include \"p9-vec-length-3.h\"\n+\n+/* { dg-final { scan-assembler-not   {\\mlxv\\M} } } */\n+/* { dg-final { scan-assembler-not   {\\mstxv\\M} } } */\n+/* { dg-final { scan-assembler-not   {\\mlxvx\\M} } } */\n+/* { dg-final { scan-assembler-not   {\\mstxvx\\M} } } */\n+/* 64bit types get completely unrolled, so only check the others.  */\n+/* { dg-final { scan-assembler-times {\\mlxvl\\M} 14 } } */\n+/* { dg-final { scan-assembler-times {\\mstxvl\\M} 7 } } */"}, {"sha": "8ce3dc19a6097f65f718a29f78685fb5670a8b8f", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-full-4.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-4.c?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { lp64 && powerpc_p9vector_ok } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=2\" } */\n+\n+/* Test for fully with length, the loop body uses vector access with length,\n+   there should not be any epilogues.  */\n+\n+#include \"p9-vec-length-4.h\"\n+\n+/* It can use normal vector load for constant vector load.  */\n+/* { dg-final { scan-assembler-not   {\\mstxv\\M} } } */\n+/* { dg-final { scan-assembler-not   {\\mlxvx\\M} } } */\n+/* { dg-final { scan-assembler-not   {\\mstxvx\\M} } } */\n+/* { dg-final { scan-assembler-times {\\mlxvl\\M} 70 } } */\n+/* { dg-final { scan-assembler-times {\\mstxvl\\M} 70 } } */"}, {"sha": "f9f58ba11f5b9ae972af5d6f534fcf17d112a645", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-full-5.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-5.c?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { lp64 && powerpc_p9vector_ok } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=2\" } */\n+\n+/* Test for fully with length, the loop body uses vector access with length,\n+   there should not be any epilogues.  */\n+\n+#include \"p9-vec-length-5.h\"\n+\n+/* It can use normal vector load for constant vector load.  */\n+/* { dg-final { scan-assembler-not   {\\mstxv\\M} } } */\n+/* { dg-final { scan-assembler-not   {\\mlxvx\\M} } } */\n+/* { dg-final { scan-assembler-not   {\\mstxvx\\M} } } */\n+/* { dg-final { scan-assembler-times {\\mlxvl\\M} 21 } } */\n+/* { dg-final { scan-assembler-times {\\mstxvl\\M} 21 } } */"}, {"sha": "cfae9bbc92783ebda6b9e1a74fabda16d5a5f8f9", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-full-6.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-6.c?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { lp64 && powerpc_p9vector_ok } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=2\" } */\n+\n+/* Test for fully with length, the loop body uses vector access with length,\n+   there should not be any epilogues.  */\n+\n+#include \"p9-vec-length-6.h\"\n+\n+/* It can use normal vector load for constant vector load.  */\n+/* { dg-final { scan-assembler-not   {\\mstxv\\M} } } */\n+/* { dg-final { scan-assembler-not   {\\mlxvx\\M} } } */\n+/* { dg-final { scan-assembler-not   {\\mstxvx\\M} } } */\n+/* { dg-final { scan-assembler-times {\\mlxvl\\M} 16 } } */\n+/* { dg-final { scan-assembler-times {\\mstxvl\\M} 16 } } */"}, {"sha": "89ff38443e7b9c360f6350a59d597fd185e76c8d", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-full-7.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-7.c?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { lp64 && powerpc_p9vector_ok } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops -ffast-math\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=2\" } */\n+\n+/* Test for fully with length, the loop body uses vector access with length,\n+   there should not be any epilogues.  */\n+\n+#include \"p9-vec-length-7.h\"\n+\n+/* Each type has one stxvl excepting for int8 and uint8, that have two due to\n+   rtl pass bbro duplicating the block which has one stxvl.  */\n+/* { dg-final { scan-assembler-times {\\mstxvl\\M} 12 } } */"}, {"sha": "1fc2af1e7538190ace2d48cc04badd5ff06c14bd", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-full-8.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-8.c?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { lp64 && powerpc_p9vector_ok } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=2\" } */\n+\n+/* Test for fully with length, the loop body uses vector access with length,\n+   there should not be any epilogues.  */\n+\n+#include \"p9-vec-length-8.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mlxvl\\M} 30 } } */\n+/* { dg-final { scan-assembler-times {\\mstxvl\\M} 10 } } */"}, {"sha": "4e9bd0fbad30360cca9031c0773e8825d29d63aa", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-full-run-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-run-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-run-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-run-1.c?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do run { target { lp64 && p9vector_hw } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=2\" } */\n+\n+/* Check whether it runs successfully if we vectorize the loop fully\n+   with vector access with length.  */\n+\n+#include \"p9-vec-length-run-1.h\"\n+"}, {"sha": "8e06b1b9304a8d0cc12a5b3babcbad06d2ef414c", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-full-run-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-run-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-run-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-run-2.c?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do run { target { lp64 && p9vector_hw } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=2\" } */\n+\n+/* Check whether it runs successfully if we vectorize the loop fully\n+   with vector access with length.  */\n+\n+#include \"p9-vec-length-run-2.h\"\n+"}, {"sha": "0b86f62834fb4e4ee5131cce83b967415a96f79c", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-full-run-3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-run-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-run-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-run-3.c?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do run { target { lp64 && p9vector_hw } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=2\" } */\n+\n+/* Check whether it runs successfully if we vectorize the loop fully\n+   with vector access with length.  */\n+\n+#include \"p9-vec-length-run-3.h\"\n+"}, {"sha": "359f31c9ed5eccb531f60efd4cd5b2b597a98f6d", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-full-run-4.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-run-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-run-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-run-4.c?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do run { target { lp64 && p9vector_hw } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=2\" } */\n+\n+/* Check whether it runs successfully if we vectorize the loop fully\n+   with vector access with length.  */\n+\n+#include \"p9-vec-length-run-4.h\"\n+"}, {"sha": "7aa468e5b4e4b13f012f2acdda5f0cebfe73cdcf", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-full-run-5.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-run-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-run-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-run-5.c?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do run { target { lp64 && p9vector_hw } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=2\" } */\n+\n+/* Check whether it runs successfully if we vectorize the loop fully\n+   with vector access with length.  */\n+\n+#include \"p9-vec-length-run-5.h\"\n+"}, {"sha": "53a2ad07fb32476fb3a72e56f355c565b2bc8b50", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-full-run-6.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-run-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-run-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-run-6.c?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do run { target { lp64 && p9vector_hw } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=2\" } */\n+\n+/* Check whether it runs successfully if we vectorize the loop fully\n+   with vector access with length.  */\n+\n+#include \"p9-vec-length-run-6.h\"\n+"}, {"sha": "0c21d137b9d58525a58e36377da43784782884b3", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-full-run-7.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-run-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-run-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-run-7.c?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do run { target { lp64 && p9vector_hw } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model -ffast-math\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=2\" } */\n+\n+/* Check whether it runs successfully if we vectorize the loop fully\n+   with vector access with length.  */\n+\n+#include \"p9-vec-length-run-7.h\"\n+"}, {"sha": "910784260677d5d21bad98bd55460bbee2c8d812", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-full-run-8.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-run-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-run-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-full-run-8.c?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do run { target { lp64 && p9vector_hw } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=2\" } */\n+\n+/* Check whether it runs successfully if we vectorize the loop fully\n+   with vector access with length.  */\n+\n+#include \"p9-vec-length-run-8.h\"\n+"}, {"sha": "b397fd1ac30ec309458240f808300785191e7a4a", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-run-1.h", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-run-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-run-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-run-1.h?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,34 @@\n+#include \"p9-vec-length-1.h\"\n+\n+#define decl(TYPE)                                                             \\\n+  TYPE a_##TYPE[N];                                                            \\\n+  TYPE b_##TYPE[N];                                                            \\\n+  TYPE c_##TYPE[N];\n+\n+#define run(TYPE)                                                              \\\n+  {                                                                            \\\n+    unsigned int i = 0;                                                        \\\n+    for (i = 0; i < N; i++)                                                    \\\n+      {                                                                        \\\n+\ta_##TYPE[i] = i * 2 + 1;                                               \\\n+\tb_##TYPE[i] = i % 2 - 2;                                               \\\n+      }                                                                        \\\n+    test##TYPE ();                                                             \\\n+    for (i = 0; i < N; i++)                                                    \\\n+      {                                                                        \\\n+\tTYPE a1 = i * 2 + 1;                                                   \\\n+\tTYPE b1 = i % 2 - 2;                                                   \\\n+\tTYPE exp_c = a1 + b1;                                                  \\\n+\tif (c_##TYPE[i] != exp_c)                                              \\\n+\t  __builtin_abort ();                                                  \\\n+      }                                                                        \\\n+  }\n+\n+TEST_ALL (decl)\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (run)\n+  return 0;\n+}"}, {"sha": "a0f2d6ccb23ff0520446aec18c56c7f12771df00", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-run-2.h", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-run-2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-run-2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-run-2.h?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,36 @@\n+#include \"p9-vec-length-2.h\"\n+\n+#define decl(TYPE)                                                             \\\n+  TYPE a_##TYPE[N];                                                            \\\n+  TYPE b_##TYPE[N];                                                            \\\n+  TYPE c_##TYPE[N];\n+\n+#define N1 195\n+\n+#define run(TYPE)                                                              \\\n+  {                                                                            \\\n+    unsigned int i = 0;                                                        \\\n+    for (i = 0; i < N; i++)                                                    \\\n+      {                                                                        \\\n+\ta_##TYPE[i] = i * 2 + 1;                                               \\\n+\tb_##TYPE[i] = i % 2 - 2;                                               \\\n+      }                                                                        \\\n+    test##TYPE (N1);                                                           \\\n+    for (i = 0; i < N1; i++)                                                   \\\n+      {                                                                        \\\n+\tTYPE a1 = i * 2 + 1;                                                   \\\n+\tTYPE b1 = i % 2 - 2;                                                   \\\n+\tTYPE exp_c = a1 + b1;                                                  \\\n+\tif (c_##TYPE[i] != exp_c)                                              \\\n+\t  __builtin_abort ();                                                  \\\n+      }                                                                        \\\n+  }\n+\n+TEST_ALL (decl)\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (run)\n+  return 0;\n+}"}, {"sha": "5d2f5c34b6a671ecf34a84cfe40f4af558eb6b4d", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-run-3.h", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-run-3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-run-3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-run-3.h?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,34 @@\n+#include \"p9-vec-length-3.h\"\n+\n+#define decl(TYPE)                                                             \\\n+  TYPE a_##TYPE[N_##TYPE];                                                     \\\n+  TYPE b_##TYPE[N_##TYPE];                                                     \\\n+  TYPE c_##TYPE[N_##TYPE];\n+\n+#define run(TYPE)                                                              \\\n+  {                                                                            \\\n+    unsigned int i = 0;                                                        \\\n+    for (i = 0; i < N_##TYPE; i++)                                             \\\n+      {                                                                        \\\n+\ta_##TYPE[i] = i * 2 + 1;                                               \\\n+\tb_##TYPE[i] = i % 2 - 2;                                               \\\n+      }                                                                        \\\n+    test##TYPE ();                                                             \\\n+    for (i = 0; i < N_##TYPE; i++)                                             \\\n+      {                                                                        \\\n+\tTYPE a1 = i * 2 + 1;                                                   \\\n+\tTYPE b1 = i % 2 - 2;                                                   \\\n+\tTYPE exp_c = a1 + b1;                                                  \\\n+\tif (c_##TYPE[i] != exp_c)                                              \\\n+\t  __builtin_abort ();                                                  \\\n+      }                                                                        \\\n+  }\n+\n+TEST_ALL (decl)\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (run)\n+  return 0;\n+}"}, {"sha": "2f3b911d0d12d97c10a6699a252b23db89e38ac4", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-run-4.h", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-run-4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-run-4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-run-4.h?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,62 @@\n+#include \"p9-vec-length-4.h\"\n+\n+/* Check more to ensure vector access with out of bound.  */\n+#define N  144\n+/* Array size used for test function actually.  */\n+#define NF 123\n+\n+#define run(TYPE)                                                              \\\n+  {                                                                            \\\n+    unsigned int i = 0;                                                        \\\n+    TYPE a[N], b[N * 2], c[N * 4];                                             \\\n+    for (i = 0; i < N; i++)                                                    \\\n+      {                                                                        \\\n+\ta[i] = i + i % 2;                                                      \\\n+\tb[i * 2] = i * 2 + i % 3;                                              \\\n+\tb[i * 2 + 1] = i * 3 + i % 4;                                          \\\n+\tc[i * 4] = i * 4 + i % 5;                                              \\\n+\tc[i * 4 + 1] = i * 5 + i % 6;                                          \\\n+\tc[i * 4 + 2] = i * 6 + i % 7;                                          \\\n+\tc[i * 4 + 3] = i * 7 + i % 8;                                          \\\n+      }                                                                        \\\n+    test_mv_##TYPE (a, b, c, NF);                                              \\\n+    for (i = 0; i < N; i++)                                                    \\\n+      {                                                                        \\\n+\tTYPE a1 = i + i % 2;                                                   \\\n+\tTYPE b1 = i * 2 + i % 3;                                               \\\n+\tTYPE b2 = i * 3 + i % 4;                                               \\\n+\tTYPE c1 = i * 4 + i % 5;                                               \\\n+\tTYPE c2 = i * 5 + i % 6;                                               \\\n+\tTYPE c3 = i * 6 + i % 7;                                               \\\n+\tTYPE c4 = i * 7 + i % 8;                                               \\\n+                                                                               \\\n+\tTYPE exp_a = a1;                                                       \\\n+\tTYPE exp_b1 = b1;                                                      \\\n+\tTYPE exp_b2 = b2;                                                      \\\n+\tTYPE exp_c1 = c1;                                                      \\\n+\tTYPE exp_c2 = c2;                                                      \\\n+\tTYPE exp_c3 = c3;                                                      \\\n+\tTYPE exp_c4 = c4;                                                      \\\n+\tif (i < NF)                                                            \\\n+\t  {                                                                    \\\n+\t    exp_a += 1;                                                        \\\n+\t    exp_b1 += 2;                                                       \\\n+\t    exp_b2 += 3;                                                       \\\n+\t    exp_c1 += 4;                                                       \\\n+\t    exp_c2 += 5;                                                       \\\n+\t    exp_c3 += 6;                                                       \\\n+\t    exp_c4 += 7;                                                       \\\n+\t  }                                                                    \\\n+\tif (a[i] != exp_a || b[i * 2] != exp_b1 || b[i * 2 + 1] != exp_b2      \\\n+\t    || c[i * 4] != exp_c1 || c[i * 4 + 1] != exp_c2                    \\\n+\t    || c[i * 4 + 2] != exp_c3 || c[i * 4 + 3] != exp_c4)               \\\n+\t  __builtin_abort ();                                                  \\\n+      }                                                                        \\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (run)\n+  return 0;\n+}"}, {"sha": "ca4b3d563513e4d2ca0e544b7d24b7f88179654d", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-run-5.h", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-run-5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-run-5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-run-5.h?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,45 @@\n+#include \"p9-vec-length-5.h\"\n+\n+/* Check more to ensure vector access with out of bound.  */\n+#define N 155\n+/* Array size used for test function actually.  */\n+#define NF 127\n+\n+#define run(TYPE1, TYPE2)                                                      \\\n+  {                                                                            \\\n+    unsigned int i = 0;                                                        \\\n+    TYPE1 a[N * 2];                                                            \\\n+    TYPE2 b[N * 2];                                                            \\\n+    for (i = 0; i < N; i++)                                                    \\\n+      {                                                                        \\\n+\ta[i * 2] = i * 2 + i % 3;                                              \\\n+\ta[i * 2 + 1] = i * 3 + i % 4;                                          \\\n+\tb[i * 2] = i * 7 + i / 5;                                              \\\n+\tb[i * 2 + 1] = i * 8 + i / 6;                                          \\\n+      }                                                                        \\\n+    test_mv_##TYPE1##TYPE2 (a, b, NF);                                         \\\n+    for (i = 0; i < N; i++)                                                    \\\n+      {                                                                        \\\n+\tTYPE1 exp_a1 = i * 2 + i % 3;                                          \\\n+\tTYPE1 exp_a2 = i * 3 + i % 4;                                          \\\n+\tTYPE2 exp_b1 = i * 7 + i / 5;                                          \\\n+\tTYPE2 exp_b2 = i * 8 + i / 6;                                          \\\n+\tif (i < NF)                                                            \\\n+\t  {                                                                    \\\n+\t    exp_a1 += 1;                                                        \\\n+\t    exp_a2 += 2;                                                       \\\n+\t    exp_b1 += 3;                                                       \\\n+\t    exp_b2 += 4;                                                       \\\n+\t  }                                                                    \\\n+\tif (a[i * 2] != exp_a1 || a[i * 2 + 1] != exp_a2 || b[i * 2] != exp_b1 \\\n+\t    || b[i * 2 + 1] != exp_b2)                                         \\\n+\t  __builtin_abort ();                                                  \\\n+      }                                                                        \\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL2 (run)\n+  return 0;\n+}"}, {"sha": "814e4059bdf5d87420a5260e668ce0ba0fa355d8", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-run-6.h", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-run-6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-run-6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-run-6.h?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,52 @@\n+#include \"p9-vec-length-6.h\"\n+\n+/* Check more to ensure vector access with out of bound.  */\n+#define N 275\n+/* Array size used for test function actually.  */\n+#define NF 255\n+\n+#define run(TYPE1, TYPE2)                                                      \\\n+  {                                                                            \\\n+    unsigned int i = 0;                                                        \\\n+    TYPE1 a[N * 2];                                                            \\\n+    TYPE2 b[N * 4];                                                            \\\n+    for (i = 0; i < N; i++)                                                    \\\n+      {                                                                        \\\n+\ta[i * 2] = i * 2 + i % 3;                                              \\\n+\ta[i * 2 + 1] = i * 3 + i % 4;                                          \\\n+\tb[i * 4] = i * 4 + i / 5;                                              \\\n+\tb[i * 4 + 1] = i * 5 + i / 6;                                          \\\n+\tb[i * 4 + 2] = i * 6 + i / 7;                                          \\\n+\tb[i * 4 + 3] = i * 7 + i / 8;                                          \\\n+      }                                                                        \\\n+    test_mv_##TYPE1##TYPE2 (a, b, NF);                                         \\\n+    for (i = 0; i < N; i++)                                                    \\\n+      {                                                                        \\\n+\tTYPE1 exp_a1 = i * 2 + i % 3;                                          \\\n+\tTYPE1 exp_a2 = i * 3 + i % 4;                                          \\\n+\tTYPE2 exp_b1 = i * 4 + i / 5;                                          \\\n+\tTYPE2 exp_b2 = i * 5 + i / 6;                                          \\\n+\tTYPE2 exp_b3 = i * 6 + i / 7;                                          \\\n+\tTYPE2 exp_b4 = i * 7 + i / 8;                                          \\\n+\tif (i < NF)                                                            \\\n+\t  {                                                                    \\\n+\t    exp_a1 += 1;                                                       \\\n+\t    exp_a2 += 2;                                                       \\\n+\t    exp_b1 += 3;                                                       \\\n+\t    exp_b2 += 4;                                                       \\\n+\t    exp_b3 += 5;                                                       \\\n+\t    exp_b4 += 6;                                                       \\\n+\t  }                                                                    \\\n+\tif (a[i * 2] != exp_a1 || a[i * 2 + 1] != exp_a2 || b[i * 4] != exp_b1 \\\n+\t    || b[i * 4 + 1] != exp_b2 || b[i * 4 + 2] != exp_b3                \\\n+\t    || b[i * 4 + 3] != exp_b4)                                         \\\n+\t  __builtin_abort ();                                                  \\\n+      }                                                                        \\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL2 (run)\n+  return 0;\n+}"}, {"sha": "31280bf8a16e12cc4a4d7b7606197bd7b3dee130", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-run-7.h", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-run-7.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-run-7.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-run-7.h?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,16 @@\n+#include \"p9-vec-length-7.h\"\n+\n+#define run(TYPE)                                                              \\\n+  {                                                                            \\\n+    unsigned int i = 0;                                                        \\\n+    test_npeel_##TYPE();                                                       \\\n+    for (int i = 0; i < N; ++i) {                                              \\\n+      if (x_##TYPE[i] != (i < START || i >= END ? 0 : (i - START)))            \\\n+        __builtin_abort();                                                     \\\n+    }                                                                          \\\n+  }\n+\n+int main() {\n+  TEST_ALL(run)\n+  return 0;\n+}"}, {"sha": "aedbc3df3aa79ebdade2477057ad0149dd4f79ad", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-run-8.h", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-run-8.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-run-8.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-run-8.h?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,27 @@\n+#include \"p9-vec-length-8.h\"\n+\n+#define run(TYPE)                                                              \\\n+  {                                                                            \\\n+    unsigned int i = 0;                                                        \\\n+                                                                               \\\n+    TYPE out_##TYPE[N];                                                        \\\n+    TYPE in_##TYPE[N * 2];                                                     \\\n+    for (int i = 0; i < N; ++i) {                                              \\\n+      out_##TYPE[i] = i * 7 / 2;                                               \\\n+    }                                                                          \\\n+    for (int i = 0; i < N * 2; ++i) {                                          \\\n+      in_##TYPE[i] = i * 9 / 2;                                                \\\n+    }                                                                          \\\n+                                                                               \\\n+    test_##TYPE(out_##TYPE, in_##TYPE);                                        \\\n+    for (int i = 0; i < N; ++i) {                                              \\\n+      TYPE expected = i * 7 / 2 + in_##TYPE[i * 2];                            \\\n+      if (out_##TYPE[i] != expected)                                           \\\n+        __builtin_abort();                                                     \\\n+    }                                                                          \\\n+  }\n+\n+int main(void) {\n+  TEST_ALL(run)\n+  return 0;\n+}"}, {"sha": "83418b0b6418a5f3f3a269c11f7356c489fd0b7a", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length.h", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41efe9812a5df22201c3a684ff2fb838d6dc9de6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length.h?ref=41efe9812a5df22201c3a684ff2fb838d6dc9de6", "patch": "@@ -0,0 +1,14 @@\n+#include <stdint.h>\n+\n+#define TEST_ALL(T)                                                            \\\n+  T (int8_t)                                                                   \\\n+  T (uint8_t)                                                                  \\\n+  T (int16_t)                                                                  \\\n+  T (uint16_t)                                                                 \\\n+  T (int32_t)                                                                  \\\n+  T (uint32_t)                                                                 \\\n+  T (int64_t)                                                                  \\\n+  T (uint64_t)                                                                 \\\n+  T (float)                                                                    \\\n+  T (double)\n+"}]}