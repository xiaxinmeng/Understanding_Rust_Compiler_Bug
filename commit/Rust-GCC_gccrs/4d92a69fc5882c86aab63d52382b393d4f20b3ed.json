{"sha": "4d92a69fc5882c86aab63d52382b393d4f20b3ed", "node_id": "C_kwDOANBUbNoAKDRkOTJhNjlmYzU4ODJjODZhYWI2M2Q1MjM4MmIzOTNkNGYyMGIzZWQ", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-10-18T17:52:18Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-10-18T22:01:22Z"}, "message": "Process EH edges again and call get_tree_range on non gimple_range_ssa_p names.\n\n\tPR tree-optimization/102796\n\tgcc/\n\t* gimple-range.cc (gimple_ranger::range_on_edge): Process EH edges\n\tnormally.  Return get_tree_range for non gimple_range_ssa_p names.\n\t(gimple_ranger::range_of_stmt): Use get_tree_range for non\n\tgimple_range_ssa_p names.\n\n\tgcc/testsuite/\n\t* g++.dg/pr102796.C: New.", "tree": {"sha": "8ba53b969f6e45f77f0f1b8ae087c2215b43a155", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ba53b969f6e45f77f0f1b8ae087c2215b43a155"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d92a69fc5882c86aab63d52382b393d4f20b3ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d92a69fc5882c86aab63d52382b393d4f20b3ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d92a69fc5882c86aab63d52382b393d4f20b3ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d92a69fc5882c86aab63d52382b393d4f20b3ed/comments", "author": null, "committer": null, "parents": [{"sha": "38733234024697d2144613c4a992e970f40afad8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38733234024697d2144613c4a992e970f40afad8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38733234024697d2144613c4a992e970f40afad8"}], "stats": {"total": 28, "additions": 23, "deletions": 5}, "files": [{"sha": "93d6da66ccb6da1ffa8d99dc2e8000951a476b83", "filename": "gcc/gimple-range.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d92a69fc5882c86aab63d52382b393d4f20b3ed/gcc%2Fgimple-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d92a69fc5882c86aab63d52382b393d4f20b3ed/gcc%2Fgimple-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range.cc?ref=4d92a69fc5882c86aab63d52382b393d4f20b3ed", "patch": "@@ -180,9 +180,9 @@ gimple_ranger::range_on_edge (irange &r, edge e, tree name)\n   int_range_max edge_range;\n   gcc_checking_assert (irange::supports_type_p (TREE_TYPE (name)));\n \n-  // Do not process values along abnormal or EH edges.\n-  if (e->flags & (EDGE_ABNORMAL|EDGE_EH))\n-    return false;\n+  // Do not process values along abnormal edges.\n+  if (e->flags & EDGE_ABNORMAL)\n+    return get_tree_range (r, name, NULL);\n \n   unsigned idx;\n   if ((idx = tracer.header (\"range_on_edge (\")))\n@@ -203,7 +203,7 @@ gimple_ranger::range_on_edge (irange &r, edge e, tree name)\n \n   bool res = true;\n   if (!gimple_range_ssa_p (name))\n-    res = range_of_expr (r, name);\n+    return get_tree_range (r, name, NULL);\n   else\n     {\n       range_on_exit (r, e->src, name);\n@@ -258,7 +258,7 @@ gimple_ranger::range_of_stmt (irange &r, gimple *s, tree name)\n   if (!name)\n     res = fold_range_internal (r, s, NULL_TREE);\n   else if (!gimple_range_ssa_p (name))\n-    res = false;\n+    res = get_tree_range (r, name, NULL);\n   // Check if the stmt has already been processed, and is not stale.\n   else if (m_cache.get_non_stale_global_range (r, name))\n     {"}, {"sha": "6ad1008922fd29b2dc2f0399751996d1c64e1eb8", "filename": "gcc/testsuite/g++.dg/pr102796.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d92a69fc5882c86aab63d52382b393d4f20b3ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr102796.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d92a69fc5882c86aab63d52382b393d4f20b3ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr102796.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr102796.C?ref=4d92a69fc5882c86aab63d52382b393d4f20b3ed", "patch": "@@ -0,0 +1,18 @@\n+// { dg-do compile }\n+// { dg-options \"-O3 -fno-tree-ccp -fno-tree-fre -fno-tree-forwprop -std=c++17\" }\n+\n+namespace std {\n+template <class _E>\n+struct initializer_list {\n+  const int* __begin_;\n+  decltype(sizeof(int)) __size_;\n+};\n+}  // namespace std\n+struct destroyme1 {};\n+struct witharg1 {\n+  witharg1(const destroyme1&);\n+  ~witharg1();\n+};\n+std::initializer_list globalInitList2 = {witharg1(destroyme1()),\n+                                         witharg1(destroyme1())};\n+"}]}