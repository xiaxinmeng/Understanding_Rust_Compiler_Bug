{"sha": "329122862022114caf79d97afe2cc89cc8c6412d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI5MTIyODYyMDIyMTE0Y2FmNzlkOTdhZmUyY2M4OWNjOGM2NDEyZA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-05-16T16:55:16Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-05-16T16:55:16Z"}, "message": "c-common.c (c_common_reswords): Add _Static_assert for C.\n\n\t* c-common.c (c_common_reswords): Add _Static_assert for C.\n\t* c-parser.c (c_token_starts_declaration,\n\tc_parser_next_token_starts_declaration,\n\tc_parser_static_assert_declaration_no_semi,\n\tc_parser_static_assert_declaration): New.\n\t(c_parser_declaration_or_fndef): Add parameter static_assert_ok.\n\tHandle static assertions if static_assert_ok.\n\t(c_parser_external_declaration, c_parser_declaration_or_fndef,\n\tc_parser_compound_statement_nostart, c_parser_label,\n\tc_parser_for_statement, c_parser_objc_methodprotolist,\n\tc_parser_omp_for_loop): All callers of\n\tc_parser_declaration_or_fndef changed.\n\t(c_parser_struct_declaration): Handle static assertions.\n\t(c_parser_compound_statement_nostart): Use\n\tc_parser_next_token_starts_declaration and\n\tc_token_starts_declaration to detect start of declarations.\n\t(c_parser_label, c_parser_for_statement, c_parser_omp_for_loop):\n\tLikewise.\n\ntestsuite:\n\t* gcc.dg/c1x-static-assert-1.c, gcc.dg/c1x-static-assert-2.c,\n\tgcc.dg/c1x-static-assert-3.c, gcc.dg/c1x-static-assert-4.c,\n\tgcc.dg/c1x-static-assert-5.c, gcc.dg/c1x-static-assert-6.c,\n\tgcc.dg/c90-static-assert-1.c, gcc.dg/c99-static-assert-1.c: New\n\ttests.\n\nFrom-SVN: r159459", "tree": {"sha": "e0f5b5187396c84005583dd5264ebf11e67f3a6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0f5b5187396c84005583dd5264ebf11e67f3a6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/329122862022114caf79d97afe2cc89cc8c6412d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/329122862022114caf79d97afe2cc89cc8c6412d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/329122862022114caf79d97afe2cc89cc8c6412d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/329122862022114caf79d97afe2cc89cc8c6412d/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3ca07e3be6e250a8213fd95c8bb738231d3fc51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3ca07e3be6e250a8213fd95c8bb738231d3fc51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3ca07e3be6e250a8213fd95c8bb738231d3fc51"}], "stats": {"total": 360, "additions": 335, "deletions": 25}, "files": [{"sha": "94cb08b95b5627144133e6306985e2cdaf067067", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329122862022114caf79d97afe2cc89cc8c6412d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329122862022114caf79d97afe2cc89cc8c6412d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=329122862022114caf79d97afe2cc89cc8c6412d", "patch": "@@ -1,3 +1,24 @@\n+2010-05-16  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.c (c_common_reswords): Add _Static_assert for C.\n+\t* c-parser.c (c_token_starts_declaration,\n+\tc_parser_next_token_starts_declaration,\n+\tc_parser_static_assert_declaration_no_semi,\n+\tc_parser_static_assert_declaration): New.\n+\t(c_parser_declaration_or_fndef): Add parameter static_assert_ok.\n+\tHandle static assertions if static_assert_ok.\n+\t(c_parser_external_declaration, c_parser_declaration_or_fndef,\n+\tc_parser_compound_statement_nostart, c_parser_label,\n+\tc_parser_for_statement, c_parser_objc_methodprotolist,\n+\tc_parser_omp_for_loop): All callers of\n+\tc_parser_declaration_or_fndef changed.\n+\t(c_parser_struct_declaration): Handle static assertions.\n+\t(c_parser_compound_statement_nostart): Use\n+\tc_parser_next_token_starts_declaration and\n+\tc_token_starts_declaration to detect start of declarations.\n+\t(c_parser_label, c_parser_for_statement, c_parser_omp_for_loop):\n+\tLikewise.\n+\n 2010-05-16  Anatoly Sokolov  <aesok@post.ru>\n \n \t* config/mmix/mmix.h (FUNCTION_VALUE, FUNCTION_OUTGOING_VALUE,"}, {"sha": "942961d95b2565104455ee8f5f51304fbd6589ba", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329122862022114caf79d97afe2cc89cc8c6412d/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329122862022114caf79d97afe2cc89cc8c6412d/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=329122862022114caf79d97afe2cc89cc8c6412d", "patch": "@@ -563,6 +563,7 @@ const struct c_common_resword c_common_reswords[] =\n   { \"_Fract\",           RID_FRACT,     D_CONLY | D_EXT },\n   { \"_Accum\",           RID_ACCUM,     D_CONLY | D_EXT },\n   { \"_Sat\",             RID_SAT,       D_CONLY | D_EXT },\n+  { \"_Static_assert\",   RID_STATIC_ASSERT, D_CONLY },\n   { \"__FUNCTION__\",\tRID_FUNCTION_NAME, 0 },\n   { \"__PRETTY_FUNCTION__\", RID_PRETTY_FUNCTION_NAME, 0 },\n   { \"__alignof\",\tRID_ALIGNOF,\t0 },"}, {"sha": "dc3f26e5a2ca67260a625bd0e261ae585985c556", "filename": "gcc/c-parser.c", "status": "modified", "additions": 162, "deletions": 25, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329122862022114caf79d97afe2cc89cc8c6412d/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329122862022114caf79d97afe2cc89cc8c6412d/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=329122862022114caf79d97afe2cc89cc8c6412d", "patch": "@@ -494,6 +494,19 @@ c_token_starts_declspecs (c_token *token)\n     }\n }\n \n+\n+/* Return true if TOKEN can start declaration specifiers or a static\n+   assertion, false otherwise.  */\n+static bool\n+c_token_starts_declaration (c_token *token)\n+{\n+  if (c_token_starts_declspecs (token)\n+      || token->keyword == RID_STATIC_ASSERT)\n+    return true;\n+  else\n+    return false;\n+}\n+\n /* Return true if the next token from PARSER can start declaration\n    specifiers, false otherwise.  */\n static inline bool\n@@ -503,6 +516,15 @@ c_parser_next_token_starts_declspecs (c_parser *parser)\n   return c_token_starts_declspecs (token);\n }\n \n+/* Return true if the next token from PARSER can start declaration\n+   specifiers or a static assertion, false otherwise.  */\n+static inline bool\n+c_parser_next_token_starts_declaration (c_parser *parser)\n+{\n+  c_token *token = c_parser_peek_token (parser);\n+  return c_token_starts_declaration (token);\n+}\n+\n /* Return a pointer to the next-but-one token from PARSER, reading it\n    in if necessary.  The next token is already read in.  */\n \n@@ -883,7 +905,10 @@ typedef enum c_dtr_syn {\n \n static void c_parser_external_declaration (c_parser *);\n static void c_parser_asm_definition (c_parser *);\n-static void c_parser_declaration_or_fndef (c_parser *, bool, bool, bool, bool);\n+static void c_parser_declaration_or_fndef (c_parser *, bool, bool, bool,\n+\t\t\t\t\t   bool, bool);\n+static void c_parser_static_assert_declaration_no_semi (c_parser *);\n+static void c_parser_static_assert_declaration (c_parser *);\n static void c_parser_declspecs (c_parser *, struct c_declspecs *, bool, bool,\n \t\t\t\tbool);\n static struct c_typespec c_parser_enum_specifier (c_parser *);\n@@ -1101,7 +1126,7 @@ c_parser_external_declaration (c_parser *parser)\n       /* A declaration or a function definition.  We can only tell\n \t which after parsing the declaration specifiers, if any, and\n \t the first declarator.  */\n-      c_parser_declaration_or_fndef (parser, true, true, false, true);\n+      c_parser_declaration_or_fndef (parser, true, true, true, false, true);\n       break;\n     }\n }\n@@ -1110,18 +1135,21 @@ c_parser_external_declaration (c_parser *parser)\n /* Parse a declaration or function definition (C90 6.5, 6.7.1, C99\n    6.7, 6.9.1).  If FNDEF_OK is true, a function definition is\n    accepted; otherwise (old-style parameter declarations) only other\n-   declarations are accepted.  If NESTED is true, we are inside a\n-   function or parsing old-style parameter declarations; any functions\n-   encountered are nested functions and declaration specifiers are\n-   required; otherwise we are at top level and functions are normal\n-   functions and declaration specifiers may be optional.  If EMPTY_OK\n-   is true, empty declarations are OK (subject to all other\n-   constraints); otherwise (old-style parameter declarations) they are\n-   diagnosed.  If START_ATTR_OK is true, the declaration specifiers\n-   may start with attributes; otherwise they may not.\n+   declarations are accepted.  If STATIC_ASSERT_OK is true, a static\n+   assertion is accepted; otherwise (old-style parameter declarations)\n+   it is not.  If NESTED is true, we are inside a function or parsing\n+   old-style parameter declarations; any functions encountered are\n+   nested functions and declaration specifiers are required; otherwise\n+   we are at top level and functions are normal functions and\n+   declaration specifiers may be optional.  If EMPTY_OK is true, empty\n+   declarations are OK (subject to all other constraints); otherwise\n+   (old-style parameter declarations) they are diagnosed.  If\n+   START_ATTR_OK is true, the declaration specifiers may start with\n+   attributes; otherwise they may not.\n \n    declaration:\n      declaration-specifiers init-declarator-list[opt] ;\n+     static_assert-declaration\n \n    function-definition:\n      declaration-specifiers[opt] declarator declaration-list[opt]\n@@ -1165,7 +1193,8 @@ c_parser_external_declaration (c_parser *parser)\n      threadprivate-directive  */\n \n static void\n-c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok, bool empty_ok,\n+c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n+\t\t\t       bool static_assert_ok, bool empty_ok,\n \t\t\t       bool nested, bool start_attr_ok)\n {\n   struct c_declspecs *specs;\n@@ -1174,6 +1203,12 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok, bool empty_ok,\n   bool diagnosed_no_specs = false;\n   location_t here = c_parser_peek_token (parser)->location;\n \n+  if (static_assert_ok\n+      && c_parser_next_token_is_keyword (parser, RID_STATIC_ASSERT))\n+    {\n+      c_parser_static_assert_declaration (parser);\n+      return;\n+    }\n   specs = build_null_declspecs ();\n   c_parser_declspecs (parser, specs, true, true, start_attr_ok);\n   if (parser->error)\n@@ -1332,7 +1367,8 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok, bool empty_ok,\n \t function definitions either.  */\n       while (c_parser_next_token_is_not (parser, CPP_EOF)\n \t     && c_parser_next_token_is_not (parser, CPP_OPEN_BRACE))\n-\tc_parser_declaration_or_fndef (parser, false, false, true, false);\n+\tc_parser_declaration_or_fndef (parser, false, false, false,\n+\t\t\t\t       true, false);\n       store_parm_decls ();\n       DECL_STRUCT_FUNCTION (current_function_decl)->function_start_locus\n \t= c_parser_peek_token (parser)->location;\n@@ -1375,6 +1411,97 @@ c_parser_asm_definition (c_parser *parser)\n   c_parser_skip_until_found (parser, CPP_SEMICOLON, \"expected %<;%>\");\n }\n \n+/* Parse a static assertion (C1X N1425 6.7.10).\n+\n+   static_assert-declaration:\n+     static_assert-declaration-no-semi ;\n+*/\n+\n+static void\n+c_parser_static_assert_declaration (c_parser *parser)\n+{\n+  c_parser_static_assert_declaration_no_semi (parser);\n+  if (parser->error\n+      || !c_parser_require (parser, CPP_SEMICOLON, \"expected %<;%>\"))\n+    c_parser_skip_to_end_of_block_or_statement (parser);\n+}\n+\n+/* Parse a static assertion (C1X N1425 6.7.10), without the trailing\n+   semicolon.\n+\n+   static_assert-declaration-no-semi:\n+     _Static_assert ( constant-expression , string-literal )\n+*/\n+\n+static void\n+c_parser_static_assert_declaration_no_semi (c_parser *parser)\n+{\n+  location_t assert_loc, value_loc;\n+  tree value;\n+  tree string;\n+\n+  gcc_assert (c_parser_next_token_is_keyword (parser, RID_STATIC_ASSERT));\n+  assert_loc = c_parser_peek_token (parser)->location;\n+  if (!flag_isoc1x)\n+    {\n+      if (flag_isoc99)\n+\tpedwarn (assert_loc, OPT_pedantic,\n+\t\t \"ISO C99 does not support %<_Static_assert%>\");\n+      else\n+\tpedwarn (assert_loc, OPT_pedantic,\n+\t\t \"ISO C90 does not support %<_Static_assert%>\");\n+    }\n+  c_parser_consume_token (parser);\n+  if (!c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n+    return;\n+  value_loc = c_parser_peek_token (parser)->location;\n+  value = c_parser_expr_no_commas (parser, NULL).value;\n+  parser->lex_untranslated_string = true;\n+  if (!c_parser_require (parser, CPP_COMMA, \"expected %<,%>\"))\n+    {\n+      parser->lex_untranslated_string = false;\n+      return;\n+    }\n+  switch (c_parser_peek_token (parser)->type)\n+    {\n+    case CPP_STRING:\n+    case CPP_STRING16:\n+    case CPP_STRING32:\n+    case CPP_WSTRING:\n+    case CPP_UTF8STRING:\n+      string = c_parser_peek_token (parser)->value;\n+      c_parser_consume_token (parser);\n+      parser->lex_untranslated_string = false;\n+      break;\n+    default:\n+      c_parser_error (parser, \"expected string literal\");\n+      parser->lex_untranslated_string = false;\n+      return;\n+    }\n+  c_parser_require (parser, CPP_CLOSE_PAREN, \"expected %<)%>\");\n+\n+  if (!INTEGRAL_TYPE_P (TREE_TYPE (value)))\n+    {\n+      error_at (value_loc, \"expression in static assertion is not an integer\");\n+      return;\n+    }\n+  if (TREE_CODE (value) != INTEGER_CST)\n+    {\n+      value = c_fully_fold (value, false, NULL);\n+      if (TREE_CODE (value) == INTEGER_CST)\n+\tpedwarn (value_loc, OPT_pedantic, \"expression in static assertion \"\n+\t\t \"is not an integer constant expression\");\n+    }\n+  if (TREE_CODE (value) != INTEGER_CST)\n+    {\n+      error_at (value_loc, \"expression in static assertion is not constant\");\n+      return;\n+    }\n+  constant_expression_warning (value);\n+  if (integer_zerop (value))\n+    error_at (assert_loc, \"static assertion failed: %E\", string);\n+}\n+\n /* Parse some declaration specifiers (possibly none) (C90 6.5, C99\n    6.7), adding them to SPECS (which may already include some).\n    Storage class specifiers are accepted iff SCSPEC_OK; type\n@@ -1973,6 +2100,7 @@ c_parser_struct_or_union_specifier (c_parser *parser)\n \n    struct-declaration:\n      specifier-qualifier-list struct-declarator-list\n+     static_assert-declaration-no-semi\n \n    specifier-qualifier-list:\n      type-specifier specifier-qualifier-list[opt]\n@@ -2017,6 +2145,11 @@ c_parser_struct_declaration (c_parser *parser)\n       restore_extension_diagnostics (ext);\n       return decl;\n     }\n+  if (c_parser_next_token_is_keyword (parser, RID_STATIC_ASSERT))\n+    {\n+      c_parser_static_assert_declaration_no_semi (parser);\n+      return NULL_TREE;\n+    }\n   specs = build_null_declspecs ();\n   decl_loc = c_parser_peek_token (parser)->location;\n   c_parser_declspecs (parser, specs, false, true, true);\n@@ -3505,11 +3638,11 @@ c_parser_compound_statement_nostart (c_parser *parser)\n \t  c_parser_label (parser);\n \t}\n       else if (!last_label\n-\t       && c_parser_next_token_starts_declspecs (parser))\n+\t       && c_parser_next_token_starts_declaration (parser))\n \t{\n \t  last_label = false;\n \t  mark_valid_location_for_stdc_pragma (false);\n-\t  c_parser_declaration_or_fndef (parser, true, true, true, true);\n+\t  c_parser_declaration_or_fndef (parser, true, true, true, true, true);\n \t  if (last_stmt)\n \t    pedwarn_c90 (loc,\n \t\t\t (pedantic && !flag_isoc99)\n@@ -3529,14 +3662,15 @@ c_parser_compound_statement_nostart (c_parser *parser)\n \t\t && (c_parser_peek_2nd_token (parser)->keyword\n \t\t     == RID_EXTENSION))\n \t    c_parser_consume_token (parser);\n-\t  if (c_token_starts_declspecs (c_parser_peek_2nd_token (parser)))\n+\t  if (c_token_starts_declaration (c_parser_peek_2nd_token (parser)))\n \t    {\n \t      int ext;\n \t      ext = disable_extension_diagnostics ();\n \t      c_parser_consume_token (parser);\n \t      last_label = false;\n \t      mark_valid_location_for_stdc_pragma (false);\n-\t      c_parser_declaration_or_fndef (parser, true, true, true, true);\n+\t      c_parser_declaration_or_fndef (parser, true, true, true, true,\n+\t\t\t\t\t     true);\n \t      /* Following the old parser, __extension__ does not\n \t\t disable this diagnostic.  */\n \t      restore_extension_diagnostics (ext);\n@@ -3666,14 +3800,15 @@ c_parser_label (c_parser *parser)\n     }\n   if (label)\n     {\n-      if (c_parser_next_token_starts_declspecs (parser)\n+      if (c_parser_next_token_starts_declaration (parser)\n \t  && !(c_parser_next_token_is (parser, CPP_NAME)\n \t       && c_parser_peek_2nd_token (parser)->type == CPP_COLON))\n \t{\n \t  error_at (c_parser_peek_token (parser)->location,\n \t\t    \"a label can only be part of a statement and \"\n \t\t    \"a declaration is not a statement\");\n \t  c_parser_declaration_or_fndef (parser, /*fndef_ok*/ false,\n+\t\t\t\t\t /*static_assert_ok*/ true,\n \t\t\t\t\t /*nested*/ true, /*empty_ok*/ false,\n \t\t\t\t\t /*start_attr_ok*/ true);\n \t}\n@@ -4210,9 +4345,9 @@ c_parser_for_statement (c_parser *parser)\n \t  c_parser_consume_token (parser);\n \t  c_finish_expr_stmt (loc, NULL_TREE);\n \t}\n-      else if (c_parser_next_token_starts_declspecs (parser))\n+      else if (c_parser_next_token_starts_declaration (parser))\n \t{\n-\t  c_parser_declaration_or_fndef (parser, true, true, true, true);\n+\t  c_parser_declaration_or_fndef (parser, true, true, true, true, true);\n \t  check_for_loop_decls (for_loc);\n \t}\n       else if (c_parser_next_token_is_keyword (parser, RID_EXTENSION))\n@@ -4225,12 +4360,13 @@ c_parser_for_statement (c_parser *parser)\n \t\t && (c_parser_peek_2nd_token (parser)->keyword\n \t\t     == RID_EXTENSION))\n \t    c_parser_consume_token (parser);\n-\t  if (c_token_starts_declspecs (c_parser_peek_2nd_token (parser)))\n+\t  if (c_token_starts_declaration (c_parser_peek_2nd_token (parser)))\n \t    {\n \t      int ext;\n \t      ext = disable_extension_diagnostics ();\n \t      c_parser_consume_token (parser);\n-\t      c_parser_declaration_or_fndef (parser, true, true, true, true);\n+\t      c_parser_declaration_or_fndef (parser, true, true, true, true,\n+\t\t\t\t\t     true);\n \t      restore_extension_diagnostics (ext);\n \t      check_for_loop_decls (for_loc);\n \t    }\n@@ -6518,7 +6654,8 @@ c_parser_objc_methodprotolist (c_parser *parser)\n \tdefault:\n \t  if (c_parser_next_token_is_keyword (parser, RID_AT_END))\n \t    return;\n-\t  c_parser_declaration_or_fndef (parser, false, true, false, true);\n+\t  c_parser_declaration_or_fndef (parser, false, false, true,\n+\t\t\t\t\t false, true);\n \t  break;\n \t}\n     }\n@@ -8039,12 +8176,12 @@ c_parser_omp_for_loop (location_t loc,\n \tgoto pop_scopes;\n \n       /* Parse the initialization declaration or expression.  */\n-      if (c_parser_next_token_starts_declspecs (parser))\n+      if (c_parser_next_token_starts_declaration (parser))\n \t{\n \t  if (i > 0)\n \t    for_block\n \t      = tree_cons (NULL, c_begin_compound_stmt (true), for_block);\n-\t  c_parser_declaration_or_fndef (parser, true, true, true, true);\n+\t  c_parser_declaration_or_fndef (parser, true, true, true, true, true);\n \t  decl = check_for_loop_decls (for_loc);\n \t  if (decl == NULL)\n \t    goto error_init;"}, {"sha": "64242be9392881a855ed08320521e1914891136d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329122862022114caf79d97afe2cc89cc8c6412d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329122862022114caf79d97afe2cc89cc8c6412d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=329122862022114caf79d97afe2cc89cc8c6412d", "patch": "@@ -1,3 +1,11 @@\n+2010-05-16  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c1x-static-assert-1.c, gcc.dg/c1x-static-assert-2.c,\n+\tgcc.dg/c1x-static-assert-3.c, gcc.dg/c1x-static-assert-4.c,\n+\tgcc.dg/c1x-static-assert-5.c, gcc.dg/c1x-static-assert-6.c,\n+\tgcc.dg/c90-static-assert-1.c, gcc.dg/c99-static-assert-1.c: New\n+\ttests.\n+\n 2010-05-15  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/eh/spec10.C: New."}, {"sha": "bf7aa59451179c098e3dd24a45f69de1faa6bf60", "filename": "gcc/testsuite/gcc.dg/c1x-static-assert-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329122862022114caf79d97afe2cc89cc8c6412d/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-static-assert-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329122862022114caf79d97afe2cc89cc8c6412d/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-static-assert-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-static-assert-1.c?ref=329122862022114caf79d97afe2cc89cc8c6412d", "patch": "@@ -0,0 +1,41 @@\n+/* Test C1X static assertions.  Valid assertions.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c1x -pedantic-errors\" } */\n+\n+_Static_assert (1, \"foo\");\n+\n+enum e { E0, E1 };\n+\n+_Static_assert (E1, L\"bar\");\n+\n+_Static_assert (-1, \"foo\" L\"bar\");\n+\n+struct s\n+{\n+  int a;\n+  _Static_assert (3, \"s\");\n+  int b;\n+};\n+\n+union u\n+{\n+  int i;\n+  _Static_assert ((int)1.0, L\"\");\n+};\n+\n+void\n+f (void)\n+{\n+  int i;\n+  i = 1;\n+  _Static_assert (0 + 1, \"f\");\n+  i = 2;\n+}\n+\n+void\n+g (void)\n+{\n+  int i = 0;\n+  for (_Static_assert (1, \"\"); i < 10; i++)\n+    ;\n+}"}, {"sha": "9a48ca7e861111c23def6999109f1025cb50eda0", "filename": "gcc/testsuite/gcc.dg/c1x-static-assert-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329122862022114caf79d97afe2cc89cc8c6412d/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-static-assert-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329122862022114caf79d97afe2cc89cc8c6412d/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-static-assert-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-static-assert-2.c?ref=329122862022114caf79d97afe2cc89cc8c6412d", "patch": "@@ -0,0 +1,41 @@\n+/* Test C1X static assertions.  Failed assertions.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c1x -pedantic-errors\" } */\n+\n+_Static_assert (0, \"assert1\"); /* { dg-error \"static assertion failed: \\\"assert1\\\"\" } */\n+\n+enum e { E0, E1 };\n+\n+_Static_assert (E0, L\"assert2\"); /* { dg-error \"static assertion failed: \\\"assert2\\\"\" } */\n+\n+_Static_assert (-0, \"ass\" L\"ert3\"); /* { dg-error \"static assertion failed: \\\"assert3\\\"\" } */\n+\n+struct s\n+{\n+  int a;\n+  _Static_assert (0, \"assert4\"); /* { dg-error \"static assertion failed: \\\"assert4\\\"\" } */\n+  int b;\n+};\n+\n+union u\n+{\n+  int i;\n+  _Static_assert ((int)0.0, L\"assert5\"); /* { dg-error \"static assertion failed: \\\"assert5\\\"\" } */\n+};\n+\n+void\n+f (void)\n+{\n+  int i;\n+  i = 1;\n+  _Static_assert (0 + 0, \"assert6\"); /* { dg-error \"static assertion failed: \\\"assert6\\\"\" } */\n+  i = 2;\n+}\n+\n+void\n+g (void)\n+{\n+  int i = 0;\n+  for (_Static_assert (0, \"assert7\"); i < 10; i++) /* { dg-error \"static assertion failed: \\\"assert7\\\"\" } */\n+    ;\n+}"}, {"sha": "81b504e2ab1ef17cefe2768d3a3d097f4b58b504", "filename": "gcc/testsuite/gcc.dg/c1x-static-assert-3.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329122862022114caf79d97afe2cc89cc8c6412d/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-static-assert-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329122862022114caf79d97afe2cc89cc8c6412d/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-static-assert-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-static-assert-3.c?ref=329122862022114caf79d97afe2cc89cc8c6412d", "patch": "@@ -0,0 +1,28 @@\n+/* Test C1X static assertions.  Invalid assertions.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c1x -pedantic-errors\" } */\n+\n+_Static_assert (__INT_MAX__ * 2, \"overflow\"); /* { dg-warning \"integer overflow in expression\" } */\n+/* { dg-error \"overflow in constant expression\" \"error\" { target *-*-* } 5 } */\n+\n+_Static_assert ((void *)(__SIZE_TYPE__)16, \"non-integer\"); /* { dg-error \"not an integer\" } */\n+\n+_Static_assert (1.0, \"non-integer\"); /* { dg-error \"not an integer\" } */\n+\n+_Static_assert ((int)(1.0 + 1.0), \"non-constant-expression\"); /* { dg-error \"not an integer constant expression\" } */\n+\n+int i;\n+\n+_Static_assert (i, \"non-constant\"); /* { dg-error \"not constant\" } */\n+\n+void\n+f (void)\n+{\n+  int j = 0;\n+  for (_Static_assert (sizeof (struct s { int k; }), \"\"); j < 10; j++) /* { dg-error \"loop initial declaration\" } */\n+    ;\n+}\n+\n+_Static_assert (1, 1); /* { dg-error \"expected\" } */\n+\n+_Static_assert (1, (\"\")); /* { dg-error \"expected\" } */"}, {"sha": "ebc95f5f906debce6e6cda74613c25743a0b503f", "filename": "gcc/testsuite/gcc.dg/c1x-static-assert-4.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329122862022114caf79d97afe2cc89cc8c6412d/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-static-assert-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329122862022114caf79d97afe2cc89cc8c6412d/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-static-assert-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-static-assert-4.c?ref=329122862022114caf79d97afe2cc89cc8c6412d", "patch": "@@ -0,0 +1,13 @@\n+/* Test C1X static assertions.  More invalid assertions.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c1x -pedantic-errors\" } */\n+\n+/* Static assertions not valid in old-style parameter declarations\n+   because declarations there must have declarators.  */\n+\n+void\n+f (i)\n+     int i;\n+     _Static_assert (1, \"\"); /* { dg-error \"expected\" } */\n+{\n+}"}, {"sha": "d4d0821f0e30c027bb9206733382fd4c47d7992a", "filename": "gcc/testsuite/gcc.dg/c1x-static-assert-5.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329122862022114caf79d97afe2cc89cc8c6412d/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-static-assert-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329122862022114caf79d97afe2cc89cc8c6412d/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-static-assert-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-static-assert-5.c?ref=329122862022114caf79d97afe2cc89cc8c6412d", "patch": "@@ -0,0 +1,5 @@\n+/* Test C1X static assertions.  Non-constant-expression without -pedantic.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c1x\" } */\n+\n+_Static_assert ((int)(1.0 + 1.0), \"non-constant-expression\");"}, {"sha": "c544cadc268124efb40fe9cf25e29777e6a23155", "filename": "gcc/testsuite/gcc.dg/c1x-static-assert-6.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329122862022114caf79d97afe2cc89cc8c6412d/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-static-assert-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329122862022114caf79d97afe2cc89cc8c6412d/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-static-assert-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-static-assert-6.c?ref=329122862022114caf79d97afe2cc89cc8c6412d", "patch": "@@ -0,0 +1,5 @@\n+/* Test C1X static assertions.  Non-constant-expression with -pedantic.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c1x -pedantic\" } */\n+\n+_Static_assert ((int)(1.0 + 1.0), \"non-constant-expression\"); /* { dg-warning \"not an integer constant expression\" } */"}, {"sha": "d174ec9b10707836c5f3f6d4770d248903fd0f02", "filename": "gcc/testsuite/gcc.dg/c90-static-assert-1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329122862022114caf79d97afe2cc89cc8c6412d/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-static-assert-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329122862022114caf79d97afe2cc89cc8c6412d/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-static-assert-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-static-assert-1.c?ref=329122862022114caf79d97afe2cc89cc8c6412d", "patch": "@@ -0,0 +1,5 @@\n+/* Test for static assertions not in C90.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n+\n+_Static_assert (1, \"\"); /* { dg-error \"ISO C90 does not support '_Static_assert'\" } */"}, {"sha": "23477360e108c3d78e14d89a4f8f23bfc0f6f7a4", "filename": "gcc/testsuite/gcc.dg/c99-static-assert-1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329122862022114caf79d97afe2cc89cc8c6412d/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-static-assert-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329122862022114caf79d97afe2cc89cc8c6412d/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-static-assert-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-static-assert-1.c?ref=329122862022114caf79d97afe2cc89cc8c6412d", "patch": "@@ -0,0 +1,5 @@\n+/* Test for static assertions not in C99.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+_Static_assert (1, \"\"); /* { dg-error \"ISO C99 does not support '_Static_assert'\" } */"}]}