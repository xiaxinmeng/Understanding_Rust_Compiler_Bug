{"sha": "3c9aabbde58e5c540b0718c0a585e3ca97910317", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M5YWFiYmRlNThlNWM1NDBiMDcxOGMwYTU4NWUzY2E5NzkxMDMxNw==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2014-10-03T19:57:01Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2014-10-03T19:57:01Z"}, "message": "re PR c++/54427 (Expose more vector extensions)\n\n2014-10-03  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR c++/54427\n\tPR c++/57198\n\tPR c++/58845\ngcc/c-family/\n\t* c-common.c (warn_logical_operator): Punt for vectors.\ngcc/cp/\n\t* typeck.c (cp_build_binary_op): save_expr after convert to save\n\tredundant operations.\n\t[TRUTH_ANDIF_EXPR, TRUTH_ORIF_EXPR]: Handle vectors.\n\t(cp_build_unary_op) [TRUTH_NOT_EXPR]: Likewise.\ngcc/\n\t* doc/extend.texi (Vector Extensions): Document &&, ||, ! in C++.\ngcc/testsuite/\n\t* g++.dg/ext/vector9.C: Update, not an error anymore.\n\t* g++.dg/ext/vector27.C: Replace with new test.\n\t* g++.dg/ext/vector28.C: New file.\n\t* g++.dg/other/error23.C: Update to a different error.\n\nFrom-SVN: r215872", "tree": {"sha": "99d9326c06a03358bcb02cde8335ee8324fd1bf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99d9326c06a03358bcb02cde8335ee8324fd1bf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c9aabbde58e5c540b0718c0a585e3ca97910317", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c9aabbde58e5c540b0718c0a585e3ca97910317", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c9aabbde58e5c540b0718c0a585e3ca97910317", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c9aabbde58e5c540b0718c0a585e3ca97910317/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f9bb202b35f949eecb48adf75f9a0c5b117978d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9bb202b35f949eecb48adf75f9a0c5b117978d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9bb202b35f949eecb48adf75f9a0c5b117978d2"}], "stats": {"total": 124, "additions": 113, "deletions": 11}, "files": [{"sha": "8c96f5225a2fcee9521aeb8e031e50f53ec58b2a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9aabbde58e5c540b0718c0a585e3ca97910317/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9aabbde58e5c540b0718c0a585e3ca97910317/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c9aabbde58e5c540b0718c0a585e3ca97910317", "patch": "@@ -1,3 +1,10 @@\n+2014-10-03  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/54427\n+\tPR c++/57198\n+\tPR c++/58845\n+\t* doc/extend.texi (Vector Extensions): Document &&, ||, ! in C++.\n+\n 2014-10-03  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* cgraph.h (struct indirect_call_info): Add IN_POLYMORPHIC_CDTOR"}, {"sha": "8f448878edc7f298e55113ac00804d5a2daada1d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9aabbde58e5c540b0718c0a585e3ca97910317/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9aabbde58e5c540b0718c0a585e3ca97910317/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=3c9aabbde58e5c540b0718c0a585e3ca97910317", "patch": "@@ -1,3 +1,10 @@\n+2014-10-03  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/54427\n+\tPR c++/57198\n+\tPR c++/58845\n+\t* c-common.c (warn_logical_operator): Punt for vectors.\n+\n 2014-10-01  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n \tImplement SD-6: SG10 Feature Test Recommendations"}, {"sha": "e69d128a2cdc14b0452702e7ca4413bf2ca47b71", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9aabbde58e5c540b0718c0a585e3ca97910317/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9aabbde58e5c540b0718c0a585e3ca97910317/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=3c9aabbde58e5c540b0718c0a585e3ca97910317", "patch": "@@ -1677,6 +1677,10 @@ warn_logical_operator (location_t location, enum tree_code code, tree type,\n \t   || INTEGRAL_TYPE_P (TREE_TYPE (op_right))))\n     return;\n \n+  /* The range computations only work with scalars.  */\n+  if (VECTOR_TYPE_P (TREE_TYPE (op_left))\n+      || VECTOR_TYPE_P (TREE_TYPE (op_right)))\n+    return;\n \n   /* We first test whether either side separately is trivially true\n      (with OR) or trivially false (with AND).  If so, do not warn."}, {"sha": "c0b6fb5d1f9fd58ded9e47a5c48d9fec1167fc2a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9aabbde58e5c540b0718c0a585e3ca97910317/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9aabbde58e5c540b0718c0a585e3ca97910317/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3c9aabbde58e5c540b0718c0a585e3ca97910317", "patch": "@@ -1,3 +1,13 @@\n+2014-10-03  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/54427\n+\tPR c++/57198\n+\tPR c++/58845\n+\t* typeck.c (cp_build_binary_op): save_expr after convert to save\n+\tredundant operations.\n+\t[TRUTH_ANDIF_EXPR, TRUTH_ORIF_EXPR]: Handle vectors.\n+\t(cp_build_unary_op) [TRUTH_NOT_EXPR]: Likewise.\n+\n 2014-10-03  Jason Merrill  <jason@redhat.com>\n \n \t* decl.c (start_decl): Complain about static/thread_local vars"}, {"sha": "6a357bfca99ed0d96637a3cd6339d4f95a5f2622", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 46, "deletions": 5, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9aabbde58e5c540b0718c0a585e3ca97910317/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9aabbde58e5c540b0718c0a585e3ca97910317/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=3c9aabbde58e5c540b0718c0a585e3ca97910317", "patch": "@@ -4045,8 +4045,8 @@ cp_build_binary_op (location_t location,\n             return error_mark_node;\n           case stv_firstarg:\n             {\n-\t      op0 = save_expr (op0);\n               op0 = convert (TREE_TYPE (type1), op0);\n+\t      op0 = save_expr (op0);\n               op0 = build_vector_from_val (type1, op0);\n               type0 = TREE_TYPE (op0);\n               code0 = TREE_CODE (type0);\n@@ -4055,8 +4055,8 @@ cp_build_binary_op (location_t location,\n             }\n           case stv_secondarg:\n             {\n-\t      op1 = save_expr (op1);\n               op1 = convert (TREE_TYPE (type0), op1);\n+\t      op1 = save_expr (op1);\n               op1 = build_vector_from_val (type0, op1);\n               type1 = TREE_TYPE (op1);\n               code1 = TREE_CODE (type1);\n@@ -4191,11 +4191,49 @@ cp_build_binary_op (location_t location,\n     case TRUTH_ORIF_EXPR:\n     case TRUTH_AND_EXPR:\n     case TRUTH_OR_EXPR:\n-      if (VECTOR_TYPE_P (type0) || VECTOR_TYPE_P (type1))\n+      if (!VECTOR_TYPE_P (type0) && VECTOR_TYPE_P (type1))\n \t{\n-\t  sorry (\"logical operation on vector type\");\n-\t  return error_mark_node;\n+\t  if (!COMPARISON_CLASS_P (op1))\n+\t    op1 = cp_build_binary_op (EXPR_LOCATION (op1), NE_EXPR, op1,\n+\t\t\t\t      build_zero_cst (type1), complain);\n+\t  if (code == TRUTH_ANDIF_EXPR)\n+\t    {\n+\t      tree z = build_zero_cst (TREE_TYPE (op1));\n+\t      return build_conditional_expr (location, op0, op1, z, complain);\n+\t    }\n+\t  else if (code == TRUTH_ORIF_EXPR)\n+\t    {\n+\t      tree m1 = build_all_ones_cst (TREE_TYPE (op1));\n+\t      return build_conditional_expr (location, op0, m1, op1, complain);\n+\t    }\n+\t  else\n+\t    gcc_unreachable ();\n \t}\n+      if (VECTOR_TYPE_P (type0))\n+\t{\n+\t  if (!COMPARISON_CLASS_P (op0))\n+\t    op0 = cp_build_binary_op (EXPR_LOCATION (op0), NE_EXPR, op0,\n+\t\t\t\t      build_zero_cst (type0), complain);\n+\t  if (!VECTOR_TYPE_P (type1))\n+\t    {\n+\t      tree m1 = build_all_ones_cst (TREE_TYPE (op0));\n+\t      tree z = build_zero_cst (TREE_TYPE (op0));\n+\t      op1 = build_conditional_expr (location, op1, z, m1, complain);\n+\t    }\n+\t  else if (!COMPARISON_CLASS_P (op1))\n+\t    op1 = cp_build_binary_op (EXPR_LOCATION (op1), NE_EXPR, op1,\n+\t\t\t\t      build_zero_cst (type1), complain);\n+\n+\t  if (code == TRUTH_ANDIF_EXPR)\n+\t    code = BIT_AND_EXPR;\n+\t  else if (code == TRUTH_ORIF_EXPR)\n+\t    code = BIT_IOR_EXPR;\n+\t  else\n+\t    gcc_unreachable ();\n+\n+\t  return cp_build_binary_op (location, code, op0, op1, complain);\n+\t}\n+\n       result_type = boolean_type_node;\n       break;\n \n@@ -5685,6 +5723,9 @@ cp_build_unary_op (enum tree_code code, tree xarg, int noconvert,\n       break;\n \n     case TRUTH_NOT_EXPR:\n+      if (VECTOR_INTEGER_TYPE_P (TREE_TYPE (arg)))\n+\treturn cp_build_binary_op (input_location, EQ_EXPR, arg,\n+\t\t\t\t   build_zero_cst (TREE_TYPE (arg)), complain);\n       arg = perform_implicit_conversion (boolean_type_node, arg,\n \t\t\t\t\t complain);\n       val = invert_truthvalue_loc (input_location, arg);"}, {"sha": "de056618226908b4dada17806ae4fd0184066f1f", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9aabbde58e5c540b0718c0a585e3ca97910317/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9aabbde58e5c540b0718c0a585e3ca97910317/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=3c9aabbde58e5c540b0718c0a585e3ca97910317", "patch": "@@ -7918,6 +7918,13 @@ vector. If both @code{b} and @code{c} are scalars and the type of\n @code{b} and @code{c} are converted to a vector type whose elements have\n this type and with the same number of elements as @code{a}.\n \n+In C++, the logic operators @code{!, &&, ||} are available for vectors.\n+@code{!v} is equivalent to @code{v == 0}, @code{a && b} is equivalent to\n+@code{a!=0 & b!=0} and @code{a || b} is equivalent to @code{a!=0 | b!=0}.\n+For mixed operations between a scalar @code{s} and a vector @code{v},\n+@code{s && v} is equivalent to @code{s?v!=0:0} (the evaluation is\n+short-circuit) and @code{v && s} is equivalent to @code{v!=0 & (s?-1:0)}.\n+\n Vector shuffling is available using functions\n @code{__builtin_shuffle (vec, mask)} and\n @code{__builtin_shuffle (vec0, vec1, mask)}."}, {"sha": "4c4c6049018f32782e99e13bf6d1227f4e71bed5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9aabbde58e5c540b0718c0a585e3ca97910317/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9aabbde58e5c540b0718c0a585e3ca97910317/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3c9aabbde58e5c540b0718c0a585e3ca97910317", "patch": "@@ -1,3 +1,13 @@\n+2014-10-03  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/54427\n+\tPR c++/57198\n+\tPR c++/58845\n+\t* g++.dg/ext/vector9.C: Update, not an error anymore.\n+\t* g++.dg/ext/vector27.C: Replace with new test.\n+\t* g++.dg/ext/vector28.C: New file.\n+\t* g++.dg/other/error23.C: Update to a different error.\n+\n 2014-10-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/torture/vshuf-v8df.c: New test."}, {"sha": "2f29577a4f0ab66ae482d386725ec87779d752fe", "filename": "gcc/testsuite/g++.dg/ext/vector27.C", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9aabbde58e5c540b0718c0a585e3ca97910317/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9aabbde58e5c540b0718c0a585e3ca97910317/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector27.C?ref=3c9aabbde58e5c540b0718c0a585e3ca97910317", "patch": "@@ -1,7 +1,13 @@\n-// PR c++/58845\n+/* { dg-do compile } */\n \n-void foo()\n+typedef int veci __attribute__ ((vector_size (4 * sizeof (int))));\n+typedef float vecf __attribute__ ((vector_size (4 * sizeof (float))));\n+\n+void f (veci *a, veci *b, int c)\n+{\n+  *a = !*a || *b < ++c;\n+}\n+void g (vecf *a, vecf *b)\n {\n-  int v __attribute__((vector_size(8)));\n-  v = v || v;\t\t\t// { dg-bogus \"\" \"\" { xfail *-*-* } }\n+  *a = (*a < 1 && !(*b > 2)) ? *a + *b : 3;\n }"}, {"sha": "ea48c9612446a72c925c1469386ccf23ec566782", "filename": "gcc/testsuite/g++.dg/ext/vector28.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9aabbde58e5c540b0718c0a585e3ca97910317/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9aabbde58e5c540b0718c0a585e3ca97910317/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector28.C?ref=3c9aabbde58e5c540b0718c0a585e3ca97910317", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+\n+typedef int veci __attribute__ ((vector_size (4 * sizeof (int))));\n+typedef float vecf __attribute__ ((vector_size (4 * sizeof (float))));\n+\n+void f (veci *a, vecf *b, int c)\n+{\n+  *a = c || *b;\n+  *a = *a || c;\n+}"}, {"sha": "42d150dd345c015207e8ea22293c6c29db550e81", "filename": "gcc/testsuite/g++.dg/ext/vector9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9aabbde58e5c540b0718c0a585e3ca97910317/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9aabbde58e5c540b0718c0a585e3ca97910317/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector9.C?ref=3c9aabbde58e5c540b0718c0a585e3ca97910317", "patch": "@@ -6,5 +6,5 @@ typedef int   v4i __attribute__((vector_size(8)));\n void foo()\n {\n   v4f v;\n-  !(v4i)v; // { dg-error \"v4i|argument\" }\n+  !(v4i)v;\n }"}, {"sha": "c60603e8ff5fdaca8d36f31f97c8c4930322d30f", "filename": "gcc/testsuite/g++.dg/other/error23.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9aabbde58e5c540b0718c0a585e3ca97910317/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9aabbde58e5c540b0718c0a585e3ca97910317/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror23.C?ref=3c9aabbde58e5c540b0718c0a585e3ca97910317", "patch": "@@ -2,4 +2,4 @@\n // { dg-do compile }\n \n int v __attribute ((vector_size (8)));\n-bool b = !(v - v);\t// { dg-error \"could not convert .\\\\(__vector.2. int\\\\)\\\\{0, 0\\\\}. from .__vector.2. int. to .bool.|in argument to unary\" }\n+bool b = !(v - v);\t// { dg-error \"not convert .__vector.2. int. to .bool. in initialization\" }"}]}