{"sha": "eec2130ea274839bdbd7a9727b622b11b092d2bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVjMjEzMGVhMjc0ODM5YmRiZDdhOTcyN2I2MjJiMTFiMDkyZDJiZg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2017-06-14T19:26:21Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-14T19:26:21Z"}, "message": "Makefile.am (libgosrcdir): Define.\n\n\t* Makefile.am (libgosrcdir): Define.\n\t(check-head, check-gccgo, check-go-tool): New targets.\n\t(CHECK_ENV): Define.\n\t(check): New target.\n\t(mostlyclean-local): New target.\n\t* Makefile.in: Rebuild.\n\nFrom-SVN: r249203", "tree": {"sha": "cef1993448613e7482c2432a43b7408e6d833ea7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cef1993448613e7482c2432a43b7408e6d833ea7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eec2130ea274839bdbd7a9727b622b11b092d2bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eec2130ea274839bdbd7a9727b622b11b092d2bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eec2130ea274839bdbd7a9727b622b11b092d2bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eec2130ea274839bdbd7a9727b622b11b092d2bf/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1a711a0b5cb291d875acc4b46a4a39ea9185eff3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a711a0b5cb291d875acc4b46a4a39ea9185eff3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a711a0b5cb291d875acc4b46a4a39ea9185eff3"}], "stats": {"total": 198, "additions": 192, "deletions": 6}, "files": [{"sha": "8f9507561827feef6e59ffc11eec66ff939a1c19", "filename": "gotools/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eec2130ea274839bdbd7a9727b622b11b092d2bf/gotools%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eec2130ea274839bdbd7a9727b622b11b092d2bf/gotools%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gotools%2FChangeLog?ref=eec2130ea274839bdbd7a9727b622b11b092d2bf", "patch": "@@ -1,3 +1,12 @@\n+2017-06-14  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* Makefile.am (libgosrcdir): Define.\n+\t(check-head, check-gccgo, check-go-tool): New targets.\n+\t(CHECK_ENV): Define.\n+\t(check): New target.\n+\t(mostlyclean-local): New target.\n+\t* Makefile.in: Rebuild.\n+\n 2017-06-13  Ian Lance Taylor  <iant@golang.org>\n \n \tPR go/80964"}, {"sha": "bde5e432531b9e8ae12b420b8c793147e27abbda", "filename": "gotools/Makefile.am", "status": "modified", "additions": 88, "deletions": 1, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eec2130ea274839bdbd7a9727b622b11b092d2bf/gotools%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eec2130ea274839bdbd7a9727b622b11b092d2bf/gotools%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gotools%2FMakefile.am?ref=eec2130ea274839bdbd7a9727b622b11b092d2bf", "patch": "@@ -42,7 +42,8 @@ AM_GOCFLAGS = -I $(libgodir)\n AM_LDFLAGS = -L $(libgodir) -L $(libgodir)/.libs\n GOLINK = $(GOCOMPILER) $(GOCFLAGS) $(AM_GOCFLAGS) $(LDFLAGS) $(AM_LDFLAGS) -o $@\n \n-cmdsrcdir = $(srcdir)/../libgo/go/cmd\n+libgosrcdir = $(srcdir)/../libgo/go\n+cmdsrcdir = $(libgosrcdir)/cmd\n \n go_cmd_go_files = \\\n \t$(cmdsrcdir)/go/alldocs.go \\\n@@ -131,6 +132,89 @@ install-exec-local: cgo$(EXEEXT)\n uninstall-local:\n \trm -f $(DESTDIR)$(libexecsubdir)/cgo$(exeext)\n \n+# Run tests using the go tool, and frob the output to look like that\n+# generated by DejaGNU.  The main output of this is two files:\n+# gotools.sum and gotools.log.\n+\n+# check-head starts generating the log files in DejaGNU format.  This\n+# is a separate target so that the date is approximately when we start\n+# running the tests.\n+check-head:\n+\t@echo \"Test Run By $${USER} on `date`\" > gotools.head\n+\t@echo \"Native configuration is $(host_triplet)\" >> gotools.head\n+\t@echo >> gotools.head\n+\t@echo \"\t\t=== gotools tests ===\" >> gotools.head\n+\t@echo >> gotools.head\n+\n+# check-gccgo is a little shell script that executes gccgo with the\n+# options to pick up the newly built libgo.\n+check-gccgo: Makefile\n+\trm -f $@\n+\techo \"#!/bin/sh\" > $@\n+\tabs_libgodir=`cd $(libgodir) && $(PWD_COMMAND)`; \\\n+\techo \"$(GOCOMPILE)\" '\"$$@\"' \"-I $${abs_libgodir} -L $${abs_libgodir} -L $${abs_libgodir}/.libs\" >> $@\n+\tchmod +x $@\n+\n+# CHECK_ENV sets up the environment to run the newly built go tool.\n+CHECK_ENV = \\\n+\tPATH=`echo $(abs_builddir):$${PATH} | sed 's,::*,:,g;s,^:*,,;s,:*$$,,'`; \\\n+\texport PATH; \\\n+\tGCCGO=\"$(abs_builddir)/check-gccgo\"; \\\n+\texport GCCGO; \\\n+\tGCCGOTOOLDIR=\"$(abs_builddir)\"; \\\n+\texport GCCGOTOOLDIR; \\\n+\tGO_TESTING_GOTOOLS=yes; \\\n+\texport GO_TESTING_GOTOOLS; \\\n+\tabs_libgodir=`cd $(libgodir) && $(PWD_COMMAND)`; \\\n+\tLD_LIBRARY_PATH=`echo $${abs_libgodir}/.libs:$${LD_LIBRARY_PATH} | sed 's,::*,:,g;s,^:*,,;s,:*$$,,'`; \\\n+\texport LD_LIBRARY_PATH;\n+\n+# check-go-tools runs `go test cmd/go` in our environment.\n+check-go-tool: go$(EXEEXT) check-head check-gccgo\n+\trm -rf check-go-dir\n+\t$(MKDIR_P) check-go-dir/src/cmd/go\n+\tcp $(cmdsrcdir)/go/*.go check-go-dir/src/cmd/go/\n+\tcp $(libgodir)/zstdpkglist.go check-go-dir/src/cmd/go/\n+\tcp zdefaultcc.go check-go-dir/src/cmd/go/\n+\tcp -r $(cmdsrcdir)/go/testdata check-go-dir/src/cmd/go/\n+\t$(CHECK_ENV) \\\n+\tGOPATH=`cd check-go-dir && $(PWD_COMMAND)`; \\\n+\texport GOPATH; \\\n+\t(cd check-go-dir/src/cmd/go && $(abs_builddir)/go$(EXEEXT) test -test.short -test.v) >& cmd_go-testlog || true\n+\tgrep '^--- ' cmd_go-testlog | sed -e 's/^--- \\(.*\\) ([^)]*)$$/\\1/'\n+\n+# The check targets runs the tests and assembles the output files.\n+check: check-head check-go-tool\n+\tmv gotools.head gotools.sum\n+\tcp gotools.sum gotools.log\n+\tfor file in cmd_go-testlog; do \\\n+\t  testname=`echo $${file} | sed -e 's/-testlog//' -e 's|_|/|'`; \\\n+\t  echo \"Running $${testname}\" >> gotools.sum; \\\n+\t  echo \"Running $${testname}\" >> gotools.log; \\\n+\t  sed -e 's/^--- \\(.*\\) ([^)]*)$$/\\1/' < $${file} >> gotools.log; \\\n+\t  grep '^--- ' $${file} | sed -e 's/^--- \\(.*\\) ([^)]*)$$/\\1/' -e 's/SKIP/UNTESTED/' >> gotools.sum; \\\n+\tdone\n+\t@echo >> gotools.sum\n+\t@echo \"\t\t=== gotools Summary ===\" >> gotools.sum\n+\tpass=`grep -c '^PASS' gotools.sum`; \\\n+\tif test \"$${pass}\" -ne \"0\"; then \\\n+\t  echo \"# of expected passes\t\t$${pass}\" >> gotools.sum; \\\n+\tfi\n+\tfail=`grep -c '^FAIL' gotools.sum`; \\\n+\tif test \"$${fail}\" -ne \"0\"; then \\\n+\t  echo \"# of unexpected failures\t$${fail}\" >> gotools.sum; \\\n+\tfi\n+\tuntested=`grep -c '^UNTESTED' gotools.sum`; \\\n+\tif test \"$${untested}\" -ne \"0\"; then \\\n+\t  echo \"# of untested testcases\t\t$${untested}\" >> gotools.sum; \\\n+\tfi\n+\techo `echo $(GOC_FOR_TARGET) | sed -e 's/ .*//'`  `$(GOC_FOR_TARGET) -v 2>&1 | grep \" version\" | sed -n -e 's/.* \\(version.*$$\\)/\\1/p'` >> gotools.sum\n+\techo >> gotools.log\n+\techo \"runtest completed at `date`\" >> gotools.log\n+\tif grep '^FAIL' gotools.sum >/dev/null 2>&1; then exit 1; fi\n+\n+.PHONY: check check-head check-go-tool\n+\n else\n \n # For a non-native build we have to build the programs using a\n@@ -140,3 +224,6 @@ else\n # the go/build package.  Figure this out later.\n \n endif\n+\n+mostlyclean-local:\n+\trm -rf check-go-dir"}, {"sha": "9e42330c8be9d63e969de05d4de47415a3f0b04c", "filename": "gotools/Makefile.in", "status": "modified", "additions": 95, "deletions": 5, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eec2130ea274839bdbd7a9727b622b11b092d2bf/gotools%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eec2130ea274839bdbd7a9727b622b11b092d2bf/gotools%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gotools%2FMakefile.in?ref=eec2130ea274839bdbd7a9727b622b11b092d2bf", "patch": "@@ -261,7 +261,8 @@ GOCOMPILE = $(GOCOMPILER) $(GOCFLAGS)\n AM_GOCFLAGS = -I $(libgodir)\n AM_LDFLAGS = -L $(libgodir) -L $(libgodir)/.libs\n GOLINK = $(GOCOMPILER) $(GOCFLAGS) $(AM_GOCFLAGS) $(LDFLAGS) $(AM_LDFLAGS) -o $@\n-cmdsrcdir = $(srcdir)/../libgo/go/cmd\n+libgosrcdir = $(srcdir)/../libgo/go\n+cmdsrcdir = $(libgosrcdir)/cmd\n go_cmd_go_files = \\\n \t$(cmdsrcdir)/go/alldocs.go \\\n \t$(cmdsrcdir)/go/bug.go \\\n@@ -319,6 +320,21 @@ MOSTLYCLEANFILES = zdefaultcc.go s-zdefaultcc\n @NATIVE_TRUE@bin_PROGRAMS = go$(EXEEXT) gofmt$(EXEEXT)\n @NATIVE_TRUE@noinst_PROGRAMS = cgo$(EXEEXT)\n @NATIVE_TRUE@man_MANS = go.1 gofmt.1\n+\n+# CHECK_ENV sets up the environment to run the newly built go tool.\n+@NATIVE_TRUE@CHECK_ENV = \\\n+@NATIVE_TRUE@\tPATH=`echo $(abs_builddir):$${PATH} | sed 's,::*,:,g;s,^:*,,;s,:*$$,,'`; \\\n+@NATIVE_TRUE@\texport PATH; \\\n+@NATIVE_TRUE@\tGCCGO=\"$(abs_builddir)/check-gccgo\"; \\\n+@NATIVE_TRUE@\texport GCCGO; \\\n+@NATIVE_TRUE@\tGCCGOTOOLDIR=\"$(abs_builddir)\"; \\\n+@NATIVE_TRUE@\texport GCCGOTOOLDIR; \\\n+@NATIVE_TRUE@\tGO_TESTING_GOTOOLS=yes; \\\n+@NATIVE_TRUE@\texport GO_TESTING_GOTOOLS; \\\n+@NATIVE_TRUE@\tabs_libgodir=`cd $(libgodir) && $(PWD_COMMAND)`; \\\n+@NATIVE_TRUE@\tLD_LIBRARY_PATH=`echo $${abs_libgodir}/.libs:$${LD_LIBRARY_PATH} | sed 's,::*,:,g;s,^:*,,;s,:*$$,,'`; \\\n+@NATIVE_TRUE@\texport LD_LIBRARY_PATH;\n+\n all: all-am\n \n .SUFFIXES:\n@@ -629,7 +645,8 @@ maintainer-clean-am: distclean-am maintainer-clean-generic\n \n mostlyclean: mostlyclean-am\n \n-mostlyclean-am: mostlyclean-compile mostlyclean-generic\n+mostlyclean-am: mostlyclean-compile mostlyclean-generic \\\n+\tmostlyclean-local\n \n pdf: pdf-am\n \n@@ -655,9 +672,10 @@ uninstall-man: uninstall-man1\n \tinstall-man install-man1 install-pdf install-pdf-am install-ps \\\n \tinstall-ps-am install-strip installcheck installcheck-am \\\n \tinstalldirs maintainer-clean maintainer-clean-generic \\\n-\tmostlyclean mostlyclean-compile mostlyclean-generic pdf pdf-am \\\n-\tps ps-am tags uninstall uninstall-am uninstall-binPROGRAMS \\\n-\tuninstall-local uninstall-man uninstall-man1\n+\tmostlyclean mostlyclean-compile mostlyclean-generic \\\n+\tmostlyclean-local pdf pdf-am ps ps-am tags uninstall \\\n+\tuninstall-am uninstall-binPROGRAMS uninstall-local \\\n+\tuninstall-man uninstall-man1\n \n \n zdefaultcc.go: s-zdefaultcc; @true\n@@ -685,12 +703,84 @@ s-zdefaultcc: Makefile\n @NATIVE_TRUE@uninstall-local:\n @NATIVE_TRUE@\trm -f $(DESTDIR)$(libexecsubdir)/cgo$(exeext)\n \n+# Run tests using the go tool, and frob the output to look like that\n+# generated by DejaGNU.  The main output of this is two files:\n+# gotools.sum and gotools.log.\n+\n+# check-head starts generating the log files in DejaGNU format.  This\n+# is a separate target so that the date is approximately when we start\n+# running the tests.\n+@NATIVE_TRUE@check-head:\n+@NATIVE_TRUE@\t@echo \"Test Run By $${USER} on `date`\" > gotools.head\n+@NATIVE_TRUE@\t@echo \"Native configuration is $(host_triplet)\" >> gotools.head\n+@NATIVE_TRUE@\t@echo >> gotools.head\n+@NATIVE_TRUE@\t@echo \"\t\t=== gotools tests ===\" >> gotools.head\n+@NATIVE_TRUE@\t@echo >> gotools.head\n+\n+# check-gccgo is a little shell script that executes gccgo with the\n+# options to pick up the newly built libgo.\n+@NATIVE_TRUE@check-gccgo: Makefile\n+@NATIVE_TRUE@\trm -f $@\n+@NATIVE_TRUE@\techo \"#!/bin/sh\" > $@\n+@NATIVE_TRUE@\tabs_libgodir=`cd $(libgodir) && $(PWD_COMMAND)`; \\\n+@NATIVE_TRUE@\techo \"$(GOCOMPILE)\" '\"$$@\"' \"-I $${abs_libgodir} -L $${abs_libgodir} -L $${abs_libgodir}/.libs\" >> $@\n+@NATIVE_TRUE@\tchmod +x $@\n+\n+# check-go-tools runs `go test cmd/go` in our environment.\n+@NATIVE_TRUE@check-go-tool: go$(EXEEXT) check-head check-gccgo\n+@NATIVE_TRUE@\trm -rf check-go-dir\n+@NATIVE_TRUE@\t$(MKDIR_P) check-go-dir/src/cmd/go\n+@NATIVE_TRUE@\tcp $(cmdsrcdir)/go/*.go check-go-dir/src/cmd/go/\n+@NATIVE_TRUE@\tcp $(libgodir)/zstdpkglist.go check-go-dir/src/cmd/go/\n+@NATIVE_TRUE@\tcp zdefaultcc.go check-go-dir/src/cmd/go/\n+@NATIVE_TRUE@\tcp -r $(cmdsrcdir)/go/testdata check-go-dir/src/cmd/go/\n+@NATIVE_TRUE@\t$(CHECK_ENV) \\\n+@NATIVE_TRUE@\tGOPATH=`cd check-go-dir && $(PWD_COMMAND)`; \\\n+@NATIVE_TRUE@\texport GOPATH; \\\n+@NATIVE_TRUE@\t(cd check-go-dir/src/cmd/go && $(abs_builddir)/go$(EXEEXT) test -test.short -test.v) >& cmd_go-testlog || true\n+@NATIVE_TRUE@\tgrep '^--- ' cmd_go-testlog | sed -e 's/^--- \\(.*\\) ([^)]*)$$/\\1/'\n+\n+# The check targets runs the tests and assembles the output files.\n+@NATIVE_TRUE@check: check-head check-go-tool\n+@NATIVE_TRUE@\tmv gotools.head gotools.sum\n+@NATIVE_TRUE@\tcp gotools.sum gotools.log\n+@NATIVE_TRUE@\tfor file in cmd_go-testlog; do \\\n+@NATIVE_TRUE@\t  testname=`echo $${file} | sed -e 's/-testlog//' -e 's|_|/|'`; \\\n+@NATIVE_TRUE@\t  echo \"Running $${testname}\" >> gotools.sum; \\\n+@NATIVE_TRUE@\t  echo \"Running $${testname}\" >> gotools.log; \\\n+@NATIVE_TRUE@\t  sed -e 's/^--- \\(.*\\) ([^)]*)$$/\\1/' < $${file} >> gotools.log; \\\n+@NATIVE_TRUE@\t  grep '^--- ' $${file} | sed -e 's/^--- \\(.*\\) ([^)]*)$$/\\1/' -e 's/SKIP/UNTESTED/' >> gotools.sum; \\\n+@NATIVE_TRUE@\tdone\n+@NATIVE_TRUE@\t@echo >> gotools.sum\n+@NATIVE_TRUE@\t@echo \"\t\t=== gotools Summary ===\" >> gotools.sum\n+@NATIVE_TRUE@\tpass=`grep -c '^PASS' gotools.sum`; \\\n+@NATIVE_TRUE@\tif test \"$${pass}\" -ne \"0\"; then \\\n+@NATIVE_TRUE@\t  echo \"# of expected passes\t\t$${pass}\" >> gotools.sum; \\\n+@NATIVE_TRUE@\tfi\n+@NATIVE_TRUE@\tfail=`grep -c '^FAIL' gotools.sum`; \\\n+@NATIVE_TRUE@\tif test \"$${fail}\" -ne \"0\"; then \\\n+@NATIVE_TRUE@\t  echo \"# of unexpected failures\t$${fail}\" >> gotools.sum; \\\n+@NATIVE_TRUE@\tfi\n+@NATIVE_TRUE@\tuntested=`grep -c '^UNTESTED' gotools.sum`; \\\n+@NATIVE_TRUE@\tif test \"$${untested}\" -ne \"0\"; then \\\n+@NATIVE_TRUE@\t  echo \"# of untested testcases\t\t$${untested}\" >> gotools.sum; \\\n+@NATIVE_TRUE@\tfi\n+@NATIVE_TRUE@\techo `echo $(GOC_FOR_TARGET) | sed -e 's/ .*//'`  `$(GOC_FOR_TARGET) -v 2>&1 | grep \" version\" | sed -n -e 's/.* \\(version.*$$\\)/\\1/p'` >> gotools.sum\n+@NATIVE_TRUE@\techo >> gotools.log\n+@NATIVE_TRUE@\techo \"runtest completed at `date`\" >> gotools.log\n+@NATIVE_TRUE@\tif grep '^FAIL' gotools.sum >/dev/null 2>&1; then exit 1; fi\n+\n+@NATIVE_TRUE@.PHONY: check check-head check-go-tool\n+\n # For a non-native build we have to build the programs using a\n # previously built host (or build -> host) Go compiler.  We should\n # only do this if such a compiler is available.  We also need to get\n # the right values for GOARCH and GOOS in the default build context in\n # the go/build package.  Figure this out later.\n \n+mostlyclean-local:\n+\trm -rf check-go-dir\n+\n # Tell versions [3.59,3.63) of GNU make to not export all variables.\n # Otherwise a system limit (for SysV at least) may be exceeded.\n .NOEXPORT:"}]}