{"sha": "0a59215131c02dee4c8829f93d1ee678647614da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE1OTIxNTEzMWMwMmRlZTRjODgyOWY5M2QxZWU2Nzg2NDc2MTRkYQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2019-05-07T15:42:42Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-05-07T15:42:42Z"}, "message": "cfgexpand.c (asm_clobber_reg_is_valid): Reject clobbers outside of accessible_reg_set.\n\n\t* cfgexpand.c (asm_clobber_reg_is_valid): Reject\n\tclobbers outside of accessible_reg_set.\n\t* config/i386/i386.c (ix86_conditional_register_usage):\n\tDisable register sets by clearing corresponding bits in\n\taccessible_reg_set.  Do not set corresponding bits in fixed_regs,\n\tcall_used_regs and don't clear corresponding reg_names array members.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/asm-7.c: New test.\n\t* gcc.target/i386/asm-1.c: Update expected error string.\n\t* gcc.target/i386/pr62120.c: Ditto.\n\nFrom-SVN: r270955", "tree": {"sha": "6eb2ab41018cd72b01e17fe77465c63b6837abf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6eb2ab41018cd72b01e17fe77465c63b6837abf0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a59215131c02dee4c8829f93d1ee678647614da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a59215131c02dee4c8829f93d1ee678647614da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a59215131c02dee4c8829f93d1ee678647614da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a59215131c02dee4c8829f93d1ee678647614da/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "73e828becf8d33334800c7a8c83b1d7a8967f2a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73e828becf8d33334800c7a8c83b1d7a8967f2a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73e828becf8d33334800c7a8c83b1d7a8967f2a8"}], "stats": {"total": 75, "additions": 52, "deletions": 23}, "files": [{"sha": "cf2ea44035b5a34d9dbd46c091a0ea8261e561e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a59215131c02dee4c8829f93d1ee678647614da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a59215131c02dee4c8829f93d1ee678647614da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a59215131c02dee4c8829f93d1ee678647614da", "patch": "@@ -1,3 +1,12 @@\n+2019-05-07  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* cfgexpand.c (asm_clobber_reg_is_valid): Reject\n+\tclobbers outside of accessible_reg_set.\n+\t* config/i386/i386.c (ix86_conditional_register_usage):\n+\tDisable register sets by clearing corresponding bits in\n+\taccessible_reg_set.  Do not set corresponding bits in fixed_regs,\n+\tcall_used_regs and don't clear corresponding reg_names array members.\n+\n 2019-05-07  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-stmts.c (vect_is_simple_cond): When vectype is"}, {"sha": "3a4bd354bf97247c93af8963bc79b95ddcb50ffa", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a59215131c02dee4c8829f93d1ee678647614da/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a59215131c02dee4c8829f93d1ee678647614da/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=0a59215131c02dee4c8829f93d1ee678647614da", "patch": "@@ -2874,6 +2874,15 @@ asm_clobber_reg_is_valid (int regno, int nregs, const char *regname)\n       error (\"PIC register clobbered by %qs in %<asm%>\", regname);\n       is_valid = false;\n     }\n+  else if (!in_hard_reg_set_p\n+\t   (accessible_reg_set, reg_raw_mode[regno], regno))\n+    {\n+      /* ??? Diagnose during gimplification?  */\n+      error (\"the register %qs cannot be clobbered in %<asm%>\"\n+\t     \" for the current target\", regname);\n+      is_valid = false;\n+    }\n+\n   /* Clobbering the stack pointer register is deprecated.  GCC expects\n      the value of the stack pointer after an asm statement to be the same\n      as it was before, so no asm can validly clobber the stack pointer in"}, {"sha": "ab1524c3524846468185d01302d86f1ddbbc268c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a59215131c02dee4c8829f93d1ee678647614da/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a59215131c02dee4c8829f93d1ee678647614da/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0a59215131c02dee4c8829f93d1ee678647614da", "patch": "@@ -480,15 +480,15 @@ ix86_conditional_register_usage (void)\n       if (!fixed_regs[i] && !ix86_function_value_regno_p (i))\n \tcall_used_regs[i] = 0;\n \n-  /* For 32-bit targets, squash the REX registers.  */\n+  /* For 32-bit targets, disable the REX registers.  */\n   if (! TARGET_64BIT)\n     {\n       for (i = FIRST_REX_INT_REG; i <= LAST_REX_INT_REG; i++)\n-\tfixed_regs[i] = call_used_regs[i] = 1, reg_names[i] = \"\";\n+\tCLEAR_HARD_REG_BIT (accessible_reg_set, i);\n       for (i = FIRST_REX_SSE_REG; i <= LAST_REX_SSE_REG; i++)\n-\tfixed_regs[i] = call_used_regs[i] = 1, reg_names[i] = \"\";\n+\tCLEAR_HARD_REG_BIT (accessible_reg_set, i);\n       for (i = FIRST_EXT_REX_SSE_REG; i <= LAST_EXT_REX_SSE_REG; i++)\n-\tfixed_regs[i] = call_used_regs[i] = 1, reg_names[i] = \"\";\n+\tCLEAR_HARD_REG_BIT (accessible_reg_set, i);\n     }\n \n   /*  See the definition of CALL_USED_REGISTERS in i386.h.  */\n@@ -510,32 +510,29 @@ ix86_conditional_register_usage (void)\n \tSET_HARD_REG_BIT (reg_class_contents[(int)CLOBBERED_REGS], i);\n     }\n \n-  /* If MMX is disabled, squash the registers.  */\n+  /* If MMX is disabled, disable the registers.  */\n   if (! TARGET_MMX)\n-    for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-      if (TEST_HARD_REG_BIT (reg_class_contents[(int)MMX_REGS], i))\n-\tfixed_regs[i] = call_used_regs[i] = 1, reg_names[i] = \"\";\n+    AND_COMPL_HARD_REG_SET (accessible_reg_set,\n+\t\t\t    reg_class_contents[(int) MMX_REGS]);\n \n-  /* If SSE is disabled, squash the registers.  */\n+  /* If SSE is disabled, disable the registers.  */\n   if (! TARGET_SSE)\n-    for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-      if (TEST_HARD_REG_BIT (reg_class_contents[(int)SSE_REGS], i))\n-\tfixed_regs[i] = call_used_regs[i] = 1, reg_names[i] = \"\";\n+    AND_COMPL_HARD_REG_SET (accessible_reg_set,\n+\t\t\t    reg_class_contents[(int) ALL_SSE_REGS]);\n \n-  /* If the FPU is disabled, squash the registers.  */\n+  /* If the FPU is disabled, disable the registers.  */\n   if (! (TARGET_80387 || TARGET_FLOAT_RETURNS_IN_80387))\n-    for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-      if (TEST_HARD_REG_BIT (reg_class_contents[(int)FLOAT_REGS], i))\n-\tfixed_regs[i] = call_used_regs[i] = 1, reg_names[i] = \"\";\n+    AND_COMPL_HARD_REG_SET (accessible_reg_set,\n+\t\t\t    reg_class_contents[(int) FLOAT_REGS]);\n \n-  /* If AVX512F is disabled, squash the registers.  */\n+  /* If AVX512F is disabled, disable the registers.  */\n   if (! TARGET_AVX512F)\n     {\n       for (i = FIRST_EXT_REX_SSE_REG; i <= LAST_EXT_REX_SSE_REG; i++)\n-\tfixed_regs[i] = call_used_regs[i] = 1, reg_names[i] = \"\";\n+\tCLEAR_HARD_REG_BIT (accessible_reg_set, i);\n \n-      for (i = FIRST_MASK_REG; i <= LAST_MASK_REG; i++)\n-\tfixed_regs[i] = call_used_regs[i] = 1, reg_names[i] = \"\";\n+      AND_COMPL_HARD_REG_SET (accessible_reg_set,\n+\t\t\t      reg_class_contents[(int) ALL_MASK_REGS]);\n     }\n }\n "}, {"sha": "ae46a72613963405e514eb76e398240d1c52d3a1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a59215131c02dee4c8829f93d1ee678647614da/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a59215131c02dee4c8829f93d1ee678647614da/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0a59215131c02dee4c8829f93d1ee678647614da", "patch": "@@ -1,3 +1,9 @@\n+2019-05-07  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/asm-7.c: New test.\n+\t* gcc.target/i386/asm-1.c: Update expected error string.\n+\t* gcc.target/i386/pr62120.c: Ditto.\n+\n 2019-05-07  Li Jia He  <helijia@linux.ibm.com>\n \n \t* gcc.dg/tree-ssa/pr37508.c: Add the no-ssa-phiopt option to skip phi"}, {"sha": "5e516d8829150d6640f5f6cd39477ce980e0487d", "filename": "gcc/testsuite/gcc.target/i386/asm-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a59215131c02dee4c8829f93d1ee678647614da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fasm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a59215131c02dee4c8829f93d1ee678647614da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fasm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fasm-1.c?ref=0a59215131c02dee4c8829f93d1ee678647614da", "patch": "@@ -2,7 +2,7 @@\n /* { dg-require-effective-target ia32 } */\n /* { dg-options \"\" } */\n \n-register unsigned int EAX asm (\"r14\"); /* { dg-error \"register name\" } */\n+register unsigned int EAX asm (\"r14\"); /* { dg-error \"cannot be accessed\" } */\n \n void foo ()\n {"}, {"sha": "d2d113626a76d46fcd130980d21214ef2730ab68", "filename": "gcc/testsuite/gcc.target/i386/asm-7.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a59215131c02dee4c8829f93d1ee678647614da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fasm-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a59215131c02dee4c8829f93d1ee678647614da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fasm-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fasm-7.c?ref=0a59215131c02dee4c8829f93d1ee678647614da", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ia32 } */\n+/* { dg-options \"\" } */\n+\n+void foo (void)\n+{\n+  asm volatile (\"\" : : : \"%r12\"); /* { dg-error \"cannot be clobbered\" } */\n+}"}, {"sha": "28d85d377125d8977250e72653036f96832bcb78", "filename": "gcc/testsuite/gcc.target/i386/pr62120.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a59215131c02dee4c8829f93d1ee678647614da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr62120.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a59215131c02dee4c8829f93d1ee678647614da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr62120.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr62120.c?ref=0a59215131c02dee4c8829f93d1ee678647614da", "patch": "@@ -3,6 +3,6 @@\n \n void foo ()\n {\n-  register int zmm_var asm (\"ymm9\");/* { dg-error \"invalid register name\" } */\n-  register int zmm_var2 asm (\"23\");/* { dg-error \"invalid register name\" } */\n+  register int zmm_var asm (\"ymm9\");/* { dg-error \"cannot be accessed\" } */\n+  register int zmm_var2 asm (\"23\");/* { dg-error \"cannot be accessed\" } */\n }"}]}