{"sha": "46d81ffa4acfe8c6ae8a2701b1458d95a403dac8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZkODFmZmE0YWNmZThjNmFlOGEyNzAxYjE0NThkOTVhNDAzZGFjOA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-08-21T16:11:05Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-08-21T16:11:05Z"}, "message": "(output_stack_adjust): Add new argument reg.\n\n(output_stack_adjust): Add new argument reg.  Use it instead of\nstack_pointer_rtx.\n(sh_expand_prologue, sh_expand_epilogue): Pass new argument to\noutput_stack_adjust.\n\nFrom-SVN: r10259", "tree": {"sha": "bcdd3252fe97e75ae622224b1ad527f5ef3679c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcdd3252fe97e75ae622224b1ad527f5ef3679c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46d81ffa4acfe8c6ae8a2701b1458d95a403dac8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46d81ffa4acfe8c6ae8a2701b1458d95a403dac8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46d81ffa4acfe8c6ae8a2701b1458d95a403dac8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46d81ffa4acfe8c6ae8a2701b1458d95a403dac8/comments", "author": null, "committer": null, "parents": [{"sha": "8466d38a89cb2bf37bab67337910209def6dc10c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8466d38a89cb2bf37bab67337910209def6dc10c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8466d38a89cb2bf37bab67337910209def6dc10c"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "4af8d1f0d4d5dd00928ff700f15fc9ec6d2d1f1b", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46d81ffa4acfe8c6ae8a2701b1458d95a403dac8/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46d81ffa4acfe8c6ae8a2701b1458d95a403dac8/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=46d81ffa4acfe8c6ae8a2701b1458d95a403dac8", "patch": "@@ -1417,8 +1417,9 @@ static int extra_push;\n /* Adjust the stack and return the number of bytes taken to do it.  */\n \n static void\n-output_stack_adjust (size)\n+output_stack_adjust (size, reg)\n      int size;\n+     rtx reg;\n {\n   if (size)\n     {\n@@ -1432,7 +1433,7 @@ output_stack_adjust (size)\n \t  val = reg;\n \t}\n \n-      insn = gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx, val);\n+      insn = gen_addsi3 (reg, reg, val);\n       emit_insn (insn);\n     }\n }\n@@ -1530,7 +1531,7 @@ sh_expand_prologue ()\n \n   /* We have pretend args if we had an object sent partially in registers\n      and partially on the stack, e.g. a large structure.  */\n-  output_stack_adjust (-current_function_pretend_args_size);\n+  output_stack_adjust (-current_function_pretend_args_size, stack_pointer_rtx);\n \n   extra_push = 0;\n \n@@ -1552,7 +1553,7 @@ sh_expand_prologue ()\n \t}\n     }\n   push_regs (live_regs_mask);\n-  output_stack_adjust (-get_frame_size ());\n+  output_stack_adjust (-get_frame_size (), stack_pointer_rtx);\n \n   if (frame_pointer_needed)\n     emit_insn (gen_movsi (frame_pointer_rtx, stack_pointer_rtx));\n@@ -1567,9 +1568,16 @@ sh_expand_epilogue ()\n   live_regs_mask = calc_live_regs (&d);\n \n   if (frame_pointer_needed)\n-    emit_insn (gen_movsi (stack_pointer_rtx, frame_pointer_rtx));\n-\n-  output_stack_adjust (get_frame_size ());\n+    {\n+      /* We deliberately make the add dependent on the frame_pointer,\n+\t to ensure that instruction scheduling won't move the stack pointer\n+\t adjust before instructions reading from the frame.  This can fail\n+\t if there is an interrupt which then writes to the stack.  */\n+      output_stack_adjust (get_frame_size (), frame_pointer_rtx);\n+      emit_insn (gen_movsi (stack_pointer_rtx, frame_pointer_rtx));\n+    }\n+  else\n+    output_stack_adjust (get_frame_size (), stack_pointer_rtx);\n \n   /* Pop all the registers.  */\n \n@@ -1580,7 +1588,8 @@ sh_expand_epilogue ()\n \tpop (j);\n     }\n \n-  output_stack_adjust (extra_push + current_function_pretend_args_size);\n+  output_stack_adjust (extra_push + current_function_pretend_args_size,\n+\t\t       stack_pointer_rtx);\n }\n \n /* Clear variables at function end.  */"}]}