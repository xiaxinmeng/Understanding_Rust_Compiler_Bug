{"sha": "a45fb21a10f486f6596b648e2c64bd1c7d808f18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ1ZmIyMWExMGY0ODZmNjU5NmI2NDhlMmM2NGJkMWM3ZDgwOGYxOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-19T10:40:24Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-19T12:46:57Z"}, "message": "libstdc++: Remove redundant bool casts in ranges algorithms\n\nSome of these casts were added by me the other day, but some were\nalready present. I think they are all redundant following the\nintroduction of the boolean-testable concept in P1964R2.\n\n\t* include/bits/ranges_algo.h (__find_fn, __find_first_of_fn)\n\t(__adjacent_find_fn, __remove_if_fn, __remove_copy_if_fn)\n\t(__unique_fn, __unique_copy_fn): Remove redundant conversions to bool.", "tree": {"sha": "636c9144cacd35b46521f78c21fba520abbffd16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/636c9144cacd35b46521f78c21fba520abbffd16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a45fb21a10f486f6596b648e2c64bd1c7d808f18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a45fb21a10f486f6596b648e2c64bd1c7d808f18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a45fb21a10f486f6596b648e2c64bd1c7d808f18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a45fb21a10f486f6596b648e2c64bd1c7d808f18/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73d531205083eaf19934b516b37b1cf4940895c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73d531205083eaf19934b516b37b1cf4940895c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73d531205083eaf19934b516b37b1cf4940895c7"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "a8fcd7cb475780bce45fc1982585b054164d1238", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a45fb21a10f486f6596b648e2c64bd1c7d808f18/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a45fb21a10f486f6596b648e2c64bd1c7d808f18/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a45fb21a10f486f6596b648e2c64bd1c7d808f18", "patch": "@@ -1,3 +1,9 @@\n+2020-02-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/ranges_algo.h (__find_fn, __find_first_of_fn)\n+\t(__adjacent_find_fn, __remove_if_fn, __remove_copy_if_fn)\n+\t(__unique_fn, __unique_copy_fn): Remove redundant conversions to bool.\n+\n 2020-02-18  Patrick Palka  <ppalka@redhat.com>\n \n \tP1983R0 Wording for GB301, US296, US292, US291, and US283"}, {"sha": "a69181e12cb7e27874ebca7934111429743a95d4", "filename": "libstdc++-v3/include/bits/ranges_algo.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a45fb21a10f486f6596b648e2c64bd1c7d808f18/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a45fb21a10f486f6596b648e2c64bd1c7d808f18/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h?ref=a45fb21a10f486f6596b648e2c64bd1c7d808f18", "patch": "@@ -244,7 +244,7 @@ namespace ranges\n \t\t const _Tp& __value, _Proj __proj = {}) const\n       {\n \twhile (__first != __last\n-\t    && !(bool)(std::__invoke(__proj, *__first) == __value))\n+\t    && !(std::__invoke(__proj, *__first) == __value))\n \t  ++__first;\n \treturn __first;\n       }\n@@ -333,9 +333,9 @@ namespace ranges\n       {\n \tfor (; __first1 != __last1; ++__first1)\n \t  for (auto __iter = __first2; __iter != __last2; ++__iter)\n-\t    if ((bool)std::__invoke(__pred,\n-\t\t\t\t    std::__invoke(__proj1, *__first1),\n-\t\t\t\t    std::__invoke(__proj2, *__iter)))\n+\t    if (std::__invoke(__pred,\n+\t\t\t      std::__invoke(__proj1, *__first1),\n+\t\t\t      std::__invoke(__proj2, *__iter)))\n \t      return __first1;\n \treturn __first1;\n       }\n@@ -730,9 +730,9 @@ namespace ranges\n \tauto __next = __first;\n \tfor (; ++__next != __last; __first = __next)\n \t  {\n-\t    if ((bool)std::__invoke(__pred,\n-\t\t\t\t    std::__invoke(__proj, *__first),\n-\t\t\t\t    std::__invoke(__proj, *__next)))\n+\t    if (std::__invoke(__pred,\n+\t\t\t      std::__invoke(__proj, *__first),\n+\t\t\t      std::__invoke(__proj, *__next)))\n \t      return __first;\n \t  }\n \treturn __next;\n@@ -1219,7 +1219,7 @@ namespace ranges\n \tauto __result = __first;\n \t++__first;\n \tfor (; __first != __last; ++__first)\n-\t  if (!(bool)std::__invoke(__pred, std::__invoke(__proj, *__first)))\n+\t  if (!std::__invoke(__pred, std::__invoke(__proj, *__first)))\n \t    {\n \t      *__result = std::move(*__first);\n \t      ++__result;\n@@ -1289,7 +1289,7 @@ namespace ranges\n \t\t _Pred __pred, _Proj __proj = {}) const\n       {\n \tfor (; __first != __last; ++__first)\n-\t  if (!(bool)std::__invoke(__pred, std::__invoke(__proj, *__first)))\n+\t  if (!std::__invoke(__pred, std::__invoke(__proj, *__first)))\n \t    {\n \t      *__result = *__first;\n \t      ++__result;\n@@ -1372,9 +1372,9 @@ namespace ranges\n \tauto __dest = __first;\n \t++__first;\n \twhile (++__first != __last)\n-\t  if (!(bool)std::__invoke(__comp,\n-\t\t\t\t   std::__invoke(__proj, *__dest),\n-\t\t\t\t   std::__invoke(__proj, *__first)))\n+\t  if (!std::__invoke(__comp,\n+\t\t\t     std::__invoke(__proj, *__dest),\n+\t\t\t     std::__invoke(__proj, *__first)))\n \t    *++__dest = std::move(*__first);\n \treturn {++__dest, __first};\n       }\n@@ -1420,9 +1420,9 @@ namespace ranges\n \t    auto __next = __first;\n \t    *__result = *__next;\n \t    while (++__next != __last)\n-\t      if (!(bool)std::__invoke(__comp,\n-\t\t\t\t       std::__invoke(__proj, *__first),\n-\t\t\t\t       std::__invoke(__proj, *__next)))\n+\t      if (!std::__invoke(__comp,\n+\t\t\t\t std::__invoke(__proj, *__first),\n+\t\t\t\t std::__invoke(__proj, *__next)))\n \t\t{\n \t\t  __first = __next;\n \t\t  *++__result = *__first;\n@@ -1434,9 +1434,9 @@ namespace ranges\n \t  {\n \t    *__result = *__first;\n \t    while (++__first != __last)\n-\t      if (!(bool)std::__invoke(__comp,\n-\t\t\t\t       std::__invoke(__proj, *__result),\n-\t\t\t\t       std::__invoke(__proj, *__first)))\n+\t      if (!std::__invoke(__comp,\n+\t\t\t\t std::__invoke(__proj, *__result),\n+\t\t\t\t std::__invoke(__proj, *__first)))\n \t\t  *++__result = *__first;\n \t    return {std::move(__first), std::move(++__result)};\n \t  }"}]}