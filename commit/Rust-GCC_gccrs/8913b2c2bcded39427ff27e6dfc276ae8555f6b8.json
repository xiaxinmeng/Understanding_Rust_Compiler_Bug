{"sha": "8913b2c2bcded39427ff27e6dfc276ae8555f6b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkxM2IyYzJiY2RlZDM5NDI3ZmYyN2U2ZGZjMjc2YWU4NTU1ZjZiOA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-13T16:35:33Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-13T16:35:33Z"}, "message": "c++: Reject alias CTAD in C++17 [PR99008]\n\nHere, in C++17 mode, we only pedwarn about the use of alias CTAD and\nthen later ICE from alias_ctad_tweaks when attempting to constrain\nthe guides.  Since the construction of the guides of an alias template\neffectively relies on concepts, we shouldn't be permissive about alias\nCTAD in C++17 mode, so this patch turns the pertinent pedwarn in\ndo_class_deduction into an error.\n\nIn order to get a consistent diagnostic for B() vs the other forms in\nthe added testcase, I had to remove the special handling of CTAD with\nempty initializer in build_functional_cast_1 so that we always pass\n'complain' to do_auto_deduction.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/99008\n\t* pt.c (do_class_deduction): Reject alias CTAD in C++17 mode\n\trather than issuing a pedwarn.\n\t* typeck2.c (build_functional_cast_1): Handle CTAD uniformly\n\tfor consistent diagnostics.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/99008\n\t* g++.dg/parse/template2.C: Adjust expected diagnostic.\n\t* g++.dg/template/error8.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction84.C: New test.", "tree": {"sha": "41f41a744c09f93171b86d5a51bf2815ce7a2c96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41f41a744c09f93171b86d5a51bf2815ce7a2c96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8913b2c2bcded39427ff27e6dfc276ae8555f6b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8913b2c2bcded39427ff27e6dfc276ae8555f6b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8913b2c2bcded39427ff27e6dfc276ae8555f6b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8913b2c2bcded39427ff27e6dfc276ae8555f6b8/comments", "author": null, "committer": null, "parents": [{"sha": "989e512f719a44fafca0030d7b8a1f5bf5f1baf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/989e512f719a44fafca0030d7b8a1f5bf5f1baf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/989e512f719a44fafca0030d7b8a1f5bf5f1baf7"}], "stats": {"total": 38, "additions": 18, "deletions": 20}, "files": [{"sha": "106dfe556f7fd7c9ff2af2cbfbf7f9254316b3cf", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8913b2c2bcded39427ff27e6dfc276ae8555f6b8/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8913b2c2bcded39427ff27e6dfc276ae8555f6b8/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=8913b2c2bcded39427ff27e6dfc276ae8555f6b8", "patch": "@@ -29305,10 +29305,10 @@ do_class_deduction (tree ptype, tree tmpl, tree init,\n     }\n   else if (cxx_dialect < cxx20 && DECL_ALIAS_TEMPLATE_P (tmpl))\n     {\n-      /* This doesn't affect conforming C++17 code, so just pedwarn.  */\n-      if (complain & tf_warning_or_error)\n-\tpedwarn (input_location, 0, \"alias template deduction only available \"\n-\t\t \"with %<-std=c++20%> or %<-std=gnu++20%>\");\n+      if (complain & tf_error)\n+\terror (\"alias template deduction only available \"\n+\t       \"with %<-std=c++20%> or %<-std=gnu++20%>\");\n+      return error_mark_node;\n     }\n \n   tree type = TREE_TYPE (tmpl);"}, {"sha": "4e9632f6a7d4279653859d1b66bbab3cf5b6728e", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8913b2c2bcded39427ff27e6dfc276ae8555f6b8/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8913b2c2bcded39427ff27e6dfc276ae8555f6b8/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=8913b2c2bcded39427ff27e6dfc276ae8555f6b8", "patch": "@@ -2197,24 +2197,13 @@ build_functional_cast_1 (location_t loc, tree exp, tree parms,\n \t    error_at (loc, \"invalid use of %qT\", anode);\n \t  return error_mark_node;\n \t}\n-      else if (!parms)\n+      else\n \t{\n-\t  /* Even if there are no parameters, we might be able to deduce from\n-\t     default template arguments.  Pass TF_NONE so that we don't\n-\t     generate redundant diagnostics.  */\n-\t  type = do_auto_deduction (type, parms, anode, tf_none,\n+\t  type = do_auto_deduction (type, parms, anode, complain,\n \t\t\t\t    adc_variable_type);\n \t  if (type == error_mark_node)\n-\t    {\n-\t      if (complain & tf_error)\n-\t\terror_at (loc, \"cannot deduce template arguments \"\n-\t\t\t  \"for %qT from %<()%>\", anode);\n-\t      return error_mark_node;\n-\t    }\n+\t    return error_mark_node;\n \t}\n-      else\n-\ttype = do_auto_deduction (type, parms, anode, complain,\n-\t\t\t\t  adc_variable_type);\n     }\n \n   if (processing_template_decl)"}, {"sha": "29f25e50c9e894c68a9f37f32d3efdd42776e55b", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction84.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8913b2c2bcded39427ff27e6dfc276ae8555f6b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction84.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8913b2c2bcded39427ff27e6dfc276ae8555f6b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction84.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction84.C?ref=8913b2c2bcded39427ff27e6dfc276ae8555f6b8", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/99008\n+// { dg-do compile { target c++17 } }\n+\n+template <class> struct A { A(int = 0); };\n+template <class = void> using B = A<int>;\n+auto x = B{};  // { dg-error \"alias template deduction only available with\" \"\" { target c++17_only } }\n+auto y = B();  // { dg-error \"alias template deduction only available with\" \"\" { target c++17_only } }\n+auto z = B{1}; // { dg-error \"alias template deduction only available with\" \"\" { target c++17_only } }\n+auto w = B(1); // { dg-error \"alias template deduction only available with\" \"\" { target c++17_only } }"}, {"sha": "3cafd9f1f01a38700b7b646c32bd1be44c2899a1", "filename": "gcc/testsuite/g++.dg/parse/template2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8913b2c2bcded39427ff27e6dfc276ae8555f6b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8913b2c2bcded39427ff27e6dfc276ae8555f6b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate2.C?ref=8913b2c2bcded39427ff27e6dfc276ae8555f6b8", "patch": "@@ -3,6 +3,6 @@ namespace N {\n }\n \n int main() {\n-  N::C(); // { dg-error \"6:cannot deduce template arguments\" \"\" { target c++17 } }\n+  N::C(); // { dg-error \"8:class template argument deduction failed|no match\" \"\" { target c++17 } }\n   // { dg-error \"7:missing template arguments\" \"\" { target c++14_down } .-1 }\n }"}, {"sha": "de1534cc6373ab9bbb83649c64ac468bc73799aa", "filename": "gcc/testsuite/g++.dg/template/error8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8913b2c2bcded39427ff27e6dfc276ae8555f6b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8913b2c2bcded39427ff27e6dfc276ae8555f6b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror8.C?ref=8913b2c2bcded39427ff27e6dfc276ae8555f6b8", "patch": "@@ -3,6 +3,6 @@\n template <typename T> struct S {};\n \n void f() {\n-  throw S (); // { dg-error \"9:cannot deduce template arguments\" \"\" { target c++17 } }\n+  throw S (); // { dg-error \"12:class template argument deduction failed|no match\" \"\" { target c++17 } }\n   // { dg-error \"11:missing template arguments\" \"\" { target c++14_down } .-1 }\n }"}]}