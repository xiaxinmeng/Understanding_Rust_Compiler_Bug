{"sha": "41df0109de5fe4ddad66bfd742ee813688362ab8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFkZjAxMDlkZTVmZTRkZGFkNjZiZmQ3NDJlZTgxMzY4ODM2MmFiOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-01-25T16:38:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-01-25T16:38:40Z"}, "message": "re PR c++/84031 (structured binding unpacks nameless padding bitfields)\n\n\tPR c++/84031\n\t* decl.c (find_decomp_class_base): Ignore unnamed bitfields.  Ignore\n\trecursive calls that return ret.\n\t(cp_finish_decomp): Ignore unnamed bitfields.\n\n\t* g++.dg/cpp1z/decomp36.C: New test.\n\nFrom-SVN: r257057", "tree": {"sha": "206c7a387ea1a86678e5575437968763e25d30a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/206c7a387ea1a86678e5575437968763e25d30a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41df0109de5fe4ddad66bfd742ee813688362ab8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41df0109de5fe4ddad66bfd742ee813688362ab8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41df0109de5fe4ddad66bfd742ee813688362ab8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41df0109de5fe4ddad66bfd742ee813688362ab8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a794e494c6e3b1c0d63158e414beaa52ded2eac1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a794e494c6e3b1c0d63158e414beaa52ded2eac1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a794e494c6e3b1c0d63158e414beaa52ded2eac1"}], "stats": {"total": 46, "additions": 39, "deletions": 7}, "files": [{"sha": "bea42736cfa9b4c394e972e04ca54bc7863f98b3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41df0109de5fe4ddad66bfd742ee813688362ab8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41df0109de5fe4ddad66bfd742ee813688362ab8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=41df0109de5fe4ddad66bfd742ee813688362ab8", "patch": "@@ -1,3 +1,10 @@\n+2018-01-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/84031\n+\t* decl.c (find_decomp_class_base): Ignore unnamed bitfields.  Ignore\n+\trecursive calls that return ret.\n+\t(cp_finish_decomp): Ignore unnamed bitfields.\n+\n 2018-01-23  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/82249 - wrong mismatched pack length error."}, {"sha": "244a3efe831f55c4d8a937a20a1988f3c3b9cc7c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41df0109de5fe4ddad66bfd742ee813688362ab8/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41df0109de5fe4ddad66bfd742ee813688362ab8/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=41df0109de5fe4ddad66bfd742ee813688362ab8", "patch": "@@ -7206,7 +7206,9 @@ find_decomp_class_base (location_t loc, tree type, tree ret)\n {\n   bool member_seen = false;\n   for (tree field = TYPE_FIELDS (type); field; field = DECL_CHAIN (field))\n-    if (TREE_CODE (field) != FIELD_DECL || DECL_ARTIFICIAL (field))\n+    if (TREE_CODE (field) != FIELD_DECL\n+\t|| DECL_ARTIFICIAL (field)\n+\t|| (DECL_C_BIT_FIELD (field) && !DECL_NAME (field)))\n       continue;\n     else if (ret)\n       return type;\n@@ -7245,7 +7247,7 @@ find_decomp_class_base (location_t loc, tree type, tree ret)\n       tree t = find_decomp_class_base (loc, TREE_TYPE (base_binfo), ret);\n       if (t == error_mark_node)\n \treturn error_mark_node;\n-      if (t != NULL_TREE)\n+      if (t != NULL_TREE && t != ret)\n \t{\n \t  if (ret == type)\n \t    {\n@@ -7256,9 +7258,6 @@ find_decomp_class_base (location_t loc, tree type, tree ret)\n \t    }\n \t  else if (orig_ret != NULL_TREE)\n \t    return t;\n-\t  else if (ret == t)\n-\t    /* OK, found the same base along another path.  We'll complain\n-\t       in convert_to_base if it's ambiguous.  */;\n \t  else if (ret != NULL_TREE)\n \t    {\n \t      error_at (loc, \"cannot decompose class type %qT: its base \"\n@@ -7645,7 +7644,9 @@ cp_finish_decomp (tree decl, tree first, unsigned int count)\n \t  goto error_out;\n \t}\n       for (tree field = TYPE_FIELDS (btype); field; field = TREE_CHAIN (field))\n-\tif (TREE_CODE (field) != FIELD_DECL || DECL_ARTIFICIAL (field))\n+\tif (TREE_CODE (field) != FIELD_DECL\n+\t    || DECL_ARTIFICIAL (field)\n+\t    || (DECL_C_BIT_FIELD (field) && !DECL_NAME (field)))\n \t  continue;\n \telse\n \t  eltscnt++;\n@@ -7660,7 +7661,9 @@ cp_finish_decomp (tree decl, tree first, unsigned int count)\n \t}\n       unsigned int i = 0;\n       for (tree field = TYPE_FIELDS (btype); field; field = TREE_CHAIN (field))\n-\tif (TREE_CODE (field) != FIELD_DECL || DECL_ARTIFICIAL (field))\n+\tif (TREE_CODE (field) != FIELD_DECL\n+\t    || DECL_ARTIFICIAL (field)\n+\t    || (DECL_C_BIT_FIELD (field) && !DECL_NAME (field)))\n \t  continue;\n \telse\n \t  {"}, {"sha": "222df9d3db9b381be17758403af861c0161227c6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41df0109de5fe4ddad66bfd742ee813688362ab8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41df0109de5fe4ddad66bfd742ee813688362ab8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=41df0109de5fe4ddad66bfd742ee813688362ab8", "patch": "@@ -1,5 +1,8 @@\n 2018-01-25  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/84031\n+\t* g++.dg/cpp1z/decomp36.C: New test.\n+\n \tPR middle-end/83977\n \t* c-c++-common/gomp/pr83977-1.c: Add -w to dg-options.\n "}, {"sha": "5a66d0c7b56efe9627b001199d915423f582fdec", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp36.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41df0109de5fe4ddad66bfd742ee813688362ab8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41df0109de5fe4ddad66bfd742ee813688362ab8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp36.C?ref=41df0109de5fe4ddad66bfd742ee813688362ab8", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/84031\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"\" }\n+\n+struct A { unsigned char : 1, a1 : 1, a2 : 2, : 1, a3 : 3; };\n+struct B { unsigned char : 1, : 7; };\n+struct C : B { constexpr C () : c1 (1), c2 (2), c3 (3) {} unsigned char : 1, c1 : 1, c2 : 2, : 1, c3 : 3; };\n+struct D : C { constexpr D () {} unsigned char : 1, : 7; };\n+\n+int\n+main ()\n+{\n+  static constexpr A a { 1, 2, 3 };\n+  const auto &[a1, a2, a3] = a;\t\t// { dg-warning \"only available with\" \"\" { target c++14_down } }\n+  static_assert (a1 == 1 && a2 == 2 && a3 == 3, \"\");\n+  static constexpr D d;\n+  const auto &[d1, d2, d3] = d;\t\t// { dg-warning \"only available with\" \"\" { target c++14_down } }\n+  static_assert (d1 == 1 && d2 == 2 && d3 == 3, \"\");\n+}"}]}