{"sha": "3181cbfdd5fddf1d6e5daa2fb48f23e216c08820", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE4MWNiZmRkNWZkZGYxZDZlNWRhYTJmYjQ4ZjIzZTIxNmMwODgyMA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-09-13T18:13:56Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-09-13T18:13:56Z"}, "message": "(output_constructor): Handle index value in\nthe TREE_PURPOSE, for array constructors.\n\nFrom-SVN: r5314", "tree": {"sha": "a76f8db0bcda564aeaa95a33318edd8c53eac2ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a76f8db0bcda564aeaa95a33318edd8c53eac2ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3181cbfdd5fddf1d6e5daa2fb48f23e216c08820", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3181cbfdd5fddf1d6e5daa2fb48f23e216c08820", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3181cbfdd5fddf1d6e5daa2fb48f23e216c08820", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3181cbfdd5fddf1d6e5daa2fb48f23e216c08820/comments", "author": null, "committer": null, "parents": [{"sha": "d4c89139666d87afd6544277c7e363716e3d7d9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4c89139666d87afd6544277c7e363716e3d7d9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4c89139666d87afd6544277c7e363716e3d7d9e"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "ea3fbb2a211f8a9890b1c08d1c8571a0d1e6f1a8", "filename": "gcc/varasm.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3181cbfdd5fddf1d6e5daa2fb48f23e216c08820/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3181cbfdd5fddf1d6e5daa2fb48f23e216c08820/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=3181cbfdd5fddf1d6e5daa2fb48f23e216c08820", "patch": "@@ -3040,25 +3040,37 @@ output_constructor (exp, size)\n        field = field ? TREE_CHAIN (field) : 0)\n     {\n       tree val = TREE_VALUE (link);\n+      tree index = 0;\n+\n       /* the element in a union constructor specifies the proper field.  */\n-      if (TREE_PURPOSE (link) != 0)\n+\n+      if (TREE_CODE (TREE_TYPE (exp)) == RECORD_TYPE\n+\t  || TREE_CODE (TREE_TYPE (exp)) == UNION_TYPE)\n \tfield = TREE_PURPOSE (link);\n \n+      if (TREE_CODE (TREE_TYPE (exp)) == ARRAY_TYPE)\n+\tindex = TREE_PURPOSE (link);\n+\n       /* Eliminate the marker that makes a cast not be an lvalue.  */\n       if (val != 0)\n \tSTRIP_NOPS (val);\n \n       if (field == 0 || !DECL_BIT_FIELD (field))\n \t{\n+\t  /* An element that is not a bit-field.  */\n+\n \t  register int fieldsize;\n \t  /* Since this structure is static,\n \t     we know the positions are constant.  */\n \t  int bitpos = (field ? (TREE_INT_CST_LOW (DECL_FIELD_BITPOS (field))\n \t\t\t\t / BITS_PER_UNIT)\n \t\t\t: 0);\n+\t  if (index != 0)\n+\t    bitpos = (TREE_INT_CST_LOW (TYPE_SIZE (TREE_TYPE (val)))\n+\t\t      / BITS_PER_UNIT\n+\t\t      * TREE_INT_CST_LOW (index));\n \n-\t  /* An element that is not a bit-field.\n-\t     Output any buffered-up bit-fields preceding it.  */\n+\t  /* Output any buffered-up bit-fields preceding this element.  */\n \t  if (byte_buffer_in_use)\n \t    {\n \t      ASM_OUTPUT_BYTE (asm_out_file, byte);\n@@ -3069,7 +3081,7 @@ output_constructor (exp, size)\n \t  /* Advance to offset of this element.\n \t     Note no alignment needed in an array, since that is guaranteed\n \t     if each element has the proper size.  */\n-\t  if (field != 0 && bitpos != total_bytes)\n+\t  if ((field != 0 || index != 0) && bitpos != total_bytes)\n \t    {\n \t      assemble_zeros (bitpos - total_bytes);\n \t      total_bytes = bitpos;"}]}