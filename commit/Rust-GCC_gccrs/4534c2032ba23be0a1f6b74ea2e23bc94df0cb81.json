{"sha": "4534c2032ba23be0a1f6b74ea2e23bc94df0cb81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDUzNGMyMDMyYmEyM2JlMGExZjZiNzRlYTJlMjNiYzk0ZGYwY2I4MQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-10-19T13:58:27Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-10-19T13:58:27Z"}, "message": "gimple-fold.c (gimple_phi_nonnegative_warnv_p): New function.\n\n2015-10-19  Richard Biener  <rguenther@suse.de>\n\n\t* gimple-fold.c (gimple_phi_nonnegative_warnv_p): New function.\n\t(gimple_stmt_nonnegative_warnv_p): Use it.\n\t* match.pd (CPROJ): New operator list.\n\t(cproj (complex ...)): Move simplifications from ...\n\t* builtins.c (fold_builtin_cproj): ... here.\n\n\t* gcc.dg/torture/builtin-cproj-1.c: Skip for -O0.\n\nFrom-SVN: r228970", "tree": {"sha": "ab6e2c78aa78e165e6c5f5307a23b2f3a4fa5fff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab6e2c78aa78e165e6c5f5307a23b2f3a4fa5fff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4534c2032ba23be0a1f6b74ea2e23bc94df0cb81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4534c2032ba23be0a1f6b74ea2e23bc94df0cb81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4534c2032ba23be0a1f6b74ea2e23bc94df0cb81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4534c2032ba23be0a1f6b74ea2e23bc94df0cb81/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1c6e3c3e2ce560e555ba7d75a22179757a3c6489", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c6e3c3e2ce560e555ba7d75a22179757a3c6489", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c6e3c3e2ce560e555ba7d75a22179757a3c6489"}], "stats": {"total": 88, "additions": 61, "deletions": 27}, "files": [{"sha": "ed0f4ce858499c320279f45cf70cc15e6375c9f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4534c2032ba23be0a1f6b74ea2e23bc94df0cb81/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4534c2032ba23be0a1f6b74ea2e23bc94df0cb81/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4534c2032ba23be0a1f6b74ea2e23bc94df0cb81", "patch": "@@ -1,3 +1,11 @@\n+2015-10-19  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-fold.c (gimple_phi_nonnegative_warnv_p): New function.\n+\t(gimple_stmt_nonnegative_warnv_p): Use it.\n+\t* match.pd (CPROJ): New operator list.\n+\t(cproj (complex ...)): Move simplifications from ...\n+\t* builtins.c (fold_builtin_cproj): ... here.\n+\n 2015-10-19  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (ix86_expand_vector_move): Use"}, {"sha": "50ed7c6da929fccc0b1ceb7c291fd11dd2798c13", "filename": "gcc/builtins.c", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4534c2032ba23be0a1f6b74ea2e23bc94df0cb81/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4534c2032ba23be0a1f6b74ea2e23bc94df0cb81/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=4534c2032ba23be0a1f6b74ea2e23bc94df0cb81", "patch": "@@ -7657,33 +7657,6 @@ fold_builtin_cproj (location_t loc, tree arg, tree type)\n       else\n \treturn arg;\n     }\n-  else if (TREE_CODE (arg) == COMPLEX_EXPR)\n-    {\n-      tree real = TREE_OPERAND (arg, 0);\n-      tree imag = TREE_OPERAND (arg, 1);\n-\n-      STRIP_NOPS (real);\n-      STRIP_NOPS (imag);\n-      \n-      /* If the real part is inf and the imag part is known to be\n-\t nonnegative, return (inf + 0i).  Remember side-effects are\n-\t possible in the imag part.  */\n-      if (TREE_CODE (real) == REAL_CST\n-\t  && real_isinf (TREE_REAL_CST_PTR (real))\n-\t  && tree_expr_nonnegative_p (imag))\n-\treturn omit_one_operand_loc (loc, type,\n-\t\t\t\t     build_complex_cproj (type, false),\n-\t\t\t\t     arg);\n-      \n-      /* If the imag part is inf, return (inf+I*copysign(0,imag)).\n-\t Remember side-effects are possible in the real part.  */\n-      if (TREE_CODE (imag) == REAL_CST\n-\t  && real_isinf (TREE_REAL_CST_PTR (imag)))\n-\treturn\n-\t  omit_one_operand_loc (loc, type,\n-\t\t\t\tbuild_complex_cproj (type, TREE_REAL_CST_PTR\n-\t\t\t\t\t\t     (imag)->sign), arg);\n-    }\n \n   return NULL_TREE;\n }"}, {"sha": "85ff0186964765f005db8e484c49997b1ad3dee2", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4534c2032ba23be0a1f6b74ea2e23bc94df0cb81/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4534c2032ba23be0a1f6b74ea2e23bc94df0cb81/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=4534c2032ba23be0a1f6b74ea2e23bc94df0cb81", "patch": "@@ -6224,6 +6224,24 @@ gimple_call_nonnegative_warnv_p (gimple *stmt, bool *strict_overflow_p,\n \t\t\t\t\tstrict_overflow_p, depth);\n }\n \n+/* Return true if return value of call STMT is known to be non-negative.\n+   If the return value is based on the assumption that signed overflow is\n+   undefined, set *STRICT_OVERFLOW_P to true; otherwise, don't change\n+   *STRICT_OVERFLOW_P.  DEPTH is the current nesting depth of the query.  */\n+\n+static bool\n+gimple_phi_nonnegative_warnv_p (gimple *stmt, bool *strict_overflow_p,\n+\t\t\t\tint depth)\n+{\n+  for (unsigned i = 0; i < gimple_phi_num_args (stmt); ++i)\n+    {\n+      tree arg = gimple_phi_arg_def (stmt, i);\n+      if (!tree_single_nonnegative_warnv_p (arg, strict_overflow_p, depth + 1))\n+\treturn false;\n+    }\n+  return true;\n+}\n+\n /* Return true if STMT is known to compute a non-negative value.\n    If the return value is based on the assumption that signed overflow is\n    undefined, set *STRICT_OVERFLOW_P to true; otherwise, don't change\n@@ -6241,6 +6259,9 @@ gimple_stmt_nonnegative_warnv_p (gimple *stmt, bool *strict_overflow_p,\n     case GIMPLE_CALL:\n       return gimple_call_nonnegative_warnv_p (stmt, strict_overflow_p,\n \t\t\t\t\t      depth);\n+    case GIMPLE_PHI:\n+      return gimple_phi_nonnegative_warnv_p (stmt, strict_overflow_p,\n+\t\t\t\t\t     depth);\n     default:\n       return false;\n     }"}, {"sha": "98f4b2cbc357fa519048dd24d8de954ef28f8890", "filename": "gcc/match.pd", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4534c2032ba23be0a1f6b74ea2e23bc94df0cb81/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4534c2032ba23be0a1f6b74ea2e23bc94df0cb81/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=4534c2032ba23be0a1f6b74ea2e23bc94df0cb81", "patch": "@@ -61,6 +61,7 @@ along with GCC; see the file COPYING3.  If not see\n (define_operator_list TAN BUILT_IN_TANF BUILT_IN_TAN BUILT_IN_TANL)\n (define_operator_list COSH BUILT_IN_COSHF BUILT_IN_COSH BUILT_IN_COSHL)\n (define_operator_list CEXPI BUILT_IN_CEXPIF BUILT_IN_CEXPI BUILT_IN_CEXPIL)\n+(define_operator_list CPROJ BUILT_IN_CPROJF BUILT_IN_CPROJ BUILT_IN_CPROJL)\n \n /* Simplifications of operations with one constant operand and\n    simplifications to constants or single values.  */\n@@ -2361,6 +2362,32 @@ along with GCC; see the file COPYING3.  If not see\n    (cbrts (pows tree_expr_nonnegative_p@0 @1))\n    (pows @0 (mult @1 { build_real_truncate (type, dconst_third ()); })))))\n \n+/* If the real part is inf and the imag part is known to be\n+   nonnegative, return (inf + 0i).  */\n+(simplify\n+ (CPROJ (complex REAL_CST@0 tree_expr_nonnegative_p@1))\n+ (if (real_isinf (TREE_REAL_CST_PTR (@0)))\n+  (with\n+    {\n+      REAL_VALUE_TYPE rinf;\n+      real_inf (&rinf);\n+    }\n+   { build_complex (type, build_real (TREE_TYPE (type), rinf),\n+\t\t    build_zero_cst (TREE_TYPE (type))); })))\n+/* If the imag part is inf, return (inf+I*copysign(0,imag)).  */\n+(simplify\n+ (CPROJ (complex @0 REAL_CST@1))\n+ (if (real_isinf (TREE_REAL_CST_PTR (@1)))\n+  (with\n+    {\n+      REAL_VALUE_TYPE rinf, rzero = dconst0;\n+      real_inf (&rinf);\n+      rzero.sign = TREE_REAL_CST_PTR (@1)->sign;\n+    }\n+   { build_complex (type, build_real (TREE_TYPE (type), rinf),\n+\t\t    build_real (TREE_TYPE (type), rzero)); })))\n+\n+\n /* Narrowing of arithmetic and logical operations. \n \n    These are conceptually similar to the transformations performed for"}, {"sha": "a5c3aa69125d63edcb6454e3b15c5f7a1efa41ea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4534c2032ba23be0a1f6b74ea2e23bc94df0cb81/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4534c2032ba23be0a1f6b74ea2e23bc94df0cb81/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4534c2032ba23be0a1f6b74ea2e23bc94df0cb81", "patch": "@@ -1,3 +1,7 @@\n+2015-10-19  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/torture/builtin-cproj-1.c: Skip for -O0.\n+\n 2015-10-19  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/67995"}, {"sha": "9aa6691b7b933f892cb7f36e480ee590ea8fc56f", "filename": "gcc/testsuite/gcc.dg/torture/builtin-cproj-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4534c2032ba23be0a1f6b74ea2e23bc94df0cb81/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-cproj-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4534c2032ba23be0a1f6b74ea2e23bc94df0cb81/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-cproj-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-cproj-1.c?ref=4534c2032ba23be0a1f6b74ea2e23bc94df0cb81", "patch": "@@ -6,6 +6,7 @@\n    Origin: Kaveh R. Ghazi,  April 9, 2010.  */\n \n /* { dg-do link } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n /* { dg-add-options ieee } */\n \n /* All references to link_error should go away at compile-time.  The"}]}