{"sha": "7f5ff78ff3f971c11ec67f422b2fd34281db9123", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y1ZmY3OGZmM2Y5NzFjMTFlYzY3ZjQyMmIyZmQzNDI4MWRiOTEyMw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-03-08T20:28:52Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-03-08T20:28:52Z"}, "message": "PR middle-end/97631 - bogus \"writing one too many bytes\" warning for memcpy with strlen argument\n\ngcc/ChangeLog:\n\n\tPR middle-end/97631\n\t* tree-ssa-strlen.c (maybe_warn_overflow): Test rawmem.\n\t(handle_builtin_stxncpy_strncat): Rename locals.  Determine\n\tdestination size from allocation calls.  Issue a more appropriate\n\tkind of warning.\n\t(handle_builtin_memcpy): Pass true as rawmem to maybe_warn_overflow.\n\t(handle_builtin_memset): Same.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/97631\n\t* c-c++-common/Wstringop-overflow.c: Remove unexpected warnings.\n\tAdd an xfail.\n\t* c-c++-common/Wstringop-truncation.c: Add expected warnings.\n\t* gcc.dg/Wstringop-overflow-10.c: Also enable -Wstringop-truncation.\n\t* gcc.dg/Wstringop-overflow-66.c: New test.\n\t* gcc.dg/tree-ssa/strncpy-2.c: Adjust expected warning.", "tree": {"sha": "b7458cb5524353d63a17efea75f21868f8259978", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7458cb5524353d63a17efea75f21868f8259978"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f5ff78ff3f971c11ec67f422b2fd34281db9123", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f5ff78ff3f971c11ec67f422b2fd34281db9123", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f5ff78ff3f971c11ec67f422b2fd34281db9123", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f5ff78ff3f971c11ec67f422b2fd34281db9123/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b64551af5159ea30b5941ddd430001b13936822c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b64551af5159ea30b5941ddd430001b13936822c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b64551af5159ea30b5941ddd430001b13936822c"}], "stats": {"total": 289, "additions": 242, "deletions": 47}, "files": [{"sha": "5757a23141ed96130cbd7ac825248192d8c90077", "filename": "gcc/testsuite/c-c++-common/Wstringop-overflow.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f5ff78ff3f971c11ec67f422b2fd34281db9123/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWstringop-overflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f5ff78ff3f971c11ec67f422b2fd34281db9123/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWstringop-overflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWstringop-overflow.c?ref=7f5ff78ff3f971c11ec67f422b2fd34281db9123", "patch": "@@ -115,28 +115,31 @@ void test_strncpy (char **d, const char* s, int i)\n   T (d, \"123\", sizeof \"123\");\n   T (d, ar, sizeof ar);\n \n-  T (d, s, strlen (s));       /* { dg-warning \"\\\\\\[-Wstringop-overflow=]\" } */\n+  /* There is no overflow in the following calls but they are diagnosed\n+     by -Wstringop-truncation.  Verify that they aren'y also diagnosed\n+     by -Wstringop-overflow.  */\n+  T (d, s, strlen (s));\n \n   {\n-    int n = strlen (s);       /* { dg-message \"length computed here\" } */\n-    T (d, s, n);              /* { dg-warning \"\\\\\\[-Wstringop-overflow=]\" } */\n+    int n = strlen (s);\n+    T (d, s, n);\n   }\n \n   {\n-    unsigned n = strlen (s);   /* { dg-message \"length computed here\" } */\n-    T (d, s, n);               /* { dg-warning \"\\\\\\[-Wstringop-overflow=]\" } */\n+    unsigned n = strlen (s);\n+    T (d, s, n);\n   }\n \n   {\n     size_t n;\n-    n = strlen (s);           /* { dg-message \"length computed here\" } */\n-    T (d, s, n);              /* { dg-warning \"\\\\\\[-Wstringop-overflow=]\" } */\n+    n = strlen (s);\n+    T (d, s, n);\n   }\n \n   {\n     size_t n;\n-    n = strlen (s) - 1;       /* { dg-message \"length computed here\" } */\n-    T (d, s, n);              /* { dg-warning \"\\\\\\[-Wstringop-overflow=]\" } */\n+    n = strlen (s) - 1;\n+    T (d, s, n);\n   }\n \n   {\n@@ -148,11 +151,8 @@ void test_strncpy (char **d, const char* s, int i)\n \n   {\n     /* This use of strncpy is certainly dubious and it could well be\n-       diagnosed by -Wstringop-truncation but it isn't.  That it is\n-       diagnosed with -Wstringop-overflow is more by accident than\n-       by design.  -Wstringop-overflow considers any dependency of\n-       the bound on strlen(s) a potential bug.  */\n-    size_t n = i < strlen (s) ? i : strlen (s);   /* { dg-message \"length computed here\" } */\n-    T (d, s, n);                  /* { dg-message \".strncpy\\[^\\n\\r]* specified bound depends on the length of the source argument\" } */\n+       diagnosed by -Wstringop-truncation but it isn't.  */\n+    size_t n = i < strlen (s) ? i : strlen (s);   /* { dg-message \"length computed here\" \"note\" { xfail *-*-* } } */\n+    T (d, s, n);                  /* { dg-message \".strncpy\\[^\\n\\r]* specified bound depends on the length of the source argument\" \"pr?????\" { xfail *-*-* } } */\n   }\n }"}, {"sha": "114837b2b64e325c9bd101b2e9c9ddbc24706ab9", "filename": "gcc/testsuite/c-c++-common/Wstringop-truncation.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f5ff78ff3f971c11ec67f422b2fd34281db9123/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWstringop-truncation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f5ff78ff3f971c11ec67f422b2fd34281db9123/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWstringop-truncation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWstringop-truncation.c?ref=7f5ff78ff3f971c11ec67f422b2fd34281db9123", "patch": "@@ -226,19 +226,18 @@ void test_strncpy_ptr (char *d, const char* s, const char *t, int i)\n   }\n \n   {\n-    /* The following is likely buggy but there's no apparent truncation\n-       so it's not diagnosed by -Wstringop-truncation.  Instead, it is\n-       diagnosed by -Wstringop-overflow (tested elsewhere).  */\n+    /* The following truncates the terminating nul.  The warning should\n+       say that but doesn't.  */\n     int n;\n     n = strlen (s) - 1;\n-    CPY (d, s, n);\n+    CPY (d, s, n);                  /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n   }\n \n   {\n     /* Same as above.  */\n     size_t n;\n     n = strlen (s) - 1;\n-    CPY (d, s, n);\n+    CPY (d, s, n);                  /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n   }\n \n   {"}, {"sha": "bace08ad5d3b31915ef925bfb45901ab201e5afe", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-10.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f5ff78ff3f971c11ec67f422b2fd34281db9123/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f5ff78ff3f971c11ec67f422b2fd34281db9123/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-10.c?ref=7f5ff78ff3f971c11ec67f422b2fd34281db9123", "patch": "@@ -1,5 +1,7 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -Wstringop-overflow\" } */\n+/* PR tree-optimization/89500 - ICE: tree check: expected integer_cst,\n+   have ssa_name in get_len\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wstringop-overflow -Wstringop-truncation\" } */\n \n void\n foo (char *a)"}, {"sha": "0ecf51149e56fc3b1ca51aa7dec4558b6e57fd85", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-66.c", "status": "added", "additions": 180, "deletions": 0, "changes": 180, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f5ff78ff3f971c11ec67f422b2fd34281db9123/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-66.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f5ff78ff3f971c11ec67f422b2fd34281db9123/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-66.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-66.c?ref=7f5ff78ff3f971c11ec67f422b2fd34281db9123", "patch": "@@ -0,0 +1,180 @@\n+/* PR middle-end/97631 - bogus \"writing one too many bytes\" warning for\n+   memcpy with strlen argument\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+#define NOIPA __attribute__ ((noipa))\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+extern void* malloc (size_t);\n+extern void* memcpy (void*, const void*, size_t);\n+extern void* memmove (void*, const void*, size_t);\n+extern void* memset (void*, int, size_t);\n+extern char* strcpy (char*, const char*);\n+extern char* strncpy (char*, const char*, size_t);\n+extern size_t strlen (const char*);\n+\n+\n+NOIPA char* nowarn_strcpy (char *s)\n+{\n+  size_t n = strlen (s);\n+  char *d = malloc (n + 1);\n+  strcpy (d, s);\n+  return d;\n+}\n+\n+\n+NOIPA char* warn_strcpy (char *s)\n+{\n+  size_t n = strlen (s);\n+  char *d = malloc (n);\n+  strcpy (d, s);        // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  return d;\n+}\n+\n+NOIPA char* warn_strcpy_nz (char *s)\n+{\n+  size_t n = strlen (s);\n+  if (n == 0)\n+    return 0;\n+\n+  char *d = malloc (n);\n+  strcpy (d, s);        // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  return d;\n+}\n+\n+NOIPA char* warn_strcpy_nn (char *s)\n+{\n+  size_t n = strlen (s);\n+  char *d = malloc (n);\n+  if (!d)\n+    return 0;\n+\n+  strcpy (d, s);        // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  return d;\n+}\n+\n+NOIPA char* warn_strcpy_nz_nn (char *s)\n+{\n+  size_t n = strlen (s);\n+  if (n == 0)\n+    return 0;\n+\n+  char *d = malloc (n);\n+  if (!d)\n+    return 0;\n+\n+  strcpy (d, s);        // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  return d;\n+}\n+\n+\n+NOIPA char* nowarn_strncpy_1 (char *s)\n+{\n+  /* There's no overflow or truncation below so verify there is no\n+     warning either.  */\n+  size_t n = strlen (s) + 1;\n+  char *d = malloc (n);\n+  strncpy (d, s, n);\n+  return d;\n+}\n+\n+\n+NOIPA char* warn_strncpy (char *s)\n+{\n+  size_t n = strlen (s);\n+  char *d = malloc (n);\n+  strncpy (d, s, n);    // { dg-warning \"\\\\\\[-Wstringop-truncation\" }\n+  return d;\n+}\n+\n+NOIPA char* warn_strncpy_p1 (char *s)\n+{\n+  size_t n = strlen (s);\n+  char *d = malloc (n + 1);\n+  strncpy (d, s, n);    // { dg-warning \"\\\\\\[-Wstringop-truncation\" }\n+  return d;\n+}\n+\n+NOIPA char* warn_strncpy_nz (char *s)\n+{\n+  size_t n = strlen (s);\n+  if (n == 0)\n+    return 0;\n+\n+  char *d = malloc (n);\n+  strncpy (d, s, n);    // { dg-warning \"\\\\\\[-Wstringop-truncation\" }\n+  return d;\n+\n+}\n+\n+\n+NOIPA char* nowarn_memcpy (char *s)\n+{\n+  size_t n = strlen (s);\n+  char *d = malloc (n);\n+  memcpy (d, s, n);     // { dg-bogus \"\\\\\\[-Wstringop-overflow\" }\n+  return d;\n+}\n+\n+NOIPA char* nowarn_memcpy_nz (char *s)\n+{\n+  size_t n = strlen (s);\n+  if (n == 0)\n+    return 0;\n+\n+  char *d = malloc (n);\n+  memcpy (d, s, n);     // { dg-bogus \"\\\\\\[-Wstringop-overflow\" }\n+  return d;\n+}\n+\n+NOIPA char* nowarn_memcpy_nn (char *s)\n+{\n+  size_t n = strlen (s);\n+  char *d = malloc (n);\n+  if (!d)\n+    return 0;\n+\n+  memcpy (d, s, n);     // { dg-bogus \"\\\\\\[-Wstringop-overflow\" }\n+  return d;\n+}\n+\n+NOIPA char* nowarn_memcpy_nn_nz (char *s)\n+{\n+  size_t n = strlen (s);\n+  if (n == 0)\n+    return 0;\n+\n+  char *d = malloc (n);\n+  if (!d)\n+    return 0;\n+\n+  memcpy (d, s, n);     // { dg-bogus \"\\\\\\[-Wstringop-overflow\" }\n+  return d;\n+\n+}\n+\n+\n+NOIPA char* nowarn_memmove (char *s)\n+{\n+  size_t n = strlen (s);\n+  if (n == 0)\n+    return 0;\n+\n+  char *d = malloc (n);\n+  memmove (d, s, n);    // { dg-bogus \"\\\\\\[-Wstringop-overflow\" }\n+  return d;\n+}\n+\n+\n+NOIPA char* nowarn_memset (char *s, int c)\n+{\n+  size_t n = strlen (s);\n+  if (n == 0)\n+    return 0;\n+\n+  char *d = malloc (n);\n+  memset (d, c, n);     // { dg-bogus \"\\\\\\[-Wstringop-overflow\" }\n+  return d;\n+}"}, {"sha": "e2216abbcbfbf6d30f9e25895f83db8c2b259716", "filename": "gcc/testsuite/gcc.dg/tree-ssa/strncpy-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f5ff78ff3f971c11ec67f422b2fd34281db9123/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstrncpy-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f5ff78ff3f971c11ec67f422b2fd34281db9123/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstrncpy-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstrncpy-2.c?ref=7f5ff78ff3f971c11ec67f422b2fd34281db9123", "patch": "@@ -1,14 +1,14 @@\n /* PR tree-optimization/83075 - Invalid strncpy optimization */\n /* { dg-do run } */\n-/* { dg-options \"-O2 -Wstringop-overflow\" } */\n+/* { dg-options \"-O2 -Wstringop-truncation\" } */\n \n typedef __SIZE_TYPE__ size_t;\n \n __attribute__((noipa)) size_t\n foo (char *p, char *q, size_t *r)\n {\n   size_t n0 = __builtin_strlen (p);\n-  __builtin_strncpy (q, p, n0);\t\t/* { dg-warning \"specified bound depends on the length\" } */\n+  __builtin_strncpy (q, p, n0);\t\t/* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n   size_t n1 = __builtin_strlen (p);\n   *r = n0;\n   return n1;"}, {"sha": "cccd4a06771c96485593580a43f23fbcec725a6b", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 37, "deletions": 23, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f5ff78ff3f971c11ec67f422b2fd34281db9123/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f5ff78ff3f971c11ec67f422b2fd34281db9123/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=7f5ff78ff3f971c11ec67f422b2fd34281db9123", "patch": "@@ -1992,17 +1992,12 @@ maybe_warn_overflow (gimple *stmt, tree len, pointer_query &ptr_qry,\n       && wi::leu_p (lenrng[1], spcrng[1]))\n     return;\n \n-  if (lenrng[0] == spcrng[1]\n-      && (len != destsize\n-\t  || !si || !is_strlen_related_p (si->ptr, len)))\n-    return;\n-\n   location_t loc = gimple_or_expr_nonartificial_location (stmt, dest);\n   bool warned = false;\n   if (wi::leu_p (lenrng[0], spcrng[1]))\n     {\n       if (len != destsize\n-\t  && (!si || !is_strlen_related_p (si->ptr, len)))\n+\t  && (!si || rawmem || !is_strlen_related_p (si->ptr, len)))\n \treturn;\n \n       warned = (writefn\n@@ -3083,7 +3078,12 @@ handle_builtin_stxncpy_strncat (bool append_p, gimple_stmt_iterator *gsi)\n   tree dst = gimple_call_arg (stmt, 0);\n   tree src = gimple_call_arg (stmt, 1);\n   tree len = gimple_call_arg (stmt, 2);\n-  tree dstsize = NULL_TREE, srcsize = NULL_TREE;\n+  /* An upper bound of the size of the destination.  */\n+  tree dstsize = NULL_TREE;\n+  /* The length of the destination and source strings (plus 1 for those\n+     whose FULL_STRING_P is set, i.e., whose length is exact rather than\n+     a lower bound).  */\n+  tree dstlenp1 = NULL_TREE, srclenp1 = NULL_TREE;;\n \n   int didx = get_stridx (dst);\n   if (strinfo *sidst = didx > 0 ? get_strinfo (didx) : NULL)\n@@ -3096,11 +3096,16 @@ handle_builtin_stxncpy_strncat (bool append_p, gimple_stmt_iterator *gsi)\n \t    {\n \t      /* String is known to be nul-terminated.  */\n \t      tree type = TREE_TYPE (sidst->nonzero_chars);\n-\t      dstsize = fold_build2 (PLUS_EXPR, type, sidst->nonzero_chars,\n+\t      dstlenp1 = fold_build2 (PLUS_EXPR, type, sidst->nonzero_chars,\n \t\t\t\t     build_int_cst (type, 1));\n \t    }\n \t  else\n-\t    dstsize = sidst->nonzero_chars;\n+\t    dstlenp1 = sidst->nonzero_chars;\n+\t}\n+      else if (TREE_CODE (sidst->ptr) == SSA_NAME)\n+\t{\n+\t  gimple *def_stmt = SSA_NAME_DEF_STMT (sidst->ptr);\n+\t  dstsize = gimple_call_alloc_size (def_stmt);\n \t}\n \n       dst = sidst->ptr;\n@@ -3121,19 +3126,19 @@ handle_builtin_stxncpy_strncat (bool append_p, gimple_stmt_iterator *gsi)\n \t  if (sisrc->full_string_p)\n \t    {\n \t      tree type = TREE_TYPE (sisrc->nonzero_chars);\n-\t      srcsize = fold_build2 (PLUS_EXPR, type, sisrc->nonzero_chars,\n+\t      srclenp1 = fold_build2 (PLUS_EXPR, type, sisrc->nonzero_chars,\n \t\t\t\t     build_int_cst (type, 1));\n \t    }\n \t  else\n-\t    srcsize = sisrc->nonzero_chars;\n+\t    srclenp1 = sisrc->nonzero_chars;\n \t}\n \n \tsrc = sisrc->ptr;\n     }\n   else\n-    srcsize = NULL_TREE;\n+    srclenp1 = NULL_TREE;\n \n-  if (check_bounds_or_overlap (stmt, dst, src, dstsize, srcsize))\n+  if (check_bounds_or_overlap (stmt, dst, src, dstlenp1, srclenp1))\n     {\n       gimple_set_no_warning (stmt, true);\n       return;\n@@ -3165,9 +3170,10 @@ handle_builtin_stxncpy_strncat (bool append_p, gimple_stmt_iterator *gsi)\n   /* When -Wstringop-truncation is set, try to determine truncation\n      before diagnosing possible overflow.  Truncation is implied by\n      the LEN argument being equal to strlen(SRC), regardless of\n-     whether its value is known.  Otherwise, issue the more generic\n-     -Wstringop-overflow which triggers for LEN arguments that in\n-     any meaningful way depend on strlen(SRC).  */\n+     whether its value is known.  Otherwise, when appending, or\n+     when copying into a destination of known size, issue the more\n+     generic -Wstringop-overflow which triggers for LEN arguments\n+     that in any meaningful way depend on strlen(SRC).  */\n   if (!append_p\n       && sisrc == silen\n       && is_strlen_related_p (src, len)\n@@ -3176,11 +3182,19 @@ handle_builtin_stxncpy_strncat (bool append_p, gimple_stmt_iterator *gsi)\n \t\t     \"copying as many bytes from a string as its length\",\n \t\t     stmt, func))\n     warned = true;\n-  else if (silen && is_strlen_related_p (src, silen->ptr))\n-    warned = warning_at (callloc, OPT_Wstringop_overflow_,\n-\t\t\t \"%G%qD specified bound depends on the length \"\n-\t\t\t \"of the source argument\",\n-\t\t\t stmt, func);\n+  else if ((append_p || !dstsize || len == dstlenp1)\n+\t   && silen && is_strlen_related_p (src, silen->ptr))\n+    {\n+      /* Issue -Wstringop-overflow when appending or when writing into\n+\t a destination of a known size.  Otherwise, when copying into\n+\t a destination of an unknown size, it's truncation.  */\n+      int opt = (append_p || dstsize\n+\t\t ? OPT_Wstringop_overflow_ : OPT_Wstringop_truncation);\n+      warned = warning_at (callloc, opt,\n+\t\t\t   \"%G%qD specified bound depends on the length \"\n+\t\t\t   \"of the source argument\",\n+\t\t\t   stmt, func);\n+    }\n   if (warned)\n     {\n       location_t strlenloc = pss->second;\n@@ -3216,7 +3230,7 @@ handle_builtin_memcpy (enum built_in_function bcode, gimple_stmt_iterator *gsi,\n   if (olddsi != NULL\n       && !integer_zerop (len))\n     {\n-      maybe_warn_overflow (stmt, len, ptr_qry, olddsi, false, false);\n+      maybe_warn_overflow (stmt, len, ptr_qry, olddsi, false, true);\n       adjust_last_stmt (olddsi, stmt, false, ptr_qry);\n     }\n \n@@ -3684,7 +3698,7 @@ handle_builtin_memset (gimple_stmt_iterator *gsi, bool *zero_write,\n   tree memset_size = gimple_call_arg (memset_stmt, 2);\n \n   /* Check for overflow.  */\n-  maybe_warn_overflow (memset_stmt, memset_size, ptr_qry, NULL, false, false);\n+  maybe_warn_overflow (memset_stmt, memset_size, ptr_qry, NULL, false, true);\n \n   /* Bail when there is no statement associated with the destination\n      (the statement may be null even when SI1->ALLOC is not).  */"}]}