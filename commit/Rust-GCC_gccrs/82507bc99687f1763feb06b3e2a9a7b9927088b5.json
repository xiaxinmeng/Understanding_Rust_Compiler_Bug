{"sha": "82507bc99687f1763feb06b3e2a9a7b9927088b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI1MDdiYzk5Njg3ZjE3NjNmZWIwNmIzZTJhOWE3Yjk5MjcwODhiNQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-08-21T11:56:46Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-08-21T11:56:46Z"}, "message": "1.cc: Use proper wchar_t\ttype for the fill argument; minor formatting tweaks.\n\n2004-08-21  Paolo Carlini  <pcarlini@suse.de>\n\n\t* testsuite/22_locale/money_put/put/wchar_t/1.cc: Use proper\n\twchar_t\ttype for the fill argument; minor formatting tweaks.\n\t* testsuite/22_locale/money_put/put/wchar_t/12971.cc: Likewise.\n\t* testsuite/22_locale/money_put/put/wchar_t/2.cc: Likewise.\n\t* testsuite/22_locale/money_put/put/wchar_t/3.cc: Likewise.\n\t* testsuite/22_locale/money_put/put/wchar_t/4.cc: Likewise.\n\t* testsuite/22_locale/money_put/put/wchar_t/5.cc: Likewise.\n\t* testsuite/22_locale/money_put/put/wchar_t/6.cc: Likewise.\n\nFrom-SVN: r86362", "tree": {"sha": "0f109c84165d9305377b78f7ef3d125ac205acef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f109c84165d9305377b78f7ef3d125ac205acef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82507bc99687f1763feb06b3e2a9a7b9927088b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82507bc99687f1763feb06b3e2a9a7b9927088b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82507bc99687f1763feb06b3e2a9a7b9927088b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82507bc99687f1763feb06b3e2a9a7b9927088b5/comments", "author": null, "committer": null, "parents": [{"sha": "0fa1b65cad6cb3ccbf48f992e1710a6953604842", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fa1b65cad6cb3ccbf48f992e1710a6953604842", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fa1b65cad6cb3ccbf48f992e1710a6953604842"}], "stats": {"total": 115, "additions": 66, "deletions": 49}, "files": [{"sha": "40ef639b07cd76350e8c479c1f71bc8e39b966d6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82507bc99687f1763feb06b3e2a9a7b9927088b5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82507bc99687f1763feb06b3e2a9a7b9927088b5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=82507bc99687f1763feb06b3e2a9a7b9927088b5", "patch": "@@ -1,3 +1,14 @@\n+2004-08-21  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* testsuite/22_locale/money_put/put/wchar_t/1.cc: Use proper\n+\twchar_t\ttype for the fill argument; minor formatting tweaks.\n+\t* testsuite/22_locale/money_put/put/wchar_t/12971.cc: Likewise.\n+\t* testsuite/22_locale/money_put/put/wchar_t/2.cc: Likewise.\n+\t* testsuite/22_locale/money_put/put/wchar_t/3.cc: Likewise.\n+\t* testsuite/22_locale/money_put/put/wchar_t/4.cc: Likewise.\n+\t* testsuite/22_locale/money_put/put/wchar_t/5.cc: Likewise.\n+\t* testsuite/22_locale/money_put/put/wchar_t/6.cc: Likewise.\n+\n 2004-08-21  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/basic_ios.tcc (basic_ios<>::copyfmt): Don't deal"}, {"sha": "76d0cdd556f408b6b365594fb26865c48addcd77", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/wchar_t/1.cc", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82507bc99687f1763feb06b3e2a9a7b9927088b5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82507bc99687f1763feb06b3e2a9a7b9927088b5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F1.cc?ref=82507bc99687f1763feb06b3e2a9a7b9927088b5", "patch": "@@ -49,16 +49,17 @@ void test01()\n   // cache the money_put facet\n   wostringstream oss;\n   oss.imbue(loc_de);\n-  const money_put<wchar_t>& mon_put = use_facet<money_put<wchar_t> >(oss.getloc()); \n+  const money_put<wchar_t>& mon_put =\n+    use_facet<money_put<wchar_t> >(oss.getloc()); \n \n-  iterator_type os_it01 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits1);\n+  iterator_type os_it01 = mon_put.put(oss.rdbuf(), true, oss, L' ', digits1);\n   wstring result1 = oss.str();\n-  VERIFY( result1 == L\"7.200.000.000,00 \");\n+  VERIFY( result1 == L\"7.200.000.000,00 \" );\n \n   oss.str(empty);\n-  iterator_type os_it02 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n+  iterator_type os_it02 = mon_put.put(oss.rdbuf(), false, oss, L' ', digits1);\n   wstring result2 = oss.str();\n-  VERIFY( result2 == L\"7.200.000.000,00 \");\n+  VERIFY( result2 == L\"7.200.000.000,00 \" );\n \n   // intl and non-intl versions should be the same.\n   VERIFY( result1 == result2 );\n@@ -67,14 +68,14 @@ void test01()\n   oss.setf(ios_base::showbase);\n \n   oss.str(empty);\n-  iterator_type os_it03 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits1);\n+  iterator_type os_it03 = mon_put.put(oss.rdbuf(), true, oss, L' ', digits1);\n   wstring result3 = oss.str();\n-  VERIFY( result3 == L\"7.200.000.000,00 EUR \");\n+  VERIFY( result3 == L\"7.200.000.000,00 EUR \" );\n \n   oss.str(empty);\n-  iterator_type os_it04 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n+  iterator_type os_it04 = mon_put.put(oss.rdbuf(), false, oss, L' ', digits1);\n   wstring result4 = oss.str();\n-  VERIFY( result4 == L\"7.200.000.000,00 \\x20ac\");\n+  VERIFY( result4 == L\"7.200.000.000,00 \\x20ac\" );\n \n   // intl and non-intl versions should be different.\n   VERIFY( result3 != result4 );\n@@ -87,16 +88,16 @@ void test01()\n   // test various fill strategies\n   oss.str(empty);\n   oss.width(20);\n-  iterator_type os_it10 = mon_put.put(oss.rdbuf(), true, oss, '*', digits2);\n+  iterator_type os_it10 = mon_put.put(oss.rdbuf(), true, oss, L'*', digits2);\n   wstring result10 = oss.str();\n-  VERIFY( result10 == L\"***************-,01*\");\n+  VERIFY( result10 == L\"***************-,01*\" );\n \n   oss.str(empty);\n   oss.width(20);\n   oss.setf(ios_base::internal);\n-  iterator_type os_it11 = mon_put.put(oss.rdbuf(), true, oss, '*', digits2);\n+  iterator_type os_it11 = mon_put.put(oss.rdbuf(), true, oss, L'*', digits2);\n   wstring result11 = oss.str();\n-  VERIFY( result11 == L\"-,01****************\");\n+  VERIFY( result11 == L\"-,01****************\" );\n }\n \n int main()"}, {"sha": "9af992a6474977fe5caa285fe66f6c8569257af6", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/wchar_t/12971.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82507bc99687f1763feb06b3e2a9a7b9927088b5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F12971.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82507bc99687f1763feb06b3e2a9a7b9927088b5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F12971.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F12971.cc?ref=82507bc99687f1763feb06b3e2a9a7b9927088b5", "patch": "@@ -1,6 +1,6 @@\n // 2003-11-09 Paolo Carlini <pcarlini@suse.de>\n \n-// Copyright (C) 2003 Free Software Foundation\n+// Copyright (C) 2003, 2004 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,7 +36,8 @@ void test01()\n   \n   // cache the money_put facet\n   wostringstream oss;\n-  const money_put<wchar_t>& mon_put = use_facet<money_put<wchar_t> >(oss.getloc()); \n+  const money_put<wchar_t>& mon_put =\n+    use_facet<money_put<wchar_t> >(oss.getloc()); \n \n   iterator_type os_it01 = mon_put.put(oss.rdbuf(), true, oss, L' ', amount);\n   wstring result = oss.str();"}, {"sha": "4f6148bcccce27446895fa666631102b7ed71085", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/wchar_t/2.cc", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82507bc99687f1763feb06b3e2a9a7b9927088b5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82507bc99687f1763feb06b3e2a9a7b9927088b5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F2.cc?ref=82507bc99687f1763feb06b3e2a9a7b9927088b5", "patch": "@@ -55,45 +55,48 @@ void test02()\n   // cache the money_put facet\n   wostringstream oss;\n   oss.imbue(loc_hk);\n-  const money_put<wchar_t>& mon_put = use_facet<money_put<wchar_t> >(oss.getloc()); \n+  const money_put<wchar_t>& mon_put =\n+    use_facet<money_put<wchar_t> >(oss.getloc()); \n \n   // now try with showbase, to get currency symbol in format\n   oss.setf(ios_base::showbase);\n \n   // test sign of more than one digit, say hong kong.\n   oss.str(empty);\n-  iterator_type os_it05 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n+  iterator_type os_it05 = mon_put.put(oss.rdbuf(), false, oss, L' ', digits1);\n   wstring result5 = oss.str();\n-  VERIFY( result5 == L\"HK$7,200,000,000.00\");\n+  VERIFY( result5 == L\"HK$7,200,000,000.00\" );\n \n   oss.str(empty);\n-  iterator_type os_it06 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits2);\n+  iterator_type os_it06 = mon_put.put(oss.rdbuf(), true, oss, L' ', digits2);\n   wstring result6 = oss.str();\n-  VERIFY( result6 == L\"(HKD 100,000,000,000.00)\");\n+  VERIFY( result6 == L\"(HKD 100,000,000,000.00)\" );\n \n   // test one-digit formats without zero padding\n   oss.imbue(loc_c);\n   oss.str(empty);\n-  const money_put<wchar_t>& mon_put2 = use_facet<money_put<wchar_t> >(oss.getloc()); \n-  iterator_type os_it07 = mon_put2.put(oss.rdbuf(), true, oss, ' ', digits4);\n+  const money_put<wchar_t>& mon_put2 =\n+    use_facet<money_put<wchar_t> >(oss.getloc()); \n+  iterator_type os_it07 = mon_put2.put(oss.rdbuf(), true, oss, L' ', digits4);\n   wstring result7 = oss.str();\n-  VERIFY( result7 == L\"1\");\n+  VERIFY( result7 == L\"1\" );\n \n   // test one-digit formats with zero padding, zero frac widths\n   oss.imbue(loc_hk);\n   oss.str(empty);\n-  const money_put<wchar_t>& mon_put3 = use_facet<money_put<wchar_t> >(oss.getloc()); \n-  iterator_type os_it08 = mon_put3.put(oss.rdbuf(), true, oss, ' ', digits4);\n+  const money_put<wchar_t>& mon_put3 =\n+    use_facet<money_put<wchar_t> >(oss.getloc()); \n+  iterator_type os_it08 = mon_put3.put(oss.rdbuf(), true, oss, L' ', digits4);\n   wstring result8 = oss.str();\n-  VERIFY( result8 == L\"(HKD .01)\");\n+  VERIFY( result8 == L\"(HKD .01)\" );\n \n   oss.unsetf(ios_base::showbase);\n \n   // test bunk input\n   oss.str(empty);\n-  iterator_type os_it09 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits3);\n+  iterator_type os_it09 = mon_put.put(oss.rdbuf(), true, oss, L' ', digits3);\n   wstring result9 = oss.str();\n-  VERIFY( result9 == L\"\");\n+  VERIFY( result9 == L\"\" );\n }\n \n int main()"}, {"sha": "63f16095cc128ee50821b428431cb3d1842c9be7", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/wchar_t/3.cc", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82507bc99687f1763feb06b3e2a9a7b9927088b5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82507bc99687f1763feb06b3e2a9a7b9927088b5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F3.cc?ref=82507bc99687f1763feb06b3e2a9a7b9927088b5", "patch": "@@ -46,16 +46,17 @@ void test03()\n   // cache the money_put facet\n   wostringstream oss;\n   oss.imbue(loc_de);\n-  const money_put<wchar_t>& mon_put = use_facet<money_put<wchar_t> >(oss.getloc()); \n+  const money_put<wchar_t>& mon_put =\n+    use_facet<money_put<wchar_t> >(oss.getloc()); \n \n-  iterator_type os_it01 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits1);\n+  iterator_type os_it01 = mon_put.put(oss.rdbuf(), true, oss, L' ', digits1);\n   wstring result1 = oss.str();\n-  VERIFY( result1 == L\"7.200.000.000,00 \");\n+  VERIFY( result1 == L\"7.200.000.000,00 \" );\n \n   oss.str(empty);\n-  iterator_type os_it02 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n+  iterator_type os_it02 = mon_put.put(oss.rdbuf(), false, oss, L' ', digits1);\n   wstring result2 = oss.str();\n-  VERIFY( result2 == L\"7.200.000.000,00 \");\n+  VERIFY( result2 == L\"7.200.000.000,00 \" );\n \n   // intl and non-intl versions should be the same.\n   VERIFY( result1 == result2 );\n@@ -64,14 +65,14 @@ void test03()\n   oss.setf(ios_base::showbase);\n \n   oss.str(empty);\n-  iterator_type os_it03 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits1);\n+  iterator_type os_it03 = mon_put.put(oss.rdbuf(), true, oss, L' ', digits1);\n   wstring result3 = oss.str();\n-  VERIFY( result3 == L\"7.200.000.000,00 EUR \");\n+  VERIFY( result3 == L\"7.200.000.000,00 EUR \" );\n \n   oss.str(empty);\n-  iterator_type os_it04 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n+  iterator_type os_it04 = mon_put.put(oss.rdbuf(), false, oss, L' ', digits1);\n   wstring result4 = oss.str();\n-  VERIFY( result4 == L\"7.200.000.000,00 \\x20ac\");\n+  VERIFY( result4 == L\"7.200.000.000,00 \\x20ac\" );\n \n   // intl and non-intl versions should be different.\n   VERIFY( result3 != result4 );"}, {"sha": "06ed50e0c80b82122d5081b846a06f9ccc9b48bd", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/wchar_t/4.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82507bc99687f1763feb06b3e2a9a7b9927088b5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82507bc99687f1763feb06b3e2a9a7b9927088b5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F4.cc?ref=82507bc99687f1763feb06b3e2a9a7b9927088b5", "patch": "@@ -1,6 +1,6 @@\n // 2001-08-27 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -50,15 +50,15 @@ void test04()\n \n   // 01 wstring\n   res = x;\n-  iter_type ret1 = mp.put(res.begin(), false, oss, ' ', str);\n+  iter_type ret1 = mp.put(res.begin(), false, oss, L' ', str);\n   wstring sanity1(res.begin(), ret1);\n   VERIFY( err == goodbit );\n   VERIFY( res == L\"1943xxxxxxxxxxxxx\" );\n   VERIFY( sanity1 == L\"1943\" );\n \n   // 02 long double\n   res = x;\n-  iter_type ret2 = mp.put(res.begin(), false, oss, ' ', ld);\n+  iter_type ret2 = mp.put(res.begin(), false, oss, L' ', ld);\n   wstring sanity2(res.begin(), ret2);\n   VERIFY( err == goodbit );\n   VERIFY( res == L\"1943xxxxxxxxxxxxx\" );"}, {"sha": "bc65998e0b00e3188410fbac211e27d3f4bb80fe", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/wchar_t/5.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82507bc99687f1763feb06b3e2a9a7b9927088b5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82507bc99687f1763feb06b3e2a9a7b9927088b5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F5.cc?ref=82507bc99687f1763feb06b3e2a9a7b9927088b5", "patch": "@@ -1,6 +1,6 @@\n // 2001-08-27 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -26,8 +26,8 @@\n \n struct My_money_io : public std::moneypunct<wchar_t,false>\n {\n-  char_type do_decimal_point() const { return '.'; }\n-  char_type do_thousands_sep() const { return ','; }\n+  char_type do_decimal_point() const { return L'.'; }\n+  char_type do_thousands_sep() const { return L','; }\n   std::string do_grouping() const { return \"\\003\"; }\n   \n   std::wstring do_negative_sign() const { return L\"()\"; }\n@@ -53,13 +53,13 @@ void test05()\n   bool intl = false;\n \n   wstring val(L\"-123456\");\n-  const money_put<wchar_t,OutIt>& mp  =\n+  const money_put<wchar_t, OutIt>& mp  =\n     use_facet<money_put<wchar_t, OutIt> >(loc);\n \n   wostringstream fmt;\n   fmt.imbue(loc);\n   OutIt out(fmt);\n-  mp.put(out,intl,fmt,'*',val);\n+  mp.put(out, intl, fmt, L'*', val);\n   VERIFY( fmt.str() == L\"*(1,234.56)\" );\n }\n "}, {"sha": "30dafd311629d4523f673b7b2a4a1fdbc0c62993", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/wchar_t/6.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82507bc99687f1763feb06b3e2a9a7b9927088b5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82507bc99687f1763feb06b3e2a9a7b9927088b5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F6.cc?ref=82507bc99687f1763feb06b3e2a9a7b9927088b5", "patch": "@@ -1,6 +1,6 @@\n // 2001-08-27 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -26,7 +26,7 @@\n \n struct My_money_io_2 : public std::moneypunct<wchar_t,false>\n {\n-  char_type do_thousands_sep() const { return ','; }\n+  char_type do_thousands_sep() const { return L','; }\n   std::string do_grouping() const { return \"\\001\"; }\n };\n \n@@ -42,13 +42,13 @@ void test06()\n   bool intl = false;\n \n   long double val = 1.0e50L;\n-  const money_put<wchar_t,OutIt>& mp  = \n+  const money_put<wchar_t, OutIt>& mp  = \n     use_facet<money_put<wchar_t, OutIt> >(loc);\n \n   wostringstream fmt;\n   fmt.imbue(loc);\n   OutIt out(fmt);\n-  mp.put(out,intl,fmt,'*',val);\n+  mp.put(out, intl, fmt, L'*', val);\n   VERIFY( fmt.good() );\n }\n "}]}