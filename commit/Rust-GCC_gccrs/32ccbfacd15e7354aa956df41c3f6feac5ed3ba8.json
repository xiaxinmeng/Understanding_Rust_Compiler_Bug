{"sha": "32ccbfacd15e7354aa956df41c3f6feac5ed3ba8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJjY2JmYWNkMTVlNzM1NGFhOTU2ZGY0MWMzZjZmZWFjNWVkM2JhOA==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2010-05-29T17:14:17Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-05-29T17:14:17Z"}, "message": "Do not use annotations on edges in if-conversion.\n\n2010-05-29  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* tree-if-conv.c (add_to_dst_predicate_list): Do not use the ->aux\n\tfield on edges.\n\t(predicate_bbs): Same.\n\t(clean_predicate_lists): Same.\n\t(find_phi_replacement_condition): Do not AND the predicate from\n\tedge->aux.\n\nFrom-SVN: r160030", "tree": {"sha": "56d60098b27c2abeef7761bd662de734c8b07672", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56d60098b27c2abeef7761bd662de734c8b07672"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32ccbfacd15e7354aa956df41c3f6feac5ed3ba8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32ccbfacd15e7354aa956df41c3f6feac5ed3ba8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32ccbfacd15e7354aa956df41c3f6feac5ed3ba8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32ccbfacd15e7354aa956df41c3f6feac5ed3ba8/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a41021ce408363d28bc1b7fe79966f2b99f9304c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a41021ce408363d28bc1b7fe79966f2b99f9304c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a41021ce408363d28bc1b7fe79966f2b99f9304c"}], "stats": {"total": 79, "additions": 24, "deletions": 55}, "files": [{"sha": "a01622a7028d55128e5be5de6f34cc6f0606ed89", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ccbfacd15e7354aa956df41c3f6feac5ed3ba8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ccbfacd15e7354aa956df41c3f6feac5ed3ba8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=32ccbfacd15e7354aa956df41c3f6feac5ed3ba8", "patch": "@@ -1,3 +1,12 @@\n+2010-05-29  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* tree-if-conv.c (add_to_dst_predicate_list): Do not use the ->aux\n+\tfield on edges.\n+\t(predicate_bbs): Same.\n+\t(clean_predicate_lists): Same.\n+\t(find_phi_replacement_condition): Do not AND the predicate from\n+\tedge->aux.\n+\n 2010-05-29  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/44315"}, {"sha": "45ce388891db5c019468fa0fa39e15fae2e1288d", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 15, "deletions": 55, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ccbfacd15e7354aa956df41c3f6feac5ed3ba8/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ccbfacd15e7354aa956df41c3f6feac5ed3ba8/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=32ccbfacd15e7354aa956df41c3f6feac5ed3ba8", "patch": "@@ -163,15 +163,8 @@ add_to_dst_predicate_list (struct loop *loop, edge e,\n   if (prev_cond == boolean_true_node || !prev_cond)\n     new_cond = unshare_expr (cond);\n   else\n-    {\n-      /* Add the condition COND to the e->aux field.  In case the edge\n-\t destination is a PHI node, this condition will be added to\n-\t the block predicate to construct a complete condition.  */\n-      e->aux = cond;\n-\n-      new_cond = fold_build2 (TRUTH_AND_EXPR, boolean_type_node,\n-\t\t\t      unshare_expr (prev_cond), cond);\n-    }\n+    new_cond = fold_build2 (TRUTH_AND_EXPR, boolean_type_node,\n+\t\t\t    unshare_expr (prev_cond), cond);\n \n   add_to_predicate_list (e->dest, new_cond);\n   return new_cond;\n@@ -469,12 +462,12 @@ get_loop_body_in_if_conv_order (const struct loop *loop)\n /* Returns true when the analysis of the predicates for all the basic\n    blocks in LOOP succeeded.\n \n-   predicate_bbs first clears the ->aux fields of the edges and basic\n-   blocks.  These fields are then initialized with the tree\n-   expressions representing the predicates under which a basic block\n-   is executed in the LOOP.  As the loop->header is executed at each\n-   iteration, it has the \"true\" predicate.  Other statements executed\n-   under a condition are predicated with that condition, for example\n+   predicate_bbs first clears the ->aux fields of the basic blocks.\n+   These fields are then initialized with the tree expressions\n+   representing the predicates under which a basic block is executed\n+   in the LOOP.  As the loop->header is executed at each iteration, it\n+   has the \"true\" predicate.  Other statements executed under a\n+   condition are predicated with that condition, for example\n \n    | if (x)\n    |   S1;\n@@ -490,18 +483,7 @@ predicate_bbs (loop_p loop)\n   unsigned int i;\n \n   for (i = 0; i < loop->num_nodes; i++)\n-    {\n-      edge e;\n-      edge_iterator ei;\n-      basic_block bb = ifc_bbs [i];\n-      gimple_stmt_iterator itr = gsi_start_phis (bb);\n-\n-      if (!gsi_end_p (itr))\n-\tFOR_EACH_EDGE (e, ei, bb->preds)\n-\t  e->aux = NULL;\n-\n-      bb->aux = NULL;\n-    }\n+    ifc_bbs[i]->aux = NULL;\n \n   for (i = 0; i < loop->num_nodes; i++)\n     {\n@@ -714,26 +696,18 @@ if_convertible_loop_p (struct loop *loop)\n \n /* During if-conversion, the bb->aux field is used to hold a predicate\n    list.  This function cleans for all the basic blocks in the given\n-   LOOP their predicate list.  It also cleans up the e->aux field of\n-   all the successor edges: e->aux is used to hold the true and false\n-   conditions for conditional expressions.  */\n+   LOOP their predicate list.  */\n \n static void\n clean_predicate_lists (struct loop *loop)\n {\n-  basic_block *bb;\n   unsigned int i;\n-  edge e;\n-  edge_iterator ei;\n+  basic_block *bbs = get_loop_body (loop);\n \n-  bb = get_loop_body (loop);\n   for (i = 0; i < loop->num_nodes; i++)\n-    {\n-      bb[i]->aux = NULL;\n-      FOR_EACH_EDGE (e, ei, bb[i]->succs)\n-\te->aux = NULL;\n-    }\n-  free (bb);\n+    bbs[i]->aux = NULL;\n+\n+  free (bbs);\n }\n \n /* Basic block BB has two predecessors.  Using predecessor's bb->aux\n@@ -799,28 +773,14 @@ find_phi_replacement_condition (struct loop *loop,\n     {\n       *cond = (tree) (second_edge->src)->aux;\n \n-      /* If there is a condition on an incoming edge, add it to the\n-\t incoming bb predicate.  */\n-      if (second_edge->aux)\n-\t*cond = build2 (TRUTH_AND_EXPR, boolean_type_node,\n-\t\t\t*cond, (tree) second_edge->aux);\n-\n       if (TREE_CODE (*cond) == TRUTH_NOT_EXPR)\n \t*cond = invert_truthvalue (*cond);\n       else\n \t/* Select non loop header bb.  */\n \tfirst_edge = second_edge;\n     }\n   else\n-    {\n-      *cond = (tree) (first_edge->src)->aux;\n-\n-      /* If there is a condition on an incoming edge, add it to the\n-\t incoming bb predicate.  */\n-      if (first_edge->aux)\n-\t*cond = build2 (TRUTH_AND_EXPR, boolean_type_node,\n-\t\t\t*cond, (tree) first_edge->aux);\n-    }\n+    *cond = (tree) (first_edge->src)->aux;\n \n   /* Gimplify the condition: the vectorizer prefers to have gimple\n      values as conditions.  Various targets use different means to"}]}