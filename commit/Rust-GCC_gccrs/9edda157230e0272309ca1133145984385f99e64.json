{"sha": "9edda157230e0272309ca1133145984385f99e64", "node_id": "C_kwDOANBUbNoAKDllZGRhMTU3MjMwZTAyNzIzMDljYTExMzMxNDU5ODQzODVmOTllNjQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-22T09:05:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-22T09:05:50Z"}, "message": "Merge #754\n\n754: Add new unafety enum r=philberty a=npate012\n\nFixes #733 \r\n\r\nunsafety enum has been implemented in rust/util/rust-common.h. Occurrences of has_unsafe boolean variable has been replaced with an unsafety variable of new enum type.\n\nCo-authored-by: Nirmal Patel <npate012@gmail.com>", "tree": {"sha": "459ed1b2791289b497b860e6c60abd3115d3f996", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/459ed1b2791289b497b860e6c60abd3115d3f996"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9edda157230e0272309ca1133145984385f99e64", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhcn7uCRBK7hj4Ov3rIwAARDAIACheBbGOn5uxrhAdMz6HCbRO\nKDWb5BePyLvm7u9MEZIASGT/7VcBG6WtQT76YX6O0Ta04f+/LOtpRgD2hgIUCZGI\nWPGTkTajDBZBVkxLj63ED7/ZZRQUpzPfhtytW+lY7sZJPMHxpluWxsJ/r0OhCEKM\nsN0mXg4VOdJ3JjGEwRmtuaVxn2bXDS6DxpjBq1n+vFHi8LK8MOtHmulHJeWERX9o\nlBvk6SzQoSwySsfaMWl07XbOQEzJbk7rspInpmbyleXD6jvehvjiXN8biPbRcCpi\n7RdDQOPP3VrNUcF8gyM51XlSPml4h3sMVIb59tY9TPfsqfUy+TH7N96jdI/bXuk=\n=fsoZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 459ed1b2791289b497b860e6c60abd3115d3f996\nparent 649e3e074bf8306bf0eb042f10483dbd61cd040b\nparent 4d19ffcd4a6260fc33743ac33e23e3a1e61aeff8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1634893550 +0000\ncommitter GitHub <noreply@github.com> 1634893550 +0000\n\nMerge #754\n\n754: Add new unafety enum r=philberty a=npate012\n\nFixes #733 \r\n\r\nunsafety enum has been implemented in rust/util/rust-common.h. Occurrences of has_unsafe boolean variable has been replaced with an unsafety variable of new enum type.\n\nCo-authored-by: Nirmal Patel <npate012@gmail.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9edda157230e0272309ca1133145984385f99e64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9edda157230e0272309ca1133145984385f99e64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9edda157230e0272309ca1133145984385f99e64/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "649e3e074bf8306bf0eb042f10483dbd61cd040b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/649e3e074bf8306bf0eb042f10483dbd61cd040b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/649e3e074bf8306bf0eb042f10483dbd61cd040b"}, {"sha": "4d19ffcd4a6260fc33743ac33e23e3a1e61aeff8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d19ffcd4a6260fc33743ac33e23e3a1e61aeff8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d19ffcd4a6260fc33743ac33e23e3a1e61aeff8"}], "stats": {"total": 50, "additions": 31, "deletions": 19}, "files": [{"sha": "563a90caf10431e553a695af57be242e934ebdcb", "filename": "gcc/rust/hir/rust-ast-lower-implitem.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9edda157230e0272309ca1133145984385f99e64/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9edda157230e0272309ca1133145984385f99e64/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h?ref=9edda157230e0272309ca1133145984385f99e64", "patch": "@@ -119,7 +119,7 @@ class ASTLowerImplItem : public ASTLoweringBase\n     std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::FunctionQualifiers qualifiers (\n-      HIR::FunctionQualifiers::AsyncConstStatus::NONE, false);\n+      HIR::FunctionQualifiers::AsyncConstStatus::NONE, Unsafety::Normal);\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n \n     // need\n@@ -203,7 +203,7 @@ class ASTLowerImplItem : public ASTLoweringBase\n     std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::FunctionQualifiers qualifiers (\n-      HIR::FunctionQualifiers::AsyncConstStatus::NONE, false);\n+      HIR::FunctionQualifiers::AsyncConstStatus::NONE, Unsafety::Normal);\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n \n     // need\n@@ -315,7 +315,7 @@ class ASTLowerTraitItem : public ASTLoweringBase\n     std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::FunctionQualifiers qualifiers (\n-      HIR::FunctionQualifiers::AsyncConstStatus::NONE, false);\n+      HIR::FunctionQualifiers::AsyncConstStatus::NONE, Unsafety::Normal);\n \n     std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;\n     if (ref.has_generics ())\n@@ -393,7 +393,7 @@ class ASTLowerTraitItem : public ASTLoweringBase\n     std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::FunctionQualifiers qualifiers (\n-      HIR::FunctionQualifiers::AsyncConstStatus::NONE, false);\n+      HIR::FunctionQualifiers::AsyncConstStatus::NONE, Unsafety::Normal);\n \n     std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;\n     if (ref.has_generics ())"}, {"sha": "892a7bff48d768fcec9af521f506f6b6bb10e448", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9edda157230e0272309ca1133145984385f99e64/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9edda157230e0272309ca1133145984385f99e64/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=9edda157230e0272309ca1133145984385f99e64", "patch": "@@ -384,7 +384,7 @@ class ASTLoweringItem : public ASTLoweringBase\n     std::vector<std::unique_ptr<HIR::WhereClauseItem>> where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::FunctionQualifiers qualifiers (\n-      HIR::FunctionQualifiers::AsyncConstStatus::NONE, false);\n+      HIR::FunctionQualifiers::AsyncConstStatus::NONE, Unsafety::Normal);\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n \n     // need\n@@ -604,8 +604,14 @@ class ASTLoweringItem : public ASTLoweringBase\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n+    auto trait_unsafety = Unsafety::Normal;\n+    if (trait.is_unsafe ())\n+      {\n+\ttrait_unsafety = Unsafety::Unsafe;\n+      }\n+\n     HIR::Trait *hir_trait\n-      = new HIR::Trait (mapping, trait.get_identifier (), trait.is_unsafe (),\n+      = new HIR::Trait (mapping, trait.get_identifier (), trait_unsafety,\n \t\t\tstd::move (generic_params),\n \t\t\tstd::move (type_param_bounds), where_clause,\n \t\t\tstd::move (trait_items), vis, trait.get_outer_attrs (),"}, {"sha": "01acb39442f6cfd8210b205581ae12c87c42d3b4", "filename": "gcc/rust/hir/rust-ast-lower-stmt.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9edda157230e0272309ca1133145984385f99e64/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9edda157230e0272309ca1133145984385f99e64/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h?ref=9edda157230e0272309ca1133145984385f99e64", "patch": "@@ -329,7 +329,7 @@ class ASTLoweringStmt : public ASTLoweringBase\n     std::vector<std::unique_ptr<HIR::WhereClauseItem>> where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::FunctionQualifiers qualifiers (\n-      HIR::FunctionQualifiers::AsyncConstStatus::NONE, false);\n+      HIR::FunctionQualifiers::AsyncConstStatus::NONE, Unsafety::Normal);\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n \n     // need"}, {"sha": "30da36d4af3dc37d1d8a5f1c310335490021b893", "filename": "gcc/rust/hir/rust-ast-lower-type.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9edda157230e0272309ca1133145984385f99e64/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9edda157230e0272309ca1133145984385f99e64/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h?ref=9edda157230e0272309ca1133145984385f99e64", "patch": "@@ -138,7 +138,7 @@ class ASTLoweringType : public ASTLoweringBase\n     bool is_variadic = false;\n     std::vector<HIR::LifetimeParam> lifetime_params;\n     HIR::FunctionQualifiers qualifiers (\n-      HIR::FunctionQualifiers::AsyncConstStatus::NONE, false);\n+      HIR::FunctionQualifiers::AsyncConstStatus::NONE, Unsafety::Normal);\n \n     std::vector<HIR::MaybeNamedParam> named_params;\n     for (auto &param : fntype.get_function_params ())"}, {"sha": "21130a25d9dee2d8fa3993d9d15ed12bfbe7353e", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9edda157230e0272309ca1133145984385f99e64/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9edda157230e0272309ca1133145984385f99e64/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=9edda157230e0272309ca1133145984385f99e64", "patch": "@@ -667,7 +667,7 @@ Trait::as_string () const\n {\n   std::string str = VisItem::as_string ();\n \n-  if (has_unsafe)\n+  if (unsafety == Unsafety::Unsafe)\n     {\n       str += \"unsafe \";\n     }\n@@ -1989,7 +1989,7 @@ FunctionQualifiers::as_string () const\n       return \"ERROR_MARK_STRING: async-const status failure\";\n     }\n \n-  if (has_unsafe)\n+  if (unsafety == Unsafety::Unsafe)\n     {\n       str += \"unsafe \";\n     }"}, {"sha": "28d350e78b061cc7f2962941d09cfe8a6e61d1a5", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9edda157230e0272309ca1133145984385f99e64/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9edda157230e0272309ca1133145984385f99e64/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=9edda157230e0272309ca1133145984385f99e64", "patch": "@@ -440,19 +440,19 @@ struct FunctionQualifiers\n \n private:\n   AsyncConstStatus const_status;\n-  bool has_unsafe;\n+  Unsafety unsafety;\n   bool has_extern;\n   std::string extern_abi; // e.g. extern \"C\" fn() -> i32 {}\n   // TODO: maybe ensure that extern_abi only exists if extern exists?\n \n   // should this store location info?\n \n public:\n-  FunctionQualifiers (AsyncConstStatus const_status, bool has_unsafe,\n+  FunctionQualifiers (AsyncConstStatus const_status, Unsafety unsafety,\n \t\t      bool has_extern = false,\n \t\t      std::string extern_abi = std::string ())\n-    : const_status (const_status), has_unsafe (has_unsafe),\n-      has_extern (has_extern), extern_abi (std::move (extern_abi))\n+    : const_status (const_status), unsafety (unsafety), has_extern (has_extern),\n+      extern_abi (std::move (extern_abi))\n   {\n     if (!this->extern_abi.empty ())\n       {\n@@ -2433,7 +2433,7 @@ class TraitItemType : public TraitItem\n // Rust trait item declaration HIR node\n class Trait : public VisItem\n {\n-  bool has_unsafe;\n+  Unsafety unsafety;\n   Identifier name;\n   std::vector<std::unique_ptr<GenericParam>> generic_params;\n   std::vector<std::unique_ptr<TypeParamBound>> type_param_bounds;\n@@ -2464,14 +2464,14 @@ class Trait : public VisItem\n   Identifier get_name () const { return name; }\n \n   // Mega-constructor\n-  Trait (Analysis::NodeMapping mappings, Identifier name, bool is_unsafe,\n+  Trait (Analysis::NodeMapping mappings, Identifier name, Unsafety unsafety,\n \t std::vector<std::unique_ptr<GenericParam>> generic_params,\n \t std::vector<std::unique_ptr<TypeParamBound>> type_param_bounds,\n \t WhereClause where_clause,\n \t std::vector<std::unique_ptr<TraitItem>> trait_items, Visibility vis,\n \t AST::AttrVec outer_attrs, Location locus)\n     : VisItem (std::move (mappings), std::move (vis), std::move (outer_attrs)),\n-      has_unsafe (is_unsafe), name (std::move (name)),\n+      unsafety (unsafety), name (std::move (name)),\n       generic_params (std::move (generic_params)),\n       type_param_bounds (std::move (type_param_bounds)),\n       where_clause (std::move (where_clause)),\n@@ -2480,7 +2480,7 @@ class Trait : public VisItem\n \n   // Copy constructor with vector clone\n   Trait (Trait const &other)\n-    : VisItem (other), has_unsafe (other.has_unsafe), name (other.name),\n+    : VisItem (other), unsafety (other.unsafety), name (other.name),\n       where_clause (other.where_clause), locus (other.locus)\n   {\n     generic_params.reserve (other.generic_params.size ());\n@@ -2501,7 +2501,7 @@ class Trait : public VisItem\n   {\n     VisItem::operator= (other);\n     name = other.name;\n-    has_unsafe = other.has_unsafe;\n+    unsafety = other.unsafety;\n     where_clause = other.where_clause;\n     locus = other.locus;\n "}, {"sha": "483fe171c596ff025fe847a30f21fe22551834de", "filename": "gcc/rust/util/rust-common.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9edda157230e0272309ca1133145984385f99e64/gcc%2Frust%2Futil%2Frust-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9edda157230e0272309ca1133145984385f99e64/gcc%2Frust%2Futil%2Frust-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-common.h?ref=9edda157230e0272309ca1133145984385f99e64", "patch": "@@ -29,6 +29,12 @@ enum Mutability\n   Mut\n };\n \n+enum Unsafety\n+{\n+  Unsafe,\n+  Normal\n+};\n+\n } // namespace Rust\n \n #endif // RUST_COMMON"}]}